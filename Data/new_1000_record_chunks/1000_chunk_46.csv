record_number,buggy_code,fixed_code
45001,"@Override public void onDisable(){
  configManager.save();
  log(Level.INFO,""String_Node_Str"");
}","@Override public void onDisable(){
  configManager.save();
  wolfManager.unload();
  wolfInventoryManager.unload();
  log(Level.INFO,""String_Node_Str"");
}"
45002,"@Override public void onPlayerInteractEntity(PlayerInteractEntityEvent event){
  if (!event.isCancelled()) {
    Player player=event.getPlayer();
    Entity entity=event.getRightClicked();
    World world=entity.getWorld();
    WorldConfig worldConfig=configManager.getWorldConfig(world);
    if (entity instanceof Wolf) {
      Wolf wolf=(Wolf)entity;
      if (wolf.isTamed() && wolf.getOwner().equals(player)) {
        com.halvors.wolf.wolf.Wolf wolf1=wolfManager.getWolf(wolf);
        Material item=player.getItemInHand().getType();
        if (item.equals(Material.BONE)) {
          if (plugin.hasPermissions(player,""String_Node_Str"")) {
            selectedWolfManager.addSelectedWolf(player.getName(),wolf);
            player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
          }
        }
 else         if (item.equals(Material.PAPER)) {
          if (plugin.hasPermissions(player,""String_Node_Str"")) {
            int health=wolf.getHealth();
            int maxHealth=20;
            player.sendMessage(""String_Node_Str"" + ChatColor.YELLOW + wolf1.getName());
            player.sendMessage(""String_Node_Str"" + ChatColor.YELLOW + Integer.toString(health)+ ""String_Node_Str""+ Integer.toString(maxHealth));
          }
        }
 else         if (item.equals(Material.CHEST)) {
          if (plugin.hasPermissions(player,""String_Node_Str"")) {
            if (worldConfig.wolfInventory) {
              if (wolf1.hasInventory()) {
                EntityPlayer entityPlayer=((CraftPlayer)player).getHandle();
                entityPlayer.a(wolf1.getInventory());
              }
 else {
                wolf1.addInventory();
                player.getItemInHand().setAmount(player.getItemInHand().getAmount() - 1);
                player.sendMessage(ChatColor.YELLOW + wolf1.getName() + ChatColor.WHITE+ ""String_Node_Str"");
              }
            }
          }
        }
      }
    }
  }
}","@Override public void onPlayerInteractEntity(PlayerInteractEntityEvent event){
  if (!event.isCancelled()) {
    Player player=event.getPlayer();
    Entity entity=event.getRightClicked();
    World world=entity.getWorld();
    WorldConfig worldConfig=configManager.getWorldConfig(world);
    if (entity instanceof Wolf) {
      Wolf wolf=(Wolf)entity;
      if (wolf.isTamed() && wolf.getOwner().equals(player)) {
        if (!wolfManager.hasWolf(wolf.getUniqueId())) {
          wolfManager.addWolf(wolf);
          com.halvors.wolf.wolf.Wolf wolf1=wolfManager.getWolf(wolf);
          player.sendMessage(""String_Node_Str"" + ChatColor.YELLOW + wolf1.getName());
          player.sendMessage(""String_Node_Str"");
        }
        com.halvors.wolf.wolf.Wolf wolf1=wolfManager.getWolf(wolf);
        Material item=player.getItemInHand().getType();
        if (item.equals(Material.BONE)) {
          if (plugin.hasPermissions(player,""String_Node_Str"")) {
            selectedWolfManager.addSelectedWolf(player.getName(),wolf);
            player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
          }
        }
 else         if (item.equals(Material.PAPER)) {
          if (plugin.hasPermissions(player,""String_Node_Str"")) {
            int health=wolf.getHealth();
            int maxHealth=20;
            player.sendMessage(""String_Node_Str"" + ChatColor.YELLOW + wolf1.getName());
            player.sendMessage(""String_Node_Str"" + ChatColor.YELLOW + Integer.toString(health)+ ""String_Node_Str""+ Integer.toString(maxHealth));
          }
        }
 else         if (item.equals(Material.CHEST)) {
          if (plugin.hasPermissions(player,""String_Node_Str"")) {
            if (worldConfig.wolfInventory) {
              if (wolf1.hasInventory()) {
                EntityPlayer entityPlayer=((CraftPlayer)player).getHandle();
                entityPlayer.a(wolf1.getInventory());
              }
 else {
                wolf1.addInventory();
                player.getItemInHand().setAmount(player.getItemInHand().getAmount() - 1);
                player.sendMessage(ChatColor.YELLOW + wolf1.getName() + ChatColor.WHITE+ ""String_Node_Str"");
              }
            }
          }
        }
      }
    }
  }
}"
45003,"public WolfServerListener(final WolfPlugin plugin){
  this.wolfManager=plugin.getWolfManager();
  this.wolfInventoryManager=plugin.getWolfInventoryManager();
}","public WolfServerListener(final WolfPlugin plugin){
}"
45004,"@Override public void onPluginEnable(PluginEnableEvent event){
  wolfManager.load();
  wolfInventoryManager.load();
}","@Override public void onPluginEnable(PluginEnableEvent event){
}"
45005,"@Override public void onPluginDisable(PluginDisableEvent event){
  wolfManager.unload();
  wolfInventoryManager.unload();
}","@Override public void onPluginDisable(PluginDisableEvent event){
}"
45006,"@Override public void onChunkLoad(ChunkLoadEvent event){
  List<Entity> entities=Arrays.asList(event.getChunk().getEntities());
  for (  Entity entity : entities) {
    if (entity instanceof Wolf) {
      Wolf wolf=(Wolf)entity;
      if (wolf.isTamed()) {
        if (wolfManager.hasWolf(wolf)) {
          wolfManager.loadWolf(wolf);
        }
 else {
          wolfManager.addWolf(wolf);
        }
      }
    }
  }
}","@Override public void onChunkLoad(ChunkLoadEvent event){
  List<Entity> entities=Arrays.asList(event.getChunk().getEntities());
  for (  Entity entity : entities) {
    if (entity instanceof Wolf) {
      Wolf wolf=(Wolf)entity;
      if (wolf.isTamed()) {
        if (wolfManager.hasWolf(wolf.getUniqueId())) {
          wolfManager.loadWolf(wolf);
        }
 else {
          wolfManager.addWolf(wolf);
        }
      }
    }
  }
}"
45007,"@Override public void onChunkUnload(ChunkUnloadEvent event){
  List<Entity> entities=Arrays.asList(event.getChunk().getEntities());
  for (  Entity entity : entities) {
    if (entity instanceof Wolf) {
      Wolf wolf=(Wolf)entity;
      if (wolf.isTamed()) {
        if (wolfManager.hasWolf(wolf)) {
          wolfManager.unloadWolf(wolf);
        }
 else {
          wolfManager.addWolf(wolf);
        }
      }
    }
  }
}","@Override public void onChunkUnload(ChunkUnloadEvent event){
  List<Entity> entities=Arrays.asList(event.getChunk().getEntities());
  for (  Entity entity : entities) {
    if (entity instanceof Wolf) {
    }
  }
}"
45008,"public void fillFromDBTable(String[] rows){
  String[] chestRow1=rows[0].split(""String_Node_Str"");
  String[] chestRow2=rows[1].split(""String_Node_Str"");
  String[] chestRow3=rows[2].split(""String_Node_Str"");
  for (int i=0; i < getSize(); i++) {
    String[] item=null;
    if (i >= 0 && i <= 8) {
      item=chestRow1[i].split(""String_Node_Str"");
    }
 else     if (i >= 9 && i <= 17) {
      item=chestRow2[i - 9].split(""String_Node_Str"");
    }
 else     if (i >= 18 && i <= 26) {
      item=chestRow3[i - 18].split(""String_Node_Str"");
    }
    int typeId=(item[0] == null ? 0 : Integer.valueOf(item[0]));
    short damage=(item[1] == null ? -1 : Short.valueOf(item[1]));
    int amount=(item[2] == null ? 0 : Integer.valueOf(item[2]));
    if (typeId < 1 || damage < 0 || amount < 1) {
      setItem(i,new ItemStack(null));
    }
 else {
      setItem(i,new ItemStack(typeId,amount,damage));
    }
  }
}","public void fillFromDBTable(String[] rows){
  String[] chestRow1=rows[0].split(""String_Node_Str"");
  String[] chestRow2=rows[1].split(""String_Node_Str"");
  String[] chestRow3=rows[2].split(""String_Node_Str"");
  for (int i=0; i < getSize(); i++) {
    String[] item=null;
    if (i >= 0 && i <= 8) {
      item=chestRow1[i].split(""String_Node_Str"");
    }
 else     if (i >= 9 && i <= 17) {
      item=chestRow2[i - 9].split(""String_Node_Str"");
    }
 else     if (i >= 18 && i <= 26) {
      item=chestRow3[i - 18].split(""String_Node_Str"");
    }
    int typeId=(item[0] == null ? 0 : Integer.valueOf(item[0]));
    short damage=(item[1] == null ? -1 : Short.valueOf(item[1]));
    int amount=(item[2] == null ? 0 : Integer.valueOf(item[2]));
    if (typeId < 1 || damage < 0 || amount < 1) {
      super.setItem(i,null);
    }
 else {
      setItem(i,new ItemStack(typeId,amount,damage));
    }
  }
}"
45009,"private void setupPermissions(){
  Plugin permissions=this.getServer().getPluginManager().getPlugin(""String_Node_Str"");
  if (Permissions == null) {
    if (permissions != null) {
      Permissions=((Permissions)permissions).getHandler();
    }
 else {
      log(Level.INFO,""String_Node_Str"");
    }
  }
}","private void setupPermissions(){
  Plugin permissions=getServer().getPluginManager().getPlugin(""String_Node_Str"");
  if (Permissions == null) {
    if (permissions != null) {
      Permissions=((Permissions)permissions).getHandler();
    }
 else {
      log(Level.INFO,""String_Node_Str"");
    }
  }
}"
45010,"@Override public void onEnable(){
  pm=this.getServer().getPluginManager();
  pdfFile=this.getDescription();
  name=pdfFile.getName();
  version=pdfFile.getVersion();
  configManager.load();
  pm.registerEvent(Event.Type.CREATURE_SPAWN,entityListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.ENTITY_DEATH,entityListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.ENTITY_TAME,entityListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.ENTITY_TARGET,entityListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_INTERACT,playerListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_INTERACT_ENTITY,playerListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.CHUNK_LOAD,worldListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.CHUNK_UNLOAD,worldListener,Event.Priority.Normal,this);
  this.getCommand(""String_Node_Str"").setExecutor(new WolfCommandExecutor(this));
  log(Level.INFO,""String_Node_Str"" + version + ""String_Node_Str"");
  setupPermissions();
  setupDatabase();
  wolfManager.load();
  wolfInventoryManager.load();
}","@Override public void onEnable(){
  pm=getServer().getPluginManager();
  pdfFile=getDescription();
  name=pdfFile.getName();
  version=pdfFile.getVersion();
  configManager.load();
  pm.registerEvent(Event.Type.CREATURE_SPAWN,entityListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.ENTITY_DEATH,entityListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.ENTITY_TAME,entityListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.ENTITY_TARGET,entityListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_INTERACT,playerListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_INTERACT_ENTITY,playerListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.CHUNK_LOAD,worldListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.CHUNK_UNLOAD,worldListener,Event.Priority.Normal,this);
  getCommand(""String_Node_Str"").setExecutor(new WolfCommandExecutor(this));
  log(Level.INFO,""String_Node_Str"" + version + ""String_Node_Str"");
  setupPermissions();
  setupDatabase();
  wolfManager.load();
  wolfInventoryManager.load();
}"
45011,"private void setupDatabase(){
  try {
    this.getDatabase().find(WolfTable.class).findRowCount();
    this.getDatabase().find(WolfInventoryTable.class).findRowCount();
  }
 catch (  PersistenceException ex) {
    log(Level.INFO,""String_Node_Str"" + getDescription().getName() + ""String_Node_Str"");
    installDDL();
  }
}","private void setupDatabase(){
  try {
    getDatabase().find(WolfTable.class).findRowCount();
    getDatabase().find(WolfInventoryTable.class).findRowCount();
  }
 catch (  PersistenceException ex) {
    log(Level.INFO,""String_Node_Str"" + getDescription().getName() + ""String_Node_Str"");
    installDDL();
  }
}"
45012,"@Override public void onEntityTame(EntityTameEvent event){
  if (!event.isCancelled()) {
    Entity entity=event.getEntity();
    Player owner=(Player)event.getOwner();
    World world=entity.getWorld();
    WorldConfig worldConfig=configManager.getWorldConfig(world);
    if (entity instanceof Wolf) {
      Wolf wolf=(Wolf)entity;
      if (worldConfig.limitEnable) {
        List<WolfTable> wts=wolfManager.getWolfTables(owner);
        int size=wts.size();
        int limit=worldConfig.limitValue;
        if (size >= limit) {
          owner.sendMessage(""String_Node_Str"" + ChatColor.YELLOW + Integer.toString(limit));
          event.setCancelled(true);
          return;
        }
      }
      wolfManager.addWolf(wolf);
      if (wolfManager.hasWolf(wolf)) {
        com.halvors.wolf.wolf.Wolf wolf1=wolfManager.getWolf(wolf);
        owner.sendMessage(""String_Node_Str"" + ChatColor.YELLOW + wolf1.getName());
        owner.sendMessage(""String_Node_Str"");
      }
    }
  }
}","@Override public void onEntityTame(EntityTameEvent event){
  if (!event.isCancelled()) {
    Entity entity=event.getEntity();
    Player owner=(Player)event.getOwner();
    World world=entity.getWorld();
    WorldConfig worldConfig=configManager.getWorldConfig(world);
    if (entity instanceof Wolf) {
      Wolf wolf=(Wolf)entity;
      if (worldConfig.limitEnable) {
        List<WolfTable> wts=wolfManager.getWolfTables(owner);
        int size=wts.size();
        int limit=worldConfig.limitValue;
        if (size >= limit) {
          owner.sendMessage(""String_Node_Str"" + ChatColor.YELLOW + Integer.toString(limit));
          event.setCancelled(true);
          return;
        }
      }
      if (wolfManager.addWolf(wolf)) {
        com.halvors.wolf.wolf.Wolf wolf1=wolfManager.getWolf(wolf);
        owner.sendMessage(""String_Node_Str"" + ChatColor.YELLOW + wolf1.getName());
        owner.sendMessage(""String_Node_Str"");
      }
 else {
      }
    }
  }
}"
45013,"@Override public void onEntityTame(EntityTameEvent event){
  if (!event.isCancelled()) {
    Entity entity=event.getEntity();
    Player owner=(Player)event.getOwner();
    World world=entity.getWorld();
    WorldConfig worldConfig=configManager.getWorldConfig(world);
    if (entity instanceof Wolf) {
      Wolf wolf=(Wolf)entity;
      if (worldConfig.limitEnable) {
        List<WolfTable> wts=wolfManager.getWolfTables(owner.getName());
        int size=wts.size();
        int limit=2;
        if (size >= limit) {
          owner.sendMessage(""String_Node_Str"" + ChatColor.YELLOW + Integer.toString(limit));
          event.setCancelled(true);
          return;
        }
      }
      if (wolfManager.addWolf(wolf)) {
        com.halvors.wolf.wolf.Wolf wolf1=wolfManager.getWolf(wolf);
        owner.sendMessage(""String_Node_Str"" + ChatColor.YELLOW + wolf1.getName());
        owner.sendMessage(""String_Node_Str"");
      }
    }
  }
}","@Override public void onEntityTame(EntityTameEvent event){
  if (!event.isCancelled()) {
    Entity entity=event.getEntity();
    Player owner=(Player)event.getOwner();
    World world=entity.getWorld();
    WorldConfig worldConfig=configManager.getWorldConfig(world);
    if (entity instanceof Wolf) {
      Wolf wolf=(Wolf)entity;
      if (worldConfig.limitEnable) {
        List<WolfTable> wts=wolfManager.getWolfTables(owner.getName());
        int size=wts.size();
        int limit=2;
        if (size >= limit) {
          owner.sendMessage(""String_Node_Str"" + ChatColor.YELLOW + Integer.toString(limit));
          event.setCancelled(true);
          return;
        }
      }
      wolfManager.addWolf(wolf);
      if (wolfManager.hasWolf(wolf)) {
        com.halvors.wolf.wolf.Wolf wolf1=wolfManager.getWolf(wolf);
        owner.sendMessage(""String_Node_Str"" + ChatColor.YELLOW + wolf1.getName());
        owner.sendMessage(""String_Node_Str"");
      }
    }
  }
}"
45014,"@Override public void onPlayerInteractEntity(PlayerInteractEntityEvent event){
  if (!event.isCancelled()) {
    Player player=event.getPlayer();
    Entity entity=event.getRightClicked();
    World world=entity.getWorld();
    WorldConfig worldConfig=configManager.getWorldConfig(world);
    if (entity instanceof Wolf) {
      Wolf wolf=(Wolf)entity;
      UUID uniqueId=wolf.getUniqueId();
      if (!wolfManager.hasWolf(uniqueId)) {
        wolfManager.addWolf(wolf);
      }
      if (wolf.isTamed() && wolfManager.hasWolf(wolf) && wolf.getOwner().equals(player)) {
        com.halvors.wolf.wolf.Wolf wolf1=wolfManager.getWolf(wolf);
        Material item=player.getItemInHand().getType();
        if (item.equals(Material.BONE)) {
          if (plugin.hasPermissions(player,""String_Node_Str"")) {
            selectedWolfManager.addSelectedWolf(player.getName(),wolf);
            player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
            wolf.setSitting(!wolf.isSitting());
          }
        }
 else         if (item.equals(Material.CHEST)) {
          if (plugin.hasPermissions(player,""String_Node_Str"")) {
            if (worldConfig.wolfInventory) {
              if (wolf1.hasInventory()) {
                EntityPlayer entityPlayer=((CraftPlayer)player).getHandle();
                entityPlayer.a(plugin.getWolfInventoryManager().getWolfInventory(uniqueId).getInventory());
              }
 else {
                wolf1.addInventory();
                if (item.equals(Material.CHEST)) {
                  player.getItemInHand().setAmount(player.getItemInHand().getAmount() - 1);
                }
                player.sendMessage(ChatColor.YELLOW + wolf1.getName() + ChatColor.WHITE+ ""String_Node_Str"");
              }
              wolf.setSitting(!wolf.isSitting());
            }
          }
        }
      }
    }
  }
}","@Override public void onPlayerInteractEntity(PlayerInteractEntityEvent event){
  if (!event.isCancelled()) {
    Player player=event.getPlayer();
    Entity entity=event.getRightClicked();
    World world=entity.getWorld();
    WorldConfig worldConfig=configManager.getWorldConfig(world);
    if (entity instanceof Wolf) {
      Wolf wolf=(Wolf)entity;
      UUID uniqueId=wolf.getUniqueId();
      if (wolf.isTamed() && wolf.getOwner().equals(player)) {
        if (!wolfManager.hasWolf(uniqueId)) {
          wolfManager.addWolf(wolf);
          com.halvors.wolf.wolf.Wolf wolf1=wolfManager.getWolf(wolf);
          player.sendMessage(""String_Node_Str"" + ChatColor.YELLOW + wolf1.getName());
          player.sendMessage(""String_Node_Str"");
        }
        com.halvors.wolf.wolf.Wolf wolf1=wolfManager.getWolf(wolf);
        Material item=player.getItemInHand().getType();
        if (item.equals(Material.BONE)) {
          if (plugin.hasPermissions(player,""String_Node_Str"")) {
            selectedWolfManager.addSelectedWolf(player.getName(),wolf);
            player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
            wolf.setSitting(!wolf.isSitting());
          }
        }
 else         if (item.equals(Material.CHEST)) {
          if (plugin.hasPermissions(player,""String_Node_Str"")) {
            if (worldConfig.wolfInventory) {
              if (wolf1.hasInventory()) {
                EntityPlayer entityPlayer=((CraftPlayer)player).getHandle();
                entityPlayer.a(plugin.getWolfInventoryManager().getWolfInventory(uniqueId).getInventory());
              }
 else {
                wolf1.addInventory();
                if (item.equals(Material.CHEST)) {
                  player.getItemInHand().setAmount(player.getItemInHand().getAmount() - 1);
                }
                player.sendMessage(ChatColor.YELLOW + wolf1.getName() + ChatColor.WHITE+ ""String_Node_Str"");
              }
              wolf.setSitting(!wolf.isSitting());
            }
          }
        }
      }
    }
  }
}"
45015,"public WolfManager(final WolfPlugin plugin){
  this.plugin=plugin;
  this.wolves=new HashMap<UUID,Wolf>();
}","public WolfManager(final WolfPlugin plugin){
  this.plugin=plugin;
  initializeRandomNames();
  this.wolves=new HashMap<UUID,Wolf>();
}"
45016,"/** 
 * Generate a random name
 * @return String
 */
public String getRandomName(){
  Random random=new Random();
  List<String> names=new ArrayList<String>();
  String name=null;
  try {
    BufferedReader bufferedReader=new BufferedReader(new InputStreamReader(WolfManager.class.getResourceAsStream(""String_Node_Str"")));
    do {
      String s1;
      if ((s1=bufferedReader.readLine()) == null) {
        break;
      }
      s1=s1.trim();
      if (s1.length() > 0) {
        names.add(s1);
      }
    }
 while (true);
    name=names.get(random.nextInt(names.size()));
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return name;
}","/** 
 * Generate a random name
 * @return String
 */
public String getRandomName(){
  Random random=new Random();
  String name=null;
  name=wolfnames.get(random.nextInt(wolfnames.size()));
  return name;
}"
45017,"@Override public void onPlayerInteractEntity(PlayerInteractEntityEvent event){
  if (!event.isCancelled()) {
    Player player=event.getPlayer();
    Entity entity=event.getRightClicked();
    if (entity instanceof Wolf) {
      Wolf wolf=(Wolf)entity;
      if (wolf.isTamed() && wolf.getOwner().equals(player)) {
        Material item=player.getItemInHand().getType();
        if (item.equals(Material.BONE)) {
          if (plugin.hasPermissions(player,""String_Node_Str"")) {
            if (!wolfManager.hasWolf(wolf.getUniqueId())) {
              wolfManager.addWolf(wolf);
              player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.YELLOW+ wolfManager.getName(wolf.getUniqueId()));
              player.sendMessage(""String_Node_Str"" + wolf.getUniqueId() + ""String_Node_Str""+ wolfManager.getWolfTable(wolf.getUniqueId()).getId());
            }
            selectedWolfManager.addSelectedWolf(player.getName(),wolf);
            player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
          }
        }
 else         if (item.equals(Material.CHEST)) {
          if (plugin.hasPermissions(player,""String_Node_Str"")) {
            if (wolfManager.hasWolf(wolf.getUniqueId())) {
              if (wolfManager.hasInventory(wolf.getUniqueId())) {
                WolfTable wt=wolfManager.getWolfTable(wolf.getUniqueId());
                EntityPlayer entityPlayer=((CraftPlayer)player).getHandle();
                entityPlayer.a(plugin.getWolfInventoryManager().getWolfInventory(wt.getId()).getInventory());
                wolf.setSitting(!wolf.isSitting());
              }
 else {
                wolfManager.addInventory(wolf.getUniqueId());
                player.getInventory().remove(new ItemStack(Material.CHEST,1));
              }
            }
 else {
            }
          }
        }
      }
    }
  }
}","@Override public void onPlayerInteractEntity(PlayerInteractEntityEvent event){
  if (!event.isCancelled()) {
    Player player=event.getPlayer();
    Entity entity=event.getRightClicked();
    if (entity instanceof Wolf) {
      Wolf wolf=(Wolf)entity;
      if (wolf.isTamed() && wolf.getOwner().equals(player)) {
        Material item=player.getItemInHand().getType();
        if (item.equals(Material.BONE)) {
          if (plugin.hasPermissions(player,""String_Node_Str"")) {
            if (!wolfManager.hasWolf(wolf.getUniqueId())) {
              wolfManager.addWolf(wolf);
              player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.YELLOW+ wolfManager.getName(wolf.getUniqueId()));
              player.sendMessage(""String_Node_Str"" + wolf.getUniqueId() + ""String_Node_Str""+ wolfManager.getWolfTable(wolf.getUniqueId()).getId());
            }
            selectedWolfManager.addSelectedWolf(player.getName(),wolf);
            player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
          }
        }
 else         if (item.equals(Material.CHEST)) {
          if (plugin.hasPermissions(player,""String_Node_Str"")) {
            if (wolfManager.hasWolf(wolf.getUniqueId())) {
              if (wolfManager.hasInventory(wolf.getUniqueId())) {
                WolfTable wt=wolfManager.getWolfTable(wolf.getUniqueId());
                EntityPlayer entityPlayer=((CraftPlayer)player).getHandle();
                entityPlayer.a(plugin.getWolfInventoryManager().getWolfInventory(wt.getId()).getInventory());
                wolf.setSitting(!wolf.isSitting());
              }
 else {
                wolfManager.addInventory(wolf.getUniqueId());
                plugin.getWolfInventoryManager().addWolfInventory(wolfManager.getId(wolf.getUniqueId()));
                player.getInventory().remove(new ItemStack(Material.CHEST,1));
              }
            }
 else {
            }
          }
        }
      }
    }
  }
}"
45018,"private void showWolves(Player player){
  List<WolfTable> wolfTables=wolfManager.getWolfTables(player.getName());
  player.sendMessage(ChatColor.GREEN + plugin.name + ChatColor.GREEN+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.version+ ChatColor.GREEN+ ""String_Node_Str"");
  if (!wolfTables.isEmpty()) {
    for (    WolfTable wolfTable : wolfTables) {
      Wolf wolf=wolfManager.getWolf(wolfTable.getUniqueId());
      Location pos=wolf.getLocation();
      player.sendMessage(ChatColor.YELLOW + wolfTable.getName() + ChatColor.WHITE+ ""String_Node_Str""+ pos.getBlockX()+ ""String_Node_Str""+ pos.getBlockY()+ ""String_Node_Str""+ pos.getBlockZ()+ ""String_Node_Str"");
    }
  }
 else {
    player.sendMessage(ChatColor.RED + ""String_Node_Str"");
  }
}","private void showWolves(Player player){
  List<WolfTable> wolfTables=wolfManager.getWolfTables(player.getName());
  player.sendMessage(ChatColor.GREEN + plugin.name + ChatColor.GREEN+ ""String_Node_Str""+ ChatColor.WHITE+ plugin.version+ ChatColor.GREEN+ ""String_Node_Str"");
  if (!wolfTables.isEmpty()) {
    for (    WolfTable wolfTable : wolfTables) {
      Wolf wolf=wolfManager.getWolf(UUID.fromString(wolfTable.getUniqueId()));
      Location pos=wolf.getLocation();
      player.sendMessage(ChatColor.YELLOW + wolfTable.getName() + ChatColor.WHITE+ ""String_Node_Str""+ pos.getBlockX()+ ""String_Node_Str""+ pos.getBlockY()+ ""String_Node_Str""+ pos.getBlockZ()+ ""String_Node_Str"");
    }
  }
 else {
    player.sendMessage(ChatColor.RED + ""String_Node_Str"");
  }
}"
45019,"@Override public void onPlayerInteractEntity(PlayerInteractEntityEvent event){
  if (!event.isCancelled()) {
    Player player=event.getPlayer();
    Entity entity=event.getRightClicked();
    if (entity instanceof Wolf) {
      Wolf wolf=(Wolf)entity;
      if (wolf.isTamed() && wolf.getOwner().equals(player)) {
        Material item=player.getItemInHand().getType();
        if (item.equals(Material.BONE)) {
          if (plugin.hasPermissions(player,""String_Node_Str"")) {
            if (!wolfManager.hasWolf(wolf.getUniqueId())) {
              wolfManager.addWolf(wolf);
              player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.YELLOW+ wolfManager.getName(wolf.getUniqueId()));
              player.sendMessage(""String_Node_Str"" + wolf.getUniqueId() + ""String_Node_Str""+ wolfManager.getWolfTable(wolf.getUniqueId()).getId());
            }
            selectedWolfManager.addSelectedWolf(player.getName(),wolf);
            player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
          }
        }
 else         if (item.equals(Material.CHEST)) {
          if (plugin.hasPermissions(player,""String_Node_Str"")) {
            if (wolfManager.hasWolf(wolf.getUniqueId())) {
              if (wolfManager.hasInventory(wolf.getUniqueId())) {
                WolfTable wt=wolfManager.getWolfTable(wolf.getUniqueId());
                EntityPlayer entityPlayer=((CraftPlayer)player).getHandle();
                entityPlayer.a(plugin.getWolfInventoryManager().getWolfInventory(wt.getId()).getInventory());
                wolf.setSitting(true);
              }
 else {
                player.getInventory().remove(new ItemStack(Material.CHEST,1));
              }
            }
 else {
            }
          }
        }
      }
    }
  }
}","@Override public void onPlayerInteractEntity(PlayerInteractEntityEvent event){
  if (!event.isCancelled()) {
    Player player=event.getPlayer();
    Entity entity=event.getRightClicked();
    if (entity instanceof Wolf) {
      Wolf wolf=(Wolf)entity;
      if (wolf.isTamed() && wolf.getOwner().equals(player)) {
        Material item=player.getItemInHand().getType();
        if (item.equals(Material.BONE)) {
          if (plugin.hasPermissions(player,""String_Node_Str"")) {
            if (!wolfManager.hasWolf(wolf.getUniqueId())) {
              wolfManager.addWolf(wolf);
              player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.YELLOW+ wolfManager.getName(wolf.getUniqueId()));
              player.sendMessage(""String_Node_Str"" + wolf.getUniqueId() + ""String_Node_Str""+ wolfManager.getWolfTable(wolf.getUniqueId()).getId());
            }
            selectedWolfManager.addSelectedWolf(player.getName(),wolf);
            player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
          }
        }
 else         if (item.equals(Material.CHEST)) {
          if (plugin.hasPermissions(player,""String_Node_Str"")) {
            if (wolfManager.hasWolf(wolf.getUniqueId())) {
              if (wolfManager.hasInventory(wolf.getUniqueId())) {
                WolfTable wt=wolfManager.getWolfTable(wolf.getUniqueId());
                EntityPlayer entityPlayer=((CraftPlayer)player).getHandle();
                entityPlayer.a(plugin.getWolfInventoryManager().getWolfInventory(wt.getId()).getInventory());
                wolf.setSitting(!wolf.isSitting());
              }
 else {
                wolfManager.addInventory(wolf.getUniqueId());
                player.getInventory().remove(new ItemStack(Material.CHEST,1));
              }
            }
 else {
            }
          }
        }
      }
    }
  }
}"
45020,"/** 
 * Get uniqueId
 * @param name
 * @param owner
 * @return UUID
 */
public UUID getUniqueId(String name,String owner){
  WolfTable wt=getWolfTable(name,owner);
  if (wt != null) {
    return wt.getUniqueId();
  }
  return null;
}","/** 
 * Get uniqueId
 * @param name
 * @param owner
 * @return UUID
 */
public UUID getUniqueId(String name,String owner){
  WolfTable wt=getWolfTable(name,owner);
  if (wt != null) {
    return UUID.fromString(wt.getUniqueId());
  }
  return null;
}"
45021,"/** 
 * Get owners wolves
 * @param owner
 * @return List<Wolf>
 */
public List<Wolf> getWolves(String owner){
  List<WolfTable> wts=getWolfTables(owner);
  List<Wolf> wolves=new ArrayList<Wolf>();
  for (  WolfTable wt : wts) {
    for (    Entity entity : plugin.getServer().getWorld(wt.getWorld()).getEntities()) {
      if (entity instanceof Wolf && entity.getUniqueId() == wt.getUniqueId()) {
        wolves.add((Wolf)entity);
      }
    }
  }
  return wolves;
}","/** 
 * Get owners wolves
 * @param owner
 * @return List<Wolf>
 */
public List<Wolf> getWolves(String owner){
  List<WolfTable> wts=getWolfTables(owner);
  List<Wolf> wolves=new ArrayList<Wolf>();
  for (  WolfTable wt : wts) {
    for (    Entity entity : plugin.getServer().getWorld(wt.getWorld()).getEntities()) {
      if (entity instanceof Wolf && UUID.fromString(wt.getUniqueId()) == entity.getUniqueId()) {
        wolves.add((Wolf)entity);
      }
    }
  }
  return wolves;
}"
45022,"public UUID getUniqueId(){
  return UUID.fromString(uniqueId);
}","public String getUniqueId(){
  return uniqueId;
}"
45023,"@Override public void onPlayerInteractEntity(PlayerInteractEntityEvent event){
  if (!event.isCancelled()) {
    Player player=event.getPlayer();
    Entity entity=event.getRightClicked();
    if (entity instanceof Wolf) {
      Wolf wolf=(Wolf)entity;
      if (wolf.isTamed() && wolf.getOwner().equals(player)) {
        Material item=player.getItemInHand().getType();
        if (item.equals(Material.BONE)) {
          if (plugin.hasPermissions(player,""String_Node_Str"")) {
            if (!wolfManager.hasWolf(wolf.getUniqueId())) {
              wolfManager.addWolf(wolf);
              player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.YELLOW+ wolfManager.getName(wolf.getUniqueId()));
              player.sendMessage(""String_Node_Str"" + wolf.getUniqueId() + ""String_Node_Str""+ wolfManager.getWolfTable(wolf.getUniqueId()).getId());
            }
            selectedWolfManager.addSelectedWolf(player.getName(),wolf);
            player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
          }
        }
 else         if (item.equals(Material.CHEST)) {
          if (plugin.hasPermissions(player,""String_Node_Str"")) {
            if (wolfManager.hasWolf(wolf.getUniqueId())) {
              if (wolfManager.hasInventory(wolf.getUniqueId())) {
                EntityPlayer entityPlayer=((CraftPlayer)player).getHandle();
                entityPlayer.a(plugin.getWolfInventoryManager().getWolfInventory(wolf.getUniqueId()).getInventory());
              }
 else {
                wolfManager.addInventory(wolf.getUniqueId());
                player.getInventory().remove(new ItemStack(Material.CHEST,1));
              }
            }
 else {
            }
          }
        }
      }
    }
  }
}","@Override public void onPlayerInteractEntity(PlayerInteractEntityEvent event){
  if (!event.isCancelled()) {
    Player player=event.getPlayer();
    Entity entity=event.getRightClicked();
    if (entity instanceof Wolf) {
      Wolf wolf=(Wolf)entity;
      if (wolf.isTamed() && wolf.getOwner().equals(player)) {
        Material item=player.getItemInHand().getType();
        if (item.equals(Material.BONE)) {
          if (plugin.hasPermissions(player,""String_Node_Str"")) {
            if (!wolfManager.hasWolf(wolf.getUniqueId())) {
              wolfManager.addWolf(wolf);
              player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.YELLOW+ wolfManager.getName(wolf.getUniqueId()));
              player.sendMessage(""String_Node_Str"" + wolf.getUniqueId() + ""String_Node_Str""+ wolfManager.getWolfTable(wolf.getUniqueId()).getId());
            }
            selectedWolfManager.addSelectedWolf(player.getName(),wolf);
            player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
          }
        }
 else         if (item.equals(Material.CHEST)) {
          if (plugin.hasPermissions(player,""String_Node_Str"")) {
            if (wolfManager.hasWolf(wolf.getUniqueId())) {
              if (wolfManager.hasInventory(wolf.getUniqueId())) {
                EntityPlayer entityPlayer=((CraftPlayer)player).getHandle();
                entityPlayer.a(plugin.getWolfInventoryManager().getWolfInventory(wolf.getUniqueId()).getInventory());
              }
 else {
                wolfManager.addInventory(wolf.getUniqueId());
                if (player.getItemInHand().getType() == Material.CHEST) {
                  player.getItemInHand().setAmount(player.getItemInHand().getAmount() - 1);
                }
              }
            }
 else {
            }
          }
        }
      }
    }
  }
}"
45024,"/** 
 * Add wolf inventory
 * @param uniqueId
 */
public void addInventory(UUID uniqueId){
  WolfTable wt=getWolfTable(uniqueId);
  if (wt != null) {
    wt.setInventory(true);
    plugin.getWolfInventoryManager().addWolfInventory(uniqueId);
  }
}","/** 
 * Add wolf inventory
 * @param uniqueId
 */
public void addInventory(UUID uniqueId){
  WolfTable wt=getWolfTable(uniqueId);
  if (wt != null) {
    wt.setInventory(true);
    updateWolfTable(wt);
    plugin.getWolfInventoryManager().addWolfInventory(uniqueId);
  }
}"
45025,"@Override public void onPlayerInteractEntity(PlayerInteractEntityEvent event){
  if (!event.isCancelled()) {
    Player player=event.getPlayer();
    Entity entity=event.getRightClicked();
    if (entity instanceof Wolf) {
      Wolf wolf=(Wolf)entity;
      if (wolf.isTamed() && wolf.getOwner().equals(player)) {
        Material item=player.getItemInHand().getType();
        if (item.equals(Material.BONE)) {
          if (plugin.hasPermissions(player,""String_Node_Str"")) {
            if (!wolfManager.hasWolf(wolf.getEntityId())) {
              wolfManager.addWolf(wolf);
              player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.YELLOW+ wolfManager.getName(wolf.getEntityId()));
              player.sendMessage(""String_Node_Str"" + wolf.getEntityId() + ""String_Node_Str""+ wolfManager.getWolfTable(wolf.getEntityId()).getId());
            }
            selectedWolfManager.addSelectedWolf(player.getName(),wolf);
            player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
          }
        }
 else         if (item.equals(Material.CHEST)) {
          if (plugin.hasPermissions(player,""String_Node_Str"")) {
            if (wolfManager.hasWolf(wolf.getEntityId())) {
              WolfTable wt=wolfManager.getWolfTable(wolf.getEntityId());
              EntityPlayer entityPlayer=((CraftPlayer)player).getHandle();
              entityPlayer.a(plugin.getWolfInventoryManager().getWolfInventory(wt.getId()).getInventory());
            }
 else {
            }
          }
        }
      }
    }
  }
}","@Override public void onPlayerInteractEntity(PlayerInteractEntityEvent event){
  if (!event.isCancelled()) {
    Player player=event.getPlayer();
    Entity entity=event.getRightClicked();
    if (entity instanceof Wolf) {
      Wolf wolf=(Wolf)entity;
      if (wolf.isTamed() && wolf.getOwner().equals(player)) {
        Material item=player.getItemInHand().getType();
        if (item.equals(Material.BONE)) {
          if (plugin.hasPermissions(player,""String_Node_Str"")) {
            if (!wolfManager.hasWolf(wolf.getEntityId())) {
              wolfManager.addWolf(wolf);
              player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.YELLOW+ wolfManager.getName(wolf.getEntityId()));
              player.sendMessage(""String_Node_Str"" + wolf.getEntityId() + ""String_Node_Str""+ wolfManager.getWolfTable(wolf.getEntityId()).getId());
            }
            selectedWolfManager.addSelectedWolf(player.getName(),wolf);
            player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
          }
        }
 else         if (item.equals(Material.CHEST)) {
          if (plugin.hasPermissions(player,""String_Node_Str"")) {
            if (wolfManager.hasWolf(wolf.getEntityId())) {
              WolfTable wt=wolfManager.getWolfTable(wolf.getEntityId());
              EntityPlayer entityPlayer=((CraftPlayer)player).getHandle();
              wolf.setSitting(true);
              entityPlayer.a(plugin.getWolfInventoryManager().getWolfInventory(wt.getId()).getInventory());
            }
 else {
            }
          }
        }
      }
    }
  }
}"
45026,"/** 
 * Add a selected wolf
 * @param owner
 * @param wolf
 */
public void addSelectedWolf(final String owner,final Wolf wolf){
  if (!selectedWolfs.containsKey(owner)) {
    selectedWolfs.put(owner,wolf);
  }
}","/** 
 * Add a selected wolf
 * @param owner
 * @param wolf
 */
public void addSelectedWolf(final String owner,final Wolf wolf){
  if (!selectedWolfs.containsKey(owner)) {
    selectedWolfs.put(owner,wolf);
  }
 else {
    selectedWolfs.remove(owner);
    selectedWolfs.put(owner,wolf);
  }
}"
45027,"public WolfInventory(){
  this.inventory=new TileEntityVirtualChest();
}","public WolfInventory(int wolfId){
  this.inventory=new TileEntityVirtualChest();
  this.wolfId=wolfId;
}"
45028,"/** 
 * Add WolfInventory
 * @param id
 */
public void addWolfInventory(int id){
  addWolfInventory(id,new WolfInventory());
}","/** 
 * Add WolfInventory
 * @param id
 */
public void addWolfInventory(int id){
  addWolfInventory(id,new WolfInventory(id));
}"
45029,"public void load(World world){
  wolfInventorys.clear();
}","public void load(World world){
  List<WolfInventoryTable> wits=plugin.getDatabase().find(WolfInventoryTable.class).where().findList();
  for (  WolfInventoryTable wit : wits) {
    addWolfInventory(wit.getId(),loadWolfInventory(wit));
  }
}"
45030,"public void save(World world){
}","public void save(World world){
  for (  WolfInventory wi : wolfInventorys.values()) {
    WolfInventoryTable wit=new WolfInventoryTable();
    wit.setId(wi.getWolfId());
    wit.setContents(wi.getContents());
    if (plugin.getDatabase().find(WolfInventoryTable.class).where().eq(""String_Node_Str"",wi.getWolfId()) != null) {
      plugin.getDatabase().update(wit);
    }
 else {
      plugin.getDatabase().save(wit);
    }
  }
}"
45031,"public WolfInventoryManager(final Wolf plugin){
  this.wolfInventorys=new HashMap<Integer,WolfInventory>();
}","public WolfInventoryManager(final Wolf plugin){
  this.plugin=plugin;
  this.wolfInventorys=new HashMap<Integer,WolfInventory>();
}"
45032,"public void setId(int id){
  this.id=id;
}","public void setId(final int id){
  this.id=id;
}"
45033,"@Override public void onEnable(){
  pm=this.getServer().getPluginManager();
  pdfFile=this.getDescription();
  name=pdfFile.getName();
  version=pdfFile.getVersion();
  configManager.load();
  pm.registerEvent(Event.Type.CREATURE_SPAWN,entityListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.ENTITY_DAMAGE,entityListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.ENTITY_DEATH,entityListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.ENTITY_TARGET,entityListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_INTERACT,playerListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_INTERACT_ENTITY,playerListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.WORLD_LOAD,worldListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.WORLD_SAVE,worldListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.CHUNK_LOAD,worldListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.CHUNK_UNLOAD,worldListener,Event.Priority.Normal,this);
  this.getCommand(""String_Node_Str"").setExecutor(new WolfCommandExecutor(this));
  log(Level.INFO,""String_Node_Str"" + version + ""String_Node_Str"");
  setupPermissions();
  setupDatabase();
}","@Override public void onEnable(){
  currentServer=this.getServer();
  pm=this.getServer().getPluginManager();
  pdfFile=this.getDescription();
  name=pdfFile.getName();
  version=pdfFile.getVersion();
  configManager.load();
  pm.registerEvent(Event.Type.CREATURE_SPAWN,entityListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.ENTITY_DAMAGE,entityListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.ENTITY_DEATH,entityListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.ENTITY_TARGET,entityListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_INTERACT,playerListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_INTERACT_ENTITY,playerListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.WORLD_LOAD,worldListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.WORLD_SAVE,worldListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.CHUNK_LOAD,worldListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.CHUNK_UNLOAD,worldListener,Event.Priority.Normal,this);
  this.getCommand(""String_Node_Str"").setExecutor(new WolfCommandExecutor(this));
  log(Level.INFO,""String_Node_Str"" + version + ""String_Node_Str"");
  setupPermissions();
  setupDatabase();
}"
45034,"@Override public void onPlayerInteractEntity(PlayerInteractEntityEvent event){
  if (!event.isCancelled()) {
    Player player=event.getPlayer();
    Entity entity=event.getRightClicked();
    World world=entity.getWorld();
    WorldConfig worldConfig=configManager.getWorldConfig(world);
    if (entity instanceof Wolf) {
      Wolf wolf=(Wolf)entity;
      if (!wolfManager.hasWolf(wolf.getEntityId()) && wolf.isTamed() && wolf.getOwner().equals(player)) {
        wolfManager.addWolf(wolf);
      }
      if (player.getItemInHand().getTypeId() == worldConfig.item) {
        if (plugin.hasPermissions(player,""String_Node_Str"")) {
          if (wolf.isTamed() && wolf.getOwner().equals(player)) {
            if (!wolfManager.hasWolf(wolf.getEntityId())) {
              wolfManager.addWolf(wolf);
              player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.YELLOW+ wolfManager.getName(wolf.getEntityId()));
            }
            selectedWolfManager.addSelectedWolf(player.getName(),wolf);
            player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
          }
        }
      }
    }
  }
}","@Override public void onPlayerInteractEntity(PlayerInteractEntityEvent event){
  if (!event.isCancelled()) {
    Player player=event.getPlayer();
    Entity entity=event.getRightClicked();
    World world=entity.getWorld();
    WorldConfig worldConfig=configManager.getWorldConfig(world);
    if (entity instanceof Wolf) {
      Wolf wolf=(Wolf)entity;
      if (!wolfManager.hasWolf(wolf.getEntityId()) && wolf.isTamed() && wolf.getOwner().equals(player)) {
        wolfManager.addWolf(wolf);
      }
      player.sendMessage(""String_Node_Str"" + wolf.getEntityId() + ""String_Node_Str""+ wolfManager.getWolfTable(wolf.getEntityId()).getId());
      if (player.getItemInHand().getTypeId() == worldConfig.item) {
        if (plugin.hasPermissions(player,""String_Node_Str"")) {
          if (wolf.isTamed() && wolf.getOwner().equals(player)) {
            if (!wolfManager.hasWolf(wolf.getEntityId())) {
              wolfManager.addWolf(wolf);
              player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.YELLOW+ wolfManager.getName(wolf.getEntityId()));
            }
            selectedWolfManager.addSelectedWolf(player.getName(),wolf);
            player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
          }
        }
      }
    }
  }
}"
45035,"@Override public void onWorldSave(WorldSaveEvent event){
  wolfInventoryManager.save(event.getWorld());
}","@Override public void onWorldSave(WorldSaveEvent event){
  wolfInventoryManager.save(event.getWorld());
  List<Entity> entities=event.getWorld().getEntities();
  for (  Entity entity : entities) {
    if (entity instanceof Wolf) {
      Wolf wolf=(Wolf)entity;
      if (wolf.isTamed()) {
        WolfTable wt=wolfManager.getWolfTable(wolf.getEntityId());
        if (wt != null) {
          wt.setLocationX(wolf.getLocation().getBlockX());
          wt.setLocationY(wolf.getLocation().getBlockY());
          wt.setLocationZ(wolf.getLocation().getBlockZ());
          wolfManager.updateWolfTable(wt);
        }
      }
    }
  }
}"
45036,"@Override public void onChunkUnload(ChunkUnloadEvent event){
  Entity[] entities=event.getChunk().getEntities();
  for (  Entity entity : entities) {
    if (entity instanceof Wolf) {
      Wolf wolf=(Wolf)entity;
      if (wolf.isTamed()) {
        WolfTable wt=wolfManager.getWolfTable(wolf.getEntityId());
        if (wt != null) {
          wt.setLocationX(wolf.getLocation().getX());
          wt.setLocationY(wolf.getLocation().getY());
          wt.setLocationZ(wolf.getLocation().getZ());
          wolfManager.updateWolfTable(wt);
        }
      }
    }
  }
}","@Override public void onChunkUnload(ChunkUnloadEvent event){
  Entity[] entities=event.getChunk().getEntities();
  for (  Entity entity : entities) {
    if (entity instanceof Wolf) {
      Wolf wolf=(Wolf)entity;
      if (wolf.isTamed()) {
        WolfTable wt=wolfManager.getWolfTable(wolf.getEntityId());
        if (wt != null) {
          wt.setLocationX(wolf.getLocation().getBlockX());
          wt.setLocationY(wolf.getLocation().getBlockY());
          wt.setLocationZ(wolf.getLocation().getBlockZ());
          wolfManager.updateWolfTable(wt);
        }
      }
    }
  }
}"
45037,"@Override public void onWorldLoad(WorldLoadEvent event){
  wolfInventoryManager.load(event.getWorld());
}","@Override public void onWorldLoad(WorldLoadEvent event){
  wolfInventoryManager.load(event.getWorld());
  List<Entity> entities=event.getWorld().getEntities();
  for (  Entity entity : entities) {
    if (entity instanceof Wolf) {
      Wolf wolf=(Wolf)entity;
      if (wolf.isTamed()) {
        WolfTable wt=wolfManager.getWolfTable(wolf.getLocation());
        if (wt != null) {
          wt.setEntityId(wolf.getEntityId());
          wolfManager.updateWolfTable(wt);
        }
      }
    }
  }
}"
45038,"/** 
 * Get WolfTable by location
 * @param location
 * @return
 */
public WolfTable getWolfTable(final Location location){
  return plugin.getDatabase().find(WolfTable.class).where().eq(""String_Node_Str"",location.getX()).eq(""String_Node_Str"",location.getY()).eq(""String_Node_Str"",location.getZ()).findUnique();
}","/** 
 * Get WolfTable by location
 * @param location
 * @return
 */
public WolfTable getWolfTable(final Location location){
  return plugin.getDatabase().find(WolfTable.class).where().eq(""String_Node_Str"",location.getBlockX()).eq(""String_Node_Str"",location.getBlockY()).eq(""String_Node_Str"",location.getBlockZ()).findUnique();
}"
45039,"public void setLocationX(final double locationX){
  this.locationX=locationX;
}","public void setLocationX(final int locationX){
  this.locationX=locationX;
}"
45040,"public void setLocationZ(final double locationZ){
  this.locationZ=locationZ;
}","public void setLocationZ(final int locationZ){
  this.locationZ=locationZ;
}"
45041,"public void setLocationY(final double locationY){
  this.locationY=locationY;
}","public void setLocationY(final int locationY){
  this.locationY=locationY;
}"
45042,"public double getLocationX(){
  return locationX;
}","public int getLocationX(){
  return locationX;
}"
45043,"public double getLocationZ(){
  return locationZ;
}","public int getLocationZ(){
  return locationZ;
}"
45044,"public double getLocationY(){
  return locationY;
}","public int getLocationY(){
  return locationY;
}"
45045,"@Override public void onPlayerInteractEntity(PlayerInteractEntityEvent event){
  if (!event.isCancelled()) {
    Player player=event.getPlayer();
    Entity entity=event.getRightClicked();
    World world=entity.getWorld();
    WorldConfig worldConfig=configManager.getWorldConfig(world);
    if (entity instanceof Wolf) {
      Wolf wolf=(Wolf)entity;
      if (plugin.hasPermissions(player,""String_Node_Str"")) {
        int item=worldConfig.item;
        if (item != 0) {
          if (player.getItemInHand().getTypeId() == item) {
            if (wolf.isTamed()) {
              selectedWolfManager.addSelectedWolf(player.getName(),wolf);
              player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
            }
 else {
            }
          }
        }
 else {
          player.sendMessage(ChatColor.RED + ""String_Node_Str"");
        }
      }
    }
  }
}","@Override public void onPlayerInteractEntity(PlayerInteractEntityEvent event){
  if (!event.isCancelled()) {
    Player player=event.getPlayer();
    Entity entity=event.getRightClicked();
    World world=entity.getWorld();
    WorldConfig worldConfig=configManager.getWorldConfig(world);
    if (entity instanceof Wolf) {
      Wolf wolf=(Wolf)entity;
      if (plugin.hasPermissions(player,""String_Node_Str"")) {
        int item=worldConfig.item;
        if (item != 0) {
          if (player.getItemInHand().getTypeId() == item) {
            if (wolf.isTamed()) {
              if (!wolfManager.hasWolf(wolf.getEntityId())) {
                wolfManager.addWolf(wolf);
                player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.YELLOW+ wolfManager.getName(wolf.getEntityId()));
              }
 else {
                player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.YELLOW+ wolfManager.getName(wolf.getEntityId())+ ChatColor.GREEN+ ""String_Node_Str"");
              }
              selectedWolfManager.addSelectedWolf(player.getName(),wolf);
              player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
            }
 else {
            }
          }
        }
 else {
          player.sendMessage(ChatColor.RED + ""String_Node_Str"");
        }
      }
    }
  }
}"
45046,"/** 
 * Get the wolf's world by name
 * @param name
 * @return
 */
public World getWorld(final String name){
  return getWorld(getEntityId(name));
}","/** 
 * Get the wolf's world by name
 * @param name
 * @return
 */
public World getWorld(final String name){
  return getWorld(getentityId(name));
}"
45047,"/** 
 * Get wolf name by entityid
 * @param entityid
 * @return String
 */
public String getName(final int entityid){
  WolfTable wolfTable=plugin.getDatabase().find(WolfTable.class).where().eq(""String_Node_Str"",entityid).findUnique();
  return wolfTable.getName();
}","/** 
 * Get wolf name by entityId
 * @param entityId
 * @return String
 */
public String getName(final int entityId){
  WolfTable wolfTable=plugin.getDatabase().find(WolfTable.class).where().eq(""String_Node_Str"",entityId).findUnique();
  return wolfTable.getName();
}"
45048,"/** 
 * Check if wolf exist by name
 * @param name
 * @return
 */
public boolean hasWolf(final String name){
  return hasWolf(getEntityId(name));
}","/** 
 * Check if wolf exist by name
 * @param name
 * @return
 */
public boolean hasWolf(final String name){
  return hasWolf(getentityId(name));
}"
45049,"/** 
 * Remove a wolf
 * @param name
 */
public void removeWolf(final int entityid){
  WolfTable wolfTable=plugin.getDatabase().find(WolfTable.class).where().eq(""String_Node_Str"",entityid).findUnique();
  if (wolfTable != null) {
    inventory.remove(entityid);
    plugin.getDatabase().delete(wolfTable);
  }
}","/** 
 * Remove a wolf
 * @param name
 */
public void removeWolf(final int entityId){
  WolfTable wolfTable=plugin.getDatabase().find(WolfTable.class).where().eq(""String_Node_Str"",entityId).findUnique();
  if (wolfTable != null) {
    inventory.remove(entityId);
    plugin.getDatabase().delete(wolfTable);
  }
}"
45050,"/** 
 * Get the wolf's owner by name
 * @param name
 * @return
 */
public Player getOwner(final String name){
  return getOwner(getEntityId(name));
}","/** 
 * Get the wolf's owner by name
 * @param name
 * @return
 */
public Player getOwner(final String name){
  return getOwner(getentityId(name));
}"
45051,"/** 
 * Get wolf by name
 * @param name
 * @return Wolf
 */
public Wolf getWolf(final String name){
  return getWolf(getEntityId(name));
}","/** 
 * Get wolf by name
 * @param name
 * @return Wolf
 */
public Wolf getWolf(final String name){
  return getWolf(getentityId(name));
}"
45052,"/** 
 * Get a WolfTable
 * @param name
 * @return WolfTable
 */
public WolfTable getWolfTable(final int entityid){
  return plugin.getDatabase().find(WolfTable.class).where().eq(""String_Node_Str"",entityid).findUnique();
}","/** 
 * Get a WolfTable
 * @param name
 * @return WolfTable
 */
public WolfTable getWolfTable(final int entityId){
  return plugin.getDatabase().find(WolfTable.class).where().eq(""String_Node_Str"",entityId).findUnique();
}"
45053,"/** 
 * Get wolf's inventory
 * @param entityid
 * @return
 */
public TileEntityVirtualChest getInventory(final int entityid){
  if (!inventory.containsKey(entityid)) {
    inventory.put(entityid,new TileEntityVirtualChest());
  }
  return inventory.get(entityid);
}","/** 
 * Get wolf's inventory
 * @param entityId
 * @return
 */
public TileEntityVirtualChest getInventory(final int entityId){
  if (!inventory.containsKey(entityId)) {
    inventory.put(entityId,new TileEntityVirtualChest());
  }
  return inventory.get(entityId);
}"
45054,"public void setEntityId(final int entityid){
  this.entityid=entityid;
}","public void setEntityId(final int entityId){
  this.entityId=entityId;
}"
45055,"public int getEntityId(){
  return entityid;
}","public int getEntityId(){
  return entityId;
}"
45056,"public static void start(){
  if (!isConfigured()) {
    throw new IllegalStateException(""String_Node_Str"" + ""String_Node_Str"");
  }
  Event nextEvent;
  while ((nextEvent=eventSourceMultiplexer.getNextEvent()) != null && isEarlierThanEmulationEnd(now())) {
    Time eventTime=nextEvent.getScheduledTime();
    if (eventTime.isEarlierThan(now())) {
      String msg=""String_Node_Str"" + now() + ""String_Node_Str""+ ""String_Node_Str""+ eventTime+ ""String_Node_Str"";
      if (stopOnError) {
        throw new RuntimeException(msg);
      }
 else {
        System.err.println(msg);
      }
    }
    if (isEarlierThanEmulationEnd(eventTime)) {
      if (isLaterThanEmulationStart(eventTime)) {
        now=eventTime;
        nextEvent.process();
        processCount++;
      }
    }
 else {
      now=emulationEnd;
    }
  }
}","public static void start(){
  if (!isConfigured()) {
    throw new IllegalStateException(""String_Node_Str"" + ""String_Node_Str"");
  }
  Event nextEvent;
  while ((nextEvent=eventSourceMultiplexer.getNextEvent()) != null && isEarlierThanEmulationEnd(now())) {
    Time eventTime=nextEvent.getScheduledTime();
    if (eventTime.isEarlierThan(now())) {
      String msg=""String_Node_Str"" + now() + ""String_Node_Str""+ ""String_Node_Str""+ eventTime+ ""String_Node_Str"";
      if (stopOnError) {
        throw new RuntimeException(msg);
      }
 else {
        System.err.println(msg);
      }
    }
 else     if (isEarlierThanEmulationEnd(eventTime)) {
      if (isLaterThanEmulationStart(eventTime)) {
        now=eventTime;
        nextEvent.process();
        processCount++;
      }
    }
 else {
      now=emulationEnd;
    }
  }
}"
45057,"public static void reset(){
  emulationStart=null;
  emulationEnd=null;
  eventSourceMultiplexer=null;
  now=new Time(0L,Unit.MILLISECONDS);
}","public static void reset(){
  emulationStart=null;
  emulationEnd=null;
  eventSourceMultiplexer=null;
  processCount=0;
  now=new Time(0L,Unit.MILLISECONDS);
}"
45058,"public static void setup(Time emulationStart,Time emulationEnd,EventSourceMultiplexer eventSource){
  EventScheduler.emulationStart=emulationStart;
  EventScheduler.emulationEnd=emulationEnd;
  EventScheduler.eventSourceMultiplexer=eventSource;
}","public static void setup(Time emulationStart,Time emulationEnd,EventSourceMultiplexer eventSource){
  reset();
  EventScheduler.emulationStart=emulationStart;
  EventScheduler.emulationEnd=emulationEnd;
  EventScheduler.eventSourceMultiplexer=eventSource;
}"
45059,"private static MultipleEventSource createMultipleEventParser(Set<FileSystemClient> clients,Set<Machine> machines,File tracesDir,EventsGeneratedBySimulationQueue eventsGeneratedBySimulationQueue){
  EventSource[] parsers=new EventSource[machines.size() + clients.size() + 1];
  try {
    int parserCount=0;
    InputStream traceStream;
    for (    Machine machine : machines) {
      traceStream=new FileInputStream(new File(tracesDir,""String_Node_Str"" + machine.getId()));
      parsers[parserCount++]=new MachineActivityEventParser(machine,traceStream);
    }
    for (    FileSystemClient client : clients) {
      traceStream=new FileInputStream(new File(tracesDir,""String_Node_Str"" + client.getMachine().getId()));
      parsers[parserCount++]=new FileSystemEventParser(client,traceStream);
    }
    parsers[parserCount]=eventsGeneratedBySimulationQueue;
  }
 catch (  FileNotFoundException e) {
    throw new IllegalStateException(e);
  }
  return new MultipleEventSource(parsers);
}","private static MultipleEventSource createMultipleEventParser(Set<FileSystemClient> clients,Set<Machine> machines,File tracesDir,PriorityQueue<Event> eventsGeneratedBySimulationQueue){
  EventSource[] parsers=new EventSource[machines.size() + clients.size()];
  try {
    int parserCount=0;
    InputStream traceStream;
    for (    Machine machine : machines) {
      traceStream=new FileInputStream(new File(tracesDir,""String_Node_Str"" + machine.getId()));
      parsers[parserCount++]=new MachineActivityEventParser(machine,traceStream);
    }
    for (    FileSystemClient client : clients) {
      traceStream=new FileInputStream(new File(tracesDir,""String_Node_Str"" + client.getMachine().getId()));
      parsers[parserCount++]=new FileSystemEventParser(client,traceStream);
    }
  }
 catch (  FileNotFoundException e) {
    throw new IllegalStateException(e);
  }
  return new MultipleEventSource(parsers,eventsGeneratedBySimulationQueue);
}"
45060,"/** 
 * @param args [0] (traces dir) - the traces in the directory must have the name &lt;trace type&gt;-&lt;machine name&gt;,  where &lt;trace type&gt; could be either fs or idleness. All traces must come in pairs of fs and idleness. Single traces will be ignored. Ex.: fs-cherne, idleness-cherne
 * @param args [1] (data placement police) - random, co-random or co-balance
 * @param args [2] time before sleep (secs)
 * @param args [3] replication level
 * @param args [4] time before update replicas' data (secs)
 * @param args [5] time before delete replicas' data (secs)
 */
public static void main(String[] args) throws IOException {
  if (args.length != 6) {
    System.out.println(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
    System.exit(1);
  }
  System.out.println(Arrays.toString(args));
  File tracesDir=new File(args[0]);
  if (!tracesDir.exists() || !tracesDir.isDirectory())   throw new IllegalArgumentException(args[0] + ""String_Node_Str"");
  String placementPoliceName=args[1];
  Long timeBeforeSleep=Long.valueOf(args[2]);
  Integer replicationLevel=Integer.valueOf(args[3]);
  Long timeBeforeUpdateData=Long.valueOf(args[4]);
  Long timeBeforeDeleteData=Long.valueOf(args[5]);
  EventsGeneratedBySimulationQueue eventsGeneratedBySimulationQueue=new EventsGeneratedBySimulationQueue();
  Set<Machine> machines=createMachines(eventsGeneratedBySimulationQueue,tracesDir,timeBeforeSleep);
  Set<DataServer> dataServers=createDataServers(machines);
  DataPlacementAlgorithm placement=createPlacementPolice(placementPoliceName,dataServers);
  MetadataServer metadataServer=new MetadataServer(eventsGeneratedBySimulationQueue,placement,replicationLevel,timeBeforeDeleteData,timeBeforeUpdateData);
  Set<FileSystemClient> clients=createClients(eventsGeneratedBySimulationQueue,machines,metadataServer);
  MultipleEventSource multipleEventSource=createMultipleEventParser(clients,machines,tracesDir,eventsGeneratedBySimulationQueue);
  new EventScheduler(multipleEventSource).start();
  System.out.println(Aggregator.getInstance().summarize());
}","/** 
 * @param args [0] (traces dir) - the traces in the directory must have the name &lt;trace type&gt;-&lt;machine name&gt;,  where &lt;trace type&gt; could be either fs or idleness. All traces must come in pairs of fs and idleness. Single traces will be ignored. Ex.: fs-cherne, idleness-cherne
 * @param args [1] (data placement police) - random, co-random or co-balance
 * @param args [2] time before sleep (secs)
 * @param args [3] replication level
 * @param args [4] time before update replicas' data (secs)
 * @param args [5] time before delete replicas' data (secs)
 */
public static void main(String[] args) throws IOException {
  if (args.length != 6) {
    System.out.println(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
    System.exit(1);
  }
  System.out.println(Arrays.toString(args));
  File tracesDir=new File(args[0]);
  if (!tracesDir.exists() || !tracesDir.isDirectory())   throw new IllegalArgumentException(args[0] + ""String_Node_Str"");
  String placementPoliceName=args[1];
  Long timeBeforeSleep=Long.valueOf(args[2]);
  Integer replicationLevel=Integer.valueOf(args[3]);
  Long timeBeforeUpdateData=Long.valueOf(args[4]);
  Long timeBeforeDeleteData=Long.valueOf(args[5]);
  PriorityQueue<Event> eventsGeneratedBySimulationQueue=new PriorityQueue<Event>();
  Set<Machine> machines=createMachines(eventsGeneratedBySimulationQueue,tracesDir,timeBeforeSleep);
  Set<DataServer> dataServers=createDataServers(machines);
  DataPlacementAlgorithm placement=createPlacementPolice(placementPoliceName,dataServers);
  MetadataServer metadataServer=new MetadataServer(eventsGeneratedBySimulationQueue,placement,replicationLevel,timeBeforeDeleteData,timeBeforeUpdateData);
  Set<FileSystemClient> clients=createClients(eventsGeneratedBySimulationQueue,machines,metadataServer);
  MultipleEventSource multipleEventSource=createMultipleEventParser(clients,machines,tracesDir,eventsGeneratedBySimulationQueue);
  new EventScheduler(multipleEventSource).start();
  System.out.println(Aggregator.getInstance().summarize());
}"
45061,"private static Set<Machine> createMachines(EventsGeneratedBySimulationQueue aPlaceForEventsGeneratedBySimulation,File tracesDir,long timeBeforeSleep){
  Set<Machine> machines=new HashSet<Machine>();
  List<String> fsTracesFiles=Arrays.asList(tracesDir.list(fsTracesFilter));
  List<String> idlenessTracesFiles=Arrays.asList(tracesDir.list(idlenessTracesFilter));
  for (  String fsTraceFile : fsTracesFiles) {
    String machineName=fsTraceFile.split(""String_Node_Str"")[1];
    if (idlenessTracesFiles.contains(""String_Node_Str"" + machineName)) {
      machines.add(new Machine(aPlaceForEventsGeneratedBySimulation,machineName,timeBeforeSleep));
    }
  }
  return machines;
}","private static Set<Machine> createMachines(PriorityQueue<Event> aPlaceForEventsGeneratedBySimulation,File tracesDir,long timeBeforeSleep){
  Set<Machine> machines=new HashSet<Machine>();
  List<String> fsTracesFiles=Arrays.asList(tracesDir.list(fsTracesFilter));
  List<String> idlenessTracesFiles=Arrays.asList(tracesDir.list(idlenessTracesFilter));
  for (  String fsTraceFile : fsTracesFiles) {
    String machineName=fsTraceFile.split(""String_Node_Str"")[1];
    if (idlenessTracesFiles.contains(""String_Node_Str"" + machineName)) {
      machines.add(new Machine(aPlaceForEventsGeneratedBySimulation,machineName,timeBeforeSleep));
    }
  }
  return machines;
}"
45062,"/** 
 * It create all clients.
 * @param aPlaceForEventsGeneratedBySimulation
 * @param herald
 * @param aggregator
 * @param machines2
 * @return
 */
private static Set<FileSystemClient> createClients(EventsGeneratedBySimulationQueue aPlaceForEventsGeneratedBySimulation,Set<Machine> machines,MetadataServer herald){
  Set<FileSystemClient> newClients=new HashSet<FileSystemClient>();
  for (  Machine machine : machines) {
    newClients.add(new FileSystemClient(aPlaceForEventsGeneratedBySimulation,machine,herald));
  }
  return newClients;
}","/** 
 * It create all clients.
 * @param aPlaceForEventsGeneratedBySimulation
 * @param herald
 * @param aggregator
 * @param machines2
 * @return
 */
private static Set<FileSystemClient> createClients(PriorityQueue<Event> aPlaceForEventsGeneratedBySimulation,Set<Machine> machines,MetadataServer herald){
  Set<FileSystemClient> newClients=new HashSet<FileSystemClient>();
  for (  Machine machine : machines) {
    newClients.add(new FileSystemClient(aPlaceForEventsGeneratedBySimulation,machine,herald));
  }
  return newClients;
}"
45063,"public MultipleEventSource(EventSource[] parsers){
  this.parsers=new PushBackEventParser[parsers.length];
  for (int i=0; i < parsers.length; i++) {
    this.parsers[i]=new PushBackEventParser(parsers[i]);
  }
}","public MultipleEventSource(EventSource[] parsers,PriorityQueue<Event> simulationGeneratedEventsQueue){
  this.parsers=new PushBackEventParser[parsers.length];
  this.simulationGeneratedEventsQueue=simulationGeneratedEventsQueue;
  for (int i=0; i < parsers.length; i++) {
    this.parsers[i]=new PushBackEventParser(parsers[i]);
  }
}"
45064,"@Override public String toString(){
  return EVENT_NAME + ""String_Node_Str"" + getScheduledTime()+ ""String_Node_Str""+ filePath;
}","@Override public String toString(){
  return getHandler() + ""String_Node_Str"" + EVENT_NAME+ ""String_Node_Str""+ getScheduledTime()+ ""String_Node_Str""+ filePath;
}"
45065,"@Override public String toString(){
  return EVENT_NAME + ""String_Node_Str"" + getScheduledTime()+ ""String_Node_Str""+ filePath;
}","@Override public String toString(){
  return getHandler() + ""String_Node_Str"" + EVENT_NAME+ ""String_Node_Str""+ getScheduledTime()+ ""String_Node_Str""+ filePath;
}"
45066,"@Override public String toString(){
  return EVENT_NAME + ""String_Node_Str"" + getScheduledTime()+ ""String_Node_Str""+ filePath+ ""String_Node_Str""+ length;
}","@Override public String toString(){
  return getHandler() + ""String_Node_Str"" + EVENT_NAME+ ""String_Node_Str""+ getScheduledTime()+ ""String_Node_Str""+ filePath+ ""String_Node_Str""+ length;
}"
45067,"@Override public String toString(){
  return EVENT_NAME + ""String_Node_Str"" + getScheduledTime()+ ""String_Node_Str""+ filePath;
}","@Override public String toString(){
  return getHandler() + ""String_Node_Str"" + EVENT_NAME+ ""String_Node_Str""+ getScheduledTime()+ ""String_Node_Str""+ filePath;
}"
45068,"@Override public String toString(){
  return EVENT_NAME + ""String_Node_Str"" + getScheduledTime()+ ""String_Node_Str""+ filePath;
}","@Override public String toString(){
  return getHandler() + ""String_Node_Str"" + EVENT_NAME+ ""String_Node_Str""+ getScheduledTime()+ ""String_Node_Str""+ filePath;
}"
45069,"@Override public String toString(){
  return EVENT_NAME + ""String_Node_Str"" + getScheduledTime()+ ""String_Node_Str""+ filePath+ ""String_Node_Str""+ length;
}","@Override public String toString(){
  return getHandler() + ""String_Node_Str"" + EVENT_NAME+ ""String_Node_Str""+ getScheduledTime()+ ""String_Node_Str""+ filePath+ ""String_Node_Str""+ length;
}"
45070,"@Override public String toString(){
  return EVENT_NAME + ""String_Node_Str"" + getScheduledTime()+ ""String_Node_Str""+ getDuration()+ ""String_Node_Str""+ localFSClient;
}","@Override public String toString(){
  return getHandler() + ""String_Node_Str"" + EVENT_NAME+ ""String_Node_Str""+ getScheduledTime()+ ""String_Node_Str""+ getDuration()+ ""String_Node_Str""+ localFSClient;
}"
45071,"@Override public String toString(){
  return EVENT_NAME + ""String_Node_Str"" + getScheduledTime();
}","@Override public String toString(){
  return getHandler() + ""String_Node_Str"" + EVENT_NAME+ ""String_Node_Str""+ getScheduledTime();
}"
45072,"@Override public String toString(){
  return EVENT_NAME + ""String_Node_Str"" + getScheduledTime();
}","@Override public String toString(){
  return getHandler() + ""String_Node_Str"" + EVENT_NAME+ ""String_Node_Str""+ getScheduledTime();
}"
45073,"@Override public String toString(){
  return EVENT_NAME + ""String_Node_Str"" + getScheduledTime()+ ""String_Node_Str""+ getDuration();
}","@Override public String toString(){
  return getHandler() + ""String_Node_Str"" + EVENT_NAME+ ""String_Node_Str""+ getScheduledTime()+ ""String_Node_Str""+ getDuration();
}"
45074,"/** 
 * @param scheduler
 */
public EventHandler(EventsGeneratedBySimulationQueue eventsGeneratedBySimulationQueue){
  this.eventsGeneratedBySimulationQueue=eventsGeneratedBySimulationQueue;
}","/** 
 * @param scheduler
 */
public EventHandler(PriorityQueue<Event> eventsGeneratedBySimulationQueue){
  this.eventsGeneratedBySimulationQueue=eventsGeneratedBySimulationQueue;
}"
45075,"public void send(Event event){
  eventsGeneratedBySimulationQueue.addEvent(event);
}","public void send(Event event){
  eventsGeneratedBySimulationQueue.add(event);
}"
45076,"/** 
 * @param scheduler
 * @param machine
 * @param metadataServer
 */
public FileSystemClient(EventsGeneratedBySimulationQueue eventsGeneratedBySimulationQueue,Machine machine,MetadataServer metadataServer){
  super(eventsGeneratedBySimulationQueue);
  this.metadataServer=metadataServer;
  this.machine=machine;
  this.id=""String_Node_Str"" + machine.bindClient(this) + machine;
}","/** 
 * @param scheduler
 * @param machine
 * @param metadataServer
 */
public FileSystemClient(PriorityQueue<Event> eventsGeneratedBySimulationQueue,Machine machine,MetadataServer metadataServer){
  super(eventsGeneratedBySimulationQueue);
  this.metadataServer=metadataServer;
  this.machine=machine;
  this.id=""String_Node_Str"" + machine.bindClient(this) + machine;
}"
45077,"/** 
 * @param eventsGeneratedBySimulationQueue
 * @param id
 * @param timeBeforeSleep
 */
public Machine(EventsGeneratedBySimulationQueue eventsGeneratedBySimulationQueue,String id,long timeBeforeSleep){
  super(eventsGeneratedBySimulationQueue);
  this.id=id;
  this.deployedDataServers=new HashSet<DataServer>();
  this.clients=new HashSet<FileSystemClient>();
  this.timeBeforeSleep=new Time(timeBeforeSleep,Unit.SECONDS);
  currentStateName=ShutdownEvent.EVENT_NAME;
  currentStateStartTime=Time.GENESIS;
  supposedCurrentStateEndTime=Time.END_OF_THE_WORLD;
  pendingFSActivityEvents=new ArrayList<FileSystemActivityEvent>();
}","/** 
 * @param eventsGeneratedBySimulationQueue
 * @param id
 * @param timeBeforeSleep
 */
public Machine(PriorityQueue<Event> eventsGeneratedBySimulationQueue,String id,long timeBeforeSleep){
  super(eventsGeneratedBySimulationQueue);
  this.id=id;
  this.deployedDataServers=new HashSet<DataServer>();
  this.clients=new HashSet<FileSystemClient>();
  this.timeBeforeSleep=new Time(timeBeforeSleep,Unit.SECONDS);
  currentStateName=ShutdownEvent.EVENT_NAME;
  currentStateStartTime=Time.GENESIS;
  supposedCurrentStateEndTime=Time.END_OF_THE_WORLD;
  pendingFSActivityEvents=new ArrayList<FileSystemActivityEvent>();
}"
45078,"/** 
 * @param scheduler
 * @param dataPlacementAlgorithm
 * @param replicationLevel
 * @param timeBeforeDeleteData in seconds
 * @param timeBeforeUpdateReplicas in seconds
 */
public MetadataServer(EventsGeneratedBySimulationQueue eventsGeneratedBySimulationQueue,DataPlacementAlgorithm dataPlacementAlgorithm,int replicationLevel,long timeBeforeDeleteData,long timeBeforeUpdateReplicas){
  super(eventsGeneratedBySimulationQueue);
  if (dataPlacementAlgorithm == null)   throw new IllegalArgumentException();
  if (replicationLevel < 1)   throw new IllegalArgumentException();
  if (timeBeforeDeleteData < 0)   throw new IllegalArgumentException();
  if (timeBeforeUpdateReplicas < 0)   throw new IllegalArgumentException();
  this.dataPlacement=dataPlacementAlgorithm;
  this.files=new HashMap<String,ReplicationGroup>();
  this.openFiles=new HashMap<String,ReplicationGroup>();
  this.toDelete=new HashMap<String,ReplicationGroup>();
  this.replicationLevel=replicationLevel;
  this.timeBeforeDeleteData=new Time(timeBeforeDeleteData,Unit.SECONDS);
  this.timeBeforeUpdateReplicas=new Time(timeBeforeUpdateReplicas,Unit.SECONDS);
}","/** 
 * @param scheduler
 * @param dataPlacementAlgorithm
 * @param replicationLevel
 * @param timeBeforeDeleteData in seconds
 * @param timeBeforeUpdateReplicas in seconds
 */
public MetadataServer(PriorityQueue<Event> eventsGeneratedBySimulationQueue,DataPlacementAlgorithm dataPlacementAlgorithm,int replicationLevel,long timeBeforeDeleteData,long timeBeforeUpdateReplicas){
  super(eventsGeneratedBySimulationQueue);
  if (dataPlacementAlgorithm == null)   throw new IllegalArgumentException();
  if (replicationLevel < 1)   throw new IllegalArgumentException();
  if (timeBeforeDeleteData < 0)   throw new IllegalArgumentException();
  if (timeBeforeUpdateReplicas < 0)   throw new IllegalArgumentException();
  this.dataPlacement=dataPlacementAlgorithm;
  this.files=new HashMap<String,ReplicationGroup>();
  this.openFiles=new HashMap<String,ReplicationGroup>();
  this.toDelete=new HashMap<String,ReplicationGroup>();
  this.replicationLevel=replicationLevel;
  this.timeBeforeDeleteData=new Time(timeBeforeDeleteData,Unit.SECONDS);
  this.timeBeforeUpdateReplicas=new Time(timeBeforeUpdateReplicas,Unit.SECONDS);
}"
45079,"/** 
 * @param o
 * @return
 */
@Override public int compareTo(Time o){
  double diff=timeMicroSeconds - o.timeMicroSeconds;
  if (diff < 0) {
    return -1;
  }
 else   if (diff > 0) {
    return 1;
  }
  return 0;
}","/** 
 * @param o
 * @return
 */
@Override public int compareTo(Time otherTime){
  long diff=timeMicroSeconds - otherTime.timeMicroSeconds;
  if (diff < 0) {
    return -1;
  }
 else   if (diff > 0) {
    return 1;
  }
  return 0;
}"
45080,"public void closePath(FileSystemClient client,String filePath,Time now){
  ReplicationGroup replicationGroup=openFiles.remove(filePath);
  Time noTime=new Time(0,Unit.SECONDS);
  boolean hasChanged=!noTime.equals(replicationGroup.getTotalChangesDuration());
  if (replicationGroup != null && hasChanged) {
    Time time=now.plus(timeBeforeUpdateReplicas);
    send(new UpdateReplicationGroup(this,time,replicationGroup.getTotalChangesDuration(),filePath));
  }
}","public void closePath(FileSystemClient client,String filePath,Time now){
  ReplicationGroup replicationGroup=openFiles.remove(filePath);
  if (replicationGroup != null) {
    Time noTime=new Time(0,Unit.SECONDS);
    if (!noTime.equals(replicationGroup.getTotalChangesDuration())) {
      Time time=now.plus(timeBeforeUpdateReplicas);
      send(new UpdateReplicationGroup(this,time,replicationGroup.getTotalChangesDuration(),filePath));
    }
  }
}"
45081,"private void handleSleep(SleepEvent event){
  Aggregator aggregator=Aggregator.getInstance();
  Time now=event.getScheduledTime();
  Time currentStateActualDuration=now.minus(currentStateStartTime);
  if (currentStateName.equals(ShutdownEvent.EVENT_NAME)) {
    aggregator.aggregateShutdownDuration(getId(),currentStateActualDuration);
  }
 else   if (currentStateName.equals(SleepEvent.EVENT_NAME)) {
    throw new IllegalStateException(String.format(""String_Node_Str"",getId()));
  }
 else   if (currentStateName.equals(UserActivityEvent.EVENT_NAME)) {
    aggregator.aggregateActiveDuration(getId(),currentStateActualDuration);
  }
 else   if (currentStateName.equals(UserIdlenessEvent.EVENT_NAME)) {
    aggregateIdlenessPeriod(currentStateActualDuration);
  }
  currentStateName=SleepEvent.EVENT_NAME;
  currentStateStartTime=now;
  supposedCurrentStateEndTime=currentStateStartTime.plus(event.getDuration());
}","private void handleSleep(SleepEvent event){
  Aggregator aggregator=Aggregator.getInstance();
  Time now=event.getScheduledTime();
  Time currentStateActualDuration=now.minus(currentStateStartTime);
  if (currentStateName.equals(ShutdownEvent.EVENT_NAME)) {
    aggregator.aggregateShutdownDuration(getId(),currentStateActualDuration);
  }
 else   if (currentStateName.equals(UserActivityEvent.EVENT_NAME)) {
    aggregator.aggregateActiveDuration(getId(),currentStateActualDuration);
  }
 else   if (currentStateName.equals(UserIdlenessEvent.EVENT_NAME)) {
    aggregateIdlenessPeriod(currentStateActualDuration);
  }
  currentStateName=SleepEvent.EVENT_NAME;
  currentStateStartTime=now;
  supposedCurrentStateEndTime=currentStateStartTime.plus(event.getDuration());
}"
45082,"private void handleUserIdleness(UserIdlenessEvent event){
  Aggregator aggregator=Aggregator.getInstance();
  Time idlenessDuration=event.getDuration();
  Time now=event.getScheduledTime();
  Time currentStateActualDuration=now.minus(currentStateStartTime);
  if (currentStateName.equals(ShutdownEvent.EVENT_NAME)) {
    aggregator.aggregateShutdownDuration(getId(),currentStateActualDuration);
  }
 else   if (currentStateName.equals(SleepEvent.EVENT_NAME)) {
    aggregator.aggregateSleepingDuration(getId(),currentStateActualDuration);
  }
 else   if (currentStateName.equals(UserActivityEvent.EVENT_NAME)) {
    aggregator.aggregateActiveDuration(getId(),currentStateActualDuration);
  }
 else   if (currentStateName.equals(UserIdlenessEvent.EVENT_NAME)) {
    aggregateIdlenessPeriod(currentStateActualDuration);
  }
  currentStateName=UserIdlenessEvent.EVENT_NAME;
  currentStateStartTime=now;
  if (idlenessDuration.isEarlierThan(timeBeforeSleep)) {
    supposedCurrentStateEndTime=currentStateStartTime.plus(event.getDuration());
  }
 else {
    Time bedTime=now.plus(timeBeforeSleep);
    Time sleepDuration=now.plus(idlenessDuration).minus(bedTime);
    if (!sleepDuration.isEarlierThan(SLEEP_TRANSITION_DURATION.times(2))) {
      send(new SleepEvent(this,bedTime,sleepDuration));
      supposedCurrentStateEndTime=currentStateStartTime.plus(timeBeforeSleep);
    }
 else {
      supposedCurrentStateEndTime=currentStateStartTime.plus(event.getDuration());
    }
  }
  handlePendingFileSystemActivityEvents();
}","private void handleUserIdleness(UserIdlenessEvent event){
  Aggregator aggregator=Aggregator.getInstance();
  Time idlenessDuration=event.getDuration();
  Time now=event.getScheduledTime();
  Time currentStateActualDuration=now.minus(currentStateStartTime);
  if (currentStateName.equals(ShutdownEvent.EVENT_NAME)) {
    aggregator.aggregateShutdownDuration(getId(),currentStateActualDuration);
  }
 else   if (currentStateName.equals(SleepEvent.EVENT_NAME)) {
    aggregator.aggregateSleepingDuration(getId(),currentStateActualDuration);
  }
 else   if (currentStateName.equals(UserActivityEvent.EVENT_NAME)) {
    aggregator.aggregateActiveDuration(getId(),currentStateActualDuration);
  }
 else   if (currentStateName.equals(UserIdlenessEvent.EVENT_NAME)) {
    aggregateIdlenessPeriod(currentStateActualDuration);
  }
  currentStateName=UserIdlenessEvent.EVENT_NAME;
  currentStateStartTime=now;
  if (idlenessDuration.isEarlierThan(timeBeforeSleep)) {
    supposedCurrentStateEndTime=currentStateStartTime.plus(event.getDuration());
  }
 else {
    Time bedTime=now.plus(timeBeforeSleep);
    Time sleepDuration=now.plus(idlenessDuration).minus(bedTime);
    if (!sleepDuration.isEarlierThan(SLEEP_TRANSITION_DURATION.times(2))) {
      System.out.println(""String_Node_Str"" + bedTime + ""String_Node_Str""+ getId());
      send(new SleepEvent(this,bedTime,sleepDuration));
      supposedCurrentStateEndTime=currentStateStartTime.plus(timeBeforeSleep);
    }
 else {
      supposedCurrentStateEndTime=currentStateStartTime.plus(event.getDuration());
    }
  }
  handlePendingFileSystemActivityEvents();
}"
45083,"private Event parseWriteEvent(StringTokenizer tokenizer){
  Time[] timestampAndDuration=parseTime(tokenizer.nextToken());
  String filePath=tokenizer.nextToken();
  long length=Long.parseLong(tokenizer.nextToken());
  return new WriteEvent(client,timestampAndDuration[0],length,timestampAndDuration[2],filePath);
}","private Event parseWriteEvent(StringTokenizer tokenizer){
  Time[] timestampAndDuration=parseTime(tokenizer.nextToken());
  String filePath=tokenizer.nextToken();
  long length=Long.parseLong(tokenizer.nextToken());
  return new WriteEvent(client,timestampAndDuration[0],length,timestampAndDuration[1],filePath);
}"
45084,"/** 
 * Create Data Servers.
 * @param scheduler
 * @param machines
 * @return
 */
private static Set<DataServer> createDataServers(EventScheduler scheduler,Set<Machine> machines){
  Set<DataServer> dataServers=new HashSet<DataServer>();
  for (  Machine machine : machines) {
    dataServers.add(new DataServer(scheduler,machine));
  }
  return dataServers;
}","/** 
 * Create Data Servers.
 * @param aPlaceForEventsGeneratedBySimulation
 * @param machines
 * @return
 */
private static Set<DataServer> createDataServers(Set<Machine> machines){
  Set<DataServer> dataServers=new HashSet<DataServer>();
  for (  Machine machine : machines) {
    dataServers.add(new DataServer(machine));
  }
  return dataServers;
}"
45085,"private static MultipleEventSource createMultipleEventParser(Set<FileSystemClient> clients,Set<Machine> machines,File tracesDir){
  EventSource[] parsers=new EventSource[machines.size() + clients.size()];
  try {
    int parserCount=0;
    InputStream traceStream;
    for (    Machine machine : machines) {
      traceStream=new FileInputStream(new File(tracesDir,""String_Node_Str"" + machine.getId()));
      parsers[parserCount++]=new MachineActivityEventParser(machine,traceStream);
    }
    for (    FileSystemClient client : clients) {
      traceStream=new FileInputStream(new File(tracesDir,""String_Node_Str"" + client.getMachine().getId()));
      parsers[parserCount++]=new FileSystemEventParser(client,traceStream);
    }
  }
 catch (  FileNotFoundException e) {
    throw new IllegalStateException(e);
  }
  return new MultipleEventSource(parsers);
}","private static MultipleEventSource createMultipleEventParser(Set<FileSystemClient> clients,Set<Machine> machines,File tracesDir,EventsGeneratedBySimulationQueue eventsGeneratedBySimulationQueue){
  EventSource[] parsers=new EventSource[machines.size() + clients.size() + 1];
  try {
    int parserCount=0;
    InputStream traceStream;
    for (    Machine machine : machines) {
      traceStream=new FileInputStream(new File(tracesDir,""String_Node_Str"" + machine.getId()));
      parsers[parserCount++]=new MachineActivityEventParser(machine,traceStream);
    }
    for (    FileSystemClient client : clients) {
      traceStream=new FileInputStream(new File(tracesDir,""String_Node_Str"" + client.getMachine().getId()));
      parsers[parserCount++]=new FileSystemEventParser(client,traceStream);
    }
    parsers[parserCount]=eventsGeneratedBySimulationQueue;
  }
 catch (  FileNotFoundException e) {
    throw new IllegalStateException(e);
  }
  return new MultipleEventSource(parsers);
}"
45086,"/** 
 * @param args [0] (traces dir) - the traces in the directory must have the name &lt;trace type&gt;-&lt;machine name&gt;,  where &lt;trace type&gt; could be either fs or idleness. All traces must come in pairs of fs and idleness. Single traces will be ignored. Ex.: fs-cherne, idleness-cherne
 * @param args [1] (data placement police) - random, co-random or co-balance
 * @param args [2] time before sleep (secs)
 * @param args [3] replication level
 * @param args [4] time before update replicas' data (secs)
 * @param args [5] time before delete replicas' data (secs)
 */
public static void main(String[] args) throws IOException {
  if (args.length != 6) {
    System.out.println(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
    System.exit(1);
  }
  System.out.println(Arrays.toString(args));
  final EventScheduler scheduler=new EventScheduler();
  File tracesDir=new File(args[0]);
  if (!tracesDir.exists() || !tracesDir.isDirectory())   throw new IllegalArgumentException(args[0] + ""String_Node_Str"");
  String placementPoliceName=args[1];
  Long timeBeforeSleep=Long.valueOf(args[2]);
  Integer replicationLevel=Integer.valueOf(args[3]);
  Long timeBeforeUpdateData=Long.valueOf(args[4]);
  Long timeBeforeDeleteData=Long.valueOf(args[5]);
  Set<Machine> machines=createMachines(scheduler,tracesDir,timeBeforeSleep);
  Set<DataServer> dataServers=createDataServers(scheduler,machines);
  DataPlacementAlgorithm placement=createPlacementPolice(placementPoliceName,dataServers);
  MetadataServer metadataServer=new MetadataServer(scheduler,placement,replicationLevel,timeBeforeDeleteData,timeBeforeUpdateData);
  Set<FileSystemClient> clients=createClients(scheduler,machines,metadataServer);
  MultipleEventSource multipleEventSource=createMultipleEventParser(clients,machines,tracesDir);
  EventInjector eventInjector=new EventInjector(scheduler,multipleEventSource);
  scheduler.registerObserver(eventInjector);
  eventInjector.injectNext();
  scheduler.start();
  System.out.println(Aggregator.getInstance().summarize());
}","/** 
 * @param args [0] (traces dir) - the traces in the directory must have the name &lt;trace type&gt;-&lt;machine name&gt;,  where &lt;trace type&gt; could be either fs or idleness. All traces must come in pairs of fs and idleness. Single traces will be ignored. Ex.: fs-cherne, idleness-cherne
 * @param args [1] (data placement police) - random, co-random or co-balance
 * @param args [2] time before sleep (secs)
 * @param args [3] replication level
 * @param args [4] time before update replicas' data (secs)
 * @param args [5] time before delete replicas' data (secs)
 */
public static void main(String[] args) throws IOException {
  if (args.length != 6) {
    System.out.println(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
    System.exit(1);
  }
  System.out.println(Arrays.toString(args));
  File tracesDir=new File(args[0]);
  if (!tracesDir.exists() || !tracesDir.isDirectory())   throw new IllegalArgumentException(args[0] + ""String_Node_Str"");
  String placementPoliceName=args[1];
  Long timeBeforeSleep=Long.valueOf(args[2]);
  Integer replicationLevel=Integer.valueOf(args[3]);
  Long timeBeforeUpdateData=Long.valueOf(args[4]);
  Long timeBeforeDeleteData=Long.valueOf(args[5]);
  EventsGeneratedBySimulationQueue eventsGeneratedBySimulationQueue=new EventsGeneratedBySimulationQueue();
  Set<Machine> machines=createMachines(eventsGeneratedBySimulationQueue,tracesDir,timeBeforeSleep);
  Set<DataServer> dataServers=createDataServers(machines);
  DataPlacementAlgorithm placement=createPlacementPolice(placementPoliceName,dataServers);
  MetadataServer metadataServer=new MetadataServer(eventsGeneratedBySimulationQueue,placement,replicationLevel,timeBeforeDeleteData,timeBeforeUpdateData);
  Set<FileSystemClient> clients=createClients(eventsGeneratedBySimulationQueue,machines,metadataServer);
  MultipleEventSource multipleEventSource=createMultipleEventParser(clients,machines,tracesDir,eventsGeneratedBySimulationQueue);
  new EventScheduler(multipleEventSource).start();
  System.out.println(Aggregator.getInstance().summarize());
}"
45087,"private static Set<Machine> createMachines(EventScheduler scheduler,File tracesDir,long timeBeforeSleep){
  Set<Machine> machines=new HashSet<Machine>();
  List<String> fsTracesFiles=Arrays.asList(tracesDir.list(fsTracesFilter));
  List<String> idlenessTracesFiles=Arrays.asList(tracesDir.list(idlenessTracesFilter));
  for (  String fsTraceFile : fsTracesFiles) {
    String machineName=fsTraceFile.split(""String_Node_Str"")[1];
    if (idlenessTracesFiles.contains(""String_Node_Str"" + machineName)) {
      machines.add(new Machine(scheduler,machineName,timeBeforeSleep));
    }
  }
  return machines;
}","private static Set<Machine> createMachines(EventsGeneratedBySimulationQueue aPlaceForEventsGeneratedBySimulation,File tracesDir,long timeBeforeSleep){
  Set<Machine> machines=new HashSet<Machine>();
  List<String> fsTracesFiles=Arrays.asList(tracesDir.list(fsTracesFilter));
  List<String> idlenessTracesFiles=Arrays.asList(tracesDir.list(idlenessTracesFilter));
  for (  String fsTraceFile : fsTracesFiles) {
    String machineName=fsTraceFile.split(""String_Node_Str"")[1];
    if (idlenessTracesFiles.contains(""String_Node_Str"" + machineName)) {
      machines.add(new Machine(aPlaceForEventsGeneratedBySimulation,machineName,timeBeforeSleep));
    }
  }
  return machines;
}"
45088,"/** 
 * It create all clients.
 * @param scheduler
 * @param herald
 * @param aggregator
 * @param machines2
 * @return
 */
private static Set<FileSystemClient> createClients(EventScheduler scheduler,Set<Machine> machines,MetadataServer herald){
  Set<FileSystemClient> newClients=new HashSet<FileSystemClient>();
  for (  Machine machine : machines) {
    newClients.add(new FileSystemClient(scheduler,machine,herald));
  }
  return newClients;
}","/** 
 * It create all clients.
 * @param aPlaceForEventsGeneratedBySimulation
 * @param herald
 * @param aggregator
 * @param machines2
 * @return
 */
private static Set<FileSystemClient> createClients(EventsGeneratedBySimulationQueue aPlaceForEventsGeneratedBySimulation,Set<Machine> machines,MetadataServer herald){
  Set<FileSystemClient> newClients=new HashSet<FileSystemClient>();
  for (  Machine machine : machines) {
    newClients.add(new FileSystemClient(aPlaceForEventsGeneratedBySimulation,machine,herald));
  }
  return newClients;
}"
45089,"public SleepEvent(Machine aHandler,Time aScheduledTime){
  super(EVENT_NAME,aHandler,aScheduledTime,null);
}","public SleepEvent(Machine aHandler,Time aScheduledTime,Time duration){
  super(EVENT_NAME,aHandler,aScheduledTime,duration);
}"
45090,"@Override public String toString(){
  return EVENT_NAME + ""String_Node_Str"" + getScheduledTime();
}","@Override public String toString(){
  return EVENT_NAME + ""String_Node_Str"" + getScheduledTime()+ ""String_Node_Str""+ getDuration();
}"
45091,"/** 
 * @param aName
 * @param aHandler
 * @param scheduledTime
 */
public Event(String aName,EventHandler aHandler,Time scheduledTime,Time duration){
  myEventId=eventId++;
  name=aName;
  theTargetHandlerId=aHandler.getHandlerId();
  this.scheduledTime=scheduledTime;
  this.duration=duration;
}","public Event(String name,EventHandler handler,Time scheduledTime,Time duration){
  this.name=name;
  this.handler=handler;
  this.scheduledTime=scheduledTime;
  this.duration=duration;
}"
45092,"/** 
 */
private void schedule(){
  isActive=Boolean.valueOf(true);
  while (!eventsQueue.isEmpty() & isActive.booleanValue() & isEarlierThanEmulationEnd(now())) {
    Event aNextEvent=eventsQueue.peek();
    if (aNextEvent != null) {
      Time anEventTime=aNextEvent.getScheduledTime();
      if (anEventTime.isEarlierThan(now())) {
        throw new RuntimeException(""String_Node_Str"" + now() + ""String_Node_Str""+ ""String_Node_Str""+ anEventTime+ ""String_Node_Str"");
      }
      if (isEarlierThanEmulationEnd(anEventTime)) {
        now=anEventTime;
        processEvent(aNextEvent);
        notifyEventProcessed();
      }
 else {
        now=theEmulationEnd;
      }
    }
  }
  isActive=Boolean.valueOf(false);
}","/** 
 */
private void schedule(){
  isActive=Boolean.valueOf(true);
  while (!eventsQueue.isEmpty() & isActive.booleanValue() & isEarlierThanEmulationEnd(now())) {
    Event aNextEvent=eventsQueue.poll();
    if (aNextEvent != null) {
      Time anEventTime=aNextEvent.getScheduledTime();
      if (anEventTime.isEarlierThan(now())) {
        throw new RuntimeException(""String_Node_Str"" + now() + ""String_Node_Str""+ ""String_Node_Str""+ anEventTime+ ""String_Node_Str"");
      }
      if (isEarlierThanEmulationEnd(anEventTime)) {
        now=anEventTime;
        processEvent(aNextEvent);
        notifyEventProcessed();
      }
 else {
        now=theEmulationEnd;
      }
    }
  }
  isActive=Boolean.valueOf(false);
}"
45093,"public static void main(String[] args) throws IOException {
  System.out.println(Arrays.toString(args));
  final JEEventScheduler scheduler=new JEEventScheduler();
  String traceFile=args[0];
  String placement_police=args[1];
  String num_machines=args[2];
  String homeless=args[3];
  String migration_prob=args[4];
  String enableMigration=args[5];
  long replicationDelayMillis=Long.parseLong(args[6]) * 1000;
  DataPlacementAlgorithm placement=createPlacementPolice(placement_police);
  Integer numberOfMachines=new Integer(num_machines);
  long diskSize=1024 * 1024 * 1024* 1L;
  FileSizeDistribution fileSizeDistribution=new FileSizeDistribution(8.46,2.38,diskSize);
  List<Machine> machines=createMachines(scheduler,numberOfMachines);
  List<DataServer> dataServers=createDataServers(scheduler,numberOfMachines,diskSize,machines);
  MetadataServer metadataServer=new MetadataServer(scheduler,dataServers,placement,fileSizeDistribution,new NOPAlgorithm());
  List<DDGClient> clients=createClients(scheduler,numberOfMachines,machines,metadataServer);
  LoginAlgorithm loginAlgorithm=createLoginAlgorithm(new Boolean(homeless),new Double(migration_prob),MetadataServer.ONE_DAY,clients);
  SeerParserAndEventInjector injector=new SeerParserAndEventInjector(new File(traceFile),loginAlgorithm);
  EmulatorControl control=EmulatorControl.build(scheduler,injector,metadataServer,new Boolean(enableMigration),replicationDelayMillis);
  metadataServer.populateNamespace(0,2,dataServers);
  control.scheduleNext();
  scheduler.start();
  System.out.println(Aggregator.getInstance());
}","public static void main(String[] args) throws IOException {
  System.out.println(Arrays.toString(args));
  final JEEventScheduler scheduler=new JEEventScheduler();
  String traceFile=args[0];
  String placement_police=args[1];
  String num_machines=args[2];
  String homeless=args[3];
  String migration_prob=args[4];
  String enableMigration=args[5];
  long replicationDelayMillis=Long.parseLong(args[6]) * 1000;
  DataPlacementAlgorithm placement=createPlacementPolice(placement_police);
  Integer numberOfMachines=new Integer(num_machines);
  long diskSize=1024 * 1024 * 1024* 1L;
  FileSizeDistribution fileSizeDistribution=new FileSizeDistribution(8.46,2.38,diskSize);
  List<Machine> machines=createMachines(scheduler,numberOfMachines);
  List<DataServer> dataServers=createDataServers(scheduler,numberOfMachines,diskSize,machines);
  MetadataServer metadataServer=new MetadataServer(scheduler,dataServers,placement,fileSizeDistribution,new NOPAlgorithm());
  List<DDGClient> clients=createClients(scheduler,numberOfMachines,machines,metadataServer);
  LoginAlgorithm loginAlgorithm=createLoginAlgorithm(Boolean.valueOf(homeless),new Double(migration_prob),MetadataServer.ONE_DAY,clients);
  SeerParserAndEventInjector injector=new SeerParserAndEventInjector(new File(traceFile),loginAlgorithm);
  EmulatorControl control=EmulatorControl.build(scheduler,injector,metadataServer,Boolean.valueOf(enableMigration),replicationDelayMillis);
  metadataServer.populateNamespace(0,2,dataServers);
  control.scheduleNext();
  scheduler.start();
  System.out.println(Aggregator.getInstance());
}"
45094,"/** 
 * @param aName
 * @param aHandler
 * @param aScheduledTime
 */
public JEEvent(String aName,JEEventHandler aHandler,JETime aScheduledTime){
  myEventId=eventId++;
  name=new String(aName);
  theTargetHandlerId=aHandler.getHandlerId();
  theScheduledTime=aScheduledTime;
  theParameterList=new Vector();
}","/** 
 * @param aName
 * @param aHandler
 * @param aScheduledTime
 */
public JEEvent(String aName,JEEventHandler aHandler,JETime aScheduledTime){
  myEventId=eventId++;
  name=aName;
  theTargetHandlerId=aHandler.getHandlerId();
  theScheduledTime=aScheduledTime;
  theParameterList=new Vector();
}"
45095,"/** 
 * @param scheduler
 */
public JEEventHandler(JEEventScheduler scheduler){
  if (theUniqueHandlerId != null) {
    theUniqueHandlerId=new Integer(theUniqueHandlerId.intValue() + 1);
  }
 else {
    theUniqueHandlerId=new Integer(1);
  }
  HandlerId=theUniqueHandlerId;
  parameterlist=new LinkedList();
  theUniqueEventScheduler=scheduler;
  theUniqueEventScheduler.register_handler(this);
}","/** 
 * @param scheduler
 */
public JEEventHandler(JEEventScheduler scheduler){
  if (theUniqueHandlerId != null) {
    theUniqueHandlerId=Integer.valueOf(theUniqueHandlerId.intValue() + 1);
  }
 else {
    theUniqueHandlerId=Integer.valueOf(1);
  }
  HandlerId=theUniqueHandlerId;
  parameterlist=new LinkedList();
  theUniqueEventScheduler=scheduler;
  theUniqueEventScheduler.register_handler(this);
}"
45096,"/** 
 */
private void schedule(){
  isActive=new Boolean(true);
  while (!EventList.isEmpty() & isActive.booleanValue() & isEarlierThanEmulationEnd(now())) {
    JEEvent aNextEvent=peek();
    if (aNextEvent != null) {
      JETime anEventTime=aNextEvent.getTheScheduledTime();
      if (anEventTime.isEarlierThan(now())) {
        throw new RuntimeException(""String_Node_Str"" + now() + ""String_Node_Str""+ ""String_Node_Str""+ anEventTime+ ""String_Node_Str"");
      }
      if (isEarlierThanEmulationEnd(anEventTime)) {
        now=anEventTime;
        processEvent(aNextEvent);
      }
 else {
        now=theEmulationEnd;
      }
    }
  }
  isActive=Boolean.valueOf(false);
}","/** 
 */
private void schedule(){
  isActive=Boolean.valueOf(true);
  while (!EventList.isEmpty() & isActive.booleanValue() & isEarlierThanEmulationEnd(now())) {
    JEEvent aNextEvent=peek();
    if (aNextEvent != null) {
      JETime anEventTime=aNextEvent.getTheScheduledTime();
      if (anEventTime.isEarlierThan(now())) {
        throw new RuntimeException(""String_Node_Str"" + now() + ""String_Node_Str""+ ""String_Node_Str""+ anEventTime+ ""String_Node_Str"");
      }
      if (isEarlierThanEmulationEnd(anEventTime)) {
        now=anEventTime;
        processEvent(aNextEvent);
      }
 else {
        now=theEmulationEnd;
      }
    }
  }
  isActive=Boolean.valueOf(false);
}"
45097,"/** 
 * @param emulationEnd
 */
public JEEventScheduler(JETime emulationEnd){
  EventList.setSize(10000);
  EventList.clear();
  HandlerList=new Vector<JEEventHandler>();
  HandlerList.setSize(100);
  HandlerList.clear();
  isActive=new Boolean(false);
  theEmulationEnd=emulationEnd;
}","/** 
 * @param emulationEnd
 */
public JEEventScheduler(JETime emulationEnd){
  EventList.setSize(10000);
  EventList.clear();
  HandlerList=new Vector<JEEventHandler>();
  HandlerList.setSize(100);
  HandlerList.clear();
  isActive=Boolean.valueOf(false);
  theEmulationEnd=emulationEnd;
}"
45098,"@Test public void eventOrderingTest(){
  EventParser[] parsers=new EventParser[3];
  InputStream trace1=new FakeTraceStream(0);
  InputStream trace2=new FakeTraceStream(60);
  InputStream trace3=new FakeTraceStream(30);
  EventScheduler scheduler=new EventScheduler();
  Machine machine1=new Machine(scheduler,""String_Node_Str"");
  Machine machine2=new Machine(scheduler,""String_Node_Str"");
  Machine machine3=new Machine(scheduler,""String_Node_Str"");
  DDGClient client1=new DDGClient(scheduler,1,machine1,null);
  DDGClient client2=new DDGClient(scheduler,2,machine2,null);
  DDGClient client3=new DDGClient(scheduler,3,machine3,null);
  parsers[0]=new FileSystemEventParser(trace1,client1);
  parsers[1]=new FileSystemEventParser(trace2,client2);
  parsers[2]=new FileSystemEventParser(trace3,client3);
  EventParser multipleSourceParser=new MultipleEventParser(parsers);
  Event currentEvent=multipleSourceParser.getNextEvent();
  Event nextEvent=null;
  while ((nextEvent=multipleSourceParser.getNextEvent()) != null) {
    assertTrue(currentEvent.getTheScheduledTime().isEarlierThan(nextEvent.getTheScheduledTime()));
    currentEvent=nextEvent;
  }
}","@Test public void eventOrderingTest(){
  EventParser[] parsers=new EventParser[3];
  InputStream trace1=new FakeTraceStream(0);
  InputStream trace2=new FakeTraceStream(60);
  InputStream trace3=new FakeTraceStream(30);
  EventScheduler scheduler=new EventScheduler();
  Machine machine1=new Machine(scheduler,""String_Node_Str"");
  Machine machine2=new Machine(scheduler,""String_Node_Str"");
  Machine machine3=new Machine(scheduler,""String_Node_Str"");
  DDGClient client1=new DDGClient(scheduler,1,machine1,null);
  DDGClient client2=new DDGClient(scheduler,2,machine2,null);
  DDGClient client3=new DDGClient(scheduler,3,machine3,null);
  parsers[0]=new FileSystemEventParser(trace1,client1);
  parsers[1]=new FileSystemEventParser(trace2,client2);
  parsers[2]=new FileSystemEventParser(trace3,client3);
  EventParser multipleSourceParser=new MultipleEventParser(parsers);
  Event currentEvent=multipleSourceParser.getNextEvent();
  Event nextEvent=null;
  while ((nextEvent=multipleSourceParser.getNextEvent()) != null) {
    assertTrue(currentEvent.getTheScheduledTime().compareTo(nextEvent.getTheScheduledTime()) <= 0);
    currentEvent=nextEvent;
  }
}"
45099,"/** 
 * @param swapMachineProb
 * @param mSecondsBetweenLogins
 * @param firstClient
 * @param clients
 */
public HomeLessLoginAlgorithm(double swapMachineProb,long mSecondsBetweenLogins,DDGClient firstClient,List<DDGClient> clients){
  super(mSecondsBetweenLogins);
  if (swapMachineProb < 0 || swapMachineProb > 1) {
    throw new IllegalArgumentException();
  }
  this.clients=clients;
  this.swapMachineProb=swapMachineProb;
  this.random=new Random();
  this.lastSampledClient=firstClient;
}","/** 
 * @param swapMachineProb
 * @param mSecondsBetweenLogins
 * @param firstClient
 * @param clients
 */
public HomeLessLoginAlgorithm(double swapMachineProb,long mSecondsBetweenLogins,DDGClient firstClient,List<DDGClient> clients){
  super(mSecondsBetweenLogins,firstClient);
  if (swapMachineProb < 0 || swapMachineProb > 1) {
    throw new IllegalArgumentException();
  }
  this.clients=clients;
  this.swapMachineProb=swapMachineProb;
  this.random=new Random();
  this.lastSampledClient=firstClient;
}"
45100,"public LoginAlgorithm(long mSecondsBetweenLogins){
  this.mSecondsBetweenLogins=mSecondsBetweenLogins;
}","public LoginAlgorithm(long mSecondsBetweenLogins,DDGClient firstClient){
  this.mSecondsBetweenLogins=mSecondsBetweenLogins;
  this.lastSampledClient=firstClient;
}"
45101,"/** 
 * @param swapMachineProb
 * @param mSecondsBetweenLogins
 * @param sweetHomeClient
 * @param othersClients
 */
public SweetHomeLoginAlgorithm(double swapMachineProb,long mSecondsBetweenLogins,DDGClient sweetHomeClient,List<DDGClient> othersClients){
  super(mSecondsBetweenLogins);
  if (swapMachineProb < 0 || swapMachineProb >= 1) {
    throw new IllegalArgumentException();
  }
  if (othersClients.contains(sweetHomeClient)) {
    throw new IllegalArgumentException();
  }
  this.migrationProb=swapMachineProb;
  this.sweetHomeClient=sweetHomeClient;
  this.othersClients=othersClients;
  this.random=new Random();
}","/** 
 * @param swapMachineProb
 * @param mSecondsBetweenLogins
 * @param sweetHomeClient
 * @param othersClients
 */
public SweetHomeLoginAlgorithm(double swapMachineProb,long mSecondsBetweenLogins,DDGClient sweetHomeClient,List<DDGClient> othersClients){
  super(mSecondsBetweenLogins,sweetHomeClient);
  if (swapMachineProb < 0 || swapMachineProb >= 1) {
    throw new IllegalArgumentException();
  }
  if (othersClients.contains(sweetHomeClient)) {
    throw new IllegalArgumentException();
  }
  this.migrationProb=swapMachineProb;
  this.sweetHomeClient=sweetHomeClient;
  this.othersClients=othersClients;
  this.random=new Random();
}"
45102,"public static EList getMetadataTableFromConnection(final Connection conn){
  if (conn == null) {
    return null;
  }
  if (conn instanceof SAPConnection) {
    final SAPConnection sapConnection=(SAPConnection)conn;
    final EList functions=sapConnection.getFuntions();
    if (functions != null && !functions.isEmpty()) {
      final EList tables=new BasicEList();
      for (int i=0; i < functions.size(); i++) {
        tables.addAll(((SAPFunctionUnit)functions.get(i)).getTables());
      }
      return tables;
    }
  }
 else {
    EList tables=new BasicEList();
    tables.addAll(ConnectionHelper.getTables(conn));
    return tables;
  }
  return null;
}","public static EList getMetadataTableFromConnection(final Connection conn){
  if (conn == null) {
    return null;
  }
  if (conn instanceof SAPConnection) {
    final SAPConnection sapConnection=(SAPConnection)conn;
    final EList functions=sapConnection.getFuntions();
    if (functions != null && !functions.isEmpty()) {
      final EList tables=new BasicEList();
      for (int i=0; i < functions.size(); i++) {
        tables.add(((SAPFunctionUnit)functions.get(i)).getMetadataTable());
      }
      return tables;
    }
  }
 else {
    EList tables=new BasicEList();
    tables.addAll(ConnectionHelper.getTables(conn));
    return tables;
  }
  return null;
}"
45103,"private static SAPFunctionUnit createFunctionUnit(String tableName,SAPConnection connection,JCoFunction function){
  SAPFunctionUnit functionUnit;
  OutputSAPFunctionParameterTable outputParameterTable;
  InputSAPFunctionParameterTable inputParameterTable;
  MetadataTable metadataTable;
  SAPTestInputParameterTable testInputParameterTable;
  ProxyRepositoryFactory proxyRepositoryFactory=ProxyRepositoryFactory.getInstance();
  functionUnit=ConnectionFactory.eINSTANCE.createSAPFunctionUnit();
  functionUnit.setName(tableName);
  functionUnit.setLabel(tableName);
  functionUnit.setOutputType(SapParameterTypeEnum.OUTPUT_SINGLE.getDisplayLabel());
  functionUnit.setConnection(connection);
  functionUnit.setId(proxyRepositoryFactory.getNextId());
  inputParameterTable=ConnectionFactory.eINSTANCE.createInputSAPFunctionParameterTable();
  inputParameterTable.setFunctionUnit(functionUnit);
  inputParameterTable.setId(proxyRepositoryFactory.getNextId());
  inputParameterTable.setLabel(functionUnit.getName());
  outputParameterTable=ConnectionFactory.eINSTANCE.createOutputSAPFunctionParameterTable();
  outputParameterTable.setFunctionUnit(functionUnit);
  outputParameterTable.setId(proxyRepositoryFactory.getNextId());
  outputParameterTable.setLabel(functionUnit.getName());
  testInputParameterTable=ConnectionFactory.eINSTANCE.createSAPTestInputParameterTable();
  testInputParameterTable.setFunctionUnit(functionUnit);
  testInputParameterTable.setId(proxyRepositoryFactory.getNextId());
  testInputParameterTable.setLabel(function.getName());
  metadataTable=ConnectionFactory.eINSTANCE.createMetadataTable();
  metadataTable.setId(proxyRepositoryFactory.getNextId());
  metadataTable.setLabel(tableName);
  metadataTable.getColumns().addAll(getColumns(function));
  functionUnit.setInputParameterTable(inputParameterTable);
  functionUnit.setOutputParameterTable(outputParameterTable);
  functionUnit.setMetadataTable(metadataTable);
  functionUnit.setTestInputParameterTable(testInputParameterTable);
  connection.getFuntions().add(functionUnit);
  return functionUnit;
}","private static SAPFunctionUnit createFunctionUnit(String tableName,SAPConnection connection,JCoFunction function){
  SAPFunctionUnit functionUnit;
  OutputSAPFunctionParameterTable outputParameterTable;
  InputSAPFunctionParameterTable inputParameterTable;
  MetadataTable metadataTable;
  SAPTestInputParameterTable testInputParameterTable;
  ProxyRepositoryFactory proxyRepositoryFactory=ProxyRepositoryFactory.getInstance();
  functionUnit=ConnectionFactory.eINSTANCE.createSAPFunctionUnit();
  functionUnit.setName(function.getName());
  functionUnit.setLabel(tableName);
  functionUnit.setOutputType(SapParameterTypeEnum.OUTPUT_SINGLE.getDisplayLabel());
  functionUnit.setConnection(connection);
  functionUnit.setId(proxyRepositoryFactory.getNextId());
  inputParameterTable=ConnectionFactory.eINSTANCE.createInputSAPFunctionParameterTable();
  inputParameterTable.setFunctionUnit(functionUnit);
  inputParameterTable.setId(proxyRepositoryFactory.getNextId());
  inputParameterTable.setLabel(functionUnit.getName());
  outputParameterTable=ConnectionFactory.eINSTANCE.createOutputSAPFunctionParameterTable();
  outputParameterTable.setFunctionUnit(functionUnit);
  outputParameterTable.setId(proxyRepositoryFactory.getNextId());
  outputParameterTable.setLabel(functionUnit.getName());
  testInputParameterTable=ConnectionFactory.eINSTANCE.createSAPTestInputParameterTable();
  testInputParameterTable.setFunctionUnit(functionUnit);
  testInputParameterTable.setId(proxyRepositoryFactory.getNextId());
  testInputParameterTable.setLabel(function.getName());
  metadataTable=ConnectionFactory.eINSTANCE.createMetadataTable();
  metadataTable.setId(proxyRepositoryFactory.getNextId());
  metadataTable.setLabel(tableName);
  metadataTable.getColumns().addAll(getColumns(function));
  functionUnit.setInputParameterTable(inputParameterTable);
  functionUnit.setOutputParameterTable(outputParameterTable);
  functionUnit.setMetadataTable(metadataTable);
  functionUnit.setTestInputParameterTable(testInputParameterTable);
  connection.getFuntions().add(functionUnit);
  return functionUnit;
}"
45104,"/** 
 * Updates the accountActive flag on the hidden accounts.  (These are postmaster and abuse.
 * @param ldap the ldap block we're using
 * @param domainName the domain name to update
 * @param active activate or deactive accounts
 * @exception NamingException if an ldap error occurs
 * @exception MailManagerException if a mail manager error occurs
 */
private void hiddenAccountUpdate(LdapFacade ldap,String domainName,boolean active) throws NamingException, MailManagerException {
  AliasInfo ai=getAlias(""String_Node_Str"" + domainName);
  if (ai != null) {
    ai.setActive(active);
    modifyAlias(ai);
  }
  String pmMail=""String_Node_Str"" + domainName;
  ldap.searchOneLevel(domainDn(domainName),""String_Node_Str"" + pmMail);
  if (ldap.nextResult()) {
    ldap.modifyElementAttribute(ldap.getResultName(),""String_Node_Str"",booleanToString(active));
  }
}","/** 
 * Updates the accountActive flag on the hidden accounts.  (These are postmaster and abuse.
 * @param ldap the ldap block we're using
 * @param domainName the domain name to update
 * @param active activate or deactive accounts
 * @exception NamingException if an ldap error occurs
 * @exception MailManagerException if a mail manager error occurs
 */
private void hiddenAccountUpdate(LdapFacade ldap,String domainName,boolean active) throws NamingException, MailManagerException {
  AliasInfo ai=getAlias(""String_Node_Str"" + domainName);
  if (ai != null) {
    ai.setActive(active);
    modifyAlias(ai);
  }
  ai=null;
  ai=getAlias(""String_Node_Str"" + domainName);
  if (ai != null) {
    ai.setActive(active);
    modifyAlias(ai);
  }
  String pmMail=""String_Node_Str"" + domainName;
  ldap.searchOneLevel(domainDn(domainName),""String_Node_Str"" + pmMail);
  if (ldap.nextResult()) {
    ldap.modifyElementAttribute(ldap.getResultName(),""String_Node_Str"",booleanToString(active));
  }
}"
45105,"/** 
 * Modifies the domain's capabilities out of the DomainInfo object.
 * @param domain a <code>DomainInfo</code> value
 * @exception PermissionException if a permission error occurs
 * @exception MailManagerException if an error occurs
 */
public void modifyDomain(DomainInfo domain) throws PermissionException, MailManagerException {
  LdapFacade ldap=null;
  String domainName=domain.getName();
  String domaindn=domainDn(domainName);
  try {
    ldap=getLdap();
    ldap.modifyElementAttribute(domaindn,""String_Node_Str"",booleanToString(domain.getCanEditAccounts()));
    ldap.modifyElementAttribute(domaindn,""String_Node_Str"",booleanToString(domain.getCanEditPostmasters()));
    ldap.modifyElementAttribute(domaindn,""String_Node_Str"",booleanToString(domain.getActive()));
    ldap.modifyElementAttribute(domaindn,""String_Node_Str"",getUnixTimeString());
    ldap.modifyElementAttribute(domaindn,""String_Node_Str"",booleanToString(domain.getDelete()));
    if (domain.getActive()) {
      hiddenAccountUpdate(ldap,domainName,true);
    }
 else {
      hiddenAccountUpdate(ldap,domainName,false);
      Iterator i=getAccounts(domainName).iterator();
      while (i.hasNext()) {
        AccountInfo ai=(AccountInfo)i.next();
        ai.setActive(false);
        modifyAccount(ai);
      }
      i=getAliases(domainName).iterator();
      while (i.hasNext()) {
        AliasInfo ali=(AliasInfo)i.next();
        ali.setActive(false);
        modifyAlias(ali);
      }
    }
  }
 catch (  NoPermissionException e) {
    throw new PermissionException(""String_Node_Str"" + domainName,e);
  }
catch (  NamingException e) {
    throw new MailManagerException(domainName,e);
  }
 finally {
    closeLdap(ldap);
  }
}","/** 
 * Modifies the domain's capabilities out of the DomainInfo object.
 * @param domain a <code>DomainInfo</code> value
 * @exception PermissionException if a permission error occurs
 * @exception MailManagerException if an error occurs
 */
public void modifyDomain(DomainInfo domain) throws PermissionException, MailManagerException {
  LdapFacade ldap=null;
  String domainName=domain.getName();
  String domaindn=domainDn(domainName);
  try {
    ldap=getLdap();
    ldap.modifyElementAttribute(domaindn,""String_Node_Str"",booleanToString(domain.getCanEditAccounts()));
    ldap.modifyElementAttribute(domaindn,""String_Node_Str"",booleanToString(domain.getCanEditPostmasters()));
    ldap.modifyElementAttribute(domaindn,""String_Node_Str"",booleanToString(domain.getActive()));
    ldap.modifyElementAttribute(domaindn,""String_Node_Str"",getUnixTimeString());
    ldap.modifyElementAttribute(domaindn,""String_Node_Str"",booleanToString(domain.getDelete()));
    if (domain.getActive() && !domain.getDelete()) {
      hiddenAccountUpdate(ldap,domainName,true);
    }
 else {
      hiddenAccountUpdate(ldap,domainName,false);
      Iterator i=getAccounts(domainName).iterator();
      while (i.hasNext()) {
        AccountInfo ai=(AccountInfo)i.next();
        ai.setActive(false);
        modifyAccount(ai);
      }
      i=getAliases(domainName).iterator();
      while (i.hasNext()) {
        AliasInfo ali=(AliasInfo)i.next();
        ali.setActive(false);
        modifyAlias(ali);
      }
    }
  }
 catch (  NoPermissionException e) {
    throw new PermissionException(""String_Node_Str"" + domainName,e);
  }
catch (  NamingException e) {
    throw new MailManagerException(domainName,e);
  }
 finally {
    closeLdap(ldap);
  }
}"
45106,"/** 
 * actually does the nuking
 */
private void nukeAccounts(){
  boolean nondestruct=JammCleanerOptions.isNonDestructive();
  Iterator a=mDeadAccounts.iterator();
  while (a.hasNext()) {
    AccountInfo account=(AccountInfo)a.next();
    if (nondestruct) {
      System.out.println(account.getName() + ""String_Node_Str"");
    }
 else {
      File file=new File(account.getFullPathToMailbox());
      boolean successful=FileUtils.recursiveDelete(file);
      if (successful) {
        boolean ldapsuccess=false;
        try {
          mManager.deleteAccount(account.getName());
          ldapsuccess=true;
        }
 catch (        MailManagerException e) {
          System.out.println(""String_Node_Str"" + account.getName() + ""String_Node_Str""+ e.toString());
        }
        if (ldapsuccess && JammCleanerOptions.isVerbose()) {
          System.out.println(account.getName() + ""String_Node_Str"");
        }
      }
 else {
        System.out.println(""String_Node_Str"" + account.getName() + ""String_Node_Str"");
      }
    }
  }
}","/** 
 * actually does the nuking
 */
private void nukeAccounts(){
  boolean nondestruct=JammCleanerOptions.isNonDestructive();
  Iterator a=mDeadAccounts.iterator();
  while (a.hasNext()) {
    AccountInfo account=(AccountInfo)a.next();
    if (nondestruct) {
      System.out.println(account.getName() + ""String_Node_Str"");
    }
 else {
      File file=new File(account.getFullPathToMailbox());
      boolean successful=false;
      if (file.exists()) {
        successful=FileUtils.recursiveDelete(file);
      }
 else {
        System.out.println(""String_Node_Str"" + account.getName() + ""String_Node_Str"");
        successful=true;
      }
      if (successful) {
        boolean ldapsuccess=false;
        try {
          mManager.deleteAccount(account.getName());
          ldapsuccess=true;
        }
 catch (        MailManagerException e) {
          System.out.println(""String_Node_Str"" + account.getName() + ""String_Node_Str""+ e.toString());
        }
        if (ldapsuccess && JammCleanerOptions.isVerbose()) {
          System.out.println(account.getName() + ""String_Node_Str"");
        }
      }
 else {
        System.out.println(""String_Node_Str"" + account.getName() + ""String_Node_Str"");
      }
    }
  }
}"
45107,"private void assignPlayerToMap(){
  System.out.println(""String_Node_Str"");
  User nero=userDao.findByUsername(""String_Node_Str"");
  User ariovist=userDao.findByUsername(""String_Node_Str"");
  Map playground=mapDao.findByName(""String_Node_Str"");
  List<MapUser> users=new ArrayList<MapUser>();
  List<Square> nerosquares=new ArrayList<Square>();
  Square neroStartsquare=playground.getSquares().get(0);
  neroStartsquare.setIsHomeBase(true);
  nerosquares.add(neroStartsquare);
  MapUser neroMap=new MapUser();
  neroMap.setMap(playground);
  neroMap.setUser(nero);
  neroMap.setSquares(nerosquares);
  neroMap.setClayRessource(new StoredRessource(1500,SharedRessourceType.CLAY,new Date(),1.0,neroMap));
  neroMap.setWoodRessource(new StoredRessource(1500,SharedRessourceType.WOOD,new Date(),1.0,neroMap));
  neroMap.setGrainRessource(new StoredRessource(1500,SharedRessourceType.GRAIN,new Date(),1.0,neroMap));
  neroMap.setIronRessource(new StoredRessource(1500,SharedRessourceType.IRON,new Date(),1.0,neroMap));
  users.add(neroMap);
  List<Square> ariovistsquares=new ArrayList<Square>();
  Square ariovistStartsquare=playground.getSquares().get(4);
  ariovistStartsquare.setIsHomeBase(true);
  ariovistsquares.add(ariovistStartsquare);
  MapUser ariovistMap=new MapUser();
  ariovistMap.setMap(playground);
  ariovistMap.setUser(ariovist);
  ariovistMap.setSquares(ariovistsquares);
  ariovistMap.setClayRessource(new StoredRessource(1500,SharedRessourceType.CLAY,new Date(),1.0,ariovistMap));
  ariovistMap.setWoodRessource(new StoredRessource(1500,SharedRessourceType.WOOD,new Date(),1.0,ariovistMap));
  ariovistMap.setGrainRessource(new StoredRessource(1500,SharedRessourceType.GRAIN,new Date(),1.0,ariovistMap));
  ariovistMap.setIronRessource(new StoredRessource(1500,SharedRessourceType.IRON,new Date(),1.0,ariovistMap));
  users.add(ariovistMap);
  playground.setUsers(users);
  mapUserDao.beginTransaction();
  mapUserDao.insert(neroMap);
  mapUserDao.insert(ariovistMap);
  mapDao.insert(playground);
  squareDao.insert(neroStartsquare);
  squareDao.insert(ariovistStartsquare);
  mapUserDao.commitTransaction();
}","private void assignPlayerToMap(){
  System.out.println(""String_Node_Str"");
  User nero=userDao.findByUsername(""String_Node_Str"");
  User ariovist=userDao.findByUsername(""String_Node_Str"");
  Map playground=mapDao.findByName(""String_Node_Str"");
  List<MapUser> users=new ArrayList<MapUser>();
  List<Square> nerosquares=new ArrayList<Square>();
  Square neroStartsquare=playground.getSquares().get(0);
  neroStartsquare.setIsHomeBase(true);
  nerosquares.add(neroStartsquare);
  MapUser neroMap=new MapUser();
  neroMap.setMap(playground);
  neroMap.setUser(nero);
  neroMap.setSquares(nerosquares);
  neroMap.setClayRessource(new StoredRessource(15000,SharedRessourceType.CLAY,new Date(),1.0,neroMap));
  neroMap.setWoodRessource(new StoredRessource(15000,SharedRessourceType.WOOD,new Date(),1.0,neroMap));
  neroMap.setGrainRessource(new StoredRessource(15000,SharedRessourceType.GRAIN,new Date(),1.0,neroMap));
  neroMap.setIronRessource(new StoredRessource(15000,SharedRessourceType.IRON,new Date(),1.0,neroMap));
  users.add(neroMap);
  List<Square> ariovistsquares=new ArrayList<Square>();
  Square ariovistStartsquare=playground.getSquares().get(4);
  ariovistStartsquare.setIsHomeBase(true);
  ariovistsquares.add(ariovistStartsquare);
  MapUser ariovistMap=new MapUser();
  ariovistMap.setMap(playground);
  ariovistMap.setUser(ariovist);
  ariovistMap.setSquares(ariovistsquares);
  ariovistMap.setClayRessource(new StoredRessource(1500,SharedRessourceType.CLAY,new Date(),1.0,ariovistMap));
  ariovistMap.setWoodRessource(new StoredRessource(1500,SharedRessourceType.WOOD,new Date(),1.0,ariovistMap));
  ariovistMap.setGrainRessource(new StoredRessource(1500,SharedRessourceType.GRAIN,new Date(),1.0,ariovistMap));
  ariovistMap.setIronRessource(new StoredRessource(1500,SharedRessourceType.IRON,new Date(),1.0,ariovistMap));
  users.add(ariovistMap);
  playground.setUsers(users);
  mapUserDao.beginTransaction();
  mapUserDao.insert(neroMap);
  mapUserDao.insert(ariovistMap);
  mapDao.insert(playground);
  squareDao.insert(neroStartsquare);
  squareDao.insert(ariovistStartsquare);
  mapUserDao.commitTransaction();
}"
45108,"private Form<?> createForm(String form,final String button,final BuildingType type){
  Form<?> newForm=new Form<Object>(form);
  final Building building=buildings.get(type);
  AjaxButton newButton=new AjaxButton(button){
    @Override protected void onSubmit(    AjaxRequestTarget target,    Form<?> form){
      Building building=buildings.get(type);
      if (building != null) {
        Integer newLevel=building.getLevel() + 1;
        building.setLevel(newLevel);
        buildingsDao.beginTransaction();
        buildingsDao.update(building);
        mapUserDao.update(baseutils.reduceRessources(mapUser,500));
        buildingsDao.commitTransaction();
        updateBildingCounter(building,this);
        info(""String_Node_Str"");
      }
 else {
        building=new Building();
        building.setLevel(1);
        building.setType(type);
        building.setUpgrading(false);
        building.setSquare(square);
        square.getBuildings().add(building);
        mapUser.getSquares().add(square);
        baseutils.reduceRessources(mapUser,1500);
        buildingsDao.beginTransaction();
        buildingsDao.insert(building);
        mapUserDao.update(mapUser);
        buildingsDao.commitTransaction();
        updateBildingCounter(building,this);
        buildings.put(type,building);
        info(""String_Node_Str"");
      }
      target.add(buildWood);
      target.add(buildClay);
      target.add(buildStable);
      target.add(buildBarracks);
      target.add(buildUpgrades);
      target.add(buildDestruction);
      target.add(buildGrain);
      target.add(buildIron);
      checkVisiblityOfLinks();
      add(barracksLink);
      add(stableLink);
      add(destructionLink);
      add(upgradeLink);
      add(troopsLink);
      add(feedbackPanel);
    }
    @Override protected void onError(    AjaxRequestTarget target,    Form<?> form){
    }
  }
;
  updateBildingCounter(building,newButton);
  newForm.add(newButton);
  return newForm;
}","private Form<?> createForm(String form,final String button,final BuildingType type){
  Form<?> newForm=new Form<Object>(form);
  final Building building=buildings.get(type);
  AjaxButton newButton=new AjaxButton(button){
    private static final long serialVersionUID=-9098940045535772960L;
    @Override protected void onSubmit(    AjaxRequestTarget target,    Form<?> form){
      Building building=buildings.get(type);
      if (building != null) {
        Integer newLevel=building.getLevel() + 1;
        building.setLevel(newLevel);
        buildingsDao.beginTransaction();
        buildingsDao.update(building);
        mapUserDao.update(baseutils.reduceRessources(mapUser,500));
        buildingsDao.commitTransaction();
        updateBildingCounter(building,this);
        info(""String_Node_Str"");
      }
 else {
        building=new Building();
        building.setLevel(1);
        building.setType(type);
        building.setUpgrading(false);
        building.setSquare(square);
        square.getBuildings().add(building);
        buildingsDao.beginTransaction();
        buildingsDao.insert(building);
        squareDao.update(square);
        mapUserDao.update(baseutils.reduceRessources(mapUser,1500));
        buildingsDao.commitTransaction();
        updateBildingCounter(building,this);
        buildings.put(type,building);
        info(""String_Node_Str"");
      }
      target.add(buildWood);
      target.add(buildClay);
      target.add(buildStable);
      target.add(buildBarracks);
      target.add(buildUpgrades);
      target.add(buildDestruction);
      target.add(buildGrain);
      target.add(buildIron);
      checkVisiblityOfLinks();
      target.add(barracksLink);
      target.add(stableLink);
      target.add(destructionLink);
      target.add(upgradeLink);
      target.add(troopsLink);
    }
    @Override protected void onError(    AjaxRequestTarget target,    Form<?> form){
    }
  }
;
  updateBildingCounter(building,newButton);
  newForm.add(newButton);
  return newForm;
}"
45109,"@Override protected void onSubmit(AjaxRequestTarget target,Form<?> form){
  Building building=buildings.get(type);
  if (building != null) {
    Integer newLevel=building.getLevel() + 1;
    building.setLevel(newLevel);
    buildingsDao.beginTransaction();
    buildingsDao.update(building);
    mapUserDao.update(baseutils.reduceRessources(mapUser,500));
    buildingsDao.commitTransaction();
    updateBildingCounter(building,this);
    info(""String_Node_Str"");
  }
 else {
    building=new Building();
    building.setLevel(1);
    building.setType(type);
    building.setUpgrading(false);
    building.setSquare(square);
    square.getBuildings().add(building);
    mapUser.getSquares().add(square);
    baseutils.reduceRessources(mapUser,1500);
    buildingsDao.beginTransaction();
    buildingsDao.insert(building);
    mapUserDao.update(mapUser);
    buildingsDao.commitTransaction();
    updateBildingCounter(building,this);
    buildings.put(type,building);
    info(""String_Node_Str"");
  }
  target.add(buildWood);
  target.add(buildClay);
  target.add(buildStable);
  target.add(buildBarracks);
  target.add(buildUpgrades);
  target.add(buildDestruction);
  target.add(buildGrain);
  target.add(buildIron);
  checkVisiblityOfLinks();
  add(barracksLink);
  add(stableLink);
  add(destructionLink);
  add(upgradeLink);
  add(troopsLink);
  add(feedbackPanel);
}","@Override protected void onSubmit(AjaxRequestTarget target,Form<?> form){
  Building building=buildings.get(type);
  if (building != null) {
    Integer newLevel=building.getLevel() + 1;
    building.setLevel(newLevel);
    buildingsDao.beginTransaction();
    buildingsDao.update(building);
    mapUserDao.update(baseutils.reduceRessources(mapUser,500));
    buildingsDao.commitTransaction();
    updateBildingCounter(building,this);
    info(""String_Node_Str"");
  }
 else {
    building=new Building();
    building.setLevel(1);
    building.setType(type);
    building.setUpgrading(false);
    building.setSquare(square);
    square.getBuildings().add(building);
    buildingsDao.beginTransaction();
    buildingsDao.insert(building);
    squareDao.update(square);
    mapUserDao.update(baseutils.reduceRessources(mapUser,1500));
    buildingsDao.commitTransaction();
    updateBildingCounter(building,this);
    buildings.put(type,building);
    info(""String_Node_Str"");
  }
  target.add(buildWood);
  target.add(buildClay);
  target.add(buildStable);
  target.add(buildBarracks);
  target.add(buildUpgrades);
  target.add(buildDestruction);
  target.add(buildGrain);
  target.add(buildIron);
  checkVisiblityOfLinks();
  target.add(barracksLink);
  target.add(stableLink);
  target.add(destructionLink);
  target.add(upgradeLink);
  target.add(troopsLink);
}"
45110,"public MapUser reduceRessources(MapUser mapuser,Integer res){
  StoredRessource clay=mapuser.getClayRessource();
  clay.setAmount(clay.getAmount() - res);
  StoredRessource wood=mapuser.getWoodRessource();
  wood.setAmount(wood.getAmount() - res);
  StoredRessource iron=mapuser.getIronRessource();
  iron.setAmount(iron.getAmount() - res);
  StoredRessource grain=mapuser.getGrainRessource();
  grain.setAmount(grain.getAmount() - res);
  mapuser.setClayRessource(clay);
  mapuser.setGrainRessource(grain);
  mapuser.setIronRessource(iron);
  mapuser.setWoodRessource(wood);
  sRDao.beginTransaction();
  sRDao.update(clay);
  sRDao.update(grain);
  sRDao.update(iron);
  sRDao.update(wood);
  sRDao.commitTransaction();
  return mapuser;
}","public MapUser reduceRessources(MapUser mapuser,Integer res){
  StoredRessource clay=mapuser.getClayRessource();
  clay.setAmount(clay.getAmount() - res);
  StoredRessource wood=mapuser.getWoodRessource();
  wood.setAmount(wood.getAmount() - res);
  StoredRessource iron=mapuser.getIronRessource();
  iron.setAmount(iron.getAmount() - res);
  StoredRessource grain=mapuser.getGrainRessource();
  grain.setAmount(grain.getAmount() - res);
  mapuser.setClayRessource(clay);
  mapuser.setGrainRessource(grain);
  mapuser.setIronRessource(iron);
  mapuser.setWoodRessource(wood);
  sRDao.update(clay);
  sRDao.update(grain);
  sRDao.update(iron);
  sRDao.update(wood);
  return mapuser;
}"
45111,"public boolean checkRessources(MapUser mapuser,Integer res){
  if (mapuser.getClayRessource().getAmount() < res) {
    return false;
  }
  if (mapuser.getGrainRessource().getAmount() < res) {
    return false;
  }
  if (mapuser.getIronRessource().getAmount() < res) {
    return false;
  }
  if (mapuser.getWoodRessource().getAmount() < res) {
    return false;
  }
  return true;
}","public boolean checkRessources(MapUser mapuser,Integer res){
  if (mapuser.getClayRessource() == null || mapuser.getClayRessource().getAmount() < res) {
    return false;
  }
  if (mapuser.getGrainRessource() == null || mapuser.getGrainRessource().getAmount() < res) {
    return false;
  }
  if (mapuser.getIronRessource() == null || mapuser.getIronRessource().getAmount() < res) {
    return false;
  }
  if (mapuser.getWoodRessource() == null || mapuser.getWoodRessource().getAmount() < res) {
    return false;
  }
  return true;
}"
45112,"public InPage(PageParameters parameters){
  SwagWebSession session=(SwagWebSession)getSession();
  add(new InTopNavigation(""String_Node_Str""));
  add(new InNavigation(""String_Node_Str""));
  add(new OutSideNavigation(""String_Node_Str""));
  AdminNavigation adminNav=new AdminNavigation(""String_Node_Str"");
  adminNav.setVisible(false);
  if (session.getRoles().hasRole(Roles.ADMIN)) {
    adminNav.setVisible(true);
  }
  add(adminNav);
}","public InPage(PageParameters parameters){
  SwagWebSession session=(SwagWebSession)getSession();
  add(new InTopNavigation(""String_Node_Str""));
  add(new InNavigation(""String_Node_Str""));
  add(new ResourcenSidePanel(""String_Node_Str""));
  AdminNavigation adminNav=new AdminNavigation(""String_Node_Str"");
  adminNav.setVisible(false);
  if (session.getRoles().hasRole(Roles.ADMIN)) {
    adminNav.setVisible(true);
  }
  add(adminNav);
}"
45113,"public BasePanel(String id,long squareId){
  super(id);
  square=squareDAO.findById(squareId);
  fetchBuildings();
  FeedbackPanel feedbackPanel=new FeedbackPanel(""String_Node_Str"");
  add(feedbackPanel);
  setupForm();
  PageParameters params=new PageParameters();
  params.add(""String_Node_Str"",squareId);
  BookmarkablePageLink barracksLink=new BookmarkablePageLink(""String_Node_Str"",Barracks.class,params);
  if (!buildings.containsKey(BuildingType.BARRACKS)) {
    barracksLink.setVisible(false);
  }
  add(barracksLink);
  BookmarkablePageLink stableLink=new BookmarkablePageLink(""String_Node_Str"",Stable.class,params);
  if (!buildings.containsKey(BuildingType.STABLE)) {
    stableLink.setVisible(false);
  }
  add(stableLink);
  BookmarkablePageLink destructionLink=new BookmarkablePageLink(""String_Node_Str"",Destruction.class,params);
  if (!buildings.containsKey(BuildingType.DESTRUCTION)) {
    destructionLink.setVisible(false);
  }
  add(destructionLink);
  BookmarkablePageLink upgradeLink=new BookmarkablePageLink(""String_Node_Str"",Upgrades.class,params);
  if (!buildings.containsKey(BuildingType.UPGRADE)) {
    upgradeLink.setVisible(false);
  }
  add(upgradeLink);
  add(new BookmarkablePageLink(""String_Node_Str"",Troops.class,params));
}","public BasePanel(String id,long squareId){
  super(id);
  this.squareId=squareId;
  square=squareDAO.findById(squareId);
  fetchBuildings();
  FeedbackPanel feedbackPanel=new FeedbackPanel(""String_Node_Str"");
  add(feedbackPanel);
  setupForm();
  PageParameters params=new PageParameters();
  params.add(""String_Node_Str"",squareId);
  BookmarkablePageLink barracksLink=new BookmarkablePageLink(""String_Node_Str"",Barracks.class,params);
  if (!buildings.containsKey(BuildingType.BARRACKS)) {
    barracksLink.setVisible(false);
  }
  add(barracksLink);
  BookmarkablePageLink stableLink=new BookmarkablePageLink(""String_Node_Str"",Stable.class,params);
  if (!buildings.containsKey(BuildingType.STABLE)) {
    stableLink.setVisible(false);
  }
  add(stableLink);
  BookmarkablePageLink destructionLink=new BookmarkablePageLink(""String_Node_Str"",Destruction.class,params);
  if (!buildings.containsKey(BuildingType.DESTRUCTION)) {
    destructionLink.setVisible(false);
  }
  add(destructionLink);
  BookmarkablePageLink upgradeLink=new BookmarkablePageLink(""String_Node_Str"",Upgrades.class,params);
  if (!buildings.containsKey(BuildingType.UPGRADE)) {
    upgradeLink.setVisible(false);
  }
  add(upgradeLink);
  add(new BookmarkablePageLink(""String_Node_Str"",Troops.class,params));
}"
45114,"private Form<?> createForm(String form,final String button,final BuildingType type){
  Form<?> newForm=new Form<Object>(form);
  final Building building=buildings.get(type);
  AjaxButton newButton=new AjaxButton(button){
    @Override protected void onSubmit(    AjaxRequestTarget target,    Form<?> form){
      if (building != null) {
        Integer newLevel=building.getLevel() + 1;
        building.setLevel(newLevel);
        buildingsDao.beginTransaction();
        buildingsDao.update(building);
        buildingsDao.commitTransaction();
        info(""String_Node_Str"");
      }
 else {
        Building building=new Building();
        building.setLevel(1);
        building.setType(type);
        building.setUpgrading(false);
        building.setSquare(square);
        buildingsDao.beginTransaction();
        buildingsDao.insert(building);
        buildingsDao.commitTransaction();
        info(""String_Node_Str"");
      }
      target.addComponent(form);
    }
    @Override protected void onError(    AjaxRequestTarget target,    Form<?> form){
    }
  }
;
  if (building != null) {
    if (building.getLevel() > 9) {
      newButton.setModel(new Model<String>(""String_Node_Str""));
      newButton.setEnabled(false);
    }
 else {
      Integer newLevel=building.getLevel() + 1;
      newButton.setModel(new Model<String>(""String_Node_Str"" + newLevel));
    }
    if (building.getUpgrading()) {
      newButton.setEnabled(false);
    }
  }
 else {
    newButton.setModel(new Model<String>(""String_Node_Str""));
  }
  newForm.add(newButton);
  return newForm;
}","private Form<?> createForm(String form,final String button,final BuildingType type){
  Form<?> newForm=new Form<Object>(form);
  final Building building=buildings.get(type);
  AjaxButton newButton=new AjaxButton(button){
    @Override protected void onSubmit(    AjaxRequestTarget target,    Form<?> form){
      Building building=buildings.get(type);
      if (building != null) {
        Integer newLevel=building.getLevel() + 1;
        building.setLevel(newLevel);
        buildingsDao.beginTransaction();
        buildingsDao.update(building);
        buildingsDao.commitTransaction();
        updateBildingCounter(building,this);
        info(""String_Node_Str"");
      }
 else {
        building=new Building();
        building.setLevel(1);
        building.setType(type);
        building.setUpgrading(false);
        building.setSquare(square);
        buildingsDao.beginTransaction();
        buildingsDao.insert(building);
        buildingsDao.commitTransaction();
        updateBildingCounter(building,this);
      }
      target.add(buildWood);
      target.add(buildClay);
      target.add(buildStable);
      target.add(buildBarracks);
      target.add(buildUpgrades);
      target.add(buildDestruction);
      target.add(buildGrain);
      target.add(buildIron);
    }
    @Override protected void onError(    AjaxRequestTarget target,    Form<?> form){
    }
  }
;
  updateBildingCounter(building,newButton);
  newForm.add(newButton);
  return newForm;
}"
45115,"@Override protected void onSubmit(AjaxRequestTarget target,Form<?> form){
  if (building != null) {
    Integer newLevel=building.getLevel() + 1;
    building.setLevel(newLevel);
    buildingsDao.beginTransaction();
    buildingsDao.update(building);
    buildingsDao.commitTransaction();
    info(""String_Node_Str"");
  }
 else {
    Building building=new Building();
    building.setLevel(1);
    building.setType(type);
    building.setUpgrading(false);
    building.setSquare(square);
    buildingsDao.beginTransaction();
    buildingsDao.insert(building);
    buildingsDao.commitTransaction();
    info(""String_Node_Str"");
  }
  target.addComponent(form);
}","@Override protected void onSubmit(AjaxRequestTarget target,Form<?> form){
  Building building=buildings.get(type);
  if (building != null) {
    Integer newLevel=building.getLevel() + 1;
    building.setLevel(newLevel);
    buildingsDao.beginTransaction();
    buildingsDao.update(building);
    buildingsDao.commitTransaction();
    updateBildingCounter(building,this);
    info(""String_Node_Str"");
  }
 else {
    building=new Building();
    building.setLevel(1);
    building.setType(type);
    building.setUpgrading(false);
    building.setSquare(square);
    buildingsDao.beginTransaction();
    buildingsDao.insert(building);
    buildingsDao.commitTransaction();
    updateBildingCounter(building,this);
  }
  target.add(buildWood);
  target.add(buildClay);
  target.add(buildStable);
  target.add(buildBarracks);
  target.add(buildUpgrades);
  target.add(buildDestruction);
  target.add(buildGrain);
  target.add(buildIron);
}"
45116,"private void setupForm(){
  Form<?> buildWood=createForm(""String_Node_Str"",""String_Node_Str"",BuildingType.WOOD);
  Form<?> buildClay=createForm(""String_Node_Str"",""String_Node_Str"",BuildingType.CLAY);
  Form<?> buildStable=createForm(""String_Node_Str"",""String_Node_Str"",BuildingType.STABLE);
  Form<?> buildBarracks=createForm(""String_Node_Str"",""String_Node_Str"",BuildingType.BARRACKS);
  Form<?> buildUpgrades=createForm(""String_Node_Str"",""String_Node_Str"",BuildingType.UPGRADE);
  Form<?> buildDestruction=createForm(""String_Node_Str"",""String_Node_Str"",BuildingType.DESTRUCTION);
  Form<?> buildGrain=createForm(""String_Node_Str"",""String_Node_Str"",BuildingType.GRAIN);
  Form<?> buildIron=createForm(""String_Node_Str"",""String_Node_Str"",BuildingType.IRON);
  add(buildWood);
  add(buildClay);
  add(buildStable);
  add(buildBarracks);
  add(buildUpgrades);
  add(buildDestruction);
  add(buildGrain);
  add(buildIron);
}","private void setupForm(){
  buildWood=createForm(""String_Node_Str"",""String_Node_Str"",BuildingType.WOOD);
  buildClay=createForm(""String_Node_Str"",""String_Node_Str"",BuildingType.CLAY);
  buildStable=createForm(""String_Node_Str"",""String_Node_Str"",BuildingType.STABLE);
  buildBarracks=createForm(""String_Node_Str"",""String_Node_Str"",BuildingType.BARRACKS);
  buildUpgrades=createForm(""String_Node_Str"",""String_Node_Str"",BuildingType.UPGRADE);
  buildDestruction=createForm(""String_Node_Str"",""String_Node_Str"",BuildingType.DESTRUCTION);
  buildGrain=createForm(""String_Node_Str"",""String_Node_Str"",BuildingType.GRAIN);
  buildIron=createForm(""String_Node_Str"",""String_Node_Str"",BuildingType.IRON);
  add(buildWood);
  add(buildClay);
  add(buildStable);
  add(buildBarracks);
  add(buildUpgrades);
  add(buildDestruction);
  add(buildGrain);
  add(buildIron);
}"
45117,"public void loadBasePanel(long squareId){
  setContent(new BasePanel(this.getContentId(),squareId){
    @Override public void onCancel(    AjaxRequestTarget target){
    }
    @Override public void onSelect(    AjaxRequestTarget target,    String selection){
    }
  }
);
}","public void loadBasePanel(long squareId){
  setContent(new BasePanel(this.getContentId(),squareId){
    @Override public void onCancel(    AjaxRequestTarget target){
    }
    @Override public void onSelect(    AjaxRequestTarget target,    String selection){
    }
    @Override public void onSubmitButton(    AjaxRequestTarget target,    long squareId){
      setTitle(""String_Node_Str"");
    }
  }
);
}"
45118,"public BasePanel(String id,long squareId){
  super(id);
  baseutils=new BaseUtils();
  square=squareDAO.findById(squareId);
  setMapuser();
  fetchBuildings();
  feedbackPanel=new FeedbackPanel(""String_Node_Str"");
  add(feedbackPanel);
  PageParameters params=new PageParameters();
  params.add(""String_Node_Str"",squareId);
  setupLinks(params);
  setupForm();
  checkVisiblityOfLinks();
}","public BasePanel(String id,long squareId){
  super(id);
  baseutils=new BaseUtils();
  square=squareDao.findById(squareId);
  setMapuser();
  fetchBuildings();
  feedbackPanel=new FeedbackPanel(""String_Node_Str"");
  add(feedbackPanel);
  PageParameters params=new PageParameters();
  params.add(""String_Node_Str"",squareId);
  setupLinks(params);
  setupForm();
  checkVisiblityOfLinks();
}"
45119,"private Form<?> createForm(String form,final String button,final BuildingType type){
  Form<?> newForm=new Form<Object>(form);
  final Building building=buildings.get(type);
  AjaxButton newButton=new AjaxButton(button){
    @Override protected void onSubmit(    AjaxRequestTarget target,    Form<?> form){
      Building building=buildings.get(type);
      if (building != null) {
        Integer newLevel=building.getLevel() + 1;
        building.setLevel(newLevel);
        buildingsDao.beginTransaction();
        buildingsDao.update(building);
        buildingsDao.commitTransaction();
        updateBildingCounter(building,this);
        info(""String_Node_Str"");
      }
 else {
        building=new Building();
        building.setLevel(1);
        building.setType(type);
        building.setUpgrading(false);
        building.setSquare(square);
        square.getBuildings().add(building);
        mapUser.getSquares().add(square);
        buildingsDao.beginTransaction();
        buildingsDao.insert(building);
        squareDAO.insert(square);
        mapUserDao.insert(mapUser);
        buildingsDao.commitTransaction();
        updateBildingCounter(building,this);
        buildings.put(type,building);
        info(""String_Node_Str"");
      }
      target.add(buildWood);
      target.add(buildClay);
      target.add(buildStable);
      target.add(buildBarracks);
      target.add(buildUpgrades);
      target.add(buildDestruction);
      target.add(buildGrain);
      target.add(buildIron);
      checkVisiblityOfLinks();
      add(barracksLink);
      add(stableLink);
      add(destructionLink);
      add(upgradeLink);
      add(troopsLink);
      add(feedbackPanel);
    }
    @Override protected void onError(    AjaxRequestTarget target,    Form<?> form){
    }
  }
;
  updateBildingCounter(building,newButton);
  newForm.add(newButton);
  return newForm;
}","private Form<?> createForm(String form,final String button,final BuildingType type){
  Form<?> newForm=new Form<Object>(form);
  final Building building=buildings.get(type);
  AjaxButton newButton=new AjaxButton(button){
    @Override protected void onSubmit(    AjaxRequestTarget target,    Form<?> form){
      Building building=buildings.get(type);
      if (building != null) {
        Integer newLevel=building.getLevel() + 1;
        building.setLevel(newLevel);
        buildingsDao.beginTransaction();
        buildingsDao.update(building);
        buildingsDao.commitTransaction();
        updateBildingCounter(building,this);
        info(""String_Node_Str"");
      }
 else {
        building=new Building();
        building.setLevel(1);
        building.setType(type);
        building.setUpgrading(false);
        building.setSquare(square);
        square.getBuildings().add(building);
        mapUser.getSquares().add(square);
        buildingsDao.beginTransaction();
        buildingsDao.insert(building);
        squareDao.insert(square);
        mapUserDao.insert(mapUser);
        buildingsDao.commitTransaction();
        updateBildingCounter(building,this);
        buildings.put(type,building);
        info(""String_Node_Str"");
      }
      target.add(buildWood);
      target.add(buildClay);
      target.add(buildStable);
      target.add(buildBarracks);
      target.add(buildUpgrades);
      target.add(buildDestruction);
      target.add(buildGrain);
      target.add(buildIron);
      checkVisiblityOfLinks();
      add(barracksLink);
      add(stableLink);
      add(destructionLink);
      add(upgradeLink);
      add(troopsLink);
      add(feedbackPanel);
    }
    @Override protected void onError(    AjaxRequestTarget target,    Form<?> form){
    }
  }
;
  updateBildingCounter(building,newButton);
  newForm.add(newButton);
  return newForm;
}"
45120,"@Override protected void onSubmit(AjaxRequestTarget target,Form<?> form){
  Building building=buildings.get(type);
  if (building != null) {
    Integer newLevel=building.getLevel() + 1;
    building.setLevel(newLevel);
    buildingsDao.beginTransaction();
    buildingsDao.update(building);
    buildingsDao.commitTransaction();
    updateBildingCounter(building,this);
    info(""String_Node_Str"");
  }
 else {
    building=new Building();
    building.setLevel(1);
    building.setType(type);
    building.setUpgrading(false);
    building.setSquare(square);
    square.getBuildings().add(building);
    mapUser.getSquares().add(square);
    buildingsDao.beginTransaction();
    buildingsDao.insert(building);
    squareDAO.insert(square);
    mapUserDao.insert(mapUser);
    buildingsDao.commitTransaction();
    updateBildingCounter(building,this);
    buildings.put(type,building);
    info(""String_Node_Str"");
  }
  target.add(buildWood);
  target.add(buildClay);
  target.add(buildStable);
  target.add(buildBarracks);
  target.add(buildUpgrades);
  target.add(buildDestruction);
  target.add(buildGrain);
  target.add(buildIron);
  checkVisiblityOfLinks();
  add(barracksLink);
  add(stableLink);
  add(destructionLink);
  add(upgradeLink);
  add(troopsLink);
  add(feedbackPanel);
}","@Override protected void onSubmit(AjaxRequestTarget target,Form<?> form){
  Building building=buildings.get(type);
  if (building != null) {
    Integer newLevel=building.getLevel() + 1;
    building.setLevel(newLevel);
    buildingsDao.beginTransaction();
    buildingsDao.update(building);
    buildingsDao.commitTransaction();
    updateBildingCounter(building,this);
    info(""String_Node_Str"");
  }
 else {
    building=new Building();
    building.setLevel(1);
    building.setType(type);
    building.setUpgrading(false);
    building.setSquare(square);
    square.getBuildings().add(building);
    mapUser.getSquares().add(square);
    buildingsDao.beginTransaction();
    buildingsDao.insert(building);
    squareDao.insert(square);
    mapUserDao.insert(mapUser);
    buildingsDao.commitTransaction();
    updateBildingCounter(building,this);
    buildings.put(type,building);
    info(""String_Node_Str"");
  }
  target.add(buildWood);
  target.add(buildClay);
  target.add(buildStable);
  target.add(buildBarracks);
  target.add(buildUpgrades);
  target.add(buildDestruction);
  target.add(buildGrain);
  target.add(buildIron);
  checkVisiblityOfLinks();
  add(barracksLink);
  add(stableLink);
  add(destructionLink);
  add(upgradeLink);
  add(troopsLink);
  add(feedbackPanel);
}"
45121,"private void setMapuser(){
  String query=""String_Node_Str"";
  SwagWebSession session=(SwagWebSession)getSession();
  Map<String,String> values=new HashMap<String,String>();
  values.put(""String_Node_Str"",session.getUsername());
  values.put(""String_Node_Str"",session.getMapname());
  List<MapUser> buffer=mapUserDAO.findByQuery(query,values);
  if (!buffer.isEmpty()) {
    mapUser=buffer.get(0);
  }
 else {
    setResponsePage(MapPage.class);
  }
  if (!mapUser.getSquares().contains(square)) {
    setResponsePage(MapPage.class);
  }
}","private void setMapuser(){
  String query=""String_Node_Str"";
  SwagWebSession session=(SwagWebSession)getSession();
  Map<String,String> values=new HashMap<String,String>();
  values.put(""String_Node_Str"",session.getUsername());
  values.put(""String_Node_Str"",session.getMapname());
  List<MapUser> buffer=mapUserDao.findByQuery(query,values);
  if (!buffer.isEmpty()) {
    mapUser=buffer.get(0);
  }
 else {
    setResponsePage(MapPage.class);
  }
  if (!mapUser.getSquares().contains(square)) {
    setResponsePage(MapPage.class);
  }
}"
45122,"public void loadBasePanel(long squareId){
  setContent(new BasePanel(this.getContentId(),squareId){
    private static final long serialVersionUID=-1675999722693245461L;
    void onCancel(    AjaxRequestTarget target){
      setTitle(""String_Node_Str"");
      MapModalWindow.this.onCancel(target);
    }
    void onSelect(    AjaxRequestTarget target,    String selection){
      setTitle(""String_Node_Str"");
      MapModalWindow.this.onSelect(target,selection);
    }
  }
);
}","public void loadBasePanel(long squareId){
  setContent(new BasePanel(this.getContentId(),squareId){
    @Override public void onCancel(    AjaxRequestTarget target){
    }
    @Override public void onSelect(    AjaxRequestTarget target,    String selection){
    }
  }
);
}"
45123,"/** 
 * TODO optimizing 
 * @param squares
 * @return
 */
private Square findFreeSquareForHomeBase(List<Square> squares){
  for (  Square sq : squares) {
    if (!sq.getIsHomeBase()) {
      if (sq.getBaseBuildings() == null || sq.getBaseBuildings().isEmpty()) {
        if (sq.getResourceBuildings() == null || sq.getBaseBuildings().isEmpty()) {
          return sq;
        }
      }
    }
  }
  return null;
}","/** 
 * TODO optimizing
 * @param squares
 * @return
 */
private Square findFreeSquareForHomeBase(List<Square> squares){
  for (  Square sq : squares) {
    if (!sq.getIsHomeBase() && sq.getBaseBuildings().isEmpty() && sq.getResourceBuildings().isEmpty()) {
      return sq;
    }
  }
  return null;
}"
45124,"@Override protected void onSubmit(){
  try {
    mapname=(String)allmaps.getDefaultModel().getObject();
    Map playground=mapDao.findByName(mapname);
    String username=((SwagWebSession)getSession()).getUsername();
    User user=userDao.findByUsername(username);
    List<MapUser> mapUsers=playground.getUsers();
    mapUsers=new ArrayList<MapUser>();
    Square startsquare=findFreeSquareForHomeBase(playground.getSquares());
    if (startsquare != null) {
      List<Square> usersquares=new ArrayList<Square>();
      startsquare.setIsHomeBase(true);
      usersquares.add(startsquare);
      MapUser mapUser=new MapUser();
      mapUser.setMap(playground);
      mapUser.setUser(user);
      mapUser.setSquares(usersquares);
      mapUsers.add(mapUser);
      playground.setUsers(mapUsers);
      mapUserDao.beginTransaction();
      mapUserDao.insert(mapUser);
      mapUserDao.commitTransaction();
      mapDao.insert(playground);
      squareDao.insert(startsquare);
      mapUserDao.commitTransaction();
      info(""String_Node_Str"" + mapname);
    }
 else {
      info(""String_Node_Str"" + mapname);
    }
  }
 catch (  NoResultException e) {
    info(e.getMessage());
  }
}","@Override protected void onSubmit(){
  mapUserDao.beginTransaction();
  try {
    mapname=(String)allmaps.getDefaultModel().getObject();
    Map playground=mapDao.findByName(mapname);
    String username=((SwagWebSession)getSession()).getUsername();
    User user=userDao.findByUsername(username);
    Square startsquare=findFreeSquareForHomeBase(playground.getSquares());
    if (startsquare != null) {
      List<Square> usersquares=new ArrayList<Square>();
      startsquare.setIsHomeBase(true);
      usersquares.add(startsquare);
      MapUser mapUser=new MapUser();
      mapUser.setMap(playground);
      mapUser.setUser(user);
      mapUser.setSquares(usersquares);
      playground.getUsers().add(mapUser);
      mapUserDao.insert(mapUser);
      mapUserDao.commitTransaction();
      mapDao.insert(playground);
      squareDao.insert(startsquare);
      info(""String_Node_Str"" + mapname);
    }
 else {
      info(""String_Node_Str"" + mapname);
    }
  }
 catch (  NoResultException e) {
    info(e.getMessage());
  }
 finally {
    mapUserDao.commitTransaction();
  }
}"
45125,"@Override public final void onMessage(Message msg){
  try {
    Method handler=getClass().getMethod(""String_Node_Str"",msg.getClass());
    this.replyTo=msg.getJMSReplyTo();
    Object payload=getPayload(msg);
    handler.invoke(this,payload);
  }
 catch (  SecurityException e) {
    e.printStackTrace();
  }
catch (  NoSuchMethodException e) {
    e.printStackTrace();
  }
catch (  IllegalArgumentException e) {
    e.printStackTrace();
  }
catch (  IllegalAccessException e) {
    e.printStackTrace();
  }
catch (  InvocationTargetException e) {
    e.printStackTrace();
  }
catch (  JMSException e) {
    e.printStackTrace();
  }
}","@Override public final void onMessage(Message msg){
  try {
    Object payload=getPayload(msg);
    Method handler=getClass().getMethod(""String_Node_Str"",payload.getClass());
    this.replyTo=msg.getJMSReplyTo();
    handler.invoke(this,payload);
  }
 catch (  SecurityException e) {
    e.printStackTrace();
  }
catch (  NoSuchMethodException e) {
    e.printStackTrace();
  }
catch (  IllegalArgumentException e) {
    e.printStackTrace();
  }
catch (  IllegalAccessException e) {
    e.printStackTrace();
  }
catch (  InvocationTargetException e) {
    e.printStackTrace();
  }
catch (  JMSException e) {
    e.printStackTrace();
  }
}"
45126,"public InPage(PageParameters parameters){
  add(new InTopNavigation(""String_Node_Str""));
  add(new InNavigation(""String_Node_Str""));
  add(new InSideNavigation(""String_Node_Str""));
}","public InPage(PageParameters parameters){
  add(new InTopNavigation(""String_Node_Str""));
  add(new InNavigation(""String_Node_Str""));
  SwagWebSession session=(SwagWebSession)getSession();
  if (session.getRoles().hasRole(Roles.ADMIN)) {
    add(new InSideNavigation(""String_Node_Str""));
  }
 else {
    add(new Label(""String_Node_Str"",""String_Node_Str""));
  }
}"
45127,"private void setupNavigationLinks(){
  add(new AjaxFallbackLink<String>(""String_Node_Str""){
    private static final long serialVersionUID=2323006706369304418L;
    @Override public void onClick(    AjaxRequestTarget target){
      if (startY == 1 || startY < 0) {
        startY=1;
        endY=mapDim;
      }
 else {
        startY--;
        endY--;
      }
      target.addComponent(gameMapContainer);
    }
  }
);
  add(new AjaxFallbackLink<String>(""String_Node_Str""){
    private static final long serialVersionUID=2323006706369304418L;
    @Override public void onClick(    AjaxRequestTarget target){
      if (endY == gameMapProvider.getMapYSize() || endY < gameMapProvider.getMapYSize()) {
        startY=gameMapProvider.getMapYSize() - mapDim;
        endY=gameMapProvider.getMapYSize();
      }
 else {
        startY++;
        endY++;
      }
      target.addComponent(gameMapContainer);
    }
  }
);
  add(new AjaxFallbackLink<String>(""String_Node_Str""){
    private static final long serialVersionUID=2323006706369304418L;
    @Override public void onClick(    AjaxRequestTarget target){
      if (endX == gameMapProvider.getMapXSize() || endX > gameMapProvider.getMapXSize()) {
        startX=gameMapProvider.getMapXSize() - mapDim;
        endX=gameMapProvider.getMapXSize();
      }
 else {
        startX++;
        endX++;
      }
      target.addComponent(gameMapContainer);
    }
  }
);
  add(new AjaxFallbackLink<String>(""String_Node_Str""){
    private static final long serialVersionUID=2323006706369304418L;
    @Override public void onClick(    AjaxRequestTarget target){
      if (startX == 1 || startX < 0) {
        startX=1;
        endX=mapDim;
      }
 else {
        startX--;
        endX--;
      }
      target.addComponent(gameMapContainer);
    }
  }
);
}","private void setupNavigationLinks(){
  add(new AjaxFallbackLink<String>(""String_Node_Str""){
    private static final long serialVersionUID=2323006706369304418L;
    @Override public void onClick(    AjaxRequestTarget target){
      if (startY == 1 || startY < 0) {
        startY=1;
        endY=mapDim;
      }
 else {
        startY--;
        endY--;
      }
      target.addComponent(gameMapContainer);
    }
  }
);
  add(new AjaxFallbackLink<String>(""String_Node_Str""){
    private static final long serialVersionUID=2323006706369304418L;
    @Override public void onClick(    AjaxRequestTarget target){
      if (endY == gameMapProvider.getMapYSize() || endY > gameMapProvider.getMapYSize()) {
        startY=gameMapProvider.getMapYSize() - (mapDim - 1);
        endY=gameMapProvider.getMapYSize();
      }
 else {
        startY++;
        endY++;
      }
      target.addComponent(gameMapContainer);
    }
  }
);
  add(new AjaxFallbackLink<String>(""String_Node_Str""){
    private static final long serialVersionUID=2323006706369304418L;
    @Override public void onClick(    AjaxRequestTarget target){
      if (endX == gameMapProvider.getMapXSize() || endX > gameMapProvider.getMapXSize()) {
        startX=gameMapProvider.getMapXSize() - (mapDim - 1);
        endX=gameMapProvider.getMapXSize();
      }
 else {
        startX++;
        endX++;
      }
      target.addComponent(gameMapContainer);
    }
  }
);
  add(new AjaxFallbackLink<String>(""String_Node_Str""){
    private static final long serialVersionUID=2323006706369304418L;
    @Override public void onClick(    AjaxRequestTarget target){
      if (startX == 1 || startX < 0) {
        startX=1;
        endX=mapDim;
      }
 else {
        startX--;
        endX--;
      }
      target.addComponent(gameMapContainer);
    }
  }
);
}"
45128,"protected static <E extends AbstractDTO>String toString(Iterable<E> es){
  if (es == null)   return null;
  String out=""String_Node_Str"";
  Iterator<E> it=es.iterator();
  if (!it.hasNext())   return ""String_Node_Str"";
  out+=it.next();
  while (it.hasNext()) {
    out+=""String_Node_Str"" + it.next();
  }
  return out + ""String_Node_Str"";
}","protected static <E extends AbstractDTO>String toString(Iterable<E> es){
  if (es == null) {
    return null;
  }
  String out=""String_Node_Str"";
  Iterator<E> it=es.iterator();
  if (!it.hasNext()) {
    return ""String_Node_Str"";
  }
  out+=it.next();
  while (it.hasNext()) {
    out+=""String_Node_Str"" + it.next();
  }
  return out + ""String_Node_Str"";
}"
45129,"public static void main(String[] args) throws Exception {
  EntityManagerFactory factory=Persistence.createEntityManagerFactory(""String_Node_Str"");
  EntityManager em=factory.createEntityManager();
  EntityTransaction tx=em.getTransaction();
  UserDAO userDao=new UserDAO(em);
  MapDAO mapDao=new MapDAO(em);
  MessageDAO messageDao=new MessageDAO(em);
  SquareDAO squareDao=new SquareDAO(em);
  System.out.println(""String_Node_Str"");
  User nero=new User();
  nero.setName(""String_Node_Str"");
  nero.setFullname(""String_Node_Str"");
  nero.setAddress(""String_Node_Str"");
  nero.setEmail(""String_Node_Str"");
  nero.setPassword(""String_Node_Str"");
  User ariovist=new User();
  ariovist.setName(""String_Node_Str"");
  ariovist.setFullname(""String_Node_Str"");
  ariovist.setAddress(""String_Node_Str"");
  ariovist.setEmail(""String_Node_Str"");
  ariovist.setPassword(""String_Node_Str"");
  tx.begin();
  em.persist(nero);
  em.persist(ariovist);
  tx.commit();
  System.out.println(""String_Node_Str"");
  for (  User user : userDao.findAll()) {
    System.out.println(user);
  }
  System.out.println(""String_Node_Str"");
  for (  User user : userDao.findByEmail(""String_Node_Str"")) {
    System.out.println(user.getFullname() + ""String_Node_Str"" + user.getEmail());
  }
  System.out.println(""String_Node_Str"");
  Map map=new Map();
  map.setMaxNumUsers(100);
  map.setName(""String_Node_Str"");
  map.setXSize(10);
  map.setYSize(10);
  Integer xAxis=1;
  Integer yAxis=1;
  List<Square> squares=new ArrayList<Square>();
  for (int i=0; i < 100; i++) {
    if (xAxis > 10) {
      xAxis=1;
      yAxis++;
    }
    Square square=new Square();
    square.setCoordX(xAxis);
    square.setCoordY(yAxis);
    square.setMap(map);
    square.setIsHomeBase(false);
    squares.add(square);
    xAxis++;
  }
  map.setSquares(squares);
  tx.begin();
  em.persist(map);
  for (  Square sq : squares) {
    em.persist(sq);
  }
  tx.commit();
  System.out.println(""String_Node_Str"");
  Map playground=mapDao.findByName(""String_Node_Str"");
  List<MapUser> users=new ArrayList<MapUser>();
  List<Square> nerosquares=new ArrayList<Square>();
  Square neroStartsquare=squares.get(0);
  neroStartsquare.setIsHomeBase(true);
  nerosquares.add(neroStartsquare);
  MapUser neroMap=new MapUser();
  neroMap.setMap(playground);
  neroMap.setUser(nero);
  neroMap.setSquares(nerosquares);
  users.add(neroMap);
  List<Square> ariovistsquares=new ArrayList<Square>();
  Square ariovistStartsquare=squares.get(50);
  ariovistStartsquare.setIsHomeBase(true);
  ariovistsquares.add(ariovistStartsquare);
  MapUser ariovistMap=new MapUser();
  ariovistMap.setMap(playground);
  ariovistMap.setUser(ariovist);
  ariovistMap.setSquares(ariovistsquares);
  users.add(ariovistMap);
  playground.setUsers(users);
  tx.begin();
  em.persist(neroMap);
  em.persist(ariovistMap);
  em.merge(playground);
  em.merge(neroStartsquare);
  tx.commit();
  System.out.println(""String_Node_Str"");
  List<BaseBuilding> basebuilding=new ArrayList<BaseBuilding>();
  List<RessourceBuilding> ressourcebuilding=new ArrayList<RessourceBuilding>();
  BaseBuilding neroBarrack=new BaseBuilding();
  neroBarrack.setLevel(1);
  neroBarrack.setType(BaseBuildingType.BARRACKS);
  neroBarrack.setSquare(neroStartsquare);
  RessourceBuilding neroLumberjack=new RessourceBuilding();
  neroLumberjack.setLevel(1);
  neroLumberjack.setType(RessourceBuildingType.LUMBERJACK);
  neroLumberjack.setSquare(neroStartsquare);
  basebuilding.add(neroBarrack);
  ressourcebuilding.add(neroLumberjack);
  neroStartsquare.setBaseBuildings(basebuilding);
  neroStartsquare.setResourceBuildings(ressourcebuilding);
  tx.begin();
  em.persist(neroBarrack);
  em.persist(neroLumberjack);
  em.merge(neroStartsquare);
  tx.commit();
  System.out.println(""String_Node_Str"");
  for (  Square sq : squareDao.findByIsHomeBase(true)) {
    System.out.println(""String_Node_Str"" + sq.getCoordX() + sq.getCoordY());
    if (sq.getBaseBuildings() != null) {
      System.out.println(sq.getBaseBuildings().toString());
    }
    if (sq.getResourceBuildings() != null) {
    }
  }
  System.out.println(""String_Node_Str"");
  Set<User> recipients=new HashSet<User>();
  recipients.add(ariovist);
  Message message=new Message();
  message.setTimestamp(new Date());
  message.setSubject(""String_Node_Str"");
  message.setText(""String_Node_Str"");
  message.setFrom(nero);
  message.setTo(recipients);
  tx.begin();
  em.persist(message);
  tx.commit();
  System.out.println(""String_Node_Str"");
  for (  Message incoming : messageDao.findBySubject(""String_Node_Str"")) {
    System.out.println(""String_Node_Str"" + incoming.getTimestamp());
    System.out.println(""String_Node_Str"" + incoming.getSubject());
    System.out.println(""String_Node_Str"" + incoming.getText());
  }
  Helper.dropDatabase(em);
}","public static void main(String[] args) throws Exception {
  EntityManagerFactory factory=Persistence.createEntityManagerFactory(""String_Node_Str"");
  EntityManager em=factory.createEntityManager();
  EntityTransaction tx=em.getTransaction();
  UserDAO userDao=new UserDAO(em);
  MapDAO mapDao=new MapDAO(em);
  MessageDAO messageDao=new MessageDAO(em);
  SquareDAO squareDao=new SquareDAO(em);
  System.out.println(""String_Node_Str"");
  User nero=new User();
  nero.setName(""String_Node_Str"");
  nero.setFullname(""String_Node_Str"");
  nero.setAddress(""String_Node_Str"");
  nero.setEmail(""String_Node_Str"");
  nero.setPassword(""String_Node_Str"");
  User ariovist=new User();
  ariovist.setName(""String_Node_Str"");
  ariovist.setFullname(""String_Node_Str"");
  ariovist.setAddress(""String_Node_Str"");
  ariovist.setEmail(""String_Node_Str"");
  ariovist.setPassword(""String_Node_Str"");
  tx.begin();
  em.persist(nero);
  em.persist(ariovist);
  tx.commit();
  System.out.println(""String_Node_Str"");
  for (  User user : userDao.findAll()) {
    System.out.println(user);
  }
  System.out.println(""String_Node_Str"");
  for (  User user : userDao.findByEmail(""String_Node_Str"")) {
    System.out.println(user.getFullname() + ""String_Node_Str"" + user.getEmail());
  }
  System.out.println(""String_Node_Str"");
  Map map=new Map();
  map.setMaxNumUsers(100);
  map.setName(""String_Node_Str"");
  map.setXSize(10);
  map.setYSize(10);
  Integer xAxis=1;
  Integer yAxis=1;
  List<Square> squares=new ArrayList<Square>();
  for (int i=0; i < 100; i++) {
    if (xAxis > 10) {
      xAxis=1;
      yAxis++;
    }
    Square square=new Square();
    square.setCoordX(xAxis);
    square.setCoordY(yAxis);
    square.setMap(map);
    square.setIsHomeBase(false);
    squares.add(square);
    xAxis++;
  }
  map.setSquares(squares);
  tx.begin();
  em.persist(map);
  for (  Square sq : squares) {
    em.persist(sq);
  }
  tx.commit();
  System.out.println(""String_Node_Str"");
  Map playground=mapDao.findByName(""String_Node_Str"");
  List<MapUser> users=new ArrayList<MapUser>();
  List<StoredRessource> neroresources=new ArrayList<StoredRessource>();
  List<Square> nerosquares=new ArrayList<Square>();
  Square neroStartsquare=squares.get(0);
  neroStartsquare.setIsHomeBase(true);
  nerosquares.add(neroStartsquare);
  MapUser neroMap=new MapUser(playground,nero,neroresources,nerosquares);
  users.add(neroMap);
  List<StoredRessource> ariovistresources=new ArrayList<StoredRessource>();
  List<Square> ariovistsquares=new ArrayList<Square>();
  Square ariovistStartsquare=squares.get(50);
  ariovistStartsquare.setIsHomeBase(true);
  ariovistsquares.add(ariovistStartsquare);
  MapUser ariovistMap=new MapUser(playground,ariovist,ariovistresources,ariovistsquares);
  users.add(ariovistMap);
  playground.setUsers(users);
  tx.begin();
  em.persist(neroMap);
  em.persist(ariovistMap);
  em.merge(playground);
  em.merge(neroStartsquare);
  tx.commit();
  System.out.println(""String_Node_Str"");
  List<BaseBuilding> basebuilding=new ArrayList<BaseBuilding>();
  List<RessourceBuilding> ressourcebuilding=new ArrayList<RessourceBuilding>();
  BaseBuilding neroBarrack=new BaseBuilding(1,BaseBuildingType.BARRACKS,neroStartsquare);
  RessourceBuilding neroLumberjack=new RessourceBuilding(1,RessourceBuildingType.LUMBERJACK,neroStartsquare);
  basebuilding.add(neroBarrack);
  ressourcebuilding.add(neroLumberjack);
  neroStartsquare.setBaseBuildings(basebuilding);
  neroStartsquare.setResourceBuildings(ressourcebuilding);
  tx.begin();
  em.persist(neroBarrack);
  em.persist(neroLumberjack);
  em.merge(neroStartsquare);
  tx.commit();
  System.out.println(""String_Node_Str"");
  for (  Square sq : squareDao.findByIsHomeBase(true)) {
    System.out.println(""String_Node_Str"" + sq.getCoordX() + sq.getCoordY());
    if (sq.getBaseBuildings() != null) {
      System.out.println(sq.getBaseBuildings().toString());
    }
    if (sq.getResourceBuildings() != null) {
    }
  }
  System.out.println(""String_Node_Str"");
  Set<User> recipients=new HashSet<User>();
  recipients.add(ariovist);
  Message message=new Message(new Date(),""String_Node_Str"",""String_Node_Str"",nero,recipients);
  tx.begin();
  em.persist(message);
  tx.commit();
  System.out.println(""String_Node_Str"");
  for (  Message incoming : messageDao.findBySubject(""String_Node_Str"")) {
    System.out.println(""String_Node_Str"" + incoming.getTimestamp());
    System.out.println(""String_Node_Str"" + incoming.getSubject());
    System.out.println(""String_Node_Str"" + incoming.getText());
  }
  Helper.dropDatabase(em);
}"
45130,"public void actionPerformed(ActionEvent ev_ref){
  if (ev_ref.getActionCommand().equals(""String_Node_Str"")) {
    String[][][] newMatrix_ref=new String[2][][];
    newMatrix_ref[0]=(setGui_ref.getGUI().getSettings())[0];
    String[] tempData_ref=new String[(setGui_ref.getGUI().getSettings())[1][0].length];
    tempData_ref[0]=""String_Node_Str"" + ((setGui_ref.getGUI().getSettings())[1].length + 1);
    for (int i=1; i < tempData_ref.length; i++) {
      tempData_ref[i]=""String_Node_Str"";
    }
    newMatrix_ref[1]=new String[(setGui_ref.getGUI().getSettings())[1].length + 1][];
    for (int i=0; i < (setGui_ref.getGUI().getSettings())[1].length; i++) {
      newMatrix_ref[1][i]=(setGui_ref.getGUI().getSettings())[1][i];
    }
    newMatrix_ref[1][newMatrix_ref[1].length - 1]=tempData_ref;
    setGui_ref.getGUI().initializeSettings(newMatrix_ref);
    updateCommandBox();
    cComBox_ref.setSelectedIndex(cComBox_ref.getItemCount() - 1);
  }
 else   if (ev_ref.getActionCommand().equals(""String_Node_Str"")) {
    if ((setGui_ref.getGUI().getSettings())[1].length > 1) {
      String[][][] newMatrix_ref=new String[2][][];
      newMatrix_ref[0]=(setGui_ref.getGUI().getSettings())[0];
      int toDelete=cComBox_ref.getSelectedIndex();
      String[][] ccommandsOld_ref=(setGui_ref.getGUI().getSettings())[1];
      ccommandsOld_ref[toDelete]=null;
      newMatrix_ref[1]=new String[(setGui_ref.getGUI().getSettings())[1].length - 1][];
      int count=0;
      for (int i=0; i < ccommandsOld_ref.length; i++) {
        if (ccommandsOld_ref[i] != null) {
          newMatrix_ref[1][count]=ccommandsOld_ref[i];
          count++;
        }
      }
      setGui_ref.getGUI().initializeSettings(newMatrix_ref);
      updateCommandBox();
      int newIndex=0;
      if (toDelete != 0) {
        newIndex=toDelete - 1;
      }
      cComBox_ref.setSelectedIndex(newIndex);
    }
 else {
      setGui_ref.displayError(""String_Node_Str"");
    }
  }
 else   if (ev_ref.getActionCommand().equals(""String_Node_Str"")) {
    if (custNameTextF_ref.getText().length() > 15) {
      setGui_ref.displayError(""String_Node_Str"");
    }
 else {
      int selectedIndex=cComBox_ref.getSelectedIndex();
      for (int i=1; i < (setGui_ref.getGUI().getSettings())[1][selectedIndex].length; i++) {
        (setGui_ref.getGUI().getSettings())[1][selectedIndex][i]=(String)custTableMod_ref.getValueAt((i - 1),1);
      }
      (setGui_ref.getGUI().getSettings())[1][selectedIndex][0]=custNameTextF_ref.getText();
      updateCommandBox();
      cComBox_ref.setSelectedIndex(selectedIndex);
      setGui_ref.getGUI().initializeSettings(setGui_ref.getGUI().getSettings());
    }
  }
 else   if (ev_ref.getActionCommand().equals(""String_Node_Str"")) {
    String[] osValues_ref=setGui_ref.getGUI().getOSValues();
    String[][] commandMatrix_ref=new String[osValues_ref.length][2];
    for (int i=0; i < commandMatrix_ref.length; i++) {
      commandMatrix_ref[i][0]=osValues_ref[i];
      commandMatrix_ref[i][1]=""String_Node_Str"";
    }
    custNameTextF_ref.setText(""String_Node_Str"" + (cComBox_ref.getSelectedIndex() + 1));
    custTableMod_ref.setDataVector(commandMatrix_ref,new String[]{""String_Node_Str"",""String_Node_Str""});
    custTable_ref.getColumnModel().getColumn(0).setPreferredWidth(60);
    custTable_ref.getColumnModel().getColumn(1).setPreferredWidth(540);
    custTableMod_ref.fireTableDataChanged();
  }
}","public void actionPerformed(ActionEvent ev_ref){
  if (ev_ref.getActionCommand().equals(""String_Node_Str"")) {
    String[][][] newMatrix_ref=new String[2][][];
    newMatrix_ref[0]=(setGui_ref.getGUI().getSettings())[0];
    String[] tempData_ref=new String[(setGui_ref.getGUI().getSettings())[1][0].length];
    tempData_ref[0]=""String_Node_Str"" + ((setGui_ref.getGUI().getSettings())[1].length + 1);
    for (int i=1; i < tempData_ref.length; i++) {
      tempData_ref[i]=""String_Node_Str"";
    }
    newMatrix_ref[1]=new String[(setGui_ref.getGUI().getSettings())[1].length + 1][];
    for (int i=0; i < (setGui_ref.getGUI().getSettings())[1].length; i++) {
      newMatrix_ref[1][i]=(setGui_ref.getGUI().getSettings())[1][i];
    }
    newMatrix_ref[1][newMatrix_ref[1].length - 1]=tempData_ref;
    setGui_ref.getGUI().initializeSettings(newMatrix_ref);
    updateCommandBox();
    cComBox_ref.setSelectedIndex(cComBox_ref.getItemCount() - 1);
  }
 else   if (ev_ref.getActionCommand().equals(""String_Node_Str"")) {
    if ((setGui_ref.getGUI().getSettings())[1].length > 1) {
      String[][][] newMatrix_ref=new String[2][][];
      newMatrix_ref[0]=(setGui_ref.getGUI().getSettings())[0];
      int toDelete=cComBox_ref.getSelectedIndex();
      String[][] ccommandsOld_ref=(setGui_ref.getGUI().getSettings())[1];
      ccommandsOld_ref[toDelete]=null;
      newMatrix_ref[1]=new String[(setGui_ref.getGUI().getSettings())[1].length - 1][];
      int count=0;
      for (int i=0; i < ccommandsOld_ref.length; i++) {
        if (ccommandsOld_ref[i] != null) {
          newMatrix_ref[1][count]=ccommandsOld_ref[i];
          count++;
        }
      }
      setGui_ref.getGUI().initializeSettings(newMatrix_ref);
      updateCommandBox();
      int newIndex=0;
      if (toDelete != 0) {
        newIndex=toDelete - 1;
      }
      cComBox_ref.setSelectedIndex(newIndex);
    }
 else {
      setGui_ref.displayError(""String_Node_Str"");
    }
  }
 else   if (ev_ref.getActionCommand().equals(""String_Node_Str"")) {
    if (custNameTextF_ref.getText().length() > 15) {
      setGui_ref.displayError(""String_Node_Str"");
    }
 else {
      custTable_ref.getCellEditor().stopCellEditing();
      int selectedIndex=cComBox_ref.getSelectedIndex();
      for (int i=1; i < (setGui_ref.getGUI().getSettings())[1][selectedIndex].length; i++) {
        (setGui_ref.getGUI().getSettings())[1][selectedIndex][i]=(String)custTableMod_ref.getValueAt((i - 1),1);
      }
      (setGui_ref.getGUI().getSettings())[1][selectedIndex][0]=custNameTextF_ref.getText();
      updateCommandBox();
      cComBox_ref.setSelectedIndex(selectedIndex);
      setGui_ref.getGUI().initializeSettings(setGui_ref.getGUI().getSettings());
    }
  }
 else   if (ev_ref.getActionCommand().equals(""String_Node_Str"")) {
    String[] osValues_ref=setGui_ref.getGUI().getOSValues();
    String[][] commandMatrix_ref=new String[osValues_ref.length][2];
    for (int i=0; i < commandMatrix_ref.length; i++) {
      commandMatrix_ref[i][0]=osValues_ref[i];
      commandMatrix_ref[i][1]=""String_Node_Str"";
    }
    custNameTextF_ref.setText(""String_Node_Str"" + (cComBox_ref.getSelectedIndex() + 1));
    custTableMod_ref.setDataVector(commandMatrix_ref,new String[]{""String_Node_Str"",""String_Node_Str""});
    custTable_ref.getColumnModel().getColumn(0).setPreferredWidth(60);
    custTable_ref.getColumnModel().getColumn(1).setPreferredWidth(540);
    custTableMod_ref.fireTableDataChanged();
  }
}"
45131,"/** 
 * Setzt die uebergebene Referenz <i>setGui_ref</i> auf die gleichnamige Objektvariable,  initialisiert das <i>DefaultTableModel</i> der Host-Einstellungs-Tabelle und ruft zum Schluss die <i>drawTab()</i>-Methode des Objekts auf, welche das eigentliche Zeichnen  des JPanels ubernimmt.
 * @see #drawTab()
 */
SettingsTabHosts(TinyAdminSettingsGUI setGui_ref){
  this.setGui_ref=setGui_ref;
  hostTableMod_ref=new DefaultTableModel(null,HOST_TABLENAMES);
  drawTab();
}","/** 
 * Setzt die uebergebene Referenz <i>setGui_ref</i> auf die gleichnamige Objektvariable,  initialisiert das <i>DefaultTableModel</i> der Host-Einstellungs-Tabelle und ruft zum Schluss die <i>drawTab()</i>-Methode des Objekts auf, welche das eigentliche Zeichnen  des JPanels ubernimmt.
 * @see #drawTab()
 */
SettingsTabHosts(TinyAdminSettingsGUI setGui_ref){
  this.setGui_ref=setGui_ref;
  hostTableMod_ref=new CustomTableModel(null,HOST_TABLENAMES);
  drawTab();
}"
45132,"/** 
 * Liefert eine Referenz auf das gehaltene DefaultTableModel <i>hostTableMod_ref</i> zurueck. Dieses beinhaltet die in der Tabelle gehaltenen Einstellungen fuer alle Hosts.
 * @return Referenz auf das DefaultTableModel der Tabelle mit Host-Einstellungen.
 */
DefaultTableModel getHostTabMod(){
  return hostTableMod_ref;
}","/** 
 * Liefert eine Referenz auf das gehaltene CustomTableModel <i>hostTableMod_ref</i> zurueck. Dieses beinhaltet die in der Tabelle gehaltenen Einstellungen fuer alle Hosts.
 * @return Referenz auf das DefaultTableModel der Tabelle mit Host-Einstellungen.
 * @see CustomTableModel
 */
DefaultTableModel getHostTabMod(){
  return hostTableMod_ref;
}"
45133,"/** 
 * <p>Diese Methode baut das JPanel (also das Objekt selbst, da es von JPanel erbt) zusammen. Dieses fasst die Tabelle mit Host-Einstellungen und diverse GUI-Elemente.</p> <p>Die Tabelle wird mit den Werten aus der im Haupt-GUI gehaltenen Matrix gefuettert. Es werden jedoch nicht alle Felder der Matrix genutzt, da beispielsweise das Anzeigen von Passwoertern keinen Sinn macht, da diese maskiert dargestellt werden. Fuer das Generieren der Tabelledaten ist die Methode <i>generateTableData()</i> zustaendig.</p> <p>Es existiert nur ein einziger Listener, der <i>SettingsButtonListener</i>, welcher allen  Knoepfen hinzugefuegt wird.</p>
 * @see #generateTableData()
 */
private void drawTab(){
  this.setLayout(new BoxLayout(this,BoxLayout.Y_AXIS));
  this.setBorder(BorderFactory.createEmptyBorder(5,5,5,5));
  Box custInfoBoxWrapper_ref=new Box(BoxLayout.X_AXIS);
  Box custInfoBox_ref=new Box(BoxLayout.Y_AXIS);
  custInfoBox_ref.setBorder(new TitledBorder(""String_Node_Str""));
  custInfoBox_ref.add(Box.createVerticalStrut(5));
  custInfoBox_ref.add(new JLabel(""String_Node_Str""));
  custInfoBox_ref.add(new JLabel(""String_Node_Str""));
  custInfoBoxWrapper_ref.add(custInfoBox_ref);
  custInfoBoxWrapper_ref.add(Box.createHorizontalStrut(10));
  ImageIcon hostIcon_ref=new ImageIcon(ClassLoader.getSystemResource(""String_Node_Str""));
  custInfoBoxWrapper_ref.add(new JLabel(hostIcon_ref));
  custInfoBoxWrapper_ref.add(Box.createHorizontalStrut(10));
  this.add(custInfoBoxWrapper_ref);
  hostTable_ref=new JTable();
  hostTable_ref.setPreferredScrollableViewportSize(new Dimension(800,250));
  hostTableMod_ref=new DefaultTableModel(generateTableData(),HOST_TABLENAMES);
  hostTable_ref.setModel(hostTableMod_ref);
  hostTable_ref.setDefaultRenderer(Object.class,new DefaultTableCellRenderer());
  JScrollPane tableScroller_ref=new JScrollPane(hostTable_ref);
  hostTable_ref.getColumnModel().getColumn(0).setPreferredWidth(60);
  hostTable_ref.getColumnModel().getColumn(1).setPreferredWidth(70);
  hostTable_ref.getColumnModel().getColumn(2).setPreferredWidth(10);
  hostTable_ref.getColumnModel().getColumn(3).setPreferredWidth(35);
  hostTable_ref.getColumnModel().getColumn(4).setPreferredWidth(5);
  hostTable_ref.getColumnModel().getColumn(6).setPreferredWidth(20);
  ((DefaultTableCellRenderer)hostTable_ref.getDefaultRenderer(hostTable_ref.getColumnClass(0))).setHorizontalAlignment(SwingConstants.CENTER);
  tableScroller_ref.setBorder(new TitledBorder(""String_Node_Str""));
  tableScroller_ref.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
  tableScroller_ref.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
  this.add(tableScroller_ref);
  Box setADBox_ref=new Box(BoxLayout.X_AXIS);
  ImageIcon deleteIcon_ref=new ImageIcon(ClassLoader.getSystemResource(""String_Node_Str""));
  ImageIcon addIcon_ref=new ImageIcon(ClassLoader.getSystemResource(""String_Node_Str""));
  ImageIcon setResetIcon_ref=new ImageIcon(ClassLoader.getSystemResource(""String_Node_Str""));
  ImageIcon setEditIcon_ref=new ImageIcon(ClassLoader.getSystemResource(""String_Node_Str""));
  JButton addButton_ref=new JButton(""String_Node_Str"",addIcon_ref);
  addButton_ref.setToolTipText(""String_Node_Str"");
  addButton_ref.addActionListener(new SettingsHostButtonListener());
  JButton editButton_ref=new JButton(""String_Node_Str"",setEditIcon_ref);
  editButton_ref.setToolTipText(""String_Node_Str"");
  editButton_ref.addActionListener(new SettingsHostButtonListener());
  JButton delButton_ref=new JButton(""String_Node_Str"",deleteIcon_ref);
  delButton_ref.setToolTipText(""String_Node_Str"");
  delButton_ref.addActionListener(new SettingsHostButtonListener());
  JButton setResetBut_ref=new JButton(""String_Node_Str"",setResetIcon_ref);
  setResetBut_ref.setToolTipText(""String_Node_Str"");
  setResetBut_ref.addActionListener(new SettingsHostButtonListener());
  setADBox_ref.add(addButton_ref);
  setADBox_ref.add(Box.createHorizontalStrut(5));
  setADBox_ref.add(editButton_ref);
  setADBox_ref.add(Box.createHorizontalStrut(5));
  setADBox_ref.add(delButton_ref);
  setADBox_ref.add(Box.createHorizontalStrut(5));
  setADBox_ref.add(setResetBut_ref);
  this.add(setADBox_ref);
  this.add(Box.createVerticalStrut(5));
}","/** 
 * <p>Diese Methode baut das JPanel (also das Objekt selbst, da es von JPanel erbt) zusammen. Dieses fasst die Tabelle mit Host-Einstellungen und diverse GUI-Elemente.</p> <p>Die Tabelle wird mit den Werten aus der im Haupt-GUI gehaltenen Matrix gefuettert. Es werden jedoch nicht alle Felder der Matrix genutzt, da beispielsweise das Anzeigen von Passwoertern keinen Sinn macht, da diese maskiert dargestellt werden. Fuer das Generieren der Tabelledaten ist die Methode <i>generateTableData()</i> zustaendig.</p> <p>Es existiert nur ein einziger Listener, der <i>SettingsButtonListener</i>, welcher allen  Knoepfen hinzugefuegt wird. Die Tabelle erhaelt zudem ein CustomTableModel, um sie vor Zugriffen zu schuetzen.</p>
 * @see #generateTableData()
 */
private void drawTab(){
  this.setLayout(new BoxLayout(this,BoxLayout.Y_AXIS));
  this.setBorder(BorderFactory.createEmptyBorder(5,5,5,5));
  Box custInfoBoxWrapper_ref=new Box(BoxLayout.X_AXIS);
  Box custInfoBox_ref=new Box(BoxLayout.Y_AXIS);
  custInfoBox_ref.setBorder(new TitledBorder(""String_Node_Str""));
  custInfoBox_ref.add(Box.createVerticalStrut(5));
  custInfoBox_ref.add(new JLabel(""String_Node_Str""));
  custInfoBox_ref.add(new JLabel(""String_Node_Str""));
  custInfoBoxWrapper_ref.add(custInfoBox_ref);
  custInfoBoxWrapper_ref.add(Box.createHorizontalStrut(10));
  ImageIcon hostIcon_ref=new ImageIcon(ClassLoader.getSystemResource(""String_Node_Str""));
  custInfoBoxWrapper_ref.add(new JLabel(hostIcon_ref));
  custInfoBoxWrapper_ref.add(Box.createHorizontalStrut(10));
  this.add(custInfoBoxWrapper_ref);
  hostTable_ref=new JTable();
  hostTable_ref.setPreferredScrollableViewportSize(new Dimension(800,250));
  hostTableMod_ref=new CustomTableModel(generateTableData(),HOST_TABLENAMES);
  hostTable_ref.setModel(hostTableMod_ref);
  hostTable_ref.setDefaultRenderer(Object.class,new DefaultTableCellRenderer());
  JScrollPane tableScroller_ref=new JScrollPane(hostTable_ref);
  hostTable_ref.getColumnModel().getColumn(0).setPreferredWidth(60);
  hostTable_ref.getColumnModel().getColumn(1).setPreferredWidth(70);
  hostTable_ref.getColumnModel().getColumn(2).setPreferredWidth(10);
  hostTable_ref.getColumnModel().getColumn(3).setPreferredWidth(35);
  hostTable_ref.getColumnModel().getColumn(4).setPreferredWidth(5);
  hostTable_ref.getColumnModel().getColumn(6).setPreferredWidth(20);
  ((DefaultTableCellRenderer)hostTable_ref.getDefaultRenderer(hostTable_ref.getColumnClass(0))).setHorizontalAlignment(SwingConstants.CENTER);
  tableScroller_ref.setBorder(new TitledBorder(""String_Node_Str""));
  tableScroller_ref.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
  tableScroller_ref.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
  this.add(tableScroller_ref);
  Box setADBox_ref=new Box(BoxLayout.X_AXIS);
  ImageIcon deleteIcon_ref=new ImageIcon(ClassLoader.getSystemResource(""String_Node_Str""));
  ImageIcon addIcon_ref=new ImageIcon(ClassLoader.getSystemResource(""String_Node_Str""));
  ImageIcon setResetIcon_ref=new ImageIcon(ClassLoader.getSystemResource(""String_Node_Str""));
  ImageIcon setEditIcon_ref=new ImageIcon(ClassLoader.getSystemResource(""String_Node_Str""));
  JButton addButton_ref=new JButton(""String_Node_Str"",addIcon_ref);
  addButton_ref.setToolTipText(""String_Node_Str"");
  addButton_ref.addActionListener(new SettingsHostButtonListener());
  JButton editButton_ref=new JButton(""String_Node_Str"",setEditIcon_ref);
  editButton_ref.setToolTipText(""String_Node_Str"");
  editButton_ref.addActionListener(new SettingsHostButtonListener());
  JButton delButton_ref=new JButton(""String_Node_Str"",deleteIcon_ref);
  delButton_ref.setToolTipText(""String_Node_Str"");
  delButton_ref.addActionListener(new SettingsHostButtonListener());
  JButton setResetBut_ref=new JButton(""String_Node_Str"",setResetIcon_ref);
  setResetBut_ref.setToolTipText(""String_Node_Str"");
  setResetBut_ref.addActionListener(new SettingsHostButtonListener());
  setADBox_ref.add(addButton_ref);
  setADBox_ref.add(Box.createHorizontalStrut(5));
  setADBox_ref.add(editButton_ref);
  setADBox_ref.add(Box.createHorizontalStrut(5));
  setADBox_ref.add(delButton_ref);
  setADBox_ref.add(Box.createHorizontalStrut(5));
  setADBox_ref.add(setResetBut_ref);
  this.add(setADBox_ref);
  this.add(Box.createVerticalStrut(5));
}"
45134,"public static void main(String[] args){
  Scanner scanner=new Scanner(""String_Node_Str"" + ""String_Node_Str"");
  try {
    scanner.scan();
    System.out.println(scanner.code);
    System.out.println(""String_Node_Str"");
    for (int i=0; i < scanner.tokens.size(); i++) {
      System.out.println(""String_Node_Str"" + scanner.tokens.get(i).getType().toString() + ""String_Node_Str""+ ((String)scanner.tokens.get(i).getValue())+ ""String_Node_Str"");
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","public static void main(String[] args){
  Scanner scanner=new Scanner(""String_Node_Str"" + ""String_Node_Str"");
  try {
    scanner.scan();
    System.out.println(scanner.code);
    System.out.println(""String_Node_Str"");
    for (int i=0; i < scanner.tokens.size(); i++) {
      System.out.println(""String_Node_Str"" + scanner.tokens.get(i).getType().toString() + ""String_Node_Str""+ ((String)scanner.tokens.get(i).getValue())+ ""String_Node_Str"");
    }
  }
 catch (  SyntaxException e) {
    System.out.println(e);
  }
}"
45135,"private void parseString() throws SyntaxException {
  if (this.code.charAt(this.pointer) != '""') {
    return;
  }
  this.pointer++;
  String str=""String_Node_Str"";
  int startPos=this.pointer;
  while (((this.code.charAt(this.pointer) != '""')) && (this.pointer < this.code.length())) {
    str+=this.code.charAt(this.pointer);
    this.pointer++;
  }
  if (this.pointer == this.code.length()) {
    throw new SyntaxException(startPos,""String_Node_Str"");
  }
  this.tokens.add(new Token(TokenType.String,str));
}","private void parseString() throws SyntaxException {
  if (this.code.charAt(this.pointer) != '""') {
    return;
  }
  this.pointer++;
  String str=""String_Node_Str"";
  int startPos=this.pointer;
  while ((this.pointer < this.code.length()) && ((this.code.charAt(this.pointer) != '""'))) {
    str+=this.code.charAt(this.pointer);
    this.pointer++;
  }
  if (this.pointer == this.code.length()) {
    throw new SyntaxException(startPos,""String_Node_Str"");
  }
  this.tokens.add(new Token(TokenType.String,str));
}"
45136,"/** 
 * Scans string for tokens Scans for numbers (1.5, 1, 0, 0.5, .5, etc.), strings (""Hello!""),  code literals ({ somecode() }), array/list start and end ([ and ]) removes comments
 * @return ArrayList List of tokens
 * @throws Exception
 */
public void scan() throws Exception {
  char c;
  for (this.pointer=0; this.pointer < this.code.length() - 1; this.pointer++) {
    this.skipSpaces();
    c=this.code.charAt(this.pointer);
    if ((c >= '0') && (c <= '9')) {
      this.parseNumber();
    }
 else     if (c == '""') {
      this.parseString();
    }
 else     if (c == '{') {
      this.parseCode();
    }
 else     if (c == '[') {
      this.tokens.add(new Token(TokenType.OpenSquareBracket));
    }
 else     if (c == ']') {
      this.tokens.add(new Token(TokenType.CloseSquareBracket));
    }
    if ((c == '/') && this.code.charAt(this.pointer + 1) == '*') {
      this.skipComment();
    }
 else {
      this.parseLiteral();
    }
  }
}","/** 
 * Scans string for tokens Scans for numbers (1.5, 1, 0, 0.5, .5, etc.), strings (""Hello!""),  code literals ({ somecode() }), array/list start and end ([ and ]) removes comments
 * @return ArrayList List of tokens
 * @throws SyntaxException
 */
public void scan() throws SyntaxException {
  char c;
  for (this.pointer=0; this.pointer < this.code.length() - 1; this.pointer++) {
    this.skipSpaces();
    c=this.code.charAt(this.pointer);
    if ((c >= '0') && (c <= '9')) {
      this.parseNumber();
    }
 else     if (c == '""') {
      this.parseString();
    }
 else     if (c == '{') {
      this.parseCode();
    }
 else     if (c == '[') {
      this.tokens.add(new Token(TokenType.OpenSquareBracket));
    }
 else     if (c == ']') {
      this.tokens.add(new Token(TokenType.CloseSquareBracket));
    }
    if ((c == '/') && this.code.charAt(this.pointer + 1) == '*') {
      this.skipComment();
    }
 else {
      this.parseLiteral();
    }
  }
}"
45137,"@Override public Plan getPlan(String... args) throws IllegalArgumentException {
  int noSubTasks=(args.length > 0 ? Integer.parseInt(args[0]) : -1);
  String dataInput=(args.length > 1 ? args[1] : ""String_Node_Str"");
  String dataOutput=(args.length > 2 ? args[2] : ""String_Node_Str"");
  DataSourceContract<PactString,FeatureList> source=new DataSourceContract<PactString,FeatureList>(NaiveBayesInputFormat.class,dataInput,""String_Node_Str"");
  source.setDegreeOfParallelism(noSubTasks);
  MapContract<PactString,FeatureList,PactString,NormalizedTokenCountList> featureBaseMapper=new MapContract<PactString,FeatureList,PactString,NormalizedTokenCountList>(BayesFeatureMapper.Base.class);
  featureBaseMapper.setDegreeOfParallelism(noSubTasks);
  featureBaseMapper.setInput(source);
  MapContract<PactString,NormalizedTokenCountList,PactString,PactDouble> featureCountMapper=new MapContract<PactString,NormalizedTokenCountList,PactString,PactDouble>(BayesFeatureMapper.FeatureCount.class);
  featureCountMapper.setDegreeOfParallelism(noSubTasks);
  featureCountMapper.setInput(featureBaseMapper);
  ReduceContract<PactString,PactDouble,PactString,PactDouble> featureCountReducer=new ReduceContract<PactString,PactDouble,PactString,PactDouble>(BayesFeatureReducer.FeatureCount.class);
  featureCountReducer.setDegreeOfParallelism(noSubTasks);
  featureCountReducer.setInput(featureCountMapper);
  MapContract<PactString,NormalizedTokenCountList,PactString,PactInteger> labelCountMapper=new MapContract<PactString,NormalizedTokenCountList,PactString,PactInteger>(BayesFeatureMapper.LabelCount.class);
  labelCountMapper.setDegreeOfParallelism(noSubTasks);
  labelCountMapper.setInput(featureBaseMapper);
  ReduceContract<PactString,PactInteger,PactString,PactInteger> labelCountReducer=new ReduceContract<PactString,PactInteger,PactString,PactInteger>(BayesFeatureReducer.LabelCount.class);
  labelCountReducer.setDegreeOfParallelism(noSubTasks);
  labelCountReducer.setInput(labelCountMapper);
  MapContract<PactString,NormalizedTokenCountList,PactString,PactDouble> featureTfMapper=new MapContract<PactString,NormalizedTokenCountList,PactString,PactDouble>(BayesFeatureMapper.FeatureTf.class);
  featureTfMapper.setDegreeOfParallelism(noSubTasks);
  featureTfMapper.setInput(featureBaseMapper);
  ReduceContract<PactString,PactDouble,PactString,PactDouble> featureTfReducer=new ReduceContract<PactString,PactDouble,PactString,PactDouble>(BayesFeatureReducer.FeatureTf.class);
  featureTfReducer.setDegreeOfParallelism(noSubTasks);
  featureTfReducer.setInput(featureTfMapper);
  MapContract<PactString,NormalizedTokenCountList,LabelTokenPair,PactInteger> dfMapper=new MapContract<PactString,NormalizedTokenCountList,LabelTokenPair,PactInteger>(BayesFeatureMapper.DocumentFrequency.class);
  dfMapper.setDegreeOfParallelism(noSubTasks);
  dfMapper.setInput(featureBaseMapper);
  ReduceContract<LabelTokenPair,PactInteger,PactString,TokenCountPair> dfReducer=new ReduceContract<LabelTokenPair,PactInteger,PactString,TokenCountPair>(BayesFeatureReducer.DocumentFrequency.class);
  dfReducer.setDegreeOfParallelism(noSubTasks);
  dfReducer.setInput(dfMapper);
  MapContract<PactString,NormalizedTokenCountList,LabelTokenPair,PactDouble> weightMapper=new MapContract<PactString,NormalizedTokenCountList,LabelTokenPair,PactDouble>(BayesFeatureMapper.Weight.class);
  weightMapper.setDegreeOfParallelism(noSubTasks);
  weightMapper.setInput(featureBaseMapper);
  ReduceContract<LabelTokenPair,PactDouble,LabelTokenPair,PactDouble> weightReducer=new ReduceContract<LabelTokenPair,PactDouble,LabelTokenPair,PactDouble>(BayesFeatureReducer.Weight.class);
  weightReducer.setDegreeOfParallelism(noSubTasks);
  weightReducer.setInput(weightMapper);
  MapContract<PactString,PactInteger,PactInteger,PactInteger> overallWordCountMapper=new MapContract<PactString,PactInteger,PactInteger,PactInteger>(OverallWordCountMapper.class,""String_Node_Str"");
  overallWordCountMapper.setDegreeOfParallelism(noSubTasks);
  overallWordCountMapper.setInput(featureCountReducer);
  ReduceContract<PactInteger,PactInteger,PactInteger,PactInteger> overallWordCountReducer=new ReduceContract<PactInteger,PactInteger,PactInteger,PactInteger>(OverallWordcountReducer.class,""String_Node_Str"");
  overallWordCountReducer.setDegreeOfParallelism(noSubTasks);
  overallWordCountReducer.setInput(overallWordCountMapper);
  MatchContract<PactString,PactInteger,TokenCountPair,LabelTokenPair,PactDouble> weightCalculatorMatcher=new MatchContract<PactString,PactInteger,TokenCountPair,LabelTokenPair,PactDouble>(WeightCalculator.class,""String_Node_Str"");
  weightCalculatorMatcher.setDegreeOfParallelism(noSubTasks);
  weightCalculatorMatcher.setFirstInput(labelCountReducer);
  weightCalculatorMatcher.setSecondInput(dfReducer);
  MatchContract<LabelTokenPair,PactDouble,PactDouble,LabelTokenPair,PactDouble> idfCalculatorMatcher=new MatchContract<LabelTokenPair,PactDouble,PactDouble,LabelTokenPair,PactDouble>(IdfCalculator.class,""String_Node_Str"");
  idfCalculatorMatcher.setDegreeOfParallelism(noSubTasks);
  idfCalculatorMatcher.setFirstInput(weightCalculatorMatcher);
  idfCalculatorMatcher.setSecondInput(weightReducer);
  MapContract<LabelTokenPair,PactDouble,PactString,PactDouble> featureSummerMapper=new MapContract<LabelTokenPair,PactDouble,PactString,PactDouble>(BayesWeightMapper.FeatureSummer.class);
  featureSummerMapper.setDegreeOfParallelism(noSubTasks);
  featureSummerMapper.setInput(idfCalculatorMatcher);
  ReduceContract<PactString,PactDouble,PactString,PactDouble> featureSummerReducer=new ReduceContract<PactString,PactDouble,PactString,PactDouble>(BayesWeightReducer.Summer.class);
  featureSummerReducer.setDegreeOfParallelism(noSubTasks);
  featureSummerReducer.setInput(featureSummerMapper);
  MapContract<LabelTokenPair,PactDouble,PactString,PactDouble> labelSummerMapper=new MapContract<LabelTokenPair,PactDouble,PactString,PactDouble>(BayesWeightMapper.LabelSummer.class);
  labelSummerMapper.setDegreeOfParallelism(noSubTasks);
  labelSummerMapper.setInput(idfCalculatorMatcher);
  ReduceContract<PactString,PactDouble,PactString,PactDouble> labelSummerReducer=new ReduceContract<PactString,PactDouble,PactString,PactDouble>(BayesWeightReducer.Summer.class);
  labelSummerReducer.setDegreeOfParallelism(noSubTasks);
  labelSummerReducer.setInput(labelSummerMapper);
  MapContract<LabelTokenPair,PactDouble,PactString,PactDouble> totalSummerMapper=new MapContract<LabelTokenPair,PactDouble,PactString,PactDouble>(BayesWeightMapper.TotalSummer.class);
  totalSummerMapper.setDegreeOfParallelism(noSubTasks);
  totalSummerMapper.setInput(idfCalculatorMatcher);
  ReduceContract<PactString,PactDouble,PactString,PactDouble> totalSummerReducer=new ReduceContract<PactString,PactDouble,PactString,PactDouble>(BayesWeightReducer.Summer.class);
  totalSummerReducer.setDegreeOfParallelism(noSubTasks);
  totalSummerReducer.setInput(totalSummerMapper);
  MapContract<LabelTokenPair,PactDouble,PactString,PactDouble> tfidfTransformMapper=new MapContract<LabelTokenPair,PactDouble,PactString,PactDouble>(BayesThetaNormalizer.TfIdfTransform.class);
  tfidfTransformMapper.setDegreeOfParallelism(noSubTasks);
  tfidfTransformMapper.setInput(idfCalculatorMatcher);
  CrossContract<PactInteger,PactInteger,PactString,PactDouble,PactNull,ThetaNormalizerFactors> thetaFactorsSigmaVocab=new CrossContract<PactInteger,PactInteger,PactString,PactDouble,PactNull,ThetaNormalizerFactors>(BayesThetaNormalizer.ThetaFactorsVocabCountSigmaJSigmaK.class);
  thetaFactorsSigmaVocab.setDegreeOfParallelism(noSubTasks);
  thetaFactorsSigmaVocab.setFirstInput(overallWordCountReducer);
  thetaFactorsSigmaVocab.setSecondInput(totalSummerReducer);
  CrossContract<PactNull,ThetaNormalizerFactors,PactString,PactDouble,PactString,ThetaNormalizerFactors> thetaFactorsLabelWeights=new CrossContract<PactNull,ThetaNormalizerFactors,PactString,PactDouble,PactString,ThetaNormalizerFactors>(BayesThetaNormalizer.ThetaFactorsLabelWeights.class);
  thetaFactorsLabelWeights.setDegreeOfParallelism(noSubTasks);
  thetaFactorsLabelWeights.setFirstInput(thetaFactorsSigmaVocab);
  thetaFactorsLabelWeights.setSecondInput(labelSummerReducer);
  CoGroupContract<PactString,PactDouble,ThetaNormalizerFactors,PactString,PactDouble> thetaNormalizedLabels=new CoGroupContract<PactString,PactDouble,ThetaNormalizerFactors,PactString,PactDouble>(BayesThetaNormalizer.ThetaNormalize.class);
  thetaNormalizedLabels.setDegreeOfParallelism(noSubTasks);
  thetaNormalizedLabels.setFirstInput(thetaFactorsLabelWeights);
  thetaNormalizedLabels.setSecondInput(idfCalculatorMatcher);
  DataSinkContract<PactString,PactDouble> sink=new DataSinkContract<PactString,PactDouble>(StringDoubleOutFormat.class,dataOutput);
  sink.setInput(thetaNormalizedLabels);
  return new Plan(sink);
}","@Override public Plan getPlan(String... args) throws IllegalArgumentException {
  int noSubTasks=(args.length > 0 ? Integer.parseInt(args[0]) : -1);
  String dataInput=(args.length > 1 ? args[1] : ""String_Node_Str"");
  String dataOutput=(args.length > 2 ? args[2] : ""String_Node_Str"");
  DataSourceContract<PactString,FeatureList> source=new DataSourceContract<PactString,FeatureList>(NaiveBayesInputFormat.class,dataInput,""String_Node_Str"");
  source.setDegreeOfParallelism(noSubTasks);
  MapContract<PactString,FeatureList,PactString,NormalizedTokenCountList> featureBaseMapper=new MapContract<PactString,FeatureList,PactString,NormalizedTokenCountList>(BayesFeatureMapper.Base.class);
  featureBaseMapper.setDegreeOfParallelism(noSubTasks);
  featureBaseMapper.setInput(source);
  MapContract<PactString,NormalizedTokenCountList,PactString,PactDouble> featureCountMapper=new MapContract<PactString,NormalizedTokenCountList,PactString,PactDouble>(BayesFeatureMapper.FeatureCount.class);
  featureCountMapper.setDegreeOfParallelism(noSubTasks);
  featureCountMapper.setInput(featureBaseMapper);
  ReduceContract<PactString,PactDouble,PactString,PactDouble> featureCountReducer=new ReduceContract<PactString,PactDouble,PactString,PactDouble>(BayesFeatureReducer.FeatureCount.class);
  featureCountReducer.setDegreeOfParallelism(noSubTasks);
  featureCountReducer.setInput(featureCountMapper);
  MapContract<PactString,NormalizedTokenCountList,PactString,PactInteger> labelCountMapper=new MapContract<PactString,NormalizedTokenCountList,PactString,PactInteger>(BayesFeatureMapper.LabelCount.class);
  labelCountMapper.setDegreeOfParallelism(noSubTasks);
  labelCountMapper.setInput(featureBaseMapper);
  ReduceContract<PactString,PactInteger,PactString,PactInteger> labelCountReducer=new ReduceContract<PactString,PactInteger,PactString,PactInteger>(BayesFeatureReducer.LabelCount.class);
  labelCountReducer.setDegreeOfParallelism(noSubTasks);
  labelCountReducer.setInput(labelCountMapper);
  MapContract<PactString,NormalizedTokenCountList,PactString,PactDouble> featureTfMapper=new MapContract<PactString,NormalizedTokenCountList,PactString,PactDouble>(BayesFeatureMapper.FeatureTf.class);
  featureTfMapper.setDegreeOfParallelism(noSubTasks);
  featureTfMapper.setInput(featureBaseMapper);
  ReduceContract<PactString,PactDouble,PactString,PactDouble> featureTfReducer=new ReduceContract<PactString,PactDouble,PactString,PactDouble>(BayesFeatureReducer.FeatureTf.class);
  featureTfReducer.setDegreeOfParallelism(noSubTasks);
  featureTfReducer.setInput(featureTfMapper);
  MapContract<PactString,NormalizedTokenCountList,LabelTokenPair,PactInteger> dfMapper=new MapContract<PactString,NormalizedTokenCountList,LabelTokenPair,PactInteger>(BayesFeatureMapper.DocumentFrequency.class);
  dfMapper.setDegreeOfParallelism(noSubTasks);
  dfMapper.setInput(featureBaseMapper);
  ReduceContract<LabelTokenPair,PactInteger,PactString,TokenCountPair> dfReducer=new ReduceContract<LabelTokenPair,PactInteger,PactString,TokenCountPair>(BayesFeatureReducer.DocumentFrequency.class);
  dfReducer.setDegreeOfParallelism(noSubTasks);
  dfReducer.setInput(dfMapper);
  MapContract<PactString,NormalizedTokenCountList,LabelTokenPair,PactDouble> weightMapper=new MapContract<PactString,NormalizedTokenCountList,LabelTokenPair,PactDouble>(BayesFeatureMapper.Weight.class);
  weightMapper.setDegreeOfParallelism(noSubTasks);
  weightMapper.setInput(featureBaseMapper);
  ReduceContract<LabelTokenPair,PactDouble,LabelTokenPair,PactDouble> weightReducer=new ReduceContract<LabelTokenPair,PactDouble,LabelTokenPair,PactDouble>(BayesFeatureReducer.Weight.class);
  weightReducer.setDegreeOfParallelism(noSubTasks);
  weightReducer.setInput(weightMapper);
  MapContract<PactString,PactDouble,PactInteger,PactInteger> overallWordCountMapper=new MapContract<PactString,PactDouble,PactInteger,PactInteger>(OverallWordCountMapper.class,""String_Node_Str"");
  overallWordCountMapper.setDegreeOfParallelism(noSubTasks);
  overallWordCountMapper.setInput(featureCountReducer);
  ReduceContract<PactInteger,PactInteger,PactInteger,PactInteger> overallWordCountReducer=new ReduceContract<PactInteger,PactInteger,PactInteger,PactInteger>(OverallWordcountReducer.class,""String_Node_Str"");
  overallWordCountReducer.setDegreeOfParallelism(noSubTasks);
  overallWordCountReducer.setInput(overallWordCountMapper);
  MatchContract<PactString,PactInteger,TokenCountPair,LabelTokenPair,PactDouble> weightCalculatorMatcher=new MatchContract<PactString,PactInteger,TokenCountPair,LabelTokenPair,PactDouble>(WeightCalculator.class,""String_Node_Str"");
  weightCalculatorMatcher.setDegreeOfParallelism(noSubTasks);
  weightCalculatorMatcher.setFirstInput(labelCountReducer);
  weightCalculatorMatcher.setSecondInput(dfReducer);
  MatchContract<LabelTokenPair,PactDouble,PactDouble,LabelTokenPair,PactDouble> idfCalculatorMatcher=new MatchContract<LabelTokenPair,PactDouble,PactDouble,LabelTokenPair,PactDouble>(IdfCalculator.class,""String_Node_Str"");
  idfCalculatorMatcher.setDegreeOfParallelism(noSubTasks);
  idfCalculatorMatcher.setFirstInput(weightCalculatorMatcher);
  idfCalculatorMatcher.setSecondInput(weightReducer);
  MapContract<LabelTokenPair,PactDouble,PactString,PactDouble> featureSummerMapper=new MapContract<LabelTokenPair,PactDouble,PactString,PactDouble>(BayesWeightMapper.FeatureSummer.class);
  featureSummerMapper.setDegreeOfParallelism(noSubTasks);
  featureSummerMapper.setInput(idfCalculatorMatcher);
  ReduceContract<PactString,PactDouble,PactString,PactDouble> featureSummerReducer=new ReduceContract<PactString,PactDouble,PactString,PactDouble>(BayesWeightReducer.Summer.class);
  featureSummerReducer.setDegreeOfParallelism(noSubTasks);
  featureSummerReducer.setInput(featureSummerMapper);
  MapContract<LabelTokenPair,PactDouble,PactString,PactDouble> labelSummerMapper=new MapContract<LabelTokenPair,PactDouble,PactString,PactDouble>(BayesWeightMapper.LabelSummer.class);
  labelSummerMapper.setDegreeOfParallelism(noSubTasks);
  labelSummerMapper.setInput(idfCalculatorMatcher);
  ReduceContract<PactString,PactDouble,PactString,PactDouble> labelSummerReducer=new ReduceContract<PactString,PactDouble,PactString,PactDouble>(BayesWeightReducer.Summer.class);
  labelSummerReducer.setDegreeOfParallelism(noSubTasks);
  labelSummerReducer.setInput(labelSummerMapper);
  MapContract<LabelTokenPair,PactDouble,PactString,PactDouble> totalSummerMapper=new MapContract<LabelTokenPair,PactDouble,PactString,PactDouble>(BayesWeightMapper.TotalSummer.class);
  totalSummerMapper.setDegreeOfParallelism(noSubTasks);
  totalSummerMapper.setInput(idfCalculatorMatcher);
  ReduceContract<PactString,PactDouble,PactString,PactDouble> totalSummerReducer=new ReduceContract<PactString,PactDouble,PactString,PactDouble>(BayesWeightReducer.Summer.class);
  totalSummerReducer.setDegreeOfParallelism(noSubTasks);
  totalSummerReducer.setInput(totalSummerMapper);
  MapContract<LabelTokenPair,PactDouble,PactString,PactDouble> tfidfTransformMapper=new MapContract<LabelTokenPair,PactDouble,PactString,PactDouble>(BayesThetaNormalizer.TfIdfTransform.class);
  tfidfTransformMapper.setDegreeOfParallelism(noSubTasks);
  tfidfTransformMapper.setInput(idfCalculatorMatcher);
  CrossContract<PactInteger,PactInteger,PactString,PactDouble,PactNull,ThetaNormalizerFactors> thetaFactorsSigmaVocab=new CrossContract<PactInteger,PactInteger,PactString,PactDouble,PactNull,ThetaNormalizerFactors>(BayesThetaNormalizer.ThetaFactorsVocabCountSigmaJSigmaK.class);
  thetaFactorsSigmaVocab.setDegreeOfParallelism(noSubTasks);
  thetaFactorsSigmaVocab.setFirstInput(overallWordCountReducer);
  thetaFactorsSigmaVocab.setSecondInput(totalSummerReducer);
  CrossContract<PactNull,ThetaNormalizerFactors,PactString,PactDouble,PactString,ThetaNormalizerFactors> thetaFactorsLabelWeights=new CrossContract<PactNull,ThetaNormalizerFactors,PactString,PactDouble,PactString,ThetaNormalizerFactors>(BayesThetaNormalizer.ThetaFactorsLabelWeights.class);
  thetaFactorsLabelWeights.setDegreeOfParallelism(noSubTasks);
  thetaFactorsLabelWeights.setFirstInput(thetaFactorsSigmaVocab);
  thetaFactorsLabelWeights.setSecondInput(labelSummerReducer);
  CoGroupContract<PactString,PactDouble,ThetaNormalizerFactors,PactString,PactDouble> thetaNormalizedLabels=new CoGroupContract<PactString,PactDouble,ThetaNormalizerFactors,PactString,PactDouble>(BayesThetaNormalizer.ThetaNormalize.class);
  thetaNormalizedLabels.setDegreeOfParallelism(noSubTasks);
  thetaNormalizedLabels.setFirstInput(tfidfTransformMapper);
  thetaNormalizedLabels.setSecondInput(thetaFactorsLabelWeights);
  DataSinkContract<PactString,PactDouble> sink=new DataSinkContract<PactString,PactDouble>(StringDoubleOutFormat.class,dataOutput);
  sink.setInput(thetaNormalizedLabels);
  return new Plan(sink);
}"
45138,"@Override public void map(PactString word,PactInteger wordOccurences,Collector<PactInteger,PactInteger> out){
  out.collect(ONE,ONE);
}","@Override public void map(PactString word,PactDouble wordOccurences,Collector<PactInteger,PactInteger> out){
  out.collect(ONE,ONE);
}"
45139,"/** 
 * Changes the behavior of   {@link EnvVars#overrideAll(Map)} whichdrops variables which have value a null or a 0-length value: This implementation doesn't. <p>This is a fix for JENKINS-10045.</p>
 * @see EnvVars#overrideAll(Map)
 */
public static void overrideAll(EnvVars env,Map<String,String> all){
  for (  Map.Entry<String,String> e : all.entrySet()) {
    override(env,e.getKey(),e.getValue());
  }
}","/** 
 * Changes the behavior of   {@link EnvVars#overrideAll(Map)} whichdrops variables which have value a null or a 0-length value: This implementation doesn't. <p>This is a fix for JENKINS-10045.</p>
 * @param env - Environment variables
 * @param all - Map of strings to strings?
 * @see EnvVars#overrideAll(Map)
 */
public static void overrideAll(EnvVars env,Map<String,String> all){
  for (  Map.Entry<String,String> e : all.entrySet()) {
    override(env,e.getKey(),e.getValue());
  }
}"
45140,"/** 
 * @see #override(hudson.EnvVars,String,String)
 * @see EnvVars#override(String,String)
 */
private static void override(EnvVars env,String key,String value){
  int idx=key.indexOf('+');
  if (idx > 0) {
    String realKey=key.substring(0,idx);
    String v=env.get(realKey);
    if (v == null) {
      v=value;
    }
 else {
      Platform platform=null;
      try {
        platform=(Platform)EnvVars.class.getField(""String_Node_Str"").get(env);
      }
 catch (      Exception e) {
      }
      char ch=platform == null ? File.pathSeparatorChar : platform.pathSeparator;
      v=value + ch + v;
    }
    env.put(realKey,v);
    return;
  }
  env.put(key,value);
}","/** 
 * @see #override(hudson.EnvVars,String,String)
 * @see EnvVars#override(String,String)
 * @param env - Environment variables
 * @param key - Key
 * @param value - Value
 */
private static void override(EnvVars env,String key,String value){
  int idx=key.indexOf('+');
  if (idx > 0) {
    String realKey=key.substring(0,idx);
    String v=env.get(realKey);
    if (v == null) {
      v=value;
    }
 else {
      Platform platform=null;
      try {
        platform=(Platform)EnvVars.class.getField(""String_Node_Str"").get(env);
      }
 catch (      Exception e) {
      }
      char ch=platform == null ? File.pathSeparatorChar : platform.pathSeparator;
      v=value + ch + v;
    }
    env.put(realKey,v);
    return;
  }
  env.put(key,value);
}"
45141,"/** 
 * This populates the Username//Password credential dropdown on the config page.
 * @return  Returns a list of credentials to populate the combobox with.
 */
public static ListBoxModel doFillCredentialsIdItems(@AncestorInPath Job<?,?> owner,@QueryParameter String source){
  if (owner == null || !owner.hasPermission(Item.EXTENDED_READ)) {
    return new ListBoxModel();
  }
  return new StandardUsernameListBoxModel().withEmptySelection().withAll(availableCredentials(owner,new EnvVars().expand(source)));
}","/** 
 * This populates the Username//Password credential dropdown on the config page.
 * @param context - Owner
 * @param remote - Source
 * @return  Returns a list of credentials to populate the combobox with.
 */
public static ListBoxModel doFillCredentialsIdItems(@AncestorInPath Item context,@QueryParameter String remote){
  return doFillCredentialsItems(context,remote,StandardUsernamePasswordCredentials.class);
}"
45142,"/** 
 * This populates the rsaKeyFileId dropdown with a list of 'FileCredentials' that could be used.
 * @return  Returns a list of FileCredential objects that have been configured.
 */
public static ListBoxModel doFillRsaKeyFileIdItems(@AncestorInPath Job<?,?> owner,@QueryParameter String source){
  if (owner == null || !owner.hasPermission(Item.EXTENDED_READ)) {
    return new ListBoxModel();
  }
  return new StandardListBoxModel().withEmptySelection().withAll(availableFileCredentials(owner,new EnvVars().expand(source)));
}","/** 
 * This populates the rsaKeyFileId dropdown with a list of 'FileCredentials' that could be used.
 * @param context - Owner
 * @param remote - Source
 * @return  Returns a list of FileCredential objects that have been configured.
 */
public static ListBoxModel doFillRsaKeyFileIdItems(@AncestorInPath Item context,@QueryParameter String remote){
  return doFillCredentialsItems(context,remote,FileCredentials.class);
}"
45143,"/** 
 * Used to populate the rsaKeyFilePath field in stapler.
 * @return If using an RSA key file path, returns the path, otherwise returns null.
 */
@SuppressWarnings(""String_Node_Str"") public String getRsaKeyFilePath(){
  String result=null;
  if (rsaKey != null && rsaKey.getRsaKeyType() == RSAKey.Type.Path) {
    result=rsaKey.getRsaKeyValue();
  }
  return result;
}","/** 
 * Used to populate the rsaKeyFilePath field in stapler.
 * @return If using an RSA key file path, returns the path, otherwise returns null.
 */
@SuppressWarnings(""String_Node_Str"") public String getRsaKeyFilePath(){
  String result=null;
  if (rsaKey != null && rsaKey.getRsaKeyType() == RSAKey.Type.Path) {
    result=rsaKey.getRsaKeyValue();
  }
 else   if (rsaKeyPath != null && !rsaKeyPath.isEmpty()) {
    result=rsaKeyPath;
  }
  return result;
}"
45144,"@Exported public boolean isUsingRsaKeyPath(){
  return rsaKey != null && rsaKey.getRsaKeyType() == RSAKey.Type.Path;
}","@Exported public boolean isUsingRsaKeyPath(){
  boolean result=rsaKeyPath != null && !rsaKeyPath.isEmpty();
  return result || (rsaKey != null && rsaKey.getRsaKeyType() == RSAKey.Type.Path);
}"
45145,"public static ListBoxModel doFillCredentialsItems(@AncestorInPath Item context,@QueryParameter String remote,Class credentialType){
  if (context == null && Jenkins.getInstance() != null && !Jenkins.getInstance().hasPermission(Jenkins.ADMINISTER) || context != null && !context.hasPermission(Item.EXTENDED_READ)) {
    return new StandardListBoxModel();
  }
  List<DomainRequirement> domainRequirements;
  if (remote == null) {
    domainRequirements=Collections.<DomainRequirement>emptyList();
  }
 else {
    domainRequirements=URIRequirementBuilder.fromUri(remote.trim()).build();
  }
  return new StandardListBoxModel().withEmptySelection().withMatching(CredentialsMatchers.instanceOf(credentialType),CredentialsProvider.lookupCredentials(StandardCredentials.class,context,ACL.SYSTEM,domainRequirements));
}","/** 
 * @param context - Context
 * @param remote - Remtoe path
 * @param credentialType - Type of credentials
 * @return - Returns a properly populated listbox based on the current context
 */
public static ListBoxModel doFillCredentialsItems(@AncestorInPath Item context,@QueryParameter String remote,@Nonnull Class credentialType){
  Jenkins j=Jenkins.getInstance();
  if (context == null || j != null && !j.hasPermission(Jenkins.ADMINISTER) || !context.hasPermission(Item.EXTENDED_READ)) {
    return new StandardListBoxModel();
  }
  List<DomainRequirement> domainRequirements;
  if (remote == null) {
    domainRequirements=Collections.<DomainRequirement>emptyList();
  }
 else {
    domainRequirements=URIRequirementBuilder.fromUri(remote.trim()).build();
  }
  return new StandardListBoxModel().withEmptySelection().withMatching(CredentialsMatchers.instanceOf(credentialType),CredentialsProvider.lookupCredentials(StandardCredentials.class,context,ACL.SYSTEM,domainRequirements));
}"
45146,"/** 
 * Attempt to find a pre-configured 'SurroundTool' with a saved 'sscm_tool_name' Currently this will always fall back to the 'default' tool for the current node and requires some further testing of edge conditions
 */
public SurroundTool resolveSscmTool(TaskListener listener){
  SurroundTool sscm=null;
  if (sscm_tool_name == null || sscm_tool_name.isEmpty()) {
    sscm=SurroundTool.getDefaultInstallation();
  }
 else {
    sscm=Jenkins.getInstance().getDescriptorByType(SurroundTool.DescriptorImpl.class).getInstallation(sscm_tool_name);
    if (sscm == null) {
      listener.getLogger().println(String.format(""String_Node_Str"",sscm_tool_name));
      sscm=SurroundTool.getDefaultInstallation();
    }
  }
  return sscm;
}","/** 
 * Attempt to find a pre-configured 'SurroundTool' with a saved 'sscm_tool_name' Currently this will always fall back to the 'default' tool for the current node and requires some further testing of edge conditions
 */
public SurroundTool resolveSscmTool(TaskListener listener){
  SurroundTool sscm=null;
  if (sscm_tool_name == null || sscm_tool_name.isEmpty()) {
    sscm=SurroundTool.getDefaultInstallation();
  }
 else {
    SurroundTool.DescriptorImpl sscmToolDesc=Jenkins.getInstance().getDescriptorByType(SurroundTool.DescriptorImpl.class);
    if (sscmToolDesc != null)     sscm=sscmToolDesc.getInstallation(sscm_tool_name);
    if (sscm == null) {
      listener.getLogger().println(String.format(""String_Node_Str"",sscm_tool_name));
      sscm=SurroundTool.getDefaultInstallation();
    }
  }
  return sscm;
}"
45147,"@DataBoundConstructor public SurroundStep(String url,String credentialsId){
  url=Util.fixEmptyAndTrim(url);
  try {
    url=URLDecoder.decode(url,""String_Node_Str"");
  }
 catch (  UnsupportedEncodingException e) {
    e.printStackTrace();
  }
  this.url=url;
  this.credentialsId=Util.fixEmptyAndTrim(credentialsId);
}","@DataBoundConstructor public SurroundStep(String url,String credentialsId){
  url=Util.fixEmptyAndTrim(url);
  try {
    if (url != null)     url=URLDecoder.decode(url,""String_Node_Str"");
  }
 catch (  UnsupportedEncodingException e) {
    e.printStackTrace();
  }
  this.url=url;
  this.credentialsId=Util.fixEmptyAndTrim(credentialsId);
}"
45148,"/** 
 * This first checks the rsaKeyFileId and then the rsaKeyPath.  If it can find a path to an RSA Key file from either of these items it will return the path to the RSA Key file on the remote machine (or as defined via rsaKeyPath) If no RSA Key file is found, it returns null
 * @param owner     Used to lookup possible fileCredentials
 * @param env       Used as part of the lookup for fileCredentials
 * @param workspace Used as a destination for any RSA Key File retrieved from fileCredentials
 * @return Returns either the path to an RSA Key File, or null indicating no RSA Key File.
 */
private String getRemotePathForRSAKeyFile(Job<?,?> owner,EnvVars env,FilePath workspace){
  String result=null;
  if (rsaKey != null) {
switch (rsaKey.getRsaKeyType()) {
case ID:
      result=populateRSAKeyFile(owner,env,workspace);
    break;
case Path:
  result=rsaKey.getRsaKeyValue();
break;
case NoKey:
default :
result=null;
}
}
return result;
}","/** 
 * This first checks the rsaKeyFileId and then the rsaKeyPath.  If it can find a path to an RSA Key file from either of these items it will return the path to the RSA Key file on the remote machine (or as defined via rsaKeyPath) If no RSA Key file is found, it returns null
 * @param owner     Used to lookup possible fileCredentials
 * @param env       Used as part of the lookup for fileCredentials
 * @param workspace Used as a destination for any RSA Key File retrieved from fileCredentials
 * @return Returns either the path to an RSA Key File, or null indicating no RSA Key File.
 */
private String getRemotePathForRSAKeyFile(Job<?,?> owner,EnvVars env,FilePath workspace){
  String result=null;
  if (rsaKey != null) {
switch (rsaKey.getRsaKeyType()) {
case ID:
      result=populateRSAKeyFile(owner,env,workspace);
    break;
case Path:
  result=rsaKey.getRsaKeyValue();
break;
case NoKey:
default :
result=null;
}
}
 else if (rsaKeyPath != null && !rsaKeyPath.isEmpty()) {
result=rsaKeyPath;
}
return result;
}"
45149,"/** 
 * @param context - Context
 * @param remote - Remtoe path
 * @param credentialType - Type of credentials
 * @return - Returns a properly populated listbox based on the current context
 */
public static ListBoxModel doFillCredentialsItems(@AncestorInPath Item context,@QueryParameter String remote,@Nonnull Class credentialType){
  Jenkins j=Jenkins.getInstance();
  if (context == null || j != null && !j.hasPermission(Jenkins.ADMINISTER) || !context.hasPermission(Item.EXTENDED_READ)) {
    return new StandardListBoxModel();
  }
  List<DomainRequirement> domainRequirements;
  if (remote == null) {
    domainRequirements=Collections.<DomainRequirement>emptyList();
  }
 else {
    domainRequirements=URIRequirementBuilder.fromUri(remote.trim()).build();
  }
  return new StandardListBoxModel().withEmptySelection().withMatching(CredentialsMatchers.instanceOf(credentialType),CredentialsProvider.lookupCredentials(StandardCredentials.class,context,ACL.SYSTEM,domainRequirements));
}","/** 
 * @param context - Context
 * @param remote - Remote path
 * @param credentialType - Type of credentials
 * @return - Returns a properly populated listbox based on the current context
 */
public static ListBoxModel doFillCredentialsItems(@AncestorInPath Item context,@QueryParameter String remote,@Nonnull Class credentialType){
  Jenkins j=Jenkins.getInstance();
  if (context == null && !j.hasPermission(Jenkins.ADMINISTER) || context != null && !context.hasPermission(Item.EXTENDED_READ)) {
    return new StandardListBoxModel();
  }
  List<DomainRequirement> domainRequirements;
  if (remote == null) {
    domainRequirements=Collections.<DomainRequirement>emptyList();
  }
 else {
    domainRequirements=URIRequirementBuilder.fromUri(remote.trim()).build();
  }
  return new StandardListBoxModel().withEmptySelection().withMatching(CredentialsMatchers.instanceOf(credentialType),CredentialsProvider.lookupCredentials(StandardCredentials.class,context,ACL.SYSTEM,domainRequirements));
}"
45150,"/** 
 * {@inheritDoc}
 */
@Override public PollingResult compareRemoteRevisionWith(@Nonnull Job<?,?> project,@Nullable Launcher launcher,@Nullable FilePath workspace,@Nonnull TaskListener listener,@Nonnull SCMRevisionState baseline) throws IOException, InterruptedException {
  SimpleDateFormat scm_datetime_formatter=new SimpleDateFormat(SURROUND_DATETIME_FORMAT_STR);
  Date lastBuild=((SurroundSCMRevisionState)baseline).getDate();
  int lastBuildNum=((SurroundSCMRevisionState)baseline).getBuildNumber();
  Date now=new Date();
  File temporaryFile=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
  listener.getLogger().println(""String_Node_Str"" + lastBuildNum + ""String_Node_Str""+ scm_datetime_formatter.format(lastBuild)+ ""String_Node_Str""+ pluginVersion);
  double countChanges=determineChangeCount(project,launcher,listener,lastBuild,now,temporaryFile,workspace);
  if (!temporaryFile.delete()) {
    listener.getLogger().println(""String_Node_Str"" + temporaryFile.getAbsolutePath() + ""String_Node_Str"");
    temporaryFile.deleteOnExit();
  }
  if (countChanges == 0)   return PollingResult.NO_CHANGES;
 else   if (countChanges < changesThreshold)   return PollingResult.SIGNIFICANT;
  return PollingResult.BUILD_NOW;
}","/** 
 * {@inheritDoc}
 */
@Override public PollingResult compareRemoteRevisionWith(@Nonnull Job<?,?> project,@Nullable Launcher launcher,@Nullable FilePath workspace,@Nonnull TaskListener listener,@Nonnull SCMRevisionState baseline) throws IOException, InterruptedException {
  SimpleDateFormat scm_datetime_formatter=new SimpleDateFormat(SURROUND_DATETIME_FORMAT_STR);
  Date lastBuild=((SurroundSCMRevisionState)baseline).getDate();
  int lastBuildNum=((SurroundSCMRevisionState)baseline).getBuildNumber();
  Date now=new Date();
  File temporaryFile=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
  listener.getLogger().println(""String_Node_Str"" + lastBuildNum + ""String_Node_Str""+ scm_datetime_formatter.format(lastBuild)+ ""String_Node_Str""+ pluginVersion);
  double countChanges=0;
  if (launcher != null)   countChanges=determineChangeCount(project,launcher,listener,lastBuild,now,temporaryFile,workspace);
 else   listener.getLogger().println(""String_Node_Str"");
  if (!temporaryFile.delete()) {
    listener.getLogger().println(""String_Node_Str"" + temporaryFile.getAbsolutePath() + ""String_Node_Str"");
    temporaryFile.deleteOnExit();
  }
  if (countChanges == 0)   return PollingResult.NO_CHANGES;
 else   if (countChanges < changesThreshold)   return PollingResult.SIGNIFICANT;
  return PollingResult.BUILD_NOW;
}"
45151,"/** 
 * Attempt to find a pre-configured 'SurroundTool' with a saved 'sscm_tool_name' Currently this will always fall back to the 'default' tool for the current node and requires some further testing of edge conditions
 */
public SurroundTool resolveSscmTool(TaskListener listener){
  SurroundTool sscm=null;
  if (sscm_tool_name == null || sscm_tool_name.isEmpty()) {
    sscm=SurroundTool.getDefaultInstallation();
  }
 else {
    SurroundTool.DescriptorImpl sscmToolDesc=Jenkins.getInstance().getDescriptorByType(SurroundTool.DescriptorImpl.class);
    if (sscmToolDesc != null)     sscm=sscmToolDesc.getInstallation(sscm_tool_name);
    if (sscm == null) {
      listener.getLogger().println(String.format(""String_Node_Str"",sscm_tool_name));
      sscm=SurroundTool.getDefaultInstallation();
    }
  }
  return sscm;
}","/** 
 * Attempt to find a pre-configured 'SurroundTool' with a saved 'sscm_tool_name' Currently this will always fall back to the 'default' tool for the current node and requires some further testing of edge conditions
 */
public SurroundTool resolveSscmTool(TaskListener listener){
  SurroundTool sscm=null;
  if (sscm_tool_name == null || sscm_tool_name.isEmpty()) {
    sscm=SurroundTool.getDefaultInstallation();
  }
 else {
    Jenkins jenkinsInstance=Jenkins.getInstance();
    if (jenkinsInstance != null) {
      SurroundTool.DescriptorImpl sscmToolDesc=Jenkins.getInstance().getDescriptorByType(SurroundTool.DescriptorImpl.class);
      if (sscmToolDesc != null)       sscm=sscmToolDesc.getInstallation(sscm_tool_name);
    }
    if (sscm == null) {
      listener.getLogger().println(String.format(""String_Node_Str"",sscm_tool_name));
      sscm=SurroundTool.getDefaultInstallation();
    }
  }
  return sscm;
}"
45152,"public static boolean validateSSCMURL(String URL){
  Matcher changeMatcher=URI_PATTERN.matcher(URL);
  boolean result=false;
  if (changeMatcher.find() && changeMatcher.groupCount() == 4) {
    result=true;
  }
  return result;
}","public static boolean validateSSCMURL(String URL){
  if (URL == null)   return false;
  Matcher changeMatcher=URI_PATTERN.matcher(URL);
  boolean result=false;
  if (changeMatcher.find() && changeMatcher.groupCount() == 4) {
    result=true;
  }
  return result;
}"
45153,"/** 
 * Parses the Surround SCM Server port from the pased in sscm:// url. ex. sscm://server:4900//branch//Mainline/Path/To/Repository
 * @param URL ex. sscm://server:4900//branch//Mainline/Path/To/Repository
 * @return returns the port (ex. 4900)
 */
public static String getRepositoryFromURL(String URL){
  Matcher changeMatcher=URI_PATTERN.matcher(URL);
  String result=""String_Node_Str"";
  if (changeMatcher.find() && changeMatcher.groupCount() == 4) {
    result=changeMatcher.group(4);
  }
  return result;
}","/** 
 * Parses the Surround SCM Server port from the pased in sscm:// url. ex. sscm://server:4900//branch//Mainline/Path/To/Repository
 * @param URL ex. sscm://server:4900//branch//Mainline/Path/To/Repository
 * @return returns the port (ex. 4900)
 */
public static String getRepositoryFromURL(String URL){
  String result=""String_Node_Str"";
  if (URL != null) {
    Matcher changeMatcher=URI_PATTERN.matcher(URL);
    if (changeMatcher.find() && changeMatcher.groupCount() == 4) {
      result=changeMatcher.group(4);
    }
  }
  return result;
}"
45154,"/** 
 * Parses the Surround SCM Server port from the pased in sscm:// url. ex. sscm://server:4900//branch//Mainline/Path/To/Repository
 * @param URL ex. sscm://server:4900//branch//Mainline/Path/To/Repository
 * @return returns the port (ex. 4900)
 */
public static String getPortFromURL(String URL){
  Matcher changeMatcher=URI_PATTERN.matcher(URL);
  String result=""String_Node_Str"";
  if (changeMatcher.find() && changeMatcher.groupCount() == 4) {
    result=changeMatcher.group(2);
  }
  return result;
}","/** 
 * Parses the Surround SCM Server port from the pased in sscm:// url. ex. sscm://server:4900//branch//Mainline/Path/To/Repository
 * @param URL ex. sscm://server:4900//branch//Mainline/Path/To/Repository
 * @return returns the port (ex. 4900)
 */
public static String getPortFromURL(String URL){
  String result=""String_Node_Str"";
  if (URL != null) {
    Matcher changeMatcher=URI_PATTERN.matcher(URL);
    if (changeMatcher.find() && changeMatcher.groupCount() == 4) {
      result=changeMatcher.group(2);
    }
  }
  return result;
}"
45155,"/** 
 * Parses the Surround SCM Server host name from the passed in sscm:// url. ex. sscm://server:4900//branch//Mainline/Path/To/Repository
 * @param URL ex. sscm://server:4900//branch//Mainline/Path/To/Repository
 * @return  Returns server
 */
public static String getServerFromURL(String URL){
  Matcher changeMatcher=URI_PATTERN.matcher(URL);
  String result=""String_Node_Str"";
  if (changeMatcher.find() && changeMatcher.groupCount() == 4) {
    result=changeMatcher.group(1);
  }
  return result;
}","/** 
 * Parses the Surround SCM Server host name from the passed in sscm:// url. ex. sscm://server:4900//branch//Mainline/Path/To/Repository
 * @param URL ex. sscm://server:4900//branch//Mainline/Path/To/Repository
 * @return  Returns server
 */
public static String getServerFromURL(String URL){
  String result=""String_Node_Str"";
  if (URL != null) {
    Matcher changeMatcher=URI_PATTERN.matcher(URL);
    if (changeMatcher.find() && changeMatcher.groupCount() == 4) {
      result=changeMatcher.group(1);
    }
  }
  return result;
}"
45156,"/** 
 * Parses the Surround SCM Server port from the pased in sscm:// url. ex. sscm://server:4900//branch//Mainline/Path/To/Repository
 * @param URL ex. sscm://server:4900//branch//Mainline/Path/To/Repository
 * @return returns the port (ex. 4900)
 */
public static String getBranchFromURL(String URL){
  Matcher changeMatcher=URI_PATTERN.matcher(URL);
  String result=""String_Node_Str"";
  if (changeMatcher.find() && changeMatcher.groupCount() == 4) {
    result=changeMatcher.group(3);
  }
  return result;
}","/** 
 * Parses the Surround SCM Server port from the pased in sscm:// url. ex. sscm://server:4900//branch//Mainline/Path/To/Repository
 * @param URL ex. sscm://server:4900//branch//Mainline/Path/To/Repository
 * @return returns the port (ex. 4900)
 */
public static String getBranchFromURL(String URL){
  String result=""String_Node_Str"";
  if (URL != null) {
    Matcher changeMatcher=URI_PATTERN.matcher(URL);
    if (changeMatcher.find() && changeMatcher.groupCount() == 4) {
      result=changeMatcher.group(3);
    }
  }
  return result;
}"
45157,"public void testValidateURL() throws Exception {
  assertTrue(SSCMUtils.validateSSCMURL(URL));
}","public void testValidateURL() throws Exception {
  assertTrue(SSCMUtils.validateSSCMURL(URL));
  assertFalse(SSCMUtils.validateSSCMURL(null));
}"
45158,"/** 
 * Attempt to find a pre-configured 'SurroundTool' with a saved 'sscm_tool_name' Currently this will always fall back to the 'default' tool for the current node and requires some further testing of edge conditions
 */
public SurroundTool resolveSscmTool(TaskListener listener){
  SurroundTool sscm=null;
  if (sscm_tool_name == null || sscm_tool_name.isEmpty()) {
    sscm=SurroundTool.getDefaultInstallation();
  }
 else {
    Jenkins jenkinsInstance=Jenkins.getInstance();
    if (jenkinsInstance != null) {
      SurroundTool.DescriptorImpl sscmToolDesc=Jenkins.getInstance().getDescriptorByType(SurroundTool.DescriptorImpl.class);
      if (sscmToolDesc != null)       sscm=sscmToolDesc.getInstallation(sscm_tool_name);
    }
    if (sscm == null) {
      listener.getLogger().println(String.format(""String_Node_Str"",sscm_tool_name));
      sscm=SurroundTool.getDefaultInstallation();
    }
  }
  return sscm;
}","/** 
 * Attempt to find a pre-configured 'SurroundTool' with a saved 'sscm_tool_name' Currently this will always fall back to the 'default' tool for the current node and requires some further testing of edge conditions
 */
public SurroundTool resolveSscmTool(TaskListener listener){
  SurroundTool sscm=null;
  if (sscm_tool_name == null || sscm_tool_name.isEmpty()) {
    sscm=SurroundTool.getDefaultInstallation();
  }
 else {
    Jenkins jenkinsInstance=Jenkins.getInstance();
    if (jenkinsInstance != null) {
      SurroundTool.DescriptorImpl sscmToolDesc=jenkinsInstance.getDescriptorByType(SurroundTool.DescriptorImpl.class);
      if (sscmToolDesc != null)       sscm=sscmToolDesc.getInstallation(sscm_tool_name);
    }
    if (sscm == null) {
      listener.getLogger().println(String.format(""String_Node_Str"",sscm_tool_name));
      sscm=SurroundTool.getDefaultInstallation();
    }
  }
  return sscm;
}"
45159,"private double determineChangeCount(Launcher launcher,FilePath workspace,TaskListener listener,Date lastBuildDate,Date currentDate,File changelogFile) throws IOException, InterruptedException {
  SimpleDateFormat scm_datetime_formatter=new SimpleDateFormat(SURROUND_DATETIME_FORMAT_STR);
  double changesCount=0;
  if (server != null)   listener.getLogger().println(""String_Node_Str"" + server);
  String dateRange=scm_datetime_formatter.format(lastBuildDate);
  dateRange=dateRange.concat(""String_Node_Str"");
  dateRange=dateRange.concat(scm_datetime_formatter.format(currentDate));
  ArgumentListBuilder cmd=new ArgumentListBuilder();
  cmd.add(getSurroundSCMExecutable());
  cmd.add(""String_Node_Str"");
  cmd.add(""String_Node_Str"");
  cmd.add(""String_Node_Str"".concat(dateRange));
  cmd.addMasked(""String_Node_Str"".concat(userName).concat(""String_Node_Str"").concat(password));
  if (rsaKeyPath != null && !rsaKeyPath.isEmpty()) {
    cmd.add(""String_Node_Str"".concat(rsaKeyPath));
  }
 else {
    cmd.add(""String_Node_Str"".concat(server).concat(""String_Node_Str"").concat(serverPort));
  }
  cmd.add(""String_Node_Str"".concat(branch));
  cmd.add(""String_Node_Str"".concat(repository));
  cmd.add(""String_Node_Str"");
  listener.getLogger().println(""String_Node_Str"" + cmd.toString() + ""String_Node_Str""+ dateRange+ ""String_Node_Str"");
  FileOutputStream os=new FileOutputStream(changelogFile);
  try {
    BufferedOutputStream bos=new BufferedOutputStream(os);
    try {
      int cmdResult=launcher.launch().cmds(cmd).stdout(bos).pwd(workspace).join();
      if (cmdResult != 0) {
        listener.fatalError(""String_Node_Str"" + cmdResult);
      }
    }
  finally {
      bos.close();
    }
  }
  finally {
    os.close();
  }
  BufferedReader br=null;
  String line=null;
  try {
    br=new BufferedReader(new FileReader(changelogFile));
    line=br.readLine();
    if (line != null) {
      listener.getLogger().println(line);
      String num=line.substring(6);
      try {
        changesCount=Double.valueOf(num.trim());
      }
 catch (      NumberFormatException nfe) {
        listener.fatalError(""String_Node_Str"" + nfe.getMessage());
      }
    }
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
  }
 finally {
    if (br != null) {
      br.close();
    }
  }
  listener.getLogger().println(""String_Node_Str"" + changesCount);
  return changesCount;
}","private double determineChangeCount(Launcher launcher,FilePath workspace,TaskListener listener,Date lastBuildDate,Date currentDate,File changelogFile) throws IOException, InterruptedException {
  SimpleDateFormat scm_datetime_formatter=new SimpleDateFormat(SURROUND_DATETIME_FORMAT_STR);
  double changesCount=0;
  if (server != null)   listener.getLogger().println(""String_Node_Str"" + server);
  String dateRange=scm_datetime_formatter.format(lastBuildDate);
  dateRange=dateRange.concat(""String_Node_Str"");
  dateRange=dateRange.concat(scm_datetime_formatter.format(currentDate));
  ArgumentListBuilder cmd=new ArgumentListBuilder();
  cmd.add(getSurroundSCMExecutable());
  cmd.add(""String_Node_Str"");
  cmd.add(""String_Node_Str"");
  cmd.add(""String_Node_Str"".concat(dateRange));
  cmd.addMasked(""String_Node_Str"".concat(userName).concat(""String_Node_Str"").concat(password));
  if (rsaKeyPath != null && !rsaKeyPath.isEmpty()) {
    cmd.add(""String_Node_Str"".concat(rsaKeyPath));
  }
 else {
    cmd.add(""String_Node_Str"".concat(server).concat(""String_Node_Str"").concat(serverPort));
  }
  cmd.add(""String_Node_Str"".concat(branch));
  cmd.add(""String_Node_Str"".concat(repository));
  cmd.add(""String_Node_Str"");
  listener.getLogger().println(""String_Node_Str"" + cmd.toString() + ""String_Node_Str""+ dateRange+ ""String_Node_Str"");
  FileOutputStream os=new FileOutputStream(changelogFile);
  try {
    BufferedOutputStream bos=new BufferedOutputStream(os);
    try {
      int cmdResult=launcher.launch().cmds(cmd).stdout(bos).pwd(workspace).join();
      if (cmdResult != 0) {
        listener.fatalError(""String_Node_Str"" + cmdResult);
      }
    }
  finally {
      bos.close();
    }
  }
  finally {
    os.close();
  }
  BufferedReader br=null;
  String line=null;
  InputStreamReader is=new InputStreamReader(new FileInputStream(changelogFile),""String_Node_Str"");
  try {
    br=new BufferedReader(is);
    line=br.readLine();
    if (line != null) {
      listener.getLogger().println(line);
      String num=line.substring(6);
      try {
        changesCount=Double.valueOf(num.trim());
      }
 catch (      NumberFormatException nfe) {
        listener.fatalError(""String_Node_Str"" + nfe.getMessage());
      }
    }
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
  }
 finally {
    if (br != null) {
      br.close();
    }
  }
  listener.getLogger().println(""String_Node_Str"" + changesCount);
  return changesCount;
}"
45160,"private boolean captureChangeLog(Launcher launcher,FilePath workspace,BuildListener listener,Date lastBuildDate,Date currentDate,File changelogFile,EnvVars env) throws IOException, InterruptedException {
  boolean result=true;
  SimpleDateFormat scm_datetime_formatter=new SimpleDateFormat(SURROUND_DATETIME_FORMAT_STR);
  String dateRange=scm_datetime_formatter.format(lastBuildDate);
  dateRange=dateRange.concat(""String_Node_Str"");
  dateRange=dateRange.concat(scm_datetime_formatter.format(currentDate));
  ArgumentListBuilder cmd=new ArgumentListBuilder();
  cmd.add(getSurroundSCMExecutable());
  cmd.add(""String_Node_Str"");
  cmd.add(""String_Node_Str"");
  cmd.add(""String_Node_Str"".concat(dateRange));
  cmd.addMasked(""String_Node_Str"".concat(userName).concat(""String_Node_Str"").concat(password));
  if (rsaKeyPath != null && !rsaKeyPath.isEmpty()) {
    cmd.add(""String_Node_Str"".concat(rsaKeyPath));
  }
 else {
    cmd.add(""String_Node_Str"".concat(server).concat(""String_Node_Str"").concat(serverPort));
  }
  cmd.add(""String_Node_Str"".concat(branch));
  cmd.add(""String_Node_Str"".concat(repository));
  cmd.add(""String_Node_Str"");
  FileOutputStream os=new FileOutputStream(changelogFile);
  try {
    BufferedOutputStream bos=new BufferedOutputStream(os);
    PrintWriter writer=new PrintWriter(new FileWriter(changelogFile));
    try {
      int cmdResult=launcher.launch().cmds(cmd).envs(env).stdout(bos).pwd(workspace).join();
      if (cmdResult != 0) {
        listener.fatalError(""String_Node_Str"" + cmdResult);
        result=false;
      }
    }
  finally {
      writer.close();
      bos.close();
    }
  }
  finally {
    os.close();
  }
  listener.getLogger().println(""String_Node_Str"");
  listener.getLogger().println(""String_Node_Str"" + changelogFile.getAbsolutePath());
  return result;
}","private boolean captureChangeLog(Launcher launcher,FilePath workspace,BuildListener listener,Date lastBuildDate,Date currentDate,File changelogFile,EnvVars env) throws IOException, InterruptedException {
  boolean result=true;
  SimpleDateFormat scm_datetime_formatter=new SimpleDateFormat(SURROUND_DATETIME_FORMAT_STR);
  String dateRange=scm_datetime_formatter.format(lastBuildDate);
  dateRange=dateRange.concat(""String_Node_Str"");
  dateRange=dateRange.concat(scm_datetime_formatter.format(currentDate));
  ArgumentListBuilder cmd=new ArgumentListBuilder();
  cmd.add(getSurroundSCMExecutable());
  cmd.add(""String_Node_Str"");
  cmd.add(""String_Node_Str"");
  cmd.add(""String_Node_Str"".concat(dateRange));
  cmd.addMasked(""String_Node_Str"".concat(userName).concat(""String_Node_Str"").concat(password));
  if (rsaKeyPath != null && !rsaKeyPath.isEmpty()) {
    cmd.add(""String_Node_Str"".concat(rsaKeyPath));
  }
 else {
    cmd.add(""String_Node_Str"".concat(server).concat(""String_Node_Str"").concat(serverPort));
  }
  cmd.add(""String_Node_Str"".concat(branch));
  cmd.add(""String_Node_Str"".concat(repository));
  cmd.add(""String_Node_Str"");
  FileOutputStream os=new FileOutputStream(changelogFile);
  try {
    BufferedOutputStream bos=new BufferedOutputStream(os);
    Writer w=new OutputStreamWriter(new FileOutputStream(changelogFile),""String_Node_Str"");
    PrintWriter writer=new PrintWriter(w);
    try {
      int cmdResult=launcher.launch().cmds(cmd).envs(env).stdout(bos).pwd(workspace).join();
      if (cmdResult != 0) {
        listener.fatalError(""String_Node_Str"" + cmdResult);
        result=false;
      }
    }
  finally {
      writer.close();
      bos.close();
    }
  }
  finally {
    os.close();
  }
  listener.getLogger().println(""String_Node_Str"");
  listener.getLogger().println(""String_Node_Str"" + changelogFile.getAbsolutePath());
  return result;
}"
45161,"@Override public ChangeLogSet<? extends Entry> parse(AbstractBuild build,File changelogFile) throws IOException, SAXException {
  SurroundSCMChangeLogSet cls=new SurroundSCMChangeLogSet(build);
  String line=null;
  BufferedReader br=null;
  boolean foundAnItem=false;
  try {
    br=new BufferedReader(new FileReader(changelogFile));
    while ((line=br.readLine()) != null) {
      if (!foundAnItem) {
        foundAnItem=true;
        continue;
      }
      if (line.startsWith(""String_Node_Str""))       break;
      int end=line.indexOf(""String_Node_Str"");
      if (end <= 0)       break;
      String path=line.substring(1,end);
      line=line.substring(end + 1);
      end=line.indexOf(""String_Node_Str"");
      if (end <= 0)       break;
      String name=line.substring(1,end);
      line=line.substring(end + 1);
      name=path.concat(""String_Node_Str"").concat(name);
      end=line.indexOf(""String_Node_Str"");
      if (end <= 0)       break;
      String version=line.substring(1,end);
      line=line.substring(end + 1);
      end=line.indexOf(""String_Node_Str"");
      if (end <= 0)       break;
      String action=line.substring(1,end);
      line=line.substring(end + 1);
      end=line.indexOf(""String_Node_Str"");
      if (end <= 0)       break;
      String date=line.substring(1,end);
      line=line.substring(end + 1);
      end=line.indexOf(""String_Node_Str"");
      if (end <= 0)       break;
      String comment=line.substring(1,end);
      line=line.substring(end + 1);
      end=line.indexOf(""String_Node_Str"");
      if (end <= 0)       break;
      String userName=line.substring(1,end);
      line=line.substring(end + 1);
      SurroundSCMChangeLogSetEntry next=new SurroundSCMChangeLogSetEntry(name,comment,version,action,date,cls,userName);
      if (!cls.addEntry(next))       break;
    }
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
  }
 finally {
    if (br != null)     br.close();
  }
  return cls;
}","@Override public ChangeLogSet<? extends Entry> parse(AbstractBuild build,File changelogFile) throws IOException, SAXException {
  SurroundSCMChangeLogSet cls=new SurroundSCMChangeLogSet(build);
  String line=null;
  BufferedReader br=null;
  boolean foundAnItem=false;
  InputStreamReader is=new InputStreamReader(new FileInputStream(changelogFile),""String_Node_Str"");
  try {
    br=new BufferedReader(is);
    while ((line=br.readLine()) != null) {
      if (!foundAnItem) {
        foundAnItem=true;
        continue;
      }
      if (line.startsWith(""String_Node_Str""))       break;
      int end=line.indexOf(""String_Node_Str"");
      if (end <= 0)       break;
      String path=line.substring(1,end);
      line=line.substring(end + 1);
      end=line.indexOf(""String_Node_Str"");
      if (end <= 0)       break;
      String name=line.substring(1,end);
      line=line.substring(end + 1);
      name=path.concat(""String_Node_Str"").concat(name);
      end=line.indexOf(""String_Node_Str"");
      if (end <= 0)       break;
      String version=line.substring(1,end);
      line=line.substring(end + 1);
      end=line.indexOf(""String_Node_Str"");
      if (end <= 0)       break;
      String action=line.substring(1,end);
      line=line.substring(end + 1);
      end=line.indexOf(""String_Node_Str"");
      if (end <= 0)       break;
      String date=line.substring(1,end);
      line=line.substring(end + 1);
      end=line.indexOf(""String_Node_Str"");
      if (end <= 0)       break;
      String comment=line.substring(1,end);
      line=line.substring(end + 1);
      end=line.indexOf(""String_Node_Str"");
      if (end <= 0)       break;
      String userName=line.substring(1,end);
      line=line.substring(end + 1);
      SurroundSCMChangeLogSetEntry next=new SurroundSCMChangeLogSetEntry(name,comment,version,action,date,cls,userName);
      if (!cls.addEntry(next))       break;
    }
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
  }
 finally {
    if (br != null)     br.close();
  }
  return cls;
}"
45162,"@Override protected PollingResult compareRemoteRevisionWith(AbstractProject<?,?> project,Launcher launcher,FilePath workspace,TaskListener listener,SCMRevisionState baseline) throws IOException, InterruptedException {
  SimpleDateFormat scm_datetime_formatter=new SimpleDateFormat(SURROUND_DATETIME_FORMAT_STR);
  Date lastBuild=((SurroundSCMRevisionState)baseline).getDate();
  int lastBuildNum=((SurroundSCMRevisionState)baseline).getBuildNumber();
  Date now=new Date();
  File temporaryFile=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
  listener.getLogger().println(""String_Node_Str"" + lastBuildNum + ""String_Node_Str""+ scm_datetime_formatter.format(lastBuild)+ ""String_Node_Str""+ pluginVersion);
  double countChanges=determineChangeCount(launcher,workspace,listener,lastBuild,now,temporaryFile);
  if (countChanges == 0)   return PollingResult.NO_CHANGES;
 else   if (countChanges < changesThreshold)   return PollingResult.SIGNIFICANT;
  return PollingResult.BUILD_NOW;
}","@Override protected PollingResult compareRemoteRevisionWith(AbstractProject<?,?> project,Launcher launcher,FilePath workspace,TaskListener listener,SCMRevisionState baseline) throws IOException, InterruptedException {
  SimpleDateFormat scm_datetime_formatter=new SimpleDateFormat(SURROUND_DATETIME_FORMAT_STR);
  Date lastBuild=((SurroundSCMRevisionState)baseline).getDate();
  int lastBuildNum=((SurroundSCMRevisionState)baseline).getBuildNumber();
  Date now=new Date();
  File temporaryFile=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
  temporaryFile.deleteOnExit();
  listener.getLogger().println(""String_Node_Str"" + lastBuildNum + ""String_Node_Str""+ scm_datetime_formatter.format(lastBuild)+ ""String_Node_Str""+ pluginVersion);
  temporaryFile.delete();
  double countChanges=determineChangeCount(launcher,workspace,listener,lastBuild,now,temporaryFile);
  if (countChanges == 0)   return PollingResult.NO_CHANGES;
 else   if (countChanges < changesThreshold)   return PollingResult.SIGNIFICANT;
  return PollingResult.BUILD_NOW;
}"
45163,"@Override public boolean checkout(AbstractBuild<?,?> build,Launcher launcher,FilePath workspace,BuildListener listener,File changelogFile) throws IOException, InterruptedException {
  boolean returnValue=true;
  SimpleDateFormat scm_datetime_formatter=new SimpleDateFormat(SURROUND_DATETIME_FORMAT_STR_2);
  if (server != null)   listener.getLogger().println(""String_Node_Str"" + server);
  Date currentDate=new Date();
  ArgumentListBuilder cmd=new ArgumentListBuilder();
  cmd.add(getSurroundSCMExecutable());
  cmd.add(""String_Node_Str"");
  cmd.add(""String_Node_Str"");
  cmd.add(""String_Node_Str"");
  cmd.addMasked(""String_Node_Str"".concat(userName).concat(""String_Node_Str"").concat(password));
  cmd.add(""String_Node_Str"".concat(server).concat(""String_Node_Str"").concat(serverPort));
  cmd.add(""String_Node_Str"".concat(branch));
  cmd.add(""String_Node_Str"".concat(repository));
  cmd.add(""String_Node_Str"".concat(workspace.getRemote()));
  cmd.add(""String_Node_Str"");
  cmd.add(""String_Node_Str"" + scm_datetime_formatter.format(currentDate));
  int cmdResult=launcher.launch().cmds(cmd).envs(new String[0]).stdin(null).stdout(listener.getLogger()).pwd(workspace).join();
  if (cmdResult == 0) {
    final Run<?,?> lastBuild=build.getPreviousBuild();
    final Date lastBuildDate;
    if (lastBuild == null) {
      lastBuildDate=new Date();
      lastBuildDate.setTime(0);
      listener.getLogger().print(""String_Node_Str"");
    }
 else     lastBuildDate=lastBuild.getTimestamp().getTime();
    SurroundSCMRevisionState scmRevisionState=new SurroundSCMRevisionState(currentDate,build.getNumber());
    build.addAction(scmRevisionState);
    listener.getLogger().println(""String_Node_Str"" + build.getNumber() + ""String_Node_Str""+ scm_datetime_formatter.format(currentDate)+ ""String_Node_Str""+ pluginVersion);
    returnValue=captureChangeLog(launcher,workspace,listener,lastBuildDate,currentDate,changelogFile);
  }
 else   returnValue=false;
  listener.getLogger().println(""String_Node_Str"");
  return returnValue;
}","@Override public boolean checkout(AbstractBuild<?,?> build,Launcher launcher,FilePath workspace,BuildListener listener,File changelogFile) throws IOException, InterruptedException {
  boolean returnValue=true;
  SimpleDateFormat scm_datetime_formatter=new SimpleDateFormat(SURROUND_DATETIME_FORMAT_STR_2);
  if (server != null)   listener.getLogger().println(""String_Node_Str"" + server);
  Date currentDate=new Date();
  ArgumentListBuilder cmd=new ArgumentListBuilder();
  cmd.add(getSurroundSCMExecutable());
  cmd.add(""String_Node_Str"");
  cmd.add(""String_Node_Str"");
  cmd.add(""String_Node_Str"");
  cmd.addMasked(""String_Node_Str"".concat(userName).concat(""String_Node_Str"").concat(password));
  if (rsaKeyPath != null && !rsaKeyPath.isEmpty()) {
    cmd.add(""String_Node_Str"".concat(rsaKeyPath));
  }
 else {
    cmd.add(""String_Node_Str"".concat(server).concat(""String_Node_Str"").concat(serverPort));
  }
  cmd.add(""String_Node_Str"".concat(branch));
  cmd.add(""String_Node_Str"".concat(repository));
  cmd.add(""String_Node_Str"".concat(workspace.getRemote()));
  cmd.add(""String_Node_Str"");
  cmd.add(""String_Node_Str"" + scm_datetime_formatter.format(currentDate));
  int cmdResult=launcher.launch().cmds(cmd).envs(new String[0]).stdin(null).stdout(listener.getLogger()).pwd(workspace).join();
  if (cmdResult == 0) {
    final Run<?,?> lastBuild=build.getPreviousBuild();
    final Date lastBuildDate;
    if (lastBuild == null) {
      lastBuildDate=new Date();
      lastBuildDate.setTime(0);
      listener.getLogger().print(""String_Node_Str"");
    }
 else     lastBuildDate=lastBuild.getTimestamp().getTime();
    SurroundSCMRevisionState scmRevisionState=new SurroundSCMRevisionState(currentDate,build.getNumber());
    build.addAction(scmRevisionState);
    listener.getLogger().println(""String_Node_Str"" + build.getNumber() + ""String_Node_Str""+ scm_datetime_formatter.format(currentDate)+ ""String_Node_Str""+ pluginVersion);
    returnValue=captureChangeLog(launcher,workspace,listener,lastBuildDate,currentDate,changelogFile);
  }
 else   returnValue=false;
  listener.getLogger().println(""String_Node_Str"");
  return returnValue;
}"
45164,"private double determineChangeCount(Launcher launcher,FilePath workspace,TaskListener listener,Date lastBuildDate,Date currentDate,File changelogFile) throws IOException, InterruptedException {
  SimpleDateFormat scm_datetime_formatter=new SimpleDateFormat(SURROUND_DATETIME_FORMAT_STR);
  double changesCount=0;
  if (server != null)   listener.getLogger().println(""String_Node_Str"" + server);
  String dateRange=scm_datetime_formatter.format(lastBuildDate);
  dateRange=dateRange.concat(""String_Node_Str"");
  dateRange=dateRange.concat(scm_datetime_formatter.format(currentDate));
  ArgumentListBuilder cmd=new ArgumentListBuilder();
  cmd.add(getSurroundSCMExecutable());
  cmd.add(""String_Node_Str"");
  cmd.add(""String_Node_Str"");
  cmd.add(""String_Node_Str"".concat(dateRange));
  cmd.addMasked(""String_Node_Str"".concat(userName).concat(""String_Node_Str"").concat(password));
  cmd.add(""String_Node_Str"".concat(server).concat(""String_Node_Str"").concat(serverPort));
  cmd.add(""String_Node_Str"".concat(branch));
  cmd.add(""String_Node_Str"".concat(repository));
  cmd.add(""String_Node_Str"");
  listener.getLogger().println(""String_Node_Str"" + cmd.toString() + ""String_Node_Str""+ dateRange+ ""String_Node_Str"");
  FileOutputStream os=new FileOutputStream(changelogFile);
  try {
    BufferedOutputStream bos=new BufferedOutputStream(os);
    try {
      int cmdResult=launcher.launch().cmds(cmd).envs(new String[0]).stdin(null).stdout(bos).pwd(workspace).join();
      if (cmdResult != 0) {
        listener.fatalError(""String_Node_Str"" + cmdResult);
      }
    }
  finally {
      bos.close();
    }
  }
  finally {
    os.close();
  }
  BufferedReader br=null;
  String line=null;
  try {
    br=new BufferedReader(new FileReader(changelogFile));
    line=br.readLine();
    if (line != null) {
      listener.getLogger().println(line);
      String num=line.substring(6);
      try {
        changesCount=Double.valueOf(num.trim()).doubleValue();
      }
 catch (      NumberFormatException nfe) {
        listener.fatalError(""String_Node_Str"" + nfe.getMessage());
      }
    }
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
  }
  listener.getLogger().println(""String_Node_Str"" + changesCount);
  return changesCount;
}","private double determineChangeCount(Launcher launcher,FilePath workspace,TaskListener listener,Date lastBuildDate,Date currentDate,File changelogFile) throws IOException, InterruptedException {
  SimpleDateFormat scm_datetime_formatter=new SimpleDateFormat(SURROUND_DATETIME_FORMAT_STR);
  double changesCount=0;
  if (server != null)   listener.getLogger().println(""String_Node_Str"" + server);
  String dateRange=scm_datetime_formatter.format(lastBuildDate);
  dateRange=dateRange.concat(""String_Node_Str"");
  dateRange=dateRange.concat(scm_datetime_formatter.format(currentDate));
  ArgumentListBuilder cmd=new ArgumentListBuilder();
  cmd.add(getSurroundSCMExecutable());
  cmd.add(""String_Node_Str"");
  cmd.add(""String_Node_Str"");
  cmd.add(""String_Node_Str"".concat(dateRange));
  cmd.addMasked(""String_Node_Str"".concat(userName).concat(""String_Node_Str"").concat(password));
  if (rsaKeyPath != null && !rsaKeyPath.isEmpty()) {
    cmd.add(""String_Node_Str"".concat(rsaKeyPath));
  }
 else {
    cmd.add(""String_Node_Str"".concat(server).concat(""String_Node_Str"").concat(serverPort));
  }
  cmd.add(""String_Node_Str"".concat(branch));
  cmd.add(""String_Node_Str"".concat(repository));
  cmd.add(""String_Node_Str"");
  listener.getLogger().println(""String_Node_Str"" + cmd.toString() + ""String_Node_Str""+ dateRange+ ""String_Node_Str"");
  FileOutputStream os=new FileOutputStream(changelogFile);
  try {
    BufferedOutputStream bos=new BufferedOutputStream(os);
    try {
      int cmdResult=launcher.launch().cmds(cmd).envs(new String[0]).stdin(null).stdout(bos).pwd(workspace).join();
      if (cmdResult != 0) {
        listener.fatalError(""String_Node_Str"" + cmdResult);
      }
    }
  finally {
      bos.close();
    }
  }
  finally {
    os.close();
  }
  BufferedReader br=null;
  String line=null;
  try {
    br=new BufferedReader(new FileReader(changelogFile));
    line=br.readLine();
    if (line != null) {
      listener.getLogger().println(line);
      String num=line.substring(6);
      try {
        changesCount=Double.valueOf(num.trim()).doubleValue();
      }
 catch (      NumberFormatException nfe) {
        listener.fatalError(""String_Node_Str"" + nfe.getMessage());
      }
    }
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
  }
  listener.getLogger().println(""String_Node_Str"" + changesCount);
  return changesCount;
}"
45165,"private boolean captureChangeLog(Launcher launcher,FilePath workspace,BuildListener listener,Date lastBuildDate,Date currentDate,File changelogFile) throws IOException, InterruptedException {
  boolean result=true;
  SimpleDateFormat scm_datetime_formatter=new SimpleDateFormat(SURROUND_DATETIME_FORMAT_STR);
  String dateRange=scm_datetime_formatter.format(lastBuildDate);
  dateRange=dateRange.concat(""String_Node_Str"");
  dateRange=dateRange.concat(scm_datetime_formatter.format(currentDate));
  ArgumentListBuilder cmd=new ArgumentListBuilder();
  cmd.add(getSurroundSCMExecutable());
  cmd.add(""String_Node_Str"");
  cmd.add(""String_Node_Str"");
  cmd.add(""String_Node_Str"".concat(dateRange));
  cmd.addMasked(""String_Node_Str"".concat(userName).concat(""String_Node_Str"").concat(password));
  cmd.add(""String_Node_Str"".concat(server).concat(""String_Node_Str"").concat(serverPort));
  cmd.add(""String_Node_Str"".concat(branch));
  cmd.add(""String_Node_Str"".concat(repository));
  cmd.add(""String_Node_Str"");
  FileOutputStream os=new FileOutputStream(changelogFile);
  try {
    BufferedOutputStream bos=new BufferedOutputStream(os);
    PrintWriter writer=new PrintWriter(new FileWriter(changelogFile));
    try {
      int cmdResult=launcher.launch().cmds(cmd).envs(new String[0]).stdin(null).stdout(bos).pwd(workspace).join();
      if (cmdResult != 0) {
        listener.fatalError(""String_Node_Str"" + cmdResult);
        result=false;
      }
    }
  finally {
      writer.close();
      bos.close();
    }
  }
  finally {
    os.close();
  }
  listener.getLogger().println(""String_Node_Str"");
  listener.getLogger().println(""String_Node_Str"" + changelogFile.getAbsolutePath());
  return result;
}","private boolean captureChangeLog(Launcher launcher,FilePath workspace,BuildListener listener,Date lastBuildDate,Date currentDate,File changelogFile) throws IOException, InterruptedException {
  boolean result=true;
  SimpleDateFormat scm_datetime_formatter=new SimpleDateFormat(SURROUND_DATETIME_FORMAT_STR);
  String dateRange=scm_datetime_formatter.format(lastBuildDate);
  dateRange=dateRange.concat(""String_Node_Str"");
  dateRange=dateRange.concat(scm_datetime_formatter.format(currentDate));
  ArgumentListBuilder cmd=new ArgumentListBuilder();
  cmd.add(getSurroundSCMExecutable());
  cmd.add(""String_Node_Str"");
  cmd.add(""String_Node_Str"");
  cmd.add(""String_Node_Str"".concat(dateRange));
  cmd.addMasked(""String_Node_Str"".concat(userName).concat(""String_Node_Str"").concat(password));
  if (rsaKeyPath != null && !rsaKeyPath.isEmpty()) {
    cmd.add(""String_Node_Str"".concat(rsaKeyPath));
  }
 else {
    cmd.add(""String_Node_Str"".concat(server).concat(""String_Node_Str"").concat(serverPort));
  }
  cmd.add(""String_Node_Str"".concat(branch));
  cmd.add(""String_Node_Str"".concat(repository));
  cmd.add(""String_Node_Str"");
  FileOutputStream os=new FileOutputStream(changelogFile);
  try {
    BufferedOutputStream bos=new BufferedOutputStream(os);
    PrintWriter writer=new PrintWriter(new FileWriter(changelogFile));
    try {
      int cmdResult=launcher.launch().cmds(cmd).envs(new String[0]).stdin(null).stdout(bos).pwd(workspace).join();
      if (cmdResult != 0) {
        listener.fatalError(""String_Node_Str"" + cmdResult);
        result=false;
      }
    }
  finally {
      writer.close();
      bos.close();
    }
  }
  finally {
    os.close();
  }
  listener.getLogger().println(""String_Node_Str"");
  listener.getLogger().println(""String_Node_Str"" + changelogFile.getAbsolutePath());
  return result;
}"
45166,"/** 
 * Returns a list of avaliable apps
 * @throws URISyntaxException 
 */
@RequestMapping(value=""String_Node_Str"",method=RequestMethod.GET) public String getAppStoreListForPlatform(@PathVariable int platform,@RequestParam(required=true) int listType,@RequestParam(required=false) String category,@RequestParam(required=true) int count,Model model) throws URISyntaxException {
  logger.info(""String_Node_Str"" + platform + ""String_Node_Str""+ listType+ ""String_Node_Str""+ count);
  AppStoreList appStoreList=appStoreService.getAppStoreListForPlatform(count,listType,platform,category);
  model.addAttribute(""String_Node_Str"",gson.toJson(appStoreList));
  return ""String_Node_Str"";
}","/** 
 * Returns a list of avaliable apps
 * @throws URISyntaxException 
 */
@RequestMapping(value=""String_Node_Str"",method=RequestMethod.GET) public String getAppStoreListForPlatform(@PathVariable int platform,@RequestParam(required=true) int listType,@RequestParam(required=true) int count,Model model) throws URISyntaxException {
  logger.info(""String_Node_Str"" + platform + ""String_Node_Str""+ listType+ ""String_Node_Str""+ count);
  AppStoreList appStoreList=appStoreService.getAppStoreListForPlatform(count,listType,platform);
  model.addAttribute(""String_Node_Str"",gson.toJson(appStoreList));
  return ""String_Node_Str"";
}"
45167,"@Test public void testWithOnlyDateAsInput(){
  UkaProgramService service=new UkaProgramService();
  UkaProgramRepository mock=Mockito.mock(UkaProgramRepository.class);
  service.setUkaProgramRepository(mock);
  Date now=new Date();
  service.getUkaProgram(now,null,null,null,null);
  Mockito.verify(mock).getUkaProgram(now);
}","@Test public void testWithOnlyDateAsInput(){
  UkaProgramService service=new UkaProgramService();
  UkaProgramRepository mock=Mockito.mock(UkaProgramRepository.class);
  service.setUkaProgramRepository(mock);
  Date now=new Date();
  service.getUkaProgram(""String_Node_Str"",now,null,null,null,null);
  Mockito.verify(mock).getUkaProgram(now);
}"
45168,"@Test public void testWithDateFromAndTOAsInput(){
  UkaProgramService service=new UkaProgramService();
  UkaProgramRepository mock=Mockito.mock(UkaProgramRepository.class);
  service.setUkaProgramRepository(mock);
  Date from=new Date();
  Date to=new Date(from.getTime() + 8640000);
  service.getUkaProgram(null,from,to,false,null);
  Mockito.verify(mock).getUkaProgram(from,to);
}","@Test public void testWithDateFromAndTOAsInput(){
  UkaProgramService service=new UkaProgramService();
  UkaProgramRepository mock=Mockito.mock(UkaProgramRepository.class);
  service.setUkaProgramRepository(mock);
  Date from=new Date();
  Date to=new Date(from.getTime() + 8640000);
  service.getUkaProgram(""String_Node_Str"",null,from,to,false,null);
  Mockito.verify(mock).getUkaProgram(from,to);
}"
45169,"@Test public void testWithAllIsTrueAsInput(){
  UkaProgramService service=new UkaProgramService();
  UkaProgramRepository mock=Mockito.mock(UkaProgramRepository.class);
  service.setUkaProgramRepository(mock);
  service.getUkaProgram(null,null,null,true,null);
  Mockito.verify(mock).getUkaProgram();
}","@Test public void testWithAllIsTrueAsInput(){
  UkaProgramService service=new UkaProgramService();
  UkaProgramRepository mock=Mockito.mock(UkaProgramRepository.class);
  service.setUkaProgramRepository(mock);
  service.getUkaProgram(""String_Node_Str"",null,null,null,true,null);
  Mockito.verify(mock).getUkaProgram();
}"
45170,"@Test public void testWithDateFromAndTOAndDateAsInput(){
  UkaProgramService service=new UkaProgramService();
  UkaProgramRepository mock=Mockito.mock(UkaProgramRepository.class);
  service.setUkaProgramRepository(mock);
  Date from=new Date();
  Date to=new Date(from.getTime() + 8640000);
  Date now=new Date();
  service.getUkaProgram(now,from,to,false,null);
  Mockito.verify(mock).getUkaProgram(now);
}","@Test public void testWithDateFromAndTOAndDateAsInput(){
  UkaProgramService service=new UkaProgramService();
  UkaProgramRepository mock=Mockito.mock(UkaProgramRepository.class);
  service.setUkaProgramRepository(mock);
  Date from=new Date();
  Date to=new Date(from.getTime() + 8640000);
  Date now=new Date();
  service.getUkaProgram(""String_Node_Str"",now,from,to,false,null);
  Mockito.verify(mock).getUkaProgram(now);
}"
45171,"@Test public void testWithOnlyPlaceAsInput(){
  UkaProgramService service=new UkaProgramService();
  UkaProgramRepository mock=Mockito.mock(UkaProgramRepository.class);
  service.setUkaProgramRepository(mock);
  String place=""String_Node_Str"";
  service.getUkaProgram(null,null,null,false,place);
  Mockito.verify(mock).getUkaProgram(place);
}","@Test public void testWithOnlyPlaceAsInput(){
  UkaProgramService service=new UkaProgramService();
  UkaProgramRepository mock=Mockito.mock(UkaProgramRepository.class);
  service.setUkaProgramRepository(mock);
  String place=""String_Node_Str"";
  service.getUkaProgram(""String_Node_Str"",null,null,null,false,place);
  Mockito.verify(mock).getUkaProgram(place);
}"
45172,"@Test public void testWithDateFromAndTOAndPlaceAsInput(){
  UkaProgramService service=new UkaProgramService();
  UkaProgramRepository mock=Mockito.mock(UkaProgramRepository.class);
  service.setUkaProgramRepository(mock);
  Date from=new Date();
  Date to=new Date(from.getTime() + 8640000);
  String place=""String_Node_Str"";
  service.getUkaProgram(null,from,to,false,place);
  Mockito.verify(mock).getUkaProgram(from,to,place);
}","@Test public void testWithDateFromAndTOAndPlaceAsInput(){
  UkaProgramService service=new UkaProgramService();
  UkaProgramRepository mock=Mockito.mock(UkaProgramRepository.class);
  service.setUkaProgramRepository(mock);
  Date from=new Date();
  Date to=new Date(from.getTime() + 8640000);
  String place=""String_Node_Str"";
  service.getUkaProgram(""String_Node_Str"",null,from,to,false,place);
  Mockito.verify(mock).getUkaProgram(from,to,place);
}"
45173,"@Test public void testWithDateAndPlaceAsInput(){
  UkaProgramService service=new UkaProgramService();
  UkaProgramRepository mock=Mockito.mock(UkaProgramRepository.class);
  service.setUkaProgramRepository(mock);
  Date now=new Date();
  String place=""String_Node_Str"";
  service.getUkaProgram(now,null,null,false,place);
  Mockito.verify(mock).getUkaProgram(now,place);
}","@Test public void testWithDateAndPlaceAsInput(){
  UkaProgramService service=new UkaProgramService();
  UkaProgramRepository mock=Mockito.mock(UkaProgramRepository.class);
  service.setUkaProgramRepository(mock);
  Date now=new Date();
  String place=""String_Node_Str"";
  service.getUkaProgram(""String_Node_Str"",now,null,null,false,place);
  Mockito.verify(mock).getUkaProgram(now,place);
}"
45174,"@RequestMapping(value=""String_Node_Str"",method=RequestMethod.GET) public ModelAndView getAllFacts(@PathVariable(""String_Node_Str"") String locationName){
  logger.info(""String_Node_Str"" + locationName + ""String_Node_Str"");
  List<Fact> facts=service.getAllFacts(locationName);
  return new ModelAndView(""String_Node_Str"",""String_Node_Str"",gson.toJson(facts));
}","@RequestMapping(value=""String_Node_Str"",method=RequestMethod.GET) public ModelMap getAllFacts(@PathVariable(""String_Node_Str"") String locationName){
  logger.info(""String_Node_Str"" + locationName + ""String_Node_Str"");
  ModelMap model=new ModelMap();
  List<Fact> facts=service.getAllFacts(locationName);
  model.addAttribute(facts);
  return model;
}"
45175,"public List<Fact> getAllFacts(String locationName){
  Map<Integer,Fact> facts=new HashMap<Integer,Fact>();
  jdbcTemplate.query(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"",new FactRowMapper(facts),locationName);
  return new ArrayList<Fact>(facts.values());
}","public List<Fact> getAllFacts(String locationName){
  List<Fact> facts=jdbcTemplate.query(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"",new FactRowMapper(),locationName);
  return facts;
}"
45176,"@Override public Fact mapRow(ResultSet rs,int rowNum) throws SQLException {
  Fact fact=new Fact();
  fact.setFactId(rs.getInt(""String_Node_Str""));
  fact.setLocationId(rs.getInt(""String_Node_Str""));
  fact.setText(rs.getString(""String_Node_Str""));
  if (!facts.containsKey(fact.getFactId())) {
    facts.put(fact.getFactId(),fact);
  }
  return fact;
}","public Fact mapRow(ResultSet rs,int rowNum) throws SQLException {
  Fact fact=new Fact();
  fact.setFactId(rs.getInt(""String_Node_Str""));
  fact.setLocationId(rs.getInt(""String_Node_Str""));
  fact.setText(rs.getString(""String_Node_Str""));
  return fact;
}"
45177,"public ModelAndView save(HttpServletRequest request,HttpServletResponse response,Object command,BindException errors) throws Exception {
  UserForm userForm=(UserForm)command;
  User user=null;
  if (userForm.getId() != null) {
    user=userManager.getUser(userForm.getId());
  }
 else {
    user=new User();
  }
  BeanUtils.copyProperties(userForm,user);
  String password=userForm.getPassword1();
  password=User.getPasswordHash(password);
  user.setPassword(password);
  userManager.saveUser(user);
  return new ModelAndView(this.getSuccessView());
}","public ModelAndView save(HttpServletRequest request,HttpServletResponse response,Object command,BindException errors) throws Exception {
  UserForm userForm=(UserForm)command;
  User user=null;
  if (userForm.getId() != null) {
    user=userManager.getUser(userForm.getId());
  }
 else {
    user=new User();
  }
  BeanUtils.copyProperties(userForm,user);
  String password=userForm.getPassword1();
  if (StringUtils.isNotEmpty(password)) {
    password=User.getPasswordHash(password);
    user.setPassword(password);
  }
  userManager.saveUser(user);
  return new ModelAndView(this.getSuccessView());
}"
45178,"public static void main(String[] args){
  Scanner input=new Scanner(System.in);
  for (int z=1; ; z++) {
    dx=input.nextInt();
    dy=input.nextInt();
    int n=input.nextInt(), q=input.nextInt();
    if ((dx | dy | n| q) == 0)     break;
    System.out.println(""String_Node_Str"" + z + ""String_Node_Str"");
    width=2 * (dx + dy);
    cumulative=new int[width + 1][2 * width + 1];
    for (    int[] row : cumulative)     Arrays.fill(row,0);
    for (int i=0; i < n; i++) {
      int x=input.nextInt(), y=input.nextInt();
      set(x + y,x - y,1);
    }
    for (int i=0; i <= width; i++)     for (int j=-width; j <= width; j++)     set(i,j,get(i - 1,j) + get(i,j - 1) - get(i - 1,j - 1) + get(i,j));
    for (int k=0; k < q; k++) {
      int bestCount=-1;
      int bestX=-1;
      int bestY=-1;
      int d=input.nextInt();
      d=Math.min(d,Math.max(dx,dy));
      for (int y=1; y <= dy; y++) {
        for (int x=1; x <= dx; x++) {
          int count=getWithinDist(x,y,d);
          if (count > bestCount) {
            bestCount=count;
            bestX=x;
            bestY=y;
          }
        }
      }
      System.out.println(bestCount + ""String_Node_Str"" + bestX+ ""String_Node_Str""+ bestY+ ""String_Node_Str"");
    }
  }
}","public static void main(String[] args){
  Scanner input=new Scanner(System.in);
  for (int z=1; ; z++) {
    dx=input.nextInt();
    dy=input.nextInt();
    int n=input.nextInt(), q=input.nextInt();
    if ((dx | dy | n| q) == 0)     break;
    System.out.println(""String_Node_Str"" + z + ""String_Node_Str"");
    width=2 * (dx + dy);
    cumulative=new int[width + 1][2 * width + 1];
    for (    int[] row : cumulative)     Arrays.fill(row,0);
    for (int i=0; i < n; i++) {
      int x=input.nextInt(), y=input.nextInt();
      set(x + y,x - y,1);
    }
    for (int i=0; i <= width; i++)     for (int j=-width; j <= width; j++)     set(i,j,get(i - 1,j) + get(i,j - 1) - get(i - 1,j - 1) + get(i,j));
    for (int k=0; k < q; k++) {
      int bestCount=-1;
      int bestX=-1;
      int bestY=-1;
      int d=input.nextInt();
      d=Math.min(d,dx + dy);
      for (int y=1; y <= dy; y++) {
        for (int x=1; x <= dx; x++) {
          int count=getWithinDist(x,y,d);
          if (count > bestCount) {
            bestCount=count;
            bestX=x;
            bestY=y;
          }
        }
      }
      System.out.println(bestCount + ""String_Node_Str"" + bestX+ ""String_Node_Str""+ bestY+ ""String_Node_Str"");
    }
  }
}"
45179,"public static void main(String[] args){
  Scanner input=new Scanner(System.in);
  for (int z=1; ; z++) {
    a=input.nextInt();
    m=input.nextInt();
    int p=input.nextInt(), q=input.nextInt(), r=input.nextInt(), s=input.nextInt();
    if ((a | m | p| q| r| s) == 0)     break;
    int mt=1;
    Answer best=null;
    for (int t=0; ; t++, mt*=m) {
      int bMin=(r + a - 1 - p * mt) / a, bMax=(s - q * mt) / a;
      if (bMax < bMin || bMax < 0)       break;
      Answer ans=new Answer(inBetween(digits(bMin,m,t + 1),digits(bMax,m,t + 1)));
      if (ans.apply(p) >= r && ans.apply(q) <= s && (best == null || ans.compareTo(best) < 0))       best=ans;
    }
    System.out.println(""String_Node_Str"" + z + ""String_Node_Str""+ ((best == null) ? ""String_Node_Str"" : best.toString()));
  }
}","public static void main(String[] args){
  Scanner input=new Scanner(System.in);
  for (int z=1; ; z++) {
    a=input.nextInt();
    m=input.nextInt();
    int p=input.nextInt(), q=input.nextInt(), r=input.nextInt(), s=input.nextInt();
    if ((a | m | p| q| r| s) == 0)     break;
    int mt=1;
    Answer best=null;
    for (int t=0; ; t++, mt*=m) {
      int bMin=(r + a - 1 - p * mt) / a, bMax=(s - q * mt) / a;
      if (bMax < bMin || bMax < 0 || (t > 0 && m == 1))       break;
      Answer ans=new Answer(inBetween(digits(bMin,m,t + 1),digits(bMax,m,t + 1)));
      if (ans.apply(p) >= r && ans.apply(q) <= s && (best == null || ans.compareTo(best) < 0))       best=ans;
    }
    System.out.println(""String_Node_Str"" + z + ""String_Node_Str""+ ((best == null) ? ""String_Node_Str"" : best.toString()));
  }
}"
45180,"private boolean isSubredditRequest(String path){
  boolean isSubredditRequest=false;
  log(""String_Node_Str"" + path);
  if (path.equalsIgnoreCase(""String_Node_Str"")) {
    isSubredditRequest=true;
  }
  return isSubredditRequest;
}","private boolean isSubredditRequest(String path){
  boolean isSubredditRequest=false;
  log(""String_Node_Str"" + path);
  if (path != null && path.contains(""String_Node_Str"")) {
    isSubredditRequest=true;
  }
  return isSubredditRequest;
}"
45181,"public static void main(String[] args) throws Exception {
  if (args.length < 2) {
    System.out.println(""String_Node_Str"");
    System.exit(0);
  }
  String appPropertiesFile=args[0];
  String action=args[1];
  System.err.println(""String_Node_Str"" + appPropertiesFile);
  NewsRack.startup(null,appPropertiesFile);
  _db=NewsRack.getDBInterface();
  if (action.equals(""String_Node_Str"")) {
    updateCountsForAllIssues();
  }
 else   if (action.equals(""String_Node_Str"")) {
    findNewsItemsWithMissingFiles(Long.parseLong(args[2]));
  }
 else   if (action.equals(""String_Node_Str"")) {
    changeNewsIndexDate(Long.parseLong(args[2]),newsrack.database.sql.SQL_NewsItem.DATE_PARSER.get().parse(args[3]));
  }
 else   if (action.equals(""String_Node_Str"")) {
    addNewsItemsToCat(Long.parseLong(args[2]),args[3]);
  }
 else   if (action.equals(""String_Node_Str"")) {
    Date sd=newsrack.web.BrowseAction.DATE_PARSER.get().parse(args[3]);
    Date ed=newsrack.web.BrowseAction.DATE_PARSER.get().parse(args[4]);
    boolean refetch=(args.length > 4) && (args[5].equals(""String_Node_Str"")) ? true : false;
    canonicalizeURLs(Long.parseLong(args[2]),sd,ed,refetch);
  }
 else   if (action.equals(""String_Node_Str"")) {
    Date sd=newsrack.web.BrowseAction.DATE_PARSER.get().parse(args[3]);
    Date ed=newsrack.web.BrowseAction.DATE_PARSER.get().parse(args[4]);
    boolean refetch=(args.length > 4) && (args[5].equals(""String_Node_Str"")) ? true : false;
    canonicalizeURLs(args[2],sd,ed,refetch);
  }
 else   if (action.equals(""String_Node_Str"")) {
    refetchNewsForNewsIndex(Long.parseLong(args[2]),Long.parseLong(args[3]));
  }
 else   if (action.equals(""String_Node_Str"")) {
    Date sd=newsrack.web.BrowseAction.DATE_PARSER.get().parse(args[2]);
    Date ed=newsrack.web.BrowseAction.DATE_PARSER.get().parse(args[3]);
    Long minLength=Long.parseLong(args[4]);
    for (int i=5; i < args.length; i++) {
      Long fk=Long.parseLong(args[i]);
      refetchFeedInDateRange(fk,minLength,sd,ed);
    }
  }
 else   if (action.equals(""String_Node_Str"")) {
    Date sd=newsrack.web.BrowseAction.DATE_PARSER.get().parse(args[2]);
    Date ed=newsrack.web.BrowseAction.DATE_PARSER.get().parse(args[3]);
    Long minLength=Long.parseLong(args[4]);
    refetchAllFeedsInDateRange(minLength,sd,ed);
  }
 else   if (action.equals(""String_Node_Str"")) {
    refilterNewsForNewsIndex(Long.parseLong(args[2]),Long.parseLong(args[3]));
  }
 else   if (action.equals(""String_Node_Str"")) {
    Date sd=newsrack.web.BrowseAction.DATE_PARSER.get().parse(args[2]);
    Date ed=newsrack.web.BrowseAction.DATE_PARSER.get().parse(args[3]);
    Long minLength=Long.parseLong(args[4]);
    for (int i=5; i < args.length; i++) {
      Long fk=Long.parseLong(args[i]);
      refilterFeedNewsInDateRange(fk,minLength,sd,ed);
    }
  }
 else   if (action.equals(""String_Node_Str"")) {
    Long tKey=Long.parseLong(args[2]);
    Date sd=newsrack.web.BrowseAction.DATE_PARSER.get().parse(args[3]);
    Date ed=newsrack.web.BrowseAction.DATE_PARSER.get().parse(args[4]);
    reclassifyNewsForTopic(tKey,sd,ed);
  }
 else   if (action.equals(""String_Node_Str"")) {
    assignNestedSetIds();
  }
 else   if (action.equals(""String_Node_Str"")) {
    outputLocalFilePathsForCategorizedNews(Long.parseLong(args[2]));
  }
 else   if (action.equals(""String_Node_Str"")) {
    revalidateUsers(args.length > 2 ? Long.parseLong(args[2]) : null);
  }
 else   if (action.equals(""String_Node_Str"")) {
    revalidateUsers(args.length > 2 ? _db.getUser(args[2]).getKey() : null);
  }
 else   if (action.equals(""String_Node_Str"")) {
    exportNews(Long.parseLong(args[2]),Integer.parseInt(args[3]));
  }
 else   if (action.equals(""String_Node_Str"")) {
    importNews(args[2]);
  }
 else {
    System.out.println(""String_Node_Str"" + action);
  }
  System.out.flush();
  System.err.println(""String_Node_Str"");
  System.exit(0);
}","public static void main(String[] args) throws Exception {
  if (args.length < 2) {
    System.out.println(""String_Node_Str"");
    System.exit(0);
  }
  String appPropertiesFile=args[0];
  String action=args[1];
  System.err.println(""String_Node_Str"" + appPropertiesFile);
  NewsRack.startup(null,appPropertiesFile);
  _db=NewsRack.getDBInterface();
  if (action.equals(""String_Node_Str"")) {
    updateCountsForAllIssues();
  }
 else   if (action.equals(""String_Node_Str"")) {
    findNewsItemsWithMissingFiles(Long.parseLong(args[2]));
  }
 else   if (action.equals(""String_Node_Str"")) {
    changeNewsIndexDate(Long.parseLong(args[2]),newsrack.web.BrowseAction.DATE_PARSER.get().parse(args[3]));
  }
 else   if (action.equals(""String_Node_Str"")) {
    addNewsItemsToCat(Long.parseLong(args[2]),args[3]);
  }
 else   if (action.equals(""String_Node_Str"")) {
    Date sd=newsrack.web.BrowseAction.DATE_PARSER.get().parse(args[3]);
    Date ed=newsrack.web.BrowseAction.DATE_PARSER.get().parse(args[4]);
    boolean refetch=(args.length > 4) && (args[5].equals(""String_Node_Str"")) ? true : false;
    canonicalizeURLs(Long.parseLong(args[2]),sd,ed,refetch);
  }
 else   if (action.equals(""String_Node_Str"")) {
    Date sd=newsrack.web.BrowseAction.DATE_PARSER.get().parse(args[3]);
    Date ed=newsrack.web.BrowseAction.DATE_PARSER.get().parse(args[4]);
    boolean refetch=(args.length > 4) && (args[5].equals(""String_Node_Str"")) ? true : false;
    canonicalizeURLs(args[2],sd,ed,refetch);
  }
 else   if (action.equals(""String_Node_Str"")) {
    refetchNewsForNewsIndex(Long.parseLong(args[2]),Long.parseLong(args[3]));
  }
 else   if (action.equals(""String_Node_Str"")) {
    Date sd=newsrack.web.BrowseAction.DATE_PARSER.get().parse(args[2]);
    Date ed=newsrack.web.BrowseAction.DATE_PARSER.get().parse(args[3]);
    Long minLength=Long.parseLong(args[4]);
    for (int i=5; i < args.length; i++) {
      Long fk=Long.parseLong(args[i]);
      refetchFeedInDateRange(fk,minLength,sd,ed);
    }
  }
 else   if (action.equals(""String_Node_Str"")) {
    Date sd=newsrack.web.BrowseAction.DATE_PARSER.get().parse(args[2]);
    Date ed=newsrack.web.BrowseAction.DATE_PARSER.get().parse(args[3]);
    Long minLength=Long.parseLong(args[4]);
    refetchAllFeedsInDateRange(minLength,sd,ed);
  }
 else   if (action.equals(""String_Node_Str"")) {
    refilterNewsForNewsIndex(Long.parseLong(args[2]),Long.parseLong(args[3]));
  }
 else   if (action.equals(""String_Node_Str"")) {
    Date sd=newsrack.web.BrowseAction.DATE_PARSER.get().parse(args[2]);
    Date ed=newsrack.web.BrowseAction.DATE_PARSER.get().parse(args[3]);
    Long minLength=Long.parseLong(args[4]);
    for (int i=5; i < args.length; i++) {
      Long fk=Long.parseLong(args[i]);
      refilterFeedNewsInDateRange(fk,minLength,sd,ed);
    }
  }
 else   if (action.equals(""String_Node_Str"")) {
    Long tKey=Long.parseLong(args[2]);
    Date sd=newsrack.web.BrowseAction.DATE_PARSER.get().parse(args[3]);
    Date ed=newsrack.web.BrowseAction.DATE_PARSER.get().parse(args[4]);
    reclassifyNewsForTopic(tKey,sd,ed);
  }
 else   if (action.equals(""String_Node_Str"")) {
    assignNestedSetIds();
  }
 else   if (action.equals(""String_Node_Str"")) {
    outputLocalFilePathsForCategorizedNews(Long.parseLong(args[2]));
  }
 else   if (action.equals(""String_Node_Str"")) {
    revalidateUsers(args.length > 2 ? Long.parseLong(args[2]) : null);
  }
 else   if (action.equals(""String_Node_Str"")) {
    revalidateUsers(args.length > 2 ? _db.getUser(args[2]).getKey() : null);
  }
 else   if (action.equals(""String_Node_Str"")) {
    exportNews(Long.parseLong(args[2]),Integer.parseInt(args[3]));
  }
 else   if (action.equals(""String_Node_Str"")) {
    importNews(args[2]);
  }
 else {
    System.out.println(""String_Node_Str"" + action);
  }
  System.out.flush();
  System.err.println(""String_Node_Str"");
  System.exit(0);
}"
45182,"public void invalidateRSSFeed(){
  if (_outputFeed == null)   readInCurrentRSSFeed();
  _outputFeed.invalidate();
  _numItemsSinceLastDownload=0;
  if (!isLeafCategory()) {
    for (    Category c : _children)     c.invalidateRSSFeed();
  }
}","public void invalidateRSSFeed(){
  if (_outputFeed == null)   initFeed();
  _outputFeed.invalidate();
  _numItemsSinceLastDownload=0;
  if (!isLeafCategory()) {
    for (    Category c : _children)     c.invalidateRSSFeed();
  }
}"
45183,"public void updateRSSFeed(){
  if (_outputFeed == null)   initFeed();
  _outputFeed.update();
  _numItemsSinceLastDownload=_outputFeed.getNumItemsSinceLastDownload();
  if (!isLeafCategory()) {
    for (    Category c : _children)     c.updateRSSFeed();
  }
}","public void updateRSSFeed(){
  if (_outputFeed == null)   readInCurrentRSSFeed();
  _outputFeed.update();
  _numItemsSinceLastDownload=_outputFeed.getNumItemsSinceLastDownload();
  if (!isLeafCategory()) {
    for (    Category c : _children)     c.updateRSSFeed();
  }
}"
45184,"public void invalidateRSSFeed(){
  if (_outputFeed == null)   readInCurrentRSSFeed();
  _outputFeed.invalidate();
  _numItemsSinceLastDownload=0;
  for (  Category c : getCategories())   c.invalidateRSSFeed();
}","public void invalidateRSSFeed(){
  if (_outputFeed == null)   initFeed();
  _outputFeed.invalidate();
  _numItemsSinceLastDownload=0;
  for (  Category c : getCategories())   c.invalidateRSSFeed();
}"
45185,"public void updateRSSFeed(){
  if (_outputFeed == null)   initFeed();
  _outputFeed.update();
  _numItemsSinceLastDownload=_outputFeed.getNumItemsSinceLastDownload();
  for (  Category c : getCategories())   c.updateRSSFeed();
}","public void updateRSSFeed(){
  if (_outputFeed == null)   readInCurrentRSSFeed();
  _outputFeed.update();
  _numItemsSinceLastDownload=_outputFeed.getNumItemsSinceLastDownload();
  for (  Category c : getCategories())   c.updateRSSFeed();
}"
45186,"public void updateRSSFeed(){
  _outputFeed.update();
  _numItemsSinceLastDownload=_outputFeed.getNumItemsSinceLastDownload();
  if (!isLeafCategory()) {
    for (    Category c : _children)     c.updateRSSFeed();
  }
}","public void updateRSSFeed(){
  if (_outputFeed == null)   initFeed();
  _outputFeed.update();
  _numItemsSinceLastDownload=_outputFeed.getNumItemsSinceLastDownload();
  if (!isLeafCategory()) {
    for (    Category c : _children)     c.updateRSSFeed();
  }
}"
45187,"public void invalidateRSSFeed(){
  if (_outputFeed == null)   initFeed();
  _outputFeed.invalidate();
  _numItemsSinceLastDownload=0;
  if (!isLeafCategory()) {
    for (    Category c : _children)     c.invalidateRSSFeed();
  }
}","public void invalidateRSSFeed(){
  if (_outputFeed == null)   readInCurrentRSSFeed();
  _outputFeed.invalidate();
  _numItemsSinceLastDownload=0;
  if (!isLeafCategory()) {
    for (    Category c : _children)     c.invalidateRSSFeed();
  }
}"
45188,"public void invalidateRSSFeed(){
  if (_outputFeed == null)   initFeed();
  _outputFeed.invalidate();
  _numItemsSinceLastDownload=0;
  for (  Category c : getCategories())   c.invalidateRSSFeed();
}","public void invalidateRSSFeed(){
  if (_outputFeed == null)   readInCurrentRSSFeed();
  _outputFeed.invalidate();
  _numItemsSinceLastDownload=0;
  for (  Category c : getCategories())   c.invalidateRSSFeed();
}"
45189,"public void updateRSSFeed(){
  _outputFeed.update();
  _numItemsSinceLastDownload=_outputFeed.getNumItemsSinceLastDownload();
  for (  Category c : getCategories())   c.updateRSSFeed();
}","public void updateRSSFeed(){
  if (_outputFeed == null)   initFeed();
  _outputFeed.update();
  _numItemsSinceLastDownload=_outputFeed.getNumItemsSinceLastDownload();
  for (  Category c : getCategories())   c.updateRSSFeed();
}"
45190,"private int scanNewsItem(PrintWriter pw,Hashtable tokTable) throws Exception {
  int numTokens=0;
  while (true) {
    ConceptToken tok=(ConceptToken)_lexerScanMethod.invoke(_lexer,(java.lang.Object[])null);
    if (tok == null) {
      _lexerCloseMethod.invoke(_lexer,(java.lang.Object[])null);
      break;
    }
    numTokens++;
    if (tok != ConceptToken.CATCHALL_TOKEN) {
      if (tok.isMultiToken()) {
        if (_log.isDebugEnabled())         _log.debug(""String_Node_Str"" + tok.getToken());
        String[] toks=tok.getTokens();
        for (        String element : toks)         processMatchedConcept(element,tok._text,numTokens,tokTable,pw);
      }
 else {
        processMatchedConcept(tok.getToken(),tok._text,numTokens,tokTable,pw);
      }
    }
  }
  return numTokens;
}","private int scanNewsItem(PrintWriter pw,Hashtable tokTable) throws Exception {
  _scannerInUse=true;
  int numTokens=0;
  while (true) {
    ConceptToken tok=(ConceptToken)_lexerScanMethod.invoke(_lexer,(java.lang.Object[])null);
    if (tok == null) {
      _lexerCloseMethod.invoke(_lexer,(java.lang.Object[])null);
      break;
    }
    numTokens++;
    if (tok != ConceptToken.CATCHALL_TOKEN) {
      if (tok.isMultiToken()) {
        if (_log.isDebugEnabled())         _log.debug(""String_Node_Str"" + tok.getToken());
        String[] toks=tok.getTokens();
        for (        String element : toks)         processMatchedConcept(element,tok._text,numTokens,tokTable,pw);
      }
 else {
        processMatchedConcept(tok.getToken(),tok._text,numTokens,tokTable,pw);
      }
    }
  }
  _scannerInUse=false;
  return numTokens;
}"
45191,"public void unloadScanners(){
  _lexerScanMethod=null;
  _lexerResetMethod=null;
  _lexerCloseMethod=null;
  _lexerConstr=null;
  _lexer=null;
}","public void unloadScanners(){
  if (!_scannerInUse) {
    _lexerScanMethod=null;
    _lexerResetMethod=null;
    _lexerCloseMethod=null;
    _lexerConstr=null;
    _lexer=null;
  }
}"
45192,"private Collection<NewsItem> getNewsForNewsRackFilterFeed(Feed f,Date startDate,Date endDate,int startId,int numArts){
  _log.info(""String_Node_Str"" + f.getUrl() + ""String_Node_Str""+ startDate+ ""String_Node_Str""+ endDate);
  String url, server, uid, rest;
  int i=""String_Node_Str"".length();
  url=f.getUrl();
  server=url.substring(i,url.indexOf(""String_Node_Str"",i));
  Collection<NewsItem> noItems=new ArrayList<NewsItem>();
  if (!NewsRack.getServerURL().equals(""String_Node_Str"" + server)) {
    _log.error(""String_Node_Str"" + server + ""String_Node_Str""+ NewsRack.getServerURL());
    return noItems;
  }
  i+=server.length() + 1;
  uid=url.substring(i,url.indexOf(""String_Node_Str"",i));
  User u=User.getUser(uid);
  if (u == null) {
    _log.error(""String_Node_Str"" + uid);
    return noItems;
  }
  i+=uid.length() + 1;
  rest=url.substring(i);
  if (rest.indexOf(""String_Node_Str"") == -1) {
    i=rest.indexOf(""String_Node_Str"");
    if (i > 0) {
      String topic=rest.substring(0,i);
      int catID=Integer.valueOf(rest.substring(i + 1));
      Issue t=u.getIssue(topic);
      if (t == null) {
        _log.error(""String_Node_Str"" + topic);
        return noItems;
      }
      Category cat=t.getCategory(catID);
      if (cat == null) {
        _log.error(""String_Node_Str"" + catID + ""String_Node_Str""+ topic);
        return noItems;
      }
      return getNews(cat,startDate,endDate,null,startId,numArts);
    }
 else {
      Issue t=u.getIssue(rest);
      if (t == null) {
        _log.error(""String_Node_Str"" + rest);
        return noItems;
      }
      return getNews(t,startDate,endDate,null,startId,numArts);
    }
  }
 else {
    Category cat=(Category)GET_CATEGORY_FROM_TAXONOMY_PATH.execute(new Object[]{uid + ""String_Node_Str"" + rest,true});
    if (cat == null) {
      _log.error(""String_Node_Str"" + uid + ""String_Node_Str""+ rest);
      return noItems;
    }
    return getNews(cat,startDate,endDate,null,startId,numArts);
  }
}","private Collection<NewsItem> getNewsForNewsRackFilterFeed(Feed f,Date startDate,Date endDate,int startId,int numArts){
  _log.info(""String_Node_Str"" + f.getUrl() + ""String_Node_Str""+ startDate+ ""String_Node_Str""+ endDate);
  String url, server, uid, rest;
  int i=""String_Node_Str"".length();
  url=f.getUrl();
  server=url.substring(i,url.indexOf(""String_Node_Str"",i));
  Collection<NewsItem> noItems=new ArrayList<NewsItem>();
  if (!NewsRack.getServerURL().equals(""String_Node_Str"" + server)) {
    _log.error(""String_Node_Str"" + server + ""String_Node_Str""+ NewsRack.getServerURL());
    return noItems;
  }
  i+=server.length() + 1;
  uid=url.substring(i,url.indexOf(""String_Node_Str"",i));
  User u=User.getUser(uid);
  if (u == null) {
    _log.error(""String_Node_Str"" + uid);
    return noItems;
  }
  i+=uid.length() + 1;
  rest=url.substring(i);
  if (rest.indexOf(""String_Node_Str"") == -1) {
    i=rest.indexOf(""String_Node_Str"");
    if (i > 0) {
      String topic=rest.substring(0,i);
      int catID=Integer.valueOf(rest.substring(i + 1));
      Issue t=u.getIssue(topic);
      if (t == null) {
        _log.error(""String_Node_Str"" + topic);
        return noItems;
      }
      Category cat=t.getCategory(catID);
      if (cat == null) {
        _log.error(""String_Node_Str"" + catID + ""String_Node_Str""+ topic);
        return noItems;
      }
      return getNews(cat,startDate,endDate,null,startId,numArts);
    }
 else {
      Issue t=u.getIssue(rest);
      if (t == null) {
        _log.error(""String_Node_Str"" + rest);
        return noItems;
      }
      return getNews(t,startDate,endDate,null,startId,numArts);
    }
  }
 else {
    Tuple<Long,Category> tcat=(Tuple<Long,Category>)GET_CATEGORY_FROM_TAXONOMY_PATH.execute(new Object[]{uid + ""String_Node_Str"" + rest,true});
    if (tcat == null) {
      _log.error(""String_Node_Str"" + uid + ""String_Node_Str""+ rest);
      return noItems;
    }
    Category c=getCategory(tcat._b.getKey());
    return getNews(c,startDate,endDate,null,startId,numArts);
  }
}"
45193,"public void download(DB_Interface dbi) throws Exception {
}","public void download(DB_Interface dbi) throws Exception {
  PrintWriter filtPw=dbi.getWriterForFilteredArticle(this);
  PrintWriter origPw=dbi.getWriterForOrigArticle(this);
  String url=getURL();
  try {
    if ((filtPw != null) && (origPw != null)) {
      boolean done=false;
      int numTries=0;
      do {
        numTries++;
        HTMLFilter hf=new HTMLFilter(url,filtPw,true);
        hf.run();
        String origText=hf.getOrigHtml();
        if ((origText != null) && (origText.length() > 100)) {
          origPw.println(origText);
          origPw.flush();
          done=true;
          filtPw.flush();
          File filtFile=getFilteredFilePath();
          long len=filtFile.length();
          if (len < 900) {
            boolean flag=getFeed().getIgnoreCommentsHeuristic();
            if (flag == true) {
              try {
                if (filtPw != null)                 filtPw.close();
                filtPw=null;
              }
 catch (              Exception e) {
              }
              String origPath=getOrigFilePath().toString();
              String filtPath=filtFile.toString();
              hf=new HTMLFilter(url,origPath,filtPath.substring(0,filtPath.lastIndexOf(File.separatorChar)));
              hf.setIgnoreCommentsHeuristic(false);
              hf.run();
              _log.info(""String_Node_Str"" + filtPath + ""String_Node_Str""+ len+ ""String_Node_Str""+ filtFile.length());
              filtFile=getFilteredFilePath();
              len=filtFile.length();
              if (len < 600) {
                try {
                  if (filtPw != null)                   filtPw.close();
                  filtPw=null;
                }
 catch (                Exception e) {
                }
                hf=new HTMLFilter(url,origPath,filtPath.substring(0,filtPath.lastIndexOf(File.separatorChar)));
                hf.debug();
                hf.setIgnoreCommentsHeuristic(false);
                hf.run();
              }
            }
          }
        }
 else         if ((origText != null) && (origText.length() <= 100)) {
          File origFile=getOrigFilePath();
          if ((origFile != null) && origFile.exists()) {
            if (!origFile.delete())             _log.error(""String_Node_Str"" + origFile);
          }
          File filtFile=getFilteredFilePath();
          if ((filtFile != null) && filtFile.exists()) {
            if (!filtFile.delete())             _log.error(""String_Node_Str"" + filtFile);
          }
        }
 else {
          _log.info(""String_Node_Str"" + url + ""String_Node_Str"");
          newsrack.util.StringUtils.sleep(5);
        }
      }
 while (!done && (numTries < 3));
    }
 else {
      _log.info(""String_Node_Str"" + url);
    }
  }
 catch (  Exception e) {
    if (filtPw != null)     dbi.deleteFilteredArticle(this);
    throw e;
  }
 finally {
    try {
      if (origPw != null)       origPw.close();
    }
 catch (    Exception e) {
    }
    try {
      if (filtPw != null)       filtPw.close();
    }
 catch (    Exception e) {
    }
  }
  newsrack.util.StringUtils.sleep(1);
  HTMLFilter.clearCookieJar();
}"
45194,"public void download(DB_Interface dbi) throws Exception {
  PrintWriter filtPw=dbi.getWriterForFilteredArticle(this);
  PrintWriter origPw=dbi.getWriterForOrigArticle(this);
  String url=getURL();
  try {
    if ((filtPw != null) && (origPw != null)) {
      boolean done=false;
      int numTries=0;
      do {
        numTries++;
        HTMLFilter hf=new HTMLFilter(url,filtPw,true);
        hf.run();
        String origText=hf.getOrigHtml();
        if (origText != null) {
          origPw.println(origText);
          origPw.flush();
          done=true;
          filtPw.flush();
          File filtFile=getFilteredFilePath();
          long len=filtFile.length();
          if (len < 750) {
            boolean flag=getFeed().getIgnoreCommentsHeuristic();
            if (flag == false) {
              try {
                if (filtPw != null)                 filtPw.close();
                filtPw=null;
              }
 catch (              Exception e) {
              }
              String origPath=getOrigFilePath().toString();
              String filtPath=filtFile.toString();
              hf=new HTMLFilter(url,origPath,filtPath.substring(0,filtPath.lastIndexOf(File.separatorChar)));
              hf.setIgnoreCommentsHeuristic(false);
              hf.run();
              _log.info(""String_Node_Str"" + len + ""String_Node_Str""+ filtFile.length());
            }
          }
        }
 else {
          _log.info(""String_Node_Str"" + url + ""String_Node_Str"");
          newsrack.util.StringUtils.sleep(5);
        }
      }
 while (!done && (numTries < 3));
    }
 else {
      _log.info(""String_Node_Str"" + url);
    }
  }
 catch (  Exception e) {
    if (filtPw != null)     dbi.deleteFilteredArticle(this);
    throw e;
  }
 finally {
    try {
      if (origPw != null)       origPw.close();
    }
 catch (    Exception e) {
    }
    try {
      if (filtPw != null)       filtPw.close();
    }
 catch (    Exception e) {
    }
  }
  newsrack.util.StringUtils.sleep(1);
  HTMLFilter.clearCookieJar();
}","public void download(DB_Interface dbi) throws Exception {
  PrintWriter filtPw=dbi.getWriterForFilteredArticle(this);
  PrintWriter origPw=dbi.getWriterForOrigArticle(this);
  String url=getURL();
  try {
    if ((filtPw != null) && (origPw != null)) {
      boolean done=false;
      int numTries=0;
      do {
        numTries++;
        HTMLFilter hf=new HTMLFilter(url,filtPw,true);
        hf.run();
        String origText=hf.getOrigHtml();
        if (origText != null) {
          origPw.println(origText);
          origPw.flush();
          done=true;
          filtPw.flush();
          File filtFile=getFilteredFilePath();
          long len=filtFile.length();
          if (len < 750) {
            boolean flag=getFeed().getIgnoreCommentsHeuristic();
            if (flag == false) {
              try {
                if (filtPw != null)                 filtPw.close();
                filtPw=null;
              }
 catch (              Exception e) {
              }
              String origPath=getOrigFilePath().toString();
              String filtPath=filtFile.toString();
              hf=new HTMLFilter(url,origPath,filtPath.substring(0,filtPath.lastIndexOf(File.separatorChar)));
              hf.setIgnoreCommentsHeuristic(false);
              hf.run();
              _log.info(""String_Node_Str"" + filtPath + ""String_Node_Str""+ len+ ""String_Node_Str""+ filtFile.length());
            }
          }
        }
 else {
          _log.info(""String_Node_Str"" + url + ""String_Node_Str"");
          newsrack.util.StringUtils.sleep(5);
        }
      }
 while (!done && (numTries < 3));
    }
 else {
      _log.info(""String_Node_Str"" + url);
    }
  }
 catch (  Exception e) {
    if (filtPw != null)     dbi.deleteFilteredArticle(this);
    throw e;
  }
 finally {
    try {
      if (origPw != null)       origPw.close();
    }
 catch (    Exception e) {
    }
    try {
      if (filtPw != null)       filtPw.close();
    }
 catch (    Exception e) {
    }
  }
  newsrack.util.StringUtils.sleep(1);
  HTMLFilter.clearCookieJar();
}"
45195,"private String getNewsItemPath(boolean wantOrig){
  if (getKey() == null) {
    _log.error(""String_Node_Str"" + getURL() + ""String_Node_Str"");
    return null;
  }
  String[] dateStr=getDateString().split(""String_Node_Str"");
  String pathPrefix=getGlobalNewsArchive() + (wantOrig ? ""String_Node_Str"" : ""String_Node_Str"") + File.separator+ dateStr[2]+ File.separator+ dateStr[1]+ File.separator+ dateStr[0];
  String localName=getLocalFileName();
  String fullPath=pathPrefix + File.separator + getFeed().getTag()+ File.separator+ localName;
  if (!((new File(fullPath)).isFile())) {
    List<Long> allFeedKeys=(List<Long>)SQL_Stmt.GET_ALL_FEEDS_FOR_NEWS_ITEM.get(getKey());
    fullPath=getValidFilePath(pathPrefix,localName,allFeedKeys);
    if (fullPath == null)     fullPath=getValidFilePath(pathPrefix,(String)SQL_Stmt.GET_NEWS_ITEM_LOCALNAME.get(getKey()),allFeedKeys);
    if (fullPath == null)     fullPath=getValidFilePath(pathPrefix,StringUtils.getBaseFileName(getURL()),allFeedKeys);
  }
  return fullPath;
}","private String getNewsItemPath(boolean wantOrig){
  String[] dateStr=getDateString().split(""String_Node_Str"");
  String pathPrefix=getGlobalNewsArchive() + (wantOrig ? ""String_Node_Str"" : ""String_Node_Str"") + File.separator+ dateStr[2]+ File.separator+ dateStr[1]+ File.separator+ dateStr[0];
  String localName=getLocalFileName();
  String fullPath=pathPrefix + File.separator + getFeed().getTag()+ File.separator+ localName;
  if (!((new File(fullPath)).isFile())) {
    if (getKey() == null) {
      _log.error(""String_Node_Str"" + getURL() + ""String_Node_Str"");
      return null;
    }
    List<Long> allFeedKeys=(List<Long>)SQL_Stmt.GET_ALL_FEEDS_FOR_NEWS_ITEM.get(getKey());
    fullPath=getValidFilePath(pathPrefix,localName,allFeedKeys);
    if (fullPath == null)     fullPath=getValidFilePath(pathPrefix,(String)SQL_Stmt.GET_NEWS_ITEM_LOCALNAME.get(getKey()),allFeedKeys);
    if (fullPath == null)     fullPath=getValidFilePath(pathPrefix,StringUtils.getBaseFileName(getURL()),allFeedKeys);
  }
  return fullPath;
}"
45196,"private Long persistRuleTerm(Long uKey,Long filtKey,RuleTerm r){
  if (_log.isDebugEnabled())   _log.debug(""String_Node_Str"" + r + ""String_Node_Str""+ filtKey);
  Object op1=r.getOperand1();
  Object op2=r.getOperand2();
  Long op1Key=null;
  Long op2Key=null;
  Long rtKey=null;
switch (r.getType()) {
case LEAF_CONCEPT:
    op1Key=persistConcept(uKey,(Concept)op1);
  op2Key=new Long(((Filter.LeafConcept)r).getMinOccurences());
rtKey=(Long)INSERT_RULE_TERM.execute(new Object[]{filtKey,Filter.getValue(r.getType()),op1Key,op2Key});
break;
case LEAF_CAT:
op1Key=((Category)op1).getKey();
if (op1Key == null) {
_log.error(""String_Node_Str"" + op1);
_log.error(""String_Node_Str"" + op1Key.longValue());
}
rtKey=(Long)INSERT_RULE_TERM.execute(new Object[]{filtKey,Filter.getValue(r.getType()),op1Key,op2Key});
break;
case LEAF_FILTER:
op1Key=((Filter)op1).getKey();
if (op1Key < 0) {
_log.error(""String_Node_Str"" + op1);
op1Key=null;
_log.error(""String_Node_Str"" + op1Key.longValue());
}
rtKey=(Long)INSERT_RULE_TERM.execute(new Object[]{filtKey,Filter.getValue(r.getType()),op1Key,op2Key});
break;
case NOT_TERM:
op1Key=persistRuleTerm(uKey,filtKey,(RuleTerm)op1);
rtKey=(Long)INSERT_RULE_TERM.execute(new Object[]{filtKey,Filter.getValue(r.getType()),op1Key,op2Key});
break;
case AND_TERM:
case OR_TERM:
op1Key=persistRuleTerm(uKey,filtKey,(RuleTerm)op1);
op2Key=persistRuleTerm(uKey,filtKey,(RuleTerm)op2);
rtKey=(Long)INSERT_RULE_TERM.execute(new Object[]{filtKey,Filter.getValue(r.getType()),op1Key,op2Key});
break;
case CONTEXT_TERM:
op1Key=persistRuleTerm(uKey,filtKey,(RuleTerm)op1);
rtKey=(Long)INSERT_RULE_TERM.execute(new Object[]{filtKey,Filter.getValue(r.getType()),op1Key,op2Key});
List<Concept> cpts=(List<Concept>)op2;
for (Concept cpt : cpts) {
INSERT_RULE_TERM.execute(new Object[]{filtKey,CONTEXT_TERM_OPERAND_TYPE,rtKey,cpt.getKey()});
}
break;
case PROXIMITY_TERM:
op1Key=persistConcept(uKey,(Concept)op1);
op2Key=persistConcept(uKey,(Concept)op2);
rtKey=(Long)INSERT_RULE_TERM.execute(new Object[]{filtKey,Filter.getValue(r.getType()),op1Key,op2Key});
INSERT_RULE_TERM.execute(new Object[]{filtKey,PROXIMITY_TERM_OPERAND_TYPE,rtKey,(long)((ProximityTerm)r).getProximityVal()});
break;
}
return rtKey;
}","private Long persistRuleTerm(Long uKey,Long filtKey,RuleTerm r){
  if (_log.isDebugEnabled())   _log.debug(""String_Node_Str"" + r + ""String_Node_Str""+ filtKey);
  Object op1=r.getOperand1();
  Object op2=r.getOperand2();
  Long op1Key=null;
  Long op2Key=null;
  Long rtKey=null;
switch (r.getType()) {
case LEAF_CONCEPT:
    op1Key=persistConcept(uKey,(Concept)op1);
  op2Key=new Long(((Filter.LeafConcept)r).getMinOccurences());
rtKey=(Long)INSERT_RULE_TERM.execute(new Object[]{filtKey,Filter.getValue(r.getType()),op1Key,op2Key});
break;
case LEAF_CAT:
op1Key=((Category)op1).getKey();
if (op1Key == null) {
_log.error(""String_Node_Str"" + op1);
_log.error(""String_Node_Str"" + op1Key.longValue());
}
rtKey=(Long)INSERT_RULE_TERM.execute(new Object[]{filtKey,Filter.getValue(r.getType()),op1Key,op2Key});
break;
case SOURCE_FILTER:
op1Key=((NR_Collection)op1).getKey();
rtKey=(Long)INSERT_RULE_TERM.execute(new Object[]{filtKey,Filter.getValue(r.getType()),op1Key,op2Key});
break;
case LEAF_FILTER:
op1Key=((Filter)op1).getKey();
if (op1Key < 0) {
_log.error(""String_Node_Str"" + op1);
op1Key=null;
_log.error(""String_Node_Str"" + op1Key.longValue());
}
rtKey=(Long)INSERT_RULE_TERM.execute(new Object[]{filtKey,Filter.getValue(r.getType()),op1Key,op2Key});
break;
case NOT_TERM:
op1Key=persistRuleTerm(uKey,filtKey,(RuleTerm)op1);
rtKey=(Long)INSERT_RULE_TERM.execute(new Object[]{filtKey,Filter.getValue(r.getType()),op1Key,op2Key});
break;
case AND_TERM:
case OR_TERM:
op1Key=persistRuleTerm(uKey,filtKey,(RuleTerm)op1);
op2Key=persistRuleTerm(uKey,filtKey,(RuleTerm)op2);
rtKey=(Long)INSERT_RULE_TERM.execute(new Object[]{filtKey,Filter.getValue(r.getType()),op1Key,op2Key});
break;
case CONTEXT_TERM:
op1Key=persistRuleTerm(uKey,filtKey,(RuleTerm)op1);
rtKey=(Long)INSERT_RULE_TERM.execute(new Object[]{filtKey,Filter.getValue(r.getType()),op1Key,op2Key});
List<Concept> cpts=(List<Concept>)op2;
for (Concept cpt : cpts) {
INSERT_RULE_TERM.execute(new Object[]{filtKey,CONTEXT_TERM_OPERAND_TYPE,rtKey,cpt.getKey()});
}
break;
case PROXIMITY_TERM:
op1Key=persistConcept(uKey,(Concept)op1);
op2Key=persistConcept(uKey,(Concept)op2);
rtKey=(Long)INSERT_RULE_TERM.execute(new Object[]{filtKey,Filter.getValue(r.getType()),op1Key,op2Key});
INSERT_RULE_TERM.execute(new Object[]{filtKey,PROXIMITY_TERM_OPERAND_TYPE,rtKey,(long)((ProximityTerm)r).getProximityVal()});
break;
default :
throw new Error(""String_Node_Str"" + r.getType() + ""String_Node_Str""+ filtKey+ ""String_Node_Str""+ uKey);
}
return rtKey;
}"
45197,"private RuleTerm buildRuleTree(Long termKey,Map<Long,Object[]> rtMap,Map<Long,Object> operandMap){
  Object[] rtVals=rtMap.get(termKey);
  FilterOp op=Filter.getTermType((Integer)rtVals[1]);
switch (op) {
case LEAF_CONCEPT:
    return new Filter.LeafConcept(SQL_Stmt._db.getConcept((Long)rtVals[2]),((Long)rtVals[3]).intValue());
case LEAF_FILTER:
  return new Filter.LeafFilter(SQL_Stmt._db.getFilter((Long)rtVals[2]));
case LEAF_CAT:
return new Filter.LeafCategory(SQL_Stmt._db.getCategory((Long)rtVals[2]));
case NOT_TERM:
return new Filter.NegTerm(buildRuleTree((Long)rtVals[2],rtMap,operandMap));
case CONTEXT_TERM:
return new Filter.ContextTerm(buildRuleTree((Long)rtVals[2],rtMap,operandMap),(List)operandMap.get(termKey));
case AND_TERM:
case OR_TERM:
return new Filter.AndOrTerm(op,buildRuleTree((Long)rtVals[2],rtMap,operandMap),buildRuleTree((Long)rtVals[3],rtMap,operandMap));
case PROXIMITY_TERM:
return new Filter.ProximityTerm(SQL_Stmt._db.getConcept((Long)rtVals[2]),SQL_Stmt._db.getConcept((Long)rtVals[3]),((Long)operandMap.get(termKey)).intValue());
}
SQL_Stmt._log.error(""String_Node_Str"");
return null;
}","private RuleTerm buildRuleTree(Long termKey,Map<Long,Object[]> rtMap,Map<Long,Object> operandMap){
  Object[] rtVals=rtMap.get(termKey);
  FilterOp op=Filter.getTermType((Integer)rtVals[1]);
switch (op) {
case LEAF_CONCEPT:
    return new Filter.LeafConcept(SQL_Stmt._db.getConcept((Long)rtVals[2]),((Long)rtVals[3]).intValue());
case LEAF_FILTER:
  return new Filter.LeafFilter(SQL_Stmt._db.getFilter((Long)rtVals[2]));
case SOURCE_FILTER:
return new Filter.SourceFilter((NR_SourceCollection)SQL_Stmt.GET_COLLECTION_BY_KEY.get((Long)rtVals[2]));
case LEAF_CAT:
return new Filter.LeafCategory(SQL_Stmt._db.getCategory((Long)rtVals[2]));
case NOT_TERM:
return new Filter.NegTerm(buildRuleTree((Long)rtVals[2],rtMap,operandMap));
case CONTEXT_TERM:
return new Filter.ContextTerm(buildRuleTree((Long)rtVals[2],rtMap,operandMap),(List)operandMap.get(termKey));
case AND_TERM:
case OR_TERM:
return new Filter.AndOrTerm(op,buildRuleTree((Long)rtVals[2],rtMap,operandMap),buildRuleTree((Long)rtVals[3],rtMap,operandMap));
case PROXIMITY_TERM:
return new Filter.ProximityTerm(SQL_Stmt._db.getConcept((Long)rtVals[2]),SQL_Stmt._db.getConcept((Long)rtVals[3]),((Long)operandMap.get(termKey)).intValue());
}
SQL_Stmt._log.error(""String_Node_Str"");
return null;
}"
45198,"public void download(DB_Interface dbi) throws Exception {
  PrintWriter filtPw=dbi.getWriterForFilteredArticle(this);
  PrintWriter origPw=dbi.getWriterForOrigArticle(this);
  String url=getURL();
  try {
    if ((filtPw != null) && (origPw != null)) {
      boolean done=false;
      int numTries=0;
      do {
        numTries++;
        HTMLFilter hf=new HTMLFilter(url,filtPw,true);
        hf.run();
        String origText=hf.getOrigHtml();
        if ((origText != null) && (origText.length() > 100)) {
          origPw.println(origText);
          origPw.flush();
          done=true;
          filtPw.flush();
          File filtFile=getFilteredFilePath();
          long len=filtFile.length();
          if (len < 900) {
            boolean flag=getFeed().getIgnoreCommentsHeuristic();
            if (flag == true) {
              try {
                if (filtPw != null)                 filtPw.close();
                filtPw=null;
              }
 catch (              Exception e) {
              }
              String origPath=getOrigFilePath().toString();
              String filtPath=filtFile.toString();
              hf=new HTMLFilter(url,origPath,filtPath.substring(0,filtPath.lastIndexOf(File.separatorChar)));
              hf.setIgnoreCommentsHeuristic(false);
              hf.run();
              _log.info(""String_Node_Str"" + filtPath + ""String_Node_Str""+ len+ ""String_Node_Str""+ filtFile.length());
              filtFile=getFilteredFilePath();
              len=filtFile.length();
              if (len < 600) {
                try {
                  if (filtPw != null)                   filtPw.close();
                  filtPw=null;
                }
 catch (                Exception e) {
                }
                hf=new HTMLFilter(url,origPath,filtPath.substring(0,filtPath.lastIndexOf(File.separatorChar)));
                hf.debug();
                hf.setIgnoreCommentsHeuristic(false);
                hf.run();
              }
            }
          }
        }
 else         if ((origText != null) && (origText.length() <= 100)) {
          File origFile=getOrigFilePath();
          if (origFile.exists()) {
            if (!origFile.delete())             _log.error(""String_Node_Str"" + origFile);
          }
          File filtFile=getFilteredFilePath();
          if (filtFile.exists()) {
            if (!filtFile.delete())             _log.error(""String_Node_Str"" + filtFile);
          }
        }
 else {
          _log.info(""String_Node_Str"" + url + ""String_Node_Str"");
          newsrack.util.StringUtils.sleep(5);
        }
      }
 while (!done && (numTries < 3));
    }
 else {
      _log.info(""String_Node_Str"" + url);
    }
  }
 catch (  Exception e) {
    if (filtPw != null)     dbi.deleteFilteredArticle(this);
    throw e;
  }
 finally {
    try {
      if (origPw != null)       origPw.close();
    }
 catch (    Exception e) {
    }
    try {
      if (filtPw != null)       filtPw.close();
    }
 catch (    Exception e) {
    }
  }
  newsrack.util.StringUtils.sleep(1);
  HTMLFilter.clearCookieJar();
}","public void download(DB_Interface dbi) throws Exception {
}"
45199,"/** 
 * Record a classified news item!
 * @param ni   News Item that has been classified in category c
 * @param c    Category into which ni has been classified
 * @param matchCount  Match weight
 */
public abstract void addNewsItem(NewsItem ni,Category c,int matchCount);","/** 
 * Record a classified news item!
 * @param ni    News Item that has been classified in category c
 * @param c     Category into which ni has been classified
 * @param score Match score
 */
public abstract void addNewsItem(NewsItem ni,Category c,int score);"
45200,"/** 
 * Record a classified news item!
 * @param ni   News Item that has been classified in category c
 * @param c    Category into which ni has been classified
 * @param matchCount  Match weight
 */
public void addNewsItem(NewsItem ni,Category cat,int matchCount){
  if (cat.isLeafCategory()) {
    SQL_NewsItem sni=(SQL_NewsItem)ni;
    if (!sni.inTheDB())     _log.error(""String_Node_Str"" + sni + ""String_Node_Str"");
    SQL_NewsIndex idx=sni.getNewsIndex();
    INSERT_INTO_CAT_NEWS_TABLE.execute(new Object[]{cat.getKey(),sni.getKey(),idx.getKey(),idx.getCreationTime()});
    cat.setNumArticles(1 + cat.getNumArticles());
    List<Category> l=_leafCatsToCommit.get(cat.getIssue().getKey());
    if (l == null) {
      l=new ArrayList<Category>();
      _leafCatsToCommit.put(cat.getIssue().getKey(),l);
    }
    l.add(cat);
  }
}","/** 
 * Record a classified news item!
 * @param ni    News Item that has been classified in category c
 * @param c     Category into which ni has been classified
 * @param score Match score
 */
public void addNewsItem(NewsItem ni,Category cat,int score){
  if (cat.isLeafCategory()) {
    SQL_NewsItem sni=(SQL_NewsItem)ni;
    if (!sni.inTheDB())     _log.error(""String_Node_Str"" + sni + ""String_Node_Str"");
    SQL_NewsIndex idx=sni.getNewsIndex();
    INSERT_INTO_CAT_NEWS_TABLE.execute(new Object[]{cat.getKey(),sni.getKey(),idx.getKey(),idx.getCreationTime()});
    cat.setNumArticles(1 + cat.getNumArticles());
    List<Category> l=_leafCatsToCommit.get(cat.getIssue().getKey());
    if (l == null) {
      l=new ArrayList<Category>();
      _leafCatsToCommit.put(cat.getIssue().getKey(),l);
    }
    l.add(cat);
  }
}"
45201,"public String getNewsInfo(){
  String uidList=getApiParamValue(""String_Node_Str"",true);
  String uid=getApiParamValue(""String_Node_Str"",true);
  String tname=getApiParamValue(""String_Node_Str"",true);
  if (tname == null)   tname=getApiParamValue(""String_Node_Str"",true);
  String url=_req.getQueryString().replaceAll(""String_Node_Str"",""String_Node_Str"");
  newsrack.util.URLCanonicalizer.canonicalize(url);
  _newsItem=NewsItem.getNewsItemFromURL(url);
  if (_newsItem == null) {
    _errMsg=getText(""String_Node_Str"");
    return Action.ERROR;
  }
  List<Category> allCats=_newsItem.getCategories();
  _cats=new ArrayList<Category>();
  if ((uid == null) && (uidList == null)) {
    _cats=allCats;
  }
 else   if (uidList != null) {
    String[] uids=uidList.split(""String_Node_Str"");
    for (int i=0; i < uids.length; i++)     uids[i]=uids[i].trim();
    for (    Category c : allCats) {
      String catUid=c.getUser().getUid();
      for (      String u : uids) {
        if (u.equals(catUid)) {
          _cats.add(c);
          break;
        }
      }
    }
  }
 else {
    for (    Category c : allCats) {
      if (uid.equals(c.getUser().getUid()) && ((tname == null) || tname.equals(c.getIssue().getName())))       _cats.add(c);
    }
  }
  return apiSuccess();
}","public String getNewsInfo(){
  String uidList=getApiParamValue(""String_Node_Str"",true);
  String uid=getApiParamValue(""String_Node_Str"",true);
  String tname=getApiParamValue(""String_Node_Str"",true);
  if (tname == null)   tname=getApiParamValue(""String_Node_Str"",true);
  String url=_req.getQueryString().replaceAll(""String_Node_Str"",""String_Node_Str"");
  _log.info(""String_Node_Str"" + _req.getQueryString() + ""String_Node_Str""+ url);
  newsrack.util.URLCanonicalizer.canonicalize(url);
  _newsItem=NewsItem.getNewsItemFromURL(url);
  if (_newsItem == null) {
    _errMsg=getText(""String_Node_Str"");
    return Action.ERROR;
  }
  List<Category> allCats=_newsItem.getCategories();
  _cats=new ArrayList<Category>();
  if ((uid == null) && (uidList == null)) {
    _cats=allCats;
  }
 else   if (uidList != null) {
    String[] uids=uidList.split(""String_Node_Str"");
    for (int i=0; i < uids.length; i++)     uids[i]=uids[i].trim();
    for (    Category c : allCats) {
      String catUid=c.getUser().getUid();
      for (      String u : uids) {
        if (u.equals(catUid)) {
          _cats.add(c);
          break;
        }
      }
    }
  }
 else {
    for (    Category c : allCats) {
      if (uid.equals(c.getUser().getUid()) && ((tname == null) || tname.equals(c.getIssue().getName())))       _cats.add(c);
    }
  }
  return apiSuccess();
}"
45202,"public static void revalidateUsers(Long ukey){
  if (ukey == null) {
    List<Long> ukeys_1=(List<Long>)SQL_StmtExecutor.query(""String_Node_Str"",new SQL_ValType[]{},new Object[]{},SQL_StmtExecutor._longProcessor,false);
    for (    Long k : ukeys_1)     _db.getUser(k).invalidateAllIssues();
    for (    Long k : ukeys_1) {
      User u=_db.getUser(k);
      try {
        u.validateAllIssues(false);
      }
 catch (      Exception e) {
        System.out.println(""String_Node_Str"" + e + ""String_Node_Str""+ u.getName());
      }
    }
  }
 else {
    try {
      _db.getUser(ukey).invalidateAllIssues();
      _db.getUser(ukey).validateAllIssues(false);
    }
 catch (    Exception e) {
      System.out.println(""String_Node_Str"" + e + ""String_Node_Str""+ ukey);
    }
  }
}","public static void revalidateUsers(Long ukey){
  if (ukey == null) {
    List<Long> ukeys_1=(List<Long>)SQL_StmtExecutor.query(""String_Node_Str"",new SQL_ValType[]{},new Object[]{},SQL_StmtExecutor._longProcessor,false);
    for (    Long k : ukeys_1)     _db.getUser(k).invalidateAllIssues();
    for (    Long k : ukeys_1) {
      User u=_db.getUser(k);
      try {
        u.validateAllIssues(false);
      }
 catch (      Exception e) {
        System.out.println(""String_Node_Str"" + e + ""String_Node_Str""+ u.getName());
      }
catch (      Error e) {
        System.out.println(""String_Node_Str"" + e + ""String_Node_Str""+ u.getName());
      }
    }
  }
 else {
    try {
      _db.getUser(ukey).invalidateAllIssues();
      _db.getUser(ukey).validateAllIssues(false);
    }
 catch (    Exception e) {
      System.out.println(""String_Node_Str"" + e + ""String_Node_Str""+ ukey);
    }
  }
}"
45203,"private void removeFile(final String f){
  if (_files == null)   loadUserFilesFromDB();
  for (  UserFile uf : _files) {
    if (uf.getName().equals(f)) {
      _files.remove(f);
      _db.deleteFile(uf);
    }
  }
}","private void removeFile(final String f){
  if (_files == null)   loadUserFilesFromDB();
  for (  UserFile uf : _files) {
    if (uf.getName().equals(f)) {
      _files.remove(uf);
      _db.deleteFile(uf);
    }
  }
}"
45204,"public String getNewsInfo(){
  String url=getApiParamValue(""String_Node_Str"",false);
  String uidList=getApiParamValue(""String_Node_Str"",true);
  String uid=getApiParamValue(""String_Node_Str"",true);
  String tname=getApiParamValue(""String_Node_Str"",true);
  if (tname == null)   tname=getApiParamValue(""String_Node_Str"",true);
  url=newsrack.util.URLCanonicalizer.canonicalize(url);
  _newsItem=NewsItem.getNewsItemFromURL(url);
  if (_newsItem == null) {
    _errMsg=getText(""String_Node_Str"");
    return Action.ERROR;
  }
  List<Category> allCats=_newsItem.getCategories();
  _cats=new ArrayList<Category>();
  if ((uid == null) && (uidList == null)) {
    _cats=allCats;
  }
 else   if (uidList != null) {
    String[] uids=uidList.split(""String_Node_Str"");
    for (int i=0; i < uids.length; i++)     uids[i]=uids[i].trim();
    for (    Category c : allCats) {
      String catUid=c.getUser().getUid();
      for (      String u : uids) {
        if (u.equals(catUid)) {
          _cats.add(c);
          break;
        }
      }
    }
  }
 else {
    for (    Category c : allCats) {
      if (uid.equals(c.getUser().getUid()) && ((tname == null) || tname.equals(c.getIssue().getName())))       _cats.add(c);
    }
  }
  return apiSuccess();
}","public String getNewsInfo(){
  String uidList=getApiParamValue(""String_Node_Str"",true);
  String uid=getApiParamValue(""String_Node_Str"",true);
  String tname=getApiParamValue(""String_Node_Str"",true);
  if (tname == null)   tname=getApiParamValue(""String_Node_Str"",true);
  String url=_req.getQueryString().replaceAll(""String_Node_Str"",""String_Node_Str"");
  newsrack.util.URLCanonicalizer.canonicalize(url);
  _newsItem=NewsItem.getNewsItemFromURL(url);
  if (_newsItem == null) {
    _errMsg=getText(""String_Node_Str"");
    return Action.ERROR;
  }
  List<Category> allCats=_newsItem.getCategories();
  _cats=new ArrayList<Category>();
  if ((uid == null) && (uidList == null)) {
    _cats=allCats;
  }
 else   if (uidList != null) {
    String[] uids=uidList.split(""String_Node_Str"");
    for (int i=0; i < uids.length; i++)     uids[i]=uids[i].trim();
    for (    Category c : allCats) {
      String catUid=c.getUser().getUid();
      for (      String u : uids) {
        if (u.equals(catUid)) {
          _cats.add(c);
          break;
        }
      }
    }
  }
 else {
    for (    Category c : allCats) {
      if (uid.equals(c.getUser().getUid()) && ((tname == null) || tname.equals(c.getIssue().getName())))       _cats.add(c);
    }
  }
  return apiSuccess();
}"
45205,"public Issue getIssue(User u,String issueName){
  String key=u.getUid() + ""String_Node_Str"" + issueName;
  Issue i=(Issue)_cache.get(""String_Node_Str"",key);
  if (i == null) {
    i=(Issue)GET_ISSUE_BY_USER_KEY.execute(new Object[]{u.getKey(),issueName});
    if (i != null) {
      _cache.add(""String_Node_Str"",u.getKey(),key,i);
      _cache.add(""String_Node_Str"",u.getKey(),i.getKey(),i);
      i.setUser(u);
    }
  }
  return i;
}","public Issue getIssue(User u,String issueName){
  String key=getSecondaryIssueKey(u,issueName);
  Issue i=(Issue)_cache.get(""String_Node_Str"",key);
  if (i == null) {
    i=(Issue)GET_ISSUE_BY_USER_KEY.execute(new Object[]{u.getKey(),issueName});
    if (i != null) {
      i.setUser(u);
      addIssueToCache(i);
    }
  }
  return i;
}"
45206,"public void readInCurrentRSSFeed(){
  final File feedFile=new File(_feedFileName);
  if (!feedFile.exists()) {
    IOUtils.createDir(_rssDir);
    createNewRSSFeed();
    publish();
  }
 else {
    try {
      _rssFeed=(new SyndFeedInput()).build(new XmlReader(feedFile));
      _feedItems=(ArrayList)_rssFeed.getEntries();
    }
 catch (    final Exception e) {
      _log.error(""String_Node_Str"" + _feedFileName,e);
    }
    rssFeedRomeWorkaround_FIXME(_rssFeed,_title,_url,_desc);
  }
}","public void readInCurrentRSSFeed(){
  final File feedFile=new File(_feedFileName);
  if (!feedFile.exists() || (feedFile.exists() && (feedFile.length() == 0))) {
    IOUtils.createDir(_rssDir);
    createNewRSSFeed();
    publish();
  }
 else {
    try {
      _rssFeed=(new SyndFeedInput()).build(new XmlReader(feedFile));
      _feedItems=(ArrayList)_rssFeed.getEntries();
    }
 catch (    final Exception e) {
      _log.error(""String_Node_Str"" + _feedFileName,e);
    }
    rssFeedRomeWorkaround_FIXME(_rssFeed,_title,_url,_desc);
  }
}"
45207,"/** 
 * This method returns a character reader for displaying a news item that has been archived in the local installation of News Rack.
 * @param niPath  Path of the news item relative to the news archive.
 * @return Returns a reader object for reading the news item
 */
public Reader getNewsItemReader(NewsItem ni) throws java.io.IOException {
  if (ni.getKey() == null) {
    _log.error(""String_Node_Str"" + ni.getURL() + ""String_Node_Str"");
    return null;
  }
  String[] dateStr=ni.getDateString().split(""String_Node_Str"");
  String pathPrefix=GLOBAL_NEWS_ARCHIVE_DIR + ""String_Node_Str"" + File.separator+ dateStr[2]+ File.separator+ dateStr[1]+ File.separator+ dateStr[0];
  String localName=((SQL_NewsItem)ni).getLocalFileName();
  String fullPath=pathPrefix + File.separator + ni.getFeed().getTag()+ File.separator+ localName;
  if ((new File(fullPath)).isFile())   return IOUtils.getUTF8Reader(fullPath);
  List<Long> allFeedKeys=(List<Long>)GET_ALL_FEEDS_FOR_NEWS.get(ni.getKey());
  Reader r=getReader(pathPrefix,localName,allFeedKeys);
  if (r == null)   r=getReader(pathPrefix,StringUtils.getBaseFileName(ni.getURL()),allFeedKeys);
  if (r == null)   r=getReader(pathPrefix,(String)GET_NEWS_ITEM_LOCALNAME.get(ni.getKey()),allFeedKeys);
  if (r != null)   return r;
 else   throw new java.io.FileNotFoundException();
}","/** 
 * This method returns a character reader for displaying a news item that has been archived in the local installation of News Rack.
 * @param niPath  Path of the news item relative to the news archive.
 * @return Returns a reader object for reading the news item
 */
public Reader getNewsItemReader(NewsItem ni) throws java.io.IOException {
  if (ni.getKey() == null) {
    _log.error(""String_Node_Str"" + ni.getURL() + ""String_Node_Str"");
    return null;
  }
  String[] dateStr=ni.getDateString().split(""String_Node_Str"");
  String pathPrefix=GLOBAL_NEWS_ARCHIVE_DIR + ""String_Node_Str"" + File.separator+ dateStr[2]+ File.separator+ dateStr[1]+ File.separator+ dateStr[0];
  String localName=((SQL_NewsItem)ni).getLocalFileName();
  String fullPath=pathPrefix + File.separator + ni.getFeed().getTag()+ File.separator+ localName;
  if ((new File(fullPath)).isFile())   return IOUtils.getUTF8Reader(fullPath);
  List<Long> allFeedKeys=(List<Long>)GET_ALL_FEEDS_FOR_NEWS.get(ni.getKey());
  Reader r=getReader(pathPrefix,localName,allFeedKeys);
  if (r == null)   r=getReader(pathPrefix,(String)GET_NEWS_ITEM_LOCALNAME.get(ni.getKey()),allFeedKeys);
  if (r == null)   r=getReader(pathPrefix,StringUtils.getBaseFileName(ni.getURL()),allFeedKeys);
  if (r != null)   return r;
 else   throw new java.io.FileNotFoundException();
}"
45208,"public String execute(){
  String uid=getParam(""String_Node_Str"");
  String pass=getParam(""String_Node_Str"");
  try {
    User u=User.signInUser(uid,pass);
    _session.put(NewsRack.UID_KEY,u.getUid());
    _session.put(NewsRack.USER_KEY,u);
    _log.info(""String_Node_Str"" + uid);
    if (u.isAdmin())     return ""String_Node_Str"";
 else     return Action.SUCCESS;
  }
 catch (  UnknownUserException e) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str"",new String[]{uid}));
    return Action.INPUT;
  }
catch (  InvalidPasswordException e) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
    return Action.INPUT;
  }
}","public String execute(){
  String uid=getParam(""String_Node_Str"");
  String pass=getParam(""String_Node_Str"");
  try {
    User u=User.signInUser(uid,pass);
    _session.put(NewsRack.UID_KEY,u.getUid());
    _session.put(NewsRack.USER_KEY,u);
    newsrack.database.DB_Interface dbi=NewsRack.getDBInterface();
    dbi.updateUserAttribute(u,dbi.LAST_LOGIN,new java.util.Date());
    _log.info(""String_Node_Str"" + uid);
    if (u.isAdmin())     return ""String_Node_Str"";
 else     return Action.SUCCESS;
  }
 catch (  UnknownUserException e) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str"",new String[]{uid}));
    return Action.INPUT;
  }
catch (  InvalidPasswordException e) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
    return Action.INPUT;
  }
}"
45209,"/** 
 * This method attempts to file an article into this category, if it is a leaf category, or attempts to file the article in all the sub-categories, if it is a non-leaf category.
 * @param article      The article to be filed
 * @param numTokens    Number of tokens encountered in the article
 * @param matchCounts  A table of all concepts that matched along withtheir corresponding match counts
 * @return             The hit count for this categoryIf a leaf category, the match count is determined by the filtering rule -- algorithm is not yet publicly documented. If a non-leaf category, the match count is the maximum of match count of its sub-categories
 */
public synchronized Count getMatchCount(NewsItem article,int numTokens,Hashtable matchCounts){
  if (_log.isDebugEnabled())   _log.debug(""String_Node_Str"" + _name);
  ArrayList<Category> matchedCats=new ArrayList<Category>();
  int matchCount=0;
  if (isLeafCategory()) {
    if (_log.isDebugEnabled())     _log.debug(""String_Node_Str"" + _name + ""String_Node_Str""+ _filter._ruleString+ ""String_Node_Str"");
    matchCount=_filter.getMatchCount(article,numTokens,matchCounts);
    if ((matchCount >= Filter.MIN_REQD_MATCH_COUNT) || ((numTokens < 250) && (matchCount > 0) && (matchCount < Filter.MIN_REQD_MATCH_COUNT))) {
      if (containsArticle(article))       return DEFAULT_COUNT;
      matchedCats.add(this);
    }
  }
 else {
    if (_log.isDebugEnabled())     _log.debug(""String_Node_Str"" + _name + ""String_Node_Str"");
    for (    Category subCat : _children) {
      Count subCatCount=subCat.getMatchCount(article,numTokens,matchCounts);
      if (subCatCount.value() > matchCount)       matchCount=subCatCount.value();
      matchedCats.addAll(subCatCount.getMatchedCats());
    }
    if (_log.isDebugEnabled())     _log.debug(""String_Node_Str"" + _name + ""String_Node_Str"");
  }
  if (!matchedCats.isEmpty()) {
    _outputFeed.addNewsItem(article,matchedCats);
    _db.addNewsItem(article,this,matchCount);
    _lastUpdateTime=new Date();
    if (_log.isDebugEnabled())     _log.debug(""String_Node_Str"" + _name);
  }
  final Count retVal=new Count(matchCount,matchedCats);
  matchCounts.put(""String_Node_Str"" + _name + ""String_Node_Str"",retVal);
  for (  Category subCat : _children)   matchCounts.remove(""String_Node_Str"" + subCat._name + ""String_Node_Str"");
  return retVal;
}","/** 
 * This method attempts to file an article into this category, if it is a leaf category, or attempts to file the article in all the sub-categories, if it is a non-leaf category.
 * @param article      The article to be filed
 * @param numTokens    Number of tokens encountered in the article
 * @param matchCounts  A table of all concepts that matched along withtheir corresponding match counts
 * @return             The hit count for this categoryIf a leaf category, the match count is determined by the filtering rule -- algorithm is not yet publicly documented. If a non-leaf category, the match count is the maximum of match count of its sub-categories
 */
public synchronized Count getMatchCount(NewsItem article,int numTokens,Hashtable matchCounts){
  if (_log.isDebugEnabled())   _log.debug(""String_Node_Str"" + _name);
  ArrayList<Category> matchedCats=new ArrayList<Category>();
  int matchCount=0;
  if (isLeafCategory()) {
    if (_log.isDebugEnabled())     _log.debug(""String_Node_Str"" + _name + ""String_Node_Str""+ _filter._ruleString+ ""String_Node_Str"");
    matchCount=_filter.getMatchCount(article,numTokens,matchCounts);
    if ((matchCount >= Filter.MIN_REQD_MATCH_COUNT) || ((numTokens < 250) && (matchCount > 0) && (matchCount < Filter.MIN_REQD_MATCH_COUNT))) {
      if (!containsArticle(article))       matchedCats.add(this);
    }
  }
 else {
    if (_log.isDebugEnabled())     _log.debug(""String_Node_Str"" + _name + ""String_Node_Str"");
    for (    Category subCat : _children) {
      Count subCatCount=subCat.getMatchCount(article,numTokens,matchCounts);
      if (subCatCount.value() > matchCount)       matchCount=subCatCount.value();
      matchedCats.addAll(subCatCount.getMatchedCats());
    }
    if (_log.isDebugEnabled())     _log.debug(""String_Node_Str"" + _name + ""String_Node_Str"");
  }
  if (!matchedCats.isEmpty()) {
    _outputFeed.addNewsItem(article,matchedCats);
    _db.addNewsItem(article,this,matchCount);
    _lastUpdateTime=new Date();
    if (_log.isDebugEnabled())     _log.debug(""String_Node_Str"" + _name);
  }
  final Count retVal=new Count(matchCount,matchedCats);
  matchCounts.put(""String_Node_Str"" + _name + ""String_Node_Str"",retVal);
  for (  Category subCat : _children)   matchCounts.remove(""String_Node_Str"" + subCat._name + ""String_Node_Str"");
  return retVal;
}"
45210,"/** 
 * This method goes through the entire news archive and fetches news indexes for a desired news source.  Note that for the same news source, multiple indexes can be returned.  This can happen, for instance, when the news archive is organized by date, and so, the iterator will return one news index for each date.
 * @param s   Source for which news indexes have to be fetched
 * @param sd  Start date (inclusive) from which indexes have to be fetched(in format yyyymmdd)
 * @param ed  End date (inclusive) beyond which indexes should not be fetched(in format yyyymmdd)
 */
public abstract Iterator<? extends NewsIndex> getIndexesOfAllArchivedNews(Source s,String sd,String ed);","/** 
 * This method goes through the entire news archive and fetches news indexes for a desired news source.  Note that for the same news source, multiple indexes can be returned.  This can happen, for instance, when the news archive is organized by date, and so, the iterator will return one news index for each date.
 * @param s   Source for which news indexes have to be fetched
 * @param sd  Start date (inclusive) from which indexes have to be fetched
 * @param ed  End date (inclusive) beyond which indexes should not be fetched
 */
public abstract Iterator<? extends NewsIndex> getIndexesOfAllArchivedNews(Source s,Date sd,Date ed);"
45211,abstract public Timestamp getCreationTime();,abstract public Date getCreationTime();
45212,"private Long getNewsIndexKey(Long feedKey,String dateStr){
  String cacheKey=""String_Node_Str"" + feedKey + ""String_Node_Str""+ dateStr;
  Long niKey=(Long)_cache.get(cacheKey,SQL_NewsIndex.class);
  if (niKey == null) {
    niKey=(Long)GET_NEWS_INDEX_KEY.execute(new Object[]{feedKey,dateStr});
    if (niKey != null)     _cache.add((Long)null,cacheKey,Long.class,niKey);
  }
  return niKey;
}","private Long getNewsIndexKey(Long feedKey,String dateStr){
  String[] dateParts=dateStr.split(""String_Node_Str"");
  dateStr=((new StringBuffer(dateParts[2])).append('-').append(dateParts[1]).append('-').append(dateParts[0])).toString();
  String cacheKey=""String_Node_Str"" + feedKey + ""String_Node_Str""+ dateStr;
  Long niKey=(Long)_cache.get(cacheKey,SQL_NewsIndex.class);
  if (niKey == null) {
    niKey=(Long)GET_NEWS_INDEX_KEY.execute(new Object[]{feedKey,dateStr});
    if (niKey != null)     _cache.add((Long)null,cacheKey,Long.class,niKey);
  }
  return niKey;
}"
45213,"/** 
 * This method goes through the entire news archive and fetches news index files for a desired news source.  Note that for the same news source, multiple index files can be returned.  This can happen, for instance, when the news archive is organized by date, and so, the iterator will return one news index file for each date.
 * @param s   Source for which news indexes have to be fetched
 * @param sd  Start date (inclusive) from which index files have to be fetched(in format yyyymmdd)
 * @param ed  End date (inclusive) beyond which index files should not be fetched(in format yyyymmdd)
 */
public Iterator<? extends NewsIndex> getIndexesOfAllArchivedNews(Source s,String sd,String ed){
  if (_log.isInfoEnabled()) {
    _log.info(""String_Node_Str"" + sd);
    _log.info(""String_Node_Str"" + ed);
  }
  List<NewsIndex> res=new ArrayList<NewsIndex>();
  List<SQL_NewsIndex> nis=(List<SQL_NewsIndex>)GET_ALL_NEWS_INDEXES_FROM_FEED_ID.get(s.getFeed().getKey());
  for (  SQL_NewsIndex si : nis) {
    String[] flds=si.getDateString().split(""String_Node_Str"");
    if (inBetweenDates(flds[2],flds[1],flds[0],sd,ed)) {
      res.add(new SQL_NewsIndex(si.getKey()));
    }
  }
  return res.iterator();
}","/** 
 * This method goes through the entire news archive and fetches news index files for a desired news source.  Note that for the same news source, multiple index files can be returned.  This can happen, for instance, when the news archive is organized by date, and so, the iterator will return one news index file for each date.
 * @param s   Source for which news indexes have to be fetched
 * @param sd  Start date (inclusive) from which index files have to be fetched
 * @param ed  End date (inclusive) beyond which index files should not be fetched
 */
public Iterator<? extends NewsIndex> getIndexesOfAllArchivedNews(Source s,Date sd,Date ed){
  if (_log.isInfoEnabled()) {
    _log.info(""String_Node_Str"" + sd);
    _log.info(""String_Node_Str"" + ed);
  }
  return ((List<SQL_NewsIndex>)GET_ALL_NEWS_INDEXES_BETWEEN_DATES_FROM_FEED_ID.execute(new Object[]{s.getFeed().getKey(),new java.sql.Date(sd.getTime()),new java.sql.Date(ed.getTime())})).iterator();
}"
45214,"private static boolean inBetweenDates(String ddy,String ddm,String ddd,String stDate,String endDate){
  if (ddd.length() == 1)   ddd=""String_Node_Str"" + ddd;
  if (ddm.length() == 1)   ddm=""String_Node_Str"" + ddm;
  String dirDate=ddy + ddm + ddd;
  int dDate=Integer.parseInt(dirDate);
  int sDate=Integer.parseInt(stDate);
  int eDate=Integer.parseInt(endDate);
  boolean retVal=(sDate <= dDate) && (dDate <= eDate);
  return retVal;
}","private static boolean inBetweenDates(String ddy,String ddm,String ddd,String stDate,String endDate){
  if (ddd.length() == 1)   ddd=""String_Node_Str"" + ddd;
  if (ddm.length() == 1)   ddm=""String_Node_Str"" + ddm;
  String dirDate=ddy + ddm + ddd;
  int dDate=Integer.parseInt(dirDate);
  int sDate=Integer.parseInt(stDate);
  int eDate=Integer.parseInt(endDate);
  return (sDate <= dDate) && (dDate <= eDate);
}"
45215,"public List<NewsItem> getNews(Issue i,Date start,Date end,int startId,int numArts){
  List<NewsItem> news=new ArrayList<NewsItem>();
  List<Long> keys;
  if (start == null)   keys=(List<Long>)GET_NEWS_KEYS_FROM_ISSUE.execute(new Object[]{i.getKey(),startId,numArts});
 else   keys=(List<Long>)GET_NEWS_KEYS_FROM_ISSUE_BETWEEN_DATES.execute(new Object[]{i.getKey(),new Timestamp(start.getTime()),new Timestamp(end.getTime()),startId,numArts});
  for (  Long k : keys)   news.add(getNewsItem(k));
  return news;
}","public List<NewsItem> getNews(Issue i,Date start,Date end,int startId,int numArts){
  List<NewsItem> news=new ArrayList<NewsItem>();
  List<Long> keys;
  if (start == null)   keys=(List<Long>)GET_NEWS_KEYS_FROM_ISSUE.execute(new Object[]{i.getKey(),startId,numArts});
 else   keys=(List<Long>)GET_NEWS_KEYS_FROM_ISSUE_BETWEEN_DATES.execute(new Object[]{i.getKey(),new java.sql.Date(start.getTime()),new java.sql.Date(end.getTime()),startId,numArts});
  for (  Long k : keys)   news.add(getNewsItem(k));
  return news;
}"
45216,"public void reclassifyNews(Source s,boolean allDates,String sd,String ed){
  getUser();
  super.reclassifyNews(s,allDates,sd,ed);
}","public void reclassifyNews(Source s,boolean allDates,Date sd,Date ed){
  getUser();
  super.reclassifyNews(s,allDates,sd,ed);
}"
45217,"public Timestamp getCreationTime(){
  return _createdAt;
}","public Date getCreationTime(){
  return _createdAt;
}"
45218,"public SQL_NewsIndex(Long key,Long feedKey,String dateString){
  _niKey=key;
  _feedKey=feedKey;
  _dateString=dateString;
}","public SQL_NewsIndex(Long key,Long feedKey,Date d){
  _niKey=key;
  _feedKey=feedKey;
  _createdAt=d;
}"
45219,"public SQL_NewsItem(String urlRoot,String urlTail,String title,String desc,String author,Long feedKey,String date){
  String baseName=SQL_DB._sqldb.getBaseNameForArticle(urlRoot + urlTail);
  init(urlRoot,urlTail,baseName);
  setTitle(title);
  setDescription(desc);
  setDate(date);
  setAuthor(author);
  _feedKey=feedKey;
}","public SQL_NewsItem(String urlRoot,String urlTail,String title,String desc,String author,Long feedKey,Date d){
  String baseName=SQL_DB._sqldb.getBaseNameForArticle(urlRoot + urlTail);
  init(urlRoot,urlTail,baseName);
  setTitle(title);
  setDescription(desc);
  setDate(d);
  setAuthor(author);
  _feedKey=feedKey;
}"
45220,"public Object processResultSet(ResultSet rs) throws java.sql.SQLException {
  String urlRoot=rs.getString(3);
  String urlTail=rs.getString(4);
  String title=rs.getString(5);
  String desc=rs.getString(6);
  String author=rs.getString(7);
  String dateStr=rs.getString(8);
  Long feedKey=rs.getLong(9);
  SQL_NewsItem ni=new SQL_NewsItem(urlRoot,urlTail,title,desc,author,feedKey,dateStr);
  ni.setKey(rs.getLong(1));
  ni.setNewsIndexKey(rs.getLong(2));
  return ni;
}","public Object processResultSet(ResultSet rs) throws java.sql.SQLException {
  String urlRoot=rs.getString(3);
  String urlTail=rs.getString(4);
  String title=rs.getString(5);
  String desc=rs.getString(6);
  String author=rs.getString(7);
  Date date=rs.getDate(8);
  Long feedKey=rs.getLong(9);
  SQL_NewsItem ni=new SQL_NewsItem(urlRoot,urlTail,title,desc,author,feedKey,date);
  ni.setKey(rs.getLong(1));
  ni.setNewsIndexKey(rs.getLong(2));
  return ni;
}"
45221,"/** 
 * public because the xml digester requires the methods to be public
 */
public static void recordDomain(String domain){
  domain=normalizeURL(domain);
  _domainsWithoutCachedTextDisplay.add(domain);
  _log.info(""String_Node_Str"" + domain);
}","/** 
 * public because the xml digester requires the methods to be public
 */
public static void recordDomain(String domain){
  domain=normalizeURL(domain);
  _domainsWithoutCachedTextDisplay.add(domain);
  _log.debug(""String_Node_Str"" + domain);
}"
45222,"/** 
 * public because the xml digester requires the methods to be public
 */
public static void recordFeed(String feed){
  feed=normalizeURL(feed);
  _feedsWithoutCachedTextDisplay.add(feed);
  _log.info(""String_Node_Str"" + feed);
}","/** 
 * public because the xml digester requires the methods to be public
 */
public static void recordFeed(String feed){
  feed=normalizeURL(feed);
  _feedsWithoutCachedTextDisplay.add(feed);
  _log.debug(""String_Node_Str"" + feed);
}"
45223,"/** 
 * Reclassify news by reading in news from the entire archive since the beginning of time!!
 * @param iname      Issue to reclassify
 * @param srcs       Array of sources to classify from
 * @param allSrcs    Should all sources be used?
 * @param sd         Start date from which news should be classified (format is yyyymmdd)
 * @param ed         End date from which news should be classified   (format is yyyymmdd)
 * @param allDates   If true, all news items from the archive willbe classified.  The sdate and edate parameter values will be ignored
 * @param resetCats  If true, the categories will be reset andall existing news articles will be removed. If false, existing news articles will be retained. FIXME: This method should actually take a range of dates, a set of dates, or some other input like that.
 */
public void reclassifyNews(final String iname,final String[] srcs,final boolean allSrcs,final String sd,final String ed,final boolean allDates,final boolean resetCats) throws Exception {
  if (allDates) {
    final String s=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"";
    throw new Exception(s);
  }
  if (_reclassificationInProgress)   throw new Exception(""String_Node_Str"");
  try {
    _reclassificationInProgress=true;
    _concurrentProfileChange=false;
    final Issue issue=getIssue(iname);
    if (resetCats)     issue.clearNews();
    issue.readInCurrentRSSFeed();
    if (_log.isInfoEnabled())     _log.info(""String_Node_Str"");
    if (allSrcs) {
      int count=0;
      for (      Source s : issue.getMonitoredSources()) {
        if (concurrentProfileModification())         break;
        issue.reclassifyNews(s,allDates,sd,ed);
        count++;
      }
    }
 else {
      for (int i=0; i < srcs.length; i++) {
        if (concurrentProfileModification())         break;
        issue.reclassifyNews(getSourceById(srcs[i]),allDates,sd,ed);
      }
    }
    issue.freeRSSFeed();
  }
 catch (  final Exception e) {
    throw e;
  }
 finally {
    _reclassificationInProgress=false;
  }
}","/** 
 * Reclassify news by reading in news from the entire archive since the beginning of time!!
 * @param iname      Issue to reclassify
 * @param srcs       Array of sources to classify from
 * @param allSrcs    Should all sources be used?
 * @param sd         Start date from which news should be classified (format is yyyymmdd)
 * @param ed         End date from which news should be classified   (format is yyyymmdd)
 * @param allDates   If true, all news items from the archive willbe classified.  The sdate and edate parameter values will be ignored
 * @param resetCats  If true, the categories will be reset andall existing news articles will be removed. If false, existing news articles will be retained. FIXME: This method should actually take a range of dates, a set of dates, or some other input like that.
 */
public void reclassifyNews(final String iname,final String[] srcs,final boolean allSrcs,final String sd,final String ed,final boolean allDates,final boolean resetCats) throws Exception {
  if (allDates) {
    final String s=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"";
    throw new Exception(s);
  }
  if (_reclassificationInProgress)   throw new Exception(""String_Node_Str"");
  try {
    _reclassificationInProgress=true;
    _concurrentProfileChange=false;
    final Issue issue=getIssue(iname);
    if (resetCats)     issue.clearNews();
    issue.readInCurrentRSSFeed();
    if (_log.isInfoEnabled())     _log.info(""String_Node_Str"");
    if (allSrcs) {
      int count=0;
      for (      Source s : issue.getMonitoredSources()) {
        if (concurrentProfileModification())         break;
        issue.reclassifyNews(s,allDates,sd,ed);
        count++;
      }
    }
 else {
      for (int i=0; i < srcs.length; i++) {
        if (concurrentProfileModification())         break;
        issue.reclassifyNews(_db.getSource(Long.parseLong(srcs[i])),allDates,sd,ed);
      }
    }
    issue.freeRSSFeed();
  }
 catch (  final Exception e) {
    throw e;
  }
 finally {
    _reclassificationInProgress=false;
  }
}"
45224,"public Source getSourceById(String tag){
  return _db.getSource(this,tag);
}","public Source getSourceById(String tag){
  _log.info(""String_Node_Str"" + tag);
  return _db.getSource(this,tag);
}"
45225,"public void setUploadedFile(File f){
  _uploadedFile=f;
}","public void setUploadedFile(File f){
  _log.info(""String_Node_Str"" + f);
  _uploadedFile=f;
}"
45226,"public void setUploadedFileName(String n){
  _file=n;
}","public void setUploadedFileName(String n){
  _log.info(""String_Node_Str"" + n);
  _file=n;
}"
45227,"public void setUploadedContentType(String ct){
  _uploadedContentType=ct;
}","public void setUploadedContentType(String ct){
  _log.info(""String_Node_Str"" + ct);
  _uploadedContentType=ct;
}"
45228,"public List<Category> getChildren(){
  List<Category> children=super.getChildren();
  if (!isLeafCategory() && children.isEmpty()) {
    children=new ArrayList<Category>();
    List<Long> childKeys=(List<Long>)SQL_Stmt.GET_NESTED_CAT_KEYS.get(getKey());
    for (    Long k : childKeys) {
      Category c=SQL_DB._sqldb.getCategory(k);
      c.setParent(this);
      c.setIssue(this.getIssue());
      children.add(c);
    }
    setChildren(children);
  }
  return children;
}","public List<Category> getChildren(){
  List<Category> children=super.getChildren();
  if (isLeafCategory() || !children.isEmpty())   return children;
synchronized (this) {
    children=super.getChildren();
    if (isLeafCategory() || !children.isEmpty())     return children;
    children=new ArrayList<Category>();
    List<Long> childKeys=(List<Long>)SQL_Stmt.GET_NESTED_CAT_KEYS.get(getKey());
    for (    Long k : childKeys) {
      Category c=SQL_DB._sqldb.getCategory(k);
      c.setParent(this);
      c.setIssue(this.getIssue());
      children.add(c);
    }
    setChildren(children);
    return children;
  }
}"
45229,"public Collection<Category> getCategories(){
  Collection<Category> topLevelCats;
  if (_loaded) {
    topLevelCats=super.getCategories();
  }
 else {
    getUser();
    topLevelCats=new ArrayList<Category>();
    List<Long> catKeys=(List<Long>)SQL_Stmt.GET_CAT_KEYS_FOR_ISSUE.get(getKey());
    for (    Long k : catKeys) {
      Category c=SQL_DB._sqldb.getCategory(k);
      c.setIssue(this);
      if (c.isTopLevelCategory())       topLevelCats.add(c);
    }
    _loaded=true;
    super.addCategories(topLevelCats);
  }
  return topLevelCats;
}","public Collection<Category> getCategories(){
  if (_loaded)   return super.getCategories();
synchronized (this) {
    if (_loaded)     return super.getCategories();
    getUser();
    Collection<Category> topLevelCats=new ArrayList<Category>();
    List<Long> catKeys=(List<Long>)SQL_Stmt.GET_CAT_KEYS_FOR_ISSUE.get(getKey());
    for (    Long k : catKeys) {
      Category c=SQL_DB._sqldb.getCategory(k);
      c.setIssue(this);
      if (c.isTopLevelCategory())       topLevelCats.add(c);
    }
    _loaded=true;
    super.setCategories(topLevelCats);
    return topLevelCats;
  }
}"
45230,"public Collection<Source> getMonitoredSources(){
  Collection<Source> srcs=super.getMonitoredSources();
  if (srcs == null) {
    srcs=(List<Source>)SQL_Stmt.GET_MONITORED_SOURCES_FOR_TOPIC.execute(new Object[]{getKey()});
    super.addSources(srcs);
  }
  return srcs;
}","public Collection<Source> getMonitoredSources(){
  Collection<Source> srcs=super.getMonitoredSources();
  if (srcs == null) {
synchronized (this) {
      srcs=super.getMonitoredSources();
      if (srcs == null) {
        srcs=(List<Source>)SQL_Stmt.GET_MONITORED_SOURCES_FOR_TOPIC.execute(new Object[]{getKey()});
        super.addSources(srcs);
      }
    }
  }
  return srcs;
}"
45231,"public void addCategories(Collection<Category> cats){
  _topLevelCats=new ArrayList<Category>();
  _topLevelCats.addAll(cats);
  _taxonomyPath=_user.getUid() + File.separator + StringUtils.getOSFriendlyName(_name);
  for (  Category c : getCategories())   c.setupForDownloading(this);
  Integer iid=new Integer(0);
  _catMap.put(this,iid);
  _catMap.put(iid,this);
  int catId=readInExistingCatMap();
  for (  Category c : getCategories())   catId=c.updateCatMap(catId,_catMap);
  if (!GlobalConstants.testing())   outputCatMap();
}","public void addCategories(Collection<Category> cats){
  setCategories(cats);
  _taxonomyPath=_user.getUid() + File.separator + StringUtils.getOSFriendlyName(_name);
  for (  Category c : getCategories())   c.setupForDownloading(this);
  Integer iid=new Integer(0);
  _catMap.put(this,iid);
  _catMap.put(iid,this);
  int catId=readInExistingCatMap();
  for (  Category c : getCategories())   catId=c.updateCatMap(catId,_catMap);
  if (!GlobalConstants.testing())   outputCatMap();
}"
45232,"/** 
 * This method attempts to file an article into this category, if it is a leaf category, or attempts to file the article in all the sub-categories, if it is a non-leaf category.
 * @param article      The article to be filed
 * @param numTokens    Number of tokens encountered in the article
 * @param matchCounts  A table of all concepts that matched along withtheir corresponding match counts
 * @return             The hit count for this categoryIf a leaf category, the match count is determined by the filtering rule -- algorithm is not yet publicly documented. If a non-leaf category, the match count is the maximum of match count of its sub-categories
 */
public synchronized Count getMatchCount(final NewsItem article,final int numTokens,final Hashtable matchCounts){
  if (_log.isDebugEnabled())   _log.debug(""String_Node_Str"" + _name);
  ArrayList<Category> matchedCats=new ArrayList<Category>();
  int matchCount=0;
  if (isLeafCategory()) {
    if (_log.isDebugEnabled())     _log.debug(""String_Node_Str"" + _name + ""String_Node_Str""+ _filter._ruleString+ ""String_Node_Str"");
    matchCount=_filter.getMatchCount(matchCounts);
    if ((matchCount >= Filter.MIN_REQD_MATCH_COUNT) || ((numTokens < 250) && (matchCount > 0) && (matchCount < Filter.MIN_REQD_MATCH_COUNT))) {
      if (containsArticle(article))       return DEFAULT_COUNT;
      matchedCats.add(this);
    }
  }
 else {
    if (_log.isDebugEnabled())     _log.debug(""String_Node_Str"" + _name + ""String_Node_Str"");
    for (    Category subCat : _children) {
      Count subCatCount=subCat.getMatchCount(article,numTokens,matchCounts);
      if (subCatCount.value() > matchCount)       matchCount=subCatCount.value();
      matchedCats.addAll(subCatCount.getMatchedCats());
    }
    if (_log.isDebugEnabled())     _log.debug(""String_Node_Str"" + _name + ""String_Node_Str"");
  }
  if (!matchedCats.isEmpty()) {
    _outputFeed.addNewsItem(article,matchedCats);
    _db.addNewsItem(article,this,matchCount);
    _lastUpdateTime=new Date();
    if (_log.isDebugEnabled())     _log.debug(""String_Node_Str"" + _name);
  }
  final Count retVal=new Count(matchCount,matchedCats);
  matchCounts.put(""String_Node_Str"" + _name + ""String_Node_Str"",retVal);
  for (  Category subCat : _children) {
    matchCounts.remove(""String_Node_Str"" + subCat._name + ""String_Node_Str"");
  }
  return retVal;
}","/** 
 * This method attempts to file an article into this category, if it is a leaf category, or attempts to file the article in all the sub-categories, if it is a non-leaf category.
 * @param article      The article to be filed
 * @param numTokens    Number of tokens encountered in the article
 * @param matchCounts  A table of all concepts that matched along withtheir corresponding match counts
 * @return             The hit count for this categoryIf a leaf category, the match count is determined by the filtering rule -- algorithm is not yet publicly documented. If a non-leaf category, the match count is the maximum of match count of its sub-categories
 */
public synchronized Count getMatchCount(NewsItem article,int numTokens,Hashtable matchCounts){
  if (_log.isDebugEnabled())   _log.debug(""String_Node_Str"" + _name);
  ArrayList<Category> matchedCats=new ArrayList<Category>();
  int matchCount=0;
  if (isLeafCategory()) {
    if (_log.isDebugEnabled())     _log.debug(""String_Node_Str"" + _name + ""String_Node_Str""+ _filter._ruleString+ ""String_Node_Str"");
    matchCount=_filter.getMatchCount(article,numTokens,matchCounts);
    if ((matchCount >= Filter.MIN_REQD_MATCH_COUNT) || ((numTokens < 250) && (matchCount > 0) && (matchCount < Filter.MIN_REQD_MATCH_COUNT))) {
      if (containsArticle(article))       return DEFAULT_COUNT;
      matchedCats.add(this);
    }
  }
 else {
    if (_log.isDebugEnabled())     _log.debug(""String_Node_Str"" + _name + ""String_Node_Str"");
    for (    Category subCat : _children) {
      Count subCatCount=subCat.getMatchCount(article,numTokens,matchCounts);
      if (subCatCount.value() > matchCount)       matchCount=subCatCount.value();
      matchedCats.addAll(subCatCount.getMatchedCats());
    }
    if (_log.isDebugEnabled())     _log.debug(""String_Node_Str"" + _name + ""String_Node_Str"");
  }
  if (!matchedCats.isEmpty()) {
    _outputFeed.addNewsItem(article,matchedCats);
    _db.addNewsItem(article,this,matchCount);
    _lastUpdateTime=new Date();
    if (_log.isDebugEnabled())     _log.debug(""String_Node_Str"" + _name);
  }
  final Count retVal=new Count(matchCount,matchedCats);
  matchCounts.put(""String_Node_Str"" + _name + ""String_Node_Str"",retVal);
  for (  Category subCat : _children)   matchCounts.remove(""String_Node_Str"" + subCat._name + ""String_Node_Str"");
  return retVal;
}"
45233,"public int getMatchCount(final Hashtable matchCounts){
  final int ltCount=_lTerm.getMatchCount(matchCounts);
  final int rtCount=_rTerm.getMatchCount(matchCounts);
  if (_op == FilterOp.AND_TERM) {
    if ((ltCount == 0) || (rtCount == 0))     return 0;
 else     if ((ltCount > MIN_MATCH) && (rtCount > MIN_MATCH))     return (ltCount + rtCount) / 2;
 else     return ((ltCount < rtCount) ? ltCount : rtCount);
  }
 else   return ltCount + rtCount;
}","public int getMatchCount(NewsItem article,int numTokens,Hashtable matchCounts){
  final int ltCount=_lTerm.getMatchCount(article,numTokens,matchCounts);
  final int rtCount=_rTerm.getMatchCount(article,numTokens,matchCounts);
  if (_op == FilterOp.AND_TERM) {
    if ((ltCount == 0) || (rtCount == 0))     return 0;
 else     if ((ltCount > MIN_MATCH) && (rtCount > MIN_MATCH))     return (ltCount + rtCount) / 2;
 else     return ((ltCount < rtCount) ? ltCount : rtCount);
  }
 else   return ltCount + rtCount;
}"
45234,"public void clearCaches(){
  for (  OCache c : _caches.values())   c.clear();
}","public void clearCaches(){
  Map<Class,OCache> oldCaches=_caches;
  buildAllCaches();
  for (  OCache c : oldCaches.values())   c.destroy();
}"
45235,"public ObjectCache(){
  _caches=new java.util.HashMap<Class,OCache>(10);
  Properties p=new Properties();
  p.setProperty(""String_Node_Str"",""String_Node_Str"");
  p.setProperty(""String_Node_Str"",""String_Node_Str"");
  buildCache(""String_Node_Str"",User.class,p);
  buildCache(""String_Node_Str"",Issue.class,p);
  buildCache(""String_Node_Str"",Feed.class,p);
  buildCache(""String_Node_Str"",Source.class,p);
  buildCache(""String_Node_Str"",Category.class,p);
  buildCache(""String_Node_Str"",Filter.class,p);
  buildCache(""String_Node_Str"",NewsItem.class,p);
  _objectCache=buildCache(""String_Node_Str"",Object.class,p);
}","public ObjectCache(){
  buildAllCaches();
}"
45236,"public synchronized Count getMatchCount(final NewsItem article,final int numTokens,final Hashtable matchCounts){
  getFilter();
  getParent();
  return super.getMatchCount(article,numTokens,matchCounts);
}","public synchronized Count getMatchCount(final NewsItem article,final int numTokens,final Hashtable matchCounts){
  setupAll();
  return super.getMatchCount(article,numTokens,matchCounts);
}"
45237,"protected void collectUsedConcepts(Set<Concept> usedConcepts){
  getFilter();
  getParent();
  super.collectUsedConcepts(usedConcepts);
}","protected void collectUsedConcepts(Set<Concept> usedConcepts){
  setupAll();
  super.collectUsedConcepts(usedConcepts);
}"
45238,"/** 
 * public String getTaxonomy() { getFilter(); getParent(); return super.getTaxonomy(); }
 */
public User getUser(){
  User u=super.getUser();
  if (u == null)   u=SQL_DB._sqldb.getUser(_userKey);
 else   _log.debug(""String_Node_Str"" + _userKey);
  return u;
}","public User getUser(){
  User u=super.getUser();
  if (u == null)   u=SQL_DB._sqldb.getUser(_userKey);
 else   _log.debug(""String_Node_Str"" + _userKey);
  return u;
}"
45239,"protected void setupForDownloading(Issue issue){
  getFilter();
  getParent();
  super.setupForDownloading(issue);
}","protected void setupForDownloading(Issue issue){
  setupAll();
  super.setupForDownloading(issue);
}"
45240,"/** 
 * Remove a classified news item from a category
 * @param catKey   Category key (globally unique)
 * @param niKeys   NewsItem keys (globally unique)
 */
public void deleteNewsItemsFromCategory(Long catKey,List<Long> niKeys){
  _cache.removeEntriesForGroups(new String[]{""String_Node_Str"" + catKey});
  Connection c=null;
  PreparedStatement stmt=null;
  try {
    c=_dbPool.getConnection();
    stmt=c.prepareStatement(DELETE_5_NEWS_ITEMS_FROM_CAT._stmtString);
    stmt.setLong(1,catKey);
    int i=0;
    int numDeleted=0;
    Long lastVal=(long)0;
    for (    Long k : niKeys) {
      stmt.setLong(i + 2,k);
      i++;
      if (i % 5 == 0) {
        int n=stmt.executeUpdate();
        numDeleted+=n;
        i=0;
      }
      lastVal=k;
    }
    if (i % 5 != 0) {
      while (i % 5 != 0) {
        stmt.setLong(i + 2,lastVal);
        i++;
      }
      int n=stmt.executeUpdate();
      numDeleted+=n;
    }
    _log.info(""String_Node_Str"" + numDeleted + ""String_Node_Str"");
    if (numDeleted > 0) {
      Category cat=getCategory(catKey);
      cat.setNumArticles(cat.getNumArticles() - numDeleted);
      updateCatInfo(cat);
      updateArtCounts(cat.getIssue());
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    _log.error(""String_Node_Str"" + catKey);
  }
 finally {
    SQL_StmtExecutor.closeStatement(stmt);
    SQL_StmtExecutor.closeConnection(c);
  }
}","/** 
 * Remove a classified news item from a category
 * @param catKey   Category key (globally unique)
 * @param niKeys   NewsItem keys (globally unique)
 */
public void deleteNewsItemsFromCategory(Long catKey,List<Long> niKeys){
  _cache.removeEntriesForGroups(new String[]{""String_Node_Str"" + catKey});
  Connection c=null;
  PreparedStatement stmt=null;
  try {
    c=_dbPool.getConnection();
    stmt=c.prepareStatement(DELETE_5_NEWS_ITEMS_FROM_CAT._stmtString);
    stmt.setLong(1,catKey);
    int i=0;
    int numDeleted=0;
    Long lastVal=(long)0;
    for (    Long k : niKeys) {
      stmt.setLong(i + 2,k);
      i++;
      if (i % 5 == 0) {
        int n=stmt.executeUpdate();
        numDeleted+=n;
        i=0;
      }
      lastVal=k;
    }
    if (i % 5 != 0) {
      while (i % 5 != 0) {
        stmt.setLong(i + 2,lastVal);
        i++;
      }
      int n=stmt.executeUpdate();
      numDeleted+=n;
    }
    _log.info(""String_Node_Str"" + numDeleted + ""String_Node_Str"");
    if (numDeleted > 0) {
      Category cat=getCategory(catKey);
      cat.setNumArticles(cat.getNumArticles() - numDeleted);
      updateCatInfo(cat,true);
      updateArtCounts(cat.getIssue());
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    _log.error(""String_Node_Str"" + catKey);
  }
 finally {
    SQL_StmtExecutor.closeStatement(stmt);
    SQL_StmtExecutor.closeConnection(c);
  }
}"
45241,"private int updateArtCountsForCat(Category cat){
  if (!cat.isLeafCategory()) {
    int n=0;
    for (    Category ch : cat.getChildren())     n+=updateArtCountsForCat(ch);
    cat.setNumArticles(n);
  }
  updateCatInfo(cat);
  return cat.getNumArticles();
}","private int updateArtCountsForCat(Category cat){
  if (!cat.isLeafCategory()) {
    int n=0;
    for (    Category ch : cat.getChildren())     n+=updateArtCountsForCat(ch);
    cat.setNumArticles(n);
  }
  updateCatInfo(cat,false);
  return cat.getNumArticles();
}"
45242,"private void updateCatInfo(Category cat){
  if (_log.isDebugEnabled())   _log.debug(""String_Node_Str"" + cat.getName() + ""String_Node_Str""+ cat.getKey()+ ""String_Node_Str""+ cat.getNumArticles());
  Date lut=cat.getLastUpdateTime();
  if (lut != null)   lut=new Timestamp(lut.getTime());
  UPDATE_CAT_NEWS_INFO.execute(new Object[]{cat.getNumArticles(),lut,cat.getNumItemsSinceLastDownload(),cat.getKey()});
  User u=cat.getUser();
  Issue i=cat.getIssue();
  _cache.remove(cat.getKey(),Category.class);
  _cache.remove(i.getKey(),Issue.class);
  _cache.remove(u.getUid() + ""String_Node_Str"" + i.getName(),Issue.class);
  _cache.remove(u.getKey(),User.class);
  _cache.remove(u.getUid(),User.class);
}","private void updateCatInfo(Category cat,boolean purgeAllStaleCacheEntries){
  if (_log.isDebugEnabled())   _log.debug(""String_Node_Str"" + cat.getName() + ""String_Node_Str""+ cat.getKey()+ ""String_Node_Str""+ cat.getNumArticles());
  Date lut=cat.getLastUpdateTime();
  if (lut != null)   lut=new Timestamp(lut.getTime());
  UPDATE_CAT_NEWS_INFO.execute(new Object[]{cat.getNumArticles(),lut,cat.getNumItemsSinceLastDownload(),cat.getKey()});
  _cache.remove(cat.getKey(),Category.class);
  if (purgeAllStaleCacheEntries) {
    User u=cat.getUser();
    Issue i=cat.getIssue();
    _cache.remove(i.getKey(),Issue.class);
    _cache.remove(u.getUid() + ""String_Node_Str"" + i.getName(),Issue.class);
    _cache.remove(u.getKey(),User.class);
    _cache.remove(u.getUid(),User.class);
    updateIssueForCat(cat,getIssue(i.getKey()));
  }
}"
45243,"public List<Issue> getIssues(User u){
  List<Issue> issues=(List<Issue>)GET_ALL_ISSUES_BY_USER_KEY.execute(new Object[]{u.getKey()});
  for (  Issue i : issues) {
    i.setUser(u);
  }
  return issues;
}","public List<Issue> getIssues(User u){
  List<Issue> issues=(List<Issue>)GET_ALL_ISSUES_BY_USER_KEY.execute(new Object[]{u.getKey()});
  for (  Issue i : issues) {
    i.setUser(u);
    _cache.add(u.getKey(),u.getUid() + ""String_Node_Str"" + i.getName(),Issue.class,i);
  }
  return issues;
}"
45244,"private void updateArtCounts(Issue i){
  int n=0;
  for (  Category c : i.getCategories())   n+=updateArtCountsForCat(c);
  i.setNumArticles(n);
  if (_log.isDebugEnabled())   _log.debug(""String_Node_Str"" + i.getName() + ""String_Node_Str""+ i.getKey()+ ""String_Node_Str""+ n);
  UPDATE_ARTCOUNT_FOR_TOPIC.execute(new Object[]{n,new Timestamp(i.getLastUpdateTime().getTime()),i.getNumItemsSinceLastDownload(),i.getKey()});
}","private void updateArtCounts(Issue i){
  int n=0;
  for (  Category c : i.getCategories())   n+=updateArtCountsForCat(c);
  i.setNumArticles(n);
  if (_log.isDebugEnabled())   _log.debug(""String_Node_Str"" + i.getName() + ""String_Node_Str""+ i.getKey()+ ""String_Node_Str""+ n);
  UPDATE_ARTCOUNT_FOR_TOPIC.execute(new Object[]{n,new Timestamp(i.getLastUpdateTime().getTime()),i.getNumItemsSinceLastDownload(),i.getKey()});
  User u=i.getUser();
  _cache.remove(i.getKey(),Issue.class);
  _cache.remove(u.getUid() + ""String_Node_Str"" + i.getName(),Issue.class);
  _cache.remove(u.getKey(),User.class);
  _cache.remove(u.getUid(),User.class);
  i=getIssue(i.getKey());
  for (  Category c : i.getCategories())   updateIssueForCat(c,i);
}"
45245,"public Issue getIssue(User u,String issueName){
  String key=u.getUid() + ""String_Node_Str"" + issueName;
  Issue i=(Issue)_cache.get(key,Issue.class);
  if (i == null) {
    i=(Issue)GET_ISSUE_BY_USER_KEY.execute(new Object[]{u.getKey(),issueName});
    if (i != null) {
      _cache.add(u.getKey(),key,Issue.class,i);
      i.setUser(u);
    }
  }
  return i;
}","public Issue getIssue(User u,String issueName){
  String key=u.getUid() + ""String_Node_Str"" + issueName;
  Issue i=(Issue)_cache.get(key,Issue.class);
  if (i == null) {
    _log.info(""String_Node_Str"" + key + ""String_Node_Str"");
    i=(Issue)GET_ISSUE_BY_USER_KEY.execute(new Object[]{u.getKey(),issueName});
    if (i != null) {
      _cache.add(u.getKey(),key,Issue.class,i);
      i.setUser(u);
    }
  }
  return i;
}"
45246,"/** 
 * Remove a classified news item from a category
 * @param catKey   Category key (globally unique)
 * @param niKey    NewsItem key (globally unique)
 */
public void deleteNewsItemFromCategory(Long catKey,Long niKey){
  _cache.removeEntriesForGroups(new String[]{""String_Node_Str"" + catKey});
  Integer numDeleted=(Integer)DELETE_NEWS_FROM_CAT.execute(new Object[]{catKey,niKey});
  if (_log.isDebugEnabled())   _log.debug(""String_Node_Str"" + numDeleted + ""String_Node_Str""+ catKey);
  if (numDeleted > 0) {
    Category cat=getCategory(catKey);
    cat.setNumArticles(cat.getNumArticles() - numDeleted);
    updateCatInfo(cat);
    updateArtCounts(cat.getIssue());
  }
}","/** 
 * Remove a classified news item from a category
 * @param catKey   Category key (globally unique)
 * @param niKey    NewsItem key (globally unique)
 */
public void deleteNewsItemFromCategory(Long catKey,Long niKey){
  _cache.removeEntriesForGroups(new String[]{""String_Node_Str"" + catKey});
  Integer numDeleted=(Integer)DELETE_NEWS_FROM_CAT.execute(new Object[]{catKey,niKey});
  if (_log.isDebugEnabled())   _log.debug(""String_Node_Str"" + numDeleted + ""String_Node_Str""+ catKey);
  if (numDeleted > 0) {
    Category cat=getCategory(catKey);
    cat.setNumArticles(cat.getNumArticles() - numDeleted);
    updateCatInfo(cat,true);
    updateArtCounts(cat.getIssue());
  }
}"
45247,"/** 
 * Clears the list of articles classified in a category
 * @param c Category for which news is to be cleared
 */
public void clearNews(Category cat){
  CLEAR_CAT_NEWS.execute(new Object[]{cat.getKey()});
  cat.setNumArticles(0);
  updateCatInfo(cat);
  _cache.removeEntriesForGroups(new String[]{""String_Node_Str"" + cat.getKey()});
}","/** 
 * Clears the list of articles classified in a category
 * @param c Category for which news is to be cleared
 */
public void clearNews(Category cat){
  CLEAR_CAT_NEWS.execute(new Object[]{cat.getKey()});
  cat.setNumArticles(0);
  updateCatInfo(cat,true);
  _cache.removeEntriesForGroups(new String[]{""String_Node_Str"" + cat.getKey()});
  for (  Category c : cat.getChildren())   c.clearNews();
}"
45248,"/** 
 * This method clears all previously categorized news
 */
public void clearNews(){
  _db.clearNews(this);
  if (!isLeafCategory()) {
    for (    Category c : _children)     c.clearNews();
  }
}","/** 
 * This method clears all previously categorized news
 */
public void clearNews(){
  _db.clearNews(this);
}"
45249,"/** 
 * Add a issue to the profile -- only during parsing!
 */
public void addIssue(final Issue i) throws Exception {
  if (_issues == null)   _issues=new HashMap<String,Issue>();
  if (_issues.get(i.getName()) != null) {
    throw new Exception(""String_Node_Str"" + i.getName());
  }
 else {
    _issues.put(i.getName(),i);
  }
}","/** 
 * Add a issue to the profile -- only during parsing!
 */
public void addIssue(final Issue i) throws Exception {
  if (_issues == null)   initIssueMap();
  if (_issues.get(i.getName()) != null) {
    throw new Exception(""String_Node_Str"" + i.getName());
  }
 else {
    _issues.put(i.getName(),i);
  }
}"
45250,"private void loadIssuesFromDB(){
  _issues=new HashMap<String,Issue>();
  for (  Issue i : _db.getIssues(this)) {
    _log.debug(""String_Node_Str"" + i.getName() + ""String_Node_Str"");
    _issues.put(i.getName(),i);
  }
}","private void loadIssuesFromDB(){
  initIssueMap();
  for (  Issue i : _db.getIssues(this)) {
    if (_log.isDebugEnabled())     _log.debug(""String_Node_Str"" + i.getName() + ""String_Node_Str"");
    _issues.put(i.getName(),i);
  }
}"
45251,"public String execute(){
  Date ldt=DownloadNewsTask.getLastDownloadTime();
  _lastDownloadTime=SDF.get().format(ldt);
  String uid=getParam(""String_Node_Str"");
  if (uid == null) {
    if ((_updatesMostRecent == null) || _lastUpdateTime.before(ldt))     setIssueUpdateLists();
    return ""String_Node_Str"";
  }
 else {
    _issueOwner=User.getUser(uid);
    if (_issueOwner == null) {
      _log.info(""String_Node_Str"" + uid);
      return ""String_Node_Str"";
    }
    String issueName=getParam(""String_Node_Str"");
    if (issueName == null) {
      return ""String_Node_Str"";
    }
    _issue=_issueOwner.getIssue(issueName);
    if (_issue == null) {
      _log.info(""String_Node_Str"" + issueName + ""String_Node_Str""+ uid);
      return ""String_Node_Str"";
    }
    String catId=getParam(""String_Node_Str"");
    if (catId == null) {
      return ""String_Node_Str"";
    }
    _cat=_issue.getCategory(Integer.parseInt(catId));
    if (_cat == null) {
      _log.info(""String_Node_Str"" + catId + ""String_Node_Str""+ issueName+ ""String_Node_Str""+ uid);
      return ""String_Node_Str"";
    }
    Category c=_cat;
    LinkedList<Category> ancestors=new LinkedList<Category>();
    while (c != null) {
      c=c.getParent();
      if (c != null)       ancestors.addFirst(c);
    }
    _catAncestors=ancestors;
    if (!_cat.isLeafCategory()) {
      return ""String_Node_Str"";
    }
 else {
      _numArts=_cat.getNumArticles();
      String startVal=getParam(""String_Node_Str"");
      if (startVal == null) {
        _start=0;
      }
 else {
        _start=Integer.parseInt(startVal);
        if (_start < 0)         _start=0;
 else         if (_start > _numArts)         _start=_numArts;
      }
      String countVal=getParam(""String_Node_Str"");
      if (countVal == null) {
        _count=DEF_NUM_ARTS_PER_PAGE;
      }
 else {
        _count=Integer.parseInt(countVal);
        if (_count < MIN_NUM_ARTS_PER_PAGE)         _count=MIN_NUM_ARTS_PER_PAGE;
 else         if (_count > MAX_NUM_ARTS_PER_PAGE)         _count=MAX_NUM_ARTS_PER_PAGE;
      }
      String srcTag=getParam(""String_Node_Str"");
      Source src=null;
      if ((srcTag != null) && (srcTag != ""String_Node_Str""))       src=_issue.getSourceByTag(srcTag);
      Date startDate=null;
      String sdStr=getParam(""String_Node_Str"");
      if (sdStr != null) {
        try {
          startDate=DATE_PARSER.get().parse(sdStr);
        }
 catch (        Exception e) {
          addActionError(getText(""String_Node_Str"",sdStr));
          _log.info(""String_Node_Str"" + sdStr + e);
        }
      }
      Date endDate=null;
      String edStr=getParam(""String_Node_Str"");
      if (edStr != null) {
        try {
          endDate=DATE_PARSER.get().parse(edStr);
        }
 catch (        Exception e) {
          addActionError(getText(""String_Node_Str"",edStr));
          _log.info(""String_Node_Str"" + edStr + e);
        }
      }
      _news=_cat.getNews(startDate,endDate,src,_start,_count);
      return ""String_Node_Str"";
    }
  }
}","public String execute(){
  Date ldt=DownloadNewsTask.getLastDownloadTime();
  _lastDownloadTime=SDF.get().format(ldt);
  String uid=getParam(""String_Node_Str"");
  if (uid == null) {
    if ((_updatesMostRecent == null) || _lastUpdateTime.before(ldt))     setIssueUpdateLists();
    return ""String_Node_Str"";
  }
 else {
    _issueOwner=User.getUser(uid);
    if (_issueOwner == null) {
      _log.info(""String_Node_Str"" + uid);
      return ""String_Node_Str"";
    }
    String issueName=getParam(""String_Node_Str"");
    if (issueName == null) {
      return ""String_Node_Str"";
    }
    _issue=_issueOwner.getIssue(issueName);
    if (_issue == null) {
      _log.info(""String_Node_Str"" + issueName + ""String_Node_Str""+ uid);
      return ""String_Node_Str"";
    }
    String catId=getParam(""String_Node_Str"");
    if (catId == null) {
      return ""String_Node_Str"";
    }
    _cat=_issue.getCategory(Integer.parseInt(catId));
    if (_cat == null) {
      _log.info(""String_Node_Str"" + catId + ""String_Node_Str""+ issueName+ ""String_Node_Str""+ uid);
      return ""String_Node_Str"";
    }
    Category c=_cat;
    LinkedList<Category> ancestors=new LinkedList<Category>();
    while (c != null) {
      c=c.getParent();
      if (c != null)       ancestors.addFirst(c);
    }
    _catAncestors=ancestors;
    if (!_cat.isLeafCategory()) {
      return ""String_Node_Str"";
    }
 else {
      _numArts=_cat.getNumArticles();
      String startVal=getParam(""String_Node_Str"");
      if (startVal == null) {
        _start=0;
      }
 else {
        _start=Integer.parseInt(startVal) - 1;
        if (_start < 0)         _start=0;
 else         if (_start > _numArts)         _start=_numArts;
      }
      String countVal=getParam(""String_Node_Str"");
      if (countVal == null) {
        _count=DEF_NUM_ARTS_PER_PAGE;
      }
 else {
        _count=Integer.parseInt(countVal);
        if (_count < MIN_NUM_ARTS_PER_PAGE)         _count=MIN_NUM_ARTS_PER_PAGE;
 else         if (_count > MAX_NUM_ARTS_PER_PAGE)         _count=MAX_NUM_ARTS_PER_PAGE;
      }
      String srcTag=getParam(""String_Node_Str"");
      Source src=null;
      if ((srcTag != null) && (srcTag != ""String_Node_Str""))       src=_issue.getSourceByTag(srcTag);
      Date startDate=null;
      String sdStr=getParam(""String_Node_Str"");
      if (sdStr != null) {
        try {
          startDate=DATE_PARSER.get().parse(sdStr);
        }
 catch (        Exception e) {
          addActionError(getText(""String_Node_Str"",sdStr));
          _log.info(""String_Node_Str"" + sdStr + e);
        }
      }
      Date endDate=null;
      String edStr=getParam(""String_Node_Str"");
      if (edStr != null) {
        try {
          endDate=DATE_PARSER.get().parse(edStr);
        }
 catch (        Exception e) {
          addActionError(getText(""String_Node_Str"",edStr));
          _log.info(""String_Node_Str"" + edStr + e);
        }
      }
      _news=_cat.getNews(startDate,endDate,src,_start,_count);
      return ""String_Node_Str"";
    }
  }
}"
45252,"public User getUser(){
  User u=super.getUser();
  if (u == null)   u=SQL_DB._sqldb.getUser(_userKey);
 else   _log.debug(""String_Node_Str"" + _userKey);
  return u;
}","/** 
 * public String getTaxonomy() { getFilter(); getParent(); return super.getTaxonomy(); }
 */
public User getUser(){
  User u=super.getUser();
  if (u == null)   u=SQL_DB._sqldb.getUser(_userKey);
 else   _log.debug(""String_Node_Str"" + _userKey);
  return u;
}"
45253,"public String toString(){
  StringBuffer sb=new StringBuffer(""String_Node_Str"");
  sb.append(_name);
  sb.append(""String_Node_Str"");
  sb.append(_private);
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  for (  Category c : getCategories())   sb.append(c);
  sb.append(""String_Node_Str"");
  return sb.toString();
}","/** 
 * public String getTaxonomy() { StringBuffer sb = new StringBuffer(); sb.append(""<issue>\n""); sb.append(""<name>"" + _name + ""</name>\n""); for (Category c: getCategories()) sb.append(c.getTaxonomy()); sb.append(""</issue>\n""); return sb.toString(); }
 */
public String toString(){
  StringBuffer sb=new StringBuffer(""String_Node_Str"");
  sb.append(_name);
  sb.append(""String_Node_Str"");
  sb.append(_private);
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  for (  Category c : getCategories())   sb.append(c);
  sb.append(""String_Node_Str"");
  return sb.toString();
}"
45254,"/** 
 * This method updates the database with changes made to an user's entry
 * @param u User whose info. needs to be updated 
 */
public void updateUser(User u){
  UPDATE_USER.execute(new Object[]{u.getPassword(),u.getName(),u.getEmail(),u.isValidated(),u.getKey()});
}","/** 
 * This method updates the database with changes made to an user's entry
 * @param u User whose info. needs to be updated 
 */
public void updateUser(User u){
  UPDATE_USER.execute(new Object[]{u.getPassword(),u.getName(),u.getEmail(),u.isValidated(),u.getKey()});
  _cache.remove(u.getKey(),User.class);
  _cache.remove(u.getUid(),User.class);
}"
45255,"private void updateCatInfo(Category cat){
  if (_log.isDebugEnabled())   _log.debug(""String_Node_Str"" + cat.getName() + ""String_Node_Str""+ cat.getKey()+ ""String_Node_Str""+ cat.getNumArticles());
  Date lut=cat.getLastUpdateTime();
  if (lut != null)   lut=new Timestamp(lut.getTime());
  UPDATE_CAT_NEWS_INFO.execute(new Object[]{cat.getNumArticles(),lut,cat.getNumItemsSinceLastDownload(),cat.getKey()});
  User u=cat.getUser();
  Issue i=cat.getIssue();
  _cache.remove(cat.getKey(),Category.class);
  _cache.remove(i.getKey(),Issue.class);
  _cache.remove(u.getUid() + ""String_Node_Str"" + i.getName(),Issue.class);
  _cache.remove(u.getKey(),User.class);
}","private void updateCatInfo(Category cat){
  if (_log.isDebugEnabled())   _log.debug(""String_Node_Str"" + cat.getName() + ""String_Node_Str""+ cat.getKey()+ ""String_Node_Str""+ cat.getNumArticles());
  Date lut=cat.getLastUpdateTime();
  if (lut != null)   lut=new Timestamp(lut.getTime());
  UPDATE_CAT_NEWS_INFO.execute(new Object[]{cat.getNumArticles(),lut,cat.getNumItemsSinceLastDownload(),cat.getKey()});
  User u=cat.getUser();
  Issue i=cat.getIssue();
  _cache.remove(cat.getKey(),Category.class);
  _cache.remove(i.getKey(),Issue.class);
  _cache.remove(u.getUid() + ""String_Node_Str"" + i.getName(),Issue.class);
  _cache.remove(u.getKey(),User.class);
  _cache.remove(u.getUid(),User.class);
}"
45256,"/** 
 * This method updates the database with changes made to a feed
 * @param f Feed whose info. needs to be updated
 */
public void updateFeedCacheability(Feed f){
  UPDATE_FEED_CACHEABILITY.execute(new Object[]{f.getCacheableFlag(),f.getCachedTextDisplayFlag(),f.getKey()});
}","/** 
 * This method updates the database with changes made to a feed
 * @param f Feed whose info. needs to be updated
 */
public void updateFeedCacheability(Feed f){
  UPDATE_FEED_CACHEABILITY.execute(new Object[]{f.getCacheableFlag(),f.getCachedTextDisplayFlag(),f.getKey()});
  _cache.remove(f.getKey(),Feed.class);
}"
45257,"/** 
 * Gets the active profile
 */
public String getLastDownloadTime(){
  return GlobalConstants.DF.format(newsrack.archiver.DownloadNewsTask.getLastDownloadTime());
}","public Date getLastDownloadTime(){
  return newsrack.archiver.DownloadNewsTask.getLastDownloadTime();
}"
45258,"public String loginAsAnotherUser(){
  User u=getAdmin();
  if (u == null)   return Action.ERROR;
  String username=getParam(""String_Node_Str"");
  if (username == null) {
    addActionError(getText(""String_Node_Str""));
    log.error(""String_Node_Str"");
    return Action.INPUT;
  }
  try {
    log.info(""String_Node_Str"" + username);
    u=u.signInAsUser(username);
    log.info(""String_Node_Str"" + u.getUid());
    _user=u;
    _session.put(GlobalConstants.USER_KEY,_user);
    return Action.SUCCESS;
  }
 catch (  final Exception e) {
    addActionError(getText(""String_Node_Str"",new String[]{username}));
    log.error(""String_Node_Str"",e);
    return Action.INPUT;
  }
}","public String loginAsAnotherUser(){
  User u=getAdmin();
  if (u == null)   return Action.ERROR;
  String username=getParam(""String_Node_Str"");
  if (username == null) {
    addActionError(getText(""String_Node_Str""));
    log.error(""String_Node_Str"");
    return Action.INPUT;
  }
  try {
    log.info(""String_Node_Str"" + username);
    u=u.signInAsUser(username);
    log.info(""String_Node_Str"" + u.getUid());
    _session.put(GlobalConstants.UID_KEY,u.getUid());
    _session.put(GlobalConstants.USER_KEY,u);
    _user=u;
    return Action.SUCCESS;
  }
 catch (  final Exception e) {
    addActionError(getText(""String_Node_Str"",new String[]{username}));
    log.error(""String_Node_Str"",e);
    return Action.INPUT;
  }
}"
45259,"private User getAdmin(){
  User u=getSessionUser();
  if (u != null && !u.isAdmin()) {
    addActionError(getText(""String_Node_Str""));
    log.error(""String_Node_Str"" + u.getUid() + ""String_Node_Str"");
    return null;
  }
  return u;
}","/** 
 * private User _user; private User getUser() { return _user; }
 */
private User getAdmin(){
  User u=getSessionUser();
  if (u != null && !u.isAdmin()) {
    addActionError(getText(""String_Node_Str""));
    log.error(""String_Node_Str"" + u.getUid() + ""String_Node_Str"");
    return null;
  }
  return u;
}"
45260,"User getSessionUser(){
  return (User)_session.get(GlobalConstants.USER_KEY);
}","User getSessionUser(){
  _user=User.getUser((String)_session.get(GlobalConstants.UID_KEY));
  _session.put(GlobalConstants.USER_KEY,_user);
  return _user;
}"
45261,"/** 
 * private int _start; private int _count;   
 */
public User getUser(){
  return _user;
}","public User getUser(){
  return _user;
}"
45262,"public static void setIssueUpdateLists(){
  List<Issue> l1=new ArrayList<Issue>();
  List<Issue> l2=new ArrayList<Issue>();
  List<Issue> l3=new ArrayList<Issue>();
  List<Issue> issues=User.getAllValidatedIssues();
  for (  Issue i : issues) {
    int n=i.getNumItemsSinceLastDownload();
    if (n > 0)     l1.add(i);
 else     if ((n == 0) && i.updatedWithinLastNHours(24))     l2.add(i);
 else     l3.add(i);
  }
  _updatesMostRecent=l1;
  _updatesLast24Hrs=l2;
  _updatesMoreThan24Hrs=l3;
  _lastUpdateTime=new Date();
}","public static void setIssueUpdateLists(){
  List<Issue> l1=new ArrayList<Issue>();
  List<Issue> l2=new ArrayList<Issue>();
  List<Issue> l3=new ArrayList<Issue>();
  List<Issue> issues=User.getAllValidatedIssues();
  for (  Issue i : issues) {
    int n=i.getNumItemsSinceLastDownload();
    if ((n > 0) && (_lastUpdateTime != null))     l1.add(i);
 else     if (i.updatedWithinLastNHours(24))     l2.add(i);
 else     l3.add(i);
  }
  _updatesMostRecent=l1;
  _updatesLast24Hrs=l2;
  _updatesMoreThan24Hrs=l3;
  _lastUpdateTime=new Date();
}"
45263,"public String execute(){
  _user=getSessionUser();
  int catID=-1;
  int start=-1;
  int count=-1;
  long gCatKey=(long)-1;
  String issueName=null;
  List<Long> keys=new ArrayList<Long>();
  try {
    for (    Object pn : _params.keySet()) {
      String paramName=(String)pn;
      if (paramName.startsWith(""String_Node_Str"")) {
        String pv=getParamValue(paramName);
        if (pv != null)         keys.add(Long.valueOf(pv));
 else         continue;
      }
 else       if (paramName.equals(""String_Node_Str"")) {
        String pv=getParamValue(paramName);
        if (pv != null)         gCatKey=Long.parseLong(pv);
      }
 else       if (paramName.equals(""String_Node_Str"")) {
        issueName=getParamValue(paramName);
      }
 else       if (paramName.equals(""String_Node_Str"")) {
        String pv=getParamValue(paramName);
        if (pv != null)         catID=Integer.parseInt(pv);
      }
 else       if (paramName.equals(""String_Node_Str"")) {
        String pv=getParamValue(paramName);
        if (pv != null)         start=Integer.parseInt(pv);
      }
 else       if (paramName.equals(""String_Node_Str"")) {
        String pv=getParamValue(paramName);
        if (pv != null)         count=Integer.parseInt(pv);
      }
    }
    addActionMessage(getText(""String_Node_Str""));
  }
 catch (  Exception e) {
    _log.error(""String_Node_Str"",e);
    addActionError(getText(""String_Node_Str""));
  }
  if (gCatKey != -1)   Category.deleteNewsItems(gCatKey,keys);
  java.util.Date ldt=newsrack.archiver.DownloadNewsTask.getLastDownloadTime();
synchronized (GlobalConstants.DF) {
    _lastDownloadTime=GlobalConstants.DF.format(ldt);
  }
  if (issueName != null) {
    _issue=_user.getIssue(issueName);
    if (_issue != null) {
      if (catID > 0) {
        _currCat=_issue.getCategory(catID);
        if (_currCat != null) {
          LinkedList<Category> ancestors=new LinkedList<Category>();
          Category cat=_currCat;
          while (cat != null) {
            cat=cat.getParent();
            if (cat != null)             ancestors.addFirst(cat);
          }
          _catAncestors=ancestors;
        }
      }
    }
  }
  return Action.SUCCESS;
}","public String execute(){
  _user=getSessionUser();
  int catID=-1;
  int start=-1;
  int count=-1;
  long gCatKey=(long)-1;
  String issueName=null;
  List<Long> keys=new ArrayList<Long>();
  try {
    for (    Object pn : _params.keySet()) {
      String paramName=(String)pn;
      if (paramName.startsWith(""String_Node_Str"")) {
        String pv=getParamValue(paramName);
        if (pv != null)         keys.add(Long.valueOf(pv));
 else         continue;
      }
 else       if (paramName.equals(""String_Node_Str"")) {
        String pv=getParamValue(paramName);
        if (pv != null)         gCatKey=Long.parseLong(pv);
      }
 else       if (paramName.equals(""String_Node_Str"")) {
        issueName=getParamValue(paramName);
      }
 else       if (paramName.equals(""String_Node_Str"")) {
        String pv=getParamValue(paramName);
        if (pv != null)         catID=Integer.parseInt(pv);
      }
 else       if (paramName.equals(""String_Node_Str"")) {
        String pv=getParamValue(paramName);
        if (pv != null)         start=Integer.parseInt(pv);
      }
 else       if (paramName.equals(""String_Node_Str"")) {
        String pv=getParamValue(paramName);
        if (pv != null)         count=Integer.parseInt(pv);
      }
    }
    addActionMessage(getText(""String_Node_Str""));
  }
 catch (  Exception e) {
    _log.error(""String_Node_Str"",e);
    addActionError(getText(""String_Node_Str""));
  }
  if (gCatKey != -1) {
    Category.deleteNewsItems(gCatKey,keys);
    _user=getSessionUser();
  }
  java.util.Date ldt=newsrack.archiver.DownloadNewsTask.getLastDownloadTime();
synchronized (GlobalConstants.DF) {
    _lastDownloadTime=GlobalConstants.DF.format(ldt);
  }
  if (issueName != null) {
    _issue=_user.getIssue(issueName);
    if (_issue != null) {
      if (catID > 0) {
        _currCat=_issue.getCategory(catID);
        if (_currCat != null) {
          LinkedList<Category> ancestors=new LinkedList<Category>();
          Category cat=_currCat;
          while (cat != null) {
            cat=cat.getParent();
            if (cat != null)             ancestors.addFirst(cat);
          }
          _catAncestors=ancestors;
        }
      }
    }
  }
  return Action.SUCCESS;
}"
45264,"public String execute(){
  String uid=getParam(""String_Node_Str"");
  String pass=getParam(""String_Node_Str"");
  try {
    User u=User.signInUser(uid,pass);
    _session.put(GlobalConstants.USER_KEY,u);
    if (u.isAdmin())     return ""String_Node_Str"";
 else     return Action.SUCCESS;
  }
 catch (  UnknownUserException e) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str"",new String[]{uid}));
    return Action.INPUT;
  }
catch (  InvalidPasswordException e) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
    return Action.INPUT;
  }
}","public String execute(){
  String uid=getParam(""String_Node_Str"");
  String pass=getParam(""String_Node_Str"");
  try {
    User u=User.signInUser(uid,pass);
    _session.put(GlobalConstants.UID_KEY,u.getUid());
    _session.put(GlobalConstants.USER_KEY,u);
    if (u.isAdmin())     return ""String_Node_Str"";
 else     return Action.SUCCESS;
  }
 catch (  UnknownUserException e) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str"",new String[]{uid}));
    return Action.INPUT;
  }
catch (  InvalidPasswordException e) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
    return Action.INPUT;
  }
}"
45265,"public void validateSendPasswordResetKey(){
  String uid=getParam(""String_Node_Str"");
  if ((uid == null) || uid.trim().equals(""String_Node_Str""))   addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
}","/** 
 * private User _user; public User getUser() { return _user; }
 */
public void validateSendPasswordResetKey(){
  String uid=getParam(""String_Node_Str"");
  if ((uid == null) || uid.trim().equals(""String_Node_Str""))   addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
}"
45266,"public String checkPasswordResetKey(){
  String uid=getParam(""String_Node_Str"");
  User u=User.getUser(uid);
  if (u == null) {
    addActionError(getText(""String_Node_Str"",new String[]{uid}));
    return Action.ERROR;
  }
  String key=getParam(""String_Node_Str"");
  if ((key == null) || !PasswordService.isAValidPasswordResetKey(uid,key)) {
    addActionError(getText(""String_Node_Str""));
    return Action.ERROR;
  }
  _session.put(GlobalConstants.USER_KEY,u);
  return Action.SUCCESS;
}","public String checkPasswordResetKey(){
  String uid=getParam(""String_Node_Str"");
  User u=User.getUser(uid);
  if (u == null) {
    addActionError(getText(""String_Node_Str"",new String[]{uid}));
    return Action.ERROR;
  }
  String key=getParam(""String_Node_Str"");
  if ((key == null) || !PasswordService.isAValidPasswordResetKey(uid,key)) {
    addActionError(getText(""String_Node_Str""));
    return Action.ERROR;
  }
  _session.put(GlobalConstants.UID_KEY,u.getUid());
  _session.put(GlobalConstants.USER_KEY,u);
  return Action.SUCCESS;
}"
45267,"public String logout(){
  _session.remove(GlobalConstants.USER_KEY);
  return ""String_Node_Str"";
}","public String logout(){
  _session.remove(GlobalConstants.USER_KEY);
  _session.remove(GlobalConstants.UID_KEY);
  return ""String_Node_Str"";
}"
45268,"public ObjectCache(){
  Properties p=new Properties();
  p.setProperty(""String_Node_Str"",""String_Node_Str"");
  p.setProperty(""String_Node_Str"",""String_Node_Str"");
  p.setProperty(""String_Node_Str"",GlobalConstants.getProperty(""String_Node_Str""));
  p.setProperty(""String_Node_Str"",""String_Node_Str"");
  _objectCache=new OCache(""String_Node_Str"",p);
  p.setProperty(""String_Node_Str"",""String_Node_Str"");
  _userCache=new OCache(""String_Node_Str"",p);
  p.setProperty(""String_Node_Str"",""String_Node_Str"");
  _issueCache=new OCache(""String_Node_Str"",p);
  p.setProperty(""String_Node_Str"",""String_Node_Str"");
  _feedCache=new OCache(""String_Node_Str"",p);
  p.setProperty(""String_Node_Str"",""String_Node_Str"");
  _srcCache=new OCache(""String_Node_Str"",p);
  p.setProperty(""String_Node_Str"",""String_Node_Str"");
  _categoryCache=new OCache(""String_Node_Str"",p);
  p.setProperty(""String_Node_Str"",""String_Node_Str"");
  _filterCache=new OCache(""String_Node_Str"",p);
  _caches=new java.util.HashMap<Class,OCache>(10);
  _caches.put(Object.class,_objectCache);
  _caches.put(Feed.class,_feedCache);
  _caches.put(User.class,_userCache);
  _caches.put(Issue.class,_issueCache);
  _caches.put(Source.class,_srcCache);
  _caches.put(Category.class,_categoryCache);
  _caches.put(Filter.class,_filterCache);
}","public ObjectCache(){
  Properties p=new Properties();
  p.setProperty(""String_Node_Str"",""String_Node_Str"");
  p.setProperty(""String_Node_Str"",""String_Node_Str"");
  p.setProperty(""String_Node_Str"",GlobalConstants.getProperty(""String_Node_Str""));
  p.setProperty(""String_Node_Str"",""String_Node_Str"");
  _objectCache=new OCache(""String_Node_Str"",p);
  p.setProperty(""String_Node_Str"",""String_Node_Str"");
  _userCache=new OCache(""String_Node_Str"",p);
  p.setProperty(""String_Node_Str"",""String_Node_Str"");
  _issueCache=new OCache(""String_Node_Str"",p);
  p.setProperty(""String_Node_Str"",""String_Node_Str"");
  _feedCache=new OCache(""String_Node_Str"",p);
  p.setProperty(""String_Node_Str"",""String_Node_Str"");
  _srcCache=new OCache(""String_Node_Str"",p);
  p.setProperty(""String_Node_Str"",""String_Node_Str"");
  _categoryCache=new OCache(""String_Node_Str"",p);
  p.setProperty(""String_Node_Str"",""String_Node_Str"");
  _filterCache=new OCache(""String_Node_Str"",p);
  p.setProperty(""String_Node_Str"",""String_Node_Str"");
  _newsItemCache=new OCache(""String_Node_Str"",p);
  _caches=new java.util.HashMap<Class,OCache>(10);
  _caches.put(Object.class,_objectCache);
  _caches.put(Feed.class,_feedCache);
  _caches.put(NewsItem.class,_newsItemCache);
  _caches.put(User.class,_userCache);
  _caches.put(Issue.class,_issueCache);
  _caches.put(Source.class,_srcCache);
  _caches.put(Category.class,_categoryCache);
  _caches.put(Filter.class,_filterCache);
}"
45269,"public void removeEntriesForGroups(String[] cacheGroups){
  _userCache.removeGroups(cacheGroups);
  _feedCache.removeGroups(cacheGroups);
  _srcCache.removeGroups(cacheGroups);
  _issueCache.removeGroups(cacheGroups);
  _categoryCache.removeGroups(cacheGroups);
  _filterCache.removeGroups(cacheGroups);
  _objectCache.removeGroups(cacheGroups);
}","public void removeEntriesForGroups(String[] cacheGroups){
  for (  OCache c : _caches.values())   c.removeGroups(cacheGroups);
}"
45270,"public void printStats(){
  _objectCache.printStats();
  _feedCache.printStats();
  _userCache.printStats();
  _issueCache.printStats();
  _srcCache.printStats();
  _categoryCache.printStats();
  _filterCache.printStats();
}","public void printStats(){
  for (  OCache c : _caches.values())   c.printStats();
}"
45271,"/** 
 * Record a classified news item!
 * @param ni   News Item that has been classified in category c
 * @param c    Category into which ni has been classified
 * @param matchCount  Match weight
 */
public void addNewsItem(NewsItem ni,Category cat,int matchCount){
  if (cat.isLeafCategory()) {
    _cache.removeEntriesForGroups(new String[]{""String_Node_Str"" + cat.getKey()});
    SQL_NewsItem sni=(SQL_NewsItem)ni;
    if (!sni.inTheDB())     _log.error(""String_Node_Str"" + sni + ""String_Node_Str"");
    INSERT_INTO_CAT_NEWS_TABLE.execute(new Object[]{cat.getKey(),sni.getKey(),sni.getNewsIndex().getKey()});
    cat.setNumArticles(1 + cat.getNumArticles());
  }
}","/** 
 * Record a classified news item!
 * @param ni   News Item that has been classified in category c
 * @param c    Category into which ni has been classified
 * @param matchCount  Match weight
 */
public void addNewsItem(NewsItem ni,Category cat,int matchCount){
  if (cat.isLeafCategory()) {
    _cache.removeEntriesForGroups(new String[]{""String_Node_Str"" + cat.getKey()});
    SQL_NewsItem sni=(SQL_NewsItem)ni;
    if (!sni.inTheDB())     _log.error(""String_Node_Str"" + sni + ""String_Node_Str"");
    SQL_NewsIndex idx=sni.getNewsIndex();
    INSERT_INTO_CAT_NEWS_TABLE.execute(new Object[]{cat.getKey(),sni.getKey(),idx.getKey(),idx.getCreationTime()});
    cat.setNumArticles(1 + cat.getNumArticles());
  }
}"
45272,"/** 
 * Gets list of articles classified in a category -- starting at a specified index
 * @param c 		Category for which news is being sought
 * @param startId The starting index
 * @param numArts Number of articles requested
 */
public Iterator<NewsItem> getNews(Category cat,int startId,int numArts){
  Object news=null;
  String cacheKey=""String_Node_Str"" + cat.getKey() + ""String_Node_Str""+ startId+ ""String_Node_Str""+ numArts;
  news=_cache.get(cacheKey,List.class);
  if (news == null) {
    news=GET_NEWS_FROM_CAT.execute(new Object[]{cat.getKey(),startId,numArts});
    _cache.add(new String[]{cat.getUser().getKey().toString(),""String_Node_Str"" + cat.getKey()},cacheKey,List.class,news);
  }
  return ((List<NewsItem>)news).iterator();
}","/** 
 * Gets list of articles classified in a category -- starting at a specified index
 * @param c 		Category for which news is being sought
 * @param startId The starting index
 * @param numArts Number of articles requested
 */
public Iterator<NewsItem> getNews(Category cat,int startId,int numArts){
  Object news=null;
  String cacheKey=""String_Node_Str"" + cat.getKey() + ""String_Node_Str""+ startId+ ""String_Node_Str""+ numArts;
  news=_cache.get(cacheKey,List.class);
  if (news == null) {
    news=GET_NEWS_KEYS_FROM_CAT.execute(new Object[]{cat.getKey(),startId,numArts});
    _cache.add(new String[]{cat.getUser().getKey().toString(),""String_Node_Str"" + cat.getKey()},cacheKey,List.class,news);
  }
  List<NewsItem> nis=new ArrayList<NewsItem>();
  for (  Long k : (List<Long>)news)   nis.add(getNewsItem(k));
  return nis.iterator();
}"
45273,"/** 
 * Runs the download news task -- news is downloaded from all active news feeds across all registered users. 
 */
public void run(){
  if (GlobalConstants.testing() || GlobalConstants.isTrue(""String_Node_Str""))   return;
  if (SiteCrawlerTask.checkCrawlersFile())   return;
  if (_log.isInfoEnabled()) {
    _log.info(""String_Node_Str"");
    _log.info(""String_Node_Str"" + _count + ""String_Node_Str""+ (new java.util.Date()));
  }
  _count++;
  ThreadManager.recordThread(Thread.currentThread());
  _downloadedNews=new ConcurrentHashMap<String,Collection>();
  _completedDownloadsCount=0;
  _completedIssuesCount=0;
  try {
    ExecutorService tpool=Executors.newFixedThreadPool(DOWNLOAD_MAX_THREADS);
    int feedCount=0;
    Collection<Feed> activeFeeds=Feed.getActiveFeeds();
    for (    Feed f : activeFeeds) {
      feedCount++;
      tpool.execute(new FeedDownloader(f));
    }
    while (_completedDownloadsCount < feedCount) {
      StringUtils.sleep(30);
      _log.info(""String_Node_Str"" + _completedDownloadsCount + ""String_Node_Str""+ feedCount+ ""String_Node_Str"");
    }
    if (!shutDownThreadPool(tpool))     return;
    tpool=Executors.newFixedThreadPool(CLASSIFY_MAX_THREADS);
    int issueCount=0;
    Collection<User> users=User.getAllUsers();
    for (    User u : users) {
      try {
        u.doPreDownloadBookkeeping();
        Collection<Issue> issues=u.getIssues();
        if (issues != null) {
          for (          Issue i : issues) {
            tpool.execute(new NewsClassifier(i));
            issueCount++;
          }
        }
      }
 catch (      Exception e) {
        _log.error(""String_Node_Str"" + u.getUid(),e);
      }
    }
    while (_completedIssuesCount < issueCount) {
      StringUtils.sleep(30);
      _log.info(""String_Node_Str"" + _completedIssuesCount + ""String_Node_Str""+ issueCount+ ""String_Node_Str"");
    }
    for (    User u : users) {
      u.doPostDownloadBookkeeping();
      if (_log.isInfoEnabled())       _log.info(""String_Node_Str"" + u.getUid() + ""String_Node_Str"");
    }
    shutDownThreadPool(tpool);
  }
  finally {
    _lastDownloadTime=new Date();
    ThreadManager.removeThread(Thread.currentThread());
    _downloadedNews=null;
    newsrack.web.BrowseAction.setIssueUpdateLists();
  }
}","/** 
 * Runs the download news task -- news is downloaded from all active news feeds across all registered users. 
 */
public void run(){
  if (GlobalConstants.testing() || GlobalConstants.isTrue(""String_Node_Str""))   return;
  if (SiteCrawlerTask.checkCrawlersFile())   return;
  if (_log.isInfoEnabled()) {
    _log.info(""String_Node_Str"");
    _log.info(""String_Node_Str"" + _count + ""String_Node_Str""+ (new java.util.Date()));
  }
  _count++;
  ThreadManager.recordThread(Thread.currentThread());
  _downloadedNews=new ConcurrentHashMap<String,Collection>();
  _completedDownloadsCount=0;
  _completedIssuesCount=0;
  try {
    ExecutorService tpool=Executors.newFixedThreadPool(DOWNLOAD_MAX_THREADS);
    int feedCount=0;
    Collection<Feed> activeFeeds=Feed.getActiveFeeds();
    for (    Feed f : activeFeeds) {
      feedCount++;
      tpool.execute(new FeedDownloader(f));
    }
    int noChangeIntervals=0;
    int prev=0;
    while (_completedDownloadsCount < feedCount) {
      StringUtils.sleep(30);
      _log.info(""String_Node_Str"" + _completedDownloadsCount + ""String_Node_Str""+ feedCount+ ""String_Node_Str"");
      if (_completedDownloadsCount == prev) {
        noChangeIntervals++;
        if (noChangeIntervals == 60) {
          _log.error(""String_Node_Str"");
          break;
        }
      }
 else {
        prev=_completedDownloadsCount;
        noChangeIntervals=0;
      }
    }
    if (!shutDownThreadPool(tpool))     return;
    tpool=Executors.newFixedThreadPool(CLASSIFY_MAX_THREADS);
    int issueCount=0;
    Collection<User> users=User.getAllUsers();
    for (    User u : users) {
      try {
        u.doPreDownloadBookkeeping();
      }
 catch (      Exception e) {
        _log.error(""String_Node_Str"",e);
      }
    }
    List<Issue> issues=User.getAllValidatedIssues();
    for (    Issue i : issues) {
      tpool.execute(new NewsClassifier(i));
      issueCount++;
    }
    noChangeIntervals=0;
    prev=0;
    while (_completedIssuesCount < issueCount) {
      StringUtils.sleep(30);
      _log.info(""String_Node_Str"" + _completedIssuesCount + ""String_Node_Str""+ issueCount+ ""String_Node_Str"");
      if (_completedIssuesCount == prev) {
        noChangeIntervals++;
        if (noChangeIntervals == 60) {
          _log.error(""String_Node_Str"");
          break;
        }
      }
 else {
        prev=_completedIssuesCount;
        noChangeIntervals=0;
      }
    }
    for (    User u : users)     u.doPostDownloadBookkeeping();
    shutDownThreadPool(tpool);
  }
  finally {
    _lastDownloadTime=new Date();
    ThreadManager.removeThread(Thread.currentThread());
    _downloadedNews=null;
  }
}"
45274,"private NewsItem downloadNewsItem(String baseUrl,SyndEntry se,Date date){
  PrintWriter filtPw=null;
  PrintWriter origPw=null;
  NewsItem ni=null;
  try {
    String origURL=URLCanonicalizer.cleanup(baseUrl,se.getLink());
    String canonicalUrl=URLCanonicalizer.canonicalize(origURL);
    if (_log.isInfoEnabled())     _log.info(""String_Node_Str"" + canonicalUrl);
    ni=_db.getNewsItemFromURL(canonicalUrl);
    if (ni != null) {
      if (_log.isInfoEnabled())       _log.info(""String_Node_Str"" + ni.getLocalCopyPath());
      return ni;
    }
    ni=_db.createNewsItem(canonicalUrl,this,date);
    filtPw=_db.getWriterForFilteredArticle(ni);
    origPw=_db.getWriterForOrigArticle(ni);
    try {
      if ((filtPw != null) && (origPw != null)) {
        boolean done=false;
        int numTries=0;
        do {
          numTries++;
          HTMLFilter hf=new HTMLFilter(origURL,filtPw,true);
          hf.run();
          String origText=hf.getOrigHtml();
          if (origText != null) {
            String newUrl=hf.getUrl();
            if (!newUrl.equals(canonicalUrl))             _log.info(""String_Node_Str"" + canonicalUrl + ""String_Node_Str""+ newUrl);
            origPw.println(origText);
            done=true;
          }
 else {
            _log.info(""String_Node_Str"" + origURL + ""String_Node_Str"");
            StringUtils.sleep(5);
          }
        }
 while (!done && (numTries < 3));
      }
 else {
        _log.info(""String_Node_Str"" + origURL);
      }
    }
 catch (    Exception e) {
      if (filtPw != null)       _db.deleteFilteredArticle(ni);
      throw e;
    }
    if (origPw != null)     origPw.close();
    if (filtPw != null)     filtPw.close();
    StringUtils.sleep(1);
    return ni;
  }
 catch (  Exception e) {
    if (origPw != null)     origPw.close();
    if (filtPw != null)     filtPw.close();
    if (_log.isInfoEnabled())     _log.info(""String_Node_Str"");
    if (_log.isErrorEnabled()) {
      _log.error(""String_Node_Str"" + se.getLink().trim());
      _log.error(""String_Node_Str"" + e);
      e.printStackTrace();
    }
    return null;
  }
}","private NewsItem downloadNewsItem(String baseUrl,SyndEntry se,Date date){
  PrintWriter filtPw=null;
  PrintWriter origPw=null;
  NewsItem ni=null;
  try {
    String origURL=URLCanonicalizer.cleanup(baseUrl,se.getLink());
    String canonicalUrl=URLCanonicalizer.canonicalize(origURL);
    if (_log.isInfoEnabled())     _log.info(""String_Node_Str"" + canonicalUrl);
    ni=_db.getNewsItemFromURL(canonicalUrl);
    if (ni != null) {
      if (_log.isInfoEnabled())       _log.info(""String_Node_Str"" + ni.getLocalCopyPath());
      return ni;
    }
    ni=_db.createNewsItem(canonicalUrl,this,date);
    filtPw=_db.getWriterForFilteredArticle(ni);
    origPw=_db.getWriterForOrigArticle(ni);
    try {
      if ((filtPw != null) && (origPw != null)) {
        boolean done=false;
        int numTries=0;
        do {
          numTries++;
          HTMLFilter hf=new HTMLFilter(origURL,filtPw,true);
          hf.run();
          String origText=hf.getOrigHtml();
          if (origText != null) {
            String newUrl=hf.getUrl();
            if (!newUrl.equals(canonicalUrl))             _log.info(""String_Node_Str"" + canonicalUrl + ""String_Node_Str""+ newUrl);
            origPw.println(origText);
            done=true;
          }
 else {
            _log.info(""String_Node_Str"" + origURL + ""String_Node_Str"");
            StringUtils.sleep(5);
          }
        }
 while (!done && (numTries < 3));
      }
 else {
        _log.info(""String_Node_Str"" + origURL);
      }
    }
 catch (    Exception e) {
      if (filtPw != null)       _db.deleteFilteredArticle(ni);
      throw e;
    }
    if (origPw != null)     origPw.close();
    if (filtPw != null)     filtPw.close();
    StringUtils.sleep(1);
    return ni;
  }
 catch (  Exception e) {
    if (origPw != null)     origPw.close();
    if (filtPw != null)     filtPw.close();
    if (_log.isInfoEnabled())     _log.info(""String_Node_Str"");
    _log.error(""String_Node_Str"" + se.getLink().trim(),e);
    return null;
  }
}"
45275,"/** 
 * This method registers the user with the database .. in the process, it might initialize user space.
 * @param u   User who has to be registered
 */
public void registerUser(User u){
  IOUtils.createDir(getUserHome(u));
  IOUtils.createDir(getFileUploadArea(u));
  u.setKey((Long)INSERT_USER.execute(new Object[]{u.getUid(),u.getPassword(),u.getName(),u.getEmail()}));
}","/** 
 * This method registers the user with the database .. in the process, it might initialize user space.
 * @param u   User who has to be registered
 */
public void registerUser(User u){
  IOUtils.createDir(getUserHome(u));
  IOUtils.createDir(getFileUploadArea(u));
  IOUtils.createDir(getUserSpaceWorkDir(u));
  u.setKey((Long)INSERT_USER.execute(new Object[]{u.getUid(),u.getPassword(),u.getName(),u.getEmail()}));
}"
45276,"private void updateCatInfo(Category cat){
  if (_log.isDebugEnabled())   _log.debug(""String_Node_Str"" + cat.getName() + ""String_Node_Str""+ cat.getKey()+ ""String_Node_Str""+ cat.getNumArticles());
  Date lut=cat.getLastUpdateTime();
  if (lut != null)   lut=new Timestamp(lut.getTime());
  UPDATE_CAT_NEWS_INFO.execute(new Object[]{cat.getNumArticles(),lut,cat.getKey()});
  User u=cat.getUser();
  Issue i=cat.getIssue();
  _cache.remove(cat.getKey(),Category.class);
  _cache.remove(i.getKey(),Issue.class);
  _cache.remove(u.getUid() + ""String_Node_Str"" + i.getName(),Issue.class);
  _cache.remove(u.getKey(),User.class);
}","private void updateCatInfo(Category cat){
  if (_log.isDebugEnabled())   _log.debug(""String_Node_Str"" + cat.getName() + ""String_Node_Str""+ cat.getKey()+ ""String_Node_Str""+ cat.getNumArticles());
  Date lut=cat.getLastUpdateTime();
  if (lut != null)   lut=new Timestamp(lut.getTime());
  UPDATE_CAT_NEWS_INFO.execute(new Object[]{cat.getNumArticles(),lut,cat.getNumItemsSinceLastDownload(),cat.getKey()});
  User u=cat.getUser();
  Issue i=cat.getIssue();
  _cache.remove(cat.getKey(),Category.class);
  _cache.remove(i.getKey(),Issue.class);
  _cache.remove(u.getUid() + ""String_Node_Str"" + i.getName(),Issue.class);
  _cache.remove(u.getKey(),User.class);
}"
45277,"private void updateArtCounts(Issue i){
  int n=0;
  for (  Category c : i.getCategories())   n+=updateArtCountsForCat(c);
  i.setNumArticles(n);
  if (_log.isDebugEnabled())   _log.debug(""String_Node_Str"" + i.getName() + ""String_Node_Str""+ i.getKey()+ ""String_Node_Str""+ n);
  UPDATE_ARTCOUNT_FOR_TOPIC.execute(new Object[]{n,new Timestamp(i.getLastUpdateTime().getTime()),i.getKey()});
}","private void updateArtCounts(Issue i){
  int n=0;
  for (  Category c : i.getCategories())   n+=updateArtCountsForCat(c);
  i.setNumArticles(n);
  if (_log.isDebugEnabled())   _log.debug(""String_Node_Str"" + i.getName() + ""String_Node_Str""+ i.getKey()+ ""String_Node_Str""+ n);
  UPDATE_ARTCOUNT_FOR_TOPIC.execute(new Object[]{n,new Timestamp(i.getLastUpdateTime().getTime()),i.getNumItemsSinceLastDownload(),i.getKey()});
}"
45278,"public SQL_IssueStub(Long key,Long userKey,String name,int numArts,Date lut,boolean isValidated,boolean isFrozen,boolean isPrivate,String taxoPath){
  super(name,isValidated,isFrozen,isPrivate);
  _userKey=userKey;
  super.setKey(key);
  super.setNumArticles(numArts);
  super.setLastUpdateTime(lut);
  super.setTaxonomyPath(taxoPath);
  _loaded=false;
}","public SQL_IssueStub(Long key,Long userKey,String name,int numArts,Date lut,boolean isValidated,boolean isFrozen,boolean isPrivate,String taxoPath,int numNew){
  super(name,isValidated,isFrozen,isPrivate);
  _userKey=userKey;
  super.setKey(key);
  super.setNumArticles(numArts);
  super.setLastUpdateTime(lut);
  super.setTaxonomyPath(taxoPath);
  super.setNumItemsSinceLastDownload(numNew);
  _loaded=false;
}"
45279,"public static void main(String[] args){
  if (args.length < 2) {
    System.out.println(""String_Node_Str"");
    System.exit(0);
  }
  String appPropertiesFile=args[0];
  String action=args[1];
  System.out.println(""String_Node_Str"" + appPropertiesFile);
  GlobalConstants.startup(null,appPropertiesFile);
  if (action.equals(""String_Node_Str"")) {
    migrateAllV1UsersToV2();
  }
 else   if (action.equals(""String_Node_Str"")) {
    updateArtCounts();
  }
 else {
    System.out.println(""String_Node_Str"" + action);
  }
  System.out.println(""String_Node_Str"");
}","public static void main(String[] args){
  if (args.length < 2) {
    System.out.println(""String_Node_Str"");
    System.exit(0);
  }
  String appPropertiesFile=args[0];
  String action=args[1];
  System.out.println(""String_Node_Str"" + appPropertiesFile);
  GlobalConstants.startup(null,appPropertiesFile);
  if (action.equals(""String_Node_Str"")) {
    migrateAllV1UsersToV2();
  }
 else   if (action.equals(""String_Node_Str"")) {
    updateArtCounts();
  }
 else {
    System.out.println(""String_Node_Str"" + action);
  }
  System.out.println(""String_Node_Str"");
  System.exit(0);
}"
45280,"public static void main(String[] args){
  if (args.length < 2) {
    System.out.println(""String_Node_Str"");
    System.exit(0);
  }
  String appPropertiesFile=args[0];
  String action=args[1];
  System.out.println(""String_Node_Str"" + appPropertiesFile);
  GlobalConstants.startup(null,appPropertiesFile);
  if (action.equals(""String_Node_Str"")) {
    migrateAllV1UsersToV2();
  }
 else   if (action.equals(""String_Node_Str"")) {
    updateArtCounts();
  }
 else {
    System.out.println(""String_Node_Str"" + action);
  }
  System.out.println(""String_Node_Str"");
  System.exit(0);
}","public static void main(String[] args){
  if (args.length < 2) {
    System.out.println(""String_Node_Str"");
    System.exit(0);
  }
  String appPropertiesFile=args[0];
  String action=args[1];
  System.out.println(""String_Node_Str"" + appPropertiesFile);
  GlobalConstants.startup(null,appPropertiesFile);
  if (action.equals(""String_Node_Str"")) {
    migrateAllV1UsersToV2();
  }
 else   if (action.equals(""String_Node_Str"")) {
    updateArtCounts();
  }
 else   if (action.equals(""String_Node_Str"")) {
    migrateUser(args[2]);
  }
 else {
    System.out.println(""String_Node_Str"" + action);
  }
  System.out.println(""String_Node_Str"");
  System.exit(0);
}"
45281,"public static void migrateAllV1UsersToV2(){
  List<User> allUsers=User.getAllUsers();
  List<User> validatedUsers=new ArrayList<User>();
  for (  User u : allUsers) {
    if (u.isValidated())     validatedUsers.add(u);
  }
  System.out.println(""String_Node_Str"");
  for (  User u : validatedUsers) {
    System.out.println(""String_Node_Str"" + u.getUid());
    try {
      u.invalidateAllIssues();
    }
 catch (    Exception e) {
      _log.error(""String_Node_Str"",e);
    }
  }
  try {
    _log.info(""String_Node_Str"");
    User.getUser(""String_Node_Str"").validateIssues(true);
    _log.info(""String_Node_Str"");
    User.getUser(""String_Node_Str"").validateIssues(true);
    _log.info(""String_Node_Str"");
    User.getUser(""String_Node_Str"").validateIssues(true);
  }
 catch (  Exception e) {
    _log.error(""String_Node_Str"",e);
  }
  System.out.println(""String_Node_Str"");
  for (  User u : validatedUsers) {
    String uid=u.getUid();
    if (!uid.equals(""String_Node_Str"") && !uid.equals(""String_Node_Str"") && !uid.equals(""String_Node_Str"")) {
      System.out.println(""String_Node_Str"" + u.getUid());
      try {
        u.validateIssues(true);
      }
 catch (      Exception e) {
        _log.error(""String_Node_Str"",e);
      }
    }
  }
  System.out.println(""String_Node_Str"");
}","public static void migrateAllV1UsersToV2(){
  List<User> allUsers=User.getAllUsers();
  List<User> validatedUsers=new ArrayList<User>();
  for (  User u : allUsers) {
    if (u.isValidated())     validatedUsers.add(u);
  }
  System.out.println(""String_Node_Str"");
  for (  User u : validatedUsers) {
    System.out.println(""String_Node_Str"" + u.getUid());
    try {
      u.invalidateAllIssues();
    }
 catch (    Exception e) {
      _log.error(""String_Node_Str"",e);
    }
  }
  migrateUser(""String_Node_Str"");
  migrateUser(""String_Node_Str"");
  migrateUser(""String_Node_Str"");
  for (  User u : validatedUsers) {
    String uid=u.getUid();
    if (!uid.equals(""String_Node_Str"") && !uid.equals(""String_Node_Str"") && !uid.equals(""String_Node_Str"")) {
      System.out.println(""String_Node_Str"" + u.getUid());
      try {
        u.validateIssues(true);
      }
 catch (      Exception e) {
        _log.error(""String_Node_Str"",e);
      }
    }
  }
  System.out.println(""String_Node_Str"");
}"
45282,"public static boolean testing(){
  String t=getProperty(""String_Node_Str"");
  if ((t != null) && t.equalsIgnoreCase(""String_Node_Str""))   return true;
 else   return false;
}","public static boolean testing(){
  return isTrue(""String_Node_Str"");
}"
45283,"public void contextInitialized(ServletContextEvent event){
  try {
    _initialized=false;
    _context=event.getServletContext();
    GlobalConstants.startup(_context,APP_PROPERTIES_FILE);
    _tm=new ThreadManager();
    _tm.initialize(new File(GlobalConstants.getWebappPath() + CRAWLERS_FILE));
    _initialized=true;
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"",e);
  }
  log.info(""String_Node_Str"");
}","public void contextInitialized(ServletContextEvent event){
  try {
    _initialized=false;
    _context=event.getServletContext();
    GlobalConstants.startup(_context,APP_PROPERTIES_FILE);
    _tm=new ThreadManager();
    _tm.initialize(new File(GlobalConstants.getWebappPath() + File.separator + CRAWLERS_FILE));
    _initialized=true;
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"",e);
  }
  log.info(""String_Node_Str"");
}"
45284,"public static void init(){
  INIT_DELAY=1000 * loadPropertyValue(""String_Node_Str"",60);
  PERIOD=1000 * 60 * loadPropertyValue(""String_Node_Str"",144);
  MAX_ATTEMPTS=loadPropertyValue(""String_Node_Str"",10);
  DOWNLOAD_MAX_THREADS=loadPropertyValue(""String_Node_Str"",20);
  CLASSIFY_MAX_THREADS=loadPropertyValue(""String_Node_Str"",5);
}","public static void init(){
  INIT_DELAY=1000 * loadPropertyValue(""String_Node_Str"",60);
  PERIOD=1000 * 60 * loadPropertyValue(""String_Node_Str"",144);
  MAX_ATTEMPTS=loadPropertyValue(""String_Node_Str"",10);
  DOWNLOAD_MAX_THREADS=loadPropertyValue(""String_Node_Str"",20);
  CLASSIFY_MAX_THREADS=loadPropertyValue(""String_Node_Str"",5);
  _log.info(""String_Node_Str"");
}"
45285,"public static void registerSiteCrawlers(final ThreadManager tm,final Timer t,final File crawlersFile){
  if (!crawlersFile.exists())   return;
  _crawlersFile=crawlersFile;
  _timer=t;
  _tm=tm;
  _lastReadTime=(new Date()).getTime();
  final GregorianCalendar cal=new GregorianCalendar();
  cal.set(Calendar.HOUR_OF_DAY,6);
  cal.set(Calendar.MINUTE,0);
  final Date d6am=cal.getTime();
  try {
    final Properties crawlers=new Properties();
    crawlers.load(new FileInputStream(crawlersFile));
    final java.util.Enumeration cList=crawlers.propertyNames();
    boolean runFutureOnly=false;
    final String skipOlderCrawls=crawlers.getProperty(""String_Node_Str"");
    if ((skipOlderCrawls != null) && skipOlderCrawls.equals(""String_Node_Str""))     runFutureOnly=true;
    while (cList.hasMoreElements()) {
      final String cName=(String)cList.nextElement();
      if (cName.endsWith(""String_Node_Str""))       continue;
      final String cPath=crawlers.getProperty(cName);
      if (cPath.indexOf(File.separator) != -1) {
        final String errMsg=""String_Node_Str"" + File.separator + ""String_Node_Str""+ cName;
        if (_log.isErrorEnabled())         _log.error(errMsg);
        crawlers.remove(cName);
      }
 else {
        if (_log.isInfoEnabled())         _log.info(""String_Node_Str"" + cName + ""String_Node_Str""+ cPath);
        final String cTimes=crawlers.getProperty(cName + ""String_Node_Str"");
        if (cTimes != null)         try {
          String[] times=cTimes.split(""String_Node_Str"");
          for (int i=0; i < times.length; i++)           if (times[i].equals(""String_Node_Str""))           continue;
 else           Integer.parseInt(times[i]);
          times=cTimes.split(""String_Node_Str"");
          for (int i=0; i < times.length; i++) {
            if (times[i].equals(""String_Node_Str""))             continue;
            cal.set(Calendar.HOUR_OF_DAY,Integer.parseInt(times[i]));
            final Date d=cal.getTime();
            t.scheduleAtFixedRate(new SiteCrawlerTask(cName,cPath,d),d,ONE_DAY);
          }
        }
 catch (        final NumberFormatException nfe) {
          if (_log.isErrorEnabled())           _log.error(""String_Node_Str"" + cTimes + ""String_Node_Str""+ cName);
        }
 else         t.scheduleAtFixedRate(new SiteCrawlerTask(cName,cPath,d6am),d6am,ONE_DAY);
        if (runFutureOnly)         _crawledTimes.put(cName,new Date());
      }
    }
  }
 catch (  final java.io.IOException e) {
    System.err.println(""String_Node_Str"" + crawlersFile);
    System.err.println(e.toString());
    e.printStackTrace();
  }
}","public static void registerSiteCrawlers(final ThreadManager tm,final Timer t,final File crawlersFile){
  _crawlersFile=crawlersFile;
  _timer=t;
  _tm=tm;
  _lastReadTime=(new Date()).getTime();
  if (!crawlersFile.exists())   return;
  final GregorianCalendar cal=new GregorianCalendar();
  cal.set(Calendar.HOUR_OF_DAY,6);
  cal.set(Calendar.MINUTE,0);
  final Date d6am=cal.getTime();
  try {
    final Properties crawlers=new Properties();
    crawlers.load(new FileInputStream(crawlersFile));
    final java.util.Enumeration cList=crawlers.propertyNames();
    boolean runFutureOnly=false;
    final String skipOlderCrawls=crawlers.getProperty(""String_Node_Str"");
    if ((skipOlderCrawls != null) && skipOlderCrawls.equals(""String_Node_Str""))     runFutureOnly=true;
    while (cList.hasMoreElements()) {
      final String cName=(String)cList.nextElement();
      if (cName.endsWith(""String_Node_Str""))       continue;
      final String cPath=crawlers.getProperty(cName);
      if (cPath.indexOf(File.separator) != -1) {
        final String errMsg=""String_Node_Str"" + File.separator + ""String_Node_Str""+ cName;
        if (_log.isErrorEnabled())         _log.error(errMsg);
        crawlers.remove(cName);
      }
 else {
        if (_log.isInfoEnabled())         _log.info(""String_Node_Str"" + cName + ""String_Node_Str""+ cPath);
        final String cTimes=crawlers.getProperty(cName + ""String_Node_Str"");
        if (cTimes != null)         try {
          String[] times=cTimes.split(""String_Node_Str"");
          for (int i=0; i < times.length; i++)           if (times[i].equals(""String_Node_Str""))           continue;
 else           Integer.parseInt(times[i]);
          times=cTimes.split(""String_Node_Str"");
          for (int i=0; i < times.length; i++) {
            if (times[i].equals(""String_Node_Str""))             continue;
            cal.set(Calendar.HOUR_OF_DAY,Integer.parseInt(times[i]));
            final Date d=cal.getTime();
            t.scheduleAtFixedRate(new SiteCrawlerTask(cName,cPath,d),d,ONE_DAY);
          }
        }
 catch (        final NumberFormatException nfe) {
          if (_log.isErrorEnabled())           _log.error(""String_Node_Str"" + cTimes + ""String_Node_Str""+ cName);
        }
 else         t.scheduleAtFixedRate(new SiteCrawlerTask(cName,cPath,d6am),d6am,ONE_DAY);
        if (runFutureOnly)         _crawledTimes.put(cName,new Date());
      }
    }
  }
 catch (  Exception e) {
    _log.error(""String_Node_Str"" + crawlersFile,e);
  }
  _log.info(""String_Node_Str"");
}"
45286,"public static boolean checkCrawlersFile(){
  if (_crawlersFile.lastModified() > _lastReadTime) {
    if (_log.isInfoEnabled())     _log.info(""String_Node_Str"");
    _timer.cancel();
    _tm.initialize(_crawlersFile);
    return true;
  }
 else   return false;
}","public static boolean checkCrawlersFile(){
  if (_crawlersFile.lastModified() > _lastReadTime) {
    if (_log.isInfoEnabled())     _log.info(""String_Node_Str"");
    _timer.cancel();
    _tm.initialize(_crawlersFile);
    return true;
  }
 else {
    return false;
  }
}"
45287,"/** 
 * Problem with these is when different object types are added / queried  for the same abstract class.  Ex: SQL_IssueStub vs. Issue; ArrayList vs. List public void add(Long userKey, Object key, Object o) { add(userKey, key, o.getClass(), o); } public void add(String[] cacheGroups, Object key, Object o) { add(cacheGroups, key, o.getClass(), o); }
 */
public Object get(Object key,Class c){
  String nKey;
  OCache cache=_caches.get(c);
  if (cache == null) {
    nKey=Integer.toString(c.hashCode()) + ""String_Node_Str"" + key.toString();
    cache=_objectCache;
  }
 else {
    nKey=key.toString();
  }
  return cache.get(nKey);
}","/** 
 * Problem with these is when different object types are added / queried  for the same abstract class.  Ex: SQL_IssueStub vs. Issue; ArrayList vs. LinkedList public void add(Long userKey, Object key, Object o) { add(userKey, key, o.getClass(), o); } public void add(String[] cacheGroups, Object key, Object o) { add(cacheGroups, key, o.getClass(), o); }
 */
public Object get(Object key,Class c){
  String nKey;
  OCache cache=_caches.get(c);
  if (cache == null) {
    nKey=Integer.toString(c.hashCode()) + ""String_Node_Str"" + key.toString();
    cache=_objectCache;
  }
 else {
    nKey=key.toString();
  }
  return cache.get(nKey);
}"
45288,"/** 
 * Initialize the database for downloading news for a particular date from a particular source.
 * @param f        Feed from which news is being downloaded
 * @param pubDate  Date for which news is being downloaded
 */
public void initializeNewsDownload(Feed f,Date pubDate){
  getArchiveDirForOrigArticle(f,pubDate);
  getArchiveDirForFilteredArticle(f,pubDate);
}","/** 
 * Initialize the database for downloading news for a particular date from a particular source.
 * @param f        Feed from which news is being downloaded
 * @param pubDate  Date for which news is being downloaded
 */
public void initializeNewsDownload(Feed f,Date pubDate){
  getArchiveDirForOrigArticles(f,pubDate);
  getArchiveDirForFilteredArticles(f,pubDate);
}"
45289,"private void drawZone(Canvas canvas,Paint paint,Zone zone){
  Path path=new Path();
  path.setLastPoint(zone.getPoints().get(0).x,zone.getPoints().get(0).y);
  for (  PointF point : zone.getPoints()) {
    path.lineTo(point.x,point.y);
  }
  path.close();
  path.setFillType(FillType.WINDING);
  canvas.drawPath(path,paint);
  Log.d(""String_Node_Str"",""String_Node_Str"");
}","private void drawZone(Canvas canvas,Paint paint,Zone zone){
  Path path=new Path();
  path.setLastPoint(zone.getPoints().get(0).x,zone.getPoints().get(0).y);
  for (  PointF point : zone.getPoints()) {
    path.lineTo(point.x,point.y);
  }
  path.close();
  path.setFillType(FillType.WINDING);
  canvas.drawPath(path,paint);
}"
45290,"private Vertex findClosestVertexTo(PointF point){
  Vertex closestVertex=graph.getVertex(""String_Node_Str"");
  float shortestDist=Float.MAX_VALUE;
  for (  Vertex vertex : graph.getVertices()) {
    PointF vertexCoordinates=(PointF)vertex.getProperty(KEY_COORDINATES);
    float distToPoint=(float)Math.sqrt(Math.pow((vertexCoordinates.x - point.x),2) + Math.pow((vertexCoordinates.y - point.y),2));
    if (distToPoint < shortestDist) {
      shortestDist=distToPoint;
      closestVertex=vertex;
      StringBuilder sb=new StringBuilder().append(""String_Node_Str"");
      sb.append(""String_Node_Str"" + shortestDist + ""String_Node_Str"");
      sb.append(""String_Node_Str"" + closestVertex.getId());
      Log.d(TAG,sb.toString());
    }
  }
  return closestVertex;
}","private Vertex findClosestVertexTo(PointF point){
  Vertex closestVertex=graph.getVertex(""String_Node_Str"");
  float shortestDist=Float.MAX_VALUE;
  for (  Vertex vertex : graph.getVertices()) {
    PointF vertexCoordinates=(PointF)vertex.getProperty(KEY_COORDINATES);
    StringBuilder sb11=new StringBuilder().append(""String_Node_Str"");
    sb11.append(vertexCoordinates.x + ""String_Node_Str"");
    sb11.append(vertexCoordinates.y + ""String_Node_Str"");
    Log.d(TAG,sb11.toString());
    float distToPoint=(float)Math.sqrt(Math.pow((vertexCoordinates.x - point.x),2) + Math.pow((vertexCoordinates.y - point.y),2));
    StringBuilder sb=new StringBuilder().append(""String_Node_Str"");
    sb.append(distToPoint + ""String_Node_Str"");
    Log.d(TAG,sb.toString());
    if (distToPoint < shortestDist) {
      shortestDist=distToPoint;
      closestVertex=vertex;
      StringBuilder sb1=new StringBuilder().append(""String_Node_Str"");
      sb1.append(""String_Node_Str"" + shortestDist + ""String_Node_Str"");
      sb1.append(""String_Node_Str"" + closestVertex.getId());
      Log.d(TAG,sb1.toString());
    }
  }
  return closestVertex;
}"
45291,"@Override protected void onActivityResult(int requestCode,int resultCode,Intent data){
  if (resultCode == Activity.RESULT_OK) {
    String roomName=(String)data.getExtras().get(FindRoomActivity.ROOM_NAME_EXTRA);
    RoomsDatabase roomsDatabase=RoomsDatabase.getRoomsDatabase();
    PointF roomCoordinates=roomsDatabase.getRoomCoordinates(roomName);
    StringBuilder sb=new StringBuilder().append(""String_Node_Str"");
    sb.append(roomCoordinates);
    Log.d(TAG,sb.toString());
    PointF position=new PointF(32.98f,2.92f);
    DijkstraRouter dijkstraRouter=new DijkstraRouter();
    Path routingPath=dijkstraRouter.findRoute(position,roomCoordinates);
    mapView.setRoute(routingPath);
  }
  super.onActivityResult(requestCode,resultCode,data);
}","@Override protected void onActivityResult(int requestCode,int resultCode,Intent data){
  String roomName=(String)data.getExtras().get(FindRoomActivity.ROOM_NAME_EXTRA);
  RoomsDatabase roomsDatabase=RoomsDatabase.getRoomsDatabase();
  PointF roomCoordinates=roomsDatabase.getRoomCoordinates(roomName);
  StringBuilder sb=new StringBuilder().append(""String_Node_Str"");
  sb.append(roomName);
  sb.append(""String_Node_Str"");
  sb.append(roomCoordinates.x);
  sb.append(""String_Node_Str"");
  sb.append(roomCoordinates.y);
  Log.d(TAG,sb.toString());
  PointF position=new PointF(32.98f,2.92f);
  DijkstraRouter dijkstraRouter=new DijkstraRouter();
  Path routingPath=dijkstraRouter.findRoute(position,roomCoordinates);
  mapView.setRoute(routingPath);
  super.onActivityResult(requestCode,resultCode,data);
}"
45292,"@Override protected void onDraw(Canvas canvas){
  canvas.save(Canvas.MATRIX_SAVE_FLAG);
  prepareDrawingArea(canvas,getWidth(),getHeight());
  canvas.drawRect(rectFTags,debugRectPaint);
  for (  Tag tag : tags) {
    drawTag(canvas,tagPaint,tag);
  }
  for (  Wall wall : walls) {
    canvas.drawLine(wall.getX1(),wall.getY1(),wall.getX2(),wall.getY2(),wallsPaint);
  }
  for (  Door door : doors) {
    float startAngle=door.getStartAngle();
    if ((door.getLength()) < 0) {
      startAngle=startAngle + 180;
    }
    canvas.drawArc(door.getRectF(),startAngle,door.getSweepAngle(),true,doorsPaint);
  }
  canvas.restore();
}","@Override protected void onDraw(Canvas canvas){
  canvas.save(Canvas.MATRIX_SAVE_FLAG);
  prepareDrawingArea(canvas,getWidth(),getHeight());
  canvas.drawRect(rectFTags,debugRectPaint);
  for (  Tag tag : tags) {
    drawTag(canvas,tagPaint,tag);
  }
  for (  Wall wall : walls) {
    canvas.drawLine(wall.getX1(),wall.getY1(),wall.getX2(),wall.getY2(),wallsPaint);
  }
  for (  Door door : doors) {
    float startAngle=door.getStartAngle();
    if (door.getLength() < 0) {
      startAngle=startAngle + 180;
    }
    canvas.drawArc(door.getRectF(),startAngle,door.getSweepAngle(),true,doorsPaint);
  }
  canvas.restore();
}"
45293,"public Door(float xAxle,float yAxle,float length,float startAngle,float sweepAngle){
  super();
  this.xAxle=xAxle;
  this.yAxle=yAxle;
  this.length=length;
  this.startAngle=startAngle;
  this.sweepAngle=sweepAngle;
}","public Door(float distanceToAxle,float length,float sweepAngle,float wallX1,float wallY1,double alpha){
  super();
  this.length=length;
  this.sweepAngle=sweepAngle;
  this.xAxle=(float)(Math.cos(alpha)) * distanceToAxle + wallX1;
  this.yAxle=(float)(Math.sin(alpha)) * distanceToAxle + wallY1;
  this.startAngle=(float)(alpha) * 57.2974f;
}"
45294,"private void recognizeString(String content,boolean debug){
  walls=new ArrayList<Wall>();
  doors=new ArrayList<Door>();
  Pattern oneRow=Pattern.compile(""String_Node_Str"");
  Pattern oneNumber=Pattern.compile(""String_Node_Str"");
  String[] allRows=oneRow.split(content);
  for (  String entry : allRows) {
    String[] singlenumber=oneNumber.split(entry);
    if (singlenumber[0].equals(""String_Node_Str"")) {
      wallX1=Float.parseFloat(singlenumber[1]);
      wallY1=Float.parseFloat(singlenumber[2]);
      wallX2=Float.parseFloat(singlenumber[3]);
      wallY2=Float.parseFloat(singlenumber[4]);
      Wall wall=new Wall(wallX1,wallY1,wallX2,wallY2);
      alpha=wall.getAlpha();
      Log.d(TAG,""String_Node_Str"" + wall.toString());
      walls.add(wall);
    }
 else     if (singlenumber[0].equals(""String_Node_Str"")) {
      Door door=new Door(Float.parseFloat(singlenumber[1]),Float.parseFloat(singlenumber[2]),Float.parseFloat(singlenumber[3]),Float.parseFloat(singlenumber[4]),Float.parseFloat(singlenumber[5]));
      Log.d(TAG,""String_Node_Str"" + door.toString());
      doors.add(door);
    }
 else {
      distanceToAxle=Float.parseFloat(singlenumber[0]);
      length=Float.parseFloat(singlenumber[1]);
      sweepAngle=Float.parseFloat(singlenumber[2]);
      this.addDoor(distanceToAxle,length,sweepAngle);
    }
  }
}","private void recognizeString(String content,boolean debug){
  walls=new ArrayList<Wall>();
  doors=new ArrayList<Door>();
  Pattern oneRow=Pattern.compile(""String_Node_Str"");
  Pattern oneNumber=Pattern.compile(""String_Node_Str"");
  String[] allRows=oneRow.split(content);
  for (  String entry : allRows) {
    String[] singlenumber=oneNumber.split(entry);
    if (singlenumber[0].equals(""String_Node_Str"")) {
      wallX1=Float.parseFloat(singlenumber[1]);
      wallY1=Float.parseFloat(singlenumber[2]);
      wallX2=Float.parseFloat(singlenumber[3]);
      wallY2=Float.parseFloat(singlenumber[4]);
      Wall wall=new Wall(wallX1,wallY1,wallX2,wallY2);
      alpha=wall.getAlpha();
      Log.d(TAG,""String_Node_Str"" + wall.toString());
      walls.add(wall);
    }
 else     if (singlenumber[0].equals(""String_Node_Str"")) {
      Door door=new Door(Float.parseFloat(singlenumber[1]),Float.parseFloat(singlenumber[2]),Float.parseFloat(singlenumber[3]),Float.parseFloat(singlenumber[4]),Float.parseFloat(singlenumber[5]));
      Log.d(TAG,""String_Node_Str"" + door.toString());
      doors.add(door);
    }
 else {
      Door door=new Door(Float.parseFloat(singlenumber[0]),Float.parseFloat(singlenumber[1]),Float.parseFloat(singlenumber[2]),wallX1,wallY1,alpha);
      Log.d(TAG,""String_Node_Str"" + door.toString());
      doors.add(door);
    }
  }
}"
45295,"@Override public void pause(){
  if (state == GameState.Running)   state=GameState.Paused;
  if (world.gameOver) {
    if (world.score > Settings.highscores[4]) {
      Settings.addScore(world.score,playerName);
    }
    Settings.save(game.getFileIO());
  }
}","@Override public void pause(){
  if (state == GameState.Running)   state=GameState.Paused;
  if (world.gameOver) {
    if (world.score > Settings.highscores[4]) {
      Settings.addScore(world.score,playerName);
      world.score=0;
      playerName=null;
    }
    Settings.save(game.getFileIO());
  }
}"
45296,"@Override public void update(float deltaTime){
  List<TouchEvent> touchEvents=game.getInput().getTouchEvents();
  game.getInput().getKeyEvents();
  if (state == GameState.Ready)   updateReady(touchEvents);
  if (state == GameState.Running)   updateRunning(touchEvents,deltaTime);
  if (state == GameState.Paused)   updatePaused(touchEvents);
  if (state == GameState.GameOver)   updateGameOver(touchEvents);
}","@Override public void update(float deltaTime){
  List<TouchEvent> touchEvents=game.getInput().getTouchEvents();
  List<KeyEvent> keyEvents=game.getInput().getKeyEvents();
  if (state == GameState.Ready)   updateReady(touchEvents);
  if (state == GameState.Running)   updateRunning(touchEvents,keyEvents,deltaTime);
  if (state == GameState.Paused)   updatePaused(touchEvents);
  if (state == GameState.GameOver)   updateGameOver(touchEvents);
}"
45297,"private void updateRunning(List<TouchEvent> touchEvents,float deltaTime){
  Graphics g=game.getGraphics();
  int len=touchEvents.size();
  for (int i=0; i < len; i++) {
    TouchEvent event=touchEvents.get(i);
    if (event.type == TouchEvent.TOUCH_UP) {
      if (event.x < Assets.BUTTON_WIDTH && event.y < Assets.BUTTON_HEIGHT) {
        if (Settings.soundEnabled)         Assets.click.play(1);
        state=GameState.Paused;
        return;
      }
    }
    if (event.type == TouchEvent.TOUCH_DOWN) {
      if (inBounds(event,g.getWidth() - 3 * Assets.BUTTON_WIDTH,g.getHeight() - Assets.BUTTON_HEIGHT - Assets.BUTTON_HEIGHT / 2 - 32 / 2,Assets.BUTTON_WIDTH,Assets.BUTTON_HEIGHT)) {
        if (!world.snake.already_turned)         world.snake.turnLeft();
      }
      if (inBounds(event,g.getWidth() - Assets.BUTTON_WIDTH,g.getHeight() - Assets.BUTTON_HEIGHT - Assets.BUTTON_HEIGHT / 2 - 32 / 2,Assets.BUTTON_WIDTH,Assets.BUTTON_HEIGHT)) {
        if (!world.snake.already_turned)         world.snake.turnRight();
      }
      if (inBounds(event,g.getWidth() - 2 * Assets.BUTTON_WIDTH,g.getHeight() - 2 * Assets.BUTTON_HEIGHT - 32,Assets.BUTTON_WIDTH,Assets.BUTTON_HEIGHT)) {
        if (!world.snake.already_turned)         world.snake.turnUp();
      }
      if (inBounds(event,g.getWidth() - 2 * Assets.BUTTON_WIDTH,g.getHeight() - Assets.BUTTON_HEIGHT,Assets.BUTTON_WIDTH,Assets.BUTTON_HEIGHT)) {
        if (!world.snake.already_turned)         world.snake.turnDown();
      }
    }
  }
  world.update(deltaTime);
  if (world.gameOver) {
    if (Settings.soundEnabled)     Assets.bitten.play(1);
    state=GameState.GameOver;
  }
  if (oldScore != world.score) {
    oldScore=world.score;
    score=""String_Node_Str"" + oldScore;
    if (Settings.soundEnabled)     Assets.eat.play(1);
  }
}","private void updateRunning(List<TouchEvent> touchEvents,List<Input.KeyEvent> keyEvents,float deltaTime){
  Graphics g=game.getGraphics();
  int len=touchEvents.size();
  for (int i=0; i < len; i++) {
    TouchEvent event=touchEvents.get(i);
    if (event.type == TouchEvent.TOUCH_UP) {
      if (event.x < Assets.BUTTON_WIDTH && event.y < Assets.BUTTON_HEIGHT) {
        if (Settings.soundEnabled)         Assets.click.play(1);
        state=GameState.Paused;
        return;
      }
    }
    if (event.type == TouchEvent.TOUCH_DOWN) {
      if (inBounds(event,g.getWidth() - 3 * Assets.BUTTON_WIDTH,g.getHeight() - Assets.BUTTON_HEIGHT - Assets.BUTTON_HEIGHT / 2 - 32 / 2,Assets.BUTTON_WIDTH,Assets.BUTTON_HEIGHT)) {
        if (!world.snake.already_turned)         world.snake.turnLeft();
      }
      if (inBounds(event,g.getWidth() - Assets.BUTTON_WIDTH,g.getHeight() - Assets.BUTTON_HEIGHT - Assets.BUTTON_HEIGHT / 2 - 32 / 2,Assets.BUTTON_WIDTH,Assets.BUTTON_HEIGHT)) {
        if (!world.snake.already_turned)         world.snake.turnRight();
      }
      if (inBounds(event,g.getWidth() - 2 * Assets.BUTTON_WIDTH,g.getHeight() - 2 * Assets.BUTTON_HEIGHT - 32,Assets.BUTTON_WIDTH,Assets.BUTTON_HEIGHT)) {
        if (!world.snake.already_turned)         world.snake.turnUp();
      }
      if (inBounds(event,g.getWidth() - 2 * Assets.BUTTON_WIDTH,g.getHeight() - Assets.BUTTON_HEIGHT,Assets.BUTTON_WIDTH,Assets.BUTTON_HEIGHT)) {
        if (!world.snake.already_turned)         world.snake.turnDown();
      }
    }
  }
  len=keyEvents.size();
  for (int i=0; i < len; i++) {
    KeyEvent kevent=keyEvents.get(i);
switch (kevent.keyCode) {
case android.view.KeyEvent.KEYCODE_DPAD_LEFT:
      if (!world.snake.already_turned)       world.snake.turnLeft();
    break;
case android.view.KeyEvent.KEYCODE_DPAD_RIGHT:
  if (!world.snake.already_turned)   world.snake.turnRight();
break;
case android.view.KeyEvent.KEYCODE_DPAD_UP:
if (!world.snake.already_turned) world.snake.turnUp();
break;
case android.view.KeyEvent.KEYCODE_DPAD_DOWN:
if (!world.snake.already_turned) world.snake.turnDown();
break;
}
}
world.update(deltaTime);
if (world.gameOver) {
if (Settings.soundEnabled) Assets.bitten.play(1);
state=GameState.GameOver;
}
if (oldScore != world.score) {
oldScore=world.score;
score=""String_Node_Str"" + oldScore;
if (Settings.soundEnabled) Assets.eat.play(1);
}
}"
45298,"public void turnUp(){
  direction=UP;
  already_turned=true;
}","public void turnUp(){
  if (direction != DOWN)   direction=UP;
  already_turned=true;
}"
45299,"public void turnRight(){
  direction=RIGHT;
  already_turned=true;
}","public void turnRight(){
  if (direction != LEFT)   direction=RIGHT;
  already_turned=true;
}"
45300,"public void turnDown(){
  direction=DOWN;
  already_turned=true;
}","public void turnDown(){
  if (direction != UP)   direction=DOWN;
  already_turned=true;
}"
45301,"public void turnLeft(){
  direction=LEFT;
  already_turned=true;
}","public void turnLeft(){
  if (direction != RIGHT)   direction=LEFT;
  already_turned=true;
}"
45302,"private void updateGameOver(List<TouchEvent> touchEvents){
  int len=touchEvents.size();
  for (int i=0; i < len; i++) {
    TouchEvent event=touchEvents.get(i);
    if (event.type == TouchEvent.TOUCH_UP) {
      if (event.x >= BUTTON_CANCEL_X && event.x <= BUTTON_CANCEL_X + Assets.BUTTON_WIDTH && event.y >= BUTTON_CANCEL_Y && event.y <= BUTTON_CANCEL_Y + Assets.BUTTON_HEIGHT) {
        if (Settings.soundEnabled)         Assets.click.play(1);
        ((AndroidGame)game).runOnUiThread(new Runnable(){
          @Override public void run(){
            final AlertDialog.Builder alert=new AlertDialog.Builder((MrMunchGame)game);
            final EditText input=new EditText((MrMunchGame)game);
            int maxLength=5;
            InputFilter[] FilterArray=new InputFilter[1];
            FilterArray[0]=new InputFilter.LengthFilter(maxLength);
            input.setFilters(FilterArray);
            alert.setView(input);
            alert.setTitle(""String_Node_Str"");
            alert.setMessage(""String_Node_Str"");
            alert.setPositiveButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
              public void onClick(              DialogInterface dialog,              int whichButton){
                playerName=input.getText().toString().trim();
                playerName=playerName.substring(0,playerName.length());
                if (playerName == null || playerName.length() == 0)                 playerName=""String_Node_Str"";
                game.setScreen(new MainMenuScreen(game));
              }
            }
);
            alert.setNegativeButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
              public void onClick(              DialogInterface dialog,              int whichButton){
                playerName=""String_Node_Str"";
                game.setScreen(new MainMenuScreen(game));
              }
            }
);
            alert.show();
          }
        }
);
        return;
      }
    }
  }
}","private void updateGameOver(List<TouchEvent> touchEvents){
  int len=touchEvents.size();
  for (int i=0; i < len; i++) {
    TouchEvent event=touchEvents.get(i);
    if (event.type == TouchEvent.TOUCH_UP) {
      if (event.x >= BUTTON_CANCEL_X && event.x <= BUTTON_CANCEL_X + Assets.BUTTON_WIDTH && event.y >= BUTTON_CANCEL_Y && event.y <= BUTTON_CANCEL_Y + Assets.BUTTON_HEIGHT) {
        if (Settings.soundEnabled)         Assets.click.play(1);
        if (world.score > Settings.highscores[4]) {
          ((AndroidGame)game).runOnUiThread(new Runnable(){
            @Override public void run(){
              final AlertDialog.Builder alert=new AlertDialog.Builder((MrMunchGame)game);
              final EditText input=new EditText((MrMunchGame)game);
              int maxLength=5;
              InputFilter[] FilterArray=new InputFilter[1];
              FilterArray[0]=new InputFilter.LengthFilter(maxLength);
              input.setFilters(FilterArray);
              alert.setView(input);
              alert.setTitle(""String_Node_Str"");
              alert.setMessage(""String_Node_Str"");
              alert.setPositiveButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
                public void onClick(                DialogInterface dialog,                int whichButton){
                  playerName=input.getText().toString().trim();
                  playerName=playerName.substring(0,playerName.length());
                  if (playerName == null || playerName.length() == 0)                   playerName=""String_Node_Str"";
                  game.setScreen(new MainMenuScreen(game));
                }
              }
);
              alert.setNegativeButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
                public void onClick(                DialogInterface dialog,                int whichButton){
                  playerName=""String_Node_Str"";
                  game.setScreen(new MainMenuScreen(game));
                }
              }
);
              alert.show();
            }
          }
);
        }
 else         game.setScreen(new MainMenuScreen(game));
        return;
      }
    }
  }
}"
45303,"@Override public void update(float deltaTime){
  List<TouchEvent> touchEvents=game.getInput().getTouchEvents();
  List<KeyEvent> keyEvents=game.getInput().getKeyEvents();
  int len=keyEvents.size();
  for (int i=0; i < len; i++) {
    KeyEvent kevent=keyEvents.get(i);
    if (kevent.keyCode == android.view.KeyEvent.KEYCODE_BACK && kevent.type == kevent.KEY_UP)     game.setScreen(new MainMenuScreen(game));
  }
  if (state == GameState.Ready)   updateReady(touchEvents);
  if (state == GameState.Running)   updateRunning(touchEvents,keyEvents,deltaTime);
  if (state == GameState.Paused)   updatePaused(touchEvents);
  if (state == GameState.GameOver)   updateGameOver(touchEvents);
}","@Override public void update(float deltaTime){
  List<TouchEvent> touchEvents=game.getInput().getTouchEvents();
  List<KeyEvent> keyEvents=game.getInput().getKeyEvents();
  int len=keyEvents.size();
  for (int i=0; i < len; i++) {
    KeyEvent kevent=keyEvents.get(i);
    if (kevent.keyCode == android.view.KeyEvent.KEYCODE_BACK && kevent.type == KeyEvent.KEY_UP)     game.setScreen(new MainMenuScreen(game));
  }
  if (state == GameState.Ready)   updateReady(touchEvents);
  if (state == GameState.Running)   updateRunning(touchEvents,keyEvents,deltaTime);
  if (state == GameState.Paused)   updatePaused(touchEvents);
  if (state == GameState.GameOver)   updateGameOver(touchEvents);
}"
45304,"@Override public void update(float deltaTime){
  int len;
  List<TouchEvent> touchEvents=game.getInput().getTouchEvents();
  List<KeyEvent> keyEvents=game.getInput().getKeyEvents();
  len=keyEvents.size();
  for (int i=0; i < len; i++) {
    KeyEvent kevent=keyEvents.get(i);
    if (kevent.keyCode == android.view.KeyEvent.KEYCODE_BACK && kevent.type == kevent.KEY_UP)     screenNumber--;
    if (screenNumber < 1)     game.setScreen(new MainMenuScreen(game));
  }
  Graphics g=game.getGraphics();
  len=touchEvents.size();
  for (int i=0; i < len; i++) {
    TouchEvent event=touchEvents.get(i);
    if (event.type == TouchEvent.TOUCH_UP) {
      if (event.x > g.getWidth() - Assets.BUTTON_WIDTH && event.y > g.getHeight() - Assets.BUTTON_HEIGHT) {
        screenNumber++;
        if (screenNumber > 3) {
          game.setScreen(new MainMenuScreen(game));
        }
        if (Settings.soundEnabled)         Assets.click.play(1);
        return;
      }
      if (event.x < Assets.BUTTON_WIDTH && event.y > g.getHeight() - Assets.BUTTON_HEIGHT) {
        screenNumber--;
        if (screenNumber < 1) {
          game.setScreen(new MainMenuScreen(game));
        }
        if (Settings.soundEnabled)         Assets.click.play(1);
        return;
      }
    }
  }
}","@Override public void update(float deltaTime){
  int len;
  List<TouchEvent> touchEvents=game.getInput().getTouchEvents();
  List<KeyEvent> keyEvents=game.getInput().getKeyEvents();
  len=keyEvents.size();
  for (int i=0; i < len; i++) {
    KeyEvent kevent=keyEvents.get(i);
    if (kevent.keyCode == android.view.KeyEvent.KEYCODE_BACK && kevent.type == KeyEvent.KEY_UP)     game.setScreen(new MainMenuScreen(game));
  }
  Graphics g=game.getGraphics();
  len=touchEvents.size();
  for (int i=0; i < len; i++) {
    TouchEvent event=touchEvents.get(i);
    if (event.type == TouchEvent.TOUCH_UP) {
      if (event.x > g.getWidth() - Assets.BUTTON_WIDTH && event.y > g.getHeight() - Assets.BUTTON_HEIGHT) {
        screenNumber++;
        if (screenNumber > 3) {
          game.setScreen(new MainMenuScreen(game));
        }
        if (Settings.soundEnabled)         Assets.click.play(1);
        return;
      }
      if (event.x < Assets.BUTTON_WIDTH && event.y > g.getHeight() - Assets.BUTTON_HEIGHT) {
        screenNumber--;
        if (screenNumber < 1) {
          game.setScreen(new MainMenuScreen(game));
        }
        if (Settings.soundEnabled)         Assets.click.play(1);
        return;
      }
    }
  }
}"
45305,"@Override public void update(float deltaTime){
  int len;
  List<TouchEvent> touchEvents=game.getInput().getTouchEvents();
  List<KeyEvent> keyEvents=game.getInput().getKeyEvents();
  len=keyEvents.size();
  for (int i=0; i < len; i++) {
    KeyEvent kevent=keyEvents.get(i);
    if (kevent.keyCode == android.view.KeyEvent.KEYCODE_BACK && kevent.type == kevent.KEY_UP)     game.setScreen(new MainMenuScreen(game));
  }
  Graphics g=game.getGraphics();
  len=touchEvents.size();
  for (int i=0; i < len; i++) {
    TouchEvent event=touchEvents.get(i);
    if (event.type == TouchEvent.TOUCH_UP) {
      if (event.x < Assets.BUTTON_WIDTH && event.y > g.getHeight() - Assets.BUTTON_HEIGHT) {
        if (Settings.soundEnabled)         Assets.click.play(1);
        game.setScreen(new MainMenuScreen(game));
        return;
      }
    }
  }
}","@Override public void update(float deltaTime){
  int len;
  List<TouchEvent> touchEvents=game.getInput().getTouchEvents();
  List<KeyEvent> keyEvents=game.getInput().getKeyEvents();
  len=keyEvents.size();
  for (int i=0; i < len; i++) {
    KeyEvent kevent=keyEvents.get(i);
    if (kevent.keyCode == android.view.KeyEvent.KEYCODE_BACK && kevent.type == KeyEvent.KEY_UP)     game.setScreen(new MainMenuScreen(game));
  }
  Graphics g=game.getGraphics();
  len=touchEvents.size();
  for (int i=0; i < len; i++) {
    TouchEvent event=touchEvents.get(i);
    if (event.type == TouchEvent.TOUCH_UP) {
      if (event.x < Assets.BUTTON_WIDTH && event.y > g.getHeight() - Assets.BUTTON_HEIGHT) {
        if (Settings.soundEnabled)         Assets.click.play(1);
        game.setScreen(new MainMenuScreen(game));
        return;
      }
    }
  }
}"
45306,"@Override public void update(float deltaTime){
  Graphics g=game.getGraphics();
  int len;
  List<TouchEvent> touchEvents=game.getInput().getTouchEvents();
  List<KeyEvent> keyEvents=game.getInput().getKeyEvents();
  len=keyEvents.size();
  for (int i=0; i < len; i++) {
    KeyEvent kevent=keyEvents.get(i);
    if (kevent.keyCode == android.view.KeyEvent.KEYCODE_BACK && kevent.type == kevent.KEY_UP)     game.finish();
  }
  len=touchEvents.size();
  for (int i=0; i < len; i++) {
    TouchEvent event=touchEvents.get(i);
    if (event.type == TouchEvent.TOUCH_UP) {
      if (inBounds(event,BUTTON_SOUND_X,g.getHeight() - Assets.BUTTON_HEIGHT,Assets.BUTTON_WIDTH,Assets.BUTTON_HEIGHT)) {
        Settings.soundEnabled=!Settings.soundEnabled;
        if (Settings.soundEnabled)         Assets.click.play(1);
      }
      if (inBounds(event,MENU_IMAGE_X,MENU_IMAGE_Y,Assets.MENU_ITEM_WIDTH,Assets.MENU_ITEM_HEIGHT)) {
        game.setScreen(new GameScreen(game));
        if (Settings.soundEnabled)         Assets.click.play(1);
        return;
      }
      if (inBounds(event,MENU_IMAGE_X,MENU_IMAGE_Y + Assets.MENU_ITEM_HEIGHT,Assets.MENU_ITEM_WIDTH,Assets.MENU_ITEM_HEIGHT)) {
        game.setScreen(new HighscoreScreen(game));
        if (Settings.soundEnabled)         Assets.click.play(1);
        return;
      }
      if (inBounds(event,MENU_IMAGE_X,MENU_IMAGE_Y + 2 * Assets.MENU_ITEM_HEIGHT,Assets.MENU_ITEM_WIDTH,Assets.MENU_ITEM_HEIGHT)) {
        game.setScreen(new SettingsScreen(game));
        if (Settings.soundEnabled)         Assets.click.play(1);
        return;
      }
      if (inBounds(event,MENU_IMAGE_X,MENU_IMAGE_Y + 3 * Assets.MENU_ITEM_HEIGHT,Assets.MENU_ITEM_WIDTH,Assets.MENU_ITEM_HEIGHT)) {
        game.setScreen(new HelpScreens(game));
        if (Settings.soundEnabled)         Assets.click.play(1);
        return;
      }
      if (inBounds(event,MENU_IMAGE_X,MENU_IMAGE_Y + 4 * Assets.MENU_ITEM_HEIGHT,Assets.MENU_ITEM_WIDTH,Assets.MENU_ITEM_HEIGHT)) {
        if (Settings.soundEnabled)         Assets.click.play(1);
        ((MrMunchGame)game).finish();
      }
    }
  }
}","@Override public void update(float deltaTime){
  Graphics g=game.getGraphics();
  int len;
  List<TouchEvent> touchEvents=game.getInput().getTouchEvents();
  List<KeyEvent> keyEvents=game.getInput().getKeyEvents();
  len=keyEvents.size();
  for (int i=0; i < len; i++) {
    KeyEvent kevent=keyEvents.get(i);
    if (kevent.keyCode == android.view.KeyEvent.KEYCODE_BACK && kevent.type == KeyEvent.KEY_UP)     game.finish();
  }
  len=touchEvents.size();
  for (int i=0; i < len; i++) {
    TouchEvent event=touchEvents.get(i);
    if (event.type == TouchEvent.TOUCH_UP) {
      if (inBounds(event,BUTTON_SOUND_X,g.getHeight() - Assets.BUTTON_HEIGHT,Assets.BUTTON_WIDTH,Assets.BUTTON_HEIGHT)) {
        Settings.soundEnabled=!Settings.soundEnabled;
        if (Settings.soundEnabled)         Assets.click.play(1);
      }
      if (inBounds(event,MENU_IMAGE_X,MENU_IMAGE_Y,Assets.MENU_ITEM_WIDTH,Assets.MENU_ITEM_HEIGHT)) {
        game.setScreen(new GameScreen(game));
        if (Settings.soundEnabled)         Assets.click.play(1);
        return;
      }
      if (inBounds(event,MENU_IMAGE_X,MENU_IMAGE_Y + Assets.MENU_ITEM_HEIGHT,Assets.MENU_ITEM_WIDTH,Assets.MENU_ITEM_HEIGHT)) {
        game.setScreen(new HighscoreScreen(game));
        if (Settings.soundEnabled)         Assets.click.play(1);
        return;
      }
      if (inBounds(event,MENU_IMAGE_X,MENU_IMAGE_Y + 2 * Assets.MENU_ITEM_HEIGHT,Assets.MENU_ITEM_WIDTH,Assets.MENU_ITEM_HEIGHT)) {
        game.setScreen(new SettingsScreen(game));
        if (Settings.soundEnabled)         Assets.click.play(1);
        return;
      }
      if (inBounds(event,MENU_IMAGE_X,MENU_IMAGE_Y + 3 * Assets.MENU_ITEM_HEIGHT,Assets.MENU_ITEM_WIDTH,Assets.MENU_ITEM_HEIGHT)) {
        game.setScreen(new HelpScreens(game));
        if (Settings.soundEnabled)         Assets.click.play(1);
        return;
      }
      if (inBounds(event,MENU_IMAGE_X,MENU_IMAGE_Y + 4 * Assets.MENU_ITEM_HEIGHT,Assets.MENU_ITEM_WIDTH,Assets.MENU_ITEM_HEIGHT)) {
        if (Settings.soundEnabled)         Assets.click.play(1);
        ((MrMunchGame)game).finish();
      }
    }
  }
}"
45307,"@Override public void update(float deltaTime){
  int len;
  List<TouchEvent> events=game.getInput().getTouchEvents();
  List<KeyEvent> keyEvents=game.getInput().getKeyEvents();
  len=keyEvents.size();
  for (int i=0; i < len; i++) {
    KeyEvent kevent=keyEvents.get(i);
    if (kevent.keyCode == android.view.KeyEvent.KEYCODE_BACK && kevent.type == kevent.KEY_UP)     game.setScreen(new MainMenuScreen(game));
  }
  Graphics g=game.getGraphics();
  len=events.size();
  for (int i=0; i < len; i++) {
    TouchEvent event=events.get(i);
    if (event.type == TouchEvent.TOUCH_UP) {
      if (event.x < Assets.BUTTON_WIDTH && event.y > g.getHeight() - Assets.BUTTON_HEIGHT) {
        if (Settings.soundEnabled)         Assets.click.play(1);
        game.setScreen(new MainMenuScreen(game));
        return;
      }
    }
    int y=g.getHeight() / 2;
    for (int j=1; j <= 5; j++) {
      if (event.type == TouchEvent.TOUCH_UP) {
        int x=j * (g.getWidth() - 30) / 5 - Assets.NUMBER_WIDTH;
        if (event.x > x && event.x < x + Assets.NUMBER_WIDTH && event.y > y && event.y < y + Assets.NUMBER_HEIGHT) {
          if (Settings.soundEnabled)           Assets.click.play(1);
          Settings.gameSpeed=j;
          return;
        }
      }
    }
  }
}","@Override public void update(float deltaTime){
  int len;
  List<TouchEvent> events=game.getInput().getTouchEvents();
  List<KeyEvent> keyEvents=game.getInput().getKeyEvents();
  len=keyEvents.size();
  for (int i=0; i < len; i++) {
    KeyEvent kevent=keyEvents.get(i);
    if (kevent.keyCode == android.view.KeyEvent.KEYCODE_BACK && kevent.type == KeyEvent.KEY_UP)     game.setScreen(new MainMenuScreen(game));
  }
  Graphics g=game.getGraphics();
  len=events.size();
  for (int i=0; i < len; i++) {
    TouchEvent event=events.get(i);
    if (event.type == TouchEvent.TOUCH_UP) {
      if (event.x < Assets.BUTTON_WIDTH && event.y > g.getHeight() - Assets.BUTTON_HEIGHT) {
        if (Settings.soundEnabled)         Assets.click.play(1);
        game.setScreen(new MainMenuScreen(game));
        return;
      }
    }
    int y=g.getHeight() / 2;
    for (int j=1; j <= 5; j++) {
      if (event.type == TouchEvent.TOUCH_UP) {
        int x=j * (g.getWidth() - 30) / 5 - Assets.NUMBER_WIDTH;
        if (event.x > x && event.x < x + Assets.NUMBER_WIDTH && event.y > y && event.y < y + Assets.NUMBER_HEIGHT) {
          if (Settings.soundEnabled)           Assets.click.play(1);
          Settings.gameSpeed=j;
          return;
        }
      }
    }
  }
}"
45308,"private void updateReady(List<TouchEvent> touchEvents){
  if (touchEvents.size() > 0)   state=GameState.Running;
}","private void updateReady(List<TouchEvent> touchEvents){
  if (touchEvents.size() > 0) {
    state=GameState.Running;
    World.tick=World.TICK_INITIAL;
  }
}"
45309,"public void eat(){
  SnakePart end=parts.get(parts.size() - 1);
  parts.add(new SnakePart(end.x,end.y));
}","public void eat(){
  Log.e(""String_Node_Str"",""String_Node_Str"" + World.tick);
  SnakePart end=parts.get(parts.size() - 1);
  parts.add(new SnakePart(end.x,end.y));
}"
45310,"public void update(float deltaTime){
  if (gameOver)   return;
  tickTime+=deltaTime;
  while (tickTime > tick) {
    tickTime-=tick;
    snake.advance();
    if (snake.checkBitten()) {
      gameOver=true;
      return;
    }
    SnakePart head=snake.parts.get(0);
    if (head.x == stain.x && head.y == stain.y) {
      score+=SCORE_INCREMENT;
      stainsEaten++;
      snake.eat();
      if (snake.parts.size() == WORLD_WIDTH * WORLD_HEIGHT) {
        gameOver=true;
        return;
      }
 else {
        placeStain();
      }
      if (score % 100 == 0 && tick - TICK_DECREMENT > 0) {
        tick-=TICK_DECREMENT;
      }
    }
    if (extraStain != null) {
      if (head.x == extraStain.x && head.y == extraStain.y) {
        snake.shrink();
        extraStain=null;
      }
      if (deltaTick >= 20) {
        extraStain=null;
        deltaTick=0;
      }
 else {
        deltaTick++;
      }
    }
  }
}","public void update(float deltaTime){
  if (gameOver)   return;
  tickTime+=deltaTime;
  while (tickTime > tick) {
    tickTime-=tick;
    snake.advance();
    if (snake.checkBitten()) {
      gameOver=true;
      return;
    }
    SnakePart head=snake.parts.get(0);
    if (head.x == stain.x && head.y == stain.y) {
      score+=SCORE_INCREMENT;
      stainsEaten++;
      snake.eat();
      if (snake.parts.size() == WORLD_WIDTH * WORLD_HEIGHT) {
        gameOver=true;
        return;
      }
 else {
        placeStain();
      }
      if (score % 100 == 0 && tick - TICK_DECREMENT > 0) {
        tick-=TICK_DECREMENT;
      }
    }
    if (extraStain != null) {
      if (head.x == extraStain.x && head.y == extraStain.y) {
        score+=5 * SCORE_INCREMENT;
        snake.shrink();
        extraStain=null;
        deltaTick=0;
      }
 else {
        if (deltaTick >= 20) {
          extraStain=null;
          deltaTick=0;
        }
 else {
          deltaTick++;
        }
      }
    }
  }
}"
45311,"/** 
 * <p> Disables the connection until new connection constants are provided. </p> <p> Precondition: None <br /> Postcondition: The connection is disabled and subsequent calls to Connection.connect() or Connection.submitRequest() will throw exceptions. </p>
 * @return Boolean if the API key and Secret are valid for the providedserver then true is returned else false is returned
 * @throws ConnectionDisabled The connection must be enabled by calling Connection.setConnectionConstants.
 */
public static void disable(){
  Connection.enabled=false;
}","/** 
 * <p> Disables the connection until new connection constants are provided. </p> <p> Precondition: None <br /> Postcondition: The connection is disabled and subsequent calls to Connection.connect() or Connection.submitRequest() will throw exceptions. </p>
 * @throws ConnectionDisabled The connection must be enabled by calling Connection.setConnectionConstants.
 */
public static void disable(){
  Connection.enabled=false;
}"
45312,"/** 
 * <p> Finds persistent resource data within the Cashier system. </p> <p> Precondition: The connection must be enabled otherwise a  ConnectionDisabledExcepiton will be thrown.<br /> Postcondition: If a resource is found matching the unique id  provided then a singular resource will be returned else null will be returned. </p>
 * @param id the unique id of the item to be found.
 * @param resource the cashier resource being utilized in the search.
 * @param table the cashier table being utilized in the search.
 * @return Resource singular Cashier resource that matches the id provided, a resource or if nothing is found will be null.
 * @throws ConnectionDisabledException 
 */
public Response submit() throws ProtocolException, ConnectionDisabledException, InvalidRequestException {
  if (this.isValid()) {
    return Connection.submitRequest(this);
  }
 else {
    throw new InvalidRequestException(this);
  }
}","/** 
 * <p> Finds persistent resource data within the Cashier system. </p> <p> Precondition: The connection must be enabled otherwise a  ConnectionDisabledExcepiton will be thrown.<br /> Postcondition: If a resource is found matching the unique id  provided then a singular resource will be returned else null will be returned. </p>
 * @return Response returns the Cashier Response object generated by this request.
 * @throws ConnectionDisabledException 
 */
public Response submit() throws ProtocolException, ConnectionDisabledException, InvalidRequestException {
  if (this.isValid()) {
    return Connection.submitRequest(this);
  }
 else {
    throw new InvalidRequestException(this);
  }
}"
45313,"@Override public void tick(){
  if (this.state == State.RUNNING) {
    if (!this.board.full()) {
      if (this.initCounter > 0) {
        this.fillZigZag();
      }
 else {
      }
    }
    this.board.updateBoard();
  }
}","@Override public void tick(){
  if (this.state == State.RUNNING) {
    if (!this.board.full()) {
      if (this.initCounter > 0) {
        this.fillZigZag();
      }
 else {
        int boardWidth=this.board.getBoardWidth();
        int boardHeight=this.board.getBoardHeight();
        for (int x=boardWidth - 1; x >= 0; x--) {
          for (int y=boardHeight - 1; y >= 0; y--) {
            if (this.board.getBlockAt(x,y) == null) {
              this.addRandom(x,y);
            }
          }
        }
      }
    }
    this.board.updateBoard();
  }
}"
45314,"public void addRandom(int x,int y){
  int type;
  if (y < this.board.getBoardHeight() - 1) {
    type=this.getRandomBlockType();
    while (this.board.getBlockAt(x,y + 1) != null && this.board.getBlockAt(x,y + 1).getType() == type) {
      type=this.getRandomBlockType();
    }
  }
 else {
    type=this.getRandomBlockType();
  }
  this.createBlock(x,y,type);
}","public void addRandom(int x,int y){
  int type;
  if (y < this.board.getBoardHeight() * 2 - 1) {
    type=this.getRandomBlockType();
    while (this.board.getBlockAt(x,y + 1) != null && this.board.getBlockAt(x,y + 1).getType() == type) {
      type=this.getRandomBlockType();
    }
  }
 else {
    type=this.getRandomBlockType();
  }
  this.createBlock(x,y,type);
}"
45315,"static void command(RealAdminToolsPlugin plugin,CommandSender sender,String[] args){
  String subCommand=args.length > 0 ? args[0].toLowerCase() : ""String_Node_Str"";
  try {
    BufferedWriter writer=new BufferedWriter(new FileWriter(plugin.getDataFolder().getPath() + ""String_Node_Str""));
    writer.write(""String_Node_Str"");
    String what=args.length > 1 ? args[1].toLowerCase() : ""String_Node_Str"";
    int removed_entities=0;
    for (    World world : plugin.getServer().getWorlds()) {
      sender.sendMessage(world.getName() + ""String_Node_Str"");
      sender.sendMessage(""String_Node_Str"" + world.getEntities().size() + ""String_Node_Str"");
      sender.sendMessage(""String_Node_Str"" + world.getLivingEntities().size() + ""String_Node_Str"");
      sender.sendMessage(""String_Node_Str"" + world.getPlayers().size() + ""String_Node_Str"");
      for (      Entity entity : world.getEntities()) {
        Item item=(entity instanceof Item ? (Item)entity : null);
        writer.write(entity.getClass().getName() + ""String_Node_Str"" + entity.getEntityId()+ ""String_Node_Str""+ (item != null ? item.getItemStack().getTypeId() : ""String_Node_Str"")+ ""String_Node_Str""+ world.getName()+ ""String_Node_Str""+ Math.round(Math.floor(entity.getLocation().getX()))+ ""String_Node_Str""+ Math.round(Math.floor(entity.getLocation().getY()))+ ""String_Node_Str""+ Math.round(Math.floor(entity.getLocation().getZ()))+ ""String_Node_Str"");
        if (subCommand.equals(""String_Node_Str"")) {
          if (what.equals(entity.getClass().getName().split(""String_Node_Str"")[1].toLowerCase()) || what.equals(""String_Node_Str"")) {
            String id=args.length > 2 ? args[2].toLowerCase() : ""String_Node_Str"";
            String entityTypeId=(item != null ? ""String_Node_Str"" + item.getItemStack().getTypeId() : ""String_Node_Str"");
            if (id.equals(entityTypeId) || id.equals(""String_Node_Str"")) {
              entity.remove();
              removed_entities++;
            }
          }
        }
      }
    }
    if (subCommand.equals(""String_Node_Str"")) {
      sender.sendMessage(""String_Node_Str"" + removed_entities + ""String_Node_Str""+ what);
    }
    writer.flush();
    writer.close();
  }
 catch (  Exception e) {
    plugin.getLog().severe(""String_Node_Str"" + plugin.getDataFolder().getPath() + ""String_Node_Str"");
  }
}","static void command(RealAdminToolsPlugin plugin,CommandSender sender,String[] args){
  String subCommand=args.length > 0 ? args[0].toLowerCase() : ""String_Node_Str"";
  try {
    BufferedWriter writer=new BufferedWriter(new FileWriter(plugin.getDataFolder().getPath() + File.separator + ""String_Node_Str""));
    writer.write(""String_Node_Str"");
    String what=args.length > 1 ? args[1].toLowerCase() : ""String_Node_Str"";
    int removed_entities=0;
    for (    World world : plugin.getServer().getWorlds()) {
      sender.sendMessage(world.getName() + ""String_Node_Str"");
      sender.sendMessage(""String_Node_Str"" + world.getEntities().size() + ""String_Node_Str"");
      sender.sendMessage(""String_Node_Str"" + world.getLivingEntities().size() + ""String_Node_Str"");
      sender.sendMessage(""String_Node_Str"" + world.getPlayers().size() + ""String_Node_Str"");
      for (      Entity entity : world.getEntities()) {
        Item item=(entity instanceof Item ? (Item)entity : null);
        writer.write(entity.getClass().getName() + ""String_Node_Str"" + entity.getEntityId()+ ""String_Node_Str""+ (item != null ? item.getItemStack().getTypeId() : ""String_Node_Str"")+ ""String_Node_Str""+ world.getName()+ ""String_Node_Str""+ Math.round(Math.floor(entity.getLocation().getX()))+ ""String_Node_Str""+ Math.round(Math.floor(entity.getLocation().getY()))+ ""String_Node_Str""+ Math.round(Math.floor(entity.getLocation().getZ()))+ ""String_Node_Str"");
        if (subCommand.equals(""String_Node_Str"")) {
          if (what.equals(entity.getClass().getName().split(""String_Node_Str"")[1].toLowerCase()) || what.equals(""String_Node_Str"")) {
            String id=args.length > 2 ? args[2].toLowerCase() : ""String_Node_Str"";
            String entityTypeId=(item != null ? ""String_Node_Str"" + item.getItemStack().getTypeId() : ""String_Node_Str"");
            if (id.equals(entityTypeId) || id.equals(""String_Node_Str"")) {
              entity.remove();
              removed_entities++;
            }
          }
        }
      }
    }
    if (subCommand.equals(""String_Node_Str"")) {
      sender.sendMessage(""String_Node_Str"" + removed_entities + ""String_Node_Str""+ what);
    }
    writer.flush();
    writer.close();
  }
 catch (  Exception e) {
    plugin.getLog().severe(""String_Node_Str"" + plugin.getDataFolder().getPath() + ""String_Node_Str"");
  }
}"
45316,"/** 
 * Prints encoding error messages.
 * @param lexer Lexer
 * @param code error code
 * @param c invalid char
 */
public void encodingError(Lexer lexer,ErrorCode code,int c,int replaceMode){
  if (lexer.errors > lexer.configuration.getShowErrors()) {
    return;
  }
  if (lexer.configuration.isShowWarnings()) {
    String buf=Integer.toHexString(c);
switch (code) {
case ENCODING_MISMATCH:
      lexer.badChars|=BC_ENCODING_MISMATCH;
    messageLexer(code.code(),lexer,Level.WARNING,""String_Node_Str"",lexer.configuration.getInCharEncodingName(),ParsePropertyImpl.CHAR_ENCODING.getFriendlyName(null,new Integer(c),lexer.configuration));
  break;
case VENDOR_SPECIFIC_CHARS:
lexer.badChars|=BC_VENDOR_SPECIFIC_CHARS;
messageLexer(code.code(),lexer,Level.WARNING,""String_Node_Str"",replaceMode,buf);
break;
case INVALID_SGML_CHARS:
lexer.badChars|=BC_INVALID_SGML_CHARS;
messageLexer(code.code(),lexer,Level.WARNING,""String_Node_Str"",replaceMode,buf);
break;
case INVALID_UTF8:
lexer.badChars|=BC_INVALID_UTF8;
messageLexer(lexer,Level.WARNING,code,replaceMode,buf);
break;
case INVALID_UTF16:
lexer.badChars|=BC_INVALID_UTF16;
messageLexer(lexer,Level.WARNING,code,replaceMode,buf);
break;
case INVALID_NCR:
lexer.badChars|=BC_INVALID_NCR;
messageLexer(lexer,Level.WARNING,code,replaceMode,c);
break;
}
}
}","/** 
 * Prints encoding error messages.
 * @param lexer Lexer
 * @param code error code
 * @param c invalid char
 */
public void encodingError(Lexer lexer,ErrorCode code,int c,int replaceMode){
  if (lexer.errors > lexer.configuration.getShowErrors()) {
    return;
  }
  if (lexer.configuration.isShowWarnings()) {
    String buf=Integer.toHexString(c);
switch (code) {
case ENCODING_MISMATCH:
      lexer.badChars|=BC_ENCODING_MISMATCH;
    messageLexer(code.code(),lexer,Level.WARNING,""String_Node_Str"",lexer.configuration.getInCharEncodingName(),ParsePropertyImpl.CHAR_ENCODING.getFriendlyName(null,new Integer(c),lexer.configuration));
  break;
case VENDOR_SPECIFIC_CHARS:
lexer.badChars|=BC_VENDOR_SPECIFIC_CHARS;
messageLexer(code.code(),lexer,Level.WARNING,""String_Node_Str"",replaceMode,c);
break;
case INVALID_SGML_CHARS:
lexer.badChars|=BC_INVALID_SGML_CHARS;
messageLexer(code.code(),lexer,Level.WARNING,""String_Node_Str"",replaceMode,c);
break;
case INVALID_UTF8:
lexer.badChars|=BC_INVALID_UTF8;
messageLexer(lexer,Level.WARNING,code,replaceMode,buf);
break;
case INVALID_UTF16:
lexer.badChars|=BC_INVALID_UTF16;
messageLexer(lexer,Level.WARNING,code,replaceMode,buf);
break;
case INVALID_NCR:
lexer.badChars|=BC_INVALID_NCR;
messageLexer(lexer,Level.WARNING,code,replaceMode,c);
break;
}
}
}"
45317,"/** 
 * @see org.w3c.tidy.StreamIn#setLexer(org.w3c.tidy.Lexer)
 */
public void setLexer(Lexer lexer){
}","/** 
 * @see org.w3c.tidy.StreamIn#setLexer(org.w3c.tidy.Lexer)
 */
public void setLexer(final Lexer lexer){
  this.lexer=lexer;
}"
45318,"/** 
 * @see org.w3c.tidy.StreamIn#readChar()
 */
public int readChar(){
  int c=END_OF_STREAM;
  if (this.pushed) {
    return popChar();
  }
  saveLastPos();
  if (this.tabs > 0) {
    this.curcol++;
    this.tabs--;
    return ' ';
  }
  c=readCharFromStream();
  if (END_OF_STREAM == c) {
    endOfStream=true;
    return END_OF_STREAM;
  }
  if (c == '\n') {
    this.curcol=1;
    this.curline++;
    return c;
  }
  if (c == '\t') {
    this.tabs=tabsize > 0 ? this.tabsize - ((this.curcol - 1) % this.tabsize) - 1 : 0;
    this.curcol++;
    c=' ';
    return c;
  }
  if (c == '\r') {
    c=readCharFromStream();
    if (c != '\n') {
      if (c != END_OF_STREAM) {
        ungetChar(c);
      }
      c='\n';
    }
 else {
      this.curcol=1;
      this.curline++;
      return c;
    }
  }
  this.curcol++;
  return c;
}","/** 
 * @see org.w3c.tidy.StreamIn#readChar()
 */
public int readChar(){
  int c=END_OF_STREAM;
  if (this.pushed) {
    return popChar();
  }
  saveLastPos();
  if (this.tabs > 0) {
    this.curcol++;
    this.tabs--;
    return ' ';
  }
  c=readCharFromStream();
  if (END_OF_STREAM == c) {
    endOfStream=true;
    return END_OF_STREAM;
  }
  if (c == '\n') {
    this.curcol=1;
    this.curline++;
    return c;
  }
  if (c == '\t') {
    this.tabs=tabsize > 0 ? this.tabsize - ((this.curcol - 1) % this.tabsize) - 1 : 0;
    this.curcol++;
    c=' ';
    return c;
  }
  if (c == '\r') {
    c=readCharFromStream();
    if (c != '\n') {
      if (c != END_OF_STREAM) {
        ungetChar(c);
      }
      c='\n';
    }
 else {
      this.curcol=1;
      this.curline++;
      return c;
    }
  }
  if (127 < c && c < 160) {
    int c1=0;
    int replMode=Report.DISCARDED_CHAR;
    final String enc=lexer.configuration.getInCharEncodingName();
    final String repl=lexer.configuration.getReplacementCharEncoding();
    boolean isVendorChar=(""String_Node_Str"".equals(enc) || ""String_Node_Str"".equals(enc));
    boolean isWinChar=(""String_Node_Str"".equals(enc) || ""String_Node_Str"".equals(repl));
    boolean isMacChar=(""String_Node_Str"".equals(enc) || ""String_Node_Str"".equals(repl));
    lexer.lines=curline;
    lexer.columns=curcol;
    if (isWinChar) {
      c1=EncodingUtils.decodeWin1252(c);
    }
 else     if (isMacChar) {
      c1=EncodingUtils.decodeMacRoman(c);
    }
    if (c1 != 0) {
      replMode=Report.REPLACED_CHAR;
    }
    if (c1 == 0 && isVendorChar) {
      lexer.report.encodingError(lexer,ErrorCode.VENDOR_SPECIFIC_CHARS,c,replMode);
    }
 else     if (!isVendorChar) {
      lexer.report.encodingError(lexer,ErrorCode.INVALID_SGML_CHARS,c,replMode);
    }
    c=c1;
  }
  this.curcol++;
  return c;
}"
45319,"/** 
 * Symptom: <ul> <li> <ul> ... </ul> </li> </ul> Action: discard outer list.
 * @param lexer Lexer
 * @param node Node
 * @param pnode passed in as array to allow modifications.
 * @return <code>true</code> if nested lists have been found and replaced
 */
private boolean nestedList(Lexer lexer,Node node,Node[] pnode){
  Node child, list;
  if (node.is(TagId.UL) || node.is(TagId.OL)) {
    child=node.content;
    if (child == null) {
      return false;
    }
    if (child.next != null) {
      return false;
    }
    list=child.content;
    if (list == null) {
      return false;
    }
    if (list.tag != node.tag) {
      return false;
    }
    if (list.next != null) {
      return false;
    }
    pnode[0]=list;
    list.prev=node.prev;
    list.next=node.next;
    list.parent=node.parent;
    fixNodeLinks(list);
    child.content=null;
    node.content=null;
    node.next=null;
    node=null;
    if (list.prev != null) {
      if ((list.prev.is(TagId.UL) || list.prev.is(TagId.OL)) && list.prev.last != null) {
        node=list;
        list=node.prev;
        list.next=node.next;
        if (list.next != null) {
          list.next.prev=list;
        }
        child=list.last;
        node.parent=child;
        node.next=null;
        node.prev=child.last;
        fixNodeLinks(node);
        cleanNode(lexer,node);
      }
    }
    return true;
  }
  return false;
}","/** 
 * Symptom: <ul> <li> <ul> ... </ul> </li> </ul> Action: discard outer list.
 * @param lexer Lexer
 * @param node Node
 * @param pnode passed in as array to allow modifications.
 * @return <code>true</code> if nested lists have been found and replaced
 */
private boolean nestedList(Lexer lexer,Node node,Node[] pnode){
  Node child, list;
  if (node.is(TagId.UL) || node.is(TagId.OL)) {
    child=node.content;
    if (child == null) {
      return false;
    }
    if (child.next != null) {
      return false;
    }
    list=child.content;
    if (list == null) {
      return false;
    }
    if (list.tag != node.tag) {
      return false;
    }
    if (list.next != null) {
      return false;
    }
    pnode[0]=list;
    list.prev=node.prev;
    list.next=node.next;
    list.parent=node.parent;
    fixNodeLinks(list);
    child.content=null;
    node.content=null;
    node.next=null;
    node=null;
    if (list.prev != null) {
      if ((list.prev.is(TagId.UL) || list.prev.is(TagId.OL)) && list.prev.last != null) {
        node=list;
        list=node.prev;
        child=list.last;
        list.next=node.next;
        fixNodeLinks(list);
        node.parent=child;
        node.next=null;
        node.prev=child.last;
        fixNodeLinks(node);
        cleanNode(lexer,node);
      }
    }
    return true;
  }
  return false;
}"
45320,"/** 
 * Prints encoding error messages.
 * @param lexer Lexer
 * @param code error code
 * @param c invalid char
 */
public void encodingError(Lexer lexer,ErrorCode code,int c,int replaceMode){
  if (lexer.errors > lexer.configuration.getShowErrors()) {
    return;
  }
  if (lexer.configuration.isShowWarnings()) {
    String buf=Integer.toHexString(c);
switch (code) {
case ENCODING_MISMATCH:
      lexer.badChars|=BC_ENCODING_MISMATCH;
    messageLexer(code.code(),lexer,Level.WARNING,""String_Node_Str"",lexer.configuration.getInCharEncodingName(),ParsePropertyImpl.CHAR_ENCODING.getFriendlyName(null,new Integer(c),lexer.configuration));
  break;
case VENDOR_SPECIFIC_CHARS:
lexer.badChars|=BC_VENDOR_SPECIFIC_CHARS;
messageLexer(code.code(),lexer,Level.WARNING,""String_Node_Str"",replaceMode,buf);
break;
case INVALID_SGML_CHARS:
lexer.badChars|=BC_INVALID_SGML_CHARS;
messageLexer(code.code(),lexer,Level.WARNING,""String_Node_Str"",replaceMode,buf);
break;
case INVALID_UTF8:
lexer.badChars|=BC_INVALID_UTF8;
messageLexer(lexer,Level.WARNING,code,replaceMode,buf);
break;
case INVALID_UTF16:
lexer.badChars|=BC_INVALID_UTF16;
messageLexer(lexer,Level.WARNING,code,replaceMode,buf);
break;
case INVALID_NCR:
lexer.badChars|=BC_INVALID_NCR;
messageLexer(lexer,Level.WARNING,code,replaceMode,buf);
break;
}
}
}","/** 
 * Prints encoding error messages.
 * @param lexer Lexer
 * @param code error code
 * @param c invalid char
 */
public void encodingError(Lexer lexer,ErrorCode code,int c,int replaceMode){
  if (lexer.errors > lexer.configuration.getShowErrors()) {
    return;
  }
  if (lexer.configuration.isShowWarnings()) {
    String buf=Integer.toHexString(c);
switch (code) {
case ENCODING_MISMATCH:
      lexer.badChars|=BC_ENCODING_MISMATCH;
    messageLexer(code.code(),lexer,Level.WARNING,""String_Node_Str"",lexer.configuration.getInCharEncodingName(),ParsePropertyImpl.CHAR_ENCODING.getFriendlyName(null,new Integer(c),lexer.configuration));
  break;
case VENDOR_SPECIFIC_CHARS:
lexer.badChars|=BC_VENDOR_SPECIFIC_CHARS;
messageLexer(code.code(),lexer,Level.WARNING,""String_Node_Str"",replaceMode,buf);
break;
case INVALID_SGML_CHARS:
lexer.badChars|=BC_INVALID_SGML_CHARS;
messageLexer(code.code(),lexer,Level.WARNING,""String_Node_Str"",replaceMode,buf);
break;
case INVALID_UTF8:
lexer.badChars|=BC_INVALID_UTF8;
messageLexer(lexer,Level.WARNING,code,replaceMode,buf);
break;
case INVALID_UTF16:
lexer.badChars|=BC_INVALID_UTF16;
messageLexer(lexer,Level.WARNING,code,replaceMode,buf);
break;
case INVALID_NCR:
lexer.badChars|=BC_INVALID_NCR;
messageLexer(lexer,Level.WARNING,code,replaceMode,c);
break;
}
}
}"
45321,"/** 
 * @param c
 * @param mode
 */
private void printChar(int c,short mode){
  String entity;
  boolean breakable=false;
  if (c == ' ' && !TidyUtils.toBoolean(mode & (PREFORMATTED | COMMENT | ATTRIBVALUE| CDATA))) {
    if (TidyUtils.toBoolean(mode & NOWRAP)) {
      if (this.configuration.isNumEntities() || this.configuration.isXmlTags()) {
        addC('&',linelen++);
        addC('#',linelen++);
        addC('1',linelen++);
        addC('6',linelen++);
        addC('0',linelen++);
        addC(';',linelen++);
      }
 else {
        addC('&',linelen++);
        addC('n',linelen++);
        addC('b',linelen++);
        addC('s',linelen++);
        addC('p',linelen++);
        addC(';',linelen++);
      }
      return;
    }
    wraphere=linelen;
  }
  if (TidyUtils.toBoolean(mode & (COMMENT | CDATA))) {
    addC(c,linelen++);
    return;
  }
  if (!TidyUtils.toBoolean(mode & CDATA)) {
    if (c == '<') {
      addC('&',linelen++);
      addC('l',linelen++);
      addC('t',linelen++);
      addC(';',linelen++);
      return;
    }
    if (c == '>') {
      addC('&',linelen++);
      addC('g',linelen++);
      addC('t',linelen++);
      addC(';',linelen++);
      return;
    }
    if (c == '&' && this.configuration.isQuoteAmpersand()) {
      addC('&',linelen++);
      addC('a',linelen++);
      addC('m',linelen++);
      addC('p',linelen++);
      addC(';',linelen++);
      return;
    }
    if (c == '""' && this.configuration.isQuoteMarks()) {
      addC('&',linelen++);
      addC('q',linelen++);
      addC('u',linelen++);
      addC('o',linelen++);
      addC('t',linelen++);
      addC(';',linelen++);
      return;
    }
    if (c == '\'' && this.configuration.isQuoteMarks()) {
      addC('&',linelen++);
      addC('#',linelen++);
      addC('3',linelen++);
      addC('9',linelen++);
      addC(';',linelen++);
      return;
    }
    if (c == 160 && !this.configuration.isRawOut()) {
      if (this.configuration.isMakeBare()) {
        addC(' ',linelen++);
      }
 else       if (this.configuration.isQuoteNbsp()) {
        addC('&',linelen++);
        if (this.configuration.isNumEntities() || this.configuration.isXmlTags()) {
          addC('#',linelen++);
          addC('1',linelen++);
          addC('6',linelen++);
          addC('0',linelen++);
        }
 else {
          addC('n',linelen++);
          addC('b',linelen++);
          addC('s',linelen++);
          addC('p',linelen++);
        }
        addC(';',linelen++);
      }
 else {
        addC(c,linelen++);
      }
      return;
    }
  }
  if (""String_Node_Str"".equals(this.configuration.getOutCharEncodingName())) {
    if ((c >= 0x2000) && !TidyUtils.toBoolean(mode & PREFORMATTED)) {
      if (((c >= 0x2000) && (c <= 0x2006)) || ((c >= 0x2008) && (c <= 0x2010)) || ((c >= 0x2011) && (c <= 0x2046))|| ((c >= 0x207D) && (c <= 0x207E))|| ((c >= 0x208D) && (c <= 0x208E))|| ((c >= 0x2329) && (c <= 0x232A))|| ((c >= 0x3001) && (c <= 0x3003))|| ((c >= 0x3008) && (c <= 0x3011))|| ((c >= 0x3014) && (c <= 0x301F))|| ((c >= 0xFD3E) && (c <= 0xFD3F))|| ((c >= 0xFE30) && (c <= 0xFE44))|| ((c >= 0xFE49) && (c <= 0xFE52))|| ((c >= 0xFE54) && (c <= 0xFE61))|| ((c >= 0xFE6A) && (c <= 0xFE6B))|| ((c >= 0xFF01) && (c <= 0xFF03))|| ((c >= 0xFF05) && (c <= 0xFF0A))|| ((c >= 0xFF0C) && (c <= 0xFF0F))|| ((c >= 0xFF1A) && (c <= 0xFF1B))|| ((c >= 0xFF1F) && (c <= 0xFF20))|| ((c >= 0xFF3B) && (c <= 0xFF3D))|| ((c >= 0xFF61) && (c <= 0xFF65))) {
        wraphere=linelen + 2;
        breakable=true;
      }
 else {
switch (c) {
case 0xFE63:
case 0xFE68:
case 0x3030:
case 0x30FB:
case 0xFF3F:
case 0xFF5B:
case 0xFF5D:
          wraphere=linelen + 2;
        breakable=true;
    }
  }
  if (breakable) {
    if (((c >= 0x201A) && (c <= 0x201C)) || ((c >= 0x201E) && (c <= 0x201F))) {
      wraphere--;
    }
 else {
switch (c) {
case 0x2018:
case 0x2039:
case 0x2045:
case 0x207D:
case 0x208D:
case 0x2329:
case 0x3008:
case 0x300A:
case 0x300C:
case 0x300E:
case 0x3010:
case 0x3014:
case 0x3016:
case 0x3018:
case 0x301A:
case 0x301D:
case 0xFD3E:
case 0xFE35:
case 0xFE37:
case 0xFE39:
case 0xFE3B:
case 0xFE3D:
case 0xFE3F:
case 0xFE41:
case 0xFE43:
case 0xFE59:
case 0xFE5B:
case 0xFE5D:
case 0xFF08:
case 0xFF3B:
case 0xFF5B:
case 0xFF62:
        wraphere--;
    }
  }
}
}
 else if (""String_Node_Str"".equals(this.configuration.getOutCharEncodingName())) {
addC(c,linelen++);
if (((c & 0xFF00) == 0xA100) && !TidyUtils.toBoolean(mode & PREFORMATTED)) {
  wraphere=linelen;
  if ((c > 0x5C) && (c < 0xAD) && ((c & 1) == 1)) {
    wraphere--;
  }
}
return;
}
 else if (""String_Node_Str"".equals(this.configuration.getOutCharEncodingName()) || ""String_Node_Str"".equals(this.configuration.getOutCharEncodingName())) {
addC(c,linelen++);
return;
}
 else {
if (this.configuration.isRawOut()) {
  addC(c,linelen++);
  return;
}
}
}
if (c == 160 && TidyUtils.toBoolean(mode & PREFORMATTED)) {
addC(' ',linelen++);
return;
}
if (this.configuration.isMakeClean() && this.configuration.isAsciiChars() || this.configuration.isMakeBare()) {
if (c >= 0x2013 && c <= 0x201E) {
switch (c) {
case 0x2013:
case 0x2014:
  c='-';
break;
case 0x2018:
case 0x2019:
case 0x201A:
c='\'';
break;
case 0x201C:
case 0x201D:
case 0x201E:
c='""';
break;
}
}
}
if (""String_Node_Str"".equals(this.configuration.getOutCharEncodingName())) {
if (c > 255) {
if (!this.configuration.isNumEntities()) {
entity=EntityTable.getDefaultEntityTable().entityName((short)c);
if (entity != null) {
entity=""String_Node_Str"" + entity + ""String_Node_Str"";
}
 else {
entity=""String_Node_Str"" + c + ""String_Node_Str"";
}
}
 else {
entity=""String_Node_Str"" + c + ""String_Node_Str"";
}
for (int i=0; i < entity.length(); i++) {
addC(entity.charAt(i),linelen++);
}
return;
}
if (c > 126 && c < 160) {
entity=""String_Node_Str"" + c + ""String_Node_Str"";
for (int i=0; i < entity.length(); i++) {
addC(entity.charAt(i),linelen++);
}
return;
}
addC(c,linelen++);
return;
}
if (this.configuration.getOutCharEncodingName().startsWith(""String_Node_Str"")) {
addC(c,linelen++);
return;
}
if (this.configuration.isXmlTags()) {
if (c > 127 && ""String_Node_Str"".equals(this.configuration.getOutCharEncodingName())) {
entity=""String_Node_Str"" + c + ""String_Node_Str"";
for (int i=0; i < entity.length(); i++) {
addC(entity.charAt(i),linelen++);
}
return;
}
addC(c,linelen++);
return;
}
if (""String_Node_Str"".equals(this.configuration.getOutCharEncodingName()) && (c > 126 || (c < ' ' && c != '\t'))) {
if (!this.configuration.isNumEntities()) {
entity=EntityTable.getDefaultEntityTable().entityName((short)c);
if (entity != null) {
entity=""String_Node_Str"" + entity + ""String_Node_Str"";
}
 else {
entity=""String_Node_Str"" + c + ""String_Node_Str"";
}
}
 else {
entity=""String_Node_Str"" + c + ""String_Node_Str"";
}
for (int i=0; i < entity.length(); i++) {
addC(entity.charAt(i),linelen++);
}
return;
}
addC(c,linelen++);
}","/** 
 * @param c
 * @param mode
 */
private void printChar(int c,short mode){
  String entity;
  boolean breakable=false;
  if (c == ' ' && !TidyUtils.toBoolean(mode & (PREFORMATTED | COMMENT | ATTRIBVALUE| CDATA))) {
    if (TidyUtils.toBoolean(mode & NOWRAP)) {
      if (this.configuration.isNumEntities() || this.configuration.isXmlTags()) {
        addC('&',linelen++);
        addC('#',linelen++);
        addC('1',linelen++);
        addC('6',linelen++);
        addC('0',linelen++);
        addC(';',linelen++);
      }
 else {
        addC('&',linelen++);
        addC('n',linelen++);
        addC('b',linelen++);
        addC('s',linelen++);
        addC('p',linelen++);
        addC(';',linelen++);
      }
      return;
    }
    wraphere=linelen;
  }
  if (TidyUtils.toBoolean(mode & (COMMENT | CDATA))) {
    addC(c,linelen++);
    return;
  }
  if (!TidyUtils.toBoolean(mode & CDATA)) {
    if (c == '<') {
      addC('&',linelen++);
      addC('l',linelen++);
      addC('t',linelen++);
      addC(';',linelen++);
      return;
    }
    if (c == '>') {
      addC('&',linelen++);
      addC('g',linelen++);
      addC('t',linelen++);
      addC(';',linelen++);
      return;
    }
    if (c == '&' && this.configuration.isQuoteAmpersand()) {
      addC('&',linelen++);
      addC('a',linelen++);
      addC('m',linelen++);
      addC('p',linelen++);
      addC(';',linelen++);
      return;
    }
    if (c == '""' && this.configuration.isQuoteMarks()) {
      addC('&',linelen++);
      addC('q',linelen++);
      addC('u',linelen++);
      addC('o',linelen++);
      addC('t',linelen++);
      addC(';',linelen++);
      return;
    }
    if (c == '\'' && this.configuration.isQuoteMarks()) {
      addC('&',linelen++);
      addC('#',linelen++);
      addC('3',linelen++);
      addC('9',linelen++);
      addC(';',linelen++);
      return;
    }
    if (c == 160 && !this.configuration.isRawOut()) {
      if (this.configuration.isMakeBare()) {
        addC(' ',linelen++);
      }
 else       if (this.configuration.isQuoteNbsp()) {
        addC('&',linelen++);
        if (this.configuration.isNumEntities() || this.configuration.isXmlTags()) {
          addC('#',linelen++);
          addC('1',linelen++);
          addC('6',linelen++);
          addC('0',linelen++);
        }
 else {
          addC('n',linelen++);
          addC('b',linelen++);
          addC('s',linelen++);
          addC('p',linelen++);
        }
        addC(';',linelen++);
      }
 else {
        addC(c,linelen++);
      }
      return;
    }
  }
  if (""String_Node_Str"".equals(this.configuration.getOutCharEncodingName())) {
    if ((c >= 0x2000) && !TidyUtils.toBoolean(mode & PREFORMATTED)) {
      if (((c >= 0x2000) && (c <= 0x2006)) || ((c >= 0x2008) && (c <= 0x2010)) || ((c >= 0x2011) && (c <= 0x2046))|| ((c >= 0x207D) && (c <= 0x207E))|| ((c >= 0x208D) && (c <= 0x208E))|| ((c >= 0x2329) && (c <= 0x232A))|| ((c >= 0x3001) && (c <= 0x3003))|| ((c >= 0x3008) && (c <= 0x3011))|| ((c >= 0x3014) && (c <= 0x301F))|| ((c >= 0xFD3E) && (c <= 0xFD3F))|| ((c >= 0xFE30) && (c <= 0xFE44))|| ((c >= 0xFE49) && (c <= 0xFE52))|| ((c >= 0xFE54) && (c <= 0xFE61))|| ((c >= 0xFE6A) && (c <= 0xFE6B))|| ((c >= 0xFF01) && (c <= 0xFF03))|| ((c >= 0xFF05) && (c <= 0xFF0A))|| ((c >= 0xFF0C) && (c <= 0xFF0F))|| ((c >= 0xFF1A) && (c <= 0xFF1B))|| ((c >= 0xFF1F) && (c <= 0xFF20))|| ((c >= 0xFF3B) && (c <= 0xFF3D))|| ((c >= 0xFF61) && (c <= 0xFF65))) {
        wraphere=linelen + 1;
        breakable=true;
      }
 else {
switch (c) {
case 0xFE63:
case 0xFE68:
case 0x3030:
case 0x30FB:
case 0xFF3F:
case 0xFF5B:
case 0xFF5D:
          wraphere=linelen + 1;
        breakable=true;
    }
  }
  if (breakable) {
    if (((c >= 0x201A) && (c <= 0x201C)) || ((c >= 0x201E) && (c <= 0x201F))) {
      wraphere--;
    }
 else {
switch (c) {
case 0x2018:
case 0x2039:
case 0x2045:
case 0x207D:
case 0x208D:
case 0x2329:
case 0x3008:
case 0x300A:
case 0x300C:
case 0x300E:
case 0x3010:
case 0x3014:
case 0x3016:
case 0x3018:
case 0x301A:
case 0x301D:
case 0xFD3E:
case 0xFE35:
case 0xFE37:
case 0xFE39:
case 0xFE3B:
case 0xFE3D:
case 0xFE3F:
case 0xFE41:
case 0xFE43:
case 0xFE59:
case 0xFE5B:
case 0xFE5D:
case 0xFF08:
case 0xFF3B:
case 0xFF5B:
case 0xFF62:
        wraphere--;
    }
  }
}
}
 else if (""String_Node_Str"".equals(this.configuration.getOutCharEncodingName())) {
addC(c,linelen++);
if (((c & 0xFF00) == 0xA100) && !TidyUtils.toBoolean(mode & PREFORMATTED)) {
  wraphere=linelen;
  if ((c > 0x5C) && (c < 0xAD) && ((c & 1) == 1)) {
    wraphere--;
  }
}
return;
}
 else if (""String_Node_Str"".equals(this.configuration.getOutCharEncodingName()) || ""String_Node_Str"".equals(this.configuration.getOutCharEncodingName())) {
addC(c,linelen++);
return;
}
 else {
if (this.configuration.isRawOut()) {
  addC(c,linelen++);
  return;
}
}
}
if (c == 160 && TidyUtils.toBoolean(mode & PREFORMATTED)) {
addC(' ',linelen++);
return;
}
if (this.configuration.isMakeClean() && this.configuration.isAsciiChars() || this.configuration.isMakeBare()) {
if (c >= 0x2013 && c <= 0x201E) {
switch (c) {
case 0x2013:
case 0x2014:
  c='-';
break;
case 0x2018:
case 0x2019:
case 0x201A:
c='\'';
break;
case 0x201C:
case 0x201D:
case 0x201E:
c='""';
break;
}
}
}
if (""String_Node_Str"".equals(this.configuration.getOutCharEncodingName())) {
if (c > 255) {
if (!this.configuration.isNumEntities()) {
entity=EntityTable.getDefaultEntityTable().entityName((short)c);
if (entity != null) {
entity=""String_Node_Str"" + entity + ""String_Node_Str"";
}
 else {
entity=""String_Node_Str"" + c + ""String_Node_Str"";
}
}
 else {
entity=""String_Node_Str"" + c + ""String_Node_Str"";
}
for (int i=0; i < entity.length(); i++) {
addC(entity.charAt(i),linelen++);
}
return;
}
if (c > 126 && c < 160) {
entity=""String_Node_Str"" + c + ""String_Node_Str"";
for (int i=0; i < entity.length(); i++) {
addC(entity.charAt(i),linelen++);
}
return;
}
addC(c,linelen++);
return;
}
if (this.configuration.getOutCharEncodingName().startsWith(""String_Node_Str"")) {
addC(c,linelen++);
return;
}
if (this.configuration.isXmlTags()) {
if (c > 127 && ""String_Node_Str"".equals(this.configuration.getOutCharEncodingName())) {
entity=""String_Node_Str"" + c + ""String_Node_Str"";
for (int i=0; i < entity.length(); i++) {
addC(entity.charAt(i),linelen++);
}
return;
}
addC(c,linelen++);
return;
}
if (""String_Node_Str"".equals(this.configuration.getOutCharEncodingName()) && (c > 126 || (c < ' ' && c != '\t'))) {
if (!this.configuration.isNumEntities()) {
entity=EntityTable.getDefaultEntityTable().entityName((short)c);
if (entity != null) {
entity=""String_Node_Str"" + entity + ""String_Node_Str"";
}
 else {
entity=""String_Node_Str"" + c + ""String_Node_Str"";
}
}
 else {
entity=""String_Node_Str"" + c + ""String_Node_Str"";
}
for (int i=0; i < entity.length(); i++) {
addC(entity.charAt(i),linelen++);
}
return;
}
addC(c,linelen++);
}"
45322,"/** 
 * This is a major clean up to strip out all the extra stuff you get when you save as web page from Word 2000. It doesn't yet know what to do with VML tags, but these will appear as errors unless you declare them as new tags, such as o:p which needs to be declared as inline.
 * @param lexer Lexer
 * @param node node to clean up
 */
public void cleanWord2000(Lexer lexer,Node node){
  Node list=null;
  while (node != null) {
    if (node.is(TagId.HTML)) {
      if ((node.getAttrByName(""String_Node_Str"") == null)) {
        return;
      }
      lexer.configuration.tt.freeAttrs(node);
    }
    if (node.is(TagId.P)) {
      if (noMargins(node)) {
        Node pre;
        Node next;
        Node.coerceNode(lexer,node,TagId.PRE,false,true);
        purgeWord2000Attributes(node);
        if (node.content != null) {
          cleanWord2000(lexer,node.content);
        }
        pre=node;
        node=node.next;
        while (node.is(TagId.P) && noMargins(node)) {
          next=node.next;
          node.removeNode();
          pre.insertNodeAtEnd(lexer.newLineNode());
          pre.insertNodeAtEnd(node);
          stripSpan(lexer,node);
          node=next;
        }
        if (node == null) {
          break;
        }
      }
    }
    if (node.tag != null && TidyUtils.toBoolean(node.tag.model & Dict.CM_BLOCK) && singleSpace(lexer,node)) {
      node=stripSpan(lexer,node);
      continue;
    }
    if (node.is(TagId.STYLE) || node.is(TagId.META) || node.type == NodeType.CommentTag) {
      node=Node.discardElement(node);
      continue;
    }
    if (node.is(TagId.SPAN) || node.is(TagId.FONT)) {
      node=stripSpan(lexer,node);
      continue;
    }
    if (node.is(TagId.LINK)) {
      AttVal attr=node.getAttrByName(""String_Node_Str"");
      if (attr != null && attr.value != null && attr.value.equals(""String_Node_Str"")) {
        node=Node.discardElement(node);
        continue;
      }
    }
    if (node.tag != null && ""String_Node_Str"".equals(node.tag.name)) {
      Node[] next=new Node[1];
      discardContainer(node,next);
      node=next[0];
      continue;
    }
    if (node.content == null && node.is(TagId.P)) {
      node=Node.discardElement(node);
      continue;
    }
    if (node.is(TagId.P)) {
      AttVal attr=node.getAttrByName(""String_Node_Str"");
      AttVal atrStyle=node.getAttrByName(""String_Node_Str"");
      if (attr != null && attr.value != null && ((attr.value.equals(""String_Node_Str"") || attr.value.equals(""String_Node_Str"")) || (atrStyle != null && (atrStyle.value.indexOf(""String_Node_Str"") != -1)))) {
        TagId listType=TagId.UL;
        if (attr.value.equals(""String_Node_Str"")) {
          listType=TagId.OL;
        }
        Node.coerceNode(lexer,node,TagId.LI,false,true);
        if (list == null || !list.is(listType)) {
          list=lexer.inferredTag(listType);
          Node.insertNodeBeforeElement(node,list);
        }
        purgeWord2000Attributes(node);
        if (node.content != null) {
          cleanWord2000(lexer,node.content);
        }
        node.removeNode();
        list.insertNodeAtEnd(node);
        node=list;
      }
 else       if (attr != null && attr.value != null && attr.value.equals(""String_Node_Str"")) {
        Node br=lexer.newLineNode();
        normalizeSpaces(lexer,node);
        if (list == null || !list.is(TagId.PRE)) {
          list=lexer.inferredTag(TagId.PRE);
          Node.insertNodeBeforeElement(node,list);
        }
        node.removeNode();
        list.insertNodeAtEnd(node);
        stripSpan(lexer,node);
        list.insertNodeAtEnd(br);
        node=list.next;
      }
 else {
        list=null;
      }
    }
 else {
      list=null;
    }
    if (node.type == NodeType.StartTag || node.type == NodeType.StartEndTag) {
      purgeWord2000Attributes(node);
    }
    if (node.content != null) {
      cleanWord2000(lexer,node.content);
    }
    node=node.next;
  }
}","/** 
 * This is a major clean up to strip out all the extra stuff you get when you save as web page from Word 2000. It doesn't yet know what to do with VML tags, but these will appear as errors unless you declare them as new tags, such as o:p which needs to be declared as inline.
 * @param lexer Lexer
 * @param node node to clean up
 */
public void cleanWord2000(Lexer lexer,Node node){
  Node list=null;
  while (node != null) {
    if (node.is(TagId.HTML)) {
      if ((node.getAttrByName(""String_Node_Str"") == null)) {
        return;
      }
      lexer.configuration.tt.freeAttrs(node);
    }
    if (node.is(TagId.P)) {
      if (noMargins(node)) {
        Node pre;
        Node next;
        Node.coerceNode(lexer,node,TagId.PRE,false,true);
        purgeWord2000Attributes(node);
        if (node.content != null) {
          cleanWord2000(lexer,node.content);
        }
        pre=node;
        node=node.next;
        while (node != null && node.is(TagId.P) && noMargins(node)) {
          next=node.next;
          node.removeNode();
          pre.insertNodeAtEnd(lexer.newLineNode());
          pre.insertNodeAtEnd(node);
          stripSpan(lexer,node);
          node=next;
        }
        if (node == null) {
          break;
        }
      }
    }
    if (node.tag != null && TidyUtils.toBoolean(node.tag.model & Dict.CM_BLOCK) && singleSpace(lexer,node)) {
      node=stripSpan(lexer,node);
      continue;
    }
    if (node.is(TagId.STYLE) || node.is(TagId.META) || node.type == NodeType.CommentTag) {
      node=Node.discardElement(node);
      continue;
    }
    if (node.is(TagId.SPAN) || node.is(TagId.FONT)) {
      node=stripSpan(lexer,node);
      continue;
    }
    if (node.is(TagId.LINK)) {
      AttVal attr=node.getAttrByName(""String_Node_Str"");
      if (attr != null && attr.value != null && attr.value.equals(""String_Node_Str"")) {
        node=Node.discardElement(node);
        continue;
      }
    }
    if (node.tag != null && ""String_Node_Str"".equals(node.tag.name)) {
      Node[] next=new Node[1];
      discardContainer(node,next);
      node=next[0];
      continue;
    }
    if (node.content == null && node.is(TagId.P)) {
      node=Node.discardElement(node);
      continue;
    }
    if (node.is(TagId.P)) {
      AttVal attr=node.getAttrByName(""String_Node_Str"");
      AttVal atrStyle=node.getAttrByName(""String_Node_Str"");
      if (attr != null && attr.value != null && ((attr.value.equals(""String_Node_Str"") || attr.value.equals(""String_Node_Str"")) || (atrStyle != null && (atrStyle.value.indexOf(""String_Node_Str"") != -1)))) {
        TagId listType=TagId.UL;
        if (attr.value.equals(""String_Node_Str"")) {
          listType=TagId.OL;
        }
        Node.coerceNode(lexer,node,TagId.LI,false,true);
        if (list == null || !list.is(listType)) {
          list=lexer.inferredTag(listType);
          Node.insertNodeBeforeElement(node,list);
        }
        purgeWord2000Attributes(node);
        if (node.content != null) {
          cleanWord2000(lexer,node.content);
        }
        node.removeNode();
        list.insertNodeAtEnd(node);
        node=list;
      }
 else       if (attr != null && attr.value != null && attr.value.equals(""String_Node_Str"")) {
        Node br=lexer.newLineNode();
        normalizeSpaces(lexer,node);
        if (list == null || !list.is(TagId.PRE)) {
          list=lexer.inferredTag(TagId.PRE);
          Node.insertNodeBeforeElement(node,list);
        }
        node.removeNode();
        list.insertNodeAtEnd(node);
        stripSpan(lexer,node);
        list.insertNodeAtEnd(br);
        node=list.next;
      }
 else {
        list=null;
      }
    }
 else {
      list=null;
    }
    if (node.type == NodeType.StartTag || node.type == NodeType.StartEndTag) {
      purgeWord2000Attributes(node);
    }
    if (node.content != null) {
      cleanWord2000(lexer,node.content);
    }
    node=node.next;
  }
}"
45323,"/** 
 * @see org.w3c.dom.Document#createTextNode
 */
public org.w3c.dom.Text createTextNode(String data){
  byte[] textarray=TidyUtils.getBytes(data);
  Node node=new Node(NodeType.TextNode,textarray,0,textarray.length);
  if (node != null) {
    return (org.w3c.dom.Text)node.getAdapter();
  }
  return null;
}","/** 
 * @see org.w3c.dom.Document#createTextNode
 */
public org.w3c.dom.Text createTextNode(String data){
  byte[] textarray=TidyUtils.getBytes(data);
  Node node=new Node(NodeType.TextNode,textarray,0,textarray.length);
  return (org.w3c.dom.Text)node.getAdapter();
}"
45324,"/** 
 * @see org.w3c.dom.Document#createComment
 */
public org.w3c.dom.Comment createComment(String data){
  byte[] textarray=TidyUtils.getBytes(data);
  Node node=new Node(NodeType.CommentTag,textarray,0,textarray.length);
  if (node != null) {
    return (org.w3c.dom.Comment)node.getAdapter();
  }
  return null;
}","/** 
 * @see org.w3c.dom.Document#createComment
 */
public org.w3c.dom.Comment createComment(String data){
  byte[] textarray=TidyUtils.getBytes(data);
  Node node=new Node(NodeType.CommentTag,textarray,0,textarray.length);
  return (org.w3c.dom.Comment)node.getAdapter();
}"
45325,"/** 
 * @see org.w3c.dom.Document#createElement
 */
public org.w3c.dom.Element createElement(String tagName) throws DOMException {
  Node node=new Node(NodeType.StartEndTag,null,0,0,tagName,this.tt);
  if (node != null) {
    if (node.tag == null) {
      node.tag=TagTable.XML_TAGS;
    }
    return (org.w3c.dom.Element)node.getAdapter();
  }
  return null;
}","/** 
 * @see org.w3c.dom.Document#createElement
 */
public org.w3c.dom.Element createElement(String tagName) throws DOMException {
  Node node=new Node(NodeType.StartEndTag,null,0,0,tagName,this.tt);
  if (node.tag == null) {
    node.tag=TagTable.XML_TAGS;
  }
  return (org.w3c.dom.Element)node.getAdapter();
}"
45326,"/** 
 * @see org.w3c.dom.Document#createAttribute
 */
public org.w3c.dom.Attr createAttribute(String name) throws DOMException {
  AttVal av=new AttVal(null,null,'""',name,null);
  if (av != null) {
    av.dict=AttributeTable.getDefaultAttributeTable().findAttribute(av);
    return av.getAdapter();
  }
  return null;
}","/** 
 * @see org.w3c.dom.Document#createAttribute
 */
public org.w3c.dom.Attr createAttribute(String name) throws DOMException {
  AttVal av=new AttVal(null,null,'""',name,null);
  av.dict=AttributeTable.getDefaultAttributeTable().findAttribute(av);
  return av.getAdapter();
}"
45327,"/** 
 * Not supported.
 * @see org.w3c.dom.CharacterData#appendData
 */
public void appendData(String arg) throws DOMException {
  throw new DOMException(DOMException.NO_MODIFICATION_ALLOWED_ERR,""String_Node_Str"");
}","/** 
 * @see org.w3c.dom.CharacterData#appendData
 */
public void appendData(String arg) throws DOMException {
  setNodeValue(getNodeValue() + arg);
}"
45328,"/** 
 * Not supported.
 * @see org.w3c.dom.CharacterData#replaceData
 */
public void replaceData(int offset,int count,String arg) throws DOMException {
  throw new DOMException(DOMException.NO_MODIFICATION_ALLOWED_ERR,""String_Node_Str"");
}","/** 
 * @see org.w3c.dom.CharacterData#replaceData
 */
public void replaceData(int offset,int count,String arg) throws DOMException {
  deleteData(offset,count);
  insertData(offset,arg);
}"
45329,"/** 
 * Not supported.
 * @see org.w3c.dom.CharacterData#deleteData
 */
public void deleteData(int offset,int count) throws DOMException {
  throw new DOMException(DOMException.NO_MODIFICATION_ALLOWED_ERR,""String_Node_Str"");
}","/** 
 * @see org.w3c.dom.CharacterData#deleteData
 */
public void deleteData(int offset,int count) throws DOMException {
  if (count < 0) {
    throw new DOMException(DOMException.INDEX_SIZE_ERR,""String_Node_Str"");
  }
  if (offset < adaptee.start || adaptee.start + offset >= adaptee.end) {
    throw new DOMException(DOMException.INDEX_SIZE_ERR,""String_Node_Str"");
  }
  StringBuilder sb=new StringBuilder(getNodeValue());
  int end=offset + count;
  if (end > adaptee.end) {
    end=adaptee.end;
  }
  setData(sb.delete(offset,end).toString());
}"
45330,"/** 
 * Not supported.
 * @see org.w3c.dom.CharacterData#setData
 */
public void setData(String data) throws DOMException {
  throw new DOMException(DOMException.NO_MODIFICATION_ALLOWED_ERR,""String_Node_Str"");
}","/** 
 * @see org.w3c.dom.CharacterData#setData
 */
public void setData(String data) throws DOMException {
  setNodeValue(data);
}"
45331,"/** 
 * Not supported.
 * @see org.w3c.dom.CharacterData#insertData
 */
public void insertData(int offset,String arg) throws DOMException {
  throw new DOMException(DOMException.NO_MODIFICATION_ALLOWED_ERR,""String_Node_Str"");
}","/** 
 * @see org.w3c.dom.CharacterData#insertData
 */
public void insertData(int offset,String arg) throws DOMException {
  if (offset < adaptee.start || adaptee.start + offset >= adaptee.end) {
    throw new DOMException(DOMException.INDEX_SIZE_ERR,""String_Node_Str"");
  }
  StringBuilder sb=new StringBuilder(getNodeValue());
  sb.insert(offset,arg);
  setData(sb.toString());
}"
45332,"/** 
 * Should always be able convert to/from UTF-8, so encoding exceptions are converted to an Error to avoid adding throws declarations in lots of methods.
 * @param bytes byte array
 * @param offset starting offset in byte array
 * @param length length in byte array starting from offset
 * @return same as <code>new String(bytes, offset, length, ""UTF8"")</code>
 */
public static String getString(final byte[] bytes,final int offset,final int length){
  try {
    return length == 0 ? null : new String(bytes,offset,Math.min(length,bytes.length - offset),""String_Node_Str"");
  }
 catch (  UnsupportedEncodingException e) {
    throw new Error(""String_Node_Str"" + e.getMessage());
  }
}","/** 
 * Should always be able convert to/from UTF-8, so encoding exceptions are converted to an Error to avoid adding throws declarations in lots of methods.
 * @param bytes byte array
 * @param offset starting offset in byte array
 * @param length length in byte array starting from offset
 * @return same as <code>new String(bytes, offset, length, ""UTF8"")</code>
 */
public static String getString(final byte[] bytes,final int offset,final int length){
  try {
    return new String(bytes,offset,Math.min(length,bytes.length - offset),""String_Node_Str"");
  }
 catch (  UnsupportedEncodingException e) {
    throw new Error(""String_Node_Str"" + e.getMessage());
  }
}"
45333,"/** 
 * prints available configuration options.
 * @param errout where to write
 * @param showActualConfiguration print actual configuration values
 */
public void printConfigOptions(Writer errout,boolean showActualConfiguration){
  String pad=""String_Node_Str"";
  try {
    errout.write(""String_Node_Str"");
    if (showActualConfiguration) {
      errout.write(""String_Node_Str"");
    }
 else {
      errout.write(""String_Node_Str"");
    }
    errout.write(""String_Node_Str"");
    for (    Option configItem : Options.getOptions()) {
      errout.write(configItem.getName());
      errout.write(pad,0,28 - configItem.getName().length());
      errout.write(configItem.getParser().getType());
      errout.write(pad,0,11 - configItem.getParser().getType().length());
      if (showActualConfiguration) {
        Object actualValue=options.get(configItem);
        errout.write(configItem.getParser().getFriendlyName(configItem.getName(),actualValue,this));
      }
 else {
        errout.write(configItem.getParser().getOptionValues());
      }
      errout.write(""String_Node_Str"");
    }
    errout.flush();
  }
 catch (  IOException e) {
    throw new RuntimeException(e.getMessage());
  }
}","/** 
 * prints available configuration options.
 * @param errout where to write
 * @param showActualConfiguration print actual configuration values
 */
public void printConfigOptions(Writer errout,boolean showActualConfiguration){
  String pad=""String_Node_Str"";
  try {
    errout.write(""String_Node_Str"");
    if (showActualConfiguration) {
      errout.write(""String_Node_Str"");
    }
 else {
      errout.write(""String_Node_Str"");
    }
    errout.write(""String_Node_Str"");
    final Option[] op=Option.values();
    Arrays.sort(op,Option.getComparator());
    for (    Option configItem : op) {
      final ParseProperty parser=configItem.getParser();
      if (parser == null) {
        continue;
      }
      errout.write(configItem.getName());
      errout.write(pad,0,28 - configItem.getName().length());
      String type=parser.getType();
      if (type == null) {
        type=""String_Node_Str"";
      }
      errout.write(type);
      errout.write(pad,0,11 - type.length());
      if (showActualConfiguration) {
        final Object actualValue=options.get(configItem);
        errout.write(parser.getFriendlyName(configItem.getName(),actualValue,this));
      }
 else {
        String values=parser.getOptionValues();
        if (values == null) {
          values=configItem.getPickList().getDescription();
        }
        errout.write(values);
      }
      errout.write(""String_Node_Str"");
    }
    errout.flush();
  }
 catch (  IOException e) {
    throw new RuntimeException(e.getMessage());
  }
}"
45334,"/** 
 * Is the given String a valid configuration flag?
 * @param name configuration parameter name
 * @return <code>true</code> if the given String is a valid config option
 */
public static boolean isKnownOption(String name){
  return name != null && Options.getOption(name) != null;
}","/** 
 * Is the given String a valid configuration flag?
 * @param name configuration parameter name
 * @return <code>true</code> if the given String is a valid config option
 */
public static boolean isKnownOption(String name){
  return name != null && Option.valueOf(name) != null;
}"
45335,"/** 
 * Parses the configuration properties file.
 */
private void parseProps(){
  for (  Object o : properties.keySet()) {
    String key=(String)o;
    if (key.startsWith(""String_Node_Str"")) {
      continue;
    }
    Option flag=Options.getOption(key);
    if (flag == null) {
      report.unknownOption(key);
      continue;
    }
    String stringValue=properties.getProperty(key);
    Object value=flag.getParser().parse(stringValue,flag,this);
    options.put(flag,value);
  }
}","/** 
 * Parses the configuration properties file.
 */
private void parseProps(){
  for (  Object o : properties.keySet()) {
    String key=(String)o;
    if (key.startsWith(""String_Node_Str"")) {
      continue;
    }
    Option flag=Option.valueOf(key);
    if (flag == null) {
      report.unknownOption(key);
      continue;
    }
    String stringValue=properties.getProperty(key);
    Object value=flag.getParser().parse(stringValue,flag,this);
    options.put(flag,value);
  }
}"
45336,"/** 
 * @see org.w3c.dom.Node#insertBefore
 */
public org.w3c.dom.Node insertBefore(org.w3c.dom.Node newChild,org.w3c.dom.Node refChild){
  if (newChild == null) {
    return null;
  }
  if (!(newChild instanceof DOMNodeImpl)) {
    throw new DOMException(DOMException.WRONG_DOCUMENT_ERR,""String_Node_Str"");
  }
  DOMNodeImpl newCh=(DOMNodeImpl)newChild;
  if (this.adaptee.type == NodeType.RootNode) {
    if (newCh.adaptee.type != NodeType.DocTypeTag && newCh.adaptee.type != NodeType.ProcInsTag) {
      throw new DOMException(DOMException.HIERARCHY_REQUEST_ERR,""String_Node_Str"");
    }
  }
 else   if (this.adaptee.type == NodeType.StartTag) {
    if (newCh.adaptee.type != NodeType.StartTag && newCh.adaptee.type != NodeType.StartEndTag && newCh.adaptee.type != NodeType.CommentTag && newCh.adaptee.type != NodeType.TextNode && newCh.adaptee.type != NodeType.CDATATag) {
      throw new DOMException(DOMException.HIERARCHY_REQUEST_ERR,""String_Node_Str"");
    }
  }
  if (refChild == null) {
    this.adaptee.insertNodeAtEnd(newCh.adaptee);
    if (this.adaptee.type == NodeType.StartEndTag) {
      this.adaptee.setType(NodeType.StartTag);
    }
  }
 else {
    Node ref=this.adaptee.content;
    while (ref != null) {
      if (ref.getAdapter() == refChild) {
        break;
      }
      ref=ref.next;
    }
    if (ref == null) {
      throw new DOMException(DOMException.NOT_FOUND_ERR,""String_Node_Str"");
    }
    Node.insertNodeBeforeElement(ref,newCh.adaptee);
  }
  return newChild;
}","/** 
 * @see org.w3c.dom.Node#insertBefore
 */
public org.w3c.dom.Node insertBefore(org.w3c.dom.Node newChild,org.w3c.dom.Node refChild){
  if (newChild == null) {
    return null;
  }
  if (!(newChild instanceof DOMNodeImpl)) {
    throw new DOMException(DOMException.WRONG_DOCUMENT_ERR,""String_Node_Str"");
  }
  DOMNodeImpl newCh=(DOMNodeImpl)newChild;
  if (this.adaptee.type == NodeType.RootNode) {
    if (newCh.adaptee.type != NodeType.DocTypeTag && newCh.adaptee.type != NodeType.ProcInsTag) {
      throw new DOMException(DOMException.HIERARCHY_REQUEST_ERR,""String_Node_Str"");
    }
  }
 else   if (this.adaptee.type == NodeType.StartTag) {
    if (newCh.adaptee.type != NodeType.StartTag && newCh.adaptee.type != NodeType.StartEndTag && newCh.adaptee.type != NodeType.CommentTag && newCh.adaptee.type != NodeType.TextNode && newCh.adaptee.type != NodeType.CDATATag) {
      throw new DOMException(DOMException.HIERARCHY_REQUEST_ERR,""String_Node_Str"");
    }
  }
  newCh.adaptee.removeNode();
  if (refChild == null) {
    this.adaptee.insertNodeAtEnd(newCh.adaptee);
    if (this.adaptee.type == NodeType.StartEndTag) {
      this.adaptee.setType(NodeType.StartTag);
    }
  }
 else {
    final DOMNodeImpl refCh=(DOMNodeImpl)refChild;
    if (refCh.adaptee.parent != adaptee) {
      throw new DOMException(DOMException.NOT_FOUND_ERR,""String_Node_Str"");
    }
    Node.insertNodeBeforeElement(refCh.adaptee,newCh.adaptee);
  }
  return newChild;
}"
45337,"/** 
 * @see org.w3c.dom.Node#replaceChild
 */
public org.w3c.dom.Node replaceChild(org.w3c.dom.Node newChild,org.w3c.dom.Node oldChild){
  if (newChild == null) {
    return null;
  }
  if (!(newChild instanceof DOMNodeImpl)) {
    throw new DOMException(DOMException.WRONG_DOCUMENT_ERR,""String_Node_Str"");
  }
  DOMNodeImpl newCh=(DOMNodeImpl)newChild;
  if (this.adaptee.type == NodeType.RootNode) {
    if (newCh.adaptee.type != NodeType.DocTypeTag && newCh.adaptee.type != NodeType.ProcInsTag) {
      throw new DOMException(DOMException.HIERARCHY_REQUEST_ERR,""String_Node_Str"");
    }
  }
 else   if (this.adaptee.type == NodeType.StartTag) {
    if (newCh.adaptee.type != NodeType.StartTag && newCh.adaptee.type != NodeType.StartEndTag && newCh.adaptee.type != NodeType.CommentTag && newCh.adaptee.type != NodeType.TextNode && newCh.adaptee.type != NodeType.CDATATag) {
      throw new DOMException(DOMException.HIERARCHY_REQUEST_ERR,""String_Node_Str"");
    }
  }
  if (oldChild == null) {
    throw new DOMException(DOMException.NOT_FOUND_ERR,""String_Node_Str"");
  }
  Node n;
  Node ref=this.adaptee.content;
  while (ref != null) {
    if (ref.getAdapter() == oldChild) {
      break;
    }
    ref=ref.next;
  }
  if (ref == null) {
    throw new DOMException(DOMException.NOT_FOUND_ERR,""String_Node_Str"");
  }
  newCh.adaptee.next=ref.next;
  newCh.adaptee.prev=ref.prev;
  newCh.adaptee.last=ref.last;
  newCh.adaptee.parent=ref.parent;
  newCh.adaptee.content=ref.content;
  if (ref.parent != null) {
    if (ref.parent.content == ref) {
      ref.parent.content=newCh.adaptee;
    }
    if (ref.parent.last == ref) {
      ref.parent.last=newCh.adaptee;
    }
  }
  if (ref.prev != null) {
    ref.prev.next=newCh.adaptee;
  }
  if (ref.next != null) {
    ref.next.prev=newCh.adaptee;
  }
  for (n=ref.content; n != null; n=n.next) {
    if (n.parent == ref) {
      n.parent=newCh.adaptee;
    }
  }
  return oldChild;
}","/** 
 * @see org.w3c.dom.Node#replaceChild
 */
public org.w3c.dom.Node replaceChild(org.w3c.dom.Node newChild,org.w3c.dom.Node oldChild){
  insertBefore(newChild,oldChild);
  if (newChild != oldChild) {
    removeChild(oldChild);
  }
  return oldChild;
}"
45338,"/** 
 * Print just the content of the body element. Useful when you want to reuse material from other documents.
 * @param fout
 * @param lexer
 * @param root
 * @param xml
 */
void printBody(Out fout,Lexer lexer,Node root,boolean xml){
  if (root == null) {
    return;
  }
  Node body=root.findBody();
  if (body != null) {
    Node content;
    for (content=body.content; content != null; content=content.next) {
      if (xml) {
        printXMLTree(fout,(short)0,0,lexer,content);
      }
 else {
        printTree(fout,(short)0,0,lexer,content);
      }
    }
  }
}","/** 
 * Print just the content of the body element. Useful when you want to reuse material from other documents.
 * @param fout
 * @param lexer
 * @param root
 * @param xml
 */
void printBody(Out fout,Lexer lexer,Node root,boolean xml){
  if (root == null) {
    return;
  }
  Node body=root.findBody();
  if (body != null) {
    Node content;
    for (content=body.content; content != null; content=content.next) {
      printTree(fout,(short)0,0,lexer,content);
    }
  }
}"
45339,"/** 
 * Used to check script node for script language.
 * @return <code>true</code> if the script node contains javascript
 */
public boolean isJavaScript(){
  boolean result=false;
  AttVal attr;
  if (this.attributes == null) {
    return true;
  }
  for (attr=this.attributes; attr != null; attr=attr.next) {
    if ((""String_Node_Str"".equalsIgnoreCase(attr.attribute) || ""String_Node_Str"".equalsIgnoreCase(attr.attribute)) && ""String_Node_Str"".equalsIgnoreCase(attr.value)) {
      result=true;
    }
  }
  return result;
}","/** 
 * Used to check script node for script language.
 * @return <code>true</code> if the script node contains javascript
 */
public boolean isJavaScript(){
  boolean result=false;
  AttVal attr;
  if (this.attributes == null) {
    return true;
  }
  for (attr=this.attributes; attr != null; attr=attr.next) {
    if ((""String_Node_Str"".equalsIgnoreCase(attr.attribute) || ""String_Node_Str"".equalsIgnoreCase(attr.attribute)) && attr.value.toLowerCase().contains(""String_Node_Str"")) {
      result=true;
    }
  }
  return result;
}"
45340,"/** 
 * This maps <code>&lt;p> hello &lt;em> world &lt;/em></code> to <code>&lt;p> hello &lt;em> world &lt;/em></code>. Trims initial space, by moving it before the start tag, or if this element is the first in parent's content, then by discarding the space.
 * @param lexer Lexer
 * @param element parent node
 * @param text text node
 */
public static void trimInitialSpace(Lexer lexer,Node element,Node text){
  Node prev, node;
  if (text.type == NodeType.TextNode && text.textarray[text.start] == (byte)' ' && (text.start < text.end)) {
    if (TidyUtils.toBoolean(element.tag.model & Dict.CM_INLINE) && !TidyUtils.toBoolean(element.tag.model & Dict.CM_FIELD) && element.parent.content != element) {
      prev=element.prev;
      if (prev != null && prev.type == NodeType.TextNode) {
        if (prev.textarray[prev.end - 1] != (byte)' ') {
          prev.textarray[prev.end++]=(byte)' ';
        }
        ++element.start;
      }
 else {
        node=lexer.newNode();
        if (element.start >= element.end) {
          node.start=0;
          node.end=1;
          node.textarray=new byte[1];
        }
 else {
          node.start=element.start++;
          node.end=element.start;
          node.textarray=element.textarray;
        }
        node.textarray[node.start]=(byte)' ';
        node.prev=prev;
        if (prev != null) {
          prev.next=node;
        }
        node.next=element;
        element.prev=node;
        node.parent=element.parent;
      }
    }
    ++text.start;
  }
}","/** 
 * This maps <code>&lt;p> hello &lt;em> world &lt;/em></code> to <code>&lt;p> hello &lt;em> world &lt;/em></code>. Trims initial space, by moving it before the start tag, or if this element is the first in parent's content, then by discarding the space.
 * @param lexer Lexer
 * @param element parent node
 * @param text text node
 */
public static void trimInitialSpace(Lexer lexer,Node element,Node text){
  Node prev, node;
  if (text.type == NodeType.TextNode && lexer.lexbuf[text.start] == (byte)' ' && (text.start < text.end)) {
    if (TidyUtils.toBoolean(element.tag.model & Dict.CM_INLINE) && !TidyUtils.toBoolean(element.tag.model & Dict.CM_FIELD)) {
      prev=element.prev;
      if (prev != null && prev.type == NodeType.TextNode) {
        if (prev.textarray[prev.end - 1] != (byte)' ') {
          prev.textarray[prev.end++]=(byte)' ';
        }
        ++element.start;
      }
 else {
        node=lexer.newNode();
        if (element.start >= element.end) {
          node.start=0;
          node.end=1;
          node.textarray=new byte[1];
        }
 else {
          node.start=element.start++;
          node.end=element.start;
          node.textarray=element.textarray;
        }
        node.textarray[node.start]=(byte)' ';
        Node.insertNodeBeforeElement(element,node);
      }
    }
    ++text.start;
  }
}"
45341,"/** 
 * Is the given character encoding supported?
 * @param name character encoding name
 * @return <code>true</code> if encoding is supported, false otherwhise.
 */
public static boolean isCharEncodingSupported(String name){
  name=EncodingNameMapper.toJava(name);
  if (name == null) {
    return false;
  }
  try {
    ""String_Node_Str"".getBytes(name);
  }
 catch (  java.io.UnsupportedEncodingException e) {
    return false;
  }
  return true;
}","/** 
 * Is the given character encoding supported?
 * @param name character encoding name
 * @return <code>true</code> if encoding is supported, false otherwhise.
 */
public static boolean isCharEncodingSupported(String name){
  name=EncodingNameMapper.toJava(name);
  if (name == null) {
    return false;
  }
  try {
    ""String_Node_Str"".getBytes(name);
  }
 catch (  UnsupportedEncodingException e) {
    return false;
  }
  return true;
}"
45342,"/** 
 * Should always be able convert to/from UTF-8, so encoding exceptions are converted to an Error to avoid adding throws declarations in lots of methods.
 * @param str String
 * @return utf8 bytes
 * @see String#getBytes()
 */
public static byte[] getBytes(String str){
  try {
    return str.getBytes(""String_Node_Str"");
  }
 catch (  java.io.UnsupportedEncodingException e) {
    throw new Error(""String_Node_Str"" + e.getMessage());
  }
}","/** 
 * Should always be able convert to/from UTF-8, so encoding exceptions are converted to an Error to avoid adding throws declarations in lots of methods.
 * @param str String
 * @return utf8 bytes
 * @see String#getBytes()
 */
public static byte[] getBytes(String str){
  try {
    return str.getBytes(""String_Node_Str"");
  }
 catch (  UnsupportedEncodingException e) {
    throw new Error(""String_Node_Str"" + e.getMessage());
  }
}"
45343,"/** 
 * Should always be able convert to/from UTF-8, so encoding exceptions are converted to an Error to avoid adding throws declarations in lots of methods.
 * @param bytes byte array
 * @param offset starting offset in byte array
 * @param length length in byte array starting from offset
 * @return same as <code>new String(bytes, offset, length, ""UTF8"")</code>
 */
public static String getString(byte[] bytes,int offset,int length){
  try {
    return length == 0 ? null : new String(bytes,offset,length,""String_Node_Str"");
  }
 catch (  java.io.UnsupportedEncodingException e) {
    throw new Error(""String_Node_Str"" + e.getMessage());
  }
}","/** 
 * Should always be able convert to/from UTF-8, so encoding exceptions are converted to an Error to avoid adding throws declarations in lots of methods.
 * @param bytes byte array
 * @param offset starting offset in byte array
 * @param length length in byte array starting from offset
 * @return same as <code>new String(bytes, offset, length, ""UTF8"")</code>
 */
public static String getString(final byte[] bytes,final int offset,final int length){
  try {
    return length == 0 ? null : new String(bytes,offset,Math.min(length,bytes.length - offset),""String_Node_Str"");
  }
 catch (  UnsupportedEncodingException e) {
    throw new Error(""String_Node_Str"" + e.getMessage());
  }
}"
45344,"/** 
 * Parse an attribute value.
 * @param name attribute name
 * @param foldCase fold case?
 * @param isempty is attribute empty? Passed as an array reference to allow modification
 * @param pdelim delimiter, passed as an array reference to allow modification
 * @return parsed value
 */
public String parseValue(String name,boolean foldCase,boolean[] isempty,int[] pdelim){
  int len=0;
  int start;
  boolean seenGt=false;
  boolean munge=true;
  int c=0;
  int lastc, delim, quotewarning;
  String value;
  delim=0;
  pdelim[0]='""';
  if (this.configuration.isLiteralAttribs()) {
    munge=false;
  }
  while (true) {
    c=this.in.readChar();
    if (c == StreamIn.END_OF_STREAM) {
      this.in.ungetChar(c);
      break;
    }
    if (!TidyUtils.isWhite((char)c)) {
      break;
    }
  }
  if (c != '=' && c != '""' && c != '\'') {
    this.in.ungetChar(c);
    return null;
  }
  while (true) {
    c=this.in.readChar();
    if (c == StreamIn.END_OF_STREAM) {
      this.in.ungetChar(c);
      break;
    }
    if (!TidyUtils.isWhite((char)c)) {
      break;
    }
  }
  if (c == '""' || c == '\'') {
    delim=c;
  }
 else   if (c == '<') {
    start=this.lexsize;
    addCharToLexer(c);
    pdelim[0]=parseServerInstruction();
    len=this.lexsize - start;
    this.lexsize=start;
    return (len > 0 ? TidyUtils.getString(this.lexbuf,start,len) : null);
  }
 else {
    this.in.ungetChar(c);
  }
  quotewarning=0;
  start=this.lexsize;
  c='\0';
  while (true) {
    lastc=c;
    c=this.in.readChar();
    if (c == StreamIn.END_OF_STREAM) {
      report.attrError(this,this.token,null,Report.UNEXPECTED_END_OF_FILE);
      this.in.ungetChar(c);
      break;
    }
    if (delim == (char)0) {
      if (c == '>') {
        this.in.ungetChar(c);
        break;
      }
      if (c == '""' || c == '\'') {
        report.attrError(this,this.token,null,Report.UNEXPECTED_QUOTEMARK);
        break;
      }
      if (c == '<') {
        this.in.ungetChar(c);
        c='>';
        this.in.ungetChar(c);
        report.attrError(this,this.token,null,Report.UNEXPECTED_GT);
        break;
      }
      if (c == '/') {
        c=this.in.readChar();
        if (c == '>' && !AttributeTable.getDefaultAttributeTable().isUrl(name)) {
          isempty[0]=true;
          this.in.ungetChar(c);
          break;
        }
        this.in.ungetChar(c);
        c='/';
      }
    }
 else {
      if (c == delim) {
        break;
      }
      if (c == '\r') {
        c=this.in.readChar();
        if (c != '\n') {
          this.in.ungetChar(c);
        }
        c='\n';
      }
      if (c == '\n' || c == '<' || c == '>') {
        ++quotewarning;
      }
      if (c == '>') {
        seenGt=true;
      }
    }
    if (c == '&') {
      if (""String_Node_Str"".equalsIgnoreCase(name)) {
        report.attrError(this,null,null,Report.ENTITY_IN_ID);
        continue;
      }
      addCharToLexer(c);
      parseEntity((short)0);
      continue;
    }
    if (c == '\\') {
      c=this.in.readChar();
      if (c != '\n') {
        this.in.ungetChar(c);
        c='\\';
      }
    }
    if (TidyUtils.isWhite((char)c)) {
      if (delim == (char)0) {
        break;
      }
      if (munge) {
        if (c == '\n' && AttributeTable.getDefaultAttributeTable().isUrl(name)) {
          report.attrError(this,this.token,null,Report.NEWLINE_IN_URI);
          continue;
        }
        c=' ';
        if (lastc == ' ') {
          continue;
        }
      }
    }
 else     if (foldCase && TidyUtils.isUpper((char)c)) {
      c=TidyUtils.toLower((char)c);
    }
    addCharToLexer(c);
  }
  if (quotewarning > 10 && seenGt && munge) {
    if (!AttributeTable.getDefaultAttributeTable().isScript(name) && !(AttributeTable.getDefaultAttributeTable().isUrl(name) && ""String_Node_Str"".equals(TidyUtils.getString(this.lexbuf,start,11))) && !""String_Node_Str"".equals(TidyUtils.getString(this.lexbuf,start,5))) {
      report.error(this,null,null,Report.SUSPECTED_MISSING_QUOTE);
    }
  }
  len=this.lexsize - start;
  this.lexsize=start;
  if (len > 0 || delim != 0) {
    if (munge && !TidyUtils.isInValuesIgnoreCase(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},name)) {
      while (TidyUtils.isWhite((char)this.lexbuf[start + len - 1])) {
        --len;
      }
      while (TidyUtils.isWhite((char)this.lexbuf[start]) && start < len) {
        ++start;
        --len;
      }
    }
    value=TidyUtils.getString(this.lexbuf,start,len);
  }
 else {
    value=null;
  }
  if (delim != 0) {
    pdelim[0]=delim;
  }
 else {
    pdelim[0]='""';
  }
  return value;
}","/** 
 * Parse an attribute value.
 * @param name attribute name
 * @param foldCase fold case?
 * @param isempty is attribute empty? Passed as an array reference to allow modification
 * @param pdelim delimiter, passed as an array reference to allow modification
 * @return parsed value
 */
public String parseValue(String name,boolean foldCase,boolean[] isempty,int[] pdelim){
  int len=0;
  int start;
  boolean seenGt=false;
  boolean munge=true;
  int c=0;
  int lastc, delim, quotewarning;
  String value;
  delim=0;
  pdelim[0]='""';
  if (this.configuration.isLiteralAttribs()) {
    munge=false;
  }
  while (true) {
    c=this.in.readChar();
    if (c == StreamIn.END_OF_STREAM) {
      this.in.ungetChar(c);
      break;
    }
    if (!TidyUtils.isWhite((char)c)) {
      break;
    }
  }
  if (c != '=' && c != '""' && c != '\'') {
    this.in.ungetChar(c);
    return null;
  }
  while (true) {
    c=this.in.readChar();
    if (c == StreamIn.END_OF_STREAM) {
      this.in.ungetChar(c);
      break;
    }
    if (!TidyUtils.isWhite((char)c)) {
      break;
    }
  }
  if (c == '""' || c == '\'') {
    delim=c;
  }
 else   if (c == '<') {
    start=this.lexsize;
    addCharToLexer(c);
    pdelim[0]=parseServerInstruction();
    len=this.lexsize - start;
    this.lexsize=start;
    return (len > 0 ? TidyUtils.getString(this.lexbuf,start,len) : null);
  }
 else {
    this.in.ungetChar(c);
  }
  quotewarning=0;
  start=this.lexsize;
  c='\0';
  while (true) {
    lastc=c;
    c=this.in.readChar();
    if (c == StreamIn.END_OF_STREAM) {
      report.attrError(this,this.token,null,Report.UNEXPECTED_END_OF_FILE);
      this.in.ungetChar(c);
      break;
    }
    if (delim == (char)0) {
      if (c == '>') {
        this.in.ungetChar(c);
        break;
      }
      if (c == '""' || c == '\'') {
        int q=c;
        report.attrError(this,this.token,null,Report.UNEXPECTED_QUOTEMARK);
        c=in.readChar();
        if (c == '>') {
          addCharToLexer(q);
          in.ungetChar(c);
          break;
        }
 else {
          in.ungetChar(c);
          c=q;
        }
      }
      if (c == '<') {
        this.in.ungetChar(c);
        c='>';
        this.in.ungetChar(c);
        report.attrError(this,this.token,null,Report.UNEXPECTED_GT);
        break;
      }
      if (c == '/') {
        c=this.in.readChar();
        if (c == '>' && !AttributeTable.getDefaultAttributeTable().isUrl(name)) {
          isempty[0]=true;
          this.in.ungetChar(c);
          break;
        }
        this.in.ungetChar(c);
        c='/';
      }
    }
 else {
      if (c == delim) {
        break;
      }
      if (c == '\r') {
        c=this.in.readChar();
        if (c != '\n') {
          this.in.ungetChar(c);
        }
        c='\n';
      }
      if (c == '\n' || c == '<' || c == '>') {
        ++quotewarning;
      }
      if (c == '>') {
        seenGt=true;
      }
    }
    if (c == '&') {
      if (""String_Node_Str"".equalsIgnoreCase(name)) {
        report.attrError(this,null,null,Report.ENTITY_IN_ID);
        continue;
      }
      addCharToLexer(c);
      parseEntity((short)0);
      continue;
    }
    if (c == '\\') {
      c=this.in.readChar();
      if (c != '\n') {
        this.in.ungetChar(c);
        c='\\';
      }
    }
    if (TidyUtils.isWhite((char)c)) {
      if (delim == (char)0) {
        break;
      }
      if (munge) {
        if (c == '\n' && AttributeTable.getDefaultAttributeTable().isUrl(name)) {
          report.attrError(this,this.token,null,Report.NEWLINE_IN_URI);
          continue;
        }
        c=' ';
        if (lastc == ' ') {
          continue;
        }
      }
    }
 else     if (foldCase && TidyUtils.isUpper((char)c)) {
      c=TidyUtils.toLower((char)c);
    }
    addCharToLexer(c);
  }
  if (quotewarning > 10 && seenGt && munge) {
    if (!AttributeTable.getDefaultAttributeTable().isScript(name) && !(AttributeTable.getDefaultAttributeTable().isUrl(name) && ""String_Node_Str"".equals(TidyUtils.getString(this.lexbuf,start,11))) && !""String_Node_Str"".equals(TidyUtils.getString(this.lexbuf,start,5))) {
      report.error(this,null,null,Report.SUSPECTED_MISSING_QUOTE);
    }
  }
  len=this.lexsize - start;
  this.lexsize=start;
  if (len > 0 || delim != 0) {
    if (munge && !TidyUtils.isInValuesIgnoreCase(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},name)) {
      while (TidyUtils.isWhite((char)this.lexbuf[start + len - 1])) {
        --len;
      }
      while (TidyUtils.isWhite((char)this.lexbuf[start]) && start < len) {
        ++start;
        --len;
      }
    }
    value=TidyUtils.getString(this.lexbuf,start,len);
  }
 else {
    value=null;
  }
  if (delim != 0) {
    pdelim[0]=delim;
  }
 else {
    pdelim[0]='""';
  }
  return value;
}"
45345,"/** 
 * Main method, but returns the return code as an int instead of calling System.exit(code). Needed for testing main method without shutting down tests.
 * @param argv command line parameters
 * @return return code
 */
protected int mainExec(String[] argv){
  String file;
  int argCount=argv.length;
  int argIndex=0;
  Properties properties=new Properties();
  while (argCount > 0) {
    if (argv[argIndex].startsWith(""String_Node_Str"")) {
      String argName=argv[argIndex].toLowerCase();
      while (argName.length() > 0 && argName.charAt(0) == '-') {
        argName=argName.substring(1);
      }
      if (argName.equals(""String_Node_Str"") || argName.equals(""String_Node_Str"") || argName.equals(""String_Node_Str"")) {
        this.report.helpText(new PrintWriter(System.out,true));
        return 0;
      }
 else       if (argName.equals(""String_Node_Str"")) {
        configuration.printConfigOptions(new PrintWriter(System.out,true),false);
        return 0;
      }
 else       if (argName.equals(""String_Node_Str"")) {
        configuration.adjust();
        configuration.printConfigOptions(errout,true);
        return 0;
      }
 else       if (argName.equals(""String_Node_Str"") || argName.equals(""String_Node_Str"")) {
        this.report.showVersion(errout);
        return 0;
      }
      String argValue=null;
      if (argCount > 2 && !argv[argIndex + 1].startsWith(""String_Node_Str"")) {
        argValue=argv[argIndex + 1];
        --argCount;
        ++argIndex;
      }
      String alias=CMDLINE_ALIAS.get(argName);
      if (alias != null) {
        argName=alias;
      }
      if (Configuration.isKnownOption(argName)) {
        properties.setProperty(argName,(argValue == null ? ""String_Node_Str"" : argName));
      }
 else       if (argName.equals(""String_Node_Str"")) {
        if (argValue != null) {
          configuration.parseFile(argValue);
        }
      }
 else       if (TidyUtils.isCharEncodingSupported(argName)) {
        properties.setProperty(""String_Node_Str"",argName);
      }
 else {
        for (int i=0; i < argName.length(); i++) {
switch (argName.charAt(i)) {
case 'i':
            configuration.setIndentContent(TriState.Auto);
          if (configuration.getSpaces() == 0) {
            configuration.reset(Option.IndentSpaces);
          }
        break;
case 'o':
      configuration.setHideEndTags(true);
    break;
case 'u':
  configuration.setUpperCaseTags(true);
break;
case 'c':
configuration.setMakeClean(true);
break;
case 'b':
configuration.setMakeBare(true);
break;
case 'n':
configuration.setNumEntities(true);
break;
case 'm':
configuration.setWriteback(true);
break;
case 'e':
configuration.setShowMarkup(false);
break;
case 'q':
configuration.setQuiet(true);
break;
default :
this.report.unknownOption(this.errout,argName.charAt(i));
break;
}
}
}
--argCount;
++argIndex;
continue;
}
configuration.addProps(properties);
configuration.adjust();
if (configuration.getErrfile() != null) {
String errorfile=""String_Node_Str"";
if (!configuration.getErrfile().equals(errorfile)) {
if (this.errout != this.stderr) {
this.errout.close();
}
try {
this.setErrout(new PrintWriter(new FileWriter(configuration.getErrfile()),true));
errorfile=configuration.getErrfile();
}
 catch (IOException e) {
errorfile=""String_Node_Str"";
this.setErrout(stderr);
}
}
}
if (argCount > 0) {
file=argv[argIndex];
}
 else {
file=""String_Node_Str"";
}
try {
parse(null,file,System.out);
}
 catch (FileNotFoundException fnfe) {
this.report.unknownFile(this.errout,file);
}
catch (IOException ioe) {
this.report.unknownFile(this.errout,file);
}
--argCount;
++argIndex;
if (argCount <= 0) {
break;
}
}
if (this.parseErrors + this.parseWarnings > 0 && !configuration.isQuiet()) {
this.report.generalInfo(this.errout);
}
if (this.errout != this.stderr) {
this.errout.close();
}
if (this.parseErrors > 0) {
return 2;
}
if (this.parseWarnings > 0) {
return 1;
}
return 0;
}","/** 
 * Main method, but returns the return code as an int instead of calling System.exit(code). Needed for testing main method without shutting down tests.
 * @param argv command line parameters
 * @return return code
 */
protected int mainExec(String[] argv){
  String file;
  int argCount=argv.length;
  int argIndex=0;
  Properties properties=new Properties();
  while (argCount > 0) {
    if (argv[argIndex].startsWith(""String_Node_Str"")) {
      String argName=argv[argIndex].toLowerCase();
      while (argName.length() > 0 && argName.charAt(0) == '-') {
        argName=argName.substring(1);
      }
      if (argName.equals(""String_Node_Str"") || argName.equals(""String_Node_Str"") || argName.equals(""String_Node_Str"")) {
        this.report.helpText(new PrintWriter(System.out,true));
        return 0;
      }
 else       if (argName.equals(""String_Node_Str"")) {
        configuration.printConfigOptions(new PrintWriter(System.out,true),false);
        return 0;
      }
 else       if (argName.equals(""String_Node_Str"")) {
        configuration.adjust();
        configuration.printConfigOptions(errout,true);
        return 0;
      }
 else       if (argName.equals(""String_Node_Str"") || argName.equals(""String_Node_Str"")) {
        this.report.showVersion(errout);
        return 0;
      }
      String argValue=null;
      if (argCount > 2 && !argv[argIndex + 1].startsWith(""String_Node_Str"")) {
        argValue=argv[argIndex + 1];
        --argCount;
        ++argIndex;
      }
      String alias=CMDLINE_ALIAS.get(argName);
      if (alias != null) {
        argName=alias;
      }
      if (Configuration.isKnownOption(argName)) {
        properties.setProperty(argName,(argValue == null ? ""String_Node_Str"" : argValue));
      }
 else       if (argName.equals(""String_Node_Str"")) {
        if (argValue != null) {
          configuration.parseFile(argValue);
        }
      }
 else       if (TidyUtils.isCharEncodingSupported(argName)) {
        properties.setProperty(""String_Node_Str"",argName);
      }
 else {
        for (int i=0; i < argName.length(); i++) {
switch (argName.charAt(i)) {
case 'i':
            configuration.setIndentContent(TriState.Auto);
          if (configuration.getSpaces() == 0) {
            configuration.reset(Option.IndentSpaces);
          }
        break;
case 'o':
      configuration.setHideEndTags(true);
    break;
case 'u':
  configuration.setUpperCaseTags(true);
break;
case 'c':
configuration.setMakeClean(true);
break;
case 'b':
configuration.setMakeBare(true);
break;
case 'n':
configuration.setNumEntities(true);
break;
case 'm':
configuration.setWriteback(true);
break;
case 'e':
configuration.setShowMarkup(false);
break;
case 'q':
configuration.setQuiet(true);
break;
default :
this.report.unknownOption(this.errout,argName.charAt(i));
break;
}
}
}
--argCount;
++argIndex;
continue;
}
configuration.addProps(properties);
configuration.adjust();
if (configuration.getErrfile() != null) {
String errorfile=""String_Node_Str"";
if (!configuration.getErrfile().equals(errorfile)) {
if (this.errout != this.stderr) {
this.errout.close();
}
try {
this.setErrout(new PrintWriter(new FileWriter(configuration.getErrfile()),true));
errorfile=configuration.getErrfile();
}
 catch (IOException e) {
errorfile=""String_Node_Str"";
this.setErrout(stderr);
}
}
}
if (argCount > 0) {
file=argv[argIndex];
}
 else {
file=""String_Node_Str"";
}
try {
parse(null,file,System.out);
}
 catch (FileNotFoundException fnfe) {
this.report.unknownFile(this.errout,file);
}
catch (IOException ioe) {
this.report.unknownFile(this.errout,file);
}
--argCount;
++argIndex;
if (argCount <= 0) {
break;
}
}
if (this.parseErrors + this.parseWarnings > 0 && !configuration.isQuiet()) {
this.report.generalInfo(this.errout);
}
if (this.errout != this.stderr) {
this.errout.close();
}
if (this.parseErrors > 0) {
return 2;
}
if (this.parseWarnings > 0) {
return 1;
}
return 0;
}"
45346,"/** 
 * Create a text node for the contents of a CDATA element like style or script which ends with &lt;/foo> for some foo.
 * @param container container node
 * @return cdata node
 */
public Node getCDATA(Node container){
  int c, lastc, start, len, i;
  int qt=0;
  int esc=0;
  String str;
  boolean endtag=false;
  boolean begtag=false;
  if (container.isJavaScript()) {
    esc='\\';
  }
  this.lines=this.in.getCurline();
  this.columns=this.in.getCurcol();
  this.waswhite=false;
  this.txtstart=this.lexsize;
  this.txtend=this.lexsize;
  lastc='\0';
  start=-1;
  while ((c=this.in.readChar()) != StreamIn.END_OF_STREAM) {
    if (qt > 0) {
      if ((c == '\r' || c == '\n' || c == qt) && (!TidyUtils.toBoolean(esc) || lastc != esc)) {
        qt=0;
      }
 else       if (c == '/' && lastc == '<') {
        start=this.lexsize + 1;
      }
 else       if (c == '>' && start >= 0) {
        len=this.lexsize - start;
        this.lines=this.in.getCurline();
        this.columns=this.in.getCurcol() - 3;
        report.warning(this,null,null,Report.BAD_CDATA_CONTENT);
        if (TidyUtils.toBoolean(esc)) {
          for (i=this.lexsize; i > start - 1; --i) {
            this.lexbuf[i]=this.lexbuf[i - 1];
          }
          this.lexbuf[start - 1]=(byte)esc;
          this.lexsize++;
        }
        start=-1;
      }
    }
 else     if (TidyUtils.isQuote(c) && (!TidyUtils.toBoolean(esc) || lastc != esc)) {
      qt=c;
    }
 else     if (c == '<') {
      start=this.lexsize + 1;
      endtag=false;
      begtag=true;
    }
 else     if (c == '!' && lastc == '<') {
      start=-1;
      endtag=false;
      begtag=false;
    }
 else     if (c == '/' && lastc == '<') {
      start=this.lexsize + 1;
      endtag=true;
      begtag=false;
    }
 else     if (c == '>' && start >= 0) {
      int decr=2;
      if (endtag && ((len=this.lexsize - start) == container.element.length())) {
        str=TidyUtils.getString(this.lexbuf,start,len);
        if (container.element.equalsIgnoreCase(str)) {
          this.txtend=start - decr;
          this.lexsize=start - decr;
          break;
        }
      }
      this.lines=this.in.getCurline();
      this.columns=this.in.getCurcol() - 3;
      report.warning(this,null,null,Report.BAD_CDATA_CONTENT);
      if (begtag) {
        decr=1;
      }
      this.txtend=start - decr;
      this.lexsize=start - decr;
      break;
    }
 else     if (c == '\r') {
      if (begtag || endtag) {
        continue;
      }
      c=this.in.readChar();
      if (c != '\n') {
        this.in.ungetChar(c);
      }
      c='\n';
    }
 else     if ((c == '\n' || c == '\t' || c == ' ') && (begtag || endtag)) {
      continue;
    }
    addCharToLexer(c);
    this.txtend=this.lexsize;
    lastc=c;
  }
  if (c == StreamIn.END_OF_STREAM) {
    report.warning(this,container,null,Report.MISSING_ENDTAG_FOR);
  }
  if (this.txtend > this.txtstart) {
    this.token=newNode(NodeType.TextNode,this.lexbuf,this.txtstart,this.txtend);
    return this.token;
  }
  return null;
}","/** 
 * Create a text node for the contents of a CDATA element like style or script which ends with &lt;/foo> for some foo.
 * @param container container node
 * @return cdata node
 */
public Node getCDATA(Node container){
  int start=0;
  int nested=0;
  CDataState state=CDataState.INTERMEDIATE;
  int c;
  boolean isEmpty=true;
  boolean matches=false;
  boolean hasSrc=container.getAttrById(AttrId.SRC) != null;
  this.lines=this.in.getCurline();
  this.columns=this.in.getCurcol();
  this.waswhite=false;
  this.txtstart=this.lexsize;
  this.txtend=this.lexsize;
  while ((c=this.in.readChar()) != StreamIn.END_OF_STREAM) {
    addCharToLexer(c);
    txtend=lexsize;
    if (state == CDataState.INTERMEDIATE) {
      if (c != '<') {
        if (isEmpty && !TidyUtils.isWhite((char)c)) {
          isEmpty=false;
        }
        continue;
      }
      c=in.readChar();
      if (TidyUtils.isLetter((char)c)) {
        if (hasSrc && isEmpty && container.is(TagId.SCRIPT)) {
          lexsize=txtstart;
          in.ungetChar(c);
          in.ungetChar('<');
          return null;
        }
        addCharToLexer(c);
        start=lexsize - 1;
        state=CDataState.STARTTAG;
      }
 else       if (c == '/') {
        addCharToLexer(c);
        c=in.readChar();
        if (!TidyUtils.isLetter((char)c)) {
          in.ungetChar(c);
          continue;
        }
        in.ungetChar(c);
        start=lexsize;
        state=CDataState.ENDTAG;
      }
 else       if (c == '\\') {
        addCharToLexer(c);
        c=in.readChar();
        if (c != '/') {
          in.ungetChar(c);
          continue;
        }
        addCharToLexer(c);
        c=in.readChar();
        if (!TidyUtils.isLetter((char)c)) {
          in.ungetChar(c);
          continue;
        }
        in.ungetChar(c);
        start=lexsize;
        state=CDataState.ENDTAG;
      }
 else {
        in.ungetChar(c);
      }
    }
 else     if (state == CDataState.STARTTAG) {
      if (TidyUtils.isLetter((char)c)) {
        continue;
      }
      matches=container.element.equalsIgnoreCase(TidyUtils.getString(lexbuf,start,container.element.length()));
      if (matches) {
        nested++;
      }
      state=CDataState.INTERMEDIATE;
    }
 else     if (state == CDataState.ENDTAG) {
      if (TidyUtils.isLetter((char)c)) {
        continue;
      }
      matches=container.element.equalsIgnoreCase(TidyUtils.getString(lexbuf,start,container.element.length()));
      if (isEmpty && !matches) {
        for (int i=lexsize - 1; i >= start; --i) {
          in.ungetChar(lexbuf[i]);
        }
        in.ungetChar('/');
        in.ungetChar('<');
        break;
      }
      if (matches && nested-- <= 0) {
        for (int i=lexsize - 1; i >= start; --i) {
          in.ungetChar(lexbuf[i]);
        }
        in.ungetChar('/');
        in.ungetChar('<');
        lexsize-=(lexsize - start) + 2;
        break;
      }
 else       if (lexbuf[start - 2] != '\\') {
        lines=in.getCurline();
        columns=in.getCurcol();
        columns-=3;
        report.error(this,null,null,Report.BAD_CDATA_CONTENT);
        if (container.isJavaScript()) {
          for (int i=lexsize; i > start - 1; --i) {
            lexbuf[i]=lexbuf[i - 1];
          }
          lexbuf[start - 1]='\\';
          lexsize++;
        }
      }
      state=CDataState.INTERMEDIATE;
    }
  }
  if (isEmpty) {
    lexsize=txtstart=txtend;
  }
 else {
    txtend=lexsize;
  }
  if (c == StreamIn.END_OF_STREAM) {
    report.error(this,container,null,Report.MISSING_ENDTAG_FOR);
  }
  return newNode(NodeType.TextNode,lexbuf,txtstart,txtend);
}"
45347,"/** 
 * HTML is the top level element.
 */
public static Node parseDocument(Lexer lexer){
  Node node, document, html;
  Node doctype=null;
  document=lexer.newNode();
  document.type=NodeType.RootNode;
  lexer.root=document;
  while ((node=lexer.getToken(Lexer.IGNORE_WHITESPACE)) != null) {
    if (Node.insertMisc(document,node)) {
      continue;
    }
    if (node.type == NodeType.DocTypeTag) {
      if (doctype == null) {
        document.insertNodeAtEnd(node);
        doctype=node;
      }
 else {
        lexer.report.warning(lexer,document,node,Report.DISCARDING_UNEXPECTED);
      }
      continue;
    }
    if (node.type == NodeType.EndTag) {
      lexer.report.warning(lexer,document,node,Report.DISCARDING_UNEXPECTED);
      continue;
    }
    if (node.type != NodeType.StartTag || !node.is(TagId.HTML)) {
      lexer.ungetToken();
      html=lexer.inferredTag(TagId.HTML);
    }
 else {
      html=node;
    }
    if (document.findDocType() == null && !lexer.configuration.isBodyOnly()) {
      lexer.report.warning(lexer,null,null,Report.MISSING_DOCTYPE);
    }
    document.insertNodeAtEnd(html);
    HTML.parse(lexer,html,(short)0);
    break;
  }
  if (lexer.root.findTITLE() == null) {
    Node head=lexer.root.findHEAD();
    lexer.report.warning(lexer,head,null,Report.MISSING_TITLE_ELEMENT);
    head.insertNodeAtEnd(lexer.inferredTag(TagId.TITLE));
  }
  return document;
}","/** 
 * HTML is the top level element.
 */
public static Node parseDocument(Lexer lexer){
  Node node, document, html;
  Node doctype=null;
  document=lexer.newNode();
  document.type=NodeType.RootNode;
  lexer.root=document;
  while ((node=lexer.getToken(Lexer.IGNORE_WHITESPACE)) != null) {
    if (Node.insertMisc(document,node)) {
      continue;
    }
    if (node.type == NodeType.DocTypeTag) {
      if (doctype == null) {
        document.insertNodeAtEnd(node);
        doctype=node;
      }
 else {
        lexer.report.warning(lexer,document,node,Report.DISCARDING_UNEXPECTED);
      }
      continue;
    }
    if (node.type == NodeType.EndTag) {
      lexer.report.warning(lexer,document,node,Report.DISCARDING_UNEXPECTED);
      continue;
    }
    if (node.type != NodeType.StartTag || !node.is(TagId.HTML)) {
      lexer.ungetToken();
      html=lexer.inferredTag(TagId.HTML);
    }
 else {
      html=node;
    }
    if (document.findDocType() == null && !lexer.configuration.isBodyOnly()) {
      lexer.report.warning(lexer,null,null,Report.MISSING_DOCTYPE);
    }
    document.insertNodeAtEnd(html);
    HTML.parse(lexer,html,(short)0);
    break;
  }
  if (lexer.root.findHTML() == null) {
    html=lexer.inferredTag(TagId.HTML);
    lexer.root.insertNodeAtEnd(html);
    HTML.parse(lexer,html,Lexer.IGNORE_WHITESPACE);
  }
  if (lexer.root.findTITLE() == null) {
    Node head=lexer.root.findHEAD();
    lexer.report.warning(lexer,head,null,Report.MISSING_TITLE_ELEMENT);
    head.insertNodeAtEnd(lexer.inferredTag(TagId.TITLE));
  }
  return document;
}"
45348,"/** 
 * HTML is the top level element.
 */
public static Node parseDocument(Lexer lexer){
  Node node, document, html;
  Node doctype=null;
  document=lexer.newNode();
  document.type=NodeType.RootNode;
  lexer.root=document;
  while ((node=lexer.getToken(Lexer.IGNORE_WHITESPACE)) != null) {
    if (Node.insertMisc(document,node)) {
      continue;
    }
    if (node.type == NodeType.DocTypeTag) {
      if (doctype == null) {
        document.insertNodeAtEnd(node);
        doctype=node;
      }
 else {
        lexer.report.warning(lexer,document,node,Report.DISCARDING_UNEXPECTED);
      }
      continue;
    }
    if (node.type == NodeType.EndTag) {
      lexer.report.warning(lexer,document,node,Report.DISCARDING_UNEXPECTED);
      continue;
    }
    if (node.type != NodeType.StartTag || !node.is(TagId.HTML)) {
      lexer.ungetToken();
      html=lexer.inferredTag(TagId.HTML);
    }
 else {
      html=node;
    }
    if (document.findDocType() == null && !lexer.configuration.isBodyOnly()) {
      lexer.report.warning(lexer,null,null,Report.MISSING_DOCTYPE);
    }
    document.insertNodeAtEnd(html);
    HTML.parse(lexer,html,(short)0);
    break;
  }
  return document;
}","/** 
 * HTML is the top level element.
 */
public static Node parseDocument(Lexer lexer){
  Node node, document, html;
  Node doctype=null;
  document=lexer.newNode();
  document.type=NodeType.RootNode;
  lexer.root=document;
  while ((node=lexer.getToken(Lexer.IGNORE_WHITESPACE)) != null) {
    if (Node.insertMisc(document,node)) {
      continue;
    }
    if (node.type == NodeType.DocTypeTag) {
      if (doctype == null) {
        document.insertNodeAtEnd(node);
        doctype=node;
      }
 else {
        lexer.report.warning(lexer,document,node,Report.DISCARDING_UNEXPECTED);
      }
      continue;
    }
    if (node.type == NodeType.EndTag) {
      lexer.report.warning(lexer,document,node,Report.DISCARDING_UNEXPECTED);
      continue;
    }
    if (node.type != NodeType.StartTag || !node.is(TagId.HTML)) {
      lexer.ungetToken();
      html=lexer.inferredTag(TagId.HTML);
    }
 else {
      html=node;
    }
    if (document.findDocType() == null && !lexer.configuration.isBodyOnly()) {
      lexer.report.warning(lexer,null,null,Report.MISSING_DOCTYPE);
    }
    document.insertNodeAtEnd(html);
    HTML.parse(lexer,html,(short)0);
    break;
  }
  if (lexer.root.findTITLE() == null) {
    Node head=lexer.root.findHEAD();
    lexer.report.warning(lexer,head,null,Report.MISSING_TITLE_ELEMENT);
    head.insertNodeAtEnd(lexer.inferredTag(TagId.TITLE));
  }
  return document;
}"
45349,"/** 
 * @see java.lang.Object#clone()
 */
@Override protected Object clone(){
  AttVal av=null;
  try {
    av=(AttVal)super.clone();
  }
 catch (  CloneNotSupportedException e) {
  }
  if (this.next != null) {
    av.next=(AttVal)this.next.clone();
  }
  if (this.asp != null) {
    av.asp=(Node)this.asp.clone();
  }
  if (this.php != null) {
    av.php=(Node)this.php.clone();
  }
  return av;
}","/** 
 * @see java.lang.Object#clone()
 */
@Override protected Object clone(){
  AttVal av=null;
  try {
    av=(AttVal)super.clone();
  }
 catch (  CloneNotSupportedException e) {
  }
  if (this.next != null) {
    av.next=(AttVal)this.next.clone();
  }
  if (this.asp != null) {
    av.asp=this.asp.cloneNode(false);
  }
  if (this.php != null) {
    av.php=this.php.cloneNode(false);
  }
  return av;
}"
45350,"/** 
 * @see org.w3c.dom.Node#cloneNode(boolean)
 */
public org.w3c.dom.Node cloneNode(boolean deep){
  Node node=adaptee.cloneNode(deep);
  node.parent=null;
  node.adapter=null;
  return node.getAdapter();
}","/** 
 * @see org.w3c.dom.Node#cloneNode(boolean)
 */
public org.w3c.dom.Node cloneNode(boolean deep){
  Node node=adaptee.cloneNode(deep);
  node.parent=null;
  return node.getAdapter();
}"
45351,"/** 
 * Clones a node and add it to node list.
 * @param node Node
 * @return cloned Node
 */
public Node cloneNode(Node node){
  Node cnode=(Node)node.clone();
  this.nodeList.add(cnode);
  for (AttVal att=cnode.attributes; att != null; att=att.next) {
    if (att.asp != null) {
      this.nodeList.add(att.asp);
    }
    if (att.php != null) {
      this.nodeList.add(att.php);
    }
  }
  return cnode;
}","/** 
 * Clones a node and add it to node list.
 * @param node Node
 * @return cloned Node
 */
public Node cloneNode(Node node){
  Node cnode=node.cloneNode(false);
  this.nodeList.add(cnode);
  for (AttVal att=cnode.attributes; att != null; att=att.next) {
    if (att.asp != null) {
      this.nodeList.add(att.asp);
    }
    if (att.php != null) {
      this.nodeList.add(att.php);
    }
  }
  return cnode;
}"
45352,"/** 
 * Clone this node.
 * @param deep if true deep clone the node (also clones all the contained nodes)
 * @return cloned node
 */
protected Node cloneNode(boolean deep){
  Node node=(Node)this.clone();
  node.content=null;
  node.last=null;
  if (deep) {
    Node child;
    Node newChild;
    for (child=this.content; child != null; child=child.next) {
      newChild=child.cloneNode(deep);
      node.insertNodeAtEnd(newChild);
    }
  }
  return node;
}","/** 
 * Clone this node.
 * @param deep if true deep clone the node (also clones all the contained nodes)
 * @return cloned node
 */
protected Node cloneNode(boolean deep){
  Node node=new Node(type,textarray,start,end);
  node.parent=parent;
  node.closed=closed;
  node.implicit=implicit;
  node.tag=tag;
  node.element=element;
  if (attributes != null) {
    node.attributes=(AttVal)attributes.clone();
  }
  if (deep) {
    Node child;
    Node newChild;
    for (child=this.content; child != null; child=child.next) {
      newChild=child.cloneNode(deep);
      node.insertNodeAtEnd(newChild);
    }
  }
  return node;
}"
45353,"/** 
 * @see org.w3c.dom.Node#cloneNode(boolean)
 */
public org.w3c.dom.Node cloneNode(boolean deep){
  Node node=adaptee.cloneNode(deep);
  node.parent=null;
  return node.getAdapter();
}","/** 
 * @see org.w3c.dom.Node#cloneNode(boolean)
 */
public org.w3c.dom.Node cloneNode(boolean deep){
  Node node=adaptee.cloneNode(deep);
  node.parent=null;
  node.adapter=null;
  return node.getAdapter();
}"
45354,"/** 
 * Clone this node.
 * @param deep if true deep clone the node (also clones all the contained nodes)
 * @return cloned node
 */
protected Node cloneNode(boolean deep){
  Node node=(Node)this.clone();
  if (deep) {
    Node child;
    Node newChild;
    for (child=this.content; child != null; child=child.next) {
      newChild=child.cloneNode(deep);
      node.insertNodeAtEnd(newChild);
    }
  }
  return node;
}","/** 
 * Clone this node.
 * @param deep if true deep clone the node (also clones all the contained nodes)
 * @return cloned node
 */
protected Node cloneNode(boolean deep){
  Node node=(Node)this.clone();
  node.content=null;
  node.last=null;
  if (deep) {
    Node child;
    Node newChild;
    for (child=this.content; child != null; child=child.next) {
      newChild=child.cloneNode(deep);
      node.insertNodeAtEnd(newChild);
    }
  }
  return node;
}"
45355,"/** 
 * Pretty-prints a tidy Node.
 * @param node org.w3c.tidy.Node
 * @param out output stream
 */
private void pprint(Node node,OutputStream out){
  PPrint pprint;
  if (out != null) {
    Out o=OutFactory.getOut(this.configuration,out);
    Lexer lexer=new Lexer(null,this.configuration,this.report);
    pprint=new PPrint(configuration);
    if (configuration.isXmlTags()) {
      pprint.printXMLTree(o,(short)0,0,lexer,node);
    }
 else {
      pprint.printTree(o,(short)0,0,lexer,node);
    }
    pprint.flushLine(o,0);
    try {
      out.flush();
    }
 catch (    IOException e) {
    }
  }
}","/** 
 * Pretty-prints a tidy Node.
 * @param node org.w3c.tidy.Node
 * @param out output stream
 */
private void pprint(Node node,OutputStream out){
  PPrint pprint;
  if (out != null) {
    Out o=OutFactory.getOut(this.configuration,out);
    Lexer lexer=new Lexer(null,this.configuration,this.report);
    pprint=new PPrint(configuration);
    if (configuration.isXmlTags()) {
      pprint.printXMLTree(o,(short)0,0,lexer,node);
    }
 else {
      pprint.printTree(o,(short)0,0,lexer,node);
    }
    pprint.flushLine(o,0);
    o.flush();
  }
}"
45356,"/** 
 * please make it run hot enough in jvm by yourself, or try AbstractPerformanceTest
 * @param threads
 * @param loop
 * @return 
 */
public static boolean run(CyclicExecuteThread[] threads,int loop) throws Exception {
  int concurrent=threads.length;
  AtomicInteger success=new AtomicInteger();
  CountDownLatch begin=new CountDownLatch(1);
  CountDownLatch end=new CountDownLatch(concurrent * loop);
  CyclicBarrier barrier=new CyclicBarrier(loop);
  long beginTime=System.currentTimeMillis();
  for (  CyclicExecuteThread t : threads) {
    t.setBegin(begin);
    t.setEnd(end);
    t.setBarrier(barrier);
    t.setSuccess(success);
    t.start();
  }
  begin.countDown();
  end.await();
  long endTime=System.currentTimeMillis();
  long totalCost=endTime - beginTime;
  logger.log(Level.WARNING,""String_Node_Str"",totalCost);
  return success.get() == concurrent * loop;
}","/** 
 * please make it run hot enough in jvm by yourself, or try AbstractPerformanceTest
 * @param threads
 * @param loop
 * @return 
 */
public static boolean run(CyclicExecuteThread[] threads,int loop) throws Exception {
  int concurrent=threads.length;
  AtomicInteger success=new AtomicInteger();
  CountDownLatch begin=new CountDownLatch(1);
  CountDownLatch end=new CountDownLatch(concurrent * loop);
  CyclicBarrier barrier=new CyclicBarrier(concurrent);
  long beginTime=System.currentTimeMillis();
  for (  CyclicExecuteThread t : threads) {
    t.setBegin(begin);
    t.setEnd(end);
    t.setBarrier(barrier);
    t.setSuccess(success);
    t.setLoop(loop);
    t.start();
  }
  begin.countDown();
  end.await();
  long endTime=System.currentTimeMillis();
  long totalCost=endTime - beginTime;
  logger.log(Level.WARNING,""String_Node_Str"",totalCost);
  return success.get() == concurrent * loop;
}"
45357,"@Override public void run(){
  try {
    begin.await();
    for (int i=0; i < barrier.getParties(); i++) {
      try {
        if (runTask()) {
          success.incrementAndGet();
        }
      }
 catch (      Exception e) {
        logger.log(Level.WARNING,super.getName() + ""String_Node_Str"",e);
      }
 finally {
        end.countDown();
      }
      barrier.await();
    }
  }
 catch (  InterruptedException e) {
    logger.log(Level.WARNING,""String_Node_Str"",super.getName());
    return;
  }
catch (  BrokenBarrierException e) {
    logger.log(Level.WARNING,""String_Node_Str"",super.getName());
    return;
  }
}","@Override public void run(){
  try {
    begin.await();
    for (int i=0; i < loop; i++) {
      try {
        if (runTask()) {
          success.incrementAndGet();
        }
      }
 catch (      Exception e) {
        logger.log(Level.WARNING,super.getName() + ""String_Node_Str"",e);
      }
 finally {
        end.countDown();
      }
      barrier.await();
    }
  }
 catch (  InterruptedException e) {
    logger.log(Level.WARNING,""String_Node_Str"",super.getName());
    return;
  }
catch (  BrokenBarrierException e) {
    logger.log(Level.WARNING,""String_Node_Str"",super.getName());
    return;
  }
}"
45358,"@Test public void concurrentUpdateAppConfig() throws Exception {
  final VisibleAppConfig visibleAppConfig=new VisibleAppConfig();
  final InvisibleAppConfig invisibleAppConfig=new InvisibleAppConfig();
  int concurrent=100;
  int loop=200;
  logger.log(Level.WARNING,""String_Node_Str"",concurrent);
  final CyclicExecuteThread[] threads=new CyclicExecuteThread[concurrent];
  for (int i=0; i < concurrent; i++) {
    threads[i]=new CyclicExecuteThread(""String_Node_Str""){
      @Override protected boolean runTask() throws Exception {
        invisibleAppConfig.update();
        visibleAppConfig.update();
        return true;
      }
    }
;
  }
  assertTrue(ConcurrentTestUtils.run(threads,loop));
  String format=""String_Node_Str"";
  System.out.println(""String_Node_Str"" + concurrent * loop);
  System.out.println(""String_Node_Str"" + invisibleAppConfig.i);
  System.out.println(""String_Node_Str"" + invisibleAppConfig.j);
  System.out.println(""String_Node_Str"" + visibleAppConfig.i);
  System.out.println(""String_Node_Str"" + visibleAppConfig.j);
}","@Test public void concurrentUpdateAppConfig() throws Exception {
  final VisibleAppConfig visibleAppConfig=new VisibleAppConfig();
  final InvisibleAppConfig invisibleAppConfig=new InvisibleAppConfig();
  int concurrent=100;
  int loop=10000;
  logger.log(Level.WARNING,""String_Node_Str"",new Object[]{concurrent,loop});
  final CyclicExecuteThread[] threads=new CyclicExecuteThread[concurrent];
  for (int i=0; i < concurrent; i++) {
    threads[i]=new CyclicExecuteThread(""String_Node_Str"" + i){
      @Override protected boolean runTask() throws Exception {
        invisibleAppConfig.update();
        visibleAppConfig.update();
        return true;
      }
    }
;
  }
  assertTrue(ConcurrentTestUtils.run(threads,loop));
  String format=""String_Node_Str"";
  System.out.println(""String_Node_Str"" + concurrent * loop);
  System.out.println(""String_Node_Str"" + invisibleAppConfig.i);
  System.out.println(""String_Node_Str"" + invisibleAppConfig.j);
  System.out.println(""String_Node_Str"" + visibleAppConfig.i);
  System.out.println(""String_Node_Str"" + visibleAppConfig.j);
}"
45359,"/** 
 * {@inheritDoc} 
 */
public void write(final byte[] b,int off,int len) throws IOException {
synchronized (decoder) {
    for (; ; ) {
      final ByteBuffer inputBuffer=this.inputBuffer;
      final int rem=inputBuffer.remaining();
      final int cnt=rem <= len ? rem : len;
      inputBuffer.put(b,off,cnt);
      len-=cnt;
      off+=cnt;
      if (len == 0) {
        return;
      }
      finish();
    }
  }
}","/** 
 * {@inheritDoc} 
 */
public void write(final byte[] b,int off,int len) throws IOException {
synchronized (decoder) {
    if (!inputBuffer.hasRemaining()) {
      finish();
    }
    for (; ; ) {
      final ByteBuffer inputBuffer=this.inputBuffer;
      final int rem=inputBuffer.remaining();
      final int cnt=rem <= len ? rem : len;
      inputBuffer.put(b,off,cnt);
      len-=cnt;
      off+=cnt;
      if (len == 0) {
        return;
      }
      finish();
    }
  }
}"
45360,"/** 
 * Connects to a database of a particular chunk (specified within the split). If a particular host fails during connection, it is avoided and another host is found. The method fails after a set number of maximum connection trials.
 */
protected Connection getConnection(DBInputSplit dbSplit){
  boolean connected=false;
  DBChunkHost avoid_host=null;
  int connect_tries=0;
  Connection connection=null;
  String localHostAddr=getLocatHostAddres();
  DBChunk chunk=dbSplit.getChunk();
  DBChunkHost chunk_host=null;
  while (!connected) {
    if (!chunk.getLocations().contains(localHostAddr)) {
      LOG.info(""String_Node_Str"" + localHostAddr);
      chunk_host=chunk.getAnyHost(avoid_host);
    }
 else {
      if (avoid_host != chunk.getHost(localHostAddr))       chunk_host=chunk.getHost(localHostAddr);
    }
    LOG.info(""String_Node_Str"" + localHostAddr + ""String_Node_Str""+ chunk.getId()+ ""String_Node_Str""+ chunk_host.getHost()+ ""String_Node_Str""+ chunk_host.getUrl());
    try {
      Class.forName(chunk_host.getDriver());
      connection=DriverManager.getConnection(chunk_host.getUrl(),chunk_host.getUser(),chunk_host.getPassword());
      connected=true;
    }
 catch (    Exception e) {
      LOG.info(""String_Node_Str"");
      LOG.info(e);
      if (connect_tries < MAX_CONNECTION_TRIALS) {
        connect_tries++;
        avoid_host=chunk_host;
        chunk_host=null;
      }
 else       throw new RuntimeException(e);
    }
  }
  return connection;
}","/** 
 * Connects to a database of a particular chunk (specified within the split). If a particular host fails during connection, it is avoided and another host is found. The method fails after a set number of maximum connection trials.
 */
protected Connection getConnection(DBInputSplit dbSplit){
  boolean connected=false;
  DBChunkHost avoid_host=null;
  int connect_tries=0;
  Connection connection=null;
  String localHostAddr=getLocatHostAddres();
  DBChunk chunk=dbSplit.getChunk();
  DBChunkHost chunk_host=null;
  while (!connected) {
    if (!chunk.getLocations().contains(localHostAddr)) {
      LOG.info(""String_Node_Str"" + localHostAddr);
      chunk_host=chunk.getAnyHost(avoid_host);
    }
 else {
      if (avoid_host != chunk.getHost(localHostAddr)) {
        chunk_host=chunk.getHost(localHostAddr);
      }
 else {
        chunk_host=chunk.getAnyHost(avoid_host);
      }
    }
    LOG.info(""String_Node_Str"" + localHostAddr + ""String_Node_Str""+ chunk.getId()+ ""String_Node_Str""+ chunk_host.getHost()+ ""String_Node_Str""+ chunk_host.getUrl());
    try {
      Class.forName(chunk_host.getDriver());
      connection=DriverManager.getConnection(chunk_host.getUrl(),chunk_host.getUser(),chunk_host.getPassword());
      connected=true;
    }
 catch (    Exception e) {
      LOG.info(""String_Node_Str"");
      LOG.info(e);
      if (connect_tries < MAX_CONNECTION_TRIALS) {
        connect_tries++;
        avoid_host=chunk_host;
        chunk_host=null;
      }
 else       throw new RuntimeException(e);
    }
  }
  return connection;
}"
45361,"/** 
 * Get the task for this field list. This is a convience method which calls this.getRecordOwner().getTask() in the thick model.
 * @return The task which contains this fieldList's recordowner Guaranteed to to non-null.
 */
public Task getTask(){
  if (this.getRecordOwner() != null)   return this.getRecordOwner().getTask();
  Task task=super.getTask();
  if (task == null) {
    if (this.getTable().getDatabase().getDatabaseOwner() != null)     if (((Environment)this.getTable().getDatabase().getDatabaseOwner().getEnvironment()).getDefaultApplication() != null)     task=((BaseApplication)((Environment)this.getTable().getDatabase().getDatabaseOwner().getEnvironment()).getDefaultApplication()).getMainTask();
  }
  return task;
}","/** 
 * Get the task for this field list. This is a convience method which calls this.getRecordOwner().getTask() in the thick model.
 * @return The task which contains this fieldList's recordowner Guaranteed to to non-null.
 */
public Task getTask(){
  if (this.getRecordOwner() != null)   return this.getRecordOwner().getTask();
  Task task=super.getTask();
  if (task == null) {
    if (this.getTable() != null)     if (this.getTable().getDatabase() != null)     if (this.getTable().getDatabase().getDatabaseOwner() != null)     if (((Environment)this.getTable().getDatabase().getDatabaseOwner().getEnvironment()).getDefaultApplication() != null)     task=((BaseApplication)((Environment)this.getTable().getDatabase().getDatabaseOwner().getEnvironment()).getDefaultApplication()).getMainTask();
  }
  return task;
}"
45362,"/** 
 * Display the correct security warning (access denied or the login screen).
 * @param iErrorCode
 */
public BaseScreen getSecurityScreen(int iErrorCode,BasePanel parentScreen){
  BaseScreen screen=null;
  if (iErrorCode == DBConstants.ACCESS_DENIED) {
    screen=new BaseScreen(null,null,parentScreen,null,0,null);
    String strDisplay=this.getTask().getApplication().getSecurityErrorText(iErrorCode);
    BaseApplication application=(BaseApplication)this.getTask().getApplication();
    String strMessage=application.getResources(ResourceConstants.ERROR_RESOURCE,true).getString(strDisplay);
    BaseField fldFake=new StringField(null,DBConstants.BLANK,128,DBConstants.BLANK,null);
    fldFake.setString(strMessage);
    new SStaticText(screen.getNextLocation(ScreenConstants.NEXT_LOGICAL,ScreenConstants.ANCHOR_DEFAULT),screen,fldFake,ScreenConstants.DEFAULT_DISPLAY);
  }
 else   if ((iErrorCode == DBConstants.LOGIN_REQUIRED) || (iErrorCode == DBConstants.AUTHENTICATION_REQUIRED)) {
    Record record=Record.makeRecordFromClassName(UserInfoModel.THICK_CLASS,null);
    ScreenLocation itsLocation=this.getScreenLocation();
    int docMode=record.commandToDocType(UserInfoModel.LOGIN_SCREEN);
    Map<String,Object> properties=null;
    screen=(BaseScreen)record.makeScreen(itsLocation,parentScreen,docMode,properties);
  }
 else   if (iErrorCode == DBConstants.CREATE_USER_REQUIRED) {
    Record record=Record.makeRecordFromClassName(UserInfoModel.THICK_CLASS,null);
    ScreenLocation itsLocation=this.getScreenLocation();
    int docMode=record.commandToDocType(UserInfoModel.ENTRY_SCREEN);
    Map<String,Object> properties=null;
    screen=(BaseScreen)record.makeScreen(itsLocation,parentScreen,docMode,properties);
  }
  return screen;
}","/** 
 * Display the correct security warning (access denied or the login screen).
 * @param iErrorCode
 */
public BaseScreen getSecurityScreen(int iErrorCode,BasePanel parentScreen){
  BaseScreen screen=null;
  if (iErrorCode == DBConstants.ACCESS_DENIED) {
    screen=new BaseScreen(null,null,parentScreen,null,0,null);
    String strDisplay=this.getTask().getApplication().getSecurityErrorText(iErrorCode);
    BaseApplication application=(BaseApplication)this.getTask().getApplication();
    String strMessage=application.getResources(ResourceConstants.ERROR_RESOURCE,true).getString(strDisplay);
    BaseField fldFake=new StringField(null,DBConstants.BLANK,128,DBConstants.BLANK,null);
    fldFake.setString(strMessage);
    new SStaticText(screen.getNextLocation(ScreenConstants.NEXT_LOGICAL,ScreenConstants.ANCHOR_DEFAULT),screen,fldFake,ScreenConstants.DEFAULT_DISPLAY);
  }
 else   if ((iErrorCode == DBConstants.LOGIN_REQUIRED) || (iErrorCode == DBConstants.AUTHENTICATION_REQUIRED)) {
    Record record=Record.makeRecordFromClassName(UserInfoModel.THICK_CLASS,Utility.getRecordOwner(parentScreen));
    ScreenLocation itsLocation=this.getScreenLocation();
    int docMode=record.commandToDocType(UserInfoModel.LOGIN_SCREEN);
    Map<String,Object> properties=null;
    screen=(BaseScreen)record.makeScreen(itsLocation,parentScreen,docMode,properties);
  }
 else   if (iErrorCode == DBConstants.CREATE_USER_REQUIRED) {
    Record record=Record.makeRecordFromClassName(UserInfoModel.THICK_CLASS,null);
    ScreenLocation itsLocation=this.getScreenLocation();
    int docMode=record.commandToDocType(UserInfoModel.ENTRY_SCREEN);
    Map<String,Object> properties=null;
    screen=(BaseScreen)record.makeScreen(itsLocation,parentScreen,docMode,properties);
  }
  return screen;
}"
45363,"/** 
 * Check out this error, if it says table not found, create a new table.
 * @param ex error thrown.
 * @return true if file was not found and was successfully created.
 * @exception DBException Converts and returns SQLExceptions, or if no rows updated, throws INVALID_RECORD.
 */
public boolean createIfNotFoundError(DBException ex) throws DBException {
  if (ex.getErrorCode() == DBConstants.FILE_NOT_FOUND)   if (this.getRecord() != null)   if ((this.getRecord().getOpenMode() & DBConstants.OPEN_DONT_CREATE) == 0) {
    boolean loadInitialData=false;
    boolean useTemporaryFilename=false;
    if (this.getDatabase() != null) {
      if (DBConstants.TRUE.equalsIgnoreCase(this.getDatabase().getProperty(DBConstants.LOAD_INITIAL_DATA)))       if ((this.getDatabase().getDatabaseOwner() == null) || (!DBConstants.FALSE.equalsIgnoreCase(this.getDatabase().getDatabaseOwner().getProperty(DBConstants.LOAD_INITIAL_DATA))))       loadInitialData=true;
      if (DBConstants.TRUE.equalsIgnoreCase(this.getDatabase().getProperty(SQLParams.RENAME_TABLE_SUPPORT)))       useTemporaryFilename=true;
    }
    if (this.getRecord().isQueryRecord()) {
      for (int i=0; i < this.getRecord().getRecordlistCount(); i++) {
        Record record=this.getRecord().getRecordlistAt(i);
        try {
          if (!record.getTable().create())           return false;
        }
 catch (        DBException e) {
          continue;
        }
        if (loadInitialData) {
          RecordOwner recordOwner=record.getRecordOwner();
          if (recordOwner == null)           record.setRecordOwner(this.getRecord().getRecordOwner());
          record.getTable().loadInitialData();
          if (recordOwner == null)           record.setRecordOwner(recordOwner);
        }
      }
      return true;
    }
    String tableName=null;
    boolean bSuccess=true;
    try {
      if (useTemporaryFilename)       if (loadInitialData) {
        tableName=this.getRecord().getTableNames(false);
        this.getRecord().setTableNames(tableName + ""String_Node_Str"");
      }
      bSuccess=this.create();
      if (bSuccess)       if (loadInitialData) {
        this.loadInitialData();
        if (useTemporaryFilename)         this.renameTable(tableName + ""String_Node_Str"",tableName);
      }
    }
 catch (    DBException e) {
      if (tableName != null)       this.getRecord().setTableNames(tableName);
      int oldOpenMode=this.getRecord().getOpenMode();
      this.getRecord().setOpenMode(oldOpenMode | DBConstants.OPEN_DONT_CREATE);
      int oldKeyArea=this.getRecord().getDefaultOrder();
      int i=0;
      for (; i < 120; i++) {
        try {
          this.getRecord().setKeyArea(0);
          this.doSeek(DBConstants.EQUALS);
          break;
        }
 catch (        DBException e2) {
        }
 finally {
          this.getRecord().setKeyArea(oldKeyArea);
        }
synchronized (this) {
          try {
            this.wait(1000);
          }
 catch (          InterruptedException e1) {
            e1.printStackTrace();
          }
        }
      }
      if (i == 20) {
        oldOpenMode=oldOpenMode | DBConstants.OPEN_DONT_CREATE;
        e.printStackTrace();
      }
      this.getRecord().setOpenMode(oldOpenMode);
    }
 finally {
      if (tableName != null)       this.getRecord().setTableNames(tableName);
    }
    return bSuccess;
  }
  return false;
}","/** 
 * Check out this error, if it says table not found, create a new table.
 * @param ex error thrown.
 * @return true if file was not found and was successfully created.
 * @exception DBException Converts and returns SQLExceptions, or if no rows updated, throws INVALID_RECORD.
 */
public boolean createIfNotFoundError(DBException ex) throws DBException {
  if (ex.getErrorCode() == DBConstants.FILE_NOT_FOUND)   if (this.getRecord() != null)   if ((this.getRecord().getOpenMode() & DBConstants.OPEN_DONT_CREATE) == 0) {
    boolean loadInitialData=false;
    boolean useTemporaryFilename=false;
    if (this.getDatabase() != null) {
      if (DBConstants.TRUE.equalsIgnoreCase(this.getDatabase().getProperty(DBConstants.LOAD_INITIAL_DATA)))       if ((this.getDatabase().getDatabaseOwner() == null) || (!DBConstants.FALSE.equalsIgnoreCase(this.getDatabase().getDatabaseOwner().getProperty(DBConstants.LOAD_INITIAL_DATA))))       loadInitialData=true;
      if (DBConstants.TRUE.equalsIgnoreCase(this.getDatabase().getProperty(SQLParams.RENAME_TABLE_SUPPORT)))       useTemporaryFilename=true;
    }
    if (this.getRecord().isQueryRecord()) {
      for (int i=0; i < this.getRecord().getRecordlistCount(); i++) {
        Record record=this.getRecord().getRecordlistAt(i);
        try {
          if (!record.getTable().create())           return false;
        }
 catch (        DBException e) {
          continue;
        }
        if (loadInitialData) {
          RecordOwner recordOwner=record.getRecordOwner();
          if (recordOwner == null)           record.setRecordOwner(this.getRecord().getRecordOwner());
          record.getTable().loadInitialData();
          if (recordOwner == null)           record.setRecordOwner(recordOwner);
        }
      }
      return true;
    }
    String tableName=null;
    boolean bSuccess=true;
    try {
      if (useTemporaryFilename)       if (loadInitialData) {
        tableName=this.getRecord().getTableNames(false);
        this.getRecord().setTableNames(tableName + TEMP_SUFFIX);
      }
      bSuccess=this.create();
      if (bSuccess)       if (loadInitialData) {
        this.loadInitialData();
        if (useTemporaryFilename)         this.renameTable(tableName + TEMP_SUFFIX,tableName);
      }
    }
 catch (    DBException e) {
      if (tableName != null)       this.getRecord().setTableNames(tableName);
      int oldOpenMode=this.getRecord().getOpenMode();
      this.getRecord().setOpenMode(oldOpenMode | DBConstants.OPEN_DONT_CREATE);
      int oldKeyArea=this.getRecord().getDefaultOrder();
      int i=0;
      for (; i < 120; i++) {
        try {
          this.getRecord().setKeyArea(0);
          this.doSeek(DBConstants.EQUALS);
          break;
        }
 catch (        DBException e2) {
        }
 finally {
          this.getRecord().setKeyArea(oldKeyArea);
        }
synchronized (this) {
          try {
            this.wait(1000);
          }
 catch (          InterruptedException e1) {
            e1.printStackTrace();
          }
        }
      }
      if (i == 20) {
        oldOpenMode=oldOpenMode | DBConstants.OPEN_DONT_CREATE;
        e.printStackTrace();
      }
      this.getRecord().setOpenMode(oldOpenMode);
    }
 finally {
      if (tableName != null)       this.getRecord().setTableNames(tableName);
    }
    return bSuccess;
  }
  return false;
}"
45364,"/** 
 * Create a new empty table using the definition in the record.
 * @exception DBException Open errors passed from SQL.
 * @return true if successful.
 */
public boolean loadInitialData() throws DBException {
  BaseTable table=this;
  Record record=table.getRecord();
  while (((record.getDatabaseType() & DBConstants.SHARED_TABLE) != 0) && ((record.getDatabaseType() & DBConstants.BASE_TABLE_CLASS) == 0)) {
    String tableName=record.getTableNames(false);
    Class<?> className=record.getClass().getSuperclass();
    record=Record.makeRecordFromClassName(className.getName(),record.getRecordOwner());
    record.setTableNames(tableName);
    table=record.getTable();
  }
  if (record.getTable() instanceof PassThruTable)   table=this.getPhysicalTable((PassThruTable)record.getTable(),record);
  int iOpenMode=record.getOpenMode();
  record.setOpenMode(DBConstants.OPEN_NORMAL);
  int iCount=record.getFieldCount();
  boolean[] brgCurrentSelection=new boolean[iCount];
  for (int i=0; i < iCount; i++) {
    brgCurrentSelection[i]=record.getField(i).isSelected();
    record.getField(i).setSelected(true);
  }
  BaseBuffer buffer=new VectorBuffer(null);
  buffer.fieldsToBuffer(record);
  org.jbundle.base.db.xmlutil.XmlInOut xml=new org.jbundle.base.db.xmlutil.XmlInOut(null,null,null);
  String filename=record.getArchiveFilename(true);
  String defaultFilename=record.getArchiveFilename(false);
  InputStream inputStream=null;
  if (Record.findRecordOwner(record) != null)   if (Record.findRecordOwner(record).getTask() != null)   inputStream=Record.findRecordOwner(record).getTask().getInputStream(filename);
  boolean bSuccess=false;
  try {
    bSuccess=xml.importXML(table,filename,inputStream);
    if (!bSuccess)     if (!defaultFilename.equals(filename)) {
      if (Record.findRecordOwner(record) != null)       if (Record.findRecordOwner(record).getTask() != null)       inputStream=Record.findRecordOwner(record).getTask().getInputStream(defaultFilename);
      bSuccess=xml.importXML(table,defaultFilename,inputStream);
    }
    if (!bSuccess)     Utility.getLogger().warning(""String_Node_Str"" + record.getRecordName());
  }
 catch (  Exception ex) {
    ex.printStackTrace();
  }
 finally {
    xml.free();
  }
  XmlInOut.enableAllBehaviors(record,false,false);
  buffer.bufferToFields(record,DBConstants.DISPLAY,DBConstants.SCREEN_MOVE);
  XmlInOut.enableAllBehaviors(record,true,true);
  for (int i=0; i < iCount; i++) {
    record.getField(i).setSelected(brgCurrentSelection[i]);
  }
  record.setOpenMode(iOpenMode);
  if (record != this.getRecord())   record.free();
  return bSuccess;
}","/** 
 * Create a new empty table using the definition in the record.
 * @exception DBException Open errors passed from SQL.
 * @return true if successful.
 */
public boolean loadInitialData() throws DBException {
  BaseTable table=this;
  Record record=table.getRecord();
  while (((record.getDatabaseType() & DBConstants.SHARED_TABLE) != 0) && ((record.getDatabaseType() & DBConstants.BASE_TABLE_CLASS) == 0)) {
    String tableName=record.getTableNames(false);
    Class<?> className=record.getClass().getSuperclass();
    record=Record.makeRecordFromClassName(className.getName(),record.getRecordOwner());
    record.setTableNames(tableName);
    table=record.getTable();
  }
  if (record.getTable() instanceof PassThruTable)   table=this.getPhysicalTable((PassThruTable)record.getTable(),record);
  int iOpenMode=record.getOpenMode();
  record.setOpenMode(DBConstants.OPEN_NORMAL);
  int iCount=record.getFieldCount();
  boolean[] brgCurrentSelection=new boolean[iCount];
  for (int i=0; i < iCount; i++) {
    brgCurrentSelection[i]=record.getField(i).isSelected();
    record.getField(i).setSelected(true);
  }
  BaseBuffer buffer=new VectorBuffer(null);
  buffer.fieldsToBuffer(record);
  org.jbundle.base.db.xmlutil.XmlInOut xml=new org.jbundle.base.db.xmlutil.XmlInOut(null,null,null);
  String filename=record.getArchiveFilename(true);
  String defaultFilename=record.getArchiveFilename(false);
  InputStream inputStream=null;
  if (Record.findRecordOwner(record) != null)   if (Record.findRecordOwner(record).getTask() != null)   inputStream=Record.findRecordOwner(record).getTask().getInputStream(filename);
  boolean bSuccess=false;
  try {
    bSuccess=xml.importXML(table,filename,inputStream);
    if (!bSuccess)     if (!defaultFilename.equals(filename)) {
      if (Record.findRecordOwner(record) != null)       if (Record.findRecordOwner(record).getTask() != null)       inputStream=Record.findRecordOwner(record).getTask().getInputStream(defaultFilename);
      bSuccess=xml.importXML(table,defaultFilename,inputStream);
    }
    if (!bSuccess)     Utility.getLogger().warning(""String_Node_Str"" + ((record.getRecordName().endsWith(TEMP_SUFFIX)) ? record.getRecordName().substring(0,record.getRecordName().length() - TEMP_SUFFIX.length()) : record.getRecordName()) + ""String_Node_Str""+ filename);
  }
 catch (  Exception ex) {
    ex.printStackTrace();
  }
 finally {
    xml.free();
  }
  XmlInOut.enableAllBehaviors(record,false,false);
  buffer.bufferToFields(record,DBConstants.DISPLAY,DBConstants.SCREEN_MOVE);
  XmlInOut.enableAllBehaviors(record,true,true);
  for (int i=0; i < iCount; i++) {
    record.getField(i).setSelected(brgCurrentSelection[i]);
  }
  record.setOpenMode(iOpenMode);
  if (record != this.getRecord())   record.free();
  return bSuccess;
}"
45365,"/** 
 * Create a new empty table using the definition in the record.
 * @exception DBException Open errors passed from SQL.
 * @return true if successful.
 */
public boolean loadInitialData() throws DBException {
  BaseTable table=this;
  Record record=table.getRecord();
  while (((record.getDatabaseType() & DBConstants.SHARED_TABLE) != 0) && ((record.getDatabaseType() & DBConstants.BASE_TABLE_CLASS) == 0)) {
    String tableName=record.getTableNames(false);
    Class<?> className=record.getClass().getSuperclass();
    record=Record.makeRecordFromClassName(className.getName(),record.getRecordOwner());
    record.setTableNames(tableName);
    table=record.getTable();
  }
  if (record.getTable() instanceof PassThruTable)   table=this.getPhysicalTable((PassThruTable)record.getTable(),record);
  int iOpenMode=record.getOpenMode();
  record.setOpenMode(DBConstants.OPEN_NORMAL);
  String strFilename=record.getArchiveFilename(false);
  InputStream inputStream=null;
  if (Record.findRecordOwner(record) != null)   if (Record.findRecordOwner(record).getTask() != null)   inputStream=Record.findRecordOwner(record).getTask().getInputStream(strFilename);
  org.jbundle.base.db.xmlutil.XmlInOut xml=new org.jbundle.base.db.xmlutil.XmlInOut(null,null,null);
  int iCount=record.getFieldCount();
  boolean[] brgCurrentSelection=new boolean[iCount];
  for (int i=0; i < iCount; i++) {
    brgCurrentSelection[i]=record.getField(i).isSelected();
    record.getField(i).setSelected(true);
  }
  BaseBuffer buffer=new VectorBuffer(null);
  buffer.fieldsToBuffer(record);
  boolean bSuccess=false;
  try {
    bSuccess=xml.importXML(table,strFilename,inputStream);
  }
 catch (  Exception ex) {
    Utility.getLogger().warning(""String_Node_Str"" + record.getRecordName());
  }
 finally {
    xml.free();
  }
  XmlInOut.enableAllBehaviors(record,false,false);
  buffer.bufferToFields(record,DBConstants.DISPLAY,DBConstants.SCREEN_MOVE);
  XmlInOut.enableAllBehaviors(record,true,true);
  for (int i=0; i < iCount; i++) {
    record.getField(i).setSelected(brgCurrentSelection[i]);
  }
  record.setOpenMode(iOpenMode);
  if (record != this.getRecord())   record.free();
  return bSuccess;
}","/** 
 * Create a new empty table using the definition in the record.
 * @exception DBException Open errors passed from SQL.
 * @return true if successful.
 */
public boolean loadInitialData() throws DBException {
  BaseTable table=this;
  Record record=table.getRecord();
  while (((record.getDatabaseType() & DBConstants.SHARED_TABLE) != 0) && ((record.getDatabaseType() & DBConstants.BASE_TABLE_CLASS) == 0)) {
    String tableName=record.getTableNames(false);
    Class<?> className=record.getClass().getSuperclass();
    record=Record.makeRecordFromClassName(className.getName(),record.getRecordOwner());
    record.setTableNames(tableName);
    table=record.getTable();
  }
  if (record.getTable() instanceof PassThruTable)   table=this.getPhysicalTable((PassThruTable)record.getTable(),record);
  int iOpenMode=record.getOpenMode();
  record.setOpenMode(DBConstants.OPEN_NORMAL);
  String strFilename=record.getArchiveFilename(true);
  InputStream inputStream=null;
  if (Record.findRecordOwner(record) != null)   if (Record.findRecordOwner(record).getTask() != null)   inputStream=Record.findRecordOwner(record).getTask().getInputStream(strFilename);
  org.jbundle.base.db.xmlutil.XmlInOut xml=new org.jbundle.base.db.xmlutil.XmlInOut(null,null,null);
  int iCount=record.getFieldCount();
  boolean[] brgCurrentSelection=new boolean[iCount];
  for (int i=0; i < iCount; i++) {
    brgCurrentSelection[i]=record.getField(i).isSelected();
    record.getField(i).setSelected(true);
  }
  BaseBuffer buffer=new VectorBuffer(null);
  buffer.fieldsToBuffer(record);
  boolean bSuccess=false;
  try {
    bSuccess=xml.importXML(table,strFilename,inputStream);
  }
 catch (  Exception ex) {
    Utility.getLogger().warning(""String_Node_Str"" + record.getRecordName());
  }
 finally {
    xml.free();
  }
  XmlInOut.enableAllBehaviors(record,false,false);
  buffer.bufferToFields(record,DBConstants.DISPLAY,DBConstants.SCREEN_MOVE);
  XmlInOut.enableAllBehaviors(record,true,true);
  for (int i=0; i < iCount; i++) {
    record.getField(i).setSelected(brgCurrentSelection[i]);
  }
  record.setOpenMode(iOpenMode);
  if (record != this.getRecord())   record.free();
  return bSuccess;
}"
45366,"/** 
 * Free the resources for this holder.
 */
public void free(){
  if ((m_mapChildHolders != null) && (m_mapChildHolders.size() > 0)) {
    Utility.getLogger().warning(""String_Node_Str"");
synchronized (this) {
      for (      String strID : m_mapChildHolders.keySet()) {
        BaseHolder baseHolder=(BaseHolder)m_mapChildHolders.get(strID);
        baseHolder.free();
      }
      m_mapChildHolders.clear();
    }
  }
  m_mapChildHolders=null;
  if (m_parentHolder != null)   m_parentHolder.remove(this);
  m_parentHolder=null;
  m_remoteObject=null;
}","/** 
 * Free the resources for this holder.
 */
public void free(){
  if ((m_mapChildHolders != null) && (m_mapChildHolders.size() > 0)) {
    Utility.getLogger().info(""String_Node_Str"");
synchronized (this) {
      for (      String strID : m_mapChildHolders.keySet()) {
        BaseHolder baseHolder=(BaseHolder)m_mapChildHolders.get(strID);
        baseHolder.free();
      }
      m_mapChildHolders.clear();
    }
  }
  m_mapChildHolders=null;
  if (m_parentHolder != null)   m_parentHolder.remove(this);
  m_parentHolder=null;
  m_remoteObject=null;
}"
45367,"/** 
 * Constructor.
 */
public void init(BasicServlet servlet,BasicServlet.SERVLET_TYPE servletType){
  super.init(servlet,servletType);
  if (m_application == null)   m_application=this.getNonUserApplication();
}","/** 
 * Constructor.
 */
public void init(BasicServlet servlet,BasicServlet.SERVLET_TYPE servletType){
  super.init(servlet,servletType);
  if (m_application == null)   m_application=this.getNonUserApplication();
  m_application.addTask(this,null);
}"
45368,"/** 
 * See if this user has a persisent userID cookie and set up preferences. Note: This method is only called if the user does not have a current session. The username and password are used for authentication here: user=null, password=null - No change user=user, password=null - Sign-on (login level) user=user, password=pass - Sign-on (authenticated level) user=blank,password=null - Sign-off (anonymous user) username can be user(name) or userid. password can be password or auth(entication) token.
 */
public App findApplication(HttpServletRequest req,HttpServletResponse res){
  ServletApplication application=null;
  String strDatatype=BaseHttpTask.getParam(req,DBParams.DATATYPE,null);
  if (strDatatype != null) {
    return this.getNonUserApplication();
  }
  HttpSession session=req.getSession();
  String strUserNameOrID=BaseHttpTask.cleanParam(req.getParameterValues(DBParams.USER_NAME),false,null);
  if (strUserNameOrID == null)   strUserNameOrID=BaseHttpTask.cleanParam(req.getParameterValues(DBParams.USER_ID),false,null);
  if (!session.isNew()) {
    application=(ServletApplication)session.getAttribute(DBParams.APPLICATION);
    if (application != null) {
      if (strUserNameOrID != null) {
        boolean bNewUser=false;
        if ((strUserNameOrID.length() == 0) && (BaseHttpTask.cleanParam(req.getParameterValues(DBParams.PASSWORD),false,null) == null))         bNewUser=true;
        if (strUserNameOrID.length() > 0) {
          if ((BaseHttpTask.cleanParam(req.getParameterValues(DBParams.PASSWORD),false,null) != null) && (BaseHttpTask.cleanParam(req.getParameterValues(DBParams.PASSWORD),false,null).length() > 0))           bNewUser=true;
          if ((BaseHttpTask.cleanParam(req.getParameterValues(DBParams.AUTH_TOKEN),false,null) != null) && (BaseHttpTask.cleanParam(req.getParameterValues(DBParams.AUTH_TOKEN),false,null).length() > 0))           bNewUser=true;
          if ((!strUserNameOrID.equalsIgnoreCase(application.getProperty(DBParams.USER_NAME))) && (!strUserNameOrID.equalsIgnoreCase(application.getProperty(DBParams.USER_ID))))           bNewUser=true;
        }
        if (bNewUser) {
          session.removeAttribute(DBParams.APPLICATION);
          application=null;
        }
      }
      if (application != null) {
        application=this.changeCookie(application,req,res);
        application.addTask(this,null);
        return application;
      }
    }
  }
  Utility.getLogger().info(""String_Node_Str"");
  if (strUserNameOrID != null) {
    Map<String,Object> properties=new Hashtable<String,Object>();
    Map<String,Object> appProperties=this.getApplicationProperties(false);
    if (appProperties != null)     properties.putAll(appProperties);
    this.addDatabaseProperties(properties);
    properties.remove(Params.USER_ID);
    properties.put(Params.USER_NAME,strUserNameOrID);
    application=new ServletApplication(null,properties,null);
    if (this.getApplication() == null) {
      application.addTask(this,null);
      this.setApplication(application);
    }
    int iLoginError=DBConstants.NORMAL_RETURN;
    if ((strUserNameOrID.length() > 0) && (!strUserNameOrID.equalsIgnoreCase(application.getProperty(DBParams.USER_ID))) && (!strUserNameOrID.equalsIgnoreCase(application.getProperty(DBParams.USER_NAME))))     iLoginError=DBConstants.ERROR_RETURN;
 else {
      String strPassword=BaseHttpTask.cleanParam(req.getParameterValues(DBParams.PASSWORD),false,null);
      if ((strPassword != null) && (strPassword.length() > 0)) {
        try {
          byte[] bytes=strPassword.getBytes(Base64.DEFAULT_ENCODING);
          bytes=Base64.encodeSHA(bytes);
          char[] chars=Base64.encode(bytes);
          strPassword=new String(chars);
        }
 catch (        NoSuchAlgorithmException ex) {
          ex.printStackTrace();
          strPassword=null;
        }
catch (        UnsupportedEncodingException ex) {
          ex.printStackTrace();
          strPassword=null;
        }
      }
      if ((strPassword == null) || (strPassword.length() == 0)) {
        strPassword=BaseHttpTask.cleanParam(req.getParameterValues(DBParams.AUTH_TOKEN),false,null);
        strPassword=application.authenticateToken(strPassword);
      }
      if ((strPassword != null) && (strPassword.length() > 0)) {
        String strDomain=Utility.getDomainFromURL(BaseHttpTask.getParam(req,DBParams.URL),null);
        iLoginError=application.login(this,strUserNameOrID,strPassword,strDomain);
      }
    }
    if (iLoginError != DBConstants.NORMAL_RETURN) {
      application.login(this,null,null,null);
      application.setProperty(Params.SECURITY_LEVEL,Integer.toString(Constants.LOGIN_USER));
      if (iLoginError == DBConstants.ERROR_RETURN)       application.setProperty(Params.SECURITY_MAP,Application.CREATE_USER_REQUIRED);
 else       application.setProperty(Params.SECURITY_MAP,Application.LOGIN_REQUIRED);
    }
  }
  application=this.changeCookie(application,req,res);
  session.setAttribute(DBParams.APPLICATION,application);
  application.addTask(this,null);
  return application;
}","/** 
 * See if this user has a persisent userID cookie and set up preferences. Note: This method is only called if the user does not have a current session. The username and password are used for authentication here: user=null, password=null - No change user=user, password=null - Sign-on (login level) user=user, password=pass - Sign-on (authenticated level) user=blank,password=null - Sign-off (anonymous user) username can be user(name) or userid. password can be password or auth(entication) token.
 */
public App findApplication(HttpServletRequest req,HttpServletResponse res){
  ServletApplication application=null;
  String strDatatype=BaseHttpTask.getParam(req,DBParams.DATATYPE,null);
  if (strDatatype != null) {
    return this.getNonUserApplication();
  }
  HttpSession session=req.getSession();
  String strUserNameOrID=BaseHttpTask.cleanParam(req.getParameterValues(DBParams.USER_NAME),false,null);
  if (strUserNameOrID == null)   strUserNameOrID=BaseHttpTask.cleanParam(req.getParameterValues(DBParams.USER_ID),false,null);
  if (!session.isNew()) {
    application=(ServletApplication)session.getAttribute(DBParams.APPLICATION);
    if (application != null) {
      if (strUserNameOrID != null) {
        boolean bNewUser=false;
        if ((strUserNameOrID.length() == 0) && (BaseHttpTask.cleanParam(req.getParameterValues(DBParams.PASSWORD),false,null) == null))         bNewUser=true;
        if (strUserNameOrID.length() > 0) {
          if ((BaseHttpTask.cleanParam(req.getParameterValues(DBParams.PASSWORD),false,null) != null) && (BaseHttpTask.cleanParam(req.getParameterValues(DBParams.PASSWORD),false,null).length() > 0))           bNewUser=true;
          if ((BaseHttpTask.cleanParam(req.getParameterValues(DBParams.AUTH_TOKEN),false,null) != null) && (BaseHttpTask.cleanParam(req.getParameterValues(DBParams.AUTH_TOKEN),false,null).length() > 0))           bNewUser=true;
          if ((!strUserNameOrID.equalsIgnoreCase(application.getProperty(DBParams.USER_NAME))) && (!strUserNameOrID.equalsIgnoreCase(application.getProperty(DBParams.USER_ID))))           bNewUser=true;
        }
        if (bNewUser) {
          session.removeAttribute(DBParams.APPLICATION);
          application=null;
        }
      }
      if (application != null) {
        application=this.changeCookie(application,req,res);
        application.addTask(this,null);
        this.setApplication(application);
        return application;
      }
    }
  }
  Utility.getLogger().info(""String_Node_Str"");
  if (strUserNameOrID != null) {
    Map<String,Object> properties=new Hashtable<String,Object>();
    Map<String,Object> appProperties=this.getApplicationProperties(false);
    if (appProperties != null)     properties.putAll(appProperties);
    this.addDatabaseProperties(properties);
    properties.remove(Params.USER_ID);
    properties.put(Params.USER_NAME,strUserNameOrID);
    application=new ServletApplication(null,properties,null);
    if (this.getApplication() == null) {
      application.addTask(this,null);
      this.setApplication(application);
    }
    int iLoginError=DBConstants.NORMAL_RETURN;
    if ((strUserNameOrID.length() > 0) && (!strUserNameOrID.equalsIgnoreCase(application.getProperty(DBParams.USER_ID))) && (!strUserNameOrID.equalsIgnoreCase(application.getProperty(DBParams.USER_NAME))))     iLoginError=DBConstants.ERROR_RETURN;
 else {
      String strPassword=BaseHttpTask.cleanParam(req.getParameterValues(DBParams.PASSWORD),false,null);
      if ((strPassword != null) && (strPassword.length() > 0)) {
        try {
          byte[] bytes=strPassword.getBytes(Base64.DEFAULT_ENCODING);
          bytes=Base64.encodeSHA(bytes);
          char[] chars=Base64.encode(bytes);
          strPassword=new String(chars);
        }
 catch (        NoSuchAlgorithmException ex) {
          ex.printStackTrace();
          strPassword=null;
        }
catch (        UnsupportedEncodingException ex) {
          ex.printStackTrace();
          strPassword=null;
        }
      }
      if ((strPassword == null) || (strPassword.length() == 0)) {
        strPassword=BaseHttpTask.cleanParam(req.getParameterValues(DBParams.AUTH_TOKEN),false,null);
        strPassword=application.authenticateToken(strPassword);
      }
      if ((strPassword != null) && (strPassword.length() > 0)) {
        String strDomain=Utility.getDomainFromURL(BaseHttpTask.getParam(req,DBParams.URL),null);
        iLoginError=application.login(this,strUserNameOrID,strPassword,strDomain);
      }
    }
    if (iLoginError != DBConstants.NORMAL_RETURN) {
      application.login(this,null,null,null);
      application.setProperty(Params.SECURITY_LEVEL,Integer.toString(Constants.LOGIN_USER));
      if (iLoginError == DBConstants.ERROR_RETURN)       application.setProperty(Params.SECURITY_MAP,Application.CREATE_USER_REQUIRED);
 else       application.setProperty(Params.SECURITY_MAP,Application.LOGIN_REQUIRED);
    }
  }
  application=this.changeCookie(application,req,res);
  session.setAttribute(DBParams.APPLICATION,application);
  application.addTask(this,null);
  this.setApplication(application);
  return application;
}"
45369,"/** 
 * Process an HTML get or post.
 * @exception ServletException From inherited class.
 * @exception IOException From inherited class.
 */
public void doProcessOutput(BasicServlet servlet,HttpServletRequest req,HttpServletResponse res,PrintWriter outExt,ScreenModel screen) throws ServletException, IOException {
  PrintWriter out=outExt;
  if (screen == null) {
    if (out != null)     out.println(""String_Node_Str"");
    return;
  }
  try {
    String strDatatype=this.getProperty(DBParams.DATATYPE);
    if (strDatatype == null) {
      if (out == null)       out=servlet.getOutputStream(res);
      ((ScreenModel)screen).printReport(out);
    }
 else {
      ((ScreenModel)screen).getScreenFieldView().sendData(req,res);
    }
    screen.free();
    screen=null;
  }
 catch (  DBException ex) {
    if (out != null) {
      out.println(""String_Node_Str"");
      out.println(""String_Node_Str"" + ex.getMessage() + ""String_Node_Str"");
      ex.printStackTrace(out);
    }
    ex.printStackTrace();
  }
catch (  java.lang.Exception ex) {
    ex.printStackTrace();
  }
 finally {
    if (outExt == null)     if (out != null)     out.close();
  }
  if (m_application.getRemoteTask(this,null,false) != null)   m_application.removeTask(this);
  m_application=null;
  m_properties=null;
}","/** 
 * Process an HTML get or post.
 * @exception ServletException From inherited class.
 * @exception IOException From inherited class.
 */
public void doProcessOutput(BasicServlet servlet,HttpServletRequest req,HttpServletResponse res,PrintWriter outExt,ScreenModel screen,boolean freeWhenDone) throws ServletException, IOException {
  PrintWriter out=outExt;
  if (screen == null) {
    if (out != null)     out.println(""String_Node_Str"");
    return;
  }
  try {
    String strDatatype=this.getProperty(DBParams.DATATYPE);
    if (strDatatype == null) {
      if (out == null)       out=servlet.getOutputStream(res);
      ((ScreenModel)screen).printReport(out);
    }
 else {
      ((ScreenModel)screen).getScreenFieldView().sendData(req,res);
    }
    screen.free();
    screen=null;
  }
 catch (  DBException ex) {
    if (out != null) {
      out.println(""String_Node_Str"");
      out.println(""String_Node_Str"" + ex.getMessage() + ""String_Node_Str"");
      ex.printStackTrace(out);
    }
    ex.printStackTrace();
  }
catch (  java.lang.Exception ex) {
    ex.printStackTrace();
  }
 finally {
    if (outExt == null)     if (out != null)     out.close();
  }
  if (freeWhenDone)   this.free();
}"
45370,"/** 
 * Process an HTML get or post.
 * @exception ServletException From inherited class.
 * @exception IOException From inherited class.
 */
public void doProcess(BasicServlet servlet,HttpServletRequest req,HttpServletResponse res,PrintWriter outExt) throws ServletException, IOException {
  ScreenModel screen=this.doProcessInput(servlet,req,res);
  this.doProcessOutput(servlet,req,res,outExt,screen);
}","/** 
 * Process an HTML get or post.
 * @exception ServletException From inherited class.
 * @exception IOException From inherited class.
 */
public void doProcess(BasicServlet servlet,HttpServletRequest req,HttpServletResponse res,PrintWriter outExt) throws ServletException, IOException {
  ScreenModel screen=this.doProcessInput(servlet,req,res);
  this.doProcessOutput(servlet,req,res,outExt,screen,true);
}"
45371,"/** 
 * Free all the resources belonging to this applet. If all applet screens are closed, shut down the applet.
 */
public void free(){
  if (m_recordOwnerCollection != null)   m_recordOwnerCollection.free();
  m_recordOwnerCollection=null;
  super.free();
}","/** 
 * Free all the resources belonging to this applet. If all applet screens are closed, shut down the applet.
 */
public void free(){
  super.free();
}"
45372,"/** 
 * Process an HTML get or post.
 * @exception ServletException From inherited class.
 * @exception IOException From inherited class.
 */
public void doProcess(HttpServletRequest req,HttpServletResponse res) throws ServletException, IOException {
  ServletTask servletTask=new ServletTask(this,BasicServlet.SERVLET_TYPE.HTML);
  this.addBrowserProperties(req,servletTask);
  servletTask.doProcess(this,req,res,null);
  servletTask.free();
}","/** 
 * Process an HTML get or post.
 * @exception ServletException From inherited class.
 * @exception IOException From inherited class.
 */
public void doProcess(HttpServletRequest req,HttpServletResponse res) throws ServletException, IOException {
  ServletTask servletTask=new ServletTask(this,BasicServlet.SERVLET_TYPE.HTML);
  this.addBrowserProperties(req,servletTask);
  servletTask.doProcess(this,req,res,null);
}"
45373,"public PrintThread(BasicServlet servlet,Writer outWriter,ServletTask servletTask,HttpServletRequest req,ScreenModel screen){
  super();
  this.outWriter=outWriter;
  this.servletTask=servletTask;
  this.req=req;
  this.screen=screen;
  this.servlet=servlet;
}","public PrintThread(BasicServlet servlet,Writer outWriter,ServletTask servletTask,HttpServletRequest req,ScreenModel screen,boolean freeWhenDone){
  super();
  this.outWriter=outWriter;
  this.servletTask=servletTask;
  this.req=req;
  this.screen=screen;
  this.servlet=servlet;
  this.freeWhenDone=freeWhenDone;
}"
45374,"/** 
 * process an HTML get or post.
 * @exception ServletException From inherited class.
 * @exception IOException From inherited class.
 */
@Override public void service(HttpServletRequest req,HttpServletResponse res) throws ServletException, IOException {
  ServletTask servletTask=new ServletTask(this,BasicServlet.SERVLET_TYPE.COCOON);
  this.addBrowserProperties(req,servletTask);
  ScreenModel screen=servletTask.doProcessInput(this,req,null);
  Transformer transformer=getTransformer(req,servletTask,screen);
  PipedReader in=new PipedReader();
  PipedWriter out=new PipedWriter(in);
  new PrintThread(this,out,servletTask,req,screen).start();
  StreamSource source=new StreamSource(in);
  ServletOutputStream outStream=res.getOutputStream();
  Result result=new StreamResult(outStream);
  try {
synchronized (transformer) {
      transformer.transform(source,result);
    }
  }
 catch (  TransformerException ex) {
    ex.printStackTrace();
    servletTask.free();
  }
}","/** 
 * process an HTML get or post.
 * @exception ServletException From inherited class.
 * @exception IOException From inherited class.
 */
@Override public void service(HttpServletRequest req,HttpServletResponse res) throws ServletException, IOException {
  ServletTask servletTask=new ServletTask(this,BasicServlet.SERVLET_TYPE.COCOON);
  this.addBrowserProperties(req,servletTask);
  ScreenModel screen=servletTask.doProcessInput(this,req,null);
  Transformer transformer=getTransformer(req,servletTask,screen);
  PipedReader in=new PipedReader();
  PipedWriter out=new PipedWriter(in);
  new PrintThread(this,out,servletTask,req,screen,true).start();
  StreamSource source=new StreamSource(in);
  ServletOutputStream outStream=res.getOutputStream();
  Result result=new StreamResult(outStream);
  try {
synchronized (transformer) {
      transformer.transform(source,result);
    }
  }
 catch (  TransformerException ex) {
    ex.printStackTrace();
    servletTask.free();
  }
}"
45375,"public void run(){
  PrintWriter writer=new PrintWriter(outWriter);
  try {
    servletTask.doProcessOutput(servlet,req,null,writer,screen);
  }
 catch (  ServletException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
 finally {
    writer.flush();
    writer.close();
  }
}","public void run(){
  PrintWriter writer=new PrintWriter(outWriter);
  try {
    servletTask.doProcessOutput(servlet,req,null,writer,screen,freeWhenDone);
  }
 catch (  ServletException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
 finally {
    writer.flush();
    writer.close();
  }
}"
45376,"/** 
 * Do a remote action.
 * @param strCommand Command to perform remotely.
 * @return boolean success.
 * @throws RemoteException TODO
 */
public Object doRemoteAction(String strCommand,Map<String,Object> properties) throws DBException, RemoteException ;","/** 
 * Do a remote action.
 * @param strCommand Command to perform remotely.
 * @return boolean success.
 * @throws RemoteException 
 */
public Object doRemoteAction(String strCommand,Map<String,Object> properties) throws DBException, RemoteException ;"
45377,"/** 
 * Build a new remote session and initialize it.
 * @param parentSessionObject The parent session for this new session (if null, parent = me).
 * @param strSessionClassName The class name of the remote session to build.
 * @throws RemoteException TODO
 */
public RemoteBaseSession makeRemoteSession(String strSessionClassName) throws RemoteException ;","/** 
 * Build a new remote session and initialize it.
 * @param parentSessionObject The parent session for this new session (if null, parent = me).
 * @param strSessionClassName The class name of the remote session to build.
 * @throws RemoteException 
 */
public RemoteBaseSession makeRemoteSession(String strSessionClassName) throws RemoteException ;"
45378,"/** 
 * Release the session and its resources.
 * @throws RemoteException TODO
 */
public void freeRemoteSession() throws RemoteException ;","/** 
 * Release the session and its resources.
 * @throws RemoteException 
 */
public void freeRemoteSession() throws RemoteException ;"
45379,"/** 
 * Open the physical database.
 * @exception DBException On open errors.
 */
public void setupJDBCConnection(String strJdbcDriver) throws DBException {
  if (m_JDBCConnection != null)   return;
  if (m_classDB == null)   m_classDB=ClassServiceUtility.getClassService().makeObjectFromClassName(strJdbcDriver);
  Utility.getLogger().info(""String_Node_Str"" + (m_classDB != null));
  m_JDBCConnection=this.getJDBCConnection();
}","/** 
 * Open the physical database.
 * @exception DBException On open errors.
 */
public void setupJDBCConnection(String strJdbcDriver) throws DBException {
  if (m_JDBCConnection != null)   return;
  if (firstTime == null)   firstTime=new Date();
  if (m_classDB == null) {
synchronized (firstTime) {
      if (m_classDB == null)       m_classDB=ClassServiceUtility.getClassService().makeObjectFromClassName(strJdbcDriver);
    }
  }
  Utility.getLogger().info(""String_Node_Str"" + (m_classDB != null));
  m_JDBCConnection=this.getJDBCConnection();
}"
45380,"/** 
 * Load ant set the database properties from this database's (database) info table.
 */
public void loadDatabaseProperties(){
  if (this.getProperty(STARTING_ID) != null)   return;
  int iStartID=1;
  if ((this.getDatabaseType() & (DBConstants.SHARED_DATA | DBConstants.USER_DATA)) != DBConstants.SHARED_DATA)   return;
  RecordOwner recordOwner=null;
  DatabaseInfo recDatabaseInfo=new DatabaseInfo();
  recDatabaseInfo.setTable(this.doMakeTable(recDatabaseInfo));
  String dbName=this.getDatabaseName(true);
  if (dbName.endsWith(SHARED_SUFFIX))   dbName=dbName.substring(0,dbName.length() - SHARED_SUFFIX.length());
 else   if (dbName.endsWith(USER_SUFFIX))   dbName=dbName.substring(0,dbName.length() - USER_SUFFIX.length());
  recDatabaseInfo.setDatabaseName(dbName);
  int iOldOpenMode=recDatabaseInfo.getOpenMode();
  recDatabaseInfo.setOpenMode(recDatabaseInfo.getOpenMode() | DBConstants.OPEN_DONT_CREATE);
  recDatabaseInfo.init(recordOwner);
  recDatabaseInfo.setOpenMode(iOldOpenMode);
  if (recDatabaseInfo.getEditMode() == DBConstants.EDIT_CURRENT) {
    iStartID=(int)recDatabaseInfo.getField(DatabaseInfo.kStartID).getValue();
    if (!recDatabaseInfo.getField(DatabaseInfo.kEndID).isNull())     this.addDatabaseProperty(ENDING_ID,Integer.toString((int)recDatabaseInfo.getField(DatabaseInfo.kEndID).getValue()));
    if (!recDatabaseInfo.getField(DatabaseInfo.kBaseDatabase).isNull())     this.addDatabaseProperty(BaseDatabase.BASE_DATABASE,recDatabaseInfo.getField(DatabaseInfo.kBaseDatabase).toString());
  }
  if (iStartID <= 0)   iStartID=1;
  recDatabaseInfo.free();
  this.addDatabaseProperty(STARTING_ID,Integer.toString(iStartID));
  if (m_databaseBase == null)   if (this.getProperty(BASE_DATABASE) != null) {
    Map<String,Object> properties=new HashMap<String,Object>();
    properties.putAll(this.getProperties());
    properties.remove(BASE_DATABASE);
    properties.put(DBConstants.DB_USER_PREFIX,DBConstants.BLANK);
    properties.put(DBConstants.SUB_SYSTEM_LN_SUFFIX,DBConstants.BLANK);
    m_databaseBase=m_databaseOwner.getDatabase(this.getProperty(BASE_DATABASE),this.getDatabaseType() & DBConstants.TABLE_MASK,properties);
  }
}","/** 
 * Load ant set the database properties from this database's (database) info table.
 */
public void loadDatabaseProperties(){
  if (this.getProperty(STARTING_ID) != null)   return;
  int iStartID=1;
  if ((this.getDatabaseType() & (DBConstants.SHARED_DATA | DBConstants.USER_DATA)) != DBConstants.SHARED_DATA)   return;
  RecordOwner recordOwner=null;
  DatabaseInfo recDatabaseInfo=new DatabaseInfo();
  recDatabaseInfo.setTable(this.doMakeTable(recDatabaseInfo));
  String dbName=this.getDatabaseName(true);
  if (dbName.endsWith(SHARED_SUFFIX))   dbName=dbName.substring(0,dbName.length() - SHARED_SUFFIX.length());
 else   if (dbName.endsWith(USER_SUFFIX))   dbName=dbName.substring(0,dbName.length() - USER_SUFFIX.length());
  recDatabaseInfo.setDatabaseName(dbName);
  int iOldOpenMode=recDatabaseInfo.getOpenMode();
  recDatabaseInfo.setOpenMode(recDatabaseInfo.getOpenMode() | DBConstants.OPEN_DONT_CREATE);
  recDatabaseInfo.init(recordOwner);
  recDatabaseInfo.setOpenMode(iOldOpenMode);
  if (recDatabaseInfo.getEditMode() == DBConstants.EDIT_CURRENT) {
    iStartID=(int)recDatabaseInfo.getField(DatabaseInfo.kStartID).getValue();
    if (!recDatabaseInfo.getField(DatabaseInfo.kEndID).isNull())     this.addDatabaseProperty(ENDING_ID,Integer.toString((int)recDatabaseInfo.getField(DatabaseInfo.kEndID).getValue()));
    if (!recDatabaseInfo.getField(DatabaseInfo.kBaseDatabase).isNull())     this.addDatabaseProperty(BaseDatabase.BASE_DATABASE,recDatabaseInfo.getField(DatabaseInfo.kBaseDatabase).toString());
  }
  if (iStartID <= 0)   iStartID=1;
  recDatabaseInfo.free();
  this.addDatabaseProperty(STARTING_ID,Integer.toString(iStartID));
  if (m_databaseBase == null)   if (this.getProperty(BASE_DATABASE) != null) {
    Map<String,Object> properties=new HashMap<String,Object>();
    properties.putAll(this.getProperties());
    properties.remove(BASE_DATABASE);
    properties.remove(SQLParams.JDBC_DRIVER_PARAM);
    properties.put(DBConstants.DB_USER_PREFIX,DBConstants.BLANK);
    properties.put(DBConstants.SUB_SYSTEM_LN_SUFFIX,DBConstants.BLANK);
    m_databaseBase=m_databaseOwner.getDatabase(this.getProperty(BASE_DATABASE),this.getDatabaseType() & DBConstants.TABLE_MASK,properties);
  }
}"
45381,"/** 
 * Given the name of the database, get the properties file and optionally merge them with my current properties.
 * @param strDatabaseName The name of the database engine (as returned in the meta call).
 * @return The ResourceBundle with all the database properties.
 */
public boolean setupDatabaseProperties(){
  if (this.getProperty(DB_PROPERTIES_LOADED) != null)   return true;
  String strDatabaseName=this.getDatabaseName(true);
  Environment env=this.getDatabaseOwner().getEnvironment();
  Map<String,String> map=env.getCachedDatabaseProperties(strDatabaseName);
  if ((map == null) || (map == Environment.DATABASE_DOESNT_EXIST)) {
    map=this.getDatabaseProperties();
    if (map == null)     return false;
    env.cacheDatabaseProperties(strDatabaseName,map);
  }
  for (  String key : map.keySet()) {
    this.setProperty(key,map.get(key));
  }
  if (m_databaseBase == null)   if (this.getProperty(BASE_DATABASE) != null) {
    Map<String,Object> properties=new HashMap<String,Object>();
    properties.putAll(this.getProperties());
    properties.remove(BASE_DATABASE);
    properties.put(DBConstants.DB_USER_PREFIX,DBConstants.BLANK);
    properties.put(DBConstants.SUB_SYSTEM_LN_SUFFIX,DBConstants.BLANK);
    m_databaseBase=m_databaseOwner.getDatabase(this.getProperty(BASE_DATABASE),this.getDatabaseType() & DBConstants.TABLE_MASK,properties);
  }
  this.setProperty(DB_PROPERTIES_LOADED,DBConstants.TRUE);
  return true;
}","/** 
 * Given the name of the database, get the properties file and optionally merge them with my current properties.
 * @param strDatabaseName The name of the database engine (as returned in the meta call).
 * @return The ResourceBundle with all the database properties.
 */
public boolean setupDatabaseProperties(){
  if (this.getProperty(DB_PROPERTIES_LOADED) != null)   return true;
  String strDatabaseName=this.getDatabaseName(true);
  Environment env=this.getDatabaseOwner().getEnvironment();
  Map<String,String> map=env.getCachedDatabaseProperties(strDatabaseName);
  if ((map == null) || (map == Environment.DATABASE_DOESNT_EXIST)) {
    map=this.getDatabaseProperties();
    if (map == null)     return false;
    env.cacheDatabaseProperties(strDatabaseName,map);
  }
  for (  String key : map.keySet()) {
    this.setProperty(key,map.get(key));
  }
  if (m_databaseBase == null)   if (this.getProperty(BASE_DATABASE) != null) {
    Map<String,Object> properties=new HashMap<String,Object>();
    properties.putAll(this.getProperties());
    properties.remove(BASE_DATABASE);
    properties.remove(SQLParams.JDBC_DRIVER_PARAM);
    properties.put(DBConstants.DB_USER_PREFIX,DBConstants.BLANK);
    properties.put(DBConstants.SUB_SYSTEM_LN_SUFFIX,DBConstants.BLANK);
    m_databaseBase=m_databaseOwner.getDatabase(this.getProperty(BASE_DATABASE),this.getDatabaseType() & DBConstants.TABLE_MASK,properties);
  }
  this.setProperty(DB_PROPERTIES_LOADED,DBConstants.TRUE);
  return true;
}"
45382,"/** 
 * process an HTML get or post.
 * @exception ServletException From inherited class.
 * @exception IOException From inherited class.
 */
@Override public void service(HttpServletRequest req,HttpServletResponse res) throws ServletException, IOException {
  String stylesheet=null;
  ServletTask servletTask=null;
  StringWriter stringWriter=new StringWriter();
  PrintWriter writer=new PrintWriter(stringWriter);
  try {
    servletTask=new ServletTask(this,SERVLET_TYPE.COCOON);
    BaseScreen screen=servletTask.doProcessInput(this,req,null);
    if (stylesheet == null)     stylesheet=req.getParameter(DBParams.TEMPLATE);
    if (stylesheet == null)     if (screen != null)     if (screen.getScreenFieldView() != null)     stylesheet=screen.getScreenFieldView().getStylesheetPath();
    if (stylesheet == null)     stylesheet=req.getParameter(""String_Node_Str"");
    if (stylesheet == null)     stylesheet=""String_Node_Str"";
    StreamSource stylesheetSource=this.getStylesheetSource(servletTask,stylesheet);
    ServletOutputStream outStream=res.getOutputStream();
    Result result=new StreamResult(outStream);
    TransformerFactory tFact=TransformerFactory.newInstance();
    URIResolver resolver=new MyURIResolver(servletTask,stylesheet);
    tFact.setURIResolver(resolver);
    Transformer transformer=tFact.newTransformer(stylesheetSource);
    transformer.setOutputProperty(OutputKeys.INDENT,""String_Node_Str"");
    servletTask.doProcessOutput(this,req,null,writer,screen);
    writer.flush();
    String string=stringWriter.toString();
    StringReader sourceFileReader=new StringReader(string);
    StreamSource source=new StreamSource(sourceFileReader);
    transformer.transform(source,result);
  }
 catch (  TransformerConfigurationException ex) {
    ex.printStackTrace();
  }
catch (  TransformerException ex) {
    ex.printStackTrace();
    servletTask.free();
  }
catch (  ServletException ex) {
  }
  super.service(req,res);
}","/** 
 * process an HTML get or post.
 * @exception ServletException From inherited class.
 * @exception IOException From inherited class.
 */
@Override public void service(HttpServletRequest req,HttpServletResponse res) throws ServletException, IOException {
  String stylesheet=null;
  ServletTask servletTask=null;
  StringWriter stringWriter=new StringWriter();
  PrintWriter writer=new PrintWriter(stringWriter);
  try {
    servletTask=new ServletTask(this,SERVLET_TYPE.COCOON);
    BaseScreen screen=servletTask.doProcessInput(this,req,null);
    if (stylesheet == null)     stylesheet=req.getParameter(DBParams.TEMPLATE);
    if (stylesheet == null)     if (screen != null)     if (screen.getScreenFieldView() != null)     stylesheet=screen.getScreenFieldView().getStylesheetPath();
    if (stylesheet == null)     stylesheet=req.getParameter(""String_Node_Str"");
    if (stylesheet == null)     stylesheet=""String_Node_Str"";
    StreamSource stylesheetSource=this.getStylesheetSource(servletTask,stylesheet);
    ServletOutputStream outStream=res.getOutputStream();
    Result result=new StreamResult(outStream);
    TransformerFactory tFact=TransformerFactory.newInstance();
    URIResolver resolver=new MyURIResolver(servletTask,stylesheet);
    tFact.setURIResolver(resolver);
    Transformer transformer=tFact.newTransformer(stylesheetSource);
    transformer.setOutputProperty(OutputKeys.INDENT,""String_Node_Str"");
    servletTask.doProcessOutput(this,req,null,writer,screen);
    writer.flush();
    String string=stringWriter.toString();
    StringReader sourceFileReader=new StringReader(string);
    StreamSource source=new StreamSource(sourceFileReader);
    transformer.transform(source,result);
  }
 catch (  TransformerConfigurationException ex) {
    ex.printStackTrace();
  }
catch (  TransformerException ex) {
    ex.printStackTrace();
    servletTask.free();
  }
catch (  ServletException ex) {
  }
}"
45383,"/** 
 * Free all the resources belonging to this application.
 */
public void free(){
  if (m_mapTasks != null) {
    while (m_mapTasks.size() > 0) {
      for (      Task task : m_mapTasks.keySet()) {
        if (task != null) {
          int iCount=0;
          while (task.isRunning()) {
            if (iCount++ == 10) {
              Util.getLogger().warning(""String_Node_Str"");
              break;
            }
            try {
              Thread.sleep(100);
            }
 catch (            InterruptedException e) {
              e.printStackTrace();
            }
          }
          task.stopTask();
        }
 else {
          try {
            RemoteTask remoteTask=m_mapTasks.remove(task);
            if (remoteTask != null)             remoteTask.freeRemoteSession();
          }
 catch (          RemoteException ex) {
            ex.printStackTrace();
          }
        }
        break;
      }
    }
  }
  m_mapTasks=null;
}","/** 
 * Free all the resources belonging to this application.
 */
public void free(){
  if (m_mapTasks != null) {
    while (m_mapTasks.size() > 0) {
      for (      Task task : m_mapTasks.keySet()) {
        if (task != null) {
          int iCount=0;
          while (task.isRunning()) {
            if (iCount++ == 10) {
              Util.getLogger().warning(""String_Node_Str"");
              break;
            }
            try {
              Thread.sleep(100);
            }
 catch (            InterruptedException e) {
              e.printStackTrace();
            }
          }
          this.removeTask(task);
          task.setApplication(null);
          task.stopTask();
        }
 else {
          try {
            RemoteTask remoteTask=m_mapTasks.remove(task);
            if (remoteTask != null)             remoteTask.freeRemoteSession();
          }
 catch (          RemoteException ex) {
            ex.printStackTrace();
          }
        }
        break;
      }
    }
  }
  m_mapTasks=null;
}"
45384,"public void touch(Instruction i){
  log.debug(""String_Node_Str"");
  int r=machine.peek();
  int top=machine.getPP();
  int pp=machine.get(machine.getFP());
  int fp=machine.get(machine.getFP() + 1);
  int pc=machine.get(machine.getFP() + 4);
  machine.setTOP(top);
  machine.setPP(pp);
  machine.setFP(fp);
  machine.setPC(pc);
  machine.push(r);
}","public void touch(Instruction i){
  log.debug(""String_Node_Str"");
  int r=machine.peek();
  int top=machine.getPP();
  int pp=machine.get(machine.getFP());
  int fp=machine.get(machine.getFP() + 1);
  int pc=machine.get(machine.getFP() + 4);
  machine.setTOP(top - 1);
  machine.setPP(pp);
  machine.setFP(fp);
  machine.setPC(pc);
  machine.push(r);
}"
45385,"@Test public void program4(){
  AbstractMachine m=new AbstractMachine();
  m.reserveSpace(1);
  m.execute(Instruction.program4);
  m.printStack();
}","@Test public void program4(){
  AbstractMachine m=new AbstractMachine();
  m.reserveSpace(1);
  m.execute(Instruction.program4);
  m.printStack();
  Assert.assertEquals(100,(int)m.get(0));
}"
45386,"@Test public void factorial(){
  AbstractMachine m=new AbstractMachine();
  m.execute(Instruction.factorial);
  m.printStack();
}","@Test public void factorial(){
  AbstractMachine m=new AbstractMachine();
  m.execute(Instruction.factorial);
  m.printStack();
  Assert.assertEquals(6,(int)m.get(0));
}"
45387,"@Test public void program1(){
  AbstractMachine m=new AbstractMachine();
  m.execute(Instruction.program1);
  m.printStack();
}","@Test public void program1(){
  AbstractMachine m=new AbstractMachine();
  m.execute(Instruction.program1);
  m.printStack();
  Assert.assertEquals(15,(int)m.peek());
}"
45388,"@Test public void program2(){
  AbstractMachine m=new AbstractMachine();
  m.execute(Instruction.program2);
  m.printStack();
}","@Test public void program2(){
  AbstractMachine m=new AbstractMachine();
  m.execute(Instruction.program2);
  m.printStack();
  Assert.assertEquals(28,(int)m.peek(1));
}"
45389,"@Test public void program3(){
  AbstractMachine m=new AbstractMachine();
  m.reserveSpace(1);
  m.execute(Instruction.program3);
  m.printStack();
}","@Test public void program3(){
  AbstractMachine m=new AbstractMachine();
  m.reserveSpace(1);
  m.execute(Instruction.program3);
  m.printStack();
  Assert.assertEquals(200,(int)m.peek(-1));
}"
45390,"private void importProjectCerts(Map<String,SSLToolsException> errors){
  RepositorySystemSession rss=session.getRepositorySession();
  MirrorSelector mirrorSelector=rss.getMirrorSelector();
  List<Repository> repos=project.getRepositories();
  importRepos(repos,mirrorSelector,errors);
  repos=project.getPluginRepositories();
  importRepos(repos,mirrorSelector,errors);
  DistributionManagement dm=project.getDistributionManagement();
  if (dm != null) {
    DeploymentRepository[] drepos={dm.getRepository(),dm.getSnapshotRepository()};
    for (    DeploymentRepository drepo : drepos) {
      if (drepo != null) {
        importCerts(drepo.getUrl(),errors);
      }
    }
    Site site=dm.getSite();
    if (site != null) {
      importCerts(site.getUrl(),errors);
    }
  }
}","private void importProjectCerts(Set<String> seen,Map<String,SSLToolsException> errors){
  RepositorySystemSession rss=session.getRepositorySession();
  MirrorSelector mirrorSelector=rss.getMirrorSelector();
  List<Repository> repos=project.getRepositories();
  importRepos(repos,mirrorSelector,seen,errors);
  repos=project.getPluginRepositories();
  importRepos(repos,mirrorSelector,seen,errors);
  DistributionManagement dm=project.getDistributionManagement();
  if (dm != null) {
    DeploymentRepository[] drepos={dm.getRepository(),dm.getSnapshotRepository()};
    for (    DeploymentRepository drepo : drepos) {
      if (drepo != null) {
        importCerts(drepo.getUrl(),seen,errors);
      }
    }
    Site site=dm.getSite();
    if (site != null) {
      importCerts(site.getUrl(),seen,errors);
    }
  }
}"
45391,"private void importCerts(String serverUrl,Map<String,SSLToolsException> errors){
  try {
    URL url=new URL(serverUrl);
    int port=url.getPort();
    if (port < 1) {
      port=80;
    }
    importer.importServerCertificates(url.getHost(),port,sourceKeystore,sourceStorepass.toCharArray(),keystore,storepass.toCharArray());
  }
 catch (  SSLToolsException e) {
    errors.put(serverUrl,e);
  }
catch (  MalformedURLException e) {
    errors.put(serverUrl,new SSLToolsException(""String_Node_Str"",e,serverUrl));
  }
}","private void importCerts(String serverUrl,Set<String> seen,Map<String,SSLToolsException> errors){
  if (seen.contains(serverUrl)) {
    return;
  }
  seen.add(serverUrl);
  if (!serverUrl.startsWith(""String_Node_Str"")) {
    getLog().info(""String_Node_Str"" + serverUrl + ""String_Node_Str"");
    return;
  }
 else {
    getLog().info(""String_Node_Str"" + serverUrl + ""String_Node_Str"");
  }
  try {
    URL url=new URL(serverUrl);
    int port=url.getPort();
    if (port < 1) {
      port=80;
    }
    importer.importServerCertificates(url.getHost(),port,sourceKeystore,sourceStorepass.toCharArray(),keystore,storepass.toCharArray());
  }
 catch (  SSLToolsException e) {
    errors.put(serverUrl,e);
  }
catch (  MalformedURLException e) {
    errors.put(serverUrl,new SSLToolsException(""String_Node_Str"",e,serverUrl));
  }
}"
45392,"@Override public void execute() throws MojoExecutionException, MojoFailureException {
  if (sourceKeystore == null) {
    sourceKeystore=keystore;
    sourceStorepass=storepass;
  }
  try {
    importer=CertificateImporter.openOrCreate(sourceKeystore,sourceStorepass.toCharArray());
  }
 catch (  SSLToolsException e) {
    throw new MojoExecutionException(""String_Node_Str"" + e.getMessage(),e);
  }
  Map<String,SSLToolsException> errors=new LinkedHashMap<String,SSLToolsException>();
  if (importServers != null) {
    String[] servers=importServers.split(""String_Node_Str"");
    importAll(Arrays.asList(servers),errors);
  }
  if (servers != null) {
    importAll(servers,errors);
  }
  if (importServers == null && servers == null) {
    importProjectCerts(errors);
  }
  if (importer != null && importer.isChanged()) {
    try {
      importer.save(keystore,storepass.toCharArray());
    }
 catch (    SSLToolsException e) {
      throw new MojoExecutionException(""String_Node_Str"" + e.getMessage(),e);
    }
  }
  if (!errors.isEmpty()) {
    if (stopOnFailure) {
      throw new SSLToolsMojoException(errors);
    }
 else {
      getLog().info(SSLToolsMojoException.formatSummary(errors));
    }
  }
}","@Override public void execute() throws MojoExecutionException, MojoFailureException {
  if (sourceKeystore == null) {
    sourceKeystore=keystore;
  }
  if (sourceStorepass == null) {
    sourceStorepass=storepass;
  }
  try {
    importer=CertificateImporter.openOrCreate(sourceKeystore,sourceStorepass.toCharArray());
  }
 catch (  SSLToolsException e) {
    throw new MojoExecutionException(""String_Node_Str"" + e.getMessage(),e);
  }
  Map<String,SSLToolsException> errors=new LinkedHashMap<String,SSLToolsException>();
  Set<String> seen=new HashSet<String>();
  if (importServers != null) {
    String[] servers=importServers.split(""String_Node_Str"");
    importAll(Arrays.asList(servers),seen,errors);
  }
  if (servers != null) {
    importAll(servers,seen,errors);
  }
  if (importServers == null && servers == null) {
    importProjectCerts(seen,errors);
  }
  if (importer != null && importer.isChanged()) {
    try {
      importer.save(keystore,storepass.toCharArray());
    }
 catch (    SSLToolsException e) {
      throw new MojoExecutionException(""String_Node_Str"" + e.getMessage(),e);
    }
  }
  if (!errors.isEmpty()) {
    if (stopOnFailure) {
      throw new SSLToolsMojoException(errors);
    }
 else {
      getLog().info(SSLToolsMojoException.formatSummary(errors));
    }
  }
}"
45393,"private void importRepos(List<Repository> repos,MirrorSelector mirrorSelector,Map<String,SSLToolsException> errors){
  if (repos != null) {
    for (    Repository repo : repos) {
      String url=repo.getUrl();
      if (mirrorSelector != null) {
        RemoteRepository mirror=mirrorSelector.getMirror(new RemoteRepository(repo.getId(),repo.getLayout(),url));
        if (mirror != null) {
          url=mirror.getUrl();
        }
      }
      importCerts(url,errors);
    }
  }
}","private void importRepos(List<Repository> repos,MirrorSelector mirrorSelector,Set<String> seen,Map<String,SSLToolsException> errors){
  if (repos != null) {
    for (    Repository repo : repos) {
      String url=repo.getUrl();
      if (mirrorSelector != null) {
        RemoteRepository mirror=mirrorSelector.getMirror(new RemoteRepository(repo.getId(),repo.getLayout(),url));
        if (mirror != null) {
          url=mirror.getUrl();
        }
      }
      importCerts(url,seen,errors);
    }
  }
}"
45394,"private void importAll(Iterable<String> servers,Map<String,SSLToolsException> errors){
  for (  String server : servers) {
    String host=server;
    int port=-1;
    int idx=server.indexOf(""String_Node_Str"");
    if (idx > 0) {
      host=server.substring(0,idx);
      port=Integer.parseInt(server.substring(idx + 1));
    }
    try {
      importer.importServerCertificates(host,port,sourceKeystore,sourceStorepass.toCharArray(),keystore,storepass.toCharArray());
    }
 catch (    SSLToolsException e) {
      errors.put(server,e);
    }
  }
}","private void importAll(Iterable<String> servers,Set<String> seen,Map<String,SSLToolsException> errors){
  for (  String server : servers) {
    if (seen.contains(server)) {
      continue;
    }
    seen.add(server);
    String host=server;
    int port=-1;
    int idx=server.indexOf(""String_Node_Str"");
    if (idx > 0) {
      host=server.substring(0,idx);
      port=Integer.parseInt(server.substring(idx + 1));
    }
    try {
      importer.importServerCertificates(host,port,sourceKeystore,sourceStorepass.toCharArray(),keystore,storepass.toCharArray());
    }
 catch (    SSLToolsException e) {
      errors.put(server,e);
    }
  }
}"
45395,"@Override public String toString(){
  return String.format(""String_Node_Str"",id,firstName,lastName);
}","@Override public String toString(){
  return String.format(""String_Node_Str"",getId(),getName());
}"
45396,"@GET @Produces(APPLICATION_XML) public String getAllUsers_Xml(){
  final StringBuffer buf=new StringBuffer();
  final ListIterator<User> iter=users.listIterator();
  while (iter.hasNext()) {
    if (!iter.hasPrevious()) {
      buf.append(""String_Node_Str"");
    }
    buf.append(iter.next().toXml());
    if (!iter.hasNext()) {
      buf.append(""String_Node_Str"");
    }
  }
  return buf.toString();
}","@GET @Produces(APPLICATION_XML) public List<User> getAllUsers_Xml(){
  return users;
}"
45397,"@Override public void onEnable(){
  PluginDescriptionFile pdfFile=this.getDescription();
  File worldsYml=new File(getDataFolder() + ""String_Node_Str"");
  File mainYml=new File(getDataFolder() + ""String_Node_Str"");
  setupFile(worldsYml);
  setupFile(mainYml);
  if (!setupDependencies())   this.getServer().getPluginManager().disablePlugin(this);
  wConfig=new Configuration(worldsYml);
  wConfig.load();
  mConfig=getConfiguration();
  List<World> worlds=getServer().getWorlds();
  for (  World world : worlds)   setupWorld(world.getName());
  PluginManager pm=getServer().getPluginManager();
  pm.registerEvent(Event.Type.WORLD_LOAD,worldLoadListener,Priority.Monitor,this);
  pm.registerEvent(Event.Type.CUSTOM_EVENT,combatListener,Priority.Monitor,this);
  log.info(plugName + ""String_Node_Str"" + pdfFile.getVersion()+ ""String_Node_Str"");
}","@Override public void onEnable(){
  PluginDescriptionFile pdfFile=this.getDescription();
  File worldsYml=new File(getDataFolder() + ""String_Node_Str"");
  File mainYml=new File(getDataFolder() + ""String_Node_Str"");
  setupFile(worldsYml);
  setupFile(mainYml);
  wConfig=new Configuration(worldsYml);
  wConfig.load();
  mConfig=getConfiguration();
  List<World> worlds=getServer().getWorlds();
  for (  World world : worlds)   setupWorld(world.getName());
  PluginManager pm=getServer().getPluginManager();
  pm.registerEvent(Event.Type.WORLD_LOAD,worldLoadListener,Priority.Monitor,this);
  pm.registerEvent(Event.Type.CUSTOM_EVENT,combatListener,Priority.Monitor,this);
  log.info(plugName + ""String_Node_Str"" + pdfFile.getVersion()+ ""String_Node_Str"");
}"
45398,"public void onEntityDeath(EntityDeathEvent event){
  if (KKKreditzHandler.isValidHandler() || !isValidEntity(event.getEntity()))   return;
  LivingEntity cEntity=(LivingEntity)event.getEntity();
  if (entityMap.containsKey(cEntity)) {
    Player player=entityMap.remove(cEntity);
    if (player == null)     return;
 else {
      CreatureType cType=getCType(cEntity);
      if (!KKPermissions.reward(player,cType.getName()))       return;
      KKWorldConfig conf=KillaKreditz.worldConfig.get(player.getWorld().getName());
      if (conf.get(cType) == null)       return;
 else {
        double reward=getReward(conf.getMinReward(cType),conf.getMaxReward(cType),conf.getChance(cType)) * KKPermissions.multiplier(player);
        if (reward == 0)         return;
 else {
          KKKreditzHandler.rewardPlayer(player.getName(),reward);
          player.sendMessage(""String_Node_Str"" + KKKreditzHandler.formatCurrency(reward) + ""String_Node_Str""+ cType.getName());
        }
      }
    }
  }
}","public void onEntityDeath(EntityDeathEvent event){
  if (KKKreditzHandler.isValidHandler() || !isValidEntity(event.getEntity()))   return;
  LivingEntity cEntity=(LivingEntity)event.getEntity();
  if (entityMap.containsKey(cEntity)) {
    Player player=entityMap.remove(cEntity);
    if (player == null)     return;
 else {
      CreatureType cType=getCType(cEntity);
      if (!KKPermissions.reward(player,cType.getName().toLowerCase()))       return;
      KKWorldConfig conf=KillaKreditz.worldConfig.get(player.getWorld().getName());
      if (conf.get(cType) == null)       return;
 else {
        double reward=getReward(conf.getMinReward(cType),conf.getMaxReward(cType),conf.getChance(cType)) * KKPermissions.multiplier(player);
        if (reward == 0)         return;
 else {
          KKKreditzHandler.rewardPlayer(player.getName(),reward);
          player.sendMessage(""String_Node_Str"" + KKKreditzHandler.formatCurrency(reward) + ""String_Node_Str""+ cType.getName());
        }
      }
    }
  }
}"
45399,"public static void setupWorld(String worldName){
  worldConfig.put(worldName,new KKWorldConfig());
  if (!wConfig.getKeys(null).contains(worldName)) {
    setConfigDefaults(worldName);
    log.info(plugName + ""String_Node_Str"" + worldName+ ""String_Node_Str"");
  }
  KKWorldConfig conf=worldConfig.get(worldName);
  for (  CreatureType creature : CreatureType.values()) {
    if (creature == CreatureType.MONSTER)     continue;
    String cName=creature.name();
    if (wConfig.getNode(worldName + ""String_Node_Str"" + cName) == null) {
      wConfig.setProperty(worldName + ""String_Node_Str"" + cName+ ""String_Node_Str"",0.0);
      wConfig.setProperty(worldName + ""String_Node_Str"" + cName+ ""String_Node_Str"",0.0);
      wConfig.setProperty(worldName + ""String_Node_Str"" + cName+ ""String_Node_Str"",0.0);
      wConfig.save();
    }
 else {
      double minReward=wConfig.getDouble(worldName + ""String_Node_Str"" + cName+ ""String_Node_Str"",0.0);
      double maxReward=wConfig.getDouble(worldName + ""String_Node_Str"" + cName+ ""String_Node_Str"",0.0);
      double chance=wConfig.getDouble(worldName + ""String_Node_Str"" + cName+ ""String_Node_Str"",0.0);
      if (minReward < 0) {
        minReward=0;
        wConfig.setProperty(worldName + ""String_Node_Str"" + cName+ ""String_Node_Str"",minReward);
        wConfig.save();
      }
      if (maxReward < minReward) {
        maxReward=minReward;
        wConfig.setProperty(worldName + ""String_Node_Str"" + cName+ ""String_Node_Str"",maxReward);
        wConfig.save();
      }
      if (chance < 0) {
        chance=0;
        wConfig.getDouble(worldName + ""String_Node_Str"" + cName+ ""String_Node_Str"",chance);
        wConfig.save();
      }
      conf.set(creature,minReward,maxReward,chance);
    }
  }
}","public static void setupWorld(String worldName){
  worldConfig.put(worldName,new KKWorldConfig());
  if (!wConfig.getKeys(null).contains(worldName)) {
    setConfigDefaults(worldName);
    log.info(plugName + ""String_Node_Str"" + worldName+ ""String_Node_Str"");
  }
  KKWorldConfig conf=worldConfig.get(worldName);
  for (  CreatureType creature : CreatureType.values()) {
    if (creature == CreatureType.MONSTER)     continue;
    String cName=creature.name().toLowerCase();
    if (wConfig.getNode(worldName + ""String_Node_Str"" + cName) == null) {
      wConfig.setProperty(worldName + ""String_Node_Str"" + cName+ ""String_Node_Str"",0.0);
      wConfig.setProperty(worldName + ""String_Node_Str"" + cName+ ""String_Node_Str"",0.0);
      wConfig.setProperty(worldName + ""String_Node_Str"" + cName+ ""String_Node_Str"",0.0);
      wConfig.save();
    }
 else {
      double minReward=wConfig.getDouble(worldName + ""String_Node_Str"" + cName+ ""String_Node_Str"",0.0);
      double maxReward=wConfig.getDouble(worldName + ""String_Node_Str"" + cName+ ""String_Node_Str"",0.0);
      double chance=wConfig.getDouble(worldName + ""String_Node_Str"" + cName+ ""String_Node_Str"",0.0);
      if (minReward < 0) {
        minReward=0;
        wConfig.setProperty(worldName + ""String_Node_Str"" + cName+ ""String_Node_Str"",minReward);
        wConfig.save();
      }
      if (maxReward < minReward) {
        maxReward=minReward;
        wConfig.setProperty(worldName + ""String_Node_Str"" + cName+ ""String_Node_Str"",maxReward);
        wConfig.save();
      }
      if (chance < 0) {
        chance=0;
        wConfig.getDouble(worldName + ""String_Node_Str"" + cName+ ""String_Node_Str"",chance);
        wConfig.save();
      }
      conf.set(creature,minReward,maxReward,chance);
    }
  }
}"
45400,"public boolean isStationary(int duration){
  boolean result=false;
  double accelerometerActivityLevel=9.1;
  if ((accelerometerActivityLevel > SensorConstants.MIN_ACCELEROMETER_STATIONARY_LEVEL && accelerometerActivityLevel < SensorConstants.MAX_ACCELEROMETER_STATIONARY_LEVEL) && isLocationChanged(duration)) {
    result=true;
  }
  return result;
}","public boolean isStationary(int duration){
  boolean result=false;
  double accelerometerActivityLevel=checkAccelerometerActivityLevel(duration);
  if ((accelerometerActivityLevel > SensorConstants.MIN_ACCELEROMETER_STATIONARY_LEVEL && accelerometerActivityLevel < SensorConstants.MAX_ACCELEROMETER_STATIONARY_LEVEL) && !isLocationChanged(duration)) {
    result=true;
  }
  return result;
}"
45401,"public GeoLocationLogger(){
  super();
  this.locationManager=(LocationManager)AndSensor.getContext().getSystemService(android.content.Context.LOCATION_SERVICE);
  this.locationSensor=LocationManager.GPS_PROVIDER;
  setDelayBetweenLogging(60 * 1000);
}","public GeoLocationLogger(){
  super();
  this.locationManager=(LocationManager)AndSensor.getContext().getSystemService(android.content.Context.LOCATION_SERVICE);
  this.locationSensor=LocationManager.NETWORK_PROVIDER;
  setDelayBetweenLogging(5000);
}"
45402,"public void onClick(DialogInterface dialog,int which){
  tracker.trackEvent(""String_Node_Str"",resorts[which],""String_Node_Str"",0);
  app_title=getString(R.string.app_name) + ""String_Node_Str"" + resorts[which];
  try {
switch (which) {
case 0:
      Utils.WriteSettings(MainPhone.this,""String_Node_Str"",""String_Node_Str"");
    load_mtbuller();
  break;
case 1:
Utils.WriteSettings(MainPhone.this,""String_Node_Str"",""String_Node_Str"");
load_mthotham();
break;
case 2:
Utils.WriteSettings(MainPhone.this,""String_Node_Str"",""String_Node_Str"");
load_fallscreek();
break;
case 3:
Utils.WriteSettings(MainPhone.this,""String_Node_Str"",""String_Node_Str"");
load_bawbaw();
break;
case 4:
Utils.WriteSettings(MainPhone.this,""String_Node_Str"",""String_Node_Str"");
load_perisher();
break;
case 5:
Utils.WriteSettings(MainPhone.this,""String_Node_Str"",""String_Node_Str"");
load_thredbo();
break;
case 6:
Utils.WriteSettings(MainPhone.this,""String_Node_Str"",""String_Node_Str"");
load_selwyn();
case 7:
Utils.WriteSettings(MainPhone.this,""String_Node_Str"",""String_Node_Str"");
load_charlotte();
break;
case 8:
Utils.WriteSettings(MainPhone.this,""String_Node_Str"",""String_Node_Str"");
load_lakemountain();
break;
}
}
 catch (IOException e) {
e.printStackTrace();
}
MainPhone.this.setTitle(app_title);
}","public void onClick(DialogInterface dialog,int which){
  tracker.trackEvent(""String_Node_Str"",resorts[which],""String_Node_Str"",0);
  app_title=getString(R.string.app_name) + ""String_Node_Str"" + resorts[which];
  try {
switch (which) {
case 0:
      Utils.WriteSettings(MainPhone.this,""String_Node_Str"",""String_Node_Str"");
    load_mtbuller();
  break;
case 1:
Utils.WriteSettings(MainPhone.this,""String_Node_Str"",""String_Node_Str"");
load_mthotham();
break;
case 2:
Utils.WriteSettings(MainPhone.this,""String_Node_Str"",""String_Node_Str"");
load_fallscreek();
break;
case 3:
Utils.WriteSettings(MainPhone.this,""String_Node_Str"",""String_Node_Str"");
load_bawbaw();
break;
case 4:
Utils.WriteSettings(MainPhone.this,""String_Node_Str"",""String_Node_Str"");
load_perisher();
break;
case 5:
Utils.WriteSettings(MainPhone.this,""String_Node_Str"",""String_Node_Str"");
load_thredbo();
break;
case 6:
Utils.WriteSettings(MainPhone.this,""String_Node_Str"",""String_Node_Str"");
load_selwyn();
break;
case 7:
Utils.WriteSettings(MainPhone.this,""String_Node_Str"",""String_Node_Str"");
load_charlotte();
break;
case 8:
Utils.WriteSettings(MainPhone.this,""String_Node_Str"",""String_Node_Str"");
load_lakemountain();
break;
}
}
 catch (IOException e) {
e.printStackTrace();
}
MainPhone.this.setTitle(app_title);
}"
45403,"@Override public boolean onOptionsItemSelected(MenuItem item){
switch (item.getItemId()) {
case R.id.menu1:
    tracker.trackEvent(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",0);
  Dialog selectView=new AlertDialog.Builder(MainPhone.this).setTitle(R.string.changeresort).setItems(R.array.resort_options,new DialogInterface.OnClickListener(){
    public void onClick(    DialogInterface dialog,    int which){
      tracker.trackEvent(""String_Node_Str"",resorts[which],""String_Node_Str"",0);
      app_title=getString(R.string.app_name) + ""String_Node_Str"" + resorts[which];
      try {
switch (which) {
case 0:
          Utils.WriteSettings(MainPhone.this,""String_Node_Str"",""String_Node_Str"");
        load_mtbuller();
      break;
case 1:
    Utils.WriteSettings(MainPhone.this,""String_Node_Str"",""String_Node_Str"");
  load_mthotham();
break;
case 2:
Utils.WriteSettings(MainPhone.this,""String_Node_Str"",""String_Node_Str"");
load_fallscreek();
break;
case 3:
Utils.WriteSettings(MainPhone.this,""String_Node_Str"",""String_Node_Str"");
load_bawbaw();
break;
case 4:
Utils.WriteSettings(MainPhone.this,""String_Node_Str"",""String_Node_Str"");
load_perisher();
break;
case 5:
Utils.WriteSettings(MainPhone.this,""String_Node_Str"",""String_Node_Str"");
load_thredbo();
break;
case 6:
Utils.WriteSettings(MainPhone.this,""String_Node_Str"",""String_Node_Str"");
load_selwyn();
case 7:
Utils.WriteSettings(MainPhone.this,""String_Node_Str"",""String_Node_Str"");
load_charlotte();
break;
case 8:
Utils.WriteSettings(MainPhone.this,""String_Node_Str"",""String_Node_Str"");
load_lakemountain();
break;
}
}
 catch (IOException e) {
e.printStackTrace();
}
MainPhone.this.setTitle(app_title);
}
}
).setNegativeButton(R.string.close,null).create();
selectView.show();
return true;
case R.id.menu2:
tracker.trackEvent(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",0);
webview.reload();
return true;
case R.id.menu3:
tracker.trackEvent(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",0);
Utils.About(this);
return true;
}
return false;
}","@Override public boolean onOptionsItemSelected(MenuItem item){
switch (item.getItemId()) {
case R.id.menu1:
    tracker.trackEvent(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",0);
  Dialog selectView=new AlertDialog.Builder(MainPhone.this).setTitle(R.string.changeresort).setItems(R.array.resort_options,new DialogInterface.OnClickListener(){
    public void onClick(    DialogInterface dialog,    int which){
      tracker.trackEvent(""String_Node_Str"",resorts[which],""String_Node_Str"",0);
      app_title=getString(R.string.app_name) + ""String_Node_Str"" + resorts[which];
      try {
switch (which) {
case 0:
          Utils.WriteSettings(MainPhone.this,""String_Node_Str"",""String_Node_Str"");
        load_mtbuller();
      break;
case 1:
    Utils.WriteSettings(MainPhone.this,""String_Node_Str"",""String_Node_Str"");
  load_mthotham();
break;
case 2:
Utils.WriteSettings(MainPhone.this,""String_Node_Str"",""String_Node_Str"");
load_fallscreek();
break;
case 3:
Utils.WriteSettings(MainPhone.this,""String_Node_Str"",""String_Node_Str"");
load_bawbaw();
break;
case 4:
Utils.WriteSettings(MainPhone.this,""String_Node_Str"",""String_Node_Str"");
load_perisher();
break;
case 5:
Utils.WriteSettings(MainPhone.this,""String_Node_Str"",""String_Node_Str"");
load_thredbo();
break;
case 6:
Utils.WriteSettings(MainPhone.this,""String_Node_Str"",""String_Node_Str"");
load_selwyn();
break;
case 7:
Utils.WriteSettings(MainPhone.this,""String_Node_Str"",""String_Node_Str"");
load_charlotte();
break;
case 8:
Utils.WriteSettings(MainPhone.this,""String_Node_Str"",""String_Node_Str"");
load_lakemountain();
break;
}
}
 catch (IOException e) {
e.printStackTrace();
}
MainPhone.this.setTitle(app_title);
}
}
).setNegativeButton(R.string.close,null).create();
selectView.show();
return true;
case R.id.menu2:
tracker.trackEvent(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",0);
webview.reload();
return true;
case R.id.menu3:
tracker.trackEvent(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",0);
Utils.About(this);
return true;
}
return false;
}"
45404,"public void onPlayerQuit(PlayerQuitEvent event){
  Player p=event.getPlayer();
  unregisterPlayerVotes(p);
}","public void onPlayerQuit(PlayerQuitEvent event){
}"
45405,"public void sync(World world,Server s){
  if (!this.yes.isEmpty()) {
    for (    Player item : this.yes) {
      if (!this.all.contains(item)) {
        this.yes.remove(item);
      }
 else {
      }
    }
  }
  if (!this.no.isEmpty()) {
    for (    Player item : this.no) {
      if (!this.all.contains(item)) {
        this.no.remove(item);
      }
 else {
      }
    }
  }
}","public void sync(World world,Server s){
  List<Player> delthis=s.matchPlayer(""String_Node_Str"");
  delthis.clear();
  if (!this.yes.isEmpty()) {
    for (    Player item : this.yes) {
      if (!this.all.contains(item)) {
        delthis.add(item);
      }
    }
    for (    Player item : delthis) {
      this.yes.remove(item);
    }
    delthis.clear();
  }
  if (!this.no.isEmpty()) {
    for (    Player item : this.no) {
      if (!this.all.contains(item)) {
        delthis.add(item);
      }
 else {
      }
    }
    for (    Player item : delthis) {
      this.no.remove(item);
    }
    delthis.clear();
  }
}"
45406,"@Override protected void onNewIntent(final Intent intent){
  super.onNewIntent(intent);
  ShoppingListItem shoppingListItem=(ShoppingListItem)intent.getParcelableExtra(""String_Node_Str"");
  if (shoppingListItem != null) {
    toaster(""String_Node_Str"" + shoppingListItem.toString());
    items.add(shoppingListItem);
    onContentChanged();
  }
 else {
  }
}","@Override protected void onNewIntent(final Intent intent){
  ShoppingListItem shoppingListItem=(ShoppingListItem)intent.getParcelableExtra(""String_Node_Str"");
  if (shoppingListItem != null) {
    toaster(""String_Node_Str"" + shoppingListItem.toString());
    myListAdapter.addItem(shoppingListItem);
  }
 else {
  }
}"
45407,"private void configureList(){
  LayoutInflater inflater=(LayoutInflater)getSystemService(LAYOUT_INFLATER_SERVICE);
  if (inflater != null) {
    ListView.FixedViewInfo fvi=getListView().new FixedViewInfo();
    fvi.data=null;
    fvi.isSelectable=false;
    fvi.view=inflater.inflate(R.layout.shopping_list_header,null);
    ArrayList<ListView.FixedViewInfo> footers=new ArrayList<ListView.FixedViewInfo>();
    ArrayList<ListView.FixedViewInfo> headers=new ArrayList<ListView.FixedViewInfo>();
    headers.add(fvi);
    adapter=new HeaderViewListAdapter(headers,footers,new MyListAdapter(items,ShoppingListActivity.this));
  }
 else {
    Toast.makeText(this,""String_Node_Str"",Toast.LENGTH_SHORT).show();
    adapter=new MyListAdapter(items,ShoppingListActivity.this);
  }
  setListAdapter(adapter);
  ListView listView=getListView();
  listView.setTextFilterEnabled(true);
  listView.setOnItemClickListener(new AdapterView.OnItemClickListener(){
    @Override public void onItemClick(    final AdapterView<?> adapterView,    final View view,    final int i,    final long l){
      Toast.makeText(getApplicationContext(),adapter.getItem(i).toString(),Toast.LENGTH_SHORT).show();
    }
  }
);
}","private void configureList(){
  LayoutInflater inflater=(LayoutInflater)getSystemService(LAYOUT_INFLATER_SERVICE);
  myListAdapter=new MyListAdapter(items,ShoppingListActivity.this);
  if (inflater != null) {
    ListView.FixedViewInfo fvi=getListView().new FixedViewInfo();
    fvi.data=null;
    fvi.isSelectable=false;
    fvi.view=inflater.inflate(R.layout.shopping_list_header,null);
    ArrayList<ListView.FixedViewInfo> footers=new ArrayList<ListView.FixedViewInfo>();
    ArrayList<ListView.FixedViewInfo> headers=new ArrayList<ListView.FixedViewInfo>();
    headers.add(fvi);
    adapter=new HeaderViewListAdapter(headers,footers,myListAdapter);
  }
 else {
    Toast.makeText(this,""String_Node_Str"",Toast.LENGTH_SHORT).show();
    adapter=myListAdapter;
  }
  setListAdapter(adapter);
  ListView listView=getListView();
  listView.setTextFilterEnabled(true);
  listView.setOnItemClickListener(new AdapterView.OnItemClickListener(){
    @Override public void onItemClick(    final AdapterView<?> adapterView,    final View view,    final int i,    final long l){
      Toast.makeText(getApplicationContext(),adapter.getItem(i).toString(),Toast.LENGTH_SHORT).show();
    }
  }
);
}"
45408,"@Override protected void onNewIntent(final Intent intent){
  super.onNewIntent(intent);
  toaster(""String_Node_Str"" + intent.getStringExtra(""String_Node_Str""));
}","@Override protected void onNewIntent(final Intent intent){
  super.onNewIntent(intent);
  ShoppingListItem shoppingListItem=(ShoppingListItem)intent.getParcelableExtra(""String_Node_Str"");
  toaster(""String_Node_Str"" + shoppingListItem.toString());
}"
45409,"private boolean toaster(String message){
  Toast.makeText(this,message,Toast.LENGTH_SHORT).show();
  return true;
}","private boolean toaster(String message){
  Toast.makeText(this,message,Toast.LENGTH_LONG).show();
  return true;
}"
45410,"@Override protected void onCreate(final Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.shopping_list_item);
  final ShoppingListItem shoppingListItem=new ShoppingListItem();
  List<String> items=new ArrayList<String>();
  items.add(""String_Node_Str"");
  items.add(""String_Node_Str"");
  items.add(""String_Node_Str"");
  items.add(""String_Node_Str"");
  items.add(""String_Node_Str"");
  ArrayAdapter<String> itemsAdapter=new ArrayAdapter<String>(ShoppingListItemActivity.this,android.R.layout.simple_dropdown_item_1line,items);
  AutoCompleteTextView itemNameACTV=(AutoCompleteTextView)findViewById(R.id.shopping_list_item_actv);
  itemNameACTV.setAdapter(itemsAdapter);
  itemNameACTV.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener(){
    @Override public void onItemSelected(    final AdapterView<?> adapterView,    final View view,    final int i,    final long l){
      shoppingListItem.name=(String)adapterView.getItemAtPosition(i);
    }
    @Override public void onNothingSelected(    final AdapterView<?> adapterView){
    }
  }
);
  Button button=(Button)findViewById(R.id.shopping_list_item_add_button);
  button.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    final View view){
      EditText quantityText=(EditText)findViewById(R.id.shopping_list_item_qty_editText);
      shoppingListItem.quantity=Integer.parseInt(quantityText.getText().toString());
      EditText costText=(EditText)findViewById(R.id.shopping_list_item_cost_editText);
      shoppingListItem.cost=Float.parseFloat(costText.getText().toString());
      CheckBox saveItemCheckBox=(CheckBox)findViewById(R.id.shopping_list_item_save_item);
      shoppingListItem.save=saveItemCheckBox.isChecked();
      finish();
      Intent intent=new Intent(ShoppingListItemActivity.this,ShoppingListActivity.class);
      intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
      Bundle bundle=new Bundle();
      bundle.putString(""String_Node_Str"",shoppingListItem.name);
      bundle.putFloat(""String_Node_Str"",shoppingListItem.cost);
      bundle.putFloat(""String_Node_Str"",shoppingListItem.quantity);
      bundle.putBoolean(""String_Node_Str"",shoppingListItem.save);
      intent.putExtras(bundle);
      startActivity(intent);
    }
  }
);
}","@Override protected void onCreate(final Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.shopping_list_item);
  final ShoppingListItem shoppingListItem=new ShoppingListItem();
  final AutoCompleteTextView itemNameACTV=createItemNameDropDown();
  createAddButton(shoppingListItem,itemNameACTV);
}"
45411,"@Override public void onClick(final View view){
  EditText quantityText=(EditText)findViewById(R.id.shopping_list_item_qty_editText);
  shoppingListItem.quantity=Integer.parseInt(quantityText.getText().toString());
  EditText costText=(EditText)findViewById(R.id.shopping_list_item_cost_editText);
  shoppingListItem.cost=Float.parseFloat(costText.getText().toString());
  CheckBox saveItemCheckBox=(CheckBox)findViewById(R.id.shopping_list_item_save_item);
  shoppingListItem.save=saveItemCheckBox.isChecked();
  finish();
  Intent intent=new Intent(ShoppingListItemActivity.this,ShoppingListActivity.class);
  intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
  Bundle bundle=new Bundle();
  bundle.putString(""String_Node_Str"",shoppingListItem.name);
  bundle.putFloat(""String_Node_Str"",shoppingListItem.cost);
  bundle.putFloat(""String_Node_Str"",shoppingListItem.quantity);
  bundle.putBoolean(""String_Node_Str"",shoppingListItem.save);
  intent.putExtras(bundle);
  startActivity(intent);
}","@Override public void onClick(final View view){
  shoppingListItem.quantity=Integer.parseInt(editTextDataRetriever.getText(ShoppingListItemActivity.this,R.id.shopping_list_item_qty_editText));
  shoppingListItem.cost=Float.parseFloat(editTextDataRetriever.getText(ShoppingListItemActivity.this,R.id.shopping_list_item_cost_editText));
  shoppingListItem.save=editTextDataRetriever.<CheckBox>findView(ShoppingListItemActivity.this,R.id.shopping_list_item_save_item).isChecked();
  shoppingListItem.name=itemNameACTV.getEditableText().toString();
  startShoppingListActivity(shoppingListItem);
}"
45412,"public void writeExcel(LandingZone landingZone,Sheet sh,Workbook wb){
  int i=0;
  for (  Clan clan : landingZone.getClanList()) {
    Map<Vehicle,TankPopulation> clanTankPopulation=new HashMap<Vehicle,TankPopulation>();
    Row clanRow=sh.createRow(i);
    Cell clanCell=clanRow.createCell(0);
    clanCell.setCellValue(clan.getName() + ""String_Node_Str"" + calculateLandingZoneNames(clan.getConcurrentBattles())+ ""String_Node_Str"");
    i++;
    for (    ClanMember clanMember : clan.getClanMembers()) {
      boolean topUsFound=false;
      boolean topGerFound=false;
      boolean topUssrFound=false;
      if (clanMember.getMemberTanks().isEmpty() == false) {
        Row memberRow=sh.createRow(i);
        Cell memberCell=memberRow.createCell(1);
        memberCell.setCellValue(clanMember.getName() + ""String_Node_Str"" + clanMember.getRole()+ ""String_Node_Str"");
        boolean firstTime=true;
        Collections.sort(clanMember.getMemberTanks());
        for (        MemberTank memberTank : clanMember.getMemberTanks()) {
          if (memberTank.getVehicle().getTier() >= 9 || (Clazz.SPG.equals(memberTank.getVehicle().getClazz())) && memberTank.getVehicle().getTier() >= 6) {
            TankPopulation tankPopulation=null;
            if ((Nation.US.equals(memberTank.getVehicle().getNation()) && topUsFound == false) || (Nation.GER.equals(memberTank.getVehicle().getNation()) && topGerFound == false) || (Nation.USSR.equals(memberTank.getVehicle().getNation()) && topUssrFound == false)) {
              tankPopulation=clanTankPopulation.get(memberTank.getVehicle());
              if (tankPopulation == null) {
                tankPopulation=new TankPopulation();
              }
              tankPopulation.setTopTank(tankPopulation.getTopTank() + 1);
              if (Nation.US.equals(memberTank.getVehicle().getNation())) {
                topUsFound=true;
              }
 else               if (Nation.GER.equals(memberTank.getVehicle().getNation())) {
                topGerFound=true;
              }
 else               if (Nation.USSR.equals(memberTank.getVehicle().getNation())) {
                topUssrFound=true;
              }
              clanTankPopulation.put(memberTank.getVehicle(),tankPopulation);
            }
 else {
              tankPopulation=clanTankPopulation.get(memberTank.getVehicle());
              if (tankPopulation == null) {
                tankPopulation=new TankPopulation();
              }
              tankPopulation.setAlternativeTank(tankPopulation.getAlternativeTank() + 1);
              clanTankPopulation.put(memberTank.getVehicle(),tankPopulation);
            }
          }
          if (firstTime == true) {
            CellStyle style=wb.createCellStyle();
            style.setFillBackgroundColor(IndexedColors.RED.getIndex());
            Cell tanksCell=memberRow.createCell(2);
            tanksCell.setCellValue(memberTank.getVehicle().getName());
            tanksCell.setCellStyle(style);
            Cell battlesCell=memberRow.createCell(3);
            battlesCell.setCellValue(memberTank.getBattles());
            Cell victoriesCell=memberRow.createCell(4);
            victoriesCell.setCellValue(memberTank.getVictories());
            Cell porcentCell=memberRow.createCell(5,Cell.CELL_TYPE_NUMERIC);
            Double vict=Double.valueOf(memberTank.getVictories().replaceAll(""String_Node_Str"",""String_Node_Str""));
            Double batt=Double.valueOf(memberTank.getBattles().replaceAll(""String_Node_Str"",""String_Node_Str""));
            double porcent=(vict.doubleValue() / batt.doubleValue()) * 100;
            porcentCell.setCellValue(porcent);
            firstTime=false;
          }
 else {
            Row extraTankRow=sh.createRow(i);
            Cell extraTankCell=extraTankRow.createCell(2);
            extraTankCell.setCellValue(memberTank.getVehicle().getName());
            Cell extrabattlesCell=extraTankRow.createCell(3);
            extrabattlesCell.setCellValue(memberTank.getBattles());
            Cell extravictoriesCell=extraTankRow.createCell(4);
            extravictoriesCell.setCellValue(memberTank.getVictories());
            Cell extraporcentCell=extraTankRow.createCell(5,Cell.CELL_TYPE_NUMERIC);
            Double vict=Double.valueOf(memberTank.getVictories().replaceAll(""String_Node_Str"",""String_Node_Str""));
            Double batt=Double.valueOf(memberTank.getBattles().replaceAll(""String_Node_Str"",""String_Node_Str""));
            double porcent=(vict.doubleValue() / batt.doubleValue()) * 100;
            extraporcentCell.setCellValue(porcent);
          }
          i++;
        }
        firstTime=true;
      }
    }
    if (clanTankPopulation.isEmpty() == false) {
      ArrayList<Vehicle> orderedList=new ArrayList<Vehicle>(INTERESTED_VEHICLES);
      Collections.sort(orderedList,new VehicleOrderComparator());
      i++;
      Row tankPopulationRow=sh.createRow(i);
      int y=1;
      for (      Vehicle vehicle : orderedList) {
        Cell tankPopulation=tankPopulationRow.createCell(y);
        if (clanTankPopulation.get(vehicle) != null) {
          tankPopulation.setCellValue(vehicle.getName() + ""String_Node_Str"" + clanTankPopulation.get(vehicle).getTopTank()+ (clanTankPopulation.get(vehicle).getAlternativeTank() != 0 ? ""String_Node_Str"" + clanTankPopulation.get(vehicle).getAlternativeTank() + ""String_Node_Str"" : ""String_Node_Str""));
          y++;
        }
      }
      i++;
      i++;
    }
  }
}","public void writeExcel(LandingZone landingZone,Sheet sh,Workbook wb){
  int i=0;
  for (  Clan clan : landingZone.getClanList()) {
    Map<Vehicle,TankPopulation> clanTankPopulation=new HashMap<Vehicle,TankPopulation>();
    Row clanRow=sh.createRow(i);
    Cell clanCell=clanRow.createCell(0);
    clanCell.setCellValue(clan.getName() + ""String_Node_Str"" + calculateLandingZoneNames(clan.getConcurrentBattles())+ ""String_Node_Str"");
    i++;
    for (    ClanMember clanMember : clan.getClanMembers()) {
      boolean topUsFound=false;
      boolean topGerFound=false;
      boolean topUssrFound=false;
      if (clanMember.getMemberTanks().isEmpty() == false) {
        Row memberRow=sh.createRow(i);
        Cell memberCell=memberRow.createCell(1);
        memberCell.setCellValue(clanMember.getName() + ""String_Node_Str"" + clanMember.getRole()+ ""String_Node_Str"");
        boolean firstTime=true;
        Collections.sort(clanMember.getMemberTanks());
        for (        MemberTank memberTank : clanMember.getMemberTanks()) {
          if (memberTank.getVehicle().getTier() >= 8 || (Clazz.SPG.equals(memberTank.getVehicle().getClazz())) && memberTank.getVehicle().getTier() >= 6) {
            TankPopulation tankPopulation=null;
            if ((Nation.US.equals(memberTank.getVehicle().getNation()) && topUsFound == false) || (Nation.GER.equals(memberTank.getVehicle().getNation()) && topGerFound == false) || (Nation.USSR.equals(memberTank.getVehicle().getNation()) && topUssrFound == false)) {
              tankPopulation=clanTankPopulation.get(memberTank.getVehicle());
              if (tankPopulation == null) {
                tankPopulation=new TankPopulation();
              }
              tankPopulation.setTopTank(tankPopulation.getTopTank() + 1);
              if (Nation.US.equals(memberTank.getVehicle().getNation())) {
                topUsFound=true;
              }
 else               if (Nation.GER.equals(memberTank.getVehicle().getNation())) {
                topGerFound=true;
              }
 else               if (Nation.USSR.equals(memberTank.getVehicle().getNation())) {
                topUssrFound=true;
              }
              clanTankPopulation.put(memberTank.getVehicle(),tankPopulation);
            }
 else {
              tankPopulation=clanTankPopulation.get(memberTank.getVehicle());
              if (tankPopulation == null) {
                tankPopulation=new TankPopulation();
              }
              tankPopulation.setAlternativeTank(tankPopulation.getAlternativeTank() + 1);
              clanTankPopulation.put(memberTank.getVehicle(),tankPopulation);
            }
          }
          if (firstTime == true) {
            CellStyle style=wb.createCellStyle();
            style.setFillBackgroundColor(IndexedColors.RED.getIndex());
            Cell tanksCell=memberRow.createCell(2);
            tanksCell.setCellValue(memberTank.getVehicle().getName());
            tanksCell.setCellStyle(style);
            Cell battlesCell=memberRow.createCell(3);
            battlesCell.setCellValue(memberTank.getBattles());
            Cell victoriesCell=memberRow.createCell(4);
            victoriesCell.setCellValue(memberTank.getVictories());
            Cell porcentCell=memberRow.createCell(5,Cell.CELL_TYPE_NUMERIC);
            Double vict=Double.valueOf(memberTank.getVictories().replaceAll(""String_Node_Str"",""String_Node_Str""));
            Double batt=Double.valueOf(memberTank.getBattles().replaceAll(""String_Node_Str"",""String_Node_Str""));
            double porcent=(vict.doubleValue() / batt.doubleValue()) * 100;
            porcentCell.setCellValue(porcent);
            firstTime=false;
          }
 else {
            Row extraTankRow=sh.createRow(i);
            Cell extraTankCell=extraTankRow.createCell(2);
            extraTankCell.setCellValue(memberTank.getVehicle().getName());
            Cell extrabattlesCell=extraTankRow.createCell(3);
            extrabattlesCell.setCellValue(memberTank.getBattles());
            Cell extravictoriesCell=extraTankRow.createCell(4);
            extravictoriesCell.setCellValue(memberTank.getVictories());
            Cell extraporcentCell=extraTankRow.createCell(5,Cell.CELL_TYPE_NUMERIC);
            Double vict=Double.valueOf(memberTank.getVictories().replaceAll(""String_Node_Str"",""String_Node_Str""));
            Double batt=Double.valueOf(memberTank.getBattles().replaceAll(""String_Node_Str"",""String_Node_Str""));
            double percent=(vict.doubleValue() / batt.doubleValue()) * 100;
            extraporcentCell.setCellValue(percent);
          }
          i++;
        }
        firstTime=true;
      }
    }
    if (clanTankPopulation.isEmpty() == false) {
      ArrayList<Vehicle> orderedList=new ArrayList<Vehicle>(INTERESTED_VEHICLES);
      Collections.sort(orderedList,new VehicleOrderComparator());
      i++;
      Row tankPopulationRow=sh.createRow(i);
      int y=1;
      for (      Vehicle vehicle : orderedList) {
        Cell tankPopulation=tankPopulationRow.createCell(y);
        if (clanTankPopulation.get(vehicle) != null) {
          tankPopulation.setCellValue(vehicle.getName() + ""String_Node_Str"" + clanTankPopulation.get(vehicle).getTopTank()+ (clanTankPopulation.get(vehicle).getAlternativeTank() != 0 ? ""String_Node_Str"" + clanTankPopulation.get(vehicle).getAlternativeTank() + ""String_Node_Str"" : ""String_Node_Str""));
          y++;
        }
      }
      i++;
      i++;
    }
  }
}"
45413,"private Constants(){
  INTERESTED_VEHICLES.add(new Vehicle(""String_Node_Str"",6,Clazz.SPG,Nation.USSR,25));
  INTERESTED_VEHICLES.add(new Vehicle(""String_Node_Str"",6,Clazz.SPG,Nation.USSR,24));
  INTERESTED_VEHICLES.add(new Vehicle(""String_Node_Str"",7,Clazz.SPG,Nation.USSR,21));
  INTERESTED_VEHICLES.add(new Vehicle(""String_Node_Str"",8,Clazz.SPG,Nation.USSR,18));
  INTERESTED_VEHICLES.add(new Vehicle(""String_Node_Str"",10,Clazz.HEAVY,Nation.USSR,1));
  INTERESTED_VEHICLES.add(new Vehicle(""String_Node_Str"",9,Clazz.HEAVY,Nation.USSR,4));
  INTERESTED_VEHICLES.add(new Vehicle(""String_Node_Str"",9,Clazz.MED,Nation.USSR,7));
  INTERESTED_VEHICLES.add(new Vehicle(""String_Node_Str"",8,Clazz.MED,Nation.USSR,12));
  INTERESTED_VEHICLES.add(new Vehicle(""String_Node_Str"",9,Clazz.TD,Nation.USSR,10));
  INTERESTED_VEHICLES.add(new Vehicle(""String_Node_Str"",8,Clazz.TD,Nation.USSR,16));
  INTERESTED_VEHICLES.add(new Vehicle(""String_Node_Str"",6,Clazz.SPG,Nation.GER,26));
  INTERESTED_VEHICLES.add(new Vehicle(""String_Node_Str"",7,Clazz.SPG,Nation.GER,22));
  INTERESTED_VEHICLES.add(new Vehicle(""String_Node_Str"",8,Clazz.SPG,Nation.GER,19));
  INTERESTED_VEHICLES.add(new Vehicle(""String_Node_Str"",10,Clazz.HEAVY,Nation.GER,2));
  INTERESTED_VEHICLES.add(new Vehicle(""String_Node_Str"",9,Clazz.HEAVY,Nation.GER,5));
  INTERESTED_VEHICLES.add(new Vehicle(""String_Node_Str"",9,Clazz.MED,Nation.GER,8));
  INTERESTED_VEHICLES.add(new Vehicle(""String_Node_Str"",8,Clazz.MED,Nation.GER,13));
  INTERESTED_VEHICLES.add(new Vehicle(""String_Node_Str"",9,Clazz.TD,Nation.GER,11));
  INTERESTED_VEHICLES.add(new Vehicle(""String_Node_Str"",8,Clazz.TD,Nation.GER,16));
  INTERESTED_VEHICLES.add(new Vehicle(""String_Node_Str"",6,Clazz.SPG,Nation.US,27));
  INTERESTED_VEHICLES.add(new Vehicle(""String_Node_Str"",7,Clazz.SPG,Nation.US,23));
  INTERESTED_VEHICLES.add(new Vehicle(""String_Node_Str"",8,Clazz.SPG,Nation.US,20));
  INTERESTED_VEHICLES.add(new Vehicle(""String_Node_Str"",10,Clazz.HEAVY,Nation.US,3));
  INTERESTED_VEHICLES.add(new Vehicle(""String_Node_Str"",9,Clazz.HEAVY,Nation.US,6));
  INTERESTED_VEHICLES.add(new Vehicle(""String_Node_Str"",8,Clazz.HEAVY,Nation.US,14));
  INTERESTED_VEHICLES.add(new Vehicle(""String_Node_Str"",9,Clazz.MED,Nation.US,9));
  INTERESTED_VEHICLES.add(new Vehicle(""String_Node_Str"",8,Clazz.MED,Nation.US,15));
  landingZones.add(new LandingZone(""String_Node_Str"",""String_Node_Str"",Region.MED,19,""String_Node_Str"",new ArrayList<Clan>()));
  landingZones.add(new LandingZone(""String_Node_Str"",""String_Node_Str"",Region.MED,19,""String_Node_Str"",new ArrayList<Clan>()));
  landingZones.add(new LandingZone(""String_Node_Str"",""String_Node_Str"",Region.MED,19,""String_Node_Str"",new ArrayList<Clan>()));
  landingZones.add(new LandingZone(""String_Node_Str"",""String_Node_Str"",Region.MED,19,""String_Node_Str"",new ArrayList<Clan>()));
  landingZones.add(new LandingZone(""String_Node_Str"",""String_Node_Str"",Region.MED,19,""String_Node_Str"",new ArrayList<Clan>()));
  landingZones.add(new LandingZone(""String_Node_Str"",""String_Node_Str"",Region.MED,19,""String_Node_Str"",new ArrayList<Clan>()));
  landingZones.add(new LandingZone(""String_Node_Str"",""String_Node_Str"",Region.MED,19,""String_Node_Str"",new ArrayList<Clan>()));
  landingZones.add(new LandingZone(""String_Node_Str"",""String_Node_Str"",Region.MED,19,""String_Node_Str"",new ArrayList<Clan>()));
  landingZones.add(new LandingZone(""String_Node_Str"",""String_Node_Str"",Region.MED,18,""String_Node_Str"",new ArrayList<Clan>()));
  landingZones.add(new LandingZone(""String_Node_Str"",""String_Node_Str"",Region.MED,18,""String_Node_Str"",new ArrayList<Clan>()));
  landingZones.add(new LandingZone(""String_Node_Str"",""String_Node_Str"",Region.MED,18,""String_Node_Str"",new ArrayList<Clan>()));
  landingZones.add(new LandingZone(""String_Node_Str"",""String_Node_Str"",Region.MED,17,""String_Node_Str"",new ArrayList<Clan>()));
  landingZones.add(new LandingZone(""String_Node_Str"",""String_Node_Str"",Region.MED,18,""String_Node_Str"",new ArrayList<Clan>()));
  landingZones.add(new LandingZone(""String_Node_Str"",""String_Node_Str"",Region.MED,17,""String_Node_Str"",new ArrayList<Clan>()));
  landingZones.add(new LandingZone(""String_Node_Str"",""String_Node_Str"",Region.MED_EU,18,""String_Node_Str"",new ArrayList<Clan>()));
  landingZones.add(new LandingZone(""String_Node_Str"",""String_Node_Str"",Region.MED_EU,19,""String_Node_Str"",new ArrayList<Clan>()));
  landingZones.add(new LandingZone(""String_Node_Str"",""String_Node_Str"",Region.MED,19,""String_Node_Str"",new ArrayList<Clan>()));
  landingZones.add(new LandingZone(""String_Node_Str"",""String_Node_Str"",Region.MED,19,""String_Node_Str"",new ArrayList<Clan>()));
  landingZones.add(new LandingZone(""String_Node_Str"",""String_Node_Str"",Region.MED,17,""String_Node_Str"",new ArrayList<Clan>()));
  landingZones.add(new LandingZone(""String_Node_Str"",""String_Node_Str"",Region.EU,17,""String_Node_Str"",new ArrayList<Clan>()));
  landingZones.add(new LandingZone(""String_Node_Str"",""String_Node_Str"",Region.EU,17,""String_Node_Str"",new ArrayList<Clan>()));
  landingZones.add(new LandingZone(""String_Node_Str"",""String_Node_Str"",Region.EU,19,""String_Node_Str"",new ArrayList<Clan>()));
  landingZones.add(new LandingZone(""String_Node_Str"",""String_Node_Str"",Region.EU,19,""String_Node_Str"",new ArrayList<Clan>()));
  landingZones.add(new LandingZone(""String_Node_Str"",""String_Node_Str"",Region.EU,18,""String_Node_Str"",new ArrayList<Clan>()));
  landingZones.add(new LandingZone(""String_Node_Str"",""String_Node_Str"",Region.EU,18,""String_Node_Str"",new ArrayList<Clan>()));
  landingZones.add(new LandingZone(""String_Node_Str"",""String_Node_Str"",Region.EU,19,""String_Node_Str"",new ArrayList<Clan>()));
  landingZones.add(new LandingZone(""String_Node_Str"",""String_Node_Str"",Region.EU,19,""String_Node_Str"",new ArrayList<Clan>()));
  landingZones.add(new LandingZone(""String_Node_Str"",""String_Node_Str"",Region.EU,19,""String_Node_Str"",new ArrayList<Clan>()));
  landingZones.add(new LandingZone(""String_Node_Str"",""String_Node_Str"",Region.MED_EU,19,""String_Node_Str"",new ArrayList<Clan>()));
  for (  LandingZone landingZone : this.landingZones) {
    landingZoneMap.put(landingZone.getTag(),landingZone);
  }
}","private Constants(){
  INTERESTED_VEHICLES.add(new Vehicle(""String_Node_Str"",6,Clazz.SPG,Nation.USSR,25));
  INTERESTED_VEHICLES.add(new Vehicle(""String_Node_Str"",6,Clazz.SPG,Nation.USSR,24));
  INTERESTED_VEHICLES.add(new Vehicle(""String_Node_Str"",7,Clazz.SPG,Nation.USSR,21));
  INTERESTED_VEHICLES.add(new Vehicle(""String_Node_Str"",8,Clazz.SPG,Nation.USSR,18));
  INTERESTED_VEHICLES.add(new Vehicle(""String_Node_Str"",10,Clazz.HEAVY,Nation.USSR,1));
  INTERESTED_VEHICLES.add(new Vehicle(""String_Node_Str"",9,Clazz.HEAVY,Nation.USSR,4));
  INTERESTED_VEHICLES.add(new Vehicle(""String_Node_Str"",9,Clazz.HEAVY,Nation.USSR,29));
  INTERESTED_VEHICLES.add(new Vehicle(""String_Node_Str"",9,Clazz.HEAVY,Nation.USSR,31));
  INTERESTED_VEHICLES.add(new Vehicle(""String_Node_Str"",9,Clazz.MED,Nation.USSR,7));
  INTERESTED_VEHICLES.add(new Vehicle(""String_Node_Str"",8,Clazz.MED,Nation.USSR,12));
  INTERESTED_VEHICLES.add(new Vehicle(""String_Node_Str"",7,Clazz.MED,Nation.USSR,35));
  INTERESTED_VEHICLES.add(new Vehicle(""String_Node_Str"",9,Clazz.TD,Nation.USSR,10));
  INTERESTED_VEHICLES.add(new Vehicle(""String_Node_Str"",8,Clazz.TD,Nation.USSR,16));
  INTERESTED_VEHICLES.add(new Vehicle(""String_Node_Str"",7,Clazz.TD,Nation.USSR,33));
  INTERESTED_VEHICLES.add(new Vehicle(""String_Node_Str"",6,Clazz.SPG,Nation.GER,26));
  INTERESTED_VEHICLES.add(new Vehicle(""String_Node_Str"",7,Clazz.SPG,Nation.GER,22));
  INTERESTED_VEHICLES.add(new Vehicle(""String_Node_Str"",8,Clazz.SPG,Nation.GER,19));
  INTERESTED_VEHICLES.add(new Vehicle(""String_Node_Str"",10,Clazz.HEAVY,Nation.GER,2));
  INTERESTED_VEHICLES.add(new Vehicle(""String_Node_Str"",9,Clazz.HEAVY,Nation.GER,5));
  INTERESTED_VEHICLES.add(new Vehicle(""String_Node_Str"",8,Clazz.HEAVY,Nation.GER,28));
  INTERESTED_VEHICLES.add(new Vehicle(""String_Node_Str"",7,Clazz.HEAVY,Nation.GER,40));
  INTERESTED_VEHICLES.add(new Vehicle(""String_Node_Str"",9,Clazz.MED,Nation.GER,8));
  INTERESTED_VEHICLES.add(new Vehicle(""String_Node_Str"",8,Clazz.MED,Nation.GER,13));
  INTERESTED_VEHICLES.add(new Vehicle(""String_Node_Str"",7,Clazz.MED,Nation.GER,45));
  INTERESTED_VEHICLES.add(new Vehicle(""String_Node_Str"",9,Clazz.TD,Nation.GER,11));
  INTERESTED_VEHICLES.add(new Vehicle(""String_Node_Str"",8,Clazz.TD,Nation.GER,16));
  INTERESTED_VEHICLES.add(new Vehicle(""String_Node_Str"",7,Clazz.TD,Nation.GER,50));
  INTERESTED_VEHICLES.add(new Vehicle(""String_Node_Str"",6,Clazz.SPG,Nation.US,27));
  INTERESTED_VEHICLES.add(new Vehicle(""String_Node_Str"",7,Clazz.SPG,Nation.US,23));
  INTERESTED_VEHICLES.add(new Vehicle(""String_Node_Str"",8,Clazz.SPG,Nation.US,20));
  INTERESTED_VEHICLES.add(new Vehicle(""String_Node_Str"",10,Clazz.HEAVY,Nation.US,3));
  INTERESTED_VEHICLES.add(new Vehicle(""String_Node_Str"",9,Clazz.HEAVY,Nation.US,6));
  INTERESTED_VEHICLES.add(new Vehicle(""String_Node_Str"",8,Clazz.HEAVY,Nation.US,14));
  INTERESTED_VEHICLES.add(new Vehicle(""String_Node_Str"",7,Clazz.HEAVY,Nation.US,30));
  INTERESTED_VEHICLES.add(new Vehicle(""String_Node_Str"",9,Clazz.MED,Nation.US,9));
  INTERESTED_VEHICLES.add(new Vehicle(""String_Node_Str"",8,Clazz.MED,Nation.US,15));
  INTERESTED_VEHICLES.add(new Vehicle(""String_Node_Str"",7,Clazz.MED,Nation.US,40));
  landingZones.add(new LandingZone(""String_Node_Str"",""String_Node_Str"",Region.MED,19,""String_Node_Str"",new ArrayList<Clan>()));
  landingZones.add(new LandingZone(""String_Node_Str"",""String_Node_Str"",Region.MED,19,""String_Node_Str"",new ArrayList<Clan>()));
  landingZones.add(new LandingZone(""String_Node_Str"",""String_Node_Str"",Region.MED,19,""String_Node_Str"",new ArrayList<Clan>()));
  landingZones.add(new LandingZone(""String_Node_Str"",""String_Node_Str"",Region.MED,19,""String_Node_Str"",new ArrayList<Clan>()));
  landingZones.add(new LandingZone(""String_Node_Str"",""String_Node_Str"",Region.MED,19,""String_Node_Str"",new ArrayList<Clan>()));
  landingZones.add(new LandingZone(""String_Node_Str"",""String_Node_Str"",Region.MED,19,""String_Node_Str"",new ArrayList<Clan>()));
  landingZones.add(new LandingZone(""String_Node_Str"",""String_Node_Str"",Region.MED,19,""String_Node_Str"",new ArrayList<Clan>()));
  landingZones.add(new LandingZone(""String_Node_Str"",""String_Node_Str"",Region.MED,19,""String_Node_Str"",new ArrayList<Clan>()));
  landingZones.add(new LandingZone(""String_Node_Str"",""String_Node_Str"",Region.MED,18,""String_Node_Str"",new ArrayList<Clan>()));
  landingZones.add(new LandingZone(""String_Node_Str"",""String_Node_Str"",Region.MED,18,""String_Node_Str"",new ArrayList<Clan>()));
  landingZones.add(new LandingZone(""String_Node_Str"",""String_Node_Str"",Region.MED,18,""String_Node_Str"",new ArrayList<Clan>()));
  landingZones.add(new LandingZone(""String_Node_Str"",""String_Node_Str"",Region.MED,17,""String_Node_Str"",new ArrayList<Clan>()));
  landingZones.add(new LandingZone(""String_Node_Str"",""String_Node_Str"",Region.MED,18,""String_Node_Str"",new ArrayList<Clan>()));
  landingZones.add(new LandingZone(""String_Node_Str"",""String_Node_Str"",Region.MED,17,""String_Node_Str"",new ArrayList<Clan>()));
  landingZones.add(new LandingZone(""String_Node_Str"",""String_Node_Str"",Region.MED_EU,18,""String_Node_Str"",new ArrayList<Clan>()));
  landingZones.add(new LandingZone(""String_Node_Str"",""String_Node_Str"",Region.MED_EU,19,""String_Node_Str"",new ArrayList<Clan>()));
  landingZones.add(new LandingZone(""String_Node_Str"",""String_Node_Str"",Region.MED,19,""String_Node_Str"",new ArrayList<Clan>()));
  landingZones.add(new LandingZone(""String_Node_Str"",""String_Node_Str"",Region.MED,19,""String_Node_Str"",new ArrayList<Clan>()));
  landingZones.add(new LandingZone(""String_Node_Str"",""String_Node_Str"",Region.MED,17,""String_Node_Str"",new ArrayList<Clan>()));
  landingZones.add(new LandingZone(""String_Node_Str"",""String_Node_Str"",Region.EU,17,""String_Node_Str"",new ArrayList<Clan>()));
  landingZones.add(new LandingZone(""String_Node_Str"",""String_Node_Str"",Region.EU,17,""String_Node_Str"",new ArrayList<Clan>()));
  landingZones.add(new LandingZone(""String_Node_Str"",""String_Node_Str"",Region.EU,19,""String_Node_Str"",new ArrayList<Clan>()));
  landingZones.add(new LandingZone(""String_Node_Str"",""String_Node_Str"",Region.EU,19,""String_Node_Str"",new ArrayList<Clan>()));
  landingZones.add(new LandingZone(""String_Node_Str"",""String_Node_Str"",Region.EU,18,""String_Node_Str"",new ArrayList<Clan>()));
  landingZones.add(new LandingZone(""String_Node_Str"",""String_Node_Str"",Region.EU,18,""String_Node_Str"",new ArrayList<Clan>()));
  landingZones.add(new LandingZone(""String_Node_Str"",""String_Node_Str"",Region.EU,19,""String_Node_Str"",new ArrayList<Clan>()));
  landingZones.add(new LandingZone(""String_Node_Str"",""String_Node_Str"",Region.EU,19,""String_Node_Str"",new ArrayList<Clan>()));
  landingZones.add(new LandingZone(""String_Node_Str"",""String_Node_Str"",Region.EU,19,""String_Node_Str"",new ArrayList<Clan>()));
  landingZones.add(new LandingZone(""String_Node_Str"",""String_Node_Str"",Region.MED_EU,19,""String_Node_Str"",new ArrayList<Clan>()));
  for (  LandingZone landingZone : this.landingZones) {
    landingZoneMap.put(landingZone.getTag(),landingZone);
  }
}"
45414,"private void analyzeClan(){
  try {
    findMembers(clan);
  }
 catch (  Throwable t) {
    log.error(""String_Node_Str"" + clan.getName() + ""String_Node_Str""+ t.getMessage(),t);
  }
  for (  ClanMember clanMember : clan.getClanMembers()) {
    parseMemberDetails(clanMember);
  }
  Battle battle=new Battle();
  battle.setProvince(landingZone.getName());
  clan.getConcurrentBattles().add(battle);
  clanCache.put(clan.getName(),clan);
  findConcurrentBattles(clan);
}","private void analyzeClan(){
  try {
    findMembers(clan);
  }
 catch (  Throwable t) {
    log.error(""String_Node_Str"" + clan.getName() + ""String_Node_Str""+ t.getMessage(),t);
  }
  for (  ClanMember clanMember : clan.getClanMembers()) {
    parseMemberDetails(clanMember);
  }
  Battle battle=new Battle();
  battle.setProvince(landingZone.getName());
  clanCache.put(clan.getName(),clan);
  findConcurrentBattles(clan);
}"
45415,"private void findConcurrentBattles(Clan clan){
  HttpGet getConcurrentBattles=null;
  getConcurrentBattles=new HttpGet(""String_Node_Str"" + clan.getId() + ""String_Node_Str"");
  getConcurrentBattles.setHeader(""String_Node_Str"",""String_Node_Str"");
  getConcurrentBattles.setHeader(""String_Node_Str"",""String_Node_Str"");
  try {
    HttpResponse response=httpClient.execute(getConcurrentBattles);
    HttpEntity entity=response.getEntity();
    BufferedInputStream bis=new BufferedInputStream(entity.getContent());
    int length=0;
    byte[] buff=new byte[1024];
    StringBuffer sb=new StringBuffer(1024);
    while ((length=bis.read(buff)) != -1) {
      sb.append(new String(buff,0,length,""String_Node_Str""));
    }
    String result=sb.toString();
    log.debug(result);
    String provinceTagStart=""String_Node_Str"";
    String provinceTagEnd=""String_Node_Str"";
    int tagStart=0;
    while ((tagStart=result.indexOf(provinceTagStart,tagStart)) != -1) {
      int tagEnd=result.indexOf(provinceTagEnd,tagStart + provinceTagStart.length());
      String province=result.substring(tagStart + provinceTagStart.length(),tagEnd);
      String idTagStart=""String_Node_Str"";
      String idTagEnd=""String_Node_Str"";
      int idStartIndex=result.indexOf(idTagStart,tagEnd);
      int idEndIndex=result.indexOf(idTagEnd,idStartIndex + idTagStart.length());
      String id=result.substring(idStartIndex + idTagStart.length(),idEndIndex);
      String timeTagStart=""String_Node_Str"";
      String timeTagEnd=""String_Node_Str"";
      int timeStartIndex=result.indexOf(timeTagStart,tagEnd);
      int timeEndIndex=result.indexOf(timeTagEnd,timeStartIndex + timeTagStart.length());
      String time=result.substring(timeStartIndex + timeTagStart.length(),timeEndIndex);
      Battle battle=new Battle();
      battle.setProvince(province);
      battle.setDate(new Date((Double.valueOf(time)).longValue() * 1000));
      battle.setId(id);
      clan.getConcurrentBattles().add(battle);
      tagStart++;
    }
  }
 catch (  ClientProtocolException e) {
    log.error(e.getMessage(),e);
  }
catch (  IOException e) {
    log.error(e.getMessage(),e);
  }
}","private void findConcurrentBattles(Clan clan){
  HttpGet getConcurrentBattles=null;
  getConcurrentBattles=new HttpGet(""String_Node_Str"" + clan.getId() + ""String_Node_Str"");
  getConcurrentBattles.setHeader(""String_Node_Str"",""String_Node_Str"");
  getConcurrentBattles.setHeader(""String_Node_Str"",""String_Node_Str"");
  try {
    HttpResponse response=httpClient.execute(getConcurrentBattles);
    HttpEntity entity=response.getEntity();
    BufferedInputStream bis=new BufferedInputStream(entity.getContent());
    int length=0;
    byte[] buff=new byte[1024];
    StringBuffer sb=new StringBuffer(1024);
    while ((length=bis.read(buff)) != -1) {
      sb.append(new String(buff,0,length,""String_Node_Str""));
    }
    String result=sb.toString();
    log.debug(result);
    String provinceTagStart=""String_Node_Str"";
    String provinceTagEnd=""String_Node_Str"";
    int tagStart=0;
    while ((tagStart=result.indexOf(provinceTagStart,tagStart)) != -1) {
      int tagEnd=result.indexOf(provinceTagEnd,tagStart + provinceTagStart.length());
      String province=result.substring(tagStart + provinceTagStart.length(),tagEnd);
      String idTagStart=""String_Node_Str"";
      String idTagEnd=""String_Node_Str"";
      int idStartIndex=result.indexOf(idTagStart,tagEnd);
      int idEndIndex=result.indexOf(idTagEnd,idStartIndex + idTagStart.length());
      String id=result.substring(idStartIndex + idTagStart.length(),idEndIndex);
      String timeTagStart=""String_Node_Str"";
      String timeTagEnd=""String_Node_Str"";
      int timeStartIndex=result.indexOf(timeTagStart,tagEnd);
      int timeEndIndex=result.indexOf(timeTagEnd,timeStartIndex + timeTagStart.length());
      String time=result.substring(timeStartIndex + timeTagStart.length(),timeEndIndex);
      Battle battle=new Battle();
      battle.setProvince(province);
      if (Integer.valueOf(time).equals(0)) {
        LandingZone landingZone=Constants.createInstance().landingZoneMap.get(battle.getProvince());
        if (landingZone != null) {
          String offset=System.getProperty(""String_Node_Str"",""String_Node_Str"");
          int gmt_offset=Integer.valueOf(offset);
          Calendar cal=Calendar.getInstance();
          cal.set(Calendar.HOUR_OF_DAY,Integer.valueOf(landingZone.getBattleStart()).intValue() + gmt_offset);
          cal.set(Calendar.MINUTE,0);
          cal.set(Calendar.SECOND,0);
          battle.setDate(cal.getTime());
        }
      }
 else {
        battle.setDate(new Date((Double.valueOf(time)).longValue() * 1000));
      }
      battle.setId(id);
      clan.getConcurrentBattles().add(battle);
      tagStart++;
    }
  }
 catch (  ClientProtocolException e) {
    log.error(e.getMessage(),e);
  }
catch (  IOException e) {
    log.error(e.getMessage(),e);
  }
}"
45416,"private SharedData asyncDoPut(WonderlandClientID senderID,String key,SharedData value){
  MapTaskRunner async=getTaskRunner();
  if (async != null) {
    async.getTasks().add(new PutTask(senderID,key,value));
    return get(key);
  }
  return syncDoPut(senderID,key,value);
}","private SharedData asyncDoPut(WonderlandClientID senderID,String key,SharedData value){
  MapTaskRunner async=getTaskRunner();
  if (async != null) {
    async.getTasks().add(new PutTask(senderID,key,value));
    return get(key);
  }
  return syncDoPut(senderID,key,value,true);
}"
45417,"private SharedData syncDoPut(WonderlandClientID senderID,String key,SharedData value){
  SharedData current=super.put(key,value);
  if (value.equals(current)) {
    return value;
  }
  version++;
  CellMessage message=ChangeValueMessage.put(getName(),version,key,value);
  channelRef.get().sendAll(senderID,message);
  return current;
}","private SharedData syncDoPut(WonderlandClientID senderID,String key,SharedData value,boolean notifyIfEqual){
  version++;
  SharedData current=super.put(key,value);
  if (!notifyIfEqual && value.equals(current)) {
    return value;
  }
  CellMessage message=ChangeValueMessage.put(getName(),version,key,value);
  channelRef.get().sendAll(senderID,message);
  return current;
}"
45418,"@Override public boolean isEmpty(){
  return keySet().isEmpty();
}","@Override public boolean isEmpty(){
  MapTaskRunner async=getTaskRunner();
  if (async != null) {
    Set<String> initial=new LinkedHashSet<String>(super.keySet());
    async.adjustKeySet(initial);
    return initial.isEmpty();
  }
 else {
    return super.isEmpty();
  }
}"
45419,"private void addRevalidationListener(ViewCellCacheRevalidationListener listener){
  revalidationsListeners.add(listener);
}","void addRevalidationListener(ViewCellCacheRevalidationListener listener){
  revalidationsListeners.add(listener);
}"
45420,"private void removeRevalidationListener(ViewCellCacheRevalidationListener listener){
  revalidationsListeners.remove(listener);
}","void removeRevalidationListener(ViewCellCacheRevalidationListener listener){
  revalidationsListeners.remove(listener);
}"
45421,"/** 
 * Create a scanned classloader that scans the given urls.
 * @param urls the urls to scan
 * @param parent the parent classlaoder to delegate to
 */
public ScannedClassLoader(URL[] urls,ClassLoader parent){
  super(urls,parent);
  Set<URL> urlSet=new HashSet<URL>(Arrays.asList(urls));
  while (parent != null && !(parent instanceof ScannedClassLoader)) {
    if (parent instanceof URLClassLoader) {
      urlSet.addAll(Arrays.asList(((URLClassLoader)parent).getURLs()));
    }
    parent=parent.getParent();
  }
  createDB(urlSet.toArray(new URL[urlSet.size()]));
}","/** 
 * Create a scanned classloader that scans the given urls.
 * @param urls the urls to scan
 * @param parent the parent classlaoder to delegate to
 */
public ScannedClassLoader(URL[] urls,ClassLoader parent){
  super(urls,parent);
  createDB(urls);
}"
45422,"@Override protected void addDefaultComponents(Entity entity,Node rootNode){
  super.addDefaultComponents(entity,rootNode);
  applyTransparency(TransparencyMode.DEFAULT,transparency);
}","@Override protected void addDefaultComponents(Entity entity,Node rootNode){
  super.addDefaultComponents(entity,rootNode);
  if (transparency != null) {
    applyTransparency(TransparencyMode.DEFAULT,transparency);
  }
}"
45423,"/** 
 * {@inheritDoc}
 * @Override public String toString() { return getName(); } / Update all views with the current state of the window.
 */
protected void updateViews(){
  if (!isVisibleApp() && ((changeMask & (CHANGED_VISIBLE_APP | CHANGED_SIZE)) == 0)) {
    return;
  }
  logger.info(""String_Node_Str"" + ""String_Node_Str"" + getName());
  logger.info(""String_Node_Str"" + Integer.toHexString(changeMask));
  LinkedList<View2D> viewsCopy;
synchronized (this) {
    viewsCopy=(LinkedList<View2D>)views.clone();
  }
  for (  View2D view : viewsCopy) {
    if ((changeMask & CHANGED_TYPE) != 0) {
      View2D.Type viewType;
switch (type) {
case UNKNOWN:
        viewType=View2D.Type.UNKNOWN;
      break;
case PRIMARY:
    viewType=View2D.Type.PRIMARY;
  break;
case POPUP:
viewType=View2D.Type.POPUP;
break;
case SECONDARY:
viewType=View2D.Type.SECONDARY;
break;
default :
throw new RuntimeException(""String_Node_Str"" + this + ""String_Node_Str""+ type);
}
view.setType(viewType,false);
}
if ((changeMask & CHANGED_PARENT) != 0) {
View2D parentView=null;
if (parent != null) {
parentView=parent.getView(view.getDisplayer());
}
view.setParent(parentView,false);
}
if ((changeMask & CHANGED_OFFSET) != 0) {
view.setOffset(offset,false);
view.setPixelOffset(pixelOffset,false);
}
if ((changeMask & CHANGED_VISIBLE_APP) != 0) {
view.setVisibleApp(visibleApp,false);
}
if ((changeMask & CHANGED_SIZE) != 0) {
updateTexture();
view.setSizeApp(size,false);
}
if ((changeMask & CHANGED_DECORATED) != 0) {
view.setDecorated(decorated,false);
}
if ((changeMask & CHANGED_TITLE) != 0) {
view.setTitle(title,false);
}
if ((changeMask & CHANGED_USER_RESIZABLE) != 0) {
view.setUserResizable(userResizable,false);
}
if ((changeMask & CHANGED_STACK) != 0) {
view.stackChanged(false);
}
if ((changeMask & CHANGED_USER_TRANSFORM_CELL) != 0 && view instanceof View2DCell) {
if (userTransformCell != null) {
((View2DCell)view).setUserTransformCellLocal(userTransformCell);
}
}
view.update();
}
logger.info(""String_Node_Str"" + getName());
changeMask=0;
}","/** 
 * {@inheritDoc}
 * @Override public String toString() { return getName(); } / Update all views with the current state of the window.
 */
protected void updateViews(){
  if (!isVisibleApp() && ((changeMask & (CHANGED_VISIBLE_APP | CHANGED_SIZE)) == 0)) {
    return;
  }
  logger.info(""String_Node_Str"" + ""String_Node_Str"" + getName());
  logger.info(""String_Node_Str"" + Integer.toHexString(changeMask));
  LinkedList<View2D> viewsCopy;
synchronized (this) {
    viewsCopy=(LinkedList<View2D>)views.clone();
  }
  for (  View2D view : viewsCopy) {
    if ((changeMask & CHANGED_TYPE) != 0) {
      View2D.Type viewType;
switch (type) {
case UNKNOWN:
        viewType=View2D.Type.UNKNOWN;
      break;
case PRIMARY:
    viewType=View2D.Type.PRIMARY;
  break;
case POPUP:
viewType=View2D.Type.POPUP;
break;
case SECONDARY:
viewType=View2D.Type.SECONDARY;
break;
default :
throw new RuntimeException(""String_Node_Str"" + this + ""String_Node_Str""+ type);
}
view.setType(viewType,false);
}
if ((changeMask & CHANGED_PARENT) != 0) {
View2D parentView=null;
if (parent != null) {
parentView=parent.getView(view.getDisplayer());
}
view.setParent(parentView,false);
}
if ((changeMask & CHANGED_OFFSET) != 0) {
view.setOffset(offset,false);
view.setPixelOffset(pixelOffset,false);
}
if ((changeMask & CHANGED_VISIBLE_APP) != 0) {
view.setVisibleApp(visibleApp,false);
}
if ((changeMask & CHANGED_SIZE) != 0) {
updateTexture();
view.setSizeApp(size,false);
}
if ((changeMask & CHANGED_DECORATED) != 0) {
view.setDecorated(decorated,false);
}
if ((changeMask & CHANGED_TITLE) != 0) {
view.setTitle(title,false);
}
if ((changeMask & CHANGED_USER_RESIZABLE) != 0) {
view.setUserResizable(userResizable,false);
}
if ((changeMask & CHANGED_STACK) != 0) {
view.stackChanged(false);
}
if ((changeMask & CHANGED_USER_TRANSFORM_CELL) != 0 && view instanceof View2DCell) {
if (userTransformCell != null) {
((View2DCell)view).setUserTransformCellLocal(userTransformCell);
}
}
view.update();
view.updateFrame();
}
logger.info(""String_Node_Str"" + getName());
changeMask=0;
}"
45424,"/** 
 * {@inheritDoc} 
 */
public void updateFrame(){
  for (  FrameChange frameChg : frameChanges) {
switch (frameChg) {
case ATTACH_FRAME:
      attachFrame();
    break;
case DETACH_FRAME:
  detachFrame();
break;
case REATTACH_FRAME:
reattachFrame();
break;
case UPDATE_TITLE:
frameUpdateTitle();
break;
case UPDATE_USER_RESIZABLE:
frameUpdateUserResizable();
break;
}
}
frameChanges.clear();
frameUpdate();
}","/** 
 * {@inheritDoc} 
 */
public void updateFrame(){
  if (inCleanup) {
    return;
  }
  for (  FrameChange frameChg : frameChanges) {
switch (frameChg) {
case ATTACH_FRAME:
      attachFrame();
    break;
case DETACH_FRAME:
  detachFrame();
break;
case REATTACH_FRAME:
reattachFrame();
break;
case UPDATE_TITLE:
frameUpdateTitle();
break;
case UPDATE_USER_RESIZABLE:
frameUpdateUserResizable();
break;
}
}
frameChanges.clear();
frameUpdate();
}"
45425,"protected void componentResized(final HUDComponent2D component){
  if (logger.isLoggable(Level.FINEST)) {
    logger.finest(""String_Node_Str"" + component);
  }
  final HUDComponentState state=(HUDComponentState)hudStateMap.get(component);
  if (state == null) {
    return;
  }
  final HUDView2D view=state.getView();
  if (view != null) {
    view.setSizeApp(component.getSize());
  }
}","protected void componentResized(final HUDComponent2D component){
  if (logger.isLoggable(Level.FINEST)) {
    logger.finest(""String_Node_Str"" + component);
  }
  final HUDComponentState state=(HUDComponentState)hudStateMap.get(component);
  if (state == null) {
    return;
  }
  final HUDView2D view=state.getView();
  if (view != null) {
    view.setSizeApp(component.getSize());
    component.setLocation(view.getLocation());
  }
}"
45426,"public static Set<GroupDTO> getGroupsForUser(String baseUrl,String userId,boolean members,CredentialManager cm) throws IOException, JAXBException {
  String urlStr=""String_Node_Str"" + members;
  urlStr+=""String_Node_Str"" + userId;
  return getGroups(baseUrl,urlStr,cm);
}","public static Set<GroupDTO> getGroupsForUser(String baseUrl,String userId,boolean members,CredentialManager cm) throws IOException, JAXBException {
  String urlStr=""String_Node_Str"" + members;
  urlStr+=""String_Node_Str"" + URLEncoder.encode(userId,""String_Node_Str"");
  return getGroups(baseUrl,urlStr,cm);
}"
45427,"protected void loadServer(String serverURL,Vector3f translation,Quaternion look) throws IOException {
  LOGGER.info(""String_Node_Str"" + serverURL);
  logout();
  ServerSessionManager lm=LoginManager.getSessionManager(serverURL);
  WorldManager worldManager=ClientContextJME.getWorldManager();
  CollisionManager collisionManager=worldManager.getCollisionManager();
  CollisionSystem collisionSystem=collisionManager.loadCollisionSystem(JBulletDynamicCollisionSystem.class);
  JBulletDynamicCollisionSystem jBulletCollisionSystem=(JBulletDynamicCollisionSystem)collisionSystem;
  PhysicsManager physicsManager=worldManager.getPhysicsManager();
  JBulletPhysicsSystem jBulletPhysicsSystem=(JBulletPhysicsSystem)physicsManager.loadPhysicsSystem(JBulletPhysicsSystem.class,jBulletCollisionSystem);
  ClientContextJME.addCollisionSystem(lm,""String_Node_Str"",jBulletCollisionSystem);
  ClientContextJME.addPhysicsSystem(lm,""String_Node_Str"",jBulletPhysicsSystem);
  JMECollisionSystem jmeCollisionSystem=(JMECollisionSystem)collisionManager.loadCollisionSystem(JMECollisionSystem.class);
  ClientContextJME.addCollisionSystem(lm,""String_Node_Str"",jmeCollisionSystem);
  login.setInitialPosition(translation,look);
  try {
    curSession=lm.createSession(login);
  }
 catch (  LoginFailureException lfe) {
    IOException ioe=new IOException(""String_Node_Str"" + serverURL);
    ioe.initCause(lfe);
    throw ioe;
  }
  if (curSession == null) {
    LOGGER.log(Level.WARNING,""String_Node_Str"");
    return;
  }
  frame.connected(true);
  curSession.addSessionStatusListener(new SessionStatusListener(){
    public void sessionStatusChanged(    WonderlandSession session,    Status status){
      if (status == Status.DISCONNECTED) {
        ServerSessionManager serverSessionManager=session.getSessionManager();
        ClientContextJME.removeAllPhysicsSystems(serverSessionManager);
        ClientContextJME.removeAllCollisionSystems(serverSessionManager);
        boolean inLogout;
synchronized (JmeClientMain.this) {
          inLogout=loggingOut;
        }
        if (!inLogout) {
          final ServerSessionManager mgr=curSession.getSessionManager();
          LOGGER.warning(""String_Node_Str"");
          logout();
          if (getAutoReconnect()) {
            SwingUtilities.invokeLater(new Runnable(){
              public void run(){
                ReconnectDialog rf=new ReconnectDialog(JmeClientMain.this,mgr);
                rf.setVisible(true);
              }
            }
);
          }
 else {
            setAutoReconnect(true);
          }
        }
 else {
synchronized (JmeClientMain.this) {
            loggingOut=false;
          }
        }
      }
    }
  }
);
  LoginManager.setPrimary(lm);
  lm.setPrimarySession(curSession);
  frame.setServerURL(serverURL);
}","protected void loadServer(String serverURL,Vector3f translation,Quaternion look) throws IOException {
  LOGGER.info(""String_Node_Str"" + serverURL);
  logout();
  ServerSessionManager lm=LoginManager.getSessionManager(serverURL);
  WorldManager worldManager=ClientContextJME.getWorldManager();
  CollisionManager collisionManager=worldManager.getCollisionManager();
  CollisionSystem collisionSystem=collisionManager.loadCollisionSystem(JBulletDynamicCollisionSystem.class);
  JBulletDynamicCollisionSystem jBulletCollisionSystem=(JBulletDynamicCollisionSystem)collisionSystem;
  PhysicsManager physicsManager=worldManager.getPhysicsManager();
  JBulletPhysicsSystem jBulletPhysicsSystem=(JBulletPhysicsSystem)physicsManager.loadPhysicsSystem(JBulletPhysicsSystem.class,jBulletCollisionSystem);
  ClientContextJME.addCollisionSystem(lm,""String_Node_Str"",jBulletCollisionSystem);
  ClientContextJME.addPhysicsSystem(lm,""String_Node_Str"",jBulletPhysicsSystem);
  JMECollisionSystem jmeCollisionSystem=(JMECollisionSystem)collisionManager.loadCollisionSystem(JMECollisionSystem.class);
  ClientContextJME.addCollisionSystem(lm,""String_Node_Str"",jmeCollisionSystem);
  login.setInitialPosition(translation,look);
  login.setPrimary(true);
  try {
    curSession=lm.createSession(login);
  }
 catch (  LoginFailureException lfe) {
    IOException ioe=new IOException(""String_Node_Str"" + serverURL);
    ioe.initCause(lfe);
    throw ioe;
  }
  if (curSession == null) {
    LOGGER.log(Level.WARNING,""String_Node_Str"");
    return;
  }
  frame.connected(true);
  curSession.addSessionStatusListener(new SessionStatusListener(){
    public void sessionStatusChanged(    WonderlandSession session,    Status status){
      if (status == Status.DISCONNECTED) {
        ServerSessionManager serverSessionManager=session.getSessionManager();
        ClientContextJME.removeAllPhysicsSystems(serverSessionManager);
        ClientContextJME.removeAllCollisionSystems(serverSessionManager);
        boolean inLogout;
synchronized (JmeClientMain.this) {
          inLogout=loggingOut;
        }
        if (!inLogout) {
          final ServerSessionManager mgr=curSession.getSessionManager();
          LOGGER.warning(""String_Node_Str"");
          logout();
          if (getAutoReconnect()) {
            SwingUtilities.invokeLater(new Runnable(){
              public void run(){
                ReconnectDialog rf=new ReconnectDialog(JmeClientMain.this,mgr);
                rf.setVisible(true);
              }
            }
);
          }
 else {
            setAutoReconnect(true);
          }
        }
 else {
synchronized (JmeClientMain.this) {
            loggingOut=false;
          }
        }
      }
    }
  }
);
  lm.setPrimarySession(curSession);
  frame.setServerURL(serverURL);
}"
45428,"public JmeClientSession createSession(ServerSessionManager manager,WonderlandServerInfo server,ClassLoader loader){
  JmeClientSession session=new JmeClientSession(manager,server,loader);
  session.setInitialPosition(initialPosition,initialLook);
  return session;
}","public JmeClientSession createSession(ServerSessionManager manager,WonderlandServerInfo server,ClassLoader loader){
  if (primary && !manager.equals(LoginManager.getPrimary())) {
    LoginManager.setPrimary(manager);
  }
  JmeClientSession session=new JmeClientSession(manager,server,loader);
  session.setInitialPosition(initialPosition,initialLook);
  return session;
}"
45429,"public boolean shouldDownload(ServerSessionManager sessionManager,URL jarURL){
  return false;
}","public boolean shouldDownload(ServerSessionManager sessionManager,JarURI uri){
  return false;
}"
45430,"/** 
 * Set up the classloader with module jar URLs for this server
 * @param serverURL the URL of the server to connect to
 * @return the classloader setup with this server's URLs
 */
private ScannedClassLoader setupClassLoader(String serverURL){
  fireConnecting(BUNDLE.getString(""String_Node_Str""));
  ModulePluginList list=ModuleUtils.fetchPluginJars(serverURL);
  List<URL> urls=new ArrayList<URL>();
  if (list == null) {
    logger.warning(""String_Node_Str"" + ""String_Node_Str"");
    return new ScannedClassLoader(new URL[0],getClass().getClassLoader());
  }
  for (  JarURI uri : list.getJarURIs()) {
    try {
      URL url=uri.toURL();
      if (LoginManager.getPluginFilter().shouldDownload(this,url)) {
        urls.add(url);
      }
    }
 catch (    Exception excp) {
      excp.printStackTrace();
    }
  }
  return new ScannedClassLoader(urls.toArray(new URL[0]),getClass().getClassLoader());
}","/** 
 * Set up the classloader with module jar URLs for this server
 * @param serverURL the URL of the server to connect to
 * @return the classloader setup with this server's URLs
 */
private ScannedClassLoader setupClassLoader(String serverURL){
  fireConnecting(BUNDLE.getString(""String_Node_Str""));
  ModulePluginList list=ModuleUtils.fetchPluginJars(serverURL);
  List<URL> urls=new ArrayList<URL>();
  if (list == null) {
    logger.warning(""String_Node_Str"" + ""String_Node_Str"");
    return new ScannedClassLoader(new URL[0],getClass().getClassLoader());
  }
  for (  JarURI uri : list.getJarURIs()) {
    try {
      if (LoginManager.getPluginFilter().shouldDownload(this,uri)) {
        urls.add(uri.toURL());
      }
    }
 catch (    Exception excp) {
      excp.printStackTrace();
    }
  }
  return new ScannedClassLoader(urls.toArray(new URL[0]),getClass().getClassLoader());
}"
45431,"/** 
 * Find and return all the classes from the classLoader that implement the CellServerStateSPI inteface
 * @param classLoader
 * @return
 */
private static Class[] getClasses(ScannedClassLoader classLoader){
  Set<Class> setupClasses=new LinkedHashSet<Class>(Arrays.asList(coreSetupClasses));
  Iterator<CellState> it=classLoader.getInstances(ServerState.class,CellState.class);
  while (it.hasNext()) {
    setupClasses.add(it.next().getClass());
  }
  Iterator<CellServerStateSPI> it2=classLoader.getAll(ServerState.class,CellServerStateSPI.class);
  while (it2.hasNext()) {
    setupClasses.add(it2.next().getClass());
  }
  return setupClasses.toArray(new Class[0]);
}","/** 
 * Find and return all the classes from the classLoader that implement the CellServerStateSPI inteface
 * @param classLoader
 * @return
 */
private static Class[] getClasses(ScannedClassLoader classLoader){
  Set<Class> setupClasses=new LinkedHashSet<Class>(coreClasses);
  Iterator<CellState> it=classLoader.getInstances(ServerState.class,CellState.class);
  while (it.hasNext()) {
    setupClasses.add(it.next().getClass());
  }
  Iterator<CellServerStateSPI> it2=classLoader.getAll(ServerState.class,CellServerStateSPI.class);
  while (it2.hasNext()) {
    setupClasses.add(it2.next().getClass());
  }
  logger.fine(""String_Node_Str"" + setupClasses.toString());
  return setupClasses.toArray(new Class[0]);
}"
45432,"/** 
 * Create a scanned classloader that scans the given urls.
 * @param urls the urls to scan
 * @param parent the parent classlaoder to delegate to
 */
public ScannedClassLoader(URL[] urls,ClassLoader parent){
  super(urls,parent);
  createDB(urls);
}","/** 
 * Create a scanned classloader that scans the given urls.
 * @param urls the urls to scan
 * @param parent the parent classlaoder to delegate to
 */
public ScannedClassLoader(URL[] urls,ClassLoader parent){
  super(urls,parent);
  Set<URL> urlSet=new HashSet<URL>(Arrays.asList(urls));
  while (parent != null && !(parent instanceof ScannedClassLoader)) {
    if (parent instanceof URLClassLoader) {
      urlSet.addAll(Arrays.asList(((URLClassLoader)parent).getURLs()));
    }
    parent=parent.getParent();
  }
  createDB(urlSet.toArray(new URL[urlSet.size()]));
}"
45433,"/** 
 * Get the name of all classes that are annotated with the given annotation.
 * @param annotation the annotation to search for
 */
public Set<String> getClasses(Class<? extends Annotation> clazz){
  String name=clazz.getName();
  Set<String> out=annotationDB.getAnnotationIndex().get(name);
  if (out == null) {
    out=Collections.emptySet();
  }
  return out;
}","/** 
 * Get the name of all classes that are annotated with the given annotation.
 * @param annotation the annotation to search for
 */
public Set<String> getClasses(Class<? extends Annotation> clazz){
  String name=clazz.getName();
  Set<String> out=new LinkedHashSet<String>();
  Set<String> classes=annotationDB.getAnnotationIndex().get(name);
  if (classes != null) {
    out.addAll(classes);
  }
  ClassLoader parent=getParent();
  while (parent != null) {
    if (parent instanceof ScannedClassLoader) {
      out.addAll(((ScannedClassLoader)parent).getClasses(clazz));
      break;
    }
    parent=parent.getParent();
  }
  return out;
}"
45434,"/** 
 * Uninstalls all of the modules waiting to be uninstalled if possible. Checks for the modules that can be uninstalled and removes them.
 */
public void uninstallAll(){
  Map<String,ModuleInfo> uninstall=new HashMap(this.uninstallManager.getModules());
  Iterator<Map.Entry<String,ModuleInfo>> it=uninstall.entrySet().iterator();
  Map<String,Module> installed=this.installedMananger.getModules();
  while (it.hasNext() == true) {
    Map.Entry<String,ModuleInfo> entry=it.next();
    String moduleName=entry.getKey();
    Module module=installed.get(moduleName);
    DeploymentQueryResult res=this.deployManager.canUndeploy(module);
    if (res.getResult() == false) {
      StringBuffer message=new StringBuffer(""String_Node_Str"" + module.getName() + ""String_Node_Str"");
      for (      String reason : res.getReasons()) {
        message.append(reason + ""String_Node_Str"");
      }
      logger.warning(message.toString());
      it.remove();
    }
  }
  Map<String,Set<ModuleInfo>> failures=new LinkedHashMap<String,Set<ModuleInfo>>();
  Map<String,ModuleInfo> checked=this.checkRequired(uninstall,failures);
  if (failures.isEmpty() == false) {
    StringBuffer failureMessage=new StringBuffer(""String_Node_Str"");
    for (    Map.Entry<String,Set<ModuleInfo>> e : failures.entrySet()) {
      failureMessage.append(""String_Node_Str"" + e.getKey() + ""String_Node_Str"");
      for (      ModuleInfo depend : e.getValue()) {
        failureMessage.append(depend.getName() + ""String_Node_Str"");
      }
      failureMessage.append(""String_Node_Str"");
    }
    logger.warning(failureMessage.toString());
  }
  Iterator<Map.Entry<String,ModuleInfo>> it2=checked.entrySet().iterator();
  while (it2.hasNext() == true) {
    Map.Entry<String,ModuleInfo> entry=it2.next();
    String moduleName=entry.getKey();
    Module module=installed.get(moduleName);
    try {
      this.deployManager.undeploy(module);
    }
 catch (    DeployerException excp) {
      logger.log(Level.WARNING,""String_Node_Str"",excp);
    }
    this.installedMananger.remove(moduleName);
    this.uninstallManager.remove(moduleName);
  }
}","/** 
 * Uninstalls all of the modules waiting to be uninstalled if possible. Checks for the modules that can be uninstalled and removes them.
 */
public void uninstallAll(){
  Map<String,ModuleInfo> uninstall=new HashMap(this.uninstallManager.getModules());
  Iterator<Map.Entry<String,ModuleInfo>> it=uninstall.entrySet().iterator();
  Map<String,Module> installed=this.installedMananger.getModules();
  while (it.hasNext() == true) {
    Map.Entry<String,ModuleInfo> entry=it.next();
    String moduleName=entry.getKey();
    Module module=installed.get(moduleName);
    if (module == null) {
      logger.warning(""String_Node_Str"" + moduleName + ""String_Node_Str""+ ""String_Node_Str"");
      it.remove();
      continue;
    }
    DeploymentQueryResult res=this.deployManager.canUndeploy(module);
    if (res.getResult() == false) {
      StringBuffer message=new StringBuffer(""String_Node_Str"" + module.getName() + ""String_Node_Str"");
      for (      String reason : res.getReasons()) {
        message.append(reason + ""String_Node_Str"");
      }
      logger.warning(message.toString());
      it.remove();
    }
  }
  Map<String,Set<ModuleInfo>> failures=new LinkedHashMap<String,Set<ModuleInfo>>();
  Map<String,ModuleInfo> checked=this.checkRequired(uninstall,failures);
  if (failures.isEmpty() == false) {
    StringBuffer failureMessage=new StringBuffer(""String_Node_Str"");
    for (    Map.Entry<String,Set<ModuleInfo>> e : failures.entrySet()) {
      failureMessage.append(""String_Node_Str"" + e.getKey() + ""String_Node_Str"");
      for (      ModuleInfo depend : e.getValue()) {
        failureMessage.append(depend.getName() + ""String_Node_Str"");
      }
      failureMessage.append(""String_Node_Str"");
    }
    logger.warning(failureMessage.toString());
  }
  Iterator<Map.Entry<String,ModuleInfo>> it2=checked.entrySet().iterator();
  while (it2.hasNext() == true) {
    Map.Entry<String,ModuleInfo> entry=it2.next();
    String moduleName=entry.getKey();
    Module module=installed.get(moduleName);
    try {
      this.deployManager.undeploy(module);
    }
 catch (    DeployerException excp) {
      logger.log(Level.WARNING,""String_Node_Str"",excp);
    }
    this.installedMananger.remove(moduleName);
    this.uninstallManager.remove(moduleName);
  }
  this.uninstallManager.write();
}"
45435,"/** 
 * Adds a new module to be uninstall.
 */
public void add(String moduleName,ModuleInfo moduleInfo){
  this.uninstallModules.put(moduleName,moduleInfo);
  ModuleInfo[] infos=this.uninstallList.getModuleInfos();
  List<ModuleInfo> list=new LinkedList(Arrays.asList(infos));
  list.add(moduleInfo);
  ModuleInfo[] newInfos=list.toArray(new ModuleInfo[]{});
  this.uninstallList.setModuleInfos(newInfos);
  FileWriter writer=null;
  try {
    writer=new FileWriter(uninstallFile);
    this.uninstallList.encode(writer);
  }
 catch (  JAXBException ex) {
    Logger.getLogger(UninstallManager.class.getName()).log(Level.WARNING,null,ex);
  }
catch (  IOException ex) {
    Logger.getLogger(UninstallManager.class.getName()).log(Level.WARNING,null,ex);
  }
 finally {
    RunUtil.close(writer);
  }
}","/** 
 * Adds a new module to be uninstall.
 */
public void add(String moduleName,ModuleInfo moduleInfo){
  this.uninstallModules.put(moduleName,moduleInfo);
  ModuleInfo[] infos=this.uninstallList.getModuleInfos();
  List<ModuleInfo> list=new LinkedList(Arrays.asList(infos));
  list.add(moduleInfo);
  ModuleInfo[] newInfos=list.toArray(new ModuleInfo[]{});
  this.uninstallList.setModuleInfos(newInfos);
  write();
}"
45436,"/** 
 * Removes an existing module, given its name. 
 */
public void remove(String moduleName){
  Logger logger=ModuleManager.getLogger();
  this.uninstallModules.remove(moduleName);
  ModuleInfo[] infos=this.uninstallList.getModuleInfos();
  List<ModuleInfo> list=new LinkedList(Arrays.asList(infos));
  Iterator<ModuleInfo> it=list.iterator();
  while (it.hasNext() == true) {
    ModuleInfo info=it.next();
    if (info.getName().equals(moduleName) == true) {
      it.remove();
      break;
    }
  }
  ModuleInfo[] newInfos=list.toArray(new ModuleInfo[]{});
  this.uninstallList.setModuleInfos(newInfos);
  FileWriter writer=null;
  try {
    writer=new FileWriter(uninstallFile);
    this.uninstallList.encode(writer);
  }
 catch (  JAXBException ex) {
    Logger.getLogger(UninstallManager.class.getName()).log(Level.WARNING,null,ex);
  }
catch (  IOException ex) {
    Logger.getLogger(UninstallManager.class.getName()).log(Level.WARNING,null,ex);
  }
 finally {
    RunUtil.close(writer);
  }
}","/** 
 * Removes an existing module, given its name. 
 */
public void remove(String moduleName){
  Logger logger=ModuleManager.getLogger();
  this.uninstallModules.remove(moduleName);
  ModuleInfo[] infos=this.uninstallList.getModuleInfos();
  List<ModuleInfo> list=new LinkedList(Arrays.asList(infos));
  Iterator<ModuleInfo> it=list.iterator();
  while (it.hasNext() == true) {
    ModuleInfo info=it.next();
    if (info.getName().equals(moduleName) == true) {
      it.remove();
      break;
    }
  }
  ModuleInfo[] newInfos=list.toArray(new ModuleInfo[]{});
  this.uninstallList.setModuleInfos(newInfos);
  write();
}"
45437,"/** 
 * Returns a vector that represents the origin of a Cell placed optimally, given the bounding volume of the Cell and the ""view"" Cell Tranform. Also takes the server session, if null, uses the primary session. The origin returned is in world coordinates.
 * @param session The server session
 * @param bounds The bounding volume of the Cell
 * @param viewTransform The transform of the view Cell
 */
public static Vector3f getCellOrigin(ServerSessionManager session,BoundingVolume bounds,CellTransform viewTransform){
  ViewManager vm=ViewManager.getViewManager();
  if (session == null) {
    session=LoginManager.getPrimary();
  }
  Vector3f viewPosition=viewTransform.getTranslation(null);
  Quaternion viewRotation=viewTransform.getRotation(null);
  Vector3f lookAt=CellPlacementUtils.getLookDirection(viewRotation,null);
  logger.info(""String_Node_Str"" + viewPosition);
  logger.info(""String_Node_Str"" + lookAt);
  JMECollisionSystem system=(JMECollisionSystem)ClientContextJME.getCollisionSystem(session,""String_Node_Str"");
  float minDistance=-1.0f;
  float fov=vm.getViewProperties().getFieldOfView();
  float distance=CellPlacementUtils.getDistance(bounds,fov,MIN_DISTANCE,minDistance);
  logger.info(""String_Node_Str"" + fov + ""String_Node_Str"");
  logger.info(""String_Node_Str"" + distance);
  Vector3f origin=lookAt.mult(distance);
  float yDown=CellPlacementUtils.getVectorToGround(system,viewPosition);
  if (yDown == -1) {
    logger.warning(""String_Node_Str"" + ""String_Node_Str"" + viewPosition.y);
    yDown=0;
  }
  float height=CellPlacementUtils.getBoundsHeight(bounds);
  origin.y=height - yDown;
  origin=origin.add(viewPosition);
  logger.info(""String_Node_Str"" + origin);
  return origin;
}","/** 
 * Returns a vector that represents the origin of a Cell placed optimally, given the bounding volume of the Cell and the ""view"" Cell Tranform. Also takes the server session, if null, uses the primary session. The origin returned is in world coordinates.
 * @param session The server session
 * @param bounds The bounding volume of the Cell
 * @param viewTransform The transform of the view Cell
 */
public static Vector3f getCellOrigin(ServerSessionManager session,BoundingVolume bounds,CellTransform viewTransform){
  ViewManager vm=ViewManager.getViewManager();
  if (session == null) {
    session=LoginManager.getPrimary();
  }
  Vector3f viewPosition=viewTransform.getTranslation(null);
  Quaternion viewRotation=viewTransform.getRotation(null);
  Vector3f lookAt=CellPlacementUtils.getLookDirection(viewRotation,null);
  logger.info(""String_Node_Str"" + viewPosition);
  logger.info(""String_Node_Str"" + lookAt);
  JMECollisionSystem system=(JMECollisionSystem)ClientContextJME.getCollisionSystem(session,""String_Node_Str"");
  float minDistance=-1.0f;
  float fov=vm.getViewProperties().getFieldOfView();
  float distance=CellPlacementUtils.getDistance(bounds,fov,MIN_DISTANCE,minDistance);
  logger.info(""String_Node_Str"" + fov + ""String_Node_Str"");
  logger.info(""String_Node_Str"" + distance);
  Vector3f origin=lookAt.mult(distance);
  origin=origin.add(viewPosition);
  float yDown=CellPlacementUtils.getVectorToGround(system,origin);
  if (yDown == -1) {
    logger.warning(""String_Node_Str"" + ""String_Node_Str"" + viewPosition.y);
    yDown=0;
  }
  float height=CellPlacementUtils.getBoundsHeight(bounds);
  origin.y+=height - yDown;
  logger.info(""String_Node_Str"" + origin);
  return origin;
}"
45438,"/** 
 * Set the root for this node and all it's children
 * @param root
 */
void setRoot(SpatialCell root,ViewCacheSet viewCacheSet,Identity identity){
  this.rootNode=(SpatialCellImpl)root;
  if (isRoot && root == null) {
synchronized (spaces) {
      for (      Space s : spaces) {
        s.removeRootSpatialCell(this);
      }
      spaces.clear();
      spaces=null;
    }
    isRoot=false;
    readWriteLock=null;
    this.viewCacheSet=null;
    return;
  }
  if (root == this) {
    if (!isRoot) {
      readWriteLock=new ReentrantReadWriteLock(true);
      this.viewCacheSet=new ViewCacheSet();
      isRoot=true;
      spaces=new HashSet();
    }
    BoundingVolume newWorldBounds;
    try {
      acquireRootWriteLock();
      newWorldBounds=updateWorldTransform(identity);
    }
  finally {
      releaseRootWriteLock();
    }
    computeSpaces(newWorldBounds);
  }
 else {
    this.viewCacheSet=viewCacheSet;
  }
  if (children != null) {
    for (    SpatialCellImpl s : children) {
      s.setRoot(root,this.viewCacheSet,identity);
    }
  }
}","/** 
 * Set the root for this node and all it's children
 * @param root
 */
void setRoot(SpatialCell root,ViewCacheSet viewCacheSet,Identity identity){
  this.rootNode=(SpatialCellImpl)root;
  if (isRoot && root == null) {
synchronized (spaces) {
      for (      Space s : spaces) {
        s.removeRootSpatialCell(this);
      }
      spaces.clear();
      spaces=null;
    }
    isRoot=false;
    readWriteLock=null;
    this.viewCacheSet=null;
    return;
  }
  if (root == this) {
    if (!isRoot) {
      readWriteLock=new ReentrantReadWriteLock(true);
      this.viewCacheSet=new ViewCacheSet();
      isRoot=true;
      spaces=new HashSet();
    }
    BoundingVolume newWorldBounds;
    try {
      acquireRootWriteLock();
      newWorldBounds=updateWorldTransform(identity);
    }
  finally {
      releaseRootWriteLock();
    }
    computeSpaces(newWorldBounds);
  }
 else {
    this.viewCacheSet=viewCacheSet;
    viewCachesAddedOrRemoved(viewCacheSet.getCaches(),true,false,this);
  }
  if (children != null) {
    for (    SpatialCellImpl s : children) {
      s.setRoot(root,this.viewCacheSet,identity);
    }
  }
}"
45439,"void viewCachesAddedOrRemoved(Collection<ViewCache> caches,boolean added,SpatialCellImpl cell){
  for (  ViewCache c : caches) {
    if (added) {
      c.addViewUpdateListener(cellID,this);
    }
 else {
      c.removeViewUpdateListener(cellID,this);
    }
  }
  if (children != null) {
    for (    SpatialCellImpl child : children) {
      child.viewCachesAddedOrRemoved(caches,added,child);
    }
  }
}","static void viewCachesAddedOrRemoved(Collection<ViewCache> caches,boolean added,boolean notifyChildren,SpatialCellImpl cell){
  for (  ViewCache c : caches) {
    if (added) {
      c.addViewUpdateListener(cell.getCellID(),cell);
    }
 else {
      c.removeViewUpdateListener(cell.getCellID(),cell);
    }
  }
  if (notifyChildren && cell.getChildren() != null) {
    for (    SpatialCellImpl child : cell.getChildren()) {
      viewCachesAddedOrRemoved(caches,added,true,child);
    }
  }
}"
45440,"public void setMaxEntries(int maxEntries){
  if (maxEntries <= 0) {
    throw new IllegalArgumentException(""String_Node_Str"" + ""String_Node_Str"");
  }
  this.maxEntries=maxEntries;
  Preferences prefs=Preferences.userNodeForPackage(LogViewerFrame.class);
  prefs.putInt(""String_Node_Str"",maxEntries);
  while (entries.size() > getMaxEntries()) {
    removeOldestRecord();
  }
}","public void setMaxEntries(int maxEntries){
  if (maxEntries <= 0) {
    throw new IllegalArgumentException(""String_Node_Str"" + ""String_Node_Str"");
  }
  this.maxEntries=maxEntries;
  Preferences prefs=Preferences.userNodeForPackage(LogViewerFrame.class);
  prefs.putInt(""String_Node_Str"",maxEntries);
  processRecords();
}"
45441,"protected String generateErrorReport(){
  final StringBuffer out=new StringBuffer();
  out.append(""String_Node_Str"" + DateFormat.getDateTimeInstance().format(new Date()) + ""String_Node_Str"");
  out.append(""String_Node_Str"");
  out.append(""String_Node_Str"");
  out.append(""String_Node_Str"" + System.getProperty(""String_Node_Str"") + ""String_Node_Str"");
  out.append(""String_Node_Str"" + System.getProperty(""String_Node_Str"") + ""String_Node_Str"");
  out.append(""String_Node_Str"" + System.getProperty(""String_Node_Str"") + ""String_Node_Str"");
  out.append(""String_Node_Str"" + System.getProperty(""String_Node_Str"") + ""String_Node_Str"");
  out.append(""String_Node_Str"" + System.getProperty(""String_Node_Str"") + ""String_Node_Str"");
  out.append(""String_Node_Str"");
  out.append(""String_Node_Str"" + Runtime.getRuntime().maxMemory() + ""String_Node_Str"");
  out.append(""String_Node_Str"" + Runtime.getRuntime().totalMemory() + ""String_Node_Str"");
  out.append(""String_Node_Str"" + Runtime.getRuntime().freeMemory() + ""String_Node_Str"");
  out.append(""String_Node_Str"");
  out.append(""String_Node_Str"");
  final Semaphore gs=new Semaphore(0);
  SceneWorker.addWorker(new WorkCommit(){
    public void commit(){
      try {
        DisplaySystem ds=DisplaySystem.getDisplaySystem(""String_Node_Str"");
        out.append(""String_Node_Str"" + ds.getAdapter() + ""String_Node_Str"");
        out.append(""String_Node_Str"" + ds.getDisplayVendor() + ""String_Node_Str"");
        out.append(""String_Node_Str"" + ds.getDriverVersion() + ""String_Node_Str"");
        out.append(""String_Node_Str"" + ds.getDisplayRenderer() + ""String_Node_Str"");
        out.append(""String_Node_Str"" + ds.getDisplayAPIVersion() + ""String_Node_Str"");
        out.append(""String_Node_Str"");
      }
  finally {
        gs.release();
      }
    }
  }
);
  try {
    gs.acquire();
  }
 catch (  InterruptedException ie) {
  }
  RenderManager rm=WorldManager.getDefaultWorldManager().getRenderManager();
  JOGLContextCapabilities cap=rm.getContextCaps();
  out.append(""String_Node_Str"" + cap.GL_ARB_fragment_program + ""String_Node_Str"");
  out.append(""String_Node_Str"" + cap.GL_ARB_fragment_shader + ""String_Node_Str"");
  out.append(""String_Node_Str"" + cap.GL_ARB_shader_objects + ""String_Node_Str"");
  out.append(""String_Node_Str"" + cap.GL_ARB_texture_non_power_of_two + ""String_Node_Str"");
  out.append(""String_Node_Str"" + cap.GL_ARB_vertex_buffer_object + ""String_Node_Str"");
  out.append(""String_Node_Str"" + cap.GL_ARB_vertex_program + ""String_Node_Str"");
  out.append(""String_Node_Str"" + cap.GL_ARB_vertex_shader + ""String_Node_Str"");
  out.append(""String_Node_Str"" + cap.GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS_ARB + ""String_Node_Str"");
  out.append(""String_Node_Str"" + cap.GL_MAX_FRAGMENT_UNIFORM_COMPONENTS_ARB + ""String_Node_Str"");
  out.append(""String_Node_Str"" + cap.GL_MAX_TEXTURE_COORDS_ARB + ""String_Node_Str"");
  out.append(""String_Node_Str"" + cap.GL_MAX_TEXTURE_IMAGE_UNITS_ARB + ""String_Node_Str"");
  out.append(""String_Node_Str"" + cap.GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT + ""String_Node_Str"");
  out.append(""String_Node_Str"" + cap.GL_MAX_TEXTURE_UNITS + ""String_Node_Str"");
  out.append(""String_Node_Str"" + cap.GL_MAX_VARYING_FLOATS_ARB + ""String_Node_Str"");
  out.append(""String_Node_Str"" + cap.GL_MAX_VERTEX_ATTRIBS_ARB + ""String_Node_Str"");
  out.append(""String_Node_Str"" + cap.GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS_ARB + ""String_Node_Str"");
  out.append(""String_Node_Str"" + cap.GL_MAX_VERTEX_UNIFORM_COMPONENTS_ARB + ""String_Node_Str"");
  out.append(""String_Node_Str"" + cap.GL_SGIS_generate_mipmap + ""String_Node_Str"");
  out.append(""String_Node_Str"" + cap.GL_SHADING_LANGUAGE_VERSION_ARB + ""String_Node_Str"");
  out.append(""String_Node_Str"" + cap.GL_VERSION_1_2 + ""String_Node_Str"");
  out.append(""String_Node_Str"" + cap.GL_VERSION_2_0 + ""String_Node_Str"");
  out.append(""String_Node_Str"" + cap.GL_VERSION_2_1 + ""String_Node_Str"");
  out.append(""String_Node_Str"" + cap.GL_VERSION_3_0 + ""String_Node_Str"");
  out.append(""String_Node_Str"");
  out.append(""String_Node_Str"");
  for (  LogEntry entry : entries) {
    out.append(format(entry.record));
  }
  out.append(""String_Node_Str"");
  out.append(""String_Node_Str"");
  for (  Map.Entry<Thread,StackTraceElement[]> e : Thread.getAllStackTraces().entrySet()) {
    out.append(e.getKey().getName() + ""String_Node_Str"" + e.getKey().getState()+ ""String_Node_Str"");
    for (    StackTraceElement ste : e.getValue()) {
      out.append(""String_Node_Str"" + ste.getClassName());
      out.append(""String_Node_Str"" + ste.getMethodName());
      if (ste.isNativeMethod()) {
        out.append(""String_Node_Str"");
      }
 else {
        out.append(""String_Node_Str"" + ste.getFileName() + ""String_Node_Str"");
        out.append(ste.getLineNumber() + ""String_Node_Str"");
      }
      out.append(""String_Node_Str"");
    }
    out.append(""String_Node_Str"");
  }
  out.append(""String_Node_Str"");
  return out.toString();
}","protected String generateErrorReport(){
  final StringBuilder out=new StringBuilder();
  out.append(""String_Node_Str"" + DateFormat.getDateTimeInstance().format(new Date()) + ""String_Node_Str"");
  out.append(""String_Node_Str"");
  out.append(""String_Node_Str"");
  out.append(""String_Node_Str"" + System.getProperty(""String_Node_Str"") + ""String_Node_Str"");
  out.append(""String_Node_Str"" + System.getProperty(""String_Node_Str"") + ""String_Node_Str"");
  out.append(""String_Node_Str"" + System.getProperty(""String_Node_Str"") + ""String_Node_Str"");
  out.append(""String_Node_Str"" + System.getProperty(""String_Node_Str"") + ""String_Node_Str"");
  out.append(""String_Node_Str"" + System.getProperty(""String_Node_Str"") + ""String_Node_Str"");
  out.append(""String_Node_Str"");
  out.append(""String_Node_Str"" + Runtime.getRuntime().maxMemory() + ""String_Node_Str"");
  out.append(""String_Node_Str"" + Runtime.getRuntime().totalMemory() + ""String_Node_Str"");
  out.append(""String_Node_Str"" + Runtime.getRuntime().freeMemory() + ""String_Node_Str"");
  out.append(""String_Node_Str"");
  out.append(""String_Node_Str"");
  final Semaphore gs=new Semaphore(0);
  SceneWorker.addWorker(new WorkCommit(){
    public void commit(){
      try {
        DisplaySystem ds=DisplaySystem.getDisplaySystem(""String_Node_Str"");
        out.append(""String_Node_Str"" + ds.getAdapter() + ""String_Node_Str"");
        out.append(""String_Node_Str"" + ds.getDisplayVendor() + ""String_Node_Str"");
        out.append(""String_Node_Str"" + ds.getDriverVersion() + ""String_Node_Str"");
        out.append(""String_Node_Str"" + ds.getDisplayRenderer() + ""String_Node_Str"");
        out.append(""String_Node_Str"" + ds.getDisplayAPIVersion() + ""String_Node_Str"");
        out.append(""String_Node_Str"");
      }
  finally {
        gs.release();
      }
    }
  }
);
  try {
    gs.acquire();
  }
 catch (  InterruptedException ie) {
  }
  RenderManager rm=WorldManager.getDefaultWorldManager().getRenderManager();
  JOGLContextCapabilities cap=rm.getContextCaps();
  out.append(""String_Node_Str"" + cap.GL_ARB_fragment_program + ""String_Node_Str"");
  out.append(""String_Node_Str"" + cap.GL_ARB_fragment_shader + ""String_Node_Str"");
  out.append(""String_Node_Str"" + cap.GL_ARB_shader_objects + ""String_Node_Str"");
  out.append(""String_Node_Str"" + cap.GL_ARB_texture_non_power_of_two + ""String_Node_Str"");
  out.append(""String_Node_Str"" + cap.GL_ARB_vertex_buffer_object + ""String_Node_Str"");
  out.append(""String_Node_Str"" + cap.GL_ARB_vertex_program + ""String_Node_Str"");
  out.append(""String_Node_Str"" + cap.GL_ARB_vertex_shader + ""String_Node_Str"");
  out.append(""String_Node_Str"" + cap.GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS_ARB + ""String_Node_Str"");
  out.append(""String_Node_Str"" + cap.GL_MAX_FRAGMENT_UNIFORM_COMPONENTS_ARB + ""String_Node_Str"");
  out.append(""String_Node_Str"" + cap.GL_MAX_TEXTURE_COORDS_ARB + ""String_Node_Str"");
  out.append(""String_Node_Str"" + cap.GL_MAX_TEXTURE_IMAGE_UNITS_ARB + ""String_Node_Str"");
  out.append(""String_Node_Str"" + cap.GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT + ""String_Node_Str"");
  out.append(""String_Node_Str"" + cap.GL_MAX_TEXTURE_UNITS + ""String_Node_Str"");
  out.append(""String_Node_Str"" + cap.GL_MAX_VARYING_FLOATS_ARB + ""String_Node_Str"");
  out.append(""String_Node_Str"" + cap.GL_MAX_VERTEX_ATTRIBS_ARB + ""String_Node_Str"");
  out.append(""String_Node_Str"" + cap.GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS_ARB + ""String_Node_Str"");
  out.append(""String_Node_Str"" + cap.GL_MAX_VERTEX_UNIFORM_COMPONENTS_ARB + ""String_Node_Str"");
  out.append(""String_Node_Str"" + cap.GL_SGIS_generate_mipmap + ""String_Node_Str"");
  out.append(""String_Node_Str"" + cap.GL_SHADING_LANGUAGE_VERSION_ARB + ""String_Node_Str"");
  out.append(""String_Node_Str"" + cap.GL_VERSION_1_2 + ""String_Node_Str"");
  out.append(""String_Node_Str"" + cap.GL_VERSION_2_0 + ""String_Node_Str"");
  out.append(""String_Node_Str"" + cap.GL_VERSION_2_1 + ""String_Node_Str"");
  out.append(""String_Node_Str"" + cap.GL_VERSION_3_0 + ""String_Node_Str"");
  out.append(""String_Node_Str"");
  out.append(""String_Node_Str"");
  for (  LogEntry entry : entries) {
    format(entry.record,out);
  }
  out.append(""String_Node_Str"");
  out.append(""String_Node_Str"");
  for (  Map.Entry<Thread,StackTraceElement[]> e : Thread.getAllStackTraces().entrySet()) {
    out.append(e.getKey().getName() + ""String_Node_Str"" + e.getKey().getState()+ ""String_Node_Str"");
    for (    StackTraceElement ste : e.getValue()) {
      out.append(""String_Node_Str"" + ste.getClassName());
      out.append(""String_Node_Str"" + ste.getMethodName());
      if (ste.isNativeMethod()) {
        out.append(""String_Node_Str"");
      }
 else {
        out.append(""String_Node_Str"" + ste.getFileName() + ""String_Node_Str"");
        out.append(ste.getLineNumber() + ""String_Node_Str"");
      }
      out.append(""String_Node_Str"");
    }
    out.append(""String_Node_Str"");
  }
  out.append(""String_Node_Str"");
  return out.toString();
}"
45442,"protected String format(LogRecord record){
  StringBuffer out=new StringBuffer();
  out.append(record.getLevel());
  out.append(""String_Node_Str"");
  out.append(DateFormat.getTimeInstance().format(new Date(record.getMillis())));
  out.append(""String_Node_Str"");
  out.append(record.getSourceClassName());
  out.append(""String_Node_Str"");
  out.append(record.getSourceMethodName());
  out.append(""String_Node_Str"");
  if (record.getMessage() != null) {
    out.append(record.getMessage());
    out.append(""String_Node_Str"");
  }
  if (record.getThrown() != null) {
    out.append(formatThrowable(record.getThrown()));
  }
  return out.toString();
}","/** 
 * Format the given record, and add it to the given string builder. Return the length of text added to the builder.
 */
protected int format(LogRecord record,StringBuilder builder){
  int startLen=builder.length();
  builder.append(record.getLevel());
  builder.append(""String_Node_Str"");
  builder.append(DateFormat.getTimeInstance().format(new Date(record.getMillis())));
  builder.append(""String_Node_Str"");
  builder.append(record.getSourceClassName());
  builder.append(""String_Node_Str"");
  builder.append(record.getSourceMethodName());
  builder.append(""String_Node_Str"");
  if (record.getMessage() != null) {
    builder.append(record.getMessage());
    builder.append(""String_Node_Str"");
  }
  if (record.getThrown() != null) {
    builder.append(formatThrowable(record.getThrown()));
  }
  return builder.length() - startLen;
}"
45443,"protected void addRecord(LogRecord record){
  String str=format(record);
  ManualScrollEditorPane mspe=(ManualScrollEditorPane)logPane;
  Position pos=mspe.preModify();
  boolean atEnd=mspe.atEnd();
  try {
    final Document doc=logPane.getDocument();
    Position end=doc.getEndPosition();
    doc.insertString(end.getOffset() - 1,str,null);
  }
 catch (  BadLocationException ble) {
    logger.log(Level.WARNING,""String_Node_Str"",ble);
    return;
  }
  LogEntry entry=new LogEntry();
  entry.record=record;
  entry.length=str.length();
  entries.add(entries.size(),entry);
  while (entries.size() > getMaxEntries()) {
    removeOldestRecord();
  }
  mspe.postModify(pos,atEnd);
}","/** 
 * Called by the handler to add a new record to the log. This method queues the record and schedules the actual update to happen on the AWT event thread.
 * @param record the record to process
 */
protected synchronized void addRecord(LogRecord record){
  boolean schedule=workQueue.isEmpty();
  workQueue.add(record);
  if (schedule) {
    SwingUtilities.invokeLater(new Runnable(){
      public void run(){
        processRecords();
      }
    }
);
  }
}"
45444,"@Override public void publish(final LogRecord record){
  record.getSourceMethodName();
  SwingUtilities.invokeLater(new Runnable(){
    public void run(){
      LogViewerFrame.getInstance().addRecord(record);
    }
  }
);
}","@Override public void publish(final LogRecord record){
  record.getSourceMethodName();
  LogViewerFrame.getInstance().addRecord(record);
}"
45445,"@Override protected void done(){
  if (inPTT) {
    inPTT=false;
    setMute(true);
  }
  if (pttReleaseTimer == this) {
    pttReleaseTimer=null;
  }
}","@Override protected void done(){
  if (inPTT && !isCancelled()) {
    inPTT=false;
    setMute(true);
  }
  if (pttReleaseTimer == this) {
    pttReleaseTimer=null;
  }
}"
45446,"@Override public ViewFactory getViewFactory(){
  final ViewFactory sf=super.getViewFactory();
  return new ViewFactory(){
    public View create(    Element element){
      if (element.getName().equals(AbstractDocument.ParagraphElementName)) {
        return new ParagraphView(element){
          @Override public void layout(          int width,          int height){
            super.layout(Short.MAX_VALUE,height);
          }
          @Override public float getMinimumSpan(          int axis){
            return super.getPreferredSpan(axis);
          }
        }
;
      }
      return sf.create(element);
    }
  }
;
}","@Override public ViewFactory getViewFactory(){
  final ViewFactory sf=super.getViewFactory();
  return new ViewFactory(){
    public View create(    Element element){
      if (element.getName().equals(AbstractDocument.ParagraphElementName)) {
        return new ParagraphView(element){
          @Override public void layout(          int width,          int height){
            try {
              super.layout(Short.MAX_VALUE,height);
            }
 catch (            Throwable t) {
              logger.log(Level.WARNING,""String_Node_Str"",t);
            }
          }
          @Override public float getMinimumSpan(          int axis){
            return super.getPreferredSpan(axis);
          }
        }
;
      }
      return sf.create(element);
    }
  }
;
}"
45447,"public View create(Element element){
  if (element.getName().equals(AbstractDocument.ParagraphElementName)) {
    return new ParagraphView(element){
      @Override public void layout(      int width,      int height){
        super.layout(Short.MAX_VALUE,height);
      }
      @Override public float getMinimumSpan(      int axis){
        return super.getPreferredSpan(axis);
      }
    }
;
  }
  return sf.create(element);
}","public View create(Element element){
  if (element.getName().equals(AbstractDocument.ParagraphElementName)) {
    return new ParagraphView(element){
      @Override public void layout(      int width,      int height){
        try {
          super.layout(Short.MAX_VALUE,height);
        }
 catch (        Throwable t) {
          logger.log(Level.WARNING,""String_Node_Str"",t);
        }
      }
      @Override public float getMinimumSpan(      int axis){
        return super.getPreferredSpan(axis);
      }
    }
;
  }
  return sf.create(element);
}"
45448,"@Override public void layout(int width,int height){
  super.layout(Short.MAX_VALUE,height);
}","@Override public void layout(int width,int height){
  try {
    super.layout(Short.MAX_VALUE,height);
  }
 catch (  Throwable t) {
    logger.log(Level.WARNING,""String_Node_Str"",t);
  }
}"
45449,"public void save(){
  Preferences prefs=Preferences.userNodeForPackage(LogViewerFrame.class);
  prefs=prefs.node(""String_Node_Str"");
  try {
    prefs.clear();
  }
 catch (  BackingStoreException ex) {
    logger.log(Level.WARNING,""String_Node_Str"",ex);
  }
  for (int i=0; i < getRowCount(); i++) {
    String loggerName=(String)getValueAt(i,0);
    Level level=(Level)getValueAt(i,1);
    if (loggerName != null && level != null) {
      Logger.getLogger(loggerName).setLevel(level);
      prefs.put(loggerName,level.getName());
      origLevels.remove(loggerName);
    }
  }
  for (  String loggerName : origLevels.keySet()) {
    Logger.getLogger(loggerName).setLevel(null);
  }
}","public void save(){
  Preferences prefs=Preferences.userNodeForPackage(LogViewerFrame.class);
  prefs=prefs.node(""String_Node_Str"");
  try {
    prefs.clear();
  }
 catch (  BackingStoreException ex) {
    logger.log(Level.WARNING,""String_Node_Str"",ex);
  }
  for (int i=0; i < getRowCount(); i++) {
    String loggerName=(String)getValueAt(i,0);
    Level level=(Level)getValueAt(i,1);
    if (loggerName != null && level != null) {
      Logger.getLogger(loggerName).setLevel(level);
      prefs.put(loggerName,level.getName());
      origLevels.remove(loggerName);
    }
  }
  for (  String loggerName : origLevels.keySet()) {
    Logger removeLogger=Logger.getLogger(loggerName);
    removeLogger.setLevel(null);
    createdLoggers.remove(removeLogger);
  }
}"
45450,"public void reload(){
  setRowCount(0);
  origLevels=new TreeMap<String,Level>();
  LogManager logManager=LogManager.getLogManager();
  Enumeration<String> loggerNames=logManager.getLoggerNames();
  while (loggerNames.hasMoreElements()) {
    String loggerName=loggerNames.nextElement();
    if (loggerName.length() == 0) {
      continue;
    }
    Level level=logManager.getLogger(loggerName).getLevel();
    if (level == null) {
      continue;
    }
    origLevels.put(loggerName,level);
  }
  for (  Map.Entry<String,Level> e : origLevels.entrySet()) {
    addRow(new Object[]{e.getKey(),e.getValue()});
  }
}","public void reload(){
  setRowCount(0);
  origLevels=new TreeMap<String,Level>();
  LogManager logManager=LogManager.getLogManager();
  Enumeration<String> loggerNames=logManager.getLoggerNames();
  while (loggerNames.hasMoreElements()) {
    String loggerName=loggerNames.nextElement();
    if (loggerName.length() == 0) {
      continue;
    }
    Level level=Logger.getLogger(loggerName).getLevel();
    if (level == null) {
      continue;
    }
    origLevels.put(loggerName,level);
  }
  for (  Map.Entry<String,Level> e : origLevels.entrySet()) {
    addRow(new Object[]{e.getKey(),e.getValue()});
  }
}"
45451,"public void restore(){
  Preferences prefs=Preferences.userNodeForPackage(LoggerTableModel.class);
  prefs=prefs.node(""String_Node_Str"");
  try {
    for (    String loggerName : prefs.keys()) {
      Level level=Level.parse(prefs.get(loggerName,""String_Node_Str""));
      Logger.getLogger(loggerName).setLevel(level);
    }
  }
 catch (  BackingStoreException ex) {
    logger.log(Level.WARNING,""String_Node_Str"",ex);
  }
}","public void restore(){
  Preferences prefs=Preferences.userNodeForPackage(LoggerTableModel.class);
  prefs=prefs.node(""String_Node_Str"");
  try {
    for (    String loggerName : prefs.keys()) {
      Level level=Level.parse(prefs.get(loggerName,""String_Node_Str""));
      Logger createLogger=Logger.getLogger(loggerName);
      createLogger.setLevel(level);
      createdLoggers.add(createLogger);
    }
  }
 catch (  BackingStoreException ex) {
    logger.log(Level.WARNING,""String_Node_Str"",ex);
  }
}"
45452,"public LoggerTableModel(){
  super(new Object[]{BUNDLE.getString(""String_Node_Str""),BUNDLE.getString(""String_Node_Str"")},0);
}","public LoggerTableModel(){
  super(new Object[]{BUNDLE.getString(""String_Node_Str""),BUNDLE.getString(""String_Node_Str"")},0);
  createdLoggers=new ArrayList<Logger>();
}"
45453,"private void initMenus(){
  SwingUtilities.invokeLater(new Runnable(){
    public void run(){
      logoutMI=new JMenuItem(BUNDLE.getString(""String_Node_Str""));
      logoutMI.addActionListener(new ActionListener(){
        public void actionPerformed(        ActionEvent evt){
          logoutMIActionPerformed(evt);
        }
      }
);
      addToFileMenu(logoutMI,2);
      exitMI=new JMenuItem(BUNDLE.getString(""String_Node_Str""));
      exitMI.addActionListener(new ActionListener(){
        public void actionPerformed(        ActionEvent evt){
          exitMIActionPerformed(evt);
        }
      }
);
      addToFileMenu(exitMI,3);
      firstPersonRB=new JRadioButtonMenuItem(BUNDLE.getString(""String_Node_Str""));
      firstPersonRB.addActionListener(new ActionListener(){
        public void actionPerformed(        ActionEvent evt){
          cameraChangedActionPerformed(evt);
        }
      }
);
      addToViewMenu(firstPersonRB,0);
      cameraButtonGroup.add(firstPersonRB);
      thirdPersonRB=new JRadioButtonMenuItem(BUNDLE.getString(""String_Node_Str""));
      thirdPersonRB.setSelected(true);
      thirdPersonRB.addActionListener(new ActionListener(){
        public void actionPerformed(        ActionEvent evt){
          cameraChangedActionPerformed(evt);
        }
      }
);
      addToViewMenu(thirdPersonRB,1);
      cameraButtonGroup.add(thirdPersonRB);
      frontPersonRB=new JRadioButtonMenuItem(BUNDLE.getString(""String_Node_Str""));
      frontPersonRB.setToolTipText(BUNDLE.getString(""String_Node_Str""));
      frontPersonRB.addActionListener(new ActionListener(){
        public void actionPerformed(        ActionEvent evt){
          cameraChangedActionPerformed(evt);
        }
      }
);
      addToViewMenu(frontPersonRB,2);
      cameraButtonGroup.add(frontPersonRB);
      frameRateMenu=new JMenu(BUNDLE.getString(""String_Node_Str""));
      JMenuItem fps15=new JCheckBoxMenuItem(BUNDLE.getString(""String_Node_Str""));
      JMenuItem fps30=new JCheckBoxMenuItem(BUNDLE.getString(""String_Node_Str""));
      JMenuItem fps60=new JCheckBoxMenuItem(BUNDLE.getString(""String_Node_Str""));
      JMenuItem fps120=new JCheckBoxMenuItem(BUNDLE.getString(""String_Node_Str""));
      JMenuItem fps200=new JCheckBoxMenuItem(BUNDLE.getString(""String_Node_Str""));
      frameRateMenu.add(fps15);
      frameRateMenu.add(fps30);
      frameRateMenu.add(fps60);
      frameRateMenu.add(fps120);
      frameRateMenu.add(fps200);
      addToViewMenu(frameRateMenu,5);
      fps15.addActionListener(new ActionListener(){
        public void actionPerformed(        ActionEvent evt){
          frameRateActionPerformed(evt);
        }
      }
);
      fps30.addActionListener(new ActionListener(){
        public void actionPerformed(        ActionEvent evt){
          frameRateActionPerformed(evt);
        }
      }
);
      fps60.addActionListener(new ActionListener(){
        public void actionPerformed(        ActionEvent evt){
          frameRateActionPerformed(evt);
        }
      }
);
      fps120.addActionListener(new ActionListener(){
        public void actionPerformed(        ActionEvent evt){
          frameRateActionPerformed(evt);
        }
      }
);
      fps200.addActionListener(new ActionListener(){
        public void actionPerformed(        ActionEvent evt){
          frameRateActionPerformed(evt);
        }
      }
);
      fpsMI=new JCheckBoxMenuItem(BUNDLE.getString(""String_Node_Str""));
      fpsMI.addActionListener(new ActionListener(){
        public void actionPerformed(        ActionEvent evt){
          if ((fpsComponent == null) || !fpsComponent.isVisible()) {
            showFPSMeter(true);
          }
 else {
            showFPSMeter(false);
          }
        }
      }
);
      addToWindowMenu(fpsMI,-1);
      logViewerMI=new JMenuItem(BUNDLE.getString(""String_Node_Str""));
      logViewerMI.addActionListener(new ActionListener(){
        public void actionPerformed(        ActionEvent ae){
          LogViewerFrame.getInstance().setVisible(true);
          LogViewerFrame.getInstance().toFront();
        }
      }
);
      addToHelpMenu(logViewerMI,-1);
    }
  }
);
}","private void initMenus(){
  SwingUtilities.invokeLater(new Runnable(){
    public void run(){
      logoutMI=new JMenuItem(BUNDLE.getString(""String_Node_Str""));
      logoutMI.addActionListener(new ActionListener(){
        public void actionPerformed(        ActionEvent evt){
          logoutMIActionPerformed(evt);
        }
      }
);
      addToFileMenu(logoutMI,2);
      exitMI=new JMenuItem(BUNDLE.getString(""String_Node_Str""));
      exitMI.addActionListener(new ActionListener(){
        public void actionPerformed(        ActionEvent evt){
          exitMIActionPerformed(evt);
        }
      }
);
      addToFileMenu(exitMI,3);
      firstPersonRB=new JRadioButtonMenuItem(BUNDLE.getString(""String_Node_Str""));
      firstPersonRB.setAccelerator(KeyStroke.getKeyStroke('f'));
      firstPersonRB.addActionListener(new ActionListener(){
        public void actionPerformed(        ActionEvent evt){
          cameraChangedActionPerformed(evt);
        }
      }
);
      addToViewMenu(firstPersonRB,0);
      cameraButtonGroup.add(firstPersonRB);
      thirdPersonRB=new JRadioButtonMenuItem(BUNDLE.getString(""String_Node_Str""));
      thirdPersonRB.setAccelerator(KeyStroke.getKeyStroke('t'));
      thirdPersonRB.setSelected(true);
      thirdPersonRB.addActionListener(new ActionListener(){
        public void actionPerformed(        ActionEvent evt){
          cameraChangedActionPerformed(evt);
        }
      }
);
      addToViewMenu(thirdPersonRB,1);
      cameraButtonGroup.add(thirdPersonRB);
      frontPersonRB=new JRadioButtonMenuItem(BUNDLE.getString(""String_Node_Str""));
      frontPersonRB.setToolTipText(BUNDLE.getString(""String_Node_Str""));
      frontPersonRB.addActionListener(new ActionListener(){
        public void actionPerformed(        ActionEvent evt){
          cameraChangedActionPerformed(evt);
        }
      }
);
      addToViewMenu(frontPersonRB,2);
      cameraButtonGroup.add(frontPersonRB);
      InputMap im=mainMenuBar.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
      im.put(KeyStroke.getKeyStroke('c'),""String_Node_Str"");
      im.put(KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE,0),""String_Node_Str"");
      ActionMap am=mainMenuBar.getActionMap();
      am.put(""String_Node_Str"",new AbstractAction(){
        public void actionPerformed(        ActionEvent e){
          cameraButtonGroup.next();
        }
      }
);
      am.put(""String_Node_Str"",new AbstractAction(){
        public void actionPerformed(        ActionEvent e){
          ViewManager.getViewManager().setCameraController(ViewManager.getDefaultCamera());
        }
      }
);
      frameRateMenu=new JMenu(BUNDLE.getString(""String_Node_Str""));
      JMenuItem fps15=new JCheckBoxMenuItem(BUNDLE.getString(""String_Node_Str""));
      JMenuItem fps30=new JCheckBoxMenuItem(BUNDLE.getString(""String_Node_Str""));
      JMenuItem fps60=new JCheckBoxMenuItem(BUNDLE.getString(""String_Node_Str""));
      JMenuItem fps120=new JCheckBoxMenuItem(BUNDLE.getString(""String_Node_Str""));
      JMenuItem fps200=new JCheckBoxMenuItem(BUNDLE.getString(""String_Node_Str""));
      frameRateMenu.add(fps15);
      frameRateMenu.add(fps30);
      frameRateMenu.add(fps60);
      frameRateMenu.add(fps120);
      frameRateMenu.add(fps200);
      addToViewMenu(frameRateMenu,5);
      fps15.addActionListener(new ActionListener(){
        public void actionPerformed(        ActionEvent evt){
          frameRateActionPerformed(evt);
        }
      }
);
      fps30.addActionListener(new ActionListener(){
        public void actionPerformed(        ActionEvent evt){
          frameRateActionPerformed(evt);
        }
      }
);
      fps60.addActionListener(new ActionListener(){
        public void actionPerformed(        ActionEvent evt){
          frameRateActionPerformed(evt);
        }
      }
);
      fps120.addActionListener(new ActionListener(){
        public void actionPerformed(        ActionEvent evt){
          frameRateActionPerformed(evt);
        }
      }
);
      fps200.addActionListener(new ActionListener(){
        public void actionPerformed(        ActionEvent evt){
          frameRateActionPerformed(evt);
        }
      }
);
      fpsMI=new JCheckBoxMenuItem(BUNDLE.getString(""String_Node_Str""));
      fpsMI.addActionListener(new ActionListener(){
        public void actionPerformed(        ActionEvent evt){
          if ((fpsComponent == null) || !fpsComponent.isVisible()) {
            showFPSMeter(true);
          }
 else {
            showFPSMeter(false);
          }
        }
      }
);
      addToWindowMenu(fpsMI,-1);
      logViewerMI=new JMenuItem(BUNDLE.getString(""String_Node_Str""));
      logViewerMI.addActionListener(new ActionListener(){
        public void actionPerformed(        ActionEvent ae){
          LogViewerFrame.getInstance().setVisible(true);
          LogViewerFrame.getInstance().toFront();
        }
      }
);
      addToHelpMenu(logViewerMI,-1);
    }
  }
);
}"
45454,"public void setEnabled(boolean enabled,CameraNode cameraNode){
  if (this.enabled == enabled)   return;
  this.enabled=enabled;
  this.cameraNode=cameraNode;
  if (enabled) {
    if (listener == null) {
      listener=new EventClassFocusListener(){
        @Override public Class[] eventClassesToConsume(){
          return new Class[]{KeyEvent3D.class,MouseEvent3D.class};
        }
        @Override public void commitEvent(        Event event){
          if (event instanceof KeyEvent3D) {
            KeyEvent key=(KeyEvent)((KeyEvent3D)event).getAwtEvent();
            if (key.getKeyCode() == KeyEvent.VK_EQUALS) {
              offset.z+=cameraZoom;
              viewMoved(new CellTransform(viewRot,viewTranslation));
            }
 else             if (key.getKeyCode() == KeyEvent.VK_MINUS) {
              offset.z-=cameraZoom;
              viewMoved(new CellTransform(viewRot,viewTranslation));
            }
          }
 else           if (event instanceof MouseEvent3D) {
            MouseEvent mouse=(MouseEvent)((MouseEvent3D)event).getAwtEvent();
            if (mouse instanceof MouseWheelEvent) {
              int clicks=((MouseWheelEvent)mouse).getWheelRotation();
              offset.z-=cameraZoom * clicks;
              viewMoved(new CellTransform(viewRot,viewTranslation));
            }
 else             if (mouse.isControlDown()) {
              int diffX=mouse.getX() - mouseX;
              int diffY=mouse.getY() - mouseY;
              elevation+=Math.toRadians(diffY) / 4f;
              if (elevation > Math.PI / 2)               elevation=(float)Math.PI / 2;
 else               if (elevation < -Math.PI / 2)               elevation=-(float)Math.PI / 2;
              cameraLook.set(0,(float)Math.sin(elevation),1);
              cameraLook.normalize();
              mouseX=mouse.getX();
              mouseY=mouse.getY();
              update(avatarPos,avatarRot);
            }
 else {
              mouseX=mouse.getX();
              mouseY=mouse.getY();
            }
          }
        }
      }
;
    }
    ClientContextJME.getInputManager().addGlobalEventListener(listener);
  }
 else {
    ClientContextJME.getInputManager().removeGlobalEventListener(listener);
  }
}","public void setEnabled(boolean enabled,CameraNode cameraNode){
  if (this.enabled == enabled)   return;
  this.enabled=enabled;
  this.cameraNode=cameraNode;
  if (enabled) {
    if (listener == null) {
      listener=new EventClassFocusListener(){
        @Override public Class[] eventClassesToConsume(){
          return new Class[]{KeyEvent3D.class,MouseEvent3D.class};
        }
        @Override public void commitEvent(        Event event){
          if (event instanceof KeyEvent3D) {
            KeyEvent key=(KeyEvent)((KeyEvent3D)event).getAwtEvent();
            if (key.getKeyCode() == KeyEvent.VK_EQUALS) {
              offset.z+=cameraZoom;
              viewMoved(new CellTransform(viewRot,viewTranslation));
            }
 else             if (key.getKeyCode() == KeyEvent.VK_MINUS) {
              offset.z-=cameraZoom;
              viewMoved(new CellTransform(viewRot,viewTranslation));
            }
          }
 else           if (event instanceof MouseEvent3D) {
            MouseEvent mouse=(MouseEvent)((MouseEvent3D)event).getAwtEvent();
            if (mouse instanceof MouseWheelEvent) {
              int clicks=((MouseWheelEvent)mouse).getWheelRotation();
              offset.z-=cameraZoom * clicks;
              viewMoved(new CellTransform(viewRot,viewTranslation));
            }
 else             if (mouse.isControlDown()) {
              int diffX=mouse.getX() - mouseX;
              int diffY=mouse.getY() - mouseY;
              float scale=mouse.isShiftDown() ? 4f : 16f;
              elevation+=Math.toRadians(diffY) / scale;
              if (elevation > Math.PI / 2)               elevation=(float)Math.PI / 2;
 else               if (elevation < -Math.PI / 2)               elevation=-(float)Math.PI / 2;
              angle+=Math.toRadians(diffX) / scale;
              if (angle > Math.PI / 2)               angle=(float)Math.PI / 2;
 else               if (angle < -Math.PI / 2)               angle=-(float)Math.PI / 2;
              cameraLook.set((float)Math.sin(angle),(float)Math.sin(elevation),1);
              cameraLook.normalize();
              mouseX=mouse.getX();
              mouseY=mouse.getY();
              update(avatarPos,avatarRot);
            }
 else {
              mouseX=mouse.getX();
              mouseY=mouse.getY();
            }
          }
        }
      }
;
    }
    ClientContextJME.getInputManager().addGlobalEventListener(listener);
  }
 else {
    ClientContextJME.getInputManager().removeGlobalEventListener(listener);
  }
}"
45455,"@Override public void commitEvent(Event event){
  if (event instanceof KeyEvent3D) {
    KeyEvent key=(KeyEvent)((KeyEvent3D)event).getAwtEvent();
    if (key.getKeyCode() == KeyEvent.VK_EQUALS) {
      offset.z+=cameraZoom;
      viewMoved(new CellTransform(viewRot,viewTranslation));
    }
 else     if (key.getKeyCode() == KeyEvent.VK_MINUS) {
      offset.z-=cameraZoom;
      viewMoved(new CellTransform(viewRot,viewTranslation));
    }
  }
 else   if (event instanceof MouseEvent3D) {
    MouseEvent mouse=(MouseEvent)((MouseEvent3D)event).getAwtEvent();
    if (mouse instanceof MouseWheelEvent) {
      int clicks=((MouseWheelEvent)mouse).getWheelRotation();
      offset.z-=cameraZoom * clicks;
      viewMoved(new CellTransform(viewRot,viewTranslation));
    }
 else     if (mouse.isControlDown()) {
      int diffX=mouse.getX() - mouseX;
      int diffY=mouse.getY() - mouseY;
      elevation+=Math.toRadians(diffY) / 4f;
      if (elevation > Math.PI / 2)       elevation=(float)Math.PI / 2;
 else       if (elevation < -Math.PI / 2)       elevation=-(float)Math.PI / 2;
      cameraLook.set(0,(float)Math.sin(elevation),1);
      cameraLook.normalize();
      mouseX=mouse.getX();
      mouseY=mouse.getY();
      update(avatarPos,avatarRot);
    }
 else {
      mouseX=mouse.getX();
      mouseY=mouse.getY();
    }
  }
}","@Override public void commitEvent(Event event){
  if (event instanceof KeyEvent3D) {
    KeyEvent key=(KeyEvent)((KeyEvent3D)event).getAwtEvent();
    if (key.getKeyCode() == KeyEvent.VK_EQUALS) {
      offset.z+=cameraZoom;
      viewMoved(new CellTransform(viewRot,viewTranslation));
    }
 else     if (key.getKeyCode() == KeyEvent.VK_MINUS) {
      offset.z-=cameraZoom;
      viewMoved(new CellTransform(viewRot,viewTranslation));
    }
  }
 else   if (event instanceof MouseEvent3D) {
    MouseEvent mouse=(MouseEvent)((MouseEvent3D)event).getAwtEvent();
    if (mouse instanceof MouseWheelEvent) {
      int clicks=((MouseWheelEvent)mouse).getWheelRotation();
      offset.z-=cameraZoom * clicks;
      viewMoved(new CellTransform(viewRot,viewTranslation));
    }
 else     if (mouse.isControlDown()) {
      int diffX=mouse.getX() - mouseX;
      int diffY=mouse.getY() - mouseY;
      float scale=mouse.isShiftDown() ? 4f : 16f;
      elevation+=Math.toRadians(diffY) / scale;
      if (elevation > Math.PI / 2)       elevation=(float)Math.PI / 2;
 else       if (elevation < -Math.PI / 2)       elevation=-(float)Math.PI / 2;
      angle+=Math.toRadians(diffX) / scale;
      if (angle > Math.PI / 2)       angle=(float)Math.PI / 2;
 else       if (angle < -Math.PI / 2)       angle=-(float)Math.PI / 2;
      cameraLook.set((float)Math.sin(angle),(float)Math.sin(elevation),1);
      cameraLook.normalize();
      mouseX=mouse.getX();
      mouseY=mouse.getY();
      update(avatarPos,avatarRot);
    }
 else {
      mouseX=mouse.getX();
      mouseY=mouse.getY();
    }
  }
}"
45456,"/** 
 * @InternalAPI Set the default user directory.  This is useful in cases where multiple clients are running in the same VM, so changing the System property is not viable.  In other cases, the system property should be used.
 * @param userDirectory the user directory to use
 */
public static void setUserDirectory(File userDir){
  ClientContext.userDir=userDir;
}","/** 
 * @InternalAPI Set the default user directory.  This is useful in cases where multiple clients are running in the same VM, so changing the System property is not viable.  In other cases, the system property should be used.
 * @param userDirectory the user directory to use
 * @param save if true, save this value in a preference for future use
 */
public static void setUserDirectory(File userDir,boolean save){
  if (save) {
    Preferences prefs=Preferences.userNodeForPackage(ClientContext.class);
    prefs.put(USERDIR_PROP,userDir.getPath());
  }
  ClientContext.userDir=userDir;
}"
45457,"public void viewConfigured(LocalAvatar localAvatar){
  cell=localAvatar.getViewCell();
  if (cell == null) {
    logger.severe(""String_Node_Str"");
  }
 else {
    CellID cellID=cell.getCellID();
    presenceInfo=pm.getPresenceInfo(cellID);
    controls=new PresenceControls(this,session,pm,presenceInfo);
    logger.fine(""String_Node_Str"" + cellID + ""String_Node_Str""+ presenceInfo+ ""String_Node_Str""+ pm);
    connectSoftphone();
    if (cell.getComponent(ProximityComponent.class) == null) {
      cell.addComponent(new ProximityComponent(cell));
    }
    usersMenuSelected=true;
    userListJMenuItem.setSelected(usersMenuSelected);
    showUsers(null);
  }
}","public void viewConfigured(LocalAvatar localAvatar){
  cell=localAvatar.getViewCell();
  if (cell == null) {
    logger.severe(""String_Node_Str"");
  }
 else {
    CellID cellID=cell.getCellID();
    presenceInfo=pm.getPresenceInfo(cellID);
    controls=new PresenceControls(this,session,pm,presenceInfo);
    logger.fine(""String_Node_Str"" + cellID + ""String_Node_Str""+ presenceInfo+ ""String_Node_Str""+ pm);
    connectSoftphone();
    if (cell.getComponent(ProximityComponent.class) == null) {
      cell.addComponent(new ProximityComponent(cell));
    }
    usersMenuSelected=true;
    SwingUtilities.invokeLater(new Runnable(){
      public void run(){
        userListJMenuItem.setSelected(usersMenuSelected);
        showUsers(null);
      }
    }
);
  }
}"
45458,"/** 
 * Set a list of bounds for which the system will track view enter/exit for this cell. When the view enters/exits one of these bounds the listener will be called with the index of the bounds in the supplied array. The bounds must be ordered from largest to smallest, thus localBounds[i] must enclose localBounds[i+1]
 * @param cell the cell
 */
public ProximityComponent(Cell cell){
  super(cell);
}","/** 
 * Set a list of bounds for which the system will track view enter/exit for this cell. When the view enters/exits one of these bounds the listener will be called with the index of the bounds in the supplied array. The bounds must be ordered from largest to smallest, thus localBounds[i] must enclose localBounds[i+1]
 * @param cell the cell
 */
public ProximityComponent(Cell cell){
  super(cell);
  viewTransformListener=new ViewTransformListener();
  cellTransformListener=new CellTransformListener();
}"
45459,"/** 
 * Add a proximity listener.
 * @param listener the listener that will be notified
 * @param localBounds the array of bounds (in cell local coordinates) for which the listener will be notified
 */
public void addProximityListener(ProximityListener listener,BoundingVolume[] localBounds){
synchronized (listenerRecords) {
    ProximityListenerRecord lr=new ProximityListenerRecord(new ClientProximityListenerWrapper(cell,listener),localBounds);
    listenerRecords.add(lr);
    if (status != null && status.ordinal() >= CellStatus.ACTIVE.ordinal())     lr.updateWorldBounds(cell.getWorldTransform());
  }
}","/** 
 * Add a proximity listener.
 * @param listener the listener that will be notified
 * @param localBounds the array of bounds (in cell local coordinates) for which the listener will be notified
 */
public void addProximityListener(ProximityListener listener,BoundingVolume[] localBounds){
synchronized (listenerRecords) {
    ProximityListenerRecord lr=new ProximityListenerRecord(new ClientProximityListenerWrapper(cell,listener),localBounds);
    listenerRecords.add(lr);
    if (status != null && status.ordinal() >= CellStatus.ACTIVE.ordinal()) {
      lr.updateWorldBounds(cell.getWorldTransform());
      Cell viewCell=ClientContextJME.getViewManager().getPrimaryViewCell();
      if (viewCell != null) {
        lr.viewCellMoved(viewCell.getCellID(),viewCell.getWorldTransform());
      }
    }
  }
}"
45460,"@Override protected void setStatus(CellStatus status,boolean increasing){
synchronized (listenerRecords) {
    super.setStatus(status,increasing);
switch (status) {
case ACTIVE:
      if (increasing) {
        if (viewTransformListener == null) {
          viewTransformListener=new ViewTransformListener();
          cellTransformListener=new CellTransformListener();
        }
        CellTransform worldTransform=cell.getWorldTransform();
        for (        ProximityListenerRecord l : listenerRecords)         l.updateWorldBounds(worldTransform);
        cell.getCellCache().getViewCell().addTransformChangeListener(viewTransformListener);
        cell.addTransformChangeListener(cellTransformListener);
      }
    break;
case DISK:
  if (viewTransformListener != null) {
    if (cell.getCellCache().getViewCell() != null) {
      cell.getCellCache().getViewCell().removeTransformChangeListener(viewTransformListener);
    }
    cell.removeTransformChangeListener(cellTransformListener);
  }
break;
}
}
}","@Override protected void setStatus(CellStatus status,boolean increasing){
synchronized (listenerRecords) {
    super.setStatus(status,increasing);
    ViewManager vm=ClientContextJME.getViewManager();
switch (status) {
case ACTIVE:
      if (increasing) {
        CellTransform worldTransform=cell.getWorldTransform();
        for (        ProximityListenerRecord l : listenerRecords)         l.updateWorldBounds(worldTransform);
        vm.addViewManagerListener(this);
        primaryViewCellChanged(null,vm.getPrimaryViewCell());
        cell.addTransformChangeListener(cellTransformListener);
      }
    break;
case DISK:
  if (viewTransformListener != null) {
    vm.removeViewManagerListener(this);
    primaryViewCellChanged(vm.getPrimaryViewCell(),null);
    cell.removeTransformChangeListener(cellTransformListener);
  }
break;
}
}
}"
45461,"/** 
 * Update local2VWorld and bounds of child and all its children recursively  to reflect changes in a parent
 * @param parent
 * @param child
 * @return the combined bounds of the child and all it's children
 */
private BoundingVolume transformTreeUpdate(Cell parent,Cell child,TransformChangeListener.ChangeSource source){
  CellTransform parentWorldTransform=parent.getWorldTransform();
  CellTransform childTransform=child.getLocalTransform();
  if (childTransform != null) {
    childTransform.mul(parentWorldTransform);
    child.setWorldTransform(childTransform,source);
  }
 else {
    child.setWorldTransform(parentWorldTransform,source);
  }
  BoundingVolume ret=child.getWorldBounds();
  Iterator<Cell> it=child.getChildren().iterator();
  while (it.hasNext()) {
    ret.mergeLocal(transformTreeUpdate(child,it.next(),source));
  }
  child.setWorldBounds(ret);
  return null;
}","/** 
 * Update local2VWorld and bounds of child and all its children recursively  to reflect changes in a parent
 * @param parent
 * @param child
 * @return the combined bounds of the child and all it's children
 */
private BoundingVolume transformTreeUpdate(Cell parent,Cell child,TransformChangeListener.ChangeSource source){
  CellTransform parentWorldTransform=parent.getWorldTransform();
  CellTransform childTransform=child.getLocalTransform();
  if (childTransform != null) {
    childTransform=parentWorldTransform.mul(childTransform);
    child.setWorldTransform(childTransform,source);
  }
 else {
    child.setWorldTransform(parentWorldTransform,source);
  }
  BoundingVolume ret=child.getWorldBounds();
  Iterator<Cell> it=child.getChildren().iterator();
  while (it.hasNext()) {
    ret.mergeLocal(transformTreeUpdate(child,it.next(),source));
  }
  child.setWorldBounds(ret);
  return null;
}"
45462,"/** 
 * Set the localToVWorld transform for this cell
 * @param localToVWorld
 */
void setWorldTransform(CellTransform worldTransform,TransformChangeListener.ChangeSource source){
  worldTransform=(CellTransform)worldTransform.clone(null);
  cachedVWBounds=localBounds.clone(cachedVWBounds);
  worldTransform.transform(cachedVWBounds);
  local2VW=null;
  notifyTransformChangeListeners(source);
}","/** 
 * Set the localToVWorld transform for this cell
 * @param localToVWorld
 */
void setWorldTransform(CellTransform worldTransform,TransformChangeListener.ChangeSource source){
  this.worldTransform=(CellTransform)worldTransform.clone(null);
  cachedVWBounds=localBounds.clone(cachedVWBounds);
  worldTransform.transform(cachedVWBounds);
  local2VW=null;
  notifyTransformChangeListeners(source);
}"
45463,"/** 
 * Returns the distance away to play a Cell so that its horizontal bounds are entirely in-view. Takes the bounding volume of the Cell and a field- of-view of the viewer (in degrees). Assumes the bounding volume is either a sphere or box, if not, assumes it has a radius of 1.0. <p> This method assumes the Cell is rotated so that, with respect to the viewer, the +x axis is to the right, the +y axis is up, and the +z axis is towards the viewer. <p> This distance returned is at least 'minDistance' away from the viewer and at most 'maxDistance' away from the viewer. If the value for the minimum distance is -1, there is no minimum distance. If the maximum distance is -1, there is no maximum distance. Note that the maximum distance takes precendence over the minimum distance: that is, the Cell may be placed closer than the minimum distance if it exceeds the maximum distance.
 * @param bounds The bounding volume of the Cell
 * @param fieldOfView The field-of-view of the viewer (in degrees)
 * @param minDistance The minimum distance away from the viewer that thefront face of the Cell may be, or -1 for no minimum distance
 * @param maxDistance The maximum distance away from the viewer that thefront face of the Cell may be, or -1 for no maximim distance
 * @return The distance away to place the Cell so that the horizontal boundsare entirely within view.
 */
public static float getDistance(BoundingVolume bounds,float fieldOfView,float minDistance,float maxDistance){
  float alongRadius=1.0f;
  float crossRadius=1.0f;
  if (bounds instanceof BoundingSphere) {
    alongRadius=crossRadius=((BoundingSphere)bounds).radius;
  }
 else   if (bounds instanceof BoundingBox) {
    alongRadius=((BoundingBox)bounds).xExtent;
    crossRadius=((BoundingBox)bounds).zExtent;
  }
  double eyeDist=alongRadius / Math.tan(fieldOfView / 2.0);
  eyeDist+=crossRadius;
  if (minDistance != -1) {
    eyeDist=Math.max(eyeDist,minDistance);
  }
  if (maxDistance != -1) {
    eyeDist=Math.min(eyeDist,maxDistance);
  }
  return (float)eyeDist;
}","/** 
 * Returns the distance away to play a Cell so that its horizontal bounds are entirely in-view. Takes the bounding volume of the Cell and a field- of-view of the viewer (in degrees). Assumes the bounding volume is either a sphere or box, if not, assumes it has a radius of 1.0. <p> This method assumes the Cell is rotated so that, with respect to the viewer, the +x axis is to the right, the +y axis is up, and the +z axis is towards the viewer. <p> This distance returned is at least 'minDistance' away from the viewer and at most 'maxDistance' away from the viewer. If the value for the minimum distance is -1, there is no minimum distance. If the maximum distance is -1, there is no maximum distance. Note that the maximum distance takes precendence over the minimum distance: that is, the Cell may be placed closer than the minimum distance if it exceeds the maximum distance.
 * @param bounds The bounding volume of the Cell
 * @param fieldOfView The field-of-view of the viewer (in degrees)
 * @param minDistance The minimum distance away from the viewer that thefront face of the Cell may be, or -1 for no minimum distance
 * @param maxDistance The maximum distance away from the viewer that thefront face of the Cell may be, or -1 for no maximim distance
 * @return The distance away to place the Cell so that the horizontal boundsare entirely within view.
 */
public static float getDistance(BoundingVolume bounds,float fieldOfView,float minDistance,float maxDistance){
  float alongRadius=1.0f;
  float crossRadius=1.0f;
  if (bounds instanceof BoundingSphere) {
    alongRadius=crossRadius=((BoundingSphere)bounds).radius;
  }
 else   if (bounds instanceof BoundingBox) {
    alongRadius=((BoundingBox)bounds).xExtent;
    crossRadius=((BoundingBox)bounds).zExtent;
  }
  double eyeDist=alongRadius / Math.tan(Math.toRadians(fieldOfView / 2.0));
  eyeDist+=crossRadius;
  if (minDistance != -1) {
    eyeDist=Math.max(eyeDist,minDistance);
  }
  if (maxDistance != -1) {
    eyeDist=Math.min(eyeDist,maxDistance);
  }
  return (float)eyeDist;
}"
45464,"/** 
 * Create all of the Swing windows - and the 3D window
 */
private void createUI(WorldManager wm){
  frame=new MainFrameImpl(wm,width,height);
  frame.getFrame().setLocationRelativeTo(null);
  frame.getFrame().setVisible(true);
  JPanel canvas3D=frame.getCanvas3DPanel();
  ViewManager.initialize(canvas3D.getWidth(),canvas3D.getHeight());
  ViewManager viewManager=ViewManager.getViewManager();
  viewManager.attachViewCanvas(canvas3D);
  CameraComponent cameraComp=viewManager.getCameraComponent();
  InputManager inputManager=ClientContext.getInputManager();
  inputManager.initialize(frame.getCanvas(),cameraComp);
  inputManager.addKeyMouseFocus(inputManager.getGlobalFocusEntity());
  SceneWorker.addWorker(new WorkCommit(){
    public void commit(){
      Thread.currentThread().setUncaughtExceptionHandler(ueh);
    }
  }
);
  frame.setDesiredFrameRate(desiredFrameRate);
}","/** 
 * Create all of the Swing windows - and the 3D window
 */
private void createUI(WorldManager wm,int width,int height){
  frame=new MainFrameImpl(wm,width,height);
  frame.getFrame().setLocationRelativeTo(null);
  frame.getFrame().setVisible(true);
  JPanel canvas3D=frame.getCanvas3DPanel();
  ViewManager.initialize(canvas3D.getWidth(),canvas3D.getHeight());
  ViewManager viewManager=ViewManager.getViewManager();
  viewManager.attachViewCanvas(canvas3D);
  CameraComponent cameraComp=viewManager.getCameraComponent();
  InputManager inputManager=ClientContext.getInputManager();
  inputManager.initialize(frame.getCanvas(),cameraComp);
  inputManager.addKeyMouseFocus(inputManager.getGlobalFocusEntity());
  SceneWorker.addWorker(new WorkCommit(){
    public void commit(){
      Thread.currentThread().setUncaughtExceptionHandler(ueh);
    }
  }
);
  frame.setDesiredFrameRate(desiredFrameRate);
  canvas3D.invalidate();
  frame.getFrame().getContentPane().validate();
}"
45465,"/** 
 * creates a new JmeClientMain
 * @param args the command line arguments
 */
public JmeClientMain(String[] args){
  detectOS();
  checkVmVersion();
  processArgs(args);
  URL propsURL=getPropsURL();
  loadProperties(propsURL);
  userPreferences=Preferences.userNodeForPackage(JmeClientMain.class);
  checkDBException();
  ClientContextJME.setClientMain(this);
  String windowSize=System.getProperty(WINDOW_SIZE_PROP,WINDOW_SIZE_DEFAULT);
  try {
    if (windowSize.equalsIgnoreCase(""String_Node_Str"")) {
      GraphicsEnvironment ge=GraphicsEnvironment.getLocalGraphicsEnvironment();
      GraphicsDevice[] gs=ge.getScreenDevices();
      if (gs.length > 1) {
        LOGGER.warning(""String_Node_Str"");
      }
      GraphicsConfiguration gc=gs[0].getDefaultConfiguration();
      Rectangle size=gc.getBounds();
      width=size.width;
      height=size.height;
    }
 else {
      String sizeWidth=windowSize.substring(0,windowSize.indexOf('x'));
      String sizeHeight=windowSize.substring(windowSize.indexOf('x') + 1);
      width=Integer.parseInt(sizeWidth);
      height=Integer.parseInt(sizeHeight);
    }
  }
 catch (  Exception e) {
    LOGGER.warning(WINDOW_SIZE_PROP + ""String_Node_Str"" + ""String_Node_Str""+ windowSize);
  }
  String serverURL=System.getProperty(SERVER_URL_PROP);
  if (serverURL == null) {
    serverURL=SERVER_URL_DEFAULT;
    System.setProperty(SERVER_URL_PROP,serverURL);
  }
  Clip clip2=Clip.create(1000,new TimingTarget(){
    public void timingEvent(    float arg0,    long arg1){
    }
    public void begin(){
    }
    public void end(){
    }
    public void pause(){
    }
    public void resume(){
    }
  }
);
  clip2.setInterpolator(Interpolators.getEasingInstance(0.4f,0.4f));
  clip2.start();
  WorldManager worldManager=ClientContextJME.getWorldManager();
  String requestedFPS=null;
  try {
    if (userPreferences.node(userPreferences.absolutePath()).get(""String_Node_Str"",null) != null) {
      requestedFPS=userPreferences.get(""String_Node_Str"",DESIRED_FPS_DEFAULT);
    }
 else {
      requestedFPS=System.getProperty(DESIRED_FPS_PROP,DESIRED_FPS_DEFAULT);
    }
  }
 catch (  Exception e) {
  }
  if (requestedFPS != null) {
    try {
      desiredFrameRate=Integer.parseInt(requestedFPS);
    }
 catch (    NumberFormatException e) {
      LOGGER.warning(DESIRED_FPS_PROP + ""String_Node_Str"" + requestedFPS+ ""String_Node_Str"");
    }
  }
  worldManager.getRenderManager().setDesiredFrameRate(desiredFrameRate);
  createUI(worldManager);
  login=new JmeLoginUI(frame);
  LoginManager.setLoginUI(login);
  frame.addServerURLListener(new ServerURLListener(){
    public void serverURLChanged(    final String serverURL){
      new Thread(ThreadManager.getThreadGroup(),new Runnable(){
        public void run(){
          try {
            loadServer(serverURL);
          }
 catch (          IOException ioe) {
            LOGGER.log(Level.WARNING,""String_Node_Str"" + serverURL,ioe);
          }
        }
      }
).start();
    }
    public void logout(){
      new Thread(ThreadManager.getThreadGroup(),new Runnable(){
        public void run(){
          JmeClientMain.this.logout();
        }
      }
).start();
    }
  }
);
  float startX=Float.parseFloat(System.getProperty(""String_Node_Str"",""String_Node_Str""));
  float startY=Float.parseFloat(System.getProperty(""String_Node_Str"",""String_Node_Str""));
  float startZ=Float.parseFloat(System.getProperty(""String_Node_Str"",""String_Node_Str""));
  Vector3f startLoc=new Vector3f(startX,startY,startZ);
  float look=Float.parseFloat(System.getProperty(""String_Node_Str"",""String_Node_Str""));
  Quaternion startLook=new Quaternion(new float[]{0f,(float)Math.toRadians(look),0f});
  try {
    loadServer(serverURL,startLoc,startLook);
  }
 catch (  IOException ioe) {
    LOGGER.log(Level.WARNING,""String_Node_Str"" + serverURL,ioe);
  }
}","/** 
 * creates a new JmeClientMain
 * @param args the command line arguments
 */
public JmeClientMain(String[] args){
  detectOS();
  checkVmVersion();
  processArgs(args);
  URL propsURL=getPropsURL();
  loadProperties(propsURL);
  userPreferences=Preferences.userNodeForPackage(JmeClientMain.class);
  checkDBException();
  ClientContextJME.setClientMain(this);
  String windowSize=System.getProperty(WINDOW_SIZE_PROP,WINDOW_SIZE_DEFAULT);
  int width=DEFAULT_WIDTH;
  int height=DEFAULT_HEIGHT;
  try {
    if (windowSize.equalsIgnoreCase(""String_Node_Str"")) {
      width=-1;
      height=-1;
    }
 else {
      String sizeWidth=windowSize.substring(0,windowSize.indexOf('x'));
      String sizeHeight=windowSize.substring(windowSize.indexOf('x') + 1);
      width=Integer.parseInt(sizeWidth);
      height=Integer.parseInt(sizeHeight);
    }
  }
 catch (  Exception e) {
    LOGGER.warning(WINDOW_SIZE_PROP + ""String_Node_Str"" + ""String_Node_Str""+ windowSize);
  }
  String serverURL=System.getProperty(SERVER_URL_PROP);
  if (serverURL == null) {
    serverURL=SERVER_URL_DEFAULT;
    System.setProperty(SERVER_URL_PROP,serverURL);
  }
  Clip clip2=Clip.create(1000,new TimingTarget(){
    public void timingEvent(    float arg0,    long arg1){
    }
    public void begin(){
    }
    public void end(){
    }
    public void pause(){
    }
    public void resume(){
    }
  }
);
  clip2.setInterpolator(Interpolators.getEasingInstance(0.4f,0.4f));
  clip2.start();
  WorldManager worldManager=ClientContextJME.getWorldManager();
  String requestedFPS=null;
  try {
    if (userPreferences.node(userPreferences.absolutePath()).get(""String_Node_Str"",null) != null) {
      requestedFPS=userPreferences.get(""String_Node_Str"",DESIRED_FPS_DEFAULT);
    }
 else {
      requestedFPS=System.getProperty(DESIRED_FPS_PROP,DESIRED_FPS_DEFAULT);
    }
  }
 catch (  Exception e) {
  }
  if (requestedFPS != null) {
    try {
      desiredFrameRate=Integer.parseInt(requestedFPS);
    }
 catch (    NumberFormatException e) {
      LOGGER.warning(DESIRED_FPS_PROP + ""String_Node_Str"" + requestedFPS+ ""String_Node_Str"");
    }
  }
  worldManager.getRenderManager().setDesiredFrameRate(desiredFrameRate);
  createUI(worldManager,width,height);
  login=new JmeLoginUI(frame);
  LoginManager.setLoginUI(login);
  frame.addServerURLListener(new ServerURLListener(){
    public void serverURLChanged(    final String serverURL){
      new Thread(ThreadManager.getThreadGroup(),new Runnable(){
        public void run(){
          try {
            loadServer(serverURL);
          }
 catch (          IOException ioe) {
            LOGGER.log(Level.WARNING,""String_Node_Str"" + serverURL,ioe);
          }
        }
      }
).start();
    }
    public void logout(){
      new Thread(ThreadManager.getThreadGroup(),new Runnable(){
        public void run(){
          JmeClientMain.this.logout();
        }
      }
).start();
    }
  }
);
  float startX=Float.parseFloat(System.getProperty(""String_Node_Str"",""String_Node_Str""));
  float startY=Float.parseFloat(System.getProperty(""String_Node_Str"",""String_Node_Str""));
  float startZ=Float.parseFloat(System.getProperty(""String_Node_Str"",""String_Node_Str""));
  Vector3f startLoc=new Vector3f(startX,startY,startZ);
  float look=Float.parseFloat(System.getProperty(""String_Node_Str"",""String_Node_Str""));
  Quaternion startLook=new Quaternion(new float[]{0f,(float)Math.toRadians(look),0f});
  try {
    loadServer(serverURL,startLoc,startLook);
  }
 catch (  IOException ioe) {
    LOGGER.log(Level.WARNING,""String_Node_Str"" + serverURL,ioe);
  }
}"
45466,"/** 
 * Create a cell based upon the uri of the content and the file extension of the uploaded file.
 * @param uri The URI of the uploaded content
 */
public static void createCell(String uri){
  String extension=getFileExtension(uri);
  if (extension == null) {
    LOGGER.warning(""String_Node_Str"" + uri);
    return;
  }
  CellSelectionSPI spi=CellSelectionRegistry.getCellSelectionSPI();
  if (spi == null) {
    final JFrame frame=JmeClientMain.getFrame().getFrame();
    LOGGER.warning(""String_Node_Str"");
    String message=BUNDLE.getString(""String_Node_Str"");
    message=MessageFormat.format(message,uri);
    JOptionPane.showMessageDialog(frame,message,BUNDLE.getString(""String_Node_Str""),JOptionPane.ERROR_MESSAGE);
    return;
  }
  CellFactorySPI factory=null;
  try {
    factory=spi.getCellSelection(extension);
  }
 catch (  CellCreationException excp) {
    final JFrame frame=JmeClientMain.getFrame().getFrame();
    LOGGER.log(Level.WARNING,""String_Node_Str"" + extension,excp);
    String message=BUNDLE.getString(""String_Node_Str"");
    message=MessageFormat.format(message,uri);
    JOptionPane.showMessageDialog(frame,message,BUNDLE.getString(""String_Node_Str""),JOptionPane.ERROR_MESSAGE);
    return;
  }
  if (factory == null) {
    return;
  }
  Properties props=new Properties();
  props.put(""String_Node_Str"",uri);
  CellServerState state=factory.getDefaultCellServerState(props);
  try {
    CellUtils.createCell(state);
  }
 catch (  CellCreationException excp) {
    LOGGER.log(Level.WARNING,""String_Node_Str"" + uri,excp);
  }
}","/** 
 * Create a cell based upon the uri of the content and the file extension of the uploaded file.
 * @param uri The URI of the uploaded content
 */
public static void createCell(String uri){
  String extension=getFileExtension(uri);
  if (extension == null) {
    LOGGER.warning(""String_Node_Str"" + uri);
    return;
  }
  CellSelectionSPI spi=CellSelectionRegistry.getCellSelectionSPI();
  if (spi == null) {
    final JFrame frame=JmeClientMain.getFrame().getFrame();
    LOGGER.warning(""String_Node_Str"");
    String message=BUNDLE.getString(""String_Node_Str"");
    message=MessageFormat.format(message,uri);
    JOptionPane.showMessageDialog(frame,message,BUNDLE.getString(""String_Node_Str""),JOptionPane.ERROR_MESSAGE);
    return;
  }
  CellFactorySPI factory=null;
  try {
    factory=spi.getCellSelection(extension);
  }
 catch (  CellCreationException excp) {
    final JFrame frame=JmeClientMain.getFrame().getFrame();
    LOGGER.log(Level.WARNING,""String_Node_Str"" + extension);
    String message=BUNDLE.getString(""String_Node_Str"");
    message=MessageFormat.format(message,uri);
    JOptionPane.showMessageDialog(frame,message,BUNDLE.getString(""String_Node_Str""),JOptionPane.ERROR_MESSAGE);
    return;
  }
  if (factory == null) {
    return;
  }
  Properties props=new Properties();
  props.put(""String_Node_Str"",uri);
  CellServerState state=factory.getDefaultCellServerState(props);
  try {
    CellUtils.createCell(state);
  }
 catch (  CellCreationException excp) {
    LOGGER.log(Level.WARNING,""String_Node_Str"" + uri,excp);
  }
}"
45467,"public void avatarChanged(Avatar newAvatar){
  if (camState != null) {
    avatarCellRenderer.removeAvatarChangedListener(avatarChangedListener);
    if (newAvatar.getContext() != null) {
      camState.setTargetCharacter(newAvatar);
    }
 else {
      camState.setTargetCharacter(null);
    }
    ViewManager viewManager=ViewManager.getViewManager();
    ViewCell viewCell=viewManager.getPrimaryViewCell();
    CellTransform transform=viewCell.getWorldTransform();
    Vector3f translation=transform.getTranslation(null);
    Vector3f offset=new Vector3f(0.0f,4.0f,-10.0f);
    camState.setCameraPosition(translation.add(offset));
  }
}","public void avatarChanged(Avatar newAvatar){
  if (camState != null) {
    avatarCellRenderer.removeAvatarChangedListener(avatarChangedListener);
    if (newAvatar.getContext() != null) {
      camState.setTargetCharacter(newAvatar);
    }
 else {
      camState.setTargetCharacter(null);
    }
    ViewManager viewManager=ViewManager.getViewManager();
    ViewCell viewCell=viewManager.getPrimaryViewCell();
    CellTransform transform=viewCell.getWorldTransform();
    Vector3f translation=transform.getTranslation(null);
    Vector3f offset=new Vector3f(0.0f,4.0f,-10.0f);
    camState.setCameraPosition(translation.add(offset));
  }
  if (gestureHUDRef != null && gestureHUDRef.get() != null) {
    if (newAvatar instanceof WlAvatarCharacter) {
      gestureHUDRef.get().setAvatarCharacter((WlAvatarCharacter)newAvatar);
    }
 else {
      gestureHUDRef.get().setVisible(false);
    }
  }
}"
45468,"/** 
 */
@Override public void initialize(ServerSessionManager manager){
  loaderMap=new HashMap();
  avatarChangedListener=new AvatarChangedListener(){
    public void avatarChanged(    Avatar newAvatar){
      if (camState != null) {
        avatarCellRenderer.removeAvatarChangedListener(avatarChangedListener);
        if (newAvatar.getContext() != null) {
          camState.setTargetCharacter(newAvatar);
        }
 else {
          camState.setTargetCharacter(null);
        }
        ViewManager viewManager=ViewManager.getViewManager();
        ViewCell viewCell=viewManager.getPrimaryViewCell();
        CellTransform transform=viewCell.getWorldTransform();
        Vector3f translation=transform.getTranslation(null);
        Vector3f offset=new Vector3f(0.0f,4.0f,-10.0f);
        camState.setCameraPosition(translation.add(offset));
      }
    }
  }
;
  chaseCameraMI=new JRadioButtonMenuItem(bundle.getString(""String_Node_Str""));
  chaseCameraMI.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent arg0){
      ViewManager viewManager=ViewManager.getViewManager();
      ViewCell viewCell=viewManager.getPrimaryViewCell();
      CellTransform transform=viewCell.getWorldTransform();
      Vector3f translation=transform.getTranslation(null);
      Vector3f offset=new Vector3f(0.0f,4.0f,-10.0f);
      if (camState == null) {
        camModel=(ChaseCamModel)CameraModels.getCameraModel(ChaseCamModel.class);
        camState=new ChaseCamState(offset,new Vector3f(0.0f,1.8f,0.0f));
        camState.setDamping(1.7f);
        camState.setLookAtDamping(1.7f);
      }
      camState.setCameraPosition(translation.add(offset));
      camState.setTargetCharacter(avatarCellRenderer.getAvatarCharacter());
      FlexibleCameraAdapter chaseCamera=new FlexibleCameraAdapter(camModel,camState);
      viewManager.setCameraController(chaseCamera);
    }
  }
);
  gestureMI=new JCheckBoxMenuItem(bundle.getString(""String_Node_Str""));
  gestureMI.setSelected(false);
  gestureMI.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      if (gestureHUDRef == null || gestureHUDRef.get() == null) {
        GestureHUD hud=new GestureHUD();
        hud.setAvatarCharacter(avatarCellRenderer.getAvatarCharacter());
        gestureHUDRef=new WeakReference(hud);
      }
      gestureHUDEnabled=!gestureHUDEnabled;
      gestureMI.setSelected(gestureHUDEnabled);
      ((GestureHUD)gestureHUDRef.get()).setVisible(gestureHUDEnabled);
    }
  }
);
  avatarConfigMI=new JMenuItem(bundle.getString(""String_Node_Str""));
  avatarConfigMI.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      AvatarConfigFrame f=new AvatarConfigFrame();
      f.setVisible(true);
    }
  }
);
  collisionResponseEnabledMI=new JCheckBoxMenuItem(bundle.getString(""String_Node_Str""));
  collisionResponseEnabledMI.setSelected(true);
  collisionResponseEnabledMI.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      boolean isCollisionResponse=collisionResponseEnabledMI.isSelected();
      boolean isGravity=gravityEnabledMI.isSelected();
      ClientContext.getInputManager().postEvent(new AvatarCollisionChangeRequestEvent(isCollisionResponse,isGravity));
    }
  }
);
  gravityEnabledMI=new JCheckBoxMenuItem(bundle.getString(""String_Node_Str""));
  gravityEnabledMI.setSelected(true);
  gravityEnabledMI.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      boolean isCollisionResponse=collisionResponseEnabledMI.isSelected();
      boolean isGravity=gravityEnabledMI.isSelected();
      ClientContext.getInputManager().postEvent(new AvatarCollisionChangeRequestEvent(isCollisionResponse,isGravity));
    }
  }
);
  ctxListener=new ContextMenuListener(){
    public void contextMenuDisplayed(    ContextMenuEvent event){
      if (!(event.getPrimaryCell() instanceof AvatarCell)) {
        return;
      }
      ContextMenuInvocationSettings settings=event.getSettings();
      settings.setDisplayStandard(false);
      settings.setDisplayCellStandard(false);
      AvatarCell cell=(AvatarCell)event.getPrimaryCell();
      settings.setMenuName(cell.getIdentity().getUsername());
      if (cell == ViewManager.getViewManager().getPrimaryViewCell()) {
        settings.addTempFactory(new ConfigureContextMenuFactory());
      }
    }
  }
;
  ClientContextJME.getAvatarRenderManager().registerRenderer(manager,AvatarImiJME.class,AvatarControls.class);
  try {
    String serverHostAndPort=manager.getServerNameAndPort();
    String baseURL=""String_Node_Str"";
    URL url=AssetUtils.getAssetURL(baseURL,serverHostAndPort);
    WorldManager worldManager=ClientContextJME.getWorldManager();
    worldManager.addUserData(Repository.class,new Repository(worldManager,new WonderlandAvatarCache(url.toExternalForm(),ClientContext.getUserDirectory(""String_Node_Str""))));
  }
 catch (  MalformedURLException excp) {
    logger.log(Level.WARNING,""String_Node_Str"",excp);
  }
catch (  Exception e) {
    logger.log(Level.SEVERE,""String_Node_Str"",e);
  }
  AvatarSystem.initialize(ClientContextJME.getWorldManager());
  super.initialize(manager);
}","/** 
 */
@Override public void initialize(ServerSessionManager manager){
  loaderMap=new HashMap();
  avatarChangedListener=new AvatarChangedListener(){
    public void avatarChanged(    Avatar newAvatar){
      if (camState != null) {
        avatarCellRenderer.removeAvatarChangedListener(avatarChangedListener);
        if (newAvatar.getContext() != null) {
          camState.setTargetCharacter(newAvatar);
        }
 else {
          camState.setTargetCharacter(null);
        }
        ViewManager viewManager=ViewManager.getViewManager();
        ViewCell viewCell=viewManager.getPrimaryViewCell();
        CellTransform transform=viewCell.getWorldTransform();
        Vector3f translation=transform.getTranslation(null);
        Vector3f offset=new Vector3f(0.0f,4.0f,-10.0f);
        camState.setCameraPosition(translation.add(offset));
      }
      if (gestureHUDRef != null && gestureHUDRef.get() != null) {
        if (newAvatar instanceof WlAvatarCharacter) {
          gestureHUDRef.get().setAvatarCharacter((WlAvatarCharacter)newAvatar);
        }
 else {
          gestureHUDRef.get().setVisible(false);
        }
      }
    }
  }
;
  chaseCameraMI=new JRadioButtonMenuItem(bundle.getString(""String_Node_Str""));
  chaseCameraMI.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent arg0){
      ViewManager viewManager=ViewManager.getViewManager();
      ViewCell viewCell=viewManager.getPrimaryViewCell();
      CellTransform transform=viewCell.getWorldTransform();
      Vector3f translation=transform.getTranslation(null);
      Vector3f offset=new Vector3f(0.0f,4.0f,-10.0f);
      if (camState == null) {
        camModel=(ChaseCamModel)CameraModels.getCameraModel(ChaseCamModel.class);
        camState=new ChaseCamState(offset,new Vector3f(0.0f,1.8f,0.0f));
        camState.setDamping(1.7f);
        camState.setLookAtDamping(1.7f);
      }
      camState.setCameraPosition(translation.add(offset));
      camState.setTargetCharacter(avatarCellRenderer.getAvatarCharacter());
      FlexibleCameraAdapter chaseCamera=new FlexibleCameraAdapter(camModel,camState);
      viewManager.setCameraController(chaseCamera);
    }
  }
);
  gestureMI=new JCheckBoxMenuItem(bundle.getString(""String_Node_Str""));
  gestureMI.setSelected(false);
  gestureMI.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      if (gestureHUDRef == null || gestureHUDRef.get() == null) {
        GestureHUD hud=new GestureHUD();
        hud.setAvatarCharacter(avatarCellRenderer.getAvatarCharacter());
        gestureHUDRef=new WeakReference(hud);
      }
      gestureHUDEnabled=!gestureHUDEnabled;
      gestureMI.setSelected(gestureHUDEnabled);
      ((GestureHUD)gestureHUDRef.get()).setVisible(gestureHUDEnabled);
    }
  }
);
  avatarConfigMI=new JMenuItem(bundle.getString(""String_Node_Str""));
  avatarConfigMI.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      AvatarConfigFrame f=new AvatarConfigFrame();
      f.setVisible(true);
    }
  }
);
  collisionResponseEnabledMI=new JCheckBoxMenuItem(bundle.getString(""String_Node_Str""));
  collisionResponseEnabledMI.setSelected(true);
  collisionResponseEnabledMI.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      boolean isCollisionResponse=collisionResponseEnabledMI.isSelected();
      boolean isGravity=gravityEnabledMI.isSelected();
      ClientContext.getInputManager().postEvent(new AvatarCollisionChangeRequestEvent(isCollisionResponse,isGravity));
    }
  }
);
  gravityEnabledMI=new JCheckBoxMenuItem(bundle.getString(""String_Node_Str""));
  gravityEnabledMI.setSelected(true);
  gravityEnabledMI.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      boolean isCollisionResponse=collisionResponseEnabledMI.isSelected();
      boolean isGravity=gravityEnabledMI.isSelected();
      ClientContext.getInputManager().postEvent(new AvatarCollisionChangeRequestEvent(isCollisionResponse,isGravity));
    }
  }
);
  ctxListener=new ContextMenuListener(){
    public void contextMenuDisplayed(    ContextMenuEvent event){
      if (!(event.getPrimaryCell() instanceof AvatarCell)) {
        return;
      }
      ContextMenuInvocationSettings settings=event.getSettings();
      settings.setDisplayStandard(false);
      settings.setDisplayCellStandard(false);
      AvatarCell cell=(AvatarCell)event.getPrimaryCell();
      settings.setMenuName(cell.getIdentity().getUsername());
      if (cell == ViewManager.getViewManager().getPrimaryViewCell()) {
        settings.addTempFactory(new ConfigureContextMenuFactory());
      }
    }
  }
;
  ClientContextJME.getAvatarRenderManager().registerRenderer(manager,AvatarImiJME.class,AvatarControls.class);
  try {
    String serverHostAndPort=manager.getServerNameAndPort();
    String baseURL=""String_Node_Str"";
    URL url=AssetUtils.getAssetURL(baseURL,serverHostAndPort);
    WorldManager worldManager=ClientContextJME.getWorldManager();
    worldManager.addUserData(Repository.class,new Repository(worldManager,new WonderlandAvatarCache(url.toExternalForm(),ClientContext.getUserDirectory(""String_Node_Str""))));
  }
 catch (  MalformedURLException excp) {
    logger.log(Level.WARNING,""String_Node_Str"",excp);
  }
catch (  Exception e) {
    logger.log(Level.SEVERE,""String_Node_Str"",e);
  }
  AvatarSystem.initialize(ClientContextJME.getWorldManager());
  super.initialize(manager);
}"
45469,"public void run(){
  if (mainHUD == null) {
    mainHUD=HUDManagerFactory.getHUDManager().getHUD(""String_Node_Str"");
  }
  for (  HUDButton button : buttonMap.values()) {
    mainHUD.removeComponent(button);
  }
  buttonMap.clear();
  gestureMap.clear();
  if (avatar == null) {
    return;
  }
  for (  String action : avatar.getAnimationNames()) {
    String name=action;
    if (action.startsWith(""String_Node_Str"") == true) {
      name=name.substring(5);
    }
 else     if (action.startsWith(""String_Node_Str"") == true) {
      name=name.substring(7);
    }
    gestureMap.put(BUNDLE.getString(name),action);
  }
  if (avatar.getCharacterParams().isAnimatingFace()) {
    gestureMap.put(BUNDLE.getString(""String_Node_Str""),""String_Node_Str"");
    gestureMap.put(BUNDLE.getString(""String_Node_Str""),""String_Node_Str"");
  }
  for (  String name : gestureMap.keySet()) {
    int row=0;
    int column=0;
    for (    String[] gesture : gestures) {
      if (gesture[0].equals(name)) {
        column=Integer.valueOf(gesture[1]);
        row=Integer.valueOf(gesture[2]);
        HUDButton button=mainHUD.createButton(name);
        button.setDecoratable(false);
        button.setPreferredTransparency(0.2f);
        button.setLocation(leftMargin + column * columnWidth,bottomMargin + row * rowHeight);
        mainHUD.addComponent(button);
        buttonMap.put(name,button);
        button.addActionListener(new ActionListener(){
          public void actionPerformed(          ActionEvent event){
            String action=gestureMap.get(event.getActionCommand());
            logger.info(""String_Node_Str"" + event.getActionCommand());
            if (action.equals(""String_Node_Str"")) {
              doSitGesture(avatar);
            }
 else             if (action.equals(""String_Node_Str"")) {
              CharacterEyes eyes=avatar.getEyes();
              eyes.wink(false);
            }
 else {
              avatar.playAnimation(action);
            }
          }
        }
);
        break;
      }
    }
  }
  setVisible(true);
}","public void run(){
  if (mainHUD == null) {
    mainHUD=HUDManagerFactory.getHUDManager().getHUD(""String_Node_Str"");
  }
  for (  HUDButton button : buttonMap.values()) {
    mainHUD.removeComponent(button);
  }
  buttonMap.clear();
  gestureMap.clear();
  if (avatar == null) {
    return;
  }
  for (  String action : avatar.getAnimationNames()) {
    String name=action;
    if (action.startsWith(""String_Node_Str"") == true) {
      name=name.substring(5);
    }
 else     if (action.startsWith(""String_Node_Str"") == true) {
      name=name.substring(7);
    }
    gestureMap.put(BUNDLE.getString(name),action);
  }
  if (avatar.getCharacterParams().isAnimatingFace()) {
    gestureMap.put(BUNDLE.getString(""String_Node_Str""),""String_Node_Str"");
    gestureMap.put(BUNDLE.getString(""String_Node_Str""),""String_Node_Str"");
  }
  for (  String name : gestureMap.keySet()) {
    int row=0;
    int column=0;
    for (    String[] gesture : gestures) {
      if (gesture[0].equals(name)) {
        column=Integer.valueOf(gesture[1]);
        row=Integer.valueOf(gesture[2]);
        HUDButton button=mainHUD.createButton(name);
        button.setDecoratable(false);
        button.setPreferredTransparency(0.2f);
        button.setLocation(leftMargin + column * columnWidth,bottomMargin + row * rowHeight);
        mainHUD.addComponent(button);
        buttonMap.put(name,button);
        button.addActionListener(new ActionListener(){
          public void actionPerformed(          ActionEvent event){
            String action=gestureMap.get(event.getActionCommand());
            logger.info(""String_Node_Str"" + event.getActionCommand());
            if (action.equals(""String_Node_Str"")) {
              doSitGesture(avatar);
            }
 else             if (action.equals(""String_Node_Str"")) {
              CharacterEyes eyes=avatar.getEyes();
              eyes.wink(false);
            }
 else {
              avatar.playAnimation(action);
            }
          }
        }
);
        button.setVisible(isVisible());
        break;
      }
    }
  }
  setVisible(true);
}"
45470,"/** 
 * sets the avatar and activates supported gestures
 * @param avatar the avatar to set
 */
public void setAvatarCharacter(final WlAvatarCharacter avatar){
  SwingUtilities.invokeLater(new Runnable(){
    public void run(){
      if (mainHUD == null) {
        mainHUD=HUDManagerFactory.getHUDManager().getHUD(""String_Node_Str"");
      }
      for (      HUDButton button : buttonMap.values()) {
        mainHUD.removeComponent(button);
      }
      buttonMap.clear();
      gestureMap.clear();
      if (avatar == null) {
        return;
      }
      for (      String action : avatar.getAnimationNames()) {
        String name=action;
        if (action.startsWith(""String_Node_Str"") == true) {
          name=name.substring(5);
        }
 else         if (action.startsWith(""String_Node_Str"") == true) {
          name=name.substring(7);
        }
        gestureMap.put(BUNDLE.getString(name),action);
      }
      if (avatar.getCharacterParams().isAnimatingFace()) {
        gestureMap.put(BUNDLE.getString(""String_Node_Str""),""String_Node_Str"");
        gestureMap.put(BUNDLE.getString(""String_Node_Str""),""String_Node_Str"");
      }
      for (      String name : gestureMap.keySet()) {
        int row=0;
        int column=0;
        for (        String[] gesture : gestures) {
          if (gesture[0].equals(name)) {
            column=Integer.valueOf(gesture[1]);
            row=Integer.valueOf(gesture[2]);
            HUDButton button=mainHUD.createButton(name);
            button.setDecoratable(false);
            button.setPreferredTransparency(0.2f);
            button.setLocation(leftMargin + column * columnWidth,bottomMargin + row * rowHeight);
            mainHUD.addComponent(button);
            buttonMap.put(name,button);
            button.addActionListener(new ActionListener(){
              public void actionPerformed(              ActionEvent event){
                String action=gestureMap.get(event.getActionCommand());
                logger.info(""String_Node_Str"" + event.getActionCommand());
                if (action.equals(""String_Node_Str"")) {
                  doSitGesture(avatar);
                }
 else                 if (action.equals(""String_Node_Str"")) {
                  CharacterEyes eyes=avatar.getEyes();
                  eyes.wink(false);
                }
 else {
                  avatar.playAnimation(action);
                }
              }
            }
);
            break;
          }
        }
      }
      setVisible(true);
    }
  }
);
}","/** 
 * sets the avatar and activates supported gestures
 * @param avatar the avatar to set
 */
public void setAvatarCharacter(final WlAvatarCharacter avatar){
  SwingUtilities.invokeLater(new Runnable(){
    public void run(){
      if (mainHUD == null) {
        mainHUD=HUDManagerFactory.getHUDManager().getHUD(""String_Node_Str"");
      }
      for (      HUDButton button : buttonMap.values()) {
        mainHUD.removeComponent(button);
      }
      buttonMap.clear();
      gestureMap.clear();
      if (avatar == null) {
        return;
      }
      for (      String action : avatar.getAnimationNames()) {
        String name=action;
        if (action.startsWith(""String_Node_Str"") == true) {
          name=name.substring(5);
        }
 else         if (action.startsWith(""String_Node_Str"") == true) {
          name=name.substring(7);
        }
        gestureMap.put(BUNDLE.getString(name),action);
      }
      if (avatar.getCharacterParams().isAnimatingFace()) {
        gestureMap.put(BUNDLE.getString(""String_Node_Str""),""String_Node_Str"");
        gestureMap.put(BUNDLE.getString(""String_Node_Str""),""String_Node_Str"");
      }
      for (      String name : gestureMap.keySet()) {
        int row=0;
        int column=0;
        for (        String[] gesture : gestures) {
          if (gesture[0].equals(name)) {
            column=Integer.valueOf(gesture[1]);
            row=Integer.valueOf(gesture[2]);
            HUDButton button=mainHUD.createButton(name);
            button.setDecoratable(false);
            button.setPreferredTransparency(0.2f);
            button.setLocation(leftMargin + column * columnWidth,bottomMargin + row * rowHeight);
            mainHUD.addComponent(button);
            buttonMap.put(name,button);
            button.addActionListener(new ActionListener(){
              public void actionPerformed(              ActionEvent event){
                String action=gestureMap.get(event.getActionCommand());
                logger.info(""String_Node_Str"" + event.getActionCommand());
                if (action.equals(""String_Node_Str"")) {
                  doSitGesture(avatar);
                }
 else                 if (action.equals(""String_Node_Str"")) {
                  CharacterEyes eyes=avatar.getEyes();
                  eyes.wink(false);
                }
 else {
                  avatar.playAnimation(action);
                }
              }
            }
);
            button.setVisible(isVisible());
            break;
          }
        }
      }
      setVisible(true);
    }
  }
);
}"
45471,"/** 
 * {@inheritDoc}
 */
@Override public void setStatus(CellStatus status,boolean increasing){
  super.setStatus(status,increasing);
  WlAvatarCharacter pendingAvatar=null;
  logger.info(""String_Node_Str"" + status + ""String_Node_Str""+ increasing);
  if (status == CellStatus.ACTIVE && increasing == true) {
    boundsDebugger.add(this);
    if (cellMoveListener != null) {
      MovableComponent mc=cell.getComponent(MovableComponent.class);
      if (mc == null) {
        logger.severe(""String_Node_Str"" + ((AvatarCell)cell).getName());
      }
 else {
        mc.removeServerCellMoveListener(cellMoveListener);
      }
      cellMoveListener=null;
    }
    if (avatarCharacter == null) {
      AvatarConfigComponent configComp=cell.getComponent(AvatarConfigComponent.class);
      AvatarConfigInfo avatarConfigInfo=null;
      if (configComp != null) {
        avatarConfigInfo=configComp.getAvatarConfigInfo();
      }
      logger.info(""String_Node_Str"" + avatarConfigInfo);
      pendingAvatar=loadAvatar(avatarConfigInfo);
    }
 else {
      ClientContextJME.getWorldManager().removeEntity(avatarCharacter);
      pendingAvatar=null;
    }
    logger.info(""String_Node_Str"");
    changeAvatar(pendingAvatar);
    if (cellMoveListener == null) {
      cellMoveListener=new CellMoveListener(){
        public void cellMoved(        CellTransform transform,        CellMoveSource source){
          if (source == CellMoveSource.REMOTE) {
            if (avatarCharacter != null) {
              if (avatarCharacter.getModelInst() == null) {
                logger.severe(""String_Node_Str"");
                Thread.dumpStack();
                return;
              }
              avatarCharacter.getModelInst().setTransform(new PTransform(transform.getRotation(null),transform.getTranslation(null),new Vector3f(1,1,1)));
            }
          }
        }
      }
;
    }
    cell.getComponent(MovableComponent.class).addServerCellMoveListener(cellMoveListener);
    avatarUIEventListener=new AvatarUIEventListener();
    ClientContext.getInputManager().addGlobalEventListener(avatarUIEventListener);
    collisionChangeRequestListener=new CollisionChangeRequestListener();
    ClientContext.getInputManager().addGlobalEventListener(collisionChangeRequestListener);
  }
 else   if (status == CellStatus.DISK && !increasing) {
    boundsDebugger.remove(this);
    ClientContext.getInputManager().removeGlobalEventListener(avatarUIEventListener);
    ClientContext.getInputManager().removeGlobalEventListener(collisionChangeRequestListener);
    cell.getComponent(MovableComponent.class).removeServerCellMoveListener(cellMoveListener);
    avatarUIEventListener=null;
    cellMoveListener=null;
    collisionChangeRequestListener=null;
  }
}","/** 
 * {@inheritDoc}
 */
@Override public void setStatus(CellStatus status,boolean increasing){
  super.setStatus(status,increasing);
  WlAvatarCharacter pendingAvatar=null;
  logger.info(""String_Node_Str"" + status + ""String_Node_Str""+ increasing);
  if (status == CellStatus.ACTIVE && increasing == true) {
    BoundsDebugger.getInstance().add(this);
    if (cellMoveListener != null) {
      MovableComponent mc=cell.getComponent(MovableComponent.class);
      if (mc == null) {
        logger.severe(""String_Node_Str"" + ((AvatarCell)cell).getName());
      }
 else {
        mc.removeServerCellMoveListener(cellMoveListener);
      }
      cellMoveListener=null;
    }
    if (avatarCharacter == null) {
      AvatarConfigComponent configComp=cell.getComponent(AvatarConfigComponent.class);
      AvatarConfigInfo avatarConfigInfo=null;
      if (configComp != null) {
        avatarConfigInfo=configComp.getAvatarConfigInfo();
      }
      logger.info(""String_Node_Str"" + avatarConfigInfo);
      pendingAvatar=loadAvatar(avatarConfigInfo);
    }
 else {
      ClientContextJME.getWorldManager().removeEntity(avatarCharacter);
      pendingAvatar=null;
    }
    logger.info(""String_Node_Str"");
    changeAvatar(pendingAvatar);
    if (cellMoveListener == null) {
      cellMoveListener=new CellMoveListener(){
        public void cellMoved(        CellTransform transform,        CellMoveSource source){
          if (source == CellMoveSource.REMOTE) {
            if (avatarCharacter != null) {
              if (avatarCharacter.getModelInst() == null) {
                logger.severe(""String_Node_Str"");
                Thread.dumpStack();
                return;
              }
              avatarCharacter.getModelInst().setTransform(new PTransform(transform.getRotation(null),transform.getTranslation(null),new Vector3f(1,1,1)));
            }
          }
        }
      }
;
    }
    cell.getComponent(MovableComponent.class).addServerCellMoveListener(cellMoveListener);
    avatarUIEventListener=new AvatarUIEventListener();
    ClientContext.getInputManager().addGlobalEventListener(avatarUIEventListener);
    collisionChangeRequestListener=new CollisionChangeRequestListener();
    ClientContext.getInputManager().addGlobalEventListener(collisionChangeRequestListener);
  }
 else   if (status == CellStatus.DISK && !increasing) {
    BoundsDebugger.getInstance().remove(this);
    ClientContext.getInputManager().removeGlobalEventListener(avatarUIEventListener);
    ClientContext.getInputManager().removeGlobalEventListener(collisionChangeRequestListener);
    cell.getComponent(MovableComponent.class).removeServerCellMoveListener(cellMoveListener);
    avatarUIEventListener=null;
    cellMoveListener=null;
    collisionChangeRequestListener=null;
  }
}"
45472,"void add(AvatarImiJME avatar){
  if (!(avatar.getCell() instanceof ViewCell))   return;
synchronized (avatarMap) {
    final String username=((ViewCell)avatar.getCell()).getIdentity().getUsername();
    avatarMap.put(username,avatar);
    SwingUtilities.invokeLater(new Runnable(){
      public void run(){
        GridBagConstraints gridBagConstraints=new java.awt.GridBagConstraints();
        gridBagConstraints.insets=new java.awt.Insets(0,0,0,7);
        avatarPanel.add(new JLabel(username),gridBagConstraints);
        final JCheckBox cb=new JCheckBox();
        gridBagConstraints=new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth=GridBagConstraints.REMAINDER;
        avatarPanel.add(cb,gridBagConstraints);
        cb.addActionListener(new ActionListener(){
          public void actionPerformed(          ActionEvent e){
            AvatarImiJME a=null;
synchronized (avatarMap) {
              a=avatarMap.get(username);
            }
            if (a == null) {
              System.err.println(""String_Node_Str"" + username);
            }
            a.getAvatarCharacter().getJScene().setPrintCullInfo(cb.isSelected());
          }
        }
);
        avatarPanel.validate();
      }
    }
);
  }
}","public synchronized void add(AvatarImiJME avatar){
  if (!(avatar.getCell() instanceof ViewCell)) {
    return;
  }
  String username=((ViewCell)avatar.getCell()).getIdentity().getUsername();
  avatarMap.put(username,avatar);
  if (frame != null) {
    frame.add(username);
  }
}"
45473,"/** 
 * Creates new form BoundsDebugger 
 */
public BoundsDebugger(){
  initComponents();
  GridBagConstraints gridBagConstraints=new java.awt.GridBagConstraints();
  JLabel jLabel1=new JLabel(BUNDLE.getString(""String_Node_Str""));
  gridBagConstraints=new java.awt.GridBagConstraints();
  gridBagConstraints.insets=new java.awt.Insets(0,0,0,7);
  avatarPanel.add(jLabel1,gridBagConstraints);
  JLabel jLabel2=new JLabel(BUNDLE.getString(""String_Node_Str""));
  gridBagConstraints=new java.awt.GridBagConstraints();
  gridBagConstraints.gridwidth=GridBagConstraints.REMAINDER;
  avatarPanel.add(jLabel2,gridBagConstraints);
  JMenuItem editorMI=new JMenuItem(BUNDLE.getString(""String_Node_Str""));
  editorMI.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      BoundsDebugger.this.setVisible(true);
    }
  }
);
  JmeClientMain.getFrame().addToToolsMenu(editorMI,2);
}","private BoundsDebugger(){
  SwingUtilities.invokeLater(new Runnable(){
    public void run(){
      createFrame();
    }
  }
);
}"
45474,"public void run(){
  GridBagConstraints gridBagConstraints=new java.awt.GridBagConstraints();
  gridBagConstraints.insets=new java.awt.Insets(0,0,0,7);
  avatarPanel.add(new JLabel(username),gridBagConstraints);
  final JCheckBox cb=new JCheckBox();
  gridBagConstraints=new java.awt.GridBagConstraints();
  gridBagConstraints.gridwidth=GridBagConstraints.REMAINDER;
  avatarPanel.add(cb,gridBagConstraints);
  cb.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      AvatarImiJME a=null;
synchronized (avatarMap) {
        a=avatarMap.get(username);
      }
      if (a == null) {
        System.err.println(""String_Node_Str"" + username);
      }
      a.getAvatarCharacter().getJScene().setPrintCullInfo(cb.isSelected());
    }
  }
);
  avatarPanel.validate();
}","public void run(){
  createFrame();
}"
45475,"void remove(AvatarImiJME avatar){
  if (!(avatar.getCell() instanceof ViewCell))   return;
synchronized (avatarMap) {
    avatarMap.remove(((ViewCell)avatar.getCell()).getIdentity().getUsername());
  }
}","public synchronized void remove(AvatarImiJME avatar){
  if (!(avatar.getCell() instanceof ViewCell))   return;
  avatarMap.remove(((ViewCell)avatar.getCell()).getIdentity().getUsername());
}"
45476,"/** 
 * Determine if the given user is an owner of the given directory
 * @param type the file type to check
 * @return true if the current user is an owner, or false if not
 */
protected boolean isOwner(FileType type){
  HttpServletRequest req=requestLocal.get();
  Principal p=req.getUserPrincipal();
  if (type.getType() == null) {
    return false;
  }
 else   if (type.getType().equalsIgnoreCase(USERS_DIR)) {
    return (type.getUser() != null) && type.getUser().equalsIgnoreCase(getUserName());
  }
 else   if (type.getType().equalsIgnoreCase(GROUPS_DIR)) {
    if (!(p instanceof UserGroupPrincipal)) {
      return false;
    }
    for (    String group : ((UserGroupPrincipal)p).getGroups()) {
      if (group.equalsIgnoreCase(type.getUser())) {
        return true;
      }
    }
  }
  return false;
}","/** 
 * Determine if the given user is an owner of the given directory
 * @param type the file type to check
 * @return true if the current user is an owner, or false if not
 */
protected boolean isOwner(FileType type){
  HttpServletRequest req=requestLocal.get();
  Principal p=req.getUserPrincipal();
  if (type.getType() == null) {
    return false;
  }
 else   if (type.getType().equalsIgnoreCase(USERS_DIR)) {
    return (type.getUser() != null) && type.getUser().equals(getUserName());
  }
 else   if (type.getType().equalsIgnoreCase(GROUPS_DIR)) {
    String target=type.getUser();
    if (p instanceof UserGroupPrincipal) {
      for (      String group : ((UserGroupPrincipal)p).getGroups()) {
        if (group.equals(target)) {
          return true;
        }
      }
    }
 else     if (p instanceof WebPrincipal) {
      Subject s=((WebPrincipal)p).getSecurityContext().getSubject();
      for (      Group group : s.getPrincipals(Group.class)) {
        if (group.getName().equals(target)) {
          return true;
        }
      }
    }
  }
  return false;
}"
45477,"@Override public void cleanup(){
  cleanupViews();
  super.cleanup();
  if (embeddedPeer != null) {
    embeddedPeer.dispose();
    embeddedPeer=null;
  }
}","@Override public void cleanup(){
  cleanupViews();
  super.cleanup();
  if (embeddedPeer != null) {
    final EmbeddedPeer e=embeddedPeer;
    embeddedPeer=null;
    SwingUtilities.invokeLater(new Runnable(){
      public void run(){
        e.dispose();
      }
    }
);
  }
}"
45478,"/** 
 * Load and return the avatar. To make this the current avatar changeAvatar() must be called
 * @param avatarConfigURL
 * @return
 */
private WlAvatarCharacter loadAvatarInternal(AvatarConfigInfo avatarConfigInfo) throws MalformedURLException, IOException {
  WlAvatarCharacter ret=null;
  PMatrix origin=new PMatrix();
  CellTransform transform=cell.getLocalTransform();
  origin.setTranslation(transform.getTranslation(null));
  origin.setRotation(transform.getRotation(null));
  String avatarDetail=System.getProperty(""String_Node_Str"",""String_Node_Str"");
  String shaderCheck=System.getProperty(""String_Node_Str"");
  boolean shaderPass=true;
  RenderManager rm=ClientContextJME.getWorldManager().getRenderManager();
  if (shaderCheck != null && shaderCheck.equals(""String_Node_Str"")) {
    shaderPass=rm.getContextCaps().GL_MAX_VERTEX_UNIFORM_COMPONENTS_ARB >= 512;
  }
  boolean uniformsPass=shaderPass && ShaderTest.getInstance().testShaders();
  logger.warning(""String_Node_Str"" + rm.supportsOpenGL20() + ""String_Node_Str""+ shaderPass+ ""String_Node_Str""+ uniformsPass);
  if (rm.supportsOpenGL20() == false || !shaderPass || !uniformsPass) {
    logger.warning(""String_Node_Str"");
    avatarDetail=""String_Node_Str"";
  }
  AvatarLoaderRegistry registry=AvatarLoaderRegistry.getAvatarLoaderRegistry();
  if (avatarConfigInfo == null || avatarDetail.equalsIgnoreCase(""String_Node_Str"")) {
    AvatarLoaderFactorySPI factory=registry.getDefaultAvatarLoaderFactory();
    if (factory == null) {
      logger.warning(""String_Node_Str"");
      return null;
    }
    String defaultClassName=factory.getClass().getName();
    AvatarConfigInfo defaultInfo=new AvatarConfigInfo(null,defaultClassName);
    ret=factory.getAvatarLoader().getAvatarCharacter(cell,username,defaultInfo);
  }
 else {
    String className=avatarConfigInfo.getLoaderFactoryClassName();
    if (className == null) {
      logger.warning(""String_Node_Str"" + ""String_Node_Str"" + avatarConfigInfo.getAvatarConfigURL());
      return null;
    }
    AvatarLoaderFactorySPI factory=registry.getAvatarLoaderFactory(className);
    if (factory == null) {
      logger.warning(""String_Node_Str"" + className + ""String_Node_Str""+ avatarConfigInfo.getAvatarConfigURL());
      return null;
    }
    ret=factory.getAvatarLoader().getAvatarCharacter(cell,username,avatarConfigInfo);
  }
  ret.getModelInst().getTransform().getLocalMatrix(true).set(origin);
  Node external=ret.getJScene().getExternalKidsRoot();
  setZBufferState(external);
  return ret;
}","/** 
 * Load and return the avatar. To make this the current avatar changeAvatar() must be called
 * @param avatarConfigURL
 * @return
 */
private WlAvatarCharacter loadAvatarInternal(AvatarConfigInfo avatarConfigInfo) throws MalformedURLException, IOException {
  WlAvatarCharacter ret=null;
  PMatrix origin=new PMatrix();
  CellTransform transform=cell.getLocalTransform();
  origin.setTranslation(transform.getTranslation(null));
  origin.setRotation(transform.getRotation(null));
  String avatarDetail=System.getProperty(""String_Node_Str"",""String_Node_Str"");
  if (!supportsHighQualityAvatars()) {
    logger.warning(""String_Node_Str"");
    avatarDetail=""String_Node_Str"";
  }
  AvatarLoaderRegistry registry=AvatarLoaderRegistry.getAvatarLoaderRegistry();
  if (avatarConfigInfo == null || avatarDetail.equalsIgnoreCase(""String_Node_Str"")) {
    AvatarLoaderFactorySPI factory=registry.getDefaultAvatarLoaderFactory();
    if (factory == null) {
      logger.warning(""String_Node_Str"");
      return null;
    }
    String defaultClassName=factory.getClass().getName();
    AvatarConfigInfo defaultInfo=new AvatarConfigInfo(null,defaultClassName);
    ret=factory.getAvatarLoader().getAvatarCharacter(cell,username,defaultInfo);
  }
 else {
    String className=avatarConfigInfo.getLoaderFactoryClassName();
    if (className == null) {
      logger.warning(""String_Node_Str"" + ""String_Node_Str"" + avatarConfigInfo.getAvatarConfigURL());
      return null;
    }
    AvatarLoaderFactorySPI factory=registry.getAvatarLoaderFactory(className);
    if (factory == null) {
      logger.warning(""String_Node_Str"" + className + ""String_Node_Str""+ avatarConfigInfo.getAvatarConfigURL());
      return null;
    }
    ret=factory.getAvatarLoader().getAvatarCharacter(cell,username,avatarConfigInfo);
  }
  ret.getModelInst().getTransform().getLocalMatrix(true).set(origin);
  Node external=ret.getJScene().getExternalKidsRoot();
  setZBufferState(external);
  return ret;
}"
45479,"/** 
 * Specify the size of this WindowSwing. If dims is non-null, the window is switched into ""forced size"" mode--the window will be always be the size you specify. If dims is null, the window is switched into ""preferred size"" mode--the window will size will be determined by the size and layout of the embedded Swing component.
 */
public void setSize(Dimension dims){
  if (embeddedPeer == null) {
    throw new RuntimeException(""String_Node_Str"");
  }
  embeddedPeer.setSize(dims);
  embeddedPeer.validate();
  embeddedPeer.repaint();
}","/** 
 * Specify the size of this WindowSwing. If dims is non-null, the window is switched into ""forced size"" mode--the window will be always be the size you specify. If dims is null, the window is switched into ""preferred size"" mode--the window will size will be determined by the size and layout of the embedded Swing component.
 */
public void setSize(final Dimension dims){
  if (embeddedPeer == null) {
    throw new RuntimeException(""String_Node_Str"");
  }
  SwingUtilities.invokeLater(new Runnable(){
    public void run(){
      embeddedPeer.setSize(dims);
      embeddedPeer.validate();
    }
  }
);
  embeddedPeer.repaint();
}"
45480,"/** 
 * Re-lay out the contents of this window. This should be called whenever you make changes which affect the layout of the contained component.
 */
public void validate(){
  if (embeddedPeer != null) {
    embeddedPeer.validate();
    embeddedPeer.repaint();
  }
}","/** 
 * Re-lay out the contents of this window. This should be called whenever you make changes which affect the layout of the contained component.
 */
public void validate(){
  if (embeddedPeer != null) {
    SwingUtilities.invokeLater(new Runnable(){
      public void run(){
        embeddedPeer.validate();
      }
    }
);
    embeddedPeer.repaint();
  }
}"
45481,"/** 
 * Move the client to the given location
 * @param serverURL the url of the server to go to, or null to stayon the current server
 * @param translation the translation
 * @param look the direction to look in, or null to look in the defaultdirection
 * @throws IOException if there is an error going to the new location
 */
public void gotoLocation(String serverURL,final Vector3f translation,final Quaternion look) throws IOException {
  if (serverURL == null) {
    if (curSession == null) {
      throw new IllegalStateException(""String_Node_Str"");
    }
    serverURL=curSession.getSessionManager().getServerURL();
  }
  if (curSession != null && urlEquals(serverURL,curSession.getSessionManager().getServerURL())) {
    ViewCell vc=curSession.getLocalAvatar().getViewCell();
    if (vc instanceof AvatarCell) {
      ((AvatarCell)vc).triggerGoto(translation,look);
    }
  }
 else {
    ServerLoader sl=new ServerLoader(serverURL,translation,look);
    Thread t=new Thread(sl);
    t.start();
    try {
      t.join();
    }
 catch (    InterruptedException ex) {
      LOGGER.log(Level.WARNING,""String_Node_Str"",ex);
    }
    if (sl.getException() != null) {
      throw sl.getException();
    }
  }
}","/** 
 * Move the client to the given location
 * @param serverURL the url of the server to go to, or null to stayon the current server
 * @param translation the translation
 * @param look the direction to look in, or null to look in the defaultdirection
 * @throws IOException if there is an error going to the new location
 */
public void gotoLocation(String serverURL,final Vector3f translation,final Quaternion look) throws IOException {
  if (serverURL == null) {
    if (curSession == null) {
      throw new IllegalStateException(""String_Node_Str"");
    }
    serverURL=curSession.getSessionManager().getServerURL();
  }
 else {
    URL fullServerURL=new URL(serverURL);
    if (fullServerURL.getFile().isEmpty()) {
      serverURL=serverURL + '/';
    }
  }
  if (curSession != null && urlEquals(serverURL,curSession.getSessionManager().getServerURL())) {
    ViewCell vc=curSession.getLocalAvatar().getViewCell();
    if (vc instanceof AvatarCell) {
      ((AvatarCell)vc).triggerGoto(translation,look);
    }
  }
 else {
    ServerLoader sl=new ServerLoader(serverURL,translation,look);
    Thread t=new Thread(sl);
    t.start();
    try {
      t.join();
    }
 catch (    InterruptedException ex) {
      LOGGER.log(Level.WARNING,""String_Node_Str"",ex);
    }
    if (sl.getException() != null) {
      throw sl.getException();
    }
  }
}"
45482,"public void addViewCache(ViewCache cache){
synchronized (viewCaches) {
    viewCaches.add(cache);
    ArrayList<ViewCache> tmp=new ArrayList();
    tmp.add(cache);
synchronized (rootCells) {
      for (      SpatialCellImpl rootCell : rootCells) {
        rootCell.addViewCache(tmp,this);
      }
    }
  }
}","public void addViewCache(ViewCache cache){
synchronized (viewCaches) {
    viewCaches.add(cache);
synchronized (rootCells) {
      for (      SpatialCellImpl rootCell : rootCells) {
        rootCell.addViewCache(Collections.singletonList(cache),this);
      }
    }
  }
}"
45483,"public void removeViewCache(ViewCache cache){
synchronized (viewCaches) {
    viewCaches.remove(cache);
  }
}","public void removeViewCache(ViewCache cache){
synchronized (viewCaches) {
    viewCaches.remove(cache);
synchronized (rootCells) {
      for (      SpatialCellImpl rootCell : rootCells) {
        rootCell.removeViewCache(Collections.singletonList(cache),this);
      }
    }
  }
}"
45484,"private boolean isInGroup(Set<Principal> principals){
  logger.fine(""String_Node_Str"" + principals.size() + ""String_Node_Str""+ group);
  for (  Principal p : principals) {
    logger.fine(""String_Node_Str"" + p + ""String_Node_Str""+ group);
    if (p.getType() == Type.GROUP) {
      String name=p.getId();
      if (name.equals(group) || name.equals(""String_Node_Str"")) {
        logger.fine(""String_Node_Str"" + p + ""String_Node_Str""+ group);
        return true;
      }
    }
  }
  return false;
}","private boolean isInGroup(Set<Principal> principals){
  logger.fine(""String_Node_Str"" + principals.size() + ""String_Node_Str""+ group);
  for (  Principal p : principals) {
    logger.fine(""String_Node_Str"" + p + ""String_Node_Str""+ group);
    if (p.getType() == Type.GROUP || p.getType() == Type.EVERYBODY) {
      String name=p.getId();
      if (name.equals(group) || name.equals(""String_Node_Str"")) {
        logger.fine(""String_Node_Str"" + p + ""String_Node_Str""+ group);
        return true;
      }
    }
  }
  return false;
}"
45485,"public String getId(){
  return GroupMemberResource.class.getName();
}","public String getId(){
  return GroupMemberResource.class.getName() + ""String_Node_Str"" + group;
}"
45486,"/** 
 * {@inheritDoc}
 */
public Cell loadCell(CellID cellId,String className,BoundingVolume localBounds,CellID parentCellID,CellTransform cellTransform,CellClientState setup,String cellName){
  long startTime=System.currentTimeMillis();
  try {
    if (cells.containsKey(cellId)) {
      logger.severe(""String_Node_Str"" + cellId);
      return null;
    }
    logger.info(""String_Node_Str"" + className + ""String_Node_Str""+ cellId);
    Cell cell=instantiateCell(className,cellId);
    if (cell == null)     return null;
    cell.setName(cellName);
    Cell parent=cells.get(parentCellID);
    if (parent != null) {
      try {
        parent.addChild(cell);
      }
 catch (      MultipleParentException ex) {
        logger.log(Level.SEVERE,""String_Node_Str"",ex);
      }
    }
    cell.setLocalBounds(localBounds);
    cell.setLocalTransform(cellTransform,TransformChangeListener.ChangeSource.SERVER_ADJUST);
    cells.put(cellId,cell);
    logger.fine(""String_Node_Str"" + cell.getName());
    if (parent == null && !cellId.equals(CellID.getEnvironmentCellID())) {
      logger.fine(""String_Node_Str"" + cell.getName());
      rootCells.add(cell);
    }
    if (setup != null)     cell.setClientState(setup);
 else     logger.warning(""String_Node_Str"" + className + ""String_Node_Str""+ cell);
    fireCellLoaded(cell);
    if (viewCell != null) {
      changeCellStatus(cell,CellStatus.VISIBLE);
    }
 else     if (cell instanceof ViewCell || cellId.equals(CellID.getEnvironmentCellID())) {
      changeCellStatus(cell,CellStatus.ACTIVE);
    }
    long time=System.currentTimeMillis() - startTime;
    TimeCellStat loadStat=new TimeCellStat(""String_Node_Str"",""String_Node_Str"");
    loadStat.setValue(time);
    getStatistics().add(cell,loadStat);
    return cell;
  }
 catch (  Exception e) {
    fireCellLoadFailed(cellId,className,parentCellID,e);
    logger.log(Level.SEVERE,""String_Node_Str"",e);
    return null;
  }
}","/** 
 * {@inheritDoc}
 */
public Cell loadCell(CellID cellId,String className,BoundingVolume localBounds,CellID parentCellID,CellTransform cellTransform,CellClientState setup,String cellName){
  long startTime=System.currentTimeMillis();
  try {
    if (cells.containsKey(cellId)) {
      logger.severe(""String_Node_Str"" + cellId);
      return null;
    }
    logger.info(""String_Node_Str"" + className + ""String_Node_Str""+ cellId);
    Cell cell=instantiateCell(className,cellId);
    if (cell == null)     return null;
    cell.setName(cellName);
    Cell parent=cells.get(parentCellID);
    if (parent != null) {
      try {
        parent.addChild(cell);
      }
 catch (      MultipleParentException ex) {
        logger.log(Level.SEVERE,""String_Node_Str"",ex);
      }
    }
 else     if (parentCellID != null) {
      logger.warning(""String_Node_Str"" + parentCellID + ""String_Node_Str""+ cellId);
    }
    cell.setLocalBounds(localBounds);
    cell.setLocalTransform(cellTransform,TransformChangeListener.ChangeSource.SERVER_ADJUST);
    cells.put(cellId,cell);
    logger.fine(""String_Node_Str"" + cell.getName());
    if (parent == null && !cellId.equals(CellID.getEnvironmentCellID())) {
      logger.fine(""String_Node_Str"" + cell.getName());
      rootCells.add(cell);
    }
    if (setup != null)     cell.setClientState(setup);
 else     logger.warning(""String_Node_Str"" + className + ""String_Node_Str""+ cell);
    fireCellLoaded(cell);
    if (viewCell != null) {
      changeCellStatus(cell,CellStatus.VISIBLE);
    }
 else     if (cell instanceof ViewCell || cellId.equals(CellID.getEnvironmentCellID())) {
      changeCellStatus(cell,CellStatus.ACTIVE);
    }
    long time=System.currentTimeMillis() - startTime;
    TimeCellStat loadStat=new TimeCellStat(""String_Node_Str"",""String_Node_Str"");
    loadStat.setValue(time);
    getStatistics().add(cell,loadStat);
    return cell;
  }
 catch (  Exception e) {
    fireCellLoadFailed(cellId,className,parentCellID,e);
    logger.log(Level.SEVERE,""String_Node_Str"",e);
    return null;
  }
}"
45487,"/** 
 * Unload the cell from memory, sets the Cells status to DISK
 * @param cellId
 */
public void unloadCell(CellID cellId){
  Cell cell=cells.remove(cellId);
  if (cell != null) {
    logger.fine(""String_Node_Str"" + cell.getName());
    fireCellUnloaded(cell);
    setCellStatus(cell,CellStatus.DISK);
    if (cell.getParent() == null) {
      logger.fine(""String_Node_Str"" + cell.getName());
      rootCells.remove(cell);
    }
 else {
      cell.getParent().removeChild(cell);
    }
  }
 else {
    logger.log(Level.WARNING,""String_Node_Str"" + cellId);
  }
}","/** 
 * Unload the cell from memory, sets the Cells status to DISK
 * @param cellId
 */
public void unloadCell(CellID cellId){
  Cell cell=cells.remove(cellId);
  if (cell != null) {
    logger.fine(""String_Node_Str"" + cell.getName());
    fireCellUnloaded(cell);
    changeCellStatus(cell,CellStatus.DISK);
    if (cell.getParent() == null) {
      logger.fine(""String_Node_Str"" + cell.getName());
      rootCells.remove(cell);
    }
 else {
      cell.getParent().removeChild(cell);
    }
  }
 else {
    logger.log(Level.WARNING,""String_Node_Str"" + cellId);
  }
}"
45488,"boolean isOwner(Set<Principal> userPrincipals){
  for (  Principal p : userPrincipals) {
    if (owners.contains(p)) {
      return true;
    }
  }
  return false;
}","boolean isOwner(Set<Principal> userPrincipals){
  for (  Principal p : userPrincipals) {
    if (owners.contains(p)) {
      return true;
    }
    if (p.getType() == Principal.Type.GROUP && p.getId().equals(""String_Node_Str"")) {
      return true;
    }
  }
  return false;
}"
45489,"private MapResponseMessage handleMapRequest(WonderlandClientID clientID,MapRequestMessage message){
  logger.warning(""String_Node_Str"" + message.getName());
  SharedMapImpl map=getMap(message.getName(),false);
  if (map == null) {
    List<String> l=Collections.emptyList();
    return new MapResponseMessage(message.getMessageID(),0,l);
  }
  Collection<String> keys=new ArrayList<String>(map.keySet());
  logger.warning(""String_Node_Str"" + keys.size() + ""String_Node_Str"");
  return new MapResponseMessage(message.getMessageID(),map.getVersion(),keys);
}","private MapResponseMessage handleMapRequest(WonderlandClientID clientID,MapRequestMessage message){
  logger.fine(""String_Node_Str"" + message.getName());
  SharedMapImpl map=getMap(message.getName(),false);
  if (map == null) {
    List<String> l=Collections.emptyList();
    return new MapResponseMessage(message.getMessageID(),0,l);
  }
  Collection<String> keys=new ArrayList<String>(map.keySet());
  logger.fine(""String_Node_Str"" + keys.size() + ""String_Node_Str"");
  return new MapResponseMessage(message.getMessageID(),map.getVersion(),keys);
}"
45490,"private ManagedReference<SharedMapImpl> addMap(String mapName,SharedMapImpl map){
  logger.warning(""String_Node_Str"" + mapName);
  MapOfMaps maps=mapsRef.get();
  ManagedReference<SharedMapImpl> mapRef=AppContext.getDataManager().createReference(map);
  maps.put(mapName,mapRef);
  return mapRef;
}","private ManagedReference<SharedMapImpl> addMap(String mapName,SharedMapImpl map){
  logger.fine(""String_Node_Str"" + mapName);
  MapOfMaps maps=mapsRef.get();
  ManagedReference<SharedMapImpl> mapRef=AppContext.getDataManager().createReference(map);
  maps.put(mapName,mapRef);
  return mapRef;
}"
45491,"private ResponseMessage handleRemoveRequest(WonderlandClientID clientID,RemoveRequestMessage message){
  logger.warning(""String_Node_Str"" + message.getMapName() + ""String_Node_Str""+ message.getPropertyName());
  SharedMapImpl map=getMap(message.getMapName(),false);
  if (map == null || map.remove(clientID,message)) {
    return new OKMessage(message.getMessageID());
  }
  return new ErrorMessage(message.getMessageID(),""String_Node_Str"");
}","private ResponseMessage handleRemoveRequest(WonderlandClientID clientID,RemoveRequestMessage message){
  logger.fine(""String_Node_Str"" + message.getMapName() + ""String_Node_Str""+ message.getPropertyName());
  SharedMapImpl map=getMap(message.getMapName(),false);
  if (map == null || map.remove(clientID,message)) {
    return new OKMessage(message.getMessageID());
  }
  return new ErrorMessage(message.getMessageID(),""String_Node_Str"");
}"
45492,"private void removeMap(String mapName){
  logger.warning(""String_Node_Str"" + mapName);
  MapOfMaps maps=mapsRef.get();
  ManagedReference<SharedMapImpl> mapRef=maps.remove(mapName);
  AppContext.getDataManager().removeObject(mapRef.get());
}","private void removeMap(String mapName){
  logger.fine(""String_Node_Str"" + mapName);
  MapOfMaps maps=mapsRef.get();
  ManagedReference<SharedMapImpl> mapRef=maps.remove(mapName);
  AppContext.getDataManager().removeObject(mapRef.get());
}"
45493,"private GetResponseMessage handleGetRequest(WonderlandClientID clientID,GetRequestMessage message){
  logger.warning(""String_Node_Str"" + message.getMapName() + ""String_Node_Str""+ message.getPropertyName());
  SharedMapImpl map=getMap(message.getMapName(),false);
  if (map == null) {
    return new GetResponseMessage(message.getMessageID(),0,null);
  }
  logger.warning(""String_Node_Str"" + map.get(message.getPropertyName()));
  return new GetResponseMessage(message.getMessageID(),map.getVersion(),map.get(message.getPropertyName()));
}","private GetResponseMessage handleGetRequest(WonderlandClientID clientID,GetRequestMessage message){
  logger.fine(""String_Node_Str"" + message.getMapName() + ""String_Node_Str""+ message.getPropertyName());
  SharedMapImpl map=getMap(message.getMapName(),false);
  if (map == null) {
    return new GetResponseMessage(message.getMessageID(),0,null);
  }
  logger.fine(""String_Node_Str"" + map.get(message.getPropertyName()));
  return new GetResponseMessage(message.getMessageID(),map.getVersion(),map.get(message.getPropertyName()));
}"
45494,"private ResponseMessage handlePutRequest(WonderlandClientID clientID,PutRequestMessage message){
  logger.warning(""String_Node_Str"" + message.getMapName() + ""String_Node_Str""+ message.getPropertyName()+ ""String_Node_Str""+ message.getPropertyValue().toString());
  SharedMapImpl map=getMap(message.getMapName(),true);
  if (map.put(clientID,message)) {
    return new OKMessage(message.getMessageID());
  }
  return new ErrorMessage(message.getMessageID(),""String_Node_Str"");
}","private ResponseMessage handlePutRequest(WonderlandClientID clientID,PutRequestMessage message){
  logger.fine(""String_Node_Str"" + message.getMapName() + ""String_Node_Str""+ message.getPropertyName());
  SharedMapImpl map=getMap(message.getMapName(),true);
  if (map.put(clientID,message)) {
    return new OKMessage(message.getMessageID());
  }
  return new ErrorMessage(message.getMessageID(),""String_Node_Str"");
}"
45495,"@Override public void messageReceived(WonderlandClientSender sender,WonderlandClientID clientID,CellMessage message){
  ResponseMessage response;
  logger.warning(""String_Node_Str"" + message.getClass().getSimpleName());
  if (message instanceof MapRequestMessage) {
    response=handleMapRequest(clientID,(MapRequestMessage)message);
  }
 else   if (message instanceof GetRequestMessage) {
    response=handleGetRequest(clientID,(GetRequestMessage)message);
  }
 else   if (message instanceof PutRequestMessage) {
    response=handlePutRequest(clientID,(PutRequestMessage)message);
  }
 else   if (message instanceof RemoveRequestMessage) {
    response=handleRemoveRequest(clientID,(RemoveRequestMessage)message);
  }
 else {
    String error=""String_Node_Str"" + ""String_Node_Str"" + message.getClass() + ""String_Node_Str""+ message;
    logger.warning(error);
    response=new ErrorMessage(message.getMessageID(),error);
  }
  sender.send(clientID,response);
}","@Override public void messageReceived(WonderlandClientSender sender,WonderlandClientID clientID,CellMessage message){
  ResponseMessage response;
  logger.fine(""String_Node_Str"" + message.getClass().getSimpleName());
  if (message instanceof MapRequestMessage) {
    response=handleMapRequest(clientID,(MapRequestMessage)message);
  }
 else   if (message instanceof GetRequestMessage) {
    response=handleGetRequest(clientID,(GetRequestMessage)message);
  }
 else   if (message instanceof PutRequestMessage) {
    response=handlePutRequest(clientID,(PutRequestMessage)message);
  }
 else   if (message instanceof RemoveRequestMessage) {
    response=handleRemoveRequest(clientID,(RemoveRequestMessage)message);
  }
 else {
    String error=""String_Node_Str"" + ""String_Node_Str"" + message.getClass() + ""String_Node_Str""+ message;
    logger.warning(error);
    response=new ErrorMessage(message.getMessageID(),error);
  }
  sender.send(clientID,response);
}"
45496,"public void commit(){
  updatePickGeometry();
}","public void commit(){
  PTransform xform=new PTransform(look,position,new Vector3f(1,1,1));
  avatarCharacter.getModelInst().setTransform(xform);
}"
45497,"public void triggerGoto(Vector3f position,Quaternion look){
  CellTransform transform=new CellTransform();
  transform.setRotation(look);
  transform.setTranslation(position);
  cell.getComponent(MovableComponent.class).localMoveRequest(transform);
  if (avatarCharacter != null)   avatarCharacter.getModelInst().setTransform(new PTransform(look,position,new Vector3f(1,1,1)));
}","public void triggerGoto(final Vector3f position,final Quaternion look){
  if (avatarCharacter != null) {
    SceneWorker.addWorker(new WorkCommit(){
      public void commit(){
        PTransform xform=new PTransform(look,position,new Vector3f(1,1,1));
        avatarCharacter.getModelInst().setTransform(xform);
      }
    }
);
  }
 else {
    CellTransform transform=new CellTransform();
    transform.setRotation(look);
    transform.setTranslation(position);
    cell.getComponent(MovableComponent.class).localMoveRequest(transform);
  }
}"
45498,"protected void sendUnloadMessages(Collection<CellDescription> removeCells){
  ManagedReference<AvatarCellCacheMO> viewCellCacheRef=AppContext.getDataManager().createReference(this);
  scheduler.startRevalidate();
  for (  CellDescription ref : removeCells) {
    if (setUnloaded(ref.getCellID())) {
      if (logger.isLoggable(Level.FINER)) {
        logger.fine(""String_Node_Str"" + ref.getCellID() + ""String_Node_Str""+ identity.getUsername());
      }
      CellUnloadOp op=new CellUnloadOp(ref,clientID,viewCellCacheRef,capabilities);
      scheduler.schedule(op);
    }
  }
  scheduler.endRevalidate();
}","protected void sendUnloadMessages(Collection<CellDescription> removeCells){
  if (logger.isLoggable(Level.FINE)) {
    StringBuffer logBuf=new StringBuffer(getViewCell().getCellID() + ""String_Node_Str"");
    for (    CellDescription desc : removeCells) {
      logBuf.append(desc.getCellID() + ""String_Node_Str"");
    }
    logger.fine(logBuf.toString());
  }
  ManagedReference<AvatarCellCacheMO> viewCellCacheRef=AppContext.getDataManager().createReference(this);
  scheduler.startRevalidate();
  for (  CellDescription ref : removeCells) {
    if (setUnloaded(ref.getCellID())) {
      if (logger.isLoggable(Level.FINER)) {
        logger.fine(""String_Node_Str"" + ref.getCellID() + ""String_Node_Str""+ identity.getUsername());
      }
      CellUnloadOp op=new CellUnloadOp(ref,clientID,viewCellCacheRef,capabilities);
      scheduler.schedule(op);
    }
  }
  scheduler.endRevalidate();
}"
45499,"protected void sendLoadMessages(Collection<CellDescription> cells){
  ManagedReference<AvatarCellCacheMO> viewCellCacheRef=AppContext.getDataManager().createReference(this);
  scheduler.startRevalidate();
  for (  CellDescription cellDescription : cells) {
    if (setLoaded(cellDescription.getCellID())) {
      if (logger.isLoggable(Level.FINER)) {
        logger.finer(""String_Node_Str"" + cellDescription.getCellID() + ""String_Node_Str""+ identity.getUsername());
      }
      CellLoadOp op=new CellLoadOp(cellDescription,clientID,viewCellCacheRef,capabilities);
      scheduler.schedule(op);
    }
  }
  scheduler.endRevalidate();
}","protected void sendLoadMessages(Collection<CellDescription> cells){
  if (logger.isLoggable(Level.FINE)) {
    StringBuffer logBuf=new StringBuffer(getViewCell().getCellID() + ""String_Node_Str"");
    for (    CellDescription desc : cells) {
      logBuf.append(desc.getCellID() + ""String_Node_Str"");
    }
    logger.fine(logBuf.toString());
  }
  ManagedReference<AvatarCellCacheMO> viewCellCacheRef=AppContext.getDataManager().createReference(this);
  scheduler.startRevalidate();
  for (  CellDescription cellDescription : cells) {
    if (setLoaded(cellDescription.getCellID())) {
      if (logger.isLoggable(Level.FINER)) {
        logger.finer(""String_Node_Str"" + cellDescription.getCellID() + ""String_Node_Str""+ identity.getUsername());
      }
      CellLoadOp op=new CellLoadOp(cellDescription,clientID,viewCellCacheRef,capabilities);
      scheduler.schedule(op);
    }
  }
  scheduler.endRevalidate();
}"
45500,"/** 
 * Update our cache because the given cells may have changed. Just like <code>generateLoadMessagesService()</code>, this method is responsible for enforcing security on the list of cells.
 * @param cells the cells to revalidate
 */
public void revalidateCellsService(Collection<CellDescription> cells){
  CellResourceManager crm=AppContext.getManager(CellResourceManager.class);
  SecurityManager security=AppContext.getManager(SecurityManager.class);
  ResourceMap rm=new ResourceMap();
  Map<CellID,CellDescription> check=new HashMap<CellID,CellDescription>();
  for (  CellDescription cell : cells) {
    Resource resource=crm.getCellResource(cell.getCellID());
    if (resource != null) {
      Resource r=new CellIDResource(cell.getCellID(),resource);
      rm.put(r.getId(),new ActionMap(r,new ViewAction()));
      check.put(cell.getCellID(),cell);
    }
  }
  if (check.size() > 0) {
    SecureTask checkCells=new RevalidateCellsTask(check,this);
    security.doSecure(rm,checkCells);
  }
}","/** 
 * Update our cache because the given cells may have changed. Just like <code>generateLoadMessagesService()</code>, this method is responsible for enforcing security on the list of cells.
 * @param cells the cells to revalidate
 */
public void revalidateCellsService(Collection<CellDescription> cells){
  CellResourceManager crm=AppContext.getManager(CellResourceManager.class);
  SecurityManager security=AppContext.getManager(SecurityManager.class);
  ResourceMap rm=new ResourceMap();
  Map<CellID,CellDescription> cellsMap=new LinkedHashMap<CellID,CellDescription>();
  for (  CellDescription cell : cells) {
    cellsMap.put(cell.getCellID(),cell);
    Resource resource=crm.getCellResource(cell.getCellID());
    if (resource != null) {
      Resource r=new CellIDResource(cell.getCellID(),resource);
      rm.put(r.getId(),new ActionMap(r,new ViewAction()));
    }
  }
  SecureTask checkCells=new RevalidateCellsTask(cellsMap,this);
  security.doSecure(rm,checkCells);
}"
45501,"public void run(ResourceMap grants){
  List<CellDescription> load=new LinkedList<CellDescription>();
  List<CellDescription> unload=new LinkedList<CellDescription>();
  ViewCellCacheMO cache=viewCellCacheRef.get();
  for (  ActionMap am : grants.values()) {
    CellID id=((CellIDResource)am.getResource()).getCellID();
    CellDescription desc=check.get(id);
    if (am.size() == 1 && !cache.isLoaded(id)) {
      load.add(desc);
    }
 else     if (am.size() == 0 && cache.isLoaded(id)) {
      unload.add(desc);
    }
  }
  cache.sendLoadMessages(load);
  cache.sendUnloadMessages(unload);
}","public void run(ResourceMap grants){
  Map<CellID,CellDescription> unloadCells=new LinkedHashMap<CellID,CellDescription>(cells);
  ViewCellCacheMO cache=viewCellCacheRef.get();
  for (  ActionMap am : grants.values()) {
    CellID id=((CellIDResource)am.getResource()).getCellID();
    if (am.size() == 0) {
      cells.remove(id);
    }
 else {
      unloadCells.remove(id);
    }
  }
  for (Iterator<CellID> loadCells=cells.keySet().iterator(); loadCells.hasNext(); ) {
    CellID loadID=loadCells.next();
    if (cache.isLoaded(loadID)) {
      loadCells.remove();
    }
    unloadCells.remove(loadID);
  }
  for (Iterator<CellID> unloads=unloadCells.keySet().iterator(); unloads.hasNext(); ) {
    CellID unloadID=unloads.next();
    if (!cache.isLoaded(unloadID)) {
      unloads.remove();
    }
  }
  cache.sendLoadMessages(cells.values());
  cache.sendUnloadMessages(unloadCells.values());
}"
45502,"public RevalidateCellsTask(Map<CellID,CellDescription> check,ViewCellCacheMO viewCellCache){
  this.check=check;
  viewCellCacheRef=AppContext.getDataManager().createReference(viewCellCache);
}","public RevalidateCellsTask(Map<CellID,CellDescription> cells,ViewCellCacheMO viewCellCache){
  this.cells=cells;
  viewCellCacheRef=AppContext.getDataManager().createReference(viewCellCache);
}"
45503,"/** 
 * Called by the UniverseService to request this cache generate load messages for the given cells.  Note that this list contains all the possible cells to load, regardless of any security on those cells. It is up to the cache to enforce security on this list, and only send updates to clients that this cell is allowed to see.
 * @param cells the set of cells to load
 */
public void generateLoadMessagesService(Collection<CellDescription> cells){
  CellResourceManager crm=AppContext.getManager(CellResourceManager.class);
  SecurityManager security=AppContext.getManager(SecurityManager.class);
  ResourceMap rm=new ResourceMap();
  Map<CellID,CellDescription> granted=new HashMap<CellID,CellDescription>();
  Map<CellID,CellDescription> check=new HashMap<CellID,CellDescription>();
  for (  CellDescription cell : cells) {
    Resource resource=crm.getCellResource(cell.getCellID());
    if (resource == null) {
      granted.put(cell.getCellID(),cell);
    }
 else {
      Resource r=new CellIDResource(cell.getCellID(),resource);
      rm.put(r.getId(),new ActionMap(r,new ViewAction()));
      check.put(cell.getCellID(),cell);
    }
  }
  if (check.size() > 0) {
    SecureTask checkLoad=new LoadCellsTask(check,granted,this);
    security.doSecure(rm,checkLoad);
  }
 else {
    sendLoadMessages(cells);
  }
}","/** 
 * Called by the UniverseService to request this cache generate load messages for the given cells.  Note that this list contains all the possible cells to load, regardless of any security on those cells. It is up to the cache to enforce security on this list, and only send updates to clients that this cell is allowed to see.
 * @param cells the set of cells to load
 */
public void generateLoadMessagesService(Collection<CellDescription> cells){
  CellResourceManager crm=AppContext.getManager(CellResourceManager.class);
  SecurityManager security=AppContext.getManager(SecurityManager.class);
  ResourceMap rm=new ResourceMap();
  Map<CellID,CellDescription> cellsMap=new LinkedHashMap<CellID,CellDescription>();
  for (  CellDescription cell : cells) {
    cellsMap.put(cell.getCellID(),cell);
    Resource resource=crm.getCellResource(cell.getCellID());
    if (resource != null) {
      Resource r=new CellIDResource(cell.getCellID(),resource);
      rm.put(r.getId(),new ActionMap(r,new ViewAction()));
    }
  }
  if (!rm.isEmpty()) {
    SecureTask checkLoad=new LoadCellsTask(cellsMap,this);
    security.doSecure(rm,checkLoad);
  }
 else {
    sendLoadMessages(cells);
  }
}"
45504,"public LoadCellsTask(Map<CellID,CellDescription> check,Map<CellID,CellDescription> granted,ViewCellCacheMO viewCellCache){
  this.check=check;
  this.granted=granted;
  viewCellCacheRef=AppContext.getDataManager().createReference(viewCellCache);
}","public LoadCellsTask(Map<CellID,CellDescription> cells,ViewCellCacheMO viewCellCache){
  this.cells=cells;
  viewCellCacheRef=AppContext.getDataManager().createReference(viewCellCache);
}"
45505,"public void run() throws Exception {
  List<CellOp> ops=opsRef.get();
  if (AGGREGATE_MESSAGES) {
    messageList=new MessageList();
  }
  int num=Math.min(ops.size(),count);
  for (int i=0; i < num; i++) {
    CellOp op=ops.remove(0);
    if (AGGREGATE_MESSAGES) {
      op.setMessageList(messageList);
    }
 else {
      op.setClientSender(sender);
    }
    op.run();
  }
  if (AGGREGATE_MESSAGES) {
    sender.send(clientID,messageList);
  }
  if (num > 0) {
    TaskManager tm=AppContext.getTaskManager();
    tm.scheduleTask(new SharedListRevalidateTask(sender,clientID,count,opsRef));
  }
}","public void run() throws Exception {
  List<CellOp> ops=opsRef.get();
  if (AGGREGATE_MESSAGES) {
    messageList=new MessageList();
  }
  int size=ops.size();
  int num=Math.min(size,count);
  for (int i=0; i < num; i++) {
    CellOp op=ops.remove(0);
    if (AGGREGATE_MESSAGES) {
      op.setMessageList(messageList);
    }
 else {
      op.setClientSender(sender);
    }
    op.run();
  }
  if (AGGREGATE_MESSAGES) {
    sender.send(clientID,messageList);
  }
  if (size - num > 0) {
    logger.fine(""String_Node_Str"" + (size - num) + ""String_Node_Str""+ ""String_Node_Str""+ count);
    TaskManager tm=AppContext.getTaskManager();
    tm.scheduleTask(new SharedListRevalidateTask(sender,clientID,count,opsRef));
  }
 else {
    logger.fine(""String_Node_Str"");
    opsRef.get().setTaskRunning(false);
  }
}"
45506,"public SharedListRevalidateScheduler(WonderlandClientSender sender,int count){
  this.sender=sender;
  this.count=count;
  DataManager dm=AppContext.getDataManager();
  List<CellOp> opsList=new ManagedLinkedList<CellOp>();
  opsRef=dm.createReference(opsList);
}","public SharedListRevalidateScheduler(WonderlandClientSender sender,int count){
  this.sender=sender;
  this.count=count;
  DataManager dm=AppContext.getDataManager();
  opsRef=dm.createReference(new OpsList());
}"
45507,"public SharedListRevalidateTask(WonderlandClientSender sender,WonderlandClientID clientID,int count,ManagedReference<List<CellOp>> opsRef){
  this.sender=sender;
  this.clientID=clientID;
  this.count=count;
  this.opsRef=opsRef;
}","public SharedListRevalidateTask(WonderlandClientSender sender,WonderlandClientID clientID,int count,ManagedReference<OpsList> opsRef){
  this.sender=sender;
  this.clientID=clientID;
  this.count=count;
  this.opsRef=opsRef;
}"
45508,"public void endRevalidate(){
  if (opsRef.get().size() > 0) {
    TaskManager tm=AppContext.getTaskManager();
    tm.scheduleTask(new SharedListRevalidateTask(sender,clientID,count,opsRef));
  }
}","public void endRevalidate(){
  logger.fine(""String_Node_Str"" + opsRef.get().size() + ""String_Node_Str""+ ""String_Node_Str""+ count+ ""String_Node_Str""+ opsRef.get().isTaskRunning());
  if (!(opsRef.get().isTaskRunning())) {
    opsRef.get().setTaskRunning(true);
    TaskManager tm=AppContext.getTaskManager();
    tm.scheduleTask(new SharedListRevalidateTask(sender,clientID,count,opsRef));
  }
}"
45509,"/** 
 * Unload the cell from memory, sets the Cells status to DISK
 * @param cellId
 */
public void unloadCell(CellID cellId){
  Cell cell=cells.remove(cellId);
  if (cell != null) {
    logger.fine(""String_Node_Str"" + cell.getName());
    fireCellUnloaded(cell);
    setCellStatus(cell,CellStatus.DISK);
    if (cell.getParent() == null) {
      logger.fine(""String_Node_Str"" + cell.getName());
      rootCells.remove(cell);
    }
  }
 else {
    logger.log(Level.WARNING,""String_Node_Str"" + cellId);
  }
}","/** 
 * Unload the cell from memory, sets the Cells status to DISK
 * @param cellId
 */
public void unloadCell(CellID cellId){
  Cell cell=cells.remove(cellId);
  if (cell != null) {
    logger.fine(""String_Node_Str"" + cell.getName());
    fireCellUnloaded(cell);
    setCellStatus(cell,CellStatus.DISK);
    if (cell.getParent() == null) {
      logger.fine(""String_Node_Str"" + cell.getName());
      rootCells.remove(cell);
    }
 else {
      cell.getParent().removeChild(cell);
    }
  }
 else {
    logger.log(Level.WARNING,""String_Node_Str"" + cellId);
  }
}"
45510,"/** 
 * Remove a session from a communications protocol
 * @param protocol the communications protocol
 * @param session the client session associated with the given protocol
 */
public void remove(CommunicationsProtocol protocol,ClientSession session){
  DataManager dm=AppContext.getDataManager();
  ManagedReference sessionRef=dm.createReference(session);
  ManagedReference<ProtocolClientSet> ref=clientMap.get(protocol);
  if (ref != null) {
    ProtocolClientSet sessions=ref.getForUpdate();
    sessions.remove(sessionRef);
    if (sessions.isEmpty()) {
      clientMap.remove(protocol);
    }
  }
  protocolMap.remove(sessionRef);
}","/** 
 * Remove a session from a communications protocol
 * @param protocol the communications protocol
 * @param sessionRef a reference to the client session associated withthe given protocol
 */
public void remove(CommunicationsProtocol protocol,ManagedReference<ClientSession> sessionRef){
  ManagedReference<ProtocolClientSet> ref=clientMap.get(protocol);
  if (ref != null) {
    ProtocolClientSet sessions=ref.getForUpdate();
    sessions.remove(sessionRef);
    if (sessions.isEmpty()) {
      clientMap.remove(protocol);
    }
  }
  protocolMap.remove(sessionRef);
}"
45511,"/** 
 * Record a client of the given type disconnecting
 * @param protocol the protocol the session connected with
 * @param session the session that connected
 */
protected void recordDisconnect(CommunicationsProtocol protocol,ClientSession session){
  ProtocolClientMap pcm=getProtocolClientMap();
  DataManager dm=AppContext.getDataManager();
  dm.markForUpdate(pcm);
  pcm.remove(protocol,session);
}","/** 
 * Record a client of the given type disconnecting
 * @param protocol the protocol the session connected with
 * @param sessionRef a reference to the session that connected
 */
protected void recordDisconnect(CommunicationsProtocol protocol,ManagedReference<ClientSession> sessionRef){
  ProtocolClientMap pcm=getProtocolClientMap();
  DataManager dm=AppContext.getDataManager();
  dm.markForUpdate(pcm);
  pcm.remove(protocol,sessionRef);
}"
45512,"/** 
 * {@inheritDoc}
 */
@Override public void releaseControlPerform(){
  if (!hasControl()) {
    return;
  }
  appControl=false;
  logger.info(""String_Node_Str"");
  updateControl();
  if (hasControl()) {
    return;
  }
  inputManager.removeKeyMouseFocus(new Entity[]{app.getFocusEntity()});
  numControlledApps--;
  if (numControlledApps <= 0) {
    App2D.invokeLater(new Runnable(){
      public void run(){
        releaseControlAllButtonSetVisible(false);
      }
    }
);
    inputManager.addKeyMouseFocus(inputManager.getGlobalFocusEntity());
    Canvas canvas=JmeClientMain.getFrame().getCanvas();
    if (!canvas.requestFocusInWindow()) {
      logger.info(""String_Node_Str"");
    }
  }
}","/** 
 * {@inheritDoc}
 */
@Override public void releaseControlPerform(){
  if (!hasControl()) {
    return;
  }
  appControl=false;
  logger.info(""String_Node_Str"");
  updateControl();
  if (hasControl()) {
    return;
  }
  inputManager.removeKeyMouseFocus(new Entity[]{app.getFocusEntity()});
  numControlledApps--;
  if (numControlledApps <= 0) {
    App2D.invokeLater(new Runnable(){
      public void run(){
        releaseControlAllButtonSetVisible(false);
      }
    }
);
    inputManager.addKeyMouseFocus(inputManager.getGlobalFocusEntity());
    Canvas canvas=JmeClientMain.getFrame().getCanvas();
    canvas.setFocusable(true);
    if (!canvas.requestFocusInWindow()) {
      logger.info(""String_Node_Str"");
    }
  }
}"
45513,"/** 
 * {@inheritDoc}
 */
@Override public void takeControlPerform(){
  if (hasControl()) {
    return;
  }
  logger.info(""String_Node_Str"");
  appControl=true;
  updateControl();
  if (!hasControl()) {
    return;
  }
  inputManager.addKeyMouseFocus(new Entity[]{app.getFocusEntity()});
  numControlledApps++;
  if (numControlledApps == 1) {
    inputManager.removeKeyMouseFocus(inputManager.getGlobalFocusEntity());
    App2D.invokeLater(new Runnable(){
      public void run(){
        releaseControlAllButtonSetVisible(true);
      }
    }
);
  }
}","/** 
 * {@inheritDoc}
 */
@Override public void takeControlPerform(){
  if (hasControl()) {
    return;
  }
  logger.info(""String_Node_Str"");
  appControl=true;
  updateControl();
  if (!hasControl()) {
    return;
  }
  inputManager.addKeyMouseFocus(new Entity[]{app.getFocusEntity()});
  numControlledApps++;
  if (numControlledApps == 1) {
    inputManager.removeKeyMouseFocus(inputManager.getGlobalFocusEntity());
    JmeClientMain.getFrame().getCanvas().setFocusable(false);
    App2D.invokeLater(new Runnable(){
      public void run(){
        releaseControlAllButtonSetVisible(true);
      }
    }
);
  }
}"
45514,"public void showBounds(final BoundingVolume bounds){
  if (rootNode != null) {
    dispose();
  }
  rootNode=new Node(""String_Node_Str"");
  RenderManager rm=ClientContextJME.getWorldManager().getRenderManager();
  RenderComponent rc=rm.createRenderComponent(rootNode);
  this.addComponent(RenderComponent.class,rc);
  ZBufferState zbuf=(ZBufferState)rm.createRendererState(StateType.ZBuffer);
  zbuf.setEnabled(true);
  zbuf.setFunction(ZBufferState.TestFunction.LessThanOrEqualTo);
  rootNode.setRenderState(zbuf);
  WireframeState wf=(WireframeState)rm.createRendererState(StateType.Wireframe);
  wf.setEnabled(true);
  rootNode.setRenderState(wf);
  if (bounds instanceof BoundingSphere) {
    float radius=((BoundingSphere)bounds).radius;
    Sphere sphere=new Sphere(""String_Node_Str"",30,30,radius);
    rootNode.attachChild(sphere);
  }
 else   if (bounds instanceof BoundingBox) {
    float xExtent=((BoundingBox)bounds).xExtent;
    float yExtent=((BoundingBox)bounds).yExtent;
    float zExtent=((BoundingBox)bounds).zExtent;
    Box box=new Box(""String_Node_Str"",Vector3f.ZERO,xExtent,yExtent,zExtent);
    rootNode.attachChild(box);
  }
  CellTransform transform=cell.getWorldTransform();
  Vector3f translation=transform.getTranslation(null);
  translation=translation.add(bounds.getCenter());
  rootNode.setLocalTranslation(translation);
  rootNode.setLocalRotation(transform.getRotation(null));
  rootNode.setLocalScale(transform.getScaling(null));
  updateListener=new TransformChangeListener(){
    public void transformChanged(    final Cell cell,    ChangeSource source){
      final WorldManager wm=ClientContextJME.getWorldManager();
      RenderUpdater u=new RenderUpdater(){
        public void update(        Object obj){
          CellTransform transform=cell.getWorldTransform();
          Vector3f translation=transform.getTranslation(null);
          translation=translation.add(bounds.getCenter());
          rootNode.setLocalTranslation(translation);
          rootNode.setLocalRotation(transform.getRotation(null));
          wm.addToUpdateList(rootNode);
        }
      }
;
      wm.addRenderUpdater(u,this);
    }
  }
;
  cell.addTransformChangeListener(updateListener);
  setVisible(true);
}","public void showBounds(final BoundingVolume bounds){
  if (rootNode != null) {
    dispose();
  }
  rootNode=new Node(""String_Node_Str"");
  RenderManager rm=ClientContextJME.getWorldManager().getRenderManager();
  RenderComponent rc=rm.createRenderComponent(rootNode);
  this.addComponent(RenderComponent.class,rc);
  ZBufferState zbuf=(ZBufferState)rm.createRendererState(StateType.ZBuffer);
  zbuf.setEnabled(true);
  zbuf.setFunction(ZBufferState.TestFunction.LessThanOrEqualTo);
  rootNode.setRenderState(zbuf);
  WireframeState wf=(WireframeState)rm.createRendererState(StateType.Wireframe);
  wf.setEnabled(true);
  rootNode.setRenderState(wf);
  if (bounds instanceof BoundingSphere) {
    float radius=((BoundingSphere)bounds).radius;
    Vector3f center=((BoundingSphere)bounds).getCenter();
    Sphere sphere=new Sphere(""String_Node_Str"",center,30,30,radius);
    rootNode.attachChild(sphere);
  }
 else   if (bounds instanceof BoundingBox) {
    float xExtent=((BoundingBox)bounds).xExtent;
    float yExtent=((BoundingBox)bounds).yExtent;
    float zExtent=((BoundingBox)bounds).zExtent;
    Vector3f origin=((BoundingBox)bounds).getCenter();
    Box box=new Box(""String_Node_Str"",origin,xExtent,yExtent,zExtent);
    rootNode.attachChild(box);
  }
  CellTransform transform=cell.getWorldTransform();
  rootNode.setLocalTranslation(transform.getTranslation(null));
  rootNode.setLocalRotation(transform.getRotation(null));
  rootNode.setLocalScale(transform.getScaling(null));
  updateListener=new TransformChangeListener(){
    public void transformChanged(    final Cell cell,    ChangeSource source){
      final WorldManager wm=ClientContextJME.getWorldManager();
      RenderUpdater u=new RenderUpdater(){
        public void update(        Object obj){
          CellTransform transform=cell.getWorldTransform();
          rootNode.setLocalTranslation(transform.getTranslation(null));
          rootNode.setLocalRotation(transform.getRotation(null));
          rootNode.setLocalScale(transform.getScaling(null));
          wm.addToUpdateList(rootNode);
        }
      }
;
      wm.addRenderUpdater(u,this);
    }
  }
;
  cell.addTransformChangeListener(updateListener);
  setVisible(true);
}"
45515,"public void update(Object obj){
  CellTransform transform=cell.getWorldTransform();
  Vector3f translation=transform.getTranslation(null);
  translation=translation.add(bounds.getCenter());
  rootNode.setLocalTranslation(translation);
  rootNode.setLocalRotation(transform.getRotation(null));
  wm.addToUpdateList(rootNode);
}","public void update(Object obj){
  CellTransform transform=cell.getWorldTransform();
  rootNode.setLocalTranslation(transform.getTranslation(null));
  rootNode.setLocalRotation(transform.getRotation(null));
  rootNode.setLocalScale(transform.getScaling(null));
  wm.addToUpdateList(rootNode);
}"
45516,"public void transformChanged(final Cell cell,ChangeSource source){
  final WorldManager wm=ClientContextJME.getWorldManager();
  RenderUpdater u=new RenderUpdater(){
    public void update(    Object obj){
      CellTransform transform=cell.getWorldTransform();
      Vector3f translation=transform.getTranslation(null);
      translation=translation.add(bounds.getCenter());
      rootNode.setLocalTranslation(translation);
      rootNode.setLocalRotation(transform.getRotation(null));
      wm.addToUpdateList(rootNode);
    }
  }
;
  wm.addRenderUpdater(u,this);
}","public void transformChanged(final Cell cell,ChangeSource source){
  final WorldManager wm=ClientContextJME.getWorldManager();
  RenderUpdater u=new RenderUpdater(){
    public void update(    Object obj){
      CellTransform transform=cell.getWorldTransform();
      rootNode.setLocalTranslation(transform.getTranslation(null));
      rootNode.setLocalRotation(transform.getRotation(null));
      rootNode.setLocalScale(transform.getScaling(null));
      wm.addToUpdateList(rootNode);
    }
  }
;
  wm.addRenderUpdater(u,this);
}"
45517,"/** 
 */
@Override public void drop(DropTargetDropEvent dtde){
  Point location=dtde.getLocation();
  TreePath path=cellHierarchyTree.getPathForLocation(location.x,location.y);
  if (path == null) {
    dtde.rejectDrop();
    return;
  }
  dtde.acceptDrop(DnDConstants.ACTION_MOVE);
  Transferable transferable=dtde.getTransferable();
  String cellIDString=null;
  try {
    DataFlavor df=new DataFlavor(""String_Node_Str"" + ""String_Node_Str"");
    cellIDString=(String)transferable.getTransferData(df);
  }
 catch (  Exception excp) {
    LOGGER.log(Level.WARNING,""String_Node_Str"" + ""String_Node_Str"",excp);
    return;
  }
  if (cellIDString == null || cellIDString.startsWith(""String_Node_Str"") == false) {
    LOGGER.warning(""String_Node_Str"" + cellIDString);
    return;
  }
  int cellIDInt=-1;
  try {
    cellIDInt=Integer.parseInt(cellIDString.substring(7));
  }
 catch (  Exception excp) {
    LOGGER.log(Level.WARNING,""String_Node_Str"" + ""String_Node_Str"",excp);
    return;
  }
  CellID cellID=new CellID(cellIDInt);
  WonderlandSession session=LoginManager.getPrimary().getPrimarySession();
  CellCache cache=ClientContext.getCellCache(session);
  if (cache == null) {
    LOGGER.warning(""String_Node_Str"" + session);
    return;
  }
  Cell draggedCell=cache.getCell(cellID);
  if (draggedCell == null) {
    LOGGER.warning(""String_Node_Str"" + cellID);
    return;
  }
  CellID parentCellID=CellID.getInvalidCellID();
  SortedTreeNode treeNode=(SortedTreeNode)path.getLastPathComponent();
  Object userObject=treeNode.getUserObject();
  Cell newParent=null;
  if (userObject instanceof Cell) {
    parentCellID=((Cell)userObject).getCellID();
    newParent=(Cell)userObject;
    if (draggedCell.equals(newParent) == true) {
      return;
    }
  }
  CellTransform newParentWorld=new CellTransform(null,null);
  if (newParent != null) {
    newParentWorld=newParent.getWorldTransform();
  }
  CellTransform newChildLocal=ScenegraphUtils.computeChildTransform(newParentWorld,draggedCell.getWorldTransform());
  CellEditChannelConnection connection=(CellEditChannelConnection)session.getConnection(CellEditConnectionType.CLIENT_TYPE);
  connection.send(new CellReparentMessage(cellID,parentCellID,newChildLocal));
  dragOverTreeNode=null;
  cellHierarchyTree.repaint();
}","/** 
 */
@Override public void drop(DropTargetDropEvent dtde){
  Point location=dtde.getLocation();
  TreePath path=cellHierarchyTree.getPathForLocation(location.x,location.y);
  if (path == null) {
    dtde.rejectDrop();
    return;
  }
  dtde.acceptDrop(DnDConstants.ACTION_MOVE);
  Transferable transferable=dtde.getTransferable();
  String cellIDString=null;
  try {
    DataFlavor df=new DataFlavor(""String_Node_Str"" + ""String_Node_Str"");
    cellIDString=(String)transferable.getTransferData(df);
  }
 catch (  Exception excp) {
    LOGGER.log(Level.WARNING,""String_Node_Str"" + ""String_Node_Str"",excp);
    return;
  }
  if (cellIDString == null || cellIDString.startsWith(""String_Node_Str"") == false) {
    LOGGER.warning(""String_Node_Str"" + cellIDString);
    return;
  }
  int cellIDInt=-1;
  try {
    cellIDInt=Integer.parseInt(cellIDString.substring(7));
  }
 catch (  Exception excp) {
    LOGGER.log(Level.WARNING,""String_Node_Str"" + ""String_Node_Str"",excp);
    return;
  }
  CellID cellID=new CellID(cellIDInt);
  WonderlandSession session=LoginManager.getPrimary().getPrimarySession();
  CellCache cache=ClientContext.getCellCache(session);
  if (cache == null) {
    LOGGER.warning(""String_Node_Str"" + session);
    return;
  }
  Cell draggedCell=cache.getCell(cellID);
  if (draggedCell == null) {
    LOGGER.warning(""String_Node_Str"" + cellID);
    return;
  }
  CellID parentCellID=CellID.getInvalidCellID();
  SortedTreeNode treeNode=(SortedTreeNode)path.getLastPathComponent();
  Object userObject=treeNode.getUserObject();
  Cell newParent=null;
  if (userObject instanceof Cell && !(userObject instanceof EnvironmentCell)) {
    parentCellID=((Cell)userObject).getCellID();
    newParent=(Cell)userObject;
    if (draggedCell.equals(newParent) == true) {
      return;
    }
  }
  CellTransform newParentWorld=new CellTransform(null,null);
  if (newParent != null) {
    newParentWorld=newParent.getWorldTransform();
  }
  CellTransform newChildLocal=ScenegraphUtils.computeChildTransform(newParentWorld,draggedCell.getWorldTransform());
  CellEditChannelConnection connection=(CellEditChannelConnection)session.getConnection(CellEditConnectionType.CLIENT_TYPE);
  connection.send(new CellReparentMessage(cellID,parentCellID,newChildLocal));
  dragOverTreeNode=null;
  cellHierarchyTree.repaint();
}"
45518,"/** 
 * Creates a cell in the world given the CellServerState of the cell. If the given CellServerState is null, this method simply does not create a Cell. This method attempts to position the Cell ""optimally"" so that the avatar can see it, based upon ""hints"" about the Cell bounds given to it in the CellServerState.
 * @param state The cell server state for the new cell
 * @param parentCellID The Cell ID of the parent, of null for world root
 * @throw CellCreationException Upon error creating the cell
 */
public static void createCell(CellServerState state,CellID parentCellID) throws CellCreationException {
  if (state == null) {
    logger.fine(""String_Node_Str"");
    return;
  }
  ViewManager vm=ViewManager.getViewManager();
  ViewCell viewCell=vm.getPrimaryViewCell();
  CellTransform viewTransform=viewCell.getWorldTransform();
  ServerSessionManager manager=viewCell.getCellCache().getSession().getSessionManager();
  CellTransform transform=null;
  BoundingVolumeHint hint=state.getBoundingVolumeHint();
  logger.info(""String_Node_Str"" + hint.getBoundsHint() + ""String_Node_Str""+ hint.isDoSystemPlacement());
  if (hint != null && hint.isDoSystemPlacement() == true) {
    BoundingVolume boundsHint=hint.getBoundsHint();
    transform=CellPlacementUtils.getCellTransform(manager,boundsHint,viewTransform);
  }
 else   if (hint == null) {
    BoundingVolume boundsHint=new BoundingSphere(DEFAULT_RADIUS,Vector3f.ZERO);
    transform=CellPlacementUtils.getCellTransform(manager,boundsHint,viewTransform);
  }
 else   if (hint != null && hint.isDoSystemPlacement() == false) {
    transform=viewTransform;
  }
  if (parentCellID != null) {
    Cell parent=viewCell.getCellCache().getCell(parentCellID);
    CellTransform worldTransform=new CellTransform(null,null);
    CellTransform parentTransform=parent.getWorldTransform();
    logger.info(""String_Node_Str"" + parentTransform.getTranslation(null).toString() + ""String_Node_Str""+ parentTransform.getRotation(null).toString());
    transform=CellPlacementUtils.transform(transform,worldTransform,parentTransform);
  }
  logger.info(""String_Node_Str"" + transform.getTranslation(null).toString());
  PositionComponentServerState position=(PositionComponentServerState)state.getComponentServerState(PositionComponentServerState.class);
  if (position == null) {
    position=new PositionComponentServerState();
    state.addComponentServerState(position);
  }
  position.setTranslation(transform.getTranslation(null));
  position.setRotation(transform.getRotation(null));
  position.setScaling(transform.getScaling(null));
  state.addComponentServerState(new ViewComponentServerState(viewTransform));
  WonderlandSession session=manager.getPrimarySession();
  CellEditChannelConnection connection=(CellEditChannelConnection)session.getConnection(CellEditConnectionType.CLIENT_TYPE);
  CellCreateMessage msg=new CellCreateMessage(parentCellID,state);
  connection.send(msg);
}","/** 
 * Creates a cell in the world given the CellServerState of the cell. If the given CellServerState is null, this method simply does not create a Cell. This method attempts to position the Cell ""optimally"" so that the avatar can see it, based upon ""hints"" about the Cell bounds given to it in the CellServerState.
 * @param state The cell server state for the new cell
 * @param parentCellID The Cell ID of the parent, of null for world root
 * @throw CellCreationException Upon error creating the cell
 */
public static void createCell(CellServerState state,CellID parentCellID) throws CellCreationException {
  if (state == null) {
    logger.fine(""String_Node_Str"");
    return;
  }
  ViewManager vm=ViewManager.getViewManager();
  ViewCell viewCell=vm.getPrimaryViewCell();
  CellTransform viewTransform=viewCell.getWorldTransform();
  ServerSessionManager manager=viewCell.getCellCache().getSession().getSessionManager();
  CellTransform transform=null;
  BoundingVolumeHint hint=state.getBoundingVolumeHint();
  logger.info(""String_Node_Str"" + hint.getBoundsHint() + ""String_Node_Str""+ hint.isDoSystemPlacement());
  if (hint != null && hint.isDoSystemPlacement() == true) {
    BoundingVolume boundsHint=hint.getBoundsHint();
    transform=CellPlacementUtils.getCellTransform(manager,boundsHint,viewTransform);
  }
 else   if (hint == null) {
    BoundingVolume boundsHint=new BoundingSphere(DEFAULT_RADIUS,Vector3f.ZERO);
    transform=CellPlacementUtils.getCellTransform(manager,boundsHint,viewTransform);
  }
 else   if (hint != null && hint.isDoSystemPlacement() == false) {
    transform=viewTransform;
  }
  if (parentCellID != null) {
    Cell parent=viewCell.getCellCache().getCell(parentCellID);
    CellTransform worldTransform=new CellTransform(null,null);
    CellTransform parentTransform=parent.getWorldTransform();
    logger.info(""String_Node_Str"" + parentTransform.getTranslation(null).toString() + ""String_Node_Str""+ parentTransform.getRotation(null).toString());
    transform=ScenegraphUtils.computeChildTransform(parentTransform,transform);
  }
  logger.info(""String_Node_Str"" + transform.getTranslation(null).toString());
  PositionComponentServerState position=(PositionComponentServerState)state.getComponentServerState(PositionComponentServerState.class);
  if (position == null) {
    position=new PositionComponentServerState();
    state.addComponentServerState(position);
  }
  position.setTranslation(transform.getTranslation(null));
  position.setRotation(transform.getRotation(null));
  position.setScaling(transform.getScaling(null));
  state.addComponentServerState(new ViewComponentServerState(viewTransform));
  WonderlandSession session=manager.getPrimarySession();
  CellEditChannelConnection connection=(CellEditChannelConnection)session.getConnection(CellEditConnectionType.CLIENT_TYPE);
  CellCreateMessage msg=new CellCreateMessage(parentCellID,state);
  connection.send(msg);
}"
45519,"public void removeRootSpatialCell(SpatialCellImpl cell){
  logger.fine(""String_Node_Str"" + cell.getCellID() + ""String_Node_Str""+ getName());
synchronized (rootCells) {
    rootCells.remove(cell);
  }
synchronized (viewCaches) {
    cell.removeViewCache(viewCaches,this);
    ViewCache[] caches=viewCaches.toArray(new ViewCache[viewCaches.size()]);
    for (    ViewCache cache : caches)     cache.rootCellRemoved(cell);
  }
}","public void removeRootSpatialCell(SpatialCellImpl cell){
  logger.fine(""String_Node_Str"" + cell.getCellID() + ""String_Node_Str""+ getName());
  try {
    acquireRootCellWriteLock();
    rootCells.remove(cell);
  }
  finally {
    releaseRootCellWriteLock();
  }
synchronized (viewCaches) {
    cell.removeViewCache(viewCaches,this);
    ViewCache[] caches=viewCaches.toArray(new ViewCache[viewCaches.size()]);
    for (    ViewCache cache : caches)     cache.rootCellRemoved(cell);
  }
}"
45520,"public void addRootSpatialCell(SpatialCellImpl cell){
  logger.fine(""String_Node_Str"" + cell.getCellID() + ""String_Node_Str""+ getName());
synchronized (rootCells) {
    rootCells.add(cell);
  }
synchronized (viewCaches) {
    cell.addViewCache(viewCaches,this);
    ViewCache[] caches=viewCaches.toArray(new ViewCache[viewCaches.size()]);
    for (    ViewCache cache : caches)     cache.rootCellAdded(cell);
  }
}","public void addRootSpatialCell(SpatialCellImpl cell){
  logger.fine(""String_Node_Str"" + cell.getCellID() + ""String_Node_Str""+ getName());
  try {
    acquireRootCellWriteLock();
    rootCells.add(cell);
  }
  finally {
    releaseRootCellWriteLock();
  }
synchronized (viewCaches) {
    cell.addViewCache(viewCaches,this);
    ViewCache[] caches=viewCaches.toArray(new ViewCache[viewCaches.size()]);
    for (    ViewCache cache : caches)     cache.rootCellAdded(cell);
  }
}"
45521,"/** 
 * Returns a snapshot of the set of root cells (no need to hold a lock when calling this method)
 * @return
 */
public Collection<SpatialCellImpl> getRootCells(){
synchronized (rootCells) {
    return (Collection<SpatialCellImpl>)rootCells.clone();
  }
}","/** 
 * Returns a snapshot of the set of root cells (no need to hold a lock when calling this method)
 * @return
 */
public Collection<SpatialCellImpl> getRootCells(){
  try {
    acquireRootCellReadLock();
    return (Collection<SpatialCellImpl>)rootCells.clone();
  }
  finally {
    releaseRootCellReadLock();
  }
}"
45522,"public void addViewCache(ViewCache cache){
synchronized (viewCaches) {
    viewCaches.add(cache);
synchronized (rootCells) {
      for (      SpatialCellImpl rootCell : rootCells) {
        rootCell.addViewCache(Collections.singletonList(cache),this);
      }
    }
  }
}","public void addViewCache(ViewCache cache){
  try {
    acquireRootCellReadLock();
synchronized (viewCaches) {
      viewCaches.add(cache);
      for (      SpatialCellImpl rootCell : rootCells) {
        rootCell.addViewCache(Collections.singletonList(cache),this);
      }
    }
  }
  finally {
    releaseRootCellReadLock();
  }
}"
45523,"public void removeViewCache(ViewCache cache){
synchronized (viewCaches) {
    viewCaches.remove(cache);
synchronized (rootCells) {
      for (      SpatialCellImpl rootCell : rootCells) {
        rootCell.removeViewCache(Collections.singletonList(cache),this);
      }
    }
  }
}","public void removeViewCache(ViewCache cache){
  try {
    acquireRootCellReadLock();
synchronized (viewCaches) {
      viewCaches.remove(cache);
      for (      SpatialCellImpl rootCell : rootCells) {
        rootCell.removeViewCache(Collections.singletonList(cache),this);
      }
    }
  }
  finally {
    releaseRootCellReadLock();
  }
}"
45524,"@Override public void commitEvent(Event event){
  SwingEnterExitEvent3D seeEvent=(SwingEnterExitEvent3D)event;
  if (!seeEvent.isEntered()) {
    InputManager.ensureKeyFocusInMainWindow();
  }
}","@Override public void commitEvent(Event event){
  SwingEnterExitEvent3D seeEvent=(SwingEnterExitEvent3D)event;
}"
45525,"/** 
 * Destroy this cell.
 */
public void destroy(){
  CellManagerMO.getCellManager().removeCellFromWorld(this);
  serverState=null;
  connectionInfo=null;
}","/** 
 * Destroy this cell.
 */
public void destroy(){
  CellManagerMO.getCellManager().removeCellFromWorld(this);
  connectionInfo=null;
}"
45526,"public UniverseService(Properties props,ComponentRegistry registry,TransactionProxy proxy){
  super(props,registry,proxy,logger);
  logger.log(Level.CONFIG,""String_Node_Str"",props);
  PropertiesWrapper wrappedProps=new PropertiesWrapper(props);
  cellLoadCount=wrappedProps.getIntProperty(CELL_LOAD_PROP,CELL_LOAD_DEFAULT);
  ctxFactory=new TransactionContextFactoryImpl(proxy);
  changeApplication=new ChangeApplication();
  universe=new UniverseImpl(registry,proxy);
  try {
    transactionScheduler.runTask(new KernelRunnable(){
      public String getBaseTaskType(){
        return NAME + ""String_Node_Str"";
      }
      public void run(){
        checkServiceVersion(VERSION_KEY,MAJOR_VERSION,MINOR_VERSION);
      }
    }
,taskOwner);
  }
 catch (  Exception ex) {
    logger.logThrow(Level.SEVERE,ex,""String_Node_Str"");
  }
}","public UniverseService(Properties props,ComponentRegistry registry,TransactionProxy proxy){
  super(props,registry,proxy,logger);
  logger.log(Level.CONFIG,""String_Node_Str"",props);
  PropertiesWrapper wrappedProps=new PropertiesWrapper(props);
  cellLoadCount=wrappedProps.getIntProperty(CELL_LOAD_PROP,CELL_LOAD_DEFAULT);
  ctxFactory=new TransactionContextFactoryImpl(proxy);
  changeApplication=new ChangeApplication();
  universe=new UniverseImpl(registry,proxy,taskOwner);
  try {
    transactionScheduler.runTask(new KernelRunnable(){
      public String getBaseTaskType(){
        return NAME + ""String_Node_Str"";
      }
      public void run(){
        checkServiceVersion(VERSION_KEY,MAJOR_VERSION,MINOR_VERSION);
      }
    }
,taskOwner);
  }
 catch (  Exception ex) {
    logger.logThrow(Level.SEVERE,ex,""String_Node_Str"");
  }
}"
45527,"void addTransformChangeListener(TransformChangeListenerSrv listener){
synchronized (transformChangeListenersSync) {
    if (transformChangeListeners == null)     transformChangeListeners=new ArrayList();
    transformChangeListeners.add(listener);
  }
}","void addTransformChangeListener(TransformChangeListenerSrv listener){
synchronized (transformChangeListenersSync) {
    if (transformChangeListeners == null)     transformChangeListeners=new ArrayList();
    transformChangeListeners.add(listener);
    Collection<TransformChangeListenerSrv> listeners=Collections.singleton(listener);
    UniverseImpl.getUniverse().scheduleTransaction(new TransformChangeNotificationTask(listeners,cellID,localTransform,worldTransform),null);
  }
}"
45528,"public void scheduleQueuedTransaction(KernelRunnable task,Identity identity,Object queueOwner){
synchronized (taskQueues) {
    TaskQueue queue=taskQueues.get(queueOwner);
    if (queue == null) {
      queue=transactionScheduler.createTaskQueue();
      taskQueues.put(queueOwner,queue);
    }
    queue.addTask(task,identity);
  }
}","public void scheduleQueuedTransaction(KernelRunnable task,Identity identity,Object queueOwner){
  if (identity == null) {
    identity=defaultTaskOwner;
  }
synchronized (taskQueues) {
    TaskQueue queue=taskQueues.get(queueOwner);
    if (queue == null) {
      queue=transactionScheduler.createTaskQueue();
      taskQueues.put(queueOwner,queue);
    }
    queue.addTask(task,identity);
  }
}"
45529,"public UniverseImpl(ComponentRegistry componentRegistry,TransactionProxy transactionProxy){
  this.transactionProxy=transactionProxy;
  this.dataService=transactionProxy.getService(DataService.class);
  this.transactionScheduler=componentRegistry.getComponent(TransactionScheduler.class);
  universe=this;
  logger.setLevel(Level.ALL);
}","public UniverseImpl(ComponentRegistry componentRegistry,TransactionProxy transactionProxy,Identity defaultTaskOwner){
  this.transactionProxy=transactionProxy;
  this.dataService=transactionProxy.getService(DataService.class);
  this.transactionScheduler=componentRegistry.getComponent(TransactionScheduler.class);
  this.defaultTaskOwner=defaultTaskOwner;
  universe=this;
  logger.setLevel(Level.ALL);
}"
45530,"public void scheduleTransaction(KernelRunnable transaction,Identity identity){
  transactionScheduler.scheduleTask(transaction,identity);
}","public void scheduleTransaction(KernelRunnable transaction,Identity identity){
  if (identity == null) {
    identity=defaultTaskOwner;
  }
  transactionScheduler.scheduleTask(transaction,identity);
}"
45531,"public void showBounds(final BoundingVolume bounds){
  if (rootNode != null) {
    dispose();
  }
  rootNode=new Node(""String_Node_Str"");
  RenderManager rm=ClientContextJME.getWorldManager().getRenderManager();
  RenderComponent rc=rm.createRenderComponent(rootNode);
  this.addComponent(RenderComponent.class,rc);
  ZBufferState zbuf=(ZBufferState)rm.createRendererState(StateType.ZBuffer);
  zbuf.setEnabled(true);
  zbuf.setFunction(ZBufferState.TestFunction.LessThanOrEqualTo);
  rootNode.setRenderState(zbuf);
  WireframeState wf=(WireframeState)rm.createRendererState(StateType.Wireframe);
  wf.setEnabled(true);
  rootNode.setRenderState(wf);
  if (bounds instanceof BoundingSphere) {
    float radius=((BoundingSphere)bounds).radius;
    Sphere sphere=new Sphere(""String_Node_Str"",30,30,radius);
    rootNode.attachChild(sphere);
  }
 else   if (bounds instanceof BoundingBox) {
    float xExtent=((BoundingBox)bounds).xExtent;
    float yExtent=((BoundingBox)bounds).yExtent;
    float zExtent=((BoundingBox)bounds).zExtent;
    Box box=new Box(""String_Node_Str"",Vector3f.ZERO,xExtent,yExtent,zExtent);
    rootNode.attachChild(box);
  }
  CellTransform transform=cell.getWorldTransform();
  Vector3f translation=transform.getTranslation(null);
  translation=translation.add(bounds.getCenter());
  rootNode.setLocalTranslation(translation);
  rootNode.setLocalRotation(transform.getRotation(null));
  updateListener=new TransformChangeListener(){
    public void transformChanged(    final Cell cell,    ChangeSource source){
      final WorldManager wm=ClientContextJME.getWorldManager();
      RenderUpdater u=new RenderUpdater(){
        public void update(        Object obj){
          CellTransform transform=cell.getWorldTransform();
          Vector3f translation=transform.getTranslation(null);
          translation=translation.add(bounds.getCenter());
          rootNode.setLocalTranslation(translation);
          rootNode.setLocalRotation(transform.getRotation(null));
          wm.addToUpdateList(rootNode);
        }
      }
;
      wm.addRenderUpdater(u,this);
    }
  }
;
  cell.addTransformChangeListener(updateListener);
  setVisible(true);
}","public void showBounds(final BoundingVolume bounds){
  if (rootNode != null) {
    dispose();
  }
  rootNode=new Node(""String_Node_Str"");
  RenderManager rm=ClientContextJME.getWorldManager().getRenderManager();
  RenderComponent rc=rm.createRenderComponent(rootNode);
  this.addComponent(RenderComponent.class,rc);
  ZBufferState zbuf=(ZBufferState)rm.createRendererState(StateType.ZBuffer);
  zbuf.setEnabled(true);
  zbuf.setFunction(ZBufferState.TestFunction.LessThanOrEqualTo);
  rootNode.setRenderState(zbuf);
  WireframeState wf=(WireframeState)rm.createRendererState(StateType.Wireframe);
  wf.setEnabled(true);
  rootNode.setRenderState(wf);
  if (bounds instanceof BoundingSphere) {
    float radius=((BoundingSphere)bounds).radius;
    Sphere sphere=new Sphere(""String_Node_Str"",30,30,radius);
    rootNode.attachChild(sphere);
  }
 else   if (bounds instanceof BoundingBox) {
    float xExtent=((BoundingBox)bounds).xExtent;
    float yExtent=((BoundingBox)bounds).yExtent;
    float zExtent=((BoundingBox)bounds).zExtent;
    Box box=new Box(""String_Node_Str"",Vector3f.ZERO,xExtent,yExtent,zExtent);
    rootNode.attachChild(box);
  }
  CellTransform transform=cell.getWorldTransform();
  Vector3f translation=transform.getTranslation(null);
  translation=translation.add(bounds.getCenter());
  rootNode.setLocalTranslation(translation);
  rootNode.setLocalRotation(transform.getRotation(null));
  rootNode.setLocalScale(transform.getScaling(null));
  updateListener=new TransformChangeListener(){
    public void transformChanged(    final Cell cell,    ChangeSource source){
      final WorldManager wm=ClientContextJME.getWorldManager();
      RenderUpdater u=new RenderUpdater(){
        public void update(        Object obj){
          CellTransform transform=cell.getWorldTransform();
          Vector3f translation=transform.getTranslation(null);
          translation=translation.add(bounds.getCenter());
          rootNode.setLocalTranslation(translation);
          rootNode.setLocalRotation(transform.getRotation(null));
          wm.addToUpdateList(rootNode);
        }
      }
;
      wm.addRenderUpdater(u,this);
    }
  }
;
  cell.addTransformChangeListener(updateListener);
  setVisible(true);
}"
45532,"/** 
 * Specify the Swing component displayed in this window. The component is validated (that is it is layed out). Note: After you call <code>setComponent</code> the window will be in ""preferred size"" mode,  that is, it the window will be sized according to the Swing component's preferred sizes and  the component's layout manager. If you call <code>WindowSwing.setSize(int width, int height)</code> or  <code>WindowSwing.setSize(Dimension dims)</code> with a non-null <code>dims</code> the window will be  in ""forced size"" mode. This means that the window will always be the size you specify and this will constrain the sizes of the contained component. To switch back into preferred size mode call <code>WindowSwing.setSize(null)</code>.
 * @param component The component to be displayed.
 */
public void setComponent(Component component){
  if (this.component == component) {
    return;
  }
  this.component=component;
  if (embeddedPeer != null) {
    embeddedPeer.dispose();
    embeddedPeer=null;
  }
  if (component != null) {
    checkContainer();
  }
  addEventListener(new MySwingEnterExitListener());
  embeddedPeer.validate();
  embeddedPeer.repaint();
}","/** 
 * Specify the Swing component displayed in this window. The component is validated (that is it is layed out). Note: After you call <code>setComponent</code> the window will be in ""preferred size"" mode,  that is, it the window will be sized according to the Swing component's preferred sizes and  the component's layout manager. If you call <code>WindowSwing.setSize(int width, int height)</code> or  <code>WindowSwing.setSize(Dimension dims)</code> with a non-null <code>dims</code> the window will be  in ""forced size"" mode. This means that the window will always be the size you specify and this will constrain the sizes of the contained component. To switch back into preferred size mode call <code>WindowSwing.setSize(null)</code>.
 * @param component The component to be displayed.
 */
public void setComponent(Component component){
  if (this.component == component) {
    return;
  }
  this.component=component;
  if (embeddedPeer != null) {
    embeddedPeer.dispose();
    embeddedPeer=null;
  }
  if (component != null) {
    checkContainer();
  }
  addEventListener(new MySwingEnterExitListener());
  SwingUtilities.invokeLater(new Runnable(){
    public void run(){
      embeddedPeer.validate();
    }
  }
);
  embeddedPeer.repaint();
}"
45533,"private void resolveAnnotations(Class clazz,Object o){
  Field[] fields=clazz.getDeclaredFields();
  for (  Field f : fields) {
    UsesCellComponent a=f.getAnnotation(UsesCellComponent.class);
    if (a != null) {
      if (logger.isLoggable(Level.FINE)) {
        logger.fine(""String_Node_Str"" + f.getName() + ""String_Node_Str""+ f.getType());
      }
      Class componentClazz=f.getType();
      CellComponent comp=getComponent(CellComponent.getLookupClass(componentClazz));
      if (comp == null) {
        try {
          comp=(CellComponent)componentClazz.getConstructor(Cell.class).newInstance(this);
          addComponent(comp);
        }
 catch (        IllegalArgumentException ex) {
          logger.log(Level.SEVERE,null,ex);
        }
catch (        InvocationTargetException ex) {
          logger.log(Level.SEVERE,null,ex);
        }
catch (        NoSuchMethodException ex) {
          logger.log(Level.SEVERE,null,ex);
        }
catch (        SecurityException ex) {
          logger.log(Level.SEVERE,null,ex);
        }
catch (        InstantiationException ex) {
          logger.log(Level.SEVERE,null,ex);
        }
catch (        IllegalAccessException ex) {
          logger.log(Level.SEVERE,null,ex);
        }
      }
      try {
        f.setAccessible(true);
        f.set(o,comp);
      }
 catch (      IllegalArgumentException ex) {
        logger.log(Level.SEVERE,null,ex);
      }
catch (      IllegalAccessException ex) {
        logger.log(Level.SEVERE,null,ex);
      }
    }
  }
}","private void resolveAnnotations(Class clazz,Object o){
  Field[] fields=clazz.getDeclaredFields();
  for (  Field f : fields) {
    UsesCellComponent a=f.getAnnotation(UsesCellComponent.class);
    if (a != null) {
      if (logger.isLoggable(Level.FINE)) {
        logger.fine(""String_Node_Str"" + f.getName() + ""String_Node_Str""+ f.getType());
      }
      Class componentClazz=f.getType();
      CellComponent comp=getComponent(CellComponentUtils.getLookupClass(componentClazz));
      if (comp == null) {
        try {
          comp=(CellComponent)componentClazz.getConstructor(Cell.class).newInstance(this);
          addComponent(comp);
        }
 catch (        IllegalArgumentException ex) {
          logger.log(Level.SEVERE,null,ex);
        }
catch (        InvocationTargetException ex) {
          logger.log(Level.SEVERE,null,ex);
        }
catch (        NoSuchMethodException ex) {
          logger.log(Level.SEVERE,null,ex);
        }
catch (        SecurityException ex) {
          logger.log(Level.SEVERE,null,ex);
        }
catch (        InstantiationException ex) {
          logger.log(Level.SEVERE,null,ex);
        }
catch (        IllegalAccessException ex) {
          logger.log(Level.SEVERE,null,ex);
        }
      }
      try {
        f.setAccessible(true);
        f.set(o,comp);
      }
 catch (      IllegalArgumentException ex) {
        logger.log(Level.SEVERE,null,ex);
      }
catch (      IllegalAccessException ex) {
        logger.log(Level.SEVERE,null,ex);
      }
    }
  }
}"
45534,"/** 
 * Called when the cell is initially created and any time there is a  major configuration change. The cell will already be attached to it's parent before the initial call of this method
 * @param configData the configuration data for the cell
 */
public void setClientState(CellClientState configData){
  this.setName(configData.getName());
  logger.fine(""String_Node_Str"" + getCellID() + ""String_Node_Str""+ getClass());
  for (  String compClassname : configData.getClientComponentClasses()) {
    try {
      WonderlandSession session=getCellCache().getSession();
      ClassLoader cl=session.getSessionManager().getClassloader();
      Class compClazz=cl.loadClass(compClassname);
      Class lookupClazz=CellComponent.getLookupClass(compClazz);
      CellComponent component=getComponent(lookupClazz);
      if (component == null) {
        Constructor<CellComponent> constructor=compClazz.getConstructor(Cell.class);
        component=constructor.newInstance(this);
        CellComponentClientState clientState=configData.getCellComponentClientState(compClassname);
        if (clientState != null) {
          component.setClientState(clientState);
        }
        addComponent(component,CellComponent.getLookupClass(component.getClass()));
      }
 else {
        CellComponentClientState clientState=configData.getCellComponentClientState(compClassname);
        if (clientState != null) {
          component.setClientState(clientState);
        }
      }
    }
 catch (    InstantiationException ex) {
      logger.log(Level.SEVERE,""String_Node_Str"" + compClassname + ""String_Node_Str""+ getClass().getName(),ex);
    }
catch (    ClassNotFoundException ex) {
      logger.log(Level.SEVERE,""String_Node_Str"" + compClassname,ex);
    }
catch (    Exception ex) {
      logger.log(Level.SEVERE,null,ex);
    }
  }
}","/** 
 * Called when the cell is initially created and any time there is a  major configuration change. The cell will already be attached to it's parent before the initial call of this method
 * @param configData the configuration data for the cell
 */
public void setClientState(CellClientState configData){
  this.setName(configData.getName());
  logger.fine(""String_Node_Str"" + getCellID() + ""String_Node_Str""+ getClass());
  for (  String compClassname : configData.getClientComponentClasses()) {
    try {
      WonderlandSession session=getCellCache().getSession();
      ClassLoader cl=session.getSessionManager().getClassloader();
      Class compClazz=cl.loadClass(compClassname);
      Class lookupClazz=CellComponentUtils.getLookupClass(compClazz);
      CellComponent component=getComponent(lookupClazz);
      if (component == null) {
        Constructor<CellComponent> constructor=compClazz.getConstructor(Cell.class);
        component=constructor.newInstance(this);
        CellComponentClientState clientState=configData.getCellComponentClientState(compClassname);
        if (clientState != null) {
          component.setClientState(clientState);
        }
        addComponent(component,CellComponentUtils.getLookupClass(component.getClass()));
      }
 else {
        CellComponentClientState clientState=configData.getCellComponentClientState(compClassname);
        if (clientState != null) {
          component.setClientState(clientState);
        }
      }
    }
 catch (    InstantiationException ex) {
      logger.log(Level.SEVERE,""String_Node_Str"" + compClassname + ""String_Node_Str""+ getClass().getName(),ex);
    }
catch (    ClassNotFoundException ex) {
      logger.log(Level.SEVERE,""String_Node_Str"" + compClassname,ex);
    }
catch (    Exception ex) {
      logger.log(Level.SEVERE,null,ex);
    }
  }
}"
45535,"/** 
 * Handles when a ""remove"" component message has been received by the client. Checks to see if the component class exists, and removes it
 */
private void removeComponent(CellClientComponentMessage message){
  String className=message.getCellComponentClientClassName();
  if (className == null) {
    return;
  }
  WonderlandSession session=cell.getCellCache().getSession();
  ServerSessionManager ssm=session.getSessionManager();
  ClassLoader cl=ssm.getClassloader();
  try {
    Class compClazz=cl.loadClass(className);
    Class clazz=CellComponent.getLookupClass(compClazz);
    cell.removeComponent(clazz);
  }
 catch (  java.lang.ClassNotFoundException excp) {
    logger.log(Level.WARNING,""String_Node_Str"",excp);
  }
}","/** 
 * Handles when a ""remove"" component message has been received by the client. Checks to see if the component class exists, and removes it
 */
private void removeComponent(CellClientComponentMessage message){
  String className=message.getCellComponentClientClassName();
  if (className == null) {
    return;
  }
  WonderlandSession session=cell.getCellCache().getSession();
  ServerSessionManager ssm=session.getSessionManager();
  ClassLoader cl=ssm.getClassloader();
  try {
    Class compClazz=cl.loadClass(className);
    Class clazz=CellComponentUtils.getLookupClass(compClazz);
    cell.removeComponent(clazz);
  }
 catch (  java.lang.ClassNotFoundException excp) {
    logger.log(Level.WARNING,""String_Node_Str"",excp);
  }
}"
45536,"/** 
 * Handles when an ""add"" component message has been received by the client. Checks to see if the component exists, and creates it if necessary.
 */
private void addComponent(CellClientComponentMessage message){
  CellComponentClientState clientState=message.getCellComponentClientState();
  String compClassname=message.getCellComponentClientClassName();
  if (compClassname == null) {
    return;
  }
  try {
    WonderlandSession session=cell.getCellCache().getSession();
    ServerSessionManager ssm=session.getSessionManager();
    ClassLoader cl=ssm.getClassloader();
    Class compClazz=cl.loadClass(compClassname);
    Class lookupClazz=CellComponent.getLookupClass(compClazz);
    CellComponent component=cell.getComponent(lookupClazz);
    if (component == null) {
      Constructor<CellComponent> constructor=compClazz.getConstructor(Cell.class);
      component=constructor.newInstance(cell);
      component.setClientState(clientState);
      cell.addComponent(component,CellComponent.getLookupClass(component.getClass()));
    }
 else {
      component.setClientState(clientState);
    }
  }
 catch (  InstantiationException ex) {
    logger.log(Level.SEVERE,""String_Node_Str"" + compClassname + ""String_Node_Str""+ getClass().getName(),ex);
  }
catch (  ClassNotFoundException ex) {
    logger.log(Level.SEVERE,""String_Node_Str"" + compClassname,ex);
  }
catch (  Exception ex) {
    logger.log(Level.SEVERE,null,ex);
  }
}","/** 
 * Handles when an ""add"" component message has been received by the client. Checks to see if the component exists, and creates it if necessary.
 */
private void addComponent(CellClientComponentMessage message){
  CellComponentClientState clientState=message.getCellComponentClientState();
  String compClassname=message.getCellComponentClientClassName();
  if (compClassname == null) {
    return;
  }
  try {
    WonderlandSession session=cell.getCellCache().getSession();
    ServerSessionManager ssm=session.getSessionManager();
    ClassLoader cl=ssm.getClassloader();
    Class compClazz=cl.loadClass(compClassname);
    Class lookupClazz=CellComponentUtils.getLookupClass(compClazz);
    CellComponent component=cell.getComponent(lookupClazz);
    if (component == null) {
      Constructor<CellComponent> constructor=compClazz.getConstructor(Cell.class);
      component=constructor.newInstance(cell);
      component.setClientState(clientState);
      cell.addComponent(component,CellComponentUtils.getLookupClass(component.getClass()));
    }
 else {
      component.setClientState(clientState);
    }
  }
 catch (  InstantiationException ex) {
    logger.log(Level.SEVERE,""String_Node_Str"" + compClassname + ""String_Node_Str""+ getClass().getName(),ex);
  }
catch (  ClassNotFoundException ex) {
    logger.log(Level.SEVERE,""String_Node_Str"" + compClassname,ex);
  }
catch (  Exception ex) {
    logger.log(Level.SEVERE,null,ex);
  }
}"
45537,"/** 
 * Returns a CellComponentServerState given its Class, or null if a server state object is not present on the cell server state class of the given Class type.
 * @param clazz The Class of the component server-state object
 * @return The component server state object if it exist, null otherwise
 */
public CellComponentServerState getComponentServerState(Class clazz){
  return internalComponentMap.get(clazz);
}","/** 
 * Returns a CellComponentServerState given its Class, or null if a server state object is not present on the cell server state class of the given Class type.
 * @param clazz The Class of the component server-state object
 * @return The component server state object if it exist, null otherwise
 */
public CellComponentServerState getComponentServerState(Class clazz){
  Class lookupClass=CellComponentUtils.getLookupClass(clazz);
  return internalComponentMap.get(lookupClass);
}"
45538,"/** 
 * Takes the input reader of the XML file and instantiates an instance of the CellServerState class. Also takes the unmarshaller to use to decode the server state. Appropriate unmarshallers can be retrieved from the CellServerStateFactory. <p>
 * @param r The input data of the version XML data
 * @param unmarshaller the unmarshaller to use while decoding. If nounmashaller is specified, the unmarshaller associated with the system classloader will be used.
 * @throw ClassCastException If the input data does not map to CellServerState
 * @throw JAXBException Upon error reading the XML data
 */
public static CellServerState decode(Reader r,Unmarshaller unmarshaller) throws JAXBException {
  if (unmarshaller == null) {
    unmarshaller=CellServerStateFactory.getUnmarshaller(null);
  }
  CellServerState setup=(CellServerState)unmarshaller.unmarshal(r);
  if (setup.metadata != null) {
    ListIterator<HashMapEntry> iterator=setup.metadata.entries.listIterator();
    setup.internalMetaData=new HashMap<String,String>();
    while (iterator.hasNext() == true) {
      HashMapEntry entry=iterator.next();
      setup.internalMetaData.put(entry.key,entry.value);
    }
  }
 else {
    setup.internalMetaData=null;
  }
  if (setup.components != null) {
    setup.internalComponentMap=new HashMap();
    for (    CellComponentServerState state : setup.components) {
      setup.internalComponentMap.put(state.getClass(),state);
    }
  }
 else {
    setup.internalComponentMap=null;
  }
  return setup;
}","/** 
 * Takes the input reader of the XML file and instantiates an instance of the CellServerState class. Also takes the unmarshaller to use to decode the server state. Appropriate unmarshallers can be retrieved from the CellServerStateFactory. <p>
 * @param r The input data of the version XML data
 * @param unmarshaller the unmarshaller to use while decoding. If nounmashaller is specified, the unmarshaller associated with the system classloader will be used.
 * @throw ClassCastException If the input data does not map to CellServerState
 * @throw JAXBException Upon error reading the XML data
 */
public static CellServerState decode(Reader r,Unmarshaller unmarshaller) throws JAXBException {
  if (unmarshaller == null) {
    unmarshaller=CellServerStateFactory.getUnmarshaller(null);
  }
  CellServerState setup=(CellServerState)unmarshaller.unmarshal(r);
  if (setup.metadata != null) {
    ListIterator<HashMapEntry> iterator=setup.metadata.entries.listIterator();
    setup.internalMetaData=new HashMap<String,String>();
    while (iterator.hasNext() == true) {
      HashMapEntry entry=iterator.next();
      setup.internalMetaData.put(entry.key,entry.value);
    }
  }
 else {
    setup.internalMetaData=null;
  }
  if (setup.components != null) {
    setup.internalComponentMap=new HashMap();
    for (    CellComponentServerState state : setup.components) {
      Class lookupClass=CellComponentUtils.getLookupClass(state.getClass());
      setup.internalComponentMap.put(lookupClass,state);
    }
  }
 else {
    setup.internalComponentMap=null;
  }
  return setup;
}"
45539,"/** 
 * Removes a CellComponentServerState given its Class. If a server state for the given Class does not exist, this method does nothing.
 * @param clazz The Class of the component server-state object
 */
public void removeComponentServerState(Class clazz){
  internalComponentMap.remove(clazz);
}","/** 
 * Removes a CellComponentServerState given its Class. If a server state for the given Class does not exist, this method does nothing.
 * @param clazz The Class of the component server-state object
 */
public void removeComponentServerState(Class clazz){
  Class lookupClass=CellComponentUtils.getLookupClass(clazz);
  internalComponentMap.remove(lookupClass);
}"
45540,"/** 
 * Adds a component server state. If a server state of the same Class has already been added, this replaces the existing server state.
 * @param serverState The component server state to add
 */
public void addComponentServerState(CellComponentServerState serverState){
  internalComponentMap.put(serverState.getClass(),serverState);
}","/** 
 * Adds a component server state. If a server state of the same Class has already been added, this replaces the existing server state.
 * @param serverState The component server state to add
 */
public void addComponentServerState(CellComponentServerState serverState){
  Class lookupClass=CellComponentUtils.getLookupClass(serverState.getClass());
  internalComponentMap.put(lookupClass,serverState);
}"
45541,"private boolean isInGroup(Set<Principal> principals){
  for (  Principal p : principals) {
    System.out.println(""String_Node_Str"" + p + ""String_Node_Str""+ group);
    if (p.getType() == Type.GROUP) {
      String name=p.getId();
      if (name.equals(group) || name.equals(""String_Node_Str"")) {
        return true;
      }
    }
  }
  return false;
}","private boolean isInGroup(Set<Principal> principals){
  logger.fine(""String_Node_Str"" + principals.size() + ""String_Node_Str""+ group);
  for (  Principal p : principals) {
    logger.fine(""String_Node_Str"" + p + ""String_Node_Str""+ group);
    if (p.getType() == Type.GROUP) {
      String name=p.getId();
      if (name.equals(group) || name.equals(""String_Node_Str"")) {
        logger.fine(""String_Node_Str"" + p + ""String_Node_Str""+ group);
        return true;
      }
    }
  }
  return false;
}"
45542,"@Override public void setLive(boolean live){
  this.live=live;
  if (live) {
    receiverRef.get().setChannel(channelRef.get());
    if (state != null) {
      setServerState(state);
      state=null;
    }
    channelRef.get().addMessageReceiver(MapRequestMessage.class,receiverRef.get());
    channelRef.get().addMessageReceiver(GetRequestMessage.class,receiverRef.get());
    channelRef.get().addMessageReceiver(PutRequestMessage.class,receiverRef.get());
    channelRef.get().addMessageReceiver(RemoveRequestMessage.class,receiverRef.get());
  }
 else {
    channelRef.get().removeMessageReceiver(MapRequestMessage.class);
    channelRef.get().removeMessageReceiver(GetRequestMessage.class);
    channelRef.get().removeMessageReceiver(PutRequestMessage.class);
    channelRef.get().removeMessageReceiver(RemoveRequestMessage.class);
  }
}","@Override public void setLive(boolean live){
  super.setLive(live);
  this.live=live;
  if (live) {
    receiverRef.get().setChannel(channelRef.get());
    if (state != null) {
      setServerState(state);
      state=null;
    }
    channelRef.get().addMessageReceiver(MapRequestMessage.class,receiverRef.get());
    channelRef.get().addMessageReceiver(GetRequestMessage.class,receiverRef.get());
    channelRef.get().addMessageReceiver(PutRequestMessage.class,receiverRef.get());
    channelRef.get().addMessageReceiver(RemoveRequestMessage.class,receiverRef.get());
  }
 else {
    channelRef.get().removeMessageReceiver(MapRequestMessage.class);
    channelRef.get().removeMessageReceiver(GetRequestMessage.class);
    channelRef.get().removeMessageReceiver(PutRequestMessage.class);
    channelRef.get().removeMessageReceiver(RemoveRequestMessage.class);
  }
}"
45543,"public void cellAdded(CellMO cell){
  Set<Class<? extends CellComponentMO>> components=new LinkedHashSet<Class<? extends CellComponentMO>>();
  Set<Class<? extends CellMO>> cellTree=getClassTree(cell.getClass());
  for (  Class<? extends CellMO> cellClass : cellTree) {
    components.addAll(CellManagerMO.getCellComponents(cellClass));
  }
  for (  Class<? extends CellComponentMO> c : components) {
    try {
      Constructor con=c.getConstructor(CellMO.class);
      CellComponentMO comp=(CellComponentMO)con.newInstance(cell);
      cell.addComponent(comp);
    }
 catch (    NoSuchMethodException ex) {
      logger.log(Level.WARNING,null,ex);
    }
catch (    SecurityException ex) {
      logger.log(Level.WARNING,null,ex);
    }
catch (    InstantiationException ex) {
      logger.log(Level.WARNING,null,ex);
    }
catch (    IllegalAccessException ex) {
      logger.log(Level.WARNING,null,ex);
    }
catch (    IllegalArgumentException ex) {
      logger.log(Level.WARNING,null,ex);
    }
catch (    InvocationTargetException ex) {
      if (ex.getCause() != null && ex.getCause() instanceof RuntimeException) {
        throw (RuntimeException)ex.getCause();
      }
      logger.log(Level.WARNING,null,ex);
    }
  }
}","public void cellAdded(CellMO cell){
  Set<Class<? extends CellComponentMO>> components=new LinkedHashSet<Class<? extends CellComponentMO>>();
  Set<Class<? extends CellMO>> cellTree=getClassTree(cell.getClass());
  for (  Class<? extends CellMO> cellClass : cellTree) {
    components.addAll(CellManagerMO.getCellComponents(cellClass));
  }
  for (  Class<? extends CellComponentMO> c : components) {
    if (cell.getComponent(CellComponentMO.getLookupClass(c)) != null) {
      continue;
    }
    try {
      Constructor con=c.getConstructor(CellMO.class);
      CellComponentMO comp=(CellComponentMO)con.newInstance(cell);
      cell.addComponent(comp);
    }
 catch (    NoSuchMethodException ex) {
      logger.log(Level.WARNING,null,ex);
    }
catch (    SecurityException ex) {
      logger.log(Level.WARNING,null,ex);
    }
catch (    InstantiationException ex) {
      logger.log(Level.WARNING,null,ex);
    }
catch (    IllegalAccessException ex) {
      logger.log(Level.WARNING,null,ex);
    }
catch (    IllegalArgumentException ex) {
      logger.log(Level.WARNING,null,ex);
    }
catch (    InvocationTargetException ex) {
      if (ex.getCause() != null && ex.getCause() instanceof RuntimeException) {
        throw (RuntimeException)ex.getCause();
      }
      logger.log(Level.WARNING,null,ex);
    }
  }
}"
45544,"private void initialize(){
  if (treatments.length == 0) {
    logger.info(""String_Node_Str"" + groupId + ""String_Node_Str""+ treatments.length);
    return;
  }
  VoiceManager vm=AppContext.getManager(VoiceManager.class);
  TreatmentGroup group=null;
  if (groupId != null && groupId.length() > 0) {
    group=vm.createTreatmentGroup(groupId);
  }
  for (int i=0; i < treatments.length; i++) {
    TreatmentSetup setup=new TreatmentSetup();
    setup.treatmentCreatedListener=new TreatmentCreatedListenerImpl(cellID);
    setup.spatializer=getSpatializer(false);
    String treatment=treatments[i];
    String treatmentId=CallID.getCallID(cellID);
    String pattern=""String_Node_Str"";
    if (treatment.startsWith(pattern)) {
      String path=treatment.substring(pattern.length());
      URL url;
      try {
        path=path.replaceAll(""String_Node_Str"",""String_Node_Str"");
        url=new URL(new URL(serverURL),""String_Node_Str"" + path);
        treatment=url.toString();
      }
 catch (      MalformedURLException e) {
        logger.warning(""String_Node_Str"" + e.getMessage());
        return;
      }
    }
 else {
      pattern=""String_Node_Str"";
      if (treatment.startsWith(pattern)) {
        treatment=treatment.substring(pattern.length());
        int ix=treatment.indexOf(""String_Node_Str"");
        if (ix < 0) {
          logger.warning(""String_Node_Str"" + treatments[i]);
          continue;
        }
        String moduleName=treatment.substring(0,ix);
        String path=treatment.substring(ix + 1);
        logger.fine(""String_Node_Str"" + moduleName + ""String_Node_Str""+ treatment);
        URL url;
        try {
          path=path.replaceAll(""String_Node_Str"",""String_Node_Str"");
          url=new URL(new URL(serverURL),""String_Node_Str"" + moduleName + ""String_Node_Str""+ path);
          treatment=url.toString();
          logger.fine(""String_Node_Str"" + treatment);
        }
 catch (        MalformedURLException e) {
          logger.warning(""String_Node_Str"" + e.getMessage());
          continue;
        }
      }
    }
    setup.treatment=treatment;
    vm.addCallStatusListener(this,treatmentId);
    if (setup.treatment == null || setup.treatment.length() == 0) {
      logger.warning(""String_Node_Str"" + setup.treatment + ""String_Node_Str"");
      continue;
    }
    Vector3f location=cellRef.get().getLocalTransform(null).getTranslation(null);
    setup.x=location.getX();
    setup.y=location.getY();
    setup.z=location.getZ();
    logger.info(""String_Node_Str"" + setup.treatment + ""String_Node_Str""+ setup.x+ ""String_Node_Str""+ setup.y+ ""String_Node_Str""+ setup.z+ ""String_Node_Str"");
    System.out.println(""String_Node_Str"" + setup.treatment + ""String_Node_Str""+ setup.x+ ""String_Node_Str""+ setup.y+ ""String_Node_Str""+ setup.z+ ""String_Node_Str"");
    try {
      Treatment t=vm.createTreatment(treatmentId,setup);
      if (group != null) {
        group.addTreatment(t);
      }
      if (playWhen.equals(PlayWhen.ALWAYS) == false) {
        t.pause(true);
      }
      if (playWhen.equals(PlayWhen.FIRST_IN_RANGE)) {
        addProximityListener(t);
      }
    }
 catch (    IOException e) {
      logger.warning(""String_Node_Str"" + setup.treatment + e.getMessage());
      return;
    }
  }
}","private void initialize(){
  if (!isLive() || treatmentCreated) {
    logger.warning(""String_Node_Str"" + isLive() + ""String_Node_Str""+ treatmentCreated);
    return;
  }
  if (treatments.length == 0) {
    logger.info(""String_Node_Str"" + groupId + ""String_Node_Str""+ treatments.length);
    return;
  }
  if (cellRef.get().getWorldTransform(null) == null) {
    logger.warning(""String_Node_Str"");
    AppContext.getTaskManager().scheduleTask(new TreatmentRetryTask(this),1000);
    return;
  }
  VoiceManager vm=AppContext.getManager(VoiceManager.class);
  TreatmentGroup group=null;
  if (groupId != null && groupId.length() > 0) {
    group=vm.createTreatmentGroup(groupId);
  }
  for (int i=0; i < treatments.length; i++) {
    TreatmentSetup setup=new TreatmentSetup();
    setup.treatmentCreatedListener=new TreatmentCreatedListenerImpl(cellID);
    setup.spatializer=getSpatializer(false);
    String treatment=treatments[i];
    String treatmentId=CallID.getCallID(cellID);
    String pattern=""String_Node_Str"";
    if (treatment.startsWith(pattern)) {
      String path=treatment.substring(pattern.length());
      URL url;
      try {
        path=path.replaceAll(""String_Node_Str"",""String_Node_Str"");
        url=new URL(new URL(serverURL),""String_Node_Str"" + path);
        treatment=url.toString();
      }
 catch (      MalformedURLException e) {
        logger.warning(""String_Node_Str"" + e.getMessage());
        return;
      }
    }
 else {
      pattern=""String_Node_Str"";
      if (treatment.startsWith(pattern)) {
        treatment=treatment.substring(pattern.length());
        int ix=treatment.indexOf(""String_Node_Str"");
        if (ix < 0) {
          logger.warning(""String_Node_Str"" + treatments[i]);
          continue;
        }
        String moduleName=treatment.substring(0,ix);
        String path=treatment.substring(ix + 1);
        logger.fine(""String_Node_Str"" + moduleName + ""String_Node_Str""+ treatment);
        URL url;
        try {
          path=path.replaceAll(""String_Node_Str"",""String_Node_Str"");
          url=new URL(new URL(serverURL),""String_Node_Str"" + moduleName + ""String_Node_Str""+ path);
          treatment=url.toString();
          logger.fine(""String_Node_Str"" + treatment);
        }
 catch (        MalformedURLException e) {
          logger.warning(""String_Node_Str"" + e.getMessage());
          continue;
        }
      }
    }
    setup.treatment=treatment;
    vm.addCallStatusListener(this,treatmentId);
    if (setup.treatment == null || setup.treatment.length() == 0) {
      logger.warning(""String_Node_Str"" + setup.treatment + ""String_Node_Str"");
      continue;
    }
    Vector3f location=cellRef.get().getWorldTransform(null).getTranslation(null);
    setup.x=location.getX();
    setup.y=location.getY();
    setup.z=location.getZ();
    logger.info(""String_Node_Str"" + setup.treatment + ""String_Node_Str""+ setup.x+ ""String_Node_Str""+ setup.y+ ""String_Node_Str""+ setup.z+ ""String_Node_Str"");
    System.out.println(""String_Node_Str"" + setup.treatment + ""String_Node_Str""+ setup.x+ ""String_Node_Str""+ setup.y+ ""String_Node_Str""+ setup.z+ ""String_Node_Str"");
    try {
      Treatment t=vm.createTreatment(treatmentId,setup);
      if (group != null) {
        group.addTreatment(t);
      }
      if (playWhen.equals(PlayWhen.ALWAYS) == false) {
        t.pause(true);
      }
      if (playWhen.equals(PlayWhen.FIRST_IN_RANGE)) {
        addProximityListener(t);
      }
      treatmentCreated=true;
    }
 catch (    IOException e) {
      logger.warning(""String_Node_Str"" + setup.treatment + e.getMessage());
      return;
    }
  }
}"
45545,"/** 
 * Returns true if all of the deployers can deploy the parts of the module, false if not
 */
public boolean canDeploy(Module module){
  Map<String,ModulePart> parts=module.getParts();
  Iterator<ModuleDeployerSPI> it=getDeployers().iterator();
  while (it.hasNext() == true) {
    ModuleDeployerSPI deployer=it.next();
    String[] partTypes=deployer.getTypes();
    if (partTypes == null) {
      continue;
    }
    for (    String partType : partTypes) {
      if (parts.containsKey(partType) == true) {
        if (deployer.isDeployable(partType,module,parts.get(partType)) == false) {
          return false;
        }
      }
    }
  }
  return true;
}","/** 
 * Returns true if all of the deployers can deploy the parts of the module, false if not
 */
public DeploymentQueryResult canDeploy(Module module){
  DeploymentQueryResult res=new DeploymentQueryResult();
  Map<String,ModulePart> parts=module.getParts();
  Iterator<ModuleDeployerSPI> it=getDeployers().iterator();
  while (it.hasNext() == true) {
    ModuleDeployerSPI deployer=it.next();
    String[] partTypes=deployer.getTypes();
    if (partTypes == null) {
      continue;
    }
    for (    String partType : partTypes) {
      if (parts.containsKey(partType) == true) {
        if (deployer.isDeployable(partType,module,parts.get(partType)) == false) {
          res.addReason(""String_Node_Str"" + partType + ""String_Node_Str""+ deployer.getName()+ ""String_Node_Str""+ deployer.getClass().getName());
          res.setResult(false);
          return res;
        }
      }
    }
  }
  res.setResult(true);
  return res;
}"
45546,"/** 
 * Returns true if all of the deployers can undeploy the parts of the module, false if not
 */
public boolean canUndeploy(Module module){
  Map<String,ModulePart> parts=module.getParts();
  Iterator<ModuleDeployerSPI> it=getDeployers().iterator();
  while (it.hasNext() == true) {
    ModuleDeployerSPI deployer=it.next();
    String[] partTypes=deployer.getTypes();
    if (partTypes == null) {
      continue;
    }
    for (    String partType : partTypes) {
      if (parts.containsKey(partType) == true) {
        logger.warning(""String_Node_Str"" + module.getName() + ""String_Node_Str""+ ""String_Node_Str""+ partType+ ""String_Node_Str""+ deployer.getName()+ ""String_Node_Str""+ deployer.getClass().getName());
        if (deployer.isUndeployable(partType,module,parts.get(partType)) == false) {
          return false;
        }
      }
    }
  }
  return true;
}","/** 
 * Returns true if all of the deployers can undeploy the parts of the module, false if not
 */
public DeploymentQueryResult canUndeploy(Module module){
  DeploymentQueryResult res=new DeploymentQueryResult();
  Map<String,ModulePart> parts=module.getParts();
  Iterator<ModuleDeployerSPI> it=getDeployers().iterator();
  while (it.hasNext() == true) {
    ModuleDeployerSPI deployer=it.next();
    String[] partTypes=deployer.getTypes();
    if (partTypes == null) {
      continue;
    }
    for (    String partType : partTypes) {
      if (parts.containsKey(partType) == true) {
        logger.warning(""String_Node_Str"" + module.getName() + ""String_Node_Str""+ ""String_Node_Str""+ partType+ ""String_Node_Str""+ deployer.getName()+ ""String_Node_Str""+ deployer.getClass().getName());
        if (deployer.isUndeployable(partType,module,parts.get(partType)) == false) {
          res.addReason(""String_Node_Str"" + partType + ""String_Node_Str""+ deployer.getName()+ ""String_Node_Str""+ deployer.getClass().getName());
          res.setResult(false);
          return res;
        }
      }
    }
  }
  res.setResult(true);
  return res;
}"
45547,"/** 
 * Adds a new module to installed. This simply copies files, it assumes all preparations or checks have already been performed. It is given the module and the File root of where to copy and returns the Module object representing the installed module
 */
public Module add(String moduleName,File root){
  Logger logger=ModuleManager.getLogger();
  File file=new File(this.installedFile,moduleName);
  if (ModuleManagerUtils.makeCleanDirectory(file) == false) {
    logger.log(Level.WARNING,""String_Node_Str"" + file.getAbsolutePath());
    return null;
  }
  try {
    FileUtils.copyDirectory(root,file);
  }
 catch (  java.io.IOException excp) {
    logger.log(Level.WARNING,""String_Node_Str"" + root.getAbsolutePath() + ""String_Node_Str""+ file.getAbsolutePath(),excp);
    return null;
  }
  Module module=null;
  try {
    module=ModuleFactory.open(file);
    this.installedModules.put(moduleName,module);
  }
 catch (  java.lang.Exception excp) {
    logger.log(Level.WARNING,""String_Node_Str"",excp);
    return null;
  }
  return module;
}","/** 
 * Adds a new module to installed. This simply copies files, it assumes all preparations or checks have already been performed. It is given the module and the File root of where to copy and returns the Module object representing the installed module
 */
public Module add(String moduleName,File root){
  Logger logger=ModuleManager.getLogger();
  File file=new File(this.installedFile,moduleName);
  if (ModuleManagerUtils.makeCleanDirectory(file) == false) {
    logger.log(Level.WARNING,""String_Node_Str"" + file.getAbsolutePath());
    return null;
  }
  try {
    FileUtils.copyDirectory(root,file);
  }
 catch (  java.io.IOException excp) {
    logger.log(Level.WARNING,""String_Node_Str"" + root.getAbsolutePath() + ""String_Node_Str""+ file.getAbsolutePath(),excp);
    return null;
  }
  Module module=null;
  try {
    module=ModuleFactory.open(file);
    this.installedModules.put(moduleName,module);
    if (logger.isLoggable(Level.FINE)) {
      logger.fine(""String_Node_Str"" + module);
    }
  }
 catch (  java.lang.Exception excp) {
    logger.log(Level.WARNING,""String_Node_Str"",excp);
    return null;
  }
  return module;
}"
45548,"/** 
 * Returns a map of module names and objects from a given directory. If no modules are present, this method returns an empty map.
 * @return An map of unique module names and their Module objects
 */
private Map<String,Module> fetchModules(){
  Map<String,Module> map=new HashMap<String,Module>();
  File[] files=this.installedFile.listFiles();
  for (  File file : files) {
    try {
      Module module=ModuleFactory.open(file);
      map.put(module.getName(),module);
    }
 catch (    java.lang.Exception excp) {
      ModuleManager.getLogger().log(Level.WARNING,""String_Node_Str"" + file,excp);
    }
  }
  return map;
}","/** 
 * Returns a map of module names and objects from a given directory. If no modules are present, this method returns an empty map.
 * @return An map of unique module names and their Module objects
 */
private Map<String,Module> fetchModules(){
  Logger logger=ModuleManager.getLogger();
  Map<String,Module> map=new HashMap<String,Module>();
  File[] files=this.installedFile.listFiles();
  for (  File file : files) {
    try {
      Module module=ModuleFactory.open(file);
      map.put(module.getName(),module);
      if (logger.isLoggable(Level.FINE)) {
        logger.fine(""String_Node_Str"" + module);
      }
    }
 catch (    java.lang.Exception excp) {
      ModuleManager.getLogger().log(Level.WARNING,""String_Node_Str"" + file,excp);
    }
  }
  return map;
}"
45549,"/** 
 * Takes two ModuleInfo class and checks whether the first (provider) is satisfied as a requirement of the second (requirer). Returns true if the requirement is satisfied, false if not.
 * @param provider The module info that could satisfy the requirement
 * @param requirer The module info that specifies the requirement
 * @return True is the requirement is satisfied, false if not
 */
private boolean isSatisfied(ModuleInfo provider,ModuleInfo requirer){
  if (provider.getName().compareTo(requirer.getName()) != 0) {
    return false;
  }
  if (requirer.getMajor() == ModuleInfo.VERSION_UNSET) {
    return true;
  }
  if (requirer.getMajor() > provider.getMajor()) {
    return false;
  }
  if (provider.getMajor() > requirer.getMajor()) {
    return true;
  }
  if (requirer.getMinor() == ModuleInfo.VERSION_UNSET) {
    return true;
  }
  if (requirer.getMinor() > provider.getMinor()) {
    return false;
  }
  if (provider.getMinor() > requirer.getMinor()) {
    return true;
  }
  if (requirer.getMini() == ModuleInfo.VERSION_UNSET) {
    return true;
  }
  if (requirer.getMini() <= provider.getMini()) {
    return true;
  }
  return false;
}","/** 
 * Takes two ModuleInfo class and checks whether the first (provider) is satisfied as a requirement of the second (requirer). Returns true if the requirement is satisfied, false if not.
 * @param provider The module info that could satisfy the requirement
 * @param requirer The module info that specifies the requirement
 * @return True is the requirement is satisfied, false if not
 */
private boolean isSatisfied(ModuleInfo provider,ModuleInfo requirer){
  Logger logger=ModuleManager.getLogger();
  if (logger.isLoggable(Level.FINE)) {
    logger.fine(""String_Node_Str"" + provider + ""String_Node_Str""+ requirer);
  }
  if (provider.getName().compareTo(requirer.getName()) != 0) {
    return false;
  }
  if (requirer.getMajor() == ModuleInfo.VERSION_UNSET) {
    return true;
  }
  if (requirer.getMajor() > provider.getMajor()) {
    return false;
  }
  if (provider.getMajor() > requirer.getMajor()) {
    return true;
  }
  if (requirer.getMinor() == ModuleInfo.VERSION_UNSET) {
    return true;
  }
  if (requirer.getMinor() > provider.getMinor()) {
    return false;
  }
  if (provider.getMinor() > requirer.getMinor()) {
    return true;
  }
  if (requirer.getMini() == ModuleInfo.VERSION_UNSET) {
    return true;
  }
  if (requirer.getMini() <= provider.getMini()) {
    return true;
  }
  return false;
}"
45550,"/** 
 * Creates a cell in the world given the CellServerState of the cell. If the given CellServerState is null, this method simply does not create a Cell. This method attempts to position the Cell ""optimally"" so that the avatar can see it, based upon ""hints"" about the Cell bounds given to it in the CellServerState.
 * @param state The cell server state for the new cell
 * @param parentCellID The Cell ID of the parent, of null for world root
 * @throw CellCreationException Upon error creating the cell
 */
public static void createCell(CellServerState state,CellID parentCellID) throws CellCreationException {
  if (state == null) {
    logger.fine(""String_Node_Str"");
    return;
  }
  ViewManager vm=ViewManager.getViewManager();
  ViewCell viewCell=vm.getPrimaryViewCell();
  CellTransform viewTransform=viewCell.getWorldTransform();
  ServerSessionManager manager=viewCell.getCellCache().getSession().getSessionManager();
  CellTransform transform=null;
  BoundingVolumeHint hint=state.getBoundingVolumeHint();
  logger.info(""String_Node_Str"" + hint.getBoundsHint() + ""String_Node_Str""+ hint.isDoSystemPlacement());
  if (hint != null && hint.isDoSystemPlacement() == true) {
    BoundingVolume boundsHint=hint.getBoundsHint();
    transform=CellPlacementUtils.getCellTransform(manager,boundsHint,viewTransform);
  }
 else   if (hint == null) {
    BoundingVolume boundsHint=new BoundingSphere(DEFAULT_RADIUS,Vector3f.ZERO);
    transform=CellPlacementUtils.getCellTransform(manager,boundsHint,viewTransform);
  }
 else   if (hint != null && hint.isDoSystemPlacement() == false) {
    transform=viewTransform;
  }
  if (parentCellID != null) {
    Cell parent=viewCell.getCellCache().getCell(parentCellID);
    CellTransform worldTransform=new CellTransform(null,null);
    CellTransform parentTransform=parent.getWorldTransform();
    logger.info(""String_Node_Str"" + parentTransform.getTranslation(null).toString() + ""String_Node_Str""+ parentTransform.getRotation(null).toString());
    transform=CellPlacementUtils.transform(transform,worldTransform,parentTransform);
  }
  logger.info(""String_Node_Str"" + transform.getTranslation(null).toString());
  PositionComponentServerState position=(PositionComponentServerState)state.getComponentServerState(PositionComponentServerState.class);
  if (position == null) {
    position=new PositionComponentServerState();
    state.addComponentServerState(position);
    position.setTranslation(transform.getTranslation(null));
    position.setRotation(transform.getRotation(null));
    position.setScaling(transform.getScaling(null));
  }
  state.addComponentServerState(new ViewComponentServerState(viewTransform));
  WonderlandSession session=manager.getPrimarySession();
  CellEditChannelConnection connection=(CellEditChannelConnection)session.getConnection(CellEditConnectionType.CLIENT_TYPE);
  CellCreateMessage msg=new CellCreateMessage(parentCellID,state);
  connection.send(msg);
}","/** 
 * Creates a cell in the world given the CellServerState of the cell. If the given CellServerState is null, this method simply does not create a Cell. This method attempts to position the Cell ""optimally"" so that the avatar can see it, based upon ""hints"" about the Cell bounds given to it in the CellServerState.
 * @param state The cell server state for the new cell
 * @param parentCellID The Cell ID of the parent, of null for world root
 * @throw CellCreationException Upon error creating the cell
 */
public static void createCell(CellServerState state,CellID parentCellID) throws CellCreationException {
  if (state == null) {
    logger.fine(""String_Node_Str"");
    return;
  }
  ViewManager vm=ViewManager.getViewManager();
  ViewCell viewCell=vm.getPrimaryViewCell();
  CellTransform viewTransform=viewCell.getWorldTransform();
  ServerSessionManager manager=viewCell.getCellCache().getSession().getSessionManager();
  CellTransform transform=null;
  BoundingVolumeHint hint=state.getBoundingVolumeHint();
  logger.info(""String_Node_Str"" + hint.getBoundsHint() + ""String_Node_Str""+ hint.isDoSystemPlacement());
  if (hint != null && hint.isDoSystemPlacement() == true) {
    BoundingVolume boundsHint=hint.getBoundsHint();
    transform=CellPlacementUtils.getCellTransform(manager,boundsHint,viewTransform);
  }
 else   if (hint == null) {
    BoundingVolume boundsHint=new BoundingSphere(DEFAULT_RADIUS,Vector3f.ZERO);
    transform=CellPlacementUtils.getCellTransform(manager,boundsHint,viewTransform);
  }
 else   if (hint != null && hint.isDoSystemPlacement() == false) {
    transform=viewTransform;
  }
  if (parentCellID != null) {
    Cell parent=viewCell.getCellCache().getCell(parentCellID);
    CellTransform worldTransform=new CellTransform(null,null);
    CellTransform parentTransform=parent.getWorldTransform();
    logger.info(""String_Node_Str"" + parentTransform.getTranslation(null).toString() + ""String_Node_Str""+ parentTransform.getRotation(null).toString());
    transform=CellPlacementUtils.transform(transform,worldTransform,parentTransform);
  }
  logger.info(""String_Node_Str"" + transform.getTranslation(null).toString());
  PositionComponentServerState position=(PositionComponentServerState)state.getComponentServerState(PositionComponentServerState.class);
  if (position == null) {
    position=new PositionComponentServerState();
    state.addComponentServerState(position);
  }
  position.setTranslation(transform.getTranslation(null));
  position.setRotation(transform.getRotation(null));
  position.setScaling(transform.getScaling(null));
  state.addComponentServerState(new ViewComponentServerState(viewTransform));
  WonderlandSession session=manager.getPrimarySession();
  CellEditChannelConnection connection=(CellEditChannelConnection)session.getConnection(CellEditConnectionType.CLIENT_TYPE);
  CellCreateMessage msg=new CellCreateMessage(parentCellID,state);
  connection.send(msg);
}"
45551,"/** 
 * runs the WebServerLauncher
 * @param args the command line arguments
 */
public static void main(String[] args){
  try {
    InputStream is=WebServerLauncher.class.getResourceAsStream(""String_Node_Str"");
    Properties props=new Properties();
    props.load(is);
    for (    Object prop : props.keySet()) {
      if (!System.getProperties().containsKey(prop)) {
        System.setProperty((String)prop,props.getProperty((String)prop));
      }
    }
  }
 catch (  Exception ex) {
    LOGGER.log(Level.SEVERE,""String_Node_Str"",ex);
    System.exit(-1);
  }
  if (!parseArguments(args)) {
    usage();
    System.exit(-1);
  }
  File logDir=new File(SystemPropertyUtil.getProperty(""String_Node_Str""));
  if (!logDir.exists() && !logDir.mkdirs()) {
    System.err.println(""String_Node_Str"" + ""String_Node_Str"" + logDir + ""String_Node_Str"");
  }
  if (System.getProperty(""String_Node_Str"") == null && System.getProperty(""String_Node_Str"") == null) {
    try {
      InputStream logConfig;
      Properties p=new Properties();
      p.load(WebServerLauncher.class.getResourceAsStream(""String_Node_Str""));
      String filePattern=p.getProperty(""String_Node_Str"");
      if (filePattern != null && filePattern.contains(""String_Node_Str"")) {
        p.setProperty(""String_Node_Str"",filePattern.replaceAll(""String_Node_Str"",logDir.getPath()));
        File tmpLog=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
        p.store(new FileOutputStream(tmpLog),null);
        logConfig=new FileInputStream(tmpLog);
      }
 else {
        logConfig=WebServerLauncher.class.getResourceAsStream(""String_Node_Str"");
      }
      LogManager.getLogManager().readConfiguration(logConfig);
    }
 catch (    IOException ioe) {
      LOGGER.log(Level.WARNING,""String_Node_Str"",ioe);
    }
  }
  if (System.getProperty(Constants.WEBSERVER_PORT_PROP) == null) {
    System.setProperty(Constants.WEBSERVER_PORT_PROP,""String_Node_Str"");
  }
  String killSwitchStr=System.getProperty(WEBSERVER_KILLSWITCH_PROPERTY);
  if (killSwitchStr != null) {
    KillSwitch ks=new KillSwitch(Integer.parseInt(killSwitchStr));
    new Thread(ks).start();
  }
  try {
    File webDir=new File(RunUtil.getRunDir(),""String_Node_Str"");
    webDir.mkdirs();
    if (!compareVersions(RunUtil.getRunDir())) {
      System.setProperty(Constants.WEBSERVER_NEWVERSION_PROP,""String_Node_Str"");
      extractWebserverJars(webDir);
      writeVersion(RunUtil.getRunDir());
    }
    List<URL> urls=new ArrayList<URL>();
    for (    File jar : webDir.listFiles()) {
      URL u=jar.toURI().toURL();
      LOGGER.fine(""String_Node_Str"" + u);
      urls.add(u);
    }
    classLoader=new LauncherClassLoader(urls.toArray(new URL[0]));
    Thread.currentThread().setContextClassLoader(classLoader);
    String launchClass=System.getProperty(WEBSERVER_LAUNCH_CLASS_PROPERTY,WEBSERVER_LAUNCH_CLASS_DEFAULT);
    Class c=classLoader.loadClass(launchClass);
    c.newInstance();
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"" + SystemPropertyUtil.getProperty(""String_Node_Str""));
    System.out.println(""String_Node_Str"" + SystemPropertyUtil.getProperty(Constants.WEBSERVER_URL_PROP));
    System.out.println(""String_Node_Str"");
  }
 catch (  Exception ex) {
    LOGGER.log(Level.SEVERE,""String_Node_Str"",ex);
    System.out.println(""String_Node_Str"" + ex + ""String_Node_Str"");
    ex.printStackTrace();
    System.exit(-1);
  }
}","/** 
 * runs the WebServerLauncher
 * @param args the command line arguments
 */
public static void main(String[] args){
  try {
    InputStream is=WebServerLauncher.class.getResourceAsStream(""String_Node_Str"");
    Properties props=new Properties();
    props.load(is);
    for (    Object prop : props.keySet()) {
      if (!System.getProperties().containsKey(prop)) {
        System.setProperty((String)prop,props.getProperty((String)prop));
      }
    }
  }
 catch (  Exception ex) {
    LOGGER.log(Level.SEVERE,""String_Node_Str"",ex);
    System.exit(-1);
  }
  if (!parseArguments(args)) {
    usage();
    System.exit(-1);
  }
  File logDir=new File(SystemPropertyUtil.getProperty(""String_Node_Str""));
  if (!logDir.exists() && !logDir.mkdirs()) {
    System.err.println(""String_Node_Str"" + ""String_Node_Str"" + logDir + ""String_Node_Str"");
  }
  if (System.getProperty(""String_Node_Str"") == null && System.getProperty(""String_Node_Str"") == null) {
    try {
      InputStream logConfig;
      Properties p=new Properties();
      p.load(WebServerLauncher.class.getResourceAsStream(""String_Node_Str""));
      String filePattern=p.getProperty(""String_Node_Str"");
      if (filePattern != null && filePattern.contains(""String_Node_Str"")) {
        String quoted=logDir.getPath().replace('\\','/');
        p.setProperty(""String_Node_Str"",filePattern.replaceAll(""String_Node_Str"",quoted));
        File tmpLog=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
        p.store(new FileOutputStream(tmpLog),null);
        logConfig=new FileInputStream(tmpLog);
      }
 else {
        logConfig=WebServerLauncher.class.getResourceAsStream(""String_Node_Str"");
      }
      LogManager.getLogManager().readConfiguration(logConfig);
    }
 catch (    IOException ioe) {
      LOGGER.log(Level.WARNING,""String_Node_Str"",ioe);
    }
  }
  if (System.getProperty(Constants.WEBSERVER_PORT_PROP) == null) {
    System.setProperty(Constants.WEBSERVER_PORT_PROP,""String_Node_Str"");
  }
  String killSwitchStr=System.getProperty(WEBSERVER_KILLSWITCH_PROPERTY);
  if (killSwitchStr != null) {
    KillSwitch ks=new KillSwitch(Integer.parseInt(killSwitchStr));
    new Thread(ks).start();
  }
  try {
    File webDir=new File(RunUtil.getRunDir(),""String_Node_Str"");
    webDir.mkdirs();
    if (!compareVersions(RunUtil.getRunDir())) {
      System.setProperty(Constants.WEBSERVER_NEWVERSION_PROP,""String_Node_Str"");
      extractWebserverJars(webDir);
      writeVersion(RunUtil.getRunDir());
    }
    List<URL> urls=new ArrayList<URL>();
    for (    File jar : webDir.listFiles()) {
      URL u=jar.toURI().toURL();
      LOGGER.fine(""String_Node_Str"" + u);
      urls.add(u);
    }
    classLoader=new LauncherClassLoader(urls.toArray(new URL[0]));
    Thread.currentThread().setContextClassLoader(classLoader);
    String launchClass=System.getProperty(WEBSERVER_LAUNCH_CLASS_PROPERTY,WEBSERVER_LAUNCH_CLASS_DEFAULT);
    Class c=classLoader.loadClass(launchClass);
    c.newInstance();
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"" + SystemPropertyUtil.getProperty(""String_Node_Str""));
    System.out.println(""String_Node_Str"" + SystemPropertyUtil.getProperty(Constants.WEBSERVER_URL_PROP));
    System.out.println(""String_Node_Str"");
  }
 catch (  Exception ex) {
    LOGGER.log(Level.SEVERE,""String_Node_Str"",ex);
    System.out.println(""String_Node_Str"" + ex + ""String_Node_Str"");
    ex.printStackTrace();
    System.exit(-1);
  }
}"
45552,"public void messageReceived(WonderlandClientSender sender,WonderlandClientID clientID,CellMessage message){
  logger.finest(""String_Node_Str"" + message);
  VoiceManager vm=AppContext.getManager(VoiceManager.class);
  Call call=null;
  Player player=null;
  if (simulateCalls == false) {
    call=vm.getCall(callID);
    if (call == null) {
      logger.warning(""String_Node_Str"" + callID + ""String_Node_Str""+ message);
      return;
    }
    player=vm.getPlayer(callID);
  }
  if (message instanceof OrbEndCallMessage) {
    if (call != null) {
      try {
        vm.endCall(call,true);
      }
 catch (      IOException e) {
        logger.warning(""String_Node_Str"" + call + ""String_Node_Str""+ e.getMessage());
      }
    }
 else {
      orbStatusListenerRef.get().endCall(callID);
    }
    sender.send(message);
    return;
  }
  if (message instanceof OrbMuteCallMessage) {
    if (call != null) {
      try {
        call.mute(((OrbMuteCallMessage)message).isMuted());
      }
 catch (      IOException e) {
        logger.warning(""String_Node_Str"" + call + ""String_Node_Str""+ e.getMessage());
        return;
      }
    }
    sender.send(message);
    return;
  }
  if (message instanceof OrbChangeNameMessage) {
    username=((OrbChangeNameMessage)message).getName();
    sender.send(message);
    return;
  }
  if (message instanceof OrbChangePositionMessage) {
    OrbChangePositionMessage msg=(OrbChangePositionMessage)message;
    if (player == null) {
      return;
    }
    Vector3f position=msg.getPosition();
    player.moved(position.getX(),position.getY(),position.getZ(),player.getOrientation());
    return;
  }
  if (message instanceof OrbSetVolumeMessage) {
    if (player == null) {
      logger.warning(""String_Node_Str"" + callID);
      return;
    }
    OrbSetVolumeMessage msg=(OrbSetVolumeMessage)message;
    String softphoneCallID=msg.getSoftphoneCallID();
    Player softphonePlayer=vm.getPlayer(softphoneCallID);
    if (softphonePlayer == null) {
      logger.warning(""String_Node_Str"" + softphoneCallID);
      return;
    }
    DefaultSpatializer spatializer=(DefaultSpatializer)vm.getVoiceManagerParameters().livePlayerSpatializer.clone();
    double volume;
    if (msg.getVolume() <= 5.0) {
      volume=msg.getVolume() / 5.0;
    }
 else {
      volume=(msg.getVolume() - 5) * .8;
    }
    spatializer.setAttenuator(volume);
    if (volume == 1) {
      softphonePlayer.removePrivateSpatializer(player);
    }
 else {
      softphonePlayer.setPrivateSpatializer(player,spatializer);
    }
    return;
  }
  if (message instanceof OrbAttachMessage) {
    OrbAttachMessage msg=(OrbAttachMessage)message;
    boolean isAttached=msg.isAttached();
    if (isAttached && msg.getHostCellID() == null) {
      sender.send(clientID,new OrbAttachMessage(msg.getCellID(),null,false));
      return;
    }
    logger.fine(""String_Node_Str"" + msg.getHostCellID() + ""String_Node_Str""+ msg.isAttached());
    if (msg.isAttached()) {
      hostCellID=msg.getHostCellID();
      orbStatusListenerRef.get().setHostCellID(hostCellID);
    }
 else {
      orbStatusListenerRef.get().removeCallStatusListener(msg.getHostCellID());
      hostCellID=null;
    }
    sender.send(message);
    return;
  }
  logger.warning(""String_Node_Str"" + message);
}","public void messageReceived(WonderlandClientSender sender,WonderlandClientID clientID,CellMessage message){
  logger.finest(""String_Node_Str"" + message);
  VoiceManager vm=AppContext.getManager(VoiceManager.class);
  Call call=null;
  Player player=null;
  if (simulateCalls == false) {
    call=vm.getCall(callID);
    if (call == null) {
      logger.warning(""String_Node_Str"" + callID + ""String_Node_Str""+ message);
      return;
    }
    player=vm.getPlayer(callID);
  }
  if (message instanceof OrbEndCallMessage) {
    if (call != null) {
      try {
        vm.endCall(call,true);
      }
 catch (      IOException e) {
        logger.warning(""String_Node_Str"" + call + ""String_Node_Str""+ e.getMessage());
      }
    }
 else {
      orbStatusListenerRef.get().endCall(callID);
    }
    sender.send(message);
    return;
  }
  if (message instanceof OrbMuteCallMessage) {
    if (call != null) {
      try {
        call.mute(((OrbMuteCallMessage)message).isMuted());
      }
 catch (      IOException e) {
        logger.warning(""String_Node_Str"" + call + ""String_Node_Str""+ e.getMessage());
        return;
      }
    }
    sender.send(message);
    return;
  }
  if (message instanceof OrbChangeNameMessage) {
    username=((OrbChangeNameMessage)message).getName();
    sender.send(message);
    return;
  }
  if (message instanceof OrbChangePositionMessage) {
    OrbChangePositionMessage msg=(OrbChangePositionMessage)message;
    if (player == null) {
      return;
    }
    Vector3f position=msg.getPosition();
    player.moved(position.getX(),position.getY(),position.getZ(),player.getOrientation());
    return;
  }
  if (message instanceof OrbSetVolumeMessage) {
    if (player == null) {
      logger.warning(""String_Node_Str"" + callID);
      return;
    }
    OrbSetVolumeMessage msg=(OrbSetVolumeMessage)message;
    String softphoneCallID=msg.getSoftphoneCallID();
    Player softphonePlayer=vm.getPlayer(softphoneCallID);
    if (softphonePlayer == null) {
      logger.warning(""String_Node_Str"" + softphoneCallID);
      return;
    }
    DefaultSpatializer spatializer=(DefaultSpatializer)vm.getVoiceManagerParameters().livePlayerSpatializer.clone();
    double volume=msg.getVolume();
    spatializer.setAttenuator(volume);
    if (volume == 1) {
      softphonePlayer.removePrivateSpatializer(player);
    }
 else {
      softphonePlayer.setPrivateSpatializer(player,spatializer);
    }
    logger.fine(""String_Node_Str"" + player + ""String_Node_Str""+ spatializer+ ""String_Node_Str""+ volume);
    return;
  }
  if (message instanceof OrbAttachMessage) {
    OrbAttachMessage msg=(OrbAttachMessage)message;
    boolean isAttached=msg.isAttached();
    if (isAttached && msg.getHostCellID() == null) {
      sender.send(clientID,new OrbAttachMessage(msg.getCellID(),null,false));
      return;
    }
    logger.fine(""String_Node_Str"" + msg.getHostCellID() + ""String_Node_Str""+ msg.isAttached());
    if (msg.isAttached()) {
      hostCellID=msg.getHostCellID();
      orbStatusListenerRef.get().setHostCellID(hostCellID);
    }
 else {
      orbStatusListenerRef.get().removeCallStatusListener(msg.getHostCellID());
      hostCellID=null;
    }
    sender.send(message);
    return;
  }
  logger.warning(""String_Node_Str"" + message);
}"
45553,"/** 
 * Creates a cell in the world given the CellServerState of the cell. If the given CellServerState is null, this method simply does not create a Cell. This method attempts to position the Cell ""optimally"" so that the avatar can see it, based upon ""hints"" about the Cell bounds given to it in the CellServerState.
 * @param state The cell server state for the new cell
 * @param parentCellID The Cell ID of the parent, of null for world root
 * @throw CellCreationException Upon error creating the cell
 */
public static void createCell(CellServerState state,CellID parentCellID) throws CellCreationException {
  if (state == null) {
    logger.fine(""String_Node_Str"");
    return;
  }
  ViewManager vm=ViewManager.getViewManager();
  ViewCell viewCell=vm.getPrimaryViewCell();
  CellTransform viewTransform=viewCell.getWorldTransform();
  ServerSessionManager manager=viewCell.getCellCache().getSession().getSessionManager();
  CellTransform transform=null;
  BoundingVolumeHint hint=state.getBoundingVolumeHint();
  logger.info(""String_Node_Str"" + hint.getBoundsHint() + ""String_Node_Str""+ hint.isDoSystemPlacement());
  if (hint != null && hint.isDoSystemPlacement() == true) {
    BoundingVolume boundsHint=hint.getBoundsHint();
    transform=CellPlacementUtils.getCellTransform(manager,boundsHint,viewTransform);
  }
 else   if (hint == null) {
    BoundingVolume boundsHint=new BoundingSphere(DEFAULT_RADIUS,Vector3f.ZERO);
    transform=CellPlacementUtils.getCellTransform(manager,boundsHint,viewTransform);
  }
 else   if (hint != null && hint.isDoSystemPlacement() == false) {
    transform=viewTransform;
  }
  if (parentCellID != null) {
    Cell parent=viewCell.getCellCache().getCell(parentCellID);
    CellTransform worldTransform=new CellTransform(null,null);
    CellTransform parentTransform=parent.getWorldTransform();
    logger.info(""String_Node_Str"" + parentTransform.getTranslation(null).toString() + ""String_Node_Str""+ parentTransform.getRotation(null).toString());
    transform=CellPlacementUtils.transform(transform,worldTransform,parentTransform);
  }
  logger.info(""String_Node_Str"" + transform.getTranslation(null).toString());
  PositionComponentServerState position=(PositionComponentServerState)state.getComponentServerState(PositionComponentServerState.class);
  if (position == null) {
    position=new PositionComponentServerState();
    state.addComponentServerState(position);
  }
  position.setTranslation(transform.getTranslation(null));
  position.setRotation(transform.getRotation(null));
  position.setScaling(transform.getScaling(null));
  state.addComponentServerState(new ViewComponentServerState(viewTransform));
  WonderlandSession session=manager.getPrimarySession();
  CellEditChannelConnection connection=(CellEditChannelConnection)session.getConnection(CellEditConnectionType.CLIENT_TYPE);
  CellCreateMessage msg=new CellCreateMessage(parentCellID,state);
  connection.send(msg);
}","/** 
 * Creates a cell in the world given the CellServerState of the cell. If the given CellServerState is null, this method simply does not create a Cell. This method attempts to position the Cell ""optimally"" so that the avatar can see it, based upon ""hints"" about the Cell bounds given to it in the CellServerState.
 * @param state The cell server state for the new cell
 * @param parentCellID The Cell ID of the parent, of null for world root
 * @throw CellCreationException Upon error creating the cell
 */
public static void createCell(CellServerState state,CellID parentCellID) throws CellCreationException {
  if (state == null) {
    logger.fine(""String_Node_Str"");
    return;
  }
  ViewManager vm=ViewManager.getViewManager();
  ViewCell viewCell=vm.getPrimaryViewCell();
  CellTransform viewTransform=viewCell.getWorldTransform();
  ServerSessionManager manager=viewCell.getCellCache().getSession().getSessionManager();
  CellTransform transform=null;
  BoundingVolumeHint hint=state.getBoundingVolumeHint();
  logger.info(""String_Node_Str"" + hint.getBoundsHint() + ""String_Node_Str""+ hint.isDoSystemPlacement());
  if (hint != null && hint.isDoSystemPlacement() == true) {
    BoundingVolume boundsHint=hint.getBoundsHint();
    transform=CellPlacementUtils.getCellTransform(manager,boundsHint,viewTransform);
  }
 else   if (hint == null) {
    BoundingVolume boundsHint=new BoundingSphere(DEFAULT_RADIUS,Vector3f.ZERO);
    transform=CellPlacementUtils.getCellTransform(manager,boundsHint,viewTransform);
  }
 else   if (hint != null && hint.isDoSystemPlacement() == false) {
    transform=viewTransform;
  }
  if (parentCellID != null) {
    Cell parent=viewCell.getCellCache().getCell(parentCellID);
    CellTransform worldTransform=new CellTransform(null,null);
    CellTransform parentTransform=parent.getWorldTransform();
    logger.info(""String_Node_Str"" + parentTransform.getTranslation(null).toString() + ""String_Node_Str""+ parentTransform.getRotation(null).toString());
    transform=CellPlacementUtils.transform(transform,worldTransform,parentTransform);
  }
  logger.info(""String_Node_Str"" + transform.getTranslation(null).toString());
  PositionComponentServerState position=(PositionComponentServerState)state.getComponentServerState(PositionComponentServerState.class);
  if (position == null) {
    position=new PositionComponentServerState();
    state.addComponentServerState(position);
    position.setTranslation(transform.getTranslation(null));
    position.setRotation(transform.getRotation(null));
    position.setScaling(transform.getScaling(null));
  }
  state.addComponentServerState(new ViewComponentServerState(viewTransform));
  WonderlandSession session=manager.getPrimarySession();
  CellEditChannelConnection connection=(CellEditChannelConnection)session.getConnection(CellEditConnectionType.CLIENT_TYPE);
  CellCreateMessage msg=new CellCreateMessage(parentCellID,state);
  connection.send(msg);
}"
45554,"/** 
 * Constructor which takes major/minor version number 
 */
public ModuleInfo(String name,int major,int minor){
  this.name=name;
  this.version.major=major;
  this.version.minor=minor;
}","/** 
 * Constructor which takes major/minor version number 
 */
public ModuleInfo(String name,int major,int minor,int mini){
  this.name=name;
  this.version.major=major;
  this.version.minor=minor;
  this.version.mini=mini;
}"
45555,"/** 
 * Returns the version as a string: <major>.<minor>
 */
@Override public String toString(){
  return this.getName() + ""String_Node_Str"" + Integer.toString(this.getMajor())+ ""String_Node_Str""+ Integer.toString(this.getMinor())+ ""String_Node_Str"";
}","/** 
 * Returns the version as a string: <major>.<minor>
 */
@Override public String toString(){
  return this.getName() + ""String_Node_Str"" + Integer.toString(this.getMajor())+ ""String_Node_Str""+ Integer.toString(this.getMinor())+ ""String_Node_Str""+ Integer.toString(this.getMini())+ ""String_Node_Str"";
}"
45556,"public static void main(String[] args) throws IOException, JAXBException {
  ModuleJarWriter mjw=new ModuleJarWriter();
  ModuleInfo info=new ModuleInfo(""String_Node_Str"",1,0,""String_Node_Str"");
  mjw.setModuleInfo(info);
  mjw.addArtFile(""String_Node_Str"",new File(""String_Node_Str""));
  mjw.addArtFile(""String_Node_Str"",new File(""String_Node_Str""));
  mjw.writeToJar(new File(""String_Node_Str""));
}","public static void main(String[] args) throws IOException, JAXBException {
  ModuleJarWriter mjw=new ModuleJarWriter();
  ModuleInfo info=new ModuleInfo(""String_Node_Str"",1,0,0,""String_Node_Str"");
  mjw.setModuleInfo(info);
  mjw.addArtFile(""String_Node_Str"",new File(""String_Node_Str""));
  mjw.addArtFile(""String_Node_Str"",new File(""String_Node_Str""));
  mjw.writeToJar(new File(""String_Node_Str""));
}"
45557,"/** 
 * Deploys the textures into the art directory, placing them in a directory with the name of the original model.
 * @param moduleArtRootDir
 */
protected void deployTextures(File targetDir,Map<String,String> deploymentMapping,ImportedModel loadedModel){
  try {
    for (    Map.Entry<URL,String> t : loadedModel.getTextureFiles().entrySet()) {
      File target=null;
      String targetFilename=t.getValue();
      String deployFilename=null;
      if (targetFilename.startsWith(""String_Node_Str"")) {
        targetFilename=targetFilename.substring(targetFilename.lastIndexOf('/'));
        if (targetFilename == null) {
          targetFilename=t.getValue();
        }
      }
 else {
        if (targetFilename.startsWith(""String_Node_Str"")) {
          deployFilename=targetFilename.substring(3);
          target=new File(targetDir,deployFilename);
        }
      }
      if (target == null) {
        deployFilename=targetFilename;
        target=new File(targetDir,targetFilename);
      }
      target.getParentFile().mkdirs();
      target.createNewFile();
      copyAsset(t.getKey(),target,false);
      String colladaURL=loadedModel.getTextureFiles().get(t.getKey());
      deploymentMapping.put(colladaURL,deployFilename);
    }
  }
 catch (  IOException ex) {
    logger.log(Level.SEVERE,null,ex);
  }
}","/** 
 * Deploys the textures into the art directory, placing them in a directory with the name of the original model.
 * @param moduleArtRootDir
 */
protected void deployTextures(File targetDir,Map<String,String> deploymentMapping,ImportedModel loadedModel){
  try {
    for (    Map.Entry<URL,String> t : loadedModel.getTextureFiles().entrySet()) {
      File target=null;
      String targetFilename=t.getValue();
      String deployFilename=null;
      if (targetFilename.startsWith(""String_Node_Str"")) {
        targetFilename=targetFilename.substring(targetFilename.lastIndexOf('/'));
        if (targetFilename == null) {
          targetFilename=t.getValue();
        }
      }
 else       if (targetFilename.startsWith(""String_Node_Str"")) {
        deployFilename=targetFilename.substring(3);
        target=new File(targetDir,deployFilename);
      }
 else       if (targetFilename.startsWith(""String_Node_Str"")) {
        deployFilename=targetFilename.substring(2);
        target=new File(targetDir,deployFilename);
      }
      if (target == null) {
        deployFilename=targetFilename;
        target=new File(targetDir,targetFilename);
      }
      target.getParentFile().mkdirs();
      target.createNewFile();
      copyAsset(t.getKey(),target,false);
      String colladaURL=loadedModel.getTextureFiles().get(t.getKey());
      deploymentMapping.put(colladaURL,deployFilename);
    }
  }
 catch (  IOException ex) {
    logger.log(Level.SEVERE,null,ex);
  }
}"
45558,"/** 
 * @param args the command line arguments
 */
public static void main(String[] args){
  for (int i=0; i < args.length; i++) {
    if (args[i].startsWith(""String_Node_Str"")) {
      TestHarnessSupport.processCommandLineArgs(args[i]);
    }
  }
  if (Webstart.isWebstart()) {
    Webstart.webstartSetup();
  }
  JmeClientMain worldTest=new JmeClientMain(args);
}","/** 
 * @param args the command line arguments
 */
public static void main(String[] args){
  for (int i=0; i < args.length; i++) {
    if (args[i].startsWith(""String_Node_Str"")) {
      TestHarnessSupport.processCommandLineArgs(args[i]);
    }
  }
  new LogControl(JmeClientMain.class,""String_Node_Str"" + ""String_Node_Str"");
  Logger rootLogger=Logger.getLogger(""String_Node_Str"");
  rootLogger.addHandler(new LogViewerHandler());
  if (Webstart.isWebstart()) {
    Webstart.webstartSetup();
  }
  JmeClientMain worldTest=new JmeClientMain(args);
}"
45559,"public LogViewerHandler(){
  super();
  LogViewerFrame.getInstance().setHandler(this);
}","public LogViewerHandler(){
  super();
  setLevel(Level.ALL);
  LogViewerFrame.getInstance().setHandler(this);
}"
45560,"public void showBounds(final BoundingVolume bounds){
  if (rootNode != null) {
    dispose();
  }
  rootNode=new Node(""String_Node_Str"");
  RenderManager rm=ClientContextJME.getWorldManager().getRenderManager();
  RenderComponent rc=rm.createRenderComponent(rootNode);
  this.addComponent(RenderComponent.class,rc);
  ZBufferState zbuf=(ZBufferState)rm.createRendererState(StateType.ZBuffer);
  zbuf.setEnabled(true);
  zbuf.setFunction(ZBufferState.TestFunction.LessThanOrEqualTo);
  rootNode.setRenderState(zbuf);
  WireframeState wf=(WireframeState)rm.createRendererState(StateType.Wireframe);
  wf.setEnabled(true);
  rootNode.setRenderState(wf);
  if (bounds instanceof BoundingSphere) {
    float radius=((BoundingSphere)bounds).radius;
    Sphere sphere=new Sphere(""String_Node_Str"",30,30,radius);
    rootNode.attachChild(sphere);
  }
 else   if (bounds instanceof BoundingBox) {
    float xExtent=((BoundingBox)bounds).xExtent;
    float yExtent=((BoundingBox)bounds).yExtent;
    float zExtent=((BoundingBox)bounds).zExtent;
    Box box=new Box(""String_Node_Str"",Vector3f.ZERO,xExtent,yExtent,zExtent);
    rootNode.attachChild(box);
  }
  Vector3f translation=cell.getWorldTransform().getTranslation(null);
  translation=translation.add(bounds.getCenter());
  rootNode.setLocalTranslation(translation);
  updateListener=new TransformChangeListener(){
    public void transformChanged(    final Cell cell,    ChangeSource source){
      final WorldManager wm=ClientContextJME.getWorldManager();
      RenderUpdater u=new RenderUpdater(){
        public void update(        Object obj){
          CellTransform transform=cell.getWorldTransform();
          Vector3f translation=transform.getTranslation(null);
          translation=translation.add(bounds.getCenter());
          rootNode.setLocalTranslation(translation);
          wm.addToUpdateList(rootNode);
        }
      }
;
      wm.addRenderUpdater(u,this);
    }
  }
;
  cell.addTransformChangeListener(updateListener);
  setVisible(true);
}","public void showBounds(final BoundingVolume bounds){
  if (rootNode != null) {
    dispose();
  }
  rootNode=new Node(""String_Node_Str"");
  RenderManager rm=ClientContextJME.getWorldManager().getRenderManager();
  RenderComponent rc=rm.createRenderComponent(rootNode);
  this.addComponent(RenderComponent.class,rc);
  ZBufferState zbuf=(ZBufferState)rm.createRendererState(StateType.ZBuffer);
  zbuf.setEnabled(true);
  zbuf.setFunction(ZBufferState.TestFunction.LessThanOrEqualTo);
  rootNode.setRenderState(zbuf);
  WireframeState wf=(WireframeState)rm.createRendererState(StateType.Wireframe);
  wf.setEnabled(true);
  rootNode.setRenderState(wf);
  if (bounds instanceof BoundingSphere) {
    float radius=((BoundingSphere)bounds).radius;
    Sphere sphere=new Sphere(""String_Node_Str"",30,30,radius);
    rootNode.attachChild(sphere);
  }
 else   if (bounds instanceof BoundingBox) {
    float xExtent=((BoundingBox)bounds).xExtent;
    float yExtent=((BoundingBox)bounds).yExtent;
    float zExtent=((BoundingBox)bounds).zExtent;
    Box box=new Box(""String_Node_Str"",Vector3f.ZERO,xExtent,yExtent,zExtent);
    rootNode.attachChild(box);
  }
  CellTransform transform=cell.getWorldTransform();
  Vector3f translation=transform.getTranslation(null);
  translation=translation.add(bounds.getCenter());
  rootNode.setLocalTranslation(translation);
  rootNode.setLocalRotation(transform.getRotation(null));
  updateListener=new TransformChangeListener(){
    public void transformChanged(    final Cell cell,    ChangeSource source){
      final WorldManager wm=ClientContextJME.getWorldManager();
      RenderUpdater u=new RenderUpdater(){
        public void update(        Object obj){
          CellTransform transform=cell.getWorldTransform();
          Vector3f translation=transform.getTranslation(null);
          translation=translation.add(bounds.getCenter());
          rootNode.setLocalTranslation(translation);
          rootNode.setLocalRotation(transform.getRotation(null));
          wm.addToUpdateList(rootNode);
        }
      }
;
      wm.addRenderUpdater(u,this);
    }
  }
;
  cell.addTransformChangeListener(updateListener);
  setVisible(true);
}"
45561,"public void update(Object obj){
  CellTransform transform=cell.getWorldTransform();
  Vector3f translation=transform.getTranslation(null);
  translation=translation.add(bounds.getCenter());
  rootNode.setLocalTranslation(translation);
  wm.addToUpdateList(rootNode);
}","public void update(Object obj){
  CellTransform transform=cell.getWorldTransform();
  Vector3f translation=transform.getTranslation(null);
  translation=translation.add(bounds.getCenter());
  rootNode.setLocalTranslation(translation);
  rootNode.setLocalRotation(transform.getRotation(null));
  wm.addToUpdateList(rootNode);
}"
45562,"public void transformChanged(final Cell cell,ChangeSource source){
  final WorldManager wm=ClientContextJME.getWorldManager();
  RenderUpdater u=new RenderUpdater(){
    public void update(    Object obj){
      CellTransform transform=cell.getWorldTransform();
      Vector3f translation=transform.getTranslation(null);
      translation=translation.add(bounds.getCenter());
      rootNode.setLocalTranslation(translation);
      wm.addToUpdateList(rootNode);
    }
  }
;
  wm.addRenderUpdater(u,this);
}","public void transformChanged(final Cell cell,ChangeSource source){
  final WorldManager wm=ClientContextJME.getWorldManager();
  RenderUpdater u=new RenderUpdater(){
    public void update(    Object obj){
      CellTransform transform=cell.getWorldTransform();
      Vector3f translation=transform.getTranslation(null);
      translation=translation.add(bounds.getCenter());
      rootNode.setLocalTranslation(translation);
      rootNode.setLocalRotation(transform.getRotation(null));
      wm.addToUpdateList(rootNode);
    }
  }
;
  wm.addRenderUpdater(u,this);
}"
45563,"/** 
 * Load and return the avatar. To make this the current avatar changeAvatar() must be called
 * @param avatarConfigURL
 * @return
 */
private WlAvatarCharacter loadAvatarInternal(AvatarConfigInfo avatarConfigInfo) throws MalformedURLException, IOException {
  WlAvatarCharacter ret=null;
  PMatrix origin=new PMatrix();
  CellTransform transform=cell.getLocalTransform();
  origin.setTranslation(transform.getTranslation(null));
  origin.setRotation(transform.getRotation(null));
  String avatarDetail=System.getProperty(""String_Node_Str"",""String_Node_Str"");
  String shaderCheck=System.getProperty(""String_Node_Str"");
  boolean shaderPass=true;
  RenderManager rm=ClientContextJME.getWorldManager().getRenderManager();
  if (shaderCheck != null && shaderCheck.equals(""String_Node_Str"")) {
    shaderPass=rm.getContextCaps().GL_MAX_VERTEX_UNIFORM_COMPONENTS_ARB >= 512;
  }
  if (rm.supportsOpenGL20() == false || !shaderPass) {
    avatarDetail=""String_Node_Str"";
  }
  AvatarLoaderRegistry registry=AvatarLoaderRegistry.getAvatarLoaderRegistry();
  if (avatarConfigInfo == null || avatarDetail.equalsIgnoreCase(""String_Node_Str"")) {
    AvatarLoaderFactorySPI factory=registry.getDefaultAvatarLoaderFactory();
    if (factory == null) {
      logger.warning(""String_Node_Str"");
      return null;
    }
    ret=factory.getAvatarLoader().getAvatarCharacter(cell,username,avatarConfigInfo);
  }
 else {
    String className=avatarConfigInfo.getLoaderFactoryClassName();
    if (className == null) {
      logger.warning(""String_Node_Str"" + ""String_Node_Str"" + avatarConfigInfo.getAvatarConfigURL());
      return null;
    }
    AvatarLoaderFactorySPI factory=registry.getAvatarLoaderFactory(className);
    if (factory == null) {
      logger.warning(""String_Node_Str"" + className + ""String_Node_Str""+ avatarConfigInfo.getAvatarConfigURL());
      return null;
    }
    ret=factory.getAvatarLoader().getAvatarCharacter(cell,username,avatarConfigInfo);
  }
  ret.getModelInst().getTransform().getLocalMatrix(true).set(origin);
  Node external=ret.getJScene().getExternalKidsRoot();
  setZBufferState(external);
  return ret;
}","/** 
 * Load and return the avatar. To make this the current avatar changeAvatar() must be called
 * @param avatarConfigURL
 * @return
 */
private WlAvatarCharacter loadAvatarInternal(AvatarConfigInfo avatarConfigInfo) throws MalformedURLException, IOException {
  WlAvatarCharacter ret=null;
  PMatrix origin=new PMatrix();
  CellTransform transform=cell.getLocalTransform();
  origin.setTranslation(transform.getTranslation(null));
  origin.setRotation(transform.getRotation(null));
  String avatarDetail=System.getProperty(""String_Node_Str"",""String_Node_Str"");
  String shaderCheck=System.getProperty(""String_Node_Str"");
  boolean shaderPass=true;
  RenderManager rm=ClientContextJME.getWorldManager().getRenderManager();
  if (shaderCheck != null && shaderCheck.equals(""String_Node_Str"")) {
    shaderPass=rm.getContextCaps().GL_MAX_VERTEX_UNIFORM_COMPONENTS_ARB >= 512;
  }
  if (rm.supportsOpenGL20() == false || !shaderPass) {
    avatarDetail=""String_Node_Str"";
  }
  AvatarLoaderRegistry registry=AvatarLoaderRegistry.getAvatarLoaderRegistry();
  if (avatarConfigInfo == null || avatarDetail.equalsIgnoreCase(""String_Node_Str"")) {
    AvatarLoaderFactorySPI factory=registry.getDefaultAvatarLoaderFactory();
    if (factory == null) {
      logger.warning(""String_Node_Str"");
      return null;
    }
    String defaultClassName=factory.getClass().getName();
    AvatarConfigInfo defaultInfo=new AvatarConfigInfo(null,defaultClassName);
    ret=factory.getAvatarLoader().getAvatarCharacter(cell,username,defaultInfo);
  }
 else {
    String className=avatarConfigInfo.getLoaderFactoryClassName();
    if (className == null) {
      logger.warning(""String_Node_Str"" + ""String_Node_Str"" + avatarConfigInfo.getAvatarConfigURL());
      return null;
    }
    AvatarLoaderFactorySPI factory=registry.getAvatarLoaderFactory(className);
    if (factory == null) {
      logger.warning(""String_Node_Str"" + className + ""String_Node_Str""+ avatarConfigInfo.getAvatarConfigURL());
      return null;
    }
    ret=factory.getAvatarLoader().getAvatarCharacter(cell,username,avatarConfigInfo);
  }
  ret.getModelInst().getTransform().getLocalMatrix(true).set(origin);
  Node external=ret.getJScene().getExternalKidsRoot();
  setZBufferState(external);
  return ret;
}"
45564,"/** 
 * Adds an entry from the X11 Apps.
 */
private void handleAdd(HttpServletRequest request,HttpServletResponse response,ContentCollection xAppsCollection) throws ServletException, IOException, ContentRepositoryException, JAXBException {
  String appName=request.getParameter(""String_Node_Str"");
  String command=request.getParameter(""String_Node_Str"");
  if (command == null || command.equals(""String_Node_Str"") == true) {
    String msg=""String_Node_Str"";
    error(request,response,msg);
    return;
  }
  if (appName == null || appName.equals(""String_Node_Str"") == true) {
    String tokens[]=command.split(""String_Node_Str"");
    String firstToken=tokens[0];
    String paths[]=firstToken.split(""String_Node_Str"");
    appName=paths[paths.length - 1];
  }
  String nodeName=appName + ""String_Node_Str"";
  ContentNode appNode=xAppsCollection.getChild(nodeName);
  if (appNode != null) {
    String msg=""String_Node_Str"" + appName + ""String_Node_Str"";
    error(request,response,msg);
    return;
  }
  appNode=xAppsCollection.createChild(nodeName,Type.RESOURCE);
  ContentResource resource=(ContentResource)appNode;
  ByteArrayOutputStream os=new ByteArrayOutputStream();
  Writer w=new OutputStreamWriter(os);
  XAppRegistryItem item=new XAppRegistryItem(appName,command);
  item.encode(w);
  byte b[]=os.toByteArray();
  resource.put(b);
  Object obj=getServletContext().getAttribute(XAPPS_CONN_ATTR);
  if (obj != null) {
    XAppsWebConfigConnection connection=(XAppsWebConfigConnection)obj;
    connection.addX11App(appName,command);
  }
}","/** 
 * Adds an entry from the X11 Apps.
 */
private void handleAdd(HttpServletRequest request,HttpServletResponse response,ContentCollection xAppsCollection) throws ServletException, IOException, ContentRepositoryException, JAXBException {
  String appName=request.getParameter(""String_Node_Str"");
  String command=request.getParameter(""String_Node_Str"");
  if (command == null || command.equals(""String_Node_Str"") == true) {
    String msg=""String_Node_Str"";
    error(request,response,msg);
    return;
  }
  if (appName == null || appName.equals(""String_Node_Str"") == true) {
    String tokens[]=command.split(""String_Node_Str"");
    String firstToken=tokens[0];
    String paths[]=firstToken.split(""String_Node_Str"");
    appName=paths[paths.length - 1];
  }
  String nodeName=appName + ""String_Node_Str"";
  ContentNode appNode=xAppsCollection.getChild(nodeName);
  if (appNode != null) {
    String msg=""String_Node_Str"" + appName + ""String_Node_Str"";
    error(request,response,msg);
    return;
  }
  appNode=xAppsCollection.createChild(nodeName,Type.RESOURCE);
  ContentResource resource=(ContentResource)appNode;
  ByteArrayOutputStream os=new ByteArrayOutputStream();
  Writer w=new OutputStreamWriter(os);
  XAppRegistryItem item=new XAppRegistryItem(appName,command);
  item.encode(w);
  byte b[]=os.toByteArray();
  resource.put(b);
  Object obj=getServletContext().getAttribute(XAPPS_CONN_ATTR);
  if (obj != null) {
    XAppsWebConfigConnection connection=(XAppsWebConfigConnection)obj;
    connection.addX11App(appName,command);
  }
  try {
    handleBrowse(request,response,xAppsCollection);
  }
 catch (  java.lang.Exception cre) {
    throw new ServletException(cre);
  }
}"
45565,"/** 
 * Deletes an entry from the X11 Apps.
 */
private void handleDelete(HttpServletRequest request,HttpServletResponse response,ContentCollection xAppsCollection) throws ServletException, IOException, ContentRepositoryException {
  String path=request.getParameter(""String_Node_Str"");
  String appName=request.getParameter(""String_Node_Str"");
  ContentResource resource=getXAppResource(xAppsCollection,path);
  if (resource == null) {
    error(request,response,""String_Node_Str"" + request.getPathInfo() + ""String_Node_Str"");
    return;
  }
  xAppsCollection.removeChild(resource.getName());
  Object obj=getServletContext().getAttribute(XAPPS_CONN_ATTR);
  if (obj != null) {
    XAppsWebConfigConnection connection=(XAppsWebConfigConnection)obj;
    connection.removeX11App(appName);
  }
}","/** 
 * Deletes an entry from the X11 Apps.
 */
private void handleDelete(HttpServletRequest request,HttpServletResponse response,ContentCollection xAppsCollection) throws ServletException, IOException, ContentRepositoryException {
  String path=request.getParameter(""String_Node_Str"");
  String appName=request.getParameter(""String_Node_Str"");
  ContentResource resource=getXAppResource(xAppsCollection,path);
  if (resource == null) {
    error(request,response,""String_Node_Str"" + request.getPathInfo() + ""String_Node_Str"");
    return;
  }
  xAppsCollection.removeChild(resource.getName());
  Object obj=getServletContext().getAttribute(XAPPS_CONN_ATTR);
  if (obj != null) {
    XAppsWebConfigConnection connection=(XAppsWebConfigConnection)obj;
    connection.removeX11App(appName);
  }
  try {
    handleBrowse(request,response,xAppsCollection);
  }
 catch (  java.lang.Exception cre) {
    throw new ServletException(cre);
  }
}"
45566,"/** 
 * Handles the ""check"" action to map an app name to a command
 */
private void handleCheck(HttpServletRequest request,HttpServletResponse response,ContentCollection c) throws ServletException, IOException, ContentRepositoryException, JAXBException {
  String checkApp=request.getParameter(""String_Node_Str"");
  if (checkApp == null) {
    throw new ServletException(""String_Node_Str"");
  }
 else {
    checkApp=checkApp.trim();
  }
  Collection<X11AppEntry> entries=new ArrayList();
  for (  ContentNode child : c.getChildren()) {
    if (child instanceof ContentResource) {
      ContentResource resource=(ContentResource)child;
      String path=resource.getPath();
      Reader r=new InputStreamReader(resource.getInputStream());
      XAppRegistryItem item=XAppRegistryItem.decode(r);
      if (item.getAppName().equalsIgnoreCase(checkApp)) {
        response.setContentType(""String_Node_Str"");
        PrintWriter pr=new PrintWriter(response.getWriter());
        pr.println(item.getCommand());
        pr.close();
        break;
      }
    }
  }
}","/** 
 * Handles the ""check"" action to map an app name to a command
 */
private void handleCheck(HttpServletRequest request,HttpServletResponse response,ContentCollection c) throws ServletException, IOException, ContentRepositoryException, JAXBException {
  String checkApp=request.getParameter(""String_Node_Str"");
  if (checkApp == null) {
    throw new ServletException(""String_Node_Str"");
  }
 else {
    checkApp=checkApp.trim();
  }
  for (  ContentNode child : c.getChildren()) {
    if (child instanceof ContentResource) {
      ContentResource resource=(ContentResource)child;
      Reader r=new InputStreamReader(resource.getInputStream());
      XAppRegistryItem item=XAppRegistryItem.decode(r);
      if (item.getAppName().equalsIgnoreCase(checkApp)) {
        response.setContentType(""String_Node_Str"");
        PrintWriter pr=new PrintWriter(response.getWriter());
        pr.println(item.getCommand());
        pr.close();
        break;
      }
    }
  }
}"
45567,"/** 
 * Processes requests for both HTTP <code>GET</code> and <code>POST</code> methods.
 * @param request servlet request
 * @param response servlet response
 * @throws ServletException if a servlet-specific error occurs
 * @throws IOException if an I/O error occurs
 */
protected void processRequest(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
  ServletContext sc=getServletContext();
  WebContentRepositoryRegistry reg=WebContentRepositoryRegistry.getInstance();
  WebContentRepository wcr=reg.getRepository(sc);
  if (wcr == null) {
    error(request,response,""String_Node_Str"" + ""String_Node_Str"");
    return;
  }
  ContentCollection xAppsCollection=null;
  try {
    ContentCollection sysRoot=wcr.getSystemRoot();
    ContentNode xappsNode=sysRoot.getChild(""String_Node_Str"");
    if (xappsNode == null) {
      xappsNode=sysRoot.createChild(""String_Node_Str"",Type.COLLECTION);
    }
    xAppsCollection=(ContentCollection)xappsNode;
  }
 catch (  ContentRepositoryException excp) {
    logger.log(Level.WARNING,""String_Node_Str"",excp);
    error(request,response,""String_Node_Str"" + ""String_Node_Str"");
    return;
  }
  try {
    String action=request.getParameter(""String_Node_Str"");
    if (action != null && action.equalsIgnoreCase(""String_Node_Str"") == true) {
      handleDelete(request,response,xAppsCollection);
    }
 else     if (action != null && action.equalsIgnoreCase(""String_Node_Str"") == true) {
      handleAdd(request,response,xAppsCollection);
    }
 else     if (action != null && action.equalsIgnoreCase(""String_Node_Str"") == true) {
      handleCheck(request,response,xAppsCollection);
    }
    handleBrowse(request,response,xAppsCollection);
  }
 catch (  java.lang.Exception cre) {
    throw new ServletException(cre);
  }
}","/** 
 * Processes requests for both HTTP <code>GET</code> and <code>POST</code> methods.
 * @param request servlet request
 * @param response servlet response
 * @throws ServletException if a servlet-specific error occurs
 * @throws IOException if an I/O error occurs
 */
protected void processRequest(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
  ServletContext sc=getServletContext();
  WebContentRepositoryRegistry reg=WebContentRepositoryRegistry.getInstance();
  WebContentRepository wcr=reg.getRepository(sc);
  if (wcr == null) {
    error(request,response,""String_Node_Str"" + ""String_Node_Str"");
    return;
  }
  ContentCollection xAppsCollection=null;
  try {
    ContentCollection sysRoot=wcr.getSystemRoot();
    ContentNode xappsNode=sysRoot.getChild(""String_Node_Str"");
    if (xappsNode == null) {
      xappsNode=sysRoot.createChild(""String_Node_Str"",Type.COLLECTION);
    }
    xAppsCollection=(ContentCollection)xappsNode;
  }
 catch (  ContentRepositoryException excp) {
    logger.log(Level.WARNING,""String_Node_Str"",excp);
    error(request,response,""String_Node_Str"" + ""String_Node_Str"");
    return;
  }
  try {
    String action=request.getParameter(""String_Node_Str"");
    if (action != null && action.equalsIgnoreCase(""String_Node_Str"") == true) {
      handleDelete(request,response,xAppsCollection);
    }
 else     if (action != null && action.equalsIgnoreCase(""String_Node_Str"") == true) {
      handleAdd(request,response,xAppsCollection);
    }
 else     if (action != null && action.equalsIgnoreCase(""String_Node_Str"") == true) {
      handleCheck(request,response,xAppsCollection);
    }
 else {
      handleBrowse(request,response,xAppsCollection);
    }
  }
 catch (  java.lang.Exception cre) {
    throw new ServletException(cre);
  }
}"
45568,"@Override public void disconnected(){
  super.disconnected();
  System.out.println(""String_Node_Str"");
  connected=false;
  removeDialogs();
  LocalAvatar avatar=((CellClientSession)session).getLocalAvatar();
  avatar.removeViewCellConfiguredListener(this);
  System.out.println(""String_Node_Str"");
  SoftphoneControlImpl.getInstance().removeSoftphoneListener(this);
  try {
    SoftphoneControlImpl.getInstance().sendCommandToSoftphone(""String_Node_Str"");
  }
 catch (  IOException e) {
    logger.warning(""String_Node_Str"" + e.getMessage());
  }
  notifyDisconnectListeners();
}","@Override public void disconnected(){
  super.disconnected();
  connected=false;
  removeDialogs();
  LocalAvatar avatar=((CellClientSession)session).getLocalAvatar();
  avatar.removeViewCellConfiguredListener(this);
  SoftphoneControlImpl.getInstance().removeSoftphoneListener(this);
  try {
    SoftphoneControlImpl.getInstance().sendCommandToSoftphone(""String_Node_Str"");
  }
 catch (  IOException e) {
    logger.warning(""String_Node_Str"" + e.getMessage());
  }
  notifyDisconnectListeners();
}"
45569,"@Override public void connect(WonderlandSession session) throws ConnectionFailureException {
  super.connect(session);
  this.session=session;
  pm=PresenceManagerFactory.getPresenceManager(session);
  LocalAvatar avatar=((CellClientSession)session).getLocalAvatar();
  avatar.addViewCellConfiguredListener(this);
  if (avatar.getViewCell() != null) {
    viewConfigured(avatar);
  }
  System.out.println(""String_Node_Str"");
  SoftphoneControlImpl.getInstance().addSoftphoneListener(this);
  AudioMenu.getAudioMenu(this).setEnabled(true);
  userListJMenuItem.setEnabled(true);
  audioProblemJFrame=new AudioProblemJFrame(this);
  connected=true;
}","@Override public void connect(WonderlandSession session) throws ConnectionFailureException {
  super.connect(session);
  this.session=session;
  pm=PresenceManagerFactory.getPresenceManager(session);
  LocalAvatar avatar=((CellClientSession)session).getLocalAvatar();
  avatar.addViewCellConfiguredListener(this);
  if (avatar.getViewCell() != null) {
    viewConfigured(avatar);
  }
  SoftphoneControlImpl.getInstance().addSoftphoneListener(this);
  AudioMenu.getAudioMenu(this).setEnabled(true);
  userListJMenuItem.setEnabled(true);
  audioProblemJFrame=new AudioProblemJFrame(this);
  connected=true;
}"
45570,"private void receive(CellMessage message){
  if (message instanceof AudioTreatmentDoneMessage) {
    addMenuItems(new String[]{PLAY,VOLUME});
    System.out.println(""String_Node_Str"");
    channelComp.send(new AudioTreatmentRequestMessage(cell.getCellID(),true,true));
    return;
  }
  if (message instanceof AudioTreatmentEndedMessage) {
    AudioTreatmentEndedMessage msg=(AudioTreatmentEndedMessage)message;
    LOGGER.warning(""String_Node_Str"" + msg.getReason());
    notifyTreatmentEnded(msg.getReason());
    return;
  }
  if (message instanceof AudioTreatmentEstablishedMessage) {
    LOGGER.warning(""String_Node_Str"");
    notifyTreatmentEstablished();
    return;
  }
  if (message instanceof AudioTreatmentMenuChangeMessage) {
    addMenuItems(((AudioTreatmentMenuChangeMessage)message).getMenuItems());
    return;
  }
  if (message instanceof AudioVolumeMessage) {
    float volume=(float)((AudioVolumeMessage)message).getVolume();
    LOGGER.fine(""String_Node_Str"" + volume);
    return;
  }
}","private void receive(CellMessage message){
  if (message instanceof AudioTreatmentDoneMessage) {
    addMenuItems(new String[]{PLAY,VOLUME});
    channelComp.send(new AudioTreatmentRequestMessage(cell.getCellID(),true,true));
    return;
  }
  if (message instanceof AudioTreatmentEndedMessage) {
    AudioTreatmentEndedMessage msg=(AudioTreatmentEndedMessage)message;
    LOGGER.warning(""String_Node_Str"" + msg.getReason());
    notifyTreatmentEnded(msg.getReason());
    return;
  }
  if (message instanceof AudioTreatmentEstablishedMessage) {
    LOGGER.warning(""String_Node_Str"");
    notifyTreatmentEstablished();
    return;
  }
  if (message instanceof AudioTreatmentMenuChangeMessage) {
    addMenuItems(((AudioTreatmentMenuChangeMessage)message).getMenuItems());
    return;
  }
  if (message instanceof AudioVolumeMessage) {
    float volume=(float)((AudioVolumeMessage)message).getVolume();
    LOGGER.fine(""String_Node_Str"" + volume);
    return;
  }
}"
45571,"public void speakerVuMeterValue(String value){
  double volume=Math.abs(Double.parseDouble(value));
  final double v=Math.round(Math.sqrt(volume) * 100) / 100D;
  java.awt.EventQueue.invokeLater(new Runnable(){
    public void run(){
      speakerMeter.setValue(v);
      if (v > speakerWarningLimit) {
        speakerMeterPanel.setBackground(overLimitColor);
      }
 else {
        speakerMeterPanel.setBackground(micPanelBackground);
      }
    }
  }
);
}","public void speakerVuMeterValue(String value){
  double volume=Math.abs(Double.parseDouble(value));
  final double v=Math.round(Math.sqrt(volume) * 100) / 100D;
  java.awt.EventQueue.invokeLater(new Runnable(){
    public void run(){
      speakerMeter.setValue(v);
      if (v > speakerWarningLimit) {
        speakerMeterPanel.setBackground(overLimitColor);
      }
 else {
        speakerMeterPanel.setBackground(speakerPanelBackground);
      }
    }
  }
);
}"
45572,"public VuMeterPanel(AudioManagerClient client){
  this.client=client;
  initComponents();
  micPanelBackground=micMeterPanel.getBackground();
  speakerPanelBackground=speakerMeterPanel.getBackground();
  micMutedIcon=new ImageIcon(getClass().getResource(""String_Node_Str"" + ""String_Node_Str""));
  micUnmutedIcon=new ImageIcon(getClass().getResource(""String_Node_Str"" + ""String_Node_Str""));
  speakerMutedIcon=new ImageIcon(getClass().getResource(""String_Node_Str"" + ""String_Node_Str""));
  speakerUnmutedIcon=new ImageIcon(getClass().getResource(""String_Node_Str"" + ""String_Node_Str""));
  volumeConverter=new VolumeConverter(micVolumeSlider.getMaximum());
  if (client != null) {
    client.addDisconnectListener(this);
  }
  micMeter=new VMeter(""String_Node_Str"");
  micMeter.setBackground(Color.WHITE);
  micMeter.setForeground(Color.DARK_GRAY);
  micMeter.setPreferredSize(micMeterPanel.getPreferredSize());
  micMeter.setShowValue(false);
  micMeter.setShowTicks(false);
  micMeter.setMaxValue(1D);
  micMeter.setWarningValue(micWarningLimit);
  micMeter.setVisible(true);
  micMeterPanel.add(micMeter);
  speakerMeter=new VMeter(""String_Node_Str"");
  speakerMeter.setBackground(Color.WHITE);
  speakerMeter.setForeground(Color.DARK_GRAY);
  speakerMeter.setPreferredSize(micMeterPanel.getPreferredSize());
  speakerMeter.setShowValue(false);
  speakerMeter.setShowTicks(false);
  speakerMeter.setMaxValue(1D);
  speakerMeter.setWarningValue(speakerWarningLimit);
  speakerMeter.setVisible(true);
  speakerMeterPanel.add(speakerMeter);
}","public VuMeterPanel(AudioManagerClient client){
  this.client=client;
  initComponents();
  micPanelBackground=micMeterPanel.getBackground();
  speakerPanelBackground=speakerMeterPanel.getBackground();
  micMutedIcon=new ImageIcon(getClass().getResource(""String_Node_Str"" + ""String_Node_Str""));
  micUnmutedIcon=new ImageIcon(getClass().getResource(""String_Node_Str"" + ""String_Node_Str""));
  speakerMutedIcon=new ImageIcon(getClass().getResource(""String_Node_Str"" + ""String_Node_Str""));
  speakerUnmutedIcon=new ImageIcon(getClass().getResource(""String_Node_Str"" + ""String_Node_Str""));
  volumeConverter=new VolumeConverter(micVolumeSlider.getMaximum());
  if (client != null) {
    client.addDisconnectListener(this);
  }
  micMeter=new VMeter(""String_Node_Str"");
  micMeter.setBackground(Color.WHITE);
  micMeter.setForeground(Color.DARK_GRAY);
  micMeter.setPreferredSize(micMeterPanel.getPreferredSize());
  micMeter.setShowValue(false);
  micMeter.setShowTicks(false);
  micMeter.setMaxValue(1D);
  micMeter.setWarningValue(micWarningLimit);
  micMeter.setVisible(true);
  micMeterPanel.add(micMeter);
  speakerMeter=new VMeter(""String_Node_Str"");
  speakerMeter.setBackground(Color.WHITE);
  speakerMeter.setForeground(Color.DARK_GRAY);
  speakerMeter.setPreferredSize(speakerMeterPanel.getPreferredSize());
  speakerMeter.setShowValue(false);
  speakerMeter.setShowTicks(false);
  speakerMeter.setMaxValue(1D);
  speakerMeter.setWarningValue(speakerWarningLimit);
  speakerMeter.setVisible(true);
  speakerMeterPanel.add(speakerMeter);
}"
45573,"/** 
 * Creates a new tree node for the given Cell and inserts it into the tree.
 */
private void createJTreeNode(Cell cell){
  SortedTreeNode ret=new SortedTreeNode(cell){
    @Override public String toString(){
      Cell cell=(Cell)getUserObject();
      return ""String_Node_Str"" + cell.getCellID().toString();
    }
  }
;
  cellNodes.put(cell,ret);
  SortedTreeNode parentNode=cellNodes.get(cell.getParent());
  if (parentNode == null) {
    parentNode=treeRoot;
  }
  parentNode.add(ret);
  DefaultTreeModel model=(DefaultTreeModel)cellHierarchyTree.getModel();
  int childIndex=parentNode.getIndex(ret);
  model.nodesWereInserted(parentNode,new int[]{childIndex});
  List<Cell> children=cell.getChildren();
  for (  Cell child : children) {
    createJTreeNode(child);
  }
}","/** 
 * Creates a new tree node for the given Cell and inserts it into the tree.
 */
private void createJTreeNode(Cell cell){
  if (cell instanceof AvatarCell) {
    return;
  }
  SortedTreeNode ret=new SortedTreeNode(cell){
    @Override public String toString(){
      Cell cell=(Cell)getUserObject();
      return ""String_Node_Str"" + cell.getCellID().toString();
    }
  }
;
  cellNodes.put(cell,ret);
  SortedTreeNode parentNode=cellNodes.get(cell.getParent());
  if (parentNode == null) {
    parentNode=treeRoot;
  }
  parentNode.add(ret);
  DefaultTreeModel model=(DefaultTreeModel)cellHierarchyTree.getModel();
  int childIndex=parentNode.getIndex(ret);
  model.nodesWereInserted(parentNode,new int[]{childIndex});
  List<Cell> children=cell.getChildren();
  for (  Cell child : children) {
    createJTreeNode(child);
  }
}"
45574,"/** 
 * Get the  cells from the cache and update the nodes in tree
 */
private void refreshCells(WonderlandSession session){
  CellCache cache=ClientContext.getCellCache(session);
  if (cache == null) {
    LOGGER.warning(""String_Node_Str"" + session);
    return;
  }
  treeRoot=new SortedTreeNode(BUNDLE.getString(""String_Node_Str""));
  DefaultTreeModel treeModel=new DefaultTreeModel(treeRoot);
  cellHierarchyTree.setModel(treeModel);
  cellNodes.clear();
  Collection<Cell> rootCells=cache.getRootCells();
  for (  Cell rootCell : rootCells) {
    if (rootCell instanceof AvatarCell) {
      continue;
    }
    createJTreeNode(rootCell);
  }
  cellHierarchyTree.repaint();
}","/** 
 * Get the  cells from the cache and update the nodes in tree
 */
private void refreshCells(WonderlandSession session){
  CellCache cache=ClientContext.getCellCache(session);
  if (cache == null) {
    LOGGER.warning(""String_Node_Str"" + session);
    return;
  }
  treeRoot=new SortedTreeNode(BUNDLE.getString(""String_Node_Str""));
  DefaultTreeModel treeModel=new DefaultTreeModel(treeRoot);
  cellHierarchyTree.setModel(treeModel);
  cellNodes.clear();
  Collection<Cell> rootCells=cache.getRootCells();
  for (  Cell rootCell : rootCells) {
    createJTreeNode(rootCell);
  }
  cellHierarchyTree.repaint();
}"
45575,"public void removeAudioTreatmentComponentMO(CellMO cellMO,AudioTreatmentComponentMO audioTreatmentComponentMO){
  if (proximityListener == null) {
    return;
  }
  audioTreatmentComponentMO.setSpatializer(false);
  proximityListener.cellExited(cellMO.getCellID());
}","public void removeAudioTreatmentComponentMO(CellMO cellMO,AudioTreatmentComponentMO audioTreatmentComponentMO){
  if (proximityListenerRef == null) {
    return;
  }
  audioTreatmentComponentMO.setSpatializer(false);
  proximityListenerRef.get().cellExited(cellMO.getCellID());
}"
45576,"private void addProximityListener(boolean live){
  ProximityComponentMO component=cellRef.get().getComponent(ProximityComponentMO.class);
  if (component == null) {
    logger.warning(""String_Node_Str"" + ""String_Node_Str"" + cellID);
    return;
  }
  if (proximityListener != null) {
    proximityListener.remove();
    component.removeProximityListener(proximityListener);
  }
  if (live == true) {
    BoundingVolume[] boundingVolume=new BoundingVolume[1];
    if (boundsType.equals(COSBoundsType.CELL_BOUNDS)) {
      boundingVolume[0]=cellRef.get().getLocalBounds();
      logger.warning(""String_Node_Str"" + boundingVolume[0]);
    }
 else     if (boundsType.equals(COSBoundsType.BOX)) {
      boundingVolume[0]=new BoundingBox(new Vector3f(),bounds.getX(),bounds.getY(),bounds.getZ());
      logger.warning(""String_Node_Str"" + boundingVolume[0]);
    }
 else {
      boundingVolume[0]=new BoundingSphere(bounds.getX(),new Vector3f());
      logger.warning(""String_Node_Str"" + boundingVolume[0]);
    }
    proximityListener=new ConeOfSilenceProximityListener(cellRef.get(),name,outsideAudioVolume);
    component.addProximityListener(proximityListener,boundingVolume);
  }
 else {
    proximityListener=null;
  }
}","private void addProximityListener(boolean live){
  ProximityComponentMO component=cellRef.get().getComponent(ProximityComponentMO.class);
  if (component == null) {
    logger.warning(""String_Node_Str"" + ""String_Node_Str"" + cellID);
    return;
  }
  if (proximityListenerRef != null) {
    ConeOfSilenceProximityListener proximityListener=proximityListenerRef.get();
    proximityListener.remove();
    component.removeProximityListener(proximityListener);
    proximityListenerRef=null;
  }
  if (live == true) {
    BoundingVolume[] boundingVolume=new BoundingVolume[1];
    if (boundsType.equals(COSBoundsType.CELL_BOUNDS)) {
      boundingVolume[0]=cellRef.get().getLocalBounds();
      logger.warning(""String_Node_Str"" + boundingVolume[0]);
      System.out.println(""String_Node_Str"" + boundingVolume[0]);
    }
 else     if (boundsType.equals(COSBoundsType.BOX)) {
      boundingVolume[0]=new BoundingBox(new Vector3f(),bounds.getX(),bounds.getY(),bounds.getZ());
      logger.warning(""String_Node_Str"" + boundingVolume[0]);
      System.out.println(""String_Node_Str"" + boundingVolume[0]);
    }
 else {
      boundingVolume[0]=new BoundingSphere(bounds.getX(),new Vector3f());
      logger.warning(""String_Node_Str"" + boundingVolume[0]);
      System.out.println(""String_Node_Str"" + boundingVolume[0]);
    }
    ConeOfSilenceProximityListener proximityListener=new ConeOfSilenceProximityListener(cellRef.get(),name,outsideAudioVolume);
    proximityListenerRef=AppContext.getDataManager().createReference(proximityListener);
    component.addProximityListener(proximityListener,boundingVolume);
  }
}"
45577,"public void addAudioTreatmentComponentMO(CellMO cellMO,AudioTreatmentComponentMO audioTreatmentComponentMO){
  if (proximityListener == null) {
    return;
  }
  audioTreatmentComponentMO.setSpatializer(true);
  proximityListener.cellEntered(cellMO.getCellID());
}","public void addAudioTreatmentComponentMO(CellMO cellMO,AudioTreatmentComponentMO audioTreatmentComponentMO){
  if (proximityListenerRef == null) {
    return;
  }
  audioTreatmentComponentMO.setSpatializer(true);
  proximityListenerRef.get().cellEntered(cellMO.getCellID());
}"
45578,"public void viewEnterExit(boolean entered,CellID cellID,CellID viewCellID,BoundingVolume proximityVolume,int proximityIndex){
  logger.info(""String_Node_Str"" + entered + ""String_Node_Str""+ cellID+ ""String_Node_Str""+ viewCellID);
  this.entered=entered;
  this.callID=CallID.getCallID(viewCellID);
  if (entered) {
    cellEntered(viewCellID);
  }
 else {
    cellExited(viewCellID);
  }
}","public void viewEnterExit(boolean entered,CellID cellID,CellID viewCellID,BoundingVolume proximityVolume,int proximityIndex){
  logger.info(""String_Node_Str"" + entered + ""String_Node_Str""+ cellID+ ""String_Node_Str""+ viewCellID);
  System.out.println(""String_Node_Str"" + entered + ""String_Node_Str""+ cellID+ ""String_Node_Str""+ viewCellID+ ""String_Node_Str""+ proximityVolume);
  this.entered=entered;
  this.callID=CallID.getCallID(viewCellID);
  if (entered) {
    cellEntered(viewCellID);
  }
 else {
    cellExited(viewCellID);
  }
}"
45579,"private void cellEntered(String callId){
  VoiceManager vm=AppContext.getManager(VoiceManager.class);
  Player player=vm.getPlayer(callId);
  if (player == null) {
    logger.warning(""String_Node_Str"" + callId);
    return;
  }
  AudioGroup audioGroup=vm.getAudioGroup(name);
  if (audioGroup == null) {
    AudioGroupSetup setup=new AudioGroupSetup();
    setup.audioGroupListener=this;
    setup.spatializer=new FullVolumeSpatializer();
    setup.spatializer.setAttenuator(Spatializer.DEFAULT_MAXIMUM_VOLUME);
    audioGroup=vm.createAudioGroup(name,setup);
  }
  boolean isSpeaking=(inPrivateChat(audioGroup,player) == false);
  audioGroup.addPlayer(player,new AudioGroupPlayerInfo(isSpeaking,AudioGroupPlayerInfo.ChatType.PRIVATE));
  WonderlandClientSender sender=WonderlandContext.getCommsManager().getSender(AudioManagerConnectionType.CONNECTION_TYPE);
  sender.send(new ConeOfSilenceEnterExitMessage(name,callId,true));
}","private void cellEntered(String callId){
  VoiceManager vm=AppContext.getManager(VoiceManager.class);
  Player player=vm.getPlayer(callId);
  System.out.println(callId + ""String_Node_Str"" + name+ ""String_Node_Str""+ player);
  if (player == null) {
    logger.warning(""String_Node_Str"" + callId);
    return;
  }
  AudioGroup audioGroup=vm.getAudioGroup(name);
  if (audioGroup == null) {
    AudioGroupSetup setup=new AudioGroupSetup();
    setup.audioGroupListener=this;
    setup.spatializer=new FullVolumeSpatializer();
    setup.spatializer.setAttenuator(Spatializer.DEFAULT_MAXIMUM_VOLUME);
    audioGroup=vm.createAudioGroup(name,setup);
  }
  boolean isSpeaking=(inPrivateChat(audioGroup,player) == false);
  audioGroup.addPlayer(player,new AudioGroupPlayerInfo(isSpeaking,AudioGroupPlayerInfo.ChatType.PRIVATE));
  WonderlandClientSender sender=WonderlandContext.getCommsManager().getSender(AudioManagerConnectionType.CONNECTION_TYPE);
  sender.send(new ConeOfSilenceEnterExitMessage(name,callId,true));
}"
45580,"private void cellExited(String callId){
  logger.info(callId + ""String_Node_Str"" + name+ ""String_Node_Str""+ callId);
  VoiceManager vm=AppContext.getManager(VoiceManager.class);
  AudioGroup audioGroup=vm.getAudioGroup(name);
  if (audioGroup == null) {
    logger.warning(""String_Node_Str"" + name);
    return;
  }
  Player player=vm.getPlayer(callId);
  if (player == null) {
    logger.warning(""String_Node_Str"" + callId);
    return;
  }
  audioGroup.removePlayer(player);
  WonderlandClientSender sender=WonderlandContext.getCommsManager().getSender(AudioManagerConnectionType.CONNECTION_TYPE);
  sender.send(new ConeOfSilenceEnterExitMessage(name,callId,false));
}","private void cellExited(String callId){
  logger.info(callId + ""String_Node_Str"" + name+ ""String_Node_Str""+ callId);
  System.out.println(callId + ""String_Node_Str"" + name+ ""String_Node_Str""+ callId);
  VoiceManager vm=AppContext.getManager(VoiceManager.class);
  AudioGroup audioGroup=vm.getAudioGroup(name);
  if (audioGroup == null) {
    logger.warning(""String_Node_Str"" + name);
    return;
  }
  Player player=vm.getPlayer(callId);
  if (player == null) {
    logger.warning(""String_Node_Str"" + callId);
    return;
  }
  audioGroup.removePlayer(player);
  WonderlandClientSender sender=WonderlandContext.getCommsManager().getSender(AudioManagerConnectionType.CONNECTION_TYPE);
  sender.send(new ConeOfSilenceEnterExitMessage(name,callId,false));
}"
45581,"@Override public void disconnected(){
  super.disconnected();
  LocalAvatar avatar=((CellClientSession)session).getLocalAvatar();
  avatar.removeViewCellConfiguredListener(this);
  SoftphoneControlImpl.getInstance().removeSoftphoneListener(this);
  SoftphoneControlImpl.getInstance().sendCommandToSoftphone(""String_Node_Str"");
  notifyDisconnectListeners();
}","@Override public void disconnected(){
  super.disconnected();
  removeDialogs();
  LocalAvatar avatar=((CellClientSession)session).getLocalAvatar();
  avatar.removeViewCellConfiguredListener(this);
  SoftphoneControlImpl.getInstance().removeSoftphoneListener(this);
  SoftphoneControlImpl.getInstance().sendCommandToSoftphone(""String_Node_Str"");
  notifyDisconnectListeners();
}"
45582,"private void notifyDisconnectListeners(){
  for (  DisconnectListener listener : disconnectListeners) {
    listener.disconnected();
  }
}","private void notifyDisconnectListeners(){
  DisconnectListener[] listeners=disconnectListeners.toArray(new DisconnectListener[0]);
  for (  DisconnectListener listener : listeners) {
    listener.disconnected();
  }
}"
45583,"public void init(RenderBuffer arg0){
  logger.info(""String_Node_Str"");
  waitForReady.release();
  canvas.setIgnoreRepaint(true);
}","public void init(RenderBuffer arg0){
  logger.info(""String_Node_Str"");
  waitForReady.release();
}"
45584,"/** 
 * Note: this disables focus traversal keys for the canvas it creates.
 */
void attachViewCanvas(JPanel panel){
  rb=ClientContextJME.getWorldManager().getRenderManager().createRenderBuffer(RenderBuffer.Target.ONSCREEN,width,height);
  ClientContextJME.getWorldManager().getRenderManager().addRenderBuffer(rb);
  final Canvas canvas=((OnscreenRenderBuffer)rb).getCanvas();
  canvas.setVisible(true);
  canvas.setBounds(0,0,width,height);
  canvas.setFocusTraversalKeysEnabled(false);
  panel.addComponentListener(new ComponentListener(){
    public void componentResized(    ComponentEvent e){
      logger.fine(""String_Node_Str"" + e);
      int width=e.getComponent().getWidth();
      int height=e.getComponent().getHeight();
      float aspectRatio=(float)width / (float)height;
      canvas.setBounds(0,0,width,height);
      cameraComponent.setViewport(width,height);
      cameraComponent.setAspectRatio(aspectRatio);
      viewProperties.setFieldOfView(viewProperties.getFieldOfView());
    }
    public void componentMoved(    ComponentEvent e){
    }
    public void componentShown(    ComponentEvent e){
    }
    public void componentHidden(    ComponentEvent e){
    }
  }
);
  Window w=SwingUtilities.getWindowAncestor(panel);
  if (w != null) {
    w.addWindowListener(new WindowAdapter(){
      @Override public void windowDeiconified(      WindowEvent e){
        ClientContextJME.getWorldManager().getRenderManager().setRunning(true);
      }
      @Override public void windowIconified(      WindowEvent e){
        ClientContextJME.getWorldManager().getRenderManager().setRunning(false);
      }
    }
);
  }
  final Semaphore waitForReady=new Semaphore(0);
  rb.setBufferUpdater(new BufferUpdater(){
    public void init(    RenderBuffer arg0){
      logger.info(""String_Node_Str"");
      waitForReady.release();
      canvas.setIgnoreRepaint(true);
    }
  }
);
  panel.add(canvas,BorderLayout.CENTER);
  canvas.repaint();
  try {
    waitForReady.acquire();
  }
 catch (  InterruptedException ex) {
    Logger.getLogger(ViewManager.class.getName()).log(Level.SEVERE,null,ex);
  }
  createCameraEntity(ClientContextJME.getWorldManager());
  listener=new CellListener();
}","/** 
 * Note: this disables focus traversal keys for the canvas it creates.
 */
void attachViewCanvas(JPanel panel){
  rb=ClientContextJME.getWorldManager().getRenderManager().createRenderBuffer(RenderBuffer.Target.ONSCREEN,width,height);
  ClientContextJME.getWorldManager().getRenderManager().addRenderBuffer(rb);
  final Canvas canvas=((OnscreenRenderBuffer)rb).getCanvas();
  canvas.setVisible(true);
  canvas.setBounds(0,0,width,height);
  canvas.setFocusTraversalKeysEnabled(false);
  panel.addComponentListener(new ComponentListener(){
    public void componentResized(    ComponentEvent e){
      logger.fine(""String_Node_Str"" + e);
      int width=e.getComponent().getWidth();
      int height=e.getComponent().getHeight();
      float aspectRatio=(float)width / (float)height;
      canvas.setBounds(0,0,width,height);
      cameraComponent.setViewport(width,height);
      cameraComponent.setAspectRatio(aspectRatio);
      viewProperties.setFieldOfView(viewProperties.getFieldOfView());
    }
    public void componentMoved(    ComponentEvent e){
    }
    public void componentShown(    ComponentEvent e){
    }
    public void componentHidden(    ComponentEvent e){
    }
  }
);
  Window w=SwingUtilities.getWindowAncestor(panel);
  if (w != null) {
    w.addWindowListener(new WindowAdapter(){
      @Override public void windowDeiconified(      WindowEvent e){
        ClientContextJME.getWorldManager().getRenderManager().setRunning(true);
      }
      @Override public void windowIconified(      WindowEvent e){
        ClientContextJME.getWorldManager().getRenderManager().setRunning(false);
      }
    }
);
  }
  final Semaphore waitForReady=new Semaphore(0);
  rb.setBufferUpdater(new BufferUpdater(){
    public void init(    RenderBuffer arg0){
      logger.info(""String_Node_Str"");
      waitForReady.release();
    }
  }
);
  panel.add(canvas,BorderLayout.CENTER);
  canvas.repaint();
  try {
    waitForReady.acquire();
  }
 catch (  InterruptedException ex) {
    Logger.getLogger(ViewManager.class.getName()).log(Level.SEVERE,null,ex);
  }
  createCameraEntity(ClientContextJME.getWorldManager());
  listener=new CellListener();
}"
45585,"/** 
 * Recurisvely loads cells from a given child directory (dir) in the WFS given by root. If this child has any children directories, then add to the children parameter.
 * @param root The root directory of the WFS being loaded
 * @param dir The current directory of children to load
 * @param children A list of child directories remaining to be loaded
 */
private void loadCells(String root,CellList dir,LinkedList<CellList> children){
  Cell childs[]=dir.getChildren();
  if (childs == null) {
    logger.warning(""String_Node_Str"" + root);
    return;
  }
  for (  Cell child : childs) {
    logger.info(""String_Node_Str"" + child.name);
    String relativePath=dir.getRelativePath();
    if (relativePath == null) {
      logger.warning(""String_Node_Str"" + child.name);
      continue;
    }
    ManagedReference<CellMO> parentRef=this.getParentCellReference(relativePath);
    CellServerState setup=CellImporterUtils.getWFSCell(root,relativePath,child.name);
    if (setup == null) {
      logger.info(""String_Node_Str"" + relativePath + ""String_Node_Str""+ child.name);
      continue;
    }
    logger.info(setup.toString());
    String cellPath=relativePath + ""String_Node_Str"" + child.name;
    if (relativePath.compareTo(""String_Node_Str"") == 0) {
      cellPath=child.name;
    }
    String className=setup.getServerClassName();
    CellMO cellMO=CellMOFactory.loadCellMO(className);
    if (cellMO == null) {
      logger.warning(""String_Node_Str"" + className);
      continue;
    }
    try {
      cellMO.setServerState(setup);
    }
 catch (    ClassCastException cce) {
      logger.log(Level.WARNING,""String_Node_Str"" + cellMO.getName() + ""String_Node_Str""+ cellMO.getClass(),cce);
      continue;
    }
    try {
      if (parentRef == null) {
        WonderlandContext.getCellManager().insertCellInWorld(cellMO);
      }
 else {
        logger.info(""String_Node_Str"" + cellMO.getCellID().toString() + ""String_Node_Str""+ parentRef.get().getCellID().toString()+ ""String_Node_Str"");
        parentRef.get().addChild(cellMO);
        logger.info(""String_Node_Str"" + cellMO.getParent().getCellID().toString());
        Collection<ManagedReference<CellMO>> refs=cellMO.getParent().getAllChildrenRefs();
        Iterator<ManagedReference<CellMO>> it=refs.iterator();
        while (it.hasNext() == true) {
          logger.info(""String_Node_Str"" + it.next().get().getCellID().toString());
        }
        logger.info(""String_Node_Str"" + cellMO.isLive());
      }
    }
 catch (    MultipleParentException excp) {
      logger.log(Level.WARNING,""String_Node_Str"" + ""String_Node_Str"" + cellMO.getName());
      continue;
    }
    ManagedReference<CellMO> cellRef=AppContext.getDataManager().createReference(cellMO);
    this.cellMOMap.put(cellPath,cellRef);
    logger.info(""String_Node_Str"" + cellPath + ""String_Node_Str""+ cellMO.getCellID().toString()+ ""String_Node_Str""+ child.lastModified);
    logger.info(setup.toString());
    CellList newChildren=CellImporterUtils.getWFSChildren(root,cellPath);
    if (newChildren != null) {
      children.addLast(newChildren);
    }
  }
}","/** 
 * Recurisvely loads cells from a given child directory (dir) in the WFS given by root. If this child has any children directories, then add to the children parameter.
 * @param root The root directory of the WFS being loaded
 * @param dir The current directory of children to load
 * @param children A list of child directories remaining to be loaded
 */
private void loadCells(String root,CellList dir,LinkedList<CellList> children){
  Cell childs[]=dir.getChildren();
  if (childs == null) {
    logger.fine(""String_Node_Str"" + dir.getRelativePath());
    return;
  }
  for (  Cell child : childs) {
    logger.info(""String_Node_Str"" + child.name);
    String relativePath=dir.getRelativePath();
    if (relativePath == null) {
      logger.warning(""String_Node_Str"" + child.name);
      continue;
    }
    ManagedReference<CellMO> parentRef=this.getParentCellReference(relativePath);
    CellServerState setup=CellImporterUtils.getWFSCell(root,relativePath,child.name);
    if (setup == null) {
      logger.info(""String_Node_Str"" + relativePath + ""String_Node_Str""+ child.name);
      continue;
    }
    logger.info(setup.toString());
    String cellPath=relativePath + ""String_Node_Str"" + child.name;
    if (relativePath.compareTo(""String_Node_Str"") == 0) {
      cellPath=child.name;
    }
    String className=setup.getServerClassName();
    CellMO cellMO=CellMOFactory.loadCellMO(className);
    if (cellMO == null) {
      logger.warning(""String_Node_Str"" + className);
      continue;
    }
    try {
      cellMO.setServerState(setup);
    }
 catch (    ClassCastException cce) {
      logger.log(Level.WARNING,""String_Node_Str"" + cellMO.getName() + ""String_Node_Str""+ cellMO.getClass(),cce);
      continue;
    }
    try {
      if (parentRef == null) {
        WonderlandContext.getCellManager().insertCellInWorld(cellMO);
      }
 else {
        logger.info(""String_Node_Str"" + cellMO.getCellID().toString() + ""String_Node_Str""+ parentRef.get().getCellID().toString()+ ""String_Node_Str"");
        parentRef.get().addChild(cellMO);
        logger.info(""String_Node_Str"" + cellMO.getParent().getCellID().toString());
        Collection<ManagedReference<CellMO>> refs=cellMO.getParent().getAllChildrenRefs();
        Iterator<ManagedReference<CellMO>> it=refs.iterator();
        while (it.hasNext() == true) {
          logger.info(""String_Node_Str"" + it.next().get().getCellID().toString());
        }
        logger.info(""String_Node_Str"" + cellMO.isLive());
      }
    }
 catch (    MultipleParentException excp) {
      logger.log(Level.WARNING,""String_Node_Str"" + ""String_Node_Str"" + cellMO.getName());
      continue;
    }
    ManagedReference<CellMO> cellRef=AppContext.getDataManager().createReference(cellMO);
    this.cellMOMap.put(cellPath,cellRef);
    logger.info(""String_Node_Str"" + cellPath + ""String_Node_Str""+ cellMO.getCellID().toString()+ ""String_Node_Str""+ child.lastModified);
    logger.info(setup.toString());
    CellList newChildren=CellImporterUtils.getWFSChildren(root,cellPath);
    if (newChildren != null) {
      logger.fine(""String_Node_Str"" + cellPath + ""String_Node_Str""+ ""String_Node_Str""+ newChildren.getChildren());
      children.addLast(newChildren);
    }
  }
}"
45586,"/** 
 * Returns the children of the WFS path. The relativePath argument must never begin with a ""/"".
 */
public static CellList getWFSChildren(String root,String canonicalName){
  try {
    URL url=getURL(WFS_PREFIX + root + ""String_Node_Str""+ canonicalName);
    return CellList.decode(canonicalName,url.openStream());
  }
 catch (  java.lang.Exception excp) {
    LOGGER.log(Level.INFO,""String_Node_Str"" + root + ""String_Node_Str""+ canonicalName,excp);
    return null;
  }
}","/** 
 * Returns the children of the WFS path. The relativePath argument must never begin with a ""/"".
 */
public static CellList getWFSChildren(String root,String canonicalName){
  try {
    URL url=getURL(WFS_PREFIX + root + ""String_Node_Str""+ canonicalName);
    return CellList.decode(canonicalName,url.openStream());
  }
 catch (  java.lang.Exception excp) {
    LOGGER.log(Level.WARNING,""String_Node_Str"" + root + ""String_Node_Str""+ canonicalName,excp);
    return null;
  }
}"
45587,"/** 
 * Returns the children of the root WFS path, given the name of the WFS root.
 */
public static CellList getWFSRootChildren(String root){
  try {
    URL url=getURL(WFS_PREFIX + root + ""String_Node_Str"");
    return CellList.decode(""String_Node_Str"",url.openStream());
  }
 catch (  java.lang.Exception excp) {
    LOGGER.log(Level.INFO,""String_Node_Str"" + root,excp);
    return null;
  }
}","/** 
 * Returns the children of the root WFS path, given the name of the WFS root.
 */
public static CellList getWFSRootChildren(String root){
  try {
    URL url=getURL(WFS_PREFIX + root + ""String_Node_Str"");
    return CellList.decode(""String_Node_Str"",url.openStream());
  }
 catch (  java.lang.Exception excp) {
    LOGGER.log(Level.WARNING,""String_Node_Str"" + root,excp);
    return null;
  }
}"
45588,"/** 
 * Returns the JAXB XML serialization of the cell directory given the name of the root WFS (without the -wfs extension) and the path of the cell within the WFS (without any -wld or -wlc.xml extensions). Returns the XML via an HTTP GET request.
 * @param wfsName The name of the WFS root (no -wfs extension)
 * @param path The relative path of the file (no -wld, -wlc.xml extensions)
 * @return The XML serialization of the cell setup information via HTTP GET.
 */
@GET @Produces(""String_Node_Str"") public Response getCellResource(@PathParam(""String_Node_Str"") String wfsName,@PathParam(""String_Node_Str"") String path){
  Logger logger=WFSManager.getLogger();
  WFSManager wfsm=WFSManager.getWFSManager();
  WFS wfs=wfsm.getWFS(wfsName);
  if (wfs == null) {
    logger.warning(""String_Node_Str"" + wfsName);
    ResponseBuilder rb=Response.status(Response.Status.BAD_REQUEST);
    return rb.build();
  }
  WFSCellDirectory dir=wfs.getRootDirectory();
  if (dir == null) {
    logger.warning(""String_Node_Str"" + wfsName);
    ResponseBuilder rb=Response.status(Response.Status.BAD_REQUEST);
    return rb.build();
  }
  String paths[]=new String[0];
  if (path.compareTo(""String_Node_Str"") != 0) {
    paths=path.split(""String_Node_Str"");
  }
  for (int i=0; i < paths.length; i++) {
    WFSCell cell=dir.getCellByName(paths[i]);
    if (cell == null) {
      logger.info(""String_Node_Str"" + path);
      ResponseBuilder rb=Response.status(Response.Status.BAD_REQUEST);
      return rb.build();
    }
    if ((dir=cell.getCellDirectory()) == null) {
      ResponseBuilder rb=Response.status(Response.Status.BAD_REQUEST);
      return rb.build();
    }
  }
  String names[]=dir.getCellNames();
  if (names == null) {
    logger.info(""String_Node_Str"" + path);
    ResponseBuilder rb=Response.status(Response.Status.BAD_REQUEST);
    return rb.build();
  }
  LinkedList<Cell> list=new LinkedList<Cell>();
  for (  String name : names) {
    WFSCell cell=dir.getCellByName(name);
    if (cell == null) {
      logger.info(""String_Node_Str"" + name);
      continue;
    }
    list.add(new Cell(name,cell.getLastModified()));
  }
  Cell[] childs=list.toArray(new Cell[]{});
  CellList children=new CellList(path,childs);
  try {
    StringWriter sw=new StringWriter();
    children.encode(sw);
    ResponseBuilder rb=Response.ok(sw.toString());
    return rb.build();
  }
 catch (  JAXBException excp) {
    logger.info(""String_Node_Str"" + path + ""String_Node_Str""+ excp.toString());
    ResponseBuilder rb=Response.status(Response.Status.BAD_REQUEST);
    return rb.build();
  }
}","/** 
 * Returns the JAXB XML serialization of the cell directory given the name of the root WFS (without the -wfs extension) and the path of the cell within the WFS (without any -wld or -wlc.xml extensions). Returns the XML via an HTTP GET request.
 * @param wfsName The name of the WFS root (no -wfs extension)
 * @param path The relative path of the file (no -wld, -wlc.xml extensions)
 * @return The XML serialization of the cell setup information via HTTP GET.
 */
@GET @Produces({""String_Node_Str"",""String_Node_Str"",""String_Node_Str""}) public Response getCellResource(@PathParam(""String_Node_Str"") String wfsName,@PathParam(""String_Node_Str"") String path){
  LOGGER.fine(""String_Node_Str"" + wfsName + ""String_Node_Str""+ path);
  WFS wfs=WFSManager.getWFSManager().getWFS(wfsName);
  if (wfs == null) {
    LOGGER.warning(""String_Node_Str"" + wfsName);
    return Response.status(Response.Status.BAD_REQUEST).build();
  }
  WFSCellDirectory dir=wfs.getRootDirectory();
  if (dir == null) {
    LOGGER.warning(""String_Node_Str"" + wfsName);
    return Response.status(Response.Status.BAD_REQUEST).build();
  }
  String paths[]=new String[0];
  if (path.compareTo(""String_Node_Str"") != 0) {
    paths=path.split(""String_Node_Str"");
  }
  for (int i=0; i < paths.length; i++) {
    WFSCell cell=dir.getCellByName(paths[i]);
    if (cell == null) {
      LOGGER.warning(""String_Node_Str"" + path);
      return Response.status(Response.Status.BAD_REQUEST).build();
    }
    dir=cell.getCellDirectory();
    if (dir == null && i < paths.length - 1) {
      LOGGER.warning(""String_Node_Str"" + path);
      return Response.status(Response.Status.BAD_REQUEST).build();
    }
 else     if (dir == null) {
      LOGGER.fine(""String_Node_Str"" + path + ""String_Node_Str"");
      CellList children=new CellList(path,new Cell[]{});
      return Response.ok(children).build();
    }
  }
  String names[]=dir.getCellNames();
  if (names == null) {
    LOGGER.fine(""String_Node_Str"" + path + ""String_Node_Str"");
    CellList children=new CellList(path,new Cell[]{});
    return Response.ok(children).build();
  }
  LOGGER.fine(""String_Node_Str"" + path + ""String_Node_Str""+ names.length);
  LinkedList<Cell> list=new LinkedList<Cell>();
  for (  String name : names) {
    WFSCell cell=dir.getCellByName(name);
    if (cell == null) {
      LOGGER.warning(""String_Node_Str"" + name);
      continue;
    }
    LOGGER.fine(""String_Node_Str"" + name + ""String_Node_Str""+ path);
    list.add(new Cell(name,cell.getLastModified()));
  }
  Cell[] childs=list.toArray(new Cell[]{});
  LOGGER.fine(""String_Node_Str"" + path + ""String_Node_Str""+ childs);
  CellList children=new CellList(path,childs);
  return Response.ok(children).build();
}"
45589,"/** 
 * {@inheritDoc}
 */
public Texture loadTexture(URL location){
  if (logger.isLoggable(Level.INFO)) {
    logger.info(""String_Node_Str"" + location.toExternalForm() + ""String_Node_Str""+ location.getProtocol());
  }
  String evolver=location.getFile();
  boolean isEvolver=evolver.contains(""String_Node_Str"");
  if (isEvolver && location.getProtocol().equalsIgnoreCase(""String_Node_Str"")) {
    evolver=evolver.substring(evolver.indexOf(""String_Node_Str""));
    evolver=evolver.substring(evolver.indexOf('/'));
    try {
      location=new URL(""String_Node_Str"" + location.getHost() + ""String_Node_Str""+ location.getPort()+ ""String_Node_Str""+ evolver);
    }
 catch (    MalformedURLException ex) {
      Logger.getLogger(WonderlandAvatarCache.class.getName()).log(Level.SEVERE,null,ex);
    }
  }
  String urlString=location.toExternalForm();
  if (!isEvolver && location.getProtocol().equalsIgnoreCase(""String_Node_Str"") == true) {
    int assetsIndex=urlString.indexOf(""String_Node_Str"");
    if (assetsIndex != -1) {
      urlString=urlString.substring(assetsIndex);
    }
    URL localURL=null;
    try {
      localURL=new URL(baseURL + urlString);
      return TextureManager.loadTexture(localURL);
    }
 catch (    MalformedURLException excp) {
      logger.log(Level.WARNING,""String_Node_Str"" + baseURL + urlString,excp);
      return null;
    }
  }
  try {
    return TextureManager.loadTexture(location);
  }
 catch (  Exception e) {
    logger.warning(""String_Node_Str"" + location.toExternalForm());
    return null;
  }
}","/** 
 * {@inheritDoc}
 */
public Texture loadTexture(URL location){
  if (logger.isLoggable(Level.INFO)) {
    logger.info(""String_Node_Str"" + location.toExternalForm() + ""String_Node_Str""+ location.getProtocol());
  }
  String evolver=location.getFile();
  boolean isEvolver=evolver.contains(""String_Node_Str"");
  if (isEvolver && location.getProtocol().equalsIgnoreCase(""String_Node_Str"")) {
    evolver=evolver.substring(evolver.indexOf(""String_Node_Str""));
    evolver=evolver.substring(evolver.indexOf('/'));
    try {
      location=new URL(""String_Node_Str"" + location.getHost() + ""String_Node_Str""+ location.getPort()+ ""String_Node_Str""+ evolver);
    }
 catch (    MalformedURLException ex) {
      logger.log(Level.SEVERE,null,ex);
    }
  }
  boolean isEvolverMultimesh=evolver.contains(""String_Node_Str"");
  if (isEvolverMultimesh && location.getProtocol().equalsIgnoreCase(""String_Node_Str"")) {
    int index=evolver.indexOf(""String_Node_Str"");
    if (index != -1) {
      evolver=evolver.substring(evolver.indexOf(""String_Node_Str""));
      evolver=evolver.substring(evolver.indexOf('/'));
    }
    try {
      location=new URL(""String_Node_Str"" + location.getHost() + ""String_Node_Str""+ location.getPort()+ ""String_Node_Str""+ evolver);
    }
 catch (    MalformedURLException ex) {
      logger.log(Level.SEVERE,null,ex);
    }
  }
  String urlString=location.toExternalForm();
  if (!isEvolver && !isEvolverMultimesh && location.getProtocol().equalsIgnoreCase(""String_Node_Str"") == true) {
    int assetsIndex=urlString.indexOf(""String_Node_Str"");
    if (assetsIndex != -1) {
      urlString=urlString.substring(assetsIndex);
    }
    URL localURL=null;
    try {
      localURL=new URL(baseURL + urlString);
      return TextureManager.loadTexture(localURL);
    }
 catch (    MalformedURLException excp) {
      logger.log(Level.WARNING,""String_Node_Str"" + baseURL + urlString,excp);
      return null;
    }
  }
  try {
    return TextureManager.loadTexture(location);
  }
 catch (  Exception e) {
    logger.warning(""String_Node_Str"" + location.toExternalForm());
    return null;
  }
}"
45590,"/** 
 * @{inheritDoc }
 */
@Override public void setServerState(CellComponentServerState serverState){
  super.setServerState(serverState);
  MicrophoneComponentServerState state=(MicrophoneComponentServerState)serverState;
  if (name == null) {
    name=DEFAULT_NAME;
  }
 else {
    name=state.getName();
  }
  String appendName=""String_Node_Str"" + cellRef.get().getCellID();
  if (name.indexOf(appendName) < 0) {
    name+=""String_Node_Str"" + cellRef.get().getCellID();
  }
  volume=state.getVolume();
  fullVolumeArea=state.getFullVolumeArea();
  showBounds=state.getShowBounds();
  activeArea=state.getActiveArea();
  showActiveArea=state.getShowActiveArea();
  LOGGER.info(""String_Node_Str"" + name + ""String_Node_Str""+ volume+ ""String_Node_Str""+ fullVolumeArea+ ""String_Node_Str""+ activeArea);
  LOGGER.info(""String_Node_Str"" + name + ""String_Node_Str""+ volume+ ""String_Node_Str""+ fullVolumeArea+ ""String_Node_Str""+ activeArea);
  addProximityListeners(isLive());
}","/** 
 * @{inheritDoc }
 */
@Override public void setServerState(CellComponentServerState serverState){
  super.setServerState(serverState);
  MicrophoneComponentServerState state=(MicrophoneComponentServerState)serverState;
  setMyName(state);
  volume=state.getVolume();
  fullVolumeArea=state.getFullVolumeArea();
  showBounds=state.getShowBounds();
  activeArea=state.getActiveArea();
  showActiveArea=state.getShowActiveArea();
  LOGGER.info(""String_Node_Str"" + name + ""String_Node_Str""+ volume+ ""String_Node_Str""+ fullVolumeArea+ ""String_Node_Str""+ activeArea);
  addProximityListeners(isLive());
}"
45591,"/** 
 * @{inheritDoc }
 */
@Override public CellComponentServerState getServerState(CellComponentServerState serverState){
  MicrophoneComponentServerState state=(MicrophoneComponentServerState)serverState;
  if (state == null) {
    state=new MicrophoneComponentServerState();
  }
  String appendName=""String_Node_Str"" + cellRef.get().getCellID();
  if (name.indexOf(appendName) < 0) {
    name+=""String_Node_Str"" + cellRef.get().getCellID();
  }
  state.setName(name);
  state.setVolume(volume);
  state.setFullVolumeArea(fullVolumeArea);
  state.setShowBounds(showBounds);
  state.setActiveArea(activeArea);
  state.setShowActiveArea(showActiveArea);
  return super.getServerState(state);
}","/** 
 * @{inheritDoc }
 */
@Override public CellComponentServerState getServerState(CellComponentServerState serverState){
  MicrophoneComponentServerState state=(MicrophoneComponentServerState)serverState;
  if (state == null) {
    state=new MicrophoneComponentServerState();
  }
  setMyName(state);
  state.setName(name);
  state.setVolume(volume);
  state.setFullVolumeArea(fullVolumeArea);
  state.setShowBounds(showBounds);
  state.setActiveArea(activeArea);
  state.setShowActiveArea(showActiveArea);
  return super.getServerState(state);
}"
45592,"@Override public void setClientState(CellComponentClientState clientState){
  super.setClientState(clientState);
  ModelCellComponentClientState state=(ModelCellComponentClientState)clientState;
  setDeployedModelURL(state.getDeployedModelURL());
  collidable=state.isCollisionEnabled();
  pickable=state.isPickingEnabled();
  lightingEnabled=state.isLightingEnabled();
  if (renderer != null) {
    renderer.setCollisionEnabled(collidable);
    renderer.setPickingEnabled(pickable);
    renderer.setLightingEnabled(lightingEnabled);
  }
}","@Override public void setClientState(CellComponentClientState clientState){
  super.setClientState(clientState);
  ModelCellComponentClientState state=(ModelCellComponentClientState)clientState;
  setDeployedModelURL(state.getDeployedModelURL());
  collidable=state.isCollisionEnabled();
  pickable=state.isPickingEnabled();
  lightingEnabled=state.isLightingEnabled();
  backfaceCullingEnabled=state.isBackfaceCullingEnabled();
  if (renderer != null) {
    renderer.setCollisionEnabled(collidable);
    renderer.setPickingEnabled(pickable);
    renderer.setLightingEnabled(lightingEnabled);
    renderer.setBackfaceCullingEnabled(backfaceCullingEnabled);
  }
}"
45593,"/** 
 * Instantiate and return the cell renderer
 * @param type
 * @param cell
 * @return
 */
public CellRenderer getCellRenderer(Cell.RendererType type,Cell cell){
synchronized (this) {
    if (renderer == null) {
      if (deployedModel == null) {
        getDeployedModel();
      }
      renderer=new ModelRenderer(cell,deployedModel);
      renderer.setCollisionEnabled(collidable);
      renderer.setPickingEnabled(pickable);
      renderer.setLightingEnabled(lightingEnabled);
    }
    return renderer;
  }
}","/** 
 * Instantiate and return the cell renderer
 * @param type
 * @param cell
 * @return
 */
public CellRenderer getCellRenderer(Cell.RendererType type,Cell cell){
synchronized (this) {
    if (renderer == null) {
      if (deployedModel == null) {
        getDeployedModel();
      }
      renderer=new ModelRenderer(cell,deployedModel);
      renderer.setCollisionEnabled(collidable);
      renderer.setPickingEnabled(pickable);
      renderer.setLightingEnabled(lightingEnabled);
      renderer.setBackfaceCullingEnabled(backfaceCullingEnabled);
    }
    return renderer;
  }
}"
45594,"public CellComponentServerState clone(CellComponentServerState state){
  ModelCellComponentServerState ret=(ModelCellComponentServerState)state;
  if (ret == null)   ret=new ModelCellComponentServerState();
  ret.deployedModelURL=this.deployedModelURL;
  ret.collidable=this.collidable;
  ret.pickable=this.pickable;
  ret.lightingEnabled=this.lightingEnabled;
  return ret;
}","public CellComponentServerState clone(CellComponentServerState state){
  ModelCellComponentServerState ret=(ModelCellComponentServerState)state;
  if (ret == null)   ret=new ModelCellComponentServerState();
  ret.deployedModelURL=this.deployedModelURL;
  ret.collidable=this.collidable;
  ret.pickable=this.pickable;
  ret.lightingEnabled=this.lightingEnabled;
  ret.backfaceCullingEnabled=this.backfaceCullingEnabled;
  return ret;
}"
45595,"public CellComponentClientState setClientState(ModelCellComponentClientState state){
  state.setDeployedModelURL(deployedModelURL);
  state.setCollisionEnabled(collidable);
  state.setPickingEnabled(pickable);
  state.setLightingEnabled(lightingEnabled);
  return state;
}","public CellComponentClientState setClientState(ModelCellComponentClientState state){
  state.setDeployedModelURL(deployedModelURL);
  state.setCollisionEnabled(collidable);
  state.setPickingEnabled(pickable);
  state.setLightingEnabled(lightingEnabled);
  state.setBackfaceCullingEnabled(backfaceCullingEnabled);
  return state;
}"
45596,"public void contextInitialized(ServletContextEvent sce){
  List<AdminRegistration> registry=new ArrayList<AdminRegistration>();
  AdminRegistration home=new AdminRegistration(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  home.setAbsolute(true);
  home.setPosition(0);
  registry.add(home);
  AdminRegistration runner=new AdminRegistration(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  runner.setFilter(AdminRegistration.ADMIN_FILTER);
  runner.setPosition(1);
  registry.add(runner);
  ServletContext sc=sce.getServletContext();
  sc.setAttribute(AdminRegistration.ADMIN_REGISTRY_PROP,registry);
}","public void contextInitialized(ServletContextEvent sce){
  List<AdminRegistration> registry=new ArrayList<AdminRegistration>();
  AdminRegistration home=new AdminRegistration(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  home.setAbsolute(true);
  home.setPosition(0);
  registry.add(home);
  AdminRegistration runner=new AdminRegistration(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  runner.setFilter(AdminRegistration.ADMIN_FILTER);
  runner.setPosition(1);
  registry.add(runner);
  AdminRegistration modules=new AdminRegistration(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  modules.setFilter(AdminRegistration.ADMIN_FILTER);
  registry.add(modules);
  ServletContext sc=sce.getServletContext();
  sc.setAttribute(AdminRegistration.ADMIN_REGISTRY_PROP,registry);
}"
45597,"/** 
 * Returns the children of the WFS path. The relativePath argument must never begin with a ""/"".
 */
public static CellList getWFSChildren(String root,String canonicalName){
  try {
    URL url=getURL(WFS_PREFIX + root + ""String_Node_Str""+ canonicalName);
    return CellList.decode(canonicalName,url.openStream());
  }
 catch (  java.lang.Exception excp) {
    LOGGER.log(Level.WARNING,""String_Node_Str"" + root + ""String_Node_Str""+ canonicalName,excp);
    return null;
  }
}","/** 
 * Returns the children of the WFS path. The relativePath argument must never begin with a ""/"".
 */
public static CellList getWFSChildren(String root,String canonicalName){
  try {
    URL url=getURL(WFS_PREFIX + root + ""String_Node_Str""+ canonicalName);
    return CellList.decode(canonicalName,url.openStream());
  }
 catch (  java.lang.Exception excp) {
    LOGGER.log(Level.INFO,""String_Node_Str"" + root + ""String_Node_Str""+ canonicalName,excp);
    return null;
  }
}"
45598,"/** 
 * Returns the children of the root WFS path, given the name of the WFS root.
 */
public static CellList getWFSRootChildren(String root){
  try {
    URL url=getURL(WFS_PREFIX + root + ""String_Node_Str"");
    return CellList.decode(""String_Node_Str"",url.openStream());
  }
 catch (  java.lang.Exception excp) {
    LOGGER.log(Level.WARNING,""String_Node_Str"" + root,excp);
    return null;
  }
}","/** 
 * Returns the children of the root WFS path, given the name of the WFS root.
 */
public static CellList getWFSRootChildren(String root){
  try {
    URL url=getURL(WFS_PREFIX + root + ""String_Node_Str"");
    return CellList.decode(""String_Node_Str"",url.openStream());
  }
 catch (  java.lang.Exception excp) {
    LOGGER.log(Level.INFO,""String_Node_Str"" + root,excp);
    return null;
  }
}"
45599,"public void selectForInput(boolean selected){
  if (selectedForInput == selected)   return;
  if (avatarCharacter == null) {
    logger.warning(""String_Node_Str"");
    Thread.dumpStack();
    return;
  }
  logger.info(""String_Node_Str"" + selected);
  selectedForInput=selected;
  if (avatarCharacter != null) {
    WorldManager wm=ClientContextJME.getWorldManager();
    ((WlAvatarContext)avatarCharacter.getContext()).getBehaviorManager().setEnable(false);
    if (controlScheme == null && selectedForInput) {
      controlScheme=new DefaultCharacterControls(ClientContextJME.getWorldManager());
      ((AvatarControls)wm.getUserData(AvatarControls.class)).setDefault(controlScheme);
    }
    setCollisionController(avatarCharacter);
    if (selectedForInput) {
      avatarCharacter.getContext().getController().addCharacterMotionListener(characterMotionListener);
      avatarCharacter.getContext().addGameContextListener(gameContextListener);
      avatarCharacter.selectForInput();
      controlScheme.addCharacterToTeam(avatarCharacter);
      controlScheme.setCharacter(avatarCharacter);
      ProcessorCollectionComponent pcc=avatarCharacter.getComponent(ProcessorCollectionComponent.class);
      ProcessorComponent characterProcessor=null;
      ProcessorComponent characterAnimationProcessor=null;
      for (      ProcessorComponent pc : pcc.getProcessors()) {
        if (pc instanceof CharacterProcessor)         characterProcessor=pc;
 else         if (pc instanceof CharacterAnimationProcessor) {
          characterAnimationProcessor=pc;
          break;
        }
      }
      cameraChainedProcessor=null;
      if (characterAnimationProcessor != null) {
        cameraChainedProcessor=characterAnimationProcessor;
      }
 else       if (characterProcessor != null)       cameraChainedProcessor=characterProcessor;
      if (cameraChainedProcessor != null) {
        cameraChainedProcessor.addToChain(ViewManager.getViewManager().getCameraProcessor());
        cameraChainedProcessor.setRunInRenderer(true);
      }
    }
 else {
      avatarCharacter.getContext().getController().removeCharacterMotionListener(characterMotionListener);
      avatarCharacter.getContext().removeGameContextListener(gameContextListener);
      if (controlScheme != null) {
        controlScheme.clearCharacterTeam();
      }
      if (cameraChainedProcessor != null) {
        cameraChainedProcessor.removeFromChain(ViewManager.getViewManager().getCameraProcessor());
        cameraChainedProcessor=null;
      }
    }
  }
 else {
    logger.severe(""String_Node_Str"");
  }
}","public void selectForInput(boolean selected){
  if (selectedForInput == selected)   return;
  if (avatarCharacter == null) {
    logger.warning(""String_Node_Str"");
    Thread.dumpStack();
    return;
  }
  logger.info(""String_Node_Str"" + selected);
  selectedForInput=selected;
  if (avatarCharacter != null) {
    WorldManager wm=ClientContextJME.getWorldManager();
    ((WlAvatarContext)avatarCharacter.getContext()).getBehaviorManager().setEnable(false);
    if (controlScheme == null && selectedForInput) {
      controlScheme=new DefaultCharacterControls(ClientContextJME.getWorldManager());
      ((AvatarControls)wm.getUserData(AvatarControls.class)).setDefault(controlScheme);
    }
    setCollisionController(avatarCharacter);
    if (selectedForInput) {
      avatarCharacter.getContext().getController().addCharacterMotionListener(characterMotionListener);
      avatarCharacter.getContext().addGameContextListener(gameContextListener);
      avatarCharacter.selectForInput();
      controlScheme.addCharacterToTeam(avatarCharacter);
      controlScheme.setCharacter(avatarCharacter);
      ProcessorCollectionComponent pcc=avatarCharacter.getComponent(ProcessorCollectionComponent.class);
      ProcessorComponent characterProcessor=null;
      ProcessorComponent characterAnimationProcessor=null;
      for (      ProcessorComponent pc : pcc.getProcessors()) {
        if (pc instanceof CharacterProcessor)         characterProcessor=pc;
 else         if (pc instanceof CharacterAnimationProcessor) {
          characterAnimationProcessor=pc;
          break;
        }
      }
      cameraChainedProcessor=null;
      if (characterAnimationProcessor != null) {
        cameraChainedProcessor=characterAnimationProcessor;
      }
 else       if (characterProcessor != null)       cameraChainedProcessor=characterProcessor;
      if (cameraChainedProcessor != null) {
        cameraChainedProcessor.addToChain(ViewManager.getViewManager().getCameraProcessor());
        cameraChainedProcessor.setRunInRenderer(true);
      }
      avatarCharacter.getJScene().setCullHint(CullHint.Never);
    }
 else {
      avatarCharacter.getContext().getController().removeCharacterMotionListener(characterMotionListener);
      avatarCharacter.getContext().removeGameContextListener(gameContextListener);
      if (controlScheme != null) {
        controlScheme.clearCharacterTeam();
      }
      if (cameraChainedProcessor != null) {
        cameraChainedProcessor.removeFromChain(ViewManager.getViewManager().getCameraProcessor());
        cameraChainedProcessor=null;
      }
      avatarCharacter.getJScene().setCullHint(CullHint.Dynamic);
    }
  }
 else {
    logger.severe(""String_Node_Str"");
  }
}"
45600,"@Override public void computeEvent(Event evtIn){
synchronized (this) {
    evt=(AvatarCollisionChangeRequestEvent)evtIn;
    if (collisionController != null) {
      collisionController.setCollisionResponseEnabled(evt.isCollisionResponseEnabled());
      collisionController.setGravityEnabled(evt.isGravityEnabled());
    }
  }
}","@Override public void computeEvent(Event evtIn){
}"
45601,"@Override public void commitEvent(Event event){
}","@Override public void commitEvent(Event event){
  if (event instanceof AvatarNameEvent) {
    AvatarNameEvent e=(AvatarNameEvent)event;
    NameTagNode nameTagNode=getNameTagNode();
    if (nameTagNode != null && e.getUsername().equals(username) == true) {
      nameTagNode.setNameTag(e.getEventType(),username,e.getUsernameAlias());
    }
  }
 else   if (event instanceof AvatarRendererChangeRequestEvent) {
    handleAvatarRendererChangeRequest((AvatarRendererChangeRequestEvent)event);
  }
}"
45602,"public AvatarImiJME(Cell cell){
  super(cell);
  assert(cell != null);
  final Cell c=cell;
  AvatarConfigComponent comp=cell.getComponent(AvatarConfigComponent.class);
  comp.addAvatarConfigChangeListener(new AvatarChangeListener());
  if (cell instanceof AvatarCell)   username=((AvatarCell)cell).getIdentity().getUsername();
 else   username=""String_Node_Str"";
  characterMotionListener=new CharacterMotionListener(){
    Vector3f prevTrans;
    PMatrix prevRot;
    public void transformUpdate(    Vector3f translation,    PMatrix rotation){
      if (logger.isLoggable(Level.FINEST)) {
        logger.finest(""String_Node_Str"" + prevTrans + ""String_Node_Str""+ translation+ ""String_Node_Str""+ prevRot+ ""String_Node_Str""+ rotation);
      }
      if (prevTrans == null || !Math3DUtils.epsilonEquals(prevTrans,translation,0.001f) || prevRot == null || !prevRot.epsilonEquals(rotation,0.001f)) {
        ((MovableAvatarComponent)c.getComponent(MovableComponent.class)).localMoveRequest(new CellTransform(rotation.getRotation(),translation));
        prevTrans=translation.clone();
        prevRot=new PMatrix(rotation);
      }
    }
  }
;
  gameContextListener=new GameContextListener(){
    public void trigger(    boolean pressed,    int trigger,    Vector3f translation,    Quaternion rotation){
synchronized (this) {
        currentTrigger=trigger;
        currentPressed=pressed;
      }
      GameState state=avatarCharacter.getContext().getCurrentState();
      String animationName=null;
      if (state instanceof CycleActionState) {
        animationName=avatarCharacter.getContext().getState(CycleActionState.class).getAnimationName();
      }
      if (c.getComponent(MovableComponent.class) == null)       logger.warning(""String_Node_Str"");
 else       ((MovableAvatarComponent)c.getComponent(MovableComponent.class)).localMoveRequest(new CellTransform(rotation,translation),trigger,pressed,animationName,null);
    }
  }
;
  ClientContext.getInputManager().addGlobalEventListener(new EventClassListener(){
    private Class[] consumeClasses=new Class[]{AvatarRendererChangeRequestEvent.class,AvatarNameEvent.class};
    @Override public Class[] eventClassesToConsume(){
      return consumeClasses;
    }
    @Override public void commitEvent(    Event event){
      if (event instanceof AvatarNameEvent) {
        AvatarNameEvent e=(AvatarNameEvent)event;
        NameTagNode nameTagNode=getNameTagNode();
        if (nameTagNode != null && e.getUsername().equals(username) == true) {
          nameTagNode.setNameTag(e.getEventType(),username,e.getUsernameAlias());
        }
      }
 else       if (event instanceof AvatarRendererChangeRequestEvent) {
        handleAvatarRendererChangeRequest((AvatarRendererChangeRequestEvent)event);
      }
    }
    @Override public void computeEvent(    Event evtIn){
    }
  }
);
  collisionChangeRequestListener=new CollisionChangeRequestListener();
  ClientContext.getInputManager().addGlobalEventListener(collisionChangeRequestListener);
}","public AvatarImiJME(Cell cell){
  super(cell);
  assert(cell != null);
  final Cell c=cell;
  AvatarConfigComponent comp=cell.getComponent(AvatarConfigComponent.class);
  comp.addAvatarConfigChangeListener(new AvatarChangeListener());
  if (cell instanceof AvatarCell)   username=((AvatarCell)cell).getIdentity().getUsername();
 else   username=""String_Node_Str"";
  characterMotionListener=new CharacterMotionListener(){
    Vector3f prevTrans;
    PMatrix prevRot;
    public void transformUpdate(    Vector3f translation,    PMatrix rotation){
      if (logger.isLoggable(Level.FINEST)) {
        logger.finest(""String_Node_Str"" + prevTrans + ""String_Node_Str""+ translation+ ""String_Node_Str""+ prevRot+ ""String_Node_Str""+ rotation);
      }
      if (prevTrans == null || !Math3DUtils.epsilonEquals(prevTrans,translation,0.001f) || prevRot == null || !prevRot.epsilonEquals(rotation,0.001f)) {
        ((MovableAvatarComponent)c.getComponent(MovableComponent.class)).localMoveRequest(new CellTransform(rotation.getRotation(),translation));
        prevTrans=translation.clone();
        prevRot=new PMatrix(rotation);
      }
    }
  }
;
  gameContextListener=new GameContextListener(){
    public void trigger(    boolean pressed,    int trigger,    Vector3f translation,    Quaternion rotation){
synchronized (this) {
        currentTrigger=trigger;
        currentPressed=pressed;
      }
      GameState state=avatarCharacter.getContext().getCurrentState();
      String animationName=null;
      if (state instanceof CycleActionState) {
        animationName=avatarCharacter.getContext().getState(CycleActionState.class).getAnimationName();
      }
      if (c.getComponent(MovableComponent.class) == null)       logger.warning(""String_Node_Str"");
 else       ((MovableAvatarComponent)c.getComponent(MovableComponent.class)).localMoveRequest(new CellTransform(rotation,translation),trigger,pressed,animationName,null);
    }
  }
;
}"
45603,"/** 
 * {@inheritDoc}
 */
@Override public void setStatus(CellStatus status,boolean increasing){
  super.setStatus(status,increasing);
  WlAvatarCharacter pendingAvatar=null;
  logger.info(""String_Node_Str"" + status + ""String_Node_Str""+ increasing);
  if (status == CellStatus.ACTIVE && increasing == true) {
    if (cellMoveListener != null) {
      MovableComponent mc=cell.getComponent(MovableComponent.class);
      if (mc == null) {
        logger.severe(""String_Node_Str"" + ((AvatarCell)cell).getName());
      }
 else {
        mc.removeServerCellMoveListener(cellMoveListener);
      }
      cellMoveListener=null;
    }
    if (avatarCharacter == null) {
      AvatarConfigComponent configComp=cell.getComponent(AvatarConfigComponent.class);
      AvatarConfigInfo avatarConfigInfo=null;
      if (configComp != null) {
        avatarConfigInfo=configComp.getAvatarConfigInfo();
      }
      logger.info(""String_Node_Str"" + avatarConfigInfo);
      pendingAvatar=loadAvatar(avatarConfigInfo);
    }
 else {
      ClientContextJME.getWorldManager().removeEntity(avatarCharacter);
      pendingAvatar=null;
    }
    logger.info(""String_Node_Str"");
    changeAvatar(pendingAvatar);
    if (cellMoveListener == null) {
      cellMoveListener=new CellMoveListener(){
        public void cellMoved(        CellTransform transform,        CellMoveSource source){
          if (source == CellMoveSource.REMOTE) {
            if (avatarCharacter != null) {
              if (avatarCharacter.getModelInst() == null) {
                logger.severe(""String_Node_Str"");
                Thread.dumpStack();
                return;
              }
              avatarCharacter.getModelInst().setTransform(new PTransform(transform.getRotation(null),transform.getTranslation(null),new Vector3f(1,1,1)));
            }
          }
        }
      }
;
    }
    cell.getComponent(MovableComponent.class).addServerCellMoveListener(cellMoveListener);
  }
}","/** 
 * {@inheritDoc}
 */
@Override public void setStatus(CellStatus status,boolean increasing){
  super.setStatus(status,increasing);
  WlAvatarCharacter pendingAvatar=null;
  logger.info(""String_Node_Str"" + status + ""String_Node_Str""+ increasing);
  if (status == CellStatus.ACTIVE && increasing == true) {
    if (cellMoveListener != null) {
      MovableComponent mc=cell.getComponent(MovableComponent.class);
      if (mc == null) {
        logger.severe(""String_Node_Str"" + ((AvatarCell)cell).getName());
      }
 else {
        mc.removeServerCellMoveListener(cellMoveListener);
      }
      cellMoveListener=null;
    }
    if (avatarCharacter == null) {
      AvatarConfigComponent configComp=cell.getComponent(AvatarConfigComponent.class);
      AvatarConfigInfo avatarConfigInfo=null;
      if (configComp != null) {
        avatarConfigInfo=configComp.getAvatarConfigInfo();
      }
      logger.info(""String_Node_Str"" + avatarConfigInfo);
      pendingAvatar=loadAvatar(avatarConfigInfo);
    }
 else {
      ClientContextJME.getWorldManager().removeEntity(avatarCharacter);
      pendingAvatar=null;
    }
    logger.info(""String_Node_Str"");
    changeAvatar(pendingAvatar);
    if (cellMoveListener == null) {
      cellMoveListener=new CellMoveListener(){
        public void cellMoved(        CellTransform transform,        CellMoveSource source){
          if (source == CellMoveSource.REMOTE) {
            if (avatarCharacter != null) {
              if (avatarCharacter.getModelInst() == null) {
                logger.severe(""String_Node_Str"");
                Thread.dumpStack();
                return;
              }
              avatarCharacter.getModelInst().setTransform(new PTransform(transform.getRotation(null),transform.getTranslation(null),new Vector3f(1,1,1)));
            }
          }
        }
      }
;
    }
    cell.getComponent(MovableComponent.class).addServerCellMoveListener(cellMoveListener);
    avatarUIEventListener=new AvatarUIEventListener();
    ClientContext.getInputManager().addGlobalEventListener(avatarUIEventListener);
    collisionChangeRequestListener=new CollisionChangeRequestListener();
    ClientContext.getInputManager().addGlobalEventListener(collisionChangeRequestListener);
  }
 else   if (status == CellStatus.DISK && !increasing) {
    ClientContext.getInputManager().removeGlobalEventListener(avatarUIEventListener);
    ClientContext.getInputManager().removeGlobalEventListener(collisionChangeRequestListener);
    cell.getComponent(MovableComponent.class).removeServerCellMoveListener(cellMoveListener);
    avatarUIEventListener=null;
    cellMoveListener=null;
    collisionChangeRequestListener=null;
  }
}"
45604,"@Override protected void setStatus(CellStatus status,boolean increasing){
  super.setStatus(status,increasing);
switch (status) {
case DISK:
    if (msgReceiver != null) {
      channelComp.removeMessageReceiver(AudioTreatmentDoneMessage.class);
      channelComp.removeMessageReceiver(AudioTreatmentEndedMessage.class);
      channelComp.removeMessageReceiver(AudioTreatmentEstablishedMessage.class);
      channelComp.removeMessageReceiver(AudioTreatmentMenuChangeMessage.class);
      channelComp.removeMessageReceiver(AudioTreatmentRequestMessage.class);
      channelComp.removeMessageReceiver(AudioVolumeMessage.class);
      msgReceiver=null;
    }
  break;
case ACTIVE:
if (increasing) {
  if (msgReceiver == null) {
    msgReceiver=new ChannelComponent.ComponentMessageReceiver(){
      public void messageReceived(      CellMessage message){
        receive(message);
      }
    }
;
    channelComp=cell.getComponent(ChannelComponent.class);
    channelComp.addMessageReceiver(AudioTreatmentDoneMessage.class,msgReceiver);
    channelComp.addMessageReceiver(AudioTreatmentEndedMessage.class,msgReceiver);
    channelComp.addMessageReceiver(AudioTreatmentEstablishedMessage.class,msgReceiver);
    channelComp.addMessageReceiver(AudioTreatmentMenuChangeMessage.class,msgReceiver);
    channelComp.addMessageReceiver(AudioTreatmentRequestMessage.class,msgReceiver);
    channelComp.addMessageReceiver(AudioVolumeMessage.class,msgReceiver);
  }
  if (menuItemAdded == false) {
    menuItemAdded=true;
    if (playWhen.equals(PlayWhen.ALWAYS)) {
      addMenuItems(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
      ;
    }
 else {
      addMenuItems(new String[]{""String_Node_Str"",""String_Node_Str""});
    }
  }
}
break;
}
}","@Override protected void setStatus(CellStatus status,boolean increasing){
  super.setStatus(status,increasing);
switch (status) {
case DISK:
case INACTIVE:
    if (msgReceiver == null) {
      return;
    }
  channelComp.removeMessageReceiver(AudioTreatmentDoneMessage.class);
channelComp.removeMessageReceiver(AudioTreatmentEndedMessage.class);
channelComp.removeMessageReceiver(AudioTreatmentEstablishedMessage.class);
channelComp.removeMessageReceiver(AudioTreatmentMenuChangeMessage.class);
channelComp.removeMessageReceiver(AudioTreatmentRequestMessage.class);
channelComp.removeMessageReceiver(AudioVolumeMessage.class);
break;
case ACTIVE:
if (increasing) {
if (msgReceiver == null) {
msgReceiver=new ChannelComponent.ComponentMessageReceiver(){
public void messageReceived(CellMessage message){
receive(message);
}
}
;
channelComp=cell.getComponent(ChannelComponent.class);
channelComp.addMessageReceiver(AudioTreatmentDoneMessage.class,msgReceiver);
channelComp.addMessageReceiver(AudioTreatmentEndedMessage.class,msgReceiver);
channelComp.addMessageReceiver(AudioTreatmentEstablishedMessage.class,msgReceiver);
channelComp.addMessageReceiver(AudioTreatmentMenuChangeMessage.class,msgReceiver);
channelComp.addMessageReceiver(AudioTreatmentRequestMessage.class,msgReceiver);
channelComp.addMessageReceiver(AudioVolumeMessage.class,msgReceiver);
}
if (menuItemAdded == false) {
menuItemAdded=true;
if (playWhen.equals(PlayWhen.ALWAYS)) {
addMenuItems(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
;
}
 else {
addMenuItems(new String[]{""String_Node_Str"",""String_Node_Str""});
}
}
}
break;
}
}"
45605,"/** 
 * @{inheritDoc }
 */
public void open(){
  CellServerState state=editor.getCellServerState();
  AudioTreatmentComponentServerState compState=(AudioTreatmentComponentServerState)state.getComponentServerState(AudioTreatmentComponentServerState.class);
  if (state == null) {
    return;
  }
  originalGroupId=compState.getGroupId();
  String[] treatmentList=compState.getTreatments();
  originalTreatmentType=compState.getTreatmentType();
  treatmentType=originalTreatmentType;
  originalTreatments=""String_Node_Str"";
  for (int i=0; i < treatmentList.length; i++) {
    String treatment=treatmentList[i];
    if (treatment.length() == 0) {
      break;
    }
    originalTreatments+=treatment;
    break;
  }
  originalTreatments=originalTreatments.trim();
  originalVolume=VolumeUtil.getClientVolume(compState.getVolume());
  originalPlayWhen=compState.getPlayWhen();
  playWhen=originalPlayWhen;
  originalPlayOnce=compState.getPlayOnce();
  originalExtentRadius=(float)compState.getExtent();
  extentRadius=originalExtentRadius;
  originalFullVolumeAreaPercent=(float)compState.getFullVolumeAreaPercent();
  originalDistanceAttenuated=compState.getDistanceAttenuated();
  distanceAttenuated=originalDistanceAttenuated;
  originalFalloff=(int)compState.getFalloff();
  originalUseCellBounds=compState.getUseCellBounds();
  BoundingVolume bounds=editor.getCell().getLocalBounds();
  if (originalUseCellBounds == true && bounds instanceof BoundingBox) {
    originalDistanceAttenuated=false;
    distanceAttenuated=false;
  }
  originalShowBounds=compState.getShowBounds();
  restore();
  if (currentCell == null) {
    currentCell=editor.getCell();
    AudioTreatmentComponent component=currentCell.getComponent(AudioTreatmentComponent.class);
    component.addTreatmentStatusListener(this);
  }
}","/** 
 * @{inheritDoc }
 */
public void open(){
  CellServerState state=editor.getCellServerState();
  AudioTreatmentComponentServerState compState=(AudioTreatmentComponentServerState)state.getComponentServerState(AudioTreatmentComponentServerState.class);
  if (state == null || compState == null) {
    return;
  }
  originalGroupId=compState.getGroupId();
  String[] treatmentList=compState.getTreatments();
  originalTreatmentType=compState.getTreatmentType();
  treatmentType=originalTreatmentType;
  originalTreatments=""String_Node_Str"";
  for (int i=0; i < treatmentList.length; i++) {
    String treatment=treatmentList[i];
    if (treatment.length() == 0) {
      break;
    }
    originalTreatments+=treatment;
    break;
  }
  originalTreatments=originalTreatments.trim();
  originalVolume=VolumeUtil.getClientVolume(compState.getVolume());
  originalPlayWhen=compState.getPlayWhen();
  playWhen=originalPlayWhen;
  originalPlayOnce=compState.getPlayOnce();
  originalExtentRadius=(float)compState.getExtent();
  extentRadius=originalExtentRadius;
  originalFullVolumeAreaPercent=(float)compState.getFullVolumeAreaPercent();
  originalDistanceAttenuated=compState.getDistanceAttenuated();
  distanceAttenuated=originalDistanceAttenuated;
  originalFalloff=(int)compState.getFalloff();
  originalUseCellBounds=compState.getUseCellBounds();
  BoundingVolume bounds=editor.getCell().getLocalBounds();
  if (originalUseCellBounds == true && bounds instanceof BoundingBox) {
    originalDistanceAttenuated=false;
    distanceAttenuated=false;
  }
  originalShowBounds=compState.getShowBounds();
  restore();
  if (currentCell == null) {
    currentCell=editor.getCell();
    AudioTreatmentComponent component=currentCell.getComponent(AudioTreatmentComponent.class);
    if (component != null) {
      component.addTreatmentStatusListener(this);
    }
  }
}"
45606,"/** 
 * Set the status of this cell Cell states DISK - Cell is on disk with no memory footprint INACTIVE - Cell object is in memory with bounds initialized, NO geometry is loaded INACTIVE - All cell data is in memory ACTIVE - Cell is within the avatars proximity bounds VISIBLE - Cell is in the view frustum The system guarantees that if a change is made between non adjacent status, say from INACTIVE to VISIBLE that setStatus will automatically be called for the intermediate values. If you overload this method in your own class you must call super.setStatus(...) as the first operation in your method. Note users should not call this method directly, it should only be called from implementations of the cache.
 * @param status the cell status
 * @param increasing indicates if the status is increasing
 */
protected void setStatus(CellStatus status,boolean increasing){
synchronized (statusLock) {
    if (status == CellStatus.INACTIVE && increasing) {
      resolveAutoComponentAnnotationsForCell();
      CellComponent[] compList=getComponentsArray();
      for (      CellComponent c : compList) {
        resolveAutoComponentAnnotationsForComponents(c);
      }
    }
    currentStatus=status;
    for (    CellComponent component : getComponentsArray()) {
      component.setComponentStatus(status,increasing);
    }
    for (    CellRenderer renderer : getCellRenderers()) {
      setRendererStatus(renderer,status);
    }
switch (status) {
case DISK:
      if (!increasing) {
        if (transformChangeListeners != null) {
          transformChangeListeners.clear();
        }
        ChannelComponent channel=getComponent(ChannelComponent.class);
        if (channel != null) {
          channel.removeMessageReceiver(CellClientStateMessage.class);
          channel.removeMessageReceiver(CellClientComponentMessage.class);
        }
        clientStateReceiver=null;
        componentReceiver=null;
synchronized (components) {
          components.clear();
        }
      }
    break;
case ACTIVE:
  if (increasing && clientStateReceiver == null) {
    clientStateReceiver=new CellClientStateMessageReceiver(this);
    componentReceiver=new CellComponentMessageReceiver(this);
    ChannelComponent channel=getComponent(ChannelComponent.class);
    if (channel != null) {
      channel.addMessageReceiver(CellClientStateMessage.class,clientStateReceiver);
      channel.addMessageReceiver(CellClientComponentMessage.class,componentReceiver);
    }
    try {
      createCellRendererImpl(ClientContext.getRendererType());
    }
 catch (    Exception e) {
      logger.log(Level.SEVERE,""String_Node_Str"" + getClass().getName(),e);
    }
  }
break;
}
}
}","/** 
 * Set the status of this cell Cell states DISK - Cell is on disk with no memory footprint INACTIVE - Cell object is in memory with bounds initialized, NO geometry is loaded INACTIVE - All cell data is in memory ACTIVE - Cell is within the avatars proximity bounds VISIBLE - Cell is in the view frustum The system guarantees that if a change is made between non adjacent status, say from INACTIVE to VISIBLE that setStatus will automatically be called for the intermediate values. If you overload this method in your own class you must call super.setStatus(...) as the first operation in your method. Note users should not call this method directly, it should only be called from implementations of the cache.
 * @param status the cell status
 * @param increasing indicates if the status is increasing
 */
protected void setStatus(CellStatus status,boolean increasing){
synchronized (statusLock) {
    if (status == CellStatus.INACTIVE && increasing) {
      resolveAutoComponentAnnotationsForCell();
      CellComponent[] compList=getComponentsArray();
      for (      CellComponent c : compList) {
        resolveAutoComponentAnnotationsForComponents(c);
      }
    }
    currentStatus=status;
    for (    CellComponent component : getComponentsArray()) {
      component.setComponentStatus(status,increasing);
    }
    for (    CellRenderer renderer : getCellRenderers()) {
      setRendererStatus(renderer,status);
    }
switch (status) {
case DISK:
      if (!increasing) {
        if (transformChangeListeners != null) {
          transformChangeListeners.clear();
        }
        ChannelComponent channel=getComponent(ChannelComponent.class);
        if (channel != null) {
          channel.removeMessageReceiver(CellClientStateMessage.class);
          channel.removeMessageReceiver(CellClientComponentMessage.class);
        }
        clientStateReceiver=null;
        componentReceiver=null;
synchronized (components) {
          components.clear();
        }
synchronized (cellRenderers) {
          cellRenderers.clear();
        }
      }
    break;
case ACTIVE:
  if (increasing && clientStateReceiver == null) {
    clientStateReceiver=new CellClientStateMessageReceiver(this);
    componentReceiver=new CellComponentMessageReceiver(this);
    ChannelComponent channel=getComponent(ChannelComponent.class);
    if (channel != null) {
      channel.addMessageReceiver(CellClientStateMessage.class,clientStateReceiver);
      channel.addMessageReceiver(CellClientComponentMessage.class,componentReceiver);
    }
    try {
      createCellRendererImpl(ClientContext.getRendererType());
    }
 catch (    Exception e) {
      logger.log(Level.SEVERE,""String_Node_Str"" + getClass().getName(),e);
    }
  }
break;
}
}
}"
45607,"/** 
 * Load model from file
 * @param origFile
 */
ImportedModel loadModel(ImportSettings settings) throws IOException {
  Node rootBG=new Node();
  URL url=settings.getModelURL();
  if (url.getProtocol().equalsIgnoreCase(""String_Node_Str"")) {
    lastModelDir=new File(url.getFile()).getParentFile();
  }
  Node modelBG=null;
  ModelLoader modelLoader=LoaderManager.getLoaderManager().getLoader(url);
  LOGGER.fine(""String_Node_Str"" + modelLoader);
  if (modelLoader == null) {
    String urlString=url.toExternalForm();
    String fileExtension=FileUtils.getFileExtension(urlString);
    String message=BUNDLE.getString(""String_Node_Str"");
    message=MessageFormat.format(message,fileExtension);
    JOptionPane.showMessageDialog(null,message);
    return null;
  }
  ImportedModel loadedModel=modelLoader.importModel(settings);
  modelBG=loadedModel.getModelBG();
  rootBG.attachChild(modelBG);
  WorldManager wm=ClientContextJME.getWorldManager();
  RenderManager renderManager=wm.getRenderManager();
  ZBufferState buf=(ZBufferState)renderManager.createRendererState(RenderState.RS_ZBUFFER);
  buf.setEnabled(true);
  buf.setFunction(ZBufferState.TestFunction.LessThanOrEqualTo);
  MaterialState matState=(MaterialState)renderManager.createRendererState(RenderState.RS_MATERIAL);
  rootBG.setRenderState(matState);
  rootBG.setRenderState(buf);
  Entity entity=new Entity(loadedModel.getWonderlandName());
  RenderComponent scene=renderManager.createRenderComponent(rootBG);
  entity.addComponent(RenderComponent.class,scene);
  entity.addComponent(TransformProcessorComponent.class,new TransformProcessorComponent(wm,modelBG,rootBG));
  wm.addEntity(entity);
  loadedModel.setEntity(entity);
  return loadedModel;
}","/** 
 * Load model from file
 * @param origFile
 */
ImportedModel loadModel(ImportSettings settings) throws IOException {
  Node rootBG=new Node();
  URL url=settings.getModelURL();
  if (url.getProtocol().equalsIgnoreCase(""String_Node_Str"")) {
    lastModelDir=new File(url.getFile()).getParentFile();
  }
  Node modelBG=null;
  ModelLoader modelLoader=LoaderManager.getLoaderManager().getLoader(url);
  LOGGER.fine(""String_Node_Str"" + modelLoader);
  if (modelLoader == null) {
    String urlString=url.toExternalForm();
    String fileExtension=FileUtils.getFileExtension(urlString);
    String message=BUNDLE.getString(""String_Node_Str"");
    message=MessageFormat.format(message,fileExtension);
    JOptionPane.showMessageDialog(null,message);
    return null;
  }
  ImportedModel loadedModel=modelLoader.importModel(settings);
  modelBG=loadedModel.getModelBG();
  rootBG.attachChild(modelBG);
  WorldManager wm=ClientContextJME.getWorldManager();
  RenderManager renderManager=wm.getRenderManager();
  ZBufferState buf=(ZBufferState)renderManager.createRendererState(RenderState.RS_ZBUFFER);
  buf.setEnabled(true);
  buf.setFunction(ZBufferState.TestFunction.LessThanOrEqualTo);
  MaterialState matState=(MaterialState)renderManager.createRendererState(RenderState.RS_MATERIAL);
  rootBG.setRenderState(matState);
  rootBG.setRenderState(buf);
  Entity entity=new Entity(loadedModel.getWonderlandName());
  RenderComponent scene=renderManager.createRenderComponent(rootBG);
  entity.addComponent(RenderComponent.class,scene);
  scene.setLightingEnabled(loadedModel.getImportSettings().isLightingEnabled());
  entity.addComponent(TransformProcessorComponent.class,new TransformProcessorComponent(wm,modelBG,rootBG));
  wm.addEntity(entity);
  loadedModel.setEntity(entity);
  return loadedModel;
}"
45608,"private void AnswerButtonActionPerformed(java.awt.event.ActionEvent evt){
  logger.info(""String_Node_Str"");
  AddHUDPanel addHUDPanel=new AddHUDPanel(client,session,myPresenceInfo,caller,group,Mode.IN_PROGRESS);
  HUD mainHUD=HUDManagerFactory.getHUDManager().getHUD(""String_Node_Str"");
  addComponent=mainHUD.createComponent(addHUDPanel);
  addComponent.setIcon(new ImageIcon(getClass().getResource(""String_Node_Str"")));
  addComponent.setName(""String_Node_Str"");
  addHUDPanel.setHUDComponent(addComponent);
  addHUDPanel.setPreferredLocation(Layout.NORTHWEST);
  mainHUD.addComponent(addComponent);
  addComponent.addEventListener(new HUDEventListener(){
    public void HUDObjectChanged(    HUDEvent e){
      if (e.getEventType().equals(HUDEventType.CLOSED)) {
        addComponent=null;
      }
    }
  }
);
  addComponent.setVisible(true);
  session.send(client,new VoiceChatJoinAcceptedMessage(group,myPresenceInfo,chatType));
  answered=true;
  if (chatType.equals(ChatType.PRIVATE)) {
    client.getWlAvatarCharacter().playAnimation(""String_Node_Str"");
  }
 else {
    client.getWlAvatarCharacter().stop();
  }
  incomingCallHUDComponent.setVisible(false);
}","private void AnswerButtonActionPerformed(java.awt.event.ActionEvent evt){
  logger.info(""String_Node_Str"");
  AddHUDPanel addHUDPanel=new AddHUDPanel(client,session,myPresenceInfo,caller,group,Mode.IN_PROGRESS);
  HUD mainHUD=HUDManagerFactory.getHUDManager().getHUD(""String_Node_Str"");
  addComponent=mainHUD.createComponent(addHUDPanel);
  addComponent.setIcon(new ImageIcon(getClass().getResource(""String_Node_Str"")));
  addComponent.setName(""String_Node_Str"");
  addHUDPanel.setHUDComponent(addComponent);
  addHUDPanel.setPreferredLocation(Layout.NORTHWEST);
  mainHUD.addComponent(addComponent);
  addComponent.addEventListener(new HUDEventListener(){
    public void HUDObjectChanged(    HUDEvent e){
      if (e.getEventType().equals(HUDEventType.CLOSED)) {
        addComponent=null;
      }
    }
  }
);
  addComponent.setVisible(true);
  session.send(client,new VoiceChatJoinAcceptedMessage(group,myPresenceInfo,chatType));
  answered=true;
  incomingCallHUDComponent.setVisible(false);
  WlAvatarCharacter avatar=client.getWlAvatarCharacter();
  if (avatar == null) {
    return;
  }
  String answerCell=null;
  for (  String action : avatar.getAnimationNames()) {
    if (action.indexOf(""String_Node_Str"") > 0) {
      answerCell=action;
      break;
    }
  }
  if (answerCell == null) {
    return;
  }
  if (chatType.equals(ChatType.PRIVATE)) {
    client.getWlAvatarCharacter().playAnimation(answerCell);
  }
 else {
    client.getWlAvatarCharacter().stop();
  }
}"
45609,"/** 
 * Load a SketchUP KMZ file and return the ImportedModel object
 * @param file
 * @return
 */
@Override public ImportedModel importModel(ImportSettings settings) throws IOException {
  ImportedModel importedModel;
  URL modelURL=settings.getModelURL();
  if (!modelURL.getProtocol().equalsIgnoreCase(""String_Node_Str"")) {
    final String modelURLStr=modelURL.toExternalForm();
    SwingUtilities.invokeLater(new Runnable(){
      public void run(){
        JOptionPane.showConfirmDialog(null,""String_Node_Str"" + modelURLStr + ""String_Node_Str"",""String_Node_Str"",JOptionPane.OK_OPTION);
      }
    }
);
    return null;
  }
  try {
    File f=null;
    try {
      URI uri=modelURL.toURI();
      String path=uri.getPath();
      f=new File(path);
    }
 catch (    URISyntaxException ex) {
      Logger.getLogger(KmzLoader.class.getName()).log(Level.SEVERE,""String_Node_Str"" + modelURL.toExternalForm(),ex);
      return null;
    }
    if (f == null) {
      logger.warning(""String_Node_Str"" + modelURL.toExternalForm());
      JOptionPane.showMessageDialog(null,""String_Node_Str"" + modelURL.toExternalForm(),""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
      return null;
    }
 else     if (!f.canRead()) {
      logger.warning(""String_Node_Str"" + f.getAbsolutePath());
      JOptionPane.showMessageDialog(null,""String_Node_Str"" + f.getAbsolutePath() + ""String_Node_Str"",""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
      return null;
    }
    ZipFile zipFile=null;
    ZipEntry docKmlEntry=null;
    try {
      zipFile=new ZipFile(f);
      docKmlEntry=zipFile.getEntry(""String_Node_Str"");
    }
 catch (    ZipException ze) {
      logger.log(Level.WARNING,""String_Node_Str"" + f.getAbsolutePath(),ze);
      return null;
    }
    KmlParser parser=new KmlParser();
    InputStream in=zipFile.getInputStream(docKmlEntry);
    try {
      parser.decodeKML(in);
    }
 catch (    Exception ex) {
      Logger.getLogger(KmzLoader.class.getName()).log(Level.SEVERE,null,ex);
    }
    List<KmlParser.KmlModel> models=parser.getModels();
    HashMap<URL,String> textureFilesMapping=new HashMap();
    importedModel=new KmzImportedModel(modelURL,models.get(0).getHref(),textureFilesMapping);
    String zipHost=WlzipManager.getWlzipManager().addZip(zipFile);
    ZipResourceLocator zipResource=new ZipResourceLocator(zipHost,zipFile,textureFilesMapping);
    ResourceLocatorTool.addThreadResourceLocator(ResourceLocatorTool.TYPE_TEXTURE,zipResource);
    if (models.size() == 1) {
      importedModel.setModelBG(load(zipFile,models.get(0)));
    }
 else {
      Node modelBG=new Node();
      for (      KmlParser.KmlModel model : models) {
        modelBG.attachChild(load(zipFile,model));
      }
      importedModel.setModelBG(modelBG);
    }
    ResourceLocatorTool.removeThreadResourceLocator(ResourceLocatorTool.TYPE_TEXTURE,zipResource);
    WlzipManager.getWlzipManager().removeZip(zipHost,zipFile);
  }
 catch (  ZipException ex) {
    logger.log(Level.SEVERE,null,ex);
    throw new IOException(""String_Node_Str"");
  }
catch (  IOException ex) {
    logger.log(Level.SEVERE,null,ex);
    throw ex;
  }
  importedModel.setModelLoader(this);
  importedModel.setImportSettings(settings);
  return importedModel;
}","/** 
 * Load a SketchUP KMZ file and return the ImportedModel object
 * @param file
 * @return
 */
@Override public ImportedModel importModel(ImportSettings settings) throws IOException {
  ImportedModel importedModel;
  URL modelURL=settings.getModelURL();
  if (!modelURL.getProtocol().equalsIgnoreCase(""String_Node_Str"")) {
    final String modelURLStr=modelURL.toExternalForm();
    SwingUtilities.invokeLater(new Runnable(){
      public void run(){
        JOptionPane.showConfirmDialog(null,""String_Node_Str"" + modelURLStr + ""String_Node_Str"",""String_Node_Str"",JOptionPane.OK_OPTION);
      }
    }
);
    return null;
  }
  try {
    File f=null;
    try {
      URI uri=modelURL.toURI();
      String path=uri.getPath();
      f=new File(path);
    }
 catch (    URISyntaxException ex) {
      Logger.getLogger(KmzLoader.class.getName()).log(Level.SEVERE,""String_Node_Str"" + modelURL.toExternalForm(),ex);
      return null;
    }
    if (f == null) {
      logger.warning(""String_Node_Str"" + modelURL.toExternalForm());
      JOptionPane.showMessageDialog(null,""String_Node_Str"" + modelURL.toExternalForm(),""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
      return null;
    }
 else     if (!f.canRead()) {
      logger.warning(""String_Node_Str"" + f.getAbsolutePath());
      JOptionPane.showMessageDialog(null,""String_Node_Str"" + f.getAbsolutePath() + ""String_Node_Str"",""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
      return null;
    }
    ZipFile zipFile=null;
    ZipEntry docKmlEntry=null;
    try {
      zipFile=new ZipFile(f);
      docKmlEntry=zipFile.getEntry(""String_Node_Str"");
    }
 catch (    ZipException ze) {
      logger.log(Level.WARNING,""String_Node_Str"" + f.getAbsolutePath(),ze);
      return null;
    }
    KmlParser parser=new KmlParser();
    InputStream in=zipFile.getInputStream(docKmlEntry);
    try {
      parser.decodeKML(in);
    }
 catch (    Exception ex) {
      Logger.getLogger(KmzLoader.class.getName()).log(Level.SEVERE,null,ex);
    }
    List<KmlParser.KmlModel> models=parser.getModels();
    HashMap<URL,String> textureFilesMapping=new HashMap();
    importedModel=new KmzImportedModel(modelURL,models.get(0).getHref(),textureFilesMapping);
    String zipHost=WlzipManager.getWlzipManager().addZip(zipFile);
    ZipResourceLocator zipResource=new ZipResourceLocator(zipHost,zipFile,textureFilesMapping);
    ResourceLocatorTool.addThreadResourceLocator(ResourceLocatorTool.TYPE_TEXTURE,zipResource);
    if (models.size() == 1) {
      importedModel.setModelBG(load(zipFile,models.get(0)));
    }
 else {
      Node modelBG=new Node();
      for (      KmlParser.KmlModel model : models) {
        modelBG.attachChild(load(zipFile,model));
      }
      importedModel.setModelBG(modelBG);
    }
    ResourceLocatorTool.removeThreadResourceLocator(ResourceLocatorTool.TYPE_TEXTURE,zipResource);
    WlzipManager.getWlzipManager().removeZip(zipHost,zipFile);
  }
 catch (  ZipException ex) {
    logger.log(Level.SEVERE,null,ex);
    throw new IOException(""String_Node_Str"");
  }
catch (  IOException ex) {
    logger.log(Level.SEVERE,null,ex);
    throw ex;
  }
  importedModel.setModelLoader(this);
  settings.setLightingEnabled(false);
  importedModel.setImportSettings(settings);
  return importedModel;
}"
45610,"/** 
 * Remove the given processor component from the given entity. 
 */
private static void removeProcessorCompFromEntity(ProcessorComponent pc,Entity entity){
}","/** 
 * Remove the given processor component from the given entity. 
 */
private static void removeProcessorCompFromEntity(ProcessorComponent pc,Entity entity){
  ProcessorCollectionComponent pcc=(ProcessorCollectionComponent)entity.getComponent(ProcessorCollectionComponent.class);
  if (pcc == null)   return;
  pcc.removeProcessor(pc);
  ProcessorComponent[] pcAry=pcc.getProcessors();
  if (pcAry == null || pcAry.length <= 0) {
    entity.removeComponent(ProcessorCollectionComponent.class);
  }
}"
45611,"/** 
 * @{inheritDoc }
 */
@Override public CellComponentServerState getServerState(CellComponentServerState serverState){
  ConeOfSilenceComponentServerState state=(ConeOfSilenceComponentServerState)serverState;
  if (state == null) {
    state=new ConeOfSilenceComponentServerState();
  }
  if (name.equals(DEFAULT_NAME)) {
    name+=""String_Node_Str"" + cellRef.get().getCellID();
  }
  state.setName(name);
  state.setBoundsType(boundsType);
  state.setBounds(bounds);
  state.setShowBounds(showBounds);
  state.setOutsideAudioVolume(outsideAudioVolume);
  return super.getServerState(state);
}","/** 
 * @{inheritDoc }
 */
@Override public CellComponentServerState getServerState(CellComponentServerState serverState){
  ConeOfSilenceComponentServerState state=(ConeOfSilenceComponentServerState)serverState;
  if (state == null) {
    state=new ConeOfSilenceComponentServerState();
  }
  if (name == null) {
    name=DEFAULT_NAME;
  }
  if (name.equals(DEFAULT_NAME)) {
    name+=""String_Node_Str"" + cellRef.get().getCellID();
  }
  state.setName(name);
  state.setBoundsType(boundsType);
  state.setBounds(bounds);
  state.setShowBounds(showBounds);
  state.setOutsideAudioVolume(outsideAudioVolume);
  return super.getServerState(state);
}"
45612,"/** 
 * Returns the bounding volume hint based upon the deployed model. If the model is too large, it places it on top of the avatar.
 */
private BoundingVolumeHint getBoundingVolumeHint(BoundingVolume bounds){
  BoundingVolume hint=bounds;
  if (bounds instanceof BoundingBox) {
    BoundingBox box=(BoundingBox)bounds;
    if (box.xExtent > 20 || box.yExtent > 20 || box.zExtent > 20) {
      hint=new BoundingBox(Vector3f.ZERO,1,1,1);
    }
  }
 else   if (bounds instanceof BoundingSphere) {
    BoundingSphere sphere=(BoundingSphere)bounds;
    if (sphere.radius > 20) {
      hint=new BoundingSphere(1f,Vector3f.ZERO);
    }
  }
  return new BoundingVolumeHint(true,hint);
}","/** 
 * Returns the bounding volume hint based upon the deployed model. If the model is too large, it places it on top of the avatar.
 */
private BoundingVolumeHint getBoundingVolumeHint(BoundingVolume bounds){
  BoundingVolume hint=bounds;
  if (bounds instanceof BoundingBox) {
    BoundingBox box=(BoundingBox)bounds;
    if (box.xExtent > 20 || box.zExtent > 20) {
      hint=new BoundingBox(Vector3f.ZERO,1,box.yExtent,1);
    }
  }
 else   if (bounds instanceof BoundingSphere) {
    BoundingSphere sphere=(BoundingSphere)bounds;
    if (sphere.radius > 20) {
      hint=new BoundingBox(Vector3f.ZERO,1,sphere.radius,1);
    }
  }
  return new BoundingVolumeHint(true,hint);
}"
45613,"@Override protected void deployModels(File targetDir,String moduleName,DeployedModel deployedModel,ImportedModel importedModel,HashMap<String,String> deploymentMapping,ModelCellComponentServerState state){
  URL modelURL=importedModel.getImportSettings().getModelURL();
  System.err.println(""String_Node_Str"" + modelURL.toExternalForm());
  if (!modelURL.getProtocol().equalsIgnoreCase(""String_Node_Str"")) {
    final String modelURLStr=modelURL.toExternalForm();
    SwingUtilities.invokeLater(new Runnable(){
      public void run(){
        JOptionPane.showConfirmDialog(null,""String_Node_Str"" + modelURLStr + ""String_Node_Str"",""String_Node_Str"",JOptionPane.OK_OPTION);
      }
    }
);
    return;
  }
  try {
    ZipFile zipFile=new ZipFile(new File(modelURL.toURI()));
    deployZipModels(zipFile,targetDir);
    String kmzFilename=modelURL.toURI().getPath();
    kmzFilename=kmzFilename.substring(kmzFilename.lastIndexOf('/') + 1);
    deployedModel.setModelURL(importedModel.getDeploymentBaseURL() + kmzFilename + ""String_Node_Str""+ ((KmzImportedModel)importedModel).getPrimaryModel()+ ""String_Node_Str"");
    deployedModel.setLoaderDataURL(importedModel.getDeploymentBaseURL() + kmzFilename + ""String_Node_Str""+ kmzFilename+ ""String_Node_Str"");
    deployDeploymentData(targetDir,deployedModel,kmzFilename);
    state.setDeployedModelURL(importedModel.getDeploymentBaseURL() + kmzFilename + ""String_Node_Str""+ kmzFilename+ ""String_Node_Str"");
  }
 catch (  ZipException ex) {
    Logger.getLogger(KmzLoader.class.getName()).log(Level.SEVERE,null,ex);
  }
catch (  IOException ex) {
    Logger.getLogger(KmzLoader.class.getName()).log(Level.SEVERE,null,ex);
  }
catch (  URISyntaxException ex) {
    Logger.getLogger(KmzLoader.class.getName()).log(Level.SEVERE,null,ex);
  }
}","@Override protected void deployModels(File targetDir,String moduleName,DeployedModel deployedModel,ImportedModel importedModel,HashMap<String,String> deploymentMapping,ModelCellComponentServerState state){
  URL modelURL=importedModel.getImportSettings().getModelURL();
  System.err.println(""String_Node_Str"" + modelURL.toExternalForm());
  if (!modelURL.getProtocol().equalsIgnoreCase(""String_Node_Str"")) {
    final String modelURLStr=modelURL.toExternalForm();
    SwingUtilities.invokeLater(new Runnable(){
      public void run(){
        JOptionPane.showConfirmDialog(null,""String_Node_Str"" + modelURLStr + ""String_Node_Str"",""String_Node_Str"",JOptionPane.OK_OPTION);
      }
    }
);
    return;
  }
  try {
    ZipFile zipFile=new ZipFile(new File(modelURL.toURI()));
    deployZipModels(zipFile,targetDir);
    String kmzFilename=modelURL.toURI().getPath();
    kmzFilename=kmzFilename.substring(kmzFilename.lastIndexOf('/') + 1);
    deployedModel.setModelURL(importedModel.getDeploymentBaseURL() + kmzFilename + ""String_Node_Str""+ ((KmzImportedModel)importedModel).getPrimaryModel()+ ""String_Node_Str"");
    deployedModel.setLoaderDataURL(importedModel.getDeploymentBaseURL() + kmzFilename + ""String_Node_Str""+ kmzFilename+ ""String_Node_Str"");
    deployDeploymentData(targetDir,deployedModel,kmzFilename);
    state.setDeployedModelURL(importedModel.getDeploymentBaseURL() + kmzFilename + ""String_Node_Str""+ kmzFilename+ ""String_Node_Str"");
    state.setLightingEnabled(false);
  }
 catch (  ZipException ex) {
    Logger.getLogger(KmzLoader.class.getName()).log(Level.SEVERE,null,ex);
  }
catch (  IOException ex) {
    Logger.getLogger(KmzLoader.class.getName()).log(Level.SEVERE,null,ex);
  }
catch (  URISyntaxException ex) {
    Logger.getLogger(KmzLoader.class.getName()).log(Level.SEVERE,null,ex);
  }
}"
45614,"/** 
 */
@Override public void initialize(ServerSessionManager manager){
  loaderMap=new HashMap();
  avatarChangedListener=new AvatarChangedListener(){
    public void avatarChanged(    Avatar newAvatar){
      if (camState != null) {
        avatarCellRenderer.removeAvatarChangedListener(avatarChangedListener);
        if (newAvatar.getContext() != null) {
          camState.setTargetCharacter(newAvatar);
        }
 else {
          camState.setTargetCharacter(null);
        }
        CellTransform transform=avatarCellRenderer.getCell().getLocalTransform();
        camState.setCameraPosition(transform.getTranslation(null));
      }
    }
  }
;
  chaseCameraMI=new JRadioButtonMenuItem(bundle.getString(""String_Node_Str""));
  chaseCameraMI.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent arg0){
      Vector3f offsetVec=new Vector3f(0.0f,4.0f,-10.0f);
      if (camState == null) {
        camModel=(ChaseCamModel)CameraModels.getCameraModel(ChaseCamModel.class);
        camState=new ChaseCamState(offsetVec,new Vector3f(0.0f,1.8f,0.0f));
        camState.setDamping(1.7f);
        camState.setLookAtDamping(1.7f);
      }
      camState.setCameraPosition(avatarCellRenderer.getCell().getLocalTransform().getTranslation(null).add(offsetVec));
      camState.setTargetCharacter(avatarCellRenderer.getAvatarCharacter());
      ClientContextJME.getViewManager().setCameraController(new FlexibleCameraAdapter(camModel,camState));
    }
  }
);
  gestureMI=new JCheckBoxMenuItem(bundle.getString(""String_Node_Str""));
  gestureMI.setSelected(false);
  gestureMI.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      if (gestureHUDRef == null || gestureHUDRef.get() == null) {
        GestureHUD hud=new GestureHUD();
        hud.setAvatarCharacter(avatarCellRenderer.getAvatarCharacter());
        gestureHUDRef=new WeakReference(hud);
      }
      gestureHUDEnabled=!gestureHUDEnabled;
      gestureMI.setSelected(gestureHUDEnabled);
      ((GestureHUD)gestureHUDRef.get()).setVisible(gestureHUDEnabled);
    }
  }
);
  avatarConfigMI=new JMenuItem(bundle.getString(""String_Node_Str""));
  avatarConfigMI.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      AvatarConfigFrame f=new AvatarConfigFrame();
      f.setVisible(true);
    }
  }
);
  collisionResponseEnabledMI=new JCheckBoxMenuItem(bundle.getString(""String_Node_Str""));
  collisionResponseEnabledMI.setSelected(true);
  collisionResponseEnabledMI.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      boolean isCollisionResponse=collisionResponseEnabledMI.isSelected();
      boolean isGravity=gravityEnabledMI.isSelected();
      ClientContext.getInputManager().postEvent(new AvatarCollisionChangeRequestEvent(isCollisionResponse,isGravity));
    }
  }
);
  gravityEnabledMI=new JCheckBoxMenuItem(bundle.getString(""String_Node_Str""));
  gravityEnabledMI.setSelected(true);
  gravityEnabledMI.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      boolean isCollisionResponse=collisionResponseEnabledMI.isSelected();
      boolean isGravity=gravityEnabledMI.isSelected();
      ClientContext.getInputManager().postEvent(new AvatarCollisionChangeRequestEvent(isCollisionResponse,isGravity));
    }
  }
);
  ClientContextJME.getAvatarRenderManager().registerRenderer(manager,AvatarImiJME.class,AvatarControls.class);
  try {
    String serverHostAndPort=manager.getServerNameAndPort();
    String baseURL=""String_Node_Str"";
    URL url=AssetUtils.getAssetURL(baseURL,serverHostAndPort);
    WorldManager worldManager=ClientContextJME.getWorldManager();
    worldManager.addUserData(Repository.class,new Repository(worldManager,new WonderlandAvatarCache(url.toExternalForm(),ClientContext.getUserDirectory(bundle.getString(""String_Node_Str"")))));
  }
 catch (  MalformedURLException excp) {
    logger.log(Level.WARNING,""String_Node_Str"",excp);
  }
catch (  Exception e) {
    logger.log(Level.SEVERE,""String_Node_Str"",e);
  }
  AvatarSystem.initialize(ClientContextJME.getWorldManager());
  super.initialize(manager);
}","/** 
 */
@Override public void initialize(ServerSessionManager manager){
  loaderMap=new HashMap();
  avatarChangedListener=new AvatarChangedListener(){
    public void avatarChanged(    Avatar newAvatar){
      if (camState != null) {
        avatarCellRenderer.removeAvatarChangedListener(avatarChangedListener);
        if (newAvatar.getContext() != null) {
          camState.setTargetCharacter(newAvatar);
        }
 else {
          camState.setTargetCharacter(null);
        }
        CellTransform transform=avatarCellRenderer.getCell().getLocalTransform();
        camState.setCameraPosition(transform.getTranslation(null));
      }
    }
  }
;
  chaseCameraMI=new JRadioButtonMenuItem(bundle.getString(""String_Node_Str""));
  chaseCameraMI.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent arg0){
      ViewManager viewManager=ViewManager.getViewManager();
      ViewCell viewCell=viewManager.getPrimaryViewCell();
      CellTransform transform=viewCell.getWorldTransform();
      Vector3f translation=transform.getTranslation(null);
      Vector3f offset=new Vector3f(0.0f,4.0f,-10.0f);
      if (camState == null) {
        camModel=(ChaseCamModel)CameraModels.getCameraModel(ChaseCamModel.class);
        camState=new ChaseCamState(offset,new Vector3f(0.0f,1.8f,0.0f));
        camState.setDamping(1.7f);
        camState.setLookAtDamping(1.7f);
      }
      camState.setCameraPosition(translation.add(offset));
      camState.setTargetCharacter(avatarCellRenderer.getAvatarCharacter());
      FlexibleCameraAdapter chaseCamera=new FlexibleCameraAdapter(camModel,camState);
      viewManager.setCameraController(chaseCamera);
    }
  }
);
  gestureMI=new JCheckBoxMenuItem(bundle.getString(""String_Node_Str""));
  gestureMI.setSelected(false);
  gestureMI.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      if (gestureHUDRef == null || gestureHUDRef.get() == null) {
        GestureHUD hud=new GestureHUD();
        hud.setAvatarCharacter(avatarCellRenderer.getAvatarCharacter());
        gestureHUDRef=new WeakReference(hud);
      }
      gestureHUDEnabled=!gestureHUDEnabled;
      gestureMI.setSelected(gestureHUDEnabled);
      ((GestureHUD)gestureHUDRef.get()).setVisible(gestureHUDEnabled);
    }
  }
);
  avatarConfigMI=new JMenuItem(bundle.getString(""String_Node_Str""));
  avatarConfigMI.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      AvatarConfigFrame f=new AvatarConfigFrame();
      f.setVisible(true);
    }
  }
);
  collisionResponseEnabledMI=new JCheckBoxMenuItem(bundle.getString(""String_Node_Str""));
  collisionResponseEnabledMI.setSelected(true);
  collisionResponseEnabledMI.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      boolean isCollisionResponse=collisionResponseEnabledMI.isSelected();
      boolean isGravity=gravityEnabledMI.isSelected();
      ClientContext.getInputManager().postEvent(new AvatarCollisionChangeRequestEvent(isCollisionResponse,isGravity));
    }
  }
);
  gravityEnabledMI=new JCheckBoxMenuItem(bundle.getString(""String_Node_Str""));
  gravityEnabledMI.setSelected(true);
  gravityEnabledMI.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      boolean isCollisionResponse=collisionResponseEnabledMI.isSelected();
      boolean isGravity=gravityEnabledMI.isSelected();
      ClientContext.getInputManager().postEvent(new AvatarCollisionChangeRequestEvent(isCollisionResponse,isGravity));
    }
  }
);
  ClientContextJME.getAvatarRenderManager().registerRenderer(manager,AvatarImiJME.class,AvatarControls.class);
  try {
    String serverHostAndPort=manager.getServerNameAndPort();
    String baseURL=""String_Node_Str"";
    URL url=AssetUtils.getAssetURL(baseURL,serverHostAndPort);
    WorldManager worldManager=ClientContextJME.getWorldManager();
    worldManager.addUserData(Repository.class,new Repository(worldManager,new WonderlandAvatarCache(url.toExternalForm(),ClientContext.getUserDirectory(bundle.getString(""String_Node_Str"")))));
  }
 catch (  MalformedURLException excp) {
    logger.log(Level.WARNING,""String_Node_Str"",excp);
  }
catch (  Exception e) {
    logger.log(Level.SEVERE,""String_Node_Str"",e);
  }
  AvatarSystem.initialize(ClientContextJME.getWorldManager());
  super.initialize(manager);
}"
45615,"/** 
 * Returns a set of all cell factories. If no factories are registered, returns an empty set.
 * @return A set of registered cell factories
 */
public Set<CellFactorySPI> getAllCellFactories(){
  return new HashSet(cellFactorySet);
}","/** 
 * Returns a set of all cell factories. If no factories are registered, returns an empty set.
 * @return A set of registered cell factories
 */
public synchronized Set<CellFactorySPI> getAllCellFactories(){
  return new HashSet(cellFactorySet);
}"
45616,"/** 
 * Returns a set of cell factories given the extension type. If no factories are present for the given extension, returns null.
 * @param extension File type extension (e.g. 'jpg', 'dae')
 * @return A set of CellFactory objects registered on the extension
 */
public Set<CellFactorySPI> getCellFactoriesByExtension(String extension){
  if (extension != null) {
    extension=extension.toLowerCase();
    return cellFactoryExtensionMap.get(extension);
  }
  return null;
}","/** 
 * Returns a set of cell factories given the extension type. If no factories are present for the given extension, returns null.
 * @param extension File type extension (e.g. 'jpg', 'dae')
 * @return A set of CellFactory objects registered on the extension
 */
public synchronized Set<CellFactorySPI> getCellFactoriesByExtension(String extension){
  if (extension != null) {
    extension=extension.toLowerCase();
    return cellFactoryExtensionMap.get(extension);
  }
  return null;
}"
45617,"/** 
 */
public String importFile(File file,String extension){
  final JFrame frame=JmeClientMain.getFrame().getFrame();
  int result=JOptionPane.YES_OPTION;
  String uri=isContentExists(file);
  if (uri != null) {
    Object[] options={""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
    String msg=""String_Node_Str"" + file.getName() + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
    String title=""String_Node_Str"";
    result=JOptionPane.showOptionDialog(frame,msg,title,JOptionPane.YES_NO_CANCEL_OPTION,JOptionPane.QUESTION_MESSAGE,null,options,options[0]);
    logger.warning(""String_Node_Str"" + result);
    if (result == JOptionPane.CANCEL_OPTION || result == JOptionPane.CLOSED_OPTION) {
      return null;
    }
  }
  if (result == JOptionPane.NO_OPTION) {
    createCell(uri);
    return uri;
  }
  JOptionPane waitMsg=new JOptionPane(""String_Node_Str"" + file.getName() + ""String_Node_Str"");
  final JDialog dialog=waitMsg.createDialog(frame,""String_Node_Str"");
  SwingUtilities.invokeLater(new Runnable(){
    public void run(){
      dialog.setVisible(true);
    }
  }
);
  logger.warning(""String_Node_Str"");
  try {
    uri=uploadContent(file);
  }
 catch (  java.io.IOException excp) {
    logger.log(Level.WARNING,""String_Node_Str"" + file.getAbsolutePath(),excp);
    final String fileName=file.getName();
    SwingUtilities.invokeLater(new Runnable(){
      public void run(){
        dialog.setVisible(false);
        JOptionPane.showMessageDialog(frame,""String_Node_Str"" + fileName,""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
      }
    }
);
    return null;
  }
 finally {
    SwingUtilities.invokeLater(new Runnable(){
      public void run(){
        dialog.setVisible(false);
      }
    }
);
  }
  createCell(uri);
  return uri;
}","/** 
 */
public String importFile(File file,String extension){
  final JFrame frame=JmeClientMain.getFrame().getFrame();
  int result=JOptionPane.YES_OPTION;
  String uri=isContentExists(file);
  if (uri != null) {
    Object[] options={BUNDLE.getString(""String_Node_Str""),BUNDLE.getString(""String_Node_Str""),BUNDLE.getString(""String_Node_Str"")};
    String msg=MessageFormat.format(BUNDLE.getString(""String_Node_Str""),file.getName());
    String title=BUNDLE.getString(""String_Node_Str"");
    result=JOptionPane.showOptionDialog(frame,msg,title,JOptionPane.YES_NO_CANCEL_OPTION,JOptionPane.QUESTION_MESSAGE,null,options,options[0]);
    if (result == JOptionPane.CANCEL_OPTION || result == JOptionPane.CLOSED_OPTION) {
      return null;
    }
  }
  if (result == JOptionPane.NO_OPTION) {
    createCell(uri);
    return uri;
  }
  String msg=MessageFormat.format(BUNDLE.getString(""String_Node_Str""),file.getName());
  String title=BUNDLE.getString(""String_Node_Str"");
  JOptionPane waitMsg=new JOptionPane(msg);
  final JDialog dialog=waitMsg.createDialog(frame,title);
  SwingUtilities.invokeLater(new Runnable(){
    public void run(){
      dialog.setVisible(true);
    }
  }
);
  try {
    uri=uploadContent(file);
  }
 catch (  java.io.IOException excp) {
    LOGGER.log(Level.WARNING,""String_Node_Str"" + file.getAbsolutePath(),excp);
    final String fname=file.getName();
    SwingUtilities.invokeLater(new Runnable(){
      public void run(){
        dialog.setVisible(false);
        String msg=MessageFormat.format(BUNDLE.getString(""String_Node_Str""),fname);
        String title=BUNDLE.getString(""String_Node_Str"");
        JOptionPane.showMessageDialog(frame,msg,title,JOptionPane.ERROR_MESSAGE);
      }
    }
);
    return null;
  }
 finally {
    SwingUtilities.invokeLater(new Runnable(){
      public void run(){
        dialog.setVisible(false);
      }
    }
);
  }
  createCell(uri);
  return uri;
}"
45618,"/** 
 * Create a cell based upon the uri of the content and the file extension of the uploaded file.
 * @param uri The URI of the uploaded content
 * @param extension The file extension of the content
 */
public void createCell(String uri){
  String extension=getFileExtension(uri);
  if (extension == null) {
    logger.warning(""String_Node_Str"" + uri);
    return;
  }
  CellSelectionSPI spi=CellSelectionRegistry.getCellSelectionSPI();
  if (spi == null) {
    final JFrame frame=JmeClientMain.getFrame().getFrame();
    logger.warning(""String_Node_Str"");
    JOptionPane.showMessageDialog(frame,""String_Node_Str"" + uri,""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
    return;
  }
  CellFactorySPI factory=null;
  try {
    factory=spi.getCellSelection(extension);
  }
 catch (  CellCreationException excp) {
    final JFrame frame=JmeClientMain.getFrame().getFrame();
    logger.log(Level.WARNING,""String_Node_Str"" + extension,excp);
    JOptionPane.showMessageDialog(frame,""String_Node_Str"" + uri,""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
    return;
  }
  if (factory == null) {
    return;
  }
  Properties props=new Properties();
  props.put(""String_Node_Str"",uri);
  CellServerState state=factory.getDefaultCellServerState(props);
  try {
    CellUtils.createCell(state);
  }
 catch (  CellCreationException excp) {
    logger.log(Level.WARNING,""String_Node_Str"" + uri,excp);
  }
}","/** 
 * Create a cell based upon the uri of the content and the file extension of the uploaded file.
 * @param uri The URI of the uploaded content
 * @param extension The file extension of the content
 */
public void createCell(String uri){
  String extension=getFileExtension(uri);
  if (extension == null) {
    LOGGER.warning(""String_Node_Str"" + uri);
    return;
  }
  CellSelectionSPI spi=CellSelectionRegistry.getCellSelectionSPI();
  if (spi == null) {
    final JFrame frame=JmeClientMain.getFrame().getFrame();
    LOGGER.warning(""String_Node_Str"");
    JOptionPane.showMessageDialog(frame,""String_Node_Str"" + uri,""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
    return;
  }
  CellFactorySPI factory=null;
  try {
    factory=spi.getCellSelection(extension);
  }
 catch (  CellCreationException excp) {
    final JFrame frame=JmeClientMain.getFrame().getFrame();
    LOGGER.log(Level.WARNING,""String_Node_Str"" + extension,excp);
    JOptionPane.showMessageDialog(frame,""String_Node_Str"" + uri,""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
    return;
  }
  if (factory == null) {
    return;
  }
  Properties props=new Properties();
  props.put(""String_Node_Str"",uri);
  CellServerState state=factory.getDefaultCellServerState(props);
  try {
    CellUtils.createCell(state);
  }
 catch (  CellCreationException excp) {
    LOGGER.log(Level.WARNING,""String_Node_Str"" + uri,excp);
  }
}"
45619,"public Node loadDeployedModel(DeployedModel deployedModel,Entity rootEntity){
  InputStream in=null;
  try {
    LoaderData data=null;
    if (deployedModel.getLoaderDataURL() == null) {
      logger.warning(""String_Node_Str"" + deployedModel.getModelURL());
    }
 else {
      URL url=AssetUtils.getAssetURL(deployedModel.getLoaderDataURL());
      in=url.openStream();
      if (in == null) {
        logger.severe(""String_Node_Str"" + url.toExternalForm());
      }
 else {
        try {
          data=LoaderData.decode(in);
        }
 catch (        JAXBException ex) {
          Logger.getLogger(JmeColladaLoader.class.getName()).log(Level.SEVERE,""String_Node_Str"" + url.toExternalForm(),ex);
        }
        in.close();
      }
    }
    logger.info(""String_Node_Str"" + deployedModel.getModelURL());
    if (deployedModel.getModelURL().endsWith(""String_Node_Str""))     in=new GZIPInputStream(AssetUtils.getAssetURL(deployedModel.getModelURL()).openStream());
 else     in=AssetUtils.getAssetURL(deployedModel.getModelURL()).openStream();
    String baseURL=deployedModel.getModelURL();
    baseURL=baseURL.substring(0,baseURL.lastIndexOf('/'));
    Node modelBG;
    Map<String,String> deployedTextures=null;
    if (data != null)     deployedTextures=data.getDeployedTextures();
    ResourceLocator resourceLocator=getDeployedResourceLocator(deployedTextures,baseURL);
    if (resourceLocator != null) {
      ResourceLocatorTool.addThreadResourceLocator(ResourceLocatorTool.TYPE_TEXTURE,resourceLocator);
    }
    modelBG=loadModel(in,getFilename(deployedModel.getModelURL()),false);
    deployedModel.applyModelTransform(modelBG);
    if (resourceLocator != null) {
      ResourceLocatorTool.removeThreadResourceLocator(ResourceLocatorTool.TYPE_TEXTURE,resourceLocator);
    }
    return modelBG;
  }
 catch (  IOException ex) {
    Logger.getLogger(JmeColladaLoader.class.getName()).log(Level.SEVERE,null,ex);
  }
 finally {
    try {
      if (in != null)       in.close();
    }
 catch (    IOException ex) {
      Logger.getLogger(JmeColladaLoader.class.getName()).log(Level.SEVERE,null,ex);
    }
  }
  return null;
}","public Node loadDeployedModel(DeployedModel deployedModel,Entity rootEntity){
  InputStream in=null;
  try {
    LoaderData data=null;
    if (deployedModel.getLoaderDataURL() == null) {
      logger.warning(""String_Node_Str"" + deployedModel.getModelURL());
    }
 else {
      URL url=AssetUtils.getAssetURL(deployedModel.getLoaderDataURL());
      in=url.openStream();
      if (in == null) {
        logger.severe(""String_Node_Str"" + url.toExternalForm());
      }
 else {
        try {
          data=LoaderData.decode(in);
        }
 catch (        JAXBException ex) {
          Logger.getLogger(JmeColladaLoader.class.getName()).log(Level.SEVERE,""String_Node_Str"" + url.toExternalForm(),ex);
        }
        in.close();
      }
    }
    logger.info(""String_Node_Str"" + deployedModel.getModelURL());
    if (deployedModel.getModelURL().endsWith(""String_Node_Str""))     in=new GZIPInputStream(AssetUtils.getAssetURL(deployedModel.getModelURL()).openStream());
 else     in=AssetUtils.getAssetURL(deployedModel.getModelURL()).openStream();
    String baseURL=deployedModel.getModelURL();
    baseURL=baseURL.substring(0,baseURL.lastIndexOf('/'));
    Node modelBG;
    Map<String,String> deployedTextures=null;
    if (data != null)     deployedTextures=data.getDeployedTextures();
    ResourceLocator resourceLocator=getDeployedResourceLocator(deployedTextures,baseURL);
    if (resourceLocator != null) {
      ResourceLocatorTool.addThreadResourceLocator(ResourceLocatorTool.TYPE_TEXTURE,resourceLocator);
    }
    modelBG=loadModel(in,getFilename(deployedModel.getModelURL()),false);
    deployedModel.applyModelTransform(modelBG);
    if (resourceLocator != null) {
      ResourceLocatorTool.removeThreadResourceLocator(ResourceLocatorTool.TYPE_TEXTURE,resourceLocator);
    }
    modelBG.updateGeometricState(0,true);
    return modelBG;
  }
 catch (  IOException ex) {
    Logger.getLogger(JmeColladaLoader.class.getName()).log(Level.SEVERE,null,ex);
  }
 finally {
    try {
      if (in != null)       in.close();
    }
 catch (    IOException ex) {
      Logger.getLogger(JmeColladaLoader.class.getName()).log(Level.SEVERE,null,ex);
    }
  }
  return null;
}"
45620,"/** 
 * {@inheritDoc}
 */
public boolean isFileCached(URL location){
  logger.info(""String_Node_Str"" + location.toExternalForm() + ""String_Node_Str""+ location.getProtocol());
  File cacheFile=urlToCacheFile(location);
  return cacheFile.exists();
}","/** 
 * {@inheritDoc}
 */
public boolean isFileCached(URL location){
  if (logger.isLoggable(Level.INFO)) {
    logger.info(""String_Node_Str"" + location.toExternalForm() + ""String_Node_Str""+ location.getProtocol());
  }
  File cacheFile=urlToCacheFile(location);
  return cacheFile.exists();
}"
45621,"/** 
 * {@inheritDoc}
 */
public Texture loadTexture(URL location){
  logger.info(""String_Node_Str"" + location.toExternalForm() + ""String_Node_Str""+ location.getProtocol());
  String evolver=location.getFile();
  if (evolver.contains(""String_Node_Str"") && location.getProtocol().equalsIgnoreCase(""String_Node_Str"")) {
    System.err.println(""String_Node_Str"" + evolver);
    evolver=evolver.substring(evolver.indexOf(""String_Node_Str""));
    evolver=evolver.substring(evolver.indexOf('/'));
    System.err.println(""String_Node_Str"" + evolver);
    try {
      location=new URL(""String_Node_Str"" + location.getHost() + ""String_Node_Str""+ location.getPort()+ ""String_Node_Str""+ evolver);
    }
 catch (    MalformedURLException ex) {
      Logger.getLogger(WonderlandAvatarCache.class.getName()).log(Level.SEVERE,null,ex);
    }
    System.err.println(""String_Node_Str"" + location.toExternalForm());
  }
  String urlString=location.toExternalForm();
  if (location.getProtocol().equalsIgnoreCase(""String_Node_Str"") == true) {
    int assetsIndex=urlString.indexOf(""String_Node_Str"");
    if (assetsIndex != -1) {
      urlString=urlString.substring(assetsIndex);
    }
    URL localURL=null;
    try {
      localURL=new URL(baseURL + urlString);
      return TextureManager.loadTexture(localURL);
    }
 catch (    MalformedURLException excp) {
      logger.log(Level.WARNING,""String_Node_Str"" + baseURL + urlString,excp);
      return null;
    }
  }
  try {
    return TextureManager.loadTexture(location);
  }
 catch (  Exception e) {
    logger.warning(""String_Node_Str"" + location.toExternalForm());
    return null;
  }
}","/** 
 * {@inheritDoc}
 */
public Texture loadTexture(URL location){
  if (logger.isLoggable(Level.INFO)) {
    logger.info(""String_Node_Str"" + location.toExternalForm() + ""String_Node_Str""+ location.getProtocol());
  }
  String evolver=location.getFile();
  boolean isEvolver=evolver.contains(""String_Node_Str"");
  if (isEvolver && location.getProtocol().equalsIgnoreCase(""String_Node_Str"")) {
    evolver=evolver.substring(evolver.indexOf(""String_Node_Str""));
    evolver=evolver.substring(evolver.indexOf('/'));
    try {
      location=new URL(""String_Node_Str"" + location.getHost() + ""String_Node_Str""+ location.getPort()+ ""String_Node_Str""+ evolver);
    }
 catch (    MalformedURLException ex) {
      Logger.getLogger(WonderlandAvatarCache.class.getName()).log(Level.SEVERE,null,ex);
    }
  }
  String urlString=location.toExternalForm();
  if (!isEvolver && location.getProtocol().equalsIgnoreCase(""String_Node_Str"") == true) {
    int assetsIndex=urlString.indexOf(""String_Node_Str"");
    if (assetsIndex != -1) {
      urlString=urlString.substring(assetsIndex);
    }
    URL localURL=null;
    try {
      localURL=new URL(baseURL + urlString);
      return TextureManager.loadTexture(localURL);
    }
 catch (    MalformedURLException excp) {
      logger.log(Level.WARNING,""String_Node_Str"" + baseURL + urlString,excp);
      return null;
    }
  }
  try {
    return TextureManager.loadTexture(location);
  }
 catch (  Exception e) {
    logger.warning(""String_Node_Str"" + location.toExternalForm());
    return null;
  }
}"
45622,"/** 
 * Check if another JVM process has the database opened. If so, then post a message and exit.
 */
private void checkDBException(){
  AssetDB assetDB=null;
  try {
    assetDB=new AssetDB();
  }
 catch (  AssetDBException excp) {
    LOGGER.log(Level.SEVERE,""String_Node_Str"",excp);
    String msg=BUNDLE.getString(""String_Node_Str"") + ""String_Node_Str"" + BUNDLE.getString(""String_Node_Str"")+ ""String_Node_Str""+ BUNDLE.getString(""String_Node_Str"")+ ""String_Node_Str""+ BUNDLE.getString(""String_Node_Str"");
    String title=BUNDLE.getString(""String_Node_Str"");
    JOptionPane.showMessageDialog(null,msg,title,JOptionPane.ERROR_MESSAGE);
    System.exit(1);
  }
  assetDB.disconnect();
}","/** 
 * Check if another JVM process has the database opened. If so, then post a message and exit.
 */
private void checkDBException(){
  AssetDB assetDB=null;
  try {
    assetDB=new AssetDB();
  }
 catch (  AssetDBException excp) {
    LOGGER.log(Level.SEVERE,""String_Node_Str"",excp);
    String errorMessage=BUNDLE.getString(""String_Node_Str"");
    if (os == OS.Windows) {
      errorMessage+=""String_Node_Str"" + BUNDLE.getString(""String_Node_Str"");
    }
    JOptionPane.showMessageDialog(null,errorMessage,BUNDLE.getString(""String_Node_Str""),JOptionPane.ERROR_MESSAGE);
    System.exit(1);
  }
  assetDB.disconnect();
}"
45623,"/** 
 * creates a new JmeClientMain
 * @param args the command line arguments
 */
public JmeClientMain(String[] args){
  checkVmVersion();
  processArgs(args);
  URL propsURL=getPropsURL();
  loadProperties(propsURL);
  checkDBException();
  ClientContextJME.setClientMain(this);
  String windowSize=System.getProperty(WINDOW_SIZE_PROP,WINDOW_SIZE_DEFAULT);
  try {
    if (windowSize.equalsIgnoreCase(""String_Node_Str"")) {
      GraphicsEnvironment ge=GraphicsEnvironment.getLocalGraphicsEnvironment();
      GraphicsDevice[] gs=ge.getScreenDevices();
      if (gs.length > 1) {
        LOGGER.warning(""String_Node_Str"");
      }
      GraphicsConfiguration gc=gs[0].getDefaultConfiguration();
      Rectangle size=gc.getBounds();
      width=size.width;
      height=size.height;
    }
 else {
      String sizeWidth=windowSize.substring(0,windowSize.indexOf('x'));
      String sizeHeight=windowSize.substring(windowSize.indexOf('x') + 1);
      width=Integer.parseInt(sizeWidth);
      height=Integer.parseInt(sizeHeight);
    }
  }
 catch (  Exception e) {
    LOGGER.warning(WINDOW_SIZE_PROP + ""String_Node_Str"" + ""String_Node_Str""+ windowSize);
  }
  String serverURL=System.getProperty(SERVER_URL_PROP);
  if (serverURL == null) {
    serverURL=SERVER_URL_DEFAULT;
    System.setProperty(SERVER_URL_PROP,serverURL);
  }
  Clip clip2=Clip.create(1000,new TimingTarget(){
    public void timingEvent(    float arg0,    long arg1){
    }
    public void begin(){
    }
    public void end(){
    }
    public void pause(){
    }
    public void resume(){
    }
  }
);
  clip2.setInterpolator(Interpolators.getEasingInstance(0.4f,0.4f));
  clip2.start();
  WorldManager worldManager=ClientContextJME.getWorldManager();
  String requestedFPS=System.getProperty(DESIRED_FPS_PROP,DESIRED_FPS_DEFAULT);
  if (requestedFPS != null) {
    try {
      desiredFrameRate=Integer.parseInt(requestedFPS);
    }
 catch (    NumberFormatException e) {
      LOGGER.warning(DESIRED_FPS_PROP + ""String_Node_Str"" + requestedFPS+ ""String_Node_Str"");
    }
  }
  worldManager.getRenderManager().setDesiredFrameRate(desiredFrameRate);
  createUI(worldManager);
  login=new JmeLoginUI(frame);
  LoginManager.setLoginUI(login);
  frame.addServerURLListener(new ServerURLListener(){
    public void serverURLChanged(    final String serverURL){
      new Thread(ThreadManager.getThreadGroup(),new Runnable(){
        public void run(){
          try {
            loadServer(serverURL);
          }
 catch (          IOException ioe) {
            LOGGER.log(Level.WARNING,""String_Node_Str"" + serverURL,ioe);
          }
        }
      }
).start();
    }
    public void logout(){
      new Thread(ThreadManager.getThreadGroup(),new Runnable(){
        public void run(){
          JmeClientMain.this.logout();
        }
      }
).start();
    }
  }
);
  try {
    loadServer(serverURL);
  }
 catch (  IOException ioe) {
    LOGGER.log(Level.WARNING,""String_Node_Str"" + serverURL,ioe);
  }
}","/** 
 * creates a new JmeClientMain
 * @param args the command line arguments
 */
public JmeClientMain(String[] args){
  detectOS();
  checkVmVersion();
  processArgs(args);
  URL propsURL=getPropsURL();
  loadProperties(propsURL);
  checkDBException();
  ClientContextJME.setClientMain(this);
  String windowSize=System.getProperty(WINDOW_SIZE_PROP,WINDOW_SIZE_DEFAULT);
  try {
    if (windowSize.equalsIgnoreCase(""String_Node_Str"")) {
      GraphicsEnvironment ge=GraphicsEnvironment.getLocalGraphicsEnvironment();
      GraphicsDevice[] gs=ge.getScreenDevices();
      if (gs.length > 1) {
        LOGGER.warning(""String_Node_Str"");
      }
      GraphicsConfiguration gc=gs[0].getDefaultConfiguration();
      Rectangle size=gc.getBounds();
      width=size.width;
      height=size.height;
    }
 else {
      String sizeWidth=windowSize.substring(0,windowSize.indexOf('x'));
      String sizeHeight=windowSize.substring(windowSize.indexOf('x') + 1);
      width=Integer.parseInt(sizeWidth);
      height=Integer.parseInt(sizeHeight);
    }
  }
 catch (  Exception e) {
    LOGGER.warning(WINDOW_SIZE_PROP + ""String_Node_Str"" + ""String_Node_Str""+ windowSize);
  }
  String serverURL=System.getProperty(SERVER_URL_PROP);
  if (serverURL == null) {
    serverURL=SERVER_URL_DEFAULT;
    System.setProperty(SERVER_URL_PROP,serverURL);
  }
  Clip clip2=Clip.create(1000,new TimingTarget(){
    public void timingEvent(    float arg0,    long arg1){
    }
    public void begin(){
    }
    public void end(){
    }
    public void pause(){
    }
    public void resume(){
    }
  }
);
  clip2.setInterpolator(Interpolators.getEasingInstance(0.4f,0.4f));
  clip2.start();
  WorldManager worldManager=ClientContextJME.getWorldManager();
  String requestedFPS=System.getProperty(DESIRED_FPS_PROP,DESIRED_FPS_DEFAULT);
  if (requestedFPS != null) {
    try {
      desiredFrameRate=Integer.parseInt(requestedFPS);
    }
 catch (    NumberFormatException e) {
      LOGGER.warning(DESIRED_FPS_PROP + ""String_Node_Str"" + requestedFPS+ ""String_Node_Str"");
    }
  }
  worldManager.getRenderManager().setDesiredFrameRate(desiredFrameRate);
  createUI(worldManager);
  login=new JmeLoginUI(frame);
  LoginManager.setLoginUI(login);
  frame.addServerURLListener(new ServerURLListener(){
    public void serverURLChanged(    final String serverURL){
      new Thread(ThreadManager.getThreadGroup(),new Runnable(){
        public void run(){
          try {
            loadServer(serverURL);
          }
 catch (          IOException ioe) {
            LOGGER.log(Level.WARNING,""String_Node_Str"" + serverURL,ioe);
          }
        }
      }
).start();
    }
    public void logout(){
      new Thread(ThreadManager.getThreadGroup(),new Runnable(){
        public void run(){
          JmeClientMain.this.logout();
        }
      }
).start();
    }
  }
);
  try {
    loadServer(serverURL);
  }
 catch (  IOException ioe) {
    LOGGER.log(Level.WARNING,""String_Node_Str"" + serverURL,ioe);
  }
}"
45624,"/** 
 * Check we are running in a supported VM.
 */
private void checkVmVersion(){
  try {
    Class clazz=Class.forName(""String_Node_Str"");
  }
 catch (  ClassNotFoundException ex) {
    Logger.getAnonymousLogger().severe(""String_Node_Str"");
    JOptionPane.showMessageDialog(null,BUNDLE.getString(""String_Node_Str"") + ""String_Node_Str"" + BUNDLE.getString(""String_Node_Str"")+ ""String_Node_Str""+ BUNDLE.getString(""String_Node_Str"")+ ""String_Node_Str""+ BUNDLE.getString(""String_Node_Str"")+ ""String_Node_Str""+ BUNDLE.getString(""String_Node_Str""),BUNDLE.getString(""String_Node_Str""),JOptionPane.ERROR_MESSAGE);
    System.exit(1);
  }
}","/** 
 * Check we are running in a supported VM.
 */
private void checkVmVersion(){
  String version=System.getProperty(""String_Node_Str"");
  String[] tokens=version.split(""String_Node_Str"");
  if (tokens.length > 2) {
    if (Integer.parseInt(tokens[1]) < 6) {
      LOGGER.severe(""String_Node_Str"");
      String errorMessage=BUNDLE.getString(""String_Node_Str"") + ""String_Node_Str"" + BUNDLE.getString(os == OS.OSX ? ""String_Node_Str"" : ""String_Node_Str"");
      JOptionPane.showMessageDialog(null,errorMessage,BUNDLE.getString(""String_Node_Str""),JOptionPane.ERROR_MESSAGE);
      System.exit(1);
    }
  }
 else {
    LOGGER.warning(""String_Node_Str"" + version + '\""');
  }
}"
45625,"/** 
 * {@inheritDoc}
 */
public <T extends CellServerState>T getDefaultCellServerState(Properties props){
  URL url=null;
  if (props != null) {
    String uri=props.getProperty(""String_Node_Str"");
    if (uri != null) {
      try {
        url=AssetUtils.getAssetURL(uri);
      }
 catch (      MalformedURLException excp) {
        LOGGER.log(Level.WARNING,""String_Node_Str"" + uri,excp);
        url=null;
      }
    }
  }
  if (url == null) {
    LOGGER.warning(""String_Node_Str"");
    return null;
  }
  LOGGER.warning(""String_Node_Str"" + url.toExternalForm());
  LoaderManager lm=LoaderManager.getLoaderManager();
  DeployedModel dm=null;
  try {
    dm=lm.getLoaderFromDeployment(url);
  }
 catch (  IOException excp) {
    LOGGER.log(Level.WARNING,""String_Node_Str"" + url.toExternalForm(),excp);
    return null;
  }
  ModelCellServerState cellSetup=new ModelCellServerState();
  ModelCellComponentServerState setup=new ModelCellComponentServerState();
  setup.setDeployedModelURL(url.toExternalForm());
  cellSetup.addComponentServerState(setup);
  cellSetup.setName(""String_Node_Str"");
  return (T)cellSetup;
}","/** 
 * {@inheritDoc}
 */
public <T extends CellServerState>T getDefaultCellServerState(Properties props){
  URL url=null;
  if (props != null) {
    String uri=props.getProperty(""String_Node_Str"");
    if (uri != null) {
      try {
        url=AssetUtils.getAssetURL(uri);
      }
 catch (      MalformedURLException excp) {
        LOGGER.log(Level.WARNING,""String_Node_Str"" + uri,excp);
        url=null;
      }
    }
  }
  if (url == null) {
    LOGGER.warning(""String_Node_Str"");
    return null;
  }
  LOGGER.warning(""String_Node_Str"" + url.toExternalForm());
  LoaderManager lm=LoaderManager.getLoaderManager();
  DeployedModel dm=null;
  try {
    dm=lm.getLoaderFromDeployment(url);
  }
 catch (  IOException excp) {
    LOGGER.log(Level.WARNING,""String_Node_Str"" + url.toExternalForm(),excp);
    return null;
  }
  ModelLoader loader=dm.getModelLoader();
  Node node=loader.loadDeployedModel(dm,null);
  BoundingVolume bounds=node.getWorldBound();
  BoundingVolumeHint hint=getBoundingVolumeHint(bounds);
  ModelCellServerState state=new ModelCellServerState();
  ModelCellComponentServerState compState=new ModelCellComponentServerState();
  compState.setDeployedModelURL(url.toExternalForm());
  state.addComponentServerState(compState);
  state.setBoundingVolumeHint(hint);
  state.setName(getFileName(url));
  return (T)state;
}"
45626,"/** 
 * Adds a new server session for this manager to track and performs an initial synchronization with the avatar configurations found on that server. This method blocks until the initial synchronization is complete, or has been interrupted.
 * @param session The new session to add
 * @throw InterruptedException If the initialization has been interrupted
 */
public void addServerAndSync(ServerSessionManager session) throws InterruptedException {
synchronized (this) {
    logger.info(""String_Node_Str"" + session.getServerURL());
synchronized (avatarConfigServers) {
      if (avatarConfigServers.containsKey(session) == true) {
        logger.info(""String_Node_Str"" + session.getServerURL() + ""String_Node_Str"");
        return;
      }
    }
    ServerSyncThread t=null;
    try {
      logger.info(""String_Node_Str"" + session.getServerURL());
      t=new ServerSyncThread(session);
      t.scheduleSync(true);
      logger.info(""String_Node_Str"" + session.getServerURL() + ""String_Node_Str"");
    }
 catch (    ContentRepositoryException excp) {
      logger.log(Level.WARNING,""String_Node_Str"" + ""String_Node_Str"" + session.getServerURL(),excp);
      return;
    }
synchronized (avatarConfigServers) {
      avatarConfigServers.put(session,t);
      logger.info(""String_Node_Str"" + session.getServerURL() + ""String_Node_Str"");
    }
  }
}","/** 
 * Adds a new server session for this manager to track and performs an initial synchronization with the avatar configurations found on that server. This method blocks until the initial synchronization is complete, or has been interrupted.
 * @param session The new session to add
 * @throw InterruptedException If the initialization has been interrupted
 */
public void addServerAndSync(ServerSessionManager session) throws InterruptedException {
synchronized (this) {
    logger.warning(""String_Node_Str"" + session.getServerURL());
synchronized (avatarConfigServers) {
      if (avatarConfigServers.containsKey(session) == true) {
        logger.info(""String_Node_Str"" + session.getServerURL() + ""String_Node_Str"");
        return;
      }
    }
    ServerSyncThread t=null;
    try {
      logger.info(""String_Node_Str"" + session.getServerURL());
      t=new ServerSyncThread(session);
      t.scheduleSync(true);
      logger.info(""String_Node_Str"" + session.getServerURL() + ""String_Node_Str"");
    }
 catch (    ContentRepositoryException excp) {
      logger.log(Level.WARNING,""String_Node_Str"" + ""String_Node_Str"" + session.getServerURL(),excp);
      return;
    }
synchronized (avatarConfigServers) {
      avatarConfigServers.put(session,t);
      logger.info(""String_Node_Str"" + session.getServerURL() + ""String_Node_Str"");
    }
  }
}"
45627,"public ServerSyncThread(final ServerSessionManager manager) throws ContentRepositoryException {
  super(ThreadManager.getThreadGroup(),""String_Node_Str"");
  this.manager=manager;
  serverCollection=getBaseServerCollection(manager);
  manager.getPrimarySession().addSessionStatusListener(new SessionStatusListener(){
    public void sessionStatusChanged(    WonderlandSession session,    Status status){
      if (status == Status.DISCONNECTED) {
synchronized (avatarConfigServers) {
          avatarConfigServers.remove(manager);
          setConnected(false);
        }
      }
    }
  }
);
  this.start();
}","public ServerSyncThread(final ServerSessionManager manager) throws ContentRepositoryException {
  super(ThreadManager.getThreadGroup(),""String_Node_Str"");
  this.manager=manager;
  serverCollection=getBaseServerCollection(manager);
  this.start();
}"
45628,"/** 
 * Removes the session from being managed. If it is not being managed, this method does nothing.
 * @param session The session to remove.
 */
public void removeServer(ServerSessionManager session){
synchronized (avatarConfigServers) {
    avatarConfigServers.remove(session);
  }
}","/** 
 * Removes the session from being managed. If it is not being managed, this method does nothing.
 * @param session The session to remove.
 */
public void removeServer(ServerSessionManager session){
  logger.warning(""String_Node_Str"" + session.getServerURL());
synchronized (avatarConfigServers) {
    ServerSyncThread t=avatarConfigServers.remove(session);
    logger.warning(""String_Node_Str"" + t);
    if (t != null) {
      t.setConnected(false);
    }
  }
}"
45629,"/** 
 * Returns the content repository root for the current user, or null upon error.
 */
private ContentCollection getUserRoot(){
  ContentRepositoryRegistry registry=ContentRepositoryRegistry.getInstance();
  ContentRepository repo=registry.getRepository(loginInfo);
  try {
    return repo.getUserRoot();
  }
 catch (  ContentRepositoryException excp) {
    logger.log(Level.WARNING,""String_Node_Str"",excp);
    return null;
  }
}","/** 
 * Returns the content repository root for the current user, or null upon error.
 */
private ContentCollection getUserRoot(){
  ContentRepositoryRegistry reg=ContentRepositoryRegistry.getInstance();
  ContentRepository repo=reg.getRepository(loginInfo);
  try {
    return repo.getUserRoot();
  }
 catch (  ContentRepositoryException excp) {
    LOGGER.log(Level.WARNING,""String_Node_Str"",excp);
    return null;
  }
}"
45630,"/** 
 * Check to see if the model already exists on the server. If so, return the ContentResource of the model's .dep file, or null otherwise.
 */
private ContentResource isContentExists(File file){
  String fileName=""String_Node_Str"" + file.getName() + ""String_Node_Str""+ file.getName()+ ""String_Node_Str"";
  ContentCollection userRoot=getUserRoot();
  try {
    ContentNode node=userRoot.getChild(fileName);
    if (node != null && node instanceof ContentResource) {
      return (ContentResource)node;
    }
    return null;
  }
 catch (  ContentRepositoryException excp) {
    logger.log(Level.WARNING,""String_Node_Str"" + fileName + ""String_Node_Str"",excp);
    return null;
  }
}","/** 
 * {@inheritDoc}
 */
@Override public String isContentExists(File file){
  String fileName=""String_Node_Str"" + file.getName() + ""String_Node_Str""+ file.getName()+ ""String_Node_Str"";
  ContentCollection userRoot=getUserRoot();
  try {
    ContentNode node=userRoot.getChild(fileName);
    if (node != null && node instanceof ContentResource) {
      return getModelURI(file);
    }
    return null;
  }
 catch (  ContentRepositoryException excp) {
    LOGGER.log(Level.WARNING,""String_Node_Str"" + fileName + ""String_Node_Str"",excp);
    return null;
  }
}"
45631,"public AvatarControls(){
  m_inputClient=new DefaultCharacterControls(ClientContextJME.getWorldManager());
  inputGroup=new InputClientGroup();
  inputGroup.setScheme(m_inputClient);
}","public AvatarControls(){
  m_inputClient=new DefaultCharacterControls(ClientContextJME.getWorldManager());
  inputGroup=new InputClientGroup();
  inputGroup.setScheme(m_inputClient);
  ClientContext.getInputManager().addGlobalEventListener(new EventClassListener(){
    private Class[] consumeClasses=new Class[]{FocusEvent3D.class};
    @Override public Class[] eventClassesToConsume(){
      return consumeClasses;
    }
    @Override public void commitEvent(    Event event){
    }
    @Override public void computeEvent(    Event evtIn){
      FocusEvent3D focus=(FocusEvent3D)evtIn;
      if (!focus.isGained()) {
        Component source=ClientContextJME.getClientMain().getFrame().getCanvas();
synchronized (events) {
          for (          Integer pressed : currentPressedKeys) {
            KeyEvent ke=new KeyEvent(source,KeyEvent.KEY_RELEASED,System.currentTimeMillis(),0,pressed.intValue(),KeyEvent.CHAR_UNDEFINED);
            inputGroup.processKeyEvent(ke);
          }
          currentPressedKeys.clear();
        }
      }
    }
  }
);
}"
45632,"@Override public void compute(ProcessorArmingCollection arg0){
  for (  Event evt : events) {
    if (evt instanceof KeyEvent3D && evt.isFocussed()) {
      KeyEvent ke=(KeyEvent)((KeyEvent3D)evt).getAwtEvent();
      inputGroup.processKeyEvent(ke);
    }
 else     if (evt instanceof MouseEvent3D && evt.isFocussed()) {
      MouseEvent me=(MouseEvent)((MouseEvent3D)evt).getAwtEvent();
      inputGroup.processMouseEvent(me);
    }
  }
  events.clear();
}","@Override public void compute(ProcessorArmingCollection arg0){
  LinkedList<Event> delayedEvents=new LinkedList();
  HashSet<Integer> pressedKeys=new HashSet();
synchronized (events) {
    for (    Event evt : events) {
      if (evt instanceof KeyEvent3D && evt.isFocussed()) {
        KeyEvent ke=(KeyEvent)((KeyEvent3D)evt).getAwtEvent();
        if (ke.getID() == ke.KEY_PRESSED) {
          pressedKeys.add(ke.getKeyCode());
          currentPressedKeys.add(ke.getKeyCode());
          inputGroup.processKeyEvent(ke);
        }
 else         if (ke.getID() == ke.KEY_RELEASED) {
          if (pressedKeys.contains(ke.getKeyCode())) {
            delayedEvents.add(evt);
          }
 else {
            currentPressedKeys.remove(ke.getKeyCode());
            inputGroup.processKeyEvent(ke);
          }
        }
      }
 else       if (evt instanceof MouseEvent3D && evt.isFocussed()) {
        MouseEvent me=(MouseEvent)((MouseEvent3D)evt).getAwtEvent();
        inputGroup.processMouseEvent(me);
      }
    }
    events.clear();
    events.addAll(delayedEvents);
  }
  frameNum++;
}"
45633,"private void error(final String msg){
  final javax.swing.JPanel panel=this;
  java.awt.EventQueue.invokeLater(new Runnable(){
    public void run(){
      System.out.println(msg);
      String title=""String_Node_Str"";
      javax.swing.JOptionPane.showMessageDialog(panel,msg,title,javax.swing.JOptionPane.ERROR_MESSAGE);
    }
  }
);
}","private void error(final String msg) throws Exception {
  final javax.swing.JPanel panel=this;
  java.awt.EventQueue.invokeLater(new Runnable(){
    public void run(){
      System.out.println(msg);
      String title=""String_Node_Str"";
      javax.swing.JOptionPane.showMessageDialog(panel,msg,title,javax.swing.JOptionPane.ERROR_MESSAGE);
    }
  }
);
  throw new Exception(msg);
}"
45634,"private void fileRadioButtonActionPerformed(java.awt.event.ActionEvent evt){
  if (treatmentType.equals(TreatmentType.FILE) == false) {
    treatmentTextField.setText(""String_Node_Str"");
  }
 else {
    if (lastFileTreatment != null) {
      treatmentTextField.setText(lastFileTreatment);
    }
  }
  treatmentType=TreatmentType.FILE;
  browseButton.setEnabled(true);
}","private void fileRadioButtonActionPerformed(java.awt.event.ActionEvent evt){
  if (fileRadioButton.isSelected() == false) {
    return;
  }
  if (treatmentType.equals(TreatmentType.FILE) == false) {
    if (lastFileTreatment != null) {
      treatmentTextField.setText(lastFileTreatment);
    }
 else {
      treatmentTextField.setText(""String_Node_Str"");
    }
  }
  treatmentType=TreatmentType.FILE;
  browseButton.setEnabled(true);
}"
45635,"/** 
 * @{inheritDoc }
 */
public void apply(){
  CellServerState state=editor.getCellServerState();
  AudioTreatmentComponentServerState compState=(AudioTreatmentComponentServerState)state.getComponentServerState(AudioTreatmentComponentServerState.class);
  if (state == null) {
    return;
  }
  compState.setGroupId(audioGroupIdTextField.getText().trim());
  String treatments=treatmentTextField.getText().trim();
  compState.setTreatmentType(treatmentType);
  compState.setTreatments(treatments.split(""String_Node_Str""));
  compState.setPlayWhen(playWhen);
  compState.setPlayOnce(playOnce);
  compState.setExtent((Float)extentRadiusModel.getValue());
  compState.setUseCellBounds(useCellBounds);
  compState.setFullVolumeAreaPercent((Float)fullVolumeAreaPercentModel.getValue());
  compState.setDistanceAttenuated(distanceAttenuated);
  compState.setFalloff(falloffSlider.getValue());
  editor.addToUpdateList(compState);
  if (currentCell != null && currentCell.getCellID().equals(editor.getCell().getCellID()) == false) {
    statusLabel.setText(""String_Node_Str"");
  }
  if (treatments != null) {
switch (treatmentType) {
case FILE:
      lastFileTreatment=treatments;
    uploadFileTreatments();
  break;
case CONTENT_REPOSITORY:
lastContentRepositoryTreatment=treatmentTextField.getText();
break;
case URL:
lastURLTreatment=treatmentTextField.getText();
break;
}
}
}","/** 
 * @{inheritDoc }
 */
public void apply(){
  CellServerState state=editor.getCellServerState();
  AudioTreatmentComponentServerState compState=(AudioTreatmentComponentServerState)state.getComponentServerState(AudioTreatmentComponentServerState.class);
  if (state == null) {
    return;
  }
  compState.setGroupId(audioGroupIdTextField.getText().trim());
  String treatments=treatmentTextField.getText().trim();
  compState.setTreatmentType(treatmentType);
  compState.setTreatments(treatments.split(""String_Node_Str""));
  compState.setPlayWhen(playWhen);
  compState.setPlayOnce(playOnce);
  compState.setExtent((Float)extentRadiusModel.getValue());
  compState.setUseCellBounds(useCellBounds);
  compState.setFullVolumeAreaPercent((Float)fullVolumeAreaPercentModel.getValue());
  compState.setDistanceAttenuated(distanceAttenuated);
  compState.setFalloff(falloffSlider.getValue());
  editor.addToUpdateList(compState);
  if (currentCell != null && currentCell.getCellID().equals(editor.getCell().getCellID()) == false) {
    statusLabel.setText(""String_Node_Str"");
  }
  if (treatments != null && treatments.length() > 0) {
switch (treatmentType) {
case FILE:
      lastFileTreatment=treatments;
    try {
      statusLabel.setText(""String_Node_Str"" + treatments);
      uploadFileTreatments();
    }
 catch (    Exception e) {
      statusLabel.setText(""String_Node_Str"" + treatments);
      break;
    }
  ServerSessionManager serverSessionManager=LoginManager.getPrimary();
contentRepositoryRadioButton.doClick();
compState.setTreatmentType(TreatmentType.CONTENT_REPOSITORY);
int ix=treatments.lastIndexOf(""String_Node_Str"");
if (ix >= 0) {
treatments=treatments.substring(ix + 1);
}
String contentRepositoryTreatment=""String_Node_Str"" + serverSessionManager.getUsername() + ""String_Node_Str""+ treatments;
compState.setTreatments(new String[]{contentRepositoryTreatment});
treatmentTextField.setText(contentRepositoryTreatment);
lastContentRepositoryTreatment=treatmentTextField.getText();
break;
case CONTENT_REPOSITORY:
lastContentRepositoryTreatment=treatmentTextField.getText();
break;
case URL:
lastURLTreatment=treatmentTextField.getText();
break;
}
}
}"
45636,"private void URLRadioButtonActionPerformed(java.awt.event.ActionEvent evt){
  if (treatmentType.equals(TreatmentType.URL) == false) {
    treatmentTextField.setText(""String_Node_Str"");
  }
 else {
    if (lastURLTreatment != null) {
      treatmentTextField.setText(lastURLTreatment);
    }
  }
  treatmentType=TreatmentType.URL;
  browseButton.setEnabled(false);
}","private void URLRadioButtonActionPerformed(java.awt.event.ActionEvent evt){
  if (URLRadioButton.isSelected() == false) {
    return;
  }
  if (treatmentType.equals(TreatmentType.URL) == false) {
    if (lastURLTreatment != null) {
      treatmentTextField.setText(lastURLTreatment);
    }
 else {
      treatmentTextField.setText(""String_Node_Str"");
    }
  }
  treatmentType=TreatmentType.URL;
  browseButton.setEnabled(false);
}"
45637,"private void contentRepositoryRadioButtonActionPerformed(java.awt.event.ActionEvent evt){
  if (treatmentType.equals(TreatmentType.CONTENT_REPOSITORY) == false) {
    treatmentTextField.setText(""String_Node_Str"");
  }
 else {
    if (lastContentRepositoryTreatment != null) {
      treatmentTextField.setText(lastContentRepositoryTreatment);
    }
  }
  treatmentType=TreatmentType.CONTENT_REPOSITORY;
  browseButton.setEnabled(true);
}","private void contentRepositoryRadioButtonActionPerformed(java.awt.event.ActionEvent evt){
  if (contentRepositoryRadioButton.isSelected() == false) {
    return;
  }
  if (treatmentType.equals(TreatmentType.CONTENT_REPOSITORY) == false) {
    if (lastContentRepositoryTreatment != null) {
      treatmentTextField.setText(lastContentRepositoryTreatment);
    }
 else {
      treatmentTextField.setText(""String_Node_Str"");
    }
  }
  treatmentType=TreatmentType.CONTENT_REPOSITORY;
  browseButton.setEnabled(true);
}"
45638,"private void uploadFileTreatments(){
  String pattern=""String_Node_Str"";
  String s=lastFileTreatment;
  int ix=lastFileTreatment.indexOf(pattern);
  if (ix >= 0) {
    s=s.substring(ix + pattern.length());
  }
  File file=new File(s);
  if (file.exists() == false) {
    error(""String_Node_Str"" + file);
    return;
  }
  ContentRepositoryRegistry registry=ContentRepositoryRegistry.getInstance();
  ContentRepository repo=registry.getRepository(LoginManager.getPrimary());
  ContentCollection audioCollection;
  try {
    ContentCollection c=repo.getUserRoot();
    audioCollection=(ContentCollection)c.getChild(""String_Node_Str"");
    if (audioCollection == null) {
      audioCollection=(ContentCollection)c.createChild(""String_Node_Str"",Type.COLLECTION);
    }
  }
 catch (  ContentRepositoryException e) {
    error(""String_Node_Str"" + e.getMessage());
    return;
  }
  try {
    ContentResource r=(ContentResource)audioCollection.removeChild(file.getName());
  }
 catch (  Exception e) {
  }
  try {
    ContentResource r=(ContentResource)audioCollection.createChild(file.getName(),ContentNode.Type.RESOURCE);
    r.put(file);
  }
 catch (  Exception e) {
    error(""String_Node_Str"" + file + ""String_Node_Str""+ e.getMessage());
  }
}","private void uploadFileTreatments() throws Exception {
  String pattern=""String_Node_Str"";
  String s=lastFileTreatment;
  int ix=lastFileTreatment.indexOf(pattern);
  if (ix >= 0) {
    s=s.substring(ix + pattern.length());
  }
  File file=new File(s);
  if (file.exists() == false) {
    error(""String_Node_Str"" + file);
    return;
  }
  ContentRepositoryRegistry registry=ContentRepositoryRegistry.getInstance();
  ContentRepository repo=registry.getRepository(LoginManager.getPrimary());
  ContentCollection audioCollection;
  try {
    ContentCollection c=repo.getUserRoot();
    audioCollection=(ContentCollection)c.getChild(""String_Node_Str"");
    if (audioCollection == null) {
      audioCollection=(ContentCollection)c.createChild(""String_Node_Str"",Type.COLLECTION);
    }
  }
 catch (  ContentRepositoryException e) {
    error(""String_Node_Str"" + e.getMessage());
    return;
  }
  try {
    ContentResource r=(ContentResource)audioCollection.removeChild(file.getName());
  }
 catch (  Exception e) {
  }
  try {
    ContentResource r=(ContentResource)audioCollection.createChild(file.getName(),ContentNode.Type.RESOURCE);
    r.put(file);
  }
 catch (  Exception e) {
    error(""String_Node_Str"" + file + ""String_Node_Str""+ e.getMessage());
  }
}"
45639,"/** 
 * @{inheritDoc }
 */
public void open(){
  CellServerState state=editor.getCellServerState();
  AudioTreatmentComponentServerState compState=(AudioTreatmentComponentServerState)state.getComponentServerState(AudioTreatmentComponentServerState.class);
  if (state == null) {
    return;
  }
  originalGroupId=compState.getGroupId();
  String[] treatmentList=compState.getTreatments();
  originalTreatmentType=compState.getTreatmentType();
  originalTreatments=""String_Node_Str"";
  for (int i=0; i < treatmentList.length; i++) {
    String treatment=treatmentList[i];
    if (treatment.length() == 0) {
      break;
    }
    originalTreatments+=treatment;
    break;
  }
  originalTreatments=originalTreatments.trim();
  originalVolume=VolumeUtil.getClientVolume(compState.getVolume());
  originalPlayWhen=compState.getPlayWhen();
  playWhen=originalPlayWhen;
  originalPlayOnce=compState.getPlayOnce();
  originalExtentRadius=(float)compState.getExtent();
  extentRadius=originalExtentRadius;
  originalFullVolumeAreaPercent=(float)compState.getFullVolumeAreaPercent();
  originalDistanceAttenuated=compState.getDistanceAttenuated();
  distanceAttenuated=originalDistanceAttenuated;
  originalFalloff=(int)compState.getFalloff();
  originalUseCellBounds=compState.getUseCellBounds();
  BoundingVolume bounds=editor.getCell().getLocalBounds();
  if (originalUseCellBounds == true && bounds instanceof BoundingBox) {
    originalDistanceAttenuated=false;
    distanceAttenuated=false;
  }
  originalShowBounds=compState.getShowBounds();
  restore();
  if (currentCell == null) {
    currentCell=editor.getCell();
    AudioTreatmentComponent component=currentCell.getComponent(AudioTreatmentComponent.class);
    component.addTreatmentStatusListener(this);
  }
}","/** 
 * @{inheritDoc }
 */
public void open(){
  CellServerState state=editor.getCellServerState();
  AudioTreatmentComponentServerState compState=(AudioTreatmentComponentServerState)state.getComponentServerState(AudioTreatmentComponentServerState.class);
  if (state == null) {
    return;
  }
  originalGroupId=compState.getGroupId();
  String[] treatmentList=compState.getTreatments();
  originalTreatmentType=compState.getTreatmentType();
  treatmentType=originalTreatmentType;
  originalTreatments=""String_Node_Str"";
  for (int i=0; i < treatmentList.length; i++) {
    String treatment=treatmentList[i];
    if (treatment.length() == 0) {
      break;
    }
    originalTreatments+=treatment;
    break;
  }
  originalTreatments=originalTreatments.trim();
  originalVolume=VolumeUtil.getClientVolume(compState.getVolume());
  originalPlayWhen=compState.getPlayWhen();
  playWhen=originalPlayWhen;
  originalPlayOnce=compState.getPlayOnce();
  originalExtentRadius=(float)compState.getExtent();
  extentRadius=originalExtentRadius;
  originalFullVolumeAreaPercent=(float)compState.getFullVolumeAreaPercent();
  originalDistanceAttenuated=compState.getDistanceAttenuated();
  distanceAttenuated=originalDistanceAttenuated;
  originalFalloff=(int)compState.getFalloff();
  originalUseCellBounds=compState.getUseCellBounds();
  BoundingVolume bounds=editor.getCell().getLocalBounds();
  if (originalUseCellBounds == true && bounds instanceof BoundingBox) {
    originalDistanceAttenuated=false;
    distanceAttenuated=false;
  }
  originalShowBounds=compState.getShowBounds();
  restore();
  if (currentCell == null) {
    currentCell=editor.getCell();
    AudioTreatmentComponent component=currentCell.getComponent(AudioTreatmentComponent.class);
    component.addTreatmentStatusListener(this);
  }
}"
45640,"public void triggerGoto(Vector3f position,Quaternion look){
  CellTransform transform=new CellTransform();
  transform.setRotation(look);
  transform.setTranslation(position);
  cell.getComponent(MovableComponent.class).localMoveRequest(transform);
  avatarCharacter.getModelInst().setTransform(new PTransform(look,position,new Vector3f(1,1,1)));
}","public void triggerGoto(Vector3f position,Quaternion look){
  CellTransform transform=new CellTransform();
  transform.setRotation(look);
  transform.setTranslation(position);
  cell.getComponent(MovableComponent.class).localMoveRequest(transform);
  if (avatarCharacter != null)   avatarCharacter.getModelInst().setTransform(new PTransform(look,position,new Vector3f(1,1,1)));
}"
45641,"public AvatarImiJME(Cell cell){
  super(cell);
  assert(cell != null);
  final Cell c=cell;
  AvatarConfigComponent comp=cell.getComponent(AvatarConfigComponent.class);
  comp.addAvatarConfigChangeListener(new AvatarChangeListener());
  if (cell instanceof AvatarCell)   username=((AvatarCell)cell).getIdentity().getUsername();
 else   username=""String_Node_Str"";
  characterMotionListener=new CharacterMotionListener(){
    Vector3f prevTrans;
    PMatrix prevRot;
    public void transformUpdate(    Vector3f translation,    PMatrix rotation){
      if (logger.isLoggable(Level.FINEST)) {
        logger.finest(""String_Node_Str"" + prevTrans + ""String_Node_Str""+ translation+ ""String_Node_Str""+ prevRot+ ""String_Node_Str""+ rotation);
      }
      if (prevTrans == null || !Math3DUtils.epsilonEquals(prevTrans,translation,0.001f) || prevRot == null || !prevRot.epsilonEquals(rotation,0.001f)) {
        ((MovableAvatarComponent)c.getComponent(MovableComponent.class)).localMoveRequest(new CellTransform(rotation.getRotation(),translation));
        prevTrans=translation.clone();
        prevRot=new PMatrix(rotation);
      }
    }
  }
;
  gameContextListener=new GameContextListener(){
    public void trigger(    boolean pressed,    int trigger,    Vector3f translation,    Quaternion rotation){
synchronized (this) {
        currentTrigger=trigger;
        currentPressed=pressed;
      }
      GameState state=avatarCharacter.getContext().getCurrentState();
      String animationName=null;
      if (state instanceof CycleActionState) {
        animationName=avatarCharacter.getContext().getState(CycleActionState.class).getAnimationName();
      }
      if (c.getComponent(MovableComponent.class) == null)       logger.warning(""String_Node_Str"");
 else       ((MovableAvatarComponent)c.getComponent(MovableComponent.class)).localMoveRequest(new CellTransform(rotation,translation),trigger,pressed,animationName,null);
    }
  }
;
  ClientContext.getInputManager().addGlobalEventListener(new EventClassListener(){
    private Class[] consumeClasses=new Class[]{AvatarRendererChangeRequestEvent.class,AvatarNameEvent.class};
    @Override public Class[] eventClassesToConsume(){
      return consumeClasses;
    }
    @Override public void commitEvent(    Event event){
      if (event instanceof AvatarNameEvent) {
        AvatarNameEvent e=(AvatarNameEvent)event;
        NameTagNode nameTagNode=getNameTagNode();
        if (e.getUsername().equals(username) == true) {
          nameTagNode.setNameTag(e.getEventType(),username,e.getUsernameAlias());
        }
      }
 else       if (event instanceof AvatarRendererChangeRequestEvent) {
        handleAvatarRendererChangeRequest((AvatarRendererChangeRequestEvent)event);
      }
    }
    @Override public void computeEvent(    Event evtIn){
    }
  }
);
  collisionChangeRequestListener=new CollisionChangeRequestListener();
  ClientContext.getInputManager().addGlobalEventListener(collisionChangeRequestListener);
}","public AvatarImiJME(Cell cell){
  super(cell);
  assert(cell != null);
  final Cell c=cell;
  AvatarConfigComponent comp=cell.getComponent(AvatarConfigComponent.class);
  comp.addAvatarConfigChangeListener(new AvatarChangeListener());
  if (cell instanceof AvatarCell)   username=((AvatarCell)cell).getIdentity().getUsername();
 else   username=""String_Node_Str"";
  characterMotionListener=new CharacterMotionListener(){
    Vector3f prevTrans;
    PMatrix prevRot;
    public void transformUpdate(    Vector3f translation,    PMatrix rotation){
      if (logger.isLoggable(Level.FINEST)) {
        logger.finest(""String_Node_Str"" + prevTrans + ""String_Node_Str""+ translation+ ""String_Node_Str""+ prevRot+ ""String_Node_Str""+ rotation);
      }
      if (prevTrans == null || !Math3DUtils.epsilonEquals(prevTrans,translation,0.001f) || prevRot == null || !prevRot.epsilonEquals(rotation,0.001f)) {
        ((MovableAvatarComponent)c.getComponent(MovableComponent.class)).localMoveRequest(new CellTransform(rotation.getRotation(),translation));
        prevTrans=translation.clone();
        prevRot=new PMatrix(rotation);
      }
    }
  }
;
  gameContextListener=new GameContextListener(){
    public void trigger(    boolean pressed,    int trigger,    Vector3f translation,    Quaternion rotation){
synchronized (this) {
        currentTrigger=trigger;
        currentPressed=pressed;
      }
      GameState state=avatarCharacter.getContext().getCurrentState();
      String animationName=null;
      if (state instanceof CycleActionState) {
        animationName=avatarCharacter.getContext().getState(CycleActionState.class).getAnimationName();
      }
      if (c.getComponent(MovableComponent.class) == null)       logger.warning(""String_Node_Str"");
 else       ((MovableAvatarComponent)c.getComponent(MovableComponent.class)).localMoveRequest(new CellTransform(rotation,translation),trigger,pressed,animationName,null);
    }
  }
;
  ClientContext.getInputManager().addGlobalEventListener(new EventClassListener(){
    private Class[] consumeClasses=new Class[]{AvatarRendererChangeRequestEvent.class,AvatarNameEvent.class};
    @Override public Class[] eventClassesToConsume(){
      return consumeClasses;
    }
    @Override public void commitEvent(    Event event){
      if (event instanceof AvatarNameEvent) {
        AvatarNameEvent e=(AvatarNameEvent)event;
        NameTagNode nameTagNode=getNameTagNode();
        if (nameTagNode != null && e.getUsername().equals(username) == true) {
          nameTagNode.setNameTag(e.getEventType(),username,e.getUsernameAlias());
        }
      }
 else       if (event instanceof AvatarRendererChangeRequestEvent) {
        handleAvatarRendererChangeRequest((AvatarRendererChangeRequestEvent)event);
      }
    }
    @Override public void computeEvent(    Event evtIn){
    }
  }
);
  collisionChangeRequestListener=new CollisionChangeRequestListener();
  ClientContext.getInputManager().addGlobalEventListener(collisionChangeRequestListener);
}"
45642,"/** 
 * Change the current avatar to the given avatar. NOTE: This method must be called in the MT Game Render Thread. As such, we assume only one of these methods is called at a time.
 * @param newAvatar The new avatar to change to.
 */
private void changeAvatarInternal(WlAvatarCharacter newAvatar){
  if (newAvatar == null)   return;
  LoadingInfo.startedLoading(cell.getCellID(),newAvatar.getName());
  Node nameTagNode=getNameTagNode();
  PMatrix currentLocation=null;
  boolean wasSelectedForInput=false;
  if (avatarCharacter != null) {
    currentLocation=avatarCharacter.getModelInst().getTransform().getWorldMatrix(true);
    rootEntity.removeEntity(avatarCharacter);
    avatarCharacter.getJScene().getExternalKidsRoot().detachChild(nameTagNode);
    wasSelectedForInput=selectedForInput;
    selectForInput(false);
    avatarCharacter.destroy();
  }
  avatarCharacter=newAvatar;
  if (newAvatar == null) {
    return;
  }
  RenderComponent rc=(RenderComponent)avatarCharacter.getComponent(RenderComponent.class);
  addDefaultComponents(avatarCharacter,rc.getSceneRoot());
  avatarCharacter.removeComponent(CollisionComponent.class);
  if (currentLocation != null && avatarCharacter.getModelInst() != null) {
    avatarCharacter.getModelInst().setTransform(new PTransform(currentLocation));
  }
  Node externalRoot=avatarCharacter.getJScene().getExternalKidsRoot();
  externalRoot.attachChild(nameTagNode);
  externalRoot.setModelBound(new BoundingSphere());
  externalRoot.updateModelBound();
  externalRoot.updateGeometricState(0,true);
  rootEntity.addEntity(avatarCharacter);
  if (cell instanceof AvatarCell) {
    selectForInput(((AvatarCell)cell).isSelectedForInput());
  }
  for (  WeakReference<AvatarChangedListener> listenerRef : avatarChangedListeners) {
    AvatarChangedListener listener=listenerRef.get();
    if (listener != null) {
      listener.avatarChanged(avatarCharacter);
    }
 else {
      avatarChangedListeners.remove(listenerRef);
    }
  }
  if (avatarCharacter.getJScene() != null) {
    avatarCharacter.getPScene().submitTransformsAndGeometry(true);
    avatarCharacter.getJScene().setModelBound(new BoundingSphere());
    avatarCharacter.getJScene().updateModelBound();
    avatarCharacter.getJScene().updateWorldBound();
  }
  LoadingInfo.finishedLoading(cell.getCellID(),newAvatar.getName());
}","/** 
 * Change the current avatar to the given avatar. NOTE: This method must be called in the MT Game Render Thread. As such, we assume only one of these methods is called at a time.
 * @param newAvatar The new avatar to change to.
 */
private void changeAvatarInternal(WlAvatarCharacter newAvatar){
  if (newAvatar == null)   return;
  LoadingInfo.startedLoading(cell.getCellID(),newAvatar.getName());
  Node nameTagNode=getNameTagNode();
  PMatrix currentLocation=null;
  if (avatarCharacter != null) {
    currentLocation=avatarCharacter.getModelInst().getTransform().getWorldMatrix(true);
    rootEntity.removeEntity(avatarCharacter);
    avatarCharacter.getJScene().getExternalKidsRoot().detachChild(nameTagNode);
    selectForInput(false);
    avatarCharacter.destroy();
  }
  avatarCharacter=newAvatar;
  if (newAvatar == null) {
    return;
  }
  RenderComponent rc=(RenderComponent)avatarCharacter.getComponent(RenderComponent.class);
  addDefaultComponents(avatarCharacter,rc.getSceneRoot());
  avatarCharacter.removeComponent(CollisionComponent.class);
  if (currentLocation != null && avatarCharacter.getModelInst() != null) {
    avatarCharacter.getModelInst().setTransform(new PTransform(currentLocation));
  }
  Node externalRoot=avatarCharacter.getJScene().getExternalKidsRoot();
  if (nameTagNode != null) {
    externalRoot.attachChild(nameTagNode);
    externalRoot.setModelBound(new BoundingSphere());
    externalRoot.updateModelBound();
    externalRoot.updateGeometricState(0,true);
  }
  rootEntity.addEntity(avatarCharacter);
  if (cell instanceof AvatarCell) {
    selectForInput(((AvatarCell)cell).isSelectedForInput());
  }
  for (  WeakReference<AvatarChangedListener> listenerRef : avatarChangedListeners) {
    AvatarChangedListener listener=listenerRef.get();
    if (listener != null) {
      listener.avatarChanged(avatarCharacter);
    }
 else {
      avatarChangedListeners.remove(listenerRef);
    }
  }
  if (avatarCharacter.getJScene() != null) {
    avatarCharacter.getPScene().submitTransformsAndGeometry(true);
    avatarCharacter.getJScene().setModelBound(new BoundingSphere());
    avatarCharacter.getJScene().updateModelBound();
    avatarCharacter.getJScene().updateWorldBound();
  }
  LoadingInfo.finishedLoading(cell.getCellID(),newAvatar.getName());
}"
45643,"/** 
 * {@inheritDoc}
 */
@Override public void setStatus(CellStatus status,boolean increasing){
  super.setStatus(status,increasing);
  logger.info(""String_Node_Str"" + status + ""String_Node_Str""+ increasing);
  if (status == CellStatus.ACTIVE && increasing == true) {
    if (cellMoveListener != null) {
      cell.getComponent(MovableComponent.class).removeServerCellMoveListener(cellMoveListener);
      cellMoveListener=null;
    }
    if (avatarCharacter == null) {
      AvatarConfigComponent configComp=cell.getComponent(AvatarConfigComponent.class);
      AvatarConfigInfo avatarConfigInfo=null;
      if (configComp != null) {
        avatarConfigInfo=configComp.getAvatarConfigInfo();
      }
      logger.info(""String_Node_Str"" + avatarConfigInfo);
      pendingAvatar=loadAvatar(avatarConfigInfo);
    }
 else {
      ClientContextJME.getWorldManager().removeEntity(avatarCharacter);
      pendingAvatar=null;
    }
    logger.info(""String_Node_Str"");
    changeAvatar(pendingAvatar);
    if (cellMoveListener == null) {
      cellMoveListener=new CellMoveListener(){
        public void cellMoved(        CellTransform transform,        CellMoveSource source){
          if (source == CellMoveSource.REMOTE) {
            if (avatarCharacter != null) {
              if (avatarCharacter.getModelInst() == null) {
                logger.severe(""String_Node_Str"");
                Thread.dumpStack();
                return;
              }
              avatarCharacter.getModelInst().setTransform(new PTransform(transform.getRotation(null),transform.getTranslation(null),new Vector3f(1,1,1)));
            }
          }
        }
      }
;
    }
    cell.getComponent(MovableComponent.class).addServerCellMoveListener(cellMoveListener);
  }
}","/** 
 * {@inheritDoc}
 */
@Override public void setStatus(CellStatus status,boolean increasing){
  super.setStatus(status,increasing);
  WlAvatarCharacter pendingAvatar=null;
  logger.info(""String_Node_Str"" + status + ""String_Node_Str""+ increasing);
  if (status == CellStatus.ACTIVE && increasing == true) {
    if (cellMoveListener != null) {
      MovableComponent mc=cell.getComponent(MovableComponent.class);
      if (mc == null) {
        logger.severe(""String_Node_Str"" + ((AvatarCell)cell).getName());
      }
 else {
        mc.removeServerCellMoveListener(cellMoveListener);
      }
      cellMoveListener=null;
    }
    if (avatarCharacter == null) {
      AvatarConfigComponent configComp=cell.getComponent(AvatarConfigComponent.class);
      AvatarConfigInfo avatarConfigInfo=null;
      if (configComp != null) {
        avatarConfigInfo=configComp.getAvatarConfigInfo();
      }
      logger.info(""String_Node_Str"" + avatarConfigInfo);
      pendingAvatar=loadAvatar(avatarConfigInfo);
    }
 else {
      ClientContextJME.getWorldManager().removeEntity(avatarCharacter);
      pendingAvatar=null;
    }
    logger.info(""String_Node_Str"");
    changeAvatar(pendingAvatar);
    if (cellMoveListener == null) {
      cellMoveListener=new CellMoveListener(){
        public void cellMoved(        CellTransform transform,        CellMoveSource source){
          if (source == CellMoveSource.REMOTE) {
            if (avatarCharacter != null) {
              if (avatarCharacter.getModelInst() == null) {
                logger.severe(""String_Node_Str"");
                Thread.dumpStack();
                return;
              }
              avatarCharacter.getModelInst().setTransform(new PTransform(transform.getRotation(null),transform.getTranslation(null),new Vector3f(1,1,1)));
            }
          }
        }
      }
;
    }
    cell.getComponent(MovableComponent.class).addServerCellMoveListener(cellMoveListener);
  }
}"
45644,"/** 
 * Returns the name tag node, creating it if it does not exist. There is a single name tag node attached to the avatar Cell. NOTE: This method assumes it is being called in an MT-Safe manner.
 */
private NameTagNode getNameTagNode(){
  NameTagComponent nameTagComp=cell.getComponent(NameTagComponent.class);
  if (nameTagComp == null) {
    nameTagComp=new NameTagComponent(cell,username,2);
    cell.addComponent(nameTagComp);
  }
  return nameTagComp.getNameTagNode();
}","/** 
 * Returns the name tag node, creating it if it does not exist. There is a single name tag node attached to the avatar Cell. NOTE: This method assumes it is being called in an MT-Safe manner.
 */
private NameTagNode getNameTagNode(){
  NameTagComponent nameTagComp=cell.getComponent(NameTagComponent.class);
  if (nameTagComp == null) {
    return null;
  }
  return nameTagComp.getNameTagNode();
}"
45645,"public NameTagNode getNameTagNode(){
  return nameTagNode;
}","NameTagNode getNameTagNode(){
  return nameTagNode;
}"
45646,"public NameTagComponent(Cell cell,String name,float height){
  super(cell);
  nameTagNode=new NameTagNode(name,height);
}","public NameTagComponent(Cell cell){
  super(cell);
  height=2f;
}"
45647,"private void updateLabel(){
  removeLabel();
  if (labelHidden) {
    return;
  }
  if (name.equals(usernameAlias) == false) {
    font=ALIAS_NAME_FONT;
  }
 else {
    font=REAL_NAME_FONT;
  }
  if (inConeOfSilence) {
    foregroundColor=CONE_OF_SILENCE_COLOR;
  }
 else {
    if (isSpeaking) {
      foregroundColor=SPEAKING_COLOR;
    }
 else {
      foregroundColor=NOT_SPEAKING_COLOR;
    }
  }
  final String displayName=getDisplayName(usernameAlias,isSpeaking,isMuted);
  SceneWorker.addWorker(new WorkCommit(){
    public void commit(){
      if (visible) {
        if (label == null) {
          label=new TextLabel2D(displayName,foregroundColor,backgroundColor,height,true,font);
          label.setLocalTranslation(0,heightAbove,0);
          Matrix3f rot=new Matrix3f();
          rot.fromAngleAxis((float)Math.PI,new Vector3f(0f,1f,0f));
          label.setLocalRotation(rot);
          attachChild(label);
        }
 else {
          label.setText(displayName,foregroundColor,backgroundColor);
        }
        ClientContextJME.getWorldManager().addToUpdateList(NameTagNode.this);
      }
    }
  }
);
}","private void updateLabel(){
  if (name == null)   return;
  if (labelHidden) {
    removeLabel();
    return;
  }
  if (name.equals(usernameAlias) == false) {
    font=ALIAS_NAME_FONT;
  }
 else {
    font=REAL_NAME_FONT;
  }
  if (inConeOfSilence) {
    foregroundColor=CONE_OF_SILENCE_COLOR;
  }
 else {
    if (isSpeaking) {
      foregroundColor=SPEAKING_COLOR;
    }
 else {
      foregroundColor=NOT_SPEAKING_COLOR;
    }
  }
  final String displayName=getDisplayName(usernameAlias,isSpeaking,isMuted);
  SceneWorker.addWorker(new WorkCommit(){
    public void commit(){
      if (visible) {
        if (label == null) {
          label=new TextLabel2D(displayName,foregroundColor,backgroundColor,height,true,font);
          label.setLocalTranslation(0,heightAbove,0);
          Matrix3f rot=new Matrix3f();
          rot.fromAngleAxis((float)Math.PI,new Vector3f(0f,1f,0f));
          label.setLocalRotation(rot);
          attachChild(label);
        }
 else {
          label.setFont(font);
          label.setText(displayName,foregroundColor,backgroundColor);
        }
        ClientContextJME.getWorldManager().addToUpdateList(NameTagNode.this);
      }
    }
  }
);
}"
45648,"public void commit(){
  if (visible) {
    if (label == null) {
      label=new TextLabel2D(displayName,foregroundColor,backgroundColor,height,true,font);
      label.setLocalTranslation(0,heightAbove,0);
      Matrix3f rot=new Matrix3f();
      rot.fromAngleAxis((float)Math.PI,new Vector3f(0f,1f,0f));
      label.setLocalRotation(rot);
      attachChild(label);
    }
 else {
      label.setText(displayName,foregroundColor,backgroundColor);
    }
    ClientContextJME.getWorldManager().addToUpdateList(NameTagNode.this);
  }
}","public void commit(){
  if (visible) {
    if (label == null) {
      label=new TextLabel2D(displayName,foregroundColor,backgroundColor,height,true,font);
      label.setLocalTranslation(0,heightAbove,0);
      Matrix3f rot=new Matrix3f();
      rot.fromAngleAxis((float)Math.PI,new Vector3f(0f,1f,0f));
      label.setLocalRotation(rot);
      attachChild(label);
    }
 else {
      label.setFont(font);
      label.setText(displayName,foregroundColor,backgroundColor);
    }
    ClientContextJME.getWorldManager().addToUpdateList(NameTagNode.this);
  }
}"
45649,"public void setNameTag(EventType eventType,String username,String alias){
  logger.fine(""String_Node_Str"" + eventType + ""String_Node_Str""+ username+ ""String_Node_Str""+ alias);
switch (eventType) {
case HIDE:
    labelHidden=true;
  break;
case SMALL_FONT:
labelHidden=false;
height=SMALL_SIZE;
break;
case REGULAR_FONT:
labelHidden=false;
height=REGULAR_SIZE;
break;
case LARGE_FONT:
labelHidden=false;
height=LARGE_SIZE;
break;
case ENTERED_CONE_OF_SILENCE:
inConeOfSilence=true;
break;
case EXITED_CONE_OF_SILENCE:
inConeOfSilence=false;
break;
case STARTED_SPEAKING:
isSpeaking=true;
break;
case STOPPED_SPEAKING:
isSpeaking=false;
break;
case MUTE:
isMuted=true;
isSpeaking=false;
removeLabel();
break;
case UNMUTE:
isMuted=false;
break;
case CHANGE_NAME:
removeLabel();
usernameAlias=alias;
break;
default :
logger.warning(""String_Node_Str"" + eventType);
break;
}
updateLabel();
}","public void setNameTag(EventType eventType,String username,String alias){
  logger.severe(""String_Node_Str"" + eventType + ""String_Node_Str""+ username+ ""String_Node_Str""+ alias);
switch (eventType) {
case HIDE:
    labelHidden=true;
  break;
case SMALL_FONT:
labelHidden=false;
height=SMALL_SIZE;
break;
case REGULAR_FONT:
labelHidden=false;
height=REGULAR_SIZE;
break;
case LARGE_FONT:
labelHidden=false;
height=LARGE_SIZE;
break;
case ENTERED_CONE_OF_SILENCE:
inConeOfSilence=true;
break;
case EXITED_CONE_OF_SILENCE:
inConeOfSilence=false;
break;
case STARTED_SPEAKING:
isSpeaking=true;
break;
case STOPPED_SPEAKING:
isSpeaking=false;
break;
case MUTE:
isMuted=true;
isSpeaking=false;
break;
case UNMUTE:
isMuted=false;
break;
case CHANGE_NAME:
usernameAlias=alias;
break;
default :
logger.warning(""String_Node_Str"" + eventType);
break;
}
updateLabel();
}"
45650,"public NameTagNode(String name,float heightAbove){
  this.name=name;
  this.heightAbove=heightAbove;
  visible=true;
  usernameAlias=name;
  setNameTag(EventType.REGULAR_FONT,name,usernameAlias);
}","public NameTagNode(String name,float heightAbove){
  this.name=name;
  this.usernameAlias=name;
  this.heightAbove=heightAbove;
  visible=true;
  setNameTag(EventType.REGULAR_FONT,name,usernameAlias);
}"
45651,"public void initialize(){
  CellManagerMO.getCellManager().registerAvatarCellComponent(AvatarConfigComponentMO.class);
}","public void initialize(){
  CellManagerMO.getCellManager().registerAvatarCellComponent(AvatarConfigComponentMO.class);
  CellManagerMO.getCellManager().registerAvatarCellComponent(NameTagComponentMO.class);
}"
45652,"private Quad getQuad(){
  Vector2f scales=new Vector2f();
  BufferedImage img=getImage(scales);
  float w=img.getWidth();
  float h=img.getHeight();
  float factor=height / h;
  Quad ret=new Quad(""String_Node_Str"",w * factor,h * factor);
  TextureState ts=DisplaySystem.getDisplaySystem().getRenderer().createTextureState();
  Texture tex=TextureManager.loadTexture(img,MinificationFilter.BilinearNoMipMaps,MagnificationFilter.Bilinear,true);
  ts.setTexture(tex);
  ts.setEnabled(true);
  ret.setRenderState(ts);
  ret.setRenderQueueMode(Renderer.QUEUE_TRANSPARENT);
  BlendState as=DisplaySystem.getDisplaySystem().getRenderer().createBlendState();
  as.setBlendEnabled(true);
  as.setTestEnabled(true);
  as.setTestFunction(TestFunction.GreaterThan);
  as.setEnabled(true);
  ret.setRenderState(as);
  ret.setLightCombineMode(LightCombineMode.Off);
  ret.updateRenderState();
  this.quad=ret;
  return ret;
}","private Quad getQuad(){
  Vector2f scales=new Vector2f();
  BufferedImage img=getImage(scales);
  float w=img.getWidth();
  float h=img.getHeight();
  float factor=height / h;
  Quad ret;
  if (imgWidth == w && imgHeight == h) {
    ret=quad;
    TextureState texState=(TextureState)quad.getRenderState(StateType.Texture);
    Texture oldtex=texState.getTexture();
    TextureManager.releaseTexture(oldtex);
    Texture tex=TextureManager.loadTexture(img,MinificationFilter.BilinearNoMipMaps,MagnificationFilter.Bilinear,true);
    texState.setTexture(tex);
  }
 else {
    ret=new Quad(""String_Node_Str"",w * factor,h * factor);
    TextureState ts=DisplaySystem.getDisplaySystem().getRenderer().createTextureState();
    Texture tex=TextureManager.loadTexture(img,MinificationFilter.BilinearNoMipMaps,MagnificationFilter.Bilinear,true);
    ts.setTexture(tex);
    ts.setEnabled(true);
    ret.setRenderState(ts);
    BlendState as=DisplaySystem.getDisplaySystem().getRenderer().createBlendState();
    as.setBlendEnabled(false);
    as.setReference(0.5f);
    as.setTestFunction(BlendState.TestFunction.GreaterThan);
    as.setTestEnabled(true);
    ret.setRenderState(as);
    ret.setLightCombineMode(LightCombineMode.Off);
    ret.updateRenderState();
    this.quad=ret;
    imgWidth=w;
    imgHeight=h;
  }
  return ret;
}"
45653,"public void setFont(Font font){
  this.font=font;
  BufferedImage tmp0=new BufferedImage(10,10,BufferedImage.TYPE_INT_ARGB);
  Graphics2D g2d=(Graphics2D)tmp0.getGraphics();
  drawFont=font.deriveFont(fontResolution);
  fontRenderContext=g2d.getFontRenderContext();
}","public void setFont(Font font){
  if (this.font == font)   return;
  this.font=font;
  BufferedImage tmp0=new BufferedImage(10,10,BufferedImage.TYPE_INT_ARGB);
  Graphics2D g2d=(Graphics2D)tmp0.getGraphics();
  drawFont=font.deriveFont(fontResolution);
  fontRenderContext=g2d.getFontRenderContext();
}"
45654,"public void setText(String text,Color foreground,Color background){
  this.text=text;
  this.foreground=foreground;
  this.background=background;
  Node tmpParent=quad.getParent();
  quad.removeFromParent();
  TextureState texState=(TextureState)quad.getRenderState(StateType.Texture);
  Texture tex=texState.getTexture();
  TextureManager.releaseTexture(tex);
  tmpParent.attachChild(getQuad());
}","public void setText(String text,Color foreground,Color background){
  this.text=text;
  this.foreground=foreground;
  this.background=background;
  Quad oldQuad=quad;
  Quad updatedQuad=getQuad();
  if (updatedQuad != oldQuad) {
    Node tmpParent=oldQuad.getParent();
    oldQuad.removeFromParent();
    TextureState texState=(TextureState)oldQuad.getRenderState(StateType.Texture);
    Texture tex=texState.getTexture();
    TextureManager.releaseTexture(tex);
    tmpParent.attachChild(updatedQuad);
  }
}"
45655,"/** 
 * This is called when the status of the cell changes.
 */
@Override protected void setStatus(CellStatus status,boolean increasing){
  super.setStatus(status,increasing);
switch (status) {
case ACTIVE:
    if (increasing) {
      if (menuFactory == null) {
        menuFactory=new ContextMenuFactorySPI(){
          public ContextMenuItem[] getContextMenuItems(          ContextEvent event){
            return windowMenuItemsForEvent(event,contextMenuComp);
          }
        }
;
        contextMenuComp.addContextMenuFactory(menuFactory);
      }
      if (menuListener == null) {
        menuListener=new ContextMenuListener(){
          public void contextMenuDisplayed(          ContextMenuEvent event){
            windowMenuDisplayed(event,contextMenuComp);
          }
        }
;
        ContextMenuManager cmm=ContextMenuManager.getContextMenuManager();
        cmm.addContextMenuListener(menuListener);
      }
    }
 else {
      if (app != null) {
        ControlArb controlArb=app.getControlArb();
        if (controlArb != null) {
          if (controlArb.hasControl()) {
            controlArb.releaseControl();
          }
        }
      }
    }
  break;
case DISK:
if (!increasing) {
  if (menuFactory != null) {
    contextMenuComp.removeContextMenuFactory(menuFactory);
    menuFactory=null;
  }
  if (menuListener != null) {
    ContextMenuManager cmm=ContextMenuManager.getContextMenuManager();
    cmm.removeContextMenuListener(menuListener);
    menuListener=null;
  }
}
break;
}
}","/** 
 * This is called when the status of the cell changes.
 */
@Override protected void setStatus(CellStatus status,boolean increasing){
  super.setStatus(status,increasing);
switch (status) {
case ACTIVE:
    if (increasing) {
      if (menuFactory == null) {
        menuFactory=new ContextMenuFactorySPI(){
          public ContextMenuItem[] getContextMenuItems(          ContextEvent event){
            return windowMenuItemsForEvent(event,contextMenuComp);
          }
        }
;
        contextMenuComp.addContextMenuFactory(menuFactory);
      }
      if (menuListener == null) {
        menuListener=new ContextMenuListener(){
          public void contextMenuDisplayed(          ContextMenuEvent event){
            windowMenuDisplayed(event,contextMenuComp);
          }
        }
;
        ContextMenuManager cmm=ContextMenuManager.getContextMenuManager();
        cmm.addContextMenuListener(menuListener);
      }
    }
 else {
      if (app != null) {
        ControlArb controlArb=app.getControlArb();
        if (controlArb != null) {
          if (controlArb.hasControl()) {
            controlArb.releaseControl();
          }
        }
      }
    }
  break;
case DISK:
if (!increasing) {
  if (menuFactory != null) {
    contextMenuComp.removeContextMenuFactory(menuFactory);
    menuFactory=null;
  }
  if (menuListener != null) {
    ContextMenuManager cmm=ContextMenuManager.getContextMenuManager();
    cmm.removeContextMenuListener(menuListener);
    menuListener=null;
  }
  destroy();
}
break;
}
}"
45656,"/** 
 * Deallocate resources.
 */
public void cleanup(){
synchronized (appCleanupLock) {
    setShowInHUD(false);
    viewSet.cleanup();
    if (controlArb != null) {
      controlArb.cleanup();
      controlArb=null;
    }
    stack.cleanup();
    LinkedList<Window2D> toRemoveList=(LinkedList<Window2D>)windows.clone();
    for (    Window2D window : toRemoveList) {
      window.cleanup();
    }
    windows.clear();
    toRemoveList.clear();
    pixelScale=null;
  }
}","/** 
 * Deallocate resources.
 */
public void cleanup(){
synchronized (appCleanupLock) {
    setShowInHUD(false);
    viewSet.cleanup();
    if (controlArb != null) {
      controlArb.cleanup();
      controlArb=null;
    }
    stack.cleanup();
    LinkedList<Window2D> toRemoveList=(LinkedList<Window2D>)windows.clone();
    for (    Window2D window : toRemoveList) {
      window.cleanup();
    }
    windows.clear();
    toRemoveList.clear();
    pixelScale=null;
  }
synchronized (apps) {
    apps.remove(this);
  }
}"
45657,"/** 
 * Executed by the JVM shutdown process. 
 */
private static void shutdown(){
  logger.warning(""String_Node_Str"");
  isAppBaseRunning=false;
  LinkedList<App2D> appsCopy=(LinkedList<App2D>)apps.clone();
  for (  App2D app : appsCopy) {
    logger.warning(""String_Node_Str"" + app);
    app.cleanup();
  }
  logger.warning(""String_Node_Str"");
  apps.clear();
  logger.warning(""String_Node_Str"");
}","/** 
 * Executed by the JVM shutdown process. 
 */
private static void shutdown(){
  logger.info(""String_Node_Str"");
  isAppBaseRunning=false;
  LinkedList<App2D> appsCopy=(LinkedList<App2D>)apps.clone();
  for (  App2D app : appsCopy) {
    logger.info(""String_Node_Str"" + app);
    app.cleanup();
  }
  logger.info(""String_Node_Str"");
  apps.clear();
  logger.info(""String_Node_Str"");
}"
45658,"/** 
 * {@inheritDoc} 
 */
@Override public void cleanup(){
  controller=null;
}","/** 
 * {@inheritDoc} 
 */
@Override public void cleanup(){
  super.cleanup();
  controller=null;
}"
45659,"private void receive(CellMessage message){
  if (message instanceof AudioTreatmentDoneMessage) {
    addMenuItems(new String[]{""String_Node_Str"",""String_Node_Str""});
    channelComp.send(new AudioTreatmentRequestMessage(cell.getCellID(),true,true));
    return;
  }
  if (message instanceof AudioTreatmentMenuChangeMessage) {
    addMenuItems(((AudioTreatmentMenuChangeMessage)message).getMenuItems());
    return;
  }
  if (message instanceof AudioVolumeMessage) {
    logger.fine(""String_Node_Str"" + ((AudioVolumeMessage)message).getVolume());
    new VolumeControlJFrame(cell.getCellID(),this,""String_Node_Str"",CallID.getCallID(cell.getCellID()),VolumeUtil.getClientVolume(((AudioVolumeMessage)message).getVolume()));
    return;
  }
}","private void receive(CellMessage message){
  if (message instanceof AudioTreatmentDoneMessage) {
    addMenuItems(new String[]{""String_Node_Str"",""String_Node_Str""});
    channelComp.send(new AudioTreatmentRequestMessage(cell.getCellID(),true,true));
    return;
  }
  if (message instanceof AudioTreatmentEndedMessage) {
    AudioTreatmentEndedMessage msg=(AudioTreatmentEndedMessage)message;
    logger.warning(""String_Node_Str"" + msg.getReason());
    notifyTreatmentEnded(msg.getReason());
    return;
  }
  if (message instanceof AudioTreatmentEstablishedMessage) {
    logger.warning(""String_Node_Str"");
    notifyTreatmentEstablished();
    return;
  }
  if (message instanceof AudioTreatmentMenuChangeMessage) {
    addMenuItems(((AudioTreatmentMenuChangeMessage)message).getMenuItems());
    return;
  }
  if (message instanceof AudioVolumeMessage) {
    logger.fine(""String_Node_Str"" + ((AudioVolumeMessage)message).getVolume());
    new VolumeControlJFrame(cell.getCellID(),this,""String_Node_Str"",CallID.getCallID(cell.getCellID()),VolumeUtil.getClientVolume(((AudioVolumeMessage)message).getVolume()));
    return;
  }
}"
45660,"@Override protected void setStatus(CellStatus status,boolean increasing){
  super.setStatus(status,increasing);
switch (status) {
case DISK:
    if (msgReceiver != null) {
      channelComp.removeMessageReceiver(AudioTreatmentDoneMessage.class);
      channelComp.removeMessageReceiver(AudioTreatmentMenuChangeMessage.class);
      channelComp.removeMessageReceiver(AudioTreatmentRequestMessage.class);
      channelComp.removeMessageReceiver(AudioVolumeMessage.class);
      msgReceiver=null;
    }
  break;
case ACTIVE:
if (increasing) {
  if (msgReceiver == null) {
    msgReceiver=new ChannelComponent.ComponentMessageReceiver(){
      public void messageReceived(      CellMessage message){
        receive(message);
      }
    }
;
    channelComp=cell.getComponent(ChannelComponent.class);
    channelComp.addMessageReceiver(AudioTreatmentDoneMessage.class,msgReceiver);
    channelComp.addMessageReceiver(AudioTreatmentMenuChangeMessage.class,msgReceiver);
    channelComp.addMessageReceiver(AudioTreatmentRequestMessage.class,msgReceiver);
    channelComp.addMessageReceiver(AudioVolumeMessage.class,msgReceiver);
  }
  if (menuItemAdded == false) {
    menuItemAdded=true;
    if (playWhen.equals(PlayWhen.ALWAYS)) {
      addMenuItems(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
      ;
    }
 else {
      addMenuItems(new String[]{""String_Node_Str"",""String_Node_Str""});
    }
  }
}
break;
}
}","@Override protected void setStatus(CellStatus status,boolean increasing){
  super.setStatus(status,increasing);
switch (status) {
case DISK:
    if (msgReceiver != null) {
      channelComp.removeMessageReceiver(AudioTreatmentDoneMessage.class);
      channelComp.removeMessageReceiver(AudioTreatmentEndedMessage.class);
      channelComp.removeMessageReceiver(AudioTreatmentEstablishedMessage.class);
      channelComp.removeMessageReceiver(AudioTreatmentMenuChangeMessage.class);
      channelComp.removeMessageReceiver(AudioTreatmentRequestMessage.class);
      channelComp.removeMessageReceiver(AudioVolumeMessage.class);
      msgReceiver=null;
    }
  break;
case ACTIVE:
if (increasing) {
  if (msgReceiver == null) {
    msgReceiver=new ChannelComponent.ComponentMessageReceiver(){
      public void messageReceived(      CellMessage message){
        receive(message);
      }
    }
;
    channelComp=cell.getComponent(ChannelComponent.class);
    channelComp.addMessageReceiver(AudioTreatmentDoneMessage.class,msgReceiver);
    channelComp.addMessageReceiver(AudioTreatmentEndedMessage.class,msgReceiver);
    channelComp.addMessageReceiver(AudioTreatmentEstablishedMessage.class,msgReceiver);
    channelComp.addMessageReceiver(AudioTreatmentMenuChangeMessage.class,msgReceiver);
    channelComp.addMessageReceiver(AudioTreatmentRequestMessage.class,msgReceiver);
    channelComp.addMessageReceiver(AudioVolumeMessage.class,msgReceiver);
  }
  if (menuItemAdded == false) {
    menuItemAdded=true;
    if (playWhen.equals(PlayWhen.ALWAYS)) {
      addMenuItems(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
      ;
    }
 else {
      addMenuItems(new String[]{""String_Node_Str"",""String_Node_Str""});
    }
  }
}
break;
}
}"
45661,"/** 
 * Given a component factory, adds the component to the server and upates the GUI to indicate its presence
 */
private void addComponent(CellComponentFactorySPI spi){
  CellComponentServerState state=spi.getDefaultCellComponentServerState();
  CellID cellID=selectedCell.getCellID();
  CellServerComponentMessage message=CellServerComponentMessage.newAddMessage(cellID,state);
  ResponseMessage response=selectedCell.sendCellMessageAndWait(message);
  if (response == null) {
    LOGGER.warning(""String_Node_Str"" + selectedCell.getCellID() + ""String_Node_Str""+ selectedCell.getName()+ ""String_Node_Str"");
    return;
  }
  if (response instanceof CellServerComponentResponseMessage) {
    CellServerComponentResponseMessage cscrm=(CellServerComponentResponseMessage)response;
    addComponentToPanelSet(cscrm.getCellComponentServerState());
  }
 else   if (response instanceof ErrorMessage) {
    LOGGER.log(Level.WARNING,""String_Node_Str"",((ErrorMessage)response).getErrorCause());
  }
}","/** 
 * Given a component factory, adds the component to the server and upates the GUI to indicate its presence
 */
private void addComponent(CellComponentFactorySPI spi){
  CellComponentServerState state=spi.getDefaultCellComponentServerState();
  CellID cellID=selectedCell.getCellID();
  CellServerComponentMessage message=CellServerComponentMessage.newAddMessage(cellID,state);
  ResponseMessage response=selectedCell.sendCellMessageAndWait(message);
  if (response == null) {
    LOGGER.warning(""String_Node_Str"" + selectedCell.getCellID() + ""String_Node_Str""+ selectedCell.getName()+ ""String_Node_Str"");
    return;
  }
  if (response instanceof CellServerComponentResponseMessage) {
    setSelectedCell(selectedCell);
  }
 else   if (response instanceof ErrorMessage) {
    LOGGER.log(Level.WARNING,""String_Node_Str"",((ErrorMessage)response).getErrorCause());
  }
}"
45662,"/** 
 * Given the component properties SPI, removes the component from the server and updates the GUI to indicate its absense
 */
private void removeComponent(PropertiesFactorySPI factory){
  Class clazz=PropertiesManager.getServerStateClass(factory);
  if (clazz == null) {
    LOGGER.warning(""String_Node_Str"" + factory);
    return;
  }
  CellComponentRegistry r=CellComponentRegistry.getCellComponentRegistry();
  CellComponentFactorySPI spi=r.getCellFactoryByStateClass(clazz);
  if (spi == null) {
    LOGGER.warning(""String_Node_Str"" + clazz.getName());
    return;
  }
  CellComponentServerState s=spi.getDefaultCellComponentServerState();
  String className=s.getServerComponentClassName();
  CellID cellID=selectedCell.getCellID();
  CellServerComponentMessage cscm=CellServerComponentMessage.newRemoveMessage(cellID,className);
  ResponseMessage response=selectedCell.sendCellMessageAndWait(cscm);
  if (response == null) {
    LOGGER.warning(""String_Node_Str"" + cellID + ""String_Node_Str""+ selectedCell.getName()+ ""String_Node_Str"");
    return;
  }
  if (response instanceof OKMessage) {
    listModel.removeElement(factory.getDisplayName());
    capabilityList.setSelectedIndex(-1);
    factoryList.remove(factory);
  }
 else   if (response instanceof ErrorMessage) {
    LOGGER.log(Level.WARNING,""String_Node_Str"",((ErrorMessage)response).getErrorCause());
  }
}","/** 
 * Given the component properties SPI, removes the component from the server and updates the GUI to indicate its absense
 */
private void removeComponent(PropertiesFactorySPI factory){
  Class clazz=PropertiesManager.getServerStateClass(factory);
  if (clazz == null) {
    LOGGER.warning(""String_Node_Str"" + factory);
    return;
  }
  CellComponentRegistry r=CellComponentRegistry.getCellComponentRegistry();
  CellComponentFactorySPI spi=r.getCellFactoryByStateClass(clazz);
  if (spi == null) {
    LOGGER.warning(""String_Node_Str"" + clazz.getName());
    return;
  }
  CellComponentServerState s=spi.getDefaultCellComponentServerState();
  String className=s.getServerComponentClassName();
  CellID cellID=selectedCell.getCellID();
  CellServerComponentMessage cscm=CellServerComponentMessage.newRemoveMessage(cellID,className);
  ResponseMessage response=selectedCell.sendCellMessageAndWait(cscm);
  if (response == null) {
    LOGGER.warning(""String_Node_Str"" + cellID + ""String_Node_Str""+ selectedCell.getName()+ ""String_Node_Str"");
    return;
  }
  if (response instanceof OKMessage) {
    setSelectedCell(selectedCell);
  }
 else   if (response instanceof ErrorMessage) {
    LOGGER.log(Level.WARNING,""String_Node_Str"",((ErrorMessage)response).getErrorCause());
  }
}"
45663,"/** 
 * Removes the given listener for context menu display events. If the listener does not exist, then this method does nothing.
 * @param listener The listener to remove
 */
public void removeContextMenuListener(ContextMenuListener listener){
synchronized (listeners) {
    listeners.remove(listeners);
  }
}","/** 
 * Removes the given listener for context menu display events. If the listener does not exist, then this method does nothing.
 * @param listener The listener to remove
 */
public void removeContextMenuListener(ContextMenuListener listener){
synchronized (listeners) {
    listeners.remove(listener);
  }
}"
45664,"private void applyChanges(){
  if (myNameTagAttribute != originalMyNameTagAttribute) {
    originalMyNameTagAttribute=myNameTagAttribute;
switch (myNameTagAttribute) {
case HIDE:
      NameTagNode.setMyNameTag(EventType.HIDE,presenceInfo.userID.getUsername(),presenceInfo.usernameAlias);
    break;
case SMALL_FONT:
  NameTagNode.setMyNameTag(EventType.SMALL_FONT,presenceInfo.userID.getUsername(),presenceInfo.usernameAlias);
break;
case REGULAR_FONT:
NameTagNode.setMyNameTag(EventType.REGULAR_FONT,presenceInfo.userID.getUsername(),presenceInfo.usernameAlias);
break;
case LARGE_FONT:
NameTagNode.setMyNameTag(EventType.LARGE_FONT,presenceInfo.userID.getUsername(),presenceInfo.usernameAlias);
break;
}
}
if (otherNameTagAttributes == originalOtherNameTagAttributes) {
return;
}
originalOtherNameTagAttributes=otherNameTagAttributes;
switch (otherNameTagAttributes) {
case HIDE:
NameTagNode.setOtherNameTags(EventType.HIDE,presenceInfo.userID.getUsername(),presenceInfo.usernameAlias);
OrbCell.makeOrbsVisible(false);
break;
case SMALL_FONT:
NameTagNode.setOtherNameTags(EventType.SMALL_FONT,presenceInfo.userID.getUsername(),presenceInfo.usernameAlias);
OrbCell.makeOrbsVisible(true);
break;
case REGULAR_FONT:
NameTagNode.setOtherNameTags(EventType.REGULAR_FONT,presenceInfo.userID.getUsername(),presenceInfo.usernameAlias);
OrbCell.makeOrbsVisible(true);
break;
case LARGE_FONT:
NameTagNode.setOtherNameTags(EventType.LARGE_FONT,presenceInfo.userID.getUsername(),presenceInfo.usernameAlias);
OrbCell.makeOrbsVisible(true);
break;
}
}","private void applyChanges(){
  if (myNameTagAttribute != originalMyNameTagAttribute) {
    originalMyNameTagAttribute=myNameTagAttribute;
switch (myNameTagAttribute) {
case HIDE:
      setMyNameTag(EventType.HIDE);
    break;
case SMALL_FONT:
  setMyNameTag(EventType.SMALL_FONT);
break;
case REGULAR_FONT:
setMyNameTag(EventType.REGULAR_FONT);
break;
case LARGE_FONT:
setMyNameTag(EventType.LARGE_FONT);
break;
}
}
if (otherNameTagAttributes == originalOtherNameTagAttributes) {
return;
}
originalOtherNameTagAttributes=otherNameTagAttributes;
switch (otherNameTagAttributes) {
case HIDE:
setOtherNameTags(EventType.HIDE);
OrbCell.makeOrbsVisible(false);
break;
case SMALL_FONT:
setOtherNameTags(EventType.SMALL_FONT);
OrbCell.makeOrbsVisible(true);
break;
case REGULAR_FONT:
setOtherNameTags(EventType.REGULAR_FONT);
OrbCell.makeOrbsVisible(true);
break;
case LARGE_FONT:
setOtherNameTags(EventType.LARGE_FONT);
OrbCell.makeOrbsVisible(true);
break;
}
}"
45665,"public NamePropertiesHUDPanel(PresenceInfo presenceInfo){
  this();
  this.presenceInfo=presenceInfo;
}","public NamePropertiesHUDPanel(PresenceManager pm,WonderlandSession session,PresenceInfo presenceInfo){
  this();
  this.pm=pm;
  this.session=session;
  this.presenceInfo=presenceInfo;
}"
45666,"private void propertiesButtonActionPerformed(java.awt.event.ActionEvent evt){
  if (namePropertiesHUDComponent == null) {
    HUD mainHUD=HUDManagerFactory.getHUDManager().getHUD(""String_Node_Str"");
    NamePropertiesHUDPanel namePropertiesHUDPanel=new NamePropertiesHUDPanel(presenceInfo);
    namePropertiesHUDComponent=mainHUD.createComponent(namePropertiesHUDPanel);
    namePropertiesHUDComponent.setPreferredLocation(Layout.NORTH);
    namePropertiesHUDComponent.setName(BUNDLE.getString(""String_Node_Str""));
    namePropertiesHUDComponent.setIcon(new ImageIcon(getClass().getResource(""String_Node_Str"" + ""String_Node_Str"")));
    mainHUD.addComponent(namePropertiesHUDComponent);
    PropertyChangeListener plistener=new PropertyChangeListener(){
      public void propertyChange(      PropertyChangeEvent pe){
        String name=pe.getPropertyName();
        if (name.equals(""String_Node_Str"") || name.equals(""String_Node_Str"")) {
          namePropertiesHUDComponent.setVisible(false);
        }
      }
    }
;
    namePropertiesHUDPanel.addPropertyChangeListener(plistener);
  }
  namePropertiesHUDComponent.setVisible(true);
}","private void propertiesButtonActionPerformed(java.awt.event.ActionEvent evt){
  if (namePropertiesHUDComponent == null) {
    HUD mainHUD=HUDManagerFactory.getHUDManager().getHUD(""String_Node_Str"");
    NamePropertiesHUDPanel namePropertiesHUDPanel=new NamePropertiesHUDPanel(pm,session,presenceInfo);
    namePropertiesHUDComponent=mainHUD.createComponent(namePropertiesHUDPanel);
    namePropertiesHUDComponent.setPreferredLocation(Layout.NORTH);
    namePropertiesHUDComponent.setName(BUNDLE.getString(""String_Node_Str""));
    namePropertiesHUDComponent.setIcon(new ImageIcon(getClass().getResource(""String_Node_Str"" + ""String_Node_Str"")));
    mainHUD.addComponent(namePropertiesHUDComponent);
    PropertyChangeListener plistener=new PropertyChangeListener(){
      public void propertyChange(      PropertyChangeEvent pe){
        String name=pe.getPropertyName();
        if (name.equals(""String_Node_Str"") || name.equals(""String_Node_Str"")) {
          namePropertiesHUDComponent.setVisible(false);
        }
      }
    }
;
    namePropertiesHUDPanel.addPropertyChangeListener(plistener);
  }
  namePropertiesHUDComponent.setVisible(true);
}"
45667,"@Override public void handleMessage(Message message){
  logger.fine(""String_Node_Str"" + message);
  if (message instanceof ClientConnectResponseMessage) {
    ClientConnectResponseMessage msg=(ClientConnectResponseMessage)message;
    ArrayList<String> nameTagList=new ArrayList();
    PresenceInfo[] presenceInfoList=msg.getPresenceInfoList();
    for (int i=0; i < presenceInfoList.length; i++) {
      PresenceInfo presenceInfo=presenceInfoList[i];
      logger.fine(""String_Node_Str"" + presenceInfo);
      logger.fine(""String_Node_Str"" + presenceInfo);
      pm.presenceInfoAdded(presenceInfo);
      String username=presenceInfo.userID.getUsername();
      NameTagNode nameTag=NameTagNode.getNameTagNode(username);
      if (presenceInfo.usernameAlias.equals(username) == false) {
        pm.changeUsernameAlias(presenceInfo);
      }
      if (nameTag == null) {
        nameTagList.add(username);
      }
 else {
        nameTag.updateLabel(presenceInfo.usernameAlias,presenceInfo.inConeOfSilence,presenceInfo.isSpeaking,presenceInfo.isMuted);
      }
    }
    if (nameTagList.size() > 0) {
      new NameTagUpdater(nameTagList);
    }
    return;
  }
  if (message instanceof PlayerInRangeMessage) {
    PlayerInRangeMessage msg=(PlayerInRangeMessage)message;
    PresenceInfo info=pm.getPresenceInfo(msg.getCallID());
    if (info == null) {
      logger.info(""String_Node_Str"" + msg.getCallID());
      return;
    }
    pm.playerInRange(info,msg.isInRange());
    return;
  }
  if (message instanceof PresenceInfoAddedMessage) {
    PresenceInfoAddedMessage m=(PresenceInfoAddedMessage)message;
    logger.fine(""String_Node_Str"" + m.getPresenceInfo());
    pm.presenceInfoAdded(m.getPresenceInfo());
    return;
  }
  if (message instanceof PresenceInfoRemovedMessage) {
    PresenceInfoRemovedMessage m=(PresenceInfoRemovedMessage)message;
    logger.fine(""String_Node_Str"" + m.getPresenceInfo());
    pm.presenceInfoRemoved(m.getPresenceInfo());
    return;
  }
  if (message instanceof PresenceInfoChangeMessage) {
    PresenceInfoChangeMessage m=(PresenceInfoChangeMessage)message;
    logger.fine(""String_Node_Str"" + m.getPresenceInfo());
    pm.presenceInfoChanged(m.getPresenceInfo());
    return;
  }
  throw new UnsupportedOperationException(""String_Node_Str"" + message);
}","@Override public void handleMessage(Message message){
  logger.fine(""String_Node_Str"" + message);
  if (message instanceof ClientConnectResponseMessage) {
    ClientConnectResponseMessage msg=(ClientConnectResponseMessage)message;
    ArrayList<String> nameTagList=new ArrayList();
    PresenceInfo[] presenceInfoList=msg.getPresenceInfoList();
    for (int i=0; i < presenceInfoList.length; i++) {
      PresenceInfo presenceInfo=presenceInfoList[i];
      logger.fine(""String_Node_Str"" + presenceInfo);
      logger.fine(""String_Node_Str"" + presenceInfo);
      pm.presenceInfoAdded(presenceInfo);
      String username=presenceInfo.userID.getUsername();
      CellCache cellCache=ClientContext.getCellCache(session);
      Cell cell=cellCache.getCell(presenceInfo.cellID);
      NameTagComponent comp=cell.getComponent(NameTagComponent.class);
      NameTagNode nameTag=comp.getNameTagNode();
      if (presenceInfo.usernameAlias.equals(username) == false) {
        pm.changeUsernameAlias(presenceInfo);
      }
      if (nameTag == null) {
        nameTagList.add(username);
      }
 else {
        nameTag.updateLabel(presenceInfo.usernameAlias,presenceInfo.inConeOfSilence,presenceInfo.isSpeaking,presenceInfo.isMuted);
      }
    }
    if (nameTagList.size() > 0) {
      new NameTagUpdater(nameTagList);
    }
    return;
  }
  if (message instanceof PlayerInRangeMessage) {
    PlayerInRangeMessage msg=(PlayerInRangeMessage)message;
    PresenceInfo info=pm.getPresenceInfo(msg.getCallID());
    if (info == null) {
      logger.info(""String_Node_Str"" + msg.getCallID());
      return;
    }
    pm.playerInRange(info,msg.isInRange());
    return;
  }
  if (message instanceof PresenceInfoAddedMessage) {
    PresenceInfoAddedMessage m=(PresenceInfoAddedMessage)message;
    logger.fine(""String_Node_Str"" + m.getPresenceInfo());
    pm.presenceInfoAdded(m.getPresenceInfo());
    return;
  }
  if (message instanceof PresenceInfoRemovedMessage) {
    PresenceInfoRemovedMessage m=(PresenceInfoRemovedMessage)message;
    logger.fine(""String_Node_Str"" + m.getPresenceInfo());
    pm.presenceInfoRemoved(m.getPresenceInfo());
    return;
  }
  if (message instanceof PresenceInfoChangeMessage) {
    PresenceInfoChangeMessage m=(PresenceInfoChangeMessage)message;
    logger.fine(""String_Node_Str"" + m.getPresenceInfo());
    pm.presenceInfoChanged(m.getPresenceInfo());
    return;
  }
  throw new UnsupportedOperationException(""String_Node_Str"" + message);
}"
45668,"public void run(){
  while (true) {
    String[] names=nameTagList.toArray(new String[0]);
    for (int i=0; i < names.length; i++) {
      String name=names[i];
      NameTagNode nameTag=NameTagNode.getNameTagNode(name);
      if (nameTag == null) {
        continue;
      }
      nameTagList.remove(name);
      PresenceInfo info=pm.getUserPresenceInfo(name);
      if (info == null) {
        logger.info(""String_Node_Str"" + name);
        continue;
      }
      nameTag.updateLabel(info.usernameAlias,info.inConeOfSilence,info.isSpeaking,info.isMuted);
    }
    if (nameTagList.size() == 0) {
      break;
    }
    try {
      Thread.sleep(200);
    }
 catch (    InterruptedException e) {
    }
  }
}","public void run(){
  while (true) {
    String[] names=nameTagList.toArray(new String[0]);
    for (int i=0; i < names.length; i++) {
      String name=names[i];
      nameTagList.remove(name);
      PresenceInfo info=pm.getUserPresenceInfo(name);
      if (info == null) {
        logger.info(""String_Node_Str"" + name);
        continue;
      }
      CellCache cellCache=ClientContext.getCellCache(session);
      Cell cell=cellCache.getCell(info.cellID);
      if (cell == null) {
        logger.warning(""String_Node_Str"" + name);
        continue;
      }
      NameTagComponent comp=new NameTagComponent(cell,name,(float).17);
      NameTagNode nameTag=comp.getNameTagNode();
      nameTag.updateLabel(info.usernameAlias,info.inConeOfSilence,info.isSpeaking,info.isMuted);
    }
    if (nameTagList.size() == 0) {
      break;
    }
    try {
      Thread.sleep(200);
    }
 catch (    InterruptedException e) {
    }
  }
}"
45669,"public void done(){
  if (done) {
    return;
  }
  done=true;
  nameTagMap.remove(name);
  detachChild(q);
}","public void done(){
  if (done) {
    return;
  }
  done=true;
  detachChild(q);
}"
45670,"public NameTagNode(String name,float heightAbove){
  this.name=name;
  this.heightAbove=heightAbove;
  visible=true;
  nameTagMap.put(name,this);
  usernameAlias=name;
  setNameTag(EventType.REGULAR_FONT,name,usernameAlias);
}","public NameTagNode(String name,float heightAbove){
  this.name=name;
  this.heightAbove=heightAbove;
  visible=true;
  usernameAlias=name;
  setNameTag(EventType.REGULAR_FONT,name,usernameAlias);
}"
45671,"/** 
 * {@inheritDoc} 
 */
@Override public void cleanup(){
  if (eventHook != null) {
    eventHook=null;
  }
}","/** 
 * {@inheritDoc} 
 */
@Override public void cleanup(){
  super.cleanup();
  if (eventHook != null) {
    eventHook=null;
  }
}"
45672,"@Override public void cleanup(){
  cleanupViews();
  super.cleanup();
}","@Override public void cleanup(){
  cleanupViews();
  super.cleanup();
  embeddedPeer.dispose();
}"
45673,"/** 
 * {@inheritDoc}
 */
public void removeComponent(HUDComponent component){
  if (logger.isLoggable(Level.FINE)) {
    logger.fine(""String_Node_Str"" + component);
  }
  HUDComponentState state=(HUDComponentState)hudStateMap.get(component);
  if (state != null) {
    Window2D window=state.getWindow();
    HUDView2D view2D=state.getView();
    if ((window != null) && (view2D != null)) {
      hudViewMap.remove(view2D);
      window.removeView(view2D);
      view2D.cleanup();
      view2D=null;
    }
    HUDView3D view3D=state.getWorldView();
    if (view3D != null) {
      view3D.cleanup();
      view3D=null;
    }
    hudStateMap.remove(component);
    state=null;
  }
}","/** 
 * {@inheritDoc}
 */
public void removeComponent(HUDComponent component){
  if (logger.isLoggable(Level.FINE)) {
    logger.fine(""String_Node_Str"" + component);
  }
  HUDComponentState state=(HUDComponentState)hudStateMap.get(component);
  if (state != null) {
    Window2D window=state.getWindow();
    HUDView2D view2D=state.getView();
    if (window != null) {
      if (view2D != null) {
        hudViewMap.remove(view2D);
        window.removeView(view2D);
        view2D.cleanup();
        view2D=null;
      }
      window.cleanup();
    }
    HUDView3D view3D=state.getWorldView();
    if (view3D != null) {
      view3D.cleanup();
      view3D=null;
    }
    hudStateMap.remove(component);
    state=null;
  }
}"
45674,"private void restoreLater(){
  audioGroupIdTextField.setText(originalGroupId);
switch (treatmentType) {
case FILE:
    fileRadioButton.setSelected(true);
  break;
case CONTENT_REPOSITORY:
contentRepositoryRadioButton.setSelected(true);
break;
case URL:
URLRadioButton.setSelected(true);
break;
}
treatmentTextField.setText(originalTreatments);
volumeSlider.setValue(originalVolume);
switch (originalPlayWhen) {
case ALWAYS:
alwaysRadioButton.setSelected(true);
break;
case FIRST_IN_RANGE:
proximityRadioButton.setSelected(true);
break;
case MANUAL:
manualRadioButton.setSelected(true);
break;
}
playOnceCheckBox.setSelected(originalPlayOnce);
extentRadiusSpinner.setValue(originalExtentRadius);
extentRadiusSpinner.setEnabled(useCellBounds == false);
fullVolumeAreaPercentSpinner.setValue(originalFullVolumeAreaPercent);
falloffSlider.setValue(originalFalloff);
falloffSlider.setEnabled(originalDistanceAttenuated);
BoundingVolume bounds=editor.getCell().getLocalBounds();
if (originalUseCellBounds == true && bounds instanceof BoundingBox) {
distanceAttenuatedRadioButton.setSelected(false);
distanceAttenuatedRadioButton.setEnabled(false);
distanceAttenuated=false;
}
 else {
distanceAttenuatedRadioButton.setSelected(originalDistanceAttenuated);
}
falloffSlider.setEnabled(distanceAttenuatedRadioButton.isSelected());
useCellBoundsRadioButton.setEnabled(true);
useCellBoundsRadioButton.setSelected(originalUseCellBounds);
showBoundsCheckBox.setSelected(originalShowBounds);
showBounds();
}","private void restoreLater(){
  audioGroupIdTextField.setText(originalGroupId);
switch (originalTreatmentType) {
case FILE:
    fileRadioButton.setSelected(true);
  break;
case CONTENT_REPOSITORY:
contentRepositoryRadioButton.setSelected(true);
break;
case URL:
URLRadioButton.setSelected(true);
break;
}
treatmentTextField.setText(originalTreatments);
volumeSlider.setValue(originalVolume);
switch (originalPlayWhen) {
case ALWAYS:
alwaysRadioButton.setSelected(true);
break;
case FIRST_IN_RANGE:
proximityRadioButton.setSelected(true);
break;
case MANUAL:
manualRadioButton.setSelected(true);
break;
}
playOnceCheckBox.setSelected(originalPlayOnce);
extentRadiusSpinner.setValue(originalExtentRadius);
extentRadiusSpinner.setEnabled(useCellBounds == false);
fullVolumeAreaPercentSpinner.setValue(originalFullVolumeAreaPercent);
falloffSlider.setValue(originalFalloff);
falloffSlider.setEnabled(originalDistanceAttenuated);
BoundingVolume bounds=editor.getCell().getLocalBounds();
if (originalUseCellBounds == true && bounds instanceof BoundingBox) {
distanceAttenuatedRadioButton.setSelected(false);
distanceAttenuatedRadioButton.setEnabled(false);
distanceAttenuated=false;
}
 else {
distanceAttenuatedRadioButton.setSelected(originalDistanceAttenuated);
}
falloffSlider.setEnabled(distanceAttenuatedRadioButton.isSelected());
useCellBoundsRadioButton.setEnabled(true);
useCellBoundsRadioButton.setSelected(originalUseCellBounds);
showBoundsCheckBox.setSelected(originalShowBounds);
showBounds();
}"
45675,"/** 
 * @{inheritDoc }
 */
public void open(){
  CellServerState state=editor.getCellServerState();
  AudioTreatmentComponentServerState compState=(AudioTreatmentComponentServerState)state.getComponentServerState(AudioTreatmentComponentServerState.class);
  if (state == null) {
    return;
  }
  originalGroupId=compState.getGroupId();
  String[] treatmentList=compState.getTreatments();
  originalTreatmentType=compState.getTreatmentType();
  originalTreatments=""String_Node_Str"";
  if (treatmentType.equals(TreatmentType.FILE)) {
    for (int i=0; i < treatmentList.length; i++) {
      String treatment=treatmentList[i];
      if (treatment.indexOf(""String_Node_Str"") < 0) {
        originalTreatments+=""String_Node_Str"" + treatment;
      }
 else {
        originalTreatments+=treatment;
      }
      break;
    }
  }
  originalTreatments=originalTreatments.trim();
  originalVolume=VolumeUtil.getClientVolume(compState.getVolume());
  originalPlayWhen=compState.getPlayWhen();
  playWhen=originalPlayWhen;
  originalPlayOnce=compState.getPlayOnce();
  originalExtentRadius=(float)compState.getExtent();
  extentRadius=originalExtentRadius;
  originalFullVolumeAreaPercent=(float)compState.getFullVolumeAreaPercent();
  originalDistanceAttenuated=compState.getDistanceAttenuated();
  distanceAttenuated=originalDistanceAttenuated;
  originalFalloff=(int)compState.getFalloff();
  originalUseCellBounds=compState.getUseCellBounds();
  BoundingVolume bounds=editor.getCell().getLocalBounds();
  if (originalUseCellBounds == true && bounds instanceof BoundingBox) {
    originalDistanceAttenuated=false;
    distanceAttenuated=false;
  }
  originalShowBounds=compState.getShowBounds();
  restore();
  if (currentCell == null) {
    currentCell=editor.getCell();
    AudioTreatmentComponent component=currentCell.getComponent(AudioTreatmentComponent.class);
    component.addTreatmentStatusListener(this);
  }
}","/** 
 * @{inheritDoc }
 */
public void open(){
  CellServerState state=editor.getCellServerState();
  AudioTreatmentComponentServerState compState=(AudioTreatmentComponentServerState)state.getComponentServerState(AudioTreatmentComponentServerState.class);
  if (state == null) {
    return;
  }
  originalGroupId=compState.getGroupId();
  String[] treatmentList=compState.getTreatments();
  originalTreatmentType=compState.getTreatmentType();
  originalTreatments=""String_Node_Str"";
  for (int i=0; i < treatmentList.length; i++) {
    String treatment=treatmentList[i];
    if (treatment.length() == 0) {
      break;
    }
    originalTreatments+=treatment;
    break;
  }
  originalTreatments=originalTreatments.trim();
  originalVolume=VolumeUtil.getClientVolume(compState.getVolume());
  originalPlayWhen=compState.getPlayWhen();
  playWhen=originalPlayWhen;
  originalPlayOnce=compState.getPlayOnce();
  originalExtentRadius=(float)compState.getExtent();
  extentRadius=originalExtentRadius;
  originalFullVolumeAreaPercent=(float)compState.getFullVolumeAreaPercent();
  originalDistanceAttenuated=compState.getDistanceAttenuated();
  distanceAttenuated=originalDistanceAttenuated;
  originalFalloff=(int)compState.getFalloff();
  originalUseCellBounds=compState.getUseCellBounds();
  BoundingVolume bounds=editor.getCell().getLocalBounds();
  if (originalUseCellBounds == true && bounds instanceof BoundingBox) {
    originalDistanceAttenuated=false;
    distanceAttenuated=false;
  }
  originalShowBounds=compState.getShowBounds();
  restore();
  if (currentCell == null) {
    currentCell=editor.getCell();
    AudioTreatmentComponent component=currentCell.getComponent(AudioTreatmentComponent.class);
    component.addTreatmentStatusListener(this);
  }
}"
45676,"/** 
 * Inform the slaves that the parent of a popup window has changed.
 * @param window The popup window.
 * @param parent The new parent of the popup window.
 */
public void setPopupParent(WindowXrw window,WindowXrw parent){
  int wid=window.getWid();
  int parentWid=parent.getWid();
  ((ServerProxyMaster)serverProxy).setPopupParent(wid,parentWid);
}","/** 
 * Inform the slaves that the parent of a popup window has changed.
 * @param window The popup window.
 * @param parent The new parent of the popup window.
 */
public void setPopupParent(WindowXrw window,WindowXrw parent){
  if (parent == null)   return;
  int wid=window.getWid();
  int parentWid=parent.getWid();
  ((ServerProxyMaster)serverProxy).setPopupParent(wid,parentWid);
}"
45677,"/** 
 * {@inheritDoc}
 */
@Override public void relayout(HUDComponent component){
  int hudWidth=hud.getWidth();
  int hudHeight=hud.getHeight();
  HUDComponent2D component2D=(HUDComponent2D)component;
  Vector2f positionPercent=positionMap.get(component2D);
  float compX=hud.getX() + positionPercent.x * hudWidth;
  float compY=hud.getY() + positionPercent.y * hudHeight;
  HUDView2D view=(HUDView2D)hudViewMap.get(component2D);
  float viewWidth=view.getDisplayerLocalWidth();
  float viewHeight=view.getDisplayerLocalHeight();
  if (hud.getX() + hudWidth - (compX + viewWidth) < MIN_RIGHT_MARGIN) {
    compX=hud.getX() + hudWidth - viewWidth - MIN_RIGHT_MARGIN;
  }
  if (compX < hud.getX() + MIN_LEFT_MARGIN) {
    compX=hud.getX() + MIN_LEFT_MARGIN;
  }
  if (compY < hud.getY() + MIN_BOTTOM_MARGIN) {
    compY=hud.getY() + MIN_BOTTOM_MARGIN;
  }
  if (hud.getY() + hudHeight - (compY + viewHeight) < MIN_TOP_MARGIN) {
    compY=hud.getY() + hudHeight - viewHeight - MIN_TOP_MARGIN;
  }
  component2D.setLocation((int)compX,(int)compY);
}","/** 
 * {@inheritDoc}
 */
@Override public void relayout(HUDComponent component){
  int hudWidth=hud.getWidth();
  int hudHeight=hud.getHeight();
  HUDComponent2D component2D=(HUDComponent2D)component;
  Vector2f positionPercent=positionMap.get(component2D);
  if (positionPercent == null) {
    logger.warning(""String_Node_Str"" + component2D);
    return;
  }
  float compX=hud.getX() + positionPercent.x * hudWidth;
  float compY=hud.getY() + positionPercent.y * hudHeight;
  HUDView2D view=(HUDView2D)hudViewMap.get(component2D);
  float viewWidth=view.getDisplayerLocalWidth();
  float viewHeight=view.getDisplayerLocalHeight();
  if (hud.getX() + hudWidth - (compX + viewWidth) < MIN_RIGHT_MARGIN) {
    compX=hud.getX() + hudWidth - viewWidth - MIN_RIGHT_MARGIN;
  }
  if (compX < hud.getX() + MIN_LEFT_MARGIN) {
    compX=hud.getX() + MIN_LEFT_MARGIN;
  }
  if (compY < hud.getY() + MIN_BOTTOM_MARGIN) {
    compY=hud.getY() + MIN_BOTTOM_MARGIN;
  }
  if (hud.getY() + hudHeight - (compY + viewHeight) < MIN_TOP_MARGIN) {
    compY=hud.getY() + hudHeight - viewHeight - MIN_TOP_MARGIN;
  }
  component2D.setLocation((int)compX,(int)compY);
}"
45678,"/** 
 * {@inheritDoc}
 */
@Override public boolean hasControl(){
  boolean control=false;
  if (window != null) {
    App2D app=window.getApp();
    ControlArb arbiter=app.getControlArb();
    if (arbiter != null) {
      control=arbiter.hasControl();
    }
  }
  return control;
}","/** 
 * {@inheritDoc}
 */
@Override public boolean hasControl(){
  boolean control=false;
  if (window != null) {
    App2D app=window.getApp();
    if (app != null) {
      ControlArb arbiter=app.getControlArb();
      if (arbiter != null) {
        control=arbiter.hasControl();
      }
    }
  }
  return control;
}"
45679,"@Override public String toString(){
  return ""String_Node_Str"" + ""String_Node_Str"" + cell + ""String_Node_Str""+ ((component != null) ? component.getClass().getName() : ""String_Node_Str"")+ ""String_Node_Str""+ window+ ""String_Node_Str""+ super.toString();
}","@Override public String toString(){
  return getClass().getSimpleName() + ""String_Node_Str"" + cell+ ""String_Node_Str""+ ((component != null) ? component.getClass().getName() : ""String_Node_Str"")+ ""String_Node_Str""+ window+ ""String_Node_Str""+ super.toString();
}"
45680,"public void attachView(HUDView2D view){
  logger.fine(""String_Node_Str"" + view + ""String_Node_Str""+ this);
  Entity e=view.getEntity();
  RenderComponent rcFrame=(RenderComponent)e.getComponent(RenderComponent.class);
  rcFrame.setAttachPoint(this.getGeometryNode());
}","public void attachView(HUDView2D view){
  if (logger.isLoggable(Level.FINEST)) {
    logger.finest(""String_Node_Str"" + view);
    logger.finest(""String_Node_Str"" + this);
  }
  Entity e=view.getEntity();
  RenderComponent rcFrame=(RenderComponent)e.getComponent(RenderComponent.class);
  rcFrame.setAttachPoint(this.getGeometryNode());
}"
45681,"/** 
 * {@inheritDoc}
 */
@Override protected void frameUpdate(){
  logger.fine(""String_Node_Str"");
}","/** 
 * {@inheritDoc}
 */
@Override protected void frameUpdate(){
  if (logger.isLoggable(Level.FINEST)) {
    logger.finest(""String_Node_Str"");
  }
}"
45682,"/** 
 * Create an instance of HUDView2D with a specified geometry node.
 * @param displayer the entity in which the view is displayed.
 * @param window The window displayed in this view.
 * @param geometryNode The geometry node on which to display the view.
 */
public HUDView2D(View2DDisplayer displayer,Window2D window,GeometryNode geometryNode){
  super(window,geometryNode);
  this.displayer=displayer;
  changeMask=CHANGED_ALL;
  update();
  name=""String_Node_Str"" + window.getName();
}","/** 
 * Create an instance of HUDView2D with a specified geometry node.
 * @param displayer the entity in which the view is displayed.
 * @param window The window displayed in this view.
 * @param geometryNode The geometry node on which to display the view.
 */
public HUDView2D(View2DDisplayer displayer,Window2D window,GeometryNode geometryNode){
  super(window,geometryNode);
  this.displayer=displayer;
  changeMask=CHANGED_ALL;
  name=""String_Node_Str"" + window.getName();
  update();
}"
45683,"/** 
 * {@inheritDoc}
 */
@Override protected void detachFrame(){
  logger.fine(""String_Node_Str"");
}","/** 
 * {@inheritDoc}
 */
@Override protected void detachFrame(){
  if (logger.isLoggable(Level.FINEST)) {
    logger.finest(""String_Node_Str"");
  }
  if (frameView != null) {
    frameView.setVisibleUser(false,false);
    frameView.setVisibleApp(false);
    detachView(frameView);
    frameView=null;
  }
}"
45684,"/** 
 * {@inheritDoc}
 */
@Override protected boolean hasFrame(){
  return false;
}","/** 
 * {@inheritDoc}
 */
@Override protected boolean hasFrame(){
  return (frameView != null);
}"
45685,"public HUDView2D getFrameView(){
  return null;
}","public HUDView2D getFrameView(){
  return frameView;
}"
45686,"/** 
 * {@inheritDoc}
 */
@Override protected void reattachFrame(){
  logger.fine(""String_Node_Str"");
  detachFrame();
  attachFrame();
}","/** 
 * {@inheritDoc}
 */
@Override protected void reattachFrame(){
  if (logger.isLoggable(Level.FINEST)) {
    logger.finest(""String_Node_Str"");
  }
  detachFrame();
  attachFrame();
}"
45687,"/** 
 * {@inheritDoc}
 */
@Override protected void frameUpdateTitle(){
  logger.fine(""String_Node_Str"");
}","/** 
 * {@inheritDoc}
 */
@Override protected void frameUpdateTitle(){
  if (logger.isLoggable(Level.FINEST)) {
    logger.finest(""String_Node_Str"");
  }
  if (frame != null) {
    frame.setTitle(getTitle());
  }
}"
45688,"@Override public String toString(){
  String string=""String_Node_Str"" + getName() + ""String_Node_Str""+ getSizeApp()+ ""String_Node_Str""+ isOrtho();
  if (isOrtho()) {
    string+=""String_Node_Str"" + this.getLocationOrtho();
  }
  return string;
}","@Override public String toString(){
  String string=""String_Node_Str"" + getClass().getSimpleName() + ""String_Node_Str""+ getName()+ ""String_Node_Str""+ getSizeApp()+ ""String_Node_Str""+ isOrtho();
  if (isOrtho()) {
    string+=""String_Node_Str"" + this.getLocationOrtho();
  }
  return string;
}"
45689,"/** 
 * {@inheritDoc}
 */
@Override protected void attachFrame(){
  logger.fine(""String_Node_Str"");
}","/** 
 * {@inheritDoc}
 */
@Override protected void attachFrame(){
  if (logger.isLoggable(Level.FINEST)) {
    logger.finest(""String_Node_Str"");
  }
  if (frameView == null) {
    createFrame();
  }
  if (frameView != null) {
    attachView(frameView);
    frameView.setVisibleApp(true,false);
    frameView.setVisibleUser(true);
  }
}"
45690,"public void detachView(HUDView2D view){
  logger.fine(""String_Node_Str"" + view + ""String_Node_Str""+ this);
  Entity viewEntity=view.getEntity();
  if (viewEntity == null) {
    return;
  }
  entity.removeEntity(viewEntity);
  RenderComponent rcFrame=(RenderComponent)viewEntity.getComponent(RenderComponent.class);
  if (rcFrame != null) {
    rcFrame.setAttachPoint(null);
  }
}","public void detachView(HUDView2D view){
  if (logger.isLoggable(Level.FINEST)) {
    logger.finest(""String_Node_Str"" + view);
    logger.finest(""String_Node_Str"" + this);
  }
  Entity viewEntity=view.getEntity();
  if (viewEntity == null) {
    return;
  }
  entity.removeEntity(viewEntity);
  RenderComponent rcFrame=(RenderComponent)viewEntity.getComponent(RenderComponent.class);
  if (rcFrame != null) {
    rcFrame.setAttachPoint(null);
  }
}"
45691,"@Override public InputStream getInputStream(){
  try {
    ModuleURI uri=new ArtURI(this.url.toExternalForm());
    Asset asset=AssetManager.getAssetManager().getAsset(uri);
    if (asset == null || AssetManager.getAssetManager().waitForAsset(asset) == false) {
      return null;
    }
    return new FileInputStream(asset.getLocalCacheFile());
  }
 catch (  FileNotFoundException ex) {
    Logger.getLogger(WlaURLConnection.class.getName()).log(Level.SEVERE,null,ex);
  }
catch (  URISyntaxException excp) {
    Logger.getLogger(WlaURLConnection.class.getName()).log(Level.SEVERE,null,excp);
  }
  return null;
}","@Override public InputStream getInputStream() throws IOException {
  try {
    ModuleURI uri=new ArtURI(this.url.toExternalForm());
    Asset asset=AssetManager.getAssetManager().getAsset(uri);
    if (asset == null || AssetManager.getAssetManager().waitForAsset(asset) == false) {
      throw new IOException(""String_Node_Str"" + url);
    }
    return new FileInputStream(asset.getLocalCacheFile());
  }
 catch (  URISyntaxException excp) {
    IOException ioe=new IOException(""String_Node_Str"");
    ioe.initCause(excp);
    throw ioe;
  }
}"
45692,"@Override public InputStream getInputStream(){
  try {
    ContentURI uri=new ContentURI(this.url.toExternalForm());
    Asset asset=AssetManager.getAssetManager().getAsset(uri);
    if (asset == null || AssetManager.getAssetManager().waitForAsset(asset) == false) {
      return null;
    }
    return new FileInputStream(asset.getLocalCacheFile());
  }
 catch (  FileNotFoundException ex) {
    Logger.getLogger(WlContentURLConnection.class.getName()).log(Level.SEVERE,null,ex);
  }
catch (  URISyntaxException excp) {
    Logger.getLogger(WlContentURLConnection.class.getName()).log(Level.SEVERE,null,excp);
  }
  return null;
}","@Override public InputStream getInputStream() throws IOException {
  try {
    ContentURI uri=new ContentURI(this.url.toExternalForm());
    Asset asset=AssetManager.getAssetManager().getAsset(uri);
    if (asset == null || AssetManager.getAssetManager().waitForAsset(asset) == false) {
      throw new IOException(""String_Node_Str"" + url);
    }
    return new FileInputStream(asset.getLocalCacheFile());
  }
 catch (  URISyntaxException excp) {
    IOException ioe=new IOException(""String_Node_Str"");
    ioe.initCause(excp);
    throw ioe;
  }
}"
45693,"@Override public InputStream getInputStream(){
  try {
    WlHttpURI uri=new WlHttpURI(this.url.toExternalForm());
    Asset asset=AssetManager.getAssetManager().getAsset(uri);
    if (asset == null || AssetManager.getAssetManager().waitForAsset(asset) == false) {
      return null;
    }
    return new FileInputStream(asset.getLocalCacheFile());
  }
 catch (  FileNotFoundException ex) {
    Logger.getLogger(WlHttpURLConnection.class.getName()).log(Level.SEVERE,null,ex);
  }
catch (  URISyntaxException excp) {
    Logger.getLogger(WlHttpURLConnection.class.getName()).log(Level.SEVERE,null,excp);
  }
catch (  MalformedURLException excp) {
    Logger.getLogger(WlHttpURLConnection.class.getName()).log(Level.SEVERE,null,excp);
  }
  return null;
}","@Override public InputStream getInputStream() throws IOException {
  try {
    WlHttpURI uri=new WlHttpURI(this.url.toExternalForm());
    Asset asset=AssetManager.getAssetManager().getAsset(uri);
    if (asset == null || AssetManager.getAssetManager().waitForAsset(asset) == false) {
      throw new IOException(""String_Node_Str"" + url);
    }
    return new FileInputStream(asset.getLocalCacheFile());
  }
 catch (  URISyntaxException excp) {
    IOException ioe=new IOException(""String_Node_Str"");
    ioe.initCause(excp);
    throw ioe;
  }
}"
45694,"@Override public InputStream getInputStream(){
  try {
    return WlzipManager.getWlzipManager().getInputStream(url.getHost(),url.getPath());
  }
 catch (  IOException ex) {
    Logger.getLogger(WlzipURLConnection.class.getName()).log(Level.SEVERE,null,ex);
    return null;
  }
}","@Override public InputStream getInputStream() throws IOException {
  return WlzipManager.getWlzipManager().getInputStream(url.getHost(),url.getPath());
}"
45695,"public void showUsers(java.awt.event.ActionEvent evt){
  if (presenceInfo == null) {
    return;
  }
  if (userListHUDComponent == null) {
    userListHUDPanel=new UserListHUDPanel(this,session,pm,cell);
    HUD mainHUD=HUDManagerFactory.getHUDManager().getHUD(""String_Node_Str"");
    userListHUDComponent=mainHUD.createComponent(userListHUDPanel);
    userListHUDPanel.setHUDComponent(userListHUDComponent);
    userListHUDComponent.setPreferredLocation(Layout.NORTHWEST);
    userListHUDComponent.setName(BUNDLE.getString(""String_Node_Str""));
    userListHUDComponent.setIcon(userListIcon);
    mainHUD.addComponent(userListHUDComponent);
    userListHUDComponent.addEventListener(new HUDEventListener(){
      public void HUDObjectChanged(      HUDEvent e){
        if (e.getEventType().equals(HUDEventType.DISAPPEARED)) {
          usersMenuSelected=false;
          userListJMenuItem.setSelected(usersMenuSelected);
        }
      }
    }
);
  }
  userListHUDPanel.setUserList();
  userListHUDComponent.setVisible(usersMenuSelected);
}","public void showUsers(java.awt.event.ActionEvent evt){
  if (presenceInfo == null) {
    return;
  }
  if (userListHUDComponent == null) {
    userListHUDPanel=new UserListHUDPanel(this,session,pm,cell);
    HUD mainHUD=HUDManagerFactory.getHUDManager().getHUD(""String_Node_Str"");
    userListHUDComponent=mainHUD.createComponent(userListHUDPanel);
    userListHUDPanel.setHUDComponent(userListHUDComponent);
    userListHUDComponent.setPreferredLocation(Layout.NORTHWEST);
    userListHUDComponent.setName(BUNDLE.getString(""String_Node_Str"") + ""String_Node_Str"");
    userListHUDComponent.setIcon(userListIcon);
    mainHUD.addComponent(userListHUDComponent);
    userListHUDComponent.addEventListener(new HUDEventListener(){
      public void HUDObjectChanged(      HUDEvent e){
        if (e.getEventType().equals(HUDEventType.DISAPPEARED)) {
          usersMenuSelected=false;
          userListJMenuItem.setSelected(usersMenuSelected);
        }
      }
    }
);
  }
  userListHUDPanel.setUserList();
  userListHUDComponent.setVisible(usersMenuSelected);
}"
45696,"private void teleport(){
  Thread t=new Thread(new Runnable(){
    public void run(){
      try {
        ClientContextJME.getClientMain().gotoLocation(serverURL,location,look);
        System.out.println(""String_Node_Str"" + serverURL + ""String_Node_Str""+ location+ ""String_Node_Str""+ look);
      }
 catch (      IOException ex) {
        logger.log(Level.WARNING,""String_Node_Str"",ex);
      }
    }
  }
,""String_Node_Str"");
  t.start();
}","private void teleport(){
  Thread t=new Thread(new Runnable(){
    public void run(){
      try {
        ClientContextJME.getClientMain().gotoLocation(serverURL,location,look);
        logger.warning(""String_Node_Str"" + serverURL + ""String_Node_Str""+ location+ ""String_Node_Str""+ look);
      }
 catch (      IOException ex) {
        logger.log(Level.WARNING,""String_Node_Str"",ex);
      }
    }
  }
,""String_Node_Str"");
  t.start();
}"
45697,"public void run(){
  try {
    ClientContextJME.getClientMain().gotoLocation(serverURL,location,look);
    System.out.println(""String_Node_Str"" + serverURL + ""String_Node_Str""+ location+ ""String_Node_Str""+ look);
  }
 catch (  IOException ex) {
    logger.log(Level.WARNING,""String_Node_Str"",ex);
  }
}","public void run(){
  try {
    ClientContextJME.getClientMain().gotoLocation(serverURL,location,look);
    logger.warning(""String_Node_Str"" + serverURL + ""String_Node_Str""+ location+ ""String_Node_Str""+ look);
  }
 catch (  IOException ex) {
    logger.log(Level.WARNING,""String_Node_Str"",ex);
  }
}"
45698,"/** 
 */
@Override public void drop(DropTargetDropEvent dtde){
  Point location=dtde.getLocation();
  TreePath path=cellHierarchyTree.getPathForLocation(location.x,location.y);
  if (path == null) {
    dtde.rejectDrop();
    return;
  }
  dtde.acceptDrop(DnDConstants.ACTION_MOVE);
  Transferable transferable=dtde.getTransferable();
  String cellIDString=null;
  try {
    DataFlavor df=new DataFlavor(""String_Node_Str"" + ""String_Node_Str"");
    cellIDString=(String)transferable.getTransferData(df);
  }
 catch (  Exception excp) {
    LOGGER.log(Level.WARNING,""String_Node_Str"" + ""String_Node_Str"",excp);
    return;
  }
  if (cellIDString == null || cellIDString.startsWith(""String_Node_Str"") == false) {
    LOGGER.warning(""String_Node_Str"" + cellIDString);
    return;
  }
  int cellIDInt=-1;
  try {
    cellIDInt=Integer.parseInt(cellIDString.substring(7));
  }
 catch (  Exception excp) {
    LOGGER.log(Level.WARNING,""String_Node_Str"" + ""String_Node_Str"",excp);
    return;
  }
  CellID cellID=new CellID(cellIDInt);
  WonderlandSession session=LoginManager.getPrimary().getPrimarySession();
  CellCache cache=ClientContext.getCellCache(session);
  if (cache == null) {
    LOGGER.warning(""String_Node_Str"" + session);
    return;
  }
  Cell draggedCell=cache.getCell(cellID);
  if (draggedCell == null) {
    LOGGER.warning(""String_Node_Str"" + cellID);
    return;
  }
  CellID parentCellID=CellID.getInvalidCellID();
  DefaultMutableTreeNode treeNode=(DefaultMutableTreeNode)path.getLastPathComponent();
  Object userObject=treeNode.getUserObject();
  Cell newParent=null;
  if (userObject instanceof Cell) {
    parentCellID=((Cell)userObject).getCellID();
    newParent=(Cell)userObject;
    if (draggedCell.equals(newParent) == true) {
      return;
    }
  }
  Cell oldParent=draggedCell.getParent();
  CellTransform oldParentWorld=new CellTransform(null,null);
  if (oldParent != null) {
    oldParentWorld=oldParent.getWorldTransform();
  }
  CellTransform newParentWorld=new CellTransform(null,null);
  if (newParent != null) {
    newParentWorld=newParent.getWorldTransform();
  }
  CellTransform newChildLocal=ScenegraphUtils.computeChildTransform(newParentWorld,draggedCell.getWorldTransform());
  CellEditChannelConnection connection=(CellEditChannelConnection)session.getConnection(CellEditConnectionType.CLIENT_TYPE);
  connection.send(new CellReparentMessage(cellID,parentCellID,newChildLocal));
  dragOverTreeNode=null;
  cellHierarchyTree.repaint();
}","/** 
 */
@Override public void drop(DropTargetDropEvent dtde){
  Point location=dtde.getLocation();
  TreePath path=cellHierarchyTree.getPathForLocation(location.x,location.y);
  if (path == null) {
    dtde.rejectDrop();
    return;
  }
  dtde.acceptDrop(DnDConstants.ACTION_MOVE);
  Transferable transferable=dtde.getTransferable();
  String cellIDString=null;
  try {
    DataFlavor df=new DataFlavor(""String_Node_Str"" + ""String_Node_Str"");
    cellIDString=(String)transferable.getTransferData(df);
  }
 catch (  Exception excp) {
    LOGGER.log(Level.WARNING,""String_Node_Str"" + ""String_Node_Str"",excp);
    return;
  }
  if (cellIDString == null || cellIDString.startsWith(""String_Node_Str"") == false) {
    LOGGER.warning(""String_Node_Str"" + cellIDString);
    return;
  }
  int cellIDInt=-1;
  try {
    cellIDInt=Integer.parseInt(cellIDString.substring(7));
  }
 catch (  Exception excp) {
    LOGGER.log(Level.WARNING,""String_Node_Str"" + ""String_Node_Str"",excp);
    return;
  }
  CellID cellID=new CellID(cellIDInt);
  WonderlandSession session=LoginManager.getPrimary().getPrimarySession();
  CellCache cache=ClientContext.getCellCache(session);
  if (cache == null) {
    LOGGER.warning(""String_Node_Str"" + session);
    return;
  }
  Cell draggedCell=cache.getCell(cellID);
  if (draggedCell == null) {
    LOGGER.warning(""String_Node_Str"" + cellID);
    return;
  }
  CellID parentCellID=CellID.getInvalidCellID();
  SortedTreeNode treeNode=(SortedTreeNode)path.getLastPathComponent();
  Object userObject=treeNode.getUserObject();
  Cell newParent=null;
  if (userObject instanceof Cell) {
    parentCellID=((Cell)userObject).getCellID();
    newParent=(Cell)userObject;
    if (draggedCell.equals(newParent) == true) {
      return;
    }
  }
  CellTransform newParentWorld=new CellTransform(null,null);
  if (newParent != null) {
    newParentWorld=newParent.getWorldTransform();
  }
  CellTransform newChildLocal=ScenegraphUtils.computeChildTransform(newParentWorld,draggedCell.getWorldTransform());
  CellEditChannelConnection connection=(CellEditChannelConnection)session.getConnection(CellEditConnectionType.CLIENT_TYPE);
  connection.send(new CellReparentMessage(cellID,parentCellID,newChildLocal));
  dragOverTreeNode=null;
  cellHierarchyTree.repaint();
}"
45699,"public void run(){
  DefaultMutableTreeNode node=cellNodes.get(cell);
  if (status == CellStatus.DISK) {
    if (node != null) {
      LOGGER.info(""String_Node_Str"" + cell.getName());
      if (selectedCell == cell) {
        dirtyPanelSet.clear();
      }
      TreeModel m=cellHierarchyTree.getModel();
      ((DefaultTreeModel)m).removeNodeFromParent(node);
      cellNodes.remove(cell);
    }
  }
 else   if (status == CellStatus.RENDERING) {
    if (node == null) {
      LOGGER.info(""String_Node_Str"" + cell.getName());
      createJTreeNode(cell);
    }
  }
}","public void run(){
  DefaultMutableTreeNode node=cellNodes.get(cell);
  if (status == CellStatus.DISK) {
    if (node != null) {
      if (selectedCell == cell) {
        dirtyPanelSet.clear();
      }
      TreeModel m=cellHierarchyTree.getModel();
      ((DefaultTreeModel)m).removeNodeFromParent(node);
      cellNodes.remove(cell);
    }
  }
 else   if (status == CellStatus.RENDERING) {
    if (node == null) {
      createJTreeNode(cell);
    }
  }
}"
45700,"/** 
 * Given a component factory, adds the component to the server and upates the GUI to indicate its presence
 */
private void addComponent(CellComponentFactorySPI spi){
  CellComponentServerState state=spi.getDefaultCellComponentServerState();
  CellID cellID=selectedCell.getCellID();
  CellServerComponentMessage message=CellServerComponentMessage.newAddMessage(cellID,state);
  ResponseMessage response=selectedCell.sendCellMessageAndWait(message);
  if (response == null) {
    LOGGER.warning(""String_Node_Str"" + selectedCell.getCellID() + ""String_Node_Str""+ selectedCell.getName()+ ""String_Node_Str"");
    return;
  }
  if (response instanceof CellServerComponentResponseMessage) {
    CellServerComponentResponseMessage cscrm=(CellServerComponentResponseMessage)response;
    addComponentToPanelSet(spi,cscrm.getCellComponentServerState());
  }
 else   if (response instanceof ErrorMessage) {
    LOGGER.log(Level.WARNING,""String_Node_Str"",((ErrorMessage)response).getErrorCause());
  }
}","/** 
 * Given a component factory, adds the component to the server and upates the GUI to indicate its presence
 */
private void addComponent(CellComponentFactorySPI spi){
  CellComponentServerState state=spi.getDefaultCellComponentServerState();
  CellID cellID=selectedCell.getCellID();
  CellServerComponentMessage message=CellServerComponentMessage.newAddMessage(cellID,state);
  ResponseMessage response=selectedCell.sendCellMessageAndWait(message);
  if (response == null) {
    LOGGER.warning(""String_Node_Str"" + selectedCell.getCellID() + ""String_Node_Str""+ selectedCell.getName()+ ""String_Node_Str"");
    return;
  }
  if (response instanceof CellServerComponentResponseMessage) {
    CellServerComponentResponseMessage cscrm=(CellServerComponentResponseMessage)response;
    addComponentToPanelSet(cscrm.getCellComponentServerState());
  }
 else   if (response instanceof ErrorMessage) {
    LOGGER.log(Level.WARNING,""String_Node_Str"",((ErrorMessage)response).getErrorCause());
  }
}"
45701,"/** 
 * Creates a new tree node for the given Cell and inserts it into the tree.
 */
private void createJTreeNode(Cell cell){
  DefaultMutableTreeNode ret=new DefaultMutableTreeNode(cell){
    @Override public String toString(){
      Cell cell=(Cell)getUserObject();
      return ""String_Node_Str"" + cell.getCellID().toString();
    }
  }
;
  cellNodes.put(cell,ret);
  DefaultMutableTreeNode parentNode=cellNodes.get(cell.getParent());
  if (parentNode == null) {
    parentNode=treeRoot;
  }
  DefaultTreeModel model=(DefaultTreeModel)cellHierarchyTree.getModel();
  model.insertNodeInto(ret,parentNode,parentNode.getChildCount());
  List<Cell> children=cell.getChildren();
  for (  Cell child : children) {
    createJTreeNode(child);
  }
}","/** 
 * Creates a new tree node for the given Cell and inserts it into the tree.
 */
private void createJTreeNode(Cell cell){
  SortedTreeNode ret=new SortedTreeNode(cell){
    @Override public String toString(){
      Cell cell=(Cell)getUserObject();
      return ""String_Node_Str"" + cell.getCellID().toString();
    }
  }
;
  cellNodes.put(cell,ret);
  SortedTreeNode parentNode=cellNodes.get(cell.getParent());
  if (parentNode == null) {
    parentNode=treeRoot;
  }
  parentNode.add(ret);
  DefaultTreeModel model=(DefaultTreeModel)cellHierarchyTree.getModel();
  int childIndex=parentNode.getIndex(ret);
  model.nodesWereInserted(parentNode,new int[]{childIndex});
  List<Cell> children=cell.getChildren();
  for (  Cell child : children) {
    createJTreeNode(child);
  }
}"
45702,"public void cellStatusChanged(final Cell cell,final CellStatus status){
  SwingUtilities.invokeLater(new Runnable(){
    public void run(){
      DefaultMutableTreeNode node=cellNodes.get(cell);
      if (status == CellStatus.DISK) {
        if (node != null) {
          LOGGER.info(""String_Node_Str"" + cell.getName());
          if (selectedCell == cell) {
            dirtyPanelSet.clear();
          }
          TreeModel m=cellHierarchyTree.getModel();
          ((DefaultTreeModel)m).removeNodeFromParent(node);
          cellNodes.remove(cell);
        }
      }
 else       if (status == CellStatus.RENDERING) {
        if (node == null) {
          LOGGER.info(""String_Node_Str"" + cell.getName());
          createJTreeNode(cell);
        }
      }
    }
  }
);
}","public void cellStatusChanged(final Cell cell,final CellStatus status){
  SwingUtilities.invokeLater(new Runnable(){
    public void run(){
      DefaultMutableTreeNode node=cellNodes.get(cell);
      if (status == CellStatus.DISK) {
        if (node != null) {
          if (selectedCell == cell) {
            dirtyPanelSet.clear();
          }
          TreeModel m=cellHierarchyTree.getModel();
          ((DefaultTreeModel)m).removeNodeFromParent(node);
          cellNodes.remove(cell);
        }
      }
 else       if (status == CellStatus.RENDERING) {
        if (node == null) {
          createJTreeNode(cell);
        }
      }
    }
  }
);
}"
45703,"/** 
 * Update the node in the tree with the current Cell hierarchy.
 */
private void updateTreeGUI(){
  cellHierarchyTree.removeTreeSelectionListener(treeListener);
  refreshCells(LoginManager.getPrimary().getPrimarySession());
  if (selectedCell != null) {
    DefaultMutableTreeNode node=cellNodes.get(selectedCell);
    if (node == null) {
      LOGGER.warning(""String_Node_Str"" + selectedCell);
      return;
    }
    TreePath path=new TreePath(node.getPath());
    cellHierarchyTree.expandPath(path);
    cellHierarchyTree.setSelectionPath(path);
  }
  cellHierarchyTree.addTreeSelectionListener(treeListener);
}","/** 
 * Update the node in the tree with the current Cell hierarchy.
 */
private void updateTreeGUI(){
  cellHierarchyTree.removeTreeSelectionListener(treeListener);
  refreshCells(LoginManager.getPrimary().getPrimarySession());
  if (selectedCell != null) {
    SortedTreeNode node=cellNodes.get(selectedCell);
    if (node == null) {
      LOGGER.warning(""String_Node_Str"" + selectedCell);
      return;
    }
    TreePath path=new TreePath(node.getPath());
    cellHierarchyTree.expandPath(path);
    cellHierarchyTree.setSelectionPath(path);
  }
  cellHierarchyTree.addTreeSelectionListener(treeListener);
}"
45704,"/** 
 * Adds an individual component panel to the set of panels, given the cell component factory and the component server state.
 */
private void addComponentToPanelSet(CellComponentFactorySPI spi,CellComponentServerState state){
  Class clazz=state.getClass();
  selectedCellServerState.addComponentServerState(state);
  PropertiesManager manager=PropertiesManager.getPropertiesManager();
  PropertiesFactorySPI factory=manager.getPropertiesByClass(clazz);
  if (factory != null) {
    JPanel panel=factory.getPropertiesJPanel();
    if (panel != null) {
      String displayName=factory.getDisplayName();
      listModel.addElement(displayName);
      factoryList.add(factory);
      factory.setCellPropertiesEditor(this);
      factory.open();
    }
  }
}","/** 
 * Adds an individual component panel to the set of panels, given the cell component factory and the component server state.
 */
private void addComponentToPanelSet(CellComponentServerState state){
  Class clazz=state.getClass();
  selectedCellServerState.addComponentServerState(state);
  PropertiesManager manager=PropertiesManager.getPropertiesManager();
  PropertiesFactorySPI factory=manager.getPropertiesByClass(clazz);
  if (factory != null) {
    JPanel panel=factory.getPropertiesJPanel();
    if (panel != null) {
      String displayName=factory.getDisplayName();
      listModel.addElement(displayName);
      factoryList.add(factory);
      factory.setCellPropertiesEditor(this);
      factory.open();
    }
  }
}"
45705,"/** 
 * Get the  cells from the cache and update the nodes in tree
 */
private void refreshCells(WonderlandSession session){
  CellCache cache=ClientContext.getCellCache(session);
  if (cache == null) {
    LOGGER.warning(""String_Node_Str"" + session);
    return;
  }
  treeRoot=new DefaultMutableTreeNode(BUNDLE.getString(""String_Node_Str""));
  DefaultTreeModel treeModel=new DefaultTreeModel(treeRoot);
  cellHierarchyTree.setModel(treeModel);
  cellNodes.clear();
  Collection<Cell> rootCells=cache.getRootCells();
  for (  Cell rootCell : rootCells) {
    if (rootCell instanceof AvatarCell) {
      continue;
    }
    createJTreeNode(rootCell);
  }
  cellHierarchyTree.repaint();
}","/** 
 * Get the  cells from the cache and update the nodes in tree
 */
private void refreshCells(WonderlandSession session){
  CellCache cache=ClientContext.getCellCache(session);
  if (cache == null) {
    LOGGER.warning(""String_Node_Str"" + session);
    return;
  }
  treeRoot=new SortedTreeNode(BUNDLE.getString(""String_Node_Str""));
  DefaultTreeModel treeModel=new DefaultTreeModel(treeRoot);
  cellHierarchyTree.setModel(treeModel);
  cellNodes.clear();
  Collection<Cell> rootCells=cache.getRootCells();
  for (  Cell rootCell : rootCells) {
    if (rootCell instanceof AvatarCell) {
      continue;
    }
    createJTreeNode(rootCell);
  }
  cellHierarchyTree.repaint();
}"
45706,"/** 
 */
@Override public Component getTreeCellRendererComponent(JTree tree,Object value,boolean selected,boolean expanded,boolean leaf,int row,boolean hasFocus){
  super.getTreeCellRendererComponent(tree,value,selected,expanded,leaf,row,hasFocus);
  DefaultMutableTreeNode treeNode=(DefaultMutableTreeNode)value;
  if (treeNode == dragOverTreeNode) {
    setBorder(BorderFactory.createLineBorder(Color.BLACK));
  }
 else {
    setBorder(null);
  }
  Object userObject=treeNode.getUserObject();
  if (userObject instanceof Cell) {
    Cell cell=(Cell)treeNode.getUserObject();
    setText(cell.getName() + ""String_Node_Str"" + cell.getCellID().toString()+ ""String_Node_Str"");
  }
  return this;
}","/** 
 */
@Override public Component getTreeCellRendererComponent(JTree tree,Object value,boolean selected,boolean expanded,boolean leaf,int row,boolean hasFocus){
  super.getTreeCellRendererComponent(tree,value,selected,expanded,leaf,row,hasFocus);
  SortedTreeNode treeNode=(SortedTreeNode)value;
  if (treeNode == dragOverTreeNode) {
    setBorder(BorderFactory.createLineBorder(Color.BLACK));
  }
 else {
    setBorder(null);
  }
  Object userObject=treeNode.getUserObject();
  if (userObject instanceof Cell) {
    Cell cell=(Cell)treeNode.getUserObject();
    setText(cell.getName() + ""String_Node_Str"" + cell.getCellID().toString()+ ""String_Node_Str"");
  }
  return this;
}"
45707,"/** 
 * Applies the values stored in the GUI to the cell. Loops through each of the panels and tells them to apply().
 */
private void applyValues(){
  for (  PropertiesFactorySPI factory : factoryList) {
    Class clazz=factory.getClass();
    if (dirtyPanelSet.contains(clazz) == true) {
      factory.apply();
    }
  }
  CellServerState updateState=stateUpdates.cellServerState;
  if (updateState != null) {
    updateState.removeAllComponentServerStates();
  }
  CellServerStateUpdateMessage msg=new CellServerStateUpdateMessage(selectedCell.getCellID(),updateState,stateUpdates.cellComponentServerStateSet);
  ResponseMessage response=selectedCell.sendCellMessageAndWait(msg);
  if (response instanceof ErrorMessage) {
    ErrorMessage em=(ErrorMessage)response;
    LOGGER.log(Level.WARNING,""String_Node_Str"" + em.getErrorMessage(),em.getErrorCause());
    JOptionPane.showMessageDialog(this,em.getErrorMessage(),""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
  }
  stateUpdates.clear();
  selectedCellServerState=fetchCellServerState();
  if (selectedCellServerState == null) {
    LOGGER.warning(""String_Node_Str"" + selectedCell.getName());
    return;
  }
  dirtyPanelSet.clear();
  applyButton.setEnabled(false);
  restoreButton.setEnabled(false);
  updateGUI();
  DefaultMutableTreeNode node=cellNodes.get(selectedCell);
  ((DefaultTreeModel)cellHierarchyTree.getModel()).nodeChanged(node);
}","/** 
 * Applies the values stored in the GUI to the cell. Loops through each of the panels and tells them to apply().
 */
private void applyValues(){
  for (  PropertiesFactorySPI factory : factoryList) {
    Class clazz=factory.getClass();
    if (dirtyPanelSet.contains(clazz) == true) {
      factory.apply();
    }
  }
  CellServerState updateState=stateUpdates.cellServerState;
  if (updateState != null) {
    updateState.removeAllComponentServerStates();
  }
  CellServerStateUpdateMessage msg=new CellServerStateUpdateMessage(selectedCell.getCellID(),updateState,stateUpdates.cellComponentServerStateSet);
  ResponseMessage response=selectedCell.sendCellMessageAndWait(msg);
  if (response instanceof ErrorMessage) {
    ErrorMessage em=(ErrorMessage)response;
    LOGGER.log(Level.WARNING,""String_Node_Str"" + em.getErrorMessage(),em.getErrorCause());
    JOptionPane.showMessageDialog(this,em.getErrorMessage(),""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
  }
  stateUpdates.clear();
  selectedCellServerState=fetchCellServerState();
  if (selectedCellServerState == null) {
    LOGGER.warning(""String_Node_Str"" + selectedCell.getName());
    return;
  }
  dirtyPanelSet.clear();
  applyButton.setEnabled(false);
  restoreButton.setEnabled(false);
  updateGUI();
  SortedTreeNode node=cellNodes.get(selectedCell);
  node.nameChanged();
}"
45708,"/** 
 * Constructor 
 */
public CellPropertiesJFrame(){
  factoryList=new LinkedList();
  stateUpdates=new StateUpdates();
  initComponents();
  listModel=new DefaultListModel();
  capabilityList.setModel(listModel);
  capabilityList.addListSelectionListener(new CapabilityListSelectionListener());
  basicPropertiesFactory=new BasicJPanel();
  basicPropertiesFactory.setCellPropertiesEditor(this);
  positionPropertiesFactory=new PositionJPanel();
  positionPropertiesFactory.setCellPropertiesEditor(this);
  treeRoot=new DefaultMutableTreeNode(BUNDLE.getString(""String_Node_Str""));
  cellNodes=new HashMap();
  ((DefaultTreeModel)cellHierarchyTree.getModel()).setRoot(treeRoot);
  cellHierarchyTree.setCellRenderer(new CellTreeRenderer());
  cellListener=new CellStatusChangeListener(){
    public void cellStatusChanged(    final Cell cell,    final CellStatus status){
      SwingUtilities.invokeLater(new Runnable(){
        public void run(){
          DefaultMutableTreeNode node=cellNodes.get(cell);
          if (status == CellStatus.DISK) {
            if (node != null) {
              LOGGER.info(""String_Node_Str"" + cell.getName());
              if (selectedCell == cell) {
                dirtyPanelSet.clear();
              }
              TreeModel m=cellHierarchyTree.getModel();
              ((DefaultTreeModel)m).removeNodeFromParent(node);
              cellNodes.remove(cell);
            }
          }
 else           if (status == CellStatus.RENDERING) {
            if (node == null) {
              LOGGER.info(""String_Node_Str"" + cell.getName());
              createJTreeNode(cell);
            }
          }
        }
      }
);
    }
  }
;
  treeListener=new TreeSelectionListener(){
    public void valueChanged(    TreeSelectionEvent e){
      DefaultMutableTreeNode selectedNode=(DefaultMutableTreeNode)cellHierarchyTree.getLastSelectedPathComponent();
      if (selectedNode != null) {
        Object userObject=selectedNode.getUserObject();
        if (userObject instanceof Cell) {
          setSelectedCell((Cell)userObject);
        }
 else {
          setSelectedCell(null);
        }
      }
 else {
        setSelectedCell(null);
      }
    }
  }
;
  cellHierarchyTree.setDragEnabled(true);
  DropTarget dt=new DropTarget();
  try {
    dt.addDropTargetListener(new CellDropTargetListener());
  }
 catch (  TooManyListenersException ex) {
    LOGGER.log(Level.SEVERE,null,ex);
  }
  cellHierarchyTree.setDropTarget(dt);
  addWindowListener(new WindowAdapter(){
    @Override public void windowClosing(    WindowEvent e){
      if (dirtyPanelSet.isEmpty() == false) {
        int result=JOptionPane.showConfirmDialog(CellPropertiesJFrame.this,BUNDLE.getString(""String_Node_Str""),BUNDLE.getString(""String_Node_Str""),JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE);
        if (result == JOptionPane.YES_OPTION) {
          applyValues();
        }
 else {
          restoreValues();
        }
      }
      for (      PropertiesFactorySPI factory : factoryList) {
        factory.close();
      }
    }
  }
);
}","/** 
 * Constructor 
 */
public CellPropertiesJFrame(){
  factoryList=new LinkedList();
  stateUpdates=new StateUpdates();
  initComponents();
  listModel=new DefaultListModel();
  capabilityList.setModel(listModel);
  capabilityList.addListSelectionListener(new CapabilityListSelectionListener());
  basicPropertiesFactory=new BasicJPanel();
  basicPropertiesFactory.setCellPropertiesEditor(this);
  positionPropertiesFactory=new PositionJPanel();
  positionPropertiesFactory.setCellPropertiesEditor(this);
  treeRoot=new SortedTreeNode(BUNDLE.getString(""String_Node_Str""));
  cellNodes=new HashMap();
  DefaultTreeModel treeModel=new DefaultTreeModel(treeRoot);
  cellHierarchyTree.setModel(treeModel);
  cellHierarchyTree.setCellRenderer(new CellTreeRenderer());
  cellListener=new CellStatusChangeListener(){
    public void cellStatusChanged(    final Cell cell,    final CellStatus status){
      SwingUtilities.invokeLater(new Runnable(){
        public void run(){
          DefaultMutableTreeNode node=cellNodes.get(cell);
          if (status == CellStatus.DISK) {
            if (node != null) {
              if (selectedCell == cell) {
                dirtyPanelSet.clear();
              }
              TreeModel m=cellHierarchyTree.getModel();
              ((DefaultTreeModel)m).removeNodeFromParent(node);
              cellNodes.remove(cell);
            }
          }
 else           if (status == CellStatus.RENDERING) {
            if (node == null) {
              createJTreeNode(cell);
            }
          }
        }
      }
);
    }
  }
;
  treeListener=new TreeSelectionListener(){
    public void valueChanged(    TreeSelectionEvent e){
      SortedTreeNode selectedNode=(SortedTreeNode)cellHierarchyTree.getLastSelectedPathComponent();
      if (selectedNode != null) {
        Object userObject=selectedNode.getUserObject();
        if (userObject instanceof Cell) {
          setSelectedCell((Cell)userObject);
        }
 else {
          setSelectedCell(null);
        }
      }
 else {
        setSelectedCell(null);
      }
    }
  }
;
  cellHierarchyTree.setDragEnabled(true);
  DropTarget dt=new DropTarget();
  try {
    dt.addDropTargetListener(new CellDropTargetListener());
  }
 catch (  TooManyListenersException ex) {
    LOGGER.log(Level.SEVERE,null,ex);
  }
  cellHierarchyTree.setDropTarget(dt);
  addWindowListener(new WindowAdapter(){
    @Override public void windowClosing(    WindowEvent e){
      if (dirtyPanelSet.isEmpty() == false) {
        int result=JOptionPane.showConfirmDialog(CellPropertiesJFrame.this,BUNDLE.getString(""String_Node_Str""),BUNDLE.getString(""String_Node_Str""),JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE);
        if (result == JOptionPane.YES_OPTION) {
          applyValues();
        }
 else {
          restoreValues();
        }
      }
      for (      PropertiesFactorySPI factory : factoryList) {
        factory.close();
      }
    }
  }
);
}"
45709,"/** 
 */
@Override public void dragOver(DropTargetDragEvent dtde){
  Point location=dtde.getLocation();
  TreePath path=cellHierarchyTree.getPathForLocation(location.x,location.y);
  if (path == null) {
    dragOverTreeNode=null;
  }
 else {
    dragOverTreeNode=(DefaultMutableTreeNode)path.getLastPathComponent();
  }
  cellHierarchyTree.repaint();
}","/** 
 */
@Override public void dragOver(DropTargetDragEvent dtde){
  Point location=dtde.getLocation();
  TreePath path=cellHierarchyTree.getPathForLocation(location.x,location.y);
  if (path == null) {
    dragOverTreeNode=null;
  }
 else {
    dragOverTreeNode=(SortedTreeNode)path.getLastPathComponent();
  }
  cellHierarchyTree.repaint();
}"
45710,"/** 
 * creates a new JmeClientMain
 * @param args the command line arguments
 */
public JmeClientMain(String[] args){
  checkVmVersion();
  checkDBException();
  processArgs(args);
  URL propsURL=getPropsURL();
  loadProperties(propsURL);
  ClientContextJME.setClientMain(this);
  String windowSize=System.getProperty(WINDOW_SIZE_PROP,WINDOW_SIZE_DEFAULT);
  try {
    if (windowSize.equalsIgnoreCase(""String_Node_Str"")) {
      GraphicsEnvironment ge=GraphicsEnvironment.getLocalGraphicsEnvironment();
      GraphicsDevice[] gs=ge.getScreenDevices();
      if (gs.length > 1) {
        LOGGER.warning(""String_Node_Str"");
      }
      GraphicsConfiguration gc=gs[0].getDefaultConfiguration();
      Rectangle size=gc.getBounds();
      width=size.width;
      height=size.height;
    }
 else {
      String sizeWidth=windowSize.substring(0,windowSize.indexOf('x'));
      String sizeHeight=windowSize.substring(windowSize.indexOf('x') + 1);
      width=Integer.parseInt(sizeWidth);
      height=Integer.parseInt(sizeHeight);
    }
  }
 catch (  Exception e) {
    LOGGER.warning(WINDOW_SIZE_PROP + ""String_Node_Str"" + ""String_Node_Str""+ windowSize);
  }
  String serverURL=System.getProperty(SERVER_URL_PROP);
  if (serverURL == null) {
    serverURL=SERVER_URL_DEFAULT;
    System.setProperty(SERVER_URL_PROP,serverURL);
  }
  Clip clip2=Clip.create(1000,new TimingTarget(){
    public void timingEvent(    float arg0,    long arg1){
    }
    public void begin(){
    }
    public void end(){
    }
    public void pause(){
    }
    public void resume(){
    }
  }
);
  clip2.setInterpolator(Interpolators.getEasingInstance(0.4f,0.4f));
  clip2.start();
  WorldManager worldManager=ClientContextJME.getWorldManager();
  String requestedFPS=System.getProperty(DESIRED_FPS_PROP,DESIRED_FPS_DEFAULT);
  if (requestedFPS != null) {
    try {
      desiredFrameRate=Integer.parseInt(requestedFPS);
    }
 catch (    NumberFormatException e) {
      LOGGER.warning(DESIRED_FPS_PROP + ""String_Node_Str"" + requestedFPS+ ""String_Node_Str"");
    }
  }
  worldManager.getRenderManager().setDesiredFrameRate(desiredFrameRate);
  createUI(worldManager);
  login=new JmeLoginUI(frame);
  LoginManager.setLoginUI(login);
  frame.addServerURLListener(new ServerURLListener(){
    public void serverURLChanged(    final String serverURL){
      new Thread(ThreadManager.getThreadGroup(),new Runnable(){
        public void run(){
          try {
            loadServer(serverURL);
          }
 catch (          IOException ioe) {
            LOGGER.log(Level.WARNING,""String_Node_Str"" + serverURL,ioe);
          }
        }
      }
).start();
    }
    public void logout(){
      new Thread(ThreadManager.getThreadGroup(),new Runnable(){
        public void run(){
          JmeClientMain.this.logout();
        }
      }
).start();
    }
  }
);
  try {
    loadServer(serverURL);
  }
 catch (  IOException ioe) {
    LOGGER.log(Level.WARNING,""String_Node_Str"" + serverURL,ioe);
  }
}","/** 
 * creates a new JmeClientMain
 * @param args the command line arguments
 */
public JmeClientMain(String[] args){
  checkVmVersion();
  processArgs(args);
  URL propsURL=getPropsURL();
  loadProperties(propsURL);
  checkDBException();
  ClientContextJME.setClientMain(this);
  String windowSize=System.getProperty(WINDOW_SIZE_PROP,WINDOW_SIZE_DEFAULT);
  try {
    if (windowSize.equalsIgnoreCase(""String_Node_Str"")) {
      GraphicsEnvironment ge=GraphicsEnvironment.getLocalGraphicsEnvironment();
      GraphicsDevice[] gs=ge.getScreenDevices();
      if (gs.length > 1) {
        LOGGER.warning(""String_Node_Str"");
      }
      GraphicsConfiguration gc=gs[0].getDefaultConfiguration();
      Rectangle size=gc.getBounds();
      width=size.width;
      height=size.height;
    }
 else {
      String sizeWidth=windowSize.substring(0,windowSize.indexOf('x'));
      String sizeHeight=windowSize.substring(windowSize.indexOf('x') + 1);
      width=Integer.parseInt(sizeWidth);
      height=Integer.parseInt(sizeHeight);
    }
  }
 catch (  Exception e) {
    LOGGER.warning(WINDOW_SIZE_PROP + ""String_Node_Str"" + ""String_Node_Str""+ windowSize);
  }
  String serverURL=System.getProperty(SERVER_URL_PROP);
  if (serverURL == null) {
    serverURL=SERVER_URL_DEFAULT;
    System.setProperty(SERVER_URL_PROP,serverURL);
  }
  Clip clip2=Clip.create(1000,new TimingTarget(){
    public void timingEvent(    float arg0,    long arg1){
    }
    public void begin(){
    }
    public void end(){
    }
    public void pause(){
    }
    public void resume(){
    }
  }
);
  clip2.setInterpolator(Interpolators.getEasingInstance(0.4f,0.4f));
  clip2.start();
  WorldManager worldManager=ClientContextJME.getWorldManager();
  String requestedFPS=System.getProperty(DESIRED_FPS_PROP,DESIRED_FPS_DEFAULT);
  if (requestedFPS != null) {
    try {
      desiredFrameRate=Integer.parseInt(requestedFPS);
    }
 catch (    NumberFormatException e) {
      LOGGER.warning(DESIRED_FPS_PROP + ""String_Node_Str"" + requestedFPS+ ""String_Node_Str"");
    }
  }
  worldManager.getRenderManager().setDesiredFrameRate(desiredFrameRate);
  createUI(worldManager);
  login=new JmeLoginUI(frame);
  LoginManager.setLoginUI(login);
  frame.addServerURLListener(new ServerURLListener(){
    public void serverURLChanged(    final String serverURL){
      new Thread(ThreadManager.getThreadGroup(),new Runnable(){
        public void run(){
          try {
            loadServer(serverURL);
          }
 catch (          IOException ioe) {
            LOGGER.log(Level.WARNING,""String_Node_Str"" + serverURL,ioe);
          }
        }
      }
).start();
    }
    public void logout(){
      new Thread(ThreadManager.getThreadGroup(),new Runnable(){
        public void run(){
          JmeClientMain.this.logout();
        }
      }
).start();
    }
  }
);
  try {
    loadServer(serverURL);
  }
 catch (  IOException ioe) {
    LOGGER.log(Level.WARNING,""String_Node_Str"" + serverURL,ioe);
  }
}"
45711,"/** 
 */
public void translationPerformed(Vector3f translation){
  CellTransform transform=cell.getLocalTransform();
  Vector3f newTranslation=translationOnPress.add(translation);
  transform.setTranslation(newTranslation);
  movableComp.localMoveRequest(transform);
}","/** 
 */
public void translationPerformed(Vector3f translation){
  CellTransform cellWorldTransform=new CellTransform();
  if (cell.getParent() != null) {
    cellWorldTransform=cell.getParent().getWorldTransform();
    cellWorldTransform.setTranslation(new Vector3f());
  }
  CellTransform worldTransform=new CellTransform();
  CellTransform transform=new CellTransform(null,translation);
  CellTransform newTransform=CellPlacementUtils.transform(transform,worldTransform,cellWorldTransform);
  Vector3f newTranslation=translationOnPress.add(newTransform.getTranslation(null));
  CellTransform cellTransform=cell.getLocalTransform();
  cellTransform.setTranslation(newTranslation);
  movableComp.localMoveRequest(cellTransform);
}"
45712,"/** 
 * Attempt to use the current avatar. Close the window if so.
 */
private void use(){
  final AvatarRegistry registry=AvatarRegistry.getAvatarRegistry();
  final String newAvatarName=nameTextField.getText().trim();
  if (newAvatarName == null || newAvatarName.equals(""String_Node_Str"") == true) {
    String msg=""String_Node_Str"";
    JOptionPane.showMessageDialog(this,msg,""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
    return;
  }
  if (newAvatarName.indexOf(""String_Node_Str"") != -1) {
    String msg=""String_Node_Str"";
    JOptionPane.showMessageDialog(this,msg,""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
    return;
  }
  AvatarSPI oldAvatar=registry.getAvatarByName(newAvatarName);
  if (newAvatarName.equals(originalAvatarName) == false && oldAvatar != null) {
    String msg=""String_Node_Str"" + newAvatarName + ""String_Node_Str""+ ""String_Node_Str"";
    JOptionPane.showMessageDialog(this,msg,""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
    return;
  }
  if (newAvatarName.equals(originalAvatarName) == true) {
    setBusy(true);
    new Thread(){
      @Override public void run(){
        avatar.setAvatarParams(currentParams);
        save(avatar);
        registry.setAvatarInUse(avatar,false);
        SwingUtilities.invokeLater(new Runnable(){
          public void run(){
            setBusy(false);
            setVisible(false);
          }
        }
);
      }
    }
.start();
    return;
  }
  setBusy(true);
  new Thread(){
    @Override public void run(){
      ImiAvatar newAvatar=ImiAvatar.createAvatar(newAvatarName);
      newAvatar.setAvatarParams(currentParams);
      save(newAvatar);
      registry.setAvatarInUse(newAvatar,false);
      if (registry.getAvatarByName(originalAvatarName) != null) {
        avatar.delete();
      }
      SwingUtilities.invokeLater(new Runnable(){
        public void run(){
          setBusy(false);
          setVisible(false);
        }
      }
);
    }
  }
.start();
}","/** 
 * Attempt to use the current avatar. Close the window if so.
 */
private void use(){
  final AvatarRegistry registry=AvatarRegistry.getAvatarRegistry();
  final String newAvatarName=nameTextField.getText().trim();
  if (newAvatarName == null || newAvatarName.equals(""String_Node_Str"") == true) {
    String msg=BUNDLE.getString(""String_Node_Str"");
    String title=BUNDLE.getString(""String_Node_Str"");
    JOptionPane.showMessageDialog(this,msg,title,JOptionPane.ERROR_MESSAGE);
    return;
  }
  if (newAvatarName.indexOf(""String_Node_Str"") != -1) {
    String msg=BUNDLE.getString(""String_Node_Str"");
    String title=BUNDLE.getString(""String_Node_Str"");
    JOptionPane.showMessageDialog(this,msg,title,JOptionPane.ERROR_MESSAGE);
    return;
  }
  AvatarSPI oldAvatar=registry.getAvatarByName(newAvatarName);
  if (newAvatarName.equals(originalAvatarName) == false && oldAvatar != null) {
    String msg=BUNDLE.getString(""String_Node_Str"");
    msg=MessageFormat.format(msg,newAvatarName);
    String title=BUNDLE.getString(""String_Node_Str"");
    JOptionPane.showMessageDialog(this,msg,title,JOptionPane.ERROR_MESSAGE);
    return;
  }
  if (newAvatarName.equals(originalAvatarName) == true) {
    setBusy(true);
    new Thread(){
      @Override public void run(){
        avatar.setAvatarParams(currentParams);
        save(avatar);
        registry.setAvatarInUse(avatar,false);
        SwingUtilities.invokeLater(new Runnable(){
          public void run(){
            setBusy(false);
            setVisible(false);
          }
        }
);
      }
    }
.start();
    return;
  }
  setBusy(true);
  new Thread(){
    @Override public void run(){
      ImiAvatar newAvatar=ImiAvatar.createAvatar(newAvatarName);
      newAvatar.setAvatarParams(currentParams);
      save(newAvatar);
      registry.setAvatarInUse(newAvatar,false);
      if (registry.getAvatarByName(originalAvatarName) != null) {
        avatar.delete();
      }
      SwingUtilities.invokeLater(new Runnable(){
        public void run(){
          setBusy(false);
          setVisible(false);
        }
      }
);
    }
  }
.start();
}"
45713,"/** 
 * Sets the current attributes of the avatar and refreshes the GUI. NOTE: This method assumes it is being called in the AWT Event Thread.
 * @param attributes The attribute of the avatar configuration
 */
public void setAttributes(WonderlandCharacterParams attributes){
  if (EventQueue.isDispatchThread() == false) {
    LOGGER.severe(""String_Node_Str"");
  }
  currentParams=attributes.clone();
  populateComboBox(hairComboBox,ConfigType.HAIR,""String_Node_Str"");
  populateComboBox(headComboBox,ConfigType.HEAD,""String_Node_Str"");
  populateComboBox(torsoComboBox,ConfigType.TORSO,""String_Node_Str"");
  populateComboBox(legsComboBox,ConfigType.LEGS,""String_Node_Str"");
  populateComboBox(jacketComboBox,ConfigType.JACKET,""String_Node_Str"");
  populateComboBox(handsComboBox,ConfigType.HANDS,""String_Node_Str"");
  populateComboBox(feetComboBox,ConfigType.FEET,""String_Node_Str"");
  updateAvatarName();
  updateGender();
  updateComboBoxes();
}","/** 
 * Sets the current attributes of the avatar and refreshes the GUI. NOTE: This method assumes it is being called in the AWT Event Thread.
 * @param attributes The attribute of the avatar configuration
 */
public void setAttributes(WonderlandCharacterParams attributes){
  if (EventQueue.isDispatchThread() == false) {
    LOGGER.severe(""String_Node_Str"");
  }
  currentParams=attributes.clone();
  populateComboBox(hairComboBox,ConfigType.HAIR);
  populateComboBox(headComboBox,ConfigType.HEAD);
  populateComboBox(torsoComboBox,ConfigType.TORSO);
  populateComboBox(legsComboBox,ConfigType.LEGS);
  populateComboBox(jacketComboBox,ConfigType.JACKET);
  populateComboBox(handsComboBox,ConfigType.HANDS);
  populateComboBox(feetComboBox,ConfigType.FEET);
  updateAvatarName();
  updateGender();
  updateComboBoxes();
}"
45714,"/** 
 * Initializes the given combo box with the elements from the given configuration type (ConfigType). The 'prefix' given the name to prepend to each entry in the combo box. NOTE: This method assumes it is being called in the AWT Event Thread.
 */
private void populateComboBox(JComboBox box,ConfigType type,String prefix){
  setLocalChanges(true);
  try {
    List<ConfigElement> elements=currentParams.getElements(type);
    DefaultComboBoxModel m=(DefaultComboBoxModel)box.getModel();
    m.removeAllElements();
    int i=0;
    for (    ConfigElement ce : elements) {
      m.insertElementAt(ce.getDescription(),i);
      i++;
    }
  }
  finally {
    setLocalChanges(false);
  }
}","/** 
 * Initializes the given combo box with the elements from the given configuration type (ConfigType). NOTE: This method assumes it is being called in the AWT Event Thread.
 */
private void populateComboBox(JComboBox box,ConfigType type){
  setLocalChanges(true);
  try {
    List<ConfigElement> elements=currentParams.getElements(type);
    DefaultComboBoxModel m=(DefaultComboBoxModel)box.getModel();
    m.removeAllElements();
    int i=0;
    for (    ConfigElement ce : elements) {
      String description=ce.getDescription();
      m.insertElementAt(PRESETS_BUNDLE.getString(description),i);
      i++;
    }
  }
  finally {
    setLocalChanges(false);
  }
}"
45715,"/** 
 * Default constructor 
 */
public AssetCache(AssetFactory factory){
  assetDB=new AssetDB();
  assetFactory=factory;
  cacheDir=new File(ClientContext.getUserDirectory(),""String_Node_Str"");
}","/** 
 * Default constructor 
 */
public AssetCache(AssetFactory factory) throws AssetDBException {
  assetDB=new AssetDB();
  assetFactory=factory;
  cacheDir=new File(ClientContext.getUserDirectory(),""String_Node_Str"");
}"
45716,"/** 
 * Disconnects from the database.
 */
public void disconnect(){
  if (isConnected) {
    String dbUrl=getDatabaseUrl();
    dbProperties.put(""String_Node_Str"",""String_Node_Str"");
    try {
      DriverManager.getConnection(dbUrl,dbProperties);
    }
 catch (    SQLException ex) {
      if (ex.getSQLState().equals(""String_Node_Str"") == true) {
        logger.log(Level.INFO,""String_Node_Str"");
      }
 else {
        logger.log(Level.WARNING,""String_Node_Str"" + ex.getMessage(),ex);
      }
    }
    isConnected=false;
    dbConnection=null;
  }
}","/** 
 * Disconnects from the database.
 */
public void disconnect(){
  if (isConnected) {
    String dbUrl=getDatabaseUrl();
    dbProperties.put(""String_Node_Str"",""String_Node_Str"");
    try {
      DriverManager.getConnection(dbUrl,dbProperties);
    }
 catch (    SQLException ex) {
      if (ex.getSQLState().equals(""String_Node_Str"") == true) {
        logger.log(Level.INFO,""String_Node_Str"");
      }
 else {
        logger.log(Level.WARNING,""String_Node_Str"" + ""String_Node_Str"" + ex.getMessage(),ex);
      }
    }
    isConnected=false;
    dbConnection=null;
  }
}"
45717,"/** 
 * Main method that has a simple command-line interface to test the database. The usage is: java AssetDB [COMMAND] [ARGS], where COMMAND can be: <p> LIST: Lists all of the entries in the database ADD: Add an entry to the database, followed by the required data fields
 */
public static void main(String[] args) throws URISyntaxException {
  AssetDB db=new AssetDB();
  logger.warning(""String_Node_Str"" + db.getDatabaseLocation());
  logger.warning(""String_Node_Str"" + db.getDatabaseUrl());
  logger.warning(""String_Node_Str"" + db.isConnected());
  db.listAssets();
  db.disconnect();
}","/** 
 * Main method that has a simple command-line interface to test the database. The usage is: java AssetDB [COMMAND] [ARGS], where COMMAND can be: <p> LIST: Lists all of the entries in the database ADD: Add an entry to the database, followed by the required data fields
 */
public static void main(String[] args) throws URISyntaxException, AssetDBException {
  AssetDB db=new AssetDB();
  logger.warning(""String_Node_Str"" + db.getDatabaseLocation());
  logger.warning(""String_Node_Str"" + db.getDatabaseUrl());
  logger.warning(""String_Node_Str"" + db.isConnected());
  db.listAssets();
  db.disconnect();
}"
45718,"/** 
 * Default constructor
 */
public AssetDB(){
  this.dbName=AssetDB.DB_NAME;
  logger.fine(""String_Node_Str"" + this.dbName);
  if (this.setDBSystemDir() == false) {
    logger.severe(""String_Node_Str"");
    System.exit(1);
  }
  try {
    Class.forName(""String_Node_Str"");
  }
 catch (  ClassNotFoundException ex) {
    logger.log(Level.SEVERE,""String_Node_Str"",ex);
    ex.printStackTrace();
    System.exit(1);
  }
  dbProperties=new Properties();
  dbProperties.put(""String_Node_Str"",""String_Node_Str"");
  dbProperties.put(""String_Node_Str"",""String_Node_Str"");
  dbProperties.put(""String_Node_Str"",""String_Node_Str"");
  dbProperties.put(""String_Node_Str"",""String_Node_Str"");
  dbProperties.put(""String_Node_Str"",""String_Node_Str"");
  dbProperties.put(""String_Node_Str"",""String_Node_Str"");
  if (!dbExists()) {
    try {
      logger.fine(""String_Node_Str"" + getDatabaseLocation());
      createDatabase();
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
catch (    Error er) {
      er.printStackTrace();
    }
    disconnect();
    if (!connect()) {
      logger.severe(""String_Node_Str"");
      logger.severe(""String_Node_Str"");
      System.exit(1);
    }
  }
 else {
    if (!connect()) {
      logger.severe(""String_Node_Str"");
      logger.severe(""String_Node_Str"");
      System.exit(1);
    }
  }
}","/** 
 * Default constructor.
 * @throw AssetDBException Upon error connecting to the DB
 */
public AssetDB() throws AssetDBException {
  this.dbName=AssetDB.DB_NAME;
  logger.fine(""String_Node_Str"" + this.dbName);
  if (this.setDBSystemDir() == false) {
    logger.severe(""String_Node_Str"");
    throw new AssetDBException(""String_Node_Str"");
  }
  try {
    Class.forName(""String_Node_Str"");
  }
 catch (  ClassNotFoundException ex) {
    logger.log(Level.SEVERE,""String_Node_Str"",ex);
    ex.printStackTrace();
    System.exit(1);
  }
  dbProperties=new Properties();
  dbProperties.put(""String_Node_Str"",""String_Node_Str"");
  dbProperties.put(""String_Node_Str"",""String_Node_Str"");
  dbProperties.put(""String_Node_Str"",""String_Node_Str"");
  dbProperties.put(""String_Node_Str"",""String_Node_Str"");
  dbProperties.put(""String_Node_Str"",""String_Node_Str"");
  dbProperties.put(""String_Node_Str"",""String_Node_Str"");
  if (!dbExists()) {
    try {
      logger.fine(""String_Node_Str"" + getDatabaseLocation());
      createDatabase();
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
catch (    Error er) {
      er.printStackTrace();
    }
    disconnect();
    if (!connect()) {
      logger.severe(""String_Node_Str"");
      logger.severe(""String_Node_Str"");
      throw new AssetDBException(""String_Node_Str"");
    }
  }
 else {
    if (!connect()) {
      logger.severe(""String_Node_Str"");
      logger.severe(""String_Node_Str"");
      throw new AssetDBException(""String_Node_Str"");
    }
  }
}"
45719,"private AssetManager(){
  assetFactory=new AssetFactory();
  assetCache=new AssetCache(assetFactory);
  loadingAssets=new HashMap<AssetID,AssetLoader>();
  loadedAssets=new HashMap<AssetID,Asset>();
}","private AssetManager(){
  try {
    assetFactory=new AssetFactory();
    assetCache=new AssetCache(assetFactory);
  }
 catch (  java.lang.Exception excp) {
    logger.log(Level.WARNING,""String_Node_Str"",excp);
  }
  loadingAssets=new HashMap<AssetID,AssetLoader>();
  loadedAssets=new HashMap<AssetID,Asset>();
}"
45720,"/** 
 * creates a new JmeClientMain
 * @param args the command line arguments
 */
public JmeClientMain(String[] args){
  checkVmVersion();
  processArgs(args);
  URL propsURL=getPropsURL();
  loadProperties(propsURL);
  ClientContextJME.setClientMain(this);
  String windowSize=System.getProperty(WINDOW_SIZE_PROP,WINDOW_SIZE_DEFAULT);
  try {
    if (windowSize.equalsIgnoreCase(""String_Node_Str"")) {
      GraphicsEnvironment ge=GraphicsEnvironment.getLocalGraphicsEnvironment();
      GraphicsDevice[] gs=ge.getScreenDevices();
      if (gs.length > 1) {
        LOGGER.warning(""String_Node_Str"");
      }
      GraphicsConfiguration gc=gs[0].getDefaultConfiguration();
      Rectangle size=gc.getBounds();
      width=size.width;
      height=size.height;
    }
 else {
      String sizeWidth=windowSize.substring(0,windowSize.indexOf('x'));
      String sizeHeight=windowSize.substring(windowSize.indexOf('x') + 1);
      width=Integer.parseInt(sizeWidth);
      height=Integer.parseInt(sizeHeight);
    }
  }
 catch (  Exception e) {
    LOGGER.warning(WINDOW_SIZE_PROP + ""String_Node_Str"" + ""String_Node_Str""+ windowSize);
  }
  String serverURL=System.getProperty(SERVER_URL_PROP);
  if (serverURL == null) {
    serverURL=SERVER_URL_DEFAULT;
    System.setProperty(SERVER_URL_PROP,serverURL);
  }
  Clip clip2=Clip.create(1000,new TimingTarget(){
    public void timingEvent(    float arg0,    long arg1){
    }
    public void begin(){
    }
    public void end(){
    }
    public void pause(){
    }
    public void resume(){
    }
  }
);
  clip2.setInterpolator(Interpolators.getEasingInstance(0.4f,0.4f));
  clip2.start();
  WorldManager worldManager=ClientContextJME.getWorldManager();
  String requestedFPS=System.getProperty(DESIRED_FPS_PROP,DESIRED_FPS_DEFAULT);
  if (requestedFPS != null) {
    try {
      desiredFrameRate=Integer.parseInt(requestedFPS);
    }
 catch (    NumberFormatException e) {
      LOGGER.warning(DESIRED_FPS_PROP + ""String_Node_Str"" + requestedFPS+ ""String_Node_Str"");
    }
  }
  worldManager.getRenderManager().setDesiredFrameRate(desiredFrameRate);
  createUI(worldManager);
  login=new JmeLoginUI(frame);
  LoginManager.setLoginUI(login);
  frame.addServerURLListener(new ServerURLListener(){
    public void serverURLChanged(    final String serverURL){
      new Thread(ThreadManager.getThreadGroup(),new Runnable(){
        public void run(){
          try {
            loadServer(serverURL);
          }
 catch (          IOException ioe) {
            LOGGER.log(Level.WARNING,""String_Node_Str"" + serverURL,ioe);
          }
        }
      }
).start();
    }
    public void logout(){
      new Thread(ThreadManager.getThreadGroup(),new Runnable(){
        public void run(){
          JmeClientMain.this.logout();
        }
      }
).start();
    }
  }
);
  try {
    loadServer(serverURL);
  }
 catch (  IOException ioe) {
    LOGGER.log(Level.WARNING,""String_Node_Str"" + serverURL,ioe);
  }
}","/** 
 * creates a new JmeClientMain
 * @param args the command line arguments
 */
public JmeClientMain(String[] args){
  checkVmVersion();
  checkDBException();
  processArgs(args);
  URL propsURL=getPropsURL();
  loadProperties(propsURL);
  ClientContextJME.setClientMain(this);
  String windowSize=System.getProperty(WINDOW_SIZE_PROP,WINDOW_SIZE_DEFAULT);
  try {
    if (windowSize.equalsIgnoreCase(""String_Node_Str"")) {
      GraphicsEnvironment ge=GraphicsEnvironment.getLocalGraphicsEnvironment();
      GraphicsDevice[] gs=ge.getScreenDevices();
      if (gs.length > 1) {
        LOGGER.warning(""String_Node_Str"");
      }
      GraphicsConfiguration gc=gs[0].getDefaultConfiguration();
      Rectangle size=gc.getBounds();
      width=size.width;
      height=size.height;
    }
 else {
      String sizeWidth=windowSize.substring(0,windowSize.indexOf('x'));
      String sizeHeight=windowSize.substring(windowSize.indexOf('x') + 1);
      width=Integer.parseInt(sizeWidth);
      height=Integer.parseInt(sizeHeight);
    }
  }
 catch (  Exception e) {
    LOGGER.warning(WINDOW_SIZE_PROP + ""String_Node_Str"" + ""String_Node_Str""+ windowSize);
  }
  String serverURL=System.getProperty(SERVER_URL_PROP);
  if (serverURL == null) {
    serverURL=SERVER_URL_DEFAULT;
    System.setProperty(SERVER_URL_PROP,serverURL);
  }
  Clip clip2=Clip.create(1000,new TimingTarget(){
    public void timingEvent(    float arg0,    long arg1){
    }
    public void begin(){
    }
    public void end(){
    }
    public void pause(){
    }
    public void resume(){
    }
  }
);
  clip2.setInterpolator(Interpolators.getEasingInstance(0.4f,0.4f));
  clip2.start();
  WorldManager worldManager=ClientContextJME.getWorldManager();
  String requestedFPS=System.getProperty(DESIRED_FPS_PROP,DESIRED_FPS_DEFAULT);
  if (requestedFPS != null) {
    try {
      desiredFrameRate=Integer.parseInt(requestedFPS);
    }
 catch (    NumberFormatException e) {
      LOGGER.warning(DESIRED_FPS_PROP + ""String_Node_Str"" + requestedFPS+ ""String_Node_Str"");
    }
  }
  worldManager.getRenderManager().setDesiredFrameRate(desiredFrameRate);
  createUI(worldManager);
  login=new JmeLoginUI(frame);
  LoginManager.setLoginUI(login);
  frame.addServerURLListener(new ServerURLListener(){
    public void serverURLChanged(    final String serverURL){
      new Thread(ThreadManager.getThreadGroup(),new Runnable(){
        public void run(){
          try {
            loadServer(serverURL);
          }
 catch (          IOException ioe) {
            LOGGER.log(Level.WARNING,""String_Node_Str"" + serverURL,ioe);
          }
        }
      }
).start();
    }
    public void logout(){
      new Thread(ThreadManager.getThreadGroup(),new Runnable(){
        public void run(){
          JmeClientMain.this.logout();
        }
      }
).start();
    }
  }
);
  try {
    loadServer(serverURL);
  }
 catch (  IOException ioe) {
    LOGGER.log(Level.WARNING,""String_Node_Str"" + serverURL,ioe);
  }
}"
45721,"public URL locateResourceImpl(String resourceName){
  while (resourceName.startsWith(""String_Node_Str"") && resourceName.length() > 2) {
    resourceName=resourceName.substring(2);
  }
  while (resourceName.startsWith(""String_Node_Str"") && resourceName.length() > 2) {
    resourceName=resourceName.substring(2);
  }
  try {
    String spec=URLEncoder.encode(resourceName,""String_Node_Str"");
    spec=spec.replaceAll(""String_Node_Str"",""String_Node_Str"");
    URL rVal=new URL(baseDir.toURL(),spec);
    rVal.openStream().close();
    return rVal;
  }
 catch (  IOException e) {
  }
catch (  IllegalArgumentException e) {
  }
  resourceName=trimResourceName(resourceName);
  if (resourceName == null) {
    return null;
  }
 else {
    return locateResourceImpl(resourceName);
  }
}","public URL locateResourceImpl(String resourceName){
  while (resourceName.startsWith(""String_Node_Str"") && resourceName.length() > 2) {
    resourceName=resourceName.substring(2);
  }
  while (resourceName.startsWith(""String_Node_Str"") && resourceName.length() > 2) {
    resourceName=resourceName.substring(2);
  }
  try {
    String spec=URLEncoder.encode(resourceName,""String_Node_Str"");
    URL rVal=new URL(baseDir.toURL(),spec);
    rVal.openStream().close();
    return rVal;
  }
 catch (  IOException e) {
  }
catch (  IllegalArgumentException e) {
  }
  resourceName=trimResourceName(resourceName);
  if (resourceName == null) {
    return null;
  }
 else {
    return locateResourceImpl(resourceName);
  }
}"
45722,"public DeployedModel deployToModule(File moduleRootDir,ImportedModel importedModel) throws IOException {
  String modelName=getFilename(importedModel.getOriginalURL());
  HashMap<String,String> textureDeploymentMapping=new HashMap();
  DeployedModel deployedModel=new DeployedModel(importedModel.getOriginalURL(),this);
  LoaderData data=new LoaderData();
  data.setDeployedTextures(textureDeploymentMapping);
  data.setModelLoaderClassname(this.getClass().getName());
  deployedModel.setLoaderData(data);
  String moduleName=moduleRootDir.getName();
  String targetDirName=moduleRootDir.getAbsolutePath() + File.separator + ""String_Node_Str""+ File.separator+ modelName;
  File targetDir=new File(targetDirName);
  targetDir.mkdirs();
  deployTextures(targetDir,textureDeploymentMapping,importedModel);
  ModelCellServerState cellSetup=new ModelCellServerState();
  ModelCellComponentServerState setup=new ModelCellComponentServerState();
  cellSetup.addComponentServerState(setup);
  cellSetup.setName(importedModel.getWonderlandName());
  cellSetup.setBoundingVolumeHint(new BoundingVolumeHint(false,importedModel.getModelBG().getWorldBound()));
  Vector3f offset=importedModel.getRootBG().getLocalTranslation();
  PositionComponentServerState position=new PositionComponentServerState();
  Vector3f boundsCenter=importedModel.getRootBG().getWorldBound().getCenter();
  offset.subtractLocal(boundsCenter);
  deployedModel.setModelTranslation(offset);
  deployedModel.setModelRotation(importedModel.getModelBG().getLocalRotation());
  deployedModel.setModelScale(importedModel.getModelBG().getLocalScale());
  position.setTranslation(boundsCenter);
  BoundingVolume worldBounds=importedModel.getModelBG().getWorldBound();
  worldBounds.setCenter(new Vector3f(0,0,0));
  position.setBounds(worldBounds);
  cellSetup.addComponentServerState(position);
  deployedModel.addCellServerState(cellSetup);
  deployModels(targetDir,moduleName,deployedModel,importedModel,textureDeploymentMapping,setup);
  return deployedModel;
}","public DeployedModel deployToModule(File moduleRootDir,ImportedModel importedModel) throws IOException {
  try {
    String modelName=getFilename(importedModel.getOriginalURL().toURI().getPath());
    HashMap<String,String> textureDeploymentMapping=new HashMap();
    DeployedModel deployedModel=new DeployedModel(importedModel.getOriginalURL(),this);
    LoaderData data=new LoaderData();
    data.setDeployedTextures(textureDeploymentMapping);
    data.setModelLoaderClassname(this.getClass().getName());
    deployedModel.setLoaderData(data);
    String moduleName=moduleRootDir.getName();
    String targetDirName=moduleRootDir.getAbsolutePath() + File.separator + ""String_Node_Str""+ File.separator+ modelName;
    File targetDir=new File(targetDirName);
    targetDir.mkdirs();
    deployTextures(targetDir,textureDeploymentMapping,importedModel);
    ModelCellServerState cellSetup=new ModelCellServerState();
    ModelCellComponentServerState setup=new ModelCellComponentServerState();
    cellSetup.addComponentServerState(setup);
    cellSetup.setName(importedModel.getWonderlandName());
    cellSetup.setBoundingVolumeHint(new BoundingVolumeHint(false,importedModel.getModelBG().getWorldBound()));
    Vector3f offset=importedModel.getRootBG().getLocalTranslation();
    PositionComponentServerState position=new PositionComponentServerState();
    Vector3f boundsCenter=importedModel.getRootBG().getWorldBound().getCenter();
    offset.subtractLocal(boundsCenter);
    deployedModel.setModelTranslation(offset);
    deployedModel.setModelRotation(importedModel.getModelBG().getLocalRotation());
    deployedModel.setModelScale(importedModel.getModelBG().getLocalScale());
    position.setTranslation(boundsCenter);
    BoundingVolume worldBounds=importedModel.getModelBG().getWorldBound();
    worldBounds.setCenter(new Vector3f(0,0,0));
    position.setBounds(worldBounds);
    cellSetup.addComponentServerState(position);
    deployedModel.addCellServerState(cellSetup);
    deployModels(targetDir,moduleName,deployedModel,importedModel,textureDeploymentMapping,setup);
    return deployedModel;
  }
 catch (  URISyntaxException ex) {
    Logger.getLogger(JmeColladaLoader.class.getName()).log(Level.SEVERE,null,ex);
  }
  return null;
}"
45723,"/** 
 * Deploy the dae files to the server, source[0] is the primary file.
 * @param moduleArtRootDir
 */
protected void deployModels(File targetDir,String moduleName,DeployedModel deployedModel,ImportedModel importedModel,HashMap<String,String> deploymentMapping,ModelCellComponentServerState state){
  URL[] source=importedModel.getAllOriginalModels();
  String filename=getFilename(importedModel.getOriginalURL());
  String filenameGZ=filename + ""String_Node_Str"";
  File targetFile=new File(targetDir,filenameGZ);
  try {
    targetFile.createNewFile();
    copyAsset(source[0],targetFile,true);
    deployedModel.setModelURL(importedModel.getDeploymentBaseURL() + filename + ""String_Node_Str""+ filenameGZ);
    deployedModel.setLoaderDataURL(deployedModel.getModelURL() + ""String_Node_Str"");
    deployDeploymentData(targetDir,deployedModel,filenameGZ);
    state.setDeployedModelURL(deployedModel.getModelURL() + ""String_Node_Str"");
  }
 catch (  IOException ex) {
    Logger.getLogger(JmeColladaLoader.class.getName()).log(Level.SEVERE,""String_Node_Str"" + targetFile,ex);
  }
}","/** 
 * Deploy the dae files to the server, source[0] is the primary file.
 * @param moduleArtRootDir
 */
protected void deployModels(File targetDir,String moduleName,DeployedModel deployedModel,ImportedModel importedModel,HashMap<String,String> deploymentMapping,ModelCellComponentServerState state){
  try {
    URL[] source=importedModel.getAllOriginalModels();
    String filename=getFilename(importedModel.getOriginalURL().toURI().getPath());
    String filenameGZ=filename + ""String_Node_Str"";
    File targetFile=new File(targetDir,filenameGZ);
    try {
      targetFile.createNewFile();
      copyAsset(source[0],targetFile,true);
      deployedModel.setModelURL(importedModel.getDeploymentBaseURL() + filename + ""String_Node_Str""+ filenameGZ);
      deployedModel.setLoaderDataURL(deployedModel.getModelURL() + ""String_Node_Str"");
      deployDeploymentData(targetDir,deployedModel,filenameGZ);
      state.setDeployedModelURL(deployedModel.getModelURL() + ""String_Node_Str"");
    }
 catch (    IOException ex) {
      Logger.getLogger(JmeColladaLoader.class.getName()).log(Level.SEVERE,""String_Node_Str"" + targetFile,ex);
    }
  }
 catch (  URISyntaxException ex) {
    Logger.getLogger(JmeColladaLoader.class.getName()).log(Level.SEVERE,null,ex);
  }
}"
45724,"/** 
 * Call this when the app has control in order to display the window menu for this window.
 * @param entity An arbitrary entity belonging to the window's cell.
 * @param mouseEvent The triggering AWT event.
 */
public void displayWindowMenu(Entity entity,MouseEvent mouseEvent){
  LinkedList<Entity> entities=new LinkedList<Entity>();
  entities.add(entity);
  WindowContextMenuEvent windowMenuEvent=new WindowContextMenuEvent(entities,mouseEvent);
  InputManager.inputManager().postEvent(windowMenuEvent);
}","/** 
 * Call this when the app has control in order to display the window menu for this window.
 * @param entity An arbitrary entity belonging to the window's cell.
 * @param mouseEvent The triggering AWT event.
 */
public void displayWindowMenu(Entity entity,MouseEvent mouseEvent){
  LinkedList<Entity> entities=new LinkedList<Entity>();
  entities.add(entity);
  WindowContextMenuEvent windowMenuEvent=new WindowContextMenuEvent(entities,mouseEvent);
  SceneManager.getSceneManager().postEvent(windowMenuEvent);
}"
45725,"/** 
 */
@Override public void drop(DropTargetDropEvent dtde){
  Point location=dtde.getLocation();
  TreePath path=cellHierarchyTree.getPathForLocation(location.x,location.y);
  if (path == null) {
    dtde.rejectDrop();
    return;
  }
  dtde.acceptDrop(DnDConstants.ACTION_MOVE);
  Transferable transferable=dtde.getTransferable();
  String cellIDString=null;
  try {
    DataFlavor df=new DataFlavor(""String_Node_Str"" + ""String_Node_Str"");
    cellIDString=(String)transferable.getTransferData(df);
  }
 catch (  Exception excp) {
    LOGGER.log(Level.WARNING,""String_Node_Str"" + ""String_Node_Str"",excp);
    return;
  }
  if (cellIDString == null || cellIDString.startsWith(""String_Node_Str"") == false) {
    LOGGER.warning(""String_Node_Str"" + cellIDString);
    return;
  }
  int cellIDInt=-1;
  try {
    cellIDInt=Integer.parseInt(cellIDString.substring(7));
  }
 catch (  Exception excp) {
    LOGGER.log(Level.WARNING,""String_Node_Str"" + ""String_Node_Str"",excp);
    return;
  }
  CellID cellID=new CellID(cellIDInt);
  WonderlandSession session=LoginManager.getPrimary().getPrimarySession();
  CellCache cache=ClientContext.getCellCache(session);
  if (cache == null) {
    LOGGER.warning(""String_Node_Str"" + session);
    return;
  }
  Cell draggedCell=cache.getCell(cellID);
  if (draggedCell == null) {
    LOGGER.warning(""String_Node_Str"" + cellID);
    return;
  }
  CellID parentCellID=CellID.getInvalidCellID();
  DefaultMutableTreeNode treeNode=(DefaultMutableTreeNode)path.getLastPathComponent();
  Object userObject=treeNode.getUserObject();
  Cell newParent=null;
  if (userObject instanceof Cell) {
    parentCellID=((Cell)userObject).getCellID();
    newParent=(Cell)userObject;
    if (draggedCell.equals(newParent) == true) {
      return;
    }
  }
  Cell oldParent=draggedCell.getParent();
  CellTransform oldParentWorld=new CellTransform(null,null);
  if (oldParent != null) {
    oldParentWorld=oldParent.getWorldTransform();
  }
  CellTransform newParentWorld=new CellTransform(null,null);
  if (newParent != null) {
    newParentWorld=newParent.getWorldTransform();
  }
  newParentWorld.invert();
  newParentWorld.mul(oldParentWorld);
  newParentWorld.mul(draggedCell.getLocalTransform());
  CellEditChannelConnection connection=(CellEditChannelConnection)session.getConnection(CellEditConnectionType.CLIENT_TYPE);
  connection.send(new CellReparentMessage(cellID,parentCellID,newParentWorld));
  dragOverTreeNode=null;
  cellHierarchyTree.repaint();
}","/** 
 */
@Override public void drop(DropTargetDropEvent dtde){
  Point location=dtde.getLocation();
  TreePath path=cellHierarchyTree.getPathForLocation(location.x,location.y);
  if (path == null) {
    dtde.rejectDrop();
    return;
  }
  dtde.acceptDrop(DnDConstants.ACTION_MOVE);
  Transferable transferable=dtde.getTransferable();
  String cellIDString=null;
  try {
    DataFlavor df=new DataFlavor(""String_Node_Str"" + ""String_Node_Str"");
    cellIDString=(String)transferable.getTransferData(df);
  }
 catch (  Exception excp) {
    LOGGER.log(Level.WARNING,""String_Node_Str"" + ""String_Node_Str"",excp);
    return;
  }
  if (cellIDString == null || cellIDString.startsWith(""String_Node_Str"") == false) {
    LOGGER.warning(""String_Node_Str"" + cellIDString);
    return;
  }
  int cellIDInt=-1;
  try {
    cellIDInt=Integer.parseInt(cellIDString.substring(7));
  }
 catch (  Exception excp) {
    LOGGER.log(Level.WARNING,""String_Node_Str"" + ""String_Node_Str"",excp);
    return;
  }
  CellID cellID=new CellID(cellIDInt);
  WonderlandSession session=LoginManager.getPrimary().getPrimarySession();
  CellCache cache=ClientContext.getCellCache(session);
  if (cache == null) {
    LOGGER.warning(""String_Node_Str"" + session);
    return;
  }
  Cell draggedCell=cache.getCell(cellID);
  if (draggedCell == null) {
    LOGGER.warning(""String_Node_Str"" + cellID);
    return;
  }
  CellID parentCellID=CellID.getInvalidCellID();
  DefaultMutableTreeNode treeNode=(DefaultMutableTreeNode)path.getLastPathComponent();
  Object userObject=treeNode.getUserObject();
  Cell newParent=null;
  if (userObject instanceof Cell) {
    parentCellID=((Cell)userObject).getCellID();
    newParent=(Cell)userObject;
    if (draggedCell.equals(newParent) == true) {
      return;
    }
  }
  Cell oldParent=draggedCell.getParent();
  CellTransform oldParentWorld=new CellTransform(null,null);
  if (oldParent != null) {
    oldParentWorld=oldParent.getWorldTransform();
  }
  CellTransform newParentWorld=new CellTransform(null,null);
  if (newParent != null) {
    newParentWorld=newParent.getWorldTransform();
  }
  CellTransform newChildLocal=ScenegraphUtils.computeChildTransform(newParentWorld,draggedCell.getWorldTransform());
  CellEditChannelConnection connection=(CellEditChannelConnection)session.getConnection(CellEditConnectionType.CLIENT_TYPE);
  connection.send(new CellReparentMessage(cellID,parentCellID,newChildLocal));
  dragOverTreeNode=null;
  cellHierarchyTree.repaint();
}"
45726,"/** 
 * Returns a set of cell factories given the extension type. If no factories are present for the given extension, returns null.
 * @param extension File type extension (e.g. 'jpg', 'dae')
 * @return A set of CellFactory objects registered on the extension
 */
public Set<CellFactorySPI> getCellFactoriesByExtension(String extension){
  extension=extension.toLowerCase();
  return cellFactoryExtensionMap.get(extension);
}","/** 
 * Returns a set of cell factories given the extension type. If no factories are present for the given extension, returns null.
 * @param extension File type extension (e.g. 'jpg', 'dae')
 * @return A set of CellFactory objects registered on the extension
 */
public Set<CellFactorySPI> getCellFactoriesByExtension(String extension){
  if (extension != null) {
    extension=extension.toLowerCase();
    return cellFactoryExtensionMap.get(extension);
  }
  return null;
}"
45727,"@Override protected void deployModels(File targetDir,String moduleName,DeployedModel deployedModel,ImportedModel importedModel,HashMap<String,String> deploymentMapping,ModelCellComponentServerState state){
  URL modelURL=importedModel.getImportSettings().getModelURL();
  if (!modelURL.getProtocol().equalsIgnoreCase(""String_Node_Str"")) {
    final String modelURLStr=modelURL.toExternalForm();
    SwingUtilities.invokeLater(new Runnable(){
      public void run(){
        JOptionPane.showConfirmDialog(null,""String_Node_Str"" + modelURLStr + ""String_Node_Str"",""String_Node_Str"",JOptionPane.OK_OPTION);
      }
    }
);
    return;
  }
  try {
    ZipFile zipFile=new ZipFile(new File(modelURL.toURI()));
    deployZipModels(zipFile,targetDir);
    String kmzFilename=modelURL.toExternalForm();
    kmzFilename=kmzFilename.substring(kmzFilename.lastIndexOf('/') + 1);
    deployedModel.setModelURL(importedModel.getDeploymentBaseURL() + kmzFilename + ""String_Node_Str""+ ((KmzImportedModel)importedModel).getPrimaryModel()+ ""String_Node_Str"");
    deployedModel.setLoaderDataURL(importedModel.getDeploymentBaseURL() + kmzFilename + ""String_Node_Str""+ kmzFilename+ ""String_Node_Str"");
    deployDeploymentData(targetDir,deployedModel,kmzFilename);
    state.setDeployedModelURL(importedModel.getDeploymentBaseURL() + kmzFilename + ""String_Node_Str""+ kmzFilename+ ""String_Node_Str"");
  }
 catch (  ZipException ex) {
    Logger.getLogger(KmzLoader.class.getName()).log(Level.SEVERE,null,ex);
  }
catch (  IOException ex) {
    Logger.getLogger(KmzLoader.class.getName()).log(Level.SEVERE,null,ex);
  }
catch (  URISyntaxException ex) {
    Logger.getLogger(KmzLoader.class.getName()).log(Level.SEVERE,null,ex);
  }
}","@Override protected void deployModels(File targetDir,String moduleName,DeployedModel deployedModel,ImportedModel importedModel,HashMap<String,String> deploymentMapping,ModelCellComponentServerState state){
  URL modelURL=importedModel.getImportSettings().getModelURL();
  System.err.println(""String_Node_Str"" + modelURL.toExternalForm());
  if (!modelURL.getProtocol().equalsIgnoreCase(""String_Node_Str"")) {
    final String modelURLStr=modelURL.toExternalForm();
    SwingUtilities.invokeLater(new Runnable(){
      public void run(){
        JOptionPane.showConfirmDialog(null,""String_Node_Str"" + modelURLStr + ""String_Node_Str"",""String_Node_Str"",JOptionPane.OK_OPTION);
      }
    }
);
    return;
  }
  try {
    ZipFile zipFile=new ZipFile(new File(modelURL.toURI()));
    deployZipModels(zipFile,targetDir);
    String kmzFilename=modelURL.toURI().getPath();
    kmzFilename=kmzFilename.substring(kmzFilename.lastIndexOf('/') + 1);
    deployedModel.setModelURL(importedModel.getDeploymentBaseURL() + kmzFilename + ""String_Node_Str""+ ((KmzImportedModel)importedModel).getPrimaryModel()+ ""String_Node_Str"");
    deployedModel.setLoaderDataURL(importedModel.getDeploymentBaseURL() + kmzFilename + ""String_Node_Str""+ kmzFilename+ ""String_Node_Str"");
    deployDeploymentData(targetDir,deployedModel,kmzFilename);
    state.setDeployedModelURL(importedModel.getDeploymentBaseURL() + kmzFilename + ""String_Node_Str""+ kmzFilename+ ""String_Node_Str"");
  }
 catch (  ZipException ex) {
    Logger.getLogger(KmzLoader.class.getName()).log(Level.SEVERE,null,ex);
  }
catch (  IOException ex) {
    Logger.getLogger(KmzLoader.class.getName()).log(Level.SEVERE,null,ex);
  }
catch (  URISyntaxException ex) {
    Logger.getLogger(KmzLoader.class.getName()).log(Level.SEVERE,null,ex);
  }
}"
45728,"/** 
 * Return the names of the animations available to this character
 * @return
 */
Iterable<String> getAnimationNames(){
  return actionMap.keySet();
}","/** 
 * Return the names of the animations available to this character
 * @return
 */
public Iterable<String> getAnimationNames(){
  return actionMap.keySet();
}"
45729,"void setMiscAnimation(String animationName){
  currentActionInfo=actionMap.get(animationName);
  ActionState action=(ActionState)gameStates.get(CycleActionState.class);
  action.setAnimationSetBoolean(false);
  currentActionInfo.apply(action);
}","public void setMiscAnimation(String animationName){
  currentActionInfo=actionMap.get(animationName);
  ActionState action=(ActionState)gameStates.get(CycleActionState.class);
  action.setAnimationSetBoolean(false);
  currentActionInfo.apply(action);
}"
45730,"void playMiscAnimation(String name){
  if (getavatar().getCharacterParams().isAnimateBody()) {
    setMiscAnimation(name);
    triggerReleased(TriggerNames.MiscAction.ordinal());
    triggerPressed(TriggerNames.MiscAction.ordinal());
    triggerReleased(TriggerNames.MiscAction.ordinal());
  }
}","public void playMiscAnimation(String name){
  if (getavatar().getCharacterParams().isAnimateBody()) {
    setMiscAnimation(name);
    triggerReleased(TriggerNames.MiscAction.ordinal());
    triggerPressed(TriggerNames.MiscAction.ordinal());
    triggerReleased(TriggerNames.MiscAction.ordinal());
  }
}"
45731,"/** 
 * @{inheritDoc }
 */
public void restore(){
  nameTextField.setText(originalName);
  fullVolumeRadiusSpinner.setEnabled(false);
  xExtentSpinner.setEnabled(false);
  yExtentSpinner.setEnabled(false);
  zExtentSpinner.setEnabled(false);
  if (originalBoundsType.equals(COSBoundsType.CELL_BOUNDS)) {
    useCellBoundsRadioButton.setSelected(true);
  }
 else   if (originalBoundsType.equals(COSBoundsType.SPHERE)) {
    specifyRadiusRadioButton.setSelected(true);
    fullVolumeRadiusSpinner.setEnabled(false);
    fullVolumeRadiusSpinner.setValue(originalBounds.getX());
  }
 else {
    specifyRadiusRadioButton.setSelected(true);
    xExtentSpinner.setEnabled(true);
    yExtentSpinner.setEnabled(true);
    zExtentSpinner.setEnabled(true);
    xExtentSpinner.setValue(originalBounds.getX());
    yExtentSpinner.setValue(originalBounds.getY());
    zExtentSpinner.setValue(originalBounds.getZ());
  }
  outsideAudioVolumeSlider.setValue(originalOutsideAudioVolume);
  fullVolumeRadiusSpinner.setValue(originalBounds.getX());
}","/** 
 * @{inheritDoc }
 */
public void restore(){
  nameTextField.setText(originalName);
  fullVolumeRadiusSpinner.setEnabled(false);
  xExtentSpinner.setEnabled(false);
  yExtentSpinner.setEnabled(false);
  zExtentSpinner.setEnabled(false);
  if (originalBoundsType.equals(COSBoundsType.CELL_BOUNDS)) {
    useCellBoundsRadioButton.setSelected(true);
  }
 else   if (originalBoundsType.equals(COSBoundsType.SPHERE)) {
    specifyRadiusRadioButton.setSelected(true);
    fullVolumeRadiusSpinner.setEnabled(false);
    fullVolumeRadiusSpinner.setValue(originalBounds.getX());
  }
 else {
    specifyBoxRadioButton.setSelected(true);
    xExtentSpinner.setEnabled(true);
    yExtentSpinner.setEnabled(true);
    zExtentSpinner.setEnabled(true);
    xExtentSpinner.setValue(originalBounds.getX());
    yExtentSpinner.setValue(originalBounds.getY());
    zExtentSpinner.setValue(originalBounds.getZ());
  }
  outsideAudioVolumeSlider.setValue(originalOutsideAudioVolume);
  fullVolumeRadiusSpinner.setValue(originalBounds.getX());
}"
45732,"private void specifyBoxRadioButtonActionPerformed(java.awt.event.ActionEvent evt){
  fullVolumeRadiusSpinner.setEnabled(false);
  xExtentSpinner.setEnabled(true);
  yExtentSpinner.setEnabled(true);
  zExtentSpinner.setEnabled(true);
  boundsType=COSBoundsType.BOX;
  if (editor != null) {
    editor.setPanelDirty(ConeOfSilenceComponentProperties.class,originalBoundsType.equals(COSBoundsType.BOX) == false);
  }
}","private void specifyBoxRadioButtonActionPerformed(java.awt.event.ActionEvent evt){
  if (specifyBoxRadioButton.isSelected() == false) {
    return;
  }
  fullVolumeRadiusSpinner.setEnabled(false);
  xExtentSpinner.setEnabled(true);
  yExtentSpinner.setEnabled(true);
  zExtentSpinner.setEnabled(true);
  boundsType=COSBoundsType.BOX;
  if (editor != null) {
    editor.setPanelDirty(ConeOfSilenceComponentProperties.class,originalBoundsType.equals(COSBoundsType.BOX) == false);
  }
}"
45733,"/** 
 * @{inheritDoc }
 */
public void apply(){
  CellServerState cellServerState=editor.getCellServerState();
  ConeOfSilenceComponentServerState state=(ConeOfSilenceComponentServerState)cellServerState.getComponentServerState(ConeOfSilenceComponentServerState.class);
  if (state == null) {
    return;
  }
  state.setName(nameTextField.getText());
  COSBoundsType boundsType;
  if (useCellBoundsRadioButton.isSelected()) {
    boundsType=COSBoundsType.CELL_BOUNDS;
  }
 else   if (specifyRadiusRadioButton.isSelected()) {
    boundsType=COSBoundsType.SPHERE;
  }
 else {
    boundsType=COSBoundsType.BOX;
  }
  state.setBoundsType(boundsType);
  state.setOutsideAudioVolume(VolumeUtil.getServerVolume(outsideAudioVolumeSlider.getValue()));
  editor.addToUpdateList(state);
}","/** 
 * @{inheritDoc }
 */
public void apply(){
  CellServerState cellServerState=editor.getCellServerState();
  ConeOfSilenceComponentServerState state=(ConeOfSilenceComponentServerState)cellServerState.getComponentServerState(ConeOfSilenceComponentServerState.class);
  if (state == null) {
    return;
  }
  state.setName(nameTextField.getText());
  if (useCellBoundsRadioButton.isSelected()) {
    state.setBoundsType(COSBoundsType.CELL_BOUNDS);
  }
 else   if (specifyRadiusRadioButton.isSelected()) {
    state.setBoundsType(COSBoundsType.SPHERE);
    state.setBounds(new Vector3f((Float)fullVolumeRadiusModel.getValue(),0f,0));
  }
 else {
    state.setBoundsType(COSBoundsType.BOX);
    state.setBounds(new Vector3f((Float)xExtentSpinner.getValue(),(Float)yExtentSpinner.getValue(),(Float)zExtentSpinner.getValue()));
  }
  state.setOutsideAudioVolume(VolumeUtil.getServerVolume(outsideAudioVolumeSlider.getValue()));
  editor.addToUpdateList(state);
}"
45734,"private void useCellBoundsRadioButtonActionPerformed(java.awt.event.ActionEvent evt){
  fullVolumeRadiusSpinner.setEnabled(false);
  xExtentSpinner.setEnabled(false);
  yExtentSpinner.setEnabled(false);
  zExtentSpinner.setEnabled(false);
  boundsType=COSBoundsType.CELL_BOUNDS;
  fullVolumeRadiusSpinner.setEnabled(false);
  xExtentSpinner.setEnabled(false);
  yExtentSpinner.setEnabled(false);
  zExtentSpinner.setEnabled(false);
  if (editor != null) {
    editor.setPanelDirty(ConeOfSilenceComponentProperties.class,originalBoundsType.equals(COSBoundsType.CELL_BOUNDS) == false);
  }
}","private void useCellBoundsRadioButtonActionPerformed(java.awt.event.ActionEvent evt){
  if (useCellBoundsRadioButton.isSelected() == false) {
    return;
  }
  fullVolumeRadiusSpinner.setEnabled(false);
  xExtentSpinner.setEnabled(false);
  yExtentSpinner.setEnabled(false);
  zExtentSpinner.setEnabled(false);
  boundsType=COSBoundsType.CELL_BOUNDS;
  fullVolumeRadiusSpinner.setEnabled(false);
  xExtentSpinner.setEnabled(false);
  yExtentSpinner.setEnabled(false);
  zExtentSpinner.setEnabled(false);
  if (editor != null) {
    editor.setPanelDirty(ConeOfSilenceComponentProperties.class,originalBoundsType.equals(COSBoundsType.CELL_BOUNDS) == false);
  }
}"
45735,"/** 
 * Creates new form ConeOfSilenceComponentProperties 
 */
public ConeOfSilenceComponentProperties(){
  initComponents();
  fullVolumeRadiusModel=new SpinnerNumberModel(new Float(1),new Float(0),new Float(100),new Float(.1));
  fullVolumeRadiusSpinner.setModel(fullVolumeRadiusModel);
  xExtentModel=new SpinnerNumberModel(new Float(1),new Float(0),new Float(100),new Float(.1));
  xExtentSpinner.setModel(xExtentModel);
  yExtentModel=new SpinnerNumberModel(new Float(1),new Float(0),new Float(100),new Float(.1));
  yExtentSpinner.setModel(yExtentModel);
  zExtentModel=new SpinnerNumberModel(new Float(1),new Float(0),new Float(100),new Float(.1));
  zExtentSpinner.setModel(yExtentModel);
  nameTextField.getDocument().addDocumentListener(new NameTextFieldListener());
  fullVolumeRadiusModel.addChangeListener(new RadiusChangeListener());
  xExtentModel.addChangeListener(new XExtentChangeListener());
  yExtentModel.addChangeListener(new YExtentChangeListener());
  zExtentModel.addChangeListener(new ZExtentChangeListener());
}","/** 
 * Creates new form ConeOfSilenceComponentProperties 
 */
public ConeOfSilenceComponentProperties(){
  initComponents();
  fullVolumeRadiusModel=new SpinnerNumberModel(new Float(1),new Float(0),new Float(100),new Float(.1));
  fullVolumeRadiusSpinner.setModel(fullVolumeRadiusModel);
  xExtentModel=new SpinnerNumberModel(new Float(1),new Float(0),new Float(100),new Float(.1));
  xExtentSpinner.setModel(xExtentModel);
  yExtentModel=new SpinnerNumberModel(new Float(1),new Float(0),new Float(100),new Float(.1));
  yExtentSpinner.setModel(yExtentModel);
  zExtentModel=new SpinnerNumberModel(new Float(1),new Float(0),new Float(100),new Float(.1));
  zExtentSpinner.setModel(zExtentModel);
  nameTextField.getDocument().addDocumentListener(new NameTextFieldListener());
  fullVolumeRadiusModel.addChangeListener(new RadiusChangeListener());
  xExtentModel.addChangeListener(new XExtentChangeListener());
  yExtentModel.addChangeListener(new YExtentChangeListener());
  zExtentModel.addChangeListener(new ZExtentChangeListener());
}"
45736,"private void specifyRadiusRadioButtonActionPerformed(java.awt.event.ActionEvent evt){
  fullVolumeRadiusSpinner.setEnabled(true);
  xExtentSpinner.setEnabled(false);
  yExtentSpinner.setEnabled(false);
  zExtentSpinner.setEnabled(false);
  boundsType=COSBoundsType.SPHERE;
  if (editor != null) {
    editor.setPanelDirty(ConeOfSilenceComponentProperties.class,originalBoundsType.equals(COSBoundsType.SPHERE) == false);
  }
}","private void specifyRadiusRadioButtonActionPerformed(java.awt.event.ActionEvent evt){
  if (specifyRadiusRadioButton.isSelected() == false) {
    return;
  }
  fullVolumeRadiusSpinner.setEnabled(true);
  xExtentSpinner.setEnabled(false);
  yExtentSpinner.setEnabled(false);
  zExtentSpinner.setEnabled(false);
  boundsType=COSBoundsType.SPHERE;
  if (editor != null) {
    editor.setPanelDirty(ConeOfSilenceComponentProperties.class,originalBoundsType.equals(COSBoundsType.SPHERE) == false);
  }
}"
45737,"/** 
 * Default constructor
 */
public AssetDB(){
  this.dbName=AssetDB.DB_NAME;
  logger.fine(""String_Node_Str"" + this.dbName);
  if (this.setDBSystemDir() == false) {
    logger.severe(""String_Node_Str"");
    System.exit(1);
  }
  try {
    Class.forName(""String_Node_Str"");
  }
 catch (  ClassNotFoundException ex) {
    logger.log(Level.SEVERE,""String_Node_Str"",ex);
    ex.printStackTrace();
    System.exit(1);
  }
  dbProperties=new Properties();
  dbProperties.put(""String_Node_Str"",""String_Node_Str"");
  dbProperties.put(""String_Node_Str"",""String_Node_Str"");
  dbProperties.put(""String_Node_Str"",""String_Node_Str"");
  dbProperties.put(""String_Node_Str"",""String_Node_Str"");
  dbProperties.put(""String_Node_Str"",""String_Node_Str"");
  dbProperties.put(""String_Node_Str"",""String_Node_Str"");
  if (!dbExists()) {
    try {
      logger.fine(""String_Node_Str"" + getDatabaseLocation());
      createDatabase();
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
catch (    Error er) {
      er.printStackTrace();
    }
    disconnect();
    if (!connect()) {
      System.out.println(""String_Node_Str"");
      System.out.println(""String_Node_Str"");
      System.exit(1);
    }
  }
 else {
    if (!connect()) {
      System.out.println(""String_Node_Str"");
      System.out.println(""String_Node_Str"");
      System.exit(1);
    }
  }
}","/** 
 * Default constructor
 */
public AssetDB(){
  this.dbName=AssetDB.DB_NAME;
  logger.fine(""String_Node_Str"" + this.dbName);
  if (this.setDBSystemDir() == false) {
    logger.severe(""String_Node_Str"");
    System.exit(1);
  }
  try {
    Class.forName(""String_Node_Str"");
  }
 catch (  ClassNotFoundException ex) {
    logger.log(Level.SEVERE,""String_Node_Str"",ex);
    ex.printStackTrace();
    System.exit(1);
  }
  dbProperties=new Properties();
  dbProperties.put(""String_Node_Str"",""String_Node_Str"");
  dbProperties.put(""String_Node_Str"",""String_Node_Str"");
  dbProperties.put(""String_Node_Str"",""String_Node_Str"");
  dbProperties.put(""String_Node_Str"",""String_Node_Str"");
  dbProperties.put(""String_Node_Str"",""String_Node_Str"");
  dbProperties.put(""String_Node_Str"",""String_Node_Str"");
  if (!dbExists()) {
    try {
      logger.fine(""String_Node_Str"" + getDatabaseLocation());
      createDatabase();
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
catch (    Error er) {
      er.printStackTrace();
    }
    disconnect();
    if (!connect()) {
      logger.severe(""String_Node_Str"");
      logger.severe(""String_Node_Str"");
      System.exit(1);
    }
  }
 else {
    if (!connect()) {
      logger.severe(""String_Node_Str"");
      logger.severe(""String_Node_Str"");
      System.exit(1);
    }
  }
}"
45738,"public static void downloadFile() throws java.net.URISyntaxException {
  final Thread threads[]=new Thread[uris.length];
  for (int i=0; i < uris.length; i++) {
    final int j=i;
    threads[i]=new Thread(ThreadManager.getThreadGroup(),""String_Node_Str""){
      @Override public void run(){
        Logger logger=Logger.getLogger(AssetManager.class.getName());
        AssetManager assetManager=AssetManager.getAssetManager();
        AssetURI assetURI=AssetURI.uriFactory(uris[j]);
        assetURI.setServerHostAndPort(""String_Node_Str"");
        Asset asset=assetManager.getAsset(assetURI);
        assetManager.waitForAsset(asset);
        logger.fine(""String_Node_Str"" + asset.getFailureInfo());
        if (asset.getLocalCacheFile() == null) {
          logger.fine(""String_Node_Str"");
        }
 else {
          logger.fine(""String_Node_Str"" + asset.getLocalCacheFile().getAbsolutePath());
        }
        logger.fine(""String_Node_Str"" + assetURI.toString());
      }
    }
;
    threads[i].start();
  }
  for (int i=0; i < uris.length; i++) {
    try {
      threads[i].join();
    }
 catch (    java.lang.InterruptedException excp) {
      System.out.println(excp.toString());
    }
  }
}","public static void downloadFile() throws java.net.URISyntaxException {
  final Thread threads[]=new Thread[uris.length];
  for (int i=0; i < uris.length; i++) {
    final int j=i;
    threads[i]=new Thread(ThreadManager.getThreadGroup(),""String_Node_Str""){
      @Override public void run(){
        Logger logger=Logger.getLogger(AssetManager.class.getName());
        AssetManager assetManager=AssetManager.getAssetManager();
        AssetURI assetURI=AssetURI.uriFactory(uris[j]);
        assetURI.setServerHostAndPort(""String_Node_Str"");
        Asset asset=assetManager.getAsset(assetURI);
        assetManager.waitForAsset(asset);
        logger.fine(""String_Node_Str"" + asset.getFailureInfo());
        if (asset.getLocalCacheFile() == null) {
          logger.fine(""String_Node_Str"");
        }
 else {
          logger.fine(""String_Node_Str"" + asset.getLocalCacheFile().getAbsolutePath());
        }
        logger.fine(""String_Node_Str"" + assetURI.toString());
      }
    }
;
    threads[i].start();
  }
  for (int i=0; i < uris.length; i++) {
    try {
      threads[i].join();
    }
 catch (    java.lang.InterruptedException excp) {
      logger.log(Level.WARNING,""String_Node_Str"",excp);
    }
  }
}"
45739,"/** 
 */
public void handleDrop(Transferable transferable,DataFlavor dataFlavor,Point dropLocation){
  String data=null;
  try {
    data=(String)transferable.getTransferData(dataFlavor);
  }
 catch (  UnsupportedFlavorException ex) {
    logger.log(Level.SEVERE,null,ex);
  }
catch (  IOException ex) {
    logger.log(Level.SEVERE,null,ex);
  }
  System.out.println(""String_Node_Str"" + data);
  List<URI> uriList=uriStringToList(data);
  if (uriList.isEmpty() == true) {
    logger.warning(""String_Node_Str"" + data);
    return;
  }
  URI uri=uriList.get(0);
  String scheme=uri.getScheme();
  if (scheme == null) {
    logger.warning(""String_Node_Str"" + uri.toString());
    return;
  }
  if (scheme.equals(""String_Node_Str"") == false) {
    try {
      URLDataFlavorHandler.launchCellFromURL(uri.toURL());
    }
 catch (    MalformedURLException excp) {
      logger.log(Level.WARNING,""String_Node_Str"" + uri.toString(),excp);
      return;
    }
  }
 else {
    File file=null;
    if (uri.getAuthority() != null) {
      logger.warning(""String_Node_Str"" + uri.getPath());
      file=new File(uri.getPath());
    }
 else {
      logger.warning(""String_Node_Str"" + uri.toString());
      file=new File(uri);
    }
    List<File> fileList=new LinkedList();
    fileList.add(file);
    FileListDataFlavorHandler.launchCellFromFileList(fileList);
  }
}","/** 
 */
public void handleDrop(Transferable transferable,DataFlavor dataFlavor,Point dropLocation){
  String data=null;
  try {
    data=(String)transferable.getTransferData(dataFlavor);
  }
 catch (  UnsupportedFlavorException ex) {
    logger.log(Level.SEVERE,null,ex);
  }
catch (  IOException ex) {
    logger.log(Level.SEVERE,null,ex);
  }
  List<URI> uriList=uriStringToList(data);
  if (uriList.isEmpty() == true) {
    logger.warning(""String_Node_Str"" + data);
    return;
  }
  URI uri=uriList.get(0);
  String scheme=uri.getScheme();
  if (scheme == null) {
    logger.warning(""String_Node_Str"" + uri.toString());
    return;
  }
  if (scheme.equals(""String_Node_Str"") == false) {
    try {
      URLDataFlavorHandler.launchCellFromURL(uri.toURL());
    }
 catch (    MalformedURLException excp) {
      logger.log(Level.WARNING,""String_Node_Str"" + uri.toString(),excp);
      return;
    }
  }
 else {
    File file=null;
    if (uri.getAuthority() != null) {
      logger.warning(""String_Node_Str"" + uri.getPath());
      file=new File(uri.getPath());
    }
 else {
      logger.warning(""String_Node_Str"" + uri.toString());
      file=new File(uri);
    }
    List<File> fileList=new LinkedList();
    fileList.add(file);
    FileListDataFlavorHandler.launchCellFromFileList(fileList);
  }
}"
45740,"/** 
 * Constructor, takes base URL  of the server 
 */
public ServerCache(String serverURL){
  System.out.println(""String_Node_Str"" + serverURL);
  this.serverURL=serverURL;
  this.reload();
  ServerSessionManager ssm=LoginManager.findSessionManager(serverURL);
  if (ssm == null) {
    logger.log(Level.WARNING,""String_Node_Str"" + serverURL);
  }
 else {
    this.listener=new SessionListener(ssm);
  }
}","/** 
 * Constructor, takes base URL  of the server 
 */
public ServerCache(String serverURL){
  this.serverURL=serverURL;
  this.reload();
  ServerSessionManager ssm=LoginManager.findSessionManager(serverURL);
  if (ssm == null) {
    logger.log(Level.WARNING,""String_Node_Str"" + serverURL);
  }
 else {
    this.listener=new SessionListener(ssm);
  }
}"
45741,"@Override public void connect() throws IOException {
  System.out.println(""String_Node_Str"" + url);
}","@Override public void connect() throws IOException {
}"
45742,"@Override public void connect() throws IOException {
  System.out.println(""String_Node_Str"" + url);
}","@Override public void connect() throws IOException {
}"
45743,"/** 
 * Provides a raw input event to process
 */
protected void inputEvent(Event event){
  Logger logger=Logger.getLogger(SceneManager.class.getName());
  InputManager inputManager=InputManager.inputManager();
  Entity entity=event.getEntity();
  if (policy.isHoverInterrupt(event) == true) {
synchronized (this) {
      if (hoverTimer != null) {
        hoverTimer.cancel();
      }
      MouseEvent mouseEvent=(MouseEvent)((MouseEvent3D)event).getAwtEvent();
      if (hoverEntity != null) {
        inputManager.postEvent(new HoverEvent(hoverEntity,false,mouseEvent));
        hoverEntity=null;
      }
      hoverStartTime=System.currentTimeMillis();
      if (entity != null) {
        HoverTimerTask task=new HoverTimerTask(entity,hoverStartTime,mouseEvent);
        hoverTimer=new Timer();
        hoverTimer.schedule(task,policy.getHoverDelay());
      }
    }
  }
  if (policy.isClearedSelection(event) == true) {
    selectedEntityList.clear();
    inputManager.postEvent(new SelectionEvent(new LinkedList(selectedEntityList)));
    return;
  }
 else   if (policy.isSingleSelection(event) == true) {
    selectedEntityList.clear();
    selectedEntityList.add(entity);
    inputManager.postEvent(new SelectionEvent(new LinkedList(selectedEntityList)));
    return;
  }
 else   if (policy.isMultiSelection(event) == true) {
    if (selectedEntityList.contains(entity) == false) {
      selectedEntityList.add(entity);
    }
 else {
      selectedEntityList.remove(entity);
    }
    inputManager.postEvent(new SelectionEvent(new LinkedList(selectedEntityList)));
    return;
  }
 else   if (policy.isEnter(event) == true) {
    enterEntity=entity;
    inputManager.postEvent(new EnterExitEvent(entity,true));
  }
 else   if (policy.isExit(event) == true) {
    Entity eventEntity=enterEntity;
    enterEntity=null;
    inputManager.postEvent(new EnterExitEvent(eventEntity,false));
  }
 else   if (policy.isActivation(event) == true) {
    inputManager.postEvent(new ActivatedEvent(entity));
  }
 else   if (policy.isContext(event) == true) {
    selectedEntityList.clear();
    if (entity != null) {
      selectedEntityList.add(entity);
      LinkedList entityList=new LinkedList(selectedEntityList);
      inputManager.postEvent(new SelectionEvent(entityList));
    }
    LinkedList entityList=new LinkedList(selectedEntityList);
    MouseEvent mouseEvent=(MouseEvent)((MouseEvent3D)event).getAwtEvent();
    inputManager.postEvent(new ContextEvent(entityList,mouseEvent));
  }
}","/** 
 * Provides a raw input event to process
 */
protected void inputEvent(Event event){
  InputManager inputManager=InputManager.inputManager();
  Entity entity=event.getEntity();
  if (policy.isHoverInterrupt(event) == true) {
synchronized (this) {
      if (hoverTimer != null) {
        hoverTimer.cancel();
      }
      MouseEvent mouseEvent=(MouseEvent)((MouseEvent3D)event).getAwtEvent();
      if (hoverEntity != null) {
        inputManager.postEvent(new HoverEvent(hoverEntity,false,mouseEvent));
        hoverEntity=null;
      }
      hoverStartTime=System.currentTimeMillis();
      if (entity != null) {
        HoverTimerTask task=new HoverTimerTask(entity,hoverStartTime,mouseEvent);
        hoverTimer=new Timer();
        hoverTimer.schedule(task,policy.getHoverDelay());
      }
    }
  }
  if (policy.isClearedSelection(event) == true) {
    selectedEntityList.clear();
    inputManager.postEvent(new SelectionEvent(new LinkedList(selectedEntityList)));
    return;
  }
 else   if (policy.isSingleSelection(event) == true) {
    selectedEntityList.clear();
    selectedEntityList.add(entity);
    inputManager.postEvent(new SelectionEvent(new LinkedList(selectedEntityList)));
    return;
  }
 else   if (policy.isMultiSelection(event) == true) {
    if (selectedEntityList.contains(entity) == false) {
      selectedEntityList.add(entity);
    }
 else {
      selectedEntityList.remove(entity);
    }
    inputManager.postEvent(new SelectionEvent(new LinkedList(selectedEntityList)));
    return;
  }
 else   if (policy.isEnter(event) == true) {
    enterEntity=entity;
    inputManager.postEvent(new EnterExitEvent(entity,true));
  }
 else   if (policy.isExit(event) == true) {
    Entity eventEntity=enterEntity;
    enterEntity=null;
    inputManager.postEvent(new EnterExitEvent(eventEntity,false));
  }
 else   if (policy.isActivation(event) == true) {
    inputManager.postEvent(new ActivatedEvent(entity));
  }
 else   if (policy.isContext(event) == true) {
    selectedEntityList.clear();
    if (entity != null) {
      selectedEntityList.add(entity);
      LinkedList entityList=new LinkedList(selectedEntityList);
      inputManager.postEvent(new SelectionEvent(entityList));
    }
    LinkedList entityList=new LinkedList(selectedEntityList);
    MouseEvent mouseEvent=(MouseEvent)((MouseEvent3D)event).getAwtEvent();
    inputManager.postEvent(new ContextEvent(entityList,mouseEvent));
  }
}"
45744,"protected void componentWorldVisible(HUDComponent2D component){
  if (logger.isLoggable(Level.INFO)) {
    logger.info(""String_Node_Str"" + component);
  }
  HUDComponentState state=(HUDComponentState)hudStateMap.get(component);
  if ((state != null) && (!state.isWorldVisible())) {
    Cell cell=component.getCell();
    if (cell != null) {
      HUDView3D worldView=state.getWorldView();
      if (worldView == null) {
        logger.fine(""String_Node_Str"");
        HUDView3DDisplayer worldDisplayer=new HUDView3DDisplayer(cell);
        logger.fine(""String_Node_Str"");
        worldView=worldDisplayer.createView(state.getWindow());
        worldView.setPixelScale(worldPixelScale);
        state.setWorldView(worldView);
      }
      logger.fine(""String_Node_Str"");
      worldView.setOrtho(false,false);
      worldView.setPixelScale(worldPixelScale);
      worldView.setVisibleApp(true);
      worldView.setVisibleUser(true,false);
      componentMovedWorld(component);
      worldView.update();
    }
  }
}","protected void componentWorldVisible(HUDComponent2D component){
  if (logger.isLoggable(Level.INFO)) {
    logger.info(""String_Node_Str"" + component);
  }
  HUDComponentState state=(HUDComponentState)hudStateMap.get(component);
  if ((state != null) && (!state.isWorldVisible())) {
    Cell cell=component.getCell();
    if (cell != null) {
      HUDView3D worldView=state.getWorldView();
      if (worldView == null) {
        logger.fine(""String_Node_Str"");
        HUDView3DDisplayer worldDisplayer=new HUDView3DDisplayer(cell);
        logger.fine(""String_Node_Str"");
        worldView=worldDisplayer.createView(state.getWindow());
        worldView.setPixelScale(worldPixelScale);
        state.setWorldView(worldView);
      }
      logger.fine(""String_Node_Str"");
      worldView.setOrtho(false,false);
      worldView.setPixelScale(worldPixelScale);
      worldView.setVisibleUser(true,false);
      componentMovedWorld(component);
      worldView.update();
    }
  }
}"
45745,"protected void componentWorldInvisible(HUDComponent2D component){
  if (logger.isLoggable(Level.INFO)) {
    logger.info(""String_Node_Str"" + component);
  }
  HUDComponentState state=(HUDComponentState)hudStateMap.get(component);
  if ((state != null) && (state.isWorldVisible())) {
    HUDView3D worldView=state.getWorldView();
    if (worldView != null) {
      logger.fine(""String_Node_Str"");
      worldView.setVisibleApp(false);
      worldView.setVisibleUser(false,false);
      worldView.update();
    }
 else {
      logger.warning(""String_Node_Str"");
    }
  }
}","protected void componentWorldInvisible(HUDComponent2D component){
  if (logger.isLoggable(Level.INFO)) {
    logger.info(""String_Node_Str"" + component);
  }
  HUDComponentState state=(HUDComponentState)hudStateMap.get(component);
  if ((state != null) && (state.isWorldVisible())) {
    HUDView3D worldView=state.getWorldView();
    if (worldView != null) {
      logger.fine(""String_Node_Str"");
      worldView.setVisibleUser(false,false);
      worldView.update();
    }
 else {
      logger.warning(""String_Node_Str"");
    }
  }
}"
45746,"private void showFrame(HUDComponent2D component,boolean visible){
  if (logger.isLoggable(Level.FINE)) {
    logger.fine(""String_Node_Str"" + component + ""String_Node_Str""+ visible);
  }
  if (component.getDecoratable() == true) {
    HUDComponentState state=(HUDComponentState)hudStateMap.get(component);
    HUDView2D view=state.getView();
    HUDView2D frameView=state.getFrameView();
    if (visible && (frameView == null)) {
      logger.fine(""String_Node_Str"");
      addFrame(component);
      frameView=state.getFrameView();
      view.attachView(frameView);
    }
    frameView.setVisibleApp(visible);
    frameView.setVisibleUser(visible);
    if (!visible) {
      logger.fine(""String_Node_Str"");
      view.detachView(view);
      removeFrame(component);
    }
  }
}","private void showFrame(HUDComponent2D component,boolean visible){
  if (logger.isLoggable(Level.FINE)) {
    logger.fine(""String_Node_Str"" + component + ""String_Node_Str""+ visible);
  }
  if (component.getDecoratable() == true) {
    HUDComponentState state=(HUDComponentState)hudStateMap.get(component);
    HUDView2D view=state.getView();
    HUDView2D frameView=state.getFrameView();
    if (visible && (frameView == null)) {
      logger.fine(""String_Node_Str"");
      addFrame(component);
      frameView=state.getFrameView();
      view.attachView(frameView);
    }
    if (frameView != null) {
      frameView.setVisibleUser(visible);
      if (!visible) {
        logger.fine(""String_Node_Str"");
        view.detachView(view);
        removeFrame(component);
      }
    }
  }
}"
45747,"protected void componentInvisible(HUDComponent2D component){
  if (logger.isLoggable(Level.INFO)) {
    logger.info(""String_Node_Str"" + component);
  }
  HUDComponentState state=(HUDComponentState)hudStateMap.get(component);
  if ((state != null) && (state.isVisible())) {
    HUDView2D view=state.getView();
    if (view != null) {
      logger.fine(""String_Node_Str"");
      view.setVisibleApp(false,false);
      view.setVisibleUser(false);
    }
 else {
      logger.warning(""String_Node_Str"");
    }
    showFrame(component,false);
  }
}","protected void componentInvisible(HUDComponent2D component){
  if (logger.isLoggable(Level.INFO)) {
    logger.info(""String_Node_Str"" + component);
  }
  HUDComponentState state=(HUDComponentState)hudStateMap.get(component);
  if ((state != null) && (state.isVisible())) {
    HUDView2D view=state.getView();
    if (view != null) {
      logger.fine(""String_Node_Str"");
      view.setVisibleUser(false);
    }
 else {
      logger.warning(""String_Node_Str"");
    }
    showFrame(component,false);
  }
}"
45748,"public void addFrameHeader(HUDComponent component){
  if (logger.isLoggable(Level.FINE)) {
    logger.fine(""String_Node_Str"" + component);
  }
  HUDComponentState state=hudStateMap.get(component);
  HUDFrameHeader2DImpl frameImpl=new HUDFrameHeader2DImpl();
  frameImpl.setPreferredSize(new Dimension(component.getWidth(),(int)frameImpl.getPreferredSize().getHeight()));
  HUDFrameHeader2D frame=new HUDFrameHeader2D(frameImpl);
  frame.setTitle(component.getName());
  Window2D window=createWindow(frame);
  frame.setWindow(window);
  Window2D componentWindow=state.getWindow();
  HUDView2D frameView=hudDisplayer.createView(window);
  frameView.setOrtho(true,false);
  frameView.setPixelScaleOrtho(hudPixelScale,false);
  frameView.setSizeApp(new Dimension((int)(window.getWidth()),frame.getHeight()));
  frameView.setLocationOrtho(new Vector2f(0.0f,(float)(0.75 * frame.getHeight() / 2 + 0.75f * componentWindow.getHeight() / 2)));
  frameImpl.addActionListener(frame);
  frame.addActionListener(this);
  frameImpl.addMouseMotionListener(frame);
  frame.addMouseMotionListener(this);
  state.setFrame(frame);
  state.setFrameWindow(window);
  state.setFrameView(frameView);
  hudFrameMap.put(frame,component);
}","public void addFrameHeader(HUDComponent component){
  if (logger.isLoggable(Level.FINE)) {
    logger.fine(""String_Node_Str"" + component);
  }
  HUDComponentState state=hudStateMap.get(component);
  HUDFrameHeader2DImpl frameImpl=new HUDFrameHeader2DImpl();
  frameImpl.setPreferredSize(new Dimension(component.getWidth(),(int)frameImpl.getPreferredSize().getHeight()));
  HUDFrameHeader2D frame=new HUDFrameHeader2D(frameImpl);
  frame.setTitle(component.getName());
  Window2D window=createWindow(frame);
  frame.setWindow(window);
  Window2D componentWindow=state.getWindow();
  HUDView2D frameView=hudDisplayer.createView(window);
  frameView.setOrtho(true,false);
  frameView.setPixelScaleOrtho(hudPixelScale,false);
  frameView.setSizeApp(new Dimension((int)(window.getWidth()),frame.getHeight()));
  frameView.setLocationOrtho(new Vector2f(0.0f,(float)(0.75 * frame.getHeight() / 2 + 0.75f * componentWindow.getHeight() / 2)));
  frameView.setVisibleApp(true);
  frameImpl.addActionListener(frame);
  frame.addActionListener(this);
  frameImpl.addMouseMotionListener(frame);
  frame.addMouseMotionListener(this);
  state.setFrame(frame);
  state.setFrameWindow(window);
  state.setFrameView(frameView);
  hudFrameMap.put(frame,component);
}"
45749,"protected void componentVisible(HUDComponent2D component){
  if (logger.isLoggable(Level.INFO)) {
    logger.info(""String_Node_Str"" + component);
  }
  HUDComponentState state=(HUDComponentState)hudStateMap.get(component);
  if (state == null) {
    return;
  }
  HUDView2D view=state.getView();
  if (view == null) {
    if (hudDisplayer == null) {
      hudDisplayer=new HUDView2DDisplayer();
    }
    view=hudDisplayer.createView(state.getWindow());
    state.setView(view);
    if (layout != null) {
      layout.addView(component,view);
    }
  }
  view.setOrtho(true,false);
  view.setPixelScaleOrtho(hudPixelScale,false);
  view.setVisibleUser(false);
  Vector2f location=(layout != null) ? layout.getLocation(component) : new Vector2f(component.getX(),component.getY());
  component.setLocation((int)location.x,(int)location.y,false);
  view.setLocationOrtho(new Vector2f(location.x + view.getDisplayerLocalWidth() / 2,location.y + view.getDisplayerLocalHeight() / 2),false);
  if (component.getPreferredTransparency() != 1.0f) {
    component.setTransparency(component.getPreferredTransparency());
  }
 else {
    component.changeTransparency(1.0f,unfocusedTransparency);
  }
  view.setVisibleApp(true,false);
  view.setVisibleUser(true);
  if (component.getDecoratable()) {
    showFrame(component,true);
  }
}","protected void componentVisible(HUDComponent2D component){
  if (logger.isLoggable(Level.INFO)) {
    logger.info(""String_Node_Str"" + component);
  }
  HUDComponentState state=(HUDComponentState)hudStateMap.get(component);
  if (state == null) {
    return;
  }
  HUDView2D view=state.getView();
  if (view == null) {
    if (hudDisplayer == null) {
      hudDisplayer=new HUDView2DDisplayer();
    }
    view=hudDisplayer.createView(state.getWindow());
    state.setView(view);
    if (layout != null) {
      layout.addView(component,view);
    }
    if (((HUDComponent2D)component).isHUDManagedWindow()) {
      view.setVisibleApp(true);
    }
  }
  view.setOrtho(true,false);
  view.setPixelScaleOrtho(hudPixelScale,false);
  Vector2f location=(layout != null) ? layout.getLocation(component) : new Vector2f(component.getX(),component.getY());
  component.setLocation((int)location.x,(int)location.y,false);
  view.setLocationOrtho(new Vector2f(location.x + view.getDisplayerLocalWidth() / 2,location.y + view.getDisplayerLocalHeight() / 2),false);
  if (component.getPreferredTransparency() != 1.0f) {
    component.setTransparency(component.getPreferredTransparency());
  }
 else {
    component.changeTransparency(1.0f,unfocusedTransparency);
  }
  view.setVisibleUser(true);
  if (component.getDecoratable()) {
    Type windowType=state.getWindow().getType();
    if ((windowType != Type.POPUP) && (windowType != Type.UNKNOWN)) {
      showFrame(component,true);
    }
  }
}"
45750,"/** 
 * Creates a cell in the world given the CellServerState of the cell. If the given CellServerState is null, this method simply does not create a Cell. This method attempts to position the Cell ""optimally"" so that the avatar can see it, based upon ""hints"" about the Cell bounds given to it in the CellServerState.
 * @param state The cell server state for the new cell
 * @throw CellCreationException Upon error creating the cell
 */
public static void createCell(CellServerState state) throws CellCreationException {
  if (state == null) {
    logger.fine(""String_Node_Str"");
    return;
  }
  ViewManager vm=ViewManager.getViewManager();
  ViewCell viewCell=vm.getPrimaryViewCell();
  CellTransform viewTransform=viewCell.getWorldTransform();
  ServerSessionManager manager=viewCell.getCellCache().getSession().getSessionManager();
  CellTransform transform=null;
  BoundingVolumeHint hint=state.getBoundingVolumeHint();
  logger.info(""String_Node_Str"" + hint.getBoundsHint() + ""String_Node_Str""+ hint.isDoSystemPlacement());
  if (hint != null && hint.isDoSystemPlacement() == true) {
    BoundingVolume boundsHint=hint.getBoundsHint();
    transform=CellPlacementUtils.getCellTransform(manager,boundsHint,viewTransform);
  }
 else   if (hint == null) {
    BoundingVolume boundsHint=new BoundingSphere(DEFAULT_RADIUS,Vector3f.ZERO);
    transform=CellPlacementUtils.getCellTransform(manager,boundsHint,viewTransform);
  }
 else   if (hint != null && hint.isDoSystemPlacement() == false) {
    transform=new CellTransform();
  }
  CellID parentID=null;
  Cell parent=CellCreationParentRegistry.getCellCreationParent();
  if (parent != null) {
    parentID=parent.getCellID();
    logger.info(""String_Node_Str"" + parentID.toString());
  }
  if (parentID != null) {
    CellTransform worldTransform=new CellTransform(null,null);
    CellTransform parentTransform=parent.getWorldTransform();
    logger.info(""String_Node_Str"" + parentTransform.getTranslation(null).toString() + ""String_Node_Str""+ parentTransform.getRotation(null).toString());
    transform=CellPlacementUtils.transform(transform,worldTransform,parentTransform);
  }
  logger.info(""String_Node_Str"" + transform.getTranslation(null).toString());
  PositionComponentServerState position=(PositionComponentServerState)state.getComponentServerState(PositionComponentServerState.class);
  if (position == null) {
    position=new PositionComponentServerState();
    state.addComponentServerState(position);
  }
  position.setTranslation(transform.getTranslation(null));
  position.setRotation(transform.getRotation(null));
  position.setScaling(transform.getScaling(null));
  state.addComponentServerState(new ViewComponentServerState(viewTransform));
  WonderlandSession session=manager.getPrimarySession();
  CellEditChannelConnection connection=(CellEditChannelConnection)session.getConnection(CellEditConnectionType.CLIENT_TYPE);
  CellCreateMessage msg=new CellCreateMessage(parentID,state);
  connection.send(msg);
}","/** 
 * Creates a cell in the world given the CellServerState of the cell. If the given CellServerState is null, this method simply does not create a Cell. This method attempts to position the Cell ""optimally"" so that the avatar can see it, based upon ""hints"" about the Cell bounds given to it in the CellServerState.
 * @param state The cell server state for the new cell
 * @param parentCellID The Cell ID of the parent, of null for world root
 * @throw CellCreationException Upon error creating the cell
 */
public static void createCell(CellServerState state,CellID parentCellID) throws CellCreationException {
  if (state == null) {
    logger.fine(""String_Node_Str"");
    return;
  }
  ViewManager vm=ViewManager.getViewManager();
  ViewCell viewCell=vm.getPrimaryViewCell();
  CellTransform viewTransform=viewCell.getWorldTransform();
  ServerSessionManager manager=viewCell.getCellCache().getSession().getSessionManager();
  CellTransform transform=null;
  BoundingVolumeHint hint=state.getBoundingVolumeHint();
  logger.info(""String_Node_Str"" + hint.getBoundsHint() + ""String_Node_Str""+ hint.isDoSystemPlacement());
  if (hint != null && hint.isDoSystemPlacement() == true) {
    BoundingVolume boundsHint=hint.getBoundsHint();
    transform=CellPlacementUtils.getCellTransform(manager,boundsHint,viewTransform);
  }
 else   if (hint == null) {
    BoundingVolume boundsHint=new BoundingSphere(DEFAULT_RADIUS,Vector3f.ZERO);
    transform=CellPlacementUtils.getCellTransform(manager,boundsHint,viewTransform);
  }
 else   if (hint != null && hint.isDoSystemPlacement() == false) {
    transform=new CellTransform();
  }
  if (parentCellID != null) {
    Cell parent=viewCell.getCellCache().getCell(parentCellID);
    CellTransform worldTransform=new CellTransform(null,null);
    CellTransform parentTransform=parent.getWorldTransform();
    logger.info(""String_Node_Str"" + parentTransform.getTranslation(null).toString() + ""String_Node_Str""+ parentTransform.getRotation(null).toString());
    transform=CellPlacementUtils.transform(transform,worldTransform,parentTransform);
  }
  logger.info(""String_Node_Str"" + transform.getTranslation(null).toString());
  PositionComponentServerState position=(PositionComponentServerState)state.getComponentServerState(PositionComponentServerState.class);
  if (position == null) {
    position=new PositionComponentServerState();
    state.addComponentServerState(position);
  }
  position.setTranslation(transform.getTranslation(null));
  position.setRotation(transform.getRotation(null));
  position.setScaling(transform.getScaling(null));
  state.addComponentServerState(new ViewComponentServerState(viewTransform));
  WonderlandSession session=manager.getPrimarySession();
  CellEditChannelConnection connection=(CellEditChannelConnection)session.getConnection(CellEditConnectionType.CLIENT_TYPE);
  CellCreateMessage msg=new CellCreateMessage(parentCellID,state);
  connection.send(msg);
}"
45751,"public void setCameraController(CameraController cameraController){
synchronized (this) {
    pendingController=cameraController;
  }
}","/** 
 * Set the camera controller. Note this call will return immediately but the camera controller will not be applied to the system until the next frame is rendererd, the change is applied in the compute method of this processor.
 * @param cameraController
 */
public void setCameraController(CameraController cameraController){
synchronized (this) {
    pendingController=cameraController;
  }
}"
45752,"public CameraController getCameraController(){
synchronized (this) {
    return pendingController;
  }
}","/** 
 * Return the camera controller. This method returns the most recently set cameraController, which may not be the controller being used this frame. CameraController changes are applied in the processor commit method, this method will return the most recently set camera controller, the application of which may still be pending.
 * @return
 */
public CameraController getCameraController(){
synchronized (this) {
    if (pendingController != null)     return pendingController;
    return cameraController;
  }
}"
45753,"public AvatarImiJME(Cell cell){
  super(cell);
  assert(cell != null);
  final Cell c=cell;
  AvatarConfigComponent comp=cell.getComponent(AvatarConfigComponent.class);
  comp.addAvatarConfigChangeListener(new AvatarChangeListener());
  if (cell instanceof AvatarCell)   username=((AvatarCell)cell).getIdentity().getUsername();
 else   username=""String_Node_Str"";
  characterMotionListener=new CharacterMotionListener(){
    Vector3f prevTrans;
    PMatrix prevRot;
    public void transformUpdate(    Vector3f translation,    PMatrix rotation){
      if (logger.isLoggable(Level.FINEST)) {
        logger.finest(""String_Node_Str"" + prevTrans + ""String_Node_Str""+ translation+ ""String_Node_Str""+ prevRot+ ""String_Node_Str""+ rotation);
      }
      if (prevTrans == null || !Math3DUtils.epsilonEquals(prevTrans,translation,0.001f) || prevRot == null || !prevRot.epsilonEquals(rotation,0.001f)) {
        ((MovableAvatarComponent)c.getComponent(MovableComponent.class)).localMoveRequest(new CellTransform(rotation.getRotation(),translation));
        prevTrans=translation.clone();
        prevRot=new PMatrix(rotation);
      }
    }
  }
;
  gameContextListener=new GameContextListener(){
    public void trigger(    boolean pressed,    int trigger,    Vector3f translation,    Quaternion rotation){
synchronized (this) {
        currentTrigger=trigger;
        currentPressed=pressed;
      }
      GameState state=avatarCharacter.getContext().getCurrentState();
      String animationName=null;
      if (state instanceof CycleActionState) {
        animationName=avatarCharacter.getContext().getState(CycleActionState.class).getAnimationName();
      }
      if (c.getComponent(MovableComponent.class) == null)       logger.warning(""String_Node_Str"");
 else       ((MovableAvatarComponent)c.getComponent(MovableComponent.class)).localMoveRequest(new CellTransform(rotation,translation),trigger,pressed,animationName,null);
    }
  }
;
  ClientContext.getInputManager().addGlobalEventListener(new EventClassListener(){
    private Class[] consumeClasses=new Class[]{AvatarRendererChangeRequestEvent.class,AvatarNameEvent.class};
    @Override public Class[] eventClassesToConsume(){
      return consumeClasses;
    }
    @Override public void commitEvent(    Event event){
      if (event instanceof AvatarNameEvent) {
        AvatarNameEvent e=(AvatarNameEvent)event;
        NameTagNode nameTagNode=getNameTagNode();
        if (e.getUsername().equals(username) == true) {
          nameTagNode.setNameTag(e.getEventType(),username,e.getUsernameAlias(),e.getForegroundColor(),e.getFont());
        }
      }
 else       if (event instanceof AvatarRendererChangeRequestEvent) {
        handleAvatarRendererChangeRequest((AvatarRendererChangeRequestEvent)event);
      }
    }
    @Override public void computeEvent(    Event evtIn){
    }
  }
);
  collisionChangeRequestListener=new CollisionChangeRequestListener();
  ClientContext.getInputManager().addGlobalEventListener(collisionChangeRequestListener);
}","public AvatarImiJME(Cell cell){
  super(cell);
  assert(cell != null);
  final Cell c=cell;
  AvatarConfigComponent comp=cell.getComponent(AvatarConfigComponent.class);
  comp.addAvatarConfigChangeListener(new AvatarChangeListener());
  if (cell instanceof AvatarCell)   username=((AvatarCell)cell).getIdentity().getUsername();
 else   username=""String_Node_Str"";
  characterMotionListener=new CharacterMotionListener(){
    Vector3f prevTrans;
    PMatrix prevRot;
    public void transformUpdate(    Vector3f translation,    PMatrix rotation){
      if (logger.isLoggable(Level.FINEST)) {
        logger.finest(""String_Node_Str"" + prevTrans + ""String_Node_Str""+ translation+ ""String_Node_Str""+ prevRot+ ""String_Node_Str""+ rotation);
      }
      if (prevTrans == null || !Math3DUtils.epsilonEquals(prevTrans,translation,0.001f) || prevRot == null || !prevRot.epsilonEquals(rotation,0.001f)) {
        ((MovableAvatarComponent)c.getComponent(MovableComponent.class)).localMoveRequest(new CellTransform(rotation.getRotation(),translation));
        prevTrans=translation.clone();
        prevRot=new PMatrix(rotation);
      }
    }
  }
;
  gameContextListener=new GameContextListener(){
    public void trigger(    boolean pressed,    int trigger,    Vector3f translation,    Quaternion rotation){
synchronized (this) {
        currentTrigger=trigger;
        currentPressed=pressed;
      }
      GameState state=avatarCharacter.getContext().getCurrentState();
      String animationName=null;
      if (state instanceof CycleActionState) {
        animationName=avatarCharacter.getContext().getState(CycleActionState.class).getAnimationName();
      }
      if (c.getComponent(MovableComponent.class) == null)       logger.warning(""String_Node_Str"");
 else       ((MovableAvatarComponent)c.getComponent(MovableComponent.class)).localMoveRequest(new CellTransform(rotation,translation),trigger,pressed,animationName,null);
    }
  }
;
  ClientContext.getInputManager().addGlobalEventListener(new EventClassListener(){
    private Class[] consumeClasses=new Class[]{AvatarRendererChangeRequestEvent.class,AvatarNameEvent.class};
    @Override public Class[] eventClassesToConsume(){
      return consumeClasses;
    }
    @Override public void commitEvent(    Event event){
      if (event instanceof AvatarNameEvent) {
        AvatarNameEvent e=(AvatarNameEvent)event;
        NameTagNode nameTagNode=getNameTagNode();
        if (e.getUsername().equals(username) == true) {
          nameTagNode.setNameTag(e.getEventType(),username,e.getUsernameAlias());
        }
      }
 else       if (event instanceof AvatarRendererChangeRequestEvent) {
        handleAvatarRendererChangeRequest((AvatarRendererChangeRequestEvent)event);
      }
    }
    @Override public void computeEvent(    Event evtIn){
    }
  }
);
  collisionChangeRequestListener=new CollisionChangeRequestListener();
  ClientContext.getInputManager().addGlobalEventListener(collisionChangeRequestListener);
}"
45754,"public AvatarNameEvent(EventType eventType,String username,String usernameAlias,Color foregroundColor,Font font){
  this.eventType=eventType;
  this.username=username;
  this.usernameAlias=usernameAlias;
  this.foregroundColor=foregroundColor;
  this.font=font;
}","public AvatarNameEvent(EventType eventType,String username,String usernameAlias){
  this.eventType=eventType;
  this.username=username;
  this.usernameAlias=usernameAlias;
}"
45755,"@Override public Event clone(Event evt){
  if (evt == null) {
    evt=new AvatarNameEvent(eventType,username,usernameAlias,foregroundColor,font);
  }
 else {
    AvatarNameEvent e=(AvatarNameEvent)evt;
    e.setEventType(eventType);
    e.setUsername(username);
    e.setUsernameAlias(usernameAlias);
    e.setForegroundColor(foregroundColor);
    e.setFont(font);
  }
  super.clone(evt);
  return evt;
}","@Override public Event clone(Event evt){
  if (evt == null) {
    evt=new AvatarNameEvent(eventType,username,usernameAlias);
  }
 else {
    AvatarNameEvent e=(AvatarNameEvent)evt;
    e.setEventType(eventType);
    e.setUsername(username);
    e.setUsernameAlias(usernameAlias);
  }
  super.clone(evt);
  return evt;
}"
45756,"public String toString(){
  return ""String_Node_Str"" + eventType + ""String_Node_Str""+ username+ ""String_Node_Str""+ usernameAlias+ ""String_Node_Str""+ foregroundColor+ ""String_Node_Str""+ font;
}","public String toString(){
  return ""String_Node_Str"" + eventType + ""String_Node_Str""+ username+ ""String_Node_Str""+ usernameAlias;
}"
45757,"public void setVisible(boolean visible){
  this.visible=visible;
  if (visible) {
    updateLabel(getDisplayName(name,isSpeaking,isMuted));
  }
 else {
    removeLabel();
  }
}","public void setVisible(boolean visible){
  this.visible=visible;
  if (visible) {
    updateLabel();
  }
 else {
    removeLabel();
  }
}"
45758,"public void commit(){
  if (visible) {
    if (label == null) {
      label=new TextLabel2D(displayName,foregroundColor,backgroundColor,currentHeight,true,currentFont);
      label.setLocalTranslation(0,heightAbove,0);
      Matrix3f rot=new Matrix3f();
      rot.fromAngleAxis((float)Math.PI,new Vector3f(0f,1f,0f));
      label.setLocalRotation(rot);
      attachChild(label);
    }
 else {
      label.setText(displayName,foregroundColor,backgroundColor);
    }
    ClientContextJME.getWorldManager().addToUpdateList(NameTagNode.this);
  }
}","public void commit(){
  if (visible) {
    if (label == null) {
      label=new TextLabel2D(displayName,foregroundColor,backgroundColor,height,true,font);
      label.setLocalTranslation(0,heightAbove,0);
      Matrix3f rot=new Matrix3f();
      rot.fromAngleAxis((float)Math.PI,new Vector3f(0f,1f,0f));
      label.setLocalRotation(rot);
      attachChild(label);
    }
 else {
      label.setText(displayName,foregroundColor,backgroundColor);
    }
    ClientContextJME.getWorldManager().addToUpdateList(NameTagNode.this);
  }
}"
45759,"public synchronized void setNameTag(EventType eventType,String username,String alias,Color foregroundColor,Font font){
  logger.fine(""String_Node_Str"" + eventType + ""String_Node_Str""+ username+ ""String_Node_Str""+ alias+ ""String_Node_Str""+ foregroundColor+ ""String_Node_Str""+ font);
switch (eventType) {
case HIDE:
    labelHidden=true;
  removeLabel();
return;
case SMALL_FONT:
labelHidden=false;
removeLabel();
setHeight(SMALL_SIZE);
break;
case REGULAR_FONT:
labelHidden=false;
removeLabel();
setHeight(REGULAR_SIZE);
break;
case LARGE_FONT:
labelHidden=false;
removeLabel();
setHeight(LARGE_SIZE);
break;
case ENTERED_CONE_OF_SILENCE:
inConeOfSilence=true;
setForegroundColor(CONE_OF_SILENCE_COLOR);
break;
case EXITED_CONE_OF_SILENCE:
inConeOfSilence=false;
setForegroundColor(NOT_SPEAKING_COLOR);
break;
case STARTED_SPEAKING:
isSpeaking=true;
setForegroundColor(SPEAKING_COLOR);
break;
case STOPPED_SPEAKING:
isSpeaking=false;
setForegroundColor(NOT_SPEAKING_COLOR);
break;
case MUTE:
isMuted=true;
setForegroundColor(NOT_SPEAKING_COLOR);
removeLabel();
break;
case UNMUTE:
isMuted=false;
setForegroundColor(NOT_SPEAKING_COLOR);
break;
case CHANGE_NAME:
removeLabel();
usernameAlias=alias;
break;
default :
logger.warning(""String_Node_Str"" + eventType);
break;
}
if ((alias != null) && !alias.equals(username)) {
setFont(ALIAS_NAME_FONT);
usernameAlias=alias;
updateLabel(getDisplayName(usernameAlias,isSpeaking,isMuted));
}
 else {
setFont(REAL_NAME_FONT);
updateLabel(getDisplayName(name,isSpeaking,isMuted));
}
if (foregroundColor != null) {
setForegroundColor(foregroundColor);
}
}","public void setNameTag(EventType eventType,String username,String alias){
  logger.fine(""String_Node_Str"" + eventType + ""String_Node_Str""+ username+ ""String_Node_Str""+ alias);
switch (eventType) {
case HIDE:
    labelHidden=true;
  break;
case SMALL_FONT:
labelHidden=false;
height=SMALL_SIZE;
break;
case REGULAR_FONT:
labelHidden=false;
height=REGULAR_SIZE;
break;
case LARGE_FONT:
labelHidden=false;
height=LARGE_SIZE;
break;
case ENTERED_CONE_OF_SILENCE:
inConeOfSilence=true;
break;
case EXITED_CONE_OF_SILENCE:
inConeOfSilence=false;
break;
case STARTED_SPEAKING:
isSpeaking=true;
break;
case STOPPED_SPEAKING:
isSpeaking=false;
break;
case MUTE:
isMuted=true;
isSpeaking=false;
removeLabel();
break;
case UNMUTE:
isMuted=false;
break;
case CHANGE_NAME:
removeLabel();
usernameAlias=alias;
break;
default :
logger.warning(""String_Node_Str"" + eventType);
break;
}
updateLabel();
}"
45760,"public NameTagNode(String name,float heightAbove){
  this.name=name;
  this.heightAbove=heightAbove;
  visible=true;
  nameTagMap.put(name,this);
  setLabelText(name);
  setNameTag(EventType.REGULAR_FONT,name,name);
}","public NameTagNode(String name,float heightAbove){
  this.name=name;
  this.heightAbove=heightAbove;
  visible=true;
  nameTagMap.put(name,this);
  usernameAlias=name;
  setNameTag(EventType.REGULAR_FONT,name,usernameAlias);
}"
45761,"public static String getDisplayName(String name,boolean isSpeaking,boolean isMuted){
  if (isMuted) {
    return LEFT_MUTE + name + RIGHT_MUTE;
  }
  if (isSpeaking) {
    return name + SPEAKING;
  }
  return name;
}","public static String getDisplayName(String name,boolean isSpeaking,boolean isMuted){
  if (isMuted) {
    return LEFT_MUTE + name + RIGHT_MUTE;
  }
 else {
    if (isSpeaking) {
      return name + SPEAKING;
    }
  }
  return name;
}"
45762,"private void updateLabel(final String displayName){
  if (labelHidden) {
    return;
  }
  SceneWorker.addWorker(new WorkCommit(){
    public void commit(){
      if (visible) {
        if (label == null) {
          label=new TextLabel2D(displayName,foregroundColor,backgroundColor,currentHeight,true,currentFont);
          label.setLocalTranslation(0,heightAbove,0);
          Matrix3f rot=new Matrix3f();
          rot.fromAngleAxis((float)Math.PI,new Vector3f(0f,1f,0f));
          label.setLocalRotation(rot);
          attachChild(label);
        }
 else {
          label.setText(displayName,foregroundColor,backgroundColor);
        }
        ClientContextJME.getWorldManager().addToUpdateList(NameTagNode.this);
      }
    }
  }
);
}","private void updateLabel(){
  removeLabel();
  if (labelHidden) {
    return;
  }
  if (name.equals(usernameAlias) == false) {
    font=ALIAS_NAME_FONT;
  }
 else {
    font=REAL_NAME_FONT;
  }
  if (inConeOfSilence) {
    foregroundColor=CONE_OF_SILENCE_COLOR;
  }
 else {
    if (isSpeaking) {
      foregroundColor=SPEAKING_COLOR;
    }
 else {
      foregroundColor=NOT_SPEAKING_COLOR;
    }
  }
  final String displayName=getDisplayName(usernameAlias,isSpeaking,isMuted);
  SceneWorker.addWorker(new WorkCommit(){
    public void commit(){
      if (visible) {
        if (label == null) {
          label=new TextLabel2D(displayName,foregroundColor,backgroundColor,height,true,font);
          label.setLocalTranslation(0,heightAbove,0);
          Matrix3f rot=new Matrix3f();
          rot.fromAngleAxis((float)Math.PI,new Vector3f(0f,1f,0f));
          label.setLocalRotation(rot);
          attachChild(label);
        }
 else {
          label.setText(displayName,foregroundColor,backgroundColor);
        }
        ClientContextJME.getWorldManager().addToUpdateList(NameTagNode.this);
      }
    }
  }
);
}"
45763,"/** 
 * Load and return the model. The node returned is the model BG
 * @return
 */
public Node loadModel(){
  Node ret=new Node();
  if (deployedModel == null)   getDeployedModel();
  ModelLoader loader=deployedModel.getModelLoader();
  Node model=loader.loadDeployedModel(deployedModel);
  if (model != null) {
    model.setName(deployedModel.getModelURL());
    ret.attachChild(model);
  }
  return ret;
}","/** 
 * Load and return the model. The node returned is the model BG
 * @return
 */
public Node loadModel(Entity rootEntity){
  Node ret=new Node();
  if (deployedModel == null)   getDeployedModel();
  ModelLoader loader=deployedModel.getModelLoader();
  Node model=loader.loadDeployedModel(deployedModel,rootEntity);
  if (model != null) {
    model.setName(deployedModel.getModelURL());
    ret.attachChild(model);
  }
  return ret;
}"
45764,"@Override public void setClientState(CellComponentClientState clientState){
  super.setClientState(clientState);
  ModelCellComponentClientState state=(ModelCellComponentClientState)clientState;
  setDeployedModelURL(state.getDeployedModelURL());
}","@Override public void setClientState(CellComponentClientState clientState){
  super.setClientState(clientState);
  ModelCellComponentClientState state=(ModelCellComponentClientState)clientState;
  setDeployedModelURL(state.getDeployedModelURL());
  collidable=state.isCollisionEnabled();
  pickable=state.isPickingEnabled();
  lightingEnabled=state.isLightingEnabled();
  if (renderer != null) {
    renderer.setCollisionEnabled(collidable);
    renderer.setPickingEnabled(pickable);
  }
}"
45765,"/** 
 * Instantiate and return the cell renderer
 * @param type
 * @param cell
 * @return
 */
public CellRenderer getCellRenderer(Cell.RendererType type,Cell cell){
synchronized (this) {
    if (renderer == null) {
      if (deployedModel == null) {
        getDeployedModel();
      }
      renderer=new ModelRenderer(cell,deployedModel);
    }
    return renderer;
  }
}","/** 
 * Instantiate and return the cell renderer
 * @param type
 * @param cell
 * @return
 */
public CellRenderer getCellRenderer(Cell.RendererType type,Cell cell){
synchronized (this) {
    if (renderer == null) {
      if (deployedModel == null) {
        getDeployedModel();
      }
      renderer=new ModelRenderer(cell,deployedModel);
      renderer.setCollisionEnabled(collidable);
      renderer.setPickingEnabled(pickable);
    }
    return renderer;
  }
}"
45766,"/** 
 * Given a previously deploy ImportedModel, load the model
 * @param model
 */
public Node loadDeployedModel(DeployedModel model);","/** 
 * Given a previously deploy model, load the model.
 * @param model the model to load
 * @param rootEntity the entity to which the returned node will be attached.
 */
public Node loadDeployedModel(DeployedModel model,Entity rootEntity);"
45767,"protected CollisionComponent setupCollision(CollisionSystem collisionSystem,Node rootNode){
  CollisionComponent cc=null;
  if (collisionSystem instanceof JMECollisionSystem) {
    cc=((JMECollisionSystem)collisionSystem).createCollisionComponent(rootNode);
  }
 else {
    logger.warning(""String_Node_Str"" + collisionSystem);
  }
  return cc;
}","protected CollisionComponent setupCollision(CollisionSystem collisionSystem,Node rootNode){
  CollisionComponent cc=null;
  if (collisionSystem instanceof JMECollisionSystem) {
    cc=((JMECollisionSystem)collisionSystem).createCollisionComponent(rootNode);
    cc.setCollidable(collisionEnabled);
    cc.setPickable(pickingEnabled);
  }
 else {
    logger.warning(""String_Node_Str"" + collisionSystem);
  }
  return cc;
}"
45768,"/** 
 * Return the entity for this basic renderer. The first time this method is called the entity will be created using createEntity()
 * @return
 */
public Entity getEntity(){
synchronized (this) {
    logger.fine(""String_Node_Str"" + this.getClass().getName());
    if (entity == null)     entity=createEntity();
  }
  return entity;
}","/** 
 * Return the entity for this basic renderer. The first time this method is called the entity will be created using createEntity()
 * @return
 */
public Entity getEntity(){
synchronized (entityLock) {
    logger.fine(""String_Node_Str"" + this.getClass().getName());
    if (entity == null)     entity=createEntity();
  }
  return entity;
}"
45769,"@Override protected Node createSceneGraph(Entity entity){
  if (modelComponent != null) {
    return modelComponent.loadModel();
  }
  if (deployedModel != null) {
    ModelLoader loader=deployedModel.getModelLoader();
    if (loader == null) {
      logger.warning(""String_Node_Str"" + deployedModel.getModelURL());
      return new Node(""String_Node_Str"");
    }
    Node ret=loader.loadDeployedModel(deployedModel);
    return ret;
  }
  ModelLoader loader=LoaderManager.getLoaderManager().getLoader(deployedModelURL);
  if (loader == null) {
    logger.warning(""String_Node_Str"" + deployedModel.getModelURL());
    return new Node(""String_Node_Str"");
  }
  deployedModel=new DeployedModel(deployedModelURL,loader);
  deployedModel.setModelTranslation(modelTranslation);
  deployedModel.setModelRotation(modelRotation);
  deployedModel.setModelScale(modelScale);
  return loader.loadDeployedModel(deployedModel);
}","@Override protected Node createSceneGraph(Entity entity){
  if (modelComponent != null) {
    return modelComponent.loadModel(entity);
  }
  if (deployedModel != null) {
    ModelLoader loader=deployedModel.getModelLoader();
    if (loader == null) {
      logger.warning(""String_Node_Str"" + deployedModel.getModelURL());
      return new Node(""String_Node_Str"");
    }
    Node ret=loader.loadDeployedModel(deployedModel,entity);
    return ret;
  }
  ModelLoader loader=LoaderManager.getLoaderManager().getLoader(deployedModelURL);
  if (loader == null) {
    logger.warning(""String_Node_Str"" + deployedModel.getModelURL());
    return new Node(""String_Node_Str"");
  }
  deployedModel=new DeployedModel(deployedModelURL,loader);
  deployedModel.setModelTranslation(modelTranslation);
  deployedModel.setModelRotation(modelRotation);
  deployedModel.setModelScale(modelScale);
  return loader.loadDeployedModel(deployedModel,entity);
}"
45770,"public CellComponentServerState clone(CellComponentServerState state){
  ModelCellComponentServerState ret=(ModelCellComponentServerState)state;
  if (ret == null)   ret=new ModelCellComponentServerState();
  ret.deployedModelURL=this.deployedModelURL;
  return ret;
}","public CellComponentServerState clone(CellComponentServerState state){
  ModelCellComponentServerState ret=(ModelCellComponentServerState)state;
  if (ret == null)   ret=new ModelCellComponentServerState();
  ret.deployedModelURL=this.deployedModelURL;
  ret.collidable=this.collidable;
  ret.pickable=this.pickable;
  ret.lightingEnabled=this.lightingEnabled;
  return ret;
}"
45771,"public CellComponentClientState setClientState(ModelCellComponentClientState state){
  state.setDeployedModelURL(deployedModelURL);
  return state;
}","public CellComponentClientState setClientState(ModelCellComponentClientState state){
  state.setDeployedModelURL(deployedModelURL);
  state.setCollisionEnabled(collidable);
  state.setPickingEnabled(pickable);
  state.setLightingEnabled(lightingEnabled);
  return state;
}"
45772,"public JPanel getPropertiesJPanel(CellPropertiesEditor editor){
  this.editor=editor;
  return this;
}","/** 
 */
public JPanel getPropertiesJPanel(){
  return this;
}"
45773,"@Override protected void setLive(boolean live){
  super.setLive(live);
  if (live) {
    channelRef.getForUpdate().addMessageReceiver(MicrophoneEnterCellMessage.class,new MicrophoneMessageHandler(this));
    BoundingVolume[] bounds=new BoundingVolume[2];
    if (fullVolumeArea.areaType.equalsIgnoreCase(""String_Node_Str"")) {
      bounds[0]=new BoundingSphere((float)fullVolumeArea.xExtent / 2,new Vector3f());
    }
 else {
      bounds[0]=new BoundingBox(new Vector3f(),(float)fullVolumeArea.xExtent,(float)fullVolumeArea.yExtent,(float)fullVolumeArea.zExtent);
    }
    Vector3f activeOrigin=new Vector3f((float)activeArea.origin.x,(float)activeArea.origin.y,(float)activeArea.origin.z);
    if (activeArea.areaType.equalsIgnoreCase(""String_Node_Str"")) {
      bounds[1]=new BoundingSphere((float)2,activeOrigin);
    }
 else {
      bounds[1]=new BoundingBox(activeOrigin,(float)activeArea.xExtent,(float)activeArea.yExtent,(float)activeArea.zExtent);
    }
    System.out.println(""String_Node_Str"" + Arrays.toString(bounds));
    proxListener=new MicrophoneProximityListener(microphoneName,volume,bounds);
    proxRef.getForUpdate().addProximityListener(proxListener,bounds);
  }
 else {
    channelRef.getForUpdate().removeMessageReceiver(MicrophoneEnterCellMessage.class);
    if (proxListener != null) {
      proxRef.getForUpdate().removeProximityListener(proxListener);
      proxListener=null;
    }
  }
}","@Override protected void setLive(boolean live){
  super.setLive(live);
  if (live) {
    channelRef.getForUpdate().addMessageReceiver(MicrophoneEnterCellMessage.class,new MicrophoneMessageHandler(this));
    BoundingVolume[] bounds=new BoundingVolume[2];
    if (fullVolumeArea.areaType.equalsIgnoreCase(""String_Node_Str"")) {
      bounds[0]=new BoundingSphere((float)fullVolumeArea.xExtent / 2,new Vector3f());
    }
 else {
      bounds[0]=new BoundingBox(new Vector3f(),(float)fullVolumeArea.xExtent,(float)fullVolumeArea.yExtent,(float)fullVolumeArea.zExtent);
    }
    Vector3f activeOrigin=new Vector3f((float)activeArea.origin.x,(float)activeArea.origin.y,(float)activeArea.origin.z);
    if (activeArea.areaType.equalsIgnoreCase(""String_Node_Str"")) {
      bounds[1]=new BoundingSphere((float)2,activeOrigin);
    }
 else {
      bounds[1]=new BoundingBox(activeOrigin,(float)activeArea.xExtent,(float)activeArea.yExtent,(float)activeArea.zExtent);
    }
    System.out.println(""String_Node_Str"" + Arrays.toString(bounds));
    proxListener=new MicrophoneProximityListener(microphoneName,volume,bounds);
    proxRef.getForUpdate().addProximityListener(proxListener,bounds);
  }
 else {
    channelRef.getForUpdate().removeMessageReceiver(MicrophoneEnterCellMessage.class);
    if (proxListener != null) {
      proxListener.remove();
      proxRef.getForUpdate().removeProximityListener(proxListener);
      proxListener=null;
    }
  }
}"
45774,"private void cellEntered(String callId){
  logger.info(callId + ""String_Node_Str"" + microphoneName);
  VoiceManager vm=AppContext.getManager(VoiceManager.class);
  Player player=vm.getPlayer(callId);
  if (player == null) {
    logger.warning(""String_Node_Str"" + callId);
    return;
  }
  AudioGroup audioGroup=vm.getAudioGroup(microphoneName);
  if (audioGroup == null) {
    AudioGroupSetup ags=new AudioGroupSetup();
    ags.spatializer=new FullVolumeSpatializer();
    ags.spatializer.setAttenuator(DefaultSpatializer.DEFAULT_MAXIMUM_VOLUME);
    audioGroup=vm.createAudioGroup(microphoneName,ags);
  }
  audioGroup.addPlayer(player,new AudioGroupPlayerInfo(false,AudioGroupPlayerInfo.ChatType.PUBLIC));
  player.attenuateOtherGroups(audioGroup,0,0);
}","private void cellEntered(String callId){
  logger.info(callId + ""String_Node_Str"" + microphoneName);
  VoiceManager vm=AppContext.getManager(VoiceManager.class);
  Player player=vm.getPlayer(callId);
  if (player == null) {
    logger.warning(""String_Node_Str"" + callId);
    return;
  }
  AudioGroup audioGroup=vm.getAudioGroup(microphoneName);
  if (audioGroup == null) {
    AudioGroupSetup ags=new AudioGroupSetup();
    ags.spatializer=new FullVolumeSpatializer();
    ags.spatializer.setAttenuator(DefaultSpatializer.DEFAULT_MAXIMUM_VOLUME);
    ags.audioGroupListener=this;
    audioGroup=vm.createAudioGroup(microphoneName,ags);
  }
  audioGroup.addPlayer(player,new AudioGroupPlayerInfo(false,AudioGroupPlayerInfo.ChatType.PUBLIC));
}"
45775,"private void cellExited(String callId){
  logger.info(callId + ""String_Node_Str"" + microphoneName);
  VoiceManager vm=AppContext.getManager(VoiceManager.class);
  AudioGroup audioGroup=vm.getAudioGroup(microphoneName);
  if (audioGroup == null) {
    logger.warning(""String_Node_Str"" + microphoneName);
    return;
  }
  Player player=vm.getPlayer(callId);
  if (player == null) {
    logger.warning(""String_Node_Str"" + callId);
    return;
  }
  audioGroup.removePlayer(player);
  if (audioGroup.getNumberOfPlayers() == 1) {
    vm.removeAudioGroup(audioGroup);
  }
  player.attenuateOtherGroups(audioGroup,AudioGroup.DEFAULT_SPEAKING_ATTENUATION,AudioGroup.DEFAULT_LISTEN_ATTENUATION);
}","private void cellExited(String callId){
  logger.info(callId + ""String_Node_Str"" + microphoneName);
  VoiceManager vm=AppContext.getManager(VoiceManager.class);
  AudioGroup audioGroup=vm.getAudioGroup(microphoneName);
  if (audioGroup == null) {
    logger.warning(""String_Node_Str"" + microphoneName);
    return;
  }
  Player player=vm.getPlayer(callId);
  if (player == null) {
    logger.warning(""String_Node_Str"" + callId);
    return;
  }
  audioGroup.removePlayer(player);
}"
45776,"void rootCellRemoved(SpatialCellImpl rootCell){
  viewCell.acquireRootReadLock();
  try {
synchronized (pendingCacheUpdates) {
      logger.fine(""String_Node_Str"");
      pendingCacheUpdates.add(new CacheUpdate(rootCell,null,false));
    }
  }
  finally {
    viewCell.releaseRootReadLock();
  }
}","void rootCellRemoved(SpatialCellImpl rootCell){
  if (rootCell == viewCell) {
    revalidateSpaces();
    return;
  }
  viewCell.acquireRootReadLock();
  try {
synchronized (pendingCacheUpdates) {
      logger.fine(""String_Node_Str"");
      pendingCacheUpdates.add(new CacheUpdate(rootCell,null,false));
    }
  }
  finally {
    viewCell.releaseRootReadLock();
  }
}"
45777,"/** 
 * Creates new form ImportSessionFrame 
 */
public ImportSessionFrame(){
  initComponents();
  tableModel=(DefaultTableModel)importTable.getModel();
  importTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
  importTable.getSelectionModel().addListSelectionListener(new ListSelectionListener(){
    public void valueChanged(    ListSelectionEvent e){
      if (e.getValueIsAdjusting()) {
        return;
      }
      int row=importTable.getSelectedRow();
      boolean validSelection=(row >= 0);
      editB.setEnabled(validSelection);
      removeB.setEnabled(validSelection);
    }
  }
);
  importTable.getModel().addTableModelListener(new TableModelListener(){
    public void tableChanged(    TableModelEvent tme){
      boolean models=importTable.getModel().getRowCount() > 0;
    }
  }
);
  try {
    File lastModelFile=getLastModelFile();
    if (lastModelFile.exists()) {
      DataInputStream in=new DataInputStream(new FileInputStream(lastModelFile));
      String str;
      if (in.readBoolean()) {
        str=in.readUTF();
        lastModelDir=new File(str);
      }
 else {
        lastModelDir=null;
      }
      if (in.readBoolean()) {
        str=in.readUTF();
        compiledDir=new File(str);
      }
 else {
        compiledDir=null;
      }
      in.close();
    }
  }
 catch (  Exception ex) {
    lastModelDir=null;
    LOGGER.log(Level.INFO,null,ex);
  }
  Collection<ServerSessionManager> servers=LoginManager.getAll();
  for (  ServerSessionManager server : servers) {
    targetServerSelector.addItem(server);
  }
  importFrame=new ModelImporterFrame(this,lastModelDir);
}","/** 
 * Creates new form ImportSessionFrame 
 */
public ImportSessionFrame(){
  initComponents();
  tableModel=(DefaultTableModel)importTable.getModel();
  tableModel.setColumnIdentifiers(new Object[]{BUNDLE.getString(""String_Node_Str""),BUNDLE.getString(""String_Node_Str"")});
  importTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
  importTable.getSelectionModel().addListSelectionListener(new ListSelectionListener(){
    public void valueChanged(    ListSelectionEvent e){
      if (e.getValueIsAdjusting()) {
        return;
      }
      int row=importTable.getSelectedRow();
      boolean validSelection=(row >= 0);
      editB.setEnabled(validSelection);
      removeB.setEnabled(validSelection);
    }
  }
);
  importTable.getModel().addTableModelListener(new TableModelListener(){
    public void tableChanged(    TableModelEvent tme){
      boolean models=importTable.getModel().getRowCount() > 0;
    }
  }
);
  try {
    File lastModelFile=getLastModelFile();
    if (lastModelFile.exists()) {
      DataInputStream in=new DataInputStream(new FileInputStream(lastModelFile));
      String str;
      if (in.readBoolean()) {
        str=in.readUTF();
        lastModelDir=new File(str);
      }
 else {
        lastModelDir=null;
      }
      if (in.readBoolean()) {
        str=in.readUTF();
        compiledDir=new File(str);
      }
 else {
        compiledDir=null;
      }
      in.close();
    }
  }
 catch (  Exception ex) {
    lastModelDir=null;
    LOGGER.log(Level.INFO,null,ex);
  }
  Collection<ServerSessionManager> servers=LoginManager.getAll();
  for (  ServerSessionManager server : servers) {
    targetServerSelector.addItem(server);
  }
  importFrame=new ModelImporterFrame(this,lastModelDir);
}"
45778,"/** 
 * Loads the configuration (the set of available presets) from a URL that points to an XML configuration file.
 * @param configURL The URL of an XML configuration file
 */
protected void loadConfig(URL configURL){
  allElements.clear();
  Comparator comparator=new Comparator(){
    public int compare(    Object o1,    Object o2){
      ConfigElement c1=(ConfigElement)o1;
      ConfigElement c2=(ConfigElement)o2;
      return c1.getDescription().compareTo(c2.getDescription());
    }
  }
;
  try {
    ConfigList config=ConfigList.decode(configURL.openStream());
    allElements.put(ConfigType.GENDER,Arrays.asList((ConfigElement[])config.getGenders()));
    List<ConfigElement> headList=Arrays.asList((ConfigElement[])config.getHeads());
    Collections.sort(headList,comparator);
    allElements.put(ConfigType.HEAD,headList);
    List<ConfigElement> hairList=Arrays.asList((ConfigElement[])config.getHair());
    Collections.sort(hairList,comparator);
    allElements.put(ConfigType.HAIR,hairList);
    List<ConfigElement> torsoList=Arrays.asList((ConfigElement[])config.getTorsos());
    Collections.sort(torsoList,comparator);
    allElements.put(ConfigType.TORSO,torsoList);
    List<ConfigElement> jacketList=Arrays.asList((ConfigElement[])config.getJackets());
    Collections.sort(jacketList,comparator);
    allElements.put(ConfigType.JACKET,jacketList);
    List<ConfigElement> handsList=Arrays.asList((ConfigElement[])config.getHands());
    Collections.sort(handsList,comparator);
    allElements.put(ConfigType.HANDS,handsList);
    List<ConfigElement> legsList=Arrays.asList((ConfigElement[])config.getLegs());
    Collections.sort(legsList,comparator);
    allElements.put(ConfigType.LEGS,legsList);
    List<ConfigElement> feetList=Arrays.asList((ConfigElement[])config.getFeet());
    Collections.sort(feetList,comparator);
    allElements.put(ConfigType.FEET,feetList);
    for (    ConfigType type : ConfigType.values()) {
      List<ConfigElement> el=getElements(type);
      if (el.size() > 0) {
        setElement(type,0);
      }
    }
  }
 catch (  IOException ioe) {
    logger.log(Level.WARNING,""String_Node_Str"" + configURL,ioe);
  }
}","/** 
 * Loads the configuration (the set of available presets) from a URL that points to an XML configuration file.
 * @param configURL The URL of an XML configuration file
 */
protected void loadConfig(URL configURL){
  allElements.clear();
  Comparator comparator=new Comparator(){
    public int compare(    Object o1,    Object o2){
      ConfigElement c1=(ConfigElement)o1;
      ConfigElement c2=(ConfigElement)o2;
      return c1.getDescription().compareTo(c2.getDescription());
    }
  }
;
  ConfigList config=null;
  try {
    config=ConfigList.decode(configURL.openStream());
  }
 catch (  IOException ioe) {
    logger.log(Level.WARNING,""String_Node_Str"" + configURL,ioe);
    return;
  }
  allElements.put(ConfigType.GENDER,Arrays.asList((ConfigElement[])config.getGenders()));
  List<ConfigElement> headList=Arrays.asList((ConfigElement[])config.getHeads());
  Collections.sort(headList,comparator);
  allElements.put(ConfigType.HEAD,headList);
  List<ConfigElement> hairList=Arrays.asList((ConfigElement[])config.getHair());
  Collections.sort(hairList,comparator);
  allElements.put(ConfigType.HAIR,hairList);
  List<ConfigElement> torsoList=Arrays.asList((ConfigElement[])config.getTorsos());
  Collections.sort(torsoList,comparator);
  allElements.put(ConfigType.TORSO,torsoList);
  List<ConfigElement> jacketList=Arrays.asList((ConfigElement[])config.getJackets());
  Collections.sort(jacketList,comparator);
  allElements.put(ConfigType.JACKET,jacketList);
  List<ConfigElement> handsList=Arrays.asList((ConfigElement[])config.getHands());
  Collections.sort(handsList,comparator);
  allElements.put(ConfigType.HANDS,handsList);
  List<ConfigElement> legsList=Arrays.asList((ConfigElement[])config.getLegs());
  Collections.sort(legsList,comparator);
  allElements.put(ConfigType.LEGS,legsList);
  List<ConfigElement> feetList=Arrays.asList((ConfigElement[])config.getFeet());
  Collections.sort(feetList,comparator);
  allElements.put(ConfigType.FEET,feetList);
  for (  ConfigType type : ConfigType.values()) {
    List<ConfigElement> el=getElements(type);
    if (el.size() > 0) {
      setElement(type,0);
    }
  }
}"
45779,"public static WonderlandCharacterParams loadFemale() throws IOException {
  URL femaleURL=WonderlandCharacterParams.class.getResource(FEMALE_CONFIGS);
  return new WonderlandCharacterParams(femaleURL);
}","public static WonderlandCharacterParams loadFemale() throws IOException {
  URL femaleURL=WonderlandCharacterParams.class.getResource(FEMALE_CONFIGS);
  WonderlandCharacterParams params=new WonderlandCharacterParams(femaleURL);
  for (  ConfigType type : DEFAULT_FEMALE_PRESETS.keySet()) {
    params.setElementPreset(type,DEFAULT_FEMALE_PRESETS.get(type));
  }
  return params;
}"
45780,"public static WonderlandCharacterParams loadMale() throws IOException {
  URL maleURL=WonderlandCharacterParams.class.getResource(MALE_CONFIGS);
  return new WonderlandCharacterParams(maleURL);
}","public static WonderlandCharacterParams loadMale() throws IOException {
  URL maleURL=WonderlandCharacterParams.class.getResource(MALE_CONFIGS);
  WonderlandCharacterParams params=new WonderlandCharacterParams(maleURL);
  for (  ConfigType type : DEFAULT_MALE_PRESETS.keySet()) {
    params.setElementPreset(type,DEFAULT_MALE_PRESETS.get(type));
  }
  return params;
}"
45781,"/** 
 * Updates the GUI items in this panel for the currently selected cell. If there is nothing selected, do nothing. NOTE: This method assumes it is being called in the AWT Event Thread.
 */
public void updateGUI(){
  positionHUDPanel.updateGUI();
  Cell cell=getSelectedCell();
  if (cell == null) {
    translateToggleButton.setSelected(false);
    translateToggleButton.setEnabled(false);
    rotateToggleButton.setSelected(false);
    rotateToggleButton.setEnabled(false);
    resizeToggleButton.setSelected(false);
    resizeToggleButton.setEnabled(false);
    sizeSlider.setValue(50);
    sizeSlider.setEnabled(false);
    return;
  }
  translateToggleButton.setEnabled(true);
  rotateToggleButton.setEnabled(true);
  resizeToggleButton.setEnabled(true);
  sizeSlider.setEnabled(true);
  CellComponent component=cell.getComponent(TranslateAffordanceCellComponent.class);
  translateToggleButton.setSelected(component != null);
  translateToggleButton.repaint();
  if (component != null) {
    float size=((AffordanceCellComponent)component).getSize();
    sizeSlider.setValue((int)((size - 1.0f) * 100.0f));
  }
 else {
    sizeSlider.setValue(50);
  }
  component=cell.getComponent(RotateAffordanceCellComponent.class);
  rotateToggleButton.setSelected(component != null);
  rotateToggleButton.repaint();
  component=cell.getComponent(ResizeAffordanceCellComponent.class);
  resizeToggleButton.setSelected(component != null);
  resizeToggleButton.repaint();
}","/** 
 * Updates the GUI items in this panel for the currently selected cell. If there is nothing selected, do nothing. NOTE: This method assumes it is being called in the AWT Event Thread.
 */
public void updateGUI(){
  positionHUDPanel.updateGUI();
  Cell cell=getSelectedCell();
  if (cell == null) {
    affordanceHUD.setName(BUNDLE.getString(""String_Node_Str""));
    translateToggleButton.setSelected(false);
    translateToggleButton.setEnabled(false);
    rotateToggleButton.setSelected(false);
    rotateToggleButton.setEnabled(false);
    resizeToggleButton.setSelected(false);
    resizeToggleButton.setEnabled(false);
    sizeSlider.setValue(50);
    sizeSlider.setEnabled(false);
    return;
  }
  String name=BUNDLE.getString(""String_Node_Str"");
  name=MessageFormat.format(name,cell.getName());
  affordanceHUD.setName(name);
  Logger.getLogger(AffordanceHUDPanel.class.getName()).warning(""String_Node_Str"" + name);
  translateToggleButton.setEnabled(true);
  rotateToggleButton.setEnabled(true);
  resizeToggleButton.setEnabled(true);
  sizeSlider.setEnabled(true);
  CellComponent component=cell.getComponent(TranslateAffordanceCellComponent.class);
  translateToggleButton.setSelected(component != null);
  translateToggleButton.repaint();
  if (component != null) {
    float size=((AffordanceCellComponent)component).getSize();
    sizeSlider.setValue((int)((size - 1.0f) * 100.0f));
  }
 else {
    sizeSlider.setValue(50);
  }
  component=cell.getComponent(RotateAffordanceCellComponent.class);
  rotateToggleButton.setSelected(component != null);
  rotateToggleButton.repaint();
  component=cell.getComponent(ResizeAffordanceCellComponent.class);
  resizeToggleButton.setSelected(component != null);
  resizeToggleButton.repaint();
}"
45782,"/** 
 * Manually set whether the translation affordance is visible (true) or not (false).
 * @param visible True if the translation affordance should be visible
 */
public void setTranslationVisible(boolean visible){
  Cell cell=getSelectedCell();
  if (cell == null) {
    return;
  }
  if (translateToggleButton.isSelected() != visible) {
    translateToggleButton.setSelected(visible);
  }
  CellComponent component=cell.getComponent(TranslateAffordanceCellComponent.class);
  if (visible) {
    if (component == null) {
      component=new TranslateAffordanceCellComponent(cell);
      cell.addComponent(component);
    }
    ((AffordanceCellComponent)component).setSize(getSliderSize());
  }
 else {
    if (component != null) {
      ((AffordanceCellComponent)component).remove();
    }
  }
}","/** 
 * Manually set whether the translation affordance is visible (true) or not (false).
 * @param visible True if the translation affordance should be visible
 */
public void setTranslationVisible(boolean visible){
  Cell cell=getSelectedCell();
  if (cell == null) {
    return;
  }
  if (translateToggleButton.isSelected() != visible) {
    translateToggleButton.setSelected(visible);
  }
  CellComponent component=cell.getComponent(TranslateAffordanceCellComponent.class);
  if (visible == true) {
    if (component == null) {
      component=new TranslateAffordanceCellComponent(cell);
      cell.addComponent(component);
    }
    ((AffordanceCellComponent)component).setSize(getSliderSize());
  }
 else {
    if (component != null) {
      ((AffordanceCellComponent)component).remove();
    }
  }
}"
45783,"/** 
 * Manually set whether the rotation affordance is visible (true) or not (false).
 * @param visible True if the rotation affordance should be visible
 */
public void setRotationVisible(boolean visible){
  Cell cell=getSelectedCell();
  if (cell == null) {
    return;
  }
  if (rotateToggleButton.isSelected() != visible) {
    rotateToggleButton.setSelected(visible);
  }
  CellComponent component=cell.getComponent(RotateAffordanceCellComponent.class);
  if (visible) {
    if (component == null) {
      component=new RotateAffordanceCellComponent(cell);
      cell.addComponent(component);
    }
    ((AffordanceCellComponent)component).setSize(getSliderSize());
  }
 else {
    if (component != null) {
      ((AffordanceCellComponent)component).remove();
    }
  }
}","/** 
 * Manually set whether the rotation affordance is visible (true) or not (false).
 * @param visible True if the rotation affordance should be visible
 */
public void setRotationVisible(boolean visible){
  Cell cell=getSelectedCell();
  if (cell == null) {
    return;
  }
  if (rotateToggleButton.isSelected() != visible) {
    rotateToggleButton.setSelected(visible);
  }
  CellComponent component=cell.getComponent(RotateAffordanceCellComponent.class);
  if (visible == true) {
    if (component == null) {
      component=new RotateAffordanceCellComponent(cell);
      cell.addComponent(component);
    }
    ((AffordanceCellComponent)component).setSize(getSliderSize());
  }
 else {
    if (component != null) {
      ((AffordanceCellComponent)component).remove();
    }
  }
}"
45784,"/** 
 * Creates new form AffordanceHUDPanel 
 */
public AffordanceHUDPanel(){
  initComponents();
  Dictionary<Integer,JComponent> labels=new Hashtable<Integer,JComponent>();
  labels.put(0,new JLabel(""String_Node_Str""));
  labels.put(100,new JLabel(""String_Node_Str""));
  labels.put(200,new JLabel(""String_Node_Str""));
  labels.put(300,new JLabel(""String_Node_Str""));
  labels.put(400,new JLabel(""String_Node_Str""));
  sizeSlider.setLabelTable(labels);
  HUD mainHUD=HUDManagerFactory.getHUDManager().getHUD(""String_Node_Str"");
  positionHUDPanel=new PositionHUDPanel();
  positionHUD=mainHUD.createComponent(positionHUDPanel);
  positionHUD.setName(""String_Node_Str"");
  positionHUD.setPreferredLocation(Layout.SOUTHEAST);
  mainHUD.addComponent(positionHUD);
  InputManager.inputManager().addGlobalEventListener(new SelectionListener());
}","/** 
 * Creates new form AffordanceHUDPanel 
 */
public AffordanceHUDPanel(){
  initComponents();
  Hashtable<Integer,JComponent> labels=new Hashtable<Integer,JComponent>();
  labels.put(0,new JLabel(""String_Node_Str""));
  labels.put(100,new JLabel(""String_Node_Str""));
  labels.put(200,new JLabel(""String_Node_Str""));
  labels.put(300,new JLabel(""String_Node_Str""));
  labels.put(400,new JLabel(""String_Node_Str""));
  sizeSlider.setLabelTable(labels);
  HUD mainHUD=HUDManagerFactory.getHUDManager().getHUD(""String_Node_Str"");
  positionHUDPanel=new PositionHUDPanel();
  positionHUD=mainHUD.createComponent(positionHUDPanel);
  positionHUD.setName(""String_Node_Str"");
  positionHUD.setPreferredLocation(Layout.SOUTHEAST);
  mainHUD.addComponent(positionHUD);
  InputManager.inputManager().addGlobalEventListener(new SelectionListener());
}"
45785,"/** 
 * Manually set whether the resizing affordance is visible (true) or not (false).
 * @param visible True if the resizing affordance should be visible
 */
public void setResizingVisible(boolean visible){
  Cell cell=getSelectedCell();
  if (cell == null) {
    return;
  }
  if (resizeToggleButton.isSelected() != visible) {
    resizeToggleButton.setSelected(visible);
  }
  CellComponent component=cell.getComponent(ResizeAffordanceCellComponent.class);
  if (visible) {
    if (component == null) {
      component=new ResizeAffordanceCellComponent(cell);
      cell.addComponent(component);
    }
    ((AffordanceCellComponent)component).setSize(getSliderSize());
  }
 else {
    if (component != null) {
      ((AffordanceCellComponent)component).remove();
    }
  }
}","/** 
 * Manually set whether the resizing affordance is visible (true) or not (false).
 * @param visible True if the resizing affordance should be visible
 */
public void setResizingVisible(boolean visible){
  Cell cell=getSelectedCell();
  if (cell == null) {
    return;
  }
  if (resizeToggleButton.isSelected() != visible) {
    resizeToggleButton.setSelected(visible);
  }
  CellComponent component=cell.getComponent(ResizeAffordanceCellComponent.class);
  if (visible == true) {
    if (component == null) {
      component=new ResizeAffordanceCellComponent(cell);
      cell.addComponent(component);
    }
    ((AffordanceCellComponent)component).setSize(getSliderSize());
  }
 else {
    if (component != null) {
      ((AffordanceCellComponent)component).remove();
    }
  }
}"
45786,"/** 
 * Creates the affordance HUD frame. NOTE: This method should NOT be called on the AWT Event Thread.
 */
private void createHUD(){
  HUD mainHUD=HUDManagerFactory.getHUDManager().getHUD(""String_Node_Str"");
  affordanceHUDPanel=new AffordanceHUDPanel();
  affordanceHUD=mainHUD.createComponent(affordanceHUDPanel);
  affordanceHUD.setName(""String_Node_Str"");
  affordanceHUD.setPreferredLocation(Layout.SOUTH);
  affordanceHUD.addEventListener(new HUDEventListener(){
    public void HUDObjectChanged(    HUDEvent event){
      if (event.getEventType() == HUDEventType.CLOSED) {
        affordanceHUDPanel.closed();
        InputManager.inputManager().postEvent(new AffordanceRemoveEvent());
      }
    }
  }
);
  mainHUD.addComponent(affordanceHUD);
}","/** 
 * Creates the affordance HUD frame. NOTE: This method should NOT be called on the AWT Event Thread.
 */
private void createHUD(){
  HUD mainHUD=HUDManagerFactory.getHUDManager().getHUD(""String_Node_Str"");
  affordanceHUDPanel=new AffordanceHUDPanel();
  affordanceHUD=mainHUD.createComponent(affordanceHUDPanel);
  affordanceHUDPanel.setHUDComponent(affordanceHUD);
  affordanceHUD.setName(BUNDLE.getString(""String_Node_Str""));
  affordanceHUD.setPreferredLocation(Layout.SOUTH);
  affordanceHUD.addEventListener(new HUDEventListener(){
    public void HUDObjectChanged(    HUDEvent event){
      if (event.getEventType() == HUDEventType.CLOSED) {
        affordanceHUDPanel.closed();
        InputManager.inputManager().postEvent(new AffordanceRemoveEvent());
      }
    }
  }
);
  mainHUD.addComponent(affordanceHUD);
}"
45787,"@Override public String importFile(File file,String extension){
  final JFrame frame=JmeClientMain.getFrame().getFrame();
  int result=JOptionPane.YES_OPTION;
  ContentResource resource=isContentExists(file);
  if (resource != null) {
    Object[] options={""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
    String msg=""String_Node_Str"" + file.getName() + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
    String title=""String_Node_Str"";
    result=JOptionPane.showOptionDialog(frame,msg,title,JOptionPane.YES_NO_CANCEL_OPTION,JOptionPane.QUESTION_MESSAGE,null,options,options[0]);
    if (result == JOptionPane.CANCEL_OPTION || result == JOptionPane.CLOSED_OPTION) {
      return null;
    }
  }
  if (result == JOptionPane.NO_OPTION) {
    URL url=null;
    try {
      url=resource.getURL();
      LoaderManager manager=LoaderManager.getLoaderManager();
      DeployedModel dm=manager.getLoaderFromDeployment(url);
      createCell(dm);
      return dm.getModelURL();
    }
 catch (    java.lang.Exception excp) {
      logger.log(Level.WARNING,""String_Node_Str"" + url,excp);
      JOptionPane.showMessageDialog(frame,""String_Node_Str"" + file.getAbsolutePath(),""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
      return null;
    }
  }
  JOptionPane waitMsg=new JOptionPane(""String_Node_Str"" + file.getName() + ""String_Node_Str"");
  final JDialog dialog=waitMsg.createDialog(frame,""String_Node_Str"");
  SwingUtilities.invokeLater(new Runnable(){
    public void run(){
      dialog.setVisible(true);
    }
  }
);
  DeployedModel deployedModel;
  try {
    deployedModel=modelUploadContent(file);
  }
 catch (  java.io.IOException excp) {
    logger.log(Level.WARNING,""String_Node_Str"" + file.getAbsolutePath(),excp);
    final String fileName=file.getName();
    SwingUtilities.invokeLater(new Runnable(){
      public void run(){
        dialog.setVisible(false);
        JOptionPane.showMessageDialog(frame,""String_Node_Str"" + fileName,""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
      }
    }
);
    return null;
  }
 finally {
    SwingUtilities.invokeLater(new Runnable(){
      public void run(){
        dialog.setVisible(false);
      }
    }
);
  }
  createCell(deployedModel);
  return deployedModel.getModelURL();
}","@Override public String importFile(File file,String extension){
  final JFrame frame=JmeClientMain.getFrame().getFrame();
  int result=JOptionPane.YES_OPTION;
  ContentResource resource=isContentExists(file);
  if (resource != null) {
    Object[] options={""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
    String msg=""String_Node_Str"" + file.getName() + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
    String title=""String_Node_Str"";
    result=JOptionPane.showOptionDialog(frame,msg,title,JOptionPane.YES_NO_CANCEL_OPTION,JOptionPane.QUESTION_MESSAGE,null,options,options[0]);
    if (result == JOptionPane.CANCEL_OPTION || result == JOptionPane.CLOSED_OPTION) {
      return null;
    }
  }
  if (result == JOptionPane.NO_OPTION) {
    URL url=null;
    try {
      JOptionPane.showMessageDialog(frame,""String_Node_Str"");
      return null;
    }
 catch (    java.lang.Exception excp) {
      logger.log(Level.WARNING,""String_Node_Str"" + url,excp);
      JOptionPane.showMessageDialog(frame,""String_Node_Str"" + file.getAbsolutePath(),""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
      return null;
    }
  }
  JOptionPane waitMsg=new JOptionPane(""String_Node_Str"" + file.getName() + ""String_Node_Str"");
  final JDialog dialog=waitMsg.createDialog(frame,""String_Node_Str"");
  SwingUtilities.invokeLater(new Runnable(){
    public void run(){
      dialog.setVisible(true);
    }
  }
);
  DeployedModel deployedModel;
  try {
    deployedModel=modelUploadContent(file);
  }
 catch (  java.io.IOException excp) {
    logger.log(Level.WARNING,""String_Node_Str"" + file.getAbsolutePath(),excp);
    final String fileName=file.getName();
    SwingUtilities.invokeLater(new Runnable(){
      public void run(){
        dialog.setVisible(false);
        JOptionPane.showMessageDialog(frame,""String_Node_Str"" + fileName,""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
      }
    }
);
    return null;
  }
 finally {
    SwingUtilities.invokeLater(new Runnable(){
      public void run(){
        dialog.setVisible(false);
      }
    }
);
  }
  createCell(deployedModel);
  return deployedModel.getModelURL();
}"
45788,"public void createCell(DeployedModel deployedModel){
  CellServerState state=deployedModel.getCellServerState();
  PositionComponentServerState pcss=(PositionComponentServerState)state.getComponentServerState(PositionComponentServerState.class);
  BoundingVolume boundsHint=null;
  if (pcss != null) {
    Bounds bounds=pcss.getBounds();
    if (bounds.type == Bounds.BoundsType.BOX) {
      boundsHint=new BoundingBox(Vector3f.ZERO,(float)bounds.x,(float)bounds.y,(float)bounds.z);
    }
 else {
      boundsHint=new BoundingSphere((float)bounds.x,Vector3f.ZERO);
    }
  }
  BoundingVolumeHint hint=new BoundingVolumeHint(true,boundsHint);
  state.setBoundingVolumeHint(hint);
  try {
    CellUtils.createCell(state);
  }
 catch (  CellCreationException excp) {
    logger.log(Level.WARNING,""String_Node_Str"" + deployedModel.getModelURL(),excp);
  }
}","public void createCell(DeployedModel deployedModel){
  CellServerState state=deployedModel.getCellServerState();
  PositionComponentServerState pcss=(PositionComponentServerState)state.getComponentServerState(PositionComponentServerState.class);
  BoundingVolume boundsHint=null;
  if (pcss != null) {
    Bounds bounds=pcss.getBounds();
    if (bounds.type == Bounds.BoundsType.BOX) {
      boundsHint=new BoundingBox(Vector3f.ZERO,(float)bounds.x,(float)bounds.y,(float)bounds.z);
    }
 else {
      if (bounds.x > 20)       boundsHint=new BoundingSphere(1f,Vector3f.ZERO);
 else       boundsHint=new BoundingSphere((float)bounds.x,Vector3f.ZERO);
    }
  }
  BoundingVolumeHint hint=new BoundingVolumeHint(true,boundsHint);
  state.setBoundingVolumeHint(hint);
  try {
    CellUtils.createCell(state);
  }
 catch (  CellCreationException excp) {
    logger.log(Level.WARNING,""String_Node_Str"" + deployedModel.getModelURL(),excp);
  }
}"
45789,"/** 
 * {@inheritDoc}
 */
public WlAvatarCharacter getAvatarCharacter(Cell avatarCell,String userName,AvatarConfigInfo info){
  WorldManager wm=ClientContextJME.getWorldManager();
  CharacterParams attributes=new MaleAvatarParams(userName);
  String avatarURL=DEFAULT_URL;
  if (info != null && info.getAvatarConfigURL() != null) {
    avatarURL=info.getAvatarConfigURL();
  }
  String baseURL=null;
  try {
    URL tmpURL=AssetUtils.getAssetURL(BASE_URL,avatarCell);
    baseURL=tmpURL.toExternalForm();
  }
 catch (  MalformedURLException ex) {
    logger.log(Level.WARNING,""String_Node_Str"",ex);
    return null;
  }
  PScene simpleScene=new PScene(ClientContextJME.getWorldManager());
  simpleScene.addMeshInstance(new PPolygonMesh(""String_Node_Str""),new PMatrix());
  attributes.setUseSimpleStaticModel(true,simpleScene);
  attributes.setBaseURL(baseURL);
  attributes.setAnimateBody(false);
  attributes.setAnimateFace(false);
  WlAvatarCharacter avatar=new WlAvatarCharacter.WlAvatarCharacterBuilder(attributes,wm).addEntity(false).build();
  Spatial spatial=null;
  try {
    URL url=new URL(baseURL + avatarURL);
    DeployedModel dm=LoaderManager.getLoaderManager().getLoaderFromDeployment(url);
    spatial=dm.getModelLoader().loadDeployedModel(dm);
    spatial.setLocalScale(0.053f);
    spatial.setLocalTranslation(0.0f,1.7f,0.0f);
  }
 catch (  MalformedURLException excp) {
    logger.log(Level.WARNING,""String_Node_Str"",excp);
    return null;
  }
catch (  IOException excp) {
    logger.log(Level.WARNING,""String_Node_Str"",excp);
    return null;
  }
  avatar.getJScene().getExternalKidsRoot().attachChild(spatial);
  avatar.getJScene().setExternalKidsChanged(true);
  return avatar;
}","/** 
 * {@inheritDoc}
 */
public WlAvatarCharacter getAvatarCharacter(Cell avatarCell,String userName,AvatarConfigInfo info){
  WorldManager wm=ClientContextJME.getWorldManager();
  CharacterParams attributes=new MaleAvatarParams(userName);
  String avatarURL=DEFAULT_URL;
  if (info != null && info.getAvatarConfigURL() != null) {
    avatarURL=info.getAvatarConfigURL();
  }
  String baseURL=null;
  try {
    URL tmpURL=AssetUtils.getAssetURL(BASE_URL,avatarCell);
    baseURL=tmpURL.toExternalForm();
  }
 catch (  MalformedURLException ex) {
    logger.log(Level.WARNING,""String_Node_Str"",ex);
    return null;
  }
  PScene simpleScene=new PScene(ClientContextJME.getWorldManager());
  simpleScene.addMeshInstance(new PPolygonMesh(""String_Node_Str""),new PMatrix());
  attributes.setUseSimpleStaticModel(true,simpleScene);
  attributes.setBaseURL(baseURL);
  attributes.setAnimateBody(false);
  attributes.setAnimateFace(false);
  WlAvatarCharacter avatar=new WlAvatarCharacter.WlAvatarCharacterBuilder(attributes,wm).addEntity(false).build();
  Spatial spatial=null;
  try {
    URL url=new URL(baseURL + avatarURL);
    DeployedModel dm=LoaderManager.getLoaderManager().getLoaderFromDeployment(url);
    spatial=dm.getModelLoader().loadDeployedModel(dm);
    spatial.setLocalScale(0.22f);
  }
 catch (  MalformedURLException excp) {
    logger.log(Level.WARNING,""String_Node_Str"",excp);
    return null;
  }
catch (  IOException excp) {
    logger.log(Level.WARNING,""String_Node_Str"",excp);
    return null;
  }
  avatar.getJScene().getExternalKidsRoot().attachChild(spatial);
  avatar.getJScene().setExternalKidsChanged(true);
  return avatar;
}"
45790,"protected void loadConfig(URL configURL){
  allElements.clear();
  try {
    ConfigList config=ConfigList.decode(configURL.openStream());
    allElements.put(ConfigType.GENDER,Arrays.asList((ConfigElement[])config.getGenders()));
    allElements.put(ConfigType.HEAD,Arrays.asList((ConfigElement[])config.getHeads()));
    allElements.put(ConfigType.HAIR,Arrays.asList((ConfigElement[])config.getHair()));
    allElements.put(ConfigType.TORSO,Arrays.asList((ConfigElement[])config.getTorsos()));
    allElements.put(ConfigType.JACKET,Arrays.asList((ConfigElement[])config.getJackets()));
    allElements.put(ConfigType.HANDS,Arrays.asList((ConfigElement[])config.getHands()));
    allElements.put(ConfigType.LEGS,Arrays.asList((ConfigElement[])config.getLegs()));
    allElements.put(ConfigType.FEET,Arrays.asList((ConfigElement[])config.getFeet()));
    for (    ConfigType type : ConfigType.values()) {
      List<ConfigElement> el=getElements(type);
      if (el.size() > 0) {
        setElement(type,0);
      }
    }
  }
 catch (  IOException ioe) {
    logger.log(Level.WARNING,""String_Node_Str"" + configURL,ioe);
  }
}","/** 
 * Loads the configuration (the set of available presets) from a URL that points to an XML configuration file.
 * @param configURL The URL of an XML configuration file
 */
protected void loadConfig(URL configURL){
  allElements.clear();
  Comparator comparator=new Comparator(){
    public int compare(    Object o1,    Object o2){
      ConfigElement c1=(ConfigElement)o1;
      ConfigElement c2=(ConfigElement)o2;
      return c1.getDescription().compareTo(c2.getDescription());
    }
  }
;
  try {
    ConfigList config=ConfigList.decode(configURL.openStream());
    allElements.put(ConfigType.GENDER,Arrays.asList((ConfigElement[])config.getGenders()));
    List<ConfigElement> headList=Arrays.asList((ConfigElement[])config.getHeads());
    Collections.sort(headList,comparator);
    allElements.put(ConfigType.HEAD,headList);
    List<ConfigElement> hairList=Arrays.asList((ConfigElement[])config.getHair());
    Collections.sort(hairList,comparator);
    allElements.put(ConfigType.HAIR,hairList);
    List<ConfigElement> torsoList=Arrays.asList((ConfigElement[])config.getTorsos());
    Collections.sort(torsoList,comparator);
    allElements.put(ConfigType.TORSO,torsoList);
    List<ConfigElement> jacketList=Arrays.asList((ConfigElement[])config.getJackets());
    Collections.sort(jacketList,comparator);
    allElements.put(ConfigType.JACKET,jacketList);
    List<ConfigElement> handsList=Arrays.asList((ConfigElement[])config.getHands());
    Collections.sort(handsList,comparator);
    allElements.put(ConfigType.HANDS,handsList);
    List<ConfigElement> legsList=Arrays.asList((ConfigElement[])config.getLegs());
    Collections.sort(legsList,comparator);
    allElements.put(ConfigType.LEGS,legsList);
    List<ConfigElement> feetList=Arrays.asList((ConfigElement[])config.getFeet());
    Collections.sort(feetList,comparator);
    allElements.put(ConfigType.FEET,feetList);
    for (    ConfigType type : ConfigType.values()) {
      List<ConfigElement> el=getElements(type);
      if (el.size() > 0) {
        setElement(type,0);
      }
    }
  }
 catch (  IOException ioe) {
    logger.log(Level.WARNING,""String_Node_Str"" + configURL,ioe);
  }
}"
45791,"@Override public int hashCode(){
  int hash=7;
  hash=31 * hash + (this.name != null ? this.name.hashCode() : 0);
  return hash;
}","/** 
 * {@inheritDoc}
 */
@Override public int hashCode(){
  int hash=7;
  hash=31 * hash + (this.name != null ? this.name.hashCode() : 0);
  return hash;
}"
45792,"/** 
 */
public void restore(){
  Cell cell=editor.getCell();
  if (movableComponent == null) {
    logger.warning(""String_Node_Str"" + cell.getName());
    return;
  }
  CellTransform transform=cell.getLocalTransform();
  transform.setTranslation(originalTranslation);
  transform.setScaling(originalScaling.x);
  transform.setRotation(originalRotation);
  movableComponent.localMoveRequest(transform);
}","/** 
 */
public void restore(){
  Cell cell=editor.getCell();
  if (movableComponent == null) {
    logger.warning(""String_Node_Str"" + cell.getName());
    return;
  }
  if (isLocalChangesMade == true) {
    CellTransform transform=cell.getLocalTransform();
    transform.setTranslation(originalTranslation);
    transform.setScaling(originalScaling.x);
    transform.setRotation(originalRotation);
    movableComponent.localMoveRequest(transform);
  }
}"
45793,"public void stateChanged(ChangeEvent e){
  if (setLocal == false) {
    updateScale();
  }
}","public void stateChanged(ChangeEvent e){
  if (setLocal == false) {
    isLocalChangesMade=true;
    updateScale();
  }
}"
45794,"/** 
 * Default constructor, creates the GUI and sets up the JSpinners with the proper model and editor.
 */
public PositionJPanel(){
  initComponents();
  Float value=new Float(0);
  Float min=new Float(Float.NEGATIVE_INFINITY);
  Float max=new Float(Float.POSITIVE_INFINITY);
  Float step=new Float(0.1);
  xTranslationModel=new SpinnerNumberModel(value,min,max,step);
  yTranslationModel=new SpinnerNumberModel(value,min,max,step);
  zTranslationModel=new SpinnerNumberModel(value,min,max,step);
  translationXTF.setModel(xTranslationModel);
  translationYTF.setModel(yTranslationModel);
  translationZTF.setModel(zTranslationModel);
  translationXTF.setEditor(new JSpinner.NumberEditor(translationXTF,""String_Node_Str""));
  translationYTF.setEditor(new JSpinner.NumberEditor(translationYTF,""String_Node_Str""));
  translationZTF.setEditor(new JSpinner.NumberEditor(translationZTF,""String_Node_Str""));
  value=new Float(1);
  min=new Float(0);
  xScaleModel=new SpinnerNumberModel(value,min,max,step);
  yScaleModel=new SpinnerNumberModel(value,min,max,step);
  zScaleModel=new SpinnerNumberModel(value,min,max,step);
  scaleXTF.setModel(xScaleModel);
  scaleXTF.setEditor(new JSpinner.NumberEditor(scaleXTF,""String_Node_Str""));
  value=new Float(0);
  min=new Float(-360);
  max=new Float(360);
  step=new Float(1);
  xRotationModel=new SpinnerNumberModel(value,min,max,step);
  yRotationModel=new SpinnerNumberModel(value,min,max,step);
  zRotationModel=new SpinnerNumberModel(value,min,max,step);
  rotationXTF.setModel(xRotationModel);
  rotationYTF.setModel(yRotationModel);
  rotationZTF.setModel(zRotationModel);
  rotationXTF.setEditor(new JSpinner.NumberEditor(rotationXTF,""String_Node_Str""));
  rotationYTF.setEditor(new JSpinner.NumberEditor(rotationYTF,""String_Node_Str""));
  rotationZTF.setEditor(new JSpinner.NumberEditor(rotationZTF,""String_Node_Str""));
  translationListener=new ChangeListener(){
    public void stateChanged(    ChangeEvent e){
      if (setLocal == false) {
        updateTranslation();
      }
    }
  }
;
  xTranslationModel.addChangeListener(translationListener);
  yTranslationModel.addChangeListener(translationListener);
  zTranslationModel.addChangeListener(translationListener);
  rotationListener=new ChangeListener(){
    public void stateChanged(    ChangeEvent e){
      if (setLocal == false) {
        updateRotation();
      }
    }
  }
;
  xRotationModel.addChangeListener(rotationListener);
  yRotationModel.addChangeListener(rotationListener);
  zRotationModel.addChangeListener(rotationListener);
  scaleListener=new ChangeListener(){
    public void stateChanged(    ChangeEvent e){
      if (setLocal == false) {
        updateScale();
      }
    }
  }
;
  xScaleModel.addChangeListener(scaleListener);
  yScaleModel.addChangeListener(scaleListener);
  zScaleModel.addChangeListener(scaleListener);
  componentListener=new ComponentChangeListener(){
    public void componentChanged(    Cell cell,    ChangeType type,    CellComponent component){
      if (type == ChangeType.ADDED && component instanceof MovableComponent) {
        movableComponent=(MovableComponent)component;
        translationXTF.setEnabled(true);
        translationYTF.setEnabled(true);
        translationZTF.setEnabled(true);
        rotationXTF.setEnabled(true);
        rotationYTF.setEnabled(true);
        rotationZTF.setEnabled(true);
        scaleXTF.setEnabled(true);
      }
    }
  }
;
  transformListener=new TransformChangeListener(){
    public void transformChanged(    Cell cell,    ChangeSource source){
      SwingUtilities.invokeLater(new Runnable(){
        public void run(){
          try {
            setLocalChanges(true);
            updateGUI();
          }
  finally {
            setLocalChanges(false);
          }
        }
      }
);
    }
  }
;
}","/** 
 * Default constructor, creates the GUI and sets up the JSpinners with the proper model and editor.
 */
public PositionJPanel(){
  initComponents();
  Float value=new Float(0);
  Float min=new Float(Float.NEGATIVE_INFINITY);
  Float max=new Float(Float.POSITIVE_INFINITY);
  Float step=new Float(0.1);
  xTranslationModel=new SpinnerNumberModel(value,min,max,step);
  yTranslationModel=new SpinnerNumberModel(value,min,max,step);
  zTranslationModel=new SpinnerNumberModel(value,min,max,step);
  translationXTF.setModel(xTranslationModel);
  translationYTF.setModel(yTranslationModel);
  translationZTF.setModel(zTranslationModel);
  translationXTF.setEditor(new JSpinner.NumberEditor(translationXTF,""String_Node_Str""));
  translationYTF.setEditor(new JSpinner.NumberEditor(translationYTF,""String_Node_Str""));
  translationZTF.setEditor(new JSpinner.NumberEditor(translationZTF,""String_Node_Str""));
  value=new Float(1);
  min=new Float(0);
  xScaleModel=new SpinnerNumberModel(value,min,max,step);
  yScaleModel=new SpinnerNumberModel(value,min,max,step);
  zScaleModel=new SpinnerNumberModel(value,min,max,step);
  scaleXTF.setModel(xScaleModel);
  scaleXTF.setEditor(new JSpinner.NumberEditor(scaleXTF,""String_Node_Str""));
  value=new Float(0);
  min=new Float(-360);
  max=new Float(360);
  step=new Float(1);
  xRotationModel=new SpinnerNumberModel(value,min,max,step);
  yRotationModel=new SpinnerNumberModel(value,min,max,step);
  zRotationModel=new SpinnerNumberModel(value,min,max,step);
  rotationXTF.setModel(xRotationModel);
  rotationYTF.setModel(yRotationModel);
  rotationZTF.setModel(zRotationModel);
  rotationXTF.setEditor(new JSpinner.NumberEditor(rotationXTF,""String_Node_Str""));
  rotationYTF.setEditor(new JSpinner.NumberEditor(rotationYTF,""String_Node_Str""));
  rotationZTF.setEditor(new JSpinner.NumberEditor(rotationZTF,""String_Node_Str""));
  translationListener=new ChangeListener(){
    public void stateChanged(    ChangeEvent e){
      if (setLocal == false) {
        isLocalChangesMade=true;
        updateTranslation();
      }
    }
  }
;
  xTranslationModel.addChangeListener(translationListener);
  yTranslationModel.addChangeListener(translationListener);
  zTranslationModel.addChangeListener(translationListener);
  rotationListener=new ChangeListener(){
    public void stateChanged(    ChangeEvent e){
      if (setLocal == false) {
        isLocalChangesMade=true;
        updateRotation();
      }
    }
  }
;
  xRotationModel.addChangeListener(rotationListener);
  yRotationModel.addChangeListener(rotationListener);
  zRotationModel.addChangeListener(rotationListener);
  scaleListener=new ChangeListener(){
    public void stateChanged(    ChangeEvent e){
      if (setLocal == false) {
        isLocalChangesMade=true;
        updateScale();
      }
    }
  }
;
  xScaleModel.addChangeListener(scaleListener);
  yScaleModel.addChangeListener(scaleListener);
  zScaleModel.addChangeListener(scaleListener);
  componentListener=new ComponentChangeListener(){
    public void componentChanged(    Cell cell,    ChangeType type,    CellComponent component){
      if (type == ChangeType.ADDED && component instanceof MovableComponent) {
        movableComponent=(MovableComponent)component;
        translationXTF.setEnabled(true);
        translationYTF.setEnabled(true);
        translationZTF.setEnabled(true);
        rotationXTF.setEnabled(true);
        rotationYTF.setEnabled(true);
        rotationZTF.setEnabled(true);
        scaleXTF.setEnabled(true);
      }
    }
  }
;
  transformListener=new TransformChangeListener(){
    public void transformChanged(    Cell cell,    ChangeSource source){
      SwingUtilities.invokeLater(new Runnable(){
        public void run(){
          try {
            setLocalChanges(true);
            updateGUI();
          }
  finally {
            setLocalChanges(false);
          }
        }
      }
);
    }
  }
;
}"
45795,"/** 
 */
@Override public Component getTreeCellRendererComponent(JTree tree,Object value,boolean selected,boolean expanded,boolean leaf,int row,boolean hasFocus){
  super.getTreeCellRendererComponent(tree,value,selected,expanded,leaf,row,hasFocus);
  DefaultMutableTreeNode treeNode=(DefaultMutableTreeNode)value;
  if (treeNode == dragOverTreeNode) {
    setBorder(BorderFactory.createLineBorder(Color.BLACK));
  }
 else {
    setBorder(null);
  }
  Object userObject=treeNode.getUserObject();
  if (userObject instanceof Cell) {
    Cell cell=(Cell)treeNode.getUserObject();
    setText(cell.getName());
  }
  return this;
}","/** 
 */
@Override public Component getTreeCellRendererComponent(JTree tree,Object value,boolean selected,boolean expanded,boolean leaf,int row,boolean hasFocus){
  super.getTreeCellRendererComponent(tree,value,selected,expanded,leaf,row,hasFocus);
  DefaultMutableTreeNode treeNode=(DefaultMutableTreeNode)value;
  if (treeNode == dragOverTreeNode) {
    setBorder(BorderFactory.createLineBorder(Color.BLACK));
  }
 else {
    setBorder(null);
  }
  Object userObject=treeNode.getUserObject();
  if (userObject instanceof Cell) {
    Cell cell=(Cell)treeNode.getUserObject();
    setText(cell.getName() + ""String_Node_Str"" + cell.getCellID().toString()+ ""String_Node_Str"");
  }
  return this;
}"
45796,"/** 
 * Applies the values stored in the GUI to the cell. Loops through each of the panels and tells them to apply().
 */
private void applyValues(){
  for (  PropertiesFactorySPI factory : factoryList) {
    Class clazz=factory.getClass();
    if (dirtyPanelSet.contains(clazz) == true) {
      factory.apply();
    }
  }
  CellServerState updateState=stateUpdates.cellServerState;
  if (updateState != null) {
    updateState.removeAllComponentServerStates();
  }
  CellServerStateUpdateMessage msg=new CellServerStateUpdateMessage(selectedCell.getCellID(),updateState,stateUpdates.cellComponentServerStateSet);
  ResponseMessage response=selectedCell.sendCellMessageAndWait(msg);
  if (response instanceof ErrorMessage) {
    ErrorMessage em=(ErrorMessage)response;
    LOGGER.log(Level.WARNING,""String_Node_Str"" + em.getErrorMessage(),em.getErrorCause());
    JOptionPane.showMessageDialog(this,em.getErrorMessage(),""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
  }
  stateUpdates.clear();
  selectedCellServerState=fetchCellServerState();
  if (selectedCellServerState == null) {
    LOGGER.warning(""String_Node_Str"" + selectedCell.getName());
    return;
  }
  dirtyPanelSet.clear();
  applyButton.setEnabled(false);
  restoreButton.setEnabled(false);
  updateGUI();
}","/** 
 * Applies the values stored in the GUI to the cell. Loops through each of the panels and tells them to apply().
 */
private void applyValues(){
  for (  PropertiesFactorySPI factory : factoryList) {
    Class clazz=factory.getClass();
    if (dirtyPanelSet.contains(clazz) == true) {
      factory.apply();
    }
  }
  CellServerState updateState=stateUpdates.cellServerState;
  if (updateState != null) {
    updateState.removeAllComponentServerStates();
  }
  CellServerStateUpdateMessage msg=new CellServerStateUpdateMessage(selectedCell.getCellID(),updateState,stateUpdates.cellComponentServerStateSet);
  ResponseMessage response=selectedCell.sendCellMessageAndWait(msg);
  if (response instanceof ErrorMessage) {
    ErrorMessage em=(ErrorMessage)response;
    LOGGER.log(Level.WARNING,""String_Node_Str"" + em.getErrorMessage(),em.getErrorCause());
    JOptionPane.showMessageDialog(this,em.getErrorMessage(),""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
  }
  stateUpdates.clear();
  selectedCellServerState=fetchCellServerState();
  if (selectedCellServerState == null) {
    LOGGER.warning(""String_Node_Str"" + selectedCell.getName());
    return;
  }
  dirtyPanelSet.clear();
  applyButton.setEnabled(false);
  restoreButton.setEnabled(false);
  updateGUI();
  DefaultMutableTreeNode node=cellNodes.get(selectedCell);
  ((DefaultTreeModel)cellHierarchyTree.getModel()).nodeChanged(node);
}"
45797,"public static WonderlandCharacterParams loadFemale() throws IOException {
  URL femaleURL=WonderlandCharacterParams.class.getResource(FEMALE_CONFIGS);
  WonderlandCharacterParams params=new WonderlandCharacterParams(femaleURL);
  for (  ConfigType type : DEFAULT_FEMALE_PRESETS.keySet()) {
    params.setElementPreset(type,DEFAULT_FEMALE_PRESETS.get(type));
  }
  return params;
}","public static WonderlandCharacterParams loadFemale() throws IOException {
  URL femaleURL=WonderlandCharacterParams.class.getResource(FEMALE_CONFIGS);
  WonderlandCharacterParams params=new WonderlandCharacterParams(femaleURL);
  for (  ConfigType type : DEFAULT_FEMALE_PRESETS.keySet()) {
    params.setElementPreset(type,DEFAULT_FEMALE_PRESETS.get(type));
  }
  for (  ConfigType type : DEFAULT_FEMALE_COLORS.keySet()) {
    params.setElementColor(type,DEFAULT_FEMALE_COLORS.get(type));
  }
  return params;
}"
45798,"public static WonderlandCharacterParams loadMale() throws IOException {
  URL maleURL=WonderlandCharacterParams.class.getResource(MALE_CONFIGS);
  WonderlandCharacterParams params=new WonderlandCharacterParams(maleURL);
  for (  ConfigType type : DEFAULT_MALE_PRESETS.keySet()) {
    params.setElementPreset(type,DEFAULT_MALE_PRESETS.get(type));
  }
  return params;
}","public static WonderlandCharacterParams loadMale() throws IOException {
  URL maleURL=WonderlandCharacterParams.class.getResource(MALE_CONFIGS);
  WonderlandCharacterParams params=new WonderlandCharacterParams(maleURL);
  for (  ConfigType type : DEFAULT_MALE_PRESETS.keySet()) {
    params.setElementPreset(type,DEFAULT_MALE_PRESETS.get(type));
  }
  for (  ConfigType type : DEFAULT_MALE_COLORS.keySet()) {
    params.setElementColor(type,DEFAULT_MALE_COLORS.get(type));
  }
  return params;
}"
45799,"public void createCell(DeployedModel deployedModel){
  CellServerState state=deployedModel.getCellServerState();
  PositionComponentServerState pcss=(PositionComponentServerState)state.getComponentServerState(PositionComponentServerState.class);
  BoundingVolume boundsHint=null;
  if (pcss != null) {
    Bounds bounds=pcss.getBounds();
    if (bounds.type == Bounds.BoundsType.BOX) {
      boundsHint=new BoundingBox(Vector3f.ZERO,(float)bounds.x,(float)bounds.y,(float)bounds.z);
    }
 else {
      if (bounds.x > 20)       boundsHint=new BoundingSphere(1f,Vector3f.ZERO);
 else       boundsHint=new BoundingSphere((float)bounds.x,Vector3f.ZERO);
    }
  }
  BoundingVolumeHint hint=new BoundingVolumeHint(true,boundsHint);
  state.setBoundingVolumeHint(hint);
  try {
    CellUtils.createCell(state);
  }
 catch (  CellCreationException excp) {
    logger.log(Level.WARNING,""String_Node_Str"" + deployedModel.getModelURL(),excp);
  }
}","public void createCell(DeployedModel deployedModel){
  CellServerState state=deployedModel.getCellServerState();
  PositionComponentServerState pcss=(PositionComponentServerState)state.getComponentServerState(PositionComponentServerState.class);
  BoundingVolume boundsHint=null;
  if (pcss != null) {
    Bounds bounds=pcss.getBounds();
    if (bounds.type == Bounds.BoundsType.BOX) {
      if (bounds.x > 20 || bounds.y > 20 || bounds.z > 20) {
        boundsHint=new BoundingBox(Vector3f.ZERO,1,1,1);
      }
 else {
        boundsHint=new BoundingBox(Vector3f.ZERO,(float)bounds.x,(float)bounds.y,(float)bounds.z);
      }
    }
 else {
      if (bounds.x > 20)       boundsHint=new BoundingSphere(1f,Vector3f.ZERO);
 else       boundsHint=new BoundingSphere((float)bounds.x,Vector3f.ZERO);
    }
  }
  BoundingVolumeHint hint=new BoundingVolumeHint(true,boundsHint);
  state.setBoundingVolumeHint(hint);
  try {
    CellUtils.createCell(state);
  }
 catch (  CellCreationException excp) {
    logger.log(Level.WARNING,""String_Node_Str"" + deployedModel.getModelURL(),excp);
  }
}"
45800,"/** 
 */
@Override public void initialize(ServerSessionManager manager){
  loaderMap=new HashMap();
  avatarChangedListener=new AvatarChangedListener(){
    public void avatarChanged(    Avatar newAvatar){
      if (camState != null) {
        avatarCellRenderer.removeAvatarChangedListener(avatarChangedListener);
        if (newAvatar.getContext() != null) {
          camState.setTargetCharacter(newAvatar);
        }
 else {
          camState.setTargetCharacter(null);
        }
        CellTransform transform=avatarCellRenderer.getCell().getLocalTransform();
        camState.setCameraPosition(transform.getTranslation(null));
      }
    }
  }
;
  chaseCameraMI=new JRadioButtonMenuItem(bundle.getString(""String_Node_Str""));
  chaseCameraMI.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent arg0){
      Vector3f offsetVec=new Vector3f(0.0f,4.0f,-10.0f);
      if (camState == null) {
        camModel=(ChaseCamModel)CameraModels.getCameraModel(ChaseCamModel.class);
        camState=new ChaseCamState(offsetVec,new Vector3f(0.0f,1.8f,0.0f));
        camState.setDamping(1.7f);
        camState.setLookAtDamping(1.7f);
      }
      camState.setCameraPosition(avatarCellRenderer.getCell().getLocalTransform().getTranslation(null).add(offsetVec));
      camState.setTargetCharacter(avatarCellRenderer.getAvatarCharacter());
      ClientContextJME.getViewManager().setCameraController(new FlexibleCameraAdapter(camModel,camState));
    }
  }
);
  gestureMI=new JCheckBoxMenuItem(bundle.getString(""String_Node_Str""));
  gestureMI.setSelected(false);
  gestureMI.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      if (gestureHUDRef == null || gestureHUDRef.get() == null) {
        GestureHUD hud=new GestureHUD();
        hud.setAvatarCharacter(avatarCellRenderer.getAvatarCharacter());
        gestureHUDRef=new WeakReference(hud);
      }
      gestureHUDEnabled=!gestureHUDEnabled;
      gestureMI.setSelected(gestureHUDEnabled);
      ((GestureHUD)gestureHUDRef.get()).setVisible(gestureHUDEnabled);
    }
  }
);
  avatarConfigMI=new JMenuItem(bundle.getString(""String_Node_Str""));
  avatarConfigMI.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      RenderManager rm=ClientContextJME.getWorldManager().getRenderManager();
      String shaderCheck=System.getProperty(""String_Node_Str"");
      boolean shaderPass=true;
      if (shaderCheck != null && shaderCheck.equals(""String_Node_Str"")) {
        shaderPass=rm.getContextCaps().GL_MAX_VERTEX_UNIFORM_COMPONENTS_ARB >= 512;
      }
      if (rm.supportsOpenGL20() == false || !shaderPass) {
        String msg=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"";
        String title=""String_Node_Str"";
        JFrame frame=JmeClientMain.getFrame().getFrame();
        JOptionPane.showMessageDialog(frame,msg,title,JOptionPane.ERROR_MESSAGE);
        return;
      }
      AvatarConfigFrame f=new AvatarConfigFrame();
      f.setVisible(true);
    }
  }
);
  collisionResponseEnabledMI=new JCheckBoxMenuItem(bundle.getString(""String_Node_Str""));
  collisionResponseEnabledMI.setSelected(true);
  collisionResponseEnabledMI.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      boolean isCollisionResponse=collisionResponseEnabledMI.isSelected();
      boolean isGravity=gravityEnabledMI.isSelected();
      ClientContext.getInputManager().postEvent(new AvatarCollisionChangeRequestEvent(isCollisionResponse,isGravity));
    }
  }
);
  gravityEnabledMI=new JCheckBoxMenuItem(bundle.getString(""String_Node_Str""));
  gravityEnabledMI.setSelected(true);
  gravityEnabledMI.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      boolean isCollisionResponse=collisionResponseEnabledMI.isSelected();
      boolean isGravity=gravityEnabledMI.isSelected();
      ClientContext.getInputManager().postEvent(new AvatarCollisionChangeRequestEvent(isCollisionResponse,isGravity));
    }
  }
);
  ClientContextJME.getAvatarRenderManager().registerRenderer(manager,AvatarImiJME.class,AvatarControls.class);
  try {
    String serverHostAndPort=manager.getServerNameAndPort();
    String baseURL=""String_Node_Str"";
    URL url=AssetUtils.getAssetURL(baseURL,serverHostAndPort);
    WorldManager worldManager=ClientContextJME.getWorldManager();
    worldManager.addUserData(Repository.class,new Repository(worldManager,new WonderlandAvatarCache(url.toExternalForm(),ClientContext.getUserDirectory(bundle.getString(""String_Node_Str"")))));
  }
 catch (  MalformedURLException excp) {
    logger.log(Level.WARNING,""String_Node_Str"",excp);
  }
catch (  Exception e) {
    logger.log(Level.SEVERE,""String_Node_Str"",e);
  }
  AvatarSystem.initialize(ClientContextJME.getWorldManager());
  super.initialize(manager);
}","/** 
 */
@Override public void initialize(ServerSessionManager manager){
  loaderMap=new HashMap();
  avatarChangedListener=new AvatarChangedListener(){
    public void avatarChanged(    Avatar newAvatar){
      if (camState != null) {
        avatarCellRenderer.removeAvatarChangedListener(avatarChangedListener);
        if (newAvatar.getContext() != null) {
          camState.setTargetCharacter(newAvatar);
        }
 else {
          camState.setTargetCharacter(null);
        }
        CellTransform transform=avatarCellRenderer.getCell().getLocalTransform();
        camState.setCameraPosition(transform.getTranslation(null));
      }
    }
  }
;
  chaseCameraMI=new JRadioButtonMenuItem(bundle.getString(""String_Node_Str""));
  chaseCameraMI.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent arg0){
      Vector3f offsetVec=new Vector3f(0.0f,4.0f,-10.0f);
      if (camState == null) {
        camModel=(ChaseCamModel)CameraModels.getCameraModel(ChaseCamModel.class);
        camState=new ChaseCamState(offsetVec,new Vector3f(0.0f,1.8f,0.0f));
        camState.setDamping(1.7f);
        camState.setLookAtDamping(1.7f);
      }
      camState.setCameraPosition(avatarCellRenderer.getCell().getLocalTransform().getTranslation(null).add(offsetVec));
      camState.setTargetCharacter(avatarCellRenderer.getAvatarCharacter());
      ClientContextJME.getViewManager().setCameraController(new FlexibleCameraAdapter(camModel,camState));
    }
  }
);
  gestureMI=new JCheckBoxMenuItem(bundle.getString(""String_Node_Str""));
  gestureMI.setSelected(false);
  gestureMI.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      if (gestureHUDRef == null || gestureHUDRef.get() == null) {
        GestureHUD hud=new GestureHUD();
        hud.setAvatarCharacter(avatarCellRenderer.getAvatarCharacter());
        gestureHUDRef=new WeakReference(hud);
      }
      gestureHUDEnabled=!gestureHUDEnabled;
      gestureMI.setSelected(gestureHUDEnabled);
      ((GestureHUD)gestureHUDRef.get()).setVisible(gestureHUDEnabled);
    }
  }
);
  avatarConfigMI=new JMenuItem(bundle.getString(""String_Node_Str""));
  avatarConfigMI.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      AvatarConfigFrame f=new AvatarConfigFrame();
      f.setVisible(true);
    }
  }
);
  collisionResponseEnabledMI=new JCheckBoxMenuItem(bundle.getString(""String_Node_Str""));
  collisionResponseEnabledMI.setSelected(true);
  collisionResponseEnabledMI.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      boolean isCollisionResponse=collisionResponseEnabledMI.isSelected();
      boolean isGravity=gravityEnabledMI.isSelected();
      ClientContext.getInputManager().postEvent(new AvatarCollisionChangeRequestEvent(isCollisionResponse,isGravity));
    }
  }
);
  gravityEnabledMI=new JCheckBoxMenuItem(bundle.getString(""String_Node_Str""));
  gravityEnabledMI.setSelected(true);
  gravityEnabledMI.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      boolean isCollisionResponse=collisionResponseEnabledMI.isSelected();
      boolean isGravity=gravityEnabledMI.isSelected();
      ClientContext.getInputManager().postEvent(new AvatarCollisionChangeRequestEvent(isCollisionResponse,isGravity));
    }
  }
);
  ClientContextJME.getAvatarRenderManager().registerRenderer(manager,AvatarImiJME.class,AvatarControls.class);
  try {
    String serverHostAndPort=manager.getServerNameAndPort();
    String baseURL=""String_Node_Str"";
    URL url=AssetUtils.getAssetURL(baseURL,serverHostAndPort);
    WorldManager worldManager=ClientContextJME.getWorldManager();
    worldManager.addUserData(Repository.class,new Repository(worldManager,new WonderlandAvatarCache(url.toExternalForm(),ClientContext.getUserDirectory(bundle.getString(""String_Node_Str"")))));
  }
 catch (  MalformedURLException excp) {
    logger.log(Level.WARNING,""String_Node_Str"",excp);
  }
catch (  Exception e) {
    logger.log(Level.SEVERE,""String_Node_Str"",e);
  }
  AvatarSystem.initialize(ClientContextJME.getWorldManager());
  super.initialize(manager);
}"
45801,"private void newButtonActionPerformed(java.awt.event.ActionEvent evt){
  AvatarRegistry registry=AvatarRegistry.getAvatarRegistry();
  String avatarName=registry.getUniqueAvatarName();
  ImiAvatar newAvatar=ImiAvatar.createAvatar(avatarName);
  newAvatar.configure();
}","private void newButtonActionPerformed(java.awt.event.ActionEvent evt){
  RenderManager rm=ClientContextJME.getWorldManager().getRenderManager();
  String shaderCheck=System.getProperty(""String_Node_Str"");
  boolean shaderPass=true;
  if (shaderCheck != null && shaderCheck.equals(""String_Node_Str"")) {
    shaderPass=rm.getContextCaps().GL_MAX_VERTEX_UNIFORM_COMPONENTS_ARB >= 512;
  }
  if (rm.supportsOpenGL20() == false || !shaderPass) {
    String msg=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"";
    String title=""String_Node_Str"";
    JFrame frame=JmeClientMain.getFrame().getFrame();
    JOptionPane.showMessageDialog(frame,msg,title,JOptionPane.ERROR_MESSAGE);
    return;
  }
  AvatarRegistry registry=AvatarRegistry.getAvatarRegistry();
  String avatarName=registry.getUniqueAvatarName();
  ImiAvatar newAvatar=ImiAvatar.createAvatar(avatarName);
  newAvatar.configure();
}"
45802,"private void useButtonActionPerformed(java.awt.event.ActionEvent evt){
  AvatarRegistry registry=AvatarRegistry.getAvatarRegistry();
  AvatarSPI avatar=(AvatarSPI)avatarList.getSelectedValue();
  registry.setAvatarInUse(avatar,false);
}","private void useButtonActionPerformed(java.awt.event.ActionEvent evt){
  AvatarRegistry registry=AvatarRegistry.getAvatarRegistry();
  AvatarSPI avatar=(AvatarSPI)avatarList.getSelectedValue();
  if (avatar.isHighResolution() == false) {
    registry.setAvatarInUse(avatar,false);
    return;
  }
  RenderManager rm=ClientContextJME.getWorldManager().getRenderManager();
  String shaderCheck=System.getProperty(""String_Node_Str"");
  boolean shaderPass=true;
  if (shaderCheck != null && shaderCheck.equals(""String_Node_Str"")) {
    shaderPass=rm.getContextCaps().GL_MAX_VERTEX_UNIFORM_COMPONENTS_ARB >= 512;
  }
  if (rm.supportsOpenGL20() == false || !shaderPass) {
    String msg=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"";
    String title=""String_Node_Str"";
    JFrame frame=JmeClientMain.getFrame().getFrame();
    JOptionPane.showMessageDialog(frame,msg,title,JOptionPane.ERROR_MESSAGE);
    return;
  }
  registry.setAvatarInUse(avatar,false);
}"
45803,"private void customizeButtonActionPerformed(java.awt.event.ActionEvent evt){
  AvatarSPI avatar=(AvatarSPI)avatarList.getSelectedValue();
  avatar.configure();
}","private void customizeButtonActionPerformed(java.awt.event.ActionEvent evt){
  AvatarSPI avatar=(AvatarSPI)avatarList.getSelectedValue();
  if (avatar.isHighResolution() == false) {
    avatar.configure();
    return;
  }
  RenderManager rm=ClientContextJME.getWorldManager().getRenderManager();
  String shaderCheck=System.getProperty(""String_Node_Str"");
  boolean shaderPass=true;
  if (shaderCheck != null && shaderCheck.equals(""String_Node_Str"")) {
    shaderPass=rm.getContextCaps().GL_MAX_VERTEX_UNIFORM_COMPONENTS_ARB >= 512;
  }
  if (rm.supportsOpenGL20() == false || !shaderPass) {
    String msg=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"";
    String title=""String_Node_Str"";
    JFrame frame=JmeClientMain.getFrame().getFrame();
    JOptionPane.showMessageDialog(frame,msg,title,JOptionPane.ERROR_MESSAGE);
    return;
  }
  avatar.configure();
}"
45804,"/** 
 */
public void primaryViewCellChanged(ViewCell oldViewCell,final ViewCell newViewCell){
  if (avatarCellRenderer != null) {
    avatarCellRenderer.removeAvatarChangedListener(avatarChangedListener);
  }
  if (newViewCell != null) {
    logger.info(""String_Node_Str"" + newViewCell.getName());
    CellRenderer rend=newViewCell.getCellRenderer(RendererType.RENDERER_JME);
    if (!(rend instanceof AvatarImiJME)) {
      logger.warning(""String_Node_Str"" + newViewCell.getName() + ""String_Node_Str"");
      return;
    }
    avatarCellRenderer=(AvatarImiJME)rend;
    avatarCellRenderer.addAvatarChangedListener(avatarChangedListener);
    if (camState != null) {
      camState.setTargetCharacter(avatarCellRenderer.getAvatarCharacter());
      camModel.reset(camState);
    }
    if (gestureHUDRef != null && gestureHUDRef.get() != null) {
      gestureHUDRef.get().setAvatarCharacter(avatarCellRenderer.getAvatarCharacter());
    }
    if (inUseListener == null) {
      inUseListener=new AvatarInUseListener(){
        public void avatarInUse(        AvatarSPI avatar,        boolean isLocal){
          refreshAvatarInUse(newViewCell,isLocal);
        }
      }
;
      AvatarRegistry.getAvatarRegistry().addAvatarInUseListener(inUseListener);
    }
    refreshAvatarInUse(newViewCell,false);
    if (menusAdded == false) {
      MainFrame frame=JmeClientMain.getFrame();
      frame.addToWindowMenu(gestureMI,0);
      frame.addToToolsMenu(gravityEnabledMI,-1);
      frame.addToToolsMenu(collisionResponseEnabledMI,-1);
      frame.addToEditMenu(avatarConfigMI,0);
      if (frame instanceof MainFrameImpl) {
        ((MainFrameImpl)frame).addToCameraChoices(chaseCameraMI,3);
      }
 else {
        frame.addToViewMenu(chaseCameraMI,3);
      }
      if (avatarControlsMI != null) {
        frame.addToWindowMenu(avatarControlsMI,0);
      }
      if (avatarSettingsMI != null) {
        frame.addToEditMenu(avatarSettingsMI,1);
      }
      menusAdded=true;
    }
  }
}","/** 
 */
public void primaryViewCellChanged(ViewCell oldViewCell,final ViewCell newViewCell){
  if (avatarCellRenderer != null) {
    avatarCellRenderer.removeAvatarChangedListener(avatarChangedListener);
  }
  if (newViewCell == null) {
    return;
  }
  logger.info(""String_Node_Str"" + oldViewCell + ""String_Node_Str""+ newViewCell+ ""String_Node_Str""+ newViewCell.getName());
  CellRenderer rend=newViewCell.getCellRenderer(RendererType.RENDERER_JME);
  if (!(rend instanceof AvatarImiJME)) {
    logger.warning(""String_Node_Str"" + newViewCell.getName() + ""String_Node_Str"");
    return;
  }
  if (inUseListener == null) {
    inUseListener=new AvatarInUseListener(){
      public void avatarInUse(      AvatarSPI avatar,      boolean isLocal){
        refreshAvatarInUse(newViewCell,isLocal);
      }
    }
;
    AvatarRegistry.getAvatarRegistry().addAvatarInUseListener(inUseListener);
  }
  avatarCellRenderer=(AvatarImiJME)rend;
  avatarCellRenderer.addAvatarChangedListener(avatarChangedListener);
  if (camState != null) {
    camState.setTargetCharacter(avatarCellRenderer.getAvatarCharacter());
    camModel.reset(camState);
  }
  if (gestureHUDRef != null && gestureHUDRef.get() != null) {
    gestureHUDRef.get().setAvatarCharacter(avatarCellRenderer.getAvatarCharacter());
  }
  if (inUseListener == null) {
    inUseListener=new AvatarInUseListener(){
      public void avatarInUse(      AvatarSPI avatar,      boolean isLocal){
        refreshAvatarInUse(newViewCell,isLocal);
      }
    }
;
    AvatarRegistry.getAvatarRegistry().addAvatarInUseListener(inUseListener);
  }
  isAvatarSet=false;
  newViewCell.addComponentChangeListener(new ComponentChangeListener(){
    public void componentChanged(    Cell cell,    ChangeType type,    CellComponent component){
      AvatarConfigComponent c=cell.getComponent(AvatarConfigComponent.class);
      if (type == ChangeType.ADDED && c != null) {
        handleSetAvatar((ViewCell)cell);
      }
    }
  }
);
  if (newViewCell.getComponent(AvatarConfigComponent.class) != null) {
    handleSetAvatar(newViewCell);
  }
  if (menusAdded == false) {
    MainFrame frame=JmeClientMain.getFrame();
    frame.addToWindowMenu(gestureMI,0);
    frame.addToToolsMenu(gravityEnabledMI,-1);
    frame.addToToolsMenu(collisionResponseEnabledMI,-1);
    frame.addToEditMenu(avatarConfigMI,0);
    if (frame instanceof MainFrameImpl) {
      ((MainFrameImpl)frame).addToCameraChoices(chaseCameraMI,3);
    }
 else {
      frame.addToViewMenu(chaseCameraMI,3);
    }
    if (avatarControlsMI != null) {
      frame.addToWindowMenu(avatarControlsMI,0);
    }
    if (avatarSettingsMI != null) {
      frame.addToEditMenu(avatarSettingsMI,1);
    }
    menusAdded=true;
  }
}"
45805,"/** 
 */
@Override protected void deactivate(){
  AvatarSessionLoader loader=loaderMap.get(getSessionManager());
  if (loader != null) {
    loader.removeAvatarLoaderStateListener(this);
    loader.unload();
    loaderMap.remove(getSessionManager());
  }
  ViewManager.getViewManager().removeViewManagerListener(this);
  if (inUseListener != null) {
    AvatarRegistry.getAvatarRegistry().removeAvatarInUseListener(inUseListener);
    inUseListener=null;
  }
  if (menusAdded == true) {
    MainFrame frame=JmeClientMain.getFrame();
    frame.removeFromWindowMenu(gestureMI);
    frame.removeFromToolsMenu(collisionResponseEnabledMI);
    frame.removeFromToolsMenu(gravityEnabledMI);
    frame.removeFromEditMenu(avatarConfigMI);
    if (frame instanceof MainFrameImpl) {
      ((MainFrameImpl)frame).removeFromCameraChoices(chaseCameraMI);
    }
 else {
      frame.removeFromViewMenu(chaseCameraMI);
    }
    if (avatarControlsMI != null) {
      frame.removeFromWindowMenu(avatarControlsMI);
    }
    if (avatarSettingsMI != null) {
      frame.removeFromEditMenu(avatarSettingsMI);
    }
    menusAdded=false;
  }
}","/** 
 */
@Override protected void deactivate(){
  if (menusAdded == true) {
    MainFrame frame=JmeClientMain.getFrame();
    frame.removeFromWindowMenu(gestureMI);
    frame.removeFromToolsMenu(collisionResponseEnabledMI);
    frame.removeFromToolsMenu(gravityEnabledMI);
    frame.removeFromEditMenu(avatarConfigMI);
    if (frame instanceof MainFrameImpl) {
      ((MainFrameImpl)frame).removeFromCameraChoices(chaseCameraMI);
    }
 else {
      frame.removeFromViewMenu(chaseCameraMI);
    }
    if (avatarControlsMI != null) {
      frame.removeFromWindowMenu(avatarControlsMI);
    }
    if (avatarSettingsMI != null) {
      frame.removeFromEditMenu(avatarSettingsMI);
    }
    menusAdded=false;
  }
  if (inUseListener != null) {
    AvatarRegistry.getAvatarRegistry().removeAvatarInUseListener(inUseListener);
    inUseListener=null;
  }
  ViewManager.getViewManager().removeViewManagerListener(this);
  AvatarSessionLoader loader=loaderMap.get(getSessionManager());
  if (loader != null) {
    loader.removeAvatarLoaderStateListener(this);
    loader.unload();
    loaderMap.remove(getSessionManager());
  }
}"
45806,"/** 
 * Sets the state of the avatar session loader.
 * @param state The new state
 */
public void setState(State state){
synchronized (currentState) {
    logger.info(""String_Node_Str"" + state);
    currentState=state;
    fireAvatarLoaderStateEvent(state);
  }
}","/** 
 * Sets the state of the avatar session loader.
 * @param state The new state
 */
public void setState(State state){
synchronized (currentState) {
    currentState=state;
    fireAvatarLoaderStateEvent(state);
  }
}"
45807,"/** 
 * {@inheritDoc}
 */
public String getName(){
  return ""String_Node_Str"";
}","/** 
 * {@inheritDoc}
 */
public String getName(){
  return avatarName;
}"
45808,"/** 
 * {@inheritDoc}
 */
public AvatarConfigInfo getAvatarConfigInfo(ServerSessionManager session){
  return null;
}","/** 
 * {@inheritDoc}
 */
public AvatarConfigInfo getAvatarConfigInfo(ServerSessionManager session){
  return new AvatarConfigInfo(avatarURL,BasicAvatarLoaderFactory.class.getName());
}"
45809,"/** 
 * Default constructor 
 */
public BasicAvatar(){
}","/** 
 * Default constructor 
 */
public BasicAvatar(String avatarName,String avatarURL){
  this.avatarName=avatarName;
  this.avatarURL=avatarURL;
}"
45810,"private void BusyButtonActionPerformed(java.awt.event.ActionEvent evt){
  session.send(client,new VoiceChatBusyMessage(group,caller,myPresenceInfo,chatType));
  incomingCallHUDComponent.setVisible(false);
}","private void BusyButtonActionPerformed(java.awt.event.ActionEvent evt){
  answered=true;
  session.send(client,new VoiceChatBusyMessage(group,caller,myPresenceInfo,chatType));
  incomingCallHUDComponent.setVisible(false);
}"
45811,"/** 
 * Load a SketchUP KMZ file and return the ImportedModel object
 * @param file
 * @return
 */
@Override public ImportedModel importModel(ImportSettings settings) throws IOException {
  ImportedModel importedModel;
  URL modelURL=settings.getModelURL();
  if (!modelURL.getProtocol().equalsIgnoreCase(""String_Node_Str"")) {
    final String modelURLStr=modelURL.toExternalForm();
    SwingUtilities.invokeLater(new Runnable(){
      public void run(){
        JOptionPane.showConfirmDialog(null,""String_Node_Str"" + modelURLStr + ""String_Node_Str"",""String_Node_Str"",JOptionPane.OK_OPTION);
      }
    }
);
    return null;
  }
  try {
    logger.warning(""String_Node_Str"" + modelURL.toExternalForm());
    File f=new File(modelURL.getFile());
    if (f == null) {
      logger.warning(""String_Node_Str"" + modelURL.toExternalForm());
      JOptionPane.showMessageDialog(null,""String_Node_Str"" + modelURL.toExternalForm(),""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
      return null;
    }
 else     if (!f.canRead()) {
      logger.warning(""String_Node_Str"" + f.getAbsolutePath());
      JOptionPane.showMessageDialog(null,""String_Node_Str"" + f.getAbsolutePath() + ""String_Node_Str"",""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
      return null;
    }
    ZipFile zipFile=null;
    ZipEntry docKmlEntry=null;
    try {
      zipFile=new ZipFile(f);
      docKmlEntry=zipFile.getEntry(""String_Node_Str"");
    }
 catch (    ZipException ze) {
      logger.log(Level.WARNING,""String_Node_Str"" + f.getAbsolutePath(),ze);
      return null;
    }
    KmlParser parser=new KmlParser();
    InputStream in=zipFile.getInputStream(docKmlEntry);
    try {
      parser.decodeKML(in);
    }
 catch (    Exception ex) {
      Logger.getLogger(KmzLoader.class.getName()).log(Level.SEVERE,null,ex);
    }
    List<KmlParser.KmlModel> models=parser.getModels();
    HashMap<URL,String> textureFilesMapping=new HashMap();
    importedModel=new KmzImportedModel(modelURL,models.get(0).getHref(),textureFilesMapping);
    String zipHost=WlzipManager.getWlzipManager().addZip(zipFile);
    ZipResourceLocator zipResource=new ZipResourceLocator(zipHost,zipFile,textureFilesMapping);
    ResourceLocatorTool.addThreadResourceLocator(ResourceLocatorTool.TYPE_TEXTURE,zipResource);
    if (models.size() == 1) {
      importedModel.setModelBG(load(zipFile,models.get(0)));
    }
 else {
      Node modelBG=new Node();
      for (      KmlParser.KmlModel model : models) {
        modelBG.attachChild(load(zipFile,model));
      }
      importedModel.setModelBG(modelBG);
    }
    ResourceLocatorTool.removeThreadResourceLocator(ResourceLocatorTool.TYPE_TEXTURE,zipResource);
    WlzipManager.getWlzipManager().removeZip(zipHost,zipFile);
  }
 catch (  ZipException ex) {
    logger.log(Level.SEVERE,null,ex);
    throw new IOException(""String_Node_Str"");
  }
catch (  IOException ex) {
    logger.log(Level.SEVERE,null,ex);
    throw ex;
  }
  importedModel.setModelLoader(this);
  importedModel.setImportSettings(settings);
  return importedModel;
}","/** 
 * Load a SketchUP KMZ file and return the ImportedModel object
 * @param file
 * @return
 */
@Override public ImportedModel importModel(ImportSettings settings) throws IOException {
  ImportedModel importedModel;
  URL modelURL=settings.getModelURL();
  if (!modelURL.getProtocol().equalsIgnoreCase(""String_Node_Str"")) {
    final String modelURLStr=modelURL.toExternalForm();
    SwingUtilities.invokeLater(new Runnable(){
      public void run(){
        JOptionPane.showConfirmDialog(null,""String_Node_Str"" + modelURLStr + ""String_Node_Str"",""String_Node_Str"",JOptionPane.OK_OPTION);
      }
    }
);
    return null;
  }
  try {
    File f=null;
    try {
      URI uri=modelURL.toURI();
      String path=uri.getPath();
      f=new File(path);
    }
 catch (    URISyntaxException ex) {
      Logger.getLogger(KmzLoader.class.getName()).log(Level.SEVERE,""String_Node_Str"" + modelURL.toExternalForm(),ex);
      return null;
    }
    if (f == null) {
      logger.warning(""String_Node_Str"" + modelURL.toExternalForm());
      JOptionPane.showMessageDialog(null,""String_Node_Str"" + modelURL.toExternalForm(),""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
      return null;
    }
 else     if (!f.canRead()) {
      logger.warning(""String_Node_Str"" + f.getAbsolutePath());
      JOptionPane.showMessageDialog(null,""String_Node_Str"" + f.getAbsolutePath() + ""String_Node_Str"",""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
      return null;
    }
    ZipFile zipFile=null;
    ZipEntry docKmlEntry=null;
    try {
      zipFile=new ZipFile(f);
      docKmlEntry=zipFile.getEntry(""String_Node_Str"");
    }
 catch (    ZipException ze) {
      logger.log(Level.WARNING,""String_Node_Str"" + f.getAbsolutePath(),ze);
      return null;
    }
    KmlParser parser=new KmlParser();
    InputStream in=zipFile.getInputStream(docKmlEntry);
    try {
      parser.decodeKML(in);
    }
 catch (    Exception ex) {
      Logger.getLogger(KmzLoader.class.getName()).log(Level.SEVERE,null,ex);
    }
    List<KmlParser.KmlModel> models=parser.getModels();
    HashMap<URL,String> textureFilesMapping=new HashMap();
    importedModel=new KmzImportedModel(modelURL,models.get(0).getHref(),textureFilesMapping);
    String zipHost=WlzipManager.getWlzipManager().addZip(zipFile);
    ZipResourceLocator zipResource=new ZipResourceLocator(zipHost,zipFile,textureFilesMapping);
    ResourceLocatorTool.addThreadResourceLocator(ResourceLocatorTool.TYPE_TEXTURE,zipResource);
    if (models.size() == 1) {
      importedModel.setModelBG(load(zipFile,models.get(0)));
    }
 else {
      Node modelBG=new Node();
      for (      KmlParser.KmlModel model : models) {
        modelBG.attachChild(load(zipFile,model));
      }
      importedModel.setModelBG(modelBG);
    }
    ResourceLocatorTool.removeThreadResourceLocator(ResourceLocatorTool.TYPE_TEXTURE,zipResource);
    WlzipManager.getWlzipManager().removeZip(zipHost,zipFile);
  }
 catch (  ZipException ex) {
    logger.log(Level.SEVERE,null,ex);
    throw new IOException(""String_Node_Str"");
  }
catch (  IOException ex) {
    logger.log(Level.SEVERE,null,ex);
    throw ex;
  }
  importedModel.setModelLoader(this);
  importedModel.setImportSettings(settings);
  return importedModel;
}"
45812,"public void messageReceived(WonderlandClientSender sender,WonderlandClientID clientID,Message message){
  Logger logger=Logger.getLogger(CellEditConnectionHandler.class.getName());
  CellEditMessage editMessage=(CellEditMessage)message;
  if (editMessage.getEditType() == EditType.CREATE_CELL) {
    CellServerState setup=((CellCreateMessage)editMessage).getCellSetup();
    String className=setup.getServerClassName();
    logger.fine(""String_Node_Str"" + className);
    CellMO cellMO=CellMOFactory.loadCellMO(className);
    if (cellMO == null) {
      logger.warning(""String_Node_Str"" + className);
      return;
    }
    CellMO parent=null;
    CellID parentCellID=((CellCreateMessage)editMessage).getParentCellID();
    if (parentCellID != null) {
      parent=CellManagerMO.getCell(parentCellID);
    }
    try {
      cellMO.setServerState(setup);
      if (parent == null) {
        WonderlandContext.getCellManager().insertCellInWorld(cellMO);
      }
 else {
        parent.addChild(cellMO);
      }
    }
 catch (    ClassCastException cce) {
      logger.log(Level.WARNING,""String_Node_Str"" + cellMO.getName() + ""String_Node_Str""+ cellMO.getClass()+ ""String_Node_Str""+ ""String_Node_Str"",cce);
      return;
    }
catch (    MultipleParentException excp) {
      logger.log(Level.WARNING,""String_Node_Str"" + cellMO.getName() + ""String_Node_Str""+ cellMO.getClass()+ ""String_Node_Str"",excp);
    }
  }
 else   if (editMessage.getEditType() == EditType.DELETE_CELL) {
    CellID cellID=((CellDeleteMessage)editMessage).getCellID();
    CellMO cellMO=CellManagerMO.getCell(cellID);
    if (cellMO == null) {
      logger.warning(""String_Node_Str"" + cellID);
      return;
    }
    CellMO parentMO=cellMO.getParent();
    if (parentMO != null) {
      parentMO.removeChild(cellMO);
    }
 else {
      CellManagerMO.getCellManager().removeCellFromWorld(cellMO);
    }
  }
 else   if (editMessage.getEditType() == EditType.DUPLICATE_CELL) {
    CellID cellID=((CellDuplicateMessage)editMessage).getCellID();
    CellMO cellMO=CellManagerMO.getCell(cellID);
    if (cellMO == null) {
      logger.warning(""String_Node_Str"" + cellID);
      return;
    }
    CellMO parentCellMO=cellMO.getParent();
    CellServerState state=cellMO.getServerState(null);
    String className=state.getServerClassName();
    CellMO newCellMO=CellMOFactory.loadCellMO(className);
    if (newCellMO == null) {
      logger.warning(""String_Node_Str"" + className);
      return;
    }
    PositionComponentServerState position=(PositionComponentServerState)state.getComponentServerState(PositionComponentServerState.class);
    if (position == null) {
      logger.warning(""String_Node_Str"" + ""String_Node_Str"" + cellID);
      return;
    }
    Vector3f offset=new Vector3f(1,1,1);
    Vector3f origin=position.getTranslation();
    position.setTranslation(offset.add(origin));
    state.addComponentServerState(position);
    state.setName(((CellDuplicateMessage)editMessage).getCellName());
    newCellMO.setServerState(state);
    try {
      if (parentCellMO == null) {
        WonderlandContext.getCellManager().insertCellInWorld(newCellMO);
      }
 else {
        parentCellMO.addChild(newCellMO);
      }
    }
 catch (    MultipleParentException excp) {
      logger.log(Level.WARNING,""String_Node_Str"" + newCellMO.getName() + ""String_Node_Str""+ newCellMO.getClass()+ ""String_Node_Str"",excp);
    }
  }
 else   if (editMessage.getEditType() == EditType.REPARENT_CELL) {
    CellID cellID=((CellReparentMessage)editMessage).getCellID();
    CellID newParentID=((CellReparentMessage)editMessage).getParentCellID();
    CellMO child=CellManagerMO.getCell(cellID);
    CellMO oldParent=child.getParent();
    CellMO newParent=CellManagerMO.getCell(newParentID);
    if (oldParent == null) {
      CellManagerMO.getCellManager().removeCellFromWorld(child);
    }
 else {
      oldParent.removeChild(child);
    }
    CellTransform childTransform=((CellReparentMessage)editMessage).getChildCellTransform();
    if (childTransform != null)     child.setLocalTransform(childTransform);
    if (newParent == null) {
      try {
        CellManagerMO.getCellManager().insertCellInWorld(child);
      }
 catch (      MultipleParentException ex) {
        Logger.getLogger(CellEditConnectionHandler.class.getName()).log(Level.SEVERE,null,ex);
      }
    }
 else {
      try {
        newParent.addChild(child);
      }
 catch (      MultipleParentException ex) {
        Logger.getLogger(CellEditConnectionHandler.class.getName()).log(Level.SEVERE,null,ex);
      }
    }
  }
}","public void messageReceived(WonderlandClientSender sender,WonderlandClientID clientID,Message message){
  Logger logger=Logger.getLogger(CellEditConnectionHandler.class.getName());
  CellEditMessage editMessage=(CellEditMessage)message;
  if (editMessage.getEditType() == EditType.CREATE_CELL) {
    CellServerState setup=((CellCreateMessage)editMessage).getCellSetup();
    String className=setup.getServerClassName();
    logger.fine(""String_Node_Str"" + className);
    CellMO cellMO=CellMOFactory.loadCellMO(className);
    if (cellMO == null) {
      logger.warning(""String_Node_Str"" + className);
      return;
    }
    CellMO parent=null;
    CellID parentCellID=((CellCreateMessage)editMessage).getParentCellID();
    if (parentCellID != null) {
      parent=CellManagerMO.getCell(parentCellID);
    }
    try {
      cellMO.setServerState(setup);
      if (parent == null) {
        WonderlandContext.getCellManager().insertCellInWorld(cellMO);
      }
 else {
        parent.addChild(cellMO);
      }
    }
 catch (    ClassCastException cce) {
      logger.log(Level.WARNING,""String_Node_Str"" + cellMO.getName() + ""String_Node_Str""+ cellMO.getClass()+ ""String_Node_Str""+ ""String_Node_Str"",cce);
      return;
    }
catch (    MultipleParentException excp) {
      logger.log(Level.WARNING,""String_Node_Str"" + cellMO.getName() + ""String_Node_Str""+ cellMO.getClass()+ ""String_Node_Str"",excp);
    }
  }
 else   if (editMessage.getEditType() == EditType.DELETE_CELL) {
    CellID cellID=((CellDeleteMessage)editMessage).getCellID();
    CellMO cellMO=CellManagerMO.getCell(cellID);
    if (cellMO == null) {
      logger.warning(""String_Node_Str"" + cellID);
      return;
    }
    CellMO parentMO=cellMO.getParent();
    if (parentMO != null) {
      parentMO.removeChild(cellMO);
    }
 else {
      CellManagerMO.getCellManager().removeCellFromWorld(cellMO);
    }
  }
 else   if (editMessage.getEditType() == EditType.DUPLICATE_CELL) {
    CellID cellID=((CellDuplicateMessage)editMessage).getCellID();
    CellMO cellMO=CellManagerMO.getCell(cellID);
    if (cellMO == null) {
      logger.warning(""String_Node_Str"" + cellID);
      return;
    }
    CellMO parentCellMO=cellMO.getParent();
    CellServerState state=cellMO.getServerState(null);
    String className=state.getServerClassName();
    CellMO newCellMO=CellMOFactory.loadCellMO(className);
    if (newCellMO == null) {
      logger.warning(""String_Node_Str"" + className);
      return;
    }
    PositionComponentServerState position=(PositionComponentServerState)state.getComponentServerState(PositionComponentServerState.class);
    if (position == null) {
      logger.warning(""String_Node_Str"" + ""String_Node_Str"" + cellID);
      return;
    }
    Vector3f offset=new Vector3f(1,0,1);
    Vector3f origin=position.getTranslation();
    position.setTranslation(offset.add(origin));
    state.addComponentServerState(position);
    state.setName(((CellDuplicateMessage)editMessage).getCellName());
    newCellMO.setServerState(state);
    try {
      if (parentCellMO == null) {
        WonderlandContext.getCellManager().insertCellInWorld(newCellMO);
      }
 else {
        parentCellMO.addChild(newCellMO);
      }
    }
 catch (    MultipleParentException excp) {
      logger.log(Level.WARNING,""String_Node_Str"" + newCellMO.getName() + ""String_Node_Str""+ newCellMO.getClass()+ ""String_Node_Str"",excp);
    }
  }
 else   if (editMessage.getEditType() == EditType.REPARENT_CELL) {
    CellID cellID=((CellReparentMessage)editMessage).getCellID();
    CellID newParentID=((CellReparentMessage)editMessage).getParentCellID();
    CellMO child=CellManagerMO.getCell(cellID);
    CellMO oldParent=child.getParent();
    CellMO newParent=CellManagerMO.getCell(newParentID);
    if (oldParent == null) {
      CellManagerMO.getCellManager().removeCellFromWorld(child);
    }
 else {
      oldParent.removeChild(child);
    }
    CellTransform childTransform=((CellReparentMessage)editMessage).getChildCellTransform();
    if (childTransform != null)     child.setLocalTransform(childTransform);
    if (newParent == null) {
      try {
        CellManagerMO.getCellManager().insertCellInWorld(child);
      }
 catch (      MultipleParentException ex) {
        Logger.getLogger(CellEditConnectionHandler.class.getName()).log(Level.SEVERE,null,ex);
      }
    }
 else {
      try {
        newParent.addChild(child);
      }
 catch (      MultipleParentException ex) {
        Logger.getLogger(CellEditConnectionHandler.class.getName()).log(Level.SEVERE,null,ex);
      }
    }
  }
}"
45813,"protected void componentWorldVisible(HUDComponent2D component){
  logger.info(""String_Node_Str"" + component);
  HUDComponentState state=(HUDComponentState)hudStateMap.get(component);
  if ((state != null) && (!state.isWorldVisible())) {
    Cell cell=component.getCell();
    if (cell != null) {
      HUDView3D worldView=state.getWorldView();
      if (worldView == null) {
        if (worldDisplayer == null) {
          logger.fine(""String_Node_Str"");
          worldDisplayer=new HUDView3DDisplayer(cell);
        }
        logger.fine(""String_Node_Str"");
        worldView=worldDisplayer.createView(state.getWindow());
        worldView.setPixelScale(worldPixelScale);
        state.setWorldView(worldView);
      }
      logger.fine(""String_Node_Str"");
      worldView.setOrtho(false,false);
      worldView.setPixelScale(worldPixelScale);
      worldView.setVisibleApp(true);
      worldView.setVisibleUser(true,false);
      componentMovedWorld(component);
      worldView.update();
    }
  }
}","protected void componentWorldVisible(HUDComponent2D component){
  logger.info(""String_Node_Str"" + component);
  HUDComponentState state=(HUDComponentState)hudStateMap.get(component);
  if ((state != null) && (!state.isWorldVisible())) {
    Cell cell=component.getCell();
    if (cell != null) {
      HUDView3D worldView=state.getWorldView();
      if (worldView == null) {
        logger.fine(""String_Node_Str"");
        HUDView3DDisplayer worldDisplayer=new HUDView3DDisplayer(cell);
        logger.fine(""String_Node_Str"");
        worldView=worldDisplayer.createView(state.getWindow());
        worldView.setPixelScale(worldPixelScale);
        state.setWorldView(worldView);
      }
      logger.fine(""String_Node_Str"");
      worldView.setOrtho(false,false);
      worldView.setPixelScale(worldPixelScale);
      worldView.setVisibleApp(true);
      worldView.setVisibleUser(true,false);
      componentMovedWorld(component);
      worldView.update();
    }
  }
}"
45814,"public HUDFrameHeader2DImpl(){
  initComponents();
  addListeners();
  paint=new GradientPaint(0,0,gradientStartColor,0,getHeight(),gradientEndColor);
}","public HUDFrameHeader2DImpl(){
  initComponents();
  addListeners();
  paint=new GradientPaint(0,0,gradientStartColor,0,(int)getPreferredSize().getHeight(),gradientEndColor);
}"
45815,"/** 
 * {@inheritDoc}
 */
public Vector2f getLocation(HUDComponent component){
  Vector2f location=new Vector2f();
  if (!hudViewMap.containsKey(component)) {
    return location;
  }
  HUDView2D view=(HUDView2D)hudViewMap.get(component);
  if (component != null) {
    location.set((float)component.getLocation().getX(),(float)component.getLocation().getY());
  }
  return location;
}","/** 
 * {@inheritDoc}
 */
public Vector2f getLocation(HUDComponent component){
  Vector2f location=new Vector2f();
  if ((component != null) && (hudViewMap.containsKey(component))) {
    location.set((float)component.getLocation().getX(),(float)component.getLocation().getY());
  }
  return location;
}"
45816,"/** 
 * {@inheritDoc}
 */
@Override public Vector2f getLocation(HUDComponent component){
  Vector2f location=new Vector2f();
  if (component == null) {
    return location;
  }
  HUDView2D view2d=(HUDView2D)hudViewMap.get(component);
  if (view2d == null) {
    return location;
  }
  float compWidth=view2d.getDisplayerLocalWidth();
  float compHeight=view2d.getDisplayerLocalHeight();
  int hudWidth=hud.getWidth();
  int hudHeight=hud.getHeight();
  float hudCenterX=hudWidth / 2f;
  float hudCenterY=hudHeight / 2f;
  if ((component.getPreferredLocation() != Layout.NONE) && (component.getX() == 0) && (component.getY() == 0)) {
switch (component.getPreferredLocation()) {
case NORTH:
      location.set(hudCenterX - compWidth / 2f,hudHeight - MIN_TOP_MARGIN - compHeight);
    break;
case SOUTH:
  location.set(hudCenterX - compWidth / 2f,MIN_BOTTOM_MARGIN);
break;
case WEST:
location.set(MIN_LEFT_MARGIN,hudCenterY - compHeight / 2f);
break;
case EAST:
location.set(hudWidth - MIN_RIGHT_MARGIN - compWidth,hudCenterY - compHeight / 2f);
break;
case CENTER:
location.set(hudCenterX - compWidth / 2f,hudCenterY - compHeight / 2f);
break;
case NORTHWEST:
location.set(MIN_LEFT_MARGIN,hudHeight - MIN_TOP_MARGIN - compHeight);
break;
case NORTHEAST:
location.set(hudWidth - MIN_RIGHT_MARGIN - compWidth,hudHeight - MIN_TOP_MARGIN - compHeight);
break;
case SOUTHWEST:
location.set(MIN_LEFT_MARGIN,MIN_BOTTOM_MARGIN);
break;
case SOUTHEAST:
location.set(hudWidth - MIN_RIGHT_MARGIN - compWidth,MIN_BOTTOM_MARGIN);
break;
default :
logger.warning(""String_Node_Str"" + component.getPreferredLocation());
break;
}
location.set(location.x + hud.getX(),location.y + hud.getY());
}
 else {
int x=component.getX();
int y=component.getY();
if (x < hud.getX() + MIN_LEFT_MARGIN) {
x=hud.getX() + MIN_LEFT_MARGIN;
}
 else if (x + compWidth > hud.getX() + hudWidth - MIN_RIGHT_MARGIN) {
x=(int)(hud.getX() + hudWidth - MIN_RIGHT_MARGIN - compWidth);
}
if (y < hud.getY() + MIN_BOTTOM_MARGIN) {
y=hud.getY() + MIN_BOTTOM_MARGIN;
}
 else if (y + compHeight > hud.getY() + hudHeight - MIN_TOP_MARGIN) {
y=(int)(hud.getY() + hudHeight - MIN_TOP_MARGIN - compHeight);
}
location.set(x,y);
}
Vector2f currentPosition=positionMap.get(component);
Vector2f newPosition=new Vector2f((location.x - hud.getX()) / hudWidth,(location.y - hud.getY()) / hudHeight);
if ((currentPosition == null) || (Math.abs(currentPosition.x - newPosition.x) > 0.03) || (Math.abs(currentPosition.y - newPosition.y) > 0.03)) {
positionMap.put(component,newPosition);
}
return location;
}","/** 
 * {@inheritDoc}
 */
@Override public Vector2f getLocation(HUDComponent component){
  Vector2f location=new Vector2f();
  if ((component != null) && (hudViewMap.get(component) != null)) {
    HUDView2D view2d=(HUDView2D)hudViewMap.get(component);
    float compWidth=view2d.getDisplayerLocalWidth();
    float compHeight=view2d.getDisplayerLocalHeight();
    int hudWidth=hud.getWidth();
    int hudHeight=hud.getHeight();
    float hudCenterX=hudWidth / 2f;
    float hudCenterY=hudHeight / 2f;
    if ((component.getPreferredLocation() != Layout.NONE) && (component.getX() == 0) && (component.getY() == 0)) {
switch (component.getPreferredLocation()) {
case NORTH:
        location.set(hudCenterX - compWidth / 2f,hudHeight - MIN_TOP_MARGIN - compHeight);
      break;
case SOUTH:
    location.set(hudCenterX - compWidth / 2f,MIN_BOTTOM_MARGIN);
  break;
case WEST:
location.set(MIN_LEFT_MARGIN,hudCenterY - compHeight / 2f);
break;
case EAST:
location.set(hudWidth - MIN_RIGHT_MARGIN - compWidth,hudCenterY - compHeight / 2f);
break;
case CENTER:
location.set(hudCenterX - compWidth / 2f,hudCenterY - compHeight / 2f);
break;
case NORTHWEST:
location.set(MIN_LEFT_MARGIN,hudHeight - MIN_TOP_MARGIN - compHeight);
break;
case NORTHEAST:
location.set(hudWidth - MIN_RIGHT_MARGIN - compWidth,hudHeight - MIN_TOP_MARGIN - compHeight);
break;
case SOUTHWEST:
location.set(MIN_LEFT_MARGIN,MIN_BOTTOM_MARGIN);
break;
case SOUTHEAST:
location.set(hudWidth - MIN_RIGHT_MARGIN - compWidth,MIN_BOTTOM_MARGIN);
break;
default :
logger.warning(""String_Node_Str"" + component.getPreferredLocation());
break;
}
location.set(location.x + hud.getX(),location.y + hud.getY());
}
 else {
int x=component.getX();
int y=component.getY();
if (x < hud.getX() + MIN_LEFT_MARGIN) {
x=hud.getX() + MIN_LEFT_MARGIN;
}
 else if (x + compWidth > hud.getX() + hudWidth - MIN_RIGHT_MARGIN) {
x=(int)(hud.getX() + hudWidth - MIN_RIGHT_MARGIN - compWidth);
}
if (y < hud.getY() + MIN_BOTTOM_MARGIN) {
y=hud.getY() + MIN_BOTTOM_MARGIN;
}
 else if (y + compHeight > hud.getY() + hudHeight - MIN_TOP_MARGIN) {
y=(int)(hud.getY() + hudHeight - MIN_TOP_MARGIN - compHeight);
}
location.set(x,y);
}
Vector2f currentPosition=positionMap.get(component);
Vector2f newPosition=new Vector2f((location.x - hud.getX()) / hudWidth,(location.y - hud.getY()) / hudHeight);
if ((currentPosition == null) || (Math.abs(currentPosition.x - newPosition.x) > 0.03) || (Math.abs(currentPosition.y - newPosition.y) > 0.03)) {
positionMap.put(component,newPosition);
}
}
return location;
}"
45817,"/** 
 * Adds a bound property listener to the dialog
 * @param listener a listener for dialog events
 */
@Override public synchronized void addPropertyChangeListener(PropertyChangeListener listener){
  if (listeners == null) {
    listeners=new PropertyChangeSupport(this);
  }
  listeners.addPropertyChangeListener(listener);
}","/** 
 * Adds a bound property listener to the dialog
 * @param listener a listener for dialog events
 */
@Override public void addPropertyChangeListener(PropertyChangeListener listener){
  if (listeners == null) {
    listeners=new PropertyChangeSupport(this);
  }
  listeners.addPropertyChangeListener(listener);
}"
45818,"public void setButtons(BUTTONS buttons){
  this.buttons=buttons;
switch (buttons) {
case NONE:
    okButton.setVisible(false);
  cancelButton.setVisible(false);
break;
case OK:
okButton.setVisible(true);
cancelButton.setVisible(false);
break;
case OK_CANCEL:
okButton.setVisible(true);
cancelButton.setVisible(true);
break;
}
validate();
}","public void setButtons(BUTTONS buttons){
  this.buttons=buttons;
switch (buttons) {
case NONE:
    okButton.setVisible(false);
  cancelButton.setVisible(false);
break;
case OK:
okButton.setVisible(true);
cancelButton.setVisible(false);
break;
case OK_CANCEL:
okButton.setVisible(true);
cancelButton.setVisible(true);
break;
default :
break;
}
validate();
}"
45819,"private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt){
  listeners.firePropertyChange(""String_Node_Str"",new String(""String_Node_Str""),null);
}","private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt){
  listeners.firePropertyChange(""String_Node_Str"",""String_Node_Str"",null);
}"
45820,"private void okButtonActionPerformed(java.awt.event.ActionEvent evt){
  listeners.firePropertyChange(""String_Node_Str"",new String(""String_Node_Str""),new String(valueTextField.getText()));
}","private void okButtonActionPerformed(java.awt.event.ActionEvent evt){
  listeners.firePropertyChange(""String_Node_Str"",""String_Node_Str"",valueTextField.getText());
}"
45821,"public void setMode(DIALOG_MODE mode){
  this.mode=mode;
switch (mode) {
case MESSAGE:
    valueTextField.setVisible(false);
  messageLabel.setFont(messageFont);
messageLabel.setForeground(MESSAGE_COLOR);
break;
case INPUT:
valueTextField.setVisible(true);
messageLabel.setFont(dialogFont);
messageLabel.setForeground(DIALOG_COLOR);
break;
}
validate();
}","public void setMode(DIALOG_MODE mode){
  this.mode=mode;
switch (mode) {
case MESSAGE:
    valueTextField.setVisible(false);
  messageLabel.setFont(messageFont);
messageLabel.setForeground(MESSAGE_COLOR);
break;
case INPUT:
valueTextField.setVisible(true);
messageLabel.setFont(dialogFont);
messageLabel.setForeground(DIALOG_COLOR);
break;
default :
break;
}
validate();
}"
45822,"public void setType(MESSAGE_TYPE type){
  this.type=type;
switch (type) {
case INFO:
    iconLabel.setIcon(new ImageIcon(getClass().getResource(""String_Node_Str"")));
  break;
case WARNING:
iconLabel.setIcon(new ImageIcon(getClass().getResource(""String_Node_Str"")));
break;
case ERROR:
iconLabel.setIcon(new ImageIcon(getClass().getResource(""String_Node_Str"")));
break;
case QUERY:
iconLabel.setIcon(new ImageIcon(getClass().getResource(""String_Node_Str"")));
break;
}
validate();
}","public void setType(MESSAGE_TYPE type){
  this.type=type;
switch (type) {
case INFO:
    iconLabel.setIcon(new ImageIcon(getClass().getResource(""String_Node_Str"")));
  break;
case WARNING:
iconLabel.setIcon(new ImageIcon(getClass().getResource(""String_Node_Str"")));
break;
case ERROR:
iconLabel.setIcon(new ImageIcon(getClass().getResource(""String_Node_Str"")));
break;
case QUERY:
iconLabel.setIcon(new ImageIcon(getClass().getResource(""String_Node_Str"")));
break;
default :
break;
}
validate();
}"
45823,"/** 
 * Removes a bound property listener from the dialog
 * @param listener the listener to remove
 */
@Override public synchronized void removePropertyChangeListener(PropertyChangeListener listener){
  if (listeners != null) {
    listeners.removePropertyChangeListener(listener);
  }
}","/** 
 * Removes a bound property listener from the dialog
 * @param listener the listener to remove
 */
@Override public void removePropertyChangeListener(PropertyChangeListener listener){
  if (listeners != null) {
    listeners.removePropertyChangeListener(listener);
  }
}"
45824,"/** 
 * {@inheritDoc}
 */
@Override public Vector2f getLocation(HUDComponent component){
  Vector2f location=new Vector2f();
  if (component == null) {
    return location;
  }
  HUDView2D view2d=(HUDView2D)hudViewMap.get(component);
  if (view2d == null) {
    return location;
  }
  float compWidth=view2d.getDisplayerLocalWidth();
  float compHeight=view2d.getDisplayerLocalHeight();
  int hudWidth=hud.getWidth();
  int hudHeight=hud.getHeight();
  location=positionMap.get(component);
  if (location == null) {
    location=new Vector2f(nextX,nextY);
    nextX+=compWidth + X_GAP;
  }
  int x=(int)location.x;
  int y=(int)location.y;
  if (x < hud.getX() + MIN_LEFT_MARGIN) {
    x=hud.getX() + MIN_LEFT_MARGIN;
  }
 else   if (x + compWidth > hud.getX() + hudWidth - MIN_RIGHT_MARGIN) {
    x=MIN_LEFT_MARGIN;
    y+=compHeight + Y_GAP;
  }
  if (y < hud.getY() + MIN_BOTTOM_MARGIN) {
    y=hud.getY() + MIN_BOTTOM_MARGIN;
  }
 else   if (y + compHeight > hud.getY() + hudHeight - MIN_TOP_MARGIN) {
    y=(int)(hud.getY() + hudHeight - MIN_TOP_MARGIN - compHeight);
  }
  location.set(x,y);
  positionMap.put(component,location);
  return location;
}","/** 
 * {@inheritDoc}
 */
@Override public Vector2f getLocation(HUDComponent component){
  Vector2f location=new Vector2f();
  if ((component != null) && (hudViewMap.get(component) != null)) {
    HUDView2D view2d=(HUDView2D)hudViewMap.get(component);
    float compWidth=view2d.getDisplayerLocalWidth();
    float compHeight=view2d.getDisplayerLocalHeight();
    int hudWidth=hud.getWidth();
    int hudHeight=hud.getHeight();
    location=positionMap.get(component);
    if (location == null) {
      location=new Vector2f(nextX,nextY);
      nextX+=compWidth + X_GAP;
    }
    int x=(int)location.x;
    int y=(int)location.y;
    if (x < hud.getX() + MIN_LEFT_MARGIN) {
      x=hud.getX() + MIN_LEFT_MARGIN;
    }
 else     if (x + compWidth > hud.getX() + hudWidth - MIN_RIGHT_MARGIN) {
      x=MIN_LEFT_MARGIN;
      y+=compHeight + Y_GAP;
    }
    if (y < hud.getY() + MIN_BOTTOM_MARGIN) {
      y=hud.getY() + MIN_BOTTOM_MARGIN;
    }
 else     if (y + compHeight > hud.getY() + hudHeight - MIN_TOP_MARGIN) {
      y=(int)(hud.getY() + hudHeight - MIN_TOP_MARGIN - compHeight);
    }
    location.set(x,y);
    positionMap.put(component,location);
  }
  return location;
}"
45825,"public HUDObject2D(){
  listeners=new ConcurrentLinkedQueue();
  eventQueue=new ConcurrentLinkedQueue();
  bounds=new Rectangle2D.Double();
  id=(int)(Math.random() * 10000);
}","public HUDObject2D(){
  listeners=new ConcurrentLinkedQueue();
  eventQueue=new ConcurrentLinkedQueue();
  bounds=new Rectangle2D.Double();
  id=new Random().nextInt(10000);
}"
45826,"public void attachView(HUDView2D view){
  logger.fine(""String_Node_Str"" + view + ""String_Node_Str""+ this);
  Entity e=view.getEntity();
  RenderComponent rcFrame=(RenderComponent)e.getComponent(RenderComponent.class);
  GeometryNode node=this.getGeometryNode();
  rcFrame.setAttachPoint(this.getGeometryNode());
}","public void attachView(HUDView2D view){
  logger.fine(""String_Node_Str"" + view + ""String_Node_Str""+ this);
  Entity e=view.getEntity();
  RenderComponent rcFrame=(RenderComponent)e.getComponent(RenderComponent.class);
  rcFrame.setAttachPoint(this.getGeometryNode());
}"
45827,"public void run(){
  ReconnectFrame rf=new ReconnectFrame(JmeClientMain.this,mgr);
  rf.pack();
  rf.setLocationRelativeTo(JmeClientMain.getFrame().getFrame());
  rf.setVisible(true);
}","public void run(){
  ReconnectDialog rf=new ReconnectDialog(JmeClientMain.this,mgr);
  rf.setVisible(true);
}"
45828,"public void sessionStatusChanged(WonderlandSession session,Status status){
  if (status == Status.DISCONNECTED) {
    ServerSessionManager serverSessionManager=session.getSessionManager();
    ClientContextJME.removeAllPhysicsSystems(serverSessionManager);
    ClientContextJME.removeAllCollisionSystems(serverSessionManager);
    boolean inLogout;
synchronized (JmeClientMain.this) {
      inLogout=loggingOut;
    }
    if (!inLogout) {
      final ServerSessionManager mgr=curSession.getSessionManager();
      LOGGER.warning(""String_Node_Str"");
      logout();
      SwingUtilities.invokeLater(new Runnable(){
        public void run(){
          ReconnectFrame rf=new ReconnectFrame(JmeClientMain.this,mgr);
          rf.pack();
          rf.setLocationRelativeTo(JmeClientMain.getFrame().getFrame());
          rf.setVisible(true);
        }
      }
);
    }
 else {
synchronized (JmeClientMain.this) {
        loggingOut=false;
      }
    }
  }
}","public void sessionStatusChanged(WonderlandSession session,Status status){
  if (status == Status.DISCONNECTED) {
    ServerSessionManager serverSessionManager=session.getSessionManager();
    ClientContextJME.removeAllPhysicsSystems(serverSessionManager);
    ClientContextJME.removeAllCollisionSystems(serverSessionManager);
    boolean inLogout;
synchronized (JmeClientMain.this) {
      inLogout=loggingOut;
    }
    if (!inLogout) {
      final ServerSessionManager mgr=curSession.getSessionManager();
      LOGGER.warning(""String_Node_Str"");
      logout();
      SwingUtilities.invokeLater(new Runnable(){
        public void run(){
          ReconnectDialog rf=new ReconnectDialog(JmeClientMain.this,mgr);
          rf.setVisible(true);
        }
      }
);
    }
 else {
synchronized (JmeClientMain.this) {
        loggingOut=false;
      }
    }
  }
}"
45829,"protected void loadServer(String serverURL,Vector3f translation,Quaternion look) throws IOException {
  LOGGER.info(""String_Node_Str"" + serverURL);
  logout();
  ServerSessionManager lm=LoginManager.getSessionManager(serverURL);
  WorldManager worldManager=ClientContextJME.getWorldManager();
  CollisionManager collisionManager=worldManager.getCollisionManager();
  CollisionSystem collisionSystem=collisionManager.loadCollisionSystem(JBulletDynamicCollisionSystem.class);
  JBulletDynamicCollisionSystem jBulletCollisionSystem=(JBulletDynamicCollisionSystem)collisionSystem;
  PhysicsManager physicsManager=worldManager.getPhysicsManager();
  JBulletPhysicsSystem jBulletPhysicsSystem=(JBulletPhysicsSystem)physicsManager.loadPhysicsSystem(JBulletPhysicsSystem.class,jBulletCollisionSystem);
  ClientContextJME.addCollisionSystem(lm,""String_Node_Str"",jBulletCollisionSystem);
  ClientContextJME.addPhysicsSystem(lm,""String_Node_Str"",jBulletPhysicsSystem);
  JMECollisionSystem jmeCollisionSystem=(JMECollisionSystem)collisionManager.loadCollisionSystem(JMECollisionSystem.class);
  ClientContextJME.addCollisionSystem(lm,""String_Node_Str"",jmeCollisionSystem);
  login.setInitialPosition(translation,look);
  try {
    curSession=lm.createSession(login);
  }
 catch (  LoginFailureException lfe) {
    IOException ioe=new IOException(""String_Node_Str"" + serverURL);
    ioe.initCause(lfe);
    throw ioe;
  }
  if (curSession == null) {
    LOGGER.log(Level.WARNING,""String_Node_Str"");
    return;
  }
  frame.connected(true);
  curSession.addSessionStatusListener(new SessionStatusListener(){
    public void sessionStatusChanged(    WonderlandSession session,    Status status){
      if (status == Status.DISCONNECTED) {
        ServerSessionManager serverSessionManager=session.getSessionManager();
        ClientContextJME.removeAllPhysicsSystems(serverSessionManager);
        ClientContextJME.removeAllCollisionSystems(serverSessionManager);
        boolean inLogout;
synchronized (JmeClientMain.this) {
          inLogout=loggingOut;
        }
        if (!inLogout) {
          final ServerSessionManager mgr=curSession.getSessionManager();
          LOGGER.warning(""String_Node_Str"");
          logout();
          SwingUtilities.invokeLater(new Runnable(){
            public void run(){
              ReconnectFrame rf=new ReconnectFrame(JmeClientMain.this,mgr);
              rf.pack();
              rf.setLocationRelativeTo(JmeClientMain.getFrame().getFrame());
              rf.setVisible(true);
            }
          }
);
        }
 else {
synchronized (JmeClientMain.this) {
            loggingOut=false;
          }
        }
      }
    }
  }
);
  LoginManager.setPrimary(lm);
  lm.setPrimarySession(curSession);
  frame.setServerURL(serverURL);
}","protected void loadServer(String serverURL,Vector3f translation,Quaternion look) throws IOException {
  LOGGER.info(""String_Node_Str"" + serverURL);
  logout();
  ServerSessionManager lm=LoginManager.getSessionManager(serverURL);
  WorldManager worldManager=ClientContextJME.getWorldManager();
  CollisionManager collisionManager=worldManager.getCollisionManager();
  CollisionSystem collisionSystem=collisionManager.loadCollisionSystem(JBulletDynamicCollisionSystem.class);
  JBulletDynamicCollisionSystem jBulletCollisionSystem=(JBulletDynamicCollisionSystem)collisionSystem;
  PhysicsManager physicsManager=worldManager.getPhysicsManager();
  JBulletPhysicsSystem jBulletPhysicsSystem=(JBulletPhysicsSystem)physicsManager.loadPhysicsSystem(JBulletPhysicsSystem.class,jBulletCollisionSystem);
  ClientContextJME.addCollisionSystem(lm,""String_Node_Str"",jBulletCollisionSystem);
  ClientContextJME.addPhysicsSystem(lm,""String_Node_Str"",jBulletPhysicsSystem);
  JMECollisionSystem jmeCollisionSystem=(JMECollisionSystem)collisionManager.loadCollisionSystem(JMECollisionSystem.class);
  ClientContextJME.addCollisionSystem(lm,""String_Node_Str"",jmeCollisionSystem);
  login.setInitialPosition(translation,look);
  try {
    curSession=lm.createSession(login);
  }
 catch (  LoginFailureException lfe) {
    IOException ioe=new IOException(""String_Node_Str"" + serverURL);
    ioe.initCause(lfe);
    throw ioe;
  }
  if (curSession == null) {
    LOGGER.log(Level.WARNING,""String_Node_Str"");
    return;
  }
  frame.connected(true);
  curSession.addSessionStatusListener(new SessionStatusListener(){
    public void sessionStatusChanged(    WonderlandSession session,    Status status){
      if (status == Status.DISCONNECTED) {
        ServerSessionManager serverSessionManager=session.getSessionManager();
        ClientContextJME.removeAllPhysicsSystems(serverSessionManager);
        ClientContextJME.removeAllCollisionSystems(serverSessionManager);
        boolean inLogout;
synchronized (JmeClientMain.this) {
          inLogout=loggingOut;
        }
        if (!inLogout) {
          final ServerSessionManager mgr=curSession.getSessionManager();
          LOGGER.warning(""String_Node_Str"");
          logout();
          SwingUtilities.invokeLater(new Runnable(){
            public void run(){
              ReconnectDialog rf=new ReconnectDialog(JmeClientMain.this,mgr);
              rf.setVisible(true);
            }
          }
);
        }
 else {
synchronized (JmeClientMain.this) {
            loggingOut=false;
          }
        }
      }
    }
  }
);
  LoginManager.setPrimary(lm);
  lm.setPrimarySession(curSession);
  frame.setServerURL(serverURL);
}"
45830,"private void userListValueChanged(javax.swing.event.ListSelectionEvent evt){
  Object[] selectedValues=userList.getSelectedValues();
  if (selectedValues.length == 0) {
    editButton.setEnabled(false);
    volumeLabel.setText(BUNDLE.getString(""String_Node_Str""));
    volumeSlider.setEnabled(false);
    controlPanel.setVisible(false);
    textChatButton.setEnabled(false);
    voiceChatButton.setEnabled(false);
    panelToggleButton.setIcon(upIcon);
  }
 else   if (selectedValues.length == 1) {
    controlPanel.setVisible(true);
    volumeSlider.setEnabled(true);
    textChatButton.setEnabled(true);
    panelToggleButton.setIcon(downIcon);
    String username=NameTagNode.getUsername((String)selectedValues[0]);
    PresenceInfo info=pm.getAliasPresenceInfo(username);
    if (info == null) {
      LOGGER.warning(""String_Node_Str"" + username);
      editButton.setEnabled(false);
      return;
    }
    if (isMe(info)) {
      volumeLabel.setText(BUNDLE.getString(""String_Node_Str""));
      editButton.setEnabled(true);
      textChatButton.setEnabled(false);
      voiceChatButton.setEnabled(false);
    }
 else {
      String text=BUNDLE.getString(""String_Node_Str"");
      text=MessageFormat.format(text,username);
      volumeLabel.setText(text);
      editButton.setEnabled(false);
      textChatButton.setEnabled(true);
      voiceChatButton.setEnabled(true);
    }
    if (presenceInfo != null) {
      Integer v=volumeChangeMap.get(presenceInfo);
      if (v != null) {
        volumeSlider.setValue(v.intValue());
      }
    }
  }
 else {
    String text=BUNDLE.getString(""String_Node_Str"");
    text=MessageFormat.format(text,selectedValues.length);
    volumeLabel.setText(text);
    volumeSlider.setEnabled(true);
    volumeSlider.setValue(5);
    textChatButton.setEnabled(false);
    voiceChatButton.setEnabled(true);
    panelToggleButton.setIcon(downIcon);
  }
}","private void userListValueChanged(javax.swing.event.ListSelectionEvent evt){
  Object[] selectedValues=userList.getSelectedValues();
  if (selectedValues.length == 0) {
    editButton.setEnabled(false);
    volumeLabel.setText(BUNDLE.getString(""String_Node_Str""));
    volumeSlider.setEnabled(false);
    controlPanel.setVisible(false);
    textChatButton.setEnabled(false);
    voiceChatButton.setEnabled(false);
    panelToggleButton.setIcon(upIcon);
  }
 else   if (selectedValues.length == 1) {
    controlPanel.setVisible(true);
    volumeSlider.setEnabled(true);
    textChatButton.setEnabled(true);
    panelToggleButton.setIcon(downIcon);
    String username=NameTagNode.getUsername((String)selectedValues[0]);
    PresenceInfo info=pm.getAliasPresenceInfo(username);
    if (info == null) {
      LOGGER.warning(""String_Node_Str"" + username);
      editButton.setEnabled(false);
      return;
    }
    if (isMe(info)) {
      volumeLabel.setText(BUNDLE.getString(""String_Node_Str""));
      editButton.setEnabled(true);
      textChatButton.setEnabled(false);
      voiceChatButton.setEnabled(false);
    }
 else {
      String text=BUNDLE.getString(""String_Node_Str"");
      text=MessageFormat.format(text,username);
      volumeLabel.setText(text);
      editButton.setEnabled(false);
      textChatButton.setEnabled(true);
      voiceChatButton.setEnabled(true);
    }
    if (info != null) {
      Integer v=volumeChangeMap.get(info);
      if (v != null) {
        volumeSlider.setValue(v.intValue());
      }
 else {
        volumeSlider.setValue(DEFAULT_SLIDER_VOLUME);
      }
    }
  }
 else {
    String text=BUNDLE.getString(""String_Node_Str"");
    text=MessageFormat.format(text,selectedValues.length);
    volumeLabel.setText(text);
    volumeSlider.setEnabled(true);
    volumeSlider.setValue(DEFAULT_SLIDER_VOLUME);
    textChatButton.setEnabled(false);
    voiceChatButton.setEnabled(true);
    panelToggleButton.setIcon(downIcon);
  }
}"
45831,"/** 
 * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
 */
@SuppressWarnings(""String_Node_Str"") private void initComponents(){
  controlPanel=new javax.swing.JPanel();
  muteButton=new javax.swing.JButton();
  textChatButton=new javax.swing.JButton();
  voiceChatButton=new javax.swing.JButton();
  phoneButton=new javax.swing.JButton();
  editButton=new javax.swing.JButton();
  propertiesButton=new javax.swing.JButton();
  volumeLabel=new javax.swing.JLabel();
  volumeSlider=new javax.swing.JSlider();
  userListScrollPane=new javax.swing.JScrollPane();
  userList=new javax.swing.JList();
  jPanel1=new javax.swing.JPanel();
  panelToggleButton=new javax.swing.JButton();
  setPreferredSize(new java.awt.Dimension(179,300));
  muteButton.setIcon(new javax.swing.ImageIcon(getClass().getResource(""String_Node_Str"")));
  java.util.ResourceBundle bundle=java.util.ResourceBundle.getBundle(""String_Node_Str"");
  muteButton.setToolTipText(bundle.getString(""String_Node_Str""));
  muteButton.setBorderPainted(false);
  muteButton.setMargin(new java.awt.Insets(0,-4,0,-4));
  muteButton.setMaximumSize(new java.awt.Dimension(24,24));
  muteButton.setMinimumSize(new java.awt.Dimension(24,24));
  muteButton.setPreferredSize(new java.awt.Dimension(24,24));
  muteButton.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      muteButtonActionPerformed(evt);
    }
  }
);
  textChatButton.setIcon(new javax.swing.ImageIcon(getClass().getResource(""String_Node_Str"")));
  textChatButton.setToolTipText(bundle.getString(""String_Node_Str""));
  textChatButton.setBorderPainted(false);
  textChatButton.setMargin(new java.awt.Insets(0,-4,0,-4));
  textChatButton.setMaximumSize(new java.awt.Dimension(24,24));
  textChatButton.setMinimumSize(new java.awt.Dimension(24,24));
  textChatButton.setPreferredSize(new java.awt.Dimension(24,24));
  textChatButton.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      textChatButtonActionPerformed(evt);
    }
  }
);
  voiceChatButton.setIcon(new javax.swing.ImageIcon(getClass().getResource(""String_Node_Str"")));
  voiceChatButton.setToolTipText(bundle.getString(""String_Node_Str""));
  voiceChatButton.setMaximumSize(new java.awt.Dimension(24,24));
  voiceChatButton.setMinimumSize(new java.awt.Dimension(24,24));
  voiceChatButton.setPreferredSize(new java.awt.Dimension(24,24));
  voiceChatButton.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      voiceChatButtonActionPerformed(evt);
    }
  }
);
  phoneButton.setIcon(new javax.swing.ImageIcon(getClass().getResource(""String_Node_Str"")));
  phoneButton.setToolTipText(bundle.getString(""String_Node_Str""));
  phoneButton.setMaximumSize(new java.awt.Dimension(24,24));
  phoneButton.setMinimumSize(new java.awt.Dimension(24,24));
  phoneButton.setPreferredSize(new java.awt.Dimension(24,24));
  phoneButton.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      phoneButtonActionPerformed(evt);
    }
  }
);
  editButton.setIcon(new javax.swing.ImageIcon(getClass().getResource(""String_Node_Str"")));
  editButton.setToolTipText(bundle.getString(""String_Node_Str""));
  editButton.setMaximumSize(new java.awt.Dimension(24,24));
  editButton.setMinimumSize(new java.awt.Dimension(24,24));
  editButton.setPreferredSize(new java.awt.Dimension(24,24));
  editButton.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      editButtonActionPerformed(evt);
    }
  }
);
  propertiesButton.setIcon(new javax.swing.ImageIcon(getClass().getResource(""String_Node_Str"")));
  propertiesButton.setToolTipText(bundle.getString(""String_Node_Str""));
  propertiesButton.setMaximumSize(new java.awt.Dimension(24,24));
  propertiesButton.setMinimumSize(new java.awt.Dimension(24,24));
  propertiesButton.setPreferredSize(new java.awt.Dimension(24,24));
  propertiesButton.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      propertiesButtonActionPerformed(evt);
    }
  }
);
  volumeLabel.setText(bundle.getString(""String_Node_Str""));
  volumeSlider.setMajorTickSpacing(1);
  volumeSlider.setMaximum(10);
  volumeSlider.setMinorTickSpacing(1);
  volumeSlider.setPaintLabels(true);
  volumeSlider.setPaintTicks(true);
  volumeSlider.setSnapToTicks(true);
  volumeSlider.setValue(5);
  volumeSlider.setMinimumSize(new java.awt.Dimension(36,85));
  volumeSlider.addChangeListener(new javax.swing.event.ChangeListener(){
    public void stateChanged(    javax.swing.event.ChangeEvent evt){
      volumeSliderStateChanged(evt);
    }
  }
);
  org.jdesktop.layout.GroupLayout controlPanelLayout=new org.jdesktop.layout.GroupLayout(controlPanel);
  controlPanel.setLayout(controlPanelLayout);
  controlPanelLayout.setHorizontalGroup(controlPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(controlPanelLayout.createSequentialGroup().addContainerGap().add(controlPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(volumeSlider,org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,159,Short.MAX_VALUE).add(controlPanelLayout.createSequentialGroup().add(muteButton,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE).add(3,3,3).add(textChatButton,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE).add(3,3,3).add(voiceChatButton,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE).add(3,3,3).add(phoneButton,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE).add(3,3,3).add(editButton,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE).add(3,3,3).add(propertiesButton,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)).add(volumeLabel,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,151,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)).addContainerGap()));
  controlPanelLayout.setVerticalGroup(controlPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(controlPanelLayout.createSequentialGroup().addContainerGap().add(controlPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(textChatButton,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE).add(muteButton,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE).add(voiceChatButton,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE).add(editButton,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE).add(propertiesButton,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE).add(phoneButton,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)).addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED).add(volumeLabel).addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED).add(volumeSlider,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,40,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE).addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,Short.MAX_VALUE)));
  userListScrollPane.setPreferredSize(new java.awt.Dimension(260,300));
  userList.setFont(userList.getFont());
  userList.addListSelectionListener(new javax.swing.event.ListSelectionListener(){
    public void valueChanged(    javax.swing.event.ListSelectionEvent evt){
      userListValueChanged(evt);
    }
  }
);
  userListScrollPane.setViewportView(userList);
  jPanel1.setMaximumSize(new java.awt.Dimension(32767,17));
  jPanel1.setMinimumSize(new java.awt.Dimension(100,17));
  jPanel1.setPreferredSize(new java.awt.Dimension(164,17));
  panelToggleButton.setIcon(new javax.swing.ImageIcon(getClass().getResource(""String_Node_Str"")));
  panelToggleButton.setBorder(null);
  panelToggleButton.setMaximumSize(new java.awt.Dimension(63,14));
  panelToggleButton.setMinimumSize(new java.awt.Dimension(63,14));
  panelToggleButton.setPreferredSize(new java.awt.Dimension(63,14));
  panelToggleButton.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      panelToggleButtonActionPerformed(evt);
    }
  }
);
  org.jdesktop.layout.GroupLayout jPanel1Layout=new org.jdesktop.layout.GroupLayout(jPanel1);
  jPanel1.setLayout(jPanel1Layout);
  jPanel1Layout.setHorizontalGroup(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(org.jdesktop.layout.GroupLayout.TRAILING,jPanel1Layout.createSequentialGroup().addContainerGap(155,Short.MAX_VALUE).add(panelToggleButton,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,28,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)));
  jPanel1Layout.setVerticalGroup(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(panelToggleButton,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE));
  org.jdesktop.layout.GroupLayout layout=new org.jdesktop.layout.GroupLayout(this);
  this.setLayout(layout);
  layout.setHorizontalGroup(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(userListScrollPane,org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,183,Short.MAX_VALUE).add(org.jdesktop.layout.GroupLayout.TRAILING,controlPanel,org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,Short.MAX_VALUE).add(jPanel1,org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,183,Short.MAX_VALUE));
  layout.setVerticalGroup(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(layout.createSequentialGroup().add(userListScrollPane,org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,179,Short.MAX_VALUE).add(0,0,0).add(controlPanel,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,101,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE).addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED).add(jPanel1,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,14,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)));
}","/** 
 * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
 */
@SuppressWarnings(""String_Node_Str"") private void initComponents(){
  controlPanel=new javax.swing.JPanel();
  muteButton=new javax.swing.JButton();
  textChatButton=new javax.swing.JButton();
  voiceChatButton=new javax.swing.JButton();
  phoneButton=new javax.swing.JButton();
  editButton=new javax.swing.JButton();
  propertiesButton=new javax.swing.JButton();
  volumeLabel=new javax.swing.JLabel();
  volumeSlider=new javax.swing.JSlider();
  userListScrollPane=new javax.swing.JScrollPane();
  userList=new javax.swing.JList();
  jPanel1=new javax.swing.JPanel();
  panelToggleButton=new javax.swing.JButton();
  setPreferredSize(new java.awt.Dimension(179,300));
  muteButton.setIcon(new javax.swing.ImageIcon(getClass().getResource(""String_Node_Str"")));
  java.util.ResourceBundle bundle=java.util.ResourceBundle.getBundle(""String_Node_Str"");
  muteButton.setToolTipText(bundle.getString(""String_Node_Str""));
  muteButton.setBorderPainted(false);
  muteButton.setMargin(new java.awt.Insets(0,-4,0,-4));
  muteButton.setMaximumSize(new java.awt.Dimension(24,24));
  muteButton.setMinimumSize(new java.awt.Dimension(24,24));
  muteButton.setPreferredSize(new java.awt.Dimension(24,24));
  muteButton.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      muteButtonActionPerformed(evt);
    }
  }
);
  textChatButton.setIcon(new javax.swing.ImageIcon(getClass().getResource(""String_Node_Str"")));
  textChatButton.setToolTipText(bundle.getString(""String_Node_Str""));
  textChatButton.setBorderPainted(false);
  textChatButton.setMargin(new java.awt.Insets(0,-4,0,-4));
  textChatButton.setMaximumSize(new java.awt.Dimension(24,24));
  textChatButton.setMinimumSize(new java.awt.Dimension(24,24));
  textChatButton.setPreferredSize(new java.awt.Dimension(24,24));
  textChatButton.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      textChatButtonActionPerformed(evt);
    }
  }
);
  voiceChatButton.setIcon(new javax.swing.ImageIcon(getClass().getResource(""String_Node_Str"")));
  voiceChatButton.setToolTipText(bundle.getString(""String_Node_Str""));
  voiceChatButton.setMaximumSize(new java.awt.Dimension(24,24));
  voiceChatButton.setMinimumSize(new java.awt.Dimension(24,24));
  voiceChatButton.setPreferredSize(new java.awt.Dimension(24,24));
  voiceChatButton.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      voiceChatButtonActionPerformed(evt);
    }
  }
);
  phoneButton.setIcon(new javax.swing.ImageIcon(getClass().getResource(""String_Node_Str"")));
  phoneButton.setToolTipText(bundle.getString(""String_Node_Str""));
  phoneButton.setMaximumSize(new java.awt.Dimension(24,24));
  phoneButton.setMinimumSize(new java.awt.Dimension(24,24));
  phoneButton.setPreferredSize(new java.awt.Dimension(24,24));
  phoneButton.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      phoneButtonActionPerformed(evt);
    }
  }
);
  editButton.setIcon(new javax.swing.ImageIcon(getClass().getResource(""String_Node_Str"")));
  editButton.setToolTipText(bundle.getString(""String_Node_Str""));
  editButton.setMaximumSize(new java.awt.Dimension(24,24));
  editButton.setMinimumSize(new java.awt.Dimension(24,24));
  editButton.setPreferredSize(new java.awt.Dimension(24,24));
  editButton.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      editButtonActionPerformed(evt);
    }
  }
);
  propertiesButton.setIcon(new javax.swing.ImageIcon(getClass().getResource(""String_Node_Str"")));
  propertiesButton.setToolTipText(bundle.getString(""String_Node_Str""));
  propertiesButton.setMaximumSize(new java.awt.Dimension(24,24));
  propertiesButton.setMinimumSize(new java.awt.Dimension(24,24));
  propertiesButton.setPreferredSize(new java.awt.Dimension(24,24));
  propertiesButton.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      propertiesButtonActionPerformed(evt);
    }
  }
);
  volumeLabel.setText(bundle.getString(""String_Node_Str""));
  volumeSlider.setMajorTickSpacing(1);
  volumeSlider.setMaximum(10);
  volumeSlider.setMinorTickSpacing(1);
  volumeSlider.setPaintLabels(true);
  volumeSlider.setPaintTicks(true);
  volumeSlider.setSnapToTicks(true);
  volumeSlider.setValue(DEFAULT_SLIDER_VOLUME);
  volumeSlider.setMinimumSize(new java.awt.Dimension(36,85));
  volumeSlider.addChangeListener(new javax.swing.event.ChangeListener(){
    public void stateChanged(    javax.swing.event.ChangeEvent evt){
      volumeSliderStateChanged(evt);
    }
  }
);
  org.jdesktop.layout.GroupLayout controlPanelLayout=new org.jdesktop.layout.GroupLayout(controlPanel);
  controlPanel.setLayout(controlPanelLayout);
  controlPanelLayout.setHorizontalGroup(controlPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(controlPanelLayout.createSequentialGroup().addContainerGap().add(controlPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(volumeSlider,org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,159,Short.MAX_VALUE).add(controlPanelLayout.createSequentialGroup().add(muteButton,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE).add(3,3,3).add(textChatButton,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE).add(3,3,3).add(voiceChatButton,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE).add(3,3,3).add(phoneButton,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE).add(3,3,3).add(editButton,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE).add(3,3,3).add(propertiesButton,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)).add(volumeLabel,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,151,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)).addContainerGap()));
  controlPanelLayout.setVerticalGroup(controlPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(controlPanelLayout.createSequentialGroup().addContainerGap().add(controlPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(textChatButton,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE).add(muteButton,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE).add(voiceChatButton,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE).add(editButton,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE).add(propertiesButton,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE).add(phoneButton,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)).addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED).add(volumeLabel).addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED).add(volumeSlider,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,40,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE).addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,Short.MAX_VALUE)));
  userListScrollPane.setPreferredSize(new java.awt.Dimension(260,300));
  userList.setFont(userList.getFont());
  userList.addListSelectionListener(new javax.swing.event.ListSelectionListener(){
    public void valueChanged(    javax.swing.event.ListSelectionEvent evt){
      userListValueChanged(evt);
    }
  }
);
  userListScrollPane.setViewportView(userList);
  jPanel1.setMaximumSize(new java.awt.Dimension(32767,17));
  jPanel1.setMinimumSize(new java.awt.Dimension(100,17));
  jPanel1.setPreferredSize(new java.awt.Dimension(164,17));
  panelToggleButton.setIcon(new javax.swing.ImageIcon(getClass().getResource(""String_Node_Str"")));
  panelToggleButton.setBorder(null);
  panelToggleButton.setMaximumSize(new java.awt.Dimension(63,14));
  panelToggleButton.setMinimumSize(new java.awt.Dimension(63,14));
  panelToggleButton.setPreferredSize(new java.awt.Dimension(63,14));
  panelToggleButton.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      panelToggleButtonActionPerformed(evt);
    }
  }
);
  org.jdesktop.layout.GroupLayout jPanel1Layout=new org.jdesktop.layout.GroupLayout(jPanel1);
  jPanel1.setLayout(jPanel1Layout);
  jPanel1Layout.setHorizontalGroup(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(org.jdesktop.layout.GroupLayout.TRAILING,jPanel1Layout.createSequentialGroup().addContainerGap(155,Short.MAX_VALUE).add(panelToggleButton,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,28,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)));
  jPanel1Layout.setVerticalGroup(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(panelToggleButton,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE));
  org.jdesktop.layout.GroupLayout layout=new org.jdesktop.layout.GroupLayout(this);
  this.setLayout(layout);
  layout.setHorizontalGroup(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(userListScrollPane,org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,183,Short.MAX_VALUE).add(org.jdesktop.layout.GroupLayout.TRAILING,controlPanel,org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,Short.MAX_VALUE).add(jPanel1,org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,183,Short.MAX_VALUE));
  layout.setVerticalGroup(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(layout.createSequentialGroup().add(userListScrollPane,org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,179,Short.MAX_VALUE).add(0,0,0).add(controlPanel,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,101,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE).addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED).add(jPanel1,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,14,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)));
}"
45832,"public View2D createView(Window2D window){
  if (window instanceof WindowSwingHeader)   return null;
  HUDComponent component=mainHUD.createComponent(window);
  component.setPreferredLocation(Layout.CENTER);
  hudComponents.add(component);
  component.addEventListener(new HUDEventListener(){
    public void HUDObjectChanged(    HUDEvent e){
      if (e.getEventType().equals(HUDEvent.HUDEventType.CLOSED)) {
        app.setShowInHUD(false);
      }
    }
  }
);
  mainHUD.addComponent(component);
  component.setVisible(true);
  return null;
}","public View2D createView(Window2D window){
  if (window instanceof WindowSwingHeader)   return null;
  HUDComponent component=mainHUD.createComponent(window);
  component.setName(app.getName());
  component.setPreferredLocation(Layout.CENTER);
  hudComponents.add(component);
  component.addEventListener(new HUDEventListener(){
    public void HUDObjectChanged(    HUDEvent e){
      if (e.getEventType().equals(HUDEvent.HUDEventType.CLOSED)) {
        app.setShowInHUD(false);
      }
    }
  }
);
  mainHUD.addComponent(component);
  component.setVisible(true);
  return null;
}"
45833,"/** 
 */
public void primaryViewCellChanged(ViewCell oldViewCell,final ViewCell newViewCell){
  logger.info(""String_Node_Str"" + newViewCell.getName());
  CellRenderer rend=newViewCell.getCellRenderer(RendererType.RENDERER_JME);
  if (!(rend instanceof AvatarImiJME)) {
    logger.warning(""String_Node_Str"" + newViewCell.getName() + ""String_Node_Str"");
    return;
  }
  if (avatarCellRenderer != null) {
    avatarCellRenderer.removeAvatarChangedListener(avatarChangedListener);
  }
  avatarCellRenderer=(AvatarImiJME)rend;
  avatarCellRenderer.addAvatarChangedListener(avatarChangedListener);
  if (camState != null) {
    camState.setTargetCharacter(avatarCellRenderer.getAvatarCharacter());
    camModel.reset(camState);
  }
  if (gestureHUDRef != null && gestureHUDRef.get() != null) {
    gestureHUDRef.get().setAvatarCharacter(avatarCellRenderer.getAvatarCharacter());
  }
  if (inUseListener == null) {
    inUseListener=new AvatarInUseListener(){
      public void avatarInUse(      AvatarSPI avatar,      boolean isLocal){
        refreshAvatarInUse(newViewCell,isLocal);
      }
    }
;
    AvatarRegistry.getAvatarRegistry().addAvatarInUseListener(inUseListener);
  }
  refreshAvatarInUse(newViewCell,false);
  if (menusAdded == false) {
    MainFrame frame=JmeClientMain.getFrame();
    frame.addToWindowMenu(gestureMI,0);
    frame.addToToolsMenu(gravityEnabledMI,-1);
    frame.addToToolsMenu(collisionResponseEnabledMI,-1);
    frame.addToEditMenu(avatarConfigMI,0);
    if (frame instanceof MainFrameImpl) {
      ((MainFrameImpl)frame).addToCameraChoices(chaseCameraMI,3);
    }
 else {
      frame.addToViewMenu(chaseCameraMI,3);
    }
    if (avatarControlsMI != null) {
      frame.addToWindowMenu(avatarControlsMI,0);
    }
    if (avatarSettingsMI != null) {
      frame.addToEditMenu(avatarSettingsMI,1);
    }
    menusAdded=true;
  }
}","/** 
 */
public void primaryViewCellChanged(ViewCell oldViewCell,final ViewCell newViewCell){
  if (avatarCellRenderer != null) {
    avatarCellRenderer.removeAvatarChangedListener(avatarChangedListener);
  }
  if (newViewCell != null) {
    logger.info(""String_Node_Str"" + newViewCell.getName());
    CellRenderer rend=newViewCell.getCellRenderer(RendererType.RENDERER_JME);
    if (!(rend instanceof AvatarImiJME)) {
      logger.warning(""String_Node_Str"" + newViewCell.getName() + ""String_Node_Str"");
      return;
    }
    avatarCellRenderer=(AvatarImiJME)rend;
    avatarCellRenderer.addAvatarChangedListener(avatarChangedListener);
    if (camState != null) {
      camState.setTargetCharacter(avatarCellRenderer.getAvatarCharacter());
      camModel.reset(camState);
    }
    if (gestureHUDRef != null && gestureHUDRef.get() != null) {
      gestureHUDRef.get().setAvatarCharacter(avatarCellRenderer.getAvatarCharacter());
    }
    if (inUseListener == null) {
      inUseListener=new AvatarInUseListener(){
        public void avatarInUse(        AvatarSPI avatar,        boolean isLocal){
          refreshAvatarInUse(newViewCell,isLocal);
        }
      }
;
      AvatarRegistry.getAvatarRegistry().addAvatarInUseListener(inUseListener);
    }
    refreshAvatarInUse(newViewCell,false);
    if (menusAdded == false) {
      MainFrame frame=JmeClientMain.getFrame();
      frame.addToWindowMenu(gestureMI,0);
      frame.addToToolsMenu(gravityEnabledMI,-1);
      frame.addToToolsMenu(collisionResponseEnabledMI,-1);
      frame.addToEditMenu(avatarConfigMI,0);
      if (frame instanceof MainFrameImpl) {
        ((MainFrameImpl)frame).addToCameraChoices(chaseCameraMI,3);
      }
 else {
        frame.addToViewMenu(chaseCameraMI,3);
      }
      if (avatarControlsMI != null) {
        frame.addToWindowMenu(avatarControlsMI,0);
      }
      if (avatarSettingsMI != null) {
        frame.addToEditMenu(avatarSettingsMI,1);
      }
      menusAdded=true;
    }
  }
}"
45834,"public void primaryViewCellChanged(ViewCell oldViewCell,ViewCell newViewCell){
  logger.fine(""String_Node_Str"" + this + ""String_Node_Str""+ oldViewCell+ ""String_Node_Str""+ newViewCell);
  if (curViewCell != null) {
    curViewCell.removeTransformChangeListener(this);
  }
  curViewCell=newViewCell;
  curViewCell.addTransformChangeListener(this);
}","public void primaryViewCellChanged(ViewCell oldViewCell,ViewCell newViewCell){
  logger.fine(""String_Node_Str"" + this + ""String_Node_Str""+ oldViewCell+ ""String_Node_Str""+ newViewCell);
  if (curViewCell != null) {
    curViewCell.removeTransformChangeListener(this);
  }
  curViewCell=newViewCell;
  if (curViewCell != null)   curViewCell.addTransformChangeListener(this);
}"
45835,"/** 
 * Creates new form AddComponentDialog 
 */
public AddComponentDialog(CellPropertiesJFrame editframe,boolean modal,Cell cell){
  super(editframe,modal);
  this.cell=cell;
  this.editframe=editframe;
  initComponents();
  componentsTable=createTable();
  capabilityScrollPane.setViewportView(componentsTable);
  ListSelectionModel selectionModel=componentsTable.getSelectionModel();
  selectionModel.addListSelectionListener(new ListSelectionListener(){
    public void valueChanged(    ListSelectionEvent e){
      boolean isEnabled=componentsTable.getSelectedRow() != -1;
      okButton.setEnabled(isEnabled);
    }
  }
);
}","/** 
 * Creates new form AddComponentDialog 
 */
public AddComponentDialog(CellPropertiesJFrame editframe,boolean modal,Cell cell){
  super(editframe,modal);
  this.editframe=editframe;
  initComponents();
  componentsTable=createTable();
  capabilityScrollPane.setViewportView(componentsTable);
  ListSelectionModel selectionModel=componentsTable.getSelectionModel();
  selectionModel.addListSelectionListener(new ListSelectionListener(){
    public void valueChanged(    ListSelectionEvent e){
      boolean isEnabled=componentsTable.getSelectedRow() != -1;
      okButton.setEnabled(isEnabled);
    }
  }
);
}"
45836,"/** 
 * Creates the table based upon the list of registered components
 */
private JTable createTable(){
  CellComponentRegistry registry=CellComponentRegistry.getCellComponentRegistry();
  Set<CellComponentFactorySPI> factories=registry.getAllCellFactories();
  CellServerState state=editframe.getCellServerState();
  Iterator<CellComponentFactorySPI> it=factories.iterator();
  while (it.hasNext()) {
    CellComponentFactorySPI spi=it.next();
    Class clazz=spi.getDefaultCellComponentServerState().getClass();
    if (state.getComponentServerState(clazz) != null) {
      it.remove();
    }
  }
  List<CellComponentFactorySPI> factoryList=new LinkedList<CellComponentFactorySPI>(factories);
  Comparator nameComparator=new Comparator<CellComponentFactorySPI>(){
    public int compare(    CellComponentFactorySPI o1,    CellComponentFactorySPI o2){
      return o1.getDisplayName().compareTo(o2.getDisplayName());
    }
  }
;
  Collections.sort(factoryList,nameComparator);
  int size=factoryList.size();
  Object[][] entries=new Object[size][2];
  int i=0;
  for (  CellComponentFactorySPI factory : factoryList) {
    entries[i][0]=factory.getDisplayName();
    entries[i][1]=factory.getDescription();
    factoryMap.put(factory.getDisplayName(),factory);
    i++;
  }
  Object[] names=new Object[]{BUNDLE.getString(""String_Node_Str""),BUNDLE.getString(""String_Node_Str"")};
  JTable table=new JTable(entries,names);
  table.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
  return table;
}","/** 
 * Creates the table based upon the list of registered components
 */
private JTable createTable(){
  CellComponentRegistry registry=CellComponentRegistry.getCellComponentRegistry();
  Set<CellComponentFactorySPI> factories=registry.getAllCellFactories();
  CellServerState state=editframe.getCellServerState();
  Iterator<CellComponentFactorySPI> it=factories.iterator();
  while (it.hasNext() == true) {
    CellComponentFactorySPI spi=it.next();
    Class clazz=spi.getDefaultCellComponentServerState().getClass();
    if (state.getComponentServerState(clazz) != null) {
      it.remove();
    }
  }
  List<CellComponentFactorySPI> factoryList=new LinkedList(factories);
  Comparator nameComparator=new Comparator<CellComponentFactorySPI>(){
    public int compare(    CellComponentFactorySPI o1,    CellComponentFactorySPI o2){
      return o1.getDisplayName().compareTo(o2.getDisplayName());
    }
  }
;
  Collections.sort(factoryList,nameComparator);
  int size=factoryList.size();
  Object[][] entries=new Object[size][2];
  int i=0;
  for (  CellComponentFactorySPI factory : factoryList) {
    entries[i][0]=factory.getDisplayName();
    entries[i][1]=factory.getDescription();
    factoryMap.put(factory.getDisplayName(),factory);
    i++;
  }
  Object[] names=new Object[]{BUNDLE.getString(""String_Node_Str""),BUNDLE.getString(""String_Node_Str"")};
  JTable table=new JTable(entries,names);
  table.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
  return table;
}"
45837,"private void checkDirty(){
  String name=cellNameTextField.getText();
  if ((editor != null) && !name.equals(originalCellName)) {
    editor.setPanelDirty(BasicJPanel.class,true);
  }
 else   if (editor != null) {
    editor.setPanelDirty(BasicJPanel.class,false);
  }
}","private void checkDirty(){
  String name=cellNameTextField.getText();
  if (editor != null && name.equals(originalCellName) == false) {
    editor.setPanelDirty(BasicJPanel.class,true);
  }
 else   if (editor != null) {
    editor.setPanelDirty(BasicJPanel.class,false);
  }
}"
45838,"/** 
 * {@inheritDoc}
 */
public void HUDObjectChanged(HUDEvent event){
  logger.fine(""String_Node_Str"" + event);
  if (event.getObject() instanceof HUDComponent2D) {
    HUDComponent2D comp=(HUDComponent2D)event.getObject();
switch (event.getEventType()) {
case ADDED:
      addComponent(comp);
    break;
case REMOVED:
  removeComponent(comp);
break;
case APPEARED:
componentVisible(comp);
break;
case APPEARED_WORLD:
componentWorldVisible(comp);
break;
case DISAPPEARED:
componentInvisible(comp);
break;
case DISAPPEARED_WORLD:
componentWorldInvisible(comp);
break;
case CHANGED_MODE:
componentViewChanged(comp);
break;
case MOVED:
componentMoved(comp);
break;
case MOVED_WORLD:
componentMovedWorld(comp);
break;
case RESIZED:
componentResized(comp);
break;
case MINIMIZED:
componentMinimized(comp);
break;
case MAXIMIZED:
componentMaximized(comp);
break;
case ENABLED:
break;
case DISABLED:
break;
case CHANGED_TRANSPARENCY:
componentTransparencyChanged(comp);
break;
case CLOSED:
componentClosed(comp);
break;
default :
logger.info(""String_Node_Str"" + event.getEventType());
break;
}
}
}","/** 
 * {@inheritDoc}
 */
public void HUDObjectChanged(HUDEvent event){
  logger.fine(""String_Node_Str"" + event);
  if (event.getObject() instanceof HUDComponent2D) {
    handleHUDComponentChanged(event);
  }
 else   if (event.getObject() instanceof HUD) {
    handleHUDChanged(event);
  }
}"
45839,"private void hudResized(HUD hud){
  logger.info(""String_Node_Str"" + hud);
  if ((hud != null) && huds.containsValue(hud)) {
    relayout(hud);
  }
}","private void hudResized(HUD hud){
  logger.fine(""String_Node_Str"" + hud);
  if ((hud != null) && huds.containsValue(hud)) {
    relayout(hud);
  }
}"
45840,"/** 
 * {@inheritDoc}
 */
public void relayout(HUD hud){
}","/** 
 * {@inheritDoc}
 */
public void relayout(HUD hud){
  if (layout != null) {
    layout.relayout();
  }
}"
45841,"/** 
 * {@inheritDoc}
 */
@Override public void setViewCell(ViewCell viewCell){
  super.setViewCell(viewCell);
  ClientContextJME.getViewManager().register(viewCell);
  ClientContextJME.getViewManager().setPrimaryViewCell(viewCell);
}","/** 
 * {@inheritDoc}
 */
@Override public void setViewCell(ViewCell viewCell){
  super.setViewCell(viewCell);
  ClientContextJME.getViewManager().register(viewCell,getSession());
  ClientContextJME.getViewManager().setPrimaryViewCell(viewCell);
}"
45842,"/** 
 * @{inheritDoc }
 */
public void apply(){
  CellServerState cellServerState=editor.getCellServerState();
  AudioTreatmentComponentServerState state=(AudioTreatmentComponentServerState)cellServerState.getComponentServerState(AudioTreatmentComponentServerState.class);
  if (state == null) {
    return;
  }
  state.setGroupId(audioGroupIdTextField.getText());
  String treatments=fileTextField.getText();
  treatments=treatments.replaceAll(""String_Node_Str"",""String_Node_Str"");
  treatments=treatments.replaceAll(""String_Node_Str"",""String_Node_Str"");
  String urls=urlTextField.getText();
  urls=urls.replaceAll(""String_Node_Str"",""String_Node_Str"");
  urls=urls.replaceAll(""String_Node_Str"",""String_Node_Str"");
  if (urls.length() > 0) {
    if (treatments.length() > 0) {
      treatments+=""String_Node_Str"" + urls.split(""String_Node_Str"");
    }
 else {
      treatments=urls;
    }
  }
  state.setTreatments(treatments.split(""String_Node_Str""));
  state.setVolume(VolumeUtil.getServerVolume(volumeSlider.getValue()));
  state.setPlayWhen(playWhen);
  state.setExtent((Double)extentRadiusModel.getValue());
  state.setFullVolumeAreaPercent((Double)fullVolumeAreaPercentModel.getValue());
  state.setDistanceAttenuated(distanceAttenuated);
  state.setFalloff(falloffSlider.getValue());
  editor.addToUpdateList(state);
}","/** 
 * @{inheritDoc }
 */
public void apply(){
  CellServerState state=editor.getCellServerState();
  AudioTreatmentComponentServerState compState=(AudioTreatmentComponentServerState)state.getComponentServerState(AudioTreatmentComponentServerState.class);
  if (state == null) {
    return;
  }
  compState.setGroupId(audioGroupIdTextField.getText());
  String treatments=fileTextField.getText();
  treatments=treatments.replaceAll(""String_Node_Str"",""String_Node_Str"");
  treatments=treatments.replaceAll(""String_Node_Str"",""String_Node_Str"");
  String urls=urlTextField.getText();
  urls=urls.replaceAll(""String_Node_Str"",""String_Node_Str"");
  urls=urls.replaceAll(""String_Node_Str"",""String_Node_Str"");
  if (urls.length() > 0) {
    if (treatments.length() > 0) {
      treatments+=""String_Node_Str"" + urls.split(""String_Node_Str"");
    }
 else {
      treatments=urls;
    }
  }
  compState.setTreatments(treatments.split(""String_Node_Str""));
  compState.setVolume(VolumeUtil.getServerVolume(volumeSlider.getValue()));
  compState.setPlayWhen(playWhen);
  compState.setExtent((Double)extentRadiusModel.getValue());
  compState.setFullVolumeAreaPercent((Double)fullVolumeAreaPercentModel.getValue());
  compState.setDistanceAttenuated(distanceAttenuated);
  compState.setFalloff(falloffSlider.getValue());
  editor.addToUpdateList(compState);
}"
45843,"/** 
 * @{inheritDoc }
 */
public void open(){
  CellServerState cellServerState=editor.getCellServerState();
  AudioTreatmentComponentServerState state=(AudioTreatmentComponentServerState)cellServerState.getComponentServerState(AudioTreatmentComponentServerState.class);
  if (state == null) {
    return;
  }
  originalGroupId=state.getGroupId();
  audioGroupIdTextField.setText(originalGroupId);
  String[] treatmentList=state.getTreatments();
  originalFileTreatments=""String_Node_Str"";
  originalUrlTreatments=""String_Node_Str"";
  for (int i=0; i < treatmentList.length; i++) {
    String treatment=treatmentList[i];
    if (treatment.indexOf(""String_Node_Str"") > 0) {
      if (treatment.indexOf(""String_Node_Str"") < 0) {
        originalUrlTreatments+=treatment + ""String_Node_Str"";
      }
 else {
        originalFileTreatments+=treatment + ""String_Node_Str"";
      }
    }
  }
  originalFileTreatments=originalFileTreatments.trim();
  fileTextField.setText(originalFileTreatments);
  originalUrlTreatments=originalUrlTreatments.trim();
  urlTextField.setText(originalUrlTreatments);
  originalVolume=VolumeUtil.getClientVolume(state.getVolume());
  volumeSlider.setValue(originalVolume);
  originalPlayWhen=state.getPlayWhen();
  playWhen=originalPlayWhen;
switch (originalPlayWhen) {
case ALWAYS:
    alwaysRadioButton.setSelected(true);
  break;
case FIRST_IN_RANGE:
proximityRadioButton.setSelected(true);
break;
case MANUAL:
manualRadioButton.setSelected(true);
break;
}
originalExtentRadius=state.getExtent();
extentRadius=originalExtentRadius;
extentRadiusSpinner.setValue(originalExtentRadius);
extentRadiusSpinner.setEnabled(true);
extentRadiusSpinner.setValue((Double)extentRadius);
originalFullVolumeAreaPercent=state.getFullVolumeAreaPercent();
fullVolumeAreaPercentSpinner.setValue(originalFullVolumeAreaPercent);
originalDistanceAttenuated=state.getDistanceAttenuated();
distanceAttenuated=originalDistanceAttenuated;
distanceAttenuatedRadioButton.setSelected(originalDistanceAttenuated);
originalFalloff=(int)state.getFalloff();
falloffSlider.setValue(originalFalloff);
if (originalDistanceAttenuated == true) {
falloffSlider.setEnabled(true);
}
 else {
falloffSlider.setEnabled(false);
}
}","/** 
 * @{inheritDoc }
 */
public void open(){
  CellServerState state=editor.getCellServerState();
  AudioTreatmentComponentServerState compState=(AudioTreatmentComponentServerState)state.getComponentServerState(AudioTreatmentComponentServerState.class);
  if (state == null) {
    return;
  }
  originalGroupId=compState.getGroupId();
  audioGroupIdTextField.setText(originalGroupId);
  String[] treatmentList=compState.getTreatments();
  originalFileTreatments=""String_Node_Str"";
  originalUrlTreatments=""String_Node_Str"";
  for (int i=0; i < treatmentList.length; i++) {
    String treatment=treatmentList[i];
    if (treatment.indexOf(""String_Node_Str"") > 0) {
      if (treatment.indexOf(""String_Node_Str"") >= 0) {
        originalFileTreatments+=treatment + ""String_Node_Str"";
      }
 else {
        originalUrlTreatments+=treatment + ""String_Node_Str"";
      }
    }
 else {
      originalFileTreatments+=treatment + ""String_Node_Str"";
    }
  }
  originalFileTreatments=originalFileTreatments.trim();
  fileTextField.setText(originalFileTreatments);
  originalUrlTreatments=originalUrlTreatments.trim();
  urlTextField.setText(originalUrlTreatments);
  originalVolume=VolumeUtil.getClientVolume(compState.getVolume());
  volumeSlider.setValue(originalVolume);
  originalPlayWhen=compState.getPlayWhen();
  playWhen=originalPlayWhen;
switch (originalPlayWhen) {
case ALWAYS:
    alwaysRadioButton.setSelected(true);
  break;
case FIRST_IN_RANGE:
proximityRadioButton.setSelected(true);
break;
case MANUAL:
manualRadioButton.setSelected(true);
break;
}
originalExtentRadius=compState.getExtent();
extentRadius=originalExtentRadius;
extentRadiusSpinner.setValue(originalExtentRadius);
extentRadiusSpinner.setEnabled(true);
extentRadiusSpinner.setValue((Double)extentRadius);
originalFullVolumeAreaPercent=compState.getFullVolumeAreaPercent();
fullVolumeAreaPercentSpinner.setValue(originalFullVolumeAreaPercent);
originalDistanceAttenuated=compState.getDistanceAttenuated();
distanceAttenuated=originalDistanceAttenuated;
distanceAttenuatedRadioButton.setSelected(originalDistanceAttenuated);
originalFalloff=(int)compState.getFalloff();
falloffSlider.setValue(originalFalloff);
if (originalDistanceAttenuated == true) {
falloffSlider.setEnabled(true);
}
 else {
falloffSlider.setEnabled(false);
}
}"
45844,"/** 
 */
public void textMessage(String message,String fromUser,String toUser){
  if (toUser == null || toUser.equals(""String_Node_Str"")) {
    WeakReference<HUDComponent> ref=textChatHUDRefMap.get(""String_Node_Str"");
    if (ref == null) {
      return;
    }
    HUDComponent textChatHUDComponent=ref.get();
    TextChatPanel textChatPanel=textChatPanelRefMap.get(textChatHUDComponent).get();
    textChatPanel.appendTextMessage(message,fromUser);
    return;
  }
synchronized (textChatHUDRefMap) {
    WeakReference<HUDComponent> ref=textChatHUDRefMap.get(fromUser);
    if (ref != null) {
      HUDComponent textChatHUDComponent=ref.get();
      TextChatPanel textChatPanel=textChatPanelRefMap.get(textChatHUDComponent).get();
      textChatPanel.appendTextMessage(message,fromUser);
      return;
    }
    HUDComponent textChatHUDComponent=createTextChatHUD(fromUser);
    String name=BUNDLE.getString(""String_Node_Str"");
    name=MessageFormat.format(name,fromUser);
    textChatHUDComponent.setName(name);
    textChatHUDRefMap.put(fromUser,new WeakReference(textChatHUDComponent));
    TextChatPanel textChatPanel=textChatPanelRefMap.get(textChatHUDComponent).get();
    textChatPanel.setActive(textChatConnection,toUser,fromUser);
    textChatPanel.appendTextMessage(message,fromUser);
    textChatHUDComponent.setVisible(true);
  }
}","/** 
 */
public void textMessage(final String message,final String fromUser,final String toUser){
  SwingUtilities.invokeLater(new Runnable(){
    public void run(){
      if (toUser == null || toUser.equals(""String_Node_Str"") == true) {
        WeakReference<HUDComponent> ref=textChatHUDRefMap.get(""String_Node_Str"");
        if (ref == null) {
          return;
        }
        HUDComponent textChatHUDComponent=ref.get();
        TextChatPanel textChatPanel=textChatPanelRefMap.get(textChatHUDComponent).get();
        textChatPanel.appendTextMessage(message,fromUser);
        return;
      }
      WeakReference<HUDComponent> ref=textChatHUDRefMap.get(fromUser);
      if (ref != null) {
        HUDComponent textChatHUDComponent=ref.get();
        TextChatPanel textChatPanel=textChatPanelRefMap.get(textChatHUDComponent).get();
        textChatPanel.appendTextMessage(message,fromUser);
        return;
      }
      HUDComponent hud=createTextChatHUD(fromUser,true);
      String name=BUNDLE.getString(""String_Node_Str"");
      name=MessageFormat.format(name,fromUser);
      hud.setName(name);
      TextChatPanel panel=textChatPanelRefMap.get(hud).get();
      panel.setActive(textChatConnection,toUser,fromUser);
      panel.appendTextMessage(message,fromUser);
      hud.setVisible(true);
    }
  }
);
}"
45845,"/** 
 * Unregister and menus we have created, etc.
 */
public void unregister(){
  for (  Map.Entry<String,WeakReference<HUDComponent>> entry : textChatHUDRefMap.entrySet()) {
    HUDComponent component=entry.getValue().get();
    component.setVisible(false);
  }
  textChatHUDRefMap.clear();
  loginInfo.removeLifecycleListener(sessionListener);
  JmeClientMain.getFrame().removeFromWindowMenu(textChatMenuItem);
}","/** 
 * Unregister and menus we have created, etc.
 */
public void unregister(){
  textChatConnection.removeTextChatListener(this);
  JmeClientMain.getFrame().removeFromWindowMenu(textChatMenuItem);
  SwingUtilities.invokeLater(new Runnable(){
    public void run(){
      for (      String name : textChatHUDRefMap.keySet()) {
        HUDComponent component=textChatHUDRefMap.get(name).get();
        component.setVisible(false);
      }
      textChatHUDRefMap.clear();
      textChatPanelRefMap.clear();
      textChatConnection.disconnect();
    }
  }
);
}"
45846,"/** 
 * Re-activates the text chat given the remote user's name, if such a frame exists. Displays a message in the window and turns on its GUI.
 */
public void reactivateChat(String remoteUser){
synchronized (textChatHUDRefMap) {
    WeakReference<HUDComponent> ref=textChatHUDRefMap.get(remoteUser);
    if (ref == null) {
      return;
    }
    HUDComponent textChatHUDComponent=ref.get();
    TextChatPanel textChatPanel=textChatPanelRefMap.get(textChatHUDComponent).get();
    textChatPanel.reactivate();
  }
}","/** 
 * Re-activates the text chat given the remote user's name, if such a frame exists. Displays a message in the window and turns on its GUI.
 */
public void reactivateChat(final String remoteUser){
  SwingUtilities.invokeLater(new Runnable(){
    public void run(){
      WeakReference<HUDComponent> ref=textChatHUDRefMap.get(remoteUser);
      if (ref == null) {
        return;
      }
      HUDComponent textChatHUDComponent=ref.get();
      TextChatPanel textChatPanel=textChatPanelRefMap.get(textChatHUDComponent).get();
      textChatPanel.reactivate();
    }
  }
);
}"
45847,"private HUDComponent createTextChatHUD(final String userKey){
  final TextChatPanel textChatPanel=new TextChatPanel();
  HUD mainHUD=HUDManagerFactory.getHUDManager().getHUD(""String_Node_Str"");
  HUDComponent textChatHUDComponent=mainHUD.createComponent(textChatPanel);
  textChatHUDComponent.setIcon(new ImageIcon(getClass().getResource(""String_Node_Str"" + ""String_Node_Str"")));
  textChatHUDComponent.setPreferredLocation(Layout.SOUTHWEST);
  mainHUD.addComponent(textChatHUDComponent);
  textChatHUDComponent.addEventListener(new HUDEventListener(){
    public void HUDObjectChanged(    HUDEvent e){
      if (e.getEventType() == HUDEventType.CLOSED) {
synchronized (textChatHUDRefMap) {
          e.getObject().setVisible(false);
          WeakReference<HUDComponent> ref=textChatHUDRefMap.get(userKey);
          if (ref != null) {
            HUDComponent textChatHUDComponent=ref.get();
            textChatHUDRefMap.remove(userKey);
            textChatPanelRefMap.remove(textChatHUDComponent);
          }
        }
      }
    }
  }
);
  textChatPanelRefMap.put(textChatHUDComponent,new WeakReference(textChatPanel));
  return textChatHUDComponent;
}","/** 
 * Creates and returns a new text chat component, given the name of the remote user for which the text chat is assigned. If the ""handleClose"" argument is true, then the HUD Component is removed from the Maps when destroyed. NOTE: This method assumes it is being called on the AWT Event Thread
 */
private HUDComponent createTextChatHUD(final String userKey,boolean handleClose){
  final TextChatPanel textChatPanel=new TextChatPanel();
  HUD mainHUD=HUDManagerFactory.getHUDManager().getHUD(""String_Node_Str"");
  HUDComponent hudComponent=mainHUD.createComponent(textChatPanel);
  hudComponent.setIcon(new ImageIcon(getClass().getResource(""String_Node_Str"" + ""String_Node_Str"")));
  hudComponent.setPreferredLocation(Layout.SOUTHWEST);
  mainHUD.addComponent(hudComponent);
  if (handleClose == true) {
    hudComponent.addEventListener(new HUDEventListener(){
      public void HUDObjectChanged(      final HUDEvent e){
        if (e.getEventType() == HUDEventType.CLOSED) {
          SwingUtilities.invokeLater(new Runnable(){
            public void run(){
              e.getObject().setVisible(false);
              WeakReference<HUDComponent> ref=textChatHUDRefMap.get(userKey);
              if (ref != null) {
                HUDComponent hud=ref.get();
                textChatHUDRefMap.remove(userKey);
                textChatPanelRefMap.remove(hud);
              }
            }
          }
);
        }
      }
    }
);
  }
  textChatPanelRefMap.put(hudComponent,new WeakReference(textChatPanel));
  textChatHUDRefMap.put(userKey,new WeakReference(hudComponent));
  return hudComponent;
}"
45848,"public void actionPerformed(ActionEvent e){
  HUDComponent textChatHUDComponent=hudPanelRef.get();
  boolean show=!textChatHUDComponent.isVisible();
  textChatMenuItem.setState(show);
  textChatHUDComponent.setVisible(show);
}","public void actionPerformed(ActionEvent e){
  HUDComponent hud=textChatHUDRefMap.get(""String_Node_Str"").get();
  boolean show=!hud.isVisible();
  textChatMenuItem.setState(show);
  hud.setVisible(show);
}"
45849,"public void HUDObjectChanged(HUDEvent e){
  if (e.getEventType() == HUDEventType.CLOSED) {
synchronized (textChatHUDRefMap) {
      e.getObject().setVisible(false);
      WeakReference<HUDComponent> ref=textChatHUDRefMap.get(userKey);
      if (ref != null) {
        HUDComponent textChatHUDComponent=ref.get();
        textChatHUDRefMap.remove(userKey);
        textChatPanelRefMap.remove(textChatHUDComponent);
      }
    }
  }
}","public void HUDObjectChanged(final HUDEvent e){
  if (e.getEventType() == HUDEventType.CLOSED) {
    SwingUtilities.invokeLater(new Runnable(){
      public void run(){
        e.getObject().setVisible(false);
        WeakReference<HUDComponent> ref=textChatHUDRefMap.get(userKey);
        if (ref != null) {
          HUDComponent hud=ref.get();
          textChatHUDRefMap.remove(userKey);
          textChatPanelRefMap.remove(hud);
        }
      }
    }
);
  }
}"
45850,"/** 
 * Creates a new text chat window, given the remote participants user name and displays it.
 * @param remoteUser The remote participants user name
 */
public void startChat(String remoteUser){
synchronized (textChatHUDRefMap) {
    WeakReference<HUDComponent> ref=textChatHUDRefMap.get(remoteUser);
    if (ref != null) {
      return;
    }
    HUDComponent textChatHUDComponent=createTextChatHUD(remoteUser);
    String name=BUNDLE.getString(""String_Node_Str"");
    name=MessageFormat.format(name,remoteUser);
    textChatHUDComponent.setName(name);
    textChatHUDRefMap.put(remoteUser,new WeakReference(textChatHUDComponent));
    TextChatPanel textChatPanel=textChatPanelRefMap.get(textChatHUDComponent).get();
    textChatPanel.setActive(textChatConnection,localUserName,remoteUser);
    textChatHUDComponent.setVisible(true);
  }
}","/** 
 * Creates a new text chat window, given the remote participants user name and displays it.
 * @param remoteUser The remote participants user name
 */
public void startChat(final String remoteUser){
  SwingUtilities.invokeLater(new Runnable(){
    public void run(){
      WeakReference<HUDComponent> ref=textChatHUDRefMap.get(remoteUser);
      if (ref != null) {
        return;
      }
      HUDComponent hud=createTextChatHUD(remoteUser,true);
      String name=BUNDLE.getString(""String_Node_Str"");
      name=MessageFormat.format(name,remoteUser);
      hud.setName(name);
      TextChatPanel panel=textChatPanelRefMap.get(hud).get();
      panel.setActive(textChatConnection,localUserName,remoteUser);
      hud.setVisible(true);
    }
  }
);
}"
45851,"/** 
 * Deactivates the text chat given the remote user's name, if such a frame exists. Displays a message in the window and turns off its GUI.
 * @param remoteUser The remote participants user name
 */
public void deactivateChat(String remoteUser){
synchronized (textChatHUDRefMap) {
    WeakReference<HUDComponent> ref=textChatHUDRefMap.get(remoteUser);
    if (ref == null) {
      return;
    }
    HUDComponent textChatHUDComponent=ref.get();
    TextChatPanel textChatPanel=textChatPanelRefMap.get(textChatHUDComponent).get();
    textChatPanel.deactivate();
  }
}","/** 
 * Deactivates the text chat given the remote user's name, if such a frame exists. Displays a message in the window and turns off its GUI.
 * @param remoteUser The remote participants user name
 */
public void deactivateChat(final String remoteUser){
  SwingUtilities.invokeLater(new Runnable(){
    public void run(){
      WeakReference<HUDComponent> ref=textChatHUDRefMap.get(remoteUser);
      if (ref == null) {
        return;
      }
      HUDComponent textChatHUDComponent=ref.get();
      TextChatPanel textChatPanel=textChatPanelRefMap.get(textChatHUDComponent).get();
      textChatPanel.deactivate();
    }
  }
);
}"
45852,"private ChatManager(){
  textChatHUDRefMap=new HashMap();
  textChatPanelRefMap=new HashMap();
  HUDComponent textChatHUDComponent=createTextChatHUD(""String_Node_Str"");
  textChatHUDComponent.setName(BUNDLE.getString(""String_Node_Str""));
  final WeakReference<HUDComponent> hudPanelRef=new WeakReference(textChatHUDComponent);
  textChatHUDRefMap.put(""String_Node_Str"",new WeakReference(textChatHUDComponent));
  textChatMenuItem=new JCheckBoxMenuItem(BUNDLE.getString(""String_Node_Str""));
  textChatMenuItem.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      HUDComponent textChatHUDComponent=hudPanelRef.get();
      boolean show=!textChatHUDComponent.isVisible();
      textChatMenuItem.setState(show);
      textChatHUDComponent.setVisible(show);
    }
  }
);
  textChatMenuItem.setEnabled(false);
  JmeClientMain.getFrame().addToWindowMenu(textChatMenuItem,2);
  sessionListener=new SessionLifecycleListener(){
    public void sessionCreated(    WonderlandSession session){
    }
    public void primarySession(    WonderlandSession session){
      setPrimarySession(session);
    }
  }
;
}","/** 
 * Private constructor, singelton pattern
 */
private ChatManager(){
  textChatHUDRefMap=new HashMap();
  textChatPanelRefMap=new HashMap();
  textChatMenuItem=new JCheckBoxMenuItem(BUNDLE.getString(""String_Node_Str""));
  textChatMenuItem.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      HUDComponent hud=textChatHUDRefMap.get(""String_Node_Str"").get();
      boolean show=!hud.isVisible();
      textChatMenuItem.setState(show);
      hud.setVisible(show);
    }
  }
);
  textChatMenuItem.setEnabled(false);
}"
45853,"/** 
 * Registers the primary session
 */
public void register(ServerSessionManager loginInfo){
  this.loginInfo=loginInfo;
  loginInfo.addLifecycleListener(sessionListener);
  if (loginInfo.getPrimarySession() != null) {
    setPrimarySession(loginInfo.getPrimarySession());
  }
}","/** 
 * Registers the primary session
 */
public void register(WonderlandSession session){
  localUserName=session.getUserID().getUsername();
  textChatConnection=new TextChatConnection();
  textChatConnection.addTextChatListener(this);
  try {
    textChatConnection.connect(session);
  }
 catch (  ConnectionFailureException excp) {
    LOGGER.log(Level.WARNING,""String_Node_Str"" + ""String_Node_Str"",excp);
    return;
  }
  SwingUtilities.invokeLater(new Runnable(){
    public void run(){
      HUDComponent hud=createTextChatHUD(""String_Node_Str"",false);
      hud.setName(""String_Node_Str"");
      TextChatPanel panel=textChatPanelRefMap.get(hud).get();
      panel.setActive(textChatConnection,localUserName,""String_Node_Str"");
      textChatMenuItem.setEnabled(true);
      textChatMenuItem.setSelected(true);
      hud.setVisible(true);
      hud.addEventListener(new HUDEventListener(){
        public void HUDObjectChanged(        HUDEvent event){
          if (event.getEventType() == HUDEventType.CLOSED) {
            SwingUtilities.invokeLater(new Runnable(){
              public void run(){
                textChatMenuItem.setSelected(false);
              }
            }
);
          }
        }
      }
);
      JmeClientMain.getFrame().addToWindowMenu(textChatMenuItem,2);
    }
  }
);
}"
45854,"/** 
 * Apply the model transform the modelBG node
 */
public void applyModelTransform(Node modelBG){
  modelBG.setLocalScale(modelBGScale);
  modelBG.setLocalTranslation(modelBGTranslation);
  modelBG.setLocalRotation(modelBGRotation);
}","/** 
 * Apply the model transform the modelBG node
 */
public void applyModelTransform(Node modelBG){
  if (getModelScale() != null)   modelBG.setLocalScale(getModelScale());
  if (getModelTranslation() != null)   modelBG.setLocalTranslation(getModelTranslation());
  if (getModelRotation() != null)   modelBG.setLocalRotation(getModelRotation());
}"
45855,"/** 
 * {@inheritDoc}
 */
@Override public void setClientState(CellClientState clientState){
  super.setClientState(clientState);
  App2DCellClientState state=(App2DCellClientState)clientState;
  pixelScale=state.getPixelScale();
  logger.info(""String_Node_Str"" + state.isInitialPlacementDone());
  if (App2D.doAppInitialPlacement && !state.isInitialPlacementDone()) {
    logger.info(""String_Node_Str"" + state.getCreatorViewTransform());
    fvi=new FirstVisibleInitializerCell(this,state.getCreatorViewTransform(),initialPlacementSize);
    logger.info(""String_Node_Str"" + fvi);
  }
}","/** 
 * {@inheritDoc}
 */
@Override public void setClientState(CellClientState clientState){
  super.setClientState(clientState);
  App2DCellClientState state=(App2DCellClientState)clientState;
  pixelScale=state.getPixelScale();
  logger.info(""String_Node_Str"" + state.isInitialPlacementDone());
  if (App2D.doAppInitialPlacement && !state.isInitialPlacementDone()) {
    CellTransform creatorViewTransform=state.getCreatorViewTransform();
    logger.info(""String_Node_Str"" + creatorViewTransform);
    if (creatorViewTransform != null) {
      fvi=new FirstVisibleInitializerCell(this,creatorViewTransform,initialPlacementSize);
    }
    logger.info(""String_Node_Str"" + fvi);
  }
}"
45856,"public void triggerGoto(Vector3f position,Quaternion look){
  CharacterController cc=avatarCharacter.getContext().getController();
  PPolygonModelInstance body=cc.getModelInstance();
  PMatrix newPosition=new PMatrix(body.getTransform().getLocalMatrix(false));
  newPosition.setTranslation(position);
  newPosition.setRotation(look);
  body.getTransform().getLocalMatrix(true).set(newPosition);
  cc.notifyTransfromUpdate(position,newPosition);
}","public void triggerGoto(Vector3f position,Quaternion look){
  CellTransform transform=new CellTransform();
  transform.setRotation(look);
  transform.setTranslation(position);
  cell.getComponent(MovableComponent.class).localMoveRequest(transform);
  avatarCharacter.getModelInst().setTransform(new PTransform(look,position,new Vector3f(1,1,1)));
}"
45857,"/** 
 * Actually removes the given cell factory from the maps. This method assumed synchronized access.
 */
private void removeFactory(CellFactorySPI factory){
  String[] extensions=factory.getExtensions();
  if (extensions != null) {
    for (    String extension : extensions) {
      extension=extension.toLowerCase();
      Set<CellFactorySPI> factories=cellFactoryExtensionMap.get(extension);
      if (factories != null) {
        factories.remove(factory);
        if (factories.isEmpty()) {
          cellFactoryExtensionMap.remove(factories);
        }
      }
    }
  }
  cellFactorySet.remove(factory);
}","/** 
 * Actually removes the given cell factory from the maps. This method assumed synchronized access.
 */
private void removeFactory(CellFactorySPI factory){
  String[] extensions=factory.getExtensions();
  if (extensions != null) {
    for (    String extension : extensions) {
      extension=extension.toLowerCase();
      Set<CellFactorySPI> factories=cellFactoryExtensionMap.get(extension);
      if (factories != null) {
        factories.remove(factory);
        if (factories.isEmpty() == true) {
          cellFactoryExtensionMap.remove(extension);
        }
      }
    }
  }
  cellFactorySet.remove(factory);
}"
45858,"public Node loadDeployedModel(DeployedModel model){
  try {
    load(AssetUtils.getAssetURL(model.getModelURL()));
  }
 catch (  IOException ex) {
    Logger.getLogger(JmeColladaLoader.class.getName()).log(Level.SEVERE,null,ex);
  }
  return null;
}","public Node loadDeployedModel(DeployedModel model){
  String baseURL=null;
  try {
    baseURL=AssetUtils.getAssetURL(model.getModelURL().substring(0,model.getModelURL().lastIndexOf('/') + 1)).toExternalForm();
  }
 catch (  MalformedURLException ex) {
    Logger.getLogger(MtgLoader.class.getName()).log(Level.SEVERE,null,ex);
  }
  ClientContextJME.getWorldManager().setConfigBaseURL(baseURL.substring(0,baseURL.length() - 1));
  try {
    load(AssetUtils.getAssetURL(model.getModelURL()));
  }
 catch (  IOException ex) {
    Logger.getLogger(JmeColladaLoader.class.getName()).log(Level.SEVERE,null,ex);
  }
  return new Node(""String_Node_Str"");
}"
45859,"private void startTheSlave(String connectionInfo){
  app=startSlave(connectionInfo,fvi);
  if (app != null) {
    slaveStarted=true;
    logger.info(""String_Node_Str"" + connectionInfo);
  }
 else {
    slaveStarted=false;
    logger.warning(""String_Node_Str"" + connectionInfo);
  }
}","private void startTheSlave(String connectionInfo){
  logger.info(""String_Node_Str"");
  app=startSlave(connectionInfo,fvi);
  if (app != null) {
    slaveStarted=true;
    logger.info(""String_Node_Str"" + connectionInfo);
  }
 else {
    slaveStarted=false;
    logger.warning(""String_Node_Str"" + connectionInfo);
  }
}"
45860,"/** 
 * {@inheritDoc} 
 */
@Override protected void setStatus(CellStatus status,boolean increasing){
  super.setStatus(status,increasing);
  if (status == CellStatus.INACTIVE && increasing) {
    AppConventionalMessageReceiver mr=new AppConventionalMessageReceiver();
    channel.addMessageReceiver(AppConventionalCellSetConnectionInfoMessage.class,mr);
    channel.addMessageReceiver(AppConventionalCellAppExittedMessage.class,mr);
  }
 else   if (status == CellStatus.INACTIVE && !increasing) {
    channel.removeMessageReceiver(AppConventionalCellSetConnectionInfoMessage.class);
    channel.removeMessageReceiver(AppConventionalCellAppExittedMessage.class);
  }
  if (status == CellStatus.VISIBLE && increasing && !appStarted) {
    if (launchLocation.equalsIgnoreCase(""String_Node_Str"") && launchUser.equals(cellCacheSession.getUserID().getUsername())) {
      StartMasterReturnInfo ret=startMaster(appName,command,fvi);
      if (ret == null || ret.connInfo == null) {
        logger.warning(""String_Node_Str"" + appName);
        return;
      }
      connectionInfo=ret.connInfo;
      logger.info(""String_Node_Str"" + getCellID() + ""String_Node_Str""+ connectionInfo);
      AppConventionalCellSetConnectionInfoMessage msg=new AppConventionalCellSetConnectionInfoMessage(getCellID(),connectionInfo);
      channel.send(msg);
      this.app=ret.app;
    }
 else {
      if (connectionInfo != null) {
        logger.info(""String_Node_Str"");
        startTheSlave(connectionInfo);
      }
    }
    appStarted=true;
  }
}","/** 
 * {@inheritDoc} 
 */
@Override protected void setStatus(CellStatus status,boolean increasing){
  super.setStatus(status,increasing);
  if (status == CellStatus.INACTIVE && increasing) {
    AppConventionalMessageReceiver mr=new AppConventionalMessageReceiver();
    channel.addMessageReceiver(AppConventionalCellSetConnectionInfoMessage.class,mr);
    channel.addMessageReceiver(AppConventionalCellAppExittedMessage.class,mr);
  }
 else   if (status == CellStatus.INACTIVE && !increasing) {
    channel.removeMessageReceiver(AppConventionalCellSetConnectionInfoMessage.class);
    channel.removeMessageReceiver(AppConventionalCellAppExittedMessage.class);
  }
  if (status == CellStatus.ACTIVE) {
    if (increasing) {
      cellRendererExists=true;
    }
 else {
      cellRendererExists=false;
    }
    startSlaveIfReady();
  }
  if (status == CellStatus.VISIBLE && increasing) {
    startSlaveIfReady();
  }
}"
45861,"/** 
 * This is called when the server sends the connection info.
 */
synchronized void setConnectionInfo(String connInfo){
  if (connectionInfo != null) {
    return;
  }
  if (slaveStarted)   return;
  if (connInfo != null) {
    connectionInfo=connInfo;
    logger.info(""String_Node_Str"");
    startTheSlave(connectionInfo);
  }
}","/** 
 * This is called when the server sends the connection info.
 */
synchronized void setConnectionInfo(String connInfo){
  if (connectionInfo != null) {
    return;
  }
  if (slaveStarted)   return;
  connectionInfo=connInfo;
  startSlaveIfReady();
}"
45862,"public DeployedModel deployToModule(File moduleRootDir,ImportedModel importedModel) throws IOException {
  String modelName=getFilename(importedModel.getOriginalURL());
  HashMap<String,String> textureDeploymentMapping=new HashMap();
  DeployedModel deployedModel=new DeployedModel(importedModel.getOriginalURL(),this);
  LoaderData data=new LoaderData();
  data.setDeployedTextures(textureDeploymentMapping);
  data.setModelLoaderClassname(this.getClass().getName());
  deployedModel.setLoaderData(data);
  String moduleName=moduleRootDir.getName();
  String targetDirName=moduleRootDir.getAbsolutePath() + File.separator + ""String_Node_Str""+ File.separator+ modelName;
  File targetDir=new File(targetDirName);
  targetDir.mkdirs();
  deployTextures(targetDir,textureDeploymentMapping,importedModel);
  ModelCellServerState cellSetup=new ModelCellServerState();
  ModelCellComponentServerState setup=new ModelCellComponentServerState();
  cellSetup.addComponentServerState(setup);
  cellSetup.setName(importedModel.getWonderlandName());
  Vector3f offset=importedModel.getRootBG().getLocalTranslation();
  PositionComponentServerState position=new PositionComponentServerState();
  Vector3f boundsCenter=importedModel.getRootBG().getWorldBound().getCenter();
  offset.subtractLocal(boundsCenter);
  deployedModel.setModelTranslation(offset);
  deployedModel.setModelRotation(importedModel.getModelBG().getLocalRotation());
  deployedModel.setModelScale(importedModel.getModelBG().getLocalScale());
  position.setTranslation(boundsCenter);
  BoundingVolume worldBounds=importedModel.getModelBG().getWorldBound();
  worldBounds.setCenter(new Vector3f(0,0,0));
  position.setBounds(worldBounds);
  cellSetup.addComponentServerState(position);
  deployedModel.addCellServerState(cellSetup);
  deployModels(targetDir,moduleName,deployedModel,importedModel,textureDeploymentMapping,setup);
  return deployedModel;
}","public DeployedModel deployToModule(File moduleRootDir,ImportedModel importedModel) throws IOException {
  String modelName=getFilename(importedModel.getOriginalURL());
  HashMap<String,String> textureDeploymentMapping=new HashMap();
  DeployedModel deployedModel=new DeployedModel(importedModel.getOriginalURL(),this);
  LoaderData data=new LoaderData();
  data.setDeployedTextures(textureDeploymentMapping);
  data.setModelLoaderClassname(this.getClass().getName());
  deployedModel.setLoaderData(data);
  String moduleName=moduleRootDir.getName();
  String targetDirName=moduleRootDir.getAbsolutePath() + File.separator + ""String_Node_Str""+ File.separator+ modelName;
  File targetDir=new File(targetDirName);
  targetDir.mkdirs();
  deployTextures(targetDir,textureDeploymentMapping,importedModel);
  ModelCellServerState cellSetup=new ModelCellServerState();
  ModelCellComponentServerState setup=new ModelCellComponentServerState();
  cellSetup.addComponentServerState(setup);
  cellSetup.setName(importedModel.getWonderlandName());
  cellSetup.setBoundingVolumeHint(new BoundingVolumeHint(false,importedModel.getModelBG().getWorldBound()));
  Vector3f offset=importedModel.getRootBG().getLocalTranslation();
  PositionComponentServerState position=new PositionComponentServerState();
  Vector3f boundsCenter=importedModel.getRootBG().getWorldBound().getCenter();
  offset.subtractLocal(boundsCenter);
  deployedModel.setModelTranslation(offset);
  deployedModel.setModelRotation(importedModel.getModelBG().getLocalRotation());
  deployedModel.setModelScale(importedModel.getModelBG().getLocalScale());
  position.setTranslation(boundsCenter);
  BoundingVolume worldBounds=importedModel.getModelBG().getWorldBound();
  worldBounds.setCenter(new Vector3f(0,0,0));
  position.setBounds(worldBounds);
  cellSetup.addComponentServerState(position);
  deployedModel.addCellServerState(cellSetup);
  deployModels(targetDir,moduleName,deployedModel,importedModel,textureDeploymentMapping,setup);
  return deployedModel;
}"
45863,"/** 
 * Deploy the dae files to the server, source[0] is the primary file.
 * @param moduleArtRootDir
 */
protected void deployModels(File targetDir,String moduleName,DeployedModel deployedModel,ImportedModel importedModel,HashMap<String,String> deploymentMapping,ModelCellComponentServerState state){
  URL[] source=importedModel.getAllOriginalModels();
  String filename=getFilename(importedModel.getOriginalURL());
  String filenameGZ=filename + ""String_Node_Str"";
  File targetFile=new File(targetDir,filenameGZ);
  try {
    targetFile.createNewFile();
    copyAsset(source[0],targetFile,true);
    deployedModel.setModelURL(""String_Node_Str"" + moduleName + ""String_Node_Str""+ filename+ ""String_Node_Str""+ filenameGZ);
    deployedModel.setLoaderDataURL(deployedModel.getModelURL() + ""String_Node_Str"");
    deployDeploymentData(targetDir,deployedModel,filenameGZ);
    state.setDeployedModelURL(deployedModel.getModelURL() + ""String_Node_Str"");
  }
 catch (  IOException ex) {
    Logger.getLogger(JmeColladaLoader.class.getName()).log(Level.SEVERE,""String_Node_Str"" + targetFile,ex);
  }
}","/** 
 * Deploy the dae files to the server, source[0] is the primary file.
 * @param moduleArtRootDir
 */
protected void deployModels(File targetDir,String moduleName,DeployedModel deployedModel,ImportedModel importedModel,HashMap<String,String> deploymentMapping,ModelCellComponentServerState state){
  URL[] source=importedModel.getAllOriginalModels();
  String filename=getFilename(importedModel.getOriginalURL());
  String filenameGZ=filename + ""String_Node_Str"";
  File targetFile=new File(targetDir,filenameGZ);
  try {
    targetFile.createNewFile();
    copyAsset(source[0],targetFile,true);
    deployedModel.setModelURL(importedModel.getDeploymentBaseURL() + filename + ""String_Node_Str""+ filenameGZ);
    deployedModel.setLoaderDataURL(deployedModel.getModelURL() + ""String_Node_Str"");
    deployDeploymentData(targetDir,deployedModel,filenameGZ);
    state.setDeployedModelURL(deployedModel.getModelURL() + ""String_Node_Str"");
  }
 catch (  IOException ex) {
    Logger.getLogger(JmeColladaLoader.class.getName()).log(Level.SEVERE,""String_Node_Str"" + targetFile,ex);
  }
}"
45864,"/** 
 */
public DeployedModel modelUploadContent(File file) throws IOException {
  URL url=file.toURI().toURL();
  ModelLoader loader=LoaderManager.getLoaderManager().getLoader(url);
  ImportSettings importSettings=new ImportSettings(url);
  ImportedModel importedModel=loader.importModel(importSettings);
  File tmpDir=File.createTempFile(""String_Node_Str"",null);
  if (tmpDir.isDirectory()) {
    FileUtils.deleteDirContents(tmpDir);
  }
 else {
    tmpDir.delete();
  }
  tmpDir=new File(tmpDir,file.getName());
  tmpDir.mkdirs();
  Node cellRoot=new Node();
  cellRoot.attachChild(importedModel.getModelBG());
  cellRoot.updateWorldData(0f);
  cellRoot.updateWorldBound();
  Entity entity=new Entity(""String_Node_Str"");
  RenderComponent rc=ClientContextJME.getWorldManager().getRenderManager().createRenderComponent(cellRoot);
  entity.addComponent(RenderComponent.class,rc);
  importedModel.setEntity(entity);
  DeployedModel deployedModel=loader.deployToModule(tmpDir,importedModel);
  ContentCollection modelRoot=getUserRoot();
  try {
    File artDir=FileUtils.findDir(tmpDir,""String_Node_Str"");
    copyFiles(artDir,modelRoot);
  }
 catch (  ContentRepositoryException ex) {
    Logger.getLogger(ModelDndContentImporter.class.getName()).log(Level.SEVERE,null,ex);
  }
  URL tmpUrl=new URL(deployedModel.getModelURL());
  String modelFile=""String_Node_Str"" + tmpUrl.getPath();
  ModelCellServerState cellState=(ModelCellServerState)deployedModel.getCellServerState();
  JmeColladaCellComponentServerState compState=(JmeColladaCellComponentServerState)cellState.getComponentServerState(JmeColladaCellComponentServerState.class);
  compState.setModel(""String_Node_Str"" + loginInfo.getUsername() + ""String_Node_Str""+ modelFile);
  deployedModel.setModelURL(compState.getModel());
  return deployedModel;
}","/** 
 */
public DeployedModel modelUploadContent(File file) throws IOException {
  URL url=file.toURI().toURL();
  ModelLoader loader=LoaderManager.getLoaderManager().getLoader(url);
  ImportSettings importSettings=new ImportSettings(url);
  ImportedModel importedModel=loader.importModel(importSettings);
  File tmpDir=File.createTempFile(""String_Node_Str"",null);
  if (tmpDir.isDirectory()) {
    FileUtils.deleteDirContents(tmpDir);
  }
 else {
    tmpDir.delete();
  }
  tmpDir=new File(tmpDir,file.getName());
  tmpDir.mkdirs();
  System.err.println(""String_Node_Str"" + tmpDir);
  Node cellRoot=new Node();
  cellRoot.attachChild(importedModel.getModelBG());
  cellRoot.updateWorldData(0f);
  cellRoot.updateWorldBound();
  Entity entity=new Entity(""String_Node_Str"");
  RenderComponent rc=ClientContextJME.getWorldManager().getRenderManager().createRenderComponent(cellRoot);
  entity.addComponent(RenderComponent.class,rc);
  importedModel.setEntity(entity);
  importedModel.setDeploymentBaseURL(""String_Node_Str"" + loginInfo.getUsername() + ""String_Node_Str"");
  DeployedModel deployedModel=loader.deployToModule(tmpDir,importedModel);
  ContentCollection modelRoot=getUserRoot();
  try {
    File artDir=FileUtils.findDir(tmpDir,""String_Node_Str"");
    copyFiles(artDir,modelRoot);
  }
 catch (  ContentRepositoryException ex) {
    Logger.getLogger(ModelDndContentImporter.class.getName()).log(Level.SEVERE,null,ex);
  }
  URL tmpUrl=new URL(deployedModel.getModelURL());
  String modelFile=""String_Node_Str"" + tmpUrl.getPath();
  ModelCellServerState cellState=(ModelCellServerState)deployedModel.getCellServerState();
  ModelCellComponentServerState compState=(ModelCellComponentServerState)cellState.getComponentServerState(ModelCellComponentServerState.class);
  System.err.println(""String_Node_Str"" + compState.getDeployedModelURL());
  return deployedModel;
}"
45865,"@Override public CellComponentClientState getClientState(CellComponentClientState state,WonderlandClientID clientID,ClientCapabilities capabilities){
  if (state == null) {
    state=new JmeColladaCellComponentClientState();
  }
  serverState.setClientState((JmeColladaCellComponentClientState)state);
  return state;
}","@Override public CellComponentClientState getClientState(CellComponentClientState state,WonderlandClientID clientID,ClientCapabilities capabilities){
  if (state == null) {
    state=new JmeColladaCellComponentClientState();
  }
  ((JmeColladaCellComponentServerState)serverState).setClientState((JmeColladaCellComponentClientState)state);
  return state;
}"
45866,"@Override protected void deployModels(File targetDir,String moduleName,DeployedModel deployedModel,ImportedModel importedModel,HashMap<String,String> deploymentMapping,ModelCellComponentServerState state){
  URL modelURL=importedModel.getImportSettings().getModelURL();
  if (!modelURL.getProtocol().equalsIgnoreCase(""String_Node_Str"")) {
    final String modelURLStr=modelURL.toExternalForm();
    SwingUtilities.invokeLater(new Runnable(){
      public void run(){
        JOptionPane.showConfirmDialog(null,""String_Node_Str"" + modelURLStr + ""String_Node_Str"",""String_Node_Str"",JOptionPane.OK_OPTION);
      }
    }
);
    return;
  }
  try {
    ZipFile zipFile=new ZipFile(new File(modelURL.toURI()));
    deployZipModels(zipFile,targetDir);
    String kmzFilename=modelURL.toExternalForm();
    kmzFilename=kmzFilename.substring(kmzFilename.lastIndexOf('/') + 1);
    deployedModel.setModelURL(""String_Node_Str"" + moduleName + ""String_Node_Str""+ kmzFilename+ ""String_Node_Str""+ ((KmzImportedModel)importedModel).getPrimaryModel()+ ""String_Node_Str"");
    deployedModel.setLoaderDataURL(""String_Node_Str"" + moduleName + ""String_Node_Str""+ kmzFilename+ ""String_Node_Str""+ kmzFilename+ ""String_Node_Str"");
    deployDeploymentData(targetDir,deployedModel,kmzFilename);
    state.setDeployedModelURL(""String_Node_Str"" + moduleName + ""String_Node_Str""+ kmzFilename+ ""String_Node_Str""+ kmzFilename+ ""String_Node_Str"");
  }
 catch (  ZipException ex) {
    Logger.getLogger(KmzLoader.class.getName()).log(Level.SEVERE,null,ex);
  }
catch (  IOException ex) {
    Logger.getLogger(KmzLoader.class.getName()).log(Level.SEVERE,null,ex);
  }
catch (  URISyntaxException ex) {
    Logger.getLogger(KmzLoader.class.getName()).log(Level.SEVERE,null,ex);
  }
}","@Override protected void deployModels(File targetDir,String moduleName,DeployedModel deployedModel,ImportedModel importedModel,HashMap<String,String> deploymentMapping,ModelCellComponentServerState state){
  URL modelURL=importedModel.getImportSettings().getModelURL();
  if (!modelURL.getProtocol().equalsIgnoreCase(""String_Node_Str"")) {
    final String modelURLStr=modelURL.toExternalForm();
    SwingUtilities.invokeLater(new Runnable(){
      public void run(){
        JOptionPane.showConfirmDialog(null,""String_Node_Str"" + modelURLStr + ""String_Node_Str"",""String_Node_Str"",JOptionPane.OK_OPTION);
      }
    }
);
    return;
  }
  try {
    ZipFile zipFile=new ZipFile(new File(modelURL.toURI()));
    deployZipModels(zipFile,targetDir);
    String kmzFilename=modelURL.toExternalForm();
    kmzFilename=kmzFilename.substring(kmzFilename.lastIndexOf('/') + 1);
    deployedModel.setModelURL(importedModel.getDeploymentBaseURL() + kmzFilename + ""String_Node_Str""+ ((KmzImportedModel)importedModel).getPrimaryModel()+ ""String_Node_Str"");
    deployedModel.setLoaderDataURL(importedModel.getDeploymentBaseURL() + kmzFilename + ""String_Node_Str""+ kmzFilename+ ""String_Node_Str"");
    deployDeploymentData(targetDir,deployedModel,kmzFilename);
    state.setDeployedModelURL(importedModel.getDeploymentBaseURL() + kmzFilename + ""String_Node_Str""+ kmzFilename+ ""String_Node_Str"");
  }
 catch (  ZipException ex) {
    Logger.getLogger(KmzLoader.class.getName()).log(Level.SEVERE,null,ex);
  }
catch (  IOException ex) {
    Logger.getLogger(KmzLoader.class.getName()).log(Level.SEVERE,null,ex);
  }
catch (  URISyntaxException ex) {
    Logger.getLogger(KmzLoader.class.getName()).log(Level.SEVERE,null,ex);
  }
}"
45867,"private void animateCallAnswer(){
  if (chatType.equals(ChatType.PRIVATE)) {
    client.getWlAvatarCharacter().playAnimation(""String_Node_Str"");
    logger.warning(""String_Node_Str"");
  }
 else {
    client.getWlAvatarCharacter().stop();
    logger.warning(""String_Node_Str"");
  }
}","private void animateCallAnswer(){
  if (true) {
    return;
  }
  WlAvatarCharacter avatar=client.getWlAvatarCharacter();
  if (avatar == null) {
    return;
  }
  String answerCell=null;
  for (  String action : avatar.getAnimationNames()) {
    if (action.indexOf(""String_Node_Str"") > 0) {
      answerCell=action;
      break;
    }
  }
  if (answerCell == null) {
    return;
  }
  if (chatType.equals(ChatType.PRIVATE)) {
    avatar.playAnimation(answerCell);
    logger.warning(""String_Node_Str"");
  }
 else {
    avatar.stop();
    logger.warning(""String_Node_Str"");
  }
}"
45868,"private void addMembers(){
  clearUserList();
  addToUserList(myPresenceInfo);
  PresenceInfo[] presenceInfoList=pm.getAllUsers();
  for (int i=0; i < presenceInfoList.length; i++) {
    PresenceInfo info=presenceInfoList[i];
    if (info.callID == null) {
      continue;
    }
synchronized (members) {
      if (members.contains(info)) {
        if (info.equals(myPresenceInfo) == false) {
          addToUserList(info);
        }
        addBystanders(info);
      }
    }
  }
}","private void addMembers(){
  clearUserList();
  addToUserList(myPresenceInfo);
  PresenceInfo[] presenceInfoList=pm.getAllUsers();
  for (int i=0; i < presenceInfoList.length; i++) {
    PresenceInfo info=presenceInfoList[i];
    if (info.callID == null) {
      continue;
    }
synchronized (members) {
synchronized (invitedMembers) {
        if (members.contains(info)) {
          if (info.equals(myPresenceInfo) == false) {
            addToUserList(info);
          }
          addBystanders(info);
        }
 else         if (invitedMembers.contains(info)) {
          if (info.equals(myPresenceInfo) == false) {
            addToUserList(info);
          }
        }
      }
    }
  }
}"
45869,"private void saveAsModuleBActionPerformed(java.awt.event.ActionEvent evt){
  ArrayList<DeployedModel> deploymentInfo=new ArrayList();
  JFileChooser chooser=new JFileChooser();
  chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
  int returnVal=chooser.showOpenDialog(ImportSessionFrame.this);
  if (returnVal == JFileChooser.APPROVE_OPTION) {
    createModuleJar(deploymentInfo,chooser.getSelectedFile());
  }
}","private void saveAsModuleBActionPerformed(java.awt.event.ActionEvent evt){
  ArrayList<DeployedModel> deploymentInfo=new ArrayList();
  JFileChooser chooser=new JFileChooser();
  chooser.setDialogTitle(BUNDLE.getString(""String_Node_Str""));
  chooser.setApproveButtonText(BUNDLE.getString(""String_Node_Str""));
  chooser.setDialogType(JFileChooser.SAVE_DIALOG);
  chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
  int returnVal=chooser.showSaveDialog(ImportSessionFrame.this);
  if (returnVal == JFileChooser.APPROVE_OPTION) {
    createModuleJar(deploymentInfo,chooser.getSelectedFile());
  }
}"
45870,"/** 
 * Handles the HTTP <code>POST</code> method.
 * @param request servlet request
 * @param response servlet response
 */
@Override protected void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
  PrintWriter writer=response.getWriter();
  ModuleManager manager=ModuleManager.getModuleManager();
  Logger logger=ModuleManager.getLogger();
  boolean isMultipart=ServletFileUpload.isMultipartContent(request);
  if (isMultipart == false) {
    logger.warning(""String_Node_Str"");
    writer.println(""String_Node_Str"");
    writer.println(""String_Node_Str"");
    return;
  }
  ServletFileUpload upload=new ServletFileUpload();
  try {
    FileItemIterator iter=upload.getItemIterator(request);
    while (iter.hasNext() == true) {
      FileItemStream item=iter.next();
      String name=item.getFieldName();
      InputStream stream=item.openStream();
      if (item.isFormField() == false) {
        String moduleJar=item.getName();
        if (moduleJar.endsWith(""String_Node_Str"") == false) {
          logger.warning(""String_Node_Str"" + moduleJar);
          writer.println(""String_Node_Str"" + moduleJar + ""String_Node_Str"");
          writer.println(""String_Node_Str"");
          return;
        }
        String moduleName=moduleJar.substring(0,moduleJar.length() - 4);
        logger.info(""String_Node_Str"" + moduleName + ""String_Node_Str""+ moduleJar);
        File tmpFile=null;
        try {
          tmpFile=File.createTempFile(moduleName,""String_Node_Str"");
          tmpFile.deleteOnExit();
          RunUtil.writeToFile(stream,tmpFile);
          logger.info(""String_Node_Str"" + tmpFile.getAbsolutePath());
        }
 catch (        java.lang.Exception excp) {
          logger.log(Level.WARNING,""String_Node_Str"",excp);
          writer.println(""String_Node_Str"");
          writer.println(""String_Node_Str"");
          writer.println(excp.toString());
          return;
        }
        Collection<File> moduleFiles=new LinkedList<File>();
        moduleFiles.add(tmpFile);
        Collection<Module> result=manager.addToInstall(moduleFiles);
        if (result.isEmpty() == true) {
          logger.warning(""String_Node_Str"" + moduleName);
          writer.println(""String_Node_Str"");
          writer.println(""String_Node_Str"");
          return;
        }
      }
    }
  }
 catch (  FileUploadException excp) {
    logger.log(Level.WARNING,""String_Node_Str"",excp);
    writer.println(""String_Node_Str"");
    writer.println(""String_Node_Str"");
    return;
  }
  manager.installAll();
  logger.info(""String_Node_Str"");
  writer.print(""String_Node_Str"");
  writer.print(""String_Node_Str"");
}","/** 
 * Handles the HTTP <code>POST</code> method.
 * @param request servlet request
 * @param response servlet response
 */
@Override protected void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
  PrintWriter writer=response.getWriter();
  ModuleManager manager=ModuleManager.getModuleManager();
  Logger logger=ModuleManager.getLogger();
  boolean isMultipart=ServletFileUpload.isMultipartContent(request);
  if (isMultipart == false) {
    logger.warning(""String_Node_Str"");
    writer.println(""String_Node_Str"");
    writer.println(""String_Node_Str"");
    return;
  }
  ServletFileUpload upload=new ServletFileUpload();
  try {
    FileItemIterator iter=upload.getItemIterator(request);
    while (iter.hasNext() == true) {
      FileItemStream item=iter.next();
      String name=item.getFieldName();
      InputStream stream=item.openStream();
      if (item.isFormField() == false) {
        String moduleJar=item.getName();
        if (moduleJar.endsWith(""String_Node_Str"") == false) {
          logger.warning(""String_Node_Str"" + moduleJar);
          writer.println(""String_Node_Str"" + moduleJar + ""String_Node_Str"");
          writer.println(""String_Node_Str"");
          return;
        }
        String moduleName=moduleJar.substring(0,moduleJar.length() - 4);
        logger.info(""String_Node_Str"" + moduleName + ""String_Node_Str""+ moduleJar);
        File tmpFile=null;
        try {
          tmpFile=File.createTempFile(moduleName + ""String_Node_Str"",""String_Node_Str"");
          tmpFile.deleteOnExit();
          RunUtil.writeToFile(stream,tmpFile);
          logger.info(""String_Node_Str"" + tmpFile.getAbsolutePath());
        }
 catch (        java.lang.Exception excp) {
          logger.log(Level.WARNING,""String_Node_Str"",excp);
          writer.println(""String_Node_Str"");
          writer.println(""String_Node_Str"");
          writer.println(excp.toString());
          return;
        }
        Collection<File> moduleFiles=new LinkedList<File>();
        moduleFiles.add(tmpFile);
        Collection<Module> result=manager.addToInstall(moduleFiles);
        if (result.isEmpty() == true) {
          logger.warning(""String_Node_Str"" + moduleName);
          writer.println(""String_Node_Str"");
          writer.println(""String_Node_Str"");
          return;
        }
      }
    }
  }
 catch (  FileUploadException excp) {
    logger.log(Level.WARNING,""String_Node_Str"",excp);
    writer.println(""String_Node_Str"");
    writer.println(""String_Node_Str"");
    return;
  }
  manager.installAll();
  logger.info(""String_Node_Str"");
  writer.print(""String_Node_Str"");
  writer.print(""String_Node_Str"");
}"
45871,"/** 
 */
public void primaryViewCellChanged(ViewCell oldViewCell,final ViewCell newViewCell){
  logger.warning(""String_Node_Str"" + newViewCell.getName());
  CellRenderer rend=newViewCell.getCellRenderer(RendererType.RENDERER_JME);
  if (!(rend instanceof AvatarImiJME)) {
    logger.warning(""String_Node_Str"" + newViewCell.getName() + ""String_Node_Str"");
    return;
  }
  if (avatarCellRenderer != null) {
    avatarCellRenderer.removeAvatarChangedListener(avatarChangedListener);
  }
  avatarCellRenderer=(AvatarImiJME)rend;
  avatarCellRenderer.addAvatarChangedListener(avatarChangedListener);
  if (camState != null) {
    camState.setTargetCharacter(avatarCellRenderer.getAvatarCharacter());
    camModel.reset(camState);
  }
  if (gestureHUDRef != null && gestureHUDRef.get() != null) {
    gestureHUDRef.get().setAvatarCharacter(avatarCellRenderer.getAvatarCharacter());
  }
  if (inUseListener == null) {
    inUseListener=new AvatarInUseListener(){
      public void avatarInUse(      AvatarSPI avatar,      boolean isLocal){
        refreshAvatarInUse(newViewCell,isLocal);
      }
    }
;
    AvatarRegistry.getAvatarRegistry().addAvatarInUseListener(inUseListener);
  }
  refreshAvatarInUse(newViewCell,false);
  if (menusAdded == false) {
    MainFrame frame=JmeClientMain.getFrame();
    frame.addToWindowMenu(gestureMI,0);
    frame.addToToolsMenu(gravityEnabledMI,-1);
    frame.addToToolsMenu(collisionEnabledMI,-1);
    frame.addToEditMenu(avatarConfigMI,0);
    if (frame instanceof MainFrameImpl) {
      ((MainFrameImpl)frame).addToCameraChoices(chaseCameraMI,3);
    }
 else {
      frame.addToViewMenu(chaseCameraMI,3);
    }
    if (avatarControlsMI != null) {
      frame.addToWindowMenu(avatarControlsMI,0);
    }
    if (avatarSettingsMI != null) {
      frame.addToEditMenu(avatarSettingsMI,1);
    }
    menusAdded=true;
  }
}","/** 
 */
public void primaryViewCellChanged(ViewCell oldViewCell,final ViewCell newViewCell){
  logger.info(""String_Node_Str"" + newViewCell.getName());
  CellRenderer rend=newViewCell.getCellRenderer(RendererType.RENDERER_JME);
  if (!(rend instanceof AvatarImiJME)) {
    logger.warning(""String_Node_Str"" + newViewCell.getName() + ""String_Node_Str"");
    return;
  }
  if (avatarCellRenderer != null) {
    avatarCellRenderer.removeAvatarChangedListener(avatarChangedListener);
  }
  avatarCellRenderer=(AvatarImiJME)rend;
  avatarCellRenderer.addAvatarChangedListener(avatarChangedListener);
  if (camState != null) {
    camState.setTargetCharacter(avatarCellRenderer.getAvatarCharacter());
    camModel.reset(camState);
  }
  if (gestureHUDRef != null && gestureHUDRef.get() != null) {
    gestureHUDRef.get().setAvatarCharacter(avatarCellRenderer.getAvatarCharacter());
  }
  if (inUseListener == null) {
    inUseListener=new AvatarInUseListener(){
      public void avatarInUse(      AvatarSPI avatar,      boolean isLocal){
        refreshAvatarInUse(newViewCell,isLocal);
      }
    }
;
    AvatarRegistry.getAvatarRegistry().addAvatarInUseListener(inUseListener);
  }
  refreshAvatarInUse(newViewCell,false);
  if (menusAdded == false) {
    MainFrame frame=JmeClientMain.getFrame();
    frame.addToWindowMenu(gestureMI,0);
    frame.addToToolsMenu(gravityEnabledMI,-1);
    frame.addToToolsMenu(collisionEnabledMI,-1);
    frame.addToEditMenu(avatarConfigMI,0);
    if (frame instanceof MainFrameImpl) {
      ((MainFrameImpl)frame).addToCameraChoices(chaseCameraMI,3);
    }
 else {
      frame.addToViewMenu(chaseCameraMI,3);
    }
    if (avatarControlsMI != null) {
      frame.addToWindowMenu(avatarControlsMI,0);
    }
    if (avatarSettingsMI != null) {
      frame.addToEditMenu(avatarSettingsMI,1);
    }
    menusAdded=true;
  }
}"
45872,"/** 
 * Asynchronously loads the set of avatars from all of the various sources in the system.
 */
public void load(){
synchronized (currentState) {
    if (currentState == State.LOADING) {
      logger.warning(""String_Node_Str"");
      return;
    }
 else     if (currentState == State.READY) {
      logger.warning(""String_Node_Str"");
      return;
    }
    currentState=State.LOADING;
  }
  Set<AvatarFactorySPI> factorySet=new HashSet();
  ScannedClassLoader scl=manager.getClassloader();
  Iterator<AvatarFactorySPI> it=scl.getAll(AvatarFactory.class,AvatarFactorySPI.class);
  while (it.hasNext() == true) {
    factorySet.add(it.next());
  }
  for (  AvatarFactorySPI factory : factorySet) {
    loadingSet.add((Class<AvatarFactorySPI>)factory.getClass());
  }
  for (  AvatarFactorySPI factory : factorySet) {
    final AvatarFactorySPI f=factory;
    logger.warning(""String_Node_Str"" + f.getClass().getName());
    new Thread(){
      @Override public void run(){
        try {
          f.registerAvatars(manager);
        }
 catch (        java.lang.Exception excp) {
          logger.log(Level.WARNING,""String_Node_Str"",excp);
        }
 finally {
          loadingComplete((Class<AvatarFactorySPI>)f.getClass());
        }
      }
    }
.start();
  }
}","/** 
 * Asynchronously loads the set of avatars from all of the various sources in the system.
 */
public void load(){
synchronized (currentState) {
    if (currentState == State.LOADING) {
      logger.warning(""String_Node_Str"");
      return;
    }
 else     if (currentState == State.READY) {
      logger.warning(""String_Node_Str"");
      return;
    }
    currentState=State.LOADING;
  }
  Set<AvatarFactorySPI> factorySet=new HashSet();
  ScannedClassLoader scl=manager.getClassloader();
  Iterator<AvatarFactorySPI> it=scl.getAll(AvatarFactory.class,AvatarFactorySPI.class);
  while (it.hasNext() == true) {
    factorySet.add(it.next());
  }
  for (  AvatarFactorySPI factory : factorySet) {
    loadingSet.add((Class<AvatarFactorySPI>)factory.getClass());
  }
  for (  AvatarFactorySPI factory : factorySet) {
    final AvatarFactorySPI f=factory;
    logger.info(""String_Node_Str"" + f.getClass().getName());
    new Thread(){
      @Override public void run(){
        try {
          f.registerAvatars(manager);
        }
 catch (        java.lang.Exception excp) {
          logger.log(Level.WARNING,""String_Node_Str"",excp);
        }
 finally {
          loadingComplete((Class<AvatarFactorySPI>)f.getClass());
        }
      }
    }
.start();
  }
}"
45873,"/** 
 * Sets the state of the avatar session loader.
 * @param state The new state
 */
public void setState(State state){
synchronized (currentState) {
    logger.warning(""String_Node_Str"" + state);
    currentState=state;
    fireAvatarLoaderStateEvent(state);
  }
}","/** 
 * Sets the state of the avatar session loader.
 * @param state The new state
 */
public void setState(State state){
synchronized (currentState) {
    logger.info(""String_Node_Str"" + state);
    currentState=state;
    fireAvatarLoaderStateEvent(state);
  }
}"
45874,"/** 
 * Removes an avatar factory from the set of loading. This updates the state of the loader session to READY once this set is empty.
 * @param clazz The AvatarFactorySPI Class to remove
 */
public void loadingComplete(Class<AvatarFactorySPI> clazz){
synchronized (loadingSet) {
    logger.warning(""String_Node_Str"" + clazz.getName());
    loadingSet.remove(clazz);
    if (loadingSet.isEmpty() == true) {
      setState(State.READY);
    }
  }
}","/** 
 * Removes an avatar factory from the set of loading. This updates the state of the loader session to READY once this set is empty.
 * @param clazz The AvatarFactorySPI Class to remove
 */
public void loadingComplete(Class<AvatarFactorySPI> clazz){
synchronized (loadingSet) {
    logger.info(""String_Node_Str"" + clazz.getName());
    loadingSet.remove(clazz);
    if (loadingSet.isEmpty() == true) {
      setState(State.READY);
    }
  }
}"
45875,"/** 
 * {@inheritDoc}
 */
public WlAvatarCharacter getAvatarCharacter(Cell avatarCell,String userName,AvatarConfigInfo info){
  WorldManager wm=ClientContextJME.getWorldManager();
  CharacterParams attributes=new MaleAvatarParams(userName);
  String baseURL=null;
  try {
    ServerSessionManager manager=avatarCell.getCellCache().getSession().getSessionManager();
    String serverHostAndPort=manager.getServerNameAndPort();
    URL tmpURL=AssetUtils.getAssetURL(""String_Node_Str"",serverHostAndPort);
    baseURL=tmpURL.toExternalForm();
  }
 catch (  MalformedURLException ex) {
    logger.log(Level.WARNING,""String_Node_Str"",ex);
    return null;
  }
  PScene simpleScene=new PScene(ClientContextJME.getWorldManager());
  simpleScene.addMeshInstance(new PPolygonMesh(""String_Node_Str""),new PMatrix());
  attributes.setUseSimpleStaticModel(true,simpleScene);
  attributes.setBaseURL(baseURL);
  WlAvatarCharacter avatar=new WlAvatarCharacter.WlAvatarCharacterBuilder(attributes,wm).addEntity(false).build();
  Spatial spatial=null;
  try {
    URL url=new URL(baseURL + ""String_Node_Str"");
    ResourceLocator resourceLocator=new RelativeResourceLocator(url,avatarCell);
    ResourceLocatorTool.addThreadResourceLocator(ResourceLocatorTool.TYPE_TEXTURE,resourceLocator);
    spatial=(Spatial)BinaryImporter.getInstance().load(url);
    ResourceLocatorTool.removeThreadResourceLocator(ResourceLocatorTool.TYPE_TEXTURE,resourceLocator);
  }
 catch (  IOException excp) {
    logger.log(Level.WARNING,""String_Node_Str"",excp);
    return avatar;
  }
  avatar.getJScene().getExternalKidsRoot().attachChild(spatial);
  avatar.getJScene().setExternalKidsChanged(true);
  return avatar;
}","/** 
 * {@inheritDoc}
 */
public WlAvatarCharacter getAvatarCharacter(Cell avatarCell,String userName,AvatarConfigInfo info){
  WorldManager wm=ClientContextJME.getWorldManager();
  CharacterParams attributes=new MaleAvatarParams(userName);
  String baseURL=null;
  try {
    ServerSessionManager manager=avatarCell.getCellCache().getSession().getSessionManager();
    String serverHostAndPort=manager.getServerNameAndPort();
    URL tmpURL=AssetUtils.getAssetURL(""String_Node_Str"",serverHostAndPort);
    baseURL=tmpURL.toExternalForm();
  }
 catch (  MalformedURLException ex) {
    logger.log(Level.WARNING,""String_Node_Str"",ex);
    return null;
  }
  PScene simpleScene=new PScene(ClientContextJME.getWorldManager());
  simpleScene.addMeshInstance(new PPolygonMesh(""String_Node_Str""),new PMatrix());
  attributes.setUseSimpleStaticModel(true,simpleScene);
  attributes.setBaseURL(baseURL);
  attributes.setAnimateBody(false);
  attributes.setAnimateFace(false);
  WlAvatarCharacter avatar=new WlAvatarCharacter.WlAvatarCharacterBuilder(attributes,wm).addEntity(false).build();
  Spatial spatial=null;
  try {
    URL url=new URL(baseURL + ""String_Node_Str"");
    ResourceLocator resourceLocator=new RelativeResourceLocator(url,avatarCell);
    ResourceLocatorTool.addThreadResourceLocator(ResourceLocatorTool.TYPE_TEXTURE,resourceLocator);
    spatial=(Spatial)BinaryImporter.getInstance().load(url);
    ResourceLocatorTool.removeThreadResourceLocator(ResourceLocatorTool.TYPE_TEXTURE,resourceLocator);
  }
 catch (  IOException excp) {
    logger.log(Level.WARNING,""String_Node_Str"",excp);
    return avatar;
  }
  avatar.getJScene().getExternalKidsRoot().attachChild(spatial);
  avatar.getJScene().setExternalKidsChanged(true);
  return avatar;
}"
45876,"/** 
 * {@inheritDoc}
 */
@Override public void setClientState(CellComponentClientState clientState){
  super.setClientState(clientState);
  avatarConfigInfo=((AvatarConfigComponentClientState)clientState).getAvatarConfigInfo();
  try {
    if (avatarConfigInfo != null) {
      String str=avatarConfigInfo.getAvatarConfigURL();
      if (str != null) {
        if (str.startsWith(""String_Node_Str"") == true) {
          URL newURL=AssetUtils.getAssetURL(""String_Node_Str"" + str,cell);
          System.err.println(""String_Node_Str"" + str);
          avatarConfigInfo=new AvatarConfigInfo(newURL.toExternalForm(),avatarConfigInfo.getLoaderFactoryClassName());
        }
      }
    }
  }
 catch (  MalformedURLException ex) {
    Logger.getLogger(AvatarConfigComponent.class.getName()).log(Level.SEVERE,null,ex);
  }
}","/** 
 * {@inheritDoc}
 */
@Override public void setClientState(CellComponentClientState clientState){
  super.setClientState(clientState);
  avatarConfigInfo=((AvatarConfigComponentClientState)clientState).getAvatarConfigInfo();
  try {
    if (avatarConfigInfo != null) {
      String str=avatarConfigInfo.getAvatarConfigURL();
      if (str != null) {
        if (str.startsWith(""String_Node_Str"") == true) {
          URL newURL=AssetUtils.getAssetURL(""String_Node_Str"" + str,cell);
          avatarConfigInfo=new AvatarConfigInfo(newURL.toExternalForm(),avatarConfigInfo.getLoaderFactoryClassName());
        }
      }
    }
  }
 catch (  MalformedURLException ex) {
    Logger.getLogger(AvatarConfigComponent.class.getName()).log(Level.SEVERE,null,ex);
  }
}"
45877,"/** 
 * Attempt to use the current avatar. Close the window if so.
 */
private void use(){
  final AvatarRegistry registry=AvatarRegistry.getAvatarRegistry();
  final String newAvatarName=nameTextField.getText().trim();
  if (newAvatarName == null || newAvatarName.equals(""String_Node_Str"") == true) {
    String msg=""String_Node_Str"";
    JOptionPane.showMessageDialog(this,msg,""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
    return;
  }
  if (newAvatarName.indexOf(""String_Node_Str"") != -1) {
    String msg=""String_Node_Str"";
    JOptionPane.showMessageDialog(this,msg,""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
    return;
  }
  AvatarSPI oldAvatar=registry.getAvatarByName(newAvatarName);
  if (newAvatarName.equals(originalAvatarName) == false && oldAvatar != null) {
    String msg=""String_Node_Str"" + newAvatarName + ""String_Node_Str""+ ""String_Node_Str"";
    JOptionPane.showMessageDialog(this,msg,""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
    return;
  }
  if (newAvatarName.equals(originalAvatarName) == true) {
    logger.warning(""String_Node_Str"" + originalAvatarName);
    setBusy(true);
    new Thread(){
      @Override public void run(){
        avatar.setAvatarParams(currentParams);
        save(avatar);
        registry.setAvatarInUse(avatar,false);
        SwingUtilities.invokeLater(new Runnable(){
          public void run(){
            setBusy(false);
            setVisible(false);
          }
        }
);
      }
    }
.start();
    return;
  }
  setBusy(true);
  new Thread(){
    @Override public void run(){
      ImiAvatar newAvatar=ImiAvatar.createAvatar(newAvatarName);
      newAvatar.setAvatarParams(currentParams);
      save(newAvatar);
      registry.setAvatarInUse(newAvatar,false);
      if (registry.getAvatarByName(originalAvatarName) != null) {
        avatar.delete();
      }
      SwingUtilities.invokeLater(new Runnable(){
        public void run(){
          setBusy(false);
          setVisible(false);
        }
      }
);
    }
  }
.start();
}","/** 
 * Attempt to use the current avatar. Close the window if so.
 */
private void use(){
  final AvatarRegistry registry=AvatarRegistry.getAvatarRegistry();
  final String newAvatarName=nameTextField.getText().trim();
  if (newAvatarName == null || newAvatarName.equals(""String_Node_Str"") == true) {
    String msg=""String_Node_Str"";
    JOptionPane.showMessageDialog(this,msg,""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
    return;
  }
  if (newAvatarName.indexOf(""String_Node_Str"") != -1) {
    String msg=""String_Node_Str"";
    JOptionPane.showMessageDialog(this,msg,""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
    return;
  }
  AvatarSPI oldAvatar=registry.getAvatarByName(newAvatarName);
  if (newAvatarName.equals(originalAvatarName) == false && oldAvatar != null) {
    String msg=""String_Node_Str"" + newAvatarName + ""String_Node_Str""+ ""String_Node_Str"";
    JOptionPane.showMessageDialog(this,msg,""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
    return;
  }
  if (newAvatarName.equals(originalAvatarName) == true) {
    setBusy(true);
    new Thread(){
      @Override public void run(){
        avatar.setAvatarParams(currentParams);
        save(avatar);
        registry.setAvatarInUse(avatar,false);
        SwingUtilities.invokeLater(new Runnable(){
          public void run(){
            setBusy(false);
            setVisible(false);
          }
        }
);
      }
    }
.start();
    return;
  }
  setBusy(true);
  new Thread(){
    @Override public void run(){
      ImiAvatar newAvatar=ImiAvatar.createAvatar(newAvatarName);
      newAvatar.setAvatarParams(currentParams);
      save(newAvatar);
      registry.setAvatarInUse(newAvatar,false);
      if (registry.getAvatarByName(originalAvatarName) != null) {
        avatar.delete();
      }
      SwingUtilities.invokeLater(new Runnable(){
        public void run(){
          setBusy(false);
          setVisible(false);
        }
      }
);
    }
  }
.start();
}"
45878,"/** 
 * Sets the current attributes of the avatar and refreshes the GUI. NOTE: This method assumes it is being called in the AWT Event Thread.
 * @param attributes The attribute of the avatar configuration
 */
public void setAttributes(WonderlandCharacterParams attributes){
  if (EventQueue.isDispatchThread() == false) {
    logger.warning(""String_Node_Str"");
  }
  currentParams=attributes.clone();
  populateComboBox(hairComboBox,ConfigType.HAIR,""String_Node_Str"");
  populateComboBox(headComboBox,ConfigType.HEAD,""String_Node_Str"");
  populateComboBox(torsoComboBox,ConfigType.TORSO,""String_Node_Str"");
  populateComboBox(legsComboBox,ConfigType.LEGS,""String_Node_Str"");
  populateComboBox(jacketComboBox,ConfigType.JACKET,""String_Node_Str"");
  populateComboBox(handsComboBox,ConfigType.HANDS,""String_Node_Str"");
  populateComboBox(feetComboBox,ConfigType.FEET,""String_Node_Str"");
  updateAvatarName();
  updateGender();
  updateComboBoxes();
}","/** 
 * Sets the current attributes of the avatar and refreshes the GUI. NOTE: This method assumes it is being called in the AWT Event Thread.
 * @param attributes The attribute of the avatar configuration
 */
public void setAttributes(WonderlandCharacterParams attributes){
  if (EventQueue.isDispatchThread() == false) {
    logger.severe(""String_Node_Str"");
  }
  currentParams=attributes.clone();
  populateComboBox(hairComboBox,ConfigType.HAIR,""String_Node_Str"");
  populateComboBox(headComboBox,ConfigType.HEAD,""String_Node_Str"");
  populateComboBox(torsoComboBox,ConfigType.TORSO,""String_Node_Str"");
  populateComboBox(legsComboBox,ConfigType.LEGS,""String_Node_Str"");
  populateComboBox(jacketComboBox,ConfigType.JACKET,""String_Node_Str"");
  populateComboBox(handsComboBox,ConfigType.HANDS,""String_Node_Str"");
  populateComboBox(feetComboBox,ConfigType.FEET,""String_Node_Str"");
  updateAvatarName();
  updateGender();
  updateComboBoxes();
}"
45879,"@Override public void compute(ProcessorArmingCollection arg0){
  for (  Event evt : events) {
    System.err.println(evt);
    if (evt instanceof KeyEvent3D && evt.isFocussed()) {
      KeyEvent ke=(KeyEvent)((KeyEvent3D)evt).getAwtEvent();
      inputGroup.processKeyEvent(ke);
    }
 else     if (evt instanceof MouseEvent3D && evt.isFocussed()) {
      MouseEvent me=(MouseEvent)((MouseEvent3D)evt).getAwtEvent();
      inputGroup.processMouseEvent(me);
    }
  }
  events.clear();
}","@Override public void compute(ProcessorArmingCollection arg0){
  for (  Event evt : events) {
    if (evt instanceof KeyEvent3D && evt.isFocussed()) {
      KeyEvent ke=(KeyEvent)((KeyEvent3D)evt).getAwtEvent();
      inputGroup.processKeyEvent(ke);
    }
 else     if (evt instanceof MouseEvent3D && evt.isFocussed()) {
      MouseEvent me=(MouseEvent)((MouseEvent3D)evt).getAwtEvent();
      inputGroup.processMouseEvent(me);
    }
  }
  events.clear();
}"
45880,"public void loadAndChangeAvatar(final AvatarConfigInfo avatarConfigInfo){
  logger.warning(""String_Node_Str"");
  WlAvatarCharacter avatar=loadAvatar(avatarConfigInfo);
  logger.warning(""String_Node_Str"");
  changeAvatar(avatar);
  logger.warning(""String_Node_Str"");
}","public void loadAndChangeAvatar(final AvatarConfigInfo avatarConfigInfo){
  logger.info(""String_Node_Str"");
  WlAvatarCharacter avatar=loadAvatar(avatarConfigInfo);
  logger.info(""String_Node_Str"");
  changeAvatar(avatar);
  logger.info(""String_Node_Str"");
}"
45881,"public void selectForInput(boolean selected){
  if (selectedForInput == selected)   return;
  selectedForInput=selected;
  if (avatarCharacter != null) {
    WorldManager wm=ClientContextJME.getWorldManager();
    ((WlAvatarContext)avatarCharacter.getContext()).getBehaviorManager().setEnable(false);
    if (controlScheme == null && selectedForInput) {
      controlScheme=new DefaultCharacterControls(ClientContextJME.getWorldManager());
      ((AvatarControls)wm.getUserData(AvatarControls.class)).setDefault(controlScheme);
      avatarCharacter.selectForInput();
      controlScheme.addCharacterToTeam(avatarCharacter);
      controlScheme.setCharacter(avatarCharacter);
    }
    if (selectedForInput) {
      avatarCharacter.getContext().getController().addCharacterMotionListener(characterMotionListener);
      avatarCharacter.getContext().addGameContextListener(gameContextListener);
      avatarCharacter.selectForInput();
      controlScheme.addCharacterToTeam(avatarCharacter);
      controlScheme.setCharacter(avatarCharacter);
      ProcessorCollectionComponent pcc=avatarCharacter.getComponent(ProcessorCollectionComponent.class);
      ProcessorComponent characterProcessor=null;
      ProcessorComponent characterAnimationProcessor=null;
      for (      ProcessorComponent pc : pcc.getProcessors()) {
        if (pc instanceof CharacterProcessor)         characterProcessor=pc;
 else         if (pc instanceof CharacterAnimationProcessor) {
          characterAnimationProcessor=pc;
          break;
        }
      }
      cameraChainedProcessor=null;
      if (characterAnimationProcessor != null) {
        cameraChainedProcessor=characterAnimationProcessor;
      }
 else       if (characterProcessor != null)       cameraChainedProcessor=characterProcessor;
      if (cameraChainedProcessor != null) {
        cameraChainedProcessor.addToChain(ViewManager.getViewManager().getCameraProcessor());
        cameraChainedProcessor.setRunInRenderer(true);
      }
    }
 else {
      avatarCharacter.getContext().getController().removeCharacterMotionListener(characterMotionListener);
      avatarCharacter.getContext().removeGameContextListener(gameContextListener);
      if (controlScheme != null) {
        controlScheme.clearCharacterTeam();
      }
      if (cameraChainedProcessor != null) {
        cameraChainedProcessor.removeFromChain(ViewManager.getViewManager().getCameraProcessor());
        cameraChainedProcessor=null;
      }
    }
  }
 else {
    logger.severe(""String_Node_Str"");
  }
}","public void selectForInput(boolean selected){
  if (selectedForInput == selected)   return;
  if (avatarCharacter == null) {
    logger.warning(""String_Node_Str"");
    Thread.dumpStack();
    return;
  }
  logger.info(""String_Node_Str"" + selected);
  selectedForInput=selected;
  if (avatarCharacter != null) {
    WorldManager wm=ClientContextJME.getWorldManager();
    ((WlAvatarContext)avatarCharacter.getContext()).getBehaviorManager().setEnable(false);
    if (controlScheme == null && selectedForInput) {
      controlScheme=new DefaultCharacterControls(ClientContextJME.getWorldManager());
      ((AvatarControls)wm.getUserData(AvatarControls.class)).setDefault(controlScheme);
    }
    if (selectedForInput) {
      avatarCharacter.getContext().getController().addCharacterMotionListener(characterMotionListener);
      avatarCharacter.getContext().addGameContextListener(gameContextListener);
      avatarCharacter.selectForInput();
      controlScheme.addCharacterToTeam(avatarCharacter);
      controlScheme.setCharacter(avatarCharacter);
      ProcessorCollectionComponent pcc=avatarCharacter.getComponent(ProcessorCollectionComponent.class);
      ProcessorComponent characterProcessor=null;
      ProcessorComponent characterAnimationProcessor=null;
      for (      ProcessorComponent pc : pcc.getProcessors()) {
        if (pc instanceof CharacterProcessor)         characterProcessor=pc;
 else         if (pc instanceof CharacterAnimationProcessor) {
          characterAnimationProcessor=pc;
          break;
        }
      }
      cameraChainedProcessor=null;
      if (characterAnimationProcessor != null) {
        cameraChainedProcessor=characterAnimationProcessor;
      }
 else       if (characterProcessor != null)       cameraChainedProcessor=characterProcessor;
      if (cameraChainedProcessor != null) {
        cameraChainedProcessor.addToChain(ViewManager.getViewManager().getCameraProcessor());
        cameraChainedProcessor.setRunInRenderer(true);
      }
    }
 else {
      avatarCharacter.getContext().getController().removeCharacterMotionListener(characterMotionListener);
      avatarCharacter.getContext().removeGameContextListener(gameContextListener);
      if (controlScheme != null) {
        controlScheme.clearCharacterTeam();
      }
      if (cameraChainedProcessor != null) {
        cameraChainedProcessor.removeFromChain(ViewManager.getViewManager().getCameraProcessor());
        cameraChainedProcessor=null;
      }
    }
  }
 else {
    logger.severe(""String_Node_Str"");
  }
}"
45882,"@Override public void cellTransformUpdate(CellTransform transform){
  if (!selectedForInput && avatarCharacter != null && avatarCharacter.getContext().getController().getModelInstance() != null) {
    if (avatarCharacter.getContext().getBehaviorManager().isEnabled() && avatarCharacter.getContext().getBehaviorManager().getCurrentTask() != null) {
      System.err.println(""String_Node_Str"");
    }
 else {
      Vector3f pos=transform.getTranslation(null);
      Vector3f dir=new Vector3f(0,0,-1);
      transform.getRotation(null).multLocal(dir);
      PMatrix local=avatarCharacter.getContext().getController().getModelInstance().getTransform().getLocalMatrix(true);
      final Vector3f currentPosition=local.getTranslation();
      float currentDistance=currentPosition.distance(pos);
      if (currentDistance < positionMaxDistanceForPull) {
        pos.set(currentPosition);
      }
    }
  }
}","@Override public void cellTransformUpdate(CellTransform transform){
  if (!selectedForInput && avatarCharacter != null && avatarCharacter.getContext().getController().getModelInstance() != null) {
    if (avatarCharacter.getContext().getBehaviorManager().isEnabled() && avatarCharacter.getContext().getBehaviorManager().getCurrentTask() != null) {
    }
 else {
      Vector3f pos=transform.getTranslation(null);
      Vector3f dir=new Vector3f(0,0,-1);
      transform.getRotation(null).multLocal(dir);
      PMatrix local=avatarCharacter.getContext().getController().getModelInstance().getTransform().getLocalMatrix(true);
      final Vector3f currentPosition=local.getTranslation();
      float currentDistance=currentPosition.distance(pos);
      if (currentDistance < positionMaxDistanceForPull) {
        pos.set(currentPosition);
      }
    }
  }
}"
45883,"/** 
 * Load and return an avatar given its configuration information.
 * @param avatarConfigInfo The avatar configuration info
 * @return The Avatar character
 */
private WlAvatarCharacter loadAvatar(AvatarConfigInfo avatarConfigInfo){
  LoadingInfo.startedLoading(cell.getCellID(),username);
  try {
    if (avatarConfigInfo != null) {
      logger.warning(""String_Node_Str"" + avatarConfigInfo.getAvatarConfigURL() + ""String_Node_Str""+ avatarConfigInfo.getLoaderFactoryClassName());
    }
 else {
      logger.warning(""String_Node_Str"");
    }
    return loadAvatarInternal(avatarConfigInfo);
  }
 catch (  java.lang.Exception excp) {
    logger.log(Level.WARNING,""String_Node_Str"" + ""String_Node_Str"" + avatarConfigInfo.getAvatarConfigURL(),excp);
    return null;
  }
 finally {
    LoadingInfo.finishedLoading(cell.getCellID(),username);
  }
}","/** 
 * Load and return an avatar given its configuration information.
 * @param avatarConfigInfo The avatar configuration info
 * @return The Avatar character
 */
private WlAvatarCharacter loadAvatar(AvatarConfigInfo avatarConfigInfo){
  LoadingInfo.startedLoading(cell.getCellID(),username);
  try {
    if (avatarConfigInfo != null) {
      logger.info(""String_Node_Str"" + avatarConfigInfo.getAvatarConfigURL() + ""String_Node_Str""+ avatarConfigInfo.getLoaderFactoryClassName());
    }
 else {
      logger.info(""String_Node_Str"");
    }
    return loadAvatarInternal(avatarConfigInfo);
  }
 catch (  java.lang.Exception excp) {
    logger.log(Level.WARNING,""String_Node_Str"" + ""String_Node_Str"" + avatarConfigInfo.getAvatarConfigURL(),excp);
    return null;
  }
 finally {
    LoadingInfo.finishedLoading(cell.getCellID(),username);
  }
}"
45884,"public AvatarImiJME(Cell cell){
  super(cell);
  assert(cell != null);
  final Cell c=cell;
  AvatarConfigComponent comp=cell.getComponent(AvatarConfigComponent.class);
  comp.addAvatarConfigChangeListener(new AvatarChangeListener());
  if (cell instanceof AvatarCell)   username=((AvatarCell)cell).getIdentity().getUsername();
 else   username=""String_Node_Str"";
  characterMotionListener=new CharacterMotionListener(){
    Vector3f prevTrans;
    PMatrix prevRot;
    public void transformUpdate(    Vector3f translation,    PMatrix rotation){
      if (logger.isLoggable(Level.FINEST)) {
        logger.finest(""String_Node_Str"" + prevTrans + ""String_Node_Str""+ translation+ ""String_Node_Str""+ prevRot+ ""String_Node_Str""+ rotation);
      }
      if (prevTrans == null || !Math3DUtils.epsilonEquals(prevTrans,translation,0.001f) || prevRot == null || !prevRot.epsilonEquals(rotation,0.001f)) {
        ((MovableAvatarComponent)c.getComponent(MovableComponent.class)).localMoveRequest(new CellTransform(rotation.getRotation(),translation));
        prevTrans=translation.clone();
        prevRot=new PMatrix(rotation);
      }
    }
  }
;
  gameContextListener=new GameContextListener(){
    public void trigger(    boolean pressed,    int trigger,    Vector3f translation,    Quaternion rotation){
synchronized (this) {
        currentTrigger=trigger;
        currentPressed=pressed;
      }
      GameState state=avatarCharacter.getContext().getCurrentState();
      String animationName=null;
      if (state instanceof CycleActionState) {
        animationName=avatarCharacter.getContext().getState(CycleActionState.class).getAnimationName();
      }
      if (c.getComponent(MovableComponent.class) == null)       System.err.println(""String_Node_Str"");
 else       ((MovableAvatarComponent)c.getComponent(MovableComponent.class)).localMoveRequest(new CellTransform(rotation,translation),trigger,pressed,animationName,null);
    }
  }
;
  ClientContext.getInputManager().addGlobalEventListener(new EventClassListener(){
    private Class[] consumeClasses=new Class[]{AvatarRendererChangeRequestEvent.class,AvatarNameEvent.class};
    @Override public Class[] eventClassesToConsume(){
      return consumeClasses;
    }
    @Override public void commitEvent(    Event event){
      if (event instanceof AvatarNameEvent) {
        AvatarNameEvent e=(AvatarNameEvent)event;
        NameTagNode nameTagNode=getNameTagNode();
        if (e.getUsername().equals(username) == true) {
          nameTagNode.setNameTag(e.getEventType(),username,e.getUsernameAlias(),e.getForegroundColor(),e.getFont());
        }
      }
 else       if (event instanceof AvatarRendererChangeRequestEvent) {
        handleAvatarRendererChangeRequest((AvatarRendererChangeRequestEvent)event);
      }
    }
    @Override public void computeEvent(    Event evtIn){
    }
  }
);
  collisionChangeRequestListener=new CollisionChangeRequestListener();
  ClientContext.getInputManager().addGlobalEventListener(collisionChangeRequestListener);
}","public AvatarImiJME(Cell cell){
  super(cell);
  assert(cell != null);
  final Cell c=cell;
  AvatarConfigComponent comp=cell.getComponent(AvatarConfigComponent.class);
  comp.addAvatarConfigChangeListener(new AvatarChangeListener());
  if (cell instanceof AvatarCell)   username=((AvatarCell)cell).getIdentity().getUsername();
 else   username=""String_Node_Str"";
  characterMotionListener=new CharacterMotionListener(){
    Vector3f prevTrans;
    PMatrix prevRot;
    public void transformUpdate(    Vector3f translation,    PMatrix rotation){
      if (logger.isLoggable(Level.FINEST)) {
        logger.finest(""String_Node_Str"" + prevTrans + ""String_Node_Str""+ translation+ ""String_Node_Str""+ prevRot+ ""String_Node_Str""+ rotation);
      }
      if (prevTrans == null || !Math3DUtils.epsilonEquals(prevTrans,translation,0.001f) || prevRot == null || !prevRot.epsilonEquals(rotation,0.001f)) {
        ((MovableAvatarComponent)c.getComponent(MovableComponent.class)).localMoveRequest(new CellTransform(rotation.getRotation(),translation));
        prevTrans=translation.clone();
        prevRot=new PMatrix(rotation);
      }
    }
  }
;
  gameContextListener=new GameContextListener(){
    public void trigger(    boolean pressed,    int trigger,    Vector3f translation,    Quaternion rotation){
synchronized (this) {
        currentTrigger=trigger;
        currentPressed=pressed;
      }
      GameState state=avatarCharacter.getContext().getCurrentState();
      String animationName=null;
      if (state instanceof CycleActionState) {
        animationName=avatarCharacter.getContext().getState(CycleActionState.class).getAnimationName();
      }
      if (c.getComponent(MovableComponent.class) == null)       logger.warning(""String_Node_Str"");
 else       ((MovableAvatarComponent)c.getComponent(MovableComponent.class)).localMoveRequest(new CellTransform(rotation,translation),trigger,pressed,animationName,null);
    }
  }
;
  ClientContext.getInputManager().addGlobalEventListener(new EventClassListener(){
    private Class[] consumeClasses=new Class[]{AvatarRendererChangeRequestEvent.class,AvatarNameEvent.class};
    @Override public Class[] eventClassesToConsume(){
      return consumeClasses;
    }
    @Override public void commitEvent(    Event event){
      if (event instanceof AvatarNameEvent) {
        AvatarNameEvent e=(AvatarNameEvent)event;
        NameTagNode nameTagNode=getNameTagNode();
        if (e.getUsername().equals(username) == true) {
          nameTagNode.setNameTag(e.getEventType(),username,e.getUsernameAlias(),e.getForegroundColor(),e.getFont());
        }
      }
 else       if (event instanceof AvatarRendererChangeRequestEvent) {
        handleAvatarRendererChangeRequest((AvatarRendererChangeRequestEvent)event);
      }
    }
    @Override public void computeEvent(    Event evtIn){
    }
  }
);
  collisionChangeRequestListener=new CollisionChangeRequestListener();
  ClientContext.getInputManager().addGlobalEventListener(collisionChangeRequestListener);
}"
45885,"/** 
 * Change the current avatar to the given avatar. NOTE: This method must be called in the MT Game Render Thread. As such, we assume only one of these methods is called at a time.
 * @param newAvatar The new avatar to change to.
 */
private void changeAvatarInternal(WlAvatarCharacter newAvatar){
  LoadingInfo.startedLoading(cell.getCellID(),newAvatar.getName());
  Node nameTagNode=getNameTagNode();
  PMatrix currentLocation=null;
  if (avatarCharacter != null) {
    currentLocation=avatarCharacter.getModelInst().getTransform().getWorldMatrix(true);
    rootEntity.removeEntity(avatarCharacter);
    avatarCharacter.getJScene().getExternalKidsRoot().detachChild(nameTagNode);
    selectForInput(false);
    avatarCharacter.destroy();
  }
  avatarCharacter=newAvatar;
  if (newAvatar == null) {
    return;
  }
  RenderComponent rc=(RenderComponent)avatarCharacter.getComponent(RenderComponent.class);
  addDefaultComponents(avatarCharacter,rc.getSceneRoot());
  avatarCharacter.removeComponent(CollisionComponent.class);
  if (currentLocation != null && avatarCharacter.getModelInst() != null) {
    avatarCharacter.getModelInst().setTransform(new PTransform(currentLocation));
  }
  Node externalRoot=avatarCharacter.getJScene().getExternalKidsRoot();
  externalRoot.attachChild(nameTagNode);
  externalRoot.setModelBound(new BoundingSphere());
  externalRoot.updateModelBound();
  externalRoot.updateGeometricState(0,true);
  rootEntity.addEntity(avatarCharacter);
  selectForInput(selectedForInput);
  for (  WeakReference<AvatarChangedListener> listenerRef : avatarChangedListeners) {
    AvatarChangedListener listener=listenerRef.get();
    if (listener != null) {
      listener.avatarChanged(avatarCharacter);
    }
 else {
      avatarChangedListeners.remove(listenerRef);
    }
  }
  if (avatarCharacter.getJScene() != null) {
    avatarCharacter.getPScene().submitTransformsAndGeometry(true);
    avatarCharacter.getJScene().setModelBound(new BoundingSphere());
    avatarCharacter.getJScene().updateModelBound();
    avatarCharacter.getJScene().updateWorldBound();
  }
  LoadingInfo.finishedLoading(cell.getCellID(),newAvatar.getName());
}","/** 
 * Change the current avatar to the given avatar. NOTE: This method must be called in the MT Game Render Thread. As such, we assume only one of these methods is called at a time.
 * @param newAvatar The new avatar to change to.
 */
private void changeAvatarInternal(WlAvatarCharacter newAvatar){
  if (newAvatar == null)   return;
  LoadingInfo.startedLoading(cell.getCellID(),newAvatar.getName());
  Node nameTagNode=getNameTagNode();
  PMatrix currentLocation=null;
  boolean wasSelectedForInput=false;
  if (avatarCharacter != null) {
    currentLocation=avatarCharacter.getModelInst().getTransform().getWorldMatrix(true);
    rootEntity.removeEntity(avatarCharacter);
    avatarCharacter.getJScene().getExternalKidsRoot().detachChild(nameTagNode);
    wasSelectedForInput=selectedForInput;
    selectForInput(false);
    avatarCharacter.destroy();
  }
  avatarCharacter=newAvatar;
  if (newAvatar == null) {
    return;
  }
  RenderComponent rc=(RenderComponent)avatarCharacter.getComponent(RenderComponent.class);
  addDefaultComponents(avatarCharacter,rc.getSceneRoot());
  avatarCharacter.removeComponent(CollisionComponent.class);
  if (currentLocation != null && avatarCharacter.getModelInst() != null) {
    avatarCharacter.getModelInst().setTransform(new PTransform(currentLocation));
  }
  Node externalRoot=avatarCharacter.getJScene().getExternalKidsRoot();
  externalRoot.attachChild(nameTagNode);
  externalRoot.setModelBound(new BoundingSphere());
  externalRoot.updateModelBound();
  externalRoot.updateGeometricState(0,true);
  rootEntity.addEntity(avatarCharacter);
  selectForInput(((AvatarCell)cell).isSelectedForInput());
  for (  WeakReference<AvatarChangedListener> listenerRef : avatarChangedListeners) {
    AvatarChangedListener listener=listenerRef.get();
    if (listener != null) {
      listener.avatarChanged(avatarCharacter);
    }
 else {
      avatarChangedListeners.remove(listenerRef);
    }
  }
  if (avatarCharacter.getJScene() != null) {
    avatarCharacter.getPScene().submitTransformsAndGeometry(true);
    avatarCharacter.getJScene().setModelBound(new BoundingSphere());
    avatarCharacter.getJScene().updateModelBound();
    avatarCharacter.getJScene().updateWorldBound();
  }
  LoadingInfo.finishedLoading(cell.getCellID(),newAvatar.getName());
}"
45886,"/** 
 * {@inheritDoc}
 */
@Override public void setStatus(CellStatus status,boolean increasing){
  super.setStatus(status,increasing);
  logger.warning(""String_Node_Str"" + status + ""String_Node_Str""+ increasing);
  if (status == CellStatus.ACTIVE && increasing == true) {
    if (cellMoveListener != null) {
      cell.getComponent(MovableComponent.class).removeServerCellMoveListener(cellMoveListener);
      cellMoveListener=null;
    }
    if (avatarCharacter == null) {
      AvatarConfigComponent configComp=cell.getComponent(AvatarConfigComponent.class);
      AvatarConfigInfo avatarConfigInfo=null;
      if (configComp != null) {
        avatarConfigInfo=configComp.getAvatarConfigInfo();
      }
      logger.warning(""String_Node_Str"" + avatarConfigInfo);
      pendingAvatar=loadAvatar(avatarConfigInfo);
    }
 else {
      ClientContextJME.getWorldManager().removeEntity(avatarCharacter);
      pendingAvatar=null;
    }
    logger.warning(""String_Node_Str"");
    changeAvatar(pendingAvatar);
    if (cellMoveListener == null) {
      cellMoveListener=new CellMoveListener(){
        public void cellMoved(        CellTransform transform,        CellMoveSource source){
          if (source == CellMoveSource.REMOTE) {
            if (avatarCharacter != null) {
              if (avatarCharacter.getModelInst() == null) {
                logger.severe(""String_Node_Str"");
                Thread.dumpStack();
                return;
              }
              avatarCharacter.getModelInst().setTransform(new PTransform(transform.getRotation(null),transform.getTranslation(null),new Vector3f(1,1,1)));
            }
          }
        }
      }
;
    }
    cell.getComponent(MovableComponent.class).addServerCellMoveListener(cellMoveListener);
  }
 else   if (status == CellStatus.RENDERING) {
    if (((AvatarCell)cell).isSelectedForInput())     selectForInput(true);
  }
}","/** 
 * {@inheritDoc}
 */
@Override public void setStatus(CellStatus status,boolean increasing){
  super.setStatus(status,increasing);
  logger.info(""String_Node_Str"" + status + ""String_Node_Str""+ increasing);
  if (status == CellStatus.ACTIVE && increasing == true) {
    if (cellMoveListener != null) {
      cell.getComponent(MovableComponent.class).removeServerCellMoveListener(cellMoveListener);
      cellMoveListener=null;
    }
    if (avatarCharacter == null) {
      AvatarConfigComponent configComp=cell.getComponent(AvatarConfigComponent.class);
      AvatarConfigInfo avatarConfigInfo=null;
      if (configComp != null) {
        avatarConfigInfo=configComp.getAvatarConfigInfo();
      }
      logger.info(""String_Node_Str"" + avatarConfigInfo);
      pendingAvatar=loadAvatar(avatarConfigInfo);
    }
 else {
      ClientContextJME.getWorldManager().removeEntity(avatarCharacter);
      pendingAvatar=null;
    }
    logger.info(""String_Node_Str"");
    changeAvatar(pendingAvatar);
    if (cellMoveListener == null) {
      cellMoveListener=new CellMoveListener(){
        public void cellMoved(        CellTransform transform,        CellMoveSource source){
          if (source == CellMoveSource.REMOTE) {
            if (avatarCharacter != null) {
              if (avatarCharacter.getModelInst() == null) {
                logger.severe(""String_Node_Str"");
                Thread.dumpStack();
                return;
              }
              avatarCharacter.getModelInst().setTransform(new PTransform(transform.getRotation(null),transform.getTranslation(null),new Vector3f(1,1,1)));
            }
          }
        }
      }
;
    }
    cell.getComponent(MovableComponent.class).addServerCellMoveListener(cellMoveListener);
  }
}"
45887,"public void run(){
  if (mainHUD == null) {
    mainHUD=HUDManagerFactory.getHUDManager().getHUD(""String_Node_Str"");
  }
  for (  String name : buttonMap.keySet()) {
    HUDButton button=buttonMap.get(name);
    mainHUD.removeComponent(button);
  }
  buttonMap.clear();
  gestureMap.clear();
  if (avatar == null) {
    return;
  }
  for (  String action : avatar.getAnimationNames()) {
    String name=action;
    if (action.startsWith(""String_Node_Str"") == true) {
      name=name.substring(5);
    }
 else     if (action.startsWith(""String_Node_Str"") == true) {
      name=name.substring(7);
    }
    gestureMap.put(bundle.getString(name),action);
  }
  gestureMap.put(""String_Node_Str"",""String_Node_Str"");
  gestureMap.put(""String_Node_Str"",""String_Node_Str"");
  for (  String name : gestureMap.keySet()) {
    int row=0;
    int column=0;
    for (    String[] gesture : gestures) {
      if (gesture[0].equals(name)) {
        column=Integer.valueOf(gesture[1]);
        row=Integer.valueOf(gesture[2]);
        HUDButton button=mainHUD.createButton(name);
        button.setDecoratable(false);
        button.setPreferredTransparency(0.2f);
        button.setLocation(leftMargin + column * columnWidth,bottomMargin + row * rowHeight);
        mainHUD.addComponent(button);
        buttonMap.put(name,button);
        button.addActionListener(new ActionListener(){
          public void actionPerformed(          ActionEvent event){
            String action=gestureMap.get(event.getActionCommand());
            logger.info(""String_Node_Str"" + event.getActionCommand());
            if (action.equals(""String_Node_Str"") == true) {
              doSitGesture(avatar);
            }
 else             if (action.equals(""String_Node_Str"") == true) {
              CharacterEyes eyes=avatar.getEyes();
              eyes.wink(false);
            }
 else {
              avatar.playAnimation(action);
            }
          }
        }
);
        break;
      }
    }
  }
  setVisible(true);
}","public void run(){
  if (mainHUD == null) {
    mainHUD=HUDManagerFactory.getHUDManager().getHUD(""String_Node_Str"");
  }
  for (  String name : buttonMap.keySet()) {
    HUDButton button=buttonMap.get(name);
    mainHUD.removeComponent(button);
  }
  buttonMap.clear();
  gestureMap.clear();
  if (avatar == null) {
    return;
  }
  for (  String action : avatar.getAnimationNames()) {
    String name=action;
    if (action.startsWith(""String_Node_Str"") == true) {
      name=name.substring(5);
    }
 else     if (action.startsWith(""String_Node_Str"") == true) {
      name=name.substring(7);
    }
    gestureMap.put(bundle.getString(name),action);
  }
  if (avatar.getCharacterParams().isAnimatingFace()) {
    gestureMap.put(""String_Node_Str"",""String_Node_Str"");
    gestureMap.put(""String_Node_Str"",""String_Node_Str"");
  }
  for (  String name : gestureMap.keySet()) {
    int row=0;
    int column=0;
    for (    String[] gesture : gestures) {
      if (gesture[0].equals(name)) {
        column=Integer.valueOf(gesture[1]);
        row=Integer.valueOf(gesture[2]);
        HUDButton button=mainHUD.createButton(name);
        button.setDecoratable(false);
        button.setPreferredTransparency(0.2f);
        button.setLocation(leftMargin + column * columnWidth,bottomMargin + row * rowHeight);
        mainHUD.addComponent(button);
        buttonMap.put(name,button);
        button.addActionListener(new ActionListener(){
          public void actionPerformed(          ActionEvent event){
            String action=gestureMap.get(event.getActionCommand());
            logger.info(""String_Node_Str"" + event.getActionCommand());
            if (action.equals(""String_Node_Str"") == true) {
              doSitGesture(avatar);
            }
 else             if (action.equals(""String_Node_Str"") == true) {
              CharacterEyes eyes=avatar.getEyes();
              eyes.wink(false);
            }
 else {
              avatar.playAnimation(action);
            }
          }
        }
);
        break;
      }
    }
  }
  setVisible(true);
}"
45888,"public void setAvatarCharacter(final WlAvatarCharacter avatar){
  SwingUtilities.invokeLater(new Runnable(){
    public void run(){
      if (mainHUD == null) {
        mainHUD=HUDManagerFactory.getHUDManager().getHUD(""String_Node_Str"");
      }
      for (      String name : buttonMap.keySet()) {
        HUDButton button=buttonMap.get(name);
        mainHUD.removeComponent(button);
      }
      buttonMap.clear();
      gestureMap.clear();
      if (avatar == null) {
        return;
      }
      for (      String action : avatar.getAnimationNames()) {
        String name=action;
        if (action.startsWith(""String_Node_Str"") == true) {
          name=name.substring(5);
        }
 else         if (action.startsWith(""String_Node_Str"") == true) {
          name=name.substring(7);
        }
        gestureMap.put(bundle.getString(name),action);
      }
      gestureMap.put(""String_Node_Str"",""String_Node_Str"");
      gestureMap.put(""String_Node_Str"",""String_Node_Str"");
      for (      String name : gestureMap.keySet()) {
        int row=0;
        int column=0;
        for (        String[] gesture : gestures) {
          if (gesture[0].equals(name)) {
            column=Integer.valueOf(gesture[1]);
            row=Integer.valueOf(gesture[2]);
            HUDButton button=mainHUD.createButton(name);
            button.setDecoratable(false);
            button.setPreferredTransparency(0.2f);
            button.setLocation(leftMargin + column * columnWidth,bottomMargin + row * rowHeight);
            mainHUD.addComponent(button);
            buttonMap.put(name,button);
            button.addActionListener(new ActionListener(){
              public void actionPerformed(              ActionEvent event){
                String action=gestureMap.get(event.getActionCommand());
                logger.info(""String_Node_Str"" + event.getActionCommand());
                if (action.equals(""String_Node_Str"") == true) {
                  doSitGesture(avatar);
                }
 else                 if (action.equals(""String_Node_Str"") == true) {
                  CharacterEyes eyes=avatar.getEyes();
                  eyes.wink(false);
                }
 else {
                  avatar.playAnimation(action);
                }
              }
            }
);
            break;
          }
        }
      }
      setVisible(true);
    }
  }
);
}","public void setAvatarCharacter(final WlAvatarCharacter avatar){
  SwingUtilities.invokeLater(new Runnable(){
    public void run(){
      if (mainHUD == null) {
        mainHUD=HUDManagerFactory.getHUDManager().getHUD(""String_Node_Str"");
      }
      for (      String name : buttonMap.keySet()) {
        HUDButton button=buttonMap.get(name);
        mainHUD.removeComponent(button);
      }
      buttonMap.clear();
      gestureMap.clear();
      if (avatar == null) {
        return;
      }
      for (      String action : avatar.getAnimationNames()) {
        String name=action;
        if (action.startsWith(""String_Node_Str"") == true) {
          name=name.substring(5);
        }
 else         if (action.startsWith(""String_Node_Str"") == true) {
          name=name.substring(7);
        }
        gestureMap.put(bundle.getString(name),action);
      }
      if (avatar.getCharacterParams().isAnimatingFace()) {
        gestureMap.put(""String_Node_Str"",""String_Node_Str"");
        gestureMap.put(""String_Node_Str"",""String_Node_Str"");
      }
      for (      String name : gestureMap.keySet()) {
        int row=0;
        int column=0;
        for (        String[] gesture : gestures) {
          if (gesture[0].equals(name)) {
            column=Integer.valueOf(gesture[1]);
            row=Integer.valueOf(gesture[2]);
            HUDButton button=mainHUD.createButton(name);
            button.setDecoratable(false);
            button.setPreferredTransparency(0.2f);
            button.setLocation(leftMargin + column * columnWidth,bottomMargin + row * rowHeight);
            mainHUD.addComponent(button);
            buttonMap.put(name,button);
            button.addActionListener(new ActionListener(){
              public void actionPerformed(              ActionEvent event){
                String action=gestureMap.get(event.getActionCommand());
                logger.info(""String_Node_Str"" + event.getActionCommand());
                if (action.equals(""String_Node_Str"") == true) {
                  doSitGesture(avatar);
                }
 else                 if (action.equals(""String_Node_Str"") == true) {
                  CharacterEyes eyes=avatar.getEyes();
                  eyes.wink(false);
                }
 else {
                  avatar.playAnimation(action);
                }
              }
            }
);
            break;
          }
        }
      }
      setVisible(true);
    }
  }
);
}"
45889,"public WlAvatarContext(Avatar avatar){
  super(avatar);
  for (  ActionInfo actionInfo : getGenericAnimations()) {
    actionMap.put(actionInfo.getAnimationName(),actionInfo);
  }
}","public WlAvatarContext(Avatar avatar){
  super(avatar);
  if (avatar.getCharacterParams().isAnimateBody())   for (  ActionInfo actionInfo : getGenericAnimations()) {
    actionMap.put(actionInfo.getAnimationName(),actionInfo);
  }
}"
45890,"void playMiscAnimation(String name){
  setMiscAnimation(name);
  triggerReleased(TriggerNames.MiscAction.ordinal());
  triggerPressed(TriggerNames.MiscAction.ordinal());
  triggerReleased(TriggerNames.MiscAction.ordinal());
}","void playMiscAnimation(String name){
  if (getavatar().getCharacterParams().isAnimateBody()) {
    setMiscAnimation(name);
    triggerReleased(TriggerNames.MiscAction.ordinal());
    triggerPressed(TriggerNames.MiscAction.ordinal());
    triggerReleased(TriggerNames.MiscAction.ordinal());
  }
}"
45891,"/** 
 * Clean up resources.
 */
public void cleanup(){
  Iterator<CellID> it=getProviderCellsLaunched().getIterator();
  while (it.hasNext()) {
    CellID cellID=it.next();
    CellMO cell=CellManagerMO.getCell(cellID);
    if (cell != null) {
      if (!(cell instanceof AppConventionalCellMO)) {
        logger.warning(""String_Node_Str"");
      }
      ((AppConventionalCellMO)cell).appExitted(-1);
    }
  }
  getProviderCellsLaunched().clear();
}","/** 
 * Clean up resources.
 */
public void cleanup(){
  getProviderCellsLaunched().clear();
}"
45892,"/** 
 * Called by the provider proxy to report the result of a launch
 */
public void appLaunchResult(AppServerLauncher.LaunchStatus status,CellID cellID,String connInfo){
  logger.info(""String_Node_Str"");
  logger.info(""String_Node_Str"" + status);
  logger.info(""String_Node_Str"" + cellID);
  logger.info(""String_Node_Str"" + connInfo);
  LaunchRequest launchReq=launchesInFlight.get(cellID);
  if (launchReq == null) {
    logger.warning(""String_Node_Str"" + cellID);
    return;
  }
  launchesInFlight.remove(cellID);
  AppContext.getDataManager().markForUpdate(this);
  CellMO cell=CellManagerMO.getCell(cellID);
  if (cell == null) {
    logger.warning(""String_Node_Str"" + launchReq);
    return;
  }
  if (!(cell instanceof AppConventionalCellMO)) {
    logger.warning(""String_Node_Str"" + launchReq);
    return;
  }
  if (status != AppServerLauncher.LaunchStatus.SUCCESS || connInfo == null) {
    logger.warning(""String_Node_Str"" + status + ""String_Node_Str""+ connInfo+ ""String_Node_Str""+ launchReq);
    logger.warning(""String_Node_Str"");
    pendingLaunches.add(launchReq);
    return;
  }
  ((AppConventionalCellMO)cell).appLaunchResult(status,connInfo);
}","/** 
 * Called by the provider proxy to report the result of a launch
 */
public void appLaunchResult(AppServerLauncher.LaunchStatus status,CellID cellID,String connInfo){
  logger.info(""String_Node_Str"");
  logger.info(""String_Node_Str"" + status);
  logger.info(""String_Node_Str"" + cellID);
  logger.info(""String_Node_Str"" + connInfo);
  LaunchRequest launchReq=launchesInFlight.get(cellID);
  if (launchReq == null) {
    logger.warning(""String_Node_Str"" + cellID);
    return;
  }
  launchesInFlight.remove(cellID);
  AppContext.getDataManager().markForUpdate(this);
  CellMO cell=CellManagerMO.getCell(cellID);
  if (cell == null) {
    logger.warning(""String_Node_Str"" + launchReq);
    return;
  }
  if (!(cell instanceof AppConventionalCellMO)) {
    logger.warning(""String_Node_Str"" + launchReq);
    return;
  }
  if (status != AppServerLauncher.LaunchStatus.SUCCESS || connInfo == null) {
    logger.warning(""String_Node_Str"" + status + ""String_Node_Str""+ connInfo+ ""String_Node_Str""+ launchReq);
    logger.warning(""String_Node_Str"");
    pendingLaunches.add(launchReq);
    return;
  }
  runningLaunches.add(launchReq);
  ((AppConventionalCellMO)cell).appLaunchResult(status,connInfo);
}"
45893,"/** 
 * {@inheritDoc}
 */
public Object appLaunch(AppConventionalCellMO cell,String executionCapability,String appName,String command) throws InstantiationException {
  logger.info(""String_Node_Str"" + command);
  CellID cellID=cell.getCellID();
  LaunchRequest launchReq=new LaunchRequest(cellID,executionCapability,appName,command);
  LinkedList<ProviderProxy> providers=execCapToProviderList.get(executionCapability);
  if (providers == null || providers.size() <= 0) {
    logger.warning(""String_Node_Str"" + executionCapability + ""String_Node_Str"");
    logger.warning(""String_Node_Str"");
    pendingLaunches.add(launchReq);
    AppContext.getDataManager().markForUpdate(this);
    return new SasLaunchInfo(cell,executionCapability,null);
  }
  ProviderProxy provider=providers.getFirst();
  if (provider == null) {
    throw new InstantiationException(""String_Node_Str"" + executionCapability);
  }
  launchesInFlight.put(cellID,launchReq);
  provider.tryLaunch(cellID,executionCapability,appName,command);
  return new SasLaunchInfo(cell,executionCapability,provider);
}","/** 
 * {@inheritDoc}
 */
public Object appLaunch(AppConventionalCellMO cell,String executionCapability,String appName,String command) throws InstantiationException {
  logger.info(""String_Node_Str"" + command);
  CellID cellID=cell.getCellID();
  LaunchRequest launchReq=new LaunchRequest(cellID,executionCapability,appName,command);
  LinkedList<ProviderProxy> providers=execCapToProviderList.get(executionCapability);
  if (providers == null || providers.size() <= 0) {
    logger.warning(""String_Node_Str"" + executionCapability + ""String_Node_Str"");
    logger.warning(""String_Node_Str"");
    pendingLaunches.add(launchReq);
    AppContext.getDataManager().markForUpdate(this);
    return new SasLaunchInfo(cell,executionCapability,null);
  }
  ProviderProxy provider=providers.getFirst();
  if (provider == null) {
    throw new InstantiationException(""String_Node_Str"" + executionCapability);
  }
  launchReq.setProvider(provider);
  launchesInFlight.put(cellID,launchReq);
  provider.tryLaunch(cellID,executionCapability,appName,command);
  return new SasLaunchInfo(cell,executionCapability,provider);
}"
45894,"/** 
 * Called when provider client disconnects from the SAS server.
 */
ProviderProxy providerDisconnected(WonderlandClientSender sender,WonderlandClientID clientID){
  logger.info(""String_Node_Str"" + clientID);
  ProviderProxy providerToRemove=null;
  String execCap=""String_Node_Str"";
  LinkedList<ProviderProxy> providers=execCapToProviderList.get(execCap);
  if (providers != null) {
    for (    ProviderProxy provider : providers) {
      if (provider.getClientID().equals(clientID)) {
        providerToRemove=provider;
        provider.cleanup();
        break;
      }
    }
    if (providerToRemove != null) {
      providers.remove(providerToRemove);
    }
    if (providers.size() <= 0) {
      execCapToProviderList.remove(execCap);
    }
  }
  AppContext.getDataManager().markForUpdate(this);
  return providerToRemove;
}","/** 
 * Called when provider client disconnects from the SAS server.
 */
ProviderProxy providerDisconnected(WonderlandClientSender sender,WonderlandClientID clientID){
  logger.info(""String_Node_Str"" + clientID);
  ProviderProxy providerToRemove=null;
  String execCap=""String_Node_Str"";
  LinkedList<ProviderProxy> providers=execCapToProviderList.get(execCap);
  if (providers != null) {
    for (    ProviderProxy provider : providers) {
      if (provider.getClientID().equals(clientID)) {
        providerToRemove=provider;
        provider.cleanup();
        persistProviderApps(provider,execCap);
        break;
      }
    }
    if (providerToRemove != null) {
      providers.remove(providerToRemove);
    }
    if (providers.size() <= 0) {
      execCapToProviderList.remove(execCap);
    }
  }
  AppContext.getDataManager().markForUpdate(this);
  return providerToRemove;
}"
45895,"/** 
 * {@inheritDoc}
 */
public void appStop(Object launchInfo){
  SasLaunchInfo sasLaunchInfo=(SasLaunchInfo)launchInfo;
  CellID cellID=sasLaunchInfo.cell.getCellID();
  launchesInFlight.remove(cellID);
  AppContext.getDataManager().markForUpdate(this);
  pendingLaunches.remove(cellID,sasLaunchInfo.executionCapability);
  AppContext.getDataManager().markForUpdate(this);
  if (sasLaunchInfo.provider != null) {
    sasLaunchInfo.provider.appStop(sasLaunchInfo.cell);
  }
 else {
    LinkedList<ProviderProxy> providers=execCapToProviderList.get(sasLaunchInfo.executionCapability);
    if (providers != null) {
      for (      ProviderProxy provider : providers) {
        provider.appStop(sasLaunchInfo.cell);
      }
    }
  }
}","/** 
 * {@inheritDoc}
 */
public void appStop(Object launchInfo){
  SasLaunchInfo sasLaunchInfo=(SasLaunchInfo)launchInfo;
  CellID cellID=sasLaunchInfo.cell.getCellID();
  launchesInFlight.remove(cellID);
  runningLaunches.remove(cellID,sasLaunchInfo.executionCapability);
  pendingLaunches.remove(cellID,sasLaunchInfo.executionCapability);
  AppContext.getDataManager().markForUpdate(this);
  if (sasLaunchInfo.provider != null) {
    sasLaunchInfo.provider.appStop(sasLaunchInfo.cell);
  }
 else {
    LinkedList<ProviderProxy> providers=execCapToProviderList.get(sasLaunchInfo.executionCapability);
    if (providers != null) {
      for (      ProviderProxy provider : providers) {
        provider.appStop(sasLaunchInfo.cell);
      }
    }
  }
}"
45896,"private void tryPendingLaunches(String executionCapability) throws InstantiationException {
  LinkedList<LaunchRequest> reqs=pendingLaunches.getPendingLaunches(executionCapability);
  if (reqs == null) {
    return;
  }
  LinkedList<LaunchRequest> reqsForTraversal=(LinkedList<LaunchRequest>)reqs.clone();
  for (  LaunchRequest req : reqsForTraversal) {
    LinkedList<ProviderProxy> providers=execCapToProviderList.get(executionCapability);
    if (providers == null || providers.size() <= 0) {
      continue;
    }
    ProviderProxy provider=providers.getFirst();
    reqs.remove(req);
    launchesInFlight.put(req.cellID,req);
    provider.tryLaunch(req.cellID,req.executionCapability,req.appName,req.command);
  }
}","private void tryPendingLaunches(String executionCapability) throws InstantiationException {
  LinkedList<LaunchRequest> reqs=pendingLaunches.getLaunches(executionCapability);
  if (reqs == null) {
    return;
  }
  LinkedList<LaunchRequest> reqsForTraversal=(LinkedList<LaunchRequest>)reqs.clone();
  for (  LaunchRequest req : reqsForTraversal) {
    LinkedList<ProviderProxy> providers=execCapToProviderList.get(executionCapability);
    if (providers == null || providers.size() <= 0) {
      continue;
    }
    ProviderProxy provider=providers.getFirst();
    reqs.remove(req);
    launchesInFlight.put(req.cellID,req);
    provider.tryLaunch(req.cellID,req.executionCapability,req.appName,req.command);
  }
}"
45897,"private void downloadButtonActionPerformed(java.awt.event.ActionEvent evt){
  JFileChooser chooser=new JFileChooser(""String_Node_Str"");
  chooser.setFileFilter(new FileFilter(){
    @Override public boolean accept(    File f){
      return f.isDirectory();
    }
    @Override public String getDescription(){
      return BUNDLE.getString(""String_Node_Str"");
    }
  }
);
  chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
  chooser.setDialogType(JFileChooser.SAVE_DIALOG);
  int returnVal=chooser.showOpenDialog(this);
  if (returnVal == JFileChooser.APPROVE_OPTION) {
    String fileName=tableSelectedNode.getName();
    File out=new File(chooser.getSelectedFile(),fileName);
    try {
      ContentResource r=(ContentResource)tableSelectedNode;
      r.get(out);
    }
 catch (    java.lang.Exception cre) {
      logger.log(Level.WARNING,""String_Node_Str"" + fileName,cre);
      String msg=""String_Node_Str"" + fileName + ""String_Node_Str""+ ""String_Node_Str"";
      String title=""String_Node_Str"";
      JOptionPane.showMessageDialog(this,msg,title,JOptionPane.ERROR_MESSAGE);
    }
  }
}","private void downloadButtonActionPerformed(java.awt.event.ActionEvent evt){
  JFileChooser chooser=new JFileChooser();
  chooser.setFileFilter(new FileFilter(){
    @Override public boolean accept(    File f){
      return f.isDirectory();
    }
    @Override public String getDescription(){
      return BUNDLE.getString(""String_Node_Str"");
    }
  }
);
  chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
  chooser.setDialogType(JFileChooser.SAVE_DIALOG);
  int returnVal=chooser.showOpenDialog(this);
  if (returnVal == JFileChooser.APPROVE_OPTION) {
    String fileName=tableSelectedNode.getName();
    File out=new File(chooser.getSelectedFile(),fileName);
    try {
      ContentResource r=(ContentResource)tableSelectedNode;
      r.get(out);
    }
 catch (    java.lang.Exception cre) {
      logger.log(Level.WARNING,""String_Node_Str"" + fileName,cre);
      String msg=""String_Node_Str"" + fileName + ""String_Node_Str""+ ""String_Node_Str"";
      String title=""String_Node_Str"";
      JOptionPane.showMessageDialog(this,msg,title,JOptionPane.ERROR_MESSAGE);
    }
  }
}"
45898,"private void showAddUserPanel(boolean showPanel,boolean showPrivacy){
  if (addPhoneUserPanel != null) {
    addPhoneUserPanel.setVisible(false);
  }
  if (addUserPanel == null) {
    addUserPanel=new AddUserPanel(client,session,myPresenceInfo,caller,group);
    addUserPanel.addUserListSelectionListener(new javax.swing.event.ListSelectionListener(){
      public void valueChanged(      javax.swing.event.ListSelectionEvent e){
        addUserListValueChanged(e);
      }
    }
);
  }
  addUserPanel.setVisible(showPanel,mode);
  if (showPanel) {
    add(addUserPanel,BorderLayout.CENTER);
  }
  addUserPanel.showPrivacyPanel(showPrivacy);
}","private void showAddUserPanel(boolean showPanel,boolean showPrivacy){
  if (addPhoneUserPanel != null) {
    addPhoneUserPanel.setVisible(false);
  }
  if (addUserPanel == null) {
    addUserPanel=new AddUserPanel(client,session,myPresenceInfo,caller,group,Mode.ADD);
    addUserPanel.addUserListSelectionListener(new javax.swing.event.ListSelectionListener(){
      public void valueChanged(      javax.swing.event.ListSelectionEvent e){
        addUserListValueChanged(e);
      }
    }
);
  }
  addUserPanel.setVisible(showPanel,mode);
  if (showPanel) {
    add(addUserPanel,BorderLayout.CENTER);
  }
  addUserPanel.showPrivacyPanel(showPrivacy);
}"
45899,"/** 
 * Create a cell based upon the uri of the content and the file extension of the uploaded file.
 * @param uri The URI of the uploaded content
 * @param extension The file extension of the content
 */
public void createCell(String uri){
  String extension=getFileExtension(uri);
  if (extension == null) {
    logger.warning(""String_Node_Str"" + uri);
    return;
  }
  CellRegistry registry=CellRegistry.getCellRegistry();
  Set<CellFactorySPI> factories=registry.getCellFactoriesByExtension(extension);
  if (factories == null) {
    final JFrame frame=JmeClientMain.getFrame().getFrame();
    logger.warning(""String_Node_Str"" + extension);
    JOptionPane.showMessageDialog(frame,""String_Node_Str"" + uri,""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
    return;
  }
  CellFactorySPI factory=factories.iterator().next();
  Properties props=new Properties();
  props.put(""String_Node_Str"",uri);
  CellServerState state=factory.getDefaultCellServerState(props);
  try {
    CellUtils.createCell(state);
  }
 catch (  CellCreationException excp) {
    logger.log(Level.WARNING,""String_Node_Str"" + uri,excp);
  }
}","/** 
 * Create a cell based upon the uri of the content and the file extension of the uploaded file.
 * @param uri The URI of the uploaded content
 * @param extension The file extension of the content
 */
public void createCell(String uri){
  String extension=getFileExtension(uri);
  if (extension == null) {
    logger.warning(""String_Node_Str"" + uri);
    return;
  }
  CellSelectionSPI spi=CellSelectionRegistry.getCellSelectionSPI();
  if (spi == null) {
    final JFrame frame=JmeClientMain.getFrame().getFrame();
    logger.warning(""String_Node_Str"");
    JOptionPane.showMessageDialog(frame,""String_Node_Str"" + uri,""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
    return;
  }
  CellFactorySPI factory=null;
  try {
    factory=spi.getCellSelection(extension);
  }
 catch (  CellCreationException excp) {
    final JFrame frame=JmeClientMain.getFrame().getFrame();
    logger.log(Level.WARNING,""String_Node_Str"" + extension,excp);
    JOptionPane.showMessageDialog(frame,""String_Node_Str"" + uri,""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
    return;
  }
  if (factory == null) {
    return;
  }
  Properties props=new Properties();
  props.put(""String_Node_Str"",uri);
  CellServerState state=factory.getDefaultCellServerState(props);
  try {
    CellUtils.createCell(state);
  }
 catch (  CellCreationException excp) {
    logger.log(Level.WARNING,""String_Node_Str"" + uri,excp);
  }
}"
45900,"public void drop(DropTargetDropEvent dtde){
  List<DataFlavor> flavorList=dtde.getCurrentDataFlavorsAsList();
  List<DataFlavor> supportedFlavors=new LinkedList();
  for (  DataFlavor dataFlavor : flavorList) {
    DataFlavorHandlerSPI handler=getDataFlavorHandler(dataFlavor);
    if (handler != null) {
      supportedFlavors.add(dataFlavor);
    }
  }
  if (supportedFlavors.isEmpty() == true) {
    dtde.rejectDrop();
    return;
  }
  dtde.acceptDrop(DnDConstants.ACTION_MOVE);
  Transferable transferable=dtde.getTransferable();
  Point location=dtde.getLocation();
  for (  DataFlavor dataFlavor : supportedFlavors) {
    DataFlavorHandlerSPI handler=getDataFlavorHandler(dataFlavor);
    if (handler.accept(transferable,dataFlavor) == true) {
      handler.handleDrop(transferable,dataFlavor,location);
      dtde.dropComplete(true);
      return;
    }
  }
  dtde.dropComplete(false);
}","public void drop(DropTargetDropEvent dtde){
  logger.warning(""String_Node_Str"");
  logger.warning(""String_Node_Str"" + dtde.getCurrentDataFlavors().length);
  for (  DataFlavor flavor : dtde.getCurrentDataFlavors()) {
    logger.warning(""String_Node_Str"" + flavor.toString());
  }
  List<DataFlavor> flavorList=dtde.getCurrentDataFlavorsAsList();
  for (  DataFlavor flavor : flavorList) {
    logger.warning(""String_Node_Str"" + flavor.toString());
  }
  List<DataFlavor> supportedFlavors=new LinkedList();
  for (  DataFlavor dataFlavor : flavorList) {
    DataFlavorHandlerSPI handler=getDataFlavorHandler(dataFlavor);
    if (handler != null) {
      logger.warning(""String_Node_Str"" + dataFlavor.toString());
      supportedFlavors.add(dataFlavor);
    }
  }
  if (supportedFlavors.isEmpty() == true) {
    dtde.rejectDrop();
    return;
  }
  dtde.acceptDrop(DnDConstants.ACTION_MOVE);
  Transferable transferable=dtde.getTransferable();
  Point location=dtde.getLocation();
  for (  DataFlavor dataFlavor : supportedFlavors) {
    DataFlavorHandlerSPI handler=getDataFlavorHandler(dataFlavor);
    if (handler.accept(transferable,dataFlavor) == true) {
      handler.handleDrop(transferable,dataFlavor,location);
      dtde.dropComplete(true);
      return;
    }
  }
  dtde.dropComplete(false);
}"
45901,"/** 
 * Launches a cell based upon a given URL. This method assumes the URL refers to some generally-available web content that all clients can fetch
 * @param url The URL to launch a Cell with
 */
public static void launchCellFromURL(URL url){
  String extension=DragAndDropManager.getFileExtension(url.getFile());
  CellRegistry registry=CellRegistry.getCellRegistry();
  Set<CellFactorySPI> factories=registry.getCellFactoriesByExtension(extension);
  if (factories == null) {
    logger.warning(""String_Node_Str"" + extension);
    JFrame frame=JmeClientMain.getFrame().getFrame();
    JOptionPane.showMessageDialog(frame,""String_Node_Str"" + url.toExternalForm());
    return;
  }
  CellFactorySPI factory=factories.iterator().next();
  Properties props=new Properties();
  props.put(""String_Node_Str"",url.toExternalForm());
  CellServerState state=factory.getDefaultCellServerState(props);
  try {
    CellUtils.createCell(state);
  }
 catch (  CellCreationException excp) {
    logger.log(Level.WARNING,""String_Node_Str"" + url,excp);
  }
}","/** 
 * Launches a cell based upon a given URL. This method assumes the URL refers to some generally-available web content that all clients can fetch
 * @param url The URL to launch a Cell with
 */
public static void launchCellFromURL(URL url){
  String extension=DragAndDropManager.getFileExtension(url.getFile());
  CellSelectionSPI spi=CellSelectionRegistry.getCellSelectionSPI();
  if (spi == null) {
    final JFrame frame=JmeClientMain.getFrame().getFrame();
    logger.warning(""String_Node_Str"");
    JOptionPane.showMessageDialog(frame,""String_Node_Str"" + url.toExternalForm(),""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
    return;
  }
  CellFactorySPI factory=null;
  try {
    factory=spi.getCellSelection(extension);
  }
 catch (  CellCreationException excp) {
    logger.log(Level.WARNING,""String_Node_Str"" + extension,excp);
    JFrame frame=JmeClientMain.getFrame().getFrame();
    JOptionPane.showMessageDialog(frame,""String_Node_Str"" + url.toExternalForm());
    return;
  }
  if (factory == null) {
    return;
  }
  Properties props=new Properties();
  props.put(""String_Node_Str"",url.toExternalForm());
  CellServerState state=factory.getDefaultCellServerState(props);
  try {
    CellUtils.createCell(state);
  }
 catch (  CellCreationException excp) {
    logger.log(Level.WARNING,""String_Node_Str"" + url,excp);
  }
}"
45902,"/** 
 * Called when the user cancels the load
 */
void loadCancelled(ImportedModel model){
  if (editingRow >= 0) {
    ImportedModel imp=imports.get(editingRow);
    Node tg=imp.getRootBG();
    Vector3f rot=imp.getOrientation();
    tg.setLocalRotation(calcRotationMatrix(rot.x,rot.y,rot.z));
    tg.setLocalTranslation(imp.getTranslation());
  }
  if (model != null)   ClientContextJME.getWorldManager().removeEntity(model.getEntity());
}","/** 
 * Called when the user cancels the load
 */
void loadCancelled(ImportedModel model){
  if (editingRow >= 0 && imports.contains(model)) {
    final ImportedModel imp=model;
    final Node tg=imp.getRootBG();
    final Vector3f rot=imp.getOrientation();
    ClientContextJME.getWorldManager().addRenderUpdater(new RenderUpdater(){
      public void update(      Object arg0){
        tg.setLocalRotation(calcRotationMatrix(rot.x,rot.y,rot.z));
        tg.setLocalTranslation(imp.getTranslation());
        ClientContextJME.getWorldManager().addToUpdateList(tg);
      }
    }
,null);
  }
  if (model != null)   ClientContextJME.getWorldManager().removeEntity(model.getEntity());
}"
45903,"/** 
 * Creates new form ModelImporterFrame 
 */
public ModelImporterFrame(ImportSessionFrame session,File lastModelDir){
  this.lastModelDir=lastModelDir;
  sessionFrame=session;
  initComponents();
  Float value=new Float(0);
  Float min=new Float(Float.NEGATIVE_INFINITY);
  Float max=new Float(Float.POSITIVE_INFINITY);
  Float step=new Float(0.1);
  SpinnerNumberModel translationX=new SpinnerNumberModel(value,min,max,step);
  SpinnerNumberModel translationY=new SpinnerNumberModel(value,min,max,step);
  SpinnerNumberModel translationZ=new SpinnerNumberModel(value,min,max,step);
  translationXTF.setModel(translationX);
  translationYTF.setModel(translationY);
  translationZTF.setModel(translationZ);
  value=new Float(1);
  SpinnerNumberModel scaleX=new SpinnerNumberModel(value,min,max,step);
  scaleTF.setModel(scaleX);
  value=new Float(0);
  min=new Float(-360);
  max=new Float(360);
  step=new Float(1);
  SpinnerNumberModel rotationX=new SpinnerNumberModel(value,min,max,step);
  SpinnerNumberModel rotationY=new SpinnerNumberModel(value,min,max,step);
  SpinnerNumberModel rotationZ=new SpinnerNumberModel(value,min,max,step);
  rotationXTF.setModel(rotationX);
  rotationYTF.setModel(rotationY);
  rotationZTF.setModel(rotationZ);
  currentRotation.loadIdentity();
  userMotionListener=new TransformChangeListener(){
    private Vector3f look=new Vector3f();
    private Vector3f pos=new Vector3f();
    public void transformChanged(    Cell cell,    ChangeSource source){
      CellTransform t=cell.getWorldTransform();
      t.getLookAt(pos,look);
      System.err.println(pos + ""String_Node_Str"" + look);
      look.mult(3);
      pos.addLocal(look);
      currentTranslation.set(pos);
      ((SpinnerNumberModel)translationXTF.getModel()).setValue(new Float(pos.x));
      ((SpinnerNumberModel)translationYTF.getModel()).setValue(new Float(pos.y));
      ((SpinnerNumberModel)translationZTF.getModel()).setValue(new Float(pos.z));
      if (transformProcessor != null)       transformProcessor.setTransform(currentRotation,currentTranslation);
    }
  }
;
  translationChangeListener=new ChangeListener(){
    public void stateChanged(    ChangeEvent e){
      float x=(Float)((SpinnerNumberModel)translationXTF.getModel()).getValue();
      float y=(Float)((SpinnerNumberModel)translationYTF.getModel()).getValue();
      float z=(Float)((SpinnerNumberModel)translationZTF.getModel()).getValue();
      if (x != currentTranslation.x || y != currentTranslation.y || z != currentTranslation.z) {
        currentTranslation.set(x,y,z);
        if (transformProcessor != null)         transformProcessor.setTransform(currentRotation,currentTranslation);
      }
    }
  }
;
  rotationChangeListener=new ChangeListener(){
    public void stateChanged(    ChangeEvent e){
      float x=(Float)((SpinnerNumberModel)rotationXTF.getModel()).getValue();
      float y=(Float)((SpinnerNumberModel)rotationYTF.getModel()).getValue();
      float z=(Float)((SpinnerNumberModel)rotationZTF.getModel()).getValue();
      if (x != currentRotationValues.x || y != currentRotationValues.y || z != currentRotationValues.z) {
        currentRotationValues.set(x,y,z);
        calcCurrentRotationMatrix();
        if (transformProcessor != null)         transformProcessor.setTransform(currentRotation,currentTranslation);
      }
    }
  }
;
  ((SpinnerNumberModel)rotationXTF.getModel()).addChangeListener(rotationChangeListener);
  ((SpinnerNumberModel)rotationYTF.getModel()).addChangeListener(rotationChangeListener);
  ((SpinnerNumberModel)rotationZTF.getModel()).addChangeListener(rotationChangeListener);
  scaleChangeListener=new ChangeListener(){
    public void stateChanged(    ChangeEvent e){
      float x=(Float)((SpinnerNumberModel)scaleTF.getModel()).getValue();
      if (x != currentScale.x) {
        currentScale.set(x,x,x);
        if (transformProcessor != null)         transformProcessor.setTransform(currentRotation,currentTranslation,currentScale);
      }
    }
  }
;
  ((SpinnerNumberModel)scaleTF.getModel()).addChangeListener(scaleChangeListener);
  avatarMoveCB.setSelected(false);
  enableSpinners(true);
}","/** 
 * Creates new form ModelImporterFrame 
 */
public ModelImporterFrame(ImportSessionFrame session,File lastModelDir){
  this.lastModelDir=lastModelDir;
  sessionFrame=session;
  initComponents();
  Float value=new Float(0);
  Float min=new Float(Float.NEGATIVE_INFINITY);
  Float max=new Float(Float.POSITIVE_INFINITY);
  Float step=new Float(0.1);
  SpinnerNumberModel translationX=new SpinnerNumberModel(value,min,max,step);
  SpinnerNumberModel translationY=new SpinnerNumberModel(value,min,max,step);
  SpinnerNumberModel translationZ=new SpinnerNumberModel(value,min,max,step);
  translationXTF.setModel(translationX);
  translationYTF.setModel(translationY);
  translationZTF.setModel(translationZ);
  value=new Float(1);
  SpinnerNumberModel scaleX=new SpinnerNumberModel(value,min,max,step);
  scaleTF.setModel(scaleX);
  value=new Float(0);
  min=new Float(-360);
  max=new Float(360);
  step=new Float(1);
  SpinnerNumberModel rotationX=new SpinnerNumberModel(value,min,max,step);
  SpinnerNumberModel rotationY=new SpinnerNumberModel(value,min,max,step);
  SpinnerNumberModel rotationZ=new SpinnerNumberModel(value,min,max,step);
  rotationXTF.setModel(rotationX);
  rotationYTF.setModel(rotationY);
  rotationZTF.setModel(rotationZ);
  currentRotation.loadIdentity();
  userMotionListener=new TransformChangeListener(){
    private Vector3f look=new Vector3f();
    private Vector3f pos=new Vector3f();
    public void transformChanged(    Cell cell,    ChangeSource source){
      CellTransform t=cell.getWorldTransform();
      t.getLookAt(pos,look);
      look.mult(3);
      pos.addLocal(look);
      currentTranslation.set(pos);
      ((SpinnerNumberModel)translationXTF.getModel()).setValue(new Float(pos.x));
      ((SpinnerNumberModel)translationYTF.getModel()).setValue(new Float(pos.y));
      ((SpinnerNumberModel)translationZTF.getModel()).setValue(new Float(pos.z));
      if (transformProcessor != null)       transformProcessor.setTransform(currentRotation,currentTranslation);
    }
  }
;
  translationChangeListener=new ChangeListener(){
    public void stateChanged(    ChangeEvent e){
      float x=(Float)((SpinnerNumberModel)translationXTF.getModel()).getValue();
      float y=(Float)((SpinnerNumberModel)translationYTF.getModel()).getValue();
      float z=(Float)((SpinnerNumberModel)translationZTF.getModel()).getValue();
      if (x != currentTranslation.x || y != currentTranslation.y || z != currentTranslation.z) {
        currentTranslation.set(x,y,z);
        importedModel.setTranslation(currentTranslation);
        if (transformProcessor != null)         transformProcessor.setTransform(currentRotation,currentTranslation);
      }
    }
  }
;
  rotationChangeListener=new ChangeListener(){
    public void stateChanged(    ChangeEvent e){
      float x=(Float)((SpinnerNumberModel)rotationXTF.getModel()).getValue();
      float y=(Float)((SpinnerNumberModel)rotationYTF.getModel()).getValue();
      float z=(Float)((SpinnerNumberModel)rotationZTF.getModel()).getValue();
      if (x != currentRotationValues.x || y != currentRotationValues.y || z != currentRotationValues.z) {
        currentRotationValues.set(x,y,z);
        importedModel.setOrientation(currentRotationValues);
        calcCurrentRotationMatrix();
        if (transformProcessor != null)         transformProcessor.setTransform(currentRotation,currentTranslation);
      }
    }
  }
;
  ((SpinnerNumberModel)rotationXTF.getModel()).addChangeListener(rotationChangeListener);
  ((SpinnerNumberModel)rotationYTF.getModel()).addChangeListener(rotationChangeListener);
  ((SpinnerNumberModel)rotationZTF.getModel()).addChangeListener(rotationChangeListener);
  scaleChangeListener=new ChangeListener(){
    public void stateChanged(    ChangeEvent e){
      float x=(Float)((SpinnerNumberModel)scaleTF.getModel()).getValue();
      if (x != currentScale.x) {
        currentScale.set(x,x,x);
        importedModel.setScale(currentScale);
        if (transformProcessor != null)         transformProcessor.setTransform(currentRotation,currentTranslation,currentScale);
      }
    }
  }
;
  ((SpinnerNumberModel)scaleTF.getModel()).addChangeListener(scaleChangeListener);
  avatarMoveCB.setSelected(false);
  enableSpinners(true);
}"
45904,"public void run(){
  JFileChooser chooser=new JFileChooser();
  FileNameExtensionFilter filter=new FileNameExtensionFilter(LoaderManager.getLoaderManager().getLoaderExtensions());
  chooser.setFileFilter(filter);
  int returnVal=chooser.showOpenDialog(ModelImporterFrame.this);
  if (returnVal == JFileChooser.APPROVE_OPTION) {
    try {
      importModel(chooser.getSelectedFile(),false);
    }
 catch (    FileNotFoundException ex) {
      Logger.getLogger(ModelImporterFrame.class.getName()).log(Level.SEVERE,null,ex);
    }
catch (    IOException ioe) {
      Logger.getLogger(ModelImporterFrame.class.getName()).log(Level.SEVERE,null,ioe);
    }
    setVisible(true);
    lastModelDir=chooser.getSelectedFile().getParentFile();
  }
}","public void run(){
  JFileChooser chooser=new JFileChooser();
  FileNameExtensionFilter filter=new FileNameExtensionFilter(LoaderManager.getLoaderManager().getLoaderExtensions());
  chooser.setFileFilter(filter);
  if (lastModelDir != null)   chooser.setCurrentDirectory(lastModelDir);
  int returnVal=chooser.showOpenDialog(ModelImporterFrame.this);
  if (returnVal == JFileChooser.APPROVE_OPTION) {
    try {
      importModel(chooser.getSelectedFile(),false);
    }
 catch (    FileNotFoundException ex) {
      Logger.getLogger(ModelImporterFrame.class.getName()).log(Level.SEVERE,null,ex);
    }
catch (    IOException ioe) {
      Logger.getLogger(ModelImporterFrame.class.getName()).log(Level.SEVERE,null,ioe);
    }
    setVisible(true);
    lastModelDir=chooser.getSelectedFile().getParentFile();
  }
}"
45905,"private void okBActionPerformed(java.awt.event.ActionEvent evt){
  if (avatarMoveCB.isSelected()) {
    ViewManager.getViewManager().getPrimaryViewCell().removeTransformChangeListener(userMotionListener);
  }
  setVisible(false);
  Vector3f translation=new Vector3f((Float)translationXTF.getValue(),(Float)translationYTF.getValue(),(Float)translationZTF.getValue());
  Vector3f orientation=new Vector3f((Float)rotationXTF.getValue(),(Float)rotationYTF.getValue(),(Float)rotationZTF.getValue());
  sessionFrame.loadCompleted(importedModel);
}","private void okBActionPerformed(java.awt.event.ActionEvent evt){
  if (avatarMoveCB.isSelected()) {
    ViewManager.getViewManager().getPrimaryViewCell().removeTransformChangeListener(userMotionListener);
  }
  setVisible(false);
  Vector3f translation=new Vector3f((Float)translationXTF.getValue(),(Float)translationYTF.getValue(),(Float)translationZTF.getValue());
  Vector3f orientation=new Vector3f((Float)rotationXTF.getValue(),(Float)rotationYTF.getValue(),(Float)rotationZTF.getValue());
  importedModel.setWonderlandName(modelNameTF.getText());
  sessionFrame.loadCompleted(importedModel);
}"
45906,"/** 
 * Set the spinners to the rotation, translation and scale local coords of this node
 * @param node
 */
private void setSpinners(Node modelBG,Node rootBG){
  Vector3f translation=rootBG.getLocalTranslation();
  Quaternion quat=modelBG.getLocalRotation();
  float[] angles=quat.toAngles(new float[3]);
  Vector3f scale=modelBG.getLocalScale();
  translationXTF.setValue(translation.x);
  translationYTF.setValue(translation.y);
  translationZTF.setValue(translation.z);
  rotationXTF.setValue((float)Math.toDegrees(angles[0]));
  rotationYTF.setValue((float)Math.toDegrees(angles[1]));
  rotationZTF.setValue((float)Math.toDegrees(angles[2]));
  scaleTF.setValue(scale.x);
}","/** 
 * Set the spinners to the rotation, translation and scale local coords of this node
 * @param node
 */
private void setSpinners(Node modelBG,Node rootBG){
  Vector3f translation=rootBG.getLocalTranslation();
  Quaternion quat=modelBG.getLocalRotation();
  float[] angles=quat.toAngles(new float[3]);
  Vector3f scale=modelBG.getLocalScale();
  translationXTF.setValue(translation.x);
  translationYTF.setValue(translation.y);
  translationZTF.setValue(translation.z);
  rotationXTF.setValue((float)Math.toDegrees(angles[0]));
  rotationYTF.setValue((float)Math.toDegrees(angles[1]));
  rotationZTF.setValue((float)Math.toDegrees(angles[2]));
  scaleTF.setValue(scale.x);
  importedModel.setTranslation(translation);
  importedModel.setOrientation(new Vector3f((float)Math.toDegrees(angles[0]),(float)Math.toDegrees(angles[1]),(float)Math.toDegrees(angles[2])));
  importedModel.setScale(new Vector3f(scale.x,scale.x,scale.x));
}"
45907,"void chooseFile(){
  texturePrefixTF.setText(""String_Node_Str"");
  modelNameTF.setText(""String_Node_Str"");
  modelX3dTF.setText(""String_Node_Str"");
  SwingUtilities.invokeLater(new Runnable(){
    public void run(){
      JFileChooser chooser=new JFileChooser();
      FileNameExtensionFilter filter=new FileNameExtensionFilter(LoaderManager.getLoaderManager().getLoaderExtensions());
      chooser.setFileFilter(filter);
      int returnVal=chooser.showOpenDialog(ModelImporterFrame.this);
      if (returnVal == JFileChooser.APPROVE_OPTION) {
        try {
          importModel(chooser.getSelectedFile(),false);
        }
 catch (        FileNotFoundException ex) {
          Logger.getLogger(ModelImporterFrame.class.getName()).log(Level.SEVERE,null,ex);
        }
catch (        IOException ioe) {
          Logger.getLogger(ModelImporterFrame.class.getName()).log(Level.SEVERE,null,ioe);
        }
        setVisible(true);
        lastModelDir=chooser.getSelectedFile().getParentFile();
      }
    }
  }
);
}","void chooseFile(){
  texturePrefixTF.setText(""String_Node_Str"");
  modelNameTF.setText(""String_Node_Str"");
  modelX3dTF.setText(""String_Node_Str"");
  importedModel=null;
  SwingUtilities.invokeLater(new Runnable(){
    public void run(){
      JFileChooser chooser=new JFileChooser();
      FileNameExtensionFilter filter=new FileNameExtensionFilter(LoaderManager.getLoaderManager().getLoaderExtensions());
      chooser.setFileFilter(filter);
      if (lastModelDir != null)       chooser.setCurrentDirectory(lastModelDir);
      int returnVal=chooser.showOpenDialog(ModelImporterFrame.this);
      if (returnVal == JFileChooser.APPROVE_OPTION) {
        try {
          importModel(chooser.getSelectedFile(),false);
        }
 catch (        FileNotFoundException ex) {
          Logger.getLogger(ModelImporterFrame.class.getName()).log(Level.SEVERE,null,ex);
        }
catch (        IOException ioe) {
          Logger.getLogger(ModelImporterFrame.class.getName()).log(Level.SEVERE,null,ioe);
        }
        setVisible(true);
        lastModelDir=chooser.getSelectedFile().getParentFile();
      }
    }
  }
);
}"
45908,"public void transformChanged(Cell cell,ChangeSource source){
  CellTransform t=cell.getWorldTransform();
  t.getLookAt(pos,look);
  System.err.println(pos + ""String_Node_Str"" + look);
  look.mult(3);
  pos.addLocal(look);
  currentTranslation.set(pos);
  ((SpinnerNumberModel)translationXTF.getModel()).setValue(new Float(pos.x));
  ((SpinnerNumberModel)translationYTF.getModel()).setValue(new Float(pos.y));
  ((SpinnerNumberModel)translationZTF.getModel()).setValue(new Float(pos.z));
  if (transformProcessor != null)   transformProcessor.setTransform(currentRotation,currentTranslation);
}","public void transformChanged(Cell cell,ChangeSource source){
  CellTransform t=cell.getWorldTransform();
  t.getLookAt(pos,look);
  look.mult(3);
  pos.addLocal(look);
  currentTranslation.set(pos);
  ((SpinnerNumberModel)translationXTF.getModel()).setValue(new Float(pos.x));
  ((SpinnerNumberModel)translationYTF.getModel()).setValue(new Float(pos.y));
  ((SpinnerNumberModel)translationZTF.getModel()).setValue(new Float(pos.z));
  if (transformProcessor != null)   transformProcessor.setTransform(currentRotation,currentTranslation);
}"
45909,"/** 
 * Edit a model that has already been imported
 * @param model
 */
void editModel(ImportedModel model){
  modelX3dTF.setText(model.getOriginalURL().toExternalForm());
  currentTranslation.set(model.getTranslation());
  currentRotationValues.set(model.getOrientation());
  calcCurrentRotationMatrix();
  ((SpinnerNumberModel)rotationXTF.getModel()).setValue(model.getOrientation().x);
  ((SpinnerNumberModel)rotationYTF.getModel()).setValue(model.getOrientation().y);
  ((SpinnerNumberModel)rotationZTF.getModel()).setValue(model.getOrientation().z);
  ((SpinnerNumberModel)translationXTF.getModel()).setValue(model.getTranslation().x);
  ((SpinnerNumberModel)translationYTF.getModel()).setValue(model.getTranslation().y);
  ((SpinnerNumberModel)translationZTF.getModel()).setValue(model.getTranslation().x);
  avatarMoveCB.setSelected(false);
  populateTextureList(model.getRootBG());
  processBounds(model.getModelBG());
}","/** 
 * Edit a model that has already been imported
 * @param model
 */
void editModel(ImportedModel model){
  modelX3dTF.setText(model.getOriginalURL().toExternalForm());
  modelNameTF.setText(model.getWonderlandName());
  currentTranslation.set(model.getTranslation());
  currentRotationValues.set(model.getOrientation());
  calcCurrentRotationMatrix();
  ((SpinnerNumberModel)rotationXTF.getModel()).setValue(model.getOrientation().x);
  ((SpinnerNumberModel)rotationYTF.getModel()).setValue(model.getOrientation().y);
  ((SpinnerNumberModel)rotationZTF.getModel()).setValue(model.getOrientation().z);
  ((SpinnerNumberModel)translationXTF.getModel()).setValue(model.getTranslation().x);
  ((SpinnerNumberModel)translationYTF.getModel()).setValue(model.getTranslation().y);
  ((SpinnerNumberModel)translationZTF.getModel()).setValue(model.getTranslation().x);
  ((SpinnerNumberModel)scaleTF.getModel()).setValue(model.getScale().x);
  avatarMoveCB.setSelected(false);
  populateTextureList(model.getRootBG());
  processBounds(model.getModelBG());
}"
45910,"public void stateChanged(ChangeEvent e){
  float x=(Float)((SpinnerNumberModel)scaleTF.getModel()).getValue();
  if (x != currentScale.x) {
    currentScale.set(x,x,x);
    if (transformProcessor != null)     transformProcessor.setTransform(currentRotation,currentTranslation,currentScale);
  }
}","public void stateChanged(ChangeEvent e){
  float x=(Float)((SpinnerNumberModel)scaleTF.getModel()).getValue();
  if (x != currentScale.x) {
    currentScale.set(x,x,x);
    importedModel.setScale(currentScale);
    if (transformProcessor != null)     transformProcessor.setTransform(currentRotation,currentTranslation,currentScale);
  }
}"
45911,"public void setOrientation(Vector3f orientation){
  this.orientation=orientation;
}","public void setOrientation(Vector3f orientation){
  this.orientation.set(orientation);
}"
45912,"public Vector3f getOrientation(){
  return orientation;
}","public Vector3f getOrientation(){
  return orientation.clone();
}"
45913,"public void setTranslation(Vector3f translation){
  this.translation=translation;
}","public void setTranslation(Vector3f translation){
  this.translation.set(translation);
}"
45914,"public Vector3f getTranslation(){
  return translation;
}","public Vector3f getTranslation(){
  return translation.clone();
}"
45915,"public void appLaunchResult(AppServerLauncher.LaunchStatus status,String connInfo){
  logger.info(""String_Node_Str"");
  logger.info(""String_Node_Str"" + status);
  logger.info(""String_Node_Str"" + connInfo);
  if (status == AppServerLauncher.LaunchStatus.FAIL) {
    logger.warning(""String_Node_Str"" + serverState.getAppName());
    destroy();
    return;
  }
  SetConnectionInfoTask scit=new SetConnectionInfoTask(this,connInfo);
  AppContext.getTaskManager().scheduleTask(scit,2000);
}","public void appLaunchResult(AppServerLauncher.LaunchStatus status,String connInfo){
  logger.info(""String_Node_Str"");
  logger.info(""String_Node_Str"" + status);
  logger.info(""String_Node_Str"" + connInfo);
  if (status == AppServerLauncher.LaunchStatus.FAIL) {
    logger.warning(""String_Node_Str"" + serverState.getAppName());
    destroy();
    return;
  }
  setConnectionInfo(connInfo);
}"
45916,"/** 
 */
@Override public void initialize(ServerSessionManager manager){
  loaderMap=new HashMap();
  avatarChangedListener=new AvatarChangedListener(){
    public void avatarChanged(    Avatar newAvatar){
      if (camState != null) {
        avatarCellRenderer.removeAvatarChangedListener(avatarChangedListener);
        if (newAvatar.getContext() != null) {
          camState.setTargetCharacter(newAvatar);
        }
 else {
          camState.setTargetCharacter(null);
        }
        CellTransform transform=avatarCellRenderer.getCell().getLocalTransform();
        camState.setCameraPosition(transform.getTranslation(null));
      }
    }
  }
;
  chaseCameraMI=new JRadioButtonMenuItem(bundle.getString(""String_Node_Str""));
  chaseCameraMI.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent arg0){
      Vector3f offsetVec=new Vector3f(0.0f,4.0f,-10.0f);
      if (camState == null) {
        camModel=(ChaseCamModel)CameraModels.getCameraModel(ChaseCamModel.class);
        camState=new ChaseCamState(offsetVec,new Vector3f(0.0f,1.8f,0.0f));
        camState.setDamping(1.7f);
        camState.setLookAtDamping(1.7f);
      }
      camState.setCameraPosition(avatarCellRenderer.getCell().getLocalTransform().getTranslation(null).add(offsetVec));
      camState.setTargetCharacter(avatarCellRenderer.getAvatarCharacter());
      ClientContextJME.getViewManager().setCameraController(new FlexibleCameraAdapter(camModel,camState));
    }
  }
);
  gestureMI=new JCheckBoxMenuItem(bundle.getString(""String_Node_Str""));
  gestureMI.setSelected(false);
  gestureMI.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      if (gestureHUDRef == null || gestureHUDRef.get() == null) {
        GestureHUD hud=new GestureHUD();
        hud.setAvatarCharacter(avatarCellRenderer.getAvatarCharacter());
        gestureHUDRef=new WeakReference(hud);
      }
      gestureHUDEnabled=!gestureHUDEnabled;
      gestureMI.setSelected(gestureHUDEnabled);
      ((GestureHUD)gestureHUDRef.get()).setVisible(gestureHUDEnabled);
    }
  }
);
  avatarConfigMI=new JMenuItem(bundle.getString(""String_Node_Str""));
  avatarConfigMI.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      RenderManager rm=ClientContextJME.getWorldManager().getRenderManager();
      if (rm.supportsOpenGL20() == false || rm.getContextCaps().GL_MAX_VERTEX_UNIFORM_COMPONENTS_ARB < 1000) {
        String msg=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"";
        String title=""String_Node_Str"";
        JFrame frame=JmeClientMain.getFrame().getFrame();
        JOptionPane.showMessageDialog(frame,msg,title,JOptionPane.ERROR_MESSAGE);
        return;
      }
      AvatarConfigFrame f=new AvatarConfigFrame();
      f.setVisible(true);
    }
  }
);
  collisionEnabledMI=new JCheckBoxMenuItem(bundle.getString(""String_Node_Str""));
  collisionEnabledMI.setSelected(false);
  collisionEnabledMI.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      boolean isCollision=collisionEnabledMI.isSelected();
      boolean isGravity=gravityEnabledMI.isSelected();
      ClientContext.getInputManager().postEvent(new AvatarCollisionChangeRequestEvent(isCollision,isGravity));
    }
  }
);
  gravityEnabledMI=new JCheckBoxMenuItem(bundle.getString(""String_Node_Str""));
  gravityEnabledMI.setSelected(true);
  gravityEnabledMI.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      boolean isCollision=collisionEnabledMI.isSelected();
      boolean isGravity=gravityEnabledMI.isSelected();
      ClientContext.getInputManager().postEvent(new AvatarCollisionChangeRequestEvent(isCollision,isGravity));
    }
  }
);
  ClientContextJME.getAvatarRenderManager().registerRenderer(manager,AvatarImiJME.class,AvatarControls.class);
  try {
    String serverHostAndPort=manager.getServerNameAndPort();
    String baseURL=""String_Node_Str"";
    URL url=AssetUtils.getAssetURL(baseURL,serverHostAndPort);
    WorldManager worldManager=ClientContextJME.getWorldManager();
    worldManager.addUserData(Repository.class,new Repository(worldManager,new WonderlandAvatarCache(url.toExternalForm(),ClientContext.getUserDirectory(bundle.getString(""String_Node_Str"")))));
  }
 catch (  MalformedURLException excp) {
    logger.log(Level.WARNING,""String_Node_Str"",excp);
  }
  AvatarSystem.initialize(ClientContextJME.getWorldManager());
  super.initialize(manager);
}","/** 
 */
@Override public void initialize(ServerSessionManager manager){
  loaderMap=new HashMap();
  avatarChangedListener=new AvatarChangedListener(){
    public void avatarChanged(    Avatar newAvatar){
      if (camState != null) {
        avatarCellRenderer.removeAvatarChangedListener(avatarChangedListener);
        if (newAvatar.getContext() != null) {
          camState.setTargetCharacter(newAvatar);
        }
 else {
          camState.setTargetCharacter(null);
        }
        CellTransform transform=avatarCellRenderer.getCell().getLocalTransform();
        camState.setCameraPosition(transform.getTranslation(null));
      }
    }
  }
;
  chaseCameraMI=new JRadioButtonMenuItem(bundle.getString(""String_Node_Str""));
  chaseCameraMI.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent arg0){
      Vector3f offsetVec=new Vector3f(0.0f,4.0f,-10.0f);
      if (camState == null) {
        camModel=(ChaseCamModel)CameraModels.getCameraModel(ChaseCamModel.class);
        camState=new ChaseCamState(offsetVec,new Vector3f(0.0f,1.8f,0.0f));
        camState.setDamping(1.7f);
        camState.setLookAtDamping(1.7f);
      }
      camState.setCameraPosition(avatarCellRenderer.getCell().getLocalTransform().getTranslation(null).add(offsetVec));
      camState.setTargetCharacter(avatarCellRenderer.getAvatarCharacter());
      ClientContextJME.getViewManager().setCameraController(new FlexibleCameraAdapter(camModel,camState));
    }
  }
);
  gestureMI=new JCheckBoxMenuItem(bundle.getString(""String_Node_Str""));
  gestureMI.setSelected(false);
  gestureMI.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      if (gestureHUDRef == null || gestureHUDRef.get() == null) {
        GestureHUD hud=new GestureHUD();
        hud.setAvatarCharacter(avatarCellRenderer.getAvatarCharacter());
        gestureHUDRef=new WeakReference(hud);
      }
      gestureHUDEnabled=!gestureHUDEnabled;
      gestureMI.setSelected(gestureHUDEnabled);
      ((GestureHUD)gestureHUDRef.get()).setVisible(gestureHUDEnabled);
    }
  }
);
  avatarConfigMI=new JMenuItem(bundle.getString(""String_Node_Str""));
  avatarConfigMI.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      RenderManager rm=ClientContextJME.getWorldManager().getRenderManager();
      String shaderCheck=System.getProperty(""String_Node_Str"");
      boolean shaderPass=true;
      if (shaderCheck != null && shaderCheck.equals(""String_Node_Str"")) {
        shaderPass=rm.getContextCaps().GL_MAX_VERTEX_UNIFORM_COMPONENTS_ARB >= 512;
      }
      if (rm.supportsOpenGL20() == false || !shaderPass) {
        String msg=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"";
        String title=""String_Node_Str"";
        JFrame frame=JmeClientMain.getFrame().getFrame();
        JOptionPane.showMessageDialog(frame,msg,title,JOptionPane.ERROR_MESSAGE);
        return;
      }
      AvatarConfigFrame f=new AvatarConfigFrame();
      f.setVisible(true);
    }
  }
);
  collisionEnabledMI=new JCheckBoxMenuItem(bundle.getString(""String_Node_Str""));
  collisionEnabledMI.setSelected(false);
  collisionEnabledMI.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      boolean isCollision=collisionEnabledMI.isSelected();
      boolean isGravity=gravityEnabledMI.isSelected();
      ClientContext.getInputManager().postEvent(new AvatarCollisionChangeRequestEvent(isCollision,isGravity));
    }
  }
);
  gravityEnabledMI=new JCheckBoxMenuItem(bundle.getString(""String_Node_Str""));
  gravityEnabledMI.setSelected(true);
  gravityEnabledMI.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      boolean isCollision=collisionEnabledMI.isSelected();
      boolean isGravity=gravityEnabledMI.isSelected();
      ClientContext.getInputManager().postEvent(new AvatarCollisionChangeRequestEvent(isCollision,isGravity));
    }
  }
);
  ClientContextJME.getAvatarRenderManager().registerRenderer(manager,AvatarImiJME.class,AvatarControls.class);
  try {
    String serverHostAndPort=manager.getServerNameAndPort();
    String baseURL=""String_Node_Str"";
    URL url=AssetUtils.getAssetURL(baseURL,serverHostAndPort);
    WorldManager worldManager=ClientContextJME.getWorldManager();
    worldManager.addUserData(Repository.class,new Repository(worldManager,new WonderlandAvatarCache(url.toExternalForm(),ClientContext.getUserDirectory(bundle.getString(""String_Node_Str"")))));
  }
 catch (  MalformedURLException excp) {
    logger.log(Level.WARNING,""String_Node_Str"",excp);
  }
  AvatarSystem.initialize(ClientContextJME.getWorldManager());
  super.initialize(manager);
}"
45917,"/** 
 * Load and return the avatar. To make this the current avatar changeAvatar() must be called
 * @param avatarConfigURL
 * @return
 */
private WlAvatarCharacter loadAvatarInternal(AvatarConfigInfo avatarConfigInfo) throws MalformedURLException, IOException {
  WlAvatarCharacter ret=null;
  PMatrix origin=new PMatrix();
  CellTransform transform=cell.getLocalTransform();
  origin.setTranslation(transform.getTranslation(null));
  origin.setRotation(transform.getRotation(null));
  String avatarDetail=System.getProperty(""String_Node_Str"",""String_Node_Str"");
  RenderManager rm=ClientContextJME.getWorldManager().getRenderManager();
  if (rm.supportsOpenGL20() == false || rm.getContextCaps().GL_MAX_VERTEX_UNIFORM_COMPONENTS_ARB < 1000) {
    avatarDetail=""String_Node_Str"";
  }
  AvatarLoaderRegistry registry=AvatarLoaderRegistry.getAvatarLoaderRegistry();
  if (avatarConfigInfo == null || avatarDetail.equalsIgnoreCase(""String_Node_Str"")) {
    AvatarLoaderFactorySPI factory=registry.getDefaultAvatarLoaderFactory();
    if (factory == null) {
      logger.warning(""String_Node_Str"");
      return null;
    }
    ret=factory.getAvatarLoader().getAvatarCharacter(cell,username,avatarConfigInfo);
  }
 else {
    String className=avatarConfigInfo.getLoaderFactoryClassName();
    if (className == null) {
      logger.warning(""String_Node_Str"" + ""String_Node_Str"" + avatarConfigInfo.getAvatarConfigURL());
      return null;
    }
    AvatarLoaderFactorySPI factory=registry.getAvatarLoaderFactory(className);
    if (factory == null) {
      logger.warning(""String_Node_Str"" + className + ""String_Node_Str""+ avatarConfigInfo.getAvatarConfigURL());
      return null;
    }
    ret=factory.getAvatarLoader().getAvatarCharacter(cell,username,avatarConfigInfo);
  }
  ret.getModelInst().getTransform().getLocalMatrix(true).set(origin);
  Node external=ret.getJScene().getExternalKidsRoot();
  setZBufferState(external);
  setCollisionController(ret);
  return ret;
}","/** 
 * Load and return the avatar. To make this the current avatar changeAvatar() must be called
 * @param avatarConfigURL
 * @return
 */
private WlAvatarCharacter loadAvatarInternal(AvatarConfigInfo avatarConfigInfo) throws MalformedURLException, IOException {
  WlAvatarCharacter ret=null;
  PMatrix origin=new PMatrix();
  CellTransform transform=cell.getLocalTransform();
  origin.setTranslation(transform.getTranslation(null));
  origin.setRotation(transform.getRotation(null));
  String avatarDetail=System.getProperty(""String_Node_Str"",""String_Node_Str"");
  String shaderCheck=System.getProperty(""String_Node_Str"");
  boolean shaderPass=true;
  RenderManager rm=ClientContextJME.getWorldManager().getRenderManager();
  if (shaderCheck != null && shaderCheck.equals(""String_Node_Str"")) {
    shaderPass=rm.getContextCaps().GL_MAX_VERTEX_UNIFORM_COMPONENTS_ARB >= 512;
  }
  if (rm.supportsOpenGL20() == false || !shaderPass) {
    avatarDetail=""String_Node_Str"";
  }
  AvatarLoaderRegistry registry=AvatarLoaderRegistry.getAvatarLoaderRegistry();
  if (avatarConfigInfo == null || avatarDetail.equalsIgnoreCase(""String_Node_Str"")) {
    AvatarLoaderFactorySPI factory=registry.getDefaultAvatarLoaderFactory();
    if (factory == null) {
      logger.warning(""String_Node_Str"");
      return null;
    }
    ret=factory.getAvatarLoader().getAvatarCharacter(cell,username,avatarConfigInfo);
  }
 else {
    String className=avatarConfigInfo.getLoaderFactoryClassName();
    if (className == null) {
      logger.warning(""String_Node_Str"" + ""String_Node_Str"" + avatarConfigInfo.getAvatarConfigURL());
      return null;
    }
    AvatarLoaderFactorySPI factory=registry.getAvatarLoaderFactory(className);
    if (factory == null) {
      logger.warning(""String_Node_Str"" + className + ""String_Node_Str""+ avatarConfigInfo.getAvatarConfigURL());
      return null;
    }
    ret=factory.getAvatarLoader().getAvatarCharacter(cell,username,avatarConfigInfo);
  }
  ret.getModelInst().getTransform().getLocalMatrix(true).set(origin);
  Node external=ret.getJScene().getExternalKidsRoot();
  setZBufferState(external);
  setCollisionController(ret);
  return ret;
}"
45918,"public void selectForInput(boolean selected){
  selectedForInput=selected;
  enableInputListeners(selected);
}","public void selectForInput(boolean selected){
  if (selectedForInput == selected)   return;
  selectedForInput=selected;
  if (avatarCharacter != null) {
    WorldManager wm=ClientContextJME.getWorldManager();
    ((WlAvatarContext)avatarCharacter.getContext()).getBehaviorManager().setEnable(false);
    if (controlScheme == null && selectedForInput) {
      controlScheme=new DefaultCharacterControls(ClientContextJME.getWorldManager());
      ((AvatarControls)wm.getUserData(AvatarControls.class)).setDefault(controlScheme);
      avatarCharacter.selectForInput();
      controlScheme.addCharacterToTeam(avatarCharacter);
      controlScheme.setCharacter(avatarCharacter);
    }
    if (selectedForInput) {
      avatarCharacter.getContext().getController().addCharacterMotionListener(characterMotionListener);
      avatarCharacter.getContext().addGameContextListener(gameContextListener);
      avatarCharacter.selectForInput();
      controlScheme.addCharacterToTeam(avatarCharacter);
      controlScheme.setCharacter(avatarCharacter);
      ProcessorCollectionComponent pcc=avatarCharacter.getComponent(ProcessorCollectionComponent.class);
      ProcessorComponent characterProcessor=null;
      ProcessorComponent characterAnimationProcessor=null;
      for (      ProcessorComponent pc : pcc.getProcessors()) {
        if (pc instanceof CharacterProcessor)         characterProcessor=pc;
 else         if (pc instanceof CharacterAnimationProcessor) {
          characterAnimationProcessor=pc;
          break;
        }
      }
      cameraChainedProcessor=null;
      if (characterAnimationProcessor != null) {
        cameraChainedProcessor=characterAnimationProcessor;
      }
 else       if (characterProcessor != null)       cameraChainedProcessor=characterProcessor;
      if (cameraChainedProcessor != null) {
        cameraChainedProcessor.addToChain(ViewManager.getViewManager().getCameraProcessor());
        cameraChainedProcessor.setRunInRenderer(true);
      }
    }
 else {
      avatarCharacter.getContext().getController().removeCharacterMotionListener(characterMotionListener);
      avatarCharacter.getContext().removeGameContextListener(gameContextListener);
      if (controlScheme != null) {
        controlScheme.clearCharacterTeam();
      }
      if (cameraChainedProcessor != null) {
        cameraChainedProcessor.removeFromChain(ViewManager.getViewManager().getCameraProcessor());
        cameraChainedProcessor=null;
      }
    }
  }
 else {
  }
}"
45919,"/** 
 * Change the current avatar to the given avatar. NOTE: This method must be called in the MT Game Render Thread. As such, we assume only one of these methods is called at a time.
 * @param newAvatar The new avatar to change to.
 */
private void changeAvatarInternal(WlAvatarCharacter newAvatar){
  LoadingInfo.startedLoading(cell.getCellID(),newAvatar.getName());
  Node nameTagNode=getNameTagNode();
  PMatrix currentLocation=null;
  if (avatarCharacter != null) {
    currentLocation=avatarCharacter.getModelInst().getTransform().getWorldMatrix(true);
    rootEntity.removeEntity(avatarCharacter);
    avatarCharacter.getJScene().getExternalKidsRoot().detachChild(nameTagNode);
    enableInputListeners(false);
    avatarCharacter.destroy();
  }
  avatarCharacter=newAvatar;
  if (newAvatar == null) {
    return;
  }
  RenderComponent rc=(RenderComponent)avatarCharacter.getComponent(RenderComponent.class);
  addDefaultComponents(avatarCharacter,rc.getSceneRoot());
  avatarCharacter.removeComponent(CollisionComponent.class);
  if (currentLocation != null && avatarCharacter.getModelInst() != null) {
    avatarCharacter.getModelInst().setTransform(new PTransform(currentLocation));
  }
  Node externalRoot=avatarCharacter.getJScene().getExternalKidsRoot();
  externalRoot.attachChild(nameTagNode);
  externalRoot.setModelBound(new BoundingSphere());
  externalRoot.updateModelBound();
  externalRoot.updateGeometricState(0,true);
  rootEntity.addEntity(avatarCharacter);
  selectForInput(selectedForInput);
  for (  WeakReference<AvatarChangedListener> listenerRef : avatarChangedListeners) {
    AvatarChangedListener listener=listenerRef.get();
    if (listener != null) {
      listener.avatarChanged(avatarCharacter);
    }
 else {
      avatarChangedListeners.remove(listenerRef);
    }
  }
  if (avatarCharacter.getJScene() != null) {
    avatarCharacter.getPScene().submitTransformsAndGeometry(true);
    avatarCharacter.getJScene().setModelBound(new BoundingSphere());
    avatarCharacter.getJScene().updateModelBound();
    avatarCharacter.getJScene().updateWorldBound();
  }
  LoadingInfo.finishedLoading(cell.getCellID(),newAvatar.getName());
}","/** 
 * Change the current avatar to the given avatar. NOTE: This method must be called in the MT Game Render Thread. As such, we assume only one of these methods is called at a time.
 * @param newAvatar The new avatar to change to.
 */
private void changeAvatarInternal(WlAvatarCharacter newAvatar){
  LoadingInfo.startedLoading(cell.getCellID(),newAvatar.getName());
  Node nameTagNode=getNameTagNode();
  PMatrix currentLocation=null;
  if (avatarCharacter != null) {
    currentLocation=avatarCharacter.getModelInst().getTransform().getWorldMatrix(true);
    rootEntity.removeEntity(avatarCharacter);
    avatarCharacter.getJScene().getExternalKidsRoot().detachChild(nameTagNode);
    selectForInput(false);
    avatarCharacter.destroy();
  }
  avatarCharacter=newAvatar;
  if (newAvatar == null) {
    return;
  }
  RenderComponent rc=(RenderComponent)avatarCharacter.getComponent(RenderComponent.class);
  addDefaultComponents(avatarCharacter,rc.getSceneRoot());
  avatarCharacter.removeComponent(CollisionComponent.class);
  if (currentLocation != null && avatarCharacter.getModelInst() != null) {
    avatarCharacter.getModelInst().setTransform(new PTransform(currentLocation));
  }
  Node externalRoot=avatarCharacter.getJScene().getExternalKidsRoot();
  externalRoot.attachChild(nameTagNode);
  externalRoot.setModelBound(new BoundingSphere());
  externalRoot.updateModelBound();
  externalRoot.updateGeometricState(0,true);
  rootEntity.addEntity(avatarCharacter);
  selectForInput(selectedForInput);
  for (  WeakReference<AvatarChangedListener> listenerRef : avatarChangedListeners) {
    AvatarChangedListener listener=listenerRef.get();
    if (listener != null) {
      listener.avatarChanged(avatarCharacter);
    }
 else {
      avatarChangedListeners.remove(listenerRef);
    }
  }
  if (avatarCharacter.getJScene() != null) {
    avatarCharacter.getPScene().submitTransformsAndGeometry(true);
    avatarCharacter.getJScene().setModelBound(new BoundingSphere());
    avatarCharacter.getJScene().updateModelBound();
    avatarCharacter.getJScene().updateWorldBound();
  }
  LoadingInfo.finishedLoading(cell.getCellID(),newAvatar.getName());
}"
45920,"/** 
 * Remove a cell from the world
 * @param cell the cell to remove
 */
public void removeCellFromWorld(CellMO cell){
  cell.setLive(false);
  UniverseManagerFactory.getUniverseManager().removeRootFromUniverse(cell);
  getRootCellsForUpdate().remove(cell.getCellID());
}","/** 
 * Remove a cell from the world
 * @param cell the cell to remove
 */
public void removeCellFromWorld(CellMO cell){
  cell.setLive(false);
  getRootCellsForUpdate().remove(cell.getCellID());
}"
45921,"public void removeRootFromUniverse(CellMO rootCellMO){
  final Identity identity=txnProxy.getCurrentOwner();
  scheduleChange(new Change(rootCellMO.getCellID(),null,null){
    public void run(){
      if (logger.isLoggable(Level.FINE))       logger.log(Level.FINE,""String_Node_Str"");
      universe.removeRootSpatialCell(cellID,identity);
    }
  }
);
}","public void removeRootFromUniverse(CellMO rootCellMO){
  scheduleChange(new Change(rootCellMO.getCellID(),null,null){
    public void run(){
      if (logger.isLoggable(Level.FINE))       logger.log(Level.FINE,""String_Node_Str"");
      universe.removeCell(cellID);
    }
  }
);
}"
45922,"/** 
 * Update the world transform of this node and all it's children iterating down the graph, then coming back up set the world bounds correctly Return the world bounds
 * @return
 */
private BoundingVolume updateWorldTransform(Identity identity){
  CellTransform oldWorld;
  boolean transformChanged=false;
  if (worldTransform == null)   oldWorld=null;
 else   oldWorld=worldTransform.clone(null);
  if (parent != null) {
    CellTransform parentWorld=parent.worldTransform;
    worldTransform=parentWorld.mul(localTransform);
  }
 else {
    worldTransform=localTransform.clone(null);
  }
  if (!worldTransform.equals(oldWorld)) {
    if (worldTransformChangeListener != null)     worldTransformChangeListener.transformChanged(this);
    transformChanged=true;
  }
  computeWorldBounds();
  if (children != null) {
    for (    SpatialCellImpl s : children) {
      worldBounds.mergeLocal(s.updateWorldTransform(identity));
    }
  }
  if (transformChanged) {
    notifyViewCaches(worldTransform);
    notifyTransformChangeListeners(identity);
  }
  return worldBounds;
}","/** 
 * Update the world transform of this node and all it's children iterating down the graph, then coming back up set the world bounds correctly Return the world bounds
 * @return
 */
private BoundingVolume updateWorldTransform(Identity identity){
  CellTransform oldWorld;
  boolean transformChanged=false;
  if (worldTransform == null)   oldWorld=null;
 else   oldWorld=worldTransform.clone(null);
  if (parent != null) {
    CellTransform parentWorld=parent.worldTransform.clone(null);
    worldTransform=parentWorld.mul(localTransform);
  }
 else {
    worldTransform=localTransform.clone(null);
  }
  if (!worldTransform.equals(oldWorld)) {
    if (worldTransformChangeListener != null)     worldTransformChangeListener.transformChanged(this);
    transformChanged=true;
  }
  computeWorldBounds();
  if (children != null) {
    for (    SpatialCellImpl s : children) {
      worldBounds.mergeLocal(s.updateWorldTransform(identity));
    }
  }
  if (transformChanged) {
    notifyViewCaches(worldTransform);
    notifyTransformChangeListeners(identity);
  }
  return worldBounds;
}"
45923,"/** 
 * Set the root for this node and all it's children
 * @param root
 */
void setRoot(SpatialCell root,ViewCacheSet viewCacheSet,Identity identity){
  this.rootNode=(SpatialCellImpl)root;
  try {
    if (isRoot) {
      if (root == null) {
        for (        Space s : spaces) {
          s.removeRootSpatialCell(this);
        }
        spaces.clear();
        isRoot=false;
        readWriteLock=null;
        this.viewCacheSet=null;
        spaces=null;
      }
    }
    if (root == this) {
      if (!isRoot) {
        readWriteLock=new ReentrantReadWriteLock(true);
        this.viewCacheSet=new ViewCacheSet();
        isRoot=true;
        spaces=new HashSet();
      }
      acquireRootWriteLock();
      updateWorldTransform(identity);
    }
 else {
      this.viewCacheSet=viewCacheSet;
    }
    if (children != null) {
      for (      SpatialCellImpl s : children)       s.setRoot(root,this.viewCacheSet,identity);
    }
  }
  finally {
    if (root == this) {
      releaseRootWriteLock();
    }
  }
}","/** 
 * Set the root for this node and all it's children
 * @param root
 */
void setRoot(SpatialCell root,ViewCacheSet viewCacheSet,Identity identity){
  this.rootNode=(SpatialCellImpl)root;
  try {
    if (isRoot) {
      if (root == null) {
        for (        Space s : spaces) {
          s.removeRootSpatialCell(this);
        }
        spaces.clear();
        isRoot=false;
        readWriteLock=null;
        this.viewCacheSet=null;
        spaces=null;
        return;
      }
    }
    if (root == this) {
      if (!isRoot) {
        readWriteLock=new ReentrantReadWriteLock(true);
        this.viewCacheSet=new ViewCacheSet();
        isRoot=true;
        spaces=new HashSet();
      }
      acquireRootWriteLock();
      updateWorldTransform(identity);
    }
 else {
      this.viewCacheSet=viewCacheSet;
    }
    if (children != null) {
      for (      SpatialCellImpl s : children)       s.setRoot(root,this.viewCacheSet,identity);
    }
  }
  finally {
    if (root == this) {
      releaseRootWriteLock();
    }
  }
}"
45924,"Iterable<SpatialCellImpl> getChildren(){
  return children;
}","/** 
 * Return the children, or null
 * @return
 */
Iterable<SpatialCellImpl> getChildren(){
  return children;
}"
45925,"public void removeRootSpatialCell(CellID cellID,Identity identity){
  logger.fine(""String_Node_Str"" + cellID);
  SpatialCellImpl cellImpl=(SpatialCellImpl)getSpatialCell(cellID);
  if (cellImpl == null) {
    logger.warning(""String_Node_Str"" + cellID);
    return;
  }
  cellImpl.setRoot(null,null,identity);
}","public void removeRootSpatialCell(CellID cellID,Identity identity){
}"
45926,"public void removeCell(CellID id){
  logger.fine(""String_Node_Str"" + id);
  SpatialCellImpl cell=(SpatialCellImpl)getSpatialCell(id);
  if (cell.getParent() != null) {
    cell.getParent().removeChild(cell);
  }
  cell.destroy();
synchronized (cells) {
    cells.remove(id);
  }
}","public void removeCell(CellID id){
  logger.fine(""String_Node_Str"" + id);
  SpatialCellImpl cell=(SpatialCellImpl)getSpatialCell(id);
  if (cell.getParent() != null) {
    cell.getParent().removeChild(cell);
  }
  Iterable<SpatialCellImpl> children=cell.getChildren();
  if (children != null) {
    for (    SpatialCellImpl child : cell.getChildren())     removeCell(child.getCellID());
  }
  cell.destroy();
synchronized (cells) {
    cells.remove(id);
  }
}"
45927,"void cellDestroyed(SpatialCell cell){
  Logger.getAnonymousLogger().warning(""String_Node_Str"");
}","void cellDestroyed(SpatialCell cell){
  CellID cellID=((SpatialCellImpl)cell).getCellID();
  removeViewUpdateListener(cellID,null);
}"
45928,"void login(){
  cellMoved(viewCell,viewCell.getWorldTransform());
  UniverseImpl.getUniverse().scheduleTransaction(new KernelRunnable(){
    public String getBaseTaskType(){
      return ViewCache.class.getName() + ""String_Node_Str"";
    }
    public void run() throws Exception {
synchronized (viewUpdateListeners) {
        for (        ViewUpdateListenerContainer cont : viewUpdateListeners)         cont.notifyListenersLogin();
      }
    }
  }
,identity);
}","void login(){
  cellMoved(viewCell,viewCell.getWorldTransform());
  UniverseImpl.getUniverse().scheduleTransaction(new KernelRunnable(){
    public String getBaseTaskType(){
      return ViewCache.class.getName() + ""String_Node_Str"";
    }
    public void run() throws Exception {
synchronized (viewUpdateListeners) {
        for (        ViewUpdateListenerContainer cont : viewUpdateListeners.values())         cont.notifyListenersLogin();
      }
    }
  }
,identity);
}"
45929,"void logout(){
  cacheProcessor.quit();
synchronized (spaces) {
    for (    Space sp : spaces)     sp.removeViewCache(this);
    spaces.clear();
  }
  rootCells.clear();
synchronized (pendingCacheUpdates) {
    pendingCacheUpdates.clear();
  }
  UniverseImpl.getUniverse().scheduleTransaction(new KernelRunnable(){
    public String getBaseTaskType(){
      return ViewCache.class.getName() + ""String_Node_Str"";
    }
    public void run() throws Exception {
synchronized (viewUpdateListeners) {
        for (        ViewUpdateListenerContainer cont : viewUpdateListeners)         cont.notifyListenersLogout();
      }
    }
  }
,identity);
}","void logout(){
  cacheProcessor.quit();
synchronized (spaces) {
    for (    Space sp : spaces)     sp.removeViewCache(this);
    spaces.clear();
  }
  rootCells.clear();
synchronized (pendingCacheUpdates) {
    pendingCacheUpdates.clear();
  }
  UniverseImpl.getUniverse().scheduleTransaction(new KernelRunnable(){
    public String getBaseTaskType(){
      return ViewCache.class.getName() + ""String_Node_Str"";
    }
    public void run() throws Exception {
synchronized (viewUpdateListeners) {
        for (        ViewUpdateListenerContainer cont : viewUpdateListeners.values())         cont.notifyListenersLogout();
      }
    }
  }
,identity);
}"
45930,"private void viewCellMoved(final CellTransform worldTransform){
  worldTransform.getTranslation(v3f);
  if (lastSpaceValidationPoint == null || lastSpaceValidationPoint.distanceSquared(v3f) > REVAL_DISTANCE_SQUARED) {
    revalidateSpaces();
    if (lastSpaceValidationPoint == null)     lastSpaceValidationPoint=new Vector3f(v3f);
 else     lastSpaceValidationPoint.set(v3f);
  }
  UniverseImpl.getUniverse().scheduleTransaction(new KernelRunnable(){
    public String getBaseTaskType(){
      return ViewCache.class.getName() + ""String_Node_Str"";
    }
    public void run() throws Exception {
synchronized (viewUpdateListeners) {
        for (        ViewUpdateListenerContainer cont : viewUpdateListeners)         cont.notifyListeners(worldTransform);
      }
    }
  }
,identity);
}","private void viewCellMoved(final CellTransform worldTransform){
  worldTransform.getTranslation(v3f);
  if (lastSpaceValidationPoint == null || lastSpaceValidationPoint.distanceSquared(v3f) > REVAL_DISTANCE_SQUARED) {
    revalidateSpaces();
    if (lastSpaceValidationPoint == null)     lastSpaceValidationPoint=new Vector3f(v3f);
 else     lastSpaceValidationPoint.set(v3f);
  }
  UniverseImpl.getUniverse().scheduleTransaction(new KernelRunnable(){
    public String getBaseTaskType(){
      return ViewCache.class.getName() + ""String_Node_Str"";
    }
    public void run() throws Exception {
synchronized (viewUpdateListeners) {
        for (        ViewUpdateListenerContainer cont : viewUpdateListeners.values())         cont.notifyListeners(worldTransform);
      }
    }
  }
,identity);
}"
45931,"/** 
 * A non root cell has been added or removed, traverse the new subgraph and add/remove all the cells
 * @param child the root of the subgraph
 * @param newCells the set of cells in the subgraph (including child)
 */
private void addOrRemoveSubgraphCellImpl(SpatialCellImpl child,List<CellDescription> newCells){
  child.acquireRootReadLock();
  try {
    newCells.add(new CellDesc(child.getCellID()));
    processChildCells(newCells,child,CellStatus.ACTIVE);
  }
  finally {
    child.releaseRootReadLock();
  }
}","/** 
 * A non root cell has been added or removed, traverse the new subgraph and add/remove all the cells
 * @param child the root of the subgraph
 * @param newCells the set of cells in the subgraph (including child)
 */
private void addOrRemoveSubgraphCellImpl(SpatialCellImpl child,List<CellDescription> newCells){
  child.acquireRootReadLock();
  try {
    newCells.add(new CellDesc(child.getCellID()));
    processChildCells(newCells,child,null);
  }
  finally {
    child.releaseRootReadLock();
  }
}"
45932,"void addViewUpdateListener(CellID cellID,ViewUpdateListener listener){
synchronized (viewUpdateListeners) {
    viewUpdateListeners.add(new ViewUpdateListenerContainer(cellID,listener));
  }
}","void addViewUpdateListener(CellID cellID,ViewUpdateListener listener){
synchronized (viewUpdateListeners) {
    viewUpdateListeners.put(cellID,new ViewUpdateListenerContainer(cellID,listener));
  }
}"
45933,"void removeViewUpdateListener(CellID cellID,ViewUpdateListener listener){
synchronized (viewUpdateListeners) {
    viewUpdateListeners.remove(new ViewUpdateListenerContainer(cellID,listener));
  }
}","void removeViewUpdateListener(CellID cellID,ViewUpdateListener listener){
synchronized (viewUpdateListeners) {
    viewUpdateListeners.remove(cellID);
  }
}"
45934,"private void startSoftphone(GetVoiceBridgeResponseMessage msg){
  logger.warning(""String_Node_Str"" + msg.getBridgeInfo());
  String phoneNumber=System.getProperty(""String_Node_Str"");
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  if (phoneNumber != null && phoneNumber.length() > 0) {
    session.send(this,new PlaceCallRequestMessage(presenceInfo,phoneNumber,0.,0.,0.,90.,false));
    return;
  }
  SoftphoneControlImpl sc=SoftphoneControlImpl.getInstance();
  String tokens[]=msg.getBridgeInfo().split(""String_Node_Str"");
  String registrarAddress=tokens[5] + ""String_Node_Str"";
  registrarAddress+=tokens[7];
  String localAddress=null;
  try {
    InetAddress ia=NetworkAddress.getPrivateLocalAddress(""String_Node_Str"" + tokens[5] + ""String_Node_Str""+ tokens[7]+ ""String_Node_Str"");
    localAddress=ia.getHostAddress();
  }
 catch (  UnknownHostException e) {
    logger.warning(e.getMessage());
    logger.warning(""String_Node_Str"" + ""String_Node_Str"");
    try {
      InetAddress ia=NetworkAddress.getPrivateLocalAddress(""String_Node_Str"" + tokens[2] + ""String_Node_Str""+ tokens[4]+ ""String_Node_Str"");
      localAddress=ia.getHostAddress();
    }
 catch (    UnknownHostException ee) {
      logger.warning(ee.getMessage());
    }
  }
  if (localAddress != null) {
    try {
      String sipURL=sc.startSoftphone(presenceInfo.userID.getUsername(),registrarAddress,10,localAddress);
      logger.fine(""String_Node_Str"" + presenceInfo);
      if (sipURL != null) {
        session.send(this,new PlaceCallRequestMessage(presenceInfo,sipURL,0.,0.,0.,90.,false));
      }
 else {
        System.out.println(""String_Node_Str"");
        try {
          Thread.sleep(2000);
        }
 catch (        InterruptedException e) {
        }
        connectSoftphone();
      }
    }
 catch (    IOException e) {
      logger.warning(e.getMessage());
    }
  }
 else {
    logger.warning(""String_Node_Str"");
    connectSoftphone();
  }
}","private void startSoftphone(GetVoiceBridgeResponseMessage msg){
  logger.warning(""String_Node_Str"" + msg.getBridgeInfo());
  String phoneNumber=System.getProperty(""String_Node_Str"");
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  if (phoneNumber != null && phoneNumber.length() > 0) {
    session.send(this,new PlaceCallRequestMessage(presenceInfo,phoneNumber,0.,0.,0.,90.,false));
    return;
  }
  SoftphoneControlImpl sc=SoftphoneControlImpl.getInstance();
  String tokens[]=msg.getBridgeInfo().split(""String_Node_Str"");
  String registrarAddress=tokens[5] + ""String_Node_Str"";
  registrarAddress+=tokens[7];
  String localAddress=null;
  try {
    InetAddress ia=NetworkAddress.getPrivateLocalAddress(""String_Node_Str"" + tokens[5] + ""String_Node_Str""+ tokens[7]+ ""String_Node_Str"");
    localAddress=ia.getHostAddress();
  }
 catch (  UnknownHostException e) {
    logger.warning(e.getMessage());
    logger.warning(""String_Node_Str"" + ""String_Node_Str"");
    try {
      InetAddress ia=NetworkAddress.getPrivateLocalAddress(""String_Node_Str"" + tokens[2] + ""String_Node_Str""+ tokens[4]+ ""String_Node_Str"");
      localAddress=ia.getHostAddress();
    }
 catch (    UnknownHostException ee) {
      logger.warning(ee.getMessage());
    }
  }
  if (localAddress != null) {
    try {
      String sipURL=sc.startSoftphone(presenceInfo.userID.getUsername(),registrarAddress,10,localAddress);
      logger.fine(""String_Node_Str"" + presenceInfo);
      if (sipURL != null) {
        session.send(this,new PlaceCallRequestMessage(presenceInfo,sipURL,0.,0.,0.,90.,false));
      }
 else {
        logger.warning(""String_Node_Str"");
        try {
          Thread.sleep(2000);
        }
 catch (        InterruptedException e) {
        }
        connectSoftphone();
      }
    }
 catch (    IOException e) {
      logger.warning(e.getMessage());
    }
  }
 else {
    logger.warning(""String_Node_Str"");
    connectSoftphone();
  }
}"
45935,"public void voiceChat(){
  if (presenceInfo == null) {
    return;
  }
  AddHUDPanel addPanel=new AddHUDPanel(this,session,presenceInfo,presenceInfo);
  HUD mainHUD=HUDManagerFactory.getHUDManager().getHUD(""String_Node_Str"");
  final HUDComponent addComponent=mainHUD.createComponent(addPanel);
  addPanel.setHUDComponent(addComponent);
  addComponent.setPreferredLocation(Layout.CENTER);
  addComponent.setName(""String_Node_Str"");
  addComponent.setIcon(voiceChatIcon);
  mainHUD.addComponent(addComponent);
  addComponent.addEventListener(new HUDEventListener(){
    public void HUDObjectChanged(    HUDEvent e){
      if (e.getEventType().equals(HUDEventType.DISAPPEARED)) {
      }
    }
  }
);
  PropertyChangeListener plistener=new PropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent pe){
      if (pe.getPropertyName().equals(""String_Node_Str"") || pe.getPropertyName().equals(""String_Node_Str"")) {
        addComponent.setVisible(false);
      }
    }
  }
;
  addPanel.addPropertyChangeListener(plistener);
  addComponent.setVisible(true);
}","public void voiceChat(){
  if (presenceInfo == null) {
    return;
  }
  AddHUDPanel addPanel=new AddHUDPanel(this,session,presenceInfo,presenceInfo,Mode.INITIATE);
  HUD mainHUD=HUDManagerFactory.getHUDManager().getHUD(""String_Node_Str"");
  final HUDComponent addComponent=mainHUD.createComponent(addPanel);
  addPanel.setHUDComponent(addComponent);
  addComponent.setPreferredLocation(Layout.CENTER);
  addComponent.setName(""String_Node_Str"");
  addComponent.setIcon(voiceChatIcon);
  mainHUD.addComponent(addComponent);
  addComponent.addEventListener(new HUDEventListener(){
    public void HUDObjectChanged(    HUDEvent e){
      if (e.getEventType().equals(HUDEventType.DISAPPEARED)) {
      }
    }
  }
);
  PropertyChangeListener plistener=new PropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent pe){
      if (pe.getPropertyName().equals(""String_Node_Str"") || pe.getPropertyName().equals(""String_Node_Str"")) {
        addComponent.setVisible(false);
      }
    }
  }
;
  addPanel.addPropertyChangeListener(plistener);
  addComponent.setVisible(true);
}"
45936,"public void setAudioQuality(AudioQuality audioQuality){
  SoftphoneControlImpl.getInstance().setAudioQuality(audioQuality);
  System.out.println(""String_Node_Str"");
  reconnectSoftphone();
}","public void setAudioQuality(AudioQuality audioQuality){
  SoftphoneControlImpl.getInstance().setAudioQuality(audioQuality);
  logger.info(""String_Node_Str"" + audioQuality + ""String_Node_Str"");
  reconnectSoftphone();
}"
45937,"public void softphoneExited(){
  System.out.println(""String_Node_Str"");
  logger.fine(""String_Node_Str"");
  connectSoftphone();
}","public void softphoneExited(){
  logger.warning(""String_Node_Str"");
  connectSoftphone();
}"
45938,"@Override public void handleMessage(Message message){
  logger.fine(""String_Node_Str"");
  if (message instanceof GetVoiceBridgeResponseMessage) {
    startSoftphone((GetVoiceBridgeResponseMessage)message);
    return;
  }
  if (message instanceof ChangeUsernameAliasMessage) {
    changeUsernameAlias((ChangeUsernameAliasMessage)message);
    return;
  }
  if (message instanceof VoiceChatJoinRequestMessage) {
    System.out.println(""String_Node_Str"");
    final IncomingCallHUDPanel incomingCallHUDPanel=new IncomingCallHUDPanel(this,session,cell.getCellID(),(VoiceChatJoinRequestMessage)message);
    HUD mainHUD=HUDManagerFactory.getHUDManager().getHUD(""String_Node_Str"");
    final HUDComponent incomingCallHUDComponent=mainHUD.createComponent(incomingCallHUDPanel);
    incomingCallHUDPanel.setHUDComponent(incomingCallHUDComponent);
    incomingCallHUDComponent.setPreferredLocation(Layout.CENTER);
    incomingCallHUDComponent.setIcon(voiceChatIcon);
    mainHUD.addComponent(incomingCallHUDComponent);
    incomingCallHUDComponent.addEventListener(new HUDEventListener(){
      public void HUDObjectChanged(      HUDEvent e){
        if (e.getEventType().equals(HUDEventType.DISAPPEARED)) {
          incomingCallHUDPanel.busy();
        }
      }
    }
);
    incomingCallHUDComponent.setVisible(true);
    return;
  }
  if (message instanceof VoiceChatBusyMessage) {
    VoiceChatBusyMessage msg=(VoiceChatBusyMessage)message;
    VoiceChatBusyHUDPanel voiceChatBusyHUDPanel=new VoiceChatBusyHUDPanel(msg.getCallee());
    HUD mainHUD=HUDManagerFactory.getHUDManager().getHUD(""String_Node_Str"");
    HUDComponent voiceChatBusyHUDComponent=mainHUD.createComponent(voiceChatBusyHUDPanel);
    voiceChatBusyHUDPanel.setHUDComponent(voiceChatBusyHUDComponent);
    voiceChatBusyHUDComponent.setPreferredLocation(Layout.CENTER);
    voiceChatBusyHUDComponent.setIcon(voiceChatIcon);
    mainHUD.addComponent(voiceChatBusyHUDComponent);
    voiceChatBusyHUDComponent.addEventListener(new HUDEventListener(){
      public void HUDObjectChanged(      HUDEvent e){
        if (e.getEventType().equals(HUDEventType.DISAPPEARED)) {
        }
      }
    }
);
    voiceChatBusyHUDComponent.setVisible(true);
    notifyMemberChangeListeners(msg.getGroup(),msg.getCallee(),false);
    return;
  }
  if (message instanceof VoiceChatInfoResponseMessage) {
    VoiceChatInfoResponseMessage msg=(VoiceChatInfoResponseMessage)message;
    notifyMemberChangeListeners(msg.getGroup(),msg.getChatters());
    return;
  }
  if (message instanceof VoiceChatJoinAcceptedMessage) {
    joinVoiceChat((VoiceChatJoinAcceptedMessage)message);
    return;
  }
  if (message instanceof VoiceChatHoldMessage) {
    VoiceChatHoldMessage msg=(VoiceChatHoldMessage)message;
    return;
  }
  if (message instanceof VoiceChatLeaveMessage) {
    leaveVoiceChat((VoiceChatLeaveMessage)message);
    return;
  }
  if (message instanceof VoiceChatCallEndedMessage) {
    VoiceChatCallEndedMessage msg=(VoiceChatCallEndedMessage)message;
    voiceChatCallEnded(msg);
    session.send(this,new VoiceChatLeaveMessage(msg.getGroup(),msg.getCallee()));
    return;
  }
  if (message instanceof ConeOfSilenceEnterExitMessage) {
    coneOfSilenceEnterExit((ConeOfSilenceEnterExitMessage)message);
    return;
  }
  if (message instanceof PlayerInRangeMessage) {
    PlayerInRangeMessage msg=(PlayerInRangeMessage)message;
    PresenceInfo info=pm.getPresenceInfo(msg.getPlayerID());
    if (info == null) {
      logger.warning(""String_Node_Str"" + msg.getPlayerID());
      return;
    }
    PresenceInfo userInRangeInfo=pm.getPresenceInfo(msg.getPlayerInRangeID());
    if (userInRangeInfo == null) {
      logger.warning(""String_Node_Str"" + msg.getPlayerInRangeID());
      return;
    }
    notifyUserInRangeListeners(info,userInRangeInfo,msg.isInRange());
    return;
  }
  if (message instanceof CallEstablishedMessage) {
    if (callMigrationForm != null) {
      callMigrationForm.setStatus(""String_Node_Str"");
    }
    return;
  }
  if (message instanceof CallMigrateMessage) {
    callMigrate((CallMigrateMessage)message);
    return;
  }
  if (message instanceof CallMutedMessage) {
    callMuted((CallMutedMessage)message);
    return;
  }
  if (message instanceof CallSpeakingMessage) {
    callSpeaking((CallSpeakingMessage)message);
    return;
  }
  if (message instanceof CallEndedMessage) {
    callEnded((CallEndedMessage)message);
    return;
  }
  logger.warning(""String_Node_Str"" + message);
  throw new UnsupportedOperationException(""String_Node_Str"");
}","@Override public void handleMessage(Message message){
  logger.fine(""String_Node_Str"");
  if (message instanceof GetPlayersInRangeResponseMessage) {
    GetPlayersInRangeResponseMessage msg=(GetPlayersInRangeResponseMessage)message;
    String[] playersInRange=msg.getPlayersInRange();
    for (int i=0; i < playersInRange.length; i++) {
      playerInRange(new PlayerInRangeMessage(msg.getPlayerID(),playersInRange[i],true));
    }
    return;
  }
  if (message instanceof GetVoiceBridgeResponseMessage) {
    startSoftphone((GetVoiceBridgeResponseMessage)message);
    return;
  }
  if (message instanceof ChangeUsernameAliasMessage) {
    changeUsernameAlias((ChangeUsernameAliasMessage)message);
    return;
  }
  if (message instanceof VoiceChatJoinRequestMessage) {
    logger.warning(""String_Node_Str"");
    final IncomingCallHUDPanel incomingCallHUDPanel=new IncomingCallHUDPanel(this,session,cell.getCellID(),(VoiceChatJoinRequestMessage)message);
    HUD mainHUD=HUDManagerFactory.getHUDManager().getHUD(""String_Node_Str"");
    final HUDComponent incomingCallHUDComponent=mainHUD.createComponent(incomingCallHUDPanel);
    incomingCallHUDPanel.setHUDComponent(incomingCallHUDComponent);
    incomingCallHUDComponent.setPreferredLocation(Layout.CENTER);
    incomingCallHUDComponent.setIcon(voiceChatIcon);
    mainHUD.addComponent(incomingCallHUDComponent);
    incomingCallHUDComponent.addEventListener(new HUDEventListener(){
      public void HUDObjectChanged(      HUDEvent e){
        if (e.getEventType().equals(HUDEventType.DISAPPEARED)) {
          incomingCallHUDPanel.busy();
        }
      }
    }
);
    incomingCallHUDComponent.setVisible(true);
    return;
  }
  if (message instanceof VoiceChatBusyMessage) {
    VoiceChatBusyMessage msg=(VoiceChatBusyMessage)message;
    VoiceChatBusyHUDPanel voiceChatBusyHUDPanel=new VoiceChatBusyHUDPanel(msg.getCallee());
    HUD mainHUD=HUDManagerFactory.getHUDManager().getHUD(""String_Node_Str"");
    HUDComponent voiceChatBusyHUDComponent=mainHUD.createComponent(voiceChatBusyHUDPanel);
    voiceChatBusyHUDPanel.setHUDComponent(voiceChatBusyHUDComponent);
    voiceChatBusyHUDComponent.setPreferredLocation(Layout.CENTER);
    voiceChatBusyHUDComponent.setIcon(voiceChatIcon);
    mainHUD.addComponent(voiceChatBusyHUDComponent);
    voiceChatBusyHUDComponent.addEventListener(new HUDEventListener(){
      public void HUDObjectChanged(      HUDEvent e){
        if (e.getEventType().equals(HUDEventType.DISAPPEARED)) {
        }
      }
    }
);
    voiceChatBusyHUDComponent.setVisible(true);
    notifyMemberChangeListeners(msg.getGroup(),msg.getCallee(),false);
    return;
  }
  if (message instanceof VoiceChatInfoResponseMessage) {
    VoiceChatInfoResponseMessage msg=(VoiceChatInfoResponseMessage)message;
    notifyMemberChangeListeners(msg.getGroup(),msg.getChatters());
    return;
  }
  if (message instanceof VoiceChatJoinAcceptedMessage) {
    joinVoiceChat((VoiceChatJoinAcceptedMessage)message);
    return;
  }
  if (message instanceof VoiceChatHoldMessage) {
    VoiceChatHoldMessage msg=(VoiceChatHoldMessage)message;
    return;
  }
  if (message instanceof VoiceChatLeaveMessage) {
    leaveVoiceChat((VoiceChatLeaveMessage)message);
    return;
  }
  if (message instanceof VoiceChatCallEndedMessage) {
    VoiceChatCallEndedMessage msg=(VoiceChatCallEndedMessage)message;
    voiceChatCallEnded(msg);
    session.send(this,new VoiceChatLeaveMessage(msg.getGroup(),msg.getCallee()));
    return;
  }
  if (message instanceof ConeOfSilenceEnterExitMessage) {
    coneOfSilenceEnterExit((ConeOfSilenceEnterExitMessage)message);
    return;
  }
  if (message instanceof PlayerInRangeMessage) {
    playerInRange((PlayerInRangeMessage)message);
    return;
  }
  if (message instanceof CallEstablishedMessage) {
    if (callMigrationForm != null) {
      callMigrationForm.setStatus(""String_Node_Str"");
    }
    return;
  }
  if (message instanceof CallMigrateMessage) {
    callMigrate((CallMigrateMessage)message);
    return;
  }
  if (message instanceof CallMutedMessage) {
    callMuted((CallMutedMessage)message);
    return;
  }
  if (message instanceof CallSpeakingMessage) {
    callSpeaking((CallSpeakingMessage)message);
    return;
  }
  if (message instanceof CallEndedMessage) {
    callEnded((CallEndedMessage)message);
    return;
  }
  logger.warning(""String_Node_Str"" + message);
  throw new UnsupportedOperationException(""String_Node_Str"");
}"
45939,"private void setAudioQuality(AudioQuality quality){
  System.out.println(""String_Node_Str"" + quality + ""String_Node_Str""+ audioMenuListener);
  if (audioMenuListener != null) {
    audioMenuListener.setAudioQuality(quality);
  }
}","private void setAudioQuality(AudioQuality quality){
  if (audioMenuListener != null) {
    audioMenuListener.setAudioQuality(quality);
  }
}"
45940,"private void phoneButtonActionPerformed(java.awt.event.ActionEvent evt){
  AddHUDPanel addHUDPanel=new AddHUDPanel(client,session,presenceInfo,presenceInfo);
  addHUDPanel.setPhoneType();
  HUD mainHUD=HUDManagerFactory.getHUDManager().getHUD(""String_Node_Str"");
  addHUDComponent=mainHUD.createComponent(addHUDPanel);
  addHUDComponent.setName(""String_Node_Str"");
  addHUDComponent.setIcon(new ImageIcon(getClass().getResource(""String_Node_Str"")));
  addHUDComponent.setPreferredLocation(Layout.CENTER);
  addHUDPanel.setHUDComponent(addHUDComponent);
  mainHUD.addComponent(addHUDComponent);
  addHUDComponent.addEventListener(new HUDEventListener(){
    public void HUDObjectChanged(    HUDEvent e){
      if (e.getEventType().equals(HUDEventType.DISAPPEARED)) {
      }
    }
  }
);
  PropertyChangeListener plistener=new PropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent pe){
    }
  }
;
  addHUDPanel.addPropertyChangeListener(plistener);
  addHUDComponent.setVisible(true);
}","private void phoneButtonActionPerformed(java.awt.event.ActionEvent evt){
  AddHUDPanel addHUDPanel=new AddHUDPanel(client,session,presenceInfo,presenceInfo,Mode.INITIATE);
  addHUDPanel.setPhoneType();
  HUD mainHUD=HUDManagerFactory.getHUDManager().getHUD(""String_Node_Str"");
  addHUDComponent=mainHUD.createComponent(addHUDPanel);
  addHUDComponent.setName(""String_Node_Str"");
  addHUDComponent.setIcon(new ImageIcon(getClass().getResource(""String_Node_Str"")));
  addHUDComponent.setPreferredLocation(Layout.CENTER);
  addHUDPanel.setHUDComponent(addHUDComponent);
  mainHUD.addComponent(addHUDComponent);
  addHUDComponent.addEventListener(new HUDEventListener(){
    public void HUDObjectChanged(    HUDEvent e){
      if (e.getEventType().equals(HUDEventType.DISAPPEARED)) {
      }
    }
  }
);
  PropertyChangeListener plistener=new PropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent pe){
    }
  }
;
  addHUDPanel.addPropertyChangeListener(plistener);
  addHUDComponent.setVisible(true);
}"
45941,"private void voiceChatButtonActionPerformed(java.awt.event.ActionEvent evt){
  ArrayList<PresenceInfo> usersToInvite=new ArrayList();
  Object[] selectedValues=userList.getSelectedValues();
  if (selectedValues.length > 0) {
    for (int i=0; i < selectedValues.length; i++) {
      String username=NameTagNode.getUsername((String)selectedValues[i]);
      PresenceInfo info=pm.getAliasPresenceInfo(username);
      if (info == null) {
        System.out.println(""String_Node_Str"" + username);
        continue;
      }
      if (info.equals(presenceInfo)) {
        continue;
      }
      usersToInvite.add(info);
    }
  }
  AddHUDPanel addHUDPanel=new AddHUDPanel(client,session,presenceInfo,presenceInfo);
  addHUDPanel.inviteUsers(usersToInvite);
  HUD mainHUD=HUDManagerFactory.getHUDManager().getHUD(""String_Node_Str"");
  final HUDComponent addHUDComponent=mainHUD.createComponent(addHUDPanel);
  addHUDPanel.setHUDComponent(addHUDComponent);
  addHUDComponent.setName(""String_Node_Str"");
  addHUDComponent.setIcon(new ImageIcon(getClass().getResource(""String_Node_Str"")));
  mainHUD.addComponent(addHUDComponent);
  addHUDComponent.addEventListener(new HUDEventListener(){
    public void HUDObjectChanged(    HUDEvent e){
      if (e.getEventType().equals(HUDEventType.DISAPPEARED)) {
      }
    }
  }
);
  PropertyChangeListener plistener=new PropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent pe){
      if (pe.getPropertyName().equals(""String_Node_Str"") || pe.getPropertyName().equals(""String_Node_Str"")) {
        addHUDComponent.setVisible(false);
      }
    }
  }
;
  addHUDPanel.addPropertyChangeListener(plistener);
  addHUDComponent.setPreferredLocation(Layout.CENTER);
  addHUDComponent.setVisible(true);
  addHUDPanel.setLocation(userListHUDComponent.getX() + userListHUDComponent.getWidth(),userListHUDComponent.getY() + userListHUDComponent.getHeight() - addHUDComponent.getHeight());
}","private void voiceChatButtonActionPerformed(java.awt.event.ActionEvent evt){
  ArrayList<PresenceInfo> usersToInvite=new ArrayList();
  Object[] selectedValues=userList.getSelectedValues();
  if (selectedValues.length > 0) {
    for (int i=0; i < selectedValues.length; i++) {
      String username=NameTagNode.getUsername((String)selectedValues[i]);
      PresenceInfo info=pm.getAliasPresenceInfo(username);
      if (info == null) {
        logger.warning(""String_Node_Str"" + username);
        continue;
      }
      if (info.equals(presenceInfo)) {
        continue;
      }
      usersToInvite.add(info);
    }
  }
  AddHUDPanel addHUDPanel=new AddHUDPanel(client,session,presenceInfo,presenceInfo,Mode.IN_PROGRESS);
  addHUDPanel.inviteUsers(usersToInvite);
  HUD mainHUD=HUDManagerFactory.getHUDManager().getHUD(""String_Node_Str"");
  final HUDComponent addHUDComponent=mainHUD.createComponent(addHUDPanel);
  addHUDPanel.setHUDComponent(addHUDComponent);
  addHUDComponent.setName(""String_Node_Str"");
  addHUDComponent.setIcon(new ImageIcon(getClass().getResource(""String_Node_Str"")));
  mainHUD.addComponent(addHUDComponent);
  addHUDComponent.addEventListener(new HUDEventListener(){
    public void HUDObjectChanged(    HUDEvent e){
      if (e.getEventType().equals(HUDEventType.DISAPPEARED)) {
      }
    }
  }
);
  PropertyChangeListener plistener=new PropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent pe){
      if (pe.getPropertyName().equals(""String_Node_Str"") || pe.getPropertyName().equals(""String_Node_Str"")) {
        addHUDComponent.setVisible(false);
      }
    }
  }
;
  addHUDPanel.addPropertyChangeListener(plistener);
  addHUDComponent.setPreferredLocation(Layout.CENTER);
  addHUDComponent.setVisible(true);
  addHUDPanel.setLocation(userListHUDComponent.getX() + userListHUDComponent.getWidth(),userListHUDComponent.getY() + userListHUDComponent.getHeight() - addHUDComponent.getHeight());
}"
45942,"private void volumeSliderStateChanged(javax.swing.event.ChangeEvent evt){
  javax.swing.JSlider source=(javax.swing.JSlider)evt.getSource();
  int volume=source.getValue();
  Object[] selectedValues=userList.getSelectedValues();
  if (selectedValues.length > 0) {
    for (int i=0; i < selectedValues.length; i++) {
      String username=NameTagNode.getUsername((String)selectedValues[i]);
      PresenceInfo info=pm.getAliasPresenceInfo(username);
      if (info == null) {
        logger.warning(""String_Node_Str"" + username);
        System.out.println(""String_Node_Str"" + username);
        continue;
      }
      logger.info(""String_Node_Str"" + username + ""String_Node_Str""+ volume);
      PresenceInfo pi=info;
      volumeChanged(pi.cellID,pi.callID,volume);
      volumeChangeMap.put(pi,new Integer(volume));
    }
  }
}","private void volumeSliderStateChanged(javax.swing.event.ChangeEvent evt){
  javax.swing.JSlider source=(javax.swing.JSlider)evt.getSource();
  int volume=source.getValue();
  Object[] selectedValues=userList.getSelectedValues();
  if (selectedValues.length > 0) {
    for (int i=0; i < selectedValues.length; i++) {
      String username=NameTagNode.getUsername((String)selectedValues[i]);
      PresenceInfo info=pm.getAliasPresenceInfo(username);
      if (info == null) {
        logger.warning(""String_Node_Str"" + username);
        continue;
      }
      logger.info(""String_Node_Str"" + username + ""String_Node_Str""+ volume);
      PresenceInfo pi=info;
      volumeChanged(pi.cellID,pi.callID,volume);
      volumeChangeMap.put(pi,new Integer(volume));
    }
  }
}"
45943,"private void showAddUserPanel(boolean showPanel,boolean showPrivacy){
  if (addPhoneUserPanel != null) {
    addPhoneUserPanel.setVisible(false);
  }
  if (addUserPanel == null) {
    addUserPanel=new AddUserPanel(client,session,myPresenceInfo,caller,group,Mode.ADD);
    addUserPanel.addUserListSelectionListener(new javax.swing.event.ListSelectionListener(){
      public void valueChanged(      javax.swing.event.ListSelectionEvent e){
        addUserListValueChanged(e);
      }
    }
);
  }
  addUserPanel.setVisible(showPanel,mode);
  if (showPanel) {
    add(addUserPanel,BorderLayout.CENTER);
  }
  addUserPanel.showPrivacyPanel(showPrivacy);
}","private void showAddUserPanel(boolean showPanel,boolean showPrivacy){
  if (addPhoneUserPanel != null) {
    addPhoneUserPanel.setVisible(false);
  }
  if (addUserPanel == null) {
    addUserPanel=new AddUserPanel(this,client,session,myPresenceInfo,caller,group);
    addUserPanel.addUserListSelectionListener(new javax.swing.event.ListSelectionListener(){
      public void valueChanged(      javax.swing.event.ListSelectionEvent e){
        addUserListValueChanged(e);
      }
    }
);
  }
  addUserPanel.setVisible(showPanel);
  if (showPanel) {
    add(addUserPanel,BorderLayout.CENTER);
  }
  addUserPanel.showPrivacyPanel(showPrivacy);
}"
45944,"@Override public String importFile(File file,String extension){
  final JFrame frame=JmeClientMain.getFrame().getFrame();
  if (isContentExists(file) == true) {
    int result=JOptionPane.showConfirmDialog(frame,""String_Node_Str"" + file.getName() + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"",""String_Node_Str"",JOptionPane.YES_NO_OPTION);
    if (result == JOptionPane.NO_OPTION) {
      return null;
    }
  }
  JOptionPane waitMsg=new JOptionPane(""String_Node_Str"" + file.getName() + ""String_Node_Str"");
  final JDialog dialog=waitMsg.createDialog(frame,""String_Node_Str"");
  SwingUtilities.invokeLater(new Runnable(){
    public void run(){
      dialog.setVisible(true);
    }
  }
);
  DeployedModel deployedModel;
  try {
    deployedModel=modelUploadContent(file);
  }
 catch (  java.io.IOException excp) {
    logger.log(Level.WARNING,""String_Node_Str"" + file.getAbsolutePath(),excp);
    final String fileName=file.getName();
    SwingUtilities.invokeLater(new Runnable(){
      public void run(){
        dialog.setVisible(false);
        JOptionPane.showMessageDialog(frame,""String_Node_Str"" + fileName,""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
      }
    }
);
    return null;
  }
  SwingUtilities.invokeLater(new Runnable(){
    public void run(){
      dialog.setVisible(false);
    }
  }
);
  createCell(deployedModel);
  return deployedModel.getDeployedURL();
}","@Override public String importFile(File file,String extension){
  final JFrame frame=JmeClientMain.getFrame().getFrame();
  int result=JOptionPane.YES_OPTION;
  ContentResource resource=isContentExists(file);
  if (resource != null) {
    Object[] options={""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
    String msg=""String_Node_Str"" + file.getName() + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
    String title=""String_Node_Str"";
    result=JOptionPane.showOptionDialog(frame,msg,title,JOptionPane.YES_NO_CANCEL_OPTION,JOptionPane.QUESTION_MESSAGE,null,options,options[0]);
    if (result == JOptionPane.CANCEL_OPTION || result == JOptionPane.CLOSED_OPTION) {
      return null;
    }
  }
  if (result == JOptionPane.NO_OPTION) {
    URL url=null;
    try {
      url=resource.getURL();
      LoaderManager manager=LoaderManager.getLoaderManager();
      DeployedModel dm=manager.getLoaderFromDeployment(url);
      createCell(dm);
      return dm.getDeployedURL();
    }
 catch (    java.lang.Exception excp) {
      logger.log(Level.WARNING,""String_Node_Str"" + url,excp);
      JOptionPane.showMessageDialog(frame,""String_Node_Str"" + file.getAbsolutePath(),""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
      return null;
    }
  }
  JOptionPane waitMsg=new JOptionPane(""String_Node_Str"" + file.getName() + ""String_Node_Str"");
  final JDialog dialog=waitMsg.createDialog(frame,""String_Node_Str"");
  SwingUtilities.invokeLater(new Runnable(){
    public void run(){
      dialog.setVisible(true);
    }
  }
);
  DeployedModel deployedModel;
  try {
    deployedModel=modelUploadContent(file);
  }
 catch (  java.io.IOException excp) {
    logger.log(Level.WARNING,""String_Node_Str"" + file.getAbsolutePath(),excp);
    final String fileName=file.getName();
    SwingUtilities.invokeLater(new Runnable(){
      public void run(){
        dialog.setVisible(false);
        JOptionPane.showMessageDialog(frame,""String_Node_Str"" + fileName,""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
      }
    }
);
    return null;
  }
 finally {
    SwingUtilities.invokeLater(new Runnable(){
      public void run(){
        dialog.setVisible(false);
      }
    }
);
  }
  createCell(deployedModel);
  return deployedModel.getDeployedURL();
}"
45945,"/** 
 */
public boolean isContentExists(File file){
  String fileName=file.getName();
  ContentCollection userRoot=getUserRoot();
  try {
    boolean exists=(userRoot.getChild(fileName) != null);
    return exists;
  }
 catch (  ContentRepositoryException excp) {
    logger.log(Level.WARNING,""String_Node_Str"" + fileName + ""String_Node_Str"",excp);
    return false;
  }
}","/** 
 * Check to see if the model already exists on the server. If so, return the ContentResource of the model's .dep file, or null otherwise.
 */
private ContentResource isContentExists(File file){
  String fileName=""String_Node_Str"" + file.getName() + ""String_Node_Str""+ file.getName()+ ""String_Node_Str"";
  ContentCollection userRoot=getUserRoot();
  try {
    ContentNode node=userRoot.getChild(fileName);
    if (node != null && node instanceof ContentResource) {
      return (ContentResource)node;
    }
    return null;
  }
 catch (  ContentRepositoryException excp) {
    logger.log(Level.WARNING,""String_Node_Str"" + fileName + ""String_Node_Str"",excp);
    return null;
  }
}"
45946,"private void copyFiles(File f,ContentCollection n) throws ContentRepositoryException, IOException {
  if (f.isDirectory()) {
    ContentCollection dir=(ContentCollection)((ContentCollection)n).getChild(f.getName());
    if (dir == null) {
      dir=(ContentCollection)n.createChild(f.getName(),Type.COLLECTION);
    }
    File[] subdirs=f.listFiles();
    if (subdirs != null) {
      for (      File child : subdirs)       copyFiles(child,dir);
    }
  }
 else {
    ContentResource r=(ContentResource)n.createChild(f.getName(),Type.RESOURCE);
    r.put(f);
  }
}","/** 
 * Copies all files recursively from a local File to a remote content collection, creating all of the necessary files and directories.
 */
private void copyFiles(File f,ContentCollection n) throws ContentRepositoryException, IOException {
  String fName=f.getName();
  if (f.isDirectory() == true) {
    ContentNode node=n.getChild(fName);
    if (node == null) {
      node=n.createChild(fName,Type.COLLECTION);
    }
 else     if (!(node instanceof ContentCollection)) {
      node.getParent().removeChild(node.getName());
      node=n.createChild(fName,Type.COLLECTION);
    }
    ContentCollection dir=(ContentCollection)node;
    File[] subdirs=f.listFiles();
    if (subdirs != null) {
      for (      File child : subdirs) {
        copyFiles(child,dir);
      }
    }
  }
 else {
    ContentNode node=n.getChild(fName);
    if (node == null) {
      node=n.createChild(fName,Type.RESOURCE);
    }
 else     if (!(node instanceof ContentResource)) {
      node.getParent().removeChild(node.getName());
      node=n.createChild(fName,Type.RESOURCE);
    }
    ContentResource resource=(ContentResource)node;
    resource.put(f);
  }
}"
45947,"/** 
 * Set the transform for this cell. Users should not call this method directly, rather MovableComponent should be used, which will keep the client and server in sync.
 * @param localTransform
 */
void setLocalTransform(CellTransform localTransform,TransformChangeListener.ChangeSource source){
  if (this.localTransform != null && this.localTransform.equals(localTransform)) {
    return;
  }
  if (localTransform == null) {
    this.localTransform=null;
    Cell current=getParent();
    while (current != null) {
      CellTransform parentWorldTransform=current.getWorldTransform();
      if (parentWorldTransform != null) {
        setWorldTransform(parentWorldTransform,source);
        current=null;
      }
 else {
        current=current.getParent();
      }
    }
  }
 else {
    this.localTransform=(CellTransform)localTransform.clone(null);
    if (parent != null) {
      worldTransform=(CellTransform)localTransform.clone(null);
      worldTransform=worldTransform.mul(parent.getWorldTransform());
      cachedVWBounds=localBounds.clone(cachedVWBounds);
      worldTransform.transform(cachedVWBounds);
      local2VW=null;
    }
 else     if (parent == null) {
      worldTransform=(CellTransform)localTransform.clone(null);
      local2VW=null;
      cachedVWBounds=localBounds.clone(cachedVWBounds);
      worldTransform.transform(cachedVWBounds);
    }
    notifyTransformChangeListeners(source);
  }
  if (cachedVWBounds == null) {
    logger.warning(""String_Node_Str"" + getName() + ""String_Node_Str""+ localBounds+ ""String_Node_Str""+ localTransform);
    Thread.dumpStack();
  }
  for (  Cell child : getChildren()) {
    transformTreeUpdate(this,child,source);
  }
  for (  CellRenderer rend : cellRenderers.values()) {
    rend.cellTransformUpdate(localTransform);
  }
}","/** 
 * Set the transform for this cell. Users should not call this method directly, rather MovableComponent should be used, which will keep the client and server in sync.
 * @param localTransform
 */
void setLocalTransform(CellTransform localTransform,TransformChangeListener.ChangeSource source){
  if (this.localTransform != null && this.localTransform.equals(localTransform)) {
    return;
  }
  if (localTransform == null) {
    this.localTransform=null;
    Cell current=getParent();
    while (current != null) {
      CellTransform parentWorldTransform=current.getWorldTransform();
      if (parentWorldTransform != null) {
        setWorldTransform(parentWorldTransform,source);
        current=null;
      }
 else {
        current=current.getParent();
      }
    }
  }
 else {
    this.localTransform=(CellTransform)localTransform.clone(null);
    if (parent != null) {
      worldTransform=(CellTransform)localTransform.clone(null);
      worldTransform=parent.getWorldTransform().mul(worldTransform);
      cachedVWBounds=localBounds.clone(cachedVWBounds);
      worldTransform.transform(cachedVWBounds);
      local2VW=null;
    }
 else     if (parent == null) {
      worldTransform=(CellTransform)localTransform.clone(null);
      local2VW=null;
      cachedVWBounds=localBounds.clone(cachedVWBounds);
      worldTransform.transform(cachedVWBounds);
    }
    notifyTransformChangeListeners(source);
  }
  if (cachedVWBounds == null) {
    logger.warning(""String_Node_Str"" + getName() + ""String_Node_Str""+ localBounds+ ""String_Node_Str""+ localTransform);
    Thread.dumpStack();
  }
  for (  Cell child : getChildren()) {
    transformTreeUpdate(this,child,source);
  }
  for (  CellRenderer rend : cellRenderers.values()) {
    rend.cellTransformUpdate(localTransform);
  }
}"
45948,"private void okButtonActionPerformed(java.awt.event.ActionEvent evt){
  PresenceInfo[] info=pm.getAllUsers();
  String alias=usernameAliasTextField.getText();
  for (int i=0; i < info.length; i++) {
    if (info[i].usernameAlias.equals(alias) || info[i].userID.getUsername().equals(alias)) {
      if (presenceInfo.usernameAlias.equals(alias) == false) {
        statusLabel.setText(""String_Node_Str"");
        return;
      }
    }
  }
  statusLabel.setText(""String_Node_Str"");
  presenceInfo.usernameAlias=usernameAliasTextField.getText();
  pm.changeUsernameAlias(presenceInfo);
  listener.changeUsernameAlias(presenceInfo);
  listeners.firePropertyChange(""String_Node_Str"",new String(""String_Node_Str""),null);
}","private void okButtonActionPerformed(java.awt.event.ActionEvent evt){
  PresenceInfo[] info=pm.getAllUsers();
  String alias=usernameAliasTextField.getText();
  for (int i=0; i < info.length; i++) {
    if (info[i].usernameAlias.equals(alias) || info[i].userID.getUsername().equals(alias)) {
      if (presenceInfo.equals(info[i]) == false) {
        statusLabel.setText(""String_Node_Str"");
        return;
      }
    }
  }
  statusLabel.setText(""String_Node_Str"");
  presenceInfo.usernameAlias=usernameAliasTextField.getText();
  pm.changeUsernameAlias(presenceInfo);
  listener.changeUsernameAlias(presenceInfo);
  listeners.firePropertyChange(""String_Node_Str"",new String(""String_Node_Str""),null);
}"
45949,"private void receive(CellMessage message){
  if (message instanceof AudioTreatmentMenuChangeMessage == false) {
    return;
  }
  addMenuItems(((AudioTreatmentMenuChangeMessage)message).getMenuItems());
}","private void receive(CellMessage message){
  if (message instanceof AudioTreatmentMenuChangeMessage) {
    addMenuItems(((AudioTreatmentMenuChangeMessage)message).getMenuItems());
    return;
  }
  if (message instanceof AudioVolumeMessage) {
    logger.fine(""String_Node_Str"" + ((AudioVolumeMessage)message).getVolume());
    new VolumeControlJFrame(cell.getCellID(),this,""String_Node_Str"",CallID.getCallID(cell.getCellID()),VolumeUtil.getClientVolume(((AudioVolumeMessage)message).getVolume()));
    return;
  }
}"
45950,"public void menuItemSelected(ContextMenuItemEvent event){
  if (event.getContextMenuItem().getLabel().equals(""String_Node_Str"") || event.getContextMenuItem().getLabel().equals(""String_Node_Str"")) {
    addMenuItems(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
    channelComp.send(new AudioTreatmentRequestMessage(cell.getCellID(),false,false));
    return;
  }
  if (event.getContextMenuItem().getLabel().equals(""String_Node_Str"")) {
    addMenuItems(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
    channelComp.send(new AudioTreatmentRequestMessage(cell.getCellID(),false,true));
    return;
  }
  if (event.getContextMenuItem().getLabel().equals(""String_Node_Str"")) {
    new VolumeControlJFrame(cell.getCellID(),this,""String_Node_Str"",CallID.getCallID(cell.getCellID()));
    return;
  }
  if (event.getContextMenuItem().getLabel().equals(""String_Node_Str"") == false) {
    return;
  }
  addMenuItems(new String[]{""String_Node_Str"",""String_Node_Str""});
  channelComp.send(new AudioTreatmentRequestMessage(cell.getCellID(),true,true));
}","public void menuItemSelected(ContextMenuItemEvent event){
  if (event.getContextMenuItem().getLabel().equals(""String_Node_Str"") || event.getContextMenuItem().getLabel().equals(""String_Node_Str"")) {
    addMenuItems(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
    channelComp.send(new AudioTreatmentRequestMessage(cell.getCellID(),false,false));
    return;
  }
  if (event.getContextMenuItem().getLabel().equals(""String_Node_Str"")) {
    addMenuItems(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
    channelComp.send(new AudioTreatmentRequestMessage(cell.getCellID(),false,true));
    return;
  }
  if (event.getContextMenuItem().getLabel().equals(""String_Node_Str"")) {
    String softphoneCallID=SoftphoneControlImpl.getInstance().getCallID();
    channelComp.send(new AudioVolumeMessage(cell.getCellID(),softphoneCallID,CallID.getCallID(cell.getCellID()),5,false));
    return;
  }
  if (event.getContextMenuItem().getLabel().equals(""String_Node_Str"") == false) {
    return;
  }
  addMenuItems(new String[]{""String_Node_Str"",""String_Node_Str""});
  channelComp.send(new AudioTreatmentRequestMessage(cell.getCellID(),true,true));
}"
45951,"@Override protected void setStatus(CellStatus status,boolean increasing){
  super.setStatus(status,increasing);
switch (status) {
case DISK:
    if (msgReceiver != null) {
      channelComp.removeMessageReceiver(AudioTreatmentRequestMessage.class);
      channelComp.removeMessageReceiver(AudioTreatmentMenuChangeMessage.class);
      msgReceiver=null;
    }
  break;
case ACTIVE:
if (increasing) {
  if (msgReceiver == null) {
    msgReceiver=new ChannelComponent.ComponentMessageReceiver(){
      public void messageReceived(      CellMessage message){
        receive(message);
      }
    }
;
    channelComp=cell.getComponent(ChannelComponent.class);
    channelComp.addMessageReceiver(AudioTreatmentRequestMessage.class,msgReceiver);
    channelComp.addMessageReceiver(AudioTreatmentMenuChangeMessage.class,msgReceiver);
  }
  if (menuItemAdded == false) {
    menuItemAdded=true;
    if (playWhen.equals(PlayWhen.ALWAYS)) {
      addMenuItems(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
      ;
    }
 else {
      addMenuItems(new String[]{""String_Node_Str"",""String_Node_Str""});
    }
  }
}
break;
}
}","@Override protected void setStatus(CellStatus status,boolean increasing){
  super.setStatus(status,increasing);
switch (status) {
case DISK:
    if (msgReceiver != null) {
      channelComp.removeMessageReceiver(AudioTreatmentRequestMessage.class);
      channelComp.removeMessageReceiver(AudioTreatmentMenuChangeMessage.class);
      channelComp.removeMessageReceiver(AudioVolumeMessage.class);
      msgReceiver=null;
    }
  break;
case ACTIVE:
if (increasing) {
  if (msgReceiver == null) {
    msgReceiver=new ChannelComponent.ComponentMessageReceiver(){
      public void messageReceived(      CellMessage message){
        receive(message);
      }
    }
;
    channelComp=cell.getComponent(ChannelComponent.class);
    channelComp.addMessageReceiver(AudioTreatmentRequestMessage.class,msgReceiver);
    channelComp.addMessageReceiver(AudioTreatmentMenuChangeMessage.class,msgReceiver);
    channelComp.addMessageReceiver(AudioVolumeMessage.class,msgReceiver);
  }
  if (menuItemAdded == false) {
    menuItemAdded=true;
    if (playWhen.equals(PlayWhen.ALWAYS)) {
      addMenuItems(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
      ;
    }
 else {
      addMenuItems(new String[]{""String_Node_Str"",""String_Node_Str""});
    }
  }
}
break;
}
}"
45952,"public void volumeChanged(CellID CellID,String otherCallID,int volume){
  channelComp.send(new AudioVolumeMessage(cell.getCellID(),CallID.getCallID(cell.getCellID()),otherCallID,VolumeUtil.getServerVolume(volume)));
}","public void volumeChanged(CellID cellID,String otherCallID,int volume){
  logger.fine(""String_Node_Str"" + volume);
  String softphoneCallID=SoftphoneControlImpl.getInstance().getCallID();
  channelComp.send(new AudioVolumeMessage(cellID,softphoneCallID,otherCallID,VolumeUtil.getServerVolume(volume),true));
}"
45953,"public void volumeChanged(CellID cellID,String otherCallID,int volume){
  SoftphoneControlImpl sc=SoftphoneControlImpl.getInstance();
  session.send(client,new AudioVolumeMessage(cellID,sc.getCallID(),otherCallID,VolumeUtil.getServerVolume(volume)));
}","public void volumeChanged(CellID cellID,String otherCallID,int volume){
  SoftphoneControlImpl sc=SoftphoneControlImpl.getInstance();
  session.send(client,new AudioVolumeMessage(cellID,sc.getCallID(),otherCallID,VolumeUtil.getServerVolume(volume),true));
}"
45954,"public VolumeControlJFrame(CellID cellID,VolumeChangeListener listener,String name,String otherCallID){
  this.cellID=cellID;
  this.listener=listener;
  this.otherCallID=otherCallID;
  initComponents();
  setTitle(name);
}","public VolumeControlJFrame(CellID cellID,VolumeChangeListener listener,String name,String otherCallID,int volume){
  this.cellID=cellID;
  this.listener=listener;
  this.otherCallID=otherCallID;
  initComponents();
  volumeControlSlider.setValue(volume);
  setTitle(name);
  setVisible(true);
}"
45955,"public AudioVolumeMessage(CellID cellID,String softphoneCallID,String otherCallID,double volume){
  super(cellID);
  this.softphoneCallID=softphoneCallID;
  this.otherCallID=otherCallID;
  this.volume=volume;
}","public AudioVolumeMessage(CellID cellID,String softphoneCallID,String otherCallID,double volume,boolean isSetVolume){
  super(cellID);
  this.softphoneCallID=softphoneCallID;
  this.otherCallID=otherCallID;
  this.volume=volume;
  this.isSetVolume=isSetVolume;
}"
45956,"public void messageReceived(WonderlandClientSender sender,WonderlandClientID clientID,Message message){
  VoiceManager vm=AppContext.getManager(VoiceManager.class);
  if (message instanceof GetVoiceBridgeRequestMessage) {
    BridgeInfo bridgeInfo;
    try {
      bridgeInfo=vm.getVoiceBridge();
      System.out.println(""String_Node_Str"" + bridgeInfo + ""String_Node_Str"");
    }
 catch (    IOException e) {
      System.out.println(""String_Node_Str"" + e.getMessage());
      return;
    }
    sender.send(clientID,new GetVoiceBridgeResponseMessage(bridgeInfo.toString()));
    return;
  }
  if (message instanceof PlaceCallRequestMessage) {
    logger.fine(""String_Node_Str"" + clientID);
    placeCall(clientID,(PlaceCallRequestMessage)message);
    return;
  }
  if (message instanceof EndCallMessage) {
    EndCallMessage msg=(EndCallMessage)message;
    String callID=msg.getCallID();
    Call call=vm.getCall(callID);
    if (call == null) {
      logger.fine(""String_Node_Str"" + callID);
      return;
    }
    try {
      vm.endCall(call,true);
    }
 catch (    IOException e) {
      logger.warning(""String_Node_Str"" + call + ""String_Node_Str""+ e.getMessage());
    }
    sender.send(new CallEndedMessage(msg.getCallID(),msg.getReason()));
    return;
  }
  if (message instanceof MuteCallRequestMessage) {
    MuteCallRequestMessage msg=(MuteCallRequestMessage)message;
    String callID=msg.getCallID();
    Call call=vm.getCall(callID);
    if (call == null) {
      logger.fine(""String_Node_Str"" + callID);
      return;
    }
    try {
      call.mute(msg.isMuted());
    }
 catch (    IOException e) {
      logger.warning(""String_Node_Str"" + callID + ""String_Node_Str""+ e.getMessage());
      return;
    }
    return;
  }
  if (message instanceof TransferCallRequestMessage) {
    TransferCallRequestMessage msg=(TransferCallRequestMessage)message;
    String callID=msg.getPresenceInfo().callID;
    Call call=vm.getCall(callID);
    if (call == null) {
      if (msg.getCancel() == true) {
        return;
      }
      double x=0;
      double y=0;
      double z=0;
      double orientation=0;
      Player player=vm.getPlayer(callID);
      if (player != null) {
        x=-player.getX();
        y=player.getY();
        z=player.getZ();
        orientation=player.getOrientation();
      }
      placeCall(clientID,new PlaceCallRequestMessage(msg.getPresenceInfo(),msg.getPhoneNumber(),x,y,z,orientation,true));
      return;
    }
    CallParticipant cp=call.getSetup().cp;
    if (msg.getCancel() == true) {
      try {
        call.transfer(cp,true);
      }
 catch (      IOException e) {
        logger.warning(""String_Node_Str"" + e.getMessage());
      }
      return;
    }
    if (msg.getPhoneNumber().equals(cp.getPhoneNumber())) {
      sender.send(clientID,new CallMigrateMessage(msg.getPresenceInfo().callID,true));
      return;
    }
    cp.setPhoneNumber(msg.getPhoneNumber());
    setJoinConfirmation(cp);
    try {
      call.transfer(cp,false);
    }
 catch (    IOException e) {
      logger.warning(""String_Node_Str"" + e.getMessage());
    }
    return;
  }
  if (message instanceof AudioVolumeMessage) {
    changeAudioVolume((AudioVolumeMessage)message);
    return;
  }
  if (message instanceof ChangeUsernameAliasMessage) {
    sender.send(message);
    return;
  }
  if (message instanceof VoiceChatMessage) {
    VoiceChatHandler.getInstance().processVoiceChatMessage(sender,clientID,(VoiceChatMessage)message);
    return;
  }
  if (message instanceof PlayTreatmentRequestMessage) {
    PlayTreatmentRequestMessage msg=(PlayTreatmentRequestMessage)message;
    Call call=vm.getCall(msg.getCallID());
    if (call == null) {
      logger.warning(""String_Node_Str"" + msg.getCallID());
      return;
    }
    try {
      call.playTreatment(msg.getTreatment());
    }
 catch (    IOException e) {
      logger.warning(""String_Node_Str"" + msg.getTreatment() + ""String_Node_Str""+ call+ ""String_Node_Str""+ e.getMessage());
    }
    return;
  }
  throw new UnsupportedOperationException(""String_Node_Str"" + message);
}","public void messageReceived(WonderlandClientSender sender,WonderlandClientID clientID,Message message){
  VoiceManager vm=AppContext.getManager(VoiceManager.class);
  if (message instanceof GetVoiceBridgeRequestMessage) {
    BridgeInfo bridgeInfo;
    try {
      bridgeInfo=vm.getVoiceBridge();
      System.out.println(""String_Node_Str"" + bridgeInfo + ""String_Node_Str"");
    }
 catch (    IOException e) {
      System.out.println(""String_Node_Str"" + e.getMessage());
      return;
    }
    sender.send(clientID,new GetVoiceBridgeResponseMessage(bridgeInfo.toString()));
    return;
  }
  if (message instanceof PlaceCallRequestMessage) {
    logger.fine(""String_Node_Str"" + clientID);
    placeCall(clientID,(PlaceCallRequestMessage)message);
    return;
  }
  if (message instanceof EndCallMessage) {
    EndCallMessage msg=(EndCallMessage)message;
    String callID=msg.getCallID();
    Call call=vm.getCall(callID);
    if (call == null) {
      logger.fine(""String_Node_Str"" + callID);
      return;
    }
    try {
      vm.endCall(call,true);
    }
 catch (    IOException e) {
      logger.warning(""String_Node_Str"" + call + ""String_Node_Str""+ e.getMessage());
    }
    sender.send(new CallEndedMessage(msg.getCallID(),msg.getReason()));
    return;
  }
  if (message instanceof MuteCallRequestMessage) {
    MuteCallRequestMessage msg=(MuteCallRequestMessage)message;
    String callID=msg.getCallID();
    Call call=vm.getCall(callID);
    if (call == null) {
      logger.fine(""String_Node_Str"" + callID);
      return;
    }
    try {
      call.mute(msg.isMuted());
    }
 catch (    IOException e) {
      logger.warning(""String_Node_Str"" + callID + ""String_Node_Str""+ e.getMessage());
      return;
    }
    return;
  }
  if (message instanceof TransferCallRequestMessage) {
    TransferCallRequestMessage msg=(TransferCallRequestMessage)message;
    String callID=msg.getPresenceInfo().callID;
    Call call=vm.getCall(callID);
    if (call == null) {
      if (msg.getCancel() == true) {
        return;
      }
      double x=0;
      double y=0;
      double z=0;
      double orientation=0;
      Player player=vm.getPlayer(callID);
      if (player != null) {
        x=-player.getX();
        y=player.getY();
        z=player.getZ();
        orientation=player.getOrientation();
      }
      placeCall(clientID,new PlaceCallRequestMessage(msg.getPresenceInfo(),msg.getPhoneNumber(),x,y,z,orientation,true));
      return;
    }
    CallParticipant cp=call.getSetup().cp;
    if (msg.getCancel() == true) {
      try {
        call.transfer(cp,true);
      }
 catch (      IOException e) {
        logger.warning(""String_Node_Str"" + e.getMessage());
      }
      return;
    }
    if (msg.getPhoneNumber().equals(cp.getPhoneNumber())) {
      sender.send(clientID,new CallMigrateMessage(msg.getPresenceInfo().callID,true));
      return;
    }
    cp.setPhoneNumber(msg.getPhoneNumber());
    setJoinConfirmation(cp);
    try {
      call.transfer(cp,false);
    }
 catch (    IOException e) {
      logger.warning(""String_Node_Str"" + e.getMessage());
    }
    return;
  }
  if (message instanceof AudioVolumeMessage) {
    handleAudioVolume(sender,clientID,(AudioVolumeMessage)message);
    return;
  }
  if (message instanceof ChangeUsernameAliasMessage) {
    sender.send(message);
    return;
  }
  if (message instanceof VoiceChatMessage) {
    VoiceChatHandler.getInstance().processVoiceChatMessage(sender,clientID,(VoiceChatMessage)message);
    return;
  }
  if (message instanceof PlayTreatmentRequestMessage) {
    PlayTreatmentRequestMessage msg=(PlayTreatmentRequestMessage)message;
    Call call=vm.getCall(msg.getCallID());
    if (call == null) {
      logger.warning(""String_Node_Str"" + msg.getCallID());
      return;
    }
    try {
      call.playTreatment(msg.getTreatment());
    }
 catch (    IOException e) {
      logger.warning(""String_Node_Str"" + msg.getTreatment() + ""String_Node_Str""+ call+ ""String_Node_Str""+ e.getMessage());
    }
    return;
  }
  throw new UnsupportedOperationException(""String_Node_Str"" + message);
}"
45957,"private void addProximityListener(Treatment treatment){
  ProximityComponentMO component=cellRef.get().getComponent(ProximityComponentMO.class);
  if (component == null) {
    logger.warning(""String_Node_Str"" + ""String_Node_Str"" + cellRef.get().getCellID());
    return;
  }
  BoundingVolume[] bounds=new BoundingVolume[1];
  float cellRadius=getCellRadius();
  bounds[0]=new BoundingSphere(cellRadius,new Vector3f());
  AudioTreatmentProximityListener proximityListener=new AudioTreatmentProximityListener(cellRef.get(),treatment);
  component.addProximityListener(proximityListener,bounds);
}","private void addProximityListener(Treatment treatment){
  ProximityComponentMO component=cellRef.get().getComponent(ProximityComponentMO.class);
  if (component == null) {
    logger.warning(""String_Node_Str"" + ""String_Node_Str"" + cellRef.get().getCellID());
    return;
  }
  BoundingVolume[] bounds=new BoundingVolume[1];
  bounds[0]=new BoundingSphere((float)extent,new Vector3f());
  AudioTreatmentProximityListener proximityListener=new AudioTreatmentProximityListener(cellRef.get(),treatment);
  component.addProximityListener(proximityListener,bounds);
}"
45958,"public void messageReceived(WonderlandClientSender sender,WonderlandClientID clientID,CellMessage message){
  if (message instanceof AudioTreatmentRequestMessage) {
    AudioTreatmentRequestMessage msg=(AudioTreatmentRequestMessage)message;
    logger.fine(""String_Node_Str"" + msg.restartTreatment());
    String treatmentId=CallID.getCallID(cellID);
    Treatment treatment=null;
    try {
      treatment=AppContext.getManager(VoiceManager.class).getTreatment(treatmentId);
    }
 catch (    IOException e) {
    }
    if (treatment == null) {
      System.out.println(""String_Node_Str"" + treatmentId);
      return;
    }
    logger.fine(""String_Node_Str"" + msg.restartTreatment() + ""String_Node_Str""+ msg.isPaused());
    if (msg.restartTreatment()) {
      treatment.restart(msg.isPaused());
    }
 else {
      treatment.pause(msg.isPaused());
    }
    return;
  }
  if (message instanceof AudioVolumeMessage) {
    changeAudioVolume((AudioVolumeMessage)message);
    return;
  }
  if (message instanceof AudioVolumeMessage) {
    sender.send(message);
    return;
  }
  logger.warning(""String_Node_Str"" + message);
}","public void messageReceived(WonderlandClientSender sender,WonderlandClientID clientID,CellMessage message){
  if (message instanceof AudioTreatmentRequestMessage) {
    AudioTreatmentRequestMessage msg=(AudioTreatmentRequestMessage)message;
    logger.fine(""String_Node_Str"" + msg.restartTreatment());
    String treatmentId=CallID.getCallID(cellID);
    Treatment treatment=null;
    try {
      treatment=AppContext.getManager(VoiceManager.class).getTreatment(treatmentId);
    }
 catch (    IOException e) {
    }
    if (treatment == null) {
      System.out.println(""String_Node_Str"" + treatmentId);
      return;
    }
    logger.fine(""String_Node_Str"" + msg.restartTreatment() + ""String_Node_Str""+ msg.isPaused());
    if (msg.restartTreatment()) {
      treatment.restart(msg.isPaused());
    }
 else {
      treatment.pause(msg.isPaused());
    }
    return;
  }
  if (message instanceof AudioVolumeMessage) {
    handleAudioVolume(sender,clientID,(AudioVolumeMessage)message);
    return;
  }
  logger.warning(""String_Node_Str"" + message);
}"
45959,"private void initialize(){
  if (groupId == null || treatments.length == 0) {
    logger.info(""String_Node_Str"" + groupId + ""String_Node_Str""+ treatments.length);
    return;
  }
  VoiceManager vm=AppContext.getManager(VoiceManager.class);
  TreatmentGroup group=vm.createTreatmentGroup(groupId);
  float cellRadius=getCellRadius();
  double fullVolumeRadius=fullVolumeAreaPercent / 100. * cellRadius;
  double falloff=.92 + ((50 - this.falloff) * ((1 - .92) / 50));
  if (falloff >= 1) {
    falloff=.999;
  }
  for (int i=0; i < treatments.length; i++) {
    TreatmentSetup setup=new TreatmentSetup();
    if (distanceAttenuated == true) {
      DefaultSpatializer spatializer=new DefaultSpatializer();
      setup.spatializer=spatializer;
      spatializer.setFullVolumeRadius(fullVolumeRadius);
      if (extent == 0) {
        spatializer.setZeroVolumeRadius(cellRadius);
      }
 else {
        spatializer.setZeroVolumeRadius(extent);
      }
      FalloffFunction falloffFunction=spatializer.getFalloffFunction();
      falloffFunction.setFalloff(falloff);
    }
 else {
      setup.spatializer=new FullVolumeSpatializer(cellRadius);
    }
    setup.spatializer.setAttenuator(volume);
    String treatment=treatments[i];
    String treatmentId=CallID.getCallID(cellRef.get().getCellID());
    if (treatment.startsWith(""String_Node_Str"")) {
      treatment=treatment.substring(6);
      int ix=treatment.indexOf(""String_Node_Str"");
      if (ix < 0) {
        logger.warning(""String_Node_Str"" + treatments[i]);
        continue;
      }
      String moduleName=treatment.substring(0,ix);
      String path=treatment.substring(ix + 1);
      logger.fine(""String_Node_Str"" + moduleName + ""String_Node_Str""+ treatment);
      URL url;
      try {
        url=new URL(new URL(serverURL),""String_Node_Str"" + moduleName + ""String_Node_Str""+ path);
        treatment=url.toString();
        logger.fine(""String_Node_Str"" + treatment);
      }
 catch (      MalformedURLException e) {
        logger.warning(""String_Node_Str"" + e.getMessage());
        continue;
      }
    }
    setup.treatment=treatment;
    setup.managedListenerRef=AppContext.getDataManager().createReference((ManagedCallStatusListener)this);
    if (setup.treatment == null || setup.treatment.length() == 0) {
      logger.warning(""String_Node_Str"" + setup.treatment + ""String_Node_Str"");
      continue;
    }
    Vector3f location=cellRef.get().getLocalTransform(null).getTranslation(null);
    setup.x=location.getX();
    setup.y=location.getY();
    setup.z=location.getZ();
    logger.info(""String_Node_Str"" + setup.treatment + ""String_Node_Str""+ setup.x+ ""String_Node_Str""+ setup.y+ ""String_Node_Str""+ setup.z+ ""String_Node_Str"");
    try {
      Treatment t=vm.createTreatment(treatmentId,setup);
      group.addTreatment(t);
      if (playWhen.equals(PlayWhen.ALWAYS) == false) {
        t.pause(true);
      }
      if (playWhen.equals(PlayWhen.FIRST_IN_RANGE)) {
        addProximityListener(t);
      }
    }
 catch (    IOException e) {
      System.out.println(""String_Node_Str"" + setup.treatment + e.getMessage());
      return;
    }
  }
}","private void initialize(){
  if (groupId == null || treatments.length == 0) {
    logger.info(""String_Node_Str"" + groupId + ""String_Node_Str""+ treatments.length);
    return;
  }
  VoiceManager vm=AppContext.getManager(VoiceManager.class);
  TreatmentGroup group=vm.createTreatmentGroup(groupId);
  float cellRadius=getCellRadius();
  double fullVolumeRadius=fullVolumeAreaPercent / 100. * cellRadius;
  double falloff=.92 + ((50 - this.falloff) * ((1 - .92) / 50));
  if (falloff >= 1) {
    falloff=.999;
  }
  logger.info(""String_Node_Str"" + groupId + ""String_Node_Str""+ cellRadius+ ""String_Node_Str""+ extent+ ""String_Node_Str""+ fullVolumeRadius+ ""String_Node_Str""+ falloff+ ""String_Node_Str""+ volume);
  for (int i=0; i < treatments.length; i++) {
    TreatmentSetup setup=new TreatmentSetup();
    if (distanceAttenuated == true) {
      DefaultSpatializer spatializer=new DefaultSpatializer();
      setup.spatializer=spatializer;
      spatializer.setFullVolumeRadius(fullVolumeRadius);
      if (extent == 0) {
        spatializer.setZeroVolumeRadius(cellRadius);
      }
 else {
        spatializer.setZeroVolumeRadius(extent);
      }
      FalloffFunction falloffFunction=spatializer.getFalloffFunction();
      falloffFunction.setFalloff(falloff);
    }
 else {
      setup.spatializer=new FullVolumeSpatializer(extent);
    }
    setup.spatializer.setAttenuator(volume * DefaultSpatializer.DEFAULT_MAXIMUM_VOLUME);
    String treatment=treatments[i];
    String treatmentId=CallID.getCallID(cellRef.get().getCellID());
    if (treatment.startsWith(""String_Node_Str"")) {
      treatment=treatment.substring(6);
      int ix=treatment.indexOf(""String_Node_Str"");
      if (ix < 0) {
        logger.warning(""String_Node_Str"" + treatments[i]);
        continue;
      }
      String moduleName=treatment.substring(0,ix);
      String path=treatment.substring(ix + 1);
      logger.fine(""String_Node_Str"" + moduleName + ""String_Node_Str""+ treatment);
      URL url;
      try {
        url=new URL(new URL(serverURL),""String_Node_Str"" + moduleName + ""String_Node_Str""+ path);
        treatment=url.toString();
        logger.fine(""String_Node_Str"" + treatment);
      }
 catch (      MalformedURLException e) {
        logger.warning(""String_Node_Str"" + e.getMessage());
        continue;
      }
    }
    setup.treatment=treatment;
    setup.managedListenerRef=AppContext.getDataManager().createReference((ManagedCallStatusListener)this);
    if (setup.treatment == null || setup.treatment.length() == 0) {
      logger.warning(""String_Node_Str"" + setup.treatment + ""String_Node_Str"");
      continue;
    }
    Vector3f location=cellRef.get().getLocalTransform(null).getTranslation(null);
    setup.x=location.getX();
    setup.y=location.getY();
    setup.z=location.getZ();
    logger.info(""String_Node_Str"" + setup.treatment + ""String_Node_Str""+ setup.x+ ""String_Node_Str""+ setup.y+ ""String_Node_Str""+ setup.z+ ""String_Node_Str"");
    try {
      Treatment t=vm.createTreatment(treatmentId,setup);
      group.addTreatment(t);
      if (playWhen.equals(PlayWhen.ALWAYS) == false) {
        t.pause(true);
      }
      if (playWhen.equals(PlayWhen.FIRST_IN_RANGE)) {
        addProximityListener(t);
      }
    }
 catch (    IOException e) {
      System.out.println(""String_Node_Str"" + setup.treatment + e.getMessage());
      return;
    }
  }
}"
45960,"@Override public void handleMessage(Message message){
  logger.fine(""String_Node_Str"");
  if (message instanceof GetVoiceBridgeResponseMessage) {
    startSoftphone((GetVoiceBridgeResponseMessage)message);
    return;
  }
  if (message instanceof ChangeUsernameAliasMessage) {
    changeUsernameAlias((ChangeUsernameAliasMessage)message);
    return;
  }
  if (message instanceof VoiceChatJoinRequestMessage) {
    final IncomingCallHUDPanel incomingCallHUDPanel=new IncomingCallHUDPanel(this,session,cell.getCellID(),(VoiceChatJoinRequestMessage)message);
    HUD mainHUD=HUDManagerFactory.getHUDManager().getHUD(""String_Node_Str"");
    final HUDComponent incomingCallHUDComponent=mainHUD.createComponent(incomingCallHUDPanel);
    incomingCallHUDPanel.setHUDComponent(incomingCallHUDComponent);
    incomingCallHUDComponent.setPreferredLocation(Layout.CENTER);
    incomingCallHUDComponent.setIcon(voiceChatIcon);
    mainHUD.addComponent(incomingCallHUDComponent);
    incomingCallHUDComponent.addEventListener(new HUDEventListener(){
      public void HUDObjectChanged(      HUDEvent e){
        if (e.getEventType().equals(HUDEventType.DISAPPEARED)) {
          incomingCallHUDPanel.busy();
        }
      }
    }
);
    incomingCallHUDComponent.setVisible(true);
    return;
  }
  if (message instanceof VoiceChatBusyMessage) {
    VoiceChatBusyMessage msg=(VoiceChatBusyMessage)message;
    VoiceChatBusyHUDPanel voiceChatBusyHUDPanel=new VoiceChatBusyHUDPanel(msg.getCallee());
    HUD mainHUD=HUDManagerFactory.getHUDManager().getHUD(""String_Node_Str"");
    HUDComponent voiceChatBusyHUDComponent=mainHUD.createComponent(voiceChatBusyHUDPanel);
    voiceChatBusyHUDPanel.setHUDComponent(voiceChatBusyHUDComponent);
    voiceChatBusyHUDComponent.setPreferredLocation(Layout.CENTER);
    voiceChatBusyHUDComponent.setIcon(voiceChatIcon);
    mainHUD.addComponent(voiceChatBusyHUDComponent);
    voiceChatBusyHUDComponent.addEventListener(new HUDEventListener(){
      public void HUDObjectChanged(      HUDEvent e){
        if (e.getEventType().equals(HUDEventType.DISAPPEARED)) {
        }
      }
    }
);
    voiceChatBusyHUDComponent.setVisible(true);
    notifyMemberChangeListeners(msg.getGroup(),msg.getCallee(),false);
    return;
  }
  if (message instanceof VoiceChatInfoResponseMessage) {
    VoiceChatInfoResponseMessage msg=(VoiceChatInfoResponseMessage)message;
    notifyMemberChangeListeners(msg.getGroup(),msg.getChatters());
    return;
  }
  if (message instanceof VoiceChatJoinAcceptedMessage) {
    joinVoiceChat((VoiceChatJoinAcceptedMessage)message);
    return;
  }
  if (message instanceof VoiceChatHoldMessage) {
    VoiceChatHoldMessage msg=(VoiceChatHoldMessage)message;
    return;
  }
  if (message instanceof VoiceChatLeaveMessage) {
    leaveVoiceChat((VoiceChatLeaveMessage)message);
    return;
  }
  if (message instanceof VoiceChatCallEndedMessage) {
    VoiceChatCallEndedMessage msg=(VoiceChatCallEndedMessage)message;
    voiceChatCallEnded(msg);
    session.send(this,new VoiceChatLeaveMessage(msg.getGroup(),msg.getCallee()));
    return;
  }
  if (message instanceof ConeOfSilenceEnterExitMessage) {
    coneOfSilenceEnterExit((ConeOfSilenceEnterExitMessage)message);
    return;
  }
  if (message instanceof PlayerInRangeMessage) {
    PlayerInRangeMessage msg=(PlayerInRangeMessage)message;
    logger.info(""String_Node_Str"" + msg.isInRange() + ""String_Node_Str""+ msg.getPlayerID()+ ""String_Node_Str""+ msg.getPlayerInRangeID());
    return;
  }
  if (message instanceof CallEstablishedMessage) {
    if (callMigrationForm != null) {
      callMigrationForm.setStatus(""String_Node_Str"");
    }
    return;
  }
  if (message instanceof CallMigrateMessage) {
    callMigrate((CallMigrateMessage)message);
    return;
  }
  if (message instanceof CallMutedMessage) {
    callMuted((CallMutedMessage)message);
    return;
  }
  if (message instanceof CallSpeakingMessage) {
    callSpeaking((CallSpeakingMessage)message);
    return;
  }
  if (message instanceof CallEndedMessage) {
    callEnded((CallEndedMessage)message);
    return;
  }
  logger.warning(""String_Node_Str"" + message);
  throw new UnsupportedOperationException(""String_Node_Str"");
}","@Override public void handleMessage(Message message){
  logger.fine(""String_Node_Str"");
  if (message instanceof GetVoiceBridgeResponseMessage) {
    startSoftphone((GetVoiceBridgeResponseMessage)message);
    return;
  }
  if (message instanceof ChangeUsernameAliasMessage) {
    changeUsernameAlias((ChangeUsernameAliasMessage)message);
    return;
  }
  if (message instanceof VoiceChatJoinRequestMessage) {
    System.out.println(""String_Node_Str"");
    final IncomingCallHUDPanel incomingCallHUDPanel=new IncomingCallHUDPanel(this,session,cell.getCellID(),(VoiceChatJoinRequestMessage)message);
    HUD mainHUD=HUDManagerFactory.getHUDManager().getHUD(""String_Node_Str"");
    final HUDComponent incomingCallHUDComponent=mainHUD.createComponent(incomingCallHUDPanel);
    incomingCallHUDPanel.setHUDComponent(incomingCallHUDComponent);
    incomingCallHUDComponent.setPreferredLocation(Layout.CENTER);
    incomingCallHUDComponent.setIcon(voiceChatIcon);
    mainHUD.addComponent(incomingCallHUDComponent);
    incomingCallHUDComponent.addEventListener(new HUDEventListener(){
      public void HUDObjectChanged(      HUDEvent e){
        if (e.getEventType().equals(HUDEventType.DISAPPEARED)) {
          incomingCallHUDPanel.busy();
        }
      }
    }
);
    incomingCallHUDComponent.setVisible(true);
    return;
  }
  if (message instanceof VoiceChatBusyMessage) {
    VoiceChatBusyMessage msg=(VoiceChatBusyMessage)message;
    VoiceChatBusyHUDPanel voiceChatBusyHUDPanel=new VoiceChatBusyHUDPanel(msg.getCallee());
    HUD mainHUD=HUDManagerFactory.getHUDManager().getHUD(""String_Node_Str"");
    HUDComponent voiceChatBusyHUDComponent=mainHUD.createComponent(voiceChatBusyHUDPanel);
    voiceChatBusyHUDPanel.setHUDComponent(voiceChatBusyHUDComponent);
    voiceChatBusyHUDComponent.setPreferredLocation(Layout.CENTER);
    voiceChatBusyHUDComponent.setIcon(voiceChatIcon);
    mainHUD.addComponent(voiceChatBusyHUDComponent);
    voiceChatBusyHUDComponent.addEventListener(new HUDEventListener(){
      public void HUDObjectChanged(      HUDEvent e){
        if (e.getEventType().equals(HUDEventType.DISAPPEARED)) {
        }
      }
    }
);
    voiceChatBusyHUDComponent.setVisible(true);
    notifyMemberChangeListeners(msg.getGroup(),msg.getCallee(),false);
    return;
  }
  if (message instanceof VoiceChatInfoResponseMessage) {
    VoiceChatInfoResponseMessage msg=(VoiceChatInfoResponseMessage)message;
    notifyMemberChangeListeners(msg.getGroup(),msg.getChatters());
    return;
  }
  if (message instanceof VoiceChatJoinAcceptedMessage) {
    joinVoiceChat((VoiceChatJoinAcceptedMessage)message);
    return;
  }
  if (message instanceof VoiceChatHoldMessage) {
    VoiceChatHoldMessage msg=(VoiceChatHoldMessage)message;
    return;
  }
  if (message instanceof VoiceChatLeaveMessage) {
    leaveVoiceChat((VoiceChatLeaveMessage)message);
    return;
  }
  if (message instanceof VoiceChatCallEndedMessage) {
    VoiceChatCallEndedMessage msg=(VoiceChatCallEndedMessage)message;
    voiceChatCallEnded(msg);
    session.send(this,new VoiceChatLeaveMessage(msg.getGroup(),msg.getCallee()));
    return;
  }
  if (message instanceof ConeOfSilenceEnterExitMessage) {
    coneOfSilenceEnterExit((ConeOfSilenceEnterExitMessage)message);
    return;
  }
  if (message instanceof PlayerInRangeMessage) {
    PlayerInRangeMessage msg=(PlayerInRangeMessage)message;
    PresenceInfo info=pm.getPresenceInfo(msg.getPlayerID());
    if (info == null) {
      logger.warning(""String_Node_Str"" + msg.getPlayerID());
      return;
    }
    PresenceInfo userInRangeInfo=pm.getPresenceInfo(msg.getPlayerInRangeID());
    if (userInRangeInfo == null) {
      logger.warning(""String_Node_Str"" + msg.getPlayerInRangeID());
      return;
    }
    notifyUserInRangeListeners(info,userInRangeInfo,msg.isInRange());
    return;
  }
  if (message instanceof CallEstablishedMessage) {
    if (callMigrationForm != null) {
      callMigrationForm.setStatus(""String_Node_Str"");
    }
    return;
  }
  if (message instanceof CallMigrateMessage) {
    callMigrate((CallMigrateMessage)message);
    return;
  }
  if (message instanceof CallMutedMessage) {
    callMuted((CallMutedMessage)message);
    return;
  }
  if (message instanceof CallSpeakingMessage) {
    callSpeaking((CallSpeakingMessage)message);
    return;
  }
  if (message instanceof CallEndedMessage) {
    callEnded((CallEndedMessage)message);
    return;
  }
  logger.warning(""String_Node_Str"" + message);
  throw new UnsupportedOperationException(""String_Node_Str"");
}"
45961,"private void checkDirty(){
  if (editor == null) {
    return;
  }
  String name=nameTextField.getText();
  System.out.println(""String_Node_Str"" + name + ""String_Node_Str""+ originalName);
  if (name.equals(originalName) == false) {
    editor.setPanelDirty(ConeOfSilenceComponentProperties.class,true);
  }
 else {
    editor.setPanelDirty(ConeOfSilenceComponentProperties.class,false);
  }
}","private void checkDirty(){
  if (editor == null) {
    return;
  }
  String name=nameTextField.getText();
  if (name.equals(originalName) == false) {
    editor.setPanelDirty(ConeOfSilenceComponentProperties.class,true);
  }
 else {
    editor.setPanelDirty(ConeOfSilenceComponentProperties.class,false);
  }
}"
45962,"private void voiceChatButtonActionPerformed(java.awt.event.ActionEvent evt){
  ArrayList<PresenceInfo> usersToInvite=new ArrayList();
  Object[] selectedValues=userList.getSelectedValues();
  if (selectedValues.length > 0) {
    for (int i=0; i < selectedValues.length; i++) {
      String username=NameTagNode.getUsername((String)selectedValues[i]);
      PresenceInfo info=pm.getAliasPresenceInfo(username);
      if (info == null) {
        System.out.println(""String_Node_Str"" + username);
        continue;
      }
      if (info.equals(presenceInfo)) {
        continue;
      }
      usersToInvite.add(info);
    }
  }
  AddHUDPanel addHUDPanel=new AddHUDPanel(client,session,presenceInfo,presenceInfo);
  addHUDPanel.inviteUsers(usersToInvite);
  HUD mainHUD=HUDManagerFactory.getHUDManager().getHUD(""String_Node_Str"");
  final HUDComponent addHUDComponent=mainHUD.createComponent(addHUDPanel);
  addHUDPanel.setHUDComponent(addHUDComponent);
  addHUDComponent.setIcon(new ImageIcon(getClass().getResource(""String_Node_Str"")));
  mainHUD.addComponent(addHUDComponent);
  addHUDComponent.addEventListener(new HUDEventListener(){
    public void HUDObjectChanged(    HUDEvent e){
      if (e.getEventType().equals(HUDEventType.DISAPPEARED)) {
      }
    }
  }
);
  PropertyChangeListener plistener=new PropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent pe){
      if (pe.getPropertyName().equals(""String_Node_Str"") || pe.getPropertyName().equals(""String_Node_Str"")) {
        addHUDComponent.setVisible(false);
      }
    }
  }
;
  addHUDPanel.addPropertyChangeListener(plistener);
  addHUDComponent.setPreferredLocation(Layout.CENTER);
  addHUDComponent.setVisible(true);
  addHUDPanel.setLocation(userListHUDComponent.getX() + userListHUDComponent.getWidth(),userListHUDComponent.getY() + userListHUDComponent.getHeight() - addHUDComponent.getHeight());
}","private void voiceChatButtonActionPerformed(java.awt.event.ActionEvent evt){
  ArrayList<PresenceInfo> usersToInvite=new ArrayList();
  Object[] selectedValues=userList.getSelectedValues();
  if (selectedValues.length > 0) {
    for (int i=0; i < selectedValues.length; i++) {
      String username=NameTagNode.getUsername((String)selectedValues[i]);
      PresenceInfo info=pm.getAliasPresenceInfo(username);
      if (info == null) {
        System.out.println(""String_Node_Str"" + username);
        continue;
      }
      if (info.equals(presenceInfo)) {
        continue;
      }
      usersToInvite.add(info);
    }
  }
  AddHUDPanel addHUDPanel=new AddHUDPanel(client,session,presenceInfo,presenceInfo);
  addHUDPanel.inviteUsers(usersToInvite);
  HUD mainHUD=HUDManagerFactory.getHUDManager().getHUD(""String_Node_Str"");
  final HUDComponent addHUDComponent=mainHUD.createComponent(addHUDPanel);
  addHUDPanel.setHUDComponent(addHUDComponent);
  addHUDComponent.setName(""String_Node_Str"");
  addHUDComponent.setIcon(new ImageIcon(getClass().getResource(""String_Node_Str"")));
  mainHUD.addComponent(addHUDComponent);
  addHUDComponent.addEventListener(new HUDEventListener(){
    public void HUDObjectChanged(    HUDEvent e){
      if (e.getEventType().equals(HUDEventType.DISAPPEARED)) {
      }
    }
  }
);
  PropertyChangeListener plistener=new PropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent pe){
      if (pe.getPropertyName().equals(""String_Node_Str"") || pe.getPropertyName().equals(""String_Node_Str"")) {
        addHUDComponent.setVisible(false);
      }
    }
  }
;
  addHUDPanel.addPropertyChangeListener(plistener);
  addHUDComponent.setPreferredLocation(Layout.CENTER);
  addHUDComponent.setVisible(true);
  addHUDPanel.setLocation(userListHUDComponent.getX() + userListHUDComponent.getWidth(),userListHUDComponent.getY() + userListHUDComponent.getHeight() - addHUDComponent.getHeight());
}"
45963,"public AddHUDPanel(AudioManagerClient client,WonderlandSession session,PresenceInfo myPresenceInfo,PresenceInfo caller,String group,Mode mode){
  this.client=client;
  this.session=session;
  this.myPresenceInfo=myPresenceInfo;
  this.caller=caller;
  if (group == null) {
    group=caller.userID.getUsername() + ""String_Node_Str"" + groupNumber++;
  }
  this.group=group;
  System.out.println(""String_Node_Str"" + group);
  initComponents();
  setMode(mode);
  setEnabledInviteButton();
  setEnabledActionButton();
  pm=PresenceManagerFactory.getPresenceManager(session);
  addHUDPanelMap.add(this);
  client.addDisconnectListener(this);
}","public AddHUDPanel(AudioManagerClient client,WonderlandSession session,PresenceInfo myPresenceInfo,PresenceInfo caller,String group,Mode mode){
  this.client=client;
  this.session=session;
  this.myPresenceInfo=myPresenceInfo;
  this.caller=caller;
  if (group == null) {
    group=caller.userID.getUsername() + ""String_Node_Str"" + groupNumber++;
  }
  this.group=group;
  initComponents();
  setMode(mode);
  setEnabledInviteButton();
  setEnabledActionButton();
  pm=PresenceManagerFactory.getPresenceManager(session);
  addHUDPanelList.add(this);
  client.addDisconnectListener(this);
}"
45964,"public void setHUDComponent(HUDComponent addHUDComponent){
  this.addHUDComponent=addHUDComponent;
  addHUDComponent.addEventListener(new HUDEventListener(){
    public void HUDObjectChanged(    HUDEvent e){
      if (e.getEventType().equals(HUDEventType.CLOSED)) {
        leave();
      }
    }
  }
);
  addHUDComponent.setName(""String_Node_Str"");
}","public void setHUDComponent(HUDComponent addHUDComponent){
  this.addHUDComponent=addHUDComponent;
  addHUDComponent.addEventListener(new HUDEventListener(){
    public void HUDObjectChanged(    HUDEvent e){
      if (e.getEventType().equals(HUDEventType.CLOSED)) {
        leave();
      }
    }
  }
);
}"
45965,"public void setLocation(int x,int y){
  AddHUDPanel[] addHUDPanels=addHUDPanelMap.toArray(new AddHUDPanel[0]);
  for (int i=0; i < addHUDPanels.length; i++) {
    if (addHUDPanels[i] == this) {
      continue;
    }
    HUDComponent addHUDComponent=addHUDPanels[i].getHUDComponent();
    Point p=addHUDComponent.getLocation();
    if (p.getX() >= x) {
      x=(int)(p.getX() + addHUDComponent.getWidth());
      y=(int)p.getY();
    }
  }
  addHUDComponent.setLocation(x,y);
}","public void setLocation(int x,int y){
  AddHUDPanel[] addHUDPanels=addHUDPanelList.toArray(new AddHUDPanel[0]);
  for (  AddHUDPanel addHUDPanel : addHUDPanelList) {
    if (addHUDPanel == this) {
      continue;
    }
    HUDComponent addHUDComponent=addHUDPanel.getHUDComponent();
    Point p=addHUDComponent.getLocation();
    if (p.getX() >= x) {
      x=(int)(p.getX() + addHUDComponent.getWidth());
      y=(int)p.getY();
    }
  }
  addHUDComponent.setLocation(x,y);
}"
45966,"private void leave(){
  session.send(client,new VoiceChatLeaveMessage(group,myPresenceInfo));
  addHUDComponent.setVisible(false);
  addHUDPanelMap.remove(this);
  client.getWlAvatarCharacter().stop();
}","private void leave(){
  session.send(client,new VoiceChatLeaveMessage(group,myPresenceInfo));
  addHUDComponent.setVisible(false);
  addHUDPanelList.remove(this);
  if (addModeAddHUDComponent != null) {
    addModeAddHUDComponent.setVisible(false);
  }
  client.getWlAvatarCharacter().stop();
}"
45967,"public void setPreferredLocation(Layout location){
  if (addHUDPanelMap.size() == 1) {
    addHUDComponent.setPreferredLocation(location);
    return;
  }
  setLocation(0,0);
}","public void setPreferredLocation(Layout location){
  if (addHUDPanelList.size() == 1) {
    addHUDComponent.setPreferredLocation(location);
    return;
  }
  setLocation(0,0);
}"
45968,"private void holdOtherCalls(){
  AddHUDPanel[] addHUDPanels=addHUDPanelMap.toArray(new AddHUDPanel[0]);
  for (int i=0; i < addHUDPanels.length; i++) {
    if (addHUDPanels[i] == this) {
      continue;
    }
    if (addHUDPanels[i].getMode().equals(Mode.IN_PROGRESS)) {
      addHUDPanels[i].setMode(Mode.HOLD);
    }
  }
}","private void holdOtherCalls(){
  for (  AddHUDPanel addHUDPanel : addHUDPanelList) {
    if (addHUDPanel == this) {
      continue;
    }
    if (addHUDPanel.getMode().equals(Mode.IN_PROGRESS)) {
      addHUDPanel.setMode(Mode.HOLD);
    }
  }
}"
45969,"public void propertyChange(PropertyChangeEvent pe){
  if (pe.getPropertyName().equals(""String_Node_Str"") || pe.getPropertyName().equals(""String_Node_Str"")) {
    addHUDComponent.setVisible(false);
  }
}","public void propertyChange(PropertyChangeEvent pe){
  if (pe.getPropertyName().equals(""String_Node_Str"") || pe.getPropertyName().equals(""String_Node_Str"")) {
    addModeAddHUDComponent.setVisible(false);
  }
}"
45970,"private void addButtonActionPerformed(ActionEvent e){
  AddHUDPanel addHUDPanel=new AddHUDPanel(client,session,myPresenceInfo,myPresenceInfo,group,Mode.ADD);
  HUD mainHUD=HUDManagerFactory.getHUDManager().getHUD(""String_Node_Str"");
  final HUDComponent addHUDComponent=mainHUD.createComponent(addHUDPanel);
  addHUDComponent.setName(""String_Node_Str"");
  addHUDComponent.setIcon(new ImageIcon(getClass().getResource(""String_Node_Str"")));
  addHUDPanel.setHUDComponent(addHUDComponent);
  addHUDPanel.setPreferredLocation(Layout.EAST);
  mainHUD.addComponent(addHUDComponent);
  inProgressButtonPanel.setEnabledAddButton(false);
  addHUDComponent.addEventListener(new HUDEventListener(){
    public void HUDObjectChanged(    HUDEvent e){
      if (e.getEventType().equals(HUDEventType.DISAPPEARED)) {
        inProgressButtonPanel.setEnabledAddButton(true);
      }
    }
  }
);
  PropertyChangeListener plistener=new PropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent pe){
      if (pe.getPropertyName().equals(""String_Node_Str"") || pe.getPropertyName().equals(""String_Node_Str"")) {
        addHUDComponent.setVisible(false);
      }
    }
  }
;
  addHUDPanel.addPropertyChangeListener(plistener);
  addHUDComponent.setVisible(true);
}","private void addButtonActionPerformed(ActionEvent e){
  AddHUDPanel addHUDPanel=new AddHUDPanel(client,session,myPresenceInfo,myPresenceInfo,group,Mode.ADD);
  HUD mainHUD=HUDManagerFactory.getHUDManager().getHUD(""String_Node_Str"");
  addModeAddHUDComponent=mainHUD.createComponent(addHUDPanel);
  addHUDPanel.setHUDComponent(addModeAddHUDComponent);
  addModeAddHUDComponent.setName(""String_Node_Str"");
  addHUDPanel.setPreferredLocation(Layout.EAST);
  mainHUD.addComponent(addModeAddHUDComponent);
  inProgressButtonPanel.setEnabledAddButton(false);
  addModeAddHUDComponent.addEventListener(new HUDEventListener(){
    public void HUDObjectChanged(    HUDEvent e){
      if (e.getEventType().equals(HUDEventType.DISAPPEARED)) {
        inProgressButtonPanel.setEnabledAddButton(true);
      }
    }
  }
);
  PropertyChangeListener plistener=new PropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent pe){
      if (pe.getPropertyName().equals(""String_Node_Str"") || pe.getPropertyName().equals(""String_Node_Str"")) {
        addModeAddHUDComponent.setVisible(false);
      }
    }
  }
;
  addHUDPanel.addPropertyChangeListener(plistener);
  addModeAddHUDComponent.setVisible(true);
}"
45971,"public void actionPerformed(ActionEvent event){
  String action=gestureMap.get(event.getActionCommand());
  logger.info(""String_Node_Str"" + event.getActionCommand());
  if (action.equals(""String_Node_Str"") == true) {
    avatar.triggerActionStart(TriggerNames.SitOnGround);
  }
 else   if (action.equals(""String_Node_Str"") == true) {
    CharacterEyes eyes=avatar.getEyes();
    eyes.wink(false);
  }
 else {
    avatar.playAnimation(action);
  }
}","public void actionPerformed(ActionEvent event){
  String action=gestureMap.get(event.getActionCommand());
  logger.info(""String_Node_Str"" + event.getActionCommand());
  if (action.equals(""String_Node_Str"") == true) {
    doSitGesture(avatar);
  }
 else   if (action.equals(""String_Node_Str"") == true) {
    CharacterEyes eyes=avatar.getEyes();
    eyes.wink(false);
  }
 else {
    avatar.playAnimation(action);
  }
}"
45972,"public void run(){
  if (mainHUD == null) {
    mainHUD=HUDManagerFactory.getHUDManager().getHUD(""String_Node_Str"");
  }
  for (  String name : buttonMap.keySet()) {
    HUDButton button=buttonMap.get(name);
    mainHUD.removeComponent(button);
  }
  buttonMap.clear();
  gestureMap.clear();
  if (avatar == null) {
    return;
  }
  for (  String action : avatar.getAnimationNames()) {
    String name=action;
    if (action.startsWith(""String_Node_Str"") == true) {
      name=name.substring(5);
    }
 else     if (action.startsWith(""String_Node_Str"") == true) {
      name=name.substring(7);
    }
    gestureMap.put(bundle.getString(name),action);
  }
  gestureMap.put(""String_Node_Str"",""String_Node_Str"");
  gestureMap.put(""String_Node_Str"",""String_Node_Str"");
  for (  String name : gestureMap.keySet()) {
    int row=0;
    int column=0;
    for (    String[] gesture : gestures) {
      if (gesture[0].equals(name)) {
        column=Integer.valueOf(gesture[1]);
        row=Integer.valueOf(gesture[2]);
        HUDButton button=mainHUD.createButton(name);
        button.setDecoratable(false);
        button.setPreferredTransparency(0.2f);
        button.setLocation(leftMargin + column * columnWidth,bottomMargin + row * rowHeight);
        mainHUD.addComponent(button);
        buttonMap.put(name,button);
        button.addActionListener(new ActionListener(){
          public void actionPerformed(          ActionEvent event){
            String action=gestureMap.get(event.getActionCommand());
            logger.info(""String_Node_Str"" + event.getActionCommand());
            if (action.equals(""String_Node_Str"") == true) {
              avatar.triggerActionStart(TriggerNames.SitOnGround);
            }
 else             if (action.equals(""String_Node_Str"") == true) {
              CharacterEyes eyes=avatar.getEyes();
              eyes.wink(false);
            }
 else {
              avatar.playAnimation(action);
            }
          }
        }
);
        break;
      }
    }
  }
  setVisible(true);
}","public void run(){
  if (mainHUD == null) {
    mainHUD=HUDManagerFactory.getHUDManager().getHUD(""String_Node_Str"");
  }
  for (  String name : buttonMap.keySet()) {
    HUDButton button=buttonMap.get(name);
    mainHUD.removeComponent(button);
  }
  buttonMap.clear();
  gestureMap.clear();
  if (avatar == null) {
    return;
  }
  for (  String action : avatar.getAnimationNames()) {
    String name=action;
    if (action.startsWith(""String_Node_Str"") == true) {
      name=name.substring(5);
    }
 else     if (action.startsWith(""String_Node_Str"") == true) {
      name=name.substring(7);
    }
    gestureMap.put(bundle.getString(name),action);
  }
  gestureMap.put(""String_Node_Str"",""String_Node_Str"");
  gestureMap.put(""String_Node_Str"",""String_Node_Str"");
  for (  String name : gestureMap.keySet()) {
    int row=0;
    int column=0;
    for (    String[] gesture : gestures) {
      if (gesture[0].equals(name)) {
        column=Integer.valueOf(gesture[1]);
        row=Integer.valueOf(gesture[2]);
        HUDButton button=mainHUD.createButton(name);
        button.setDecoratable(false);
        button.setPreferredTransparency(0.2f);
        button.setLocation(leftMargin + column * columnWidth,bottomMargin + row * rowHeight);
        mainHUD.addComponent(button);
        buttonMap.put(name,button);
        button.addActionListener(new ActionListener(){
          public void actionPerformed(          ActionEvent event){
            String action=gestureMap.get(event.getActionCommand());
            logger.info(""String_Node_Str"" + event.getActionCommand());
            if (action.equals(""String_Node_Str"") == true) {
              doSitGesture(avatar);
            }
 else             if (action.equals(""String_Node_Str"") == true) {
              CharacterEyes eyes=avatar.getEyes();
              eyes.wink(false);
            }
 else {
              avatar.playAnimation(action);
            }
          }
        }
);
        break;
      }
    }
  }
  setVisible(true);
}"
45973,"public void setAvatarCharacter(final WlAvatarCharacter avatar){
  SwingUtilities.invokeLater(new Runnable(){
    public void run(){
      if (mainHUD == null) {
        mainHUD=HUDManagerFactory.getHUDManager().getHUD(""String_Node_Str"");
      }
      for (      String name : buttonMap.keySet()) {
        HUDButton button=buttonMap.get(name);
        mainHUD.removeComponent(button);
      }
      buttonMap.clear();
      gestureMap.clear();
      if (avatar == null) {
        return;
      }
      for (      String action : avatar.getAnimationNames()) {
        String name=action;
        if (action.startsWith(""String_Node_Str"") == true) {
          name=name.substring(5);
        }
 else         if (action.startsWith(""String_Node_Str"") == true) {
          name=name.substring(7);
        }
        gestureMap.put(bundle.getString(name),action);
      }
      gestureMap.put(""String_Node_Str"",""String_Node_Str"");
      gestureMap.put(""String_Node_Str"",""String_Node_Str"");
      for (      String name : gestureMap.keySet()) {
        int row=0;
        int column=0;
        for (        String[] gesture : gestures) {
          if (gesture[0].equals(name)) {
            column=Integer.valueOf(gesture[1]);
            row=Integer.valueOf(gesture[2]);
            HUDButton button=mainHUD.createButton(name);
            button.setDecoratable(false);
            button.setPreferredTransparency(0.2f);
            button.setLocation(leftMargin + column * columnWidth,bottomMargin + row * rowHeight);
            mainHUD.addComponent(button);
            buttonMap.put(name,button);
            button.addActionListener(new ActionListener(){
              public void actionPerformed(              ActionEvent event){
                String action=gestureMap.get(event.getActionCommand());
                logger.info(""String_Node_Str"" + event.getActionCommand());
                if (action.equals(""String_Node_Str"") == true) {
                  avatar.triggerActionStart(TriggerNames.SitOnGround);
                }
 else                 if (action.equals(""String_Node_Str"") == true) {
                  CharacterEyes eyes=avatar.getEyes();
                  eyes.wink(false);
                }
 else {
                  avatar.playAnimation(action);
                }
              }
            }
);
            break;
          }
        }
      }
      setVisible(true);
    }
  }
);
}","public void setAvatarCharacter(final WlAvatarCharacter avatar){
  SwingUtilities.invokeLater(new Runnable(){
    public void run(){
      if (mainHUD == null) {
        mainHUD=HUDManagerFactory.getHUDManager().getHUD(""String_Node_Str"");
      }
      for (      String name : buttonMap.keySet()) {
        HUDButton button=buttonMap.get(name);
        mainHUD.removeComponent(button);
      }
      buttonMap.clear();
      gestureMap.clear();
      if (avatar == null) {
        return;
      }
      for (      String action : avatar.getAnimationNames()) {
        String name=action;
        if (action.startsWith(""String_Node_Str"") == true) {
          name=name.substring(5);
        }
 else         if (action.startsWith(""String_Node_Str"") == true) {
          name=name.substring(7);
        }
        gestureMap.put(bundle.getString(name),action);
      }
      gestureMap.put(""String_Node_Str"",""String_Node_Str"");
      gestureMap.put(""String_Node_Str"",""String_Node_Str"");
      for (      String name : gestureMap.keySet()) {
        int row=0;
        int column=0;
        for (        String[] gesture : gestures) {
          if (gesture[0].equals(name)) {
            column=Integer.valueOf(gesture[1]);
            row=Integer.valueOf(gesture[2]);
            HUDButton button=mainHUD.createButton(name);
            button.setDecoratable(false);
            button.setPreferredTransparency(0.2f);
            button.setLocation(leftMargin + column * columnWidth,bottomMargin + row * rowHeight);
            mainHUD.addComponent(button);
            buttonMap.put(name,button);
            button.addActionListener(new ActionListener(){
              public void actionPerformed(              ActionEvent event){
                String action=gestureMap.get(event.getActionCommand());
                logger.info(""String_Node_Str"" + event.getActionCommand());
                if (action.equals(""String_Node_Str"") == true) {
                  doSitGesture(avatar);
                }
 else                 if (action.equals(""String_Node_Str"") == true) {
                  CharacterEyes eyes=avatar.getEyes();
                  eyes.wink(false);
                }
 else {
                  avatar.playAnimation(action);
                }
              }
            }
);
            break;
          }
        }
      }
      setVisible(true);
    }
  }
);
}"
45974,"public SelectionListener(){
  setSwingSafe(true);
}","public SelectionListener(){
}"
45975,"public ResizeDragListener(){
  setSwingSafe(true);
  labelFrame=new JFrame();
  labelFrame.setResizable(false);
  labelFrame.setUndecorated(true);
  labelFrame.getContentPane().setLayout(new GridLayout(1,1));
  JPanel labelPanel=new JPanel();
  labelPanel.setBackground(Color.WHITE);
  labelPanel.setOpaque(true);
  labelFrame.getContentPane().add(labelPanel);
  labelPanel.setBorder(BorderFactory.createEmptyBorder(2,2,2,2));
  labelPanel.setLayout(new GridLayout());
  resizeLabel=new JLabel(""String_Node_Str"");
  labelPanel.add(resizeLabel);
  labelPanel.invalidate();
  labelFrame.pack();
}","public ResizeDragListener(){
  labelFrame=new JFrame();
  labelFrame.setResizable(false);
  labelFrame.setUndecorated(true);
  labelFrame.getContentPane().setLayout(new GridLayout(1,1));
  JPanel labelPanel=new JPanel();
  labelPanel.setBackground(Color.WHITE);
  labelPanel.setOpaque(true);
  labelFrame.getContentPane().add(labelPanel);
  labelPanel.setBorder(BorderFactory.createEmptyBorder(2,2,2,2));
  labelPanel.setLayout(new GridLayout());
  resizeLabel=new JLabel(""String_Node_Str"");
  labelPanel.add(resizeLabel);
  labelPanel.invalidate();
  labelFrame.pack();
}"
45976,"public RotationDragListener(RotateAxis direction){
  this.direction=direction;
  setSwingSafe(true);
  labelFrame=new JFrame();
  labelFrame.setResizable(false);
  labelFrame.setUndecorated(true);
  labelFrame.getContentPane().setLayout(new GridLayout(1,1));
  JPanel labelPanel=new JPanel();
  labelPanel.setBackground(Color.WHITE);
  labelPanel.setOpaque(true);
  labelFrame.getContentPane().add(labelPanel);
  labelPanel.setBorder(BorderFactory.createEmptyBorder(2,2,2,2));
  labelPanel.setLayout(new GridLayout());
  rotationLabel=new JLabel(""String_Node_Str"");
  labelPanel.add(rotationLabel);
  labelPanel.invalidate();
  labelFrame.pack();
}","public RotationDragListener(RotateAxis direction){
  this.direction=direction;
  labelFrame=new JFrame();
  labelFrame.setResizable(false);
  labelFrame.setUndecorated(true);
  labelFrame.getContentPane().setLayout(new GridLayout(1,1));
  JPanel labelPanel=new JPanel();
  labelPanel.setBackground(Color.WHITE);
  labelPanel.setOpaque(true);
  labelFrame.getContentPane().add(labelPanel);
  labelPanel.setBorder(BorderFactory.createEmptyBorder(2,2,2,2));
  labelPanel.setLayout(new GridLayout());
  rotationLabel=new JLabel(""String_Node_Str"");
  labelPanel.add(rotationLabel);
  labelPanel.invalidate();
  labelFrame.pack();
}"
45977,"public TranslateDragListener(TranslateAxis direction){
  this.direction=direction;
  setSwingSafe(true);
  labelFrame=new JFrame();
  labelFrame.setResizable(false);
  labelFrame.setUndecorated(true);
  labelFrame.getContentPane().setLayout(new GridLayout(1,1));
  JPanel labelPanel=new JPanel();
  labelPanel.setBackground(Color.WHITE);
  labelPanel.setOpaque(true);
  labelFrame.getContentPane().add(labelPanel);
  labelPanel.setBorder(BorderFactory.createEmptyBorder(2,2,2,2));
  labelPanel.setLayout(new GridLayout());
  positionLabel=new JLabel(""String_Node_Str"");
  labelPanel.add(positionLabel);
  labelPanel.invalidate();
  labelFrame.pack();
}","public TranslateDragListener(TranslateAxis direction){
  this.direction=direction;
  labelFrame=new JFrame();
  labelFrame.setResizable(false);
  labelFrame.setUndecorated(true);
  labelFrame.getContentPane().setLayout(new GridLayout(1,1));
  JPanel labelPanel=new JPanel();
  labelPanel.setBackground(Color.WHITE);
  labelPanel.setOpaque(true);
  labelFrame.getContentPane().add(labelPanel);
  labelPanel.setBorder(BorderFactory.createEmptyBorder(2,2,2,2));
  labelPanel.setLayout(new GridLayout());
  positionLabel=new JLabel(""String_Node_Str"");
  labelPanel.add(positionLabel);
  labelPanel.invalidate();
  labelFrame.pack();
}"
45978,"private void initialize(){
  if (groupId == null || treatments.length == 0) {
    logger.info(""String_Node_Str"" + groupId + ""String_Node_Str""+ treatments.length);
    return;
  }
  VoiceManager vm=AppContext.getManager(VoiceManager.class);
  TreatmentGroup group=vm.createTreatmentGroup(groupId);
  float cellRadius=getCellRadius();
  double fullVolumeRadius=fullVolumeAreaPercent / 100. * cellRadius;
  double falloff=.92 + ((50 - this.falloff) * ((1 - .92) / 50));
  if (falloff >= 1) {
    falloff=.999;
  }
  logger.info(""String_Node_Str"" + groupId + ""String_Node_Str""+ cellRadius+ ""String_Node_Str""+ extent+ ""String_Node_Str""+ fullVolumeRadius+ ""String_Node_Str""+ falloff+ ""String_Node_Str""+ volume);
  for (int i=0; i < treatments.length; i++) {
    TreatmentSetup setup=new TreatmentSetup();
    if (distanceAttenuated == true) {
      DefaultSpatializer spatializer=new DefaultSpatializer();
      setup.spatializer=spatializer;
      spatializer.setFullVolumeRadius(fullVolumeRadius);
      if (extent == 0) {
        spatializer.setZeroVolumeRadius(cellRadius);
      }
 else {
        spatializer.setZeroVolumeRadius(extent);
      }
      FalloffFunction falloffFunction=spatializer.getFalloffFunction();
      falloffFunction.setFalloff(falloff);
    }
 else {
      setup.spatializer=new FullVolumeSpatializer(extent);
    }
    setup.spatializer.setAttenuator(volume * DefaultSpatializer.DEFAULT_MAXIMUM_VOLUME);
    String treatment=treatments[i];
    String treatmentId=CallID.getCallID(cellRef.get().getCellID());
    if (treatment.startsWith(""String_Node_Str"")) {
      treatment=treatment.substring(6);
      int ix=treatment.indexOf(""String_Node_Str"");
      if (ix < 0) {
        logger.warning(""String_Node_Str"" + treatments[i]);
        continue;
      }
      String moduleName=treatment.substring(0,ix);
      String path=treatment.substring(ix + 1);
      logger.fine(""String_Node_Str"" + moduleName + ""String_Node_Str""+ treatment);
      URL url;
      try {
        url=new URL(new URL(serverURL),""String_Node_Str"" + moduleName + ""String_Node_Str""+ path);
        treatment=url.toString();
        logger.fine(""String_Node_Str"" + treatment);
      }
 catch (      MalformedURLException e) {
        logger.warning(""String_Node_Str"" + e.getMessage());
        continue;
      }
    }
    setup.treatment=treatment;
    setup.managedListenerRef=AppContext.getDataManager().createReference((ManagedCallStatusListener)this);
    if (setup.treatment == null || setup.treatment.length() == 0) {
      logger.warning(""String_Node_Str"" + setup.treatment + ""String_Node_Str"");
      continue;
    }
    Vector3f location=cellRef.get().getLocalTransform(null).getTranslation(null);
    setup.x=location.getX();
    setup.y=location.getY();
    setup.z=location.getZ();
    logger.info(""String_Node_Str"" + setup.treatment + ""String_Node_Str""+ setup.x+ ""String_Node_Str""+ setup.y+ ""String_Node_Str""+ setup.z+ ""String_Node_Str"");
    try {
      Treatment t=vm.createTreatment(treatmentId,setup);
      group.addTreatment(t);
      if (playWhen.equals(PlayWhen.ALWAYS) == false) {
        t.pause(true);
      }
      if (playWhen.equals(PlayWhen.FIRST_IN_RANGE)) {
        addProximityListener(t);
      }
    }
 catch (    IOException e) {
      System.out.println(""String_Node_Str"" + setup.treatment + e.getMessage());
      return;
    }
  }
}","private void initialize(){
  if (groupId == null || treatments.length == 0) {
    logger.info(""String_Node_Str"" + groupId + ""String_Node_Str""+ treatments.length);
    return;
  }
  VoiceManager vm=AppContext.getManager(VoiceManager.class);
  TreatmentGroup group=vm.createTreatmentGroup(groupId);
  float cellRadius=getCellRadius();
  double fullVolumeRadius=fullVolumeAreaPercent / 100. * cellRadius;
  double falloff=.92 + ((50 - this.falloff) * ((1 - .92) / 50));
  if (falloff >= 1) {
    falloff=.999;
  }
  logger.info(""String_Node_Str"" + groupId + ""String_Node_Str""+ cellRadius+ ""String_Node_Str""+ extent+ ""String_Node_Str""+ fullVolumeRadius+ ""String_Node_Str""+ falloff+ ""String_Node_Str""+ volume);
  for (int i=0; i < treatments.length; i++) {
    TreatmentSetup setup=new TreatmentSetup();
    if (distanceAttenuated == true) {
      DefaultSpatializer spatializer=new DefaultSpatializer();
      setup.spatializer=spatializer;
      spatializer.setFullVolumeRadius(fullVolumeRadius);
      if (extent == 0) {
        spatializer.setZeroVolumeRadius(cellRadius);
      }
 else {
        spatializer.setZeroVolumeRadius(extent);
      }
      FalloffFunction falloffFunction=spatializer.getFalloffFunction();
      falloffFunction.setFalloff(falloff);
    }
 else {
      setup.spatializer=new FullVolumeSpatializer(extent);
    }
    setup.spatializer.setAttenuator(volume * DefaultSpatializer.DEFAULT_MAXIMUM_VOLUME);
    String treatment=treatments[i];
    String treatmentId=CallID.getCallID(cellRef.get().getCellID());
    String pattern=""String_Node_Str"";
    if (treatment.startsWith(pattern)) {
      String path=treatment.substring(pattern.length());
      URL url;
      try {
        path=path.replaceAll(""String_Node_Str"",""String_Node_Str"");
        url=new URL(new URL(serverURL),""String_Node_Str"" + path);
        treatment=url.toString();
        System.out.println(""String_Node_Str"" + treatment);
      }
 catch (      MalformedURLException e) {
        logger.warning(""String_Node_Str"" + e.getMessage());
        return;
      }
    }
 else {
      pattern=""String_Node_Str"";
      if (treatment.startsWith(pattern)) {
        treatment=treatment.substring(pattern.length());
        int ix=treatment.indexOf(""String_Node_Str"");
        if (ix < 0) {
          logger.warning(""String_Node_Str"" + treatments[i]);
          continue;
        }
        String moduleName=treatment.substring(0,ix);
        String path=treatment.substring(ix + 1);
        logger.fine(""String_Node_Str"" + moduleName + ""String_Node_Str""+ treatment);
        URL url;
        try {
          path=path.replaceAll(""String_Node_Str"",""String_Node_Str"");
          url=new URL(new URL(serverURL),""String_Node_Str"" + moduleName + ""String_Node_Str""+ path);
          treatment=url.toString();
          logger.fine(""String_Node_Str"" + treatment);
        }
 catch (        MalformedURLException e) {
          logger.warning(""String_Node_Str"" + e.getMessage());
          continue;
        }
      }
    }
    setup.treatment=treatment;
    setup.managedListenerRef=AppContext.getDataManager().createReference((ManagedCallStatusListener)this);
    if (setup.treatment == null || setup.treatment.length() == 0) {
      logger.warning(""String_Node_Str"" + setup.treatment + ""String_Node_Str"");
      continue;
    }
    Vector3f location=cellRef.get().getLocalTransform(null).getTranslation(null);
    setup.x=location.getX();
    setup.y=location.getY();
    setup.z=location.getZ();
    logger.info(""String_Node_Str"" + setup.treatment + ""String_Node_Str""+ setup.x+ ""String_Node_Str""+ setup.y+ ""String_Node_Str""+ setup.z+ ""String_Node_Str"");
    try {
      Treatment t=vm.createTreatment(treatmentId,setup);
      group.addTreatment(t);
      if (playWhen.equals(PlayWhen.ALWAYS) == false) {
        t.pause(true);
      }
      if (playWhen.equals(PlayWhen.FIRST_IN_RANGE)) {
        addProximityListener(t);
      }
    }
 catch (    IOException e) {
      System.out.println(""String_Node_Str"" + setup.treatment + e.getMessage());
      return;
    }
  }
}"
45979,"/** 
 * Downloads the asset from the server and returns the asset upon success or null upon failure
 */
private Object doAssetDownload(){
  AssetURI assetURI=asset.getAssetURI();
  String uriString=assetURI.toExternalForm();
  AssetRepository repositories[]=factory.getAssetRepositories();
  logger.fine(""String_Node_Str"" + repositories + ""String_Node_Str""+ uriString);
  for (  AssetRepository repository : repositories) {
    logger.fine(""String_Node_Str"" + repository.toString() + ""String_Node_Str""+ assetURI);
    AssetStream stream=repository.openAssetStream(assetURI);
    AssetResponse response=stream.getResponse();
    logger.fine(""String_Node_Str"" + response + ""String_Node_Str""+ uriString);
    if (response == AssetResponse.ASSET_CACHED) {
      AssetID assetID=new AssetID(assetURI,asset.getChecksum());
      asset.setLocalCacheFile(new File(assetCache.getAssetCacheFileName(assetID)));
      return loadAssetFromCache(asset);
    }
 else     if (response == AssetResponse.STREAM_READY) {
      try {
        stream.open();
        loadAssetFromServer(asset,stream);
        assetCache.addAsset(asset,stream.getCachePolicy());
        stream.close();
        return loadAssetFromCache(asset);
      }
 catch (      java.io.IOException excp) {
        logger.log(Level.WARNING,""String_Node_Str"" + ""String_Node_Str"" + uriString,excp);
        continue;
      }
catch (      AssetCacheException excp) {
        logger.log(Level.WARNING,""String_Node_Str"" + ""String_Node_Str"" + uriString,excp);
        continue;
      }
    }
 else {
      continue;
    }
  }
  return null;
}","/** 
 * Downloads the asset from the server and returns the asset upon success or null upon failure
 */
private Object doAssetDownload(){
  AssetURI assetURI=asset.getAssetURI();
  String uriString=assetURI.toExternalForm();
  String originalChecksum=asset.getChecksum();
  AssetRepository repositories[]=factory.getAssetRepositories();
  logger.fine(""String_Node_Str"" + repositories + ""String_Node_Str""+ uriString);
  for (  AssetRepository repository : repositories) {
    logger.fine(""String_Node_Str"" + repository.toString() + ""String_Node_Str""+ assetURI);
    AssetStream stream=repository.openAssetStream(assetURI);
    AssetResponse response=stream.getResponse();
    logger.fine(""String_Node_Str"" + response + ""String_Node_Str""+ uriString);
    if (response == AssetResponse.ASSET_CACHED) {
      AssetID assetID=new AssetID(assetURI,asset.getChecksum());
      asset.setLocalCacheFile(new File(assetCache.getAssetCacheFileName(assetID)));
      return loadAssetFromCache(asset,originalChecksum);
    }
 else     if (response == AssetResponse.STREAM_READY) {
      try {
        stream.open();
        loadAssetFromServer(asset,stream);
        assetCache.addAsset(asset,stream.getCachePolicy());
        stream.close();
        return loadAssetFromCache(asset,originalChecksum);
      }
 catch (      java.io.IOException excp) {
        logger.log(Level.WARNING,""String_Node_Str"" + ""String_Node_Str"" + uriString,excp);
        continue;
      }
catch (      AssetCacheException excp) {
        logger.log(Level.WARNING,""String_Node_Str"" + ""String_Node_Str"" + uriString,excp);
        continue;
      }
    }
 else {
      continue;
    }
  }
  return null;
}"
45980,"/** 
 * Utility routine that attempts to load the asset from the cache and sets the success or failure information in the asset. Returns the asset upon success, and null upon failure.
 */
private Asset loadAssetFromCache(Asset asset){
  AssetURI assetURI=asset.getAssetURI();
  String uriString=assetURI.toExternalForm();
  String checksum=asset.getChecksum();
  logger.fine(""String_Node_Str"" + uriString);
  if (asset.loadLocal() == false) {
    assetFailed(asset,""String_Node_Str"");
    return null;
  }
synchronized (loadingAssets) {
synchronized (loadedAssets) {
      AssetID assetID=new AssetID(assetURI,checksum);
      loadingAssets.remove(assetID);
      loadedAssets.put(assetID,asset);
      assetSuccess(asset);
      logger.fine(""String_Node_Str"" + uriString);
      return asset;
    }
  }
}","/** 
 * Utility routine that attempts to load the asset from the cache and sets the success or failure information in the asset. Returns the asset upon success, and null upon failure.
 */
private Asset loadAssetFromCache(Asset asset,String originalChecksum){
  AssetURI assetURI=asset.getAssetURI();
  String uriString=assetURI.toExternalForm();
  String checksum=asset.getChecksum();
  logger.fine(""String_Node_Str"" + uriString);
  if (asset.loadLocal() == false) {
    assetFailed(asset,""String_Node_Str"");
    return null;
  }
synchronized (loadingAssets) {
synchronized (loadedAssets) {
      AssetID originalID=new AssetID(assetURI,originalChecksum);
      logger.fine(""String_Node_Str"" + uriString + ""String_Node_Str""+ originalChecksum);
      logger.fine(""String_Node_Str"" + loadingAssets.containsKey(originalID));
      loadingAssets.remove(originalID);
      AssetID assetID=new AssetID(assetURI,checksum);
      logger.fine(""String_Node_Str"" + uriString + ""String_Node_Str""+ checksum);
      loadedAssets.put(assetID,asset);
      assetSuccess(asset);
      logger.fine(""String_Node_Str"" + uriString);
      return asset;
    }
  }
}"
45981,"/** 
 * Returns the desired checksum information of the asset.
 */
public abstract String getDesiredChecksum();","/** 
 * Returns the desired checksum information of the asset. The ""desired"" checksum is a String that describes the ""version"" of the asset that should be downloaded. The ""version"" can be an actual checksum or it can be an HTTP if-modified-since value. 
 * @return The desired checksum of the asset
 */
public abstract String getDesiredChecksum();"
45982,"public AssetStream openAssetStream(AssetURI assetURI){
  if (lastModified == -1) {
    logger.fine(""String_Node_Str"" + ""String_Node_Str"" + assetURI.toExternalForm());
  }
  String urlString=getURL(assetURI);
  if (urlString == null) {
    logger.warning(""String_Node_Str"" + assetURI.toExternalForm());
    return new WlContentAssetStream(AssetResponse.ASSET_INVALID,assetURI);
  }
  URLConnection urlConnection=null;
  int response;
  try {
    URL url=new URL(urlString);
    urlConnection=url.openConnection();
    if (lastModified != -1) {
      urlConnection.setIfModifiedSince(lastModified);
    }
    urlConnection.connect();
    response=((HttpURLConnection)urlConnection).getResponseCode();
  }
 catch (  IOException excp) {
    logger.log(Level.WARNING,""String_Node_Str"" + urlString,excp);
    return new WlContentAssetStream(AssetResponse.ASSET_INVALID,assetURI);
  }
  if (response == HttpURLConnection.HTTP_NOT_MODIFIED) {
    logger.fine(""String_Node_Str"" + assetURI.toExternalForm());
    return new WlContentAssetStream(AssetResponse.ASSET_CACHED,assetURI);
  }
 else   if (response == HttpURLConnection.HTTP_OK) {
    logger.fine(""String_Node_Str"" + baseURL + ""String_Node_Str""+ assetURI.toExternalForm());
    return new WlContentAssetStream(AssetResponse.STREAM_READY,assetURI,urlConnection,baseURL);
  }
 else {
    logger.warning(""String_Node_Str"" + urlString + ""String_Node_Str""+ response);
    return new WlContentAssetStream(AssetResponse.ASSET_INVALID,assetURI);
  }
}","public AssetStream openAssetStream(AssetURI assetURI){
  if (lastModified == -1) {
    logger.fine(""String_Node_Str"" + ""String_Node_Str"" + assetURI.toExternalForm());
  }
  String urlString=getURL(assetURI);
  if (urlString == null) {
    logger.warning(""String_Node_Str"" + assetURI.toExternalForm());
    return new WlContentAssetStream(AssetResponse.ASSET_INVALID,assetURI);
  }
  logger.fine(""String_Node_Str"" + urlString + ""String_Node_Str""+ lastModified);
  URLConnection urlConnection=null;
  int response;
  try {
    URL url=new URL(urlString);
    urlConnection=url.openConnection();
    if (lastModified != -1) {
      urlConnection.setIfModifiedSince(lastModified);
    }
    urlConnection.connect();
    response=((HttpURLConnection)urlConnection).getResponseCode();
  }
 catch (  IOException excp) {
    logger.log(Level.WARNING,""String_Node_Str"" + urlString,excp);
    return new WlContentAssetStream(AssetResponse.ASSET_INVALID,assetURI);
  }
  if (response == HttpURLConnection.HTTP_NOT_MODIFIED) {
    logger.fine(""String_Node_Str"" + assetURI.toExternalForm());
    return new WlContentAssetStream(AssetResponse.ASSET_CACHED,assetURI);
  }
 else   if (response == HttpURLConnection.HTTP_OK) {
    logger.fine(""String_Node_Str"" + baseURL + ""String_Node_Str""+ assetURI.toExternalForm());
    return new WlContentAssetStream(AssetResponse.STREAM_READY,assetURI,urlConnection,baseURL);
  }
 else {
    logger.warning(""String_Node_Str"" + urlString + ""String_Node_Str""+ response);
    return new WlContentAssetStream(AssetResponse.ASSET_INVALID,assetURI);
  }
}"
45983,"public WlContentAssetRepositoryFactory(AssetURI assetURI){
  super(assetURI);
  lastModified=getAsLastModified(getChecksumFromDB(assetURI));
}","public WlContentAssetRepositoryFactory(AssetURI assetURI){
  super(assetURI);
  lastModified=getAsLastModified(getChecksumFromDB(assetURI));
  isAlwaysDownload=true;
}"
45984,"/** 
 */
@Override public void open(){
  try {
    inputStream=new BufferedInputStream(urlConnection.getInputStream());
  }
 catch (  IOException excp) {
    logger.log(Level.WARNING,""String_Node_Str"" + getAssetURI().toExternalForm(),excp);
    inputStream=null;
  }
  lastModified=urlConnection.getLastModified();
  contentLength=urlConnection.getContentLength();
}","/** 
 */
@Override public void open(){
  try {
    inputStream=new BufferedInputStream(urlConnection.getInputStream());
  }
 catch (  IOException excp) {
    logger.log(Level.WARNING,""String_Node_Str"" + getAssetURI().toExternalForm(),excp);
    inputStream=null;
  }
  lastModified=urlConnection.getLastModified();
  contentLength=urlConnection.getContentLength();
  logger.fine(""String_Node_Str"" + lastModified + ""String_Node_Str""+ contentLength);
}"
45985,"public WlHttpAssetRepositoryFactory(AssetURI assetURI){
  super(assetURI);
  lastModified=getAsLastModified(getChecksumFromDB(assetURI));
}","public WlHttpAssetRepositoryFactory(AssetURI assetURI){
  super(assetURI);
  lastModified=getAsLastModified(getChecksumFromDB(assetURI));
  isAlwaysDownload=true;
}"
45986,"/** 
 * Load a Collada file and return the graph root
 * @param file
 * @return
 */
public ImportedModel importModel(ImportSettings settings) throws IOException {
  Node modelNode=null;
  URL origFile=settings.getModelURL();
  HashMap<URL,String> textureFilesMapping=new HashMap();
  ImportedModel importedModel=new ImportedModel(origFile,textureFilesMapping);
  SimpleResourceLocator resourceLocator=null;
  try {
    resourceLocator=new RecordingResourceLocator(origFile,textureFilesMapping);
    ResourceLocatorTool.addThreadResourceLocator(ResourceLocatorTool.TYPE_TEXTURE,resourceLocator);
  }
 catch (  URISyntaxException ex) {
    Logger.getLogger(JmeColladaLoader.class.getName()).log(Level.SEVERE,null,ex);
    return null;
  }
  logger.info(""String_Node_Str"" + origFile.toExternalForm());
  BufferedInputStream in=new BufferedInputStream(origFile.openStream());
  modelNode=loadModel(in,getFilename(origFile),true);
  in.close();
  ResourceLocatorTool.removeThreadResourceLocator(ResourceLocatorTool.TYPE_TEXTURE,resourceLocator);
  importedModel.setModelBG(modelNode);
  importedModel.setModelLoader(this);
  importedModel.setImportSettings(settings);
  return importedModel;
}","/** 
 * Load a Collada file and return the graph root
 * @param file
 * @return
 */
public ImportedModel importModel(ImportSettings settings) throws IOException {
  Node modelNode=null;
  URL origFile=settings.getModelURL();
  HashMap<URL,String> textureFilesMapping=new HashMap();
  ImportedModel importedModel=new ImportedModel(origFile,textureFilesMapping);
  SimpleResourceLocator resourceLocator=null;
  try {
    URL baseDir=new URL(origFile.toExternalForm().substring(0,origFile.toExternalForm().lastIndexOf('/') + 1));
    resourceLocator=new RecordingResourceLocator(baseDir,textureFilesMapping);
    ResourceLocatorTool.addThreadResourceLocator(ResourceLocatorTool.TYPE_TEXTURE,resourceLocator);
  }
 catch (  URISyntaxException ex) {
    Logger.getLogger(JmeColladaLoader.class.getName()).log(Level.SEVERE,null,ex);
    return null;
  }
  logger.info(""String_Node_Str"" + origFile.toExternalForm());
  BufferedInputStream in=new BufferedInputStream(origFile.openStream());
  modelNode=loadModel(in,getFilename(origFile),true);
  in.close();
  ResourceLocatorTool.removeThreadResourceLocator(ResourceLocatorTool.TYPE_TEXTURE,resourceLocator);
  importedModel.setModelBG(modelNode);
  importedModel.setModelLoader(this);
  importedModel.setImportSettings(settings);
  return importedModel;
}"
45987,"public DeployedModel deployToModule(File moduleRootDir,ImportedModel importedModel) throws IOException {
  String modelName=getFilename(importedModel.getOriginalURL());
  HashMap<String,String> textureDeploymentMapping=new HashMap();
  DeployedModel deployedModel=new DeployedModel(importedModel.getOriginalURL(),this);
  LoaderData data=new LoaderData();
  data.setDeployedTextures(textureDeploymentMapping);
  data.setModelLoaderClassname(this.getClass().getName());
  deployedModel.setLoaderData(data);
  String moduleName=moduleRootDir.getName();
  String targetDirName=moduleRootDir.getAbsolutePath() + File.separator + ""String_Node_Str""+ File.separator+ modelName;
  File targetDir=new File(targetDirName);
  targetDir.mkdirs();
  deployTextures(targetDir,textureDeploymentMapping,importedModel);
  deployModels(targetDir,moduleName,deployedModel,importedModel,textureDeploymentMapping);
  ModelCellServerState cellSetup=new ModelCellServerState();
  JmeColladaCellComponentServerState setup=new JmeColladaCellComponentServerState();
  cellSetup.addComponentServerState(setup);
  setup.setModel(deployedModel.getDeployedURL());
  System.err.println(""String_Node_Str"" + importedModel.getModelBG().getLocalScale());
  setup.setModelScale(importedModel.getModelBG().getLocalScale());
  setup.setModelRotation(importedModel.getModelBG().getLocalRotation());
  Vector3f offset=importedModel.getRootBG().getLocalTranslation();
  PositionComponentServerState position=new PositionComponentServerState();
  Vector3f boundsCenter=importedModel.getRootBG().getWorldBound().getCenter();
  offset.subtractLocal(boundsCenter);
  setup.setModelTranslation(offset);
  setup.setModelLoaderClassname(importedModel.getModelLoader().getClass().getName());
  position.setTranslation(boundsCenter);
  BoundingVolume worldBounds=importedModel.getModelBG().getWorldBound();
  worldBounds.setCenter(new Vector3f(0,0,0));
  position.setBounds(worldBounds);
  cellSetup.addComponentServerState(position);
  deployedModel.recordModelBGTransform(importedModel.getModelBG());
  deployedModel.addCellServerState(cellSetup);
  System.err.println(""String_Node_Str"" + deployedModel);
  return deployedModel;
}","public DeployedModel deployToModule(File moduleRootDir,ImportedModel importedModel) throws IOException {
  String modelName=getFilename(importedModel.getOriginalURL());
  HashMap<String,String> textureDeploymentMapping=new HashMap();
  DeployedModel deployedModel=new DeployedModel(importedModel.getOriginalURL(),this);
  LoaderData data=new LoaderData();
  data.setDeployedTextures(textureDeploymentMapping);
  data.setModelLoaderClassname(this.getClass().getName());
  deployedModel.setLoaderData(data);
  String moduleName=moduleRootDir.getName();
  String targetDirName=moduleRootDir.getAbsolutePath() + File.separator + ""String_Node_Str""+ File.separator+ modelName;
  File targetDir=new File(targetDirName);
  targetDir.mkdirs();
  deployTextures(targetDir,textureDeploymentMapping,importedModel);
  deployModels(targetDir,moduleName,deployedModel,importedModel,textureDeploymentMapping);
  ModelCellServerState cellSetup=new ModelCellServerState();
  JmeColladaCellComponentServerState setup=new JmeColladaCellComponentServerState();
  cellSetup.addComponentServerState(setup);
  setup.setModel(deployedModel.getDeployedURL());
  setup.setModelScale(importedModel.getModelBG().getLocalScale());
  setup.setModelRotation(importedModel.getModelBG().getLocalRotation());
  Vector3f offset=importedModel.getRootBG().getLocalTranslation();
  PositionComponentServerState position=new PositionComponentServerState();
  Vector3f boundsCenter=importedModel.getRootBG().getWorldBound().getCenter();
  offset.subtractLocal(boundsCenter);
  setup.setModelTranslation(offset);
  setup.setModelLoaderClassname(importedModel.getModelLoader().getClass().getName());
  position.setTranslation(boundsCenter);
  BoundingVolume worldBounds=importedModel.getModelBG().getWorldBound();
  worldBounds.setCenter(new Vector3f(0,0,0));
  position.setBounds(worldBounds);
  cellSetup.addComponentServerState(position);
  deployedModel.recordModelBGTransform(importedModel.getModelBG());
  deployedModel.addCellServerState(cellSetup);
  return deployedModel;
}"
45988,"public Node loadDeployedModel(DeployedModel model){
  InputStream in=null;
  try {
    LoaderData data=null;
    System.err.println(""String_Node_Str"" + model.getDeployedURL());
    URL url=AssetUtils.getAssetURL(getLoaderDataURL(model));
    in=url.openStream();
    if (in == null) {
      logger.severe(""String_Node_Str"" + url.toExternalForm());
    }
 else {
      try {
        data=LoaderData.decode(in);
      }
 catch (      JAXBException ex) {
        Logger.getLogger(JmeColladaLoader.class.getName()).log(Level.SEVERE,""String_Node_Str"" + url.toExternalForm(),ex);
      }
      in.close();
    }
    if (model.getDeployedURL().endsWith(""String_Node_Str""))     in=new GZIPInputStream(AssetUtils.getAssetURL(model.getDeployedURL()).openStream());
 else     in=AssetUtils.getAssetURL(model.getDeployedURL()).openStream();
    String baseURL=model.getDeployedURL();
    baseURL=baseURL.substring(0,baseURL.lastIndexOf('/'));
    Node modelBG;
    Map<String,String> deployedTextures=null;
    if (data != null)     deployedTextures=data.getDeployedTextures();
    ResourceLocator resourceLocator=getDeployedResourceLocator(deployedTextures,baseURL);
    if (resourceLocator != null) {
      ResourceLocatorTool.addThreadResourceLocator(ResourceLocatorTool.TYPE_TEXTURE,resourceLocator);
    }
    modelBG=loadModel(in,getFilename(model.getDeployedURL()),false);
    if (resourceLocator != null) {
      ResourceLocatorTool.removeThreadResourceLocator(ResourceLocatorTool.TYPE_TEXTURE,resourceLocator);
    }
    return modelBG;
  }
 catch (  IOException ex) {
    Logger.getLogger(JmeColladaLoader.class.getName()).log(Level.SEVERE,null,ex);
  }
 finally {
    try {
      if (in != null)       in.close();
    }
 catch (    IOException ex) {
      Logger.getLogger(JmeColladaLoader.class.getName()).log(Level.SEVERE,null,ex);
    }
  }
  return null;
}","public Node loadDeployedModel(DeployedModel model){
  InputStream in=null;
  try {
    LoaderData data=null;
    URL url=AssetUtils.getAssetURL(getLoaderDataURL(model));
    in=url.openStream();
    if (in == null) {
      logger.severe(""String_Node_Str"" + url.toExternalForm());
    }
 else {
      try {
        data=LoaderData.decode(in);
      }
 catch (      JAXBException ex) {
        Logger.getLogger(JmeColladaLoader.class.getName()).log(Level.SEVERE,""String_Node_Str"" + url.toExternalForm(),ex);
      }
      in.close();
    }
    if (model.getDeployedURL().endsWith(""String_Node_Str""))     in=new GZIPInputStream(AssetUtils.getAssetURL(model.getDeployedURL()).openStream());
 else     in=AssetUtils.getAssetURL(model.getDeployedURL()).openStream();
    String baseURL=model.getDeployedURL();
    baseURL=baseURL.substring(0,baseURL.lastIndexOf('/'));
    Node modelBG;
    Map<String,String> deployedTextures=null;
    if (data != null)     deployedTextures=data.getDeployedTextures();
    ResourceLocator resourceLocator=getDeployedResourceLocator(deployedTextures,baseURL);
    if (resourceLocator != null) {
      ResourceLocatorTool.addThreadResourceLocator(ResourceLocatorTool.TYPE_TEXTURE,resourceLocator);
    }
    modelBG=loadModel(in,getFilename(model.getDeployedURL()),false);
    if (resourceLocator != null) {
      ResourceLocatorTool.removeThreadResourceLocator(ResourceLocatorTool.TYPE_TEXTURE,resourceLocator);
    }
    return modelBG;
  }
 catch (  IOException ex) {
    Logger.getLogger(JmeColladaLoader.class.getName()).log(Level.SEVERE,null,ex);
  }
 finally {
    try {
      if (in != null)       in.close();
    }
 catch (    IOException ex) {
      Logger.getLogger(JmeColladaLoader.class.getName()).log(Level.SEVERE,null,ex);
    }
  }
  return null;
}"
45989,"/** 
 * Sets the currently selected Cell. Update the GUI of the Cell Properties frame to reflect the newly-selected Cell's state.
 */
public void setSelectedCell(Cell cell) throws IllegalStateException {
  if (dirtyPanelSet.isEmpty() == false) {
    int result=JOptionPane.showConfirmDialog(this,""String_Node_Str"",""String_Node_Str"",JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE);
    if (result == JOptionPane.YES_OPTION) {
      applyValues();
    }
  }
  int oldSelectedIndex=capabilityList.getSelectedIndex();
  clearPanelSet();
  selectedCell=cell;
  if (selectedCell == null) {
    addCapabilityButton.setEnabled(false);
    return;
  }
  selectedCellServerState=fetchCellServerState();
  if (selectedCellServerState == null) {
    logger.warning(""String_Node_Str"" + cell.getName());
    throw new IllegalStateException(""String_Node_Str"");
  }
  addCapabilityButton.setEnabled(true);
  updatePanelSet();
  if (isVisible() == true) {
    updateGUI();
  }
  if (listModel.getSize() > oldSelectedIndex && oldSelectedIndex != -1) {
    capabilityList.setSelectedIndex(oldSelectedIndex);
  }
 else {
    capabilityList.setSelectedIndex(0);
  }
}","/** 
 * Sets the currently selected Cell. Update the GUI of the Cell Properties frame to reflect the newly-selected Cell's state.
 */
public void setSelectedCell(Cell cell) throws IllegalStateException {
  if (dirtyPanelSet.isEmpty() == false) {
    int result=JOptionPane.showConfirmDialog(this,""String_Node_Str"",""String_Node_Str"",JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE);
    if (result == JOptionPane.YES_OPTION) {
      applyValues();
    }
 else {
      restoreValues();
    }
  }
  int oldSelectedIndex=capabilityList.getSelectedIndex();
  clearPanelSet();
  selectedCell=cell;
  if (selectedCell == null) {
    addCapabilityButton.setEnabled(false);
    return;
  }
  selectedCellServerState=fetchCellServerState();
  if (selectedCellServerState == null) {
    logger.warning(""String_Node_Str"" + cell.getName());
    throw new IllegalStateException(""String_Node_Str"");
  }
  addCapabilityButton.setEnabled(true);
  updatePanelSet();
  if (isVisible() == true) {
    updateGUI();
  }
  if (listModel.getSize() > oldSelectedIndex && oldSelectedIndex != -1) {
    capabilityList.setSelectedIndex(oldSelectedIndex);
  }
 else {
    capabilityList.setSelectedIndex(0);
  }
}"
45990,"public <T extends CellServerState>T getDefaultCellServerState(Properties props){
  ImageViewerCellServerState state=new ImageViewerCellServerState();
  if (props != null) {
    String uri=props.getProperty(""String_Node_Str"");
    if (uri != null) {
      state.setImageURI(uri);
    }
  }
  BoundingVolume boundingVolume=null;
  try {
    Texture texture=getTexture(state.getImageURI());
    com.jme.image.Image image=texture.getImage();
    float width=image.getWidth() * ImageViewerCell.WIDTH_SCALE_FACTOR;
    float height=image.getHeight() * ImageViewerCell.HEIGHT_SCALE_FACTOR;
    boundingVolume=new BoundingBox(Vector3f.ZERO,width,height,ImageViewerCellRenderer.IMAGE_DEPTH);
  }
 catch (  MalformedURLException excp) {
    logger.log(Level.WARNING,""String_Node_Str"" + state.getImageURI(),excp);
  }
  state.setBoundingVolumeHint(new BoundingVolumeHint(true,boundingVolume));
  return (T)state;
}","public <T extends CellServerState>T getDefaultCellServerState(Properties props){
  ImageViewerCellServerState state=new ImageViewerCellServerState();
  if (props != null) {
    String uri=props.getProperty(""String_Node_Str"");
    if (uri != null) {
      state.setImageURI(uri);
    }
  }
  BoundingVolume boundingVolume=null;
  try {
    Texture texture=getTexture(state.getImageURI());
    com.jme.image.Image image=texture.getImage();
    float width=image.getWidth() * ImageViewerCell.WIDTH_SCALE_FACTOR;
    float height=image.getHeight() * ImageViewerCell.HEIGHT_SCALE_FACTOR;
    boundingVolume=new BoundingBox(Vector3f.ZERO,width,height,ImageViewerCellRenderer.IMAGE_DEPTH);
    TextureManager.releaseTexture(texture);
  }
 catch (  MalformedURLException excp) {
    logger.log(Level.WARNING,""String_Node_Str"" + state.getImageURI(),excp);
  }
  state.setBoundingVolumeHint(new BoundingVolumeHint(true,boundingVolume));
  return (T)state;
}"
45991,"/** 
 * {@inheritDoc}
 */
protected Node createSceneGraph(Entity entity){
  Node node=new Node(""String_Node_Str"");
  String textureURI=((ImageViewerCell)cell).getImageURI();
  if (textureURI == null) {
    logger.warning(""String_Node_Str"");
    return node;
  }
  URL url=null;
  try {
    url=getAssetURL(textureURI);
  }
 catch (  MalformedURLException ex) {
    logger.log(Level.WARNING,""String_Node_Str"" + textureURI,ex);
    return node;
  }
  Texture texture=TextureManager.loadTexture(url);
  texture.setWrap(Texture.WrapMode.BorderClamp);
  texture.setTranslation(new Vector3f());
  Image image=texture.getImage();
  float width=image.getWidth() * ImageViewerCell.WIDTH_SCALE_FACTOR;
  float height=image.getHeight() * ImageViewerCell.HEIGHT_SCALE_FACTOR;
  Box box=new Box(""String_Node_Str"",new Vector3f(0,0,0),width,height,IMAGE_DEPTH);
  node.attachChild(box);
  node.setModelBound(new BoundingSphere());
  node.updateModelBound();
  RenderManager rm=ClientContextJME.getWorldManager().getRenderManager();
  TextureState ts=(TextureState)rm.createRendererState(StateType.Texture);
  ts.setTexture(texture);
  ts.setEnabled(true);
  box.setRenderState(ts);
  return node;
}","/** 
 * {@inheritDoc}
 */
protected Node createSceneGraph(Entity entity){
  Node node=new Node(""String_Node_Str"");
  String textureURI=((ImageViewerCell)cell).getImageURI();
  if (textureURI == null) {
    logger.warning(""String_Node_Str"");
    return node;
  }
  URL url=null;
  try {
    url=getAssetURL(textureURI);
  }
 catch (  MalformedURLException ex) {
    logger.log(Level.WARNING,""String_Node_Str"" + textureURI,ex);
    return node;
  }
  Texture texture=TextureManager.loadTexture(url);
  texture.setWrap(Texture.WrapMode.BorderClamp);
  texture.setTranslation(new Vector3f());
  Image image=texture.getImage();
  float width=image.getWidth() * ImageViewerCell.WIDTH_SCALE_FACTOR;
  float height=image.getHeight() * ImageViewerCell.HEIGHT_SCALE_FACTOR;
  Box box=new Box(""String_Node_Str"",new Vector3f(0,0,0),width,height,IMAGE_DEPTH);
  node.attachChild(box);
  node.setModelBound(new BoundingSphere());
  node.updateModelBound();
  RenderManager rm=ClientContextJME.getWorldManager().getRenderManager();
  TextureState ts=(TextureState)rm.createRendererState(StateType.Texture);
  ts.setTexture(texture);
  ts.setEnabled(true);
  box.setRenderState(ts);
  TextureManager.releaseTexture(texture);
  return node;
}"
45992,"/** 
 * Creates a cell in the world given the CellServerState of the cell. If the given CellServerState is null, this method simply does not create a Cell. This method attempts to position the Cell ""optimally"" so that the avatar can see it, based upon ""hints"" about the Cell bounds given to it in the CellServerState.
 * @param state The cell server state for the new cell
 * @throw CellCreationException Upon error creating the cell
 */
public static void createCell(CellServerState state) throws CellCreationException {
  if (state == null) {
    logger.fine(""String_Node_Str"");
    return;
  }
  ViewManager vm=ViewManager.getViewManager();
  ViewCell viewCell=vm.getPrimaryViewCell();
  CellTransform viewTransform=viewCell.getWorldTransform();
  ServerSessionManager manager=viewCell.getCellCache().getSession().getSessionManager();
  CellTransform transform=null;
  BoundingVolumeHint hint=state.getBoundingVolumeHint();
  logger.info(""String_Node_Str"" + hint.getBoundsHint() + ""String_Node_Str""+ hint.isDoSystemPlacement());
  if (hint != null && hint.isDoSystemPlacement() == true) {
    BoundingVolume boundsHint=hint.getBoundsHint();
    transform=CellPlacementUtils.getCellTransform(manager,boundsHint,viewTransform);
  }
 else   if (hint == null) {
    BoundingVolume boundsHint=new BoundingSphere(DEFAULT_RADIUS,Vector3f.ZERO);
    transform=CellPlacementUtils.getCellTransform(manager,boundsHint,viewTransform);
  }
 else   if (hint != null && hint.isDoSystemPlacement() == false) {
    transform=new CellTransform();
  }
  CellID parentID=null;
  Cell parent=CellCreationParentRegistry.getCellCreationParent();
  if (parent != null) {
    parentID=parent.getCellID();
    logger.info(""String_Node_Str"" + parentID.toString());
  }
  if (parentID != null) {
    CellTransform worldTransform=new CellTransform(null,null);
    CellTransform parentTransform=parent.getWorldTransform();
    logger.info(""String_Node_Str"" + parentTransform.getTranslation(null).toString() + ""String_Node_Str""+ parentTransform.getRotation(null).toString());
    transform=CellPlacementUtils.transform(transform,worldTransform,parentTransform);
  }
  logger.info(""String_Node_Str"" + transform.getTranslation(null).toString());
  PositionComponentServerState position=new PositionComponentServerState();
  position.setTranslation(transform.getTranslation(null));
  position.setRotation(transform.getRotation(null));
  position.setScaling(transform.getScaling(null));
  state.addComponentServerState(position);
  state.addComponentServerState(new ViewComponentServerState(viewTransform));
  WonderlandSession session=manager.getPrimarySession();
  CellEditChannelConnection connection=(CellEditChannelConnection)session.getConnection(CellEditConnectionType.CLIENT_TYPE);
  CellCreateMessage msg=new CellCreateMessage(parentID,state);
  connection.send(msg);
}","/** 
 * Creates a cell in the world given the CellServerState of the cell. If the given CellServerState is null, this method simply does not create a Cell. This method attempts to position the Cell ""optimally"" so that the avatar can see it, based upon ""hints"" about the Cell bounds given to it in the CellServerState.
 * @param state The cell server state for the new cell
 * @throw CellCreationException Upon error creating the cell
 */
public static void createCell(CellServerState state) throws CellCreationException {
  if (state == null) {
    logger.fine(""String_Node_Str"");
    return;
  }
  ViewManager vm=ViewManager.getViewManager();
  ViewCell viewCell=vm.getPrimaryViewCell();
  CellTransform viewTransform=viewCell.getWorldTransform();
  ServerSessionManager manager=viewCell.getCellCache().getSession().getSessionManager();
  CellTransform transform=null;
  BoundingVolumeHint hint=state.getBoundingVolumeHint();
  logger.info(""String_Node_Str"" + hint.getBoundsHint() + ""String_Node_Str""+ hint.isDoSystemPlacement());
  if (hint != null && hint.isDoSystemPlacement() == true) {
    BoundingVolume boundsHint=hint.getBoundsHint();
    transform=CellPlacementUtils.getCellTransform(manager,boundsHint,viewTransform);
  }
 else   if (hint == null) {
    BoundingVolume boundsHint=new BoundingSphere(DEFAULT_RADIUS,Vector3f.ZERO);
    transform=CellPlacementUtils.getCellTransform(manager,boundsHint,viewTransform);
  }
 else   if (hint != null && hint.isDoSystemPlacement() == false) {
    transform=new CellTransform();
  }
  CellID parentID=null;
  Cell parent=CellCreationParentRegistry.getCellCreationParent();
  if (parent != null) {
    parentID=parent.getCellID();
    logger.info(""String_Node_Str"" + parentID.toString());
  }
  if (parentID != null) {
    CellTransform worldTransform=new CellTransform(null,null);
    CellTransform parentTransform=parent.getWorldTransform();
    logger.info(""String_Node_Str"" + parentTransform.getTranslation(null).toString() + ""String_Node_Str""+ parentTransform.getRotation(null).toString());
    transform=CellPlacementUtils.transform(transform,worldTransform,parentTransform);
  }
  logger.info(""String_Node_Str"" + transform.getTranslation(null).toString());
  PositionComponentServerState position=(PositionComponentServerState)state.getComponentServerState(PositionComponentServerState.class);
  if (position == null) {
    position=new PositionComponentServerState();
    state.addComponentServerState(position);
  }
  position.setTranslation(transform.getTranslation(null));
  position.setRotation(transform.getRotation(null));
  position.setScaling(transform.getScaling(null));
  state.addComponentServerState(new ViewComponentServerState(viewTransform));
  WonderlandSession session=manager.getPrimarySession();
  CellEditChannelConnection connection=(CellEditChannelConnection)session.getConnection(CellEditConnectionType.CLIENT_TYPE);
  CellCreateMessage msg=new CellCreateMessage(parentID,state);
  connection.send(msg);
}"
45993,"private void createActionPerformed(java.awt.event.ActionEvent evt){
synchronized (cellFactoryMap) {
    String cellDisplayName=(String)cellList.getSelectedValue();
    CellFactorySPI factory=cellFactoryMap.get(cellDisplayName);
    CellServerState setup=factory.getDefaultCellServerState(null);
    try {
      CellUtils.createCell(setup);
    }
 catch (    CellCreationException excp) {
      Logger logger=Logger.getLogger(CellPalette.class.getName());
      logger.log(Level.WARNING,""String_Node_Str"" + cellDisplayName + ""String_Node_Str"",excp);
    }
  }
}","private void createActionPerformed(java.awt.event.ActionEvent evt){
synchronized (cellFactoryMap) {
    final String cellDisplayName=(String)cellList.getSelectedValue();
    final CellFactorySPI factory=cellFactoryMap.get(cellDisplayName);
    new Thread(new Runnable(){
      public void run(){
        CellServerState setup=factory.getDefaultCellServerState(null);
        try {
          CellUtils.createCell(setup);
        }
 catch (        CellCreationException excp) {
          Logger logger=Logger.getLogger(CellPalette.class.getName());
          logger.log(Level.WARNING,""String_Node_Str"" + cellDisplayName + ""String_Node_Str"",excp);
        }
      }
    }
).start();
  }
}"
45994,"public void run(){
  updateListValues();
}","public void run(){
  CellServerState setup=factory.getDefaultCellServerState(null);
  try {
    CellUtils.createCell(setup);
  }
 catch (  CellCreationException excp) {
    Logger logger=Logger.getLogger(CellPalette.class.getName());
    logger.log(Level.WARNING,""String_Node_Str"" + cellDisplayName + ""String_Node_Str"",excp);
  }
}"
45995,"/** 
 * Called when the user cancels the load
 */
void loadCancelled(ImportedModel model){
  if (editingRow >= 0) {
    ImportedModel imp=imports.get(editingRow);
    Node tg=imp.getRootBG();
    Vector3f rot=imp.getOrientation();
    tg.setLocalRotation(calcRotationMatrix(rot.x,rot.y,rot.z));
    tg.setLocalTranslation(imp.getTranslation());
  }
  ClientContextJME.getWorldManager().removeEntity(model.getEntity());
}","/** 
 * Called when the user cancels the load
 */
void loadCancelled(ImportedModel model){
  if (editingRow >= 0) {
    ImportedModel imp=imports.get(editingRow);
    Node tg=imp.getRootBG();
    Vector3f rot=imp.getOrientation();
    tg.setLocalRotation(calcRotationMatrix(rot.x,rot.y,rot.z));
    tg.setLocalTranslation(imp.getTranslation());
  }
  if (model != null)   ClientContextJME.getWorldManager().removeEntity(model.getEntity());
}"
45996,"private void deployToServerBActionPerformed(java.awt.event.ActionEvent evt){
  String moduleName=targetModuleTF.getText();
  ArrayList<DeployedModel> deploymentInfo=new ArrayList();
  WorldManager wm=ClientContextJME.getWorldManager();
  ServerSessionManager targetServer=(ServerSessionManager)targetServerSelector.getSelectedItem();
  ModuleInfo[] modules=ModuleUtils.fetchModuleList(targetServer.getServerURL()).getModuleInfos();
  if (modules != null) {
    boolean conflict=false;
    for (int i=0; i < modules.length && !conflict; i++) {
      if (moduleName.equals(modules[i].getName()))       conflict=true;
    }
    if (conflict) {
      int ret=JOptionPane.showConfirmDialog(this,""String_Node_Str"" + ""String_Node_Str"",""String_Node_Str"",JOptionPane.YES_NO_OPTION);
      if (ret == JOptionPane.NO_OPTION)       return;
    }
  }
  File moduleJar=createModuleJar(deploymentInfo,null);
  final JDialog uploadingDialog=new JDialog(this);
  uploadingDialog.setLayout(new BorderLayout());
  uploadingDialog.add(loadingDialogPanel,BorderLayout.CENTER);
  uploadingDialog.pack();
  uploadingDialog.setSize(200,100);
  uploadingDialog.setVisible(true);
  uploadingDialog.setAlwaysOnTop(true);
  try {
    ModuleUploader uploader=new ModuleUploader(new URL(targetServer.getServerURL()));
    uploader.upload(moduleJar);
  }
 catch (  MalformedURLException ex) {
    Logger.getLogger(ImportSessionFrame.class.getName()).log(Level.SEVERE,null,ex);
    return;
  }
catch (  IOException e) {
    Logger.getLogger(ImportSessionFrame.class.getName()).log(Level.SEVERE,null,e);
    return;
  }
 finally {
    uploadingDialog.setVisible(false);
    uploadingDialog.dispose();
  }
  for (  ImportedModel model : imports) {
    wm.removeEntity(model.getEntity());
  }
  WonderlandSession session=LoginManager.getPrimary().getPrimarySession();
  CellEditChannelConnection connection=(CellEditChannelConnection)session.getConnection(CellEditConnectionType.CLIENT_TYPE);
  for (  DeployedModel info : deploymentInfo) {
    System.err.println(""String_Node_Str"" + info.getCellServerState());
    CellID parentCellID=null;
    CellCreateMessage msg=new CellCreateMessage(parentCellID,info.getCellServerState());
    connection.send(msg);
  }
  tableModel.setRowCount(0);
  imports.clear();
}","private void deployToServerBActionPerformed(java.awt.event.ActionEvent evt){
  String moduleName=targetModuleTF.getText();
  ArrayList<DeployedModel> deploymentInfo=new ArrayList();
  WorldManager wm=ClientContextJME.getWorldManager();
  ServerSessionManager targetServer=(ServerSessionManager)targetServerSelector.getSelectedItem();
  ModuleInfo[] modules=ModuleUtils.fetchModuleList(targetServer.getServerURL()).getModuleInfos();
  if (modules != null) {
    boolean conflict=false;
    for (int i=0; i < modules.length && !conflict; i++) {
      if (moduleName.equals(modules[i].getName()))       conflict=true;
    }
    if (conflict) {
      int ret=JOptionPane.showConfirmDialog(this,""String_Node_Str"" + ""String_Node_Str"",""String_Node_Str"",JOptionPane.YES_NO_OPTION);
      if (ret == JOptionPane.NO_OPTION)       return;
    }
  }
  File moduleJar=createModuleJar(deploymentInfo,null);
  final JDialog uploadingDialog=new JDialog(this);
  uploadingDialog.setLayout(new BorderLayout());
  uploadingDialog.add(loadingDialogPanel,BorderLayout.CENTER);
  uploadingDialog.pack();
  uploadingDialog.setSize(200,100);
  uploadingDialog.setVisible(true);
  uploadingDialog.setAlwaysOnTop(true);
  try {
    ModuleUploader uploader=new ModuleUploader(new URL(targetServer.getServerURL()));
    uploader.upload(moduleJar);
  }
 catch (  MalformedURLException ex) {
    Logger.getLogger(ImportSessionFrame.class.getName()).log(Level.SEVERE,null,ex);
    return;
  }
catch (  IOException e) {
    Logger.getLogger(ImportSessionFrame.class.getName()).log(Level.SEVERE,null,e);
    return;
  }
 finally {
    uploadingDialog.setVisible(false);
    uploadingDialog.dispose();
  }
  for (  ImportedModel model : imports) {
    wm.removeEntity(model.getEntity());
  }
  WonderlandSession session=LoginManager.getPrimary().getPrimarySession();
  CellEditChannelConnection connection=(CellEditChannelConnection)session.getConnection(CellEditConnectionType.CLIENT_TYPE);
  for (  DeployedModel info : deploymentInfo) {
    CellID parentCellID=null;
    CellCreateMessage msg=new CellCreateMessage(parentCellID,info.getCellServerState());
    connection.send(msg);
  }
  tableModel.setRowCount(0);
  imports.clear();
}"
45997,"/** 
 */
public String importFile(File file,String extension){
  final JFrame frame=JmeClientMain.getFrame().getFrame();
  if (isContentExists(file) == true) {
    int result=JOptionPane.showConfirmDialog(frame,""String_Node_Str"" + file.getName() + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"",""String_Node_Str"",JOptionPane.YES_NO_OPTION);
    if (result == JOptionPane.NO_OPTION) {
      return null;
    }
  }
  JOptionPane waitMsg=new JOptionPane(""String_Node_Str"" + file.getName() + ""String_Node_Str"");
  final JDialog dialog=waitMsg.createDialog(frame,""String_Node_Str"");
  SwingUtilities.invokeLater(new Runnable(){
    public void run(){
      dialog.setVisible(true);
    }
  }
);
  String uri=null;
  try {
    uri=uploadContent(file);
  }
 catch (  java.io.IOException excp) {
    logger.log(Level.WARNING,""String_Node_Str"" + file.getAbsolutePath(),excp);
    final String fileName=file.getName();
    SwingUtilities.invokeLater(new Runnable(){
      public void run(){
        dialog.setVisible(false);
        JOptionPane.showMessageDialog(frame,""String_Node_Str"" + fileName,""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
      }
    }
);
    return null;
  }
 finally {
    SwingUtilities.invokeLater(new Runnable(){
      public void run(){
        dialog.setVisible(false);
      }
    }
);
  }
  createCell(uri);
  return uri;
}","/** 
 */
public String importFile(File file,String extension){
  final JFrame frame=JmeClientMain.getFrame().getFrame();
  int result=JOptionPane.YES_OPTION;
  String uri=isContentExists(file);
  if (uri != null) {
    Object[] options={""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
    String msg=""String_Node_Str"" + file.getName() + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
    String title=""String_Node_Str"";
    result=JOptionPane.showOptionDialog(frame,msg,title,JOptionPane.YES_NO_CANCEL_OPTION,JOptionPane.QUESTION_MESSAGE,null,options,options[0]);
    logger.warning(""String_Node_Str"" + result);
    if (result == JOptionPane.CANCEL_OPTION || result == JOptionPane.CLOSED_OPTION) {
      return null;
    }
  }
  if (result == JOptionPane.NO_OPTION) {
    createCell(uri);
    return uri;
  }
  JOptionPane waitMsg=new JOptionPane(""String_Node_Str"" + file.getName() + ""String_Node_Str"");
  final JDialog dialog=waitMsg.createDialog(frame,""String_Node_Str"");
  SwingUtilities.invokeLater(new Runnable(){
    public void run(){
      dialog.setVisible(true);
    }
  }
);
  logger.warning(""String_Node_Str"");
  try {
    uri=uploadContent(file);
  }
 catch (  java.io.IOException excp) {
    logger.log(Level.WARNING,""String_Node_Str"" + file.getAbsolutePath(),excp);
    final String fileName=file.getName();
    SwingUtilities.invokeLater(new Runnable(){
      public void run(){
        dialog.setVisible(false);
        JOptionPane.showMessageDialog(frame,""String_Node_Str"" + fileName,""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
      }
    }
);
    return null;
  }
 finally {
    SwingUtilities.invokeLater(new Runnable(){
      public void run(){
        dialog.setVisible(false);
      }
    }
);
  }
  createCell(uri);
  return uri;
}"
45998,"/** 
 * Returns true if content already exists upload, false if not. This method should return false if the content already exists, but should and can be overwritten.
 * @param file The File of the imported content
 * @return True if the content has already been uploaded, false if not.
 */
public abstract boolean isContentExists(File file);","/** 
 * If the content already exists in the user's content repository, return it's URI. If the content does not exist, return null.
 * @param file The File of the imported content
 * @return The URL of the existing content, null if it does not exist
 */
public abstract String isContentExists(File file);"
45999,"/** 
 */
@Override public boolean isContentExists(File file){
  String fileName=file.getName();
  ContentRepositoryRegistry registry=ContentRepositoryRegistry.getInstance();
  ContentRepository repo=registry.getRepository(loginInfo);
  try {
    ContentCollection userRoot=repo.getUserRoot();
    return userRoot.getChild(fileName) != null;
  }
 catch (  ContentRepositoryException excp) {
    logger.log(Level.WARNING,""String_Node_Str"" + fileName + ""String_Node_Str"",excp);
    return false;
  }
}","/** 
 */
@Override public String isContentExists(File file){
  String fileName=file.getName();
  ContentRepositoryRegistry registry=ContentRepositoryRegistry.getInstance();
  ContentRepository repo=registry.getRepository(loginInfo);
  try {
    ContentCollection userRoot=repo.getUserRoot();
    if (userRoot.getChild(fileName) != null) {
      return ""String_Node_Str"" + loginInfo.getUsername() + ""String_Node_Str""+ fileName;
    }
    return null;
  }
 catch (  ContentRepositoryException excp) {
    logger.log(Level.WARNING,""String_Node_Str"" + fileName + ""String_Node_Str"",excp);
    return null;
  }
}"
46000,"public void run(){
  DefaultMutableTreeNode node=cellNodes.get(cell);
  if (status == CellStatus.DISK) {
    if (node != null) {
      logger.warning(""String_Node_Str"" + cell.getName());
      TreeModel m=cellHierarchyTree.getModel();
      ((DefaultTreeModel)m).removeNodeFromParent(node);
      cellNodes.remove(cell);
    }
  }
 else   if (status == CellStatus.RENDERING) {
    if (node == null) {
      logger.warning(""String_Node_Str"" + cell.getName());
      createJTreeNode(cell);
    }
  }
}","public void run(){
  DefaultMutableTreeNode node=cellNodes.get(cell);
  if (status == CellStatus.DISK) {
    if (node != null) {
      logger.warning(""String_Node_Str"" + cell.getName());
      if (selectedCell == cell) {
        dirtyPanelSet.clear();
      }
      TreeModel m=cellHierarchyTree.getModel();
      ((DefaultTreeModel)m).removeNodeFromParent(node);
      cellNodes.remove(cell);
    }
  }
 else   if (status == CellStatus.RENDERING) {
    if (node == null) {
      logger.warning(""String_Node_Str"" + cell.getName());
      createJTreeNode(cell);
    }
  }
}"
