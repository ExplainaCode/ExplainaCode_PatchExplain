record_number,buggy_code,fixed_code,code_similarity,gpt_explanation
564,"public MyRenderer(HeaderPanel header){
  this.header=Preconditions.checkNotNull(header,""String_Node_Str"");
  setBackground(Color.white);
  setLayout(new FlowLayout(FlowLayout.LEFT,4,2));
  lMean.setHorizontalAlignment(SwingConstants.RIGHT);
  lMean.setForeground(Color.gray);
  lMean.setPreferredSize(header.lMean.getPreferredSize());
  lSpike.setHorizontalAlignment(SwingConstants.RIGHT);
  lSpike.setForeground(Color.gray);
  lSpike.setPreferredSize(header.lSpike.getPreferredSize());
  add(lName);
  add(lMean);
  add(lSpike);
}","MyRenderer(HeaderPanel header){
  this.header=Preconditions.checkNotNull(header,""String_Node_Str"");
  setBackground(Color.white);
  setLayout(new FlowLayout(FlowLayout.LEFT,4,2));
  lMean.setHorizontalAlignment(SwingConstants.RIGHT);
  lMean.setForeground(Color.gray);
  lMean.setPreferredSize(header.lMean.getPreferredSize());
  lSpike.setHorizontalAlignment(SwingConstants.RIGHT);
  lSpike.setForeground(Color.gray);
  lSpike.setPreferredSize(header.lSpike.getPreferredSize());
  add(lName);
  add(lMean);
  add(lSpike);
}",0.9933649289099526,Error
39,"/** 
 * @param urlStr
 * @param method
 * @return
 * @throws IOException
 * @throws HttpException
 * @throws FetcherException
 * @throws FeedException
 */
private static SyndFeed retrieveFeed(String urlStr,HttpMethod method) throws IOException, FetcherException, FeedException {
  InputStream stream=null;
  if ((method.getResponseHeader(""String_Node_Str"") != null) && (""String_Node_Str"".equalsIgnoreCase(method.getResponseHeader(""String_Node_Str"").getValue()))) {
    stream=new GZIPInputStream(method.getResponseBodyAsStream());
  }
 else {
    stream=method.getResponseBodyAsStream();
  }
  try {
    XmlReader reader=null;
    if (method.getResponseHeader(""String_Node_Str"") != null) {
      reader=new XmlReader(stream,method.getResponseHeader(""String_Node_Str"").getValue(),true);
    }
 else {
      reader=new XmlReader(stream,true);
    }
    return new SyndFeedInput().build(reader);
  }
  finally {
    if (stream != null) {
      stream.close();
    }
  }
}","private static SyndFeed retrieveFeed(String urlStr,HttpMethod method) throws IOException, FeedException {
  InputStream stream=null;
  if ((method.getResponseHeader(""String_Node_Str"") != null) && (""String_Node_Str"".equalsIgnoreCase(method.getResponseHeader(""String_Node_Str"").getValue()))) {
    stream=new GZIPInputStream(method.getResponseBodyAsStream());
  }
 else {
    stream=method.getResponseBodyAsStream();
  }
  try {
    XmlReader reader=null;
    if (method.getResponseHeader(""String_Node_Str"") != null) {
      reader=new XmlReader(stream,method.getResponseHeader(""String_Node_Str"").getValue(),true);
    }
 else {
      reader=new XmlReader(stream,true);
    }
    return new SyndFeedInput().build(reader);
  }
  finally {
    if (stream != null) {
      stream.close();
    }
  }
}",0.8224617129892229,Error
488,"public BlurredAmbientOcclusionNode(Context context){
  RenderingConfig renderingConfig=context.get(Config.class).getRendering();
  renderingConfig.subscribe(RenderingConfig.SSAO,this);
  requiresCondition(renderingConfig::isSsao);
  addDesiredStateChange(new EnableMaterial(SSAO_BLURRED_MATERIAL));
  ssaoBlurredMaterial=getMaterial(SSAO_BLURRED_MATERIAL);
  displayResolutionDependentFBOs=context.get(DisplayResolutionDependentFBOs.class);
  requiresFBO(new FBOConfig(SSAO_FBO,FULL_SCALE,FBO.Type.DEFAULT),displayResolutionDependentFBOs);
  requiresFBO(new FBOConfig(SSAO_BLURRED_FBO,FULL_SCALE,FBO.Type.DEFAULT),displayResolutionDependentFBOs);
  addDesiredStateChange(new BindFBO(SSAO_BLURRED_FBO,displayResolutionDependentFBOs));
  addDesiredStateChange(new SetViewportToSizeOf(SSAO_BLURRED_FBO,displayResolutionDependentFBOs));
  update();
  displayResolutionDependentFBOs.subscribe(this);
  addDesiredStateChange(new SetInputTextureFromFBO(TEXTURE_SLOT_0,SSAO_FBO,ColorTexture,displayResolutionDependentFBOs,SSAO_BLURRED_MATERIAL,""String_Node_Str""));
}","public BlurredAmbientOcclusionNode(Context context){
  super(context);
  RenderingConfig renderingConfig=context.get(Config.class).getRendering();
  renderingConfig.subscribe(RenderingConfig.SSAO,this);
  requiresCondition(renderingConfig::isSsao);
  addDesiredStateChange(new EnableMaterial(SSAO_BLURRED_MATERIAL));
  ssaoBlurredMaterial=getMaterial(SSAO_BLURRED_MATERIAL);
  displayResolutionDependentFBOs=context.get(DisplayResolutionDependentFBOs.class);
  requiresFBO(new FBOConfig(SSAO_FBO,FULL_SCALE,FBO.Type.DEFAULT),displayResolutionDependentFBOs);
  requiresFBO(new FBOConfig(SSAO_BLURRED_FBO,FULL_SCALE,FBO.Type.DEFAULT),displayResolutionDependentFBOs);
  addDesiredStateChange(new BindFBO(SSAO_BLURRED_FBO,displayResolutionDependentFBOs));
  addDesiredStateChange(new SetViewportToSizeOf(SSAO_BLURRED_FBO,displayResolutionDependentFBOs));
  update();
  displayResolutionDependentFBOs.subscribe(this);
  addDesiredStateChange(new SetInputTextureFromFBO(TEXTURE_SLOT_0,SSAO_FBO,ColorTexture,displayResolutionDependentFBOs,SSAO_BLURRED_MATERIAL,""String_Node_Str""));
}",0.9915651358950328,Error
274,"/** 
 * Ensures that the supplied logical line is within the range 0 (incl) and the number of logical lines in the file (excl).
 * @param editor The editor
 * @param lline The logical line number to normalize
 * @return The normalized logical line number
 */
public static int normalizeLine(Editor editor,int lline){
  lline=Math.min(Math.max(0,lline),getLineCount(editor) - 1);
  return lline;
}","/** 
 * Ensures that the supplied logical line is within the range 0 (incl) and the number of logical lines in the file (excl).
 * @param editor The editor
 * @param lline The logical line number to normalize
 * @return The normalized logical line number
 */
public static int normalizeLine(Editor editor,int lline){
  lline=Math.max(0,Math.min(lline,getLineCount(editor) - 1));
  return lline;
}",0.9621212121212122,Error
978,"private byte getNextId(){
  if (nextId > MAX_ID) {
    return UNKNOWN_ID;
  }
  return (byte)nextId++;
}","private short getNextId(){
  if (nextId > MAX_ID) {
    return UNKNOWN_ID;
  }
  return (short)nextId++;
}",0.9333333333333332,Error
