record_number,buggy_code,fixed_code,code_similarity
35001,"public static ContentType extractRequestContentType(final SubLocatorParameter param) throws ODataUnsupportedMediaTypeException {
  final String contentType=param.getHttpHeaders().getHeaderString(HttpHeaders.CONTENT_TYPE);
  if (contentType == null || contentType.isEmpty()) {
    return ContentType.APPLICATION_OCTET_STREAM;
  }
 else   if (ContentType.isParseable(contentType)) {
    return ContentType.create(contentType);
  }
 else {
    throw new ODataUnsupportedMediaTypeException(ODataUnsupportedMediaTypeException.NOT_SUPPORTED_CONTENT_TYPE.addContent(contentType));
  }
}","public static ContentType extractRequestContentType(final SubLocatorParameter param) throws ODataUnsupportedMediaTypeException {
  String contentType=getSafeHeader(HttpHeaders.CONTENT_TYPE,param.getHttpHeaders());
  if (contentType == null || contentType.isEmpty()) {
    return ContentType.APPLICATION_OCTET_STREAM;
  }
 else   if (ContentType.isParseable(contentType)) {
    return ContentType.create(contentType);
  }
 else {
    throw new ODataUnsupportedMediaTypeException(ODataUnsupportedMediaTypeException.NOT_SUPPORTED_CONTENT_TYPE.addContent(contentType));
  }
}",0.8834782608695653
35002,"@Test public void serviceDocumentAcceptHeaderJson() throws Exception {
  final HttpResponse response=callUri(""String_Node_Str"",HttpHeaders.ACCEPT,HttpContentType.APPLICATION_JSON);
  assertEquals(""String_Node_Str"" + ""String_Node_Str"",getBody(response));
}","@Test public void serviceDocumentAcceptHeaderJson() throws Exception {
  final HttpResponse response=callUri(""String_Node_Str"",HttpHeaders.ACCEPT,HttpContentType.APPLICATION_JSON);
  String body=getBody(response);
  Assert.assertTrue(jsonDataResponseContains(body,""String_Node_Str""));
  Assert.assertTrue(jsonDataResponseContains(body,""String_Node_Str""));
  Assert.assertTrue(jsonDataResponseContains(body,""String_Node_Str""));
  Assert.assertTrue(jsonDataResponseContains(body,""String_Node_Str""));
  Assert.assertTrue(jsonDataResponseContains(body,""String_Node_Str""));
  Assert.assertTrue(jsonDataResponseContains(body,""String_Node_Str""));
}",0.4553571428571428
35003,"@Test public void serviceDocumentDollarFormatJson() throws Exception {
  final HttpResponse response=callUri(""String_Node_Str"");
  assertEquals(""String_Node_Str"" + ""String_Node_Str"",getBody(response));
}","@Test public void serviceDocumentDollarFormatJson() throws Exception {
  final HttpResponse response=callUri(""String_Node_Str"");
  String body=getBody(response);
  Assert.assertTrue(jsonDataResponseContains(body,""String_Node_Str""));
  Assert.assertTrue(jsonDataResponseContains(body,""String_Node_Str""));
  Assert.assertTrue(jsonDataResponseContains(body,""String_Node_Str""));
  Assert.assertTrue(jsonDataResponseContains(body,""String_Node_Str""));
  Assert.assertTrue(jsonDataResponseContains(body,""String_Node_Str""));
  Assert.assertTrue(jsonDataResponseContains(body,""String_Node_Str""));
}",0.3459595959595959
35004,"private static URI buildBaseUri(final HttpServletRequest request,final javax.ws.rs.core.UriInfo uriInfo,final List<PathSegment> precedingPathSegments) throws ODataException {
  try {
    UriBuilder uriBuilder=uriInfo.getBaseUriBuilder();
    for (    final PathSegment ps : precedingPathSegments) {
      uriBuilder=uriBuilder.path(ps.getPath());
      for (      final String key : ps.getMatrixParameters().keySet()) {
        final Object[] v=ps.getMatrixParameters().get(key).toArray();
        uriBuilder=uriBuilder.matrixParam(key,v);
      }
    }
    uriBuilder.host(request.getServerName());
    String uriString=uriBuilder.build().toString();
    if (!uriString.endsWith(""String_Node_Str"")) {
      uriString=uriString + ""String_Node_Str"";
    }
    return new URI(uriString);
  }
 catch (  final URISyntaxException e) {
    throw new ODataException(e);
  }
}","private static URI buildBaseUri(final HttpServletRequest request,final List<PathSegment> precedingPathSegments) throws ODataException {
  try {
    UriBuilder uriBuilder=UriBuilder.fromUri(request.getServletPath());
    for (    final PathSegment ps : precedingPathSegments) {
      uriBuilder=uriBuilder.path(ps.getPath());
      for (      final String key : ps.getMatrixParameters().keySet()) {
        final Object[] v=ps.getMatrixParameters().get(key).toArray();
        uriBuilder=uriBuilder.matrixParam(key,v);
      }
    }
    uriBuilder.host(request.getServerName()).port(request.getServerPort());
    uriBuilder.scheme(request.getScheme());
    String uriString=uriBuilder.build().toString();
    if (!uriString.endsWith(""String_Node_Str"")) {
      uriString=uriString + ""String_Node_Str"";
    }
    return new URI(uriString);
  }
 catch (  final URISyntaxException e) {
    throw new ODataException(e);
  }
}",0.9026845637583892
35005,"public static PathInfoImpl buildODataPathInfo(final SubLocatorParameter param) throws ODataException {
  final UriInfo uriInfo=param.getUriInfo();
  PathInfoImpl pathInfo=splitPath(param);
  pathInfo.setServiceRoot(buildBaseUri(param.getServletRequest(),uriInfo,pathInfo.getPrecedingSegments()));
  pathInfo.setRequestUri(uriInfo.getRequestUri());
  return pathInfo;
}","public static PathInfoImpl buildODataPathInfo(final SubLocatorParameter param) throws ODataException {
  PathInfoImpl pathInfo=splitPath(param);
  pathInfo.setServiceRoot(buildBaseUri(param.getServletRequest(),pathInfo.getPrecedingSegments()));
  pathInfo.setRequestUri(buildRequestUri(param.getServletRequest()));
  return pathInfo;
}",0.8677098150782361
35006,"/** 
 * Extended test for combination of precision with dates before 1970 (and for regression after 1970)
 */
@Test public void valueToStringDateTimeSpecial() throws Exception {
  for (int precision=0; precision < 3; precision++) {
    try {
      assertValueToStringDateTimeSpecial(1954,7,4,precision);
      fail(""String_Node_Str"");
    }
 catch (    EdmSimpleTypeException e) {
    }
    try {
      assertValueToStringDateTimeSpecial(1999,7,4,precision);
      fail(""String_Node_Str"");
    }
 catch (    EdmSimpleTypeException e) {
    }
  }
  for (int precision=3; precision < 6; precision++) {
    assertValueToStringDateTimeSpecial(1954,7,4,precision);
    assertValueToStringDateTimeSpecial(1999,7,4,precision);
  }
}","/** 
 * Extended test for combination of precision with dates before 1970 (and for regression after 1970)
 */
@Test public void valueToStringDateTimeSpecial() throws Exception {
  for (int precision=0; precision < 3; precision++) {
    final EdmSimpleType instance=EdmSimpleTypeKind.DateTime.getEdmSimpleTypeInstance();
    final EdmFacets facets=getPrecisionScaleFacets(precision,null);
    final Calendar date=Calendar.getInstance(TimeZone.getTimeZone(""String_Node_Str""));
    date.set(Calendar.MILLISECOND,10 * precision + 1);
    date.set(1954,7,4);
    expectErrorInValueToString(instance,date,EdmLiteralKind.DEFAULT,facets,EdmSimpleTypeException.VALUE_FACETS_NOT_MATCHED);
    date.set(1999,7,4);
    expectErrorInValueToString(instance,date,EdmLiteralKind.DEFAULT,facets,EdmSimpleTypeException.VALUE_FACETS_NOT_MATCHED);
  }
  for (int precision=3; precision < 6; precision++) {
    assertValueToStringDateTimeSpecial(1954,7,4,precision);
    assertValueToStringDateTimeSpecial(1999,7,4,precision);
  }
}",0.5311059907834101
35007,"private void assertValueToStringDateTimeSpecial(int year,int month,int day,int precision) throws Exception {
  final EdmSimpleType instance=EdmSimpleTypeKind.DateTime.getEdmSimpleTypeInstance();
  final StringBuilder regExToMatch=new StringBuilder();
  regExToMatch.append(year).append(""String_Node_Str"");
  if (month < 9) {
    regExToMatch.append(""String_Node_Str"");
  }
  regExToMatch.append(month + 1).append(""String_Node_Str"");
  if (day < 10) {
    regExToMatch.append(""String_Node_Str"");
  }
  regExToMatch.append(day).append(""String_Node_Str"");
  if (precision > 0) {
    regExToMatch.append(""String_Node_Str"");
  }
  for (int i=0; i < precision; i++) {
    regExToMatch.append(""String_Node_Str"");
  }
  Calendar date=Calendar.getInstance(TimeZone.getTimeZone(""String_Node_Str""));
  date.set(year,month,day);
  String formated=instance.valueToString(date,EdmLiteralKind.DEFAULT,getPrecisionScaleFacets(precision,null));
  assertTrue(""String_Node_Str"" + formated + ""String_Node_Str""+ precision+ ""String_Node_Str""+ regExToMatch.toString()+ ""String_Node_Str"",formated.matches(regExToMatch.toString()));
}","private void assertValueToStringDateTimeSpecial(int year,int month,int day,int precision) throws Exception {
  final EdmSimpleType instance=EdmSimpleTypeKind.DateTime.getEdmSimpleTypeInstance();
  final StringBuilder regExToMatch=new StringBuilder();
  regExToMatch.append(year).append(""String_Node_Str"");
  if (month < 9) {
    regExToMatch.append(""String_Node_Str"");
  }
  regExToMatch.append(month + 1).append(""String_Node_Str"");
  if (day < 10) {
    regExToMatch.append(""String_Node_Str"");
  }
  regExToMatch.append(day).append(""String_Node_Str"");
  if (precision > 0) {
    regExToMatch.append(""String_Node_Str"");
  }
  for (int i=0; i < precision; i++) {
    regExToMatch.append(""String_Node_Str"");
  }
  Calendar date=Calendar.getInstance(TimeZone.getTimeZone(""String_Node_Str""));
  date.set(year,month,day);
  date.set(Calendar.MILLISECOND,10 * precision + 1);
  String formated=instance.valueToString(date,EdmLiteralKind.DEFAULT,getPrecisionScaleFacets(precision,null));
  assertTrue(""String_Node_Str"" + formated + ""String_Node_Str""+ precision+ ""String_Node_Str""+ regExToMatch.toString()+ ""String_Node_Str"",formated.matches(regExToMatch.toString()));
}",0.9766622633201232
35008,"public static void setFacets(final Attribute<?,?> jpaAttribute,final SimpleProperty edmProperty){
  EdmSimpleTypeKind edmTypeKind=edmProperty.getType();
  Facets facets=new Facets();
  edmProperty.setFacets(facets);
  Column column=null;
  if (jpaAttribute.getJavaMember() instanceof AnnotatedElement) {
    column=((AnnotatedElement)jpaAttribute.getJavaMember()).getAnnotation(Column.class);
  }
 else {
    return;
  }
  setNullable(column,edmProperty);
switch (edmTypeKind) {
case Binary:
    setMaxLength(column,edmProperty);
  break;
case DateTime:
setPrecision(column,edmProperty);
break;
case DateTimeOffset:
setPrecision(column,edmProperty);
break;
case Time:
setPrecision(column,edmProperty);
break;
case Decimal:
setPrecision(column,edmProperty);
setScale(column,edmProperty);
break;
case String:
setMaxLength(column,edmProperty);
break;
default :
break;
}
}","public static void setFacets(final Attribute<?,?> jpaAttribute,final SimpleProperty edmProperty){
  EdmSimpleTypeKind edmTypeKind=edmProperty.getType();
  Facets facets=new Facets();
  edmProperty.setFacets(facets);
  Column column=null;
  if (jpaAttribute.getJavaMember() instanceof AnnotatedElement) {
    column=((AnnotatedElement)jpaAttribute.getJavaMember()).getAnnotation(Column.class);
  }
  if (column == null)   return;
  setNullable(column,edmProperty);
switch (edmTypeKind) {
case Binary:
    setMaxLength(column,edmProperty);
  break;
case DateTime:
setPrecision(column,edmProperty);
break;
case DateTimeOffset:
setPrecision(column,edmProperty);
break;
case Time:
setPrecision(column,edmProperty);
break;
case Decimal:
setPrecision(column,edmProperty);
setScale(column,edmProperty);
break;
case String:
setMaxLength(column,edmProperty);
break;
default :
break;
}
}",0.970183486238532
35009,"@Override public void readFromNBT(NBTTagCompound nbt){
  super.readFromNBT(nbt);
  if (node != null && node.host() == this) {
    node.load(nbt.getCompoundTag(""String_Node_Str""));
  }
  if (oc_fs != null && oc_fs.node() != null) {
    oc_fs.node().load(nbt.getCompoundTag(""String_Node_Str""));
  }
  NBTTagList var2=nbt.getTagList(""String_Node_Str"",nbt.getId());
  this.CardWriterItemStacks=new ItemStack[this.getSizeInventory()];
  for (int var3=0; var3 < var2.tagCount(); ++var3) {
    NBTTagCompound var4=var2.getCompoundTagAt(var3);
    byte var5=var4.getByte(""String_Node_Str"");
    if (var5 >= 0 && var5 < this.CardWriterItemStacks.length) {
      this.CardWriterItemStacks[var5]=ItemStack.loadItemStackFromNBT(var4);
    }
  }
}","@Override public void readFromNBT(NBTTagCompound nbt){
  super.readFromNBT(nbt);
  if (node != null && node.host() == this) {
    node.load(nbt.getCompoundTag(""String_Node_Str""));
  }
  if (oc_fs != null && oc_fs().node() != null) {
    oc_fs().node().load(nbt.getCompoundTag(""String_Node_Str""));
  }
  NBTTagList var2=nbt.getTagList(""String_Node_Str"",nbt.getId());
  this.CardWriterItemStacks=new ItemStack[this.getSizeInventory()];
  for (int var3=0; var3 < var2.tagCount(); ++var3) {
    NBTTagCompound var4=var2.getCompoundTagAt(var3);
    byte var5=var4.getByte(""String_Node_Str"");
    if (var5 >= 0 && var5 < this.CardWriterItemStacks.length) {
      this.CardWriterItemStacks[var5]=ItemStack.loadItemStackFromNBT(var4);
    }
  }
}",0.9972826086956522
35010,"@Override public void onChunkUnload(){
  super.onChunkUnload();
  if (node != null)   node.remove();
}","@Override public void onChunkUnload(){
  super.onChunkUnload();
  if (node != null) {
    node.remove();
  }
}",0.9622641509433962
35011,"@Override public void onConnect(final Node node){
  if (node.host() instanceof Context) {
    node.connect(oc_fs.node());
  }
}","@Override public void onConnect(final Node node){
  if (node == node()) {
    node.connect(oc_fs().node());
  }
}",0.8666666666666667
35012,"private void initOCFilesystem(){
  oc_fs=li.cil.oc.api.FileSystem.asManagedEnvironment(li.cil.oc.api.FileSystem.fromClass(OpenSecurity.class,OpenSecurity.MODID,""String_Node_Str""),""String_Node_Str"");
  ((Component)oc_fs.node()).setVisibility(Visibility.Neighbors);
}","private void initOCFilesystem(){
  oc_fs=li.cil.oc.api.FileSystem.asManagedEnvironment(li.cil.oc.api.FileSystem.fromClass(OpenSecurity.class,OpenSecurity.MODID,""String_Node_Str""),""String_Node_Str"");
  ((Component)oc_fs().node()).setVisibility(Visibility.Network);
}",0.9735849056603774
35013,"@Override public void writeToNBT(NBTTagCompound nbt){
  super.writeToNBT(nbt);
  if (node != null && node.host() == this) {
    final NBTTagCompound nodeNbt=new NBTTagCompound();
    node.save(nodeNbt);
    nbt.setTag(""String_Node_Str"",nodeNbt);
  }
  if (oc_fs != null && oc_fs.node() != null) {
    final NBTTagCompound fsNbt=new NBTTagCompound();
    oc_fs.node().save(fsNbt);
    nbt.setTag(""String_Node_Str"",fsNbt);
  }
  NBTTagList var2=new NBTTagList();
  for (int var3=0; var3 < this.CardWriterItemStacks.length; ++var3) {
    if (this.CardWriterItemStacks[var3] != null) {
      NBTTagCompound var4=new NBTTagCompound();
      var4.setByte(""String_Node_Str"",(byte)var3);
      this.CardWriterItemStacks[var3].writeToNBT(var4);
      var2.appendTag(var4);
    }
  }
  nbt.setTag(""String_Node_Str"",var2);
}","@Override public void writeToNBT(NBTTagCompound nbt){
  super.writeToNBT(nbt);
  if (node != null && node.host() == this) {
    final NBTTagCompound nodeNbt=new NBTTagCompound();
    node.save(nodeNbt);
    nbt.setTag(""String_Node_Str"",nodeNbt);
  }
  if (oc_fs != null && oc_fs().node() != null) {
    final NBTTagCompound fsNbt=new NBTTagCompound();
    oc_fs().node().save(fsNbt);
    nbt.setTag(""String_Node_Str"",fsNbt);
  }
  NBTTagList var2=new NBTTagList();
  for (int var3=0; var3 < this.CardWriterItemStacks.length; ++var3) {
    if (this.CardWriterItemStacks[var3] != null) {
      NBTTagCompound var4=new NBTTagCompound();
      var4.setByte(""String_Node_Str"",(byte)var3);
      this.CardWriterItemStacks[var3].writeToNBT(var4);
      var2.appendTag(var4);
    }
  }
  nbt.setTag(""String_Node_Str"",var2);
}",0.9975460122699388
35014,"@Override public void onDisconnect(final Node node){
  if (node.host() instanceof Context) {
    node.disconnect(oc_fs.node());
  }
 else   if (node == this.node) {
    oc_fs.node().remove();
  }
}","@Override public void onDisconnect(final Node node){
  if (node.host() instanceof Context) {
    node.disconnect(oc_fs().node());
  }
 else   if (node == this.node) {
    oc_fs().node().remove();
  }
}",0.9899497487437184
35015,"@Override public void invalidate(){
  super.invalidate();
  if (node != null)   node.remove();
}","@Override public void invalidate(){
  super.invalidate();
  if (node != null) {
    node.remove();
  }
}",0.96
35016,"@Override public void updateEntity(){
  super.updateEntity();
  if (node != null && node.network() == null) {
    Network.joinOrCreateNetwork(this);
  }
}","@Override public void updateEntity(){
  super.updateEntity();
  if (!addedToNetwork) {
    addToNetwork();
  }
}",0.6766917293233082
35017,"@Override public void onNeighborBlockChange(World world,int x,int y,int z,Block block){
  int meta=world.getBlockMetadata(x,y,z);
  if ((meta & 8) == 0) {
    boolean breakBlock=false;
    if (world.getBlock(x,y + 1,z) != this) {
      world.setBlockToAir(x,y,z);
      breakBlock=true;
    }
    if (!World.doesBlockHaveSolidTopSurface(world,x,y - 1,z)) {
      world.setBlockToAir(x,y,z);
      breakBlock=true;
      if (world.getBlock(x,y + 1,z) == this) {
        world.setBlockToAir(x,y + 1,z);
      }
    }
    if (breakBlock) {
      if (!world.isRemote) {
        this.dropBlockAsItem(world,x,y,z,meta,0);
      }
    }
  }
 else {
    if (world.getBlock(x,y - 1,z) != this) {
      world.setBlockToAir(x,y,z);
    }
    if (block != this) {
      this.onNeighborBlockChange(world,x,y - 1,z,block);
    }
  }
}","@Override public void onNeighborBlockChange(World world,int x,int y,int z,Block block){
  int meta=world.getBlockMetadata(x,y,z);
  if ((meta & 8) == 0) {
    boolean breakBlock=false;
    if (world.getBlock(x,y + 1,z) != this) {
      world.setBlockToAir(x,y,z);
      breakBlock=true;
    }
    if (!World.doesBlockHaveSolidTopSurface(world,x,y - 1,z)) {
      world.setBlockToAir(x,y,z);
      breakBlock=true;
      if (world.getBlock(x,y + 1,z) == this) {
        world.setBlockToAir(x,y + 1,z);
      }
    }
    if (breakBlock) {
      if (!world.isRemote) {
      }
    }
  }
 else {
    if (world.getBlock(x,y - 1,z) != this) {
      world.setBlockToAir(x,y,z);
    }
    if (block != this) {
      this.onNeighborBlockChange(world,x,y - 1,z,block);
    }
  }
}",0.7333333333333333
35018,"@Override public Object getClientGuiElement(int ID,EntityPlayer player,World world,int x,int y,int z){
  TileEntity te=world.getTileEntity(x,y,z);
  if (te != null && te instanceof TileEntityMagReader) {
    TileEntityMagReader icte=(TileEntityMagReader)te;
    return new MagCardContainer(player.inventory,icte);
  }
 else   if (te != null && te instanceof TileEntityRFIDReader) {
    TileEntityCardWriter icte=(TileEntityCardWriter)te;
    return new RFIDWriterContainer(player.inventory,icte);
  }
 else {
    return null;
  }
}","@Override public Object getClientGuiElement(int ID,EntityPlayer player,World world,int x,int y,int z){
  TileEntity te=world.getTileEntity(x,y,z);
  if (te != null && te instanceof TileEntityMagReader) {
    TileEntityMagReader icte=(TileEntityMagReader)te;
    return new MagCardContainer(player.inventory,icte);
  }
 else   if (te != null && te instanceof TileEntityRFIDReader) {
    TileEntityCardWriter icte=(TileEntityCardWriter)te;
    return new CardWriterContainer(player.inventory,icte);
  }
 else {
    return null;
  }
}",0.992467043314501
35019,"@Override public Object getClientGuiElement(int ID,EntityPlayer player,World world,int x,int y,int z){
  TileEntity te=world.getTileEntity(x,y,z);
  if (te != null && te instanceof TileEntityRFIDReader) {
    TileEntityCardWriter icte=(TileEntityCardWriter)te;
    return new RFIDWriterContainer(player.inventory,icte);
  }
 else {
    return null;
  }
}","@Override public Object getClientGuiElement(int ID,EntityPlayer player,World world,int x,int y,int z){
  TileEntity te=world.getTileEntity(x,y,z);
  if (te != null && te instanceof TileEntityRFIDReader) {
    TileEntityCardWriter icte=(TileEntityCardWriter)te;
    return new CardWriterContainer(player.inventory,icte);
  }
 else {
    return null;
  }
}",0.9887005649717514
35020,"public boolean isItemValid(ItemStack itemstack){
  if (itemstack.getItem() instanceof ItemRFIDCard || itemstack.getItem() instanceof ItemMagCard || itemstack.getItem() instanceof EEPROM) {
    if (itemstack.stackTagCompound == null || !itemstack.stackTagCompound.hasKey(""String_Node_Str"") || !itemstack.stackTagCompound.hasKey(""String_Node_Str"")) {
      return true;
    }
 else {
      return false;
    }
  }
  return false;
}","@Override public boolean isItemValid(ItemStack itemstack){
  if (itemstack.getItem() instanceof ItemRFIDCard || itemstack.getItem() instanceof ItemMagCard || itemstack.getItem() instanceof EEPROM) {
    if (itemstack.stackTagCompound == null || !itemstack.stackTagCompound.hasKey(""String_Node_Str"") || !itemstack.stackTagCompound.hasKey(""String_Node_Str"")) {
      return true;
    }
 else {
      return false;
    }
  }
  return false;
}",0.988479262672811
35021,"protected double getValue(){
  return mValue;
}","public double getValue(){
  return mValue;
}",0.8791208791208791
35022,"/** 
 * Update the value of this fractional currency with the value of the parent currency, presumably after the parent has been updated
 */
public void updateFractionalValue(){
  if (isFractionCurrency() && mParentCurrency != null) {
    setValue(mFraction * mParentCurrency.getValue());
  }
}","/** 
 * Update the value of this fractional currency with the value of the parent currency, presumably after the parent has been updated
 */
public void updateFractionalValue(double parent){
  if (isFractionCurrency()) {
    setValue(mFraction * parent);
  }
}",0.8700361010830325
35023,"/** 
 * Load in the update time
 */
@Override public boolean loadJSON(JSONObject json) throws JSONException {
  boolean success=super.loadJSON(json);
  if (success) {
    setUpdateTime(new Date(json.getLong(JSON_LAST_UPDATE)));
  }
  return success;
}","/** 
 * Load in the update time
 */
@Override public boolean loadJSON(JSONObject json) throws JSONException {
  boolean success=super.loadJSON(json);
  if (success) {
    setUpdateDate(new Date(json.getLong(JSON_LAST_UPDATE)));
    mFraction=json.getDouble(JSON_FRACTION_VALUE);
    mParentCurrency=json.getString(JSON_FRACTION_PARENT);
  }
  return success;
}",0.8117839607201309
35024,"/** 
 * Save the update time
 */
@Override public JSONObject toJSON() throws JSONException {
  JSONObject json=super.toJSON();
  json.put(JSON_LAST_UPDATE,mTimeLastUpdated.getTime());
  return json;
}","/** 
 * Save the update time
 */
@Override public JSONObject toJSON() throws JSONException {
  JSONObject json=super.toJSON();
  json.put(JSON_LAST_UPDATE,mTimeLastUpdated.getTime());
  json.put(JSON_FRACTION_VALUE,mFraction);
  json.put(JSON_FRACTION_PARENT,mParentCurrency);
  return json;
}",0.8113590263691683
35025,"/** 
 * Create a new currency unit that is used for currency units that are fractional sizes of other existing currencies.
 * @param name abbreviated name of the currency (eg, ""USD"" for US dollar)
 * @param longName long name (eg, ""US Dollar"")
 * @param value the price of the unit in inverted US dollars
 * @param updateTime the time the price was updated
 * @param unit the symbol for the currency for which this is afraction of (for cents, this would be USD)
 * @param fraction actual fraction of the parent currency
 */
public UnitCurrency(String name,String longName,double value,GregorianCalendar updateTime,UnitCurrency unit,double fraction){
  this(name,longName,value,updateTime);
  mFractionalCurrency=true;
  mParentCurrency=unit;
  mFraction=fraction;
}","/** 
 * Create a new currency unit that is used for currency units that are fractional sizes of other existing currencies.
 * @param name abbreviated name of the currency (eg, ""USD"" for US dollar)
 * @param longName long name (eg, ""US Dollar"")
 * @param value the price of the unit in inverted US dollars
 * @param updateTime the time the price was updated
 * @param parent the symbol for the currency for which this is afraction of (for cents, this would be USD)
 * @param fraction actual fraction of the parent currency
 */
public UnitCurrency(String name,String longName,double value,GregorianCalendar updateTime,String parent,double fraction){
  this(name,longName,value,updateTime);
  mParentCurrency=parent;
  mFraction=fraction;
}",0.9214380825565912
35026,"public boolean isFractionCurrency(){
  return mFractionalCurrency;
}","public boolean isFractionCurrency(){
  return !mParentCurrency.equals(NO_PARENT);
}",0.7947019867549668
35027,"/** 
 * Helper method for getDefaultUnitArray, just keeps the file a little more organized
 * @return UnitArray of default unitCurrency
 */
private static UnitType getCurrUnitType(String name){
  double[] cpiTable={9.9,10,10.1,10.9,12.8,15.1,17.3,20,17.9,16.8,17.1,17.1,17.5,17.7,17.4,17.1,17.1,16.7,15.2,13.7,13,13.4,13.7,13.9,14.4,14.1,13.9,14,14.7,16.3,17.3,17.6,18,19.5,22.3,24.1,23.8,24.1,26,26.5,26.7,26.9,26.8,27.2,28.1,28.9,29.1,29.6,29.9,30.2,30.6,31,31.5,32.4,33.4,34.8,36.7,38.8,40.5,41.8,44.4,49.3,53.8,56.9,60.6,65.2,72.6,82.4,90.9,96.5,99.6,103.9,107.6,109.6,113.6,118.3,124,130.7,136.2,140.3,144.5,148.2,152.4,156.9,160.5,163,166.6,172.2,177.1,179.9,184,188.9,195.3,201.6,207.342,215.303,214.537,218.056,224.939,229.594,232.957,236.911};
  ArrayList<Double> al=new ArrayList<>();
  for (  double val : cpiTable) {
    double normalizedValue=val / cpiTable[cpiTable.length - 1];
    al.add(normalizedValue);
  }
  GregorianCalendar cryTime=new GregorianCalendar(2017,8,6,9,30);
  UnitType uc=new UnitType(name);
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",1));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",0.929));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",1.26));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",0.67));
  UnitCurrency bitcoin=new UnitCurrency(""String_Node_Str"",""String_Node_Str"",1 / 3197.67,cryTime);
  uc.addUnit(bitcoin);
  uc.addUnit(new UnitHistCurrency(""String_Node_Str"",""String_Node_Str"",al,1913,1975));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",0.967));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",119.7));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",7.75));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",1.390144));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",6.198));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",66.499496));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",1 / 259.493,cryTime));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",64.349998));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",122.059502));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",105.470001));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",135.294998));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",9.3998));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",481.73999));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",1.79));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",1.0568));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",1));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",0.3774));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",77.822952));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",2));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",17495));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",1.995));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",1));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",65.764999));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",6.9));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",1.7315));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",10.24795));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",3.9415));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",1.40215));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",1.7321));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",1549));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",4094.949951));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",97.0495));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",0.82));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",580.724243));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",105.645401));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",678.554993));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",0.0246));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",6.38755));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",2984.830078));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",435.543213));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",927.5));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",0.419463));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",532.299988));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",6.75905));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",1));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",0.51955));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",23.975));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",6.60755));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",1.71745));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",176.994995));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",45.209999));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",2.7));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",25000));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",7.8305));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",8.7325));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",15.28));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",20.898001));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",0.6485));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",2.15795));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",5.7601));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",38.93));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",2.45));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",3.9));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",0.6425));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",0.000879));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",7.6545));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",7249.950195));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",207.210007));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",51.737499));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",21.949699));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",275.369995));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",127.324997));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",65.870453));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",14420.5));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",29605));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",1188));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",0.699154));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",3.9344));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",1700.272217));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",118.5));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",0.709));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",275.904938));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",105.149498));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",0.3013));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",70.493797));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",8129.950195));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",0.62055));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",1506.5));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",13.31525));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",84.660004));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",1.36495));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",3.0487));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",7.9826));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",53.91));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",3098.600098));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",557.494995));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",4.2265));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",15.34));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",290));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",35.450001));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",16.6224));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",2.81));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",19.9));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",1990.5));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",9.67155));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",43.169998));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",1282.400024));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",13.31525));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",105.223999));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",1.79));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",32.395));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",1.563441));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",27.553801));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",199.044998));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",900));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",8.16405));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",0.38505));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",104.355003));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",0.001638));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",1));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",2.83015));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",5474.685059));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",3.19));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",46.512501));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",0.001016));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",3.7231));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",3.6438));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",3.82225));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",732.080017));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",2.658703));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",21495));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",3.75005));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",106.220001));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",13.09995));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",4308));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",0.065989));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",1.363));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",216.486755));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",7.971566));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",639.950012));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",13.3139));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",1174.295044));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",0.70875));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",140.490005));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",0.6425));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",6.09));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",3.3));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",13.31525));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",8.25805));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",188.785995));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",6.4005));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",2169.199951));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",35.647999));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",2.17491));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",6.3382));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",1.95155));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",3.00635));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",3.5));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",3650));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",21.799999));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",3.67275));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",28.815001));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",2610.889893));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",114.485001));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",6.35));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",22475));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",580.724243));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",214.889999));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",10.003));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",322.355011));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",1 / 0.177605,cryTime));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",1 / 263.36,cryTime));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",1 / 45.246,cryTime));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",1 / 0.252438,cryTime));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",1 / 15.2,cryTime));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",1 / 187.539,cryTime));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",1 / 0.425763,cryTime));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",1 / 14.4828,cryTime));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",1 / 47.4512,cryTime));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",1 / 6.57858,cryTime));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",1 / 9.9334,cryTime));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",1 / 78.4569,cryTime));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",1 / 4.90476,cryTime));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",1 / 1.70987,cryTime));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",1 / 206.468,cryTime));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",1 / 0.148933,cryTime));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",1 / 0.999844,cryTime));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",1 / 157.784,cryTime));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",1 / 1.3176,cryTime));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",1 / 2.74397,cryTime));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",1 / 0.315259,cryTime));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",1 / 0.00919203,cryTime));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",1 / 2.87782,cryTime));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",1 / 0.00134475,cryTime));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",1 / 0.0221617,cryTime));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",1 / 2.13442,cryTime));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",1 / 207.614,cryTime));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",1 / 0.0612608,cryTime));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",1 / 2.01811,cryTime));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",1 / 0.00191011,cryTime));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",1E8 / 3197.67,cryTime,bitcoin,1E8));
  return uc;
}","/** 
 * Helper method for getDefaultUnitArray, just keeps the file a little more organized
 * @return UnitArray of default unitCurrency
 */
private static UnitType getCurrUnitType(String name){
  double[] cpiTable={9.9,10,10.1,10.9,12.8,15.1,17.3,20,17.9,16.8,17.1,17.1,17.5,17.7,17.4,17.1,17.1,16.7,15.2,13.7,13,13.4,13.7,13.9,14.4,14.1,13.9,14,14.7,16.3,17.3,17.6,18,19.5,22.3,24.1,23.8,24.1,26,26.5,26.7,26.9,26.8,27.2,28.1,28.9,29.1,29.6,29.9,30.2,30.6,31,31.5,32.4,33.4,34.8,36.7,38.8,40.5,41.8,44.4,49.3,53.8,56.9,60.6,65.2,72.6,82.4,90.9,96.5,99.6,103.9,107.6,109.6,113.6,118.3,124,130.7,136.2,140.3,144.5,148.2,152.4,156.9,160.5,163,166.6,172.2,177.1,179.9,184,188.9,195.3,201.6,207.342,215.303,214.537,218.056,224.939,229.594,232.957,236.911};
  ArrayList<Double> al=new ArrayList<>();
  for (  double val : cpiTable) {
    double normalizedValue=val / cpiTable[cpiTable.length - 1];
    al.add(normalizedValue);
  }
  GregorianCalendar cryTime=new GregorianCalendar(2017,8,6,9,30);
  UnitType uc=new UnitType(name);
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",1));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",0.929));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",1.26));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",0.67));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",1 / 3197.67,cryTime));
  uc.addUnit(new UnitHistCurrency(""String_Node_Str"",""String_Node_Str"",al,1913,1975));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",0.967));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",119.7));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",7.75));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",1.390144));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",6.198));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",66.499496));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",1 / 259.493,cryTime));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",64.349998));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",122.059502));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",105.470001));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",135.294998));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",9.3998));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",481.73999));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",1.79));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",1.0568));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",1));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",0.3774));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",77.822952));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",2));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",17495));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",1.995));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",1));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",65.764999));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",6.9));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",1.7315));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",10.24795));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",3.9415));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",1.40215));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",1.7321));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",1549));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",4094.949951));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",97.0495));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",0.82));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",580.724243));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",105.645401));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",678.554993));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",0.0246));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",6.38755));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",2984.830078));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",435.543213));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",927.5));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",0.419463));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",532.299988));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",6.75905));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",1));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",0.51955));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",23.975));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",6.60755));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",1.71745));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",176.994995));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",45.209999));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",2.7));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",25000));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",7.8305));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",8.7325));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",15.28));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",20.898001));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",0.6485));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",2.15795));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",5.7601));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",38.93));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",2.45));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",3.9));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",0.6425));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",0.000879));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",7.6545));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",7249.950195));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",207.210007));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",51.737499));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",21.949699));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",275.369995));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",127.324997));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",65.870453));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",14420.5));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",29605));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",1188));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",0.699154));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",3.9344));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",1700.272217));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",118.5));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",0.709));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",275.904938));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",105.149498));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",0.3013));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",70.493797));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",8129.950195));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",0.62055));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",1506.5));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",13.31525));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",84.660004));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",1.36495));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",3.0487));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",7.9826));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",53.91));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",3098.600098));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",557.494995));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",4.2265));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",15.34));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",290));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",35.450001));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",16.6224));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",2.81));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",19.9));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",1990.5));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",9.67155));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",43.169998));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",1282.400024));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",13.31525));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",105.223999));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",1.79));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",32.395));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",1.563441));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",27.553801));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",199.044998));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",900));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",8.16405));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",0.38505));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",104.355003));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",0.001638));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",1));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",2.83015));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",5474.685059));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",3.19));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",46.512501));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",0.001016));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",3.7231));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",3.6438));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",3.82225));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",732.080017));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",2.658703));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",21495));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",3.75005));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",106.220001));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",13.09995));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",4308));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",0.065989));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",1.363));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",216.486755));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",7.971566));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",639.950012));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",13.3139));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",1174.295044));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",0.70875));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",140.490005));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",0.6425));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",6.09));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",3.3));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",13.31525));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",8.25805));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",188.785995));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",6.4005));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",2169.199951));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",35.647999));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",2.17491));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",6.3382));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",1.95155));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",3.00635));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",3.5));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",3650));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",21.799999));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",3.67275));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",28.815001));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",2610.889893));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",114.485001));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",6.35));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",22475));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",580.724243));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",214.889999));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",10.003));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",322.355011));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",1 / 0.177605,cryTime));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",1 / 263.36,cryTime));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",1 / 45.246,cryTime));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",1 / 0.252438,cryTime));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",1 / 15.2,cryTime));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",1 / 187.539,cryTime));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",1 / 0.425763,cryTime));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",1 / 14.4828,cryTime));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",1 / 47.4512,cryTime));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",1 / 6.57858,cryTime));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",1 / 9.9334,cryTime));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",1 / 78.4569,cryTime));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",1 / 4.90476,cryTime));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",1 / 1.70987,cryTime));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",1 / 206.468,cryTime));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",1 / 0.148933,cryTime));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",1 / 0.999844,cryTime));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",1 / 157.784,cryTime));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",1 / 1.3176,cryTime));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",1 / 2.74397,cryTime));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",1 / 0.315259,cryTime));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",1 / 0.00919203,cryTime));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",1 / 2.87782,cryTime));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",1 / 0.00134475,cryTime));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",1 / 0.0221617,cryTime));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",1 / 2.13442,cryTime));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",1 / 207.614,cryTime));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",1 / 0.0612608,cryTime));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",1 / 2.01811,cryTime));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",1 / 0.00191011,cryTime));
  uc.addUnit(new UnitCurrency(""String_Node_Str"",""String_Node_Str"",1E8 / 3197.67,cryTime,""String_Node_Str"",1E8));
  return uc;
}",0.9977632484514796
35028,"private boolean updateRates(UnitType ut){
  HashMap<String,CurrencyURLParser.Entry> currRates=null;
  HashMap<String,CurrencyURLParser.Entry> cryptCurrRates=null;
  try {
    currRates=new YahooXmlParser().downloadAndParse();
    cryptCurrRates=new CoinmarketcapParser().downloadAndParse();
    cryptCurrRates.putAll(currRates);
    currRates=cryptCurrRates;
  }
 catch (  CurrencyParseException|IOException e) {
    if (e instanceof CurrencyParseException) {
      mErrorCause=ErrorCause.XML_PARSING_ERROR;
    }
 else {
      mErrorCause=ErrorCause.TIMEOUT;
    }
    e.printStackTrace();
  }
  if (currRates == null)   return false;
  for (int i=0; i < ut.size(); i++) {
    if (!ut.getUnitPosInUnitArray(i).isDynamic())     continue;
    UnitCurrency u=((UnitCurrency)ut.getUnitPosInUnitArray(i));
    CurrencyURLParser.Entry entry=currRates.get(u.getAbbreviation());
    if (entry != null) {
      u.setValue(entry.price);
      u.setUpdateTime(entry.date);
    }
 else {
      mUnitsToUpdate.add(i);
    }
  }
  return true;
}","private boolean updateRates(UnitType ut){
  HashMap<String,CurrencyURLParser.Entry> currRates=null;
  HashMap<String,CurrencyURLParser.Entry> cryptCurrRates=null;
  try {
    currRates=new YahooXmlParser().downloadAndParse();
    cryptCurrRates=new CoinmarketcapParser().downloadAndParse();
    cryptCurrRates.putAll(currRates);
    currRates=cryptCurrRates;
  }
 catch (  CurrencyParseException|IOException e) {
    if (e instanceof CurrencyParseException) {
      mErrorCause=ErrorCause.XML_PARSING_ERROR;
    }
 else {
      mErrorCause=ErrorCause.TIMEOUT;
    }
    e.printStackTrace();
  }
  if (currRates == null)   return false;
  for (int i=0; i < ut.size(); i++) {
    if (!ut.getUnitPosInUnitArray(i).isDynamic())     continue;
    UnitCurrency u=((UnitCurrency)ut.getUnitPosInUnitArray(i));
    CurrencyURLParser.Entry entry=currRates.get(u.getAbbreviation());
    if (entry != null) {
      u.setValue(entry.price);
      u.setUpdateDate(entry.date);
    }
 else {
      mUnitsToUpdate.add(i);
    }
  }
  for (int i=0; i < ut.size(); i++) {
    Unit unit=ut.getUnitPosInUnitArray(i);
    if (unit.isDynamic()) {
      UnitCurrency uc=(UnitCurrency)unit;
      if (uc.isFractionCurrency()) {
        UnitCurrency parent=(UnitCurrency)ut.getUnit(uc.getFractionParent());
        double parentValue=ut.getUnit(uc.getFractionParent()).getValue();
        uc.updateFractionalValue(parentValue);
        uc.setUpdateDate(parent.getUpdateDate());
      }
    }
  }
  return true;
}",0.777292576419214
35029,"/** 
 * Perform an update of units inside a UnitType if the timeout period has been reached or if the refresh is forced.
 */
public void update(UnitType ut,boolean forced){
  if (!ut.containsDynamicUnits())   return;
  if (isTimeoutReached(ut) || forced) {
    ut.setUpdating(true);
    new UpdateCurrenciesAsyncTask(ut,forced,mUnitsToUpdate,mContext).execute();
    for (int i=0; i < ut.size(); i++) {
      Unit unit=ut.getUnitPosInUnitArray(i);
      if (unit.isDynamic()) {
        UnitCurrency uc=(UnitCurrency)unit;
        if (uc.isFractionCurrency())         uc.updateFractionalValue();
      }
    }
  }
 else {
    ViewUtils.toast(mContext.getText(R.string.words_units_up_to_date).toString(),mContext);
  }
}","/** 
 * Perform an update of units inside a UnitType if the timeout period has been reached or if the refresh is forced.
 */
public void update(UnitType ut,boolean forced){
  if (!ut.containsDynamicUnits())   return;
  if (isTimeoutReached(ut) || forced) {
    ut.setUpdating(true);
    new UpdateCurrenciesAsyncTask(ut,forced,mUnitsToUpdate,mContext).execute();
  }
 else {
    ViewUtils.toast(mContext.getText(R.string.words_units_up_to_date).toString(),mContext);
  }
}",0.6235294117647059
35030,"public int findButtonPositionforUnitArrayPos(int pos){
  return mUnitDisplayOrder.indexOf(pos);
}","/** 
 * This function takes a unit array position (the original position of a unit when the unit array is created in code) and returns the display order position (after units have been moved around by the user.
 * @param pos the position of the unit in the original unit array
 * @return the position of the unit in the display order array
 */
public int findButtonPositionforUnitArrayPos(int pos){
  return mUnitDisplayOrder.indexOf(pos);
}",0.3605947955390334
35031,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup parent,Bundle savedInstanceState){
  View v=inflater.inflate(R.layout.fragment_convert_keys,parent,false);
  mConvButton=new ArrayList<>();
  mNumConvButtons=convertButtonIds.length;
  if (mUnitType.size() > convertButtonIds.length) {
    mNumConvButtons=mNumConvButtons - 1;
    mMoreButton=(Button)v.findViewById(convertButtonIds[mNumConvButtons]);
    mMoreButton.setText(getText(R.string.more_button));
    mMoreButton.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View view){
        if (mUnitType.size() > SEARCH_DIALOG_MIN_SIZE) {
          createSearchDialog(getText(R.string.more_button_search_hint),new AdapterView.OnItemClickListener(){
            @Override public void onItemClick(            AdapterView<?> parent,            View view,            int position,            long id){
              mSearchDialogBuilder.cancelDialog();
              UnitSearchItem selectedItem=mSearchDialogBuilder.getItem(position);
              clickUnitButton(selectedItem.getUnitPosition());
            }
          }
);
        }
 else {
          createMoreUnitsDialog(getText(R.string.select_unit),new DialogInterface.OnClickListener(){
            @Override public void onClick(            DialogInterface dialog,            int item){
              clickUnitButton(item + mNumConvButtons);
              updateFavorites(item + mNumConvButtons);
            }
          }
);
        }
      }
    }
);
  }
  for (int i=0; i < mNumConvButtons; i++) {
    Button button=(Button)v.findViewById(convertButtonIds[i]);
    if (mUnitType.size() > mNumConvButtons)     ((SecondaryTextButton)button).setSecondaryText((String)getText(R.string.ellipsis));
    mConvButton.add(button);
    if (mUnitType.getUnitDisplayName(i).equals(""String_Node_Str""))     continue;
    refreshButtonText(i);
    button.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View view){
        int viewId=view.getId();
        for (int i=0; i < mNumConvButtons; i++) {
          if (convertButtonIds[i] == viewId) {
            clickUnitButton(i);
            break;
          }
        }
      }
    }
);
    final int buttonPos=i;
    button.setOnLongClickListener(new View.OnLongClickListener(){
      @Override public boolean onLongClick(      View view){
        if (mUnitType.size() <= mNumConvButtons)         return true;
        String title=getText(R.string.word_Change) + ""String_Node_Str"" + mUnitType.getUnit(buttonPos).getAbbreviation()+ ""String_Node_Str""+ getText(R.string.word_button)+ ""String_Node_Str""+ getText(R.string.word_to)+ ""String_Node_Str"";
        if (mUnitType.size() > SEARCH_DIALOG_MIN_SIZE) {
          createSearchDialog(title,new AdapterView.OnItemClickListener(){
            @Override public void onItemClick(            AdapterView<?> parent,            View view,            int position,            long id){
              mSearchDialogBuilder.cancelDialog();
              UnitSearchItem selectedItem=mSearchDialogBuilder.getItem(position);
              mUnitType.swapUnits(buttonPos,selectedItem.getUnitPosition());
              refreshButtonText(buttonPos);
            }
          }
);
        }
 else {
          createMoreUnitsDialog(title,new DialogInterface.OnClickListener(){
            @Override public void onClick(            DialogInterface dialog,            int item){
              mUnitType.swapUnits(buttonPos,item + mNumConvButtons);
              refreshButtonText(buttonPos);
            }
          }
);
        }
        return false;
      }
    }
);
  }
  return v;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup parent,Bundle savedInstanceState){
  View v=inflater.inflate(R.layout.fragment_convert_keys,parent,false);
  mConvButton=new ArrayList<>();
  mNumConvButtons=convertButtonIds.length;
  if (mUnitType.size() > convertButtonIds.length) {
    mNumConvButtons=mNumConvButtons - 1;
    mMoreButton=(Button)v.findViewById(convertButtonIds[mNumConvButtons]);
    mMoreButton.setText(getText(R.string.more_button));
    mMoreButton.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View view){
        if (mUnitType.size() > SEARCH_DIALOG_MIN_SIZE) {
          createSearchDialog(getText(R.string.more_button_search_hint),new AdapterView.OnItemClickListener(){
            @Override public void onItemClick(            AdapterView<?> parent,            View view,            int position,            long id){
              mSearchDialogBuilder.cancelDialog();
              UnitSearchItem selectedItem=mSearchDialogBuilder.getItem(position);
              clickUnitButton(mUnitType.findButtonPositionforUnitArrayPos(selectedItem.getUnitPosition()));
            }
          }
);
        }
 else {
          createMoreUnitsDialog(getText(R.string.select_unit),new DialogInterface.OnClickListener(){
            @Override public void onClick(            DialogInterface dialog,            int item){
              clickUnitButton(item + mNumConvButtons);
              updateFavorites(item + mNumConvButtons);
            }
          }
);
        }
      }
    }
);
  }
  for (int i=0; i < mNumConvButtons; i++) {
    Button button=(Button)v.findViewById(convertButtonIds[i]);
    if (mUnitType.size() > mNumConvButtons)     ((SecondaryTextButton)button).setSecondaryText((String)getText(R.string.ellipsis));
    mConvButton.add(button);
    if (mUnitType.getUnitDisplayName(i).equals(""String_Node_Str""))     continue;
    refreshButtonText(i);
    button.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View view){
        int viewId=view.getId();
        for (int i=0; i < mNumConvButtons; i++) {
          if (convertButtonIds[i] == viewId) {
            clickUnitButton(i);
            break;
          }
        }
      }
    }
);
    final int buttonPos=i;
    button.setOnLongClickListener(new View.OnLongClickListener(){
      @Override public boolean onLongClick(      View view){
        if (mUnitType.size() <= mNumConvButtons)         return true;
        String title=getText(R.string.word_Change) + ""String_Node_Str"" + mUnitType.getUnit(buttonPos).getAbbreviation()+ ""String_Node_Str""+ getText(R.string.word_button)+ ""String_Node_Str""+ getText(R.string.word_to)+ ""String_Node_Str"";
        if (mUnitType.size() > SEARCH_DIALOG_MIN_SIZE) {
          createSearchDialog(title,new AdapterView.OnItemClickListener(){
            @Override public void onItemClick(            AdapterView<?> parent,            View view,            int position,            long id){
              mSearchDialogBuilder.cancelDialog();
              UnitSearchItem selectedItem=mSearchDialogBuilder.getItem(position);
              mUnitType.swapUnits(buttonPos,selectedItem.getUnitPosition());
              refreshButtonText(buttonPos);
            }
          }
);
        }
 else {
          createMoreUnitsDialog(title,new DialogInterface.OnClickListener(){
            @Override public void onClick(            DialogInterface dialog,            int item){
              mUnitType.swapUnits(buttonPos,item + mNumConvButtons);
              refreshButtonText(buttonPos);
            }
          }
);
        }
        return false;
      }
    }
);
  }
  return v;
}",0.9938833763762404
35032,"@Test public void testCheckUnitTypeNames(){
  clickButtons(""String_Node_Str"");
  checkUnitTypesRemoved(new ArrayList<String>());
  selectUnitTypeDirect(""String_Node_Str"");
  clickUnit(""String_Node_Str"");
  clickUnit(""String_Node_Str"");
  ArrayList<String> toRemoveArray=new ArrayList<>();
  toRemoveArray.add(""String_Node_Str"");
  toRemoveArray.add(""String_Node_Str"");
  toRemoveArray.add(""String_Node_Str"");
  toRemoveArray.add(""String_Node_Str"");
  hideUnitTypes(toRemoveArray);
  checkUnitTypesRemoved(toRemoveArray);
  clickPrevAnswer();
  toRemoveArray.remove(""String_Node_Str"");
  checkUnitTypesRemoved(toRemoveArray);
  ArrayList<String> toRemoveArray2=new ArrayList<>();
  toRemoveArray2.add(""String_Node_Str"");
  toRemoveArray2.add(""String_Node_Str"");
  toRemoveArray2.add(""String_Node_Str"");
  toRemoveArray2.add(""String_Node_Str"");
  toRemoveArray2.add(""String_Node_Str"");
  toRemoveArray2.add(""String_Node_Str"");
  toRemoveArray2.add(""String_Node_Str"");
  toRemoveArray2.add(""String_Node_Str"");
  toRemoveArray2.add(""String_Node_Str"");
  toRemoveArray2.add(""String_Node_Str"");
  toRemoveArray2.add(""String_Node_Str"");
  toRemoveArray2.add(""String_Node_Str"");
  hideUnitTypes(toRemoveArray2);
  toRemoveArray.addAll(toRemoveArray2);
  checkUnitTypesRemoved(toRemoveArray);
}","@Test public void testCheckUnitTypeNames(){
  clickButtons(""String_Node_Str"");
  checkUnitTypesRemoved(new ArrayList<String>());
  selectUnitTypeDirect(""String_Node_Str"");
  clickUnit(""String_Node_Str"");
  clickUnit(""String_Node_Str"");
  selectUnitTypeDirect(""String_Node_Str"");
  clickUnit(""String_Node_Str"");
  checkUnitButtonVisible(""String_Node_Str"");
  checkUnitButtonVisibleWithArrow(""String_Node_Str"");
  selectUnitTypeDirect(""String_Node_Str"");
  checkUnitButtonVisible(""String_Node_Str"");
  checkUnitButtonVisible(""String_Node_Str"");
  selectUnitTypeDirect(""String_Node_Str"");
  checkUnitButtonVisible(""String_Node_Str"");
  ArrayList<String> toRemoveArray=new ArrayList<>();
  toRemoveArray.add(""String_Node_Str"");
  toRemoveArray.add(""String_Node_Str"");
  toRemoveArray.add(""String_Node_Str"");
  toRemoveArray.add(""String_Node_Str"");
  hideUnitTypes(toRemoveArray);
  checkUnitTypesRemoved(toRemoveArray);
  clickPrevAnswer();
  toRemoveArray.remove(""String_Node_Str"");
  checkUnitTypesRemoved(toRemoveArray);
  ArrayList<String> toRemoveArray2=new ArrayList<>();
  toRemoveArray2.add(""String_Node_Str"");
  toRemoveArray2.add(""String_Node_Str"");
  toRemoveArray2.add(""String_Node_Str"");
  toRemoveArray2.add(""String_Node_Str"");
  toRemoveArray2.add(""String_Node_Str"");
  toRemoveArray2.add(""String_Node_Str"");
  toRemoveArray2.add(""String_Node_Str"");
  toRemoveArray2.add(""String_Node_Str"");
  toRemoveArray2.add(""String_Node_Str"");
  toRemoveArray2.add(""String_Node_Str"");
  toRemoveArray2.add(""String_Node_Str"");
  toRemoveArray2.add(""String_Node_Str"");
  hideUnitTypes(toRemoveArray2);
  toRemoveArray.addAll(toRemoveArray2);
  checkUnitTypesRemoved(toRemoveArray);
}",0.866779089376054
35033,"@Override public void onPageSelected(int pos){
  mCalc.setCurrentUnitTypePos(pos);
  if (mCalc.getCurrUnitType().containsDynamicUnits())   mCalc.refreshAllDynamicUnits(false);
  int currUnitTypePos=mUnitTypeViewPager.getCurrentItem();
  clearUnitSelection(currUnitTypePos - 1);
  clearUnitSelection(currUnitTypePos);
  clearUnitSelection(currUnitTypePos + 1);
  mCalc.getCurrUnitType().clearUnitSelection();
  if (unitPosToSelectAfterScroll != -1) {
    ConvKeysFragment frag=getConvKeyFrag(mUnitTypeViewPager.getCurrentItem());
    if (frag != null)     frag.selectUnitAtUnitArrayPos(unitPosToSelectAfterScroll);
    unitPosToSelectAfterScroll=-1;
  }
  updateScreen(false);
  mDisplay.setSelectionToEnd();
}","@Override public void onPageSelected(int pos){
  mCalc.getCurrUnitType().clearUnitSelection();
  mCalc.setCurrentUnitTypePos(pos);
  if (mCalc.getCurrUnitType().containsDynamicUnits())   mCalc.refreshAllDynamicUnits(false);
  int currUnitTypePos=mUnitTypeViewPager.getCurrentItem();
  clearUnitSelection(currUnitTypePos - 1);
  clearUnitSelection(currUnitTypePos);
  clearUnitSelection(currUnitTypePos + 1);
  mCalc.getCurrUnitType().clearUnitSelection();
  if (unitPosToSelectAfterScroll != -1) {
    ConvKeysFragment frag=getConvKeyFrag(mUnitTypeViewPager.getCurrentItem());
    if (frag != null)     frag.selectUnitAtUnitArrayPos(unitPosToSelectAfterScroll);
    unitPosToSelectAfterScroll=-1;
  }
  updateScreen(false);
  mDisplay.setSelectionToEnd();
}",0.9672578444747612
35034,"private void setupUnitTypePager(){
  if (mCalc.getUnitTypeSize() == 0) {
    setUnitViewVisibility(UnitVisibility.HIDDEN);
    return;
  }
 else {
    setUnitViewVisibility(UnitVisibility.VISIBLE);
  }
  FragmentManager fm=getSupportFragmentManager();
  mUnitTypeViewPager=(ViewPager)findViewById(R.id.unit_pager);
  mUnitTypeViewPager.setAdapter(new FragmentStatePagerAdapter(fm){
    @Override public int getCount(){
      return mCalc.getUnitTypeSize();
    }
    @Override public Fragment getItem(    int pos){
      return ConvKeysFragment.newInstance(pos);
    }
    @Override public CharSequence getPageTitle(    int pos){
      return mCalc.getUnitTypeName(pos % mCalc.getUnitTypeSize());
    }
  }
);
  TabPageIndicator mUnitTypeTabIndicator=(TabPageIndicator)findViewById(R.id.unit_type_titles);
  mUnitTypeTabIndicator.setViewPager(mUnitTypeViewPager);
  mUnitTypeTabIndicator.setVisibility(View.VISIBLE);
  mUnitTypeTabIndicator.setOnPageChangeListener(new ViewPager.OnPageChangeListener(){
    @Override public void onPageSelected(    int pos){
      mCalc.setCurrentUnitTypePos(pos);
      if (mCalc.getCurrUnitType().containsDynamicUnits())       mCalc.refreshAllDynamicUnits(false);
      int currUnitTypePos=mUnitTypeViewPager.getCurrentItem();
      clearUnitSelection(currUnitTypePos - 1);
      clearUnitSelection(currUnitTypePos);
      clearUnitSelection(currUnitTypePos + 1);
      mCalc.getCurrUnitType().clearUnitSelection();
      if (unitPosToSelectAfterScroll != -1) {
        ConvKeysFragment frag=getConvKeyFrag(mUnitTypeViewPager.getCurrentItem());
        if (frag != null)         frag.selectUnitAtUnitArrayPos(unitPosToSelectAfterScroll);
        unitPosToSelectAfterScroll=-1;
      }
      updateScreen(false);
      mDisplay.setSelectionToEnd();
    }
    @Override public void onPageScrolled(    int pos,    float posOffset,    int posOffsetPixels){
    }
    @Override public void onPageScrollStateChanged(    int state){
    }
  }
);
  mUnitTypeViewPager.setCurrentItem(mCalc.getUnitTypePos());
  mUnitTypeTabIndicator.notifyDataSetChanged();
}","private void setupUnitTypePager(){
  if (mCalc.getUnitTypeSize() == 0) {
    setUnitViewVisibility(UnitVisibility.HIDDEN);
    return;
  }
 else {
    setUnitViewVisibility(UnitVisibility.VISIBLE);
  }
  FragmentManager fm=getSupportFragmentManager();
  mUnitTypeViewPager=(ViewPager)findViewById(R.id.unit_pager);
  mUnitTypeViewPager.setAdapter(new FragmentStatePagerAdapter(fm){
    @Override public int getCount(){
      return mCalc.getUnitTypeSize();
    }
    @Override public Fragment getItem(    int pos){
      return ConvKeysFragment.newInstance(pos);
    }
    @Override public CharSequence getPageTitle(    int pos){
      return mCalc.getUnitTypeName(pos % mCalc.getUnitTypeSize());
    }
  }
);
  TabPageIndicator mUnitTypeTabIndicator=(TabPageIndicator)findViewById(R.id.unit_type_titles);
  mUnitTypeTabIndicator.setViewPager(mUnitTypeViewPager);
  mUnitTypeTabIndicator.setVisibility(View.VISIBLE);
  mUnitTypeTabIndicator.setOnPageChangeListener(new ViewPager.OnPageChangeListener(){
    @Override public void onPageSelected(    int pos){
      mCalc.getCurrUnitType().clearUnitSelection();
      mCalc.setCurrentUnitTypePos(pos);
      if (mCalc.getCurrUnitType().containsDynamicUnits())       mCalc.refreshAllDynamicUnits(false);
      int currUnitTypePos=mUnitTypeViewPager.getCurrentItem();
      clearUnitSelection(currUnitTypePos - 1);
      clearUnitSelection(currUnitTypePos);
      clearUnitSelection(currUnitTypePos + 1);
      mCalc.getCurrUnitType().clearUnitSelection();
      if (unitPosToSelectAfterScroll != -1) {
        ConvKeysFragment frag=getConvKeyFrag(mUnitTypeViewPager.getCurrentItem());
        if (frag != null)         frag.selectUnitAtUnitArrayPos(unitPosToSelectAfterScroll);
        unitPosToSelectAfterScroll=-1;
      }
      updateScreen(false);
      mDisplay.setSelectionToEnd();
    }
    @Override public void onPageScrolled(    int pos,    float posOffset,    int posOffsetPixels){
    }
    @Override public void onPageScrollStateChanged(    int state){
    }
  }
);
  mUnitTypeViewPager.setCurrentItem(mCalc.getUnitTypePos());
  mUnitTypeTabIndicator.notifyDataSetChanged();
}",0.9876777251184834
35035,"/** 
 * Clears the button unit selection
 */
public void clearButtonSelection(){
  if (mConvButton == null)   return;
  for (int i=0; i < mConvButton.size(); i++) {
    refreshButtonText(i);
  }
  setSelectedButtonHighlight(false);
}","/** 
 * Clears the button unit selection
 */
public void clearButtonSelection(){
  if (mConvButton == null)   return;
  for (int i=0; i < mConvButton.size(); i++) {
    refreshButtonText(""String_Node_Str"",i);
  }
  setSelectedButtonHighlight(false);
}",0.962809917355372
35036,"@Override public String getDescription(){
  return ""String_Node_Str"";
}","@Override public String getDescription(){
  return ""String_Node_Str"" + unitTypeName;
}",0.9044585987261148
35037,"/** 
 * Clicks on the tab for the provided Unit Type name. Note that the Unit Type doesn't need to be visible.
 */
public static void selectUnitTypeDirect(String unitTypeName){
  onView(allOf(withText(unitTypeName))).perform(new ViewAction(){
    @Override public Matcher<View> getConstraints(){
      return isEnabled();
    }
    @Override public String getDescription(){
      return ""String_Node_Str"";
    }
    @Override public void perform(    UiController uiController,    View view){
      view.performClick();
    }
  }
);
}","/** 
 * Clicks on the tab for the provided Unit Type name. Note that the Unit Type doesn't need to be visible.
 */
public static void selectUnitTypeDirect(final String unitTypeName){
  onView(allOf(withText(unitTypeName))).perform(new ViewAction(){
    @Override public Matcher<View> getConstraints(){
      return isEnabled();
    }
    @Override public String getDescription(){
      return ""String_Node_Str"" + unitTypeName;
    }
    @Override public void perform(    UiController uiController,    View view){
      view.performClick();
    }
  }
);
}",0.9806807727690892
35038,"@Test public void testCheckUnitTypeNames(){
  clickButtons(""String_Node_Str"");
  checkUnitTypesRemoved(new ArrayList<String>());
  selectUnitTypeDirect(""String_Node_Str"");
  clickUnit(""String_Node_Str"");
  clickUnit(""String_Node_Str"");
  selectUnitTypeDirect(""String_Node_Str"");
  clickUnit(""String_Node_Str"");
  checkUnitButtonVisible(""String_Node_Str"");
  checkUnitButtonVisibleWithArrow(""String_Node_Str"");
  selectUnitTypeDirect(""String_Node_Str"");
  checkUnitButtonVisible(""String_Node_Str"");
  checkUnitButtonVisible(""String_Node_Str"");
  selectUnitTypeDirect(""String_Node_Str"");
  checkUnitButtonVisible(""String_Node_Str"");
  ArrayList<String> toRemoveArray=new ArrayList<>();
  toRemoveArray.add(""String_Node_Str"");
  toRemoveArray.add(""String_Node_Str"");
  toRemoveArray.add(""String_Node_Str"");
  toRemoveArray.add(""String_Node_Str"");
  hideUnitTypes(toRemoveArray);
  checkUnitTypesRemoved(toRemoveArray);
  clickPrevAnswer();
  toRemoveArray.remove(""String_Node_Str"");
  checkUnitTypesRemoved(toRemoveArray);
  ArrayList<String> toRemoveArray2=new ArrayList<>();
  toRemoveArray2.add(""String_Node_Str"");
  toRemoveArray2.add(""String_Node_Str"");
  toRemoveArray2.add(""String_Node_Str"");
  toRemoveArray2.add(""String_Node_Str"");
  toRemoveArray2.add(""String_Node_Str"");
  toRemoveArray2.add(""String_Node_Str"");
  toRemoveArray2.add(""String_Node_Str"");
  toRemoveArray2.add(""String_Node_Str"");
  toRemoveArray2.add(""String_Node_Str"");
  toRemoveArray2.add(""String_Node_Str"");
  toRemoveArray2.add(""String_Node_Str"");
  toRemoveArray2.add(""String_Node_Str"");
  hideUnitTypes(toRemoveArray2);
  toRemoveArray.addAll(toRemoveArray2);
  checkUnitTypesRemoved(toRemoveArray);
}","@Test public void testCheckUnitTypeNames(){
  clickButtons(""String_Node_Str"");
  checkUnitTypesRemoved(new ArrayList<String>());
  selectUnitTypeDirect(""String_Node_Str"");
  clickUnit(""String_Node_Str"");
  clickUnit(""String_Node_Str"");
  selectUnitTypeDirect(""String_Node_Str"");
  clickUnit(""String_Node_Str"");
  assertExpressionEquals(""String_Node_Str"");
  checkUnitButtonVisible(""String_Node_Str"");
  checkUnitButtonVisibleWithArrow(""String_Node_Str"");
  selectUnitTypeDirect(""String_Node_Str"");
  assertExpressionEquals(""String_Node_Str"");
  checkUnitButtonVisible(""String_Node_Str"");
  checkUnitButtonVisible(""String_Node_Str"");
  selectUnitTypeDirect(""String_Node_Str"");
  checkUnitButtonVisible(""String_Node_Str"");
  ArrayList<String> toRemoveArray=new ArrayList<>();
  toRemoveArray.add(""String_Node_Str"");
  toRemoveArray.add(""String_Node_Str"");
  toRemoveArray.add(""String_Node_Str"");
  toRemoveArray.add(""String_Node_Str"");
  hideUnitTypes(toRemoveArray);
  checkUnitTypesRemoved(toRemoveArray);
  clickPrevAnswer();
  toRemoveArray.remove(""String_Node_Str"");
  checkUnitTypesRemoved(toRemoveArray);
  ArrayList<String> toRemoveArray2=new ArrayList<>();
  toRemoveArray2.add(""String_Node_Str"");
  toRemoveArray2.add(""String_Node_Str"");
  toRemoveArray2.add(""String_Node_Str"");
  toRemoveArray2.add(""String_Node_Str"");
  toRemoveArray2.add(""String_Node_Str"");
  toRemoveArray2.add(""String_Node_Str"");
  toRemoveArray2.add(""String_Node_Str"");
  toRemoveArray2.add(""String_Node_Str"");
  toRemoveArray2.add(""String_Node_Str"");
  toRemoveArray2.add(""String_Node_Str"");
  toRemoveArray2.add(""String_Node_Str"");
  toRemoveArray2.add(""String_Node_Str"");
  hideUnitTypes(toRemoveArray2);
  toRemoveArray.addAll(toRemoveArray2);
  checkUnitTypesRemoved(toRemoveArray);
}",0.9739130434782608
35039,"@Override public void onPageSelected(int pos){
  mCalc.getCurrUnitType().clearUnitSelection();
  mCalc.setCurrentUnitTypePos(pos);
  if (mCalc.getCurrUnitType().containsDynamicUnits())   mCalc.refreshAllDynamicUnits(false);
  int currUnitTypePos=mUnitTypeViewPager.getCurrentItem();
  clearUnitSelection(currUnitTypePos - 1);
  clearUnitSelection(currUnitTypePos);
  clearUnitSelection(currUnitTypePos + 1);
  mCalc.getCurrUnitType().clearUnitSelection();
  if (unitPosToSelectAfterScroll != -1) {
    ConvKeysFragment frag=getConvKeyFrag(mUnitTypeViewPager.getCurrentItem());
    if (frag != null)     frag.selectUnitAtUnitArrayPos(unitPosToSelectAfterScroll);
    unitPosToSelectAfterScroll=-1;
  }
  updateScreen(false);
  mDisplay.setSelectionToEnd();
}","@Override public void onPageSelected(int pos){
  mCalc.getCurrUnitType().clearUnitSelection();
  mCalc.setCurrentUnitTypePos(pos);
  if (mCalc.getCurrUnitType().containsDynamicUnits())   mCalc.refreshAllDynamicUnits(false);
  int currUnitTypePos=mUnitTypeViewPager.getCurrentItem();
  clearUnitSelection(currUnitTypePos - 1);
  clearUnitSelection(currUnitTypePos);
  clearUnitSelection(currUnitTypePos + 1);
  mCalc.getCurrUnitType().clearUnitSelection();
  if (unitPosToSelectAfterScroll != -1) {
    ConvKeysFragment frag=getConvKeyFrag(mUnitTypeViewPager.getCurrentItem());
    if (frag != null)     frag.selectUnitAtUnitArrayPos(unitPosToSelectAfterScroll);
    unitPosToSelectAfterScroll=-1;
  }
  updateScreen(true);
  mDisplay.setSelectionToEnd();
}",0.9953734302709848
35040,"private void setupUnitTypePager(){
  if (mCalc.getUnitTypeSize() == 0) {
    setUnitViewVisibility(UnitVisibility.HIDDEN);
    return;
  }
 else {
    setUnitViewVisibility(UnitVisibility.VISIBLE);
  }
  FragmentManager fm=getSupportFragmentManager();
  mUnitTypeViewPager=(ViewPager)findViewById(R.id.unit_pager);
  mUnitTypeViewPager.setAdapter(new FragmentStatePagerAdapter(fm){
    @Override public int getCount(){
      return mCalc.getUnitTypeSize();
    }
    @Override public Fragment getItem(    int pos){
      return ConvKeysFragment.newInstance(pos);
    }
    @Override public CharSequence getPageTitle(    int pos){
      return mCalc.getUnitTypeName(pos % mCalc.getUnitTypeSize());
    }
  }
);
  TabPageIndicator mUnitTypeTabIndicator=(TabPageIndicator)findViewById(R.id.unit_type_titles);
  mUnitTypeTabIndicator.setViewPager(mUnitTypeViewPager);
  mUnitTypeTabIndicator.setVisibility(View.VISIBLE);
  mUnitTypeTabIndicator.setOnPageChangeListener(new ViewPager.OnPageChangeListener(){
    @Override public void onPageSelected(    int pos){
      mCalc.getCurrUnitType().clearUnitSelection();
      mCalc.setCurrentUnitTypePos(pos);
      if (mCalc.getCurrUnitType().containsDynamicUnits())       mCalc.refreshAllDynamicUnits(false);
      int currUnitTypePos=mUnitTypeViewPager.getCurrentItem();
      clearUnitSelection(currUnitTypePos - 1);
      clearUnitSelection(currUnitTypePos);
      clearUnitSelection(currUnitTypePos + 1);
      mCalc.getCurrUnitType().clearUnitSelection();
      if (unitPosToSelectAfterScroll != -1) {
        ConvKeysFragment frag=getConvKeyFrag(mUnitTypeViewPager.getCurrentItem());
        if (frag != null)         frag.selectUnitAtUnitArrayPos(unitPosToSelectAfterScroll);
        unitPosToSelectAfterScroll=-1;
      }
      updateScreen(false);
      mDisplay.setSelectionToEnd();
    }
    @Override public void onPageScrolled(    int pos,    float posOffset,    int posOffsetPixels){
    }
    @Override public void onPageScrollStateChanged(    int state){
    }
  }
);
  mUnitTypeViewPager.setCurrentItem(mCalc.getUnitTypePos());
  mUnitTypeTabIndicator.notifyDataSetChanged();
}","private void setupUnitTypePager(){
  if (mCalc.getUnitTypeSize() == 0) {
    setUnitViewVisibility(UnitVisibility.HIDDEN);
    return;
  }
 else {
    setUnitViewVisibility(UnitVisibility.VISIBLE);
  }
  FragmentManager fm=getSupportFragmentManager();
  mUnitTypeViewPager=(ViewPager)findViewById(R.id.unit_pager);
  mUnitTypeViewPager.setAdapter(new FragmentStatePagerAdapter(fm){
    @Override public int getCount(){
      return mCalc.getUnitTypeSize();
    }
    @Override public Fragment getItem(    int pos){
      return ConvKeysFragment.newInstance(pos);
    }
    @Override public CharSequence getPageTitle(    int pos){
      return mCalc.getUnitTypeName(pos % mCalc.getUnitTypeSize());
    }
  }
);
  TabPageIndicator mUnitTypeTabIndicator=(TabPageIndicator)findViewById(R.id.unit_type_titles);
  mUnitTypeTabIndicator.setViewPager(mUnitTypeViewPager);
  mUnitTypeTabIndicator.setVisibility(View.VISIBLE);
  mUnitTypeTabIndicator.setOnPageChangeListener(new ViewPager.OnPageChangeListener(){
    @Override public void onPageSelected(    int pos){
      mCalc.getCurrUnitType().clearUnitSelection();
      mCalc.setCurrentUnitTypePos(pos);
      if (mCalc.getCurrUnitType().containsDynamicUnits())       mCalc.refreshAllDynamicUnits(false);
      int currUnitTypePos=mUnitTypeViewPager.getCurrentItem();
      clearUnitSelection(currUnitTypePos - 1);
      clearUnitSelection(currUnitTypePos);
      clearUnitSelection(currUnitTypePos + 1);
      mCalc.getCurrUnitType().clearUnitSelection();
      if (unitPosToSelectAfterScroll != -1) {
        ConvKeysFragment frag=getConvKeyFrag(mUnitTypeViewPager.getCurrentItem());
        if (frag != null)         frag.selectUnitAtUnitArrayPos(unitPosToSelectAfterScroll);
        unitPosToSelectAfterScroll=-1;
      }
      updateScreen(true);
      mDisplay.setSelectionToEnd();
    }
    @Override public void onPageScrolled(    int pos,    float posOffset,    int posOffsetPixels){
    }
    @Override public void onPageScrollStateChanged(    int state){
    }
  }
);
  mUnitTypeViewPager.setCurrentItem(mCalc.getUnitTypePos());
  mUnitTypeTabIndicator.notifyDataSetChanged();
}",0.9983610395691876
35041,"private void tryConvert(int buttonPos){
  clearButtonSelection();
  boolean requestConvert=mUnitType.selectUnit(buttonPos);
  Calculator calc=Calculator.getCalculator(getActivity());
  if (requestConvert) {
    calc.convertFromTo(mUnitType.getPrevUnit(),mUnitType.getCurrUnit());
    clearButtonSelection();
  }
 else   if (mUnitType.isUnitSelected()) {
    if (calc.isExpressionEmpty()) {
      calc.parseKeyPressed(""String_Node_Str"");
      calc.setSelection(0,calc.toString().length());
    }
    colorSelectedButton();
  }
  mCallback.updateScreen(true);
}","private void tryConvert(int buttonPos){
  clearButtonSelection();
  boolean requestConvert=mUnitType.selectUnit(buttonPos);
  Calculator calc=Calculator.getCalculator(getActivity());
  if (requestConvert) {
    calc.convertFromTo(mUnitType.getPrevUnit(),mUnitType.getCurrUnit());
    clearButtonSelection();
  }
 else   if (mUnitType.isUnitSelected()) {
    calc.setSolved(false);
    if (calc.isExpressionEmpty()) {
      calc.parseKeyPressed(""String_Node_Str"");
      calc.setSelection(0,calc.toString().length());
    }
    colorSelectedButton();
  }
  mCallback.updateScreen(true);
}",0.976460331299041
35042,"private void setSelectedButtonHighlight(boolean highlighted){
  mCallback.setEqualButtonColor(highlighted);
  if (mUnitType.getCurrUnitButtonPos() < mNumConvButtons) {
    int currButtonPos=mUnitType.getCurrUnitButtonPos();
    if (currButtonPos == -1)     return;
    mConvButton.get(currButtonPos).setSelected(highlighted);
  }
}","private void setSelectedButtonHighlight(boolean highlighted){
  mCallback.setEqualButtonColor(highlighted);
  if (mUnitType.getCurrUnitButtonPos() < mNumConvButtons) {
    int currButtonPos=mUnitType.getCurrUnitButtonPos();
    if (currButtonPos == -1)     return;
    if (currButtonPos >= mConvButton.size())     return;
    mConvButton.get(currButtonPos).setSelected(highlighted);
  }
}",0.9207232267037552
35043,"@Test public void testCalcActivity(){
  clickButtons(""String_Node_Str"");
  assertExpressionEquals(""String_Node_Str"");
  clickButtons(""String_Node_Str"");
  assertExpressionEquals(""String_Node_Str"");
  clickButtons(""String_Node_Str"");
  assertExpressionEquals(""String_Node_Str"");
  clickButtons(""String_Node_Str"");
  assertExpressionEquals(""String_Node_Str"");
  clickButtons(""String_Node_Str"");
  assertExpressionEquals(""String_Node_Str"");
  clickButtons(""String_Node_Str"");
  assertExpressionEquals(""String_Node_Str"");
  clickButtons(""String_Node_Str"");
  assertExpressionEquals(""String_Node_Str"");
}","@Test public void testCalcActivity(){
  clickButtons(""String_Node_Str"");
  assertExpressionEquals(""String_Node_Str"");
  assertResultPreviewInvisible();
  clickButtons(""String_Node_Str"");
  assertExpressionEquals(""String_Node_Str"");
  clickButtons(""String_Node_Str"");
  assertExpressionEquals(""String_Node_Str"");
  clickButtons(""String_Node_Str"");
  assertExpressionEquals(""String_Node_Str"");
  assertResultPreviewEquals(""String_Node_Str"");
  clickButtons(""String_Node_Str"");
  assertExpressionEquals(""String_Node_Str"");
  clickButtons(""String_Node_Str"");
  assertExpressionEquals(""String_Node_Str"");
  assertResultPreviewEquals(""String_Node_Str"");
  clickButtons(""String_Node_Str"");
  assertExpressionEquals(""String_Node_Str"");
  assertResultPreviewInvisible();
}",0.8795888399412628
35044,"private void resetSharedPrefs(){
  File root=InstrumentationRegistry.getTargetContext().getFilesDir().getParentFile();
  String[] sharedPreferencesFileNames=new File(root,""String_Node_Str"").list();
  for (  String fileName : sharedPreferencesFileNames) {
    InstrumentationRegistry.getTargetContext().getSharedPreferences(fileName.replace(""String_Node_Str"",""String_Node_Str""),Context.MODE_PRIVATE).edit().clear().apply();
  }
}","private void resetSharedPrefs(){
  File root=InstrumentationRegistry.getTargetContext().getFilesDir().getParentFile();
  String[] sharedPreferencesFileNames=new File(root,""String_Node_Str"").list();
  if (sharedPreferencesFileNames == null)   return;
  for (  String fileName : sharedPreferencesFileNames) {
    InstrumentationRegistry.getTargetContext().getSharedPreferences(fileName.replace(""String_Node_Str"",""String_Node_Str""),Context.MODE_PRIVATE).edit().clear().apply();
  }
}",0.9427312775330396
35045,"/** 
 * Used to get text to display by the TextView
 * @param suffixColor is the color of the SI suffix if the result in thepreview is set to {@link com.llamacorp.equate.Expression.NumFormat#ENGINEERING}
 * @return an HTML formatted result with the SI suffix in brackets ifapplicable
 */
public Spanned getText(int suffixColor){
  String suffix=""String_Node_Str"";
  if (mNumFormat == Expression.NumFormat.ENGINEERING) {
    String suffixText=SISuffixHelper.getSuffixName(mText);
    if (!suffixText.isEmpty())     suffix=""String_Node_Str"" + SISuffixHelper.getSuffixName(mText) + ""String_Node_Str"";
  }
  if (!""String_Node_Str"".equals(mText))   mText=""String_Node_Str"" + mText;
  return ViewUtils.fromHtml(mText + ""String_Node_Str"" + suffixColor+ ""String_Node_Str""+ suffix+ ""String_Node_Str"");
}","/** 
 * Used to get text to display by the TextView
 * @param suffixColor is the color of the SI suffix if the result in thepreview is set to {@link com.llamacorp.equate.Expression.NumFormat#ENGINEERING}
 * @return an HTML formatted result with the SI suffix in brackets ifapplicable
 */
public Spanned getText(int suffixColor){
  String suffix=""String_Node_Str"";
  if (mNumFormat == Expression.NumFormat.ENGINEERING) {
    String suffixText=SISuffixHelper.getSuffixName(mText);
    if (!suffixText.isEmpty())     suffix=""String_Node_Str"" + SISuffixHelper.getSuffixName(mText) + ""String_Node_Str"";
  }
  String returnText=mText;
  if (!""String_Node_Str"".equals(mText))   returnText=""String_Node_Str"" + mText;
  return ViewUtils.fromHtml(returnText + ""String_Node_Str"" + suffixColor+ ""String_Node_Str""+ suffix+ ""String_Node_Str"");
}",0.9747692307692308
35046,"/** 
 * Used to get text to display by the TextView
 * @param suffixColor is the color of the SI suffix if the result in thepreview is set to {@link com.llamacorp.equate.Expression.NumFormat#ENGINEERING}
 * @return an HTML formatted result with the SI suffix in brackets ifapplicable
 */
public Spanned getText(int suffixColor){
  String suffix=""String_Node_Str"";
  if (mNumFormat == Expression.NumFormat.ENGINEERING) {
    String suffixText=SISuffixHelper.getSuffixName(mText);
    if (!suffixText.isEmpty())     suffix=""String_Node_Str"" + SISuffixHelper.getSuffixName(mText) + ""String_Node_Str"";
  }
  return Html.fromHtml(""String_Node_Str"" + mText + ""String_Node_Str""+ suffixColor+ ""String_Node_Str""+ suffix+ ""String_Node_Str"");
}","/** 
 * Used to get text to display by the TextView
 * @param suffixColor is the color of the SI suffix if the result in thepreview is set to {@link com.llamacorp.equate.Expression.NumFormat#ENGINEERING}
 * @return an HTML formatted result with the SI suffix in brackets ifapplicable
 */
public Spanned getText(int suffixColor){
  String suffix=""String_Node_Str"";
  if (mNumFormat == Expression.NumFormat.ENGINEERING) {
    String suffixText=SISuffixHelper.getSuffixName(mText);
    if (!suffixText.isEmpty())     suffix=""String_Node_Str"" + SISuffixHelper.getSuffixName(mText) + ""String_Node_Str"";
  }
  if (!""String_Node_Str"".equals(mText))   mText=""String_Node_Str"" + mText;
  return ViewUtils.fromHtml(mText + ""String_Node_Str"" + suffixColor+ ""String_Node_Str""+ suffix+ ""String_Node_Str"");
}",0.839554682383759
35047,"private void setUpTextView(Context context,AttributeSet attrs){
  TypedArray ta=context.obtainStyledAttributes(attrs,R.styleable.DynamicText,0,0);
  try {
    mMinTextSize=ta.getDimension(R.styleable.DynamicText_minimumTextSize,getTextSize());
  }
  finally {
    ta.recycle();
  }
  mStartingTextSize=getTextSize();
  Log.d(""String_Node_Str"",""String_Node_Str"" + mStartingTextSize);
}","private void setUpTextView(Context context,AttributeSet attrs){
  TypedArray ta=context.obtainStyledAttributes(attrs,R.styleable.DynamicText,0,0);
  try {
    mMinTextSize=ta.getDimension(R.styleable.DynamicText_minimumTextSize,getTextSize());
  }
  finally {
    ta.recycle();
  }
  Log.d(""String_Node_Str"",""String_Node_Str"" + getTextSize());
}",0.8120713305898491
35048,"/** 
 * Helper method to size text
 */
private void layoutText(){
  if (getText().equals(""String_Node_Str""))   return;
  Paint paint=getPaint();
  if (mTextSize != 0f)   paint.setTextSize(mTextSize);
  if (mMinTextSize == getTextSize())   return;
  float textWidth=paint.measureText(getText().toString());
  float boxWidth=getWidth() - getPaddingLeft() - getPaddingRight();
  ;
  float textSize=getTextSize();
  if (textWidth > boxWidth) {
    float scaled=textSize * boxWidth / textWidth;
    if (scaled < mMinTextSize)     scaled=mMinTextSize;
    paint.setTextSize(scaled);
    mTextSize=textSize;
  }
}","/** 
 * Helper method to size text dynamically depending on the text size in relation to the width of the text view
 */
private void layoutText(){
  if (getText().equals(""String_Node_Str""))   return;
  Paint paint=getPaint();
  if (mTextSize != 0f)   paint.setTextSize(mTextSize);
  if (mMinTextSize == getTextSize())   return;
  float textWidth=paint.measureText(getText().toString());
  float boxWidth=getWidth() - getPaddingLeft() - getPaddingRight();
  if (boxWidth <= 0f)   return;
  float textSize=getTextSize();
  if (textWidth > boxWidth) {
    float scaled=textSize * boxWidth / textWidth;
    if (scaled < mMinTextSize)     scaled=mMinTextSize;
    paint.setTextSize(scaled);
    mTextSize=textSize;
  }
}",0.8508705526116578
35049,"/** 
 * Helper method used to set the main display with HTML formatting, without highlighting
 * @param expStr is the main expression to update
 */
private void setTextHtml(String expStr){
  setText(Html.fromHtml(""String_Node_Str"" + mTextPrefix + ""String_Node_Str""+ expStr+ ""String_Node_Str""+ mTextSuffix+ ""String_Node_Str""));
}","/** 
 * Helper method used to set the main display with HTML formatting, without highlighting
 * @param expStr is the main expression to update
 */
private void setTextHtml(String expStr){
  setText(ViewUtils.fromHtml(""String_Node_Str"" + mTextPrefix + ""String_Node_Str""+ expStr+ ""String_Node_Str""+ mTextSuffix+ ""String_Node_Str""));
}",0.9803328290468988
35050,"@Override public View getView(int position,View convertView,ViewGroup parent){
  if (convertView == null)   convertView=getActivity().getLayoutInflater().inflate(R.layout.list_item_result,parent,false);
  Result result=getItem(position);
  DynamicTextView textViewUnitDesc=(DynamicTextView)convertView.findViewById(R.id.list_item_result_convertUnitDesc);
  TextView textViewUnitTimestamp=(TextView)convertView.findViewById(R.id.list_item_result_currencyTimestamp);
  textViewUnitTimestamp.setVisibility(View.GONE);
  if (result != null && result.containsUnits()) {
    String text=getResources().getString(R.string.word_Converting) + ""String_Node_Str"" + result.getQueryUnitTextLong()+ ""String_Node_Str""+ getResources().getString(R.string.word_to)+ ""String_Node_Str""+ result.getAnswerUnitTextLong()+ ""String_Node_Str"";
    textViewUnitDesc.setText(Html.fromHtml(""String_Node_Str"" + text + ""String_Node_Str""));
    textViewUnitDesc.setVisibility(View.VISIBLE);
    String timestamp=result.getTimestamp();
    if (!timestamp.equals(""String_Node_Str"")) {
      textViewUnitTimestamp.setText(timestamp);
      textViewUnitTimestamp.setVisibility(View.VISIBLE);
    }
  }
 else {
    textViewUnitDesc.setVisibility(View.GONE);
  }
  TextView textViewQuery=(TextView)convertView.findViewById(R.id.list_item_result_textPrevQuery);
  setUpResultTextView(textViewQuery,result.getTextQuery());
  TextView textViewAnswer=(TextView)convertView.findViewById(R.id.list_item_result_textPrevAnswer);
  setUpResultTextView(textViewAnswer,result.getTextAnswer());
  return convertView;
}","@NonNull @Override public View getView(int position,View convertView,@NonNull ViewGroup parent){
  if (convertView == null)   convertView=getActivity().getLayoutInflater().inflate(R.layout.list_item_result,parent,false);
  Result result=getItem(position);
  DynamicTextView textViewUnitDesc=(DynamicTextView)convertView.findViewById(R.id.list_item_result_convertUnitDesc);
  TextView textViewUnitTimestamp=(TextView)convertView.findViewById(R.id.list_item_result_currencyTimestamp);
  textViewUnitTimestamp.setVisibility(View.GONE);
  if (result != null && result.containsUnits()) {
    String text=getResources().getString(R.string.word_Converting) + ""String_Node_Str"" + result.getQueryUnitTextLong()+ ""String_Node_Str""+ getResources().getString(R.string.word_to)+ ""String_Node_Str""+ result.getAnswerUnitTextLong()+ ""String_Node_Str"";
    textViewUnitDesc.setText(ViewUtils.fromHtml(""String_Node_Str"" + text + ""String_Node_Str""));
    textViewUnitDesc.setVisibility(View.VISIBLE);
    String timestamp=result.getTimestamp();
    if (!timestamp.equals(""String_Node_Str"")) {
      textViewUnitTimestamp.setText(timestamp);
      textViewUnitTimestamp.setVisibility(View.VISIBLE);
    }
  }
 else {
    textViewUnitDesc.setVisibility(View.GONE);
  }
  TextView textViewQuery=(TextView)convertView.findViewById(R.id.list_item_result_textPrevQuery);
  setUpResultTextView(textViewQuery,result.getTextQuery());
  TextView textViewAnswer=(TextView)convertView.findViewById(R.id.list_item_result_textPrevAnswer);
  setUpResultTextView(textViewAnswer,result.getTextAnswer());
  return convertView;
}",0.9901867679645456
35051,"@Override protected void setUp() throws Exception {
  inst=getInstrumentation();
  int inc=0;
  mUnitToPos.put(""String_Node_Str"",inc++);
  mUnitToPos.put(""String_Node_Str"",inc++);
  mUnitToPos.put(""String_Node_Str"",inc++);
  mUnitToPos.put(""String_Node_Str"",inc++);
  mUnitToPos.put(""String_Node_Str"",inc++);
  mUnitToPos.put(""String_Node_Str"",inc++);
  mUnitToPos.put(""String_Node_Str"",inc++);
  mUnitToPos.put(""String_Node_Str"",inc++);
  mUnitToPos.put(""String_Node_Str"",inc++);
  mUnitToPos.put(""String_Node_Str"",inc++);
  inc=0;
  mUnitToPos.put(""String_Node_Str"",inc++);
  mUnitToPos.put(""String_Node_Str"",inc++);
  mUnitToPos.put(""String_Node_Str"",inc++);
  mUnitToPos.put(""String_Node_Str"",inc++);
  mUnitToPos.put(""String_Node_Str"",inc++);
  mUnitToPos.put(""String_Node_Str"",inc++);
  mUnitToPos.put(""String_Node_Str"",inc++);
  mUnitToPos.put(""String_Node_Str"",inc++);
  mUnitToPos.put(""String_Node_Str"",inc++);
  mUnitToPos.put(""String_Node_Str"",inc++);
  super.setUp();
  setActivityInitialTouchMode(true);
  mActivity=getActivity();
  FragmentManager fm=mActivity.getSupportFragmentManager();
  mResultFragment=(ResultListFragment)fm.findFragmentById(R.id.resultListfragmentContainer);
  mResultListView=mResultFragment.getListView();
  mConKeysViewPager=(ViewPager)getActivity().findViewById(R.id.convertKeyPager);
  FragmentStatePagerAdapter tempAdapter=(FragmentStatePagerAdapter)mConKeysViewPager.getAdapter();
  mConvertFragment=(ConvKeysFragment)tempAdapter.instantiateItem(mConKeysViewPager,mConKeysViewPager.getCurrentItem());
  mExpressionTextView=(EditTextDisplay)mActivity.findViewById(R.id.textDisplay);
}","@Override protected void setUp() throws Exception {
  inst=getInstrumentation();
  int inc=0;
  mUnitToPos.put(""String_Node_Str"",inc++);
  mUnitToPos.put(""String_Node_Str"",inc++);
  mUnitToPos.put(""String_Node_Str"",inc++);
  mUnitToPos.put(""String_Node_Str"",inc++);
  mUnitToPos.put(""String_Node_Str"",inc++);
  mUnitToPos.put(""String_Node_Str"",inc++);
  mUnitToPos.put(""String_Node_Str"",inc++);
  mUnitToPos.put(""String_Node_Str"",inc++);
  mUnitToPos.put(""String_Node_Str"",inc++);
  mUnitToPos.put(""String_Node_Str"",inc++);
  inc=0;
  mUnitToPos.put(""String_Node_Str"",inc++);
  mUnitToPos.put(""String_Node_Str"",inc++);
  mUnitToPos.put(""String_Node_Str"",inc++);
  mUnitToPos.put(""String_Node_Str"",inc++);
  mUnitToPos.put(""String_Node_Str"",inc++);
  mUnitToPos.put(""String_Node_Str"",inc++);
  mUnitToPos.put(""String_Node_Str"",inc++);
  mUnitToPos.put(""String_Node_Str"",inc++);
  mUnitToPos.put(""String_Node_Str"",inc++);
  mUnitToPos.put(""String_Node_Str"",inc++);
  super.setUp();
  setActivityInitialTouchMode(true);
  mActivity=getActivity();
  FragmentManager fm=mActivity.getSupportFragmentManager();
  mResultFragment=(ResultListFragment)fm.findFragmentById(R.id.resultListfragmentContainer);
  mResultListView=mResultFragment.getListView();
  mConKeysViewPager=(ViewPager)getActivity().findViewById(R.id.unit_pager);
  FragmentStatePagerAdapter tempAdapter=(FragmentStatePagerAdapter)mConKeysViewPager.getAdapter();
  mConvertFragment=(ConvKeysFragment)tempAdapter.instantiateItem(mConKeysViewPager,mConKeysViewPager.getCurrentItem());
  mExpressionTextView=(EditTextDisplay)mActivity.findViewById(R.id.textDisplay);
}",0.994770839741618
35052,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  mAppContext=this;
  setContentView(R.layout.drawer_layout);
  this.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_HIDDEN);
  NavigationView navigationView=(NavigationView)findViewById(R.id.nav_view);
  navigationView.setNavigationItemSelectedListener(this);
  mCalc=Calculator.getCalculator(this);
  mDisplay=(EditTextDisplay)findViewById(R.id.textDisplay);
  mResultPreview=(DynamicTextView)findViewById(R.id.resultPreview);
  mDisplay.setCalc(mCalc);
  mDisplay.disableSoftInputFromAppearing();
  mResultPreview.setHorizontallyScrolling(true);
  mResultPreview.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      numButtonPressed(""String_Node_Str"");
    }
  }
);
  mResultPreview.setOnLongClickListener(new View.OnLongClickListener(){
    @Override public boolean onLongClick(    View v){
      CharSequence copiedText=mResultPreview.getText();
      ClipboardManager clipboard=(ClipboardManager)mAppContext.getSystemService(Context.CLIPBOARD_SERVICE);
      clipboard.setPrimaryClip(ClipData.newPlainText(null,copiedText));
      ViewUtils.toast(""String_Node_Str"" + copiedText + ""String_Node_Str"",mAppContext);
      return true;
    }
  }
);
  mDisplay.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      InputMethodManager imm=(InputMethodManager)getSystemService(Context.INPUT_METHOD_SERVICE);
      imm.hideSoftInputFromWindow(mDisplay.getWindowToken(),0);
    }
  }
);
  mDisplay.setOnLongClickListener(new View.OnLongClickListener(){
    @Override public boolean onLongClick(    View v){
      mDisplay.selectAll();
      return false;
    }
  }
);
  mDisplay.setOnTouchListener(new View.OnTouchListener(){
    @Override public boolean onTouch(    View view,    MotionEvent event){
      if (event.getAction() == MotionEvent.ACTION_DOWN) {
        mCalc.setSolved(false);
        mDisplay.setCursorVisible(true);
        mDisplay.clearHighlighted();
      }
      return false;
    }
  }
);
  FragmentManager fm=getSupportFragmentManager();
  mResultListFrag=(ResultListFragment)fm.findFragmentById(R.id.resultListfragmentContainer);
  if (mResultListFrag == null) {
    mResultListFrag=new ResultListFragment();
    fm.beginTransaction().add(R.id.resultListfragmentContainer,mResultListFrag).commit();
  }
  for (  int id : BUTTON_IDS) {
    final Button button=(Button)findViewById(id);
    if (id == R.id.equals_button)     mEqualsButton=button;
    if (id == R.id.percent_button) {
      ((AnimatedHoldButton)button).setPrimaryText(mCalc.mPreferences.getPercentButMain());
      ((AnimatedHoldButton)button).setSecondaryText(mCalc.mPreferences.getPercentButSec());
    }
    button.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View view){
        int buttonId=view.getId();
        String buttonValue=""String_Node_Str"";
switch (buttonId) {
case R.id.plus_button:
          buttonValue=""String_Node_Str"";
        break;
case R.id.minus_button:
      buttonValue=""String_Node_Str"";
    break;
case R.id.multiply_button:
  buttonValue=""String_Node_Str"";
break;
case R.id.divide_button:
buttonValue=""String_Node_Str"";
break;
case R.id.percent_button:
if (mCalc.mPreferences.getPercentButMain().equals(""String_Node_Str"")) buttonValue=""String_Node_Str"";
 else buttonValue=""String_Node_Str"";
break;
case R.id.decimal_button:
buttonValue=""String_Node_Str"";
break;
case R.id.equals_button:
buttonValue=""String_Node_Str"";
break;
case R.id.clear_button:
buttonValue=""String_Node_Str"";
break;
case R.id.open_para_button:
buttonValue=""String_Node_Str"";
break;
case R.id.close_para_button:
buttonValue=""String_Node_Str"";
break;
case R.id.backspace_button:
buttonValue=""String_Node_Str"";
break;
default :
for (int i=0; i < 10; i++) if (buttonId == BUTTON_IDS[i]) buttonValue=String.valueOf(i);
}
numButtonPressed(buttonValue);
}
}
);
final LinearLayout mUnitContain=(LinearLayout)findViewById(R.id.unit_container);
button.setOnLongClickListener(new View.OnLongClickListener(){
@Override public boolean onLongClick(View view){
int buttonId=view.getId();
String buttonValue=""String_Node_Str"";
switch (buttonId) {
case R.id.multiply_button:
buttonValue=""String_Node_Str"";
break;
case R.id.equals_button:
buttonValue=""String_Node_Str"";
break;
case R.id.percent_button:
if (mCalc.mPreferences.getPercentButSec().equals(""String_Node_Str"")) buttonValue=""String_Node_Str"";
 else buttonValue=""String_Node_Str"";
break;
case R.id.nine_button:
mCalc.refreshAllDynamicUnits(true);
break;
case R.id.minus_button:
buttonValue=""String_Node_Str"";
break;
case R.id.divide_button:
buttonValue=""String_Node_Str"";
break;
case R.id.eight_button:
if (getResources().getConfiguration().orientation == Configuration.ORIENTATION_PORTRAIT) {
if (mUnitContain.getVisibility() == LinearLayout.GONE) {
mUnitContain.setVisibility(LinearLayout.VISIBLE);
updateScreen(true,true);
}
 else mUnitContain.setVisibility(LinearLayout.GONE);
}
break;
case R.id.open_para_button:
buttonValue=""String_Node_Str"";
break;
case R.id.close_para_button:
buttonValue=""String_Node_Str"";
break;
default :
return true;
}
if (!buttonValue.equals(""String_Node_Str"")) numButtonPressed(buttonValue);
return true;
}
}
);
if (button instanceof AnimatedHoldButton) {
final AnimatedHoldButton ahb=(AnimatedHoldButton)button;
ahb.setOnExtraLongClickListener(new AnimatedHoldButton.OnExtraLongClickListener(){
@Override public void onExtraLongClick(View view){
int buttonId=view.getId();
if (buttonId == R.id.percent_button) {
String main=mCalc.mPreferences.getPercentButMain();
String sec=mCalc.mPreferences.getPercentButSec();
mCalc.mPreferences.setPercentButMain(sec);
mCalc.mPreferences.setPercentButSec(main);
ViewUtils.toastLong(""String_Node_Str"" + sec,mAppContext);
ahb.setPrimaryText(sec);
ahb.setSecondaryText(main);
ahb.invalidate();
}
}
}
);
}
}
ImageButton backspaceButton=(ImageButton)findViewById(R.id.backspace_button);
backspaceButton.setOnTouchListener(new View.OnTouchListener(){
private Handler mColorHoldHandler;
private Handler mResetHandler;
private View mView;
private static final int RESET_HOLD_TIME=2200;
private static final int CLEAR_HOLD_TIME=300;
@Override public boolean onTouch(View view,MotionEvent event){
switch (event.getAction()) {
case MotionEvent.ACTION_DOWN:
mView=view;
mInc=0;
if (mColorHoldHandler != null) return true;
mColorHoldHandler=new Handler();
mColorHoldHandler.postDelayed(mBackspaceColor,10);
if (mResetHandler != null) return true;
mResetHandler=new Handler();
mResetHandler.postDelayed(mBackspaceReset,RESET_HOLD_TIME);
break;
case MotionEvent.ACTION_UP:
if (mColorHoldHandler == null) return true;
if (mResetHandler == null) return true;
numButtonPressed(""String_Node_Str"");
ContextCompat.getColor(mAppContext,R.color.op_button_normal);
mColorHoldHandler.removeCallbacks(mBackspaceColor);
mColorHoldHandler=null;
mResetHandler.removeCallbacks(mBackspaceReset);
mResetHandler=null;
break;
}
return false;
}
Runnable mBackspaceReset=new Runnable(){
@Override public void run(){
mCalc.resetCalc();
setupUnitTypePager();
updateScreen(true);
ViewUtils.toastCentered(""String_Node_Str"",mAppContext);
}
}
;
private int mInc;
Runnable mBackspaceColor=new Runnable(){
private int mStartColor=ContextCompat.getColor(mAppContext,R.color.op_button_pressed);
private int mEndColor=ContextCompat.getColor(mAppContext,R.color.backspace_button_held);
private static final int NUM_COLOR_CHANGES=10;
@Override public void run(){
if (mInc == -1) {
mView.setBackgroundColor(mEndColor);
return;
}
if (mInc == NUM_COLOR_CHANGES) {
numButtonPressed(""String_Node_Str"");
mView.setBackgroundColor(Color.argb(255,0,0,0));
mColorHoldHandler.postDelayed(this,100);
mInc=-1;
return;
}
mColorHoldHandler.postDelayed(this,CLEAR_HOLD_TIME / NUM_COLOR_CHANGES);
float deltaRed=(float)Color.red(mStartColor) + ((float)Color.red(mEndColor) - (float)Color.red(mStartColor)) * ((float)mInc * (float)mInc * (float)mInc) / ((float)NUM_COLOR_CHANGES * (float)NUM_COLOR_CHANGES * (float)NUM_COLOR_CHANGES);
int deltaGreen=Color.green(mStartColor) + ((Color.green(mEndColor) - Color.green(mStartColor)) * mInc) / NUM_COLOR_CHANGES;
int deltaBlue=Color.blue(mStartColor) + ((Color.blue(mEndColor) - Color.blue(mStartColor)) * mInc) / NUM_COLOR_CHANGES;
mView.setBackgroundColor(Color.argb(255,(int)deltaRed,deltaGreen,deltaBlue));
mInc++;
}
}
;
}
);
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  mAppContext=this;
  setContentView(R.layout.drawer_layout);
  this.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_HIDDEN);
  NavigationView navigationView=(NavigationView)findViewById(R.id.nav_view);
  navigationView.setNavigationItemSelectedListener(this);
  mCalc=Calculator.getCalculator(this);
  mDisplay=(EditTextDisplay)findViewById(R.id.textDisplay);
  mResultPreview=(DynamicTextView)findViewById(R.id.resultPreview);
  mDisplay.setCalc(mCalc);
  mDisplay.disableSoftInputFromAppearing();
  mResultPreview.setHorizontallyScrolling(true);
  mResultPreview.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      numButtonPressed(""String_Node_Str"");
    }
  }
);
  mResultPreview.setOnLongClickListener(new View.OnLongClickListener(){
    @Override public boolean onLongClick(    View v){
      CharSequence copiedText=mResultPreview.getText();
      ClipboardManager clipboard=(ClipboardManager)mAppContext.getSystemService(Context.CLIPBOARD_SERVICE);
      clipboard.setPrimaryClip(ClipData.newPlainText(null,copiedText));
      ViewUtils.toast(""String_Node_Str"" + copiedText + ""String_Node_Str"",mAppContext);
      return true;
    }
  }
);
  mDisplay.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      InputMethodManager imm=(InputMethodManager)getSystemService(Context.INPUT_METHOD_SERVICE);
      imm.hideSoftInputFromWindow(mDisplay.getWindowToken(),0);
    }
  }
);
  mDisplay.setOnLongClickListener(new View.OnLongClickListener(){
    @Override public boolean onLongClick(    View v){
      mDisplay.selectAll();
      return false;
    }
  }
);
  mDisplay.setOnTouchListener(new View.OnTouchListener(){
    @Override public boolean onTouch(    View view,    MotionEvent event){
      if (event.getAction() == MotionEvent.ACTION_DOWN) {
        mCalc.setSolved(false);
        mDisplay.setCursorVisible(true);
        mDisplay.clearHighlighted();
      }
      return false;
    }
  }
);
  FragmentManager fm=getSupportFragmentManager();
  mResultListFrag=(ResultListFragment)fm.findFragmentById(R.id.resultListfragmentContainer);
  if (mResultListFrag == null) {
    mResultListFrag=new ResultListFragment();
    fm.beginTransaction().add(R.id.resultListfragmentContainer,mResultListFrag).commit();
  }
  for (  int id : BUTTON_IDS) {
    final Button button=(Button)findViewById(id);
    if (id == R.id.equals_button)     mEqualsButton=button;
    if (id == R.id.percent_button) {
      ((AnimatedHoldButton)button).setPrimaryText(mCalc.mPreferences.getPercentButMain());
      ((AnimatedHoldButton)button).setSecondaryText(mCalc.mPreferences.getPercentButSec());
    }
    button.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View view){
        int buttonId=view.getId();
        String buttonValue=""String_Node_Str"";
switch (buttonId) {
case R.id.plus_button:
          buttonValue=""String_Node_Str"";
        break;
case R.id.minus_button:
      buttonValue=""String_Node_Str"";
    break;
case R.id.multiply_button:
  buttonValue=""String_Node_Str"";
break;
case R.id.divide_button:
buttonValue=""String_Node_Str"";
break;
case R.id.percent_button:
if (mCalc.mPreferences.getPercentButMain().equals(""String_Node_Str"")) buttonValue=""String_Node_Str"";
 else buttonValue=""String_Node_Str"";
break;
case R.id.decimal_button:
buttonValue=""String_Node_Str"";
break;
case R.id.equals_button:
buttonValue=""String_Node_Str"";
break;
case R.id.clear_button:
buttonValue=""String_Node_Str"";
break;
case R.id.open_para_button:
buttonValue=""String_Node_Str"";
break;
case R.id.close_para_button:
buttonValue=""String_Node_Str"";
break;
case R.id.backspace_button:
buttonValue=""String_Node_Str"";
break;
default :
for (int i=0; i < 10; i++) if (buttonId == BUTTON_IDS[i]) buttonValue=String.valueOf(i);
}
numButtonPressed(buttonValue);
}
}
);
final LinearLayout mUnitContain=(LinearLayout)findViewById(R.id.unit_container);
button.setOnLongClickListener(new View.OnLongClickListener(){
@Override public boolean onLongClick(View view){
int buttonId=view.getId();
String buttonValue=""String_Node_Str"";
switch (buttonId) {
case R.id.multiply_button:
buttonValue=""String_Node_Str"";
break;
case R.id.equals_button:
buttonValue=""String_Node_Str"";
break;
case R.id.percent_button:
if (mCalc.mPreferences.getPercentButSec().equals(""String_Node_Str"")) buttonValue=""String_Node_Str"";
 else buttonValue=""String_Node_Str"";
break;
case R.id.nine_button:
mCalc.refreshAllDynamicUnits(true);
break;
case R.id.minus_button:
buttonValue=""String_Node_Str"";
break;
case R.id.divide_button:
buttonValue=""String_Node_Str"";
break;
case R.id.eight_button:
if (getResources().getConfiguration().orientation == Configuration.ORIENTATION_PORTRAIT) {
if (mUnitContain.getVisibility() == LinearLayout.GONE) {
mUnitContain.setVisibility(LinearLayout.VISIBLE);
updateScreen(true,true);
}
 else mUnitContain.setVisibility(LinearLayout.GONE);
}
break;
case R.id.open_para_button:
buttonValue=""String_Node_Str"";
break;
case R.id.close_para_button:
buttonValue=""String_Node_Str"";
break;
default :
return true;
}
if (!buttonValue.equals(""String_Node_Str"")) numButtonPressed(buttonValue);
return true;
}
}
);
if (button instanceof AnimatedHoldButton) {
final AnimatedHoldButton ahb=(AnimatedHoldButton)button;
ahb.setOnExtraLongClickListener(new AnimatedHoldButton.OnExtraLongClickListener(){
@Override public void onExtraLongClick(View view){
int buttonId=view.getId();
if (buttonId == R.id.percent_button) {
String main=mCalc.mPreferences.getPercentButMain();
String sec=mCalc.mPreferences.getPercentButSec();
mCalc.mPreferences.setPercentButMain(sec);
mCalc.mPreferences.setPercentButSec(main);
ViewUtils.toastLong(""String_Node_Str"" + sec,mAppContext);
ahb.setPrimaryText(sec);
ahb.setSecondaryText(main);
ahb.invalidate();
}
}
}
);
}
}
ImageButton backspaceButton=(ImageButton)findViewById(R.id.backspace_button);
backspaceButton.setOnTouchListener(new View.OnTouchListener(){
private Handler mColorHoldHandler;
private Handler mResetHandler;
private View mView;
private static final int RESET_HOLD_TIME=2200;
private static final int CLEAR_HOLD_TIME=300;
@Override public boolean onTouch(View view,MotionEvent event){
switch (event.getAction()) {
case MotionEvent.ACTION_DOWN:
mView=view;
mInc=0;
if (mColorHoldHandler != null) return true;
mColorHoldHandler=new Handler();
mColorHoldHandler.postDelayed(mBackspaceColor,10);
if (mResetHandler != null) return true;
mResetHandler=new Handler();
mResetHandler.postDelayed(mBackspaceReset,RESET_HOLD_TIME);
break;
case MotionEvent.ACTION_UP:
if (mColorHoldHandler == null) return true;
if (mResetHandler == null) return true;
numButtonPressed(""String_Node_Str"");
view.setBackgroundColor(ContextCompat.getColor(mAppContext,R.color.op_button_normal));
mColorHoldHandler.removeCallbacks(mBackspaceColor);
mColorHoldHandler=null;
mResetHandler.removeCallbacks(mBackspaceReset);
mResetHandler=null;
break;
}
return false;
}
Runnable mBackspaceReset=new Runnable(){
@Override public void run(){
mCalc.resetCalc();
setupUnitTypePager();
updateScreen(true);
ViewUtils.toastCentered(""String_Node_Str"",mAppContext);
}
}
;
private int mInc;
Runnable mBackspaceColor=new Runnable(){
private int mStartColor=ContextCompat.getColor(mAppContext,R.color.op_button_pressed);
private int mEndColor=ContextCompat.getColor(mAppContext,R.color.backspace_button_held);
private static final int NUM_COLOR_CHANGES=10;
@Override public void run(){
if (mInc == -1) {
mView.setBackgroundColor(mEndColor);
return;
}
if (mInc == NUM_COLOR_CHANGES) {
numButtonPressed(""String_Node_Str"");
mView.setBackgroundColor(Color.argb(255,0,0,0));
mColorHoldHandler.postDelayed(this,100);
mInc=-1;
return;
}
mColorHoldHandler.postDelayed(this,CLEAR_HOLD_TIME / NUM_COLOR_CHANGES);
float deltaRed=(float)Color.red(mStartColor) + ((float)Color.red(mEndColor) - (float)Color.red(mStartColor)) * ((float)mInc * (float)mInc * (float)mInc) / ((float)NUM_COLOR_CHANGES * (float)NUM_COLOR_CHANGES * (float)NUM_COLOR_CHANGES);
int deltaGreen=Color.green(mStartColor) + ((Color.green(mEndColor) - Color.green(mStartColor)) * mInc) / NUM_COLOR_CHANGES;
int deltaBlue=Color.blue(mStartColor) + ((Color.blue(mEndColor) - Color.blue(mStartColor)) * mInc) / NUM_COLOR_CHANGES;
mView.setBackgroundColor(Color.argb(255,(int)deltaRed,deltaGreen,deltaBlue));
mInc++;
}
}
;
}
);
}",0.9985270724091204
35053,"private void setupUnitTypePager(){
  FragmentManager fm=getSupportFragmentManager();
  mUnitTypeViewPager=(ViewPager)findViewById(R.id.convertKeyPager);
  mUnitTypeViewPager.setAdapter(new FragmentStatePagerAdapter(fm){
    @Override public int getCount(){
      return mCalc.getUnitTypeSize();
    }
    @Override public Fragment getItem(    int pos){
      return ConvKeysFragment.newInstance(pos);
    }
    @Override public CharSequence getPageTitle(    int pos){
      return mCalc.getUnitTypeName(pos % mCalc.getUnitTypeSize());
    }
  }
);
  TabPageIndicator unitTypePageIndicator=(TabPageIndicator)findViewById(R.id.titles);
  unitTypePageIndicator.setViewPager(mUnitTypeViewPager);
  unitTypePageIndicator.setVisibility(View.VISIBLE);
  unitTypePageIndicator.setOnPageChangeListener(new ViewPager.OnPageChangeListener(){
    @Override public void onPageSelected(    int pos){
      mCalc.setUnitTypePos(pos);
      if (mCalc.getCurrUnitType().containsDynamicUnits())       mCalc.refreshAllDynamicUnits(false);
      int currUnitTypePos=mUnitTypeViewPager.getCurrentItem();
      clearUnitSelection(currUnitTypePos - 1);
      clearUnitSelection(currUnitTypePos);
      clearUnitSelection(currUnitTypePos + 1);
      mCalc.getCurrUnitType().clearUnitSelection();
      if (unitPosToSelectAfterScroll != -1) {
        ConvKeysFragment frag=getConvKeyFrag(mUnitTypeViewPager.getCurrentItem());
        if (frag != null)         frag.selectUnitAtUnitArrayPos(unitPosToSelectAfterScroll);
        unitPosToSelectAfterScroll=-1;
      }
      updateScreen(false);
      mDisplay.setSelectionToEnd();
    }
    @Override public void onPageScrolled(    int pos,    float posOffset,    int posOffsetPixels){
    }
    @Override public void onPageScrollStateChanged(    int state){
    }
  }
);
  mUnitTypeViewPager.setCurrentItem(mCalc.getUnitTypePos());
}","private void setupUnitTypePager(){
  FragmentManager fm=getSupportFragmentManager();
  mUnitTypeViewPager=(ViewPager)findViewById(R.id.unit_pager);
  mUnitTypeViewPager.setAdapter(new FragmentStatePagerAdapter(fm){
    @Override public int getCount(){
      return mCalc.getUnitTypeSize();
    }
    @Override public Fragment getItem(    int pos){
      return ConvKeysFragment.newInstance(pos);
    }
    @Override public CharSequence getPageTitle(    int pos){
      return mCalc.getUnitTypeName(pos % mCalc.getUnitTypeSize());
    }
  }
);
  TabPageIndicator unitTypePageIndicator=(TabPageIndicator)findViewById(R.id.unit_type_titles);
  unitTypePageIndicator.setViewPager(mUnitTypeViewPager);
  unitTypePageIndicator.setVisibility(View.VISIBLE);
  unitTypePageIndicator.setOnPageChangeListener(new ViewPager.OnPageChangeListener(){
    @Override public void onPageSelected(    int pos){
      mCalc.setUnitTypePos(pos);
      if (mCalc.getCurrUnitType().containsDynamicUnits())       mCalc.refreshAllDynamicUnits(false);
      int currUnitTypePos=mUnitTypeViewPager.getCurrentItem();
      clearUnitSelection(currUnitTypePos - 1);
      clearUnitSelection(currUnitTypePos);
      clearUnitSelection(currUnitTypePos + 1);
      mCalc.getCurrUnitType().clearUnitSelection();
      if (unitPosToSelectAfterScroll != -1) {
        ConvKeysFragment frag=getConvKeyFrag(mUnitTypeViewPager.getCurrentItem());
        if (frag != null)         frag.selectUnitAtUnitArrayPos(unitPosToSelectAfterScroll);
        unitPosToSelectAfterScroll=-1;
      }
      updateScreen(false);
      mDisplay.setSelectionToEnd();
    }
    @Override public void onPageScrolled(    int pos,    float posOffset,    int posOffsetPixels){
    }
    @Override public void onPageScrollStateChanged(    int state){
    }
  }
);
  mUnitTypeViewPager.setCurrentItem(mCalc.getUnitTypePos());
}",0.9927399838666308
35054,"@Override public boolean onTouch(View view,MotionEvent event){
switch (event.getAction()) {
case MotionEvent.ACTION_DOWN:
    mView=view;
  mInc=0;
if (mColorHoldHandler != null) return true;
mColorHoldHandler=new Handler();
mColorHoldHandler.postDelayed(mBackspaceColor,10);
if (mResetHandler != null) return true;
mResetHandler=new Handler();
mResetHandler.postDelayed(mBackspaceReset,RESET_HOLD_TIME);
break;
case MotionEvent.ACTION_UP:
if (mColorHoldHandler == null) return true;
if (mResetHandler == null) return true;
numButtonPressed(""String_Node_Str"");
ContextCompat.getColor(mAppContext,R.color.op_button_normal);
mColorHoldHandler.removeCallbacks(mBackspaceColor);
mColorHoldHandler=null;
mResetHandler.removeCallbacks(mBackspaceReset);
mResetHandler=null;
break;
}
return false;
}","@Override public boolean onTouch(View view,MotionEvent event){
switch (event.getAction()) {
case MotionEvent.ACTION_DOWN:
    mView=view;
  mInc=0;
if (mColorHoldHandler != null) return true;
mColorHoldHandler=new Handler();
mColorHoldHandler.postDelayed(mBackspaceColor,10);
if (mResetHandler != null) return true;
mResetHandler=new Handler();
mResetHandler.postDelayed(mBackspaceReset,RESET_HOLD_TIME);
break;
case MotionEvent.ACTION_UP:
if (mColorHoldHandler == null) return true;
if (mResetHandler == null) return true;
numButtonPressed(""String_Node_Str"");
view.setBackgroundColor(ContextCompat.getColor(mAppContext,R.color.op_button_normal));
mColorHoldHandler.removeCallbacks(mBackspaceColor);
mColorHoldHandler=null;
mResetHandler.removeCallbacks(mBackspaceReset);
mResetHandler=null;
break;
}
return false;
}",0.984443061605476
35055,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  mAppContext=this;
  setContentView(R.layout.activity_calc);
  mCalc=Calculator.getCalculator(this);
  mDisplay=(EditTextDisplay)findViewById(R.id.textDisplay);
  mDisplay.setCalc(mCalc);
  mDisplay.disableSoftInputFromAppearing();
  mDisplay.setOnLongClickListener(new View.OnLongClickListener(){
    @Override public boolean onLongClick(    View v){
      mDisplay.selectAll();
      return false;
    }
  }
);
  mDisplay.setOnTouchListener(new View.OnTouchListener(){
    @Override public boolean onTouch(    View view,    MotionEvent event){
      if (event.getAction() == MotionEvent.ACTION_DOWN) {
        mCalc.setSolved(false);
        mDisplay.setCursorVisible(true);
        mDisplay.clearHighlighted();
      }
      return false;
    }
  }
);
  FragmentManager fm=getSupportFragmentManager();
  mResultListFrag=(ResultListFragment)fm.findFragmentById(R.id.resultListfragmentContainer);
  if (mResultListFrag == null) {
    mResultListFrag=new ResultListFragment();
    fm.beginTransaction().add(R.id.resultListfragmentContainer,mResultListFrag).commit();
  }
  setupUnitTypePager();
  for (  int id : BUTTON_IDS) {
    final Button button=(Button)findViewById(id);
    if (id == R.id.equals_button)     mEqualsButton=button;
    if (id == R.id.percent_button) {
      ((AnimatedHoldButton)button).setPrimaryText(mCalc.mPreferences.getPercentButMain());
      ((AnimatedHoldButton)button).setSecondaryText(mCalc.mPreferences.getPercentButSec());
    }
    button.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View view){
        int buttonId=view.getId();
        String buttonValue=""String_Node_Str"";
switch (buttonId) {
case R.id.plus_button:
          buttonValue=""String_Node_Str"";
        break;
case R.id.minus_button:
      buttonValue=""String_Node_Str"";
    break;
case R.id.multiply_button:
  buttonValue=""String_Node_Str"";
break;
case R.id.divide_button:
buttonValue=""String_Node_Str"";
break;
case R.id.percent_button:
if (mCalc.mPreferences.getPercentButMain().equals(""String_Node_Str"")) buttonValue=""String_Node_Str"";
 else buttonValue=""String_Node_Str"";
break;
case R.id.decimal_button:
buttonValue=""String_Node_Str"";
break;
case R.id.equals_button:
buttonValue=""String_Node_Str"";
break;
case R.id.clear_button:
buttonValue=""String_Node_Str"";
break;
case R.id.open_para_button:
buttonValue=""String_Node_Str"";
break;
case R.id.close_para_button:
buttonValue=""String_Node_Str"";
break;
case R.id.backspace_button:
buttonValue=""String_Node_Str"";
break;
default :
for (int i=0; i < 10; i++) if (buttonId == BUTTON_IDS[i]) buttonValue=String.valueOf(i);
}
numButtonPressed(buttonValue);
}
}
);
final LinearLayout mUnitContain=(LinearLayout)findViewById(R.id.unit_container);
button.setOnLongClickListener(new View.OnLongClickListener(){
@Override public boolean onLongClick(View view){
int buttonId=view.getId();
String buttonValue=""String_Node_Str"";
switch (buttonId) {
case R.id.multiply_button:
buttonValue=""String_Node_Str"";
break;
case R.id.equals_button:
buttonValue=""String_Node_Str"";
break;
case R.id.percent_button:
if (mCalc.mPreferences.getPercentButSec().equals(""String_Node_Str"")) buttonValue=""String_Node_Str"";
 else buttonValue=""String_Node_Str"";
break;
case R.id.nine_button:
mCalc.refreshAllDynamicUnits(true);
break;
case R.id.minus_button:
buttonValue=""String_Node_Str"";
break;
case R.id.divide_button:
buttonValue=""String_Node_Str"";
break;
case R.id.eight_button:
if (getResources().getConfiguration().orientation == Configuration.ORIENTATION_PORTRAIT) {
if (mUnitContain.getVisibility() == LinearLayout.GONE) {
mUnitContain.setVisibility(LinearLayout.VISIBLE);
updateScreen(true,true);
}
 else mUnitContain.setVisibility(LinearLayout.GONE);
}
break;
default :
return true;
}
if (!buttonValue.equals(""String_Node_Str"")) numButtonPressed(buttonValue);
return true;
}
}
);
if (button instanceof AnimatedHoldButton) {
final AnimatedHoldButton ahb=(AnimatedHoldButton)button;
ahb.setOnExtraLongClickListener(new AnimatedHoldButton.OnExtraLongClickListener(){
@Override public void onExtraLongClick(View view){
int buttonId=view.getId();
if (buttonId == R.id.percent_button) {
String main=mCalc.mPreferences.getPercentButMain();
String sec=mCalc.mPreferences.getPercentButSec();
mCalc.mPreferences.setPercentButMain(sec);
mCalc.mPreferences.setPercentButSec(main);
ViewUtils.toastLong(""String_Node_Str"" + sec,mAppContext);
}
}
}
);
}
}
ImageButton backspaceButton=(ImageButton)findViewById(R.id.backspace_button);
backspaceButton.setOnTouchListener(new View.OnTouchListener(){
private Handler mColorHoldHandler;
private Handler mResetHandler;
private View mView;
private static final int RESET_HOLD_TIME=2200;
private static final int CLEAR_HOLD_TIME=300;
@Override public boolean onTouch(View view,MotionEvent event){
switch (event.getAction()) {
case MotionEvent.ACTION_DOWN:
mView=view;
mInc=0;
if (mColorHoldHandler != null) return true;
mColorHoldHandler=new Handler();
mColorHoldHandler.postDelayed(mBackspaceColor,10);
if (mResetHandler != null) return true;
mResetHandler=new Handler();
mResetHandler.postDelayed(mBackspaceReset,RESET_HOLD_TIME);
break;
case MotionEvent.ACTION_UP:
if (mColorHoldHandler == null) return true;
if (mResetHandler == null) return true;
numButtonPressed(""String_Node_Str"");
view.setBackgroundColor(getResources().getColor(R.color.op_button_normal));
mColorHoldHandler.removeCallbacks(mBackspaceColor);
mColorHoldHandler=null;
mResetHandler.removeCallbacks(mBackspaceReset);
mResetHandler=null;
break;
}
return false;
}
Runnable mBackspaceReset=new Runnable(){
@Override public void run(){
mCalc.resetCalc();
setupUnitTypePager();
updateScreen(true);
ViewUtils.toastCentered(""String_Node_Str"",mAppContext);
}
}
;
private int mInc;
Runnable mBackspaceColor=new Runnable(){
private int mStartColor=getResources().getColor(R.color.op_button_pressed);
private int mEndColor=getResources().getColor(R.color.backspace_button_held);
private static final int NUM_COLOR_CHANGES=10;
@Override public void run(){
if (mInc == -1) {
mView.setBackgroundColor(mEndColor);
return;
}
if (mInc == NUM_COLOR_CHANGES) {
numButtonPressed(""String_Node_Str"");
mView.setBackgroundColor(Color.argb(255,0,0,0));
mColorHoldHandler.postDelayed(this,100);
mInc=-1;
return;
}
mColorHoldHandler.postDelayed(this,CLEAR_HOLD_TIME / NUM_COLOR_CHANGES);
float deltaRed=(float)Color.red(mStartColor) + ((float)Color.red(mEndColor) - (float)Color.red(mStartColor)) * ((float)mInc * (float)mInc * (float)mInc) / ((float)NUM_COLOR_CHANGES * (float)NUM_COLOR_CHANGES * (float)NUM_COLOR_CHANGES);
int deltaGreen=Color.green(mStartColor) + ((Color.green(mEndColor) - Color.green(mStartColor)) * mInc) / NUM_COLOR_CHANGES;
int deltaBlue=Color.blue(mStartColor) + ((Color.blue(mEndColor) - Color.blue(mStartColor)) * mInc) / NUM_COLOR_CHANGES;
mView.setBackgroundColor(Color.argb(255,(int)deltaRed,deltaGreen,deltaBlue));
mInc++;
}
}
;
}
);
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  mAppContext=this;
  setContentView(R.layout.activity_calc);
  mCalc=Calculator.getCalculator(this);
  mDisplay=(EditTextDisplay)findViewById(R.id.textDisplay);
  mDisplay.setCalc(mCalc);
  mDisplay.disableSoftInputFromAppearing();
  mDisplay.setOnLongClickListener(new View.OnLongClickListener(){
    @Override public boolean onLongClick(    View v){
      mDisplay.selectAll();
      return false;
    }
  }
);
  mDisplay.setOnTouchListener(new View.OnTouchListener(){
    @Override public boolean onTouch(    View view,    MotionEvent event){
      if (event.getAction() == MotionEvent.ACTION_DOWN) {
        mCalc.setSolved(false);
        mDisplay.setCursorVisible(true);
        mDisplay.clearHighlighted();
      }
      return false;
    }
  }
);
  FragmentManager fm=getSupportFragmentManager();
  mResultListFrag=(ResultListFragment)fm.findFragmentById(R.id.resultListfragmentContainer);
  if (mResultListFrag == null) {
    mResultListFrag=new ResultListFragment();
    fm.beginTransaction().add(R.id.resultListfragmentContainer,mResultListFrag).commit();
  }
  setupUnitTypePager();
  for (  int id : BUTTON_IDS) {
    final Button button=(Button)findViewById(id);
    if (id == R.id.equals_button)     mEqualsButton=button;
    if (id == R.id.percent_button) {
      ((AnimatedHoldButton)button).setPrimaryText(mCalc.mPreferences.getPercentButMain());
      ((AnimatedHoldButton)button).setSecondaryText(mCalc.mPreferences.getPercentButSec());
    }
    button.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View view){
        int buttonId=view.getId();
        String buttonValue=""String_Node_Str"";
switch (buttonId) {
case R.id.plus_button:
          buttonValue=""String_Node_Str"";
        break;
case R.id.minus_button:
      buttonValue=""String_Node_Str"";
    break;
case R.id.multiply_button:
  buttonValue=""String_Node_Str"";
break;
case R.id.divide_button:
buttonValue=""String_Node_Str"";
break;
case R.id.percent_button:
if (mCalc.mPreferences.getPercentButMain().equals(""String_Node_Str"")) buttonValue=""String_Node_Str"";
 else buttonValue=""String_Node_Str"";
break;
case R.id.decimal_button:
buttonValue=""String_Node_Str"";
break;
case R.id.equals_button:
buttonValue=""String_Node_Str"";
break;
case R.id.clear_button:
buttonValue=""String_Node_Str"";
break;
case R.id.open_para_button:
buttonValue=""String_Node_Str"";
break;
case R.id.close_para_button:
buttonValue=""String_Node_Str"";
break;
case R.id.backspace_button:
buttonValue=""String_Node_Str"";
break;
default :
for (int i=0; i < 10; i++) if (buttonId == BUTTON_IDS[i]) buttonValue=String.valueOf(i);
}
numButtonPressed(buttonValue);
}
}
);
final LinearLayout mUnitContain=(LinearLayout)findViewById(R.id.unit_container);
button.setOnLongClickListener(new View.OnLongClickListener(){
@Override public boolean onLongClick(View view){
int buttonId=view.getId();
String buttonValue=""String_Node_Str"";
switch (buttonId) {
case R.id.multiply_button:
buttonValue=""String_Node_Str"";
break;
case R.id.equals_button:
buttonValue=""String_Node_Str"";
break;
case R.id.percent_button:
if (mCalc.mPreferences.getPercentButSec().equals(""String_Node_Str"")) buttonValue=""String_Node_Str"";
 else buttonValue=""String_Node_Str"";
break;
case R.id.nine_button:
mCalc.refreshAllDynamicUnits(true);
break;
case R.id.minus_button:
buttonValue=""String_Node_Str"";
break;
case R.id.divide_button:
buttonValue=""String_Node_Str"";
break;
case R.id.eight_button:
if (getResources().getConfiguration().orientation == Configuration.ORIENTATION_PORTRAIT) {
if (mUnitContain.getVisibility() == LinearLayout.GONE) {
mUnitContain.setVisibility(LinearLayout.VISIBLE);
updateScreen(true,true);
}
 else mUnitContain.setVisibility(LinearLayout.GONE);
}
break;
default :
return true;
}
if (!buttonValue.equals(""String_Node_Str"")) numButtonPressed(buttonValue);
return true;
}
}
);
if (button instanceof AnimatedHoldButton) {
final AnimatedHoldButton ahb=(AnimatedHoldButton)button;
ahb.setOnExtraLongClickListener(new AnimatedHoldButton.OnExtraLongClickListener(){
@Override public void onExtraLongClick(View view){
int buttonId=view.getId();
if (buttonId == R.id.percent_button) {
String main=mCalc.mPreferences.getPercentButMain();
String sec=mCalc.mPreferences.getPercentButSec();
mCalc.mPreferences.setPercentButMain(sec);
mCalc.mPreferences.setPercentButSec(main);
ViewUtils.toastLong(""String_Node_Str"" + sec,mAppContext);
ahb.setPrimaryText(sec);
ahb.setSecondaryText(main);
ahb.invalidate();
}
}
}
);
}
}
ImageButton backspaceButton=(ImageButton)findViewById(R.id.backspace_button);
backspaceButton.setOnTouchListener(new View.OnTouchListener(){
private Handler mColorHoldHandler;
private Handler mResetHandler;
private View mView;
private static final int RESET_HOLD_TIME=2200;
private static final int CLEAR_HOLD_TIME=300;
@Override public boolean onTouch(View view,MotionEvent event){
switch (event.getAction()) {
case MotionEvent.ACTION_DOWN:
mView=view;
mInc=0;
if (mColorHoldHandler != null) return true;
mColorHoldHandler=new Handler();
mColorHoldHandler.postDelayed(mBackspaceColor,10);
if (mResetHandler != null) return true;
mResetHandler=new Handler();
mResetHandler.postDelayed(mBackspaceReset,RESET_HOLD_TIME);
break;
case MotionEvent.ACTION_UP:
if (mColorHoldHandler == null) return true;
if (mResetHandler == null) return true;
numButtonPressed(""String_Node_Str"");
view.setBackgroundColor(getResources().getColor(R.color.op_button_normal));
mColorHoldHandler.removeCallbacks(mBackspaceColor);
mColorHoldHandler=null;
mResetHandler.removeCallbacks(mBackspaceReset);
mResetHandler=null;
break;
}
return false;
}
Runnable mBackspaceReset=new Runnable(){
@Override public void run(){
mCalc.resetCalc();
setupUnitTypePager();
updateScreen(true);
ViewUtils.toastCentered(""String_Node_Str"",mAppContext);
}
}
;
private int mInc;
Runnable mBackspaceColor=new Runnable(){
private int mStartColor=getResources().getColor(R.color.op_button_pressed);
private int mEndColor=getResources().getColor(R.color.backspace_button_held);
private static final int NUM_COLOR_CHANGES=10;
@Override public void run(){
if (mInc == -1) {
mView.setBackgroundColor(mEndColor);
return;
}
if (mInc == NUM_COLOR_CHANGES) {
numButtonPressed(""String_Node_Str"");
mView.setBackgroundColor(Color.argb(255,0,0,0));
mColorHoldHandler.postDelayed(this,100);
mInc=-1;
return;
}
mColorHoldHandler.postDelayed(this,CLEAR_HOLD_TIME / NUM_COLOR_CHANGES);
float deltaRed=(float)Color.red(mStartColor) + ((float)Color.red(mEndColor) - (float)Color.red(mStartColor)) * ((float)mInc * (float)mInc * (float)mInc) / ((float)NUM_COLOR_CHANGES * (float)NUM_COLOR_CHANGES * (float)NUM_COLOR_CHANGES);
int deltaGreen=Color.green(mStartColor) + ((Color.green(mEndColor) - Color.green(mStartColor)) * mInc) / NUM_COLOR_CHANGES;
int deltaBlue=Color.blue(mStartColor) + ((Color.blue(mEndColor) - Color.blue(mStartColor)) * mInc) / NUM_COLOR_CHANGES;
mView.setBackgroundColor(Color.argb(255,(int)deltaRed,deltaGreen,deltaBlue));
mInc++;
}
}
;
}
);
}",0.9949620378911516
35056,"@Override public void onExtraLongClick(View view){
  int buttonId=view.getId();
  if (buttonId == R.id.percent_button) {
    String main=mCalc.mPreferences.getPercentButMain();
    String sec=mCalc.mPreferences.getPercentButSec();
    mCalc.mPreferences.setPercentButMain(sec);
    mCalc.mPreferences.setPercentButSec(main);
    ViewUtils.toastLong(""String_Node_Str"" + sec,mAppContext);
  }
}","@Override public void onExtraLongClick(View view){
  int buttonId=view.getId();
  if (buttonId == R.id.percent_button) {
    String main=mCalc.mPreferences.getPercentButMain();
    String sec=mCalc.mPreferences.getPercentButSec();
    mCalc.mPreferences.setPercentButMain(sec);
    mCalc.mPreferences.setPercentButSec(main);
    ViewUtils.toastLong(""String_Node_Str"" + sec,mAppContext);
    ahb.setPrimaryText(sec);
    ahb.setSecondaryText(main);
    ahb.invalidate();
  }
}",0.9042675893886968
35057,"@Override protected void onSelectionChanged(int selStart,int selEnd){
  if (mCalc != null) {
    int fixedSelStart=mSepHandler.makeIndexValid(selStart);
    int fixedSelEnd=mSepHandler.makeIndexValid((selEnd));
    if (fixedSelStart != selStart || fixedSelEnd != selEnd) {
      setSelection(fixedSelStart,fixedSelEnd);
      return;
    }
    int preLen=mTextPrefex.length();
    int expLen=mExpressionText.length();
    if (selEnd > expLen + preLen) {
      setSelection(selStart,expLen + preLen);
      return;
    }
    if (selStart > expLen + preLen) {
      setSelection(expLen + preLen,selEnd);
      return;
    }
    if (selEnd < preLen) {
      setSelection(selStart,preLen);
      return;
    }
    if (selStart < preLen) {
      setSelection(preLen,selEnd);
      return;
    }
    mCalc.setSelection(mSepHandler.translateFromSepIndex(selStart - preLen),mSepHandler.translateFromSepIndex(selEnd - preLen));
    setCursorVisible(true);
  }
}","@Override protected void onSelectionChanged(int selStart,int selEnd){
  if (mCalc != null) {
    int preLen=mTextPrefex.length();
    int expLen=mExpressionText.length();
    int fixedSelStart=mSepHandler.makeIndexValid(selStart - preLen) + preLen;
    int fixedSelEnd=mSepHandler.makeIndexValid((selEnd - preLen)) + preLen;
    if (fixedSelStart != selStart || fixedSelEnd != selEnd) {
      setSelection(fixedSelStart,fixedSelEnd);
      return;
    }
    if (selEnd > expLen + preLen) {
      setSelection(selStart,expLen + preLen);
      return;
    }
    if (selStart > expLen + preLen) {
      setSelection(expLen + preLen,selEnd);
      return;
    }
    if (selEnd < preLen) {
      setSelection(selStart,preLen);
      return;
    }
    if (selStart < preLen) {
      setSelection(preLen,selEnd);
      return;
    }
    mCalc.setSelection(mSepHandler.translateFromSepIndex(selStart - preLen),mSepHandler.translateFromSepIndex(selEnd - preLen));
    setCursorVisible(true);
  }
}",0.8845360824742268
35058,"/** 
 * Updates the current expression and result list
 * @param updateResult whether or not to update result
 */
public void updateScreen(boolean updateResult){
  updateScreenWithInstaScrollOption(updateResult,false);
  if (!mCalc.isUnitIsSet())   clearConvKeyForFragPos(mConvKeysViewPager.getCurrentItem());
}","/** 
 * Updates the current expression and result list
 * @param updateResult whether or not to update result
 */
public void updateScreen(boolean updateResult){
  updateScreenWithInstaScrollOption(updateResult,false);
  if (!mCalc.isUnitSelected())   clearConvKeyForFragPos(mConvKeysViewPager.getCurrentItem());
}",0.9856
35059,"/** 
 * Called when any non convert key is pressed
 * @param keyPressed ASCII representation of the key pressed (""1"", ""="" ""*"", etc)
 */
public void numButtonPressed(String keyPressed){
  mCalc.parseKeyPressed(keyPressed);
  updateScreen(keyPressed.equals(""String_Node_Str""));
}","/** 
 * Called when any non convert key is pressed
 * @param keyPressed ASCII representation of the key pressed (""1"", ""="" ""*"", etc)
 */
public void numButtonPressed(String keyPressed){
  if (keyPressed.equals(""String_Node_Str"") && mCalc.isUnitSelected() && !mCalc.isSolved()) {
    new AlertDialog.Builder(this).setMessage(""String_Node_Str"").setPositiveButton(android.R.string.yes,new DialogInterface.OnClickListener(){
      public void onClick(      DialogInterface dialog,      int which){
      }
    }
).show();
  }
  mCalc.parseKeyPressed(keyPressed);
  updateScreen(keyPressed.equals(""String_Node_Str""));
}",0.4853932584269663
35060,"/** 
 * Passed a key from calculator (num/op/back/clear/eq) and distributes it to its proper function
 * @param sKey is either single character (but still a String) or a string from result list
 */
public void parseKeyPressed(String sKey){
  if (isExpressionInvalid())   mExpression.clearExpression();
  if (isSolved() && isUnitIsSet())   clearSelectedUnit();
  if (sKey.equals(""String_Node_Str"")) {
    solveAndLoadIntoResultList();
  }
 else   if (sKey.equals(""String_Node_Str""))   backspace();
 else   if (sKey.equals(""String_Node_Str"")) {
    clear();
  }
 else {
    if (mExpression.isSolved() && sKey.matches(""String_Node_Str""))     clearSelectedUnit();
    mExpression.keyPresses(sKey);
  }
}","/** 
 * Passed a key from calculator (num/op/back/clear/eq) and distributes it to its proper function
 * @param sKey is either single character (but still a String) or a string from result list
 */
public void parseKeyPressed(String sKey){
  if (isExpressionInvalid())   mExpression.clearExpression();
  if (isSolved() && isUnitSelected())   clearSelectedUnit();
  if (sKey.equals(""String_Node_Str"")) {
    if (isUnitSelected()) {
      return;
    }
    solveAndLoadIntoResultList();
  }
 else   if (sKey.equals(""String_Node_Str""))   backspace();
 else   if (sKey.equals(""String_Node_Str"")) {
    clear();
  }
 else {
    if (mExpression.isSolved() && sKey.matches(""String_Node_Str""))     clearSelectedUnit();
    mExpression.keyPresses(sKey);
  }
}",0.9579020013802624
35061,"/** 
 * Method turns calculator class into a singleton class  (one instance allowed)
 */
private Calculator(Context appContext){
  mAppContext=appContext;
  mResultList=new ArrayList<Result>();
  mExpression=new Expression(intDisplayPrecision);
  mUnitTypePos=UNIT_TYPE_DEFAULT_POS;
  mHints=new Hints();
  mSolver=new Solver(intCalcPrecision);
  mUnitTypeArray=new ArrayList<UnitType>();
  initiateUnits();
  try {
    loadState();
  }
 catch (  Exception e) {
  }
}","/** 
 * Method turns calculator class into a singleton class  (one instance allowed)
 */
private Calculator(Context appContext){
  mAppContext=appContext;
  mResultList=new ArrayList<Result>();
  mExpression=new Expression(intDisplayPrecision);
  mUnitTypePos=UNIT_TYPE_DEFAULT_POS;
  mHints=new Hints();
  mSolver=new Solver(intCalcPrecision);
  mUnitTypeArray=new ArrayList<UnitType>();
  initiateUnits();
  try {
    loadState();
  }
 catch (  Exception e) {
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(e.toString());
    System.out.println(""String_Node_Str"");
  }
}",0.8483197093551317
35062,"/** 
 * Function that is called after user hits the ""="" key Called by calculator for solving current expression
 * @param exp
 * @return solved expression
 */
private boolean solveAndLoadIntoResultList(){
  Result result=mSolver.solve(mExpression);
  if (result != null) {
    mResultList.add(result);
    if (mResultList.size() > RESULT_LIST_MAX_SIZE)     mResultList.remove(0);
    if (Expression.isInvalid(result.getAnswer()))     return false;
    if (isUnitIsSet()) {
      Unit toUnit=getCurrUnitType().getCurrUnit();
      mResultList.get(mResultList.size() - 1).setResultUnit(toUnit,toUnit,mUnitTypePos);
    }
    return true;
  }
 else   return false;
}","/** 
 * Function that is called after user hits the ""="" key Called by calculator for solving current expression
 * @param exp
 * @return solved expression
 */
private boolean solveAndLoadIntoResultList(){
  Result result=mSolver.solve(mExpression);
  if (result != null) {
    mResultList.add(result);
    if (mResultList.size() > RESULT_LIST_MAX_SIZE)     mResultList.remove(0);
    if (Expression.isInvalid(result.getAnswer()))     return false;
    if (isUnitSelected()) {
      Unit toUnit=getCurrUnitType().getCurrUnit();
      mResultList.get(mResultList.size() - 1).setResultUnit(toUnit,toUnit,mUnitTypePos);
    }
    return true;
  }
 else   return false;
}",0.9932279909706546
35063,"/** 
 * Updates the text with current value from calc Preserves calc's cursor selections
 */
public void updateTextFromCalc(){
  int selStart=mCalc.getSelectionStart();
  int selEnd=mCalc.getSelectionEnd();
  mTextPrefex=""String_Node_Str"";
  mExpressionText=mCalc.toString();
  mTextSuffix=""String_Node_Str"";
  if (!mCalc.isExpressionInvalid() && !mCalc.isExpressionEmpty() && mCalc.getCurrUnitType().isUnitSelected()) {
    mTextSuffix=""String_Node_Str"" + mCalc.getCurrUnitType().getCurrUnit().toString();
    if (!mCalc.isSolved()) {
      mTextPrefex=getResources().getString(R.string.word_Convert) + ""String_Node_Str"";
      mTextSuffix=mTextSuffix + ""String_Node_Str"" + getResources().getString(R.string.word_to)+ ""String_Node_Str"";
    }
  }
  setText(mTextPrefex + mExpressionText + mTextSuffix);
  selStart=selStart + mTextPrefex.length();
  selEnd=selEnd + mTextPrefex.length();
  setSelection(selStart,selEnd);
  if (mCalc.isSolved())   setCursorVisible(false);
 else   setCursorVisible(true);
}","/** 
 * Updates the text with current value from calc Preserves calc's cursor selections
 */
public void updateTextFromCalc(){
  int selStart=mCalc.getSelectionStart();
  int selEnd=mCalc.getSelectionEnd();
  mTextPrefex=""String_Node_Str"";
  mExpressionText=mCalc.toString();
  mTextSuffix=""String_Node_Str"";
  if (!mCalc.isExpressionInvalid() && !mCalc.isExpressionEmpty() && mCalc.isUnitSelected()) {
    mTextSuffix=""String_Node_Str"" + mCalc.getCurrUnitType().getCurrUnit().toString();
    if (!mCalc.isSolved()) {
      mTextPrefex=getResources().getString(R.string.word_Convert) + ""String_Node_Str"";
      mTextSuffix=mTextSuffix + ""String_Node_Str"" + getResources().getString(R.string.word_to)+ ""String_Node_Str"";
    }
  }
  setText(mTextPrefex + mExpressionText + mTextSuffix);
  selStart=selStart + mTextPrefex.length();
  selEnd=selEnd + mTextPrefex.length();
  setSelection(selStart,selEnd);
  if (mCalc.isSolved())   setCursorVisible(false);
 else   setCursorVisible(true);
}",0.4608433734939759
35064,"public JSONObject toJSON() throws JSONException {
  JSONObject json=new JSONObject();
  json.put(JSON_QUERY,getQuerry());
  json.put(JSON_ANSWER,getAnswer());
  json.put(JSON_QUERY_UNIT,mQueryUnit.toJSON());
  json.put(JSON_ANSWER_UNIT,mAnswerUnit.toJSON());
  json.put(JSON_UNIT_TYPE_POS,getUnitTypePos());
  json.put(JSON_CONTAINS_UNITS,containsUnits());
  json.put(JSON_TIMESTAMP,getTimestamp());
  return json;
}","public JSONObject toJSON() throws JSONException {
  JSONObject json=new JSONObject();
  json.put(JSON_QUERY,getQuerry());
  json.put(JSON_ANSWER,getAnswer());
  json.put(JSON_QUERY_UNIT,mQueryUnit.toJSON());
  json.put(JSON_ANSWER_UNIT,mAnswerUnit.toJSON());
  json.put(JSON_UNIT_TYPE_POS,getUnitTypePos());
  json.put(JSON_CONTAINS_UNITS,containsUnits());
  json.put(JSON_TIMESTAMP,mTimestamp);
  return json;
}",0.9927536231884058
35065,"@Override public void onClick(View view){
  int position=getListView().getPositionForView((View)view.getParent());
  Calculator calc=Calculator.getCalculator(getActivity());
  Result thisResult=mResultArray.get(position);
  String textPassBack=""String_Node_Str"";
  int viewID=view.getId();
  if (viewID == R.id.list_item_result_textPrevQuery)   textPassBack=thisResult.getQuerry();
  if (viewID == R.id.list_item_result_textPrevAnswer)   textPassBack=thisResult.getAnswer();
  if (!calc.isUnitIsSet() && thisResult.containsUnits()) {
    Unit unitPassBack;
    if (viewID == R.id.list_item_result_textPrevQuery)     unitPassBack=thisResult.getQuerryUnit();
 else     unitPassBack=thisResult.getAnswerUnit();
    mCallback.selectUnit(unitPassBack,thisResult.getUnitTypePos());
  }
  calc.parseKeyPressed(textPassBack);
  mCallback.updateScreen(false);
}","@Override public void onClick(View view){
  int position=getListView().getPositionForView((View)view.getParent());
  Calculator calc=Calculator.getCalculator(getActivity());
  Result thisResult=mResultArray.get(position);
  String textPassBack=""String_Node_Str"";
  int viewID=view.getId();
  if (viewID == R.id.list_item_result_textPrevQuery)   textPassBack=thisResult.getQuerry();
  if (viewID == R.id.list_item_result_textPrevAnswer)   textPassBack=thisResult.getAnswer();
  if (!calc.isUnitSelected() && thisResult.containsUnits()) {
    Unit unitPassBack;
    if (viewID == R.id.list_item_result_textPrevQuery)     unitPassBack=thisResult.getQuerryUnit();
 else     unitPassBack=thisResult.getAnswerUnit();
    mCallback.selectUnit(unitPassBack,thisResult.getUnitTypePos());
  }
  calc.parseKeyPressed(textPassBack);
  mCallback.updateScreen(false);
}",0.9947275922671354
35066,"/** 
 * Helper function to reduce repeated code. Sets up the query and answer textViews
 * @param textView the TextView to setup
 * @param text the previous query or answer String
 */
private void setUpResultTextView(TextView textView,String text){
  textView.setText(text);
  textView.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      int position=getListView().getPositionForView((View)view.getParent());
      Calculator calc=Calculator.getCalculator(getActivity());
      Result thisResult=mResultArray.get(position);
      String textPassBack=""String_Node_Str"";
      int viewID=view.getId();
      if (viewID == R.id.list_item_result_textPrevQuery)       textPassBack=thisResult.getQuerry();
      if (viewID == R.id.list_item_result_textPrevAnswer)       textPassBack=thisResult.getAnswer();
      if (!calc.isUnitIsSet() && thisResult.containsUnits()) {
        Unit unitPassBack;
        if (viewID == R.id.list_item_result_textPrevQuery)         unitPassBack=thisResult.getQuerryUnit();
 else         unitPassBack=thisResult.getAnswerUnit();
        mCallback.selectUnit(unitPassBack,thisResult.getUnitTypePos());
      }
      calc.parseKeyPressed(textPassBack);
      mCallback.updateScreen(false);
    }
  }
);
  textView.setOnLongClickListener(new View.OnLongClickListener(){
    @Override public boolean onLongClick(    View view){
      int position=getListView().getPositionForView((View)view.getParent());
      mResultArray.remove(position);
      mCallback.updateScreen(true);
      return false;
    }
  }
);
}","/** 
 * Helper function to reduce repeated code. Sets up the query and answer textViews
 * @param textView the TextView to setup
 * @param text the previous query or answer String
 */
private void setUpResultTextView(TextView textView,String text){
  textView.setText(text);
  textView.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      int position=getListView().getPositionForView((View)view.getParent());
      Calculator calc=Calculator.getCalculator(getActivity());
      Result thisResult=mResultArray.get(position);
      String textPassBack=""String_Node_Str"";
      int viewID=view.getId();
      if (viewID == R.id.list_item_result_textPrevQuery)       textPassBack=thisResult.getQuerry();
      if (viewID == R.id.list_item_result_textPrevAnswer)       textPassBack=thisResult.getAnswer();
      if (!calc.isUnitSelected() && thisResult.containsUnits()) {
        Unit unitPassBack;
        if (viewID == R.id.list_item_result_textPrevQuery)         unitPassBack=thisResult.getQuerryUnit();
 else         unitPassBack=thisResult.getAnswerUnit();
        mCallback.selectUnit(unitPassBack,thisResult.getUnitTypePos());
      }
      calc.parseKeyPressed(textPassBack);
      mCallback.updateScreen(false);
    }
  }
);
  textView.setOnLongClickListener(new View.OnLongClickListener(){
    @Override public boolean onLongClick(    View view){
      int position=getListView().getPositionForView((View)view.getParent());
      mResultArray.remove(position);
      mCallback.updateScreen(true);
      return false;
    }
  }
);
}",0.9971617786187322
35067,"private void highlightMatchingPara(String sKey){
  String open=""String_Node_Str"";
  String close=""String_Node_Str"";
  int associatedIndex=-1;
  if (sKey.equals(close)) {
    associatedIndex=findMatchingOpenPara(expresssionToSelection(),expresssionToSelection().lastIndexOf(close));
  }
 else   if (sKey.equals(open)) {
    associatedIndex=findMatchingClosePara(expresssionAfterSelectionStart(),expresssionAfterSelectionStart().indexOf(open));
  }
 else   return;
  if (associatedIndex != -1)   markHighlighted(getSelectionStart() - 1,associatedIndex);
}","private void highlightMatchingPara(String sKey){
  String open=""String_Node_Str"";
  String close=""String_Node_Str"";
  int associatedIndex=-1;
  if (sKey.equals(close)) {
    associatedIndex=findMatchingOpenPara(expresssionToSelection(),expresssionToSelection().lastIndexOf(close));
  }
 else   if (sKey.equals(open) || sKey.equals(""String_Node_Str"" + open)) {
    associatedIndex=findMatchingClosePara(getExpression(),getSelectionStart() - 1);
  }
 else   return;
  if (associatedIndex != -1)   markHighlighted(getSelectionStart() - 1,associatedIndex);
}",0.8617886178861789
35068,"@Override public void onAnimationUpdate(ValueAnimator animator){
  ArrayList<Integer> highlist=mCalc.getHighlighted();
  mHighlightIndex1=highlist.get(0);
  mHighlightIndex2=highlist.get(1);
  String coloredExp=mExpressionText;
  if (mHighlightIndex1 == -1 || mHighlightIndex2 == -1)   animator.cancel();
 else {
    int color=(Integer)animator.getAnimatedValue();
    coloredExp=mExpressionText.substring(0,mHighlightIndex1) + ""String_Node_Str"" + color+ ""String_Node_Str""+ mExpressionText.substring(mHighlightIndex1,mHighlightIndex1 + 1)+ ""String_Node_Str""+ mExpressionText.substring(mHighlightIndex1 + 1,mHighlightIndex2)+ ""String_Node_Str""+ color+ ""String_Node_Str""+ mExpressionText.substring(mHighlightIndex2,mHighlightIndex2 + 1)+ ""String_Node_Str""+ mExpressionText.substring(mHighlightIndex2 + 1,mExpressionText.length());
  }
  setText(Html.fromHtml(""String_Node_Str"" + mTextPrefex + ""String_Node_Str""+ coloredExp+ ""String_Node_Str""+ mTextSuffix+ ""String_Node_Str""));
  setSelection(mSelStart,mSelEnd);
}","@Override public void onAnimationUpdate(ValueAnimator animator){
  ArrayList<Integer> highlist=mCalc.getHighlighted();
  mHighlightIndex1=highlist.get(0);
  mHighlightIndex2=highlist.get(1);
  String coloredExp=mExpressionText;
  if (mHighlightIndex1 == -1)   animator.cancel();
 else {
    int color=(Integer)animator.getAnimatedValue();
    for (int i=0; i < 2; i++) {
    }
    coloredExp=mExpressionText.substring(0,mHighlightIndex1) + ""String_Node_Str"" + color+ ""String_Node_Str""+ mExpressionText.substring(mHighlightIndex1,mHighlightIndex1 + 1)+ ""String_Node_Str""+ mExpressionText.substring(mHighlightIndex1 + 1,mHighlightIndex2)+ ""String_Node_Str""+ color+ ""String_Node_Str""+ mExpressionText.substring(mHighlightIndex2,mHighlightIndex2 + 1)+ ""String_Node_Str""+ mExpressionText.substring(mHighlightIndex2 + 1,mExpressionText.length());
  }
  setText(Html.fromHtml(""String_Node_Str"" + mTextPrefex + ""String_Node_Str""+ coloredExp+ ""String_Node_Str""+ mTextSuffix+ ""String_Node_Str""));
  setSelection(mSelStart,mSelEnd);
}",0.8967551622418879
35069,"/** 
 * Updates the text with current value from calc Preserves calc's cursor selections
 */
@TargetApi(Build.VERSION_CODES.HONEYCOMB) public void updateTextFromCalc(){
  mSelStart=mCalc.getSelectionStart();
  mSelEnd=mCalc.getSelectionEnd();
  mTextPrefex=""String_Node_Str"";
  mExpressionText=mCalc.toString();
  mTextSuffix=""String_Node_Str"";
  if (!mCalc.isExpressionInvalid() && !mCalc.isExpressionEmpty() && mCalc.isUnitSelected()) {
    mTextSuffix=""String_Node_Str"" + mCalc.getCurrUnitType().getCurrUnit().toString();
    if (!mCalc.isSolved()) {
      mTextPrefex=getResources().getString(R.string.word_Convert) + ""String_Node_Str"";
      mTextSuffix=mTextSuffix + ""String_Node_Str"" + getResources().getString(R.string.word_to)+ ""String_Node_Str"";
      mSelStart=mSelStart + mTextPrefex.length();
      mSelEnd=mSelEnd + mTextPrefex.length();
    }
  }
  setText(Html.fromHtml(""String_Node_Str"" + mTextPrefex + ""String_Node_Str""+ mExpressionText+ ""String_Node_Str""+ mTextSuffix+ ""String_Node_Str""));
  ArrayList<Integer> highlist=mCalc.getHighlighted();
  mHighlightIndex1=highlist.get(0);
  mHighlightIndex2=highlist.get(1);
  if (mHighlightIndex1 != -1 && mHighlightIndex2 != -1) {
    Integer colorFrom=Color.RED;
    Integer colorTo=Color.WHITE;
    ValueAnimator colorAnimation=ValueAnimator.ofObject(new ArgbEvaluator(),colorFrom,colorTo);
    colorAnimation.addUpdateListener(new AnimatorUpdateListener(){
      @Override public void onAnimationUpdate(      ValueAnimator animator){
        ArrayList<Integer> highlist=mCalc.getHighlighted();
        mHighlightIndex1=highlist.get(0);
        mHighlightIndex2=highlist.get(1);
        String coloredExp=mExpressionText;
        if (mHighlightIndex1 == -1 || mHighlightIndex2 == -1)         animator.cancel();
 else {
          int color=(Integer)animator.getAnimatedValue();
          coloredExp=mExpressionText.substring(0,mHighlightIndex1) + ""String_Node_Str"" + color+ ""String_Node_Str""+ mExpressionText.substring(mHighlightIndex1,mHighlightIndex1 + 1)+ ""String_Node_Str""+ mExpressionText.substring(mHighlightIndex1 + 1,mHighlightIndex2)+ ""String_Node_Str""+ color+ ""String_Node_Str""+ mExpressionText.substring(mHighlightIndex2,mHighlightIndex2 + 1)+ ""String_Node_Str""+ mExpressionText.substring(mHighlightIndex2 + 1,mExpressionText.length());
        }
        setText(Html.fromHtml(""String_Node_Str"" + mTextPrefex + ""String_Node_Str""+ coloredExp+ ""String_Node_Str""+ mTextSuffix+ ""String_Node_Str""));
        setSelection(mSelStart,mSelEnd);
      }
    }
);
    colorAnimation.addListener(new AnimatorListenerAdapter(){
      @Override public void onAnimationEnd(      Animator animation){
        mCalc.clearHighlighted();
      }
    }
);
    colorAnimation.setDuration(600 * 2);
    colorAnimation.start();
  }
  setSelection(mSelStart,mSelEnd);
  setCursorVisible(!mCalc.isSolved());
}","/** 
 * Updates the text with current value from calc Preserves calc's cursor selections
 */
@TargetApi(Build.VERSION_CODES.HONEYCOMB) public void updateTextFromCalc(){
  mSelStart=mCalc.getSelectionStart();
  mSelEnd=mCalc.getSelectionEnd();
  mTextPrefex=""String_Node_Str"";
  mExpressionText=mCalc.toString();
  mTextSuffix=""String_Node_Str"";
  if (!mCalc.isExpressionInvalid() && !mCalc.isExpressionEmpty() && mCalc.isUnitSelected()) {
    mTextSuffix=""String_Node_Str"" + mCalc.getCurrUnitType().getCurrUnit().toString();
    if (!mCalc.isSolved()) {
      mTextPrefex=getResources().getString(R.string.word_Convert) + ""String_Node_Str"";
      mTextSuffix=mTextSuffix + ""String_Node_Str"" + getResources().getString(R.string.word_to)+ ""String_Node_Str"";
      mSelStart=mSelStart + mTextPrefex.length();
      mSelEnd=mSelEnd + mTextPrefex.length();
    }
  }
  setText(Html.fromHtml(""String_Node_Str"" + mTextPrefex + ""String_Node_Str""+ mExpressionText+ ""String_Node_Str""+ mTextSuffix+ ""String_Node_Str""));
  ArrayList<Integer> highlist=mCalc.getHighlighted();
  mHighlightIndex1=highlist.get(0);
  mHighlightIndex2=highlist.get(1);
  if (mHighlightIndex1 != -1) {
    Integer colorFrom=Color.RED;
    Integer colorTo=Color.WHITE;
    ValueAnimator colorAnimation=ValueAnimator.ofObject(new ArgbEvaluator(),colorFrom,colorTo);
    colorAnimation.addUpdateListener(new AnimatorUpdateListener(){
      @Override public void onAnimationUpdate(      ValueAnimator animator){
        ArrayList<Integer> highlist=mCalc.getHighlighted();
        mHighlightIndex1=highlist.get(0);
        mHighlightIndex2=highlist.get(1);
        String coloredExp=mExpressionText;
        if (mHighlightIndex1 == -1)         animator.cancel();
 else {
          int color=(Integer)animator.getAnimatedValue();
          for (int i=0; i < 2; i++) {
          }
          coloredExp=mExpressionText.substring(0,mHighlightIndex1) + ""String_Node_Str"" + color+ ""String_Node_Str""+ mExpressionText.substring(mHighlightIndex1,mHighlightIndex1 + 1)+ ""String_Node_Str""+ mExpressionText.substring(mHighlightIndex1 + 1,mHighlightIndex2)+ ""String_Node_Str""+ color+ ""String_Node_Str""+ mExpressionText.substring(mHighlightIndex2,mHighlightIndex2 + 1)+ ""String_Node_Str""+ mExpressionText.substring(mHighlightIndex2 + 1,mExpressionText.length());
        }
        setText(Html.fromHtml(""String_Node_Str"" + mTextPrefex + ""String_Node_Str""+ coloredExp+ ""String_Node_Str""+ mTextSuffix+ ""String_Node_Str""));
        setSelection(mSelStart,mSelEnd);
      }
    }
);
    colorAnimation.addListener(new AnimatorListenerAdapter(){
      @Override public void onAnimationEnd(      Animator animation){
        mCalc.clearHighlighted();
      }
    }
);
    colorAnimation.setDuration(600);
    colorAnimation.start();
  }
  setSelection(mSelStart,mSelEnd);
  setCursorVisible(!mCalc.isSolved());
}",0.9541155866900176
35070,"public int getReversedYearIndex(){
  return mHistoricalValues.size() - mYearIndex;
}","public int getReversedYearIndex(){
  return mHistoricalValues.size() - 1 - mYearIndex;
}",0.9767441860465116
35071,"/** 
 * Index value 0 corresponds to 2014, 1 to 2013 etc
 * @param reversedIndex
 */
public void setYearIndexReversed(int reversedIndex){
  setYearIndex(mHistoricalValues.size() - reversedIndex);
}","/** 
 * Index value 0 corresponds to 2014, 1 to 2013 etc
 * @param reversedIndex
 */
public void setYearIndexReversed(int reversedIndex){
  setYearIndex(mHistoricalValues.size() - 1 - reversedIndex);
}",0.9899497487437184
35072,"/** 
 * @return an array of all years in decrementing order (2014, 2013,... etc)
 */
public CharSequence[] getPossibleYearsReversed(){
  int arraySize=mHistoricalValues.size();
  CharSequence[] cs=new CharSequence[arraySize];
  for (int i=0; i < arraySize; i++)   cs[i]=String.valueOf(mIndexStartYearOffset + arraySize - i);
  return cs;
}","/** 
 * @return an array of all years in decrementing order (2014, 2013,... etc)
 */
public CharSequence[] getPossibleYearsReversed(){
  int arraySize=mHistoricalValues.size();
  CharSequence[] cs=new CharSequence[arraySize];
  for (int i=0; i < arraySize; i++)   cs[i]=String.valueOf(mIndexStartYearOffset + arraySize - 1 - i);
  return cs;
}",0.9941348973607038
35073,"public void backspaceAtSelection(){
  int selStart=getSelectionStart();
  int selEnd=getSelectionEnd();
  if (isEmpty() || selEnd == 0)   return;
  if (selStart != selEnd)   insertAtSelection(""String_Node_Str"");
 else {
    setExpression(getExpression().substring(0,selStart - 1) + getExpression().substring(selStart,getExpressionLength()));
    setSelection(selStart - 1,selStart - 1);
  }
}","public void backspaceAtSelection(){
  int selStart=getSelectionStart();
  int selEnd=getSelectionEnd();
  if (isEmpty() || selEnd == 0)   return;
  if (selStart != selEnd)   insertAtSelection(""String_Node_Str"");
 else {
    setExpression(getExpression().substring(0,selStart - 1) + expresssionAfterSelectionStart());
    setSelection(selStart - 1,selStart - 1);
  }
}",0.9011857707509882
35074,"/** 
 * This function will try to add a number or operator, or entire result list to the current expression Note that there is lots of error checking to be sure user can't entire an invalid operator/number
 * @param sKey should only be single valid number or operator character, or longer previous results
 */
public void keyPresses(String sKey){
  if (sKey.length() > 1) {
    if (isInvalid(sKey))     return;
    if (mSolved)     replaceExpression(sKey);
 else     insertAtSelection(sKey);
    mSolved=false;
    return;
  }
  if (mSolved && sKey.matches(""String_Node_Str""))   clearExpression();
  if (!isEntryValid(sKey))   return;
  if (sKey.equals(""String_Node_Str"") && expresssionToSelection().matches(""String_Node_Str""))   sKey=""String_Node_Str"" + sKey;
  if (sKey.matches(""String_Node_Str"") && expresssionToSelection().matches(""String_Node_Str""))   sKey=""String_Node_Str"" + sKey;
  if (sKey.equals(""String_Node_Str""))   if (numOpenPara() <= 0) {
    addToExpressionStart(""String_Node_Str"");
    markHighlighted(0,getSelectionEnd());
  }
  if (sKey.matches(regexAnyValidOperator) && expresssionToSelection().matches(""String_Node_Str"" + regexAnyOpExceptPercent + regexAnyValidOperator+ ""String_Node_Str"")) {
    if (getSelectionEnd() > getSelectionStart())     backspaceAtSelection();
    backspaceAtSelection();
    backspaceAtSelection();
  }
 else   if (sKey.matches(regexInvalidStartChar) && expresssionToSelection().matches(""String_Node_Str"" + regexAnyOpExceptPercent + ""String_Node_Str"")) {
    if (getSelectionEnd() > getSelectionStart())     backspaceAtSelection();
    backspaceAtSelection();
  }
  insertAtSelection(sKey);
  mSolved=false;
}","/** 
 * This function will try to add a number or operator, or entire result list to the current expression Note that there is lots of error checking to be sure user can't entire an invalid operator/number
 * @param sKey should only be single valid number or operator character, or longer previous results
 */
public void keyPresses(String sKey){
  clearHighlighted();
  if (sKey.length() > 1) {
    if (isInvalid(sKey))     return;
    if (mSolved)     replaceExpression(sKey);
 else     insertAtSelection(sKey);
    mSolved=false;
    return;
  }
  if (mSolved && sKey.matches(""String_Node_Str""))   clearExpression();
  if (!isEntryValid(sKey))   return;
  if (sKey.equals(""String_Node_Str"") && expresssionToSelection().matches(""String_Node_Str""))   sKey=""String_Node_Str"" + sKey;
  if (sKey.matches(""String_Node_Str"") && expresssionToSelection().matches(""String_Node_Str""))   sKey=""String_Node_Str"" + sKey;
  if (sKey.equals(""String_Node_Str""))   if (numOpenPara() <= 0) {
    addToExpressionStart(""String_Node_Str"");
    markHighlighted(0,getSelectionEnd());
  }
  if (sKey.matches(regexAnyValidOperator) && expresssionToSelection().matches(""String_Node_Str"" + regexAnyOpExceptPercent + regexAnyValidOperator+ ""String_Node_Str"")) {
    if (getSelectionEnd() > getSelectionStart())     backspaceAtSelection();
    backspaceAtSelection();
    backspaceAtSelection();
  }
 else   if (sKey.matches(regexInvalidStartChar) && expresssionToSelection().matches(""String_Node_Str"" + regexAnyOpExceptPercent + ""String_Node_Str"")) {
    if (getSelectionEnd() > getSelectionStart())     backspaceAtSelection();
    backspaceAtSelection();
  }
  insertAtSelection(sKey);
  highlightMatchingPara(sKey);
  mSolved=false;
}",0.9842589842589844
35075,"/** 
 * Replaces % operators their respective operators 
 */
public void replacePercentOps(){
  String str=getExpression();
  String subStr=""String_Node_Str"";
  for (int i=0; i < str.length(); i++) {
    if (str.charAt(i) == '%') {
      subStr=str.substring(0,i);
      String lastNum=getLastNumb(subStr);
      subStr=subStr.substring(0,subStr.length() - lastNum.length());
      if (!subStr.equals(""String_Node_Str"")) {
        String lastOp=subStr.substring(subStr.length() - 1,subStr.length());
        subStr=subStr.substring(0,subStr.length() - 1);
        if (lastOp.matches(regexGroupedAddSub) && !subStr.equals(""String_Node_Str""))         subStr=""String_Node_Str"" + subStr + ""String_Node_Str""+ lastOp+ lastNum+ ""String_Node_Str"";
 else         subStr=subStr + lastOp + ""String_Node_Str""+ lastNum+ ""String_Node_Str"";
      }
 else       subStr=""String_Node_Str"" + lastNum + ""String_Node_Str"";
      str=subStr + str.substring(i + 1,str.length());
      i=subStr.length();
    }
  }
  replaceExpression(str);
}","/** 
 * Replaces % operators their respective operators 
 */
public void replacePercentOps(){
  String str=getExpression();
  String subStr=""String_Node_Str"";
  String strAfter=""String_Node_Str"";
  for (int i=0; i < str.length(); i++) {
    if (str.charAt(i) == '%') {
      subStr=str.substring(0,i);
      String lastNum=getLastNumb(subStr);
      subStr=subStr.substring(0,subStr.length() - lastNum.length());
      strAfter=str.substring(i + 1,str.length());
      if (!subStr.equals(""String_Node_Str"")) {
        String lastOp=subStr.substring(subStr.length() - 1,subStr.length());
        subStr=subStr.substring(0,subStr.length() - 1);
        if (lastOp.matches(regexGroupedAddSub) && !subStr.equals(""String_Node_Str"") && (strAfter.equals(""String_Node_Str"") || strAfter.matches(regexGroupedAddSub + ""String_Node_Str"")))         subStr=""String_Node_Str"" + subStr + ""String_Node_Str""+ lastOp+ lastNum+ ""String_Node_Str"";
 else         subStr=subStr + lastOp + ""String_Node_Str""+ lastNum+ ""String_Node_Str"";
      }
 else       subStr=""String_Node_Str"" + lastNum + ""String_Node_Str"";
      str=subStr + strAfter;
      i=subStr.length();
    }
  }
  replaceExpression(str);
}",0.8116469517743403
35076,"/** 
 * Updates the text with current value from calc Preserves calc's cursor selections
 */
@TargetApi(Build.VERSION_CODES.HONEYCOMB) public void updateTextFromCalc(){
  int selStart=mCalc.getSelectionStart();
  int selEnd=mCalc.getSelectionEnd();
  mTextPrefex=""String_Node_Str"";
  mExpressionText=mCalc.toString();
  mTextSuffix=""String_Node_Str"";
  if (!mCalc.isExpressionInvalid() && !mCalc.isExpressionEmpty() && mCalc.isUnitSelected()) {
    mTextSuffix=""String_Node_Str"" + mCalc.getCurrUnitType().getCurrUnit().toString();
    if (!mCalc.isSolved()) {
      mTextPrefex=getResources().getString(R.string.word_Convert) + ""String_Node_Str"";
      mTextSuffix=mTextSuffix + ""String_Node_Str"" + getResources().getString(R.string.word_to)+ ""String_Node_Str"";
      selStart=selStart + mTextPrefex.length();
      selEnd=selEnd + mTextPrefex.length();
    }
  }
  setText(Html.fromHtml(""String_Node_Str"" + mTextPrefex + ""String_Node_Str""+ mExpressionText+ ""String_Node_Str""+ mTextSuffix+ ""String_Node_Str""));
  setSelection(selStart,selEnd);
  setCursorVisible(!mCalc.isSolved());
}","/** 
 * Updates the text with current value from calc Preserves calc's cursor selections
 */
@TargetApi(Build.VERSION_CODES.HONEYCOMB) public void updateTextFromCalc(){
  int selStart=mCalc.getSelectionStart();
  int selEnd=mCalc.getSelectionEnd();
  mTextPrefex=""String_Node_Str"";
  mExpressionText=mCalc.toString();
  mTextSuffix=""String_Node_Str"";
  if (!mCalc.isExpressionInvalid() && !mCalc.isExpressionEmpty() && mCalc.isUnitSelected()) {
    mTextSuffix=""String_Node_Str"" + mCalc.getCurrUnitType().getCurrUnit().toString();
    if (!mCalc.isSolved()) {
      mTextPrefex=getResources().getString(R.string.word_Convert) + ""String_Node_Str"";
      mTextSuffix=mTextSuffix + ""String_Node_Str"" + getResources().getString(R.string.word_to)+ ""String_Node_Str"";
      selStart=selStart + mTextPrefex.length();
      selEnd=selEnd + mTextPrefex.length();
    }
  }
  setText(Html.fromHtml(""String_Node_Str"" + mTextPrefex + ""String_Node_Str""+ mExpressionText+ ""String_Node_Str""+ mTextSuffix+ ""String_Node_Str""));
  if (mCalc.getHighlighted().get(0) != -1) {
    Integer colorFrom=Color.RED;
    Integer colorTo=Color.WHITE;
    ValueAnimator colorAnimation=ValueAnimator.ofObject(new ArgbEvaluator(),colorFrom,colorTo);
    colorAnimation.addUpdateListener(new AnimatorUpdateListener(){
      @Override public void onAnimationUpdate(      ValueAnimator animator){
        setTextColor((Integer)animator.getAnimatedValue());
      }
    }
);
    colorAnimation.addListener(new AnimatorListenerAdapter(){
      @Override public void onAnimationEnd(      Animator animation){
        System.out.println(""String_Node_Str"");
        mCalc.clearHighlighted();
      }
    }
);
    colorAnimation.setDuration(600 * 2);
    colorAnimation.start();
  }
  setSelection(selStart,selEnd);
  setCursorVisible(!mCalc.isSolved());
}",0.7312866505691618
35077,"@Override public View getView(int position,View convertView,ViewGroup parent){
  if (convertView == null)   convertView=getActivity().getLayoutInflater().inflate(R.layout.list_item_result,null);
  Result result=getItem(position);
  TextView textViewUnitDesc=(TextView)convertView.findViewById(R.id.list_item_result_convertUnitDesc);
  if (result.containsUnits()) {
    String text=getResources().getString(R.string.word_Converting) + ""String_Node_Str"" + result.getQuerryUnit().getLowercaseLongName()+ ""String_Node_Str""+ getResources().getString(R.string.word_to)+ ""String_Node_Str""+ result.getAnswerUnit().getLowercaseLongName()+ ""String_Node_Str"";
    textViewUnitDesc.setText(text);
  }
 else   textViewUnitDesc.setVisibility(View.GONE);
  TextView textViewQuerry=(TextView)convertView.findViewById(R.id.list_item_result_textPrevQuery);
  setUpResultTextView(textViewQuerry,result.getTextQuerry());
  TextView textViewAnswer=(TextView)convertView.findViewById(R.id.list_item_result_textPrevAnswer);
  setUpResultTextView(textViewAnswer,result.getTextAnswer());
  return convertView;
}","@Override public View getView(int position,View convertView,ViewGroup parent){
  if (convertView == null)   convertView=getActivity().getLayoutInflater().inflate(R.layout.list_item_result,null);
  Result result=getItem(position);
  TextView textViewUnitDesc=(TextView)convertView.findViewById(R.id.list_item_result_convertUnitDesc);
  if (result.containsUnits()) {
    String text=getResources().getString(R.string.word_Converting) + ""String_Node_Str"" + result.getQuerryUnit().getLowercaseLongName()+ ""String_Node_Str""+ getResources().getString(R.string.word_to)+ ""String_Node_Str""+ result.getAnswerUnit().getLowercaseLongName()+ ""String_Node_Str"";
    textViewUnitDesc.setText(text);
    textViewUnitDesc.setVisibility(View.VISIBLE);
  }
 else   textViewUnitDesc.setVisibility(View.GONE);
  TextView textViewQuerry=(TextView)convertView.findViewById(R.id.list_item_result_textPrevQuery);
  setUpResultTextView(textViewQuerry,result.getTextQuerry());
  TextView textViewAnswer=(TextView)convertView.findViewById(R.id.list_item_result_textPrevAnswer);
  setUpResultTextView(textViewAnswer,result.getTextAnswer());
  return convertView;
}",0.9774977497749776
35078,"/** 
 * Method turns calculator class into a singleton class (one instance allowed)
 */
private Calculator(Context appContext){
  mAppContext=appContext;
  try {
    loadState();
  }
 catch (  Exception e) {
    mResultList=new ArrayList<Result>();
    mExpression=new Expression(intDisplayPrecision);
    mUnitTypePos=2;
  }
  mMcOperate=new MathContext(intCalcPrecision);
  initiateUnits();
}","/** 
 * Method turns calculator class into a singleton class (one instance allowed)
 */
private Calculator(Context appContext){
  mAppContext=appContext;
  mResultList=new ArrayList<Result>();
  mExpression=new Expression(intDisplayPrecision);
  mUnitTypePos=2;
  mMcOperate=new MathContext(intCalcPrecision);
  try {
    loadState();
  }
 catch (  Exception e) {
  }
  initiateUnits();
}",0.5498721227621484
35079,"/** 
 * Try to paste the current clipboard text into this EditText 
 */
@SuppressWarnings(""String_Node_Str"") @TargetApi(Build.VERSION_CODES.HONEYCOMB) private void onTextPaste(){
  String textToPaste;
  int currentapiVersion=android.os.Build.VERSION.SDK_INT;
  if (currentapiVersion >= android.os.Build.VERSION_CODES.HONEYCOMB) {
    ClipboardManager clipboard=(ClipboardManager)getContext().getSystemService(Context.CLIPBOARD_SERVICE);
    ClipData clip=clipboard.getPrimaryClip();
    textToPaste=clip.getItemAt(0).coerceToText(getContext()).toString();
  }
 else {
    ClipboardManager clipboard=(ClipboardManager)getContext().getSystemService(Context.CLIPBOARD_SERVICE);
    if (clipboard.hasText())     textToPaste=clipboard.getText().toString();
 else     return;
  }
  Toast.makeText(context,""String_Node_Str"" + textToPaste,Toast.LENGTH_SHORT).show();
  mCalc.pasteIntoExpression(textToPaste);
}","/** 
 * Try to paste the current clipboard text into this EditText 
 */
@SuppressWarnings(""String_Node_Str"") @TargetApi(Build.VERSION_CODES.HONEYCOMB) private void onTextPaste(){
  String textToPaste;
  int currentapiVersion=android.os.Build.VERSION.SDK_INT;
  if (currentapiVersion >= android.os.Build.VERSION_CODES.HONEYCOMB) {
    ClipboardManager clipboard=(ClipboardManager)getContext().getSystemService(Context.CLIPBOARD_SERVICE);
    ClipData clip=clipboard.getPrimaryClip();
    textToPaste=clip.getItemAt(0).coerceToText(getContext()).toString();
  }
 else {
    ClipboardManager clipboard=(ClipboardManager)getContext().getSystemService(Context.CLIPBOARD_SERVICE);
    if (clipboard.hasText())     textToPaste=clipboard.getText().toString();
 else     return;
  }
  Toast.makeText(context,""String_Node_Str"" + textToPaste + ""String_Node_Str"",Toast.LENGTH_SHORT).show();
  mCalc.pasteIntoExpression(textToPaste);
}",0.9890350877192984
35080,"/** 
 * Try to cut the current clipboard text 
 */
@SuppressWarnings(""String_Node_Str"") @TargetApi(Build.VERSION_CODES.HONEYCOMB) private void onTextCut(){
  int selStart=getSelectionStart();
  int selEnd=getSelectionEnd();
  CharSequence copiedText=getText().subSequence(selStart,selEnd);
  int currentapiVersion=android.os.Build.VERSION.SDK_INT;
  if (currentapiVersion >= android.os.Build.VERSION_CODES.HONEYCOMB) {
    ClipboardManager clipboard=(ClipboardManager)getContext().getSystemService(Context.CLIPBOARD_SERVICE);
    clipboard.setPrimaryClip(ClipData.newPlainText(null,copiedText));
  }
 else {
    ClipboardManager clipboard=(ClipboardManager)getContext().getSystemService(Context.CLIPBOARD_SERVICE);
    clipboard.setText(copiedText);
  }
  mCalc.parseKeyPressed(""String_Node_Str"");
  LAST_CUT_OR_COPY_TIME=SystemClock.uptimeMillis();
  Toast.makeText(context,""String_Node_Str"",Toast.LENGTH_SHORT).show();
}","/** 
 * Try to cut the current clipboard text 
 */
@SuppressWarnings(""String_Node_Str"") @TargetApi(Build.VERSION_CODES.HONEYCOMB) private void onTextCut(){
  int selStart=getSelectionStart();
  int selEnd=getSelectionEnd();
  CharSequence copiedText=getText().subSequence(selStart,selEnd);
  int currentapiVersion=android.os.Build.VERSION.SDK_INT;
  if (currentapiVersion >= android.os.Build.VERSION_CODES.HONEYCOMB) {
    ClipboardManager clipboard=(ClipboardManager)getContext().getSystemService(Context.CLIPBOARD_SERVICE);
    clipboard.setPrimaryClip(ClipData.newPlainText(null,copiedText));
  }
 else {
    ClipboardManager clipboard=(ClipboardManager)getContext().getSystemService(Context.CLIPBOARD_SERVICE);
    clipboard.setText(copiedText);
  }
  mCalc.parseKeyPressed(""String_Node_Str"");
  LAST_CUT_OR_COPY_TIME=SystemClock.uptimeMillis();
  Toast.makeText(context,""String_Node_Str"" + copiedText + ""String_Node_Str"",Toast.LENGTH_SHORT).show();
}",0.9824187533297816
35081,"@Override protected void onSelectionChanged(int selStart,int selEnd){
  if (mCalc != null) {
    if (mCalc.toString().equals(""String_Node_Str""))     return;
    mCalc.setSelection(selStart,selEnd);
    setCursorVisible(true);
  }
}","@Override protected void onSelectionChanged(int selStart,int selEnd){
  if (mCalc != null) {
    if (mCalc.toString().equals(""String_Node_Str""))     return;
    int expLen=mCalc.toString().length();
    if (selEnd > expLen) {
      setSelection(selStart,expLen);
      return;
    }
    if (selStart > expLen) {
      setSelection(expLen,selEnd);
      return;
    }
    mCalc.setSelection(selStart,selEnd);
    setCursorVisible(true);
  }
}",0.6875
35082,"/** 
 * Updates the text with current value from calc. Preserves calc's cursor selections
 */
public void updateTextFromCalc(){
  int selStart=mCalc.getSelectionStart();
  int selEnd=mCalc.getSelectionEnd();
  setText(mCalc.toString());
  setSelection(selStart,selEnd);
  if (selStart == mCalc.toString().length())   setCursorVisible(false);
 else   setCursorVisible(true);
}","/** 
 * Updates the text with current value from calc. Preserves calc's cursor selections
 */
public void updateTextFromCalc(){
  int selStart=mCalc.getSelectionStart();
  int selEnd=mCalc.getSelectionEnd();
  String text=mCalc.toString();
  if (mCalc.getCurrUnitType().isUnitSelected())   text=text + ""String_Node_Str"" + mCalc.getCurrUnitType().getSelectedUnit().toString();
  setText(text);
  setSelection(selStart,selEnd);
  if (selStart == mCalc.toString().length())   setCursorVisible(false);
 else   setCursorVisible(true);
}",0.7792494481236203
35083,"/** 
 * Adds parenthesis around power operations 
 */
public void groupPowerOperand(){
  String str=mExpression.toString();
  for (int i=1; i < str.length(); i++) {
    if (str.charAt(i) == '^') {
      int openPareIndex=0;
      int closePareIndex=0;
      if (str.charAt(i - 1) == ')') {
        for (int k=i - 2; k > 0; k--) {
          if (numOpenPara(str.substring(k,i)) == 0) {
            openPareIndex=k;
            break;
          }
        }
      }
 else {
        String lastNumb=getLastNumb(str.substring(0,i));
        openPareIndex=i - lastNumb.length();
      }
      if (str.charAt(i + 1) == '(') {
        for (int k=i + 2; k <= str.length(); k++) {
          if (numOpenPara(str.substring(i,k)) == 0) {
            closePareIndex=k;
            break;
          }
        }
      }
 else {
        String firstNum=getFirstNumb(str.substring(i + 1,str.length()));
        closePareIndex=i + 1 + firstNum.length();
      }
      str=str.substring(0,openPareIndex) + ""String_Node_Str"" + str.substring(openPareIndex,closePareIndex)+ ""String_Node_Str""+ str.substring(closePareIndex,str.length());
      i=closePareIndex;
    }
  }
  replaceExpression(str);
}","/** 
 * Adds parenthesis around power operations 
 */
public void groupPowerOperand(){
  String str=mExpression.toString();
  for (int i=1; i < str.length(); i++) {
    if (str.charAt(i) == '^') {
      int openPareIndex=0;
      int closePareIndex=0;
      if (str.charAt(i - 1) == ')') {
        for (int k=i - 2; k > 0; k--) {
          if (numOpenPara(str.substring(k,i)) == 0) {
            openPareIndex=k;
            break;
          }
        }
      }
 else {
        String lastNumb=getLastNumb(str.substring(0,i));
        lastNumb=lastNumb.replaceAll(""String_Node_Str"",""String_Node_Str"");
        openPareIndex=i - lastNumb.length();
      }
      if (str.charAt(i + 1) == '(') {
        for (int k=i + 2; k <= str.length(); k++) {
          if (numOpenPara(str.substring(i,k)) == 0) {
            closePareIndex=k;
            break;
          }
        }
      }
 else {
        System.out.println(""String_Node_Str"");
        String firstNum=getFirstNumb(str.substring(i + 1,str.length()));
        closePareIndex=i + 1 + firstNum.length();
      }
      str=str.substring(0,openPareIndex) + ""String_Node_Str"" + str.substring(openPareIndex,closePareIndex)+ ""String_Node_Str""+ str.substring(closePareIndex,str.length());
      i=closePareIndex;
    }
  }
  System.out.println(""String_Node_Str"" + str);
  replaceExpression(str);
}",0.9328565752880412
35084,"/** 
 * Gets the last double (returned as a String) for input string
 * @param String expression to find last number of
 * @return anything after last valid operator, or """" if expression empty, or entire expression if doesn't contain regexAnyValidOperator. Note if expression is ""1+-5"" it will return ""-5""
 */
private String getLastNumb(String expStr){
  String[] strA=expStr.split(regexAnyValidOperator);
  if (strA.length == 0)   return ""String_Node_Str"";
 else {
    if (expStr.matches(""String_Node_Str"" + regexAnyValidOperator + regexAnyValidOperator+ regexGroupedNumber))     return expStr.replaceAll(""String_Node_Str"" + regexAnyValidOperator + regexGroupedNumber+ ""String_Node_Str"",""String_Node_Str"");
    return strA[strA.length - 1];
  }
}","/** 
 * Gets the last number (returned as a String) for input string
 * @param String expression to find last number of
 * @return Last valid number in expression, """" if expression empty, or entire expression if doesn't contain regexAnyValidOperator. Note if expression is ""1+-5"" it will return ""-5""
 */
private String getLastNumb(String expStr){
  if (expStr.matches(""String_Node_Str"" + regexGroupedNonNegNumber))   return expStr.replaceAll(""String_Node_Str"" + regexGroupedNonNegNumber + ""String_Node_Str"",""String_Node_Str"");
  return ""String_Node_Str"";
}",0.5479662317728319
35085,"/** 
 * This function will try to add a number or operator, or entire result list to the current expression Note that there is lots of error checking to be sure user can't entire an invalid operator/number
 * @param sKey should only be single vaild number or operator character, or longer previous results
 */
public void keyPresses(String sKey){
  if (sKey.length() > 1) {
    if (mSolved)     replaceExpression(sKey);
 else     insertAtSelection(sKey);
    mSolved=false;
    return;
  }
  if (sKey.matches(regexHasInvalidChars))   throw new IllegalArgumentException(""String_Node_Str"");
  if (sKey.matches(regexInvalidStartChar) && (getLastNumb().equals(""String_Node_Str"") || expresssionToSelection().matches(""String_Node_Str"")))   return;
  if (mSolved && sKey.matches(""String_Node_Str""))   clearExpression();
  if (sKey.equals(""String_Node_Str"") && expresssionToSelection().matches(""String_Node_Str""))   sKey=""String_Node_Str"" + sKey;
  if (sKey.matches(""String_Node_Str"") && expresssionToSelection().matches(""String_Node_Str""))   sKey=""String_Node_Str"" + sKey;
  if (sKey.equals(""String_Node_Str""))   if (numOpenPara() <= 0)   addToExpressionStart(""String_Node_Str"");
  if (sKey.equals(""String_Node_Str"") && getLastNumb().matches(""String_Node_Str""))   if (!expresssionToSelection().matches(""String_Node_Str"" + regexAnyValidOperator + ""String_Node_Str""))   return;
  if (sKey.equals(""String_Node_Str"") && (getLastNumb().contains(""String_Node_Str"") || expresssionToSelection().matches(""String_Node_Str"" + regexAnyValidOperator + ""String_Node_Str"")))   return;
  if (getLastNumb().matches(""String_Node_Str""))   if (sKey.matches(""String_Node_Str""))   return;
  if (sKey.matches(regexAnyOperatorOrE) && getLastNumb().equals(""String_Node_Str""))   return;
  if (sKey.matches(""String_Node_Str"") && expresssionToSelection().matches(""String_Node_Str""))   return;
  if (sKey.matches(""String_Node_Str"") && expresssionToSelection().matches(""String_Node_Str""))   return;
  if (sKey.matches(regexAnyValidOperator) && expresssionToSelection().matches(""String_Node_Str"" + regexAnyOpExceptPercent + regexAnyValidOperator+ ""String_Node_Str"")) {
    if (getSelectionEnd() > getSelectionStart())     backspaceAtSelection();
    backspaceAtSelection();
    backspaceAtSelection();
  }
 else   if (sKey.matches(regexInvalidStartChar) && expresssionToSelection().matches(""String_Node_Str"" + regexAnyOpExceptPercent + ""String_Node_Str"")) {
    if (getSelectionEnd() > getSelectionStart())     backspaceAtSelection();
    backspaceAtSelection();
  }
  insertAtSelection(sKey);
  mSolved=false;
}","/** 
 * This function will try to add a number or operator, or entire result list to the current expression Note that there is lots of error checking to be sure user can't entire an invalid operator/number
 * @param sKey should only be single vaild number or operator character, or longer previous results
 */
public void keyPresses(String sKey){
  if (sKey.length() > 1) {
    if (mSolved)     replaceExpression(sKey);
 else     insertAtSelection(sKey);
    mSolved=false;
    return;
  }
  if (sKey.matches(regexHasInvalidChars))   throw new IllegalArgumentException(""String_Node_Str"");
  if (sKey.matches(regexInvalidStartChar) && (getLastPartialNumb().equals(""String_Node_Str"") || expresssionToSelection().matches(""String_Node_Str"")))   return;
  if (mSolved && sKey.matches(""String_Node_Str""))   clearExpression();
  if (sKey.equals(""String_Node_Str"") && expresssionToSelection().matches(""String_Node_Str""))   sKey=""String_Node_Str"" + sKey;
  if (sKey.matches(""String_Node_Str"") && expresssionToSelection().matches(""String_Node_Str""))   sKey=""String_Node_Str"" + sKey;
  if (sKey.equals(""String_Node_Str""))   if (numOpenPara() <= 0)   addToExpressionStart(""String_Node_Str"");
  if (sKey.equals(""String_Node_Str"") && getLastPartialNumb().matches(""String_Node_Str""))   if (!expresssionToSelection().matches(""String_Node_Str"" + regexAnyValidOperator + ""String_Node_Str""))   return;
  if (sKey.equals(""String_Node_Str"") && (getLastPartialNumb().contains(""String_Node_Str"") || expresssionToSelection().matches(""String_Node_Str"" + regexAnyValidOperator + ""String_Node_Str"")))   return;
  if (getLastPartialNumb().matches(""String_Node_Str""))   if (sKey.matches(""String_Node_Str""))   return;
  if (sKey.matches(regexAnyOperatorOrE) && getLastPartialNumb().equals(""String_Node_Str""))   return;
  if (sKey.matches(""String_Node_Str"") && expresssionToSelection().matches(""String_Node_Str""))   return;
  if (sKey.matches(""String_Node_Str"") && expresssionToSelection().matches(""String_Node_Str""))   return;
  if (sKey.matches(regexAnyValidOperator) && expresssionToSelection().matches(""String_Node_Str"" + regexAnyOpExceptPercent + regexAnyValidOperator+ ""String_Node_Str"")) {
    if (getSelectionEnd() > getSelectionStart())     backspaceAtSelection();
    backspaceAtSelection();
    backspaceAtSelection();
  }
 else   if (sKey.matches(regexInvalidStartChar) && expresssionToSelection().matches(""String_Node_Str"" + regexAnyOpExceptPercent + ""String_Node_Str"")) {
    if (getSelectionEnd() > getSelectionStart())     backspaceAtSelection();
    backspaceAtSelection();
  }
  insertAtSelection(sKey);
  mSolved=false;
}",0.9932471541578236
35086,"/** 
 * Loop over/collapse down input str, solves for either +- or /*.  places result in expression
 * @param regexOperatorType is the type of operators to look for in regex form
 * @param str is the string to operate upon
 */
private String collapseOps(String regexOperatorType,String str){
  System.out.println(""String_Node_Str"" + regexOperatorType);
  Pattern ptn=Pattern.compile(Expression.regexGroupedNonNegNumber + regexOperatorType + Expression.regexGroupedNumber);
  Matcher mat=ptn.matcher(str);
  BigDecimal result;
  while (mat.find()) {
    BigDecimal operand1;
    BigDecimal operand2;
    String operator;
    try {
      System.out.println(""String_Node_Str"" + mat.group(1));
      System.out.println(""String_Node_Str"" + mat.group(2));
      operand1=new BigDecimal(mat.group(1));
      operand2=new BigDecimal(mat.group(Expression.numGroupsInregexGroupedNumber + 2));
      operator=mat.group(Expression.numGroupsInregexGroupedNumber + 1);
    }
 catch (    NumberFormatException e) {
      str=strSyntaxError;
      return str;
    }
    System.out.println(""String_Node_Str"" + operand1.toString());
    System.out.println(""String_Node_Str"" + operand2.toString());
    if (operator.equals(""String_Node_Str"")) {
      if (operand1.scale() < -9000 || operand2.scale() < -9000)       return strInfinityError;
      result=operand1.add(operand2,mMcOperate);
    }
 else     if (operator.equals(""String_Node_Str"")) {
      if (operand1.scale() < -9000 || operand2.scale() < -9000)       return strInfinityError;
      result=operand1.subtract(operand2,mMcOperate);
    }
 else     if (operator.equals(""String_Node_Str""))     result=operand1.multiply(operand2,mMcOperate);
 else     if (operator.equals(""String_Node_Str"")) {
      double dResult=Math.pow(operand1.doubleValue(),operand2.doubleValue());
      try {
        result=BigDecimal.valueOf(dResult);
      }
 catch (      NumberFormatException ex) {
        if (dResult == Double.POSITIVE_INFINITY || dResult == Double.NEGATIVE_INFINITY)         str=strInfinityError;
 else         str=strSyntaxError;
        return str;
      }
    }
 else     if (operator.equals(""String_Node_Str"")) {
      try {
        result=operand1.divide(operand2,mMcOperate);
      }
 catch (      ArithmeticException ex) {
        str=strDivideZeroError;
        return str;
      }
    }
 else     throw new IllegalArgumentException(""String_Node_Str"");
    str=str.substring(0,mat.start()) + result + str.substring(mat.end());
    mat=ptn.matcher(str);
  }
  return str;
}","/** 
 * Loop over/collapse down input str, solves for either +- or /*.  places result in expression
 * @param regexOperatorType is the type of operators to look for in regex form
 * @param str is the string to operate upon
 */
private String collapseOps(String regexOperatorType,String str){
  Pattern ptn=Pattern.compile(Expression.regexGroupedNonNegNumber + regexOperatorType + Expression.regexGroupedNumber);
  Matcher mat=ptn.matcher(str);
  BigDecimal result;
  while (mat.find()) {
    BigDecimal operand1;
    BigDecimal operand2;
    String operator;
    try {
      operand1=new BigDecimal(mat.group(1));
      operand2=new BigDecimal(mat.group(Expression.numGroupsInregexGroupedNumber + 2));
      operator=mat.group(Expression.numGroupsInregexGroupedNumber + 1);
    }
 catch (    NumberFormatException e) {
      str=strSyntaxError;
      return str;
    }
    if (operator.equals(""String_Node_Str"")) {
      if (operand1.scale() < -9000 || operand2.scale() < -9000)       return strInfinityError;
      result=operand1.add(operand2,mMcOperate);
    }
 else     if (operator.equals(""String_Node_Str"")) {
      if (operand1.scale() < -9000 || operand2.scale() < -9000)       return strInfinityError;
      result=operand1.subtract(operand2,mMcOperate);
    }
 else     if (operator.equals(""String_Node_Str""))     result=operand1.multiply(operand2,mMcOperate);
 else     if (operator.equals(""String_Node_Str"")) {
      double dResult=Math.pow(operand1.doubleValue(),operand2.doubleValue());
      try {
        result=BigDecimal.valueOf(dResult);
      }
 catch (      NumberFormatException ex) {
        if (dResult == Double.POSITIVE_INFINITY || dResult == Double.NEGATIVE_INFINITY)         str=strInfinityError;
 else         str=strSyntaxError;
        return str;
      }
    }
 else     if (operator.equals(""String_Node_Str"")) {
      try {
        result=operand1.divide(operand2,mMcOperate);
      }
 catch (      ArithmeticException ex) {
        str=strDivideZeroError;
        return str;
      }
    }
 else     throw new IllegalArgumentException(""String_Node_Str"");
    str=str.substring(0,mat.start()) + result + str.substring(mat.end());
    mat=ptn.matcher(str);
  }
  return str;
}",0.706579225724561
35087,"/** 
 * Recursively loop over all parentheses, invoke other operators in results found within
 * @param str is the String to loop the parentheses solving over
 */
private String collapsePara(String str){
  int firstPara=str.indexOf(""String_Node_Str"");
  if (firstPara != -1) {
    int paraCount=0;
    int matchingPara=-1;
    for (int i=firstPara; i < str.length(); i++) {
      if (str.charAt(i) == '(')       paraCount++;
 else       if (str.charAt(i) == ')') {
        paraCount--;
        if (paraCount == 0) {
          matchingPara=i;
          break;
        }
      }
    }
    if (matchingPara == -1) {
      str=strSyntaxError;
      return str;
    }
 else {
      String firstSection=str.substring(0,firstPara);
      String middleSection=collapsePara(str.substring(firstPara + 1,matchingPara));
      String endSection=str.substring(matchingPara + 1,str.length());
      str=collapsePara(firstSection + middleSection + endSection);
    }
  }
  System.out.println(""String_Node_Str"" + str);
  str=collapseOps(Expression.regexGroupedExponent,str);
  str=collapseOps(Expression.regexGroupedMultDiv,str);
  str=collapseOps(Expression.regexGroupedAddSub,str);
  return str;
}","/** 
 * Recursively loop over all parentheses, invoke other operators in results found within
 * @param str is the String to loop the parentheses solving over
 */
private String collapsePara(String str){
  int firstPara=str.indexOf(""String_Node_Str"");
  if (firstPara != -1) {
    int paraCount=0;
    int matchingPara=-1;
    for (int i=firstPara; i < str.length(); i++) {
      if (str.charAt(i) == '(')       paraCount++;
 else       if (str.charAt(i) == ')') {
        paraCount--;
        if (paraCount == 0) {
          matchingPara=i;
          break;
        }
      }
    }
    if (matchingPara == -1) {
      str=strSyntaxError;
      return str;
    }
 else {
      String firstSection=str.substring(0,firstPara);
      String middleSection=collapsePara(str.substring(firstPara + 1,matchingPara));
      String endSection=str.substring(matchingPara + 1,str.length());
      str=collapsePara(firstSection + middleSection + endSection);
    }
  }
  str=collapseOps(Expression.regexGroupedExponent,str);
  str=collapseOps(Expression.regexGroupedMultDiv,str);
  str=collapseOps(Expression.regexGroupedAddSub,str);
  return str;
}",0.9797326433807676
35088,"/** 
 * Gets the last double (returned as a String) for input string
 * @param String expression to find last number of
 * @return anything after last valid operator, or """" if expression empty, or entire expression if doesn't contain regexAnyValidOperator. Note if expression is ""1+-5"" it will return ""-5""
 */
private String getLastNumb(String expStr){
  String[] strA=expStr.split(regexAnyValidOperator);
  if (strA.length == 0)   return ""String_Node_Str"";
 else {
    if (expStr.matches(""String_Node_Str"" + regexAnyValidOperator + regexAnyValidOperator+ regexGroupedNumber))     return expStr.replaceAll(""String_Node_Str"" + regexAnyValidOperator + regexGroupedNumber,""String_Node_Str"");
    return strA[strA.length - 1];
  }
}","/** 
 * Gets the last double (returned as a String) for input string
 * @param String expression to find last number of
 * @return anything after last valid operator, or """" if expression empty, or entire expression if doesn't contain regexAnyValidOperator. Note if expression is ""1+-5"" it will return ""-5""
 */
private String getLastNumb(String expStr){
  String[] strA=expStr.split(regexAnyValidOperator);
  if (strA.length == 0)   return ""String_Node_Str"";
 else {
    if (expStr.matches(""String_Node_Str"" + regexAnyValidOperator + regexAnyValidOperator+ regexGroupedNumber))     return expStr.replaceAll(""String_Node_Str"" + regexAnyValidOperator + regexGroupedNumber+ ""String_Node_Str"",""String_Node_Str"");
    return strA[strA.length - 1];
  }
}",0.9871186440677966
35089,"/** 
 * This function will try to add a number or operator, or entire result list to the current expression Note that there is lots of error checking to be sure user can't entire an invalid operator/number
 * @param sKey should only be single vaild number or operator character, or longer previous results
 */
public void keyPresses(String sKey){
  if (sKey.length() > 1) {
    if (mSolved)     replaceExpression(sKey);
 else     insertAtSelection(sKey);
    mSolved=false;
    return;
  }
  if (sKey.matches(regexHasInvalidChars))   throw new IllegalArgumentException(""String_Node_Str"");
  if (sKey.matches(regexInvalidStartChar) && (getLastNumb().equals(""String_Node_Str"") || expresssionToSelection().matches(""String_Node_Str"")))   return;
  if (mSolved && sKey.matches(""String_Node_Str""))   clearExpression();
  if (sKey.equals(""String_Node_Str"") && expresssionToSelection().matches(""String_Node_Str""))   sKey=""String_Node_Str"" + sKey;
  if (sKey.matches(""String_Node_Str"") && expresssionToSelection().matches(""String_Node_Str""))   sKey=""String_Node_Str"" + sKey;
  if (sKey.equals(""String_Node_Str""))   if (numOpenPara() <= 0)   addToExpressionStart(""String_Node_Str"");
  if (sKey.equals(""String_Node_Str"") && getLastNumb().matches(""String_Node_Str""))   if (!expresssionToSelection().matches(""String_Node_Str"" + regexAnyValidOperator + ""String_Node_Str""))   return;
  if (sKey.equals(""String_Node_Str"") && (getLastNumb().contains(""String_Node_Str"") || expresssionToSelection().matches(""String_Node_Str"" + regexAnyValidOperator + ""String_Node_Str"")))   return;
  if (getLastNumb().matches(""String_Node_Str""))   if (sKey.matches(""String_Node_Str""))   return;
  if (sKey.matches(regexAnyOperatorOrE) && getLastNumb().equals(""String_Node_Str""))   return;
  if (sKey.matches(""String_Node_Str"") && expresssionToSelection().matches(""String_Node_Str""))   return;
  if (sKey.matches(regexAnyValidOperator) && expresssionToSelection().matches(""String_Node_Str"" + regexAnyValidOperator + regexAnyValidOperator+ ""String_Node_Str"")) {
    if (getSelectionEnd() > getSelectionStart())     backspaceAtSelection();
    backspaceAtSelection();
    backspaceAtSelection();
  }
 else   if (sKey.matches(regexInvalidStartChar) && expresssionToSelection().matches(""String_Node_Str"" + regexAnyValidOperator + ""String_Node_Str"")) {
    if (getSelectionEnd() > getSelectionStart())     backspaceAtSelection();
    backspaceAtSelection();
  }
  insertAtSelection(sKey);
  mSolved=false;
}","/** 
 * This function will try to add a number or operator, or entire result list to the current expression Note that there is lots of error checking to be sure user can't entire an invalid operator/number
 * @param sKey should only be single vaild number or operator character, or longer previous results
 */
public void keyPresses(String sKey){
  if (sKey.length() > 1) {
    if (mSolved)     replaceExpression(sKey);
 else     insertAtSelection(sKey);
    mSolved=false;
    return;
  }
  if (sKey.matches(regexHasInvalidChars))   throw new IllegalArgumentException(""String_Node_Str"");
  if (sKey.matches(regexInvalidStartChar) && (getLastNumb().equals(""String_Node_Str"") || expresssionToSelection().matches(""String_Node_Str"")))   return;
  if (mSolved && sKey.matches(""String_Node_Str""))   clearExpression();
  if (sKey.equals(""String_Node_Str"") && expresssionToSelection().matches(""String_Node_Str""))   sKey=""String_Node_Str"" + sKey;
  if (sKey.matches(""String_Node_Str"") && expresssionToSelection().matches(""String_Node_Str""))   sKey=""String_Node_Str"" + sKey;
  if (sKey.equals(""String_Node_Str""))   if (numOpenPara() <= 0)   addToExpressionStart(""String_Node_Str"");
  if (sKey.equals(""String_Node_Str"") && getLastNumb().matches(""String_Node_Str""))   if (!expresssionToSelection().matches(""String_Node_Str"" + regexAnyValidOperator + ""String_Node_Str""))   return;
  if (sKey.equals(""String_Node_Str"") && (getLastNumb().contains(""String_Node_Str"") || expresssionToSelection().matches(""String_Node_Str"" + regexAnyValidOperator + ""String_Node_Str"")))   return;
  if (getLastNumb().matches(""String_Node_Str""))   if (sKey.matches(""String_Node_Str""))   return;
  if (sKey.matches(regexAnyOperatorOrE) && getLastNumb().equals(""String_Node_Str""))   return;
  if (sKey.matches(""String_Node_Str"") && expresssionToSelection().matches(""String_Node_Str""))   return;
  if (sKey.matches(""String_Node_Str"") && expresssionToSelection().matches(""String_Node_Str""))   return;
  if (sKey.matches(regexAnyValidOperator) && expresssionToSelection().matches(""String_Node_Str"" + regexAnyOpExceptPercent + regexAnyValidOperator+ ""String_Node_Str"")) {
    if (getSelectionEnd() > getSelectionStart())     backspaceAtSelection();
    backspaceAtSelection();
    backspaceAtSelection();
  }
 else   if (sKey.matches(regexInvalidStartChar) && expresssionToSelection().matches(""String_Node_Str"" + regexAnyOpExceptPercent + ""String_Node_Str"")) {
    if (getSelectionEnd() > getSelectionStart())     backspaceAtSelection();
    backspaceAtSelection();
  }
  insertAtSelection(sKey);
  mSolved=false;
}",0.9698412698412698
35090,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_calc);
  mCalc=Calculator.getCalculator(this);
  mDisplay=(EditTextCursorWatcher)findViewById(R.id.textDisplay);
  mDisplay.setCalc(mCalc);
  mDisplay.disableSoftInputFromAppearing();
  mDisplay.setOnLongClickListener(new View.OnLongClickListener(){
    @Override public boolean onLongClick(    View v){
      mDisplay.selectAll();
      return false;
    }
  }
);
  mDisplay.setOnTouchListener(new View.OnTouchListener(){
    @Override public boolean onTouch(    View view,    MotionEvent event){
      if (event.getAction() == MotionEvent.ACTION_DOWN) {
        mCalc.setSolved(false);
        mDisplay.setCursorVisible(true);
      }
      return false;
    }
  }
);
  FragmentManager fm=getSupportFragmentManager();
  mResultFragment=(ResultListFragment)fm.findFragmentById(R.id.resultListfragmentContainer);
  if (mResultFragment == null) {
    mResultFragment=new ResultListFragment();
    fm.beginTransaction().add(R.id.resultListfragmentContainer,mResultFragment).commit();
  }
  mConvKeysViewPager=(ViewPager)findViewById(R.id.convertKeyPager);
  mConvKeysViewPager.setAdapter(new FragmentStatePagerAdapter(fm){
    @Override public int getCount(){
      return mCalc.getUnitTypeSize();
    }
    @Override public Fragment getItem(    int pos){
      return ConvKeysFragment.newInstance(pos);
    }
    @Override public CharSequence getPageTitle(    int pos){
      return mCalc.getUnitTypeName(pos % mCalc.getUnitTypeSize());
    }
  }
);
  TabPageIndicator convertPageIndicator=(TabPageIndicator)findViewById(R.id.titles);
  convertPageIndicator.setViewPager(mConvKeysViewPager);
  convertPageIndicator.setOnPageChangeListener(new ViewPager.OnPageChangeListener(){
    @Override public void onPageSelected(    int pos){
      mCalc.setUnitTypePos(pos);
      int currConvKeyPos=mConvKeysViewPager.getCurrentItem();
      clearConvKeyForFragPos(currConvKeyPos - 1);
      clearConvKeyForFragPos(currConvKeyPos);
      clearConvKeyForFragPos(currConvKeyPos + 1);
      mCalc.getCurrUnitType().clearUnitSelection();
      if (unitToSelectAfterScroll != null) {
        getConvKeyFrag(mConvKeysViewPager.getCurrentItem()).selectUnit(unitToSelectAfterScroll);
        unitToSelectAfterScroll=null;
      }
      updateScreen(false);
    }
    @Override public void onPageScrolled(    int pos,    float posOffset,    int posOffsetPixels){
    }
    @Override public void onPageScrollStateChanged(    int state){
    }
  }
);
  mConvKeysViewPager.setCurrentItem(mCalc.getUnitTypePos());
  calcButton=new ArrayList<Button>();
  for (  int id : BUTTON_IDS) {
    Button button=(Button)findViewById(id);
    button.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View view){
        int buttonId=view.getId();
        String buttonValue=""String_Node_Str"";
switch (buttonId) {
case R.id.plus_button:
          buttonValue=""String_Node_Str"";
        break;
case R.id.minus_button:
      buttonValue=""String_Node_Str"";
    break;
case R.id.multiply_button:
  buttonValue=""String_Node_Str"";
break;
case R.id.divide_button:
buttonValue=""String_Node_Str"";
break;
case R.id.decimal_button:
buttonValue=""String_Node_Str"";
break;
case R.id.equals_button:
buttonValue=""String_Node_Str"";
break;
case R.id.ee_button:
buttonValue=""String_Node_Str"";
break;
case R.id.power_button:
buttonValue=""String_Node_Str"";
break;
case R.id.percent_button:
buttonValue=""String_Node_Str"";
break;
case R.id.open_para_button:
buttonValue=""String_Node_Str"";
break;
case R.id.close_para_button:
buttonValue=""String_Node_Str"";
break;
case R.id.backspace_button:
buttonValue=""String_Node_Str"";
break;
default :
for (int i=0; i < 10; i++) if (buttonId == BUTTON_IDS[i]) buttonValue=String.valueOf(i);
}
numButtonPressed(buttonValue);
}
}
);
calcButton.add(button);
}
ImageButton backspaceButton=(ImageButton)findViewById(R.id.backspace_button);
backspaceButton.setOnTouchListener(new View.OnTouchListener(){
private Handler mColorHoldHandler;
private Handler mResetHandler;
private View mView;
private static final int CLEAR_HOLD_TIME=2200;
@Override public boolean onTouch(View view,MotionEvent event){
switch (event.getAction()) {
case MotionEvent.ACTION_DOWN:
mView=view;
mInc=0;
if (mColorHoldHandler != null) return true;
mColorHoldHandler=new Handler();
mColorHoldHandler.postDelayed(mBackspaceColor,10);
if (mResetHandler != null) return true;
mResetHandler=new Handler();
mResetHandler.postDelayed(mBackspaceReset,CLEAR_HOLD_TIME);
break;
case MotionEvent.ACTION_UP:
if (mColorHoldHandler == null) return true;
if (mResetHandler == null) return true;
numButtonPressed(""String_Node_Str"");
view.setBackgroundColor(getResources().getColor(R.color.op_button_normal));
mColorHoldHandler.removeCallbacks(mBackspaceColor);
mColorHoldHandler=null;
mResetHandler.removeCallbacks(mBackspaceReset);
mResetHandler=null;
break;
}
return false;
}
Runnable mBackspaceReset=new Runnable(){
@Override public void run(){
mCalc.resetCalc();
updateScreen(true);
mConvKeysViewPager.setCurrentItem(mCalc.getUnitTypePos());
}
}
;
private int mInc;
Runnable mBackspaceColor=new Runnable(){
private int mStartColor=getResources().getColor(R.color.op_button_pressed);
private int mEndColor=getResources().getColor(R.color.backspace_button_held);
private static final int NUM_COLOR_CHANGES=10;
private static final int BACKSPACE_HOLD_TIME=500;
@Override public void run(){
if (mInc == -1) {
mView.setBackgroundColor(mEndColor);
return;
}
if (mInc == NUM_COLOR_CHANGES) {
numButtonPressed(""String_Node_Str"");
mView.setBackgroundColor(Color.argb(255,0,0,0));
mColorHoldHandler.postDelayed(this,100);
mInc=-1;
return;
}
mColorHoldHandler.postDelayed(this,BACKSPACE_HOLD_TIME / NUM_COLOR_CHANGES);
float deltaRed=(float)Color.red(mStartColor) + ((float)Color.red(mEndColor) - (float)Color.red(mStartColor)) * ((float)mInc * (float)mInc * (float)mInc) / ((float)NUM_COLOR_CHANGES * (float)NUM_COLOR_CHANGES * (float)NUM_COLOR_CHANGES);
int deltaGreen=Color.green(mStartColor) + ((Color.green(mEndColor) - Color.green(mStartColor)) * mInc) / NUM_COLOR_CHANGES;
int deltaBlue=Color.blue(mStartColor) + ((Color.blue(mEndColor) - Color.blue(mStartColor)) * mInc) / NUM_COLOR_CHANGES;
mView.setBackgroundColor(Color.argb(255,(int)deltaRed,deltaGreen,deltaBlue));
mInc++;
}
}
;
}
);
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_calc);
  mCalc=Calculator.getCalculator(this);
  mDisplay=(EditTextCursorWatcher)findViewById(R.id.textDisplay);
  mDisplay.setCalc(mCalc);
  mDisplay.disableSoftInputFromAppearing();
  mDisplay.setOnLongClickListener(new View.OnLongClickListener(){
    @Override public boolean onLongClick(    View v){
      mDisplay.selectAll();
      return false;
    }
  }
);
  mDisplay.setOnTouchListener(new View.OnTouchListener(){
    @Override public boolean onTouch(    View view,    MotionEvent event){
      if (event.getAction() == MotionEvent.ACTION_DOWN) {
        mCalc.setSolved(false);
        mDisplay.setCursorVisible(true);
      }
      return false;
    }
  }
);
  FragmentManager fm=getSupportFragmentManager();
  mResultFragment=(ResultListFragment)fm.findFragmentById(R.id.resultListfragmentContainer);
  if (mResultFragment == null) {
    mResultFragment=new ResultListFragment();
    fm.beginTransaction().add(R.id.resultListfragmentContainer,mResultFragment).commit();
  }
  mConvKeysViewPager=(ViewPager)findViewById(R.id.convertKeyPager);
  mConvKeysViewPager.setAdapter(new FragmentStatePagerAdapter(fm){
    @Override public int getCount(){
      return mCalc.getUnitTypeSize();
    }
    @Override public Fragment getItem(    int pos){
      return ConvKeysFragment.newInstance(pos);
    }
    @Override public CharSequence getPageTitle(    int pos){
      return mCalc.getUnitTypeName(pos % mCalc.getUnitTypeSize());
    }
  }
);
  TabPageIndicator convertPageIndicator=(TabPageIndicator)findViewById(R.id.titles);
  convertPageIndicator.setViewPager(mConvKeysViewPager);
  convertPageIndicator.setOnPageChangeListener(new ViewPager.OnPageChangeListener(){
    @Override public void onPageSelected(    int pos){
      mCalc.setUnitTypePos(pos);
      int currConvKeyPos=mConvKeysViewPager.getCurrentItem();
      clearConvKeyForFragPos(currConvKeyPos - 1);
      clearConvKeyForFragPos(currConvKeyPos);
      clearConvKeyForFragPos(currConvKeyPos + 1);
      mCalc.getCurrUnitType().clearUnitSelection();
      if (unitToSelectAfterScroll != null) {
        getConvKeyFrag(mConvKeysViewPager.getCurrentItem()).selectUnit(unitToSelectAfterScroll);
        unitToSelectAfterScroll=null;
      }
      updateScreen(false);
    }
    @Override public void onPageScrolled(    int pos,    float posOffset,    int posOffsetPixels){
    }
    @Override public void onPageScrollStateChanged(    int state){
    }
  }
);
  mConvKeysViewPager.setCurrentItem(mCalc.getUnitTypePos());
  calcButton=new ArrayList<Button>();
  for (  int id : BUTTON_IDS) {
    Button button=(Button)findViewById(id);
    button.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View view){
        int buttonId=view.getId();
        String buttonValue=""String_Node_Str"";
switch (buttonId) {
case R.id.plus_button:
          buttonValue=""String_Node_Str"";
        break;
case R.id.minus_button:
      buttonValue=""String_Node_Str"";
    break;
case R.id.multiply_button:
  buttonValue=""String_Node_Str"";
break;
case R.id.divide_button:
buttonValue=""String_Node_Str"";
break;
case R.id.decimal_button:
buttonValue=""String_Node_Str"";
break;
case R.id.equals_button:
buttonValue=""String_Node_Str"";
break;
case R.id.ee_button:
buttonValue=""String_Node_Str"";
break;
case R.id.power_button:
buttonValue=""String_Node_Str"";
break;
case R.id.percent_button:
buttonValue=""String_Node_Str"";
break;
case R.id.open_para_button:
buttonValue=""String_Node_Str"";
break;
case R.id.close_para_button:
buttonValue=""String_Node_Str"";
break;
case R.id.backspace_button:
buttonValue=""String_Node_Str"";
break;
default :
for (int i=0; i < 10; i++) if (buttonId == BUTTON_IDS[i]) buttonValue=String.valueOf(i);
}
numButtonPressed(buttonValue);
}
}
);
calcButton.add(button);
}
ImageButton backspaceButton=(ImageButton)findViewById(R.id.backspace_button);
backspaceButton.setOnTouchListener(new View.OnTouchListener(){
private Handler mColorHoldHandler;
private Handler mResetHandler;
private View mView;
private static final int CLEAR_HOLD_TIME=2200;
@Override public boolean onTouch(View view,MotionEvent event){
switch (event.getAction()) {
case MotionEvent.ACTION_DOWN:
mView=view;
mInc=0;
if (mColorHoldHandler != null) return true;
mColorHoldHandler=new Handler();
mColorHoldHandler.postDelayed(mBackspaceColor,10);
if (mResetHandler != null) return true;
mResetHandler=new Handler();
mResetHandler.postDelayed(mBackspaceReset,CLEAR_HOLD_TIME);
break;
case MotionEvent.ACTION_UP:
if (mColorHoldHandler == null) return true;
if (mResetHandler == null) return true;
numButtonPressed(""String_Node_Str"");
view.setBackgroundColor(getResources().getColor(R.color.op_button_normal));
mColorHoldHandler.removeCallbacks(mBackspaceColor);
mColorHoldHandler=null;
mResetHandler.removeCallbacks(mBackspaceReset);
mResetHandler=null;
break;
}
return false;
}
Runnable mBackspaceReset=new Runnable(){
@Override public void run(){
mCalc.resetCalc();
updateScreen(true);
mConvKeysViewPager.setCurrentItem(mCalc.getUnitTypePos());
}
}
;
private int mInc;
Runnable mBackspaceColor=new Runnable(){
private int mStartColor=getResources().getColor(R.color.op_button_pressed);
private int mEndColor=getResources().getColor(R.color.backspace_button_held);
private static final int NUM_COLOR_CHANGES=10;
private static final int BACKSPACE_HOLD_TIME=500;
@Override public void run(){
if (mInc == -1) {
mView.setBackgroundColor(mEndColor);
return;
}
if (mInc == NUM_COLOR_CHANGES) {
numButtonPressed(""String_Node_Str"");
mView.setBackgroundColor(Color.argb(255,0,0,0));
mColorHoldHandler.postDelayed(this,100);
mInc=-1;
return;
}
mColorHoldHandler.postDelayed(this,BACKSPACE_HOLD_TIME / NUM_COLOR_CHANGES);
float deltaRed=(float)Color.red(mStartColor) + ((float)Color.red(mEndColor) - (float)Color.red(mStartColor)) * ((float)mInc * (float)mInc * (float)mInc) / ((float)NUM_COLOR_CHANGES * (float)NUM_COLOR_CHANGES * (float)NUM_COLOR_CHANGES);
int deltaGreen=Color.green(mStartColor) + ((Color.green(mEndColor) - Color.green(mStartColor)) * mInc) / NUM_COLOR_CHANGES;
int deltaBlue=Color.blue(mStartColor) + ((Color.blue(mEndColor) - Color.blue(mStartColor)) * mInc) / NUM_COLOR_CHANGES;
mView.setBackgroundColor(Color.argb(255,(int)deltaRed,deltaGreen,deltaBlue));
mInc++;
}
}
;
}
);
float px=mDisplay.getTextSize();
DisplayMetrics metrics=new DisplayMetrics();
getWindowManager().getDefaultDisplay().getMetrics(metrics);
float logicalDensity=metrics.density;
int dp=(int)Math.ceil(px / logicalDensity);
System.out.println(""String_Node_Str"" + dp);
System.out.println(""String_Node_Str"" + px);
}",0.9764921386047932
35091,"private void addTab(int index,CharSequence text,int iconResId){
  final TabView tabView=new TabView(getContext());
  tabView.mIndex=index;
  tabView.setFocusable(true);
  tabView.setOnClickListener(mTabClickListener);
  tabView.setText(text);
  if (iconResId != 0) {
    tabView.setCompoundDrawablesWithIntrinsicBounds(iconResId,0,0,0);
  }
  mTabLayout.addView(tabView,new LinearLayout.LayoutParams(0,MATCH_PARENT,1));
}","private void addTab(int index,CharSequence text,int iconResId){
  final TabView tabView=new TabView(getContext());
  tabView.mIndex=index;
  tabView.setFocusable(true);
  tabView.setOnClickListener(mTabClickListener);
  tabView.setText(text);
  if (iconResId != 0) {
    tabView.setCompoundDrawablesWithIntrinsicBounds(iconResId,0,0,0);
  }
  mTabLayout.addView(tabView,new LinearLayout.LayoutParams(LayoutParams.WRAP_CONTENT,MATCH_PARENT,1));
}",0.9699769053117784
35092,"/** 
 * Counts the number of open vs number of closed parentheses in the given 
 * @return 0 if equal num of open/close para, positive # if more open, neg # if more close
 */
private int numOpenPara(){
  int numOpen=0;
  int numClose=0;
  for (int i=0; i < expresssionToSelection().length(); i++) {
    if (expresssionToSelection().charAt(i) == '(')     numOpen++;
    if (expresssionToSelection().charAt(i) == ')')     numClose++;
  }
  return numOpen - numClose;
}","/** 
 * Counts the number of open vs. number of closed parentheses in the given string
 * @param String containing parenthesis to count 
 * @return 0 if equal num of open/close para, positive # if more open, neg # if more close
 */
private int numOpenPara(String str){
  int numOpen=0;
  int numClose=0;
  for (int i=0; i < str.length(); i++) {
    if (str.charAt(i) == '(')     numOpen++;
    if (str.charAt(i) == ')')     numClose++;
  }
  return numOpen - numClose;
}",0.8418803418803419
35093,"/** 
 * Gets the first number (returned as a String) at selection in current expression
 * @return anything before the first valid operator, or """" if expression empty, or entire expression if doesn't contain regexAnyValidOperator
 */
private String getFirstNumb(){
  String[] strA=expresssionToSelection().split(regexAnyValidOperator);
  return strA[0];
}","/** 
 * Gets the first number (returned as a String) at selection in current expression
 * @return anything before the first valid operator, or """" if expression empty, or entire expression if doesn't contain regexAnyValidOperator
 */
private String getFirstNumb(){
  return getFirstNumb(expresssionToSelection());
}",0.8805970149253731
35094,"/** 
 * Solves a given Expression Cleans off the expression, adds missing parentheses, then loads in more accurate result values if possible into expression Iterates over expression using PEMAS order of operations
 * @param exp is the Expression to solve
 * @param mcSolve is the rounding to use to solve
 * @return the expression before conversion (potentially used for result list)
 */
public Result solve(Expression exp){
  exp.cleanDanglingOps();
  exp.closeOpenPar();
  String cleanedQuery=exp.toString();
  if (exp.isEmpty())   return null;
  exp.loadPreciseResult();
  System.out.println(exp.toString());
  exp.replacePercentOps();
  String strExp=collapsePara(exp.toString());
  exp.replaceExpression(strExp);
  roundAndClean(exp);
  exp.setSolved(true);
  return new Result(cleanedQuery,exp.toString());
}","/** 
 * Solves a given Expression Cleans off the expression, adds missing parentheses, then loads in more accurate result values if possible into expression Iterates over expression using PEMAS order of operations
 * @param exp is the Expression to solve
 * @param mcSolve is the rounding to use to solve
 * @return the expression before conversion (potentially used for result list)
 */
public Result solve(Expression exp){
  exp.cleanDanglingOps();
  exp.closeOpenPar();
  String cleanedQuery=exp.toString();
  if (exp.isEmpty())   return null;
  exp.loadPreciseResult();
  exp.replacePercentOps();
  exp.groupPowerOperand();
  String strExp=collapsePara(exp.toString());
  exp.replaceExpression(strExp);
  roundAndClean(exp);
  exp.setSolved(true);
  return new Result(cleanedQuery,exp.toString());
}",0.9598021026592456
35095,"/** 
 * Loop over/collapse down input str, solves for either +- or /*.  places result in expression
 * @param regexOperatorType is the type of operators to look for in regex form
 * @param str is the string to operate upon
 */
private static String collapseOps(String regexOperatorType,String str,MathContext mcSolve){
  Pattern ptn=Pattern.compile(Expression.regexGroupedNumber + regexOperatorType + Expression.regexGroupedNumber);
  Matcher mat=ptn.matcher(str);
  BigDecimal result;
  while (mat.find()) {
    BigDecimal operand1;
    BigDecimal operand2;
    String operator;
    try {
      operand1=new BigDecimal(mat.group(1));
      operand2=new BigDecimal(mat.group(3));
      operator=mat.group(2);
    }
 catch (    NumberFormatException e) {
      str=strSyntaxError;
      return str;
    }
    if (operator.equals(""String_Node_Str""))     result=operand1.add(operand2,mcSolve);
 else     if (operator.equals(""String_Node_Str""))     result=operand1.subtract(operand2,mcSolve);
 else     if (operator.equals(""String_Node_Str""))     result=operand1.multiply(operand2,mcSolve);
 else     if (operator.equals(""String_Node_Str"")) {
      double dResult=Math.pow(operand1.doubleValue(),operand2.doubleValue());
      try {
        result=BigDecimal.valueOf(dResult);
      }
 catch (      NumberFormatException ex) {
        if (dResult == Double.POSITIVE_INFINITY || dResult == Double.NEGATIVE_INFINITY)         str=strInfinityError;
 else         str=strSyntaxError;
        return str;
      }
    }
 else     if (operator.equals(""String_Node_Str"")) {
      try {
        result=operand1.divide(operand2,mcSolve);
      }
 catch (      ArithmeticException ex) {
        str=strDivideZeroError;
        return str;
      }
    }
 else     throw new IllegalArgumentException(""String_Node_Str"");
    str=str.substring(0,mat.start()) + result + str.substring(mat.end());
    mat=ptn.matcher(str);
  }
  return str;
}","/** 
 * Loop over/collapse down input str, solves for either +- or /*.  places result in expression
 * @param regexOperatorType is the type of operators to look for in regex form
 * @param str is the string to operate upon
 */
private static String collapseOps(String regexOperatorType,String str,MathContext mcSolve){
  Pattern ptn=Pattern.compile(Expression.regexGroupedNumber + regexOperatorType + Expression.regexGroupedNumber);
  Matcher mat=ptn.matcher(str);
  BigDecimal result;
  while (mat.find()) {
    BigDecimal operand1;
    BigDecimal operand2;
    String operator;
    try {
      operand1=new BigDecimal(mat.group(1));
      operand2=new BigDecimal(mat.group(3));
      operator=mat.group(2);
    }
 catch (    NumberFormatException e) {
      str=strSyntaxError;
      return str;
    }
    if (operator.equals(""String_Node_Str"")) {
      if (operand1.scale() < -9000 || operand2.scale() < -9000)       return strInfinityError;
      result=operand1.add(operand2,mcSolve);
    }
 else     if (operator.equals(""String_Node_Str"")) {
      if (operand1.scale() < -9000 || operand2.scale() < -9000)       return strInfinityError;
      result=operand1.subtract(operand2,mcSolve);
    }
 else     if (operator.equals(""String_Node_Str""))     result=operand1.multiply(operand2,mcSolve);
 else     if (operator.equals(""String_Node_Str"")) {
      double dResult=Math.pow(operand1.doubleValue(),operand2.doubleValue());
      try {
        result=BigDecimal.valueOf(dResult);
      }
 catch (      NumberFormatException ex) {
        if (dResult == Double.POSITIVE_INFINITY || dResult == Double.NEGATIVE_INFINITY)         str=strInfinityError;
 else         str=strSyntaxError;
        return str;
      }
    }
 else     if (operator.equals(""String_Node_Str"")) {
      try {
        result=operand1.divide(operand2,mcSolve);
      }
 catch (      ArithmeticException ex) {
        str=strDivideZeroError;
        return str;
      }
    }
 else     throw new IllegalArgumentException(""String_Node_Str"");
    str=str.substring(0,mat.start()) + result + str.substring(mat.end());
    mat=ptn.matcher(str);
  }
  return str;
}",0.9481737413622904
35096,"/** 
 * Passed a key from calculator (num/op/back/clear/eq) and distributes it to its proper function
 * @param sKey is either single character (but still a String) or a string from result list
 */
public void parseKeyPressed(String sKey){
  if (mExpression.isInvalid())   mExpression.replaceExpression(""String_Node_Str"");
  if (sKey.equals(""String_Node_Str"")) {
    boolean solveSuccess=solveAndLoadIntoResultList();
    if (!solveSuccess)     return;
    try {
      mExpression.roundAndCleanExpression();
    }
 catch (    NumberFormatException e) {
      mExpression.replaceExpression(strSyntaxError);
    }
    mResultList.get(mResultList.size() - 1).setAnswer(mExpression.toString());
  }
 else   if (sKey.equals(""String_Node_Str""))   backspace();
 else   if (sKey.equals(""String_Node_Str""))   clear();
 else {
    if (mExpression.isSolved() && sKey.matches(""String_Node_Str""))     mUnitTypeArray.get(mUnitTypePos).clearUnitSelection();
    mExpression.keyPresses(sKey);
  }
}","/** 
 * Passed a key from calculator (num/op/back/clear/eq) and distributes it to its proper function
 * @param sKey is either single character (but still a String) or a string from result list
 */
public void parseKeyPressed(String sKey){
  if (isExpressionInvalid())   mExpression.clearExpression();
  if (sKey.equals(""String_Node_Str"")) {
    boolean solveSuccess=solveAndLoadIntoResultList();
    if (!solveSuccess)     return;
    try {
      mExpression.roundAndCleanExpression();
    }
 catch (    NumberFormatException e) {
      mExpression.replaceExpression(strSyntaxError);
    }
    mResultList.get(mResultList.size() - 1).setAnswer(mExpression.toString());
  }
 else   if (sKey.equals(""String_Node_Str""))   backspace();
 else   if (sKey.equals(""String_Node_Str""))   clear();
 else {
    if (mExpression.isSolved() && sKey.matches(""String_Node_Str""))     mUnitTypeArray.get(mUnitTypePos).clearUnitSelection();
    mExpression.keyPresses(sKey);
  }
}",0.4580545548121462
35097,"/** 
 * Function used to convert from one unit to another
 * @param fromValue is standardized value of the unit being converted from
 * @param toValue is standardized value of the unit being converted to
 */
public void convertFromTo(Unit fromUnit,Unit toUnit){
  if (mExpression.isEmpty() || mExpression.isInvalid())   return;
  boolean solveSuccess=solveAndLoadIntoResultList();
  if (!solveSuccess)   return;
  try {
    BigDecimal bdToUnit=new BigDecimal(toUnit.getValue(),mMcOperate);
    BigDecimal bdCurrUnit=new BigDecimal(fromUnit.getValue(),mMcOperate);
    BigDecimal bdCurrUnitIntercept=new BigDecimal(fromUnit.getIntercept(),mMcOperate);
    BigDecimal bdResult=new BigDecimal(mExpression.toString(),mMcOperate);
    mExpression.replaceExpression(bdCurrUnitIntercept.add(bdResult.multiply(bdToUnit.divide(bdCurrUnit,mMcOperate),mMcOperate)).toString());
  }
 catch (  NumberFormatException e) {
    mExpression.replaceExpression(strSyntaxError);
    return;
  }
  try {
    mExpression.roundAndCleanExpression();
  }
 catch (  NumberFormatException e) {
    mExpression.replaceExpression(strSyntaxError);
    return;
  }
  mResultList.get(mResultList.size() - 1).setResultUnit(fromUnit,toUnit,mUnitTypePos);
  mResultList.get(mResultList.size() - 1).setAnswer(mExpression.toString());
}","/** 
 * Function used to convert from one unit to another
 * @param fromValue is standardized value of the unit being converted from
 * @param toValue is standardized value of the unit being converted to
 */
public void convertFromTo(Unit fromUnit,Unit toUnit){
  if (isExpressionEmpty() || isExpressionInvalid())   return;
  boolean solveSuccess=solveAndLoadIntoResultList();
  if (!solveSuccess)   return;
  try {
    BigDecimal bdToUnit=new BigDecimal(toUnit.getValue(),mMcOperate);
    BigDecimal bdCurrUnit=new BigDecimal(fromUnit.getValue(),mMcOperate);
    BigDecimal bdCurrUnitIntercept=new BigDecimal(fromUnit.getIntercept(),mMcOperate);
    BigDecimal bdResult=new BigDecimal(mExpression.toString(),mMcOperate);
    BigDecimal bdScaled=bdResult.multiply(bdToUnit.divide(bdCurrUnit,mMcOperate),mMcOperate);
    if (bdScaled.scale() < -9000 || bdCurrUnitIntercept.scale() < -9000)     throw new NumberFormatException(strInfinityError);
    mExpression.replaceExpression(bdCurrUnitIntercept.add(bdScaled,mMcOperate).toString());
  }
 catch (  NumberFormatException e) {
    if (e.getMessage().equals(strInfinityError))     mExpression.replaceExpression(strInfinityError);
 else     mExpression.replaceExpression(strSyntaxError);
    return;
  }
  try {
    mExpression.roundAndCleanExpression();
  }
 catch (  NumberFormatException e) {
    mExpression.replaceExpression(strSyntaxError);
    return;
  }
  mResultList.get(mResultList.size() - 1).setResultUnit(fromUnit,toUnit,mUnitTypePos);
  mResultList.get(mResultList.size() - 1).setAnswer(mExpression.toString());
}",0.7923478260869565
35098,"/** 
 * Updates the text with current value from calc. Preserves calc's cursor selections
 */
public void updateTextFromCalc(){
  int selStart=mCalc.getSelectionStart();
  int selEnd=mCalc.getSelectionEnd();
  String text=mCalc.toString();
  if (!mCalc.toString().equals(""String_Node_Str"") && mCalc.getCurrUnitType().isUnitSelected())   text=text + ""String_Node_Str"" + mCalc.getCurrUnitType().getSelectedUnit().toString();
  setText(text);
  setSelection(selStart,selEnd);
  if (selStart == mCalc.toString().length())   setCursorVisible(false);
 else   setCursorVisible(true);
}","/** 
 * Updates the text with current value from calc. Preserves calc's cursor selections
 */
public void updateTextFromCalc(){
  int selStart=mCalc.getSelectionStart();
  int selEnd=mCalc.getSelectionEnd();
  String text=mCalc.toString();
  if (!mCalc.isExpressionInvalid() && !mCalc.isExpressionEmpty() && mCalc.getCurrUnitType().isUnitSelected())   text=text + ""String_Node_Str"" + mCalc.getCurrUnitType().getSelectedUnit().toString();
  setText(text);
  setSelection(selStart,selEnd);
  if (selStart == mCalc.toString().length())   setCursorVisible(false);
 else   setCursorVisible(true);
}",0.8198121263877028
35099,"/** 
 * Replaces % operators their respective evaluable operators
 */
public void replacePercentOps(){
  String str=mExpression.toString();
  String subStr=""String_Node_Str"";
  for (int i=0; i < str.length(); i++) {
    if (str.charAt(i) == '%') {
      subStr=str.substring(0,i);
      String lastNum=getLastNumb(subStr);
      subStr=subStr.substring(0,subStr.length() - lastNum.length());
      if (!subStr.equals(""String_Node_Str"")) {
        String lastOp=subStr.substring(subStr.length() - 1,subStr.length());
        subStr=subStr.substring(0,subStr.length() - 1);
        if (lastOp.matches(regexGroupedAddSub) && !subStr.equals(""String_Node_Str""))         subStr=""String_Node_Str"" + subStr + ""String_Node_Str""+ lastOp+ lastNum+ ""String_Node_Str"";
 else         subStr=subStr + lastOp + ""String_Node_Str""+ lastNum+ ""String_Node_Str"";
      }
 else       subStr=""String_Node_Str"" + lastNum + ""String_Node_Str"";
      str=subStr + str.substring(i + 1,str.length());
      i=subStr.length();
      System.out.println(""String_Node_Str"" + i);
      System.out.println(""String_Node_Str"" + str);
      System.out.println(""String_Node_Str"" + subStr);
    }
  }
  replaceExpression(str);
}","/** 
 * Replaces % operators their respective operators 
 */
public void replacePercentOps(){
  String str=mExpression.toString();
  String subStr=""String_Node_Str"";
  for (int i=0; i < str.length(); i++) {
    if (str.charAt(i) == '%') {
      subStr=str.substring(0,i);
      String lastNum=getLastNumb(subStr);
      subStr=subStr.substring(0,subStr.length() - lastNum.length());
      if (!subStr.equals(""String_Node_Str"")) {
        String lastOp=subStr.substring(subStr.length() - 1,subStr.length());
        subStr=subStr.substring(0,subStr.length() - 1);
        if (lastOp.matches(regexGroupedAddSub) && !subStr.equals(""String_Node_Str""))         subStr=""String_Node_Str"" + subStr + ""String_Node_Str""+ lastOp+ lastNum+ ""String_Node_Str"";
 else         subStr=subStr + lastOp + ""String_Node_Str""+ lastNum+ ""String_Node_Str"";
      }
 else       subStr=""String_Node_Str"" + lastNum + ""String_Node_Str"";
      str=subStr + str.substring(i + 1,str.length());
      i=subStr.length();
    }
  }
  replaceExpression(str);
}",0.9173068233167646
35100,"public Expression(JSONObject json,int displayPrecision) throws JSONException {
  this(displayPrecision);
  replaceExpression(json.getString(JSON_EXPRESSION));
  mPreciseResult=json.getString(JSON_PRECISE);
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"" + mSelectionStart);
  System.out.println(""String_Node_Str"" + mSelectionEnd);
  setSolved(json.getBoolean(JSON_SOLVED));
}","public Expression(JSONObject json,int displayPrecision) throws JSONException {
  this(displayPrecision);
  replaceExpression(json.getString(JSON_EXPRESSION));
  mPreciseResult=json.getString(JSON_PRECISE);
  System.out.println(""String_Node_Str"" + mSelectionStart);
  System.out.println(""String_Node_Str"" + mSelectionEnd);
  setSolved(json.getBoolean(JSON_SOLVED));
}",0.9469598965071152
35101,"/** 
 * Rounds expression down by a MathContext mcDisp
 * @throws NumberFormatException if Expression not formatted correctly
 */
public void roundAndCleanExpression(){
  if (isInvalid() || mExpression.equals(""String_Node_Str""))   return;
  BigDecimal bd;
  bd=new BigDecimal(mExpression,mMcDisp);
  mPreciseResult=mExpression;
  if (lastNumbExponent() < mIntDisplayPrecision)   replaceExpression(bd.toPlainString());
 else   replaceExpression(bd.toString());
  replaceExpression(cleanFormatting(mExpression));
}","/** 
 * Rounds expression down by a MathContext mcDisp
 * @throws NumberFormatException if Expression not formatted correctly
 */
public void roundAndCleanExpression(){
  if (isInvalid() || isEmpty())   return;
  BigDecimal bd;
  bd=new BigDecimal(mExpression,mMcDisp);
  mPreciseResult=mExpression;
  if (lastNumbExponent() < mIntDisplayPrecision)   replaceExpression(bd.toPlainString());
 else   replaceExpression(bd.toString());
  replaceExpression(cleanFormatting(mExpression));
}",0.9558232931726908
35102,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_calc);
  mCalc=Calculator.getCalculator(this);
  mDisplay=(EditTextCursorWatcher)findViewById(R.id.textDisplay);
  mDisplay.setCalc(mCalc);
  mDisplay.disableSoftInputFromAppearing();
  mDisplay.setOnLongClickListener(new View.OnLongClickListener(){
    @Override public boolean onLongClick(    View v){
      mDisplay.selectAll();
      return false;
    }
  }
);
  mDisplay.setOnTouchListener(new View.OnTouchListener(){
    @Override public boolean onTouch(    View view,    MotionEvent event){
      if (event.getAction() == MotionEvent.ACTION_DOWN) {
        mCalc.setSolved(false);
        mDisplay.setCursorVisible(true);
      }
      return false;
    }
  }
);
  FragmentManager fm=getSupportFragmentManager();
  mResultFragment=(ResultListFragment)fm.findFragmentById(R.id.resultListfragmentContainer);
  if (mResultFragment == null) {
    mResultFragment=new ResultListFragment();
    fm.beginTransaction().add(R.id.resultListfragmentContainer,mResultFragment).commit();
  }
  mConvKeysViewPager=(ViewPager)findViewById(R.id.convertKeyPager);
  mConvKeysViewPager.setAdapter(new FragmentStatePagerAdapter(fm){
    @Override public int getCount(){
      return mCalc.getUnitTypeSize();
    }
    @Override public Fragment getItem(    int pos){
      return ConvKeysFragment.newInstance(pos);
    }
    @Override public CharSequence getPageTitle(    int position){
      return CONTENT[position % CONTENT.length];
    }
  }
);
  TabPageIndicator viewPageIndicator=(TabPageIndicator)findViewById(R.id.titles);
  viewPageIndicator.setViewPager(mConvKeysViewPager);
  viewPageIndicator.setOnPageChangeListener(new ViewPager.OnPageChangeListener(){
    @Override public void onPageSelected(    int pos){
      mCalc.setUnitTypePos(pos);
      DisplayMetrics metrics=getResources().getDisplayMetrics();
      int padLeft=(int)(metrics.density * 8f + 0.5f);
      int padRight=(int)(metrics.density * 8f + 0.5f);
      mConvKeysViewPager.setPadding(padLeft,0,padRight,0);
      int currConvKeyPos=mConvKeysViewPager.getCurrentItem();
      clearConvKeyForFragPos(currConvKeyPos - 1);
      clearConvKeyForFragPos(currConvKeyPos + 1);
      if (unitToSelectAfterScroll != null) {
        getConvKeyFrag(mConvKeysViewPager.getCurrentItem()).selectUnit(unitToSelectAfterScroll);
        unitToSelectAfterScroll=null;
      }
    }
    @Override public void onPageScrolled(    int pos,    float posOffset,    int posOffsetPixels){
    }
    @Override public void onPageScrollStateChanged(    int state){
    }
  }
);
  DisplayMetrics metrics=getResources().getDisplayMetrics();
  int padLeft=(int)(metrics.density * 8f + 0.5f);
  int padRight=padLeft;
  mConvKeysViewPager.setPadding(padLeft,0,padRight,0);
  mConvKeysViewPager.setClipToPadding(false);
  mConvKeysViewPager.setPageMargin(8);
  mConvKeysViewPager.setCurrentItem(mCalc.getUnitTypePos());
  calcButton=new ArrayList<Button>();
  for (  int id : BUTTON_IDS) {
    Button button=(Button)findViewById(id);
    button.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View view){
        int buttonId=view.getId();
        String buttonValue=""String_Node_Str"";
switch (buttonId) {
case R.id.plus_button:
          buttonValue=""String_Node_Str"";
        break;
case R.id.minus_button:
      buttonValue=""String_Node_Str"";
    break;
case R.id.multiply_button:
  buttonValue=""String_Node_Str"";
break;
case R.id.divide_button:
buttonValue=""String_Node_Str"";
break;
case R.id.decimal_button:
buttonValue=""String_Node_Str"";
break;
case R.id.equals_button:
buttonValue=""String_Node_Str"";
break;
case R.id.ee_button:
buttonValue=""String_Node_Str"";
break;
case R.id.power_button:
buttonValue=""String_Node_Str"";
break;
case R.id.percent_button:
buttonValue=""String_Node_Str"";
break;
case R.id.open_para_button:
buttonValue=""String_Node_Str"";
break;
case R.id.close_para_button:
buttonValue=""String_Node_Str"";
break;
case R.id.backspace_button:
buttonValue=""String_Node_Str"";
break;
default :
for (int i=0; i < 10; i++) if (buttonId == BUTTON_IDS[i]) buttonValue=String.valueOf(i);
}
numButtonPressed(buttonValue);
}
}
);
calcButton.add(button);
}
ImageButton backspaceButton=(ImageButton)findViewById(R.id.backspace_button);
backspaceButton.setOnTouchListener(new View.OnTouchListener(){
private Handler mColorHoldHandler;
private View mView;
@Override public boolean onTouch(View view,MotionEvent event){
switch (event.getAction()) {
case MotionEvent.ACTION_DOWN:
mView=view;
mInc=0;
if (mColorHoldHandler != null) return true;
mColorHoldHandler=new Handler();
mColorHoldHandler.postDelayed(mBackspaceColor,10);
break;
case MotionEvent.ACTION_UP:
if (mColorHoldHandler == null) return true;
numButtonPressed(""String_Node_Str"");
view.setBackgroundColor(getResources().getColor(R.color.op_button_normal));
mColorHoldHandler.removeCallbacks(mBackspaceColor);
mColorHoldHandler=null;
break;
}
return false;
}
private int mInc;
Runnable mBackspaceColor=new Runnable(){
private int mStartColor=getResources().getColor(R.color.op_button_pressed);
private int mEndColor=getResources().getColor(R.color.backspace_button_held);
private static final int NUM_COLOR_CHANGES=10;
private static final int BACKSPACE_HOLD_TIME=500;
@Override public void run(){
if (mInc == -1) {
mView.setBackgroundColor(mEndColor);
return;
}
if (mInc == NUM_COLOR_CHANGES) {
numButtonPressed(""String_Node_Str"");
mView.setBackgroundColor(Color.argb(255,0,0,0));
mColorHoldHandler.postDelayed(this,100);
mInc=-1;
return;
}
mColorHoldHandler.postDelayed(this,BACKSPACE_HOLD_TIME / NUM_COLOR_CHANGES);
float deltaRed=(float)Color.red(mStartColor) + ((float)Color.red(mEndColor) - (float)Color.red(mStartColor)) * ((float)mInc * (float)mInc * (float)mInc) / ((float)NUM_COLOR_CHANGES * (float)NUM_COLOR_CHANGES * (float)NUM_COLOR_CHANGES);
int deltaGreen=Color.green(mStartColor) + ((Color.green(mEndColor) - Color.green(mStartColor)) * mInc) / NUM_COLOR_CHANGES;
int deltaBlue=Color.blue(mStartColor) + ((Color.blue(mEndColor) - Color.blue(mStartColor)) * mInc) / NUM_COLOR_CHANGES;
mView.setBackgroundColor(Color.argb(255,(int)deltaRed,deltaGreen,deltaBlue));
System.out.println(""String_Node_Str"" + deltaRed);
System.out.println(""String_Node_Str"" + ((Color.red(mEndColor) - Color.red(mStartColor)) * mInc ^ 3));
System.out.println(""String_Node_Str"" + mInc);
mInc++;
}
}
;
}
);
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_calc);
  mCalc=Calculator.getCalculator(this);
  mDisplay=(EditTextCursorWatcher)findViewById(R.id.textDisplay);
  mDisplay.setCalc(mCalc);
  mDisplay.disableSoftInputFromAppearing();
  mDisplay.setOnLongClickListener(new View.OnLongClickListener(){
    @Override public boolean onLongClick(    View v){
      mDisplay.selectAll();
      return false;
    }
  }
);
  mDisplay.setOnTouchListener(new View.OnTouchListener(){
    @Override public boolean onTouch(    View view,    MotionEvent event){
      if (event.getAction() == MotionEvent.ACTION_DOWN) {
        mCalc.setSolved(false);
        mDisplay.setCursorVisible(true);
      }
      return false;
    }
  }
);
  FragmentManager fm=getSupportFragmentManager();
  mResultFragment=(ResultListFragment)fm.findFragmentById(R.id.resultListfragmentContainer);
  if (mResultFragment == null) {
    mResultFragment=new ResultListFragment();
    fm.beginTransaction().add(R.id.resultListfragmentContainer,mResultFragment).commit();
  }
  mConvKeysViewPager=(ViewPager)findViewById(R.id.convertKeyPager);
  mConvKeysViewPager.setAdapter(new FragmentStatePagerAdapter(fm){
    @Override public int getCount(){
      return mCalc.getUnitTypeSize();
    }
    @Override public Fragment getItem(    int pos){
      return ConvKeysFragment.newInstance(pos);
    }
    @Override public CharSequence getPageTitle(    int position){
      return CONTENT[position % CONTENT.length];
    }
  }
);
  TabPageIndicator convertPageIndicator=(TabPageIndicator)findViewById(R.id.titles);
  convertPageIndicator.setViewPager(mConvKeysViewPager);
  convertPageIndicator.setOnPageChangeListener(new ViewPager.OnPageChangeListener(){
    @Override public void onPageSelected(    int pos){
      mCalc.setUnitTypePos(pos);
      DisplayMetrics metrics=getResources().getDisplayMetrics();
      int padLeft=(int)(metrics.density * 8f + 0.5f);
      int padRight=(int)(metrics.density * 8f + 0.5f);
      mConvKeysViewPager.setPadding(padLeft,0,padRight,0);
      int currConvKeyPos=mConvKeysViewPager.getCurrentItem();
      clearConvKeyForFragPos(currConvKeyPos - 1);
      clearConvKeyForFragPos(currConvKeyPos);
      clearConvKeyForFragPos(currConvKeyPos + 1);
      mCalc.getCurrUnitType().clearUnitSelection();
      if (unitToSelectAfterScroll != null) {
        getConvKeyFrag(mConvKeysViewPager.getCurrentItem()).selectUnit(unitToSelectAfterScroll);
        unitToSelectAfterScroll=null;
      }
      updateScreen(false);
    }
    @Override public void onPageScrolled(    int pos,    float posOffset,    int posOffsetPixels){
    }
    @Override public void onPageScrollStateChanged(    int state){
    }
  }
);
  DisplayMetrics metrics=getResources().getDisplayMetrics();
  int padLeft=(int)(metrics.density * 8f + 0.5f);
  int padRight=padLeft;
  mConvKeysViewPager.setPadding(padLeft,0,padRight,0);
  mConvKeysViewPager.setClipToPadding(false);
  mConvKeysViewPager.setPageMargin(8);
  mConvKeysViewPager.setCurrentItem(mCalc.getUnitTypePos());
  calcButton=new ArrayList<Button>();
  for (  int id : BUTTON_IDS) {
    Button button=(Button)findViewById(id);
    button.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View view){
        int buttonId=view.getId();
        String buttonValue=""String_Node_Str"";
switch (buttonId) {
case R.id.plus_button:
          buttonValue=""String_Node_Str"";
        break;
case R.id.minus_button:
      buttonValue=""String_Node_Str"";
    break;
case R.id.multiply_button:
  buttonValue=""String_Node_Str"";
break;
case R.id.divide_button:
buttonValue=""String_Node_Str"";
break;
case R.id.decimal_button:
buttonValue=""String_Node_Str"";
break;
case R.id.equals_button:
buttonValue=""String_Node_Str"";
break;
case R.id.ee_button:
buttonValue=""String_Node_Str"";
break;
case R.id.power_button:
buttonValue=""String_Node_Str"";
break;
case R.id.percent_button:
buttonValue=""String_Node_Str"";
break;
case R.id.open_para_button:
buttonValue=""String_Node_Str"";
break;
case R.id.close_para_button:
buttonValue=""String_Node_Str"";
break;
case R.id.backspace_button:
buttonValue=""String_Node_Str"";
break;
default :
for (int i=0; i < 10; i++) if (buttonId == BUTTON_IDS[i]) buttonValue=String.valueOf(i);
}
numButtonPressed(buttonValue);
}
}
);
calcButton.add(button);
}
ImageButton backspaceButton=(ImageButton)findViewById(R.id.backspace_button);
backspaceButton.setOnTouchListener(new View.OnTouchListener(){
private Handler mColorHoldHandler;
private View mView;
@Override public boolean onTouch(View view,MotionEvent event){
switch (event.getAction()) {
case MotionEvent.ACTION_DOWN:
mView=view;
mInc=0;
if (mColorHoldHandler != null) return true;
mColorHoldHandler=new Handler();
mColorHoldHandler.postDelayed(mBackspaceColor,10);
break;
case MotionEvent.ACTION_UP:
if (mColorHoldHandler == null) return true;
numButtonPressed(""String_Node_Str"");
view.setBackgroundColor(getResources().getColor(R.color.op_button_normal));
mColorHoldHandler.removeCallbacks(mBackspaceColor);
mColorHoldHandler=null;
break;
}
return false;
}
private int mInc;
Runnable mBackspaceColor=new Runnable(){
private int mStartColor=getResources().getColor(R.color.op_button_pressed);
private int mEndColor=getResources().getColor(R.color.backspace_button_held);
private static final int NUM_COLOR_CHANGES=10;
private static final int BACKSPACE_HOLD_TIME=500;
@Override public void run(){
if (mInc == -1) {
mView.setBackgroundColor(mEndColor);
return;
}
if (mInc == NUM_COLOR_CHANGES) {
numButtonPressed(""String_Node_Str"");
mView.setBackgroundColor(Color.argb(255,0,0,0));
mColorHoldHandler.postDelayed(this,100);
mInc=-1;
return;
}
mColorHoldHandler.postDelayed(this,BACKSPACE_HOLD_TIME / NUM_COLOR_CHANGES);
float deltaRed=(float)Color.red(mStartColor) + ((float)Color.red(mEndColor) - (float)Color.red(mStartColor)) * ((float)mInc * (float)mInc * (float)mInc) / ((float)NUM_COLOR_CHANGES * (float)NUM_COLOR_CHANGES * (float)NUM_COLOR_CHANGES);
int deltaGreen=Color.green(mStartColor) + ((Color.green(mEndColor) - Color.green(mStartColor)) * mInc) / NUM_COLOR_CHANGES;
int deltaBlue=Color.blue(mStartColor) + ((Color.blue(mEndColor) - Color.blue(mStartColor)) * mInc) / NUM_COLOR_CHANGES;
mView.setBackgroundColor(Color.argb(255,(int)deltaRed,deltaGreen,deltaBlue));
System.out.println(""String_Node_Str"" + deltaRed);
System.out.println(""String_Node_Str"" + ((Color.red(mEndColor) - Color.red(mStartColor)) * mInc ^ 3));
System.out.println(""String_Node_Str"" + mInc);
mInc++;
}
}
;
}
);
}",0.98270584634221
35103,"@Override public void onPageSelected(int pos){
  mCalc.setUnitTypePos(pos);
  DisplayMetrics metrics=getResources().getDisplayMetrics();
  int padLeft=(int)(metrics.density * 8f + 0.5f);
  int padRight=(int)(metrics.density * 8f + 0.5f);
  mConvKeysViewPager.setPadding(padLeft,0,padRight,0);
  int currConvKeyPos=mConvKeysViewPager.getCurrentItem();
  clearConvKeyForFragPos(currConvKeyPos - 1);
  clearConvKeyForFragPos(currConvKeyPos + 1);
  if (unitToSelectAfterScroll != null) {
    getConvKeyFrag(mConvKeysViewPager.getCurrentItem()).selectUnit(unitToSelectAfterScroll);
    unitToSelectAfterScroll=null;
  }
}","@Override public void onPageSelected(int pos){
  mCalc.setUnitTypePos(pos);
  DisplayMetrics metrics=getResources().getDisplayMetrics();
  int padLeft=(int)(metrics.density * 8f + 0.5f);
  int padRight=(int)(metrics.density * 8f + 0.5f);
  mConvKeysViewPager.setPadding(padLeft,0,padRight,0);
  int currConvKeyPos=mConvKeysViewPager.getCurrentItem();
  clearConvKeyForFragPos(currConvKeyPos - 1);
  clearConvKeyForFragPos(currConvKeyPos);
  clearConvKeyForFragPos(currConvKeyPos + 1);
  mCalc.getCurrUnitType().clearUnitSelection();
  if (unitToSelectAfterScroll != null) {
    getConvKeyFrag(mConvKeysViewPager.getCurrentItem()).selectUnit(unitToSelectAfterScroll);
    unitToSelectAfterScroll=null;
  }
  updateScreen(false);
}",0.9159851301115242
35104,"/** 
 * Clear the unit selection for convert key fragment at position pos
 * @param pos the position of the desired convert key fragment to clear selected units from 
 */
private void clearConvKeyForFragPos(int pos){
  ConvKeysFragment currFragLeft=getConvKeyFrag(pos);
  if (currFragLeft != null)   currFragLeft.clearButtonSelection();
}","/** 
 * Clear the unit selection for convert key fragment at position pos
 * @param pos the position of the desired convert key fragment to clear selected units from 
 */
private void clearConvKeyForFragPos(int pos){
  ConvKeysFragment currFragAtPos=getConvKeyFrag(pos);
  if (currFragAtPos != null)   currFragAtPos.clearButtonSelection();
}",0.9602356406480118
35105,"public void clearButtonSelection(){
  if (mConvButton == null)   return;
  Button prevSelected=mConvButton.get(mUnitType.getCurrUnitPos());
  prevSelected.setSelected(false);
}","/** 
 * Clears the button unit selection 
 */
public void clearButtonSelection(){
  if (mConvButton == null)   return;
  Button prevSelected=mConvButton.get(mUnitType.getCurrUnitPos());
  prevSelected.setSelected(false);
}",0.8844221105527639
35106,"/** 
 * Used to pass selected unit to the UnitType model class
 * @param buttonPos the position in the list of buttons to select 
 */
private void clickUnitButton(int buttonPos){
  clearButtonSelection();
  boolean didConvert=mUnitType.selectUnit(buttonPos);
  if (didConvert)   mCallback.updateScreen(true);
  colorSelectedButton();
}","/** 
 * Used to pass selected unit to the UnitType model class
 * @param buttonPos the position in the list of buttons to select 
 */
private void clickUnitButton(int buttonPos){
  clearButtonSelection();
  boolean didConvert=mUnitType.selectUnit(buttonPos);
  mCallback.updateScreen(true);
  colorSelectedButton();
}",0.97239263803681
35107,"@Override protected void onSelectionChanged(int selStart,int selEnd){
  if (mCalc != null) {
    if (mCalc.toString().equals(""String_Node_Str""))     return;
    int expLen=mCalc.toString().length();
    if (selEnd > expLen) {
      setSelection(selStart,expLen);
      return;
    }
    if (selStart > expLen) {
      setSelection(expLen,selEnd);
      return;
    }
    mCalc.setSelection(selStart,selEnd);
    setCursorVisible(true);
  }
}","@Override protected void onSelectionChanged(int selStart,int selEnd){
  if (mCalc != null) {
    int expLen=mCalc.toString().length();
    if (selEnd > expLen) {
      setSelection(selStart,expLen);
      return;
    }
    if (selStart > expLen) {
      setSelection(expLen,selEnd);
      return;
    }
    mCalc.setSelection(selStart,selEnd);
    setCursorVisible(true);
  }
}",0.921760391198044
35108,"/** 
 * Updates the text with current value from calc. Preserves calc's cursor selections
 */
public void updateTextFromCalc(){
  int selStart=mCalc.getSelectionStart();
  int selEnd=mCalc.getSelectionEnd();
  String text=mCalc.toString();
  if (mCalc.getCurrUnitType().isUnitSelected())   text=text + ""String_Node_Str"" + mCalc.getCurrUnitType().getSelectedUnit().toString();
  setText(text);
  setSelection(selStart,selEnd);
  if (selStart == mCalc.toString().length())   setCursorVisible(false);
 else   setCursorVisible(true);
}","/** 
 * Updates the text with current value from calc. Preserves calc's cursor selections
 */
public void updateTextFromCalc(){
  int selStart=mCalc.getSelectionStart();
  int selEnd=mCalc.getSelectionEnd();
  String text=mCalc.toString();
  if (!mCalc.toString().equals(""String_Node_Str"") && mCalc.getCurrUnitType().isUnitSelected())   text=text + ""String_Node_Str"" + mCalc.getCurrUnitType().getSelectedUnit().toString();
  setText(text);
  setSelection(selStart,selEnd);
  if (selStart == mCalc.toString().length())   setCursorVisible(false);
 else   setCursorVisible(true);
}",0.957619477006312
35109,"/** 
 * This function will try to add a number or operator, or entire result list to the current expression Note that there is lots of error checking to be sure user can't entire an invalid operator/number
 * @param sKey should only be single vaild number or operator character, or longer previous results
 */
public void keyPresses(String sKey){
  if (sKey.length() > 1) {
    if (mSolved)     replaceExpression(sKey);
 else     insertAtSelection(sKey);
    mSolved=false;
    return;
  }
  if (sKey.matches(regexHasInvalidChars))   throw new IllegalArgumentException(""String_Node_Str"");
  if (sKey.matches(regexInvalidStartChar) && (getLastPartialNumb().equals(""String_Node_Str"") || expresssionToSelection().matches(""String_Node_Str"")))   return;
  if (mSolved && sKey.matches(""String_Node_Str""))   clearExpression();
  if (sKey.equals(""String_Node_Str"") && expresssionToSelection().matches(""String_Node_Str""))   sKey=""String_Node_Str"" + sKey;
  if (sKey.matches(""String_Node_Str"") && expresssionToSelection().matches(""String_Node_Str""))   sKey=""String_Node_Str"" + sKey;
  if (sKey.equals(""String_Node_Str""))   if (numOpenPara() <= 0)   addToExpressionStart(""String_Node_Str"");
  if (sKey.equals(""String_Node_Str"") && getLastPartialNumb().matches(""String_Node_Str""))   if (!expresssionToSelection().matches(""String_Node_Str"" + regexAnyValidOperator + ""String_Node_Str""))   return;
  if (sKey.equals(""String_Node_Str"") && (getLastPartialNumb().contains(""String_Node_Str"") || expresssionToSelection().matches(""String_Node_Str"" + regexAnyValidOperator + ""String_Node_Str"")))   return;
  if (getLastPartialNumb().matches(""String_Node_Str""))   if (sKey.matches(""String_Node_Str""))   return;
  if (sKey.matches(regexAnyOperatorOrE) && getLastPartialNumb().equals(""String_Node_Str""))   return;
  if (sKey.matches(""String_Node_Str"") && expresssionToSelection().matches(""String_Node_Str""))   return;
  if (sKey.matches(""String_Node_Str"") && expresssionToSelection().matches(""String_Node_Str""))   return;
  if (sKey.matches(regexAnyValidOperator) && expresssionToSelection().matches(""String_Node_Str"" + regexAnyOpExceptPercent + regexAnyValidOperator+ ""String_Node_Str"")) {
    if (getSelectionEnd() > getSelectionStart())     backspaceAtSelection();
    backspaceAtSelection();
    backspaceAtSelection();
  }
 else   if (sKey.matches(regexInvalidStartChar) && expresssionToSelection().matches(""String_Node_Str"" + regexAnyOpExceptPercent + ""String_Node_Str"")) {
    if (getSelectionEnd() > getSelectionStart())     backspaceAtSelection();
    backspaceAtSelection();
  }
  insertAtSelection(sKey);
  mSolved=false;
}","/** 
 * This function will try to add a number or operator, or entire result list to the current expression Note that there is lots of error checking to be sure user can't entire an invalid operator/number
 * @param sKey should only be single valid number or operator character, or longer previous results
 */
public void keyPresses(String sKey){
  if (sKey.length() > 1) {
    if (mSolved)     replaceExpression(sKey);
 else     insertAtSelection(sKey);
    mSolved=false;
    return;
  }
  if (sKey.matches(regexHasInvalidChars))   throw new IllegalArgumentException(""String_Node_Str"");
  if (sKey.matches(regexInvalidStartChar) && expresssionToSelection().matches(""String_Node_Str""))   return;
  if (mSolved && sKey.matches(""String_Node_Str""))   clearExpression();
  if (sKey.equals(""String_Node_Str"") && expresssionToSelection().matches(""String_Node_Str""))   sKey=""String_Node_Str"" + sKey;
  if (sKey.matches(""String_Node_Str"") && expresssionToSelection().matches(""String_Node_Str""))   sKey=""String_Node_Str"" + sKey;
  if (sKey.equals(""String_Node_Str""))   if (numOpenPara() <= 0)   addToExpressionStart(""String_Node_Str"");
  if (sKey.equals(""String_Node_Str"") && getLastPartialNumb().matches(""String_Node_Str""))   if (!expresssionToSelection().matches(""String_Node_Str"" + regexAnyValidOperator + ""String_Node_Str""))   return;
  if (sKey.equals(""String_Node_Str"") && (getLastPartialNumb().contains(""String_Node_Str"") || expresssionToSelection().matches(""String_Node_Str"" + regexAnyValidOperator + ""String_Node_Str"")))   return;
  if (getLastPartialNumb().matches(""String_Node_Str""))   if (sKey.matches(""String_Node_Str""))   return;
  if (sKey.matches(regexAnyOperatorOrE) && getLastPartialNumb().equals(""String_Node_Str""))   return;
  if (sKey.matches(""String_Node_Str"") && expresssionToSelection().matches(""String_Node_Str""))   return;
  if (sKey.matches(""String_Node_Str"") && expresssionToSelection().matches(""String_Node_Str""))   return;
  if (sKey.matches(regexAnyValidOperator) && expresssionToSelection().matches(""String_Node_Str"" + regexAnyOpExceptPercent + regexAnyValidOperator+ ""String_Node_Str"")) {
    if (getSelectionEnd() > getSelectionStart())     backspaceAtSelection();
    backspaceAtSelection();
    backspaceAtSelection();
  }
 else   if (sKey.matches(regexInvalidStartChar) && expresssionToSelection().matches(""String_Node_Str"" + regexAnyOpExceptPercent + ""String_Node_Str"")) {
    if (getSelectionEnd() > getSelectionStart())     backspaceAtSelection();
    backspaceAtSelection();
  }
  insertAtSelection(sKey);
  mSolved=false;
}",0.4107626790553619
35110,"public Expression(JSONObject json,int displayPrecision) throws JSONException {
  this(displayPrecision);
  replaceExpression(json.getString(JSON_EXPRESSION));
  mPreciseResult=json.getString(JSON_PRECISE);
  System.out.println(""String_Node_Str"" + mSelectionStart);
  System.out.println(""String_Node_Str"" + mSelectionEnd);
  setSolved(json.getBoolean(JSON_SOLVED));
}","public Expression(JSONObject json,int displayPrecision) throws JSONException {
  this(displayPrecision);
  replaceExpression(json.getString(JSON_EXPRESSION));
  mPreciseResult=json.getString(JSON_PRECISE);
  setSolved(json.getBoolean(JSON_SOLVED));
}",0.8116883116883117
35111,"/** 
 * Gets the last double (returned as a String) at selection in current expression
 * @return anything after last valid operator, or """" if expression empty, or entire expression if doesn't contain regexAnyValidOperator. Note if expression is ""1+-5"" it will return ""-5""
 */
private String getLastPartialNumb(){
  String[] strA=expresssionToSelection().split(""String_Node_Str"" + regexAnyValidOperator);
  if (strA.length == 0)   return ""String_Node_Str"";
 else {
    if (expresssionToSelection().matches(""String_Node_Str"" + regexAnyValidOperator + regexAnyValidOperator+ regexGroupedNumber))     return expresssionToSelection().replaceAll(""String_Node_Str"" + regexAnyValidOperator + regexGroupedNumber+ ""String_Node_Str"",""String_Node_Str"");
    return strA[strA.length - 1];
  }
}","/** 
 * Gets the last partial number (returned as a String) at selection in current expression
 * @return last partial number, invalid or not, or """" if expression empty, or entire expression if doesn't contain regexAnyValidOperator. Note if expression is ""1+-5*"" it will return ""-5"" This number might be valid (eg ""1E3"") or invalid, (eg ""1E"", ""1.E-"" or ""34)"")
 */
private String getLastPartialNumb(){
  String[] strA=expresssionToSelection().split(""String_Node_Str"" + regexAnyValidOperator);
  if (strA.length == 0)   return ""String_Node_Str"";
 else   return strA[strA.length - 1];
}",0.6798534798534799
35112,"/** 
 * Solves a given Expression Cleans off the expression, adds missing parentheses, then loads in more accurate result values if possible into expression Iterates over expression using PEMAS order of operations
 * @param exp is the Expression to solve
 * @param mcSolve is the rounding to use to solve
 * @return the expression before conversion (potentially used for result list)
 */
public Result solve(Expression exp){
  exp.cleanDanglingOps();
  exp.closeOpenPar();
  String cleanedQuery=exp.toString();
  if (exp.isEmpty())   return null;
  exp.loadPreciseResult();
  exp.replacePercentOps();
  exp.groupPowerOperand();
  String strExp=collapsePara(exp.toString());
  exp.replaceExpression(strExp);
  roundAndClean(exp);
  exp.setSolved(true);
  return new Result(cleanedQuery,exp.toString());
}","/** 
 * Solves a given Expression Cleans off the expression, adds missing parentheses, then loads in more accurate result values if possible into expression Iterates over expression using PEMAS order of operations
 * @param exp is the Expression to solve
 * @param mcSolve is the rounding to use to solve
 * @return the expression before conversion (potentially used for result list)
 */
public Result solve(Expression exp){
  exp.cleanDanglingOps();
  exp.closeOpenPar();
  String cleanedQuery=exp.toString();
  if (exp.isEmpty())   return null;
  exp.loadPreciseResult();
  exp.replacePercentOps();
  exp.groupPowerOperands();
  String strExp=collapsePara(exp.toString());
  exp.replaceExpression(strExp);
  roundAndClean(exp);
  exp.setSolved(true);
  return new Result(cleanedQuery,exp.toString());
}",0.9993777224642192
35113,"/** 
 * Updates the current and previous answers
 * @param updatePrev whether or not to update previous answer
 */
public void updateScreen(boolean updatePrev){
  updateScreenWithInstaScrollOption(updatePrev,false);
  if (!calc.currUnitIsSet()) {
    FragmentStatePagerAdapter tempAdapter=(FragmentStatePagerAdapter)mViewPager.getAdapter();
    ConvertKeysFragment currFrag=(ConvertKeysFragment)tempAdapter.instantiateItem(mViewPager,mViewPager.getCurrentItem());
    currFrag.clearKeySelection();
  }
}","/** 
 * Updates the current and previous answers
 * @param updatePrev whether or not to update previous answer
 */
public void updateScreen(boolean updatePrev){
  updateScreenWithInstaScrollOption(updatePrev,false);
  if (!calc.isUnitIsSet()) {
    FragmentStatePagerAdapter tempAdapter=(FragmentStatePagerAdapter)mViewPager.getAdapter();
    ConvertKeysFragment currFrag=(ConvertKeysFragment)tempAdapter.instantiateItem(mViewPager,mViewPager.getCurrentItem());
    currFrag.clearKeySelection();
  }
}",0.99402390438247
35114,"/** 
 * Function that is called after user hits the ""="" key Called by calculator for solving current expression
 * @param exp
 * @return solved expression
 */
private boolean solveAndLoadIntoPrevExpression(){
  String prevEx=solve(mExpression,mMcOperate);
  if (!prevEx.equals(""String_Node_Str"")) {
    mPrevExpressions.add(new PrevExpression(prevEx));
    return true;
  }
 else   return false;
}","/** 
 * Function that is called after user hits the ""="" key Called by calculator for solving current expression
 * @param exp
 * @return solved expression
 */
private boolean solveAndLoadIntoPrevExpression(){
  String prevEx=solve(mExpression,mMcOperate);
  if (!prevEx.equals(""String_Node_Str"")) {
    mPrevExpressions.add(new PrevExpression(prevEx));
    if (isUnitIsSet()) {
      Unit toUnit=getCurrUnitType().getSelectedUnit();
      mPrevExpressions.get(mPrevExpressions.size() - 1).setQuerryUnit(toUnit);
      mPrevExpressions.get(mPrevExpressions.size() - 1).setAnswerUnit(toUnit);
    }
    return true;
  }
 else   return false;
}",0.74373795761079
35115,"@Override public void onClick(View view){
  int position=getListView().getPositionForView((View)view.getParent());
  Calculator calc=Calculator.getCalculator(getActivity());
  PrevExpression thisPrevExp=mResultArray.get(position);
  String textPassBack=""String_Node_Str"";
  int viewID=view.getId();
  if (viewID == R.id.list_item_result_textPrevQuery)   textPassBack=thisPrevExp.getQuerry();
  if (viewID == R.id.list_item_result_textPrevAnswer)   textPassBack=thisPrevExp.getAnswer();
  if (!calc.currUnitIsSet() && thisPrevExp.containsUnits()) {
    Unit unitPassBack=new Unit();
    if (viewID == R.id.list_item_result_textPrevQuery)     unitPassBack=thisPrevExp.getQuerryUnit();
    if (viewID == R.id.list_item_result_textPrevAnswer)     unitPassBack=thisPrevExp.getAnswerUnit();
    mCallback.selectUnit(unitPassBack);
  }
  calc.parseKeyPressed(textPassBack);
  mCallback.updateScreen(false);
}","@Override public void onClick(View view){
  int position=getListView().getPositionForView((View)view.getParent());
  Calculator calc=Calculator.getCalculator(getActivity());
  PrevExpression thisPrevExp=mResultArray.get(position);
  String textPassBack=""String_Node_Str"";
  int viewID=view.getId();
  if (viewID == R.id.list_item_result_textPrevQuery)   textPassBack=thisPrevExp.getQuerry();
  if (viewID == R.id.list_item_result_textPrevAnswer)   textPassBack=thisPrevExp.getAnswer();
  if (!calc.isUnitIsSet() && thisPrevExp.containsUnits()) {
    Unit unitPassBack=new Unit();
    if (viewID == R.id.list_item_result_textPrevQuery)     unitPassBack=thisPrevExp.getQuerryUnit();
    if (viewID == R.id.list_item_result_textPrevAnswer)     unitPassBack=thisPrevExp.getAnswerUnit();
    mCallback.selectUnit(unitPassBack);
  }
  calc.parseKeyPressed(textPassBack);
  mCallback.updateScreen(false);
}",0.9966666666666668
35116,"/** 
 * Helper function to reduce repeated code. Sets up the query and answer textViews
 * @param textView the TextView to setup
 * @param text the previous query or answer String
 */
private void setUpResultTextView(TextView textView,String text){
  textView.setClickable(true);
  textView.setText(text);
  textView.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      int position=getListView().getPositionForView((View)view.getParent());
      Calculator calc=Calculator.getCalculator(getActivity());
      PrevExpression thisPrevExp=mResultArray.get(position);
      String textPassBack=""String_Node_Str"";
      int viewID=view.getId();
      if (viewID == R.id.list_item_result_textPrevQuery)       textPassBack=thisPrevExp.getQuerry();
      if (viewID == R.id.list_item_result_textPrevAnswer)       textPassBack=thisPrevExp.getAnswer();
      if (!calc.currUnitIsSet() && thisPrevExp.containsUnits()) {
        Unit unitPassBack=new Unit();
        if (viewID == R.id.list_item_result_textPrevQuery)         unitPassBack=thisPrevExp.getQuerryUnit();
        if (viewID == R.id.list_item_result_textPrevAnswer)         unitPassBack=thisPrevExp.getAnswerUnit();
        mCallback.selectUnit(unitPassBack);
      }
      calc.parseKeyPressed(textPassBack);
      mCallback.updateScreen(false);
    }
  }
);
}","/** 
 * Helper function to reduce repeated code. Sets up the query and answer textViews
 * @param textView the TextView to setup
 * @param text the previous query or answer String
 */
private void setUpResultTextView(TextView textView,String text){
  textView.setClickable(true);
  textView.setText(text);
  textView.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      int position=getListView().getPositionForView((View)view.getParent());
      Calculator calc=Calculator.getCalculator(getActivity());
      PrevExpression thisPrevExp=mResultArray.get(position);
      String textPassBack=""String_Node_Str"";
      int viewID=view.getId();
      if (viewID == R.id.list_item_result_textPrevQuery)       textPassBack=thisPrevExp.getQuerry();
      if (viewID == R.id.list_item_result_textPrevAnswer)       textPassBack=thisPrevExp.getAnswer();
      if (!calc.isUnitIsSet() && thisPrevExp.containsUnits()) {
        Unit unitPassBack=new Unit();
        if (viewID == R.id.list_item_result_textPrevQuery)         unitPassBack=thisPrevExp.getQuerryUnit();
        if (viewID == R.id.list_item_result_textPrevAnswer)         unitPassBack=thisPrevExp.getAnswerUnit();
        mCallback.selectUnit(unitPassBack);
      }
      calc.parseKeyPressed(textPassBack);
      mCallback.updateScreen(false);
    }
  }
);
}",0.9977957384276268
35117,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_calc);
  mCalc=Calculator.getCalculator(this);
  mDisplay=(EditTextCursorWatcher)findViewById(R.id.textDisplay);
  mDisplay.setCalc(mCalc);
  mDisplay.disableSoftInputFromAppearing();
  FragmentManager fm=getSupportFragmentManager();
  mResultFragment=(ResultListFragment)fm.findFragmentById(R.id.resultListfragmentContainer);
  if (mResultFragment == null) {
    mResultFragment=new ResultListFragment();
    fm.beginTransaction().add(R.id.resultListfragmentContainer,mResultFragment).commit();
  }
  mViewPager=(ViewPager)findViewById(R.id.convertKeyPager);
  mViewPager.setAdapter(new FragmentStatePagerAdapter(fm){
    @Override public int getCount(){
      return 10000;
    }
    @Override public Fragment getItem(    int pos){
      System.out.println(""String_Node_Str"" + pos);
      System.out.println(""String_Node_Str"" + pos % mCalc.getUnitTypeSize());
      return ConvertKeysFragment.newInstance(pos % mCalc.getUnitTypeSize());
    }
  }
);
  mViewPager.setOnPageChangeListener(new ViewPager.OnPageChangeListener(){
    @Override public void onPageSelected(    int pos){
      mCalc.getCurrUnitType().clearUnitSelection();
      updateScreen(false);
      mCalc.setUnitTypePos(pos);
      DisplayMetrics metrics=getResources().getDisplayMetrics();
      int padLeft=(int)(metrics.density * 8f + 0.5f);
      int padRight=(int)(metrics.density * 8f + 0.5f);
      mViewPager.setPadding(padLeft,0,padRight,0);
    }
    @Override public void onPageScrolled(    int pos,    float posOffset,    int posOffsetPixels){
    }
    @Override public void onPageScrollStateChanged(    int state){
    }
  }
);
  DisplayMetrics metrics=getResources().getDisplayMetrics();
  int padLeft=(int)(metrics.density * 8f + 0.5f);
  int padRight=padLeft;
  mViewPager.setPadding(padLeft,0,padRight,0);
  mViewPager.setClipToPadding(false);
  mViewPager.setPageMargin(8);
  calcButton=new ArrayList<Button>();
  for (  int id : BUTTON_IDS) {
    Button button=(Button)findViewById(id);
    button.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View view){
        int buttonId=view.getId();
        String buttonValue=""String_Node_Str"";
switch (buttonId) {
case R.id.plus_button:
          buttonValue=""String_Node_Str"";
        break;
case R.id.minus_button:
      buttonValue=""String_Node_Str"";
    break;
case R.id.multiply_button:
  buttonValue=""String_Node_Str"";
break;
case R.id.divide_button:
buttonValue=""String_Node_Str"";
break;
case R.id.decimal_button:
buttonValue=""String_Node_Str"";
break;
case R.id.equals_button:
buttonValue=""String_Node_Str"";
break;
case R.id.ee_button:
buttonValue=""String_Node_Str"";
break;
case R.id.power_button:
buttonValue=""String_Node_Str"";
break;
case R.id.open_para_button:
buttonValue=""String_Node_Str"";
break;
case R.id.close_para_button:
buttonValue=""String_Node_Str"";
break;
case R.id.backspace_button:
buttonValue=""String_Node_Str"";
break;
default :
for (int i=0; i < 10; i++) if (buttonId == BUTTON_IDS[i]) buttonValue=String.valueOf(i);
}
numButtonPressed(buttonValue);
}
}
);
calcButton.add(button);
}
ImageButton backspaceButton=(ImageButton)findViewById(R.id.backspace_button);
backspaceButton.setOnTouchListener(new View.OnTouchListener(){
private Handler mColorHoldHandler;
private View mView;
@Override public boolean onTouch(View view,MotionEvent event){
switch (event.getAction()) {
case MotionEvent.ACTION_DOWN:
mView=view;
mInc=0;
if (mColorHoldHandler != null) return true;
mColorHoldHandler=new Handler();
mColorHoldHandler.postDelayed(mBackspaceColor,10);
break;
case MotionEvent.ACTION_UP:
if (mColorHoldHandler == null) return true;
numButtonPressed(""String_Node_Str"");
view.setBackgroundColor(getResources().getColor(R.color.op_button_normal));
mColorHoldHandler.removeCallbacks(mBackspaceColor);
mColorHoldHandler=null;
break;
}
return false;
}
private int mInc;
Runnable mBackspaceColor=new Runnable(){
private int mStartColor=getResources().getColor(R.color.op_button_pressed);
private int mEndColor=getResources().getColor(R.color.backspace_button_held);
private static final int NUM_COLOR_CHANGES=10;
private static final int BACKSPACE_HOLD_TIME=500;
@Override public void run(){
if (mInc == -1) {
mView.setBackgroundColor(mEndColor);
return;
}
if (mInc == NUM_COLOR_CHANGES) {
numButtonPressed(""String_Node_Str"");
mView.setBackgroundColor(Color.argb(255,0,0,0));
mColorHoldHandler.postDelayed(this,100);
mInc=-1;
return;
}
mColorHoldHandler.postDelayed(this,BACKSPACE_HOLD_TIME / NUM_COLOR_CHANGES);
float deltaRed=(float)Color.red(mStartColor) + ((float)Color.red(mEndColor) - (float)Color.red(mStartColor)) * ((float)mInc * (float)mInc * (float)mInc) / ((float)NUM_COLOR_CHANGES * (float)NUM_COLOR_CHANGES * (float)NUM_COLOR_CHANGES);
int deltaGreen=Color.green(mStartColor) + ((Color.green(mEndColor) - Color.green(mStartColor)) * mInc) / NUM_COLOR_CHANGES;
int deltaBlue=Color.blue(mStartColor) + ((Color.blue(mEndColor) - Color.blue(mStartColor)) * mInc) / NUM_COLOR_CHANGES;
mView.setBackgroundColor(Color.argb(255,(int)deltaRed,deltaGreen,deltaBlue));
System.out.println(""String_Node_Str"" + deltaRed);
System.out.println(""String_Node_Str"" + ((Color.red(mEndColor) - Color.red(mStartColor)) * mInc ^ 3));
System.out.println(""String_Node_Str"" + mInc);
mInc++;
}
}
;
}
);
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_calc);
  mCalc=Calculator.getCalculator(this);
  mDisplay=(EditTextCursorWatcher)findViewById(R.id.textDisplay);
  mDisplay.setCalc(mCalc);
  mDisplay.disableSoftInputFromAppearing();
  mDisplay.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      mCalc.setSolved(false);
      mDisplay.setCursorVisible(true);
    }
  }
);
  FragmentManager fm=getSupportFragmentManager();
  mResultFragment=(ResultListFragment)fm.findFragmentById(R.id.resultListfragmentContainer);
  if (mResultFragment == null) {
    mResultFragment=new ResultListFragment();
    fm.beginTransaction().add(R.id.resultListfragmentContainer,mResultFragment).commit();
  }
  mViewPager=(ViewPager)findViewById(R.id.convertKeyPager);
  mViewPager.setAdapter(new FragmentStatePagerAdapter(fm){
    @Override public int getCount(){
      return 10000;
    }
    @Override public Fragment getItem(    int pos){
      System.out.println(""String_Node_Str"" + pos);
      System.out.println(""String_Node_Str"" + pos % mCalc.getUnitTypeSize());
      return ConvertKeysFragment.newInstance(pos % mCalc.getUnitTypeSize());
    }
  }
);
  mViewPager.setOnPageChangeListener(new ViewPager.OnPageChangeListener(){
    @Override public void onPageSelected(    int pos){
      mCalc.getCurrUnitType().clearUnitSelection();
      updateScreen(false);
      mCalc.setUnitTypePos(pos);
      DisplayMetrics metrics=getResources().getDisplayMetrics();
      int padLeft=(int)(metrics.density * 8f + 0.5f);
      int padRight=(int)(metrics.density * 8f + 0.5f);
      mViewPager.setPadding(padLeft,0,padRight,0);
    }
    @Override public void onPageScrolled(    int pos,    float posOffset,    int posOffsetPixels){
    }
    @Override public void onPageScrollStateChanged(    int state){
    }
  }
);
  DisplayMetrics metrics=getResources().getDisplayMetrics();
  int padLeft=(int)(metrics.density * 8f + 0.5f);
  int padRight=padLeft;
  mViewPager.setPadding(padLeft,0,padRight,0);
  mViewPager.setClipToPadding(false);
  mViewPager.setPageMargin(8);
  calcButton=new ArrayList<Button>();
  for (  int id : BUTTON_IDS) {
    Button button=(Button)findViewById(id);
    button.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View view){
        int buttonId=view.getId();
        String buttonValue=""String_Node_Str"";
switch (buttonId) {
case R.id.plus_button:
          buttonValue=""String_Node_Str"";
        break;
case R.id.minus_button:
      buttonValue=""String_Node_Str"";
    break;
case R.id.multiply_button:
  buttonValue=""String_Node_Str"";
break;
case R.id.divide_button:
buttonValue=""String_Node_Str"";
break;
case R.id.decimal_button:
buttonValue=""String_Node_Str"";
break;
case R.id.equals_button:
buttonValue=""String_Node_Str"";
break;
case R.id.ee_button:
buttonValue=""String_Node_Str"";
break;
case R.id.power_button:
buttonValue=""String_Node_Str"";
break;
case R.id.open_para_button:
buttonValue=""String_Node_Str"";
break;
case R.id.close_para_button:
buttonValue=""String_Node_Str"";
break;
case R.id.backspace_button:
buttonValue=""String_Node_Str"";
break;
default :
for (int i=0; i < 10; i++) if (buttonId == BUTTON_IDS[i]) buttonValue=String.valueOf(i);
}
numButtonPressed(buttonValue);
}
}
);
calcButton.add(button);
}
ImageButton backspaceButton=(ImageButton)findViewById(R.id.backspace_button);
backspaceButton.setOnTouchListener(new View.OnTouchListener(){
private Handler mColorHoldHandler;
private View mView;
@Override public boolean onTouch(View view,MotionEvent event){
switch (event.getAction()) {
case MotionEvent.ACTION_DOWN:
mView=view;
mInc=0;
if (mColorHoldHandler != null) return true;
mColorHoldHandler=new Handler();
mColorHoldHandler.postDelayed(mBackspaceColor,10);
break;
case MotionEvent.ACTION_UP:
if (mColorHoldHandler == null) return true;
numButtonPressed(""String_Node_Str"");
view.setBackgroundColor(getResources().getColor(R.color.op_button_normal));
mColorHoldHandler.removeCallbacks(mBackspaceColor);
mColorHoldHandler=null;
break;
}
return false;
}
private int mInc;
Runnable mBackspaceColor=new Runnable(){
private int mStartColor=getResources().getColor(R.color.op_button_pressed);
private int mEndColor=getResources().getColor(R.color.backspace_button_held);
private static final int NUM_COLOR_CHANGES=10;
private static final int BACKSPACE_HOLD_TIME=500;
@Override public void run(){
if (mInc == -1) {
mView.setBackgroundColor(mEndColor);
return;
}
if (mInc == NUM_COLOR_CHANGES) {
numButtonPressed(""String_Node_Str"");
mView.setBackgroundColor(Color.argb(255,0,0,0));
mColorHoldHandler.postDelayed(this,100);
mInc=-1;
return;
}
mColorHoldHandler.postDelayed(this,BACKSPACE_HOLD_TIME / NUM_COLOR_CHANGES);
float deltaRed=(float)Color.red(mStartColor) + ((float)Color.red(mEndColor) - (float)Color.red(mStartColor)) * ((float)mInc * (float)mInc * (float)mInc) / ((float)NUM_COLOR_CHANGES * (float)NUM_COLOR_CHANGES * (float)NUM_COLOR_CHANGES);
int deltaGreen=Color.green(mStartColor) + ((Color.green(mEndColor) - Color.green(mStartColor)) * mInc) / NUM_COLOR_CHANGES;
int deltaBlue=Color.blue(mStartColor) + ((Color.blue(mEndColor) - Color.blue(mStartColor)) * mInc) / NUM_COLOR_CHANGES;
mView.setBackgroundColor(Color.argb(255,(int)deltaRed,deltaGreen,deltaBlue));
System.out.println(""String_Node_Str"" + deltaRed);
System.out.println(""String_Node_Str"" + ((Color.red(mEndColor) - Color.red(mStartColor)) * mInc ^ 3));
System.out.println(""String_Node_Str"" + mInc);
mInc++;
}
}
;
}
);
}",0.983016983016983
35118,"/** 
 * This function will try to add a number or operator, or entire prevExpression to the current expression Note that there is lots of error checking to be sure user can't entire an invalid operator/number
 * @param sKey should only be single vaild number or operator character, or longer previous expressions
 */
public void keyPresses(String sKey){
  if (sKey.length() > 1) {
    if (mSolved)     replaceExpression(sKey);
 else     insertAtSelection(sKey);
    mSolved=false;
    return;
  }
  if (sKey.matches(regexInvalidChars))   throw new IllegalArgumentException(""String_Node_Str"");
  if (sKey.matches(regexInvalidStartChar) && (lastNumb().equals(""String_Node_Str"") || expresssionToSelection().matches(""String_Node_Str"")))   return;
  if (mSolved && sKey.matches(""String_Node_Str""))   clearExpression();
  if (sKey.equals(""String_Node_Str"") && expresssionToSelection().matches(""String_Node_Str""))   sKey=""String_Node_Str"" + sKey;
  if (sKey.matches(""String_Node_Str"") && expresssionToSelection().matches(""String_Node_Str""))   sKey=""String_Node_Str"" + sKey;
  if (sKey.equals(""String_Node_Str""))   if (numOpenPara() <= 0)   addToExpressionStart(""String_Node_Str"");
  if (sKey.equals(""String_Node_Str"") && lastNumb().matches(""String_Node_Str""))   if (!expresssionToSelection().matches(""String_Node_Str"" + regexAnyValidOperator + ""String_Node_Str""))   return;
  if (sKey.equals(""String_Node_Str"") && (lastNumb().contains(""String_Node_Str"") || expresssionToSelection().matches(""String_Node_Str"" + regexAnyValidOperator + ""String_Node_Str"")))   return;
  if (lastNumb().matches(""String_Node_Str""))   if (sKey.matches(""String_Node_Str""))   return;
  if (sKey.matches(regexAnyOperatorOrE) && lastNumb().equals(""String_Node_Str""))   return;
  if (sKey.matches(""String_Node_Str"") && expresssionToSelection().matches(""String_Node_Str""))   return;
  if (sKey.matches(regexAnyValidOperator) && expresssionToSelection().matches(""String_Node_Str"" + regexAnyValidOperator + regexAnyValidOperator+ ""String_Node_Str"")) {
    backspaceAtSelection();
    backspaceAtSelection();
  }
 else   if (sKey.matches(regexInvalidStartChar) && expresssionToSelection().matches(""String_Node_Str"" + regexAnyValidOperator + ""String_Node_Str"")) {
    backspaceAtSelection();
  }
  insertAtSelection(sKey);
  mSolved=false;
}","/** 
 * This function will try to add a number or operator, or entire prevExpression to the current expression Note that there is lots of error checking to be sure user can't entire an invalid operator/number
 * @param sKey should only be single vaild number or operator character, or longer previous expressions
 */
public void keyPresses(String sKey){
  if (sKey.length() > 1) {
    if (mSolved)     replaceExpression(sKey);
 else     insertAtSelection(sKey);
    mSolved=false;
    return;
  }
  if (sKey.matches(regexInvalidChars))   throw new IllegalArgumentException(""String_Node_Str"");
  if (sKey.matches(regexInvalidStartChar) && (lastNumb().equals(""String_Node_Str"") || expresssionToSelection().matches(""String_Node_Str"")))   return;
  if (mSolved && sKey.matches(""String_Node_Str""))   clearExpression();
  if (sKey.equals(""String_Node_Str"") && expresssionToSelection().matches(""String_Node_Str""))   sKey=""String_Node_Str"" + sKey;
  if (sKey.matches(""String_Node_Str"") && expresssionToSelection().matches(""String_Node_Str""))   sKey=""String_Node_Str"" + sKey;
  if (sKey.equals(""String_Node_Str""))   if (numOpenPara() <= 0)   addToExpressionStart(""String_Node_Str"");
  if (sKey.equals(""String_Node_Str"") && lastNumb().matches(""String_Node_Str""))   if (!expresssionToSelection().matches(""String_Node_Str"" + regexAnyValidOperator + ""String_Node_Str""))   return;
  if (sKey.equals(""String_Node_Str"") && (lastNumb().contains(""String_Node_Str"") || expresssionToSelection().matches(""String_Node_Str"" + regexAnyValidOperator + ""String_Node_Str"")))   return;
  if (lastNumb().matches(""String_Node_Str""))   if (sKey.matches(""String_Node_Str""))   return;
  if (sKey.matches(regexAnyOperatorOrE) && lastNumb().equals(""String_Node_Str""))   return;
  if (sKey.matches(""String_Node_Str"") && expresssionToSelection().matches(""String_Node_Str""))   return;
  if (sKey.matches(regexAnyValidOperator) && expresssionToSelection().matches(""String_Node_Str"" + regexAnyValidOperator + regexAnyValidOperator+ ""String_Node_Str"")) {
    if (getSelectionEnd() > getSelectionStart())     backspaceAtSelection();
    backspaceAtSelection();
    backspaceAtSelection();
  }
 else   if (sKey.matches(regexInvalidStartChar) && expresssionToSelection().matches(""String_Node_Str"" + regexAnyValidOperator + ""String_Node_Str"")) {
    if (getSelectionEnd() > getSelectionStart())     backspaceAtSelection();
    backspaceAtSelection();
  }
  insertAtSelection(sKey);
  mSolved=false;
}",0.9676198486122792
35119,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_calc);
  calc=Calculator.getCalculator(this);
  mDisplay=(EditTextCursorWatcher)findViewById(R.id.textDisplay);
  mDisplay.setCalc(calc);
  mDisplay.disableSoftInputFromAppearing();
  FragmentManager fm=getSupportFragmentManager();
  Fragment resultFragment=fm.findFragmentById(R.id.resultListfragmentContainer);
  if (resultFragment == null) {
    resultFragment=new ResultListFragment();
    fm.beginTransaction().add(R.id.resultListfragmentContainer,resultFragment).commit();
  }
  mViewPager=(ViewPager)findViewById(R.id.convertKeyPager);
  mViewPager.setAdapter(new FragmentStatePagerAdapter(fm){
    @Override public int getCount(){
      return calc.getUnitTypeSize();
    }
    @Override public Fragment getItem(    int pos){
      return ConvertKeysFragment.newInstance(pos);
    }
  }
);
  mViewPager.setPageMargin(10);
  mViewPager.setOnPageChangeListener(new ViewPager.OnPageChangeListener(){
    @Override public void onPageSelected(    int pos){
      calc.getCurrUnitType().clearUnitSelection();
      updateScreen(false);
      calc.setUnitTypePos(pos);
    }
    @Override public void onPageScrolled(    int pos,    float posOffset,    int posOffsetPixels){
    }
    @Override public void onPageScrollStateChanged(    int state){
    }
  }
);
  calcButton=new ArrayList<Button>();
  for (  int id : BUTTON_IDS) {
    Button button=(Button)findViewById(id);
    button.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View view){
        int buttonId=view.getId();
        String buttonValue=""String_Node_Str"";
switch (buttonId) {
case R.id.plus_button:
          buttonValue=""String_Node_Str"";
        break;
case R.id.minus_button:
      buttonValue=""String_Node_Str"";
    break;
case R.id.multiply_button:
  buttonValue=""String_Node_Str"";
break;
case R.id.divide_button:
buttonValue=""String_Node_Str"";
break;
case R.id.decimal_button:
buttonValue=""String_Node_Str"";
break;
case R.id.equals_button:
buttonValue=""String_Node_Str"";
break;
case R.id.ee_button:
buttonValue=""String_Node_Str"";
break;
case R.id.power_button:
buttonValue=""String_Node_Str"";
break;
case R.id.open_para_button:
buttonValue=""String_Node_Str"";
break;
case R.id.close_para_button:
buttonValue=""String_Node_Str"";
break;
case R.id.backspace_button:
buttonValue=""String_Node_Str"";
break;
default :
for (int i=0; i < 10; i++) if (buttonId == BUTTON_IDS[i]) buttonValue=String.valueOf(i);
}
numButtonPressed(buttonValue);
}
}
);
calcButton.add(button);
}
ImageButton backspaceButton=(ImageButton)findViewById(R.id.backspace_button);
backspaceButton.setOnTouchListener(new View.OnTouchListener(){
private Handler mHandler;
@Override public boolean onTouch(View view,MotionEvent event){
switch (event.getAction()) {
case MotionEvent.ACTION_DOWN:
if (mHandler != null) return true;
mHandler=new Handler();
mHandler.postDelayed(mBackspaceRepeat,400);
numButtonPressed(""String_Node_Str"");
break;
case MotionEvent.ACTION_UP:
if (mHandler == null) return true;
mHandler.removeCallbacks(mBackspaceRepeat);
mHandler=null;
break;
}
return false;
}
Runnable mBackspaceRepeat=new Runnable(){
@Override public void run(){
mHandler.postDelayed(this,100);
numButtonPressed(""String_Node_Str"");
}
}
;
}
);
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_calc);
  mCalc=Calculator.getCalculator(this);
  mDisplay=(EditTextCursorWatcher)findViewById(R.id.textDisplay);
  mDisplay.setCalc(mCalc);
  mDisplay.disableSoftInputFromAppearing();
  FragmentManager fm=getSupportFragmentManager();
  Fragment resultFragment=fm.findFragmentById(R.id.resultListfragmentContainer);
  if (resultFragment == null) {
    resultFragment=new ResultListFragment();
    fm.beginTransaction().add(R.id.resultListfragmentContainer,resultFragment).commit();
  }
  mViewPager=(ViewPager)findViewById(R.id.convertKeyPager);
  mViewPager.setAdapter(new FragmentStatePagerAdapter(fm){
    @Override public int getCount(){
      return mCalc.getUnitTypeSize();
    }
    @Override public Fragment getItem(    int pos){
      return ConvertKeysFragment.newInstance(pos);
    }
  }
);
  mViewPager.setPageMargin(10);
  mViewPager.setOnPageChangeListener(new ViewPager.OnPageChangeListener(){
    @Override public void onPageSelected(    int pos){
      mCalc.getCurrUnitType().clearUnitSelection();
      updateScreen(false);
      mCalc.setUnitTypePos(pos);
    }
    @Override public void onPageScrolled(    int pos,    float posOffset,    int posOffsetPixels){
    }
    @Override public void onPageScrollStateChanged(    int state){
    }
  }
);
  calcButton=new ArrayList<Button>();
  for (  int id : BUTTON_IDS) {
    Button button=(Button)findViewById(id);
    button.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View view){
        int buttonId=view.getId();
        String buttonValue=""String_Node_Str"";
switch (buttonId) {
case R.id.plus_button:
          buttonValue=""String_Node_Str"";
        break;
case R.id.minus_button:
      buttonValue=""String_Node_Str"";
    break;
case R.id.multiply_button:
  buttonValue=""String_Node_Str"";
break;
case R.id.divide_button:
buttonValue=""String_Node_Str"";
break;
case R.id.decimal_button:
buttonValue=""String_Node_Str"";
break;
case R.id.equals_button:
buttonValue=""String_Node_Str"";
break;
case R.id.ee_button:
buttonValue=""String_Node_Str"";
break;
case R.id.power_button:
buttonValue=""String_Node_Str"";
break;
case R.id.open_para_button:
buttonValue=""String_Node_Str"";
break;
case R.id.close_para_button:
buttonValue=""String_Node_Str"";
break;
case R.id.backspace_button:
buttonValue=""String_Node_Str"";
break;
default :
for (int i=0; i < 10; i++) if (buttonId == BUTTON_IDS[i]) buttonValue=String.valueOf(i);
}
numButtonPressed(buttonValue);
}
}
);
calcButton.add(button);
}
ImageButton backspaceButton=(ImageButton)findViewById(R.id.backspace_button);
backspaceButton.setOnTouchListener(new View.OnTouchListener(){
private Handler mHandler;
@Override public boolean onTouch(View view,MotionEvent event){
switch (event.getAction()) {
case MotionEvent.ACTION_DOWN:
if (mHandler != null) return true;
mHandler=new Handler();
mHandler.postDelayed(mBackspaceRepeat,400);
numButtonPressed(""String_Node_Str"");
break;
case MotionEvent.ACTION_UP:
if (mHandler == null) return true;
mHandler.removeCallbacks(mBackspaceRepeat);
mHandler=null;
break;
}
return false;
}
Runnable mBackspaceRepeat=new Runnable(){
@Override public void run(){
mHandler.postDelayed(this,100);
numButtonPressed(""String_Node_Str"");
}
}
;
}
);
}",0.9977635306396302
35120,"@Override public void onPageSelected(int pos){
  calc.getCurrUnitType().clearUnitSelection();
  updateScreen(false);
  calc.setUnitTypePos(pos);
}","@Override public void onPageSelected(int pos){
  mCalc.getCurrUnitType().clearUnitSelection();
  updateScreen(false);
  mCalc.setUnitTypePos(pos);
}",0.979591836734694
35121,"@Override public void onResume(){
  super.onResume();
  if (calc.toString().equals(""String_Node_Str"") && calc.getPrevExpressions().size() == 0)   mDisplay.setText(R.string.app_name);
 else   updateScreenWithInstaScrollOption(true,true);
}","@Override public void onResume(){
  super.onResume();
  if (mCalc.toString().equals(""String_Node_Str"") && mCalc.getPrevExpressions().size() == 0)   mDisplay.setText(R.string.app_name);
 else   updateScreenWithInstaScrollOption(true,true);
}",0.98744769874477
35122,"/** 
 * Updates the current and previous answers
 * @param updatePrev whether or not to update previous answer
 */
public void updateScreen(boolean updatePrev){
  updateScreenWithInstaScrollOption(updatePrev,false);
  if (!calc.isUnitIsSet()) {
    FragmentStatePagerAdapter tempAdapter=(FragmentStatePagerAdapter)mViewPager.getAdapter();
    ConvertKeysFragment currFrag=(ConvertKeysFragment)tempAdapter.instantiateItem(mViewPager,mViewPager.getCurrentItem());
    currFrag.clearKeySelection();
  }
}","/** 
 * Updates the current and previous answers
 * @param updatePrev whether or not to update previous answer
 */
public void updateScreen(boolean updatePrev){
  updateScreenWithInstaScrollOption(updatePrev,false);
  if (!mCalc.isUnitIsSet()) {
    FragmentStatePagerAdapter tempAdapter=(FragmentStatePagerAdapter)mViewPager.getAdapter();
    ConvertKeysFragment currFrag=(ConvertKeysFragment)tempAdapter.instantiateItem(mViewPager,mViewPager.getCurrentItem());
    currFrag.clearKeySelection();
  }
}",0.9970089730807578
35123,"private void updateScreenWithInstaScrollOption(boolean updatePrev,boolean instaScroll){
  int selStart=calc.getSelectionStart();
  int selEnd=calc.getSelectionEnd();
  Log.d(""String_Node_Str"",""String_Node_Str"");
  mDisplay.setText(calc.toString());
  Log.d(""String_Node_Str"",""String_Node_Str"");
  mDisplay.setSelection(selStart,selEnd);
  if (updatePrev) {
    FragmentManager fm=getSupportFragmentManager();
    ResultListFragment prevResultFragment=(ResultListFragment)fm.findFragmentById(R.id.resultListfragmentContainer);
    prevResultFragment.refresh(instaScroll);
  }
}","private void updateScreenWithInstaScrollOption(boolean updatePrev,boolean instaScroll){
  int selStart=mCalc.getSelectionStart();
  int selEnd=mCalc.getSelectionEnd();
  Log.d(""String_Node_Str"",""String_Node_Str"");
  mDisplay.setText(mCalc.toString());
  Log.d(""String_Node_Str"",""String_Node_Str"");
  mDisplay.setSelection(selStart,selEnd);
  if (selStart == mCalc.toString().length())   mDisplay.setCursorVisible(false);
 else   mDisplay.setCursorVisible(true);
  if (updatePrev) {
    FragmentManager fm=getSupportFragmentManager();
    ResultListFragment prevResultFragment=(ResultListFragment)fm.findFragmentById(R.id.resultListfragmentContainer);
    prevResultFragment.refresh(instaScroll);
  }
}",0.8974158183241974
35124,"public void numButtonPressed(String keyPressed){
  calc.parseKeyPressed(keyPressed);
  updateScreen(keyPressed.equals(""String_Node_Str""));
}","public void numButtonPressed(String keyPressed){
  mCalc.parseKeyPressed(keyPressed);
  updateScreen(keyPressed.equals(""String_Node_Str""));
}",0.98932384341637
35125,"@Override public int getCount(){
  return calc.getUnitTypeSize();
}","@Override public int getCount(){
  return mCalc.getUnitTypeSize();
}",0.9777777777777776
35126,"@Override protected void onSelectionChanged(int selStart,int selEnd){
  if (mCalc != null)   mCalc.setSelection(selStart,selEnd);
  Log.d(""String_Node_Str"",""String_Node_Str"" + String.valueOf(selStart));
}","@Override protected void onSelectionChanged(int selStart,int selEnd){
  if (mCalc != null) {
    mCalc.setSelection(selStart,selEnd);
    if (selStart == mCalc.toString().length())     setCursorVisible(false);
 else     setCursorVisible(true);
  }
}",0.6225165562913907
35127,"public void setSelection(int selectionStart,int selectionEnd){
  if (selectionEnd > mExpression.length() || selectionStart > mExpression.length())   throw new IllegalArgumentException(""String_Node_Str"");
  if (selectionEnd < selectionStart)   throw new IllegalArgumentException(""String_Node_Str"");
  mSelectionStart=selectionStart;
  mSelectionEnd=selectionEnd;
}","public void setSelection(int selectionStart,int selectionEnd){
  if (selectionEnd > mExpression.length() || selectionStart > mExpression.length())   throw new IllegalArgumentException(""String_Node_Str"");
  if (selectionEnd < selectionStart) {
    int temp=selectionEnd;
    selectionEnd=selectionStart;
    selectionStart=temp;
  }
  mSelectionStart=selectionStart;
  mSelectionEnd=selectionEnd;
}",0.6368421052631579
35128,"/** 
 * Passed a key from caculator (num/op/back/clear/eq) and distributes it to its proper function
 * @param sKey is either single character (but still a String) or a string from prevExpression
 */
public void parseKeyPressed(String sKey){
  if (expression.matches(regexInvalidChars))   expression=""String_Node_Str"";
  if (sKey.equals(""String_Node_Str"")) {
    solve();
    roundExpressionResult();
    expression=cleanNum(expression);
  }
 else   if (sKey.equals(""String_Node_Str""))   backspace();
 else   if (sKey.equals(""String_Node_Str""))   clear();
 else   addToExpression(sKey);
}","/** 
 * Passed a key from calculator (num/op/back/clear/eq) and distributes it to its proper function
 * @param sKey is either single character (but still a String) or a string from prevExpression
 */
public void parseKeyPressed(String sKey){
  if (expression.matches(regexInvalidChars))   expression=""String_Node_Str"";
  if (sKey.equals(""String_Node_Str"")) {
    String prevExp=solve();
    if (prevExp.equals(""String_Node_Str""))     return;
    roundAndCleanExpression();
    prevExpressions.add(prevExp + ""String_Node_Str"" + expression);
  }
 else   if (sKey.equals(""String_Node_Str""))   backspace();
 else   if (sKey.equals(""String_Node_Str""))   clear();
 else   addToExpression(sKey);
}",0.8303362001563722
35129,"/** 
 * Function used to convert from one unit to another
 * @param fromValue is standardized value of the unit being converted from
 * @param toValue is standardized value of the unit being converted to
 */
public void convertFromTo(double fromValue,double toValue){
  if (expression.equals(""String_Node_Str"") || expression.matches(regexInvalidChars))   return;
  solve();
  try {
    BigDecimal bdToUnit=new BigDecimal(toValue,mcOperate);
    BigDecimal bdCurrUnit=new BigDecimal(fromValue,mcOperate);
    BigDecimal bdResult=new BigDecimal(expression,mcOperate);
    expression=bdResult.multiply(bdCurrUnit.divide(bdToUnit,mcOperate),mcOperate).toString();
  }
 catch (  NumberFormatException e) {
    expression=strSyntaxError;
    return;
  }
  roundExpressionResult();
  expression=cleanNum(expression);
}","/** 
 * Function used to convert from one unit to another
 * @param fromValue is standardized value of the unit being converted from
 * @param toValue is standardized value of the unit being converted to
 */
public void convertFromTo(double fromValue,double toValue,String fromName,String toName){
  if (expression.equals(""String_Node_Str"") || expression.matches(regexInvalidChars))   return;
  String prevExp=solve();
  if (prevExp.equals(""String_Node_Str""))   return;
  try {
    BigDecimal bdToUnit=new BigDecimal(toValue,mcOperate);
    BigDecimal bdCurrUnit=new BigDecimal(fromValue,mcOperate);
    BigDecimal bdResult=new BigDecimal(expression,mcOperate);
    expression=bdResult.multiply(bdCurrUnit.divide(bdToUnit,mcOperate),mcOperate).toString();
  }
 catch (  NumberFormatException e) {
    expression=strSyntaxError;
    return;
  }
  roundAndCleanExpression();
  prevExpressions.add(prevExp + ""String_Node_Str"" + fromName+ ""String_Node_Str""+ expression+ ""String_Node_Str""+ toName);
}",0.8449612403100775
35130,"/** 
 * Function that is called after user hits the ""="" key
 */
private void solve(){
  expression=expression.replaceAll(regexAnyOperatorOrE + ""String_Node_Str"",""String_Node_Str"");
  if (expression.equals(""String_Node_Str""))   return;
  int numCloseParaToAdd=numOpenPara();
  for (int i=0; i < numCloseParaToAdd; i++) {
    expression=expression + ""String_Node_Str"";
  }
  String prevExp=expression;
  if (!precResult.equals(""String_Node_Str"")) {
    BigDecimal lessPrec=new BigDecimal(precResult,mcDisp);
    String lessPrecCleaned=cleanNum(lessPrec.toString());
    if (firstNumb().equals(lessPrecCleaned)) {
      expression=expression.replaceFirst(regexGroupedNumber,precResult.toString());
    }
  }
  expression=collapsePara(expression);
  String prevAns=expression;
  prevExpressions.add(prevExp + ""String_Node_Str"" + prevAns);
  solved=true;
}","/** 
 * Function that is called after user hits the ""="" key Cleans off the expression, adds missing parentheses, then loads in more accurate result values if possible into expression Iterates over expression using PEMAS order of operations, then sets solved flag to true
 * @return the cleaned previous expression for loading into prevExpression
 */
private String solve(){
  expression=expression.replaceAll(regexAnyOperatorOrE + ""String_Node_Str"",""String_Node_Str"");
  if (expression.equals(""String_Node_Str""))   return ""String_Node_Str"";
  int numCloseParaToAdd=numOpenPara();
  for (int i=0; i < numCloseParaToAdd; i++) {
    expression=expression + ""String_Node_Str"";
  }
  String prevExp=expression;
  if (!precResult.equals(""String_Node_Str"")) {
    BigDecimal lessPrec=new BigDecimal(precResult,mcDisp);
    String lessPrecCleaned=cleanNum(lessPrec.toString());
    if (firstNumb().equals(lessPrecCleaned)) {
      expression=expression.replaceFirst(regexGroupedNumber,precResult.toString());
    }
  }
  expression=collapsePara(expression);
  solved=true;
  return prevExp;
}",0.7803617571059431
35131,"/** 
 * Used to gather values to convert to and from and then call parent class to do raw conversion Convert from unit is specified by the current Unit
 * @param newUnitPos is the Unit position to convert to
 */
private void convert(int newUnitPos){
  double fromValue=mUnitArray.get(mCurrUnitPos).getValue();
  double toValue=mUnitArray.get(newUnitPos).getValue();
  mCallback.convertFromTo(fromValue,toValue);
}","/** 
 * Used to gather values to convert to and from and then call parent class to do raw conversion Convert from unit is specified by the current Unit
 * @param newUnitPos is the Unit position to convert to
 */
private void convert(int newUnitPos){
  double fromValue=mUnitArray.get(mCurrUnitPos).getValue();
  String fromName=mUnitArray.get(mCurrUnitPos).getDispName();
  double toValue=mUnitArray.get(newUnitPos).getValue();
  String toName=mUnitArray.get(newUnitPos).getDispName();
  mCallback.convertFromTo(fromValue,toValue,fromName,toName);
}",0.8586278586278586
35132,"public void convertFromTo(double fromValue,double toValue);","public void convertFromTo(double fromValue,double toValue,String fromName,String toName);",0.7972972972972973
35133,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_calc);
  calc=Calculator.getCalculator(this);
  mDisplay=(TextView)findViewById(R.id.textDisplay);
  FragmentManager fm=getSupportFragmentManager();
  Fragment resultFragment=fm.findFragmentById(R.id.resultListfragmentContainer);
  if (resultFragment == null) {
    resultFragment=new ResultListFragment();
    fm.beginTransaction().add(R.id.resultListfragmentContainer,resultFragment).commit();
  }
  mViewPager=(ViewPager)findViewById(R.id.convertKeyPager);
  mViewPager.setAdapter(new FragmentStatePagerAdapter(fm){
    @Override public int getCount(){
      return calc.getUnitTypeSize();
    }
    @Override public Fragment getItem(    int pos){
      return ConvertKeysFragment.newInstance(pos);
    }
  }
);
  mViewPager.setPageMargin(10);
  calcButton=new ArrayList<Button>();
  for (  int id : BUTTON_IDS) {
    Button button=(Button)findViewById(id);
    button.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View view){
        int buttonId=view.getId();
        String buttonValue=""String_Node_Str"";
switch (buttonId) {
case R.id.plus_button:
          buttonValue=""String_Node_Str"";
        break;
case R.id.minus_button:
      buttonValue=""String_Node_Str"";
    break;
case R.id.multiply_button:
  buttonValue=""String_Node_Str"";
break;
case R.id.divide_button:
buttonValue=""String_Node_Str"";
break;
case R.id.decimal_button:
buttonValue=""String_Node_Str"";
break;
case R.id.equals_button:
buttonValue=""String_Node_Str"";
break;
case R.id.ee_button:
buttonValue=""String_Node_Str"";
break;
case R.id.power_button:
buttonValue=""String_Node_Str"";
break;
case R.id.open_para_button:
buttonValue=""String_Node_Str"";
break;
case R.id.close_para_button:
buttonValue=""String_Node_Str"";
break;
case R.id.backspace_button:
buttonValue=""String_Node_Str"";
break;
default :
for (int i=0; i < 10; i++) if (buttonId == BUTTON_IDS[i]) buttonValue=String.valueOf(i);
}
numButtonPressed(buttonValue);
}
}
);
calcButton.add(button);
}
ImageButton backspaceButton=(ImageButton)findViewById(R.id.backspace_button);
backspaceButton.setOnTouchListener(new View.OnTouchListener(){
private Handler mHandler;
@Override public boolean onTouch(View view,MotionEvent event){
switch (event.getAction()) {
case MotionEvent.ACTION_DOWN:
if (mHandler != null) return true;
mHandler=new Handler();
mHandler.postDelayed(mBackspaceRepeat,400);
numButtonPressed(""String_Node_Str"");
break;
case MotionEvent.ACTION_UP:
if (mHandler == null) return true;
mHandler.removeCallbacks(mBackspaceRepeat);
mHandler=null;
break;
}
return false;
}
Runnable mBackspaceRepeat=new Runnable(){
@Override public void run(){
mHandler.postDelayed(this,100);
numButtonPressed(""String_Node_Str"");
}
}
;
}
);
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_calc);
  calc=Calculator.getCalculator(this);
  mDisplay=(TextView)findViewById(R.id.textDisplay);
  FragmentManager fm=getSupportFragmentManager();
  Fragment resultFragment=fm.findFragmentById(R.id.resultListfragmentContainer);
  if (resultFragment == null) {
    resultFragment=new ResultListFragment();
    fm.beginTransaction().add(R.id.resultListfragmentContainer,resultFragment).commit();
  }
  mViewPager=(ViewPager)findViewById(R.id.convertKeyPager);
  mViewPager.setAdapter(new FragmentStatePagerAdapter(fm){
    @Override public int getCount(){
      return calc.getUnitTypeSize();
    }
    @Override public Fragment getItem(    int pos){
      return ConvertKeysFragment.newInstance(pos);
    }
  }
);
  mViewPager.setPageMargin(10);
  mViewPager.setOnPageChangeListener(new ViewPager.OnPageChangeListener(){
    @Override public void onPageSelected(    int pos){
      calc.getCurrUnitType().clearUnitSelection();
      updateScreen(false);
      calc.setUnitTypePos(pos);
    }
    @Override public void onPageScrolled(    int pos,    float posOffset,    int posOffsetPixels){
    }
    @Override public void onPageScrollStateChanged(    int state){
    }
  }
);
  calcButton=new ArrayList<Button>();
  for (  int id : BUTTON_IDS) {
    Button button=(Button)findViewById(id);
    button.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View view){
        int buttonId=view.getId();
        String buttonValue=""String_Node_Str"";
switch (buttonId) {
case R.id.plus_button:
          buttonValue=""String_Node_Str"";
        break;
case R.id.minus_button:
      buttonValue=""String_Node_Str"";
    break;
case R.id.multiply_button:
  buttonValue=""String_Node_Str"";
break;
case R.id.divide_button:
buttonValue=""String_Node_Str"";
break;
case R.id.decimal_button:
buttonValue=""String_Node_Str"";
break;
case R.id.equals_button:
buttonValue=""String_Node_Str"";
break;
case R.id.ee_button:
buttonValue=""String_Node_Str"";
break;
case R.id.power_button:
buttonValue=""String_Node_Str"";
break;
case R.id.open_para_button:
buttonValue=""String_Node_Str"";
break;
case R.id.close_para_button:
buttonValue=""String_Node_Str"";
break;
case R.id.backspace_button:
buttonValue=""String_Node_Str"";
break;
default :
for (int i=0; i < 10; i++) if (buttonId == BUTTON_IDS[i]) buttonValue=String.valueOf(i);
}
numButtonPressed(buttonValue);
}
}
);
calcButton.add(button);
}
ImageButton backspaceButton=(ImageButton)findViewById(R.id.backspace_button);
backspaceButton.setOnTouchListener(new View.OnTouchListener(){
private Handler mHandler;
@Override public boolean onTouch(View view,MotionEvent event){
switch (event.getAction()) {
case MotionEvent.ACTION_DOWN:
if (mHandler != null) return true;
mHandler=new Handler();
mHandler.postDelayed(mBackspaceRepeat,400);
numButtonPressed(""String_Node_Str"");
break;
case MotionEvent.ACTION_UP:
if (mHandler == null) return true;
mHandler.removeCallbacks(mBackspaceRepeat);
mHandler=null;
break;
}
return false;
}
Runnable mBackspaceRepeat=new Runnable(){
@Override public void run(){
mHandler.postDelayed(this,100);
numButtonPressed(""String_Node_Str"");
}
}
;
}
);
}",0.9294021294021294
35134,"/** 
 * Function that is called after user hits the ""="" key Called by calculator for solving current expression
 * @param exp
 * @return solved expression
 */
private boolean solveAndLoadIntoPrevExpression(){
  String prevEx=solve(mExpression,mMcOperate);
  if (!prevEx.equals(""String_Node_Str"")) {
    mPrevExpressions.add(new PrevExpression(prevEx));
    if (isUnitIsSet()) {
      Unit toUnit=getCurrUnitType().getSelectedUnit();
      mPrevExpressions.get(mPrevExpressions.size() - 1).setQuerryUnit(toUnit);
      mPrevExpressions.get(mPrevExpressions.size() - 1).setAnswerUnit(toUnit);
    }
    return true;
  }
 else   return false;
}","/** 
 * Function that is called after user hits the ""="" key Called by calculator for solving current expression
 * @param exp
 * @return solved expression
 */
private boolean solveAndLoadIntoPrevExpression(){
  String prevEx=solve(mExpression,mMcOperate);
  System.out.println(""String_Node_Str"" + isUnitIsSet());
  System.out.println(""String_Node_Str"" + mUnitTypePos);
  if (!prevEx.equals(""String_Node_Str"")) {
    mPrevExpressions.add(new PrevExpression(prevEx));
    if (isUnitIsSet()) {
      Unit toUnit=getCurrUnitType().getSelectedUnit();
      mPrevExpressions.get(mPrevExpressions.size() - 1).setQuerryUnit(toUnit);
      mPrevExpressions.get(mPrevExpressions.size() - 1).setAnswerUnit(toUnit);
    }
    return true;
  }
 else   return false;
}",0.7569892473118279
35135,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_calc);
  mCalc=Calculator.getCalculator(this);
  mDisplay=(EditTextCursorWatcher)findViewById(R.id.textDisplay);
  mDisplay.setCalc(mCalc);
  mDisplay.disableSoftInputFromAppearing();
  mDisplay.setOnLongClickListener(new View.OnLongClickListener(){
    @Override public boolean onLongClick(    View v){
      mDisplay.selectAll();
      return false;
    }
  }
);
  mDisplay.setOnTouchListener(new View.OnTouchListener(){
    @Override public boolean onTouch(    View view,    MotionEvent event){
      if (event.getAction() == MotionEvent.ACTION_DOWN) {
        mCalc.setSolved(false);
        mDisplay.setCursorVisible(true);
      }
      return false;
    }
  }
);
  FragmentManager fm=getSupportFragmentManager();
  mResultFragment=(ResultListFragment)fm.findFragmentById(R.id.resultListfragmentContainer);
  if (mResultFragment == null) {
    mResultFragment=new ResultListFragment();
    fm.beginTransaction().add(R.id.resultListfragmentContainer,mResultFragment).commit();
  }
  mConvKeysViewPager=(ViewPager)findViewById(R.id.convertKeyPager);
  mConvKeysViewPager.setAdapter(new FragmentStatePagerAdapter(fm){
    @Override public int getCount(){
      return mCalc.getUnitTypeSize();
    }
    @Override public Fragment getItem(    int pos){
      return ConvKeysFragment.newInstance(pos);
    }
  }
);
  mConvKeysViewPager.setOnPageChangeListener(new ViewPager.OnPageChangeListener(){
    @Override public void onPageSelected(    int pos){
      mCalc.getCurrUnitType().clearUnitSelection();
      updateScreen(false);
      mCalc.setUnitTypePos(pos);
      DisplayMetrics metrics=getResources().getDisplayMetrics();
      int padLeft=(int)(metrics.density * 8f + 0.5f);
      int padRight=(int)(metrics.density * 8f + 0.5f);
      mConvKeysViewPager.setPadding(padLeft,0,padRight,0);
      if (unitToSelectAfterScroll != null) {
        FragmentStatePagerAdapter tempAdapter=(FragmentStatePagerAdapter)mConvKeysViewPager.getAdapter();
        ConvKeysFragment currFrag=(ConvKeysFragment)tempAdapter.instantiateItem(mConvKeysViewPager,mConvKeysViewPager.getCurrentItem());
        currFrag.selectUnit(unitToSelectAfterScroll);
        unitToSelectAfterScroll=null;
      }
    }
    @Override public void onPageScrolled(    int pos,    float posOffset,    int posOffsetPixels){
    }
    @Override public void onPageScrollStateChanged(    int state){
    }
  }
);
  DisplayMetrics metrics=getResources().getDisplayMetrics();
  int padLeft=(int)(metrics.density * 8f + 0.5f);
  int padRight=padLeft;
  mConvKeysViewPager.setPadding(padLeft,0,padRight,0);
  mConvKeysViewPager.setClipToPadding(false);
  mConvKeysViewPager.setPageMargin(8);
  mConvKeysViewPager.setCurrentItem(2);
  calcButton=new ArrayList<Button>();
  for (  int id : BUTTON_IDS) {
    Button button=(Button)findViewById(id);
    button.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View view){
        int buttonId=view.getId();
        String buttonValue=""String_Node_Str"";
switch (buttonId) {
case R.id.plus_button:
          buttonValue=""String_Node_Str"";
        break;
case R.id.minus_button:
      buttonValue=""String_Node_Str"";
    break;
case R.id.multiply_button:
  buttonValue=""String_Node_Str"";
break;
case R.id.divide_button:
buttonValue=""String_Node_Str"";
break;
case R.id.decimal_button:
buttonValue=""String_Node_Str"";
break;
case R.id.equals_button:
buttonValue=""String_Node_Str"";
break;
case R.id.ee_button:
buttonValue=""String_Node_Str"";
break;
case R.id.power_button:
buttonValue=""String_Node_Str"";
break;
case R.id.open_para_button:
buttonValue=""String_Node_Str"";
break;
case R.id.close_para_button:
buttonValue=""String_Node_Str"";
break;
case R.id.backspace_button:
buttonValue=""String_Node_Str"";
break;
default :
for (int i=0; i < 10; i++) if (buttonId == BUTTON_IDS[i]) buttonValue=String.valueOf(i);
}
numButtonPressed(buttonValue);
}
}
);
calcButton.add(button);
}
ImageButton backspaceButton=(ImageButton)findViewById(R.id.backspace_button);
backspaceButton.setOnTouchListener(new View.OnTouchListener(){
private Handler mColorHoldHandler;
private View mView;
@Override public boolean onTouch(View view,MotionEvent event){
switch (event.getAction()) {
case MotionEvent.ACTION_DOWN:
mView=view;
mInc=0;
if (mColorHoldHandler != null) return true;
mColorHoldHandler=new Handler();
mColorHoldHandler.postDelayed(mBackspaceColor,10);
break;
case MotionEvent.ACTION_UP:
if (mColorHoldHandler == null) return true;
numButtonPressed(""String_Node_Str"");
view.setBackgroundColor(getResources().getColor(R.color.op_button_normal));
mColorHoldHandler.removeCallbacks(mBackspaceColor);
mColorHoldHandler=null;
break;
}
return false;
}
private int mInc;
Runnable mBackspaceColor=new Runnable(){
private int mStartColor=getResources().getColor(R.color.op_button_pressed);
private int mEndColor=getResources().getColor(R.color.backspace_button_held);
private static final int NUM_COLOR_CHANGES=10;
private static final int BACKSPACE_HOLD_TIME=500;
@Override public void run(){
if (mInc == -1) {
mView.setBackgroundColor(mEndColor);
return;
}
if (mInc == NUM_COLOR_CHANGES) {
numButtonPressed(""String_Node_Str"");
mView.setBackgroundColor(Color.argb(255,0,0,0));
mColorHoldHandler.postDelayed(this,100);
mInc=-1;
return;
}
mColorHoldHandler.postDelayed(this,BACKSPACE_HOLD_TIME / NUM_COLOR_CHANGES);
float deltaRed=(float)Color.red(mStartColor) + ((float)Color.red(mEndColor) - (float)Color.red(mStartColor)) * ((float)mInc * (float)mInc * (float)mInc) / ((float)NUM_COLOR_CHANGES * (float)NUM_COLOR_CHANGES * (float)NUM_COLOR_CHANGES);
int deltaGreen=Color.green(mStartColor) + ((Color.green(mEndColor) - Color.green(mStartColor)) * mInc) / NUM_COLOR_CHANGES;
int deltaBlue=Color.blue(mStartColor) + ((Color.blue(mEndColor) - Color.blue(mStartColor)) * mInc) / NUM_COLOR_CHANGES;
mView.setBackgroundColor(Color.argb(255,(int)deltaRed,deltaGreen,deltaBlue));
System.out.println(""String_Node_Str"" + deltaRed);
System.out.println(""String_Node_Str"" + ((Color.red(mEndColor) - Color.red(mStartColor)) * mInc ^ 3));
System.out.println(""String_Node_Str"" + mInc);
mInc++;
}
}
;
}
);
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_calc);
  mCalc=Calculator.getCalculator(this);
  mDisplay=(EditTextCursorWatcher)findViewById(R.id.textDisplay);
  mDisplay.setCalc(mCalc);
  mDisplay.disableSoftInputFromAppearing();
  mDisplay.setOnLongClickListener(new View.OnLongClickListener(){
    @Override public boolean onLongClick(    View v){
      mDisplay.selectAll();
      return false;
    }
  }
);
  mDisplay.setOnTouchListener(new View.OnTouchListener(){
    @Override public boolean onTouch(    View view,    MotionEvent event){
      if (event.getAction() == MotionEvent.ACTION_DOWN) {
        mCalc.setSolved(false);
        mDisplay.setCursorVisible(true);
      }
      return false;
    }
  }
);
  FragmentManager fm=getSupportFragmentManager();
  mResultFragment=(ResultListFragment)fm.findFragmentById(R.id.resultListfragmentContainer);
  if (mResultFragment == null) {
    mResultFragment=new ResultListFragment();
    fm.beginTransaction().add(R.id.resultListfragmentContainer,mResultFragment).commit();
  }
  mConvKeysViewPager=(ViewPager)findViewById(R.id.convertKeyPager);
  mConvKeysViewPager.setAdapter(new FragmentStatePagerAdapter(fm){
    @Override public int getCount(){
      return mCalc.getUnitTypeSize();
    }
    @Override public Fragment getItem(    int pos){
      return ConvKeysFragment.newInstance(pos);
    }
  }
);
  mConvKeysViewPager.setOnPageChangeListener(new ViewPager.OnPageChangeListener(){
    @Override public void onPageSelected(    int pos){
      mCalc.setUnitTypePos(pos);
      DisplayMetrics metrics=getResources().getDisplayMetrics();
      int padLeft=(int)(metrics.density * 8f + 0.5f);
      int padRight=(int)(metrics.density * 8f + 0.5f);
      mConvKeysViewPager.setPadding(padLeft,0,padRight,0);
      int currConvKeyPos=mConvKeysViewPager.getCurrentItem();
      clearConvKeyForFragPos(currConvKeyPos - 1);
      clearConvKeyForFragPos(currConvKeyPos + 1);
      if (unitToSelectAfterScroll != null) {
        getConvKeyFrag(mConvKeysViewPager.getCurrentItem()).selectUnit(unitToSelectAfterScroll);
        unitToSelectAfterScroll=null;
      }
    }
    @Override public void onPageScrolled(    int pos,    float posOffset,    int posOffsetPixels){
    }
    @Override public void onPageScrollStateChanged(    int state){
    }
  }
);
  DisplayMetrics metrics=getResources().getDisplayMetrics();
  int padLeft=(int)(metrics.density * 8f + 0.5f);
  int padRight=padLeft;
  mConvKeysViewPager.setPadding(padLeft,0,padRight,0);
  mConvKeysViewPager.setClipToPadding(false);
  mConvKeysViewPager.setPageMargin(8);
  mConvKeysViewPager.setCurrentItem(2);
  calcButton=new ArrayList<Button>();
  for (  int id : BUTTON_IDS) {
    Button button=(Button)findViewById(id);
    button.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View view){
        int buttonId=view.getId();
        String buttonValue=""String_Node_Str"";
switch (buttonId) {
case R.id.plus_button:
          buttonValue=""String_Node_Str"";
        break;
case R.id.minus_button:
      buttonValue=""String_Node_Str"";
    break;
case R.id.multiply_button:
  buttonValue=""String_Node_Str"";
break;
case R.id.divide_button:
buttonValue=""String_Node_Str"";
break;
case R.id.decimal_button:
buttonValue=""String_Node_Str"";
break;
case R.id.equals_button:
buttonValue=""String_Node_Str"";
break;
case R.id.ee_button:
buttonValue=""String_Node_Str"";
break;
case R.id.power_button:
buttonValue=""String_Node_Str"";
break;
case R.id.open_para_button:
buttonValue=""String_Node_Str"";
break;
case R.id.close_para_button:
buttonValue=""String_Node_Str"";
break;
case R.id.backspace_button:
buttonValue=""String_Node_Str"";
break;
default :
for (int i=0; i < 10; i++) if (buttonId == BUTTON_IDS[i]) buttonValue=String.valueOf(i);
}
numButtonPressed(buttonValue);
}
}
);
calcButton.add(button);
}
ImageButton backspaceButton=(ImageButton)findViewById(R.id.backspace_button);
backspaceButton.setOnTouchListener(new View.OnTouchListener(){
private Handler mColorHoldHandler;
private View mView;
@Override public boolean onTouch(View view,MotionEvent event){
switch (event.getAction()) {
case MotionEvent.ACTION_DOWN:
mView=view;
mInc=0;
if (mColorHoldHandler != null) return true;
mColorHoldHandler=new Handler();
mColorHoldHandler.postDelayed(mBackspaceColor,10);
break;
case MotionEvent.ACTION_UP:
if (mColorHoldHandler == null) return true;
numButtonPressed(""String_Node_Str"");
view.setBackgroundColor(getResources().getColor(R.color.op_button_normal));
mColorHoldHandler.removeCallbacks(mBackspaceColor);
mColorHoldHandler=null;
break;
}
return false;
}
private int mInc;
Runnable mBackspaceColor=new Runnable(){
private int mStartColor=getResources().getColor(R.color.op_button_pressed);
private int mEndColor=getResources().getColor(R.color.backspace_button_held);
private static final int NUM_COLOR_CHANGES=10;
private static final int BACKSPACE_HOLD_TIME=500;
@Override public void run(){
if (mInc == -1) {
mView.setBackgroundColor(mEndColor);
return;
}
if (mInc == NUM_COLOR_CHANGES) {
numButtonPressed(""String_Node_Str"");
mView.setBackgroundColor(Color.argb(255,0,0,0));
mColorHoldHandler.postDelayed(this,100);
mInc=-1;
return;
}
mColorHoldHandler.postDelayed(this,BACKSPACE_HOLD_TIME / NUM_COLOR_CHANGES);
float deltaRed=(float)Color.red(mStartColor) + ((float)Color.red(mEndColor) - (float)Color.red(mStartColor)) * ((float)mInc * (float)mInc * (float)mInc) / ((float)NUM_COLOR_CHANGES * (float)NUM_COLOR_CHANGES * (float)NUM_COLOR_CHANGES);
int deltaGreen=Color.green(mStartColor) + ((Color.green(mEndColor) - Color.green(mStartColor)) * mInc) / NUM_COLOR_CHANGES;
int deltaBlue=Color.blue(mStartColor) + ((Color.blue(mEndColor) - Color.blue(mStartColor)) * mInc) / NUM_COLOR_CHANGES;
mView.setBackgroundColor(Color.argb(255,(int)deltaRed,deltaGreen,deltaBlue));
System.out.println(""String_Node_Str"" + deltaRed);
System.out.println(""String_Node_Str"" + ((Color.red(mEndColor) - Color.red(mStartColor)) * mInc ^ 3));
System.out.println(""String_Node_Str"" + mInc);
mInc++;
}
}
;
}
);
}",0.9611124585657692
35136,"@Override public void onPageSelected(int pos){
  mCalc.getCurrUnitType().clearUnitSelection();
  updateScreen(false);
  mCalc.setUnitTypePos(pos);
  DisplayMetrics metrics=getResources().getDisplayMetrics();
  int padLeft=(int)(metrics.density * 8f + 0.5f);
  int padRight=(int)(metrics.density * 8f + 0.5f);
  mConvKeysViewPager.setPadding(padLeft,0,padRight,0);
  if (unitToSelectAfterScroll != null) {
    FragmentStatePagerAdapter tempAdapter=(FragmentStatePagerAdapter)mConvKeysViewPager.getAdapter();
    ConvKeysFragment currFrag=(ConvKeysFragment)tempAdapter.instantiateItem(mConvKeysViewPager,mConvKeysViewPager.getCurrentItem());
    currFrag.selectUnit(unitToSelectAfterScroll);
    unitToSelectAfterScroll=null;
  }
}","@Override public void onPageSelected(int pos){
  mCalc.setUnitTypePos(pos);
  DisplayMetrics metrics=getResources().getDisplayMetrics();
  int padLeft=(int)(metrics.density * 8f + 0.5f);
  int padRight=(int)(metrics.density * 8f + 0.5f);
  mConvKeysViewPager.setPadding(padLeft,0,padRight,0);
  int currConvKeyPos=mConvKeysViewPager.getCurrentItem();
  clearConvKeyForFragPos(currConvKeyPos - 1);
  clearConvKeyForFragPos(currConvKeyPos + 1);
  if (unitToSelectAfterScroll != null) {
    getConvKeyFrag(mConvKeysViewPager.getCurrentItem()).selectUnit(unitToSelectAfterScroll);
    unitToSelectAfterScroll=null;
  }
}",0.5308550185873606
35137,"/** 
 * Selects the a unit (used by prev result list)
 * @see com.llamacorp.unitcalc.ResultListFragment.OnResultSelectedListener#selectUnit(int)
 */
public void selectUnit(Unit unit,int unitTypePos){
  FragmentStatePagerAdapter tempAdapter=(FragmentStatePagerAdapter)mConvKeysViewPager.getAdapter();
  ConvKeysFragment currFrag=(ConvKeysFragment)tempAdapter.instantiateItem(mConvKeysViewPager,mConvKeysViewPager.getCurrentItem());
  if (unitTypePos != mConvKeysViewPager.getCurrentItem()) {
    unitToSelectAfterScroll=unit;
    mConvKeysViewPager.setCurrentItem(unitTypePos);
  }
 else   currFrag.selectUnit(unit);
}","/** 
 * Selects the a unit (used by prev result list)
 * @see com.llamacorp.unitcalc.ResultListFragment.OnResultSelectedListener#selectUnit(int)
 */
public void selectUnit(Unit unit,int unitTypePos){
  if (unitTypePos != mConvKeysViewPager.getCurrentItem()) {
    unitToSelectAfterScroll=unit;
    mConvKeysViewPager.setCurrentItem(unitTypePos);
  }
 else   getConvKeyFrag(mConvKeysViewPager.getCurrentItem()).selectUnit(unit);
}",0.7304015296367112
35138,"/** 
 * Updates the current and previous answers
 * @param updatePrev whether or not to update previous answer
 */
public void updateScreen(boolean updatePrev){
  updateScreenWithInstaScrollOption(updatePrev,false);
  if (!mCalc.isUnitIsSet()) {
    FragmentStatePagerAdapter tempAdapter=(FragmentStatePagerAdapter)mConvKeysViewPager.getAdapter();
    ConvKeysFragment currFrag=(ConvKeysFragment)tempAdapter.instantiateItem(mConvKeysViewPager,mConvKeysViewPager.getCurrentItem());
    currFrag.clearButtonSelection();
  }
}","/** 
 * Updates the current and previous answers
 * @param updatePrev whether or not to update previous answer
 */
public void updateScreen(boolean updatePrev){
  updateScreenWithInstaScrollOption(updatePrev,false);
  if (!mCalc.isUnitIsSet())   clearConvKeyForFragPos(mConvKeysViewPager.getCurrentItem());
}",0.6594464500601684
35139,"public void setIncludeAll(boolean includeAll){
  this.includeAll=includeAll;
}","public void setIncludeAll(Boolean includeAll){
  this.includeAll=includeAll;
}",0.9871794871794872
35140,"public boolean getIncludeAll(){
  return includeAll;
}","public Boolean getIncludeAll(){
  return includeAll;
}",0.9814814814814816
35141,"public void setIncludeAll(boolean includeAll){
  this.includeAll=includeAll;
}","public void setIncludeAll(Boolean includeAll){
  this.includeAll=includeAll;
}",0.9871794871794872
35142,"public boolean getIncludeAll(){
  return includeAll;
}","public Boolean getIncludeAll(){
  return includeAll;
}",0.9814814814814816
35143,"public void setTemplateId(Integer suiteId){
  this.suiteId=suiteId;
}","public void setTemplateId(Integer templateId){
  this.templateId=templateId;
}",0.8163265306122449
35144,"@Test public void testGetTestCase(){
  TestRailService service=getTestRailsEntities(""String_Node_Str"");
  TestCase testCase=service.getTestCase(0);
  Assert.assertEquals(new Integer(5),testCase.getCreatedBy());
  Assert.assertEquals(new Integer(1392300984),testCase.getCreatedOn());
  Assert.assertEquals(""String_Node_Str"",testCase.getEstimate());
  Assert.assertEquals(null,testCase.getEstimateForecast());
  Assert.assertEquals(new Integer(1),testCase.getId());
  Assert.assertEquals(new Integer(7),testCase.getMilestoneId());
  Assert.assertEquals(new Integer(2),testCase.getPriorityId());
  Assert.assertEquals(""String_Node_Str"",testCase.getRefs());
  Assert.assertEquals(new Integer(1),testCase.getSectionId());
  Assert.assertEquals(new Integer(1),testCase.getSuiteId());
  Assert.assertEquals(""String_Node_Str"",testCase.getTitle());
  Assert.assertEquals(new Integer(4),testCase.getTypeId());
  Assert.assertEquals(new Integer(1),testCase.getUpdatedBy());
  Assert.assertEquals(new Integer(1393586511),testCase.getUpdatedOn());
}","@Test public void testGetTestCase(){
  TestRailService service=getTestRailsEntities(""String_Node_Str"");
  TestCase testCase=service.getTestCase(0);
  Assert.assertEquals(new Integer(5),testCase.getCreatedBy());
  Assert.assertEquals(new Integer(1392300984),testCase.getCreatedOn());
  Assert.assertEquals(""String_Node_Str"",testCase.getEstimate());
  Assert.assertEquals(null,testCase.getEstimateForecast());
  Assert.assertEquals(new Integer(1),testCase.getId());
  Assert.assertEquals(new Integer(7),testCase.getMilestoneId());
  Assert.assertEquals(new Integer(2),testCase.getPriorityId());
  Assert.assertEquals(""String_Node_Str"",testCase.getRefs());
  Assert.assertEquals(new Integer(1),testCase.getSectionId());
  Assert.assertEquals(new Integer(1),testCase.getSuiteId());
  Assert.assertEquals(""String_Node_Str"",testCase.getTitle());
  Assert.assertEquals(new Integer(4),testCase.getTypeId());
  Assert.assertEquals(new Integer(1),testCase.getUpdatedBy());
  Assert.assertEquals(new Integer(1393586511),testCase.getUpdatedOn());
  Assert.assertEquals(new Integer(1),testCase.getTemplateId());
}",0.9700374531835206
35145,"/** 
 * Updates one or more existing test runs in a plan (partial updates are supported, i.e. you can submit and update specific fields only).
 * @param planId The ID of the test plan
 * @param entryId The ID of the test plan entry (note: not the test run ID)
 * @param updatePlanEntry the (partial) updates to the plan entry
 * @return the updated plan entry
 */
public PlanEntry updateTestPlanEntry(int planId,int entryId,UpdatePlanEntry updatePlanEntry){
  return postRESTBodyReturn(TestRailCommand.UPDATE_PLAN_ENTRY.getCommand(),Integer.toString(planId) + ""String_Node_Str"" + Integer.toString(entryId),updatePlanEntry,PlanEntry.class);
}","/** 
 * Updates one or more existing test runs in a plan (partial updates are supported, i.e. you can submit and update specific fields only).
 * @param planId The ID of the test plan
 * @param entryId The ID of the test plan entry (note: not the test run ID)
 * @param updatePlanEntry the (partial) updates to the plan entry
 * @return the updated plan entry
 */
public PlanEntry updateTestPlanEntry(int planId,String entryId,UpdatePlanEntry updatePlanEntry){
  return postRESTBodyReturn(TestRailCommand.UPDATE_PLAN_ENTRY.getCommand(),Integer.toString(planId) + ""String_Node_Str"" + entryId,updatePlanEntry,PlanEntry.class);
}",0.967640094711918
35146,"public void setCaseId(Integer testId){
  this.caseId=caseId;
}","public void setCaseId(Integer caseId){
  this.caseId=caseId;
}",0.9516129032258064
35147,"public void setCaseIds(Integer milestoneId){
  this.caseIds=caseIds;
}","public void setCaseIds(Integer[] caseIds){
  this.caseIds=caseIds;
}",0.9130434782608696
35148,"public void setAssignedToId(Integer milestoneId){
  this.assignedToId=assignedToId;
}","public void setAssignedToId(Integer assignedToId){
  this.assignedToId=assignedToId;
}",0.9239766081871345
35149,"@Test public void testAddCustomTestCaseStatus(){
  Assume.assumeTrue(TestIntegrationSuite.destructiveTestsOk);
  Assume.assumeTrue(TestIntegrationSuite.testInstance != null);
  TestStatus.addStatus(""String_Node_Str"",6);
  TestResult result=new TestResult();
  result.setTestId(TestIntegrationSuite.testInstance.getId());
  result.setVerdict(""String_Node_Str"");
  result.setAssignedtoId(TestIntegrationSuite.assignedToId);
  result.setComment(""String_Node_Str"");
  try {
    TestIntegrationSuite.getService().addTestResult(TestIntegrationSuite.testInstance.getId(),result);
  }
 catch (  IOException e) {
    Assert.fail(""String_Node_Str"" + e);
  }
}","@Test public void testAddCustomTestCaseStatus(){
  Assume.assumeTrue(TestIntegrationSuite.destructiveTestsOk);
  Assume.assumeTrue(TestIntegrationSuite.testInstance != null);
  TestStatus.addStatus(""String_Node_Str"",6);
  TestResult result=new TestResult();
  result.setTestId(TestIntegrationSuite.testInstance.getId());
  result.setVerdict(""String_Node_Str"");
  result.setAssignedtoId(TestIntegrationSuite.assignedToId);
  result.setComment(""String_Node_Str"");
  TestResult returnedResult=TestIntegrationSuite.getService().addTestResult(TestIntegrationSuite.testInstance.getId(),result);
  if (returnedResult == null) {
    Assert.fail(""String_Node_Str"");
  }
}",0.7307398932112891
35150,"@Test public void testAddTestCaseResultRetest(){
  Assume.assumeTrue(TestIntegrationSuite.destructiveTestsOk);
  Assume.assumeTrue(TestIntegrationSuite.testInstance != null);
  TestResult result=new TestResult();
  result.setTestId(TestIntegrationSuite.testInstance.getId());
  result.setVerdict(""String_Node_Str"");
  result.setAssignedtoId(TestIntegrationSuite.assignedToId);
  result.setComment(""String_Node_Str"");
  try {
    TestIntegrationSuite.getService().addTestResult(TestIntegrationSuite.testInstance.getId(),result);
  }
 catch (  IOException e) {
    Assert.fail(""String_Node_Str"" + e);
  }
}","@Test public void testAddTestCaseResultRetest(){
  Assume.assumeTrue(TestIntegrationSuite.destructiveTestsOk);
  Assume.assumeTrue(TestIntegrationSuite.testInstance != null);
  TestResult result=new TestResult();
  result.setTestId(TestIntegrationSuite.testInstance.getId());
  result.setVerdict(""String_Node_Str"");
  result.setAssignedtoId(TestIntegrationSuite.assignedToId);
  result.setComment(""String_Node_Str"");
  TestResult returnedResult=TestIntegrationSuite.getService().addTestResult(TestIntegrationSuite.testInstance.getId(),result);
  if (returnedResult == null) {
    Assert.fail(""String_Node_Str"");
  }
}",0.9254709254709256
35151,"@Test public void testAddTestCaseResultFail(){
  Assume.assumeTrue(TestIntegrationSuite.destructiveTestsOk);
  Assume.assumeTrue(TestIntegrationSuite.testInstance != null);
  TestResult result=new TestResult();
  result.setTestId(TestIntegrationSuite.testInstance.getId());
  result.setVerdict(""String_Node_Str"");
  result.setAssignedtoId(TestIntegrationSuite.assignedToId);
  result.setComment(""String_Node_Str"");
  try {
    TestIntegrationSuite.getService().addTestResult(TestIntegrationSuite.testInstance.getId(),result);
  }
 catch (  IOException e) {
    Assert.fail(""String_Node_Str"" + e);
  }
}","@Test public void testAddTestCaseResultFail(){
  Assume.assumeTrue(TestIntegrationSuite.destructiveTestsOk);
  Assume.assumeTrue(TestIntegrationSuite.testInstance != null);
  TestResult result=new TestResult();
  result.setTestId(TestIntegrationSuite.testInstance.getId());
  result.setVerdict(""String_Node_Str"");
  result.setAssignedtoId(TestIntegrationSuite.assignedToId);
  result.setComment(""String_Node_Str"");
  TestResult returnedResult=TestIntegrationSuite.getService().addTestResult(TestIntegrationSuite.testInstance.getId(),result);
  if (returnedResult == null) {
    Assert.fail(""String_Node_Str"");
  }
}",0.9252259654889072
35152,"@Test public void testAddTestCaseResultUntested(){
  Assume.assumeTrue(TestIntegrationSuite.destructiveTestsOk);
  Assume.assumeTrue(TestIntegrationSuite.testInstance != null);
  TestResult result=new TestResult();
  result.setTestId(TestIntegrationSuite.testInstance.getId());
  result.setVerdict(""String_Node_Str"");
  result.setAssignedtoId(TestIntegrationSuite.assignedToId);
  result.setComment(""String_Node_Str"");
  try {
    TestIntegrationSuite.getService().addTestResult(TestIntegrationSuite.testInstance.getId(),result);
  }
 catch (  IOException e) {
    Assert.fail(""String_Node_Str"" + e);
  }
}","@Test public void testAddTestCaseResultUntested(){
  Assume.assumeTrue(TestIntegrationSuite.destructiveTestsOk);
  Assume.assumeTrue(TestIntegrationSuite.testInstance != null);
  TestResult result=new TestResult();
  result.setTestId(TestIntegrationSuite.testInstance.getId());
  result.setVerdict(""String_Node_Str"");
  result.setAssignedtoId(TestIntegrationSuite.assignedToId);
  result.setComment(""String_Node_Str"");
  TestResult returnedResult=TestIntegrationSuite.getService().addTestResult(TestIntegrationSuite.testInstance.getId(),result);
  if (returnedResult == null) {
    Assert.fail(""String_Node_Str"");
  }
}",0.9257142857142856
35153,"@Test public void testAddTestCaseResultsList(){
  Assume.assumeTrue(TestIntegrationSuite.destructiveTestsOk);
  Assume.assumeTrue(TestIntegrationSuite.testInstance != null);
  TestResults results=new TestResults();
  TestResult result1=new TestResult();
  result1.setVerdict(""String_Node_Str"");
  result1.setTestId(TestIntegrationSuite.testInstance.getId());
  result1.setAssignedtoId(TestIntegrationSuite.assignedToId);
  result1.setComment(""String_Node_Str"");
  results.addResult(result1);
  TestResult result2=new TestResult();
  result2.setTestId(TestIntegrationSuite.testInstance.getId());
  result2.setVerdict(""String_Node_Str"");
  result2.setAssignedtoId(TestIntegrationSuite.assignedToId);
  result2.setComment(""String_Node_Str"");
  results.addResult(result2);
  TestResult result3=new TestResult();
  result3.setTestId(TestIntegrationSuite.testInstance.getId());
  result3.setVerdict(""String_Node_Str"");
  result3.setAssignedtoId(TestIntegrationSuite.assignedToId);
  result3.setComment(""String_Node_Str"");
  results.addResult(result3);
  try {
    TestIntegrationSuite.getService().addTestResults(TestIntegrationSuite.testRun.getId(),results);
  }
 catch (  IOException e) {
    Assert.fail(""String_Node_Str"" + e);
  }
}","@Test public void testAddTestCaseResultsList(){
  Assume.assumeTrue(TestIntegrationSuite.destructiveTestsOk);
  Assume.assumeTrue(TestIntegrationSuite.testInstance != null);
  TestResults results=new TestResults();
  TestResult result1=new TestResult();
  result1.setVerdict(""String_Node_Str"");
  result1.setTestId(TestIntegrationSuite.testInstance.getId());
  result1.setAssignedtoId(TestIntegrationSuite.assignedToId);
  result1.setComment(""String_Node_Str"");
  results.addResult(result1);
  TestResult result2=new TestResult();
  result2.setTestId(TestIntegrationSuite.testInstance.getId());
  result2.setVerdict(""String_Node_Str"");
  result2.setAssignedtoId(TestIntegrationSuite.assignedToId);
  result2.setComment(""String_Node_Str"");
  results.addResult(result2);
  TestResult result3=new TestResult();
  result3.setTestId(TestIntegrationSuite.testInstance.getId());
  result3.setVerdict(""String_Node_Str"");
  result3.setAssignedtoId(TestIntegrationSuite.assignedToId);
  result3.setComment(""String_Node_Str"");
  results.addResult(result3);
  TestResults returnedResults=TestIntegrationSuite.getService().addTestResults(TestIntegrationSuite.testRun.getId(),results);
  if (returnedResults == null) {
    Assert.fail(""String_Node_Str"");
  }
}",0.8586429725363489
35154,"@Test public void testAddTestCaseResultBlocked(){
  Assume.assumeTrue(TestIntegrationSuite.destructiveTestsOk);
  Assume.assumeTrue(TestIntegrationSuite.testInstance != null);
  TestResult result=new TestResult();
  result.setTestId(TestIntegrationSuite.testInstance.getId());
  result.setVerdict(""String_Node_Str"");
  result.setAssignedtoId(TestIntegrationSuite.assignedToId);
  result.setComment(""String_Node_Str"");
  try {
    TestIntegrationSuite.getService().addTestResult(TestIntegrationSuite.testInstance.getId(),result);
  }
 catch (  IOException e) {
    Assert.fail(""String_Node_Str"" + e);
  }
}","@Test public void testAddTestCaseResultBlocked(){
  Assume.assumeTrue(TestIntegrationSuite.destructiveTestsOk);
  Assume.assumeTrue(TestIntegrationSuite.testInstance != null);
  TestResult result=new TestResult();
  result.setTestId(TestIntegrationSuite.testInstance.getId());
  result.setVerdict(""String_Node_Str"");
  result.setAssignedtoId(TestIntegrationSuite.assignedToId);
  result.setComment(""String_Node_Str"");
  TestResult returnedResult=TestIntegrationSuite.getService().addTestResult(TestIntegrationSuite.testInstance.getId(),result);
  if (returnedResult == null) {
    Assert.fail(""String_Node_Str"");
  }
}",0.9255928045789044
35155,"@Test public void testAddTestCaseResultPass(){
  Assume.assumeTrue(TestIntegrationSuite.destructiveTestsOk);
  Assume.assumeTrue(TestIntegrationSuite.testInstance != null);
  TestResult result=new TestResult();
  result.setTestId(TestIntegrationSuite.testInstance.getId());
  result.setVerdict(""String_Node_Str"");
  result.setAssignedtoId(TestIntegrationSuite.assignedToId);
  result.setComment(""String_Node_Str"");
  try {
    TestIntegrationSuite.getService().addTestResult(TestIntegrationSuite.testInstance.getId(),result);
  }
 catch (  IOException e) {
    Assert.fail(""String_Node_Str"" + e);
  }
}","@Test public void testAddTestCaseResultPass(){
  Assume.assumeTrue(TestIntegrationSuite.destructiveTestsOk);
  Assume.assumeTrue(TestIntegrationSuite.testInstance != null);
  TestResult result=new TestResult();
  result.setTestId(TestIntegrationSuite.testInstance.getId());
  result.setVerdict(""String_Node_Str"");
  result.setAssignedtoId(TestIntegrationSuite.assignedToId);
  result.setComment(""String_Node_Str"");
  TestResult returnedResult=TestIntegrationSuite.getService().addTestResult(TestIntegrationSuite.testInstance.getId(),result);
  if (returnedResult == null) {
    Assert.fail(""String_Node_Str"");
  }
}",0.9252259654889072
35156,"/** 
 * Updates one or more existing test runs in a plan (partial updates are supported, i.e. you can submit and update specific fields only).
 * @param planId The ID of the test plan
 * @param entryId The ID of the test plan entry (note: not the test run ID)
 * @param updatePlanEntry the (partial) updates to the plan entry
 * @return the updated plan entry
 */
public PlanEntry updateTestPlanEntry(int planId,int entryId,UpdatePlanEntry updatePlanEntry){
}","/** 
 * Updates one or more existing test runs in a plan (partial updates are supported, i.e. you can submit and update specific fields only).
 * @param planId The ID of the test plan
 * @param entryId The ID of the test plan entry (note: not the test run ID)
 * @param updatePlanEntry the (partial) updates to the plan entry
 * @return the updated plan entry
 */
public PlanEntry updateTestPlanEntry(int planId,int entryId,UpdatePlanEntry updatePlanEntry){
  return postRESTBodyReturn(TestRailCommand.UPDATE_PLAN_ENTRY.getCommand(),Integer.toString(planId) + ""String_Node_Str"" + Integer.toString(entryId),updatePlanEntry,PlanEntry.class);
}",0.8345454545454546
35157,"/** 
 * Returns a list of all the Milestones in the given project ID
 * @param projectId the ID of project you want the Milestones from
 * @param isCompleted only accepts ApiFilter.IS_COMPLETED (numerical boolean {0|1})
 * @return the list of all the Milestones in the project
 */
public List<Milestone> getMilestones(int projectId,ApiFilterValue... isCompleted){
  return getEntityList(Milestone.class,TestRailCommand.GET_MILESTONES.getCommand(),Integer.toString(projectId) + isCompleted[0].append());
}","/** 
 * Returns a list of all the Milestones in the given project ID
 * @param projectId the ID of project you want the Milestones from
 * @param isCompleted only accepts ApiFilter.IS_COMPLETED (numerical boolean {0|1})
 * @return the list of all the Milestones in the project
 */
public List<Milestone> getMilestones(int projectId,ApiFilterValue... isCompleted){
  return getEntityList(Milestone.class,TestRailCommand.GET_MILESTONES.getCommand(),Integer.toString(projectId) + (isCompleted.length > 0 ? isCompleted[0].append() : null));
}",0.9673704414587332
35158,"/** 
 * Posts the given String to the given TestRails end-point
 * @param apiCall The end-point that expects to receive the entities (e.g. ""add_result"")
 * @param urlParams The remainder of the URL required for the POST. It is up to you to get this part right
 * @param entity The BaseEntity object to use at the POST body
 * @return The Content of the HTTP Response
 */
private HttpResponse postRESTBody(String apiCall,String urlParams,BaseEntity entity){
  HttpClient httpClient=new DefaultHttpClient();
  String completeUrl=buildRequestURL(apiCall,urlParams);
  try {
    HttpPost request=new HttpPost(completeUrl);
    String authentication=HTTPUtils.encodeAuthenticationBase64(username,password);
    request.addHeader(""String_Node_Str"",""String_Node_Str"" + authentication);
    request.addHeader(""String_Node_Str"",""String_Node_Str"");
    ObjectMapper mapper=new ObjectMapper();
    mapper.setSerializationInclusion(JsonSerialize.Inclusion.NON_NULL);
    String body=mapper.writeValueAsString(entity);
    request.setEntity(new StringEntity(body));
    HttpResponse response=httpClient.execute(request);
    if (response.getStatusLine().getStatusCode() != 200) {
      Error error=JSONUtils.getMappedJsonObject(Error.class,utils.getContentsFromHttpResponse(response));
      log.error(""String_Node_Str"",response.getStatusLine().getStatusCode());
      log.error(""String_Node_Str"",error.getError());
    }
    return response;
  }
 catch (  IOException e) {
    log.error(String.format(""String_Node_Str"",completeUrl),e.toString());
    throw new RuntimeException(String.format(""String_Node_Str"",completeUrl));
  }
 finally {
    httpClient.getConnectionManager().shutdown();
  }
}","/** 
 * Posts the given String to the given TestRails end-point
 * @param apiCall The end-point that expects to receive the entities (e.g. ""add_result"")
 * @param urlParams The remainder of the URL required for the POST. It is up to you to get this part right
 * @param entity The BaseEntity object to use at the POST body
 * @return The Content of the HTTP Response
 */
private HttpResponse postRESTBody(String apiCall,String urlParams,BaseEntity entity){
  HttpClient httpClient=new DefaultHttpClient();
  String completeUrl=buildRequestURL(apiCall,urlParams);
  try {
    HttpPost request=new HttpPost(completeUrl);
    String authentication=HTTPUtils.encodeAuthenticationBase64(username,password);
    request.addHeader(""String_Node_Str"",""String_Node_Str"" + authentication);
    request.addHeader(""String_Node_Str"",""String_Node_Str"");
    ObjectMapper mapper=new ObjectMapper();
    mapper.setSerializationInclusion(JsonSerialize.Inclusion.NON_NULL);
    byte[] body=mapper.writeValueAsBytes(entity);
    request.setEntity(new ByteArrayEntity(body));
    HttpResponse response=httpClient.execute(request);
    if (response.getStatusLine().getStatusCode() != 200) {
      Error error=JSONUtils.getMappedJsonObject(Error.class,utils.getContentsFromHttpResponse(response));
      log.error(""String_Node_Str"",response.getStatusLine().getStatusCode());
      log.error(""String_Node_Str"",error.getError());
      request.addHeader(""String_Node_Str"",""String_Node_Str"");
    }
    return response;
  }
 catch (  IOException e) {
    log.error(String.format(""String_Node_Str"",completeUrl),e.toString());
    throw new RuntimeException(String.format(""String_Node_Str"",completeUrl));
  }
 finally {
    httpClient.getConnectionManager().shutdown();
  }
}",0.9673469387755104
35159,"/** 
 * Posts the given String to the given TestRails end-point
 * @param apiCall The end-point that expects to receive the entities (e.g. ""add_result"")
 * @param urlParams The remainder of the URL required for the POST. It is up to you to get this part right
 * @param entity The BaseEntity object to use at the POST body
 * @param returnEntityType The Class of the return type you wish to receive (helps avoid casting from the calling method)
 * @return The Content of the HTTP Response
 */
private <T extends BaseEntity>T postRESTBodyReturn(String apiCall,String urlParams,BaseEntity entity,Class<T> returnEntityType){
  HttpClient httpClient=new DefaultHttpClient();
  String completeUrl=buildRequestURL(apiCall,urlParams);
  try {
    HttpPost request=new HttpPost(completeUrl);
    String authentication=HTTPUtils.encodeAuthenticationBase64(username,password);
    request.addHeader(""String_Node_Str"",""String_Node_Str"" + authentication);
    request.addHeader(""String_Node_Str"",""String_Node_Str"");
    ObjectMapper mapper=new ObjectMapper();
    mapper.setSerializationInclusion(JsonSerialize.Inclusion.NON_NULL);
    String body=mapper.writeValueAsString(entity);
    request.setEntity(new StringEntity(body));
    HttpResponse response=httpClient.execute(request);
    if (response.getStatusLine().getStatusCode() != 200) {
      Error error=JSONUtils.getMappedJsonObject(Error.class,utils.getContentsFromHttpResponse(response));
      log.error(""String_Node_Str"",response.getStatusLine().getStatusCode());
      log.error(""String_Node_Str"",error.getError());
    }
 else     if (response.getStatusLine().getStatusCode() == 200) {
      log.info(""String_Node_Str"");
      return JSONUtils.getMappedJsonObject(returnEntityType,utils.getContentsFromHttpResponse(response));
    }
 else {
      log.error(""String_Node_Str"");
    }
  }
 catch (  IOException e) {
    log.error(String.format(""String_Node_Str"",completeUrl),e);
    throw new RuntimeException(String.format(""String_Node_Str"",completeUrl),e);
  }
 finally {
    httpClient.getConnectionManager().shutdown();
  }
  return null;
}","/** 
 * Posts the given String to the given TestRails end-point
 * @param apiCall The end-point that expects to receive the entities (e.g. ""add_result"")
 * @param urlParams The remainder of the URL required for the POST. It is up to you to get this part right
 * @param entity The BaseEntity object to use at the POST body
 * @param returnEntityType The Class of the return type you wish to receive (helps avoid casting from the calling method)
 * @return The Content of the HTTP Response
 */
private <T extends BaseEntity>T postRESTBodyReturn(String apiCall,String urlParams,BaseEntity entity,Class<T> returnEntityType){
  HttpClient httpClient=new DefaultHttpClient();
  String completeUrl=buildRequestURL(apiCall,urlParams);
  try {
    HttpPost request=new HttpPost(completeUrl);
    String authentication=HTTPUtils.encodeAuthenticationBase64(username,password);
    request.addHeader(""String_Node_Str"",""String_Node_Str"" + authentication);
    request.addHeader(""String_Node_Str"",""String_Node_Str"");
    request.addHeader(""String_Node_Str"",""String_Node_Str"");
    ObjectMapper mapper=new ObjectMapper();
    mapper.setSerializationInclusion(JsonSerialize.Inclusion.NON_NULL);
    byte[] body=mapper.writeValueAsBytes(entity);
    request.setEntity(new ByteArrayEntity(body));
    HttpResponse response=httpClient.execute(request);
    if (response.getStatusLine().getStatusCode() != 200) {
      Error error=JSONUtils.getMappedJsonObject(Error.class,utils.getContentsFromHttpResponse(response));
      log.error(""String_Node_Str"",response.getStatusLine().getStatusCode());
      log.error(""String_Node_Str"",error.getError());
    }
 else     if (response.getStatusLine().getStatusCode() == 200) {
      log.info(""String_Node_Str"");
      return JSONUtils.getMappedJsonObject(returnEntityType,utils.getContentsFromHttpResponse(response));
    }
 else {
      log.error(""String_Node_Str"");
    }
  }
 catch (  IOException e) {
    log.error(String.format(""String_Node_Str"",completeUrl),e);
    throw new RuntimeException(String.format(""String_Node_Str"",completeUrl),e);
  }
 finally {
    httpClient.getConnectionManager().shutdown();
  }
  return null;
}",0.9764816556914392
35160,"public static void main(String[] args) throws IOException {
  Thread statPrinter=new Thread(new PrintStat(counters));
  try {
    log.info(""String_Node_Str"");
    Options options=new Options();
    options.addOption(""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"");
    options.addOption(""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"");
    options.addOption(""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"");
    options.addOption(""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"");
    options.addOption(""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"");
    options.addOption(""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"");
    options.addOption(""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"");
    options.addOption(""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"");
    options.addOption(""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"");
    options.addOption(""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"");
    options.addOption(""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"");
    options.addOption(""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"");
    options.addOption(""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"");
    options.addOption(""String_Node_Str"",""String_Node_Str"",false,""String_Node_Str"");
    options.addOption(""String_Node_Str"",""String_Node_Str"",false,""String_Node_Str"");
    CommandLineParser parser=new PosixParser();
    CommandLine cl=parser.parse(options,args,false);
    if (args.length == 0 || cl.hasOption(""String_Node_Str"")) {
      logUsage(options);
      return;
    }
    if (cl.hasOption(""String_Node_Str"")) {
      rwThrottle=Integer.parseInt(cl.getOptionValue(""String_Node_Str""));
    }
 else {
      rwThrottle=Constants.READLOAD;
    }
    params=Utils.parseParameters(cl);
    AerospikeClient client=new AerospikeClient(params.host,params.port);
    if (!client.isConnected()) {
      log.error(""String_Node_Str"" + params.host + ""String_Node_Str""+ params.port);
      return;
    }
    if (cl.hasOption(""String_Node_Str"")) {
      log.setLevel(Level.DEBUG);
    }
    int cpus=Runtime.getRuntime().availableProcessors();
    nWriterThreads=cpus * scaleFactor;
    nReaderThreads=cpus;
    if (cl.hasOption(""String_Node_Str"")) {
      nWriterThreads=Integer.parseInt(cl.getOptionValue(""String_Node_Str""));
      nWriterThreads=(nWriterThreads > 0 ? (nWriterThreads > Constants.MAX_THREADS ? Constants.MAX_THREADS : nWriterThreads) : 1);
      log.debug(""String_Node_Str"" + nWriterThreads);
    }
    writerPool=Executors.newFixedThreadPool(nWriterThreads);
    if (cl.hasOption(""String_Node_Str"")) {
      nReaderThreads=Integer.parseInt(cl.getOptionValue(""String_Node_Str""));
      nReaderThreads=(nReaderThreads > 0 ? (nReaderThreads > Constants.MAX_THREADS ? Constants.MAX_THREADS : nReaderThreads) : 1);
      log.debug(""String_Node_Str"" + nReaderThreads);
    }
    String columnDefinitionFileName=cl.getOptionValue(""String_Node_Str"",null);
    log.debug(""String_Node_Str"" + columnDefinitionFileName);
    if (columnDefinitionFileName == null) {
      log.error(""String_Node_Str"");
      return;
    }
    File columnDefinitionFile=new File(columnDefinitionFileName);
    if (!columnDefinitionFile.exists()) {
      log.error(""String_Node_Str"" + Utils.getFileName(columnDefinitionFileName));
      return;
    }
    String[] files=cl.getArgs();
    if (files.length == 0) {
      log.error(""String_Node_Str"");
      return;
    }
    List<String> allFileNames=new ArrayList<String>();
    allFileNames=Utils.getFileNames(files);
    if (allFileNames.size() == 0) {
      log.error(""String_Node_Str"");
      return;
    }
    for (int i=0; i < allFileNames.size(); i++) {
      log.debug(""String_Node_Str"" + Utils.getFileName(allFileNames.get(i)));
      File file=new File(allFileNames.get(i));
      counters.write.recordTotal=counters.write.recordTotal + file.length();
    }
    allFileNames.remove(columnDefinitionFileName);
    log.info(""String_Node_Str"" + allFileNames.size());
    metadataColumnDefs=new ArrayList<ColumnDefinition>();
    binColumnDefs=new ArrayList<ColumnDefinition>();
    metadataConfigs=new HashMap<String,String>();
    if (Parser.processJSONColumnDefinitions(columnDefinitionFile,metadataConfigs,metadataColumnDefs,binColumnDefs,params)) {
      log.info(""String_Node_Str"");
    }
 else {
      throw new Exception(""String_Node_Str"");
    }
    String metadata;
    if ((metadata=metadataConfigs.get(Constants.INPUT_TYPE)) != null) {
      params.fileType=metadata;
      if (params.fileType.equals(Constants.CSV_FILE)) {
        metadata=metadataConfigs.get(Constants.VERSION);
        String[] vNumber=metadata.split(""String_Node_Str"");
        int v1=Integer.parseInt(vNumber[0]);
        int v2=Integer.parseInt(vNumber[1]);
        if ((v1 >= Constants.MajorV) && (v2 >= Constants.MinorV)) {
          log.debug(""String_Node_Str"" + metadata);
        }
 else         throw new Exception(""String_Node_Str"" + Constants.VERSION + ""String_Node_Str""+ metadata+ ""String_Node_Str"");
        if ((metadata=metadataConfigs.get(Constants.DELIMITER)) != null && metadata.length() == 1) {
          params.delimiter=metadata.charAt(0);
        }
 else {
          log.warn(""String_Node_Str"" + Constants.DELIMITER + ""String_Node_Str""+ metadata+ ""String_Node_Str"");
        }
        if ((metadata=metadataConfigs.get(Constants.IGNORE_FIRST_LINE)) != null) {
          params.ignoreFirstLine=metadata.equals(""String_Node_Str"");
        }
 else {
          log.warn(""String_Node_Str"" + Constants.IGNORE_FIRST_LINE + ""String_Node_Str""+ metadata+ ""String_Node_Str"");
        }
        if ((metadata=metadataConfigs.get(Constants.COLUMNS)) != null) {
          counters.write.colTotal=Integer.parseInt(metadata);
        }
 else {
          throw new Exception(""String_Node_Str"" + Constants.COLUMNS + ""String_Node_Str""+ metadata+ ""String_Node_Str"");
        }
      }
 else {
        throw new Exception(""String_Node_Str"" + params.fileType + ""String_Node_Str"");
      }
    }
 else {
      throw new Exception(""String_Node_Str"" + Constants.INPUT_TYPE + ""String_Node_Str"");
    }
    if (params.fileType.equals(Constants.CSV_FILE)) {
      List<String> binName=null;
      if (params.ignoreFirstLine) {
        String line;
        BufferedReader br=new BufferedReader(new InputStreamReader(new FileInputStream(allFileNames.get(0)),""String_Node_Str""));
        if ((line=br.readLine()) != null) {
          binName=Parser.getCSVRawColumns(line,params.delimiter);
          br.close();
          if (binName.size() != counters.write.colTotal) {
            throw new Exception(""String_Node_Str"" + ""String_Node_Str"" + Utils.getFileName(allFileNames.get(0)) + ""String_Node_Str""+ Utils.getFileName(columnDefinitionFileName));
          }
        }
      }
      for (int i=0; i < metadataColumnDefs.size(); i++) {
        if (metadataColumnDefs.get(i).staticValue) {
        }
 else {
          if (metadataColumnDefs.get(i).binValuePos < 0) {
            if (metadataColumnDefs.get(i).columnName == null) {
              if (metadataColumnDefs.get(i).jsonPath == null) {
                log.error(""String_Node_Str"" + metadataColumnDefs.toString());
              }
 else {
              }
            }
 else {
              if (params.ignoreFirstLine) {
                if (binName.indexOf(metadataColumnDefs.get(i).binValueHeader) != -1) {
                  metadataColumnDefs.get(i).binValuePos=binName.indexOf(metadataColumnDefs.get(i).binValueHeader);
                }
 else {
                  throw new Exception(""String_Node_Str"" + metadataColumnDefs.get(i).binValueHeader);
                }
              }
            }
          }
 else {
            if (params.ignoreFirstLine)             metadataColumnDefs.get(i).binValueHeader=binName.get(metadataColumnDefs.get(i).binValuePos);
          }
        }
        if (metadataColumnDefs.get(i).binValuePos < 0) {
          throw new Exception(""String_Node_Str"" + metadataColumnDefs.get(i));
        }
        if (metadataColumnDefs.get(i).srcType == null) {
          throw new Exception(""String_Node_Str"" + metadataColumnDefs.get(i));
        }
        if (metadataColumnDefs.get(i).binNameHeader == Constants.SET && !metadataColumnDefs.get(i).srcType.equals(SrcColumnType.STRING)) {
          throw new Exception(""String_Node_Str"" + metadataColumnDefs.get(i));
        }
        if (metadataColumnDefs.get(i).binNameHeader.equalsIgnoreCase(Constants.SET) && params.set != null) {
          throw new Exception(""String_Node_Str"");
        }
      }
      for (int i=0; i < binColumnDefs.size(); i++) {
        if (binColumnDefs.get(i).staticName) {
        }
 else {
          if (binColumnDefs.get(i).binNamePos < 0) {
            if (binColumnDefs.get(i).columnName == null) {
              if (binColumnDefs.get(i).jsonPath == null) {
                log.error(""String_Node_Str"");
              }
 else {
              }
            }
 else {
              if (params.ignoreFirstLine) {
                if (binName.indexOf(binColumnDefs.get(i).binNameHeader) != -1) {
                  binColumnDefs.get(i).binNamePos=binName.indexOf(binColumnDefs.get(i).binNameHeader);
                }
 else {
                  throw new Exception(""String_Node_Str"" + binColumnDefs.get(i).binNameHeader);
                }
              }
            }
          }
 else {
            if (params.ignoreFirstLine)             binColumnDefs.get(i).binNameHeader=binName.get(binColumnDefs.get(i).binNamePos);
          }
        }
        if (binColumnDefs.get(i).staticValue) {
        }
 else {
          if (binColumnDefs.get(i).binValuePos < 0) {
            if (binColumnDefs.get(i).columnName == null) {
              if (binColumnDefs.get(i).jsonPath == null) {
                log.error(""String_Node_Str"");
              }
 else {
              }
            }
 else {
              if (params.ignoreFirstLine)               binColumnDefs.get(i).binValuePos=binName.indexOf(binColumnDefs.get(i).binValueHeader);
            }
          }
 else {
            if (params.ignoreFirstLine)             binColumnDefs.get(i).binValueHeader=binName.get(binColumnDefs.get(i).binValuePos);
          }
          if (binColumnDefs.get(i).binValuePos < 0 || binColumnDefs.get(i).binValueHeader == null) {
            throw new Exception(""String_Node_Str"" + binColumnDefs.get(i));
          }
          if (binColumnDefs.get(i).srcType == null) {
            throw new Exception(""String_Node_Str"" + binColumnDefs.get(i));
          }
          if ((binColumnDefs.get(i).srcType.equals(SrcColumnType.TIMESTAMP) || binColumnDefs.get(i).srcType.equals(SrcColumnType.BLOB)) && binColumnDefs.get(i).dstType == null) {
            throw new Exception(""String_Node_Str"" + binColumnDefs.get(i));
          }
          if (binColumnDefs.get(i).dstType != null && binColumnDefs.get(i).encoding == null) {
            throw new Exception(""String_Node_Str"" + binColumnDefs.get(i));
          }
          if (binColumnDefs.get(i).srcType.equals(SrcColumnType.BLOB) && !binColumnDefs.get(i).encoding.equals(Constants.HEX_ENCODING)) {
            throw new Exception(""String_Node_Str"" + binColumnDefs.get(i));
          }
        }
        if ((binColumnDefs.get(i).binNamePos == binColumnDefs.get(i).binValuePos) && (binColumnDefs.get(i).binNamePos != -1)) {
          throw new Exception(""String_Node_Str"" + binColumnDefs.get(i));
        }
        if (binColumnDefs.get(i).binNameHeader == null && binColumnDefs.get(i).binNameHeader.length() > Constants.BIN_NAME_LENGTH) {
          throw new Exception(""String_Node_Str"" + binColumnDefs.get(i));
        }
      }
    }
    log.info(params.toString());
    log.debug(""String_Node_Str"" + metadataColumnDefs);
    log.debug(""String_Node_Str"" + binColumnDefs);
    statPrinter.start();
    ExecutorService readerPool=Executors.newFixedThreadPool(nReaderThreads > allFileNames.size() ? allFileNames.size() : nReaderThreads);
    log.info(""String_Node_Str"" + nReaderThreads);
    for (    String aFile : allFileNames) {
      log.debug(""String_Node_Str"" + aFile);
      readerPool.submit(new AerospikeLoad(aFile,client,params));
    }
    readerPool.shutdown();
    log.info(""String_Node_Str"");
    while (!readerPool.isTerminated())     ;
    log.info(""String_Node_Str"");
    writerPool.shutdown();
    log.info(""String_Node_Str"");
    while (!writerPool.isTerminated())     ;
    log.info(""String_Node_Str"");
    log.info(""String_Node_Str"" + counters.write.writeCount.get() + ""String_Node_Str""+ ""String_Node_Str""+ (counters.write.writeErrors.get() + counters.write.readErrors.get() + counters.write.processingErrors.get())+ ""String_Node_Str""+ (counters.write.writeErrors.get())+ ""String_Node_Str""+ counters.write.readErrors.get()+ ""String_Node_Str""+ counters.write.processingErrors.get()+ ""String_Node_Str"");
  }
 catch (  Exception e) {
    log.error(e);
    if (log.isDebugEnabled()) {
      e.printStackTrace();
    }
  }
 finally {
    statPrinter.interrupt();
    log.info(""String_Node_Str"");
  }
}","public static void main(String[] args) throws IOException {
  Thread statPrinter=new Thread(new PrintStat(counters));
  try {
    log.info(""String_Node_Str"");
    Options options=new Options();
    options.addOption(""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"");
    options.addOption(""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"");
    options.addOption(""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"");
    options.addOption(""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"");
    options.addOption(""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"");
    options.addOption(""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"");
    options.addOption(""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"");
    options.addOption(""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"");
    options.addOption(""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"");
    options.addOption(""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"");
    options.addOption(""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"");
    options.addOption(""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"");
    options.addOption(""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"");
    options.addOption(""String_Node_Str"",""String_Node_Str"",false,""String_Node_Str"");
    options.addOption(""String_Node_Str"",""String_Node_Str"",false,""String_Node_Str"");
    CommandLineParser parser=new PosixParser();
    CommandLine cl=parser.parse(options,args,false);
    if (args.length == 0 || cl.hasOption(""String_Node_Str"")) {
      logUsage(options);
      return;
    }
    if (cl.hasOption(""String_Node_Str"")) {
      rwThrottle=Integer.parseInt(cl.getOptionValue(""String_Node_Str""));
    }
 else {
      rwThrottle=Constants.READLOAD;
    }
    params=Utils.parseParameters(cl);
    AerospikeClient client=new AerospikeClient(params.host,params.port);
    if (!client.isConnected()) {
      log.error(""String_Node_Str"" + params.host + ""String_Node_Str""+ params.port);
      return;
    }
    if (cl.hasOption(""String_Node_Str"")) {
      log.setLevel(Level.DEBUG);
    }
    int cpus=Runtime.getRuntime().availableProcessors();
    nWriterThreads=cpus * scaleFactor;
    nReaderThreads=cpus;
    if (cl.hasOption(""String_Node_Str"")) {
      nWriterThreads=Integer.parseInt(cl.getOptionValue(""String_Node_Str""));
      nWriterThreads=(nWriterThreads > 0 ? (nWriterThreads > Constants.MAX_THREADS ? Constants.MAX_THREADS : nWriterThreads) : 1);
      log.debug(""String_Node_Str"" + nWriterThreads);
    }
    writerPool=Executors.newFixedThreadPool(nWriterThreads);
    if (cl.hasOption(""String_Node_Str"")) {
      nReaderThreads=Integer.parseInt(cl.getOptionValue(""String_Node_Str""));
      nReaderThreads=(nReaderThreads > 0 ? (nReaderThreads > Constants.MAX_THREADS ? Constants.MAX_THREADS : nReaderThreads) : 1);
      log.debug(""String_Node_Str"" + nReaderThreads);
    }
    String columnDefinitionFileName=cl.getOptionValue(""String_Node_Str"",null);
    log.debug(""String_Node_Str"" + columnDefinitionFileName);
    if (columnDefinitionFileName == null) {
      log.error(""String_Node_Str"");
      return;
    }
    File columnDefinitionFile=new File(columnDefinitionFileName);
    if (!columnDefinitionFile.exists()) {
      log.error(""String_Node_Str"" + Utils.getFileName(columnDefinitionFileName));
      return;
    }
    String[] files=cl.getArgs();
    if (files.length == 0) {
      log.error(""String_Node_Str"");
      return;
    }
    List<String> allFileNames=new ArrayList<String>();
    allFileNames=Utils.getFileNames(files);
    if (allFileNames.size() == 0) {
      log.error(""String_Node_Str"");
      return;
    }
    for (int i=0; i < allFileNames.size(); i++) {
      log.debug(""String_Node_Str"" + Utils.getFileName(allFileNames.get(i)));
      File file=new File(allFileNames.get(i));
      counters.write.recordTotal=counters.write.recordTotal + file.length();
    }
    allFileNames.remove(columnDefinitionFileName);
    log.info(""String_Node_Str"" + allFileNames.size());
    metadataColumnDefs=new ArrayList<ColumnDefinition>();
    binColumnDefs=new ArrayList<ColumnDefinition>();
    metadataConfigs=new HashMap<String,String>();
    if (Parser.processJSONColumnDefinitions(columnDefinitionFile,metadataConfigs,metadataColumnDefs,binColumnDefs,params)) {
      log.info(""String_Node_Str"");
    }
 else {
      throw new Exception(""String_Node_Str"");
    }
    String metadata;
    if ((metadata=metadataConfigs.get(Constants.INPUT_TYPE)) != null) {
      params.fileType=metadata;
      if (params.fileType.equals(Constants.CSV_FILE)) {
        metadata=metadataConfigs.get(Constants.VERSION);
        String[] vNumber=metadata.split(""String_Node_Str"");
        int v1=Integer.parseInt(vNumber[0]);
        int v2=Integer.parseInt(vNumber[1]);
        if ((v1 >= Constants.MajorV) && (v2 >= Constants.MinorV)) {
          log.debug(""String_Node_Str"" + metadata);
        }
 else         throw new Exception(""String_Node_Str"" + Constants.VERSION + ""String_Node_Str""+ metadata+ ""String_Node_Str"");
        if ((metadata=metadataConfigs.get(Constants.DELIMITER)) != null && metadata.length() == 1) {
          params.delimiter=metadata.charAt(0);
        }
 else {
          log.warn(""String_Node_Str"" + Constants.DELIMITER + ""String_Node_Str""+ metadata+ ""String_Node_Str"");
        }
        if ((metadata=metadataConfigs.get(Constants.IGNORE_FIRST_LINE)) != null) {
          params.ignoreFirstLine=metadata.equals(""String_Node_Str"");
        }
 else {
          log.warn(""String_Node_Str"" + Constants.IGNORE_FIRST_LINE + ""String_Node_Str""+ metadata+ ""String_Node_Str"");
        }
        if ((metadata=metadataConfigs.get(Constants.COLUMNS)) != null) {
          counters.write.colTotal=Integer.parseInt(metadata);
        }
 else {
          throw new Exception(""String_Node_Str"" + Constants.COLUMNS + ""String_Node_Str""+ metadata+ ""String_Node_Str"");
        }
      }
 else {
        throw new Exception(""String_Node_Str"" + params.fileType + ""String_Node_Str"");
      }
    }
 else {
      throw new Exception(""String_Node_Str"" + Constants.INPUT_TYPE + ""String_Node_Str"");
    }
    if (params.fileType.equals(Constants.CSV_FILE)) {
      List<String> binName=null;
      if (params.ignoreFirstLine) {
        String line;
        BufferedReader br=new BufferedReader(new InputStreamReader(new FileInputStream(allFileNames.get(0)),""String_Node_Str""));
        if ((line=br.readLine()) != null) {
          binName=Parser.getCSVRawColumns(line,params.delimiter);
          br.close();
          if (binName.size() != counters.write.colTotal) {
            throw new Exception(""String_Node_Str"" + ""String_Node_Str"" + Utils.getFileName(allFileNames.get(0)) + ""String_Node_Str""+ Utils.getFileName(columnDefinitionFileName));
          }
        }
      }
      for (int i=0; i < metadataColumnDefs.size(); i++) {
        if (metadataColumnDefs.get(i).staticValue) {
        }
 else {
          if (metadataColumnDefs.get(i).binValuePos < 0) {
            if (metadataColumnDefs.get(i).columnName == null) {
              if (metadataColumnDefs.get(i).jsonPath == null) {
                log.error(""String_Node_Str"" + metadataColumnDefs.toString());
              }
 else {
              }
            }
 else {
              if (params.ignoreFirstLine) {
                if (binName.indexOf(metadataColumnDefs.get(i).binValueHeader) != -1) {
                  metadataColumnDefs.get(i).binValuePos=binName.indexOf(metadataColumnDefs.get(i).binValueHeader);
                }
 else {
                  throw new Exception(""String_Node_Str"" + metadataColumnDefs.get(i).binValueHeader);
                }
              }
            }
          }
 else {
            if (params.ignoreFirstLine)             metadataColumnDefs.get(i).binValueHeader=binName.get(metadataColumnDefs.get(i).binValuePos);
          }
        }
        if (metadataColumnDefs.get(i).binValuePos < 0) {
          throw new Exception(""String_Node_Str"" + metadataColumnDefs.get(i));
        }
        if (metadataColumnDefs.get(i).srcType == null) {
          throw new Exception(""String_Node_Str"" + metadataColumnDefs.get(i));
        }
        if (metadataColumnDefs.get(i).binNameHeader == Constants.SET && !metadataColumnDefs.get(i).srcType.equals(SrcColumnType.STRING)) {
          throw new Exception(""String_Node_Str"" + metadataColumnDefs.get(i));
        }
        if (metadataColumnDefs.get(i).binNameHeader.equalsIgnoreCase(Constants.SET) && params.set != null) {
          throw new Exception(""String_Node_Str"");
        }
      }
      for (int i=0; i < binColumnDefs.size(); i++) {
        if (binColumnDefs.get(i).staticName) {
        }
 else {
          if (binColumnDefs.get(i).binNamePos < 0) {
            if (binColumnDefs.get(i).columnName == null) {
              if (binColumnDefs.get(i).jsonPath == null) {
                log.error(""String_Node_Str"");
              }
 else {
              }
            }
 else {
              if (params.ignoreFirstLine) {
                if (binName.indexOf(binColumnDefs.get(i).binNameHeader) != -1) {
                  binColumnDefs.get(i).binNamePos=binName.indexOf(binColumnDefs.get(i).binNameHeader);
                }
 else {
                  throw new Exception(""String_Node_Str"" + binColumnDefs.get(i).binNameHeader);
                }
              }
            }
          }
 else {
            if (params.ignoreFirstLine)             binColumnDefs.get(i).binNameHeader=binName.get(binColumnDefs.get(i).binNamePos);
          }
        }
        if (binColumnDefs.get(i).staticValue) {
        }
 else {
          if (binColumnDefs.get(i).binValuePos < 0) {
            if (binColumnDefs.get(i).columnName == null) {
              if (binColumnDefs.get(i).jsonPath == null) {
                log.error(""String_Node_Str"");
              }
 else {
              }
            }
 else {
              if (params.ignoreFirstLine)               binColumnDefs.get(i).binValuePos=binName.indexOf(binColumnDefs.get(i).binValueHeader);
            }
          }
 else {
            if (params.ignoreFirstLine)             binColumnDefs.get(i).binValueHeader=binName.get(binColumnDefs.get(i).binValuePos);
          }
          if (binColumnDefs.get(i).binValuePos < 0 && binColumnDefs.get(i).binValueHeader == null) {
            throw new Exception(""String_Node_Str"" + binColumnDefs.get(i));
          }
          if (binColumnDefs.get(i).srcType == null) {
            throw new Exception(""String_Node_Str"" + binColumnDefs.get(i));
          }
          if ((binColumnDefs.get(i).srcType.equals(SrcColumnType.TIMESTAMP) || binColumnDefs.get(i).srcType.equals(SrcColumnType.BLOB)) && binColumnDefs.get(i).dstType == null) {
            throw new Exception(""String_Node_Str"" + binColumnDefs.get(i));
          }
          if (binColumnDefs.get(i).dstType != null && binColumnDefs.get(i).encoding == null) {
            throw new Exception(""String_Node_Str"" + binColumnDefs.get(i));
          }
          if (binColumnDefs.get(i).srcType.equals(SrcColumnType.BLOB) && !binColumnDefs.get(i).encoding.equals(Constants.HEX_ENCODING)) {
            throw new Exception(""String_Node_Str"" + binColumnDefs.get(i));
          }
        }
        if ((binColumnDefs.get(i).binNamePos == binColumnDefs.get(i).binValuePos) && (binColumnDefs.get(i).binNamePos != -1)) {
          throw new Exception(""String_Node_Str"" + binColumnDefs.get(i));
        }
        if (binColumnDefs.get(i).binNameHeader == null && binColumnDefs.get(i).binNameHeader.length() > Constants.BIN_NAME_LENGTH) {
          throw new Exception(""String_Node_Str"" + binColumnDefs.get(i));
        }
      }
    }
    log.info(params.toString());
    log.debug(""String_Node_Str"" + metadataColumnDefs);
    log.debug(""String_Node_Str"" + binColumnDefs);
    statPrinter.start();
    ExecutorService readerPool=Executors.newFixedThreadPool(nReaderThreads > allFileNames.size() ? allFileNames.size() : nReaderThreads);
    log.info(""String_Node_Str"" + nReaderThreads);
    for (    String aFile : allFileNames) {
      log.debug(""String_Node_Str"" + aFile);
      readerPool.submit(new AerospikeLoad(aFile,client,params));
    }
    readerPool.shutdown();
    log.info(""String_Node_Str"");
    while (!readerPool.isTerminated())     ;
    log.info(""String_Node_Str"");
    writerPool.shutdown();
    log.info(""String_Node_Str"");
    while (!writerPool.isTerminated())     ;
    log.info(""String_Node_Str"");
    log.info(""String_Node_Str"" + counters.write.writeCount.get() + ""String_Node_Str""+ ""String_Node_Str""+ (counters.write.writeErrors.get() + counters.write.readErrors.get() + counters.write.processingErrors.get())+ ""String_Node_Str""+ (counters.write.writeErrors.get())+ ""String_Node_Str""+ counters.write.readErrors.get()+ ""String_Node_Str""+ counters.write.processingErrors.get()+ ""String_Node_Str"");
  }
 catch (  Exception e) {
    log.error(e);
    if (log.isDebugEnabled()) {
      e.printStackTrace();
    }
  }
 finally {
    statPrinter.interrupt();
    log.info(""String_Node_Str"");
  }
}",0.9998472116119176
35161,"@Override protected synchronized Object doInBackground() throws Exception {
  try {
    setProgress(INITIALIZING);
    frameGrabber=cameraDevice.createFrameGrabber();
    frameGrabber.setImageMode(ImageMode.COLOR);
    if (trackingSettings.useOpenCL) {
      frameGrabber.setPixelFormat(PIX_FMT_RGBA);
    }
    frameGrabber.start();
    IplImage image=frameGrabber.grab();
    final IplImage initImage=image;
    final int initWidth=initImage.width();
    final int initHeight=initImage.height();
    final int initChannels=trackingSettings.useOpenCL ? 4 : initImage.nChannels();
    final int initDepth=initImage.depth();
    if (initWidth != cameraDevice.imageWidth || initHeight != cameraDevice.imageHeight) {
      cameraDevice.rescale(initWidth,initHeight);
    }
    if (monitorWindows != null) {
      final double initScale=trackingSettings.getMonitorWindowsScale();
      EventQueue.invokeLater(new Runnable(){
        public void run(){
          for (int i=0; i < monitorWindows.length; i++) {
            monitorWindows[i].setCanvasSize((int)Math.round(initWidth * initScale),(int)Math.round(initHeight * initScale));
            monitorWindows[i].setTitle(monitorWindowsTitles[i] + ""String_Node_Str"" + initWidth+ ""String_Node_Str""+ initHeight+ ""String_Node_Str""+ (initDepth & ~IPL_DEPTH_SIGN)+ ""String_Node_Str""+ frameGrabber.getGamma()+ ""String_Node_Str"");
          }
        }
      }
);
      CanvasFrame.tile(monitorWindows);
      CanvasFrame.global=monitorWindows[0];
    }
    final int minLevel=alignerSettings.getPyramidLevelMin();
    undistortedCameraImage=IplImage.create(initWidth >> minLevel,initHeight >> minLevel,initDepth,initChannels);
    distortedProjectorImage=IplImage.create(projectorDevice.imageWidth,projectorDevice.imageHeight,IPL_DEPTH_8U,initChannels);
    BufferRing.BufferFactory<ProjectorBuffer> projectorBufferFactory;
    projectorBufferFactory=new BufferRing.BufferFactory<ProjectorBuffer>(){
      public ProjectorBuffer create(){
        return new ProjectorBuffer(distortedProjectorImage,false);
      }
    }
;
    if (trackingSettings.useOpenCL) {
      GLContext shareWith=null;
      if (projectorFrame instanceof GLCanvasFrame) {
        shareWith=((GLCanvasFrame)projectorFrame).getGLCanvas().getContext();
      }
      contextCL=new JavaCVCL(shareWith);
      grabbedImageCL=contextCL.getCLContext().createImage2d(initWidth,initHeight,new CLImageFormat(frameGrabber.getSensorPattern() != -1L ? CLImageFormat.ChannelOrder.R : CLImageFormat.ChannelOrder.RGBA,ChannelType.UNORM_INT8));
      undistortedCameraImageCL=contextCL.getCLContext().createImage2d(undistortedCameraImage.width(),undistortedCameraImage.height(),new CLImageFormat(CLImageFormat.ChannelOrder.RGBA,ChannelType.FLOAT));
      cameraDevice.setMapsPyramidLevel(minLevel);
      cameraMapxCL=contextCL.writeImage(cameraMapxCL,cameraDevice.getUndistortMap1(),false);
      cameraMapyCL=contextCL.writeImage(cameraMapyCL,cameraDevice.getUndistortMap2(),false);
      if (projectorFrame != null) {
        projectorMapxCL=contextCL.writeImage(projectorMapxCL,projectorDevice.getDistortMap1(),false);
        projectorMapyCL=contextCL.writeImage(projectorMapyCL,projectorDevice.getDistortMap2(),false);
        distortedProjectorImageCL=contextCL.createCLGLImageFrom(distortedProjectorImage);
      }
      projectorBufferFactory=new BufferRing.BufferFactory<ProjectorBuffer>(){
        public ProjectorBuffer create(){
          return new ProjectorBuffer(distortedProjectorImage,true);
        }
      }
;
    }
    projectorBufferRing=new BufferRing<ProjectorBuffer>(projectorBufferFactory,trackingSettings.projectorBufferingSize);
    realityAugmentor=new RealityAugmentor(realityAugmentorSettings,objectFinderSettings,markerDetectorSettings,virtualBallSettings,cameraDevice,projectorDevice,initChannels);
    handMouse=new HandMouse(handMouseSettings);
    GNImageAligner.Settings s=alignerSettings.clone();
    s.setAlphaTikhonov(0);
    s.setDeltaMin(0);
    s.setLineSearch(new double[]{1.0,1.0 / 2,1.0 / 4,1.0 / 8,1.0 / 16,1.0 / 32,1.0 / 64,1.0 / 128});
    s.setThresholdsOutlier(new double[]{0.0});
    s.setThresholdsZero(new double[]{0.0});
    reflectanceInitializer=new ReflectanceInitializer(cameraDevice,projectorDevice,initChannels,s);
    projectorInitFloatImages=reflectanceInitializer.getProjectorImages();
    projectorInitImages=new IplImage[projectorInitFloatImages.length];
    cameraInitImages=new IplImage[projectorInitFloatImages.length];
    cameraInitFloatImages=new IplImage[projectorInitFloatImages.length];
    for (int i=0; i < projectorInitFloatImages.length; i++) {
      projectorInitImages[i]=IplImage.createCompatible(distortedProjectorImage);
      cameraInitImages[i]=IplImage.create(initWidth,initHeight,initDepth,initChannels);
      cameraInitFloatImages[i]=IplImage.create(undistortedCameraImage.width(),undistortedCameraImage.height(),IPL_DEPTH_32F,initChannels);
      cvConvertScale(projectorInitFloatImages[i],projectorInitImages[i],255,0);
      projectorDevice.distort(projectorInitImages[i],distortedProjectorImage);
      cvCopy(distortedProjectorImage,projectorInitImages[i]);
    }
    reflectanceImage=IplImage.createCompatible(cameraInitFloatImages[0]);
    if (trackingSettings.useOpenCL) {
      reflectanceImageCL=contextCL.createCLImageFrom(reflectanceImage);
    }
    if (trackingSettings.outputVideoFile != null) {
      frameRecorder=new FFmpegFrameRecorder(trackingSettings.outputVideoFile,undistortedCameraImage.width(),undistortedCameraImage.height());
      frameRecorder.start();
    }
 else {
      frameRecorder=null;
    }
    boolean done=false;
    while (!done) {
      done=doTracking();
      System.gc();
      Pointer.deallocateReferences();
    }
  }
 catch (  Throwable t) {
    if (!isCancelled()) {
      while (t.getCause() != null) {
        t=t.getCause();
      }
      logger.log(Level.SEVERE,""String_Node_Str"",t);
      cancel(false);
    }
  }
  try {
    if (frameGrabber != null) {
      frameGrabber.stop();
      frameGrabber.release();
    }
  }
 catch (  Exception ex) {
    logger.log(Level.SEVERE,""String_Node_Str"",ex);
  }
 finally {
    frameGrabber=null;
  }
  try {
    if (frameRecorder != null) {
      frameRecorder.stop();
      frameRecorder.release();
    }
  }
 catch (  Exception ex) {
    logger.log(Level.SEVERE,""String_Node_Str"",ex);
  }
 finally {
    frameRecorder=null;
  }
  if (trackingSettings.useOpenCL) {
    grabbedImageCL.release();
    undistortedCameraImageCL.release();
    contextCL.releaseCLGLImage(distortedProjectorImageCL);
    reflectanceImageCL.release();
    cameraMapxCL.release();
    cameraMapyCL.release();
    projectorMapxCL.release();
    projectorMapyCL.release();
    grabbedImageCL=undistortedCameraImageCL=distortedProjectorImageCL=null;
    reflectanceImageCL=null;
    cameraMapxCL=cameraMapyCL=projectorMapxCL=projectorMapyCL=null;
    contextCL.release();
    contextCL=null;
  }
  roiPts=null;
  transformer=null;
  parameters=lastParameters=tempParameters=null;
  aligner=null;
  reflectanceInitializer=null;
  handMouse=null;
  realityAugmentor=null;
  grabbedImage=undistortedCameraImage=distortedProjectorImage=null;
  projectorInitFloatImages=projectorInitImages=null;
  cameraInitImages=cameraInitFloatImages=monitorImages=null;
  reflectanceImage=null;
  projectorBufferRing.release();
  projectorBufferRing=null;
  System.gc();
  Pointer.deallocateReferences();
  return null;
}","@Override protected synchronized Object doInBackground() throws Exception {
  try {
    setProgress(INITIALIZING);
    frameGrabber=cameraDevice.createFrameGrabber();
    frameGrabber.setImageMode(ImageMode.COLOR);
    if (trackingSettings.useOpenCL) {
      frameGrabber.setPixelFormat(AV_PIX_FMT_RGBA);
    }
    frameGrabber.start();
    IplImage image=frameGrabber.grab();
    final IplImage initImage=image;
    final int initWidth=initImage.width();
    final int initHeight=initImage.height();
    final int initChannels=trackingSettings.useOpenCL ? 4 : initImage.nChannels();
    final int initDepth=initImage.depth();
    if (initWidth != cameraDevice.imageWidth || initHeight != cameraDevice.imageHeight) {
      cameraDevice.rescale(initWidth,initHeight);
    }
    if (monitorWindows != null) {
      final double initScale=trackingSettings.getMonitorWindowsScale();
      EventQueue.invokeLater(new Runnable(){
        public void run(){
          for (int i=0; i < monitorWindows.length; i++) {
            monitorWindows[i].setCanvasSize((int)Math.round(initWidth * initScale),(int)Math.round(initHeight * initScale));
            monitorWindows[i].setTitle(monitorWindowsTitles[i] + ""String_Node_Str"" + initWidth+ ""String_Node_Str""+ initHeight+ ""String_Node_Str""+ (initDepth & ~IPL_DEPTH_SIGN)+ ""String_Node_Str""+ frameGrabber.getGamma()+ ""String_Node_Str"");
          }
        }
      }
);
      CanvasFrame.tile(monitorWindows);
      CanvasFrame.global=monitorWindows[0];
    }
    final int minLevel=alignerSettings.getPyramidLevelMin();
    undistortedCameraImage=IplImage.create(initWidth >> minLevel,initHeight >> minLevel,initDepth,initChannels);
    distortedProjectorImage=IplImage.create(projectorDevice.imageWidth,projectorDevice.imageHeight,IPL_DEPTH_8U,initChannels);
    BufferRing.BufferFactory<ProjectorBuffer> projectorBufferFactory;
    projectorBufferFactory=new BufferRing.BufferFactory<ProjectorBuffer>(){
      public ProjectorBuffer create(){
        return new ProjectorBuffer(distortedProjectorImage,false);
      }
    }
;
    if (trackingSettings.useOpenCL) {
      GLContext shareWith=null;
      if (projectorFrame instanceof GLCanvasFrame) {
        shareWith=((GLCanvasFrame)projectorFrame).getGLCanvas().getContext();
      }
      contextCL=new JavaCVCL(shareWith);
      grabbedImageCL=contextCL.getCLContext().createImage2d(initWidth,initHeight,new CLImageFormat(frameGrabber.getSensorPattern() != -1L ? CLImageFormat.ChannelOrder.R : CLImageFormat.ChannelOrder.RGBA,ChannelType.UNORM_INT8));
      undistortedCameraImageCL=contextCL.getCLContext().createImage2d(undistortedCameraImage.width(),undistortedCameraImage.height(),new CLImageFormat(CLImageFormat.ChannelOrder.RGBA,ChannelType.FLOAT));
      cameraDevice.setMapsPyramidLevel(minLevel);
      cameraMapxCL=contextCL.writeImage(cameraMapxCL,cameraDevice.getUndistortMap1(),false);
      cameraMapyCL=contextCL.writeImage(cameraMapyCL,cameraDevice.getUndistortMap2(),false);
      if (projectorFrame != null) {
        projectorMapxCL=contextCL.writeImage(projectorMapxCL,projectorDevice.getDistortMap1(),false);
        projectorMapyCL=contextCL.writeImage(projectorMapyCL,projectorDevice.getDistortMap2(),false);
        distortedProjectorImageCL=contextCL.createCLGLImageFrom(distortedProjectorImage);
      }
      projectorBufferFactory=new BufferRing.BufferFactory<ProjectorBuffer>(){
        public ProjectorBuffer create(){
          return new ProjectorBuffer(distortedProjectorImage,true);
        }
      }
;
    }
    projectorBufferRing=new BufferRing<ProjectorBuffer>(projectorBufferFactory,trackingSettings.projectorBufferingSize);
    realityAugmentor=new RealityAugmentor(realityAugmentorSettings,objectFinderSettings,markerDetectorSettings,virtualBallSettings,cameraDevice,projectorDevice,initChannels);
    handMouse=new HandMouse(handMouseSettings);
    GNImageAligner.Settings s=alignerSettings.clone();
    s.setAlphaTikhonov(0);
    s.setDeltaMin(0);
    s.setLineSearch(new double[]{1.0,1.0 / 2,1.0 / 4,1.0 / 8,1.0 / 16,1.0 / 32,1.0 / 64,1.0 / 128});
    s.setThresholdsOutlier(new double[]{0.0});
    s.setThresholdsZero(new double[]{0.0});
    reflectanceInitializer=new ReflectanceInitializer(cameraDevice,projectorDevice,initChannels,s);
    projectorInitFloatImages=reflectanceInitializer.getProjectorImages();
    projectorInitImages=new IplImage[projectorInitFloatImages.length];
    cameraInitImages=new IplImage[projectorInitFloatImages.length];
    cameraInitFloatImages=new IplImage[projectorInitFloatImages.length];
    for (int i=0; i < projectorInitFloatImages.length; i++) {
      projectorInitImages[i]=IplImage.createCompatible(distortedProjectorImage);
      cameraInitImages[i]=IplImage.create(initWidth,initHeight,initDepth,initChannels);
      cameraInitFloatImages[i]=IplImage.create(undistortedCameraImage.width(),undistortedCameraImage.height(),IPL_DEPTH_32F,initChannels);
      cvConvertScale(projectorInitFloatImages[i],projectorInitImages[i],255,0);
      projectorDevice.distort(projectorInitImages[i],distortedProjectorImage);
      cvCopy(distortedProjectorImage,projectorInitImages[i]);
    }
    reflectanceImage=IplImage.createCompatible(cameraInitFloatImages[0]);
    if (trackingSettings.useOpenCL) {
      reflectanceImageCL=contextCL.createCLImageFrom(reflectanceImage);
    }
    if (trackingSettings.outputVideoFile != null) {
      frameRecorder=new FFmpegFrameRecorder(trackingSettings.outputVideoFile,undistortedCameraImage.width(),undistortedCameraImage.height());
      frameRecorder.start();
    }
 else {
      frameRecorder=null;
    }
    boolean done=false;
    while (!done) {
      done=doTracking();
      System.gc();
      Pointer.deallocateReferences();
    }
  }
 catch (  Throwable t) {
    if (!isCancelled()) {
      while (t.getCause() != null) {
        t=t.getCause();
      }
      logger.log(Level.SEVERE,""String_Node_Str"",t);
      cancel(false);
    }
  }
  try {
    if (frameGrabber != null) {
      frameGrabber.stop();
      frameGrabber.release();
    }
  }
 catch (  Exception ex) {
    logger.log(Level.SEVERE,""String_Node_Str"",ex);
  }
 finally {
    frameGrabber=null;
  }
  try {
    if (frameRecorder != null) {
      frameRecorder.stop();
      frameRecorder.release();
    }
  }
 catch (  Exception ex) {
    logger.log(Level.SEVERE,""String_Node_Str"",ex);
  }
 finally {
    frameRecorder=null;
  }
  if (trackingSettings.useOpenCL) {
    grabbedImageCL.release();
    undistortedCameraImageCL.release();
    contextCL.releaseCLGLImage(distortedProjectorImageCL);
    reflectanceImageCL.release();
    cameraMapxCL.release();
    cameraMapyCL.release();
    projectorMapxCL.release();
    projectorMapyCL.release();
    grabbedImageCL=undistortedCameraImageCL=distortedProjectorImageCL=null;
    reflectanceImageCL=null;
    cameraMapxCL=cameraMapyCL=projectorMapxCL=projectorMapyCL=null;
    contextCL.release();
    contextCL=null;
  }
  roiPts=null;
  transformer=null;
  parameters=lastParameters=tempParameters=null;
  aligner=null;
  reflectanceInitializer=null;
  handMouse=null;
  realityAugmentor=null;
  grabbedImage=undistortedCameraImage=distortedProjectorImage=null;
  projectorInitFloatImages=projectorInitImages=null;
  cameraInitImages=cameraInitFloatImages=monitorImages=null;
  reflectanceImage=null;
  projectorBufferRing.release();
  projectorBufferRing=null;
  System.gc();
  Pointer.deallocateReferences();
  return null;
}",0.9997988871757056
35162,"private static void logMethod(MethodHookParam param){
  boolean isOutputJson=false;
  String settingValue=LogManager.getSetting(Util.JSON_OUTPUT_SETTING);
  if (settingValue != null && settingValue.equals(""String_Node_Str""))   isOutputJson=true;
  Method method=(Method)param.method;
  Class<?>[] argTypes=method.getParameterTypes();
  String[] argTypeNames=new String[argTypes.length];
  for (int i=0; i < argTypes.length; i++)   argTypeNames[i]=argTypes[i].getName();
  String argsValue=Parser.parseParameters(argTypeNames,param.args,isOutputJson);
  Object returnObject=param.getResult();
  String returnTypeName=""String_Node_Str"";
  String returnValue=""String_Node_Str"";
  if (returnObject != null) {
    returnTypeName=method.getReturnType().getName();
    returnValue=Parser.parseReturnValue(returnTypeName,returnObject);
  }
  String formattedRes=null;
  if (isOutputJson)   formattedRes=String.format(""String_Node_Str"",method.getDeclaringClass().getName(),method.getName(),argsValue,returnTypeName,returnValue);
 else   formattedRes=String.format(""String_Node_Str"",method.getDeclaringClass().getName(),method.getName(),argsValue,returnValue);
  Log.i(Util.LOG_TAG,formattedRes);
}","private static void logMethod(MethodHookParam param){
  boolean isOutputJson=false;
  String settingValue=LogManager.getSetting(Util.JSON_OUTPUT_SETTING);
  if (settingValue != null && settingValue.equals(""String_Node_Str"")) {
    isOutputJson=true;
  }
  Method method=(Method)param.method;
  Class<?>[] argTypes=method.getParameterTypes();
  String[] argTypeNames=new String[argTypes.length];
  for (int i=0; i < argTypes.length; i++)   argTypeNames[i]=argTypes[i].getName();
  String argsValue=Parser.parseParameters(argTypeNames,param.args,isOutputJson);
  Object returnObject=param.getResult();
  String returnTypeName=""String_Node_Str"";
  String returnValue=""String_Node_Str"";
  if (returnObject != null) {
    returnTypeName=method.getReturnType().getName();
    returnValue=Parser.parseReturnValue(returnTypeName,returnObject);
  }
  String formattedRes=null;
  if (isOutputJson)   formattedRes=String.format(""String_Node_Str"",method.getDeclaringClass().getName(),method.getName(),argsValue,returnTypeName,returnValue);
 else   formattedRes=String.format(""String_Node_Str"",method.getDeclaringClass().getName(),method.getName(),argsValue,returnValue);
  Log.i(Util.LOG_TAG,formattedRes);
}",0.9966442953020134
35163,"@Override public String getSetting(String name) throws RemoteException {
  String value=null;
  if (allowAccess()) {
    try {
      SQLiteDatabase policyDb=getDatabase();
      if (mStmtGetSetting == null) {
        String sql=""String_Node_Str"" + cTableSetting + ""String_Node_Str"";
        mStmtGetSetting=policyDb.compileStatement(sql);
      }
      mLock.readLock().lock();
      policyDb.beginTransaction();
      try {
        try {
synchronized (mStmtGetSetting) {
            mStmtGetSetting.clearBindings();
            mStmtGetSetting.bindString(1,name);
            value=mStmtGetSetting.simpleQueryForString();
          }
        }
 catch (        SQLiteDoneException ignored) {
        }
        policyDb.setTransactionSuccessful();
      }
  finally {
        try {
          policyDb.endTransaction();
        }
  finally {
          mLock.readLock().unlock();
        }
      }
    }
 catch (    Throwable ex) {
      Util.bug(null,ex);
      throw new RemoteException(ex.toString());
    }
  }
  return value;
}","@Override public String getSetting(String name) throws RemoteException {
  String value=null;
  try {
    SQLiteDatabase policyDb=getDatabase();
    if (mStmtGetSetting == null) {
      String sql=""String_Node_Str"" + cTableSetting + ""String_Node_Str"";
      mStmtGetSetting=policyDb.compileStatement(sql);
    }
    mLock.readLock().lock();
    policyDb.beginTransaction();
    try {
      try {
synchronized (mStmtGetSetting) {
          mStmtGetSetting.clearBindings();
          mStmtGetSetting.bindString(1,name);
          value=mStmtGetSetting.simpleQueryForString();
        }
      }
 catch (      SQLiteDoneException ignored) {
      }
      policyDb.setTransactionSuccessful();
    }
  finally {
      try {
        policyDb.endTransaction();
      }
  finally {
        mLock.readLock().unlock();
      }
    }
  }
 catch (  Throwable ex) {
    Util.bug(null,ex);
    throw new RemoteException(ex.toString());
  }
  return value;
}",0.9233891425672248
35164,"@Override public boolean onCreateOptionsMenu(Menu menu){
  MenuInflater inflater=getMenuInflater();
  inflater.inflate(R.menu.menu_app,menu);
  mMenu=menu;
  menu.findItem(R.id.menu_user_apps).setEnabled(false);
  return true;
}","@Override public boolean onCreateOptionsMenu(Menu menu){
  MenuInflater inflater=getMenuInflater();
  inflater.inflate(R.menu.menu_app,menu);
  mMenu=menu;
  menu.findItem(R.id.menu_user_apps).setEnabled(false);
  String outputFormat=LogManager.getSetting(Util.JSON_OUTPUT_SETTING);
  if (outputFormat != null && outputFormat.equals(""String_Node_Str""))   menu.findItem(R.id.menu_output).setTitle(getString(R.string.menu_default));
 else   menu.findItem(R.id.menu_output).setTitle(getString(R.string.menu_json));
  return true;
}",0.6031746031746031
35165,"private static Context getContext(){
  Context context=null;
  try {
    Class<?> cam=Class.forName(""String_Node_Str"");
    Object am=cam.getMethod(""String_Node_Str"").invoke(null);
    if (am != null) {
      context=(Context)cam.getDeclaredField(""String_Node_Str"").get(am);
    }
  }
 catch (  Throwable ex) {
    Util.bug(null,ex);
  }
  return context;
}","private static Context getContext(){
  Context context=null;
  try {
    Class<?> cam=Class.forName(""String_Node_Str"");
    Object am=cam.getMethod(""String_Node_Str"").invoke(null);
    if (am != null) {
      Field contextField=cam.getDeclaredField(""String_Node_Str"");
      contextField.setAccessible(true);
      context=(Context)contextField.get(am);
    }
  }
 catch (  Throwable ex) {
    Util.bug(null,ex);
  }
  return context;
}",0.8575031525851198
35166,"private final void setEnableMGetOp(){
  StringTokenizer tokens=new StringTokenizer(version,""String_Node_Str"");
  String makedVersion=tokens.nextToken() + ""String_Node_Str"" + tokens.nextToken();
  double versionStandard=Double.parseDouble(makedVersion);
  if (version.contains(""String_Node_Str"")) {
    enabledMGetOp=versionStandard >= 0.7;
  }
 else {
    enabledMGetOp=versionStandard >= 1.11;
  }
}","private final void setEnableMGetOp(){
  StringTokenizer tokens=new StringTokenizer(version,""String_Node_Str"");
  int majorVersion=Integer.parseInt(tokens.nextToken());
  int minorVersion=Integer.parseInt(tokens.nextToken());
  if (version.contains(""String_Node_Str"")) {
    enabledMGetOp=(majorVersion > 0 || (majorVersion == 0 && minorVersion > 6));
  }
 else {
    enabledMGetOp=(majorVersion > 1 || (majorVersion == 1 && minorVersion > 10));
  }
}",0.5929411764705882
35167,"public void testSMGetMissAll(){
  try {
    keyList=new ArrayList<String>();
    for (int i=0; i < 10; i++) {
      mc.delete(KEY + i).get();
      keyList.add(KEY + i);
    }
  }
 catch (  Exception e) {
    fail(e.getMessage());
  }
  SMGetMode smgetMode=SMGetMode.UNIQUE;
  SMGetFuture<List<SMGetElement<Object>>> oldFuture=mc.asyncBopSortMergeGet(keyList,1,2,ElementFlagFilter.DO_NOT_FILTER,0,10);
  try {
    List<SMGetElement<Object>> map=oldFuture.get(1000L,TimeUnit.SECONDS);
    Assert.assertTrue(map.isEmpty());
    Assert.assertEquals(oldFuture.getMissedKeyList().toString(),10,oldFuture.getMissedKeyList().size());
  }
 catch (  Exception e) {
    oldFuture.cancel(true);
    e.printStackTrace();
    Assert.fail(e.getMessage());
  }
  SMGetFuture<List<SMGetElement<Object>>> future=mc.asyncBopSortMergeGet(keyList,1,2,ElementFlagFilter.DO_NOT_FILTER,10,smgetMode);
  try {
    List<SMGetElement<Object>> map=future.get(1000L,TimeUnit.SECONDS);
    Assert.assertTrue(map.isEmpty());
    Assert.assertEquals(future.getMissedKeyList().toString(),10,future.getMissedKeyList().size());
  }
 catch (  Exception e) {
    future.cancel(true);
    e.printStackTrace();
    Assert.fail(e.getMessage());
  }
}","public void testSMGetMissAll(){
  try {
    keyList=new ArrayList<String>();
    for (int i=0; i < 10; i++) {
      mc.delete(KEY + i).get();
      keyList.add(KEY + i);
    }
  }
 catch (  Exception e) {
    fail(e.getMessage());
  }
  SMGetMode smgetMode=SMGetMode.UNIQUE;
  SMGetFuture<List<SMGetElement<Object>>> oldFuture=mc.asyncBopSortMergeGet(keyList,1,2,ElementFlagFilter.DO_NOT_FILTER,0,10);
  try {
    List<SMGetElement<Object>> map=oldFuture.get(1000L,TimeUnit.SECONDS);
    Assert.assertTrue(map.isEmpty());
    Assert.assertEquals(oldFuture.getMissedKeyList().toString(),10,oldFuture.getMissedKeyList().size());
  }
 catch (  Exception e) {
    oldFuture.cancel(true);
    e.printStackTrace();
    Assert.fail(e.getMessage());
  }
  SMGetFuture<List<SMGetElement<Object>>> future=mc.asyncBopSortMergeGet(keyList,1,2,ElementFlagFilter.DO_NOT_FILTER,10,smgetMode);
  try {
    List<SMGetElement<Object>> map=future.get(1000L,TimeUnit.SECONDS);
    Assert.assertTrue(map.isEmpty());
    Assert.assertEquals(future.getMissedKeys().toString(),10,future.getMissedKeys().size());
  }
 catch (  Exception e) {
    future.cancel(true);
    e.printStackTrace();
    Assert.fail(e.getMessage());
  }
}",0.995860927152318
35168,"public void testSMGetHitAllWithOffsetMoreCount(){
  try {
    keyList=new ArrayList<String>();
    for (int i=0; i < 50; i++) {
      mc.delete(KEY + i).get();
      keyList.add(KEY + i);
    }
    for (int i=0; i < 50; i++) {
      if (i % 2 == 0)       mc.asyncBopInsert(KEY + i,i,""String_Node_Str"".getBytes(),""String_Node_Str"" + i,new CollectionAttributes()).get();
 else       mc.asyncBopInsert(KEY + i,i,null,""String_Node_Str"" + i,new CollectionAttributes()).get();
    }
  }
 catch (  Exception e) {
    fail(e.getMessage());
  }
  SMGetMode smgetMode=SMGetMode.UNIQUE;
  SMGetFuture<List<SMGetElement<Object>>> oldFuture=mc.asyncBopSortMergeGet(keyList,0,10,ElementFlagFilter.DO_NOT_FILTER,1,10);
  try {
    List<SMGetElement<Object>> map=oldFuture.get(1000L,TimeUnit.SECONDS);
    Assert.assertEquals(10,map.size());
    Assert.assertTrue(oldFuture.getMissedKeyList().isEmpty());
    for (int i=0; i < map.size(); i++) {
      Assert.assertEquals(KEY + (i + 1),map.get(i).getKey());
      Assert.assertEquals(i + 1,map.get(i).getBkey());
      Assert.assertEquals(""String_Node_Str"" + (i + 1),map.get(i).getValue());
    }
  }
 catch (  Exception e) {
    oldFuture.cancel(true);
    e.printStackTrace();
    Assert.fail(e.getMessage());
  }
  SMGetFuture<List<SMGetElement<Object>>> future=mc.asyncBopSortMergeGet(keyList,0,10,ElementFlagFilter.DO_NOT_FILTER,10,smgetMode);
  try {
    List<SMGetElement<Object>> map=future.get(1000L,TimeUnit.SECONDS);
    Assert.assertEquals(10,map.size());
    Assert.assertTrue(future.getMissedKeyList().isEmpty());
    for (int i=0; i < map.size(); i++) {
      Assert.assertEquals(KEY + (i + 1),map.get(i).getKey());
      Assert.assertEquals(i + 1,map.get(i).getBkey());
      Assert.assertEquals(""String_Node_Str"" + (i + 1),map.get(i).getValue());
    }
  }
 catch (  Exception e) {
    future.cancel(true);
    e.printStackTrace();
    Assert.fail(e.getMessage());
  }
}","public void testSMGetHitAllWithOffsetMoreCount(){
  try {
    keyList=new ArrayList<String>();
    for (int i=0; i < 50; i++) {
      mc.delete(KEY + i).get();
      keyList.add(KEY + i);
    }
    for (int i=0; i < 50; i++) {
      if (i % 2 == 0)       mc.asyncBopInsert(KEY + i,i,""String_Node_Str"".getBytes(),""String_Node_Str"" + i,new CollectionAttributes()).get();
 else       mc.asyncBopInsert(KEY + i,i,null,""String_Node_Str"" + i,new CollectionAttributes()).get();
    }
  }
 catch (  Exception e) {
    fail(e.getMessage());
  }
  SMGetMode smgetMode=SMGetMode.UNIQUE;
  SMGetFuture<List<SMGetElement<Object>>> oldFuture=mc.asyncBopSortMergeGet(keyList,0,10,ElementFlagFilter.DO_NOT_FILTER,1,10);
  try {
    List<SMGetElement<Object>> map=oldFuture.get(1000L,TimeUnit.SECONDS);
    Assert.assertEquals(10,map.size());
    Assert.assertTrue(oldFuture.getMissedKeyList().isEmpty());
    for (int i=0; i < map.size(); i++) {
      Assert.assertEquals(KEY + (i + 1),map.get(i).getKey());
      Assert.assertEquals(i + 1,map.get(i).getBkey());
      Assert.assertEquals(""String_Node_Str"" + (i + 1),map.get(i).getValue());
    }
  }
 catch (  Exception e) {
    oldFuture.cancel(true);
    e.printStackTrace();
    Assert.fail(e.getMessage());
  }
  SMGetFuture<List<SMGetElement<Object>>> future=mc.asyncBopSortMergeGet(keyList,0,10,ElementFlagFilter.DO_NOT_FILTER,10,smgetMode);
  try {
    List<SMGetElement<Object>> map=future.get(1000L,TimeUnit.SECONDS);
    Assert.assertEquals(10,map.size());
    Assert.assertTrue(future.getMissedKeys().isEmpty());
    for (int i=0; i < map.size(); i++) {
      Assert.assertEquals(KEY + i,map.get(i).getKey());
      Assert.assertEquals(i,map.get(i).getBkey());
      Assert.assertEquals(""String_Node_Str"" + i,map.get(i).getValue());
    }
  }
 catch (  Exception e) {
    future.cancel(true);
    e.printStackTrace();
    Assert.fail(e.getMessage());
  }
}",0.9934606330107244
35169,"public void testSMGetHitAllWithOffsetLessThanCount(){
  try {
    keyList=new ArrayList<String>();
    for (int i=0; i < 9; i++) {
      mc.delete(KEY + i).get();
      keyList.add(KEY + i);
    }
    for (int i=0; i < 9; i++) {
      if (i % 2 == 0)       mc.asyncBopInsert(KEY + i,i,""String_Node_Str"".getBytes(),""String_Node_Str"" + i,new CollectionAttributes()).get();
 else       mc.asyncBopInsert(KEY + i,i,null,""String_Node_Str"" + i,new CollectionAttributes()).get();
    }
  }
 catch (  Exception e) {
    fail(e.getMessage());
  }
  SMGetMode smgetMode=SMGetMode.UNIQUE;
  SMGetFuture<List<SMGetElement<Object>>> oldFuture=mc.asyncBopSortMergeGet(keyList,0,10,ElementFlagFilter.DO_NOT_FILTER,1,10);
  try {
    List<SMGetElement<Object>> map=oldFuture.get(1000L,TimeUnit.SECONDS);
    Assert.assertEquals(8,map.size());
    Assert.assertTrue(oldFuture.getMissedKeyList().isEmpty());
    for (int i=0; i < map.size(); i++) {
      Assert.assertEquals(KEY + (i + 1),map.get(i).getKey());
      Assert.assertEquals(i + 1,map.get(i).getBkey());
      Assert.assertEquals(""String_Node_Str"" + (i + 1),map.get(i).getValue());
    }
  }
 catch (  Exception e) {
    oldFuture.cancel(true);
    e.printStackTrace();
    Assert.fail(e.getMessage());
  }
  SMGetFuture<List<SMGetElement<Object>>> future=mc.asyncBopSortMergeGet(keyList,0,10,ElementFlagFilter.DO_NOT_FILTER,10,smgetMode);
  try {
    List<SMGetElement<Object>> map=future.get(1000L,TimeUnit.SECONDS);
    Assert.assertEquals(8,map.size());
    Assert.assertTrue(future.getMissedKeyList().isEmpty());
    for (int i=0; i < map.size(); i++) {
      Assert.assertEquals(KEY + (i + 1),map.get(i).getKey());
      Assert.assertEquals(i + 1,map.get(i).getBkey());
      Assert.assertEquals(""String_Node_Str"" + (i + 1),map.get(i).getValue());
    }
  }
 catch (  Exception e) {
    future.cancel(true);
    e.printStackTrace();
    Assert.fail(e.getMessage());
  }
}","public void testSMGetHitAllWithOffsetLessThanCount(){
  try {
    keyList=new ArrayList<String>();
    for (int i=0; i < 9; i++) {
      mc.delete(KEY + i).get();
      keyList.add(KEY + i);
    }
    for (int i=0; i < 9; i++) {
      if (i % 2 == 0)       mc.asyncBopInsert(KEY + i,i,""String_Node_Str"".getBytes(),""String_Node_Str"" + i,new CollectionAttributes()).get();
 else       mc.asyncBopInsert(KEY + i,i,null,""String_Node_Str"" + i,new CollectionAttributes()).get();
    }
  }
 catch (  Exception e) {
    fail(e.getMessage());
  }
  SMGetMode smgetMode=SMGetMode.UNIQUE;
  SMGetFuture<List<SMGetElement<Object>>> oldFuture=mc.asyncBopSortMergeGet(keyList,0,10,ElementFlagFilter.DO_NOT_FILTER,1,10);
  try {
    List<SMGetElement<Object>> map=oldFuture.get(1000L,TimeUnit.SECONDS);
    Assert.assertEquals(8,map.size());
    Assert.assertTrue(oldFuture.getMissedKeyList().isEmpty());
    for (int i=0; i < map.size(); i++) {
      Assert.assertEquals(KEY + (i + 1),map.get(i).getKey());
      Assert.assertEquals(i + 1,map.get(i).getBkey());
      Assert.assertEquals(""String_Node_Str"" + (i + 1),map.get(i).getValue());
    }
  }
 catch (  Exception e) {
    oldFuture.cancel(true);
    e.printStackTrace();
    Assert.fail(e.getMessage());
  }
  SMGetFuture<List<SMGetElement<Object>>> future=mc.asyncBopSortMergeGet(keyList,0,10,ElementFlagFilter.DO_NOT_FILTER,10,smgetMode);
  try {
    List<SMGetElement<Object>> map=future.get(1000L,TimeUnit.SECONDS);
    Assert.assertEquals(9,map.size());
    Assert.assertTrue(future.getMissedKeys().isEmpty());
    for (int i=0; i < map.size(); i++) {
      Assert.assertEquals(KEY + i,map.get(i).getKey());
      Assert.assertEquals(i,map.get(i).getBkey());
      Assert.assertEquals(""String_Node_Str"" + i,map.get(i).getValue());
    }
  }
 catch (  Exception e) {
    future.cancel(true);
    e.printStackTrace();
    Assert.fail(e.getMessage());
  }
}",0.9929374836515824
35170,"public void testSMGetHitHalfDesc(){
  try {
    keyList=new ArrayList<String>();
    for (int i=0; i < 10; i++) {
      mc.delete(KEY + i).get();
      keyList.add(KEY + i);
    }
    for (int i=0; i < 5; i++) {
      if (i % 2 == 0)       mc.asyncBopInsert(KEY + i,i,""String_Node_Str"".getBytes(),""String_Node_Str"" + i,new CollectionAttributes()).get();
 else       mc.asyncBopInsert(KEY + i,i,null,""String_Node_Str"" + i,new CollectionAttributes()).get();
    }
  }
 catch (  Exception e) {
    fail(e.getMessage());
  }
  SMGetMode smgetMode=SMGetMode.UNIQUE;
  SMGetFuture<List<SMGetElement<Object>>> oldFuture=mc.asyncBopSortMergeGet(keyList,10,0,ElementFlagFilter.DO_NOT_FILTER,0,10);
  try {
    List<SMGetElement<Object>> map=oldFuture.get(1000L,TimeUnit.SECONDS);
    assertEquals(5,map.size());
    assertEquals(oldFuture.getMissedKeyList().toString(),5,oldFuture.getMissedKeyList().size());
  }
 catch (  Exception e) {
    oldFuture.cancel(true);
    e.printStackTrace();
    Assert.fail(e.getMessage());
  }
  SMGetFuture<List<SMGetElement<Object>>> future=mc.asyncBopSortMergeGet(keyList,10,0,ElementFlagFilter.DO_NOT_FILTER,10,smgetMode);
  try {
    List<SMGetElement<Object>> map=future.get(1000L,TimeUnit.SECONDS);
    assertEquals(5,map.size());
    assertEquals(future.getMissedKeyList().toString(),5,future.getMissedKeyList().size());
  }
 catch (  Exception e) {
    future.cancel(true);
    e.printStackTrace();
    Assert.fail(e.getMessage());
  }
}","public void testSMGetHitHalfDesc(){
  try {
    keyList=new ArrayList<String>();
    for (int i=0; i < 10; i++) {
      mc.delete(KEY + i).get();
      keyList.add(KEY + i);
    }
    for (int i=0; i < 5; i++) {
      if (i % 2 == 0)       mc.asyncBopInsert(KEY + i,i,""String_Node_Str"".getBytes(),""String_Node_Str"" + i,new CollectionAttributes()).get();
 else       mc.asyncBopInsert(KEY + i,i,null,""String_Node_Str"" + i,new CollectionAttributes()).get();
    }
  }
 catch (  Exception e) {
    fail(e.getMessage());
  }
  SMGetMode smgetMode=SMGetMode.UNIQUE;
  SMGetFuture<List<SMGetElement<Object>>> oldFuture=mc.asyncBopSortMergeGet(keyList,10,0,ElementFlagFilter.DO_NOT_FILTER,0,10);
  try {
    List<SMGetElement<Object>> map=oldFuture.get(1000L,TimeUnit.SECONDS);
    assertEquals(5,map.size());
    assertEquals(oldFuture.getMissedKeyList().toString(),5,oldFuture.getMissedKeyList().size());
  }
 catch (  Exception e) {
    oldFuture.cancel(true);
    e.printStackTrace();
    Assert.fail(e.getMessage());
  }
  SMGetFuture<List<SMGetElement<Object>>> future=mc.asyncBopSortMergeGet(keyList,10,0,ElementFlagFilter.DO_NOT_FILTER,10,smgetMode);
  try {
    List<SMGetElement<Object>> map=future.get(1000L,TimeUnit.SECONDS);
    assertEquals(5,map.size());
    assertEquals(future.getMissedKeys().toString(),5,future.getMissedKeys().size());
  }
 catch (  Exception e) {
    future.cancel(true);
    e.printStackTrace();
    Assert.fail(e.getMessage());
  }
}",0.9965940054495912
35171,"public void testSMGetHitAllWithOffsetExactCount(){
  try {
    keyList=new ArrayList<String>();
    for (int i=0; i < 10; i++) {
      mc.delete(KEY + i).get();
      keyList.add(KEY + i);
    }
    for (int i=0; i < 10; i++) {
      if (i % 2 == 0)       mc.asyncBopInsert(KEY + i,i,""String_Node_Str"".getBytes(),""String_Node_Str"" + i,new CollectionAttributes()).get();
 else       mc.asyncBopInsert(KEY + i,i,null,""String_Node_Str"" + i,new CollectionAttributes()).get();
    }
  }
 catch (  Exception e) {
    fail(e.getMessage());
  }
  SMGetMode smgetMode=SMGetMode.UNIQUE;
  SMGetFuture<List<SMGetElement<Object>>> oldFuture=mc.asyncBopSortMergeGet(keyList,0,10,ElementFlagFilter.DO_NOT_FILTER,1,10);
  try {
    List<SMGetElement<Object>> map=oldFuture.get(1000L,TimeUnit.SECONDS);
    Assert.assertEquals(9,map.size());
    Assert.assertTrue(oldFuture.getMissedKeyList().isEmpty());
    for (int i=0; i < map.size(); i++) {
      Assert.assertEquals(KEY + (i + 1),map.get(i).getKey());
      Assert.assertEquals(i + 1,map.get(i).getBkey());
      Assert.assertEquals(""String_Node_Str"" + (i + 1),map.get(i).getValue());
    }
  }
 catch (  Exception e) {
    oldFuture.cancel(true);
    e.printStackTrace();
    Assert.fail(e.getMessage());
  }
  SMGetFuture<List<SMGetElement<Object>>> future=mc.asyncBopSortMergeGet(keyList,0,10,ElementFlagFilter.DO_NOT_FILTER,10,smgetMode);
  try {
    List<SMGetElement<Object>> map=future.get(1000L,TimeUnit.SECONDS);
    Assert.assertEquals(9,map.size());
    Assert.assertTrue(future.getMissedKeyList().isEmpty());
    for (int i=0; i < map.size(); i++) {
      Assert.assertEquals(KEY + (i + 1),map.get(i).getKey());
      Assert.assertEquals(i + 1,map.get(i).getBkey());
      Assert.assertEquals(""String_Node_Str"" + (i + 1),map.get(i).getValue());
    }
  }
 catch (  Exception e) {
    future.cancel(true);
    e.printStackTrace();
    Assert.fail(e.getMessage());
  }
}","public void testSMGetHitAllWithOffsetExactCount(){
  try {
    keyList=new ArrayList<String>();
    for (int i=0; i < 10; i++) {
      mc.delete(KEY + i).get();
      keyList.add(KEY + i);
    }
    for (int i=0; i < 10; i++) {
      if (i % 2 == 0)       mc.asyncBopInsert(KEY + i,i,""String_Node_Str"".getBytes(),""String_Node_Str"" + i,new CollectionAttributes()).get();
 else       mc.asyncBopInsert(KEY + i,i,null,""String_Node_Str"" + i,new CollectionAttributes()).get();
    }
  }
 catch (  Exception e) {
    fail(e.getMessage());
  }
  SMGetMode smgetMode=SMGetMode.UNIQUE;
  SMGetFuture<List<SMGetElement<Object>>> oldFuture=mc.asyncBopSortMergeGet(keyList,0,10,ElementFlagFilter.DO_NOT_FILTER,1,10);
  try {
    List<SMGetElement<Object>> map=oldFuture.get(1000L,TimeUnit.SECONDS);
    Assert.assertEquals(9,map.size());
    Assert.assertTrue(oldFuture.getMissedKeyList().isEmpty());
    for (int i=0; i < map.size(); i++) {
      Assert.assertEquals(KEY + (i + 1),map.get(i).getKey());
      Assert.assertEquals(i + 1,map.get(i).getBkey());
      Assert.assertEquals(""String_Node_Str"" + (i + 1),map.get(i).getValue());
    }
  }
 catch (  Exception e) {
    oldFuture.cancel(true);
    e.printStackTrace();
    Assert.fail(e.getMessage());
  }
  SMGetFuture<List<SMGetElement<Object>>> future=mc.asyncBopSortMergeGet(keyList,0,10,ElementFlagFilter.DO_NOT_FILTER,10,smgetMode);
  try {
    List<SMGetElement<Object>> map=future.get(1000L,TimeUnit.SECONDS);
    Assert.assertEquals(10,map.size());
    Assert.assertTrue(future.getMissedKeys().isEmpty());
    for (int i=0; i < map.size(); i++) {
      Assert.assertEquals(KEY + i,map.get(i).getKey());
      Assert.assertEquals(i,map.get(i).getBkey());
      Assert.assertEquals(""String_Node_Str"" + i,map.get(i).getValue());
    }
  }
 catch (  Exception e) {
    future.cancel(true);
    e.printStackTrace();
    Assert.fail(e.getMessage());
  }
}",0.9926739926739928
35172,"public void testSMGetHitHalf(){
  try {
    keyList=new ArrayList<String>();
    for (int i=0; i < 10; i++) {
      mc.delete(KEY + i).get();
      keyList.add(KEY + i);
    }
    for (int i=0; i < 5; i++) {
      if (i % 2 == 0)       mc.asyncBopInsert(KEY + i,i,""String_Node_Str"".getBytes(),""String_Node_Str"" + i,new CollectionAttributes()).get();
 else       mc.asyncBopInsert(KEY + i,i,null,""String_Node_Str"" + i,new CollectionAttributes()).get();
    }
  }
 catch (  Exception e) {
    fail(e.getMessage());
  }
  SMGetMode smgetMode=SMGetMode.UNIQUE;
  SMGetFuture<List<SMGetElement<Object>>> oldFuture=mc.asyncBopSortMergeGet(keyList,0,10,ElementFlagFilter.DO_NOT_FILTER,0,10);
  try {
    List<SMGetElement<Object>> map=oldFuture.get(1000L,TimeUnit.SECONDS);
    assertEquals(5,map.size());
    assertEquals(oldFuture.getMissedKeyList().toString(),5,oldFuture.getMissedKeyList().size());
  }
 catch (  Exception e) {
    oldFuture.cancel(true);
    e.printStackTrace();
    Assert.fail(e.getMessage());
  }
  SMGetFuture<List<SMGetElement<Object>>> future=mc.asyncBopSortMergeGet(keyList,0,10,ElementFlagFilter.DO_NOT_FILTER,10,smgetMode);
  try {
    List<SMGetElement<Object>> map=future.get(1000L,TimeUnit.SECONDS);
    assertEquals(5,map.size());
    assertEquals(future.getMissedKeyList().toString(),5,future.getMissedKeyList().size());
  }
 catch (  Exception e) {
    future.cancel(true);
    e.printStackTrace();
    Assert.fail(e.getMessage());
  }
}","public void testSMGetHitHalf(){
  try {
    keyList=new ArrayList<String>();
    for (int i=0; i < 10; i++) {
      mc.delete(KEY + i).get();
      keyList.add(KEY + i);
    }
    for (int i=0; i < 5; i++) {
      if (i % 2 == 0)       mc.asyncBopInsert(KEY + i,i,""String_Node_Str"".getBytes(),""String_Node_Str"" + i,new CollectionAttributes()).get();
 else       mc.asyncBopInsert(KEY + i,i,null,""String_Node_Str"" + i,new CollectionAttributes()).get();
    }
  }
 catch (  Exception e) {
    fail(e.getMessage());
  }
  SMGetMode smgetMode=SMGetMode.UNIQUE;
  SMGetFuture<List<SMGetElement<Object>>> oldFuture=mc.asyncBopSortMergeGet(keyList,0,10,ElementFlagFilter.DO_NOT_FILTER,0,10);
  try {
    List<SMGetElement<Object>> map=oldFuture.get(1000L,TimeUnit.SECONDS);
    assertEquals(5,map.size());
    assertEquals(oldFuture.getMissedKeyList().toString(),5,oldFuture.getMissedKeyList().size());
  }
 catch (  Exception e) {
    oldFuture.cancel(true);
    e.printStackTrace();
    Assert.fail(e.getMessage());
  }
  SMGetFuture<List<SMGetElement<Object>>> future=mc.asyncBopSortMergeGet(keyList,0,10,ElementFlagFilter.DO_NOT_FILTER,10,smgetMode);
  try {
    List<SMGetElement<Object>> map=future.get(1000L,TimeUnit.SECONDS);
    assertEquals(5,map.size());
    assertEquals(future.getMissedKeys().toString(),5,future.getMissedKeys().size());
  }
 catch (  Exception e) {
    future.cancel(true);
    e.printStackTrace();
    Assert.fail(e.getMessage());
  }
}",0.996584699453552
35173,"public void testSMGetHitAll(){
  try {
    keyList=new ArrayList<String>();
    for (int i=0; i < 50; i++) {
      mc.delete(KEY + i).get();
      keyList.add(KEY + i);
    }
    for (int i=0; i < 50; i++) {
      if (i % 2 == 0)       mc.asyncBopInsert(KEY + i,i,""String_Node_Str"".getBytes(),""String_Node_Str"" + i,new CollectionAttributes()).get();
 else       mc.asyncBopInsert(KEY + i,i,null,""String_Node_Str"" + i,new CollectionAttributes()).get();
    }
  }
 catch (  Exception e) {
    fail(e.getMessage());
  }
  SMGetMode smgetMode=SMGetMode.UNIQUE;
  SMGetFuture<List<SMGetElement<Object>>> oldFuture=mc.asyncBopSortMergeGet(keyList,0,10,ElementFlagFilter.DO_NOT_FILTER,0,10);
  try {
    List<SMGetElement<Object>> map=oldFuture.get(1000L,TimeUnit.SECONDS);
    Assert.assertEquals(10,map.size());
    Assert.assertTrue(oldFuture.getMissedKeyList().isEmpty());
    for (int i=0; i < map.size(); i++) {
      Assert.assertEquals(KEY + i,map.get(i).getKey());
      Assert.assertEquals(i,map.get(i).getBkey());
      Assert.assertEquals(""String_Node_Str"" + i,map.get(i).getValue());
    }
  }
 catch (  Exception e) {
    oldFuture.cancel(true);
    e.printStackTrace();
    Assert.fail(e.getMessage());
  }
  SMGetFuture<List<SMGetElement<Object>>> future=mc.asyncBopSortMergeGet(keyList,0,10,ElementFlagFilter.DO_NOT_FILTER,10,smgetMode);
  try {
    List<SMGetElement<Object>> map=future.get(1000L,TimeUnit.SECONDS);
    Assert.assertEquals(10,map.size());
    Assert.assertTrue(future.getMissedKeyList().isEmpty());
    for (int i=0; i < map.size(); i++) {
      Assert.assertEquals(KEY + i,map.get(i).getKey());
      Assert.assertEquals(i,map.get(i).getBkey());
      Assert.assertEquals(""String_Node_Str"" + i,map.get(i).getValue());
    }
  }
 catch (  Exception e) {
    future.cancel(true);
    e.printStackTrace();
    Assert.fail(e.getMessage());
  }
}","public void testSMGetHitAll(){
  try {
    keyList=new ArrayList<String>();
    for (int i=0; i < 50; i++) {
      mc.delete(KEY + i).get();
      keyList.add(KEY + i);
    }
    for (int i=0; i < 50; i++) {
      if (i % 2 == 0)       mc.asyncBopInsert(KEY + i,i,""String_Node_Str"".getBytes(),""String_Node_Str"" + i,new CollectionAttributes()).get();
 else       mc.asyncBopInsert(KEY + i,i,null,""String_Node_Str"" + i,new CollectionAttributes()).get();
    }
  }
 catch (  Exception e) {
    fail(e.getMessage());
  }
  SMGetMode smgetMode=SMGetMode.UNIQUE;
  SMGetFuture<List<SMGetElement<Object>>> oldFuture=mc.asyncBopSortMergeGet(keyList,0,10,ElementFlagFilter.DO_NOT_FILTER,0,10);
  try {
    List<SMGetElement<Object>> map=oldFuture.get(1000L,TimeUnit.SECONDS);
    Assert.assertEquals(10,map.size());
    Assert.assertTrue(oldFuture.getMissedKeyList().isEmpty());
    for (int i=0; i < map.size(); i++) {
      Assert.assertEquals(KEY + i,map.get(i).getKey());
      Assert.assertEquals(i,map.get(i).getBkey());
      Assert.assertEquals(""String_Node_Str"" + i,map.get(i).getValue());
    }
  }
 catch (  Exception e) {
    oldFuture.cancel(true);
    e.printStackTrace();
    Assert.fail(e.getMessage());
  }
  SMGetFuture<List<SMGetElement<Object>>> future=mc.asyncBopSortMergeGet(keyList,0,10,ElementFlagFilter.DO_NOT_FILTER,10,smgetMode);
  try {
    List<SMGetElement<Object>> map=future.get(1000L,TimeUnit.SECONDS);
    Assert.assertEquals(10,map.size());
    Assert.assertTrue(future.getMissedKeys().isEmpty());
    for (int i=0; i < map.size(); i++) {
      Assert.assertEquals(KEY + i,map.get(i).getKey());
      Assert.assertEquals(i,map.get(i).getBkey());
      Assert.assertEquals(""String_Node_Str"" + i,map.get(i).getValue());
    }
  }
 catch (  Exception e) {
    future.cancel(true);
    e.printStackTrace();
    Assert.fail(e.getMessage());
  }
}",0.9986620283649986
35174,"public void testSMGetHitAllDesc(){
  try {
    keyList=new ArrayList<String>();
    for (int i=0; i < 10; i++) {
      mc.delete(KEY + i).get();
      keyList.add(KEY + i);
    }
    for (int i=0; i < 10; i++) {
      if (i % 2 == 0)       mc.asyncBopInsert(KEY + i,i,""String_Node_Str"".getBytes(),""String_Node_Str"" + i,new CollectionAttributes()).get();
 else       mc.asyncBopInsert(KEY + i,i,null,""String_Node_Str"" + i,new CollectionAttributes()).get();
    }
  }
 catch (  Exception e) {
    fail(e.getMessage());
  }
  SMGetMode smgetMode=SMGetMode.UNIQUE;
  SMGetFuture<List<SMGetElement<Object>>> oldFuture=mc.asyncBopSortMergeGet(keyList,10,0,ElementFlagFilter.DO_NOT_FILTER,0,10);
  try {
    List<SMGetElement<Object>> map=oldFuture.get(1000L,TimeUnit.SECONDS);
    Assert.assertEquals(10,map.size());
    Assert.assertTrue(oldFuture.getMissedKeyList().isEmpty());
  }
 catch (  Exception e) {
    oldFuture.cancel(true);
    e.printStackTrace();
    Assert.fail(e.getMessage());
  }
  SMGetFuture<List<SMGetElement<Object>>> future=mc.asyncBopSortMergeGet(keyList,10,0,ElementFlagFilter.DO_NOT_FILTER,10,smgetMode);
  try {
    List<SMGetElement<Object>> map=future.get(1000L,TimeUnit.SECONDS);
    Assert.assertEquals(10,map.size());
    Assert.assertTrue(future.getMissedKeyList().isEmpty());
  }
 catch (  Exception e) {
    future.cancel(true);
    e.printStackTrace();
    Assert.fail(e.getMessage());
  }
}","public void testSMGetHitAllDesc(){
  try {
    keyList=new ArrayList<String>();
    for (int i=0; i < 10; i++) {
      mc.delete(KEY + i).get();
      keyList.add(KEY + i);
    }
    for (int i=0; i < 10; i++) {
      if (i % 2 == 0)       mc.asyncBopInsert(KEY + i,i,""String_Node_Str"".getBytes(),""String_Node_Str"" + i,new CollectionAttributes()).get();
 else       mc.asyncBopInsert(KEY + i,i,null,""String_Node_Str"" + i,new CollectionAttributes()).get();
    }
  }
 catch (  Exception e) {
    fail(e.getMessage());
  }
  SMGetMode smgetMode=SMGetMode.UNIQUE;
  SMGetFuture<List<SMGetElement<Object>>> oldFuture=mc.asyncBopSortMergeGet(keyList,10,0,ElementFlagFilter.DO_NOT_FILTER,0,10);
  try {
    List<SMGetElement<Object>> map=oldFuture.get(1000L,TimeUnit.SECONDS);
    Assert.assertEquals(10,map.size());
    Assert.assertTrue(oldFuture.getMissedKeyList().isEmpty());
  }
 catch (  Exception e) {
    oldFuture.cancel(true);
    e.printStackTrace();
    Assert.fail(e.getMessage());
  }
  SMGetFuture<List<SMGetElement<Object>>> future=mc.asyncBopSortMergeGet(keyList,10,0,ElementFlagFilter.DO_NOT_FILTER,10,smgetMode);
  try {
    List<SMGetElement<Object>> map=future.get(1000L,TimeUnit.SECONDS);
    Assert.assertEquals(10,map.size());
    Assert.assertTrue(future.getMissedKeys().isEmpty());
  }
 catch (  Exception e) {
    future.cancel(true);
    e.printStackTrace();
    Assert.fail(e.getMessage());
  }
}",0.9982400563181978
35175,"public void testSMGetMissAll(){
  try {
    keyList=new ArrayList<String>();
    for (int i=0; i < 10; i++) {
      mc.delete(KEY + i).get();
      keyList.add(KEY + i);
    }
  }
 catch (  Exception e) {
    fail(e.getMessage());
  }
  SMGetMode smgetMode=SMGetMode.UNIQUE;
  SMGetFuture<List<SMGetElement<Object>>> oldFuture=mc.asyncBopSortMergeGet(keyList,1,2,ElementFlagFilter.DO_NOT_FILTER,0,10);
  try {
    List<SMGetElement<Object>> map=oldFuture.get(1000L,TimeUnit.SECONDS);
    Assert.assertTrue(map.isEmpty());
    Assert.assertEquals(oldFuture.getMissedKeyList().toString(),10,oldFuture.getMissedKeyList().size());
  }
 catch (  Exception e) {
    oldFuture.cancel(true);
    e.printStackTrace();
    Assert.fail(e.getMessage());
  }
  SMGetFuture<List<SMGetElement<Object>>> future=mc.asyncBopSortMergeGet(keyList,1,2,ElementFlagFilter.DO_NOT_FILTER,10,smgetMode);
  try {
    List<SMGetElement<Object>> map=future.get(1000L,TimeUnit.SECONDS);
    Assert.assertTrue(map.isEmpty());
    Assert.assertEquals(future.getMissedKeyList().toString(),10,future.getMissedKeyList().size());
  }
 catch (  Exception e) {
    future.cancel(true);
    e.printStackTrace();
    Assert.fail(e.getMessage());
  }
}","public void testSMGetMissAll(){
  try {
    keyList=new ArrayList<String>();
    for (int i=0; i < 10; i++) {
      mc.delete(KEY + i).get();
      keyList.add(KEY + i);
    }
  }
 catch (  Exception e) {
    fail(e.getMessage());
  }
  SMGetMode smgetMode=SMGetMode.UNIQUE;
  SMGetFuture<List<SMGetElement<Object>>> oldFuture=mc.asyncBopSortMergeGet(keyList,1,2,ElementFlagFilter.DO_NOT_FILTER,0,10);
  try {
    List<SMGetElement<Object>> map=oldFuture.get(1000L,TimeUnit.SECONDS);
    Assert.assertTrue(map.isEmpty());
    Assert.assertEquals(oldFuture.getMissedKeyList().toString(),10,oldFuture.getMissedKeyList().size());
  }
 catch (  Exception e) {
    oldFuture.cancel(true);
    e.printStackTrace();
    Assert.fail(e.getMessage());
  }
  SMGetFuture<List<SMGetElement<Object>>> future=mc.asyncBopSortMergeGet(keyList,1,2,ElementFlagFilter.DO_NOT_FILTER,10,smgetMode);
  try {
    List<SMGetElement<Object>> map=future.get(1000L,TimeUnit.SECONDS);
    Assert.assertTrue(map.isEmpty());
    Assert.assertEquals(future.getMissedKeys().toString(),10,future.getMissedKeys().size());
  }
 catch (  Exception e) {
    future.cancel(true);
    e.printStackTrace();
    Assert.fail(e.getMessage());
  }
}",0.995860927152318
35176,"public void testSMGetHitAllWithOffsetMoreCount(){
  try {
    keyList=new ArrayList<String>();
    for (int i=0; i < 50; i++) {
      mc.delete(KEY + i).get();
      keyList.add(KEY + i);
    }
    for (int i=0; i < 50; i++) {
      mc.asyncBopInsert(KEY + i,i,""String_Node_Str"".getBytes(),""String_Node_Str"" + i,new CollectionAttributes()).get();
    }
  }
 catch (  Exception e) {
    fail(e.getMessage());
  }
  SMGetMode smgetMode=SMGetMode.UNIQUE;
  SMGetFuture<List<SMGetElement<Object>>> oldFuture=mc.asyncBopSortMergeGet(keyList,0,10,ElementFlagFilter.DO_NOT_FILTER,1,10);
  try {
    List<SMGetElement<Object>> map=oldFuture.get(1000L,TimeUnit.SECONDS);
    Assert.assertEquals(10,map.size());
    Assert.assertTrue(oldFuture.getMissedKeyList().isEmpty());
    for (int i=0; i < map.size(); i++) {
      Assert.assertEquals(KEY + (i + 1),map.get(i).getKey());
      Assert.assertEquals(i + 1,map.get(i).getBkey());
      Assert.assertEquals(""String_Node_Str"" + (i + 1),map.get(i).getValue());
    }
  }
 catch (  Exception e) {
    oldFuture.cancel(true);
    e.printStackTrace();
    Assert.fail(e.getMessage());
  }
  SMGetFuture<List<SMGetElement<Object>>> future=mc.asyncBopSortMergeGet(keyList,0,10,ElementFlagFilter.DO_NOT_FILTER,10,smgetMode);
  try {
    List<SMGetElement<Object>> map=future.get(1000L,TimeUnit.SECONDS);
    Assert.assertEquals(10,map.size());
    Assert.assertTrue(future.getMissedKeyList().isEmpty());
    for (int i=0; i < map.size(); i++) {
      Assert.assertEquals(KEY + (i + 1),map.get(i).getKey());
      Assert.assertEquals(i + 1,map.get(i).getBkey());
      Assert.assertEquals(""String_Node_Str"" + (i + 1),map.get(i).getValue());
    }
  }
 catch (  Exception e) {
    future.cancel(true);
    e.printStackTrace();
    Assert.fail(e.getMessage());
  }
}","public void testSMGetHitAllWithOffsetMoreCount(){
  try {
    keyList=new ArrayList<String>();
    for (int i=0; i < 50; i++) {
      mc.delete(KEY + i).get();
      keyList.add(KEY + i);
    }
    for (int i=0; i < 50; i++) {
      mc.asyncBopInsert(KEY + i,i,""String_Node_Str"".getBytes(),""String_Node_Str"" + i,new CollectionAttributes()).get();
    }
  }
 catch (  Exception e) {
    fail(e.getMessage());
  }
  SMGetMode smgetMode=SMGetMode.UNIQUE;
  SMGetFuture<List<SMGetElement<Object>>> oldFuture=mc.asyncBopSortMergeGet(keyList,0,10,ElementFlagFilter.DO_NOT_FILTER,1,10);
  try {
    List<SMGetElement<Object>> map=oldFuture.get(1000L,TimeUnit.SECONDS);
    Assert.assertEquals(10,map.size());
    Assert.assertTrue(oldFuture.getMissedKeyList().isEmpty());
    for (int i=0; i < map.size(); i++) {
      Assert.assertEquals(KEY + (i + 1),map.get(i).getKey());
      Assert.assertEquals(i + 1,map.get(i).getBkey());
      Assert.assertEquals(""String_Node_Str"" + (i + 1),map.get(i).getValue());
    }
  }
 catch (  Exception e) {
    oldFuture.cancel(true);
    e.printStackTrace();
    Assert.fail(e.getMessage());
  }
  SMGetFuture<List<SMGetElement<Object>>> future=mc.asyncBopSortMergeGet(keyList,0,10,ElementFlagFilter.DO_NOT_FILTER,10,smgetMode);
  try {
    List<SMGetElement<Object>> map=future.get(1000L,TimeUnit.SECONDS);
    Assert.assertEquals(10,map.size());
    Assert.assertTrue(future.getMissedKeys().isEmpty());
    for (int i=0; i < map.size(); i++) {
      Assert.assertEquals(KEY + i,map.get(i).getKey());
      Assert.assertEquals(i,map.get(i).getBkey());
      Assert.assertEquals(""String_Node_Str"" + i,map.get(i).getValue());
    }
  }
 catch (  Exception e) {
    future.cancel(true);
    e.printStackTrace();
    Assert.fail(e.getMessage());
  }
}",0.993006993006993
35177,"public void testSMGetHitAllWithOffsetLessThanCount(){
  try {
    keyList=new ArrayList<String>();
    for (int i=0; i < 9; i++) {
      mc.delete(KEY + i).get();
      keyList.add(KEY + i);
    }
    for (int i=0; i < 9; i++) {
      mc.asyncBopInsert(KEY + i,i,""String_Node_Str"".getBytes(),""String_Node_Str"" + i,new CollectionAttributes()).get();
    }
  }
 catch (  Exception e) {
    fail(e.getMessage());
  }
  SMGetMode smgetMode=SMGetMode.UNIQUE;
  SMGetFuture<List<SMGetElement<Object>>> oldFuture=mc.asyncBopSortMergeGet(keyList,0,10,ElementFlagFilter.DO_NOT_FILTER,1,10);
  try {
    List<SMGetElement<Object>> map=oldFuture.get(1000L,TimeUnit.SECONDS);
    Assert.assertEquals(8,map.size());
    Assert.assertTrue(oldFuture.getMissedKeyList().isEmpty());
    for (int i=0; i < map.size(); i++) {
      Assert.assertEquals(KEY + (i + 1),map.get(i).getKey());
      Assert.assertEquals(i + 1,map.get(i).getBkey());
      Assert.assertEquals(""String_Node_Str"" + (i + 1),map.get(i).getValue());
    }
  }
 catch (  Exception e) {
    oldFuture.cancel(true);
    e.printStackTrace();
    Assert.fail(e.getMessage());
  }
  SMGetFuture<List<SMGetElement<Object>>> future=mc.asyncBopSortMergeGet(keyList,0,10,ElementFlagFilter.DO_NOT_FILTER,10,smgetMode);
  try {
    List<SMGetElement<Object>> map=future.get(1000L,TimeUnit.SECONDS);
    Assert.assertEquals(8,map.size());
    Assert.assertTrue(future.getMissedKeyList().isEmpty());
    for (int i=0; i < map.size(); i++) {
      Assert.assertEquals(KEY + (i + 1),map.get(i).getKey());
      Assert.assertEquals(i + 1,map.get(i).getBkey());
      Assert.assertEquals(""String_Node_Str"" + (i + 1),map.get(i).getValue());
    }
  }
 catch (  Exception e) {
    future.cancel(true);
    e.printStackTrace();
    Assert.fail(e.getMessage());
  }
}","public void testSMGetHitAllWithOffsetLessThanCount(){
  try {
    keyList=new ArrayList<String>();
    for (int i=0; i < 9; i++) {
      mc.delete(KEY + i).get();
      keyList.add(KEY + i);
    }
    for (int i=0; i < 9; i++) {
      mc.asyncBopInsert(KEY + i,i,""String_Node_Str"".getBytes(),""String_Node_Str"" + i,new CollectionAttributes()).get();
    }
  }
 catch (  Exception e) {
    fail(e.getMessage());
  }
  SMGetMode smgetMode=SMGetMode.UNIQUE;
  SMGetFuture<List<SMGetElement<Object>>> oldFuture=mc.asyncBopSortMergeGet(keyList,0,10,ElementFlagFilter.DO_NOT_FILTER,1,10);
  try {
    List<SMGetElement<Object>> map=oldFuture.get(1000L,TimeUnit.SECONDS);
    Assert.assertEquals(8,map.size());
    Assert.assertTrue(oldFuture.getMissedKeyList().isEmpty());
    for (int i=0; i < map.size(); i++) {
      Assert.assertEquals(KEY + (i + 1),map.get(i).getKey());
      Assert.assertEquals(i + 1,map.get(i).getBkey());
      Assert.assertEquals(""String_Node_Str"" + (i + 1),map.get(i).getValue());
    }
  }
 catch (  Exception e) {
    oldFuture.cancel(true);
    e.printStackTrace();
    Assert.fail(e.getMessage());
  }
  SMGetFuture<List<SMGetElement<Object>>> future=mc.asyncBopSortMergeGet(keyList,0,10,ElementFlagFilter.DO_NOT_FILTER,10,smgetMode);
  try {
    List<SMGetElement<Object>> map=future.get(1000L,TimeUnit.SECONDS);
    Assert.assertEquals(9,map.size());
    Assert.assertTrue(future.getMissedKeys().isEmpty());
    for (int i=0; i < map.size(); i++) {
      Assert.assertEquals(KEY + i,map.get(i).getKey());
      Assert.assertEquals(i,map.get(i).getBkey());
      Assert.assertEquals(""String_Node_Str"" + i,map.get(i).getValue());
    }
  }
 catch (  Exception e) {
    future.cancel(true);
    e.printStackTrace();
    Assert.fail(e.getMessage());
  }
}",0.9924475524475525
35178,"public void testSMGetHitHalfDesc(){
  try {
    keyList=new ArrayList<String>();
    for (int i=0; i < 10; i++) {
      mc.delete(KEY + i).get();
      keyList.add(KEY + i);
    }
    for (int i=0; i < 5; i++) {
      mc.asyncBopInsert(KEY + i,i,""String_Node_Str"".getBytes(),""String_Node_Str"" + i,new CollectionAttributes()).get();
    }
  }
 catch (  Exception e) {
    fail(e.getMessage());
  }
  SMGetMode smgetMode=SMGetMode.UNIQUE;
  SMGetFuture<List<SMGetElement<Object>>> oldFuture=mc.asyncBopSortMergeGet(keyList,10,0,ElementFlagFilter.DO_NOT_FILTER,0,10);
  try {
    List<SMGetElement<Object>> map=oldFuture.get(1000L,TimeUnit.SECONDS);
    assertEquals(5,map.size());
    assertEquals(oldFuture.getMissedKeyList().toString(),5,oldFuture.getMissedKeyList().size());
  }
 catch (  Exception e) {
    oldFuture.cancel(true);
    e.printStackTrace();
    Assert.fail(e.getMessage());
  }
  SMGetFuture<List<SMGetElement<Object>>> future=mc.asyncBopSortMergeGet(keyList,10,0,ElementFlagFilter.DO_NOT_FILTER,10,smgetMode);
  try {
    List<SMGetElement<Object>> map=future.get(1000L,TimeUnit.SECONDS);
    assertEquals(5,map.size());
    assertEquals(future.getMissedKeyList().toString(),5,future.getMissedKeyList().size());
  }
 catch (  Exception e) {
    future.cancel(true);
    e.printStackTrace();
    Assert.fail(e.getMessage());
  }
}","public void testSMGetHitHalfDesc(){
  try {
    keyList=new ArrayList<String>();
    for (int i=0; i < 10; i++) {
      mc.delete(KEY + i).get();
      keyList.add(KEY + i);
    }
    for (int i=0; i < 5; i++) {
      mc.asyncBopInsert(KEY + i,i,""String_Node_Str"".getBytes(),""String_Node_Str"" + i,new CollectionAttributes()).get();
    }
  }
 catch (  Exception e) {
    fail(e.getMessage());
  }
  SMGetMode smgetMode=SMGetMode.UNIQUE;
  SMGetFuture<List<SMGetElement<Object>>> oldFuture=mc.asyncBopSortMergeGet(keyList,10,0,ElementFlagFilter.DO_NOT_FILTER,0,10);
  try {
    List<SMGetElement<Object>> map=oldFuture.get(1000L,TimeUnit.SECONDS);
    assertEquals(5,map.size());
    assertEquals(oldFuture.getMissedKeyList().toString(),5,oldFuture.getMissedKeyList().size());
  }
 catch (  Exception e) {
    oldFuture.cancel(true);
    e.printStackTrace();
    Assert.fail(e.getMessage());
  }
  SMGetFuture<List<SMGetElement<Object>>> future=mc.asyncBopSortMergeGet(keyList,10,0,ElementFlagFilter.DO_NOT_FILTER,10,smgetMode);
  try {
    List<SMGetElement<Object>> map=future.get(1000L,TimeUnit.SECONDS);
    assertEquals(5,map.size());
    assertEquals(future.getMissedKeys().toString(),5,future.getMissedKeys().size());
  }
 catch (  Exception e) {
    future.cancel(true);
    e.printStackTrace();
    Assert.fail(e.getMessage());
  }
}",0.996279761904762
35179,"public void testSMGetHitAllWithOffsetExactCount(){
  try {
    keyList=new ArrayList<String>();
    for (int i=0; i < 10; i++) {
      mc.delete(KEY + i).get();
      keyList.add(KEY + i);
    }
    for (int i=0; i < 10; i++) {
      mc.asyncBopInsert(KEY + i,i,""String_Node_Str"".getBytes(),""String_Node_Str"" + i,new CollectionAttributes()).get();
    }
  }
 catch (  Exception e) {
    fail(e.getMessage());
  }
  SMGetMode smgetMode=SMGetMode.UNIQUE;
  SMGetFuture<List<SMGetElement<Object>>> oldFuture=mc.asyncBopSortMergeGet(keyList,0,10,ElementFlagFilter.DO_NOT_FILTER,1,10);
  try {
    List<SMGetElement<Object>> map=oldFuture.get(1000L,TimeUnit.SECONDS);
    Assert.assertEquals(9,map.size());
    Assert.assertTrue(oldFuture.getMissedKeyList().isEmpty());
    for (int i=0; i < map.size(); i++) {
      Assert.assertEquals(KEY + (i + 1),map.get(i).getKey());
      Assert.assertEquals(i + 1,map.get(i).getBkey());
      Assert.assertEquals(""String_Node_Str"" + (i + 1),map.get(i).getValue());
    }
  }
 catch (  Exception e) {
    oldFuture.cancel(true);
    e.printStackTrace();
    Assert.fail(e.getMessage());
  }
  SMGetFuture<List<SMGetElement<Object>>> future=mc.asyncBopSortMergeGet(keyList,0,10,ElementFlagFilter.DO_NOT_FILTER,10,smgetMode);
  try {
    List<SMGetElement<Object>> map=future.get(1000L,TimeUnit.SECONDS);
    Assert.assertEquals(9,map.size());
    Assert.assertTrue(future.getMissedKeyList().isEmpty());
    for (int i=0; i < map.size(); i++) {
      Assert.assertEquals(KEY + (i + 1),map.get(i).getKey());
      Assert.assertEquals(i + 1,map.get(i).getBkey());
      Assert.assertEquals(""String_Node_Str"" + (i + 1),map.get(i).getValue());
    }
  }
 catch (  Exception e) {
    future.cancel(true);
    e.printStackTrace();
    Assert.fail(e.getMessage());
  }
}","public void testSMGetHitAllWithOffsetExactCount(){
  try {
    keyList=new ArrayList<String>();
    for (int i=0; i < 10; i++) {
      mc.delete(KEY + i).get();
      keyList.add(KEY + i);
    }
    for (int i=0; i < 10; i++) {
      mc.asyncBopInsert(KEY + i,i,""String_Node_Str"".getBytes(),""String_Node_Str"" + i,new CollectionAttributes()).get();
    }
  }
 catch (  Exception e) {
    fail(e.getMessage());
  }
  SMGetMode smgetMode=SMGetMode.UNIQUE;
  SMGetFuture<List<SMGetElement<Object>>> oldFuture=mc.asyncBopSortMergeGet(keyList,0,10,ElementFlagFilter.DO_NOT_FILTER,1,10);
  try {
    List<SMGetElement<Object>> map=oldFuture.get(1000L,TimeUnit.SECONDS);
    Assert.assertEquals(9,map.size());
    Assert.assertTrue(oldFuture.getMissedKeyList().isEmpty());
    for (int i=0; i < map.size(); i++) {
      Assert.assertEquals(KEY + (i + 1),map.get(i).getKey());
      Assert.assertEquals(i + 1,map.get(i).getBkey());
      Assert.assertEquals(""String_Node_Str"" + (i + 1),map.get(i).getValue());
    }
  }
 catch (  Exception e) {
    oldFuture.cancel(true);
    e.printStackTrace();
    Assert.fail(e.getMessage());
  }
  SMGetFuture<List<SMGetElement<Object>>> future=mc.asyncBopSortMergeGet(keyList,0,10,ElementFlagFilter.DO_NOT_FILTER,10,smgetMode);
  try {
    List<SMGetElement<Object>> map=future.get(1000L,TimeUnit.SECONDS);
    Assert.assertEquals(10,map.size());
    Assert.assertTrue(future.getMissedKeys().isEmpty());
    for (int i=0; i < map.size(); i++) {
      Assert.assertEquals(KEY + i,map.get(i).getKey());
      Assert.assertEquals(i,map.get(i).getBkey());
      Assert.assertEquals(""String_Node_Str"" + i,map.get(i).getValue());
    }
  }
 catch (  Exception e) {
    future.cancel(true);
    e.printStackTrace();
    Assert.fail(e.getMessage());
  }
}",0.9921656407386682
35180,"public void testSMGetHitHalf(){
  try {
    keyList=new ArrayList<String>();
    for (int i=0; i < 10; i++) {
      mc.delete(KEY + i).get();
      keyList.add(KEY + i);
    }
    for (int i=0; i < 5; i++) {
      mc.asyncBopInsert(KEY + i,i,""String_Node_Str"".getBytes(),""String_Node_Str"" + i,new CollectionAttributes()).get();
    }
  }
 catch (  Exception e) {
    fail(e.getMessage());
  }
  SMGetMode smgetMode=SMGetMode.UNIQUE;
  SMGetFuture<List<SMGetElement<Object>>> oldFuture=mc.asyncBopSortMergeGet(keyList,0,10,ElementFlagFilter.DO_NOT_FILTER,0,10);
  try {
    List<SMGetElement<Object>> map=oldFuture.get(1000L,TimeUnit.SECONDS);
    assertEquals(5,map.size());
    assertEquals(oldFuture.getMissedKeyList().toString(),5,oldFuture.getMissedKeyList().size());
  }
 catch (  Exception e) {
    oldFuture.cancel(true);
    e.printStackTrace();
    Assert.fail(e.getMessage());
  }
  SMGetFuture<List<SMGetElement<Object>>> future=mc.asyncBopSortMergeGet(keyList,0,10,ElementFlagFilter.DO_NOT_FILTER,10,smgetMode);
  try {
    List<SMGetElement<Object>> map=future.get(1000L,TimeUnit.SECONDS);
    assertEquals(5,map.size());
    assertEquals(future.getMissedKeyList().toString(),5,future.getMissedKeyList().size());
  }
 catch (  Exception e) {
    future.cancel(true);
    e.printStackTrace();
    Assert.fail(e.getMessage());
  }
}","public void testSMGetHitHalf(){
  try {
    keyList=new ArrayList<String>();
    for (int i=0; i < 10; i++) {
      mc.delete(KEY + i).get();
      keyList.add(KEY + i);
    }
    for (int i=0; i < 5; i++) {
      mc.asyncBopInsert(KEY + i,i,""String_Node_Str"".getBytes(),""String_Node_Str"" + i,new CollectionAttributes()).get();
    }
  }
 catch (  Exception e) {
    fail(e.getMessage());
  }
  SMGetMode smgetMode=SMGetMode.UNIQUE;
  SMGetFuture<List<SMGetElement<Object>>> oldFuture=mc.asyncBopSortMergeGet(keyList,0,10,ElementFlagFilter.DO_NOT_FILTER,0,10);
  try {
    List<SMGetElement<Object>> map=oldFuture.get(1000L,TimeUnit.SECONDS);
    assertEquals(5,map.size());
    assertEquals(oldFuture.getMissedKeyList().toString(),5,oldFuture.getMissedKeyList().size());
  }
 catch (  Exception e) {
    oldFuture.cancel(true);
    e.printStackTrace();
    Assert.fail(e.getMessage());
  }
  SMGetFuture<List<SMGetElement<Object>>> future=mc.asyncBopSortMergeGet(keyList,0,10,ElementFlagFilter.DO_NOT_FILTER,10,smgetMode);
  try {
    List<SMGetElement<Object>> map=future.get(1000L,TimeUnit.SECONDS);
    assertEquals(5,map.size());
    assertEquals(future.getMissedKeys().toString(),5,future.getMissedKeys().size());
  }
 catch (  Exception e) {
    future.cancel(true);
    e.printStackTrace();
    Assert.fail(e.getMessage());
  }
}",0.996268656716418
35181,"public void testSMGetHitAll(){
  try {
    keyList=new ArrayList<String>();
    for (int i=0; i < 50; i++) {
      mc.delete(KEY + i).get();
      keyList.add(KEY + i);
    }
    for (int i=0; i < 50; i++) {
      mc.asyncBopInsert(KEY + i,i,""String_Node_Str"".getBytes(),""String_Node_Str"" + i,new CollectionAttributes()).get();
    }
  }
 catch (  Exception e) {
    fail(e.getMessage());
  }
  SMGetMode smgetMode=SMGetMode.UNIQUE;
  SMGetFuture<List<SMGetElement<Object>>> oldFuture=mc.asyncBopSortMergeGet(keyList,0,10,ElementFlagFilter.DO_NOT_FILTER,0,10);
  try {
    List<SMGetElement<Object>> map=oldFuture.get(1000L,TimeUnit.SECONDS);
    Assert.assertEquals(10,map.size());
    Assert.assertTrue(oldFuture.getMissedKeyList().isEmpty());
    for (int i=0; i < map.size(); i++) {
      Assert.assertEquals(KEY + i,map.get(i).getKey());
      Assert.assertEquals(i,map.get(i).getBkey());
      Assert.assertEquals(""String_Node_Str"" + i,map.get(i).getValue());
    }
  }
 catch (  Exception e) {
    oldFuture.cancel(true);
    e.printStackTrace();
    Assert.fail(e.getMessage());
  }
  SMGetFuture<List<SMGetElement<Object>>> future=mc.asyncBopSortMergeGet(keyList,0,10,ElementFlagFilter.DO_NOT_FILTER,10,smgetMode);
  try {
    List<SMGetElement<Object>> map=future.get(1000L,TimeUnit.SECONDS);
    Assert.assertEquals(10,map.size());
    Assert.assertTrue(future.getMissedKeyList().isEmpty());
    for (int i=0; i < map.size(); i++) {
      Assert.assertEquals(KEY + i,map.get(i).getKey());
      Assert.assertEquals(i,map.get(i).getBkey());
      Assert.assertEquals(""String_Node_Str"" + i,map.get(i).getValue());
    }
  }
 catch (  Exception e) {
    future.cancel(true);
    e.printStackTrace();
    Assert.fail(e.getMessage());
  }
}","public void testSMGetHitAll(){
  try {
    keyList=new ArrayList<String>();
    for (int i=0; i < 50; i++) {
      mc.delete(KEY + i).get();
      keyList.add(KEY + i);
    }
    for (int i=0; i < 50; i++) {
      mc.asyncBopInsert(KEY + i,i,""String_Node_Str"".getBytes(),""String_Node_Str"" + i,new CollectionAttributes()).get();
    }
  }
 catch (  Exception e) {
    fail(e.getMessage());
  }
  SMGetMode smgetMode=SMGetMode.UNIQUE;
  SMGetFuture<List<SMGetElement<Object>>> oldFuture=mc.asyncBopSortMergeGet(keyList,0,10,ElementFlagFilter.DO_NOT_FILTER,0,10);
  try {
    List<SMGetElement<Object>> map=oldFuture.get(1000L,TimeUnit.SECONDS);
    Assert.assertEquals(10,map.size());
    Assert.assertTrue(oldFuture.getMissedKeyList().isEmpty());
    for (int i=0; i < map.size(); i++) {
      Assert.assertEquals(KEY + i,map.get(i).getKey());
      Assert.assertEquals(i,map.get(i).getBkey());
      Assert.assertEquals(""String_Node_Str"" + i,map.get(i).getValue());
    }
  }
 catch (  Exception e) {
    oldFuture.cancel(true);
    e.printStackTrace();
    Assert.fail(e.getMessage());
  }
  SMGetFuture<List<SMGetElement<Object>>> future=mc.asyncBopSortMergeGet(keyList,0,10,ElementFlagFilter.DO_NOT_FILTER,10,smgetMode);
  try {
    List<SMGetElement<Object>> map=future.get(1000L,TimeUnit.SECONDS);
    Assert.assertEquals(10,map.size());
    Assert.assertTrue(future.getMissedKeys().isEmpty());
    for (int i=0; i < map.size(); i++) {
      Assert.assertEquals(KEY + i,map.get(i).getKey());
      Assert.assertEquals(i,map.get(i).getBkey());
      Assert.assertEquals(""String_Node_Str"" + i,map.get(i).getValue());
    }
  }
 catch (  Exception e) {
    future.cancel(true);
    e.printStackTrace();
    Assert.fail(e.getMessage());
  }
}",0.998566924620235
35182,"public void testSMGetHitAllDesc(){
  try {
    keyList=new ArrayList<String>();
    for (int i=0; i < 10; i++) {
      mc.delete(KEY + i).get();
      keyList.add(KEY + i);
    }
    for (int i=0; i < 10; i++) {
      mc.asyncBopInsert(KEY + i,i,""String_Node_Str"".getBytes(),""String_Node_Str"" + i,new CollectionAttributes()).get();
    }
  }
 catch (  Exception e) {
    fail(e.getMessage());
  }
  SMGetMode smgetMode=SMGetMode.UNIQUE;
  SMGetFuture<List<SMGetElement<Object>>> oldFuture=mc.asyncBopSortMergeGet(keyList,10,0,ElementFlagFilter.DO_NOT_FILTER,0,10);
  try {
    List<SMGetElement<Object>> map=oldFuture.get(1000L,TimeUnit.SECONDS);
    Assert.assertEquals(10,map.size());
    Assert.assertTrue(oldFuture.getMissedKeyList().isEmpty());
  }
 catch (  Exception e) {
    oldFuture.cancel(true);
    e.printStackTrace();
    Assert.fail(e.getMessage());
  }
  SMGetFuture<List<SMGetElement<Object>>> future=mc.asyncBopSortMergeGet(keyList,10,0,ElementFlagFilter.DO_NOT_FILTER,10,smgetMode);
  try {
    List<SMGetElement<Object>> map=future.get(1000L,TimeUnit.SECONDS);
    Assert.assertEquals(10,map.size());
    Assert.assertTrue(future.getMissedKeyList().isEmpty());
  }
 catch (  Exception e) {
    future.cancel(true);
    e.printStackTrace();
    Assert.fail(e.getMessage());
  }
}","public void testSMGetHitAllDesc(){
  try {
    keyList=new ArrayList<String>();
    for (int i=0; i < 10; i++) {
      mc.delete(KEY + i).get();
      keyList.add(KEY + i);
    }
    for (int i=0; i < 10; i++) {
      mc.asyncBopInsert(KEY + i,i,""String_Node_Str"".getBytes(),""String_Node_Str"" + i,new CollectionAttributes()).get();
    }
  }
 catch (  Exception e) {
    fail(e.getMessage());
  }
  SMGetMode smgetMode=SMGetMode.UNIQUE;
  SMGetFuture<List<SMGetElement<Object>>> oldFuture=mc.asyncBopSortMergeGet(keyList,10,0,ElementFlagFilter.DO_NOT_FILTER,0,10);
  try {
    List<SMGetElement<Object>> map=oldFuture.get(1000L,TimeUnit.SECONDS);
    Assert.assertEquals(10,map.size());
    Assert.assertTrue(oldFuture.getMissedKeyList().isEmpty());
  }
 catch (  Exception e) {
    oldFuture.cancel(true);
    e.printStackTrace();
    Assert.fail(e.getMessage());
  }
  SMGetFuture<List<SMGetElement<Object>>> future=mc.asyncBopSortMergeGet(keyList,10,0,ElementFlagFilter.DO_NOT_FILTER,10,smgetMode);
  try {
    List<SMGetElement<Object>> map=future.get(1000L,TimeUnit.SECONDS);
    Assert.assertEquals(10,map.size());
    Assert.assertTrue(future.getMissedKeys().isEmpty());
  }
 catch (  Exception e) {
    future.cancel(true);
    e.printStackTrace();
    Assert.fail(e.getMessage());
  }
}",0.9980717315850366
35183,"@Override public CollectionFuture<Long> asyncBopDecr(String key,byte[] subkey,int by,long initial,byte[] eFlag){
  return this.getClient().asyncBopIncr(key,subkey,by,initial,eFlag);
}","@Override public CollectionFuture<Long> asyncBopDecr(String key,byte[] subkey,int by,long initial,byte[] eFlag){
  return this.getClient().asyncBopDecr(key,subkey,by,initial,eFlag);
}",0.989071038251366
35184,"/** 
 * Generic bulk get operation for b+tree items. Public methods call this method.
 * @param getBulkList  list of operation parameters (item keys, element key range, and so on)
 * @param offset  start index of the elements
 * @param count  number of elements to fetch
 * @param reverse  forward or backward
 * @param tc  transcoder to serialize and unserialize value
 * @return future holding the map of item key and the fetched elements from that key
 */
private <T>CollectionGetBulkFuture<Map<String,BTreeGetResult<Long,T>>> btreeGetBulk(final List<BTreeGetBulk<T>> getBulkList,final int offset,final int count,final boolean reverse,final Transcoder<T> tc){
  final CountDownLatch latch=new CountDownLatch(getBulkList.size());
  final ConcurrentLinkedQueue<Operation> ops=new ConcurrentLinkedQueue<Operation>();
  final Map<String,BTreeGetResult<Long,T>> result=new ConcurrentHashMap<String,BTreeGetResult<Long,T>>();
  for (  BTreeGetBulk<T> getBulk : getBulkList) {
    Operation op=opFact.bopGetBulk(getBulk,new BTreeGetBulkOperation.Callback<T>(){
      @Override public void receivedStatus(      OperationStatus status){
      }
      @Override public void complete(){
        latch.countDown();
      }
      @Override public void gotKey(      String key,      int elementCount,      OperationStatus status){
        result.put(key,new BTreeGetResult<Long,T>((elementCount > 0) ? new TreeMap<Long,BTreeElement<Long,T>>() : null,new CollectionOperationStatus(status)));
      }
      @Override public void gotElement(      String key,      Object subkey,      int flags,      byte[] eflag,      byte[] data){
        result.get(key).addElement(new BTreeElement<Long,T>((Long)subkey,eflag,tc.decode(new CachedData(flags,data,tc.getMaxSize()))));
      }
    }
);
    ops.add(op);
    addOp(getBulk.getRepresentKey(),op);
  }
  return new CollectionGetBulkFuture<Map<String,BTreeGetResult<Long,T>>>(latch,ops,result,operationTimeout);
}","/** 
 * Generic bulk get operation for b+tree items. Public methods call this method.
 * @param getBulkList  list of operation parameters (item keys, element key range, and so on)
 * @param offset  start index of the elements
 * @param count  number of elements to fetch
 * @param reverse  forward or backward
 * @param tc  transcoder to serialize and unserialize value
 * @return future holding the map of item key and the fetched elements from that key
 */
private <T>CollectionGetBulkFuture<Map<String,BTreeGetResult<Long,T>>> btreeGetBulk(final List<BTreeGetBulk<T>> getBulkList,final int offset,final int count,final boolean reverse,final Transcoder<T> tc){
  final CountDownLatch latch=new CountDownLatch(getBulkList.size());
  final ConcurrentLinkedQueue<Operation> ops=new ConcurrentLinkedQueue<Operation>();
  final Map<String,BTreeGetResult<Long,T>> result=new ConcurrentHashMap<String,BTreeGetResult<Long,T>>();
  for (  BTreeGetBulk<T> getBulk : getBulkList) {
    Operation op=opFact.bopGetBulk(getBulk,new BTreeGetBulkOperation.Callback<T>(){
      @Override public void receivedStatus(      OperationStatus status){
      }
      @Override public void complete(){
        latch.countDown();
      }
      @Override public void gotKey(      String key,      int elementCount,      OperationStatus status){
        TreeMap<Long,BTreeElement<Long,T>> tree=null;
        if (elementCount > 0) {
          tree=new TreeMap<Long,BTreeElement<Long,T>>((reverse) ? Collections.reverseOrder() : null);
        }
        result.put(key,new BTreeGetResult<Long,T>(tree,new CollectionOperationStatus(status)));
      }
      @Override public void gotElement(      String key,      Object subkey,      int flags,      byte[] eflag,      byte[] data){
        result.get(key).addElement(new BTreeElement<Long,T>((Long)subkey,eflag,tc.decode(new CachedData(flags,data,tc.getMaxSize()))));
      }
    }
);
    ops.add(op);
    addOp(getBulk.getRepresentKey(),op);
  }
  return new CollectionGetBulkFuture<Map<String,BTreeGetResult<Long,T>>>(latch,ops,result,operationTimeout);
}",0.9298856290402784
35185,"@Override public void decodeKeyHeader(String keyHeader){
  String[] splited=keyHeader.split(""String_Node_Str"");
  this.key=splited[1];
}","@Override public void decodeKeyHeader(String keyHeader){
  String[] splited=keyHeader.split(""String_Node_Str"");
  this.key=splited[1];
  if (splited.length == 5) {
    this.flag=Integer.valueOf(splited[3]);
  }
}",0.7816091954022989
35186,"public T call() throws Exception {
  return v;
}","public T call() throws Exception {
  return get(key,tc);
}",0.8867924528301887
35187,"public Element getElement(String key){
  return cache.get(key);
}","public Element getElement(String key){
  Element element=cache.get(key);
  if (logger.isDebugEnabled()) {
    if (null != element) {
      logger.debug(""String_Node_Str"",key);
    }
  }
  return element;
}",0.4296296296296296
35188,"@Override public void decodeKeyHeader(String keyHeader){
  String[] splited=keyHeader.split(""String_Node_Str"");
  this.key=splited[1];
}","@Override public void decodeKeyHeader(String keyHeader){
  String[] splited=keyHeader.split(""String_Node_Str"");
  this.key=splited[1];
  if (splited.length == 5) {
    this.flag=Integer.valueOf(splited[3]);
  }
}",0.7816091954022989
35189,"public void initialize(){
  String cmd=collectionGet.getCommand();
  String args=collectionGet.stringify();
  byte[] additionalArgs=collectionGet.getAddtionalArgs();
  ByteBuffer bb=ByteBuffer.allocate(KeyUtil.getKeyBytes(key).length + cmd.length() + args.length()+ (additionalArgs == null ? 0 : additionalArgs.length)+ 16);
  setArguments(bb,cmd,key,args);
  if (additionalArgs != null) {
    setArguments(bb,additionalArgs);
  }
  bb.flip();
  setBuffer(bb);
  if (getLogger().isDebugEnabled()) {
    getLogger().debug(""String_Node_Str"" + (new String(bb.array())).replace(""String_Node_Str"",""String_Node_Str""));
  }
}","public void initialize(){
  String cmd=collectionGet.getCommand();
  String args=collectionGet.stringify();
  byte[] additionalArgs=collectionGet.getAddtionalArgs();
  ByteBuffer bb=ByteBuffer.allocate(KeyUtil.getKeyBytes(key).length + cmd.length() + args.length()+ (additionalArgs == null ? 0 : additionalArgs.length)+ 16);
  setArguments(bb,cmd,key,args);
  if (additionalArgs != null) {
    bb.put(additionalArgs);
    bb.put(CRLF);
  }
  bb.flip();
  setBuffer(bb);
  if (getLogger().isDebugEnabled()) {
    getLogger().debug(""String_Node_Str"" + (new String(bb.array())).replace(""String_Node_Str"",""String_Node_Str""));
  }
}",0.944578313253012
35190,"/** 
 * Returns the socket address of a given MemcachedNode.
 * @param node The node which we're interested in
 * @return String the socket address of that node.
 */
protected String getSocketAddressForNode(MemcachedNode node){
  String result=socketAddresses.get(node);
  if (result == null) {
    result=String.valueOf(node.getSocketAddress());
    if (result.startsWith(""String_Node_Str"")) {
      result=result.substring(1);
    }
    socketAddresses.put(node,result);
  }
  return result;
}","/** 
 * Returns the socket address of a given MemcachedNode.
 * @param node The node which we're interested in
 * @return String the socket address of that node.
 */
protected String getSocketAddressForNode(MemcachedNode node){
  String result=socketAddresses.get(node);
  if (result == null) {
    result=String.valueOf(node.getSocketAddress());
    result=result.substring(result.indexOf('/') + 1);
    socketAddresses.put(node,result);
  }
  return result;
}",0.7677824267782427
35191,"private <T>SMGetFuture<List<SMGetElement<T>>> smget(final List<BTreeSMGet<T>> smGetList,final int count,final boolean reverse,final Transcoder<T> tc,final SMGetMode smgetMode){
  final String END=""String_Node_Str"";
  final String TRIMMED=""String_Node_Str"";
  final String DUPLICATED=""String_Node_Str"";
  final String DUPLICATED_TRIMMED=""String_Node_Str"";
  final CountDownLatch blatch=new CountDownLatch(smGetList.size());
  final ConcurrentLinkedQueue<Operation> ops=new ConcurrentLinkedQueue<Operation>();
  final Map<String,CollectionOperationStatus> missedKeys=Collections.synchronizedMap(new HashMap<String,CollectionOperationStatus>());
  final List<String> missedKeyList=Collections.synchronizedList(new ArrayList<String>());
  final int totalResultElementCount=count;
  final List<SMGetElement<T>> mergedResult=Collections.synchronizedList(new ArrayList<SMGetElement<T>>(totalResultElementCount));
  final List<SMGetTrimKey> mergedTrimmedKeys=Collections.synchronizedList(new ArrayList<SMGetTrimKey>());
  final ReentrantLock lock=new ReentrantLock();
  final List<OperationStatus> resultOperationStatus=Collections.synchronizedList(new ArrayList<OperationStatus>(1));
  final List<OperationStatus> failedOperationStatus=Collections.synchronizedList(new ArrayList<OperationStatus>(1));
  final Set<Object> totalBkey=new TreeSet<Object>();
  final AtomicBoolean stopCollect=new AtomicBoolean(false);
  final AtomicInteger processedSMGetCount=new AtomicInteger(smGetList.size());
  for (  BTreeSMGet<T> smGet : smGetList) {
    Operation op=opFact.bopsmget(smGet,new BTreeSortMergeGetOperation.Callback(){
      final List<SMGetElement<T>> eachResult=new ArrayList<SMGetElement<T>>();
      final List<SMGetTrimKey> eachTrimmedResult=new ArrayList<SMGetTrimKey>();
      private void addTotalBkey(      List<SMGetElement<T>> smgetresult){
        for (        SMGetElement<T> each : smgetresult) {
          if (each.getBkeyByObject() instanceof byte[]) {
            totalBkey.add(new ByteArrayBKey((byte[])each.getBkeyByObject()));
          }
 else {
            totalBkey.add(each.getBkeyByObject());
          }
        }
      }
      private boolean addTotalBkey(      Object bkey){
        if (bkey instanceof byte[]) {
          return totalBkey.add(new ByteArrayBKey((byte[])bkey));
        }
 else {
          return totalBkey.add(bkey);
        }
      }
      @Override public void receivedStatus(      OperationStatus status){
        processedSMGetCount.decrementAndGet();
        if (status.isSuccess()) {
          resultOperationStatus.add(status);
        }
 else {
          stopCollect.set(true);
          mergedResult.clear();
          mergedTrimmedKeys.clear();
          failedOperationStatus.add(status);
        }
        if (status.isSuccess()) {
          lock.lock();
          try {
            if (mergedResult.size() == 0) {
              if (smGetList.size() > 1) {
                addTotalBkey(eachResult);
              }
              mergedResult.addAll(eachResult);
            }
 else {
              int idx, pos=0;
              for (              SMGetElement<T> result : eachResult) {
                for (idx=pos; idx < mergedResult.size(); idx++) {
                  if ((reverse) ? (0 < result.compareTo(mergedResult.get(idx))) : (0 > result.compareTo(mergedResult.get(idx))))                   break;
                }
                if (idx < mergedResult.size() || idx < totalResultElementCount) {
                  boolean duplicated=false;
                  if (!addTotalBkey(result.getBkeyByObject())) {
                    resultOperationStatus.add(new OperationStatus(true,""String_Node_Str""));
                    duplicated=true;
                  }
                  if (smgetMode != SMGetMode.UNIQUE || !duplicated) {
                    mergedResult.add(idx,result);
                    if (mergedResult.size() > totalResultElementCount)                     mergedResult.remove(totalResultElementCount);
                  }
                  pos=idx + 1;
                  if (pos >= totalResultElementCount) {
                    break;
                  }
                }
              }
            }
            if (eachTrimmedResult.size() > 0) {
              if (mergedTrimmedKeys.size() == 0) {
                mergedTrimmedKeys.addAll(eachTrimmedResult);
              }
 else {
                int idx, pos=0;
                for (                SMGetTrimKey eTrim : eachTrimmedResult) {
                  for (idx=pos; idx < mergedTrimmedKeys.size(); idx++) {
                    if ((reverse) ? (0 < eTrim.compareTo(mergedTrimmedKeys.get(idx))) : 0 > eTrim.compareTo(mergedTrimmedKeys.get(idx))) {
                      break;
                    }
                  }
                  mergedTrimmedKeys.add(idx,eTrim);
                  pos=idx + 1;
                }
              }
            }
            if (mergedTrimmedKeys.size() > 0 && processedSMGetCount.get() == 0 && count <= mergedResult.size()) {
              SMGetElement<T> lastElement=mergedResult.get(count - 1);
              SMGetTrimKey lastTrimKey=new SMGetTrimKey(lastElement.getKey(),lastElement.getBkeyByObject());
              for (int idx=mergedTrimmedKeys.size() - 1; idx >= 0; idx--) {
                SMGetTrimKey me=mergedTrimmedKeys.get(idx);
                if ((reverse) ? (0 >= me.compareTo(lastTrimKey)) : 0 <= me.compareTo(lastTrimKey)) {
                  mergedTrimmedKeys.remove(idx);
                }
 else {
                  break;
                }
              }
            }
          }
  finally {
            lock.unlock();
          }
        }
 else {
          getLogger().warn(""String_Node_Str"",status);
        }
      }
      @Override public void complete(){
        blatch.countDown();
      }
      @Override public void gotData(      String key,      Object subkey,      int flags,      byte[] data){
        if (stopCollect.get())         return;
        if (subkey instanceof Long) {
          eachResult.add(new SMGetElement<T>(key,(Long)subkey,tc.decode(new CachedData(flags,data,tc.getMaxSize()))));
        }
 else         if (subkey instanceof byte[]) {
          eachResult.add(new SMGetElement<T>(key,(byte[])subkey,tc.decode(new CachedData(flags,data,tc.getMaxSize()))));
        }
      }
      @Override public void gotMissedKey(      String key,      OperationStatus cause){
        if (cause.getMessage().equals(""String_Node_Str""))         missedKeyList.add(key);
 else         missedKeys.put(key,new CollectionOperationStatus(cause));
      }
      @Override public void gotTrimmedKey(      String key,      Object subkey){
        if (stopCollect.get())         return;
        if (subkey instanceof Long) {
          eachTrimmedResult.add(new SMGetTrimKey(key,(Long)subkey));
        }
 else         if (subkey instanceof byte[]) {
          eachTrimmedResult.add(new SMGetTrimKey(key,(byte[])subkey));
        }
      }
    }
);
    ops.add(op);
    addOp(smGet.getRepresentKey(),op);
  }
  return new SMGetFuture<List<SMGetElement<T>>>(ops,operationTimeout){
    @Override public List<SMGetElement<T>> get(    long duration,    TimeUnit units) throws InterruptedException, TimeoutException, ExecutionException {
      if (!blatch.await(duration,units)) {
        for (        Operation op : ops) {
          MemcachedConnection.opTimedOut(op);
        }
        throw new CheckedOperationTimeoutException(""String_Node_Str"",ops);
      }
 else {
        for (        Operation op : ops) {
          MemcachedConnection.opSucceeded(op);
        }
      }
      for (      Operation op : ops) {
        if (op != null && op.hasErrored()) {
          throw new ExecutionException(op.getException());
        }
      }
      if (isCancelled()) {
        throw new ExecutionException(new RuntimeException(""String_Node_Str""));
      }
      if (smGetList.size() == 1)       return mergedResult;
      return getSubList(mergedResult,0,count);
    }
    @Override public Map<String,CollectionOperationStatus> getMissedKeys(){
      return missedKeys;
    }
    @Override public List<String> getMissedKeyList(){
      return missedKeyList;
    }
    @Override public List<SMGetTrimKey> getTrimmedKeys(){
      return mergedTrimmedKeys;
    }
    @Override public CollectionOperationStatus getOperationStatus(){
      if (failedOperationStatus.size() > 0) {
        return new CollectionOperationStatus(failedOperationStatus.get(0));
      }
      OperationStatus end=null;
      OperationStatus duplicated=null;
      OperationStatus trimmed=null;
      OperationStatus duplicatedTrimmed=null;
      for (      OperationStatus status : resultOperationStatus) {
        if (END.equals(status.getMessage()))         end=status;
 else         if (DUPLICATED.equals(status.getMessage()))         duplicated=status;
 else         if (TRIMMED.equals(status.getMessage()))         trimmed=status;
 else         if (DUPLICATED_TRIMMED.equals(status.getMessage()))         duplicatedTrimmed=status;
      }
      if (end == null && duplicated == null && trimmed == null && duplicatedTrimmed == null) {
        getLogger().warn(""String_Node_Str"");
        return null;
      }
      if (duplicatedTrimmed == null && duplicated != null && trimmed != null)       duplicatedTrimmed=new OperationStatus(true,""String_Node_Str"");
      if (duplicatedTrimmed != null)       return new CollectionOperationStatus(duplicatedTrimmed);
 else       if (duplicated != null)       return new CollectionOperationStatus(duplicated);
 else       if (trimmed != null)       return new CollectionOperationStatus(trimmed);
 else       return new CollectionOperationStatus(end);
    }
  }
;
}","private <T>SMGetFuture<List<SMGetElement<T>>> smget(final List<BTreeSMGet<T>> smGetList,final int count,final boolean reverse,final Transcoder<T> tc,final SMGetMode smgetMode){
  final String END=""String_Node_Str"";
  final String TRIMMED=""String_Node_Str"";
  final String DUPLICATED=""String_Node_Str"";
  final String DUPLICATED_TRIMMED=""String_Node_Str"";
  final CountDownLatch blatch=new CountDownLatch(smGetList.size());
  final ConcurrentLinkedQueue<Operation> ops=new ConcurrentLinkedQueue<Operation>();
  final Map<String,CollectionOperationStatus> missedKeys=Collections.synchronizedMap(new HashMap<String,CollectionOperationStatus>());
  final List<String> missedKeyList=Collections.synchronizedList(new ArrayList<String>());
  final int totalResultElementCount=count;
  final List<SMGetElement<T>> mergedResult=Collections.synchronizedList(new ArrayList<SMGetElement<T>>(totalResultElementCount));
  final List<SMGetTrimKey> mergedTrimmedKeys=Collections.synchronizedList(new ArrayList<SMGetTrimKey>());
  final ReentrantLock lock=new ReentrantLock();
  final List<OperationStatus> resultOperationStatus=Collections.synchronizedList(new ArrayList<OperationStatus>(1));
  final List<OperationStatus> failedOperationStatus=Collections.synchronizedList(new ArrayList<OperationStatus>(1));
  final Set<Object> totalBkey=new TreeSet<Object>();
  final AtomicBoolean stopCollect=new AtomicBoolean(false);
  final AtomicInteger processedSMGetCount=new AtomicInteger(smGetList.size());
  for (  BTreeSMGet<T> smGet : smGetList) {
    Operation op=opFact.bopsmget(smGet,new BTreeSortMergeGetOperation.Callback(){
      final List<SMGetElement<T>> eachResult=new ArrayList<SMGetElement<T>>();
      final List<SMGetTrimKey> eachTrimmedResult=new ArrayList<SMGetTrimKey>();
      private void addTotalBkey(      List<SMGetElement<T>> smgetresult){
        for (        SMGetElement<T> each : smgetresult) {
          if (each.getBkeyByObject() instanceof byte[]) {
            totalBkey.add(new ByteArrayBKey((byte[])each.getBkeyByObject()));
          }
 else {
            totalBkey.add(each.getBkeyByObject());
          }
        }
      }
      private boolean addTotalBkey(      Object bkey){
        if (bkey instanceof byte[]) {
          return totalBkey.add(new ByteArrayBKey((byte[])bkey));
        }
 else {
          return totalBkey.add(bkey);
        }
      }
      @Override public void receivedStatus(      OperationStatus status){
        processedSMGetCount.decrementAndGet();
        if (status.isSuccess()) {
          resultOperationStatus.add(status);
        }
 else {
          stopCollect.set(true);
          mergedResult.clear();
          mergedTrimmedKeys.clear();
          failedOperationStatus.add(status);
        }
        if (status.isSuccess()) {
          lock.lock();
          try {
            if (mergedResult.size() == 0) {
              if (smGetList.size() > 1) {
                addTotalBkey(eachResult);
              }
              mergedResult.addAll(eachResult);
            }
 else {
              boolean duplicated;
              int idx, pos=0;
              for (              SMGetElement<T> result : eachResult) {
                for (idx=pos; idx < mergedResult.size(); idx++) {
                  if ((reverse) ? (0 < result.compareTo(mergedResult.get(idx))) : (0 > result.compareTo(mergedResult.get(idx))))                   break;
                }
                if (idx >= totalResultElementCount) {
                  break;
                }
                if (!addTotalBkey(result.getBkeyByObject())) {
                  resultOperationStatus.add(new OperationStatus(true,""String_Node_Str""));
                  duplicated=true;
                }
 else {
                  duplicated=false;
                }
                if (smgetMode != SMGetMode.UNIQUE || !duplicated) {
                  mergedResult.add(idx,result);
                  if (mergedResult.size() > totalResultElementCount)                   mergedResult.remove(totalResultElementCount);
                  pos=idx + 1;
                }
 else {
                  pos=idx;
                }
              }
            }
            if (eachTrimmedResult.size() > 0) {
              if (mergedTrimmedKeys.size() == 0) {
                mergedTrimmedKeys.addAll(eachTrimmedResult);
              }
 else {
                int idx, pos=0;
                for (                SMGetTrimKey eTrim : eachTrimmedResult) {
                  for (idx=pos; idx < mergedTrimmedKeys.size(); idx++) {
                    if ((reverse) ? (0 < eTrim.compareTo(mergedTrimmedKeys.get(idx))) : 0 > eTrim.compareTo(mergedTrimmedKeys.get(idx))) {
                      break;
                    }
                  }
                  mergedTrimmedKeys.add(idx,eTrim);
                  pos=idx + 1;
                }
              }
            }
            if (mergedTrimmedKeys.size() > 0 && processedSMGetCount.get() == 0 && count <= mergedResult.size()) {
              SMGetElement<T> lastElement=mergedResult.get(count - 1);
              SMGetTrimKey lastTrimKey=new SMGetTrimKey(lastElement.getKey(),lastElement.getBkeyByObject());
              for (int idx=mergedTrimmedKeys.size() - 1; idx >= 0; idx--) {
                SMGetTrimKey me=mergedTrimmedKeys.get(idx);
                if ((reverse) ? (0 >= me.compareTo(lastTrimKey)) : 0 <= me.compareTo(lastTrimKey)) {
                  mergedTrimmedKeys.remove(idx);
                }
 else {
                  break;
                }
              }
            }
          }
  finally {
            lock.unlock();
          }
        }
 else {
          getLogger().warn(""String_Node_Str"",status);
        }
      }
      @Override public void complete(){
        blatch.countDown();
      }
      @Override public void gotData(      String key,      Object subkey,      int flags,      byte[] data){
        if (stopCollect.get())         return;
        if (subkey instanceof Long) {
          eachResult.add(new SMGetElement<T>(key,(Long)subkey,tc.decode(new CachedData(flags,data,tc.getMaxSize()))));
        }
 else         if (subkey instanceof byte[]) {
          eachResult.add(new SMGetElement<T>(key,(byte[])subkey,tc.decode(new CachedData(flags,data,tc.getMaxSize()))));
        }
      }
      @Override public void gotMissedKey(      String key,      OperationStatus cause){
        if (cause.getMessage().equals(""String_Node_Str""))         missedKeyList.add(key);
 else         missedKeys.put(key,new CollectionOperationStatus(cause));
      }
      @Override public void gotTrimmedKey(      String key,      Object subkey){
        if (stopCollect.get())         return;
        if (subkey instanceof Long) {
          eachTrimmedResult.add(new SMGetTrimKey(key,(Long)subkey));
        }
 else         if (subkey instanceof byte[]) {
          eachTrimmedResult.add(new SMGetTrimKey(key,(byte[])subkey));
        }
      }
    }
);
    ops.add(op);
    addOp(smGet.getRepresentKey(),op);
  }
  return new SMGetFuture<List<SMGetElement<T>>>(ops,operationTimeout){
    @Override public List<SMGetElement<T>> get(    long duration,    TimeUnit units) throws InterruptedException, TimeoutException, ExecutionException {
      if (!blatch.await(duration,units)) {
        for (        Operation op : ops) {
          MemcachedConnection.opTimedOut(op);
        }
        throw new CheckedOperationTimeoutException(""String_Node_Str"",ops);
      }
 else {
        for (        Operation op : ops) {
          MemcachedConnection.opSucceeded(op);
        }
      }
      for (      Operation op : ops) {
        if (op != null && op.hasErrored()) {
          throw new ExecutionException(op.getException());
        }
      }
      if (isCancelled()) {
        throw new ExecutionException(new RuntimeException(""String_Node_Str""));
      }
      if (smGetList.size() == 1)       return mergedResult;
      return getSubList(mergedResult,0,count);
    }
    @Override public Map<String,CollectionOperationStatus> getMissedKeys(){
      return missedKeys;
    }
    @Override public List<String> getMissedKeyList(){
      return missedKeyList;
    }
    @Override public List<SMGetTrimKey> getTrimmedKeys(){
      return mergedTrimmedKeys;
    }
    @Override public CollectionOperationStatus getOperationStatus(){
      if (failedOperationStatus.size() > 0) {
        return new CollectionOperationStatus(failedOperationStatus.get(0));
      }
      OperationStatus end=null;
      OperationStatus duplicated=null;
      OperationStatus trimmed=null;
      OperationStatus duplicatedTrimmed=null;
      for (      OperationStatus status : resultOperationStatus) {
        if (END.equals(status.getMessage()))         end=status;
 else         if (DUPLICATED.equals(status.getMessage()))         duplicated=status;
 else         if (TRIMMED.equals(status.getMessage()))         trimmed=status;
 else         if (DUPLICATED_TRIMMED.equals(status.getMessage()))         duplicatedTrimmed=status;
      }
      if (end == null && duplicated == null && trimmed == null && duplicatedTrimmed == null) {
        getLogger().warn(""String_Node_Str"");
        return null;
      }
      if (duplicatedTrimmed == null && duplicated != null && trimmed != null)       duplicatedTrimmed=new OperationStatus(true,""String_Node_Str"");
      if (duplicatedTrimmed != null)       return new CollectionOperationStatus(duplicatedTrimmed);
 else       if (duplicated != null)       return new CollectionOperationStatus(duplicated);
 else       if (trimmed != null)       return new CollectionOperationStatus(trimmed);
 else       return new CollectionOperationStatus(end);
    }
  }
;
}",0.9819311415997928
35192,"private ArcusReplNodeAddress(String group,boolean master,String ip,int port){
  super(ip,port);
  this.group=group;
  this.master=master;
  this.ip=ip;
  this.port=port;
}","public ArcusReplNodeAddress(ArcusReplNodeAddress addr){
  this(addr.group,addr.master,addr.ip,addr.port);
}",0.381294964028777
35193,"public void updateConnections(List<InetSocketAddress> addrs) throws IOException {
  List<MemcachedNode> attachNodes=new ArrayList<MemcachedNode>();
  List<MemcachedNode> removeNodes=new ArrayList<MemcachedNode>();
  List<MemcachedReplicaGroup> changeRoleGroups=new ArrayList<MemcachedReplicaGroup>();
  if (arcusReplEnabled) {
    Map<String,List<ArcusReplNodeAddress>> newAllGroups=ArcusReplNodeAddress.makeGroupAddrsList(addrs);
    Map<String,MemcachedReplicaGroup> oldAllGroups=((ArcusReplKetamaNodeLocator)locator).getAllGroups();
    for (    Map.Entry<String,MemcachedReplicaGroup> entry : oldAllGroups.entrySet()) {
      MemcachedReplicaGroup oldGroup=entry.getValue();
      List<ArcusReplNodeAddress> newGroupAddrs=newAllGroups.get(entry.getKey());
      ArcusClient.arcusLogger.debug(""String_Node_Str"" + newGroupAddrs);
      ArcusClient.arcusLogger.debug(""String_Node_Str"" + entry.getValue() + ""String_Node_Str"");
      if (newGroupAddrs == null) {
        removeNodes.add(oldGroup.getMasterNode());
        if (oldGroup.getSlaveNode() != null)         removeNodes.add(oldGroup.getSlaveNode());
        continue;
      }
      if (newGroupAddrs.size() == 0) {
        newAllGroups.remove(entry.getKey());
        continue;
      }
      ArcusReplNodeAddress oldMasterAddr=oldGroup.getMasterNode() != null ? (ArcusReplNodeAddress)oldGroup.getMasterNode().getSocketAddress() : null;
      ArcusReplNodeAddress oldSlaveAddr=oldGroup.getSlaveNode() != null ? (ArcusReplNodeAddress)oldGroup.getSlaveNode().getSocketAddress() : null;
      assert(oldMasterAddr != null);
      if (newGroupAddrs.size() == 1) {
        if (oldSlaveAddr == null) {
          if (newGroupAddrs.get(0).getIPPort().equals(oldMasterAddr.getIPPort())) {
          }
 else {
            removeNodes.add(oldGroup.getMasterNode());
            attachNodes.add(attachMemcachedNode(newGroupAddrs.get(0)));
          }
        }
 else {
          if (newGroupAddrs.get(0).getIPPort().equals(oldMasterAddr.getIPPort())) {
            removeNodes.add(oldGroup.getSlaveNode());
          }
 else           if (newGroupAddrs.get(0).getIPPort().equals(oldSlaveAddr.getIPPort())) {
            removeNodes.add(oldGroup.getMasterNode());
            changeRoleGroups.add(oldGroup);
          }
 else {
            removeNodes.add(oldGroup.getMasterNode());
            removeNodes.add(oldGroup.getSlaveNode());
            attachNodes.add(attachMemcachedNode(newGroupAddrs.get(0)));
          }
        }
      }
 else {
        if (oldSlaveAddr == null) {
          if (newGroupAddrs.get(0).getIPPort().equals(oldMasterAddr.getIPPort())) {
            attachNodes.add(attachMemcachedNode(newGroupAddrs.get(1)));
          }
 else           if (newGroupAddrs.get(1).getIPPort().equals(oldMasterAddr.getIPPort())) {
            changeRoleGroups.add(oldGroup);
            attachNodes.add(attachMemcachedNode(newGroupAddrs.get(0)));
          }
 else {
            removeNodes.add(oldGroup.getMasterNode());
            attachNodes.add(attachMemcachedNode(newGroupAddrs.get(0)));
            attachNodes.add(attachMemcachedNode(newGroupAddrs.get(1)));
          }
        }
 else {
          if (newGroupAddrs.get(0).getIPPort().equals(oldMasterAddr.getIPPort())) {
            if (newGroupAddrs.get(1) == oldGroup.getSlaveNode().getSocketAddress()) {
            }
 else {
              removeNodes.add(oldGroup.getSlaveNode());
              attachNodes.add(attachMemcachedNode(newGroupAddrs.get(1)));
            }
          }
 else           if (newGroupAddrs.get(0).getIPPort().equals(oldSlaveAddr.getIPPort())) {
            if (newGroupAddrs.get(1).getIPPort().equals(oldMasterAddr.getIPPort())) {
              changeRoleGroups.add(oldGroup);
            }
 else {
              removeNodes.add(oldGroup.getMasterNode());
              changeRoleGroups.add(oldGroup);
              attachNodes.add(attachMemcachedNode(newGroupAddrs.get(1)));
            }
          }
 else {
            if (newGroupAddrs.get(1).getIPPort().equals(oldMasterAddr.getIPPort())) {
              removeNodes.add(oldGroup.getSlaveNode());
              changeRoleGroups.add(oldGroup);
            }
 else             if (newGroupAddrs.get(1).getIPPort().equals(oldSlaveAddr.getIPPort())) {
              removeNodes.add(oldGroup.getMasterNode());
            }
 else {
              removeNodes.add(oldGroup.getMasterNode());
              removeNodes.add(oldGroup.getSlaveNode());
              attachNodes.add(attachMemcachedNode(newGroupAddrs.get(1)));
            }
            attachNodes.add(attachMemcachedNode(newGroupAddrs.get(0)));
          }
        }
      }
      newAllGroups.remove(entry.getKey());
    }
    for (    Map.Entry<String,List<ArcusReplNodeAddress>> entry : newAllGroups.entrySet()) {
      List<ArcusReplNodeAddress> newGroupAddrs=entry.getValue();
      if (newGroupAddrs.size() == 0) {
        attachNodes.add(attachMemcachedNode(ArcusReplNodeAddress.createFake(entry.getKey())));
      }
 else {
        attachNodes.add(attachMemcachedNode(newGroupAddrs.get(0)));
        if (newGroupAddrs.size() > 1)         attachNodes.add(attachMemcachedNode(newGroupAddrs.get(1)));
      }
    }
  }
 else {
    for (    MemcachedNode node : locator.getAll()) {
      if (addrs.contains((InetSocketAddress)node.getSocketAddress())) {
        addrs.remove((InetSocketAddress)node.getSocketAddress());
      }
 else {
        removeNodes.add(node);
      }
    }
    for (    SocketAddress sa : addrs) {
      attachNodes.add(attachMemcachedNode(sa));
    }
  }
  for (  MemcachedNode node : removeNodes) {
    getLogger().info(""String_Node_Str"",node);
    for (    Entry<Long,MemcachedNode> each : reconnectQueue.entrySet()) {
      if (node.equals(each.getValue())) {
        reconnectQueue.remove(each.getKey());
        break;
      }
    }
  }
  if (arcusReplEnabled && changeRoleGroups.size() > 0)   ((ArcusReplKetamaNodeLocator)locator).update(attachNodes,removeNodes,changeRoleGroups);
 else   locator.update(attachNodes,removeNodes);
}","public void updateConnections(List<InetSocketAddress> addrs) throws IOException {
  List<MemcachedNode> attachNodes=new ArrayList<MemcachedNode>();
  List<MemcachedNode> removeNodes=new ArrayList<MemcachedNode>();
  List<MemcachedReplicaGroup> changeRoleGroups=new ArrayList<MemcachedReplicaGroup>();
  if (arcusReplEnabled) {
    Map<String,List<ArcusReplNodeAddress>> newAllGroups=ArcusReplNodeAddress.makeGroupAddrsList(addrs);
    Map<String,MemcachedReplicaGroup> oldAllGroups=((ArcusReplKetamaNodeLocator)locator).getAllGroups();
    for (    Map.Entry<String,MemcachedReplicaGroup> entry : oldAllGroups.entrySet()) {
      MemcachedReplicaGroup oldGroup=entry.getValue();
      List<ArcusReplNodeAddress> newGroupAddrs=newAllGroups.get(entry.getKey());
      ArcusClient.arcusLogger.debug(""String_Node_Str"" + newGroupAddrs);
      ArcusClient.arcusLogger.debug(""String_Node_Str"" + entry.getValue() + ""String_Node_Str"");
      if (newGroupAddrs == null) {
        removeNodes.add(oldGroup.getMasterNode());
        if (oldGroup.getSlaveNode() != null)         removeNodes.add(oldGroup.getSlaveNode());
        continue;
      }
      if (newGroupAddrs.size() == 0) {
        newAllGroups.remove(entry.getKey());
        continue;
      }
      ArcusReplNodeAddress oldMasterAddr=oldGroup.getMasterNode() != null ? (ArcusReplNodeAddress)oldGroup.getMasterNode().getSocketAddress() : null;
      ArcusReplNodeAddress oldSlaveAddr=oldGroup.getSlaveNode() != null ? (ArcusReplNodeAddress)oldGroup.getSlaveNode().getSocketAddress() : null;
      assert(oldMasterAddr != null);
      if (newGroupAddrs.size() == 1) {
        if (oldSlaveAddr == null) {
          if (newGroupAddrs.get(0).getIPPort().equals(oldMasterAddr.getIPPort())) {
          }
 else {
            removeNodes.add(oldGroup.getMasterNode());
            attachNodes.add(attachMemcachedNode(newGroupAddrs.get(0)));
          }
        }
 else {
          if (newGroupAddrs.get(0).getIPPort().equals(oldMasterAddr.getIPPort())) {
            removeNodes.add(oldGroup.getSlaveNode());
          }
 else           if (newGroupAddrs.get(0).getIPPort().equals(oldSlaveAddr.getIPPort())) {
            removeNodes.add(oldGroup.getMasterNode());
            changeRoleGroups.add(oldGroup);
          }
 else {
            removeNodes.add(oldGroup.getMasterNode());
            removeNodes.add(oldGroup.getSlaveNode());
            attachNodes.add(attachMemcachedNode(newGroupAddrs.get(0)));
          }
        }
      }
 else {
        if (oldSlaveAddr == null) {
          if (newGroupAddrs.get(0).getIPPort().equals(oldMasterAddr.getIPPort())) {
            attachNodes.add(attachMemcachedNode(newGroupAddrs.get(1)));
          }
 else           if (newGroupAddrs.get(1).getIPPort().equals(oldMasterAddr.getIPPort())) {
            changeRoleGroups.add(oldGroup);
            attachNodes.add(attachMemcachedNode(newGroupAddrs.get(0)));
          }
 else {
            removeNodes.add(oldGroup.getMasterNode());
            attachNodes.add(attachMemcachedNode(newGroupAddrs.get(0)));
            attachNodes.add(attachMemcachedNode(newGroupAddrs.get(1)));
          }
        }
 else {
          if (newGroupAddrs.get(0).getIPPort().equals(oldMasterAddr.getIPPort())) {
            if (newGroupAddrs.get(1).getIPPort().equals(oldSlaveAddr.getIPPort())) {
            }
 else {
              removeNodes.add(oldGroup.getSlaveNode());
              attachNodes.add(attachMemcachedNode(newGroupAddrs.get(1)));
            }
          }
 else           if (newGroupAddrs.get(0).getIPPort().equals(oldSlaveAddr.getIPPort())) {
            if (newGroupAddrs.get(1).getIPPort().equals(oldMasterAddr.getIPPort())) {
              changeRoleGroups.add(oldGroup);
            }
 else {
              removeNodes.add(oldGroup.getMasterNode());
              changeRoleGroups.add(oldGroup);
              attachNodes.add(attachMemcachedNode(newGroupAddrs.get(1)));
            }
          }
 else {
            if (newGroupAddrs.get(1).getIPPort().equals(oldMasterAddr.getIPPort())) {
              removeNodes.add(oldGroup.getSlaveNode());
              changeRoleGroups.add(oldGroup);
            }
 else             if (newGroupAddrs.get(1).getIPPort().equals(oldSlaveAddr.getIPPort())) {
              removeNodes.add(oldGroup.getMasterNode());
            }
 else {
              removeNodes.add(oldGroup.getMasterNode());
              removeNodes.add(oldGroup.getSlaveNode());
              attachNodes.add(attachMemcachedNode(newGroupAddrs.get(1)));
            }
            attachNodes.add(attachMemcachedNode(newGroupAddrs.get(0)));
          }
        }
      }
      newAllGroups.remove(entry.getKey());
    }
    for (    Map.Entry<String,List<ArcusReplNodeAddress>> entry : newAllGroups.entrySet()) {
      List<ArcusReplNodeAddress> newGroupAddrs=entry.getValue();
      if (newGroupAddrs.size() == 0) {
        attachNodes.add(attachMemcachedNode(ArcusReplNodeAddress.createFake(entry.getKey())));
      }
 else {
        attachNodes.add(attachMemcachedNode(newGroupAddrs.get(0)));
        if (newGroupAddrs.size() > 1)         attachNodes.add(attachMemcachedNode(newGroupAddrs.get(1)));
      }
    }
  }
 else {
    for (    MemcachedNode node : locator.getAll()) {
      if (addrs.contains((InetSocketAddress)node.getSocketAddress())) {
        addrs.remove((InetSocketAddress)node.getSocketAddress());
      }
 else {
        removeNodes.add(node);
      }
    }
    for (    SocketAddress sa : addrs) {
      attachNodes.add(attachMemcachedNode(sa));
    }
  }
  for (  MemcachedNode node : removeNodes) {
    getLogger().info(""String_Node_Str"",node);
    for (    Entry<Long,MemcachedNode> each : reconnectQueue.entrySet()) {
      if (node.equals(each.getValue())) {
        reconnectQueue.remove(each.getKey());
        break;
      }
    }
  }
  if (arcusReplEnabled && changeRoleGroups.size() > 0)   ((ArcusReplKetamaNodeLocator)locator).update(attachNodes,removeNodes,changeRoleGroups);
 else   locator.update(attachNodes,removeNodes);
}",0.9055255504777732
35194,"/** 
 * Generic smget operation for b+tree items. Public smget methods call this method.
 * @param smGetList  smget parameters (keys, eflags, and so on)
 * @param offset  start index of the elements
 * @param count  number of elements to fetch
 * @param reverse  forward or backward
 * @param tc  transcoder to serialize and unserialize element value
 * @return future holding the smget result (elements, return codes, and so on)
 */
private <T>SMGetFuture<List<SMGetElement<T>>> smget(final List<BTreeSMGet<T>> smGetList,final int offset,final int count,final boolean reverse,final Transcoder<T> tc){
  final String END=""String_Node_Str"";
  final String TRIMMED=""String_Node_Str"";
  final String DUPLICATED=""String_Node_Str"";
  final String DUPLICATED_TRIMMED=""String_Node_Str"";
  final CountDownLatch blatch=new CountDownLatch(smGetList.size());
  final ConcurrentLinkedQueue<Operation> ops=new ConcurrentLinkedQueue<Operation>();
  final List<String> missedKey=Collections.synchronizedList(new ArrayList<String>());
  final int totalResultElementCount=count + offset;
  final List<SMGetElement<T>> mergedResult=Collections.synchronizedList(new ArrayList<SMGetElement<T>>(totalResultElementCount));
  final ReentrantLock lock=new ReentrantLock();
  final List<OperationStatus> resultOperationStatus=Collections.synchronizedList(new ArrayList<OperationStatus>(1));
  final List<OperationStatus> failedOperationStatus=Collections.synchronizedList(new ArrayList<OperationStatus>(1));
  final Set<Object> totalBkey=new TreeSet<Object>();
  final AtomicBoolean stopCollect=new AtomicBoolean(false);
  for (  BTreeSMGet<T> smGet : smGetList) {
    Operation op=opFact.bopsmget(smGet,new BTreeSortMergeGetOperation.Callback(){
      final List<SMGetElement<T>> eachResult=new ArrayList<SMGetElement<T>>();
      private void addTotalBkey(      List<SMGetElement<T>> smgetresult){
        for (        SMGetElement<T> each : smgetresult) {
          if (each.getBkeyByObject() instanceof byte[]) {
            totalBkey.add(new ByteArrayBKey((byte[])each.getBkeyByObject()));
          }
 else {
            totalBkey.add(each.getBkeyByObject());
          }
        }
      }
      private boolean addTotalBkey(      Object bkey){
        if (bkey instanceof byte[]) {
          return totalBkey.add(new ByteArrayBKey((byte[])bkey));
        }
 else {
          return totalBkey.add(bkey);
        }
      }
      @Override public void receivedStatus(      OperationStatus status){
        if (status.isSuccess()) {
          resultOperationStatus.add(status);
        }
 else {
          stopCollect.set(true);
          mergedResult.clear();
          failedOperationStatus.add(status);
        }
        if (status.isSuccess()) {
          lock.lock();
          try {
            if (smGetList.size() == 1) {
              addTotalBkey(eachResult);
              mergedResult.addAll(eachResult);
            }
 else {
              if (mergedResult.size() == 0) {
                addTotalBkey(eachResult);
                mergedResult.addAll(eachResult);
              }
 else {
                if (TRIMMED.equals(status.getMessage())) {
                }
                for (                SMGetElement<T> result : eachResult) {
                  boolean added=false;
                  for (int i=0; i < mergedResult.size(); i++) {
                    if (i > totalResultElementCount) {
                      added=true;
                      break;
                    }
                    if ((reverse) ? (0 > result.compareTo(mergedResult.get(i))) : 0 < result.compareTo(mergedResult.get(i))) {
                      if (!addTotalBkey(result.getBkeyByObject())) {
                        resultOperationStatus.add(new OperationStatus(true,""String_Node_Str""));
                      }
                      mergedResult.add(i,result);
                      added=true;
                      break;
                    }
                  }
                  if (!added) {
                    if (!addTotalBkey(result.getBkeyByObject())) {
                      resultOperationStatus.add(new OperationStatus(true,""String_Node_Str""));
                    }
                    mergedResult.add(result);
                  }
                }
              }
            }
          }
  finally {
            lock.unlock();
          }
        }
 else {
          getLogger().warn(""String_Node_Str"",status);
        }
      }
      @Override public void complete(){
        blatch.countDown();
      }
      @Override public void gotData(      String key,      Object subkey,      int flags,      byte[] data){
        if (stopCollect.get())         return;
        if (subkey instanceof Long) {
          eachResult.add(new SMGetElement<T>(key,(Long)subkey,tc.decode(new CachedData(flags,data,tc.getMaxSize()))));
        }
 else         if (subkey instanceof byte[]) {
          eachResult.add(new SMGetElement<T>(key,(byte[])subkey,tc.decode(new CachedData(flags,data,tc.getMaxSize()))));
        }
      }
      @Override public void gotMissedKey(      byte[] data){
        missedKey.add(new String(data));
      }
    }
);
    ops.add(op);
    addOp(smGet.getRepresentKey(),op);
  }
  return new SMGetFuture<List<SMGetElement<T>>>(ops,operationTimeout){
    @Override public List<SMGetElement<T>> get(    long duration,    TimeUnit units) throws InterruptedException, TimeoutException, ExecutionException {
      if (!blatch.await(duration,units)) {
        for (        Operation op : ops) {
          MemcachedConnection.opTimedOut(op);
        }
        throw new CheckedOperationTimeoutException(""String_Node_Str"",ops);
      }
 else {
        for (        Operation op : ops) {
          MemcachedConnection.opSucceeded(op);
        }
      }
      for (      Operation op : ops) {
        if (op != null && op.hasErrored()) {
          throw new ExecutionException(op.getException());
        }
      }
      if (isCancelled()) {
        throw new ExecutionException(new RuntimeException(""String_Node_Str""));
      }
      if (smGetList.size() == 1)       return mergedResult;
      return getSubList(mergedResult,offset,count);
    }
    @Override public List<String> getMissedKeyList(){
      return missedKey;
    }
    @Override public CollectionOperationStatus getOperationStatus(){
      if (failedOperationStatus.size() > 0) {
        return new CollectionOperationStatus(failedOperationStatus.get(0));
      }
      OperationStatus end=null;
      OperationStatus duplicated=null;
      OperationStatus trimmed=null;
      OperationStatus duplicatedTrimmed=null;
      for (      OperationStatus status : resultOperationStatus) {
        if (END.equals(status.getMessage()))         end=status;
 else         if (DUPLICATED.equals(status.getMessage()))         duplicated=status;
 else         if (TRIMMED.equals(status.getMessage()))         trimmed=status;
 else         if (DUPLICATED_TRIMMED.equals(status.getMessage()))         duplicatedTrimmed=status;
      }
      if (end == null && duplicated == null && trimmed == null && duplicatedTrimmed == null) {
        getLogger().warn(""String_Node_Str"");
        return null;
      }
      if (duplicatedTrimmed != null || (duplicated != null && trimmed != null))       return new CollectionOperationStatus(duplicatedTrimmed);
 else       if (duplicated != null)       return new CollectionOperationStatus(duplicated);
 else       if (trimmed != null)       return new CollectionOperationStatus(trimmed);
 else       return new CollectionOperationStatus(end);
    }
  }
;
}","/** 
 * Generic smget operation for b+tree items. Public smget methods call this method.
 * @param smGetList  smget parameters (keys, eflags, and so on)
 * @param offset  start index of the elements
 * @param count  number of elements to fetch
 * @param reverse  forward or backward
 * @param tc  transcoder to serialize and unserialize element value
 * @return future holding the smget result (elements, return codes, and so on)
 */
private <T>SMGetFuture<List<SMGetElement<T>>> smget(final List<BTreeSMGet<T>> smGetList,final int offset,final int count,final boolean reverse,final Transcoder<T> tc){
  final String END=""String_Node_Str"";
  final String TRIMMED=""String_Node_Str"";
  final String DUPLICATED=""String_Node_Str"";
  final String DUPLICATED_TRIMMED=""String_Node_Str"";
  final CountDownLatch blatch=new CountDownLatch(smGetList.size());
  final ConcurrentLinkedQueue<Operation> ops=new ConcurrentLinkedQueue<Operation>();
  final List<String> missedKey=Collections.synchronizedList(new ArrayList<String>());
  final int totalResultElementCount=count + offset;
  final List<SMGetElement<T>> mergedResult=Collections.synchronizedList(new ArrayList<SMGetElement<T>>(totalResultElementCount));
  final ReentrantLock lock=new ReentrantLock();
  final List<OperationStatus> resultOperationStatus=Collections.synchronizedList(new ArrayList<OperationStatus>(1));
  final List<OperationStatus> failedOperationStatus=Collections.synchronizedList(new ArrayList<OperationStatus>(1));
  final Set<Object> totalBkey=new TreeSet<Object>();
  final AtomicBoolean stopCollect=new AtomicBoolean(false);
  for (  BTreeSMGet<T> smGet : smGetList) {
    Operation op=opFact.bopsmget(smGet,new BTreeSortMergeGetOperation.Callback(){
      final List<SMGetElement<T>> eachResult=new ArrayList<SMGetElement<T>>();
      private void addTotalBkey(      List<SMGetElement<T>> smgetresult){
        for (        SMGetElement<T> each : smgetresult) {
          if (each.getBkeyByObject() instanceof byte[]) {
            totalBkey.add(new ByteArrayBKey((byte[])each.getBkeyByObject()));
          }
 else {
            totalBkey.add(each.getBkeyByObject());
          }
        }
      }
      private boolean addTotalBkey(      Object bkey){
        if (bkey instanceof byte[]) {
          return totalBkey.add(new ByteArrayBKey((byte[])bkey));
        }
 else {
          return totalBkey.add(bkey);
        }
      }
      @Override public void receivedStatus(      OperationStatus status){
        if (status.isSuccess()) {
          resultOperationStatus.add(status);
        }
 else {
          stopCollect.set(true);
          mergedResult.clear();
          failedOperationStatus.add(status);
        }
        if (status.isSuccess()) {
          lock.lock();
          try {
            if (smGetList.size() == 1) {
              addTotalBkey(eachResult);
              mergedResult.addAll(eachResult);
            }
 else {
              if (mergedResult.size() == 0) {
                addTotalBkey(eachResult);
                mergedResult.addAll(eachResult);
              }
 else {
                if (TRIMMED.equals(status.getMessage())) {
                }
                for (                SMGetElement<T> result : eachResult) {
                  boolean added=false;
                  for (int i=0; i < mergedResult.size(); i++) {
                    if (i > totalResultElementCount) {
                      added=true;
                      break;
                    }
                    if ((reverse) ? (0 > result.compareTo(mergedResult.get(i))) : 0 < result.compareTo(mergedResult.get(i))) {
                      if (!addTotalBkey(result.getBkeyByObject())) {
                        resultOperationStatus.add(new OperationStatus(true,""String_Node_Str""));
                      }
                      mergedResult.add(i,result);
                      added=true;
                      break;
                    }
                  }
                  if (!added) {
                    if (!addTotalBkey(result.getBkeyByObject())) {
                      resultOperationStatus.add(new OperationStatus(true,""String_Node_Str""));
                    }
                    mergedResult.add(result);
                  }
                }
              }
            }
          }
  finally {
            lock.unlock();
          }
        }
 else {
          getLogger().warn(""String_Node_Str"",status);
        }
      }
      @Override public void complete(){
        blatch.countDown();
      }
      @Override public void gotData(      String key,      Object subkey,      int flags,      byte[] data){
        if (stopCollect.get())         return;
        if (subkey instanceof Long) {
          eachResult.add(new SMGetElement<T>(key,(Long)subkey,tc.decode(new CachedData(flags,data,tc.getMaxSize()))));
        }
 else         if (subkey instanceof byte[]) {
          eachResult.add(new SMGetElement<T>(key,(byte[])subkey,tc.decode(new CachedData(flags,data,tc.getMaxSize()))));
        }
      }
      @Override public void gotMissedKey(      byte[] data){
        missedKey.add(new String(data));
      }
    }
);
    ops.add(op);
    addOp(smGet.getRepresentKey(),op);
  }
  return new SMGetFuture<List<SMGetElement<T>>>(ops,operationTimeout){
    @Override public List<SMGetElement<T>> get(    long duration,    TimeUnit units) throws InterruptedException, TimeoutException, ExecutionException {
      if (!blatch.await(duration,units)) {
        for (        Operation op : ops) {
          MemcachedConnection.opTimedOut(op);
        }
        throw new CheckedOperationTimeoutException(""String_Node_Str"",ops);
      }
 else {
        for (        Operation op : ops) {
          MemcachedConnection.opSucceeded(op);
        }
      }
      for (      Operation op : ops) {
        if (op != null && op.hasErrored()) {
          throw new ExecutionException(op.getException());
        }
      }
      if (isCancelled()) {
        throw new ExecutionException(new RuntimeException(""String_Node_Str""));
      }
      if (smGetList.size() == 1)       return mergedResult;
      return getSubList(mergedResult,offset,count);
    }
    @Override public List<String> getMissedKeyList(){
      return missedKey;
    }
    @Override public CollectionOperationStatus getOperationStatus(){
      if (failedOperationStatus.size() > 0) {
        return new CollectionOperationStatus(failedOperationStatus.get(0));
      }
      OperationStatus end=null;
      OperationStatus duplicated=null;
      OperationStatus trimmed=null;
      OperationStatus duplicatedTrimmed=null;
      for (      OperationStatus status : resultOperationStatus) {
        if (END.equals(status.getMessage()))         end=status;
 else         if (DUPLICATED.equals(status.getMessage()))         duplicated=status;
 else         if (TRIMMED.equals(status.getMessage()))         trimmed=status;
 else         if (DUPLICATED_TRIMMED.equals(status.getMessage()))         duplicatedTrimmed=status;
      }
      if (end == null && duplicated == null && trimmed == null && duplicatedTrimmed == null) {
        getLogger().warn(""String_Node_Str"");
        return null;
      }
      if (duplicatedTrimmed == null && duplicated != null && trimmed != null)       duplicatedTrimmed=new OperationStatus(true,""String_Node_Str"");
      if (duplicatedTrimmed != null)       return new CollectionOperationStatus(duplicatedTrimmed);
 else       if (duplicated != null)       return new CollectionOperationStatus(duplicated);
 else       if (trimmed != null)       return new CollectionOperationStatus(trimmed);
 else       return new CollectionOperationStatus(end);
    }
  }
;
}",0.9907870492234798
35195,"/** 
 * get value of element flag by hex.
 * @return element flag by hex (e.g. 0x01)
 */
public String getFlagByHex(){
  return BTreeUtil.toHex(eflag);
}","/** 
 * get value of element flag by hex.
 * @return element flag by hex (e.g. 0x01)
 */
public String getFlagByHex(){
  if (eflag == null) {
    return ""String_Node_Str"";
  }
  if (eflag.length == 0) {
    return ""String_Node_Str"";
  }
  return BTreeUtil.toHex(eflag);
}",0.7216981132075472
35196,"private static List<InetSocketAddress> parseNodeNames(String s) throws Exception {
  List<InetSocketAddress> addrs=new ArrayList<InetSocketAddress>();
  for (  String node : s.split(""String_Node_Str"")) {
    String[] temp=node.split(""String_Node_Str"");
    String group=temp[0];
    boolean master=temp[1].equals(""String_Node_Str"") ? true : false;
    String ipport=temp[2];
    ArcusReplNodeAddress a=ArcusReplNodeAddress.create(group,master,ipport);
    addrs.add(a);
  }
  return addrs;
}","private static List<InetSocketAddress> parseNodeNames(String s) throws Exception {
  List<InetSocketAddress> addrs=new ArrayList<InetSocketAddress>();
  for (  String node : s.split(""String_Node_Str"")) {
    ArcusReplNodeAddress a=null;
    if (node.equals(CacheManager.FAKE_SERVER_NODE)) {
      a=ArcusReplNodeAddress.createFake(null);
    }
 else {
      String[] temp=node.split(""String_Node_Str"");
      String group=temp[0];
      boolean master=temp[1].equals(""String_Node_Str"") ? true : false;
      String ipport=temp[2];
      a=ArcusReplNodeAddress.create(group,master,ipport);
    }
    addrs.add(a);
  }
  return addrs;
}",0.784
35197,"static List<InetSocketAddress> getAddresses(String s){
  List<InetSocketAddress> list=null;
  if (s.equals(CacheMonitor.FAKE_SERVER_NODE)) {
  }
 else {
    try {
      list=parseNodeNames(s);
    }
 catch (    Exception e) {
      ArcusClient.arcusLogger.error(""String_Node_Str"" + ""String_Node_Str"" + s + ""String_Node_Str""+ e);
      e.printStackTrace();
      list=null;
    }
  }
  if (list == null || list.size() == 0) {
    list=new ArrayList<InetSocketAddress>(1);
    list.add((InetSocketAddress)Arcus17NodeAddress.create(""String_Node_Str"",false,CacheMonitor.FAKE_SERVER_NODE));
  }
  return list;
}","static List<InetSocketAddress> getAddresses(String s){
  List<InetSocketAddress> list=null;
  if (s.equals(CacheManager.FAKE_SERVER_NODE)) {
  }
 else {
    try {
      list=parseNodeNames(s);
    }
 catch (    Exception e) {
      ArcusClient.arcusLogger.error(""String_Node_Str"" + ""String_Node_Str"" + s + ""String_Node_Str""+ e);
      e.printStackTrace();
      list=null;
    }
  }
  if (list == null || list.size() == 0) {
    list=new ArrayList<InetSocketAddress>(1);
    list.add((InetSocketAddress)Arcus17NodeAddress.create(""String_Node_Str"",false,CacheManager.FAKE_SERVER_NODE));
  }
  return list;
}",0.9834983498349836
35198,"private static List<InetSocketAddress> parseNodeNames(String s) throws Exception {
  List<InetSocketAddress> addrs=new ArrayList<InetSocketAddress>();
  for (  String node : s.split(""String_Node_Str"")) {
    String[] temp=node.split(""String_Node_Str"");
    String group=temp[0];
    boolean master=temp[1].equals(""String_Node_Str"") ? true : false;
    String[] temp2=temp[2].split(""String_Node_Str"");
    String ipport=temp2[0];
    if (!master)     ipport=CacheMonitor.FAKE_SERVER_NODE;
    Arcus17NodeAddress a=Arcus17NodeAddress.create(group,master,ipport);
    for (int i=0; i < addrs.size(); i++) {
      if (((Arcus17NodeAddress)addrs.get(i)).group.equals(group)) {
        if (master) {
          addrs.set(i,a);
        }
 else {
        }
        a=null;
        break;
      }
    }
    if (a != null) {
      addrs.add((InetSocketAddress)a);
    }
  }
  return addrs;
}","private static List<InetSocketAddress> parseNodeNames(String s) throws Exception {
  List<InetSocketAddress> addrs=new ArrayList<InetSocketAddress>();
  for (  String node : s.split(""String_Node_Str"")) {
    String[] temp=node.split(""String_Node_Str"");
    String group=temp[0];
    boolean master=temp[1].equals(""String_Node_Str"") ? true : false;
    String[] temp2=temp[2].split(""String_Node_Str"");
    String ipport=temp2[0];
    if (!master)     ipport=CacheManager.FAKE_SERVER_NODE;
    Arcus17NodeAddress a=Arcus17NodeAddress.create(group,master,ipport);
    for (int i=0; i < addrs.size(); i++) {
      if (((Arcus17NodeAddress)addrs.get(i)).group.equals(group)) {
        if (master) {
          addrs.set(i,a);
        }
 else {
        }
        a=null;
        break;
      }
    }
    if (a != null) {
      addrs.add((InetSocketAddress)a);
    }
  }
  return addrs;
}",0.9943181818181818
35199,"private void updateHash(MemcachedNode node,boolean remove){
  if (!remove) {
    config.insertNode(node);
  }
  for (int i=0; i < config.getNodeRepetitions() / 4; i++) {
    byte[] digest=HashAlgorithm.computeMd5(config.getKeyForNode(node,i));
    for (int h=0; h < 4; h++) {
      Long k=((long)(digest[3 + h * 4] & 0xFF) << 24) | ((long)(digest[2 + h * 4] & 0xFF) << 16) | ((long)(digest[1 + h * 4] & 0xFF) << 8)| (digest[h * 4] & 0xFF);
      if (remove) {
        ketamaNodes.remove(k);
      }
 else {
        ketamaNodes.put(k,node);
      }
    }
  }
  if (remove) {
    config.removeNode(node);
  }
}","void updateHash(MemcachedNode node,boolean remove){
  if (!remove) {
    config.insertNode(node);
  }
  for (int i=0; i < config.getNodeRepetitions() / 4; i++) {
    byte[] digest=HashAlgorithm.computeMd5(config.getKeyForNode(node,i));
    for (int h=0; h < 4; h++) {
      Long k=((long)(digest[3 + h * 4] & 0xFF) << 24) | ((long)(digest[2 + h * 4] & 0xFF) << 16) | ((long)(digest[1 + h * 4] & 0xFF) << 8)| (digest[h * 4] & 0xFF);
      if (remove) {
        ketamaNodes.remove(k);
      }
 else {
        ketamaNodes.put(k,node);
      }
    }
  }
  if (remove) {
    config.removeNode(node);
  }
}",0.9933774834437086
35200,"/** 
 * Create a ArcusClient
 * @param addrs current available Memcached Addresses
 */
private void createArcusClient(String addrs){
  List<InetSocketAddress> socketList;
  int addrCount;
  if (arcus17) {
    socketList=Arcus17NodeAddress.getAddresses(addrs);
    addrCount=0;
    for (    InetSocketAddress a : socketList) {
      boolean isFake=(""String_Node_Str"" + CacheMonitor.FAKE_SERVER_NODE).equals(a.toString());
      if (!isFake)       addrCount++;
    }
  }
 else {
    socketList=AddrUtil.getAddresses(addrs);
    addrCount=socketList.size();
  }
  final CountDownLatch latch=new CountDownLatch(addrCount);
  final ConnectionObserver observer=new ConnectionObserver(){
    @Override public void connectionLost(    SocketAddress sa){
    }
    @Override public void connectionEstablished(    SocketAddress sa,    int reconnectCount){
      latch.countDown();
    }
  }
;
  cfb.setInitialObservers(Collections.singleton(observer));
  int _awaitTime=0;
  if (waitTimeForConnect == 0)   _awaitTime=50 * addrCount;
 else   _awaitTime=waitTimeForConnect;
  client=new ArcusClient[poolSize];
  for (int i=0; i < poolSize; i++) {
    try {
      client[i]=ArcusClient.getInstance(cfb.build(),socketList);
      client[i].setName(""String_Node_Str"" + serviceCode);
      client[i].setCacheManager(this);
    }
 catch (    IOException e) {
      getLogger().fatal(""String_Node_Str"");
    }
  }
  try {
    if (latch.await(_awaitTime,TimeUnit.MILLISECONDS)) {
      getLogger().warn(""String_Node_Str"");
    }
 else {
      getLogger().error(""String_Node_Str"");
    }
  }
 catch (  InterruptedException e) {
    getLogger().fatal(""String_Node_Str"");
  }
  this.clientInitLatch.countDown();
}","/** 
 * Create a ArcusClient
 * @param addrs current available Memcached Addresses
 */
private void createArcusClient(String addrs){
  List<InetSocketAddress> socketList;
  int addrCount;
  if (arcus17) {
    socketList=Arcus17NodeAddress.getAddresses(addrs);
    addrCount=0;
    for (    InetSocketAddress a : socketList) {
      boolean isFake=(""String_Node_Str"" + CacheManager.FAKE_SERVER_NODE).equals(a.toString());
      if (!isFake)       addrCount++;
    }
  }
 else {
    socketList=AddrUtil.getAddresses(addrs);
    addrCount=socketList.size();
  }
  final CountDownLatch latch=new CountDownLatch(addrCount);
  final ConnectionObserver observer=new ConnectionObserver(){
    @Override public void connectionLost(    SocketAddress sa){
    }
    @Override public void connectionEstablished(    SocketAddress sa,    int reconnectCount){
      latch.countDown();
    }
  }
;
  cfb.setInitialObservers(Collections.singleton(observer));
  int _awaitTime=0;
  if (waitTimeForConnect == 0)   _awaitTime=50 * addrCount;
 else   _awaitTime=waitTimeForConnect;
  client=new ArcusClient[poolSize];
  for (int i=0; i < poolSize; i++) {
    try {
      client[i]=ArcusClient.getInstance(cfb.build(),socketList);
      client[i].setName(""String_Node_Str"" + serviceCode);
      client[i].setCacheManager(this);
    }
 catch (    IOException e) {
      getLogger().fatal(""String_Node_Str"");
    }
  }
  try {
    if (latch.await(_awaitTime,TimeUnit.MILLISECONDS)) {
      getLogger().warn(""String_Node_Str"");
    }
 else {
      getLogger().error(""String_Node_Str"");
    }
  }
 catch (  InterruptedException e) {
    getLogger().fatal(""String_Node_Str"");
  }
  this.clientInitLatch.countDown();
}",0.9970414201183432
35201,"/** 
 * Asynchronous CAS operation using the default transcoder.
 * @param key the key
 * @param casId the CAS identifier (from a gets operation)
 * @param value the new value
 * @return a future that will indicate the status of the CAS
 * @throws IllegalStateException in the rare circumstance where queueis too full to accept any more requests
 */
public Future<CASResponse> asyncCAS(String key,long casId,Object value){
  return asyncCAS(key,casId,value,transcoder);
}","/** 
 * Asynchronous CAS operation using the default transcoder with expiration.
 * @param key the key
 * @param casId the CAS identifier (from a gets operation)
 * @param exp the expiration of this object
 * @param value the new value
 * @return a future that will indicate the status of the CAS
 * @throws IllegalStateException in the rare circumstance where queue is toofull to accept any more requests
 */
@Override public Future<CASResponse> asyncCAS(String key,long casId,int exp,Object value){
  return asyncCAS(key,casId,exp,value,transcoder);
}",0.90625
35202,"/** 
 * Perform a synchronous CAS operation with the default transcoder.
 * @param key the key
 * @param casId the CAS identifier (from a gets operation)
 * @param value the new value
 * @return a CASResponse
 * @throws OperationTimeoutException if the global operation timeout isexceeded
 * @throws IllegalStateException in the rare circumstance where queueis too full to accept any more requests
 */
public CASResponse cas(String key,long casId,Object value){
  return cas(key,casId,value,transcoder);
}","/** 
 * Perform a synchronous CAS operation with the default transcoder.
 * @param key the key
 * @param casId the CAS identifier (from a gets operation)
 * @param exp the expiration of this object
 * @param value the new value
 * @return a CASResponse
 * @throws OperationTimeoutException if the global operation timeout is exceeded
 * @throws IllegalStateException in the rare circumstance where queue is too full to accept any more requests
 */
@Override public CASResponse cas(String key,long casId,int exp,Object value){
  return cas(key,casId,exp,value,transcoder);
}",0.9369202226345084
35203,"Future<CASResponse> asyncCAS(String key,long casId,Object value);","<T>Future<CASResponse> asyncCAS(String key,long casId,int exp,T value,Transcoder<T> tc);",0.7843137254901961
35204,"CASResponse cas(String key,long casId,Object value) throws OperationTimeoutException ;","<T>CASResponse cas(String key,long casId,T value,Transcoder<T> tc);",0.6274509803921569
35205,"private String getClientInfo(){
  String path=""String_Node_Str"";
  try {
    SimpleDateFormat simpleDateFormat=new SimpleDateFormat(""String_Node_Str"");
    Date currentTime=new Date();
    if (arcus17)     path=REPL_CLIENT_INFO_PATH;
 else     path=ARCUS_BASE_CLIENT_INFO_PATH;
    path=path + serviceCode + ""String_Node_Str""+ InetAddress.getLocalHost().getHostName()+ ""String_Node_Str""+ InetAddress.getLocalHost().getHostAddress()+ ""String_Node_Str""+ this.poolSize+ ""String_Node_Str""+ ArcusClient.VERSION+ ""String_Node_Str""+ simpleDateFormat.format(currentTime)+ ""String_Node_Str""+ zk.getSessionId();
  }
 catch (  UnknownHostException e) {
    return null;
  }
  return path;
}","private String getClientInfo(){
  String path=""String_Node_Str"";
  try {
    SimpleDateFormat simpleDateFormat=new SimpleDateFormat(""String_Node_Str"");
    Date currentTime=new Date();
    if (arcus17)     path=REPL_CLIENT_INFO_PATH;
 else     path=ARCUS_BASE_CLIENT_INFO_ZPATH;
    path=path + serviceCode + ""String_Node_Str""+ InetAddress.getLocalHost().getHostName()+ ""String_Node_Str""+ InetAddress.getLocalHost().getHostAddress()+ ""String_Node_Str""+ this.poolSize+ ""String_Node_Str""+ ArcusClient.VERSION+ ""String_Node_Str""+ simpleDateFormat.format(currentTime)+ ""String_Node_Str""+ zk.getSessionId();
  }
 catch (  UnknownHostException e) {
    return null;
  }
  return path;
}",0.9992641648270788
35206,"private void initZooKeeperClient(){
  try {
    getLogger().info(""String_Node_Str"",serviceCode,hostPort);
    zkInitLatch=new CountDownLatch(1);
    zk=new ZooKeeper(hostPort,ZK_SESSION_TIMEOUT,this);
    try {
      if (zkInitLatch.await(ZK_CONNECT_TIMEOUT,TimeUnit.MILLISECONDS) == false) {
        getLogger().fatal(""String_Node_Str"",hostPort,ZK_CONNECT_TIMEOUT);
        throw new AdminConnectTimeoutException(hostPort);
      }
      if (zk.exists(REPL_CACHE_LIST_PATH + serviceCode,false) != null) {
        arcus17=true;
        cfb.setArcus17(true);
        getLogger().info(""String_Node_Str"");
      }
 else       if (zk.exists(ARCUS_BASE_CACHE_LIST_PATH + serviceCode,false) != null) {
        arcus17=false;
        cfb.setArcus17(false);
      }
 else {
        getLogger().fatal(""String_Node_Str"" + serviceCode + ""String_Node_Str"");
        throw new NotExistsServiceCodeException(serviceCode);
      }
      String path=getClientInfo();
      if (path.isEmpty()) {
        getLogger().fatal(""String_Node_Str"" + path + ""String_Node_Str"");
        throw new InitializeClientException(""String_Node_Str"");
      }
      if (zk.exists(path,false) == null) {
        zk.create(path,null,Ids.OPEN_ACL_UNSAFE,CreateMode.EPHEMERAL);
      }
    }
 catch (    AdminConnectTimeoutException e) {
      shutdownZooKeeperClient();
      throw e;
    }
catch (    NotExistsServiceCodeException e) {
      shutdownZooKeeperClient();
      throw e;
    }
catch (    InterruptedException ie) {
      getLogger().fatal(""String_Node_Str"",serviceCode,hostPort,ie.getMessage());
      shutdownZooKeeperClient();
      return;
    }
catch (    Exception e) {
      getLogger().fatal(""String_Node_Str"");
      shutdownZooKeeperClient();
      throw new InitializeClientException(""String_Node_Str"",e);
    }
    String cachePath=arcus17 ? REPL_CACHE_LIST_PATH : ARCUS_BASE_CACHE_LIST_PATH;
    cacheMonitor=new CacheMonitor(zk,cachePath,serviceCode,this);
  }
 catch (  IOException e) {
    throw new InitializeClientException(""String_Node_Str"",e);
  }
}","private void initZooKeeperClient(){
  try {
    getLogger().info(""String_Node_Str"",serviceCode,hostPort);
    zkInitLatch=new CountDownLatch(1);
    zk=new ZooKeeper(hostPort,ZK_SESSION_TIMEOUT,this);
    try {
      if (zkInitLatch.await(ZK_CONNECT_TIMEOUT,TimeUnit.MILLISECONDS) == false) {
        getLogger().fatal(""String_Node_Str"",hostPort,ZK_CONNECT_TIMEOUT);
        throw new AdminConnectTimeoutException(hostPort);
      }
      if (zk.exists(REPL_CACHE_LIST_PATH + serviceCode,false) != null) {
        arcus17=true;
        cfb.setArcus17(true);
        getLogger().info(""String_Node_Str"");
      }
 else       if (zk.exists(ARCUS_BASE_CACHE_LIST_ZPATH + serviceCode,false) != null) {
        arcus17=false;
        cfb.setArcus17(false);
      }
 else {
        getLogger().fatal(""String_Node_Str"" + serviceCode + ""String_Node_Str"");
        throw new NotExistsServiceCodeException(serviceCode);
      }
      String path=getClientInfo();
      if (path.isEmpty()) {
        getLogger().fatal(""String_Node_Str"" + path + ""String_Node_Str"");
        throw new InitializeClientException(""String_Node_Str"");
      }
      if (zk.exists(path,false) == null) {
        zk.create(path,null,Ids.OPEN_ACL_UNSAFE,CreateMode.EPHEMERAL);
      }
    }
 catch (    AdminConnectTimeoutException e) {
      shutdownZooKeeperClient();
      throw e;
    }
catch (    NotExistsServiceCodeException e) {
      shutdownZooKeeperClient();
      throw e;
    }
catch (    InterruptedException ie) {
      getLogger().fatal(""String_Node_Str"",serviceCode,hostPort,ie.getMessage());
      shutdownZooKeeperClient();
      return;
    }
catch (    Exception e) {
      getLogger().fatal(""String_Node_Str"");
      shutdownZooKeeperClient();
      throw new InitializeClientException(""String_Node_Str"",e);
    }
    String cachePath=arcus17 ? REPL_CACHE_LIST_PATH : ARCUS_BASE_CACHE_LIST_ZPATH;
    cacheMonitor=new CacheMonitor(zk,cachePath,serviceCode,this);
  }
 catch (  IOException e) {
    throw new InitializeClientException(""String_Node_Str"",e);
  }
}",0.9995107632093934
35207,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setTitle(""String_Node_Str"");
  mContext=this;
  getActionBar().setDisplayHomeAsUpEnabled(true);
  setContentView(R.layout.activity_myposts);
  mListView=(ListView)findViewById(R.id.listView);
  final String uid=Athority.getSharedPreference().getString(""String_Node_Str"",""String_Node_Str"");
  TaskUtils.executeAsyncTask(new AsyncTask<String,Void,ArrayList<BasePost>>(){
    @Override protected ArrayList<BasePost> doInBackground(    String... params){
      ArrayList<BasePost> posts=new ArrayList<BasePost>();
      Document doc=null;
      Connection.Response response=Request.execute(String.format(Api.MY_COLLECTIONS,uid),Api.USER_AGENT,(Map<String,String>)Athority.getSharedPreference().getAll(),Connection.Method.GET);
      try {
        doc=response.parse();
        Elements threadlists=doc.getElementsByClass(""String_Node_Str"");
        String str_tid=""String_Node_Str"";
        String title=""String_Node_Str"";
        String time=""String_Node_Str"";
        String comment_count=""String_Node_Str"";
        int haveimg=0;
        int tid=0;
        String author=""String_Node_Str"";
        BasePost post;
        for (        Element threadlist : threadlists) {
          Elements as=threadlist.getElementsByTag(""String_Node_Str"");
          for (          Element a : as) {
            String start=""String_Node_Str"";
            String len=""String_Node_Str"";
            String url=a.attr(""String_Node_Str"");
            str_tid=url.substring(start.length() - 1,url.length() - len.length() + 1);
            tid=Integer.valueOf(str_tid);
            title=a.text();
            post=new Post(0,tid,0,title,""String_Node_Str"",time,haveimg,0,author,null);
            posts.add(post);
          }
        }
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
      return posts;
    }
    @Override protected void onPostExecute(    ArrayList<BasePost> posts){
      super.onPostExecute(posts);
      MyPostsAdapter myPostsAdapter=new MyPostsAdapter(mContext,posts,mListView);
      mListView.setAdapter(myPostsAdapter);
    }
  }
);
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setTitle(""String_Node_Str"");
  mContext=this;
  getActionBar().setDisplayHomeAsUpEnabled(true);
  setContentView(R.layout.activity_myposts);
  mListView=(ListView)findViewById(R.id.listView);
  final String uid=Athority.getSharedPreference().getString(""String_Node_Str"",""String_Node_Str"");
  mListView.setOnScrollListener(new AbsListView.OnScrollListener(){
    @Override public void onScrollStateChanged(    AbsListView absListView,    int scrollState){
switch (scrollState) {
case AbsListView.OnScrollListener.SCROLL_STATE_IDLE:
        if (mListView.getLastVisiblePosition() == (mListView.getCount() - 1)) {
          TaskUtils.executeAsyncTask(new AsyncTask<String,Void,ArrayList<BasePost>>(){
            @Override protected ArrayList<BasePost> doInBackground(            String... params){
              Document doc=null;
              String post_url=String.format(Api.MY_COLLECTIONS,uid) + ""String_Node_Str"" + String.valueOf(page);
              Connection.Response response=Request.execute(post_url,Api.USER_AGENT,(Map<String,String>)Athority.getSharedPreference().getAll(),Connection.Method.GET);
              try {
                doc=response.parse();
                Elements threadlists=doc.getElementsByClass(""String_Node_Str"");
                if (!threadlists.text().equals(""String_Node_Str"")) {
                  String str_tid=""String_Node_Str"";
                  String title=""String_Node_Str"";
                  String time=""String_Node_Str"";
                  String comment_count=""String_Node_Str"";
                  int haveimg=0;
                  int tid=0;
                  String author=""String_Node_Str"";
                  BasePost post;
                  for (                  Element threadlist : threadlists) {
                    Elements as=threadlist.getElementsByTag(""String_Node_Str"");
                    for (                    Element a : as) {
                      String start=""String_Node_Str"";
                      String len=""String_Node_Str"";
                      String url=a.attr(""String_Node_Str"");
                      str_tid=url.substring(start.length() - 1,url.length() - len.length() + 1);
                      tid=Integer.valueOf(str_tid);
                      title=a.text();
                      post=new Post(0,tid,0,title,""String_Node_Str"",time,haveimg,0,author,null);
                      posts.add(post);
                    }
                  }
                  page++;
                }
              }
 catch (              IOException e) {
                e.printStackTrace();
              }
              return posts;
            }
            @Override protected void onPostExecute(            ArrayList<BasePost> posts){
              super.onPostExecute(posts);
              myPostsAdapter.refresh(posts);
            }
          }
);
        }
      if (mListView.getFirstVisiblePosition() == 0) {
      }
    break;
}
}
@Override public void onScroll(AbsListView view,int firstVisibleItem,int visibleItemCount,int totalItemCount){
}
}
);
TaskUtils.executeAsyncTask(new AsyncTask<String,Void,ArrayList<BasePost>>(){
@Override protected ArrayList<BasePost> doInBackground(String... params){
ArrayList<BasePost> posts=new ArrayList<BasePost>();
Document doc=null;
Connection.Response response=Request.execute(String.format(Api.MY_COLLECTIONS,uid),Api.USER_AGENT,(Map<String,String>)Athority.getSharedPreference().getAll(),Connection.Method.GET);
try {
  doc=response.parse();
  Elements threadlists=doc.getElementsByClass(""String_Node_Str"");
  String str_tid=""String_Node_Str"";
  String title=""String_Node_Str"";
  String time=""String_Node_Str"";
  String comment_count=""String_Node_Str"";
  int haveimg=0;
  int tid=0;
  String author=""String_Node_Str"";
  BasePost post;
  for (  Element threadlist : threadlists) {
    Elements as=threadlist.getElementsByTag(""String_Node_Str"");
    for (    Element a : as) {
      String start=""String_Node_Str"";
      String len=""String_Node_Str"";
      String url=a.attr(""String_Node_Str"");
      str_tid=url.substring(start.length() - 1,url.length() - len.length() + 1);
      tid=Integer.valueOf(str_tid);
      title=a.text();
      post=new Post(0,tid,0,title,""String_Node_Str"",time,haveimg,0,author,null);
      posts.add(post);
    }
  }
}
 catch (IOException e) {
  e.printStackTrace();
}
return posts;
}
@Override protected void onPostExecute(ArrayList<BasePost> posts){
super.onPostExecute(posts);
myPostsAdapter=new MyPostsAdapter(mContext,posts,mListView);
mListView.setAdapter(myPostsAdapter);
}
}
);
}",0.5264550264550265
35208,"@Override protected void onPostExecute(ArrayList<BasePost> posts){
  super.onPostExecute(posts);
  MyPostsAdapter myPostsAdapter=new MyPostsAdapter(mContext,posts,mListView);
  mListView.setAdapter(myPostsAdapter);
}","@Override protected void onPostExecute(ArrayList<BasePost> posts){
  super.onPostExecute(posts);
  myPostsAdapter=new MyPostsAdapter(mContext,posts,mListView);
  mListView.setAdapter(myPostsAdapter);
}",0.9640287769784172
35209,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setTitle(""String_Node_Str"");
  mContext=this;
  getActionBar().setDisplayHomeAsUpEnabled(true);
  setContentView(R.layout.activity_myposts);
  mListView=(ListView)findViewById(R.id.listView);
  final String uid=Athority.getSharedPreference().getString(""String_Node_Str"",""String_Node_Str"");
  TaskUtils.executeAsyncTask(new AsyncTask<String,Void,ArrayList<BasePost>>(){
    @Override protected ArrayList<BasePost> doInBackground(    String... params){
      ArrayList<BasePost> posts=new ArrayList<BasePost>();
      Document doc=null;
      Connection.Response response=Request.execute(String.format(Api.MY_POSTS,uid),Api.USER_AGENT,(Map<String,String>)Athority.getSharedPreference().getAll(),Connection.Method.GET);
      try {
        doc=response.parse();
        Elements bm_cs=doc.getElementsByClass(""String_Node_Str"");
        String str_tid=""String_Node_Str"";
        String title=""String_Node_Str"";
        String time=""String_Node_Str"";
        String comment_count=""String_Node_Str"";
        int haveimg=0;
        int tid=0;
        String author=Athority.getSharedPreference().getString(""String_Node_Str"",""String_Node_Str"");
        BasePost post;
        for (        Element bm_c : bm_cs) {
          Elements as=bm_c.getElementsByTag(""String_Node_Str"");
          for (          Element a : as) {
            String start=""String_Node_Str"";
            String len=""String_Node_Str"";
            String url=a.attr(""String_Node_Str"");
            str_tid=url.substring(start.length() - 1,url.length() - len.length() + 1);
            tid=Integer.valueOf(str_tid);
            title=a.text();
          }
          Elements xg1s=bm_c.getElementsByClass(""String_Node_Str"");
          comment_count=xg1s.text().substring(""String_Node_Str"".length());
          post=new Post(0,tid,0,title,""String_Node_Str"",time,haveimg,Integer.valueOf(comment_count),author,null);
          posts.add(post);
        }
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
      return posts;
    }
    @Override protected void onPostExecute(    ArrayList<BasePost> posts){
      super.onPostExecute(posts);
      MyPostsAdapter myPostsAdapter=new MyPostsAdapter(mContext,posts,mListView);
      mListView.setAdapter(myPostsAdapter);
    }
  }
);
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setTitle(""String_Node_Str"");
  mContext=this;
  getActionBar().setDisplayHomeAsUpEnabled(true);
  setContentView(R.layout.activity_myposts);
  final String uid=Athority.getSharedPreference().getString(""String_Node_Str"",""String_Node_Str"");
  mListView=(ListView)findViewById(R.id.listView);
  mListView.setOnScrollListener(new AbsListView.OnScrollListener(){
    @Override public void onScrollStateChanged(    AbsListView absListView,    int scrollState){
switch (scrollState) {
case AbsListView.OnScrollListener.SCROLL_STATE_IDLE:
        if (mListView.getLastVisiblePosition() == (mListView.getCount() - 1)) {
          TaskUtils.executeAsyncTask(new AsyncTask<String,Void,ArrayList<BasePost>>(){
            @Override protected ArrayList<BasePost> doInBackground(            String... params){
              Document doc=null;
              String post_url=String.format(Api.MY_POSTS,uid) + ""String_Node_Str"" + String.valueOf(page);
              Connection.Response response=Request.execute(post_url,Api.USER_AGENT,(Map<String,String>)Athority.getSharedPreference().getAll(),Connection.Method.GET);
              try {
                doc=response.parse();
                Elements bm_cs=doc.getElementsByClass(""String_Node_Str"");
                if (!bm_cs.text().equals(""String_Node_Str"")) {
                  String str_tid=""String_Node_Str"";
                  String title=""String_Node_Str"";
                  String time=""String_Node_Str"";
                  String comment_count=""String_Node_Str"";
                  int haveimg=0;
                  int tid=0;
                  String author=Athority.getSharedPreference().getString(""String_Node_Str"",""String_Node_Str"");
                  BasePost post;
                  for (                  Element bm_c : bm_cs) {
                    Elements as=bm_c.getElementsByTag(""String_Node_Str"");
                    for (                    Element a : as) {
                      String start=""String_Node_Str"";
                      String len=""String_Node_Str"";
                      String url=a.attr(""String_Node_Str"");
                      str_tid=url.substring(start.length() - 1,url.length() - len.length() + 1);
                      tid=Integer.valueOf(str_tid);
                      title=a.text();
                    }
                    Elements xg1s=bm_c.getElementsByClass(""String_Node_Str"");
                    comment_count=xg1s.text().substring(""String_Node_Str"".length());
                    post=new Post(0,tid,0,title,""String_Node_Str"",time,haveimg,Integer.valueOf(comment_count),author,null);
                    posts.add(post);
                  }
                  page++;
                }
              }
 catch (              IOException e) {
                e.printStackTrace();
              }
              return posts;
            }
            @Override protected void onPostExecute(            ArrayList<BasePost> posts){
              super.onPostExecute(posts);
              myPostsAdapter.refresh(posts);
            }
          }
);
        }
      if (mListView.getFirstVisiblePosition() == 0) {
      }
    break;
}
}
@Override public void onScroll(AbsListView view,int firstVisibleItem,int visibleItemCount,int totalItemCount){
}
}
);
TaskUtils.executeAsyncTask(new AsyncTask<String,Void,ArrayList<BasePost>>(){
@Override protected ArrayList<BasePost> doInBackground(String... params){
ArrayList<BasePost> posts=new ArrayList<BasePost>();
Document doc=null;
Connection.Response response=Request.execute(String.format(Api.MY_POSTS,uid),Api.USER_AGENT,(Map<String,String>)Athority.getSharedPreference().getAll(),Connection.Method.GET);
try {
  doc=response.parse();
  Elements bm_cs=doc.getElementsByClass(""String_Node_Str"");
  String str_tid=""String_Node_Str"";
  String title=""String_Node_Str"";
  String time=""String_Node_Str"";
  String comment_count=""String_Node_Str"";
  int haveimg=0;
  int tid=0;
  String author=Athority.getSharedPreference().getString(""String_Node_Str"",""String_Node_Str"");
  BasePost post;
  for (  Element bm_c : bm_cs) {
    Elements as=bm_c.getElementsByTag(""String_Node_Str"");
    for (    Element a : as) {
      String start=""String_Node_Str"";
      String len=""String_Node_Str"";
      String url=a.attr(""String_Node_Str"");
      str_tid=url.substring(start.length() - 1,url.length() - len.length() + 1);
      tid=Integer.valueOf(str_tid);
      title=a.text();
    }
    Elements xg1s=bm_c.getElementsByClass(""String_Node_Str"");
    comment_count=xg1s.text().substring(""String_Node_Str"".length());
    post=new Post(0,tid,0,title,""String_Node_Str"",time,haveimg,Integer.valueOf(comment_count),author,null);
    posts.add(post);
  }
}
 catch (IOException e) {
  e.printStackTrace();
}
return posts;
}
@Override protected void onPostExecute(ArrayList<BasePost> posts){
super.onPostExecute(posts);
myPostsAdapter=new MyPostsAdapter(mContext,posts,mListView);
mListView.setAdapter(myPostsAdapter);
}
}
);
}",0.5029729729729729
35210,"@Override protected void onPostExecute(ArrayList<BasePost> posts){
  super.onPostExecute(posts);
  MyPostsAdapter myPostsAdapter=new MyPostsAdapter(mContext,posts,mListView);
  mListView.setAdapter(myPostsAdapter);
}","@Override protected void onPostExecute(ArrayList<BasePost> posts){
  super.onPostExecute(posts);
  myPostsAdapter=new MyPostsAdapter(mContext,posts,mListView);
  mListView.setAdapter(myPostsAdapter);
}",0.9640287769784172
35211,"@Override protected Integer doInBackground(String... params){
  int statusCode=0;
  String noticetrimstr;
  String content=""String_Node_Str"";
  if (posts.get(Integer.valueOf(params[2]) - 1).content.startsWith(""String_Node_Str"")) {
    content=posts.get(Integer.valueOf(params[2]) - 1).content.substring(""String_Node_Str"".length());
  }
  noticetrimstr=""String_Node_Str"" + posts.get(Integer.valueOf(params[2]) - 1).pid + ""String_Node_Str""+ posts.get(Integer.valueOf(params[2]) - 1).tid+ ""String_Node_Str""+ posts.get(Integer.valueOf(params[2]) - 1).author+ posts.get(Integer.valueOf(params[2]) - 1).time+ ""String_Node_Str""+ content+ ""String_Node_Str"";
  HashMap<String,String> datas=new HashMap<String,String>();
  datas.put(""String_Node_Str"",params[1]);
  datas.put(""String_Node_Str"",formhash);
  datas.put(""String_Node_Str"",""String_Node_Str"");
  datas.put(""String_Node_Str"",""String_Node_Str"");
  datas.put(""String_Node_Str"",""String_Node_Str"");
  datas.put(""String_Node_Str"",""String_Node_Str"");
  datas.put(""String_Node_Str"",""String_Node_Str"");
  datas.put(""String_Node_Str"",noticetrimstr);
  Connection.Response res=Request.execute(params[0],""String_Node_Str"",datas,(Map<String,String>)Athority.getSharedPreference().getAll(),Connection.Method.POST);
  statusCode=res.statusCode();
  return statusCode;
}","@Override protected Integer doInBackground(String... params){
  int statusCode=0;
  String noticetrimstr;
  String content=""String_Node_Str"";
  if (posts.get(Integer.valueOf(params[2]) - 1).content.startsWith(""String_Node_Str"")) {
    content=posts.get(Integer.valueOf(params[2]) - 1).content.substring(""String_Node_Str"".length());
  }
 else {
    content=posts.get(Integer.valueOf(params[2]) - 1).content;
  }
  noticetrimstr=""String_Node_Str"" + posts.get(Integer.valueOf(params[2]) - 1).pid + ""String_Node_Str""+ posts.get(Integer.valueOf(params[2]) - 1).tid+ ""String_Node_Str""+ posts.get(Integer.valueOf(params[2]) - 1).author+ posts.get(Integer.valueOf(params[2]) - 1).time+ ""String_Node_Str""+ content+ ""String_Node_Str"";
  HashMap<String,String> datas=new HashMap<String,String>();
  datas.put(""String_Node_Str"",params[1]);
  datas.put(""String_Node_Str"",formhash);
  datas.put(""String_Node_Str"",""String_Node_Str"");
  datas.put(""String_Node_Str"",""String_Node_Str"");
  datas.put(""String_Node_Str"",""String_Node_Str"");
  datas.put(""String_Node_Str"",""String_Node_Str"");
  datas.put(""String_Node_Str"",""String_Node_Str"");
  datas.put(""String_Node_Str"",noticetrimstr);
  Connection.Response res=Request.execute(params[0],""String_Node_Str"",datas,(Map<String,String>)Athority.getSharedPreference().getAll(),Connection.Method.POST);
  statusCode=res.statusCode();
  return statusCode;
}",0.9228475587029444
35212,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setTitle(""String_Node_Str"");
  mContext=this;
  getActionBar().setDisplayHomeAsUpEnabled(true);
  setContentView(R.layout.activity_myposts);
  final String uid=Athority.getSharedPreference().getString(""String_Node_Str"",""String_Node_Str"");
  mListView=(ListView)findViewById(R.id.listView);
  mListView.setOnScrollListener(new AbsListView.OnScrollListener(){
    @Override public void onScrollStateChanged(    AbsListView absListView,    int scrollState){
switch (scrollState) {
case AbsListView.OnScrollListener.SCROLL_STATE_IDLE:
        if (mListView.getLastVisiblePosition() == (mListView.getCount() - 1)) {
          TaskUtils.executeAsyncTask(new AsyncTask<String,Void,ArrayList<BasePost>>(){
            @Override protected ArrayList<BasePost> doInBackground(            String... params){
              Document doc=null;
              String post_url=String.format(Api.MY_POSTS,uid) + ""String_Node_Str"" + String.valueOf(page);
              Connection.Response response=Request.execute(post_url,Api.USER_AGENT,(Map<String,String>)Athority.getSharedPreference().getAll(),Connection.Method.GET);
              try {
                doc=response.parse();
                Elements bm_cs=doc.getElementsByClass(""String_Node_Str"");
                if (!bm_cs.text().equals(""String_Node_Str"")) {
                  String str_tid=""String_Node_Str"";
                  String title=""String_Node_Str"";
                  String time=""String_Node_Str"";
                  String comment_count=""String_Node_Str"";
                  int haveimg=0;
                  int tid=0;
                  String author=Athority.getSharedPreference().getString(""String_Node_Str"",""String_Node_Str"");
                  BasePost post;
                  for (                  Element bm_c : bm_cs) {
                    Elements as=bm_c.getElementsByTag(""String_Node_Str"");
                    for (                    Element a : as) {
                      String start=""String_Node_Str"";
                      String len=""String_Node_Str"";
                      String url=a.attr(""String_Node_Str"");
                      str_tid=url.substring(start.length() - 1,url.length() - len.length() + 1);
                      tid=Integer.valueOf(str_tid);
                      title=a.text();
                    }
                    Elements xg1s=bm_c.getElementsByClass(""String_Node_Str"");
                    comment_count=xg1s.text().substring(""String_Node_Str"".length());
                    post=new Post(0,tid,0,title,""String_Node_Str"",time,haveimg,Integer.valueOf(comment_count),author,null);
                    posts.add(post);
                  }
                  page++;
                }
              }
 catch (              IOException e) {
                e.printStackTrace();
              }
              return posts;
            }
            @Override protected void onPostExecute(            ArrayList<BasePost> posts){
              super.onPostExecute(posts);
              myPostsAdapter.refresh(posts);
            }
          }
);
        }
      if (mListView.getFirstVisiblePosition() == 0) {
      }
    break;
}
}
@Override public void onScroll(AbsListView view,int firstVisibleItem,int visibleItemCount,int totalItemCount){
}
}
);
TaskUtils.executeAsyncTask(new AsyncTask<String,Void,ArrayList<BasePost>>(){
@Override protected ArrayList<BasePost> doInBackground(String... params){
ArrayList<BasePost> posts=new ArrayList<BasePost>();
Document doc=null;
Connection.Response response=Request.execute(String.format(Api.MY_POSTS,uid),Api.USER_AGENT,(Map<String,String>)Athority.getSharedPreference().getAll(),Connection.Method.GET);
try {
  doc=response.parse();
  Elements bm_cs=doc.getElementsByClass(""String_Node_Str"");
  String str_tid=""String_Node_Str"";
  String title=""String_Node_Str"";
  String time=""String_Node_Str"";
  String comment_count=""String_Node_Str"";
  int haveimg=0;
  int tid=0;
  String author=Athority.getSharedPreference().getString(""String_Node_Str"",""String_Node_Str"");
  BasePost post;
  for (  Element bm_c : bm_cs) {
    Elements as=bm_c.getElementsByTag(""String_Node_Str"");
    for (    Element a : as) {
      String start=""String_Node_Str"";
      String len=""String_Node_Str"";
      String url=a.attr(""String_Node_Str"");
      str_tid=url.substring(start.length() - 1,url.length() - len.length() + 1);
      tid=Integer.valueOf(str_tid);
      title=a.text();
    }
    Elements xg1s=bm_c.getElementsByClass(""String_Node_Str"");
    comment_count=xg1s.text().substring(""String_Node_Str"".length());
    post=new Post(0,tid,0,title,""String_Node_Str"",time,haveimg,Integer.valueOf(comment_count),author,null);
    posts.add(post);
  }
}
 catch (IOException e) {
  e.printStackTrace();
}
return posts;
}
@Override protected void onPostExecute(ArrayList<BasePost> posts){
super.onPostExecute(posts);
myPostsAdapter=new MyPostsAdapter(mContext,posts,mListView);
mListView.setAdapter(myPostsAdapter);
}
}
);
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setTitle(""String_Node_Str"");
  mContext=this;
  getActionBar().setDisplayHomeAsUpEnabled(true);
  setContentView(R.layout.activity_myposts);
  final String uid=Athority.getSharedPreference().getString(""String_Node_Str"",""String_Node_Str"");
  mListView=(ListView)findViewById(R.id.listView);
  mListView.setOnScrollListener(new AbsListView.OnScrollListener(){
    @Override public void onScrollStateChanged(    AbsListView absListView,    int scrollState){
switch (scrollState) {
case AbsListView.OnScrollListener.SCROLL_STATE_IDLE:
        if (mListView.getLastVisiblePosition() == (mListView.getCount() - 1)) {
          TaskUtils.executeAsyncTask(new AsyncTask<String,Void,ArrayList<BasePost>>(){
            @Override protected ArrayList<BasePost> doInBackground(            String... params){
              Document doc=null;
              String post_url=String.format(Api.MY_POSTS,uid) + ""String_Node_Str"" + String.valueOf(page);
              Connection.Response response=Request.execute(post_url,Api.USER_AGENT,(Map<String,String>)Athority.getSharedPreference().getAll(),Connection.Method.GET);
              try {
                doc=response.parse();
                Elements bm_cs=doc.getElementsByClass(""String_Node_Str"");
                if (!bm_cs.text().equals(""String_Node_Str"")) {
                  String str_tid=""String_Node_Str"";
                  String title=""String_Node_Str"";
                  String time=""String_Node_Str"";
                  String comment_count=""String_Node_Str"";
                  int haveimg=0;
                  int tid=0;
                  String author=Athority.getSharedPreference().getString(""String_Node_Str"",""String_Node_Str"");
                  BasePost post;
                  for (                  Element bm_c : bm_cs) {
                    Elements as=bm_c.getElementsByTag(""String_Node_Str"");
                    for (                    Element a : as) {
                      String start=""String_Node_Str"";
                      String len=""String_Node_Str"";
                      String url=a.attr(""String_Node_Str"");
                      str_tid=url.substring(start.length() - 1,url.length() - len.length() + 1);
                      tid=Integer.valueOf(str_tid);
                      title=a.text();
                    }
                    Elements xg1s=bm_c.getElementsByClass(""String_Node_Str"");
                    comment_count=xg1s.text().substring(""String_Node_Str"".length());
                    post=new Post(0,tid,0,title,""String_Node_Str"",time,haveimg,Integer.valueOf(comment_count),author,null);
                    posts.add(post);
                  }
                  page++;
                }
              }
 catch (              IOException e) {
                e.printStackTrace();
              }
              return posts;
            }
            @Override protected void onPostExecute(            ArrayList<BasePost> posts){
              super.onPostExecute(posts);
              myPostsAdapter.refresh(posts);
            }
          }
);
        }
      if (mListView.getFirstVisiblePosition() == 0) {
      }
    break;
}
}
@Override public void onScroll(AbsListView view,int firstVisibleItem,int visibleItemCount,int totalItemCount){
}
}
);
TaskUtils.executeAsyncTask(new AsyncTask<String,Void,ArrayList<BasePost>>(){
@Override protected ArrayList<BasePost> doInBackground(String... params){
ArrayList<BasePost> posts=new ArrayList<BasePost>();
Document doc=null;
Connection.Response response=Request.execute(String.format(Api.MY_POSTS,uid),Api.USER_AGENT,(Map<String,String>)Athority.getSharedPreference().getAll(),Connection.Method.GET);
try {
  doc=response.parse();
  Elements bm_cs=doc.getElementsByClass(""String_Node_Str"");
  String str_tid=""String_Node_Str"";
  String title=""String_Node_Str"";
  String time=""String_Node_Str"";
  String comment_count=""String_Node_Str"";
  int haveimg=0;
  int tid=0;
  String author=Athority.getSharedPreference().getString(""String_Node_Str"",""String_Node_Str"");
  BasePost post;
  for (  Element bm_c : bm_cs) {
    Elements as=bm_c.getElementsByTag(""String_Node_Str"");
    for (    Element a : as) {
      String start=""String_Node_Str"";
      String len=""String_Node_Str"";
      String url=a.attr(""String_Node_Str"");
      str_tid=url.substring(start.length() - 1,url.length() - len.length() + 1);
      tid=Integer.valueOf(str_tid);
      title=a.text();
    }
    Elements xg1s=bm_c.getElementsByClass(""String_Node_Str"");
    if (xg1s.text().length() != 0) {
      comment_count=xg1s.text().substring(""String_Node_Str"".length());
    }
 else {
      comment_count=""String_Node_Str"";
    }
    post=new Post(0,tid,0,title,""String_Node_Str"",time,haveimg,Integer.valueOf(comment_count),author,null);
    posts.add(post);
  }
}
 catch (IOException e) {
  e.printStackTrace();
}
return posts;
}
@Override protected void onPostExecute(ArrayList<BasePost> posts){
super.onPostExecute(posts);
if (posts.size() == 1) {
  posts.clear();
}
myPostsAdapter=new MyPostsAdapter(mContext,posts,mListView);
mListView.setAdapter(myPostsAdapter);
}
}
);
}",0.983356177795183
35213,"@Override protected ArrayList<BasePost> doInBackground(String... params){
  ArrayList<BasePost> posts=new ArrayList<BasePost>();
  Document doc=null;
  Connection.Response response=Request.execute(String.format(Api.MY_POSTS,uid),Api.USER_AGENT,(Map<String,String>)Athority.getSharedPreference().getAll(),Connection.Method.GET);
  try {
    doc=response.parse();
    Elements bm_cs=doc.getElementsByClass(""String_Node_Str"");
    String str_tid=""String_Node_Str"";
    String title=""String_Node_Str"";
    String time=""String_Node_Str"";
    String comment_count=""String_Node_Str"";
    int haveimg=0;
    int tid=0;
    String author=Athority.getSharedPreference().getString(""String_Node_Str"",""String_Node_Str"");
    BasePost post;
    for (    Element bm_c : bm_cs) {
      Elements as=bm_c.getElementsByTag(""String_Node_Str"");
      for (      Element a : as) {
        String start=""String_Node_Str"";
        String len=""String_Node_Str"";
        String url=a.attr(""String_Node_Str"");
        str_tid=url.substring(start.length() - 1,url.length() - len.length() + 1);
        tid=Integer.valueOf(str_tid);
        title=a.text();
      }
      Elements xg1s=bm_c.getElementsByClass(""String_Node_Str"");
      comment_count=xg1s.text().substring(""String_Node_Str"".length());
      post=new Post(0,tid,0,title,""String_Node_Str"",time,haveimg,Integer.valueOf(comment_count),author,null);
      posts.add(post);
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  return posts;
}","@Override protected ArrayList<BasePost> doInBackground(String... params){
  ArrayList<BasePost> posts=new ArrayList<BasePost>();
  Document doc=null;
  Connection.Response response=Request.execute(String.format(Api.MY_POSTS,uid),Api.USER_AGENT,(Map<String,String>)Athority.getSharedPreference().getAll(),Connection.Method.GET);
  try {
    doc=response.parse();
    Elements bm_cs=doc.getElementsByClass(""String_Node_Str"");
    String str_tid=""String_Node_Str"";
    String title=""String_Node_Str"";
    String time=""String_Node_Str"";
    String comment_count=""String_Node_Str"";
    int haveimg=0;
    int tid=0;
    String author=Athority.getSharedPreference().getString(""String_Node_Str"",""String_Node_Str"");
    BasePost post;
    for (    Element bm_c : bm_cs) {
      Elements as=bm_c.getElementsByTag(""String_Node_Str"");
      for (      Element a : as) {
        String start=""String_Node_Str"";
        String len=""String_Node_Str"";
        String url=a.attr(""String_Node_Str"");
        str_tid=url.substring(start.length() - 1,url.length() - len.length() + 1);
        tid=Integer.valueOf(str_tid);
        title=a.text();
      }
      Elements xg1s=bm_c.getElementsByClass(""String_Node_Str"");
      if (xg1s.text().length() != 0) {
        comment_count=xg1s.text().substring(""String_Node_Str"".length());
      }
 else {
        comment_count=""String_Node_Str"";
      }
      post=new Post(0,tid,0,title,""String_Node_Str"",time,haveimg,Integer.valueOf(comment_count),author,null);
      posts.add(post);
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  return posts;
}",0.9564935064935064
35214,"@Override protected void onPostExecute(ArrayList<BasePost> posts){
  super.onPostExecute(posts);
  myPostsAdapter=new MyPostsAdapter(mContext,posts,mListView);
  mListView.setAdapter(myPostsAdapter);
}","@Override protected void onPostExecute(ArrayList<BasePost> posts){
  super.onPostExecute(posts);
  if (posts.size() == 1) {
    posts.clear();
  }
  myPostsAdapter=new MyPostsAdapter(mContext,posts,mListView);
  mListView.setAdapter(myPostsAdapter);
}",0.827433628318584
35215,"@Override public boolean onOptionsItemSelected(MenuItem item){
  if (mDrawerToggle.onOptionsItemSelected(item)) {
    return true;
  }
switch (item.getItemId()) {
case R.id.changeAcount:
    startActivity(new Intent(this,LoginActivity.class));
  finish();
return true;
case R.id.personalcenter:
startActivity(new Intent(this,PersonalCenterActivity.class));
return true;
default :
return super.onOptionsItemSelected(item);
}
}","@Override public boolean onOptionsItemSelected(MenuItem item){
  if (mDrawerToggle.onOptionsItemSelected(item)) {
    return true;
  }
switch (item.getItemId()) {
case R.id.changeAcount:
    Athority.addOther(Athority.HAVE_UID,""String_Node_Str"");
  startActivity(new Intent(this,LoginActivity.class));
finish();
return true;
case R.id.personalcenter:
startActivity(new Intent(this,PersonalCenterActivity.class));
return true;
default :
return super.onOptionsItemSelected(item);
}
}",0.933774834437086
35216,"@Override protected Integer doInBackground(String... params){
  int statusCode=0;
  String noticetrimstr;
  String content=""String_Node_Str"";
  if (posts.get(Integer.valueOf(params[2]) - 1).content.startsWith(""String_Node_Str"")) {
    content=posts.get(Integer.valueOf(params[2]) - 1).content.substring(""String_Node_Str"".length());
  }
 else {
    content=posts.get(Integer.valueOf(params[2]) - 1).content;
  }
  noticetrimstr=""String_Node_Str"" + posts.get(Integer.valueOf(params[2]) - 1).pid + ""String_Node_Str""+ posts.get(Integer.valueOf(params[2]) - 1).tid+ ""String_Node_Str""+ posts.get(Integer.valueOf(params[2]) - 1).author+ posts.get(Integer.valueOf(params[2]) - 1).time+ ""String_Node_Str""+ content+ ""String_Node_Str"";
  HashMap<String,String> datas=new HashMap<String,String>();
  datas.put(""String_Node_Str"",params[1]);
  datas.put(""String_Node_Str"",formhash);
  datas.put(""String_Node_Str"",""String_Node_Str"");
  datas.put(""String_Node_Str"",""String_Node_Str"");
  datas.put(""String_Node_Str"",""String_Node_Str"");
  datas.put(""String_Node_Str"",""String_Node_Str"");
  datas.put(""String_Node_Str"",""String_Node_Str"");
  datas.put(""String_Node_Str"",noticetrimstr);
  Connection.Response res=Request.execute(params[0],""String_Node_Str"",datas,(Map<String,String>)Athority.getSharedPreference().getAll(),Connection.Method.POST);
  statusCode=res.statusCode();
  return statusCode;
}","@Override protected Integer doInBackground(String... params){
  int statusCode=0;
  String noticetrimstr;
  String content=""String_Node_Str"";
  if (posts.get(Integer.valueOf(params[2]) - 1).content.startsWith(""String_Node_Str"")) {
    content=posts.get(Integer.valueOf(params[2]) - 1).content.substring(""String_Node_Str"".length());
  }
 else {
    String[] temp=posts.get(Integer.valueOf(params[2]) - 1).content.split(""String_Node_Str"");
    content=temp[1];
  }
  noticetrimstr=""String_Node_Str"" + posts.get(Integer.valueOf(params[2]) - 1).pid + ""String_Node_Str""+ posts.get(Integer.valueOf(params[2]) - 1).tid+ ""String_Node_Str""+ posts.get(Integer.valueOf(params[2]) - 1).author+ posts.get(Integer.valueOf(params[2]) - 1).time+ ""String_Node_Str""+ content+ ""String_Node_Str"";
  HashMap<String,String> datas=new HashMap<String,String>();
  datas.put(""String_Node_Str"",params[1]);
  datas.put(""String_Node_Str"",formhash);
  datas.put(""String_Node_Str"",""String_Node_Str"");
  datas.put(""String_Node_Str"",""String_Node_Str"");
  datas.put(""String_Node_Str"",""String_Node_Str"");
  datas.put(""String_Node_Str"",""String_Node_Str"");
  datas.put(""String_Node_Str"",""String_Node_Str"");
  datas.put(""String_Node_Str"",noticetrimstr);
  Connection.Response res=Request.execute(params[0],""String_Node_Str"",datas,(Map<String,String>)Athority.getSharedPreference().getAll(),Connection.Method.POST);
  statusCode=res.statusCode();
  return statusCode;
}",0.9765124555160144
35217,"private Timer start(final boolean periodic,TimeOfWeek time,final Handler<Timer> handler){
  final TimerData data=new TimerData();
  final Timer timer=new Timer();
  final SchedulerLogic logic=new SchedulerLogic(time.getTimeZone(),new Date(),time.getWeekMs(),time.aheadBehavior(),time.backBehavior());
  final Handler<java.lang.Long> timerCB=new Handler<java.lang.Long>(){
    public void handle(    Long vertxTimerId){
      handler.handle(timer);
      if (periodic) {
        Date d=logic.next();
        data.vertxTimerId=vertx.setTimer(Utils.getMsUntilDate(logic.next()),this);
      }
 else {
        timers.remove(timer);
      }
    }
  }
;
  data.vertxTimerId=vertx.setTimer(Utils.getMsUntilDate(logic.next()),timerCB);
  timers.put(timer,data);
  return timer;
}","private Timer start(final boolean periodic,TimeOfWeek time,final Handler<Timer> handler){
  final TimerData data=new TimerData();
  final Timer timer=new Timer();
  final SchedulerLogic logic=new SchedulerLogic(time.getTimeZone(),new Date(),time.getWeekMs(),time.aheadBehavior(),time.backBehavior());
  final Handler<java.lang.Long> timerCB=new Handler<java.lang.Long>(){
    public void handle(    Long vertxTimerId){
      if (periodic) {
        timer.next=logic.next();
        handler.handle(timer);
        data.vertxTimerId=vertx.setTimer(Utils.getMsUntilDate(timer.next),this);
      }
 else {
        timer.next=null;
        handler.handle(timer);
        timers.remove(timer);
      }
    }
  }
;
  timer.next=logic.next();
  data.vertxTimerId=vertx.setTimer(Utils.getMsUntilDate(timer.next),timerCB);
  timers.put(timer,data);
  return timer;
}",0.6945298094652735
35218,"public void handle(Long vertxTimerId){
  handler.handle(timer);
  if (periodic) {
    Date d=logic.next();
    data.vertxTimerId=vertx.setTimer(Utils.getMsUntilDate(logic.next()),this);
  }
 else {
    timers.remove(timer);
  }
}","public void handle(Long vertxTimerId){
  if (periodic) {
    timer.next=logic.next();
    handler.handle(timer);
    data.vertxTimerId=vertx.setTimer(Utils.getMsUntilDate(timer.next),this);
  }
 else {
    timer.next=null;
    handler.handle(timer);
    timers.remove(timer);
  }
}",0.2901960784313726
35219,"@PreDestroy public void closeAll(){
  for (  RMISampleProvider sensor : sensorMap.values()) {
    try {
      sensor.close();
    }
 catch (    RemoteException e) {
      L.error(""String_Node_Str"",e);
    }
  }
}","@PreDestroy public void closeAll(){
  for (  String port : sensorMap.keySet()) {
    try {
      L.info(""String_Node_Str"",port);
      sensorMap.get(port).close();
      sensorMap.remove(port);
    }
 catch (    RemoteException e) {
      L.error(""String_Node_Str"",port,e);
    }
  }
}",0.4949698189134809
35220,"private double rangeSearchKNN(Node<T> node,double[] center,ArrayList<KDEntryDist<T>> candidates,int k,int depth,double maxRange){
  int pos=depth % dims;
  if (node.getLo() != null && (center[pos] < node.getKey()[pos] || node.getHi() == null)) {
    maxRange=rangeSearchKNN(node.getLo(),center,candidates,k,depth + 1,maxRange);
    if (center[pos] + maxRange >= node.getKey()[pos]) {
      maxRange=addCandidate(node,center,candidates,k,maxRange);
    }
    if (node.getHi() != null) {
      maxRange=rangeSearchKNN(node.getHi(),center,candidates,k,depth + 1,maxRange);
    }
  }
 else   if (node.getHi() != null) {
    maxRange=rangeSearchKNN(node.getHi(),center,candidates,k,depth + 1,maxRange);
    if (center[pos] <= node.getKey()[pos] + maxRange) {
      maxRange=addCandidate(node,center,candidates,k,maxRange);
    }
    if (node.getLo() != null) {
      maxRange=rangeSearchKNN(node.getLo(),center,candidates,k,depth + 1,maxRange);
    }
  }
 else {
    maxRange=addCandidate(node,center,candidates,k,maxRange);
  }
  return maxRange;
}","private double rangeSearchKNN(Node<T> node,double[] center,ArrayList<KDEntryDist<T>> candidates,int k,int depth,double maxRange){
  int pos=depth % dims;
  if (node.getLo() != null && (center[pos] < node.getKey()[pos] || node.getHi() == null)) {
    maxRange=rangeSearchKNN(node.getLo(),center,candidates,k,depth + 1,maxRange);
    if (center[pos] + maxRange >= node.getKey()[pos]) {
      maxRange=addCandidate(node,center,candidates,k,maxRange);
      if (node.getHi() != null) {
        maxRange=rangeSearchKNN(node.getHi(),center,candidates,k,depth + 1,maxRange);
      }
    }
  }
 else   if (node.getHi() != null) {
    maxRange=rangeSearchKNN(node.getHi(),center,candidates,k,depth + 1,maxRange);
    if (center[pos] <= node.getKey()[pos] + maxRange) {
      maxRange=addCandidate(node,center,candidates,k,maxRange);
      if (node.getLo() != null) {
        maxRange=rangeSearchKNN(node.getLo(),center,candidates,k,depth + 1,maxRange);
      }
    }
  }
 else {
    maxRange=addCandidate(node,center,candidates,k,maxRange);
  }
  return maxRange;
}",0.9866666666666668
35221,"@SuppressWarnings(""String_Node_Str"") QEntry<T> update(QNode<T> parent,double[] keyOld,double[] keyNew,int maxNodeSize,boolean[] requiresReinsert,int currentDepth,int maxDepth){
  if (values == null) {
    QNode<T> sub=findSubNode(keyOld);
    if (sub == null) {
      return null;
    }
    QEntry<T> ret=sub.update(this,keyOld,keyNew,maxNodeSize,requiresReinsert,currentDepth + 1,maxDepth);
    if (ret != null && requiresReinsert[0] && QUtil.isPointEnclosed(ret.point(),center,radius / QUtil.EPS_MUL)) {
      requiresReinsert[0]=false;
      Object r=this;
      while (r instanceof QNode) {
        r=((QNode<T>)r).tryPut(ret,maxNodeSize,currentDepth++ > maxDepth);
      }
    }
    return ret;
  }
  for (int i=0; i < values.size(); i++) {
    QEntry<T> e=values.get(i);
    if (QUtil.isPointEqual(e.point(),keyOld)) {
      values.remove(i);
      e.setKey(keyNew);
      if (QUtil.isPointEnclosed(keyNew,center,radius / QUtil.EPS_MUL)) {
        values.add(e);
        requiresReinsert[0]=false;
      }
 else {
        requiresReinsert[0]=true;
        if (parent != null) {
          parent.checkAndMergeLeafNodes(maxNodeSize);
        }
      }
      return e;
    }
  }
  requiresReinsert[0]=false;
  return null;
}","@SuppressWarnings(""String_Node_Str"") QEntry<T> update(QNode<T> parent,double[] keyOld,double[] keyNew,int maxNodeSize,boolean[] requiresReinsert,int currentDepth,int maxDepth){
  if (values == null) {
    QNode<T> sub=findSubNode(keyOld);
    if (sub == null) {
      return null;
    }
    QEntry<T> ret=sub.update(this,keyOld,keyNew,maxNodeSize,requiresReinsert,currentDepth + 1,maxDepth);
    if (ret != null && requiresReinsert[0] && QUtil.isPointEnclosed(ret.point(),center,radius)) {
      requiresReinsert[0]=false;
      Object r=this;
      while (r instanceof QNode) {
        r=((QNode<T>)r).tryPut(ret,maxNodeSize,currentDepth++ > maxDepth);
      }
    }
    return ret;
  }
  for (int i=0; i < values.size(); i++) {
    QEntry<T> e=values.get(i);
    if (QUtil.isPointEqual(e.point(),keyOld)) {
      values.remove(i);
      e.setKey(keyNew);
      if (QUtil.isPointEnclosed(keyNew,center,radius)) {
        values.add(e);
        requiresReinsert[0]=false;
      }
 else {
        requiresReinsert[0]=true;
        if (parent != null) {
          parent.checkAndMergeLeafNodes(maxNodeSize);
        }
      }
      return e;
    }
  }
  requiresReinsert[0]=false;
  return null;
}",0.9867877786952932
35222,"/** 
 * Reinsert the key.
 * @param oldKey old key
 * @param newKey new key
 * @return the value associated with the key or 'null' if the key was not found.
 */
@Override @SuppressWarnings(""String_Node_Str"") public T update(double[] oldKey,double[] newKey){
  if (root == null) {
    return null;
  }
  boolean[] requiresReinsert=new boolean[]{false};
  QEntry<T> e=root.update(null,oldKey,newKey,maxNodeSize,requiresReinsert,0,MAX_DEPTH);
  if (e == null) {
    System.err.println(""String_Node_Str"" + Arrays.toString(newKey));
    return null;
  }
  if (requiresReinsert[0]) {
    System.err.println(""String_Node_Str"" + Arrays.toString(newKey));
    ensureCoverage(e);
    Object r=root;
    int depth=0;
    while (r instanceof QNode) {
      r=((QNode<T>)r).tryPut(e,maxNodeSize,depth++ > MAX_DEPTH);
    }
  }
  return e.value();
}","/** 
 * Reinsert the key.
 * @param oldKey old key
 * @param newKey new key
 * @return the value associated with the key or 'null' if the key was not found.
 */
@Override @SuppressWarnings(""String_Node_Str"") public T update(double[] oldKey,double[] newKey){
  if (root == null) {
    return null;
  }
  boolean[] requiresReinsert=new boolean[]{false};
  QEntry<T> e=root.update(null,oldKey,newKey,maxNodeSize,requiresReinsert,0,MAX_DEPTH);
  if (e == null) {
    if (DEBUG) {
      System.err.println(""String_Node_Str"" + Arrays.toString(oldKey) + ""String_Node_Str""+ Arrays.toString(newKey));
    }
    return null;
  }
  if (requiresReinsert[0]) {
    if (DEBUG) {
      System.err.println(""String_Node_Str"" + Arrays.toString(oldKey) + ""String_Node_Str""+ Arrays.toString(newKey));
    }
    ensureCoverage(e);
    Object r=root;
    int depth=0;
    while (r instanceof QNode) {
      r=((QNode<T>)r).tryPut(e,maxNodeSize,depth++ > MAX_DEPTH);
    }
  }
  return e.value();
}",0.9226519337016574
35223,"/** 
 * Remove a key.
 * @param key key to remove
 * @return the value associated with the key or 'null' if the key was not found
 */
@Override public T remove(double[] key){
  if (root == null) {
    System.err.println(""String_Node_Str"" + Arrays.toString(key));
    return null;
  }
  QEntry<T> e=root.remove(null,key,maxNodeSize);
  if (e == null) {
    System.err.println(""String_Node_Str"" + Arrays.toString(key));
    return null;
  }
  size--;
  return e.value();
}","/** 
 * Remove a key.
 * @param key key to remove
 * @return the value associated with the key or 'null' if the key was not found
 */
@Override public T remove(double[] key){
  if (root == null) {
    if (DEBUG) {
      System.err.println(""String_Node_Str"" + Arrays.toString(key));
    }
    return null;
  }
  QEntry<T> e=root.remove(null,key,maxNodeSize);
  if (e == null) {
    if (DEBUG) {
      System.err.println(""String_Node_Str"" + Arrays.toString(key));
    }
    return null;
  }
  size--;
  return e.value();
}",0.9494949494949496
35224,"private void initializeRoot(double[] key){
  double lo=Double.MAX_VALUE;
  double hi=-Double.MAX_VALUE;
  for (int d=0; d < dims; d++) {
    lo=lo > key[d] ? key[d] : lo;
    hi=hi < key[d] ? key[d] : hi;
  }
  if (lo == 0 && hi == 0) {
    hi=1.0;
  }
  double maxDistOrigin=Math.abs(hi) > Math.abs(lo) ? hi : lo;
  maxDistOrigin=Math.abs(maxDistOrigin);
  double[] center=new double[dims];
  for (int d=0; d < dims; d++) {
    center[d]=key[d] > 0 ? maxDistOrigin : -maxDistOrigin;
  }
  root=new QNode<>(center,maxDistOrigin);
}","private void initializeRoot(double[] key){
  double lo=Double.MAX_VALUE;
  double hi=-Double.MAX_VALUE;
  for (int d=0; d < dims; d++) {
    lo=lo > key[d] ? key[d] : lo;
    hi=hi < key[d] ? key[d] : hi;
  }
  if (lo == 0 && hi == 0) {
    hi=1.0;
  }
  double maxDistOrigin=Math.abs(hi) > Math.abs(lo) ? hi : lo;
  maxDistOrigin=Math.abs(maxDistOrigin);
  maxDistOrigin*=QUtil.EPS_MUL * QUtil.EPS_MUL;
  double[] center=new double[dims];
  for (int d=0; d < dims; d++) {
    center[d]=key[d] > 0 ? maxDistOrigin : -maxDistOrigin;
  }
  root=new QNode<>(center,maxDistOrigin);
}",0.9567567567567568
35225,"@SuppressWarnings(""String_Node_Str"") QEntry<T> update(QNode<T> parent,double[] keyOld,double[] keyNew,int maxNodeSize,boolean[] requiresReinsert,int currentDepth,int maxDepth){
  if (values == null) {
    int pos=calcSubPosition(keyOld);
    QNode<T> sub=subs[pos];
    if (sub == null) {
      return null;
    }
    QEntry<T> ret=sub.update(this,keyOld,keyNew,maxNodeSize,requiresReinsert,currentDepth + 1,maxDepth);
    if (ret != null && requiresReinsert[0] && QUtil.isPointEnclosed(ret.point(),center,radius)) {
      requiresReinsert[0]=false;
      Object r=this;
      while (r instanceof QNode) {
        r=((QNode<T>)r).tryPut(ret,maxNodeSize,currentDepth++ > maxDepth);
      }
    }
    return ret;
  }
  for (int i=0; i < values.size(); i++) {
    QEntry<T> e=values.get(i);
    if (QUtil.isPointEqual(e.point(),keyOld)) {
      values.remove(i);
      e.setKey(keyNew);
      if (QUtil.isPointEnclosed(keyNew,center,radius)) {
        values.add(e);
        requiresReinsert[0]=false;
      }
 else {
        requiresReinsert[0]=true;
        if (parent != null) {
          parent.checkAndMergeLeafNodes(maxNodeSize);
        }
      }
      return e;
    }
  }
  requiresReinsert[0]=false;
  return null;
}","@SuppressWarnings(""String_Node_Str"") QEntry<T> update(QNode<T> parent,double[] keyOld,double[] keyNew,int maxNodeSize,boolean[] requiresReinsert,int currentDepth,int maxDepth){
  if (values == null) {
    int pos=calcSubPosition(keyOld);
    QNode<T> sub=subs[pos];
    if (sub == null) {
      return null;
    }
    QEntry<T> ret=sub.update(this,keyOld,keyNew,maxNodeSize,requiresReinsert,currentDepth + 1,maxDepth);
    if (ret != null && requiresReinsert[0] && QUtil.isPointEnclosed(ret.point(),center,radius / QUtil.EPS_MUL)) {
      requiresReinsert[0]=false;
      Object r=this;
      while (r instanceof QNode) {
        r=((QNode<T>)r).tryPut(ret,maxNodeSize,currentDepth++ > maxDepth);
      }
    }
    return ret;
  }
  for (int i=0; i < values.size(); i++) {
    QEntry<T> e=values.get(i);
    if (QUtil.isPointEqual(e.point(),keyOld)) {
      values.remove(i);
      e.setKey(keyNew);
      if (QUtil.isPointEnclosed(keyNew,center,radius / QUtil.EPS_MUL)) {
        values.add(e);
        requiresReinsert[0]=false;
      }
 else {
        requiresReinsert[0]=true;
        if (parent != null) {
          parent.checkAndMergeLeafNodes(maxNodeSize);
        }
      }
      return e;
    }
  }
  requiresReinsert[0]=false;
  return null;
}",0.9870759289176092
35226,"@SuppressWarnings(""String_Node_Str"") QREntry<T> update(QRNode<T> parent,double[] keyOldL,double[] keyOldU,double[] keyNewL,double[] keyNewU,int maxNodeSize,boolean[] requiresReinsert,int currentDepth,int maxDepth){
  if (subs != null) {
    int pos=calcSubPositionR(keyOldL,keyOldU);
    if (pos != OVERLAP_WITH_CENTER) {
      QRNode<T> sub=subs[pos];
      if (sub == null) {
        return null;
      }
      QREntry<T> ret=sub.update(this,keyOldL,keyOldU,keyNewL,keyNewU,maxNodeSize,requiresReinsert,currentDepth + 1,maxDepth);
      if (ret != null && requiresReinsert[0] && QUtil.isRectEnclosed(ret.lower(),ret.upper(),center,radius)) {
        requiresReinsert[0]=false;
        Object r=this;
        while (r instanceof QRNode) {
          r=((QRNode<T>)r).tryPut(ret,maxNodeSize,currentDepth++ > maxDepth);
        }
      }
      return ret;
    }
  }
  if (values == null) {
    return null;
  }
  for (int i=0; i < values.size(); i++) {
    QREntry<T> e=values.get(i);
    if (QUtil.isRectEqual(e,keyOldL,keyOldU)) {
      values.remove(i);
      e.setKey(keyNewL,keyNewU);
      if (QUtil.isRectEnclosed(keyNewL,keyNewU,center,radius)) {
        requiresReinsert[0]=false;
        int pos=calcSubPositionR(keyNewL,keyNewU);
        if (pos == OVERLAP_WITH_CENTER) {
          values.add(e);
        }
 else {
          Object r=this;
          while (r instanceof QRNode) {
            r=((QRNode<T>)r).tryPut(e,maxNodeSize,currentDepth++ > maxDepth);
          }
        }
      }
 else {
        requiresReinsert[0]=true;
        if (parent != null) {
          parent.checkAndMergeLeafNodes(maxNodeSize);
        }
      }
      return e;
    }
  }
  requiresReinsert[0]=false;
  return null;
}","@SuppressWarnings(""String_Node_Str"") QREntry<T> update(QRNode<T> parent,double[] keyOldL,double[] keyOldU,double[] keyNewL,double[] keyNewU,int maxNodeSize,boolean[] requiresReinsert,int currentDepth,int maxDepth){
  if (subs != null) {
    int pos=calcSubPositionR(keyOldL,keyOldU);
    if (pos != OVERLAP_WITH_CENTER) {
      QRNode<T> sub=subs[pos];
      if (sub == null) {
        return null;
      }
      QREntry<T> ret=sub.update(this,keyOldL,keyOldU,keyNewL,keyNewU,maxNodeSize,requiresReinsert,currentDepth + 1,maxDepth);
      if (ret != null && requiresReinsert[0] && QUtil.isRectEnclosed(ret.lower(),ret.upper(),center,radius / QUtil.EPS_MUL)) {
        requiresReinsert[0]=false;
        Object r=this;
        while (r instanceof QRNode) {
          r=((QRNode<T>)r).tryPut(ret,maxNodeSize,currentDepth++ > maxDepth);
        }
      }
      return ret;
    }
  }
  if (values == null) {
    return null;
  }
  for (int i=0; i < values.size(); i++) {
    QREntry<T> e=values.get(i);
    if (QUtil.isRectEqual(e,keyOldL,keyOldU)) {
      values.remove(i);
      e.setKey(keyNewL,keyNewU);
      if (QUtil.isRectEnclosed(keyNewL,keyNewU,center,radius / QUtil.EPS_MUL)) {
        requiresReinsert[0]=false;
        int pos=calcSubPositionR(keyNewL,keyNewU);
        if (pos == OVERLAP_WITH_CENTER) {
          values.add(e);
        }
 else {
          Object r=this;
          while (r instanceof QRNode) {
            r=((QRNode<T>)r).tryPut(e,maxNodeSize,currentDepth++ > maxDepth);
          }
        }
      }
 else {
        requiresReinsert[0]=true;
        if (parent != null) {
          parent.checkAndMergeLeafNodes(maxNodeSize);
        }
      }
      return e;
    }
  }
  requiresReinsert[0]=false;
  return null;
}",0.9907407407407408
35227,"private QRNode<T> createSubForEntry(QREntry<T> e){
  double[] centerSub=new double[center.length];
  double[] pMin=e.lower();
  double radiusSub=radius / 2.0;
  for (int d=0; d < center.length; d++) {
    if (pMin[d] >= center[d]) {
      centerSub[d]=center[d] + radiusSub;
    }
 else {
      centerSub[d]=center[d] - radiusSub;
    }
  }
  return new QRNode<>(centerSub,radiusSub);
}","private QRNode<T> createSubForEntry(QREntry<T> e){
  double[] centerSub=new double[center.length];
  double[] pMin=e.lower();
  double radiusSub=radius / 2.0;
  for (int d=0; d < center.length; d++) {
    if (pMin[d] >= center[d]) {
      centerSub[d]=center[d] + radiusSub;
    }
 else {
      centerSub[d]=center[d] - radiusSub;
    }
  }
  QRNode<T> n=new QRNode<>(centerSub,radiusSub);
  subs.add(n);
  return n;
}",0.9328358208955224
35228,"@SuppressWarnings(""String_Node_Str"") QRNode<T> tryPut(QREntry<T> e,int maxNodeSize,boolean enforceLeaf){
  if (QuadTreeKD0.DEBUG && !e.enclosedBy(center,radius)) {
    throw new IllegalStateException(""String_Node_Str"" + e + ""String_Node_Str""+ Arrays.toString(center)+ ""String_Node_Str""+ radius);
  }
  QRNode<T> sub1=findSubNode(e.lower(),e.upper());
  if (sub1 != null && sub1 != this) {
    return getOrCreateSubR(e);
  }
  if (values == null) {
    values=new ArrayList<>();
  }
  if (values.size() < maxNodeSize || enforceLeaf || e.isExact(values.get(0)) || subs != null) {
    values.add(e);
    return null;
  }
  ArrayList<QREntry<T>> vals=values;
  values=null;
  subs=new ArrayList<>();
  for (int i=0; i < vals.size(); i++) {
    QREntry<T> e2=vals.get(i);
    QRNode<T> sub2=findSubNode(e2.lower(),e2.upper());
    if (sub2 == this) {
      if (values == null) {
        values=new ArrayList<>();
      }
      values.add(e2);
      continue;
    }
    QRNode<T> sub=getOrCreateSubR(e2);
    while (sub != null) {
      sub=(QRNode<T>)sub.tryPut(e2,maxNodeSize,false);
    }
  }
  return getOrCreateSubR(e);
}","@SuppressWarnings(""String_Node_Str"") QRNode<T> tryPut(QREntry<T> e,int maxNodeSize,boolean enforceLeaf){
  if (QuadTreeKD0.DEBUG && !e.enclosedBy(center,radius)) {
    throw new IllegalStateException(""String_Node_Str"" + e + ""String_Node_Str""+ Arrays.toString(center)+ ""String_Node_Str""+ radius);
  }
  QRNode<T> sub1=findSubNode(e.lower(),e.upper());
  if (subs != null && sub1 != this) {
    if (sub1 == null) {
      sub1=createSubForEntry(e);
    }
    return sub1;
  }
  if (values == null) {
    values=new ArrayList<>();
  }
  if (values.size() < maxNodeSize || enforceLeaf || e.isExact(values.get(0)) || subs != null) {
    values.add(e);
    return null;
  }
  ArrayList<QREntry<T>> vals=values;
  vals.add(e);
  values=null;
  subs=new ArrayList<>();
  for (int i=0; i < vals.size(); i++) {
    QREntry<T> e2=vals.get(i);
    QRNode<T> sub=findSubNode(e2.lower(),e2.upper());
    if (sub == this) {
      if (values == null) {
        values=new ArrayList<>();
      }
      values.add(e2);
      continue;
    }
    if (sub == null) {
      sub=createSubForEntry(e2);
    }
    while (sub != null) {
      sub=(QRNode<T>)sub.tryPut(e2,maxNodeSize,false);
    }
  }
  return null;
}",0.8013846819558632
35229,"@SuppressWarnings(""String_Node_Str"") QREntry<T> update(QRNode<T> parent,double[] keyOldL,double[] keyOldU,double[] keyNewL,double[] keyNewU,int maxNodeSize,boolean[] requiresReinsert,int currentDepth,int maxDepth){
  if (subs != null) {
    QRNode<T> sub=findSubNode(keyOldL,keyOldU);
    if (sub != this) {
      if (sub == null) {
        return null;
      }
      QREntry<T> ret=sub.update(this,keyOldL,keyOldU,keyNewL,keyNewU,maxNodeSize,requiresReinsert,currentDepth + 1,maxDepth);
      if (ret != null && requiresReinsert[0] && QUtil.isRectEnclosed(ret.lower(),ret.upper(),center,radius / QUtil.EPS_MUL)) {
        requiresReinsert[0]=false;
        Object r=this;
        while (r instanceof QRNode) {
          r=((QRNode<T>)r).tryPut(ret,maxNodeSize,currentDepth++ > maxDepth);
        }
      }
      return ret;
    }
  }
  if (values == null) {
    return null;
  }
  for (int i=0; i < values.size(); i++) {
    QREntry<T> e=values.get(i);
    if (QUtil.isRectEqual(e,keyOldL,keyOldU)) {
      values.remove(i);
      e.setKey(keyNewL,keyNewU);
      if (QUtil.isRectEnclosed(keyNewL,keyNewU,center,radius / QUtil.EPS_MUL)) {
        requiresReinsert[0]=false;
        QRNode<T> sub=findSubNode(keyNewL,keyNewU);
        if (sub == this) {
          values.add(e);
        }
 else {
          if (false) {
          }
          Object r=this;
          while (r instanceof QRNode) {
            r=((QRNode<T>)r).tryPut(e,maxNodeSize,currentDepth++ > maxDepth);
          }
        }
      }
 else {
        requiresReinsert[0]=true;
        if (parent != null) {
          parent.checkAndMergeLeafNodes(maxNodeSize);
        }
      }
      return e;
    }
  }
  requiresReinsert[0]=false;
  return null;
}","@SuppressWarnings(""String_Node_Str"") QREntry<T> update(QRNode<T> parent,double[] keyOldL,double[] keyOldU,double[] keyNewL,double[] keyNewU,int maxNodeSize,boolean[] requiresReinsert,int currentDepth,int maxDepth){
  if (subs != null) {
    QRNode<T> sub=findSubNode(keyOldL,keyOldU);
    if (sub != this) {
      if (sub == null) {
        return null;
      }
      QREntry<T> ret=sub.update(this,keyOldL,keyOldU,keyNewL,keyNewU,maxNodeSize,requiresReinsert,currentDepth + 1,maxDepth);
      if (ret != null && requiresReinsert[0] && QUtil.isRectEnclosed(ret.lower(),ret.upper(),center,radius)) {
        requiresReinsert[0]=false;
        Object r=this;
        while (r instanceof QRNode) {
          r=((QRNode<T>)r).tryPut(ret,maxNodeSize,currentDepth++ > maxDepth);
        }
      }
      return ret;
    }
  }
  if (values == null) {
    return null;
  }
  for (int i=0; i < values.size(); i++) {
    QREntry<T> e=values.get(i);
    if (QUtil.isRectEqual(e,keyOldL,keyOldU)) {
      values.remove(i);
      e.setKey(keyNewL,keyNewU);
      if (QUtil.isRectEnclosed(keyNewL,keyNewU,center,radius)) {
        requiresReinsert[0]=false;
        QRNode<T> sub=findSubNode(keyNewL,keyNewU);
        if (sub == this) {
          values.add(e);
        }
 else {
          Object r;
          if (sub == null) {
            r=this;
          }
 else {
            r=sub;
            currentDepth++;
          }
          while (r instanceof QRNode) {
            r=((QRNode<T>)r).tryPut(e,maxNodeSize,currentDepth++ > maxDepth);
          }
        }
      }
 else {
        requiresReinsert[0]=true;
        if (parent != null) {
          parent.checkAndMergeLeafNodes(maxNodeSize);
        }
      }
      return e;
    }
  }
  requiresReinsert[0]=false;
  return null;
}",0.9456521739130436
35230,"/** 
 * The subnode position has reverse ordering of the point's dimension ordering. Dimension 0 of a point is the highest ordered bit in the position.
 * @param p point
 * @return subnode position
 */
private QRNode<T> findSubNode(double[] pMin,double[] pMax){
  if (subs != null) {
    for (int i=0; i < subs.size(); i++) {
      QRNode<T> n=subs.get(i);
      if (QUtil.isRectEnclosed(pMin,pMax,n.center,n.radius)) {
        return n;
      }
    }
  }
  if (QUtil.isPointEnclosed(center,pMin,pMax)) {
    return this;
  }
  return null;
}","/** 
 * The subnode position has reverse ordering of the point's dimension ordering. Dimension 0 of a point is the highest ordered bit in the position.
 * @param p point
 * @return subnode position
 */
private QRNode<T> findSubNode(double[] pMin,double[] pMax){
  if (subs != null) {
    for (int i=0; i < subs.size(); i++) {
      QRNode<T> n=subs.get(i);
      if (QUtil.isRectEnclosed(pMin,pMax,n.center,n.radius)) {
        return n;
      }
    }
  }
  for (int i=0; i < center.length; i++) {
    if (pMin[i] < center[i] && pMax[i] >= center[i]) {
      return this;
    }
  }
  return null;
}",0.8491228070175438
35231,"@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) QRNode<T> tryPut(QREntry<T> e,int maxNodeSize,boolean enforceLeaf){
  if (QuadTreeKD.DEBUG && !e.enclosedBy(center,radius)) {
    throw new IllegalStateException(""String_Node_Str"" + e + ""String_Node_Str""+ Arrays.toString(center)+ ""String_Node_Str""+ radius);
  }
  int pos=calcSubPositionR(e.lower(),e.upper());
  if (subs != null && pos != OVERLAP_WITH_CENTER) {
    return getOrCreateSubR(pos);
  }
  if (values == null) {
    values=new ArrayList<>();
  }
  if (values.size() < maxNodeSize || enforceLeaf || e.isExact(values.get(0)) || subs != null) {
    values.add(e);
    return null;
  }
  ArrayList<QREntry<T>> vals=values;
  values=null;
  subs=new QRNode[1 << center.length];
  for (int i=0; i < vals.size(); i++) {
    QREntry<T> e2=vals.get(i);
    int pos2=calcSubPositionR(e2.lower(),e2.upper());
    if (pos2 == OVERLAP_WITH_CENTER) {
      if (values == null) {
        values=new ArrayList<>();
      }
      values.add(e2);
      continue;
    }
    QRNode<T> sub=getOrCreateSubR(pos2);
    while (sub != null) {
      sub=(QRNode<T>)sub.tryPut(e2,maxNodeSize,false);
    }
  }
  if (pos == OVERLAP_WITH_CENTER) {
    if (values == null) {
      values=new ArrayList<>();
    }
    values.add(e);
    return null;
  }
  return getOrCreateSubR(pos);
}","@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) QRNode<T> tryPut(QREntry<T> e,int maxNodeSize,boolean enforceLeaf){
  if (QuadTreeKD.DEBUG && !e.enclosedBy(center,radius)) {
    throw new IllegalStateException(""String_Node_Str"" + e + ""String_Node_Str""+ Arrays.toString(center)+ ""String_Node_Str""+ radius);
  }
  int pos=calcSubPositionR(e.lower(),e.upper());
  if (subs != null && pos != OVERLAP_WITH_CENTER) {
    return getOrCreateSubR(pos);
  }
  if (values == null) {
    values=new ArrayList<>();
  }
  if (values.size() < maxNodeSize || enforceLeaf || e.isExact(values.get(0)) || subs != null) {
    values.add(e);
    return null;
  }
  ArrayList<QREntry<T>> vals=values;
  vals.add(e);
  values=null;
  subs=new QRNode[1 << center.length];
  for (int i=0; i < vals.size(); i++) {
    QREntry<T> e2=vals.get(i);
    int pos2=calcSubPositionR(e2.lower(),e2.upper());
    if (pos2 == OVERLAP_WITH_CENTER) {
      if (values == null) {
        values=new ArrayList<>();
      }
      values.add(e2);
      continue;
    }
    QRNode<T> sub=getOrCreateSubR(pos2);
    while (sub != null) {
      sub=(QRNode<T>)sub.tryPut(e2,maxNodeSize,false);
    }
  }
  return null;
}",0.9214200239329876
35232,"@SuppressWarnings(""String_Node_Str"") QREntry<T> update(QRNode<T> parent,double[] keyOldL,double[] keyOldU,double[] keyNewL,double[] keyNewU,int maxNodeSize,boolean[] requiresReinsert,int currentDepth,int maxDepth){
  if (subs != null) {
    int pos=calcSubPositionR(keyOldL,keyOldU);
    if (pos != OVERLAP_WITH_CENTER) {
      QRNode<T> sub=subs[pos];
      if (sub == null) {
        return null;
      }
      QREntry<T> ret=sub.update(this,keyOldL,keyOldU,keyNewL,keyNewU,maxNodeSize,requiresReinsert,currentDepth + 1,maxDepth);
      if (ret != null && requiresReinsert[0] && QUtil.isRectEnclosed(ret.lower(),ret.upper(),center,radius / QUtil.EPS_MUL)) {
        requiresReinsert[0]=false;
        Object r=this;
        while (r instanceof QRNode) {
          r=((QRNode<T>)r).tryPut(ret,maxNodeSize,currentDepth++ > maxDepth);
        }
      }
      return ret;
    }
  }
  if (values == null) {
    return null;
  }
  for (int i=0; i < values.size(); i++) {
    QREntry<T> e=values.get(i);
    if (QUtil.isRectEqual(e,keyOldL,keyOldU)) {
      values.remove(i);
      e.setKey(keyNewL,keyNewU);
      if (QUtil.isRectEnclosed(keyNewL,keyNewU,center,radius / QUtil.EPS_MUL)) {
        requiresReinsert[0]=false;
        int pos=calcSubPositionR(keyNewL,keyNewU);
        if (pos == OVERLAP_WITH_CENTER) {
          values.add(e);
        }
 else {
          Object r=this;
          while (r instanceof QRNode) {
            r=((QRNode<T>)r).tryPut(e,maxNodeSize,currentDepth++ > maxDepth);
          }
        }
      }
 else {
        requiresReinsert[0]=true;
        if (parent != null) {
          parent.checkAndMergeLeafNodes(maxNodeSize);
        }
      }
      return e;
    }
  }
  requiresReinsert[0]=false;
  return null;
}","@SuppressWarnings(""String_Node_Str"") QREntry<T> update(QRNode<T> parent,double[] keyOldL,double[] keyOldU,double[] keyNewL,double[] keyNewU,int maxNodeSize,boolean[] requiresReinsert,int currentDepth,int maxDepth){
  if (subs != null) {
    int pos=calcSubPositionR(keyOldL,keyOldU);
    if (pos != OVERLAP_WITH_CENTER) {
      QRNode<T> sub=subs[pos];
      if (sub == null) {
        return null;
      }
      QREntry<T> ret=sub.update(this,keyOldL,keyOldU,keyNewL,keyNewU,maxNodeSize,requiresReinsert,currentDepth + 1,maxDepth);
      if (ret != null && requiresReinsert[0] && QUtil.isRectEnclosed(ret.lower(),ret.upper(),center,radius)) {
        requiresReinsert[0]=false;
        Object r=this;
        while (r instanceof QRNode) {
          r=((QRNode<T>)r).tryPut(ret,maxNodeSize,currentDepth++ > maxDepth);
        }
      }
      return ret;
    }
  }
  if (values == null) {
    return null;
  }
  for (int i=0; i < values.size(); i++) {
    QREntry<T> e=values.get(i);
    if (QUtil.isRectEqual(e,keyOldL,keyOldU)) {
      values.remove(i);
      e.setKey(keyNewL,keyNewU);
      if (QUtil.isRectEnclosed(keyNewL,keyNewU,center,radius)) {
        requiresReinsert[0]=false;
        int pos=calcSubPositionR(keyNewL,keyNewU);
        if (pos == OVERLAP_WITH_CENTER) {
          values.add(e);
        }
 else {
          Object r;
          if (subs == null || subs[pos] == null) {
            r=this;
          }
 else {
            r=subs[pos];
            currentDepth++;
          }
          while (r instanceof QRNode) {
            r=((QRNode<T>)r).tryPut(e,maxNodeSize,currentDepth++ > maxDepth);
          }
        }
      }
 else {
        requiresReinsert[0]=true;
        if (parent != null) {
          parent.checkAndMergeLeafNodes(maxNodeSize);
        }
      }
      return e;
    }
  }
  requiresReinsert[0]=false;
  return null;
}",0.9492653174383144
35233,"public static void main(String[] args){
  final int DIM=3;
  final int N=1 * 1000 * 1000;
  TestStats s0=new TestStats(TST.CUBE,INDEX.RSTAR,N,DIM,false,1.0);
  s0.setSeed(0);
  TestRunner test=new TestRunner(s0);
  TestStats s=test.run();
  System.out.println(s);
}","public static void main(String[] args){
  final int DIM=3;
  final int N=1 * 1000 * 1000;
  TestStats s0=new TestStats(TST.CUBE,INDEX.QUAD,N,DIM,true,1.0);
  s0.cfgPointQueryRepeat=1000 * 1000;
  s0.setSeed(0);
  TestRunner test=new TestRunner(s0);
  TestStats s=test.run();
  System.out.println(s);
}",0.5335689045936396
35234,"private boolean checkMatch(long[] keyTemplate,int currentDepth){
  int i;
  boolean loMatch=false;
  boolean hiMatch=false;
  for (i=0; (i + 1) * 64 <= currentDepth; i++) {
    if ((!loMatch && minOrig[i] > keyTemplate[i]) || (!hiMatch && keyTemplate[i] > maxOrig[i])) {
      return false;
    }
    if (minOrig[i] < keyTemplate[i]) {
      loMatch=true;
      if (loMatch && hiMatch) {
        break;
      }
    }
    if (keyTemplate[i] < maxOrig[i]) {
      hiMatch=true;
      if (loMatch && hiMatch) {
        break;
      }
    }
  }
  if ((i + 1) * 64 != currentDepth + 1) {
    int toIgnore=((i + 1) * 64) - currentDepth;
    long mask=(-1L) << toIgnore;
    if (!loMatch && (minOrig[i] & mask) > (keyTemplate[i] & mask)) {
      return false;
    }
    if (!hiMatch && (keyTemplate[i] & mask) > (maxOrig[i] & mask)) {
      return false;
    }
  }
  return true;
}","private boolean checkMatch(long[] keyTemplate,int startBit,int currentDepth){
  int i;
  int iStart=startBit >>> BITS_LOG_64;
  boolean loMatch=iStart == 0 ? false : loEnclosed[iStart - 1];
  boolean hiMatch=iStart == 0 ? false : hiEnclosed[iStart - 1];
  for (i=iStart; i < (currentDepth + 1) >>> BITS_LOG_64; i++) {
    if ((!loMatch && minOrig[i] > keyTemplate[i]) || (!hiMatch && keyTemplate[i] > maxOrig[i])) {
      return false;
    }
    if (minOrig[i] < keyTemplate[i]) {
      loMatch=true;
      if (loMatch && hiMatch) {
        break;
      }
    }
    if (keyTemplate[i] < maxOrig[i]) {
      hiMatch=true;
      if (loMatch && hiMatch) {
        break;
      }
    }
    loEnclosed[i]=loMatch;
    hiEnclosed[i]=hiMatch;
  }
  if (loMatch && hiMatch) {
    for (; i < (currentDepth + 1) >>> BITS_LOG_64; i++) {
      loEnclosed[i]=loMatch;
      hiEnclosed[i]=hiMatch;
    }
    return true;
  }
  int toCheck=(currentDepth + 1) & BITS_MASK_6;
  if (toCheck != 0) {
    long mask=~((-1L) >>> toCheck);
    if (!loMatch && (minOrig[i] & mask) > (keyTemplate[i] & mask)) {
      return false;
    }
    if (!hiMatch && (keyTemplate[i] & mask) > (maxOrig[i] & mask)) {
      return false;
    }
  }
  return true;
}",0.6796763445978106
35235,"@SuppressWarnings(""String_Node_Str"") public QueryIteratorKD(CritBit<V> cb,long[] minOrig,long[] maxOrig,int DIM,int DEPTH){
  this.stack=new Node[DIM * DEPTH];
  this.readHigherNext=new byte[DIM * DEPTH];
  this.keyOrigTemplate=new long[DIM];
  this.minOrig=minOrig;
  this.maxOrig=maxOrig;
  this.DIM=DIM;
  this.DIM_INV_16=1 + ((1 << 16) + 1) / DIM;
  this.DEPTH=DEPTH;
  this.DEPTH_OFFS=64 - DEPTH;
  if (cb.rootKey != null) {
    readPostFixAndSplit(cb.rootKey,0,keyOrigTemplate);
    checkMatchOrigKDFullIntoNextVal(keyOrigTemplate,cb.rootVal);
    return;
  }
  if (cb.root == null) {
    return;
  }
  Node<V> n=cb.root;
  readAndSplitInfix(n,keyOrigTemplate);
  if (!checkMatchOrigKD(keyOrigTemplate,n.posDiff)) {
    return;
  }
  stack[++stackTop]=cb.root;
  findNext();
}","@SuppressWarnings(""String_Node_Str"") public QueryIteratorKD(CritBit<V> cb,long[] minOrig,long[] maxOrig,int DIM,int DEPTH){
  this.stack=new Node[DIM * DEPTH];
  this.readHigherNext=new byte[DIM * DEPTH];
  this.keyOrigTemplate=new long[DIM];
  this.minOrig=minOrig;
  this.maxOrig=maxOrig;
  this.DIM=DIM;
  this.DIM_INV_16=1 + ((1 << 16) + 1) / DIM;
  this.DEPTH=DEPTH;
  this.DEPTH_OFFS=64 - DEPTH;
  if (cb.rootKey != null) {
    readPostFixAndSplit(cb.rootKey,0,keyOrigTemplate);
    checkMatchOrigKDFullIntoNextVal(keyOrigTemplate,cb.rootVal);
    return;
  }
  if (cb.root == null) {
    return;
  }
  Node<V> n=cb.root;
  readAndSplitInfix(n,keyOrigTemplate);
  if (n.posDiff > 0 && !checkMatchOrigKD(keyOrigTemplate,n.posDiff - 1)) {
    return;
  }
  stack[++stackTop]=cb.root;
  findNext();
}",0.9438485804416404
35236,"private boolean checkMatchOrigKD(long[] keyOrigTemplate,int currentDepth){
  int commonDepth=getDepthAcrossDims(currentDepth);
  int openBits=DEPTH - commonDepth;
  long minMask=(-1L) << openBits;
  long maxMask=~minMask;
  int kLimit=currentDepth - DIM * commonDepth;
  if (kLimit == 0) {
    for (int k=0; k < DIM; k++) {
      if (minOrig[k] > (keyOrigTemplate[k] | maxMask) || (keyOrigTemplate[k] & minMask) > maxOrig[k]) {
        return false;
      }
    }
    return true;
  }
  for (int k=kLimit; k < DIM; k++) {
    if (minOrig[k] > (keyOrigTemplate[k] | maxMask) || (keyOrigTemplate[k] & minMask) > maxOrig[k]) {
      return false;
    }
  }
  maxMask>>>=1;
  minMask=~maxMask;
  for (int k=0; k < kLimit; k++) {
    if (minOrig[k] > (keyOrigTemplate[k] | maxMask) || (keyOrigTemplate[k] & minMask) > maxOrig[k]) {
      return false;
    }
  }
  return true;
}","private boolean checkMatchOrigKD(long[] keyOrigTemplate,int currentDepth){
  int commonBits=(currentDepth + 1) / DIM;
  int openBits=DEPTH - commonBits;
  long minMask=(-1L) << openBits;
  long maxMask=~minMask;
  int kLimit=(currentDepth + 1) - DIM * commonBits;
  if (kLimit == 0) {
    for (int k=0; k < DIM; k++) {
      if (minOrig[k] > (keyOrigTemplate[k] | maxMask) || (keyOrigTemplate[k] & minMask) > maxOrig[k]) {
        return false;
      }
    }
    return true;
  }
  for (int k=kLimit; k < DIM; k++) {
    if (minOrig[k] > (keyOrigTemplate[k] | maxMask) || (keyOrigTemplate[k] & minMask) > maxOrig[k]) {
      return false;
    }
  }
  maxMask>>>=1;
  minMask=~maxMask;
  for (int k=0; k < kLimit; k++) {
    if (minOrig[k] > (keyOrigTemplate[k] | maxMask) || (keyOrigTemplate[k] & minMask) > maxOrig[k]) {
      return false;
    }
  }
  return true;
}",0.9546237794371052
35237,"@SuppressWarnings(""String_Node_Str"") public QueryIterator(CritBit<V> cb,long[] minOrig,long[] maxOrig,int DEPTH){
  this.stack=new Node[DEPTH];
  this.readHigherNext=new byte[DEPTH];
  int intArrayLen=(DEPTH + 63) >>> 6;
  this.valIntTemplate=new long[intArrayLen];
  this.minOrig=minOrig;
  this.maxOrig=maxOrig;
  if (cb.rootKey != null) {
    checkMatchFullIntoNextVal(cb.rootKey,cb.rootVal);
    return;
  }
  if (cb.root == null) {
    return;
  }
  Node<V> n=cb.root;
  readInfix(n,valIntTemplate);
  if (!checkMatch(valIntTemplate,n.posDiff)) {
    return;
  }
  stack[++stackTop]=cb.root;
  findNext();
}","@SuppressWarnings(""String_Node_Str"") QueryIterator(CritBit<V> cb,long[] minOrig,long[] maxOrig,int DEPTH){
  this.cb=cb;
  this.stack=new Node[DEPTH];
  this.readHigherNext=new byte[DEPTH];
  int intArrayLen=(DEPTH + 63) >>> 6;
  this.valIntTemplate=new long[intArrayLen];
  this.loEnclosed=new boolean[intArrayLen];
  this.hiEnclosed=new boolean[intArrayLen];
  reset(minOrig,maxOrig);
}",0.564
35238,"private boolean checkMatch(long keyTemplate,int currentDepth){
  int toIgnore=64 - currentDepth;
  long mask=(-1L) << toIgnore;
  long myKey=keyTemplate & mask;
  if ((myKey | (minOrig & mask)) != myKey) {
    return false;
  }
  if ((myKey & (maxOrig & mask)) != myKey) {
    return false;
  }
  return true;
}","private boolean checkMatch(long keyTemplate,int currentDepth){
  int toIgnore=63 - currentDepth;
  return (((keyTemplate | minOrig) & maxOrig) ^ keyTemplate) >>> toIgnore == 0;
}",0.5685071574642127
35239,"@SuppressWarnings(""String_Node_Str"") public QueryIteratorMask(CritBit64<V> cb,long minOrig,long maxOrig,int DEPTH){
  this.stack=new Node[DEPTH];
  this.readHigherNext=new byte[DEPTH];
  this.prefixes=new long[DEPTH];
  this.minOrig=minOrig;
  this.maxOrig=maxOrig;
  if (cb.size == 0) {
    hasNext=false;
    return;
  }
  if (cb.size == 1) {
    hasNext=checkMatchFullIntoNextVal(cb.rootKey,cb.rootVal);
    return;
  }
  Node<V> n=cb.root;
  if (!checkMatch(cb.rootKey,n.posDiff)) {
    hasNext=false;
    return;
  }
  stack[++stackTop]=cb.root;
  prefixes[stackTop]=cb.rootKey;
  findNext();
}","@SuppressWarnings(""String_Node_Str"") public QueryIteratorMask(CritBit64<V> cb,long minOrig,long maxOrig,int DEPTH){
  this.stack=new Node[DEPTH];
  this.readHigherNext=new byte[DEPTH];
  this.prefixes=new long[DEPTH];
  this.minOrig=minOrig;
  this.maxOrig=maxOrig;
  if (cb.size == 0) {
    hasNext=false;
    return;
  }
  if (cb.size == 1) {
    hasNext=checkMatchFullIntoNextVal(cb.rootKey,cb.rootVal);
    return;
  }
  Node<V> n=cb.root;
  if (!checkMatch(cb.rootKey,n.posDiff - 1)) {
    hasNext=false;
    return;
  }
  stack[++stackTop]=cb.root;
  prefixes[stackTop]=cb.rootKey;
  findNext();
}",0.9966722129783694
35240,"/** 
 * Full comparison on the parameter. Assigns the parameter to 'nextVal' if comparison fits.
 * @param keyTemplate
 * @return Whether we have a match or not
 */
private boolean checkMatchFullIntoNextVal(long keyTemplate,V value){
  if ((keyTemplate | minOrig) != keyTemplate) {
    return false;
  }
  if ((keyTemplate & maxOrig) != keyTemplate) {
    return false;
  }
  nextValue=value;
  nextKey=keyTemplate;
  return true;
}","/** 
 * Full comparison on the parameter. Assigns the parameter to 'nextVal' if comparison fits.
 * @param keyTemplate
 * @return Whether we have a match or not
 */
private boolean checkMatchFullIntoNextVal(long keyTemplate,V value){
  if (((keyTemplate | minOrig) & maxOrig) != keyTemplate) {
    return false;
  }
  nextValue=value;
  nextKey=keyTemplate;
  return true;
}",0.8982630272952854
35241,"@SuppressWarnings(""String_Node_Str"") public QueryIterator(CritBit64<V> cb,long minOrig,long maxOrig,int DEPTH){
  this.stack=new Node[DEPTH];
  this.readHigherNext=new byte[DEPTH];
  this.prefixes=new long[DEPTH];
  this.minOrig=minOrig;
  this.maxOrig=maxOrig;
  if (cb.size == 0) {
    hasNext=false;
    return;
  }
  if (cb.size == 1) {
    hasNext=checkMatchFullIntoNextVal(cb.rootKey,cb.rootVal);
    return;
  }
  Node<V> n=cb.root;
  if (!checkMatch(cb.rootKey,n.posDiff)) {
    hasNext=false;
    return;
  }
  stack[++stackTop]=cb.root;
  prefixes[stackTop]=cb.rootKey;
  findNext();
}","@SuppressWarnings(""String_Node_Str"") public QueryIterator(CritBit64<V> cb,long minOrig,long maxOrig,int DEPTH){
  this.stack=new Node[DEPTH];
  this.readHigherNext=new byte[DEPTH];
  this.prefixes=new long[DEPTH];
  this.minOrig=minOrig;
  this.maxOrig=maxOrig;
  if (cb.size == 0) {
    hasNext=false;
    return;
  }
  if (cb.size == 1) {
    hasNext=checkMatchFullIntoNextVal(cb.rootKey,cb.rootVal);
    return;
  }
  Node<V> n=cb.root;
  if (!checkMatch(cb.rootKey,n.posDiff - 1)) {
    hasNext=false;
    return;
  }
  stack[++stackTop]=cb.root;
  prefixes[stackTop]=cb.rootKey;
  findNext();
}",0.9966499162479062
35242,"private boolean checkMatch(long keyTemplate,int currentDepth){
  int toIgnore=64 - currentDepth;
  long mask=(-1L) << toIgnore;
  long myKey=keyTemplate & mask;
  if ((myKey | (minOrig & mask)) != myKey) {
    return false;
  }
  if ((myKey & (maxOrig & mask)) != myKey) {
    return false;
  }
  return true;
}","private boolean checkMatch(long keyTemplate,int currentDepth){
  int toIgnore=63 - currentDepth;
  return (((keyTemplate | minOrig) & maxOrig) ^ keyTemplate) >>> toIgnore == 0;
}",0.5685071574642127
35243,"@SuppressWarnings(""String_Node_Str"") public QueryIteratorMask(CritBit64COW<V> cb,long minOrig,long maxOrig,int DEPTH){
  this.stack=new Node[DEPTH];
  this.readHigherNext=new byte[DEPTH];
  this.prefixes=new long[DEPTH];
  this.minOrig=minOrig;
  this.maxOrig=maxOrig;
  AtomicInfo<V> info=cb.info;
  if (info.size == 0) {
    hasNext=false;
    return;
  }
  if (info.size == 1) {
    hasNext=checkMatchFullIntoNextVal(info.rootKey,info.rootVal);
    return;
  }
  Node<V> n=info.root;
  if (!checkMatch(info.rootKey,n.posDiff)) {
    return;
  }
  stack[++stackTop]=info.root;
  prefixes[stackTop]=info.rootKey;
  findNext();
}","@SuppressWarnings(""String_Node_Str"") public QueryIteratorMask(CritBit64COW<V> cb,long minOrig,long maxOrig,int DEPTH){
  this.stack=new Node[DEPTH];
  this.readHigherNext=new byte[DEPTH];
  this.prefixes=new long[DEPTH];
  this.minOrig=minOrig;
  this.maxOrig=maxOrig;
  AtomicInfo<V> info=cb.info;
  if (info.size == 0) {
    hasNext=false;
    return;
  }
  if (info.size == 1) {
    hasNext=checkMatchFullIntoNextVal(info.rootKey,info.rootVal);
    return;
  }
  Node<V> n=info.root;
  if (!checkMatch(info.rootKey,n.posDiff - 1)) {
    return;
  }
  stack[++stackTop]=info.root;
  prefixes[stackTop]=info.rootKey;
  findNext();
}",0.9968304278922344
35244,"/** 
 * Full comparison on the parameter. Assigns the parameter to 'nextVal' if comparison fits.
 * @param keyTemplate
 * @return Whether we have a match or not
 */
private boolean checkMatchFullIntoNextVal(long keyTemplate,V value){
  if ((keyTemplate | minOrig) != keyTemplate) {
    return false;
  }
  if ((keyTemplate & maxOrig) != keyTemplate) {
    return false;
  }
  nextValue=value;
  nextKey=keyTemplate;
  return true;
}","/** 
 * Full comparison on the parameter. Assigns the parameter to 'nextVal' if comparison fits.
 * @param keyTemplate
 * @return Whether we have a match or not
 */
private boolean checkMatchFullIntoNextVal(long keyTemplate,V value){
  if (((keyTemplate | minOrig) & maxOrig) != keyTemplate) {
    return false;
  }
  nextValue=value;
  nextKey=keyTemplate;
  return true;
}",0.8982630272952854
35245,"@SuppressWarnings(""String_Node_Str"") public QueryIterator(CritBit64COW<V> cb,long minOrig,long maxOrig,int DEPTH){
  this.stack=new Node[DEPTH];
  this.readHigherNext=new byte[DEPTH];
  this.prefixes=new long[DEPTH];
  this.minOrig=minOrig;
  this.maxOrig=maxOrig;
  AtomicInfo<V> info=cb.info;
  if (info.size == 0) {
    hasNext=false;
    return;
  }
  if (info.size == 1) {
    hasNext=checkMatchFullIntoNextVal(info.rootKey,info.rootVal);
    return;
  }
  Node<V> n=info.root;
  if (!checkMatch(info.rootKey,n.posDiff)) {
    return;
  }
  stack[++stackTop]=info.root;
  prefixes[stackTop]=info.rootKey;
  findNext();
}","@SuppressWarnings(""String_Node_Str"") public QueryIterator(CritBit64COW<V> cb,long minOrig,long maxOrig,int DEPTH){
  this.stack=new Node[DEPTH];
  this.readHigherNext=new byte[DEPTH];
  this.prefixes=new long[DEPTH];
  this.minOrig=minOrig;
  this.maxOrig=maxOrig;
  AtomicInfo<V> info=cb.info;
  if (info.size == 0) {
    hasNext=false;
    return;
  }
  if (info.size == 1) {
    hasNext=checkMatchFullIntoNextVal(info.rootKey,info.rootVal);
    return;
  }
  Node<V> n=info.root;
  if (!checkMatch(info.rootKey,n.posDiff - 1)) {
    return;
  }
  stack[++stackTop]=info.root;
  prefixes[stackTop]=info.rootKey;
  findNext();
}",0.9968102073365231
35246,"private CritBit64<Integer> newCritBit(){
  return CritBit64.create();
}","private <T>CritBit64<T> newCritBit(){
  return CritBit64.create();
}",0.920863309352518
35247,"@Override public boolean hasNext(){
  return nextValue != null;
}","@Override public boolean hasNext(){
  return nextKey != null;
}",0.953125
35248,"/** 
 * @param n
 * @param infixStart The bit-position of the first infix bits relative to the whole value
 * @param currentPrefix
 */
private static <T>void readInfix(Node<T> n,long[] currentPrefix){
  if (n.infix == null) {
    return;
  }
  int dst=n.posFirstBit >>> 6;
  System.arraycopy(n.infix,0,currentPrefix,dst,n.infix.length);
}","/** 
 * @param n
 * @param infixStart The bit-position of the first infix bits relative to the whole value
 * @param currentPrefix
 */
protected static <T>void readInfix(Node<T> n,long[] currentPrefix){
  if (n.infix == null) {
    return;
  }
  int dst=n.posFirstBit >>> 6;
  System.arraycopy(n.infix,0,currentPrefix,dst,n.infix.length);
}",0.9823008849557522
35249,"/** 
 * Full comparison on the parameter. Assigns the parameter to 'nextVal' if comparison fits.
 * @param keyTemplate
 * @return Whether we have a match or not
 */
private boolean checkMatchFullIntoNextVal(long[] keyTemplate,V value){
  boolean loMatch=false;
  boolean hiMatch=false;
  for (int i=0; i < keyTemplate.length; i++) {
    if ((!loMatch && minOrig[i] > keyTemplate[i]) || (!hiMatch && keyTemplate[i] > maxOrig[i])) {
      return false;
    }
    if (minOrig[i] < keyTemplate[i]) {
      loMatch=true;
      if (loMatch && hiMatch) {
        break;
      }
    }
    if (keyTemplate[i] < maxOrig[i]) {
      hiMatch=true;
      if (loMatch && hiMatch) {
        break;
      }
    }
  }
  nextValue=value;
  nextKey=CritBit.clone(keyTemplate);
  return true;
}","/** 
 * Full comparison on the parameter. Assigns the parameter to 'nextVal' if comparison fits.
 * @param keyTemplate
 * @return Whether we have a match or not
 */
private boolean checkMatchFullIntoNextVal(long[] keyTemplate,V value){
  boolean loMatch=false;
  boolean hiMatch=false;
  for (int i=0; i < keyTemplate.length; i++) {
    if ((!loMatch && minOrig[i] > keyTemplate[i]) || (!hiMatch && keyTemplate[i] > maxOrig[i])) {
      return false;
    }
    if (i >= minOrig.length || i >= keyTemplate.length) {
      System.out.print(""String_Node_Str"");
    }
    if (minOrig[i] < keyTemplate[i]) {
      loMatch=true;
      if (loMatch && hiMatch) {
        break;
      }
    }
    if (keyTemplate[i] < maxOrig[i]) {
      hiMatch=true;
      if (loMatch && hiMatch) {
        break;
      }
    }
  }
  nextValue=value;
  nextKey=CritBit.clone(keyTemplate);
  return true;
}",0.9353474320241691
35250,"private void findNext(){
  while (stackTop >= 0) {
    Node<V> n=stack[stackTop];
    if (readHigherNext[stackTop] == READ_LOWER) {
      readHigherNext[stackTop]=READ_UPPER;
      long valTemp=BitTools.set0(prefixes[stackTop],n.posDiff);
      if (checkMatch(valTemp,n.posDiff)) {
        if (n.lo == null) {
          if (checkMatchFullIntoNextVal(n.loPost,n.loVal)) {
            return;
          }
        }
 else {
          stack[++stackTop]=n.lo;
          prefixes[stackTop]=n.loPost;
          readHigherNext[stackTop]=READ_LOWER;
          continue;
        }
      }
    }
    if (readHigherNext[stackTop] == READ_UPPER) {
      readHigherNext[stackTop]=RETURN_TO_PARENT;
      long valTemp=BitTools.set1(prefixes[stackTop],n.posDiff);
      if (checkMatch(valTemp,n.posDiff)) {
        if (n.hi == null) {
          if (checkMatchFullIntoNextVal(n.hiPost,n.hiVal)) {
            --stackTop;
            return;
          }
        }
 else {
          stack[++stackTop]=n.hi;
          prefixes[stackTop]=n.hiPost;
          readHigherNext[stackTop]=READ_LOWER;
          continue;
        }
      }
    }
    --stackTop;
  }
  nextValue=null;
  nextKey=0;
}","private void findNext(){
  while (stackTop >= 0) {
    Node<V> n=stack[stackTop];
    if (readHigherNext[stackTop] == READ_LOWER) {
      readHigherNext[stackTop]=READ_UPPER;
      long valTemp=BitTools.set0(prefixes[stackTop],n.posDiff);
      if (checkMatch(valTemp,n.posDiff)) {
        if (n.lo == null) {
          if (checkMatchFullIntoNextVal(n.loPost,n.loVal)) {
            return;
          }
        }
 else {
          stack[++stackTop]=n.lo;
          prefixes[stackTop]=n.loPost;
          readHigherNext[stackTop]=READ_LOWER;
          continue;
        }
      }
    }
    if (readHigherNext[stackTop] == READ_UPPER) {
      readHigherNext[stackTop]=RETURN_TO_PARENT;
      long valTemp=BitTools.set1(prefixes[stackTop],n.posDiff);
      if (checkMatch(valTemp,n.posDiff)) {
        if (n.hi == null) {
          if (checkMatchFullIntoNextVal(n.hiPost,n.hiVal)) {
            --stackTop;
            return;
          }
        }
 else {
          stack[++stackTop]=n.hi;
          prefixes[stackTop]=n.hiPost;
          readHigherNext[stackTop]=READ_LOWER;
          continue;
        }
      }
    }
    --stackTop;
  }
  nextValue=null;
  nextKey=0;
  hasNext=false;
}",0.9927874416631312
35251,"@SuppressWarnings(""String_Node_Str"") public CBIterator(CritBit64<V> cb,int DEPTH){
  this.stack=new Node[DEPTH];
  this.readHigherNext=new byte[DEPTH];
  if (cb.size == 0) {
    return;
  }
  if (cb.size == 1) {
    nextValue=cb.rootVal;
    nextKey=cb.rootKey;
    return;
  }
  stack[++stackTop]=cb.root;
  findNext();
}","@SuppressWarnings(""String_Node_Str"") public CBIterator(CritBit64<V> cb,int DEPTH){
  this.stack=new Node[DEPTH];
  this.readHigherNext=new byte[DEPTH];
  if (cb.size == 0) {
    hasNext=false;
    return;
  }
  if (cb.size == 1) {
    nextValue=cb.rootVal;
    nextKey=cb.rootKey;
    return;
  }
  stack[++stackTop]=cb.root;
  findNext();
}",0.971342383107089
35252,"@SuppressWarnings(""String_Node_Str"") public QueryIteratorMask(CritBit64<V> cb,long minOrig,long maxOrig,int DEPTH){
  this.stack=new Node[DEPTH];
  this.readHigherNext=new byte[DEPTH];
  this.prefixes=new long[DEPTH];
  this.minOrig=minOrig;
  this.maxOrig=maxOrig;
  if (cb.size == 0) {
    return;
  }
  if (cb.size == 1) {
    checkMatchFullIntoNextVal(cb.rootKey,cb.rootVal);
    return;
  }
  Node<V> n=cb.root;
  if (!checkMatch(cb.rootKey,n.posDiff)) {
    return;
  }
  stack[++stackTop]=cb.root;
  prefixes[stackTop]=cb.rootKey;
  findNext();
}","@SuppressWarnings(""String_Node_Str"") public QueryIteratorMask(CritBit64<V> cb,long minOrig,long maxOrig,int DEPTH){
  this.stack=new Node[DEPTH];
  this.readHigherNext=new byte[DEPTH];
  this.prefixes=new long[DEPTH];
  this.minOrig=minOrig;
  this.maxOrig=maxOrig;
  if (cb.size == 0) {
    hasNext=false;
    return;
  }
  if (cb.size == 1) {
    hasNext=checkMatchFullIntoNextVal(cb.rootKey,cb.rootVal);
    return;
  }
  Node<V> n=cb.root;
  if (!checkMatch(cb.rootKey,n.posDiff)) {
    hasNext=false;
    return;
  }
  stack[++stackTop]=cb.root;
  prefixes[stackTop]=cb.rootKey;
  findNext();
}",0.9600694444444444
35253,"@Override public boolean hasNext(){
  return nextValue != null;
}","@Override public boolean hasNext(){
  return hasNext;
}",0.85
35254,"@SuppressWarnings(""String_Node_Str"") public QueryIterator(CritBit64<V> cb,long minOrig,long maxOrig,int DEPTH){
  this.stack=new Node[DEPTH];
  this.readHigherNext=new byte[DEPTH];
  this.prefixes=new long[DEPTH];
  this.minOrig=minOrig;
  this.maxOrig=maxOrig;
  if (cb.size == 0) {
    return;
  }
  if (cb.size == 1) {
    checkMatchFullIntoNextVal(cb.rootKey,cb.rootVal);
    return;
  }
  Node<V> n=cb.root;
  if (!checkMatch(cb.rootKey,n.posDiff)) {
    return;
  }
  stack[++stackTop]=cb.root;
  prefixes[stackTop]=cb.rootKey;
  findNext();
}","@SuppressWarnings(""String_Node_Str"") public QueryIterator(CritBit64<V> cb,long minOrig,long maxOrig,int DEPTH){
  this.stack=new Node[DEPTH];
  this.readHigherNext=new byte[DEPTH];
  this.prefixes=new long[DEPTH];
  this.minOrig=minOrig;
  this.maxOrig=maxOrig;
  if (cb.size == 0) {
    hasNext=false;
    return;
  }
  if (cb.size == 1) {
    hasNext=checkMatchFullIntoNextVal(cb.rootKey,cb.rootVal);
    return;
  }
  Node<V> n=cb.root;
  if (!checkMatch(cb.rootKey,n.posDiff)) {
    hasNext=false;
    return;
  }
  stack[++stackTop]=cb.root;
  prefixes[stackTop]=cb.rootKey;
  findNext();
}",0.9597902097902098
35255,"private void findNext(){
  while (stackTop >= 0) {
    Node<V> n=stack[stackTop];
    if (readHigherNext[stackTop] == READ_LOWER) {
      readHigherNext[stackTop]=READ_UPPER;
      long valTemp=BitTools.set0(prefixes[stackTop],n.posDiff);
      if (checkMatch(valTemp,n.posDiff)) {
        if (n.lo == null) {
          if (checkMatchFullIntoNextVal(n.loPost,n.loVal)) {
            return;
          }
        }
 else {
          stack[++stackTop]=n.lo;
          prefixes[stackTop]=n.loPost;
          readHigherNext[stackTop]=READ_LOWER;
          continue;
        }
      }
    }
    if (readHigherNext[stackTop] == READ_UPPER) {
      readHigherNext[stackTop]=RETURN_TO_PARENT;
      long valTemp=BitTools.set1(prefixes[stackTop],n.posDiff);
      if (checkMatch(valTemp,n.posDiff)) {
        if (n.hi == null) {
          if (checkMatchFullIntoNextVal(n.hiPost,n.hiVal)) {
            --stackTop;
            return;
          }
        }
 else {
          stack[++stackTop]=n.hi;
          prefixes[stackTop]=n.hiPost;
          readHigherNext[stackTop]=READ_LOWER;
          continue;
        }
      }
    }
    --stackTop;
  }
  nextValue=null;
  nextKey=0;
}","private void findNext(){
  while (stackTop >= 0) {
    Node<V> n=stack[stackTop];
    if (readHigherNext[stackTop] == READ_LOWER) {
      readHigherNext[stackTop]=READ_UPPER;
      long valTemp=BitTools.set0(prefixes[stackTop],n.posDiff);
      if (checkMatch(valTemp,n.posDiff)) {
        if (n.lo == null) {
          if (checkMatchFullIntoNextVal(n.loPost,n.loVal)) {
            return;
          }
        }
 else {
          stack[++stackTop]=n.lo;
          prefixes[stackTop]=n.loPost;
          readHigherNext[stackTop]=READ_LOWER;
          continue;
        }
      }
    }
    if (readHigherNext[stackTop] == READ_UPPER) {
      readHigherNext[stackTop]=RETURN_TO_PARENT;
      long valTemp=BitTools.set1(prefixes[stackTop],n.posDiff);
      if (checkMatch(valTemp,n.posDiff)) {
        if (n.hi == null) {
          if (checkMatchFullIntoNextVal(n.hiPost,n.hiVal)) {
            --stackTop;
            return;
          }
        }
 else {
          stack[++stackTop]=n.hi;
          prefixes[stackTop]=n.hiPost;
          readHigherNext[stackTop]=READ_LOWER;
          continue;
        }
      }
    }
    --stackTop;
  }
  nextValue=null;
  nextKey=0;
  hasNext=false;
}",0.9927874416631312
35256,"@SuppressWarnings(""String_Node_Str"") public CBIterator(CritBit64COW<V> cb,int DEPTH){
  this.stack=new Node[DEPTH];
  this.readHigherNext=new byte[DEPTH];
  AtomicInfo<V> info=cb.info;
  if (info.size == 0) {
    return;
  }
  if (info.size == 1) {
    nextValue=info.rootVal;
    nextKey=info.rootKey;
    return;
  }
  stack[++stackTop]=info.root;
  findNext();
}","@SuppressWarnings(""String_Node_Str"") public CBIterator(CritBit64COW<V> cb,int DEPTH){
  this.stack=new Node[DEPTH];
  this.readHigherNext=new byte[DEPTH];
  AtomicInfo<V> info=cb.info;
  if (info.size == 0) {
    hasNext=false;
    return;
  }
  if (info.size == 1) {
    nextValue=info.rootVal;
    nextKey=info.rootKey;
    return;
  }
  stack[++stackTop]=info.root;
  findNext();
}",0.9746328437917224
35257,"@SuppressWarnings(""String_Node_Str"") public QueryIteratorMask(CritBit64COW<V> cb,long minOrig,long maxOrig,int DEPTH){
  this.stack=new Node[DEPTH];
  this.readHigherNext=new byte[DEPTH];
  this.prefixes=new long[DEPTH];
  this.minOrig=minOrig;
  this.maxOrig=maxOrig;
  AtomicInfo<V> info=cb.info;
  if (info.size == 0) {
    return;
  }
  if (info.size == 1) {
    checkMatchFullIntoNextVal(info.rootKey,info.rootVal);
    return;
  }
  Node<V> n=info.root;
  if (!checkMatch(info.rootKey,n.posDiff)) {
    return;
  }
  stack[++stackTop]=info.root;
  prefixes[stackTop]=info.rootKey;
  findNext();
}","@SuppressWarnings(""String_Node_Str"") public QueryIteratorMask(CritBit64COW<V> cb,long minOrig,long maxOrig,int DEPTH){
  this.stack=new Node[DEPTH];
  this.readHigherNext=new byte[DEPTH];
  this.prefixes=new long[DEPTH];
  this.minOrig=minOrig;
  this.maxOrig=maxOrig;
  AtomicInfo<V> info=cb.info;
  if (info.size == 0) {
    hasNext=false;
    return;
  }
  if (info.size == 1) {
    hasNext=checkMatchFullIntoNextVal(info.rootKey,info.rootVal);
    return;
  }
  Node<V> n=info.root;
  if (!checkMatch(info.rootKey,n.posDiff)) {
    return;
  }
  stack[++stackTop]=info.root;
  prefixes[stackTop]=info.rootKey;
  findNext();
}",0.9780666125101544
35258,"@Override public boolean hasNext(){
  return nextValue != null;
}","@Override public boolean hasNext(){
  return hasNext;
}",0.85
35259,"@SuppressWarnings(""String_Node_Str"") public QueryIterator(CritBit64COW<V> cb,long minOrig,long maxOrig,int DEPTH){
  this.stack=new Node[DEPTH];
  this.readHigherNext=new byte[DEPTH];
  this.prefixes=new long[DEPTH];
  this.minOrig=minOrig;
  this.maxOrig=maxOrig;
  AtomicInfo<V> info=cb.info;
  if (info.size == 0) {
    return;
  }
  if (info.size == 1) {
    checkMatchFullIntoNextVal(info.rootKey,info.rootVal);
    return;
  }
  Node<V> n=info.root;
  if (!checkMatch(info.rootKey,n.posDiff)) {
    return;
  }
  stack[++stackTop]=info.root;
  prefixes[stackTop]=info.rootKey;
  findNext();
}","@SuppressWarnings(""String_Node_Str"") public QueryIterator(CritBit64COW<V> cb,long minOrig,long maxOrig,int DEPTH){
  this.stack=new Node[DEPTH];
  this.readHigherNext=new byte[DEPTH];
  this.prefixes=new long[DEPTH];
  this.minOrig=minOrig;
  this.maxOrig=maxOrig;
  AtomicInfo<V> info=cb.info;
  if (info.size == 0) {
    hasNext=false;
    return;
  }
  if (info.size == 1) {
    hasNext=checkMatchFullIntoNextVal(info.rootKey,info.rootVal);
    return;
  }
  Node<V> n=info.root;
  if (!checkMatch(info.rootKey,n.posDiff)) {
    return;
  }
  stack[++stackTop]=info.root;
  prefixes[stackTop]=info.rootKey;
  findNext();
}",0.9779231398201144
35260,"/** 
 * Compares two values.
 * @param v1
 * @param v2
 * @return Position of the differing bit, or -1 if both values are equal
 */
private int compare(long[] v1,long[] v2){
  int pos=0;
  for (int i=0; i < v1.length; i++) {
    if (v1[i] != v2[i]) {
      long x=v1[i] ^ v2[i];
      pos+=Long.numberOfLeadingZeros(x);
      return pos;
    }
    pos+=64;
  }
  return -1;
}","/** 
 * Compares two values.
 * @param v1
 * @param v2
 * @return Position of the differing bit, or -1 if both values are equal
 */
private static int compare(long[] v1,long[] v2){
  int pos=0;
  for (int i=0; i < v1.length; i++) {
    if (v1[i] != v2[i]) {
      long x=v1[i] ^ v2[i];
      pos+=Long.numberOfLeadingZeros(x);
      return pos;
    }
    pos+=64;
  }
  return -1;
}",0.9907529722589168
35261,"/** 
 * @param v
 * @param startPos
 * @return True if the infix matches the value or if no infix is defined
 */
private boolean doesInfixMatch(Node<V> n,long[] v){
  if (n.infix == null) {
    return true;
  }
  int startPos=n.posFirstBit;
  int endPos=n.posDiff - 1;
  int start=startPos >>> 6;
  int end=((endPos + 63) >>> 6) - 1;
  for (int i=start; i <= end; i++) {
    if (v[i] != n.infix[i - start] && i == end) {
      long mask=(-1L) << (63 - endPos);
      if ((v[i] & mask) != (n.infix[i - start] & mask)) {
        return false;
      }
    }
  }
  return true;
}","/** 
 * @param v
 * @param startPos
 * @return True if the infix matches the value or if no infix is defined
 */
private boolean doesInfixMatch(Node<V> n,long[] v){
  if (n.infix == null) {
    return true;
  }
  int startPos=n.posFirstBit;
  int endPos=n.posDiff - 1;
  int start=startPos >>> 6;
  int end=((endPos + 63) >>> 6) - 1;
  for (int i=start; i <= end; i++) {
    if (v[i] != n.infix[i - start] && i == end) {
      long mask=(-1L) << (63 - endPos);
      if ((v[i] & mask) != (n.infix[i - start] & mask)) {
        return false;
      }
      return true;
    }
  }
  return true;
}",0.9837467921300256
35262,"@Test public void test64Bug2(){
  Random R=new Random(1);
  int N=7;
  long[] a=new long[N];
  CritBit<Integer> cb=newCritBit(64);
  for (int i=0; i < N; i++) {
    a[i]=R.nextLong();
    System.out.println(""String_Node_Str"" + a[i] + ""String_Node_Str""+ BitTools.toBinary(a[i],64));
    if (cb.contains(new long[]{a[i]})) {
      for (int j=0; j < i; j++) {
        if (a[j] == a[i]) {
          i--;
          continue;
        }
      }
      fail(""String_Node_Str"" + i);
    }
    assertNull(cb.insert(new long[]{a[i]},i));
    assertEquals(i + 1,cb.size());
    assertTrue(cb.checkTree());
  }
  assertEquals(N,cb.size());
  for (int i=0; i < N; i++) {
    assertTrue(""String_Node_Str"" + i,cb.checkTree());
    assertTrue(""String_Node_Str"" + i,cb.contains(new long[]{a[i]}));
    assertEquals(i,(int)cb.remove(new long[]{a[i]}));
    assertNull(cb.remove(new long[]{a[i]}));
    assertFalse(cb.contains(new long[]{a[i]}));
    assertEquals(N - i - 1,cb.size());
  }
  assertEquals(0,cb.size());
}","@Test public void test64Bug2(){
  Random R=new Random(1);
  int N=7;
  long[] a=new long[N];
  CritBit<Integer> cb=newCritBit(64);
  for (int i=0; i < N; i++) {
    a[i]=R.nextLong();
    if (cb.contains(new long[]{a[i]})) {
      for (int j=0; j < i; j++) {
        if (a[j] == a[i]) {
          i--;
          continue;
        }
      }
      fail(""String_Node_Str"" + i);
    }
    assertNull(cb.insert(new long[]{a[i]},i));
    assertEquals(i + 1,cb.size());
    assertTrue(cb.checkTree());
  }
  assertEquals(N,cb.size());
  for (int i=0; i < N; i++) {
    assertTrue(""String_Node_Str"" + i,cb.checkTree());
    assertTrue(""String_Node_Str"" + i,cb.contains(new long[]{a[i]}));
    assertEquals(i,(int)cb.remove(new long[]{a[i]}));
    assertNull(cb.remove(new long[]{a[i]}));
    assertFalse(cb.contains(new long[]{a[i]}));
    assertEquals(N - i - 1,cb.size());
  }
  assertEquals(0,cb.size());
}",0.9484210526315788
35263,"private void randomInsertCheck(final int N,final int SEED,int DEPTH){
  Random R=new Random(SEED);
  long[] a=new long[N];
  CritBit<Integer> cb=newCritBit(DEPTH);
  for (int i=0; i < N; i++) {
    iFail=i;
    a[i]=((long)R.nextInt()) << (64 - DEPTH);
    if (cb.contains(new long[]{a[i]})) {
      boolean isDuplicate=false;
      for (int j=0; j < i; j++) {
        if (a[j] == a[i]) {
          isDuplicate=true;
          break;
        }
      }
      if (isDuplicate) {
        assertNotNull(cb.insert(new long[]{a[i]},i));
        i--;
        continue;
      }
      fail(""String_Node_Str"" + i);
    }
    assertNull(""String_Node_Str"" + i + ""String_Node_Str""+ a[i],cb.insert(new long[]{a[i]},12345 + i));
    assertEquals(""String_Node_Str"" + i,12345 + i,(int)cb.insert(new long[]{a[i]},i));
    assertEquals(i + 1,cb.size());
    assertTrue(cb.contains(new long[]{a[i]}));
  }
  assertEquals(N,cb.size());
  for (int i=0; i < N; i++) {
    assertTrue(cb.contains(new long[]{a[i]}));
  }
  for (int i=0; i < N; i++) {
    assertTrue(cb.contains(new long[]{a[i]}));
    assertEquals(i,(int)cb.remove(new long[]{a[i]}));
    assertEquals(null,cb.remove(new long[]{a[i]}));
    assertFalse(cb.contains(new long[]{a[i]}));
    assertEquals(N - i - 1,cb.size());
  }
  assertEquals(0,cb.size());
}","private void randomInsertCheck(final int N,final int SEED,int DEPTH){
  Random R=new Random(SEED);
  long[] a=new long[N];
  CritBit<Integer> cb=newCritBit(DEPTH);
  for (int i=0; i < N; i++) {
    iFail=i;
    a[i]=((long)R.nextInt()) << (64 - DEPTH);
    if (cb.contains(new long[]{a[i]})) {
      boolean isDuplicate=false;
      for (int j=0; j < i; j++) {
        if (a[j] == a[i]) {
          isDuplicate=true;
          break;
        }
      }
      if (isDuplicate) {
        i--;
        continue;
      }
      fail(""String_Node_Str"" + i);
    }
    assertNull(""String_Node_Str"" + i + ""String_Node_Str""+ a[i],cb.insert(new long[]{a[i]},12345 + i));
    assertEquals(""String_Node_Str"" + i,12345 + i,(int)cb.insert(new long[]{a[i]},i));
    assertEquals(i + 1,cb.size());
    assertTrue(cb.contains(new long[]{a[i]}));
    assertEquals(""String_Node_Str"" + i,i,(int)cb.get(new long[]{a[i]}));
  }
  assertEquals(N,cb.size());
  for (int i=0; i < N; i++) {
    assertTrue(cb.contains(new long[]{a[i]}));
    if (i != (int)cb.get(new long[]{a[i]})) {
      cb.printTree();
    }
    assertEquals(""String_Node_Str"" + i,i,(int)cb.get(new long[]{a[i]}));
  }
  for (int i=0; i < N; i++) {
    assertTrue(cb.contains(new long[]{a[i]}));
    assertEquals(i,(int)cb.remove(new long[]{a[i]}));
    assertEquals(null,cb.remove(new long[]{a[i]}));
    assertFalse(cb.contains(new long[]{a[i]}));
    assertEquals(N - i - 1,cb.size());
  }
  assertEquals(0,cb.size());
}",0.900939985538684
35264,"private boolean removeNoCheck(long[] val2){
  if (root == null) {
    if (rootVal != null) {
      int posDiff=compare(val2,rootVal);
      if (posDiff == -1) {
        size--;
        rootVal=null;
        return true;
      }
    }
    return false;
  }
  Node n=root;
  int currentDepth=0;
  long[] currentPrefix=new long[val2.length];
  Node parent=null;
  boolean isParentHigh=false;
  while (true) {
    readInfix(n,currentDepth,currentPrefix);
    if (!doesInfixMatch(n,val2,currentDepth)) {
      return false;
    }
    currentDepth=n.posDiff;
    if (BitTools.getBit(val2,currentDepth)) {
      currentDepth++;
      if (n.hi != null) {
        isParentHigh=true;
        parent=n;
        n=n.hi;
        continue;
      }
 else {
        readPostFix(n.hiVal,currentPrefix);
        int posDiff=compare(val2,currentPrefix);
        if (posDiff != -1) {
          return false;
        }
        if (parent == null) {
          rootVal=n.loVal;
          root=n.lo;
        }
 else         if (isParentHigh) {
          parent.hiVal=n.loVal;
          parent.hi=n.lo;
        }
 else {
          parent.loVal=n.loVal;
          parent.lo=n.lo;
        }
        if (parent != null) {
          int start=((n.posDiff - 1) & 0x3F) + 1 - (n.infix != null ? n.infix.length : 0);
          start<<=6;
          parent.infix=extractInfix(val2,start,n.posDiff - 1);
        }
        size--;
        return true;
      }
    }
 else {
      currentDepth++;
      if (n.lo != null) {
        isParentHigh=false;
        parent=n;
        n=n.lo;
        continue;
      }
 else {
        readPostFix(n.loVal,currentPrefix);
        int posDiff=compare(val2,currentPrefix);
        if (posDiff != -1) {
          return false;
        }
        if (parent == null) {
          rootVal=n.hiVal;
          root=n.hi;
        }
 else         if (isParentHigh) {
          parent.hiVal=n.hiVal;
          parent.hi=n.hi;
        }
 else {
          parent.loVal=n.hiVal;
          parent.lo=n.hi;
        }
        if (parent != null) {
          int start=((n.posDiff - 1) & 0x3F) + 1 - (n.infix != null ? n.infix.length : 0);
          start<<=6;
          parent.infix=extractInfix(val2,start,n.posDiff - 1);
        }
        size--;
        return true;
      }
    }
  }
}","private boolean removeNoCheck(long[] val2){
  if (root == null) {
    if (rootVal != null) {
      int posDiff=compare(val2,rootVal);
      if (posDiff == -1) {
        size--;
        rootVal=null;
        return true;
      }
    }
    return false;
  }
  Node n=root;
  int currentDepth=0;
  long[] currentPrefix=new long[val2.length];
  Node parent=null;
  boolean isParentHigh=false;
  while (true) {
    readInfix(n,currentDepth,currentPrefix);
    if (!doesInfixMatch(n,val2,currentDepth)) {
      return false;
    }
    currentDepth=n.posDiff;
    if (BitTools.getBit(val2,currentDepth)) {
      currentDepth++;
      if (n.hi != null) {
        isParentHigh=true;
        parent=n;
        n=n.hi;
        continue;
      }
 else {
        readPostFix(n.hiVal,currentPrefix);
        int posDiff=compare(val2,currentPrefix);
        if (posDiff != -1) {
          return false;
        }
        long[] newPost=null;
        if (n.loVal != null) {
          readPostFix(n.loVal,currentPrefix);
          newPost=currentPrefix;
        }
        updateParentAfterRemove(parent,newPost,n.lo,isParentHigh,currentPrefix,n);
        return true;
      }
    }
 else {
      currentDepth++;
      if (n.lo != null) {
        isParentHigh=false;
        parent=n;
        n=n.lo;
        continue;
      }
 else {
        readPostFix(n.loVal,currentPrefix);
        int posDiff=compare(val2,currentPrefix);
        if (posDiff != -1) {
          return false;
        }
        long[] newPost=null;
        if (n.hiVal != null) {
          readPostFix(n.hiVal,currentPrefix);
          newPost=currentPrefix;
        }
        updateParentAfterRemove(parent,newPost,n.hi,isParentHigh,currentPrefix,n);
        return true;
      }
    }
  }
}",0.6701492537313433
35265,"/** 
 * @param v
 * @param startPos first bit of infix, counting starts with 0 for 1st bit 
 * @param endPos last bit of infix
 * @return The infix PLUS leading bits before the infix that belong in the same 'long'.
 */
private long[] extractInfix(long[] v,int startPos,int endPos){
  if (endPos < startPos) {
    return null;
  }
  int start=startPos >>> 6;
  int end=endPos >>> 6;
  long[] inf=new long[end - start + 1];
  System.arraycopy(v,start,inf,0,inf.length);
  inf[inf.length - 1]&=~((-1L) >>> (1 + (endPos & 0x3F)));
  return inf;
}","/** 
 * @param v
 * @param startPos first bit of infix, counting starts with 0 for 1st bit 
 * @param endPos last bit of infix
 * @return The infix PLUS leading bits before the infix that belong in the same 'long'.
 */
private long[] extractInfix(long[] v,int startPos,int endPos){
  if (endPos < startPos) {
    return null;
  }
  int start=startPos >>> 6;
  int end=endPos >>> 6;
  long[] inf=new long[end - start + 1];
  System.arraycopy(v,start,inf,0,inf.length);
  if ((endPos & 0x3F) < 63) {
    inf[inf.length - 1]&=~((-1L) >>> (1 + (endPos & 0x3F)));
  }
  return inf;
}",0.9678571428571427
35266,"@Test public void testDelete64K(){
  final int K=3;
  for (int r=0; r < 100; r++) {
    Random R=new Random(r);
    int N=10000;
    long[][] aa=new long[N][];
    CritBit cb=newCritBit(64,K);
    for (int i=0; i < N; i++) {
      long[] a=new long[K];
      for (int k=0; k < K; k++) {
        a[k]=BitTools.toSortableLong(R.nextDouble());
      }
      aa[i]=a;
      if (cb.containsKD(a)) {
        for (int j=0; j < i; j++) {
          boolean match=true;
          for (int k=0; k < K; k++) {
            if (aa[j][k] != a[k]) {
              match=false;
              break;
            }
          }
          if (match) {
            i--;
            continue;
          }
        }
        fail(""String_Node_Str"" + r + ""String_Node_Str""+ i);
      }
      assertTrue(cb.insertKD(a));
      assertEquals(i + 1,cb.size());
    }
    assertEquals(N,cb.size());
    for (int i=0; i < N >> 1; i++) {
      long[] a=aa[i];
      if (!cb.containsKD(a)) {
        System.out.println(""String_Node_Str"" + BitTools.toBinary(a,64));
        System.out.println(""String_Node_Str"" + BitTools.toBinary(BitTools.mergeLong(64,a),64));
      }
      cb.removeKD(a);
      a=aa[N - i - 1];
      if (!cb.containsKD(a)) {
        System.out.println(""String_Node_Str"" + BitTools.toBinary(a,64));
        System.out.println(""String_Node_Str"" + BitTools.toBinary(BitTools.mergeLong(64,a),64));
      }
      cb.removeKD(a);
    }
    cb.printTree();
    assertEquals(0,cb.size());
  }
}","@Test public void testDelete64K(){
  final int K=3;
  for (int r=0; r < 100; r++) {
    Random R=new Random(r);
    int N=10000;
    long[][] aa=new long[N][];
    CritBit cb=newCritBit(64,K);
    for (int i=0; i < N; i++) {
      long[] a=new long[K];
      for (int k=0; k < K; k++) {
        a[k]=BitTools.toSortableLong(R.nextDouble());
      }
      aa[i]=a;
      if (cb.containsKD(a)) {
        for (int j=0; j < i; j++) {
          boolean match=true;
          for (int k=0; k < K; k++) {
            if (aa[j][k] != a[k]) {
              match=false;
              break;
            }
          }
          if (match) {
            i--;
            continue;
          }
        }
        fail(""String_Node_Str"" + r + ""String_Node_Str""+ i);
      }
      assertTrue(cb.insertKD(a));
      assertEquals(i + 1,cb.size());
    }
    assertEquals(N,cb.size());
    for (int i=0; i < N >> 1; i++) {
      long[] a=aa[i];
      assertTrue(cb.removeKD(a));
      cb.removeKD(a);
      a=aa[N - i - 1];
      assertTrue(cb.removeKD(a));
    }
    assertEquals(0,cb.size());
  }
}",0.8183241973375098
35267,"Node(int localDepth,int DEPTH,long[] loVal,long[] hiVal,long[] infix,int posDiff){
  this.loVal=loVal;
  this.hiVal=hiVal;
  this.infix=infix;
  this.posDiff=posDiff;
}","Node(int posFirstBit,long[] loVal,long[] hiVal,long[] infix,int posDiff){
  this.loVal=loVal;
  this.hiVal=hiVal;
  this.infix=infix;
  this.posFirstBit=posFirstBit;
  this.posDiff=posDiff;
}",0.8467966573816156
35268,"private Node createNode(long[] v1,long[] v2,int currentDepth){
  int posDiff=compare(v1,v2);
  if (posDiff == -1) {
    return null;
  }
  long[] infix=extractInfix(v1,currentDepth,posDiff - 1);
  long[] p1=createPostFix(v1,posDiff);
  long[] p2=createPostFix(v2,posDiff);
  if (BitTools.getBit(v2,posDiff)) {
    return new Node(0,DEPTH,p1,p2,infix,posDiff);
  }
 else {
    return new Node(0,DEPTH,p2,p1,infix,posDiff);
  }
}","private Node createNode(long[] v1,long[] v2,int currentDepth){
  int posDiff=compare(v1,v2);
  if (posDiff == -1) {
    return null;
  }
  long[] infix=extractInfix(v1,currentDepth,posDiff - 1);
  long[] p1=createPostFix(v1,posDiff);
  long[] p2=createPostFix(v2,posDiff);
  if (BitTools.getBit(v2,posDiff)) {
    return new Node(currentDepth,p1,p2,infix,posDiff);
  }
 else {
    return new Node(currentDepth,p2,p1,infix,posDiff);
  }
}",0.9560185185185184
35269,"private boolean removeNoCheck(long[] val2){
  if (root == null) {
    if (rootVal != null) {
      int posDiff=compare(val2,rootVal);
      if (posDiff == -1) {
        size--;
        rootVal=null;
        return true;
      }
    }
    return false;
  }
  Node n=root;
  int currentDepth=0;
  long[] currentPrefix=new long[val2.length];
  Node parent=null;
  boolean isParentHigh=false;
  while (true) {
    readInfix(n,currentDepth,currentPrefix);
    if (!doesInfixMatch(n,val2,currentDepth)) {
      return false;
    }
    currentDepth=n.posDiff;
    if (BitTools.getBit(val2,currentDepth)) {
      currentDepth++;
      if (n.hi != null) {
        isParentHigh=true;
        parent=n;
        n=n.hi;
        continue;
      }
 else {
        readPostFix(n.hiVal,currentPrefix);
        int posDiff=compare(val2,currentPrefix);
        if (posDiff != -1) {
          return false;
        }
        long[] newPost=null;
        if (n.loVal != null) {
          readPostFix(n.loVal,currentPrefix);
          newPost=currentPrefix;
        }
        updateParentAfterRemove(parent,newPost,n.lo,isParentHigh,currentPrefix,n);
        return true;
      }
    }
 else {
      currentDepth++;
      if (n.lo != null) {
        isParentHigh=false;
        parent=n;
        n=n.lo;
        continue;
      }
 else {
        readPostFix(n.loVal,currentPrefix);
        int posDiff=compare(val2,currentPrefix);
        if (posDiff != -1) {
          return false;
        }
        long[] newPost=null;
        if (n.hiVal != null) {
          readPostFix(n.hiVal,currentPrefix);
          newPost=currentPrefix;
        }
        updateParentAfterRemove(parent,newPost,n.hi,isParentHigh,currentPrefix,n);
        return true;
      }
    }
  }
}","private boolean removeNoCheck(long[] val2){
  if (root == null) {
    if (rootVal != null) {
      int posDiff=compare(val2,rootVal);
      if (posDiff == -1) {
        size--;
        rootVal=null;
        return true;
      }
    }
    return false;
  }
  Node n=root;
  int currentDepth=0;
  long[] currentPrefix=new long[val2.length];
  Node parent=null;
  boolean isParentHigh=false;
  while (true) {
    readInfix(n,currentDepth,currentPrefix);
    if (!doesInfixMatch(n,val2,currentDepth)) {
      return false;
    }
    currentDepth=n.posDiff;
    if (BitTools.getBit(val2,currentDepth)) {
      currentDepth++;
      if (n.hi != null) {
        isParentHigh=true;
        parent=n;
        n=n.hi;
        continue;
      }
 else {
        readPostFix(n.hiVal,currentPrefix);
        int posDiff=compare(val2,currentPrefix);
        if (posDiff != -1) {
          return false;
        }
        long[] newPost=null;
        if (n.loVal != null) {
          readPostFix(n.loVal,currentPrefix);
          newPost=currentPrefix;
        }
        BitTools.setBit(currentPrefix,n.posDiff,false);
        updateParentAfterRemove(parent,newPost,n.lo,isParentHigh,currentPrefix,n);
        return true;
      }
    }
 else {
      currentDepth++;
      if (n.lo != null) {
        isParentHigh=false;
        parent=n;
        n=n.lo;
        continue;
      }
 else {
        readPostFix(n.loVal,currentPrefix);
        int posDiff=compare(val2,currentPrefix);
        if (posDiff != -1) {
          return false;
        }
        long[] newPost=null;
        if (n.hiVal != null) {
          readPostFix(n.hiVal,currentPrefix);
          newPost=currentPrefix;
        }
        BitTools.setBit(currentPrefix,n.posDiff,true);
        updateParentAfterRemove(parent,newPost,n.hi,isParentHigh,currentPrefix,n);
        return true;
      }
    }
  }
}",0.9691752291030268
35270,"private void updateParentAfterRemove(Node parent,long[] newPost,Node newSub,boolean isParentHigh,long[] currentPrefix,Node n){
  if (parent == null) {
    rootVal=newPost;
    root=newSub;
  }
 else   if (isParentHigh) {
    parent.hiVal=createPostFix(currentPrefix,parent.posDiff);
    parent.hi=newSub;
  }
 else {
    parent.loVal=createPostFix(currentPrefix,parent.posDiff);
    parent.lo=newSub;
  }
  if (parent != null) {
    int start=((n.posDiff - 1) & 0x3F) + 1 - (n.infix != null ? n.infix.length : 0);
    start<<=6;
    parent.infix=extractInfix(currentPrefix,start,n.posDiff - 1);
  }
  size--;
}","private void updateParentAfterRemove(Node parent,long[] newPost,Node newSub,boolean isParentHigh,long[] currentPrefix,Node n){
  if (newSub != null) {
    readInfix(newSub,newSub.posFirstBit,currentPrefix);
  }
  if (parent == null) {
    rootVal=newPost;
    root=newSub;
  }
 else   if (isParentHigh) {
    parent.hiVal=newSub != null ? null : createPostFix(currentPrefix,parent.posDiff);
    parent.hi=newSub;
  }
 else {
    parent.loVal=newSub != null ? null : createPostFix(currentPrefix,parent.posDiff);
    parent.lo=newSub;
  }
  if (newSub != null) {
    newSub.posFirstBit=n.posFirstBit;
    newSub.infix=extractInfix(currentPrefix,newSub.posFirstBit,newSub.posDiff - 1);
  }
  size--;
}",0.7522935779816514
35271,"/** 
 * Performs a k-dimensional query.
 * @param min
 * @param max
 * @return
 */
public Iterator<long[]> queryKD(long[] min,long[] max){
  checkDIM(min);
  checkDIM(max);
  return new QueryIteratorKD(this,min,max,DIM,DEPTH);
}","/** 
 * Performs a k-dimensional query.
 * @param min
 * @param max
 * @return Result iterator
 */
public Iterator<long[]> queryKD(long[] min,long[] max){
  checkDIM(min);
  checkDIM(max);
  return new QueryIteratorKD(this,min,max,DIM,DEPTH);
}",0.9661016949152542
35272,"private boolean insertNoCheck(long[] val){
  if (root == null) {
    if (rootVal == null) {
      rootVal=new long[val.length];
      System.arraycopy(val,0,rootVal,0,val.length);
    }
 else {
      Node n2=createNode(val,rootVal,0);
      if (n2 == null) {
        return false;
      }
      root=n2;
      rootVal=null;
    }
    size++;
    return true;
  }
  Node n=root;
  int currentDepth=0;
  long[] currentPrefix=new long[val.length];
  while (true) {
    readInfix(n,currentDepth,currentPrefix);
    if (n.infix != null) {
      int posDiff=compare(val,currentPrefix);
      if (posDiff < n.posDiff && posDiff != -1) {
        long[] subInfix=extractInfix(n.infix,posDiff + 1,n.posDiff - 1);
        Node newSub=new Node(-1,DEPTH,null,null,subInfix,n.posDiff);
        newSub.hi=n.hi;
        newSub.lo=n.lo;
        newSub.hiVal=n.hiVal;
        newSub.loVal=n.loVal;
        if (BitTools.getBit(val,posDiff)) {
          n.hi=null;
          n.hiVal=createPostFix(val,posDiff);
          n.lo=newSub;
          n.loVal=null;
        }
 else {
          n.hi=newSub;
          n.hiVal=null;
          n.lo=null;
          n.loVal=createPostFix(val,posDiff);
        }
        n.infix=extractInfix(currentPrefix,currentDepth,posDiff - 1);
        n.posDiff=posDiff;
        size++;
        return true;
      }
    }
    currentDepth=n.posDiff;
    if (BitTools.getBit(val,currentDepth)) {
      currentDepth++;
      if (n.hi != null) {
        n=n.hi;
        continue;
      }
 else {
        readPostFix(n.hiVal,currentPrefix);
        Node n2=createNode(val,currentPrefix,currentDepth);
        if (n2 == null) {
          return false;
        }
        n.hi=n2;
        n.hiVal=null;
        size++;
        return true;
      }
    }
 else {
      currentDepth++;
      if (n.lo != null) {
        n=n.lo;
        continue;
      }
 else {
        readPostFix(n.loVal,currentPrefix);
        Node n2=createNode(val,currentPrefix,currentDepth);
        if (n2 == null) {
          return false;
        }
        n.lo=n2;
        n.loVal=null;
        size++;
        return true;
      }
    }
  }
}","private boolean insertNoCheck(long[] val){
  if (root == null) {
    if (rootVal == null) {
      rootVal=new long[val.length];
      System.arraycopy(val,0,rootVal,0,val.length);
    }
 else {
      Node n2=createNode(val,rootVal,0);
      if (n2 == null) {
        return false;
      }
      root=n2;
      rootVal=null;
    }
    size++;
    return true;
  }
  Node n=root;
  int currentDepth=0;
  long[] currentPrefix=new long[val.length];
  while (true) {
    readInfix(n,currentDepth,currentPrefix);
    if (n.infix != null) {
      int posDiff=compare(val,currentPrefix);
      if (posDiff < n.posDiff && posDiff != -1) {
        long[] subInfix=extractInfix(currentPrefix,posDiff + 1,n.posDiff - 1);
        Node newSub=new Node(posDiff + 1,null,null,subInfix,n.posDiff);
        newSub.hi=n.hi;
        newSub.lo=n.lo;
        newSub.hiVal=n.hiVal;
        newSub.loVal=n.loVal;
        if (BitTools.getBit(val,posDiff)) {
          n.hi=null;
          n.hiVal=createPostFix(val,posDiff);
          n.lo=newSub;
          n.loVal=null;
        }
 else {
          n.hi=newSub;
          n.hiVal=null;
          n.lo=null;
          n.loVal=createPostFix(val,posDiff);
        }
        n.infix=extractInfix(currentPrefix,currentDepth,posDiff - 1);
        n.posDiff=posDiff;
        size++;
        return true;
      }
    }
    currentDepth=n.posDiff;
    if (BitTools.getBit(val,currentDepth)) {
      currentDepth++;
      if (n.hi != null) {
        n=n.hi;
        continue;
      }
 else {
        readPostFix(n.hiVal,currentPrefix);
        Node n2=createNode(val,currentPrefix,currentDepth);
        if (n2 == null) {
          return false;
        }
        n.hi=n2;
        n.hiVal=null;
        size++;
        return true;
      }
    }
 else {
      currentDepth++;
      if (n.lo != null) {
        n=n.lo;
        continue;
      }
 else {
        readPostFix(n.loVal,currentPrefix);
        Node n2=createNode(val,currentPrefix,currentDepth);
        if (n2 == null) {
          return false;
        }
        n.lo=n2;
        n.loVal=null;
        size++;
        return true;
      }
    }
  }
}",0.9926972909305064
35273,"@Test public void test64_True1D_queries_PositiveNumbers(){
  final int K=1;
  for (int r=0; r < 100; r++) {
    Random R=new Random(r);
    int N=5;
    long[][] aa=new long[N][];
    CritBit cb=newCritBit(64);
    for (int i=0; i < N; i++) {
      long[] a=new long[K];
      for (int k=0; k < K; k++) {
        a[k]=Math.abs(R.nextLong());
      }
      if (cb.contains(a)) {
        i--;
        continue;
      }
      aa[i]=a;
      assertTrue(cb.insert(a));
      assertTrue(cb.contains(a));
    }
    assertEquals(N,cb.size());
    long[] qMin=new long[K];
    long[] qMax=new long[K];
    Iterator<long[]> it=null;
    cb.printTree();
    for (int i=0; i < 10; i++) {
      createQueryAbs(R,qMin,qMax);
      ArrayList<long[]> result=executeQuery(aa,qMin,qMax);
      it=cb.query(qMin,qMax);
      int nResult=0;
      System.out.println(""String_Node_Str"" + BitTools.toBinary(qMin[0],64));
      System.out.println(""String_Node_Str"" + BitTools.toBinary(qMax[0],64));
      while (it.hasNext()) {
        long[] ra=it.next();
        nResult++;
        assertContains(aa,ra);
        System.out.println(""String_Node_Str"" + BitTools.toBinary(ra[0],64));
      }
      assertEquals(""String_Node_Str"" + r + ""String_Node_Str""+ i,result.size(),nResult);
    }
    int n=0;
    Arrays.fill(qMin,Long.MIN_VALUE);
    Arrays.fill(qMax,Long.MAX_VALUE);
    it=cb.query(qMin,qMax);
    while (it.hasNext()) {
      it.next();
      n++;
    }
    assertEquals(N,n);
    for (    long[] a : aa) {
      it=cb.query(a,a);
      assertTrue(it.hasNext());
      long[] r2=it.next();
      assertFalse(it.hasNext());
      assertTrue(isEqual(a,r2));
    }
    Arrays.fill(qMin,Long.MIN_VALUE);
    Arrays.fill(qMax,Long.MAX_VALUE);
    it=cb.query(qMax,qMin);
    assertFalse(it.hasNext());
    for (int i=0; i < N; i++) {
      assertTrue(cb.remove(aa[i]));
    }
    Arrays.fill(qMin,Long.MIN_VALUE);
    Arrays.fill(qMax,Long.MAX_VALUE);
    it=cb.query(qMin,qMax);
    assertFalse(it.hasNext());
  }
}","@Test public void test64_True1D_queries_PositiveNumbers(){
  final int K=1;
  for (int r=0; r < 100; r++) {
    Random R=new Random(r);
    int N=5;
    long[][] aa=new long[N][];
    CritBit cb=newCritBit(64);
    for (int i=0; i < N; i++) {
      long[] a=new long[K];
      for (int k=0; k < K; k++) {
        a[k]=Math.abs(R.nextLong());
      }
      if (cb.contains(a)) {
        i--;
        continue;
      }
      aa[i]=a;
      assertTrue(cb.insert(a));
      assertTrue(cb.contains(a));
    }
    assertEquals(N,cb.size());
    long[] qMin=new long[K];
    long[] qMax=new long[K];
    Iterator<long[]> it=null;
    for (int i=0; i < 10; i++) {
      createQueryAbs(R,qMin,qMax);
      ArrayList<long[]> result=executeQuery(aa,qMin,qMax);
      it=cb.query(qMin,qMax);
      int nResult=0;
      System.out.println(""String_Node_Str"" + BitTools.toBinary(qMin[0],64));
      System.out.println(""String_Node_Str"" + BitTools.toBinary(qMax[0],64));
      while (it.hasNext()) {
        long[] ra=it.next();
        nResult++;
        assertContains(aa,ra);
        System.out.println(""String_Node_Str"" + BitTools.toBinary(ra[0],64));
      }
      assertEquals(""String_Node_Str"" + r + ""String_Node_Str""+ i,result.size(),nResult);
    }
    int n=0;
    Arrays.fill(qMin,Long.MIN_VALUE);
    Arrays.fill(qMax,Long.MAX_VALUE);
    it=cb.query(qMin,qMax);
    while (it.hasNext()) {
      it.next();
      n++;
    }
    assertEquals(N,n);
    for (    long[] a : aa) {
      it=cb.query(a,a);
      assertTrue(it.hasNext());
      long[] r2=it.next();
      assertFalse(it.hasNext());
      assertTrue(isEqual(a,r2));
    }
    Arrays.fill(qMin,Long.MIN_VALUE);
    Arrays.fill(qMax,Long.MAX_VALUE);
    it=cb.query(qMax,qMin);
    assertFalse(it.hasNext());
    for (int i=0; i < N; i++) {
      assertTrue(cb.remove(aa[i]));
    }
    Arrays.fill(qMin,Long.MIN_VALUE);
    Arrays.fill(qMax,Long.MAX_VALUE);
    it=cb.query(qMin,qMax);
    assertFalse(it.hasNext());
  }
}",0.9949672873678912
35274,"@Test public void testInsert64KBug2(){
  final int K=3;
  CritBit cb=newCritBit(64,K);
  long[] A=new long[]{4603080768121727233L,4602303061770585570L,4604809596301821093L};
  long[] B=new long[]{4603082763292946186L,4602305978608368320L,4604812210005530572L};
  cb.insertKD(A);
  assertTrue(cb.containsKD(A));
  cb.insertKD(B);
  assertTrue(cb.containsKD(A));
  assertTrue(cb.containsKD(B));
  cb.printTree();
  cb.removeKD(B);
  cb.printTree();
  assertTrue(cb.containsKD(A));
}","@Test public void testInsert64KBug2(){
  final int K=3;
  CritBit cb=newCritBit(64,K);
  long[] A=new long[]{4603080768121727233L,4602303061770585570L,4604809596301821093L};
  long[] B=new long[]{4603082763292946186L,4602305978608368320L,4604812210005530572L};
  cb.insertKD(A);
  assertTrue(cb.containsKD(A));
  cb.insertKD(B);
  assertTrue(cb.containsKD(A));
  assertTrue(cb.containsKD(B));
  cb.removeKD(B);
  assertTrue(cb.containsKD(A));
}",0.9177489177489178
35275,"@Test public void test64_K_queries_PositiveNumbers(){
  final int K=5;
  final int W=32;
  final int N=1000;
  for (int r=0; r < 100; r++) {
    Random R=new Random(r);
    long[][] aa=new long[N][];
    CritBit cb=newCritBit(W,K);
    for (int i=0; i < N; i++) {
      long[] a=new long[K];
      for (int k=0; k < K; k++) {
        a[k]=Math.abs(R.nextLong()) >>> (64 - W);
      }
      if (cb.containsKD(a)) {
        i--;
        continue;
      }
      aa[i]=a;
      assertTrue(cb.insertKD(a));
      if (!cb.containsKD(a)) {
        cb.printTree();
      }
      assertTrue(cb.containsKD(a));
    }
    assertEquals(N,cb.size());
    long[] qMin=new long[K];
    long[] qMax=new long[K];
    Iterator<long[]> it=null;
    for (int i=0; i < 10; i++) {
      createQuery(R,qMin,qMax);
      ArrayList<long[]> result=executeQuery(aa,qMin,qMax);
      it=cb.queryKD(qMin,qMax);
      int nResult=0;
      while (it.hasNext()) {
        long[] ra=it.next();
        nResult++;
        assertContains(aa,ra);
      }
      assertEquals(""String_Node_Str"" + r + ""String_Node_Str""+ i,result.size(),nResult);
    }
    int n=0;
    Arrays.fill(qMin,Long.MIN_VALUE);
    Arrays.fill(qMax,Long.MAX_VALUE);
    it=cb.queryKD(qMin,qMax);
    while (it.hasNext()) {
      it.next();
      n++;
    }
    assertEquals(aa.length,n);
    for (    long[] a : aa) {
      it=cb.queryKD(a,a);
      assertTrue(it.hasNext());
      long[] r2=it.next();
      assertFalse(it.hasNext());
      assertTrue(isEqual(a,r2));
    }
    Arrays.fill(qMin,Long.MIN_VALUE);
    Arrays.fill(qMax,Long.MAX_VALUE);
    it=cb.queryKD(qMax,qMin);
    assertFalse(it.hasNext());
    for (    long[] a : aa) {
      assertTrue(cb.removeKD(a));
    }
    Arrays.fill(qMin,Long.MIN_VALUE);
    Arrays.fill(qMax,Long.MAX_VALUE);
    it=cb.queryKD(qMin,qMax);
    assertFalse(it.hasNext());
  }
}","@Test public void test64_K_queries_PositiveNumbers(){
  final int K=5;
  final int W=32;
  final int N=1000;
  for (int r=0; r < 100; r++) {
    Random R=new Random(r);
    long[][] aa=new long[N][];
    CritBit cb=newCritBit(W,K);
    for (int i=0; i < N; i++) {
      long[] a=new long[K];
      for (int k=0; k < K; k++) {
        a[k]=Math.abs(R.nextLong()) >>> (64 - W);
      }
      if (cb.containsKD(a)) {
        i--;
        continue;
      }
      aa[i]=a;
      assertTrue(cb.insertKD(a));
      assertTrue(cb.containsKD(a));
    }
    assertEquals(N,cb.size());
    long[] qMin=new long[K];
    long[] qMax=new long[K];
    Iterator<long[]> it=null;
    for (int i=0; i < 10; i++) {
      createQuery(R,qMin,qMax);
      ArrayList<long[]> result=executeQuery(aa,qMin,qMax);
      it=cb.queryKD(qMin,qMax);
      int nResult=0;
      while (it.hasNext()) {
        long[] ra=it.next();
        nResult++;
        assertContains(aa,ra);
      }
      assertEquals(""String_Node_Str"" + r + ""String_Node_Str""+ i,result.size(),nResult);
    }
    int n=0;
    Arrays.fill(qMin,Long.MIN_VALUE);
    Arrays.fill(qMax,Long.MAX_VALUE);
    it=cb.queryKD(qMin,qMax);
    while (it.hasNext()) {
      it.next();
      n++;
    }
    assertEquals(aa.length,n);
    for (    long[] a : aa) {
      it=cb.queryKD(a,a);
      assertTrue(it.hasNext());
      long[] r2=it.next();
      assertFalse(it.hasNext());
      assertTrue(isEqual(a,r2));
    }
    Arrays.fill(qMin,Long.MIN_VALUE);
    Arrays.fill(qMax,Long.MAX_VALUE);
    it=cb.queryKD(qMax,qMin);
    assertFalse(it.hasNext());
    for (    long[] a : aa) {
      assertTrue(cb.removeKD(a));
    }
    Arrays.fill(qMin,Long.MIN_VALUE);
    Arrays.fill(qMax,Long.MAX_VALUE);
    it=cb.queryKD(qMin,qMax);
    assertFalse(it.hasNext());
  }
}",0.9827727645611156
35276,"private boolean checkMatch(long[] valTemplate,int currentDepth){
  int i;
  for (i=0; (i + 1) * DEPTH <= currentDepth; i++) {
    if (minOrig[i] > valTemplate[i] || valTemplate[i] > maxOrig[i]) {
      return false;
    }
  }
  if ((i + 1) * DEPTH != currentDepth + 1) {
    int toIgnore=((i + 1) * DEPTH) - currentDepth;
    if (minOrig[i] >>> toIgnore > valTemplate[i] >>> toIgnore || valTemplate[i] >>> toIgnore > maxOrig[i] >>> toIgnore) {
      return false;
    }
  }
  return true;
}","private boolean checkMatch(long[] valTemplate,int currentDepth){
  int i;
  for (i=0; (i + 1) * DEPTH <= currentDepth; i++) {
    if (minOrig[i] > valTemplate[i] || valTemplate[i] > maxOrig[i]) {
      return false;
    }
  }
  if ((i + 1) * DEPTH != currentDepth + 1) {
    int toIgnore=((i + 1) * DEPTH) - currentDepth;
    long mask=(-1L) << toIgnore;
    if ((minOrig[i] & mask) > (valTemplate[i] & mask) || (valTemplate[i] & mask) > (maxOrig[i] & mask)) {
      return false;
    }
  }
  return true;
}",0.8786359077231695
35277,"@Test public void test64Bug1(){
  Random R=new Random(0);
  int N=6;
  long[] a=new long[N];
  CritBit<Integer> cb=newCritBit(64);
  for (int i=0; i < N; i++) {
    a[i]=R.nextLong();
    System.out.println(""String_Node_Str"" + a[i] + ""String_Node_Str""+ BitTools.toBinary(a[i],64));
    if (cb.contains(new long[]{a[i]})) {
      for (int j=0; j < i; j++) {
        if (a[j] == a[i]) {
          i--;
          continue;
        }
      }
      fail(""String_Node_Str"" + i);
    }
    assertNull(cb.insert(new long[]{a[i]},i));
  }
  assertEquals(N,cb.size());
  for (int i=0; i < N; i++) {
    assertEquals(i,(int)cb.remove(new long[]{a[i]}));
    assertTrue(""String_Node_Str"" + i,cb.checkTree());
    assertNull(cb.remove(new long[]{a[i]}));
    assertTrue(""String_Node_Str"" + i,cb.checkTree());
  }
  assertEquals(0,cb.size());
}","@Test public void test64Bug1(){
  Random R=new Random(0);
  int N=6;
  long[] a=new long[N];
  CritBit<Integer> cb=newCritBit(64);
  for (int i=0; i < N; i++) {
    a[i]=R.nextLong();
    if (cb.contains(new long[]{a[i]})) {
      for (int j=0; j < i; j++) {
        if (a[j] == a[i]) {
          i--;
          continue;
        }
      }
      fail(""String_Node_Str"" + i);
    }
    assertNull(cb.insert(new long[]{a[i]},i));
  }
  assertEquals(N,cb.size());
  for (int i=0; i < N; i++) {
    assertEquals(i,(int)cb.remove(new long[]{a[i]}));
    assertTrue(""String_Node_Str"" + i,cb.checkTree());
    assertNull(cb.remove(new long[]{a[i]}));
    assertTrue(""String_Node_Str"" + i,cb.checkTree());
  }
  assertEquals(0,cb.size());
}",0.3930857874519846
35278,"@Test public void test64_True1D_queries_PositiveNumbers(){
  final int K=1;
  for (int r=0; r < 100; r++) {
    Random R=new Random(r);
    int N=5;
    long[][] aa=new long[N][];
    CritBit<Integer> cb=newCritBit(64);
    for (int i=0; i < N; i++) {
      long[] a=new long[K];
      for (int k=0; k < K; k++) {
        a[k]=Math.abs(R.nextLong());
      }
      if (cb.contains(a)) {
        i--;
        continue;
      }
      aa[i]=a;
      assertNull(cb.insert(a,i));
      assertTrue(cb.contains(a));
    }
    assertEquals(N,cb.size());
    long[] qMin=new long[K];
    long[] qMax=new long[K];
    Iterator<long[]> it=null;
    for (int i=0; i < 10; i++) {
      createQueryAbs(R,qMin,qMax);
      ArrayList<long[]> result=executeQuery(aa,qMin,qMax);
      it=cb.query(qMin,qMax);
      int nResult=0;
      System.out.println(""String_Node_Str"" + BitTools.toBinary(qMin[0],64));
      System.out.println(""String_Node_Str"" + BitTools.toBinary(qMax[0],64));
      while (it.hasNext()) {
        long[] ra=it.next();
        nResult++;
        assertContains(aa,ra);
        System.out.println(""String_Node_Str"" + BitTools.toBinary(ra[0],64));
      }
      assertEquals(""String_Node_Str"" + r + ""String_Node_Str""+ i,result.size(),nResult);
    }
    int n=0;
    Arrays.fill(qMin,Long.MIN_VALUE);
    Arrays.fill(qMax,Long.MAX_VALUE);
    it=cb.query(qMin,qMax);
    while (it.hasNext()) {
      it.next();
      n++;
    }
    assertEquals(N,n);
    for (    long[] a : aa) {
      it=cb.query(a,a);
      assertTrue(it.hasNext());
      long[] r2=it.next();
      assertFalse(it.hasNext());
      assertTrue(isEqual(a,r2));
    }
    Arrays.fill(qMin,Long.MIN_VALUE);
    Arrays.fill(qMax,Long.MAX_VALUE);
    it=cb.query(qMax,qMin);
    assertFalse(it.hasNext());
    for (int i=0; i < N; i++) {
      assertEquals(i,(int)cb.remove(aa[i]));
    }
    Arrays.fill(qMin,Long.MIN_VALUE);
    Arrays.fill(qMax,Long.MAX_VALUE);
    it=cb.query(qMin,qMax);
    assertFalse(it.hasNext());
  }
}","@Test public void test64_True1D_queries_PositiveNumbers(){
  final int K=1;
  for (int r=0; r < 1000; r++) {
    Random R=new Random(r);
    int N=1000;
    long[][] aa=new long[N][];
    CritBit<Integer> cb=newCritBit(64);
    for (int i=0; i < N; i++) {
      long[] a=new long[K];
      for (int k=0; k < K; k++) {
        a[k]=Math.abs(R.nextLong());
      }
      if (cb.contains(a)) {
        i--;
        continue;
      }
      aa[i]=a;
      assertNull(cb.insert(a,i));
      assertTrue(cb.contains(a));
    }
    assertEquals(N,cb.size());
    long[] qMin=new long[K];
    long[] qMax=new long[K];
    Iterator<long[]> it=null;
    for (int i=0; i < 10; i++) {
      createQueryAbs(R,qMin,qMax);
      ArrayList<long[]> result=executeQuery(aa,qMin,qMax);
      it=cb.query(qMin,qMax);
      int nResult=0;
      while (it.hasNext()) {
        long[] ra=it.next();
        nResult++;
        assertContains(aa,ra);
      }
      assertEquals(""String_Node_Str"" + r + ""String_Node_Str""+ i,result.size(),nResult);
    }
    int n=0;
    Arrays.fill(qMin,Long.MIN_VALUE);
    Arrays.fill(qMax,Long.MAX_VALUE);
    it=cb.query(qMin,qMax);
    while (it.hasNext()) {
      it.next();
      n++;
    }
    assertEquals(N,n);
    for (    long[] a : aa) {
      it=cb.query(a,a);
      assertTrue(it.hasNext());
      long[] r2=it.next();
      assertFalse(it.hasNext());
      assertTrue(isEqual(a,r2));
    }
    Arrays.fill(qMin,Long.MIN_VALUE);
    Arrays.fill(qMax,Long.MAX_VALUE);
    it=cb.query(qMax,qMin);
    assertFalse(it.hasNext());
    for (int i=0; i < N; i++) {
      assertEquals(i,(int)cb.remove(aa[i]));
    }
    Arrays.fill(qMin,Long.MIN_VALUE);
    Arrays.fill(qMax,Long.MAX_VALUE);
    it=cb.query(qMin,qMax);
    assertFalse(it.hasNext());
  }
}",0.9370852136979028
35279,"@Override public void userEventTriggered(ChannelHandlerContext ctx,Object evt) throws Exception {
  if (evt instanceof DataFrameSentEvent) {
    DataFrameSentEvent dfse=(DataFrameSentEvent)evt;
    logger.trace(""String_Node_Str"",dfse.getDataFrame());
    if (!hasCurrentTransaction()) {
      NettyZWaveChannelContext zctx=new NettyZWaveChannelContext();
      currentDataFrameTransaction=dfse.getDataFrame().createWrapperTransaction(zctx,dfse.isListeningNode());
      if (currentDataFrameTransaction != null) {
        logger.trace(""String_Node_Str"",dfse.getDataFrame(),currentDataFrameTransaction.getId());
        if (currentDataFrameTransaction.getTimeout() > 0 && handlerContext != null && handlerContext.executor() != null) {
          timeoutFuture=handlerContext.executor().schedule(new TransactionTimeoutHandler(currentDataFrameTransaction.getId(),handlerContext,this),currentDataFrameTransaction.getTimeout(),TimeUnit.MILLISECONDS);
        }
 else {
          logger.warn(""String_Node_Str"");
        }
        zctx.process(ctx);
      }
    }
 else {
      logger.trace(""String_Node_Str"",dfse.getDataFrame());
    }
  }
 else   if (evt instanceof TransactionTimeoutEvent) {
    TransactionTimeoutEvent tte=(TransactionTimeoutEvent)evt;
    if (tte.getId().equals(currentDataFrameTransaction.getId())) {
      logger.trace(""String_Node_Str"");
      NettyZWaveChannelContext zctx=new NettyZWaveChannelContext();
      currentDataFrameTransaction.timeout(zctx);
      zctx.process(ctx);
    }
 else {
      logger.error(""String_Node_Str"",tte.getId());
    }
  }
 else {
    ctx.fireUserEventTriggered(evt);
  }
}","@Override public void userEventTriggered(ChannelHandlerContext ctx,Object evt) throws Exception {
  if (evt instanceof DataFrameSentEvent) {
    DataFrameSentEvent dfse=(DataFrameSentEvent)evt;
    logger.trace(""String_Node_Str"",dfse.getDataFrame());
    if (!hasCurrentTransaction()) {
      NettyZWaveChannelContext zctx=new NettyZWaveChannelContext();
      currentDataFrameTransaction=dfse.getDataFrame().createWrapperTransaction(zctx,dfse.isListeningNode());
      if (currentDataFrameTransaction != null) {
        logger.trace(""String_Node_Str"",dfse.getDataFrame(),currentDataFrameTransaction.getId());
        startTimeoutCallback();
        zctx.process(ctx);
      }
    }
 else     if (currentDataFrameTransaction != null && currentDataFrameTransaction.getStartFrame() == dfse.getDataFrame()) {
      logger.trace(""String_Node_Str"");
      startTimeoutCallback();
    }
 else {
      logger.trace(""String_Node_Str"",dfse.getDataFrame());
    }
  }
 else   if (evt instanceof TransactionTimeoutEvent) {
    TransactionTimeoutEvent tte=(TransactionTimeoutEvent)evt;
    if (tte.getId().equals(currentDataFrameTransaction.getId())) {
      logger.trace(""String_Node_Str"");
      timeoutFuture=null;
      NettyZWaveChannelContext zctx=new NettyZWaveChannelContext();
      currentDataFrameTransaction.timeout(zctx);
      zctx.process(ctx);
    }
 else {
      logger.error(""String_Node_Str"",tte.getId());
    }
  }
 else {
    ctx.fireUserEventTriggered(evt);
  }
}",0.8183581124757595
35280,"/** 
 * Called when data is read from the Z-Wave network.
 * @param ctx the handler context
 * @param msg the message that was read
 */
@Override public void channelRead(ChannelHandlerContext ctx,Object msg){
  if (msg instanceof Frame) {
    Frame frame=(Frame)msg;
    if (hasCurrentTransaction()) {
      String tid=currentDataFrameTransaction.getId();
      logger.trace(""String_Node_Str"",tid,frame);
      NettyZWaveChannelContext zctx=new NettyZWaveChannelContext();
      if (currentDataFrameTransaction.addFrame(zctx,frame)) {
        if (currentDataFrameTransaction.isComplete()) {
          logger.trace(""String_Node_Str"",tid);
          logger.trace(""String_Node_Str"");
          if (timeoutFuture != null) {
            timeoutFuture.cancel(true);
            timeoutFuture=null;
          }
        }
        zctx.process(ctx);
      }
 else {
        logger.trace(""String_Node_Str"");
        ctx.fireChannelRead(msg);
      }
    }
 else     if (msg instanceof AddNodeToNetwork) {
      logger.trace(""String_Node_Str"");
      NettyZWaveChannelContext zctx=new NettyZWaveChannelContext();
      currentDataFrameTransaction=new NodeInclusionTransaction(zctx,(DataFrame)msg);
      zctx.process(ctx);
    }
 else {
      logger.trace(""String_Node_Str"",frame);
      ctx.fireChannelRead(msg);
    }
  }
}","/** 
 * Called when data is read from the Z-Wave network.
 * @param ctx the handler context
 * @param msg the message that was read
 */
@Override public void channelRead(ChannelHandlerContext ctx,Object msg){
  if (msg instanceof Frame) {
    Frame frame=(Frame)msg;
    if (hasCurrentTransaction()) {
      String tid=currentDataFrameTransaction.getId();
      logger.trace(""String_Node_Str"",tid,frame);
      NettyZWaveChannelContext zctx=new NettyZWaveChannelContext();
      if (currentDataFrameTransaction.addFrame(zctx,frame)) {
        if (currentDataFrameTransaction.isComplete()) {
          logger.trace(""String_Node_Str"",tid);
          logger.trace(""String_Node_Str"");
          cancelTimeoutCallback();
        }
        zctx.process(ctx);
      }
 else {
        logger.trace(""String_Node_Str"");
        ctx.fireChannelRead(msg);
      }
    }
 else     if (msg instanceof AddNodeToNetwork) {
      logger.trace(""String_Node_Str"");
      NettyZWaveChannelContext zctx=new NettyZWaveChannelContext();
      currentDataFrameTransaction=new NodeInclusionTransaction(zctx,(DataFrame)msg);
      zctx.process(ctx);
    }
 else {
      logger.trace(""String_Node_Str"",frame);
      ctx.fireChannelRead(msg);
    }
  }
}",0.9511811023622048
35281,"@Override public void userEventTriggered(ChannelHandlerContext ctx,Object evt) throws Exception {
  if (evt instanceof DataFrameSentEvent) {
    DataFrameSentEvent dfse=(DataFrameSentEvent)evt;
    logger.trace(""String_Node_Str"",dfse.getDataFrame());
    if (!hasCurrentTransaction()) {
      NettyZWaveChannelContext zctx=new NettyZWaveChannelContext();
      currentDataFrameTransaction=dfse.getDataFrame().createWrapperTransaction(zctx,dfse.isListeningNode());
      if (currentDataFrameTransaction != null) {
        logger.trace(""String_Node_Str"",dfse.getDataFrame(),currentDataFrameTransaction.getId());
        startTimeoutCallback();
        zctx.process(ctx);
      }
    }
 else     if (currentDataFrameTransaction != null && currentDataFrameTransaction.getStartFrame() == dfse.getDataFrame()) {
      logger.trace(""String_Node_Str"");
      startTimeoutCallback();
    }
 else {
      logger.trace(""String_Node_Str"",dfse.getDataFrame());
    }
  }
 else   if (evt instanceof TransactionTimeoutEvent) {
    TransactionTimeoutEvent tte=(TransactionTimeoutEvent)evt;
    if (tte.getId().equals(currentDataFrameTransaction.getId())) {
      logger.trace(""String_Node_Str"");
      timeoutFuture=null;
      NettyZWaveChannelContext zctx=new NettyZWaveChannelContext();
      currentDataFrameTransaction.timeout(zctx);
      zctx.process(ctx);
    }
 else {
      logger.error(""String_Node_Str"",tte.getId());
    }
  }
 else {
    ctx.fireUserEventTriggered(evt);
  }
}","@Override public void userEventTriggered(ChannelHandlerContext ctx,Object evt) throws Exception {
  if (evt instanceof DataFrameSentEvent) {
    DataFrameSentEvent dfse=(DataFrameSentEvent)evt;
    logger.trace(""String_Node_Str"",dfse.getDataFrame());
    if (!hasCurrentTransaction()) {
      NettyZWaveChannelContext zctx=new NettyZWaveChannelContext();
      currentDataFrameTransaction=dfse.getDataFrame().createWrapperTransaction(zctx,dfse.isListeningNode());
      if (currentDataFrameTransaction != null) {
        logger.trace(""String_Node_Str"",dfse.getDataFrame(),currentDataFrameTransaction.getId());
        startTimeoutCallback();
        zctx.process(ctx);
      }
    }
 else     if (currentDataFrameTransaction != null && currentDataFrameTransaction.getStartFrame() == dfse.getDataFrame()) {
      logger.trace(""String_Node_Str"");
      startTimeoutCallback();
    }
 else {
      logger.trace(""String_Node_Str"",dfse.getDataFrame());
    }
  }
 else   if (evt instanceof TransactionTimeoutEvent) {
    TransactionTimeoutEvent tte=(TransactionTimeoutEvent)evt;
    if (tte.getId().equals(currentDataFrameTransaction.getId())) {
      logger.trace(""String_Node_Str"");
      timeoutFuture=null;
      NettyZWaveChannelContext zctx=new NettyZWaveChannelContext();
      currentDataFrameTransaction.timeout(zctx);
      zctx.process(ctx);
    }
 else {
      logger.error(""String_Node_Str"",tte.getId());
    }
  }
 else   if (evt instanceof TransactionFailedEvent) {
    TransactionFailedEvent tfe=(TransactionFailedEvent)evt;
    if (tfe.getId().equals(currentDataFrameTransaction.getId())) {
      logger.trace(""String_Node_Str"",tfe.getId());
      currentDataFrameTransaction=null;
    }
 else {
      logger.error(""String_Node_Str"",tfe.getId());
    }
  }
 else {
    ctx.fireUserEventTriggered(evt);
  }
}",0.8948967193195626
35282,"@Test public void testSendDataResponseFrameTimeout() throws Exception {
  MockChannelHandlerContext ctx=new MockChannelHandlerContext();
  TransactionInboundHandler h=new TransactionInboundHandler();
  h.userEventTriggered(ctx,new DataFrameSentEvent(new SendData(""String_Node_Str"",(byte)0x01,new byte[]{0x01,0x09,0x00,0x13,0x06,0x02,0x00,0x00,0x25,0x0a,(byte)0xce},(byte)0x05,true),true));
  assertEquals(1,ctx.getUserEvents().size());
  assertEquals(0,ctx.getWriteQueue().size());
  assertTrue(ctx.getUserEvents().get(0) instanceof TransactionStartedEvent);
  h.channelRead(ctx,new ACK());
  assertEquals(1,ctx.getUserEvents().size());
  assertEquals(0,ctx.getWriteQueue().size());
  h.channelRead(ctx,new SendData(Unpooled.wrappedBuffer(new byte[]{0x01,0x04,0x01,0x13,0x01,(byte)0xe8})));
  assertEquals(1,ctx.getUserEvents().size());
  assertEquals(0,ctx.getWriteQueue().size());
  h.channelRead(ctx,new SendData(Unpooled.wrappedBuffer(new byte[]{0x01,0x05,0x00,0x13,0x0a,0x00,(byte)0xe2})));
  assertEquals(1,ctx.getUserEvents().size());
  assertEquals(0,ctx.getWriteQueue().size());
  h.userEventTriggered(ctx,new TransactionTimeoutEvent(h.getCurrentTransaction().getId()));
  assertEquals(1,ctx.getWriteQueue().size());
  assertTrue(ctx.getWriteQueue().get(0) instanceof OutboundDataFrame);
  assertTrue(((OutboundDataFrame)ctx.getWriteQueue().get(0)).getDataFrame() instanceof SendData);
}","@Test public void testSendDataResponseFrameTimeout() throws Exception {
  MockChannelHandlerContext ctx=new MockChannelHandlerContext();
  TransactionInboundHandler h=new TransactionInboundHandler();
  assertEquals(0,ctx.getUserEvents().size());
  SendData sendData=new SendData(""String_Node_Str"",(byte)0x01,new byte[]{0x01,0x09,0x00,0x13,0x06,0x02,0x00,0x00,0x25,0x0a,(byte)0xce},(byte)0x05,true);
  h.userEventTriggered(ctx,new DataFrameSentEvent(sendData,true));
  assertEquals(1,ctx.getUserEvents().size());
  assertEquals(0,ctx.getWriteQueue().size());
  assertTrue(ctx.getUserEvents().get(0) instanceof TransactionStartedEvent);
  h.channelRead(ctx,new ACK());
  assertEquals(1,ctx.getUserEvents().size());
  assertEquals(0,ctx.getWriteQueue().size());
  h.channelRead(ctx,new SendData(Unpooled.wrappedBuffer(new byte[]{0x01,0x04,0x01,0x13,0x01,(byte)0xe8})));
  assertEquals(1,ctx.getUserEvents().size());
  assertEquals(0,ctx.getWriteQueue().size());
  h.channelRead(ctx,new SendData(Unpooled.wrappedBuffer(new byte[]{0x01,0x05,0x00,0x13,0x0a,0x00,(byte)0xe2})));
  assertEquals(1,ctx.getUserEvents().size());
  assertEquals(0,ctx.getWriteQueue().size());
  h.userEventTriggered(ctx,new TransactionTimeoutEvent(h.getCurrentTransaction().getId()));
  assertEquals(1,ctx.getWriteQueue().size());
  assertTrue(ctx.getWriteQueue().get(0) instanceof OutboundDataFrame);
  assertTrue(((OutboundDataFrame)ctx.getWriteQueue().get(0)).getDataFrame() instanceof SendData);
  sendData.incremenentSendCount();
  h.userEventTriggered(ctx,new TransactionTimeoutEvent(h.getCurrentTransaction().getId()));
  assertEquals(2,ctx.getWriteQueue().size());
  assertTrue(ctx.getWriteQueue().get(1) instanceof OutboundDataFrame);
  assertTrue(((OutboundDataFrame)ctx.getWriteQueue().get(1)).getDataFrame() instanceof SendData);
  sendData.incremenentSendCount();
  assertEquals(1,ctx.getUserEvents().size());
  h.userEventTriggered(ctx,new TransactionTimeoutEvent(h.getCurrentTransaction().getId()));
  assertEquals(2,ctx.getWriteQueue().size());
  assertEquals(2,ctx.getUserEvents().size());
  assertTrue(ctx.getUserEvents().get(1) instanceof TransactionFailedEvent);
  assertTrue(h.hasCurrentTransaction());
  h.userEventTriggered(ctx,ctx.getUserEvents().get(1));
  assertFalse(h.hasCurrentTransaction());
}",0.7371273712737128
35283,"/** 
 * Create a MULTI_INSTANCE_GET command.
 * @param nodeId the target node ID
 * @param commandClass the command class being requested
 * @return a DataFrame instance
 */
public DataFrame createMultiInstanceGet(byte nodeId,byte commandClass){
  if (getVersion() > 1) {
    throw new RuntimeException(""String_Node_Str"");
  }
  return createSendDataFrame(""String_Node_Str"",nodeId,new byte[]{MultiInstanceCommandClass.ID,MULTI_INSTANCE_GET,commandClass},true);
}","/** 
 * Create a MULTI_INSTANCE_GET command.
 * @param nodeId the target node ID
 * @param commandClass the command class being requested
 * @return a DataFrame instance
 */
public DataFrame createMultiInstanceGet(byte nodeId,byte commandClass){
  if (getVersion() > 1) {
    throw new ZWaveRuntimeException(""String_Node_Str"");
  }
  return createSendDataFrame(""String_Node_Str"",nodeId,new byte[]{MultiInstanceCommandClass.ID,MULTI_INSTANCE_GET,commandClass},true);
}",0.9946178686759956
35284,"/** 
 * Create a MULTI_CHANNEL_CAPABILITY_GET command.
 * @param nodeId the target node ID
 * @param endPoint the endpoint ID
 * @return a DataFrame instance
 */
public DataFrame createMultiChannelCapabilityGet(byte nodeId,byte endPoint){
  if (getVersion() < 2) {
    throw new RuntimeException(""String_Node_Str"");
  }
  return createSendDataFrame(""String_Node_Str"",nodeId,new byte[]{MultiInstanceCommandClass.ID,MULTI_CHANNEL_CAPABILITY_GET,endPoint},true);
}","/** 
 * Create a MULTI_CHANNEL_CAPABILITY_GET command.
 * @param nodeId the target node ID
 * @param endPoint the endpoint ID
 * @return a DataFrame instance
 */
public DataFrame createMultiChannelCapabilityGet(byte nodeId,byte endPoint){
  if (getVersion() < 2) {
    throw new ZWaveRuntimeException(""String_Node_Str"");
  }
  return createSendDataFrame(""String_Node_Str"",nodeId,new byte[]{MultiInstanceCommandClass.ID,MULTI_CHANNEL_CAPABILITY_GET,endPoint},true);
}",0.9946062567421792
35285,"/** 
 * Create a MULTI_CHANNEL_END_POINT_GET command.
 * @param nodeId the target node ID
 * @return a DataFrame instance
 */
public DataFrame createMultiChannelEndPointGet(byte nodeId){
  if (getVersion() < 2) {
    throw new RuntimeException(""String_Node_Str"");
  }
  return createSendDataFrame(""String_Node_Str"",nodeId,new byte[]{MultiInstanceCommandClass.ID,MULTI_CHANNEL_END_POINT_GET},true);
}","/** 
 * Create a MULTI_CHANNEL_END_POINT_GET command.
 * @param nodeId the target node ID
 * @return a DataFrame instance
 */
public DataFrame createMultiChannelEndPointGet(byte nodeId){
  if (getVersion() < 2) {
    throw new ZWaveRuntimeException(""String_Node_Str"");
  }
  return createSendDataFrame(""String_Node_Str"",nodeId,new byte[]{MultiInstanceCommandClass.ID,MULTI_CHANNEL_END_POINT_GET},true);
}",0.9937733499377336
35286,"public DataFrame createMultiChannelCommandEncapsulation(byte sourceEndpoint,byte destEndpoint,DataFrame command,boolean responseExpected){
  if (getVersion() < 2) {
    throw new RuntimeException(""String_Node_Str"");
  }
  if (command instanceof SendData) {
    SendData sd=(SendData)command;
    byte[] data=sd.getSendData();
    byte[] newData=new byte[data.length + 4];
    newData[0]=MultiInstanceCommandClass.ID;
    newData[1]=MULTI_CHANNEL_CMD_ENCAP;
    newData[2]=sourceEndpoint;
    newData[3]=destEndpoint;
    System.arraycopy(data,0,newData,4,data.length);
    return createSendDataFrame(""String_Node_Str"",sd.getNodeId(),newData,responseExpected);
  }
 else {
    throw new RuntimeException(""String_Node_Str"");
  }
}","public DataFrame createMultiChannelCommandEncapsulation(byte sourceEndpoint,byte destEndpoint,DataFrame command,boolean responseExpected){
  if (getVersion() < 2) {
    throw new ZWaveRuntimeException(""String_Node_Str"");
  }
  if (command instanceof SendData) {
    SendData sd=(SendData)command;
    byte[] data=sd.getSendData();
    byte[] newData=new byte[data.length + 4];
    newData[0]=MultiInstanceCommandClass.ID;
    newData[1]=MULTI_CHANNEL_CMD_ENCAP;
    newData[2]=sourceEndpoint;
    newData[3]=destEndpoint;
    System.arraycopy(data,0,newData,4,data.length);
    return createSendDataFrame(""String_Node_Str"",sd.getNodeId(),newData,responseExpected);
  }
 else {
    throw new ZWaveRuntimeException(""String_Node_Str"");
  }
}",0.9931787175989086
35287,"@Override public DataFrameTransaction createTransaction(ZWaveChannelContext ctx,boolean listeningNode){
  return new SendDataTransaction(ctx,this,listeningNode,isResponseExpected);
}","@Override public DataFrameTransaction createTransaction(ZWaveChannelContext ctx,boolean listeningNode){
  return new SendDataTransaction(ctx,this,listeningNode,responseExpected);
}",0.988950276243094
35288,"@Override public void sendDataFrame(DataFrame d){
  DataFrame ed=micc.createMultiChannelCommandEncapsulation((byte)0,destEndpoint,d,true);
  if (ed == null) {
    ed=d;
  }
  context.sendDataFrame(ed);
}","@Override public void sendDataFrame(DataFrame d){
  boolean responseExpected=(d instanceof SendData) && ((SendData)d).isResponseExpected();
  DataFrame ed=micc.createMultiChannelCommandEncapsulation((byte)0,destEndpoint,d,responseExpected);
  if (ed == null) {
    ed=d;
  }
  context.sendDataFrame(ed);
}",0.5511811023622047
35289,"/** 
 * Stops the controller (i.e. stop processing events).
 */
void stop();","/** 
 * Stops the controller (i.e. stop processing events).
 */
void stop() throws InterruptedException ;",0.8397790055248618
35290,"public void start(){
  if (channel == null) {
    Bootstrap bootstrap=new Bootstrap();
    bootstrap.group(new OioEventLoopGroup());
    bootstrap.channel(RxtxChannel.class);
    bootstrap.handler(new ChannelInitializer<RxtxChannel>(){
      @Override protected void initChannel(      RxtxChannel channel) throws Exception {
        NettyZWaveController.this.channel=channel;
        channel.config().setBaudrate(115200);
        channel.config().setDatabits(RxtxChannelConfig.Databits.DATABITS_8);
        channel.config().setParitybit(RxtxChannelConfig.Paritybit.NONE);
        channel.config().setStopbits(RxtxChannelConfig.Stopbits.STOPBITS_1);
        channel.pipeline().addLast(""String_Node_Str"",new ZWaveFrameDecoder());
        channel.pipeline().addLast(""String_Node_Str"",new ACKInboundHandler());
        channel.pipeline().addLast(""String_Node_Str"",new ZWaveFrameEncoder());
        channel.pipeline().addLast(""String_Node_Str"",new FrameQueueHandler());
        channel.pipeline().addLast(""String_Node_Str"",new TransactionInboundHandler());
        channel.pipeline().addLast(""String_Node_Str"",inboundHandler);
      }
    }
);
    bootstrap.connect(new RxtxDeviceAddress(serialPort)).addListener(new ChannelFutureListener(){
      @Override public void operationComplete(      ChannelFuture future) throws Exception {
        if (future.isSuccess()) {
          sendDataFrame(new Version());
          sendDataFrame(new MemoryGetId());
          sendDataFrame(new InitData());
        }
 else {
          onZWaveConnectionFailure(future.cause());
        }
      }
    }
);
  }
}","@Override public void start(){
  if (channel == null) {
    Bootstrap bootstrap=new Bootstrap();
    eventLoopGroup=new OioEventLoopGroup();
    bootstrap.group(eventLoopGroup);
    bootstrap.channel(RxtxChannel.class);
    bootstrap.handler(new ChannelInitializer<RxtxChannel>(){
      @Override protected void initChannel(      RxtxChannel channel) throws Exception {
        NettyZWaveController.this.channel=channel;
        channel.config().setBaudrate(115200);
        channel.config().setDatabits(RxtxChannelConfig.Databits.DATABITS_8);
        channel.config().setParitybit(RxtxChannelConfig.Paritybit.NONE);
        channel.config().setStopbits(RxtxChannelConfig.Stopbits.STOPBITS_1);
        channel.pipeline().addLast(""String_Node_Str"",new ZWaveFrameDecoder());
        channel.pipeline().addLast(""String_Node_Str"",new ACKInboundHandler());
        channel.pipeline().addLast(""String_Node_Str"",new ZWaveFrameEncoder());
        channel.pipeline().addLast(""String_Node_Str"",new FrameQueueHandler());
        channel.pipeline().addLast(""String_Node_Str"",new TransactionInboundHandler());
        channel.pipeline().addLast(""String_Node_Str"",inboundHandler);
      }
    }
);
    bootstrap.connect(new RxtxDeviceAddress(serialPort)).addListener(new ChannelFutureListener(){
      @Override public void operationComplete(      ChannelFuture future) throws Exception {
        if (future.isSuccess()) {
          sendDataFrame(new Version());
          sendDataFrame(new MemoryGetId());
          sendDataFrame(new InitData());
        }
 else {
          onZWaveConnectionFailure(future.cause());
        }
      }
    }
);
  }
}",0.9761388286334056
35291,"@Override public void stop(){
}","@Override public void stop() throws InterruptedException {
  store.close();
  eventLoopGroup.shutdownGracefully().sync();
}",0.4025974025974026
35292,"/** 
 * Creates a Z-Wave DataFrame from a ByteBuf.
 * @param buf the buffer to process
 * @return a DataFrame instance (or null if a valid one wasn't found)
 */
protected DataFrame createDataFrame(ByteBuf buf){
  if (buf.readableBytes() > 3) {
    byte messageType=buf.getByte(buf.readerIndex() + 3);
switch (messageType) {
case Version.ID:
      return new Version(buf);
case MemoryGetId.ID:
    return new MemoryGetId(buf);
case InitData.ID:
  return new InitData(buf);
case NodeProtocolInfo.ID:
return new NodeProtocolInfo(buf);
case SendData.ID:
return new SendData(buf);
case ApplicationCommand.ID:
return new ApplicationCommand(buf);
case ApplicationUpdate.ID:
return new ApplicationUpdate(buf);
case RequestNodeInfo.ID:
return new RequestNodeInfo(buf);
case GetRoutingInfo.ID:
return new GetRoutingInfo(buf);
case GetSUCNodeId.ID:
return new GetSUCNodeId(buf);
}
}
return null;
}","/** 
 * Creates a Z-Wave DataFrame from a ByteBuf.
 * @param buf the buffer to process
 * @return a DataFrame instance (or null if a valid one wasn't found)
 */
private DataFrame createDataFrame(ByteBuf buf){
  if (buf.readableBytes() > 3) {
    byte messageType=buf.getByte(buf.readerIndex() + 3);
switch (messageType) {
case Version.ID:
      return new Version(buf);
case MemoryGetId.ID:
    return new MemoryGetId(buf);
case InitData.ID:
  return new InitData(buf);
case NodeProtocolInfo.ID:
return new NodeProtocolInfo(buf);
case SendData.ID:
return new SendData(buf);
case ApplicationCommand.ID:
return new ApplicationCommand(buf);
case ApplicationUpdate.ID:
return new ApplicationUpdate(buf);
case RequestNodeInfo.ID:
return new RequestNodeInfo(buf);
case GetRoutingInfo.ID:
return new GetRoutingInfo(buf);
case GetSUCNodeId.ID:
return new GetSUCNodeId(buf);
}
}
return null;
}",0.9932203389830508
35293,"@Override protected void decode(ChannelHandlerContext ctx,ByteBuf in,List<Object> out) throws Exception {
  logger.debug(""String_Node_Str"",ByteUtil.createString(in));
  ByteBuf data;
  if (previousBuf != null) {
    CompositeByteBuf cbuf=Unpooled.compositeBuffer();
    cbuf.addComponent(previousBuf);
    cbuf.addComponent(in);
    cbuf.writerIndex(previousBuf.readableBytes() + in.readableBytes());
    data=cbuf;
    previousBuf=null;
  }
 else {
    data=in;
  }
  while (data.readableBytes() > 0) {
switch (state) {
case WAITING_FOR_DATA_FRAME_START:
      if (!lookForDataFrameStart(data,out)) {
        return;
      }
    this.state=State.READ_DATA_FRAME_LENGTH;
case READ_DATA_FRAME_LENGTH:
  if (data.readableBytes() < 1) {
    return;
  }
currentDataFrameLength=data.getByte(data.readerIndex() + 1);
this.state=State.WAITING_FOR_DATA_FRAME_DATA;
case WAITING_FOR_DATA_FRAME_DATA:
if (data.readableBytes() < currentDataFrameLength + 2) {
logger.trace(""String_Node_Str"");
if (data.readableBytes() > 0) {
logger.trace(""String_Node_Str"");
previousBuf=data;
}
return;
}
currentDataFrame=createDataFrame(data);
this.state=State.READ_DATA_FRAME_CHECKSUM;
case READ_DATA_FRAME_CHECKSUM:
if (data.readableBytes() < 1) {
return;
}
byte checksum=data.readByte();
if (currentDataFrame != null) {
logger.debug(""String_Node_Str"",currentDataFrame);
out.add(currentDataFrame);
}
resetDecoder();
}
}
logger.trace(""String_Node_Str"");
}","@Override protected void decode(ChannelHandlerContext ctx,ByteBuf in,List<Object> out) throws Exception {
  if (logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"",ByteUtil.createString(in));
  }
  ByteBuf data;
  if (previousBuf != null) {
    CompositeByteBuf cbuf=Unpooled.compositeBuffer();
    cbuf.addComponent(previousBuf);
    cbuf.addComponent(in);
    cbuf.writerIndex(previousBuf.readableBytes() + in.readableBytes());
    data=cbuf;
    previousBuf=null;
  }
 else {
    data=in;
  }
  while (data.isReadable()) {
    if (data.readableBytes() == 1 && isSingleByteFrame(data,data.readerIndex())) {
      out.add(createSingleByteFrame(data));
    }
 else {
      boolean foundFrame=false;
      for (int searchStartIx=data.readerIndex(); searchStartIx < data.readerIndex() + data.readableBytes(); searchStartIx++) {
        if (data.getByte(searchStartIx) == DataFrame.START_OF_FRAME) {
          int frameEndIx=scanForFrame(data,searchStartIx);
          if (frameEndIx > 0) {
            if (searchStartIx > data.readerIndex() && isSingleByteFrame(data,searchStartIx - 1)) {
              data.readerIndex(searchStartIx - 1);
              out.add(createSingleByteFrame(data));
            }
 else {
              data.readerIndex(searchStartIx);
            }
            out.add(createDataFrame(data));
            data.readByte();
            foundFrame=true;
          }
        }
      }
      if (!foundFrame) {
        break;
      }
    }
  }
  if (data.readableBytes() > 0) {
    previousBuf=data;
  }
  logger.trace(""String_Node_Str"");
}",0.3850517183850517
35294,"@Test public void testPartialMessage() throws Exception {
  ZWaveFrameDecoder decoder=new ZWaveFrameDecoder();
  List<Object> out=new ArrayList<Object>();
  ByteBuf in=wrappedBuffer(new byte[]{0x06,0x01,0x10,0x01});
  decoder.decode(null,in,out);
  assertEquals(1,in.readerIndex());
  assertEquals(0x01,in.getByte(in.readerIndex()));
  assertEquals(1,out.size());
  in=wrappedBuffer(new byte[]{0x01,0x10,0x01,0x15,0x5A,0x2D,0x57,0x61,0x76,0x65,0x20,0x32,0x2E,0x37,0x38,0x00,0x01,(byte)0x9B});
  decoder.decode(null,in,out);
  assertEquals(2,out.size());
  assertTrue(out.get(0) instanceof ACK);
  assertTrue(out.get(1) instanceof Version);
}","@Test public void testPartialMessage() throws Exception {
  ZWaveFrameDecoder decoder=new ZWaveFrameDecoder();
  List<Object> out=new ArrayList<>();
  ByteBuf in=wrappedBuffer(new byte[]{0x06,0x01,0x10,0x01});
  decoder.decode(null,in,out);
  assertEquals(0,in.readerIndex());
  assertEquals(0,out.size());
  in=wrappedBuffer(new byte[]{0x15,0x5A,0x2D,0x57,0x61,0x76,0x65,0x20,0x32,0x2E,0x37,0x38,0x00,0x01,(byte)0x9B});
  decoder.decode(null,in,out);
  assertEquals(2,out.size());
  assertTrue(out.get(0) instanceof ACK);
  assertTrue(out.get(1) instanceof Version);
}",0.9388429752066116
35295,"public void onDataFrameTransactionComplete(){
  logger.trace(""String_Node_Str"");
  ZWaveDataFrameTransactionInboundHandler transactionHandler=(ZWaveDataFrameTransactionInboundHandler)context.pipeline().get(""String_Node_Str"");
  if (pendingQueue.size() > 0) {
    DataFrame frame=pendingQueue.pop();
    logger.trace(""String_Node_Str"",frame);
    context.writeAndFlush(frame);
    frame.incremenentSendCount();
    transactionHandler.onDataFrameWrite(frame);
  }
 else {
    logger.trace(""String_Node_Str"");
  }
}","public void onDataFrameTransactionComplete(){
  logger.trace(""String_Node_Str"");
  ZWaveDataFrameTransactionInboundHandler transactionHandler=(ZWaveDataFrameTransactionInboundHandler)context.pipeline().get(""String_Node_Str"");
  if (pendingQueue.size() > 0) {
    FrameWrite fw=pendingQueue.pop();
    logger.trace(""String_Node_Str"",fw.frame);
    context.writeAndFlush(fw.frame,fw.promise);
    fw.frame.incremenentSendCount();
    transactionHandler.onDataFrameWrite(fw.frame);
  }
 else {
    logger.trace(""String_Node_Str"");
  }
}",0.6028708133971292
35296,"@Override public void write(ChannelHandlerContext ctx,Object msg,ChannelPromise promise) throws Exception {
  logger.trace(""String_Node_Str"" + msg);
  if (msg instanceof DataFrame) {
    ZWaveDataFrameTransactionInboundHandler transactionHandler=(ZWaveDataFrameTransactionInboundHandler)ctx.pipeline().get(""String_Node_Str"");
    if (transactionHandler != null) {
      DataFrame frame=(DataFrame)msg;
      if (transactionHandler.hasCurrentRequestTransaction()) {
        logger.trace(""String_Node_Str"" + frame + ""String_Node_Str""+ pendingQueue.size());
        pendingQueue.add(frame);
      }
 else {
        logger.trace(""String_Node_Str"",frame);
        ctx.writeAndFlush(msg,promise);
        frame.incremenentSendCount();
        transactionHandler.onDataFrameWrite(frame);
      }
    }
 else {
      logger.error(""String_Node_Str"");
    }
  }
 else {
    ctx.writeAndFlush(msg,promise);
  }
}","@Override public void write(ChannelHandlerContext ctx,Object msg,ChannelPromise promise) throws Exception {
  logger.trace(""String_Node_Str"" + msg);
  if (msg instanceof DataFrame) {
    ZWaveDataFrameTransactionInboundHandler transactionHandler=(ZWaveDataFrameTransactionInboundHandler)ctx.pipeline().get(""String_Node_Str"");
    if (transactionHandler != null) {
      DataFrame frame=(DataFrame)msg;
      if (transactionHandler.hasCurrentRequestTransaction()) {
        logger.trace(""String_Node_Str"" + frame + ""String_Node_Str""+ pendingQueue.size());
        pendingQueue.add(new FrameWrite(frame,promise));
      }
 else {
        logger.trace(""String_Node_Str"",frame);
        ctx.writeAndFlush(msg,promise);
        frame.incremenentSendCount();
        transactionHandler.onDataFrameWrite(frame);
      }
    }
 else {
      logger.error(""String_Node_Str"");
    }
  }
 else {
    ctx.writeAndFlush(msg,promise);
  }
}",0.9868565169769988
35297,"@Override protected void decode(ChannelHandlerContext ctx,ByteBuf in,List<Object> out) throws Exception {
  if (logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"",ByteUtil.createString(in));
  }
  ByteBuf data;
  if (previousBuf != null) {
    CompositeByteBuf cbuf=Unpooled.compositeBuffer();
    cbuf.addComponent(previousBuf);
    cbuf.addComponent(in);
    cbuf.writerIndex(previousBuf.readableBytes() + in.readableBytes());
    data=cbuf;
    previousBuf=null;
  }
 else {
    data=in;
  }
  while (data.isReadable()) {
    if (data.readableBytes() == 1 && isSingleByteFrame(data,data.readerIndex())) {
      out.add(createSingleByteFrame(data));
    }
 else {
      boolean foundFrame=false;
      for (int searchStartIx=data.readerIndex(); searchStartIx < data.readerIndex() + data.readableBytes(); searchStartIx++) {
        if (data.getByte(searchStartIx) == DataFrame.START_OF_FRAME) {
          int frameEndIx=scanForFrame(data,searchStartIx);
          if (frameEndIx > 0) {
            if (searchStartIx > data.readerIndex() && isSingleByteFrame(data,searchStartIx - 1)) {
              data.readerIndex(searchStartIx - 1);
              out.add(createSingleByteFrame(data));
            }
 else {
              data.readerIndex(searchStartIx);
            }
            out.add(createDataFrame(data));
            data.readByte();
            foundFrame=true;
          }
        }
      }
      if (!foundFrame) {
        break;
      }
    }
  }
  if (data.readableBytes() > 0) {
    previousBuf=data;
  }
  logger.trace(""String_Node_Str"");
}","@Override protected void decode(ChannelHandlerContext ctx,ByteBuf in,List<Object> out) throws Exception {
  if (logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"",ByteUtil.createString(in));
  }
  ByteBuf data;
  if (previousBuf != null) {
    CompositeByteBuf cbuf=Unpooled.compositeBuffer(2);
    cbuf.addComponent(previousBuf.copy());
    cbuf.addComponent(in);
    cbuf.writerIndex(previousBuf.readableBytes() + in.readableBytes());
    data=cbuf;
    previousBuf.release();
    previousBuf=null;
  }
 else {
    data=in;
  }
  while (data.isReadable()) {
    if (data.readableBytes() == 1 && isSingleByteFrame(data,data.readerIndex())) {
      out.add(createSingleByteFrame(data));
    }
 else {
      boolean foundFrame=false;
      for (int searchStartIx=data.readerIndex(); searchStartIx < data.readerIndex() + data.readableBytes(); searchStartIx++) {
        if (data.getByte(searchStartIx) == DataFrame.START_OF_FRAME) {
          int frameEndIx=scanForFrame(data,searchStartIx);
          if (frameEndIx > 0) {
            if (searchStartIx > data.readerIndex() && isSingleByteFrame(data,searchStartIx - 1)) {
              data.readerIndex(searchStartIx - 1);
              out.add(createSingleByteFrame(data));
            }
 else             if (searchStartIx > data.readerIndex()) {
              data.readerIndex(searchStartIx);
            }
            out.add(createDataFrame(data));
            data.readByte();
            foundFrame=true;
          }
        }
      }
      if (!foundFrame) {
        previousBuf=data.copy();
        break;
      }
    }
  }
  in.readBytes(in.readableBytes());
  logger.trace(""String_Node_Str"",out);
}",0.9444101297096974
35298,"@Test public void testExtraneousPrefixBytes() throws Exception {
  ZWaveFrameDecoder decoder=new ZWaveFrameDecoder();
  List<Object> out=new ArrayList<Object>();
  ByteBuf in=wrappedBuffer(new byte[]{0x02,0x03,0x04,0x01,0x05,0x00,0x13,0x02,0x00,(byte)0xeb});
  decoder.decode(null,in,out);
  assertEquals(1,out.size());
  assertTrue(out.get(0) instanceof SendData);
  SendData sd=(SendData)out.get(0);
  assertTrue(sd.hasCallbackId());
  assertEquals(Byte.valueOf((byte)0x02),sd.getCallbackId());
  assertEquals(DataFrameType.REQUEST,sd.getType());
}","@Test public void testExtraneousPrefixBytes() throws Exception {
  ZWaveFrameDecoder decoder=new ZWaveFrameDecoder();
  List<Object> out=new ArrayList<>();
  ByteBuf in=wrappedBuffer(new byte[]{0x02,0x03,0x04,0x01,0x05,0x00,0x13,0x02,0x00,(byte)0xeb});
  assertEquals(10,in.readableBytes());
  decoder.decode(null,in,out);
  assertEquals(0,in.readableBytes());
  assertEquals(1,out.size());
  assertTrue(out.get(0) instanceof SendData);
  SendData sd=(SendData)out.get(0);
  assertTrue(sd.hasCallbackId());
  assertEquals(Byte.valueOf((byte)0x02),sd.getCallbackId());
  assertEquals(DataFrameType.REQUEST,sd.getType());
}",0.8847139197267293
35299,"@Test public void testPartialMessage() throws Exception {
  ZWaveFrameDecoder decoder=new ZWaveFrameDecoder();
  List<Object> out=new ArrayList<>();
  ByteBuf in=wrappedBuffer(new byte[]{0x06,0x01,0x10,0x01});
  decoder.decode(null,in,out);
  assertEquals(0,in.readerIndex());
  assertEquals(0,out.size());
  in=wrappedBuffer(new byte[]{0x15,0x5A,0x2D,0x57,0x61,0x76,0x65,0x20,0x32,0x2E,0x37,0x38,0x00,0x01,(byte)0x9B});
  decoder.decode(null,in,out);
  assertEquals(2,out.size());
  assertTrue(out.get(0) instanceof ACK);
  assertTrue(out.get(1) instanceof Version);
}","@Test public void testPartialMessage() throws Exception {
  ZWaveFrameDecoder decoder=new ZWaveFrameDecoder();
  List<Object> out=new ArrayList<>();
  ByteBuf in=wrappedBuffer(new byte[]{0x06,0x01,0x10,0x01});
  decoder.decode(null,in,out);
  assertEquals(0,in.readableBytes());
  assertEquals(0,out.size());
  in=wrappedBuffer(new byte[]{0x15,0x5A,0x2D,0x57,0x61,0x76,0x65,0x20,0x32,0x2E,0x37,0x38,0x00,0x01,(byte)0x9B});
  assertEquals(15,in.readableBytes());
  decoder.decode(null,in,out);
  assertEquals(0,in.readableBytes());
  assertEquals(2,out.size());
  assertTrue(out.get(0) instanceof ACK);
  assertTrue(out.get(1) instanceof Version);
}",0.8808545603944125
35300,"@Test public void testTwoFramesAcrossTwoReads() throws Exception {
  ZWaveFrameDecoder decoder=new ZWaveFrameDecoder();
  List<Object> out=new ArrayList<Object>();
  ByteBuf in=wrappedBuffer(new byte[]{0x01,0x0d,0x00,0x04,0x00,0x0e,0x07,(byte)0x86,0x12,0x06,0x03,0x28,0x03,0x19,0x5c,0x01,0x0d});
  decoder.decode(null,in,out);
  in=wrappedBuffer(new byte[]{0x00,0x04,0x00,0x0e,0x07,(byte)0x86,0x12,0x06,0x03,0x28,0x03,0x19,0x5c});
  decoder.decode(null,in,out);
  assertEquals(2,out.size());
  assertTrue(out.get(0) instanceof ApplicationCommand);
  assertTrue(out.get(1) instanceof ApplicationCommand);
}","@Test public void testTwoFramesAcrossTwoReads() throws Exception {
  ZWaveFrameDecoder decoder=new ZWaveFrameDecoder();
  List<Object> out=new ArrayList<Object>();
  ByteBuf in=wrappedBuffer(new byte[]{0x01,0x0d,0x00,0x04,0x00,0x0e,0x07,(byte)0x86,0x12,0x06,0x03,0x28,0x03,0x19,0x5c,0x01,0x0d});
  assertEquals(17,in.readableBytes());
  decoder.decode(null,in,out);
  assertEquals(0,in.readableBytes());
  assertEquals(1,out.size());
  in=wrappedBuffer(new byte[]{0x00,0x04,0x00,0x0e,0x07,(byte)0x86,0x12,0x06,0x03,0x28,0x03,0x19,0x5c});
  assertEquals(13,in.readableBytes());
  decoder.decode(null,in,out);
  assertEquals(0,in.readableBytes());
  assertEquals(2,out.size());
  assertTrue(out.get(0) instanceof ApplicationCommand);
  assertTrue(out.get(1) instanceof ApplicationCommand);
}",0.7862266857962698
35301,"@Test public void testTwoCompleteFramesAtOnce() throws Exception {
  ZWaveFrameDecoder decoder=new ZWaveFrameDecoder();
  List<Object> out=new ArrayList<>();
  decoder.decode(null,wrappedBuffer(new byte[]{0x01,0x09,0x00,0x13,0x06,0x02,0x25,0x02,0x05,0x01,(byte)0xC2,0x01,0x04,0x01,0x13,0x01,(byte)0xE8}),out);
  assertEquals(2,out.size());
}","@Test public void testTwoCompleteFramesAtOnce() throws Exception {
  ZWaveFrameDecoder decoder=new ZWaveFrameDecoder();
  List<Object> out=new ArrayList<>();
  ByteBuf buf=wrappedBuffer(new byte[]{0x01,0x09,0x00,0x13,0x06,0x02,0x25,0x02,0x05,0x01,(byte)0xC2,0x01,0x04,0x01,0x13,0x01,(byte)0xE8});
  assertEquals(17,buf.readableBytes());
  decoder.decode(null,buf,out);
  assertEquals(0,buf.readableBytes());
  assertEquals(2,out.size());
}",0.8102564102564103
35302,"@Test public void testRandom2() throws Exception {
  ZWaveFrameDecoder decoder=new ZWaveFrameDecoder();
  List<Object> out=new ArrayList<Object>();
  ByteBuf in=wrappedBuffer(new byte[]{0x01,0x25,0x01,0x02,0x05,0x00,0x1d,0x01,0x00,0x00,0x00,(byte)0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x01,0x02});
  decoder.decode(null,in,out);
}","@Test public void testRandom2() throws Exception {
  ZWaveFrameDecoder decoder=new ZWaveFrameDecoder();
  List<Object> out=new ArrayList<Object>();
  ByteBuf in=wrappedBuffer(new byte[]{0x01,0x25,0x01,0x02,0x05,0x00,0x1d,0x01,0x00,0x00,0x00,(byte)0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x01,0x02});
  assertEquals(39,in.readableBytes());
  decoder.decode(null,in,out);
  assertEquals(0,in.readableBytes());
  assertEquals(1,in.refCnt());
}",0.8340336134453782
35303,"/** 
 * Parses a portion of JSON from the given   {@code Bytes} from it's{@link net.openhft.lang.io.Bytes#position() position} to{@link net.openhft.lang.io.Bytes#limit() limit}. Position is incremented until there are no   {@link net.openhft.lang.io.Bytes#remaining() remaining} bytes or a single top-levelJSON object is parsed and  {@link JsonParserTopLevelStrategy#ALLOW_TRAILING_GARBAGE} is set.<p>As this is a pull parser, the given JSON text may break at any character. If the {@link net.openhft.saxophone.json.JsonParserOption#ALLOW_PARTIAL_VALUES} is not set,{@link net.openhft.saxophone.ParseException} will be thrown only on {@link #finish()} call.<p>As JSON tokens are parsed, appropriate event handlers are notified. To ensure that the last token is processed, call  {@link #finish()} afterwards.<p>Returns  {@code true} if the parsing succeed and token handlers haven't send a cancelrequest (i. e. returned  {@code true} all the way). If any handler returns {@code false}, parsing is terminated immediately and   {@code false} is returned.<p>If one of the handlers throws a checked exception, it is wrapped with {@link net.openhft.saxophone.ParseException} (and available through{@link net.openhft.saxophone.ParseException#getCause()} later). If one of the handlers throwsan unchecked exception ( {@link java.lang.RuntimeException}), it is rethrown without any processing.
 * @param jsonText a portion of JSON to parse
 * @return {@code true} if the parsing wasn't cancelled by handlers
 * @throws net.openhft.saxophone.ParseException if the given JSON is malformed (exact meaning of""malformed"" depends on parser's  {@link JsonParserBuilder#options() options}), or if one of the handlers throws a checked exception, or   {@link net.openhft.saxophone.json.handler.IntegerHandler} is provided but parsedinteger value is out of primitive  {@code long} range:greater than  {@code Long.MAX_VALUE} or lesser than {@code Long.MIN_VALUE}
 * @throws IllegalStateException if parsing was cancelled or any exception was thrownin this method after the previous  {@link #reset()} call or parser construction
 */
public boolean parse(Bytes jsonText){
  TokenType tok;
  long startOffset=jsonText.position();
  around_again:   while (true) {
switch (stateStack.current()) {
case PARSE_COMPLETE:
      if (topLevelStrategy == ALLOW_MULTIPLE_VALUES) {
        stateStack.set(GOT_VALUE);
        continue around_again;
      }
    if (topLevelStrategy != ALLOW_TRAILING_GARBAGE) {
      if (jsonText.remaining() > 0) {
        tok=lexer.lex(jsonText);
        if (tok != EOF) {
          return parseError(""String_Node_Str"");
        }
        continue around_again;
      }
    }
  return true;
case LEXICAL_ERROR:
case PARSE_ERROR:
throw new IllegalStateException(""String_Node_Str"" + parseError);
case HANDLER_CANCEL:
throw new IllegalStateException(""String_Node_Str"");
case HANDLER_EXCEPTION:
throw new IllegalStateException(""String_Node_Str"");
case START:
case GOT_VALUE:
case MAP_NEED_VAL:
case ARRAY_NEED_VAL:
case ARRAY_START:
{
byte stateToPush=START;
tok=lexer.lex(jsonText);
switch (tok) {
case EOF:
return true;
case ERROR:
lexicalError();
case STRING:
if (stringValueHandler != null) {
try {
if (!onString.on()) {
stateStack.set(HANDLER_CANCEL);
return false;
}
}
 catch (Exception e) {
return handlerError(e);
}
}
break;
case STRING_WITH_ESCAPES:
if (stringValueHandler != null) {
try {
if (!onEscapedString.on()) {
stateStack.set(HANDLER_CANCEL);
return false;
}
}
 catch (Exception e) {
return handlerError(e);
}
}
break;
case BOOL:
if (booleanHandler != null) {
boolean value=lexer.outBuf.readUnsignedByte(lexer.outPos) == 't';
try {
if (!booleanHandler.onBoolean(value)) {
stateStack.set(HANDLER_CANCEL);
return false;
}
}
 catch (Exception e) {
return handlerError(e);
}
}
break;
case NULL:
if (nullHandler != null) {
try {
if (!nullHandler.onNull()) {
stateStack.set(HANDLER_CANCEL);
return false;
}
}
 catch (Exception e) {
return handlerError(e);
}
}
break;
case LEFT_BRACKET:
if (objectStartHandler != null) {
try {
if (!objectStartHandler.onObjectStart()) {
stateStack.set(HANDLER_CANCEL);
return false;
}
}
 catch (Exception e) {
return handlerError(e);
}
}
stateToPush=MAP_START;
break;
case LEFT_BRACE:
if (arrayStartHandler != null) {
try {
if (!arrayStartHandler.onArrayStart()) {
stateStack.set(HANDLER_CANCEL);
return false;
}
}
 catch (Exception e) {
return handlerError(e);
}
}
stateToPush=ARRAY_START;
break;
case INTEGER:
if (numberHandler != null) {
if (stringValueHandler != null) {
try {
if (!onNumber.on()) {
stateStack.set(HANDLER_CANCEL);
return false;
}
}
 catch (Exception e) {
return handlerError(e);
}
}
}
 else if (integerHandler != null) {
try {
long i=parseInteger(lexer.outBuf,lexer.outPos,lexer.outLen);
if (!integerHandler.onInteger(i)) {
stateStack.set(HANDLER_CANCEL);
return false;
}
}
 catch (NumberFormatException e) {
tryRestoreErrorEffect(jsonText,startOffset);
return parseError(""String_Node_Str"",e);
}
catch (Exception e) {
return handlerError(e);
}
}
break;
case DOUBLE:
if (numberHandler != null) {
if (stringValueHandler != null) {
try {
if (!onNumber.on()) {
stateStack.set(HANDLER_CANCEL);
return false;
}
}
 catch (Exception e) {
return handlerError(e);
}
}
}
 else if (floatingHandler != null) {
try {
if (!onFloating.on()) {
stateStack.set(HANDLER_CANCEL);
return false;
}
}
 catch (NumberFormatException e) {
tryRestoreErrorEffect(jsonText,startOffset);
return parseError(""String_Node_Str"",e);
}
catch (Exception e) {
return handlerError(e);
}
}
break;
case RIGHT_BRACE:
{
if (stateStack.current() == ARRAY_START) {
if (arrayEndHandler != null) {
try {
if (!arrayEndHandler.onArrayEnd()) {
stateStack.set(HANDLER_CANCEL);
return false;
}
}
 catch (Exception e) {
return handlerError(e);
}
}
stateStack.pop();
continue around_again;
}
}
case COLON:
case COMMA:
case RIGHT_BRACKET:
return parseError(""String_Node_Str"");
default :
return parseError(""String_Node_Str"");
}
{
byte s=stateStack.current();
if (s == START || s == GOT_VALUE) {
stateStack.set(PARSE_COMPLETE);
}
 else if (s == MAP_NEED_VAL) {
stateStack.set(MAP_GOT_VAL);
}
 else {
stateStack.set(ARRAY_GOT_VAL);
}
}
if (stateToPush != START) {
stateStack.push(stateToPush);
}
continue around_again;
}
case MAP_START:
case MAP_NEED_KEY:
{
tok=lexer.lex(jsonText);
OnString onKey=this.onKey;
switch (tok) {
case EOF:
return true;
case ERROR:
lexicalError();
case STRING_WITH_ESCAPES:
onKey=onEscapedKey;
case STRING:
if (objectKeyHandler != null) {
try {
if (!onKey.on()) {
stateStack.set(HANDLER_CANCEL);
return false;
}
}
 catch (Exception e) {
return handlerError(e);
}
}
stateStack.set(MAP_SEP);
continue around_again;
case RIGHT_BRACKET:
if (stateStack.current() == MAP_START) {
if (objectEndHandler != null) {
try {
if (!objectEndHandler.onObjectEnd()) {
stateStack.set(HANDLER_CANCEL);
return false;
}
}
 catch (Exception e) {
return handlerError(e);
}
}
stateStack.pop();
continue around_again;
}
default :
return parseError(""String_Node_Str"");
}
}
case MAP_SEP:
{
tok=lexer.lex(jsonText);
switch (tok) {
case COLON:
stateStack.set(MAP_NEED_VAL);
continue around_again;
case EOF:
return true;
case ERROR:
lexicalError();
default :
return parseError(""String_Node_Str"");
}
}
case MAP_GOT_VAL:
{
tok=lexer.lex(jsonText);
switch (tok) {
case RIGHT_BRACKET:
if (objectEndHandler != null) {
try {
if (!objectEndHandler.onObjectEnd()) {
stateStack.set(HANDLER_CANCEL);
return false;
}
}
 catch (Exception e) {
return handlerError(e);
}
}
stateStack.pop();
continue around_again;
case COMMA:
stateStack.set(MAP_NEED_KEY);
continue around_again;
case EOF:
return true;
case ERROR:
lexicalError();
default :
tryRestoreErrorEffect(jsonText,startOffset);
return parseError(""String_Node_Str"");
}
}
case ARRAY_GOT_VAL:
{
tok=lexer.lex(jsonText);
switch (tok) {
case RIGHT_BRACE:
if (arrayEndHandler != null) {
try {
if (!arrayEndHandler.onArrayEnd()) {
stateStack.set(HANDLER_CANCEL);
return false;
}
}
 catch (Exception e) {
return handlerError(e);
}
}
stateStack.pop();
continue around_again;
case COMMA:
stateStack.set(ARRAY_NEED_VAL);
continue around_again;
case EOF:
return true;
case ERROR:
return lexicalError();
default :
return parseError(""String_Node_Str"");
}
}
}
}
}","/** 
 * Parses a portion of JSON from the given   {@code Bytes} from it's{@link net.openhft.lang.io.Bytes#position() position} to{@link net.openhft.lang.io.Bytes#limit() limit}. Position is incremented until there are no   {@link net.openhft.lang.io.Bytes#remaining() remaining} bytes or a single top-levelJSON object is parsed and  {@link JsonParserTopLevelStrategy#ALLOW_TRAILING_GARBAGE} is set.<p>As this is a pull parser, the given JSON text may break at any character. If the {@link net.openhft.saxophone.json.JsonParserOption#ALLOW_PARTIAL_VALUES} is not set,{@link net.openhft.saxophone.ParseException} will be thrown only on {@link #finish()} call.<p>As JSON tokens are parsed, appropriate event handlers are notified. To ensure that the last token is processed, call  {@link #finish()} afterwards.<p>Returns  {@code true} if the parsing succeed and token handlers haven't send a cancelrequest (i. e. returned  {@code true} all the way). If any handler returns {@code false}, parsing is terminated immediately and   {@code false} is returned.<p>If one of the handlers throws a checked exception, it is wrapped with {@link net.openhft.saxophone.ParseException} (and available through{@link net.openhft.saxophone.ParseException#getCause()} later). If one of the handlers throwsan unchecked exception ( {@link java.lang.RuntimeException}), it is rethrown without any processing.
 * @param jsonText a portion of JSON to parse
 * @return {@code true} if the parsing wasn't cancelled by handlers
 * @throws net.openhft.saxophone.ParseException if the given JSON is malformed (exact meaning of""malformed"" depends on parser's  {@link JsonParserBuilder#options() options}), or if one of the handlers throws a checked exception, or   {@link net.openhft.saxophone.json.handler.IntegerHandler} is provided but parsedinteger value is out of primitive  {@code long} range:greater than  {@code Long.MAX_VALUE} or lesser than {@code Long.MIN_VALUE}
 * @throws IllegalStateException if parsing was cancelled or any exception was thrownin this method after the previous  {@link #reset()} call or parser construction
 */
public boolean parse(Bytes jsonText){
  TokenType tok;
  long startOffset=jsonText.position();
  around_again:   while (true) {
switch (stateStack.current()) {
case PARSE_COMPLETE:
      if (topLevelStrategy == ALLOW_MULTIPLE_VALUES) {
        stateStack.set(GOT_VALUE);
        continue around_again;
      }
    if (topLevelStrategy != ALLOW_TRAILING_GARBAGE) {
      if (jsonText.remaining() > 0) {
        tok=lexer.lex(jsonText);
        if (tok != EOF) {
          return parseError(""String_Node_Str"");
        }
        continue around_again;
      }
    }
  return true;
case LEXICAL_ERROR:
case PARSE_ERROR:
throw new IllegalStateException(""String_Node_Str"" + parseError);
case HANDLER_CANCEL:
throw new IllegalStateException(""String_Node_Str"");
case HANDLER_EXCEPTION:
throw new IllegalStateException(""String_Node_Str"");
case START:
case GOT_VALUE:
case MAP_NEED_VAL:
case ARRAY_NEED_VAL:
case ARRAY_START:
{
byte stateToPush=START;
tok=lexer.lex(jsonText);
switch (tok) {
case EOF:
return true;
case ERROR:
lexicalError();
case STRING:
if (stringValueHandler != null) {
try {
if (!onString.on()) {
stateStack.set(HANDLER_CANCEL);
return false;
}
}
 catch (Exception e) {
return handlerError(e);
}
}
break;
case STRING_WITH_ESCAPES:
if (stringValueHandler != null) {
try {
if (!onEscapedString.on()) {
stateStack.set(HANDLER_CANCEL);
return false;
}
}
 catch (Exception e) {
return handlerError(e);
}
}
break;
case BOOL:
if (booleanHandler != null) {
boolean value=lexer.outBuf.readUnsignedByte(lexer.outPos) == 't';
try {
if (!booleanHandler.onBoolean(value)) {
stateStack.set(HANDLER_CANCEL);
return false;
}
}
 catch (Exception e) {
return handlerError(e);
}
}
break;
case NULL:
if (nullHandler != null) {
try {
if (!nullHandler.onNull()) {
stateStack.set(HANDLER_CANCEL);
return false;
}
}
 catch (Exception e) {
return handlerError(e);
}
}
break;
case LEFT_BRACKET:
if (objectStartHandler != null) {
try {
if (!objectStartHandler.onObjectStart()) {
stateStack.set(HANDLER_CANCEL);
return false;
}
}
 catch (Exception e) {
return handlerError(e);
}
}
stateToPush=MAP_START;
break;
case LEFT_BRACE:
if (arrayStartHandler != null) {
try {
if (!arrayStartHandler.onArrayStart()) {
stateStack.set(HANDLER_CANCEL);
return false;
}
}
 catch (Exception e) {
return handlerError(e);
}
}
stateToPush=ARRAY_START;
break;
case INTEGER:
if (numberHandler != null) {
try {
if (!onNumber.on()) {
stateStack.set(HANDLER_CANCEL);
return false;
}
}
 catch (Exception e) {
return handlerError(e);
}
}
 else if (integerHandler != null) {
try {
long i=parseInteger(lexer.outBuf,lexer.outPos,lexer.outLen);
if (!integerHandler.onInteger(i)) {
stateStack.set(HANDLER_CANCEL);
return false;
}
}
 catch (NumberFormatException e) {
tryRestoreErrorEffect(jsonText,startOffset);
return parseError(""String_Node_Str"",e);
}
catch (Exception e) {
return handlerError(e);
}
}
break;
case DOUBLE:
if (numberHandler != null) {
try {
if (!onNumber.on()) {
stateStack.set(HANDLER_CANCEL);
return false;
}
}
 catch (Exception e) {
return handlerError(e);
}
}
 else if (floatingHandler != null) {
try {
if (!onFloating.on()) {
stateStack.set(HANDLER_CANCEL);
return false;
}
}
 catch (NumberFormatException e) {
tryRestoreErrorEffect(jsonText,startOffset);
return parseError(""String_Node_Str"",e);
}
catch (Exception e) {
return handlerError(e);
}
}
break;
case RIGHT_BRACE:
{
if (stateStack.current() == ARRAY_START) {
if (arrayEndHandler != null) {
try {
if (!arrayEndHandler.onArrayEnd()) {
stateStack.set(HANDLER_CANCEL);
return false;
}
}
 catch (Exception e) {
return handlerError(e);
}
}
stateStack.pop();
continue around_again;
}
}
case COLON:
case COMMA:
case RIGHT_BRACKET:
return parseError(""String_Node_Str"");
default :
return parseError(""String_Node_Str"");
}
{
byte s=stateStack.current();
if (s == START || s == GOT_VALUE) {
stateStack.set(PARSE_COMPLETE);
}
 else if (s == MAP_NEED_VAL) {
stateStack.set(MAP_GOT_VAL);
}
 else {
stateStack.set(ARRAY_GOT_VAL);
}
}
if (stateToPush != START) {
stateStack.push(stateToPush);
}
continue around_again;
}
case MAP_START:
case MAP_NEED_KEY:
{
tok=lexer.lex(jsonText);
OnString onKey=this.onKey;
switch (tok) {
case EOF:
return true;
case ERROR:
lexicalError();
case STRING_WITH_ESCAPES:
onKey=onEscapedKey;
case STRING:
if (objectKeyHandler != null) {
try {
if (!onKey.on()) {
stateStack.set(HANDLER_CANCEL);
return false;
}
}
 catch (Exception e) {
return handlerError(e);
}
}
stateStack.set(MAP_SEP);
continue around_again;
case RIGHT_BRACKET:
if (stateStack.current() == MAP_START) {
if (objectEndHandler != null) {
try {
if (!objectEndHandler.onObjectEnd()) {
stateStack.set(HANDLER_CANCEL);
return false;
}
}
 catch (Exception e) {
return handlerError(e);
}
}
stateStack.pop();
continue around_again;
}
default :
return parseError(""String_Node_Str"");
}
}
case MAP_SEP:
{
tok=lexer.lex(jsonText);
switch (tok) {
case COLON:
stateStack.set(MAP_NEED_VAL);
continue around_again;
case EOF:
return true;
case ERROR:
lexicalError();
default :
return parseError(""String_Node_Str"");
}
}
case MAP_GOT_VAL:
{
tok=lexer.lex(jsonText);
switch (tok) {
case RIGHT_BRACKET:
if (objectEndHandler != null) {
try {
if (!objectEndHandler.onObjectEnd()) {
stateStack.set(HANDLER_CANCEL);
return false;
}
}
 catch (Exception e) {
return handlerError(e);
}
}
stateStack.pop();
continue around_again;
case COMMA:
stateStack.set(MAP_NEED_KEY);
continue around_again;
case EOF:
return true;
case ERROR:
lexicalError();
default :
tryRestoreErrorEffect(jsonText,startOffset);
return parseError(""String_Node_Str"");
}
}
case ARRAY_GOT_VAL:
{
tok=lexer.lex(jsonText);
switch (tok) {
case RIGHT_BRACE:
if (arrayEndHandler != null) {
try {
if (!arrayEndHandler.onArrayEnd()) {
stateStack.set(HANDLER_CANCEL);
return false;
}
}
 catch (Exception e) {
return handlerError(e);
}
}
stateStack.pop();
continue around_again;
case COMMA:
stateStack.set(ARRAY_NEED_VAL);
continue around_again;
case EOF:
return true;
case ERROR:
return lexicalError();
default :
return parseError(""String_Node_Str"");
}
}
}
}
}",0.9955844474426592
35304,"private void ensureAvailable(long want){
  long need=capacity();
  long used=limit();
  while (want >= (need - used))   need<<=1;
  if (need != capacity()) {
    DirectStore store=(DirectStore)store();
    store.resize(need,false);
    if (address() != store.address()) {
      long pos=position();
      long limit=limit();
      startAddr=store.address();
      positionAddr=startAddr + pos;
      limitAddr=startAddr + limit;
      capacityAddr=startAddr + store.size();
    }
  }
}","private void ensureAvailable(long want){
  long need=capacity();
  long used=limit();
  while (want >= (need - used))   need<<=1;
  if (need != capacity()) {
    DirectStore store=(DirectStore)store();
    store.resize(need,false);
    if (address() != store.address()) {
      long pos=position();
      long limit=limit();
      startAddr=store.address();
      positionAddr=startAddr + pos;
      limitAddr=startAddr + limit;
    }
    capacityAddr=startAddr + store.size();
  }
}",0.9896694214876032
35305,"public Buf(){
  super(new DirectStore(BUF_INIT_SIZE),new AtomicInteger(1));
  writeByte(0,0);
}","Buf(){
  super(new DirectStore(BUF_INIT_SIZE),new AtomicInteger(1));
  writeByte(0,0);
}",0.9617486338797814
35306,"void reset(){
  bufInUse=false;
  buf.clear();
  error=null;
  outBuf=null;
  outPos=outLen=0;
}","void reset(){
  bufInUse=false;
  buf.reset();
  error=null;
  outBuf=null;
  outPos=outLen=0;
}",0.9583333333333334
35307,"private void test(String json){
  StringWriter stringWriter=new StringWriter();
  JsonParser p=JsonParser.builder().applyAdapter(new WriterAdapter(stringWriter)).build();
  try {
    p.parse(new ByteBufferBytes(ByteBuffer.wrap(json.getBytes(""String_Node_Str""))));
  }
 catch (  UnsupportedEncodingException e) {
    throw new AssertionError(e);
  }
  p.close();
  com.google.gson.JsonParser parser=new com.google.gson.JsonParser();
  JsonElement o1=parser.parse(json);
  JsonElement o2=parser.parse(stringWriter.toString());
  assertEquals(o1,o2);
}","private void test(String json){
  testSimple(json);
  testPull(json);
}",0.1870967741935484
35308,"/** 
 * Start the controller using the prefered SamplingRate on the list of predictor
 * @param samplingType one of: HOLDOUT, RANDOMSAMPLING, KFOLD
 * @param param The parameter associated with the sampling type
 * @param showDatasetStats show statistics about the dataset
 */
public void Start(int samplingType,float param,boolean showDatasetStats){
  List<String> statsColumns=new ArrayList<String>();
  statsColumns.add(""String_Node_Str"");
  statsColumns.add(""String_Node_Str"");
  statsColumns.add(""String_Node_Str"");
  statsColumns.add(""String_Node_Str"");
  statsColumns.add(""String_Node_Str"");
  statsColumns.add(""String_Node_Str"");
  statsColumns.add(""String_Node_Str"");
  statsColumns.add(""String_Node_Str"");
  List<String> predictorNames=new ArrayList<String>();
  for (  Predictor predictor : predictors) {
    predictorNames.add(predictor.getTAG());
  }
  for (int i=0; i < datasets.size(); i++) {
    int maxCount=datasetsMaxCount.get(i);
    Format format=datasets.get(i);
    database.loadDataset(format,maxCount,true);
    ProfileManager.loadProfileByName(format.toString());
    stats=new StatsLogger(statsColumns,predictorNames,false);
    startTime=System.currentTimeMillis();
    for (int id=0; id < predictors.size(); id++) {
switch (samplingType) {
case HOLDOUT:
        Holdout(param,id);
      break;
case KFOLD:
    KFold((int)param,id);
  break;
case RANDOMSAMPLING:
RandomSubSampling(param,id);
break;
default :
System.out.println(""String_Node_Str"");
}
}
endTime=System.currentTimeMillis();
displayStats(true);
}
}","/** 
 * Start the controller using the prefered SamplingRate on the list of predictor
 * @param samplingType one of: HOLDOUT, RANDOMSAMPLING, KFOLD
 * @param param The parameter associated with the sampling type
 * @param showDatasetStats show statistics about the dataset
 */
public void Start(int samplingType,float param,boolean showDatasetStats){
  List<String> statsColumns=new ArrayList<String>();
  statsColumns.add(""String_Node_Str"");
  statsColumns.add(""String_Node_Str"");
  statsColumns.add(""String_Node_Str"");
  statsColumns.add(""String_Node_Str"");
  statsColumns.add(""String_Node_Str"");
  statsColumns.add(""String_Node_Str"");
  statsColumns.add(""String_Node_Str"");
  statsColumns.add(""String_Node_Str"");
  List<String> predictorNames=new ArrayList<String>();
  for (  Predictor predictor : predictors) {
    predictorNames.add(predictor.getTAG());
  }
  for (int i=0; i < datasets.size(); i++) {
    int maxCount=datasetsMaxCount.get(i);
    Format format=datasets.get(i);
    ProfileManager.loadProfileByName(format.toString());
    database.loadDataset(format,maxCount,true);
    stats=new StatsLogger(statsColumns,predictorNames,false);
    startTime=System.currentTimeMillis();
    for (int id=0; id < predictors.size(); id++) {
switch (samplingType) {
case HOLDOUT:
        Holdout(param,id);
      break;
case KFOLD:
    KFold((int)param,id);
  break;
case RANDOMSAMPLING:
RandomSubSampling(param,id);
break;
default :
System.out.println(""String_Node_Str"");
}
}
endTime=System.currentTimeMillis();
displayStats(true);
}
}",0.9629629629629628
35309,"@Override public Boolean Train(List<Sequence> trainingSequences){
  for (  Sequence seq : trainingSequences) {
    state.clear();
    state.add(root);
    for (    Item item : seq.getItems()) {
      List<Node> newState=new ArrayList<Node>();
      newState.add(root);
      for (      Node node : state) {
        if (node.pathFromRoot.size() <= maxTreeHeight) {
          Node child=node.addChild(item.val);
          size++;
          dictionnary.put(child.pathFromRoot,child);
          newState.add(child);
        }
      }
      state=newState;
    }
  }
  return true;
}","@Override public Boolean Train(List<Sequence> trainingSequences){
  root=new Node(0,new ArrayList<Integer>());
  size=1;
  state=new ArrayList<Node>();
  dictionnary=new HashMap<List<Integer>,Node>();
  for (  Sequence seq : trainingSequences) {
    state.clear();
    state.add(root);
    for (    Item item : seq.getItems()) {
      List<Node> newState=new ArrayList<Node>();
      newState.add(root);
      for (      Node node : state) {
        if (node.pathFromRoot.size() <= maxTreeHeight) {
          Node child=node.addChild(item.val);
          size++;
          dictionnary.put(child.pathFromRoot,child);
          newState.add(child);
        }
      }
      state=newState;
    }
  }
  return true;
}",0.895429899302866
35310,"public synchronized void writeAsync(KineticMessage message,Object context) throws IOException, InterruptedException {
  this.client.finalizeHeader(message);
  Long seq=Long.valueOf(message.getCommand().getHeader().getSequence());
  while (this.ackmap.size() >= this.asyncQueuedSize && this.isRunning) {
    this.wait();
  }
  this.ackmap.put(seq,context);
  this.doWrite(message);
}","public synchronized void writeAsync(KineticMessage message,Object context) throws IOException, InterruptedException {
  this.client.finalizeHeader(message);
  Long seq=Long.valueOf(message.getCommand().getHeader().getSequence());
  while (ackmap.size() >= asyncQueuedSize && (isClosed == false)) {
    this.wait();
  }
  this.ackmap.put(seq,context);
  this.doWrite(message);
}",0.9433465085639
35311,"private void validatePort(String port){
  if (port == null || port.isEmpty()) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  Pattern pattern=Pattern.compile(""String_Node_Str"");
  Matcher matcher=pattern.matcher(port);
  if (!matcher.find()) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
}","private void validatePort(String port){
  if (port == null || port.isEmpty()) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  int portIn;
  try {
    portIn=Integer.parseInt(port);
  }
 catch (  NumberFormatException e) {
    throw new IllegalArgumentException(""String_Node_Str"" + port);
  }
  if (portIn < MIN_PORT || portIn > MAX_PORT) {
    throw new IllegalArgumentException(""String_Node_Str"" + port);
  }
}",0.4940554821664465
35312,"/** 
 * Set cluster version with the specified version.
 * @param newClusterVersion
 * @throws KineticException
 */
public void setClusterVersion(long newClusterVersion) throws KineticException ;","/** 
 * Set cluster version with the specified version.
 * @param newClusterVersion new cluster version to be set.
 * @throws KineticException if any internal error occurred
 */
public void setClusterVersion(long newClusterVersion) throws KineticException ;",0.8628318584070797
35313,"/** 
 * Get the configuration information of the drive <p>
 * @return the configuration information from the drive.
 * @throws KineticException if any internal error occurred.
 * @see DefaultConfiguration
 */
public Configuration getConfiguration() throws KineticException ;","/** 
 * Get the configuration information of the drive <p>
 * @return the configuration information from the drive.
 * @throws KineticException if any internal error occurred.
 * @see Configuration
 */
public Configuration getConfiguration() throws KineticException ;",0.9870609981515712
35314,"/** 
 * Set the max message size field content of the limits.
 * @param key the content to be set to the max message size field.
 */
public void setMaxMessageSize(int maxMessageSize){
  this.maxMessageSize=maxMessageSize;
}","/** 
 * Set the max allowed message size.
 * @param maxMessageSize tthe max allowed message size
 */
public void setMaxMessageSize(int maxMessageSize){
  this.maxMessageSize=maxMessageSize;
}",0.6521739130434783
35315,"/** 
 * Get the value of max connections.
 * @return the content of the max connections field.
 */
public int getMaxConnections(){
  return maxConnections;
}","/** 
 * Get max allowed concurrent connections.
 * @return max allowed concurrent connections
 */
public int getMaxConnections(){
  return maxConnections;
}",0.7859424920127795
35316,"/** 
 * Set the max out standing write requests field content of the limits.
 * @param key the content to be set to the max out standing write requests field.
 */
public void setMaxOutstandingWriteRequests(int maxOutstandingWriteRequests){
  this.maxOutstandingWriteRequests=maxOutstandingWriteRequests;
}","/** 
 * Set max allowed out-standing write requests
 * @param maxOutstandingWriteRequests max allowed out-standing write requests
 */
public void setMaxOutstandingWriteRequests(int maxOutstandingWriteRequests){
  this.maxOutstandingWriteRequests=maxOutstandingWriteRequests;
}",0.5851979345955249
35317,"/** 
 * Get the value of max version size.
 * @return the content of the max version size field.
 */
public int getMaxVersionSize(){
  return maxVersionSize;
}","/** 
 * Get max allowed version size.
 * @return max allowed version size.
 */
public int getMaxVersionSize(){
  return maxVersionSize;
}",0.8175675675675675
35318,"/** 
 * Get the value of max message size.
 * @return the content of the max message size.
 */
public int getMaxMessageSize(){
  return maxMessageSize;
}","/** 
 * Get max allowed message size.
 * @return max allowed message size
 */
public int getMaxMessageSize(){
  return maxMessageSize;
}",0.8304498269896193
35319,"/** 
 * Set the max connections field content of the limits.
 * @param key the content to be set to the max connections field.
 */
public void setMaxConnections(int maxConnections){
  this.maxConnections=maxConnections;
}","/** 
 * Set max allowed concurrent connections
 * @param maxConnections the max allowed concurrent connections
 */
public void setMaxConnections(int maxConnections){
  this.maxConnections=maxConnections;
}",0.6056338028169014
35320,"/** 
 * Set the max out standing read requests field content of the limits.
 * @param key the content to be set to the max out standing read requests field.
 */
public void setMaxOutstandingReadRequests(int maxOutstandingReadRequests){
  this.maxOutstandingReadRequests=maxOutstandingReadRequests;
}","/** 
 * Set the max allowed out standing read requests.
 * @param maxOutstandingReadRequests the max allowed out standing read requests
 */
public void setMaxOutstandingReadRequests(int maxOutstandingReadRequests){
  this.maxOutstandingReadRequests=maxOutstandingReadRequests;
}",0.6308492201039861
35321,"/** 
 * Set the max tag size field content of the limits.
 * @param key the content to be set to the max tag field.
 */
public void setMaxTagSize(int maxTagSize){
  this.maxTagSize=maxTagSize;
}","/** 
 * Set the max tag size.
 * @param maxTagSize the max tag size
 */
public void setMaxTagSize(int maxTagSize){
  this.maxTagSize=maxTagSize;
}",0.7941176470588235
35322,"/** 
 * Set the max value size field content of the limits.
 * @param key the content to be set to the max value size field.
 */
public void setMaxValueSize(int maxValueSize){
  this.maxValueSize=maxValueSize;
}","/** 
 * Set the max allowed value size.
 * @param maxValueSize the max allowed value size.
 */
public void setMaxValueSize(int maxValueSize){
  this.maxValueSize=maxValueSize;
}",0.7783505154639175
35323,"/** 
 * Set the max version size field content of the limits.
 * @param key the content to be set to the max version size field.
 */
public void setMaxVersionSize(int maxVersionSize){
  this.maxVersionSize=maxVersionSize;
}","/** 
 * Set the max allowed version size.
 * @param maxVersionSize the max allowed version size.
 */
public void setMaxVersionSize(int maxVersionSize){
  this.maxVersionSize=maxVersionSize;
}",0.6570048309178744
35324,"/** 
 * Get the value of max key range size.
 * @return the content of the max key range size.
 */
public int getMaxKeyRangeCount(){
  return maxKeyRangeCount;
}","/** 
 * Get max allowed number of keys can be returned from getKeyRange.
 * @return max allowed number of keys can be returned from getKeyRange.
 */
public int getMaxKeyRangeCount(){
  return maxKeyRangeCount;
}",0.5483870967741935
35325,"/** 
 * Get the value of max out standing write requests.
 * @return the content of the max out standing write requests field.
 */
public int getMaxOutstandingWriteRequests(){
  return maxOutstandingWriteRequests;
}","/** 
 * Get max allowed out-standing write requests.
 * @return tmax allowed out-standing write requests.
 */
public int getMaxOutstandingWriteRequests(){
  return maxOutstandingWriteRequests;
}",0.8606356968215159
35326,"/** 
 * Set the max key size field content of the limits.
 * @param key the content to be set to the max key size field.
 */
public void setMaxKeySize(int maxKeySize){
  this.maxKeySize=maxKeySize;
}","/** 
 * Set the max allowed key size.
 * @param maxKeySize the max allowed key size.
 */
public void setMaxKeySize(int maxKeySize){
  this.maxKeySize=maxKeySize;
}",0.7734806629834254
35327,"/** 
 * Set the max key range size field content of the limits.
 * @param key the content to be set to the max key range size field.
 */
public void setMaxKeyRangeCount(int maxKeyRangeCount){
  this.maxKeyRangeCount=maxKeyRangeCount;
}","/** 
 * Set max allowed number of keys can be returned from getKeyRange.
 * @param maxKeyRangeCount max allowed number of keys can be returned from getKeyRange.
 */
public void setMaxKeyRangeCount(int maxKeyRangeCount){
  this.maxKeyRangeCount=maxKeyRangeCount;
}",0.5582329317269076
35328,"/** 
 * Get callback result. <p> The Param Type <T> matches the corresponding return type for its synchronous API variation. For example, a  {@link KineticClient#putForced(Entry)} operation would have aCallbackResult of type  {@link Entry}.
 * @return the result instance corresponding to the asynchronous request.
 */
public T getResult();","/** 
 * Get callback result. <p> The Param Type matches the corresponding return type for its synchronous API variation. For example, a  {@link KineticClient#putForced(Entry)} operation would have aCallbackResult of type  {@link Entry}.
 * @return the result instance corresponding to the asynchronous request.
 */
public T getResult();",0.9940828402366864
35329,"/** 
 * Generic kinetic asynchronous request operation. This is a variation of the   {@link #request(com.seagate.kinetic.proto.Kinetic.Message.Builder)}API. <p>
 * @param requestMessage the request message to the kinetic service.
 * @param callback Kinetic client runtime invokes the CallbackHandler.onSuccess() when a successful request's response message is available. CallbackHandler.onError(KineticException e) is invoked if any internal error occurs.
 * @param < T > The type must be consistent with the corresponding synchronous request method's return type. For example, for an asynchronous get request, the parameter specified must be an <code>Entry</code> type.
 * @throws KineticException if any internal error occurred.
 * @see #request(KineticMessage)
 * @see CallbackHandler
 * @see CallbackResult
 */
public <T>void requestAsync(KineticMessage requestMessage,CallbackHandler<T> callback) throws KineticException ;","/** 
 * Generic kinetic asynchronous request operation. <p>
 * @param requestMessage the request message to the kinetic service.
 * @param callback Kinetic client runtime invokes the CallbackHandler.onSuccess() when a successful request's response message is available. CallbackHandler.onError(KineticException e) is invoked if any internal error occurs.
 * @param < T > The type must be consistent with the corresponding synchronous request method's return type. For example, for an asynchronous get request, the parameter specified must be an <code>Entry</code> type.
 * @throws KineticException if any internal error occurred.
 * @see #request(KineticMessage)
 * @see CallbackHandler
 * @see CallbackResult
 */
public <T>void requestAsync(KineticMessage requestMessage,CallbackHandler<T> callback) throws KineticException ;",0.9423844837421564
35330,"/** 
 * Create a new instance of <code>BatchOperation</code> object. <p> Please note that this API is only supported by the simulator and Drive that implement Kinetic protocol 3.0.6 and later.
 * @return a new instance of <code>BatchOperation</code> object.
 * @since protocol version 3.0.6
 */
public BatchOperation createBatchOperation() throws KineticException ;","/** 
 * Create a new instance of <code>BatchOperation</code> object. <p> Please note that this API is only supported by the simulator and Drive that implement Kinetic protocol 3.0.6 and later.
 * @return a new instance of <code>BatchOperation</code> object.
 * @since protocol version 3.0.6
 * @throws KineticException if any internal error occurred.
 */
public BatchOperation createBatchOperation() throws KineticException ;",0.9240506329113924
35331,"@SuppressWarnings(""String_Node_Str"") public synchronized void init(RequestContext context) throws InvalidBatchException, InvalidRequestException {
  if (this.batch != null) {
    throw new InvalidRequestException(""String_Node_Str"");
  }
  this.context=context;
  this.cid=context.getRequestMessage().getCommand().getHeader().getConnectionID();
  this.batchId=context.getRequestMessage().getCommand().getHeader().getBatchID();
  try {
    batch=engine.getStore().createBatchOperation();
  }
 catch (  KVStoreException e) {
    throw new InvalidBatchException(e);
  }
}","@SuppressWarnings(""String_Node_Str"") public synchronized void init(RequestContext context) throws InvalidBatchException, InvalidRequestException {
  if (this.batch != null) {
    this.waitForBatchToFinish();
  }
  this.context=context;
  this.cid=context.getRequestMessage().getCommand().getHeader().getConnectionID();
  this.batchId=context.getRequestMessage().getCommand().getHeader().getBatchID();
  try {
    batch=engine.getStore().createBatchOperation();
  }
 catch (  KVStoreException e) {
    throw new InvalidBatchException(e);
  }
}",0.9359783588818756
35332,"private synchronized void waitForBatchToFinish(){
  long timeout=0;
  long period=3000;
  while (batch != null) {
    try {
      this.wait(period);
      if (batch == null) {
        return;
      }
      timeout+=period;
      if (timeout >= MAX_TIME_OUT) {
        throw new RuntimeException(""String_Node_Str"");
      }
 else {
        logger.warning(""String_Node_Str"" + timeout);
      }
    }
 catch (    InterruptedException e) {
      logger.log(Level.WARNING,e.getMessage(),e);
    }
  }
}","private synchronized void waitForBatchToFinish(){
  long totalWaitTime=0;
  long period=3000;
  long start=System.currentTimeMillis();
  while (batch != null) {
    try {
      this.wait(period);
      if (batch == null) {
        return;
      }
      totalWaitTime=(System.currentTimeMillis() - start);
      if (totalWaitTime >= MAX_TIME_OUT) {
        throw new RuntimeException(""String_Node_Str"");
      }
 else {
        logger.warning(""String_Node_Str"" + totalWaitTime);
      }
    }
 catch (    InterruptedException e) {
      logger.log(Level.WARNING,e.getMessage(),e);
    }
  }
}",0.8547794117647058
35333,"@Override protected void encode(ChannelHandlerContext ctx,KineticMessage km,ByteBuf out) throws Exception {
  try {
    byte[] value=km.getValue();
    out.writeByte((byte)'F');
    Message.Builder builder=(Builder)km.getMessage();
    Message msg=builder.build();
    byte[] protoMessageBytes=msg.toByteArray();
    out.writeInt(protoMessageBytes.length);
    if (value != null) {
      out.writeInt(value.length);
    }
 else {
      out.writeInt(0);
    }
    out.writeBytes(protoMessageBytes);
    if (value != null && value.length > 0) {
      out.writeBytes(value);
    }
    if (printMessage) {
      logger.info(""String_Node_Str"");
      String printMsg=ProtocolMessageUtil.toString(msg,value.length);
      logger.info(printMsg);
    }
  }
 catch (  Exception e) {
    logger.log(Level.WARNING,e.getMessage(),e);
    throw e;
  }
}","@Override protected void encode(ChannelHandlerContext ctx,KineticMessage km,ByteBuf out) throws Exception {
  try {
    byte[] value=km.getValue();
    out.writeByte((byte)'F');
    Message.Builder builder=(Builder)km.getMessage();
    Message msg=builder.build();
    byte[] protoMessageBytes=msg.toByteArray();
    out.writeInt(protoMessageBytes.length);
    if (value != null) {
      out.writeInt(value.length);
    }
 else {
      out.writeInt(0);
    }
    out.writeBytes(protoMessageBytes);
    if (value != null && value.length > 0) {
      out.writeBytes(value);
    }
    if (printMessage) {
      logger.info(""String_Node_Str"");
      int len=0;
      if (value != null) {
        len=value.length;
      }
      String printMsg=ProtocolMessageUtil.toString(msg,len);
      logger.info(printMsg);
    }
  }
 catch (  Exception e) {
    logger.log(Level.WARNING,e.getMessage(),e);
    throw e;
  }
}",0.9468267581475128
35334,"@Factory public Object[] allTests(){
  return new Object[]{new UUIDTest(),new IntegerArrayTest()};
}","@Factory public Object[] allTests(){
  return new Object[]{new UUIDTest(),new IntegerArrayTest(),new BigIntArrayTest()};
}",0.9009009009009008
35335,"public static void setWebDriver(WebDriver driver){
  DriverManager.driver.set(driver);
}","public static void setWebDriver(WebDriver driver){
  driver.manage().timeouts().implicitlyWait(10,TimeUnit.SECONDS);
  DriverManager.driver.set(driver);
}",0.7272727272727273
35336,"/** 
 * List the dependencies of the given element.
 * @param computationElement Computation element to prepare.
 * @param model Model of the current container.
 */
private void prepareForComputationElement(final ComputationElementDTO computationElement,final IsModel model){
  final Computation computation=computationElement.getComputationForModel(model);
  computations.put(computationElement,computation);
  for (  final Dependency dependency : computation.getDependencies()) {
    List<ComputationElementDTO> list=dependencies.get(((SingleDependency)dependency).getFlexibleElement());
    if (list == null) {
      list=new ArrayList<ComputationElementDTO>();
      if (dependency instanceof SingleDependency) {
        dependencies.put(((SingleDependency)dependency).getFlexibleElement(),list);
      }
    }
    list.add(computationElement);
  }
}","/** 
 * List the dependencies of the given element.
 * @param computationElement Computation element to prepare.
 * @param model Model of the current container.
 */
private void prepareForComputationElement(final ComputationElementDTO computationElement,final IsModel model){
  final Computation computation=computationElement.getComputationForModel(model);
  computations.put(computationElement,computation);
  for (  final Dependency dependency : computation.getDependencies()) {
    List<ComputationElementDTO> list;
    if (dependency instanceof SingleDependency) {
      list=dependencies.get(((SingleDependency)dependency).getFlexibleElement());
    }
 else     if (dependency instanceof CollectionDependency) {
      list=dependencies.get(((CollectionDependency)dependency).getFlexibleElement());
    }
 else {
      continue;
    }
    if (list == null) {
      list=new ArrayList<ComputationElementDTO>();
      if (dependency instanceof SingleDependency) {
        dependencies.put(((SingleDependency)dependency).getFlexibleElement(),list);
      }
    }
    list.add(computationElement);
  }
}",0.8723186925434117
35337,"@Override public void refresh(final ContactDTO contactDTO){
  computationTriggerManager.prepareForContact(contactDTO);
  valueChanges.clear();
  view.getDetailsContainer().removeAll();
  final LayoutDTO layout=contactDTO.getContactModel().getDetails().getLayout();
  int count=0;
  for (  final LayoutGroupDTO groupDTO : layout.getGroups()) {
    count+=groupDTO.getConstraints().size();
  }
  if (count == 0) {
    view.fillContainer(new Label(I18N.CONSTANTS.contactDetailsNoDetails()));
    return;
  }
  formPanel=Forms.panel();
  final Grid gridLayout=new Grid(layout.getRowsCount(),layout.getColumnsCount());
  gridLayout.setCellPadding(0);
  gridLayout.setCellSpacing(0);
  formPanel.add(new Label(I18N.CONSTANTS.contactUniqueId() + contactDTO.getId()));
  final DispatchQueue queue=new DispatchQueue(dispatch,true);
  for (  final LayoutGroupDTO groupLayout : layout.getGroups()) {
    if (!groupLayout.getHasIterations()) {
      FieldSet fieldSet=createGroupLayoutFieldSet(contactDTO,groupLayout,queue,null,null,null);
      fieldSet.setHeadingHtml(groupLayout.getTitle());
      fieldSet.setCollapsible(true);
      fieldSet.setBorders(true);
      gridLayout.setWidget(groupLayout.getRow(),groupLayout.getColumn(),fieldSet);
      continue;
    }
    final FieldSet fieldSet=(FieldSet)groupLayout.getWidget();
    gridLayout.setWidget(groupLayout.getRow(),groupLayout.getColumn(),fieldSet);
    final IterableGroupPanel tabPanel=Forms.iterableGroupPanel(dispatch,groupLayout,contactDTO,ProfileUtils.isGranted(auth(),GlobalPermissionEnum.CREATE_ITERATIONS),eventBus);
    tabPanel.setDelegate(this);
    fieldSet.add(tabPanel);
    tabPanel.setAutoHeight(true);
    tabPanel.setAutoWidth(true);
    tabPanel.setTabScroll(true);
    tabPanel.addStyleName(""String_Node_Str"");
    tabPanel.setBorders(true);
    tabPanel.setBodyBorder(false);
    GetLayoutGroupIterations getIterations=new GetLayoutGroupIterations(groupLayout.getId(),contactDTO.getId(),-1);
    queue.add(getIterations,new CommandResultHandler<ListResult<LayoutGroupIterationDTO>>(){
      @Override public void onCommandFailure(      final Throwable throwable){
        if (Log.isErrorEnabled()) {
          Log.error(""String_Node_Str"",throwable);
        }
        throw new RuntimeException(throwable);
      }
      @Override protected void onCommandSuccess(      ListResult<LayoutGroupIterationDTO> result){
        DispatchQueue iterationsQueue=new DispatchQueue(dispatch,true);
        for (        final LayoutGroupIterationDTO iteration : result.getList()) {
          final IterableGroupItem tab=new IterableGroupItem(tabPanel,iteration.getId(),iteration.getName(),groupLayout.getIterationType());
          tabPanel.addIterationTab(tab);
          Layout tabLayout=Layouts.fitLayout();
          tab.setLayout(tabLayout);
          FieldSet tabSet=createGroupLayoutFieldSet(contactDTO,groupLayout,iterationsQueue,iteration == null ? null : iteration.getId(),tabPanel,tab);
          tab.add(tabSet);
        }
        iterationsQueue.start();
        if (tabPanel.getItemCount() > 0) {
          tabPanel.setSelection(tabPanel.getItem(0));
        }
      }
    }
,new LoadingMask(view.getDetailsContainer()));
    fieldSet.layout();
  }
  view.getSaveButton().removeAllListeners();
  view.getSaveButton().addSelectionListener(new SelectionListener<ButtonEvent>(){
    @Override public void componentSelected(    final ButtonEvent buttonEvent){
      view.getSaveButton().disable();
      dispatch.execute(buildCheckContactDuplicationCommand(contactDTO),new CommandResultHandler<ListResult<ContactDTO>>(){
        @Override protected void onCommandSuccess(        ListResult<ContactDTO> result){
          if (result == null || result.isEmpty()) {
            updateContact(contactDTO,new CommandResultHandler<ContactDTO>(){
              @Override protected void onCommandSuccess(              ContactDTO updatedContactDTO){
                view.getSaveButton().enable();
              }
            }
,view.getDetailsContainer());
            return;
          }
          final DedupeContactDialog dedupeContactDialog=view.generateDedupeDialog();
          dedupeContactDialog.getPossibleDuplicatesGrid().getStore().add(result.getList());
          dedupeContactDialog.getFirstStepMainButton().addSelectionListener(new SelectionListener<ButtonEvent>(){
            @Override public void componentSelected(            ButtonEvent ce){
              updateContact(contactDTO,new CommandResultHandler<ContactDTO>(){
                @Override protected void onCommandSuccess(                ContactDTO result){
                  dedupeContactDialog.hide();
                }
              }
,view.getDetailsContainer());
            }
          }
);
          dedupeContactDialog.setSecondStepHandler(new DedupeContactDialog.SecondStepHandler(){
            @Override public void initialize(            final Integer contactId,            final ListStore<ContactDuplicatedProperty> propertiesStore){
              updateContact(contactDTO,new CommandResultHandler<ContactDTO>(){
                @Override protected void onCommandSuccess(                ContactDTO updatedContactDTO){
                  dispatch.execute(new GetContactDuplicatedProperties(contactId,updatedContactDTO.getId(),null),new CommandResultHandler<ListResult<ContactDuplicatedProperty>>(){
                    @Override protected void onCommandSuccess(                    ListResult<ContactDuplicatedProperty> result){
                      propertiesStore.add(result.getList());
                    }
                  }
,new LoadingMask(dedupeContactDialog));
                }
              }
,dedupeContactDialog);
            }
            @Override public void downloadImage(            String id,            final Image image){
              imageProvider.provideDataUrl(id,new SuccessCallback<String>(){
                @Override public void onSuccess(                String dataUrl){
                  image.setUrl(dataUrl);
                }
              }
);
            }
            @Override public void handleDedupeContact(            final Integer targetedContactId,            List<ContactDuplicatedProperty> selectedProperties){
              dispatch.execute(new DedupeContact(selectedProperties,contactDTO.getId(),targetedContactId),new CommandResultHandler<ContactDTO>(){
                @Override protected void onCommandSuccess(                ContactDTO targetedContactDTO){
                  dedupeContactDialog.hide();
                  final PageRequest currentRequest=injector.getPageManager().getCurrentPageRequest(false);
                  eventBus.navigateRequest(Page.CONTACT_DASHBOARD.requestWith(RequestParameter.ID,targetedContactId));
                  eventBus.fireEvent(new UpdateEvent(UpdateEvent.CONTACT_DELETE,currentRequest));
                }
              }
);
            }
            @Override public void handleCancel(){
              dedupeContactDialog.hide();
            }
          }
);
          dedupeContactDialog.addWindowListener(new WindowListener(){
            @Override public void windowHide(            WindowEvent windowEvent){
              super.windowHide(windowEvent);
              if (windowEvent.getType() == Events.Hide) {
                view.getSaveButton().enable();
              }
            }
          }
);
          dedupeContactDialog.show();
        }
      }
);
    }
  }
);
  view.getDeleteButton().removeAllListeners();
  view.getDeleteButton().addSelectionListener(new SelectionListener<ButtonEvent>(){
    @Override public void componentSelected(    final ButtonEvent ce){
      onDeleteContact(contactDTO);
    }
  }
);
  view.getDeleteButton().setEnabled(canDeleteContact());
  view.getDeleteButton().setVisible(canDeleteContact());
  view.getExportButton().removeAllListeners();
  view.getExportButton().addSelectionListener(new SelectionListener<ButtonEvent>(){
    @Override public void componentSelected(    final ButtonEvent ce){
      onExportContact(contactDTO);
    }
  }
);
  queue.start();
  formPanel.add(gridLayout);
  view.fillContainer(formPanel);
}","@Override public void refresh(final ContactDTO contactDTO){
  computationTriggerManager.prepareForContact(contactDTO);
  valueChanges.clear();
  view.getDetailsContainer().removeAll();
  final LayoutDTO layout=contactDTO.getContactModel().getDetails().getLayout();
  int count=0;
  for (  final LayoutGroupDTO groupDTO : layout.getGroups()) {
    count+=groupDTO.getConstraints().size();
  }
  if (count == 0) {
    view.fillContainer(new Label(I18N.CONSTANTS.contactDetailsNoDetails()));
    return;
  }
  formPanel=Forms.panel();
  final Grid gridLayout=new Grid(layout.getRowsCount(),layout.getColumnsCount());
  gridLayout.setCellPadding(0);
  gridLayout.setCellSpacing(0);
  formPanel.add(new Label(I18N.CONSTANTS.contactUniqueId() + contactDTO.getId()));
  final DispatchQueue queue=new DispatchQueue(dispatch,true);
  for (  final LayoutGroupDTO groupLayout : layout.getGroups()) {
    if (!groupLayout.getHasIterations()) {
      FieldSet fieldSet=createGroupLayoutFieldSet(contactDTO,groupLayout,queue,null,null,null);
      fieldSet.setHeadingHtml(groupLayout.getTitle());
      fieldSet.setCollapsible(true);
      fieldSet.setBorders(true);
      gridLayout.setWidget(groupLayout.getRow(),groupLayout.getColumn(),fieldSet);
      continue;
    }
    final FieldSet fieldSet=(FieldSet)groupLayout.getWidget();
    gridLayout.setWidget(groupLayout.getRow(),groupLayout.getColumn(),fieldSet);
    final IterableGroupPanel tabPanel=Forms.iterableGroupPanel(dispatch,groupLayout,contactDTO,ProfileUtils.isGranted(auth(),GlobalPermissionEnum.CREATE_ITERATIONS),eventBus);
    tabPanel.setDelegate(this);
    fieldSet.add(tabPanel);
    tabPanel.setAutoHeight(true);
    tabPanel.setAutoWidth(true);
    tabPanel.setTabScroll(true);
    tabPanel.addStyleName(""String_Node_Str"");
    tabPanel.setBorders(true);
    tabPanel.setBodyBorder(false);
    GetLayoutGroupIterations getIterations=new GetLayoutGroupIterations(groupLayout.getId(),contactDTO.getId(),-1);
    queue.add(getIterations,new CommandResultHandler<ListResult<LayoutGroupIterationDTO>>(){
      @Override public void onCommandFailure(      final Throwable throwable){
        if (Log.isErrorEnabled()) {
          Log.error(""String_Node_Str"",throwable);
        }
        throw new RuntimeException(throwable);
      }
      @Override protected void onCommandSuccess(      ListResult<LayoutGroupIterationDTO> result){
        DispatchQueue iterationsQueue=new DispatchQueue(dispatch,true);
        for (        final LayoutGroupIterationDTO iteration : result.getList()) {
          final IterableGroupItem tab=new IterableGroupItem(tabPanel,iteration.getId(),iteration.getName(),groupLayout.getIterationType());
          tabPanel.addIterationTab(tab);
          Layout tabLayout=Layouts.fitLayout();
          tab.setLayout(tabLayout);
          FieldSet tabSet=createGroupLayoutFieldSet(contactDTO,groupLayout,iterationsQueue,iteration == null ? null : iteration.getId(),tabPanel,tab);
          tab.add(tabSet);
        }
        iterationsQueue.start();
        if (tabPanel.getItemCount() > 0) {
          tabPanel.setSelection(tabPanel.getItem(0));
        }
      }
    }
,new LoadingMask(view.getDetailsContainer()));
    fieldSet.layout();
  }
  view.getSaveButton().removeAllListeners();
  view.getSaveButton().addSelectionListener(new SelectionListener<ButtonEvent>(){
    @Override public void componentSelected(    final ButtonEvent buttonEvent){
      view.getSaveButton().disable();
      dispatch.execute(buildCheckContactDuplicationCommand(contactDTO),new CommandResultHandler<ListResult<ContactDTO>>(){
        @Override protected void onCommandSuccess(        ListResult<ContactDTO> result){
          if (result == null || result.isEmpty()) {
            updateContact(contactDTO,new CommandResultHandler<ContactDTO>(){
              @Override protected void onCommandSuccess(              ContactDTO updatedContactDTO){
                view.getSaveButton().enable();
              }
            }
,view.getDetailsContainer());
            return;
          }
          final DedupeContactDialog dedupeContactDialog=view.generateDedupeDialog();
          dedupeContactDialog.getPossibleDuplicatesGrid().getStore().add(result.getList());
          dedupeContactDialog.getFirstStepMainButton().addSelectionListener(new SelectionListener<ButtonEvent>(){
            @Override public void componentSelected(            ButtonEvent ce){
              updateContact(contactDTO,new CommandResultHandler<ContactDTO>(){
                @Override protected void onCommandSuccess(                ContactDTO result){
                  dedupeContactDialog.hide();
                }
              }
,view.getDetailsContainer());
            }
          }
);
          dedupeContactDialog.setSecondStepHandler(new DedupeContactDialog.SecondStepHandler(){
            @Override public void initialize(            final Integer contactId,            final ListStore<ContactDuplicatedProperty> propertiesStore){
              updateContact(contactDTO,new CommandResultHandler<ContactDTO>(){
                @Override protected void onCommandSuccess(                ContactDTO updatedContactDTO){
                  dispatch.execute(new GetContactDuplicatedProperties(contactId,updatedContactDTO.getId(),null),new CommandResultHandler<ListResult<ContactDuplicatedProperty>>(){
                    @Override protected void onCommandSuccess(                    ListResult<ContactDuplicatedProperty> result){
                      propertiesStore.add(result.getList());
                    }
                  }
,new LoadingMask(dedupeContactDialog));
                }
              }
,dedupeContactDialog);
            }
            @Override public void downloadImage(            String id,            final Image image){
              imageProvider.provideDataUrl(id,new SuccessCallback<String>(){
                @Override public void onSuccess(                String dataUrl){
                  image.setUrl(dataUrl);
                }
              }
);
            }
            @Override public void handleDedupeContact(            final Integer targetedContactId,            List<ContactDuplicatedProperty> selectedProperties){
              dispatch.execute(new DedupeContact(selectedProperties,contactDTO.getId(),targetedContactId),new CommandResultHandler<ContactDTO>(){
                @Override protected void onCommandSuccess(                ContactDTO targetedContactDTO){
                  dedupeContactDialog.hide();
                  final PageRequest currentRequest=injector.getPageManager().getCurrentPageRequest(false);
                  eventBus.navigateRequest(Page.CONTACT_DASHBOARD.requestWith(RequestParameter.ID,targetedContactId));
                  eventBus.fireEvent(new UpdateEvent(UpdateEvent.CONTACT_DELETE,currentRequest));
                }
              }
);
            }
            @Override public void handleCancel(){
              dedupeContactDialog.hide();
            }
          }
);
          dedupeContactDialog.addWindowListener(new WindowListener(){
            @Override public void windowHide(            WindowEvent windowEvent){
              super.windowHide(windowEvent);
              if (windowEvent.getType() == Events.Hide) {
                view.getSaveButton().enable();
              }
            }
          }
);
          dedupeContactDialog.show();
        }
      }
);
    }
  }
);
  view.getSaveButton().setEnabled(canEditContact());
  view.getSaveButton().setVisible(canEditContact());
  view.getDeleteButton().removeAllListeners();
  view.getDeleteButton().addSelectionListener(new SelectionListener<ButtonEvent>(){
    @Override public void componentSelected(    final ButtonEvent ce){
      onDeleteContact(contactDTO);
    }
  }
);
  view.getDeleteButton().setEnabled(canDeleteContact());
  view.getDeleteButton().setVisible(canDeleteContact());
  view.getExportButton().removeAllListeners();
  view.getExportButton().addSelectionListener(new SelectionListener<ButtonEvent>(){
    @Override public void componentSelected(    final ButtonEvent ce){
      onExportContact(contactDTO);
    }
  }
);
  queue.start();
  formPanel.add(gridLayout);
  view.fillContainer(formPanel);
}",0.9935104689604506
35338,"private void handleRequiredElement(final FlexibleElementDTO elementDTO,final IterableGroupPanel tabPanel,final IterableGroupItem tabItem,final ValueResult valueResult,final LayoutConstraintDTO constraintDTO,final Integer iterationId,final LayoutGroupDTO groupLayout){
  elementDTO.addRequiredValueHandler(new RequiredValueHandler(){
    @Override public void onRequiredValueChange(    RequiredValueEvent event){
      final Integer iterationId=tabPanel != null ? tabPanel.getCurrentIterationId() : null;
      currentPhaseRequiredElements.putActual(iterationId,elementDTO.getId(),event.isValueOn());
      if (isCurrentPhase(getCurrentProject().getCurrentPhase())) {
        activePhaseRequiredElements.putActual(iterationId,elementDTO.getId(),event.isValueOn());
      }
      if (event.isImmediate()) {
        if (view.getButtonSavePhase().isEnabled()) {
          view.getButtonSavePhase().fireEvent(Events.OnClick);
        }
 else {
          currentPhaseRequiredElements.saveState();
          if (isActivePhase(getCurrentDisplayedPhase())) {
            activePhaseRequiredElements.saveState();
          }
          refreshActionsToolbar();
        }
      }
      elementDTO.setFilledIn(currentPhaseRequiredElements.isActuallyTrue(elementDTO.getId()));
      view.getGridRequiredElements().getStore().update(elementDTO);
      if (iterationId != null) {
        elementDTO.getTabPanel().setElementValidity(elementDTO,event.isValueOn());
      }
      refreshRequiredElementContentPanelHeader();
    }
  }
);
  if (tabItem != null) {
    tabItem.setElementValidity(elementDTO,elementDTO.isCorrectRequiredValue(valueResult));
    tabItem.refreshTitle();
  }
  elementDTO.setGroup(groupLayout);
  elementDTO.setConstraint(constraintDTO);
  requiredElementsSet.add(elementDTO);
  view.getGridRequiredElements().getStore().removeAll();
  view.getGridRequiredElements().getStore().add(sortRequiredElements(new ArrayList<FlexibleElementDTO>(requiredElementsSet)));
  refreshRequiredElementContentPanelHeader();
  currentPhaseRequiredElements.putSaved(iterationId,elementDTO.getId(),elementDTO.isFilledIn());
  if (isCurrentPhase(getCurrentProject().getCurrentPhase())) {
    activePhaseRequiredElements.putSaved(iterationId,elementDTO.getId(),elementDTO.isFilledIn());
  }
}","private void handleRequiredElement(final FlexibleElementDTO elementDTO,final IterableGroupPanel tabPanel,final IterableGroupItem tabItem,final ValueResult valueResult,final LayoutConstraintDTO constraintDTO,final Integer iterationId,final LayoutGroupDTO groupLayout){
  elementDTO.addRequiredValueHandler(new RequiredValueHandler(){
    @Override public void onRequiredValueChange(    RequiredValueEvent event){
      final Integer iterationId=tabPanel != null ? tabPanel.getCurrentIterationId() : null;
      currentPhaseRequiredElements.putActual(iterationId,elementDTO.getId(),event.isValueOn());
      if (isCurrentPhase(getCurrentProject().getCurrentPhase())) {
        activePhaseRequiredElements.putActual(iterationId,elementDTO.getId(),event.isValueOn());
      }
      if (event.isImmediate()) {
        if (view.getButtonSavePhase().isEnabled()) {
          view.getButtonSavePhase().fireEvent(Events.OnClick);
        }
 else {
          currentPhaseRequiredElements.saveState();
          if (isActivePhase(getCurrentDisplayedPhase())) {
            activePhaseRequiredElements.saveState();
          }
          refreshActionsToolbar();
        }
      }
      elementDTO.setFilledIn(currentPhaseRequiredElements.isActuallyTrue(elementDTO.getId()));
      view.getGridRequiredElements().getStore().update(elementDTO);
      if (iterationId != null) {
        elementDTO.getTabPanel().setElementValidity(elementDTO,event.isValueOn());
      }
      refreshRequiredElementContentPanelHeader();
    }
  }
);
  if (tabItem != null) {
    tabItem.setElementValidity(elementDTO,elementDTO.isCorrectRequiredValue(valueResult));
    tabItem.refreshTitle();
  }
  elementDTO.setGroup(groupLayout);
  elementDTO.setConstraint(constraintDTO);
  if (getCurrentDisplayedPhase().getPhaseModel().getLayout().getGroups().contains(groupLayout)) {
    requiredElementsSet.add(elementDTO);
  }
  view.getGridRequiredElements().getStore().removeAll();
  view.getGridRequiredElements().getStore().add(sortRequiredElements(new ArrayList<FlexibleElementDTO>(requiredElementsSet)));
  refreshRequiredElementContentPanelHeader();
  currentPhaseRequiredElements.putSaved(iterationId,elementDTO.getId(),elementDTO.isFilledIn());
  if (isCurrentPhase(getCurrentProject().getCurrentPhase())) {
    activePhaseRequiredElements.putSaved(iterationId,elementDTO.getId(),elementDTO.isFilledIn());
  }
}",0.9776728209531989
35339,"public List<ContactDuplicatedProperty> extractProperties(Contact newContact,Contact oldContact,Language language){
  List<ContactDuplicatedProperty> properties=new ArrayList<>();
  for (  LayoutGroup group : newContact.getContactModel().getDetails().getLayout().getGroups()) {
    if (group.getHasIterations()) {
      continue;
    }
    for (    LayoutConstraint layoutConstraint : group.getConstraints()) {
      FlexibleElement element=layoutConstraint.getElement();
      String serializedNewValue;
      String serializedOldValue;
      String formattedNewValue;
      String formattedOldValue;
      ContactDuplicatedProperty.ValueType valueType=ContactDuplicatedProperty.ValueType.STRING;
      if (element instanceof DefaultContactFlexibleElement) {
        DefaultContactFlexibleElement defaultContactFlexibleElement=(DefaultContactFlexibleElement)element;
        serializedNewValue=defaultContactFlexibleElement.getSerializedValue(newContact);
        serializedOldValue=defaultContactFlexibleElement.getSerializedValue(oldContact);
        formattedNewValue=defaultContactFlexibleElement.getFormattedValue(newContact);
        formattedOldValue=defaultContactFlexibleElement.getFormattedValue(oldContact);
        if (((DefaultContactFlexibleElement)element).getType() == DefaultContactFlexibleElementType.PHOTO) {
          valueType=ContactDuplicatedProperty.ValueType.IMAGE;
        }
      }
 else {
        Value newValue=valueDAO.getValueByElementAndContainer(element.getId(),newContact.getId());
        Value oldValue=valueDAO.getValueByElementAndContainer(element.getId(),oldContact.getId());
        serializedNewValue=newValue.getValue();
        serializedOldValue=oldValue.getValue();
        formattedNewValue=modelPropertyService.getFormattedValue(element,newValue.getValue(),language);
        formattedOldValue=modelPropertyService.getFormattedValue(element,oldValue.getValue(),language);
      }
      if (serializedOldValue != null && serializedOldValue.isEmpty()) {
        serializedOldValue=null;
      }
      if (serializedNewValue != null && serializedNewValue.isEmpty()) {
        serializedNewValue=null;
      }
      if (Objects.equals(serializedNewValue,serializedOldValue)) {
        continue;
      }
      String propertyLabel=element.getLabel();
      if (propertyLabel == null && element instanceof DefaultContactFlexibleElement) {
        propertyLabel=modelPropertyService.getDefaultContactPropertyLabel(((DefaultContactFlexibleElement)element).getType(),language);
      }
      ContactDuplicatedProperty contactDuplicatedProperty=new ContactDuplicatedProperty();
      contactDuplicatedProperty.setPropertyLabel(propertyLabel);
      contactDuplicatedProperty.setSerializedNewValue(serializedNewValue);
      contactDuplicatedProperty.setSerializedOldValue(serializedOldValue);
      contactDuplicatedProperty.setFormattedNewValue(formattedNewValue);
      contactDuplicatedProperty.setFormattedOldValue(formattedOldValue);
      contactDuplicatedProperty.setFlexibleElementId(element.getId());
      contactDuplicatedProperty.setValueType(valueType);
      properties.add(contactDuplicatedProperty);
    }
  }
  return properties;
}","public List<ContactDuplicatedProperty> extractProperties(Contact newContact,Contact oldContact,Language language){
  List<ContactDuplicatedProperty> properties=new ArrayList<>();
  for (  LayoutGroup group : newContact.getContactModel().getDetails().getLayout().getGroups()) {
    if (group.getHasIterations()) {
      continue;
    }
    for (    LayoutConstraint layoutConstraint : group.getConstraints()) {
      FlexibleElement element=layoutConstraint.getElement();
      String serializedNewValue=null;
      String serializedOldValue=null;
      String formattedNewValue=null;
      String formattedOldValue=null;
      ContactDuplicatedProperty.ValueType valueType=ContactDuplicatedProperty.ValueType.STRING;
      if (element instanceof DefaultContactFlexibleElement) {
        DefaultContactFlexibleElement defaultContactFlexibleElement=(DefaultContactFlexibleElement)element;
        serializedNewValue=defaultContactFlexibleElement.getSerializedValue(newContact);
        serializedOldValue=defaultContactFlexibleElement.getSerializedValue(oldContact);
        formattedNewValue=defaultContactFlexibleElement.getFormattedValue(newContact);
        formattedOldValue=defaultContactFlexibleElement.getFormattedValue(oldContact);
        if (((DefaultContactFlexibleElement)element).getType() == DefaultContactFlexibleElementType.PHOTO) {
          valueType=ContactDuplicatedProperty.ValueType.IMAGE;
        }
      }
 else {
        Value newValue=valueDAO.getValueByElementAndContainer(element.getId(),newContact.getId());
        Value oldValue=valueDAO.getValueByElementAndContainer(element.getId(),oldContact.getId());
        if (newValue != null) {
          serializedNewValue=newValue.getValue();
          formattedNewValue=modelPropertyService.getFormattedValue(element,newValue.getValue(),language);
        }
        if (oldValue != null) {
          serializedOldValue=oldValue.getValue();
          formattedOldValue=modelPropertyService.getFormattedValue(element,oldValue.getValue(),language);
        }
      }
      if (serializedOldValue != null && serializedOldValue.isEmpty()) {
        serializedOldValue=null;
      }
      if (serializedNewValue != null && serializedNewValue.isEmpty()) {
        serializedNewValue=null;
      }
      if (Objects.equals(serializedNewValue,serializedOldValue)) {
        continue;
      }
      String propertyLabel=element.getLabel();
      if (propertyLabel == null && element instanceof DefaultContactFlexibleElement) {
        propertyLabel=modelPropertyService.getDefaultContactPropertyLabel(((DefaultContactFlexibleElement)element).getType(),language);
      }
      ContactDuplicatedProperty contactDuplicatedProperty=new ContactDuplicatedProperty();
      contactDuplicatedProperty.setPropertyLabel(propertyLabel);
      contactDuplicatedProperty.setSerializedNewValue(serializedNewValue);
      contactDuplicatedProperty.setSerializedOldValue(serializedOldValue);
      contactDuplicatedProperty.setFormattedNewValue(formattedNewValue);
      contactDuplicatedProperty.setFormattedOldValue(formattedOldValue);
      contactDuplicatedProperty.setFlexibleElementId(element.getId());
      contactDuplicatedProperty.setValueType(valueType);
      properties.add(contactDuplicatedProperty);
    }
  }
  return properties;
}",0.9487812403579142
35340,"protected boolean userCanPerformChangeTypeOnContact(ValueEventChangeType changeType,ContactDTO contact){
  return !contact.getContactModel().isUnderMaintenance();
}","protected boolean userCanPerformChangeTypeOnContact(ValueEventChangeType changeType,ContactDTO contact){
  return !contact.getContactModel().isUnderMaintenance() && ProfileUtils.isGranted(auth(),GlobalPermissionEnum.EDIT_VISIBLE_CONTACTS);
}",0.8098765432098766
35341,"/** 
 * List the dependencies of the given element.
 * @param computationElement Computation element to prepare.
 * @param model Model of the current container.
 */
private void prepareForComputationElement(final ComputationElementDTO computationElement,final IsModel model){
  final Computation computation=computationElement.getComputationForModel(model);
  computations.put(computationElement,computation);
  for (  final Dependency dependency : computation.getDependencies()) {
    List<ComputationElementDTO> list=dependencies.get(((SingleDependency)dependency).getFlexibleElement());
    if (list == null) {
      list=new ArrayList<ComputationElementDTO>();
      if (dependency instanceof SingleDependency) {
        dependencies.put(((SingleDependency)dependency).getFlexibleElement(),list);
      }
    }
    list.add(computationElement);
  }
}","/** 
 * List the dependencies of the given element.
 * @param computationElement Computation element to prepare.
 * @param model Model of the current container.
 */
private void prepareForComputationElement(final ComputationElementDTO computationElement,final IsModel model){
  final Computation computation=computationElement.getComputationForModel(model);
  computations.put(computationElement,computation);
  for (  final Dependency dependency : computation.getDependencies()) {
    List<ComputationElementDTO> list;
    if (dependency instanceof SingleDependency) {
      list=dependencies.get(((SingleDependency)dependency).getFlexibleElement());
    }
 else     if (dependency instanceof CollectionDependency) {
      list=dependencies.get(((CollectionDependency)dependency).getFlexibleElement());
    }
 else {
      continue;
    }
    if (list == null) {
      list=new ArrayList<ComputationElementDTO>();
      if (dependency instanceof SingleDependency) {
        dependencies.put(((SingleDependency)dependency).getFlexibleElement(),list);
      }
    }
    list.add(computationElement);
  }
}",0.8723186925434117
35342,"private void handleRequiredElement(final FlexibleElementDTO elementDTO,final IterableGroupPanel tabPanel,final IterableGroupItem tabItem,final ValueResult valueResult,final LayoutConstraintDTO constraintDTO,final Integer iterationId,final LayoutGroupDTO groupLayout){
  elementDTO.addRequiredValueHandler(new RequiredValueHandler(){
    @Override public void onRequiredValueChange(    RequiredValueEvent event){
      final Integer iterationId=tabPanel != null ? tabPanel.getCurrentIterationId() : null;
      currentPhaseRequiredElements.putActual(iterationId,elementDTO.getId(),event.isValueOn());
      if (isCurrentPhase(getCurrentProject().getCurrentPhase())) {
        activePhaseRequiredElements.putActual(iterationId,elementDTO.getId(),event.isValueOn());
      }
      if (event.isImmediate()) {
        view.getButtonSavePhase().fireEvent(Events.OnClick);
      }
      elementDTO.setFilledIn(currentPhaseRequiredElements.isActuallyTrue(elementDTO.getId()));
      view.getGridRequiredElements().getStore().update(elementDTO);
      if (iterationId != null) {
        elementDTO.getTabPanel().setElementValidity(elementDTO,event.isValueOn());
      }
      refreshRequiredElementContentPanelHeader();
    }
  }
);
  if (tabItem != null) {
    tabItem.setElementValidity(elementDTO,elementDTO.isCorrectRequiredValue(valueResult));
    tabItem.refreshTitle();
  }
  elementDTO.setGroup(groupLayout);
  elementDTO.setConstraint(constraintDTO);
  requiredElementsSet.add(elementDTO);
  view.getGridRequiredElements().getStore().removeAll();
  view.getGridRequiredElements().getStore().add(sortRequiredElements(new ArrayList<FlexibleElementDTO>(requiredElementsSet)));
  refreshRequiredElementContentPanelHeader();
  currentPhaseRequiredElements.putSaved(iterationId,elementDTO.getId(),elementDTO.isFilledIn());
  if (isCurrentPhase(getCurrentProject().getCurrentPhase())) {
    activePhaseRequiredElements.putSaved(iterationId,elementDTO.getId(),elementDTO.isFilledIn());
  }
}","private void handleRequiredElement(final FlexibleElementDTO elementDTO,final IterableGroupPanel tabPanel,final IterableGroupItem tabItem,final ValueResult valueResult,final LayoutConstraintDTO constraintDTO,final Integer iterationId,final LayoutGroupDTO groupLayout){
  elementDTO.addRequiredValueHandler(new RequiredValueHandler(){
    @Override public void onRequiredValueChange(    RequiredValueEvent event){
      final Integer iterationId=tabPanel != null ? tabPanel.getCurrentIterationId() : null;
      currentPhaseRequiredElements.putActual(iterationId,elementDTO.getId(),event.isValueOn());
      if (isCurrentPhase(getCurrentProject().getCurrentPhase())) {
        activePhaseRequiredElements.putActual(iterationId,elementDTO.getId(),event.isValueOn());
      }
      if (event.isImmediate()) {
        if (view.getButtonSavePhase().isEnabled()) {
          view.getButtonSavePhase().fireEvent(Events.OnClick);
        }
 else {
          currentPhaseRequiredElements.saveState();
          if (isActivePhase(getCurrentDisplayedPhase())) {
            activePhaseRequiredElements.saveState();
          }
          refreshActionsToolbar();
        }
      }
      elementDTO.setFilledIn(currentPhaseRequiredElements.isActuallyTrue(elementDTO.getId()));
      view.getGridRequiredElements().getStore().update(elementDTO);
      if (iterationId != null) {
        elementDTO.getTabPanel().setElementValidity(elementDTO,event.isValueOn());
      }
      refreshRequiredElementContentPanelHeader();
    }
  }
);
  if (tabItem != null) {
    tabItem.setElementValidity(elementDTO,elementDTO.isCorrectRequiredValue(valueResult));
    tabItem.refreshTitle();
  }
  elementDTO.setGroup(groupLayout);
  elementDTO.setConstraint(constraintDTO);
  requiredElementsSet.add(elementDTO);
  view.getGridRequiredElements().getStore().removeAll();
  view.getGridRequiredElements().getStore().add(sortRequiredElements(new ArrayList<FlexibleElementDTO>(requiredElementsSet)));
  refreshRequiredElementContentPanelHeader();
  currentPhaseRequiredElements.putSaved(iterationId,elementDTO.getId(),elementDTO.isFilledIn());
  if (isCurrentPhase(getCurrentProject().getCurrentPhase())) {
    activePhaseRequiredElements.putSaved(iterationId,elementDTO.getId(),elementDTO.isFilledIn());
  }
}",0.9178403755868544
35343,"@Override public void onRequiredValueChange(RequiredValueEvent event){
  final Integer iterationId=tabPanel != null ? tabPanel.getCurrentIterationId() : null;
  currentPhaseRequiredElements.putActual(iterationId,elementDTO.getId(),event.isValueOn());
  if (isCurrentPhase(getCurrentProject().getCurrentPhase())) {
    activePhaseRequiredElements.putActual(iterationId,elementDTO.getId(),event.isValueOn());
  }
  if (event.isImmediate()) {
    view.getButtonSavePhase().fireEvent(Events.OnClick);
  }
  elementDTO.setFilledIn(currentPhaseRequiredElements.isActuallyTrue(elementDTO.getId()));
  view.getGridRequiredElements().getStore().update(elementDTO);
  if (iterationId != null) {
    elementDTO.getTabPanel().setElementValidity(elementDTO,event.isValueOn());
  }
  refreshRequiredElementContentPanelHeader();
}","@Override public void onRequiredValueChange(RequiredValueEvent event){
  final Integer iterationId=tabPanel != null ? tabPanel.getCurrentIterationId() : null;
  currentPhaseRequiredElements.putActual(iterationId,elementDTO.getId(),event.isValueOn());
  if (isCurrentPhase(getCurrentProject().getCurrentPhase())) {
    activePhaseRequiredElements.putActual(iterationId,elementDTO.getId(),event.isValueOn());
  }
  if (event.isImmediate()) {
    if (view.getButtonSavePhase().isEnabled()) {
      view.getButtonSavePhase().fireEvent(Events.OnClick);
    }
 else {
      currentPhaseRequiredElements.saveState();
      if (isActivePhase(getCurrentDisplayedPhase())) {
        activePhaseRequiredElements.saveState();
      }
      refreshActionsToolbar();
    }
  }
  elementDTO.setFilledIn(currentPhaseRequiredElements.isActuallyTrue(elementDTO.getId()));
  view.getGridRequiredElements().getStore().update(elementDTO);
  if (iterationId != null) {
    elementDTO.getTabPanel().setElementValidity(elementDTO,event.isValueOn());
  }
  refreshRequiredElementContentPanelHeader();
}",0.861522198731501
35344,"@Override public List<Contact> findContactsByNameOrEmail(Integer organizationId,String search,boolean withDeleted,boolean onlyWithoutUser,ContactModelType allowedType,Set<Integer> allowedModelIds,Set<Integer> excludedIds,Integer checkboxElementId){
  CriteriaBuilder criteriaBuilder=em().getCriteriaBuilder();
  CriteriaQuery<Contact> criteriaQuery=criteriaBuilder.createQuery(Contact.class);
  Root<Contact> contactRoot=criteriaQuery.from(Contact.class);
  Join<Object,Object> userJoin=contactRoot.join(""String_Node_Str"",JoinType.LEFT);
  Join<Object,Object> organizationJoin=contactRoot.join(""String_Node_Str"",JoinType.LEFT);
  Join<Object,Object> contactModelJoin=contactRoot.join(""String_Node_Str"",JoinType.LEFT);
  Join<Object,Object> contactModelOrganizationJoin=contactModelJoin.join(""String_Node_Str"",JoinType.LEFT);
  List<Predicate> andPredicates=new ArrayList<>();
  List<Predicate> orPredicates=new ArrayList<>();
  andPredicates.add(criteriaBuilder.equal(contactModelOrganizationJoin.get(""String_Node_Str""),organizationId));
  if (search != null && !search.isEmpty()) {
    Predicate searchContactCriteria;
    Predicate searchUserCriteria;
    Predicate searchOrganizationCriteria;
    if (isEmailAddress(search)) {
      searchContactCriteria=criteriaBuilder.equal(criteriaBuilder.upper(contactRoot.get(""String_Node_Str"").as(String.class)),search.toUpperCase());
      searchUserCriteria=criteriaBuilder.equal(criteriaBuilder.upper(userJoin.get(""String_Node_Str"").as(String.class)),search.toUpperCase());
    }
 else     if (isNumber(search)) {
      searchContactCriteria=criteriaBuilder.or(criteriaBuilder.equal(contactRoot.get(""String_Node_Str"").as(String.class),search),criteriaBuilder.like(criteriaBuilder.upper(contactRoot.get(""String_Node_Str"").as(String.class)),""String_Node_Str"" + search + ""String_Node_Str""));
      searchUserCriteria=criteriaBuilder.or(criteriaBuilder.equal(userJoin.get(""String_Node_Str"").as(String.class),search),criteriaBuilder.like(criteriaBuilder.upper(userJoin.get(""String_Node_Str"").as(String.class)),""String_Node_Str"" + search + ""String_Node_Str""));
      searchOrganizationCriteria=criteriaBuilder.and(criteriaBuilder.isNull(contactRoot.get(""String_Node_Str"")),criteriaBuilder.isNull(contactRoot.get(""String_Node_Str"")),criteriaBuilder.isNotNull(organizationJoin.get(""String_Node_Str"")),criteriaBuilder.equal(criteriaBuilder.upper(organizationJoin.get(""String_Node_Str"").as(String.class)),""String_Node_Str"" + search + ""String_Node_Str""));
      orPredicates.add(searchOrganizationCriteria);
    }
 else {
      searchContactCriteria=criteriaBuilder.or(criteriaBuilder.greaterThanOrEqualTo(criteriaBuilder.function(""String_Node_Str"",Float.class,criteriaBuilder.upper(contactRoot.get(""String_Node_Str"").as(String.class)),criteriaBuilder.literal(search.toUpperCase())),MIN_SIMILARITY_SCORE),criteriaBuilder.greaterThanOrEqualTo(criteriaBuilder.function(""String_Node_Str"",Float.class,criteriaBuilder.upper(contactRoot.get(""String_Node_Str"").as(String.class)),criteriaBuilder.literal(search.toUpperCase())),MIN_SIMILARITY_SCORE));
      searchUserCriteria=criteriaBuilder.or(criteriaBuilder.greaterThanOrEqualTo(criteriaBuilder.function(""String_Node_Str"",Float.class,criteriaBuilder.upper(userJoin.get(""String_Node_Str"").as(String.class)),criteriaBuilder.literal(search.toUpperCase())),MIN_SIMILARITY_SCORE),criteriaBuilder.greaterThanOrEqualTo(criteriaBuilder.function(""String_Node_Str"",Float.class,criteriaBuilder.upper(userJoin.get(""String_Node_Str"").as(String.class)),criteriaBuilder.literal(search.toUpperCase())),MIN_SIMILARITY_SCORE));
      searchOrganizationCriteria=criteriaBuilder.and(criteriaBuilder.isNull(contactRoot.get(""String_Node_Str"")),criteriaBuilder.isNull(contactRoot.get(""String_Node_Str"")),criteriaBuilder.isNotNull(organizationJoin.get(""String_Node_Str"")),criteriaBuilder.greaterThanOrEqualTo(criteriaBuilder.function(""String_Node_Str"",Float.class,criteriaBuilder.upper(organizationJoin.get(""String_Node_Str"").as(String.class)),criteriaBuilder.literal(search.toUpperCase())),MIN_SIMILARITY_SCORE));
      orPredicates.add(searchOrganizationCriteria);
    }
    orPredicates.add(searchContactCriteria);
    if (!onlyWithoutUser) {
      orPredicates.add(criteriaBuilder.and(criteriaBuilder.isNull(contactRoot.get(""String_Node_Str"")),criteriaBuilder.isNull(contactRoot.get(""String_Node_Str"")),criteriaBuilder.isNotNull(userJoin.get(""String_Node_Str"")),criteriaBuilder.or(searchUserCriteria)));
    }
  }
  if (!withDeleted) {
    andPredicates.add(criteriaBuilder.and(contactRoot.get(""String_Node_Str"").isNull()));
  }
  if (onlyWithoutUser) {
    andPredicates.add(userJoin.get(""String_Node_Str"").isNull());
  }
  if (allowedModelIds != null && !allowedModelIds.isEmpty()) {
    andPredicates.add(criteriaBuilder.in(contactModelJoin.get(""String_Node_Str"").in(allowedModelIds)));
  }
  if (allowedType != null) {
    andPredicates.add(criteriaBuilder.equal(contactModelJoin.get(""String_Node_Str""),allowedType));
  }
  if (excludedIds != null && !excludedIds.isEmpty()) {
    andPredicates.add(criteriaBuilder.not(contactRoot.get(""String_Node_Str"").in(excludedIds)));
  }
  if (checkboxElementId != null) {
    List<Integer> contactIds=valueDAO.findContainerIdByElementAndValue(checkboxElementId,""String_Node_Str"");
    if (!contactIds.isEmpty()) {
      andPredicates.add(contactRoot.get(""String_Node_Str"").in(contactIds));
    }
 else {
      return Collections.emptyList();
    }
  }
  andPredicates.add(criteriaBuilder.or(orPredicates.toArray(new Predicate[orPredicates.size()])));
  criteriaQuery.where(andPredicates.toArray(new Predicate[andPredicates.size()]));
  criteriaQuery.select(contactRoot);
  criteriaQuery.orderBy(criteriaBuilder.asc(contactRoot.get(""String_Node_Str"")));
  return em().createQuery(criteriaQuery).getResultList();
}","@Override public List<Contact> findContactsByNameOrEmail(Integer organizationId,String search,boolean withDeleted,boolean onlyWithoutUser,ContactModelType allowedType,Set<Integer> allowedModelIds,Set<Integer> excludedIds,Integer checkboxElementId){
  CriteriaBuilder criteriaBuilder=em().getCriteriaBuilder();
  CriteriaQuery<Contact> criteriaQuery=criteriaBuilder.createQuery(Contact.class);
  Root<Contact> contactRoot=criteriaQuery.from(Contact.class);
  Join<Object,Object> userJoin=contactRoot.join(""String_Node_Str"",JoinType.LEFT);
  Join<Object,Object> organizationJoin=contactRoot.join(""String_Node_Str"",JoinType.LEFT);
  Join<Object,Object> contactModelJoin=contactRoot.join(""String_Node_Str"",JoinType.LEFT);
  Join<Object,Object> contactModelOrganizationJoin=contactModelJoin.join(""String_Node_Str"",JoinType.LEFT);
  List<Predicate> andPredicates=new ArrayList<>();
  List<Predicate> orPredicates=new ArrayList<>();
  andPredicates.add(criteriaBuilder.equal(contactModelOrganizationJoin.get(""String_Node_Str""),organizationId));
  if (search != null && !search.isEmpty()) {
    Predicate searchContactCriteria;
    Predicate searchUserCriteria;
    Predicate searchOrganizationCriteria;
    if (isEmailAddress(search)) {
      searchContactCriteria=criteriaBuilder.equal(criteriaBuilder.upper(contactRoot.get(""String_Node_Str"").as(String.class)),search.toUpperCase());
      searchUserCriteria=criteriaBuilder.equal(criteriaBuilder.upper(userJoin.get(""String_Node_Str"").as(String.class)),search.toUpperCase());
    }
 else     if (isNumber(search)) {
      searchContactCriteria=criteriaBuilder.or(criteriaBuilder.equal(contactRoot.get(""String_Node_Str"").as(String.class),search),criteriaBuilder.like(criteriaBuilder.upper(contactRoot.get(""String_Node_Str"").as(String.class)),""String_Node_Str"" + search + ""String_Node_Str""));
      searchUserCriteria=criteriaBuilder.or(criteriaBuilder.equal(userJoin.get(""String_Node_Str"").as(String.class),search),criteriaBuilder.like(criteriaBuilder.upper(userJoin.get(""String_Node_Str"").as(String.class)),""String_Node_Str"" + search + ""String_Node_Str""));
      searchOrganizationCriteria=criteriaBuilder.and(criteriaBuilder.isNull(contactRoot.get(""String_Node_Str"")),criteriaBuilder.isNull(contactRoot.get(""String_Node_Str"")),criteriaBuilder.isNotNull(organizationJoin.get(""String_Node_Str"")),criteriaBuilder.equal(criteriaBuilder.upper(organizationJoin.get(""String_Node_Str"").as(String.class)),""String_Node_Str"" + search + ""String_Node_Str""));
      orPredicates.add(searchOrganizationCriteria);
    }
 else {
      searchContactCriteria=criteriaBuilder.or(criteriaBuilder.greaterThanOrEqualTo(criteriaBuilder.function(""String_Node_Str"",Float.class,criteriaBuilder.upper(contactRoot.get(""String_Node_Str"").as(String.class)),criteriaBuilder.literal(search.toUpperCase())),MIN_SIMILARITY_SCORE),criteriaBuilder.greaterThanOrEqualTo(criteriaBuilder.function(""String_Node_Str"",Float.class,criteriaBuilder.upper(contactRoot.get(""String_Node_Str"").as(String.class)),criteriaBuilder.literal(search.toUpperCase())),MIN_SIMILARITY_SCORE));
      searchUserCriteria=criteriaBuilder.or(criteriaBuilder.greaterThanOrEqualTo(criteriaBuilder.function(""String_Node_Str"",Float.class,criteriaBuilder.upper(userJoin.get(""String_Node_Str"").as(String.class)),criteriaBuilder.literal(search.toUpperCase())),MIN_SIMILARITY_SCORE),criteriaBuilder.greaterThanOrEqualTo(criteriaBuilder.function(""String_Node_Str"",Float.class,criteriaBuilder.upper(userJoin.get(""String_Node_Str"").as(String.class)),criteriaBuilder.literal(search.toUpperCase())),MIN_SIMILARITY_SCORE));
      searchOrganizationCriteria=criteriaBuilder.and(criteriaBuilder.isNull(contactRoot.get(""String_Node_Str"")),criteriaBuilder.isNull(contactRoot.get(""String_Node_Str"")),criteriaBuilder.isNotNull(organizationJoin.get(""String_Node_Str"")),criteriaBuilder.greaterThanOrEqualTo(criteriaBuilder.function(""String_Node_Str"",Float.class,criteriaBuilder.upper(organizationJoin.get(""String_Node_Str"").as(String.class)),criteriaBuilder.literal(search.toUpperCase())),MIN_SIMILARITY_SCORE));
      orPredicates.add(searchOrganizationCriteria);
    }
    orPredicates.add(searchContactCriteria);
    if (!onlyWithoutUser) {
      orPredicates.add(criteriaBuilder.and(criteriaBuilder.isNull(contactRoot.get(""String_Node_Str"")),criteriaBuilder.isNull(contactRoot.get(""String_Node_Str"")),criteriaBuilder.isNotNull(userJoin.get(""String_Node_Str"")),criteriaBuilder.or(searchUserCriteria)));
    }
  }
  if (!withDeleted) {
    andPredicates.add(criteriaBuilder.and(contactRoot.get(""String_Node_Str"").isNull()));
  }
  if (onlyWithoutUser) {
    andPredicates.add(userJoin.get(""String_Node_Str"").isNull());
  }
  if (allowedModelIds != null && !allowedModelIds.isEmpty()) {
    andPredicates.add(contactModelJoin.get(""String_Node_Str"").in(allowedModelIds));
  }
  if (allowedType != null) {
    andPredicates.add(criteriaBuilder.equal(contactModelJoin.get(""String_Node_Str""),allowedType));
  }
  if (excludedIds != null && !excludedIds.isEmpty()) {
    andPredicates.add(criteriaBuilder.not(contactRoot.get(""String_Node_Str"").in(excludedIds)));
  }
  if (checkboxElementId != null) {
    List<Integer> contactIds=valueDAO.findContainerIdByElementAndValue(checkboxElementId,""String_Node_Str"");
    if (!contactIds.isEmpty()) {
      andPredicates.add(contactRoot.get(""String_Node_Str"").in(contactIds));
    }
 else {
      return Collections.emptyList();
    }
  }
  andPredicates.add(criteriaBuilder.or(orPredicates.toArray(new Predicate[orPredicates.size()])));
  criteriaQuery.where(andPredicates.toArray(new Predicate[andPredicates.size()]));
  criteriaQuery.select(contactRoot);
  criteriaQuery.orderBy(criteriaBuilder.asc(contactRoot.get(""String_Node_Str"")));
  return em().createQuery(criteriaQuery).getResultList();
}",0.9982776438167412
35345,"/** 
 * Throw a functional exception if a conflict if found.
 * @param project Updated project.
 * @param values Values to update.
 * @param projectId
 * @throws FunctionalException
 */
private List<String> searchForConflicts(final Project project,final List<ValueEventWrapper> values,final UserExecutionContext context) throws FunctionalException {
  final ArrayList<String> conflicts=new ArrayList<>();
  if (project == null) {
    return conflicts;
  }
  Integer projectOrgUnitId=null;
  if (project.getOrgUnit() == null) {
    if (project.getProjectModel().getStatus() != ProjectModelStatus.DRAFT) {
      LOGGER.error(""String_Node_Str"",project.getId());
    }
 else     if (context.getUser().getMainOrgUnitWithProfiles() == null) {
      LOGGER.error(""String_Node_Str"",context.getUser().getId());
    }
 else {
      projectOrgUnitId=context.getUser().getMainOrgUnitWithProfiles().getOrgUnit().getId();
    }
  }
 else {
    projectOrgUnitId=project.getOrgUnit().getId();
  }
  final Language language=context.getLanguage();
  ProfileDTO profile=null;
  if (projectOrgUnitId != null) {
    profile=Handlers.aggregateProfiles(context.getUser(),mapper).get(projectOrgUnitId);
  }
  if (project.getProjectModel().isUnderMaintenance()) {
    conflicts.add(i18nServer.t(language,""String_Node_Str"",project.getName(),project.getFullName()));
    return conflicts;
  }
  conflictsRelatedToComputedElements(values,project,conflicts,language);
  if (ProfileUtils.isGranted(profile,GlobalPermissionEnum.MODIFY_LOCKED_CONTENT)) {
    final boolean projectIsClosed=project.getCloseDate() != null;
    final boolean projectIsLocked=project.getAmendmentState() == AmendmentState.LOCKED;
    for (    final ValueEventWrapper value : values) {
      final FlexibleElementDTO source=value.getSourceElement();
      final boolean phaseIsClosed=conflictHandler.isParentPhaseClosed(source.getId(),project.getId());
      if (projectIsClosed || phaseIsClosed || (source.getAmendable() && projectIsLocked)) {
        final ValueResult result=new ValueResult();
        result.setValueObject(value.getSingleValue());
        result.setValuesObject(value.getTripletValue() != null ? Collections.<ListableValue>singletonList(value.getTripletValue()) : null);
        if (!source.isCorrectRequiredValue(result)) {
          conflicts.add(i18nServer.t(language,""String_Node_Str"",source.getFormattedLabel(),valueService.getCurrentValueFormatted(project.getId(),source)));
        }
      }
    }
    return conflicts;
  }
  if (project.getCloseDate() != null) {
    for (    final ValueEventWrapper valueEvent : values) {
      final FlexibleElementDTO source=valueEvent.getSourceElement();
      conflicts.add(i18nServer.t(language,""String_Node_Str"",source.getFormattedLabel(),valueService.getCurrentValueFormatted(project.getId(),source),getTargetValueFormatted(valueEvent)));
    }
  }
 else {
    Iterator<ValueEventWrapper> iterator=values.iterator();
    while (iterator.hasNext()) {
      final ValueEventWrapper valueEvent=iterator.next();
      final FlexibleElementDTO source=valueEvent.getSourceElement();
      if (conflictHandler.isParentPhaseClosed(source.getId(),project.getId())) {
        iterator.remove();
        conflicts.add(i18nServer.t(language,""String_Node_Str"",source.getFormattedLabel(),valueService.getCurrentValueFormatted(project.getId(),source),getTargetValueFormatted(valueEvent)));
      }
    }
    if (project.getAmendmentState() == AmendmentState.LOCKED) {
      iterator=values.iterator();
      while (iterator.hasNext()) {
        final ValueEventWrapper valueEvent=iterator.next();
        final FlexibleElementDTO source=valueEvent.getSourceElement();
        final boolean conflict;
        if (source.getAmendable()) {
          if (source instanceof BudgetElementDTO) {
            final BudgetSubFieldDTO divisorField=((BudgetElementDTO)source).getRatioDivisor();
            final Value value=valueService.retrieveCurrentValue(project.getId(),source.getId(),valueEvent.getIterationId());
            conflict=getValueOfSubField(value.getValue(),divisorField) != getValueOfSubField(valueEvent.getSingleValue(),divisorField);
          }
 else {
            conflict=true;
          }
        }
 else {
          conflict=false;
        }
        if (conflict) {
          iterator.remove();
          conflicts.add(i18nServer.t(language,""String_Node_Str"",source.getFormattedLabel(),valueService.getCurrentValueFormatted(project.getId(),source),getTargetValueFormatted(valueEvent)));
        }
      }
    }
  }
  return conflicts;
}","/** 
 * Throw a functional exception if a conflict if found.
 * @param project Updated project.
 * @param values Values to update.
 * @param projectId
 * @throws FunctionalException
 */
private List<String> searchForConflicts(final Project project,final List<ValueEventWrapper> values,final UserExecutionContext context) throws FunctionalException {
  final ArrayList<String> conflicts=new ArrayList<>();
  if (project == null) {
    return conflicts;
  }
  Integer projectOrgUnitId=null;
  if (project.getOrgUnit() == null) {
    if (project.getProjectModel().getStatus() != ProjectModelStatus.DRAFT) {
      LOGGER.error(""String_Node_Str"",project.getId());
    }
 else     if (context.getUser().getMainOrgUnitWithProfiles() == null) {
      LOGGER.error(""String_Node_Str"",context.getUser().getId());
    }
 else {
      projectOrgUnitId=context.getUser().getMainOrgUnitWithProfiles().getOrgUnit().getId();
    }
  }
 else {
    projectOrgUnitId=project.getOrgUnit().getId();
  }
  final Language language=context.getLanguage();
  ProfileDTO profile=null;
  if (projectOrgUnitId != null) {
    profile=Handlers.aggregateProfiles(context.getUser(),mapper).get(projectOrgUnitId);
  }
  if (project.getProjectModel().isUnderMaintenance()) {
    conflicts.add(i18nServer.t(language,""String_Node_Str"",project.getName(),project.getFullName()));
    return conflicts;
  }
  conflictsRelatedToComputedElements(values,project,conflicts,language);
  if (ProfileUtils.isGranted(profile,GlobalPermissionEnum.MODIFY_LOCKED_CONTENT)) {
    final boolean projectIsClosed=project.getCloseDate() != null;
    final boolean projectIsLocked=project.getAmendmentState() == AmendmentState.LOCKED;
    for (    final ValueEventWrapper value : values) {
      final FlexibleElementDTO source=value.getSourceElement();
      final boolean phaseIsClosed=conflictHandler.isParentPhaseClosed(source.getId(),project.getId());
      if (projectIsClosed || phaseIsClosed || (source.getAmendable() && projectIsLocked)) {
        final ValueResult result=new ValueResult();
        final String updateSingleValue=value.getSingleValue();
        final TripletValueDTO updateListValue=value.getTripletValue();
        final Set<Integer> multivaluedIdsValue=value.getMultivaluedIdsValue();
        if (updateSingleValue != null) {
          result.setValueObject(updateSingleValue);
        }
 else         if (updateListValue != null) {
          result.setValuesObject(Collections.<ListableValue>singletonList(value.getTripletValue()));
        }
 else         if (multivaluedIdsValue != null) {
          result.setValueObject(ValueResultUtils.mergeElements(new ArrayList<Integer>(multivaluedIdsValue)));
        }
 else {
          LOGGER.warn(""String_Node_Str"",source.getId(),source.getEntityName(),project.getId());
        }
        if (!source.isCorrectRequiredValue(result)) {
          conflicts.add(i18nServer.t(language,""String_Node_Str"",source.getFormattedLabel(),valueService.getCurrentValueFormatted(project.getId(),source)));
        }
      }
    }
    return conflicts;
  }
  if (project.getCloseDate() != null) {
    for (    final ValueEventWrapper valueEvent : values) {
      final FlexibleElementDTO source=valueEvent.getSourceElement();
      conflicts.add(i18nServer.t(language,""String_Node_Str"",source.getFormattedLabel(),valueService.getCurrentValueFormatted(project.getId(),source),getTargetValueFormatted(valueEvent)));
    }
  }
 else {
    Iterator<ValueEventWrapper> iterator=values.iterator();
    while (iterator.hasNext()) {
      final ValueEventWrapper valueEvent=iterator.next();
      final FlexibleElementDTO source=valueEvent.getSourceElement();
      if (conflictHandler.isParentPhaseClosed(source.getId(),project.getId())) {
        iterator.remove();
        conflicts.add(i18nServer.t(language,""String_Node_Str"",source.getFormattedLabel(),valueService.getCurrentValueFormatted(project.getId(),source),getTargetValueFormatted(valueEvent)));
      }
    }
    if (project.getAmendmentState() == AmendmentState.LOCKED) {
      iterator=values.iterator();
      while (iterator.hasNext()) {
        final ValueEventWrapper valueEvent=iterator.next();
        final FlexibleElementDTO source=valueEvent.getSourceElement();
        final boolean conflict;
        if (source.getAmendable()) {
          if (source instanceof BudgetElementDTO) {
            final BudgetSubFieldDTO divisorField=((BudgetElementDTO)source).getRatioDivisor();
            final Value value=valueService.retrieveCurrentValue(project.getId(),source.getId(),valueEvent.getIterationId());
            conflict=getValueOfSubField(value.getValue(),divisorField) != getValueOfSubField(valueEvent.getSingleValue(),divisorField);
          }
 else {
            conflict=true;
          }
        }
 else {
          conflict=false;
        }
        if (conflict) {
          iterator.remove();
          conflicts.add(i18nServer.t(language,""String_Node_Str"",source.getFormattedLabel(),valueService.getCurrentValueFormatted(project.getId(),source),getTargetValueFormatted(valueEvent)));
        }
      }
    }
  }
  return conflicts;
}",0.9246844609973102
35346,"private void updateWithIterationChanges(final ContactDTO contactDTO,final AsyncCallback<ContactDTO> callback,final Component target){
  final List<IterationChange> iterationChangesList=new ArrayList<IterationChange>(iterationChanges.values());
  Iterator<IterationChange> iterator=iterationChangesList.iterator();
  while (iterator.hasNext()) {
    IterationChange iterationChange=iterator.next();
    if (iterationChange.isCreated() && Profiler.INSTANCE.isOfflineMode()) {
      iterator.remove();
    }
  }
  dispatch.execute(new UpdateLayoutGroupIterations(iterationChangesList,contactDTO.getId()),new CommandResultHandler<ListResult<IterationChange>>(){
    @Override public void onCommandFailure(    final Throwable caught){
      N10N.error(I18N.CONSTANTS.save(),I18N.CONSTANTS.saveError());
    }
    @Override protected void onCommandSuccess(    ListResult<IterationChange> result){
      if (result != null) {
        for (        IterationChange iterationChange : result.getList()) {
          if (iterationChange.isDeleted()) {
            Iterator<ValueEvent> valuesIterator=valueChanges.iterator();
            while (valuesIterator.hasNext()) {
              ValueEvent valueEvent=valuesIterator.next();
              if (valueEvent.getIterationId() == iterationChange.getIterationId()) {
                valuesIterator.remove();
              }
            }
          }
 else           if (iterationChange.isCreated()) {
            int oldId=iterationChange.getIterationId();
            int newId=iterationChange.getNewIterationId();
            newIterationsTabItems.get(oldId).setIterationId(newId);
            for (            ValueEvent valueEvent : valueChanges) {
              if (valueEvent.getIterationId() == oldId) {
                valueEvent.setIterationId(newId);
              }
            }
          }
        }
        iterationChanges.clear();
        newIterationsTabItems.clear();
        updateContactValues(contactDTO,callback,target);
      }
 else {
        N10N.infoNotif(I18N.CONSTANTS.infoConfirmation(),I18N.CONSTANTS.saveConfirm());
      }
    }
  }
,view.getSaveButton(),new LoadingMask(view.getDetailsContainer()),new LoadingMask(target));
}","private void updateWithIterationChanges(final ContactDTO contactDTO,final AsyncCallback<ContactDTO> callback,final Component target){
  final List<IterationChange> iterationChangesList=new ArrayList<IterationChange>(iterationChanges.values());
  Iterator<IterationChange> iterator=iterationChangesList.iterator();
  while (iterator.hasNext()) {
    IterationChange iterationChange=iterator.next();
    if (iterationChange.isCreated() && Profiler.INSTANCE.isOfflineMode()) {
      iterator.remove();
    }
  }
  dispatch.execute(new UpdateLayoutGroupIterations(iterationChangesList,contactDTO.getId()),new CommandResultHandler<ListResult<IterationChange>>(){
    @Override public void onCommandFailure(    final Throwable caught){
      N10N.error(I18N.CONSTANTS.save(),I18N.CONSTANTS.saveError());
    }
    @Override protected void onCommandSuccess(    ListResult<IterationChange> result){
      if (result != null) {
        for (        IterationChange iterationChange : result.getList()) {
          if (iterationChange.isDeleted()) {
            Iterator<ValueEvent> valuesIterator=valueChanges.iterator();
            while (valuesIterator.hasNext()) {
              ValueEvent valueEvent=valuesIterator.next();
              Integer iterationId=valueEvent.getIterationId();
              if (iterationId != null && iterationId == iterationChange.getIterationId()) {
                valuesIterator.remove();
              }
            }
          }
 else           if (iterationChange.isCreated()) {
            int oldId=iterationChange.getIterationId();
            int newId=iterationChange.getNewIterationId();
            newIterationsTabItems.get(oldId).setIterationId(newId);
            for (            ValueEvent valueEvent : valueChanges) {
              Integer iterationId=valueEvent.getIterationId();
              if (iterationId != null && iterationId == oldId) {
                valueEvent.setIterationId(newId);
              }
            }
          }
        }
        iterationChanges.clear();
        newIterationsTabItems.clear();
        updateContactValues(contactDTO,callback,target);
      }
 else {
        N10N.infoNotif(I18N.CONSTANTS.infoConfirmation(),I18N.CONSTANTS.saveConfirm());
      }
    }
  }
,view.getSaveButton(),new LoadingMask(view.getDetailsContainer()),new LoadingMask(target));
}",0.9452296819787986
35347,"/** 
 * Method executed on save button action.
 */
private void onSaveAction(){
  if (!iterationChanges.isEmpty()) {
    final List<IterationChange> iterationChangesList=new ArrayList<IterationChange>(iterationChanges.values());
    Iterator<IterationChange> iterator=iterationChangesList.iterator();
    while (iterator.hasNext()) {
      IterationChange iterationChange=iterator.next();
      if (iterationChange.isCreated() && Profiler.INSTANCE.isOfflineMode()) {
        iterator.remove();
      }
    }
    UpdateLayoutGroupIterations updateLayoutGroupIterations=new UpdateLayoutGroupIterations(iterationChangesList,getOrgUnit().getId());
    dispatch.execute(updateLayoutGroupIterations,new CommandResultHandler<ListResult<IterationChange>>(){
      @Override public void onCommandFailure(      final Throwable caught){
        N10N.error(I18N.CONSTANTS.save(),I18N.CONSTANTS.saveError());
      }
      @Override protected void onCommandSuccess(      ListResult<IterationChange> result){
        if (result != null) {
          for (          IterationChange iterationChange : result.getList()) {
            if (iterationChange.isDeleted()) {
              Iterator<ValueEvent> valuesIterator=valueChanges.iterator();
              while (valuesIterator.hasNext()) {
                ValueEvent valueEvent=valuesIterator.next();
                if (valueEvent.getIterationId() == iterationChange.getIterationId()) {
                  valuesIterator.remove();
                }
              }
            }
 else             if (iterationChange.isCreated()) {
              int oldId=iterationChange.getIterationId();
              int newId=iterationChange.getNewIterationId();
              newIterationsTabItems.get(oldId).setIterationId(newId);
              for (              ValueEvent valueEvent : valueChanges) {
                if (valueEvent.getIterationId() == oldId) {
                  valueEvent.setIterationId(newId);
                }
              }
            }
          }
          iterationChanges.clear();
          newIterationsTabItems.clear();
          UpdateProject command=new UpdateProject(getOrgUnit().getId(),valueChanges);
          command.setOrgUnit(true);
          dispatch.execute(command,new CommandResultHandler<VoidResult>(){
            @Override public void onCommandFailure(            final Throwable caught){
              N10N.error(I18N.CONSTANTS.save(),I18N.CONSTANTS.saveError());
            }
            @Override public void onCommandSuccess(            final VoidResult result){
              updateOrgUnit();
            }
          }
,new LoadingMask(view.getContentOrgUnitDetailsPanel()));
        }
 else {
          N10N.infoNotif(I18N.CONSTANTS.infoConfirmation(),I18N.CONSTANTS.saveConfirm());
        }
      }
    }
,view.getSaveButton(),view.getExcelExportButton(),new LoadingMask(view.getContentOrgUnitDetailsPanel()));
  }
 else {
    UpdateProject command=new UpdateProject(getOrgUnit().getId(),valueChanges);
    command.setOrgUnit(true);
    dispatch.execute(command,new CommandResultHandler<VoidResult>(){
      @Override public void onCommandFailure(      final Throwable caught){
        N10N.error(I18N.CONSTANTS.save(),I18N.CONSTANTS.saveError());
      }
      @Override public void onCommandSuccess(      final VoidResult result){
        updateOrgUnit();
      }
    }
,view.getSaveButton(),view.getExcelExportButton(),new LoadingMask(view.getContentOrgUnitDetailsPanel()));
  }
}","/** 
 * Method executed on save button action.
 */
private void onSaveAction(){
  if (!iterationChanges.isEmpty()) {
    final List<IterationChange> iterationChangesList=new ArrayList<IterationChange>(iterationChanges.values());
    Iterator<IterationChange> iterator=iterationChangesList.iterator();
    while (iterator.hasNext()) {
      IterationChange iterationChange=iterator.next();
      if (iterationChange.isCreated() && Profiler.INSTANCE.isOfflineMode()) {
        iterator.remove();
      }
    }
    UpdateLayoutGroupIterations updateLayoutGroupIterations=new UpdateLayoutGroupIterations(iterationChangesList,getOrgUnit().getId());
    dispatch.execute(updateLayoutGroupIterations,new CommandResultHandler<ListResult<IterationChange>>(){
      @Override public void onCommandFailure(      final Throwable caught){
        N10N.error(I18N.CONSTANTS.save(),I18N.CONSTANTS.saveError());
      }
      @Override protected void onCommandSuccess(      ListResult<IterationChange> result){
        if (result != null) {
          for (          IterationChange iterationChange : result.getList()) {
            if (iterationChange.isDeleted()) {
              Iterator<ValueEvent> valuesIterator=valueChanges.iterator();
              while (valuesIterator.hasNext()) {
                ValueEvent valueEvent=valuesIterator.next();
                Integer iterationId=valueEvent.getIterationId();
                if (iterationId != null && iterationId == iterationChange.getIterationId()) {
                  valuesIterator.remove();
                }
              }
            }
 else             if (iterationChange.isCreated()) {
              int oldId=iterationChange.getIterationId();
              int newId=iterationChange.getNewIterationId();
              newIterationsTabItems.get(oldId).setIterationId(newId);
              for (              ValueEvent valueEvent : valueChanges) {
                Integer iterationId=valueEvent.getIterationId();
                if (iterationId != null && iterationId == oldId) {
                  valueEvent.setIterationId(newId);
                }
              }
            }
          }
          iterationChanges.clear();
          newIterationsTabItems.clear();
          UpdateProject command=new UpdateProject(getOrgUnit().getId(),valueChanges);
          command.setOrgUnit(true);
          dispatch.execute(command,new CommandResultHandler<VoidResult>(){
            @Override public void onCommandFailure(            final Throwable caught){
              N10N.error(I18N.CONSTANTS.save(),I18N.CONSTANTS.saveError());
            }
            @Override public void onCommandSuccess(            final VoidResult result){
              updateOrgUnit();
            }
          }
,new LoadingMask(view.getContentOrgUnitDetailsPanel()));
        }
 else {
          N10N.infoNotif(I18N.CONSTANTS.infoConfirmation(),I18N.CONSTANTS.saveConfirm());
        }
      }
    }
,view.getSaveButton(),view.getExcelExportButton(),new LoadingMask(view.getContentOrgUnitDetailsPanel()));
  }
 else {
    UpdateProject command=new UpdateProject(getOrgUnit().getId(),valueChanges);
    command.setOrgUnit(true);
    dispatch.execute(command,new CommandResultHandler<VoidResult>(){
      @Override public void onCommandFailure(      final Throwable caught){
        N10N.error(I18N.CONSTANTS.save(),I18N.CONSTANTS.saveError());
      }
      @Override public void onCommandSuccess(      final VoidResult result){
        updateOrgUnit();
      }
    }
,view.getSaveButton(),view.getExcelExportButton(),new LoadingMask(view.getContentOrgUnitDetailsPanel()));
  }
}",0.9643866591294517
35348,"/** 
 * Method executed on save button action.
 */
private void onSaveAction(){
  if (!iterationChanges.isEmpty()) {
    final List<IterationChange> iterationChangesList=new ArrayList<IterationChange>(iterationChanges.values());
    Iterator<IterationChange> iterator=iterationChangesList.iterator();
    while (iterator.hasNext()) {
      IterationChange iterationChange=iterator.next();
      if (iterationChange.isCreated() && Profiler.INSTANCE.isOfflineMode()) {
        iterator.remove();
      }
    }
    UpdateLayoutGroupIterations updateLayoutGroupIterations=new UpdateLayoutGroupIterations(iterationChangesList,getProject().getId());
    dispatch.execute(updateLayoutGroupIterations,new CommandResultHandler<ListResult<IterationChange>>(){
      @Override public void onCommandFailure(      final Throwable caught){
        N10N.error(I18N.CONSTANTS.save(),I18N.CONSTANTS.saveError());
      }
      @Override protected void onCommandSuccess(      ListResult<IterationChange> result){
        for (        IterationChange iterationChange : result.getList()) {
          if (iterationChange.isDeleted()) {
            Iterator<ValueEvent> valuesIterator=valueChanges.iterator();
            while (valuesIterator.hasNext()) {
              ValueEvent valueEvent=valuesIterator.next();
              if (valueEvent.getIterationId() == iterationChange.getIterationId()) {
                valuesIterator.remove();
              }
            }
          }
 else           if (iterationChange.isCreated()) {
            int oldId=iterationChange.getIterationId();
            int newId=iterationChange.getNewIterationId();
            newIterationsTabItems.get(oldId).setIterationId(newId);
            for (            ValueEvent valueEvent : valueChanges) {
              if (valueEvent.getIterationId() == oldId) {
                valueEvent.setIterationId(newId);
              }
            }
          }
        }
        iterationChanges.clear();
        newIterationsTabItems.clear();
        dispatch.execute(new UpdateProject(getProject().getId(),valueChanges),new CommandResultHandler<VoidResult>(){
          @Override public void onCommandFailure(          final Throwable caught){
            N10N.error(I18N.CONSTANTS.save(),I18N.CONSTANTS.saveError());
          }
          @Override public void onCommandSuccess(          final VoidResult result){
            updateProject();
          }
        }
,new LoadingMask(view.getMainPanel()));
      }
    }
,view.getSaveButton(),new LoadingMask(view.getMainPanel()));
  }
 else {
    dispatch.execute(new UpdateProject(getProject().getId(),valueChanges),new CommandResultHandler<VoidResult>(){
      @Override public void onCommandFailure(      final Throwable caught){
        N10N.error(I18N.CONSTANTS.save(),I18N.CONSTANTS.saveError());
      }
      @Override public void onCommandSuccess(      final VoidResult result){
        updateProject();
      }
    }
,view.getSaveButton(),new LoadingMask(view.getMainPanel()));
  }
}","/** 
 * Method executed on save button action.
 */
private void onSaveAction(){
  if (!iterationChanges.isEmpty()) {
    final List<IterationChange> iterationChangesList=new ArrayList<IterationChange>(iterationChanges.values());
    Iterator<IterationChange> iterator=iterationChangesList.iterator();
    while (iterator.hasNext()) {
      IterationChange iterationChange=iterator.next();
      if (iterationChange.isCreated() && Profiler.INSTANCE.isOfflineMode()) {
        iterator.remove();
      }
    }
    UpdateLayoutGroupIterations updateLayoutGroupIterations=new UpdateLayoutGroupIterations(iterationChangesList,getProject().getId());
    dispatch.execute(updateLayoutGroupIterations,new CommandResultHandler<ListResult<IterationChange>>(){
      @Override public void onCommandFailure(      final Throwable caught){
        N10N.error(I18N.CONSTANTS.save(),I18N.CONSTANTS.saveError());
      }
      @Override protected void onCommandSuccess(      ListResult<IterationChange> result){
        for (        IterationChange iterationChange : result.getList()) {
          if (iterationChange.isDeleted()) {
            Iterator<ValueEvent> valuesIterator=valueChanges.iterator();
            while (valuesIterator.hasNext()) {
              ValueEvent valueEvent=valuesIterator.next();
              Integer iterationId=valueEvent.getIterationId();
              if (iterationId != null && iterationId == iterationChange.getIterationId()) {
                valuesIterator.remove();
              }
            }
          }
 else           if (iterationChange.isCreated()) {
            int oldId=iterationChange.getIterationId();
            int newId=iterationChange.getNewIterationId();
            newIterationsTabItems.get(oldId).setIterationId(newId);
            for (            ValueEvent valueEvent : valueChanges) {
              Integer iterationId=valueEvent.getIterationId();
              if (iterationId != null && iterationId == oldId) {
                valueEvent.setIterationId(newId);
              }
            }
          }
        }
        iterationChanges.clear();
        newIterationsTabItems.clear();
        dispatch.execute(new UpdateProject(getProject().getId(),valueChanges),new CommandResultHandler<VoidResult>(){
          @Override public void onCommandFailure(          final Throwable caught){
            N10N.error(I18N.CONSTANTS.save(),I18N.CONSTANTS.saveError());
          }
          @Override public void onCommandSuccess(          final VoidResult result){
            updateProject();
          }
        }
,new LoadingMask(view.getMainPanel()));
      }
    }
,view.getSaveButton(),new LoadingMask(view.getMainPanel()));
  }
 else {
    dispatch.execute(new UpdateProject(getProject().getId(),valueChanges),new CommandResultHandler<VoidResult>(){
      @Override public void onCommandFailure(      final Throwable caught){
        N10N.error(I18N.CONSTANTS.save(),I18N.CONSTANTS.saveError());
      }
      @Override public void onCommandSuccess(      final VoidResult result){
        updateProject();
      }
    }
,view.getSaveButton(),new LoadingMask(view.getMainPanel()));
  }
}",0.9595959595959596
35349,"private void updateLayoutGroupIteration(ListResult<IterationChange> result){
  for (  IterationChange iterationChange : result.getList()) {
    if (iterationChange.isDeleted()) {
      Iterator<ValueEvent> valuesIterator=valueChanges.iterator();
      while (valuesIterator.hasNext()) {
        ValueEvent valueEvent=valuesIterator.next();
        if (valueEvent.getIterationId() == iterationChange.getIterationId()) {
          valuesIterator.remove();
        }
      }
    }
 else     if (iterationChange.isCreated()) {
      int oldId=iterationChange.getIterationId();
      int newId=iterationChange.getNewIterationId();
      newIterationsTabItems.get(oldId).setIterationId(newId);
      for (      ValueEvent valueEvent : valueChanges) {
        if (valueEvent.getIterationId() == oldId) {
          valueEvent.setIterationId(newId);
        }
      }
    }
  }
  iterationChanges.clear();
  newIterationsTabItems.clear();
}","private void updateLayoutGroupIteration(ListResult<IterationChange> result){
  for (  IterationChange iterationChange : result.getList()) {
    if (iterationChange.isDeleted()) {
      Iterator<ValueEvent> valuesIterator=valueChanges.iterator();
      while (valuesIterator.hasNext()) {
        ValueEvent valueEvent=valuesIterator.next();
        Integer iterationId=valueEvent.getIterationId();
        if (iterationId != null && iterationId == iterationChange.getIterationId()) {
          valuesIterator.remove();
        }
      }
    }
 else     if (iterationChange.isCreated()) {
      int oldId=iterationChange.getIterationId();
      int newId=iterationChange.getNewIterationId();
      newIterationsTabItems.get(oldId).setIterationId(newId);
      for (      ValueEvent valueEvent : valueChanges) {
        Integer iterationId=valueEvent.getIterationId();
        if (iterationId != null && iterationId == oldId) {
          valueEvent.setIterationId(newId);
        }
      }
    }
  }
  iterationChanges.clear();
  newIterationsTabItems.clear();
}",0.3819095477386934
35350,"public void setMember(boolean member){
  isMember=member;
}","public void setMember(boolean member){
  this.member=member;
}",0.9586776859504132
35351,"public boolean isMember(){
  return isMember;
}","public boolean isMember(){
  return member;
}",0.9565217391304348
35352,"public static ContactSheetData createContactListSimpleTab(final Integer projectId,final LayoutGroupDTO layoutGroup,final ContactListElementDTO contactListElement,final Exporter exporter,final I18nServer i18nTranslator,final Language language) throws Throwable {
  ContactSheetData result=new ContactSheetData(contactListElement.getLabel());
  boolean isFirst=true;
  List<ExportDataCell> iterationHeaders=new ArrayList<>();
  List<ExportDataCell> values=new ArrayList<>();
  List<ContactDTO> contacts=null;
  for (  LayoutConstraintDTO constraint : layoutGroup.getConstraints()) {
    FlexibleElementDTO element=constraint.getFlexibleElementDTO();
    ValueResult valueResult=exporter.execute(new GetValue(projectId,element.getId(),""String_Node_Str"" + element.getClass().getSimpleName(),-1,null));
    if (element == contactListElement) {
      Set<Integer> contactIds=new HashSet(ValueResultUtils.splitValuesAsInteger(valueResult.getValueObject()));
      if (!contactIds.isEmpty()) {
        contacts=exporter.execute(new GetContacts(contactIds)).getList();
      }
    }
 else {
      if (isFirst) {
        iterationHeaders.add(new ExportStringCell(ExporterUtil.getFlexibleElementLabel(element,i18nTranslator,language)));
      }
      values.add(valueResultToDataCell(element,valueResult,i18nTranslator,language));
    }
  }
  if (contacts == null || contacts.isEmpty()) {
    return result;
  }
  for (  ContactDTO contact : contacts) {
    List<ExportDataCell> line=new ArrayList<>();
    for (    LayoutGroupDTO group : contact.getContactModel().getDetails().getLayout().getGroups()) {
      if (group.getHasIterations()) {
        continue;
      }
      for (      LayoutConstraintDTO constraint : group.getConstraints()) {
        FlexibleElementDTO element=constraint.getFlexibleElementDTO();
        if (constraint.getFlexibleElementDTO() instanceof DefaultContactFlexibleElementDTO) {
          if (isFirst) {
            result.addHeader(new ExportStringCell(ExporterUtil.getFlexibleElementLabel(element,i18nTranslator,language)));
          }
          line.add(defaultValueToDataCell(element,contact));
        }
      }
    }
    line.addAll(values);
    result.addLine(line);
    isFirst=false;
  }
  result.addHeaders(iterationHeaders);
  return result;
}","public static ContactSheetData createContactListSimpleTab(final Integer projectId,final LayoutGroupDTO layoutGroup,final ContactListElementDTO contactListElement,final Exporter exporter,final I18nServer i18nTranslator,final Language language) throws Throwable {
  ContactSheetData result=new ContactSheetData(contactListElement.getLabel());
  boolean isFirst=true;
  List<ExportDataCell> iterationHeaders=new ArrayList<>();
  List<ExportDataCell> values=new ArrayList<>();
  List<ContactDTO> contacts=null;
  for (  LayoutConstraintDTO constraint : layoutGroup.getConstraints()) {
    FlexibleElementDTO element=constraint.getFlexibleElementDTO();
    ValueResult valueResult=exporter.execute(new GetValue(projectId,element.getId(),""String_Node_Str"" + element.getClass().getSimpleName(),null,null));
    if (element == contactListElement) {
      Set<Integer> contactIds=new HashSet(ValueResultUtils.splitValuesAsInteger(valueResult.getValueObject()));
      if (!contactIds.isEmpty()) {
        contacts=exporter.execute(new GetContacts(contactIds)).getList();
      }
    }
 else {
      if (isFirst) {
        iterationHeaders.add(new ExportStringCell(ExporterUtil.getFlexibleElementLabel(element,i18nTranslator,language)));
      }
      values.add(valueResultToDataCell(element,valueResult,i18nTranslator,language));
    }
  }
  if (contacts == null || contacts.isEmpty()) {
    return result;
  }
  for (  ContactDTO contact : contacts) {
    List<ExportDataCell> line=new ArrayList<>();
    for (    LayoutGroupDTO group : contact.getContactModel().getDetails().getLayout().getGroups()) {
      if (group.getHasIterations()) {
        continue;
      }
      for (      LayoutConstraintDTO constraint : group.getConstraints()) {
        FlexibleElementDTO element=constraint.getFlexibleElementDTO();
        if (constraint.getFlexibleElementDTO() instanceof DefaultContactFlexibleElementDTO) {
          if (isFirst) {
            result.addHeader(new ExportStringCell(ExporterUtil.getFlexibleElementLabel(element,i18nTranslator,language)));
          }
          line.add(defaultValueToDataCell(element,contact));
        }
      }
    }
    line.addAll(values);
    result.addLine(line);
    isFirst=false;
  }
  result.addHeaders(iterationHeaders);
  return result;
}",0.998681898066784
35353,"public void setMember(boolean isMember){
  set(IS_MEMBER,isMember);
}","public void setMember(boolean member){
  set(IS_MEMBER,member);
}",0.9402985074626866
35354,"@Override public void handleChange(List<ContactDTO> contacts,ValueEventChangeType changeType){
  fireEvents(serializeValue(contacts),changeType);
}","@Override public void handleChange(List<ContactDTO> contacts,ValueEventChangeType changeType){
  fireEvents(serializeValue(contacts),changeType);
  if (getValidates()) {
    handlerManager.fireEvent(new RequiredValueEvent(listComboBox.getListStore().getCount() > 0,true));
  }
}",0.691764705882353
35355,"@Override @SuppressWarnings(""String_Node_Str"") protected Component getComponent(final ValueResult valueResult,final boolean enabled){
  final ContactListComboBox listComboBox=new ContactListComboBox(getLimit(),getAllowedType(),getAllowedModelIds(),dispatch);
  if (Profiler.INSTANCE.isOfflineMode()) {
    listComboBox.setEnabled(false);
  }
 else {
    listComboBox.setEnabled(enabled);
  }
  listComboBox.setChangeHandler(new ContactListComboBox.ChangeHandler(){
    @Override public void handleChange(    List<ContactDTO> contacts,    ValueEventChangeType changeType){
      fireEvents(serializeValue(contacts),changeType);
    }
  }
);
  listComboBox.setCreateContactHandler(new ContactListComboBox.CreateContactHandler(){
    @Override public void handleContactCreation(    final ContactModelDTO contactModelDTO,    final String email,    final String firstName,    final String familyName,    final String organizationName,    final OrgUnitDTO mainOrgUnit,    final List<OrgUnitDTO> secondaryOrgUnits){
      CheckContactDuplication checkContactDuplication;
      if (contactModelDTO.getType() == ContactModelType.INDIVIDUAL) {
        checkContactDuplication=new CheckContactDuplication(null,email,familyName,firstName,contactModelDTO);
      }
 else {
        checkContactDuplication=new CheckContactDuplication(null,email,familyName,null,contactModelDTO);
      }
      dispatch.execute(checkContactDuplication,new AsyncCallback<ListResult<ContactDTO>>(){
        @Override public void onFailure(        Throwable caught){
          Log.error(""String_Node_Str"");
        }
        @Override public void onSuccess(        ListResult<ContactDTO> result){
          final HashMap<String,Object> properties=buildPropertyMap(contactModelDTO,email,firstName,familyName,organizationName,mainOrgUnit,secondaryOrgUnits);
          if (result == null || result.getSize() == 0) {
            createEntity(properties,listComboBox);
            return;
          }
          final DedupeContactDialog dedupeContactDialog=new DedupeContactDialog(true);
          dedupeContactDialog.getPossibleDuplicatesGrid().getStore().add(result.getList());
          dedupeContactDialog.getFirstStepMainButton().addSelectionListener(new SelectionListener<ButtonEvent>(){
            @Override public void componentSelected(            ButtonEvent ce){
              createEntity(properties,listComboBox);
              dedupeContactDialog.hide();
            }
          }
);
          dedupeContactDialog.setSecondStepHandler(new DedupeContactDialog.SecondStepHandler(){
            @Override public void initialize(            final Integer contactId,            final ListStore<ContactDuplicatedProperty> propertiesStore){
              dispatch.execute(new GetContactDuplicatedProperties(contactId,null,properties),new CommandResultHandler<ListResult<ContactDuplicatedProperty>>(){
                @Override protected void onCommandSuccess(                ListResult<ContactDuplicatedProperty> result){
                  propertiesStore.add(result.getList());
                }
              }
,new LoadingMask(dedupeContactDialog));
            }
            @Override public void downloadImage(            String id,            final Image image){
              imageProvider.provideDataUrl(id,new SuccessCallback<String>(){
                @Override public void onSuccess(                String dataUrl){
                  image.setUrl(dataUrl);
                }
              }
);
            }
            @Override public void handleDedupeContact(            final Integer targetedContactId,            List<ContactDuplicatedProperty> selectedProperties){
              dispatch.execute(new DedupeContact(selectedProperties,targetedContactId),new CommandResultHandler<ContactDTO>(){
                @Override protected void onCommandSuccess(                ContactDTO targetedContactDTO){
                  dedupeContactDialog.hide();
                  listComboBox.getListStore().add(targetedContactDTO);
                }
              }
);
            }
            @Override public void handleCancel(){
              dedupeContactDialog.hide();
            }
          }
);
          dedupeContactDialog.show();
        }
      }
);
    }
  }
);
  listComboBox.initComponent();
  dispatch.execute(new GetContacts(getAllowedType(),getAllowedModelIds()),new AsyncCallback<ListResult<ContactDTO>>(){
    @Override public void onFailure(    Throwable caught){
      Log.error(""String_Node_Str"",caught);
    }
    @Override public void onSuccess(    ListResult<ContactDTO> result){
      listComboBox.getAvailableValuesStore().add(result.getList());
      Set<Integer> contactIds=parseValue(valueResult);
      List<ContactDTO> contacts=new ArrayList<ContactDTO>();
      for (      ContactDTO contactDTO : result.getList()) {
        if (contactIds.contains(contactDTO.getId())) {
          contacts.add(contactDTO);
        }
      }
      listComboBox.initListStore(contacts);
    }
  }
);
  return Forms.adapter(getLabel(),listComboBox);
}","@Override @SuppressWarnings(""String_Node_Str"") protected Component getComponent(final ValueResult valueResult,final boolean enabled){
  final ContactListComboBox listComboBox=new ContactListComboBox(getLimit(),getAllowedType(),getAllowedModelIds(),dispatch);
  if (Profiler.INSTANCE.isOfflineMode()) {
    listComboBox.setEnabled(false);
  }
 else {
    listComboBox.setEnabled(enabled);
  }
  listComboBox.setChangeHandler(new ContactListComboBox.ChangeHandler(){
    @Override public void handleChange(    List<ContactDTO> contacts,    ValueEventChangeType changeType){
      fireEvents(serializeValue(contacts),changeType);
      if (getValidates()) {
        handlerManager.fireEvent(new RequiredValueEvent(listComboBox.getListStore().getCount() > 0,true));
      }
    }
  }
);
  listComboBox.setCreateContactHandler(new ContactListComboBox.CreateContactHandler(){
    @Override public void handleContactCreation(    final ContactModelDTO contactModelDTO,    final String email,    final String firstName,    final String familyName,    final String organizationName,    final OrgUnitDTO mainOrgUnit,    final List<OrgUnitDTO> secondaryOrgUnits){
      CheckContactDuplication checkContactDuplication;
      if (contactModelDTO.getType() == ContactModelType.INDIVIDUAL) {
        checkContactDuplication=new CheckContactDuplication(null,email,familyName,firstName,contactModelDTO);
      }
 else {
        checkContactDuplication=new CheckContactDuplication(null,email,familyName,null,contactModelDTO);
      }
      dispatch.execute(checkContactDuplication,new AsyncCallback<ListResult<ContactDTO>>(){
        @Override public void onFailure(        Throwable caught){
          Log.error(""String_Node_Str"");
        }
        @Override public void onSuccess(        ListResult<ContactDTO> result){
          final HashMap<String,Object> properties=buildPropertyMap(contactModelDTO,email,firstName,familyName,organizationName,mainOrgUnit,secondaryOrgUnits);
          if (result == null || result.getSize() == 0) {
            createEntity(properties,listComboBox);
            return;
          }
          final DedupeContactDialog dedupeContactDialog=new DedupeContactDialog(true);
          dedupeContactDialog.getPossibleDuplicatesGrid().getStore().add(result.getList());
          dedupeContactDialog.getFirstStepMainButton().addSelectionListener(new SelectionListener<ButtonEvent>(){
            @Override public void componentSelected(            ButtonEvent ce){
              createEntity(properties,listComboBox);
              dedupeContactDialog.hide();
            }
          }
);
          dedupeContactDialog.setSecondStepHandler(new DedupeContactDialog.SecondStepHandler(){
            @Override public void initialize(            final Integer contactId,            final ListStore<ContactDuplicatedProperty> propertiesStore){
              dispatch.execute(new GetContactDuplicatedProperties(contactId,null,properties),new CommandResultHandler<ListResult<ContactDuplicatedProperty>>(){
                @Override protected void onCommandSuccess(                ListResult<ContactDuplicatedProperty> result){
                  propertiesStore.add(result.getList());
                }
              }
,new LoadingMask(dedupeContactDialog));
            }
            @Override public void downloadImage(            String id,            final Image image){
              imageProvider.provideDataUrl(id,new SuccessCallback<String>(){
                @Override public void onSuccess(                String dataUrl){
                  image.setUrl(dataUrl);
                }
              }
);
            }
            @Override public void handleDedupeContact(            final Integer targetedContactId,            List<ContactDuplicatedProperty> selectedProperties){
              dispatch.execute(new DedupeContact(selectedProperties,targetedContactId),new CommandResultHandler<ContactDTO>(){
                @Override protected void onCommandSuccess(                ContactDTO targetedContactDTO){
                  dedupeContactDialog.hide();
                  listComboBox.getListStore().add(targetedContactDTO);
                }
              }
);
            }
            @Override public void handleCancel(){
              dedupeContactDialog.hide();
            }
          }
);
          dedupeContactDialog.show();
        }
      }
);
    }
  }
);
  listComboBox.initComponent();
  dispatch.execute(new GetContacts(getAllowedType(),getAllowedModelIds()),new AsyncCallback<ListResult<ContactDTO>>(){
    @Override public void onFailure(    Throwable caught){
      Log.error(""String_Node_Str"",caught);
    }
    @Override public void onSuccess(    ListResult<ContactDTO> result){
      listComboBox.getAvailableValuesStore().add(result.getList());
      Set<Integer> contactIds=parseValue(valueResult);
      List<ContactDTO> contacts=new ArrayList<ContactDTO>();
      for (      ContactDTO contactDTO : result.getList()) {
        if (contactIds.contains(contactDTO.getId())) {
          contacts.add(contactDTO);
        }
      }
      listComboBox.initListStore(contacts);
    }
  }
);
  return Forms.adapter(getLabel(),listComboBox);
}",0.9860009789525208
35356,"/** 
 * {@inheritDoc}
 */
@Override public void onBind(){
  view.getOrgUnitsTreeGrid().setTreeGridEventHandler(new TreeGridEventHandler<OrgUnitDTO>(){
    @Override public void onRowClickEvent(    final OrgUnitDTO rowElement){
      eventBus.navigateRequest(Page.ORGUNIT_DASHBOARD.requestWith(RequestParameter.ID,rowElement.getId()));
    }
  }
);
  if (auth().getSecondaryOrgUnitIds().isEmpty()) {
    view.getOrgUnitsTreeGrid().getDisplayOnlyMainOrgUnitCheckbox().setVisible(false);
  }
 else {
    view.getOrgUnitsTreeGrid().getDisplayOnlyMainOrgUnitCheckbox().setValue(true);
    view.getOrgUnitsTreeGrid().getDisplayOnlyMainOrgUnitCheckbox().addListener(Events.Change,new Listener<BaseEvent>(){
      @Override public void handleEvent(      BaseEvent event){
        loadReminders();
        loadMonitoredPoints();
        loadContacts();
        loadProjects(true);
        loadOrgUnits();
      }
    }
);
  }
  view.getProjectsList().init(RefreshMode.ON_FIRST_TIME,LoadingMode.CHUNK);
  view.setReminderOrMonitoredPointHandler(new ReminderOrMonitoredPointHandler(){
    @Override public void onLabelClickEvent(    Integer projectId){
      Profiler.INSTANCE.startScenario(Scenario.OPEN_PROJECT);
      eventBus.navigateRequest(Page.PROJECT_DASHBOARD.requestWith(RequestParameter.ID,projectId));
    }
  }
);
  eventBus.addHandler(OfflineEvent.getType(),new OfflineHandler(){
    @Override public void handleEvent(    OfflineEvent event){
      initializeMenuButtons(event.getState());
    }
  }
);
}","/** 
 * {@inheritDoc}
 */
@Override public void onBind(){
  view.getOrgUnitsTreeGrid().setTreeGridEventHandler(new TreeGridEventHandler<OrgUnitDTO>(){
    @Override public void onRowClickEvent(    final OrgUnitDTO rowElement){
      eventBus.navigateRequest(Page.ORGUNIT_DASHBOARD.requestWith(RequestParameter.ID,rowElement.getId()));
    }
  }
);
  if (auth().getSecondaryOrgUnitIds().isEmpty()) {
    view.getOrgUnitsTreeGrid().getDisplayOnlyMainOrgUnitCheckbox().setVisible(false);
  }
 else {
    view.getOrgUnitsTreeGrid().getDisplayOnlyMainOrgUnitCheckbox().setValue(true);
    view.getOrgUnitsTreeGrid().getDisplayOnlyMainOrgUnitCheckbox().addListener(Events.Change,new Listener<BaseEvent>(){
      @Override public void handleEvent(      BaseEvent event){
        loadReminders();
        loadMonitoredPoints();
        loadContacts();
        loadProjects(true);
        loadOrgUnits();
      }
    }
);
  }
  view.getProjectsList().init(RefreshMode.ON_FIRST_TIME,LoadingMode.CHUNK);
  view.setReminderOrMonitoredPointHandler(new ReminderOrMonitoredPointHandler(){
    @Override public void onLabelClickEvent(    Integer projectId){
      Profiler.INSTANCE.startScenario(Scenario.OPEN_PROJECT);
      eventBus.navigateRequest(Page.PROJECT_DASHBOARD.requestWith(RequestParameter.ID,projectId));
    }
  }
);
  eventBus.addHandler(OfflineEvent.getType(),new OfflineHandler(){
    @Override public void handleEvent(    OfflineEvent event){
      initializeMenuButtons(event.getState());
      boolean enableContact=true;
      if (ApplicationState.OFFLINE == event.getState()) {
        view.getContactsList().getView().clearContacts();
        view.getContactsList().getView().refreshToolbar();
        enableContact=false;
      }
 else {
        loadContacts();
      }
      view.getContactsList().getView().getAddButton().setEnabled(enableContact);
      view.getContactsList().getView().getExportButton().setEnabled(enableContact);
      view.getContactsList().getView().getImportButton().setEnabled(enableContact);
    }
  }
);
}",0.8475626937165399
35357,"private void updateContact(final ContactDTO contactDTO,final AsyncCallback<ContactDTO> callback,final Component target){
  dispatch.execute(new UpdateLayoutGroupIterations(new ArrayList<IterationChange>(iterationChanges.values()),contactDTO.getId()),new CommandResultHandler<ListResult<IterationChange>>(){
    @Override public void onCommandFailure(    final Throwable caught){
      N10N.error(I18N.CONSTANTS.save(),I18N.CONSTANTS.saveError());
    }
    @Override protected void onCommandSuccess(    ListResult<IterationChange> result){
      for (      IterationChange iterationChange : result.getList()) {
        if (iterationChange.isDeleted()) {
          Iterator<ValueEvent> valuesIterator=valueChanges.iterator();
          while (valuesIterator.hasNext()) {
            ValueEvent valueEvent=valuesIterator.next();
            if (valueEvent.getIterationId() == iterationChange.getIterationId()) {
              valuesIterator.remove();
            }
          }
        }
 else         if (iterationChange.isCreated()) {
          int oldId=iterationChange.getIterationId();
          int newId=iterationChange.getNewIterationId();
          newIterationsTabItems.get(oldId).setIterationId(newId);
          for (          ValueEvent valueEvent : valueChanges) {
            if (valueEvent.getIterationId() == oldId) {
              valueEvent.setIterationId(newId);
            }
          }
        }
      }
      iterationChanges.clear();
      newIterationsTabItems.clear();
      dispatch.execute(new UpdateContact(contactDTO.getId(),valueChanges),new CommandResultHandler<VoidResult>(){
        @Override public void onCommandFailure(        final Throwable caught){
          N10N.error(I18N.CONSTANTS.save(),I18N.CONSTANTS.saveError());
        }
        @Override protected void onCommandSuccess(        final VoidResult result){
          N10N.infoNotif(I18N.CONSTANTS.infoConfirmation(),I18N.CONSTANTS.saveConfirm());
          eventBus.fireEvent(new UpdateEvent(UpdateEvent.CONTACT_UPDATE,contactDTO));
          for (          final ValueEvent event : valueChanges) {
            if (event.getSource() instanceof DefaultContactFlexibleElementDTO) {
              updateCurrentContact(contactDTO,(DefaultContactFlexibleElementDTO)event.getSource(),event.getSingleValue());
            }
          }
          valueChanges.clear();
          if (callback != null) {
            callback.onSuccess(contactDTO);
          }
          refresh(contactDTO);
        }
      }
,view.getSaveButton(),new LoadingMask(view.getDetailsContainer()),new LoadingMask(target));
    }
  }
,view.getSaveButton(),new LoadingMask(view.getDetailsContainer()),new LoadingMask(target));
}","private void updateContact(final ContactDTO contactDTO,final AsyncCallback<ContactDTO> callback,final Component target){
  if (!iterationChanges.isEmpty()) {
    final List<IterationChange> iterationChangesList=new ArrayList<IterationChange>(iterationChanges.values());
    Iterator<IterationChange> iterator=iterationChangesList.iterator();
    while (iterator.hasNext()) {
      IterationChange iterationChange=iterator.next();
      if (iterationChange.isCreated() && isOfflineMode()) {
        iterator.remove();
      }
    }
    dispatch.execute(new UpdateLayoutGroupIterations(iterationChangesList,contactDTO.getId()),new CommandResultHandler<ListResult<IterationChange>>(){
      @Override public void onCommandFailure(      final Throwable caught){
        N10N.error(I18N.CONSTANTS.save(),I18N.CONSTANTS.saveError());
      }
      @Override protected void onCommandSuccess(      ListResult<IterationChange> result){
        if (result != null) {
          for (          IterationChange iterationChange : result.getList()) {
            if (iterationChange.isDeleted()) {
              Iterator<ValueEvent> valuesIterator=valueChanges.iterator();
              while (valuesIterator.hasNext()) {
                ValueEvent valueEvent=valuesIterator.next();
                if (valueEvent.getIterationId() == iterationChange.getIterationId()) {
                  valuesIterator.remove();
                }
              }
            }
 else             if (iterationChange.isCreated()) {
              int oldId=iterationChange.getIterationId();
              int newId=iterationChange.getNewIterationId();
              newIterationsTabItems.get(oldId).setIterationId(newId);
              for (              ValueEvent valueEvent : valueChanges) {
                if (valueEvent.getIterationId() == oldId) {
                  valueEvent.setIterationId(newId);
                }
              }
            }
          }
          iterationChanges.clear();
          newIterationsTabItems.clear();
          dispatch.execute(new UpdateContact(contactDTO.getId(),valueChanges),new CommandResultHandler<VoidResult>(){
            @Override public void onCommandFailure(            final Throwable caught){
              N10N.error(I18N.CONSTANTS.save(),I18N.CONSTANTS.saveError());
            }
            @Override protected void onCommandSuccess(            final VoidResult result){
              N10N.infoNotif(I18N.CONSTANTS.infoConfirmation(),I18N.CONSTANTS.saveConfirm());
              eventBus.fireEvent(new UpdateEvent(UpdateEvent.CONTACT_UPDATE,contactDTO));
              for (              final ValueEvent event : valueChanges) {
                if (event.getSource() instanceof DefaultContactFlexibleElementDTO) {
                  updateCurrentContact(contactDTO,(DefaultContactFlexibleElementDTO)event.getSource(),event.getSingleValue());
                }
              }
              valueChanges.clear();
              if (callback != null) {
                callback.onSuccess(contactDTO);
              }
              refresh(contactDTO);
            }
          }
,view.getSaveButton(),new LoadingMask(view.getDetailsContainer()),new LoadingMask(target));
        }
 else {
          N10N.infoNotif(I18N.CONSTANTS.infoConfirmation(),I18N.CONSTANTS.saveConfirm());
        }
      }
    }
,view.getSaveButton(),new LoadingMask(view.getDetailsContainer()),new LoadingMask(target));
  }
 else {
    dispatch.execute(new UpdateContact(contactDTO.getId(),valueChanges),new CommandResultHandler<VoidResult>(){
      @Override public void onCommandFailure(      final Throwable caught){
        N10N.error(I18N.CONSTANTS.save(),I18N.CONSTANTS.saveError());
      }
      @Override protected void onCommandSuccess(      final VoidResult result){
        N10N.infoNotif(I18N.CONSTANTS.infoConfirmation(),I18N.CONSTANTS.saveConfirm());
        eventBus.fireEvent(new UpdateEvent(UpdateEvent.CONTACT_UPDATE,contactDTO));
        for (        final ValueEvent event : valueChanges) {
          if (event.getSource() instanceof DefaultContactFlexibleElementDTO) {
            updateCurrentContact(contactDTO,(DefaultContactFlexibleElementDTO)event.getSource(),event.getSingleValue());
          }
        }
        valueChanges.clear();
        if (callback != null) {
          callback.onSuccess(contactDTO);
        }
        refresh(contactDTO);
      }
    }
,view.getSaveButton(),new LoadingMask(view.getDetailsContainer()),new LoadingMask(target));
  }
}",0.7310479375696767
35358,"@Override public void refresh(final ContactDTO contactDTO){
  computationTriggerManager.prepareForContact(contactDTO);
  valueChanges.clear();
  view.getDetailsContainer().removeAll();
  final LayoutDTO layout=contactDTO.getContactModel().getDetails().getLayout();
  int count=0;
  for (  final LayoutGroupDTO groupDTO : layout.getGroups()) {
    count+=groupDTO.getConstraints().size();
  }
  if (count == 0) {
    view.fillContainer(new Label(I18N.CONSTANTS.contactDetailsNoDetails()));
    return;
  }
  formPanel=Forms.panel();
  final Grid gridLayout=new Grid(layout.getRowsCount(),layout.getColumnsCount());
  gridLayout.setCellPadding(0);
  gridLayout.setCellSpacing(0);
  formPanel.add(new Label(I18N.CONSTANTS.contactUniqueId() + contactDTO.getId()));
  final DispatchQueue queue=new DispatchQueue(dispatch,true);
  for (  final LayoutGroupDTO groupLayout : layout.getGroups()) {
    if (!groupLayout.getHasIterations()) {
      FieldSet fieldSet=createGroupLayoutFieldSet(contactDTO,groupLayout,queue,null,null,null);
      fieldSet.setHeadingHtml(groupLayout.getTitle());
      fieldSet.setCollapsible(true);
      fieldSet.setBorders(true);
      gridLayout.setWidget(groupLayout.getRow(),groupLayout.getColumn(),fieldSet);
      continue;
    }
    final FieldSet fieldSet=(FieldSet)groupLayout.getWidget();
    gridLayout.setWidget(groupLayout.getRow(),groupLayout.getColumn(),fieldSet);
    final IterableGroupPanel tabPanel=Forms.iterableGroupPanel(dispatch,groupLayout,contactDTO,ProfileUtils.isGranted(auth(),GlobalPermissionEnum.CREATE_ITERATIONS));
    tabPanel.setDelegate(this);
    fieldSet.add(tabPanel);
    tabPanel.setAutoHeight(true);
    tabPanel.setAutoWidth(true);
    tabPanel.setTabScroll(true);
    tabPanel.addStyleName(""String_Node_Str"");
    tabPanel.setBorders(true);
    tabPanel.setBodyBorder(false);
    GetLayoutGroupIterations getIterations=new GetLayoutGroupIterations(groupLayout.getId(),contactDTO.getId(),-1);
    queue.add(getIterations,new CommandResultHandler<ListResult<LayoutGroupIterationDTO>>(){
      @Override public void onCommandFailure(      final Throwable throwable){
        if (Log.isErrorEnabled()) {
          Log.error(""String_Node_Str"",throwable);
        }
        throw new RuntimeException(throwable);
      }
      @Override protected void onCommandSuccess(      ListResult<LayoutGroupIterationDTO> result){
        DispatchQueue iterationsQueue=new DispatchQueue(dispatch,true);
        for (        final LayoutGroupIterationDTO iteration : result.getList()) {
          final IterableGroupItem tab=new IterableGroupItem(tabPanel,iteration.getId(),iteration.getName());
          tabPanel.addIterationTab(tab);
          Layout tabLayout=Layouts.fitLayout();
          tab.setLayout(tabLayout);
          FieldSet tabSet=createGroupLayoutFieldSet(contactDTO,groupLayout,iterationsQueue,iteration == null ? null : iteration.getId(),tabPanel,tab);
          tab.add(tabSet);
        }
        iterationsQueue.start();
        if (tabPanel.getItemCount() > 0) {
          tabPanel.setSelection(tabPanel.getItem(0));
        }
      }
    }
,new LoadingMask(view.getDetailsContainer()));
    fieldSet.layout();
  }
  view.getSaveButton().removeAllListeners();
  view.getSaveButton().addSelectionListener(new SelectionListener<ButtonEvent>(){
    @Override public void componentSelected(    final ButtonEvent buttonEvent){
      view.getSaveButton().disable();
      dispatch.execute(buildCheckContactDuplicationCommand(contactDTO),new CommandResultHandler<ListResult<ContactDTO>>(){
        @Override protected void onCommandSuccess(        ListResult<ContactDTO> result){
          if (result == null || result.isEmpty()) {
            updateContact(contactDTO,new CommandResultHandler<ContactDTO>(){
              @Override protected void onCommandSuccess(              ContactDTO updatedContactDTO){
                view.getSaveButton().enable();
              }
            }
,view.getDetailsContainer());
            return;
          }
          final DedupeContactDialog dedupeContactDialog=view.generateDedupeDialog();
          dedupeContactDialog.getPossibleDuplicatesGrid().getStore().add(result.getList());
          dedupeContactDialog.getFirstStepMainButton().addSelectionListener(new SelectionListener<ButtonEvent>(){
            @Override public void componentSelected(            ButtonEvent ce){
              updateContact(contactDTO,new CommandResultHandler<ContactDTO>(){
                @Override protected void onCommandSuccess(                ContactDTO result){
                  dedupeContactDialog.hide();
                }
              }
,view.getDetailsContainer());
            }
          }
);
          dedupeContactDialog.setSecondStepHandler(new DedupeContactDialog.SecondStepHandler(){
            @Override public void initialize(            final Integer contactId,            final ListStore<ContactDuplicatedProperty> propertiesStore){
              updateContact(contactDTO,new CommandResultHandler<ContactDTO>(){
                @Override protected void onCommandSuccess(                ContactDTO updatedContactDTO){
                  dispatch.execute(new GetContactDuplicatedProperties(contactId,updatedContactDTO.getId(),null),new CommandResultHandler<ListResult<ContactDuplicatedProperty>>(){
                    @Override protected void onCommandSuccess(                    ListResult<ContactDuplicatedProperty> result){
                      propertiesStore.add(result.getList());
                    }
                  }
,new LoadingMask(dedupeContactDialog));
                }
              }
,dedupeContactDialog);
            }
            @Override public void downloadImage(            String id,            final Image image){
              imageProvider.provideDataUrl(id,new SuccessCallback<String>(){
                @Override public void onSuccess(                String dataUrl){
                  image.setUrl(dataUrl);
                }
              }
);
            }
            @Override public void handleDedupeContact(            final Integer targetedContactId,            List<ContactDuplicatedProperty> selectedProperties){
              dispatch.execute(new DedupeContact(selectedProperties,contactDTO.getId(),targetedContactId),new CommandResultHandler<ContactDTO>(){
                @Override protected void onCommandSuccess(                ContactDTO targetedContactDTO){
                  dedupeContactDialog.hide();
                  final PageRequest currentRequest=injector.getPageManager().getCurrentPageRequest(false);
                  eventBus.navigateRequest(Page.CONTACT_DASHBOARD.requestWith(RequestParameter.ID,targetedContactId));
                  eventBus.fireEvent(new UpdateEvent(UpdateEvent.CONTACT_DELETE,currentRequest));
                }
              }
);
            }
            @Override public void handleCancel(){
              dedupeContactDialog.hide();
            }
          }
);
          dedupeContactDialog.addWindowListener(new WindowListener(){
            @Override public void windowHide(            WindowEvent windowEvent){
              super.windowHide(windowEvent);
              if (windowEvent.getType() == Events.Hide) {
                view.getSaveButton().enable();
              }
            }
          }
);
          dedupeContactDialog.show();
        }
      }
);
    }
  }
);
  view.getDeleteButton().removeAllListeners();
  view.getDeleteButton().addSelectionListener(new SelectionListener<ButtonEvent>(){
    @Override public void componentSelected(    final ButtonEvent ce){
      onDeleteContact(contactDTO);
    }
  }
);
  view.getDeleteButton().setEnabled(canDeleteContact());
  view.getDeleteButton().setVisible(canDeleteContact());
  view.getExportButton().removeAllListeners();
  view.getExportButton().addSelectionListener(new SelectionListener<ButtonEvent>(){
    @Override public void componentSelected(    final ButtonEvent ce){
      onExportContact(contactDTO);
    }
  }
);
  queue.start();
  formPanel.add(gridLayout);
  view.fillContainer(formPanel);
}","@Override public void refresh(final ContactDTO contactDTO){
  computationTriggerManager.prepareForContact(contactDTO);
  valueChanges.clear();
  view.getDetailsContainer().removeAll();
  final LayoutDTO layout=contactDTO.getContactModel().getDetails().getLayout();
  int count=0;
  for (  final LayoutGroupDTO groupDTO : layout.getGroups()) {
    count+=groupDTO.getConstraints().size();
  }
  if (count == 0) {
    view.fillContainer(new Label(I18N.CONSTANTS.contactDetailsNoDetails()));
    return;
  }
  formPanel=Forms.panel();
  final Grid gridLayout=new Grid(layout.getRowsCount(),layout.getColumnsCount());
  gridLayout.setCellPadding(0);
  gridLayout.setCellSpacing(0);
  formPanel.add(new Label(I18N.CONSTANTS.contactUniqueId() + contactDTO.getId()));
  final DispatchQueue queue=new DispatchQueue(dispatch,true);
  for (  final LayoutGroupDTO groupLayout : layout.getGroups()) {
    if (!groupLayout.getHasIterations()) {
      FieldSet fieldSet=createGroupLayoutFieldSet(contactDTO,groupLayout,queue,null,null,null);
      fieldSet.setHeadingHtml(groupLayout.getTitle());
      fieldSet.setCollapsible(true);
      fieldSet.setBorders(true);
      gridLayout.setWidget(groupLayout.getRow(),groupLayout.getColumn(),fieldSet);
      continue;
    }
    final FieldSet fieldSet=(FieldSet)groupLayout.getWidget();
    gridLayout.setWidget(groupLayout.getRow(),groupLayout.getColumn(),fieldSet);
    final IterableGroupPanel tabPanel=Forms.iterableGroupPanel(dispatch,groupLayout,contactDTO,ProfileUtils.isGranted(auth(),GlobalPermissionEnum.CREATE_ITERATIONS),eventBus);
    tabPanel.setDelegate(this);
    fieldSet.add(tabPanel);
    tabPanel.setAutoHeight(true);
    tabPanel.setAutoWidth(true);
    tabPanel.setTabScroll(true);
    tabPanel.addStyleName(""String_Node_Str"");
    tabPanel.setBorders(true);
    tabPanel.setBodyBorder(false);
    GetLayoutGroupIterations getIterations=new GetLayoutGroupIterations(groupLayout.getId(),contactDTO.getId(),-1);
    queue.add(getIterations,new CommandResultHandler<ListResult<LayoutGroupIterationDTO>>(){
      @Override public void onCommandFailure(      final Throwable throwable){
        if (Log.isErrorEnabled()) {
          Log.error(""String_Node_Str"",throwable);
        }
        throw new RuntimeException(throwable);
      }
      @Override protected void onCommandSuccess(      ListResult<LayoutGroupIterationDTO> result){
        DispatchQueue iterationsQueue=new DispatchQueue(dispatch,true);
        for (        final LayoutGroupIterationDTO iteration : result.getList()) {
          final IterableGroupItem tab=new IterableGroupItem(tabPanel,iteration.getId(),iteration.getName());
          tabPanel.addIterationTab(tab);
          Layout tabLayout=Layouts.fitLayout();
          tab.setLayout(tabLayout);
          FieldSet tabSet=createGroupLayoutFieldSet(contactDTO,groupLayout,iterationsQueue,iteration == null ? null : iteration.getId(),tabPanel,tab);
          tab.add(tabSet);
        }
        iterationsQueue.start();
        if (tabPanel.getItemCount() > 0) {
          tabPanel.setSelection(tabPanel.getItem(0));
        }
      }
    }
,new LoadingMask(view.getDetailsContainer()));
    fieldSet.layout();
  }
  view.getSaveButton().removeAllListeners();
  view.getSaveButton().addSelectionListener(new SelectionListener<ButtonEvent>(){
    @Override public void componentSelected(    final ButtonEvent buttonEvent){
      view.getSaveButton().disable();
      dispatch.execute(buildCheckContactDuplicationCommand(contactDTO),new CommandResultHandler<ListResult<ContactDTO>>(){
        @Override protected void onCommandSuccess(        ListResult<ContactDTO> result){
          if (result == null || result.isEmpty()) {
            updateContact(contactDTO,new CommandResultHandler<ContactDTO>(){
              @Override protected void onCommandSuccess(              ContactDTO updatedContactDTO){
                view.getSaveButton().enable();
              }
            }
,view.getDetailsContainer());
            return;
          }
          final DedupeContactDialog dedupeContactDialog=view.generateDedupeDialog();
          dedupeContactDialog.getPossibleDuplicatesGrid().getStore().add(result.getList());
          dedupeContactDialog.getFirstStepMainButton().addSelectionListener(new SelectionListener<ButtonEvent>(){
            @Override public void componentSelected(            ButtonEvent ce){
              updateContact(contactDTO,new CommandResultHandler<ContactDTO>(){
                @Override protected void onCommandSuccess(                ContactDTO result){
                  dedupeContactDialog.hide();
                }
              }
,view.getDetailsContainer());
            }
          }
);
          dedupeContactDialog.setSecondStepHandler(new DedupeContactDialog.SecondStepHandler(){
            @Override public void initialize(            final Integer contactId,            final ListStore<ContactDuplicatedProperty> propertiesStore){
              updateContact(contactDTO,new CommandResultHandler<ContactDTO>(){
                @Override protected void onCommandSuccess(                ContactDTO updatedContactDTO){
                  dispatch.execute(new GetContactDuplicatedProperties(contactId,updatedContactDTO.getId(),null),new CommandResultHandler<ListResult<ContactDuplicatedProperty>>(){
                    @Override protected void onCommandSuccess(                    ListResult<ContactDuplicatedProperty> result){
                      propertiesStore.add(result.getList());
                    }
                  }
,new LoadingMask(dedupeContactDialog));
                }
              }
,dedupeContactDialog);
            }
            @Override public void downloadImage(            String id,            final Image image){
              imageProvider.provideDataUrl(id,new SuccessCallback<String>(){
                @Override public void onSuccess(                String dataUrl){
                  image.setUrl(dataUrl);
                }
              }
);
            }
            @Override public void handleDedupeContact(            final Integer targetedContactId,            List<ContactDuplicatedProperty> selectedProperties){
              dispatch.execute(new DedupeContact(selectedProperties,contactDTO.getId(),targetedContactId),new CommandResultHandler<ContactDTO>(){
                @Override protected void onCommandSuccess(                ContactDTO targetedContactDTO){
                  dedupeContactDialog.hide();
                  final PageRequest currentRequest=injector.getPageManager().getCurrentPageRequest(false);
                  eventBus.navigateRequest(Page.CONTACT_DASHBOARD.requestWith(RequestParameter.ID,targetedContactId));
                  eventBus.fireEvent(new UpdateEvent(UpdateEvent.CONTACT_DELETE,currentRequest));
                }
              }
);
            }
            @Override public void handleCancel(){
              dedupeContactDialog.hide();
            }
          }
);
          dedupeContactDialog.addWindowListener(new WindowListener(){
            @Override public void windowHide(            WindowEvent windowEvent){
              super.windowHide(windowEvent);
              if (windowEvent.getType() == Events.Hide) {
                view.getSaveButton().enable();
              }
            }
          }
);
          dedupeContactDialog.show();
        }
      }
);
    }
  }
);
  view.getDeleteButton().removeAllListeners();
  view.getDeleteButton().addSelectionListener(new SelectionListener<ButtonEvent>(){
    @Override public void componentSelected(    final ButtonEvent ce){
      onDeleteContact(contactDTO);
    }
  }
);
  view.getDeleteButton().setEnabled(canDeleteContact());
  view.getDeleteButton().setVisible(canDeleteContact());
  view.getExportButton().removeAllListeners();
  view.getExportButton().addSelectionListener(new SelectionListener<ButtonEvent>(){
    @Override public void componentSelected(    final ButtonEvent ce){
      onExportContact(contactDTO);
    }
  }
);
  queue.start();
  formPanel.add(gridLayout);
  view.fillContainer(formPanel);
}",0.9994429658971344
35359,"@Override public void refresh(ContactDTO contactDTO){
  view.setImageProvider(imageProvider);
  dispatch.execute(new GetContactHistory(contactDTO.getId()),new CommandResultHandler<ListResult<ContactHistory>>(){
    @Override protected void onCommandSuccess(    ListResult<ContactHistory> result){
      view.updateGridData(result.getList());
    }
  }
);
}","@Override public void refresh(ContactDTO contactDTO){
  view.setImageProvider(imageProvider);
  if (!isOfflineMode()) {
    dispatch.execute(new GetContactHistory(contactDTO.getId()),new CommandResultHandler<ListResult<ContactHistory>>(){
      @Override protected void onCommandSuccess(      ListResult<ContactHistory> result){
        view.updateGridData(result.getList());
      }
    }
);
  }
}",0.9442970822281168
35360,"public static ValueLabel getDefElementPair(final ValueResult valueResult,final FlexibleElement element,final Contact contact,final EntityManager entityManager,final I18nServer i18nTranslator,final Language language){
  Object value=null;
  String label=ExporterUtil.getFlexibleElementLabel(element,i18nTranslator,language);
  final DefaultContactFlexibleElement defaultElement=(DefaultContactFlexibleElement)element;
  boolean hasValue=valueResult != null && valueResult.isValueDefined();
switch (defaultElement.getType()) {
case FAMILY_NAME:
{
      if (hasValue) {
        value=valueResult.getValueObject();
      }
 else {
        value=contact.getName();
      }
    }
  break;
case FIRST_NAME:
{
  if (hasValue) {
    value=valueResult.getValueObject();
  }
 else {
    value=contact.getFirstname();
  }
}
break;
case ORGANIZATION_NAME:
{
if (hasValue) {
value=valueResult.getValueObject();
}
 else {
value=contact.getOrganization() != null ? contact.getOrganization().getName() : null;
}
}
break;
case MAIN_ORG_UNIT:
{
int orgUnitId=-1;
if (hasValue) {
orgUnitId=Integer.parseInt(valueResult.getValueObject());
}
 else {
orgUnitId=contact.getMainOrgUnit().getId();
}
OrgUnit orgUnit=entityManager.find(OrgUnit.class,orgUnitId);
if (orgUnit != null) {
value=orgUnit.getName() + ""String_Node_Str"" + orgUnit.getFullName();
}
}
break;
case SECONDARY_ORG_UNITS:
{
List<OrgUnit> orgUnits=new ArrayList<>();
if (hasValue) {
List<Integer> orgUnitsIds=ValueResultUtils.splitValuesAsInteger(valueResult.getValueObject());
for (Integer id : orgUnitsIds) {
OrgUnit unit=entityManager.find(OrgUnit.class,id);
if (unit != null) orgUnits.add(unit);
}
}
 else {
orgUnits=contact.getSecondaryOrgUnits();
}
String val=""String_Node_Str"";
for (OrgUnit unit : orgUnits) {
val+=unit.getName() + ""String_Node_Str"" + unit.getFullName()+ ""String_Node_Str"";
}
if (!val.isEmpty()) {
value=val.substring(0,val.length() - 1);
}
}
break;
case CREATION_DATE:
{
if (hasValue) {
value=new Date(Long.parseLong(valueResult.getValueObject()));
}
 else {
value=contact.getDateCreated();
}
}
break;
case LOGIN:
{
if (hasValue) {
value=valueResult.getValueObject();
}
 else {
value=contact.getLogin();
}
}
break;
case EMAIL_ADDRESS:
{
if (hasValue) {
value=valueResult.getValueObject();
}
 else {
value=contact.getEmail();
}
}
break;
case PHONE_NUMBER:
{
if (hasValue) {
value=valueResult.getValueObject();
}
 else {
value=contact.getPhoneNumber();
}
}
break;
case POSTAL_ADDRESS:
{
if (hasValue) {
value=valueResult.getValueObject();
}
 else {
value=contact.getPostalAddress();
}
}
break;
case PHOTO:
{
if (hasValue) {
value=valueResult.getValueObject();
}
 else {
value=contact.getPhoto();
}
}
break;
case COUNTRY:
{
if (hasValue) {
int countryId=Integer.parseInt(valueResult.getValueObject());
value=entityManager.find(Country.class,countryId).getName();
}
 else {
value=contact.getCountry() != null ? contact.getCountry().getName() : null;
}
}
break;
case DIRECT_MEMBERSHIP:
{
int orgUnitId=-1;
if (hasValue) {
orgUnitId=Integer.parseInt(valueResult.getValueObject());
}
 else {
if (contact.getParent() != null) {
orgUnitId=contact.getParent().getId();
}
}
OrgUnit orgUnit=entityManager.find(OrgUnit.class,orgUnitId);
if (orgUnit != null) {
value=orgUnit.getName() + ""String_Node_Str"" + orgUnit.getFullName();
}
}
break;
case TOP_MEMBERSHIP:
{
int orgUnitId=-1;
if (hasValue) {
orgUnitId=Integer.parseInt(valueResult.getValueObject());
}
 else {
if (contact.getRoot() != null) {
orgUnitId=contact.getRoot().getId();
}
}
OrgUnit orgUnit=entityManager.find(OrgUnit.class,orgUnitId);
if (orgUnit != null) {
value=orgUnit.getName() + ""String_Node_Str"" + orgUnit.getFullName();
}
}
break;
default :
break;
}
return new ValueLabel(label,value);
}","public static ValueLabel getDefElementPair(final ValueResult valueResult,final FlexibleElement element,final Contact contact,final EntityManager entityManager,final I18nServer i18nTranslator,final Language language){
  Object value=null;
  String label=ExporterUtil.getFlexibleElementLabel(element,i18nTranslator,language);
  final DefaultContactFlexibleElement defaultElement=(DefaultContactFlexibleElement)element;
  boolean hasValue=valueResult != null && valueResult.isValueDefined();
switch (defaultElement.getType()) {
case FAMILY_NAME:
{
      if (hasValue) {
        value=valueResult.getValueObject();
      }
 else {
        value=contact.getName();
      }
    }
  break;
case FIRST_NAME:
{
  if (hasValue) {
    value=valueResult.getValueObject();
  }
 else {
    value=contact.getFirstname();
  }
}
break;
case ORGANIZATION_NAME:
{
if (hasValue) {
value=valueResult.getValueObject();
}
 else {
value=contact.getName();
}
}
break;
case MAIN_ORG_UNIT:
{
int orgUnitId=-1;
if (hasValue) {
orgUnitId=Integer.parseInt(valueResult.getValueObject());
}
 else {
orgUnitId=contact.getMainOrgUnit().getId();
}
OrgUnit orgUnit=entityManager.find(OrgUnit.class,orgUnitId);
if (orgUnit != null) {
value=orgUnit.getName() + ""String_Node_Str"" + orgUnit.getFullName();
}
}
break;
case SECONDARY_ORG_UNITS:
{
List<OrgUnit> orgUnits=new ArrayList<>();
if (hasValue) {
List<Integer> orgUnitsIds=ValueResultUtils.splitValuesAsInteger(valueResult.getValueObject());
for (Integer id : orgUnitsIds) {
OrgUnit unit=entityManager.find(OrgUnit.class,id);
if (unit != null) orgUnits.add(unit);
}
}
 else {
orgUnits=contact.getSecondaryOrgUnits();
}
String val=""String_Node_Str"";
for (OrgUnit unit : orgUnits) {
val+=unit.getName() + ""String_Node_Str"" + unit.getFullName()+ ""String_Node_Str"";
}
if (!val.isEmpty()) {
value=val.substring(0,val.length() - 1);
}
}
break;
case CREATION_DATE:
{
if (hasValue) {
value=new Date(Long.parseLong(valueResult.getValueObject()));
}
 else {
value=contact.getDateCreated();
}
}
break;
case LOGIN:
{
if (hasValue) {
value=valueResult.getValueObject();
}
 else {
value=contact.getLogin();
}
}
break;
case EMAIL_ADDRESS:
{
if (hasValue) {
value=valueResult.getValueObject();
}
 else {
value=contact.getEmail();
}
}
break;
case PHONE_NUMBER:
{
if (hasValue) {
value=valueResult.getValueObject();
}
 else {
value=contact.getPhoneNumber();
}
}
break;
case POSTAL_ADDRESS:
{
if (hasValue) {
value=valueResult.getValueObject();
}
 else {
value=contact.getPostalAddress();
}
}
break;
case PHOTO:
{
if (hasValue) {
value=valueResult.getValueObject();
}
 else {
value=contact.getPhoto();
}
}
break;
case COUNTRY:
{
if (hasValue) {
int countryId=Integer.parseInt(valueResult.getValueObject());
value=entityManager.find(Country.class,countryId).getName();
}
 else {
value=contact.getCountry() != null ? contact.getCountry().getName() : null;
}
}
break;
case DIRECT_MEMBERSHIP:
{
int orgUnitId=-1;
if (hasValue) {
orgUnitId=Integer.parseInt(valueResult.getValueObject());
}
 else {
if (contact.getParent() != null) {
orgUnitId=contact.getParent().getId();
}
}
OrgUnit orgUnit=entityManager.find(OrgUnit.class,orgUnitId);
if (orgUnit != null) {
value=orgUnit.getName() + ""String_Node_Str"" + orgUnit.getFullName();
}
}
break;
case TOP_MEMBERSHIP:
{
int orgUnitId=-1;
if (hasValue) {
orgUnitId=Integer.parseInt(valueResult.getValueObject());
}
 else {
if (contact.getRoot() != null) {
orgUnitId=contact.getRoot().getId();
}
}
OrgUnit orgUnit=entityManager.find(OrgUnit.class,orgUnitId);
if (orgUnit != null) {
value=orgUnit.getName() + ""String_Node_Str"" + orgUnit.getFullName();
}
}
break;
default :
break;
}
return new ValueLabel(label,value);
}",0.9917153334238762
35361,"/** 
 * Returns the current contact model corresponding global export elements.<br> Only the following types of elements are returned: <ul> <li>  {@link ElementTypeEnum#DEFAULT_CONTACT}</li> <li>  {@link ElementTypeEnum#CHECKBOX}</li> <li>  {@link ElementTypeEnum#TEXT_AREA}</li> <li>  {@link ElementTypeEnum#TRIPLETS}</li> <li>  {@link ElementTypeEnum#QUESTION}</li> </ul>
 * @return The current contact model corresponding global export elements.
 */
public List<FlexibleElementDTO> getGlobalExportElements(){
  final List<FlexibleElementDTO> allElements=new ArrayList<FlexibleElementDTO>();
  final ContactDetailsDTO p=getDetails();
  p.setName();
  setDetails(p);
  if (getDetails().getLayout() != null) {
    for (    final LayoutGroupDTO lg : getDetails().getLayout().getGroups()) {
      for (      final LayoutConstraintDTO lc : lg.getConstraints()) {
        final FlexibleElementDTO element=lc.getFlexibleElementDTO();
        element.setGroup(lg);
        element.setConstraint(lc);
        element.setContainerModel(getDetails());
        final ElementTypeEnum type=element.getElementType();
        if (ElementTypeEnum.DEFAULT_CONTACT == type || ElementTypeEnum.CHECKBOX == type || ElementTypeEnum.TEXT_AREA == type || ElementTypeEnum.TRIPLETS == type || ElementTypeEnum.QUESTION == type || ElementTypeEnum.CONTACT_LIST == type) {
          allElements.add(element);
        }
      }
    }
  }
  return allElements;
}","/** 
 * Returns the current contact model corresponding global export elements.<br> Only the following types of elements are returned: <ul> <li>  {@link ElementTypeEnum#DEFAULT_CONTACT}</li> <li>  {@link ElementTypeEnum#CHECKBOX}</li> <li>  {@link ElementTypeEnum#TEXT_AREA}</li> <li>  {@link ElementTypeEnum#TRIPLETS}</li> <li>  {@link ElementTypeEnum#QUESTION}</li> </ul>
 * @return The current contact model corresponding global export elements.
 */
public List<FlexibleElementDTO> getGlobalExportElements(){
  final List<FlexibleElementDTO> allElements=new ArrayList<FlexibleElementDTO>();
  final ContactDetailsDTO p=getDetails();
  p.setName();
  setDetails(p);
  if (getDetails().getLayout() != null) {
    for (    final LayoutGroupDTO lg : getDetails().getLayout().getGroups()) {
      for (      final LayoutConstraintDTO lc : lg.getConstraints()) {
        final FlexibleElementDTO element=lc.getFlexibleElementDTO();
        element.setGroup(lg);
        element.setConstraint(lc);
        element.setContainerModel(getDetails());
        final ElementTypeEnum type=element.getElementType();
        if (element instanceof DefaultContactFlexibleElementDTO) {
          DefaultContactFlexibleElementDTO defaultElement=(DefaultContactFlexibleElementDTO)element;
          if (getType() == ContactModelType.INDIVIDUAL) {
switch (defaultElement.getType()) {
case ORGANIZATION_NAME:
              continue;
          }
        }
 else {
switch (defaultElement.getType()) {
case FAMILY_NAME:
case FIRST_NAME:
            continue;
        }
      }
    }
    if (ElementTypeEnum.DEFAULT_CONTACT == type || ElementTypeEnum.CHECKBOX == type || ElementTypeEnum.TEXT_AREA == type || ElementTypeEnum.TRIPLETS == type || ElementTypeEnum.QUESTION == type || ElementTypeEnum.CONTACT_LIST == type) {
      allElements.add(element);
    }
  }
}
}
return allElements;
}",0.8564491654021245
35362,"/** 
 * {@inheritDoc}
 */
@Override public void onBind(){
  view.getSubMenuWidget().addListener(new SubMenuListener(){
    @Override public void onSubMenuClick(    final SubMenuItem menuItem){
      final PageRequest currentPageRequest=injector.getPageManager().getCurrentPageRequest(false);
      Profiler.INSTANCE.startScenario(Scenario.AGENDA);
      Profiler.INSTANCE.markCheckpoint(Scenario.AGENDA,""String_Node_Str"");
      eventBus.navigateRequest(menuItem.getRequest().addAllParameters(currentPageRequest.getParameters(false)));
    }
  }
);
  view.getCoreVersionActionComboBox().addSelectionChangedListener(new SelectionChangedListener<CoreVersionAction>(){
    @Override public void selectionChanged(    SelectionChangedEvent<CoreVersionAction> se){
      final CoreVersionAction action=se.getSelectedItem();
      if (action == currentCoreVersion) {
        return;
      }
switch (action.getType()) {
case FUNCTION_COMPARE:
        eventBus.navigateRequest(Page.PROJECT_AMENDMENT_DIFF.request().addData(RequestParameter.DTO,project));
      view.getCoreVersionActionComboBox().setValue(currentCoreVersion);
    break;
case FUNCTION_RENAME:
  eventBus.navigateRequest(Page.PROJECT_AMENDMENT_RENAME.request().addData(RequestParameter.DTO,project));
view.getCoreVersionActionComboBox().setValue(currentCoreVersion);
break;
case CORE_VERSION:
onDisplayCoreVersion((AmendmentDTO)action);
break;
default :
view.getCoreVersionActionComboBox().setValue(currentCoreVersion);
break;
}
}
}
);
view.getLockProjectCoreButton().addSelectionListener(new SelectionListener<ButtonEvent>(){
@Override public void componentSelected(final ButtonEvent event){
onCoreVersionAction(project,AmendmentAction.LOCK,view.getLockProjectCoreButton());
}
}
);
view.getUnlockProjectCoreButton().addSelectionListener(new SelectionListener<ButtonEvent>(){
@Override public void componentSelected(final ButtonEvent event){
onCoreVersionAction(project,AmendmentAction.UNLOCK,view.getUnlockProjectCoreButton());
}
}
);
view.getValidateVersionButton().addListener(Events.OnClick,new Listener<BaseEvent>(){
@Override public void handleEvent(BaseEvent be){
view.buildCreateCoreVersionDialog(new SelectionListener<ButtonEvent>(){
@Override public void componentSelected(ButtonEvent ce){
final String name=(String)ce.getSource();
onCoreVersionAction(project,AmendmentAction.VALIDATE,view.getValidateVersionButton(),name);
}
}
);
}
}
);
view.getBackToWorkingVersionButton().addListener(Events.OnClick,new Listener<BaseEvent>(){
@Override public void handleEvent(BaseEvent be){
final PageRequest currentPageRequest=injector.getPageManager().getCurrentPageRequest();
eventBus.navigateRequest(currentPageRequest.removeParameter(RequestParameter.VERSION),view.getBackToWorkingVersionButton());
currentCoreVersion=null;
}
}
);
view.getExportButton().addSelectionListener(new SelectionListener<ButtonEvent>(){
@Override public void componentSelected(final ButtonEvent ce){
onExportProject(project);
}
}
);
view.getDeleteButton().addSelectionListener(new SelectionListener<ButtonEvent>(){
@Override public void componentSelected(final ButtonEvent ce){
onDeleteProject(project);
}
}
);
registerHandler(eventBus.addHandler(UpdateEvent.getType(),new UpdateHandler(){
@Override public void onUpdate(final UpdateEvent event){
if (event.concern(UpdateEvent.PROJECT_BANNER_UPDATE)) {
refreshBanner(project);
}
 else if (event.concern(UpdateEvent.AMENDMENT_RENAME)) {
loadAmendments(project,currentCoreVersion != null ? currentCoreVersion.getId() : null);
}
 else if (event.concern(UpdateEvent.CORE_VERSION_UPDATED)) {
eventBus.navigateRequest(injector.getPageManager().getCurrentPageRequest(),new LoadingMask(view.getProjectCoreVersionPanel()));
}
}
}
));
view.getSubMenuWidget().setRequiredPermissions(Page.PROJECT_LOGFRAME,GlobalPermissionEnum.VIEW_LOGFRAME);
view.getSubMenuWidget().setRequiredPermissions(Page.PROJECT_INDICATORS_MANAGEMENT,GlobalPermissionEnum.VIEW_INDICATOR);
view.getSubMenuWidget().setRequiredPermissions(Page.PROJECT_INDICATORS_MAP,GlobalPermissionEnum.VIEW_MAPTAB);
view.getSubMenuWidget().setRequiredPermissions(Page.PROJECT_INDICATORS_ENTRIES,GlobalPermissionEnum.VIEW_INDICATOR);
view.getSubMenuWidget().setRequiredPermissions(Page.PROJECT_CALENDAR,GlobalPermissionEnum.VIEW_PROJECT_AGENDA);
view.getSubMenuWidget().setRequiredPermissions(Page.PROJECT_TEAM_MEMBERS,GlobalPermissionEnum.VIEW_PROJECT_TEAM_MEMBERS);
}","/** 
 * {@inheritDoc}
 */
@Override public void onBind(){
  view.getSubMenuWidget().addListener(new SubMenuListener(){
    @Override public void onSubMenuClick(    final SubMenuItem menuItem){
      final PageRequest currentPageRequest=injector.getPageManager().getCurrentPageRequest(false);
      Profiler.INSTANCE.startScenario(Scenario.AGENDA);
      Profiler.INSTANCE.markCheckpoint(Scenario.AGENDA,""String_Node_Str"");
      eventBus.navigateRequest(menuItem.getRequest().addAllParameters(currentPageRequest.getParameters(false)));
    }
  }
);
  view.getCoreVersionActionComboBox().addSelectionChangedListener(new SelectionChangedListener<CoreVersionAction>(){
    @Override public void selectionChanged(    SelectionChangedEvent<CoreVersionAction> se){
      final CoreVersionAction action=se.getSelectedItem();
      if (action == currentCoreVersion || action == null) {
        return;
      }
switch (action.getType()) {
case FUNCTION_COMPARE:
        eventBus.navigateRequest(Page.PROJECT_AMENDMENT_DIFF.request().addData(RequestParameter.DTO,project));
      view.getCoreVersionActionComboBox().setValue(currentCoreVersion);
    break;
case FUNCTION_RENAME:
  eventBus.navigateRequest(Page.PROJECT_AMENDMENT_RENAME.request().addData(RequestParameter.DTO,project));
view.getCoreVersionActionComboBox().setValue(currentCoreVersion);
break;
case CORE_VERSION:
onDisplayCoreVersion((AmendmentDTO)action);
break;
default :
view.getCoreVersionActionComboBox().setValue(currentCoreVersion);
break;
}
}
}
);
view.getLockProjectCoreButton().addSelectionListener(new SelectionListener<ButtonEvent>(){
@Override public void componentSelected(final ButtonEvent event){
onCoreVersionAction(project,AmendmentAction.LOCK,view.getLockProjectCoreButton());
}
}
);
view.getUnlockProjectCoreButton().addSelectionListener(new SelectionListener<ButtonEvent>(){
@Override public void componentSelected(final ButtonEvent event){
onCoreVersionAction(project,AmendmentAction.UNLOCK,view.getUnlockProjectCoreButton());
}
}
);
view.getValidateVersionButton().addListener(Events.OnClick,new Listener<BaseEvent>(){
@Override public void handleEvent(BaseEvent be){
view.buildCreateCoreVersionDialog(new SelectionListener<ButtonEvent>(){
@Override public void componentSelected(ButtonEvent ce){
final String name=(String)ce.getSource();
onCoreVersionAction(project,AmendmentAction.VALIDATE,view.getValidateVersionButton(),name);
}
}
);
}
}
);
view.getBackToWorkingVersionButton().addListener(Events.OnClick,new Listener<BaseEvent>(){
@Override public void handleEvent(BaseEvent be){
final PageRequest currentPageRequest=injector.getPageManager().getCurrentPageRequest();
eventBus.navigateRequest(currentPageRequest.removeParameter(RequestParameter.VERSION),view.getBackToWorkingVersionButton());
currentCoreVersion=null;
}
}
);
view.getExportButton().addSelectionListener(new SelectionListener<ButtonEvent>(){
@Override public void componentSelected(final ButtonEvent ce){
onExportProject(project);
}
}
);
view.getDeleteButton().addSelectionListener(new SelectionListener<ButtonEvent>(){
@Override public void componentSelected(final ButtonEvent ce){
onDeleteProject(project);
}
}
);
registerHandler(eventBus.addHandler(UpdateEvent.getType(),new UpdateHandler(){
@Override public void onUpdate(final UpdateEvent event){
if (event.concern(UpdateEvent.PROJECT_BANNER_UPDATE)) {
refreshBanner(project);
}
 else if (event.concern(UpdateEvent.AMENDMENT_RENAME)) {
loadAmendments(project,currentCoreVersion != null ? currentCoreVersion.getId() : null);
}
 else if (event.concern(UpdateEvent.CORE_VERSION_UPDATED)) {
eventBus.navigateRequest(injector.getPageManager().getCurrentPageRequest(),new LoadingMask(view.getProjectCoreVersionPanel()));
}
}
}
));
view.getSubMenuWidget().setRequiredPermissions(Page.PROJECT_LOGFRAME,GlobalPermissionEnum.VIEW_LOGFRAME);
view.getSubMenuWidget().setRequiredPermissions(Page.PROJECT_INDICATORS_MANAGEMENT,GlobalPermissionEnum.VIEW_INDICATOR);
view.getSubMenuWidget().setRequiredPermissions(Page.PROJECT_INDICATORS_MAP,GlobalPermissionEnum.VIEW_MAPTAB);
view.getSubMenuWidget().setRequiredPermissions(Page.PROJECT_INDICATORS_ENTRIES,GlobalPermissionEnum.VIEW_INDICATOR);
view.getSubMenuWidget().setRequiredPermissions(Page.PROJECT_CALENDAR,GlobalPermissionEnum.VIEW_PROJECT_AGENDA);
view.getSubMenuWidget().setRequiredPermissions(Page.PROJECT_TEAM_MEMBERS,GlobalPermissionEnum.VIEW_PROJECT_TEAM_MEMBERS);
}",0.9979577944179714
35363,"@Override public void selectionChanged(SelectionChangedEvent<CoreVersionAction> se){
  final CoreVersionAction action=se.getSelectedItem();
  if (action == currentCoreVersion) {
    return;
  }
switch (action.getType()) {
case FUNCTION_COMPARE:
    eventBus.navigateRequest(Page.PROJECT_AMENDMENT_DIFF.request().addData(RequestParameter.DTO,project));
  view.getCoreVersionActionComboBox().setValue(currentCoreVersion);
break;
case FUNCTION_RENAME:
eventBus.navigateRequest(Page.PROJECT_AMENDMENT_RENAME.request().addData(RequestParameter.DTO,project));
view.getCoreVersionActionComboBox().setValue(currentCoreVersion);
break;
case CORE_VERSION:
onDisplayCoreVersion((AmendmentDTO)action);
break;
default :
view.getCoreVersionActionComboBox().setValue(currentCoreVersion);
break;
}
}","@Override public void selectionChanged(SelectionChangedEvent<CoreVersionAction> se){
  final CoreVersionAction action=se.getSelectedItem();
  if (action == currentCoreVersion || action == null) {
    return;
  }
switch (action.getType()) {
case FUNCTION_COMPARE:
    eventBus.navigateRequest(Page.PROJECT_AMENDMENT_DIFF.request().addData(RequestParameter.DTO,project));
  view.getCoreVersionActionComboBox().setValue(currentCoreVersion);
break;
case FUNCTION_RENAME:
eventBus.navigateRequest(Page.PROJECT_AMENDMENT_RENAME.request().addData(RequestParameter.DTO,project));
view.getCoreVersionActionComboBox().setValue(currentCoreVersion);
break;
case CORE_VERSION:
onDisplayCoreVersion((AmendmentDTO)action);
break;
default :
view.getCoreVersionActionComboBox().setValue(currentCoreVersion);
break;
}
}",0.9886363636363636
35364,"/** 
 * Gets a flexible element value from the database.
 * @param cmd {@link GetValue} command containing the flexible element class, its id, and the project id
 * @return a {@link ValueResult} object containing the value of the flexible element or containing {@code null} ifthere is no value defined for this element.
 * @throws org.sigmah.shared.dispatch.CommandException
 */
@Override public ValueResult execute(final GetValue cmd,final UserExecutionContext context) throws CommandException {
  LOG.debug(""String_Node_Str"",cmd);
  final ValueResult valueResult=new ValueResult();
  String historyValue=null;
  if (cmd.getAmendmentId() != null) {
    final TypedQuery<Amendment> amedmentQuery=em().createQuery(""String_Node_Str"",Amendment.class);
    amedmentQuery.setParameter(""String_Node_Str"",cmd.getAmendmentId());
    final Amendment amendment=amedmentQuery.getSingleResult();
    final List<HistoryToken> tokens=amendment.getValues();
    if (tokens != null) {
      for (      final HistoryToken token : tokens) {
        if (token.getElementId().equals(cmd.getElementId()) && token.getLayoutGroupIterationId().equals(cmd.getIterationId())) {
          historyValue=token.getValue();
        }
      }
    }
  }
  final String valueFromDatabase;
  if (DefaultFlexibleElementDTO.ENTITY_NAME.equals(cmd.getElementEntityName())) {
    valueFromDatabase=findCurrentValueOfDefaultElement(cmd.getProjectId(),cmd.getElementId());
  }
 else   if (BudgetRatioElementDTO.ENTITY_NAME.equals(cmd.getElementEntityName())) {
    valueFromDatabase=findCurrentValueOfBudgetRatioElement(cmd.getProjectId(),cmd.getElementId());
  }
 else {
    valueFromDatabase=findCurrentValue(cmd.getProjectId(),cmd.getElementId(),cmd.getIterationId());
  }
  String valueAsString=valueFromDatabase;
  boolean isValueExisting=valueFromDatabase != null;
  if (historyValue != null) {
    valueAsString=historyValue;
    isValueExisting=true;
    valueResult.setAmendment(true);
  }
  if (!isValueExisting) {
    LOG.debug(""String_Node_Str"",cmd.getElementId());
    return valueResult;
  }
  Query query=null;
  String elementClassName=cmd.getElementEntityName();
  ListableValue dto=null;
  Boolean isList=null;
  if (elementClassName.equals(TripletsListElementDTO.ENTITY_NAME)) {
    LOG.debug(""String_Node_Str"");
    dto=new TripletValueDTO();
    isList=true;
    query=em().createQuery(""String_Node_Str"");
    query.setParameter(""String_Node_Str"",ValueResultUtils.splitValuesAsInteger(valueAsString));
  }
 else   if (elementClassName.equals(IndicatorsListElementDTO.ENTITY_NAME)) {
    LOG.debug(""String_Node_Str"");
    dto=new IndicatorsListValueDTO();
    isList=true;
    query=em().createQuery(""String_Node_Str"");
    query.setParameter(""String_Node_Str"",Integer.valueOf(valueAsString));
  }
 else   if (elementClassName.equals(BudgetDistributionElementDTO.ENTITY_NAME)) {
    LOG.debug(""String_Node_Str"");
    dto=new BudgetPartsListValueDTO();
    isList=true;
    query=em().createQuery(""String_Node_Str"");
    query.setParameter(""String_Node_Str"",Integer.valueOf(valueAsString));
  }
 else   if (elementClassName.equals(FilesListElementDTO.ENTITY_NAME)) {
    LOG.debug(""String_Node_Str"");
    dto=new FileDTO();
    isList=true;
    query=em().createQuery(""String_Node_Str"");
    query.setParameter(""String_Node_Str"",ValueResultUtils.splitValuesAsInteger(valueAsString));
  }
 else   if (elementClassName.equals(ReportListElementDTO.ENTITY_NAME)) {
    LOG.debug(""String_Node_Str"");
    dto=new ReportReference();
    isList=true;
    query=em().createQuery(""String_Node_Str"");
    query.setParameter(""String_Node_Str"",ValueResultUtils.splitValuesAsInteger(valueAsString));
  }
 else   if (!(elementClassName.equals(MessageElementDTO.ENTITY_NAME))) {
    LOG.debug(""String_Node_Str"");
    dto=null;
    isList=false;
  }
  if (isList == null) {
    return valueResult;
  }
  if (isList) {
    LOG.debug(""String_Node_Str"",cmd.getElementId());
    @SuppressWarnings(""String_Node_Str"") final List<Object> objectsList=query.getResultList();
    final List<ListableValue> serializablesList=new ArrayList<>();
    for (    Object o : objectsList) {
      serializablesList.add(mapper().map(o,dto.getClass()));
    }
    if (elementClassName.equals(FilesListElementDTO.ENTITY_NAME)) {
      for (      final ListableValue value : serializablesList) {
        if (value instanceof FileDTO) {
          final FileDTO file=(FileDTO)value;
          for (          final FileVersionDTO version : file.getVersions()) {
            version.setAvailable(fileStorageProvider.exists(version.getPath()));
          }
        }
      }
    }
    valueResult.setValuesObject(serializablesList);
  }
 else {
    LOG.debug(""String_Node_Str"",cmd.getElementId());
    valueResult.setValueObject(valueAsString);
  }
  LOG.debug(""String_Node_Str"",valueResult);
  return valueResult;
}","/** 
 * Gets a flexible element value from the database.
 * @param cmd {@link GetValue} command containing the flexible element class, its id, and the project id
 * @return a {@link ValueResult} object containing the value of the flexible element or containing {@code null} ifthere is no value defined for this element.
 * @throws org.sigmah.shared.dispatch.CommandException
 */
@Override public ValueResult execute(final GetValue cmd,final UserExecutionContext context) throws CommandException {
  LOG.debug(""String_Node_Str"",cmd);
  final ValueResult valueResult=new ValueResult();
  String historyValue=null;
  if (cmd.getAmendmentId() != null) {
    final TypedQuery<Amendment> amedmentQuery=em().createQuery(""String_Node_Str"",Amendment.class);
    amedmentQuery.setParameter(""String_Node_Str"",cmd.getAmendmentId());
    final Amendment amendment=amedmentQuery.getSingleResult();
    final List<HistoryToken> tokens=amendment.getValues();
    if (tokens != null) {
      for (      final HistoryToken token : tokens) {
        if (token.getElementId().equals(cmd.getElementId()) && token.getLayoutGroupIterationId() == cmd.getIterationId()) {
          historyValue=token.getValue();
        }
      }
    }
  }
  final String valueFromDatabase;
  if (DefaultFlexibleElementDTO.ENTITY_NAME.equals(cmd.getElementEntityName())) {
    valueFromDatabase=findCurrentValueOfDefaultElement(cmd.getProjectId(),cmd.getElementId());
  }
 else   if (BudgetRatioElementDTO.ENTITY_NAME.equals(cmd.getElementEntityName())) {
    valueFromDatabase=findCurrentValueOfBudgetRatioElement(cmd.getProjectId(),cmd.getElementId());
  }
 else {
    valueFromDatabase=findCurrentValue(cmd.getProjectId(),cmd.getElementId(),cmd.getIterationId());
  }
  String valueAsString=valueFromDatabase;
  boolean isValueExisting=valueFromDatabase != null;
  if (historyValue != null) {
    valueAsString=historyValue;
    isValueExisting=true;
    valueResult.setAmendment(true);
  }
  if (!isValueExisting) {
    LOG.debug(""String_Node_Str"",cmd.getElementId());
    return valueResult;
  }
  Query query=null;
  String elementClassName=cmd.getElementEntityName();
  ListableValue dto=null;
  Boolean isList=null;
  if (elementClassName.equals(TripletsListElementDTO.ENTITY_NAME)) {
    LOG.debug(""String_Node_Str"");
    dto=new TripletValueDTO();
    isList=true;
    query=em().createQuery(""String_Node_Str"");
    query.setParameter(""String_Node_Str"",ValueResultUtils.splitValuesAsInteger(valueAsString));
  }
 else   if (elementClassName.equals(IndicatorsListElementDTO.ENTITY_NAME)) {
    LOG.debug(""String_Node_Str"");
    dto=new IndicatorsListValueDTO();
    isList=true;
    query=em().createQuery(""String_Node_Str"");
    query.setParameter(""String_Node_Str"",Integer.valueOf(valueAsString));
  }
 else   if (elementClassName.equals(BudgetDistributionElementDTO.ENTITY_NAME)) {
    LOG.debug(""String_Node_Str"");
    dto=new BudgetPartsListValueDTO();
    isList=true;
    query=em().createQuery(""String_Node_Str"");
    query.setParameter(""String_Node_Str"",Integer.valueOf(valueAsString));
  }
 else   if (elementClassName.equals(FilesListElementDTO.ENTITY_NAME)) {
    LOG.debug(""String_Node_Str"");
    dto=new FileDTO();
    isList=true;
    query=em().createQuery(""String_Node_Str"");
    query.setParameter(""String_Node_Str"",ValueResultUtils.splitValuesAsInteger(valueAsString));
  }
 else   if (elementClassName.equals(ReportListElementDTO.ENTITY_NAME)) {
    LOG.debug(""String_Node_Str"");
    dto=new ReportReference();
    isList=true;
    query=em().createQuery(""String_Node_Str"");
    query.setParameter(""String_Node_Str"",ValueResultUtils.splitValuesAsInteger(valueAsString));
  }
 else   if (!(elementClassName.equals(MessageElementDTO.ENTITY_NAME))) {
    LOG.debug(""String_Node_Str"");
    dto=null;
    isList=false;
  }
  if (isList == null) {
    return valueResult;
  }
  if (isList) {
    LOG.debug(""String_Node_Str"",cmd.getElementId());
    @SuppressWarnings(""String_Node_Str"") final List<Object> objectsList=query.getResultList();
    final List<ListableValue> serializablesList=new ArrayList<>();
    for (    Object o : objectsList) {
      serializablesList.add(mapper().map(o,dto.getClass()));
    }
    if (elementClassName.equals(FilesListElementDTO.ENTITY_NAME)) {
      for (      final ListableValue value : serializablesList) {
        if (value instanceof FileDTO) {
          final FileDTO file=(FileDTO)value;
          for (          final FileVersionDTO version : file.getVersions()) {
            version.setAvailable(fileStorageProvider.exists(version.getPath()));
          }
        }
      }
    }
    valueResult.setValuesObject(serializablesList);
  }
 else {
    LOG.debug(""String_Node_Str"",cmd.getElementId());
    valueResult.setValueObject(valueAsString);
  }
  LOG.debug(""String_Node_Str"",valueResult);
  return valueResult;
}",0.998658825956876
35365,"private void updateContact(final ContactDTO contactDTO,final AsyncCallback<ContactDTO> callback,final Component target){
  dispatch.execute(new UpdateLayoutGroupIterations(new ArrayList<IterationChange>(iterationChanges.values()),contactDTO.getId()),new CommandResultHandler<ListResult<IterationChange>>(){
    @Override public void onCommandFailure(    final Throwable caught){
      N10N.error(I18N.CONSTANTS.save(),I18N.CONSTANTS.saveError());
    }
    @Override protected void onCommandSuccess(    ListResult<IterationChange> result){
      for (      IterationChange iterationChange : result.getList()) {
        if (iterationChange.isDeleted()) {
          Iterator<ValueEvent> valuesIterator=valueChanges.iterator();
          while (valuesIterator.hasNext()) {
            ValueEvent valueEvent=valuesIterator.next();
            if (valueEvent.getIterationId() == iterationChange.getIterationId()) {
              valuesIterator.remove();
            }
          }
        }
 else         if (iterationChange.isCreated()) {
          int oldId=iterationChange.getIterationId();
          int newId=iterationChange.getNewIterationId();
          newIterationsTabItems.get(oldId).setIterationId(newId);
          for (          ValueEvent valueEvent : valueChanges) {
            if (valueEvent.getIterationId() == oldId) {
              valueEvent.setIterationId(newId);
            }
          }
        }
      }
      iterationChanges.clear();
      newIterationsTabItems.clear();
      dispatch.execute(new UpdateContact(contactDTO.getId(),valueChanges),new CommandResultHandler<VoidResult>(){
        @Override public void onCommandFailure(        final Throwable caught){
          N10N.error(I18N.CONSTANTS.save(),I18N.CONSTANTS.saveError());
        }
        @Override protected void onCommandSuccess(        final VoidResult result){
          N10N.infoNotif(I18N.CONSTANTS.infoConfirmation(),I18N.CONSTANTS.saveConfirm());
          eventBus.fireEvent(new UpdateEvent(UpdateEvent.CONTACT_UPDATE,contactDTO));
          for (          final ValueEvent event : valueChanges) {
            if (event.getSource() instanceof DefaultContactFlexibleElementDTO) {
              updateCurrentContact(contactDTO,(DefaultContactFlexibleElementDTO)event.getSource(),event.getSingleValue());
            }
          }
          valueChanges.clear();
          if (callback != null) {
            callback.onSuccess(contactDTO);
          }
        }
      }
,view.getSaveButton(),new LoadingMask(view.getDetailsContainer()),new LoadingMask(target));
    }
  }
,view.getSaveButton(),new LoadingMask(view.getDetailsContainer()),new LoadingMask(target));
}","private void updateContact(final ContactDTO contactDTO,final AsyncCallback<ContactDTO> callback,final Component target){
  dispatch.execute(new UpdateLayoutGroupIterations(new ArrayList<IterationChange>(iterationChanges.values()),contactDTO.getId()),new CommandResultHandler<ListResult<IterationChange>>(){
    @Override public void onCommandFailure(    final Throwable caught){
      N10N.error(I18N.CONSTANTS.save(),I18N.CONSTANTS.saveError());
    }
    @Override protected void onCommandSuccess(    ListResult<IterationChange> result){
      for (      IterationChange iterationChange : result.getList()) {
        if (iterationChange.isDeleted()) {
          Iterator<ValueEvent> valuesIterator=valueChanges.iterator();
          while (valuesIterator.hasNext()) {
            ValueEvent valueEvent=valuesIterator.next();
            if (valueEvent.getIterationId() == iterationChange.getIterationId()) {
              valuesIterator.remove();
            }
          }
        }
 else         if (iterationChange.isCreated()) {
          int oldId=iterationChange.getIterationId();
          int newId=iterationChange.getNewIterationId();
          newIterationsTabItems.get(oldId).setIterationId(newId);
          for (          ValueEvent valueEvent : valueChanges) {
            if (valueEvent.getIterationId() == oldId) {
              valueEvent.setIterationId(newId);
            }
          }
        }
      }
      iterationChanges.clear();
      newIterationsTabItems.clear();
      dispatch.execute(new UpdateContact(contactDTO.getId(),valueChanges),new CommandResultHandler<VoidResult>(){
        @Override public void onCommandFailure(        final Throwable caught){
          N10N.error(I18N.CONSTANTS.save(),I18N.CONSTANTS.saveError());
        }
        @Override protected void onCommandSuccess(        final VoidResult result){
          N10N.infoNotif(I18N.CONSTANTS.infoConfirmation(),I18N.CONSTANTS.saveConfirm());
          eventBus.fireEvent(new UpdateEvent(UpdateEvent.CONTACT_UPDATE,contactDTO));
          for (          final ValueEvent event : valueChanges) {
            if (event.getSource() instanceof DefaultContactFlexibleElementDTO) {
              updateCurrentContact(contactDTO,(DefaultContactFlexibleElementDTO)event.getSource(),event.getSingleValue());
            }
          }
          valueChanges.clear();
          if (callback != null) {
            callback.onSuccess(contactDTO);
          }
          refresh(contactDTO);
        }
      }
,view.getSaveButton(),new LoadingMask(view.getDetailsContainer()),new LoadingMask(target));
    }
  }
,view.getSaveButton(),new LoadingMask(view.getDetailsContainer()),new LoadingMask(target));
}",0.9942066903382544
35366,"private CheckContactDuplication buildCheckContactDuplicationCommand(ContactDTO contactDTO){
  CheckContactDuplication checkDuplicationCommand;
  String currentEmail=getCurrentSingleValue(DefaultContactFlexibleElementType.EMAIL_ADDRESS,contactDTO.getEmail());
switch (contactDTO.getContactModel().getType()) {
case INDIVIDUAL:
    String currentFamilyName=getCurrentSingleValue(DefaultContactFlexibleElementType.FAMILY_NAME,contactDTO.getFamilyName());
  String currentFirstName=getCurrentSingleValue(DefaultContactFlexibleElementType.FIRST_NAME,contactDTO.getFirstname());
checkDuplicationCommand=new CheckContactDuplication(contactDTO.getId(),currentEmail,currentFamilyName,currentFirstName);
break;
case ORGANIZATION:
String currentOrganizationName=getCurrentSingleValue(DefaultContactFlexibleElementType.ORGANIZATION_NAME,contactDTO.getOrganizationName());
checkDuplicationCommand=new CheckContactDuplication(contactDTO.getId(),currentEmail,currentOrganizationName,null);
break;
default :
throw new IllegalStateException(""String_Node_Str"" + contactDTO.getContactModel().getType());
}
return checkDuplicationCommand;
}","private CheckContactDuplication buildCheckContactDuplicationCommand(ContactDTO contactDTO){
  CheckContactDuplication checkDuplicationCommand;
  String currentEmail=getCurrentSingleValue(DefaultContactFlexibleElementType.EMAIL_ADDRESS,contactDTO.getEmail());
switch (contactDTO.getContactModel().getType()) {
case INDIVIDUAL:
    String currentFamilyName=getCurrentSingleValue(DefaultContactFlexibleElementType.FAMILY_NAME,contactDTO.getFamilyName());
  String currentFirstName=getCurrentSingleValue(DefaultContactFlexibleElementType.FIRST_NAME,contactDTO.getFirstname());
checkDuplicationCommand=new CheckContactDuplication(contactDTO.getId(),currentEmail,currentFamilyName,currentFirstName,contactDTO.getContactModel());
break;
case ORGANIZATION:
String currentOrganizationName=getCurrentSingleValue(DefaultContactFlexibleElementType.ORGANIZATION_NAME,contactDTO.getOrganizationName());
checkDuplicationCommand=new CheckContactDuplication(contactDTO.getId(),currentEmail,currentOrganizationName,null,contactDTO.getContactModel());
break;
default :
throw new IllegalStateException(""String_Node_Str"" + contactDTO.getContactModel().getType());
}
return checkDuplicationCommand;
}",0.9747606614447344
35367,"private void refreshTabs(){
  for (  ContactSubPresenter tabPresenter : tabPresenters) {
    tabPresenter.refresh(contactDTO);
  }
}","private void refreshTabs(){
  view.selectFirstTab();
  for (  ContactSubPresenter tabPresenter : tabPresenters) {
    tabPresenter.refresh(contactDTO);
  }
}",0.9134948096885812
35368,"@Override public void handleDedupeContact(final Integer targetedContactId,List<ContactDuplicatedProperty> selectedProperties){
  dispatch.execute(new DedupeContact(selectedProperties,targetedContactId),new CommandResultHandler<ContactDTO>(){
    @Override protected void onCommandSuccess(    ContactDTO targetedContactDTO){
      dedupeContactDialog.hide();
      eventBus.navigateRequest(Page.CONTACT_DASHBOARD.requestWith(RequestParameter.ID,targetedContactId));
    }
  }
);
}","@Override public void handleDedupeContact(final Integer targetedContactId,List<ContactDuplicatedProperty> selectedProperties){
  dispatch.execute(new DedupeContact(selectedProperties,targetedContactId),new CommandResultHandler<ContactDTO>(){
    @Override protected void onCommandSuccess(    final ContactDTO targetedContactDTO){
      dedupeContactDialog.hide();
      GetContactHistory historyCmd=new GetContactHistory(targetedContactDTO.getId(),true);
      dispatch.execute(historyCmd,new CommandResultHandler<ListResult<ContactHistory>>(){
        @Override protected void onCommandSuccess(        ListResult<ContactHistory> result){
          ContactHistory lastChange=result.isEmpty() ? null : result.getList().get(0);
          view.addContact(new DashboardContact(targetedContactDTO,lastChange));
        }
      }
);
    }
  }
);
}",0.5909090909090909
35369,"/** 
 * Builds a new contact list panel with default values.
 */
@Inject public ContactsListWidget(final View view,final Injector injector){
  super(view,injector);
  createContactHandler=new CreateContactHandler(){
    @Override public void handleContactCreation(    final ContactModelDTO contactModelDTO,    final String email,    final String firstName,    final String familyName,    final String organizationName,    final OrgUnitDTO mainOrgUnit,    final List<OrgUnitDTO> secondaryOrgUnits){
      CheckContactDuplication checkContactDuplication;
      if (contactModelDTO.getType() == ContactModelType.INDIVIDUAL) {
        checkContactDuplication=new CheckContactDuplication(null,email,familyName,firstName);
      }
 else {
        checkContactDuplication=new CheckContactDuplication(null,email,familyName,null);
      }
      dispatch.execute(checkContactDuplication,new AsyncCallback<ListResult<ContactDTO>>(){
        @Override public void onFailure(        Throwable caught){
          Log.error(""String_Node_Str"");
        }
        @Override public void onSuccess(        ListResult<ContactDTO> result){
          final HashMap<String,Object> properties=buildPropertyMap(contactModelDTO,email,firstName,familyName,organizationName,mainOrgUnit,secondaryOrgUnits);
          if (result == null || result.getSize() == 0) {
            createEntity(properties);
            return;
          }
          final DedupeContactDialog dedupeContactDialog=new DedupeContactDialog(true);
          dedupeContactDialog.getPossibleDuplicatesGrid().getStore().add(result.getList());
          dedupeContactDialog.getFirstStepMainButton().addSelectionListener(new SelectionListener<ButtonEvent>(){
            @Override public void componentSelected(            ButtonEvent ce){
              createEntity(properties);
              dedupeContactDialog.hide();
            }
          }
);
          dedupeContactDialog.setSecondStepHandler(new DedupeContactDialog.SecondStepHandler(){
            @Override public void initialize(            final Integer contactId,            final ListStore<ContactDuplicatedProperty> propertiesStore){
              dispatch.execute(new GetContactDuplicatedProperties(contactId,null,properties),new CommandResultHandler<ListResult<ContactDuplicatedProperty>>(){
                @Override protected void onCommandSuccess(                ListResult<ContactDuplicatedProperty> result){
                  propertiesStore.add(result.getList());
                }
              }
,new LoadingMask(dedupeContactDialog));
            }
            @Override public void downloadImage(            String id,            final Image image){
              imageProvider.provideDataUrl(id,new SuccessCallback<String>(){
                @Override public void onSuccess(                String dataUrl){
                  image.setUrl(dataUrl);
                }
              }
);
            }
            @Override public void handleDedupeContact(            final Integer targetedContactId,            List<ContactDuplicatedProperty> selectedProperties){
              dispatch.execute(new DedupeContact(selectedProperties,targetedContactId),new CommandResultHandler<ContactDTO>(){
                @Override protected void onCommandSuccess(                ContactDTO targetedContactDTO){
                  dedupeContactDialog.hide();
                  eventBus.navigateRequest(Page.CONTACT_DASHBOARD.requestWith(RequestParameter.ID,targetedContactId));
                }
              }
);
            }
            @Override public void handleCancel(){
              dedupeContactDialog.hide();
            }
          }
);
          dedupeContactDialog.show();
        }
      }
);
    }
  }
;
}","/** 
 * Builds a new contact list panel with default values.
 */
@Inject public ContactsListWidget(final View view,final Injector injector){
  super(view,injector);
  createContactHandler=new CreateContactHandler(){
    @Override public void handleContactCreation(    final ContactModelDTO contactModelDTO,    final String email,    final String firstName,    final String familyName,    final String organizationName,    final OrgUnitDTO mainOrgUnit,    final List<OrgUnitDTO> secondaryOrgUnits){
      CheckContactDuplication checkContactDuplication;
      if (contactModelDTO.getType() == ContactModelType.INDIVIDUAL) {
        checkContactDuplication=new CheckContactDuplication(null,email,familyName,firstName,contactModelDTO);
      }
 else {
        checkContactDuplication=new CheckContactDuplication(null,email,familyName,null,contactModelDTO);
      }
      dispatch.execute(checkContactDuplication,new AsyncCallback<ListResult<ContactDTO>>(){
        @Override public void onFailure(        Throwable caught){
          Log.error(""String_Node_Str"");
        }
        @Override public void onSuccess(        ListResult<ContactDTO> result){
          final HashMap<String,Object> properties=buildPropertyMap(contactModelDTO,email,firstName,familyName,organizationName,mainOrgUnit,secondaryOrgUnits);
          if (result == null || result.getSize() == 0) {
            createEntity(properties);
            return;
          }
          final DedupeContactDialog dedupeContactDialog=new DedupeContactDialog(true);
          dedupeContactDialog.getPossibleDuplicatesGrid().getStore().add(result.getList());
          dedupeContactDialog.getFirstStepMainButton().addSelectionListener(new SelectionListener<ButtonEvent>(){
            @Override public void componentSelected(            ButtonEvent ce){
              createEntity(properties);
              dedupeContactDialog.hide();
            }
          }
);
          dedupeContactDialog.setSecondStepHandler(new DedupeContactDialog.SecondStepHandler(){
            @Override public void initialize(            final Integer contactId,            final ListStore<ContactDuplicatedProperty> propertiesStore){
              dispatch.execute(new GetContactDuplicatedProperties(contactId,null,properties),new CommandResultHandler<ListResult<ContactDuplicatedProperty>>(){
                @Override protected void onCommandSuccess(                ListResult<ContactDuplicatedProperty> result){
                  propertiesStore.add(result.getList());
                }
              }
,new LoadingMask(dedupeContactDialog));
            }
            @Override public void downloadImage(            String id,            final Image image){
              imageProvider.provideDataUrl(id,new SuccessCallback<String>(){
                @Override public void onSuccess(                String dataUrl){
                  image.setUrl(dataUrl);
                }
              }
);
            }
            @Override public void handleDedupeContact(            final Integer targetedContactId,            List<ContactDuplicatedProperty> selectedProperties){
              dispatch.execute(new DedupeContact(selectedProperties,targetedContactId),new CommandResultHandler<ContactDTO>(){
                @Override protected void onCommandSuccess(                final ContactDTO targetedContactDTO){
                  dedupeContactDialog.hide();
                  GetContactHistory historyCmd=new GetContactHistory(targetedContactDTO.getId(),true);
                  dispatch.execute(historyCmd,new CommandResultHandler<ListResult<ContactHistory>>(){
                    @Override protected void onCommandSuccess(                    ListResult<ContactHistory> result){
                      ContactHistory lastChange=result.isEmpty() ? null : result.getList().get(0);
                      view.addContact(new DashboardContact(targetedContactDTO,lastChange));
                    }
                  }
);
                }
              }
);
            }
            @Override public void handleCancel(){
              dedupeContactDialog.hide();
            }
          }
);
          dedupeContactDialog.show();
        }
      }
);
    }
  }
;
}",0.9025744573447754
35370,"@Override public void handleContactCreation(final ContactModelDTO contactModelDTO,final String email,final String firstName,final String familyName,final String organizationName,final OrgUnitDTO mainOrgUnit,final List<OrgUnitDTO> secondaryOrgUnits){
  CheckContactDuplication checkContactDuplication;
  if (contactModelDTO.getType() == ContactModelType.INDIVIDUAL) {
    checkContactDuplication=new CheckContactDuplication(null,email,familyName,firstName);
  }
 else {
    checkContactDuplication=new CheckContactDuplication(null,email,familyName,null);
  }
  dispatch.execute(checkContactDuplication,new AsyncCallback<ListResult<ContactDTO>>(){
    @Override public void onFailure(    Throwable caught){
      Log.error(""String_Node_Str"");
    }
    @Override public void onSuccess(    ListResult<ContactDTO> result){
      final HashMap<String,Object> properties=buildPropertyMap(contactModelDTO,email,firstName,familyName,organizationName,mainOrgUnit,secondaryOrgUnits);
      if (result == null || result.getSize() == 0) {
        createEntity(properties);
        return;
      }
      final DedupeContactDialog dedupeContactDialog=new DedupeContactDialog(true);
      dedupeContactDialog.getPossibleDuplicatesGrid().getStore().add(result.getList());
      dedupeContactDialog.getFirstStepMainButton().addSelectionListener(new SelectionListener<ButtonEvent>(){
        @Override public void componentSelected(        ButtonEvent ce){
          createEntity(properties);
          dedupeContactDialog.hide();
        }
      }
);
      dedupeContactDialog.setSecondStepHandler(new DedupeContactDialog.SecondStepHandler(){
        @Override public void initialize(        final Integer contactId,        final ListStore<ContactDuplicatedProperty> propertiesStore){
          dispatch.execute(new GetContactDuplicatedProperties(contactId,null,properties),new CommandResultHandler<ListResult<ContactDuplicatedProperty>>(){
            @Override protected void onCommandSuccess(            ListResult<ContactDuplicatedProperty> result){
              propertiesStore.add(result.getList());
            }
          }
,new LoadingMask(dedupeContactDialog));
        }
        @Override public void downloadImage(        String id,        final Image image){
          imageProvider.provideDataUrl(id,new SuccessCallback<String>(){
            @Override public void onSuccess(            String dataUrl){
              image.setUrl(dataUrl);
            }
          }
);
        }
        @Override public void handleDedupeContact(        final Integer targetedContactId,        List<ContactDuplicatedProperty> selectedProperties){
          dispatch.execute(new DedupeContact(selectedProperties,targetedContactId),new CommandResultHandler<ContactDTO>(){
            @Override protected void onCommandSuccess(            ContactDTO targetedContactDTO){
              dedupeContactDialog.hide();
              eventBus.navigateRequest(Page.CONTACT_DASHBOARD.requestWith(RequestParameter.ID,targetedContactId));
            }
          }
);
        }
        @Override public void handleCancel(){
          dedupeContactDialog.hide();
        }
      }
);
      dedupeContactDialog.show();
    }
  }
);
}","@Override public void handleContactCreation(final ContactModelDTO contactModelDTO,final String email,final String firstName,final String familyName,final String organizationName,final OrgUnitDTO mainOrgUnit,final List<OrgUnitDTO> secondaryOrgUnits){
  CheckContactDuplication checkContactDuplication;
  if (contactModelDTO.getType() == ContactModelType.INDIVIDUAL) {
    checkContactDuplication=new CheckContactDuplication(null,email,familyName,firstName,contactModelDTO);
  }
 else {
    checkContactDuplication=new CheckContactDuplication(null,email,familyName,null,contactModelDTO);
  }
  dispatch.execute(checkContactDuplication,new AsyncCallback<ListResult<ContactDTO>>(){
    @Override public void onFailure(    Throwable caught){
      Log.error(""String_Node_Str"");
    }
    @Override public void onSuccess(    ListResult<ContactDTO> result){
      final HashMap<String,Object> properties=buildPropertyMap(contactModelDTO,email,firstName,familyName,organizationName,mainOrgUnit,secondaryOrgUnits);
      if (result == null || result.getSize() == 0) {
        createEntity(properties);
        return;
      }
      final DedupeContactDialog dedupeContactDialog=new DedupeContactDialog(true);
      dedupeContactDialog.getPossibleDuplicatesGrid().getStore().add(result.getList());
      dedupeContactDialog.getFirstStepMainButton().addSelectionListener(new SelectionListener<ButtonEvent>(){
        @Override public void componentSelected(        ButtonEvent ce){
          createEntity(properties);
          dedupeContactDialog.hide();
        }
      }
);
      dedupeContactDialog.setSecondStepHandler(new DedupeContactDialog.SecondStepHandler(){
        @Override public void initialize(        final Integer contactId,        final ListStore<ContactDuplicatedProperty> propertiesStore){
          dispatch.execute(new GetContactDuplicatedProperties(contactId,null,properties),new CommandResultHandler<ListResult<ContactDuplicatedProperty>>(){
            @Override protected void onCommandSuccess(            ListResult<ContactDuplicatedProperty> result){
              propertiesStore.add(result.getList());
            }
          }
,new LoadingMask(dedupeContactDialog));
        }
        @Override public void downloadImage(        String id,        final Image image){
          imageProvider.provideDataUrl(id,new SuccessCallback<String>(){
            @Override public void onSuccess(            String dataUrl){
              image.setUrl(dataUrl);
            }
          }
);
        }
        @Override public void handleDedupeContact(        final Integer targetedContactId,        List<ContactDuplicatedProperty> selectedProperties){
          dispatch.execute(new DedupeContact(selectedProperties,targetedContactId),new CommandResultHandler<ContactDTO>(){
            @Override protected void onCommandSuccess(            final ContactDTO targetedContactDTO){
              dedupeContactDialog.hide();
              GetContactHistory historyCmd=new GetContactHistory(targetedContactDTO.getId(),true);
              dispatch.execute(historyCmd,new CommandResultHandler<ListResult<ContactHistory>>(){
                @Override protected void onCommandSuccess(                ListResult<ContactHistory> result){
                  ContactHistory lastChange=result.isEmpty() ? null : result.getList().get(0);
                  view.addContact(new DashboardContact(targetedContactDTO,lastChange));
                }
              }
);
            }
          }
);
        }
        @Override public void handleCancel(){
          dedupeContactDialog.hide();
        }
      }
);
      dedupeContactDialog.show();
    }
  }
);
}",0.8948598130841121
35371,"private void showContactCreator(){
  final Window window=new Window();
  window.setPlain(true);
  window.setModal(true);
  window.setBlinkModal(true);
  window.setLayout(new FitLayout());
  window.setSize(700,300);
  window.setHeadingHtml(I18N.CONSTANTS.createContactDialogTitle());
  final ComboBox<ContactModelDTO> contactModelComboBox=Forms.combobox(I18N.CONSTANTS.contactModelLabel(),true,ContactModelDTO.ID,ContactModelDTO.NAME);
  final TextField<String> emailField=Forms.text(I18N.CONSTANTS.contactEmailAddress(),false);
  final TextField<String> firstNameField=Forms.text(I18N.CONSTANTS.contactFirstName(),false);
  final TextField<String> familyNameField=Forms.text(I18N.CONSTANTS.contactFamilyName(),false);
  final TextField<String> organizationNameField=Forms.text(I18N.CONSTANTS.contactOrganizationName(),false);
  firstNameField.setVisible(false);
  familyNameField.setVisible(false);
  organizationNameField.setVisible(false);
  final ComboBox<OrgUnitDTO> mainOrgUnitComboBox=Forms.combobox(I18N.CONSTANTS.contactMainOrgUnit(),false,OrgUnitDTO.ID,OrgUnitDTO.FULL_NAME);
  final ListComboBox<OrgUnitDTO> secondaryOrgUnitsComboBox=new ListComboBox<OrgUnitDTO>(OrgUnitDTO.ID,OrgUnitDTO.FULL_NAME);
  secondaryOrgUnitsComboBox.initComponent();
  final AdapterField secondaryOrgUnitsFieldAdapter=Forms.adapter(I18N.CONSTANTS.contactSecondaryOrgUnits(),secondaryOrgUnitsComboBox);
  secondaryOrgUnitsFieldAdapter.setVisible(false);
  dispatch.execute(new GetContactModels(null,Collections.<Integer>emptySet(),true),new AsyncCallback<ListResult<ContactModelDTO>>(){
    @Override public void onFailure(    Throwable caught){
      Log.error(""String_Node_Str"");
    }
    @Override public void onSuccess(    ListResult<ContactModelDTO> result){
      contactModelComboBox.getStore().add(result.getList());
    }
  }
);
  dispatch.execute(new GetOrgUnits(OrgUnitDTO.Mode.WITH_TREE),new AsyncCallback<ListResult<OrgUnitDTO>>(){
    @Override public void onFailure(    Throwable caught){
      Log.error(""String_Node_Str"");
    }
    @Override public void onSuccess(    ListResult<OrgUnitDTO> result){
      for (      OrgUnitDTO orgUnitDTO : result.getData()) {
        fillOrgUnitsComboboxes(orgUnitDTO,mainOrgUnitComboBox,secondaryOrgUnitsComboBox);
      }
    }
  }
);
  mainOrgUnitComboBox.addSelectionChangedListener(new SelectionChangedListener<OrgUnitDTO>(){
    @Override public void selectionChanged(    SelectionChangedEvent<OrgUnitDTO> se){
      if (se.getSelectedItem() == null) {
        secondaryOrgUnitsFieldAdapter.setVisible(false);
        return;
      }
      secondaryOrgUnitsFieldAdapter.setVisible(true);
    }
  }
);
  contactModelComboBox.addSelectionChangedListener(new SelectionChangedListener<ContactModelDTO>(){
    @Override public void selectionChanged(    SelectionChangedEvent<ContactModelDTO> event){
      ContactModelType currentType=null;
      if (event.getSelectedItem() != null) {
        currentType=event.getSelectedItem().getType();
      }
      firstNameField.setVisible(currentType == ContactModelType.INDIVIDUAL);
      familyNameField.setVisible(currentType == ContactModelType.INDIVIDUAL);
      organizationNameField.setVisible(currentType == ContactModelType.ORGANIZATION);
      firstNameField.setAllowBlank(currentType != ContactModelType.INDIVIDUAL);
      familyNameField.setAllowBlank(currentType != ContactModelType.INDIVIDUAL);
      organizationNameField.setAllowBlank(currentType != ContactModelType.ORGANIZATION);
    }
  }
);
  org.sigmah.client.ui.widget.button.Button button=Forms.button(I18N.CONSTANTS.createContact());
  final FormPanel formPanel=Forms.panel(200);
  formPanel.add(contactModelComboBox);
  formPanel.add(emailField);
  formPanel.add(firstNameField);
  formPanel.add(familyNameField);
  formPanel.add(organizationNameField);
  formPanel.add(mainOrgUnitComboBox);
  formPanel.add(secondaryOrgUnitsFieldAdapter);
  formPanel.getButtonBar().add(button);
  button.addSelectionListener(new SelectionListener<ButtonEvent>(){
    @Override public void componentSelected(    ButtonEvent event){
      if (!formPanel.isValid()) {
        return;
      }
      createContactHandler.handleContactCreation(contactModelComboBox.getValue(),emailField.getValue(),firstNameField.getValue(),familyNameField.getValue(),organizationNameField.getValue(),mainOrgUnitComboBox.getValue(),secondaryOrgUnitsComboBox.getListStore().getModels());
      window.hide();
    }
  }
);
  window.add(formPanel);
  window.show();
}","private void showContactCreator(){
  final Window window=new Window();
  window.setPlain(true);
  window.setModal(true);
  window.setBlinkModal(true);
  window.setLayout(new FitLayout());
  window.setSize(700,300);
  window.setHeadingHtml(I18N.CONSTANTS.createContactDialogTitle());
  final ComboBox<ContactModelDTO> contactModelComboBox=Forms.combobox(I18N.CONSTANTS.contactModelLabel(),true,ContactModelDTO.ID,ContactModelDTO.NAME);
  final TextField<String> emailField=Forms.text(I18N.CONSTANTS.contactEmailAddress(),false);
  final TextField<String> firstNameField=Forms.text(I18N.CONSTANTS.contactFirstName(),false);
  final TextField<String> familyNameField=Forms.text(I18N.CONSTANTS.contactFamilyName(),false);
  final TextField<String> organizationNameField=Forms.text(I18N.CONSTANTS.contactOrganizationName(),false);
  firstNameField.setVisible(false);
  familyNameField.setVisible(false);
  organizationNameField.setVisible(false);
  final ComboBox<OrgUnitDTO> mainOrgUnitComboBox=Forms.combobox(I18N.CONSTANTS.contactMainOrgUnit(),true,OrgUnitDTO.ID,OrgUnitDTO.FULL_NAME);
  final ListComboBox<OrgUnitDTO> secondaryOrgUnitsComboBox=new ListComboBox<OrgUnitDTO>(OrgUnitDTO.ID,OrgUnitDTO.FULL_NAME);
  secondaryOrgUnitsComboBox.initComponent();
  final AdapterField secondaryOrgUnitsFieldAdapter=Forms.adapter(I18N.CONSTANTS.contactSecondaryOrgUnits(),secondaryOrgUnitsComboBox);
  secondaryOrgUnitsFieldAdapter.setVisible(false);
  dispatch.execute(new GetContactModels(null,Collections.<Integer>emptySet(),true),new AsyncCallback<ListResult<ContactModelDTO>>(){
    @Override public void onFailure(    Throwable caught){
      Log.error(""String_Node_Str"");
    }
    @Override public void onSuccess(    ListResult<ContactModelDTO> result){
      contactModelComboBox.getStore().add(result.getList());
    }
  }
);
  dispatch.execute(new GetOrgUnits(OrgUnitDTO.Mode.WITH_TREE),new AsyncCallback<ListResult<OrgUnitDTO>>(){
    @Override public void onFailure(    Throwable caught){
      Log.error(""String_Node_Str"");
    }
    @Override public void onSuccess(    ListResult<OrgUnitDTO> result){
      for (      OrgUnitDTO orgUnitDTO : result.getData()) {
        fillOrgUnitsComboboxes(orgUnitDTO,mainOrgUnitComboBox,secondaryOrgUnitsComboBox);
      }
    }
  }
);
  mainOrgUnitComboBox.addSelectionChangedListener(new SelectionChangedListener<OrgUnitDTO>(){
    @Override public void selectionChanged(    SelectionChangedEvent<OrgUnitDTO> se){
      if (se.getSelectedItem() == null) {
        secondaryOrgUnitsFieldAdapter.setVisible(false);
        return;
      }
      secondaryOrgUnitsFieldAdapter.setVisible(true);
    }
  }
);
  contactModelComboBox.addSelectionChangedListener(new SelectionChangedListener<ContactModelDTO>(){
    @Override public void selectionChanged(    SelectionChangedEvent<ContactModelDTO> event){
      ContactModelType currentType=null;
      if (event.getSelectedItem() != null) {
        currentType=event.getSelectedItem().getType();
      }
      firstNameField.setVisible(currentType == ContactModelType.INDIVIDUAL);
      familyNameField.setVisible(currentType == ContactModelType.INDIVIDUAL);
      organizationNameField.setVisible(currentType == ContactModelType.ORGANIZATION);
      firstNameField.setAllowBlank(currentType != ContactModelType.INDIVIDUAL);
      familyNameField.setAllowBlank(currentType != ContactModelType.INDIVIDUAL);
      organizationNameField.setAllowBlank(currentType != ContactModelType.ORGANIZATION);
    }
  }
);
  org.sigmah.client.ui.widget.button.Button button=Forms.button(I18N.CONSTANTS.createContact());
  final FormPanel formPanel=Forms.panel(200);
  formPanel.add(contactModelComboBox);
  formPanel.add(emailField);
  formPanel.add(firstNameField);
  formPanel.add(familyNameField);
  formPanel.add(organizationNameField);
  formPanel.add(mainOrgUnitComboBox);
  formPanel.add(secondaryOrgUnitsFieldAdapter);
  formPanel.getButtonBar().add(button);
  button.addSelectionListener(new SelectionListener<ButtonEvent>(){
    @Override public void componentSelected(    ButtonEvent event){
      if (!formPanel.isValid()) {
        return;
      }
      createContactHandler.handleContactCreation(contactModelComboBox.getValue(),emailField.getValue(),firstNameField.getValue(),familyNameField.getValue(),organizationNameField.getValue(),mainOrgUnitComboBox.getValue(),secondaryOrgUnitsComboBox.getListStore().getModels());
      window.hide();
    }
  }
);
  window.add(formPanel);
  window.show();
}",0.9992195339502732
35372,"/** 
 * {@inheritDoc}
 */
@Override public void onBind(){
  view.getSubMenuWidget().addListener(new SubMenuListener(){
    @Override public void onSubMenuClick(    final SubMenuItem menuItem){
      final PageRequest currentPageRequest=injector.getPageManager().getCurrentPageRequest(false);
      Profiler.INSTANCE.startScenario(Scenario.AGENDA);
      Profiler.INSTANCE.markCheckpoint(Scenario.AGENDA,""String_Node_Str"");
      eventBus.navigateRequest(menuItem.getRequest().addAllParameters(currentPageRequest.getParameters(false)));
    }
  }
);
  view.getCoreVersionActionComboBox().addSelectionChangedListener(new SelectionChangedListener<CoreVersionAction>(){
    @Override public void selectionChanged(    SelectionChangedEvent<CoreVersionAction> se){
      final CoreVersionAction action=se.getSelectedItem();
      if (action == currentCoreVersion) {
        return;
      }
switch (action.getType()) {
case FUNCTION_COMPARE:
        eventBus.navigateRequest(Page.PROJECT_AMENDMENT_DIFF.request().addData(RequestParameter.DTO,project));
      view.getCoreVersionActionComboBox().setValue(currentCoreVersion);
    break;
case FUNCTION_RENAME:
  eventBus.navigateRequest(Page.PROJECT_AMENDMENT_RENAME.request().addData(RequestParameter.DTO,project));
view.getCoreVersionActionComboBox().setValue(currentCoreVersion);
break;
case CORE_VERSION:
onDisplayCoreVersion((AmendmentDTO)action);
break;
default :
view.getCoreVersionActionComboBox().setValue(currentCoreVersion);
break;
}
}
}
);
view.getLockProjectCoreButton().addSelectionListener(new SelectionListener<ButtonEvent>(){
@Override public void componentSelected(final ButtonEvent event){
onCoreVersionAction(project,AmendmentAction.LOCK,view.getLockProjectCoreButton());
}
}
);
view.getUnlockProjectCoreButton().addSelectionListener(new SelectionListener<ButtonEvent>(){
@Override public void componentSelected(final ButtonEvent event){
onCoreVersionAction(project,AmendmentAction.UNLOCK,view.getUnlockProjectCoreButton());
}
}
);
view.getValidateVersionButton().addListener(Events.OnClick,new Listener<BaseEvent>(){
@Override public void handleEvent(BaseEvent be){
view.buildCreateCoreVersionDialog(new SelectionListener<ButtonEvent>(){
@Override public void componentSelected(ButtonEvent ce){
final String name=(String)ce.getSource();
onCoreVersionAction(project,AmendmentAction.VALIDATE,view.getValidateVersionButton(),name);
}
}
);
}
}
);
view.getBackToWorkingVersionButton().addListener(Events.OnClick,new Listener<BaseEvent>(){
@Override public void handleEvent(BaseEvent be){
final PageRequest currentPageRequest=injector.getPageManager().getCurrentPageRequest();
eventBus.navigateRequest(currentPageRequest.removeParameter(RequestParameter.VERSION),view.getBackToWorkingVersionButton());
currentCoreVersion=null;
}
}
);
view.getExportButton().addSelectionListener(new SelectionListener<ButtonEvent>(){
@Override public void componentSelected(final ButtonEvent ce){
onExportProject(project);
}
}
);
view.getDeleteButton().addSelectionListener(new SelectionListener<ButtonEvent>(){
@Override public void componentSelected(final ButtonEvent ce){
onDeleteProject(project);
}
}
);
registerHandler(eventBus.addHandler(UpdateEvent.getType(),new UpdateHandler(){
@Override public void onUpdate(final UpdateEvent event){
if (event.concern(UpdateEvent.PROJECT_BANNER_UPDATE)) {
refreshBanner(project);
}
 else if (event.concern(UpdateEvent.AMENDMENT_RENAME)) {
loadAmendments(project,currentCoreVersion != null ? currentCoreVersion.getId() : null);
}
 else if (event.concern(UpdateEvent.CORE_VERSION_UPDATED)) {
eventBus.navigateRequest(injector.getPageManager().getCurrentPageRequest(),new LoadingMask(view.getProjectCoreVersionPanel()));
}
}
}
));
view.getSubMenuWidget().setRequiredPermissions(Page.PROJECT_LOGFRAME,GlobalPermissionEnum.VIEW_LOGFRAME);
view.getSubMenuWidget().setRequiredPermissions(Page.PROJECT_INDICATORS_MANAGEMENT,GlobalPermissionEnum.VIEW_INDICATOR);
view.getSubMenuWidget().setRequiredPermissions(Page.PROJECT_INDICATORS_MAP,GlobalPermissionEnum.VIEW_MAPTAB);
view.getSubMenuWidget().setRequiredPermissions(Page.PROJECT_INDICATORS_ENTRIES,GlobalPermissionEnum.VIEW_INDICATOR);
view.getSubMenuWidget().setRequiredPermissions(Page.PROJECT_CALENDAR,GlobalPermissionEnum.VIEW_PROJECT_AGENDA);
view.getSubMenuWidget().setRequiredPermissions(Page.PROJECT_TEAM_MEMBERS,GlobalPermissionEnum.VIEW_PROJECT_TEAM_MEMBERS);
}","/** 
 * {@inheritDoc}
 */
@Override public void onBind(){
  view.getSubMenuWidget().addListener(new SubMenuListener(){
    @Override public void onSubMenuClick(    final SubMenuItem menuItem){
      final PageRequest currentPageRequest=injector.getPageManager().getCurrentPageRequest(false);
      Profiler.INSTANCE.startScenario(Scenario.AGENDA);
      Profiler.INSTANCE.markCheckpoint(Scenario.AGENDA,""String_Node_Str"");
      eventBus.navigateRequest(menuItem.getRequest().addAllParameters(currentPageRequest.getParameters(false)));
    }
  }
);
  view.getCoreVersionActionComboBox().addSelectionChangedListener(new SelectionChangedListener<CoreVersionAction>(){
    @Override public void selectionChanged(    SelectionChangedEvent<CoreVersionAction> se){
      final CoreVersionAction action=se.getSelectedItem();
      if (action == currentCoreVersion || action == null) {
        return;
      }
switch (action.getType()) {
case FUNCTION_COMPARE:
        eventBus.navigateRequest(Page.PROJECT_AMENDMENT_DIFF.request().addData(RequestParameter.DTO,project));
      view.getCoreVersionActionComboBox().setValue(currentCoreVersion);
    break;
case FUNCTION_RENAME:
  eventBus.navigateRequest(Page.PROJECT_AMENDMENT_RENAME.request().addData(RequestParameter.DTO,project));
view.getCoreVersionActionComboBox().setValue(currentCoreVersion);
break;
case CORE_VERSION:
onDisplayCoreVersion((AmendmentDTO)action);
break;
default :
view.getCoreVersionActionComboBox().setValue(currentCoreVersion);
break;
}
}
}
);
view.getLockProjectCoreButton().addSelectionListener(new SelectionListener<ButtonEvent>(){
@Override public void componentSelected(final ButtonEvent event){
onCoreVersionAction(project,AmendmentAction.LOCK,view.getLockProjectCoreButton());
}
}
);
view.getUnlockProjectCoreButton().addSelectionListener(new SelectionListener<ButtonEvent>(){
@Override public void componentSelected(final ButtonEvent event){
onCoreVersionAction(project,AmendmentAction.UNLOCK,view.getUnlockProjectCoreButton());
}
}
);
view.getValidateVersionButton().addListener(Events.OnClick,new Listener<BaseEvent>(){
@Override public void handleEvent(BaseEvent be){
view.buildCreateCoreVersionDialog(new SelectionListener<ButtonEvent>(){
@Override public void componentSelected(ButtonEvent ce){
final String name=(String)ce.getSource();
onCoreVersionAction(project,AmendmentAction.VALIDATE,view.getValidateVersionButton(),name);
}
}
);
}
}
);
view.getBackToWorkingVersionButton().addListener(Events.OnClick,new Listener<BaseEvent>(){
@Override public void handleEvent(BaseEvent be){
final PageRequest currentPageRequest=injector.getPageManager().getCurrentPageRequest();
eventBus.navigateRequest(currentPageRequest.removeParameter(RequestParameter.VERSION),view.getBackToWorkingVersionButton());
currentCoreVersion=null;
}
}
);
view.getExportButton().addSelectionListener(new SelectionListener<ButtonEvent>(){
@Override public void componentSelected(final ButtonEvent ce){
onExportProject(project);
}
}
);
view.getDeleteButton().addSelectionListener(new SelectionListener<ButtonEvent>(){
@Override public void componentSelected(final ButtonEvent ce){
onDeleteProject(project);
}
}
);
registerHandler(eventBus.addHandler(UpdateEvent.getType(),new UpdateHandler(){
@Override public void onUpdate(final UpdateEvent event){
if (event.concern(UpdateEvent.PROJECT_BANNER_UPDATE)) {
refreshBanner(project);
}
 else if (event.concern(UpdateEvent.AMENDMENT_RENAME)) {
loadAmendments(project,currentCoreVersion != null ? currentCoreVersion.getId() : null);
}
 else if (event.concern(UpdateEvent.CORE_VERSION_UPDATED)) {
eventBus.navigateRequest(injector.getPageManager().getCurrentPageRequest(),new LoadingMask(view.getProjectCoreVersionPanel()));
}
}
}
));
view.getSubMenuWidget().setRequiredPermissions(Page.PROJECT_LOGFRAME,GlobalPermissionEnum.VIEW_LOGFRAME);
view.getSubMenuWidget().setRequiredPermissions(Page.PROJECT_INDICATORS_MANAGEMENT,GlobalPermissionEnum.VIEW_INDICATOR);
view.getSubMenuWidget().setRequiredPermissions(Page.PROJECT_INDICATORS_MAP,GlobalPermissionEnum.VIEW_MAPTAB);
view.getSubMenuWidget().setRequiredPermissions(Page.PROJECT_INDICATORS_ENTRIES,GlobalPermissionEnum.VIEW_INDICATOR);
view.getSubMenuWidget().setRequiredPermissions(Page.PROJECT_CALENDAR,GlobalPermissionEnum.VIEW_PROJECT_AGENDA);
view.getSubMenuWidget().setRequiredPermissions(Page.PROJECT_TEAM_MEMBERS,GlobalPermissionEnum.VIEW_PROJECT_TEAM_MEMBERS);
}",0.9979577944179714
35373,"@Override public void selectionChanged(SelectionChangedEvent<CoreVersionAction> se){
  final CoreVersionAction action=se.getSelectedItem();
  if (action == currentCoreVersion) {
    return;
  }
switch (action.getType()) {
case FUNCTION_COMPARE:
    eventBus.navigateRequest(Page.PROJECT_AMENDMENT_DIFF.request().addData(RequestParameter.DTO,project));
  view.getCoreVersionActionComboBox().setValue(currentCoreVersion);
break;
case FUNCTION_RENAME:
eventBus.navigateRequest(Page.PROJECT_AMENDMENT_RENAME.request().addData(RequestParameter.DTO,project));
view.getCoreVersionActionComboBox().setValue(currentCoreVersion);
break;
case CORE_VERSION:
onDisplayCoreVersion((AmendmentDTO)action);
break;
default :
view.getCoreVersionActionComboBox().setValue(currentCoreVersion);
break;
}
}","@Override public void selectionChanged(SelectionChangedEvent<CoreVersionAction> se){
  final CoreVersionAction action=se.getSelectedItem();
  if (action == currentCoreVersion || action == null) {
    return;
  }
switch (action.getType()) {
case FUNCTION_COMPARE:
    eventBus.navigateRequest(Page.PROJECT_AMENDMENT_DIFF.request().addData(RequestParameter.DTO,project));
  view.getCoreVersionActionComboBox().setValue(currentCoreVersion);
break;
case FUNCTION_RENAME:
eventBus.navigateRequest(Page.PROJECT_AMENDMENT_RENAME.request().addData(RequestParameter.DTO,project));
view.getCoreVersionActionComboBox().setValue(currentCoreVersion);
break;
case CORE_VERSION:
onDisplayCoreVersion((AmendmentDTO)action);
break;
default :
view.getCoreVersionActionComboBox().setValue(currentCoreVersion);
break;
}
}",0.9886363636363636
35374,"private void resizeGrid(final Grid grid,final LayoutContainer container,final boolean canBeDelayed){
  new Timer(){
    @Override public void run(){
      if (!grid.isVisible()) {
        if (canBeDelayed) {
          this.schedule(RESIZE_DELAY);
        }
        return;
      }
      grid.setAutoHeight(false);
      int height;
      int maxHeight=container.getHeight() - PADDING * 2;
      int unwrappedGridHeight=grid.getView().getScroller().firstChild().getHeight() + grid.getView().getHeader().getHeight();
      if (unwrappedGridHeight < maxHeight) {
        height=unwrappedGridHeight;
      }
 else {
        height=maxHeight;
      }
      if (grid.getHeight() == height) {
        return;
      }
      grid.setHeight(height);
      grid.getView().layout();
    }
  }
.schedule(RESIZE_DELAY);
}","private void resizeGrid(final Grid grid,final LayoutContainer container,final boolean canBeDelayed){
  new Timer(){
    @Override public void run(){
      if (!grid.isVisible()) {
        if (canBeDelayed) {
          this.schedule(RESIZE_DELAY);
        }
        return;
      }
      grid.setAutoHeight(false);
      int height;
      int maxHeight=container.getHeight() - PADDING * 2;
      int unwrappedGridHeight=grid.getView().getScroller().firstChild().getHeight() + grid.getView().getHeader().getHeight();
      if (unwrappedGridHeight < maxHeight) {
        height=unwrappedGridHeight;
      }
 else {
        height=maxHeight;
      }
      grid.setHeight(height);
      grid.getView().layout();
    }
  }
.schedule(RESIZE_DELAY);
}",0.9587096774193548
35375,"@Override public void onResize(ResizeEvent event){
  resizeGrid(contactHistoryGrid,container,false);
}","@Override public void onResize(ResizeEvent event){
  resizeGrid(contactHistoryGrid,container,true);
}",0.9655172413793104
35376,"@Override public void updateGridData(List<ContactHistory> contactHistories){
  contactHistoryGrid.getStore().removeAll();
  contactHistoryGrid.getStore().add(contactHistories);
  resizeGrid(contactHistoryGrid,container,false);
}","@Override public void updateGridData(List<ContactHistory> contactHistories){
  contactHistoryGrid.getStore().removeAll();
  contactHistoryGrid.getStore().add(contactHistories);
  resizeGrid(contactHistoryGrid,container,true);
}",0.9846153846153848
35377,"@Override public void run(){
  if (!grid.isVisible()) {
    if (canBeDelayed) {
      this.schedule(RESIZE_DELAY);
    }
    return;
  }
  grid.setAutoHeight(false);
  int height;
  int maxHeight=container.getHeight() - PADDING * 2;
  int unwrappedGridHeight=grid.getView().getScroller().firstChild().getHeight() + grid.getView().getHeader().getHeight();
  if (unwrappedGridHeight < maxHeight) {
    height=unwrappedGridHeight;
  }
 else {
    height=maxHeight;
  }
  if (grid.getHeight() == height) {
    return;
  }
  grid.setHeight(height);
  grid.getView().layout();
}","@Override public void run(){
  if (!grid.isVisible()) {
    if (canBeDelayed) {
      this.schedule(RESIZE_DELAY);
    }
    return;
  }
  grid.setAutoHeight(false);
  int height;
  int maxHeight=container.getHeight() - PADDING * 2;
  int unwrappedGridHeight=grid.getView().getScroller().firstChild().getHeight() + grid.getView().getHeader().getHeight();
  if (unwrappedGridHeight < maxHeight) {
    height=unwrappedGridHeight;
  }
 else {
    height=maxHeight;
  }
  grid.setHeight(height);
  grid.getView().layout();
}",0.9523809523809524
35378,"@Override public void initialize(){
  contactHistoryGrid=new Grid<ContactHistory>(new ListStore<ContactHistory>(),buildColumnModel());
  contactHistoryGrid.getView().setForceFit(true);
  contactHistoryGrid.setAutoHeight(true);
  contactHistoryGrid.addListener(Events.ViewReady,new Listener<BaseEvent>(){
    @Override public void handleEvent(    BaseEvent be){
      resizeGrid(contactHistoryGrid,container,true);
    }
  }
);
  Window.addResizeHandler(new ResizeHandler(){
    @Override public void onResize(    ResizeEvent event){
      resizeGrid(contactHistoryGrid,container,false);
    }
  }
);
  container=Panels.content(null,false,Layouts.vBoxLayout(VBoxLayout.VBoxLayoutAlign.STRETCH,new Layouts.LayoutOptions(new Padding(10))),""String_Node_Str"");
  container.setScrollMode(Style.Scroll.AUTOY);
  container.add(contactHistoryGrid);
  add(container);
}","@Override public void initialize(){
  contactHistoryGrid=new Grid<ContactHistory>(new ListStore<ContactHistory>(),buildColumnModel());
  contactHistoryGrid.getView().setForceFit(true);
  contactHistoryGrid.setAutoHeight(true);
  contactHistoryGrid.addListener(Events.ViewReady,new Listener<BaseEvent>(){
    @Override public void handleEvent(    BaseEvent be){
      resizeGrid(contactHistoryGrid,container,true);
    }
  }
);
  Window.addResizeHandler(new ResizeHandler(){
    @Override public void onResize(    ResizeEvent event){
      resizeGrid(contactHistoryGrid,container,true);
    }
  }
);
  container=Panels.content(null,false,Layouts.vBoxLayout(VBoxLayout.VBoxLayoutAlign.STRETCH,new Layouts.LayoutOptions(new Padding(10))),""String_Node_Str"");
  container.setScrollMode(Style.Scroll.AUTOY);
  container.add(contactHistoryGrid);
  add(container);
}",0.9959231217239372
35379,"@Override public void reloadView(ContactDTO contactDTO,ContactRelationshipsPresenter.AnchorHandler anchorHandler){
  container.remove(buttonsContainer);
  container.remove(grid);
  container.layout();
  outboundToggleButton=new ToggleButton(I18N.CONSTANTS.contactRelationshipOwnedByToggleButtonLabel());
  inboundToggleButton=new ToggleButton(I18N.CONSTANTS.contactRelationshipOwnerOfToggleButtonLabel());
  buttonsContainer=Layouts.hBox(HBoxLayout.HBoxLayoutAlign.MIDDLE);
  buttonsContainer.add(outboundToggleButton);
  buttonsContainer.add(inboundToggleButton);
  buttonsContainer.setHeight(BUTTONS_PANEL_HEIGHT);
  grid=new Grid<ContactRelationship>(new ListStore<ContactRelationship>(),generateColumnModel(contactDTO,anchorHandler));
  grid.getView().setForceFit(true);
  grid.setAutoHeight(true);
  grid.addListener(Events.ViewReady,new Listener<BaseEvent>(){
    @Override public void handleEvent(    BaseEvent be){
      resizeGrid(grid,container,true);
    }
  }
);
  Window.addResizeHandler(new ResizeHandler(){
    @Override public void onResize(    ResizeEvent event){
      resizeGrid(grid,container,false);
    }
  }
);
  container.add(buttonsContainer);
  container.add(grid);
  container.layout();
}","@Override public void reloadView(ContactDTO contactDTO,ContactRelationshipsPresenter.AnchorHandler anchorHandler){
  container.remove(buttonsContainer);
  container.remove(grid);
  container.layout();
  outboundToggleButton=new ToggleButton(I18N.CONSTANTS.contactRelationshipOwnedByToggleButtonLabel());
  inboundToggleButton=new ToggleButton(I18N.CONSTANTS.contactRelationshipOwnerOfToggleButtonLabel());
  buttonsContainer=Layouts.hBox(HBoxLayout.HBoxLayoutAlign.MIDDLE);
  buttonsContainer.add(outboundToggleButton);
  buttonsContainer.add(inboundToggleButton);
  buttonsContainer.setHeight(BUTTONS_PANEL_HEIGHT);
  grid=new Grid<ContactRelationship>(new ListStore<ContactRelationship>(),generateColumnModel(contactDTO,anchorHandler));
  grid.getView().setForceFit(true);
  grid.setAutoHeight(true);
  grid.addListener(Events.ViewReady,new Listener<BaseEvent>(){
    @Override public void handleEvent(    BaseEvent be){
      resizeGrid(grid,container,true);
    }
  }
);
  Window.addResizeHandler(new ResizeHandler(){
    @Override public void onResize(    ResizeEvent event){
      resizeGrid(grid,container,true);
    }
  }
);
  container.add(buttonsContainer);
  container.add(grid);
  container.layout();
}",0.9971181556195964
35380,"@Override public void run(){
  if (!grid.isVisible()) {
    if (canBeDelayed) {
      this.schedule(RESIZE_DELAY);
    }
    return;
  }
  grid.setAutoHeight(false);
  int height;
  int maxHeight=container.getHeight() - PADDING * 2;
  int unwrappedGridHeight=grid.getView().getScroller().firstChild().getHeight() + grid.getView().getHeader().getHeight();
  if (unwrappedGridHeight < maxHeight) {
    height=unwrappedGridHeight;
  }
 else {
    height=maxHeight;
  }
  if (grid.getHeight() == height) {
    return;
  }
  grid.setHeight(height);
  grid.getView().layout();
}","@Override public void run(){
  if (!grid.isVisible()) {
    if (canBeDelayed) {
      this.schedule(RESIZE_DELAY);
    }
    return;
  }
  grid.setAutoHeight(false);
  int height;
  int maxHeight=container.getHeight() - PADDING * 2;
  int unwrappedGridHeight=grid.getView().getScroller().firstChild().getHeight() + grid.getView().getHeader().getHeight();
  if (unwrappedGridHeight < maxHeight) {
    height=unwrappedGridHeight;
  }
 else {
    height=maxHeight;
  }
  grid.setHeight(height);
  grid.getView().layout();
}",0.9523809523809524
35381,"private void resizeGrid(final Grid grid,final LayoutContainer container,final boolean canBeDelayed){
  new Timer(){
    @Override public void run(){
      if (!grid.isVisible()) {
        if (canBeDelayed) {
          this.schedule(RESIZE_DELAY);
        }
        return;
      }
      grid.setAutoHeight(false);
      int height;
      int maxHeight=container.getHeight() - PADDING * 2;
      int unwrappedGridHeight=grid.getView().getScroller().firstChild().getHeight() + grid.getView().getHeader().getHeight();
      if (unwrappedGridHeight < maxHeight) {
        height=unwrappedGridHeight;
      }
 else {
        height=maxHeight;
      }
      if (grid.getHeight() == height) {
        return;
      }
      grid.setHeight(height);
      grid.getView().layout();
    }
  }
.schedule(RESIZE_DELAY);
}","private void resizeGrid(final Grid grid,final LayoutContainer container,final boolean canBeDelayed){
  new Timer(){
    @Override public void run(){
      if (!grid.isVisible()) {
        if (canBeDelayed) {
          this.schedule(RESIZE_DELAY);
        }
        return;
      }
      grid.setAutoHeight(false);
      int height;
      int maxHeight=container.getHeight() - PADDING * 2;
      int unwrappedGridHeight=grid.getView().getScroller().firstChild().getHeight() + grid.getView().getHeader().getHeight();
      if (unwrappedGridHeight < maxHeight) {
        height=unwrappedGridHeight;
      }
 else {
        height=maxHeight;
      }
      grid.setHeight(height);
      grid.getView().layout();
    }
  }
.schedule(RESIZE_DELAY);
}",0.9587096774193548
35382,"@Override public void onResize(ResizeEvent event){
  resizeGrid(grid,container,false);
}","@Override public void onResize(ResizeEvent event){
  resizeGrid(grid,container,true);
}",0.96
35383,"@Override public void updateGridData(List<ContactRelationship> relationships){
  grid.getStore().removeAll();
  grid.getStore().add(relationships);
  grid.recalculate();
  resizeGrid(grid,container,false);
}","@Override public void updateGridData(List<ContactRelationship> relationships){
  grid.getStore().removeAll();
  grid.getStore().add(relationships);
  grid.recalculate();
  resizeGrid(grid,container,true);
}",0.9830508474576272
35384,"private void showContactCreator(){
  final Window window=new Window();
  window.setPlain(true);
  window.setModal(true);
  window.setBlinkModal(true);
  window.setLayout(new FitLayout());
  window.setSize(700,300);
  window.setHeadingHtml(I18N.CONSTANTS.createContactDialogTitle());
  final ComboBox<ContactModelDTO> contactModelComboBox=Forms.combobox(I18N.CONSTANTS.contactModelLabel(),true,ContactModelDTO.ID,ContactModelDTO.NAME);
  final TextField<String> emailField=Forms.text(I18N.CONSTANTS.contactEmailAddress(),false);
  final TextField<String> firstNameField=Forms.text(I18N.CONSTANTS.contactFirstName(),false);
  final TextField<String> familyNameField=Forms.text(I18N.CONSTANTS.contactFamilyName(),false);
  final TextField<String> organizationNameField=Forms.text(I18N.CONSTANTS.contactOrganizationName(),false);
  firstNameField.setVisible(false);
  familyNameField.setVisible(false);
  organizationNameField.setVisible(false);
  final ComboBox<OrgUnitDTO> mainOrgUnitComboBox=Forms.combobox(I18N.CONSTANTS.contactMainOrgUnit(),false,OrgUnitDTO.ID,OrgUnitDTO.FULL_NAME);
  final ListComboBox<OrgUnitDTO> secondaryOrgUnitsComboBox=new ListComboBox<OrgUnitDTO>(OrgUnitDTO.ID,OrgUnitDTO.FULL_NAME);
  secondaryOrgUnitsComboBox.initComponent();
  final AdapterField secondaryOrgUnitsFieldAdapter=Forms.adapter(I18N.CONSTANTS.contactSecondaryOrgUnits(),secondaryOrgUnitsComboBox);
  secondaryOrgUnitsFieldAdapter.setVisible(false);
  dispatch.execute(new GetContactModels(allowedType,allowedContactModelIds,true),new AsyncCallback<ListResult<ContactModelDTO>>(){
    @Override public void onFailure(    Throwable caught){
      Log.error(""String_Node_Str"");
    }
    @Override public void onSuccess(    ListResult<ContactModelDTO> result){
      contactModelComboBox.getStore().add(result.getList());
    }
  }
);
  dispatch.execute(new GetOrgUnits(OrgUnitDTO.Mode.WITH_TREE),new AsyncCallback<ListResult<OrgUnitDTO>>(){
    @Override public void onFailure(    Throwable caught){
      Log.error(""String_Node_Str"");
    }
    @Override public void onSuccess(    ListResult<OrgUnitDTO> result){
      for (      OrgUnitDTO orgUnitDTO : result.getData()) {
        fillOrgUnitsComboboxes(orgUnitDTO,mainOrgUnitComboBox,secondaryOrgUnitsComboBox);
      }
    }
  }
);
  mainOrgUnitComboBox.addSelectionChangedListener(new SelectionChangedListener<OrgUnitDTO>(){
    @Override public void selectionChanged(    SelectionChangedEvent<OrgUnitDTO> se){
      if (se.getSelectedItem() == null) {
        secondaryOrgUnitsFieldAdapter.setVisible(false);
        return;
      }
      secondaryOrgUnitsFieldAdapter.setVisible(true);
    }
  }
);
  contactModelComboBox.addSelectionChangedListener(new SelectionChangedListener<ContactModelDTO>(){
    @Override public void selectionChanged(    SelectionChangedEvent<ContactModelDTO> event){
      ContactModelType currentType=null;
      if (event.getSelectedItem() != null) {
        currentType=event.getSelectedItem().getType();
      }
      firstNameField.setVisible(currentType == ContactModelType.INDIVIDUAL);
      familyNameField.setVisible(currentType == ContactModelType.INDIVIDUAL);
      organizationNameField.setVisible(currentType == ContactModelType.ORGANIZATION);
      firstNameField.setAllowBlank(currentType != ContactModelType.INDIVIDUAL);
      familyNameField.setAllowBlank(currentType != ContactModelType.INDIVIDUAL);
      organizationNameField.setAllowBlank(currentType != ContactModelType.ORGANIZATION);
    }
  }
);
  org.sigmah.client.ui.widget.button.Button button=Forms.button(I18N.CONSTANTS.createContact());
  final FormPanel formPanel=Forms.panel(200);
  formPanel.add(contactModelComboBox);
  formPanel.add(emailField);
  formPanel.add(firstNameField);
  formPanel.add(familyNameField);
  formPanel.add(organizationNameField);
  formPanel.add(mainOrgUnitComboBox);
  formPanel.add(secondaryOrgUnitsFieldAdapter);
  formPanel.getButtonBar().add(button);
  button.addSelectionListener(new SelectionListener<ButtonEvent>(){
    @Override public void componentSelected(    ButtonEvent event){
      if (!formPanel.isValid()) {
        return;
      }
      createContactHandler.handleContactCreation(contactModelComboBox.getValue(),emailField.getValue(),firstNameField.getValue(),familyNameField.getValue(),organizationNameField.getValue(),mainOrgUnitComboBox.getValue(),secondaryOrgUnitsComboBox.getListStore().getModels());
      window.hide();
    }
  }
);
  window.add(formPanel);
  window.show();
}","private void showContactCreator(){
  final Window window=new Window();
  window.setPlain(true);
  window.setModal(true);
  window.setBlinkModal(true);
  window.setLayout(new FitLayout());
  window.setSize(700,300);
  window.setHeadingHtml(I18N.CONSTANTS.createContactDialogTitle());
  final ComboBox<ContactModelDTO> contactModelComboBox=Forms.combobox(I18N.CONSTANTS.contactModelLabel(),true,ContactModelDTO.ID,ContactModelDTO.NAME);
  final TextField<String> emailField=Forms.text(I18N.CONSTANTS.contactEmailAddress(),false);
  final TextField<String> firstNameField=Forms.text(I18N.CONSTANTS.contactFirstName(),false);
  final TextField<String> familyNameField=Forms.text(I18N.CONSTANTS.contactFamilyName(),false);
  final TextField<String> organizationNameField=Forms.text(I18N.CONSTANTS.contactOrganizationName(),false);
  firstNameField.setVisible(false);
  familyNameField.setVisible(false);
  organizationNameField.setVisible(false);
  final ComboBox<OrgUnitDTO> mainOrgUnitComboBox=Forms.combobox(I18N.CONSTANTS.contactMainOrgUnit(),true,OrgUnitDTO.ID,OrgUnitDTO.FULL_NAME);
  final ListComboBox<OrgUnitDTO> secondaryOrgUnitsComboBox=new ListComboBox<OrgUnitDTO>(OrgUnitDTO.ID,OrgUnitDTO.FULL_NAME);
  secondaryOrgUnitsComboBox.initComponent();
  final AdapterField secondaryOrgUnitsFieldAdapter=Forms.adapter(I18N.CONSTANTS.contactSecondaryOrgUnits(),secondaryOrgUnitsComboBox);
  secondaryOrgUnitsFieldAdapter.setVisible(false);
  dispatch.execute(new GetContactModels(allowedType,allowedContactModelIds,true),new AsyncCallback<ListResult<ContactModelDTO>>(){
    @Override public void onFailure(    Throwable caught){
      Log.error(""String_Node_Str"");
    }
    @Override public void onSuccess(    ListResult<ContactModelDTO> result){
      contactModelComboBox.getStore().add(result.getList());
    }
  }
);
  dispatch.execute(new GetOrgUnits(OrgUnitDTO.Mode.WITH_TREE),new AsyncCallback<ListResult<OrgUnitDTO>>(){
    @Override public void onFailure(    Throwable caught){
      Log.error(""String_Node_Str"");
    }
    @Override public void onSuccess(    ListResult<OrgUnitDTO> result){
      for (      OrgUnitDTO orgUnitDTO : result.getData()) {
        fillOrgUnitsComboboxes(orgUnitDTO,mainOrgUnitComboBox,secondaryOrgUnitsComboBox);
      }
    }
  }
);
  mainOrgUnitComboBox.addSelectionChangedListener(new SelectionChangedListener<OrgUnitDTO>(){
    @Override public void selectionChanged(    SelectionChangedEvent<OrgUnitDTO> se){
      if (se.getSelectedItem() == null) {
        secondaryOrgUnitsFieldAdapter.setVisible(false);
        return;
      }
      secondaryOrgUnitsFieldAdapter.setVisible(true);
    }
  }
);
  contactModelComboBox.addSelectionChangedListener(new SelectionChangedListener<ContactModelDTO>(){
    @Override public void selectionChanged(    SelectionChangedEvent<ContactModelDTO> event){
      ContactModelType currentType=null;
      if (event.getSelectedItem() != null) {
        currentType=event.getSelectedItem().getType();
      }
      firstNameField.setVisible(currentType == ContactModelType.INDIVIDUAL);
      familyNameField.setVisible(currentType == ContactModelType.INDIVIDUAL);
      organizationNameField.setVisible(currentType == ContactModelType.ORGANIZATION);
      firstNameField.setAllowBlank(currentType != ContactModelType.INDIVIDUAL);
      familyNameField.setAllowBlank(currentType != ContactModelType.INDIVIDUAL);
      organizationNameField.setAllowBlank(currentType != ContactModelType.ORGANIZATION);
    }
  }
);
  org.sigmah.client.ui.widget.button.Button button=Forms.button(I18N.CONSTANTS.createContact());
  final FormPanel formPanel=Forms.panel(200);
  formPanel.add(contactModelComboBox);
  formPanel.add(emailField);
  formPanel.add(firstNameField);
  formPanel.add(familyNameField);
  formPanel.add(organizationNameField);
  formPanel.add(mainOrgUnitComboBox);
  formPanel.add(secondaryOrgUnitsFieldAdapter);
  formPanel.getButtonBar().add(button);
  button.addSelectionListener(new SelectionListener<ButtonEvent>(){
    @Override public void componentSelected(    ButtonEvent event){
      if (!formPanel.isValid()) {
        return;
      }
      createContactHandler.handleContactCreation(contactModelComboBox.getValue(),emailField.getValue(),firstNameField.getValue(),familyNameField.getValue(),organizationNameField.getValue(),mainOrgUnitComboBox.getValue(),secondaryOrgUnitsComboBox.getListStore().getModels());
      window.hide();
    }
  }
);
  window.add(formPanel);
  window.show();
}",0.9992191857222532
35385,"public String getSerializedValue(Contact contact){
switch (type) {
case COUNTRY:
    if (contact.getCountry() == null) {
      return null;
    }
  return String.valueOf(contact.getCountry().getId());
case CREATION_DATE:
return String.valueOf(contact.getDateCreated().getTime());
case DIRECT_MEMBERSHIP:
if (contact.getParent() == null) {
return null;
}
return String.valueOf(contact.getParent().getId());
case EMAIL_ADDRESS:
return contact.getEmail();
case FAMILY_NAME:
return contact.getName();
case FIRST_NAME:
return contact.getFirstname();
case LOGIN:
return contact.getLogin();
case MAIN_ORG_UNIT:
if (contact.getMainOrgUnit() == null) {
return null;
}
return String.valueOf(contact.getMainOrgUnit().getId());
case ORGANIZATION_NAME:
return contact.getName();
case PHONE_NUMBER:
return contact.getPhoneNumber();
case PHOTO:
return contact.getPhoto();
case POSTAL_ADDRESS:
return contact.getPostalAddress();
case SECONDARY_ORG_UNITS:
if (contact.getSecondaryOrgUnits() == null) {
return null;
}
StringBuilder stringBuilder=new StringBuilder();
for (int i=0; i < contact.getSecondaryOrgUnits().size(); i++) {
if (i != 0) {
stringBuilder.append(ValueResultUtils.DEFAULT_VALUE_SEPARATOR);
}
stringBuilder.append(contact.getSecondaryOrgUnits().get(i).getId());
}
return stringBuilder.toString();
case TOP_MEMBERSHIP:
if (contact.getRoot() == null) {
return null;
}
return String.valueOf(contact.getRoot().getId());
default :
throw new IllegalStateException(""String_Node_Str"" + getType());
}
}","public String getSerializedValue(Contact contact){
switch (type) {
case COUNTRY:
    if (contact.getCountry() == null) {
      return null;
    }
  return String.valueOf(contact.getCountry().getId());
case CREATION_DATE:
return String.valueOf(contact.getDateCreated().getTime());
case DIRECT_MEMBERSHIP:
if (contact.getParent() == null) {
return null;
}
return String.valueOf(contact.getParent().getId());
case EMAIL_ADDRESS:
return contact.getEmail();
case FAMILY_NAME:
if (contact.getContactModel().getType().equals(ContactModelType.INDIVIDUAL)) {
return contact.getName();
}
 else {
return null;
}
case FIRST_NAME:
return contact.getFirstname();
case LOGIN:
return contact.getLogin();
case MAIN_ORG_UNIT:
if (contact.getMainOrgUnit() == null) {
return null;
}
return String.valueOf(contact.getMainOrgUnit().getId());
case ORGANIZATION_NAME:
if (contact.getContactModel().getType().equals(ContactModelType.ORGANIZATION)) {
return contact.getName();
}
 else {
return null;
}
case PHONE_NUMBER:
return contact.getPhoneNumber();
case PHOTO:
return contact.getPhoto();
case POSTAL_ADDRESS:
return contact.getPostalAddress();
case SECONDARY_ORG_UNITS:
if (contact.getSecondaryOrgUnits() == null) {
return null;
}
StringBuilder stringBuilder=new StringBuilder();
for (int i=0; i < contact.getSecondaryOrgUnits().size(); i++) {
if (i != 0) {
stringBuilder.append(ValueResultUtils.DEFAULT_VALUE_SEPARATOR);
}
stringBuilder.append(contact.getSecondaryOrgUnits().get(i).getId());
}
return stringBuilder.toString();
case TOP_MEMBERSHIP:
if (contact.getRoot() == null) {
return null;
}
return String.valueOf(contact.getRoot().getId());
default :
throw new IllegalStateException(""String_Node_Str"" + getType());
}
}",0.9342928660826032
35386,"public String getFormattedValue(Contact contact){
switch (type) {
case COUNTRY:
    if (contact.getCountry() == null) {
      return null;
    }
  return contact.getCountry().getName();
case CREATION_DATE:
return SimpleDateFormat.getDateTimeInstance().format(contact.getDateCreated());
case DIRECT_MEMBERSHIP:
if (contact.getParent() == null) {
return null;
}
return contact.getParent().getFullName();
case EMAIL_ADDRESS:
return contact.getEmail();
case FAMILY_NAME:
return contact.getName();
case FIRST_NAME:
return contact.getFirstname();
case LOGIN:
return contact.getLogin();
case MAIN_ORG_UNIT:
if (contact.getMainOrgUnit() == null) {
return null;
}
return contact.getMainOrgUnit().getFullName();
case ORGANIZATION_NAME:
return contact.getName();
case PHONE_NUMBER:
return contact.getPhoneNumber();
case PHOTO:
return contact.getPhoto();
case POSTAL_ADDRESS:
return contact.getPostalAddress();
case SECONDARY_ORG_UNITS:
if (contact.getSecondaryOrgUnits() == null) {
return null;
}
StringBuilder stringBuilder=new StringBuilder();
for (int i=0; i < contact.getSecondaryOrgUnits().size(); i++) {
if (i != 0) {
stringBuilder.append(""String_Node_Str"");
}
stringBuilder.append(contact.getSecondaryOrgUnits().get(i).getFullName());
}
return stringBuilder.toString();
case TOP_MEMBERSHIP:
if (contact.getRoot() == null) {
return null;
}
return contact.getRoot().getFullName();
default :
throw new IllegalStateException(""String_Node_Str"" + getType());
}
}","public String getFormattedValue(Contact contact){
switch (type) {
case COUNTRY:
    if (contact.getCountry() == null) {
      return null;
    }
  return contact.getCountry().getName();
case CREATION_DATE:
return SimpleDateFormat.getDateTimeInstance().format(contact.getDateCreated());
case DIRECT_MEMBERSHIP:
if (contact.getParent() == null) {
return null;
}
return contact.getParent().getFullName();
case EMAIL_ADDRESS:
return contact.getEmail();
case FAMILY_NAME:
if (contact.getContactModel().getType().equals(ContactModelType.INDIVIDUAL)) {
return contact.getName();
}
 else {
return null;
}
case FIRST_NAME:
return contact.getFirstname();
case LOGIN:
return contact.getLogin();
case MAIN_ORG_UNIT:
if (contact.getMainOrgUnit() == null) {
return null;
}
return contact.getMainOrgUnit().getFullName();
case ORGANIZATION_NAME:
if (contact.getContactModel().getType().equals(ContactModelType.ORGANIZATION)) {
return contact.getName();
}
 else {
return null;
}
case PHONE_NUMBER:
return contact.getPhoneNumber();
case PHOTO:
return contact.getPhoto();
case POSTAL_ADDRESS:
return contact.getPostalAddress();
case SECONDARY_ORG_UNITS:
if (contact.getSecondaryOrgUnits() == null) {
return null;
}
StringBuilder stringBuilder=new StringBuilder();
for (int i=0; i < contact.getSecondaryOrgUnits().size(); i++) {
if (i != 0) {
stringBuilder.append(""String_Node_Str"");
}
stringBuilder.append(contact.getSecondaryOrgUnits().get(i).getFullName());
}
return stringBuilder.toString();
case TOP_MEMBERSHIP:
if (contact.getRoot() == null) {
return null;
}
return contact.getRoot().getFullName();
default :
throw new IllegalStateException(""String_Node_Str"" + getType());
}
}",0.9325626204238922
35387,"@Override protected ListResult<ContactDTO> execute(CheckContactDuplication command,UserDispatch.UserExecutionContext context) throws CommandException {
  List<Contact> contacts=contactDAO.findContactsByEmailOrSimilarName(context.getUser().getOrganization().getId(),command.getContactId(),command.getEmail(),command.getFirstName(),command.getName());
  List<ContactDTO> contactDTOs=new ArrayList<>();
  for (  Contact contact : contacts) {
    if (!contact.isDeleted()) {
      contactDTOs.add(mapper().map(contact,ContactDTO.class));
    }
  }
  return new ListResult<>(contactDTOs);
}","@Override protected ListResult<ContactDTO> execute(CheckContactDuplication command,UserDispatch.UserExecutionContext context) throws CommandException {
  List<Contact> contacts=contactDAO.findContactsByEmailOrSimilarName(context.getUser().getOrganization().getId(),command.getContactId(),command.getEmail(),command.getFirstName(),command.getName());
  List<ContactDTO> contactDTOs=new ArrayList<>();
  for (  Contact contact : contacts) {
    if (!contact.isDeleted() && contact.getContactModel().getId() == command.getContactModelDTO().getId()) {
      contactDTOs.add(mapper().map(contact,ContactDTO.class));
    }
  }
  return new ListResult<>(contactDTOs);
}",0.9382518043303928
35388,"private void applyProperties(List<ContactDuplicatedProperty> properties,Contact contact){
  for (  ContactDuplicatedProperty property : properties) {
    DefaultContactFlexibleElement flexibleElement=(DefaultContactFlexibleElement)flexibleElementDAO.findById(property.getFlexibleElementId());
switch (flexibleElement.getType()) {
case FIRST_NAME:
      contact.setFirstname(property.getSerializedNewValue());
    break;
case ORGANIZATION_NAME:
case FAMILY_NAME:
  contact.setName(property.getSerializedNewValue());
break;
case MAIN_ORG_UNIT:
if (property.getSerializedNewValue() == null) {
contact.setMainOrgUnit(null);
continue;
}
int mainOrgUnitId=Integer.parseInt(property.getSerializedNewValue());
contact.setMainOrgUnit(orgUnitDAO.findById(mainOrgUnitId));
break;
case SECONDARY_ORG_UNITS:
if (property.getSerializedNewValue() == null) {
contact.setSecondaryOrgUnits(null);
continue;
}
ArrayList<OrgUnit> orgUnits=new ArrayList<>();
for (String serializedId : property.getSerializedNewValue().split(ValueResultUtils.DEFAULT_VALUE_SEPARATOR)) {
int secondaryOrgUnitId=Integer.parseInt(serializedId);
orgUnits.add(orgUnitDAO.findById(secondaryOrgUnitId));
}
contact.setSecondaryOrgUnits(orgUnits);
break;
case LOGIN:
contact.setLogin(property.getSerializedNewValue());
break;
case EMAIL_ADDRESS:
contact.setEmail(property.getSerializedNewValue());
break;
case PHONE_NUMBER:
contact.setPhoneNumber(property.getSerializedNewValue());
break;
case POSTAL_ADDRESS:
contact.setPostalAddress(property.getSerializedNewValue());
break;
case PHOTO:
contact.setPhoto(property.getSerializedNewValue());
break;
case COUNTRY:
if (property.getSerializedNewValue() == null) {
contact.setCountry(null);
continue;
}
int countryId=Integer.parseInt(property.getSerializedNewValue());
contact.setCountry(countryDAO.findById(countryId));
break;
case DIRECT_MEMBERSHIP:
if (property.getSerializedNewValue() == null) {
contact.setParent(null);
continue;
}
int parentId=Integer.parseInt(property.getSerializedNewValue());
contact.setParent(contactDAO.findById(parentId));
break;
case CREATION_DATE:
case TOP_MEMBERSHIP:
break;
default :
throw new IllegalStateException(""String_Node_Str"" + flexibleElement.getType());
}
}
}","private void applyProperties(List<ContactDuplicatedProperty> properties,Contact contact,User user){
  for (  ContactDuplicatedProperty property : properties) {
    DefaultContactFlexibleElement flexibleElement=(DefaultContactFlexibleElement)flexibleElementDAO.findById(property.getFlexibleElementId());
switch (flexibleElement.getType()) {
case FIRST_NAME:
      contact.setFirstname(property.getSerializedNewValue());
    break;
case ORGANIZATION_NAME:
case FAMILY_NAME:
  contact.setName(property.getSerializedNewValue());
break;
case MAIN_ORG_UNIT:
if (property.getSerializedNewValue() == null) {
contact.setMainOrgUnit(null);
continue;
}
int mainOrgUnitId=Integer.parseInt(property.getSerializedNewValue());
contact.setMainOrgUnit(orgUnitDAO.findById(mainOrgUnitId));
break;
case SECONDARY_ORG_UNITS:
if (property.getSerializedNewValue() == null) {
contact.setSecondaryOrgUnits(null);
continue;
}
ArrayList<OrgUnit> orgUnits=new ArrayList<>();
for (String serializedId : property.getSerializedNewValue().split(ValueResultUtils.DEFAULT_VALUE_SEPARATOR)) {
int secondaryOrgUnitId=Integer.parseInt(serializedId);
orgUnits.add(orgUnitDAO.findById(secondaryOrgUnitId));
}
contact.setSecondaryOrgUnits(orgUnits);
break;
case LOGIN:
contact.setLogin(property.getSerializedNewValue());
break;
case EMAIL_ADDRESS:
contact.setEmail(property.getSerializedNewValue());
break;
case PHONE_NUMBER:
contact.setPhoneNumber(property.getSerializedNewValue());
break;
case POSTAL_ADDRESS:
contact.setPostalAddress(property.getSerializedNewValue());
break;
case PHOTO:
contact.setPhoto(property.getSerializedNewValue());
break;
case COUNTRY:
if (property.getSerializedNewValue() == null) {
contact.setCountry(null);
continue;
}
int countryId=Integer.parseInt(property.getSerializedNewValue());
contact.setCountry(countryDAO.findById(countryId));
break;
case DIRECT_MEMBERSHIP:
if (property.getSerializedNewValue() == null) {
contact.setParent(null);
continue;
}
int parentId=Integer.parseInt(property.getSerializedNewValue());
contact.setParent(contactDAO.findById(parentId));
break;
case CREATION_DATE:
case TOP_MEMBERSHIP:
break;
default :
throw new IllegalStateException(""String_Node_Str"" + flexibleElement.getType());
}
}
contactDAO.persist(contact,user);
}",0.99009900990099
35389,"@Override protected ContactDTO execute(DedupeContact command,UserDispatch.UserExecutionContext context) throws CommandException {
  Contact targetedContact=contactDAO.findById(command.getTargetedContactId());
  if (command.getOriginContactId() != null) {
    Contact originContact=contactDAO.findById(command.getOriginContactId());
    mergeContacts(originContact,targetedContact,command.getContactDuplicatedProperties(),context.getUser());
  }
 else {
    applyProperties(command.getContactDuplicatedProperties(),targetedContact);
  }
  return mapper().map(targetedContact,new ContactDTO());
}","@Override protected ContactDTO execute(DedupeContact command,UserDispatch.UserExecutionContext context) throws CommandException {
  Contact targetedContact=contactDAO.findById(command.getTargetedContactId());
  if (command.getOriginContactId() != null) {
    Contact originContact=contactDAO.findById(command.getOriginContactId());
    mergeContacts(originContact,targetedContact,command.getContactDuplicatedProperties(),context.getUser());
  }
 else {
    applyProperties(command.getContactDuplicatedProperties(),targetedContact,context.getUser());
  }
  return mapper().map(targetedContact,new ContactDTO());
}",0.9850746268656716
35390,"/** 
 * Gets a flexible element value from the database.
 * @param cmd {@link GetValue} command containing the flexible element class, its id, and the project id
 * @return a {@link ValueResult} object containing the value of the flexible element or containing {@code null} ifthere is no value defined for this element.
 * @throws org.sigmah.shared.dispatch.CommandException
 */
@Override public ValueResult execute(final GetValue cmd,final UserExecutionContext context) throws CommandException {
  LOG.debug(""String_Node_Str"",cmd);
  final ValueResult valueResult=new ValueResult();
  String historyValue=null;
  if (cmd.getAmendmentId() != null) {
    final TypedQuery<Amendment> amedmentQuery=em().createQuery(""String_Node_Str"",Amendment.class);
    amedmentQuery.setParameter(""String_Node_Str"",cmd.getAmendmentId());
    final Amendment amendment=amedmentQuery.getSingleResult();
    final List<HistoryToken> tokens=amendment.getValues();
    if (tokens != null) {
      for (      final HistoryToken token : tokens) {
        if (token.getElementId().equals(cmd.getElementId()) && token.getLayoutGroupIterationId().equals(cmd.getIterationId())) {
          historyValue=token.getValue();
        }
      }
    }
  }
  final String valueFromDatabase;
  if (DefaultFlexibleElementDTO.ENTITY_NAME.equals(cmd.getElementEntityName())) {
    valueFromDatabase=findCurrentValueOfDefaultElement(cmd.getProjectId(),cmd.getElementId());
  }
 else   if (BudgetRatioElementDTO.ENTITY_NAME.equals(cmd.getElementEntityName())) {
    valueFromDatabase=findCurrentValueOfBudgetRatioElement(cmd.getProjectId(),cmd.getElementId());
  }
 else {
    valueFromDatabase=findCurrentValue(cmd.getProjectId(),cmd.getElementId(),cmd.getIterationId());
  }
  String valueAsString=valueFromDatabase;
  boolean isValueExisting=valueFromDatabase != null;
  if (historyValue != null) {
    valueAsString=historyValue;
    isValueExisting=true;
    valueResult.setAmendment(true);
  }
  if (!isValueExisting) {
    LOG.debug(""String_Node_Str"",cmd.getElementId());
    return valueResult;
  }
  Query query=null;
  String elementClassName=cmd.getElementEntityName();
  ListableValue dto=null;
  Boolean isList=null;
  if (elementClassName.equals(TripletsListElementDTO.ENTITY_NAME)) {
    LOG.debug(""String_Node_Str"");
    dto=new TripletValueDTO();
    isList=true;
    query=em().createQuery(""String_Node_Str"");
    query.setParameter(""String_Node_Str"",ValueResultUtils.splitValuesAsInteger(valueAsString));
  }
 else   if (elementClassName.equals(IndicatorsListElementDTO.ENTITY_NAME)) {
    LOG.debug(""String_Node_Str"");
    dto=new IndicatorsListValueDTO();
    isList=true;
    query=em().createQuery(""String_Node_Str"");
    query.setParameter(""String_Node_Str"",Integer.valueOf(valueAsString));
  }
 else   if (elementClassName.equals(BudgetDistributionElementDTO.ENTITY_NAME)) {
    LOG.debug(""String_Node_Str"");
    dto=new BudgetPartsListValueDTO();
    isList=true;
    query=em().createQuery(""String_Node_Str"");
    query.setParameter(""String_Node_Str"",Integer.valueOf(valueAsString));
  }
 else   if (elementClassName.equals(FilesListElementDTO.ENTITY_NAME)) {
    LOG.debug(""String_Node_Str"");
    dto=new FileDTO();
    isList=true;
    query=em().createQuery(""String_Node_Str"");
    query.setParameter(""String_Node_Str"",ValueResultUtils.splitValuesAsInteger(valueAsString));
  }
 else   if (elementClassName.equals(ReportListElementDTO.ENTITY_NAME)) {
    LOG.debug(""String_Node_Str"");
    dto=new ReportReference();
    isList=true;
    query=em().createQuery(""String_Node_Str"");
    query.setParameter(""String_Node_Str"",ValueResultUtils.splitValuesAsInteger(valueAsString));
  }
 else   if (!(elementClassName.equals(MessageElementDTO.ENTITY_NAME))) {
    LOG.debug(""String_Node_Str"");
    dto=null;
    isList=false;
  }
  if (isList == null) {
    return valueResult;
  }
  if (isList) {
    LOG.debug(""String_Node_Str"",cmd.getElementId());
    @SuppressWarnings(""String_Node_Str"") final List<Object> objectsList=query.getResultList();
    final List<ListableValue> serializablesList=new ArrayList<>();
    for (    Object o : objectsList) {
      serializablesList.add(mapper().map(o,dto.getClass()));
    }
    if (elementClassName.equals(FilesListElementDTO.ENTITY_NAME)) {
      for (      final ListableValue value : serializablesList) {
        if (value instanceof FileDTO) {
          final FileDTO file=(FileDTO)value;
          for (          final FileVersionDTO version : file.getVersions()) {
            version.setAvailable(fileStorageProvider.exists(version.getPath()));
          }
        }
      }
    }
    valueResult.setValuesObject(serializablesList);
  }
 else {
    LOG.debug(""String_Node_Str"",cmd.getElementId());
    valueResult.setValueObject(valueAsString);
  }
  LOG.debug(""String_Node_Str"",valueResult);
  return valueResult;
}","/** 
 * Gets a flexible element value from the database.
 * @param cmd {@link GetValue} command containing the flexible element class, its id, and the project id
 * @return a {@link ValueResult} object containing the value of the flexible element or containing {@code null} ifthere is no value defined for this element.
 * @throws org.sigmah.shared.dispatch.CommandException
 */
@Override public ValueResult execute(final GetValue cmd,final UserExecutionContext context) throws CommandException {
  LOG.debug(""String_Node_Str"",cmd);
  final ValueResult valueResult=new ValueResult();
  String historyValue=null;
  if (cmd.getAmendmentId() != null) {
    final TypedQuery<Amendment> amedmentQuery=em().createQuery(""String_Node_Str"",Amendment.class);
    amedmentQuery.setParameter(""String_Node_Str"",cmd.getAmendmentId());
    final Amendment amendment=amedmentQuery.getSingleResult();
    final List<HistoryToken> tokens=amendment.getValues();
    if (tokens != null) {
      for (      final HistoryToken token : tokens) {
        if (token.getElementId().equals(cmd.getElementId()) && token.getLayoutGroupIterationId() == cmd.getIterationId()) {
          historyValue=token.getValue();
        }
      }
    }
  }
  final String valueFromDatabase;
  if (DefaultFlexibleElementDTO.ENTITY_NAME.equals(cmd.getElementEntityName())) {
    valueFromDatabase=findCurrentValueOfDefaultElement(cmd.getProjectId(),cmd.getElementId());
  }
 else   if (BudgetRatioElementDTO.ENTITY_NAME.equals(cmd.getElementEntityName())) {
    valueFromDatabase=findCurrentValueOfBudgetRatioElement(cmd.getProjectId(),cmd.getElementId());
  }
 else {
    valueFromDatabase=findCurrentValue(cmd.getProjectId(),cmd.getElementId(),cmd.getIterationId());
  }
  String valueAsString=valueFromDatabase;
  boolean isValueExisting=valueFromDatabase != null;
  if (historyValue != null) {
    valueAsString=historyValue;
    isValueExisting=true;
    valueResult.setAmendment(true);
  }
  if (!isValueExisting) {
    LOG.debug(""String_Node_Str"",cmd.getElementId());
    return valueResult;
  }
  Query query=null;
  String elementClassName=cmd.getElementEntityName();
  ListableValue dto=null;
  Boolean isList=null;
  if (elementClassName.equals(TripletsListElementDTO.ENTITY_NAME)) {
    LOG.debug(""String_Node_Str"");
    dto=new TripletValueDTO();
    isList=true;
    query=em().createQuery(""String_Node_Str"");
    query.setParameter(""String_Node_Str"",ValueResultUtils.splitValuesAsInteger(valueAsString));
  }
 else   if (elementClassName.equals(IndicatorsListElementDTO.ENTITY_NAME)) {
    LOG.debug(""String_Node_Str"");
    dto=new IndicatorsListValueDTO();
    isList=true;
    query=em().createQuery(""String_Node_Str"");
    query.setParameter(""String_Node_Str"",Integer.valueOf(valueAsString));
  }
 else   if (elementClassName.equals(BudgetDistributionElementDTO.ENTITY_NAME)) {
    LOG.debug(""String_Node_Str"");
    dto=new BudgetPartsListValueDTO();
    isList=true;
    query=em().createQuery(""String_Node_Str"");
    query.setParameter(""String_Node_Str"",Integer.valueOf(valueAsString));
  }
 else   if (elementClassName.equals(FilesListElementDTO.ENTITY_NAME)) {
    LOG.debug(""String_Node_Str"");
    dto=new FileDTO();
    isList=true;
    query=em().createQuery(""String_Node_Str"");
    query.setParameter(""String_Node_Str"",ValueResultUtils.splitValuesAsInteger(valueAsString));
  }
 else   if (elementClassName.equals(ReportListElementDTO.ENTITY_NAME)) {
    LOG.debug(""String_Node_Str"");
    dto=new ReportReference();
    isList=true;
    query=em().createQuery(""String_Node_Str"");
    query.setParameter(""String_Node_Str"",ValueResultUtils.splitValuesAsInteger(valueAsString));
  }
 else   if (!(elementClassName.equals(MessageElementDTO.ENTITY_NAME))) {
    LOG.debug(""String_Node_Str"");
    dto=null;
    isList=false;
  }
  if (isList == null) {
    return valueResult;
  }
  if (isList) {
    LOG.debug(""String_Node_Str"",cmd.getElementId());
    @SuppressWarnings(""String_Node_Str"") final List<Object> objectsList=query.getResultList();
    final List<ListableValue> serializablesList=new ArrayList<>();
    for (    Object o : objectsList) {
      serializablesList.add(mapper().map(o,dto.getClass()));
    }
    if (elementClassName.equals(FilesListElementDTO.ENTITY_NAME)) {
      for (      final ListableValue value : serializablesList) {
        if (value instanceof FileDTO) {
          final FileDTO file=(FileDTO)value;
          for (          final FileVersionDTO version : file.getVersions()) {
            version.setAvailable(fileStorageProvider.exists(version.getPath()));
          }
        }
      }
    }
    valueResult.setValuesObject(serializablesList);
  }
 else {
    LOG.debug(""String_Node_Str"",cmd.getElementId());
    valueResult.setValueObject(valueAsString);
  }
  LOG.debug(""String_Node_Str"",valueResult);
  return valueResult;
}",0.998658825956876
35391,"public List<ContactDuplicatedProperty> extractProperties(Contact newContact,Contact oldContact,Language language){
  if (!Objects.equals(newContact.getContactModel().getId(),oldContact.getContactModel().getId())) {
    throw new IllegalStateException(""String_Node_Str"" + newContact.getContactModel().getId() + ""String_Node_Str""+ oldContact.getContactModel().getId());
  }
  List<ContactDuplicatedProperty> properties=new ArrayList<>();
  for (  LayoutGroup group : newContact.getContactModel().getDetails().getLayout().getGroups()) {
    if (group.getHasIterations()) {
      continue;
    }
    for (    LayoutConstraint layoutConstraint : group.getConstraints()) {
      FlexibleElement element=layoutConstraint.getElement();
      String serializedNewValue;
      String serializedOldValue;
      String formattedNewValue;
      String formattedOldValue;
      ContactDuplicatedProperty.ValueType valueType=ContactDuplicatedProperty.ValueType.STRING;
      if (element instanceof DefaultContactFlexibleElement) {
        DefaultContactFlexibleElement defaultContactFlexibleElement=(DefaultContactFlexibleElement)element;
        serializedNewValue=defaultContactFlexibleElement.getSerializedValue(newContact);
        serializedOldValue=defaultContactFlexibleElement.getSerializedValue(oldContact);
        formattedNewValue=defaultContactFlexibleElement.getFormattedValue(newContact);
        formattedOldValue=defaultContactFlexibleElement.getFormattedValue(oldContact);
        if (((DefaultContactFlexibleElement)element).getType() == DefaultContactFlexibleElementType.PHOTO) {
          valueType=ContactDuplicatedProperty.ValueType.IMAGE;
        }
      }
 else {
        Value newValue=valueDAO.getValueByElementAndContainer(element.getId(),newContact.getId());
        Value oldValue=valueDAO.getValueByElementAndContainer(element.getId(),oldContact.getId());
        serializedNewValue=newValue.getValue();
        serializedOldValue=oldValue.getValue();
        formattedNewValue=modelPropertyService.getFormattedValue(element,newValue.getValue(),language);
        formattedOldValue=modelPropertyService.getFormattedValue(element,oldValue.getValue(),language);
      }
      if (""String_Node_Str"".equals(serializedOldValue)) {
        serializedOldValue=null;
      }
      if (""String_Node_Str"".equals(serializedNewValue)) {
        serializedNewValue=null;
      }
      if (Objects.equals(serializedNewValue,serializedOldValue)) {
        continue;
      }
      String propertyLabel=element.getLabel();
      if (propertyLabel == null && element instanceof DefaultContactFlexibleElement) {
        propertyLabel=modelPropertyService.getDefaultContactPropertyLabel(((DefaultContactFlexibleElement)element).getType(),language);
      }
      ContactDuplicatedProperty contactDuplicatedProperty=new ContactDuplicatedProperty();
      contactDuplicatedProperty.setPropertyLabel(propertyLabel);
      contactDuplicatedProperty.setSerializedNewValue(serializedNewValue);
      contactDuplicatedProperty.setSerializedOldValue(serializedOldValue);
      contactDuplicatedProperty.setFormattedNewValue(formattedNewValue);
      contactDuplicatedProperty.setFormattedOldValue(formattedOldValue);
      contactDuplicatedProperty.setFlexibleElementId(element.getId());
      contactDuplicatedProperty.setValueType(valueType);
      properties.add(contactDuplicatedProperty);
    }
  }
  return properties;
}","public List<ContactDuplicatedProperty> extractProperties(Contact newContact,Contact oldContact,Language language){
  List<ContactDuplicatedProperty> properties=new ArrayList<>();
  for (  LayoutGroup group : newContact.getContactModel().getDetails().getLayout().getGroups()) {
    if (group.getHasIterations()) {
      continue;
    }
    for (    LayoutConstraint layoutConstraint : group.getConstraints()) {
      FlexibleElement element=layoutConstraint.getElement();
      String serializedNewValue;
      String serializedOldValue;
      String formattedNewValue;
      String formattedOldValue;
      ContactDuplicatedProperty.ValueType valueType=ContactDuplicatedProperty.ValueType.STRING;
      if (element instanceof DefaultContactFlexibleElement) {
        DefaultContactFlexibleElement defaultContactFlexibleElement=(DefaultContactFlexibleElement)element;
        serializedNewValue=defaultContactFlexibleElement.getSerializedValue(newContact);
        serializedOldValue=defaultContactFlexibleElement.getSerializedValue(oldContact);
        formattedNewValue=defaultContactFlexibleElement.getFormattedValue(newContact);
        formattedOldValue=defaultContactFlexibleElement.getFormattedValue(oldContact);
        if (((DefaultContactFlexibleElement)element).getType() == DefaultContactFlexibleElementType.PHOTO) {
          valueType=ContactDuplicatedProperty.ValueType.IMAGE;
        }
      }
 else {
        Value newValue=valueDAO.getValueByElementAndContainer(element.getId(),newContact.getId());
        Value oldValue=valueDAO.getValueByElementAndContainer(element.getId(),oldContact.getId());
        serializedNewValue=newValue.getValue();
        serializedOldValue=oldValue.getValue();
        formattedNewValue=modelPropertyService.getFormattedValue(element,newValue.getValue(),language);
        formattedOldValue=modelPropertyService.getFormattedValue(element,oldValue.getValue(),language);
      }
      if (Strings.isNullOrEmpty(serializedOldValue)) {
        serializedOldValue=null;
      }
      if (Strings.isNullOrEmpty(serializedNewValue)) {
        serializedNewValue=null;
      }
      if (Objects.equals(serializedNewValue,serializedOldValue)) {
        continue;
      }
      String propertyLabel=element.getLabel();
      if (propertyLabel == null && element instanceof DefaultContactFlexibleElement) {
        propertyLabel=modelPropertyService.getDefaultContactPropertyLabel(((DefaultContactFlexibleElement)element).getType(),language);
      }
      ContactDuplicatedProperty contactDuplicatedProperty=new ContactDuplicatedProperty();
      contactDuplicatedProperty.setPropertyLabel(propertyLabel);
      contactDuplicatedProperty.setSerializedNewValue(serializedNewValue);
      contactDuplicatedProperty.setSerializedOldValue(serializedOldValue);
      contactDuplicatedProperty.setFormattedNewValue(formattedNewValue);
      contactDuplicatedProperty.setFormattedOldValue(formattedOldValue);
      contactDuplicatedProperty.setFlexibleElementId(element.getId());
      contactDuplicatedProperty.setValueType(valueType);
      properties.add(contactDuplicatedProperty);
    }
  }
  return properties;
}",0.9276466108149276
35392,"public CheckContactDuplication(Integer contactId,String email,String name,String firstName){
  this.contactId=contactId;
  this.email=email;
  this.name=name;
  this.firstName=firstName;
}","public CheckContactDuplication(Integer contactId,String email,String name,String firstName,ContactModelDTO contactModelDTO){
  this.contactId=contactId;
  this.email=email;
  this.name=name;
  this.firstName=firstName;
  this.contactModelDTO=contactModelDTO;
}",0.8392857142857143
35393,"public int compare(DashboardContact p1,DashboardContact p2){
  if (sortField.equals(ContactDTO.TYPE)) {
    return compareNullableStrings(ContactModelType.getName(p1.getContact().getType()),ContactModelType.getName(p2.getContact().getType()));
  }
  if (sortField.equals(ContactDTO.NAME)) {
    return compareNullableStrings(p1.getContact().getName(),p2.getContact().getName());
  }
  if (sortField.equals(ContactDTO.FIRSTNAME)) {
    return compareNullableStrings(p1.getContact().getFirstname(),p2.getContact().getFirstname());
  }
  if (sortField.equals(ContactHistory.FORMATTED_CHANGE_TYPE)) {
    return compareNullableStrings(p1.getLastChange().getFormattedChangeType(),p2.getLastChange().getFormattedChangeType());
  }
  if (sortField.equals(ContactHistory.SUBJECT)) {
    return compareNullableStrings(p1.getLastChange().getSubject(),p2.getLastChange().getSubject());
  }
  if (sortField.equals(ContactHistory.FORMATTED_VALUE)) {
    return compareNullableStrings(p1.getLastChange().getFormattedValue(),p2.getLastChange().getFormattedValue());
  }
  if (sortField.equals(ContactDTO.EMAIL)) {
    return compareNullableStrings(p1.getContact().getEmail(),p2.getContact().getEmail());
  }
  if (sortField.equals(ContactDTO.ID)) {
    return compareNullableStrings(String.valueOf(p1.getContact().getId()),String.valueOf(p2.getContact().getId()));
  }
  if (sortField.equals(ContactDTO.PARENT)) {
    ContactDTO org1=p1.getContact().getParent();
    ContactDTO org2=p2.getContact().getParent();
    String nom1=org1 == null ? ""String_Node_Str"" : org1.getOrganizationName();
    String nom2=org2 == null ? ""String_Node_Str"" : org2.getOrganizationName();
    return compareNullableStrings(nom1,nom2);
  }
  if (sortField.equals(ContactDTO.ROOT)) {
    ContactDTO org1=p1.getContact().getRoot();
    ContactDTO org2=p2.getContact().getRoot();
    String nom1=org1 == null ? ""String_Node_Str"" : org1.getOrganizationName();
    String nom2=org2 == null ? ""String_Node_Str"" : org2.getOrganizationName();
    return compareNullableStrings(nom1,nom2);
  }
  if (sortField.equals(ContactHistory.UPDATED_AT)) {
    return compareNullableDates(p1.getLastChange().getUpdatedAt(),p2.getLastChange().getUpdatedAt());
  }
  if (sortField.equals(ContactHistory.COMMENT)) {
    return compareNullableStrings(p1.getLastChange().getComment(),p2.getLastChange().getComment());
  }
  return 0;
}","public int compare(DashboardContact p1,DashboardContact p2){
  if (sortField.equals(ContactDTO.TYPE)) {
    return compareNullableStrings(ContactModelType.getName(p1.getContact().getType()),ContactModelType.getName(p2.getContact().getType()));
  }
  if (sortField.equals(ContactDTO.NAME)) {
    return compareNullableStrings(p1.getContact().getName(),p2.getContact().getName());
  }
  if (sortField.equals(ContactDTO.FIRSTNAME)) {
    return compareNullableStrings(p1.getContact().getFirstname(),p2.getContact().getFirstname());
  }
  if (sortField.equals(ContactHistory.FORMATTED_CHANGE_TYPE)) {
    return compareNullableStrings(p1.getLastChange().getFormattedChangeType(),p2.getLastChange().getFormattedChangeType());
  }
  if (sortField.equals(ContactHistory.SUBJECT)) {
    return compareNullableStrings(p1.getLastChange().getSubject(),p2.getLastChange().getSubject());
  }
  if (sortField.equals(ContactHistory.FORMATTED_VALUE)) {
    return compareNullableStrings(p1.getLastChange().getFormattedValue(),p2.getLastChange().getFormattedValue());
  }
  if (sortField.equals(ContactDTO.EMAIL)) {
    return compareNullableStrings(p1.getContact().getEmail(),p2.getContact().getEmail());
  }
  if (sortField.equals(ContactDTO.ID)) {
    return compareNullableStrings(String.valueOf(p1.getContact().getId()),String.valueOf(p2.getContact().getId()));
  }
  if (sortField.equals(ContactDTO.PARENT)) {
    ContactDTO org1=p1.getContact().getParent();
    ContactDTO org2=p2.getContact().getParent();
    String nom1=org1 == null ? ""String_Node_Str"" : org1.getOrganizationName();
    String nom2=org2 == null ? ""String_Node_Str"" : org2.getOrganizationName();
    return compareNullableStrings(nom1,nom2);
  }
  if (sortField.equals(ContactDTO.ROOT)) {
    ContactDTO org1=p1.getContact().getRoot();
    ContactDTO org2=p2.getContact().getRoot();
    String nom1=org1 == null ? ""String_Node_Str"" : org1.getOrganizationName();
    String nom2=org2 == null ? ""String_Node_Str"" : org2.getOrganizationName();
    return compareNullableStrings(nom1,nom2);
  }
  if (sortField.equals(ContactHistory.UPDATED_AT)) {
    Date d1=p1.getLastChange() != null ? p1.getLastChange().getUpdatedAt() : null;
    Date d2=p2.getLastChange() != null ? p2.getLastChange().getUpdatedAt() : null;
    return compareNullableDates(d1,d2);
  }
  if (sortField.equals(ContactHistory.COMMENT)) {
    return compareNullableStrings(p1.getLastChange().getComment(),p2.getLastChange().getComment());
  }
  return 0;
}",0.9514003294892917
35394,"private void sortContacts(SortInfo sortInfo){
  if (sortInfo.getSortField() != null) {
    final String sortField=sortInfo.getSortField();
    if (sortField != null) {
      Collections.sort(allContacts,sortInfo.getSortDir().comparator(new Comparator<DashboardContact>(){
        public int compare(        DashboardContact p1,        DashboardContact p2){
          if (sortField.equals(ContactDTO.TYPE)) {
            return compareNullableStrings(ContactModelType.getName(p1.getContact().getType()),ContactModelType.getName(p2.getContact().getType()));
          }
          if (sortField.equals(ContactDTO.NAME)) {
            return compareNullableStrings(p1.getContact().getName(),p2.getContact().getName());
          }
          if (sortField.equals(ContactDTO.FIRSTNAME)) {
            return compareNullableStrings(p1.getContact().getFirstname(),p2.getContact().getFirstname());
          }
          if (sortField.equals(ContactHistory.FORMATTED_CHANGE_TYPE)) {
            return compareNullableStrings(p1.getLastChange().getFormattedChangeType(),p2.getLastChange().getFormattedChangeType());
          }
          if (sortField.equals(ContactHistory.SUBJECT)) {
            return compareNullableStrings(p1.getLastChange().getSubject(),p2.getLastChange().getSubject());
          }
          if (sortField.equals(ContactHistory.FORMATTED_VALUE)) {
            return compareNullableStrings(p1.getLastChange().getFormattedValue(),p2.getLastChange().getFormattedValue());
          }
          if (sortField.equals(ContactDTO.EMAIL)) {
            return compareNullableStrings(p1.getContact().getEmail(),p2.getContact().getEmail());
          }
          if (sortField.equals(ContactDTO.ID)) {
            return compareNullableStrings(String.valueOf(p1.getContact().getId()),String.valueOf(p2.getContact().getId()));
          }
          if (sortField.equals(ContactDTO.PARENT)) {
            ContactDTO org1=p1.getContact().getParent();
            ContactDTO org2=p2.getContact().getParent();
            String nom1=org1 == null ? ""String_Node_Str"" : org1.getOrganizationName();
            String nom2=org2 == null ? ""String_Node_Str"" : org2.getOrganizationName();
            return compareNullableStrings(nom1,nom2);
          }
          if (sortField.equals(ContactDTO.ROOT)) {
            ContactDTO org1=p1.getContact().getRoot();
            ContactDTO org2=p2.getContact().getRoot();
            String nom1=org1 == null ? ""String_Node_Str"" : org1.getOrganizationName();
            String nom2=org2 == null ? ""String_Node_Str"" : org2.getOrganizationName();
            return compareNullableStrings(nom1,nom2);
          }
          if (sortField.equals(ContactHistory.UPDATED_AT)) {
            return compareNullableDates(p1.getLastChange().getUpdatedAt(),p2.getLastChange().getUpdatedAt());
          }
          if (sortField.equals(ContactHistory.COMMENT)) {
            return compareNullableStrings(p1.getLastChange().getComment(),p2.getLastChange().getComment());
          }
          return 0;
        }
      }
));
    }
  }
}","private void sortContacts(SortInfo sortInfo){
  if (sortInfo.getSortField() != null) {
    final String sortField=sortInfo.getSortField();
    if (sortField != null) {
      Collections.sort(allContacts,sortInfo.getSortDir().comparator(new Comparator<DashboardContact>(){
        public int compare(        DashboardContact p1,        DashboardContact p2){
          if (sortField.equals(ContactDTO.TYPE)) {
            return compareNullableStrings(ContactModelType.getName(p1.getContact().getType()),ContactModelType.getName(p2.getContact().getType()));
          }
          if (sortField.equals(ContactDTO.NAME)) {
            return compareNullableStrings(p1.getContact().getName(),p2.getContact().getName());
          }
          if (sortField.equals(ContactDTO.FIRSTNAME)) {
            return compareNullableStrings(p1.getContact().getFirstname(),p2.getContact().getFirstname());
          }
          if (sortField.equals(ContactHistory.FORMATTED_CHANGE_TYPE)) {
            return compareNullableStrings(p1.getLastChange().getFormattedChangeType(),p2.getLastChange().getFormattedChangeType());
          }
          if (sortField.equals(ContactHistory.SUBJECT)) {
            return compareNullableStrings(p1.getLastChange().getSubject(),p2.getLastChange().getSubject());
          }
          if (sortField.equals(ContactHistory.FORMATTED_VALUE)) {
            return compareNullableStrings(p1.getLastChange().getFormattedValue(),p2.getLastChange().getFormattedValue());
          }
          if (sortField.equals(ContactDTO.EMAIL)) {
            return compareNullableStrings(p1.getContact().getEmail(),p2.getContact().getEmail());
          }
          if (sortField.equals(ContactDTO.ID)) {
            return compareNullableStrings(String.valueOf(p1.getContact().getId()),String.valueOf(p2.getContact().getId()));
          }
          if (sortField.equals(ContactDTO.PARENT)) {
            ContactDTO org1=p1.getContact().getParent();
            ContactDTO org2=p2.getContact().getParent();
            String nom1=org1 == null ? ""String_Node_Str"" : org1.getOrganizationName();
            String nom2=org2 == null ? ""String_Node_Str"" : org2.getOrganizationName();
            return compareNullableStrings(nom1,nom2);
          }
          if (sortField.equals(ContactDTO.ROOT)) {
            ContactDTO org1=p1.getContact().getRoot();
            ContactDTO org2=p2.getContact().getRoot();
            String nom1=org1 == null ? ""String_Node_Str"" : org1.getOrganizationName();
            String nom2=org2 == null ? ""String_Node_Str"" : org2.getOrganizationName();
            return compareNullableStrings(nom1,nom2);
          }
          if (sortField.equals(ContactHistory.UPDATED_AT)) {
            Date d1=p1.getLastChange() != null ? p1.getLastChange().getUpdatedAt() : null;
            Date d2=p2.getLastChange() != null ? p2.getLastChange().getUpdatedAt() : null;
            return compareNullableDates(d1,d2);
          }
          if (sortField.equals(ContactHistory.COMMENT)) {
            return compareNullableStrings(p1.getLastChange().getComment(),p2.getLastChange().getComment());
          }
          return 0;
        }
      }
));
    }
  }
}",0.9603072983354674
35395,"public static boolean areOrgUnitsEqualOrParent(OrgUnit potentialChild,Integer targetId){
  if (potentialChild.getId().equals(targetId)) {
    return true;
  }
  if (potentialChild.getParentOrgUnit() == null) {
    return false;
  }
  return areOrgUnitsEqualOrParent(potentialChild.getParentOrgUnit(),targetId);
}","public static boolean areOrgUnitsEqualOrParent(OrgUnit potentialChild,Integer targetId){
  if (potentialChild == null) {
    return false;
  }
  if (potentialChild.getId().equals(targetId)) {
    return true;
  }
  if (potentialChild.getParentOrgUnit() == null) {
    return false;
  }
  return areOrgUnitsEqualOrParent(potentialChild.getParentOrgUnit(),targetId);
}",0.6578171091445427
35396,"public int compare(DashboardContact p1,DashboardContact p2){
  if (sortField.equals(ContactDTO.TYPE)) {
    return compareNullableStrings(ContactModelType.getName(p1.getContact().getType()),ContactModelType.getName(p2.getContact().getType()));
  }
  if (sortField.equals(ContactDTO.NAME)) {
    return compareNullableStrings(p1.getContact().getName(),p2.getContact().getName());
  }
  if (sortField.equals(ContactDTO.FIRSTNAME)) {
    return compareNullableStrings(p1.getContact().getFirstname(),p2.getContact().getFirstname());
  }
  if (sortField.equals(ContactHistory.FORMATTED_CHANGE_TYPE)) {
    return compareNullableStrings(p1.getLastChange().getFormattedChangeType(),p2.getLastChange().getFormattedChangeType());
  }
  if (sortField.equals(ContactHistory.SUBJECT)) {
    return compareNullableStrings(p1.getLastChange().getSubject(),p2.getLastChange().getSubject());
  }
  if (sortField.equals(ContactHistory.FORMATTED_VALUE)) {
    return compareNullableStrings(p1.getLastChange().getFormattedValue(),p2.getLastChange().getFormattedValue());
  }
  if (sortField.equals(ContactDTO.EMAIL)) {
    return compareNullableStrings(p1.getContact().getEmail(),p2.getContact().getEmail());
  }
  if (sortField.equals(ContactDTO.ID)) {
    return compareNullableStrings(String.valueOf(p1.getContact().getId()),String.valueOf(p2.getContact().getId()));
  }
  if (sortField.equals(ContactDTO.PARENT)) {
    ContactDTO org1=p1.getContact().getParent();
    ContactDTO org2=p2.getContact().getParent();
    String nom1=org1 == null ? ""String_Node_Str"" : org1.getOrganizationName();
    String nom2=org2 == null ? ""String_Node_Str"" : org2.getOrganizationName();
    return compareNullableStrings(nom1,nom2);
  }
  if (sortField.equals(ContactDTO.ROOT)) {
    ContactDTO org1=p1.getContact().getRoot();
    ContactDTO org2=p2.getContact().getRoot();
    String nom1=org1 == null ? ""String_Node_Str"" : org1.getOrganizationName();
    String nom2=org2 == null ? ""String_Node_Str"" : org2.getOrganizationName();
    return compareNullableStrings(nom1,nom2);
  }
  if (sortField.equals(ContactHistory.UPDATED_AT)) {
    return compareNullableDates(p1.getLastChange().getUpdatedAt(),p2.getLastChange().getUpdatedAt());
  }
  if (sortField.equals(ContactHistory.COMMENT)) {
    return compareNullableStrings(p1.getLastChange().getComment(),p2.getLastChange().getComment());
  }
  return 0;
}","public int compare(DashboardContact p1,DashboardContact p2){
  if (sortField.equals(ContactDTO.TYPE)) {
    return compareNullableStrings(ContactModelType.getName(p1.getContact().getType()),ContactModelType.getName(p2.getContact().getType()));
  }
  if (sortField.equals(ContactDTO.NAME)) {
    return compareNullableStrings(p1.getContact().getName(),p2.getContact().getName());
  }
  if (sortField.equals(ContactDTO.FIRSTNAME)) {
    return compareNullableStrings(p1.getContact().getFirstname(),p2.getContact().getFirstname());
  }
  if (sortField.equals(ContactHistory.FORMATTED_CHANGE_TYPE)) {
    return compareNullableStrings(p1.getLastChange().getFormattedChangeType(),p2.getLastChange().getFormattedChangeType());
  }
  if (sortField.equals(ContactHistory.SUBJECT)) {
    return compareNullableStrings(p1.getLastChange().getSubject(),p2.getLastChange().getSubject());
  }
  if (sortField.equals(ContactHistory.FORMATTED_VALUE)) {
    return compareNullableStrings(p1.getLastChange().getFormattedValue(),p2.getLastChange().getFormattedValue());
  }
  if (sortField.equals(ContactDTO.EMAIL)) {
    return compareNullableStrings(p1.getContact().getEmail(),p2.getContact().getEmail());
  }
  if (sortField.equals(ContactDTO.ID)) {
    return compareNullableStrings(String.valueOf(p1.getContact().getId()),String.valueOf(p2.getContact().getId()));
  }
  if (sortField.equals(ContactDTO.PARENT)) {
    ContactDTO org1=p1.getContact().getParent();
    ContactDTO org2=p2.getContact().getParent();
    String nom1=org1 == null ? ""String_Node_Str"" : org1.getOrganizationName();
    String nom2=org2 == null ? ""String_Node_Str"" : org2.getOrganizationName();
    return compareNullableStrings(nom1,nom2);
  }
  if (sortField.equals(ContactDTO.ROOT)) {
    ContactDTO org1=p1.getContact().getRoot();
    ContactDTO org2=p2.getContact().getRoot();
    String nom1=org1 == null ? ""String_Node_Str"" : org1.getOrganizationName();
    String nom2=org2 == null ? ""String_Node_Str"" : org2.getOrganizationName();
    return compareNullableStrings(nom1,nom2);
  }
  if (sortField.equals(ContactHistory.UPDATED_AT)) {
    Date d1=p1.getLastChange() != null ? p1.getLastChange().getUpdatedAt() : null;
    Date d2=p2.getLastChange() != null ? p2.getLastChange().getUpdatedAt() : null;
    return compareNullableDates(d1,d2);
  }
  if (sortField.equals(ContactHistory.COMMENT)) {
    return compareNullableStrings(p1.getLastChange().getComment(),p2.getLastChange().getComment());
  }
  return 0;
}",0.9514003294892917
35397,"private void sortContacts(SortInfo sortInfo){
  if (sortInfo.getSortField() != null) {
    final String sortField=sortInfo.getSortField();
    if (sortField != null) {
      Collections.sort(allContacts,sortInfo.getSortDir().comparator(new Comparator<DashboardContact>(){
        public int compare(        DashboardContact p1,        DashboardContact p2){
          if (sortField.equals(ContactDTO.TYPE)) {
            return compareNullableStrings(ContactModelType.getName(p1.getContact().getType()),ContactModelType.getName(p2.getContact().getType()));
          }
          if (sortField.equals(ContactDTO.NAME)) {
            return compareNullableStrings(p1.getContact().getName(),p2.getContact().getName());
          }
          if (sortField.equals(ContactDTO.FIRSTNAME)) {
            return compareNullableStrings(p1.getContact().getFirstname(),p2.getContact().getFirstname());
          }
          if (sortField.equals(ContactHistory.FORMATTED_CHANGE_TYPE)) {
            return compareNullableStrings(p1.getLastChange().getFormattedChangeType(),p2.getLastChange().getFormattedChangeType());
          }
          if (sortField.equals(ContactHistory.SUBJECT)) {
            return compareNullableStrings(p1.getLastChange().getSubject(),p2.getLastChange().getSubject());
          }
          if (sortField.equals(ContactHistory.FORMATTED_VALUE)) {
            return compareNullableStrings(p1.getLastChange().getFormattedValue(),p2.getLastChange().getFormattedValue());
          }
          if (sortField.equals(ContactDTO.EMAIL)) {
            return compareNullableStrings(p1.getContact().getEmail(),p2.getContact().getEmail());
          }
          if (sortField.equals(ContactDTO.ID)) {
            return compareNullableStrings(String.valueOf(p1.getContact().getId()),String.valueOf(p2.getContact().getId()));
          }
          if (sortField.equals(ContactDTO.PARENT)) {
            ContactDTO org1=p1.getContact().getParent();
            ContactDTO org2=p2.getContact().getParent();
            String nom1=org1 == null ? ""String_Node_Str"" : org1.getOrganizationName();
            String nom2=org2 == null ? ""String_Node_Str"" : org2.getOrganizationName();
            return compareNullableStrings(nom1,nom2);
          }
          if (sortField.equals(ContactDTO.ROOT)) {
            ContactDTO org1=p1.getContact().getRoot();
            ContactDTO org2=p2.getContact().getRoot();
            String nom1=org1 == null ? ""String_Node_Str"" : org1.getOrganizationName();
            String nom2=org2 == null ? ""String_Node_Str"" : org2.getOrganizationName();
            return compareNullableStrings(nom1,nom2);
          }
          if (sortField.equals(ContactHistory.UPDATED_AT)) {
            return compareNullableDates(p1.getLastChange().getUpdatedAt(),p2.getLastChange().getUpdatedAt());
          }
          if (sortField.equals(ContactHistory.COMMENT)) {
            return compareNullableStrings(p1.getLastChange().getComment(),p2.getLastChange().getComment());
          }
          return 0;
        }
      }
));
    }
  }
}","private void sortContacts(SortInfo sortInfo){
  if (sortInfo.getSortField() != null) {
    final String sortField=sortInfo.getSortField();
    if (sortField != null) {
      Collections.sort(allContacts,sortInfo.getSortDir().comparator(new Comparator<DashboardContact>(){
        public int compare(        DashboardContact p1,        DashboardContact p2){
          if (sortField.equals(ContactDTO.TYPE)) {
            return compareNullableStrings(ContactModelType.getName(p1.getContact().getType()),ContactModelType.getName(p2.getContact().getType()));
          }
          if (sortField.equals(ContactDTO.NAME)) {
            return compareNullableStrings(p1.getContact().getName(),p2.getContact().getName());
          }
          if (sortField.equals(ContactDTO.FIRSTNAME)) {
            return compareNullableStrings(p1.getContact().getFirstname(),p2.getContact().getFirstname());
          }
          if (sortField.equals(ContactHistory.FORMATTED_CHANGE_TYPE)) {
            return compareNullableStrings(p1.getLastChange().getFormattedChangeType(),p2.getLastChange().getFormattedChangeType());
          }
          if (sortField.equals(ContactHistory.SUBJECT)) {
            return compareNullableStrings(p1.getLastChange().getSubject(),p2.getLastChange().getSubject());
          }
          if (sortField.equals(ContactHistory.FORMATTED_VALUE)) {
            return compareNullableStrings(p1.getLastChange().getFormattedValue(),p2.getLastChange().getFormattedValue());
          }
          if (sortField.equals(ContactDTO.EMAIL)) {
            return compareNullableStrings(p1.getContact().getEmail(),p2.getContact().getEmail());
          }
          if (sortField.equals(ContactDTO.ID)) {
            return compareNullableStrings(String.valueOf(p1.getContact().getId()),String.valueOf(p2.getContact().getId()));
          }
          if (sortField.equals(ContactDTO.PARENT)) {
            ContactDTO org1=p1.getContact().getParent();
            ContactDTO org2=p2.getContact().getParent();
            String nom1=org1 == null ? ""String_Node_Str"" : org1.getOrganizationName();
            String nom2=org2 == null ? ""String_Node_Str"" : org2.getOrganizationName();
            return compareNullableStrings(nom1,nom2);
          }
          if (sortField.equals(ContactDTO.ROOT)) {
            ContactDTO org1=p1.getContact().getRoot();
            ContactDTO org2=p2.getContact().getRoot();
            String nom1=org1 == null ? ""String_Node_Str"" : org1.getOrganizationName();
            String nom2=org2 == null ? ""String_Node_Str"" : org2.getOrganizationName();
            return compareNullableStrings(nom1,nom2);
          }
          if (sortField.equals(ContactHistory.UPDATED_AT)) {
            Date d1=p1.getLastChange() != null ? p1.getLastChange().getUpdatedAt() : null;
            Date d2=p2.getLastChange() != null ? p2.getLastChange().getUpdatedAt() : null;
            return compareNullableDates(d1,d2);
          }
          if (sortField.equals(ContactHistory.COMMENT)) {
            return compareNullableStrings(p1.getLastChange().getComment(),p2.getLastChange().getComment());
          }
          return 0;
        }
      }
));
    }
  }
}",0.9603072983354674
35398,"/** 
 * {@inheritDoc}
 */
@Override public void initialize(){
  nameField=new HtmlEditor();
  nameField.hide();
  nameField.setEnableAlignments(false);
  nameField.setEnableLinks(false);
  nameField.setEnableFont(false);
  nameField.setEnableLists(false);
  nameField.setEnableColors(false);
  nameField.setSourceEditMode(false);
  nameField.setHeight(75);
  nameField.setBorders(true);
  nameField.setFieldLabel(I18N.CONSTANTS.adminFlexibleName());
  nameReadOnlyField=Forms.label(I18N.CONSTANTS.adminFlexibleName());
  typeField=Forms.combobox(I18N.CONSTANTS.adminFlexibleType(),true,EnumModel.VALUE_FIELD,EnumModel.DISPLAY_FIELD);
  typeField.setEmptyText(I18N.CONSTANTS.adminFlexibleType());
  containerField=Forms.combobox(I18N.CONSTANTS.adminFlexibleContainer(),true,EntityDTO.ID,PhaseModelDTO.NAME);
  containerField.setEmptyText(I18N.CONSTANTS.adminFlexibleContainerChoice());
  containerField.setFireChangeEventOnSetValue(true);
  layoutGroupField=Forms.combobox(I18N.CONSTANTS.adminFlexibleGroup(),true,LayoutGroupDTO.ID,LayoutGroupDTO.TITLE);
  orderField=Forms.number(I18N.CONSTANTS.adminFlexibleOrder(),true);
  mandatoryField=Forms.checkbox(""String_Node_Str"",null,I18N.CONSTANTS.adminFlexibleCompulsory(),false);
  privacyGroupField=Forms.combobox(I18N.CONSTANTS.adminPrivacyGroups(),false,PrivacyGroupDTO.ID,PrivacyGroupDTO.TITLE);
  privacyGroupField.setEmptyText(I18N.CONSTANTS.adminPrivacyGroupChoice());
  amendableField=Forms.checkbox(""String_Node_Str"",null,I18N.CONSTANTS.partOfProjectCore(),false);
  exportableField=Forms.checkbox(""String_Node_Str"",null,I18N.CONSTANTS.adminFlexibleExportable(),false);
  commonForm=Forms.panel(130);
  commonForm.add(nameField);
  commonForm.add(nameReadOnlyField);
  commonForm.add(typeField);
  commonForm.add(containerField);
  commonForm.add(layoutGroupField);
  commonForm.add(orderField);
  commonForm.add(mandatoryField);
  commonForm.add(new ClearableField<PrivacyGroupDTO>(privacyGroupField));
  commonForm.add(amendableField);
  commonForm.add(exportableField);
  textAreaFields=new HashSet<Field<?>>();
  bannerField=Forms.checkbox(""String_Node_Str"",null,""String_Node_Str"",false);
  bannerField.setFireChangeEventOnSetValue(true);
  bannerPositionField=Forms.simpleCombobox(""String_Node_Str"",false);
  bannerPositionField.disable();
  lengthField=Forms.number(I18N.CONSTANTS.adminFlexibleLength(),false);
  codeField=Forms.text(I18N.CONSTANTS.adminFlexibleCode(),false);
  decimalField=Forms.checkbox(""String_Node_Str"",null,I18N.CONSTANTS.adminFlexibleDecimal(),false);
  minLimitField=Forms.number(I18N.CONSTANTS.adminFlexibleMinLimit(),false);
  maxLimitField=Forms.number(I18N.CONSTANTS.adminFlexibleMaxLimit(),false);
  minDateField=Forms.date(I18N.CONSTANTS.adminFlexible_form_minDate(),false);
  maxDateField=Forms.date(I18N.CONSTANTS.adminFlexible_form_maxDate(),false);
  textAreaFields.add(lengthField);
  textAreaFields.add(codeField);
  textAreaFields.add(decimalField);
  textAreaFields.add(minLimitField);
  textAreaFields.add(maxLimitField);
  textAreaFields.add(minDateField);
  textAreaFields.add(maxDateField);
  reportModelField=Forms.combobox(I18N.CONSTANTS.adminReportName(),true,ReportModelDTO.ID,ReportModelDTO.NAME);
  multipleChoicesField=Forms.checkbox(""String_Node_Str"",null,I18N.CONSTANTS.adminFlexibleMultipleQ(),false);
  qualityLinkField=Forms.checkbox(""String_Node_Str"",null,I18N.CONSTANTS.adminFlexibleLinkedToQuality(),false);
  categoryTypeField=Forms.combobox(I18N.CONSTANTS.adminFlexibleLinkedCategory(),false,CategoryTypeDTO.ID,CategoryTypeDTO.LABEL);
  categoryTypeField.setFireChangeEventOnSetValue(true);
  customChoiceAddField=new TextButtonField(I18N.CONSTANTS.adminFlexibleQChoices());
  customChoicesPanel=new FlowPanel();
  customChoicesField=Forms.adapter(null,customChoicesPanel);
  formulaField=Forms.text(I18N.CONSTANTS.adminFlexibleComputationFormula(),false);
  formulaHintLabel=new com.extjs.gxt.ui.client.widget.Label(I18N.CONSTANTS.adminFlexibleComputationFormulaHint());
  formulaHintLabel.addStyleName(STYLE_FORM_HINT);
  budgetFields=new FlexTable();
  budgetFields.setVisible(false);
  budgetFields.setCellSpacing(5);
  budgetFields.setCellPadding(5);
  budgetFields.addStyleName(""String_Node_Str"");
  Text subFieldTitle=new Text(I18N.CONSTANTS.adminBudgetSubField());
  subFieldTitle.addStyleName(""String_Node_Str"");
  budgetFields.setWidget(0,0,subFieldTitle);
  budgetFields.getFlexCellFormatter().setColSpan(0,0,3);
  anchorAddSubField=new Anchor();
  anchorAddSubField.setHTML(IconImageBundle.ICONS.add().getHTML() + I18N.CONSTANTS.adminAddBudgetSubField());
  anchorAddSubField.setVisible(false);
  ratioFlexTable=new FlexTable();
  budgetSubFieldSpentStore=new ListStore<FlexibleElementDTO>();
  budgetSubFieldPlannedStore=new ListStore<FlexibleElementDTO>();
  budgetSubFieldSpentCombo=Forms.combobox(I18N.CONSTANTS.flexibleElementBudgetDistributionRatio(),true,FlexibleElementDTO.ID,FlexibleElementDTO.LABEL,budgetSubFieldSpentStore);
  budgetSubFieldPlannedCombo=Forms.combobox(I18N.CONSTANTS.projectPlannedBudget(),true,FlexibleElementDTO.ID,FlexibleElementDTO.LABEL,budgetSubFieldPlannedStore);
  upBudgetSubFieldCombo=new ComboBox<BudgetSubFieldDTO>();
  upBudgetSubFieldCombo.setDisplayField(""String_Node_Str"");
  downBudgetSubFieldCombo=new ComboBox<BudgetSubFieldDTO>();
  downBudgetSubFieldCombo.setDisplayField(""String_Node_Str"");
  upBudgetSubFieldStore=new ListStore<BudgetSubFieldDTO>();
  downBudgetSubFieldStore=new ListStore<BudgetSubFieldDTO>();
  upBudgetSubFieldCombo.setStore(upBudgetSubFieldStore);
  downBudgetSubFieldCombo.setStore(downBudgetSubFieldStore);
  upBudgetSubFieldCombo.setTriggerAction(TriggerAction.ALL);
  upBudgetSubFieldCombo.setEditable(false);
  downBudgetSubFieldCombo.setTriggerAction(TriggerAction.ALL);
  downBudgetSubFieldCombo.setEditable(false);
  ratioFlexTable.setWidget(0,0,new Text(I18N.CONSTANTS.adminBudgetRatio() + ""String_Node_Str""));
  ratioFlexTable.setWidget(0,1,upBudgetSubFieldCombo);
  ratioFlexTable.setWidget(0,2,new Text(""String_Node_Str""));
  ratioFlexTable.setWidget(0,3,downBudgetSubFieldCombo);
  ratioFlexTable.setVisible(false);
  codeGrid=new com.extjs.gxt.ui.client.widget.grid.Grid<FlexibleElementDTO>(new ListStore<FlexibleElementDTO>(),createCodeGridColumnModel());
  codeGrid.setAutoHeight(false);
  codeGrid.setAutoExpandColumn(FlexibleElementDTO.CODE);
  codeGrid.setHeight(200);
  codeGridHeaderLabel=new com.extjs.gxt.ui.client.widget.Label(I18N.CONSTANTS.adminFlexibleComputationCodeGridHeader());
  codeGridHeaderLabel.addStyleName(STYLE_FORM_ITEM);
  contactTypeField=Forms.combobox(I18N.CONSTANTS.adminFlexibleElementContactListTypeFilter(),false,EnumModel.VALUE_FIELD,EnumModel.DISPLAY_FIELD);
  contactTypeClearableField=new ClearableField<EnumModel<ContactModelType>>(contactTypeField);
  contactModelsField=new ListComboBox<ContactModelDTO>(ContactModelDTO.ID,ContactModelDTO.NAME);
  contactModelsField.initComponent();
  contactModelsContainer=Forms.adapter(I18N.CONSTANTS.adminFlexibleElementContactListModelFilter(),contactModelsField);
  contactNumberLimit=Forms.number(I18N.CONSTANTS.adminFlexibleElementContactListLimit(),false,false,false);
  contactIsMember=Forms.checkbox(""String_Node_Str"",null,I18N.CONSTANTS.adminFlexibleElementContactListIsMember(),false);
  specificForm=Forms.panel(150);
  specificForm.add(bannerField);
  specificForm.add(bannerPositionField);
  specificForm.add(formulaField);
  specificForm.add(formulaHintLabel);
  specificForm.add(codeField);
  specificForm.add(lengthField);
  specificForm.add(decimalField);
  specificForm.add(minLimitField);
  specificForm.add(maxLimitField);
  specificForm.add(minDateField);
  specificForm.add(maxDateField);
  specificForm.add(reportModelField);
  specificForm.add(multipleChoicesField);
  specificForm.add(qualityLinkField);
  specificForm.add(categoryTypeField);
  specificForm.add(customChoiceAddField);
  specificForm.add(customChoicesField);
  specificForm.add(codeGridHeaderLabel);
  specificForm.add(codeGrid);
  specificForm.add(contactNumberLimit);
  specificForm.add(contactTypeClearableField);
  specificForm.add(contactIsMember);
  specificForm.add(contactModelsContainer);
  specificForm.add(budgetFields);
  specificForm.add(anchorAddSubField);
  specificForm.add(ratioFlexTable);
  specificForm.add(budgetSubFieldSpentCombo);
  specificForm.add(budgetSubFieldPlannedCombo);
  saveButton=Forms.button(I18N.CONSTANTS.save(),IconImageBundle.ICONS.save());
  final FormPanel buttonFormPanel=Forms.panel();
  buttonFormPanel.addButton(saveButton);
  final Grid mainContainer=new Grid(3,2);
  mainContainer.setWidth(""String_Node_Str"");
  mainContainer.getElement().getStyle().setTableLayout(TableLayout.FIXED);
  mainContainer.getColumnFormatter().getElement(0).getStyle().setProperty(""String_Node_Str"",""String_Node_Str"");
  mainContainer.getColumnFormatter().getElement(1).getStyle().setProperty(""String_Node_Str"",""String_Node_Str"");
  mainContainer.getRowFormatter().setVerticalAlign(1,HasVerticalAlignment.ALIGN_TOP);
  mainContainer.setWidget(0,0,Forms.header(I18N.CONSTANTS.adminFlexible_form_header_common()));
  mainContainer.setWidget(0,1,Forms.header(I18N.CONSTANTS.adminFlexible_form_header_specific()));
  mainContainer.setWidget(1,0,commonForm);
  mainContainer.setWidget(1,1,specificForm);
  mainContainer.setWidget(2,1,buttonFormPanel);
  initPopup(mainContainer);
}","/** 
 * {@inheritDoc}
 */
@Override public void initialize(){
  nameField=new HtmlEditor();
  nameField.hide();
  nameField.setEnableAlignments(false);
  nameField.setEnableLinks(false);
  nameField.setEnableFont(false);
  nameField.setEnableLists(false);
  nameField.setEnableColors(false);
  nameField.setSourceEditMode(false);
  nameField.setHeight(75);
  nameField.setBorders(true);
  nameField.setFieldLabel(I18N.CONSTANTS.adminFlexibleName());
  nameReadOnlyField=Forms.label(I18N.CONSTANTS.adminFlexibleName());
  typeField=Forms.combobox(I18N.CONSTANTS.adminFlexibleType(),true,EnumModel.VALUE_FIELD,EnumModel.DISPLAY_FIELD);
  typeField.setEmptyText(I18N.CONSTANTS.adminFlexibleType());
  containerField=Forms.combobox(I18N.CONSTANTS.adminFlexibleContainer(),true,EntityDTO.ID,PhaseModelDTO.NAME);
  containerField.setEmptyText(I18N.CONSTANTS.adminFlexibleContainerChoice());
  containerField.setFireChangeEventOnSetValue(true);
  layoutGroupField=Forms.combobox(I18N.CONSTANTS.adminFlexibleGroup(),true,LayoutGroupDTO.ID,LayoutGroupDTO.TITLE);
  orderField=Forms.number(I18N.CONSTANTS.adminFlexibleOrder(),true);
  mandatoryField=Forms.checkbox(""String_Node_Str"",null,I18N.CONSTANTS.adminFlexibleCompulsory(),false);
  privacyGroupField=Forms.combobox(I18N.CONSTANTS.adminPrivacyGroups(),false,PrivacyGroupDTO.ID,PrivacyGroupDTO.TITLE);
  privacyGroupField.setEmptyText(I18N.CONSTANTS.adminPrivacyGroupChoice());
  amendableField=Forms.checkbox(""String_Node_Str"",null,IconImageBundle.ICONS.DNABrownGreen().getHTML() + I18N.CONSTANTS.partOfProjectCore(),false);
  exportableField=Forms.checkbox(""String_Node_Str"",null,I18N.CONSTANTS.adminFlexibleExportable(),false);
  commonForm=Forms.panel(130);
  commonForm.add(nameField);
  commonForm.add(nameReadOnlyField);
  commonForm.add(typeField);
  commonForm.add(containerField);
  commonForm.add(layoutGroupField);
  commonForm.add(orderField);
  commonForm.add(mandatoryField);
  commonForm.add(new ClearableField<PrivacyGroupDTO>(privacyGroupField));
  commonForm.add(amendableField);
  commonForm.add(exportableField);
  textAreaFields=new HashSet<Field<?>>();
  bannerField=Forms.checkbox(""String_Node_Str"",null,""String_Node_Str"",false);
  bannerField.setFireChangeEventOnSetValue(true);
  bannerPositionField=Forms.simpleCombobox(""String_Node_Str"",false);
  bannerPositionField.disable();
  lengthField=Forms.number(I18N.CONSTANTS.adminFlexibleLength(),false);
  codeField=Forms.text(I18N.CONSTANTS.adminFlexibleCode(),false);
  decimalField=Forms.checkbox(""String_Node_Str"",null,I18N.CONSTANTS.adminFlexibleDecimal(),false);
  minLimitField=Forms.number(I18N.CONSTANTS.adminFlexibleMinLimit(),false);
  maxLimitField=Forms.number(I18N.CONSTANTS.adminFlexibleMaxLimit(),false);
  minDateField=Forms.date(I18N.CONSTANTS.adminFlexible_form_minDate(),false);
  maxDateField=Forms.date(I18N.CONSTANTS.adminFlexible_form_maxDate(),false);
  textAreaFields.add(lengthField);
  textAreaFields.add(codeField);
  textAreaFields.add(decimalField);
  textAreaFields.add(minLimitField);
  textAreaFields.add(maxLimitField);
  textAreaFields.add(minDateField);
  textAreaFields.add(maxDateField);
  reportModelField=Forms.combobox(I18N.CONSTANTS.adminReportName(),true,ReportModelDTO.ID,ReportModelDTO.NAME);
  multipleChoicesField=Forms.checkbox(""String_Node_Str"",null,I18N.CONSTANTS.adminFlexibleMultipleQ(),false);
  qualityLinkField=Forms.checkbox(""String_Node_Str"",null,I18N.CONSTANTS.adminFlexibleLinkedToQuality(),false);
  categoryTypeField=Forms.combobox(I18N.CONSTANTS.adminFlexibleLinkedCategory(),false,CategoryTypeDTO.ID,CategoryTypeDTO.LABEL);
  categoryTypeField.setFireChangeEventOnSetValue(true);
  customChoiceAddField=new TextButtonField(I18N.CONSTANTS.adminFlexibleQChoices());
  customChoicesPanel=new FlowPanel();
  customChoicesField=Forms.adapter(null,customChoicesPanel);
  formulaField=Forms.text(I18N.CONSTANTS.adminFlexibleComputationFormula(),false);
  formulaHintLabel=new com.extjs.gxt.ui.client.widget.Label(I18N.CONSTANTS.adminFlexibleComputationFormulaHint());
  formulaHintLabel.addStyleName(STYLE_FORM_HINT);
  budgetFields=new FlexTable();
  budgetFields.setVisible(false);
  budgetFields.setCellSpacing(5);
  budgetFields.setCellPadding(5);
  budgetFields.addStyleName(""String_Node_Str"");
  Text subFieldTitle=new Text(I18N.CONSTANTS.adminBudgetSubField());
  subFieldTitle.addStyleName(""String_Node_Str"");
  budgetFields.setWidget(0,0,subFieldTitle);
  budgetFields.getFlexCellFormatter().setColSpan(0,0,3);
  anchorAddSubField=new Anchor();
  anchorAddSubField.setHTML(IconImageBundle.ICONS.add().getHTML() + I18N.CONSTANTS.adminAddBudgetSubField());
  anchorAddSubField.setVisible(false);
  ratioFlexTable=new FlexTable();
  budgetSubFieldSpentStore=new ListStore<FlexibleElementDTO>();
  budgetSubFieldPlannedStore=new ListStore<FlexibleElementDTO>();
  budgetSubFieldSpentCombo=Forms.combobox(I18N.CONSTANTS.flexibleElementBudgetDistributionRatio(),true,FlexibleElementDTO.ID,FlexibleElementDTO.LABEL,budgetSubFieldSpentStore);
  budgetSubFieldPlannedCombo=Forms.combobox(I18N.CONSTANTS.projectPlannedBudget(),true,FlexibleElementDTO.ID,FlexibleElementDTO.LABEL,budgetSubFieldPlannedStore);
  upBudgetSubFieldCombo=new ComboBox<BudgetSubFieldDTO>();
  upBudgetSubFieldCombo.setDisplayField(""String_Node_Str"");
  downBudgetSubFieldCombo=new ComboBox<BudgetSubFieldDTO>();
  downBudgetSubFieldCombo.setDisplayField(""String_Node_Str"");
  upBudgetSubFieldStore=new ListStore<BudgetSubFieldDTO>();
  downBudgetSubFieldStore=new ListStore<BudgetSubFieldDTO>();
  upBudgetSubFieldCombo.setStore(upBudgetSubFieldStore);
  downBudgetSubFieldCombo.setStore(downBudgetSubFieldStore);
  upBudgetSubFieldCombo.setTriggerAction(TriggerAction.ALL);
  upBudgetSubFieldCombo.setEditable(false);
  downBudgetSubFieldCombo.setTriggerAction(TriggerAction.ALL);
  downBudgetSubFieldCombo.setEditable(false);
  ratioFlexTable.setWidget(0,0,new Text(I18N.CONSTANTS.adminBudgetRatio() + ""String_Node_Str""));
  ratioFlexTable.setWidget(0,1,upBudgetSubFieldCombo);
  ratioFlexTable.setWidget(0,2,new Text(""String_Node_Str""));
  ratioFlexTable.setWidget(0,3,downBudgetSubFieldCombo);
  ratioFlexTable.setVisible(false);
  codeGrid=new com.extjs.gxt.ui.client.widget.grid.Grid<FlexibleElementDTO>(new ListStore<FlexibleElementDTO>(),createCodeGridColumnModel());
  codeGrid.setAutoHeight(false);
  codeGrid.setAutoExpandColumn(FlexibleElementDTO.CODE);
  codeGrid.setHeight(200);
  codeGridHeaderLabel=new com.extjs.gxt.ui.client.widget.Label(I18N.CONSTANTS.adminFlexibleComputationCodeGridHeader());
  codeGridHeaderLabel.addStyleName(STYLE_FORM_ITEM);
  contactTypeField=Forms.combobox(I18N.CONSTANTS.adminFlexibleElementContactListTypeFilter(),false,EnumModel.VALUE_FIELD,EnumModel.DISPLAY_FIELD);
  contactTypeClearableField=new ClearableField<EnumModel<ContactModelType>>(contactTypeField);
  contactModelsField=new ListComboBox<ContactModelDTO>(ContactModelDTO.ID,ContactModelDTO.NAME);
  contactModelsField.initComponent();
  contactModelsContainer=Forms.adapter(I18N.CONSTANTS.adminFlexibleElementContactListModelFilter(),contactModelsField);
  contactNumberLimit=Forms.number(I18N.CONSTANTS.adminFlexibleElementContactListLimit(),false,false,false);
  contactIsMember=Forms.checkbox(""String_Node_Str"",null,I18N.CONSTANTS.adminFlexibleElementContactListIsMember(),false);
  specificForm=Forms.panel(150);
  specificForm.add(bannerField);
  specificForm.add(bannerPositionField);
  specificForm.add(formulaField);
  specificForm.add(formulaHintLabel);
  specificForm.add(codeField);
  specificForm.add(lengthField);
  specificForm.add(decimalField);
  specificForm.add(minLimitField);
  specificForm.add(maxLimitField);
  specificForm.add(minDateField);
  specificForm.add(maxDateField);
  specificForm.add(reportModelField);
  specificForm.add(multipleChoicesField);
  specificForm.add(qualityLinkField);
  specificForm.add(categoryTypeField);
  specificForm.add(customChoiceAddField);
  specificForm.add(customChoicesField);
  specificForm.add(codeGridHeaderLabel);
  specificForm.add(codeGrid);
  specificForm.add(contactNumberLimit);
  specificForm.add(contactTypeClearableField);
  specificForm.add(contactIsMember);
  specificForm.add(contactModelsContainer);
  specificForm.add(budgetFields);
  specificForm.add(anchorAddSubField);
  specificForm.add(ratioFlexTable);
  specificForm.add(budgetSubFieldSpentCombo);
  specificForm.add(budgetSubFieldPlannedCombo);
  saveButton=Forms.button(I18N.CONSTANTS.save(),IconImageBundle.ICONS.save());
  final FormPanel buttonFormPanel=Forms.panel();
  buttonFormPanel.addButton(saveButton);
  final Grid mainContainer=new Grid(3,2);
  mainContainer.setWidth(""String_Node_Str"");
  mainContainer.getElement().getStyle().setTableLayout(TableLayout.FIXED);
  mainContainer.getColumnFormatter().getElement(0).getStyle().setProperty(""String_Node_Str"",""String_Node_Str"");
  mainContainer.getColumnFormatter().getElement(1).getStyle().setProperty(""String_Node_Str"",""String_Node_Str"");
  mainContainer.getRowFormatter().setVerticalAlign(1,HasVerticalAlignment.ALIGN_TOP);
  mainContainer.setWidget(0,0,Forms.header(I18N.CONSTANTS.adminFlexible_form_header_common()));
  mainContainer.setWidget(0,1,Forms.header(I18N.CONSTANTS.adminFlexible_form_header_specific()));
  mainContainer.setWidget(1,0,commonForm);
  mainContainer.setWidget(1,1,specificForm);
  mainContainer.setWidget(2,1,buttonFormPanel);
  initPopup(mainContainer);
}",0.997344662772172
35399,"@Override public FieldSet createGroupLayoutFieldSet(FlexibleElementContainer container,final LayoutGroupDTO groupLayout,DispatchQueue queue,final Integer iterationId,final IterableGroupPanel tabPanel,final IterableGroupItem tabItem){
  final ProjectDTO project=(ProjectDTO)container;
  final FieldSet fieldSet=(FieldSet)groupLayout.getWidget();
  if (ClientUtils.isEmpty(groupLayout.getConstraints())) {
    return fieldSet;
  }
  for (  final LayoutConstraintDTO constraintDTO : groupLayout.getConstraints()) {
    final FlexibleElementDTO elementDTO=constraintDTO.getFlexibleElementDTO();
    if (elementDTO.isDisabled()) {
      continue;
    }
    final Integer amendmentId;
    if (project.getCurrentAmendment() != null) {
      amendmentId=project.getCurrentAmendment().getId();
    }
 else {
      amendmentId=null;
    }
    GetValue getValue;
    getValue=new GetValue(project.getId(),elementDTO.getId(),elementDTO.getEntityName(),amendmentId,iterationId);
    queue.add(getValue,new CommandResultHandler<ValueResult>(){
      @Override public void onCommandFailure(      final Throwable throwable){
        if (Log.isErrorEnabled()) {
          Log.error(""String_Node_Str"",throwable);
        }
        throw new RuntimeException(throwable);
      }
      @Override public void onCommandSuccess(      final ValueResult valueResult){
        if (Log.isDebugEnabled()) {
          Log.debug(""String_Node_Str"" + valueResult);
        }
        elementDTO.setService(dispatch);
        elementDTO.setAuthenticationProvider(injector.getAuthenticationProvider());
        elementDTO.setEventBus(eventBus);
        elementDTO.setCache(injector.getClientCache());
        elementDTO.setCurrentContainerDTO(project);
        elementDTO.setTransfertManager(injector.getTransfertManager());
        elementDTO.assignValue(valueResult);
        elementDTO.setTabPanel(tabPanel);
        final ProjectPresenter projectPresenter=injector.getProjectPresenter();
        elementDTO.init();
        final Component elementComponent=elementDTO.getElementComponent(valueResult);
        if (elementDTO.getAmendable() && projectPresenter.projectIsLocked() && projectPresenter.canUnlockProject()&& !ProfileUtils.isGranted(auth(),GlobalPermissionEnum.MODIFY_LOCKED_CONTENT)) {
          projectPresenter.addUnlockProjectPopup(elementDTO,elementComponent,new LoadingMask(view.getTabPanelPhases()));
        }
        final FormData formData;
        if (elementDTO.getPreferredWidth() == 0) {
          formData=new FormData(""String_Node_Str"");
        }
 else {
          formData=new FormData(elementDTO.getPreferredWidth(),-1);
        }
        if (elementComponent != null) {
          fieldSet.add(elementComponent,formData);
        }
        fieldSet.layout();
        computationTriggerManager.listenToValueChangesOfElement(elementDTO,elementComponent,valueChanges);
        elementDTO.addValueHandler(new ValueHandler(){
          @Override public void onValueChange(          final ValueEvent event){
            if (tabPanel != null) {
              event.setIterationId(tabPanel.getCurrentIterationId());
            }
            valueChanges.add(event);
            if (!getCurrentDisplayedPhase().isEnded()) {
              refreshSaveButtonState();
            }
          }
        }
);
        if (elementDTO.getValidates()) {
          elementDTO.addRequiredValueHandler(new RequiredValueHandler(){
            @Override public void onRequiredValueChange(            RequiredValueEvent event){
              currentPhaseRequiredElements.putActual(tabPanel.getCurrentIterationId(),elementDTO.getId(),event.isValueOn());
              if (isCurrentPhase(getCurrentProject().getCurrentPhase())) {
                activePhaseRequiredElements.putActual(tabPanel.getCurrentIterationId(),elementDTO.getId(),event.isValueOn());
              }
              if (event.isImmediate()) {
                view.getButtonSavePhase().fireEvent(Events.OnClick);
              }
              elementDTO.setFilledIn(currentPhaseRequiredElements.isActuallyTrue(elementDTO.getId()));
              view.getGridRequiredElements().getStore().update(elementDTO);
              elementDTO.getTabPanel().setElementValidity(elementDTO,event.isValueOn());
              refreshRequiredElementContentPanelHeader();
            }
          }
);
          if (tabItem != null) {
            tabItem.setElementValidity(elementDTO,elementDTO.isCorrectRequiredValue(valueResult));
            tabItem.refreshTitle();
          }
          elementDTO.setGroup(groupLayout);
          elementDTO.setConstraint(constraintDTO);
          requiredElementsSet.add(elementDTO);
          view.getGridRequiredElements().getStore().removeAll();
          view.getGridRequiredElements().getStore().add(sortRequiredElements(new ArrayList<FlexibleElementDTO>(requiredElementsSet)));
          refreshRequiredElementContentPanelHeader();
          currentPhaseRequiredElements.putSaved(iterationId,elementDTO.getId(),elementDTO.isFilledIn());
          if (isCurrentPhase(getCurrentProject().getCurrentPhase())) {
            activePhaseRequiredElements.putSaved(iterationId,elementDTO.getId(),elementDTO.isFilledIn());
          }
        }
      }
    }
,new LoadingMask(view.getTabPanelPhases()));
  }
  fieldSet.setCollapsible(false);
  fieldSet.setAutoHeight(true);
  fieldSet.setBorders(false);
  fieldSet.setHeadingHtml(""String_Node_Str"");
  return fieldSet;
}","@Override public FieldSet createGroupLayoutFieldSet(FlexibleElementContainer container,final LayoutGroupDTO groupLayout,DispatchQueue queue,final Integer iterationId,final IterableGroupPanel tabPanel,final IterableGroupItem tabItem){
  final ProjectDTO project=(ProjectDTO)container;
  final FieldSet fieldSet=(FieldSet)groupLayout.getWidget();
  if (ClientUtils.isEmpty(groupLayout.getConstraints())) {
    return fieldSet;
  }
  for (  final LayoutConstraintDTO constraintDTO : groupLayout.getConstraints()) {
    final FlexibleElementDTO elementDTO=constraintDTO.getFlexibleElementDTO();
    if (elementDTO.isDisabled()) {
      continue;
    }
    final Integer amendmentId;
    if (project.getCurrentAmendment() != null) {
      amendmentId=project.getCurrentAmendment().getId();
    }
 else {
      amendmentId=null;
    }
    GetValue getValue;
    getValue=new GetValue(project.getId(),elementDTO.getId(),elementDTO.getEntityName(),amendmentId,iterationId);
    queue.add(getValue,new CommandResultHandler<ValueResult>(){
      @Override public void onCommandFailure(      final Throwable throwable){
        if (Log.isErrorEnabled()) {
          Log.error(""String_Node_Str"",throwable);
        }
        throw new RuntimeException(throwable);
      }
      @Override public void onCommandSuccess(      final ValueResult valueResult){
        if (Log.isDebugEnabled()) {
          Log.debug(""String_Node_Str"" + valueResult);
        }
        elementDTO.setService(dispatch);
        elementDTO.setAuthenticationProvider(injector.getAuthenticationProvider());
        elementDTO.setEventBus(eventBus);
        elementDTO.setCache(injector.getClientCache());
        elementDTO.setCurrentContainerDTO(project);
        elementDTO.setTransfertManager(injector.getTransfertManager());
        elementDTO.assignValue(valueResult);
        elementDTO.setTabPanel(tabPanel);
        final ProjectPresenter projectPresenter=injector.getProjectPresenter();
        elementDTO.init();
        final Component elementComponent=elementDTO.getElementComponent(valueResult);
        if (elementDTO.getAmendable() && projectPresenter.projectIsLocked() && projectPresenter.canUnlockProject()&& !ProfileUtils.isGranted(auth(),GlobalPermissionEnum.MODIFY_LOCKED_CONTENT)) {
          projectPresenter.addUnlockProjectPopup(elementDTO,elementComponent,new LoadingMask(view.getTabPanelPhases()));
        }
        final FormData formData;
        if (elementDTO.getPreferredWidth() == 0) {
          formData=new FormData(""String_Node_Str"");
        }
 else {
          formData=new FormData(elementDTO.getPreferredWidth(),-1);
        }
        if (elementComponent != null) {
          fieldSet.add(elementComponent,formData);
        }
        fieldSet.layout();
        computationTriggerManager.listenToValueChangesOfElement(elementDTO,elementComponent,valueChanges);
        elementDTO.addValueHandler(new ValueHandler(){
          @Override public void onValueChange(          final ValueEvent event){
            if (tabPanel != null) {
              event.setIterationId(tabPanel.getCurrentIterationId());
            }
            valueChanges.add(event);
            if (!getCurrentDisplayedPhase().isEnded()) {
              refreshSaveButtonState();
            }
          }
        }
);
        if (elementDTO.getValidates()) {
          elementDTO.addRequiredValueHandler(new RequiredValueHandler(){
            @Override public void onRequiredValueChange(            RequiredValueEvent event){
              Integer iterationId=tabPanel == null ? null : tabPanel.getCurrentIterationId();
              currentPhaseRequiredElements.putActual(iterationId,elementDTO.getId(),event.isValueOn());
              if (isCurrentPhase(getCurrentProject().getCurrentPhase())) {
                activePhaseRequiredElements.putActual(iterationId,elementDTO.getId(),event.isValueOn());
              }
              if (event.isImmediate()) {
                view.getButtonSavePhase().fireEvent(Events.OnClick);
              }
              elementDTO.setFilledIn(currentPhaseRequiredElements.isActuallyTrue(elementDTO.getId()));
              view.getGridRequiredElements().getStore().update(elementDTO);
              if (iterationId != null) {
                elementDTO.getTabPanel().setElementValidity(elementDTO,event.isValueOn());
              }
              refreshRequiredElementContentPanelHeader();
            }
          }
);
          if (tabItem != null) {
            tabItem.setElementValidity(elementDTO,elementDTO.isCorrectRequiredValue(valueResult));
            tabItem.refreshTitle();
          }
          elementDTO.setGroup(groupLayout);
          elementDTO.setConstraint(constraintDTO);
          requiredElementsSet.add(elementDTO);
          view.getGridRequiredElements().getStore().removeAll();
          view.getGridRequiredElements().getStore().add(sortRequiredElements(new ArrayList<FlexibleElementDTO>(requiredElementsSet)));
          refreshRequiredElementContentPanelHeader();
          currentPhaseRequiredElements.putSaved(iterationId,elementDTO.getId(),elementDTO.isFilledIn());
          if (isCurrentPhase(getCurrentProject().getCurrentPhase())) {
            activePhaseRequiredElements.putSaved(iterationId,elementDTO.getId(),elementDTO.isFilledIn());
          }
        }
      }
    }
,new LoadingMask(view.getTabPanelPhases()));
  }
  fieldSet.setCollapsible(false);
  fieldSet.setAutoHeight(true);
  fieldSet.setBorders(false);
  fieldSet.setHeadingHtml(""String_Node_Str"");
  return fieldSet;
}",0.695779013583736
35400,"@Override public void onRequiredValueChange(RequiredValueEvent event){
  currentPhaseRequiredElements.putActual(tabPanel.getCurrentIterationId(),elementDTO.getId(),event.isValueOn());
  if (isCurrentPhase(getCurrentProject().getCurrentPhase())) {
    activePhaseRequiredElements.putActual(tabPanel.getCurrentIterationId(),elementDTO.getId(),event.isValueOn());
  }
  if (event.isImmediate()) {
    view.getButtonSavePhase().fireEvent(Events.OnClick);
  }
  elementDTO.setFilledIn(currentPhaseRequiredElements.isActuallyTrue(elementDTO.getId()));
  view.getGridRequiredElements().getStore().update(elementDTO);
  elementDTO.getTabPanel().setElementValidity(elementDTO,event.isValueOn());
  refreshRequiredElementContentPanelHeader();
}","@Override public void onRequiredValueChange(RequiredValueEvent event){
  Integer iterationId=tabPanel == null ? null : tabPanel.getCurrentIterationId();
  currentPhaseRequiredElements.putActual(iterationId,elementDTO.getId(),event.isValueOn());
  if (isCurrentPhase(getCurrentProject().getCurrentPhase())) {
    activePhaseRequiredElements.putActual(iterationId,elementDTO.getId(),event.isValueOn());
  }
  if (event.isImmediate()) {
    view.getButtonSavePhase().fireEvent(Events.OnClick);
  }
  elementDTO.setFilledIn(currentPhaseRequiredElements.isActuallyTrue(elementDTO.getId()));
  view.getGridRequiredElements().getStore().update(elementDTO);
  if (iterationId != null) {
    elementDTO.getTabPanel().setElementValidity(elementDTO,event.isValueOn());
  }
  refreshRequiredElementContentPanelHeader();
}",0.8684381075826313
35401,"/** 
 * {@inheritDoc}
 */
@Override protected void onSaveAction(final ProjectModelDTO currentModel,final AsyncCallback<ProjectModelDTO> callback){
  final String name=view.getNameField().getValue();
  final EnumModel<ProjectModelStatus> statusModel=view.getHeaderStatusField().getValue();
  final ProjectModelStatus status=statusModel != null ? statusModel.getEnum() : null;
  List<ProfileDTO> defaultProfiles=view.getDefaultProfilesComboBox().getListStore().getModels();
  Set<Integer> defaultProfileIds=new HashSet<Integer>();
  for (  ProfileDTO profile : defaultProfiles) {
    defaultProfileIds.add(profile.getId());
  }
  final Map<String,Object> modelProperties=new HashMap<String,Object>();
  modelProperties.put(AdminUtil.ADMIN_PROJECT_MODEL,currentModel);
  modelProperties.put(AdminUtil.PROP_PM_NAME,name);
  modelProperties.put(AdminUtil.PROP_PM_STATUS,status);
  modelProperties.put(AdminUtil.PROP_PM_USE,view.getProjectModelTypeField().getValue());
  modelProperties.put(AdminUtil.PROP_PM_MAINTENANCE_DATE,getMaintenanceDate());
  modelProperties.put(AdminUtil.PROP_PM_DEFAULT_TEAM_MEMBER_PROFILES,defaultProfileIds);
  dispatch.execute(new CreateEntity(ProjectModelDTO.ENTITY_NAME,modelProperties),new CommandResultHandler<CreateResult>(){
    @Override public void onCommandFailure(    final Throwable caught){
      N10N.error(I18N.CONSTANTS.adminProjectModelUpdateBox(),I18N.MESSAGES.adminStandardCreationFailure(I18N.CONSTANTS.adminProjectModelStandard() + ""String_Node_Str"" + name+ ""String_Node_Str""));
      callback.onFailure(caught);
    }
    @Override public void onCommandSuccess(    final CreateResult result){
      if (result == null || result.getEntity() == null) {
        N10N.warn(I18N.CONSTANTS.adminProjectModelUpdateBox(),I18N.MESSAGES.adminStandardCreationNull(I18N.CONSTANTS.adminProjectModelStandard() + ""String_Node_Str"" + name+ ""String_Node_Str""));
        return;
      }
      final ProjectModelDTO updatedModel=(ProjectModelDTO)result.getEntity();
      callback.onSuccess(updatedModel);
      N10N.infoNotif(I18N.CONSTANTS.adminProjectModelUpdateBox(),I18N.MESSAGES.adminStandardUpdateSuccess(I18N.CONSTANTS.adminProjectModelStandard() + ""String_Node_Str"" + name+ ""String_Node_Str""));
    }
  }
,view.getHeaderSaveButton(),new LoadingMask(view.getHeaderForm()));
}","/** 
 * {@inheritDoc}
 */
@Override protected void onSaveAction(final ProjectModelDTO currentModel,final AsyncCallback<ProjectModelDTO> callback){
  final String name=view.getNameField().getValue();
  final EnumModel<ProjectModelStatus> statusModel=view.getHeaderStatusField().getValue();
  final ProjectModelStatus status=statusModel != null ? statusModel.getEnum() : null;
  List<ProfileDTO> defaultProfiles=view.getDefaultProfilesComboBox().getListStore().getModels();
  Set<Integer> defaultProfileIds=new HashSet<Integer>();
  for (  ProfileDTO profile : defaultProfiles) {
    defaultProfileIds.add(profile.getId());
  }
  final Map<String,Object> modelProperties=new HashMap<String,Object>();
  modelProperties.put(AdminUtil.ADMIN_PROJECT_MODEL,currentModel);
  modelProperties.put(AdminUtil.PROP_PM_NAME,name);
  modelProperties.put(AdminUtil.PROP_PM_STATUS,status);
  modelProperties.put(AdminUtil.PROP_PM_USE,view.getProjectModelTypeField().getValue());
  modelProperties.put(AdminUtil.PROP_PM_MAINTENANCE_DATE,getMaintenanceDate());
  modelProperties.put(AdminUtil.PROP_PM_DEFAULT_TEAM_MEMBER_PROFILES,defaultProfileIds);
  dispatch.execute(new CreateEntity(ProjectModelDTO.ENTITY_NAME,modelProperties),new CommandResultHandler<CreateResult>(){
    @Override public void onCommandFailure(    final Throwable caught){
      N10N.error(I18N.CONSTANTS.adminProjectModelUpdateBox(),I18N.MESSAGES.adminStandardCreationFailure(I18N.CONSTANTS.adminProjectModelStandard() + ""String_Node_Str"" + name+ ""String_Node_Str""+ caught.getMessage()));
      callback.onFailure(caught);
    }
    @Override public void onCommandSuccess(    final CreateResult result){
      if (result == null || result.getEntity() == null) {
        N10N.warn(I18N.CONSTANTS.adminProjectModelUpdateBox(),I18N.MESSAGES.adminStandardCreationNull(I18N.CONSTANTS.adminProjectModelStandard() + ""String_Node_Str"" + name+ ""String_Node_Str""));
        return;
      }
      final ProjectModelDTO updatedModel=(ProjectModelDTO)result.getEntity();
      callback.onSuccess(updatedModel);
      N10N.infoNotif(I18N.CONSTANTS.adminProjectModelUpdateBox(),I18N.MESSAGES.adminStandardUpdateSuccess(I18N.CONSTANTS.adminProjectModelStandard() + ""String_Node_Str"" + name+ ""String_Node_Str""));
    }
  }
,view.getHeaderSaveButton(),new LoadingMask(view.getHeaderForm()));
}",0.9954731623194654
35402,"/** 
 * Loads the given   {@code flexibleElement} <b>text area fields</b> and sets the corresponding form fields values.
 * @param flexibleElement The edited flexible element of type  {@link ElementTypeEnum#TEXT_AREA}.
 * @param textAreaType The text area type, may be  {@code null}.
 */
private void loadFlexibleElementTextAreaFields(final FlexibleElementDTO flexibleElement,final TextAreaType textAreaType){
  view.setTextAreaSpecificFieldsVisibility(textAreaType);
  view.getCodeField().setEnabled(!isUpdateAndUnderMaintenance());
  view.getMinDateField().setEnabled(!isUpdateAndUnderMaintenance());
  view.getMaxDateField().setEnabled(!isUpdateAndUnderMaintenance());
  view.getMinLimitField().setEnabled(!isUpdateAndUnderMaintenance());
  view.getMaxLimitField().setEnabled(!isUpdateAndUnderMaintenance());
  if (flexibleElement instanceof TextAreaElementDTO) {
    final TextAreaElementDTO textAreaElement=(TextAreaElementDTO)flexibleElement;
    final Long minValue=textAreaElement.getMinValue();
    final Long maxValue=textAreaElement.getMaxValue();
    view.getMinLimitField().setValue(minValue);
    view.getMaxLimitField().setValue(maxValue);
    view.getLengthField().setValue(textAreaElement.getLength());
    view.getDecimalField().setValue(textAreaElement.getIsDecimal());
    view.getMinDateField().setValue(minValue != null ? new Date(minValue) : null);
    view.getMaxDateField().setValue(maxValue != null ? new Date(maxValue) : null);
  }
}","/** 
 * Loads the given   {@code flexibleElement} <b>text area fields</b> and sets the corresponding form fields values.
 * @param flexibleElement The edited flexible element of type  {@link ElementTypeEnum#TEXT_AREA}.
 * @param textAreaType The text area type, may be  {@code null}.
 */
private void loadFlexibleElementTextAreaFields(final FlexibleElementDTO flexibleElement,final TextAreaType textAreaType){
  view.setTextAreaSpecificFieldsVisibility(textAreaType);
  view.getMinDateField().setEnabled(!isUpdateAndUnderMaintenance());
  view.getMaxDateField().setEnabled(!isUpdateAndUnderMaintenance());
  view.getMinLimitField().setEnabled(!isUpdateAndUnderMaintenance());
  view.getMaxLimitField().setEnabled(!isUpdateAndUnderMaintenance());
  if (flexibleElement instanceof TextAreaElementDTO) {
    final TextAreaElementDTO textAreaElement=(TextAreaElementDTO)flexibleElement;
    final Long minValue=textAreaElement.getMinValue();
    final Long maxValue=textAreaElement.getMaxValue();
    view.getMinLimitField().setValue(minValue);
    view.getMaxLimitField().setValue(maxValue);
    view.getLengthField().setValue(textAreaElement.getLength());
    view.getDecimalField().setValue(textAreaElement.getIsDecimal());
    view.getMinDateField().setValue(minValue != null ? new Date(minValue) : null);
    view.getMaxDateField().setValue(maxValue != null ? new Date(maxValue) : null);
  }
}",0.97687456201822
35403,"/** 
 * <p> Refreshes the project banner for the current project. </p> <p> Provided   {@code project} must possess following attributes:<ul> <li>Base attributes (id, name, etc.)</li> <li> {@link ProjectDTO#PROJECT_MODEL}</li> <li>  {@link ProjectDTO#CURRENT_AMENDMENT}</li> </ul> </p>
 * @param project The current loaded project.
 */
private void refreshBanner(final ProjectDTO project){
  view.setProjectTitle(project.getName(),project.getFullName());
  view.setProjectLogo(project.getProjectModel().getVisibility(auth().getOrganizationId()));
  final Header header=view.getProjectBannerPanel().getHeader();
  if (project.getProjectModel().isUnderMaintenance()) {
    header.addStyleName(ALERT_STYLE);
    header.setHtml(header.getHtml() + ""String_Node_Str"" + I18N.MESSAGES.projectMaintenanceMessage());
  }
 else   if (project.getProjectModel().getDateMaintenance() != null) {
    header.addStyleName(ALERT_STYLE);
    String maintenanceDate=DateUtils.DATE_TIME_SHORT.format(project.getProjectModel().getDateMaintenance());
    header.setHtml(header.getHtml() + ""String_Node_Str"" + I18N.MESSAGES.projectMaintenanceScheduledMessage(maintenanceDate));
  }
 else {
    header.removeStyleName(ALERT_STYLE);
  }
  final ProjectBannerDTO banner=project.getProjectModel().getProjectBanner();
  final LayoutDTO layout=banner != null ? banner.getLayout() : null;
  final Widget bannerWidget;
  if (layout != null && layout.getGroups() != null && !layout.getGroups().isEmpty()) {
    final int rows=layout.getRowsCount() > 2 ? 2 : layout.getRowsCount();
    final int cols=layout.getColumnsCount() > 4 ? 4 : layout.getColumnsCount();
    final HTMLTable gridLayout=view.buildBannerTable(rows,cols);
    bannerWidget=gridLayout;
    for (    final LayoutGroupDTO groupLayout : layout.getGroups()) {
      if (groupLayout.getRow() + 1 > rows || groupLayout.getColumn() + 1 > cols) {
        continue;
      }
      final ContentPanel groupPanel=new ContentPanel();
      groupPanel.setLayout(new FormLayout());
      groupPanel.setTopComponent(null);
      groupPanel.setHeaderVisible(false);
      gridLayout.setWidget(groupLayout.getRow(),groupLayout.getColumn(),groupPanel);
      if (groupLayout.getConstraints() == null) {
        continue;
      }
      for (      final LayoutConstraintDTO constraint : groupLayout.getConstraints()) {
        final FlexibleElementDTO element=constraint.getFlexibleElementDTO();
        if (!(element instanceof DefaultFlexibleElementDTO)) {
          continue;
        }
        final DefaultFlexibleElementDTO defaultElement=(DefaultFlexibleElementDTO)element;
        defaultElement.setService(dispatch);
        defaultElement.setAuthenticationProvider(injector.getAuthenticationProvider());
        defaultElement.setCache(injector.getClientCache());
        defaultElement.setCurrentContainerDTO(project);
        final Integer amendmentId;
        if (project.getCurrentAmendment() != null) {
          amendmentId=project.getCurrentAmendment().getId();
        }
 else {
          amendmentId=null;
        }
        dispatch.execute(new GetValue(project.getId(),element.getId(),element.getEntityName(),amendmentId),new CommandResultHandler<ValueResult>(){
          @Override public void onCommandFailure(          final Throwable throwable){
            if (Log.isErrorEnabled()) {
              Log.error(""String_Node_Str"",throwable);
            }
            throw new RuntimeException(throwable);
          }
          @Override public void onCommandSuccess(          final ValueResult valueResult){
            if (Log.isDebugEnabled()) {
              Log.debug(""String_Node_Str"" + valueResult);
            }
            final Component component;
            if (defaultElement instanceof BudgetElementDTO) {
              component=defaultElement.getElementComponentInBanner(valueResult);
            }
 else {
              component=defaultElement.getElementComponentInBanner(null);
            }
            if (component == null) {
              return;
            }
            if (component instanceof LabelField) {
              final LabelField lableFieldComponent=(LabelField)component;
              final String textValue=(String)lableFieldComponent.getValue();
              final ToolTipConfig config=new ToolTipConfig();
              config.setMaxWidth(500);
              config.setText(textValue);
              lableFieldComponent.setToolTip(config);
              if (ClientUtils.isNotBlank(textValue)) {
                lableFieldComponent.setValue(ClientUtils.abbreviate(textValue,30));
              }
              groupPanel.add(lableFieldComponent);
            }
 else {
              groupPanel.add(component);
            }
            groupPanel.layout();
          }
        }
);
        break;
      }
    }
  }
 else {
    view.getProjectBannerPanel().setLayout(new FormLayout());
    final LabelField codeField=new LabelField();
    codeField.setReadOnly(true);
    codeField.setFieldLabel(I18N.CONSTANTS.projectName());
    codeField.setLabelSeparator(I18N.CONSTANTS.form_label_separator());
    codeField.setValue(project.getName());
    bannerWidget=codeField;
  }
  view.setProjectBanner(bannerWidget);
  view.getProjectBannerPanel().layout();
}","/** 
 * <p> Refreshes the project banner for the current project. </p> <p> Provided   {@code project} must possess following attributes:<ul> <li>Base attributes (id, name, etc.)</li> <li> {@link ProjectDTO#PROJECT_MODEL}</li> <li>  {@link ProjectDTO#CURRENT_AMENDMENT}</li> </ul> </p>
 * @param project The current loaded project.
 */
private void refreshBanner(final ProjectDTO project){
  view.setProjectTitle(project.getName(),project.getFullName());
  view.setProjectLogo(project.getProjectModel().getVisibility(auth().getOrganizationId()));
  final Header header=view.getProjectBannerPanel().getHeader();
  if (project.getProjectModel().isUnderMaintenance()) {
    header.addStyleName(ALERT_STYLE);
    header.setHtml(header.getHtml() + ""String_Node_Str"" + I18N.MESSAGES.projectMaintenanceMessage());
  }
 else   if (project.getProjectModel().getDateMaintenance() != null) {
    header.addStyleName(ALERT_STYLE);
    String maintenanceDate=DateUtils.DATE_TIME_SHORT.format(project.getProjectModel().getDateMaintenance());
    header.setHtml(header.getHtml() + ""String_Node_Str"" + I18N.MESSAGES.projectMaintenanceScheduledMessage(maintenanceDate));
  }
 else {
    header.removeStyleName(ALERT_STYLE);
  }
  final ProjectBannerDTO banner=project.getProjectModel().getProjectBanner();
  final LayoutDTO layout=banner != null ? banner.getLayout() : null;
  final Widget bannerWidget;
  if (layout != null && layout.getGroups() != null && !layout.getGroups().isEmpty()) {
    final int rows=layout.getRowsCount() > 2 ? 2 : layout.getRowsCount();
    final int cols=layout.getColumnsCount() > 4 ? 4 : layout.getColumnsCount();
    final HTMLTable gridLayout=view.buildBannerTable(rows,cols);
    bannerWidget=gridLayout;
    for (    final LayoutGroupDTO groupLayout : layout.getGroups()) {
      if (groupLayout.getRow() + 1 > rows || groupLayout.getColumn() + 1 > cols) {
        continue;
      }
      final ContentPanel groupPanel=new ContentPanel();
      groupPanel.setLayout(new FormLayout());
      groupPanel.setTopComponent(null);
      groupPanel.setHeaderVisible(false);
      gridLayout.setWidget(groupLayout.getRow(),groupLayout.getColumn(),groupPanel);
      if (groupLayout.getConstraints() == null) {
        continue;
      }
      for (      final LayoutConstraintDTO constraint : groupLayout.getConstraints()) {
        final FlexibleElementDTO element=constraint.getFlexibleElementDTO();
        if (!(element instanceof DefaultFlexibleElementDTO)) {
          continue;
        }
        final DefaultFlexibleElementDTO defaultElement=(DefaultFlexibleElementDTO)element;
        defaultElement.setService(dispatch);
        defaultElement.setAuthenticationProvider(injector.getAuthenticationProvider());
        defaultElement.setEventBus(eventBus);
        defaultElement.setCache(injector.getClientCache());
        defaultElement.setCurrentContainerDTO(project);
        final Integer amendmentId;
        if (project.getCurrentAmendment() != null) {
          amendmentId=project.getCurrentAmendment().getId();
        }
 else {
          amendmentId=null;
        }
        dispatch.execute(new GetValue(project.getId(),element.getId(),element.getEntityName(),amendmentId),new CommandResultHandler<ValueResult>(){
          @Override public void onCommandFailure(          final Throwable throwable){
            if (Log.isErrorEnabled()) {
              Log.error(""String_Node_Str"",throwable);
            }
            throw new RuntimeException(throwable);
          }
          @Override public void onCommandSuccess(          final ValueResult valueResult){
            if (Log.isDebugEnabled()) {
              Log.debug(""String_Node_Str"" + valueResult);
            }
            final Component component;
            if (defaultElement instanceof BudgetElementDTO) {
              component=defaultElement.getElementComponentInBanner(valueResult);
            }
 else {
              component=defaultElement.getElementComponentInBanner(null);
            }
            if (component == null) {
              return;
            }
            if (component instanceof LabelField) {
              final LabelField lableFieldComponent=(LabelField)component;
              final String textValue=(String)lableFieldComponent.getValue();
              final ToolTipConfig config=new ToolTipConfig();
              config.setMaxWidth(500);
              config.setText(textValue);
              lableFieldComponent.setToolTip(config);
              if (ClientUtils.isNotBlank(textValue)) {
                lableFieldComponent.setValue(ClientUtils.abbreviate(textValue,30));
              }
              groupPanel.add(lableFieldComponent);
            }
 else {
              groupPanel.add(component);
            }
            groupPanel.layout();
          }
        }
);
        break;
      }
    }
  }
 else {
    view.getProjectBannerPanel().setLayout(new FormLayout());
    final LabelField codeField=new LabelField();
    codeField.setReadOnly(true);
    codeField.setFieldLabel(I18N.CONSTANTS.projectName());
    codeField.setLabelSeparator(I18N.CONSTANTS.form_label_separator());
    codeField.setValue(project.getName());
    bannerWidget=codeField;
  }
  view.setProjectBanner(bannerWidget);
  view.getProjectBannerPanel().layout();
}",0.9956240487062404
35404,"/** 
 * Retrieves the given   {@code parentProject} corresponding planned budget value.
 * @param parentProject The parent project.
 * @throws UnsupportedOperationException If the project model has 0 or more than 1 budget ratio element or if the planned budget element of the budget ratio element is <code>null</code>.
 */
private void findPlannedBudget(final ProjectDTO parentProject) throws UnsupportedOperationException {
  plannedBudget=null;
  final List<ProjectModelDTO.LocalizedElement<BudgetRatioElementDTO>> budgetRatioElements=parentProject.getProjectModel().getLocalizedElements(BudgetRatioElementDTO.class);
  if (budgetRatioElements.size() != 1) {
    throw new UnsupportedOperationException(budgetRatioElements.size() + ""String_Node_Str"");
  }
  final BudgetRatioElementDTO budgetRatioElement=budgetRatioElements.get(0).getElement();
  final FlexibleElementDTO plannedBudgetField=budgetRatioElement.getPlannedBudget();
  if (plannedBudgetField == null) {
    throw new UnsupportedOperationException(""String_Node_Str"" + budgetRatioElement.getId() + ""String_Node_Str"");
  }
  dispatch.execute(new GetValue(parentProject.getId(),plannedBudgetField.getId(),plannedBudgetField.getEntityName()),new CommandResultHandler<ValueResult>(){
    @Override public void onCommandSuccess(    final ValueResult result){
      if (result != null && result.isValueDefined()) {
        plannedBudget=Double.valueOf(result.getValueObject());
      }
      if (linkedProject != null) {
        view.getAmountField().setValue(linkedProject.getPercentage());
        updatePercentageField();
      }
    }
  }
);
}","/** 
 * Retrieves the given   {@code parentProject} corresponding planned budget value.
 * @param parentProject The parent project.
 * @throws UnsupportedOperationException If the project model has 0 or more than 1 budget ratio element or if the planned budget element of the budget ratio element is <code>null</code>.
 */
private void findPlannedBudget(final ProjectDTO parentProject) throws UnsupportedOperationException {
  plannedBudget=null;
  final List<ProjectModelDTO.LocalizedElement<BudgetRatioElementDTO>> budgetRatioElements=parentProject.getProjectModel().getLocalizedElements(BudgetRatioElementDTO.class);
  if (budgetRatioElements == null) {
    throw new UnsupportedOperationException(""String_Node_Str"");
  }
  if (budgetRatioElements.size() != 1) {
    throw new UnsupportedOperationException(budgetRatioElements.size() + ""String_Node_Str"");
  }
  final BudgetRatioElementDTO budgetRatioElement=budgetRatioElements.get(0).getElement();
  final FlexibleElementDTO plannedBudgetField=budgetRatioElement.getPlannedBudget();
  if (plannedBudgetField == null) {
    throw new UnsupportedOperationException(""String_Node_Str"" + budgetRatioElement.getId() + ""String_Node_Str"");
  }
  dispatch.execute(new GetValue(parentProject.getId(),plannedBudgetField.getId(),plannedBudgetField.getEntityName()),new CommandResultHandler<ValueResult>(){
    @Override public void onCommandSuccess(    final ValueResult result){
      if (result != null && result.isValueDefined()) {
        plannedBudget=Double.valueOf(result.getValueObject());
      }
      if (linkedProject != null) {
        view.getAmountField().setValue(linkedProject.getPercentage());
        updatePercentageField();
      }
    }
  }
);
}",0.9683257918552036
35405,"/** 
 * Retrieves the projects and populates the corresponding field.
 */
private void loadProjects(){
  final GetProjects command=new GetProjects();
  command.setViewOwnOrManage(true);
  command.setMappingMode(ProjectDTO.Mode._USE_PROJECT_MAPPER);
  view.getProjectsField().getStore().removeAll();
  dispatch.execute(command,new CommandResultHandler<ListResult<ProjectDTO>>(){
    @Override public void onCommandFailure(    final Throwable e){
      if (Log.isErrorEnabled()) {
        Log.error(""String_Node_Str"",e);
      }
      N10N.error(I18N.CONSTANTS.createProjectTypeError(),I18N.CONSTANTS.createProjectTypeErrorDetails());
    }
    @Override public void onCommandSuccess(    final ListResult<ProjectDTO> result){
      final List<ProjectDTO> projects=result.getList();
      projects.remove(parentProject);
      if (ClientUtils.isEmpty(projects)) {
        N10N.warn(I18N.CONSTANTS.createProjectTypeFundingSelectNone(),I18N.CONSTANTS.createProjectTypeFundingSelectNoneDetails());
        hideView();
        return;
      }
      Collections.sort(projects,PROJECT_NAME_COMPARATOR);
      final Map<CountryDTO,List<ProjectDTO>> map=new TreeMap<CountryDTO,List<ProjectDTO>>(COUNTRY_NAME_COMPARATOR);
      for (      final ProjectDTO project : projects) {
        final CountryDTO country=project.getCountry();
        project.generateTypeIconHTML(auth().getOrganizationId());
        if (map.containsKey(country)) {
          map.get(country).add(project);
        }
 else {
          final List<ProjectDTO> countryProjects=new ArrayList<ProjectDTO>();
          countryProjects.add(project);
          map.put(country,countryProjects);
        }
      }
      final List<ModelData> projectsListForCombo=new ArrayList<ModelData>();
      for (      final CountryDTO country : map.keySet()) {
        projectsListForCombo.add(country);
        for (        final ProjectDTO project : map.get(country)) {
          projectsListForCombo.add(project);
        }
      }
      view.getProjectsField().getStore().add(projectsListForCombo);
      view.getProjectsField().getStore().commitChanges();
    }
  }
,view.getSaveButton(),view.getDeleteButton());
}","/** 
 * Retrieves the projects and populates the corresponding field.
 */
private void loadProjects(){
  final List<Integer> orgUnitsIdsAsList=auth().getOrgUnitIds() != null ? new ArrayList<Integer>(auth().getOrgUnitIds()) : null;
  final GetProjects command=new GetProjects(orgUnitsIdsAsList,ProjectDTO.Mode._USE_PROJECT_MAPPER);
  command.setViewOwnOrManage(true);
  view.getProjectsField().getStore().removeAll();
  dispatch.execute(command,new CommandResultHandler<ListResult<ProjectDTO>>(){
    @Override public void onCommandFailure(    final Throwable e){
      if (Log.isErrorEnabled()) {
        Log.error(""String_Node_Str"",e);
      }
      N10N.error(I18N.CONSTANTS.createProjectTypeError(),I18N.CONSTANTS.createProjectTypeErrorDetails());
    }
    @Override public void onCommandSuccess(    final ListResult<ProjectDTO> result){
      final List<ProjectDTO> projects=result.getList();
      projects.remove(parentProject);
      if (ClientUtils.isEmpty(projects)) {
        N10N.warn(I18N.CONSTANTS.createProjectTypeFundingSelectNone(),I18N.CONSTANTS.createProjectTypeFundingSelectNoneDetails());
        hideView();
        return;
      }
      Collections.sort(projects,PROJECT_NAME_COMPARATOR);
      final Map<CountryDTO,List<ProjectDTO>> map=new TreeMap<CountryDTO,List<ProjectDTO>>(COUNTRY_NAME_COMPARATOR);
      for (      final ProjectDTO project : projects) {
        final CountryDTO country=project.getCountry();
        project.generateTypeIconHTML(auth().getOrganizationId());
        if (map.containsKey(country)) {
          map.get(country).add(project);
        }
 else {
          final List<ProjectDTO> countryProjects=new ArrayList<ProjectDTO>();
          countryProjects.add(project);
          map.put(country,countryProjects);
        }
      }
      final List<ModelData> projectsListForCombo=new ArrayList<ModelData>();
      for (      final CountryDTO country : map.keySet()) {
        projectsListForCombo.add(country);
        for (        final ProjectDTO project : map.get(country)) {
          projectsListForCombo.add(project);
        }
      }
      view.getProjectsField().getStore().add(projectsListForCombo);
      view.getProjectsField().getStore().commitChanges();
    }
  }
,view.getSaveButton(),view.getDeleteButton());
}",0.9445945945945946
35406,"/** 
 * Loads the current project linked projects (i.e. funding / funded projects).
 * @param linkedProjectType The linked projects type to load. Set to  {@code null} to load all types.
 */
private void loadLinkedProjects(final LinkedProjectType linkedProjectType){
  if (linkedProjectType == null || linkedProjectType == LinkedProjectType.FUNDING_PROJECT) {
    view.getFundingProjectsGrid().getStore().removeAll();
    dispatch.execute(new GetLinkedProjects(getProject().getId(),LinkedProjectType.FUNDING_PROJECT,ProjectDTO.Mode._USE_PROJECT_MAPPER),new CommandResultHandler<ListResult<ProjectFundingDTO>>(){
      @Override protected void onCommandSuccess(      final ListResult<ProjectFundingDTO> result){
        view.getFundingProjectsGrid().getStore().add(result.getList());
      }
    }
,new LoadingMask(view.getFundingProjectsGrid()));
  }
  if (linkedProjectType == null || linkedProjectType == LinkedProjectType.FUNDED_PROJECT) {
    view.getFundedProjectsGrid().getStore().removeAll();
    dispatch.execute(new GetLinkedProjects(getProject().getId(),LinkedProjectType.FUNDED_PROJECT,ProjectDTO.Mode._USE_PROJECT_MAPPER),new CommandResultHandler<ListResult<ProjectFundingDTO>>(){
      @Override protected void onCommandSuccess(      final ListResult<ProjectFundingDTO> result){
        view.getFundedProjectsGrid().getStore().add(result.getList());
      }
    }
,new LoadingMask(view.getFundedProjectsGrid()));
  }
}","/** 
 * Loads the current project linked projects (i.e. funding / funded projects).
 * @param linkedProjectType The linked projects type to load. Set to  {@code null} to load all types.
 */
private void loadLinkedProjects(final LinkedProjectType linkedProjectType){
  if (linkedProjectType == null || linkedProjectType == LinkedProjectType.FUNDING_PROJECT) {
    view.getFundingProjectsGrid().getStore().removeAll();
    view.getFundingProjectsGrid().getStore().add(getProject().getFunding());
  }
  if (linkedProjectType == null || linkedProjectType == LinkedProjectType.FUNDED_PROJECT) {
    view.getFundedProjectsGrid().getStore().removeAll();
    view.getFundedProjectsGrid().getStore().add(getProject().getFunded());
  }
}",0.5563282336578581
35407,"/** 
 * {@inheritDoc}
 */
@Override protected void onSaveAction(final ProjectModelDTO currentModel,final AsyncCallback<ProjectModelDTO> callback){
  final String name=view.getNameField().getValue();
  final EnumModel<ProjectModelStatus> statusModel=view.getHeaderStatusField().getValue();
  final ProjectModelStatus status=statusModel != null ? statusModel.getEnum() : null;
  List<ProfileDTO> defaultProfiles=view.getDefaultProfilesComboBox().getListStore().getModels();
  Set<Integer> defaultProfileIds=new HashSet<Integer>();
  for (  ProfileDTO profile : defaultProfiles) {
    defaultProfileIds.add(profile.getId());
  }
  final Map<String,Object> modelProperties=new HashMap<String,Object>();
  modelProperties.put(AdminUtil.ADMIN_PROJECT_MODEL,currentModel);
  modelProperties.put(AdminUtil.PROP_PM_NAME,name);
  modelProperties.put(AdminUtil.PROP_PM_STATUS,status);
  modelProperties.put(AdminUtil.PROP_PM_USE,view.getProjectModelTypeField().getValue());
  modelProperties.put(AdminUtil.PROP_PM_MAINTENANCE_DATE,getMaintenanceDate());
  modelProperties.put(AdminUtil.PROP_PM_DEFAULT_TEAM_MEMBER_PROFILES,defaultProfileIds);
  dispatch.execute(new CreateEntity(ProjectModelDTO.ENTITY_NAME,modelProperties),new CommandResultHandler<CreateResult>(){
    @Override public void onCommandFailure(    final Throwable caught){
      N10N.error(I18N.CONSTANTS.adminProjectModelUpdateBox(),I18N.MESSAGES.adminStandardCreationFailure(I18N.CONSTANTS.adminProjectModelStandard() + ""String_Node_Str"" + name+ ""String_Node_Str""));
      callback.onFailure(caught);
    }
    @Override public void onCommandSuccess(    final CreateResult result){
      if (result == null || result.getEntity() == null) {
        N10N.warn(I18N.CONSTANTS.adminProjectModelUpdateBox(),I18N.MESSAGES.adminStandardCreationNull(I18N.CONSTANTS.adminProjectModelStandard() + ""String_Node_Str"" + name+ ""String_Node_Str""));
        return;
      }
      final ProjectModelDTO updatedModel=(ProjectModelDTO)result.getEntity();
      callback.onSuccess(updatedModel);
      N10N.infoNotif(I18N.CONSTANTS.adminProjectModelUpdateBox(),I18N.MESSAGES.adminStandardUpdateSuccess(I18N.CONSTANTS.adminProjectModelStandard() + ""String_Node_Str"" + name+ ""String_Node_Str""));
    }
  }
,view.getHeaderSaveButton(),new LoadingMask(view.getHeaderForm()));
}","/** 
 * {@inheritDoc}
 */
@Override protected void onSaveAction(final ProjectModelDTO currentModel,final AsyncCallback<ProjectModelDTO> callback){
  final String name=view.getNameField().getValue();
  final EnumModel<ProjectModelStatus> statusModel=view.getHeaderStatusField().getValue();
  final ProjectModelStatus status=statusModel != null ? statusModel.getEnum() : null;
  List<ProfileDTO> defaultProfiles=view.getDefaultProfilesComboBox().getListStore().getModels();
  Set<Integer> defaultProfileIds=new HashSet<Integer>();
  for (  ProfileDTO profile : defaultProfiles) {
    defaultProfileIds.add(profile.getId());
  }
  final Map<String,Object> modelProperties=new HashMap<String,Object>();
  modelProperties.put(AdminUtil.ADMIN_PROJECT_MODEL,currentModel);
  modelProperties.put(AdminUtil.PROP_PM_NAME,name);
  modelProperties.put(AdminUtil.PROP_PM_STATUS,status);
  modelProperties.put(AdminUtil.PROP_PM_USE,view.getProjectModelTypeField().getValue());
  modelProperties.put(AdminUtil.PROP_PM_MAINTENANCE_DATE,getMaintenanceDate());
  modelProperties.put(AdminUtil.PROP_PM_DEFAULT_TEAM_MEMBER_PROFILES,defaultProfileIds);
  dispatch.execute(new CreateEntity(ProjectModelDTO.ENTITY_NAME,modelProperties),new CommandResultHandler<CreateResult>(){
    @Override public void onCommandFailure(    final Throwable caught){
      N10N.error(I18N.CONSTANTS.adminProjectModelUpdateBox(),I18N.MESSAGES.adminStandardCreationFailure(I18N.CONSTANTS.adminProjectModelStandard() + ""String_Node_Str"" + name+ ""String_Node_Str""+ caught.getMessage()));
      callback.onFailure(caught);
    }
    @Override public void onCommandSuccess(    final CreateResult result){
      if (result == null || result.getEntity() == null) {
        N10N.warn(I18N.CONSTANTS.adminProjectModelUpdateBox(),I18N.MESSAGES.adminStandardCreationNull(I18N.CONSTANTS.adminProjectModelStandard() + ""String_Node_Str"" + name+ ""String_Node_Str""));
        return;
      }
      final ProjectModelDTO updatedModel=(ProjectModelDTO)result.getEntity();
      callback.onSuccess(updatedModel);
      N10N.infoNotif(I18N.CONSTANTS.adminProjectModelUpdateBox(),I18N.MESSAGES.adminStandardUpdateSuccess(I18N.CONSTANTS.adminProjectModelStandard() + ""String_Node_Str"" + name+ ""String_Node_Str""));
    }
  }
,view.getHeaderSaveButton(),new LoadingMask(view.getHeaderForm()));
}",0.9954731623194654
35408,"/** 
 * Loads a project phase into the selected tab panel.
 * @param phaseDTO The phase to display.
 */
private void loadPhaseOnTab(final PhaseDTO phaseDTO){
  final boolean phaseIsEnded=isEndedPhase(phaseDTO);
  setCurrentDisplayedPhase(phaseDTO);
  currentPhaseRequiredElements.clear();
  valueChanges.clear();
  for (  final TabItem tab : view.getTabPanelPhases().getItems()) {
    tab.removeAll();
  }
  view.getPanelSelectedPhase().removeAll();
  view.getGridRequiredElements().getStore().removeAll();
  view.getTabPanelPhases().getSelectedItem().add(view.getPanelProjectModel());
  requiredElementsSet.clear();
  final Grid layoutGrid=(Grid)phaseDTO.getPhaseModel().getWidget();
  layoutGrid.setStyleName(""String_Node_Str"");
  view.getPanelSelectedPhase().add(layoutGrid);
  final DispatchQueue queue=new DispatchQueue(dispatch,true){
    @Override protected void onComplete(){
      injector.getProjectDashboardPresenter().getView().layoutView();
      view.layout();
      Profiler.INSTANCE.endScenario(Scenario.OPEN_PROJECT);
    }
  }
;
  final ProjectDTO project=getCurrentProject();
  computationTriggerManager.prepareForProject(project);
  for (  final LayoutGroupDTO groupDTO : phaseDTO.getPhaseModel().getLayout().getGroups()) {
    if (!groupDTO.getHasIterations()) {
      FieldSet fieldSet=createGroupLayoutFieldSet(getCurrentProject(),groupDTO,queue,null,null,null);
      fieldSet.setHeadingHtml(groupDTO.getTitle());
      fieldSet.setCollapsible(true);
      fieldSet.setBorders(true);
      layoutGrid.setWidget(groupDTO.getRow(),groupDTO.getColumn(),fieldSet);
      continue;
    }
    final FieldSet fieldSet=(FieldSet)groupDTO.getWidget();
    layoutGrid.setWidget(groupDTO.getRow(),groupDTO.getColumn(),fieldSet);
    final IterableGroupPanel tabPanel=Forms.iterableGroupPanel(dispatch,groupDTO,getCurrentProject(),ProfileUtils.isGranted(auth(),GlobalPermissionEnum.CREATE_ITERATIONS) && getCurrentProject().getCurrentAmendment() == null);
    tabPanel.setDelegate(this);
    fieldSet.add(tabPanel);
    tabPanel.setAutoHeight(true);
    tabPanel.setAutoWidth(true);
    tabPanel.setTabScroll(true);
    tabPanel.addStyleName(""String_Node_Str"");
    tabPanel.setBorders(true);
    tabPanel.setBodyBorder(false);
    Integer amendmentId;
    if (getCurrentProject().getCurrentAmendment() != null) {
      amendmentId=getCurrentProject().getCurrentAmendment().getId();
    }
 else {
      amendmentId=-1;
    }
    GetLayoutGroupIterations getIterations=new GetLayoutGroupIterations(groupDTO.getId(),getCurrentProject().getId(),amendmentId);
    queue.add(getIterations,new CommandResultHandler<ListResult<LayoutGroupIterationDTO>>(){
      @Override public void onCommandFailure(      final Throwable throwable){
        if (Log.isErrorEnabled()) {
          Log.error(""String_Node_Str"",throwable);
        }
        throw new RuntimeException(throwable);
      }
      @Override protected void onCommandSuccess(      ListResult<LayoutGroupIterationDTO> result){
        DispatchQueue iterationsQueue=new DispatchQueue(dispatch,true);
        for (        final LayoutGroupIterationDTO iteration : result.getList()) {
          final IterableGroupItem tab=new IterableGroupItem(tabPanel,iteration.getId(),iteration.getName());
          tabPanel.addIterationTab(tab);
          Layout tabLayout=Layouts.fitLayout();
          tab.setLayout(tabLayout);
          FieldSet tabSet=createGroupLayoutFieldSet(getCurrentProject(),groupDTO,iterationsQueue,iteration == null ? null : iteration.getId(),tabPanel,tab);
          tab.add(tabSet);
        }
        iterationsQueue.start();
        if (tabPanel.getItemCount() > 0) {
          tabPanel.setSelection(tabPanel.getItem(0));
        }
      }
    }
,new LoadingMask(view.getTabPanelPhases()));
    fieldSet.layout();
  }
  queue.start();
}","/** 
 * Loads a project phase into the selected tab panel.
 * @param phaseDTO The phase to display.
 */
private void loadPhaseOnTab(final PhaseDTO phaseDTO){
  initCurrentPhaseCounter();
  final boolean phaseIsEnded=isEndedPhase(phaseDTO);
  setCurrentDisplayedPhase(phaseDTO);
  currentPhaseRequiredElements.clear();
  valueChanges.clear();
  for (  final TabItem tab : view.getTabPanelPhases().getItems()) {
    tab.removeAll();
  }
  view.getPanelSelectedPhase().removeAll();
  view.getGridRequiredElements().getStore().removeAll();
  view.getTabPanelPhases().getSelectedItem().add(view.getPanelProjectModel());
  requiredElementsSet.clear();
  final Grid layoutGrid=(Grid)phaseDTO.getPhaseModel().getWidget();
  layoutGrid.setStyleName(""String_Node_Str"");
  view.getPanelSelectedPhase().add(layoutGrid);
  final DispatchQueue queue=new DispatchQueue(dispatch,true){
    @Override protected void onComplete(){
      injector.getProjectDashboardPresenter().getView().layoutView();
      view.layout();
      Profiler.INSTANCE.endScenario(Scenario.OPEN_PROJECT);
    }
  }
;
  final ProjectDTO project=getCurrentProject();
  computationTriggerManager.prepareForProject(project);
  for (  final LayoutGroupDTO groupDTO : phaseDTO.getPhaseModel().getLayout().getGroups()) {
    if (!groupDTO.getHasIterations()) {
      FieldSet fieldSet=createGroupLayoutFieldSet(getCurrentProject(),groupDTO,queue,null,null,null);
      fieldSet.setHeadingHtml(groupDTO.getTitle());
      fieldSet.setCollapsible(true);
      fieldSet.setBorders(true);
      layoutGrid.setWidget(groupDTO.getRow(),groupDTO.getColumn(),fieldSet);
      continue;
    }
    final FieldSet fieldSet=(FieldSet)groupDTO.getWidget();
    layoutGrid.setWidget(groupDTO.getRow(),groupDTO.getColumn(),fieldSet);
    final IterableGroupPanel tabPanel=Forms.iterableGroupPanel(dispatch,groupDTO,getCurrentProject(),ProfileUtils.isGranted(auth(),GlobalPermissionEnum.CREATE_ITERATIONS) && getCurrentProject().getCurrentAmendment() == null);
    tabPanel.setDelegate(this);
    fieldSet.add(tabPanel);
    tabPanel.setAutoHeight(true);
    tabPanel.setAutoWidth(true);
    tabPanel.setTabScroll(true);
    tabPanel.addStyleName(""String_Node_Str"");
    tabPanel.setBorders(true);
    tabPanel.setBodyBorder(false);
    Integer amendmentId;
    if (getCurrentProject().getCurrentAmendment() != null) {
      amendmentId=getCurrentProject().getCurrentAmendment().getId();
    }
 else {
      amendmentId=-1;
    }
    GetLayoutGroupIterations getIterations=new GetLayoutGroupIterations(groupDTO.getId(),getCurrentProject().getId(),amendmentId);
    queue.add(getIterations,new CommandResultHandler<ListResult<LayoutGroupIterationDTO>>(){
      @Override public void onCommandFailure(      final Throwable throwable){
        if (Log.isErrorEnabled()) {
          Log.error(""String_Node_Str"",throwable);
        }
        throw new RuntimeException(throwable);
      }
      @Override protected void onCommandSuccess(      ListResult<LayoutGroupIterationDTO> result){
        DispatchQueue iterationsQueue=new DispatchQueue(dispatch,true);
        for (        final LayoutGroupIterationDTO iteration : result.getList()) {
          final IterableGroupItem tab=new IterableGroupItem(tabPanel,iteration.getId(),iteration.getName());
          tabPanel.addIterationTab(tab);
          Layout tabLayout=Layouts.fitLayout();
          tab.setLayout(tabLayout);
          FieldSet tabSet=createGroupLayoutFieldSet(getCurrentProject(),groupDTO,iterationsQueue,iteration == null ? null : iteration.getId(),tabPanel,tab);
          tab.add(tabSet);
        }
        iterationsQueue.start();
        if (tabPanel.getItemCount() > 0) {
          tabPanel.setSelection(tabPanel.getItem(0));
        }
      }
    }
,new LoadingMask(view.getTabPanelPhases()));
    fieldSet.layout();
  }
  queue.start();
}",0.9962155813650008
35409,"@Override public FieldSet createGroupLayoutFieldSet(FlexibleElementContainer container,final LayoutGroupDTO groupLayout,DispatchQueue queue,final Integer iterationId,final IterableGroupPanel tabPanel,final IterableGroupItem tabItem){
  final ProjectDTO project=(ProjectDTO)container;
  final FieldSet fieldSet=(FieldSet)groupLayout.getWidget();
  if (ClientUtils.isEmpty(groupLayout.getConstraints())) {
    return fieldSet;
  }
  for (  final LayoutConstraintDTO constraintDTO : groupLayout.getConstraints()) {
    final FlexibleElementDTO elementDTO=constraintDTO.getFlexibleElementDTO();
    if (elementDTO.isDisabled()) {
      continue;
    }
    final Integer amendmentId;
    if (project.getCurrentAmendment() != null) {
      amendmentId=project.getCurrentAmendment().getId();
    }
 else {
      amendmentId=null;
    }
    GetValue getValue;
    getValue=new GetValue(project.getId(),elementDTO.getId(),elementDTO.getEntityName(),amendmentId,iterationId);
    queue.add(getValue,new CommandResultHandler<ValueResult>(){
      @Override public void onCommandFailure(      final Throwable throwable){
        if (Log.isErrorEnabled()) {
          Log.error(""String_Node_Str"",throwable);
        }
        throw new RuntimeException(throwable);
      }
      @Override public void onCommandSuccess(      final ValueResult valueResult){
        if (Log.isDebugEnabled()) {
          Log.debug(""String_Node_Str"" + valueResult);
        }
        elementDTO.setService(dispatch);
        elementDTO.setAuthenticationProvider(injector.getAuthenticationProvider());
        elementDTO.setEventBus(eventBus);
        elementDTO.setCache(injector.getClientCache());
        elementDTO.setCurrentContainerDTO(project);
        elementDTO.setTransfertManager(injector.getTransfertManager());
        elementDTO.assignValue(valueResult);
        elementDTO.setTabPanel(tabPanel);
        final ProjectPresenter projectPresenter=injector.getProjectPresenter();
        elementDTO.init();
        final Component elementComponent=elementDTO.getElementComponent(valueResult);
        if (elementDTO.getAmendable() && projectPresenter.projectIsLocked() && projectPresenter.canUnlockProject()&& !ProfileUtils.isGranted(auth(),GlobalPermissionEnum.MODIFY_LOCKED_CONTENT)) {
          projectPresenter.addUnlockProjectPopup(elementDTO,elementComponent,new LoadingMask(view.getTabPanelPhases()));
        }
        final FormData formData;
        if (elementDTO.getPreferredWidth() == 0) {
          formData=new FormData(""String_Node_Str"");
        }
 else {
          formData=new FormData(elementDTO.getPreferredWidth(),-1);
        }
        if (elementComponent != null) {
          fieldSet.add(elementComponent,formData);
        }
        fieldSet.layout();
        computationTriggerManager.listenToValueChangesOfElement(elementDTO,elementComponent,valueChanges);
        elementDTO.addValueHandler(new ValueHandler(){
          @Override public void onValueChange(          final ValueEvent event){
            if (tabPanel != null) {
              event.setIterationId(tabPanel.getCurrentIterationId());
            }
            valueChanges.add(event);
            if (!getCurrentDisplayedPhase().isEnded()) {
              refreshSaveButtonState();
            }
          }
        }
);
        if (elementDTO.getValidates()) {
          elementDTO.addRequiredValueHandler(new RequiredValueHandler(){
            @Override public void onRequiredValueChange(            RequiredValueEvent event){
              final Integer iterationId=tabPanel != null ? tabPanel.getCurrentIterationId() : null;
              currentPhaseRequiredElements.putActual(iterationId,elementDTO.getId(),event.isValueOn());
              if (isCurrentPhase(getCurrentProject().getCurrentPhase())) {
                activePhaseRequiredElements.putActual(iterationId,elementDTO.getId(),event.isValueOn());
              }
              if (event.isImmediate()) {
                view.getButtonSavePhase().fireEvent(Events.OnClick);
              }
              elementDTO.setFilledIn(currentPhaseRequiredElements.isActuallyTrue(elementDTO.getId()));
              view.getGridRequiredElements().getStore().update(elementDTO);
              if (iterationId != null) {
                elementDTO.getTabPanel().setElementValidity(elementDTO,event.isValueOn());
              }
              refreshRequiredElementContentPanelHeader();
            }
          }
);
          if (tabItem != null) {
            tabItem.setElementValidity(elementDTO,elementDTO.isCorrectRequiredValue(valueResult));
            tabItem.refreshTitle();
          }
          elementDTO.setGroup(groupLayout);
          elementDTO.setConstraint(constraintDTO);
          requiredElementsSet.add(elementDTO);
          view.getGridRequiredElements().getStore().removeAll();
          view.getGridRequiredElements().getStore().add(sortRequiredElements(new ArrayList<FlexibleElementDTO>(requiredElementsSet)));
          refreshRequiredElementContentPanelHeader();
          currentPhaseRequiredElements.putSaved(iterationId,elementDTO.getId(),elementDTO.isFilledIn());
          if (isCurrentPhase(getCurrentProject().getCurrentPhase())) {
            activePhaseRequiredElements.putSaved(iterationId,elementDTO.getId(),elementDTO.isFilledIn());
          }
        }
      }
    }
,new LoadingMask(view.getTabPanelPhases()));
  }
  fieldSet.setCollapsible(false);
  fieldSet.setAutoHeight(true);
  fieldSet.setBorders(false);
  fieldSet.setHeadingHtml(""String_Node_Str"");
  return fieldSet;
}","@Override public FieldSet createGroupLayoutFieldSet(FlexibleElementContainer container,final LayoutGroupDTO groupLayout,DispatchQueue queue,final Integer iterationId,final IterableGroupPanel tabPanel,final IterableGroupItem tabItem){
  final ProjectDTO project=(ProjectDTO)container;
  final FieldSet fieldSet=(FieldSet)groupLayout.getWidget();
  if (ClientUtils.isEmpty(groupLayout.getConstraints())) {
    return fieldSet;
  }
  for (  final LayoutConstraintDTO constraintDTO : groupLayout.getConstraints()) {
    final FlexibleElementDTO elementDTO=constraintDTO.getFlexibleElementDTO();
    if (elementDTO.isDisabled()) {
      continue;
    }
    final Integer amendmentId;
    if (project.getCurrentAmendment() != null) {
      amendmentId=project.getCurrentAmendment().getId();
    }
 else {
      amendmentId=null;
    }
    GetValue getValue;
    getValue=new GetValue(project.getId(),elementDTO.getId(),elementDTO.getEntityName(),amendmentId,iterationId);
    addPhaseCounter();
    queue.add(getValue,new CommandResultHandler<ValueResult>(){
      @Override public void onCommandFailure(      final Throwable throwable){
        removePhaseCounter();
        if (Log.isErrorEnabled()) {
          Log.error(""String_Node_Str"",throwable);
        }
        throw new RuntimeException(throwable);
      }
      @Override public void onCommandSuccess(      final ValueResult valueResult){
        if (Log.isDebugEnabled()) {
          Log.debug(""String_Node_Str"" + valueResult);
        }
        elementDTO.setService(dispatch);
        elementDTO.setAuthenticationProvider(injector.getAuthenticationProvider());
        elementDTO.setEventBus(eventBus);
        elementDTO.setCache(injector.getClientCache());
        elementDTO.setCurrentContainerDTO(project);
        elementDTO.setTransfertManager(injector.getTransfertManager());
        elementDTO.assignValue(valueResult);
        elementDTO.setTabPanel(tabPanel);
        final ProjectPresenter projectPresenter=injector.getProjectPresenter();
        elementDTO.init();
        final Component elementComponent=elementDTO.getElementComponent(valueResult);
        if (elementDTO.getAmendable() && projectPresenter.projectIsLocked() && projectPresenter.canUnlockProject()&& !ProfileUtils.isGranted(auth(),GlobalPermissionEnum.MODIFY_LOCKED_CONTENT)) {
          projectPresenter.addUnlockProjectPopup(elementDTO,elementComponent,new LoadingMask(view.getTabPanelPhases()));
        }
        final FormData formData;
        if (elementDTO.getPreferredWidth() == 0) {
          formData=new FormData(""String_Node_Str"");
        }
 else {
          formData=new FormData(elementDTO.getPreferredWidth(),-1);
        }
        if (elementComponent != null) {
          fieldSet.add(elementComponent,formData);
        }
        fieldSet.layout();
        computationTriggerManager.listenToValueChangesOfElement(elementDTO,elementComponent,valueChanges);
        elementDTO.addValueHandler(new ValueHandler(){
          @Override public void onValueChange(          final ValueEvent event){
            if (tabPanel != null) {
              event.setIterationId(tabPanel.getCurrentIterationId());
            }
            valueChanges.add(event);
            if (!getCurrentDisplayedPhase().isEnded()) {
              refreshSaveButtonState();
            }
          }
        }
);
        if (elementDTO.getValidates()) {
          elementDTO.addRequiredValueHandler(new RequiredValueHandler(){
            @Override public void onRequiredValueChange(            RequiredValueEvent event){
              final Integer iterationId=tabPanel != null ? tabPanel.getCurrentIterationId() : null;
              currentPhaseRequiredElements.putActual(iterationId,elementDTO.getId(),event.isValueOn());
              if (isCurrentPhase(getCurrentProject().getCurrentPhase())) {
                activePhaseRequiredElements.putActual(iterationId,elementDTO.getId(),event.isValueOn());
              }
              if (event.isImmediate()) {
                view.getButtonSavePhase().fireEvent(Events.OnClick);
              }
              elementDTO.setFilledIn(currentPhaseRequiredElements.isActuallyTrue(elementDTO.getId()));
              view.getGridRequiredElements().getStore().update(elementDTO);
              if (iterationId != null) {
                elementDTO.getTabPanel().setElementValidity(elementDTO,event.isValueOn());
              }
              refreshRequiredElementContentPanelHeader();
            }
          }
);
          if (tabItem != null) {
            tabItem.setElementValidity(elementDTO,elementDTO.isCorrectRequiredValue(valueResult));
            tabItem.refreshTitle();
          }
          elementDTO.setGroup(groupLayout);
          elementDTO.setConstraint(constraintDTO);
          requiredElementsSet.add(elementDTO);
          view.getGridRequiredElements().getStore().removeAll();
          view.getGridRequiredElements().getStore().add(sortRequiredElements(new ArrayList<FlexibleElementDTO>(requiredElementsSet)));
          refreshRequiredElementContentPanelHeader();
          currentPhaseRequiredElements.putSaved(iterationId,elementDTO.getId(),elementDTO.isFilledIn());
          if (isCurrentPhase(getCurrentProject().getCurrentPhase())) {
            activePhaseRequiredElements.putSaved(iterationId,elementDTO.getId(),elementDTO.isFilledIn());
          }
        }
        removePhaseCounter();
      }
    }
,new LoadingMask(view.getTabPanelPhases()));
  }
  fieldSet.setCollapsible(false);
  fieldSet.setAutoHeight(true);
  fieldSet.setBorders(false);
  fieldSet.setHeadingHtml(""String_Node_Str"");
  return fieldSet;
}",0.992572706935123
35410,"/** 
 * Gets a flexible element value from the database.
 * @param cmd {@link GetValue} command containing the flexible element class, its id, and the project id
 * @return a {@link ValueResult} object containing the value of the flexible element or containing {@code null} ifthere is no value defined for this element.
 * @throws org.sigmah.shared.dispatch.CommandException
 */
@Override public ValueResult execute(final GetValue cmd,final UserExecutionContext context) throws CommandException {
  LOG.debug(""String_Node_Str"",cmd);
  final ValueResult valueResult=new ValueResult();
  String historyValue=null;
  if (cmd.getAmendmentId() != null) {
    final TypedQuery<Amendment> amedmentQuery=em().createQuery(""String_Node_Str"",Amendment.class);
    amedmentQuery.setParameter(""String_Node_Str"",cmd.getAmendmentId());
    final Amendment amendment=amedmentQuery.getSingleResult();
    final List<HistoryToken> tokens=amendment.getValues();
    if (tokens != null) {
      for (      final HistoryToken token : tokens) {
        if (token.getElementId().equals(cmd.getElementId()) && token.getLayoutGroupIterationId().equals(cmd.getIterationId())) {
          historyValue=token.getValue();
        }
      }
    }
  }
  final String valueFromDatabase;
  if (DefaultFlexibleElementDTO.ENTITY_NAME.equals(cmd.getElementEntityName())) {
    valueFromDatabase=findCurrentValueOfDefaultElement(cmd.getProjectId(),cmd.getElementId());
  }
 else   if (BudgetRatioElementDTO.ENTITY_NAME.equals(cmd.getElementEntityName())) {
    valueFromDatabase=findCurrentValueOfBudgetRatioElement(cmd.getProjectId(),cmd.getElementId());
  }
 else {
    valueFromDatabase=findCurrentValue(cmd.getProjectId(),cmd.getElementId(),cmd.getIterationId());
  }
  String valueAsString=valueFromDatabase;
  boolean isValueExisting=valueFromDatabase != null;
  if (historyValue != null) {
    valueAsString=historyValue;
    isValueExisting=true;
    valueResult.setAmendment(true);
  }
  if (!isValueExisting) {
    LOG.debug(""String_Node_Str"",cmd.getElementId());
    return valueResult;
  }
  Query query=null;
  String elementClassName=cmd.getElementEntityName();
  ListableValue dto=null;
  Boolean isList=null;
  if (elementClassName.equals(TripletsListElementDTO.ENTITY_NAME)) {
    LOG.debug(""String_Node_Str"");
    dto=new TripletValueDTO();
    isList=true;
    query=em().createQuery(""String_Node_Str"");
    query.setParameter(""String_Node_Str"",ValueResultUtils.splitValuesAsInteger(valueAsString));
  }
 else   if (elementClassName.equals(IndicatorsListElementDTO.ENTITY_NAME)) {
    LOG.debug(""String_Node_Str"");
    dto=new IndicatorsListValueDTO();
    isList=true;
    query=em().createQuery(""String_Node_Str"");
    query.setParameter(""String_Node_Str"",Integer.valueOf(valueAsString));
  }
 else   if (elementClassName.equals(BudgetDistributionElementDTO.ENTITY_NAME)) {
    LOG.debug(""String_Node_Str"");
    dto=new BudgetPartsListValueDTO();
    isList=true;
    query=em().createQuery(""String_Node_Str"");
    query.setParameter(""String_Node_Str"",Integer.valueOf(valueAsString));
  }
 else   if (elementClassName.equals(FilesListElementDTO.ENTITY_NAME)) {
    LOG.debug(""String_Node_Str"");
    dto=new FileDTO();
    isList=true;
    query=em().createQuery(""String_Node_Str"");
    query.setParameter(""String_Node_Str"",ValueResultUtils.splitValuesAsInteger(valueAsString));
  }
 else   if (elementClassName.equals(ReportListElementDTO.ENTITY_NAME)) {
    LOG.debug(""String_Node_Str"");
    dto=new ReportReference();
    isList=true;
    query=em().createQuery(""String_Node_Str"");
    query.setParameter(""String_Node_Str"",ValueResultUtils.splitValuesAsInteger(valueAsString));
  }
 else   if (!(elementClassName.equals(MessageElementDTO.ENTITY_NAME))) {
    LOG.debug(""String_Node_Str"");
    dto=null;
    isList=false;
  }
  if (isList == null) {
    return valueResult;
  }
  if (isList) {
    LOG.debug(""String_Node_Str"",cmd.getElementId());
    @SuppressWarnings(""String_Node_Str"") final List<Object> objectsList=query.getResultList();
    final List<ListableValue> serializablesList=new ArrayList<>();
    for (    Object o : objectsList) {
      serializablesList.add(mapper().map(o,dto));
    }
    if (elementClassName.equals(FilesListElementDTO.ENTITY_NAME)) {
      for (      final ListableValue value : serializablesList) {
        if (value instanceof FileDTO) {
          final FileDTO file=(FileDTO)value;
          for (          final FileVersionDTO version : file.getVersions()) {
            version.setAvailable(fileStorageProvider.exists(version.getPath()));
          }
        }
      }
    }
    valueResult.setValuesObject(serializablesList);
  }
 else {
    LOG.debug(""String_Node_Str"",cmd.getElementId());
    valueResult.setValueObject(valueAsString);
  }
  LOG.debug(""String_Node_Str"",valueResult);
  return valueResult;
}","/** 
 * Gets a flexible element value from the database.
 * @param cmd {@link GetValue} command containing the flexible element class, its id, and the project id
 * @return a {@link ValueResult} object containing the value of the flexible element or containing {@code null} ifthere is no value defined for this element.
 * @throws org.sigmah.shared.dispatch.CommandException
 */
@Override public ValueResult execute(final GetValue cmd,final UserExecutionContext context) throws CommandException {
  LOG.debug(""String_Node_Str"",cmd);
  final ValueResult valueResult=new ValueResult();
  String historyValue=null;
  if (cmd.getAmendmentId() != null) {
    final TypedQuery<Amendment> amedmentQuery=em().createQuery(""String_Node_Str"",Amendment.class);
    amedmentQuery.setParameter(""String_Node_Str"",cmd.getAmendmentId());
    final Amendment amendment=amedmentQuery.getSingleResult();
    final List<HistoryToken> tokens=amendment.getValues();
    if (tokens != null) {
      for (      final HistoryToken token : tokens) {
        if (token.getElementId().equals(cmd.getElementId()) && token.getLayoutGroupIterationId().equals(cmd.getIterationId())) {
          historyValue=token.getValue();
        }
      }
    }
  }
  final String valueFromDatabase;
  if (DefaultFlexibleElementDTO.ENTITY_NAME.equals(cmd.getElementEntityName())) {
    valueFromDatabase=findCurrentValueOfDefaultElement(cmd.getProjectId(),cmd.getElementId());
  }
 else   if (BudgetRatioElementDTO.ENTITY_NAME.equals(cmd.getElementEntityName())) {
    valueFromDatabase=findCurrentValueOfBudgetRatioElement(cmd.getProjectId(),cmd.getElementId());
  }
 else {
    valueFromDatabase=findCurrentValue(cmd.getProjectId(),cmd.getElementId(),cmd.getIterationId());
  }
  String valueAsString=valueFromDatabase;
  boolean isValueExisting=valueFromDatabase != null;
  if (historyValue != null) {
    valueAsString=historyValue;
    isValueExisting=true;
    valueResult.setAmendment(true);
  }
  if (!isValueExisting) {
    LOG.debug(""String_Node_Str"",cmd.getElementId());
    return valueResult;
  }
  Query query=null;
  String elementClassName=cmd.getElementEntityName();
  ListableValue dto=null;
  Boolean isList=null;
  if (elementClassName.equals(TripletsListElementDTO.ENTITY_NAME)) {
    LOG.debug(""String_Node_Str"");
    dto=new TripletValueDTO();
    isList=true;
    query=em().createQuery(""String_Node_Str"");
    query.setParameter(""String_Node_Str"",ValueResultUtils.splitValuesAsInteger(valueAsString));
  }
 else   if (elementClassName.equals(IndicatorsListElementDTO.ENTITY_NAME)) {
    LOG.debug(""String_Node_Str"");
    dto=new IndicatorsListValueDTO();
    isList=true;
    query=em().createQuery(""String_Node_Str"");
    query.setParameter(""String_Node_Str"",Integer.valueOf(valueAsString));
  }
 else   if (elementClassName.equals(BudgetDistributionElementDTO.ENTITY_NAME)) {
    LOG.debug(""String_Node_Str"");
    dto=new BudgetPartsListValueDTO();
    isList=true;
    query=em().createQuery(""String_Node_Str"");
    query.setParameter(""String_Node_Str"",Integer.valueOf(valueAsString));
  }
 else   if (elementClassName.equals(FilesListElementDTO.ENTITY_NAME)) {
    LOG.debug(""String_Node_Str"");
    dto=new FileDTO();
    isList=true;
    query=em().createQuery(""String_Node_Str"");
    query.setParameter(""String_Node_Str"",ValueResultUtils.splitValuesAsInteger(valueAsString));
  }
 else   if (elementClassName.equals(ReportListElementDTO.ENTITY_NAME)) {
    LOG.debug(""String_Node_Str"");
    dto=new ReportReference();
    isList=true;
    query=em().createQuery(""String_Node_Str"");
    query.setParameter(""String_Node_Str"",ValueResultUtils.splitValuesAsInteger(valueAsString));
  }
 else   if (!(elementClassName.equals(MessageElementDTO.ENTITY_NAME))) {
    LOG.debug(""String_Node_Str"");
    dto=null;
    isList=false;
  }
  if (isList == null) {
    return valueResult;
  }
  if (isList) {
    LOG.debug(""String_Node_Str"",cmd.getElementId());
    @SuppressWarnings(""String_Node_Str"") final List<Object> objectsList=query.getResultList();
    final List<ListableValue> serializablesList=new ArrayList<>();
    for (    Object o : objectsList) {
      serializablesList.add(mapper().map(o,dto.getClass()));
    }
    if (elementClassName.equals(FilesListElementDTO.ENTITY_NAME)) {
      for (      final ListableValue value : serializablesList) {
        if (value instanceof FileDTO) {
          final FileDTO file=(FileDTO)value;
          for (          final FileVersionDTO version : file.getVersions()) {
            version.setAvailable(fileStorageProvider.exists(version.getPath()));
          }
        }
      }
    }
    valueResult.setValuesObject(serializablesList);
  }
 else {
    LOG.debug(""String_Node_Str"",cmd.getElementId());
    valueResult.setValueObject(valueAsString);
  }
  LOG.debug(""String_Node_Str"",valueResult);
  return valueResult;
}",0.998864457520388
35411,"public void persistFlexibleElement(final PropertyMap changes,final Object model){
  if (changes.get(AdminUtil.PROP_FX_FLEXIBLE_ELEMENT) == null) {
    return;
  }
  EntityManager em=entityManagerProvider.get();
  final String name=changes.get(AdminUtil.PROP_FX_NAME);
  final String code=changes.get(AdminUtil.PROP_FX_CODE);
  final ElementTypeEnum type=changes.get(AdminUtil.PROP_FX_TYPE);
  final Boolean isCompulsory=changes.get(AdminUtil.PROP_FX_IS_COMPULSARY);
  final PrivacyGroupDTO pg=changes.get(AdminUtil.PROP_FX_PRIVACY_GROUP);
  final Boolean amend=changes.get(AdminUtil.PROP_FX_AMENDABLE);
  final Boolean exportable=changes.get(AdminUtil.PROP_FX_EXPORTABLE);
  final LayoutGroupDTO group=changes.get(AdminUtil.PROP_FX_GROUP);
  final Integer order=changes.get(AdminUtil.PROP_FX_ORDER_IN_GROUP);
  final Boolean inBanner=changes.get(AdminUtil.PROP_FX_IN_BANNER);
  final Integer posB;
  if (changes.get(AdminUtil.PROP_FX_POS_IN_BANNER) instanceof Integer) {
    posB=((Integer)changes.get(AdminUtil.PROP_FX_POS_IN_BANNER)) - 1;
  }
 else {
    posB=null;
  }
  final Map<String,Object> oldLayoutFields=(Map<String,Object>)changes.get(AdminUtil.PROP_FX_OLD_FIELDS);
  final LayoutConstraintDTO oldLayoutConstraintDTO=(LayoutConstraintDTO)oldLayoutFields.get(AdminUtil.PROP_FX_LC);
  final LayoutConstraintDTO oldBannerLayoutConstraintDTO=(LayoutConstraintDTO)oldLayoutFields.get(AdminUtil.PROP_FX_LC_BANNER);
  final ElementTypeEnum oldType=(ElementTypeEnum)oldLayoutFields.get(AdminUtil.PROP_FX_TYPE);
  final Integer oldOrder=(Integer)oldLayoutFields.get(AdminUtil.PROP_FX_ORDER_IN_GROUP);
  final Character textType=changes.get(AdminUtil.PROP_FX_TEXT_TYPE);
  final Number maxLimit=changes.get(AdminUtil.PROP_FX_MAX_LIMIT);
  final Number minLimit=changes.get(AdminUtil.PROP_FX_MIN_LIMIT);
  final Integer length=changes.get(AdminUtil.PROP_FX_LENGTH);
  final Boolean decimal=changes.get(AdminUtil.PROP_FX_DECIMAL);
  final ReportModelDTO reportModel=changes.get(AdminUtil.PROP_FX_REPORT_MODEL);
  final Boolean isMultiple=changes.get(AdminUtil.PROP_FX_Q_MULTIPLE);
  final CategoryTypeDTO category=changes.get(AdminUtil.PROP_FX_Q_CATEGORY);
  final List<String> qChoices=changes.get(AdminUtil.PROP_FX_Q_CHOICES);
  Set<String> qChoicesDisabled=changes.get(AdminUtil.PROP_FX_Q_CHOICES_DISABLED);
  final List<BudgetSubFieldDTO> bSubFields=changes.get(AdminUtil.PROP_FX_B_BUDGETSUBFIELDS);
  final BudgetSubFieldDTO ratioDividend=changes.get(AdminUtil.PROP_FX_B_BUDGET_RATIO_DIVIDEND);
  final BudgetSubFieldDTO ratioDivisor=changes.get(AdminUtil.PROP_FX_B_BUDGET_RATIO_DIVISOR);
  final String computationRule=changes.get(AdminUtil.PROP_FX_COMPUTATION_RULE);
  final FlexibleElementDTO budgetSpent=changes.get(AdminUtil.PROP_BUDGET_SPENT);
  final FlexibleElementDTO budgetPlanned=changes.get(AdminUtil.PROP_BUDGET_PLANNED);
  Number contactListLimit=changes.get(AdminUtil.PROP_FX_CONTACT_LIST_LIMIT);
  boolean contactListIsMember=changes.get(AdminUtil.PROP_FX_CONTACT_LIST_IS_MEMBER);
  ContactModelType contactListType=changes.get(AdminUtil.PROP_FX_CONTACT_LIST_ALLOWED_TYPE);
  Set<Integer> contactListAllowedModelIds=changes.get(AdminUtil.PROP_FX_CONTACT_LIST_ALLOWED_MODEL_IDS);
  final FlexibleElementDTO flexibleEltDTO=changes.get(AdminUtil.PROP_FX_FLEXIBLE_ELEMENT);
  FlexibleElement flexibleElt=null;
  if (flexibleEltDTO.getId() != null && flexibleEltDTO.getId() > 0) {
    flexibleElt=em.find(FlexibleElement.class,flexibleEltDTO.getId());
  }
 else {
    flexibleElt=(FlexibleElement)createNewFlexibleElement(em,oldType,type,flexibleElt);
  }
  if (qChoicesDisabled == null) {
    qChoicesDisabled=Collections.emptySet();
  }
  LOG.debug(""String_Node_Str"",type,group,order,inBanner,posB,isCompulsory,pg,amend,exportable);
  LOG.debug(""String_Node_Str"",maxLimit,minLimit,textType,length,decimal,reportModel);
  Boolean basicChanges=false;
  if (flexibleElt != null) {
    if (name != null) {
      flexibleElt.setLabel(name);
      basicChanges=true;
    }
    if (code != null) {
      flexibleElt.setCode(code);
      basicChanges=true;
    }
    if (amend != null) {
      flexibleElt.setAmendable(amend);
      basicChanges=true;
    }
    if (exportable != null) {
      flexibleElt.setExportable(exportable);
      basicChanges=true;
    }
    if (isCompulsory != null) {
      flexibleElt.setValidates(isCompulsory);
      basicChanges=true;
    }
    if (pg != null) {
      PrivacyGroup pgToPersist=em.find(PrivacyGroup.class,pg.getId());
      if (pgToPersist != null) {
        flexibleElt.setPrivacyGroup(pgToPersist);
        basicChanges=true;
      }
    }
 else     if (changes.containsKey(AdminUtil.PROP_FX_PRIVACY_GROUP)) {
      flexibleElt.setPrivacyGroup(null);
      basicChanges=true;
    }
    if (basicChanges && flexibleElt.getId() != null)     flexibleElt=em.merge(flexibleElt);
 else     em.persist(flexibleElt);
  }
  if (group != null) {
    LayoutGroup parentLayoutGroup=em.find(LayoutGroup.class,group.getId());
    LayoutConstraint newLayoutConstraint=new LayoutConstraint();
    if (parentLayoutGroup != null) {
      newLayoutConstraint.setElement(flexibleElt);
      newLayoutConstraint.setParentLayoutGroup(parentLayoutGroup);
      if (oldOrder != null)       newLayoutConstraint.setSortOrder(oldOrder);
      if (order != null)       newLayoutConstraint.setSortOrder(order);
      if (order == null && oldOrder == null)       newLayoutConstraint.setSortOrder(new Integer(parentLayoutGroup.getConstraints().size()));
      if (oldLayoutConstraintDTO != null) {
        newLayoutConstraint.setId(oldLayoutConstraintDTO.getId());
        newLayoutConstraint=em.merge(newLayoutConstraint);
      }
 else {
        em.persist(newLayoutConstraint);
      }
    }
  }
  if (inBanner != null) {
    if (inBanner) {
      if (model instanceof ProjectModel || model instanceof OrgUnitModel || model instanceof ContactModel) {
        changeBanner(em,posB,model,flexibleElt);
      }
    }
 else {
      if (oldBannerLayoutConstraintDTO != null) {
        LayoutConstraint oldBannerLayoutConstraint=mapper.map(oldBannerLayoutConstraintDTO,new LayoutConstraint());
        oldBannerLayoutConstraint=em.find(LayoutConstraint.class,oldBannerLayoutConstraint.getId());
        em.remove(oldBannerLayoutConstraint);
      }
    }
  }
 else {
    if (posB != null) {
      if (model instanceof ProjectModel || model instanceof OrgUnitModel || model instanceof ContactModel) {
        LayoutConstraint oldBannerLayoutConstraint=mapper.map(oldBannerLayoutConstraintDTO,new LayoutConstraint());
        changePositionInBanner(em,posB,model,flexibleElt,oldBannerLayoutConstraint);
      }
    }
  }
  if (oldType != null && type != null) {
    flexibleElt=(FlexibleElement)createNewFlexibleElement(em,oldType,type,flexibleElt);
    LOG.debug(""String_Node_Str"",flexibleElt.getClass());
  }
  em.flush();
  em.clear();
  flexibleElt=em.find(FlexibleElement.class,flexibleElt.getId());
  Boolean specificChanges=false;
  final LogicalElementType logicalElementType=ServerComputations.logicalElementTypeOf(flexibleElt);
  if ((ElementTypeEnum.DEFAULT.equals(oldType) && type == null) && DefaultFlexibleElementType.BUDGET == logicalElementType.toDefaultFlexibleElementType()) {
    List<BudgetSubField> budgetFieldsToDelete=new ArrayList<BudgetSubField>();
    BudgetElement budgetElement=(BudgetElement)flexibleElt;
    budgetFieldsToDelete.addAll(budgetElement.getBudgetSubFields());
    budgetElement.getBudgetSubFields().clear();
    for (    BudgetSubFieldDTO budgetFieldDTO : bSubFields) {
      if (budgetFieldDTO.getId() != null && budgetFieldDTO.getId() > 0) {
        BudgetSubField b=em.find(BudgetSubField.class,budgetFieldDTO.getId());
        if (b != null) {
          budgetFieldsToDelete.remove(b);
          b.setLabel(budgetFieldDTO.getLabel());
          b.setFieldOrder(budgetFieldDTO.getFieldOrder());
          b=em.merge(b);
          budgetElement.getBudgetSubFields().add(b);
        }
      }
 else {
        BudgetSubField budgetSubFieldToPersist=new BudgetSubField();
        budgetSubFieldToPersist.setLabel(budgetFieldDTO.getLabel());
        budgetSubFieldToPersist.setFieldOrder(budgetFieldDTO.getFieldOrder());
        budgetSubFieldToPersist.setBudgetElement(budgetElement);
        em.persist(budgetSubFieldToPersist);
        budgetElement.getBudgetSubFields().add(budgetSubFieldToPersist);
      }
    }
    for (    BudgetSubField budgetFieldTODelete : budgetFieldsToDelete) {
      budgetFieldTODelete.setBudgetElement(null);
      em.remove(budgetFieldTODelete);
    }
    if (ratioDividend != null) {
      BudgetSubField budgetRatio=new BudgetSubField();
      budgetRatio.setId(ratioDividend.getId());
      budgetElement.setRatioDividend(budgetRatio);
    }
    if (ratioDivisor != null) {
      BudgetSubField budgetRatio=new BudgetSubField();
      budgetRatio.setId(ratioDivisor.getId());
      budgetElement.setRatioDivisor(budgetRatio);
    }
    flexibleElt=em.merge(budgetElement);
  }
 else   if ((ElementTypeEnum.DEFAULT.equals(oldType) && type == null) && DefaultFlexibleElementType.BUDGET_RATIO == logicalElementType.toDefaultFlexibleElementType()) {
    BudgetRatioElement budgetRatioElement=(BudgetRatioElement)flexibleElt;
    if (budgetSpent != null) {
      FlexibleElement flexibleElement=new DefaultFlexibleElement();
      flexibleElement.setId(budgetSpent.getId());
      budgetRatioElement.setSpentBudget(flexibleElement);
    }
    if (budgetPlanned != null) {
      FlexibleElement flexibleElement=new DefaultFlexibleElement();
      flexibleElement.setId(budgetPlanned.getId());
      budgetRatioElement.setPlannedBudget(flexibleElement);
    }
    flexibleElt=em.merge(budgetRatioElement);
  }
 else   if (ElementTypeEnum.FILES_LIST.equals(type) || (ElementTypeEnum.FILES_LIST.equals(oldType) && type == null)) {
    FilesListElement filesListElement=(FilesListElement)flexibleElt;
    if (filesListElement != null) {
      if (maxLimit != null) {
        filesListElement.setLimit(maxLimit.intValue());
        specificChanges=true;
      }
      if (specificChanges) {
        filesListElement=em.merge(filesListElement);
        flexibleElt=filesListElement;
      }
    }
  }
 else   if (ElementTypeEnum.TEXT_AREA.equals(type) || (ElementTypeEnum.TEXT_AREA.equals(oldType) && type == null)) {
    TextAreaElement textAreaElement=(TextAreaElement)flexibleElt;
    if (textAreaElement != null) {
      if (maxLimit != null) {
        ((TextAreaElement)flexibleElt).setMaxValue(maxLimit.longValue());
        specificChanges=true;
      }
      if (minLimit != null) {
        ((TextAreaElement)flexibleElt).setMinValue(minLimit.longValue());
        specificChanges=true;
      }
      if (length != null) {
        ((TextAreaElement)flexibleElt).setLength(length);
        specificChanges=true;
      }
      if (decimal != null) {
        ((TextAreaElement)flexibleElt).setIsDecimal(decimal);
        specificChanges=true;
      }
      if (textType != null) {
        ((TextAreaElement)flexibleElt).setType(textType);
        specificChanges=true;
      }
      if (specificChanges) {
        flexibleElt=em.merge((TextAreaElement)flexibleElt);
      }
    }
  }
 else   if (ElementTypeEnum.REPORT.equals(type) || (ElementTypeEnum.REPORT.equals(oldType) && type == null)) {
    ReportElement reportElement=em.find(ReportElement.class,flexibleElt.getId());
    if (reportElement != null) {
      if (reportModel != null && reportModel.getName() != null) {
        ProjectReportModel reportId=findReportModel(em,reportModel.getName());
        ((ReportElement)flexibleElt).setModel(reportId);
        specificChanges=true;
      }
      if (specificChanges) {
        flexibleElt=em.merge((ReportElement)flexibleElt);
      }
    }
  }
 else   if (ElementTypeEnum.REPORT_LIST.equals(type) || (ElementTypeEnum.REPORT_LIST.equals(oldType) && type == null)) {
    ReportListElement reportElement=em.find(ReportListElement.class,flexibleElt.getId());
    if (reportElement != null) {
      if (reportModel != null && reportModel.getName() != null) {
        ProjectReportModel reportId=findReportModel(em,reportModel.getName());
        ((ReportListElement)flexibleElt).setModel(reportId);
        specificChanges=true;
      }
      if (specificChanges) {
        flexibleElt=em.merge((ReportListElement)flexibleElt);
      }
    }
  }
 else   if (ElementTypeEnum.QUESTION.equals(type) || (ElementTypeEnum.QUESTION.equals(oldType) && type == null)) {
    QuestionElement questionElement=em.find(QuestionElement.class,flexibleElt.getId());
    if (questionElement != null) {
      if (isMultiple != null) {
        ((QuestionElement)flexibleElt).setMultiple(isMultiple);
        specificChanges=true;
      }
      if (category != null) {
        for (        QuestionChoiceElement choiceElt : ((QuestionElement)flexibleElt).getChoices()) {
          em.remove(choiceElt);
        }
        CategoryType categoryType=em.find(CategoryType.class,category.getId());
        if (categoryType != null) {
          ((QuestionElement)flexibleElt).setCategoryType(categoryType);
          List<QuestionChoiceElement> choices=new ArrayList<QuestionChoiceElement>();
          int i=0;
          for (          CategoryElement catElt : categoryType.getElements()) {
            QuestionChoiceElement qChoice=new QuestionChoiceElement();
            qChoice.setLabel(""String_Node_Str"");
            qChoice.setCategoryElement(catElt);
            qChoice.setParentQuestion(questionElement);
            qChoice.setSortOrder(i++);
            choices.add(qChoice);
          }
          ((QuestionElement)flexibleElt).setChoices(choices);
          specificChanges=true;
        }
      }
 else       if (qChoices != null && qChoices.size() > 0) {
        for (        QuestionChoiceElement choiceElt : ((QuestionElement)flexibleElt).getChoices()) {
          em.remove(choiceElt);
        }
        ((QuestionElement)flexibleElt).setCategoryType(null);
        List<QuestionChoiceElement> choices=new ArrayList<QuestionChoiceElement>();
        int i=0;
        for (        String choiceLabel : qChoices) {
          QuestionChoiceElement qChoice=new QuestionChoiceElement();
          qChoice.setLabel(choiceLabel);
          qChoice.setParentQuestion(questionElement);
          qChoice.setSortOrder(i++);
          qChoice.setDisabled(qChoicesDisabled.contains(choiceLabel));
          choices.add(qChoice);
        }
        ((QuestionElement)flexibleElt).setChoices(choices);
        specificChanges=true;
      }
      if (specificChanges) {
        flexibleElt=em.merge((QuestionElement)flexibleElt);
      }
    }
  }
 else   if (type == ElementTypeEnum.COMPUTATION || (type == null && oldType == ElementTypeEnum.COMPUTATION)) {
    ComputationElement computationElement=(ComputationElement)flexibleElt;
    if (computationElement != null) {
      if (computationRule != null) {
        final String rule=resolveComputationRule(em,dependencyResolver,model,computationRule);
        computationElement.setRule(rule);
        specificChanges=true;
        removeAllValuesForElement(computationElement,em);
      }
      if (minLimit != null) {
        computationElement.setMinimumValue(minLimit.toString());
        specificChanges=true;
      }
      if (maxLimit != null) {
        computationElement.setMaximumValue(maxLimit.toString());
        specificChanges=true;
      }
      if (specificChanges) {
        flexibleElt=em.merge(computationElement);
      }
    }
  }
 else   if (type == ElementTypeEnum.CONTACT_LIST || (type == null && oldType == ElementTypeEnum.CONTACT_LIST)) {
    ContactListElement contactListElement=(ContactListElement)flexibleElt;
    if (contactListElement != null) {
      if ((contactListElement.getLimit() > 0 && contactListLimit == null) || (contactListLimit != null && contactListElement.getLimit() != contactListLimit.intValue())) {
        contactListElement.setLimit(contactListLimit == null ? 0 : contactListLimit.intValue());
        specificChanges=true;
      }
      if (contactListElement.getAllowedType() != contactListType) {
        contactListElement.setAllowedType(contactListType);
        specificChanges=true;
      }
      if (contactListElement.isMember() != contactListIsMember) {
        contactListElement.setMember(contactListIsMember);
        specificChanges=true;
      }
      Set<Integer> modelsToCompare=new HashSet<>(contactListAllowedModelIds);
      boolean contactModelsModified=false;
      for (      ContactModel contactModel : contactListElement.getAllowedModels()) {
        if (!modelsToCompare.remove(contactModel.getId())) {
          contactModelsModified=true;
          break;
        }
      }
      if (!modelsToCompare.isEmpty()) {
        contactModelsModified=true;
      }
      if (contactModelsModified) {
        contactListElement.setAllowedModels(contactModelDAO.findByIds(contactListAllowedModelIds));
        specificChanges=true;
      }
      if (specificChanges) {
        flexibleElt=em.merge(contactListElement);
      }
    }
  }
  em.flush();
  em.clear();
}","public void persistFlexibleElement(final PropertyMap changes,final Object model){
  if (changes.get(AdminUtil.PROP_FX_FLEXIBLE_ELEMENT) == null) {
    return;
  }
  EntityManager em=entityManagerProvider.get();
  final String name=changes.get(AdminUtil.PROP_FX_NAME);
  final String code=changes.get(AdminUtil.PROP_FX_CODE);
  final ElementTypeEnum type=changes.get(AdminUtil.PROP_FX_TYPE);
  final Boolean isCompulsory=changes.get(AdminUtil.PROP_FX_IS_COMPULSARY);
  final PrivacyGroupDTO pg=changes.get(AdminUtil.PROP_FX_PRIVACY_GROUP);
  final Boolean amend=changes.get(AdminUtil.PROP_FX_AMENDABLE);
  final Boolean exportable=changes.get(AdminUtil.PROP_FX_EXPORTABLE);
  final LayoutGroupDTO group=changes.get(AdminUtil.PROP_FX_GROUP);
  final Integer order=changes.get(AdminUtil.PROP_FX_ORDER_IN_GROUP);
  final Boolean inBanner=changes.get(AdminUtil.PROP_FX_IN_BANNER);
  final Integer posB;
  if (changes.get(AdminUtil.PROP_FX_POS_IN_BANNER) instanceof Integer) {
    posB=((Integer)changes.get(AdminUtil.PROP_FX_POS_IN_BANNER)) - 1;
  }
 else {
    posB=null;
  }
  final Map<String,Object> oldLayoutFields=(Map<String,Object>)changes.get(AdminUtil.PROP_FX_OLD_FIELDS);
  final LayoutConstraintDTO oldLayoutConstraintDTO=(LayoutConstraintDTO)oldLayoutFields.get(AdminUtil.PROP_FX_LC);
  final LayoutConstraintDTO oldBannerLayoutConstraintDTO=(LayoutConstraintDTO)oldLayoutFields.get(AdminUtil.PROP_FX_LC_BANNER);
  final ElementTypeEnum oldType=(ElementTypeEnum)oldLayoutFields.get(AdminUtil.PROP_FX_TYPE);
  final Integer oldOrder=(Integer)oldLayoutFields.get(AdminUtil.PROP_FX_ORDER_IN_GROUP);
  final Character textType=changes.get(AdminUtil.PROP_FX_TEXT_TYPE);
  final Number maxLimit=changes.get(AdminUtil.PROP_FX_MAX_LIMIT);
  final Number minLimit=changes.get(AdminUtil.PROP_FX_MIN_LIMIT);
  final Integer length=changes.get(AdminUtil.PROP_FX_LENGTH);
  final Boolean decimal=changes.get(AdminUtil.PROP_FX_DECIMAL);
  final ReportModelDTO reportModel=changes.get(AdminUtil.PROP_FX_REPORT_MODEL);
  final Boolean isMultiple=changes.get(AdminUtil.PROP_FX_Q_MULTIPLE);
  final CategoryTypeDTO category=changes.get(AdminUtil.PROP_FX_Q_CATEGORY);
  final List<String> qChoices=changes.get(AdminUtil.PROP_FX_Q_CHOICES);
  Set<String> qChoicesDisabled=changes.get(AdminUtil.PROP_FX_Q_CHOICES_DISABLED);
  final List<BudgetSubFieldDTO> bSubFields=changes.get(AdminUtil.PROP_FX_B_BUDGETSUBFIELDS);
  final BudgetSubFieldDTO ratioDividend=changes.get(AdminUtil.PROP_FX_B_BUDGET_RATIO_DIVIDEND);
  final BudgetSubFieldDTO ratioDivisor=changes.get(AdminUtil.PROP_FX_B_BUDGET_RATIO_DIVISOR);
  final String computationRule=changes.get(AdminUtil.PROP_FX_COMPUTATION_RULE);
  final FlexibleElementDTO budgetSpent=changes.get(AdminUtil.PROP_BUDGET_SPENT);
  final FlexibleElementDTO budgetPlanned=changes.get(AdminUtil.PROP_BUDGET_PLANNED);
  Number contactListLimit=changes.get(AdminUtil.PROP_FX_CONTACT_LIST_LIMIT);
  Boolean contactListIsMember=changes.get(AdminUtil.PROP_FX_CONTACT_LIST_IS_MEMBER);
  ContactModelType contactListType=changes.get(AdminUtil.PROP_FX_CONTACT_LIST_ALLOWED_TYPE);
  Set<Integer> contactListAllowedModelIds=changes.get(AdminUtil.PROP_FX_CONTACT_LIST_ALLOWED_MODEL_IDS);
  final FlexibleElementDTO flexibleEltDTO=changes.get(AdminUtil.PROP_FX_FLEXIBLE_ELEMENT);
  FlexibleElement flexibleElt=null;
  if (flexibleEltDTO.getId() != null && flexibleEltDTO.getId() > 0) {
    flexibleElt=em.find(FlexibleElement.class,flexibleEltDTO.getId());
  }
 else {
    flexibleElt=(FlexibleElement)createNewFlexibleElement(em,oldType,type,flexibleElt);
  }
  if (qChoicesDisabled == null) {
    qChoicesDisabled=Collections.emptySet();
  }
  LOG.debug(""String_Node_Str"",type,group,order,inBanner,posB,isCompulsory,pg,amend,exportable);
  LOG.debug(""String_Node_Str"",maxLimit,minLimit,textType,length,decimal,reportModel);
  Boolean basicChanges=false;
  if (flexibleElt != null) {
    if (name != null) {
      flexibleElt.setLabel(name);
      basicChanges=true;
    }
    if (code != null) {
      flexibleElt.setCode(code);
      basicChanges=true;
    }
    if (amend != null) {
      flexibleElt.setAmendable(amend);
      basicChanges=true;
    }
    if (exportable != null) {
      flexibleElt.setExportable(exportable);
      basicChanges=true;
    }
    if (isCompulsory != null) {
      flexibleElt.setValidates(isCompulsory);
      basicChanges=true;
    }
    if (pg != null) {
      PrivacyGroup pgToPersist=em.find(PrivacyGroup.class,pg.getId());
      if (pgToPersist != null) {
        flexibleElt.setPrivacyGroup(pgToPersist);
        basicChanges=true;
      }
    }
 else     if (changes.containsKey(AdminUtil.PROP_FX_PRIVACY_GROUP)) {
      flexibleElt.setPrivacyGroup(null);
      basicChanges=true;
    }
    if (basicChanges && flexibleElt.getId() != null)     flexibleElt=em.merge(flexibleElt);
 else     em.persist(flexibleElt);
  }
  if (group != null) {
    LayoutGroup parentLayoutGroup=em.find(LayoutGroup.class,group.getId());
    LayoutConstraint newLayoutConstraint=new LayoutConstraint();
    if (parentLayoutGroup != null) {
      newLayoutConstraint.setElement(flexibleElt);
      newLayoutConstraint.setParentLayoutGroup(parentLayoutGroup);
      if (oldOrder != null)       newLayoutConstraint.setSortOrder(oldOrder);
      if (order != null)       newLayoutConstraint.setSortOrder(order);
      if (order == null && oldOrder == null)       newLayoutConstraint.setSortOrder(new Integer(parentLayoutGroup.getConstraints().size()));
      if (oldLayoutConstraintDTO != null) {
        newLayoutConstraint.setId(oldLayoutConstraintDTO.getId());
        newLayoutConstraint=em.merge(newLayoutConstraint);
      }
 else {
        em.persist(newLayoutConstraint);
      }
    }
  }
  if (inBanner != null) {
    if (inBanner) {
      if (model instanceof ProjectModel || model instanceof OrgUnitModel || model instanceof ContactModel) {
        changeBanner(em,posB,model,flexibleElt);
      }
    }
 else {
      if (oldBannerLayoutConstraintDTO != null) {
        LayoutConstraint oldBannerLayoutConstraint=mapper.map(oldBannerLayoutConstraintDTO,new LayoutConstraint());
        oldBannerLayoutConstraint=em.find(LayoutConstraint.class,oldBannerLayoutConstraint.getId());
        em.remove(oldBannerLayoutConstraint);
      }
    }
  }
 else {
    if (posB != null) {
      if (model instanceof ProjectModel || model instanceof OrgUnitModel || model instanceof ContactModel) {
        LayoutConstraint oldBannerLayoutConstraint=mapper.map(oldBannerLayoutConstraintDTO,new LayoutConstraint());
        changePositionInBanner(em,posB,model,flexibleElt,oldBannerLayoutConstraint);
      }
    }
  }
  if (oldType != null && type != null) {
    flexibleElt=(FlexibleElement)createNewFlexibleElement(em,oldType,type,flexibleElt);
    LOG.debug(""String_Node_Str"",flexibleElt.getClass());
  }
  em.flush();
  em.clear();
  flexibleElt=em.find(FlexibleElement.class,flexibleElt.getId());
  Boolean specificChanges=false;
  final LogicalElementType logicalElementType=ServerComputations.logicalElementTypeOf(flexibleElt);
  if ((ElementTypeEnum.DEFAULT.equals(oldType) && type == null) && DefaultFlexibleElementType.BUDGET == logicalElementType.toDefaultFlexibleElementType()) {
    List<BudgetSubField> budgetFieldsToDelete=new ArrayList<BudgetSubField>();
    BudgetElement budgetElement=(BudgetElement)flexibleElt;
    budgetFieldsToDelete.addAll(budgetElement.getBudgetSubFields());
    budgetElement.getBudgetSubFields().clear();
    for (    BudgetSubFieldDTO budgetFieldDTO : bSubFields) {
      if (budgetFieldDTO.getId() != null && budgetFieldDTO.getId() > 0) {
        BudgetSubField b=em.find(BudgetSubField.class,budgetFieldDTO.getId());
        if (b != null) {
          budgetFieldsToDelete.remove(b);
          b.setLabel(budgetFieldDTO.getLabel());
          b.setFieldOrder(budgetFieldDTO.getFieldOrder());
          b=em.merge(b);
          budgetElement.getBudgetSubFields().add(b);
        }
      }
 else {
        BudgetSubField budgetSubFieldToPersist=new BudgetSubField();
        budgetSubFieldToPersist.setLabel(budgetFieldDTO.getLabel());
        budgetSubFieldToPersist.setFieldOrder(budgetFieldDTO.getFieldOrder());
        budgetSubFieldToPersist.setBudgetElement(budgetElement);
        em.persist(budgetSubFieldToPersist);
        budgetElement.getBudgetSubFields().add(budgetSubFieldToPersist);
      }
    }
    for (    BudgetSubField budgetFieldTODelete : budgetFieldsToDelete) {
      budgetFieldTODelete.setBudgetElement(null);
      em.remove(budgetFieldTODelete);
    }
    if (ratioDividend != null) {
      BudgetSubField budgetRatio=new BudgetSubField();
      budgetRatio.setId(ratioDividend.getId());
      budgetElement.setRatioDividend(budgetRatio);
    }
    if (ratioDivisor != null) {
      BudgetSubField budgetRatio=new BudgetSubField();
      budgetRatio.setId(ratioDivisor.getId());
      budgetElement.setRatioDivisor(budgetRatio);
    }
    flexibleElt=em.merge(budgetElement);
  }
 else   if ((ElementTypeEnum.DEFAULT.equals(oldType) && type == null) && DefaultFlexibleElementType.BUDGET_RATIO == logicalElementType.toDefaultFlexibleElementType()) {
    BudgetRatioElement budgetRatioElement=(BudgetRatioElement)flexibleElt;
    if (budgetSpent != null) {
      FlexibleElement flexibleElement=new DefaultFlexibleElement();
      flexibleElement.setId(budgetSpent.getId());
      budgetRatioElement.setSpentBudget(flexibleElement);
    }
    if (budgetPlanned != null) {
      FlexibleElement flexibleElement=new DefaultFlexibleElement();
      flexibleElement.setId(budgetPlanned.getId());
      budgetRatioElement.setPlannedBudget(flexibleElement);
    }
    flexibleElt=em.merge(budgetRatioElement);
  }
 else   if (ElementTypeEnum.FILES_LIST.equals(type) || (ElementTypeEnum.FILES_LIST.equals(oldType) && type == null)) {
    FilesListElement filesListElement=(FilesListElement)flexibleElt;
    if (filesListElement != null) {
      if (maxLimit != null) {
        filesListElement.setLimit(maxLimit.intValue());
        specificChanges=true;
      }
      if (specificChanges) {
        filesListElement=em.merge(filesListElement);
        flexibleElt=filesListElement;
      }
    }
  }
 else   if (ElementTypeEnum.TEXT_AREA.equals(type) || (ElementTypeEnum.TEXT_AREA.equals(oldType) && type == null)) {
    TextAreaElement textAreaElement=(TextAreaElement)flexibleElt;
    if (textAreaElement != null) {
      if (maxLimit != null) {
        ((TextAreaElement)flexibleElt).setMaxValue(maxLimit.longValue());
        specificChanges=true;
      }
      if (minLimit != null) {
        ((TextAreaElement)flexibleElt).setMinValue(minLimit.longValue());
        specificChanges=true;
      }
      if (length != null) {
        ((TextAreaElement)flexibleElt).setLength(length);
        specificChanges=true;
      }
      if (decimal != null) {
        ((TextAreaElement)flexibleElt).setIsDecimal(decimal);
        specificChanges=true;
      }
      if (textType != null) {
        ((TextAreaElement)flexibleElt).setType(textType);
        specificChanges=true;
      }
      if (specificChanges) {
        flexibleElt=em.merge((TextAreaElement)flexibleElt);
      }
    }
  }
 else   if (ElementTypeEnum.REPORT.equals(type) || (ElementTypeEnum.REPORT.equals(oldType) && type == null)) {
    ReportElement reportElement=em.find(ReportElement.class,flexibleElt.getId());
    if (reportElement != null) {
      if (reportModel != null && reportModel.getName() != null) {
        ProjectReportModel reportId=findReportModel(em,reportModel.getName());
        ((ReportElement)flexibleElt).setModel(reportId);
        specificChanges=true;
      }
      if (specificChanges) {
        flexibleElt=em.merge((ReportElement)flexibleElt);
      }
    }
  }
 else   if (ElementTypeEnum.REPORT_LIST.equals(type) || (ElementTypeEnum.REPORT_LIST.equals(oldType) && type == null)) {
    ReportListElement reportElement=em.find(ReportListElement.class,flexibleElt.getId());
    if (reportElement != null) {
      if (reportModel != null && reportModel.getName() != null) {
        ProjectReportModel reportId=findReportModel(em,reportModel.getName());
        ((ReportListElement)flexibleElt).setModel(reportId);
        specificChanges=true;
      }
      if (specificChanges) {
        flexibleElt=em.merge((ReportListElement)flexibleElt);
      }
    }
  }
 else   if (ElementTypeEnum.QUESTION.equals(type) || (ElementTypeEnum.QUESTION.equals(oldType) && type == null)) {
    QuestionElement questionElement=em.find(QuestionElement.class,flexibleElt.getId());
    if (questionElement != null) {
      if (isMultiple != null) {
        ((QuestionElement)flexibleElt).setMultiple(isMultiple);
        specificChanges=true;
      }
      if (category != null) {
        for (        QuestionChoiceElement choiceElt : ((QuestionElement)flexibleElt).getChoices()) {
          em.remove(choiceElt);
        }
        CategoryType categoryType=em.find(CategoryType.class,category.getId());
        if (categoryType != null) {
          ((QuestionElement)flexibleElt).setCategoryType(categoryType);
          List<QuestionChoiceElement> choices=new ArrayList<QuestionChoiceElement>();
          int i=0;
          for (          CategoryElement catElt : categoryType.getElements()) {
            QuestionChoiceElement qChoice=new QuestionChoiceElement();
            qChoice.setLabel(""String_Node_Str"");
            qChoice.setCategoryElement(catElt);
            qChoice.setParentQuestion(questionElement);
            qChoice.setSortOrder(i++);
            choices.add(qChoice);
          }
          ((QuestionElement)flexibleElt).setChoices(choices);
          specificChanges=true;
        }
      }
 else       if (qChoices != null && qChoices.size() > 0) {
        for (        QuestionChoiceElement choiceElt : ((QuestionElement)flexibleElt).getChoices()) {
          em.remove(choiceElt);
        }
        ((QuestionElement)flexibleElt).setCategoryType(null);
        List<QuestionChoiceElement> choices=new ArrayList<QuestionChoiceElement>();
        int i=0;
        for (        String choiceLabel : qChoices) {
          QuestionChoiceElement qChoice=new QuestionChoiceElement();
          qChoice.setLabel(choiceLabel);
          qChoice.setParentQuestion(questionElement);
          qChoice.setSortOrder(i++);
          qChoice.setDisabled(qChoicesDisabled.contains(choiceLabel));
          choices.add(qChoice);
        }
        ((QuestionElement)flexibleElt).setChoices(choices);
        specificChanges=true;
      }
      if (specificChanges) {
        flexibleElt=em.merge((QuestionElement)flexibleElt);
      }
    }
  }
 else   if (type == ElementTypeEnum.COMPUTATION || (type == null && oldType == ElementTypeEnum.COMPUTATION)) {
    ComputationElement computationElement=(ComputationElement)flexibleElt;
    if (computationElement != null) {
      if (computationRule != null) {
        final String rule=resolveComputationRule(em,dependencyResolver,model,computationRule);
        computationElement.setRule(rule);
        specificChanges=true;
        removeAllValuesForElement(computationElement,em);
      }
      if (minLimit != null) {
        computationElement.setMinimumValue(minLimit.toString());
        specificChanges=true;
      }
      if (maxLimit != null) {
        computationElement.setMaximumValue(maxLimit.toString());
        specificChanges=true;
      }
      if (specificChanges) {
        flexibleElt=em.merge(computationElement);
      }
    }
  }
 else   if (type == ElementTypeEnum.CONTACT_LIST || (type == null && oldType == ElementTypeEnum.CONTACT_LIST)) {
    ContactListElement contactListElement=(ContactListElement)flexibleElt;
    if (contactListElement != null) {
      if ((contactListElement.getLimit() > 0 && contactListLimit == null) || (contactListLimit != null && contactListElement.getLimit() != contactListLimit.intValue())) {
        contactListElement.setLimit(contactListLimit == null ? 0 : contactListLimit.intValue());
        specificChanges=true;
      }
      if (contactListElement.getAllowedType() != contactListType) {
        contactListElement.setAllowedType(contactListType);
        specificChanges=true;
      }
      if (contactListElement.isMember() != contactListIsMember) {
        contactListElement.setMember(contactListIsMember);
        specificChanges=true;
      }
      Set<Integer> modelsToCompare=new HashSet<>(contactListAllowedModelIds);
      boolean contactModelsModified=false;
      for (      ContactModel contactModel : contactListElement.getAllowedModels()) {
        if (!modelsToCompare.remove(contactModel.getId())) {
          contactModelsModified=true;
          break;
        }
      }
      if (!modelsToCompare.isEmpty()) {
        contactModelsModified=true;
      }
      if (contactModelsModified) {
        contactListElement.setAllowedModels(contactModelDAO.findByIds(contactListAllowedModelIds));
        specificChanges=true;
      }
      if (specificChanges) {
        flexibleElt=em.merge(contactListElement);
      }
    }
  }
  em.flush();
  em.clear();
}",0.9999414108272792
35412,"@Override public FieldSet createGroupLayoutFieldSet(FlexibleElementContainer container,final LayoutGroupDTO groupLayout,DispatchQueue queue,final Integer iterationId,final IterableGroupPanel tabPanel,final IterableGroupItem tabItem){
  final ProjectDTO project=(ProjectDTO)container;
  final FieldSet fieldSet=(FieldSet)groupLayout.getWidget();
  if (ClientUtils.isEmpty(groupLayout.getConstraints())) {
    return fieldSet;
  }
  for (  final LayoutConstraintDTO constraintDTO : groupLayout.getConstraints()) {
    final FlexibleElementDTO elementDTO=constraintDTO.getFlexibleElementDTO();
    if (elementDTO.isDisabled()) {
      continue;
    }
    final Integer amendmentId;
    if (project.getCurrentAmendment() != null) {
      amendmentId=project.getCurrentAmendment().getId();
    }
 else {
      amendmentId=null;
    }
    GetValue getValue;
    getValue=new GetValue(project.getId(),elementDTO.getId(),elementDTO.getEntityName(),amendmentId,iterationId);
    queue.add(getValue,new CommandResultHandler<ValueResult>(){
      @Override public void onCommandFailure(      final Throwable throwable){
        if (Log.isErrorEnabled()) {
          Log.error(""String_Node_Str"",throwable);
        }
        throw new RuntimeException(throwable);
      }
      @Override public void onCommandSuccess(      final ValueResult valueResult){
        if (Log.isDebugEnabled()) {
          Log.debug(""String_Node_Str"" + valueResult);
        }
        elementDTO.setService(dispatch);
        elementDTO.setAuthenticationProvider(injector.getAuthenticationProvider());
        elementDTO.setEventBus(eventBus);
        elementDTO.setCache(injector.getClientCache());
        elementDTO.setCurrentContainerDTO(project);
        elementDTO.setTransfertManager(injector.getTransfertManager());
        elementDTO.assignValue(valueResult);
        elementDTO.setTabPanel(tabPanel);
        final ProjectPresenter projectPresenter=injector.getProjectPresenter();
        elementDTO.init();
        final Component elementComponent=elementDTO.getElementComponent(valueResult);
        if (elementDTO.getAmendable() && projectPresenter.projectIsLocked() && projectPresenter.canUnlockProject()&& !ProfileUtils.isGranted(auth(),GlobalPermissionEnum.MODIFY_LOCKED_CONTENT)) {
          projectPresenter.addUnlockProjectPopup(elementDTO,elementComponent,new LoadingMask(view.getTabPanelPhases()));
        }
        final FormData formData;
        if (elementDTO.getPreferredWidth() == 0) {
          formData=new FormData(""String_Node_Str"");
        }
 else {
          formData=new FormData(elementDTO.getPreferredWidth(),-1);
        }
        if (elementComponent != null) {
          fieldSet.add(elementComponent,formData);
        }
        fieldSet.layout();
        computationTriggerManager.listenToValueChangesOfElement(elementDTO,elementComponent,valueChanges);
        elementDTO.addValueHandler(new ValueHandler(){
          @Override public void onValueChange(          final ValueEvent event){
            if (tabPanel != null) {
              event.setIterationId(tabPanel.getCurrentIterationId());
            }
            valueChanges.add(event);
            if (!getCurrentDisplayedPhase().isEnded()) {
              refreshSaveButtonState();
            }
          }
        }
);
        if (elementDTO.getValidates()) {
          elementDTO.addRequiredValueHandler(new RequiredValueHandler(){
            @Override public void onRequiredValueChange(            RequiredValueEvent event){
              final Integer iterationId=tabPanel != null ? tabPanel.getCurrentIterationId() : null;
              currentPhaseRequiredElements.putActual(iterationId,elementDTO.getId(),event.isValueOn());
              if (isCurrentPhase(getCurrentProject().getCurrentPhase())) {
                activePhaseRequiredElements.putActual(iterationId,elementDTO.getId(),event.isValueOn());
              }
              if (event.isImmediate()) {
                view.getButtonSavePhase().fireEvent(Events.OnClick);
              }
              elementDTO.setFilledIn(currentPhaseRequiredElements.isActuallyTrue(elementDTO.getId()));
              view.getGridRequiredElements().getStore().update(elementDTO);
              elementDTO.getTabPanel().setElementValidity(elementDTO,event.isValueOn());
              refreshRequiredElementContentPanelHeader();
            }
          }
);
          if (tabItem != null) {
            tabItem.setElementValidity(elementDTO,elementDTO.isCorrectRequiredValue(valueResult));
            tabItem.refreshTitle();
          }
          elementDTO.setGroup(groupLayout);
          elementDTO.setConstraint(constraintDTO);
          requiredElementsSet.add(elementDTO);
          view.getGridRequiredElements().getStore().removeAll();
          view.getGridRequiredElements().getStore().add(sortRequiredElements(new ArrayList<FlexibleElementDTO>(requiredElementsSet)));
          refreshRequiredElementContentPanelHeader();
          currentPhaseRequiredElements.putSaved(iterationId,elementDTO.getId(),elementDTO.isFilledIn());
          if (isCurrentPhase(getCurrentProject().getCurrentPhase())) {
            activePhaseRequiredElements.putSaved(iterationId,elementDTO.getId(),elementDTO.isFilledIn());
          }
        }
      }
    }
,new LoadingMask(view.getTabPanelPhases()));
  }
  fieldSet.setCollapsible(false);
  fieldSet.setAutoHeight(true);
  fieldSet.setBorders(false);
  fieldSet.setHeadingHtml(""String_Node_Str"");
  return fieldSet;
}","@Override public FieldSet createGroupLayoutFieldSet(FlexibleElementContainer container,final LayoutGroupDTO groupLayout,DispatchQueue queue,final Integer iterationId,final IterableGroupPanel tabPanel,final IterableGroupItem tabItem){
  final ProjectDTO project=(ProjectDTO)container;
  final FieldSet fieldSet=(FieldSet)groupLayout.getWidget();
  if (ClientUtils.isEmpty(groupLayout.getConstraints())) {
    return fieldSet;
  }
  for (  final LayoutConstraintDTO constraintDTO : groupLayout.getConstraints()) {
    final FlexibleElementDTO elementDTO=constraintDTO.getFlexibleElementDTO();
    if (elementDTO.isDisabled()) {
      continue;
    }
    final Integer amendmentId;
    if (project.getCurrentAmendment() != null) {
      amendmentId=project.getCurrentAmendment().getId();
    }
 else {
      amendmentId=null;
    }
    GetValue getValue;
    getValue=new GetValue(project.getId(),elementDTO.getId(),elementDTO.getEntityName(),amendmentId,iterationId);
    queue.add(getValue,new CommandResultHandler<ValueResult>(){
      @Override public void onCommandFailure(      final Throwable throwable){
        if (Log.isErrorEnabled()) {
          Log.error(""String_Node_Str"",throwable);
        }
        throw new RuntimeException(throwable);
      }
      @Override public void onCommandSuccess(      final ValueResult valueResult){
        if (Log.isDebugEnabled()) {
          Log.debug(""String_Node_Str"" + valueResult);
        }
        elementDTO.setService(dispatch);
        elementDTO.setAuthenticationProvider(injector.getAuthenticationProvider());
        elementDTO.setEventBus(eventBus);
        elementDTO.setCache(injector.getClientCache());
        elementDTO.setCurrentContainerDTO(project);
        elementDTO.setTransfertManager(injector.getTransfertManager());
        elementDTO.assignValue(valueResult);
        elementDTO.setTabPanel(tabPanel);
        final ProjectPresenter projectPresenter=injector.getProjectPresenter();
        elementDTO.init();
        final Component elementComponent=elementDTO.getElementComponent(valueResult);
        if (elementDTO.getAmendable() && projectPresenter.projectIsLocked() && projectPresenter.canUnlockProject()&& !ProfileUtils.isGranted(auth(),GlobalPermissionEnum.MODIFY_LOCKED_CONTENT)) {
          projectPresenter.addUnlockProjectPopup(elementDTO,elementComponent,new LoadingMask(view.getTabPanelPhases()));
        }
        final FormData formData;
        if (elementDTO.getPreferredWidth() == 0) {
          formData=new FormData(""String_Node_Str"");
        }
 else {
          formData=new FormData(elementDTO.getPreferredWidth(),-1);
        }
        if (elementComponent != null) {
          fieldSet.add(elementComponent,formData);
        }
        fieldSet.layout();
        computationTriggerManager.listenToValueChangesOfElement(elementDTO,elementComponent,valueChanges);
        elementDTO.addValueHandler(new ValueHandler(){
          @Override public void onValueChange(          final ValueEvent event){
            if (tabPanel != null) {
              event.setIterationId(tabPanel.getCurrentIterationId());
            }
            valueChanges.add(event);
            if (!getCurrentDisplayedPhase().isEnded()) {
              refreshSaveButtonState();
            }
          }
        }
);
        if (elementDTO.getValidates()) {
          elementDTO.addRequiredValueHandler(new RequiredValueHandler(){
            @Override public void onRequiredValueChange(            RequiredValueEvent event){
              final Integer iterationId=tabPanel != null ? tabPanel.getCurrentIterationId() : null;
              currentPhaseRequiredElements.putActual(iterationId,elementDTO.getId(),event.isValueOn());
              if (isCurrentPhase(getCurrentProject().getCurrentPhase())) {
                activePhaseRequiredElements.putActual(iterationId,elementDTO.getId(),event.isValueOn());
              }
              if (event.isImmediate()) {
                view.getButtonSavePhase().fireEvent(Events.OnClick);
              }
              elementDTO.setFilledIn(currentPhaseRequiredElements.isActuallyTrue(elementDTO.getId()));
              view.getGridRequiredElements().getStore().update(elementDTO);
              if (iterationId != null) {
                elementDTO.getTabPanel().setElementValidity(elementDTO,event.isValueOn());
              }
              refreshRequiredElementContentPanelHeader();
            }
          }
);
          if (tabItem != null) {
            tabItem.setElementValidity(elementDTO,elementDTO.isCorrectRequiredValue(valueResult));
            tabItem.refreshTitle();
          }
          elementDTO.setGroup(groupLayout);
          elementDTO.setConstraint(constraintDTO);
          requiredElementsSet.add(elementDTO);
          view.getGridRequiredElements().getStore().removeAll();
          view.getGridRequiredElements().getStore().add(sortRequiredElements(new ArrayList<FlexibleElementDTO>(requiredElementsSet)));
          refreshRequiredElementContentPanelHeader();
          currentPhaseRequiredElements.putSaved(iterationId,elementDTO.getId(),elementDTO.isFilledIn());
          if (isCurrentPhase(getCurrentProject().getCurrentPhase())) {
            activePhaseRequiredElements.putSaved(iterationId,elementDTO.getId(),elementDTO.isFilledIn());
          }
        }
      }
    }
,new LoadingMask(view.getTabPanelPhases()));
  }
  fieldSet.setCollapsible(false);
  fieldSet.setAutoHeight(true);
  fieldSet.setBorders(false);
  fieldSet.setHeadingHtml(""String_Node_Str"");
  return fieldSet;
}",0.9946524064171124
35413,"@Override public void onRequiredValueChange(RequiredValueEvent event){
  final Integer iterationId=tabPanel != null ? tabPanel.getCurrentIterationId() : null;
  currentPhaseRequiredElements.putActual(iterationId,elementDTO.getId(),event.isValueOn());
  if (isCurrentPhase(getCurrentProject().getCurrentPhase())) {
    activePhaseRequiredElements.putActual(iterationId,elementDTO.getId(),event.isValueOn());
  }
  if (event.isImmediate()) {
    view.getButtonSavePhase().fireEvent(Events.OnClick);
  }
  elementDTO.setFilledIn(currentPhaseRequiredElements.isActuallyTrue(elementDTO.getId()));
  view.getGridRequiredElements().getStore().update(elementDTO);
  elementDTO.getTabPanel().setElementValidity(elementDTO,event.isValueOn());
  refreshRequiredElementContentPanelHeader();
}","@Override public void onRequiredValueChange(RequiredValueEvent event){
  final Integer iterationId=tabPanel != null ? tabPanel.getCurrentIterationId() : null;
  currentPhaseRequiredElements.putActual(iterationId,elementDTO.getId(),event.isValueOn());
  if (isCurrentPhase(getCurrentProject().getCurrentPhase())) {
    activePhaseRequiredElements.putActual(iterationId,elementDTO.getId(),event.isValueOn());
  }
  if (event.isImmediate()) {
    view.getButtonSavePhase().fireEvent(Events.OnClick);
  }
  elementDTO.setFilledIn(currentPhaseRequiredElements.isActuallyTrue(elementDTO.getId()));
  view.getGridRequiredElements().getStore().update(elementDTO);
  if (iterationId != null) {
    elementDTO.getTabPanel().setElementValidity(elementDTO,event.isValueOn());
  }
  refreshRequiredElementContentPanelHeader();
}",0.9780564263322884
35414,"public static boolean isGranted(List<OrgUnitProfile> userUnits,OrgUnit targetOrgUnit,GlobalPermissionEnum permission){
  for (  OrgUnitProfile userUnit : userUnits) {
    if (!OrgUnitUtils.areOrgUnitsEqualOrParent(userUnit.getOrgUnit(),targetOrgUnit.getId())) {
      continue;
    }
    if (isGranted(userUnit,permission)) {
      return true;
    }
  }
  return false;
}","public static boolean isGranted(List<OrgUnitProfile> userUnits,OrgUnit targetOrgUnit,GlobalPermissionEnum permission){
  for (  OrgUnitProfile userUnit : userUnits) {
    if (!OrgUnitUtils.areOrgUnitsEqualOrParent(targetOrgUnit,userUnit.getOrgUnit().getId())) {
      continue;
    }
    if (isGranted(userUnit,permission)) {
      return true;
    }
  }
  return false;
}",0.9623655913978496
35415,"/** 
 * Save the value of a multivalued flexible element.
 * @param multivaluedIdsValue Value to save.
 * @param changeType Type of the modification (add, edit or remove).
 * @param historyDate Date of the modification.
 * @param element Flexible element to update.
 * @param containerId Identifier of the parent container.
 * @param iterationId Identifier of the iteration to update.
 * @param user Author of the modification.
 * @param comment Comment about the update.
 */
public void saveValue(final Set<Integer> multivaluedIdsValue,final ValueEventWrapper changeType,final Date historyDate,final FlexibleElement element,final Integer containerId,final Integer iterationId,final User user,final String comment){
  LOGGER.debug(""String_Node_Str"");
  final Value currentValue=retrieveOrCreateValue(containerId,element.getId(),iterationId,user);
  final Set<Integer> ids;
switch (changeType.getChangeType()) {
case ADD:
    ids=getCurrentIdsSet(currentValue);
  ids.addAll(multivaluedIdsValue);
break;
case REMOVE:
ids=getCurrentIdsSet(currentValue);
ids.removeAll(multivaluedIdsValue);
break;
case EDIT:
ids=multivaluedIdsValue;
break;
default :
throw new IllegalStateException(""String_Node_Str"" + changeType.getChangeType());
}
final String serializedValue=ValueResultUtils.mergeElements(new ArrayList<>(ids));
currentValue.setValue(serializedValue);
if (changeType.getChangeType() == ValueEventChangeType.EDIT) {
historize(historyDate,element,containerId,iterationId,user,changeType.getChangeType(),serializedValue,null,comment);
}
 else {
for (final Integer id : multivaluedIdsValue) {
historize(historyDate,element,containerId,iterationId,user,changeType.getChangeType(),String.valueOf(id),null,comment);
}
}
}","/** 
 * Save the value of a multivalued flexible element.
 * @param multivaluedIdsValue Value to save.
 * @param changeType Type of the modification (add, edit or remove).
 * @param historyDate Date of the modification.
 * @param element Flexible element to update.
 * @param containerId Identifier of the parent container.
 * @param iterationId Identifier of the iteration to update.
 * @param user Author of the modification.
 * @param comment Comment about the update.
 */
public void saveValue(final Set<Integer> multivaluedIdsValue,final ValueEventWrapper changeType,final Date historyDate,final FlexibleElement element,final Integer containerId,final Integer iterationId,final User user,final String comment){
  LOGGER.debug(""String_Node_Str"");
  final Value currentValue=retrieveOrCreateValue(containerId,element.getId(),iterationId,user);
  final Set<Integer> ids;
switch (changeType.getChangeType()) {
case ADD:
    ids=getCurrentIdsSet(currentValue);
  ids.addAll(multivaluedIdsValue);
break;
case REMOVE:
ids=getCurrentIdsSet(currentValue);
ids.removeAll(multivaluedIdsValue);
break;
case EDIT:
ids=multivaluedIdsValue;
break;
default :
throw new IllegalStateException(""String_Node_Str"" + changeType.getChangeType());
}
final String serializedValue=ValueResultUtils.mergeElements(new ArrayList<>(ids));
currentValue.setValue(serializedValue);
if (changeType.getChangeType() == ValueEventChangeType.EDIT) {
historize(historyDate,element,containerId,iterationId,user,changeType.getChangeType(),serializedValue,null,comment);
}
 else {
for (final Integer id : multivaluedIdsValue) {
historize(historyDate,element,containerId,iterationId,user,changeType.getChangeType(),String.valueOf(id),null,comment);
}
}
em().merge(currentValue);
}",0.9924812030075189
35416,"public void persistFlexibleElement(final PropertyMap changes,final Object model){
  if (changes.get(AdminUtil.PROP_FX_FLEXIBLE_ELEMENT) == null) {
    return;
  }
  EntityManager em=entityManagerProvider.get();
  final String name=changes.get(AdminUtil.PROP_FX_NAME);
  final String code=changes.get(AdminUtil.PROP_FX_CODE);
  final ElementTypeEnum type=changes.get(AdminUtil.PROP_FX_TYPE);
  final Boolean isCompulsory=changes.get(AdminUtil.PROP_FX_IS_COMPULSARY);
  final PrivacyGroupDTO pg=changes.get(AdminUtil.PROP_FX_PRIVACY_GROUP);
  final Boolean amend=changes.get(AdminUtil.PROP_FX_AMENDABLE);
  final Boolean exportable=changes.get(AdminUtil.PROP_FX_EXPORTABLE);
  final LayoutGroupDTO group=changes.get(AdminUtil.PROP_FX_GROUP);
  final Integer order=changes.get(AdminUtil.PROP_FX_ORDER_IN_GROUP);
  final Boolean inBanner=changes.get(AdminUtil.PROP_FX_IN_BANNER);
  final Integer posB;
  if (changes.get(AdminUtil.PROP_FX_POS_IN_BANNER) instanceof Integer) {
    posB=((Integer)changes.get(AdminUtil.PROP_FX_POS_IN_BANNER)) - 1;
  }
 else {
    posB=null;
  }
  final Map<String,Object> oldLayoutFields=(Map<String,Object>)changes.get(AdminUtil.PROP_FX_OLD_FIELDS);
  final LayoutConstraintDTO oldLayoutConstraintDTO=(LayoutConstraintDTO)oldLayoutFields.get(AdminUtil.PROP_FX_LC);
  final LayoutConstraintDTO oldBannerLayoutConstraintDTO=(LayoutConstraintDTO)oldLayoutFields.get(AdminUtil.PROP_FX_LC_BANNER);
  final ElementTypeEnum oldType=(ElementTypeEnum)oldLayoutFields.get(AdminUtil.PROP_FX_TYPE);
  final Integer oldOrder=(Integer)oldLayoutFields.get(AdminUtil.PROP_FX_ORDER_IN_GROUP);
  final Character textType=changes.get(AdminUtil.PROP_FX_TEXT_TYPE);
  final Number maxLimit=changes.get(AdminUtil.PROP_FX_MAX_LIMIT);
  final Number minLimit=changes.get(AdminUtil.PROP_FX_MIN_LIMIT);
  final Integer length=changes.get(AdminUtil.PROP_FX_LENGTH);
  final Boolean decimal=changes.get(AdminUtil.PROP_FX_DECIMAL);
  final ReportModelDTO reportModel=changes.get(AdminUtil.PROP_FX_REPORT_MODEL);
  final Boolean isMultiple=changes.get(AdminUtil.PROP_FX_Q_MULTIPLE);
  final CategoryTypeDTO category=changes.get(AdminUtil.PROP_FX_Q_CATEGORY);
  final List<String> qChoices=changes.get(AdminUtil.PROP_FX_Q_CHOICES);
  Set<String> qChoicesDisabled=changes.get(AdminUtil.PROP_FX_Q_CHOICES_DISABLED);
  final List<BudgetSubFieldDTO> bSubFields=changes.get(AdminUtil.PROP_FX_B_BUDGETSUBFIELDS);
  final BudgetSubFieldDTO ratioDividend=changes.get(AdminUtil.PROP_FX_B_BUDGET_RATIO_DIVIDEND);
  final BudgetSubFieldDTO ratioDivisor=changes.get(AdminUtil.PROP_FX_B_BUDGET_RATIO_DIVISOR);
  final String computationRule=changes.get(AdminUtil.PROP_FX_COMPUTATION_RULE);
  final FlexibleElementDTO budgetSpent=changes.get(AdminUtil.PROP_BUDGET_SPENT);
  final FlexibleElementDTO budgetPlanned=changes.get(AdminUtil.PROP_BUDGET_PLANNED);
  Number contactListLimit=changes.get(AdminUtil.PROP_FX_CONTACT_LIST_LIMIT);
  boolean contactListIsMember=changes.get(AdminUtil.PROP_FX_CONTACT_LIST_IS_MEMBER);
  ContactModelType contactListType=changes.get(AdminUtil.PROP_FX_CONTACT_LIST_ALLOWED_TYPE);
  Set<Integer> contactListAllowedModelIds=changes.get(AdminUtil.PROP_FX_CONTACT_LIST_ALLOWED_MODEL_IDS);
  final FlexibleElementDTO flexibleEltDTO=changes.get(AdminUtil.PROP_FX_FLEXIBLE_ELEMENT);
  FlexibleElement flexibleElt=null;
  if (flexibleEltDTO.getId() != null && flexibleEltDTO.getId() > 0) {
    flexibleElt=em.find(FlexibleElement.class,flexibleEltDTO.getId());
  }
 else {
    flexibleElt=(FlexibleElement)createNewFlexibleElement(em,oldType,type,flexibleElt);
  }
  if (qChoicesDisabled == null) {
    qChoicesDisabled=Collections.emptySet();
  }
  LOG.debug(""String_Node_Str"",type,group,order,inBanner,posB,isCompulsory,pg,amend,exportable);
  LOG.debug(""String_Node_Str"",maxLimit,minLimit,textType,length,decimal,reportModel);
  Boolean basicChanges=false;
  if (flexibleElt != null) {
    if (name != null) {
      flexibleElt.setLabel(name);
      basicChanges=true;
    }
    if (code != null) {
      flexibleElt.setCode(code);
      basicChanges=true;
    }
    if (amend != null) {
      flexibleElt.setAmendable(amend);
      basicChanges=true;
    }
    if (exportable != null) {
      flexibleElt.setExportable(exportable);
      basicChanges=true;
    }
    if (isCompulsory != null) {
      flexibleElt.setValidates(isCompulsory);
      basicChanges=true;
    }
    if (pg != null) {
      PrivacyGroup pgToPersist=em.find(PrivacyGroup.class,pg.getId());
      if (pgToPersist != null) {
        flexibleElt.setPrivacyGroup(pgToPersist);
        basicChanges=true;
      }
    }
 else     if (changes.containsKey(AdminUtil.PROP_FX_PRIVACY_GROUP)) {
      flexibleElt.setPrivacyGroup(null);
      basicChanges=true;
    }
    if (basicChanges && flexibleElt.getId() != null)     flexibleElt=em.merge(flexibleElt);
 else     em.persist(flexibleElt);
  }
  if (group != null) {
    LayoutGroup parentLayoutGroup=em.find(LayoutGroup.class,group.getId());
    LayoutConstraint newLayoutConstraint=new LayoutConstraint();
    if (parentLayoutGroup != null) {
      newLayoutConstraint.setElement(flexibleElt);
      newLayoutConstraint.setParentLayoutGroup(parentLayoutGroup);
      if (oldOrder != null)       newLayoutConstraint.setSortOrder(oldOrder);
      if (order != null)       newLayoutConstraint.setSortOrder(order);
      if (order == null && oldOrder == null)       newLayoutConstraint.setSortOrder(new Integer(parentLayoutGroup.getConstraints().size()));
      if (oldLayoutConstraintDTO != null) {
        newLayoutConstraint.setId(oldLayoutConstraintDTO.getId());
        newLayoutConstraint=em.merge(newLayoutConstraint);
      }
 else {
        em.persist(newLayoutConstraint);
      }
    }
  }
  if (inBanner != null) {
    if (inBanner) {
      if (model instanceof ProjectModel || model instanceof OrgUnitModel || model instanceof ContactModel) {
        changeBanner(em,posB,model,flexibleElt);
      }
    }
 else {
      if (oldBannerLayoutConstraintDTO != null) {
        LayoutConstraint oldBannerLayoutConstraint=mapper.map(oldBannerLayoutConstraintDTO,new LayoutConstraint());
        oldBannerLayoutConstraint=em.find(LayoutConstraint.class,oldBannerLayoutConstraint.getId());
        em.remove(oldBannerLayoutConstraint);
      }
    }
  }
 else {
    if (posB != null) {
      if (model instanceof ProjectModel || model instanceof OrgUnitModel || model instanceof ContactModel) {
        LayoutConstraint oldBannerLayoutConstraint=mapper.map(oldBannerLayoutConstraintDTO,new LayoutConstraint());
        changePositionInBanner(em,posB,model,flexibleElt,oldBannerLayoutConstraint);
      }
    }
  }
  if (oldType != null && type != null) {
    flexibleElt=(FlexibleElement)createNewFlexibleElement(em,oldType,type,flexibleElt);
    LOG.debug(""String_Node_Str"",flexibleElt.getClass());
  }
  em.flush();
  em.clear();
  flexibleElt=em.find(FlexibleElement.class,flexibleElt.getId());
  Boolean specificChanges=false;
  final LogicalElementType logicalElementType=ServerComputations.logicalElementTypeOf(flexibleElt);
  if ((ElementTypeEnum.DEFAULT.equals(oldType) && type == null) && DefaultFlexibleElementType.BUDGET == logicalElementType.toDefaultFlexibleElementType()) {
    List<BudgetSubField> budgetFieldsToDelete=new ArrayList<BudgetSubField>();
    BudgetElement budgetElement=(BudgetElement)flexibleElt;
    budgetFieldsToDelete.addAll(budgetElement.getBudgetSubFields());
    budgetElement.getBudgetSubFields().clear();
    for (    BudgetSubFieldDTO budgetFieldDTO : bSubFields) {
      if (budgetFieldDTO.getId() != null && budgetFieldDTO.getId() > 0) {
        BudgetSubField b=em.find(BudgetSubField.class,budgetFieldDTO.getId());
        if (b != null) {
          budgetFieldsToDelete.remove(b);
          b.setLabel(budgetFieldDTO.getLabel());
          b.setFieldOrder(budgetFieldDTO.getFieldOrder());
          b=em.merge(b);
          budgetElement.getBudgetSubFields().add(b);
        }
      }
 else {
        BudgetSubField budgetSubFieldToPersist=new BudgetSubField();
        budgetSubFieldToPersist.setLabel(budgetFieldDTO.getLabel());
        budgetSubFieldToPersist.setFieldOrder(budgetFieldDTO.getFieldOrder());
        budgetSubFieldToPersist.setBudgetElement(budgetElement);
        em.persist(budgetSubFieldToPersist);
        budgetElement.getBudgetSubFields().add(budgetSubFieldToPersist);
      }
    }
    for (    BudgetSubField budgetFieldTODelete : budgetFieldsToDelete) {
      budgetFieldTODelete.setBudgetElement(null);
      em.remove(budgetFieldTODelete);
    }
    if (ratioDividend != null) {
      BudgetSubField budgetRatio=new BudgetSubField();
      budgetRatio.setId(ratioDividend.getId());
      budgetElement.setRatioDividend(budgetRatio);
    }
    if (ratioDivisor != null) {
      BudgetSubField budgetRatio=new BudgetSubField();
      budgetRatio.setId(ratioDivisor.getId());
      budgetElement.setRatioDivisor(budgetRatio);
    }
    flexibleElt=em.merge(budgetElement);
  }
 else   if ((ElementTypeEnum.DEFAULT.equals(oldType) && type == null) && DefaultFlexibleElementType.BUDGET_RATIO == logicalElementType.toDefaultFlexibleElementType()) {
    BudgetRatioElement budgetRatioElement=(BudgetRatioElement)flexibleElt;
    if (budgetSpent != null) {
      FlexibleElement flexibleElement=new DefaultFlexibleElement();
      flexibleElement.setId(budgetSpent.getId());
      budgetRatioElement.setSpentBudget(flexibleElement);
    }
    if (budgetPlanned != null) {
      FlexibleElement flexibleElement=new DefaultFlexibleElement();
      flexibleElement.setId(budgetPlanned.getId());
      budgetRatioElement.setPlannedBudget(flexibleElement);
    }
    flexibleElt=em.merge(budgetRatioElement);
  }
 else   if (ElementTypeEnum.FILES_LIST.equals(type) || (ElementTypeEnum.FILES_LIST.equals(oldType) && type == null)) {
    FilesListElement filesListElement=(FilesListElement)flexibleElt;
    if (filesListElement != null) {
      if (maxLimit != null) {
        filesListElement.setLimit(maxLimit.intValue());
        specificChanges=true;
      }
      if (specificChanges) {
        filesListElement=em.merge(filesListElement);
        flexibleElt=filesListElement;
      }
    }
  }
 else   if (ElementTypeEnum.TEXT_AREA.equals(type) || (ElementTypeEnum.TEXT_AREA.equals(oldType) && type == null)) {
    TextAreaElement textAreaElement=(TextAreaElement)flexibleElt;
    if (textAreaElement != null) {
      if (maxLimit != null) {
        ((TextAreaElement)flexibleElt).setMaxValue(maxLimit.longValue());
        specificChanges=true;
      }
      if (minLimit != null) {
        ((TextAreaElement)flexibleElt).setMinValue(minLimit.longValue());
        specificChanges=true;
      }
      if (length != null) {
        ((TextAreaElement)flexibleElt).setLength(length);
        specificChanges=true;
      }
      if (decimal != null) {
        ((TextAreaElement)flexibleElt).setIsDecimal(decimal);
        specificChanges=true;
      }
      if (textType != null) {
        ((TextAreaElement)flexibleElt).setType(textType);
        specificChanges=true;
      }
      if (specificChanges) {
        flexibleElt=em.merge((TextAreaElement)flexibleElt);
      }
    }
  }
 else   if (ElementTypeEnum.REPORT.equals(type) || (ElementTypeEnum.REPORT.equals(oldType) && type == null)) {
    ReportElement reportElement=em.find(ReportElement.class,flexibleElt.getId());
    if (reportElement != null) {
      if (reportModel != null && reportModel.getName() != null) {
        ProjectReportModel reportId=findReportModel(em,reportModel.getName());
        ((ReportElement)flexibleElt).setModel(reportId);
        specificChanges=true;
      }
      if (specificChanges) {
        flexibleElt=em.merge((ReportElement)flexibleElt);
      }
    }
  }
 else   if (ElementTypeEnum.REPORT_LIST.equals(type) || (ElementTypeEnum.REPORT_LIST.equals(oldType) && type == null)) {
    ReportListElement reportElement=em.find(ReportListElement.class,flexibleElt.getId());
    if (reportElement != null) {
      if (reportModel != null && reportModel.getName() != null) {
        ProjectReportModel reportId=findReportModel(em,reportModel.getName());
        ((ReportListElement)flexibleElt).setModel(reportId);
        specificChanges=true;
      }
      if (specificChanges) {
        flexibleElt=em.merge((ReportListElement)flexibleElt);
      }
    }
  }
 else   if (ElementTypeEnum.QUESTION.equals(type) || (ElementTypeEnum.QUESTION.equals(oldType) && type == null)) {
    QuestionElement questionElement=em.find(QuestionElement.class,flexibleElt.getId());
    if (questionElement != null) {
      if (isMultiple != null) {
        ((QuestionElement)flexibleElt).setMultiple(isMultiple);
        specificChanges=true;
      }
      if (category != null) {
        for (        QuestionChoiceElement choiceElt : ((QuestionElement)flexibleElt).getChoices()) {
          em.remove(choiceElt);
        }
        CategoryType categoryType=em.find(CategoryType.class,category.getId());
        if (categoryType != null) {
          ((QuestionElement)flexibleElt).setCategoryType(categoryType);
          List<QuestionChoiceElement> choices=new ArrayList<QuestionChoiceElement>();
          int i=0;
          for (          CategoryElement catElt : categoryType.getElements()) {
            QuestionChoiceElement qChoice=new QuestionChoiceElement();
            qChoice.setLabel(""String_Node_Str"");
            qChoice.setCategoryElement(catElt);
            qChoice.setParentQuestion(questionElement);
            qChoice.setSortOrder(i++);
            choices.add(qChoice);
          }
          ((QuestionElement)flexibleElt).setChoices(choices);
          specificChanges=true;
        }
      }
 else       if (qChoices != null && qChoices.size() > 0) {
        for (        QuestionChoiceElement choiceElt : ((QuestionElement)flexibleElt).getChoices()) {
          em.remove(choiceElt);
        }
        ((QuestionElement)flexibleElt).setCategoryType(null);
        List<QuestionChoiceElement> choices=new ArrayList<QuestionChoiceElement>();
        int i=0;
        for (        String choiceLabel : qChoices) {
          QuestionChoiceElement qChoice=new QuestionChoiceElement();
          qChoice.setLabel(choiceLabel);
          qChoice.setParentQuestion(questionElement);
          qChoice.setSortOrder(i++);
          qChoice.setDisabled(qChoicesDisabled.contains(choiceLabel));
          choices.add(qChoice);
        }
        ((QuestionElement)flexibleElt).setChoices(choices);
        specificChanges=true;
      }
      if (specificChanges) {
        flexibleElt=em.merge((QuestionElement)flexibleElt);
      }
    }
  }
 else   if (type == ElementTypeEnum.COMPUTATION || (type == null && oldType == ElementTypeEnum.COMPUTATION)) {
    ComputationElement computationElement=(ComputationElement)flexibleElt;
    if (computationElement != null) {
      if (computationRule != null) {
        final String rule=resolveComputationRule(em,dependencyResolver,model,computationRule);
        computationElement.setRule(rule);
        specificChanges=true;
        removeAllValuesForElement(computationElement,em);
      }
      if (minLimit != null) {
        computationElement.setMinimumValue(minLimit.toString());
        specificChanges=true;
      }
      if (maxLimit != null) {
        computationElement.setMaximumValue(maxLimit.toString());
        specificChanges=true;
      }
      if (specificChanges) {
        flexibleElt=em.merge(computationElement);
      }
    }
  }
 else   if (type == ElementTypeEnum.CONTACT_LIST || (type == null && oldType == ElementTypeEnum.CONTACT_LIST)) {
    ContactListElement contactListElement=(ContactListElement)flexibleElt;
    if (contactListElement != null) {
      if ((contactListElement.getLimit() > 0 && contactListLimit == null) || (contactListLimit != null && contactListElement.getLimit() != contactListLimit.intValue())) {
        contactListElement.setLimit(contactListLimit == null ? 0 : contactListLimit.intValue());
        specificChanges=true;
      }
      if (contactListElement.getAllowedType() != contactListType) {
        contactListElement.setAllowedType(contactListType);
        specificChanges=true;
      }
      if (contactListElement.isMember() != contactListIsMember) {
        contactListElement.setMember(contactListIsMember);
        specificChanges=true;
      }
      Set<Integer> modelsToCompare=new HashSet<>(contactListAllowedModelIds);
      boolean contactModelsModified=false;
      for (      ContactModel contactModel : contactListElement.getAllowedModels()) {
        if (!modelsToCompare.remove(contactModel.getId())) {
          contactModelsModified=true;
          break;
        }
      }
      if (!modelsToCompare.isEmpty()) {
        contactModelsModified=true;
      }
      if (contactModelsModified) {
        contactListElement.setAllowedModels(contactModelDAO.findByIds(contactListAllowedModelIds));
        specificChanges=true;
      }
      if (specificChanges) {
        flexibleElt=em.merge(contactListElement);
      }
    }
  }
  em.flush();
  em.clear();
}","public void persistFlexibleElement(final PropertyMap changes,final Object model){
  if (changes.get(AdminUtil.PROP_FX_FLEXIBLE_ELEMENT) == null) {
    return;
  }
  EntityManager em=entityManagerProvider.get();
  final String name=changes.get(AdminUtil.PROP_FX_NAME);
  final String code=changes.get(AdminUtil.PROP_FX_CODE);
  final ElementTypeEnum type=changes.get(AdminUtil.PROP_FX_TYPE);
  final Boolean isCompulsory=changes.get(AdminUtil.PROP_FX_IS_COMPULSARY);
  final PrivacyGroupDTO pg=changes.get(AdminUtil.PROP_FX_PRIVACY_GROUP);
  final Boolean amend=changes.get(AdminUtil.PROP_FX_AMENDABLE);
  final Boolean exportable=changes.get(AdminUtil.PROP_FX_EXPORTABLE);
  final LayoutGroupDTO group=changes.get(AdminUtil.PROP_FX_GROUP);
  final Integer order=changes.get(AdminUtil.PROP_FX_ORDER_IN_GROUP);
  final Boolean inBanner=changes.get(AdminUtil.PROP_FX_IN_BANNER);
  final Integer posB;
  if (changes.get(AdminUtil.PROP_FX_POS_IN_BANNER) instanceof Integer) {
    posB=((Integer)changes.get(AdminUtil.PROP_FX_POS_IN_BANNER)) - 1;
  }
 else {
    posB=null;
  }
  final Map<String,Object> oldLayoutFields=(Map<String,Object>)changes.get(AdminUtil.PROP_FX_OLD_FIELDS);
  final LayoutConstraintDTO oldLayoutConstraintDTO=(LayoutConstraintDTO)oldLayoutFields.get(AdminUtil.PROP_FX_LC);
  final LayoutConstraintDTO oldBannerLayoutConstraintDTO=(LayoutConstraintDTO)oldLayoutFields.get(AdminUtil.PROP_FX_LC_BANNER);
  final ElementTypeEnum oldType=(ElementTypeEnum)oldLayoutFields.get(AdminUtil.PROP_FX_TYPE);
  final Integer oldOrder=(Integer)oldLayoutFields.get(AdminUtil.PROP_FX_ORDER_IN_GROUP);
  final Character textType=changes.get(AdminUtil.PROP_FX_TEXT_TYPE);
  final Number maxLimit=changes.get(AdminUtil.PROP_FX_MAX_LIMIT);
  final Number minLimit=changes.get(AdminUtil.PROP_FX_MIN_LIMIT);
  final Integer length=changes.get(AdminUtil.PROP_FX_LENGTH);
  final Boolean decimal=changes.get(AdminUtil.PROP_FX_DECIMAL);
  final ReportModelDTO reportModel=changes.get(AdminUtil.PROP_FX_REPORT_MODEL);
  final Boolean isMultiple=changes.get(AdminUtil.PROP_FX_Q_MULTIPLE);
  final CategoryTypeDTO category=changes.get(AdminUtil.PROP_FX_Q_CATEGORY);
  final List<String> qChoices=changes.get(AdminUtil.PROP_FX_Q_CHOICES);
  Set<String> qChoicesDisabled=changes.get(AdminUtil.PROP_FX_Q_CHOICES_DISABLED);
  final List<BudgetSubFieldDTO> bSubFields=changes.get(AdminUtil.PROP_FX_B_BUDGETSUBFIELDS);
  final BudgetSubFieldDTO ratioDividend=changes.get(AdminUtil.PROP_FX_B_BUDGET_RATIO_DIVIDEND);
  final BudgetSubFieldDTO ratioDivisor=changes.get(AdminUtil.PROP_FX_B_BUDGET_RATIO_DIVISOR);
  final String computationRule=changes.get(AdminUtil.PROP_FX_COMPUTATION_RULE);
  final FlexibleElementDTO budgetSpent=changes.get(AdminUtil.PROP_BUDGET_SPENT);
  final FlexibleElementDTO budgetPlanned=changes.get(AdminUtil.PROP_BUDGET_PLANNED);
  Number contactListLimit=changes.get(AdminUtil.PROP_FX_CONTACT_LIST_LIMIT);
  Boolean contactListIsMember=changes.get(AdminUtil.PROP_FX_CONTACT_LIST_IS_MEMBER);
  ContactModelType contactListType=changes.get(AdminUtil.PROP_FX_CONTACT_LIST_ALLOWED_TYPE);
  Set<Integer> contactListAllowedModelIds=changes.get(AdminUtil.PROP_FX_CONTACT_LIST_ALLOWED_MODEL_IDS);
  final FlexibleElementDTO flexibleEltDTO=changes.get(AdminUtil.PROP_FX_FLEXIBLE_ELEMENT);
  FlexibleElement flexibleElt=null;
  if (flexibleEltDTO.getId() != null && flexibleEltDTO.getId() > 0) {
    flexibleElt=em.find(FlexibleElement.class,flexibleEltDTO.getId());
  }
 else {
    flexibleElt=(FlexibleElement)createNewFlexibleElement(em,oldType,type,flexibleElt);
  }
  if (qChoicesDisabled == null) {
    qChoicesDisabled=Collections.emptySet();
  }
  LOG.debug(""String_Node_Str"",type,group,order,inBanner,posB,isCompulsory,pg,amend,exportable);
  LOG.debug(""String_Node_Str"",maxLimit,minLimit,textType,length,decimal,reportModel);
  Boolean basicChanges=false;
  if (flexibleElt != null) {
    if (name != null) {
      flexibleElt.setLabel(name);
      basicChanges=true;
    }
    if (code != null) {
      flexibleElt.setCode(code);
      basicChanges=true;
    }
    if (amend != null) {
      flexibleElt.setAmendable(amend);
      basicChanges=true;
    }
    if (exportable != null) {
      flexibleElt.setExportable(exportable);
      basicChanges=true;
    }
    if (isCompulsory != null) {
      flexibleElt.setValidates(isCompulsory);
      basicChanges=true;
    }
    if (pg != null) {
      PrivacyGroup pgToPersist=em.find(PrivacyGroup.class,pg.getId());
      if (pgToPersist != null) {
        flexibleElt.setPrivacyGroup(pgToPersist);
        basicChanges=true;
      }
    }
 else     if (changes.containsKey(AdminUtil.PROP_FX_PRIVACY_GROUP)) {
      flexibleElt.setPrivacyGroup(null);
      basicChanges=true;
    }
    if (basicChanges && flexibleElt.getId() != null)     flexibleElt=em.merge(flexibleElt);
 else     em.persist(flexibleElt);
  }
  if (group != null) {
    LayoutGroup parentLayoutGroup=em.find(LayoutGroup.class,group.getId());
    LayoutConstraint newLayoutConstraint=new LayoutConstraint();
    if (parentLayoutGroup != null) {
      newLayoutConstraint.setElement(flexibleElt);
      newLayoutConstraint.setParentLayoutGroup(parentLayoutGroup);
      if (oldOrder != null)       newLayoutConstraint.setSortOrder(oldOrder);
      if (order != null)       newLayoutConstraint.setSortOrder(order);
      if (order == null && oldOrder == null)       newLayoutConstraint.setSortOrder(new Integer(parentLayoutGroup.getConstraints().size()));
      if (oldLayoutConstraintDTO != null) {
        newLayoutConstraint.setId(oldLayoutConstraintDTO.getId());
        newLayoutConstraint=em.merge(newLayoutConstraint);
      }
 else {
        em.persist(newLayoutConstraint);
      }
    }
  }
  if (inBanner != null) {
    if (inBanner) {
      if (model instanceof ProjectModel || model instanceof OrgUnitModel || model instanceof ContactModel) {
        changeBanner(em,posB,model,flexibleElt);
      }
    }
 else {
      if (oldBannerLayoutConstraintDTO != null) {
        LayoutConstraint oldBannerLayoutConstraint=mapper.map(oldBannerLayoutConstraintDTO,new LayoutConstraint());
        oldBannerLayoutConstraint=em.find(LayoutConstraint.class,oldBannerLayoutConstraint.getId());
        em.remove(oldBannerLayoutConstraint);
      }
    }
  }
 else {
    if (posB != null) {
      if (model instanceof ProjectModel || model instanceof OrgUnitModel || model instanceof ContactModel) {
        LayoutConstraint oldBannerLayoutConstraint=mapper.map(oldBannerLayoutConstraintDTO,new LayoutConstraint());
        changePositionInBanner(em,posB,model,flexibleElt,oldBannerLayoutConstraint);
      }
    }
  }
  if (oldType != null && type != null) {
    flexibleElt=(FlexibleElement)createNewFlexibleElement(em,oldType,type,flexibleElt);
    LOG.debug(""String_Node_Str"",flexibleElt.getClass());
  }
  em.flush();
  em.clear();
  flexibleElt=em.find(FlexibleElement.class,flexibleElt.getId());
  Boolean specificChanges=false;
  final LogicalElementType logicalElementType=ServerComputations.logicalElementTypeOf(flexibleElt);
  if ((ElementTypeEnum.DEFAULT.equals(oldType) && type == null) && DefaultFlexibleElementType.BUDGET == logicalElementType.toDefaultFlexibleElementType()) {
    List<BudgetSubField> budgetFieldsToDelete=new ArrayList<BudgetSubField>();
    BudgetElement budgetElement=(BudgetElement)flexibleElt;
    budgetFieldsToDelete.addAll(budgetElement.getBudgetSubFields());
    budgetElement.getBudgetSubFields().clear();
    for (    BudgetSubFieldDTO budgetFieldDTO : bSubFields) {
      if (budgetFieldDTO.getId() != null && budgetFieldDTO.getId() > 0) {
        BudgetSubField b=em.find(BudgetSubField.class,budgetFieldDTO.getId());
        if (b != null) {
          budgetFieldsToDelete.remove(b);
          b.setLabel(budgetFieldDTO.getLabel());
          b.setFieldOrder(budgetFieldDTO.getFieldOrder());
          b=em.merge(b);
          budgetElement.getBudgetSubFields().add(b);
        }
      }
 else {
        BudgetSubField budgetSubFieldToPersist=new BudgetSubField();
        budgetSubFieldToPersist.setLabel(budgetFieldDTO.getLabel());
        budgetSubFieldToPersist.setFieldOrder(budgetFieldDTO.getFieldOrder());
        budgetSubFieldToPersist.setBudgetElement(budgetElement);
        em.persist(budgetSubFieldToPersist);
        budgetElement.getBudgetSubFields().add(budgetSubFieldToPersist);
      }
    }
    for (    BudgetSubField budgetFieldTODelete : budgetFieldsToDelete) {
      budgetFieldTODelete.setBudgetElement(null);
      em.remove(budgetFieldTODelete);
    }
    if (ratioDividend != null) {
      BudgetSubField budgetRatio=new BudgetSubField();
      budgetRatio.setId(ratioDividend.getId());
      budgetElement.setRatioDividend(budgetRatio);
    }
    if (ratioDivisor != null) {
      BudgetSubField budgetRatio=new BudgetSubField();
      budgetRatio.setId(ratioDivisor.getId());
      budgetElement.setRatioDivisor(budgetRatio);
    }
    flexibleElt=em.merge(budgetElement);
  }
 else   if ((ElementTypeEnum.DEFAULT.equals(oldType) && type == null) && DefaultFlexibleElementType.BUDGET_RATIO == logicalElementType.toDefaultFlexibleElementType()) {
    BudgetRatioElement budgetRatioElement=(BudgetRatioElement)flexibleElt;
    if (budgetSpent != null) {
      FlexibleElement flexibleElement=new DefaultFlexibleElement();
      flexibleElement.setId(budgetSpent.getId());
      budgetRatioElement.setSpentBudget(flexibleElement);
    }
    if (budgetPlanned != null) {
      FlexibleElement flexibleElement=new DefaultFlexibleElement();
      flexibleElement.setId(budgetPlanned.getId());
      budgetRatioElement.setPlannedBudget(flexibleElement);
    }
    flexibleElt=em.merge(budgetRatioElement);
  }
 else   if (ElementTypeEnum.FILES_LIST.equals(type) || (ElementTypeEnum.FILES_LIST.equals(oldType) && type == null)) {
    FilesListElement filesListElement=(FilesListElement)flexibleElt;
    if (filesListElement != null) {
      if (maxLimit != null) {
        filesListElement.setLimit(maxLimit.intValue());
        specificChanges=true;
      }
      if (specificChanges) {
        filesListElement=em.merge(filesListElement);
        flexibleElt=filesListElement;
      }
    }
  }
 else   if (ElementTypeEnum.TEXT_AREA.equals(type) || (ElementTypeEnum.TEXT_AREA.equals(oldType) && type == null)) {
    TextAreaElement textAreaElement=(TextAreaElement)flexibleElt;
    if (textAreaElement != null) {
      if (maxLimit != null) {
        ((TextAreaElement)flexibleElt).setMaxValue(maxLimit.longValue());
        specificChanges=true;
      }
      if (minLimit != null) {
        ((TextAreaElement)flexibleElt).setMinValue(minLimit.longValue());
        specificChanges=true;
      }
      if (length != null) {
        ((TextAreaElement)flexibleElt).setLength(length);
        specificChanges=true;
      }
      if (decimal != null) {
        ((TextAreaElement)flexibleElt).setIsDecimal(decimal);
        specificChanges=true;
      }
      if (textType != null) {
        ((TextAreaElement)flexibleElt).setType(textType);
        specificChanges=true;
      }
      if (specificChanges) {
        flexibleElt=em.merge((TextAreaElement)flexibleElt);
      }
    }
  }
 else   if (ElementTypeEnum.REPORT.equals(type) || (ElementTypeEnum.REPORT.equals(oldType) && type == null)) {
    ReportElement reportElement=em.find(ReportElement.class,flexibleElt.getId());
    if (reportElement != null) {
      if (reportModel != null && reportModel.getName() != null) {
        ProjectReportModel reportId=findReportModel(em,reportModel.getName());
        ((ReportElement)flexibleElt).setModel(reportId);
        specificChanges=true;
      }
      if (specificChanges) {
        flexibleElt=em.merge((ReportElement)flexibleElt);
      }
    }
  }
 else   if (ElementTypeEnum.REPORT_LIST.equals(type) || (ElementTypeEnum.REPORT_LIST.equals(oldType) && type == null)) {
    ReportListElement reportElement=em.find(ReportListElement.class,flexibleElt.getId());
    if (reportElement != null) {
      if (reportModel != null && reportModel.getName() != null) {
        ProjectReportModel reportId=findReportModel(em,reportModel.getName());
        ((ReportListElement)flexibleElt).setModel(reportId);
        specificChanges=true;
      }
      if (specificChanges) {
        flexibleElt=em.merge((ReportListElement)flexibleElt);
      }
    }
  }
 else   if (ElementTypeEnum.QUESTION.equals(type) || (ElementTypeEnum.QUESTION.equals(oldType) && type == null)) {
    QuestionElement questionElement=em.find(QuestionElement.class,flexibleElt.getId());
    if (questionElement != null) {
      if (isMultiple != null) {
        ((QuestionElement)flexibleElt).setMultiple(isMultiple);
        specificChanges=true;
      }
      if (category != null) {
        for (        QuestionChoiceElement choiceElt : ((QuestionElement)flexibleElt).getChoices()) {
          em.remove(choiceElt);
        }
        CategoryType categoryType=em.find(CategoryType.class,category.getId());
        if (categoryType != null) {
          ((QuestionElement)flexibleElt).setCategoryType(categoryType);
          List<QuestionChoiceElement> choices=new ArrayList<QuestionChoiceElement>();
          int i=0;
          for (          CategoryElement catElt : categoryType.getElements()) {
            QuestionChoiceElement qChoice=new QuestionChoiceElement();
            qChoice.setLabel(""String_Node_Str"");
            qChoice.setCategoryElement(catElt);
            qChoice.setParentQuestion(questionElement);
            qChoice.setSortOrder(i++);
            choices.add(qChoice);
          }
          ((QuestionElement)flexibleElt).setChoices(choices);
          specificChanges=true;
        }
      }
 else       if (qChoices != null && qChoices.size() > 0) {
        for (        QuestionChoiceElement choiceElt : ((QuestionElement)flexibleElt).getChoices()) {
          em.remove(choiceElt);
        }
        ((QuestionElement)flexibleElt).setCategoryType(null);
        List<QuestionChoiceElement> choices=new ArrayList<QuestionChoiceElement>();
        int i=0;
        for (        String choiceLabel : qChoices) {
          QuestionChoiceElement qChoice=new QuestionChoiceElement();
          qChoice.setLabel(choiceLabel);
          qChoice.setParentQuestion(questionElement);
          qChoice.setSortOrder(i++);
          qChoice.setDisabled(qChoicesDisabled.contains(choiceLabel));
          choices.add(qChoice);
        }
        ((QuestionElement)flexibleElt).setChoices(choices);
        specificChanges=true;
      }
      if (specificChanges) {
        flexibleElt=em.merge((QuestionElement)flexibleElt);
      }
    }
  }
 else   if (type == ElementTypeEnum.COMPUTATION || (type == null && oldType == ElementTypeEnum.COMPUTATION)) {
    ComputationElement computationElement=(ComputationElement)flexibleElt;
    if (computationElement != null) {
      if (computationRule != null) {
        final String rule=resolveComputationRule(em,dependencyResolver,model,computationRule);
        computationElement.setRule(rule);
        specificChanges=true;
        removeAllValuesForElement(computationElement,em);
      }
      if (minLimit != null) {
        computationElement.setMinimumValue(minLimit.toString());
        specificChanges=true;
      }
      if (maxLimit != null) {
        computationElement.setMaximumValue(maxLimit.toString());
        specificChanges=true;
      }
      if (specificChanges) {
        flexibleElt=em.merge(computationElement);
      }
    }
  }
 else   if (type == ElementTypeEnum.CONTACT_LIST || (type == null && oldType == ElementTypeEnum.CONTACT_LIST)) {
    ContactListElement contactListElement=(ContactListElement)flexibleElt;
    if (contactListElement != null) {
      if ((contactListElement.getLimit() > 0 && contactListLimit == null) || (contactListLimit != null && contactListElement.getLimit() != contactListLimit.intValue())) {
        contactListElement.setLimit(contactListLimit == null ? 0 : contactListLimit.intValue());
        specificChanges=true;
      }
      if (contactListElement.getAllowedType() != contactListType) {
        contactListElement.setAllowedType(contactListType);
        specificChanges=true;
      }
      if (contactListElement.isMember() != contactListIsMember) {
        contactListElement.setMember(contactListIsMember);
        specificChanges=true;
      }
      Set<Integer> modelsToCompare=new HashSet<>(contactListAllowedModelIds);
      boolean contactModelsModified=false;
      for (      ContactModel contactModel : contactListElement.getAllowedModels()) {
        if (!modelsToCompare.remove(contactModel.getId())) {
          contactModelsModified=true;
          break;
        }
      }
      if (!modelsToCompare.isEmpty()) {
        contactModelsModified=true;
      }
      if (contactModelsModified) {
        contactListElement.setAllowedModels(contactModelDAO.findByIds(contactListAllowedModelIds));
        specificChanges=true;
      }
      if (specificChanges) {
        flexibleElt=em.merge(contactListElement);
      }
    }
  }
  em.flush();
  em.clear();
}",0.9999414108272792
35417,"/** 
 * <p> Refreshes the project banner for the current project. </p> <p> Provided   {@code project} must possess following attributes:<ul> <li>Base attributes (id, name, etc.)</li> <li> {@link ProjectDTO#PROJECT_MODEL}</li> <li>  {@link ProjectDTO#CURRENT_AMENDMENT}</li> </ul> </p>
 * @param project The current loaded project.
 */
private void refreshBanner(final ProjectDTO project){
  view.setProjectTitle(project.getName(),project.getFullName());
  view.setProjectLogo(project.getProjectModel().getVisibility(auth().getOrganizationId()));
  final Header header=view.getProjectBannerPanel().getHeader();
  if (project.getProjectModel().isUnderMaintenance()) {
    header.addStyleName(ALERT_STYLE);
    header.setHtml(header.getHtml() + ""String_Node_Str"" + I18N.MESSAGES.projectMaintenanceMessage());
  }
 else   if (project.getProjectModel().getDateMaintenance() != null) {
    header.addStyleName(ALERT_STYLE);
    String maintenanceDate=DateUtils.DATE_TIME_SHORT.format(project.getProjectModel().getDateMaintenance());
    header.setHtml(header.getHtml() + ""String_Node_Str"" + I18N.MESSAGES.projectMaintenanceScheduledMessage(maintenanceDate));
  }
 else {
    header.removeStyleName(ALERT_STYLE);
  }
  final ProjectBannerDTO banner=project.getProjectModel().getProjectBanner();
  final LayoutDTO layout=banner != null ? banner.getLayout() : null;
  final Widget bannerWidget;
  if (layout != null && layout.getGroups() != null && !layout.getGroups().isEmpty()) {
    final int rows=layout.getRowsCount() > 2 ? 2 : layout.getRowsCount();
    final int cols=layout.getColumnsCount() > 4 ? 4 : layout.getColumnsCount();
    final HTMLTable gridLayout=view.buildBannerTable(rows,cols);
    bannerWidget=gridLayout;
    for (    final LayoutGroupDTO groupLayout : layout.getGroups()) {
      if (groupLayout.getRow() + 1 > rows || groupLayout.getColumn() + 1 > cols) {
        continue;
      }
      final ContentPanel groupPanel=new ContentPanel();
      groupPanel.setLayout(new FormLayout());
      groupPanel.setTopComponent(null);
      groupPanel.setHeaderVisible(false);
      gridLayout.setWidget(groupLayout.getRow(),groupLayout.getColumn(),groupPanel);
      if (groupLayout.getConstraints() == null) {
        continue;
      }
      for (      final LayoutConstraintDTO constraint : groupLayout.getConstraints()) {
        final FlexibleElementDTO element=constraint.getFlexibleElementDTO();
        if (!(element instanceof DefaultFlexibleElementDTO)) {
          continue;
        }
        final DefaultFlexibleElementDTO defaultElement=(DefaultFlexibleElementDTO)element;
        defaultElement.setService(dispatch);
        defaultElement.setAuthenticationProvider(injector.getAuthenticationProvider());
        defaultElement.setCache(injector.getClientCache());
        defaultElement.setCurrentContainerDTO(project);
        final Integer amendmentId;
        if (project.getCurrentAmendment() != null) {
          amendmentId=project.getCurrentAmendment().getId();
        }
 else {
          amendmentId=null;
        }
        dispatch.execute(new GetValue(project.getId(),element.getId(),element.getEntityName(),amendmentId),new CommandResultHandler<ValueResult>(){
          @Override public void onCommandFailure(          final Throwable throwable){
            if (Log.isErrorEnabled()) {
              Log.error(""String_Node_Str"",throwable);
            }
            throw new RuntimeException(throwable);
          }
          @Override public void onCommandSuccess(          final ValueResult valueResult){
            if (Log.isDebugEnabled()) {
              Log.debug(""String_Node_Str"" + valueResult);
            }
            final Component component;
            if (defaultElement instanceof BudgetElementDTO) {
              component=defaultElement.getElementComponentInBanner(valueResult);
            }
 else {
              component=defaultElement.getElementComponentInBanner(null);
            }
            if (component == null) {
              return;
            }
            if (component instanceof LabelField) {
              final LabelField lableFieldComponent=(LabelField)component;
              final String textValue=(String)lableFieldComponent.getValue();
              final ToolTipConfig config=new ToolTipConfig();
              config.setMaxWidth(500);
              config.setText(textValue);
              lableFieldComponent.setToolTip(config);
              if (ClientUtils.isNotBlank(textValue)) {
                lableFieldComponent.setValue(ClientUtils.abbreviate(textValue,30));
              }
              groupPanel.add(lableFieldComponent);
            }
 else {
              groupPanel.add(component);
            }
            groupPanel.layout();
          }
        }
);
        break;
      }
    }
  }
 else {
    view.getProjectBannerPanel().setLayout(new FormLayout());
    final LabelField codeField=new LabelField();
    codeField.setReadOnly(true);
    codeField.setFieldLabel(I18N.CONSTANTS.projectName());
    codeField.setLabelSeparator(I18N.CONSTANTS.form_label_separator());
    codeField.setValue(project.getName());
    bannerWidget=codeField;
  }
  view.setProjectBanner(bannerWidget);
  view.getProjectBannerPanel().layout();
}","/** 
 * <p> Refreshes the project banner for the current project. </p> <p> Provided   {@code project} must possess following attributes:<ul> <li>Base attributes (id, name, etc.)</li> <li> {@link ProjectDTO#PROJECT_MODEL}</li> <li>  {@link ProjectDTO#CURRENT_AMENDMENT}</li> </ul> </p>
 * @param project The current loaded project.
 */
private void refreshBanner(final ProjectDTO project){
  view.setProjectTitle(project.getName(),project.getFullName());
  view.setProjectLogo(project.getProjectModel().getVisibility(auth().getOrganizationId()));
  final Header header=view.getProjectBannerPanel().getHeader();
  if (project.getProjectModel().isUnderMaintenance()) {
    header.addStyleName(ALERT_STYLE);
    header.setHtml(header.getHtml() + ""String_Node_Str"" + I18N.MESSAGES.projectMaintenanceMessage());
  }
 else   if (project.getProjectModel().getDateMaintenance() != null) {
    header.addStyleName(ALERT_STYLE);
    String maintenanceDate=DateUtils.DATE_TIME_SHORT.format(project.getProjectModel().getDateMaintenance());
    header.setHtml(header.getHtml() + ""String_Node_Str"" + I18N.MESSAGES.projectMaintenanceScheduledMessage(maintenanceDate));
  }
 else {
    header.removeStyleName(ALERT_STYLE);
  }
  final ProjectBannerDTO banner=project.getProjectModel().getProjectBanner();
  final LayoutDTO layout=banner != null ? banner.getLayout() : null;
  final Widget bannerWidget;
  if (layout != null && layout.getGroups() != null && !layout.getGroups().isEmpty()) {
    final int rows=layout.getRowsCount() > 2 ? 2 : layout.getRowsCount();
    final int cols=layout.getColumnsCount() > 4 ? 4 : layout.getColumnsCount();
    final HTMLTable gridLayout=view.buildBannerTable(rows,cols);
    bannerWidget=gridLayout;
    for (    final LayoutGroupDTO groupLayout : layout.getGroups()) {
      if (groupLayout.getRow() + 1 > rows || groupLayout.getColumn() + 1 > cols) {
        continue;
      }
      final ContentPanel groupPanel=new ContentPanel();
      groupPanel.setLayout(new FormLayout());
      groupPanel.setTopComponent(null);
      groupPanel.setHeaderVisible(false);
      gridLayout.setWidget(groupLayout.getRow(),groupLayout.getColumn(),groupPanel);
      if (groupLayout.getConstraints() == null) {
        continue;
      }
      for (      final LayoutConstraintDTO constraint : groupLayout.getConstraints()) {
        final FlexibleElementDTO element=constraint.getFlexibleElementDTO();
        if (!(element instanceof DefaultFlexibleElementDTO)) {
          continue;
        }
        final DefaultFlexibleElementDTO defaultElement=(DefaultFlexibleElementDTO)element;
        defaultElement.setService(dispatch);
        defaultElement.setAuthenticationProvider(injector.getAuthenticationProvider());
        defaultElement.setEventBus(eventBus);
        defaultElement.setCache(injector.getClientCache());
        defaultElement.setCurrentContainerDTO(project);
        final Integer amendmentId;
        if (project.getCurrentAmendment() != null) {
          amendmentId=project.getCurrentAmendment().getId();
        }
 else {
          amendmentId=null;
        }
        dispatch.execute(new GetValue(project.getId(),element.getId(),element.getEntityName(),amendmentId),new CommandResultHandler<ValueResult>(){
          @Override public void onCommandFailure(          final Throwable throwable){
            if (Log.isErrorEnabled()) {
              Log.error(""String_Node_Str"",throwable);
            }
            throw new RuntimeException(throwable);
          }
          @Override public void onCommandSuccess(          final ValueResult valueResult){
            if (Log.isDebugEnabled()) {
              Log.debug(""String_Node_Str"" + valueResult);
            }
            final Component component;
            if (defaultElement instanceof BudgetElementDTO) {
              component=defaultElement.getElementComponentInBanner(valueResult);
            }
 else {
              component=defaultElement.getElementComponentInBanner(null);
            }
            if (component == null) {
              return;
            }
            if (component instanceof LabelField) {
              final LabelField lableFieldComponent=(LabelField)component;
              final String textValue=(String)lableFieldComponent.getValue();
              final ToolTipConfig config=new ToolTipConfig();
              config.setMaxWidth(500);
              config.setText(textValue);
              lableFieldComponent.setToolTip(config);
              if (ClientUtils.isNotBlank(textValue)) {
                lableFieldComponent.setValue(ClientUtils.abbreviate(textValue,30));
              }
              groupPanel.add(lableFieldComponent);
            }
 else {
              groupPanel.add(component);
            }
            groupPanel.layout();
          }
        }
);
        break;
      }
    }
  }
 else {
    view.getProjectBannerPanel().setLayout(new FormLayout());
    final LabelField codeField=new LabelField();
    codeField.setReadOnly(true);
    codeField.setFieldLabel(I18N.CONSTANTS.projectName());
    codeField.setLabelSeparator(I18N.CONSTANTS.form_label_separator());
    codeField.setValue(project.getName());
    bannerWidget=codeField;
  }
  view.setProjectBanner(bannerWidget);
  view.getProjectBannerPanel().layout();
}",0.9956240487062404
35418,"/** 
 * Gets the columns model for the Contact models grid.
 * @return The columns model for the Contact models grid.
 */
public ColumnModel getColumnModel(){
  final List<ColumnConfig> configs=new ArrayList<ColumnConfig>();
  ColumnConfig column=new ColumnConfig(ContactModelDTO.NAME,I18N.CONSTANTS.adminContactModelName(),200);
  column.setRenderer(new GridCellRenderer<ContactModelDTO>(){
    @Override public Object render(    final ContactModelDTO model,    final String property,    final ColumnData config,    final int rowIndex,    final int colIndex,    final ListStore<ContactModelDTO> store,    final Grid<ContactModelDTO> grid){
      return ColumnProviders.renderLink(model.getName(),new ClickHandler(){
        @Override public void onClick(        final ClickEvent event){
          getGridEventHandler().onRowClickEvent(model);
        }
      }
);
    }
  }
);
  configs.add(column);
  column=new ColumnConfig(ContactModelDTO.STATUS,I18N.CONSTANTS.adminProjectModelsStatus(),200);
  column.setRenderer(new GridCellRenderer<ContactModelDTO>(){
    @Override public Object render(    final ContactModelDTO model,    final String property,    final ColumnData config,    final int rowIndex,    final int colIndex,    final ListStore<ContactModelDTO> store,    final Grid<ContactModelDTO> grid){
      final ProjectModelStatus status=!model.isUnderMaintenance() ? model.getStatus() : ProjectModelStatus.UNDER_MAINTENANCE;
      return status != null ? ProjectModelStatus.getName(status) : ""String_Node_Str"";
    }
  }
);
  configs.add(column);
  return new ColumnModel(configs);
}","/** 
 * Gets the columns model for the Contact models grid.
 * @return The columns model for the Contact models grid.
 */
public ColumnModel getColumnModel(){
  final List<ColumnConfig> configs=new ArrayList<ColumnConfig>();
  ColumnConfig column=new ColumnConfig(ContactModelDTO.NAME,I18N.CONSTANTS.adminContactModelName(),200);
  column.setRenderer(new GridCellRenderer<ContactModelDTO>(){
    @Override public Object render(    final ContactModelDTO model,    final String property,    final ColumnData config,    final int rowIndex,    final int colIndex,    final ListStore<ContactModelDTO> store,    final Grid<ContactModelDTO> grid){
      return ColumnProviders.renderLink(model.getName(),new ClickHandler(){
        @Override public void onClick(        final ClickEvent event){
          getGridEventHandler().onRowClickEvent(model);
        }
      }
);
    }
  }
);
  configs.add(column);
  column=new ColumnConfig(ContactModelDTO.STATUS,I18N.CONSTANTS.adminProjectModelsStatus(),100);
  column.setRenderer(new GridCellRenderer<ContactModelDTO>(){
    @Override public Object render(    final ContactModelDTO model,    final String property,    final ColumnData config,    final int rowIndex,    final int colIndex,    final ListStore<ContactModelDTO> store,    final Grid<ContactModelDTO> grid){
      final ProjectModelStatus status=!model.isUnderMaintenance() ? model.getStatus() : ProjectModelStatus.UNDER_MAINTENANCE;
      return status != null ? ProjectModelStatus.getName(status) : ""String_Node_Str"";
    }
  }
);
  configs.add(column);
  column=new ColumnConfig(ContactModelDTO.TYPE,I18N.CONSTANTS.adminContactModelType(),100);
  column.setRenderer(new GridCellRenderer<ContactModelDTO>(){
    @Override public Object render(    final ContactModelDTO model,    final String property,    final ColumnData config,    final int rowIndex,    final int colIndex,    final ListStore<ContactModelDTO> store,    final Grid<ContactModelDTO> grid){
      ContactModelType type=model.get(property);
      String typeLabel=I18N.CONSTANTS.contactTypeIndividualLabel();
      if (type == ContactModelType.ORGANIZATION) {
        typeLabel=I18N.CONSTANTS.contactTypeOrganizationLabel();
      }
      return typeLabel;
    }
  }
);
  configs.add(column);
  return new ColumnModel(configs);
}",0.8082262210796916
35419,"@Override public Object render(final ContactModelDTO model,final String property,final ColumnData config,final int rowIndex,final int colIndex,final ListStore<ContactModelDTO> store,final Grid<ContactModelDTO> grid){
  final ProjectModelStatus status=!model.isUnderMaintenance() ? model.getStatus() : ProjectModelStatus.UNDER_MAINTENANCE;
  return status != null ? ProjectModelStatus.getName(status) : ""String_Node_Str"";
}","@Override public Object render(final ContactModelDTO model,final String property,final ColumnData config,final int rowIndex,final int colIndex,final ListStore<ContactModelDTO> store,final Grid<ContactModelDTO> grid){
  ContactModelType type=model.get(property);
  String typeLabel=I18N.CONSTANTS.contactTypeIndividualLabel();
  if (type == ContactModelType.ORGANIZATION) {
    typeLabel=I18N.CONSTANTS.contactTypeOrganizationLabel();
  }
  return typeLabel;
}",0.5357548240635641
35420,"@Override public void refresh(final ContactDTO contactDTO){
  computationTriggerManager.prepareForContact(contactDTO);
  valueChanges.clear();
  view.getDetailsContainer().removeAll();
  final LayoutDTO layout=contactDTO.getContactModel().getDetails().getLayout();
  int count=0;
  for (  final LayoutGroupDTO groupDTO : layout.getGroups()) {
    count+=groupDTO.getConstraints().size();
  }
  if (count == 0) {
    view.fillContainer(new Label(I18N.CONSTANTS.contactDetailsNoDetails()));
    return;
  }
  formPanel=Forms.panel();
  final Grid gridLayout=new Grid(layout.getRowsCount(),layout.getColumnsCount());
  gridLayout.setCellPadding(0);
  gridLayout.setCellSpacing(0);
  formPanel.add(new Label(I18N.CONSTANTS.contactUniqueId() + contactDTO.getId()));
  final DispatchQueue queue=new DispatchQueue(dispatch,true);
  for (  final LayoutGroupDTO groupLayout : layout.getGroups()) {
    if (!groupLayout.getHasIterations()) {
      FieldSet fieldSet=createGroupLayoutFieldSet(contactDTO,groupLayout,queue,null,null,null);
      fieldSet.setHeadingHtml(groupLayout.getTitle());
      fieldSet.setCollapsible(true);
      fieldSet.setBorders(true);
      gridLayout.setWidget(groupLayout.getRow(),groupLayout.getColumn(),fieldSet);
      continue;
    }
    final FieldSet fieldSet=(FieldSet)groupLayout.getWidget();
    gridLayout.setWidget(groupLayout.getRow(),groupLayout.getColumn(),fieldSet);
    final IterableGroupPanel tabPanel=Forms.iterableGroupPanel(dispatch,groupLayout,contactDTO,ProfileUtils.isGranted(auth(),GlobalPermissionEnum.CREATE_ITERATIONS));
    tabPanel.setDelegate(this);
    fieldSet.add(tabPanel);
    tabPanel.setAutoHeight(true);
    tabPanel.setAutoWidth(true);
    tabPanel.setTabScroll(true);
    tabPanel.addStyleName(""String_Node_Str"");
    tabPanel.setBorders(true);
    tabPanel.setBodyBorder(false);
    GetLayoutGroupIterations getIterations=new GetLayoutGroupIterations(groupLayout.getId(),contactDTO.getId(),-1);
    queue.add(getIterations,new CommandResultHandler<ListResult<LayoutGroupIterationDTO>>(){
      @Override public void onCommandFailure(      final Throwable throwable){
        if (Log.isErrorEnabled()) {
          Log.error(""String_Node_Str"",throwable);
        }
        throw new RuntimeException(throwable);
      }
      @Override protected void onCommandSuccess(      ListResult<LayoutGroupIterationDTO> result){
        DispatchQueue iterationsQueue=new DispatchQueue(dispatch,true);
        for (        final LayoutGroupIterationDTO iteration : result.getList()) {
          final IterableGroupItem tab=new IterableGroupItem(tabPanel,iteration.getId(),iteration.getName());
          tabPanel.addIterationTab(tab);
          Layout tabLayout=Layouts.fitLayout();
          tab.setLayout(tabLayout);
          FieldSet tabSet=createGroupLayoutFieldSet(contactDTO,groupLayout,iterationsQueue,iteration == null ? null : iteration.getId(),tabPanel,tab);
          tab.add(tabSet);
        }
        iterationsQueue.start();
        if (tabPanel.getItemCount() > 0) {
          tabPanel.setSelection(tabPanel.getItem(0));
        }
      }
    }
,new LoadingMask(view.getDetailsContainer()));
    fieldSet.layout();
  }
  view.getSaveButton().removeAllListeners();
  view.getSaveButton().addSelectionListener(new SelectionListener<ButtonEvent>(){
    @Override public void componentSelected(    final ButtonEvent buttonEvent){
      view.getSaveButton().disable();
      dispatch.execute(buildCheckContactDuplicationCommand(contactDTO),new CommandResultHandler<ListResult<ContactDTO>>(){
        @Override protected void onCommandSuccess(        ListResult<ContactDTO> result){
          if (result == null || result.isEmpty()) {
            updateContact(contactDTO,new CommandResultHandler<ContactDTO>(){
              @Override protected void onCommandSuccess(              ContactDTO updatedContactDTO){
                view.getSaveButton().enable();
              }
            }
,view.getDetailsContainer());
            return;
          }
          final DedupeContactDialog dedupeContactDialog=view.generateDedupeDialog();
          dedupeContactDialog.getPossibleDuplicatesGrid().getStore().add(result.getList());
          dedupeContactDialog.getFirstStepMainButton().addSelectionListener(new SelectionListener<ButtonEvent>(){
            @Override public void componentSelected(            ButtonEvent ce){
              updateContact(contactDTO,new CommandResultHandler<ContactDTO>(){
                @Override protected void onCommandSuccess(                ContactDTO result){
                  dedupeContactDialog.hide();
                }
              }
,view.getDetailsContainer());
            }
          }
);
          dedupeContactDialog.setSecondStepHandler(new DedupeContactDialog.SecondStepHandler(){
            @Override public void initialize(            final Integer contactId,            final ListStore<ContactDuplicatedProperty> propertiesStore){
              updateContact(contactDTO,new CommandResultHandler<ContactDTO>(){
                @Override protected void onCommandSuccess(                ContactDTO updatedContactDTO){
                  dispatch.execute(new GetContactDuplicatedProperties(contactId,updatedContactDTO.getId(),null),new CommandResultHandler<ListResult<ContactDuplicatedProperty>>(){
                    @Override protected void onCommandSuccess(                    ListResult<ContactDuplicatedProperty> result){
                      propertiesStore.add(result.getList());
                    }
                  }
,new LoadingMask(dedupeContactDialog));
                }
              }
,dedupeContactDialog);
            }
            @Override public void downloadImage(            String id,            final Image image){
              imageProvider.provideDataUrl(id,new SuccessCallback<String>(){
                @Override public void onSuccess(                String dataUrl){
                  image.setUrl(dataUrl);
                }
              }
);
            }
            @Override public void handleDedupeContact(            final Integer targetedContactId,            List<ContactDuplicatedProperty> selectedProperties){
              dispatch.execute(new DedupeContact(selectedProperties,contactDTO.getId(),targetedContactId),new CommandResultHandler<ContactDTO>(){
                @Override protected void onCommandSuccess(                ContactDTO targetedContactDTO){
                  dedupeContactDialog.hide();
                  final PageRequest currentRequest=injector.getPageManager().getCurrentPageRequest(false);
                  eventBus.navigateRequest(Page.CONTACT_DASHBOARD.requestWith(RequestParameter.ID,targetedContactId));
                  eventBus.fireEvent(new UpdateEvent(UpdateEvent.CONTACT_DELETE,currentRequest));
                }
              }
);
            }
          }
);
          dedupeContactDialog.addWindowListener(new WindowListener(){
            @Override public void windowHide(            WindowEvent windowEvent){
              super.windowHide(windowEvent);
              if (windowEvent.getType() == Events.Hide) {
                view.getSaveButton().enable();
              }
            }
          }
);
          dedupeContactDialog.show();
        }
      }
);
    }
  }
);
  view.getDeleteButton().removeAllListeners();
  view.getDeleteButton().addSelectionListener(new SelectionListener<ButtonEvent>(){
    @Override public void componentSelected(    final ButtonEvent ce){
      onDeleteContact(contactDTO);
    }
  }
);
  view.getDeleteButton().setEnabled(canDeleteContact());
  view.getDeleteButton().setVisible(canDeleteContact());
  view.getExportButton().removeAllListeners();
  view.getExportButton().addSelectionListener(new SelectionListener<ButtonEvent>(){
    @Override public void componentSelected(    final ButtonEvent ce){
      onExportContact(contactDTO);
    }
  }
);
  queue.start();
  formPanel.add(gridLayout);
  view.fillContainer(formPanel);
}","@Override public void refresh(final ContactDTO contactDTO){
  computationTriggerManager.prepareForContact(contactDTO);
  valueChanges.clear();
  view.getDetailsContainer().removeAll();
  final LayoutDTO layout=contactDTO.getContactModel().getDetails().getLayout();
  int count=0;
  for (  final LayoutGroupDTO groupDTO : layout.getGroups()) {
    count+=groupDTO.getConstraints().size();
  }
  if (count == 0) {
    view.fillContainer(new Label(I18N.CONSTANTS.contactDetailsNoDetails()));
    return;
  }
  formPanel=Forms.panel();
  final Grid gridLayout=new Grid(layout.getRowsCount(),layout.getColumnsCount());
  gridLayout.setCellPadding(0);
  gridLayout.setCellSpacing(0);
  formPanel.add(new Label(I18N.CONSTANTS.contactUniqueId() + contactDTO.getId()));
  final DispatchQueue queue=new DispatchQueue(dispatch,true);
  for (  final LayoutGroupDTO groupLayout : layout.getGroups()) {
    if (!groupLayout.getHasIterations()) {
      FieldSet fieldSet=createGroupLayoutFieldSet(contactDTO,groupLayout,queue,null,null,null);
      fieldSet.setHeadingHtml(groupLayout.getTitle());
      fieldSet.setCollapsible(true);
      fieldSet.setBorders(true);
      gridLayout.setWidget(groupLayout.getRow(),groupLayout.getColumn(),fieldSet);
      continue;
    }
    final FieldSet fieldSet=(FieldSet)groupLayout.getWidget();
    gridLayout.setWidget(groupLayout.getRow(),groupLayout.getColumn(),fieldSet);
    final IterableGroupPanel tabPanel=Forms.iterableGroupPanel(dispatch,groupLayout,contactDTO,ProfileUtils.isGranted(auth(),GlobalPermissionEnum.CREATE_ITERATIONS));
    tabPanel.setDelegate(this);
    fieldSet.add(tabPanel);
    tabPanel.setAutoHeight(true);
    tabPanel.setAutoWidth(true);
    tabPanel.setTabScroll(true);
    tabPanel.addStyleName(""String_Node_Str"");
    tabPanel.setBorders(true);
    tabPanel.setBodyBorder(false);
    GetLayoutGroupIterations getIterations=new GetLayoutGroupIterations(groupLayout.getId(),contactDTO.getId(),-1);
    queue.add(getIterations,new CommandResultHandler<ListResult<LayoutGroupIterationDTO>>(){
      @Override public void onCommandFailure(      final Throwable throwable){
        if (Log.isErrorEnabled()) {
          Log.error(""String_Node_Str"",throwable);
        }
        throw new RuntimeException(throwable);
      }
      @Override protected void onCommandSuccess(      ListResult<LayoutGroupIterationDTO> result){
        DispatchQueue iterationsQueue=new DispatchQueue(dispatch,true);
        for (        final LayoutGroupIterationDTO iteration : result.getList()) {
          final IterableGroupItem tab=new IterableGroupItem(tabPanel,iteration.getId(),iteration.getName());
          tabPanel.addIterationTab(tab);
          Layout tabLayout=Layouts.fitLayout();
          tab.setLayout(tabLayout);
          FieldSet tabSet=createGroupLayoutFieldSet(contactDTO,groupLayout,iterationsQueue,iteration == null ? null : iteration.getId(),tabPanel,tab);
          tab.add(tabSet);
        }
        iterationsQueue.start();
        if (tabPanel.getItemCount() > 0) {
          tabPanel.setSelection(tabPanel.getItem(0));
        }
      }
    }
,new LoadingMask(view.getDetailsContainer()));
    fieldSet.layout();
  }
  view.getSaveButton().removeAllListeners();
  view.getSaveButton().addSelectionListener(new SelectionListener<ButtonEvent>(){
    @Override public void componentSelected(    final ButtonEvent buttonEvent){
      view.getSaveButton().disable();
      dispatch.execute(buildCheckContactDuplicationCommand(contactDTO),new CommandResultHandler<ListResult<ContactDTO>>(){
        @Override protected void onCommandSuccess(        ListResult<ContactDTO> result){
          if (result == null || result.isEmpty()) {
            updateContact(contactDTO,new CommandResultHandler<ContactDTO>(){
              @Override protected void onCommandSuccess(              ContactDTO updatedContactDTO){
                view.getSaveButton().enable();
              }
            }
,view.getDetailsContainer());
            return;
          }
          final DedupeContactDialog dedupeContactDialog=view.generateDedupeDialog();
          dedupeContactDialog.getPossibleDuplicatesGrid().getStore().add(result.getList());
          dedupeContactDialog.getFirstStepMainButton().addSelectionListener(new SelectionListener<ButtonEvent>(){
            @Override public void componentSelected(            ButtonEvent ce){
              updateContact(contactDTO,new CommandResultHandler<ContactDTO>(){
                @Override protected void onCommandSuccess(                ContactDTO result){
                  dedupeContactDialog.hide();
                }
              }
,view.getDetailsContainer());
            }
          }
);
          dedupeContactDialog.setSecondStepHandler(new DedupeContactDialog.SecondStepHandler(){
            @Override public void initialize(            final Integer contactId,            final ListStore<ContactDuplicatedProperty> propertiesStore){
              updateContact(contactDTO,new CommandResultHandler<ContactDTO>(){
                @Override protected void onCommandSuccess(                ContactDTO updatedContactDTO){
                  dispatch.execute(new GetContactDuplicatedProperties(contactId,updatedContactDTO.getId(),null),new CommandResultHandler<ListResult<ContactDuplicatedProperty>>(){
                    @Override protected void onCommandSuccess(                    ListResult<ContactDuplicatedProperty> result){
                      propertiesStore.add(result.getList());
                    }
                  }
,new LoadingMask(dedupeContactDialog));
                }
              }
,dedupeContactDialog);
            }
            @Override public void downloadImage(            String id,            final Image image){
              imageProvider.provideDataUrl(id,new SuccessCallback<String>(){
                @Override public void onSuccess(                String dataUrl){
                  image.setUrl(dataUrl);
                }
              }
);
            }
            @Override public void handleDedupeContact(            final Integer targetedContactId,            List<ContactDuplicatedProperty> selectedProperties){
              dispatch.execute(new DedupeContact(selectedProperties,contactDTO.getId(),targetedContactId),new CommandResultHandler<ContactDTO>(){
                @Override protected void onCommandSuccess(                ContactDTO targetedContactDTO){
                  dedupeContactDialog.hide();
                  final PageRequest currentRequest=injector.getPageManager().getCurrentPageRequest(false);
                  eventBus.navigateRequest(Page.CONTACT_DASHBOARD.requestWith(RequestParameter.ID,targetedContactId));
                  eventBus.fireEvent(new UpdateEvent(UpdateEvent.CONTACT_DELETE,currentRequest));
                }
              }
);
            }
            @Override public void handleCancel(){
              dedupeContactDialog.hide();
            }
          }
);
          dedupeContactDialog.addWindowListener(new WindowListener(){
            @Override public void windowHide(            WindowEvent windowEvent){
              super.windowHide(windowEvent);
              if (windowEvent.getType() == Events.Hide) {
                view.getSaveButton().enable();
              }
            }
          }
);
          dedupeContactDialog.show();
        }
      }
);
    }
  }
);
  view.getDeleteButton().removeAllListeners();
  view.getDeleteButton().addSelectionListener(new SelectionListener<ButtonEvent>(){
    @Override public void componentSelected(    final ButtonEvent ce){
      onDeleteContact(contactDTO);
    }
  }
);
  view.getDeleteButton().setEnabled(canDeleteContact());
  view.getDeleteButton().setVisible(canDeleteContact());
  view.getExportButton().removeAllListeners();
  view.getExportButton().addSelectionListener(new SelectionListener<ButtonEvent>(){
    @Override public void componentSelected(    final ButtonEvent ce){
      onExportContact(contactDTO);
    }
  }
);
  queue.start();
  formPanel.add(gridLayout);
  view.fillContainer(formPanel);
}",0.993392345094128
35421,"/** 
 * Builds a new contact list panel with default values.
 */
@Inject public ContactsListWidget(final View view,final Injector injector){
  super(view,injector);
  createContactHandler=new CreateContactHandler(){
    @Override public void handleContactCreation(    final ContactModelDTO contactModelDTO,    final String email,    final String firstName,    final String familyName,    final String organizationName,    final OrgUnitDTO mainOrgUnit,    final List<OrgUnitDTO> secondaryOrgUnits){
      CheckContactDuplication checkContactDuplication;
      if (contactModelDTO.getType() == ContactModelType.INDIVIDUAL) {
        checkContactDuplication=new CheckContactDuplication(null,email,familyName,firstName);
      }
 else {
        checkContactDuplication=new CheckContactDuplication(null,email,familyName,null);
      }
      dispatch.execute(checkContactDuplication,new AsyncCallback<ListResult<ContactDTO>>(){
        @Override public void onFailure(        Throwable caught){
          Log.error(""String_Node_Str"");
        }
        @Override public void onSuccess(        ListResult<ContactDTO> result){
          final HashMap<String,Object> properties=buildPropertyMap(contactModelDTO,email,firstName,familyName,organizationName,mainOrgUnit,secondaryOrgUnits);
          if (result == null || result.getSize() == 0) {
            createEntity(properties);
            return;
          }
          final DedupeContactDialog dedupeContactDialog=new DedupeContactDialog(true);
          dedupeContactDialog.getPossibleDuplicatesGrid().getStore().add(result.getList());
          dedupeContactDialog.getFirstStepMainButton().addSelectionListener(new SelectionListener<ButtonEvent>(){
            @Override public void componentSelected(            ButtonEvent ce){
              createEntity(properties);
              dedupeContactDialog.hide();
            }
          }
);
          dedupeContactDialog.setSecondStepHandler(new DedupeContactDialog.SecondStepHandler(){
            @Override public void initialize(            final Integer contactId,            final ListStore<ContactDuplicatedProperty> propertiesStore){
              dispatch.execute(new GetContactDuplicatedProperties(contactId,null,properties),new CommandResultHandler<ListResult<ContactDuplicatedProperty>>(){
                @Override protected void onCommandSuccess(                ListResult<ContactDuplicatedProperty> result){
                  propertiesStore.add(result.getList());
                }
              }
,new LoadingMask(dedupeContactDialog));
            }
            @Override public void downloadImage(            String id,            final Image image){
              imageProvider.provideDataUrl(id,new SuccessCallback<String>(){
                @Override public void onSuccess(                String dataUrl){
                  image.setUrl(dataUrl);
                }
              }
);
            }
            @Override public void handleDedupeContact(            final Integer targetedContactId,            List<ContactDuplicatedProperty> selectedProperties){
              dispatch.execute(new DedupeContact(selectedProperties,targetedContactId),new CommandResultHandler<ContactDTO>(){
                @Override protected void onCommandSuccess(                ContactDTO targetedContactDTO){
                  dedupeContactDialog.hide();
                  eventBus.navigateRequest(Page.CONTACT_DASHBOARD.requestWith(RequestParameter.ID,targetedContactId));
                }
              }
);
            }
          }
);
          dedupeContactDialog.show();
        }
      }
);
    }
  }
;
}","/** 
 * Builds a new contact list panel with default values.
 */
@Inject public ContactsListWidget(final View view,final Injector injector){
  super(view,injector);
  createContactHandler=new CreateContactHandler(){
    @Override public void handleContactCreation(    final ContactModelDTO contactModelDTO,    final String email,    final String firstName,    final String familyName,    final String organizationName,    final OrgUnitDTO mainOrgUnit,    final List<OrgUnitDTO> secondaryOrgUnits){
      CheckContactDuplication checkContactDuplication;
      if (contactModelDTO.getType() == ContactModelType.INDIVIDUAL) {
        checkContactDuplication=new CheckContactDuplication(null,email,familyName,firstName);
      }
 else {
        checkContactDuplication=new CheckContactDuplication(null,email,familyName,null);
      }
      dispatch.execute(checkContactDuplication,new AsyncCallback<ListResult<ContactDTO>>(){
        @Override public void onFailure(        Throwable caught){
          Log.error(""String_Node_Str"");
        }
        @Override public void onSuccess(        ListResult<ContactDTO> result){
          final HashMap<String,Object> properties=buildPropertyMap(contactModelDTO,email,firstName,familyName,organizationName,mainOrgUnit,secondaryOrgUnits);
          if (result == null || result.getSize() == 0) {
            createEntity(properties);
            return;
          }
          final DedupeContactDialog dedupeContactDialog=new DedupeContactDialog(true);
          dedupeContactDialog.getPossibleDuplicatesGrid().getStore().add(result.getList());
          dedupeContactDialog.getFirstStepMainButton().addSelectionListener(new SelectionListener<ButtonEvent>(){
            @Override public void componentSelected(            ButtonEvent ce){
              createEntity(properties);
              dedupeContactDialog.hide();
            }
          }
);
          dedupeContactDialog.setSecondStepHandler(new DedupeContactDialog.SecondStepHandler(){
            @Override public void initialize(            final Integer contactId,            final ListStore<ContactDuplicatedProperty> propertiesStore){
              dispatch.execute(new GetContactDuplicatedProperties(contactId,null,properties),new CommandResultHandler<ListResult<ContactDuplicatedProperty>>(){
                @Override protected void onCommandSuccess(                ListResult<ContactDuplicatedProperty> result){
                  propertiesStore.add(result.getList());
                }
              }
,new LoadingMask(dedupeContactDialog));
            }
            @Override public void downloadImage(            String id,            final Image image){
              imageProvider.provideDataUrl(id,new SuccessCallback<String>(){
                @Override public void onSuccess(                String dataUrl){
                  image.setUrl(dataUrl);
                }
              }
);
            }
            @Override public void handleDedupeContact(            final Integer targetedContactId,            List<ContactDuplicatedProperty> selectedProperties){
              dispatch.execute(new DedupeContact(selectedProperties,targetedContactId),new CommandResultHandler<ContactDTO>(){
                @Override protected void onCommandSuccess(                ContactDTO targetedContactDTO){
                  dedupeContactDialog.hide();
                  eventBus.navigateRequest(Page.CONTACT_DASHBOARD.requestWith(RequestParameter.ID,targetedContactId));
                }
              }
);
            }
            @Override public void handleCancel(){
              dedupeContactDialog.hide();
            }
          }
);
          dedupeContactDialog.show();
        }
      }
);
    }
  }
;
}",0.985558583106267
35422,"@Override public void handleContactCreation(final ContactModelDTO contactModelDTO,final String email,final String firstName,final String familyName,final String organizationName,final OrgUnitDTO mainOrgUnit,final List<OrgUnitDTO> secondaryOrgUnits){
  CheckContactDuplication checkContactDuplication;
  if (contactModelDTO.getType() == ContactModelType.INDIVIDUAL) {
    checkContactDuplication=new CheckContactDuplication(null,email,familyName,firstName);
  }
 else {
    checkContactDuplication=new CheckContactDuplication(null,email,familyName,null);
  }
  dispatch.execute(checkContactDuplication,new AsyncCallback<ListResult<ContactDTO>>(){
    @Override public void onFailure(    Throwable caught){
      Log.error(""String_Node_Str"");
    }
    @Override public void onSuccess(    ListResult<ContactDTO> result){
      final HashMap<String,Object> properties=buildPropertyMap(contactModelDTO,email,firstName,familyName,organizationName,mainOrgUnit,secondaryOrgUnits);
      if (result == null || result.getSize() == 0) {
        createEntity(properties);
        return;
      }
      final DedupeContactDialog dedupeContactDialog=new DedupeContactDialog(true);
      dedupeContactDialog.getPossibleDuplicatesGrid().getStore().add(result.getList());
      dedupeContactDialog.getFirstStepMainButton().addSelectionListener(new SelectionListener<ButtonEvent>(){
        @Override public void componentSelected(        ButtonEvent ce){
          createEntity(properties);
          dedupeContactDialog.hide();
        }
      }
);
      dedupeContactDialog.setSecondStepHandler(new DedupeContactDialog.SecondStepHandler(){
        @Override public void initialize(        final Integer contactId,        final ListStore<ContactDuplicatedProperty> propertiesStore){
          dispatch.execute(new GetContactDuplicatedProperties(contactId,null,properties),new CommandResultHandler<ListResult<ContactDuplicatedProperty>>(){
            @Override protected void onCommandSuccess(            ListResult<ContactDuplicatedProperty> result){
              propertiesStore.add(result.getList());
            }
          }
,new LoadingMask(dedupeContactDialog));
        }
        @Override public void downloadImage(        String id,        final Image image){
          imageProvider.provideDataUrl(id,new SuccessCallback<String>(){
            @Override public void onSuccess(            String dataUrl){
              image.setUrl(dataUrl);
            }
          }
);
        }
        @Override public void handleDedupeContact(        final Integer targetedContactId,        List<ContactDuplicatedProperty> selectedProperties){
          dispatch.execute(new DedupeContact(selectedProperties,targetedContactId),new CommandResultHandler<ContactDTO>(){
            @Override protected void onCommandSuccess(            ContactDTO targetedContactDTO){
              dedupeContactDialog.hide();
              eventBus.navigateRequest(Page.CONTACT_DASHBOARD.requestWith(RequestParameter.ID,targetedContactId));
            }
          }
);
        }
      }
);
      dedupeContactDialog.show();
    }
  }
);
}","@Override public void handleContactCreation(final ContactModelDTO contactModelDTO,final String email,final String firstName,final String familyName,final String organizationName,final OrgUnitDTO mainOrgUnit,final List<OrgUnitDTO> secondaryOrgUnits){
  CheckContactDuplication checkContactDuplication;
  if (contactModelDTO.getType() == ContactModelType.INDIVIDUAL) {
    checkContactDuplication=new CheckContactDuplication(null,email,familyName,firstName);
  }
 else {
    checkContactDuplication=new CheckContactDuplication(null,email,familyName,null);
  }
  dispatch.execute(checkContactDuplication,new AsyncCallback<ListResult<ContactDTO>>(){
    @Override public void onFailure(    Throwable caught){
      Log.error(""String_Node_Str"");
    }
    @Override public void onSuccess(    ListResult<ContactDTO> result){
      final HashMap<String,Object> properties=buildPropertyMap(contactModelDTO,email,firstName,familyName,organizationName,mainOrgUnit,secondaryOrgUnits);
      if (result == null || result.getSize() == 0) {
        createEntity(properties);
        return;
      }
      final DedupeContactDialog dedupeContactDialog=new DedupeContactDialog(true);
      dedupeContactDialog.getPossibleDuplicatesGrid().getStore().add(result.getList());
      dedupeContactDialog.getFirstStepMainButton().addSelectionListener(new SelectionListener<ButtonEvent>(){
        @Override public void componentSelected(        ButtonEvent ce){
          createEntity(properties);
          dedupeContactDialog.hide();
        }
      }
);
      dedupeContactDialog.setSecondStepHandler(new DedupeContactDialog.SecondStepHandler(){
        @Override public void initialize(        final Integer contactId,        final ListStore<ContactDuplicatedProperty> propertiesStore){
          dispatch.execute(new GetContactDuplicatedProperties(contactId,null,properties),new CommandResultHandler<ListResult<ContactDuplicatedProperty>>(){
            @Override protected void onCommandSuccess(            ListResult<ContactDuplicatedProperty> result){
              propertiesStore.add(result.getList());
            }
          }
,new LoadingMask(dedupeContactDialog));
        }
        @Override public void downloadImage(        String id,        final Image image){
          imageProvider.provideDataUrl(id,new SuccessCallback<String>(){
            @Override public void onSuccess(            String dataUrl){
              image.setUrl(dataUrl);
            }
          }
);
        }
        @Override public void handleDedupeContact(        final Integer targetedContactId,        List<ContactDuplicatedProperty> selectedProperties){
          dispatch.execute(new DedupeContact(selectedProperties,targetedContactId),new CommandResultHandler<ContactDTO>(){
            @Override protected void onCommandSuccess(            ContactDTO targetedContactDTO){
              dedupeContactDialog.hide();
              eventBus.navigateRequest(Page.CONTACT_DASHBOARD.requestWith(RequestParameter.ID,targetedContactId));
            }
          }
);
        }
        @Override public void handleCancel(){
          dedupeContactDialog.hide();
        }
      }
);
      dedupeContactDialog.show();
    }
  }
);
}",0.9850888324873096
35423,"@Override public void onPageRequest(PageRequest request){
  setPageTitle(I18N.CONSTANTS.GLOBAL_EXPORT());
}","@Override public void onPageRequest(PageRequest request){
  setPageTitle(I18N.CONSTANTS.contactsExport());
}",0.8837209302325582
35424,"@Override public void componentSelected(ButtonEvent ce){
  UpdateGlobalContactExportSettingsCommand settings=new UpdateGlobalContactExportSettingsCommand(view.getFieldsMap());
  if (view.getExcelChoice().getValue()) {
    settings.setExportFormat(ExportUtils.ExportFormat.XLS);
  }
 else {
    settings.setExportFormat(ExportUtils.ExportFormat.ODS);
  }
  if (view.getExportSchedulesBox().getValue() == null || view.getExportSchedulesBox().getValue().getValue() == 0) {
    settings.setAutoExportFrequency(null);
  }
 else {
    if (view.getExportSchedulesBox().getValue().getValue() == 31) {
      settings.setAutoExportFrequency(view.getExportMonthlySchedulesBox().getValue().getValue());
    }
 else     if (view.getExportSchedulesBox().getValue().getValue() == 61) {
      settings.setAutoExportFrequency(view.getExportWeeklySchedulesBox().getValue().getValue());
    }
 else {
      settings.setAutoExportFrequency(view.getExportSchedulesBox().getValue().getValue());
    }
  }
  if (view.getDeleteSchedulesBox().getValue() == null || view.getDeleteSchedulesBox().getValue().getValue() == 0) {
    settings.setAutoDeleteFrequency(null);
  }
 else {
    settings.setAutoDeleteFrequency(view.getDeleteSchedulesBox().getValue().getValue());
  }
  settings.setOrganizationId(auth().getOrganizationId());
  dispatch.execute(settings,new CommandResultHandler<VoidResult>(){
    @Override public void onCommandFailure(    Throwable caught){
      N10N.warn(I18N.CONSTANTS.saveExportConfiguration(),I18N.MESSAGES.adminStandardCreationFailure(I18N.CONSTANTS.globalExportConfiguration()));
    }
    @Override public void onCommandSuccess(    VoidResult result){
      view.hide();
      N10N.infoNotif(I18N.CONSTANTS.saveExportConfiguration(),I18N.MESSAGES.adminStandardUpdateSuccess(I18N.CONSTANTS.globalExportConfiguration()));
    }
  }
);
}","@Override public void componentSelected(ButtonEvent ce){
  UpdateGlobalContactExportSettingsCommand settings=new UpdateGlobalContactExportSettingsCommand(view.getFieldsMap());
  if (view.getExcelChoice().getValue()) {
    settings.setExportFormat(ExportUtils.ExportFormat.XLS);
  }
 else {
    settings.setExportFormat(ExportUtils.ExportFormat.ODS);
  }
  if (view.getExportSchedulesBox().getValue() == null || view.getExportSchedulesBox().getValue().getValue() == 0) {
    settings.setAutoExportFrequency(null);
  }
 else {
    if (view.getExportSchedulesBox().getValue().getValue() == 31) {
      settings.setAutoExportFrequency(view.getExportMonthlySchedulesBox().getValue().getValue());
    }
 else     if (view.getExportSchedulesBox().getValue().getValue() == 61) {
      settings.setAutoExportFrequency(view.getExportWeeklySchedulesBox().getValue().getValue());
    }
 else {
      settings.setAutoExportFrequency(view.getExportSchedulesBox().getValue().getValue());
    }
  }
  if (view.getDeleteSchedulesBox().getValue() == null || view.getDeleteSchedulesBox().getValue().getValue() == 0) {
    settings.setAutoDeleteFrequency(null);
  }
 else {
    settings.setAutoDeleteFrequency(view.getDeleteSchedulesBox().getValue().getValue());
  }
  settings.setOrganizationId(auth().getOrganizationId());
  dispatch.execute(settings,new CommandResultHandler<VoidResult>(){
    @Override public void onCommandFailure(    Throwable caught){
      N10N.warn(I18N.CONSTANTS.saveExportConfiguration(),I18N.MESSAGES.adminStandardCreationFailure(I18N.CONSTANTS.globalContactsExportConfiguration()));
    }
    @Override public void onCommandSuccess(    VoidResult result){
      view.hide();
      N10N.infoNotif(I18N.CONSTANTS.saveExportConfiguration(),I18N.MESSAGES.adminStandardUpdateSuccess(I18N.CONSTANTS.globalContactsExportConfiguration()));
    }
  }
);
}",0.9924242424242424
35425,"private void saveButtonListener(){
  view.getSaveButton().addSelectionListener(new SelectionListener<ButtonEvent>(){
    @Override public void componentSelected(    ButtonEvent ce){
      UpdateGlobalContactExportSettingsCommand settings=new UpdateGlobalContactExportSettingsCommand(view.getFieldsMap());
      if (view.getExcelChoice().getValue()) {
        settings.setExportFormat(ExportUtils.ExportFormat.XLS);
      }
 else {
        settings.setExportFormat(ExportUtils.ExportFormat.ODS);
      }
      if (view.getExportSchedulesBox().getValue() == null || view.getExportSchedulesBox().getValue().getValue() == 0) {
        settings.setAutoExportFrequency(null);
      }
 else {
        if (view.getExportSchedulesBox().getValue().getValue() == 31) {
          settings.setAutoExportFrequency(view.getExportMonthlySchedulesBox().getValue().getValue());
        }
 else         if (view.getExportSchedulesBox().getValue().getValue() == 61) {
          settings.setAutoExportFrequency(view.getExportWeeklySchedulesBox().getValue().getValue());
        }
 else {
          settings.setAutoExportFrequency(view.getExportSchedulesBox().getValue().getValue());
        }
      }
      if (view.getDeleteSchedulesBox().getValue() == null || view.getDeleteSchedulesBox().getValue().getValue() == 0) {
        settings.setAutoDeleteFrequency(null);
      }
 else {
        settings.setAutoDeleteFrequency(view.getDeleteSchedulesBox().getValue().getValue());
      }
      settings.setOrganizationId(auth().getOrganizationId());
      dispatch.execute(settings,new CommandResultHandler<VoidResult>(){
        @Override public void onCommandFailure(        Throwable caught){
          N10N.warn(I18N.CONSTANTS.saveExportConfiguration(),I18N.MESSAGES.adminStandardCreationFailure(I18N.CONSTANTS.globalExportConfiguration()));
        }
        @Override public void onCommandSuccess(        VoidResult result){
          view.hide();
          N10N.infoNotif(I18N.CONSTANTS.saveExportConfiguration(),I18N.MESSAGES.adminStandardUpdateSuccess(I18N.CONSTANTS.globalExportConfiguration()));
        }
      }
);
    }
  }
);
}","private void saveButtonListener(){
  view.getSaveButton().addSelectionListener(new SelectionListener<ButtonEvent>(){
    @Override public void componentSelected(    ButtonEvent ce){
      UpdateGlobalContactExportSettingsCommand settings=new UpdateGlobalContactExportSettingsCommand(view.getFieldsMap());
      if (view.getExcelChoice().getValue()) {
        settings.setExportFormat(ExportUtils.ExportFormat.XLS);
      }
 else {
        settings.setExportFormat(ExportUtils.ExportFormat.ODS);
      }
      if (view.getExportSchedulesBox().getValue() == null || view.getExportSchedulesBox().getValue().getValue() == 0) {
        settings.setAutoExportFrequency(null);
      }
 else {
        if (view.getExportSchedulesBox().getValue().getValue() == 31) {
          settings.setAutoExportFrequency(view.getExportMonthlySchedulesBox().getValue().getValue());
        }
 else         if (view.getExportSchedulesBox().getValue().getValue() == 61) {
          settings.setAutoExportFrequency(view.getExportWeeklySchedulesBox().getValue().getValue());
        }
 else {
          settings.setAutoExportFrequency(view.getExportSchedulesBox().getValue().getValue());
        }
      }
      if (view.getDeleteSchedulesBox().getValue() == null || view.getDeleteSchedulesBox().getValue().getValue() == 0) {
        settings.setAutoDeleteFrequency(null);
      }
 else {
        settings.setAutoDeleteFrequency(view.getDeleteSchedulesBox().getValue().getValue());
      }
      settings.setOrganizationId(auth().getOrganizationId());
      dispatch.execute(settings,new CommandResultHandler<VoidResult>(){
        @Override public void onCommandFailure(        Throwable caught){
          N10N.warn(I18N.CONSTANTS.saveExportConfiguration(),I18N.MESSAGES.adminStandardCreationFailure(I18N.CONSTANTS.globalContactsExportConfiguration()));
        }
        @Override public void onCommandSuccess(        VoidResult result){
          view.hide();
          N10N.infoNotif(I18N.CONSTANTS.saveExportConfiguration(),I18N.MESSAGES.adminStandardUpdateSuccess(I18N.CONSTANTS.globalContactsExportConfiguration()));
        }
      }
);
    }
  }
);
}",0.993414863593603
35426,"private void loadElement(){
  GetGlobalContactExportSettings settingsCommand=new GetGlobalContactExportSettings(auth().getOrganizationId(),true);
  dispatch.execute(settingsCommand,new CommandResultHandler<GlobalContactExportSettingsDTO>(){
    @Override public void onCommandFailure(    Throwable caught){
      N10N.warn(I18N.CONSTANTS.globalExportConfiguration(),I18N.CONSTANTS.serverError());
    }
    @Override public void onCommandSuccess(    GlobalContactExportSettingsDTO result){
      if (result.getExportFormat() != null) {
switch (result.getExportFormat()) {
case XLS:
          view.getExcelChoice().setValue(true);
        break;
case ODS:
      view.getCalcChoice().setValue(true);
    break;
}
}
view.getModelsStore().add(result.getContactModelsDTO());
view.getModelsStore().commitChanges();
if (((ExportContactsSettingView)view).exportScheduleMap.get(result.getAutoExportFrequency()) != null || ((ExportContactsSettingView)view).monthScheduleMap.get(result.getAutoExportFrequency()) != null || ((ExportContactsSettingView)view).weekScheduleMap.get(result.getAutoExportFrequency()) != null) {
if (result.getAutoExportFrequency() >= 31 && result.getAutoExportFrequency() <= 58) {
  view.getExportSchedulesBox().setValue(((ExportContactsSettingView)view).exportScheduleMap.get(31));
  view.getExportMonthlySchedulesBox().show();
  view.getExportMonthlySchedulesBox().setValue(((ExportContactsSettingView)view).monthScheduleMap.get(result.getAutoExportFrequency()));
}
 else if (result.getAutoExportFrequency() >= 61 && result.getAutoExportFrequency() <= 67) {
  view.getExportSchedulesBox().setValue(((ExportContactsSettingView)view).exportScheduleMap.get(61));
  view.getExportWeeklySchedulesBox().show();
  view.getExportWeeklySchedulesBox().setValue(((ExportContactsSettingView)view).weekScheduleMap.get(result.getAutoExportFrequency()));
}
 else {
  view.getExportSchedulesBox().setValue(((ExportContactsSettingView)view).exportScheduleMap.get(result.getAutoExportFrequency()));
}
}
if (((ExportContactsSettingView)view).deleteScheduleMap.get(result.getAutoDeleteFrequency()) != null) {
view.getDeleteSchedulesBox().setValue(((ExportContactsSettingView)view).deleteScheduleMap.get(result.getAutoDeleteFrequency()));
}
}
}
,new LoadingMask(view.getPanel(),I18N.CONSTANTS.loading()));
}","private void loadElement(){
  GetGlobalContactExportSettings settingsCommand=new GetGlobalContactExportSettings(auth().getOrganizationId(),true);
  dispatch.execute(settingsCommand,new CommandResultHandler<GlobalContactExportSettingsDTO>(){
    @Override public void onCommandFailure(    Throwable caught){
      N10N.warn(I18N.CONSTANTS.globalContactsExportConfiguration(),I18N.CONSTANTS.serverError());
    }
    @Override public void onCommandSuccess(    GlobalContactExportSettingsDTO result){
      if (result.getExportFormat() != null) {
switch (result.getExportFormat()) {
case XLS:
          view.getExcelChoice().setValue(true);
        break;
case ODS:
      view.getCalcChoice().setValue(true);
    break;
}
}
view.getModelsStore().add(result.getContactModelsDTO());
view.getModelsStore().commitChanges();
if (((ExportContactsSettingView)view).exportScheduleMap.get(result.getAutoExportFrequency()) != null || ((ExportContactsSettingView)view).monthScheduleMap.get(result.getAutoExportFrequency()) != null || ((ExportContactsSettingView)view).weekScheduleMap.get(result.getAutoExportFrequency()) != null) {
if (result.getAutoExportFrequency() >= 31 && result.getAutoExportFrequency() <= 58) {
  view.getExportSchedulesBox().setValue(((ExportContactsSettingView)view).exportScheduleMap.get(31));
  view.getExportMonthlySchedulesBox().show();
  view.getExportMonthlySchedulesBox().setValue(((ExportContactsSettingView)view).monthScheduleMap.get(result.getAutoExportFrequency()));
}
 else if (result.getAutoExportFrequency() >= 61 && result.getAutoExportFrequency() <= 67) {
  view.getExportSchedulesBox().setValue(((ExportContactsSettingView)view).exportScheduleMap.get(61));
  view.getExportWeeklySchedulesBox().show();
  view.getExportWeeklySchedulesBox().setValue(((ExportContactsSettingView)view).weekScheduleMap.get(result.getAutoExportFrequency()));
}
 else {
  view.getExportSchedulesBox().setValue(((ExportContactsSettingView)view).exportScheduleMap.get(result.getAutoExportFrequency()));
}
}
if (((ExportContactsSettingView)view).deleteScheduleMap.get(result.getAutoDeleteFrequency()) != null) {
view.getDeleteSchedulesBox().setValue(((ExportContactsSettingView)view).deleteScheduleMap.get(result.getAutoDeleteFrequency()));
}
}
}
,new LoadingMask(view.getPanel(),I18N.CONSTANTS.loading()));
}",0.9982661465106198
35427,"@Override public void onCommandSuccess(VoidResult result){
  view.hide();
  N10N.infoNotif(I18N.CONSTANTS.saveExportConfiguration(),I18N.MESSAGES.adminStandardUpdateSuccess(I18N.CONSTANTS.globalExportConfiguration()));
}","@Override public void onCommandSuccess(VoidResult result){
  view.hide();
  N10N.infoNotif(I18N.CONSTANTS.saveExportConfiguration(),I18N.MESSAGES.adminStandardUpdateSuccess(I18N.CONSTANTS.globalContactsExportConfiguration()));
}",0.9821428571428572
35428,"@Override public void onCommandFailure(Throwable caught){
  N10N.warn(I18N.CONSTANTS.saveExportConfiguration(),I18N.MESSAGES.adminStandardCreationFailure(I18N.CONSTANTS.globalExportConfiguration()));
}","@Override public void onCommandFailure(Throwable caught){
  N10N.warn(I18N.CONSTANTS.saveExportConfiguration(),I18N.MESSAGES.adminStandardCreationFailure(I18N.CONSTANTS.globalContactsExportConfiguration()));
}",0.9804878048780488
35429,"@Override public void onPageRequest(PageRequest request){
  view.clearFrom();
  loadElement();
  setPageTitle(I18N.CONSTANTS.globalExportConfiguration());
}","@Override public void onPageRequest(PageRequest request){
  view.clearFrom();
  loadElement();
  setPageTitle(I18N.CONSTANTS.globalContactsExportConfiguration());
}",0.975
35430,"@Override public void onPageRequest(PageRequest request){
  setPageTitle(I18N.CONSTANTS.GLOBAL_EXPORT());
}","@Override public void onPageRequest(PageRequest request){
  setPageTitle(I18N.CONSTANTS.projectsExport());
}",0.8837209302325582
35431,"@Override public void componentSelected(ButtonEvent ce){
  UpdateGlobalExportSettingsCommand settings=new UpdateGlobalExportSettingsCommand(view.getFieldsMap());
  if (view.getExcelChoice().getValue()) {
    settings.setExportFormat(ExportUtils.ExportFormat.XLS);
  }
 else {
    settings.setExportFormat(ExportUtils.ExportFormat.ODS);
  }
  if (view.getExportSchedulesBox().getValue() == null || view.getExportSchedulesBox().getValue().getValue() == 0) {
    settings.setAutoExportFrequency(null);
  }
 else {
    if (view.getExportSchedulesBox().getValue().getValue() == 31) {
      settings.setAutoExportFrequency(view.getExportMonthlySchedulesBox().getValue().getValue());
    }
 else     if (view.getExportSchedulesBox().getValue().getValue() == 61) {
      settings.setAutoExportFrequency(view.getExportWeeklySchedulesBox().getValue().getValue());
    }
 else {
      settings.setAutoExportFrequency(view.getExportSchedulesBox().getValue().getValue());
    }
  }
  if (view.getDeleteSchedulesBox().getValue() == null || view.getDeleteSchedulesBox().getValue().getValue() == 0) {
    settings.setAutoDeleteFrequency(null);
  }
 else {
    settings.setAutoDeleteFrequency(view.getDeleteSchedulesBox().getValue().getValue());
  }
  settings.setOrganizationId(auth().getOrganizationId());
  dispatch.execute(settings,new CommandResultHandler<VoidResult>(){
    @Override public void onCommandFailure(    Throwable caught){
      N10N.warn(I18N.CONSTANTS.saveExportConfiguration(),I18N.MESSAGES.adminStandardCreationFailure(I18N.CONSTANTS.globalExportConfiguration()));
    }
    @Override public void onCommandSuccess(    VoidResult result){
      view.hide();
      N10N.infoNotif(I18N.CONSTANTS.saveExportConfiguration(),I18N.MESSAGES.adminStandardUpdateSuccess(I18N.CONSTANTS.globalExportConfiguration()));
    }
  }
);
}","@Override public void componentSelected(ButtonEvent ce){
  UpdateGlobalExportSettingsCommand settings=new UpdateGlobalExportSettingsCommand(view.getFieldsMap());
  if (view.getExcelChoice().getValue()) {
    settings.setExportFormat(ExportUtils.ExportFormat.XLS);
  }
 else {
    settings.setExportFormat(ExportUtils.ExportFormat.ODS);
  }
  if (view.getExportSchedulesBox().getValue() == null || view.getExportSchedulesBox().getValue().getValue() == 0) {
    settings.setAutoExportFrequency(null);
  }
 else {
    if (view.getExportSchedulesBox().getValue().getValue() == 31) {
      settings.setAutoExportFrequency(view.getExportMonthlySchedulesBox().getValue().getValue());
    }
 else     if (view.getExportSchedulesBox().getValue().getValue() == 61) {
      settings.setAutoExportFrequency(view.getExportWeeklySchedulesBox().getValue().getValue());
    }
 else {
      settings.setAutoExportFrequency(view.getExportSchedulesBox().getValue().getValue());
    }
  }
  if (view.getDeleteSchedulesBox().getValue() == null || view.getDeleteSchedulesBox().getValue().getValue() == 0) {
    settings.setAutoDeleteFrequency(null);
  }
 else {
    settings.setAutoDeleteFrequency(view.getDeleteSchedulesBox().getValue().getValue());
  }
  settings.setOrganizationId(auth().getOrganizationId());
  dispatch.execute(settings,new CommandResultHandler<VoidResult>(){
    @Override public void onCommandFailure(    Throwable caught){
      N10N.warn(I18N.CONSTANTS.saveExportConfiguration(),I18N.MESSAGES.adminStandardCreationFailure(I18N.CONSTANTS.globalProjectsExportConfiguration()));
    }
    @Override public void onCommandSuccess(    VoidResult result){
      view.hide();
      N10N.infoNotif(I18N.CONSTANTS.saveExportConfiguration(),I18N.MESSAGES.adminStandardUpdateSuccess(I18N.CONSTANTS.globalProjectsExportConfiguration()));
    }
  }
);
}",0.9956379498364232
35432,"private void saveButtonListener(){
  view.getSaveButton().addSelectionListener(new SelectionListener<ButtonEvent>(){
    @Override public void componentSelected(    ButtonEvent ce){
      UpdateGlobalExportSettingsCommand settings=new UpdateGlobalExportSettingsCommand(view.getFieldsMap());
      if (view.getExcelChoice().getValue()) {
        settings.setExportFormat(ExportUtils.ExportFormat.XLS);
      }
 else {
        settings.setExportFormat(ExportUtils.ExportFormat.ODS);
      }
      if (view.getExportSchedulesBox().getValue() == null || view.getExportSchedulesBox().getValue().getValue() == 0) {
        settings.setAutoExportFrequency(null);
      }
 else {
        if (view.getExportSchedulesBox().getValue().getValue() == 31) {
          settings.setAutoExportFrequency(view.getExportMonthlySchedulesBox().getValue().getValue());
        }
 else         if (view.getExportSchedulesBox().getValue().getValue() == 61) {
          settings.setAutoExportFrequency(view.getExportWeeklySchedulesBox().getValue().getValue());
        }
 else {
          settings.setAutoExportFrequency(view.getExportSchedulesBox().getValue().getValue());
        }
      }
      if (view.getDeleteSchedulesBox().getValue() == null || view.getDeleteSchedulesBox().getValue().getValue() == 0) {
        settings.setAutoDeleteFrequency(null);
      }
 else {
        settings.setAutoDeleteFrequency(view.getDeleteSchedulesBox().getValue().getValue());
      }
      settings.setOrganizationId(auth().getOrganizationId());
      dispatch.execute(settings,new CommandResultHandler<VoidResult>(){
        @Override public void onCommandFailure(        Throwable caught){
          N10N.warn(I18N.CONSTANTS.saveExportConfiguration(),I18N.MESSAGES.adminStandardCreationFailure(I18N.CONSTANTS.globalExportConfiguration()));
        }
        @Override public void onCommandSuccess(        VoidResult result){
          view.hide();
          N10N.infoNotif(I18N.CONSTANTS.saveExportConfiguration(),I18N.MESSAGES.adminStandardUpdateSuccess(I18N.CONSTANTS.globalExportConfiguration()));
        }
      }
);
    }
  }
);
}","private void saveButtonListener(){
  view.getSaveButton().addSelectionListener(new SelectionListener<ButtonEvent>(){
    @Override public void componentSelected(    ButtonEvent ce){
      UpdateGlobalExportSettingsCommand settings=new UpdateGlobalExportSettingsCommand(view.getFieldsMap());
      if (view.getExcelChoice().getValue()) {
        settings.setExportFormat(ExportUtils.ExportFormat.XLS);
      }
 else {
        settings.setExportFormat(ExportUtils.ExportFormat.ODS);
      }
      if (view.getExportSchedulesBox().getValue() == null || view.getExportSchedulesBox().getValue().getValue() == 0) {
        settings.setAutoExportFrequency(null);
      }
 else {
        if (view.getExportSchedulesBox().getValue().getValue() == 31) {
          settings.setAutoExportFrequency(view.getExportMonthlySchedulesBox().getValue().getValue());
        }
 else         if (view.getExportSchedulesBox().getValue().getValue() == 61) {
          settings.setAutoExportFrequency(view.getExportWeeklySchedulesBox().getValue().getValue());
        }
 else {
          settings.setAutoExportFrequency(view.getExportSchedulesBox().getValue().getValue());
        }
      }
      if (view.getDeleteSchedulesBox().getValue() == null || view.getDeleteSchedulesBox().getValue().getValue() == 0) {
        settings.setAutoDeleteFrequency(null);
      }
 else {
        settings.setAutoDeleteFrequency(view.getDeleteSchedulesBox().getValue().getValue());
      }
      settings.setOrganizationId(auth().getOrganizationId());
      dispatch.execute(settings,new CommandResultHandler<VoidResult>(){
        @Override public void onCommandFailure(        Throwable caught){
          N10N.warn(I18N.CONSTANTS.saveExportConfiguration(),I18N.MESSAGES.adminStandardCreationFailure(I18N.CONSTANTS.globalProjectsExportConfiguration()));
        }
        @Override public void onCommandSuccess(        VoidResult result){
          view.hide();
          N10N.infoNotif(I18N.CONSTANTS.saveExportConfiguration(),I18N.MESSAGES.adminStandardUpdateSuccess(I18N.CONSTANTS.globalProjectsExportConfiguration()));
        }
      }
);
    }
  }
);
}",0.9962121212121212
35433,"private void loadElement(){
  GetGlobalExportSettings settingsCommand=new GetGlobalExportSettings(auth().getOrganizationId(),true);
  dispatch.execute(settingsCommand,new CommandResultHandler<GlobalExportSettingsDTO>(){
    @Override public void onCommandFailure(    Throwable caught){
      N10N.warn(I18N.CONSTANTS.globalExportConfiguration(),I18N.CONSTANTS.serverError());
    }
    @Override public void onCommandSuccess(    GlobalExportSettingsDTO result){
      if (result.getExportFormat() != null) {
switch (result.getExportFormat()) {
case XLS:
          view.getExcelChoice().setValue(true);
        break;
case ODS:
      view.getCalcChoice().setValue(true);
    break;
}
}
view.getModelsStore().add(result.getProjectModelsDTO());
view.getModelsStore().commitChanges();
if (((ExportProjectsSettingView)view).exportScheduleMap.get(result.getAutoExportFrequency()) != null || ((ExportProjectsSettingView)view).monthScheduleMap.get(result.getAutoExportFrequency()) != null || ((ExportProjectsSettingView)view).weekScheduleMap.get(result.getAutoExportFrequency()) != null) {
if (result.getAutoExportFrequency() >= 31 && result.getAutoExportFrequency() <= 58) {
  view.getExportSchedulesBox().setValue(((ExportProjectsSettingView)view).exportScheduleMap.get(31));
  view.getExportMonthlySchedulesBox().show();
  view.getExportMonthlySchedulesBox().setValue(((ExportProjectsSettingView)view).monthScheduleMap.get(result.getAutoExportFrequency()));
}
 else if (result.getAutoExportFrequency() >= 61 && result.getAutoExportFrequency() <= 67) {
  view.getExportSchedulesBox().setValue(((ExportProjectsSettingView)view).exportScheduleMap.get(61));
  view.getExportWeeklySchedulesBox().show();
  view.getExportWeeklySchedulesBox().setValue(((ExportProjectsSettingView)view).weekScheduleMap.get(result.getAutoExportFrequency()));
}
 else {
  view.getExportSchedulesBox().setValue(((ExportProjectsSettingView)view).exportScheduleMap.get(result.getAutoExportFrequency()));
}
}
if (((ExportProjectsSettingView)view).deleteScheduleMap.get(result.getAutoDeleteFrequency()) != null) {
view.getDeleteSchedulesBox().setValue(((ExportProjectsSettingView)view).deleteScheduleMap.get(result.getAutoDeleteFrequency()));
}
}
}
,new LoadingMask(view.getPanel(),I18N.CONSTANTS.loading()));
}","private void loadElement(){
  GetGlobalExportSettings settingsCommand=new GetGlobalExportSettings(auth().getOrganizationId(),true);
  dispatch.execute(settingsCommand,new CommandResultHandler<GlobalExportSettingsDTO>(){
    @Override public void onCommandFailure(    Throwable caught){
      N10N.warn(I18N.CONSTANTS.globalProjectsExportConfiguration(),I18N.CONSTANTS.serverError());
    }
    @Override public void onCommandSuccess(    GlobalExportSettingsDTO result){
      if (result.getExportFormat() != null) {
switch (result.getExportFormat()) {
case XLS:
          view.getExcelChoice().setValue(true);
        break;
case ODS:
      view.getCalcChoice().setValue(true);
    break;
}
}
view.getModelsStore().add(result.getProjectModelsDTO());
view.getModelsStore().commitChanges();
if (((ExportProjectsSettingView)view).exportScheduleMap.get(result.getAutoExportFrequency()) != null || ((ExportProjectsSettingView)view).monthScheduleMap.get(result.getAutoExportFrequency()) != null || ((ExportProjectsSettingView)view).weekScheduleMap.get(result.getAutoExportFrequency()) != null) {
if (result.getAutoExportFrequency() >= 31 && result.getAutoExportFrequency() <= 58) {
  view.getExportSchedulesBox().setValue(((ExportProjectsSettingView)view).exportScheduleMap.get(31));
  view.getExportMonthlySchedulesBox().show();
  view.getExportMonthlySchedulesBox().setValue(((ExportProjectsSettingView)view).monthScheduleMap.get(result.getAutoExportFrequency()));
}
 else if (result.getAutoExportFrequency() >= 61 && result.getAutoExportFrequency() <= 67) {
  view.getExportSchedulesBox().setValue(((ExportProjectsSettingView)view).exportScheduleMap.get(61));
  view.getExportWeeklySchedulesBox().show();
  view.getExportWeeklySchedulesBox().setValue(((ExportProjectsSettingView)view).weekScheduleMap.get(result.getAutoExportFrequency()));
}
 else {
  view.getExportSchedulesBox().setValue(((ExportProjectsSettingView)view).exportScheduleMap.get(result.getAutoExportFrequency()));
}
}
if (((ExportProjectsSettingView)view).deleteScheduleMap.get(result.getAutoDeleteFrequency()) != null) {
view.getDeleteSchedulesBox().setValue(((ExportProjectsSettingView)view).deleteScheduleMap.get(result.getAutoDeleteFrequency()));
}
}
}
,new LoadingMask(view.getPanel(),I18N.CONSTANTS.loading()));
}",0.9982448442299254
35434,"@Override public void onCommandSuccess(VoidResult result){
  view.hide();
  N10N.infoNotif(I18N.CONSTANTS.saveExportConfiguration(),I18N.MESSAGES.adminStandardUpdateSuccess(I18N.CONSTANTS.globalExportConfiguration()));
}","@Override public void onCommandSuccess(VoidResult result){
  view.hide();
  N10N.infoNotif(I18N.CONSTANTS.saveExportConfiguration(),I18N.MESSAGES.adminStandardUpdateSuccess(I18N.CONSTANTS.globalProjectsExportConfiguration()));
}",0.9821428571428572
35435,"@Override public void onCommandFailure(Throwable caught){
  N10N.warn(I18N.CONSTANTS.saveExportConfiguration(),I18N.MESSAGES.adminStandardCreationFailure(I18N.CONSTANTS.globalExportConfiguration()));
}","@Override public void onCommandFailure(Throwable caught){
  N10N.warn(I18N.CONSTANTS.saveExportConfiguration(),I18N.MESSAGES.adminStandardCreationFailure(I18N.CONSTANTS.globalProjectsExportConfiguration()));
}",0.9804878048780488
35436,"@Override public void onPageRequest(PageRequest request){
  view.clearFrom();
  loadElement();
  setPageTitle(I18N.CONSTANTS.globalExportConfiguration());
}","@Override public void onPageRequest(PageRequest request){
  view.clearFrom();
  loadElement();
  setPageTitle(I18N.CONSTANTS.globalProjectsExportConfiguration());
}",0.975
35437,"/** 
 * {@inheritDoc}
 */
@Override protected FormPanel buildHeaderForm(){
  nameField=Forms.text(I18N.CONSTANTS.adminProjectModelsName(),true);
  statusField=Forms.combobox(I18N.CONSTANTS.adminProjectModelsStatus(),true,EnumModel.VALUE_FIELD,EnumModel.DISPLAY_FIELD);
  modelTypeField=new ProjectModelTypeField(I18N.CONSTANTS.adminProjectModelType(),true,Orientation.VERTICAL);
  defaultProfiles=new ListComboBox<ProfileDTO>(ProfileDTO.ID,ProfileDTO.NAME);
  defaultProfiles.setNoAvailableValueTooltip(I18N.CONSTANTS.noAvailableProfileToAddInDefaultTeamMemberProfiles());
  defaultProfiles.initComponent();
  defaultProfiles.addStyleName(""String_Node_Str"");
  final FormPanel headerForm=Forms.panel(140);
  headerForm.setAutoHeight(true);
  headerForm.add(nameField);
  headerForm.add(statusField);
  headerForm.add(getMaintenanceGroupField());
  headerForm.add(modelTypeField);
  headerForm.add(Forms.adapter(I18N.CONSTANTS.adminProjectModelsDefaultProfilesForTeamMembers(),defaultProfiles));
  return headerForm;
}","/** 
 * {@inheritDoc}
 */
@Override protected FormPanel buildHeaderForm(){
  nameField=Forms.text(I18N.CONSTANTS.adminProjectModelsName(),true);
  statusField=Forms.combobox(I18N.CONSTANTS.adminProjectModelsStatus(),true,EnumModel.VALUE_FIELD,EnumModel.DISPLAY_FIELD);
  modelTypeField=new ProjectModelTypeField(I18N.CONSTANTS.adminProjectModelType(),true,Orientation.VERTICAL);
  defaultProfiles=new ListComboBox<ProfileDTO>(ProfileDTO.ID,ProfileDTO.NAME);
  defaultProfiles.setNoAvailableValueTooltip(I18N.CONSTANTS.noAvailableProfileToAddInDefaultTeamMemberProfiles());
  defaultProfiles.initComponent();
  defaultProfiles.addStyleName(""String_Node_Str"");
  final FormPanel headerForm=Forms.panel(250);
  headerForm.setAutoHeight(true);
  headerForm.add(nameField);
  headerForm.add(statusField);
  headerForm.add(getMaintenanceGroupField());
  headerForm.add(modelTypeField);
  headerForm.add(Forms.adapter(I18N.CONSTANTS.adminProjectModelsDefaultProfilesForTeamMembers(),defaultProfiles));
  return headerForm;
}",0.9980334316617504
35438,"/** 
 * {@inheritDoc}
 */
@Override public void buildExportDialog(final ContactRelationshipsPresenter.ExportActionHandler handler){
  final com.extjs.gxt.ui.client.widget.Window w=new com.extjs.gxt.ui.client.widget.Window();
  w.setPlain(true);
  w.setModal(true);
  w.setBlinkModal(true);
  w.setLayout(new FitLayout());
  w.setSize(400,180);
  w.setHeadingHtml(I18N.CONSTANTS.exportData());
  final FormPanel panel=Forms.panel();
  final CheckBox allRelationsBox=Forms.checkbox(I18N.CONSTANTS.allRelations());
  final CheckBox frameworkRelationsBox=Forms.checkbox(I18N.CONSTANTS.frameworkRelations());
  final CheckBox relationsByElementBox=Forms.checkbox(I18N.CONSTANTS.relationsByElement());
  final CheckBoxGroup options=Forms.checkBoxGroup(I18N.CONSTANTS.exportOptions(),com.extjs.gxt.ui.client.Style.Orientation.VERTICAL,allRelationsBox,frameworkRelationsBox,relationsByElementBox);
  panel.add(options);
  final Button export=Forms.button(I18N.CONSTANTS.export());
  panel.getButtonBar().add(export);
  export.addSelectionListener(new SelectionListener<ButtonEvent>(){
    @Override public void componentSelected(    final ButtonEvent ce){
      if (handler != null) {
        handler.onExportContactRelationships(false,allRelationsBox.getValue(),frameworkRelationsBox.getValue(),relationsByElementBox.getValue());
      }
      w.hide();
    }
  }
);
  w.add(panel);
  w.show();
}","/** 
 * {@inheritDoc}
 */
@Override public void buildExportDialog(final ContactRelationshipsPresenter.ExportActionHandler handler){
  final com.extjs.gxt.ui.client.widget.Window w=new com.extjs.gxt.ui.client.widget.Window();
  w.setPlain(true);
  w.setModal(true);
  w.setBlinkModal(true);
  w.setLayout(new FitLayout());
  w.setSize(400,180);
  w.setHeadingHtml(I18N.CONSTANTS.exportData());
  final FormPanel panel=Forms.panel();
  final CheckBox allRelationsBox=Forms.checkbox(I18N.CONSTANTS.allRelations(),Boolean.TRUE);
  allRelationsBox.setEnabled(false);
  final CheckBox frameworkRelationsBox=Forms.checkbox(I18N.CONSTANTS.frameworkRelations());
  final CheckBox relationsByElementBox=Forms.checkbox(I18N.CONSTANTS.relationsByElement());
  final CheckBoxGroup options=Forms.checkBoxGroup(I18N.CONSTANTS.exportOptions(),com.extjs.gxt.ui.client.Style.Orientation.VERTICAL,allRelationsBox,frameworkRelationsBox,relationsByElementBox);
  panel.add(options);
  final Button export=Forms.button(I18N.CONSTANTS.export());
  panel.getButtonBar().add(export);
  export.addSelectionListener(new SelectionListener<ButtonEvent>(){
    @Override public void componentSelected(    final ButtonEvent ce){
      if (handler != null) {
        handler.onExportContactRelationships(false,allRelationsBox.getValue(),frameworkRelationsBox.getValue(),relationsByElementBox.getValue());
      }
      w.hide();
    }
  }
);
  w.add(panel);
  w.show();
}",0.9823196605374824
35439,"/** 
 * Initializes the widget view.
 */
@Override public void initialize(){
  proxy=new PagingContactsProxy();
  pagingLoader=new BasePagingLoader<PagingLoadResult<DashboardContact>>(proxy){
    @Override protected Object newLoadConfig(){
      return new BaseFilterPagingLoadConfig();
    }
  }
;
  pagingLoader.setRemoteSort(true);
  pagingToolBar=new PagingToolBar(10);
  pagingToolBar.bind(pagingLoader);
  final ListStore<DashboardContact> contactStore=new ListStore<DashboardContact>(pagingLoader);
  contactStore.setMonitorChanges(true);
  pagingLoader.setSortField(ContactDTO.NAME);
  pagingLoader.setSortDir(Style.SortDir.ASC);
  contactTreeGrid=new Grid<DashboardContact>(contactStore,buildContactGridColumnModel());
  contactTreeGrid.setBorders(true);
  contactTreeGrid.setTrackMouseOver(false);
  gridFilters=new GridFilters();
  initGridFilters();
  contactTreeGrid.addPlugin(gridFilters);
  toolbar=new ToolBar();
  addContactButton=new Button(I18N.CONSTANTS.addContact());
  toolbar.add(addContactButton);
  importButton=new Button(I18N.CONSTANTS.importContact());
  toolbar.add(importButton);
  exportButton=new Button(I18N.CONSTANTS.exportAll(),IconImageBundle.ICONS.excel());
  toolbar.add(exportButton);
  contactTreePanel=Panels.content(I18N.CONSTANTS.contacts());
  contactTreePanel.setTopComponent(toolbar);
  contactTreePanel.setBottomComponent(pagingToolBar);
}","/** 
 * Initializes the widget view.
 */
@Override public void initialize(){
  proxy=new PagingContactsProxy();
  pagingLoader=new BasePagingLoader<PagingLoadResult<DashboardContact>>(proxy){
    @Override protected Object newLoadConfig(){
      return new BaseFilterPagingLoadConfig();
    }
  }
;
  pagingLoader.setRemoteSort(true);
  pagingToolBar=new PagingToolBar(10);
  pagingToolBar.bind(pagingLoader);
  final ListStore<DashboardContact> contactStore=new ListStore<DashboardContact>(pagingLoader);
  contactStore.setMonitorChanges(true);
  pagingLoader.setSortField(ContactHistory.UPDATED_AT);
  pagingLoader.setSortDir(Style.SortDir.DESC);
  contactTreeGrid=new Grid<DashboardContact>(contactStore,buildContactGridColumnModel());
  contactTreeGrid.setBorders(true);
  contactTreeGrid.setTrackMouseOver(false);
  gridFilters=new GridFilters();
  initGridFilters();
  contactTreeGrid.addPlugin(gridFilters);
  toolbar=new ToolBar();
  addContactButton=new Button(I18N.CONSTANTS.addContact());
  toolbar.add(addContactButton);
  importButton=new Button(I18N.CONSTANTS.importContact());
  toolbar.add(importButton);
  exportButton=new Button(I18N.CONSTANTS.exportAll(),IconImageBundle.ICONS.excel());
  toolbar.add(exportButton);
  contactTreePanel=Panels.content(I18N.CONSTANTS.contacts());
  contactTreePanel.setTopComponent(toolbar);
  contactTreePanel.setBottomComponent(pagingToolBar);
}",0.9917355371900828
35440,"private void initComponent(){
  this.setPlain(true);
  this.setModal(true);
  this.setBlinkModal(true);
  this.setLayout(new FitLayout());
  this.setSize(650,300);
  this.setHeadingHtml(I18N.CONSTANTS.dedupeContactWindowTitle());
  possibleDuplicatesGrid=generatePossibleDuplicatesGrid();
  firstStepMainButton=generateFirstStepMainButton();
  LayoutContainer firstStepButtonsContainer=Layouts.border();
  firstStepButtonsContainer.add(firstStepMainButton,Layouts.borderLayoutData(Style.LayoutRegion.EAST));
  LayoutContainer firstStepContainer=Layouts.border();
  firstStepContainer.setScrollMode(Style.Scroll.AUTOY);
  firstStepContainer.add(generateMessageLabel(),Layouts.borderLayoutData(Style.LayoutRegion.NORTH,50f,Layouts.Margin.HALF_TOP,Layouts.Margin.HALF_RIGHT,Layouts.Margin.HALF_BOTTOM,Layouts.Margin.HALF_LEFT));
  firstStepContainer.add(possibleDuplicatesGrid,Layouts.borderLayoutData(Style.LayoutRegion.CENTER,Layouts.Margin.HALF_TOP,Layouts.Margin.HALF_BOTTOM));
  firstStepContainer.add(firstStepButtonsContainer,Layouts.borderLayoutData(Style.LayoutRegion.SOUTH,20f,Layouts.Margin.HALF_TOP,Layouts.Margin.HALF_RIGHT,Layouts.Margin.BOTTOM,Layouts.Margin.DOUBLE_LEFT));
  duplicatedPropertiesGrid=generateDuplicatedPropertiesGrid();
  secondStepMainButton=generateSecondStepMainButton();
  LayoutContainer secondStepButtonsContainer=Layouts.border();
  secondStepButtonsContainer.add(secondStepMainButton,Layouts.borderLayoutData(Style.LayoutRegion.EAST));
  secondStepContainer=Layouts.border();
  secondStepContainer.setScrollMode(Style.Scroll.AUTOY);
  secondStepContainer.add(duplicatedPropertiesGrid,Layouts.borderLayoutData(Style.LayoutRegion.CENTER,Layouts.Margin.HALF_TOP,Layouts.Margin.HALF_BOTTOM));
  secondStepContainer.add(secondStepButtonsContainer,Layouts.borderLayoutData(Style.LayoutRegion.SOUTH,20f,Layouts.Margin.HALF_TOP,Layouts.Margin.HALF_RIGHT,Layouts.Margin.BOTTOM,Layouts.Margin.DOUBLE_LEFT));
  cardLayout=new CardLayout();
  LayoutContainer mainContainer=new LayoutContainer(cardLayout);
  mainContainer.add(firstStepContainer);
  mainContainer.add(secondStepContainer);
  cardLayout.setActiveItem(firstStepContainer);
  add(mainContainer);
}","private void initComponent(){
  this.setPlain(true);
  this.setModal(true);
  this.setBlinkModal(true);
  this.setLayout(new FitLayout());
  this.setSize(650,300);
  this.setHeadingHtml(I18N.CONSTANTS.dedupeContactWindowTitle());
  possibleDuplicatesGrid=generatePossibleDuplicatesGrid();
  firstStepMainButton=generateFirstStepMainButton();
  LayoutContainer firstStepButtonsContainer=Layouts.border();
  firstStepButtonsContainer.add(firstStepMainButton,Layouts.borderLayoutData(Style.LayoutRegion.EAST));
  LayoutContainer firstStepContainer=Layouts.border();
  firstStepContainer.setScrollMode(Style.Scroll.AUTOY);
  firstStepContainer.add(generateMessageLabel(),Layouts.borderLayoutData(Style.LayoutRegion.NORTH,50f,Layouts.Margin.HALF_TOP,Layouts.Margin.HALF_RIGHT,Layouts.Margin.HALF_BOTTOM,Layouts.Margin.HALF_LEFT));
  firstStepContainer.add(possibleDuplicatesGrid,Layouts.borderLayoutData(Style.LayoutRegion.CENTER,Layouts.Margin.HALF_TOP,Layouts.Margin.HALF_BOTTOM));
  firstStepContainer.add(firstStepButtonsContainer,Layouts.borderLayoutData(Style.LayoutRegion.SOUTH,20f,Layouts.Margin.HALF_TOP,Layouts.Margin.HALF_RIGHT,Layouts.Margin.BOTTOM,Layouts.Margin.DOUBLE_LEFT));
  duplicatedPropertiesGrid=generateDuplicatedPropertiesGrid();
  secondStepMainButton=generateSecondStepMainButton();
  LayoutContainer secondStepButtonsContainer=Layouts.border();
  secondStepButtonsContainer.add(secondStepMainButton,Layouts.borderLayoutData(Style.LayoutRegion.EAST));
  cancelSecondStepButton=generateCancelSecondStepButton();
  secondStepButtonsContainer.add(cancelSecondStepButton,Layouts.borderLayoutData(Style.LayoutRegion.WEST));
  secondStepContainer=Layouts.border();
  secondStepContainer.setScrollMode(Style.Scroll.AUTOY);
  secondStepContainer.add(duplicatedPropertiesGrid,Layouts.borderLayoutData(Style.LayoutRegion.CENTER,Layouts.Margin.HALF_TOP,Layouts.Margin.HALF_BOTTOM));
  secondStepContainer.add(secondStepButtonsContainer,Layouts.borderLayoutData(Style.LayoutRegion.SOUTH,20f,Layouts.Margin.HALF_TOP,Layouts.Margin.HALF_RIGHT,Layouts.Margin.BOTTOM,Layouts.Margin.DOUBLE_LEFT));
  cardLayout=new CardLayout();
  LayoutContainer mainContainer=new LayoutContainer(cardLayout);
  mainContainer.add(firstStepContainer);
  mainContainer.add(secondStepContainer);
  cardLayout.setActiveItem(firstStepContainer);
  add(mainContainer);
}",0.9631915362574388
35441,"@Override public String getExtention(){
  try {
    Integer organizationId=Integer.parseInt(requireParameter(RequestParameter.ID));
    final GlobalExportSettingsHibernateDAO exportSettingDao=injector.getInstance(GlobalExportSettingsHibernateDAO.class);
    final GlobalExportSettings settings=exportSettingDao.getGlobalExportSettingsByOrganization(organizationId);
    exportFormat=settings.getExportFormat();
    if (exportFormat == null)     exportFormat=settings.getDefaultOrganizationExportFormat();
  }
 catch (  Exception e) {
    LOG.error(""String_Node_Str"",e);
  }
  return super.getExtention();
}","@Override public String getExtention(){
  try {
    Integer organizationId=Integer.parseInt(requireParameter(RequestParameter.ID));
    final GlobalContactExportSettingsHibernateDAO exportSettingDao=injector.getInstance(GlobalContactExportSettingsHibernateDAO.class);
    final GlobalContactExportSettings settings=exportSettingDao.getGlobalExportSettingsByOrganization(organizationId);
    exportFormat=settings.getExportFormat();
    if (exportFormat == null)     exportFormat=settings.getDefaultOrganizationExportFormat();
  }
 catch (  Exception e) {
    LOG.error(""String_Node_Str"",e);
  }
  return super.getExtention();
}",0.9829683698296836
35442,"@Override public void handleContactCreation(final ContactModelDTO contactModelDTO,final String email,final String firstName,final String familyName,final String organizationName,final OrgUnitDTO mainOrgUnit,final List<OrgUnitDTO> secondaryOrgUnits){
  CheckContactDuplication checkContactDuplication;
  if (contactModelDTO.getType() == ContactModelType.INDIVIDUAL) {
    checkContactDuplication=new CheckContactDuplication(null,email,familyName,firstName);
  }
 else {
    checkContactDuplication=new CheckContactDuplication(null,email,familyName,null);
  }
  dispatch.execute(checkContactDuplication,new AsyncCallback<ListResult<ContactDTO>>(){
    @Override public void onFailure(    Throwable caught){
      Log.error(""String_Node_Str"");
    }
    @Override public void onSuccess(    ListResult<ContactDTO> result){
      final HashMap<String,Object> properties=buildPropertyMap(contactModelDTO,email,firstName,familyName,organizationName,mainOrgUnit,secondaryOrgUnits);
      if (result == null || result.getSize() == 0) {
        createEntity(properties,listComboBox);
        return;
      }
      final DedupeContactDialog dedupeContactDialog=new DedupeContactDialog(true);
      dedupeContactDialog.getPossibleDuplicatesGrid().getStore().add(result.getList());
      dedupeContactDialog.getFirstStepMainButton().addSelectionListener(new SelectionListener<ButtonEvent>(){
        @Override public void componentSelected(        ButtonEvent ce){
          createEntity(properties,listComboBox);
          dedupeContactDialog.hide();
        }
      }
);
      dedupeContactDialog.setSecondStepHandler(new DedupeContactDialog.SecondStepHandler(){
        @Override public void initialize(        final Integer contactId,        final ListStore<ContactDuplicatedProperty> propertiesStore){
          dispatch.execute(new GetContactDuplicatedProperties(contactId,null,properties),new CommandResultHandler<ListResult<ContactDuplicatedProperty>>(){
            @Override protected void onCommandSuccess(            ListResult<ContactDuplicatedProperty> result){
              propertiesStore.add(result.getList());
            }
          }
,new LoadingMask(dedupeContactDialog));
        }
        @Override public void downloadImage(        String id,        final Image image){
          imageProvider.provideDataUrl(id,new SuccessCallback<String>(){
            @Override public void onSuccess(            String dataUrl){
              image.setUrl(dataUrl);
            }
          }
);
        }
        @Override public void handleDedupeContact(        final Integer targetedContactId,        List<ContactDuplicatedProperty> selectedProperties){
          dispatch.execute(new DedupeContact(selectedProperties,targetedContactId),new CommandResultHandler<ContactDTO>(){
            @Override protected void onCommandSuccess(            ContactDTO targetedContactDTO){
              dedupeContactDialog.hide();
              eventBus.navigateRequest(Page.CONTACT_DASHBOARD.requestWith(RequestParameter.ID,targetedContactId));
            }
          }
);
        }
      }
);
      dedupeContactDialog.show();
    }
  }
);
}","@Override public void handleContactCreation(final ContactModelDTO contactModelDTO,final String email,final String firstName,final String familyName,final String organizationName,final OrgUnitDTO mainOrgUnit,final List<OrgUnitDTO> secondaryOrgUnits){
  CheckContactDuplication checkContactDuplication;
  if (contactModelDTO.getType() == ContactModelType.INDIVIDUAL) {
    checkContactDuplication=new CheckContactDuplication(null,email,familyName,firstName);
  }
 else {
    checkContactDuplication=new CheckContactDuplication(null,email,familyName,null);
  }
  dispatch.execute(checkContactDuplication,new AsyncCallback<ListResult<ContactDTO>>(){
    @Override public void onFailure(    Throwable caught){
      Log.error(""String_Node_Str"");
    }
    @Override public void onSuccess(    ListResult<ContactDTO> result){
      final HashMap<String,Object> properties=buildPropertyMap(contactModelDTO,email,firstName,familyName,organizationName,mainOrgUnit,secondaryOrgUnits);
      if (result == null || result.getSize() == 0) {
        createEntity(properties,listComboBox);
        return;
      }
      final DedupeContactDialog dedupeContactDialog=new DedupeContactDialog(true);
      dedupeContactDialog.getPossibleDuplicatesGrid().getStore().add(result.getList());
      dedupeContactDialog.getFirstStepMainButton().addSelectionListener(new SelectionListener<ButtonEvent>(){
        @Override public void componentSelected(        ButtonEvent ce){
          createEntity(properties,listComboBox);
          dedupeContactDialog.hide();
        }
      }
);
      dedupeContactDialog.setSecondStepHandler(new DedupeContactDialog.SecondStepHandler(){
        @Override public void initialize(        final Integer contactId,        final ListStore<ContactDuplicatedProperty> propertiesStore){
          dispatch.execute(new GetContactDuplicatedProperties(contactId,null,properties),new CommandResultHandler<ListResult<ContactDuplicatedProperty>>(){
            @Override protected void onCommandSuccess(            ListResult<ContactDuplicatedProperty> result){
              propertiesStore.add(result.getList());
            }
          }
,new LoadingMask(dedupeContactDialog));
        }
        @Override public void downloadImage(        String id,        final Image image){
          imageProvider.provideDataUrl(id,new SuccessCallback<String>(){
            @Override public void onSuccess(            String dataUrl){
              image.setUrl(dataUrl);
            }
          }
);
        }
        @Override public void handleDedupeContact(        final Integer targetedContactId,        List<ContactDuplicatedProperty> selectedProperties){
          dispatch.execute(new DedupeContact(selectedProperties,targetedContactId),new CommandResultHandler<ContactDTO>(){
            @Override protected void onCommandSuccess(            ContactDTO targetedContactDTO){
              dedupeContactDialog.hide();
              eventBus.navigateRequest(Page.CONTACT_DASHBOARD.requestWith(RequestParameter.ID,targetedContactId));
            }
          }
);
        }
        @Override public void handleCancel(){
          dedupeContactDialog.hide();
        }
      }
);
      dedupeContactDialog.show();
    }
  }
);
}",0.9852108244178728
35443,"@Override @SuppressWarnings(""String_Node_Str"") protected Component getComponent(final ValueResult valueResult,final boolean enabled){
  final ContactListComboBox listComboBox=new ContactListComboBox(getLimit(),getAllowedType(),getAllowedModelIds(),dispatch);
  listComboBox.setEnabled(enabled);
  listComboBox.setChangeHandler(new ContactListComboBox.ChangeHandler(){
    @Override public void handleChange(    List<ContactDTO> contacts,    ValueEventChangeType changeType){
      fireEvents(serializeValue(contacts),changeType);
    }
  }
);
  listComboBox.setCreateContactHandler(new ContactListComboBox.CreateContactHandler(){
    @Override public void handleContactCreation(    final ContactModelDTO contactModelDTO,    final String email,    final String firstName,    final String familyName,    final String organizationName,    final OrgUnitDTO mainOrgUnit,    final List<OrgUnitDTO> secondaryOrgUnits){
      CheckContactDuplication checkContactDuplication;
      if (contactModelDTO.getType() == ContactModelType.INDIVIDUAL) {
        checkContactDuplication=new CheckContactDuplication(null,email,familyName,firstName);
      }
 else {
        checkContactDuplication=new CheckContactDuplication(null,email,familyName,null);
      }
      dispatch.execute(checkContactDuplication,new AsyncCallback<ListResult<ContactDTO>>(){
        @Override public void onFailure(        Throwable caught){
          Log.error(""String_Node_Str"");
        }
        @Override public void onSuccess(        ListResult<ContactDTO> result){
          final HashMap<String,Object> properties=buildPropertyMap(contactModelDTO,email,firstName,familyName,organizationName,mainOrgUnit,secondaryOrgUnits);
          if (result == null || result.getSize() == 0) {
            createEntity(properties,listComboBox);
            return;
          }
          final DedupeContactDialog dedupeContactDialog=new DedupeContactDialog(true);
          dedupeContactDialog.getPossibleDuplicatesGrid().getStore().add(result.getList());
          dedupeContactDialog.getFirstStepMainButton().addSelectionListener(new SelectionListener<ButtonEvent>(){
            @Override public void componentSelected(            ButtonEvent ce){
              createEntity(properties,listComboBox);
              dedupeContactDialog.hide();
            }
          }
);
          dedupeContactDialog.setSecondStepHandler(new DedupeContactDialog.SecondStepHandler(){
            @Override public void initialize(            final Integer contactId,            final ListStore<ContactDuplicatedProperty> propertiesStore){
              dispatch.execute(new GetContactDuplicatedProperties(contactId,null,properties),new CommandResultHandler<ListResult<ContactDuplicatedProperty>>(){
                @Override protected void onCommandSuccess(                ListResult<ContactDuplicatedProperty> result){
                  propertiesStore.add(result.getList());
                }
              }
,new LoadingMask(dedupeContactDialog));
            }
            @Override public void downloadImage(            String id,            final Image image){
              imageProvider.provideDataUrl(id,new SuccessCallback<String>(){
                @Override public void onSuccess(                String dataUrl){
                  image.setUrl(dataUrl);
                }
              }
);
            }
            @Override public void handleDedupeContact(            final Integer targetedContactId,            List<ContactDuplicatedProperty> selectedProperties){
              dispatch.execute(new DedupeContact(selectedProperties,targetedContactId),new CommandResultHandler<ContactDTO>(){
                @Override protected void onCommandSuccess(                ContactDTO targetedContactDTO){
                  dedupeContactDialog.hide();
                  eventBus.navigateRequest(Page.CONTACT_DASHBOARD.requestWith(RequestParameter.ID,targetedContactId));
                }
              }
);
            }
          }
);
          dedupeContactDialog.show();
        }
      }
);
    }
  }
);
  listComboBox.initComponent();
  dispatch.execute(new GetContacts(getAllowedType(),getAllowedModelIds()),new AsyncCallback<ListResult<ContactDTO>>(){
    @Override public void onFailure(    Throwable caught){
      Log.error(""String_Node_Str"",caught);
    }
    @Override public void onSuccess(    ListResult<ContactDTO> result){
      listComboBox.getAvailableValuesStore().add(result.getList());
      Set<Integer> contactIds=parseValue(valueResult);
      List<ContactDTO> contacts=new ArrayList<ContactDTO>();
      for (      ContactDTO contactDTO : result.getList()) {
        if (contactIds.contains(contactDTO.getId())) {
          contacts.add(contactDTO);
        }
      }
      listComboBox.initListStore(contacts);
    }
  }
);
  return Forms.adapter(getLabel(),listComboBox);
}","@Override @SuppressWarnings(""String_Node_Str"") protected Component getComponent(final ValueResult valueResult,final boolean enabled){
  final ContactListComboBox listComboBox=new ContactListComboBox(getLimit(),getAllowedType(),getAllowedModelIds(),dispatch);
  listComboBox.setEnabled(enabled);
  listComboBox.setChangeHandler(new ContactListComboBox.ChangeHandler(){
    @Override public void handleChange(    List<ContactDTO> contacts,    ValueEventChangeType changeType){
      fireEvents(serializeValue(contacts),changeType);
    }
  }
);
  listComboBox.setCreateContactHandler(new ContactListComboBox.CreateContactHandler(){
    @Override public void handleContactCreation(    final ContactModelDTO contactModelDTO,    final String email,    final String firstName,    final String familyName,    final String organizationName,    final OrgUnitDTO mainOrgUnit,    final List<OrgUnitDTO> secondaryOrgUnits){
      CheckContactDuplication checkContactDuplication;
      if (contactModelDTO.getType() == ContactModelType.INDIVIDUAL) {
        checkContactDuplication=new CheckContactDuplication(null,email,familyName,firstName);
      }
 else {
        checkContactDuplication=new CheckContactDuplication(null,email,familyName,null);
      }
      dispatch.execute(checkContactDuplication,new AsyncCallback<ListResult<ContactDTO>>(){
        @Override public void onFailure(        Throwable caught){
          Log.error(""String_Node_Str"");
        }
        @Override public void onSuccess(        ListResult<ContactDTO> result){
          final HashMap<String,Object> properties=buildPropertyMap(contactModelDTO,email,firstName,familyName,organizationName,mainOrgUnit,secondaryOrgUnits);
          if (result == null || result.getSize() == 0) {
            createEntity(properties,listComboBox);
            return;
          }
          final DedupeContactDialog dedupeContactDialog=new DedupeContactDialog(true);
          dedupeContactDialog.getPossibleDuplicatesGrid().getStore().add(result.getList());
          dedupeContactDialog.getFirstStepMainButton().addSelectionListener(new SelectionListener<ButtonEvent>(){
            @Override public void componentSelected(            ButtonEvent ce){
              createEntity(properties,listComboBox);
              dedupeContactDialog.hide();
            }
          }
);
          dedupeContactDialog.setSecondStepHandler(new DedupeContactDialog.SecondStepHandler(){
            @Override public void initialize(            final Integer contactId,            final ListStore<ContactDuplicatedProperty> propertiesStore){
              dispatch.execute(new GetContactDuplicatedProperties(contactId,null,properties),new CommandResultHandler<ListResult<ContactDuplicatedProperty>>(){
                @Override protected void onCommandSuccess(                ListResult<ContactDuplicatedProperty> result){
                  propertiesStore.add(result.getList());
                }
              }
,new LoadingMask(dedupeContactDialog));
            }
            @Override public void downloadImage(            String id,            final Image image){
              imageProvider.provideDataUrl(id,new SuccessCallback<String>(){
                @Override public void onSuccess(                String dataUrl){
                  image.setUrl(dataUrl);
                }
              }
);
            }
            @Override public void handleDedupeContact(            final Integer targetedContactId,            List<ContactDuplicatedProperty> selectedProperties){
              dispatch.execute(new DedupeContact(selectedProperties,targetedContactId),new CommandResultHandler<ContactDTO>(){
                @Override protected void onCommandSuccess(                ContactDTO targetedContactDTO){
                  dedupeContactDialog.hide();
                  eventBus.navigateRequest(Page.CONTACT_DASHBOARD.requestWith(RequestParameter.ID,targetedContactId));
                }
              }
);
            }
            @Override public void handleCancel(){
              dedupeContactDialog.hide();
            }
          }
);
          dedupeContactDialog.show();
        }
      }
);
    }
  }
);
  listComboBox.initComponent();
  dispatch.execute(new GetContacts(getAllowedType(),getAllowedModelIds()),new AsyncCallback<ListResult<ContactDTO>>(){
    @Override public void onFailure(    Throwable caught){
      Log.error(""String_Node_Str"",caught);
    }
    @Override public void onSuccess(    ListResult<ContactDTO> result){
      listComboBox.getAvailableValuesStore().add(result.getList());
      Set<Integer> contactIds=parseValue(valueResult);
      List<ContactDTO> contacts=new ArrayList<ContactDTO>();
      for (      ContactDTO contactDTO : result.getList()) {
        if (contactIds.contains(contactDTO.getId())) {
          contacts.add(contactDTO);
        }
      }
      listComboBox.initListStore(contacts);
    }
  }
);
  return Forms.adapter(getLabel(),listComboBox);
}",0.989188086495308
35444,"/** 
 * <p> Loads the given   {@code flexibleElement} <b>specific fields</b> and sets the corresponding form fields values.</p> <p> Executes  {@link #loadFlexibleElementTextAreaFields(FlexibleElementDTO,TextAreaType)} method if the{@code flexibleElement} is an instance of {@link TextAreaElementDTO}. </p>
 * @param flexibleElement The edited flexible element, may be  {@code null}.
 * @param type The element type, may be  {@code null}.
 */
private void loadFlexibleElementSpecificFields(final FlexibleElementDTO flexibleElement,final LogicalElementType type){
  view.getBudgetFields().setVisible(false);
  view.getAnchorAddSubField().setVisible(false);
  view.getRatioFlexTable().setVisible(false);
  view.clearBudgetFields();
  view.getUpBudgetSubFieldCombo().clearSelections();
  view.getDownBudgetSubFieldCombo().clearSelections();
  view.getUpBudgetSubFieldStore().removeAll();
  view.getUpBudgetSubFieldStore().commitChanges();
  view.getDownBudgetSubFieldStore().removeAll();
  view.getDownBudgetSubFieldStore().commitChanges();
  view.setSpecificFieldsVisibility(type);
  view.getBannerPositionField().disable();
  view.getBannerPositionField().setAllowBlank(true);
  customChoices.clear();
  disabledCustomChoices.clear();
  if (flexibleElement instanceof FilesListElementDTO) {
    view.getMaxLimitField().setValue(((FilesListElementDTO)flexibleElement).getLimit());
  }
 else   if (flexibleElement instanceof TextAreaElementDTO || type.toElementTypeEnum() == ElementTypeEnum.TEXT_AREA) {
    loadFlexibleElementTextAreaFields(flexibleElement,type.toTextAreaType());
  }
 else   if (flexibleElement instanceof QuestionElementDTO) {
    final QuestionElementDTO questionElement=(QuestionElementDTO)flexibleElement;
    view.setCustomChoiceAddFieldEnabled(true);
    view.getQualityLinkField().setValue(questionElement.getQualityCriterion() != null);
    view.getMultipleChoicesField().setValue(questionElement.getMultiple());
    view.getMultipleChoicesField().setEnabled(!isUpdateAndUnderMaintenance());
    if (ClientUtils.isNotEmpty(questionElement.getChoices())) {
      for (      final QuestionChoiceElementDTO choice : questionElement.getChoices()) {
        if (!isUpdateAndUnderMaintenance()) {
          onAddCustomChoice(choice.getLabel());
        }
 else {
          onAddUndeletableCustomChoice(choice.getLabel(),!choice.isDisabled());
        }
      }
    }
  }
 else   if (flexibleElement instanceof BudgetElementDTO) {
    final BudgetElementDTO budgetElement=(BudgetElementDTO)flexibleElement;
    view.getBudgetFields().setVisible(!isUpdateAndUnderMaintenance());
    view.getUpBudgetSubFieldCombo().setVisible(!isUpdateAndUnderMaintenance());
    view.getDownBudgetSubFieldCombo().setVisible(!isUpdateAndUnderMaintenance());
    int row=1;
    for (    final BudgetSubFieldDTO budgetField : budgetElement.getBudgetSubFields()) {
      final Text budgetText=new Text();
      budgetText.setData(""String_Node_Str"",budgetField);
      budgetText.addStyleName(""String_Node_Str"");
      if (budgetField.getType() != null) {
        budgetField.setLabel(BudgetSubFieldType.getName(budgetField.getType()));
      }
      budgetText.setText(budgetField.getLabel());
      view.getBudgetFields().setWidget(row,0,budgetText);
      view.getBudgetFields().setWidget(row,1,new TextField<String>());
      if (budgetField.getType() == null) {
        Anchor anchorEditSubField=new Anchor(IconImageBundle.ICONS.editPage().getSafeHtml());
        Anchor anchorDeleteSubField=new Anchor(IconImageBundle.ICONS.delete().getSafeHtml());
        view.getBudgetFields().setWidget(row,2,anchorEditSubField);
        view.getBudgetFields().setWidget(row,3,anchorDeleteSubField);
        anchorEditSubField.addClickHandler(new ClickHandler(){
          @Override public void onClick(          ClickEvent event){
            eventBus.navigateRequest(Page.ADMIN_EDIT_FLEXIBLE_ELEMENT_ADD_BUDGETSUBFIELD.request().addData(RequestParameter.DTO,budgetField));
          }
        }
);
        anchorDeleteSubField.addClickHandler(new ClickHandler(){
          @Override public void onClick(          ClickEvent event){
            budgetElement.getBudgetSubFields().remove(budgetField);
            loadFlexibleElement(flexibleElement);
          }
        }
);
      }
      budgetText.show();
      if (budgetField.getId() != null) {
        view.getUpBudgetSubFieldStore().add(budgetField);
        view.getDownBudgetSubFieldStore().add(budgetField);
      }
      row++;
    }
    view.getUpBudgetSubFieldStore().commitChanges();
    view.getDownBudgetSubFieldStore().commitChanges();
    for (    BudgetSubFieldDTO budgetField : budgetElement.getBudgetSubFields()) {
      if (budgetField.getId() != null) {
        if (budgetField.getId().equals(budgetElement.getRatioDividend().getId())) {
          view.getUpBudgetSubFieldCombo().setValue(budgetField);
        }
        if (budgetField.getId().equals(budgetElement.getRatioDivisor().getId())) {
          view.getDownBudgetSubFieldCombo().setValue(budgetField);
        }
      }
    }
    view.getSpecificForm().recalculate();
  }
 else   if (flexibleElement instanceof ComputationElementDTO) {
    final ComputationElementDTO computationElement=(ComputationElementDTO)flexibleElement;
    final String formattedRule=Computations.formatRuleForEdition(computationElement.getRule(),otherElements);
    view.getFormulaField().setValue(formattedRule);
    view.getMinLimitField().setValue(ComputedValues.from(computationElement.getMinimumValue(),false).get());
    view.getMaxLimitField().setValue(ComputedValues.from(computationElement.getMaximumValue(),false).get());
  }
  if (type == ElementTypeEnum.COMPUTATION) {
    addNumberTypeToStore(view.getStore());
  }
  if (type == DefaultFlexibleElementType.BUDGET_RATIO) {
    addNumberTypeToStore(view.getBudgetSubFieldSpentStore(),view.getBudgetSubFieldPlannedStore());
  }
  if (flexibleElement instanceof BudgetRatioElementDTO) {
    final BudgetRatioElementDTO budgetRatioElementDTO=(BudgetRatioElementDTO)flexibleElement;
    if (budgetRatioElementDTO.getSpentBudget() != null) {
      view.getBudgetSubFieldSpentCombo().setSelection(java.util.Collections.singletonList(budgetRatioElementDTO.getSpentBudget()));
    }
    if (budgetRatioElementDTO.getPlannedBudget() != null) {
      view.getBudgetSubFieldPlannedCombo().setSelection(java.util.Collections.singletonList(budgetRatioElementDTO.getPlannedBudget()));
    }
  }
}","/** 
 * <p> Loads the given   {@code flexibleElement} <b>specific fields</b> and sets the corresponding form fields values.</p> <p> Executes  {@link #loadFlexibleElementTextAreaFields(FlexibleElementDTO,TextAreaType)} method if the{@code flexibleElement} is an instance of {@link TextAreaElementDTO}. </p>
 * @param flexibleElement The edited flexible element, may be  {@code null}.
 * @param type The element type, may be  {@code null}.
 */
private void loadFlexibleElementSpecificFields(final FlexibleElementDTO flexibleElement,final LogicalElementType type){
  view.getBudgetFields().setVisible(false);
  view.getAnchorAddSubField().setVisible(false);
  view.getRatioFlexTable().setVisible(false);
  view.clearBudgetFields();
  view.getUpBudgetSubFieldCombo().clearSelections();
  view.getDownBudgetSubFieldCombo().clearSelections();
  view.getUpBudgetSubFieldStore().removeAll();
  view.getUpBudgetSubFieldStore().commitChanges();
  view.getDownBudgetSubFieldStore().removeAll();
  view.getDownBudgetSubFieldStore().commitChanges();
  view.setSpecificFieldsVisibility(type);
  view.getBannerPositionField().disable();
  view.getBannerPositionField().setAllowBlank(true);
  customChoices.clear();
  disabledCustomChoices.clear();
  if (flexibleElement instanceof FilesListElementDTO) {
    view.getMaxLimitField().setValue(((FilesListElementDTO)flexibleElement).getLimit());
  }
 else   if (flexibleElement instanceof TextAreaElementDTO || type.toElementTypeEnum() == ElementTypeEnum.TEXT_AREA) {
    loadFlexibleElementTextAreaFields(flexibleElement,type.toTextAreaType());
  }
 else   if (flexibleElement instanceof QuestionElementDTO) {
    final QuestionElementDTO questionElement=(QuestionElementDTO)flexibleElement;
    view.setCustomChoiceAddFieldEnabled(true);
    view.getQualityLinkField().setValue(questionElement.getQualityCriterion() != null);
    view.getMultipleChoicesField().setValue(questionElement.getMultiple());
    view.getMultipleChoicesField().setEnabled(!isUpdateAndUnderMaintenance());
    if (ClientUtils.isNotEmpty(questionElement.getChoices())) {
      for (      final QuestionChoiceElementDTO choice : questionElement.getChoices()) {
        if (!isUpdateAndUnderMaintenance()) {
          onAddCustomChoice(choice.getLabel());
        }
 else {
          onAddUndeletableCustomChoice(choice.getLabel(),!choice.isDisabled());
        }
      }
    }
  }
 else   if (flexibleElement instanceof BudgetElementDTO) {
    final BudgetElementDTO budgetElement=(BudgetElementDTO)flexibleElement;
    view.getBudgetFields().setVisible(!isUpdateAndUnderMaintenance());
    view.getUpBudgetSubFieldCombo().setVisible(!isUpdateAndUnderMaintenance());
    view.getDownBudgetSubFieldCombo().setVisible(!isUpdateAndUnderMaintenance());
    int row=1;
    for (    final BudgetSubFieldDTO budgetField : budgetElement.getBudgetSubFields()) {
      final Text budgetText=new Text();
      budgetText.setData(""String_Node_Str"",budgetField);
      budgetText.addStyleName(""String_Node_Str"");
      if (budgetField.getType() != null) {
        budgetField.setLabel(BudgetSubFieldType.getName(budgetField.getType()));
      }
      budgetText.setText(budgetField.getLabel());
      view.getBudgetFields().setWidget(row,0,budgetText);
      view.getBudgetFields().setWidget(row,1,new TextField<String>());
      if (budgetField.getType() == null) {
        Anchor anchorEditSubField=new Anchor(IconImageBundle.ICONS.editPage().getSafeHtml());
        Anchor anchorDeleteSubField=new Anchor(IconImageBundle.ICONS.delete().getSafeHtml());
        view.getBudgetFields().setWidget(row,2,anchorEditSubField);
        view.getBudgetFields().setWidget(row,3,anchorDeleteSubField);
        anchorEditSubField.addClickHandler(new ClickHandler(){
          @Override public void onClick(          ClickEvent event){
            eventBus.navigateRequest(Page.ADMIN_EDIT_FLEXIBLE_ELEMENT_ADD_BUDGETSUBFIELD.request().addData(RequestParameter.DTO,budgetField));
          }
        }
);
        anchorDeleteSubField.addClickHandler(new ClickHandler(){
          @Override public void onClick(          ClickEvent event){
            budgetElement.getBudgetSubFields().remove(budgetField);
            loadFlexibleElement(flexibleElement);
          }
        }
);
      }
      budgetText.show();
      if (budgetField.getId() != null) {
        view.getUpBudgetSubFieldStore().add(budgetField);
        view.getDownBudgetSubFieldStore().add(budgetField);
      }
      row++;
    }
    view.getUpBudgetSubFieldStore().commitChanges();
    view.getDownBudgetSubFieldStore().commitChanges();
    for (    BudgetSubFieldDTO budgetField : budgetElement.getBudgetSubFields()) {
      if (budgetField.getId() != null) {
        if (budgetField.getId().equals(budgetElement.getRatioDividend().getId())) {
          view.getUpBudgetSubFieldCombo().setValue(budgetField);
        }
        if (budgetField.getId().equals(budgetElement.getRatioDivisor().getId())) {
          view.getDownBudgetSubFieldCombo().setValue(budgetField);
        }
      }
    }
    view.getSpecificForm().recalculate();
  }
 else   if (flexibleElement instanceof ComputationElementDTO) {
    final ComputationElementDTO computationElement=(ComputationElementDTO)flexibleElement;
    final String formattedRule=Computations.formatRuleForEdition(computationElement.getRule(),otherElements);
    view.getFormulaField().setValue(formattedRule);
    view.getMinLimitField().setValue(ComputedValues.from(computationElement.getMinimumValue(),false).get());
    view.getMaxLimitField().setValue(ComputedValues.from(computationElement.getMaximumValue(),false).get());
  }
  if (type == ElementTypeEnum.COMPUTATION) {
    addNumberTypeToStore(view.getStore());
  }
 else   if (type == ElementTypeEnum.CONTACT_LIST) {
    loadContactListOptions((ContactListElementDTO)flexibleElement);
  }
  if (type == DefaultFlexibleElementType.BUDGET_RATIO) {
    addNumberTypeToStore(view.getBudgetSubFieldSpentStore(),view.getBudgetSubFieldPlannedStore());
  }
  if (flexibleElement instanceof BudgetRatioElementDTO) {
    final BudgetRatioElementDTO budgetRatioElementDTO=(BudgetRatioElementDTO)flexibleElement;
    if (budgetRatioElementDTO.getSpentBudget() != null) {
      view.getBudgetSubFieldSpentCombo().setSelection(java.util.Collections.singletonList(budgetRatioElementDTO.getSpentBudget()));
    }
    if (budgetRatioElementDTO.getPlannedBudget() != null) {
      view.getBudgetSubFieldPlannedCombo().setSelection(java.util.Collections.singletonList(budgetRatioElementDTO.getPlannedBudget()));
    }
  }
}",0.9904644724700092
35445,"private void addNumberTypeToStore(ListStore<FlexibleElementDTO>... stores){
  for (  ListStore<FlexibleElementDTO> store : stores) {
    store.removeAll();
  }
  for (  final FlexibleElementDTO otherElement : otherElements) {
    if (otherElement.getGroup().getHasIterations()) {
      continue;
    }
    final LogicalElementType otherType=LogicalElementTypes.of(otherElement);
    final ElementTypeEnum otherElementType=otherType.toElementTypeEnum();
    if ((otherElementType == ElementTypeEnum.TEXT_AREA && otherType.toTextAreaType() == TextAreaType.NUMBER) || otherElementType == ElementTypeEnum.COMPUTATION) {
      for (      ListStore<FlexibleElementDTO> store : stores) {
        store.add(otherElement);
      }
    }
 else     if (otherElementType == ElementTypeEnum.CONTACT_LIST) {
      loadContactListOptions((ContactListElementDTO)flexibleElement);
    }
  }
}","private void addNumberTypeToStore(ListStore<FlexibleElementDTO>... stores){
  for (  ListStore<FlexibleElementDTO> store : stores) {
    store.removeAll();
  }
  for (  final FlexibleElementDTO otherElement : otherElements) {
    if (otherElement.getGroup().getHasIterations()) {
      continue;
    }
    final LogicalElementType otherType=LogicalElementTypes.of(otherElement);
    final ElementTypeEnum otherElementType=otherType.toElementTypeEnum();
    if ((otherElementType == ElementTypeEnum.TEXT_AREA && otherType.toTextAreaType() == TextAreaType.NUMBER) || otherElementType == ElementTypeEnum.COMPUTATION) {
      for (      ListStore<FlexibleElementDTO> store : stores) {
        store.add(otherElement);
      }
    }
  }
}",0.9116915422885572
35446,"@Override public void handleDedupeContact(final Integer targetedContactId,List<ContactDuplicatedProperty> selectedProperties){
  dispatch.execute(new DedupeContact(selectedProperties,contactDTO.getId(),targetedContactId),new CommandResultHandler<ContactDTO>(){
    @Override protected void onCommandSuccess(    ContactDTO targetedContactDTO){
      dedupeContactDialog.hide();
      eventBus.navigateRequest(Page.CONTACT_DASHBOARD.requestWith(RequestParameter.ID,targetedContactId));
    }
  }
);
}","@Override public void handleDedupeContact(final Integer targetedContactId,List<ContactDuplicatedProperty> selectedProperties){
  dispatch.execute(new DedupeContact(selectedProperties,contactDTO.getId(),targetedContactId),new CommandResultHandler<ContactDTO>(){
    @Override protected void onCommandSuccess(    ContactDTO targetedContactDTO){
      dedupeContactDialog.hide();
      final PageRequest currentRequest=injector.getPageManager().getCurrentPageRequest(false);
      eventBus.navigateRequest(Page.CONTACT_DASHBOARD.requestWith(RequestParameter.ID,targetedContactId));
      eventBus.fireEvent(new UpdateEvent(UpdateEvent.CONTACT_DELETE,currentRequest));
    }
  }
);
}",0.8462192013593883
35447,"@Override public void refresh(final ContactDTO contactDTO){
  computationTriggerManager.prepareForContact(contactDTO);
  valueChanges.clear();
  view.getDetailsContainer().removeAll();
  final LayoutDTO layout=contactDTO.getContactModel().getDetails().getLayout();
  int count=0;
  for (  final LayoutGroupDTO groupDTO : layout.getGroups()) {
    count+=groupDTO.getConstraints().size();
  }
  if (count == 0) {
    view.fillContainer(new Label(I18N.CONSTANTS.contactDetailsNoDetails()));
    return;
  }
  formPanel=Forms.panel();
  final Grid gridLayout=new Grid(layout.getRowsCount(),layout.getColumnsCount());
  gridLayout.setCellPadding(0);
  gridLayout.setCellSpacing(0);
  formPanel.add(new Label(I18N.CONSTANTS.contactUniqueId() + contactDTO.getId()));
  final DispatchQueue queue=new DispatchQueue(dispatch,true);
  for (  final LayoutGroupDTO groupLayout : layout.getGroups()) {
    if (!groupLayout.getHasIterations()) {
      FieldSet fieldSet=createGroupLayoutFieldSet(contactDTO,groupLayout,queue,null,null,null);
      fieldSet.setHeadingHtml(groupLayout.getTitle());
      fieldSet.setCollapsible(true);
      fieldSet.setBorders(true);
      gridLayout.setWidget(groupLayout.getRow(),groupLayout.getColumn(),fieldSet);
      continue;
    }
    final FieldSet fieldSet=(FieldSet)groupLayout.getWidget();
    gridLayout.setWidget(groupLayout.getRow(),groupLayout.getColumn(),fieldSet);
    final IterableGroupPanel tabPanel=Forms.iterableGroupPanel(dispatch,groupLayout,contactDTO,ProfileUtils.isGranted(auth(),GlobalPermissionEnum.CREATE_ITERATIONS));
    tabPanel.setDelegate(this);
    fieldSet.add(tabPanel);
    tabPanel.setAutoHeight(true);
    tabPanel.setAutoWidth(true);
    tabPanel.setTabScroll(true);
    tabPanel.addStyleName(""String_Node_Str"");
    tabPanel.setBorders(true);
    tabPanel.setBodyBorder(false);
    GetLayoutGroupIterations getIterations=new GetLayoutGroupIterations(groupLayout.getId(),contactDTO.getId(),-1);
    queue.add(getIterations,new CommandResultHandler<ListResult<LayoutGroupIterationDTO>>(){
      @Override public void onCommandFailure(      final Throwable throwable){
        if (Log.isErrorEnabled()) {
          Log.error(""String_Node_Str"",throwable);
        }
        throw new RuntimeException(throwable);
      }
      @Override protected void onCommandSuccess(      ListResult<LayoutGroupIterationDTO> result){
        DispatchQueue iterationsQueue=new DispatchQueue(dispatch,true);
        for (        final LayoutGroupIterationDTO iteration : result.getList()) {
          final IterableGroupItem tab=new IterableGroupItem(tabPanel,iteration.getId(),iteration.getName());
          tabPanel.addIterationTab(tab);
          Layout tabLayout=Layouts.fitLayout();
          tab.setLayout(tabLayout);
          FieldSet tabSet=createGroupLayoutFieldSet(contactDTO,groupLayout,iterationsQueue,iteration == null ? null : iteration.getId(),tabPanel,tab);
          tab.add(tabSet);
        }
        iterationsQueue.start();
        if (tabPanel.getItemCount() > 0) {
          tabPanel.setSelection(tabPanel.getItem(0));
        }
      }
    }
,new LoadingMask(view.getDetailsContainer()));
    fieldSet.layout();
  }
  view.getSaveButton().removeAllListeners();
  view.getSaveButton().addSelectionListener(new SelectionListener<ButtonEvent>(){
    @Override public void componentSelected(    final ButtonEvent buttonEvent){
      view.getSaveButton().disable();
      dispatch.execute(buildCheckContactDuplicationCommand(contactDTO),new CommandResultHandler<ListResult<ContactDTO>>(){
        @Override protected void onCommandSuccess(        ListResult<ContactDTO> result){
          if (result == null || result.isEmpty()) {
            updateContact(contactDTO,new CommandResultHandler<ContactDTO>(){
              @Override protected void onCommandSuccess(              ContactDTO updatedContactDTO){
                view.getSaveButton().enable();
              }
            }
,view.getDetailsContainer());
            return;
          }
          final DedupeContactDialog dedupeContactDialog=view.generateDedupeDialog();
          dedupeContactDialog.getPossibleDuplicatesGrid().getStore().add(result.getList());
          dedupeContactDialog.getFirstStepMainButton().addSelectionListener(new SelectionListener<ButtonEvent>(){
            @Override public void componentSelected(            ButtonEvent ce){
              updateContact(contactDTO,new CommandResultHandler<ContactDTO>(){
                @Override protected void onCommandSuccess(                ContactDTO result){
                  dedupeContactDialog.hide();
                }
              }
,view.getDetailsContainer());
            }
          }
);
          dedupeContactDialog.setSecondStepHandler(new DedupeContactDialog.SecondStepHandler(){
            @Override public void initialize(            final Integer contactId,            final ListStore<ContactDuplicatedProperty> propertiesStore){
              updateContact(contactDTO,new CommandResultHandler<ContactDTO>(){
                @Override protected void onCommandSuccess(                ContactDTO updatedContactDTO){
                  dispatch.execute(new GetContactDuplicatedProperties(contactId,updatedContactDTO.getId(),null),new CommandResultHandler<ListResult<ContactDuplicatedProperty>>(){
                    @Override protected void onCommandSuccess(                    ListResult<ContactDuplicatedProperty> result){
                      propertiesStore.add(result.getList());
                    }
                  }
,new LoadingMask(dedupeContactDialog));
                }
              }
,dedupeContactDialog);
            }
            @Override public void downloadImage(            String id,            final Image image){
              imageProvider.provideDataUrl(id,new SuccessCallback<String>(){
                @Override public void onSuccess(                String dataUrl){
                  image.setUrl(dataUrl);
                }
              }
);
            }
            @Override public void handleDedupeContact(            final Integer targetedContactId,            List<ContactDuplicatedProperty> selectedProperties){
              dispatch.execute(new DedupeContact(selectedProperties,contactDTO.getId(),targetedContactId),new CommandResultHandler<ContactDTO>(){
                @Override protected void onCommandSuccess(                ContactDTO targetedContactDTO){
                  dedupeContactDialog.hide();
                  eventBus.navigateRequest(Page.CONTACT_DASHBOARD.requestWith(RequestParameter.ID,targetedContactId));
                }
              }
);
            }
          }
);
          dedupeContactDialog.addWindowListener(new WindowListener(){
            @Override public void windowHide(            WindowEvent windowEvent){
              super.windowHide(windowEvent);
              if (windowEvent.getType() == Events.Hide) {
                view.getSaveButton().enable();
              }
            }
          }
);
          dedupeContactDialog.show();
        }
      }
);
    }
  }
);
  view.getExportButton().removeAllListeners();
  view.getExportButton().addSelectionListener(new SelectionListener<ButtonEvent>(){
    @Override public void componentSelected(    final ButtonEvent ce){
      onExportContact(contactDTO);
    }
  }
);
  queue.start();
  formPanel.add(gridLayout);
  view.fillContainer(formPanel);
}","@Override public void refresh(final ContactDTO contactDTO){
  computationTriggerManager.prepareForContact(contactDTO);
  valueChanges.clear();
  view.getDetailsContainer().removeAll();
  final LayoutDTO layout=contactDTO.getContactModel().getDetails().getLayout();
  int count=0;
  for (  final LayoutGroupDTO groupDTO : layout.getGroups()) {
    count+=groupDTO.getConstraints().size();
  }
  if (count == 0) {
    view.fillContainer(new Label(I18N.CONSTANTS.contactDetailsNoDetails()));
    return;
  }
  formPanel=Forms.panel();
  final Grid gridLayout=new Grid(layout.getRowsCount(),layout.getColumnsCount());
  gridLayout.setCellPadding(0);
  gridLayout.setCellSpacing(0);
  formPanel.add(new Label(I18N.CONSTANTS.contactUniqueId() + contactDTO.getId()));
  final DispatchQueue queue=new DispatchQueue(dispatch,true);
  for (  final LayoutGroupDTO groupLayout : layout.getGroups()) {
    if (!groupLayout.getHasIterations()) {
      FieldSet fieldSet=createGroupLayoutFieldSet(contactDTO,groupLayout,queue,null,null,null);
      fieldSet.setHeadingHtml(groupLayout.getTitle());
      fieldSet.setCollapsible(true);
      fieldSet.setBorders(true);
      gridLayout.setWidget(groupLayout.getRow(),groupLayout.getColumn(),fieldSet);
      continue;
    }
    final FieldSet fieldSet=(FieldSet)groupLayout.getWidget();
    gridLayout.setWidget(groupLayout.getRow(),groupLayout.getColumn(),fieldSet);
    final IterableGroupPanel tabPanel=Forms.iterableGroupPanel(dispatch,groupLayout,contactDTO,ProfileUtils.isGranted(auth(),GlobalPermissionEnum.CREATE_ITERATIONS));
    tabPanel.setDelegate(this);
    fieldSet.add(tabPanel);
    tabPanel.setAutoHeight(true);
    tabPanel.setAutoWidth(true);
    tabPanel.setTabScroll(true);
    tabPanel.addStyleName(""String_Node_Str"");
    tabPanel.setBorders(true);
    tabPanel.setBodyBorder(false);
    GetLayoutGroupIterations getIterations=new GetLayoutGroupIterations(groupLayout.getId(),contactDTO.getId(),-1);
    queue.add(getIterations,new CommandResultHandler<ListResult<LayoutGroupIterationDTO>>(){
      @Override public void onCommandFailure(      final Throwable throwable){
        if (Log.isErrorEnabled()) {
          Log.error(""String_Node_Str"",throwable);
        }
        throw new RuntimeException(throwable);
      }
      @Override protected void onCommandSuccess(      ListResult<LayoutGroupIterationDTO> result){
        DispatchQueue iterationsQueue=new DispatchQueue(dispatch,true);
        for (        final LayoutGroupIterationDTO iteration : result.getList()) {
          final IterableGroupItem tab=new IterableGroupItem(tabPanel,iteration.getId(),iteration.getName());
          tabPanel.addIterationTab(tab);
          Layout tabLayout=Layouts.fitLayout();
          tab.setLayout(tabLayout);
          FieldSet tabSet=createGroupLayoutFieldSet(contactDTO,groupLayout,iterationsQueue,iteration == null ? null : iteration.getId(),tabPanel,tab);
          tab.add(tabSet);
        }
        iterationsQueue.start();
        if (tabPanel.getItemCount() > 0) {
          tabPanel.setSelection(tabPanel.getItem(0));
        }
      }
    }
,new LoadingMask(view.getDetailsContainer()));
    fieldSet.layout();
  }
  view.getSaveButton().removeAllListeners();
  view.getSaveButton().addSelectionListener(new SelectionListener<ButtonEvent>(){
    @Override public void componentSelected(    final ButtonEvent buttonEvent){
      view.getSaveButton().disable();
      dispatch.execute(buildCheckContactDuplicationCommand(contactDTO),new CommandResultHandler<ListResult<ContactDTO>>(){
        @Override protected void onCommandSuccess(        ListResult<ContactDTO> result){
          if (result == null || result.isEmpty()) {
            updateContact(contactDTO,new CommandResultHandler<ContactDTO>(){
              @Override protected void onCommandSuccess(              ContactDTO updatedContactDTO){
                view.getSaveButton().enable();
              }
            }
,view.getDetailsContainer());
            return;
          }
          final DedupeContactDialog dedupeContactDialog=view.generateDedupeDialog();
          dedupeContactDialog.getPossibleDuplicatesGrid().getStore().add(result.getList());
          dedupeContactDialog.getFirstStepMainButton().addSelectionListener(new SelectionListener<ButtonEvent>(){
            @Override public void componentSelected(            ButtonEvent ce){
              updateContact(contactDTO,new CommandResultHandler<ContactDTO>(){
                @Override protected void onCommandSuccess(                ContactDTO result){
                  dedupeContactDialog.hide();
                }
              }
,view.getDetailsContainer());
            }
          }
);
          dedupeContactDialog.setSecondStepHandler(new DedupeContactDialog.SecondStepHandler(){
            @Override public void initialize(            final Integer contactId,            final ListStore<ContactDuplicatedProperty> propertiesStore){
              updateContact(contactDTO,new CommandResultHandler<ContactDTO>(){
                @Override protected void onCommandSuccess(                ContactDTO updatedContactDTO){
                  dispatch.execute(new GetContactDuplicatedProperties(contactId,updatedContactDTO.getId(),null),new CommandResultHandler<ListResult<ContactDuplicatedProperty>>(){
                    @Override protected void onCommandSuccess(                    ListResult<ContactDuplicatedProperty> result){
                      propertiesStore.add(result.getList());
                    }
                  }
,new LoadingMask(dedupeContactDialog));
                }
              }
,dedupeContactDialog);
            }
            @Override public void downloadImage(            String id,            final Image image){
              imageProvider.provideDataUrl(id,new SuccessCallback<String>(){
                @Override public void onSuccess(                String dataUrl){
                  image.setUrl(dataUrl);
                }
              }
);
            }
            @Override public void handleDedupeContact(            final Integer targetedContactId,            List<ContactDuplicatedProperty> selectedProperties){
              dispatch.execute(new DedupeContact(selectedProperties,contactDTO.getId(),targetedContactId),new CommandResultHandler<ContactDTO>(){
                @Override protected void onCommandSuccess(                ContactDTO targetedContactDTO){
                  dedupeContactDialog.hide();
                  final PageRequest currentRequest=injector.getPageManager().getCurrentPageRequest(false);
                  eventBus.navigateRequest(Page.CONTACT_DASHBOARD.requestWith(RequestParameter.ID,targetedContactId));
                  eventBus.fireEvent(new UpdateEvent(UpdateEvent.CONTACT_DELETE,currentRequest));
                }
              }
);
            }
          }
);
          dedupeContactDialog.addWindowListener(new WindowListener(){
            @Override public void windowHide(            WindowEvent windowEvent){
              super.windowHide(windowEvent);
              if (windowEvent.getType() == Events.Hide) {
                view.getSaveButton().enable();
              }
            }
          }
);
          dedupeContactDialog.show();
        }
      }
);
    }
  }
);
  view.getDeleteButton().removeAllListeners();
  view.getDeleteButton().addSelectionListener(new SelectionListener<ButtonEvent>(){
    @Override public void componentSelected(    final ButtonEvent ce){
      onDeleteContact(contactDTO);
    }
  }
);
  view.getDeleteButton().setEnabled(canDeleteContact());
  view.getDeleteButton().setVisible(canDeleteContact());
  view.getExportButton().removeAllListeners();
  view.getExportButton().addSelectionListener(new SelectionListener<ButtonEvent>(){
    @Override public void componentSelected(    final ButtonEvent ce){
      onExportContact(contactDTO);
    }
  }
);
  queue.start();
  formPanel.add(gridLayout);
  view.fillContainer(formPanel);
}",0.9629726036311576
35448,"@Override protected void onCommandSuccess(final VoidResult result){
  N10N.infoNotif(I18N.CONSTANTS.infoConfirmation(),I18N.CONSTANTS.saveConfirm());
  for (  final ValueEvent event : valueChanges) {
    if (event.getSource() instanceof DefaultContactFlexibleElementDTO) {
      updateCurrentContact(contactDTO,(DefaultContactFlexibleElementDTO)event.getSource(),event.getSingleValue());
    }
  }
  valueChanges.clear();
  if (callback != null) {
    callback.onSuccess(contactDTO);
  }
}","@Override public void onCommandSuccess(final VoidResult result){
  final PageRequest currentRequest=injector.getPageManager().getCurrentPageRequest(false);
  eventBus.fireEvent(new UpdateEvent(UpdateEvent.CONTACT_DELETE,currentRequest));
  N10N.infoNotif(I18N.CONSTANTS.deleteContactNotificationTitle(),I18N.CONSTANTS.deleteContactNotificationContent());
}",0.2745562130177514
35449,"@Override public void componentSelected(ButtonEvent event){
  if (!formPanel.isValid()) {
    return;
  }
  createContactHandler.handleContactCreation(contactModelComboBox.getValue(),firstNameField.getValue(),familyNameField.getValue(),organizationNameField.getValue(),mainOrgUnitComboBox.getValue(),secondaryOrgUnitsComboBox.getListStore().getModels());
  window.hide();
}","@Override public void componentSelected(ButtonEvent event){
  if (!formPanel.isValid()) {
    return;
  }
  createContactHandler.handleContactCreation(contactModelComboBox.getValue(),emailField.getValue(),firstNameField.getValue(),familyNameField.getValue(),organizationNameField.getValue(),mainOrgUnitComboBox.getValue(),secondaryOrgUnitsComboBox.getListStore().getModels());
  window.hide();
}",0.9713541666666666
35450,"private HashMap<String,Object> buildPropertyMap(ContactModelDTO contactModelDTO,String firstName,String familyName,String organizationName,OrgUnitDTO mainOrgUnit,List<OrgUnitDTO> secondaryOrgUnits){
  HashMap<String,Object> properties=new HashMap<String,Object>();
  properties.put(ContactDTO.CONTACT_MODEL,contactModelDTO.getId());
  properties.put(ContactDTO.FIRSTNAME,contactModelDTO.getType() == ContactModelType.INDIVIDUAL ? firstName : null);
  properties.put(ContactDTO.NAME,contactModelDTO.getType() == ContactModelType.INDIVIDUAL ? familyName : organizationName);
  if (mainOrgUnit != null) {
    properties.put(ContactDTO.MAIN_ORG_UNIT,mainOrgUnit.getId());
  }
  if (secondaryOrgUnits != null) {
    HashSet<Integer> secondaryOrgUnitIds=new HashSet<Integer>();
    for (    OrgUnitDTO secondaryOrgUnit : secondaryOrgUnits) {
      secondaryOrgUnitIds.add(secondaryOrgUnit.getId());
    }
    properties.put(ContactDTO.SECONDARY_ORG_UNITS,secondaryOrgUnitIds);
  }
  return properties;
}","private HashMap<String,Object> buildPropertyMap(ContactModelDTO contactModelDTO,String email,String firstName,String familyName,String organizationName,OrgUnitDTO mainOrgUnit,List<OrgUnitDTO> secondaryOrgUnits){
  HashMap<String,Object> properties=new HashMap<String,Object>();
  properties.put(ContactDTO.CONTACT_MODEL,contactModelDTO.getId());
  properties.put(ContactDTO.EMAIL,email);
  properties.put(ContactDTO.FIRSTNAME,contactModelDTO.getType() == ContactModelType.INDIVIDUAL ? firstName : null);
  properties.put(ContactDTO.NAME,contactModelDTO.getType() == ContactModelType.INDIVIDUAL ? familyName : organizationName);
  if (mainOrgUnit != null) {
    properties.put(ContactDTO.MAIN_ORG_UNIT,mainOrgUnit.getId());
  }
  if (secondaryOrgUnits != null) {
    HashSet<Integer> secondaryOrgUnitIds=new HashSet<Integer>();
    for (    OrgUnitDTO secondaryOrgUnit : secondaryOrgUnits) {
      secondaryOrgUnitIds.add(secondaryOrgUnit.getId());
    }
    properties.put(ContactDTO.SECONDARY_ORG_UNITS,secondaryOrgUnitIds);
  }
  return properties;
}",0.9731576378721328
35451,"/** 
 * Builds a new contact list panel with default values.
 */
@Inject public ContactsListWidget(final View view,final Injector injector){
  super(view,injector);
  createContactHandler=new CreateContactHandler(){
    @Override public void handleContactCreation(    final ContactModelDTO contactModelDTO,    final String firstName,    final String familyName,    final String organizationName,    final OrgUnitDTO mainOrgUnit,    final List<OrgUnitDTO> secondaryOrgUnits){
      CheckContactDuplication checkContactDuplication;
      if (contactModelDTO.getType() == ContactModelType.INDIVIDUAL) {
        checkContactDuplication=new CheckContactDuplication(null,null,familyName,firstName);
      }
 else {
        checkContactDuplication=new CheckContactDuplication(null,null,familyName,null);
      }
      dispatch.execute(checkContactDuplication,new AsyncCallback<ListResult<ContactDTO>>(){
        @Override public void onFailure(        Throwable caught){
          Log.error(""String_Node_Str"");
        }
        @Override public void onSuccess(        ListResult<ContactDTO> result){
          final HashMap<String,Object> properties=buildPropertyMap(contactModelDTO,firstName,familyName,organizationName,mainOrgUnit,secondaryOrgUnits);
          if (result == null || result.getSize() == 0) {
            createEntity(properties);
            return;
          }
          final DedupeContactDialog dedupeContactDialog=new DedupeContactDialog(true);
          dedupeContactDialog.getPossibleDuplicatesGrid().getStore().add(result.getList());
          dedupeContactDialog.getFirstStepMainButton().addSelectionListener(new SelectionListener<ButtonEvent>(){
            @Override public void componentSelected(            ButtonEvent ce){
              createEntity(properties);
              dedupeContactDialog.hide();
            }
          }
);
          dedupeContactDialog.setSecondStepHandler(new DedupeContactDialog.SecondStepHandler(){
            @Override public void initialize(            final Integer contactId,            final ListStore<ContactDuplicatedProperty> propertiesStore){
              dispatch.execute(new GetContactDuplicatedProperties(contactId,null,properties),new CommandResultHandler<ListResult<ContactDuplicatedProperty>>(){
                @Override protected void onCommandSuccess(                ListResult<ContactDuplicatedProperty> result){
                  propertiesStore.add(result.getList());
                }
              }
,new LoadingMask(dedupeContactDialog));
            }
            @Override public void downloadImage(            String id,            final Image image){
              imageProvider.provideDataUrl(id,new SuccessCallback<String>(){
                @Override public void onSuccess(                String dataUrl){
                  image.setUrl(dataUrl);
                }
              }
);
            }
            @Override public void handleDedupeContact(            final Integer targetedContactId,            List<ContactDuplicatedProperty> selectedProperties){
              dispatch.execute(new DedupeContact(selectedProperties,targetedContactId),new CommandResultHandler<ContactDTO>(){
                @Override protected void onCommandSuccess(                ContactDTO targetedContactDTO){
                  dedupeContactDialog.hide();
                  eventBus.navigateRequest(Page.CONTACT_DASHBOARD.requestWith(RequestParameter.ID,targetedContactId));
                }
              }
);
            }
          }
);
          dedupeContactDialog.show();
        }
      }
);
    }
  }
;
}","/** 
 * Builds a new contact list panel with default values.
 */
@Inject public ContactsListWidget(final View view,final Injector injector){
  super(view,injector);
  createContactHandler=new CreateContactHandler(){
    @Override public void handleContactCreation(    final ContactModelDTO contactModelDTO,    final String email,    final String firstName,    final String familyName,    final String organizationName,    final OrgUnitDTO mainOrgUnit,    final List<OrgUnitDTO> secondaryOrgUnits){
      CheckContactDuplication checkContactDuplication;
      if (contactModelDTO.getType() == ContactModelType.INDIVIDUAL) {
        checkContactDuplication=new CheckContactDuplication(null,email,familyName,firstName);
      }
 else {
        checkContactDuplication=new CheckContactDuplication(null,email,familyName,null);
      }
      dispatch.execute(checkContactDuplication,new AsyncCallback<ListResult<ContactDTO>>(){
        @Override public void onFailure(        Throwable caught){
          Log.error(""String_Node_Str"");
        }
        @Override public void onSuccess(        ListResult<ContactDTO> result){
          final HashMap<String,Object> properties=buildPropertyMap(contactModelDTO,email,firstName,familyName,organizationName,mainOrgUnit,secondaryOrgUnits);
          if (result == null || result.getSize() == 0) {
            createEntity(properties);
            return;
          }
          final DedupeContactDialog dedupeContactDialog=new DedupeContactDialog(true);
          dedupeContactDialog.getPossibleDuplicatesGrid().getStore().add(result.getList());
          dedupeContactDialog.getFirstStepMainButton().addSelectionListener(new SelectionListener<ButtonEvent>(){
            @Override public void componentSelected(            ButtonEvent ce){
              createEntity(properties);
              dedupeContactDialog.hide();
            }
          }
);
          dedupeContactDialog.setSecondStepHandler(new DedupeContactDialog.SecondStepHandler(){
            @Override public void initialize(            final Integer contactId,            final ListStore<ContactDuplicatedProperty> propertiesStore){
              dispatch.execute(new GetContactDuplicatedProperties(contactId,null,properties),new CommandResultHandler<ListResult<ContactDuplicatedProperty>>(){
                @Override protected void onCommandSuccess(                ListResult<ContactDuplicatedProperty> result){
                  propertiesStore.add(result.getList());
                }
              }
,new LoadingMask(dedupeContactDialog));
            }
            @Override public void downloadImage(            String id,            final Image image){
              imageProvider.provideDataUrl(id,new SuccessCallback<String>(){
                @Override public void onSuccess(                String dataUrl){
                  image.setUrl(dataUrl);
                }
              }
);
            }
            @Override public void handleDedupeContact(            final Integer targetedContactId,            List<ContactDuplicatedProperty> selectedProperties){
              dispatch.execute(new DedupeContact(selectedProperties,targetedContactId),new CommandResultHandler<ContactDTO>(){
                @Override protected void onCommandSuccess(                ContactDTO targetedContactDTO){
                  dedupeContactDialog.hide();
                  eventBus.navigateRequest(Page.CONTACT_DASHBOARD.requestWith(RequestParameter.ID,targetedContactId));
                }
              }
);
            }
          }
);
          dedupeContactDialog.show();
        }
      }
);
    }
  }
;
}",0.9940302651672914
35452,"@Override public void handleContactCreation(final ContactModelDTO contactModelDTO,final String firstName,final String familyName,final String organizationName,final OrgUnitDTO mainOrgUnit,final List<OrgUnitDTO> secondaryOrgUnits){
  CheckContactDuplication checkContactDuplication;
  if (contactModelDTO.getType() == ContactModelType.INDIVIDUAL) {
    checkContactDuplication=new CheckContactDuplication(null,null,familyName,firstName);
  }
 else {
    checkContactDuplication=new CheckContactDuplication(null,null,familyName,null);
  }
  dispatch.execute(checkContactDuplication,new AsyncCallback<ListResult<ContactDTO>>(){
    @Override public void onFailure(    Throwable caught){
      Log.error(""String_Node_Str"");
    }
    @Override public void onSuccess(    ListResult<ContactDTO> result){
      final HashMap<String,Object> properties=buildPropertyMap(contactModelDTO,firstName,familyName,organizationName,mainOrgUnit,secondaryOrgUnits);
      if (result == null || result.getSize() == 0) {
        createEntity(properties);
        return;
      }
      final DedupeContactDialog dedupeContactDialog=new DedupeContactDialog(true);
      dedupeContactDialog.getPossibleDuplicatesGrid().getStore().add(result.getList());
      dedupeContactDialog.getFirstStepMainButton().addSelectionListener(new SelectionListener<ButtonEvent>(){
        @Override public void componentSelected(        ButtonEvent ce){
          createEntity(properties);
          dedupeContactDialog.hide();
        }
      }
);
      dedupeContactDialog.setSecondStepHandler(new DedupeContactDialog.SecondStepHandler(){
        @Override public void initialize(        final Integer contactId,        final ListStore<ContactDuplicatedProperty> propertiesStore){
          dispatch.execute(new GetContactDuplicatedProperties(contactId,null,properties),new CommandResultHandler<ListResult<ContactDuplicatedProperty>>(){
            @Override protected void onCommandSuccess(            ListResult<ContactDuplicatedProperty> result){
              propertiesStore.add(result.getList());
            }
          }
,new LoadingMask(dedupeContactDialog));
        }
        @Override public void downloadImage(        String id,        final Image image){
          imageProvider.provideDataUrl(id,new SuccessCallback<String>(){
            @Override public void onSuccess(            String dataUrl){
              image.setUrl(dataUrl);
            }
          }
);
        }
        @Override public void handleDedupeContact(        final Integer targetedContactId,        List<ContactDuplicatedProperty> selectedProperties){
          dispatch.execute(new DedupeContact(selectedProperties,targetedContactId),new CommandResultHandler<ContactDTO>(){
            @Override protected void onCommandSuccess(            ContactDTO targetedContactDTO){
              dedupeContactDialog.hide();
              eventBus.navigateRequest(Page.CONTACT_DASHBOARD.requestWith(RequestParameter.ID,targetedContactId));
            }
          }
);
        }
      }
);
      dedupeContactDialog.show();
    }
  }
);
}","@Override public void handleContactCreation(final ContactModelDTO contactModelDTO,final String email,final String firstName,final String familyName,final String organizationName,final OrgUnitDTO mainOrgUnit,final List<OrgUnitDTO> secondaryOrgUnits){
  CheckContactDuplication checkContactDuplication;
  if (contactModelDTO.getType() == ContactModelType.INDIVIDUAL) {
    checkContactDuplication=new CheckContactDuplication(null,email,familyName,firstName);
  }
 else {
    checkContactDuplication=new CheckContactDuplication(null,email,familyName,null);
  }
  dispatch.execute(checkContactDuplication,new AsyncCallback<ListResult<ContactDTO>>(){
    @Override public void onFailure(    Throwable caught){
      Log.error(""String_Node_Str"");
    }
    @Override public void onSuccess(    ListResult<ContactDTO> result){
      final HashMap<String,Object> properties=buildPropertyMap(contactModelDTO,email,firstName,familyName,organizationName,mainOrgUnit,secondaryOrgUnits);
      if (result == null || result.getSize() == 0) {
        createEntity(properties);
        return;
      }
      final DedupeContactDialog dedupeContactDialog=new DedupeContactDialog(true);
      dedupeContactDialog.getPossibleDuplicatesGrid().getStore().add(result.getList());
      dedupeContactDialog.getFirstStepMainButton().addSelectionListener(new SelectionListener<ButtonEvent>(){
        @Override public void componentSelected(        ButtonEvent ce){
          createEntity(properties);
          dedupeContactDialog.hide();
        }
      }
);
      dedupeContactDialog.setSecondStepHandler(new DedupeContactDialog.SecondStepHandler(){
        @Override public void initialize(        final Integer contactId,        final ListStore<ContactDuplicatedProperty> propertiesStore){
          dispatch.execute(new GetContactDuplicatedProperties(contactId,null,properties),new CommandResultHandler<ListResult<ContactDuplicatedProperty>>(){
            @Override protected void onCommandSuccess(            ListResult<ContactDuplicatedProperty> result){
              propertiesStore.add(result.getList());
            }
          }
,new LoadingMask(dedupeContactDialog));
        }
        @Override public void downloadImage(        String id,        final Image image){
          imageProvider.provideDataUrl(id,new SuccessCallback<String>(){
            @Override public void onSuccess(            String dataUrl){
              image.setUrl(dataUrl);
            }
          }
);
        }
        @Override public void handleDedupeContact(        final Integer targetedContactId,        List<ContactDuplicatedProperty> selectedProperties){
          dispatch.execute(new DedupeContact(selectedProperties,targetedContactId),new CommandResultHandler<ContactDTO>(){
            @Override protected void onCommandSuccess(            ContactDTO targetedContactDTO){
              dedupeContactDialog.hide();
              eventBus.navigateRequest(Page.CONTACT_DASHBOARD.requestWith(RequestParameter.ID,targetedContactId));
            }
          }
);
        }
      }
);
      dedupeContactDialog.show();
    }
  }
);
}",0.9936923823386704
35453,"private void showContactCreator(){
  final Window window=new Window();
  window.setPlain(true);
  window.setModal(true);
  window.setBlinkModal(true);
  window.setLayout(new FitLayout());
  window.setSize(700,300);
  window.setHeadingHtml(I18N.CONSTANTS.createContactDialogTitle());
  final ComboBox<ContactModelDTO> contactModelComboBox=Forms.combobox(I18N.CONSTANTS.contactModelLabel(),true,ContactModelDTO.ID,ContactModelDTO.NAME);
  final TextField<String> firstNameField=Forms.text(I18N.CONSTANTS.contactFirstName(),false);
  final TextField<String> familyNameField=Forms.text(I18N.CONSTANTS.contactFamilyName(),false);
  final TextField<String> organizationNameField=Forms.text(I18N.CONSTANTS.contactOrganizationName(),false);
  firstNameField.setVisible(false);
  familyNameField.setVisible(false);
  organizationNameField.setVisible(false);
  final ComboBox<OrgUnitDTO> mainOrgUnitComboBox=Forms.combobox(I18N.CONSTANTS.contactMainOrgUnit(),false,OrgUnitDTO.ID,OrgUnitDTO.FULL_NAME);
  final ListComboBox<OrgUnitDTO> secondaryOrgUnitsComboBox=new ListComboBox<OrgUnitDTO>(OrgUnitDTO.ID,OrgUnitDTO.FULL_NAME);
  secondaryOrgUnitsComboBox.initComponent();
  final AdapterField secondaryOrgUnitsFieldAdapter=Forms.adapter(I18N.CONSTANTS.contactSecondaryOrgUnits(),secondaryOrgUnitsComboBox);
  secondaryOrgUnitsFieldAdapter.setVisible(false);
  dispatch.execute(new GetContactModels(null,Collections.<Integer>emptySet(),true),new AsyncCallback<ListResult<ContactModelDTO>>(){
    @Override public void onFailure(    Throwable caught){
      Log.error(""String_Node_Str"");
    }
    @Override public void onSuccess(    ListResult<ContactModelDTO> result){
      contactModelComboBox.getStore().add(result.getList());
    }
  }
);
  dispatch.execute(new GetOrgUnits(OrgUnitDTO.Mode.WITH_TREE),new AsyncCallback<ListResult<OrgUnitDTO>>(){
    @Override public void onFailure(    Throwable caught){
      Log.error(""String_Node_Str"");
    }
    @Override public void onSuccess(    ListResult<OrgUnitDTO> result){
      for (      OrgUnitDTO orgUnitDTO : result.getData()) {
        fillOrgUnitsComboboxes(orgUnitDTO,mainOrgUnitComboBox,secondaryOrgUnitsComboBox);
      }
    }
  }
);
  mainOrgUnitComboBox.addSelectionChangedListener(new SelectionChangedListener<OrgUnitDTO>(){
    @Override public void selectionChanged(    SelectionChangedEvent<OrgUnitDTO> se){
      if (se.getSelectedItem() == null) {
        secondaryOrgUnitsFieldAdapter.setVisible(false);
        return;
      }
      secondaryOrgUnitsFieldAdapter.setVisible(true);
    }
  }
);
  contactModelComboBox.addSelectionChangedListener(new SelectionChangedListener<ContactModelDTO>(){
    @Override public void selectionChanged(    SelectionChangedEvent<ContactModelDTO> event){
      ContactModelType currentType=null;
      if (event.getSelectedItem() != null) {
        currentType=event.getSelectedItem().getType();
      }
      firstNameField.setVisible(currentType == ContactModelType.INDIVIDUAL);
      familyNameField.setVisible(currentType == ContactModelType.INDIVIDUAL);
      organizationNameField.setVisible(currentType == ContactModelType.ORGANIZATION);
      firstNameField.setAllowBlank(currentType != ContactModelType.INDIVIDUAL);
      familyNameField.setAllowBlank(currentType != ContactModelType.INDIVIDUAL);
      organizationNameField.setAllowBlank(currentType != ContactModelType.ORGANIZATION);
    }
  }
);
  org.sigmah.client.ui.widget.button.Button button=Forms.button(I18N.CONSTANTS.createContact());
  final FormPanel formPanel=Forms.panel(200);
  formPanel.add(contactModelComboBox);
  formPanel.add(firstNameField);
  formPanel.add(familyNameField);
  formPanel.add(organizationNameField);
  formPanel.add(mainOrgUnitComboBox);
  formPanel.add(secondaryOrgUnitsFieldAdapter);
  formPanel.getButtonBar().add(button);
  button.addSelectionListener(new SelectionListener<ButtonEvent>(){
    @Override public void componentSelected(    ButtonEvent event){
      if (!formPanel.isValid()) {
        return;
      }
      createContactHandler.handleContactCreation(contactModelComboBox.getValue(),firstNameField.getValue(),familyNameField.getValue(),organizationNameField.getValue(),mainOrgUnitComboBox.getValue(),secondaryOrgUnitsComboBox.getListStore().getModels());
      window.hide();
    }
  }
);
  window.add(formPanel);
  window.show();
}","private void showContactCreator(){
  final Window window=new Window();
  window.setPlain(true);
  window.setModal(true);
  window.setBlinkModal(true);
  window.setLayout(new FitLayout());
  window.setSize(700,300);
  window.setHeadingHtml(I18N.CONSTANTS.createContactDialogTitle());
  final ComboBox<ContactModelDTO> contactModelComboBox=Forms.combobox(I18N.CONSTANTS.contactModelLabel(),true,ContactModelDTO.ID,ContactModelDTO.NAME);
  final TextField<String> emailField=Forms.text(I18N.CONSTANTS.contactEmailAddress(),false);
  final TextField<String> firstNameField=Forms.text(I18N.CONSTANTS.contactFirstName(),false);
  final TextField<String> familyNameField=Forms.text(I18N.CONSTANTS.contactFamilyName(),false);
  final TextField<String> organizationNameField=Forms.text(I18N.CONSTANTS.contactOrganizationName(),false);
  firstNameField.setVisible(false);
  familyNameField.setVisible(false);
  organizationNameField.setVisible(false);
  final ComboBox<OrgUnitDTO> mainOrgUnitComboBox=Forms.combobox(I18N.CONSTANTS.contactMainOrgUnit(),false,OrgUnitDTO.ID,OrgUnitDTO.FULL_NAME);
  final ListComboBox<OrgUnitDTO> secondaryOrgUnitsComboBox=new ListComboBox<OrgUnitDTO>(OrgUnitDTO.ID,OrgUnitDTO.FULL_NAME);
  secondaryOrgUnitsComboBox.initComponent();
  final AdapterField secondaryOrgUnitsFieldAdapter=Forms.adapter(I18N.CONSTANTS.contactSecondaryOrgUnits(),secondaryOrgUnitsComboBox);
  secondaryOrgUnitsFieldAdapter.setVisible(false);
  dispatch.execute(new GetContactModels(null,Collections.<Integer>emptySet(),true),new AsyncCallback<ListResult<ContactModelDTO>>(){
    @Override public void onFailure(    Throwable caught){
      Log.error(""String_Node_Str"");
    }
    @Override public void onSuccess(    ListResult<ContactModelDTO> result){
      contactModelComboBox.getStore().add(result.getList());
    }
  }
);
  dispatch.execute(new GetOrgUnits(OrgUnitDTO.Mode.WITH_TREE),new AsyncCallback<ListResult<OrgUnitDTO>>(){
    @Override public void onFailure(    Throwable caught){
      Log.error(""String_Node_Str"");
    }
    @Override public void onSuccess(    ListResult<OrgUnitDTO> result){
      for (      OrgUnitDTO orgUnitDTO : result.getData()) {
        fillOrgUnitsComboboxes(orgUnitDTO,mainOrgUnitComboBox,secondaryOrgUnitsComboBox);
      }
    }
  }
);
  mainOrgUnitComboBox.addSelectionChangedListener(new SelectionChangedListener<OrgUnitDTO>(){
    @Override public void selectionChanged(    SelectionChangedEvent<OrgUnitDTO> se){
      if (se.getSelectedItem() == null) {
        secondaryOrgUnitsFieldAdapter.setVisible(false);
        return;
      }
      secondaryOrgUnitsFieldAdapter.setVisible(true);
    }
  }
);
  contactModelComboBox.addSelectionChangedListener(new SelectionChangedListener<ContactModelDTO>(){
    @Override public void selectionChanged(    SelectionChangedEvent<ContactModelDTO> event){
      ContactModelType currentType=null;
      if (event.getSelectedItem() != null) {
        currentType=event.getSelectedItem().getType();
      }
      firstNameField.setVisible(currentType == ContactModelType.INDIVIDUAL);
      familyNameField.setVisible(currentType == ContactModelType.INDIVIDUAL);
      organizationNameField.setVisible(currentType == ContactModelType.ORGANIZATION);
      firstNameField.setAllowBlank(currentType != ContactModelType.INDIVIDUAL);
      familyNameField.setAllowBlank(currentType != ContactModelType.INDIVIDUAL);
      organizationNameField.setAllowBlank(currentType != ContactModelType.ORGANIZATION);
    }
  }
);
  org.sigmah.client.ui.widget.button.Button button=Forms.button(I18N.CONSTANTS.createContact());
  final FormPanel formPanel=Forms.panel(200);
  formPanel.add(contactModelComboBox);
  formPanel.add(emailField);
  formPanel.add(firstNameField);
  formPanel.add(familyNameField);
  formPanel.add(organizationNameField);
  formPanel.add(mainOrgUnitComboBox);
  formPanel.add(secondaryOrgUnitsFieldAdapter);
  formPanel.getButtonBar().add(button);
  button.addSelectionListener(new SelectionListener<ButtonEvent>(){
    @Override public void componentSelected(    ButtonEvent event){
      if (!formPanel.isValid()) {
        return;
      }
      createContactHandler.handleContactCreation(contactModelComboBox.getValue(),emailField.getValue(),firstNameField.getValue(),familyNameField.getValue(),organizationNameField.getValue(),mainOrgUnitComboBox.getValue(),secondaryOrgUnitsComboBox.getListStore().getModels());
      window.hide();
    }
  }
);
  window.add(formPanel);
  window.show();
}",0.981645139360979
35454,"/** 
 * {@inheritDoc}
 */
@Override public void onBind(){
  requests=new HashMap<TabId,PageRequest>();
  view.getLeftHandler().addClickHandler(new ClickHandler(){
    @Override public void onClick(    ClickEvent event){
      view.getTabBar().showTab();
    }
  }
);
  view.getRightHandler().addClickHandler(new ClickHandler(){
    @Override public void onClick(    ClickEvent event){
      view.getTabBar().hideTab();
    }
  }
);
  view.getTabBar().addListener(new TabBarListener(){
    @Override public void tabShownOrHiddden(    TabBar bar){
      updateLeftRightHandler();
    }
    @Override public void tabRemoved(    TabBar bar,    Tab tab){
      updateLeftRightHandler();
      requests.remove(tab.getId());
    }
    @Override public void tabAdded(    TabBar bar,    Tab tab){
      updateLeftRightHandler();
    }
    @Override public void tabActivated(    TabBar bar,    Tab tab){
      eventBus.navigateRequest(requests.get(tab.getId()));
    }
  }
);
  addTab(new PageRequest(Page.DASHBOARD));
  registerHandler(eventBus.addHandler(UpdateEvent.getType(),new UpdateHandler(){
    @Override public void onUpdate(    final UpdateEvent event){
      if (event.concern(UpdateEvent.PROJECT_DELETE)) {
        final PageRequest request=event.getParam(0);
        view.getTabBar().removeTab(new MenuTabId(request));
      }
    }
  }
));
}","/** 
 * {@inheritDoc}
 */
@Override public void onBind(){
  requests=new HashMap<TabId,PageRequest>();
  view.getLeftHandler().addClickHandler(new ClickHandler(){
    @Override public void onClick(    ClickEvent event){
      view.getTabBar().showTab();
    }
  }
);
  view.getRightHandler().addClickHandler(new ClickHandler(){
    @Override public void onClick(    ClickEvent event){
      view.getTabBar().hideTab();
    }
  }
);
  view.getTabBar().addListener(new TabBarListener(){
    @Override public void tabShownOrHiddden(    TabBar bar){
      updateLeftRightHandler();
    }
    @Override public void tabRemoved(    TabBar bar,    Tab tab){
      updateLeftRightHandler();
      requests.remove(tab.getId());
    }
    @Override public void tabAdded(    TabBar bar,    Tab tab){
      updateLeftRightHandler();
    }
    @Override public void tabActivated(    TabBar bar,    Tab tab){
      eventBus.navigateRequest(requests.get(tab.getId()));
    }
  }
);
  addTab(new PageRequest(Page.DASHBOARD));
  registerHandler(eventBus.addHandler(UpdateEvent.getType(),new UpdateHandler(){
    @Override public void onUpdate(    final UpdateEvent event){
      if (event.concern(UpdateEvent.PROJECT_DELETE)) {
        final PageRequest request=event.getParam(0);
        view.getTabBar().removeTab(new MenuTabId(request));
      }
    }
  }
));
  registerHandler(eventBus.addHandler(UpdateEvent.getType(),new UpdateHandler(){
    @Override public void onUpdate(    final UpdateEvent event){
      if (event.concern(UpdateEvent.CONTACT_DELETE)) {
        final PageRequest request=event.getParam(0);
        view.getTabBar().removeTab(new MenuTabId(request));
      }
    }
  }
));
}",0.8890356671070013
35455,"@Override public void onUpdate(final UpdateEvent event){
  if (event.concern(UpdateEvent.PROJECT_DELETE)) {
    final PageRequest request=event.getParam(0);
    view.getTabBar().removeTab(new MenuTabId(request));
  }
}","@Override public void onUpdate(final UpdateEvent event){
  if (event.concern(UpdateEvent.CONTACT_DELETE)) {
    final PageRequest request=event.getParam(0);
    view.getTabBar().removeTab(new MenuTabId(request));
  }
}",0.981651376146789
35456,"@Override public void initialize(){
  container=Panels.content(null,false,Layouts.vBoxLayout(VBoxLayout.VBoxLayoutAlign.STRETCH,new Layouts.LayoutOptions(new Padding(10))),""String_Node_Str"");
  container.setScrollMode(Style.Scroll.AUTOY);
  container.addStyleName(""String_Node_Str"");
  add(container);
  saveButton=Forms.button(I18N.CONSTANTS.save(),IconImageBundle.ICONS.save());
  exportButton=Forms.button(I18N.CONSTANTS.export(),IconImageBundle.ICONS.excel());
  toolBar=new ToolBar();
  toolBar.setAlignment(Style.HorizontalAlignment.LEFT);
  toolBar.setBorders(false);
  toolBar.add(saveButton);
  toolBar.add(exportButton);
  container.setTopComponent(toolBar);
}","@Override public void initialize(){
  container=Panels.content(null,false,Layouts.vBoxLayout(VBoxLayout.VBoxLayoutAlign.STRETCH,new Layouts.LayoutOptions(new Padding(10))),""String_Node_Str"");
  container.setScrollMode(Style.Scroll.AUTOY);
  container.addStyleName(""String_Node_Str"");
  add(container);
  saveButton=Forms.button(I18N.CONSTANTS.save(),IconImageBundle.ICONS.save());
  deleteButton=Forms.button(I18N.CONSTANTS.delete(),IconImageBundle.ICONS.remove());
  exportButton=Forms.button(I18N.CONSTANTS.export(),IconImageBundle.ICONS.excel());
  toolBar=new ToolBar();
  toolBar.setAlignment(Style.HorizontalAlignment.LEFT);
  toolBar.setBorders(false);
  toolBar.add(saveButton);
  toolBar.add(deleteButton);
  toolBar.add(exportButton);
  container.setTopComponent(toolBar);
}",0.921595598349381
35457,"private ColumnModel generateColumnModel(final ContactDTO contactDTO,final ContactRelationshipsPresenter.AnchorHandler anchorHandler){
  List<ColumnConfig> columnConfigs=new ArrayList<ColumnConfig>();
  columnConfigs.add(new ColumnConfig(ContactRelationship.FIELD_NAME,I18N.CONSTANTS.contactRelationshipElementLabel(),200));
  columnConfigs.add(new ColumnConfig(ContactRelationship.GROUP_NAME,I18N.CONSTANTS.contactRelationshipGroupTitle(),200));
  columnConfigs.add(new ColumnConfig(ContactRelationship.FIELD_NAME,I18N.CONSTANTS.contactRelationshipType(),100));
  ColumnConfig nameColumnConfig=new ColumnConfig(ContactRelationship.FIELD_NAME,I18N.CONSTANTS.contactRelationshipName(),250);
  nameColumnConfig.setRenderer(new GridCellRenderer<ContactRelationship>(){
    @Override public Object render(    final ContactRelationship model,    String property,    ColumnData config,    int rowIndex,    int colIndex,    ListStore<ContactRelationship> store,    Grid<ContactRelationship> grid){
      Anchor anchor=new Anchor(model.getName());
      anchor.addClickHandler(new ClickHandler(){
        @Override public void onClick(        ClickEvent event){
          anchorHandler.handleClick(model.getType(),model.getRelationshipId());
        }
      }
);
      return anchor;
    }
  }
);
  columnConfigs.add(nameColumnConfig);
  ColumnConfig memberColumnConfig=new ColumnConfig(ContactRelationship.FIELD_NAME,I18N.CONSTANTS.contactRelationshipMember(),120);
  memberColumnConfig.setRenderer(new GridCellRenderer<ContactRelationship>(){
    @Override public Object render(    ContactRelationship model,    String property,    ColumnData config,    int rowIndex,    int colIndex,    ListStore<ContactRelationship> store,    Grid<ContactRelationship> grid){
      if (model.getDirection() == null) {
        return ""String_Node_Str"";
      }
switch (model.getDirection()) {
case INBOUND:
        return I18N.MESSAGES.contactRelationshipsInbound(contactDTO.getFullName());
case OUTBOUND:
      return I18N.MESSAGES.contactRelationshipsOutbound(contactDTO.getFullName());
default :
    return ""String_Node_Str"";
}
}
}
);
columnConfigs.add(memberColumnConfig);
return new ColumnModel(columnConfigs);
}","private ColumnModel generateColumnModel(final ContactDTO contactDTO,final ContactRelationshipsPresenter.AnchorHandler anchorHandler){
  List<ColumnConfig> columnConfigs=new ArrayList<ColumnConfig>();
  columnConfigs.add(new ColumnConfig(ContactRelationship.FIELD_NAME,I18N.CONSTANTS.contactRelationshipElementLabel(),200));
  columnConfigs.add(new ColumnConfig(ContactRelationship.GROUP_NAME,I18N.CONSTANTS.contactRelationshipGroupTitle(),200));
  columnConfigs.add(new ColumnConfig(ContactRelationship.FORMATTED_TYPE,I18N.CONSTANTS.contactRelationshipType(),100));
  ColumnConfig nameColumnConfig=new ColumnConfig(ContactRelationship.FIELD_NAME,I18N.CONSTANTS.contactRelationshipName(),250);
  nameColumnConfig.setRenderer(new GridCellRenderer<ContactRelationship>(){
    @Override public Object render(    final ContactRelationship model,    String property,    ColumnData config,    int rowIndex,    int colIndex,    ListStore<ContactRelationship> store,    Grid<ContactRelationship> grid){
      Anchor anchor=new Anchor(model.getName());
      anchor.addClickHandler(new ClickHandler(){
        @Override public void onClick(        ClickEvent event){
          anchorHandler.handleClick(model.getType(),model.getRelationshipId());
        }
      }
);
      return anchor;
    }
  }
);
  columnConfigs.add(nameColumnConfig);
  ColumnConfig memberColumnConfig=new ColumnConfig(ContactRelationship.FIELD_NAME,I18N.CONSTANTS.contactRelationshipMember(),120);
  memberColumnConfig.setRenderer(new GridCellRenderer<ContactRelationship>(){
    @Override public Object render(    ContactRelationship model,    String property,    ColumnData config,    int rowIndex,    int colIndex,    ListStore<ContactRelationship> store,    Grid<ContactRelationship> grid){
      if (model.getDirection() == null) {
        return ""String_Node_Str"";
      }
switch (model.getDirection()) {
case INBOUND:
        return I18N.MESSAGES.contactRelationshipsInbound(contactDTO.getFullName());
case OUTBOUND:
      return I18N.MESSAGES.contactRelationshipsOutbound(contactDTO.getFullName());
default :
    return ""String_Node_Str"";
}
}
}
);
columnConfigs.add(memberColumnConfig);
return new ColumnModel(columnConfigs);
}",0.9968138370505234
35458,"@Override public void componentSelected(ButtonEvent event){
  if (!formPanel.isValid()) {
    return;
  }
  createContactHandler.handleContactCreation(contactModelComboBox.getValue(),firstNameField.getValue(),familyNameField.getValue(),organizationNameField.getValue(),mainOrgUnitComboBox.getValue(),secondaryOrgUnitsComboBox.getListStore().getModels());
  window.hide();
}","@Override public void componentSelected(ButtonEvent event){
  if (!formPanel.isValid()) {
    return;
  }
  createContactHandler.handleContactCreation(contactModelComboBox.getValue(),emailField.getValue(),firstNameField.getValue(),familyNameField.getValue(),organizationNameField.getValue(),mainOrgUnitComboBox.getValue(),secondaryOrgUnitsComboBox.getListStore().getModels());
  window.hide();
}",0.9713541666666666
35459,"void handleContactCreation(ContactModelDTO contactModelDTO,String firstName,String familyName,String organizationName,OrgUnitDTO mainOrgUnit,List<OrgUnitDTO> secondaryOrgUnits);","void handleContactCreation(ContactModelDTO contactModelDTO,String email,String firstName,String familyName,String organizationName,OrgUnitDTO mainOrgUnit,List<OrgUnitDTO> secondaryOrgUnits);",0.9645776566757494
35460,"private void showContactCreator(){
  final Window window=new Window();
  window.setPlain(true);
  window.setModal(true);
  window.setBlinkModal(true);
  window.setLayout(new FitLayout());
  window.setSize(700,300);
  window.setHeadingHtml(I18N.CONSTANTS.createContactDialogTitle());
  final ComboBox<ContactModelDTO> contactModelComboBox=Forms.combobox(I18N.CONSTANTS.contactModelLabel(),true,ContactModelDTO.ID,ContactModelDTO.NAME);
  final TextField<String> firstNameField=Forms.text(I18N.CONSTANTS.contactFirstName(),false);
  final TextField<String> familyNameField=Forms.text(I18N.CONSTANTS.contactFamilyName(),false);
  final TextField<String> organizationNameField=Forms.text(I18N.CONSTANTS.contactOrganizationName(),false);
  firstNameField.setVisible(false);
  familyNameField.setVisible(false);
  organizationNameField.setVisible(false);
  final ComboBox<OrgUnitDTO> mainOrgUnitComboBox=Forms.combobox(I18N.CONSTANTS.contactMainOrgUnit(),false,OrgUnitDTO.ID,OrgUnitDTO.FULL_NAME);
  final ListComboBox<OrgUnitDTO> secondaryOrgUnitsComboBox=new ListComboBox<OrgUnitDTO>(OrgUnitDTO.ID,OrgUnitDTO.FULL_NAME);
  secondaryOrgUnitsComboBox.initComponent();
  final AdapterField secondaryOrgUnitsFieldAdapter=Forms.adapter(I18N.CONSTANTS.contactSecondaryOrgUnits(),secondaryOrgUnitsComboBox);
  secondaryOrgUnitsFieldAdapter.setVisible(false);
  dispatch.execute(new GetContactModels(allowedType,allowedContactModelIds,true),new AsyncCallback<ListResult<ContactModelDTO>>(){
    @Override public void onFailure(    Throwable caught){
      Log.error(""String_Node_Str"");
    }
    @Override public void onSuccess(    ListResult<ContactModelDTO> result){
      contactModelComboBox.getStore().add(result.getList());
    }
  }
);
  dispatch.execute(new GetOrgUnits(OrgUnitDTO.Mode.WITH_TREE),new AsyncCallback<ListResult<OrgUnitDTO>>(){
    @Override public void onFailure(    Throwable caught){
      Log.error(""String_Node_Str"");
    }
    @Override public void onSuccess(    ListResult<OrgUnitDTO> result){
      for (      OrgUnitDTO orgUnitDTO : result.getData()) {
        fillOrgUnitsComboboxes(orgUnitDTO,mainOrgUnitComboBox,secondaryOrgUnitsComboBox);
      }
    }
  }
);
  mainOrgUnitComboBox.addSelectionChangedListener(new SelectionChangedListener<OrgUnitDTO>(){
    @Override public void selectionChanged(    SelectionChangedEvent<OrgUnitDTO> se){
      if (se.getSelectedItem() == null) {
        secondaryOrgUnitsFieldAdapter.setVisible(false);
        return;
      }
      secondaryOrgUnitsFieldAdapter.setVisible(true);
    }
  }
);
  contactModelComboBox.addSelectionChangedListener(new SelectionChangedListener<ContactModelDTO>(){
    @Override public void selectionChanged(    SelectionChangedEvent<ContactModelDTO> event){
      ContactModelType currentType=null;
      if (event.getSelectedItem() != null) {
        currentType=event.getSelectedItem().getType();
      }
      firstNameField.setVisible(currentType == ContactModelType.INDIVIDUAL);
      familyNameField.setVisible(currentType == ContactModelType.INDIVIDUAL);
      organizationNameField.setVisible(currentType == ContactModelType.ORGANIZATION);
      firstNameField.setAllowBlank(currentType != ContactModelType.INDIVIDUAL);
      familyNameField.setAllowBlank(currentType != ContactModelType.INDIVIDUAL);
      organizationNameField.setAllowBlank(currentType != ContactModelType.ORGANIZATION);
    }
  }
);
  org.sigmah.client.ui.widget.button.Button button=Forms.button(I18N.CONSTANTS.createContact());
  final FormPanel formPanel=Forms.panel(200);
  formPanel.add(contactModelComboBox);
  formPanel.add(firstNameField);
  formPanel.add(familyNameField);
  formPanel.add(organizationNameField);
  formPanel.add(mainOrgUnitComboBox);
  formPanel.add(secondaryOrgUnitsFieldAdapter);
  formPanel.getButtonBar().add(button);
  button.addSelectionListener(new SelectionListener<ButtonEvent>(){
    @Override public void componentSelected(    ButtonEvent event){
      if (!formPanel.isValid()) {
        return;
      }
      createContactHandler.handleContactCreation(contactModelComboBox.getValue(),firstNameField.getValue(),familyNameField.getValue(),organizationNameField.getValue(),mainOrgUnitComboBox.getValue(),secondaryOrgUnitsComboBox.getListStore().getModels());
      window.hide();
    }
  }
);
  window.add(formPanel);
  window.show();
}","private void showContactCreator(){
  final Window window=new Window();
  window.setPlain(true);
  window.setModal(true);
  window.setBlinkModal(true);
  window.setLayout(new FitLayout());
  window.setSize(700,300);
  window.setHeadingHtml(I18N.CONSTANTS.createContactDialogTitle());
  final ComboBox<ContactModelDTO> contactModelComboBox=Forms.combobox(I18N.CONSTANTS.contactModelLabel(),true,ContactModelDTO.ID,ContactModelDTO.NAME);
  final TextField<String> emailField=Forms.text(I18N.CONSTANTS.contactEmailAddress(),false);
  final TextField<String> firstNameField=Forms.text(I18N.CONSTANTS.contactFirstName(),false);
  final TextField<String> familyNameField=Forms.text(I18N.CONSTANTS.contactFamilyName(),false);
  final TextField<String> organizationNameField=Forms.text(I18N.CONSTANTS.contactOrganizationName(),false);
  firstNameField.setVisible(false);
  familyNameField.setVisible(false);
  organizationNameField.setVisible(false);
  final ComboBox<OrgUnitDTO> mainOrgUnitComboBox=Forms.combobox(I18N.CONSTANTS.contactMainOrgUnit(),false,OrgUnitDTO.ID,OrgUnitDTO.FULL_NAME);
  final ListComboBox<OrgUnitDTO> secondaryOrgUnitsComboBox=new ListComboBox<OrgUnitDTO>(OrgUnitDTO.ID,OrgUnitDTO.FULL_NAME);
  secondaryOrgUnitsComboBox.initComponent();
  final AdapterField secondaryOrgUnitsFieldAdapter=Forms.adapter(I18N.CONSTANTS.contactSecondaryOrgUnits(),secondaryOrgUnitsComboBox);
  secondaryOrgUnitsFieldAdapter.setVisible(false);
  dispatch.execute(new GetContactModels(allowedType,allowedContactModelIds,true),new AsyncCallback<ListResult<ContactModelDTO>>(){
    @Override public void onFailure(    Throwable caught){
      Log.error(""String_Node_Str"");
    }
    @Override public void onSuccess(    ListResult<ContactModelDTO> result){
      contactModelComboBox.getStore().add(result.getList());
    }
  }
);
  dispatch.execute(new GetOrgUnits(OrgUnitDTO.Mode.WITH_TREE),new AsyncCallback<ListResult<OrgUnitDTO>>(){
    @Override public void onFailure(    Throwable caught){
      Log.error(""String_Node_Str"");
    }
    @Override public void onSuccess(    ListResult<OrgUnitDTO> result){
      for (      OrgUnitDTO orgUnitDTO : result.getData()) {
        fillOrgUnitsComboboxes(orgUnitDTO,mainOrgUnitComboBox,secondaryOrgUnitsComboBox);
      }
    }
  }
);
  mainOrgUnitComboBox.addSelectionChangedListener(new SelectionChangedListener<OrgUnitDTO>(){
    @Override public void selectionChanged(    SelectionChangedEvent<OrgUnitDTO> se){
      if (se.getSelectedItem() == null) {
        secondaryOrgUnitsFieldAdapter.setVisible(false);
        return;
      }
      secondaryOrgUnitsFieldAdapter.setVisible(true);
    }
  }
);
  contactModelComboBox.addSelectionChangedListener(new SelectionChangedListener<ContactModelDTO>(){
    @Override public void selectionChanged(    SelectionChangedEvent<ContactModelDTO> event){
      ContactModelType currentType=null;
      if (event.getSelectedItem() != null) {
        currentType=event.getSelectedItem().getType();
      }
      firstNameField.setVisible(currentType == ContactModelType.INDIVIDUAL);
      familyNameField.setVisible(currentType == ContactModelType.INDIVIDUAL);
      organizationNameField.setVisible(currentType == ContactModelType.ORGANIZATION);
      firstNameField.setAllowBlank(currentType != ContactModelType.INDIVIDUAL);
      familyNameField.setAllowBlank(currentType != ContactModelType.INDIVIDUAL);
      organizationNameField.setAllowBlank(currentType != ContactModelType.ORGANIZATION);
    }
  }
);
  org.sigmah.client.ui.widget.button.Button button=Forms.button(I18N.CONSTANTS.createContact());
  final FormPanel formPanel=Forms.panel(200);
  formPanel.add(contactModelComboBox);
  formPanel.add(emailField);
  formPanel.add(firstNameField);
  formPanel.add(familyNameField);
  formPanel.add(organizationNameField);
  formPanel.add(mainOrgUnitComboBox);
  formPanel.add(secondaryOrgUnitsFieldAdapter);
  formPanel.getButtonBar().add(button);
  button.addSelectionListener(new SelectionListener<ButtonEvent>(){
    @Override public void componentSelected(    ButtonEvent event){
      if (!formPanel.isValid()) {
        return;
      }
      createContactHandler.handleContactCreation(contactModelComboBox.getValue(),emailField.getValue(),firstNameField.getValue(),familyNameField.getValue(),organizationNameField.getValue(),mainOrgUnitComboBox.getValue(),secondaryOrgUnitsComboBox.getListStore().getModels());
      window.hide();
    }
  }
);
  window.add(formPanel);
  window.show();
}",0.9816368170482884
35461,"private Predicate similarity(CriteriaBuilder criteriaBuilder,Expression<String> nameExpression,String nameValue,Expression<String> firstNameExpression,String firstNameValue){
  Expression<String> fullNameExpression;
  String fullnameValue;
  if (firstNameExpression != null && firstNameValue != null) {
    fullNameExpression=criteriaBuilder.concat(criteriaBuilder.concat(nameExpression,""String_Node_Str""),firstNameExpression);
    fullnameValue=(nameValue + ""String_Node_Str"" + firstNameValue).toLowerCase();
  }
 else {
    fullNameExpression=nameExpression;
    fullnameValue=nameValue.toLowerCase();
  }
  return criteriaBuilder.greaterThanOrEqualTo(criteriaBuilder.function(""String_Node_Str"",Float.class,criteriaBuilder.lower(fullNameExpression),criteriaBuilder.literal(fullnameValue)),MIN_SIMILARITY_SCORE);
}","private Predicate similarity(CriteriaBuilder criteriaBuilder,Expression<String> nameExpression,String nameValue,Expression<String> firstNameExpression,String firstNameValue){
  Expression<String> fullNameExpression;
  String fullnameValue;
  if (firstNameExpression != null && firstNameValue != null) {
    fullNameExpression=criteriaBuilder.concat(criteriaBuilder.concat(nameExpression,""String_Node_Str""),firstNameExpression);
    fullnameValue=(nameValue + ""String_Node_Str"" + firstNameValue).toLowerCase();
  }
 else {
    fullNameExpression=nameExpression;
    fullnameValue=nameValue != null ? nameValue.toLowerCase() : ""String_Node_Str"";
  }
  return criteriaBuilder.greaterThanOrEqualTo(criteriaBuilder.function(""String_Node_Str"",Float.class,criteriaBuilder.lower(fullNameExpression),criteriaBuilder.literal(fullnameValue)),MIN_SIMILARITY_SCORE);
}",0.9760479041916168
35462,"@Override protected ListResult<ContactDTO> execute(CheckContactDuplication command,UserDispatch.UserExecutionContext context) throws CommandException {
  List<Contact> contacts=contactDAO.findContactsByEmailOrSimilarName(context.getUser().getOrganization().getId(),command.getContactId(),command.getEmail(),command.getFirstName(),command.getName());
  return new ListResult<>(mapper().mapCollection(contacts,ContactDTO.class));
}","@Override protected ListResult<ContactDTO> execute(CheckContactDuplication command,UserDispatch.UserExecutionContext context) throws CommandException {
  List<Contact> contacts=contactDAO.findContactsByEmailOrSimilarName(context.getUser().getOrganization().getId(),command.getContactId(),command.getEmail(),command.getFirstName(),command.getName());
  List<ContactDTO> contactDTOs=new ArrayList<>();
  for (  Contact contact : contacts) {
    if (!contact.isDeleted()) {
      contactDTOs.add(mapper().map(contact,ContactDTO.class));
    }
  }
  return new ListResult<>(contactDTOs);
}",0.7593688362919132
35463,"@Override protected ContactDTO execute(GetContact command,UserDispatch.UserExecutionContext context) throws CommandException {
  Contact contact=contactDAO.findById(command.getContactId());
  return mapper().map(contact,new ContactDTO());
}","@Override protected ContactDTO execute(GetContact command,UserDispatch.UserExecutionContext context) throws CommandException {
  Contact contact=contactDAO.findById(command.getContactId());
  if (contact.isDeleted()) {
    return null;
  }
  return mapper().map(contact,new ContactDTO());
}",0.9056603773584906
35464,"@Override protected ListResult<ContactDTO> execute(GetContacts command,UserDispatch.UserExecutionContext context) throws CommandException {
  Integer organizationId=context.getUser().getOrganization().getId();
  List<Contact> contacts;
  if (command.getContactIds() == null || command.getContactIds().isEmpty()) {
    contacts=contactDAO.findContactsByTypeAndContactModels(organizationId,command.getType(),command.getContactModelIds(),command.isOnlyContactWithoutUser(),command.isWithEmailNotNull(),command.getOrgUnitsIds());
  }
 else {
    contacts=contactDAO.findByIds(command.getContactIds());
  }
  return new ListResult<>(mapper().mapCollection(contacts,ContactDTO.class));
}","@Override protected ListResult<ContactDTO> execute(GetContacts command,UserDispatch.UserExecutionContext context) throws CommandException {
  Integer organizationId=context.getUser().getOrganization().getId();
  List<Contact> contacts;
  if (command.getContactIds() == null || command.getContactIds().isEmpty()) {
    contacts=contactDAO.findContactsByTypeAndContactModels(organizationId,command.getType(),command.getContactModelIds(),command.isOnlyContactWithoutUser(),command.isWithEmailNotNull(),command.getOrgUnitsIds());
  }
 else {
    contacts=contactDAO.findByIds(command.getContactIds());
  }
  List<ContactDTO> contactDTOs=new ArrayList<>();
  for (  Contact contact : contacts) {
    if (!contact.isDeleted()) {
      contactDTOs.add(mapper().map(contact,ContactDTO.class));
    }
  }
  return new ListResult<>(contactDTOs);
}",0.855072463768116
35465,"private void updateContact(final ContactDTO contactDTO,final AsyncCallback<ContactDTO> callback,final Component target){
  dispatch.execute(new UpdateLayoutGroupIterations(new ArrayList<IterationChange>(iterationChanges.values()),contactDTO.getId()),new CommandResultHandler<ListResult<IterationChange>>(){
    @Override public void onCommandFailure(    final Throwable caught){
      N10N.error(I18N.CONSTANTS.save(),I18N.CONSTANTS.saveError());
    }
    @Override protected void onCommandSuccess(    ListResult<IterationChange> result){
      for (      IterationChange iterationChange : result.getList()) {
        if (iterationChange.isDeleted()) {
          Iterator<ValueEvent> valuesIterator=valueChanges.iterator();
          while (valuesIterator.hasNext()) {
            ValueEvent valueEvent=valuesIterator.next();
            if (valueEvent.getIterationId() == iterationChange.getIterationId()) {
              valuesIterator.remove();
            }
          }
        }
 else         if (iterationChange.isCreated()) {
          int oldId=iterationChange.getIterationId();
          int newId=iterationChange.getNewIterationId();
          newIterationsTabItems.get(oldId).setIterationId(newId);
          for (          ValueEvent valueEvent : valueChanges) {
            if (valueEvent.getIterationId() == oldId) {
              valueEvent.setIterationId(newId);
            }
          }
        }
      }
      iterationChanges.clear();
      newIterationsTabItems.clear();
      dispatch.execute(new UpdateContact(contactDTO.getId(),valueChanges),new CommandResultHandler<VoidResult>(){
        @Override public void onCommandFailure(        final Throwable caught){
          N10N.error(I18N.CONSTANTS.save(),I18N.CONSTANTS.saveError());
        }
        @Override protected void onCommandSuccess(        final VoidResult result){
          N10N.infoNotif(I18N.CONSTANTS.infoConfirmation(),I18N.CONSTANTS.saveConfirm());
          for (          final ValueEvent event : valueChanges) {
            if (event.getSource() instanceof DefaultContactFlexibleElementDTO) {
              updateCurrentContact(contactDTO,(DefaultContactFlexibleElementDTO)event.getSource(),event.getSingleValue());
            }
          }
          valueChanges.clear();
          if (callback != null) {
            callback.onSuccess(contactDTO);
          }
        }
      }
,view.getSaveButton(),new LoadingMask(view.getDetailsContainer()),new LoadingMask(target));
    }
  }
,view.getSaveButton(),new LoadingMask(view.getDetailsContainer()),new LoadingMask(target));
}","private void updateContact(final ContactDTO contactDTO,final AsyncCallback<ContactDTO> callback,final Component target){
  dispatch.execute(new UpdateLayoutGroupIterations(new ArrayList<IterationChange>(iterationChanges.values()),contactDTO.getId()),new CommandResultHandler<ListResult<IterationChange>>(){
    @Override public void onCommandFailure(    final Throwable caught){
      N10N.error(I18N.CONSTANTS.save(),I18N.CONSTANTS.saveError());
    }
    @Override protected void onCommandSuccess(    ListResult<IterationChange> result){
      for (      IterationChange iterationChange : result.getList()) {
        if (iterationChange.isDeleted()) {
          Iterator<ValueEvent> valuesIterator=valueChanges.iterator();
          while (valuesIterator.hasNext()) {
            ValueEvent valueEvent=valuesIterator.next();
            if (valueEvent.getIterationId() == iterationChange.getIterationId()) {
              valuesIterator.remove();
            }
          }
        }
 else         if (iterationChange.isCreated()) {
          int oldId=iterationChange.getIterationId();
          int newId=iterationChange.getNewIterationId();
          newIterationsTabItems.get(oldId).setIterationId(newId);
          for (          ValueEvent valueEvent : valueChanges) {
            if (valueEvent.getIterationId() == oldId) {
              valueEvent.setIterationId(newId);
            }
          }
        }
      }
      iterationChanges.clear();
      newIterationsTabItems.clear();
      dispatch.execute(new UpdateContact(contactDTO.getId(),valueChanges),new CommandResultHandler<VoidResult>(){
        @Override public void onCommandFailure(        final Throwable caught){
          N10N.error(I18N.CONSTANTS.save(),I18N.CONSTANTS.saveError());
        }
        @Override protected void onCommandSuccess(        final VoidResult result){
          N10N.infoNotif(I18N.CONSTANTS.infoConfirmation(),I18N.CONSTANTS.saveConfirm());
          eventBus.fireEvent(new UpdateEvent(UpdateEvent.CONTACT_UPDATE,contactDTO));
          for (          final ValueEvent event : valueChanges) {
            if (event.getSource() instanceof DefaultContactFlexibleElementDTO) {
              updateCurrentContact(contactDTO,(DefaultContactFlexibleElementDTO)event.getSource(),event.getSingleValue());
            }
          }
          valueChanges.clear();
          if (callback != null) {
            callback.onSuccess(contactDTO);
          }
        }
      }
,view.getSaveButton(),new LoadingMask(view.getDetailsContainer()),new LoadingMask(target));
    }
  }
,view.getSaveButton(),new LoadingMask(view.getDetailsContainer()),new LoadingMask(target));
}",0.9835689721054642
35466,"private void refreshCard(){
  final ContactModelDTO contactModelDTO=contactDTO.getContactModel();
  view.prepareContainers();
  TreeSet<LayoutConstraintDTO> constraints=new TreeSet<LayoutConstraintDTO>(new Comparator<LayoutConstraintDTO>(){
    @Override public int compare(    LayoutConstraintDTO constraint1,    LayoutConstraintDTO constraint2){
      if (constraint1.getSortOrder() == constraint2.getSortOrder()) {
        return constraint1.getFlexibleElementDTO().getId().compareTo(constraint2.getFlexibleElementDTO().getId());
      }
      return constraint1.getSortOrder() - constraint2.getSortOrder();
    }
  }
);
  for (  LayoutGroupDTO layoutGroup : contactModelDTO.getCard().getLayout().getGroups()) {
    for (    LayoutConstraintDTO constraint : layoutGroup.getConstraints()) {
      constraints.add(constraint);
    }
  }
  boolean hasPhoto=false;
  for (  LayoutConstraintDTO constraint : constraints) {
    DefaultContactFlexibleElementDTO flexibleElementDTO=(DefaultContactFlexibleElementDTO)constraint.getFlexibleElementDTO();
    if (!flexibleElementDTO.getType().isVisibleForType(contactModelDTO.getType())) {
      continue;
    }
switch (flexibleElementDTO.getType()) {
case PHOTO:
      if (contactDTO.getPhoto() == null) {
        break;
      }
    hasPhoto=true;
  imageProvider.provideDataUrl(contactDTO.getPhoto(),new AsyncCallback<String>(){
    @Override public void onFailure(    Throwable caught){
      view.setDefaultAvatar(contactModelDTO.getType());
    }
    @Override public void onSuccess(    String dataUrl){
      view.setAvatarUrl(dataUrl);
    }
  }
);
break;
case COUNTRY:
if (contactDTO.getCountry() == null) {
break;
}
view.addLabel(contactDTO.getCountry().getName());
break;
case CREATION_DATE:
if (contactDTO.getDateCreated() == null) {
break;
}
String date=DateTimeFormat.getFormat(DateTimeFormat.PredefinedFormat.DATE_TIME_MEDIUM).format(contactDTO.getDateCreated());
view.addLabel(date);
break;
case DIRECT_MEMBERSHIP:
if (contactDTO.getParent() == null) {
break;
}
view.addLabel(contactDTO.getParent().getName());
break;
case EMAIL_ADDRESS:
view.addLabel(contactDTO.getEmail());
break;
case FAMILY_NAME:
view.addLabel(contactDTO.getName());
break;
case FIRST_NAME:
view.addLabel(contactDTO.getFirstname());
break;
case LOGIN:
view.addLabel(contactDTO.getLogin());
break;
case MAIN_ORG_UNIT:
if (contactDTO.getMainOrgUnit() == null) {
break;
}
view.addLabel(contactDTO.getMainOrgUnit().getName());
break;
case ORGANIZATION_NAME:
view.addLabel(contactDTO.getName());
break;
case PHONE_NUMBER:
view.addLabel(contactDTO.getPhoneNumber());
break;
case POSTAL_ADDRESS:
view.addLabel(contactDTO.getPostalAddress());
break;
case SECONDARY_ORG_UNITS:
for (OrgUnitDTO secondaryOrgUnit : contactDTO.getSecondaryOrgUnits()) {
view.addLabel(secondaryOrgUnit.getName());
}
break;
case TOP_MEMBERSHIP:
if (contactDTO.getRoot() == null) {
break;
}
view.addLabel(contactDTO.getRoot().getName());
break;
default :
throw new IllegalStateException(""String_Node_Str"" + flexibleElementDTO.getType());
}
}
if (!hasPhoto) {
view.setDefaultAvatar(contactModelDTO.getType());
}
}","private void refreshCard(){
  final ContactModelDTO contactModelDTO=contactDTO.getContactModel();
  view.prepareContainers();
  TreeSet<LayoutConstraintDTO> constraints=new TreeSet<LayoutConstraintDTO>(new Comparator<LayoutConstraintDTO>(){
    @Override public int compare(    LayoutConstraintDTO constraint1,    LayoutConstraintDTO constraint2){
      if (constraint1.getSortOrder() == constraint2.getSortOrder()) {
        return constraint1.getFlexibleElementDTO().getId().compareTo(constraint2.getFlexibleElementDTO().getId());
      }
      return constraint1.getSortOrder() - constraint2.getSortOrder();
    }
  }
);
  for (  LayoutGroupDTO layoutGroup : contactModelDTO.getCard().getLayout().getGroups()) {
    for (    LayoutConstraintDTO constraint : layoutGroup.getConstraints()) {
      constraints.add(constraint);
    }
  }
  boolean hasPhoto=false;
  for (  LayoutConstraintDTO constraint : constraints) {
    DefaultContactFlexibleElementDTO flexibleElementDTO=(DefaultContactFlexibleElementDTO)constraint.getFlexibleElementDTO();
    if (!flexibleElementDTO.getType().isVisibleForType(contactModelDTO.getType())) {
      continue;
    }
switch (flexibleElementDTO.getType()) {
case PHOTO:
      if (contactDTO.getPhoto() == null) {
        break;
      }
    hasPhoto=true;
  imageProvider.provideDataUrl(contactDTO.getPhoto(),new AsyncCallback<String>(){
    @Override public void onFailure(    Throwable caught){
      view.setDefaultAvatar(contactModelDTO.getType());
    }
    @Override public void onSuccess(    String dataUrl){
      view.setAvatarUrl(dataUrl);
    }
  }
);
break;
case COUNTRY:
if (contactDTO.getCountry() == null) {
break;
}
view.addLabel(contactDTO.getCountry().getName());
break;
case CREATION_DATE:
if (contactDTO.getDateCreated() == null) {
break;
}
String date=DateTimeFormat.getFormat(DateTimeFormat.PredefinedFormat.DATE_TIME_MEDIUM).format(contactDTO.getDateCreated());
view.addLabel(date);
break;
case DIRECT_MEMBERSHIP:
if (contactDTO.getParent() == null) {
break;
}
view.addLabel(contactDTO.getParent().getName());
break;
case EMAIL_ADDRESS:
view.addLabel(contactDTO.getEmail());
break;
case FAMILY_NAME:
view.addNameLabel(contactDTO.getName());
break;
case FIRST_NAME:
view.addNameLabel(contactDTO.getFirstname());
break;
case LOGIN:
view.addLabel(contactDTO.getLogin());
break;
case MAIN_ORG_UNIT:
if (contactDTO.getMainOrgUnit() == null) {
break;
}
view.addLabel(contactDTO.getMainOrgUnit().getName());
break;
case ORGANIZATION_NAME:
view.addNameLabel(contactDTO.getName());
break;
case PHONE_NUMBER:
view.addLabel(contactDTO.getPhoneNumber());
break;
case POSTAL_ADDRESS:
view.addLabel(contactDTO.getPostalAddress());
break;
case SECONDARY_ORG_UNITS:
for (OrgUnitDTO secondaryOrgUnit : contactDTO.getSecondaryOrgUnits()) {
view.addLabel(secondaryOrgUnit.getName());
}
break;
case TOP_MEMBERSHIP:
if (contactDTO.getRoot() == null) {
break;
}
view.addOrganizationLabel(contactDTO.getRoot().getName());
break;
default :
throw new IllegalStateException(""String_Node_Str"" + flexibleElementDTO.getType());
}
}
if (!hasPhoto) {
view.setDefaultAvatar(contactModelDTO.getType());
}
}",0.9961526130169926
35467,void addLabel(String label);,"void addLabel(String label,String style);",0.8115942028985508
35468,"private ColumnModel buildColumnModel(){
  ColumnConfig dateColumn=new ColumnConfig();
  dateColumn.setRenderer(new GridCellRenderer<ContactHistory>(){
    @Override public Object render(    ContactHistory contactHistory,    String property,    ColumnData config,    int rowIndex,    int colIndex,    ListStore store,    Grid grid){
      return DateTimeFormat.getFormat(DateTimeFormat.PredefinedFormat.DATE_TIME_MEDIUM).format(contactHistory.getUpdatedAt());
    }
  }
);
  dateColumn.setWidth(120);
  dateColumn.setHeaderText(I18N.CONSTANTS.contactHistoryUpdatedAtHeader());
  ColumnConfig userColumn=new ColumnConfig(ContactHistory.USER_FULL_NAME,I18N.CONSTANTS.contactHistoryUserHeader(),150);
  ColumnConfig changeTypeColumn=new ColumnConfig(ContactHistory.FORMATTED_CHANGE_TYPE,I18N.CONSTANTS.contactHistoryChangeTypeHeader(),150);
  ColumnConfig subjectColumn=new ColumnConfig(ContactHistory.SUBJECT,I18N.CONSTANTS.contactHistorySubjectHeader(),150);
  ColumnConfig valueColumn=new ColumnConfig();
  valueColumn.setRenderer(new GridCellRenderer<ContactHistory>(){
    @Override public Object render(    ContactHistory contactHistory,    String property,    ColumnData config,    int rowIndex,    int colIndex,    ListStore<ContactHistory> store,    Grid<ContactHistory> grid){
      if (contactHistory.getValueType() == ContactHistory.ValueType.STRING) {
        return contactHistory.getFormattedValue();
      }
      final Image image=new Image();
      image.setWidth(""String_Node_Str"");
      imageProvider.provideDataUrl(contactHistory.getFormattedValue(),new SuccessCallback<String>(){
        @Override public void onSuccess(        String dataUrl){
          image.setUrl(dataUrl);
        }
      }
);
      return image;
    }
  }
);
  valueColumn.setWidth(150);
  valueColumn.setHeaderText(I18N.CONSTANTS.contactHistoryValueHeader());
  ColumnConfig commentColumn=new ColumnConfig(ContactHistory.COMMENT,I18N.CONSTANTS.contactHistoryCommentHeader(),150);
  return new ColumnModel(Arrays.asList(dateColumn,userColumn,changeTypeColumn,subjectColumn,valueColumn,commentColumn));
}","private ColumnModel buildColumnModel(){
  ColumnConfig dateColumn=new ColumnConfig(ContactHistory.UPDATED_AT,120);
  dateColumn.setRenderer(new GridCellRenderer<ContactHistory>(){
    @Override public Object render(    ContactHistory contactHistory,    String property,    ColumnData config,    int rowIndex,    int colIndex,    ListStore store,    Grid grid){
      return DateTimeFormat.getFormat(DateTimeFormat.PredefinedFormat.DATE_TIME_SHORT).format(contactHistory.getUpdatedAt());
    }
  }
);
  dateColumn.setHeaderText(I18N.CONSTANTS.contactHistoryUpdatedAtHeader());
  ColumnConfig userColumn=new ColumnConfig(ContactHistory.USER_FULL_NAME,I18N.CONSTANTS.contactHistoryUserHeader(),150);
  ColumnConfig changeTypeColumn=new ColumnConfig(ContactHistory.FORMATTED_CHANGE_TYPE,I18N.CONSTANTS.contactHistoryChangeTypeHeader(),150);
  ColumnConfig subjectColumn=new ColumnConfig(ContactHistory.SUBJECT,I18N.CONSTANTS.contactHistorySubjectHeader(),150);
  ColumnConfig valueColumn=new ColumnConfig(ContactHistory.FORMATTED_VALUE,150);
  valueColumn.setRenderer(new GridCellRenderer<ContactHistory>(){
    @Override public Object render(    ContactHistory contactHistory,    String property,    ColumnData config,    int rowIndex,    int colIndex,    ListStore<ContactHistory> store,    Grid<ContactHistory> grid){
      if (contactHistory.getValueType() == ContactHistory.ValueType.STRING) {
        return contactHistory.getFormattedValue();
      }
      final Image image=new Image();
      image.setWidth(""String_Node_Str"");
      imageProvider.provideDataUrl(contactHistory.getFormattedValue(),new SuccessCallback<String>(){
        @Override public void onSuccess(        String dataUrl){
          image.setUrl(dataUrl);
        }
      }
);
      return image;
    }
  }
);
  valueColumn.setHeaderText(I18N.CONSTANTS.contactHistoryValueHeader());
  ColumnConfig commentColumn=new ColumnConfig(ContactHistory.COMMENT,I18N.CONSTANTS.contactHistoryCommentHeader(),150);
  return new ColumnModel(Arrays.asList(dateColumn,userColumn,changeTypeColumn,subjectColumn,valueColumn,commentColumn));
}",0.9687723480333732
35469,"@Override public void addLabel(String label){
  if (ClientUtils.isBlank(label)) {
    return;
  }
  HTML html=new HTML(label);
  html.setHeight(LABEL_HEIGHT + ""String_Node_Str"");
  html.setStyleName(LABEL_STYLE_NAME);
  html.setWordWrap(false);
  if ((topDetailsContainer.getItemCount() + 1) * LABEL_HEIGHT > AVATAR_HEIGHT) {
    bottomDetailsContainer.add(html);
    bottomDetailsContainer.setHeight(bottomDetailsContainer.getItemCount() * LABEL_HEIGHT);
    bottomDetailsContainer.layout();
    return;
  }
  topDetailsContainer.add(html);
  topDetailsContainer.layout();
}","@Override public void addLabel(String label,String style){
  if (ClientUtils.isBlank(label)) {
    return;
  }
  HTML html=new HTML(label);
  html.setHeight(LABEL_HEIGHT + ""String_Node_Str"");
  html.setStyleName(style);
  html.setWordWrap(false);
  if ((topDetailsContainer.getItemCount() + 1) * LABEL_HEIGHT > AVATAR_HEIGHT) {
    bottomDetailsContainer.add(html);
    bottomDetailsContainer.setHeight(bottomDetailsContainer.getItemCount() * LABEL_HEIGHT);
    bottomDetailsContainer.layout();
    return;
  }
  topDetailsContainer.add(html);
  topDetailsContainer.layout();
}",0.9704861111111112
35470,"@Override public int compare(ContactHistory first,ContactHistory second){
  return first.getUpdatedAt().compareTo(second.getUpdatedAt());
}","@Override public int compare(ContactHistory first,ContactHistory second){
  return -first.getUpdatedAt().compareTo(second.getUpdatedAt());
}",0.996415770609319
35471,"public List<ContactHistory> findHistory(Integer contactId,Language language){
  Contact contact=contactDAO.findById(contactId);
  List<ContactHistory> contactHistories=new ArrayList<ContactHistory>();
  contactHistories.addAll(generateHistoryFromContactValues(contact,language));
  contactHistories.addAll(generateHistoryFromInboundRelationships(contact,language));
  Collections.sort(contactHistories,new Comparator<ContactHistory>(){
    @Override public int compare(    ContactHistory first,    ContactHistory second){
      return first.getUpdatedAt().compareTo(second.getUpdatedAt());
    }
  }
);
  return contactHistories;
}","public List<ContactHistory> findHistory(Integer contactId,Language language){
  Contact contact=contactDAO.findById(contactId);
  List<ContactHistory> contactHistories=new ArrayList<ContactHistory>();
  contactHistories.addAll(generateHistoryFromContactValues(contact,language));
  contactHistories.addAll(generateHistoryFromInboundRelationships(contact,language));
  Collections.sort(contactHistories,new Comparator<ContactHistory>(){
    @Override public int compare(    ContactHistory first,    ContactHistory second){
      return -first.getUpdatedAt().compareTo(second.getUpdatedAt());
    }
  }
);
  return contactHistories;
}",0.9992082343626286
35472,"private PrivacyGroupPermissionEnum getPermission(){
  PrivacyGroupPermissionEnum permission=PrivacyGroupPermissionEnum.NONE;
  for (  Integer orgUnitId : getOrgUnitIds()) {
    PrivacyGroupPermissionEnum privacyGroupPermission=ProfileUtils.getPermissionForOrgUnit(auth(),orgUnitId,getPrivacyGroup());
switch (privacyGroupPermission) {
case NONE:
      break;
case READ:
    permission=PrivacyGroupPermissionEnum.READ;
  break;
case WRITE:
return PrivacyGroupPermissionEnum.WRITE;
default :
throw new IllegalStateException(""String_Node_Str"" + privacyGroupPermission);
}
}
return permission;
}","private PrivacyGroupPermissionEnum getPermission(){
  if (getOrgUnitIds().contains(null)) {
    return PrivacyGroupPermissionEnum.WRITE;
  }
  PrivacyGroupPermissionEnum permission=PrivacyGroupPermissionEnum.NONE;
  for (  Integer orgUnitId : getOrgUnitIds()) {
    PrivacyGroupPermissionEnum privacyGroupPermission=ProfileUtils.getPermissionForOrgUnit(auth(),orgUnitId,getPrivacyGroup());
switch (privacyGroupPermission) {
case NONE:
      break;
case READ:
    permission=PrivacyGroupPermissionEnum.READ;
  break;
case WRITE:
return PrivacyGroupPermissionEnum.WRITE;
default :
throw new IllegalStateException(""String_Node_Str"" + privacyGroupPermission);
}
}
return permission;
}",0.9299763965381588
35473,"public static boolean isProjectEditable(ProjectDTO project,Authentication authentication){
  if (!isProjectVisible(project,authentication)) {
    return false;
  }
  Map<Integer,ProfileDTO> aggregatedProfiles=authentication.getAggregatedProfiles();
  if (aggregatedProfiles == null) {
    return false;
  }
  ProfileDTO profileDTO=aggregatedProfiles.get(project.getOrgUnitId());
  if (profileDTO == null) {
    return false;
  }
  if (profileDTO.getGlobalPermissions().contains(GlobalPermissionEnum.EDIT_ALL_PROJECTS)) {
    return true;
  }
  return authentication.getMemberOfProjectIds().contains(project.getId()) && profileDTO.getGlobalPermissions().contains(GlobalPermissionEnum.EDIT_PROJECT);
}","public static boolean isProjectEditable(ProjectDTO project,Authentication authentication){
  if (!isProjectVisible(project,authentication)) {
    return false;
  }
  if (project.getOrgUnitId() == null) {
    return true;
  }
  Map<Integer,ProfileDTO> aggregatedProfiles=authentication.getAggregatedProfiles();
  if (aggregatedProfiles == null) {
    return false;
  }
  ProfileDTO profileDTO=aggregatedProfiles.get(project.getOrgUnitId());
  if (profileDTO == null) {
    return false;
  }
  if (profileDTO.getGlobalPermissions().contains(GlobalPermissionEnum.EDIT_ALL_PROJECTS)) {
    return true;
  }
  return authentication.getMemberOfProjectIds().contains(project.getId()) && profileDTO.getGlobalPermissions().contains(GlobalPermissionEnum.EDIT_PROJECT);
}",0.958190541466758
35474,"private void initComponent(){
  this.setPlain(true);
  this.setModal(true);
  this.setBlinkModal(true);
  this.setLayout(new FitLayout());
  this.setSize(650,300);
  this.setHeadingHtml(I18N.CONSTANTS.dedupeContactWindowTitle());
  possibleDuplicatesGrid=generatePossibleDuplicatesGrid();
  firstStepMainButton=generateFirstStepMainButton();
  LayoutContainer firstStepButtonsContainer=Layouts.border();
  firstStepButtonsContainer.add(firstStepMainButton,Layouts.borderLayoutData(Style.LayoutRegion.EAST));
  LayoutContainer firstStepContainer=Layouts.border();
  firstStepContainer.setScrollMode(Style.Scroll.AUTOY);
  firstStepContainer.add(generateMessageLabel(),Layouts.borderLayoutData(Style.LayoutRegion.NORTH,50f,Layouts.Margin.HALF_TOP,Layouts.Margin.HALF_RIGHT,Layouts.Margin.HALF_BOTTOM,Layouts.Margin.HALF_LEFT));
  firstStepContainer.add(possibleDuplicatesGrid,Layouts.borderLayoutData(Style.LayoutRegion.CENTER,Layouts.Margin.HALF_TOP,Layouts.Margin.HALF_BOTTOM));
  firstStepContainer.add(firstStepButtonsContainer,Layouts.borderLayoutData(Style.LayoutRegion.SOUTH,20f,Layouts.Margin.HALF_TOP,Layouts.Margin.HALF_RIGHT,Layouts.Margin.BOTTOM,Layouts.Margin.DOUBLE_LEFT));
  duplicatedPropertiesGrid=generateDuplicatedPropertiesGrid();
  secondStepMainButton=generateFirstStepMainButton();
  LayoutContainer secondStepButtonsContainer=Layouts.border();
  secondStepButtonsContainer.add(secondStepMainButton,Layouts.borderLayoutData(Style.LayoutRegion.EAST));
  secondStepContainer=Layouts.border();
  secondStepContainer.setScrollMode(Style.Scroll.AUTOY);
  secondStepContainer.add(duplicatedPropertiesGrid,Layouts.borderLayoutData(Style.LayoutRegion.CENTER,Layouts.Margin.HALF_TOP,Layouts.Margin.HALF_BOTTOM));
  secondStepContainer.add(secondStepButtonsContainer,Layouts.borderLayoutData(Style.LayoutRegion.SOUTH,20f,Layouts.Margin.HALF_TOP,Layouts.Margin.HALF_RIGHT,Layouts.Margin.BOTTOM,Layouts.Margin.DOUBLE_LEFT));
  cardLayout=new CardLayout();
  LayoutContainer mainContainer=new LayoutContainer(cardLayout);
  mainContainer.add(firstStepContainer);
  mainContainer.add(secondStepContainer);
  cardLayout.setActiveItem(firstStepContainer);
  add(mainContainer);
}","private void initComponent(){
  this.setPlain(true);
  this.setModal(true);
  this.setBlinkModal(true);
  this.setLayout(new FitLayout());
  this.setSize(650,300);
  this.setHeadingHtml(I18N.CONSTANTS.dedupeContactWindowTitle());
  possibleDuplicatesGrid=generatePossibleDuplicatesGrid();
  firstStepMainButton=generateFirstStepMainButton();
  LayoutContainer firstStepButtonsContainer=Layouts.border();
  firstStepButtonsContainer.add(firstStepMainButton,Layouts.borderLayoutData(Style.LayoutRegion.EAST));
  LayoutContainer firstStepContainer=Layouts.border();
  firstStepContainer.setScrollMode(Style.Scroll.AUTOY);
  firstStepContainer.add(generateMessageLabel(),Layouts.borderLayoutData(Style.LayoutRegion.NORTH,50f,Layouts.Margin.HALF_TOP,Layouts.Margin.HALF_RIGHT,Layouts.Margin.HALF_BOTTOM,Layouts.Margin.HALF_LEFT));
  firstStepContainer.add(possibleDuplicatesGrid,Layouts.borderLayoutData(Style.LayoutRegion.CENTER,Layouts.Margin.HALF_TOP,Layouts.Margin.HALF_BOTTOM));
  firstStepContainer.add(firstStepButtonsContainer,Layouts.borderLayoutData(Style.LayoutRegion.SOUTH,20f,Layouts.Margin.HALF_TOP,Layouts.Margin.HALF_RIGHT,Layouts.Margin.BOTTOM,Layouts.Margin.DOUBLE_LEFT));
  duplicatedPropertiesGrid=generateDuplicatedPropertiesGrid();
  secondStepMainButton=generateSecondStepMainButton();
  LayoutContainer secondStepButtonsContainer=Layouts.border();
  secondStepButtonsContainer.add(secondStepMainButton,Layouts.borderLayoutData(Style.LayoutRegion.EAST));
  secondStepContainer=Layouts.border();
  secondStepContainer.setScrollMode(Style.Scroll.AUTOY);
  secondStepContainer.add(duplicatedPropertiesGrid,Layouts.borderLayoutData(Style.LayoutRegion.CENTER,Layouts.Margin.HALF_TOP,Layouts.Margin.HALF_BOTTOM));
  secondStepContainer.add(secondStepButtonsContainer,Layouts.borderLayoutData(Style.LayoutRegion.SOUTH,20f,Layouts.Margin.HALF_TOP,Layouts.Margin.HALF_RIGHT,Layouts.Margin.BOTTOM,Layouts.Margin.DOUBLE_LEFT));
  cardLayout=new CardLayout();
  LayoutContainer mainContainer=new LayoutContainer(cardLayout);
  mainContainer.add(firstStepContainer);
  mainContainer.add(secondStepContainer);
  cardLayout.setActiveItem(firstStepContainer);
  add(mainContainer);
}",0.9974822613870452
35475,"@Override protected ListResult<ContactDuplicatedProperty> execute(GetContactDuplicatedProperties command,UserDispatch.UserExecutionContext context) throws CommandException {
  Contact newContact;
  Contact oldContact;
  if (command.getNewContactId() != null) {
    newContact=contactDAO.findById(command.getNewContactId());
  }
 else {
    newContact=contactService.create(new PropertyMap(command.getNewContactProperties()),context);
  }
  oldContact=contactDAO.findById(command.getOldContactId());
  List<ContactDuplicatedProperty> duplicatedProperties=contactDuplicationService.extractProperties(newContact,oldContact,context.getLanguage());
  return new ListResult<>(duplicatedProperties);
}","@Override protected ListResult<ContactDuplicatedProperty> execute(GetContactDuplicatedProperties command,UserDispatch.UserExecutionContext context) throws CommandException {
  Contact newContact;
  Contact oldContact;
  if (command.getNewContactId() != null) {
    newContact=contactDAO.findById(command.getNewContactId());
  }
 else {
    newContact=contactService.createVirtual(new PropertyMap(command.getNewContactProperties()),context);
  }
  oldContact=contactDAO.findById(command.getOldContactId());
  List<ContactDuplicatedProperty> duplicatedProperties=contactDuplicationService.extractProperties(newContact,oldContact,context.getLanguage());
  return new ListResult<>(duplicatedProperties);
}",0.9949820788530466
35476,"public List<ContactDuplicatedProperty> extractProperties(Contact newContact,Contact oldContact,Language language){
  if (!Objects.equals(newContact.getContactModel().getId(),oldContact.getContactModel().getId())) {
    throw new IllegalStateException(""String_Node_Str"" + newContact.getContactModel().getId() + ""String_Node_Str""+ oldContact.getContactModel().getId());
  }
  List<ContactDuplicatedProperty> properties=new ArrayList<>();
  for (  LayoutGroup group : newContact.getContactModel().getDetails().getLayout().getGroups()) {
    for (    LayoutConstraint layoutConstraint : group.getConstraints()) {
      FlexibleElement element=layoutConstraint.getElement();
      String serializedNewValue;
      String serializedOldValue;
      String formattedNewValue;
      String formattedOldValue;
      ContactDuplicatedProperty.ValueType valueType=ContactDuplicatedProperty.ValueType.STRING;
      if (element instanceof DefaultContactFlexibleElement) {
        DefaultContactFlexibleElement defaultContactFlexibleElement=(DefaultContactFlexibleElement)element;
        serializedNewValue=defaultContactFlexibleElement.getSerializedValue(newContact);
        serializedOldValue=defaultContactFlexibleElement.getSerializedValue(oldContact);
        formattedNewValue=defaultContactFlexibleElement.getFormattedValue(newContact);
        formattedOldValue=defaultContactFlexibleElement.getFormattedValue(oldContact);
        if (((DefaultContactFlexibleElement)element).getType() == DefaultContactFlexibleElementType.PHOTO) {
          valueType=ContactDuplicatedProperty.ValueType.IMAGE;
        }
      }
 else {
        Value newValue=valueDAO.getValueByElementAndContainer(element.getId(),newContact.getId());
        Value oldValue=valueDAO.getValueByElementAndContainer(element.getId(),oldContact.getId());
        serializedNewValue=newValue.getValue();
        serializedOldValue=oldValue.getValue();
        formattedNewValue=modelPropertyService.getFormattedValue(element,newValue.getValue(),language);
        formattedOldValue=modelPropertyService.getFormattedValue(element,oldValue.getValue(),language);
      }
      if (""String_Node_Str"".equals(serializedOldValue)) {
        serializedOldValue=null;
      }
      if (""String_Node_Str"".equals(serializedNewValue)) {
        serializedNewValue=null;
      }
      if (Objects.equals(serializedNewValue,serializedOldValue)) {
        continue;
      }
      String propertyLabel=element.getLabel();
      if (propertyLabel == null && element instanceof DefaultContactFlexibleElement) {
        propertyLabel=modelPropertyService.getDefaultContactPropertyLabel(((DefaultContactFlexibleElement)element).getType(),language);
      }
      ContactDuplicatedProperty contactDuplicatedProperty=new ContactDuplicatedProperty();
      contactDuplicatedProperty.setPropertyLabel(propertyLabel);
      contactDuplicatedProperty.setSerializedNewValue(serializedNewValue);
      contactDuplicatedProperty.setSerializedOldValue(serializedOldValue);
      contactDuplicatedProperty.setFormattedNewValue(formattedNewValue);
      contactDuplicatedProperty.setFormattedOldValue(formattedOldValue);
      contactDuplicatedProperty.setFlexibleElementId(element.getId());
      contactDuplicatedProperty.setValueType(valueType);
      properties.add(contactDuplicatedProperty);
    }
  }
  return properties;
}","public List<ContactDuplicatedProperty> extractProperties(Contact newContact,Contact oldContact,Language language){
  if (!Objects.equals(newContact.getContactModel().getId(),oldContact.getContactModel().getId())) {
    throw new IllegalStateException(""String_Node_Str"" + newContact.getContactModel().getId() + ""String_Node_Str""+ oldContact.getContactModel().getId());
  }
  List<ContactDuplicatedProperty> properties=new ArrayList<>();
  for (  LayoutGroup group : newContact.getContactModel().getDetails().getLayout().getGroups()) {
    if (group.getHasIterations()) {
      continue;
    }
    for (    LayoutConstraint layoutConstraint : group.getConstraints()) {
      FlexibleElement element=layoutConstraint.getElement();
      String serializedNewValue;
      String serializedOldValue;
      String formattedNewValue;
      String formattedOldValue;
      ContactDuplicatedProperty.ValueType valueType=ContactDuplicatedProperty.ValueType.STRING;
      if (element instanceof DefaultContactFlexibleElement) {
        DefaultContactFlexibleElement defaultContactFlexibleElement=(DefaultContactFlexibleElement)element;
        serializedNewValue=defaultContactFlexibleElement.getSerializedValue(newContact);
        serializedOldValue=defaultContactFlexibleElement.getSerializedValue(oldContact);
        formattedNewValue=defaultContactFlexibleElement.getFormattedValue(newContact);
        formattedOldValue=defaultContactFlexibleElement.getFormattedValue(oldContact);
        if (((DefaultContactFlexibleElement)element).getType() == DefaultContactFlexibleElementType.PHOTO) {
          valueType=ContactDuplicatedProperty.ValueType.IMAGE;
        }
      }
 else {
        Value newValue=valueDAO.getValueByElementAndContainer(element.getId(),newContact.getId());
        Value oldValue=valueDAO.getValueByElementAndContainer(element.getId(),oldContact.getId());
        serializedNewValue=newValue.getValue();
        serializedOldValue=oldValue.getValue();
        formattedNewValue=modelPropertyService.getFormattedValue(element,newValue.getValue(),language);
        formattedOldValue=modelPropertyService.getFormattedValue(element,oldValue.getValue(),language);
      }
      if (""String_Node_Str"".equals(serializedOldValue)) {
        serializedOldValue=null;
      }
      if (""String_Node_Str"".equals(serializedNewValue)) {
        serializedNewValue=null;
      }
      if (Objects.equals(serializedNewValue,serializedOldValue)) {
        continue;
      }
      String propertyLabel=element.getLabel();
      if (propertyLabel == null && element instanceof DefaultContactFlexibleElement) {
        propertyLabel=modelPropertyService.getDefaultContactPropertyLabel(((DefaultContactFlexibleElement)element).getType(),language);
      }
      ContactDuplicatedProperty contactDuplicatedProperty=new ContactDuplicatedProperty();
      contactDuplicatedProperty.setPropertyLabel(propertyLabel);
      contactDuplicatedProperty.setSerializedNewValue(serializedNewValue);
      contactDuplicatedProperty.setSerializedOldValue(serializedOldValue);
      contactDuplicatedProperty.setFormattedNewValue(formattedNewValue);
      contactDuplicatedProperty.setFormattedOldValue(formattedOldValue);
      contactDuplicatedProperty.setFlexibleElementId(element.getId());
      contactDuplicatedProperty.setValueType(valueType);
      properties.add(contactDuplicatedProperty);
    }
  }
  return properties;
}",0.9914327917282127
35477,"private Button generateFirstStepMainButton(){
  Button button;
  if (createContact) {
    button=new Button(I18N.CONSTANTS.dedupeContactCreateNewButton());
  }
 else {
    button=new Button(I18N.CONSTANTS.dedupeContactUpdateIndependently());
  }
  button.addSelectionListener(new SelectionListener<ButtonEvent>(){
    @Override public void componentSelected(    ButtonEvent ce){
      secondStepHandler.handleDedupeContact(selectedContact.getId(),selectedProperties);
    }
  }
);
  return button;
}","private Button generateFirstStepMainButton(){
  Button button;
  if (createContact) {
    button=new Button(I18N.CONSTANTS.dedupeContactCreateNewButton());
  }
 else {
    button=new Button(I18N.CONSTANTS.dedupeContactUpdateIndependently());
  }
  return button;
}",0.6526867627785059
35478,"@Override public void refresh(final ContactDTO contactDTO){
  computationTriggerManager.prepareForContact(contactDTO);
  valueChanges.clear();
  view.getDetailsContainer().removeAll();
  final LayoutDTO layout=contactDTO.getContactModel().getDetails().getLayout();
  int count=0;
  for (  final LayoutGroupDTO groupDTO : layout.getGroups()) {
    count+=groupDTO.getConstraints().size();
  }
  if (count == 0) {
    view.fillContainer(new Label(I18N.CONSTANTS.contactDetailsNoDetails()));
    return;
  }
  formPanel=Forms.panel();
  final Grid gridLayout=new Grid(layout.getRowsCount(),layout.getColumnsCount());
  gridLayout.setCellPadding(0);
  gridLayout.setCellSpacing(0);
  final DispatchQueue queue=new DispatchQueue(dispatch,true);
  for (  final LayoutGroupDTO groupLayout : layout.getGroups()) {
    if (!groupLayout.getHasIterations()) {
      FieldSet fieldSet=createGroupLayoutFieldSet(contactDTO,groupLayout,queue,null,null,null);
      gridLayout.setWidget(groupLayout.getRow(),groupLayout.getColumn(),fieldSet);
      continue;
    }
    final FieldSet fieldSet=(FieldSet)groupLayout.getWidget();
    gridLayout.setWidget(groupLayout.getRow(),groupLayout.getColumn(),fieldSet);
    final IterableGroupPanel tabPanel=Forms.iterableGroupPanel(dispatch,groupLayout,contactDTO,ProfileUtils.isGranted(auth(),GlobalPermissionEnum.CREATE_ITERATIONS));
    tabPanel.setDelegate(this);
    fieldSet.add(tabPanel);
    tabPanel.setAutoHeight(true);
    tabPanel.setAutoWidth(true);
    tabPanel.setTabScroll(true);
    tabPanel.addStyleName(""String_Node_Str"");
    tabPanel.setBorders(true);
    tabPanel.setBodyBorder(false);
    GetLayoutGroupIterations getIterations=new GetLayoutGroupIterations(groupLayout.getId(),contactDTO.getId(),-1);
    queue.add(getIterations,new CommandResultHandler<ListResult<LayoutGroupIterationDTO>>(){
      @Override public void onCommandFailure(      final Throwable throwable){
        if (Log.isErrorEnabled()) {
          Log.error(""String_Node_Str"",throwable);
        }
        throw new RuntimeException(throwable);
      }
      @Override protected void onCommandSuccess(      ListResult<LayoutGroupIterationDTO> result){
        DispatchQueue iterationsQueue=new DispatchQueue(dispatch,true);
        for (        final LayoutGroupIterationDTO iteration : result.getList()) {
          final IterableGroupItem tab=new IterableGroupItem(tabPanel,iteration.getId(),iteration.getName());
          tabPanel.addIterationTab(tab);
          Layout tabLayout=Layouts.fitLayout();
          tab.setLayout(tabLayout);
          FieldSet tabSet=createGroupLayoutFieldSet(contactDTO,groupLayout,iterationsQueue,iteration == null ? null : iteration.getId(),tabPanel,tab);
          tab.add(tabSet);
        }
        iterationsQueue.start();
        if (tabPanel.getItemCount() > 0) {
          tabPanel.setSelection(tabPanel.getItem(0));
        }
      }
    }
,new LoadingMask(view.getDetailsContainer()));
    fieldSet.layout();
  }
  view.getSaveButton().removeAllListeners();
  view.getSaveButton().addSelectionListener(new SelectionListener<ButtonEvent>(){
    @Override public void componentSelected(    final ButtonEvent buttonEvent){
      view.getSaveButton().disable();
      dispatch.execute(buildCheckContactDuplicationCommand(contactDTO),new CommandResultHandler<ListResult<ContactDTO>>(){
        @Override protected void onCommandSuccess(        ListResult<ContactDTO> result){
          if (result == null || result.isEmpty()) {
            updateContact(contactDTO,new CommandResultHandler<ContactDTO>(){
              @Override protected void onCommandSuccess(              ContactDTO updatedContactDTO){
                view.getSaveButton().enable();
              }
            }
,view.getDetailsContainer());
            return;
          }
          final DedupeContactDialog dedupeContactDialog=view.generateDedupeDialog();
          dedupeContactDialog.getPossibleDuplicatesGrid().getStore().add(result.getList());
          dedupeContactDialog.getFirstStepMainButton().addSelectionListener(new SelectionListener<ButtonEvent>(){
            @Override public void componentSelected(            ButtonEvent ce){
              updateContact(contactDTO,new CommandResultHandler<ContactDTO>(){
                @Override protected void onCommandSuccess(                ContactDTO result){
                  dedupeContactDialog.hide();
                }
              }
,view.getDetailsContainer());
            }
          }
);
          dedupeContactDialog.setSecondStepHandler(new DedupeContactDialog.SecondStepHandler(){
            @Override public void initialize(            final Integer contactId,            final ListStore<ContactDuplicatedProperty> propertiesStore){
              updateContact(contactDTO,new CommandResultHandler<ContactDTO>(){
                @Override protected void onCommandSuccess(                ContactDTO updatedContactDTO){
                  dispatch.execute(new GetContactDuplicatedProperties(contactId,updatedContactDTO.getId(),null),new CommandResultHandler<ListResult<ContactDuplicatedProperty>>(){
                    @Override protected void onCommandSuccess(                    ListResult<ContactDuplicatedProperty> result){
                      propertiesStore.add(result.getList());
                    }
                  }
,new LoadingMask(dedupeContactDialog));
                }
              }
,dedupeContactDialog);
            }
            @Override public void downloadImage(            String id,            final Image image){
              imageProvider.provideDataUrl(id,new SuccessCallback<String>(){
                @Override public void onSuccess(                String dataUrl){
                  image.setUrl(dataUrl);
                }
              }
);
            }
            @Override public void handleDedupeContact(            final Integer targetedContactId,            List<ContactDuplicatedProperty> selectedProperties){
              dispatch.execute(new DedupeContact(selectedProperties,contactDTO.getId(),targetedContactId),new CommandResultHandler<ContactDTO>(){
                @Override protected void onCommandSuccess(                ContactDTO targetedContactDTO){
                  dedupeContactDialog.hide();
                  eventBus.navigateRequest(Page.CONTACT_DASHBOARD.requestWith(RequestParameter.ID,targetedContactId));
                }
              }
);
            }
          }
);
          dedupeContactDialog.addWindowListener(new WindowListener(){
            @Override public void windowHide(            WindowEvent windowEvent){
              super.windowHide(windowEvent);
              if (windowEvent.getType() == Events.Hide) {
                view.getSaveButton().enable();
              }
            }
          }
);
          dedupeContactDialog.show();
        }
      }
);
    }
  }
);
  view.getExportButton().removeAllListeners();
  view.getExportButton().addSelectionListener(new SelectionListener<ButtonEvent>(){
    @Override public void componentSelected(    final ButtonEvent ce){
      onExportContact(contactDTO);
    }
  }
);
  queue.start();
  formPanel.add(gridLayout);
  view.fillContainer(formPanel);
}","@Override public void refresh(final ContactDTO contactDTO){
  computationTriggerManager.prepareForContact(contactDTO);
  valueChanges.clear();
  view.getDetailsContainer().removeAll();
  final LayoutDTO layout=contactDTO.getContactModel().getDetails().getLayout();
  int count=0;
  for (  final LayoutGroupDTO groupDTO : layout.getGroups()) {
    count+=groupDTO.getConstraints().size();
  }
  if (count == 0) {
    view.fillContainer(new Label(I18N.CONSTANTS.contactDetailsNoDetails()));
    return;
  }
  formPanel=Forms.panel();
  final Grid gridLayout=new Grid(layout.getRowsCount(),layout.getColumnsCount());
  gridLayout.setCellPadding(0);
  gridLayout.setCellSpacing(0);
  formPanel.add(new Label(I18N.CONSTANTS.contactUniqueId() + contactDTO.getId()));
  final DispatchQueue queue=new DispatchQueue(dispatch,true);
  for (  final LayoutGroupDTO groupLayout : layout.getGroups()) {
    if (!groupLayout.getHasIterations()) {
      FieldSet fieldSet=createGroupLayoutFieldSet(contactDTO,groupLayout,queue,null,null,null);
      fieldSet.setHeadingHtml(groupLayout.getTitle());
      fieldSet.setCollapsible(true);
      fieldSet.setBorders(true);
      gridLayout.setWidget(groupLayout.getRow(),groupLayout.getColumn(),fieldSet);
      continue;
    }
    final FieldSet fieldSet=(FieldSet)groupLayout.getWidget();
    gridLayout.setWidget(groupLayout.getRow(),groupLayout.getColumn(),fieldSet);
    final IterableGroupPanel tabPanel=Forms.iterableGroupPanel(dispatch,groupLayout,contactDTO,ProfileUtils.isGranted(auth(),GlobalPermissionEnum.CREATE_ITERATIONS));
    tabPanel.setDelegate(this);
    fieldSet.add(tabPanel);
    tabPanel.setAutoHeight(true);
    tabPanel.setAutoWidth(true);
    tabPanel.setTabScroll(true);
    tabPanel.addStyleName(""String_Node_Str"");
    tabPanel.setBorders(true);
    tabPanel.setBodyBorder(false);
    GetLayoutGroupIterations getIterations=new GetLayoutGroupIterations(groupLayout.getId(),contactDTO.getId(),-1);
    queue.add(getIterations,new CommandResultHandler<ListResult<LayoutGroupIterationDTO>>(){
      @Override public void onCommandFailure(      final Throwable throwable){
        if (Log.isErrorEnabled()) {
          Log.error(""String_Node_Str"",throwable);
        }
        throw new RuntimeException(throwable);
      }
      @Override protected void onCommandSuccess(      ListResult<LayoutGroupIterationDTO> result){
        DispatchQueue iterationsQueue=new DispatchQueue(dispatch,true);
        for (        final LayoutGroupIterationDTO iteration : result.getList()) {
          final IterableGroupItem tab=new IterableGroupItem(tabPanel,iteration.getId(),iteration.getName());
          tabPanel.addIterationTab(tab);
          Layout tabLayout=Layouts.fitLayout();
          tab.setLayout(tabLayout);
          FieldSet tabSet=createGroupLayoutFieldSet(contactDTO,groupLayout,iterationsQueue,iteration == null ? null : iteration.getId(),tabPanel,tab);
          tab.add(tabSet);
        }
        iterationsQueue.start();
        if (tabPanel.getItemCount() > 0) {
          tabPanel.setSelection(tabPanel.getItem(0));
        }
      }
    }
,new LoadingMask(view.getDetailsContainer()));
    fieldSet.layout();
  }
  view.getSaveButton().removeAllListeners();
  view.getSaveButton().addSelectionListener(new SelectionListener<ButtonEvent>(){
    @Override public void componentSelected(    final ButtonEvent buttonEvent){
      view.getSaveButton().disable();
      dispatch.execute(buildCheckContactDuplicationCommand(contactDTO),new CommandResultHandler<ListResult<ContactDTO>>(){
        @Override protected void onCommandSuccess(        ListResult<ContactDTO> result){
          if (result == null || result.isEmpty()) {
            updateContact(contactDTO,new CommandResultHandler<ContactDTO>(){
              @Override protected void onCommandSuccess(              ContactDTO updatedContactDTO){
                view.getSaveButton().enable();
              }
            }
,view.getDetailsContainer());
            return;
          }
          final DedupeContactDialog dedupeContactDialog=view.generateDedupeDialog();
          dedupeContactDialog.getPossibleDuplicatesGrid().getStore().add(result.getList());
          dedupeContactDialog.getFirstStepMainButton().addSelectionListener(new SelectionListener<ButtonEvent>(){
            @Override public void componentSelected(            ButtonEvent ce){
              updateContact(contactDTO,new CommandResultHandler<ContactDTO>(){
                @Override protected void onCommandSuccess(                ContactDTO result){
                  dedupeContactDialog.hide();
                }
              }
,view.getDetailsContainer());
            }
          }
);
          dedupeContactDialog.setSecondStepHandler(new DedupeContactDialog.SecondStepHandler(){
            @Override public void initialize(            final Integer contactId,            final ListStore<ContactDuplicatedProperty> propertiesStore){
              updateContact(contactDTO,new CommandResultHandler<ContactDTO>(){
                @Override protected void onCommandSuccess(                ContactDTO updatedContactDTO){
                  dispatch.execute(new GetContactDuplicatedProperties(contactId,updatedContactDTO.getId(),null),new CommandResultHandler<ListResult<ContactDuplicatedProperty>>(){
                    @Override protected void onCommandSuccess(                    ListResult<ContactDuplicatedProperty> result){
                      propertiesStore.add(result.getList());
                    }
                  }
,new LoadingMask(dedupeContactDialog));
                }
              }
,dedupeContactDialog);
            }
            @Override public void downloadImage(            String id,            final Image image){
              imageProvider.provideDataUrl(id,new SuccessCallback<String>(){
                @Override public void onSuccess(                String dataUrl){
                  image.setUrl(dataUrl);
                }
              }
);
            }
            @Override public void handleDedupeContact(            final Integer targetedContactId,            List<ContactDuplicatedProperty> selectedProperties){
              dispatch.execute(new DedupeContact(selectedProperties,contactDTO.getId(),targetedContactId),new CommandResultHandler<ContactDTO>(){
                @Override protected void onCommandSuccess(                ContactDTO targetedContactDTO){
                  dedupeContactDialog.hide();
                  eventBus.navigateRequest(Page.CONTACT_DASHBOARD.requestWith(RequestParameter.ID,targetedContactId));
                }
              }
);
            }
          }
);
          dedupeContactDialog.addWindowListener(new WindowListener(){
            @Override public void windowHide(            WindowEvent windowEvent){
              super.windowHide(windowEvent);
              if (windowEvent.getType() == Events.Hide) {
                view.getSaveButton().enable();
              }
            }
          }
);
          dedupeContactDialog.show();
        }
      }
);
    }
  }
);
  view.getExportButton().removeAllListeners();
  view.getExportButton().addSelectionListener(new SelectionListener<ButtonEvent>(){
    @Override public void componentSelected(    final ButtonEvent ce){
      onExportContact(contactDTO);
    }
  }
);
  queue.start();
  formPanel.add(gridLayout);
  view.fillContainer(formPanel);
}",0.985743660041124
35479,"@Override public void componentSelected(ButtonEvent event){
  if (!formPanel.isValid()) {
    return;
  }
  createContactHandler.handleContactCreation(contactModelComboBox.getValue(),loginField.getValue(),firstNameField.getValue(),familyNameField.getValue(),organizationNameField.getValue(),mainOrgUnitComboBox.getValue(),secondaryOrgUnitsComboBox.getListStore().getModels());
  window.hide();
}","@Override public void componentSelected(ButtonEvent event){
  if (!formPanel.isValid()) {
    return;
  }
  createContactHandler.handleContactCreation(contactModelComboBox.getValue(),firstNameField.getValue(),familyNameField.getValue(),organizationNameField.getValue(),mainOrgUnitComboBox.getValue(),secondaryOrgUnitsComboBox.getListStore().getModels());
  window.hide();
}",0.9713541666666666
35480,"private HashMap<String,Object> buildPropertyMap(ContactModelDTO contactModelDTO,String login,String firstName,String familyName,String organizationName,OrgUnitDTO mainOrgUnit,List<OrgUnitDTO> secondaryOrgUnits){
  HashMap<String,Object> properties=new HashMap<String,Object>();
  properties.put(ContactDTO.CONTACT_MODEL,contactModelDTO.getId());
  properties.put(ContactDTO.LOGIN,login);
  properties.put(ContactDTO.FIRSTNAME,contactModelDTO.getType() == ContactModelType.INDIVIDUAL ? firstName : null);
  properties.put(ContactDTO.NAME,contactModelDTO.getType() == ContactModelType.INDIVIDUAL ? familyName : organizationName);
  if (mainOrgUnit != null) {
    properties.put(ContactDTO.MAIN_ORG_UNIT,mainOrgUnit.getId());
  }
  if (secondaryOrgUnits != null) {
    HashSet<Integer> secondaryOrgUnitIds=new HashSet<Integer>();
    for (    OrgUnitDTO secondaryOrgUnit : secondaryOrgUnits) {
      secondaryOrgUnitIds.add(secondaryOrgUnit.getId());
    }
    properties.put(ContactDTO.SECONDARY_ORG_UNITS,secondaryOrgUnitIds);
  }
  return properties;
}","private HashMap<String,Object> buildPropertyMap(ContactModelDTO contactModelDTO,String firstName,String familyName,String organizationName,OrgUnitDTO mainOrgUnit,List<OrgUnitDTO> secondaryOrgUnits){
  HashMap<String,Object> properties=new HashMap<String,Object>();
  properties.put(ContactDTO.CONTACT_MODEL,contactModelDTO.getId());
  properties.put(ContactDTO.FIRSTNAME,contactModelDTO.getType() == ContactModelType.INDIVIDUAL ? firstName : null);
  properties.put(ContactDTO.NAME,contactModelDTO.getType() == ContactModelType.INDIVIDUAL ? familyName : organizationName);
  if (mainOrgUnit != null) {
    properties.put(ContactDTO.MAIN_ORG_UNIT,mainOrgUnit.getId());
  }
  if (secondaryOrgUnits != null) {
    HashSet<Integer> secondaryOrgUnitIds=new HashSet<Integer>();
    for (    OrgUnitDTO secondaryOrgUnit : secondaryOrgUnits) {
      secondaryOrgUnitIds.add(secondaryOrgUnit.getId());
    }
    properties.put(ContactDTO.SECONDARY_ORG_UNITS,secondaryOrgUnitIds);
  }
  return properties;
}",0.9731576378721328
35481,"/** 
 * Builds a new contact list panel with default values.
 */
@Inject public ContactsListWidget(final View view,final Injector injector){
  super(view,injector);
  createContactHandler=new CreateContactHandler(){
    @Override public void handleContactCreation(    final ContactModelDTO contactModelDTO,    final String login,    final String firstName,    final String familyName,    final String organizationName,    final OrgUnitDTO mainOrgUnit,    final List<OrgUnitDTO> secondaryOrgUnits){
      CheckContactDuplication checkContactDuplication;
      if (contactModelDTO.getType() == ContactModelType.INDIVIDUAL) {
        checkContactDuplication=new CheckContactDuplication(null,null,familyName,firstName);
      }
 else {
        checkContactDuplication=new CheckContactDuplication(null,null,familyName,null);
      }
      dispatch.execute(checkContactDuplication,new AsyncCallback<ListResult<ContactDTO>>(){
        @Override public void onFailure(        Throwable caught){
          Log.error(""String_Node_Str"");
        }
        @Override public void onSuccess(        ListResult<ContactDTO> result){
          final HashMap<String,Object> properties=buildPropertyMap(contactModelDTO,login,firstName,familyName,organizationName,mainOrgUnit,secondaryOrgUnits);
          if (result == null || result.getSize() == 0) {
            createEntity(properties);
            return;
          }
          final DedupeContactDialog dedupeContactDialog=new DedupeContactDialog(true);
          dedupeContactDialog.getPossibleDuplicatesGrid().getStore().add(result.getList());
          dedupeContactDialog.getFirstStepMainButton().addSelectionListener(new SelectionListener<ButtonEvent>(){
            @Override public void componentSelected(            ButtonEvent ce){
              createEntity(properties);
              dedupeContactDialog.hide();
            }
          }
);
          dedupeContactDialog.setSecondStepHandler(new DedupeContactDialog.SecondStepHandler(){
            @Override public void initialize(            final Integer contactId,            final ListStore<ContactDuplicatedProperty> propertiesStore){
              dispatch.execute(new GetContactDuplicatedProperties(contactId,null,properties),new CommandResultHandler<ListResult<ContactDuplicatedProperty>>(){
                @Override protected void onCommandSuccess(                ListResult<ContactDuplicatedProperty> result){
                  propertiesStore.add(result.getList());
                }
              }
,new LoadingMask(dedupeContactDialog));
            }
            @Override public void downloadImage(            String id,            final Image image){
              imageProvider.provideDataUrl(id,new SuccessCallback<String>(){
                @Override public void onSuccess(                String dataUrl){
                  image.setUrl(dataUrl);
                }
              }
);
            }
            @Override public void handleDedupeContact(            final Integer targetedContactId,            List<ContactDuplicatedProperty> selectedProperties){
              dispatch.execute(new DedupeContact(selectedProperties,targetedContactId),new CommandResultHandler<ContactDTO>(){
                @Override protected void onCommandSuccess(                ContactDTO targetedContactDTO){
                  dedupeContactDialog.hide();
                  eventBus.navigateRequest(Page.CONTACT_DASHBOARD.requestWith(RequestParameter.ID,targetedContactId));
                }
              }
);
            }
          }
);
          dedupeContactDialog.show();
        }
      }
);
    }
  }
;
}","/** 
 * Builds a new contact list panel with default values.
 */
@Inject public ContactsListWidget(final View view,final Injector injector){
  super(view,injector);
  createContactHandler=new CreateContactHandler(){
    @Override public void handleContactCreation(    final ContactModelDTO contactModelDTO,    final String firstName,    final String familyName,    final String organizationName,    final OrgUnitDTO mainOrgUnit,    final List<OrgUnitDTO> secondaryOrgUnits){
      CheckContactDuplication checkContactDuplication;
      if (contactModelDTO.getType() == ContactModelType.INDIVIDUAL) {
        checkContactDuplication=new CheckContactDuplication(null,null,familyName,firstName);
      }
 else {
        checkContactDuplication=new CheckContactDuplication(null,null,familyName,null);
      }
      dispatch.execute(checkContactDuplication,new AsyncCallback<ListResult<ContactDTO>>(){
        @Override public void onFailure(        Throwable caught){
          Log.error(""String_Node_Str"");
        }
        @Override public void onSuccess(        ListResult<ContactDTO> result){
          final HashMap<String,Object> properties=buildPropertyMap(contactModelDTO,firstName,familyName,organizationName,mainOrgUnit,secondaryOrgUnits);
          if (result == null || result.getSize() == 0) {
            createEntity(properties);
            return;
          }
          final DedupeContactDialog dedupeContactDialog=new DedupeContactDialog(true);
          dedupeContactDialog.getPossibleDuplicatesGrid().getStore().add(result.getList());
          dedupeContactDialog.getFirstStepMainButton().addSelectionListener(new SelectionListener<ButtonEvent>(){
            @Override public void componentSelected(            ButtonEvent ce){
              createEntity(properties);
              dedupeContactDialog.hide();
            }
          }
);
          dedupeContactDialog.setSecondStepHandler(new DedupeContactDialog.SecondStepHandler(){
            @Override public void initialize(            final Integer contactId,            final ListStore<ContactDuplicatedProperty> propertiesStore){
              dispatch.execute(new GetContactDuplicatedProperties(contactId,null,properties),new CommandResultHandler<ListResult<ContactDuplicatedProperty>>(){
                @Override protected void onCommandSuccess(                ListResult<ContactDuplicatedProperty> result){
                  propertiesStore.add(result.getList());
                }
              }
,new LoadingMask(dedupeContactDialog));
            }
            @Override public void downloadImage(            String id,            final Image image){
              imageProvider.provideDataUrl(id,new SuccessCallback<String>(){
                @Override public void onSuccess(                String dataUrl){
                  image.setUrl(dataUrl);
                }
              }
);
            }
            @Override public void handleDedupeContact(            final Integer targetedContactId,            List<ContactDuplicatedProperty> selectedProperties){
              dispatch.execute(new DedupeContact(selectedProperties,targetedContactId),new CommandResultHandler<ContactDTO>(){
                @Override protected void onCommandSuccess(                ContactDTO targetedContactDTO){
                  dedupeContactDialog.hide();
                  eventBus.navigateRequest(Page.CONTACT_DASHBOARD.requestWith(RequestParameter.ID,targetedContactId));
                }
              }
);
            }
          }
);
          dedupeContactDialog.show();
        }
      }
);
    }
  }
;
}",0.995972781558117
35482,"@Override public void handleContactCreation(final ContactModelDTO contactModelDTO,final String login,final String firstName,final String familyName,final String organizationName,final OrgUnitDTO mainOrgUnit,final List<OrgUnitDTO> secondaryOrgUnits){
  CheckContactDuplication checkContactDuplication;
  if (contactModelDTO.getType() == ContactModelType.INDIVIDUAL) {
    checkContactDuplication=new CheckContactDuplication(null,null,familyName,firstName);
  }
 else {
    checkContactDuplication=new CheckContactDuplication(null,null,familyName,null);
  }
  dispatch.execute(checkContactDuplication,new AsyncCallback<ListResult<ContactDTO>>(){
    @Override public void onFailure(    Throwable caught){
      Log.error(""String_Node_Str"");
    }
    @Override public void onSuccess(    ListResult<ContactDTO> result){
      final HashMap<String,Object> properties=buildPropertyMap(contactModelDTO,login,firstName,familyName,organizationName,mainOrgUnit,secondaryOrgUnits);
      if (result == null || result.getSize() == 0) {
        createEntity(properties);
        return;
      }
      final DedupeContactDialog dedupeContactDialog=new DedupeContactDialog(true);
      dedupeContactDialog.getPossibleDuplicatesGrid().getStore().add(result.getList());
      dedupeContactDialog.getFirstStepMainButton().addSelectionListener(new SelectionListener<ButtonEvent>(){
        @Override public void componentSelected(        ButtonEvent ce){
          createEntity(properties);
          dedupeContactDialog.hide();
        }
      }
);
      dedupeContactDialog.setSecondStepHandler(new DedupeContactDialog.SecondStepHandler(){
        @Override public void initialize(        final Integer contactId,        final ListStore<ContactDuplicatedProperty> propertiesStore){
          dispatch.execute(new GetContactDuplicatedProperties(contactId,null,properties),new CommandResultHandler<ListResult<ContactDuplicatedProperty>>(){
            @Override protected void onCommandSuccess(            ListResult<ContactDuplicatedProperty> result){
              propertiesStore.add(result.getList());
            }
          }
,new LoadingMask(dedupeContactDialog));
        }
        @Override public void downloadImage(        String id,        final Image image){
          imageProvider.provideDataUrl(id,new SuccessCallback<String>(){
            @Override public void onSuccess(            String dataUrl){
              image.setUrl(dataUrl);
            }
          }
);
        }
        @Override public void handleDedupeContact(        final Integer targetedContactId,        List<ContactDuplicatedProperty> selectedProperties){
          dispatch.execute(new DedupeContact(selectedProperties,targetedContactId),new CommandResultHandler<ContactDTO>(){
            @Override protected void onCommandSuccess(            ContactDTO targetedContactDTO){
              dedupeContactDialog.hide();
              eventBus.navigateRequest(Page.CONTACT_DASHBOARD.requestWith(RequestParameter.ID,targetedContactId));
            }
          }
);
        }
      }
);
      dedupeContactDialog.show();
    }
  }
);
}","@Override public void handleContactCreation(final ContactModelDTO contactModelDTO,final String firstName,final String familyName,final String organizationName,final OrgUnitDTO mainOrgUnit,final List<OrgUnitDTO> secondaryOrgUnits){
  CheckContactDuplication checkContactDuplication;
  if (contactModelDTO.getType() == ContactModelType.INDIVIDUAL) {
    checkContactDuplication=new CheckContactDuplication(null,null,familyName,firstName);
  }
 else {
    checkContactDuplication=new CheckContactDuplication(null,null,familyName,null);
  }
  dispatch.execute(checkContactDuplication,new AsyncCallback<ListResult<ContactDTO>>(){
    @Override public void onFailure(    Throwable caught){
      Log.error(""String_Node_Str"");
    }
    @Override public void onSuccess(    ListResult<ContactDTO> result){
      final HashMap<String,Object> properties=buildPropertyMap(contactModelDTO,firstName,familyName,organizationName,mainOrgUnit,secondaryOrgUnits);
      if (result == null || result.getSize() == 0) {
        createEntity(properties);
        return;
      }
      final DedupeContactDialog dedupeContactDialog=new DedupeContactDialog(true);
      dedupeContactDialog.getPossibleDuplicatesGrid().getStore().add(result.getList());
      dedupeContactDialog.getFirstStepMainButton().addSelectionListener(new SelectionListener<ButtonEvent>(){
        @Override public void componentSelected(        ButtonEvent ce){
          createEntity(properties);
          dedupeContactDialog.hide();
        }
      }
);
      dedupeContactDialog.setSecondStepHandler(new DedupeContactDialog.SecondStepHandler(){
        @Override public void initialize(        final Integer contactId,        final ListStore<ContactDuplicatedProperty> propertiesStore){
          dispatch.execute(new GetContactDuplicatedProperties(contactId,null,properties),new CommandResultHandler<ListResult<ContactDuplicatedProperty>>(){
            @Override protected void onCommandSuccess(            ListResult<ContactDuplicatedProperty> result){
              propertiesStore.add(result.getList());
            }
          }
,new LoadingMask(dedupeContactDialog));
        }
        @Override public void downloadImage(        String id,        final Image image){
          imageProvider.provideDataUrl(id,new SuccessCallback<String>(){
            @Override public void onSuccess(            String dataUrl){
              image.setUrl(dataUrl);
            }
          }
);
        }
        @Override public void handleDedupeContact(        final Integer targetedContactId,        List<ContactDuplicatedProperty> selectedProperties){
          dispatch.execute(new DedupeContact(selectedProperties,targetedContactId),new CommandResultHandler<ContactDTO>(){
            @Override protected void onCommandSuccess(            ContactDTO targetedContactDTO){
              dedupeContactDialog.hide();
              eventBus.navigateRequest(Page.CONTACT_DASHBOARD.requestWith(RequestParameter.ID,targetedContactId));
            }
          }
);
        }
      }
);
      dedupeContactDialog.show();
    }
  }
);
}",0.9959553470312248
35483,"private void showContactCreator(){
  final Window window=new Window();
  window.setPlain(true);
  window.setModal(true);
  window.setBlinkModal(true);
  window.setLayout(new FitLayout());
  window.setSize(700,300);
  window.setHeadingHtml(I18N.CONSTANTS.createContactDialogTitle());
  final ComboBox<ContactModelDTO> contactModelComboBox=Forms.combobox(I18N.CONSTANTS.contactModelLabel(),true,ContactModelDTO.ID,ContactModelDTO.NAME);
  final TextField<String> loginField=Forms.text(I18N.CONSTANTS.contactLogin(),false);
  final TextField<String> firstNameField=Forms.text(I18N.CONSTANTS.contactFirstName(),false);
  final TextField<String> familyNameField=Forms.text(I18N.CONSTANTS.contactFamilyName(),false);
  final TextField<String> organizationNameField=Forms.text(I18N.CONSTANTS.contactOrganizationName(),false);
  firstNameField.setVisible(false);
  familyNameField.setVisible(false);
  organizationNameField.setVisible(false);
  final ComboBox<OrgUnitDTO> mainOrgUnitComboBox=Forms.combobox(I18N.CONSTANTS.contactMainOrgUnit(),false,OrgUnitDTO.ID,OrgUnitDTO.FULL_NAME);
  final ListComboBox<OrgUnitDTO> secondaryOrgUnitsComboBox=new ListComboBox<OrgUnitDTO>(OrgUnitDTO.ID,OrgUnitDTO.FULL_NAME);
  secondaryOrgUnitsComboBox.initComponent();
  final AdapterField secondaryOrgUnitsFieldAdapter=Forms.adapter(I18N.CONSTANTS.contactSecondaryOrgUnits(),secondaryOrgUnitsComboBox);
  secondaryOrgUnitsFieldAdapter.setVisible(false);
  dispatch.execute(new GetContactModels(null,Collections.<Integer>emptySet(),true),new AsyncCallback<ListResult<ContactModelDTO>>(){
    @Override public void onFailure(    Throwable caught){
      Log.error(""String_Node_Str"");
    }
    @Override public void onSuccess(    ListResult<ContactModelDTO> result){
      contactModelComboBox.getStore().add(result.getList());
    }
  }
);
  dispatch.execute(new GetOrgUnits(OrgUnitDTO.Mode.BASE),new AsyncCallback<ListResult<OrgUnitDTO>>(){
    @Override public void onFailure(    Throwable caught){
      Log.error(""String_Node_Str"");
    }
    @Override public void onSuccess(    ListResult<OrgUnitDTO> result){
      mainOrgUnitComboBox.getStore().add(result.getList());
      secondaryOrgUnitsComboBox.getAvailableValuesStore().add(result.getList());
    }
  }
);
  mainOrgUnitComboBox.addSelectionChangedListener(new SelectionChangedListener<OrgUnitDTO>(){
    @Override public void selectionChanged(    SelectionChangedEvent<OrgUnitDTO> se){
      if (se.getSelectedItem() == null) {
        secondaryOrgUnitsFieldAdapter.setVisible(false);
        return;
      }
      secondaryOrgUnitsFieldAdapter.setVisible(true);
    }
  }
);
  contactModelComboBox.addSelectionChangedListener(new SelectionChangedListener<ContactModelDTO>(){
    @Override public void selectionChanged(    SelectionChangedEvent<ContactModelDTO> event){
      ContactModelType currentType=null;
      if (event.getSelectedItem() != null) {
        currentType=event.getSelectedItem().getType();
      }
      firstNameField.setVisible(currentType == ContactModelType.INDIVIDUAL);
      familyNameField.setVisible(currentType == ContactModelType.INDIVIDUAL);
      organizationNameField.setVisible(currentType == ContactModelType.ORGANIZATION);
      firstNameField.setAllowBlank(currentType != ContactModelType.INDIVIDUAL);
      familyNameField.setAllowBlank(currentType != ContactModelType.INDIVIDUAL);
      organizationNameField.setAllowBlank(currentType != ContactModelType.ORGANIZATION);
    }
  }
);
  org.sigmah.client.ui.widget.button.Button button=Forms.button(I18N.CONSTANTS.createContact());
  final FormPanel formPanel=Forms.panel(200);
  formPanel.add(contactModelComboBox);
  formPanel.add(loginField);
  formPanel.add(firstNameField);
  formPanel.add(familyNameField);
  formPanel.add(organizationNameField);
  formPanel.add(mainOrgUnitComboBox);
  formPanel.add(secondaryOrgUnitsFieldAdapter);
  formPanel.getButtonBar().add(button);
  button.addSelectionListener(new SelectionListener<ButtonEvent>(){
    @Override public void componentSelected(    ButtonEvent event){
      if (!formPanel.isValid()) {
        return;
      }
      createContactHandler.handleContactCreation(contactModelComboBox.getValue(),loginField.getValue(),firstNameField.getValue(),familyNameField.getValue(),organizationNameField.getValue(),mainOrgUnitComboBox.getValue(),secondaryOrgUnitsComboBox.getListStore().getModels());
      window.hide();
    }
  }
);
  window.add(formPanel);
  window.show();
}","private void showContactCreator(){
  final Window window=new Window();
  window.setPlain(true);
  window.setModal(true);
  window.setBlinkModal(true);
  window.setLayout(new FitLayout());
  window.setSize(700,300);
  window.setHeadingHtml(I18N.CONSTANTS.createContactDialogTitle());
  final ComboBox<ContactModelDTO> contactModelComboBox=Forms.combobox(I18N.CONSTANTS.contactModelLabel(),true,ContactModelDTO.ID,ContactModelDTO.NAME);
  final TextField<String> firstNameField=Forms.text(I18N.CONSTANTS.contactFirstName(),false);
  final TextField<String> familyNameField=Forms.text(I18N.CONSTANTS.contactFamilyName(),false);
  final TextField<String> organizationNameField=Forms.text(I18N.CONSTANTS.contactOrganizationName(),false);
  firstNameField.setVisible(false);
  familyNameField.setVisible(false);
  organizationNameField.setVisible(false);
  final ComboBox<OrgUnitDTO> mainOrgUnitComboBox=Forms.combobox(I18N.CONSTANTS.contactMainOrgUnit(),false,OrgUnitDTO.ID,OrgUnitDTO.FULL_NAME);
  final ListComboBox<OrgUnitDTO> secondaryOrgUnitsComboBox=new ListComboBox<OrgUnitDTO>(OrgUnitDTO.ID,OrgUnitDTO.FULL_NAME);
  secondaryOrgUnitsComboBox.initComponent();
  final AdapterField secondaryOrgUnitsFieldAdapter=Forms.adapter(I18N.CONSTANTS.contactSecondaryOrgUnits(),secondaryOrgUnitsComboBox);
  secondaryOrgUnitsFieldAdapter.setVisible(false);
  dispatch.execute(new GetContactModels(null,Collections.<Integer>emptySet(),true),new AsyncCallback<ListResult<ContactModelDTO>>(){
    @Override public void onFailure(    Throwable caught){
      Log.error(""String_Node_Str"");
    }
    @Override public void onSuccess(    ListResult<ContactModelDTO> result){
      contactModelComboBox.getStore().add(result.getList());
    }
  }
);
  dispatch.execute(new GetOrgUnits(OrgUnitDTO.Mode.WITH_TREE),new AsyncCallback<ListResult<OrgUnitDTO>>(){
    @Override public void onFailure(    Throwable caught){
      Log.error(""String_Node_Str"");
    }
    @Override public void onSuccess(    ListResult<OrgUnitDTO> result){
      for (      OrgUnitDTO orgUnitDTO : result.getData()) {
        fillOrgUnitsComboboxes(orgUnitDTO,mainOrgUnitComboBox,secondaryOrgUnitsComboBox);
      }
    }
  }
);
  mainOrgUnitComboBox.addSelectionChangedListener(new SelectionChangedListener<OrgUnitDTO>(){
    @Override public void selectionChanged(    SelectionChangedEvent<OrgUnitDTO> se){
      if (se.getSelectedItem() == null) {
        secondaryOrgUnitsFieldAdapter.setVisible(false);
        return;
      }
      secondaryOrgUnitsFieldAdapter.setVisible(true);
    }
  }
);
  contactModelComboBox.addSelectionChangedListener(new SelectionChangedListener<ContactModelDTO>(){
    @Override public void selectionChanged(    SelectionChangedEvent<ContactModelDTO> event){
      ContactModelType currentType=null;
      if (event.getSelectedItem() != null) {
        currentType=event.getSelectedItem().getType();
      }
      firstNameField.setVisible(currentType == ContactModelType.INDIVIDUAL);
      familyNameField.setVisible(currentType == ContactModelType.INDIVIDUAL);
      organizationNameField.setVisible(currentType == ContactModelType.ORGANIZATION);
      firstNameField.setAllowBlank(currentType != ContactModelType.INDIVIDUAL);
      familyNameField.setAllowBlank(currentType != ContactModelType.INDIVIDUAL);
      organizationNameField.setAllowBlank(currentType != ContactModelType.ORGANIZATION);
    }
  }
);
  org.sigmah.client.ui.widget.button.Button button=Forms.button(I18N.CONSTANTS.createContact());
  final FormPanel formPanel=Forms.panel(200);
  formPanel.add(contactModelComboBox);
  formPanel.add(firstNameField);
  formPanel.add(familyNameField);
  formPanel.add(organizationNameField);
  formPanel.add(mainOrgUnitComboBox);
  formPanel.add(secondaryOrgUnitsFieldAdapter);
  formPanel.getButtonBar().add(button);
  button.addSelectionListener(new SelectionListener<ButtonEvent>(){
    @Override public void componentSelected(    ButtonEvent event){
      if (!formPanel.isValid()) {
        return;
      }
      createContactHandler.handleContactCreation(contactModelComboBox.getValue(),firstNameField.getValue(),familyNameField.getValue(),organizationNameField.getValue(),mainOrgUnitComboBox.getValue(),secondaryOrgUnitsComboBox.getListStore().getModels());
      window.hide();
    }
  }
);
  window.add(formPanel);
  window.show();
}",0.9399727148703956
35484,"@Override public void onSuccess(ListResult<OrgUnitDTO> result){
  mainOrgUnitComboBox.getStore().add(result.getList());
  secondaryOrgUnitsComboBox.getAvailableValuesStore().add(result.getList());
}","@Override public void onSuccess(ListResult<OrgUnitDTO> result){
  for (  OrgUnitDTO orgUnitDTO : result.getData()) {
    fillOrgUnitsComboboxes(orgUnitDTO,mainOrgUnitComboBox,secondaryOrgUnitsComboBox);
  }
}",0.3990147783251231
35485,"/** 
 * Loads the presenter with the org unit details.
 * @param details The details.
 */
private void load(OrgUnitDetailsDTO details){
  computationTriggerManager.prepareForOrgUnit(getOrgUnit());
  view.getContentOrgUnitDetailsPanel().removeAll();
  final LayoutDTO layout=details.getLayout();
  int count=0;
  for (  final LayoutGroupDTO groupDTO : layout.getGroups()) {
    count+=groupDTO.getConstraints().size();
  }
  if (count == 0) {
    view.setMainPanelWidget(new Label(I18N.CONSTANTS.projectDetailsNoDetails()));
    return;
  }
  final Grid gridLayout=new Grid(layout.getRowsCount(),layout.getColumnsCount());
  gridLayout.setCellPadding(0);
  gridLayout.setCellSpacing(0);
  gridLayout.setWidth(""String_Node_Str"");
  final DispatchQueue queue=new DispatchQueue(dispatch,true);
  for (  final LayoutGroupDTO groupLayout : layout.getGroups()) {
    if (!groupLayout.getHasIterations()) {
      FieldSet fieldSet=createGroupLayoutFieldSet(getOrgUnit(),groupLayout,queue,null,null,null);
      gridLayout.setWidget(groupLayout.getRow(),groupLayout.getColumn(),fieldSet);
      continue;
    }
    final FieldSet fieldSet=(FieldSet)groupLayout.getWidget();
    gridLayout.setWidget(groupLayout.getRow(),groupLayout.getColumn(),fieldSet);
    final IterableGroupPanel tabPanel=Forms.iterableGroupPanel(dispatch,groupLayout,getOrgUnit(),ProfileUtils.isGranted(auth(),GlobalPermissionEnum.CREATE_ITERATIONS));
    tabPanel.setDelegate(this);
    fieldSet.add(tabPanel);
    tabPanel.setAutoHeight(true);
    tabPanel.setAutoWidth(true);
    tabPanel.setTabScroll(true);
    tabPanel.addStyleName(""String_Node_Str"");
    tabPanel.setBorders(true);
    tabPanel.setBodyBorder(false);
    GetLayoutGroupIterations getIterations=new GetLayoutGroupIterations(groupLayout.getId(),getOrgUnit().getId(),-1);
    queue.add(getIterations,new CommandResultHandler<ListResult<LayoutGroupIterationDTO>>(){
      @Override public void onCommandFailure(      final Throwable throwable){
        if (Log.isErrorEnabled()) {
          Log.error(""String_Node_Str"",throwable);
        }
        throw new RuntimeException(throwable);
      }
      @Override protected void onCommandSuccess(      ListResult<LayoutGroupIterationDTO> result){
        DispatchQueue iterationsQueue=new DispatchQueue(dispatch,true);
        for (        final LayoutGroupIterationDTO iteration : result.getList()) {
          final IterableGroupItem tab=new IterableGroupItem(tabPanel,iteration.getId(),iteration.getName());
          tabPanel.addIterationTab(tab);
          Layout tabLayout=Layouts.fitLayout();
          tab.setLayout(tabLayout);
          FieldSet tabSet=createGroupLayoutFieldSet(getOrgUnit(),groupLayout,iterationsQueue,iteration == null ? null : iteration.getId(),tabPanel,tab);
          tab.add(tabSet);
        }
        iterationsQueue.start();
        if (tabPanel.getItemCount() > 0) {
          tabPanel.setSelection(tabPanel.getItem(0));
        }
      }
    }
,new LoadingMask(view.getContentOrgUnitDetailsPanel()));
    fieldSet.layout();
  }
  queue.start();
  view.setMainPanelWidget(gridLayout);
}","/** 
 * Loads the presenter with the org unit details.
 * @param details The details.
 */
private void load(OrgUnitDetailsDTO details){
  computationTriggerManager.prepareForOrgUnit(getOrgUnit());
  view.getContentOrgUnitDetailsPanel().removeAll();
  final LayoutDTO layout=details.getLayout();
  int count=0;
  for (  final LayoutGroupDTO groupDTO : layout.getGroups()) {
    count+=groupDTO.getConstraints().size();
  }
  if (count == 0) {
    view.setMainPanelWidget(new Label(I18N.CONSTANTS.projectDetailsNoDetails()));
    return;
  }
  final Grid gridLayout=new Grid(layout.getRowsCount(),layout.getColumnsCount());
  gridLayout.setCellPadding(0);
  gridLayout.setCellSpacing(0);
  gridLayout.setWidth(""String_Node_Str"");
  final DispatchQueue queue=new DispatchQueue(dispatch,true);
  for (  final LayoutGroupDTO groupLayout : layout.getGroups()) {
    if (!groupLayout.getHasIterations()) {
      FieldSet fieldSet=createGroupLayoutFieldSet(getOrgUnit(),groupLayout,queue,null,null,null);
      fieldSet.setHeadingHtml(groupLayout.getTitle());
      fieldSet.setCollapsible(true);
      fieldSet.setBorders(true);
      gridLayout.setWidget(groupLayout.getRow(),groupLayout.getColumn(),fieldSet);
      continue;
    }
    final FieldSet fieldSet=(FieldSet)groupLayout.getWidget();
    gridLayout.setWidget(groupLayout.getRow(),groupLayout.getColumn(),fieldSet);
    final IterableGroupPanel tabPanel=Forms.iterableGroupPanel(dispatch,groupLayout,getOrgUnit(),ProfileUtils.isGranted(auth(),GlobalPermissionEnum.CREATE_ITERATIONS));
    tabPanel.setDelegate(this);
    fieldSet.add(tabPanel);
    tabPanel.setAutoHeight(true);
    tabPanel.setAutoWidth(true);
    tabPanel.setTabScroll(true);
    tabPanel.addStyleName(""String_Node_Str"");
    tabPanel.setBorders(true);
    tabPanel.setBodyBorder(false);
    GetLayoutGroupIterations getIterations=new GetLayoutGroupIterations(groupLayout.getId(),getOrgUnit().getId(),-1);
    queue.add(getIterations,new CommandResultHandler<ListResult<LayoutGroupIterationDTO>>(){
      @Override public void onCommandFailure(      final Throwable throwable){
        if (Log.isErrorEnabled()) {
          Log.error(""String_Node_Str"",throwable);
        }
        throw new RuntimeException(throwable);
      }
      @Override protected void onCommandSuccess(      ListResult<LayoutGroupIterationDTO> result){
        DispatchQueue iterationsQueue=new DispatchQueue(dispatch,true);
        for (        final LayoutGroupIterationDTO iteration : result.getList()) {
          final IterableGroupItem tab=new IterableGroupItem(tabPanel,iteration.getId(),iteration.getName());
          tabPanel.addIterationTab(tab);
          Layout tabLayout=Layouts.fitLayout();
          tab.setLayout(tabLayout);
          FieldSet tabSet=createGroupLayoutFieldSet(getOrgUnit(),groupLayout,iterationsQueue,iteration == null ? null : iteration.getId(),tabPanel,tab);
          tab.add(tabSet);
        }
        iterationsQueue.start();
        if (tabPanel.getItemCount() > 0) {
          tabPanel.setSelection(tabPanel.getItem(0));
        }
      }
    }
,new LoadingMask(view.getContentOrgUnitDetailsPanel()));
    fieldSet.layout();
  }
  queue.start();
  view.setMainPanelWidget(gridLayout);
}",0.9802434012960328
35486,"/** 
 * Loads the presenter with the given project   {@code details}.
 * @param details The project details.
 */
private void load(final ProjectDetailsDTO details){
  computationTriggerManager.prepareForProject(getProject());
  view.getMainPanel().removeAll();
  final LayoutDTO layout=details.getLayout();
  int count=0;
  for (  final LayoutGroupDTO groupDTO : layout.getGroups()) {
    count+=groupDTO.getConstraints().size();
  }
  if (count == 0) {
    final Label label=new Label(I18N.CONSTANTS.projectDetailsNoDetails());
    label.addStyleName(STYLE_PROJECT_LABEL_10);
    view.setMainPanelWidget(label);
    return;
  }
  final Grid gridLayout=(Grid)layout.getWidget();
  final DispatchQueue queue=new DispatchQueue(dispatch,true);
  for (  final LayoutGroupDTO groupLayout : layout.getGroups()) {
    if (!groupLayout.getHasIterations()) {
      FieldSet fieldSet=createGroupLayoutFieldSet(getProject(),groupLayout,queue,null,null,null);
      gridLayout.setWidget(groupLayout.getRow(),groupLayout.getColumn(),fieldSet);
      continue;
    }
    final FieldSet fieldSet=(FieldSet)groupLayout.getWidget();
    gridLayout.setWidget(groupLayout.getRow(),groupLayout.getColumn(),fieldSet);
    final IterableGroupPanel tabPanel=Forms.iterableGroupPanel(dispatch,groupLayout,getProject(),ProfileUtils.isGranted(auth(),GlobalPermissionEnum.CREATE_ITERATIONS) && getProject().getCurrentAmendment() == null);
    tabPanel.setDelegate(this);
    fieldSet.add(tabPanel);
    tabPanel.setAutoHeight(true);
    tabPanel.setAutoWidth(true);
    tabPanel.setTabScroll(true);
    tabPanel.addStyleName(""String_Node_Str"");
    tabPanel.setBorders(true);
    tabPanel.setBodyBorder(false);
    Integer amendmentId;
    if (getProject().getCurrentAmendment() != null) {
      amendmentId=getProject().getCurrentAmendment().getId();
    }
 else {
      amendmentId=-1;
    }
    GetLayoutGroupIterations getIterations=new GetLayoutGroupIterations(groupLayout.getId(),getProject().getId(),amendmentId);
    queue.add(getIterations,new CommandResultHandler<ListResult<LayoutGroupIterationDTO>>(){
      @Override public void onCommandFailure(      final Throwable throwable){
        if (Log.isErrorEnabled()) {
          Log.error(""String_Node_Str"",throwable);
        }
        throw new RuntimeException(throwable);
      }
      @Override protected void onCommandSuccess(      ListResult<LayoutGroupIterationDTO> result){
        DispatchQueue iterationsQueue=new DispatchQueue(dispatch,true);
        for (        final LayoutGroupIterationDTO iteration : result.getList()) {
          final IterableGroupItem tab=new IterableGroupItem(tabPanel,iteration.getId(),iteration.getName());
          tabPanel.addIterationTab(tab);
          Layout tabLayout=Layouts.fitLayout();
          tab.setLayout(tabLayout);
          FieldSet tabSet=createGroupLayoutFieldSet(getProject(),groupLayout,iterationsQueue,iteration == null ? null : iteration.getId(),tabPanel,tab);
          tab.add(tabSet);
        }
        iterationsQueue.start();
        if (tabPanel.getItemCount() > 0) {
          tabPanel.setSelection(tabPanel.getItem(0));
        }
      }
    }
,new LoadingMask(view.getMainPanel()));
    fieldSet.layout();
  }
  queue.start();
  view.setMainPanelWidget(gridLayout);
}","/** 
 * Loads the presenter with the given project   {@code details}.
 * @param details The project details.
 */
private void load(final ProjectDetailsDTO details){
  computationTriggerManager.prepareForProject(getProject());
  view.getMainPanel().removeAll();
  final LayoutDTO layout=details.getLayout();
  int count=0;
  for (  final LayoutGroupDTO groupDTO : layout.getGroups()) {
    count+=groupDTO.getConstraints().size();
  }
  if (count == 0) {
    final Label label=new Label(I18N.CONSTANTS.projectDetailsNoDetails());
    label.addStyleName(STYLE_PROJECT_LABEL_10);
    view.setMainPanelWidget(label);
    return;
  }
  final Grid gridLayout=(Grid)layout.getWidget();
  final DispatchQueue queue=new DispatchQueue(dispatch,true);
  for (  final LayoutGroupDTO groupLayout : layout.getGroups()) {
    if (!groupLayout.getHasIterations()) {
      FieldSet fieldSet=createGroupLayoutFieldSet(getProject(),groupLayout,queue,null,null,null);
      fieldSet.setHeadingHtml(groupLayout.getTitle());
      fieldSet.setCollapsible(true);
      fieldSet.setBorders(true);
      gridLayout.setWidget(groupLayout.getRow(),groupLayout.getColumn(),fieldSet);
      continue;
    }
    final FieldSet fieldSet=(FieldSet)groupLayout.getWidget();
    gridLayout.setWidget(groupLayout.getRow(),groupLayout.getColumn(),fieldSet);
    final IterableGroupPanel tabPanel=Forms.iterableGroupPanel(dispatch,groupLayout,getProject(),ProfileUtils.isGranted(auth(),GlobalPermissionEnum.CREATE_ITERATIONS) && getProject().getCurrentAmendment() == null);
    tabPanel.setDelegate(this);
    fieldSet.add(tabPanel);
    tabPanel.setAutoHeight(true);
    tabPanel.setAutoWidth(true);
    tabPanel.setTabScroll(true);
    tabPanel.addStyleName(""String_Node_Str"");
    tabPanel.setBorders(true);
    tabPanel.setBodyBorder(false);
    Integer amendmentId;
    if (getProject().getCurrentAmendment() != null) {
      amendmentId=getProject().getCurrentAmendment().getId();
    }
 else {
      amendmentId=-1;
    }
    GetLayoutGroupIterations getIterations=new GetLayoutGroupIterations(groupLayout.getId(),getProject().getId(),amendmentId);
    queue.add(getIterations,new CommandResultHandler<ListResult<LayoutGroupIterationDTO>>(){
      @Override public void onCommandFailure(      final Throwable throwable){
        if (Log.isErrorEnabled()) {
          Log.error(""String_Node_Str"",throwable);
        }
        throw new RuntimeException(throwable);
      }
      @Override protected void onCommandSuccess(      ListResult<LayoutGroupIterationDTO> result){
        DispatchQueue iterationsQueue=new DispatchQueue(dispatch,true);
        for (        final LayoutGroupIterationDTO iteration : result.getList()) {
          final IterableGroupItem tab=new IterableGroupItem(tabPanel,iteration.getId(),iteration.getName());
          tabPanel.addIterationTab(tab);
          Layout tabLayout=Layouts.fitLayout();
          tab.setLayout(tabLayout);
          FieldSet tabSet=createGroupLayoutFieldSet(getProject(),groupLayout,iterationsQueue,iteration == null ? null : iteration.getId(),tabPanel,tab);
          tab.add(tabSet);
        }
        iterationsQueue.start();
        if (tabPanel.getItemCount() > 0) {
          tabPanel.setSelection(tabPanel.getItem(0));
        }
      }
    }
,new LoadingMask(view.getMainPanel()));
    fieldSet.layout();
  }
  queue.start();
  view.setMainPanelWidget(gridLayout);
}",0.9812621795832708
35487,"/** 
 * Loads a project phase into the selected tab panel.
 * @param phaseDTO The phase to display.
 */
private void loadPhaseOnTab(final PhaseDTO phaseDTO){
  final boolean phaseIsEnded=isEndedPhase(phaseDTO);
  setCurrentDisplayedPhase(phaseDTO);
  currentPhaseRequiredElements.clear();
  valueChanges.clear();
  for (  final TabItem tab : view.getTabPanelPhases().getItems()) {
    tab.removeAll();
  }
  view.getPanelSelectedPhase().removeAll();
  view.getGridRequiredElements().getStore().removeAll();
  view.getTabPanelPhases().getSelectedItem().add(view.getPanelProjectModel());
  requiredElementsSet.clear();
  final Grid layoutGrid=(Grid)phaseDTO.getPhaseModel().getWidget();
  layoutGrid.setStyleName(""String_Node_Str"");
  view.getPanelSelectedPhase().add(layoutGrid);
  final DispatchQueue queue=new DispatchQueue(dispatch,true){
    @Override protected void onComplete(){
      injector.getProjectDashboardPresenter().getView().layoutView();
      view.layout();
      Profiler.INSTANCE.endScenario(Scenario.OPEN_PROJECT);
    }
  }
;
  final ProjectDTO project=getCurrentProject();
  computationTriggerManager.prepareForProject(project);
  for (  final LayoutGroupDTO groupDTO : phaseDTO.getPhaseModel().getLayout().getGroups()) {
    if (!groupDTO.getHasIterations()) {
      FieldSet fieldSet=createGroupLayoutFieldSet(getCurrentProject(),groupDTO,queue,null,null,null);
      layoutGrid.setWidget(groupDTO.getRow(),groupDTO.getColumn(),fieldSet);
      continue;
    }
    final FieldSet fieldSet=(FieldSet)groupDTO.getWidget();
    layoutGrid.setWidget(groupDTO.getRow(),groupDTO.getColumn(),fieldSet);
    final IterableGroupPanel tabPanel=Forms.iterableGroupPanel(dispatch,groupDTO,getCurrentProject(),ProfileUtils.isGranted(auth(),GlobalPermissionEnum.CREATE_ITERATIONS) && getCurrentProject().getCurrentAmendment() == null);
    tabPanel.setDelegate(this);
    fieldSet.add(tabPanel);
    tabPanel.setAutoHeight(true);
    tabPanel.setAutoWidth(true);
    tabPanel.setTabScroll(true);
    tabPanel.addStyleName(""String_Node_Str"");
    tabPanel.setBorders(true);
    tabPanel.setBodyBorder(false);
    Integer amendmentId;
    if (getCurrentProject().getCurrentAmendment() != null) {
      amendmentId=getCurrentProject().getCurrentAmendment().getId();
    }
 else {
      amendmentId=-1;
    }
    GetLayoutGroupIterations getIterations=new GetLayoutGroupIterations(groupDTO.getId(),getCurrentProject().getId(),amendmentId);
    queue.add(getIterations,new CommandResultHandler<ListResult<LayoutGroupIterationDTO>>(){
      @Override public void onCommandFailure(      final Throwable throwable){
        if (Log.isErrorEnabled()) {
          Log.error(""String_Node_Str"",throwable);
        }
        throw new RuntimeException(throwable);
      }
      @Override protected void onCommandSuccess(      ListResult<LayoutGroupIterationDTO> result){
        DispatchQueue iterationsQueue=new DispatchQueue(dispatch,true);
        for (        final LayoutGroupIterationDTO iteration : result.getList()) {
          final IterableGroupItem tab=new IterableGroupItem(tabPanel,iteration.getId(),iteration.getName());
          tabPanel.addIterationTab(tab);
          Layout tabLayout=Layouts.fitLayout();
          tab.setLayout(tabLayout);
          FieldSet tabSet=createGroupLayoutFieldSet(getCurrentProject(),groupDTO,iterationsQueue,iteration == null ? null : iteration.getId(),tabPanel,tab);
          tab.add(tabSet);
        }
        iterationsQueue.start();
        if (tabPanel.getItemCount() > 0) {
          tabPanel.setSelection(tabPanel.getItem(0));
        }
      }
    }
,new LoadingMask(view.getTabPanelPhases()));
    fieldSet.layout();
  }
  queue.start();
}","/** 
 * Loads a project phase into the selected tab panel.
 * @param phaseDTO The phase to display.
 */
private void loadPhaseOnTab(final PhaseDTO phaseDTO){
  final boolean phaseIsEnded=isEndedPhase(phaseDTO);
  setCurrentDisplayedPhase(phaseDTO);
  currentPhaseRequiredElements.clear();
  valueChanges.clear();
  for (  final TabItem tab : view.getTabPanelPhases().getItems()) {
    tab.removeAll();
  }
  view.getPanelSelectedPhase().removeAll();
  view.getGridRequiredElements().getStore().removeAll();
  view.getTabPanelPhases().getSelectedItem().add(view.getPanelProjectModel());
  requiredElementsSet.clear();
  final Grid layoutGrid=(Grid)phaseDTO.getPhaseModel().getWidget();
  layoutGrid.setStyleName(""String_Node_Str"");
  view.getPanelSelectedPhase().add(layoutGrid);
  final DispatchQueue queue=new DispatchQueue(dispatch,true){
    @Override protected void onComplete(){
      injector.getProjectDashboardPresenter().getView().layoutView();
      view.layout();
      Profiler.INSTANCE.endScenario(Scenario.OPEN_PROJECT);
    }
  }
;
  final ProjectDTO project=getCurrentProject();
  computationTriggerManager.prepareForProject(project);
  for (  final LayoutGroupDTO groupDTO : phaseDTO.getPhaseModel().getLayout().getGroups()) {
    if (!groupDTO.getHasIterations()) {
      FieldSet fieldSet=createGroupLayoutFieldSet(getCurrentProject(),groupDTO,queue,null,null,null);
      fieldSet.setHeadingHtml(groupDTO.getTitle());
      fieldSet.setCollapsible(true);
      fieldSet.setBorders(true);
      layoutGrid.setWidget(groupDTO.getRow(),groupDTO.getColumn(),fieldSet);
      continue;
    }
    final FieldSet fieldSet=(FieldSet)groupDTO.getWidget();
    layoutGrid.setWidget(groupDTO.getRow(),groupDTO.getColumn(),fieldSet);
    final IterableGroupPanel tabPanel=Forms.iterableGroupPanel(dispatch,groupDTO,getCurrentProject(),ProfileUtils.isGranted(auth(),GlobalPermissionEnum.CREATE_ITERATIONS) && getCurrentProject().getCurrentAmendment() == null);
    tabPanel.setDelegate(this);
    fieldSet.add(tabPanel);
    tabPanel.setAutoHeight(true);
    tabPanel.setAutoWidth(true);
    tabPanel.setTabScroll(true);
    tabPanel.addStyleName(""String_Node_Str"");
    tabPanel.setBorders(true);
    tabPanel.setBodyBorder(false);
    Integer amendmentId;
    if (getCurrentProject().getCurrentAmendment() != null) {
      amendmentId=getCurrentProject().getCurrentAmendment().getId();
    }
 else {
      amendmentId=-1;
    }
    GetLayoutGroupIterations getIterations=new GetLayoutGroupIterations(groupDTO.getId(),getCurrentProject().getId(),amendmentId);
    queue.add(getIterations,new CommandResultHandler<ListResult<LayoutGroupIterationDTO>>(){
      @Override public void onCommandFailure(      final Throwable throwable){
        if (Log.isErrorEnabled()) {
          Log.error(""String_Node_Str"",throwable);
        }
        throw new RuntimeException(throwable);
      }
      @Override protected void onCommandSuccess(      ListResult<LayoutGroupIterationDTO> result){
        DispatchQueue iterationsQueue=new DispatchQueue(dispatch,true);
        for (        final LayoutGroupIterationDTO iteration : result.getList()) {
          final IterableGroupItem tab=new IterableGroupItem(tabPanel,iteration.getId(),iteration.getName());
          tabPanel.addIterationTab(tab);
          Layout tabLayout=Layouts.fitLayout();
          tab.setLayout(tabLayout);
          FieldSet tabSet=createGroupLayoutFieldSet(getCurrentProject(),groupDTO,iterationsQueue,iteration == null ? null : iteration.getId(),tabPanel,tab);
          tab.add(tabSet);
        }
        iterationsQueue.start();
        if (tabPanel.getItemCount() > 0) {
          tabPanel.setSelection(tabPanel.getItem(0));
        }
      }
    }
,new LoadingMask(view.getTabPanelPhases()));
    fieldSet.layout();
  }
  queue.start();
}",0.9837593184238552
35488,"private void initComponent(){
  this.setPlain(true);
  this.setModal(true);
  this.setBlinkModal(true);
  this.setLayout(new FitLayout());
  this.setSize(650,300);
  this.setHeadingHtml(I18N.CONSTANTS.dedupeContactWindowTitle());
  possibleDuplicatesGrid=generatePossibleDuplicatesGrid();
  firstStepMainButton=generateFirstStepMainButton();
  LayoutContainer firstStepButtonsContainer=Layouts.border();
  firstStepButtonsContainer.add(firstStepMainButton,Layouts.borderLayoutData(Style.LayoutRegion.EAST));
  LayoutContainer firstStepContainer=Layouts.border();
  firstStepContainer.setScrollMode(Style.Scroll.AUTOY);
  firstStepContainer.add(generateMessageLabel(),Layouts.borderLayoutData(Style.LayoutRegion.NORTH,50f,Layouts.Margin.HALF_TOP,Layouts.Margin.HALF_RIGHT,Layouts.Margin.HALF_BOTTOM,Layouts.Margin.HALF_LEFT));
  firstStepContainer.add(possibleDuplicatesGrid,Layouts.borderLayoutData(Style.LayoutRegion.CENTER,Layouts.Margin.HALF_TOP,Layouts.Margin.HALF_BOTTOM));
  firstStepContainer.add(firstStepButtonsContainer,Layouts.borderLayoutData(Style.LayoutRegion.SOUTH,20f,Layouts.Margin.HALF_TOP,Layouts.Margin.HALF_RIGHT,Layouts.Margin.BOTTOM,Layouts.Margin.DOUBLE_LEFT));
  duplicatedPropertiesGrid=generateDuplicatedPropertiesGrid();
  secondStepMainButton=generateFirstStepMainButton();
  LayoutContainer secondStepButtonsContainer=Layouts.border();
  secondStepButtonsContainer.add(secondStepMainButton,Layouts.borderLayoutData(Style.LayoutRegion.EAST));
  secondStepContainer=Layouts.border();
  secondStepContainer.setScrollMode(Style.Scroll.AUTOY);
  secondStepContainer.add(duplicatedPropertiesGrid,Layouts.borderLayoutData(Style.LayoutRegion.CENTER,Layouts.Margin.HALF_TOP,Layouts.Margin.HALF_BOTTOM));
  secondStepContainer.add(secondStepButtonsContainer,Layouts.borderLayoutData(Style.LayoutRegion.SOUTH,20f,Layouts.Margin.HALF_TOP,Layouts.Margin.HALF_RIGHT,Layouts.Margin.BOTTOM,Layouts.Margin.DOUBLE_LEFT));
  cardLayout=new CardLayout();
  LayoutContainer mainContainer=new LayoutContainer(cardLayout);
  mainContainer.add(firstStepContainer);
  mainContainer.add(secondStepContainer);
  cardLayout.setActiveItem(firstStepContainer);
  add(mainContainer);
}","private void initComponent(){
  this.setPlain(true);
  this.setModal(true);
  this.setBlinkModal(true);
  this.setLayout(new FitLayout());
  this.setSize(650,300);
  this.setHeadingHtml(I18N.CONSTANTS.dedupeContactWindowTitle());
  possibleDuplicatesGrid=generatePossibleDuplicatesGrid();
  firstStepMainButton=generateFirstStepMainButton();
  LayoutContainer firstStepButtonsContainer=Layouts.border();
  firstStepButtonsContainer.add(firstStepMainButton,Layouts.borderLayoutData(Style.LayoutRegion.EAST));
  LayoutContainer firstStepContainer=Layouts.border();
  firstStepContainer.setScrollMode(Style.Scroll.AUTOY);
  firstStepContainer.add(generateMessageLabel(),Layouts.borderLayoutData(Style.LayoutRegion.NORTH,50f,Layouts.Margin.HALF_TOP,Layouts.Margin.HALF_RIGHT,Layouts.Margin.HALF_BOTTOM,Layouts.Margin.HALF_LEFT));
  firstStepContainer.add(possibleDuplicatesGrid,Layouts.borderLayoutData(Style.LayoutRegion.CENTER,Layouts.Margin.HALF_TOP,Layouts.Margin.HALF_BOTTOM));
  firstStepContainer.add(firstStepButtonsContainer,Layouts.borderLayoutData(Style.LayoutRegion.SOUTH,20f,Layouts.Margin.HALF_TOP,Layouts.Margin.HALF_RIGHT,Layouts.Margin.BOTTOM,Layouts.Margin.DOUBLE_LEFT));
  duplicatedPropertiesGrid=generateDuplicatedPropertiesGrid();
  secondStepMainButton=generateSecondStepMainButton();
  LayoutContainer secondStepButtonsContainer=Layouts.border();
  secondStepButtonsContainer.add(secondStepMainButton,Layouts.borderLayoutData(Style.LayoutRegion.EAST));
  secondStepContainer=Layouts.border();
  secondStepContainer.setScrollMode(Style.Scroll.AUTOY);
  secondStepContainer.add(duplicatedPropertiesGrid,Layouts.borderLayoutData(Style.LayoutRegion.CENTER,Layouts.Margin.HALF_TOP,Layouts.Margin.HALF_BOTTOM));
  secondStepContainer.add(secondStepButtonsContainer,Layouts.borderLayoutData(Style.LayoutRegion.SOUTH,20f,Layouts.Margin.HALF_TOP,Layouts.Margin.HALF_RIGHT,Layouts.Margin.BOTTOM,Layouts.Margin.DOUBLE_LEFT));
  cardLayout=new CardLayout();
  LayoutContainer mainContainer=new LayoutContainer(cardLayout);
  mainContainer.add(firstStepContainer);
  mainContainer.add(secondStepContainer);
  cardLayout.setActiveItem(firstStepContainer);
  add(mainContainer);
}",0.9974822613870452
35489,"private Button generateFirstStepMainButton(){
  Button button;
  if (createContact) {
    button=new Button(I18N.CONSTANTS.dedupeContactCreateNewButton());
  }
 else {
    button=new Button(I18N.CONSTANTS.dedupeContactUpdateIndependently());
  }
  button.addSelectionListener(new SelectionListener<ButtonEvent>(){
    @Override public void componentSelected(    ButtonEvent ce){
      secondStepHandler.handleDedupeContact(selectedContact.getId(),selectedProperties);
    }
  }
);
  return button;
}","private Button generateFirstStepMainButton(){
  Button button;
  if (createContact) {
    button=new Button(I18N.CONSTANTS.dedupeContactCreateNewButton());
  }
 else {
    button=new Button(I18N.CONSTANTS.dedupeContactUpdateIndependently());
  }
  return button;
}",0.6526867627785059
35490,"@Override public void componentSelected(ButtonEvent event){
  if (!formPanel.isValid()) {
    return;
  }
  createContactHandler.handleContactCreation(contactModelComboBox.getValue(),loginField.getValue(),firstNameField.getValue(),familyNameField.getValue(),organizationNameField.getValue(),mainOrgUnitComboBox.getValue(),secondaryOrgUnitsComboBox.getListStore().getModels());
  window.hide();
}","@Override public void componentSelected(ButtonEvent event){
  if (!formPanel.isValid()) {
    return;
  }
  createContactHandler.handleContactCreation(contactModelComboBox.getValue(),firstNameField.getValue(),familyNameField.getValue(),organizationNameField.getValue(),mainOrgUnitComboBox.getValue(),secondaryOrgUnitsComboBox.getListStore().getModels());
  window.hide();
}",0.9713541666666666
35491,"void handleContactCreation(ContactModelDTO contactModelDTO,String login,String firstName,String familyName,String organizationName,OrgUnitDTO mainOrgUnit,List<OrgUnitDTO> secondaryOrgUnits);","void handleContactCreation(ContactModelDTO contactModelDTO,String firstName,String familyName,String organizationName,OrgUnitDTO mainOrgUnit,List<OrgUnitDTO> secondaryOrgUnits);",0.9645776566757494
35492,"private void showContactCreator(){
  final Window window=new Window();
  window.setPlain(true);
  window.setModal(true);
  window.setBlinkModal(true);
  window.setLayout(new FitLayout());
  window.setSize(700,300);
  window.setHeadingHtml(I18N.CONSTANTS.createContactDialogTitle());
  final ComboBox<ContactModelDTO> contactModelComboBox=Forms.combobox(I18N.CONSTANTS.contactModelLabel(),true,ContactModelDTO.ID,ContactModelDTO.NAME);
  final TextField<String> loginField=Forms.text(I18N.CONSTANTS.contactLogin(),false);
  final TextField<String> firstNameField=Forms.text(I18N.CONSTANTS.contactFirstName(),false);
  final TextField<String> familyNameField=Forms.text(I18N.CONSTANTS.contactFamilyName(),false);
  final TextField<String> organizationNameField=Forms.text(I18N.CONSTANTS.contactOrganizationName(),false);
  firstNameField.setVisible(false);
  familyNameField.setVisible(false);
  organizationNameField.setVisible(false);
  final ComboBox<OrgUnitDTO> mainOrgUnitComboBox=Forms.combobox(I18N.CONSTANTS.contactMainOrgUnit(),false,OrgUnitDTO.ID,OrgUnitDTO.FULL_NAME);
  final ListComboBox<OrgUnitDTO> secondaryOrgUnitsComboBox=new ListComboBox<OrgUnitDTO>(OrgUnitDTO.ID,OrgUnitDTO.FULL_NAME);
  secondaryOrgUnitsComboBox.initComponent();
  final AdapterField secondaryOrgUnitsFieldAdapter=Forms.adapter(I18N.CONSTANTS.contactSecondaryOrgUnits(),secondaryOrgUnitsComboBox);
  secondaryOrgUnitsFieldAdapter.setVisible(false);
  dispatch.execute(new GetContactModels(allowedType,allowedContactModelIds,true),new AsyncCallback<ListResult<ContactModelDTO>>(){
    @Override public void onFailure(    Throwable caught){
      Log.error(""String_Node_Str"");
    }
    @Override public void onSuccess(    ListResult<ContactModelDTO> result){
      contactModelComboBox.getStore().add(result.getList());
    }
  }
);
  dispatch.execute(new GetOrgUnits(OrgUnitDTO.Mode.BASE),new AsyncCallback<ListResult<OrgUnitDTO>>(){
    @Override public void onFailure(    Throwable caught){
      Log.error(""String_Node_Str"");
    }
    @Override public void onSuccess(    ListResult<OrgUnitDTO> result){
      mainOrgUnitComboBox.getStore().add(result.getList());
      secondaryOrgUnitsComboBox.getAvailableValuesStore().add(result.getList());
    }
  }
);
  mainOrgUnitComboBox.addSelectionChangedListener(new SelectionChangedListener<OrgUnitDTO>(){
    @Override public void selectionChanged(    SelectionChangedEvent<OrgUnitDTO> se){
      if (se.getSelectedItem() == null) {
        secondaryOrgUnitsFieldAdapter.setVisible(false);
        return;
      }
      secondaryOrgUnitsFieldAdapter.setVisible(true);
    }
  }
);
  contactModelComboBox.addSelectionChangedListener(new SelectionChangedListener<ContactModelDTO>(){
    @Override public void selectionChanged(    SelectionChangedEvent<ContactModelDTO> event){
      ContactModelType currentType=null;
      if (event.getSelectedItem() != null) {
        currentType=event.getSelectedItem().getType();
      }
      firstNameField.setVisible(currentType == ContactModelType.INDIVIDUAL);
      familyNameField.setVisible(currentType == ContactModelType.INDIVIDUAL);
      organizationNameField.setVisible(currentType == ContactModelType.ORGANIZATION);
      firstNameField.setAllowBlank(currentType != ContactModelType.INDIVIDUAL);
      familyNameField.setAllowBlank(currentType != ContactModelType.INDIVIDUAL);
      organizationNameField.setAllowBlank(currentType != ContactModelType.ORGANIZATION);
    }
  }
);
  org.sigmah.client.ui.widget.button.Button button=Forms.button(I18N.CONSTANTS.createContact());
  final FormPanel formPanel=Forms.panel(200);
  formPanel.add(contactModelComboBox);
  formPanel.add(loginField);
  formPanel.add(firstNameField);
  formPanel.add(familyNameField);
  formPanel.add(organizationNameField);
  formPanel.add(mainOrgUnitComboBox);
  formPanel.add(secondaryOrgUnitsFieldAdapter);
  formPanel.getButtonBar().add(button);
  button.addSelectionListener(new SelectionListener<ButtonEvent>(){
    @Override public void componentSelected(    ButtonEvent event){
      if (!formPanel.isValid()) {
        return;
      }
      createContactHandler.handleContactCreation(contactModelComboBox.getValue(),loginField.getValue(),firstNameField.getValue(),familyNameField.getValue(),organizationNameField.getValue(),mainOrgUnitComboBox.getValue(),secondaryOrgUnitsComboBox.getListStore().getModels());
      window.hide();
    }
  }
);
  window.add(formPanel);
  window.show();
}","private void showContactCreator(){
  final Window window=new Window();
  window.setPlain(true);
  window.setModal(true);
  window.setBlinkModal(true);
  window.setLayout(new FitLayout());
  window.setSize(700,300);
  window.setHeadingHtml(I18N.CONSTANTS.createContactDialogTitle());
  final ComboBox<ContactModelDTO> contactModelComboBox=Forms.combobox(I18N.CONSTANTS.contactModelLabel(),true,ContactModelDTO.ID,ContactModelDTO.NAME);
  final TextField<String> firstNameField=Forms.text(I18N.CONSTANTS.contactFirstName(),false);
  final TextField<String> familyNameField=Forms.text(I18N.CONSTANTS.contactFamilyName(),false);
  final TextField<String> organizationNameField=Forms.text(I18N.CONSTANTS.contactOrganizationName(),false);
  firstNameField.setVisible(false);
  familyNameField.setVisible(false);
  organizationNameField.setVisible(false);
  final ComboBox<OrgUnitDTO> mainOrgUnitComboBox=Forms.combobox(I18N.CONSTANTS.contactMainOrgUnit(),false,OrgUnitDTO.ID,OrgUnitDTO.FULL_NAME);
  final ListComboBox<OrgUnitDTO> secondaryOrgUnitsComboBox=new ListComboBox<OrgUnitDTO>(OrgUnitDTO.ID,OrgUnitDTO.FULL_NAME);
  secondaryOrgUnitsComboBox.initComponent();
  final AdapterField secondaryOrgUnitsFieldAdapter=Forms.adapter(I18N.CONSTANTS.contactSecondaryOrgUnits(),secondaryOrgUnitsComboBox);
  secondaryOrgUnitsFieldAdapter.setVisible(false);
  dispatch.execute(new GetContactModels(allowedType,allowedContactModelIds,true),new AsyncCallback<ListResult<ContactModelDTO>>(){
    @Override public void onFailure(    Throwable caught){
      Log.error(""String_Node_Str"");
    }
    @Override public void onSuccess(    ListResult<ContactModelDTO> result){
      contactModelComboBox.getStore().add(result.getList());
    }
  }
);
  dispatch.execute(new GetOrgUnits(OrgUnitDTO.Mode.WITH_TREE),new AsyncCallback<ListResult<OrgUnitDTO>>(){
    @Override public void onFailure(    Throwable caught){
      Log.error(""String_Node_Str"");
    }
    @Override public void onSuccess(    ListResult<OrgUnitDTO> result){
      for (      OrgUnitDTO orgUnitDTO : result.getData()) {
        fillOrgUnitsComboboxes(orgUnitDTO,mainOrgUnitComboBox,secondaryOrgUnitsComboBox);
      }
    }
  }
);
  mainOrgUnitComboBox.addSelectionChangedListener(new SelectionChangedListener<OrgUnitDTO>(){
    @Override public void selectionChanged(    SelectionChangedEvent<OrgUnitDTO> se){
      if (se.getSelectedItem() == null) {
        secondaryOrgUnitsFieldAdapter.setVisible(false);
        return;
      }
      secondaryOrgUnitsFieldAdapter.setVisible(true);
    }
  }
);
  contactModelComboBox.addSelectionChangedListener(new SelectionChangedListener<ContactModelDTO>(){
    @Override public void selectionChanged(    SelectionChangedEvent<ContactModelDTO> event){
      ContactModelType currentType=null;
      if (event.getSelectedItem() != null) {
        currentType=event.getSelectedItem().getType();
      }
      firstNameField.setVisible(currentType == ContactModelType.INDIVIDUAL);
      familyNameField.setVisible(currentType == ContactModelType.INDIVIDUAL);
      organizationNameField.setVisible(currentType == ContactModelType.ORGANIZATION);
      firstNameField.setAllowBlank(currentType != ContactModelType.INDIVIDUAL);
      familyNameField.setAllowBlank(currentType != ContactModelType.INDIVIDUAL);
      organizationNameField.setAllowBlank(currentType != ContactModelType.ORGANIZATION);
    }
  }
);
  org.sigmah.client.ui.widget.button.Button button=Forms.button(I18N.CONSTANTS.createContact());
  final FormPanel formPanel=Forms.panel(200);
  formPanel.add(contactModelComboBox);
  formPanel.add(firstNameField);
  formPanel.add(familyNameField);
  formPanel.add(organizationNameField);
  formPanel.add(mainOrgUnitComboBox);
  formPanel.add(secondaryOrgUnitsFieldAdapter);
  formPanel.getButtonBar().add(button);
  button.addSelectionListener(new SelectionListener<ButtonEvent>(){
    @Override public void componentSelected(    ButtonEvent event){
      if (!formPanel.isValid()) {
        return;
      }
      createContactHandler.handleContactCreation(contactModelComboBox.getValue(),firstNameField.getValue(),familyNameField.getValue(),organizationNameField.getValue(),mainOrgUnitComboBox.getValue(),secondaryOrgUnitsComboBox.getListStore().getModels());
      window.hide();
    }
  }
);
  window.add(formPanel);
  window.show();
}",0.9399454049135578
35493,"@Override public void onSuccess(ListResult<OrgUnitDTO> result){
  mainOrgUnitComboBox.getStore().add(result.getList());
  secondaryOrgUnitsComboBox.getAvailableValuesStore().add(result.getList());
}","@Override public void onSuccess(ListResult<OrgUnitDTO> result){
  for (  OrgUnitDTO orgUnitDTO : result.getData()) {
    fillOrgUnitsComboboxes(orgUnitDTO,mainOrgUnitComboBox,secondaryOrgUnitsComboBox);
  }
}",0.3990147783251231
35494,"@Override protected ListResult<ContactDuplicatedProperty> execute(GetContactDuplicatedProperties command,UserDispatch.UserExecutionContext context) throws CommandException {
  Contact newContact;
  Contact oldContact;
  if (command.getNewContactId() != null) {
    newContact=contactDAO.findById(command.getNewContactId());
  }
 else {
    newContact=contactService.create(new PropertyMap(command.getNewContactProperties()),context);
  }
  oldContact=contactDAO.findById(command.getOldContactId());
  List<ContactDuplicatedProperty> duplicatedProperties=contactDuplicationService.extractProperties(newContact,oldContact,context.getLanguage());
  return new ListResult<>(duplicatedProperties);
}","@Override protected ListResult<ContactDuplicatedProperty> execute(GetContactDuplicatedProperties command,UserDispatch.UserExecutionContext context) throws CommandException {
  Contact newContact;
  Contact oldContact;
  if (command.getNewContactId() != null) {
    newContact=contactDAO.findById(command.getNewContactId());
  }
 else {
    newContact=contactService.createVirtual(new PropertyMap(command.getNewContactProperties()),context);
  }
  oldContact=contactDAO.findById(command.getOldContactId());
  List<ContactDuplicatedProperty> duplicatedProperties=contactDuplicationService.extractProperties(newContact,oldContact,context.getLanguage());
  return new ListResult<>(duplicatedProperties);
}",0.9949820788530466
35495,"public List<ContactDuplicatedProperty> extractProperties(Contact newContact,Contact oldContact,Language language){
  if (!Objects.equals(newContact.getContactModel().getId(),oldContact.getContactModel().getId())) {
    throw new IllegalStateException(""String_Node_Str"" + newContact.getContactModel().getId() + ""String_Node_Str""+ oldContact.getContactModel().getId());
  }
  List<ContactDuplicatedProperty> properties=new ArrayList<>();
  for (  LayoutGroup group : newContact.getContactModel().getDetails().getLayout().getGroups()) {
    for (    LayoutConstraint layoutConstraint : group.getConstraints()) {
      FlexibleElement element=layoutConstraint.getElement();
      String serializedNewValue;
      String serializedOldValue;
      String formattedNewValue;
      String formattedOldValue;
      ContactDuplicatedProperty.ValueType valueType=ContactDuplicatedProperty.ValueType.STRING;
      if (element instanceof DefaultContactFlexibleElement) {
        DefaultContactFlexibleElement defaultContactFlexibleElement=(DefaultContactFlexibleElement)element;
        serializedNewValue=defaultContactFlexibleElement.getSerializedValue(newContact);
        serializedOldValue=defaultContactFlexibleElement.getSerializedValue(oldContact);
        formattedNewValue=defaultContactFlexibleElement.getFormattedValue(newContact);
        formattedOldValue=defaultContactFlexibleElement.getFormattedValue(oldContact);
        if (((DefaultContactFlexibleElement)element).getType() == DefaultContactFlexibleElementType.PHOTO) {
          valueType=ContactDuplicatedProperty.ValueType.IMAGE;
        }
      }
 else {
        Value newValue=valueDAO.getValueByElementAndContainer(element.getId(),newContact.getId());
        Value oldValue=valueDAO.getValueByElementAndContainer(element.getId(),oldContact.getId());
        serializedNewValue=newValue.getValue();
        serializedOldValue=oldValue.getValue();
        formattedNewValue=modelPropertyService.getFormattedValue(element,newValue.getValue(),language);
        formattedOldValue=modelPropertyService.getFormattedValue(element,oldValue.getValue(),language);
      }
      if (""String_Node_Str"".equals(serializedOldValue)) {
        serializedOldValue=null;
      }
      if (""String_Node_Str"".equals(serializedNewValue)) {
        serializedNewValue=null;
      }
      if (Objects.equals(serializedNewValue,serializedOldValue)) {
        continue;
      }
      String propertyLabel=element.getLabel();
      if (propertyLabel == null && element instanceof DefaultContactFlexibleElement) {
        propertyLabel=modelPropertyService.getDefaultContactPropertyLabel(((DefaultContactFlexibleElement)element).getType(),language);
      }
      ContactDuplicatedProperty contactDuplicatedProperty=new ContactDuplicatedProperty();
      contactDuplicatedProperty.setPropertyLabel(propertyLabel);
      contactDuplicatedProperty.setSerializedNewValue(serializedNewValue);
      contactDuplicatedProperty.setSerializedOldValue(serializedOldValue);
      contactDuplicatedProperty.setFormattedNewValue(formattedNewValue);
      contactDuplicatedProperty.setFormattedOldValue(formattedOldValue);
      contactDuplicatedProperty.setFlexibleElementId(element.getId());
      contactDuplicatedProperty.setValueType(valueType);
      properties.add(contactDuplicatedProperty);
    }
  }
  return properties;
}","public List<ContactDuplicatedProperty> extractProperties(Contact newContact,Contact oldContact,Language language){
  if (!Objects.equals(newContact.getContactModel().getId(),oldContact.getContactModel().getId())) {
    throw new IllegalStateException(""String_Node_Str"" + newContact.getContactModel().getId() + ""String_Node_Str""+ oldContact.getContactModel().getId());
  }
  List<ContactDuplicatedProperty> properties=new ArrayList<>();
  for (  LayoutGroup group : newContact.getContactModel().getDetails().getLayout().getGroups()) {
    if (group.getHasIterations()) {
      continue;
    }
    for (    LayoutConstraint layoutConstraint : group.getConstraints()) {
      FlexibleElement element=layoutConstraint.getElement();
      String serializedNewValue;
      String serializedOldValue;
      String formattedNewValue;
      String formattedOldValue;
      ContactDuplicatedProperty.ValueType valueType=ContactDuplicatedProperty.ValueType.STRING;
      if (element instanceof DefaultContactFlexibleElement) {
        DefaultContactFlexibleElement defaultContactFlexibleElement=(DefaultContactFlexibleElement)element;
        serializedNewValue=defaultContactFlexibleElement.getSerializedValue(newContact);
        serializedOldValue=defaultContactFlexibleElement.getSerializedValue(oldContact);
        formattedNewValue=defaultContactFlexibleElement.getFormattedValue(newContact);
        formattedOldValue=defaultContactFlexibleElement.getFormattedValue(oldContact);
        if (((DefaultContactFlexibleElement)element).getType() == DefaultContactFlexibleElementType.PHOTO) {
          valueType=ContactDuplicatedProperty.ValueType.IMAGE;
        }
      }
 else {
        Value newValue=valueDAO.getValueByElementAndContainer(element.getId(),newContact.getId());
        Value oldValue=valueDAO.getValueByElementAndContainer(element.getId(),oldContact.getId());
        serializedNewValue=newValue.getValue();
        serializedOldValue=oldValue.getValue();
        formattedNewValue=modelPropertyService.getFormattedValue(element,newValue.getValue(),language);
        formattedOldValue=modelPropertyService.getFormattedValue(element,oldValue.getValue(),language);
      }
      if (""String_Node_Str"".equals(serializedOldValue)) {
        serializedOldValue=null;
      }
      if (""String_Node_Str"".equals(serializedNewValue)) {
        serializedNewValue=null;
      }
      if (Objects.equals(serializedNewValue,serializedOldValue)) {
        continue;
      }
      String propertyLabel=element.getLabel();
      if (propertyLabel == null && element instanceof DefaultContactFlexibleElement) {
        propertyLabel=modelPropertyService.getDefaultContactPropertyLabel(((DefaultContactFlexibleElement)element).getType(),language);
      }
      ContactDuplicatedProperty contactDuplicatedProperty=new ContactDuplicatedProperty();
      contactDuplicatedProperty.setPropertyLabel(propertyLabel);
      contactDuplicatedProperty.setSerializedNewValue(serializedNewValue);
      contactDuplicatedProperty.setSerializedOldValue(serializedOldValue);
      contactDuplicatedProperty.setFormattedNewValue(formattedNewValue);
      contactDuplicatedProperty.setFormattedOldValue(formattedOldValue);
      contactDuplicatedProperty.setFlexibleElementId(element.getId());
      contactDuplicatedProperty.setValueType(valueType);
      properties.add(contactDuplicatedProperty);
    }
  }
  return properties;
}",0.9914327917282127
35496,"@Override public void handleEvent(BaseEvent be){
  final Date date=dateField.getValue();
  if (date == null) {
    if (getValidates()) {
      handlerManager.fireEvent(new RequiredValueEvent(false));
    }
    if (allowBlank) {
      fireEvents(""String_Node_Str"",false);
    }
    return;
  }
  final String rawValue=String.valueOf(date.getTime());
  final boolean isValueOn=true;
  if (!(!allowBlank && !isValueOn)) {
    fireEvents(rawValue,isValueOn);
  }
}","@Override public void handleEvent(BaseEvent be){
  String rawValue=textArea.getValue();
  if (rawValue == null) {
    rawValue=""String_Node_Str"";
  }
  final boolean isValueOn=!rawValue.trim().equals(""String_Node_Str"") && !(rawValue.length() > size);
  fireEvents(rawValue,isValueOn);
}",0.2439678284182305
35497,"private HashMap<String,Object> buildPropertyMap(ContactModelDTO contactModelDTO,String login,String firstName,String familyName,String organizationName,OrgUnitDTO mainOrgUnit,List<OrgUnitDTO> secondaryOrgUnits){
  HashMap<String,Object> properties=new HashMap<String,Object>();
  properties.put(ContactDTO.CONTACT_MODEL,contactModelDTO.getId());
  properties.put(ContactDTO.LOGIN,login);
  properties.put(ContactDTO.FIRSTNAME,contactModelDTO.getType() == ContactModelType.INDIVIDUAL ? firstName : null);
  properties.put(ContactDTO.NAME,contactModelDTO.getType() == ContactModelType.INDIVIDUAL ? familyName : organizationName);
  if (mainOrgUnit != null) {
    properties.put(ContactDTO.MAIN_ORG_UNIT,mainOrgUnit.getId());
  }
  if (secondaryOrgUnits != null) {
    HashSet<Integer> secondaryOrgUnitIds=new HashSet<Integer>();
    for (    OrgUnitDTO secondaryOrgUnit : secondaryOrgUnits) {
      secondaryOrgUnitIds.add(secondaryOrgUnit.getId());
    }
    properties.put(ContactDTO.SECONDARY_ORG_UNITS,secondaryOrgUnitIds);
  }
  return properties;
}","private HashMap<String,Object> buildPropertyMap(ContactModelDTO contactModelDTO,String firstName,String familyName,String organizationName,OrgUnitDTO mainOrgUnit,List<OrgUnitDTO> secondaryOrgUnits){
  HashMap<String,Object> properties=new HashMap<String,Object>();
  properties.put(ContactDTO.CONTACT_MODEL,contactModelDTO.getId());
  properties.put(ContactDTO.FIRSTNAME,contactModelDTO.getType() == ContactModelType.INDIVIDUAL ? firstName : null);
  properties.put(ContactDTO.NAME,contactModelDTO.getType() == ContactModelType.INDIVIDUAL ? familyName : organizationName);
  if (mainOrgUnit != null) {
    properties.put(ContactDTO.MAIN_ORG_UNIT,mainOrgUnit.getId());
  }
  if (secondaryOrgUnits != null) {
    HashSet<Integer> secondaryOrgUnitIds=new HashSet<Integer>();
    for (    OrgUnitDTO secondaryOrgUnit : secondaryOrgUnits) {
      secondaryOrgUnitIds.add(secondaryOrgUnit.getId());
    }
    properties.put(ContactDTO.SECONDARY_ORG_UNITS,secondaryOrgUnitIds);
  }
  return properties;
}",0.9731576378721328
35498,"@Override public void handleContactCreation(final ContactModelDTO contactModelDTO,final String login,final String firstName,final String familyName,final String organizationName,final OrgUnitDTO mainOrgUnit,final List<OrgUnitDTO> secondaryOrgUnits){
  CheckContactDuplication checkContactDuplication;
  if (contactModelDTO.getType() == ContactModelType.INDIVIDUAL) {
    checkContactDuplication=new CheckContactDuplication(null,null,familyName,firstName);
  }
 else {
    checkContactDuplication=new CheckContactDuplication(null,null,familyName,null);
  }
  dispatch.execute(checkContactDuplication,new AsyncCallback<ListResult<ContactDTO>>(){
    @Override public void onFailure(    Throwable caught){
      Log.error(""String_Node_Str"");
    }
    @Override public void onSuccess(    ListResult<ContactDTO> result){
      final HashMap<String,Object> properties=buildPropertyMap(contactModelDTO,login,firstName,familyName,organizationName,mainOrgUnit,secondaryOrgUnits);
      if (result == null || result.getSize() == 0) {
        createEntity(properties,listComboBox);
        return;
      }
      final DedupeContactDialog dedupeContactDialog=new DedupeContactDialog(true);
      dedupeContactDialog.getPossibleDuplicatesGrid().getStore().add(result.getList());
      dedupeContactDialog.getFirstStepMainButton().addSelectionListener(new SelectionListener<ButtonEvent>(){
        @Override public void componentSelected(        ButtonEvent ce){
          createEntity(properties,listComboBox);
          dedupeContactDialog.hide();
        }
      }
);
      dedupeContactDialog.setSecondStepHandler(new DedupeContactDialog.SecondStepHandler(){
        @Override public void initialize(        final Integer contactId,        final ListStore<ContactDuplicatedProperty> propertiesStore){
          dispatch.execute(new GetContactDuplicatedProperties(contactId,null,properties),new CommandResultHandler<ListResult<ContactDuplicatedProperty>>(){
            @Override protected void onCommandSuccess(            ListResult<ContactDuplicatedProperty> result){
              propertiesStore.add(result.getList());
            }
          }
,new LoadingMask(dedupeContactDialog));
        }
        @Override public void downloadImage(        String id,        final Image image){
          imageProvider.provideDataUrl(id,new SuccessCallback<String>(){
            @Override public void onSuccess(            String dataUrl){
              image.setUrl(dataUrl);
            }
          }
);
        }
        @Override public void handleDedupeContact(        final Integer targetedContactId,        List<ContactDuplicatedProperty> selectedProperties){
          dispatch.execute(new DedupeContact(selectedProperties,targetedContactId),new CommandResultHandler<ContactDTO>(){
            @Override protected void onCommandSuccess(            ContactDTO targetedContactDTO){
              dedupeContactDialog.hide();
              eventBus.navigateRequest(Page.CONTACT_DASHBOARD.requestWith(RequestParameter.ID,targetedContactId));
            }
          }
);
        }
      }
);
      dedupeContactDialog.show();
    }
  }
);
}","@Override public void handleContactCreation(final ContactModelDTO contactModelDTO,final String firstName,final String familyName,final String organizationName,final OrgUnitDTO mainOrgUnit,final List<OrgUnitDTO> secondaryOrgUnits){
  CheckContactDuplication checkContactDuplication;
  if (contactModelDTO.getType() == ContactModelType.INDIVIDUAL) {
    checkContactDuplication=new CheckContactDuplication(null,null,familyName,firstName);
  }
 else {
    checkContactDuplication=new CheckContactDuplication(null,null,familyName,null);
  }
  dispatch.execute(checkContactDuplication,new AsyncCallback<ListResult<ContactDTO>>(){
    @Override public void onFailure(    Throwable caught){
      Log.error(""String_Node_Str"");
    }
    @Override public void onSuccess(    ListResult<ContactDTO> result){
      final HashMap<String,Object> properties=buildPropertyMap(contactModelDTO,firstName,familyName,organizationName,mainOrgUnit,secondaryOrgUnits);
      if (result == null || result.getSize() == 0) {
        createEntity(properties,listComboBox);
        return;
      }
      final DedupeContactDialog dedupeContactDialog=new DedupeContactDialog(true);
      dedupeContactDialog.getPossibleDuplicatesGrid().getStore().add(result.getList());
      dedupeContactDialog.getFirstStepMainButton().addSelectionListener(new SelectionListener<ButtonEvent>(){
        @Override public void componentSelected(        ButtonEvent ce){
          createEntity(properties,listComboBox);
          dedupeContactDialog.hide();
        }
      }
);
      dedupeContactDialog.setSecondStepHandler(new DedupeContactDialog.SecondStepHandler(){
        @Override public void initialize(        final Integer contactId,        final ListStore<ContactDuplicatedProperty> propertiesStore){
          dispatch.execute(new GetContactDuplicatedProperties(contactId,null,properties),new CommandResultHandler<ListResult<ContactDuplicatedProperty>>(){
            @Override protected void onCommandSuccess(            ListResult<ContactDuplicatedProperty> result){
              propertiesStore.add(result.getList());
            }
          }
,new LoadingMask(dedupeContactDialog));
        }
        @Override public void downloadImage(        String id,        final Image image){
          imageProvider.provideDataUrl(id,new SuccessCallback<String>(){
            @Override public void onSuccess(            String dataUrl){
              image.setUrl(dataUrl);
            }
          }
);
        }
        @Override public void handleDedupeContact(        final Integer targetedContactId,        List<ContactDuplicatedProperty> selectedProperties){
          dispatch.execute(new DedupeContact(selectedProperties,targetedContactId),new CommandResultHandler<ContactDTO>(){
            @Override protected void onCommandSuccess(            ContactDTO targetedContactDTO){
              dedupeContactDialog.hide();
              eventBus.navigateRequest(Page.CONTACT_DASHBOARD.requestWith(RequestParameter.ID,targetedContactId));
            }
          }
);
        }
      }
);
      dedupeContactDialog.show();
    }
  }
);
}",0.9959890903256858
35499,"@Override @SuppressWarnings(""String_Node_Str"") protected Component getComponent(final ValueResult valueResult,final boolean enabled){
  final ContactListComboBox listComboBox=new ContactListComboBox(getLimit(),getAllowedType(),getAllowedModelIds(),dispatch);
  listComboBox.setEnabled(enabled);
  listComboBox.setChangeHandler(new ContactListComboBox.ChangeHandler(){
    @Override public void handleChange(    List<ContactDTO> contacts,    ValueEventChangeType changeType){
      fireEvents(serializeValue(contacts),changeType);
    }
  }
);
  listComboBox.setCreateContactHandler(new ContactListComboBox.CreateContactHandler(){
    @Override public void handleContactCreation(    final ContactModelDTO contactModelDTO,    final String login,    final String firstName,    final String familyName,    final String organizationName,    final OrgUnitDTO mainOrgUnit,    final List<OrgUnitDTO> secondaryOrgUnits){
      CheckContactDuplication checkContactDuplication;
      if (contactModelDTO.getType() == ContactModelType.INDIVIDUAL) {
        checkContactDuplication=new CheckContactDuplication(null,null,familyName,firstName);
      }
 else {
        checkContactDuplication=new CheckContactDuplication(null,null,familyName,null);
      }
      dispatch.execute(checkContactDuplication,new AsyncCallback<ListResult<ContactDTO>>(){
        @Override public void onFailure(        Throwable caught){
          Log.error(""String_Node_Str"");
        }
        @Override public void onSuccess(        ListResult<ContactDTO> result){
          final HashMap<String,Object> properties=buildPropertyMap(contactModelDTO,login,firstName,familyName,organizationName,mainOrgUnit,secondaryOrgUnits);
          if (result == null || result.getSize() == 0) {
            createEntity(properties,listComboBox);
            return;
          }
          final DedupeContactDialog dedupeContactDialog=new DedupeContactDialog(true);
          dedupeContactDialog.getPossibleDuplicatesGrid().getStore().add(result.getList());
          dedupeContactDialog.getFirstStepMainButton().addSelectionListener(new SelectionListener<ButtonEvent>(){
            @Override public void componentSelected(            ButtonEvent ce){
              createEntity(properties,listComboBox);
              dedupeContactDialog.hide();
            }
          }
);
          dedupeContactDialog.setSecondStepHandler(new DedupeContactDialog.SecondStepHandler(){
            @Override public void initialize(            final Integer contactId,            final ListStore<ContactDuplicatedProperty> propertiesStore){
              dispatch.execute(new GetContactDuplicatedProperties(contactId,null,properties),new CommandResultHandler<ListResult<ContactDuplicatedProperty>>(){
                @Override protected void onCommandSuccess(                ListResult<ContactDuplicatedProperty> result){
                  propertiesStore.add(result.getList());
                }
              }
,new LoadingMask(dedupeContactDialog));
            }
            @Override public void downloadImage(            String id,            final Image image){
              imageProvider.provideDataUrl(id,new SuccessCallback<String>(){
                @Override public void onSuccess(                String dataUrl){
                  image.setUrl(dataUrl);
                }
              }
);
            }
            @Override public void handleDedupeContact(            final Integer targetedContactId,            List<ContactDuplicatedProperty> selectedProperties){
              dispatch.execute(new DedupeContact(selectedProperties,targetedContactId),new CommandResultHandler<ContactDTO>(){
                @Override protected void onCommandSuccess(                ContactDTO targetedContactDTO){
                  dedupeContactDialog.hide();
                  eventBus.navigateRequest(Page.CONTACT_DASHBOARD.requestWith(RequestParameter.ID,targetedContactId));
                }
              }
);
            }
          }
);
          dedupeContactDialog.show();
        }
      }
);
    }
  }
);
  listComboBox.initComponent();
  dispatch.execute(new GetContacts(getAllowedType(),getAllowedModelIds()),new AsyncCallback<ListResult<ContactDTO>>(){
    @Override public void onFailure(    Throwable caught){
      Log.error(""String_Node_Str"",caught);
    }
    @Override public void onSuccess(    ListResult<ContactDTO> result){
      listComboBox.getAvailableValuesStore().add(result.getList());
      Set<Integer> contactIds=parseValue(valueResult);
      List<ContactDTO> contacts=new ArrayList<ContactDTO>();
      for (      ContactDTO contactDTO : result.getList()) {
        if (contactIds.contains(contactDTO.getId())) {
          contacts.add(contactDTO);
        }
      }
      listComboBox.initListStore(contacts);
    }
  }
);
  return Forms.adapter(getLabel(),listComboBox);
}","@Override @SuppressWarnings(""String_Node_Str"") protected Component getComponent(final ValueResult valueResult,final boolean enabled){
  final ContactListComboBox listComboBox=new ContactListComboBox(getLimit(),getAllowedType(),getAllowedModelIds(),dispatch);
  listComboBox.setEnabled(enabled);
  listComboBox.setChangeHandler(new ContactListComboBox.ChangeHandler(){
    @Override public void handleChange(    List<ContactDTO> contacts,    ValueEventChangeType changeType){
      fireEvents(serializeValue(contacts),changeType);
    }
  }
);
  listComboBox.setCreateContactHandler(new ContactListComboBox.CreateContactHandler(){
    @Override public void handleContactCreation(    final ContactModelDTO contactModelDTO,    final String firstName,    final String familyName,    final String organizationName,    final OrgUnitDTO mainOrgUnit,    final List<OrgUnitDTO> secondaryOrgUnits){
      CheckContactDuplication checkContactDuplication;
      if (contactModelDTO.getType() == ContactModelType.INDIVIDUAL) {
        checkContactDuplication=new CheckContactDuplication(null,null,familyName,firstName);
      }
 else {
        checkContactDuplication=new CheckContactDuplication(null,null,familyName,null);
      }
      dispatch.execute(checkContactDuplication,new AsyncCallback<ListResult<ContactDTO>>(){
        @Override public void onFailure(        Throwable caught){
          Log.error(""String_Node_Str"");
        }
        @Override public void onSuccess(        ListResult<ContactDTO> result){
          final HashMap<String,Object> properties=buildPropertyMap(contactModelDTO,firstName,familyName,organizationName,mainOrgUnit,secondaryOrgUnits);
          if (result == null || result.getSize() == 0) {
            createEntity(properties,listComboBox);
            return;
          }
          final DedupeContactDialog dedupeContactDialog=new DedupeContactDialog(true);
          dedupeContactDialog.getPossibleDuplicatesGrid().getStore().add(result.getList());
          dedupeContactDialog.getFirstStepMainButton().addSelectionListener(new SelectionListener<ButtonEvent>(){
            @Override public void componentSelected(            ButtonEvent ce){
              createEntity(properties,listComboBox);
              dedupeContactDialog.hide();
            }
          }
);
          dedupeContactDialog.setSecondStepHandler(new DedupeContactDialog.SecondStepHandler(){
            @Override public void initialize(            final Integer contactId,            final ListStore<ContactDuplicatedProperty> propertiesStore){
              dispatch.execute(new GetContactDuplicatedProperties(contactId,null,properties),new CommandResultHandler<ListResult<ContactDuplicatedProperty>>(){
                @Override protected void onCommandSuccess(                ListResult<ContactDuplicatedProperty> result){
                  propertiesStore.add(result.getList());
                }
              }
,new LoadingMask(dedupeContactDialog));
            }
            @Override public void downloadImage(            String id,            final Image image){
              imageProvider.provideDataUrl(id,new SuccessCallback<String>(){
                @Override public void onSuccess(                String dataUrl){
                  image.setUrl(dataUrl);
                }
              }
);
            }
            @Override public void handleDedupeContact(            final Integer targetedContactId,            List<ContactDuplicatedProperty> selectedProperties){
              dispatch.execute(new DedupeContact(selectedProperties,targetedContactId),new CommandResultHandler<ContactDTO>(){
                @Override protected void onCommandSuccess(                ContactDTO targetedContactDTO){
                  dedupeContactDialog.hide();
                  eventBus.navigateRequest(Page.CONTACT_DASHBOARD.requestWith(RequestParameter.ID,targetedContactId));
                }
              }
);
            }
          }
);
          dedupeContactDialog.show();
        }
      }
);
    }
  }
);
  listComboBox.initComponent();
  dispatch.execute(new GetContacts(getAllowedType(),getAllowedModelIds()),new AsyncCallback<ListResult<ContactDTO>>(){
    @Override public void onFailure(    Throwable caught){
      Log.error(""String_Node_Str"",caught);
    }
    @Override public void onSuccess(    ListResult<ContactDTO> result){
      listComboBox.getAvailableValuesStore().add(result.getList());
      Set<Integer> contactIds=parseValue(valueResult);
      List<ContactDTO> contacts=new ArrayList<ContactDTO>();
      for (      ContactDTO contactDTO : result.getList()) {
        if (contactIds.contains(contactDTO.getId())) {
          contacts.add(contactDTO);
        }
      }
      listComboBox.initListStore(contacts);
    }
  }
);
  return Forms.adapter(getLabel(),listComboBox);
}",0.9969994826694256
35500,"private Field<?> buildPostalAddressField(String postalAddress,boolean enabled){
  return buildTextField(I18N.CONSTANTS.contactPostalAddress(),postalAddress,50,enabled,true);
}","private Field<?> buildPostalAddressField(String postalAddress,boolean enabled){
  return buildParagraphField(I18N.CONSTANTS.contactPostalAddress(),postalAddress,50,enabled,true);
}",0.9633802816901408
35501,"/** 
 * Update the project identified by <code>projectId</code> with the given values.
 * @param values Values to update.
 * @param projectId Identifier of the project to update.
 * @param context User context.
 * @param comment Update comment.
 * @throws CommandException If an error occurs during update.
 */
@Transactional(rollbackOn=CommandException.class) protected void updateProject(final List<ValueEventWrapper> values,final Integer projectId,UserExecutionContext context,String comment) throws CommandException {
  final Date historyDate=new Date();
  final User user=context.getUser();
  final Project project=em().find(Project.class,projectId);
  if (project != null) {
    if (!Handlers.isProjectEditable(project,user)) {
      throw new IllegalStateException();
    }
  }
 else {
    OrgUnit orgUnit=em().find(OrgUnit.class,projectId);
    if (!Handlers.isOrgUnitVisible(orgUnit,user)) {
      throw new IllegalStateException();
    }
  }
  final List<String> conflicts=searchForConflicts(project,values,context);
  boolean coreVersionHasBeenModified=false;
  for (  final ValueEventWrapper valueEvent : values) {
    final FlexibleElementDTO source=valueEvent.getSourceElement();
    final FlexibleElement element=em().find(FlexibleElement.class,source.getId());
    final TripletValueDTO updateListValue=valueEvent.getTripletValue();
    final String updateSingleValue=valueEvent.getSingleValue();
    final Set<Integer> multivaluedIdsValue=valueEvent.getMultivaluedIdsValue();
    final boolean isProjectCountryChanged=valueEvent.isProjectCountryChanged();
    final Integer iterationId=valueEvent.getIterationId();
    LOG.debug(""String_Node_Str"",source.getId(),source.getEntityName());
    LOG.debug(""String_Node_Str"",valueEvent.getChangeType(),updateSingleValue,updateListValue,iterationId);
    coreVersionHasBeenModified=coreVersionHasBeenModified || element != null && element.isAmendable();
    if (source instanceof DefaultFlexibleElementDTO && !((DefaultFlexibleElementType.BUDGET.equals(((DefaultFlexibleElementDTO)source).getType())))) {
      final DefaultFlexibleElementDTO defaultElement=(DefaultFlexibleElementDTO)source;
      LOG.debug(""String_Node_Str"",defaultElement.getType());
      final String oldValue=saveDefaultElement(projectId,defaultElement.getType(),updateSingleValue,isProjectCountryChanged);
      List<HistoryToken> results=null;
      if (element != null) {
        final TypedQuery<HistoryToken> query=em().createQuery(""String_Node_Str"",HistoryToken.class);
        query.setParameter(""String_Node_Str"",element.getId());
        query.setParameter(""String_Node_Str"",projectId);
        results=query.getResultList();
      }
      if (results == null || results.isEmpty()) {
        final Date oldDate;
        final User oldOwner;
        if (project != null) {
          oldDate=project.getLastSchemaUpdate();
          oldOwner=project.getOwner();
        }
 else {
          oldDate=new Date(historyDate.getTime() - 1);
          oldOwner=null;
        }
        if (oldValue != null) {
          historize(oldDate,element,projectId,null,oldOwner,ValueEventChangeType.ADD,oldValue,null,null);
        }
      }
      historize(historyDate,element,projectId,null,user,ValueEventChangeType.EDIT,updateSingleValue,null,comment);
      continue;
    }
    final Value currentValue=retrieveOrCreateValue(projectId,source.getId(),iterationId,user);
    if (updateSingleValue != null) {
      if (LOG.isDebugEnabled()) {
        LOG.debug(""String_Node_Str"");
      }
      currentValue.setValue(updateSingleValue);
      historize(historyDate,element,projectId,iterationId,user,ValueEventChangeType.EDIT,updateSingleValue,null,comment);
    }
 else     if (multivaluedIdsValue != null) {
      if (LOG.isDebugEnabled()) {
        LOG.debug(""String_Node_Str"");
      }
      Set<Integer> currentIds;
      if (currentValue != null && currentValue.getValue() != null && !currentValue.getValue().isEmpty()) {
        currentIds=new HashSet<>(ValueResultUtils.splitValuesAsInteger(currentValue.getValue()));
      }
 else {
        currentIds=Collections.emptySet();
      }
switch (valueEvent.getChangeType()) {
case ADD:
        currentIds.addAll(multivaluedIdsValue);
      break;
case REMOVE:
    currentIds.removeAll(multivaluedIdsValue);
  break;
case EDIT:
currentIds=multivaluedIdsValue;
break;
default :
throw new IllegalStateException();
}
String serializedValue=ValueResultUtils.mergeElements(new ArrayList<Integer>(currentIds));
currentValue.setValue(serializedValue);
if (valueEvent.getChangeType() == ValueEventChangeType.EDIT) {
historize(historyDate,element,projectId,iterationId,user,valueEvent.getChangeType(),serializedValue,null,comment);
}
 else {
for (Integer id : multivaluedIdsValue) {
historize(historyDate,element,projectId,iterationId,user,valueEvent.getChangeType(),String.valueOf(id),null,comment);
}
}
}
 else {
if (LOG.isDebugEnabled()) {
LOG.debug(""String_Node_Str"");
}
final List<Integer> ids=ValueResultUtils.splitValuesAsInteger(currentValue.getValue());
if (LOG.isDebugEnabled()) {
LOG.debug(""String_Node_Str"" + ids + ""String_Node_Str"");
}
switch (valueEvent.getChangeType()) {
case ADD:
onAdd(updateListValue,ids,currentValue,historyDate,element,projectId,iterationId,user,comment);
break;
case REMOVE:
if (!onDelete(updateListValue,ids,currentValue,historyDate,element,projectId,iterationId,user,comment)) {
continue;
}
break;
case EDIT:
onEdit(updateListValue,historyDate,element,projectId,iterationId,user,comment);
break;
default :
LOG.debug(""String_Node_Str"" + valueEvent.getChangeType() + ""String_Node_Str"");
break;
}
LOG.debug(""String_Node_Str"" + ids + ""String_Node_Str"");
}
em().merge(currentValue);
}
final Project updatedProject=em().find(Project.class,projectId);
if (updatedProject != null) {
OrgUnit newOrgUnit=updatedProject.getOrgUnit();
if (newOrgUnit != null) {
final UserPermissionPolicy permissionPolicy=injector.getInstance(UserPermissionPolicy.class);
permissionPolicy.deleteUserPemissionByProject(projectId);
permissionPolicy.updateUserPermissionByOrgUnit(newOrgUnit);
}
if (coreVersionHasBeenModified) {
updatedProject.setAmendmentRevision(updatedProject.getAmendmentRevision() == null ? 2 : updatedProject.getAmendmentRevision() + 1);
em().merge(updatedProject);
}
}
if (!conflicts.isEmpty()) {
throw new UpdateConflictException(updatedProject.toContainerInformation(),conflicts.toArray(new String[0]));
}
}","/** 
 * Update the project identified by <code>projectId</code> with the given values.
 * @param values Values to update.
 * @param projectId Identifier of the project to update.
 * @param context User context.
 * @param comment Update comment.
 * @throws CommandException If an error occurs during update.
 */
@Transactional(rollbackOn=CommandException.class) protected void updateProject(final List<ValueEventWrapper> values,final Integer projectId,UserExecutionContext context,String comment) throws CommandException {
  final Date historyDate=new Date();
  final User user=context.getUser();
  final Project project=em().find(Project.class,projectId);
  if (project != null) {
    if (!Handlers.isProjectEditable(project,user)) {
      throw new IllegalStateException();
    }
  }
 else {
    OrgUnit orgUnit=em().find(OrgUnit.class,projectId);
    if (!Handlers.isOrgUnitVisible(orgUnit,user)) {
      throw new IllegalStateException();
    }
  }
  final List<String> conflicts=searchForConflicts(project,values,context);
  boolean coreVersionHasBeenModified=false;
  for (  final ValueEventWrapper valueEvent : values) {
    final FlexibleElementDTO source=valueEvent.getSourceElement();
    final FlexibleElement element=em().find(FlexibleElement.class,source.getId());
    final TripletValueDTO updateListValue=valueEvent.getTripletValue();
    final String updateSingleValue=valueEvent.getSingleValue();
    final Set<Integer> multivaluedIdsValue=valueEvent.getMultivaluedIdsValue();
    final boolean isProjectCountryChanged=valueEvent.isProjectCountryChanged();
    final Integer iterationId=valueEvent.getIterationId();
    LOG.debug(""String_Node_Str"",source.getId(),source.getEntityName());
    LOG.debug(""String_Node_Str"",valueEvent.getChangeType(),updateSingleValue,updateListValue,iterationId);
    coreVersionHasBeenModified=coreVersionHasBeenModified || element != null && element.isAmendable();
    if (source instanceof DefaultFlexibleElementDTO && !((DefaultFlexibleElementType.BUDGET.equals(((DefaultFlexibleElementDTO)source).getType())))) {
      final DefaultFlexibleElementDTO defaultElement=(DefaultFlexibleElementDTO)source;
      LOG.debug(""String_Node_Str"",defaultElement.getType());
      final String oldValue=saveDefaultElement(projectId,defaultElement.getType(),updateSingleValue,isProjectCountryChanged);
      List<HistoryToken> results=null;
      if (element != null) {
        final TypedQuery<HistoryToken> query=em().createQuery(""String_Node_Str"",HistoryToken.class);
        query.setParameter(""String_Node_Str"",element.getId());
        query.setParameter(""String_Node_Str"",projectId);
        results=query.getResultList();
      }
      if (results == null || results.isEmpty()) {
        final Date oldDate;
        final User oldOwner;
        if (project != null) {
          oldDate=project.getLastSchemaUpdate();
          oldOwner=project.getOwner();
        }
 else {
          oldDate=new Date(historyDate.getTime() - 1);
          oldOwner=null;
        }
        if (oldValue != null) {
          historize(oldDate,element,projectId,null,oldOwner,ValueEventChangeType.ADD,oldValue,null,null);
        }
      }
      historize(historyDate,element,projectId,null,user,ValueEventChangeType.EDIT,updateSingleValue,null,comment);
      continue;
    }
    final Value currentValue=retrieveOrCreateValue(projectId,source.getId(),iterationId,user);
    if (updateSingleValue != null) {
      if (LOG.isDebugEnabled()) {
        LOG.debug(""String_Node_Str"");
      }
      currentValue.setValue(updateSingleValue);
      historize(historyDate,element,projectId,iterationId,user,ValueEventChangeType.EDIT,updateSingleValue,null,comment);
    }
 else     if (multivaluedIdsValue != null) {
      if (LOG.isDebugEnabled()) {
        LOG.debug(""String_Node_Str"");
      }
      Set<Integer> currentIds=new HashSet<>();
      if (currentValue != null && currentValue.getValue() != null && !currentValue.getValue().isEmpty()) {
        currentIds.addAll(ValueResultUtils.splitValuesAsInteger(currentValue.getValue()));
      }
switch (valueEvent.getChangeType()) {
case ADD:
        currentIds.addAll(multivaluedIdsValue);
      break;
case REMOVE:
    currentIds.removeAll(multivaluedIdsValue);
  break;
case EDIT:
currentIds=multivaluedIdsValue;
break;
default :
throw new IllegalStateException();
}
String serializedValue=ValueResultUtils.mergeElements(new ArrayList<Integer>(currentIds));
currentValue.setValue(serializedValue);
if (valueEvent.getChangeType() == ValueEventChangeType.EDIT) {
historize(historyDate,element,projectId,iterationId,user,valueEvent.getChangeType(),serializedValue,null,comment);
}
 else {
for (Integer id : multivaluedIdsValue) {
historize(historyDate,element,projectId,iterationId,user,valueEvent.getChangeType(),String.valueOf(id),null,comment);
}
}
}
 else {
if (LOG.isDebugEnabled()) {
LOG.debug(""String_Node_Str"");
}
final List<Integer> ids=ValueResultUtils.splitValuesAsInteger(currentValue.getValue());
if (LOG.isDebugEnabled()) {
LOG.debug(""String_Node_Str"" + ids + ""String_Node_Str"");
}
switch (valueEvent.getChangeType()) {
case ADD:
onAdd(updateListValue,ids,currentValue,historyDate,element,projectId,iterationId,user,comment);
break;
case REMOVE:
if (!onDelete(updateListValue,ids,currentValue,historyDate,element,projectId,iterationId,user,comment)) {
continue;
}
break;
case EDIT:
onEdit(updateListValue,historyDate,element,projectId,iterationId,user,comment);
break;
default :
LOG.debug(""String_Node_Str"" + valueEvent.getChangeType() + ""String_Node_Str"");
break;
}
LOG.debug(""String_Node_Str"" + ids + ""String_Node_Str"");
}
em().merge(currentValue);
}
final Project updatedProject=em().find(Project.class,projectId);
if (updatedProject != null) {
OrgUnit newOrgUnit=updatedProject.getOrgUnit();
if (newOrgUnit != null) {
final UserPermissionPolicy permissionPolicy=injector.getInstance(UserPermissionPolicy.class);
permissionPolicy.deleteUserPemissionByProject(projectId);
permissionPolicy.updateUserPermissionByOrgUnit(newOrgUnit);
}
if (coreVersionHasBeenModified) {
updatedProject.setAmendmentRevision(updatedProject.getAmendmentRevision() == null ? 2 : updatedProject.getAmendmentRevision() + 1);
em().merge(updatedProject);
}
}
if (!conflicts.isEmpty()) {
throw new UpdateConflictException(updatedProject.toContainerInformation(),conflicts.toArray(new String[0]));
}
}",0.9924847346171912
35502,"/** 
 * Update the value displayed in the given budget ratio field.
 * @param field Field to update.
 */
private void updateComponentValue(final StringField field){
  final FlexibleElementDTO plannedBudgetElement=getPlannedBudget();
  final FlexibleElementDTO spentBudgetElement=getSpentBudget();
  final BatchCommand batchCommand=new BatchCommand();
  batchCommand.add(new GetValue(currentContainerDTO.getId(),plannedBudgetElement.getId(),plannedBudgetElement.getEntityName()));
  batchCommand.add(new GetValue(currentContainerDTO.getId(),spentBudgetElement.getId(),spentBudgetElement.getEntityName()));
  dispatch.execute(batchCommand,new CommandResultHandler<ListResult<Result>>(){
    @Override protected void onCommandSuccess(    ListResult<Result> results){
      final ValueResult plannedBudgetResult=(ValueResult)results.getList().get(0);
      final ValueResult spentBudgetResult=(ValueResult)results.getList().get(1);
      final ComputedValue plannedValue=ComputedValues.from(plannedBudgetResult);
      final ComputedValue spentValue=ComputedValues.from(spentBudgetResult);
      if (plannedValue.get() == null || spentValue.get() == null) {
        field.setValue(""String_Node_Str"");
      }
 else {
        field.setValue(NumberUtils.ratioAsString(spentValue.get(),plannedValue.get()));
      }
    }
  }
,field);
}","/** 
 * Update the value displayed in the given budget ratio field.
 * @param field Field to update.
 */
private void updateComponentValue(final StringField field){
  final FlexibleElementDTO plannedBudgetElement=getPlannedBudget();
  final FlexibleElementDTO spentBudgetElement=getSpentBudget();
  if (plannedBudgetElement == null || spentBudgetElement == null) {
    return;
  }
  final BatchCommand batchCommand=new BatchCommand();
  batchCommand.add(new GetValue(currentContainerDTO.getId(),plannedBudgetElement.getId(),plannedBudgetElement.getEntityName()));
  batchCommand.add(new GetValue(currentContainerDTO.getId(),spentBudgetElement.getId(),spentBudgetElement.getEntityName()));
  dispatch.execute(batchCommand,new CommandResultHandler<ListResult<Result>>(){
    @Override protected void onCommandSuccess(    ListResult<Result> results){
      final ValueResult plannedBudgetResult=(ValueResult)results.getList().get(0);
      final ValueResult spentBudgetResult=(ValueResult)results.getList().get(1);
      final ComputedValue plannedValue=ComputedValues.from(plannedBudgetResult);
      final ComputedValue spentValue=ComputedValues.from(spentBudgetResult);
      if (plannedValue.get() == null || spentValue.get() == null) {
        field.setValue(""String_Node_Str"");
      }
 else {
        field.setValue(NumberUtils.ratioAsString(spentValue.get(),plannedValue.get()));
      }
    }
  }
,field);
}",0.9693654266958424
35503,"private void onCellEdited(final PivotGridCellEvent event){
  if (ProfileUtils.isGranted(authentication,GlobalPermissionEnum.EDIT_INDICATOR)) {
    setUpdated(true);
    setDirty(true);
    if (event.getCell() != null) {
      if (event.getCell().getCount() > 1) {
        N10N.confirmation(I18N.CONSTANTS.confirmUpdate(),I18N.CONSTANTS.confirmUpdateOfAggregatedCell(),new ConfirmCallback(){
          @Override public void onAction(){
            event.getRecord().set(event.getProperty(),event.getCell().getValue());
          }
        }
);
      }
    }
  }
}","private void onCellEdited(final PivotGridCellEvent event){
  if (ProfileUtils.isGranted(authentication,GlobalPermissionEnum.EDIT_INDICATOR)) {
    setUpdated(true);
    setDirty(true);
    if (event.getCell() != null) {
      event.getRecord().set(event.getProperty(),event.getCell().getValue());
    }
  }
}",0.6252873563218391
35504,"/** 
 * Returns a sorted list of IndicatorDTOs for the given database, as well as their current aggregate value.
 * @param connection
 * @param databaseId
 */
@Override public void queryIndicatorsByDatabaseWithCurrentValues(Connection connection,final int databaseId){
  SqlQueryBuilder.select(""String_Node_Str"").appendField(""String_Node_Str"").appendField(""String_Node_Str"").appendField(""String_Node_Str"").appendField(""String_Node_Str"").appendField(""String_Node_Str"").appendField(""String_Node_Str"").appendField(""String_Node_Str"").appendField(""String_Node_Str"").appendField(""String_Node_Str"").appendField(""String_Node_Str"").appendField(""String_Node_Str"").appendField(""String_Node_Str"").from(""String_Node_Str"").leftJoin(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"").on(""String_Node_Str"").whereTrue(""String_Node_Str"" + databaseId).whereTrue(""String_Node_Str"").groupBy(""String_Node_Str"" + ""String_Node_Str"").orderBy(""String_Node_Str"").forEachResult(connection,new ResultHandler(){
    @Override public void handle(    ResultSet rs) throws SQLException {
      IndicatorDTO dto=new IndicatorDTO();
      dto.setId(rs.getInt(1));
      dto.setName(rs.getString(2));
      dto.setAggregation(rs.getInt(3));
      dto.setUnits(rs.getString(4));
      dto.setCategory(rs.getString(5));
      dto.setDescription(rs.getString(6));
      dto.setCode(rs.getString(7));
      dto.setDatabaseId(databaseId);
      dto.setSourceOfVerification(rs.getString(11));
      double objective=rs.getDouble(8);
      if (!rs.wasNull()) {
        dto.setObjective(objective);
      }
      Double currentValue=null;
      if (dto.getAggregation() == IndicatorDTO.AGGREGATE_SUM) {
        currentValue=rs.getDouble(9);
        if (!rs.wasNull()) {
          dto.setCurrentValue(currentValue);
        }
      }
 else       if (dto.getAggregation() == IndicatorDTO.AGGREGATE_AVG) {
        currentValue=rs.getDouble(10);
        if (!rs.wasNull()) {
          dto.setCurrentValue(currentValue);
        }
      }
      int groupId=rs.getInt(12);
      if (rs.wasNull()) {
        ungroupedIndicators.add(dto);
      }
 else {
        IndicatorGroup group=groupMap.get(groupId);
        group.addIndicator(dto);
        dto.setGroupId(group.getId());
      }
      dto.setDirectDataEntryEnabled(rs.getBoolean(13));
      allIndicators.add(dto);
      indicatorMap.put(dto.getId(),dto);
    }
  }
);
  SqlQueryBuilder.select(""String_Node_Str"").appendField(""String_Node_Str"").appendField(""String_Node_Str"").appendField(""String_Node_Str"").from(""String_Node_Str"").leftJoin(""String_Node_Str"").on(""String_Node_Str"").leftJoin(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"").on(""String_Node_Str"").whereTrue(""String_Node_Str"" + databaseId).where(""String_Node_Str"").equalTo(IndicatorDTO.AGGREGATE_MULTINOMIAL).groupBy(""String_Node_Str"").orderBy(""String_Node_Str"").forEachResult(connection,new ResultHandler(){
    @Override public void handle(    ResultSet rs) throws SQLException {
      int id=rs.getInt(1);
      String label=rs.getString(3);
      int count=rs.getInt(4);
      IndicatorDTO dto=indicatorMap.get(id);
      if (dto.getLabels() == null) {
        dto.setLabels(new ArrayList<String>());
      }
      dto.getLabels().add(label);
      if (dto.getLabelCounts() == null) {
        dto.setLabelCounts(new ArrayList<Integer>());
      }
      dto.getLabelCounts().add(count);
    }
  }
);
}","/** 
 * Returns a sorted list of IndicatorDTOs for the given database, as well as their current aggregate value.
 * @param connection
 * @param databaseId
 */
@Override public void queryIndicatorsByDatabaseWithCurrentValues(Connection connection,final int databaseId){
  SqlQueryBuilder.select(""String_Node_Str"").appendField(""String_Node_Str"").appendField(""String_Node_Str"").appendField(""String_Node_Str"").appendField(""String_Node_Str"").appendField(""String_Node_Str"").appendField(""String_Node_Str"").appendField(""String_Node_Str"").appendField(""String_Node_Str"").appendField(""String_Node_Str"").appendField(""String_Node_Str"").appendField(""String_Node_Str"").appendField(""String_Node_Str"").from(""String_Node_Str"").leftJoin(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"").on(""String_Node_Str"").whereTrue(""String_Node_Str"" + databaseId).whereTrue(""String_Node_Str"").groupBy(""String_Node_Str"" + ""String_Node_Str"").orderBy(""String_Node_Str"").forEachResult(connection,new ResultHandler(){
    @Override public void handle(    ResultSet rs) throws SQLException {
      IndicatorDTO dto=new IndicatorDTO();
      dto.setId(rs.getInt(1));
      dto.setName(rs.getString(2));
      dto.setAggregation(rs.getInt(3));
      dto.setUnits(rs.getString(4));
      dto.setCategory(rs.getString(5));
      dto.setDescription(rs.getString(6));
      dto.setCode(rs.getString(7));
      dto.setDatabaseId(databaseId);
      dto.setSourceOfVerification(rs.getString(11));
      double objective=rs.getDouble(8);
      if (!rs.wasNull()) {
        dto.setObjective(objective);
      }
      Double currentValue=null;
      if (dto.getAggregation() == IndicatorDTO.AGGREGATE_SUM) {
        currentValue=rs.getDouble(9);
        if (!rs.wasNull()) {
          dto.setCurrentValue(currentValue);
        }
      }
 else       if (dto.getAggregation() == IndicatorDTO.AGGREGATE_AVG) {
        currentValue=rs.getDouble(9) / rs.getDouble(10);
        if (!rs.wasNull()) {
          dto.setCurrentValue(currentValue);
        }
      }
      int groupId=rs.getInt(12);
      if (rs.wasNull()) {
        ungroupedIndicators.add(dto);
      }
 else {
        IndicatorGroup group=groupMap.get(groupId);
        group.addIndicator(dto);
        dto.setGroupId(group.getId());
      }
      dto.setDirectDataEntryEnabled(rs.getBoolean(13));
      allIndicators.add(dto);
      indicatorMap.put(dto.getId(),dto);
    }
  }
);
  SqlQueryBuilder.select(""String_Node_Str"").appendField(""String_Node_Str"").appendField(""String_Node_Str"").appendField(""String_Node_Str"").from(""String_Node_Str"").leftJoin(""String_Node_Str"").on(""String_Node_Str"").leftJoin(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"").on(""String_Node_Str"").whereTrue(""String_Node_Str"" + databaseId).where(""String_Node_Str"").equalTo(IndicatorDTO.AGGREGATE_MULTINOMIAL).groupBy(""String_Node_Str"").orderBy(""String_Node_Str"").forEachResult(connection,new ResultHandler(){
    @Override public void handle(    ResultSet rs) throws SQLException {
      int id=rs.getInt(1);
      String label=rs.getString(3);
      int count=rs.getInt(4);
      IndicatorDTO dto=indicatorMap.get(id);
      if (dto.getLabels() == null) {
        dto.setLabels(new ArrayList<String>());
      }
      dto.getLabels().add(label);
      if (dto.getLabelCounts() == null) {
        dto.setLabelCounts(new ArrayList<Integer>());
      }
      dto.getLabelCounts().add(count);
    }
  }
);
}",0.9973814372999708
35505,"@Transactional protected void performChanges(final UpdateMonthlyReports cmd,Map<Month,ReportingPeriod> periods,Site site){
  for (  UpdateMonthlyReports.Change change : cmd.getChanges()) {
    ReportingPeriod period=periods.get(change.month);
    if (period == null) {
      period=new ReportingPeriod(site);
      Calendar calendar=Calendar.getInstance();
      calendar.set(Calendar.YEAR,change.month.getYear());
      calendar.set(Calendar.MONTH,change.month.getMonth() - 1);
      calendar.set(Calendar.DATE,5);
      period.setDate1(calendar.getTime());
      calendar.set(Calendar.DATE,calendar.getActualMaximum(Calendar.DATE) - 5);
      period.setDate2(calendar.getTime());
      em().persist(period);
      periods.put(change.month,period);
    }
 else {
      boolean wasValid=ReportingPeriodValidation.validate(period);
      if (!wasValid) {
        em().merge(period);
      }
    }
    updateIndicatorValue(em(),period,change.indicatorId,change.value,false);
  }
}","@Transactional protected void performChanges(final UpdateMonthlyReports cmd,Map<Month,ReportingPeriod> periods,Site site){
  for (  UpdateMonthlyReports.Change change : cmd.getChanges()) {
    ReportingPeriod period=periods.get(change.month);
    if (period == null) {
      period=new ReportingPeriod(site);
      final Calendar calendar=Calendar.getInstance();
      calendar.clear();
      calendar.set(Calendar.YEAR,change.month.getYear());
      calendar.set(Calendar.MONTH,change.month.getMonth() - 1);
      calendar.set(Calendar.DATE,5);
      period.setDate1(calendar.getTime());
      calendar.set(Calendar.DATE,calendar.getActualMaximum(Calendar.DATE) - 5);
      period.setDate2(calendar.getTime());
      em().persist(period);
      periods.put(change.month,period);
    }
 else {
      final boolean wasValid=ReportingPeriodValidation.validate(period);
      if (!wasValid) {
        em().merge(period);
      }
    }
    updateIndicatorValue(em(),period,change.indicatorId,change.value,false);
  }
}",0.9819277108433736
35506,"/** 
 * {@inheritDoc}
 */
@Override public VoidResult execute(final UpdateMonthlyReports cmd,final UserExecutionContext context) throws CommandException {
  Site site=em().find(Site.class,cmd.getSiteId());
  Map<Month,ReportingPeriod> periods=new HashMap<Month,ReportingPeriod>();
  for (  ReportingPeriod period : site.getReportingPeriods()) {
    periods.put(Handlers.monthFromRange(period.getDate1(),period.getDate2()),period);
  }
  performChanges(cmd,periods,site);
  return new VoidResult();
}","/** 
 * {@inheritDoc}
 */
@Override public VoidResult execute(final UpdateMonthlyReports cmd,final UserExecutionContext context) throws CommandException {
  Site site=em().find(Site.class,cmd.getSiteId());
  final Map<Month,ReportingPeriod> periods=new HashMap<>();
  for (  ReportingPeriod period : site.getReportingPeriods()) {
    final ReportingPeriod oldPeriod=periods.put(Handlers.monthFromRange(period.getDate1(),period.getDate2()),period);
    if (oldPeriod != null) {
      removeUnusedPeriod(oldPeriod);
    }
  }
  performChanges(cmd,periods,site);
  return new VoidResult();
}",0.8794848206071757
35507,"public static Month monthFromRange(Date date1,Date date2){
  final Calendar c1=Calendar.getInstance();
  c1.setTime(date1);
  if (c1.get(Calendar.DAY_OF_MONTH) != 1) {
    return null;
  }
  final Calendar c2=Calendar.getInstance();
  c2.setTime(date2);
  if (c2.get(Calendar.DAY_OF_MONTH) != c2.getActualMaximum(Calendar.DAY_OF_MONTH)) {
    return null;
  }
  if (c2.get(Calendar.MONTH) != c1.get(Calendar.MONTH) || c2.get(Calendar.YEAR) != c2.get(Calendar.YEAR)) {
    return null;
  }
  return new Month(c1.get(Calendar.YEAR),c1.get(Calendar.MONTH) + 1);
}","public static Month monthFromRange(Date date1,Date date2){
  final Calendar c1=Calendar.getInstance();
  c1.setTime(date1);
  if (c1.get(Calendar.DAY_OF_MONTH) != 5) {
    return null;
  }
  final Calendar c2=Calendar.getInstance();
  c2.setTime(date2);
  if (c2.get(Calendar.DAY_OF_MONTH) != c2.getActualMaximum(Calendar.DAY_OF_MONTH) - 5) {
    return null;
  }
  if (c2.get(Calendar.MONTH) != c1.get(Calendar.MONTH) || c2.get(Calendar.YEAR) != c2.get(Calendar.YEAR)) {
    return null;
  }
  return new Month(c1.get(Calendar.YEAR),c1.get(Calendar.MONTH) + 1);
}",0.994661921708185
35508,"private void getProjectsByIndex(final String index,final int id,final RequestManager<List<ProjectDTO>> requestManager,final Transaction<Store> transaction){
  final ObjectStore projectStore=transaction.getObjectStore(getRequiredStore());
  final OpenCursorRequest request=projectStore.index(index).openKeyCursor(IDBKeyRange.only(id));
  final int cursorRequest=requestManager.prepareRequest();
  request.addCallback(new AsyncCallback<Request>(){
    @Override public void onFailure(    Throwable caught){
      requestManager.setRequestFailure(cursorRequest,caught);
    }
    @Override public void onSuccess(    Request result){
      final Cursor cursor=request.getResult();
      if (cursor != null) {
        final ProjectJS projectJS=cursor.getValue();
        final ProjectDTO projectDTO=projectJS.toDTO();
        loadProjectDTO(projectJS,true,requestManager,projectDTO,transaction);
      }
 else {
        requestManager.setRequestSuccess(cursorRequest);
      }
    }
  }
);
}","private void getProjectsByIndex(final String index,final int id,final AsyncCallback<List<ProjectDTO>> callback,final Transaction<Store> transaction){
  final List<ProjectDTO> projects=new ArrayList<ProjectDTO>();
  final RequestManager<List<ProjectDTO>> requestManager=new RequestManager<List<ProjectDTO>>(projects,callback);
  final ObjectStore projectStore=transaction.getObjectStore(getRequiredStore());
  final OpenCursorRequest request=projectStore.index(index).openKeyCursor(IDBKeyRange.only(id));
  final int cursorRequest=requestManager.prepareRequest();
  request.addCallback(new AsyncCallback<Request>(){
    @Override public void onFailure(    Throwable caught){
      requestManager.setRequestFailure(cursorRequest,caught);
    }
    @Override public void onSuccess(    Request result){
      final Cursor cursor=request.getResult();
      if (cursor != null) {
        final ProjectJS projectJS=cursor.getValue();
        if (projectJS != null) {
          final ProjectDTO projectDTO=projectJS.toDTO();
          projects.add(projectDTO);
          loadProjectDTO(projectJS,true,requestManager,projectDTO,transaction);
        }
 else {
          get(cursor.getPrimaryKey(),new RequestManagerCallback<List<ProjectDTO>,ProjectDTO>(requestManager){
            @Override public void onRequestSuccess(            final ProjectDTO project){
              if (project != null) {
                projects.add(project);
              }
            }
          }
,transaction);
        }
        cursor.next();
      }
 else {
        requestManager.setRequestSuccess(cursorRequest);
      }
    }
  }
);
  requestManager.ready();
}",0.729420731707317
35509,"/** 
 * Returns the 2 projects associated with the given project funding id.
 * @param id Identifier of the project funding.
 * @param callback Handler to call when the search is done.
 */
public void getByProjectFundingId(final int id,final AsyncCallback<List<ProjectDTO>> callback){
  openTransaction(Transaction.Mode.READ_ONLY,new OpenTransactionHandler<Store>(){
    @Override public void onTransaction(    final Transaction<Store> transaction){
      final List<ProjectDTO> projects=new ArrayList<ProjectDTO>();
      final RequestManager<List<ProjectDTO>> requestManager=new RequestManager<List<ProjectDTO>>(projects,callback);
      getProjectsByIndex(Indexes.PROJECT_FUNDEDS,id,requestManager,transaction);
      getProjectsByIndex(Indexes.PROJECT_FUNDINGS,id,requestManager,transaction);
      requestManager.ready();
    }
  }
);
}","/** 
 * Returns the 2 projects associated with the given project funding id.
 * @param id Identifier of the project funding.
 * @param callback Handler to call when the search is done.
 */
public void getByProjectFundingId(final int id,final AsyncCallback<List<ProjectDTO>> callback){
  openTransaction(Transaction.Mode.READ_ONLY,new OpenTransactionHandler<Store>(){
    @Override public void onTransaction(    final Transaction<Store> transaction){
      getProjectsByIndex(Indexes.PROJECT_PROJECTFUNDINGS,id,callback,transaction);
    }
  }
);
}",0.7680115273775217
35510,"public Object getKey(){
  return nativeCursor.getKey();
}","public int getKey(){
  return nativeCursor.getKeyInteger();
}",0.8813559322033898
35511,"/** 
 * Creates a new <code>ComputationJS</code> object with the given element.
 * @param computationElement Computation element to map.
 * @return A new <code>ComputationJS</code>.
 */
public static ExtendedComputationElementJS toJavaScript(final ComputationElementDTO computationElement){
  final JsArrayString dependencies=Values.createJavaScriptArray(JsArrayString.class);
  boolean contribution=false;
  final Computation computation=Computations.parse(computationElement.getRule(),Collections.<FlexibleElementDTO>emptyList());
  for (  final Dependency dependency : computation.getDependencies()) {
    if (dependency instanceof CollectionDependency) {
      dependencies.push(((CollectionDependency)dependency).flexibleElementString());
    }
    if (dependency instanceof ContributionDependency) {
      contribution=true;
    }
  }
  final ExtendedComputationElementJS computationJS=Values.createJavaScriptObject();
  computationJS.setId(computationElement.getId());
  computationJS.setLabel(computationElement.getLabel());
  computationJS.setCode(computationElement.getCode());
  computationJS.setRule(computationElement.getRule());
  computationJS.setContribution(contribution);
  computationJS.setDependencies(dependencies);
  computationJS.setProjectModel(computationElement.getProjectModel());
  return computationJS;
}","/** 
 * Creates a new <code>ComputationJS</code> object with the given element.
 * @param computationElement Computation element to map.
 * @return A new <code>ComputationJS</code>.
 */
public static ExtendedComputationElementJS toJavaScript(final ComputationElementDTO computationElement){
  final JsArrayString dependencies=Values.createJavaScriptArray(JsArrayString.class);
  int contribution=0;
  final Computation computation=Computations.parse(computationElement.getRule(),Collections.<FlexibleElementDTO>emptyList());
  for (  final Dependency dependency : computation.getDependencies()) {
    if (dependency instanceof CollectionDependency) {
      dependencies.push(((CollectionDependency)dependency).flexibleElementString());
    }
    if (dependency instanceof ContributionDependency) {
      contribution=1;
    }
  }
  final ExtendedComputationElementJS computationJS=Values.createJavaScriptObject();
  computationJS.setId(computationElement.getId());
  computationJS.setLabel(computationElement.getLabel());
  computationJS.setCode(computationElement.getCode());
  computationJS.setRule(computationElement.getRule());
  computationJS.setContribution(contribution);
  computationJS.setDependencies(dependencies);
  computationJS.setProjectModel(computationElement.getProjectModel());
  return computationJS;
}",0.9868173258003766
35512,public native void setContribution(boolean contribution);,public native void setContribution(int contribution);,0.9272727272727272
35513,"public static ProjectJS toJavaScript(ProjectDTO projectDTO){
  final ProjectJS projectJS=Values.createJavaScriptObject(ProjectJS.class);
  projectJS.setId(projectDTO.getId());
  projectJS.setName(projectDTO.getName());
  projectJS.setFullName(projectDTO.getFullName());
  projectJS.setStartDate(Values.toJsDate(projectDTO.getStartDate()));
  projectJS.setEndDate(Values.toJsDate(projectDTO.getEndDate()));
  projectJS.setCloseDate(Values.toJsDate(projectDTO.getCloseDate()));
  projectJS.setActivityAdvancement(projectDTO.getActivityAdvancement());
  projectJS.setCalendarId(projectDTO.getCalendarId());
  projectJS.setAmendmentState(projectDTO.getAmendmentState());
  projectJS.setAmendmentVersion(projectDTO.getAmendmentVersion());
  projectJS.setAmendmentRevision(projectDTO.getAmendmentRevision());
  projectJS.setAmendments(projectDTO.getAmendments());
  projectJS.setOwner(projectDTO.getOwner());
  projectJS.setFavoriteUsers(projectDTO.getFavoriteUsers());
  projectJS.setProjectModel(projectDTO.getProjectModel());
  projectJS.setPhases(projectDTO.getPhases());
  projectJS.setValues(projectDTO.getValues());
  projectJS.setCurrentPhase(projectDTO.getCurrentPhase());
  projectJS.setLogFrame(projectDTO.getLogFrame());
  projectJS.setFunding(projectDTO.getFunding());
  projectJS.setFunded(projectDTO.getFunded());
  projectJS.setCountry(projectDTO.getCountry());
  projectJS.setManager(projectDTO.getManager());
  projectJS.setPointsList(projectDTO.getPointsList());
  projectJS.setRemindersList(projectDTO.getRemindersList());
  projectJS.setPlannedBudget(projectDTO.getPlannedBudget());
  projectJS.setSpendBudget(projectDTO.getSpendBudget());
  projectJS.setReceivedBudget(projectDTO.getReceivedBudget());
  projectJS.setCurrentAmendment(projectDTO.getCurrentAmendment());
  projectJS.setOrgUnit(projectDTO.getOrgUnitId());
  return projectJS;
}","public static ProjectJS toJavaScript(ProjectDTO projectDTO){
  final ProjectJS projectJS=Values.createJavaScriptObject(ProjectJS.class);
  projectJS.setId(projectDTO.getId());
  projectJS.setName(projectDTO.getName());
  projectJS.setFullName(projectDTO.getFullName());
  projectJS.setStartDate(Values.toJsDate(projectDTO.getStartDate()));
  projectJS.setEndDate(Values.toJsDate(projectDTO.getEndDate()));
  projectJS.setCloseDate(Values.toJsDate(projectDTO.getCloseDate()));
  projectJS.setActivityAdvancement(projectDTO.getActivityAdvancement());
  projectJS.setCalendarId(projectDTO.getCalendarId());
  projectJS.setAmendmentState(projectDTO.getAmendmentState());
  projectJS.setAmendmentVersion(projectDTO.getAmendmentVersion());
  projectJS.setAmendmentRevision(projectDTO.getAmendmentRevision());
  projectJS.setAmendments(projectDTO.getAmendments());
  projectJS.setOwner(projectDTO.getOwner());
  projectJS.setFavoriteUsers(projectDTO.getFavoriteUsers());
  projectJS.setProjectModel(projectDTO.getProjectModel());
  projectJS.setPhases(projectDTO.getPhases());
  projectJS.setValues(projectDTO.getValues());
  projectJS.setCurrentPhase(projectDTO.getCurrentPhase());
  projectJS.setLogFrame(projectDTO.getLogFrame());
  projectJS.setFunding(projectDTO.getFunding());
  projectJS.setFunded(projectDTO.getFunded());
  projectJS.setProjectFundings(projectDTO.getFunded(),projectDTO.getFunding());
  projectJS.setCountry(projectDTO.getCountry());
  projectJS.setManager(projectDTO.getManager());
  projectJS.setPointsList(projectDTO.getPointsList());
  projectJS.setRemindersList(projectDTO.getRemindersList());
  projectJS.setPlannedBudget(projectDTO.getPlannedBudget());
  projectJS.setSpendBudget(projectDTO.getSpendBudget());
  projectJS.setReceivedBudget(projectDTO.getReceivedBudget());
  projectJS.setCurrentAmendment(projectDTO.getCurrentAmendment());
  projectJS.setOrgUnit(projectDTO.getOrgUnitId());
  return projectJS;
}",0.9789140748550342
35514,"/** 
 * Returns the 2 projects associated with the given project funding id.
 * @param id Identifier of the project funding.
 * @param callback Handler to call when the search is done.
 */
public void getByProjectFundingId(final int id,final AsyncCallback<List<ProjectDTO>> callback){
  openTransaction(Transaction.Mode.READ_ONLY,new OpenTransactionHandler<Store>(){
    @Override public void onTransaction(    final Transaction<Store> transaction){
      final List<ProjectDTO> projects=new ArrayList<ProjectDTO>();
      final RequestManager<List<ProjectDTO>> requestManager=new RequestManager<>(projects,callback);
      getProjectsByIndex(Indexes.PROJECT_FUNDEDS,id,requestManager,transaction);
      getProjectsByIndex(Indexes.PROJECT_FUNDINGS,id,requestManager,transaction);
      requestManager.ready();
    }
  }
);
}","/** 
 * Returns the 2 projects associated with the given project funding id.
 * @param id Identifier of the project funding.
 * @param callback Handler to call when the search is done.
 */
public void getByProjectFundingId(final int id,final AsyncCallback<List<ProjectDTO>> callback){
  openTransaction(Transaction.Mode.READ_ONLY,new OpenTransactionHandler<Store>(){
    @Override public void onTransaction(    final Transaction<Store> transaction){
      final List<ProjectDTO> projects=new ArrayList<ProjectDTO>();
      final RequestManager<List<ProjectDTO>> requestManager=new RequestManager<List<ProjectDTO>>(projects,callback);
      getProjectsByIndex(Indexes.PROJECT_FUNDEDS,id,requestManager,transaction);
      getProjectsByIndex(Indexes.PROJECT_FUNDINGS,id,requestManager,transaction);
      requestManager.ready();
    }
  }
);
}",0.9903961584633854
35515,"/** 
 * {@inheritDoc}
 */
@Override public void initialize(){
  final SimplePanel panel=new SimplePanel();
  panel.setStyleName(LOGIN_BG);
  final Grid grid=new Grid(1,2);
  grid.setStyleName(LOGIN_BOX);
  grid.setWidget(0,0,new Image(LOGO_URL));
  final FlexTable form=new FlexTable();
  form.setWidth(""String_Node_Str"");
  int y=0;
  form.setText(y,0,I18N.CONSTANTS.loginLoginField());
  form.getCellFormatter().setStyleName(y,0,LOGIN_BOX_FORM_LABEL);
  loginTextBox=new TextBox();
  loginTextBox.getElement().setId(LOGIN_EMAIL_ID);
  loginTextBox.setWidth(""String_Node_Str"");
  form.setWidget(y,1,loginTextBox);
  form.getFlexCellFormatter().setColSpan(y,1,2);
  y++;
  for (int i=0; i < 3; i++) {
    form.getCellFormatter().setStyleName(y,i,LOGIN_BOX_FORM_SEPARATOR);
  }
  y++;
  form.setText(y,0,I18N.CONSTANTS.loginPasswordField());
  form.getCellFormatter().setStyleName(y,0,LOGIN_BOX_FORM_LABEL);
  passwordTextBox=new PasswordTextBox();
  passwordTextBox.getElement().setId(LOGIN_PASSWORD_ID);
  passwordTextBox.setWidth(""String_Node_Str"");
  form.setWidget(y,1,passwordTextBox);
  form.getFlexCellFormatter().setColSpan(y,1,2);
  y++;
  for (int i=0; i < 3; i++) {
    form.getCellFormatter().setStyleName(y,i,LOGIN_BOX_FORM_SEPARATOR);
  }
  y++;
  form.setText(y,0,I18N.CONSTANTS.loginLanguageField());
  form.getCellFormatter().setStyleName(y,0,LOGIN_BOX_FORM_LABEL);
  languageListBox=new ListBox(false);
  languageListBox.setWidth(""String_Node_Str"");
  form.setWidget(y,1,languageListBox);
  form.getFlexCellFormatter().setColSpan(y,1,2);
  y++;
  for (int i=0; i < 3; i++) {
    form.getCellFormatter().setStyleName(y,i,LOGIN_BOX_FORM_SEPARATOR);
  }
  y++;
  final FlowPanel bottomPanel=new FlowPanel();
  bottomPanel.getElement().getStyle().setPosition(Position.RELATIVE);
  lostPasswordLink=new Anchor(I18N.CONSTANTS.loginPasswordForgotten());
  lostPasswordLink.setStyleName(LOGIN_BOX_FORM_FORGOTTEN);
  bottomPanel.add(lostPasswordLink);
  form.setWidget(y,0,bottomPanel);
  form.getFlexCellFormatter().setColSpan(y,0,2);
  loginButton=new Button(I18N.CONSTANTS.loginConnectButton());
  loginButton.setId(LOGIN_OUVRIR_SESSION_ID);
  loginButton.setWidth(""String_Node_Str"");
  form.setWidget(y,1,loginButton);
  form.getCellFormatter().setHorizontalAlignment(y,1,HasHorizontalAlignment.ALIGN_RIGHT);
  y++;
  grid.getCellFormatter().setHorizontalAlignment(0,1,HasHorizontalAlignment.ALIGN_CENTER);
  grid.setWidget(0,1,form);
  grid.getCellFormatter().setStyleName(0,0,LOGIN_BOX_LOGO);
  grid.getCellFormatter().setStyleName(0,1,LOGIN_BOX_FORM);
  panel.add(grid);
  add(panel);
}","/** 
 * {@inheritDoc}
 */
@Override public void initialize(){
  final SimplePanel panel=new SimplePanel();
  panel.setStyleName(LOGIN_BG);
  final Grid grid=new Grid(1,2);
  grid.setStyleName(LOGIN_BOX);
  grid.setWidget(0,0,new Image(LOGO_URL));
  final FlexTable form=new FlexTable();
  form.setWidth(""String_Node_Str"");
  int y=0;
  form.setText(y,0,I18N.CONSTANTS.loginLoginField());
  form.getCellFormatter().setStyleName(y,0,LOGIN_BOX_FORM_LABEL);
  loginTextBox=new TextBox();
  loginTextBox.getElement().setId(LOGIN_EMAIL_ID);
  loginTextBox.setWidth(""String_Node_Str"");
  form.setWidget(y,1,loginTextBox);
  form.getFlexCellFormatter().setColSpan(y,1,2);
  y++;
  for (int i=0; i < 3; i++) {
    form.getCellFormatter().setStyleName(y,i,LOGIN_BOX_FORM_SEPARATOR);
  }
  y++;
  form.setText(y,0,I18N.CONSTANTS.loginPasswordField());
  form.getCellFormatter().setStyleName(y,0,LOGIN_BOX_FORM_LABEL);
  passwordTextBox=new PasswordTextBox();
  passwordTextBox.getElement().setId(LOGIN_PASSWORD_ID);
  passwordTextBox.setWidth(""String_Node_Str"");
  form.setWidget(y,1,passwordTextBox);
  form.getFlexCellFormatter().setColSpan(y,1,2);
  y++;
  for (int i=0; i < 3; i++) {
    form.getCellFormatter().setStyleName(y,i,LOGIN_BOX_FORM_SEPARATOR);
  }
  y++;
  form.setText(y,0,I18N.CONSTANTS.loginLanguageField());
  form.getCellFormatter().setStyleName(y,0,LOGIN_BOX_FORM_LABEL);
  languageListBox=new ListBox(false);
  languageListBox.setWidth(""String_Node_Str"");
  form.setWidget(y,1,languageListBox);
  form.getFlexCellFormatter().setColSpan(y,1,2);
  y++;
  for (int i=0; i < 3; i++) {
    form.getCellFormatter().setStyleName(y,i,LOGIN_BOX_FORM_SEPARATOR);
  }
  y++;
  final FlowPanel bottomPanel=new FlowPanel();
  bottomPanel.getElement().getStyle().setPosition(Position.RELATIVE);
  lostPasswordLink=new Anchor(I18N.CONSTANTS.loginPasswordForgotten());
  lostPasswordLink.setStyleName(LOGIN_BOX_FORM_FORGOTTEN);
  bottomPanel.add(lostPasswordLink);
  form.setWidget(y,0,bottomPanel);
  form.getFlexCellFormatter().setColSpan(y,0,2);
  loginButton=new Button(I18N.CONSTANTS.loginConnectButton());
  loginButton.setId(OPEN_SESSION_ID);
  loginButton.setWidth(""String_Node_Str"");
  form.setWidget(y,1,loginButton);
  form.getCellFormatter().setHorizontalAlignment(y,1,HasHorizontalAlignment.ALIGN_RIGHT);
  y++;
  grid.getCellFormatter().setHorizontalAlignment(0,1,HasHorizontalAlignment.ALIGN_CENTER);
  grid.setWidget(0,1,form);
  grid.getCellFormatter().setStyleName(0,0,LOGIN_BOX_LOGO);
  grid.getCellFormatter().setStyleName(0,1,LOGIN_BOX_FORM);
  panel.add(grid);
  add(panel);
}",0.9969207082371054
35516,"/** 
 * Add a value change handler to the given element if it is a dependency of a computation.
 * @param element Element to listen.
 * @param component Component associated to the given element.
 * @param modifications Value change list.
 */
public void listenToValueChangesOfElement(final FlexibleElementDTO element,final Component component,final List<ValueEvent> modifications){
  if (element instanceof ComputationElementDTO) {
    components.put(element,(Field<String>)component);
    elementsWithHandlers.put(element.getId(),(ComputationElementDTO)element);
    initialUpdateIfCurrentValueIsEmpty((ComputationElementDTO)element,(StringField)component);
  }
  final List<ComputationElementDTO> computationElements=dependencies.get(element);
  if (computationElements != null) {
    element.addValueHandler(new ValueHandler(){
      @Override public void onValueChange(      ValueEvent event){
        updateComputations(computationElements,modifications);
      }
    }
);
  }
}","/** 
 * Add a value change handler to the given element if it is a dependency of a computation.
 * @param element Element to listen.
 * @param component Component associated to the given element.
 * @param modifications Value change list.
 */
public void listenToValueChangesOfElement(final FlexibleElementDTO element,final Component component,final List<ValueEvent> modifications){
  if (element instanceof ComputationElementDTO) {
    components.put(element,(Field<String>)component);
    elementsWithHandlers.put(element.getId(),(ComputationElementDTO)element);
    initialUpdateIfCurrentValueIsEmpty((ComputationElementDTO)element,(Field<String>)component);
  }
  final List<ComputationElementDTO> computationElements=dependencies.get(element);
  if (computationElements != null) {
    element.addValueHandler(new ValueHandler(){
      @Override public void onValueChange(      ValueEvent event){
        updateComputations(computationElements,modifications);
      }
    }
);
  }
}",0.9939086294416244
35517,"/** 
 * List the dependencies of the given element.
 * @param computationElement Computation element to prepare.
 * @param model Model of the current container.
 */
private void prepareForComputationElement(final ComputationElementDTO computationElement,final IsModel model){
  final Computation computation=computationElement.getComputationForModel(model);
  computations.put(computationElement,computation);
  for (  final Dependency dependency : computation.getDependencies()) {
    List<ComputationElementDTO> list=dependencies.get(dependency);
    if (list == null) {
      list=new ArrayList<ComputationElementDTO>();
      if (dependency instanceof SingleDependency) {
        dependencies.put(((SingleDependency)dependency).getFlexibleElement(),list);
      }
 else {
        throw new UnsupportedOperationException(""String_Node_Str"");
      }
    }
    list.add(computationElement);
  }
}","/** 
 * List the dependencies of the given element.
 * @param computationElement Computation element to prepare.
 * @param model Model of the current container.
 */
private void prepareForComputationElement(final ComputationElementDTO computationElement,final IsModel model){
  final Computation computation=computationElement.getComputationForModel(model);
  computations.put(computationElement,computation);
  for (  final Dependency dependency : computation.getDependencies()) {
    List<ComputationElementDTO> list=dependencies.get(dependency);
    if (list == null) {
      list=new ArrayList<ComputationElementDTO>();
      if (dependency instanceof SingleDependency) {
        dependencies.put(((SingleDependency)dependency).getFlexibleElement(),list);
      }
    }
    list.add(computationElement);
  }
}",0.9087719298245616
35518,"/** 
 * Compute the value of the given element if no value has been provided.
 * @param computationElement Computation element to update.
 * @param component Component associated to the given element.
 */
private void initialUpdateIfCurrentValueIsEmpty(final ComputationElementDTO computationElement,final StringField field){
  if (field.getValue() == null || field.getValue().isEmpty()) {
    updateComputation(computationElement,new ArrayList<ValueEvent>(),false);
  }
}","/** 
 * Compute the value of the given element if no value has been provided.
 * @param computationElement Computation element to update.
 * @param component Component associated to the given element.
 */
private void initialUpdateIfCurrentValueIsEmpty(final ComputationElementDTO computationElement,final Field<String> field){
  if (field.getValue() == null || field.getValue().isEmpty()) {
    updateComputation(computationElement,new ArrayList<ValueEvent>(),false);
  }
}",0.9873150105708244
35519,"/** 
 * Search for the project model containing the given computation element.
 * @param computationElement Computation element to use for the search.
 * @return The parent project model or <code>null</code> if the computationelement is not attached to a project model.
 */
public ProjectModel getParentProjectModel(final ComputationElement computationElement){
  final TypedQuery<ProjectModel> modelQuery=em().createQuery(""String_Node_Str"",ProjectModel.class);
  modelQuery.setParameter(""String_Node_Str"",computationElement);
  return modelQuery.getSingleResult();
}","/** 
 * Search for the project model containing the given computation element.
 * @param computationElement Computation element to use for the search.
 * @return The parent project model or <code>null</code> if the computationelement is not attached to a project model.
 */
public ProjectModel getParentProjectModel(final ComputationElement computationElement){
  final TypedQuery<ProjectModel> phaseModelsQuery=em().createQuery(""String_Node_Str"",ProjectModel.class);
  phaseModelsQuery.setParameter(""String_Node_Str"",computationElement);
  final List<ProjectModel> modelsInPhaseModels=phaseModelsQuery.getResultList();
  if (!modelsInPhaseModels.isEmpty()) {
    return modelsInPhaseModels.get(0);
  }
  final TypedQuery<ProjectModel> detailsQuery=em().createQuery(""String_Node_Str"",ProjectModel.class);
  detailsQuery.setParameter(""String_Node_Str"",computationElement);
  final List<ProjectModel> modelsInDetails=detailsQuery.getResultList();
  if (!modelsInDetails.isEmpty()) {
    return modelsInDetails.get(0);
  }
  return null;
}",0.67747972551466
35520,"/** 
 * Update the computation elements referencing the contribution of the given projects.
 * @param fundingProject Project funding the `fundedProject`.
 * @param fundedProject Project founded by `fundingProject`.
 * @param user User changing the value of the contribution.
 */
private void updateComputationsReferencingModelsOfProjects(final Project fundingProject,final Project fundedProject,final User user){
  final List<ComputationElement> impactedComputations=getComputationsReferencingModels(fundingProject.getProjectModel(),fundedProject.getProjectModel());
  for (  final ComputationElement computationElement : impactedComputations) {
    final ProjectModel parentModel=computationService.getParentProjectModel(computationElement);
    if (parentModel != null) {
      if (parentModel.equals(fundedProject.getProjectModel())) {
        computationService.updateComputationValueForProject(computationElement,fundedProject,user);
      }
      if (parentModel.equals(fundingProject.getProjectModel())) {
        computationService.updateComputationValueForProject(computationElement,fundingProject,user);
      }
    }
  }
}","/** 
 * Update the computation elements referencing the contribution of the given projects.
 * @param fundingProject Project funding the `fundedProject`.
 * @param fundedProject Project founded by `fundingProject`.
 * @param user User changing the value of the contribution.
 */
private void updateComputationsReferencingModelsOfProjects(final Project fundingProject,final Project fundedProject,final User user){
  final Collection<ComputationElement> impactedComputations=computationService.getComputationElementsReferencingContributions();
  for (  final ComputationElement computationElement : impactedComputations) {
    final ProjectModel parentModel=computationService.getParentProjectModel(computationElement);
    if (parentModel != null) {
      final Integer parentModelId=parentModel.getId();
      if (parentModelId.equals(fundedProject.getProjectModel().getId())) {
        computationService.updateComputationValueForProject(computationElement,fundedProject,user);
      }
      if (parentModelId.equals(fundingProject.getProjectModel().getId())) {
        computationService.updateComputationValueForProject(computationElement,fundingProject,user);
      }
    }
  }
}",0.9101899827288428
35521,"/** 
 * Add a value change handler to the given element if it is a dependency of a computation.
 * @param element Element to listen.
 * @param component Component associated to the given element.
 * @param modifications Value change list.
 */
public void listenToValueChangesOfElement(final FlexibleElementDTO element,final Component component,final List<ValueEvent> modifications){
  if (element instanceof ComputationElementDTO) {
    components.put(element,(Field<String>)component);
    elementsWithHandlers.put(element.getId(),(ComputationElementDTO)element);
    initialUpdateIfCurrentValueIsEmpty((ComputationElementDTO)element,(Field<String>)component);
  }
  final List<ComputationElementDTO> computationElements=dependencies.get(element);
  if (computationElements != null) {
    element.addValueHandler(new ValueHandler(){
      @Override public void onValueChange(      ValueEvent event){
        updateComputations(computationElements,modifications);
      }
    }
);
  }
}","/** 
 * Add a value change handler to the given element if it is a dependency of a computation.
 * @param element Element to listen.
 * @param component Component associated to the given element.
 * @param modifications Value change list.
 */
public void listenToValueChangesOfElement(final FlexibleElementDTO element,final Component component,final List<ValueEvent> modifications){
  if (component == null) {
    Log.trace(""String_Node_Str"" + element.getId() + ""String_Node_Str"");
    return;
  }
  if (element instanceof ComputationElementDTO) {
    @SuppressWarnings(""String_Node_Str"") final Field<String> field=(Field<String>)component;
    components.put(element,field);
    elementsWithHandlers.put(element.getId(),(ComputationElementDTO)element);
    initialUpdateIfCurrentValueIsEmpty((ComputationElementDTO)element,field);
  }
  final List<ComputationElementDTO> computationElements=dependencies.get(element);
  if (computationElements != null) {
    element.addValueHandler(new ValueHandler(){
      @Override public void onValueChange(      ValueEvent event){
        updateComputations(computationElements,modifications);
      }
    }
);
  }
}",0.8664799253034547
35522,"private Integer getOrgUnitId(){
  Integer orgUnitId=null;
  if (currentContainerDTO instanceof OrgUnitDTO) {
    orgUnitId=((OrgUnitDTO)currentContainerDTO).getOrgUnitId();
  }
 else   if (currentContainerDTO instanceof ProjectDTO) {
    orgUnitId=((ProjectDTO)currentContainerDTO).getOrgUnitId();
  }
  return orgUnitId;
}","private Integer getOrgUnitId(){
  Integer orgUnitId=null;
  if (currentContainerDTO instanceof DefaultFlexibleElementContainer) {
    orgUnitId=((DefaultFlexibleElementContainer)currentContainerDTO).getOrgUnitId();
  }
  return orgUnitId;
}",0.4404973357015986
35523,"/** 
 * Returns the permission   {@link PrivacyGroupPermissionEnum} for the given authentication and the given privacy group.
 * @param authentication The authentication.
 * @param group The privacy group.
 * @return The permission for the authentication and this privacy group.
 */
public static PrivacyGroupPermissionEnum getPermissionForOrgUnit(final Authentication authentication,final Integer orgUnitId,final PrivacyGroupDTO group){
  if (authentication == null) {
    return PrivacyGroupPermissionEnum.NONE;
  }
  Map<Integer,ProfileDTO> aggregatedProfiles=authentication.getAggregatedProfiles();
  if (aggregatedProfiles == null) {
    return PrivacyGroupPermissionEnum.NONE;
  }
  return getPermission(aggregatedProfiles.get(orgUnitId),group);
}","/** 
 * Returns the permission   {@link PrivacyGroupPermissionEnum} for the given authentication and the given privacy group.
 * @param authentication The authentication.
 * @param group The privacy group.
 * @return The permission for the authentication and this privacy group.
 */
public static PrivacyGroupPermissionEnum getPermissionForOrgUnit(final Authentication authentication,final Integer orgUnitId,final PrivacyGroupDTO group){
  if (authentication == null) {
    return PrivacyGroupPermissionEnum.NONE;
  }
  if (orgUnitId == null) {
    return PrivacyGroupPermissionEnum.WRITE;
  }
  Map<Integer,ProfileDTO> aggregatedProfiles=authentication.getAggregatedProfiles();
  if (aggregatedProfiles == null) {
    return PrivacyGroupPermissionEnum.NONE;
  }
  return getPermission(aggregatedProfiles.get(orgUnitId),group);
}",0.9519595448798988
35524,public native boolean setOnline(boolean online);,public native void setOnline(boolean online);,0.9032258064516128
35525,"/** 
 * Shows the given message into the popup.<br/> <br/> There is only one instance of the popup, the previous message may be erased.
 * @param title The title.
 * @param html The message.
 * @param yesCallback The callback for the yes action.
 * @param noCallback The callback for the no action.
 */
static void show(final String title,final String html,ConfirmCallback yesCallback,ConfirmCallback noCallback){
  clear();
  Confirm.yesCallback=yesCallback;
  Confirm.noCallback=noCallback;
  popup.setTitle(ClientUtils.isNotBlank(title) ? title : MessageType.getTitle(MessageType.QUESTION));
  popup.setPageMessage(html,MessageType.QUESTION);
  if (!visible) {
    popup.center();
    visible=true;
  }
}","/** 
 * Shows the given message into the popup. There is only one instance of the popup, the previous message may be erased.
 * @param title The title.
 * @param html The message.
 * @param yesCallback The callback for the yes action.
 * @param noCallback The callback for the no action.
 */
static void show(final String title,final String html,ConfirmCallback yesCallback,ConfirmCallback noCallback){
  clear();
  Confirm.yesCallback=yesCallback;
  Confirm.noCallback=noCallback;
  popup.setTitle(ClientUtils.isNotBlank(title) ? title : MessageType.getTitle(MessageType.QUESTION));
  popup.setPageMessage(html,MessageType.QUESTION);
  if (!visible) {
    popup.center();
    visible=true;
  }
}",0.99215965787598
35526,"/** 
 * Hides the presenter's popup view.<br/> If the presenter's view is not a   {@link ViewPopupInterface} implementation, the method does nothing.
 */
protected final void hideView(){
  if (isPopupView()) {
    ((ViewPopupInterface)view).hide();
  }
}","/** 
 * Hides the presenter's popup view. If the presenter's view is not a   {@link ViewPopupInterface} implementation, the method does nothing.
 */
protected final void hideView(){
  if (isPopupView()) {
    ((ViewPopupInterface)view).hide();
  }
}",0.9900596421471172
35527,"/** 
 * Checks if a message needs to be displayed in the application header. If it does, the message is sent to the application presenter's view.<br/> <br/> Also check if the   {@code page} is still in progress from retrieved server properties. If this is the case, awarning message is displayed.
 * @param page The accessed page.
 */
private void displayApplicationMessage(final Page page){
}","/** 
 * Checks if a message needs to be displayed in the application header. If it does, the message is sent to the application presenter's view. Also check if the   {@code page} is still in progress from retrieved server properties. If this is the case, awarning message is displayed.
 * @param page The accessed page.
 */
private void displayApplicationMessage(final Page page){
}",0.9858064516129031
35528,"/** 
 * Displays the given message at the top of the current page. If the message is   {@code null} or {@code empty}, the message will be hidden.<br/> <br/> <strong>The page message must be initialized in the   {@link #onPageRequest} method.</strong>
 * @param message The message as HTML.
 */
protected final void displayPageMessage(final String message,MessageType type){
  if (isPopupView()) {
    ((ViewPopupInterface)view).setPageMessage(message,type);
  }
 else {
    injector.getApplicationPresenter().setPageMessage(message,type);
  }
}","/** 
 * Displays the given message at the top of the current page. If the message is   {@code null} or {@code empty}, the message will be hidden. <strong>The page message must be initialized in the   {@link #onPageRequest} method.</strong>
 * @param message The message as HTML.
 */
protected final void displayPageMessage(final String message,MessageType type){
  if (isPopupView()) {
    ((ViewPopupInterface)view).setPageMessage(message,type);
  }
 else {
    injector.getApplicationPresenter().setPageMessage(message,type);
  }
}",0.989786443825441
35529,"/** 
 * init calendar.
 * @param year
 * @return 
 */
private static Calendar initCalendar(int year){
  Calendar cal=Calendar.getInstance();
  cal.set(Calendar.YEAR,year);
  cal.set(Calendar.MONTH,0);
  cal.set(Calendar.DAY_OF_MONTH,1);
  return cal;
}","/** 
 * init calendar.
 * @param year
 * @return
 */
private static Calendar initCalendar(int year){
  final Calendar cal=Calendar.getInstance();
  cal.set(Calendar.YEAR,year);
  cal.set(Calendar.MONTH,0);
  cal.set(Calendar.DAY_OF_MONTH,1);
  return cal;
}",0.986247544204322
35530,"public static void main(String[] args){
}","public static void main(String[] args){
  LOGGER.info(""String_Node_Str"");
  Integer projectId;
  Integer count;
  final Injector injector=Guice.createInjector(new ConfigurationModule(),new PersistenceModule(),new MapperModule(),new I18nServerModule());
  if (args != null && args.length > 1 && StringUtils.isNumeric(args[0]) && StringUtils.isNumeric(args[1])) {
    count=Integer.valueOf(args[1]);
    projectId=Integer.valueOf(args[0]);
  }
 else {
    LOGGER.error(""String_Node_Str"");
    LOGGER.info(""String_Node_Str"");
    return;
  }
  injector.getInstance(PersistService.class).start();
  final ProjectDAO projectDAO=injector.getInstance(ProjectDAO.class);
  final Project project=projectDAO.findById(projectId);
  if (project != null) {
    final EntityManager em=injector.getProvider(EntityManager.class).get();
    em.getTransaction().begin();
    LOGGER.info(""String_Node_Str"" + count + ""String_Node_Str"");
    try {
      final Calendar cal=count < 365 ? initCalendar(2016) : initCalendar(2015);
      for (int i=0; i < count; i++) {
        cal.add(Calendar.DAY_OF_MONTH,1);
        PersonalEvent personEvent=personalEventFactory(cal.getTime(),project.getCalendarId(),i);
        em.merge(personEvent);
      }
      em.getTransaction().commit();
    }
 catch (    Exception e) {
      LOGGER.error(""String_Node_Str"",e);
      em.getTransaction().rollback();
    }
 finally {
      injector.getInstance(PersistService.class).stop();
    }
    LOGGER.info(""String_Node_Str"");
  }
 else {
    LOGGER.error(""String_Node_Str"" + projectId + ""String_Node_Str"");
    injector.getInstance(PersistService.class).stop();
    LOGGER.info(""String_Node_Str"");
  }
}",0.0480938416422287
35531,"/** 
 * Instanciate  and initialize PersonalEvent.
 * @param startDate
 * @param parentCalendarId
 * @param i
 * @return 
 */
public static PersonalEvent personalEventFactory(Date startDate,Integer parentCalendarId,int i){
  PersonalEvent personalEvent=new PersonalEvent();
  personalEvent.setDateCreated(new Date());
  personalEvent.setDescription(""String_Node_Str"" + i);
  personalEvent.setSummary(""String_Node_Str"" + i);
  personalEvent.setStartDate(startDate);
  Calendar cal=Calendar.getInstance();
  cal.setTime(startDate);
  cal.set(Calendar.HOUR_OF_DAY,Calendar.HOUR_OF_DAY + 1);
  personalEvent.setEndDate(cal.getTime());
  personalEvent.setCalendarId(parentCalendarId);
  return personalEvent;
}","/** 
 * Instanciate and initialize PersonalEvent.
 * @param startDate
 * @param parentCalendarId
 * @param i
 * @return
 */
public static PersonalEvent personalEventFactory(Date startDate,Integer parentCalendarId,int i){
  final PersonalEvent personalEvent=new PersonalEvent();
  personalEvent.setDateCreated(new Date());
  personalEvent.setDescription(""String_Node_Str"" + i);
  personalEvent.setSummary(""String_Node_Str"" + i);
  personalEvent.setStartDate(startDate);
  final Calendar cal=Calendar.getInstance();
  cal.setTime(startDate);
  cal.set(Calendar.HOUR_OF_DAY,Calendar.HOUR_OF_DAY + 1);
  personalEvent.setEndDate(cal.getTime());
  personalEvent.setCalendarId(parentCalendarId);
  return personalEvent;
}",0.9901408450704224
35532,"/** 
 * Returns the <em>error</em> value for the given   {@code key}. <pre> error(""my.key"") -> ""???my.key???"" </pre>
 * @param key The key for which no value can be found.
 * @return The <em>error</em> value for the given {@code key}.
 */
public static final String error(final String key){
  return ERROR_TAG + key + ERROR_TAG;
}","/** 
 * Returns the <em>error</em> value for the given   {@code key}. <pre> error(""my.key"") → ""???my.key???"" </pre>
 * @param key The key for which no value can be found.
 * @return The <em>error</em> value for the given {@code key}.
 */
public static final String error(final String key){
  return ERROR_TAG + key + ERROR_TAG;
}",0.9954476479514416
35533,"/** 
 * Builds a property name which   {@code parts} are separated by a dot character.<pre> n(null) -> """" n("""") -> """" n(""my"", ""Key"", "" rocks "") -> ""my.Key.rocks"" n(""my"", ""Key"", ""rocks.like.hell"") -> ""my.Key.rocks.like.hell"" </pre>
 * @param parts The property name parts.
 * @return The property name.
 */
public static final String n(final String... parts){
  final StringBuilder builder=new StringBuilder();
  if (parts == null) {
    return builder.toString();
  }
  for (  final String part : parts) {
    if (builder.length() > 0 && ClientUtils.isNotBlank(part)) {
      builder.append('.');
    }
    builder.append(ClientUtils.trimToEmpty(part));
  }
  return builder.toString();
}","/** 
 * Builds a property name which   {@code parts} are separated by a dot character.<pre> n(null) → """" n("""") → """" n(""my"", ""Key"", "" rocks "") → ""my.Key.rocks"" n(""my"", ""Key"", ""rocks.like.hell"") → ""my.Key.rocks.like.hell"" </pre>
 * @param parts The property name parts.
 * @return The property name.
 */
public static final String n(final String... parts){
  final StringBuilder builder=new StringBuilder();
  if (parts == null) {
    return builder.toString();
  }
  for (  final String part : parts) {
    if (builder.length() > 0 && ClientUtils.isNotBlank(part)) {
      builder.append('.');
    }
    builder.append(ClientUtils.trimToEmpty(part));
  }
  return builder.toString();
}",0.97667638483965
35534,"/** 
 * Returns if the given   {@code key} is an error key produced by {@link #error(String)} method.<pre> isErrorKey(""my.key"") -> false isErrorKey(""???my.key???"") -> true </pre>
 * @param key The key value.
 * @return {@code true} if the given {@code key} is an error key, {@code false} otherwise.
 */
public static final boolean isErrorKey(final String key){
  return key != null && key.startsWith(ERROR_TAG) && key.endsWith(ERROR_TAG);
}","/** 
 * Returns if the given   {@code key} is an error key produced by {@link #error(String)} method.<pre> isErrorKey(""my.key"") → false isErrorKey(""???my.key???"") → true </pre>
 * @param key The key value.
 * @return {@code true} if the given {@code key} is an error key, {@code false} otherwise.
 */
public static final boolean isErrorKey(final String key){
  return key != null && key.startsWith(ERROR_TAG) && key.endsWith(ERROR_TAG);
}",0.9931662870159452
35535,"/** 
 * Method executed once <b>all</b> executed commands are complete (success or error).<br/> <em>Can be overridden by custom implementation (default implementation does nothing).</em>
 */
protected void onComplete(){
}","/** 
 * Method executed once <b>all</b> executed commands are complete (success or error). <em>Can be overridden by custom implementation (default implementation does nothing).</em>
 */
protected void onComplete(){
}",0.988558352402746
35536,"/** 
 * Returns if the given   {@link Page} instance is associated to a popup view.<br/>If the page is  {@code null} or is not registered into page manager, the method returns {@code false}.
 * @param page The page instance.
 * @return {@code true} if the given {@link Page} instance is associated to a popup view, {@code false} otherwise.
 */
public boolean isPopupView(final Page page){
  if (page == null || pages.get(page.getToken()) == null) {
    return false;
  }
  return pages.get(page.getToken()).right;
}","/** 
 * Returns if the given   {@link Page} instance is associated to a popup view.If the page is  {@code null} or is not registered into page manager, the method returns {@code false}.
 * @param page The page instance.
 * @return {@code true} if the given {@link Page} instance is associated to a popup view, {@code false} otherwise.
 */
public boolean isPopupView(final Page page){
  if (page == null || pages.get(page.getToken()) == null) {
    return false;
  }
  return pages.get(page.getToken()).right;
}",0.9951219512195122
35537,"/** 
 * Adds a new browser history entry only if the requested page exists among the   {@code pages} map attribute.<br/>Does nothing if given  {@code pageRequest} references a pop-up view or a <em>skip history</em> page.
 * @param request Page request.
 */
private void newPlace(final PageRequest request){
  final Page page=request.getPage();
  if (page != null && (page.skipHistory() || isPopupView(page))) {
    return;
  }
  History.newItem(request.toString(),false);
}","/** 
 * Adds a new browser history entry only if the requested page exists among the   {@code pages} map attribute.Does nothing if given  {@code pageRequest} references a pop-up view or a <em>skip history</em> page.
 * @param request Page request.
 */
private void newPlace(final PageRequest request){
  final Page page=request.getPage();
  if (page != null && (page.skipHistory() || isPopupView(page))) {
    return;
  }
  History.newItem(request.toString(),false);
}",0.9946865037194474
35538,"/** 
 * Updates zones.<br/> Does nothing if given   {@code pageRequest} references a pop-up view.
 * @param pageRequest The page request (containing access rights).
 */
private void updateZones(final PageRequest pageRequest){
  final Page page=pageRequest.getPage();
  if (page != null && isPopupView(page)) {
    return;
  }
  eventBus.updateZone(Zone.ORG_BANNER);
  eventBus.updateZone(Zone.AUTH_BANNER);
  eventBus.updateZone(Zone.OFFLINE_BANNER);
  eventBus.updateZoneRequest(Zone.MENU_BANNER.requestWith(RequestParameter.REQUEST,pageRequest));
}","/** 
 * Updates zones. Does nothing if given   {@code pageRequest} references a pop-up view.
 * @param pageRequest The page request (containing access rights).
 */
private void updateZones(final PageRequest pageRequest){
  final Page page=pageRequest.getPage();
  if (page != null && isPopupView(page)) {
    return;
  }
  eventBus.updateZone(Zone.ORG_BANNER);
  eventBus.updateZone(Zone.AUTH_BANNER);
  eventBus.updateZone(Zone.OFFLINE_BANNER);
  eventBus.updateZoneRequest(Zone.MENU_BANNER.requestWith(RequestParameter.REQUEST,pageRequest));
}",0.9954337899543378
35539,"/** 
 * Returns the current authentication.<br/> If no user is currently authenticated, the method returns an empty   {@link Authentication} instance (with{@code null} token).
 * @return The current authentication or empty authentication (never returns {@code null}).
 */
@Override public Authentication get(){
  if (isAnonymous()) {
    clearAuthentication();
  }
  return authentication;
}","/** 
 * Returns the current authentication. If no user is currently authenticated, the method returns an empty   {@link Authentication} instance (with{@code null} token).
 * @return The current authentication or empty authentication (never returns {@code null}).
 */
@Override public Authentication get(){
  if (isAnonymous()) {
    clearAuthentication();
  }
  return authentication;
}",0.9935649935649936
35540,"/** 
 * Shows the given message into the popup.<br/> <br/> There is only one instance of the popup, the previous message may be erased.
 * @param title The title.
 * @param html The message.
 * @param yesCallback The callback for the yes action.
 * @param noCallback The callback for the no action.
 */
static void show(final String title,final String html,ConfirmCallback yesCallback,ConfirmCallback noCallback){
  clear();
  Confirm.yesCallback=yesCallback;
  Confirm.noCallback=noCallback;
  popup.setTitle(ClientUtils.isNotBlank(title) ? title : MessageType.getTitle(MessageType.QUESTION));
  popup.setPageMessage(html,MessageType.QUESTION);
  if (!visible) {
    popup.center();
    visible=true;
  }
}","/** 
 * Shows the given message into the popup. There is only one instance of the popup, the previous message may be erased.
 * @param title The title.
 * @param html The message.
 * @param yesCallback The callback for the yes action.
 * @param noCallback The callback for the no action.
 */
static void show(final String title,final String html,ConfirmCallback yesCallback,ConfirmCallback noCallback){
  clear();
  Confirm.yesCallback=yesCallback;
  Confirm.noCallback=noCallback;
  popup.setTitle(ClientUtils.isNotBlank(title) ? title : MessageType.getTitle(MessageType.QUESTION));
  popup.setPageMessage(html,MessageType.QUESTION);
  if (!visible) {
    popup.center();
    visible=true;
  }
}",0.99215965787598
35541,"/** 
 * Shows the given message into the popup.<br/> <br/> There is only one instance of the popup, the previous message may be erased.
 * @param title The title.
 * @param html The message.
 * @param type The message's type.
 */
static void show(final String title,final String html,MessageType type){
  clear();
  popup.setTitle(ClientUtils.isNotBlank(title) ? title : MessageType.getTitle(type));
  popup.setPageMessage(html,type);
  if (!visible) {
    popup.center();
    visible=true;
  }
}","/** 
 * Shows the given message into the popup. There is only one instance of the popup, the previous message may be erased.
 * @param title The title.
 * @param html The message.
 * @param type The message's type.
 */
static void show(final String title,final String html,MessageType type){
  clear();
  popup.setTitle(ClientUtils.isNotBlank(title) ? title : MessageType.getTitle(type));
  popup.setPageMessage(html,type);
  if (!visible) {
    popup.center();
    visible=true;
  }
}",0.9887869520897044
35542,"/** 
 * Updates page title. Can be used to update title after asynchronous data loading for example.<br/> The title area is automatically hidden if the given   {@code pageTitle} is invalid.
 * @param pageTitle The new page title.
 */
public void setPageTitle(String pageTitle){
}","/** 
 * Updates page title. Can be used to update title after asynchronous data loading for example. The title area is automatically hidden if the given   {@code pageTitle} is invalid.
 * @param pageTitle The new page title.
 */
public void setPageTitle(String pageTitle){
}",0.9909584086799276
35543,"/** 
 * Hides the presenter's popup view.<br/> If the presenter's view is not a   {@link ViewPopupInterface} implementation, the method does nothing.
 */
protected final void hideView(){
  if (isPopupView()) {
    ((ViewPopupInterface)view).hide();
  }
}","/** 
 * Hides the presenter's popup view. If the presenter's view is not a   {@link ViewPopupInterface} implementation, the method does nothing.
 */
protected final void hideView(){
  if (isPopupView()) {
    ((ViewPopupInterface)view).hide();
  }
}",0.9900596421471172
35544,"/** 
 * Sets the current presenter page title.<br/> If the presenter's view is a   {@link ViewPopupInterface} implementation, the popup title is dynamically updated.
 * @param title The new page title.
 */
protected final void setPageTitle(String title){
  if (getPage() == null) {
    return;
  }
  getPage().setTitle(title);
  if (isPopupView()) {
    ((ViewPopupInterface)view).setPopupTitle(title);
  }
 else {
    injector.getApplicationPresenter().setPageTitle(title);
  }
}","/** 
 * Sets the current presenter page title. If the presenter's view is a   {@link ViewPopupInterface} implementation, the popup title is dynamically updated.
 * @param title The new page title.
 */
protected final void setPageTitle(String title){
  if (getPage() == null) {
    return;
  }
  getPage().setTitle(title);
  if (isPopupView()) {
    ((ViewPopupInterface)view).setPopupTitle(title);
  }
 else {
    injector.getApplicationPresenter().setPageTitle(title);
  }
}",0.9947643979057592
35545,"/** 
 * Checks if a message needs to be displayed in the application header. If it does, the message is sent to the application presenter's view.<br/> <br/> Also check if the   {@code page} is still in progress from retrieved server properties. If this is the case, awarning message is displayed.
 * @param page The accessed page.
 */
private void displayApplicationMessage(final Page page){
}","/** 
 * Checks if a message needs to be displayed in the application header. If it does, the message is sent to the application presenter's view. Also check if the   {@code page} is still in progress from retrieved server properties. If this is the case, awarning message is displayed.
 * @param page The accessed page.
 */
private void displayApplicationMessage(final Page page){
}",0.9858064516129031
35546,"/** 
 * Displays the given message at the top of the current page. If the message is   {@code null} or {@code empty}, the message will be hidden.<br/> <br/> <strong>The page message must be initialized in the   {@link #onPageRequest} method.</strong>
 * @param message The message as HTML.
 */
protected final void displayPageMessage(final String message,MessageType type){
  if (isPopupView()) {
    ((ViewPopupInterface)view).setPageMessage(message,type);
  }
 else {
    injector.getApplicationPresenter().setPageMessage(message,type);
  }
}","/** 
 * Displays the given message at the top of the current page. If the message is   {@code null} or {@code empty}, the message will be hidden. <strong>The page message must be initialized in the   {@link #onPageRequest} method.</strong>
 * @param message The message as HTML.
 */
protected final void displayPageMessage(final String message,MessageType type){
  if (isPopupView()) {
    ((ViewPopupInterface)view).setPageMessage(message,type);
  }
 else {
    injector.getApplicationPresenter().setPageMessage(message,type);
  }
}",0.989786443825441
35547,"/** 
 * This method is called when a   {@link PageRequestEvent} is fired <b>and</b> matches with the value from{@link #getPage()}.<br/> This mechanism ensures that method is executed on each page access.
 * @param request The request.
 */
void onPageRequest(final PageRequest request);","/** 
 * This method is called when a   {@link PageRequestEvent} is fired <b>and</b> matches with the value from{@link #getPage()}. This mechanism ensures that method is executed on each page access.
 * @param request The request.
 */
void onPageRequest(final PageRequest request);",0.991150442477876
35548,"/** 
 * This method is called when a   {@link ZoneRequestEvent} is fired <b>and</b> matches with the value from{@link #getZone()}.<br/> This mechanism ensures that method is executed on each zone update.
 * @param zoneRequest The zone request.
 */
void onZoneRequest(final ZoneRequest zoneRequest);","/** 
 * This method is called when a   {@link ZoneRequestEvent} is fired <b>and</b> matches with the value from{@link #getZone()}. This mechanism ensures that method is executed on each zone update.
 * @param zoneRequest The zone request.
 */
void onZoneRequest(final ZoneRequest zoneRequest);",0.9915397631133672
35549,"/** 
 * Gets the character indexed by the given <code>index</code> in the alphabet. Indexes start at <code>start</code> and ends at <code>start + 25</code>.<br/> <br/> <ul> <li>start -> a</li> <li>start + 1 -> b</li> <li>start + 2 -> c</li> <li>...</li> <li>start + 25 -> z</li> </ul>
 * @param index The character index.
 * @param upper Upper character?
 * @param start The index of the first letter <code>a</code>.
 * @return The corresponding character.
 */
public static char getLetter(int index,boolean upper,int start){
  index=start > 0 ? index - start : index + start;
  if (index < 0 || index > 25) {
    throw new IllegalArgumentException(""String_Node_Str"" + index + ""String_Node_Str"");
  }
  final int shift;
  if (upper) {
    shift=65;
  }
 else {
    shift=97;
  }
  return (char)(index + shift);
}","/** 
 * Gets the character indexed by the given <code>index</code> in the alphabet. Indexes start at <code>start</code> and ends at <code>start + 25</code>. <ul> <li>start → a</li> <li>start + 1 → b</li> <li>start + 2 → c</li> <li>...</li> <li>start + 25 → z</li> </ul>
 * @param index The character index.
 * @param upper Upper character?
 * @param start The index of the first letter <code>a</code>.
 * @return The corresponding character.
 */
public static char getLetter(int index,boolean upper,int start){
  index=start > 0 ? index - start : index + start;
  if (index < 0 || index > 25) {
    throw new IllegalArgumentException(""String_Node_Str"" + index + ""String_Node_Str"");
  }
  final int shift;
  if (upper) {
    shift=65;
  }
 else {
    shift=97;
  }
  return (char)(index + shift);
}",0.937228091982598
35550,"/** 
 * Returns if this action can be now performed. A <code>null</code> or empty string means that the action can be perform. A non-empty string means that the action cannot be performed for the moment.<br/> The returned string will be used as the cause of this unavailability.
 * @return The unavailability message, or <code>null</code>.
 */
public abstract String canBePerformed();","/** 
 * Returns if this action can be now performed. A <code>null</code> or empty string means that the action can be perform. A non-empty string means that the action cannot be performed for the moment. The returned string will be used as the cause of this unavailability.
 * @return The unavailability message, or <code>null</code>.
 */
public abstract String canBePerformed();",0.9934469200524246
35551,"/** 
 * View revealed callback.<br/> <b>Executed each time the view is revealed.</b>
 */
void onViewRevealed();","/** 
 * View revealed callback. <b>Executed each time the view is revealed.</b>
 */
void onViewRevealed();",0.976958525345622
35552,"/** 
 * Initializes the view components.<br/> <b>Executed only one time on first load.</b>
 */
void initialize();","/** 
 * Initializes the view components. <b>Executed only one time on first load.</b>
 */
void initialize();",0.9773755656108596
35553,"/** 
 * {@inheritDoc}
 */
@Override public void onBind(){
  customChoices=new HashSet<String>();
  disabledCustomChoices=new HashSet<String>();
  view.getTypeField().addListener(Events.Select,new Listener<BaseEvent>(){
    @Override public void handleEvent(    final BaseEvent be){
      final String code=view.getCodeField().getValue();
      final LogicalElementType type=TypeModel.getType(view.getTypeField().getValue());
      loadFlexibleElementSpecificFields(flexibleElement,type);
      if (type == ElementTypeEnum.FILES_LIST || type == ElementTypeEnum.REPORT || type == ElementTypeEnum.REPORT_LIST) {
        view.getExportableField().hide();
        view.getExportableField().clear();
      }
 else {
        view.getExportableField().show();
        view.getExportableField().setValue(flexibleElement != null ? flexibleElement.getExportable() : null);
      }
      view.getCodeField().setValue(code);
    }
  }
);
  view.getContainerField().addListener(Events.Select,new Listener<BaseEvent>(){
    @Override public void handleEvent(    final BaseEvent be){
      final BaseModelData hasLayout=view.getContainerField().getValue();
      final LayoutDTO selectedContainer=EditLayoutGroupAdminPresenter.getLayout(hasLayout);
      if (hasLayout instanceof ProjectBannerDTO || hasLayout instanceof OrgUnitBannerDTO) {
        view.getBannerField().setValue(true);
      }
      view.getLayoutGroupField().getStore().removeAll();
      view.getLayoutGroupField().disable();
      if (selectedContainer != null) {
        view.getLayoutGroupField().getStore().add(selectedContainer.getGroups());
        view.getLayoutGroupField().getStore().commitChanges();
        view.getLayoutGroupField().setValue(view.getLayoutGroupField().getStore().getAt(0));
        view.getLayoutGroupField().enable();
      }
    }
  }
);
  view.getBannerField().addListener(Events.Change,new Listener<BaseEvent>(){
    @Override public void handleEvent(    final BaseEvent be){
      final boolean checked=ClientUtils.isTrue(view.getBannerField().getValue());
      view.getBannerPositionField().setValue(null);
      view.getBannerPositionField().setEnabled(checked);
      view.getBannerPositionField().setAllowBlank(!checked);
    }
  }
);
  view.getCustomChoiceAddButton().addSelectionListener(new SelectionListener<ButtonEvent>(){
    @Override public void componentSelected(    final ButtonEvent ce){
      onAddCustomChoice(view.getCustomChoiceField().getValue());
    }
  }
);
  view.getCategoryTypeField().addListener(Events.Select,new Listener<FieldEvent>(){
    @Override public void handleEvent(    final FieldEvent event){
      final CategoryTypeDTO value=view.getCategoryTypeField().getValue();
      view.setCustomChoiceAddFieldEnabled(value == null || DEFAULT_CATEGORY_TYPE.equals(value));
    }
  }
);
  view.getAnchorAddSubField().addClickHandler(new ClickHandler(){
    @Override public void onClick(    ClickEvent event){
      if (flexibleElement instanceof BudgetElementDTO) {
        BudgetElementDTO budgetElementDTO=(BudgetElementDTO)flexibleElement;
        BudgetSubFieldDTO budgetSubFieldDTO=new BudgetSubFieldDTO();
        budgetElementDTO.getBudgetSubFields().add(budgetSubFieldDTO);
        eventBus.navigateRequest(Page.ADMIN_EDIT_FLEXIBLE_ELEMENT_ADD_BUDGETSUBFIELD.request().addData(RequestParameter.DTO,budgetSubFieldDTO));
      }
    }
  }
);
  view.getSaveButton().addSelectionListener(new SelectionListener<ButtonEvent>(){
    @Override public void componentSelected(    final ButtonEvent ce){
      onSaveAction();
    }
  }
);
  registerHandler(eventBus.addHandler(UpdateEvent.getType(),new UpdateHandler(){
    @Override public void onUpdate(    final UpdateEvent event){
      if (event.concern(UpdateEvent.EDIT_FLEXIBLEELEMNT_EDIT_BUDGETSUBFIELD)) {
        loadFlexibleElement(flexibleElement);
      }
    }
  }
));
  view.getFormulaField().setValidator(new Validator(){
    @Override public String validate(    Field<?> field,    String value){
      if (value == null || value.trim().isEmpty()) {
        return null;
      }
      final Computation computation=Computations.parse(value,otherElements);
      if (computation != null && !computation.isBadFormula()) {
        final Set<String> badReferences=computation.getBadReferences();
        if (!badReferences.isEmpty()) {
          final String references=Collections.join(customChoices,""String_Node_Str"");
          if (computation.getBadReferences().size() == 1) {
            return I18N.MESSAGES.adminFlexibleComputationRuleBadReference(references);
          }
 else {
            return I18N.MESSAGES.adminFlexibleComputationRuleBadReferences(references);
          }
        }
      }
 else {
        return I18N.CONSTANTS.adminFlexibleComputationRuleBadFormula();
      }
      return null;
    }
  }
);
  view.setGridEventHandler(new HasGrid.GridEventHandler<FlexibleElementDTO>(){
    @Override public void onRowClickEvent(    final FlexibleElementDTO rowElement){
      MessageBox.prompt(I18N.CONSTANTS.adminFlexibleCode(),I18N.MESSAGES.adminFlexibleEditCode(rowElement.getFormattedLabel()),false,new Listener<MessageBoxEvent>(){
        @Override public void handleEvent(        MessageBoxEvent be){
          if (Dialog.OK.equals(be.getButtonClicked().getItemId())) {
            final String code=be.getValue();
            onRenameCodeAction(rowElement,code);
          }
        }
      }
);
    }
  }
);
}","/** 
 * {@inheritDoc}
 */
@Override public void onBind(){
  customChoices=new HashSet<String>();
  disabledCustomChoices=new HashSet<String>();
  view.getTypeField().addListener(Events.Select,new Listener<BaseEvent>(){
    @Override public void handleEvent(    final BaseEvent be){
      final String code=view.getCodeField().getValue();
      final LogicalElementType type=TypeModel.getType(view.getTypeField().getValue());
      loadFlexibleElementSpecificFields(flexibleElement,type);
      if (type == ElementTypeEnum.FILES_LIST || type == ElementTypeEnum.REPORT || type == ElementTypeEnum.REPORT_LIST) {
        view.getExportableField().hide();
        view.getExportableField().clear();
      }
 else {
        view.getExportableField().show();
        view.getExportableField().setValue(flexibleElement != null ? flexibleElement.getExportable() : null);
      }
      view.getCodeField().setValue(code);
    }
  }
);
  view.getContainerField().addListener(Events.Select,new Listener<BaseEvent>(){
    @Override public void handleEvent(    final BaseEvent be){
      final BaseModelData hasLayout=view.getContainerField().getValue();
      final LayoutDTO selectedContainer=EditLayoutGroupAdminPresenter.getLayout(hasLayout);
      if (hasLayout instanceof ProjectBannerDTO || hasLayout instanceof OrgUnitBannerDTO) {
        view.getBannerField().setValue(true);
      }
      view.getLayoutGroupField().getStore().removeAll();
      view.getLayoutGroupField().disable();
      if (selectedContainer != null) {
        view.getLayoutGroupField().getStore().add(selectedContainer.getGroups());
        view.getLayoutGroupField().getStore().commitChanges();
        view.getLayoutGroupField().setValue(view.getLayoutGroupField().getStore().getAt(0));
        view.getLayoutGroupField().enable();
      }
    }
  }
);
  view.getBannerField().addListener(Events.Change,new Listener<BaseEvent>(){
    @Override public void handleEvent(    final BaseEvent be){
      final boolean checked=ClientUtils.isTrue(view.getBannerField().getValue());
      view.getBannerPositionField().setValue(null);
      view.getBannerPositionField().setEnabled(checked);
      view.getBannerPositionField().setAllowBlank(!checked);
    }
  }
);
  view.getCustomChoiceAddButton().addSelectionListener(new SelectionListener<ButtonEvent>(){
    @Override public void componentSelected(    final ButtonEvent ce){
      onAddCustomChoice(view.getCustomChoiceField().getValue());
    }
  }
);
  view.getCategoryTypeField().addListener(Events.Select,new Listener<FieldEvent>(){
    @Override public void handleEvent(    final FieldEvent event){
      final CategoryTypeDTO value=view.getCategoryTypeField().getValue();
      view.setCustomChoiceAddFieldEnabled(value == null || DEFAULT_CATEGORY_TYPE.equals(value));
    }
  }
);
  view.getAnchorAddSubField().addClickHandler(new ClickHandler(){
    @Override public void onClick(    ClickEvent event){
      if (flexibleElement instanceof BudgetElementDTO) {
        BudgetElementDTO budgetElementDTO=(BudgetElementDTO)flexibleElement;
        BudgetSubFieldDTO budgetSubFieldDTO=new BudgetSubFieldDTO();
        budgetElementDTO.getBudgetSubFields().add(budgetSubFieldDTO);
        eventBus.navigateRequest(Page.ADMIN_EDIT_FLEXIBLE_ELEMENT_ADD_BUDGETSUBFIELD.request().addData(RequestParameter.DTO,budgetSubFieldDTO));
      }
    }
  }
);
  view.getSaveButton().addSelectionListener(new SelectionListener<ButtonEvent>(){
    @Override public void componentSelected(    final ButtonEvent ce){
      onSaveAction();
    }
  }
);
  registerHandler(eventBus.addHandler(UpdateEvent.getType(),new UpdateHandler(){
    @Override public void onUpdate(    final UpdateEvent event){
      if (event.concern(UpdateEvent.EDIT_FLEXIBLEELEMNT_EDIT_BUDGETSUBFIELD)) {
        loadFlexibleElement(flexibleElement);
      }
    }
  }
));
  view.getFormulaField().setValidator(new Validator(){
    @Override public String validate(    Field<?> field,    String value){
      if (value == null || value.trim().isEmpty()) {
        return null;
      }
      final Computation computation=Computations.parse(value,otherElements);
      if (computation != null && !computation.isBadFormula()) {
        final Set<String> badReferences=computation.getBadReferences();
        if (!badReferences.isEmpty()) {
          final String references=Collections.join(badReferences,""String_Node_Str"");
          if (computation.getBadReferences().size() == 1) {
            return I18N.MESSAGES.adminFlexibleComputationRuleBadReference(references);
          }
 else {
            return I18N.MESSAGES.adminFlexibleComputationRuleBadReferences(references);
          }
        }
      }
 else {
        return I18N.CONSTANTS.adminFlexibleComputationRuleBadFormula();
      }
      return null;
    }
  }
);
  view.setGridEventHandler(new HasGrid.GridEventHandler<FlexibleElementDTO>(){
    @Override public void onRowClickEvent(    final FlexibleElementDTO rowElement){
      MessageBox.prompt(I18N.CONSTANTS.adminFlexibleCode(),I18N.MESSAGES.adminFlexibleEditCode(rowElement.getFormattedLabel()),false,new Listener<MessageBoxEvent>(){
        @Override public void handleEvent(        MessageBoxEvent be){
          if (Dialog.OK.equals(be.getButtonClicked().getItemId())) {
            final String code=be.getValue();
            onRenameCodeAction(rowElement,code);
          }
        }
      }
);
    }
  }
);
}",0.9981529368304396
35554,"@Override public String validate(Field<?> field,String value){
  if (value == null || value.trim().isEmpty()) {
    return null;
  }
  final Computation computation=Computations.parse(value,otherElements);
  if (computation != null && !computation.isBadFormula()) {
    final Set<String> badReferences=computation.getBadReferences();
    if (!badReferences.isEmpty()) {
      final String references=Collections.join(customChoices,""String_Node_Str"");
      if (computation.getBadReferences().size() == 1) {
        return I18N.MESSAGES.adminFlexibleComputationRuleBadReference(references);
      }
 else {
        return I18N.MESSAGES.adminFlexibleComputationRuleBadReferences(references);
      }
    }
  }
 else {
    return I18N.CONSTANTS.adminFlexibleComputationRuleBadFormula();
  }
  return null;
}","@Override public String validate(Field<?> field,String value){
  if (value == null || value.trim().isEmpty()) {
    return null;
  }
  final Computation computation=Computations.parse(value,otherElements);
  if (computation != null && !computation.isBadFormula()) {
    final Set<String> badReferences=computation.getBadReferences();
    if (!badReferences.isEmpty()) {
      final String references=Collections.join(badReferences,""String_Node_Str"");
      if (computation.getBadReferences().size() == 1) {
        return I18N.MESSAGES.adminFlexibleComputationRuleBadReference(references);
      }
 else {
        return I18N.MESSAGES.adminFlexibleComputationRuleBadReferences(references);
      }
    }
  }
 else {
    return I18N.CONSTANTS.adminFlexibleComputationRuleBadFormula();
  }
  return null;
}",0.9875621890547264
35555,"/** 
 * Returns <code>true</code> if this element has a minimum or maximum value constraint.
 * @return <code>true</code> if this element has a minimum or maximum valueconstraint, <code>false</code> otherwise.
 */
public boolean hasConstraints(){
  return getMinimumValueConstraint().get() != null || getMinimumValueConstraint().get() != null;
}","/** 
 * Returns <code>true</code> if this element has a minimum or maximum value constraint.
 * @return <code>true</code> if this element has a minimum or maximum valueconstraint, <code>false</code> otherwise.
 */
public boolean hasConstraints(){
  return getMinimumValueConstraint().get() != null || getMaximumValueConstraint().get() != null;
}",0.9942028985507246
35556,"/** 
 * {@inheritDoc}
 */
@Override public void onBind(){
  view.getOrgUnitsTreeGrid().setTreeGridEventHandler(new TreeGridEventHandler<OrgUnitDTO>(){
    @Override public void onRowClickEvent(    final OrgUnitDTO rowElement){
      eventBus.navigateRequest(Page.ORGUNIT_DASHBOARD.requestWith(RequestParameter.ID,rowElement.getId()));
    }
  }
);
  view.getProjectsList().init(RefreshMode.ON_FIRST_TIME,LoadingMode.CHUNK);
  eventBus.addHandler(OfflineEvent.getType(),new OfflineHandler(){
    @Override public void handleEvent(    OfflineEvent event){
      initializeMenuButtons(event.getState());
    }
  }
);
}","/** 
 * {@inheritDoc}
 */
@Override public void onBind(){
  view.getOrgUnitsTreeGrid().setTreeGridEventHandler(new TreeGridEventHandler<OrgUnitDTO>(){
    @Override public void onRowClickEvent(    final OrgUnitDTO rowElement){
      eventBus.navigateRequest(Page.ORGUNIT_DASHBOARD.requestWith(RequestParameter.ID,rowElement.getId()));
    }
  }
);
  view.getProjectsList().init(RefreshMode.ON_FIRST_TIME,LoadingMode.CHUNK);
  view.setReminderOrMonitoredPointHandler(new ReminderOrMonitoredPointHandler(){
    @Override public void onLabelClickEvent(    Integer projectId){
      eventBus.navigateRequest(Page.PROJECT_DASHBOARD.requestWith(RequestParameter.ID,projectId));
    }
  }
);
  eventBus.addHandler(OfflineEvent.getType(),new OfflineHandler(){
    @Override public void handleEvent(    OfflineEvent event){
      initializeMenuButtons(event.getState());
    }
  }
);
}",0.8249496981891348
35557,Object renderActionsForModel(ImportDetails model);,"/** 
 * Creates actions buttons for the given model.
 * @param model Details of an import.
 * @return A widget containing the available actions.
 */
Widget renderActionsForModel(ImportDetails model);",0.3855421686746988
35558,"@Override public void onMouseOver(MouseOverEvent event){
  view.getChangePasswordHandler().setVisible(canChangeOwnPassword && true);
}","@Override public void onMouseOver(MouseOverEvent event){
  view.getChangePasswordHandler().setVisible(canChangeOwnPassword);
}",0.9692307692307692
35559,"/** 
 * {@inheritDoc}
 */
@Override public void onBind(){
  view.getLogoutHandler().addClickHandler(new ClickHandler(){
    @Override public void onClick(    ClickEvent event){
      eventBus.logout();
    }
  }
);
  view.getChangePasswordHandler().addClickHandler(new ClickHandler(){
    @Override public void onClick(    ClickEvent event){
      eventBus.navigateRequest(Page.CHANGE_OWN_PASSWORD.request());
    }
  }
);
  view.getNamePanel().addDomHandler(new MouseOverHandler(){
    @Override public void onMouseOver(    MouseOverEvent event){
      view.getChangePasswordHandler().setVisible(canChangeOwnPassword && true);
    }
  }
,MouseOverEvent.getType());
  view.getNamePanel().addDomHandler(new MouseOutHandler(){
    @Override public void onMouseOut(    MouseOutEvent event){
      view.getChangePasswordHandler().setVisible(false);
    }
  }
,MouseOutEvent.getType());
}","/** 
 * {@inheritDoc}
 */
@Override public void onBind(){
  view.getLogoutHandler().addClickHandler(new ClickHandler(){
    @Override public void onClick(    ClickEvent event){
      eventBus.logout();
    }
  }
);
  view.getChangePasswordHandler().addClickHandler(new ClickHandler(){
    @Override public void onClick(    ClickEvent event){
      eventBus.navigateRequest(Page.CHANGE_OWN_PASSWORD.request());
    }
  }
);
  view.getNamePanel().addDomHandler(new MouseOverHandler(){
    @Override public void onMouseOver(    MouseOverEvent event){
      view.getChangePasswordHandler().setVisible(canChangeOwnPassword);
    }
  }
,MouseOverEvent.getType());
  view.getNamePanel().addDomHandler(new MouseOutHandler(){
    @Override public void onMouseOut(    MouseOutEvent event){
      view.getChangePasswordHandler().setVisible(false);
    }
  }
,MouseOutEvent.getType());
}",0.9954493742889648
35560,"@Override public void onClick(ClickEvent event){
  setMenuVisible(false);
  eventBus.navigate(Page.OFFLINE_SELECT_FILES);
}","@Override public void onClick(ClickEvent event){
  if (!view.isEnabled(menuPanel.getTransferFilesAnchor())) {
    return;
  }
  if (lastState == ApplicationState.ONLINE) {
    setMenuVisible(false);
    eventBus.navigate(Page.OFFLINE_SELECT_FILES);
  }
}",0.6525198938992043
35561,"private void onStateChange(ApplicationState state){
  view.setStatus(state);
  if (syncHandlerRegistration != null) {
    syncHandlerRegistration.removeHandler();
    syncHandlerRegistration=null;
  }
  if (fileHandlerRegistration != null) {
    fileHandlerRegistration.removeHandler();
    fileHandlerRegistration=null;
  }
  final Anchor syncAnchor=view.getMenuPanel().getUpdateDatabaseAnchor();
  final Anchor fileAnchor=view.getMenuPanel().getTransferFilesAnchor();
switch (state) {
case OFFLINE:
    syncAnchor.getElement().getStyle().setDisplay(Style.Display.NONE);
  fileAnchor.getElement().getStyle().setDisplay(Style.Display.NONE);
RootPanel.getBodyElement().addClassName(""String_Node_Str"");
break;
case READY_TO_SYNCHRONIZE:
fileAnchor.getElement().getStyle().setDisplay(Style.Display.NONE);
syncAnchor.getElement().getStyle().clearDisplay();
syncAnchor.setText(I18N.CONSTANTS.offlineActionSynchronize());
syncHandlerRegistration=syncAnchor.addClickHandler(new ClickHandler(){
@Override public void onClick(ClickEvent event){
setMenuVisible(false);
pushAndPull();
}
}
);
RootPanel.getBodyElement().addClassName(""String_Node_Str"");
break;
case ONLINE:
syncAnchor.getElement().getStyle().clearDisplay();
syncAnchor.setText(I18N.CONSTANTS.offlineActionUpdateDatabase());
RootPanel.getBodyElement().removeClassName(""String_Node_Str"");
syncHandlerRegistration=syncAnchor.addClickHandler(new ClickHandler(){
@Override public void onClick(ClickEvent event){
setMenuVisible(false);
pull();
}
}
);
fileAnchor.getElement().getStyle().clearDisplay();
fileHandlerRegistration=fileAnchor.addClickHandler(new ClickHandler(){
@Override public void onClick(ClickEvent event){
setMenuVisible(false);
eventBus.navigate(Page.OFFLINE_SELECT_FILES);
}
}
);
break;
default :
break;
}
}","private void onStateChange(ApplicationState state){
  this.lastState=state;
  view.setStatus(state);
  final Anchor syncAnchor=view.getMenuPanel().getUpdateDatabaseAnchor();
  final Anchor fileAnchor=view.getMenuPanel().getTransferFilesAnchor();
switch (state) {
case OFFLINE:
    syncAnchor.getElement().getStyle().setDisplay(Style.Display.NONE);
  fileAnchor.getElement().getStyle().setDisplay(Style.Display.NONE);
RootPanel.getBodyElement().addClassName(""String_Node_Str"");
break;
case READY_TO_SYNCHRONIZE:
fileAnchor.getElement().getStyle().setDisplay(Style.Display.NONE);
syncAnchor.getElement().getStyle().clearDisplay();
syncAnchor.setText(I18N.CONSTANTS.offlineActionSynchronize());
RootPanel.getBodyElement().addClassName(""String_Node_Str"");
break;
case ONLINE:
syncAnchor.getElement().getStyle().clearDisplay();
syncAnchor.setText(I18N.CONSTANTS.offlineActionUpdateDatabase());
RootPanel.getBodyElement().removeClassName(""String_Node_Str"");
fileAnchor.getElement().getStyle().clearDisplay();
break;
default :
break;
}
}",0.6671423474848377
35562,"@Override public void onBind(){
  progresses=new EnumMap<ProgressType,Double>(ProgressType.class);
  view.getSynchronizePopup().initialize();
  eventBus.addHandler(OfflineEvent.getType(),new OfflineHandler(){
    @Override public void handleEvent(    OfflineEvent event){
      onStateChange(event.getState());
    }
  }
);
  ApplicationCacheManager.addHandler(createApplicationCacheEventHandler());
  final TransfertManager transfertManager=injector.getTransfertManager();
  if (transfertManager instanceof HasProgressListeners) {
    ((HasProgressListeners)transfertManager).setProgressListener(TransfertType.DOWNLOAD,createProgressAdapter(ProgressType.DOWNLOAD));
    ((HasProgressListeners)transfertManager).setProgressListener(TransfertType.UPLOAD,createProgressAdapter(ProgressType.UPLOAD));
  }
 else {
    view.getMenuPanel().removeFileBaseWidgets();
  }
  view.getMenuHandle().addDomHandler(new MouseOverHandler(){
    @Override public void onMouseOver(    MouseOverEvent event){
      linkHover=true;
      updateMenuVisibility();
    }
  }
,MouseOverEvent.getType());
  view.getMenuHandle().addDomHandler(new MouseOutHandler(){
    @Override public void onMouseOut(    MouseOutEvent event){
      linkHover=false;
      forceOpen=false;
      updateMenuVisibility();
    }
  }
,MouseOutEvent.getType());
  final OfflineMenuPanel menuPanel=view.getMenuPanel();
  menuPanel.addDomHandler(new MouseOverHandler(){
    @Override public void onMouseOver(    MouseOverEvent event){
      menuHover=true;
      updateMenuVisibility();
    }
  }
,MouseOverEvent.getType());
  menuPanel.addDomHandler(new MouseOutHandler(){
    @Override public void onMouseOut(    MouseOutEvent event){
      menuHover=false;
      forceOpen=false;
      updateMenuVisibility();
    }
  }
,MouseOutEvent.getType());
  menuPanel.setSigmahUpdateDate(ApplicationCacheManager.getUpdateDate());
  menuPanel.setDatabaseUpdateDate(getDatabaseUpdateDate());
  menuPanel.getRemoveOfflineDataAnchor().addClickHandler(new ClickHandler(){
    @Override public void onClick(    ClickEvent event){
      confirmUserDatabaseRemoval();
    }
  }
);
  updateProgressBars();
}","@Override public void onBind(){
  progresses=new EnumMap<ProgressType,Double>(ProgressType.class);
  view.getSynchronizePopup().initialize();
  eventBus.addHandler(OfflineEvent.getType(),new OfflineHandler(){
    @Override public void handleEvent(    OfflineEvent event){
      onStateChange(event.getState());
    }
  }
);
  ApplicationCacheManager.addHandler(createApplicationCacheEventHandler());
  final TransfertManager transfertManager=injector.getTransfertManager();
  if (transfertManager instanceof HasProgressListeners) {
    ((HasProgressListeners)transfertManager).setProgressListener(TransfertType.DOWNLOAD,createProgressAdapter(ProgressType.DOWNLOAD));
    ((HasProgressListeners)transfertManager).setProgressListener(TransfertType.UPLOAD,createProgressAdapter(ProgressType.UPLOAD));
  }
 else {
    view.getMenuPanel().removeFileBaseWidgets();
  }
  view.getMenuHandle().addDomHandler(new MouseOverHandler(){
    @Override public void onMouseOver(    MouseOverEvent event){
      linkHover=true;
      updateMenuVisibility();
    }
  }
,MouseOverEvent.getType());
  view.getMenuHandle().addDomHandler(new MouseOutHandler(){
    @Override public void onMouseOut(    MouseOutEvent event){
      linkHover=false;
      forceOpen=false;
      updateMenuVisibility();
    }
  }
,MouseOutEvent.getType());
  final OfflineMenuPanel menuPanel=view.getMenuPanel();
  menuPanel.addDomHandler(new MouseOverHandler(){
    @Override public void onMouseOver(    MouseOverEvent event){
      menuHover=true;
      updateMenuVisibility();
    }
  }
,MouseOverEvent.getType());
  menuPanel.addDomHandler(new MouseOutHandler(){
    @Override public void onMouseOut(    MouseOutEvent event){
      menuHover=false;
      forceOpen=false;
      updateMenuVisibility();
    }
  }
,MouseOutEvent.getType());
  menuPanel.setSigmahUpdateDate(ApplicationCacheManager.getUpdateDate());
  menuPanel.setDatabaseUpdateDate(getDatabaseUpdateDate());
  menuPanel.getRemoveOfflineDataAnchor().addClickHandler(new ClickHandler(){
    @Override public void onClick(    ClickEvent event){
      confirmUserDatabaseRemoval();
    }
  }
);
  updateProgressBars();
  menuPanel.getUpdateDatabaseAnchor().addClickHandler(new ClickHandler(){
    @Override public void onClick(    ClickEvent event){
      if (!view.isEnabled(menuPanel.getUpdateDatabaseAnchor())) {
        return;
      }
      if (lastState == ApplicationState.READY_TO_SYNCHRONIZE) {
        setMenuVisible(false);
        pushAndPull();
      }
 else       if (lastState == ApplicationState.ONLINE) {
        setMenuVisible(false);
        pull();
      }
    }
  }
);
  menuPanel.getTransferFilesAnchor().addClickHandler(new ClickHandler(){
    @Override public void onClick(    ClickEvent event){
      if (!view.isEnabled(menuPanel.getTransferFilesAnchor())) {
        return;
      }
      if (lastState == ApplicationState.ONLINE) {
        setMenuVisible(false);
        eventBus.navigate(Page.OFFLINE_SELECT_FILES);
      }
    }
  }
);
}",0.8351519875292284
35563,"/** 
 * Builds the monitored points grid columns configuration.
 * @return The monitored points grid columns list.
 */
private static List<ColumnConfig> createMonitoredPointsGridColumns(){
  final DateTimeFormat format=DateUtils.DATE_SHORT;
  final Date now=new Date();
  final ColumnConfig iconColumn=new ColumnConfig();
  iconColumn.setId(""String_Node_Str"");
  iconColumn.setHeaderHtml(""String_Node_Str"");
  iconColumn.setWidth(16);
  iconColumn.setResizable(false);
  iconColumn.setRenderer(new GridCellRenderer<MonitoredPointDTO>(){
    @Override public Object render(    final MonitoredPointDTO model,    final String property,    final ColumnData config,    final int rowIndex,    final int colIndex,    final ListStore<MonitoredPointDTO> store,    final Grid<MonitoredPointDTO> grid){
      if (DateUtils.DAY_COMPARATOR.compare(now,model.getExpectedDate()) > 0) {
        return IconImageBundle.ICONS.overduePoint().createImage();
      }
 else {
        return IconImageBundle.ICONS.openedPoint().createImage();
      }
    }
  }
);
  final ColumnConfig labelColumn=new ColumnConfig();
  labelColumn.setId(MonitoredPointDTO.LABEL);
  labelColumn.setHeaderHtml(I18N.CONSTANTS.monitoredPointLabel());
  labelColumn.setWidth(100);
  final ColumnConfig expectedDateColumn=new ColumnConfig();
  expectedDateColumn.setId(MonitoredPointDTO.EXPECTED_DATE);
  expectedDateColumn.setHeaderHtml(I18N.CONSTANTS.monitoredPointExpectedDate());
  expectedDateColumn.setWidth(60);
  expectedDateColumn.setDateTimeFormat(format);
  expectedDateColumn.setRenderer(new GridCellRenderer<MonitoredPointDTO>(){
    @Override public Object render(    final MonitoredPointDTO model,    final String property,    final ColumnData config,    final int rowIndex,    final int colIndex,    final ListStore<MonitoredPointDTO> store,    final Grid<MonitoredPointDTO> grid){
      final Label label=new Label(format.format(model.getExpectedDate()));
      if (!model.isCompleted() && DateUtils.DAY_COMPARATOR.compare(now,model.getExpectedDate()) > 0) {
        label.addStyleName(EXPECTED_DATE_LABEL_STYLE);
      }
      return label;
    }
  }
);
  return Arrays.asList(new ColumnConfig[]{iconColumn,labelColumn,expectedDateColumn});
}","/** 
 * Builds the monitored points grid columns configuration.
 * @return The monitored points grid columns list.
 */
private static List<ColumnConfig> createMonitoredPointsGridColumns(){
  final DateTimeFormat format=DateUtils.DATE_SHORT;
  final Date now=new Date();
  final ColumnConfig iconColumn=new ColumnConfig();
  iconColumn.setId(""String_Node_Str"");
  iconColumn.setHeaderHtml(""String_Node_Str"");
  iconColumn.setWidth(16);
  iconColumn.setResizable(false);
  iconColumn.setRenderer(new GridCellRenderer<MonitoredPointDTO>(){
    @Override public Object render(    final MonitoredPointDTO model,    final String property,    final ColumnData config,    final int rowIndex,    final int colIndex,    final ListStore<MonitoredPointDTO> store,    final Grid<MonitoredPointDTO> grid){
      if (DateUtils.DAY_COMPARATOR.compare(now,model.getExpectedDate()) > 0) {
        return IconImageBundle.ICONS.overduePoint().createImage();
      }
 else {
        return IconImageBundle.ICONS.openedPoint().createImage();
      }
    }
  }
);
  final ColumnConfig labelColumn=new ColumnConfig();
  labelColumn.setId(MonitoredPointDTO.LABEL);
  labelColumn.setHeaderHtml(I18N.CONSTANTS.monitoredPointLabel());
  labelColumn.setWidth(100);
  final ColumnConfig projectCodeColumn=new ColumnConfig();
  projectCodeColumn.setId(MonitoredPointDTO.PROJECT_CODE);
  projectCodeColumn.setHeaderHtml(I18N.CONSTANTS.project());
  projectCodeColumn.setWidth(100);
  final ColumnConfig projectNameColumn=new ColumnConfig();
  projectNameColumn.setId(MonitoredPointDTO.PROJECT_NAME);
  projectNameColumn.setHeaderHtml(I18N.CONSTANTS.projectName());
  projectNameColumn.setWidth(100);
  projectNameColumn.setRenderer(new GridCellRenderer<MonitoredPointDTO>(){
    @Override public Object render(    final MonitoredPointDTO model,    String property,    ColumnData config,    int rowIndex,    int colIndex,    ListStore<MonitoredPointDTO> store,    Grid<MonitoredPointDTO> grid){
      final com.google.gwt.user.client.ui.Label label=new com.google.gwt.user.client.ui.Label((String)model.get(property));
      label.addStyleName(""String_Node_Str"");
      label.addClickHandler(new ClickHandler(){
        @Override public void onClick(        ClickEvent event){
          handler.onLabelClickEvent(model.getProjectId());
        }
      }
);
      return label;
    }
  }
);
  final ColumnConfig expectedDateColumn=new ColumnConfig();
  expectedDateColumn.setId(MonitoredPointDTO.EXPECTED_DATE);
  expectedDateColumn.setHeaderHtml(I18N.CONSTANTS.monitoredPointExpectedDate());
  expectedDateColumn.setWidth(60);
  expectedDateColumn.setDateTimeFormat(format);
  expectedDateColumn.setRenderer(new GridCellRenderer<MonitoredPointDTO>(){
    @Override public Object render(    final MonitoredPointDTO model,    final String property,    final ColumnData config,    final int rowIndex,    final int colIndex,    final ListStore<MonitoredPointDTO> store,    final Grid<MonitoredPointDTO> grid){
      final Label label=new Label(format.format(model.getExpectedDate()));
      if (!model.isCompleted() && DateUtils.DAY_COMPARATOR.compare(now,model.getExpectedDate()) > 0) {
        label.addStyleName(EXPECTED_DATE_LABEL_STYLE);
      }
      return label;
    }
  }
);
  return Arrays.asList(new ColumnConfig[]{iconColumn,labelColumn,projectNameColumn,projectCodeColumn,expectedDateColumn});
}",0.7928379588182632
35564,"/** 
 * Builds the reminders grid columns configuration.
 * @return The reminders grid columns list.
 */
private static List<ColumnConfig> createRemindersGridColumns(){
  final DateTimeFormat format=DateUtils.DATE_SHORT;
  final Date now=new Date();
  final ColumnConfig iconColumn=new ColumnConfig();
  iconColumn.setId(""String_Node_Str"");
  iconColumn.setHeaderHtml(""String_Node_Str"");
  iconColumn.setWidth(16);
  iconColumn.setResizable(false);
  iconColumn.setRenderer(new GridCellRenderer<ReminderDTO>(){
    @Override public Object render(    final ReminderDTO model,    final String property,    final ColumnData config,    final int rowIndex,    final int colIndex,    final ListStore<ReminderDTO> store,    final Grid<ReminderDTO> grid){
      if (DateUtils.DAY_COMPARATOR.compare(now,model.getExpectedDate()) > 0) {
        return IconImageBundle.ICONS.overdueReminder().createImage();
      }
 else {
        return IconImageBundle.ICONS.openedReminder().createImage();
      }
    }
  }
);
  final ColumnConfig labelColumn=new ColumnConfig();
  labelColumn.setId(ReminderDTO.LABEL);
  labelColumn.setHeaderHtml(I18N.CONSTANTS.monitoredPointLabel());
  labelColumn.setWidth(100);
  final ColumnConfig expectedDateColumn=new ColumnConfig();
  expectedDateColumn.setId(ReminderDTO.EXPECTED_DATE);
  expectedDateColumn.setHeaderHtml(I18N.CONSTANTS.monitoredPointExpectedDate());
  expectedDateColumn.setWidth(60);
  expectedDateColumn.setDateTimeFormat(format);
  expectedDateColumn.setRenderer(new GridCellRenderer<ReminderDTO>(){
    @Override public Object render(    final ReminderDTO model,    final String property,    final ColumnData config,    final int rowIndex,    final int colIndex,    final ListStore<ReminderDTO> store,    final Grid<ReminderDTO> grid){
      final Label label=new Label(format.format(model.getExpectedDate()));
      if (!model.isCompleted() && DateUtils.DAY_COMPARATOR.compare(now,model.getExpectedDate()) > 0) {
        label.addStyleName(EXPECTED_DATE_LABEL_STYLE);
      }
      return label;
    }
  }
);
  return Arrays.asList(new ColumnConfig[]{iconColumn,labelColumn,expectedDateColumn});
}","/** 
 * Builds the reminders grid columns configuration.
 * @return The reminders grid columns list.
 */
private static List<ColumnConfig> createRemindersGridColumns(){
  final DateTimeFormat format=DateUtils.DATE_SHORT;
  final Date now=new Date();
  final ColumnConfig iconColumn=new ColumnConfig();
  iconColumn.setId(""String_Node_Str"");
  iconColumn.setHeaderHtml(""String_Node_Str"");
  iconColumn.setWidth(16);
  iconColumn.setResizable(false);
  iconColumn.setRenderer(new GridCellRenderer<ReminderDTO>(){
    @Override public Object render(    final ReminderDTO model,    final String property,    final ColumnData config,    final int rowIndex,    final int colIndex,    final ListStore<ReminderDTO> store,    final Grid<ReminderDTO> grid){
      if (DateUtils.DAY_COMPARATOR.compare(now,model.getExpectedDate()) > 0) {
        return IconImageBundle.ICONS.overdueReminder().createImage();
      }
 else {
        return IconImageBundle.ICONS.openedReminder().createImage();
      }
    }
  }
);
  final ColumnConfig labelColumn=new ColumnConfig();
  labelColumn.setId(ReminderDTO.LABEL);
  labelColumn.setHeaderHtml(I18N.CONSTANTS.monitoredPointLabel());
  labelColumn.setWidth(100);
  final ColumnConfig projectCodeColumn=new ColumnConfig();
  projectCodeColumn.setId(ReminderDTO.PROJECT_CODE);
  projectCodeColumn.setHeaderHtml(I18N.CONSTANTS.project());
  projectCodeColumn.setWidth(100);
  final ColumnConfig projectNameColumn=new ColumnConfig();
  projectNameColumn.setId(ReminderDTO.PROJECT_NAME);
  projectNameColumn.setHeaderHtml(I18N.CONSTANTS.projectName());
  projectNameColumn.setWidth(100);
  projectNameColumn.setRenderer(new GridCellRenderer<ReminderDTO>(){
    @Override public Object render(    final ReminderDTO model,    String property,    ColumnData config,    int rowIndex,    int colIndex,    ListStore<ReminderDTO> store,    Grid<ReminderDTO> grid){
      final com.google.gwt.user.client.ui.Label label=new com.google.gwt.user.client.ui.Label((String)model.get(property));
      label.addStyleName(""String_Node_Str"");
      label.addClickHandler(new ClickHandler(){
        @Override public void onClick(        ClickEvent event){
          handler.onLabelClickEvent(model.getProjectId());
        }
      }
);
      return label;
    }
  }
);
  final ColumnConfig expectedDateColumn=new ColumnConfig();
  expectedDateColumn.setId(ReminderDTO.EXPECTED_DATE);
  expectedDateColumn.setHeaderHtml(I18N.CONSTANTS.monitoredPointExpectedDate());
  expectedDateColumn.setWidth(60);
  expectedDateColumn.setDateTimeFormat(format);
  expectedDateColumn.setRenderer(new GridCellRenderer<ReminderDTO>(){
    @Override public Object render(    final ReminderDTO model,    final String property,    final ColumnData config,    final int rowIndex,    final int colIndex,    final ListStore<ReminderDTO> store,    final Grid<ReminderDTO> grid){
      final Label label=new Label(format.format(model.getExpectedDate()));
      if (!model.isCompleted() && DateUtils.DAY_COMPARATOR.compare(now,model.getExpectedDate()) > 0) {
        label.addStyleName(EXPECTED_DATE_LABEL_STYLE);
      }
      return label;
    }
  }
);
  return Arrays.asList(new ColumnConfig[]{iconColumn,labelColumn,projectNameColumn,projectCodeColumn,expectedDateColumn});
}",0.7924458433623403
35565,"/** 
 * Create the project with the current form values.
 */
private void createProject(){
  if (!view.getFormPanel().isValid()) {
    return;
  }
  final String name=view.getNameField().getValue();
  final String fullName=view.getFullNameField().getValue();
  final double budget=view.getBudgetField().getValue() != null ? view.getBudgetField().getValue().doubleValue() : ZERO;
  final Integer projectModelId=view.getModelsField().getValue() != null ? view.getModelsField().getValue().getId() : null;
  final String orgUnitId=view.getOrgUnitsField().getValue() != null ? String.valueOf(view.getOrgUnitsField().getValue().getId()) : null;
  if (Log.isDebugEnabled()) {
    final StringBuilder sb=new StringBuilder();
    sb.append(""String_Node_Str"");
    sb.append(""String_Node_Str"");
    sb.append(name);
    sb.append(""String_Node_Str"");
    sb.append(fullName);
    sb.append(""String_Node_Str"");
    sb.append(budget);
    sb.append(""String_Node_Str"");
    sb.append(projectModelId);
    sb.append(""String_Node_Str"");
    sb.append(orgUnitId);
    Log.debug(sb.toString());
  }
  final HashMap<String,Object> projectProperties=new HashMap<String,Object>();
  projectProperties.put(ProjectDTO.NAME,name);
  projectProperties.put(ProjectDTO.FULL_NAME,fullName);
  projectProperties.put(""String_Node_Str"",budget);
  projectProperties.put(""String_Node_Str"",projectModelId);
  projectProperties.put(ProjectDTO.ORG_UNIT_ID,orgUnitId);
  projectProperties.put(""String_Node_Str"",I18N.CONSTANTS.calendarDefaultName());
  dispatch.execute(new CreateEntity(ProjectDTO.ENTITY_NAME,projectProperties),new CommandResultHandler<CreateResult>(){
    @Override public void onCommandFailure(    Throwable arg0){
      N10N.error(I18N.CONSTANTS.createProjectFailed(),I18N.CONSTANTS.createProjectFailedDetails(),null);
    }
    @Override public void onCommandSuccess(    CreateResult result){
      final ProjectDTO project=(ProjectDTO)result.getEntity();
      if (Log.isDebugEnabled()) {
        Log.debug(""String_Node_Str"" + project.getId() + ""String_Node_Str"");
      }
      final Object[] eventParams=new Object[3];
      eventParams[0]=currentMode;
      eventParams[1]=project;
switch (currentMode) {
case FUNDED_BY_ANOTHER_PROJECT:
        eventParams[2]=view.getAmountField().getValue().doubleValue();
      break;
case FUNDING_ANOTHER_PROJECT:
    eventParams[2]=view.getAmountField().getValue().doubleValue();
  break;
case TEST_PROJECT:
view.getTestProjectsField().getStore().add(project);
view.getTestProjectsField().getStore().commitChanges();
break;
default :
break;
}
if (currentMode != Mode.TEST_PROJECT) {
hideView();
}
eventBus.fireEvent(new UpdateEvent(UpdateEvent.PROJECT_CREATE,eventParams));
}
}
,view.getCreateButton());
}","/** 
 * Create the project with the current form values.
 */
private void createProject(){
  if (!view.getFormPanel().isValid()) {
    return;
  }
  final String name=view.getNameField().getValue();
  final String fullName=view.getFullNameField().getValue();
  final double budget=view.getBudgetField().getValue() != null ? view.getBudgetField().getValue().doubleValue() : ZERO;
  final Integer projectModelId=view.getModelsField().getValue() != null ? view.getModelsField().getValue().getId() : null;
  final String orgUnitId=view.getOrgUnitsField().getValue() != null ? String.valueOf(view.getOrgUnitsField().getValue().getId()) : null;
  if (Log.isDebugEnabled()) {
    final StringBuilder sb=new StringBuilder();
    sb.append(""String_Node_Str"");
    sb.append(""String_Node_Str"");
    sb.append(name);
    sb.append(""String_Node_Str"");
    sb.append(fullName);
    sb.append(""String_Node_Str"");
    sb.append(budget);
    sb.append(""String_Node_Str"");
    sb.append(projectModelId);
    sb.append(""String_Node_Str"");
    sb.append(orgUnitId);
    Log.debug(sb.toString());
  }
  final HashMap<String,Object> projectProperties=new HashMap<String,Object>();
  projectProperties.put(ProjectDTO.NAME,name);
  projectProperties.put(ProjectDTO.FULL_NAME,fullName);
  projectProperties.put(ProjectDTO.BUDGET,budget);
  projectProperties.put(ProjectDTO.MODEL_ID,projectModelId);
  projectProperties.put(ProjectDTO.ORG_UNIT_ID,orgUnitId);
  projectProperties.put(ProjectDTO.CALENDAR_NAME,I18N.CONSTANTS.calendarDefaultName());
  projectProperties.put(ProjectDTO.CREATION_MODE,currentMode);
  if (currentMode == Mode.FUNDING_ANOTHER_PROJECT || currentMode == Mode.FUNDED_BY_ANOTHER_PROJECT) {
    projectProperties.put(ProjectDTO.AMOUNT,view.getAmountField().getValue().doubleValue());
    projectProperties.put(ProjectDTO.BASE_PROJECT,baseProject);
  }
  dispatch.execute(new CreateEntity(ProjectDTO.ENTITY_NAME,projectProperties),new CommandResultHandler<CreateResult>(){
    @Override public void onCommandFailure(    Throwable arg0){
      N10N.error(I18N.CONSTANTS.createProjectFailed(),I18N.CONSTANTS.createProjectFailedDetails(),null);
    }
    @Override public void onCommandSuccess(    CreateResult result){
      final ProjectDTO project=(ProjectDTO)result.getEntity();
      if (Log.isDebugEnabled()) {
        Log.debug(""String_Node_Str"" + project.getId() + ""String_Node_Str"");
      }
      final Object[] eventParams=new Object[3];
      eventParams[0]=currentMode;
      eventParams[1]=project;
switch (currentMode) {
case FUNDED_BY_ANOTHER_PROJECT:
        eventParams[2]=view.getAmountField().getValue().doubleValue();
      break;
case FUNDING_ANOTHER_PROJECT:
    eventParams[2]=view.getAmountField().getValue().doubleValue();
  break;
case TEST_PROJECT:
view.getTestProjectsField().getStore().add(project);
view.getTestProjectsField().getStore().commitChanges();
break;
default :
break;
}
if (currentMode != Mode.TEST_PROJECT) {
hideView();
}
eventBus.fireEvent(new UpdateEvent(UpdateEvent.PROJECT_CREATE,eventParams));
}
}
,view.getCreateButton());
}",0.8925306192858375
35566,"/** 
 * {@inheritDoc}
 */
@Override public void onPageRequest(final PageRequest request){
  currentMode=Mode.fromRequestParameterValue(request != null ? request.getParameter(RequestParameter.TYPE) : null);
  if (currentMode == null) {
    currentMode=Mode.DEFAULT_MODE;
  }
  baseProject=null;
  if (currentMode == Mode.FUNDED_BY_ANOTHER_PROJECT || currentMode == Mode.FUNDING_ANOTHER_PROJECT) {
    baseProject=(ProjectDTO)(request != null ? request.getData(RequestParameter.DTO) : null);
  }
  view.getFormPanel().clearAll();
  view.getModelsField().setEnabled(false);
  view.getOrgUnitsField().setEnabled(false);
  view.getTestProjectsField().getStore().removeAll();
  String preselectedModelName=null;
  if (request != null) {
    if (request.getData(RequestParameter.CODE) != null) {
      view.getNameField().setValue((String)request.getData(RequestParameter.CODE));
    }
    if (request.getData(RequestParameter.TITLE) != null) {
      view.getFullNameField().setValue((String)request.getData(RequestParameter.TITLE));
    }
    if (request.getData(RequestParameter.BUDGET) != null) {
      view.getBudgetField().setValue((Double)request.getData(RequestParameter.BUDGET));
    }
    if (request.getData(RequestParameter.MODEL) != null) {
      preselectedModelName=(String)request.getData(RequestParameter.MODEL);
    }
  }
  loadOrgUnits(currentMode);
  loadProjectModels(currentMode,preselectedModelName);
  loadTestProjects(currentMode);
  final boolean showBudgetField;
  final boolean showOrgUnitsField;
  final boolean showAmountField;
  final String amountFieldLabel;
  final boolean showTestProjectsField;
  final String viewTitle;
switch (currentMode) {
case FUNDED_BY_ANOTHER_PROJECT:
    showBudgetField=true;
  showOrgUnitsField=true;
showAmountField=true;
amountFieldLabel=I18N.MESSAGES.projectFinancesDetails(baseProject.getName()) + ""String_Node_Str"" + I18N.CONSTANTS.currencyEuro()+ ')';
showTestProjectsField=false;
viewTitle=I18N.CONSTANTS.createProjectTypePartnerCreateDetails();
break;
case FUNDING_ANOTHER_PROJECT:
showBudgetField=true;
showOrgUnitsField=true;
showAmountField=true;
amountFieldLabel=I18N.MESSAGES.projectFundedByDetails(baseProject.getName()) + ""String_Node_Str"" + I18N.CONSTANTS.currencyEuro()+ ')';
showTestProjectsField=false;
viewTitle=I18N.CONSTANTS.createProjectTypeFundingCreateDetails();
break;
case TEST_PROJECT:
showBudgetField=false;
showOrgUnitsField=false;
showAmountField=false;
amountFieldLabel=null;
showTestProjectsField=true;
viewTitle=I18N.CONSTANTS.createProjectTest();
break;
default :
showBudgetField=true;
showOrgUnitsField=true;
showAmountField=false;
amountFieldLabel=null;
showTestProjectsField=false;
viewTitle=I18N.CONSTANTS.createProject();
break;
}
view.getBudgetField().setVisible(showBudgetField);
view.getBudgetField().setAllowBlank(!showBudgetField);
view.getOrgUnitsField().setVisible(showOrgUnitsField);
view.getOrgUnitsField().setAllowBlank(!showOrgUnitsField);
view.getAmountField().setValue(ZERO);
view.getAmountField().setVisible(showAmountField);
view.getAmountField().setAllowBlank(!showAmountField);
view.getAmountField().setFieldLabel(amountFieldLabel);
view.getPercentageField().setVisible(showAmountField);
view.getTestProjectsField().setVisible(showTestProjectsField);
view.setTitle(viewTitle);
}","/** 
 * {@inheritDoc}
 */
@Override public void onPageRequest(final PageRequest request){
  currentMode=Mode.fromRequestParameterValue(request != null ? request.getParameter(RequestParameter.TYPE) : null);
  if (currentMode == null) {
    currentMode=Mode.DEFAULT_MODE;
  }
  baseProject=null;
  if (currentMode == Mode.FUNDED_BY_ANOTHER_PROJECT || currentMode == Mode.FUNDING_ANOTHER_PROJECT) {
    baseProject=(ProjectDTO)(request != null ? request.getData(RequestParameter.DTO) : null);
  }
  view.getFormPanel().clearAll();
  view.getModelsField().setEnabled(false);
  view.getOrgUnitsField().setEnabled(false);
  view.getTestProjectsField().getStore().removeAll();
  String preselectedModelName=null;
  if (request != null) {
    if (request.getData(RequestParameter.CODE) != null) {
      view.getNameField().setValue((String)request.getData(RequestParameter.CODE));
    }
    if (request.getData(RequestParameter.TITLE) != null) {
      view.getFullNameField().setValue((String)request.getData(RequestParameter.TITLE));
    }
    if (request.getData(RequestParameter.BUDGET) != null) {
      view.getBudgetField().setValue((Double)request.getData(RequestParameter.BUDGET));
    }
    if (request.getData(RequestParameter.MODEL) != null) {
      preselectedModelName=(String)request.getData(RequestParameter.MODEL);
    }
  }
  loadOrgUnits(currentMode);
  loadProjectModels(currentMode,preselectedModelName);
  loadTestProjects(currentMode);
  final boolean showBudgetField;
  final boolean showOrgUnitsField;
  final boolean showAmountField;
  final String amountFieldLabel;
  final boolean showTestProjectsField;
  final String viewTitle;
  final String baseProjectBudgetLabel;
  final Double baseProjectBudget;
switch (currentMode) {
case FUNDED_BY_ANOTHER_PROJECT:
    showBudgetField=true;
  showOrgUnitsField=true;
showAmountField=true;
amountFieldLabel=I18N.MESSAGES.projectFinancesDetails(baseProject.getName()) + ""String_Node_Str"" + I18N.CONSTANTS.currencyEuro()+ ')';
baseProjectBudgetLabel=null;
baseProjectBudget=null;
showTestProjectsField=false;
viewTitle=I18N.CONSTANTS.createProjectTypePartnerCreateDetails();
break;
case FUNDING_ANOTHER_PROJECT:
showBudgetField=true;
showOrgUnitsField=true;
showAmountField=true;
amountFieldLabel=I18N.MESSAGES.projectFundedByDetails(baseProject.getName()) + ""String_Node_Str"" + I18N.CONSTANTS.currencyEuro()+ ')';
baseProjectBudgetLabel=I18N.MESSAGES.projectFundsDetails(baseProject.getName()) + ""String_Node_Str"" + I18N.CONSTANTS.currencyEuro()+ ')'+ I18N.CONSTANTS.form_label_separator();
baseProjectBudget=baseProject.getPlannedBudget();
showTestProjectsField=false;
viewTitle=I18N.CONSTANTS.createProjectTypeFundingCreateDetails();
break;
case TEST_PROJECT:
showBudgetField=false;
showOrgUnitsField=false;
showAmountField=false;
amountFieldLabel=null;
baseProjectBudgetLabel=null;
baseProjectBudget=null;
showTestProjectsField=true;
viewTitle=I18N.CONSTANTS.createProjectTest();
break;
default :
showBudgetField=true;
showOrgUnitsField=true;
showAmountField=false;
amountFieldLabel=null;
baseProjectBudgetLabel=null;
baseProjectBudget=null;
showTestProjectsField=false;
viewTitle=I18N.CONSTANTS.createProject();
break;
}
view.getBudgetField().setVisible(showBudgetField);
view.getBudgetField().setAllowBlank(!showBudgetField);
view.getOrgUnitsField().setVisible(showOrgUnitsField);
view.getOrgUnitsField().setAllowBlank(!showOrgUnitsField);
view.getBaseProjectBudgetField().setFieldLabel(baseProjectBudgetLabel);
view.getBaseProjectBudgetField().setValue(baseProjectBudget != null ? baseProjectBudget : ZERO);
view.getBaseProjectBudgetField().setVisible(baseProjectBudget != null);
view.getAmountField().setValue(ZERO);
view.getAmountField().setVisible(showAmountField);
view.getAmountField().setAllowBlank(!showAmountField);
view.getAmountField().setFieldLabel(amountFieldLabel);
view.getPercentageField().setVisible(showAmountField);
view.getTestProjectsField().setVisible(showTestProjectsField);
view.setTitle(viewTitle);
}",0.9024457268480351
35567,"/** 
 * {@inheritDoc}
 */
@Override public void onBind(){
  final CheckColumnConfig remindersCheckPlugin=(CheckColumnConfig)view.getRemindersGrid().getColumnModel().getColumn(0);
  if (ProfileUtils.isGranted(auth(),GlobalPermissionEnum.EDIT_PROJECT) && (ProfileUtils.isGranted(auth(),GlobalPermissionEnum.EDIT_ALL_REMINDERS) || ProfileUtils.isGranted(auth(),GlobalPermissionEnum.EDIT_OWN_REMINDERS))) {
    view.getRemindersGrid().addPlugin(remindersCheckPlugin);
  }
  final CheckColumnConfig monitoredPointsCheckPlugin=(CheckColumnConfig)view.getMonitoredPointsGrid().getColumnModel().getColumn(0);
  if (ProfileUtils.isGranted(auth(),GlobalPermissionEnum.EDIT_PROJECT)) {
    view.getMonitoredPointsGrid().addPlugin(monitoredPointsCheckPlugin);
  }
  view.getReminderAddButton().addSelectionListener(new SelectionListener<ButtonEvent>(){
    @Override public void componentSelected(    final ButtonEvent event){
      eventBus.navigateRequest(Page.REMINDER_EDIT.requestWith(RequestParameter.TYPE,ReminderType.REMINDER).addParameter(RequestParameter.ID,getProject().getId()));
    }
  }
);
  view.getMonitoredPointsAddButton().addSelectionListener(new SelectionListener<ButtonEvent>(){
    @Override public void componentSelected(    final ButtonEvent event){
      eventBus.navigateRequest(Page.REMINDER_EDIT.requestWith(RequestParameter.TYPE,ReminderType.MONITORED_POINT).addParameter(RequestParameter.ID,getProject().getId()));
    }
  }
);
  view.getRemindersGrid().getStore().addListener(Store.Update,new Listener<StoreEvent<ReminderDTO>>(){
    @Override public void handleEvent(    final StoreEvent<ReminderDTO> event){
      if (event.getOperation() == RecordUpdate.EDIT) {
        onReminderUpdate(event.getModel());
      }
    }
  }
);
  view.getMonitoredPointsGrid().getStore().addListener(Store.Update,new Listener<StoreEvent<MonitoredPointDTO>>(){
    @Override public void handleEvent(    final StoreEvent<MonitoredPointDTO> event){
      if (event.getOperation() == RecordUpdate.EDIT) {
        onMonitoredPointUpdate(event.getModel());
      }
    }
  }
);
  view.setPresenterHandler(new PresenterHandler(){
    /** 
 * {@inheritDoc}
 */
    @Override public boolean isAuthorizedToEditReminder(){
      return ProfileUtils.isGranted(auth(),GlobalPermissionEnum.EDIT_PROJECT) && (ProfileUtils.isGranted(auth(),GlobalPermissionEnum.EDIT_ALL_REMINDERS) || ProfileUtils.isGranted(auth(),GlobalPermissionEnum.EDIT_OWN_REMINDERS));
    }
    /** 
 * {@inheritDoc}
 */
    @Override public boolean isAuthor(    final EntityDTO<?> reminderOrMonitoredPoint){
      boolean creator=false;
      if (reminderOrMonitoredPoint instanceof ReminderDTO) {
        final ReminderDTO reminder=(ReminderDTO)reminderOrMonitoredPoint;
        for (        final ReminderHistoryDTO hist : reminder.getHistory()) {
          if (hist.getType() == ReminderChangeType.CREATED) {
            creator=auth().getUserId().equals(hist.getUserId());
          }
        }
      }
 else       if (reminderOrMonitoredPoint instanceof MonitoredPointDTO) {
        final MonitoredPointDTO monitoredPoint=(MonitoredPointDTO)reminderOrMonitoredPoint;
        for (        final MonitoredPointHistoryDTO hist : monitoredPoint.getHistory()) {
          if (hist.getType() == ReminderChangeType.CREATED) {
            creator=auth().getUserId().equals(hist.getUserId());
          }
        }
      }
      return creator && ProfileUtils.isGranted(auth(),GlobalPermissionEnum.EDIT_OWN_REMINDERS) || ProfileUtils.isGranted(auth(),GlobalPermissionEnum.EDIT_ALL_REMINDERS);
    }
    /** 
 * {@inheritDoc}
 */
    @Override public void onLabelClickEvent(    final EntityDTO<?> reminderOrMonitoredPoint){
      eventBus.navigateRequest(Page.REMINDER_EDIT.requestWith(RequestParameter.TYPE,ReminderType.fromDTO(reminderOrMonitoredPoint)).addParameter(RequestParameter.ID,getProject().getId()).addData(RequestParameter.DTO,reminderOrMonitoredPoint));
    }
    /** 
 * {@inheritDoc}
 */
    @Override public void onShowHistoryEvent(    final EntityDTO<?> reminderOrMonitoredPoint){
      if (reminderOrMonitoredPoint == null) {
        return;
      }
      eventBus.navigateRequest(Page.REMINDER_HISTORY.request().addData(RequestParameter.DTO,reminderOrMonitoredPoint));
    }
    /** 
 * {@inheritDoc}
 */
    @Override public ProjectModelType getProjectModelType(    final ProjectDTO project){
      return project.getProjectModelType(auth().getOrganizationId());
    }
    /** 
 * {@inheritDoc}
 */
    @Override public void onLinkedProjectClickEvent(    final ProjectDTO project){
      eventBus.navigateRequest(Page.PROJECT_DASHBOARD.requestWith(RequestParameter.ID,project.getId()));
    }
    /** 
 * {@inheritDoc}
 */
    @Override public void onLinkedProjectEditClickEvent(    final ProjectFundingDTO projectFunding,    final LinkedProjectType type){
      eventBus.navigateRequest(Page.LINKED_PROJECT.requestWith(RequestParameter.TYPE,type).addData(RequestParameter.HEADER,getProject()).addData(RequestParameter.DTO,projectFunding));
    }
  }
);
  registerHandler(eventBus.addHandler(UpdateEvent.getType(),new UpdateHandler(){
    @Override public void onUpdate(    final UpdateEvent event){
      if (event.concern(UpdateEvent.REMINDER_UPDATED)) {
        final ReminderType reminderType=event.getParam(0);
        if (reminderType == ReminderType.REMINDER) {
          loadReminders();
        }
 else         if (reminderType == ReminderType.MONITORED_POINT) {
          loadMonitoredPoints();
        }
      }
 else       if (event.concern(UpdateEvent.LINKED_PROJECT_UPDATE)) {
        final LinkedProjectType linkedProjectType=event.getParam(0);
        loadLinkedProjects(linkedProjectType);
      }
 else       if (event.concern(UpdateEvent.LINKED_PROJECT_DELETE)) {
        final LinkedProjectType linkedProjectType=event.getParam(0);
        final ProjectFundingDTO linkedProject=event.getParam(1);
        onLinkedProjectDeleteAction(linkedProjectType,linkedProject);
      }
 else       if (event.concern(UpdateEvent.PROJECT_CREATE)) {
        final CreateProjectPresenter.Mode mode=event.getParam(0);
switch (mode) {
case FUNDING_ANOTHER_PROJECT:
          createFundingLink(event.<ProjectDTO>getParam(1),event.<Double>getParam(2));
        break;
case FUNDED_BY_ANOTHER_PROJECT:
      break;
default :
    break;
}
}
}
}
));
view.getFundingProjectSelectButton().addSelectionListener(new SelectionListener<ButtonEvent>(){
@Override public void componentSelected(final ButtonEvent ce){
eventBus.navigateRequest(Page.LINKED_PROJECT.requestWith(RequestParameter.TYPE,LinkedProjectType.FUNDING_PROJECT).addData(RequestParameter.HEADER,getProject()));
}
}
);
view.getFundingProjectCreateButton().addSelectionListener(new SelectionListener<ButtonEvent>(){
@Override public void componentSelected(final ButtonEvent ce){
eventBus.navigateRequest(Page.CREATE_PROJECT.requestWith(RequestParameter.TYPE,CreateProjectPresenter.Mode.FUNDING_ANOTHER_PROJECT).addData(RequestParameter.DTO,getProject()));
}
}
);
view.getFundedProjectSelectButton().addSelectionListener(new SelectionListener<ButtonEvent>(){
@Override public void componentSelected(final ButtonEvent ce){
eventBus.navigateRequest(Page.LINKED_PROJECT.requestWith(RequestParameter.TYPE,LinkedProjectType.FUNDED_PROJECT).addData(RequestParameter.HEADER,getProject()));
}
}
);
view.getFundedProjectCreateButton().addSelectionListener(new SelectionListener<ButtonEvent>(){
@Override public void componentSelected(final ButtonEvent ce){
eventBus.navigateRequest(Page.CREATE_PROJECT.requestWith(RequestParameter.TYPE,CreateProjectPresenter.Mode.FUNDED_BY_ANOTHER_PROJECT).addData(RequestParameter.DTO,getProject()));
}
}
);
}","/** 
 * {@inheritDoc}
 */
@Override public void onBind(){
  final CheckColumnConfig remindersCheckPlugin=(CheckColumnConfig)view.getRemindersGrid().getColumnModel().getColumn(0);
  if (ProfileUtils.isGranted(auth(),GlobalPermissionEnum.EDIT_PROJECT) && (ProfileUtils.isGranted(auth(),GlobalPermissionEnum.EDIT_ALL_REMINDERS) || ProfileUtils.isGranted(auth(),GlobalPermissionEnum.EDIT_OWN_REMINDERS))) {
    view.getRemindersGrid().addPlugin(remindersCheckPlugin);
  }
  final CheckColumnConfig monitoredPointsCheckPlugin=(CheckColumnConfig)view.getMonitoredPointsGrid().getColumnModel().getColumn(0);
  if (ProfileUtils.isGranted(auth(),GlobalPermissionEnum.EDIT_PROJECT)) {
    view.getMonitoredPointsGrid().addPlugin(monitoredPointsCheckPlugin);
  }
  view.getReminderAddButton().addSelectionListener(new SelectionListener<ButtonEvent>(){
    @Override public void componentSelected(    final ButtonEvent event){
      eventBus.navigateRequest(Page.REMINDER_EDIT.requestWith(RequestParameter.TYPE,ReminderType.REMINDER).addParameter(RequestParameter.ID,getProject().getId()));
    }
  }
);
  view.getMonitoredPointsAddButton().addSelectionListener(new SelectionListener<ButtonEvent>(){
    @Override public void componentSelected(    final ButtonEvent event){
      eventBus.navigateRequest(Page.REMINDER_EDIT.requestWith(RequestParameter.TYPE,ReminderType.MONITORED_POINT).addParameter(RequestParameter.ID,getProject().getId()));
    }
  }
);
  view.getRemindersGrid().getStore().addListener(Store.Update,new Listener<StoreEvent<ReminderDTO>>(){
    @Override public void handleEvent(    final StoreEvent<ReminderDTO> event){
      if (event.getOperation() == RecordUpdate.EDIT) {
        onReminderUpdate(event.getModel());
      }
    }
  }
);
  view.getMonitoredPointsGrid().getStore().addListener(Store.Update,new Listener<StoreEvent<MonitoredPointDTO>>(){
    @Override public void handleEvent(    final StoreEvent<MonitoredPointDTO> event){
      if (event.getOperation() == RecordUpdate.EDIT) {
        onMonitoredPointUpdate(event.getModel());
      }
    }
  }
);
  view.setPresenterHandler(new PresenterHandler(){
    /** 
 * {@inheritDoc}
 */
    @Override public boolean isAuthorizedToEditReminder(){
      return ProfileUtils.isGranted(auth(),GlobalPermissionEnum.EDIT_PROJECT) && (ProfileUtils.isGranted(auth(),GlobalPermissionEnum.EDIT_ALL_REMINDERS) || ProfileUtils.isGranted(auth(),GlobalPermissionEnum.EDIT_OWN_REMINDERS));
    }
    /** 
 * {@inheritDoc}
 */
    @Override public boolean isAuthor(    final EntityDTO<?> reminderOrMonitoredPoint){
      boolean creator=false;
      if (reminderOrMonitoredPoint instanceof ReminderDTO) {
        final ReminderDTO reminder=(ReminderDTO)reminderOrMonitoredPoint;
        for (        final ReminderHistoryDTO hist : reminder.getHistory()) {
          if (hist.getType() == ReminderChangeType.CREATED) {
            creator=auth().getUserId().equals(hist.getUserId());
          }
        }
      }
 else       if (reminderOrMonitoredPoint instanceof MonitoredPointDTO) {
        final MonitoredPointDTO monitoredPoint=(MonitoredPointDTO)reminderOrMonitoredPoint;
        for (        final MonitoredPointHistoryDTO hist : monitoredPoint.getHistory()) {
          if (hist.getType() == ReminderChangeType.CREATED) {
            creator=auth().getUserId().equals(hist.getUserId());
          }
        }
      }
      return creator && ProfileUtils.isGranted(auth(),GlobalPermissionEnum.EDIT_OWN_REMINDERS) || ProfileUtils.isGranted(auth(),GlobalPermissionEnum.EDIT_ALL_REMINDERS);
    }
    /** 
 * {@inheritDoc}
 */
    @Override public void onLabelClickEvent(    final EntityDTO<?> reminderOrMonitoredPoint){
      eventBus.navigateRequest(Page.REMINDER_EDIT.requestWith(RequestParameter.TYPE,ReminderType.fromDTO(reminderOrMonitoredPoint)).addParameter(RequestParameter.ID,getProject().getId()).addData(RequestParameter.DTO,reminderOrMonitoredPoint));
    }
    /** 
 * {@inheritDoc}
 */
    @Override public void onShowHistoryEvent(    final EntityDTO<?> reminderOrMonitoredPoint){
      if (reminderOrMonitoredPoint == null) {
        return;
      }
      eventBus.navigateRequest(Page.REMINDER_HISTORY.request().addData(RequestParameter.DTO,reminderOrMonitoredPoint));
    }
    /** 
 * {@inheritDoc}
 */
    @Override public ProjectModelType getProjectModelType(    final ProjectDTO project){
      return project.getProjectModelType(auth().getOrganizationId());
    }
    /** 
 * {@inheritDoc}
 */
    @Override public void onLinkedProjectClickEvent(    final ProjectDTO project){
      eventBus.navigateRequest(Page.PROJECT_DASHBOARD.requestWith(RequestParameter.ID,project.getId()));
    }
    /** 
 * {@inheritDoc}
 */
    @Override public void onLinkedProjectEditClickEvent(    final ProjectFundingDTO projectFunding,    final LinkedProjectType type){
      eventBus.navigateRequest(Page.LINKED_PROJECT.requestWith(RequestParameter.TYPE,type).addData(RequestParameter.HEADER,getProject()).addData(RequestParameter.DTO,projectFunding));
    }
  }
);
  registerHandler(eventBus.addHandler(UpdateEvent.getType(),new UpdateHandler(){
    @Override public void onUpdate(    final UpdateEvent event){
      if (event.concern(UpdateEvent.REMINDER_UPDATED)) {
        final ReminderType reminderType=event.getParam(0);
        if (reminderType == ReminderType.REMINDER) {
          loadReminders();
        }
 else         if (reminderType == ReminderType.MONITORED_POINT) {
          loadMonitoredPoints();
        }
      }
 else       if (event.concern(UpdateEvent.LINKED_PROJECT_UPDATE)) {
        final LinkedProjectType linkedProjectType=event.getParam(0);
        loadLinkedProjects(linkedProjectType);
      }
 else       if (event.concern(UpdateEvent.LINKED_PROJECT_DELETE)) {
        final LinkedProjectType linkedProjectType=event.getParam(0);
        final ProjectFundingDTO linkedProject=event.getParam(1);
        onLinkedProjectDeleteAction(linkedProjectType,linkedProject);
      }
 else       if (event.concern(UpdateEvent.PROJECT_CREATE)) {
        final CreateProjectPresenter.Mode mode=event.getParam(0);
switch (mode) {
case FUNDING_ANOTHER_PROJECT:
          loadLinkedProjects(LinkedProjectType.FUNDING_PROJECT);
        break;
case FUNDED_BY_ANOTHER_PROJECT:
      loadLinkedProjects(LinkedProjectType.FUNDED_PROJECT);
    break;
default :
  break;
}
}
}
}
));
view.getFundingProjectSelectButton().addSelectionListener(new SelectionListener<ButtonEvent>(){
@Override public void componentSelected(final ButtonEvent ce){
eventBus.navigateRequest(Page.LINKED_PROJECT.requestWith(RequestParameter.TYPE,LinkedProjectType.FUNDING_PROJECT).addData(RequestParameter.HEADER,getProject()));
}
}
);
view.getFundingProjectCreateButton().addSelectionListener(new SelectionListener<ButtonEvent>(){
@Override public void componentSelected(final ButtonEvent ce){
eventBus.navigateRequest(Page.CREATE_PROJECT.requestWith(RequestParameter.TYPE,CreateProjectPresenter.Mode.FUNDING_ANOTHER_PROJECT).addData(RequestParameter.DTO,getProject()));
}
}
);
view.getFundedProjectSelectButton().addSelectionListener(new SelectionListener<ButtonEvent>(){
@Override public void componentSelected(final ButtonEvent ce){
eventBus.navigateRequest(Page.LINKED_PROJECT.requestWith(RequestParameter.TYPE,LinkedProjectType.FUNDED_PROJECT).addData(RequestParameter.HEADER,getProject()));
}
}
);
view.getFundedProjectCreateButton().addSelectionListener(new SelectionListener<ButtonEvent>(){
@Override public void componentSelected(final ButtonEvent ce){
eventBus.navigateRequest(Page.CREATE_PROJECT.requestWith(RequestParameter.TYPE,CreateProjectPresenter.Mode.FUNDED_BY_ANOTHER_PROJECT).addData(RequestParameter.DTO,getProject()));
}
}
);
}",0.9880913646124811
35568,"@Override public void onCommandSuccess(CreateResult result){
  N10N.infoNotif(I18N.CONSTANTS.infoConfirmation(),I18N.CONSTANTS.createProjectTypeFundingSelectOk());
  final ProjectFundingDTO funding=(ProjectFundingDTO)result.getEntity();
  view.getFundingProjectsGrid().getStore().add(funding);
  getProject().addFunding(funding);
}","@Override public void onCommandSuccess(final VoidResult result){
  loadLinkedProjects(linkedProjectType);
  N10N.notification(I18N.CONSTANTS.infoConfirmation(),I18N.CONSTANTS.linkedProjectUpdateConfirm(),MessageType.INFO);
}",0.4612612612612612
35569,"/** 
 * {@inheritDoc}
 */
@Override public void onPageRequest(final PageRequest request){
  final boolean canEditReminders=ProfileUtils.isGranted(auth(),GlobalPermissionEnum.EDIT_PROJECT) && (ProfileUtils.isGranted(auth(),GlobalPermissionEnum.EDIT_ALL_REMINDERS) || ProfileUtils.isGranted(auth(),GlobalPermissionEnum.EDIT_OWN_REMINDERS));
  final boolean canEditMonitoredPoints=ProfileUtils.isGranted(auth(),GlobalPermissionEnum.EDIT_PROJECT) && (ProfileUtils.isGranted(auth(),GlobalPermissionEnum.EDIT_ALL_REMINDERS) || ProfileUtils.isGranted(auth(),GlobalPermissionEnum.EDIT_OWN_REMINDERS));
  view.updateRemindersToolbars(canEditReminders,canEditMonitoredPoints);
  final boolean canRelateProject=ProfileUtils.isGranted(auth(),GlobalPermissionEnum.RELATE_PROJECT);
  final boolean canCreateProject=ProfileUtils.isGranted(auth(),GlobalPermissionEnum.CREATE_PROJECT,GlobalPermissionEnum.EDIT_PROJECT);
  view.updateLinkedProjectsToolbars(canRelateProject,canCreateProject);
  loadReminders();
  loadMonitoredPoints();
  loadLinkedProjects(null);
  view.getPhasesWidget().refresh(getProject());
}","/** 
 * {@inheritDoc}
 */
@Override public void onPageRequest(final PageRequest request){
  final boolean canEditReminders=ProfileUtils.isGranted(auth(),GlobalPermissionEnum.EDIT_PROJECT) && (ProfileUtils.isGranted(auth(),GlobalPermissionEnum.EDIT_ALL_REMINDERS) || ProfileUtils.isGranted(auth(),GlobalPermissionEnum.EDIT_OWN_REMINDERS));
  final boolean canEditMonitoredPoints=ProfileUtils.isGranted(auth(),GlobalPermissionEnum.EDIT_PROJECT) && (ProfileUtils.isGranted(auth(),GlobalPermissionEnum.EDIT_ALL_REMINDERS) || ProfileUtils.isGranted(auth(),GlobalPermissionEnum.EDIT_OWN_REMINDERS));
  view.updateRemindersToolbars(canEditReminders,canEditMonitoredPoints);
  final boolean canRelateProject=ProfileUtils.isGranted(auth(),GlobalPermissionEnum.RELATE_PROJECT);
  final boolean canCreateProject=ProfileUtils.isGranted(auth(),GlobalPermissionEnum.CREATE_PROJECT,GlobalPermissionEnum.EDIT_PROJECT);
  view.updateLinkedProjectsToolbars(canRelateProject,canCreateProject);
  loadReminders();
  loadMonitoredPoints();
  view.getFundingProjectsColumnsProvider().setProject(getProject());
  loadLinkedProjects(null);
  view.getPhasesWidget().refresh(getProject());
}",0.9694825298540468
35570,"@Override public void onUpdate(final UpdateEvent event){
  if (event.concern(UpdateEvent.REMINDER_UPDATED)) {
    final ReminderType reminderType=event.getParam(0);
    if (reminderType == ReminderType.REMINDER) {
      loadReminders();
    }
 else     if (reminderType == ReminderType.MONITORED_POINT) {
      loadMonitoredPoints();
    }
  }
 else   if (event.concern(UpdateEvent.LINKED_PROJECT_UPDATE)) {
    final LinkedProjectType linkedProjectType=event.getParam(0);
    loadLinkedProjects(linkedProjectType);
  }
 else   if (event.concern(UpdateEvent.LINKED_PROJECT_DELETE)) {
    final LinkedProjectType linkedProjectType=event.getParam(0);
    final ProjectFundingDTO linkedProject=event.getParam(1);
    onLinkedProjectDeleteAction(linkedProjectType,linkedProject);
  }
 else   if (event.concern(UpdateEvent.PROJECT_CREATE)) {
    final CreateProjectPresenter.Mode mode=event.getParam(0);
switch (mode) {
case FUNDING_ANOTHER_PROJECT:
      createFundingLink(event.<ProjectDTO>getParam(1),event.<Double>getParam(2));
    break;
case FUNDED_BY_ANOTHER_PROJECT:
  break;
default :
break;
}
}
}","@Override public void onUpdate(final UpdateEvent event){
  if (event.concern(UpdateEvent.REMINDER_UPDATED)) {
    final ReminderType reminderType=event.getParam(0);
    if (reminderType == ReminderType.REMINDER) {
      loadReminders();
    }
 else     if (reminderType == ReminderType.MONITORED_POINT) {
      loadMonitoredPoints();
    }
  }
 else   if (event.concern(UpdateEvent.LINKED_PROJECT_UPDATE)) {
    final LinkedProjectType linkedProjectType=event.getParam(0);
    loadLinkedProjects(linkedProjectType);
  }
 else   if (event.concern(UpdateEvent.LINKED_PROJECT_DELETE)) {
    final LinkedProjectType linkedProjectType=event.getParam(0);
    final ProjectFundingDTO linkedProject=event.getParam(1);
    onLinkedProjectDeleteAction(linkedProjectType,linkedProject);
  }
 else   if (event.concern(UpdateEvent.PROJECT_CREATE)) {
    final CreateProjectPresenter.Mode mode=event.getParam(0);
switch (mode) {
case FUNDING_ANOTHER_PROJECT:
      loadLinkedProjects(LinkedProjectType.FUNDING_PROJECT);
    break;
case FUNDED_BY_ANOTHER_PROJECT:
  loadLinkedProjects(LinkedProjectType.FUNDED_PROJECT);
break;
default :
break;
}
}
}",0.9064876957494408
35571,"/** 
 * Asks for a refresh of the projects list. If the refreshing mode is set to   {@link RefreshMode#AUTOMATIC}, the list will be refreshed immediately. Otherwise, the list will be refreshed depending on the selected refreshing mode.
 * @param viewOwnOrManage If the projects that the user own or manage must be included in the list (no matter of their organizational units).
 * @param orgUnitsIds The list of ids of the organizational units for which the projects will be retrieved. The projects of each the sub-organizational units are retrieved automatically.
 */
public void refresh(final boolean viewOwnOrManage,final Integer... orgUnitsIds){
  final boolean refreshEnabled=refreshMode == RefreshMode.BUTTON || refreshMode == RefreshMode.BOTH;
  final boolean exportEnabled=ProfileUtils.isGranted(auth(),GlobalPermissionEnum.GLOBAL_EXPORT);
  view.updateToolbar(refreshEnabled,exportEnabled);
  view.updateAccessibilityState(ProfileUtils.isGranted(auth(),GlobalPermissionEnum.VIEW_PROJECT));
  final List<Integer> orgUnitsIdsAsList=orgUnitsIds != null ? Arrays.asList(orgUnitsIds) : null;
  this.orgUnitsIds.clear();
  this.orgUnitsIds.addAll(orgUnitsIdsAsList);
  command=new GetProjects();
  command.setOrgUnitsIds(orgUnitsIdsAsList);
  command.setViewOwnOrManage(viewOwnOrManage);
  if (refreshMode == RefreshMode.AUTOMATIC || (refreshMode == RefreshMode.BOTH && !loaded)) {
    refreshProjectGrid(command);
    loaded=true;
  }
}","/** 
 * Asks for a refresh of the projects list. If the refreshing mode is set to   {@link RefreshMode#AUTOMATIC}, the list will be refreshed immediately. Otherwise, the list will be refreshed depending on the selected refreshing mode.
 * @param viewOwnOrManage If the projects that the user own or manage must be included in the list (no matter of their organizational units).
 * @param orgUnitsIds The list of ids of the organizational units for which the projects will be retrieved. The projects of each the sub-organizational units are retrieved automatically.
 */
public void refresh(final boolean viewOwnOrManage,final Integer... orgUnitsIds){
  final boolean refreshEnabled=refreshMode == RefreshMode.BUTTON || refreshMode == RefreshMode.BOTH;
  final boolean exportEnabled=ProfileUtils.isGranted(auth(),GlobalPermissionEnum.GLOBAL_EXPORT);
  view.updateToolbar(refreshEnabled,exportEnabled);
  view.updateAccessibilityState(ProfileUtils.isGranted(auth(),GlobalPermissionEnum.VIEW_PROJECT));
  final List<Integer> orgUnitsIdsAsList=orgUnitsIds != null ? Arrays.asList(orgUnitsIds) : null;
  this.orgUnitsIds.clear();
  this.orgUnitsIds.addAll(orgUnitsIdsAsList);
  command=new GetProjects(orgUnitsIdsAsList,null);
  command.setViewOwnOrManage(viewOwnOrManage);
  if (refreshMode == RefreshMode.AUTOMATIC || (refreshMode == RefreshMode.BOTH && !loaded)) {
    refreshProjectGrid(command);
    loaded=true;
  }
}",0.9877493874693736
35572,"/** 
 * <p> Initializes a new   {@link User} with a secure changePasswordKey.</p> <p> Sets the following user properties: <ul> <li> {@code name}</li> <li>  {@code email} (populated with given one)</li><li> {@code newUser} (set to {@code true})</li> <li>  {@code locale} (populated with given one)</li><li> {@code changePasswordKey} (see {@link SecureTokenGenerator#generate()})</li> </ul> </p>
 * @param email The user email value.
 * @param name The user name value.
 * @param locale The user locale value.
 * @return the initialized new user.
 */
private static User createNewUser(final String email,final String name,final String locale){
  final User user=new User();
  user.setEmail(email);
  user.setName(name);
  user.setNewUser(true);
  user.setLocale(locale);
  user.setChangePasswordKey(SecureTokenGenerator.generate());
  return user;
}","/** 
 * <p> Initializes a new   {@link User} with a secure changePasswordKey.</p> <p> Sets the following user properties: <ul> <li> {@code name}</li> <li>  {@code email} (populated with given one)</li><li> {@code newUser} (set to {@code true})</li> <li>  {@code locale} (populated with given one)</li><li> {@code changePasswordKey} (see {@link SecureTokenGenerator#generate()})</li> </ul> </p>
 * @param email The user email value.
 * @param name The user name value.
 * @param locale The user locale value.
 * @return the initialized new user.
 */
private static User createNewUser(final String email,final String name,final String locale){
  final User user=new User();
  user.setEmail(email);
  user.setName(name);
  user.setNewUser(true);
  user.setLocale(locale);
  user.setChangePasswordKey(SecureTokenGenerator.generate());
  user.setActive(Boolean.TRUE);
  return user;
}",0.9687137891077636
35573,"public String getCurrentPassword(){
  return currentPassword;
}","/** 
 * Retrieves the current password.
 * @return The current password.
 */
public String getCurrentPassword(){
  return currentPassword;
}",0.6206896551724138
35574,"public String getConfirmNewPassword(){
  return confirmNewPassword;
}","/** 
 * Retrieves the password confirmation.
 * @return The password confirmation.
 */
public String getConfirmNewPassword(){
  return confirmNewPassword;
}",0.6133333333333333
35575,"public String getNewPassword(){
  return newPassword;
}","/** 
 * Retrieves the new password.
 * @return The new password.
 */
public String getNewPassword(){
  return newPassword;
}",0.6145251396648045
35576,"public static <C extends Collection<String>>void offlineNotif(final String title,final Map<String,C> items){
  notification(title,items,MessageType.OFFLINE);
  INJECTOR.getEventBus().updateZoneRequest(Zone.OFFLINE_BANNER.requestWith(RequestParameter.SHOW_BRIEFLY,true));
}","public static <C extends Collection<String>>void offlineNotif(final String title,final Map<String,C> items,EventBus eventBus){
  notification(title,items,MessageType.OFFLINE);
  if (eventBus != null) {
    eventBus.updateZoneRequest(Zone.OFFLINE_BANNER.requestWith(RequestParameter.SHOW_BRIEFLY,true));
  }
}",0.8620689655172413
35577,"/** 
 * {@inheritDoc}
 */
@Override public void onPageRequest(final PageRequest request){
  loadReminders();
  loadMonitoredPoints();
  initializeMenuButtons();
  loadOrgUnits();
  view.getProjectsList().refresh(true,auth().getOrgUnitId());
  final boolean userIsDifferent=auth().getUserId() != null && !auth().getUserId().equals(lastUserId);
  final boolean userHasSynchronized=UpdateDates.getDatabaseUpdateDate(auth()) != null;
  if (userIsDifferent && !userHasSynchronized) {
    N10N.info(I18N.CONSTANTS.offline(),I18N.CONSTANTS.sigmahOfflineWelcome());
  }
  lastUserId=auth().getUserId();
}","/** 
 * {@inheritDoc}
 */
@Override public void onPageRequest(final PageRequest request){
  loadReminders();
  loadMonitoredPoints();
  initializeMenuButtons();
  loadOrgUnits();
  view.getProjectsList().refresh(true,auth().getOrgUnitId());
  final boolean userIsDifferent=auth().getUserId() != null && !auth().getUserId().equals(lastUserId);
  final boolean userHasSynchronized=UpdateDates.getDatabaseUpdateDate(auth()) != null;
  if (userIsDifferent && !userHasSynchronized) {
    N10N.confirmation(I18N.CONSTANTS.offline(),I18N.CONSTANTS.sigmahOfflineWelcome(),new ConfirmCallback(){
      @Override public void onAction(){
        eventBus.updateZoneRequest(Zone.OFFLINE_BANNER.requestWith(RequestParameter.PULL_DATABASE,true));
      }
    }
);
  }
  lastUserId=auth().getUserId();
}",0.8511560693641619
35578,"/** 
 * Callback executed on save button action.
 */
private void onSaveAction(){
  final String htmlName=ClientUtils.removeLastSuffix(view.getNameField().getValue(),HTML_TAG_NEW_LINE);
  if (!FormPanel.valid(view.getCommonForm(),view.getSpecificForm())) {
    return;
  }
  if (htmlName != null && htmlName.isEmpty()) {
    N10N.warn(I18N.CONSTANTS.form_validation_ko());
    return;
  }
  final ElementTypeEnum type=EnumModel.getEnum(view.getTypeField().getValue());
  final LayoutGroupDTO group=view.getLayoutGroupField().getValue();
  final Integer order=ClientUtils.getInteger(view.getOrderField().getValue().intValue());
  final Boolean mandatory=view.getMandatoryField().getValue();
  final PrivacyGroupDTO privacyGroup=view.getPrivacyGroupField().getValue();
  final Boolean amendable=view.getAmendableField().getValue();
  final Boolean exportable=view.getExportableField().getValue();
  final Boolean banner=view.getBannerField().getValue();
  final Integer bannerPosition=ClientUtils.getSimpleValue(view.getBannerPositionField());
  final TextAreaType textAreaType=EnumModel.getEnum(view.getTextAreaTypeField().getValue());
  final Integer length=ClientUtils.getInteger(view.getLengthField().getValue());
  final Boolean decimal=view.getDecimalField().getValue();
  final Integer maxLimit=ClientUtils.getInteger(view.getMaxLimitField().getValue());
  final Integer minLimit=ClientUtils.getInteger(view.getMinLimitField().getValue());
  final Long maxLimitDate=ClientUtils.getTimestamp(view.getMinDateField().getValue());
  final Long minLimitDate=ClientUtils.getTimestamp(view.getMaxDateField().getValue());
  final ReportModelDTO reportModel=view.getReportModelField().getValue();
  final Boolean multiple=view.getMultipleChoicesField().getValue();
  final CategoryTypeDTO category=view.getCategoryTypeField().getValue();
  final Map<String,Object> newFieldProperties=new HashMap<String,Object>();
  newFieldProperties.put(AdminUtil.PROP_FX_NAME,htmlName);
  newFieldProperties.put(AdminUtil.PROP_FX_TYPE,(flexibleElement instanceof BudgetElementDTO) ? ElementTypeEnum.DEFAULT : type);
  newFieldProperties.put(AdminUtil.PROP_FX_GROUP,group);
  newFieldProperties.put(AdminUtil.PROP_FX_ORDER_IN_GROUP,order);
  newFieldProperties.put(AdminUtil.PROP_FX_IN_BANNER,banner);
  newFieldProperties.put(AdminUtil.PROP_FX_POS_IN_BANNER,bannerPosition);
  newFieldProperties.put(AdminUtil.PROP_FX_IS_COMPULSARY,mandatory);
  newFieldProperties.put(AdminUtil.PROP_FX_PRIVACY_GROUP,privacyGroup);
  newFieldProperties.put(AdminUtil.PROP_FX_AMENDABLE,amendable);
  newFieldProperties.put(AdminUtil.PROP_FX_EXPORTABLE,exportable);
  newFieldProperties.put(AdminUtil.PROP_FX_TEXT_TYPE,textAreaType != null ? textAreaType.getCode() : null);
  newFieldProperties.put(AdminUtil.PROP_FX_LENGTH,length);
  newFieldProperties.put(AdminUtil.PROP_FX_MAX_LIMIT,maxLimit);
  newFieldProperties.put(AdminUtil.PROP_FX_MIN_LIMIT,minLimit);
  if (textAreaType == TextAreaType.DATE) {
    newFieldProperties.put(AdminUtil.PROP_FX_MAX_LIMIT,maxLimitDate);
    newFieldProperties.put(AdminUtil.PROP_FX_MIN_LIMIT,minLimitDate);
  }
  if (type == ElementTypeEnum.TEXT_AREA && decimal != null) {
    newFieldProperties.put(AdminUtil.PROP_FX_DECIMAL,decimal);
  }
  newFieldProperties.put(AdminUtil.PROP_FX_REPORT_MODEL,reportModel);
  newFieldProperties.put(AdminUtil.PROP_FX_Q_MULTIPLE,multiple);
  if (category != null && !DEFAULT_CATEGORY_TYPE.equals(category)) {
    newFieldProperties.put(AdminUtil.PROP_FX_Q_CATEGORY,category);
  }
  if (ClientUtils.isNotEmpty(customChoices)) {
    newFieldProperties.put(AdminUtil.PROP_FX_Q_CHOICES,new ArrayList<String>(customChoices));
  }
  if (ClientUtils.isNotEmpty(disabledCustomChoices)) {
    newFieldProperties.put(AdminUtil.PROP_FX_Q_CHOICES_DISABLED,disabledCustomChoices);
  }
  List<BudgetSubFieldDTO> budgetSubFieldsToUpdate=new ArrayList<BudgetSubFieldDTO>();
  if (view.getBudgetFields().getRowCount() > 0) {
    for (int i=1; i < view.getBudgetFields().getRowCount(); i++) {
      if (view.getBudgetFields().getWidget(i,0) != null) {
        Object budgetFieldData=((Text)view.getBudgetFields().getWidget(i,0)).getData(""String_Node_Str"");
        if (budgetFieldData != null) {
          ((BudgetSubFieldDTO)budgetFieldData).setFieldOrder(i);
          budgetSubFieldsToUpdate.add((BudgetSubFieldDTO)budgetFieldData);
        }
      }
    }
    newFieldProperties.put(AdminUtil.PROP_FX_B_BUDGETSUBFIELDS,budgetSubFieldsToUpdate);
    newFieldProperties.put(AdminUtil.PROP_FX_B_BUDGET_RATIO_DIVIDEND,view.getUpBudgetSubFieldCombo().getValue());
    newFieldProperties.put(AdminUtil.PROP_FX_B_BUDGET_RATIO_DIVISOR,view.getDownBudgetSubFieldCombo().getValue());
  }
  final StringBuilder message=new StringBuilder();
  message.append(""String_Node_Str"");
  for (  Map.Entry<String,Object> newP : newFieldProperties.entrySet()) {
    message.append(newP.getKey()).append('=').append(newP.getValue()).append(""String_Node_Str"");
  }
  if (Log.isDebugEnabled()) {
    Log.debug(message.append(')').toString());
  }
  if (flexibleElement != null) {
    message.setLength(0);
    message.append(""String_Node_Str"");
    for (    final Entry<String,Object> old : oldFieldProperties.entrySet()) {
      message.append(old.getKey()).append('=').append(old.getValue()).append(""String_Node_Str"");
      if ((old.getValue() != null && old.getValue().equals(newFieldProperties.get(old.getKey()))) || (old.getValue() == null && newFieldProperties.get(old.getKey()) == null)) {
        newFieldProperties.remove(old.getKey());
      }
    }
    if (Log.isDebugEnabled()) {
      Log.debug(message.append(')').toString());
    }
  }
  message.setLength(0);
  message.append(""String_Node_Str"");
  for (  final Entry<String,Object> newP : newFieldProperties.entrySet()) {
    message.append(newP.getKey()).append('=').append(newP.getValue()).append(""String_Node_Str"");
  }
  if (Log.isDebugEnabled()) {
    Log.debug(message.append(')').toString());
  }
  if (newFieldProperties.get(AdminUtil.PROP_FX_ORDER_IN_GROUP) != null) {
    newFieldProperties.put(AdminUtil.PROP_FX_GROUP,group);
  }
  newFieldProperties.put(AdminUtil.PROP_FX_FLEXIBLE_ELEMENT,(flexibleElement != null) ? flexibleElement : new TextAreaElementDTO());
  newFieldProperties.put(AdminUtil.ADMIN_PROJECT_MODEL,currentModel);
  newFieldProperties.put(AdminUtil.ADMIN_ORG_UNIT_MODEL,currentModel);
  newFieldProperties.put(AdminUtil.PROP_FX_OLD_FIELDS,oldFieldProperties);
  dispatch.execute(new CreateEntity(currentModel.getEntityName(),newFieldProperties),new CommandResultHandler<CreateResult>(){
    @Override public void onCommandFailure(    final Throwable caught){
      N10N.error(I18N.CONSTANTS.adminFlexibleCreationBox(),I18N.MESSAGES.adminStandardCreationFailure(I18N.CONSTANTS.adminStandardFlexibleName() + ""String_Node_Str"" + htmlName+ ""String_Node_Str""));
    }
    @Override public void onCommandSuccess(    final CreateResult result){
      if (result == null) {
        N10N.warn(I18N.CONSTANTS.adminFlexibleCreationBox(),I18N.MESSAGES.adminStandardCreationNull(I18N.CONSTANTS.adminStandardFlexibleName() + ""String_Node_Str"" + htmlName+ ""String_Node_Str""));
        return;
      }
      final boolean update=flexibleElement != null;
      final IsModel updatedModel=(IsModel)result.getEntity();
      FlexibleElementDTO updatedOrCreatedFlexibleElement=null;
      if (update) {
        for (        final FlexibleElementDTO updatedFlexibleElement : updatedModel.getAllElements()) {
          if (updatedFlexibleElement.getId().equals(flexibleElement.getId())) {
            updatedOrCreatedFlexibleElement=updatedFlexibleElement;
          }
        }
        N10N.infoNotif(I18N.CONSTANTS.adminFlexibleCreationBox(),I18N.MESSAGES.adminStandardUpdateSuccess(I18N.CONSTANTS.adminStandardFlexibleName() + ""String_Node_Str"" + htmlName+ ""String_Node_Str""));
      }
 else {
        final List<Integer> oldFlexibleIds=new ArrayList<Integer>();
        for (        final FlexibleElementDTO oldFlexibleElement : currentModel.getAllElements()) {
          oldFlexibleIds.add(oldFlexibleElement.getId());
        }
        for (        final FlexibleElementDTO newFlexibleElement : updatedModel.getAllElements()) {
          if (!oldFlexibleIds.contains(newFlexibleElement.getId())) {
            updatedOrCreatedFlexibleElement=newFlexibleElement;
          }
        }
        N10N.infoNotif(I18N.CONSTANTS.adminFlexibleCreationBox(),I18N.MESSAGES.adminStandardCreationSuccess(I18N.CONSTANTS.adminStandardFlexibleName() + ""String_Node_Str"" + htmlName+ ""String_Node_Str""));
      }
      eventBus.fireEvent(new UpdateEvent(UpdateEvent.FLEXIBLE_ELEMENT_UPDATE,updatedModel,update,updatedOrCreatedFlexibleElement));
      hideView();
    }
  }
,view.getSaveButton());
}","/** 
 * Callback executed on save button action.
 */
private void onSaveAction(){
  final String htmlName=ClientUtils.removeLastSuffix(view.getNameField().getValue(),HTML_TAG_NEW_LINE);
  if (!FormPanel.valid(view.getCommonForm(),view.getSpecificForm())) {
    return;
  }
  if (htmlName != null && htmlName.isEmpty()) {
    N10N.warn(I18N.CONSTANTS.form_validation_ko());
    return;
  }
  final ElementTypeEnum type=EnumModel.getEnum(view.getTypeField().getValue());
  final LayoutGroupDTO group=view.getLayoutGroupField().getValue();
  final Integer order=ClientUtils.getInteger(view.getOrderField().getValue().intValue());
  final Boolean mandatory=view.getMandatoryField().getValue();
  final PrivacyGroupDTO privacyGroup=view.getPrivacyGroupField().getValue();
  final Boolean amendable=view.getAmendableField().getValue();
  final Boolean exportable=view.getExportableField().getValue();
  final Boolean banner=view.getBannerField().getValue();
  final Integer bannerPosition=ClientUtils.getSimpleValue(view.getBannerPositionField());
  final TextAreaType textAreaType=EnumModel.getEnum(view.getTextAreaTypeField().getValue());
  final Integer length=ClientUtils.getInteger(view.getLengthField().getValue());
  final Boolean decimal=view.getDecimalField().getValue();
  final Integer maxLimit=ClientUtils.getInteger(view.getMaxLimitField().getValue());
  final Integer minLimit=ClientUtils.getInteger(view.getMinLimitField().getValue());
  final Long minLimitDate=ClientUtils.getTimestamp(view.getMinDateField().getValue());
  final Long maxLimitDate=ClientUtils.getTimestamp(view.getMaxDateField().getValue());
  final ReportModelDTO reportModel=view.getReportModelField().getValue();
  final Boolean multiple=view.getMultipleChoicesField().getValue();
  final CategoryTypeDTO category=view.getCategoryTypeField().getValue();
  final Map<String,Object> newFieldProperties=new HashMap<String,Object>();
  newFieldProperties.put(AdminUtil.PROP_FX_NAME,htmlName);
  newFieldProperties.put(AdminUtil.PROP_FX_TYPE,(flexibleElement instanceof BudgetElementDTO) ? ElementTypeEnum.DEFAULT : type);
  newFieldProperties.put(AdminUtil.PROP_FX_GROUP,group);
  newFieldProperties.put(AdminUtil.PROP_FX_ORDER_IN_GROUP,order);
  newFieldProperties.put(AdminUtil.PROP_FX_IN_BANNER,banner);
  newFieldProperties.put(AdminUtil.PROP_FX_POS_IN_BANNER,bannerPosition);
  newFieldProperties.put(AdminUtil.PROP_FX_IS_COMPULSARY,mandatory);
  newFieldProperties.put(AdminUtil.PROP_FX_PRIVACY_GROUP,privacyGroup);
  newFieldProperties.put(AdminUtil.PROP_FX_AMENDABLE,amendable);
  newFieldProperties.put(AdminUtil.PROP_FX_EXPORTABLE,exportable);
  newFieldProperties.put(AdminUtil.PROP_FX_TEXT_TYPE,textAreaType != null ? textAreaType.getCode() : null);
  newFieldProperties.put(AdminUtil.PROP_FX_LENGTH,length);
  newFieldProperties.put(AdminUtil.PROP_FX_MAX_LIMIT,maxLimit);
  newFieldProperties.put(AdminUtil.PROP_FX_MIN_LIMIT,minLimit);
  if (textAreaType == TextAreaType.DATE) {
    newFieldProperties.put(AdminUtil.PROP_FX_MAX_LIMIT,maxLimitDate);
    newFieldProperties.put(AdminUtil.PROP_FX_MIN_LIMIT,minLimitDate);
  }
  if (type == ElementTypeEnum.TEXT_AREA && decimal != null) {
    newFieldProperties.put(AdminUtil.PROP_FX_DECIMAL,decimal);
  }
  newFieldProperties.put(AdminUtil.PROP_FX_REPORT_MODEL,reportModel);
  newFieldProperties.put(AdminUtil.PROP_FX_Q_MULTIPLE,multiple);
  if (category != null && !DEFAULT_CATEGORY_TYPE.equals(category)) {
    newFieldProperties.put(AdminUtil.PROP_FX_Q_CATEGORY,category);
  }
  if (ClientUtils.isNotEmpty(customChoices)) {
    newFieldProperties.put(AdminUtil.PROP_FX_Q_CHOICES,new ArrayList<String>(customChoices));
  }
  if (ClientUtils.isNotEmpty(disabledCustomChoices)) {
    newFieldProperties.put(AdminUtil.PROP_FX_Q_CHOICES_DISABLED,disabledCustomChoices);
  }
  List<BudgetSubFieldDTO> budgetSubFieldsToUpdate=new ArrayList<BudgetSubFieldDTO>();
  if (view.getBudgetFields().getRowCount() > 0) {
    for (int i=1; i < view.getBudgetFields().getRowCount(); i++) {
      if (view.getBudgetFields().getWidget(i,0) != null) {
        Object budgetFieldData=((Text)view.getBudgetFields().getWidget(i,0)).getData(""String_Node_Str"");
        if (budgetFieldData != null) {
          ((BudgetSubFieldDTO)budgetFieldData).setFieldOrder(i);
          budgetSubFieldsToUpdate.add((BudgetSubFieldDTO)budgetFieldData);
        }
      }
    }
    newFieldProperties.put(AdminUtil.PROP_FX_B_BUDGETSUBFIELDS,budgetSubFieldsToUpdate);
    newFieldProperties.put(AdminUtil.PROP_FX_B_BUDGET_RATIO_DIVIDEND,view.getUpBudgetSubFieldCombo().getValue());
    newFieldProperties.put(AdminUtil.PROP_FX_B_BUDGET_RATIO_DIVISOR,view.getDownBudgetSubFieldCombo().getValue());
  }
  final StringBuilder message=new StringBuilder();
  message.append(""String_Node_Str"");
  for (  Map.Entry<String,Object> newP : newFieldProperties.entrySet()) {
    message.append(newP.getKey()).append('=').append(newP.getValue()).append(""String_Node_Str"");
  }
  if (Log.isDebugEnabled()) {
    Log.debug(message.append(')').toString());
  }
  if (flexibleElement != null) {
    message.setLength(0);
    message.append(""String_Node_Str"");
    for (    final Entry<String,Object> old : oldFieldProperties.entrySet()) {
      message.append(old.getKey()).append('=').append(old.getValue()).append(""String_Node_Str"");
      if ((old.getValue() != null && old.getValue().equals(newFieldProperties.get(old.getKey()))) || (old.getValue() == null && newFieldProperties.get(old.getKey()) == null)) {
        newFieldProperties.remove(old.getKey());
      }
    }
    if (Log.isDebugEnabled()) {
      Log.debug(message.append(')').toString());
    }
  }
  message.setLength(0);
  message.append(""String_Node_Str"");
  for (  final Entry<String,Object> newP : newFieldProperties.entrySet()) {
    message.append(newP.getKey()).append('=').append(newP.getValue()).append(""String_Node_Str"");
  }
  if (Log.isDebugEnabled()) {
    Log.debug(message.append(')').toString());
  }
  if (newFieldProperties.get(AdminUtil.PROP_FX_ORDER_IN_GROUP) != null) {
    newFieldProperties.put(AdminUtil.PROP_FX_GROUP,group);
  }
  newFieldProperties.put(AdminUtil.PROP_FX_FLEXIBLE_ELEMENT,(flexibleElement != null) ? flexibleElement : new TextAreaElementDTO());
  newFieldProperties.put(AdminUtil.ADMIN_PROJECT_MODEL,currentModel);
  newFieldProperties.put(AdminUtil.ADMIN_ORG_UNIT_MODEL,currentModel);
  newFieldProperties.put(AdminUtil.PROP_FX_OLD_FIELDS,oldFieldProperties);
  dispatch.execute(new CreateEntity(currentModel.getEntityName(),newFieldProperties),new CommandResultHandler<CreateResult>(){
    @Override public void onCommandFailure(    final Throwable caught){
      N10N.error(I18N.CONSTANTS.adminFlexibleCreationBox(),I18N.MESSAGES.adminStandardCreationFailure(I18N.CONSTANTS.adminStandardFlexibleName() + ""String_Node_Str"" + htmlName+ ""String_Node_Str""));
    }
    @Override public void onCommandSuccess(    final CreateResult result){
      if (result == null) {
        N10N.warn(I18N.CONSTANTS.adminFlexibleCreationBox(),I18N.MESSAGES.adminStandardCreationNull(I18N.CONSTANTS.adminStandardFlexibleName() + ""String_Node_Str"" + htmlName+ ""String_Node_Str""));
        return;
      }
      final boolean update=flexibleElement != null;
      final IsModel updatedModel=(IsModel)result.getEntity();
      FlexibleElementDTO updatedOrCreatedFlexibleElement=null;
      if (update) {
        for (        final FlexibleElementDTO updatedFlexibleElement : updatedModel.getAllElements()) {
          if (updatedFlexibleElement.getId().equals(flexibleElement.getId())) {
            updatedOrCreatedFlexibleElement=updatedFlexibleElement;
          }
        }
        N10N.infoNotif(I18N.CONSTANTS.adminFlexibleCreationBox(),I18N.MESSAGES.adminStandardUpdateSuccess(I18N.CONSTANTS.adminStandardFlexibleName() + ""String_Node_Str"" + htmlName+ ""String_Node_Str""));
      }
 else {
        final List<Integer> oldFlexibleIds=new ArrayList<Integer>();
        for (        final FlexibleElementDTO oldFlexibleElement : currentModel.getAllElements()) {
          oldFlexibleIds.add(oldFlexibleElement.getId());
        }
        for (        final FlexibleElementDTO newFlexibleElement : updatedModel.getAllElements()) {
          if (!oldFlexibleIds.contains(newFlexibleElement.getId())) {
            updatedOrCreatedFlexibleElement=newFlexibleElement;
          }
        }
        N10N.infoNotif(I18N.CONSTANTS.adminFlexibleCreationBox(),I18N.MESSAGES.adminStandardCreationSuccess(I18N.CONSTANTS.adminStandardFlexibleName() + ""String_Node_Str"" + htmlName+ ""String_Node_Str""));
      }
      eventBus.fireEvent(new UpdateEvent(UpdateEvent.FLEXIBLE_ELEMENT_UPDATE,updatedModel,update,updatedOrCreatedFlexibleElement));
      hideView();
    }
  }
,view.getSaveButton());
}",0.9995433268637972
35579,"/** 
 * {@inheritDoc}
 */
@Override public void onZoneRequest(ZoneRequest zoneRequest){
  final Boolean showBriefly=zoneRequest.getData(RequestParameter.SHOW_BRIEFLY);
  if (showBriefly != null && showBriefly) {
    forceOpen=true;
    updateMenuVisibility();
    new Timer(){
      @Override public void run(){
        forceOpen=false;
        updateMenuVisibility();
      }
    }
.schedule(AUTOCLOSE_TIME);
  }
}","/** 
 * {@inheritDoc}
 */
@Override public void onZoneRequest(ZoneRequest zoneRequest){
  final Boolean showBriefly=zoneRequest.getData(RequestParameter.SHOW_BRIEFLY);
  final Boolean pullDatabase=zoneRequest.getData(RequestParameter.PULL_DATABASE);
  if (showBriefly != null && showBriefly) {
    forceOpen=true;
    updateMenuVisibility();
    new Timer(){
      @Override public void run(){
        forceOpen=false;
        updateMenuVisibility();
      }
    }
.schedule(AUTOCLOSE_TIME);
  }
  if (pullDatabase != null && pullDatabase) {
    pull();
  }
}",0.8521560574948666
35580,"/** 
 * {@inheritDoc}
 */
@Override public Status onFailure(final Throwable e){
  if (e instanceof IncompatibleRemoteServiceException) {
    if (Log.isErrorEnabled()) {
      Log.error(""String_Node_Str"",e);
    }
    N10N.errorNotif(I18N.CONSTANTS.incompatibleRemoteServiceException());
    return Status.RETRY_OFFLINE;
  }
 else   if (e instanceof InvocationException) {
    if (Log.isErrorEnabled()) {
      Log.error(""String_Node_Str"",e);
    }
    N10N.errorNotif(""String_Node_Str"");
    return Status.RETRY_OFFLINE;
  }
 else   if (e instanceof InvalidSessionException) {
    if (Log.isDebugEnabled()) {
      Log.debug(""String_Node_Str"");
    }
    eventBus.logout();
    return Status.STOP;
  }
 else   if (e instanceof UnauthorizedAccessException) {
    if (Log.isDebugEnabled()) {
      Log.debug(""String_Node_Str"",e);
    }
    N10N.error(I18N.CONSTANTS.navigation_unauthorized_action());
    return Status.STOP;
  }
 else   if (e instanceof FunctionalException) {
    if (Log.isWarnEnabled()) {
      Log.warn(""String_Node_Str"",e);
    }
    return Status.CONTINUE;
  }
 else   if (e instanceof CommandException) {
    if (Log.isErrorEnabled()) {
      Log.error(""String_Node_Str"",e);
    }
    return Status.CONTINUE;
  }
 else {
    if (Log.isFatalEnabled()) {
      Log.fatal(""String_Node_Str"",e);
    }
    return Status.CONTINUE;
  }
}","/** 
 * {@inheritDoc}
 */
@Override public Status onFailure(final Throwable e){
  if (e instanceof IncompatibleRemoteServiceException) {
    if (Log.isErrorEnabled()) {
      Log.error(""String_Node_Str"",e);
    }
    N10N.error(I18N.CONSTANTS.incompatibleRemoteServiceException());
    return Status.RETRY_OFFLINE;
  }
 else   if (e instanceof InvocationException) {
    if (Log.isErrorEnabled()) {
      Log.error(""String_Node_Str"",e);
    }
    N10N.errorNotif(""String_Node_Str"");
    return Status.RETRY_OFFLINE;
  }
 else   if (e instanceof InvalidSessionException) {
    if (Log.isDebugEnabled()) {
      Log.debug(""String_Node_Str"");
    }
    eventBus.logout();
    return Status.STOP;
  }
 else   if (e instanceof UnauthorizedAccessException) {
    if (Log.isDebugEnabled()) {
      Log.debug(""String_Node_Str"",e);
    }
    N10N.error(I18N.CONSTANTS.navigation_unauthorized_action());
    return Status.STOP;
  }
 else   if (e instanceof FunctionalException) {
    if (Log.isWarnEnabled()) {
      Log.warn(""String_Node_Str"",e);
    }
    return Status.CONTINUE;
  }
 else   if (e instanceof CommandException) {
    if (Log.isErrorEnabled()) {
      Log.error(""String_Node_Str"",e);
    }
    return Status.CONTINUE;
  }
 else {
    if (Log.isFatalEnabled()) {
      Log.fatal(""String_Node_Str"",e);
    }
    return Status.CONTINUE;
  }
}",0.9981460882461994
35581,"/** 
 * {@inheritDoc}
 */
@Override protected String loadModelHeader(final OrgUnitModelDTO model){
  nameField.setValue(model.getName());
  typeField.setValue(model.getTitle());
  statusField.setValue(new EnumModel<ProjectModelStatus>(model.getStatus()));
  getMaintenanceGroupField().setVisible(model.getStatus() == ProjectModelStatus.USED || model.getStatus() == ProjectModelStatus.UNDER_MAINTENANCE);
  getUnderMaintenanceField().setValue(model.getDateMaintenance() != null);
  getMaintenanceDateField().setValue(model.getDateMaintenance());
  getMaintenanceTimeField().setValue(model.getDateMaintenance() != null ? getMaintenanceTimeField().findModel(model.getDateMaintenance()) : null);
  hasBudgetField.setValue(model.getHasBudget());
  canContainProjectsField.setValue(model.getCanContainProjects());
  return model.getName();
}","/** 
 * {@inheritDoc}
 */
@Override protected String loadModelHeader(final OrgUnitModelDTO model){
  nameField.setValue(model.getName());
  typeField.setValue(model.getTitle());
  statusField.setValue(new EnumModel<ProjectModelStatus>(model.getStatus()));
  getMaintenanceGroupField().setVisible(model.getStatus() == ProjectModelStatus.USED || model.isUnderMaintenance());
  getUnderMaintenanceField().setValue(model.getDateMaintenance() != null);
  getMaintenanceDateField().setValue(model.getDateMaintenance());
  getMaintenanceTimeField().setValue(model.getDateMaintenance() != null ? getMaintenanceTimeField().findModel(model.getDateMaintenance()) : null);
  hasBudgetField.setValue(model.getHasBudget());
  canContainProjectsField.setValue(model.getCanContainProjects());
  return model.getName();
}",0.9579011592434412
35582,"/** 
 * {@inheritDoc}
 */
@Override protected String loadModelHeader(final ProjectModelDTO model){
  nameField.setValue(model.getName());
  statusField.setValue(new EnumModel<ProjectModelStatus>(model.getStatus()));
  modelTypeField.setValue(projectTypeProvider.getProjectModelType(model));
  getMaintenanceGroupField().setVisible(model.getStatus() == ProjectModelStatus.USED || model.getStatus() == ProjectModelStatus.UNDER_MAINTENANCE);
  getUnderMaintenanceField().setValue(model.getDateMaintenance() != null);
  getMaintenanceDateField().setValue(model.getDateMaintenance());
  getMaintenanceTimeField().setValue(model.getDateMaintenance() != null ? getMaintenanceTimeField().findModel(model.getDateMaintenance()) : null);
  statusField.setEnabled(model.getDateMaintenance() == null);
  return model.getName();
}","/** 
 * {@inheritDoc}
 */
@Override protected String loadModelHeader(final ProjectModelDTO model){
  nameField.setValue(model.getName());
  statusField.setValue(new EnumModel<ProjectModelStatus>(model.getStatus()));
  modelTypeField.setValue(projectTypeProvider.getProjectModelType(model));
  getMaintenanceGroupField().setVisible(model.getStatus() == ProjectModelStatus.USED || model.isUnderMaintenance());
  getUnderMaintenanceField().setValue(model.getDateMaintenance() != null);
  getMaintenanceDateField().setValue(model.getDateMaintenance());
  getMaintenanceTimeField().setValue(model.getDateMaintenance() != null ? getMaintenanceTimeField().findModel(model.getDateMaintenance()) : null);
  statusField.setEnabled(model.getDateMaintenance() == null);
  return model.getName();
}",0.4996876951905059
35583,"private static OpenDatabaseRequest openUserDatabase(final String email){
  if (database != null) {
    return new AlreadyOpenedDatabaseRequest(database);
  }
  if (email == null) {
    return new NoopDatabaseRequest();
  }
  if (!isSupported()) {
    Log.warn(""String_Node_Str"");
    return new NoopDatabaseRequest();
  }
  if (!GWT.isProdMode()) {
    Log.warn(""String_Node_Str"");
    return new NoopDatabaseRequest();
  }
switch (state) {
case CLOSED:
    state=State.OPENING;
  final IndexedDB indexedDB=new IndexedDB();
final NativeOpenDatabaseRequest openDatabaseRequest=indexedDB.open(email,VERSION);
openDatabaseRequest.addSuccessHandler(new JavaScriptEvent(){
@Override public void onEvent(JavaScriptObject event){
  database=openDatabaseRequest.getResult();
  state=State.OPENED;
  for (  final AlreadyOpenedDatabaseRequest listener : listenerQueue) {
    listener.setResult(database);
  }
}
}
);
openDatabaseRequest.addUpgradeNeededHandler(new JavaScriptEvent<IDBVersionChangeEvent>(){
@Override public void onEvent(IDBVersionChangeEvent event){
upgradeDatabase(openDatabaseRequest.getResult(),event,email);
}
}
);
return openDatabaseRequest;
case OPENING:
final AlreadyOpenedDatabaseRequest listener=new AlreadyOpenedDatabaseRequest();
listenerQueue.add(listener);
return listener;
case OPENED:
return new AlreadyOpenedDatabaseRequest(database);
default :
return new NoopDatabaseRequest();
}
}","private static OpenDatabaseRequest openUserDatabase(final String email){
  if (database != null) {
    if (database.getName().equals(email)) {
      return new AlreadyOpenedDatabaseRequest(database);
    }
 else {
      state=State.CLOSED;
      database.close();
      database=null;
    }
  }
  if (email == null) {
    return new NoopDatabaseRequest();
  }
  if (!isSupported()) {
    Log.warn(""String_Node_Str"");
    return new NoopDatabaseRequest();
  }
  if (!GWT.isProdMode()) {
    Log.info(""String_Node_Str"");
    return new NoopDatabaseRequest();
  }
switch (state) {
case CLOSED:
    state=State.OPENING;
  final IndexedDB indexedDB=new IndexedDB();
final NativeOpenDatabaseRequest openDatabaseRequest=indexedDB.open(email,VERSION);
openDatabaseRequest.addSuccessHandler(new JavaScriptEvent(){
@Override public void onEvent(JavaScriptObject event){
  database=openDatabaseRequest.getResult();
  state=State.OPENED;
  for (  final AlreadyOpenedDatabaseRequest listener : listenerQueue) {
    listener.setResult(database);
  }
}
}
);
openDatabaseRequest.addUpgradeNeededHandler(new JavaScriptEvent<IDBVersionChangeEvent>(){
@Override public void onEvent(IDBVersionChangeEvent event){
upgradeDatabase(openDatabaseRequest.getResult(),event,email);
}
}
);
return openDatabaseRequest;
case OPENING:
final AlreadyOpenedDatabaseRequest listener=new AlreadyOpenedDatabaseRequest();
listenerQueue.add(listener);
return listener;
case OPENED:
return new AlreadyOpenedDatabaseRequest(database);
default :
return new NoopDatabaseRequest();
}
}",0.9507640067911716
35584,"private static void assertDesignPrivileges(User user,UserDatabase database){
  if (!database.isAllowedDesign(user)) {
    throw new IllegalAccessError();
  }
}","private static void assertDesignPrivileges(User user,UserDatabase database) throws UnauthorizedAccessException {
  if (!database.isAllowedDesign(user)) {
    throw new UnauthorizedAccessException(""String_Node_Str"" + database.getId() + ""String_Node_Str"");
  }
}",0.6730310262529833
35585,"/** 
 * {@inheritDoc}
 */
@Override public Activity create(final PropertyMap properties,final UserExecutionContext context){
  final UserDatabase database=getDatabase(properties);
  assertDesignPrivileges(context.getUser(),database);
  final Activity activity=new Activity();
  activity.setDatabase(database);
  activity.setSortOrder(calculateNextSortOrderIndex(database.getId()));
  activity.setLocationType(getLocationType(database,properties,context.getUser()));
  applyProperties(activity,properties);
  return activityDAO.persist(activity,context.getUser());
}","/** 
 * {@inheritDoc}
 */
@Override public Activity create(final PropertyMap properties,final UserExecutionContext context) throws UnauthorizedAccessException {
  final UserDatabase database=getDatabase(properties);
  assertDesignPrivileges(context.getUser(),database);
  final Activity activity=new Activity();
  activity.setDatabase(database);
  activity.setSortOrder(calculateNextSortOrderIndex(database.getId()));
  activity.setLocationType(getLocationType(database,properties,context.getUser()));
  applyProperties(activity,properties);
  return activityDAO.persist(activity,context.getUser());
}",0.9691252144082332
35586,"/** 
 * {@inheritDoc}
 */
@Override public Activity update(final Integer entityId,final PropertyMap changes,final UserExecutionContext context){
  final Activity activity=activityDAO.findById(entityId);
  assertDesignPrivileges(context.getUser(),activity.getDatabase());
  applyProperties(activity,changes);
  return activityDAO.persist(activity,context.getUser());
}","/** 
 * {@inheritDoc}
 */
@Override public Activity update(final Integer entityId,final PropertyMap changes,final UserExecutionContext context) throws UnauthorizedAccessException {
  final Activity activity=activityDAO.findById(entityId);
  assertDesignPrivileges(context.getUser(),activity.getDatabase());
  applyProperties(activity,changes);
  return activityDAO.persist(activity,context.getUser());
}",0.9532467532467532
35587,"/** 
 * Builds the nevigation links.
 * @param menuPanel The menu panel.
 */
private void buildNavLinks(final ContentPanel menuPanel){
  if (ProfileUtils.isGranted(authentication,GlobalPermissionEnum.CREATE_PROJECT)) {
    addNavLink(eventBus,menuPanel,I18N.CONSTANTS.createProjectNewProject(),IconImageBundle.ICONS.add(),new Listener<ButtonEvent>(){
      private final CreateProjectWindow window=new CreateProjectWindow(dispatcher,authentication,cache);
{
        window.addListener(new CreateProjectListener(){
          @Override public void projectCreated(          ProjectDTOLight project){
            projectsListPanel.getProjectsStore().clearFilters();
            projectsListPanel.getProjectsStore().add(project,false);
            projectsListPanel.getProjectsStore().applyFilters(null);
            Notification.show(I18N.CONSTANTS.createProjectSucceeded(),I18N.CONSTANTS.createProjectSucceededDetails());
          }
          @Override public void projectCreatedAsFunded(          ProjectDTOLight project,          double percentage){
          }
          @Override public void projectCreatedAsFunding(          ProjectDTOLight project,          double percentage){
          }
          @Override public void projectCreatedAsTest(          ProjectDTOLight project){
          }
          @Override public void projectDeletedAsTest(          ProjectDTOLight project){
          }
        }
);
      }
      @Override public void handleEvent(      ButtonEvent be){
        window.show();
      }
    }
);
  }
  if (ProfileUtils.isGranted(authentication,GlobalPermissionEnum.VIEW_ADMIN)) {
    addNavLink(eventBus,menuPanel,I18N.CONSTANTS.createTestProject(),IconImageBundle.ICONS.add(),new Listener<ButtonEvent>(){
      private final CreateProjectWindow window=new CreateProjectWindow(dispatcher,authentication,cache);
{
        window.addListener(new CreateProjectListener(){
          @Override public void projectCreated(          ProjectDTOLight project){
          }
          @Override public void projectCreatedAsFunded(          ProjectDTOLight project,          double percentage){
          }
          @Override public void projectCreatedAsFunding(          ProjectDTOLight project,          double percentage){
          }
          public void projectCreatedAsTest(          ProjectDTOLight project){
            projectsListPanel.getProjectsStore().clearFilters();
            projectsListPanel.getProjectsStore().add(project,false);
            projectsListPanel.getProjectsStore().commitChanges();
            projectsListPanel.getProjectsStore().applyFilters(null);
            Notification.show(I18N.CONSTANTS.createProjectSucceeded(),I18N.CONSTANTS.createTestProjectSucceededDetails());
          }
          @Override public void projectDeletedAsTest(          ProjectDTOLight project){
            menuPanel.mask(I18N.CONSTANTS.loadingDeleteProject());
            ProjectStore store=projectsListPanel.getProjectsStore();
            store.clearFilters();
            final int projectId=project.getId();
            List<ProjectDTOLight> parents=store.getRootItems();
            for (            ProjectDTOLight parent : parents) {
              List<ProjectDTOLight> childrens=parent.getChildrenProjects();
              for (              ProjectDTOLight child : childrens) {
                if (child.getId() == projectId || child.getProjectId() == projectId) {
                  store.remove(parent,child);
                }
              }
            }
            if (store.findModel(""String_Node_Str"",projectId) != null) {
              store.removeAll(store.findModel(""String_Node_Str"",projectId));
              store.remove(store.findModel(""String_Node_Str"",projectId));
            }
 else {
              store.removeAll(store.findModel(""String_Node_Str"",projectId));
              store.remove(store.findModel(""String_Node_Str"",projectId));
            }
            store.applyFilters(null);
            menuPanel.unmask();
            Notification.show(I18N.CONSTANTS.deleteTestProjectHeader(),I18N.CONSTANTS.deleteTestProjectSucceededDetails());
          }
        }
);
      }
      @Override public void handleEvent(      ButtonEvent be){
        window.showProjectTest();
      }
    }
);
  }
  if (ProfileUtils.isGranted(authentication,GlobalPermissionEnum.VIEW_ADMIN)) {
    addNavLink(eventBus,menuPanel,I18N.CONSTANTS.adminboard(),IconImageBundle.ICONS.setup(),new AdminPageState());
  }
  if (authentication.isShowMenus() || ProfileUtils.isGranted(authentication,GlobalPermissionEnum.VIEW_ACTIVITYINFO)) {
    addNavLink(eventBus,menuPanel,I18N.CONSTANTS.dataEntry(),IconImageBundle.ICONS.dataEntry(),new SiteGridPageState());
    addNavLink(eventBus,menuPanel,I18N.CONSTANTS.reports(),IconImageBundle.ICONS.report(),new ReportListPageState());
    addNavLink(eventBus,menuPanel,I18N.CONSTANTS.charts(),IconImageBundle.ICONS.barChart(),new ChartPageState());
    addNavLink(eventBus,menuPanel,I18N.CONSTANTS.maps(),IconImageBundle.ICONS.map(),new MapPageState());
    addNavLink(eventBus,menuPanel,I18N.CONSTANTS.tables(),IconImageBundle.ICONS.table(),new PivotPageState());
    addNavLink(eventBus,menuPanel,I18N.CONSTANTS.setup(),IconImageBundle.ICONS.setup(),new DbListPageState());
  }
}","/** 
 * Builds the nevigation links.
 * @param menuPanel The menu panel.
 */
private void buildNavLinks(final ContentPanel menuPanel){
  if (ProfileUtils.isGranted(authentication,GlobalPermissionEnum.CREATE_PROJECT)) {
    addNavLink(eventBus,menuPanel,I18N.CONSTANTS.createProjectNewProject(),IconImageBundle.ICONS.add(),new Listener<ButtonEvent>(){
      private final CreateProjectWindow window=new CreateProjectWindow(dispatcher,authentication,cache);
{
        window.addListener(new CreateProjectListener(){
          @Override public void projectCreated(          ProjectDTOLight project){
            projectsListPanel.getProjectsStore().clearFilters();
            projectsListPanel.getProjectsStore().add(project,false);
            projectsListPanel.getProjectsStore().applyFilters(null);
            Notification.show(I18N.CONSTANTS.createProjectSucceeded(),I18N.CONSTANTS.createProjectSucceededDetails());
          }
          @Override public void projectCreatedAsFunded(          ProjectDTOLight project,          double percentage){
          }
          @Override public void projectCreatedAsFunding(          ProjectDTOLight project,          double percentage){
          }
          @Override public void projectCreatedAsTest(          ProjectDTOLight project){
          }
          @Override public void projectDeletedAsTest(          ProjectDTOLight project){
          }
        }
);
      }
      @Override public void handleEvent(      ButtonEvent be){
        window.show();
      }
    }
);
  }
  if (ProfileUtils.isGranted(authentication,GlobalPermissionEnum.VIEW_ADMIN)) {
    addNavLink(eventBus,menuPanel,I18N.CONSTANTS.createTestProject(),IconImageBundle.ICONS.add(),new Listener<ButtonEvent>(){
      private final CreateProjectWindow window=new CreateProjectWindow(dispatcher,authentication,cache);
{
        window.addListener(new CreateProjectListener(){
          @Override public void projectCreated(          ProjectDTOLight project){
          }
          @Override public void projectCreatedAsFunded(          ProjectDTOLight project,          double percentage){
          }
          @Override public void projectCreatedAsFunding(          ProjectDTOLight project,          double percentage){
          }
          public void projectCreatedAsTest(          ProjectDTOLight project){
            projectsListPanel.getProjectsStore().clearFilters();
            projectsListPanel.getProjectsStore().add(project,false);
            projectsListPanel.getProjectsStore().commitChanges();
            projectsListPanel.getProjectsStore().applyFilters(null);
            Notification.show(I18N.CONSTANTS.createProjectSucceeded(),I18N.CONSTANTS.createTestProjectSucceededDetails());
          }
          @Override public void projectDeletedAsTest(          ProjectDTOLight project){
            menuPanel.mask(I18N.CONSTANTS.loadingDeleteProject());
            ProjectStore store=projectsListPanel.getProjectsStore();
            store.clearFilters();
            final int projectId=project.getId();
            List<ProjectDTOLight> parents=store.getRootItems();
            for (            ProjectDTOLight parent : parents) {
              List<ProjectDTOLight> childrens=parent.getChildrenProjects();
              for (              ProjectDTOLight child : childrens) {
                if (child.getId() == projectId || child.getProjectId() == projectId) {
                  store.remove(parent,child);
                }
              }
            }
            if (store.findModel(""String_Node_Str"",projectId) != null) {
              store.removeAll(store.findModel(""String_Node_Str"",projectId));
              store.remove(store.findModel(""String_Node_Str"",projectId));
            }
 else {
              store.removeAll(store.findModel(""String_Node_Str"",projectId));
              store.remove(store.findModel(""String_Node_Str"",projectId));
            }
            store.applyFilters(null);
            menuPanel.unmask();
            Notification.show(I18N.CONSTANTS.deleteTestProjectHeader(),I18N.CONSTANTS.deleteTestProjectSucceededDetails());
          }
        }
);
      }
      @Override public void handleEvent(      ButtonEvent be){
        window.showProjectTest();
      }
    }
);
  }
  if (ProfileUtils.isGranted(authentication,GlobalPermissionEnum.VIEW_ADMIN)) {
    addNavLink(eventBus,menuPanel,I18N.CONSTANTS.adminboard(),IconImageBundle.ICONS.setup(),new AdminPageState());
  }
  if (authentication.isShowMenus()) {
    addNavLink(eventBus,menuPanel,I18N.CONSTANTS.dataEntry(),IconImageBundle.ICONS.dataEntry(),new SiteGridPageState());
    addNavLink(eventBus,menuPanel,I18N.CONSTANTS.reports(),IconImageBundle.ICONS.report(),new ReportListPageState());
    addNavLink(eventBus,menuPanel,I18N.CONSTANTS.charts(),IconImageBundle.ICONS.barChart(),new ChartPageState());
    addNavLink(eventBus,menuPanel,I18N.CONSTANTS.maps(),IconImageBundle.ICONS.map(),new MapPageState());
    addNavLink(eventBus,menuPanel,I18N.CONSTANTS.tables(),IconImageBundle.ICONS.table(),new PivotPageState());
    addNavLink(eventBus,menuPanel,I18N.CONSTANTS.setup(),IconImageBundle.ICONS.setup(),new DbListPageState());
  }
}",0.9922346850733392
35588,"/** 
 * Builds the developpers and contributors panel.
 * @return The panel.
 */
private static Widget getDevelopersContributorsPanel(){
  final Grid grid=new Grid(2,2);
  grid.setCellPadding(0);
  grid.setCellSpacing(0);
  grid.addStyleName(""String_Node_Str"");
  grid.setText(0,0,I18N.CONSTANTS.sigmah_developers());
  grid.getCellFormatter().addStyleName(0,0,""String_Node_Str"");
  grid.setText(0,1,I18N.CONSTANTS.sigmah_contributors());
  grid.getCellFormatter().addStyleName(0,1,""String_Node_Str"");
  StringBuilder sb=new StringBuilder();
  for (  final ApplicationInfo.ApplicationDeveloper dev : info.getDeveloppers()) {
    sb.append(""String_Node_Str"");
    sb.append(dev.getName());
    sb.append(""String_Node_Str"");
    sb.append(dev.getEmail());
    sb.append(')');
    sb.append(""String_Node_Str"");
  }
  grid.setHTML(1,0,sb.toString());
  grid.getCellFormatter().setVerticalAlignment(1,0,HasVerticalAlignment.ALIGN_TOP);
  sb=new StringBuilder();
  for (  final ApplicationInfo.ApplicationContributor con : info.getContributors()) {
    sb.append(""String_Node_Str"");
    sb.append(con.getName());
    sb.append(""String_Node_Str"");
    sb.append(con.getEmail());
    sb.append(')');
    sb.append(""String_Node_Str"");
  }
  grid.setHTML(1,1,sb.toString());
  grid.getCellFormatter().setVerticalAlignment(1,1,HasVerticalAlignment.ALIGN_TOP);
  return grid;
}","/** 
 * Builds the developpers and contributors panel.
 * @return The panel.
 */
private static Widget getDevelopersContributorsPanel(){
  final Grid grid=new Grid(2,2);
  grid.setCellPadding(0);
  grid.setCellSpacing(0);
  grid.addStyleName(""String_Node_Str"");
  grid.setHeight(""String_Node_Str"");
  grid.setText(0,0,I18N.CONSTANTS.sigmah_developers());
  grid.getCellFormatter().addStyleName(0,0,""String_Node_Str"");
  grid.setText(0,1,I18N.CONSTANTS.sigmah_contributors());
  grid.getCellFormatter().addStyleName(0,1,""String_Node_Str"");
  StringBuilder sb=new StringBuilder();
  for (  final ApplicationInfo.ApplicationDeveloper dev : info.getDeveloppers()) {
    sb.append(""String_Node_Str"");
    sb.append(dev.getName());
    sb.append(""String_Node_Str"");
    sb.append(dev.getEmail());
    sb.append(""String_Node_Str"");
    sb.append(dev.getEmail());
    sb.append(""String_Node_Str"");
  }
  grid.setHTML(1,0,sb.toString());
  grid.getCellFormatter().setVerticalAlignment(1,0,HasVerticalAlignment.ALIGN_TOP);
  sb=new StringBuilder();
  for (  final ApplicationInfo.ApplicationContributor con : info.getContributors()) {
    sb.append(""String_Node_Str"");
    sb.append(con.getName());
    sb.append(""String_Node_Str"");
    sb.append(con.getEmail());
    sb.append(""String_Node_Str"");
    sb.append(con.getEmail());
    sb.append(""String_Node_Str"");
  }
  grid.setHTML(1,1,sb.toString());
  grid.getCellFormatter().setVerticalAlignment(1,1,HasVerticalAlignment.ALIGN_TOP);
  return grid;
}",0.9513475673783688
35589,"/** 
 * Builds the all window.
 * @param info info.
 */
private static void build(){
  final Widget versionPanel=getVersionPanel();
  final Widget rolesPanel=getManagersPartnersPanel();
  final Widget devConPanel=getDevelopersContributorsPanel();
  final VerticalPanel vPanel=new VerticalPanel();
  vPanel.setSpacing(0);
  vPanel.add(rolesPanel);
  vPanel.setCellVerticalAlignment(rolesPanel,HasVerticalAlignment.ALIGN_TOP);
  vPanel.add(devConPanel);
  vPanel.setCellVerticalAlignment(devConPanel,HasVerticalAlignment.ALIGN_TOP);
  final HorizontalPanel hPanel=new HorizontalPanel();
  hPanel.setSpacing(0);
  hPanel.add(versionPanel);
  hPanel.setCellVerticalAlignment(versionPanel,HasVerticalAlignment.ALIGN_MIDDLE);
  hPanel.setCellHorizontalAlignment(versionPanel,HasHorizontalAlignment.ALIGN_CENTER);
  hPanel.setCellWidth(versionPanel,""String_Node_Str"");
  versionPanel.getElement().getStyle().setMarginRight(45,Unit.PX);
  hPanel.add(vPanel);
  hPanel.setCellVerticalAlignment(vPanel,HasVerticalAlignment.ALIGN_TOP);
  final VerticalPanel mainPanel=new VerticalPanel();
  mainPanel.setSpacing(10);
  mainPanel.add(hPanel);
  mainPanel.add(getCreditsPanel());
  window=new Window();
  window.setWidth(735);
  window.setHeight(570);
  window.setHeading(I18N.CONSTANTS.credits());
  window.setPlain(true);
  window.setModal(true);
  window.setBlinkModal(true);
  window.setLayout(new FitLayout());
  final ContentPanel p=new ContentPanel();
  p.setLayout(new FitLayout());
  p.setHeaderVisible(false);
  p.add(mainPanel);
  window.add(p);
}","/** 
 * Builds the all window.
 * @param info info.
 */
private static void build(){
  final Widget versionPanel=getVersionPanel();
  final Widget rolesPanel=getManagersPartnersPanel();
  final Widget devConPanel=getDevelopersContributorsPanel();
  final VerticalPanel vPanel=new VerticalPanel();
  vPanel.setSpacing(0);
  vPanel.add(rolesPanel);
  vPanel.setCellVerticalAlignment(rolesPanel,HasVerticalAlignment.ALIGN_TOP);
  vPanel.add(devConPanel);
  vPanel.setCellVerticalAlignment(devConPanel,HasVerticalAlignment.ALIGN_TOP);
  vPanel.setWidth(""String_Node_Str"");
  final HorizontalPanel hPanel=new HorizontalPanel();
  hPanel.setSpacing(0);
  hPanel.add(versionPanel);
  hPanel.setCellVerticalAlignment(versionPanel,HasVerticalAlignment.ALIGN_MIDDLE);
  hPanel.setCellHorizontalAlignment(versionPanel,HasHorizontalAlignment.ALIGN_CENTER);
  hPanel.setCellWidth(versionPanel,""String_Node_Str"");
  versionPanel.getElement().getStyle().setMarginRight(45,Unit.PX);
  hPanel.add(vPanel);
  hPanel.setCellVerticalAlignment(vPanel,HasVerticalAlignment.ALIGN_TOP);
  hPanel.setWidth(""String_Node_Str"");
  final VerticalPanel mainPanel=new VerticalPanel();
  mainPanel.setSpacing(10);
  mainPanel.add(hPanel);
  mainPanel.add(getCreditsPanel());
  window=new Window();
  window.setWidth(735);
  window.setHeight(570);
  window.setHeading(I18N.CONSTANTS.credits());
  window.setPlain(true);
  window.setModal(true);
  window.setBlinkModal(true);
  window.setLayout(new FitLayout());
  final ContentPanel p=new ContentPanel();
  p.setLayout(new FitLayout());
  p.setHeaderVisible(false);
  p.add(mainPanel);
  window.add(p);
}",0.9759949463044852
35590,"private void saveLayoutGroups(final List<LayoutGroup> layoutGroups,EntityManager em,HashMap<Object,Object> modelesReset,HashSet<Object> modelesImport,Authentication authentication){
  final HashSet<Integer> reportModelsId=new HashSet<Integer>();
  if (layoutGroups != null) {
    for (    LayoutGroup layoutGroup : layoutGroups) {
      final List<LayoutConstraint> layoutConstraints;
      if (layoutGroup != null)       layoutConstraints=layoutGroup.getConstraints();
 else       layoutConstraints=null;
      if (layoutConstraints != null) {
        for (        LayoutConstraint layoutConstraint : layoutConstraints) {
          if (layoutConstraint != null && layoutConstraint.getElement() != null) {
            if (em.contains(layoutConstraint.getElement())) {
              continue;
            }
            if (layoutConstraint.getElement() instanceof QuestionElement) {
              List<QuestionChoiceElement> questionChoiceElements=((QuestionElement)layoutConstraint.getElement()).getChoices();
              CategoryType type=((QuestionElement)layoutConstraint.getElement()).getCategoryType();
              if (questionChoiceElements != null || type != null) {
                FlexibleElement parent=(FlexibleElement)layoutConstraint.getElement();
                ((QuestionElement)parent).setChoices(null);
                ((QuestionElement)parent).setCategoryType(null);
                em.persist(parent);
                if (questionChoiceElements != null) {
                  for (                  QuestionChoiceElement questionChoiceElement : questionChoiceElements) {
                    if (questionChoiceElement != null) {
                      questionChoiceElement.setId(null);
                      questionChoiceElement.setParentQuestion((QuestionElement)parent);
                      CategoryElement categoryElement=questionChoiceElement.getCategoryElement();
                      if (categoryElement != null) {
                        questionChoiceElement.setCategoryElement(null);
                        em.persist(questionChoiceElement);
                        saveProjectModelCategoryElement(categoryElement,em,modelesReset,modelesImport);
                        questionChoiceElement.setCategoryElement(categoryElement);
                        em.merge(questionChoiceElement);
                      }
 else {
                        em.persist(questionChoiceElement);
                      }
                    }
                  }
                  ((QuestionElement)parent).setChoices(questionChoiceElements);
                }
                if (type != null) {
                  if (em.find(CategoryType.class,type.getId()) == null) {
                    List<CategoryElement> typeElements=type.getElements();
                    if (typeElements != null) {
                      type.setElements(null);
                      em.merge(type);
                      for (                      CategoryElement element : typeElements) {
                        if (em.find(CategoryElement.class,element.getId()) == null) {
                          element.setParentType(type);
                          saveProjectModelCategoryElement(element,em,modelesReset,modelesImport);
                        }
                      }
                      type.setElements(typeElements);
                      em.merge(type);
                    }
                  }
                  ((QuestionElement)parent).setCategoryType(type);
                }
                em.merge(parent);
              }
 else {
                em.persist(layoutConstraint.getElement());
              }
            }
 else             if (layoutConstraint.getElement() instanceof ReportElement) {
              final ReportElement element=(ReportElement)layoutConstraint.getElement();
              final ProjectReportModel oldModel=element.getModel();
              if (oldModel != null) {
                final int oldModelId=oldModel.getId();
                final ProjectReportModel newModel;
                if (!reportModelsId.contains(oldModelId)) {
                  oldModel.resetImport(new HashMap<Object,Object>(),new HashSet<Object>());
                  oldModel.setOrganization(authentication.getUser().getOrganization());
                  newModel=oldModel;
                  ProjectReportModelHandler.saveProjectReportModelElement(newModel,em);
                  em.persist(newModel);
                  element.setModel(newModel);
                  em.persist(element);
                  reportModelsId.add(element.getModel().getId());
                }
 else {
                  newModel=em.find(ProjectReportModel.class,oldModelId);
                  element.setModel(newModel);
                  em.persist(element);
                }
              }
            }
 else             if (layoutConstraint.getElement() instanceof ReportListElement) {
              final ReportListElement element=(ReportListElement)layoutConstraint.getElement();
              final ProjectReportModel oldModel=element.getModel();
              if (oldModel != null) {
                final int oldModelId=oldModel.getId();
                final ProjectReportModel newModel;
                if (!reportModelsId.contains(oldModelId)) {
                  oldModel.resetImport(new HashMap<Object,Object>(),new HashSet<Object>());
                  oldModel.setOrganization(authentication.getUser().getOrganization());
                  newModel=oldModel;
                  ProjectReportModelHandler.saveProjectReportModelElement(newModel,em);
                  em.persist(newModel);
                  element.setModel(newModel);
                  em.persist(element);
                  reportModelsId.add(element.getModel().getId());
                }
 else {
                  newModel=em.find(ProjectReportModel.class,oldModelId);
                  element.setModel(newModel);
                  em.persist(element);
                }
              }
            }
 else {
              em.persist(layoutConstraint.getElement());
            }
          }
        }
      }
    }
  }
}","private void saveLayoutGroups(final List<LayoutGroup> layoutGroups,EntityManager em,HashMap<Object,Object> modelesReset,HashSet<Object> modelesImport,Authentication authentication){
  final HashSet<Integer> reportModelsId=new HashSet<Integer>();
  if (layoutGroups != null) {
    for (    LayoutGroup layoutGroup : layoutGroups) {
      final List<LayoutConstraint> layoutConstraints;
      if (layoutGroup != null)       layoutConstraints=layoutGroup.getConstraints();
 else       layoutConstraints=null;
      if (layoutConstraints != null) {
        for (        LayoutConstraint layoutConstraint : layoutConstraints) {
          if (layoutConstraint != null && layoutConstraint.getElement() != null) {
            if (em.contains(layoutConstraint.getElement())) {
              continue;
            }
            layoutConstraint.getElement().initializeExportFlags();
            if (layoutConstraint.getElement() instanceof QuestionElement) {
              List<QuestionChoiceElement> questionChoiceElements=((QuestionElement)layoutConstraint.getElement()).getChoices();
              CategoryType type=((QuestionElement)layoutConstraint.getElement()).getCategoryType();
              if (questionChoiceElements != null || type != null) {
                FlexibleElement parent=(FlexibleElement)layoutConstraint.getElement();
                ((QuestionElement)parent).setChoices(null);
                ((QuestionElement)parent).setCategoryType(null);
                em.persist(parent);
                if (questionChoiceElements != null) {
                  for (                  QuestionChoiceElement questionChoiceElement : questionChoiceElements) {
                    if (questionChoiceElement != null) {
                      questionChoiceElement.setId(null);
                      questionChoiceElement.setParentQuestion((QuestionElement)parent);
                      CategoryElement categoryElement=questionChoiceElement.getCategoryElement();
                      if (categoryElement != null) {
                        questionChoiceElement.setCategoryElement(null);
                        em.persist(questionChoiceElement);
                        saveProjectModelCategoryElement(categoryElement,em,modelesReset,modelesImport);
                        questionChoiceElement.setCategoryElement(categoryElement);
                        em.merge(questionChoiceElement);
                      }
 else {
                        em.persist(questionChoiceElement);
                      }
                    }
                  }
                  ((QuestionElement)parent).setChoices(questionChoiceElements);
                }
                if (type != null) {
                  if (em.find(CategoryType.class,type.getId()) == null) {
                    List<CategoryElement> typeElements=type.getElements();
                    if (typeElements != null) {
                      type.setElements(null);
                      em.merge(type);
                      for (                      CategoryElement element : typeElements) {
                        if (em.find(CategoryElement.class,element.getId()) == null) {
                          element.setParentType(type);
                          saveProjectModelCategoryElement(element,em,modelesReset,modelesImport);
                        }
                      }
                      type.setElements(typeElements);
                      em.merge(type);
                    }
                  }
                  ((QuestionElement)parent).setCategoryType(type);
                }
                em.merge(parent);
              }
 else {
                em.persist(layoutConstraint.getElement());
              }
            }
 else             if (layoutConstraint.getElement() instanceof ReportElement) {
              final ReportElement element=(ReportElement)layoutConstraint.getElement();
              final ProjectReportModel oldModel=element.getModel();
              if (oldModel != null) {
                final int oldModelId=oldModel.getId();
                final ProjectReportModel newModel;
                if (!reportModelsId.contains(oldModelId)) {
                  oldModel.resetImport(new HashMap<Object,Object>(),new HashSet<Object>());
                  oldModel.setOrganization(authentication.getUser().getOrganization());
                  newModel=oldModel;
                  ProjectReportModelHandler.saveProjectReportModelElement(newModel,em);
                  em.persist(newModel);
                  element.setModel(newModel);
                  em.persist(element);
                  reportModelsId.add(element.getModel().getId());
                }
 else {
                  newModel=em.find(ProjectReportModel.class,oldModelId);
                  element.setModel(newModel);
                  em.persist(element);
                }
              }
            }
 else             if (layoutConstraint.getElement() instanceof ReportListElement) {
              final ReportListElement element=(ReportListElement)layoutConstraint.getElement();
              final ProjectReportModel oldModel=element.getModel();
              if (oldModel != null) {
                final int oldModelId=oldModel.getId();
                final ProjectReportModel newModel;
                if (!reportModelsId.contains(oldModelId)) {
                  oldModel.resetImport(new HashMap<Object,Object>(),new HashSet<Object>());
                  oldModel.setOrganization(authentication.getUser().getOrganization());
                  newModel=oldModel;
                  ProjectReportModelHandler.saveProjectReportModelElement(newModel,em);
                  em.persist(newModel);
                  element.setModel(newModel);
                  em.persist(element);
                  reportModelsId.add(element.getModel().getId());
                }
 else {
                  newModel=em.find(ProjectReportModel.class,oldModelId);
                  element.setModel(newModel);
                  em.persist(element);
                }
              }
            }
 else {
              em.persist(layoutConstraint.getElement());
            }
          }
        }
      }
    }
  }
}",0.9945444182069864
35591,"public Map<String,List<String[]>> generateGlobalExportData(final Integer organizationId,EntityManager entityManager,final String localeString) throws SchedulerException {
  if (entityManager == null) {
    entityManager=injector.getInstance(EntityManager.class);
  }
  Locale locale=null;
  if (localeString != null)   locale=new Locale(localeString);
  Translator translator=new UIConstantsTranslator(new Locale(""String_Node_Str""));
  final GlobalExportDAO exportDAO=new GlobalExportHibernateDAO(entityManager);
  final Organization organization=entityManager.find(Organization.class,organizationId);
  final List<ProjectModel> pModels=exportDAO.getProjectModelsByOrganization(organization);
  final List<Project> projects=exportDAO.getProjects(pModels);
  final Map<String,List<Project>> pModelProjectsMap=new HashMap<String,List<Project>>();
  for (  final Project project : projects) {
    final String pModelName=project.getProjectModel().getName();
    List<Project> pModelProjects=pModelProjectsMap.get(pModelName);
    if (pModelProjects == null) {
      pModelProjects=new ArrayList<Project>();
      pModelProjectsMap.put(pModelName,pModelProjects);
    }
    pModelProjects.add(project);
  }
  final Map<String,List<FlexibleElement>> pModelElementsMap=new HashMap<String,List<FlexibleElement>>();
  for (  final ProjectModel projectModel : pModels) {
    final String pModelName=projectModel.getName();
    final List<FlexibleElement> pModelElements=new ArrayList<FlexibleElement>();
    pModelElementsMap.put(pModelName,pModelElements);
    fillElementList(pModelElements,projectModel.getProjectDetails().getLayout());
    for (    final PhaseModel phaseModel : projectModel.getPhases()) {
      fillElementList(pModelElements,phaseModel.getLayout());
    }
  }
  final CommandHandler<GetValue> handler=new GetValueHandler(entityManager,injector.getInstance(Mapper.class));
  final Map<String,List<String[]>> pModelExportDataMap=new TreeMap<String,List<String[]>>();
  for (  final String pModelName : pModelElementsMap.keySet()) {
    final List<FlexibleElement> elements=pModelElementsMap.get(pModelName);
    final List<String[]> exportData=new ArrayList<String[]>();
    pModelExportDataMap.put(pModelName,exportData);
    final String[] titles=new String[elements.size()];
    boolean isFirstLine=true;
    for (    final Project project : pModelProjectsMap.get(pModelName)) {
      final String[] values=new String[elements.size()];
      int titleIndex=0;
      int valueIndex=0;
      for (      final FlexibleElement element : elements) {
        final String elementName=""String_Node_Str"" + element.getClass().getSimpleName();
        final GetValue command=new GetValue(project.getId(),element.getId(),elementName,null);
        try {
          final ValueResult valueResult=(ValueResult)handler.execute(command,null);
          ValueLabel pair=null;
          if (elementName.equals(""String_Node_Str"")) {
            pair=getDefElementPair(valueResult,element,project,entityManager,locale,translator);
          }
 else           if (elementName.equals(""String_Node_Str"")) {
            pair=getCheckboxElementPair(valueResult,element,locale,translator);
          }
 else           if (elementName.equals(""String_Node_Str"")) {
            pair=getTextAreaElementPair(valueResult,element);
          }
          if (elementName.equals(""String_Node_Str"")) {
            pair=getTripletPair(element,valueResult);
          }
          if (elementName.equals(""String_Node_Str"")) {
            pair=getChoicePair(element,valueResult);
          }
          if (isFirstLine) {
            titles[titleIndex++]=pair != null ? pair.getFormattedLabel() : null;
          }
          String valueStr=null;
          if (pair != null) {
            Object value=pair.getValue();
            if (value == null) {
              valueStr=null;
            }
 else             if (value instanceof String) {
              valueStr=(String)value;
            }
 else             if (value instanceof Double) {
              Double d=(Double)value;
              valueStr=LogFrameExportData.AGGR_AVG_FORMATTER.format(d.doubleValue());
            }
 else             if (value instanceof Long) {
              Long l=(Long)value;
              valueStr=LogFrameExportData.AGGR_SUM_FORMATTER.format(l.longValue());
            }
 else {
              valueStr=ExportConstants.EXPORT_DATE_FORMAT.format((Date)value);
            }
          }
          values[valueIndex++]=valueStr;
        }
 catch (        CommandException e) {
          Log.error(""String_Node_Str"" + e.getMessage());
        }
      }
      if (isFirstLine) {
        exportData.add(titles);
        isFirstLine=false;
      }
      exportData.add(values);
    }
  }
  return pModelExportDataMap;
}","public Map<String,List<String[]>> generateGlobalExportData(final Integer organizationId,EntityManager entityManager,final String localeString) throws SchedulerException {
  if (entityManager == null) {
    entityManager=injector.getInstance(EntityManager.class);
  }
  Locale locale=null;
  if (localeString != null)   locale=new Locale(localeString);
  Translator translator=new UIConstantsTranslator(new Locale(""String_Node_Str""));
  final GlobalExportDAO exportDAO=new GlobalExportHibernateDAO(entityManager);
  final Organization organization=entityManager.find(Organization.class,organizationId);
  final List<ProjectModel> pModels=exportDAO.getProjectModelsByOrganization(organization);
  final List<Project> projects=exportDAO.getProjects(pModels);
  final Map<String,List<Project>> pModelProjectsMap=new HashMap<String,List<Project>>();
  for (  final Project project : projects) {
    final String pModelName=project.getProjectModel().getName();
    List<Project> pModelProjects=pModelProjectsMap.get(pModelName);
    if (pModelProjects == null) {
      pModelProjects=new ArrayList<Project>();
      pModelProjectsMap.put(pModelName,pModelProjects);
    }
    pModelProjects.add(project);
  }
  final Map<String,List<FlexibleElement>> pModelElementsMap=new HashMap<String,List<FlexibleElement>>();
  for (  final ProjectModel projectModel : pModels) {
    final String pModelName=projectModel.getName();
    final List<FlexibleElement> pModelElements=new ArrayList<FlexibleElement>();
    pModelElementsMap.put(pModelName,pModelElements);
    fillElementList(pModelElements,projectModel.getProjectDetails().getLayout());
    for (    final PhaseModel phaseModel : projectModel.getPhases()) {
      fillElementList(pModelElements,phaseModel.getLayout());
    }
  }
  final CommandHandler<GetValue> handler=new GetValueHandler(entityManager,injector.getInstance(Mapper.class));
  final Map<String,List<String[]>> pModelExportDataMap=new TreeMap<String,List<String[]>>();
  for (  final String pModelName : pModelElementsMap.keySet()) {
    if (pModelProjectsMap.get(pModelName) == null)     continue;
    final List<FlexibleElement> elements=pModelElementsMap.get(pModelName);
    final List<String[]> exportData=new ArrayList<String[]>();
    pModelExportDataMap.put(pModelName,exportData);
    final String[] titles=new String[elements.size()];
    boolean isFirstLine=true;
    for (    final Project project : pModelProjectsMap.get(pModelName)) {
      final String[] values=new String[elements.size()];
      int titleIndex=0;
      int valueIndex=0;
      for (      final FlexibleElement element : elements) {
        final String elementName=""String_Node_Str"" + element.getClass().getSimpleName();
        final GetValue command=new GetValue(project.getId(),element.getId(),elementName,null);
        try {
          final ValueResult valueResult=(ValueResult)handler.execute(command,null);
          ValueLabel pair=null;
          if (elementName.equals(""String_Node_Str"")) {
            pair=getDefElementPair(valueResult,element,project,entityManager,locale,translator);
          }
 else           if (elementName.equals(""String_Node_Str"")) {
            pair=getCheckboxElementPair(valueResult,element,locale,translator);
          }
 else           if (elementName.equals(""String_Node_Str"")) {
            pair=getTextAreaElementPair(valueResult,element);
          }
          if (elementName.equals(""String_Node_Str"")) {
            pair=getTripletPair(element,valueResult);
          }
          if (elementName.equals(""String_Node_Str"")) {
            pair=getChoicePair(element,valueResult);
          }
          if (isFirstLine) {
            titles[titleIndex++]=pair != null ? pair.getFormattedLabel() : null;
          }
          String valueStr=null;
          if (pair != null) {
            Object value=pair.getValue();
            if (value == null) {
              valueStr=null;
            }
 else             if (value instanceof String) {
              valueStr=(String)value;
            }
 else             if (value instanceof Double) {
              Double d=(Double)value;
              valueStr=LogFrameExportData.AGGR_AVG_FORMATTER.format(d.doubleValue());
            }
 else             if (value instanceof Long) {
              Long l=(Long)value;
              valueStr=LogFrameExportData.AGGR_SUM_FORMATTER.format(l.longValue());
            }
 else {
              valueStr=ExportConstants.EXPORT_DATE_FORMAT.format((Date)value);
            }
          }
          values[valueIndex++]=valueStr;
        }
 catch (        CommandException e) {
          Log.error(""String_Node_Str"" + e.getMessage());
        }
      }
      if (isFirstLine) {
        exportData.add(titles);
        isFirstLine=false;
      }
      exportData.add(values);
    }
  }
  return pModelExportDataMap;
}",0.9932411354892378
35592,"private void addListeners(){
  addStatusListListener();
  view.getSaveButton().addListener(Events.OnClick,new Listener<ButtonEvent>(){
    @Override public void handleEvent(    ButtonEvent be){
      updateModel();
      dataChanged=false;
    }
  }
);
  Listener<BaseEvent> dataChangedListener=new Listener<BaseEvent>(){
    @Override public void handleEvent(    BaseEvent be){
      dataChanged=true;
    }
  }
;
  view.getCanContainProjectsCheckBox().addListener(Events.OnClick,dataChangedListener);
  view.getHasBudgetCheckBox().addListener(Events.OnClick,dataChangedListener);
  view.getTitleField().addListener(Events.Change,dataChangedListener);
  view.getNameField().addListener(Events.Change,dataChangedListener);
  view.getProjectTypeRadioGroup().addListener(Events.Change,dataChangedListener);
}","private void addListeners(){
  addStatusListListener();
  view.getSaveButton().addListener(Events.OnClick,new Listener<ButtonEvent>(){
    @Override public void handleEvent(    ButtonEvent be){
      dataChanged=false;
      updateModel();
    }
  }
);
  Listener<BaseEvent> dataChangedListener=new Listener<BaseEvent>(){
    @Override public void handleEvent(    BaseEvent be){
      dataChanged=true;
    }
  }
;
  view.getCanContainProjectsCheckBox().addListener(Events.OnClick,dataChangedListener);
  view.getHasBudgetCheckBox().addListener(Events.OnClick,dataChangedListener);
  view.getTitleField().addListener(Events.Change,dataChangedListener);
  view.getNameField().addListener(Events.Change,dataChangedListener);
  for (  Field<?> radio : view.getProjectTypeRadioGroup().getAll()) {
    radio.addListener(Events.OnClick,dataChangedListener);
  }
}",0.9140108238123872
35593,"@Override public void onUIAction(String actionId){
  if (UIActions.save.equals(actionId)) {
    save();
  }
 else   if (UIActions.discardChanges.equals(actionId)) {
    discard();
  }
}","@Override public void onUIAction(String actionId){
  if (UIActions.save.equals(actionId)) {
    save();
    this.updated=false;
  }
 else   if (UIActions.discardChanges.equals(actionId)) {
    discard();
    this.updated=false;
  }
}",0.8851674641148325
35594,"@Override public void handleEvent(NavigationEvent be){
  if (be.getParentObject() instanceof TabBar && be.getNavigationError() == NavigationError.NONE && be.getParentEvent().getNavigationError() == NavigationError.WORK_NOT_SAVED) {
    if (tabBar.getLastAction() == TabAction.REMOVE) {
      final Tab currentTab=tabModel.get(tabBar.getSelectedIndex());
      tabModel.remove(currentTab);
    }
 else     if (tabBar.getLastAction() == TabAction.NAVIGATE) {
      final Tab targetTab=tabModel.get(be.getPlace());
      NavigationError navigationError=tabBar.displayTab(targetTab);
      if (navigationError == NavigationError.NONE) {
        tabBar.setSelectedIndex(tabModel.indexOf(targetTab));
      }
    }
  }
 else   if (be.getParentObject() == logoutButton && be.getNavigationError() == NavigationError.NONE && be.getParentEvent().getNavigationError() == NavigationError.WORK_NOT_SAVED) {
    logOut();
  }
 else {
    final PageState state=be.getPlace();
    activePageState=state;
    final String title;
    if (state instanceof TabPage)     title=((TabPage)state).getTabTitle();
 else     title=I18N.CONSTANTS.title();
    final Tab targetTab=tabModel.add(title,be.getPlace(),true);
    if (state instanceof HasTab)     ((HasTab)state).setTab(targetTab);
  }
}","@Override public void handleEvent(ProjectEvent pe){
  final Tab currentTab=tabModel.get(tabBar.getSelectedIndex());
  tabModel.remove(currentTab);
}",0.1990119971771348
35595,"@Inject public SigmahAppFrame(final EventBus eventBus,final Authentication auth,final TabModel tabModel,final Dispatcher dispatcher,final UserLocalCache cache,final OnlineMode onlineMode){
  if (auth == null) {
    this.view=new SigmahViewport(0,0);
    this.view.setLayout(new FitLayout());
    this.view.syncSize();
    this.view.setBorders(false);
    this.view.add(new LoginView());
    this.view.layout();
    RootPanel.get().add(this.view);
    RootPanel.get(""String_Node_Str"").getElement().removeFromParent();
  }
 else {
    cache.init();
    RootPanel.get(""String_Node_Str"").add(new Label(auth.getEmail()));
    final Anchor reportButton=new Anchor(I18N.CONSTANTS.bugReport());
    dispatcher.execute(new GetHostServerInfo(),null,new AsyncCallback<HostServerInfo>(){
      @Override public void onFailure(      Throwable caught){
      }
      @Override public void onSuccess(      HostServerInfo result){
        configureReportAnchor(reportButton,auth,result.getHostUrl());
      }
    }
);
    RootPanel.get(""String_Node_Str"").add(reportButton);
    final Anchor helpButton=new Anchor(I18N.CONSTANTS.help());
    helpButton.addClickHandler(new ClickHandler(){
      @Override public void onClick(      ClickEvent event){
        SigmahHelpWindow.show(activePageState);
      }
    }
);
    RootPanel.get(""String_Node_Str"").add(helpButton);
    final Anchor logoutButton=new Anchor(I18N.CONSTANTS.logout());
    if (RootPanel.get(""String_Node_Str"") != null) {
      RootPanel.get(""String_Node_Str"").add(logoutButton);
    }
    if (dispatcher instanceof DispatchOperator && Factory.getInstance() != null)     RootPanel.get(""String_Node_Str"").add(OfflineLabelFactory.getLabel((DispatchOperator)dispatcher,onlineMode));
    final Anchor creditButton=new Anchor(I18N.CONSTANTS.credits());
    creditButton.addClickHandler(new ClickHandler(){
      boolean initalized=false;
      @Override public void onClick(      ClickEvent event){
        if (initalized) {
          CreditFrame.show();
        }
 else {
          dispatcher.execute(new GetApplicationInfo(),null,new AsyncCallback<ApplicationInfo>(){
            @Override public void onFailure(            Throwable caught){
            }
            @Override public void onSuccess(            ApplicationInfo result){
              CreditFrame.init(result);
              CreditFrame.show();
            }
          }
);
        }
      }
    }
);
    if (RootPanel.get(""String_Node_Str"") != null) {
      RootPanel.get(""String_Node_Str"").add(creditButton);
    }
    final TabBar tabBar=new TabBar(tabModel,eventBus);
    activePageState=new DashboardPageState();
    final Tab dashboardTab=tabModel.add(I18N.CONSTANTS.dashboard(),activePageState,false);
    tabBar.addTabStyleName(tabModel.indexOf(dashboardTab),""String_Node_Str"");
    final RootPanel tabs=RootPanel.get(""String_Node_Str"");
    tabs.add(tabBar);
    eventBus.addListener(NavigationHandler.NavigationAgreed,new Listener<NavigationEvent>(){
      @Override public void handleEvent(      NavigationEvent be){
        if (be.getParentObject() instanceof TabBar && be.getNavigationError() == NavigationError.NONE && be.getParentEvent().getNavigationError() == NavigationError.WORK_NOT_SAVED) {
          if (tabBar.getLastAction() == TabAction.REMOVE) {
            final Tab currentTab=tabModel.get(tabBar.getSelectedIndex());
            tabModel.remove(currentTab);
          }
 else           if (tabBar.getLastAction() == TabAction.NAVIGATE) {
            final Tab targetTab=tabModel.get(be.getPlace());
            NavigationError navigationError=tabBar.displayTab(targetTab);
            if (navigationError == NavigationError.NONE) {
              tabBar.setSelectedIndex(tabModel.indexOf(targetTab));
            }
          }
        }
 else         if (be.getParentObject() == logoutButton && be.getNavigationError() == NavigationError.NONE && be.getParentEvent().getNavigationError() == NavigationError.WORK_NOT_SAVED) {
          logOut();
        }
 else {
          final PageState state=be.getPlace();
          activePageState=state;
          final String title;
          if (state instanceof TabPage)           title=((TabPage)state).getTabTitle();
 else           title=I18N.CONSTANTS.title();
          final Tab targetTab=tabModel.add(title,be.getPlace(),true);
          if (state instanceof HasTab)           ((HasTab)state).setTab(targetTab);
        }
      }
    }
);
    logoutButton.addClickHandler(new ClickHandler(){
      @Override public void onClick(      ClickEvent event){
        Tab targetTab=null;
        if (tabBar.getSelectedIndex() > 0) {
          targetTab=tabModel.get(tabBar.getSelectedIndex() - 1);
        }
 else         if (tabModel.size() > 1) {
          targetTab=tabModel.get(tabBar.getSelectedIndex() - 1);
        }
        if (targetTab != null) {
          NavigationEvent navigationEvent=new NavigationEvent(NavigationHandler.NavigationRequested,targetTab.getState(),null,logoutButton);
          eventBus.fireEvent(navigationEvent);
          if (navigationEvent.getNavigationError() == NavigationError.NONE) {
            logOut();
          }
        }
 else {
          logOut();
        }
      }
    }
);
    int clutterHeight=getDecorationHeight(HEADER_DEFAULT_HEIGHT);
    this.view=new SigmahViewport(0,clutterHeight);
    this.view.setLayout(new FitLayout());
    this.view.syncSize();
    this.view.setBorders(true);
    RootPanel.get(""String_Node_Str"").add(this.view);
    cache.getOrganizationCache().getOrganization(new AsyncCallback<OrganizationDTO>(){
      @Override public void onSuccess(      OrganizationDTO result){
        if (result != null) {
          RootPanel.get(""String_Node_Str"").getElement().setInnerHTML(result.getName().toUpperCase());
          RootPanel.get(""String_Node_Str"").getElement().setAttribute(""String_Node_Str"",""String_Node_Str"" + GWT.getModuleBaseURL() + ""String_Node_Str""+ FileUploadUtils.IMAGE_URL+ ""String_Node_Str""+ result.getLogo()+ ""String_Node_Str"");
        }
      }
      @Override public void onFailure(      Throwable e){
        Log.error(""String_Node_Str"" + auth.getUserId() + ""String_Node_Str"",e);
      }
    }
);
  }
}","@Inject public SigmahAppFrame(final EventBus eventBus,final Authentication auth,final TabModel tabModel,final Dispatcher dispatcher,final UserLocalCache cache,final OnlineMode onlineMode){
  if (auth == null) {
    this.view=new SigmahViewport(0,0);
    this.view.setLayout(new FitLayout());
    this.view.syncSize();
    this.view.setBorders(false);
    this.view.add(new LoginView());
    this.view.layout();
    RootPanel.get().add(this.view);
    RootPanel.get(""String_Node_Str"").getElement().removeFromParent();
  }
 else {
    cache.init();
    RootPanel.get(""String_Node_Str"").add(new Label(auth.getEmail()));
    final Anchor reportButton=new Anchor(I18N.CONSTANTS.bugReport());
    dispatcher.execute(new GetHostServerInfo(),null,new AsyncCallback<HostServerInfo>(){
      @Override public void onFailure(      Throwable caught){
      }
      @Override public void onSuccess(      HostServerInfo result){
        configureReportAnchor(reportButton,auth,result.getHostUrl());
      }
    }
);
    RootPanel.get(""String_Node_Str"").add(reportButton);
    final Anchor helpButton=new Anchor(I18N.CONSTANTS.help());
    helpButton.addClickHandler(new ClickHandler(){
      @Override public void onClick(      ClickEvent event){
        SigmahHelpWindow.show(activePageState);
      }
    }
);
    RootPanel.get(""String_Node_Str"").add(helpButton);
    final Anchor logoutButton=new Anchor(I18N.CONSTANTS.logout());
    if (RootPanel.get(""String_Node_Str"") != null) {
      RootPanel.get(""String_Node_Str"").add(logoutButton);
    }
    if (dispatcher instanceof DispatchOperator && Factory.getInstance() != null)     RootPanel.get(""String_Node_Str"").add(OfflineLabelFactory.getLabel((DispatchOperator)dispatcher,onlineMode));
    final Anchor creditButton=new Anchor(I18N.CONSTANTS.credits());
    creditButton.addClickHandler(new ClickHandler(){
      boolean initalized=false;
      @Override public void onClick(      ClickEvent event){
        if (initalized) {
          CreditFrame.show();
        }
 else {
          dispatcher.execute(new GetApplicationInfo(),null,new AsyncCallback<ApplicationInfo>(){
            @Override public void onFailure(            Throwable caught){
            }
            @Override public void onSuccess(            ApplicationInfo result){
              CreditFrame.init(result);
              CreditFrame.show();
            }
          }
);
        }
      }
    }
);
    if (RootPanel.get(""String_Node_Str"") != null) {
      RootPanel.get(""String_Node_Str"").add(creditButton);
    }
    final TabBar tabBar=new TabBar(tabModel,eventBus);
    activePageState=new DashboardPageState();
    final Tab dashboardTab=tabModel.add(I18N.CONSTANTS.dashboard(),activePageState,false);
    tabBar.addTabStyleName(tabModel.indexOf(dashboardTab),""String_Node_Str"");
    final RootPanel tabs=RootPanel.get(""String_Node_Str"");
    tabs.add(tabBar);
    eventBus.addListener(NavigationHandler.NavigationAgreed,new Listener<NavigationEvent>(){
      @Override public void handleEvent(      NavigationEvent be){
        if (be.getParentObject() instanceof TabBar && be.getNavigationError() == NavigationError.NONE && be.getParentEvent().getNavigationError() == NavigationError.WORK_NOT_SAVED) {
          if (tabBar.getLastAction() == TabAction.REMOVE) {
            final Tab currentTab=tabModel.get(tabBar.getSelectedIndex());
            tabModel.remove(currentTab);
          }
 else           if (tabBar.getLastAction() == TabAction.NAVIGATE) {
            final Tab targetTab=tabModel.get(be.getPlace());
            NavigationError navigationError=tabBar.displayTab(targetTab);
            if (navigationError == NavigationError.NONE) {
              tabBar.setSelectedIndex(tabModel.indexOf(targetTab));
            }
          }
        }
 else         if (be.getParentObject() == logoutButton && be.getNavigationError() == NavigationError.NONE && be.getParentEvent().getNavigationError() == NavigationError.WORK_NOT_SAVED) {
          logOut();
        }
 else {
          final PageState state=be.getPlace();
          activePageState=state;
          final String title;
          if (state instanceof TabPage)           title=((TabPage)state).getTabTitle();
 else           title=I18N.CONSTANTS.title();
          final Tab targetTab=tabModel.add(title,be.getPlace(),true);
          if (state instanceof HasTab)           ((HasTab)state).setTab(targetTab);
        }
      }
    }
);
    eventBus.addListener(AppEvents.DeleteProject,new Listener<ProjectEvent>(){
      @Override public void handleEvent(      ProjectEvent pe){
        final Tab currentTab=tabModel.get(tabBar.getSelectedIndex());
        tabModel.remove(currentTab);
      }
    }
);
    logoutButton.addClickHandler(new ClickHandler(){
      @Override public void onClick(      ClickEvent event){
        Tab targetTab=null;
        if (tabBar.getSelectedIndex() > 0) {
          targetTab=tabModel.get(tabBar.getSelectedIndex() - 1);
        }
 else         if (tabModel.size() > 1) {
          targetTab=tabModel.get(tabBar.getSelectedIndex() - 1);
        }
        if (targetTab != null) {
          NavigationEvent navigationEvent=new NavigationEvent(NavigationHandler.NavigationRequested,targetTab.getState(),null,logoutButton);
          eventBus.fireEvent(navigationEvent);
          if (navigationEvent.getNavigationError() == NavigationError.NONE) {
            logOut();
          }
        }
 else {
          logOut();
        }
      }
    }
);
    int clutterHeight=getDecorationHeight(HEADER_DEFAULT_HEIGHT);
    this.view=new SigmahViewport(0,clutterHeight);
    this.view.setLayout(new FitLayout());
    this.view.syncSize();
    this.view.setBorders(true);
    RootPanel.get(""String_Node_Str"").add(this.view);
    cache.getOrganizationCache().getOrganization(new AsyncCallback<OrganizationDTO>(){
      @Override public void onSuccess(      OrganizationDTO result){
        if (result != null) {
          RootPanel.get(""String_Node_Str"").getElement().setInnerHTML(result.getName().toUpperCase());
          RootPanel.get(""String_Node_Str"").getElement().setAttribute(""String_Node_Str"",""String_Node_Str"" + GWT.getModuleBaseURL() + ""String_Node_Str""+ FileUploadUtils.IMAGE_URL+ ""String_Node_Str""+ result.getLogo()+ ""String_Node_Str"");
        }
      }
      @Override public void onFailure(      Throwable e){
        Log.error(""String_Node_Str"" + auth.getUserId() + ""String_Node_Str"",e);
      }
    }
);
  }
}",0.9788313644652344
35596,"private void deleteIndicatorGroup(IndicatorGroup selected){
  List<ModelData> children=treeStore.getChildren(selected);
  treeStore.remove(selected);
  for (  ModelData child : children) {
    treeStore.add(child,false);
    treeStore.getRecord(child).set(""String_Node_Str"",null);
  }
}","private void deleteIndicatorGroup(IndicatorGroup selected){
  List<ModelData> children=treeStore.getChildren(selected);
  treeStore.remove(selected);
  treeStore.getRecord(selected).set(""String_Node_Str"",true);
  for (  ModelData child : children) {
    treeStore.add(child,false);
    treeStore.getRecord(child).set(""String_Node_Str"",null);
  }
}",0.9036334913112164
35597,"@Override protected void doLoad(){
  service.execute(GetIndicators.forDatabase(currentDatabaseId),null,new AsyncCallback<IndicatorListResult>(){
    @Override public void onFailure(    Throwable caught){
    }
    @Override public void onSuccess(    IndicatorListResult result){
      treeStore.removeAll();
      if (!result.getUngroupedIndicators().isEmpty()) {
        treeStore.add((List)result.getUngroupedIndicators(),false);
      }
      for (      IndicatorGroup group : result.getGroups()) {
        treeStore.add(group,false);
        for (        IndicatorDTO indicator : group.getIndicators()) {
          treeStore.add(group,indicator,false);
        }
      }
      onLoaded();
    }
  }
);
}","@Override protected void doLoad(){
  service.execute(GetIndicators.forDatabase(currentDatabaseId),null,new AsyncCallback<IndicatorListResult>(){
    @Override public void onFailure(    Throwable caught){
    }
    @Override public void onSuccess(    IndicatorListResult result){
      treeStore.removeAll();
      for (      IndicatorGroup group : result.getGroups()) {
        treeStore.add(group,false);
        for (        IndicatorDTO indicator : group.getIndicators()) {
          treeStore.add(group,indicator,false);
        }
      }
      if (!result.getUngroupedIndicators().isEmpty()) {
        treeStore.add((List)result.getUngroupedIndicators(),false);
      }
      onLoaded();
    }
  }
);
}",0.801980198019802
35598,"protected void updateIndicatorProperties(Indicator indicator,Map<String,Object> changes){
  if (changes.containsKey(""String_Node_Str"")) {
    indicator.setName((String)changes.get(""String_Node_Str""));
  }
  if (changes.containsKey(""String_Node_Str"")) {
    indicator.setAggregation((Integer)changes.get(""String_Node_Str""));
  }
  if (changes.containsKey(""String_Node_Str"")) {
    indicator.setCategory((String)changes.get(""String_Node_Str""));
  }
  if (changes.containsKey(""String_Node_Str"")) {
    indicator.setCollectIntervention((Boolean)changes.get(""String_Node_Str""));
  }
  if (changes.containsKey(""String_Node_Str"")) {
    indicator.setCollectMonitoring((Boolean)changes.get(""String_Node_Str""));
  }
  if (changes.containsKey(""String_Node_Str"")) {
    indicator.setCode((String)changes.get(""String_Node_Str""));
  }
  if (changes.containsKey(""String_Node_Str"")) {
    indicator.setDescription((String)changes.get(""String_Node_Str""));
  }
  if (changes.containsKey(""String_Node_Str"")) {
    indicator.setUnits((String)changes.get(""String_Node_Str""));
  }
  if (changes.containsKey(""String_Node_Str"")) {
    indicator.setObjective((Double)changes.get(""String_Node_Str""));
  }
  if (changes.containsKey(""String_Node_Str"")) {
    indicator.setSortOrder((Integer)changes.get(""String_Node_Str""));
  }
  if (changes.containsKey(""String_Node_Str"")) {
    indicator.setLabels((List<String>)changes.get(""String_Node_Str""));
  }
  if (changes.containsKey(""String_Node_Str"")) {
    indicator.setSourceOfVerification((String)changes.get(""String_Node_Str""));
  }
  if (changes.containsKey(""String_Node_Str"")) {
    indicator.setActivity(em.getReference(Activity.class,(Integer)changes.get(""String_Node_Str"")));
  }
  if (changes.containsKey(""String_Node_Str"")) {
    indicator.setDirectDataEntryEnabled((Boolean)changes.get(""String_Node_Str""));
  }
  if (changes.containsKey(""String_Node_Str"")) {
    Set<Integer> ids=(Set<Integer>)changes.get(""String_Node_Str"");
    if (ids.isEmpty()) {
      indicator.setDataSources(Collections.<Indicator>emptySet());
    }
 else {
      List<Indicator> dataSources=em.createQuery(""String_Node_Str"").setParameter(""String_Node_Str"",ids).getResultList();
      indicator.setDataSources(new HashSet<Indicator>(dataSources));
    }
  }
  if (indicator.getActivity() != null) {
    indicator.getActivity().getDatabase().setLastSchemaUpdate(new Date());
  }
 else {
    indicator.getDatabase().setLastSchemaUpdate(new Date());
  }
}","protected void updateIndicatorProperties(Indicator indicator,Map<String,Object> changes){
  if (changes.containsKey(""String_Node_Str"")) {
    indicator.setName((String)changes.get(""String_Node_Str""));
  }
  if (changes.containsKey(""String_Node_Str"")) {
    indicator.setAggregation((Integer)changes.get(""String_Node_Str""));
  }
  if (changes.containsKey(""String_Node_Str"")) {
    indicator.setCollectIntervention((Boolean)changes.get(""String_Node_Str""));
  }
  if (changes.containsKey(""String_Node_Str"")) {
    indicator.setCollectMonitoring((Boolean)changes.get(""String_Node_Str""));
  }
  if (changes.containsKey(""String_Node_Str"")) {
    indicator.setCode((String)changes.get(""String_Node_Str""));
  }
  if (changes.containsKey(""String_Node_Str"")) {
    indicator.setDescription((String)changes.get(""String_Node_Str""));
  }
  if (changes.containsKey(""String_Node_Str"")) {
    indicator.setUnits((String)changes.get(""String_Node_Str""));
  }
  if (changes.containsKey(""String_Node_Str"")) {
    indicator.setObjective((Double)changes.get(""String_Node_Str""));
  }
  if (changes.containsKey(""String_Node_Str"")) {
    indicator.setSortOrder((Integer)changes.get(""String_Node_Str""));
  }
  if (changes.containsKey(""String_Node_Str"")) {
    indicator.setLabels((List<String>)changes.get(""String_Node_Str""));
  }
  if (changes.containsKey(""String_Node_Str"")) {
    indicator.setSourceOfVerification((String)changes.get(""String_Node_Str""));
  }
  if (changes.containsKey(""String_Node_Str"")) {
    if (changes.get(""String_Node_Str"") != null) {
      indicator.setActivity(em.getReference(Activity.class,(Integer)changes.get(""String_Node_Str"")));
    }
 else {
      indicator.setActivity(null);
    }
  }
  if (changes.containsKey(""String_Node_Str"")) {
    indicator.setDirectDataEntryEnabled((Boolean)changes.get(""String_Node_Str""));
  }
  if (changes.containsKey(""String_Node_Str"")) {
    Set<Integer> ids=(Set<Integer>)changes.get(""String_Node_Str"");
    if (ids.isEmpty()) {
      indicator.setDataSources(Collections.<Indicator>emptySet());
    }
 else {
      List<Indicator> dataSources=em.createQuery(""String_Node_Str"").setParameter(""String_Node_Str"",ids).getResultList();
      indicator.setDataSources(new HashSet<Indicator>(dataSources));
    }
  }
  if (indicator.getActivity() != null) {
    indicator.getActivity().getDatabase().setLastSchemaUpdate(new Date());
  }
 else {
    indicator.getDatabase().setLastSchemaUpdate(new Date());
  }
}",0.9538775510204082
35599,"private void applyProperties(Activity activity,PropertyMap changes){
  if (changes.containsKey(""String_Node_Str"")) {
    activity.setName((String)changes.get(""String_Node_Str""));
  }
  if (changes.containsKey(""String_Node_Str"")) {
    activity.setAssessment((Boolean)changes.get(""String_Node_Str""));
  }
  if (changes.containsKey(""String_Node_Str"")) {
    activity.setLocationType(em.getReference(LocationType.class,((LocationTypeDTO)changes.get(""String_Node_Str"")).getId()));
  }
  if (changes.containsKey(""String_Node_Str"")) {
    activity.setCategory((String)changes.get(""String_Node_Str""));
  }
  if (changes.containsKey(""String_Node_Str"")) {
    activity.setMapIcon((String)changes.get(""String_Node_Str""));
  }
  if (changes.containsKey(""String_Node_Str"")) {
    activity.setReportingFrequency((Integer)changes.get(""String_Node_Str""));
  }
  if (changes.containsKey(""String_Node_Str"")) {
    activity.setSortOrder((Integer)changes.get(""String_Node_Str""));
  }
  activity.getDatabase().setLastSchemaUpdate(new Date());
}","private void applyProperties(Activity activity,PropertyMap changes){
  if (changes.containsKey(""String_Node_Str"")) {
    activity.setName((String)changes.get(""String_Node_Str""));
  }
  if (changes.containsKey(""String_Node_Str"")) {
    activity.setAssessment((Boolean)changes.get(""String_Node_Str""));
  }
  if (changes.containsKey(""String_Node_Str"")) {
    activity.setLocationType(em.getReference(LocationType.class,((LocationTypeDTO)changes.get(""String_Node_Str"")).getId()));
  }
  if (changes.containsKey(""String_Node_Str"")) {
    activity.setCategory((String)changes.get(""String_Node_Str""));
  }
  if (changes.containsKey(""String_Node_Str"")) {
    activity.setMapIcon((String)changes.get(""String_Node_Str""));
  }
  if (changes.containsKey(""String_Node_Str"")) {
    activity.setReportingFrequency((Integer)changes.get(""String_Node_Str""));
  }
  if (changes.containsKey(""String_Node_Str"")) {
    activity.setSortOrder((Integer)changes.get(""String_Node_Str""));
  }
  if (changes.containsKey(""String_Node_Str"")) {
    activity.delete();
  }
  activity.getDatabase().setLastSchemaUpdate(new Date());
}",0.9646726330664156
35600,"@Override @Transactional public void retrievePassword(String email,String language) throws EmailException {
  final EntityManager entityManager=injector.getInstance(EntityManager.class);
  final Query query=entityManager.createQuery(""String_Node_Str"");
  query.setParameter(""String_Node_Str"",email);
  final User thisUser=(User)query.getSingleResult();
  final String password=generatePassword();
  final String hashedPassword=BCrypt.hashpw(password,BCrypt.gensalt());
  final SimpleEmail mail=new SimpleEmail();
  final Locale locale=getLocale(language);
  final ResourceBundle bundle=ResourceBundle.getBundle(""String_Node_Str"",locale);
  mail.setSubject(bundle.getString(""String_Node_Str""));
  mail.setMsg(MessageFormat.format(bundle.getString(""String_Node_Str""),password));
  mail.addTo(email,User.getUserCompleteName(thisUser));
  thisUser.setHashedPassword(hashedPassword);
  entityManager.merge(thisUser);
  final MailSender mailSender=injector.getInstance(MailSender.class);
  mailSender.send(mail);
}","@Override @Transactional public void retrievePassword(String email,String language) throws EmailException {
  final EntityManager entityManager=injector.getInstance(EntityManager.class);
  final Query query=entityManager.createQuery(""String_Node_Str"");
  query.setParameter(""String_Node_Str"",email);
  final User thisUser=(User)query.getSingleResult();
  final String password=PasswordHelper.generatePassword();
  final String hashedPassword=BCrypt.hashpw(password,BCrypt.gensalt());
  final SimpleEmail mail=new SimpleEmail();
  final Locale locale=getLocale(language);
  final ResourceBundle bundle=ResourceBundle.getBundle(""String_Node_Str"",locale);
  mail.setSubject(bundle.getString(""String_Node_Str""));
  mail.setMsg(MessageFormat.format(bundle.getString(""String_Node_Str""),password));
  mail.addTo(email,User.getUserCompleteName(thisUser));
  thisUser.setHashedPassword(hashedPassword);
  entityManager.merge(thisUser);
  final MailSender mailSender=injector.getInstance(MailSender.class);
  mailSender.send(mail);
}",0.9926144756277696
35601,"public Invitation(User newUser,User invitingUser,String hostUrl){
  this.newUser=newUser;
  this.invitingUser=invitingUser;
  this.hostUrl=hostUrl;
}","public Invitation(User newUser,User invitingUser,String hostUrl,String newUserPassword){
  this.newUser=newUser;
  this.invitingUser=invitingUser;
  this.hostUrl=hostUrl;
  this.newUserPassword=newUserPassword;
}",0.8254847645429363
35602,"@Trace @LogException public void send(Invitation model,Locale locale,boolean sendBySigmah) throws EmailException, TemplateException, IOException {
  final ResourceBundle mailMessages=getResourceBundle(locale);
  SimpleEmail mail=new SimpleEmail();
  mail.addTo(model.getNewUser().getEmail(),model.getNewUser().getName());
  MessageFormat formatter=new MessageFormat(mailMessages.getString(""String_Node_Str""),locale);
  mail.setSubject(formatter.format(null));
  final Object[] messageArguments={User.getUserCompleteName(model.getNewUser()),User.getUserCompleteName(model.getInvitingUser()),model.getInvitingUser().getEmail(),model.getHostUrl()};
  formatter=new MessageFormat(mailMessages.getString(""String_Node_Str""),locale);
  String messageSubject=formatter.format(messageArguments);
  mail.setMsg(messageSubject);
  sender.send(mail);
}","@Trace @LogException public void send(Invitation model,Locale locale,boolean sendBySigmah) throws EmailException, TemplateException, IOException {
  final ResourceBundle mailMessages=getResourceBundle(locale);
  SimpleEmail mail=new SimpleEmail();
  mail.addTo(model.getNewUser().getEmail(),model.getNewUser().getName());
  MessageFormat formatter=new MessageFormat(mailMessages.getString(""String_Node_Str""),locale);
  mail.setSubject(formatter.format(null));
  final Object[] messageArguments={User.getUserCompleteName(model.getNewUser()),User.getUserCompleteName(model.getInvitingUser()),model.getInvitingUser().getEmail(),model.getHostUrl(),model.getNewUser().getEmail(),model.getNewUserPassword()};
  formatter=new MessageFormat(mailMessages.getString(""String_Node_Str""),locale);
  String messageSubject=formatter.format(messageArguments);
  mail.setMsg(messageSubject);
  sender.send(mail);
}",0.9671848013816926
35603,"@LogException @Override public void send(Email email) throws EmailException {
  email.setHostName(properties.getProperty(HOST_NAME_KEY,DEFAULT_HOST_NAME));
  email.setSmtpPort(properties.getProperty(PORT_KEY,DEFAULT_PORT));
  email.setFrom(properties.getProperty(FROM_ADDRESS_KEY,DEFAULT_ADDRESS),properties.getProperty(FROM_NAME_KEY,DEFAULT_NAME));
  final String authUsername=properties.getProperty(FROM_AUTH_USERNAME_KEY,StringUtils.EMPTY);
  final String authPassword=properties.getProperty(FROM_AUTH_PASSWORD_KEY,StringUtils.EMPTY);
  if (!StringUtils.EMPTY.equals(authUsername) && !StringUtils.EMPTY.equals(authPassword)) {
    email.setAuthenticator(new DefaultAuthenticator(authUsername,authPassword));
  }
  email.send();
}","@LogException @Override public void send(Email email) throws EmailException {
  email.setHostName(properties.getProperty(HOST_NAME_KEY,DEFAULT_HOST_NAME));
  email.setSmtpPort(Integer.parseInt(properties.getProperty(PORT_KEY,DEFAULT_PORT)));
  email.setFrom(properties.getProperty(FROM_ADDRESS_KEY,DEFAULT_ADDRESS),properties.getProperty(FROM_NAME_KEY,DEFAULT_NAME));
  final String authUsername=properties.getProperty(FROM_AUTH_USERNAME_KEY,StringUtils.EMPTY);
  final String authPassword=properties.getProperty(FROM_AUTH_PASSWORD_KEY,StringUtils.EMPTY);
  if (!StringUtils.EMPTY.equals(authUsername) && !StringUtils.EMPTY.equals(authPassword)) {
    email.setAuthenticator(new DefaultAuthenticator(authUsername,authPassword));
  }
  email.send();
}",0.9878542510121456
35604,"@Override public Object create(User executingUser,PropertyMap properties){
  User userToPersist=null;
  User userFound=null;
  OrgUnitProfile orgUnitProfileToPersist=null;
  OrgUnitProfile orgUnitProfileFound=null;
  int id=(Integer)properties.get(""String_Node_Str"");
  String email=properties.get(""String_Node_Str"");
  String name=properties.get(""String_Node_Str"");
  String firstName=properties.get(""String_Node_Str"");
  String locale=properties.get(""String_Node_Str"");
  String password=properties.get(""String_Node_Str"");
  int orgUnitId=(Integer)properties.get(""String_Node_Str"");
  List<Integer> profilesIds=properties.get(""String_Node_Str"");
  if (email != null && name != null) {
    userFound=em.find(User.class,id);
    if (userFound != null) {
      if (userUnitDAO.doesOrgUnitProfileExist(userFound))       orgUnitProfileFound=userUnitDAO.findOrgUnitProfileByUser(userFound);
    }
    userToPersist=UserDAOImpl.createNewUser(email,name,locale);
    userToPersist.setFirstName(firstName);
    userToPersist.setOrganization(executingUser.getOrganization());
    if (password != null && !password.isEmpty()) {
      userToPersist.setHashedPassword(PasswordHelper.hashPassword(password));
      userToPersist.setChangePasswordKey(null);
      userToPersist.setDateChangePasswordKeyIssued(new Date());
    }
    if (userFound != null && userFound.getId() > 0) {
      userToPersist.setId(userFound.getId());
      userToPersist=em.merge(userToPersist);
    }
 else {
      if (!userDAO.doesUserExist(email)) {
        userDAO.persist(userToPersist);
        try {
          final StringBuilder sb=new StringBuilder();
          sb.append(this.properties.getProperty(KEY_HOST_URL,DEFAULT_HOST_URL));
          sb.append(""String_Node_Str"");
          sb.append(userToPersist.getChangePasswordKey());
          final String confirmUrl=sb.toString();
          if (log.isDebugEnabled()) {
            log.debug(""String_Node_Str"" + userToPersist.getEmail());
            log.debug(""String_Node_Str"" + confirmUrl);
          }
          final Locale userLocale=new Locale(locale);
          inviteMailer.send(new Invitation(userToPersist,executingUser,confirmUrl),userLocale,true);
        }
 catch (        Exception e) {
          log.debug(""String_Node_Str"");
          log.debug(e.getMessage());
          System.out.println(e.getStackTrace());
        }
      }
 else {
        return null;
      }
    }
    if (userToPersist.getId() > 0) {
      if (userFound != null && userFound.getId() > 0 && orgUnitProfileFound != null)       orgUnitProfileToPersist=orgUnitProfileFound;
 else       orgUnitProfileToPersist=new OrgUnitProfile();
      OrgUnit orgUnit=em.find(OrgUnit.class,orgUnitId);
      if (orgUnit != null) {
        orgUnitProfileToPersist.setOrgUnit(orgUnit);
        List<Profile> profilesToPersist=new ArrayList<Profile>();
        for (        int profileId : profilesIds) {
          Profile profile=em.find(Profile.class,profileId);
          profilesToPersist.add(profile);
        }
        orgUnitProfileToPersist.setProfiles(profilesToPersist);
        orgUnitProfileToPersist.setUser(userToPersist);
        if (userFound != null && userFound.getId() > 0 && orgUnitProfileFound != null) {
          orgUnitProfileToPersist=em.merge(orgUnitProfileToPersist);
        }
 else {
          em.persist(orgUnitProfileToPersist);
        }
        if (orgUnitProfileToPersist.getId() != 0) {
          userToPersist.setOrgUnitWithProfiles(orgUnitProfileToPersist);
        }
      }
    }
  }
  UserDTO userPersisted=null;
  if (userToPersist != null) {
    userPersisted=GetUsersWithProfilesHandler.mapUserToUserDTO(userToPersist,mapper);
    userPersisted.setIdd(userToPersist.getId());
  }
  return userPersisted;
}","@Override public Object create(User executingUser,PropertyMap properties){
  User userToPersist=null;
  User userFound=null;
  OrgUnitProfile orgUnitProfileToPersist=null;
  OrgUnitProfile orgUnitProfileFound=null;
  int id=(Integer)properties.get(""String_Node_Str"");
  String email=properties.get(""String_Node_Str"");
  String name=properties.get(""String_Node_Str"");
  String firstName=properties.get(""String_Node_Str"");
  String locale=properties.get(""String_Node_Str"");
  String password=properties.get(""String_Node_Str"");
  int orgUnitId=(Integer)properties.get(""String_Node_Str"");
  List<Integer> profilesIds=properties.get(""String_Node_Str"");
  if (email != null && name != null) {
    userFound=em.find(User.class,id);
    if (userFound != null) {
      if (userUnitDAO.doesOrgUnitProfileExist(userFound))       orgUnitProfileFound=userUnitDAO.findOrgUnitProfileByUser(userFound);
    }
    userToPersist=UserDAOImpl.createNewUser(email,name,locale);
    userToPersist.setFirstName(firstName);
    userToPersist.setOrganization(executingUser.getOrganization());
    if (password != null && !password.isEmpty()) {
      userToPersist.setHashedPassword(PasswordHelper.hashPassword(password));
      userToPersist.setChangePasswordKey(null);
      userToPersist.setDateChangePasswordKeyIssued(new Date());
    }
    if (userFound != null && userFound.getId() > 0) {
      userToPersist.setId(userFound.getId());
      userToPersist=em.merge(userToPersist);
    }
 else {
      if (!userDAO.doesUserExist(email)) {
        password=PasswordHelper.generatePassword();
        userToPersist.setHashedPassword(PasswordHelper.hashPassword(password));
        userDAO.persist(userToPersist);
        try {
          final String confirmUrl=this.properties.getProperty(KEY_HOST_URL,DEFAULT_HOST_URL);
          final Locale userLocale=new Locale(locale);
          inviteMailer.send(new Invitation(userToPersist,executingUser,confirmUrl,password),userLocale,true);
        }
 catch (        Exception e) {
          log.debug(""String_Node_Str"");
          log.debug(e.getMessage());
          System.out.println(e.getStackTrace());
        }
      }
 else {
        return null;
      }
    }
    if (userToPersist.getId() > 0) {
      if (userFound != null && userFound.getId() > 0 && orgUnitProfileFound != null)       orgUnitProfileToPersist=orgUnitProfileFound;
 else       orgUnitProfileToPersist=new OrgUnitProfile();
      OrgUnit orgUnit=em.find(OrgUnit.class,orgUnitId);
      if (orgUnit != null) {
        orgUnitProfileToPersist.setOrgUnit(orgUnit);
        List<Profile> profilesToPersist=new ArrayList<Profile>();
        for (        int profileId : profilesIds) {
          Profile profile=em.find(Profile.class,profileId);
          profilesToPersist.add(profile);
        }
        orgUnitProfileToPersist.setProfiles(profilesToPersist);
        orgUnitProfileToPersist.setUser(userToPersist);
        if (userFound != null && userFound.getId() > 0 && orgUnitProfileFound != null) {
          orgUnitProfileToPersist=em.merge(orgUnitProfileToPersist);
        }
 else {
          em.persist(orgUnitProfileToPersist);
        }
        if (orgUnitProfileToPersist.getId() != 0) {
          userToPersist.setOrgUnitWithProfiles(orgUnitProfileToPersist);
        }
      }
    }
  }
  UserDTO userPersisted=null;
  if (userToPersist != null) {
    userPersisted=GetUsersWithProfilesHandler.mapUserToUserDTO(userToPersist,mapper);
    userPersisted.setIdd(userToPersist.getId());
  }
  return userPersisted;
}",0.9269972451790632
35605,"public LayoutGroupSigmahForm(Dispatcher dispatcher,final AsyncCallback<CreateResult> callback,FlexibleElementDTO fxToUpdate,ProjectModelDTO projectModelToUpdate,OrgUnitModelDTO orgUnitModelToUpdate){
  this.dispatcher=dispatcher;
  this.projectModelToUpdate=projectModelToUpdate;
  this.orgUnitModelToUpdate=orgUnitModelToUpdate;
  UIConstants constants=GWT.create(UIConstants.class);
  if (fxToUpdate != null) {
    layoutGroupToUpdate=fxToUpdate.getGroup();
  }
  FormLayout layout=new FormLayout();
  layout.setLabelWidth(LABEL_WIDTH);
  setLayout(layout);
  nameField=new TextField<String>();
  nameField.setFieldLabel(constants.adminPrivacyGroupsName());
  nameField.setAllowBlank(false);
  if (layoutGroupToUpdate != null && layoutGroupToUpdate.getTitle() != null && !layoutGroupToUpdate.getTitle().isEmpty())   nameField.setValue(layoutGroupToUpdate.getTitle());
  add(nameField);
  final ListStore<BaseModelData> containersStore=new ListStore<BaseModelData>();
  containerList=new ComboBox<BaseModelData>();
  containerList.setEditable(false);
  containerList.setDisplayField(""String_Node_Str"");
  containerList.setValueField(""String_Node_Str"");
  containerList.setFieldLabel(I18N.CONSTANTS.adminFlexibleContainer());
  containerList.setAllowBlank(false);
  containerList.setTriggerAction(TriggerAction.ALL);
  if (projectModelToUpdate != null) {
    containersStore.add(projectModelToUpdate.getProjectDetailsDTO());
    for (    PhaseModelDTO p : projectModelToUpdate.getPhaseModelsDTO()) {
      containersStore.add(p);
    }
  }
 else   if (orgUnitModelToUpdate != null) {
    containersStore.add(orgUnitModelToUpdate.getDetails());
  }
  containerList.setStore(containersStore);
  rowField=new SimpleComboBox<Integer>();
  rowField.setEditable(false);
  rowField.setFieldLabel(constants.adminFlexibleGroupVPosition());
  if (fxToUpdate != null) {
    rowField.setSimpleValue(layoutGroupToUpdate.getRow());
  }
  if (fxToUpdate != null) {
    containerList.setValue(fxToUpdate.getContainerModel());
    if (fxToUpdate.getContainerModel() != null) {
      LayoutDTO container=new LayoutDTO();
      if (fxToUpdate.getContainerModel() instanceof ProjectDetailsDTO) {
        container=((ProjectDetailsDTO)containerList.getValue()).getLayoutDTO();
      }
 else       if (fxToUpdate.getContainerModel() instanceof PhaseModelDTO) {
        container=((PhaseModelDTO)containerList.getValue()).getLayoutDTO();
      }
 else       if (fxToUpdate.getContainerModel() instanceof OrgUnitDetailsDTO) {
        container=((OrgUnitDetailsDTO)containerList.getValue()).getLayout();
      }
      if (container != null) {
        rowField.removeAll();
        for (int i=0; i < container.getRowsCount(); i++) {
          rowField.add(i);
        }
        rowField.add(container.getRowsCount());
      }
    }
  }
  containerList.addListener(Events.Select,new Listener<BaseEvent>(){
    @Override public void handleEvent(    BaseEvent be){
      LayoutDTO container=null;
      if (containerList.getValue() != null) {
        if (containerList.getValue() instanceof ProjectDetailsDTO) {
          container=((ProjectDetailsDTO)containerList.getValue()).getLayoutDTO();
        }
 else         if (containerList.getValue() instanceof PhaseModelDTO) {
          container=((PhaseModelDTO)containerList.getValue()).getLayoutDTO();
        }
 else         if (containerList.getValue() instanceof OrgUnitDetailsDTO) {
          container=((OrgUnitDetailsDTO)containerList.getValue()).getLayout();
        }
      }
      if (container != null) {
        rowField.removeAll();
        for (int i=0; i < container.getRowsCount(); i++) {
          rowField.add(i);
        }
        rowField.add(container.getRowsCount());
      }
    }
  }
);
  add(containerList);
  add(rowField);
  final Button createButton=new Button(I18N.CONSTANTS.save());
  createButton.addListener(Events.OnClick,new Listener<ButtonEvent>(){
    @Override public void handleEvent(    ButtonEvent be){
      createLayoutGroup(callback);
    }
  }
);
  add(createButton);
}","public LayoutGroupSigmahForm(Dispatcher dispatcher,final AsyncCallback<CreateResult> callback,FlexibleElementDTO fxToUpdate,ProjectModelDTO projectModelToUpdate,OrgUnitModelDTO orgUnitModelToUpdate){
  this.dispatcher=dispatcher;
  this.projectModelToUpdate=projectModelToUpdate;
  this.orgUnitModelToUpdate=orgUnitModelToUpdate;
  UIConstants constants=GWT.create(UIConstants.class);
  if (fxToUpdate != null) {
    layoutGroupToUpdate=fxToUpdate.getGroup();
  }
  FormLayout layout=new FormLayout();
  layout.setLabelWidth(LABEL_WIDTH);
  setLayout(layout);
  nameField=new TextField<String>();
  nameField.setFieldLabel(constants.adminPrivacyGroupsName());
  nameField.setAllowBlank(false);
  if (layoutGroupToUpdate != null && layoutGroupToUpdate.getTitle() != null && !layoutGroupToUpdate.getTitle().isEmpty())   nameField.setValue(layoutGroupToUpdate.getTitle());
  add(nameField);
  final ListStore<BaseModelData> containersStore=new ListStore<BaseModelData>();
  containerList=new ComboBox<BaseModelData>();
  containerList.setEditable(false);
  containerList.setDisplayField(""String_Node_Str"");
  containerList.setValueField(""String_Node_Str"");
  containerList.setFieldLabel(I18N.CONSTANTS.adminFlexibleContainer());
  containerList.setAllowBlank(false);
  containerList.setTriggerAction(TriggerAction.ALL);
  if (projectModelToUpdate != null) {
    containersStore.add(projectModelToUpdate.getProjectDetailsDTO());
    for (    PhaseModelDTO p : projectModelToUpdate.getPhaseModelsDTO()) {
      containersStore.add(p);
    }
  }
 else   if (orgUnitModelToUpdate != null) {
    containersStore.add(orgUnitModelToUpdate.getDetails());
  }
  containerList.setStore(containersStore);
  rowField=new SimpleComboBox<Integer>();
  rowField.setEditable(false);
  rowField.setAllowBlank(false);
  rowField.setTriggerAction(TriggerAction.ALL);
  rowField.setFieldLabel(constants.adminFlexibleGroupVPosition());
  if (fxToUpdate != null) {
    containerList.setValue(fxToUpdate.getContainerModel());
    if (fxToUpdate.getContainerModel() != null) {
      LayoutDTO container=new LayoutDTO();
      if (fxToUpdate.getContainerModel() instanceof ProjectDetailsDTO) {
        container=((ProjectDetailsDTO)containerList.getValue()).getLayoutDTO();
      }
 else       if (fxToUpdate.getContainerModel() instanceof PhaseModelDTO) {
        container=((PhaseModelDTO)containerList.getValue()).getLayoutDTO();
      }
 else       if (fxToUpdate.getContainerModel() instanceof OrgUnitDetailsDTO) {
        container=((OrgUnitDetailsDTO)containerList.getValue()).getLayout();
      }
      if (container != null) {
        rowField.removeAll();
        for (int i=0; i <= container.getRowsCount(); i++) {
          rowField.add(i);
        }
        rowField.setSimpleValue(layoutGroupToUpdate.getRow());
      }
    }
  }
  containerList.addListener(Events.Select,new Listener<BaseEvent>(){
    @Override public void handleEvent(    BaseEvent be){
      LayoutDTO container=null;
      if (containerList.getValue() != null) {
        if (containerList.getValue() instanceof ProjectDetailsDTO) {
          container=((ProjectDetailsDTO)containerList.getValue()).getLayoutDTO();
        }
 else         if (containerList.getValue() instanceof PhaseModelDTO) {
          container=((PhaseModelDTO)containerList.getValue()).getLayoutDTO();
        }
 else         if (containerList.getValue() instanceof OrgUnitDetailsDTO) {
          container=((OrgUnitDetailsDTO)containerList.getValue()).getLayout();
        }
      }
      if (container != null) {
        rowField.removeAll();
        for (int i=0; i <= container.getRowsCount(); i++) {
          rowField.add(i);
        }
      }
    }
  }
);
  add(containerList);
  add(rowField);
  final Button createButton=new Button(I18N.CONSTANTS.save());
  createButton.addListener(Events.OnClick,new Listener<ButtonEvent>(){
    @Override public void handleEvent(    ButtonEvent be){
      createLayoutGroup(callback);
    }
  }
);
  add(createButton);
}",0.7776255138906192
35606,"@Inject public AdminOrgUnitModelsPresenter(Dispatcher dispatcher,UserLocalCache cache,final Authentication authentication,EventBus eventBus,final AdminPageState currentState){
  this.currentState=currentState;
  this.cache=cache;
  this.dispatcher=dispatcher;
  this.authentication=authentication;
  this.view=new AdminOrgUnitModelsView(dispatcher,cache,eventBus);
}","@Inject public AdminOrgUnitModelsPresenter(Dispatcher dispatcher,UserLocalCache cache,final Authentication authentication,EventBus eventBus,final AdminPageState currentState){
  this.currentState=currentState;
  this.dispatcher=dispatcher;
  this.view=new AdminOrgUnitModelsView(dispatcher,cache,eventBus);
}",0.8545994065281899
35607,"@Inject public AdminOrgUnitModelsView(Dispatcher dispatcher,UserLocalCache cache,EventBus eventBus){
  this.dispatcher=dispatcher;
  this.cache=cache;
  this.eventBus=eventBus;
  mainPanel=new ContentPanel(new FitLayout());
  mainPanel.setHeaderVisible(false);
  mainPanel.setBorders(false);
  mainPanel.setBodyBorder(false);
  modelsStore=new AdminModelsStore();
  grid=buildModelsListGrid();
  grid.setAutoHeight(true);
  grid.getView().setForceFit(true);
  mainPanel.setTopComponent(initToolBar());
  mainPanel.setScrollMode(Style.Scroll.AUTO);
  mainPanel.add(grid);
}","@Inject public AdminOrgUnitModelsView(Dispatcher dispatcher,UserLocalCache cache,EventBus eventBus){
  this.dispatcher=dispatcher;
  this.eventBus=eventBus;
  mainPanel=new ContentPanel(new FitLayout());
  mainPanel.setHeaderVisible(false);
  mainPanel.setBorders(false);
  mainPanel.setBodyBorder(false);
  modelsStore=new AdminModelsStore();
  grid=buildModelsListGrid();
  grid.setAutoHeight(true);
  grid.getView().setForceFit(true);
  mainPanel.setTopComponent(initToolBar());
  mainPanel.setScrollMode(Style.Scroll.AUTO);
  mainPanel.add(grid);
}",0.98220640569395
35608,"private Grid<OrgUnitModelDTO> buildModelsListGrid(){
  List<ColumnConfig> configs=new ArrayList<ColumnConfig>();
  ColumnConfig column=new ColumnConfig(""String_Node_Str"",I18N.CONSTANTS.adminOrgUnitsModelName(),200);
  column.setRenderer(new GridCellRenderer<OrgUnitModelDTO>(){
    @Override public Object render(    final OrgUnitModelDTO model,    String property,    ColumnData config,    int rowIndex,    int colIndex,    ListStore<OrgUnitModelDTO> store,    Grid<OrgUnitModelDTO> grid){
      final Anchor nameHyperlink;
      nameHyperlink=new Anchor(model.getName(),true);
      nameHyperlink.setStyleName(""String_Node_Str"");
      nameHyperlink.addClickHandler(new ClickHandler(){
        @Override public void onClick(        ClickEvent event){
          final AdminPageState derivation=new AdminPageState(AdminOrgUnitModelsView.this.currentState.getCurrentSection());
          derivation.setModel(model.getId());
          derivation.setSubModel(I18N.CONSTANTS.adminProjectModelFields());
          derivation.setIsProject(false);
          AdminOrgUnitModelsView.this.eventBus.fireEvent(new NavigationEvent(NavigationHandler.NavigationRequested,derivation));
        }
      }
);
      return nameHyperlink;
    }
  }
);
  configs.add(column);
  column=new ColumnConfig(""String_Node_Str"",I18N.CONSTANTS.adminOrgUnitsModelTitle(),200);
  configs.add(column);
  column=new ColumnConfig(""String_Node_Str"",I18N.CONSTANTS.adminOrgUnitsModelHasBudget(),75);
  configs.add(column);
  column=new ColumnConfig(""String_Node_Str"",I18N.CONSTANTS.adminOrgUnitsModelContainProjects(),75);
  configs.add(column);
  column=new ColumnConfig(""String_Node_Str"",I18N.CONSTANTS.adminProjectModelsStatus(),200);
  column.setRenderer(new GridCellRenderer<OrgUnitModelDTO>(){
    @Override public Object render(    OrgUnitModelDTO model,    String property,    ColumnData config,    int rowIndex,    int colIndex,    ListStore<OrgUnitModelDTO> store,    Grid<OrgUnitModelDTO> grid){
      return model.getStatus() != null ? ProjectModelStatus.getName(model.getStatus()) : ""String_Node_Str"";
    }
  }
);
  configs.add(column);
  column=new ColumnConfig();
  column.setWidth(75);
  column.setAlignment(Style.HorizontalAlignment.RIGHT);
  column.setRenderer(new GridCellRenderer<OrgUnitModelDTO>(){
    @Override public Object render(    final OrgUnitModelDTO model,    final String property,    ColumnData config,    int rowIndex,    int colIndex,    ListStore<OrgUnitModelDTO> store,    Grid<OrgUnitModelDTO> grid){
      Button button=new Button(I18N.CONSTANTS.delete());
      button.setItemId(UIActions.deleteModel);
      button.disable();
      button.addListener(Events.OnClick,new Listener<ButtonEvent>(){
        @Override public void handleEvent(        ButtonEvent be){
          AdminModelActionListener listener=new AdminModelActionListener(AdminOrgUnitModelsView.this,dispatcher,false);
          listener.setModelId(model.getId());
          listener.setIsOrgUnit(true);
          listener.setOrgUnit(model);
          listener.onUIAction(UIActions.deleteModel);
        }
      }
);
      if (model.getStatus().equals(ProjectModelStatus.DRAFT))       button.enable();
      return button;
    }
  }
);
  configs.add(column);
  column=new ColumnConfig();
  column.setWidth(75);
  column.setAlignment(Style.HorizontalAlignment.RIGHT);
  column.setRenderer(new GridCellRenderer<OrgUnitModelDTO>(){
    @Override public Object render(    final OrgUnitModelDTO model,    final String property,    ColumnData config,    int rowIndex,    int colIndex,    ListStore<OrgUnitModelDTO> store,    Grid<OrgUnitModelDTO> grid){
      Button buttonExport=new Button(I18N.CONSTANTS.export());
      buttonExport.setItemId(UIActions.exportModel);
      buttonExport.addListener(Events.OnClick,new Listener<ButtonEvent>(){
        @Override public void handleEvent(        ButtonEvent be){
          AdminModelActionListener listener=new AdminModelActionListener(AdminOrgUnitModelsView.this,dispatcher,false);
          listener.setModelId(model.getId());
          listener.setIsOrgUnit(true);
          listener.setIsReport(false);
          listener.onUIAction(UIActions.exportModel);
        }
      }
);
      return buttonExport;
    }
  }
);
  configs.add(column);
  column=new ColumnConfig();
  column.setWidth(60);
  column.setAlignment(Style.HorizontalAlignment.CENTER);
  column.setRenderer(new GridCellRenderer<OrgUnitModelDTO>(){
    @Override public Object render(    final OrgUnitModelDTO model,    final String property,    ColumnData config,    int rowIndex,    int colIndex,    ListStore<OrgUnitModelDTO> store,    Grid<OrgUnitModelDTO> grid){
      Button buttonCopy=new Button(I18N.CONSTANTS.adminModelCopy());
      buttonCopy.setItemId(UIActions.copyModel);
      buttonCopy.addListener(Events.OnClick,new Listener<ButtonEvent>(){
        @Override public void handleEvent(        ButtonEvent be){
          AdminModelActionListener listener=new AdminModelActionListener(AdminOrgUnitModelsView.this,dispatcher,false);
          listener.setModelId(model.getId());
          listener.setIsOrgUnit(true);
          listener.setOrgUnit(model);
          listener.onUIAction(UIActions.copyModel);
        }
      }
);
      return buttonCopy;
    }
  }
);
  configs.add(column);
  ColumnModel cm=new ColumnModel(configs);
  Grid<OrgUnitModelDTO> grid=new Grid<OrgUnitModelDTO>(modelsStore,cm);
  return grid;
}","private Grid<OrgUnitModelDTO> buildModelsListGrid(){
  List<ColumnConfig> configs=new ArrayList<ColumnConfig>();
  ColumnConfig column=new ColumnConfig(""String_Node_Str"",I18N.CONSTANTS.adminOrgUnitsModelName(),200);
  column.setRenderer(new GridCellRenderer<OrgUnitModelDTO>(){
    @Override public Object render(    final OrgUnitModelDTO model,    String property,    ColumnData config,    int rowIndex,    int colIndex,    ListStore<OrgUnitModelDTO> store,    Grid<OrgUnitModelDTO> grid){
      final Anchor nameHyperlink;
      nameHyperlink=new Anchor(model.getName(),true);
      nameHyperlink.setStyleName(""String_Node_Str"");
      nameHyperlink.addClickHandler(new ClickHandler(){
        @Override public void onClick(        ClickEvent event){
          final AdminPageState derivation=new AdminPageState(AdminOrgUnitModelsView.this.currentState.getCurrentSection());
          derivation.setModel(model.getId());
          derivation.setSubModel(I18N.CONSTANTS.adminProjectModelFields());
          derivation.setIsProject(false);
          AdminOrgUnitModelsView.this.eventBus.fireEvent(new NavigationEvent(NavigationHandler.NavigationRequested,derivation));
        }
      }
);
      return nameHyperlink;
    }
  }
);
  configs.add(column);
  column=new ColumnConfig(""String_Node_Str"",I18N.CONSTANTS.adminOrgUnitsModelTitle(),200);
  configs.add(column);
  column=new ColumnConfig(""String_Node_Str"",I18N.CONSTANTS.adminOrgUnitsModelHasBudget(),75);
  configs.add(column);
  column=new ColumnConfig(""String_Node_Str"",I18N.CONSTANTS.adminOrgUnitsModelContainProjects(),75);
  configs.add(column);
  column=new ColumnConfig(""String_Node_Str"",I18N.CONSTANTS.adminProjectModelsStatus(),200);
  column.setRenderer(new GridCellRenderer<OrgUnitModelDTO>(){
    @Override public Object render(    OrgUnitModelDTO model,    String property,    ColumnData config,    int rowIndex,    int colIndex,    ListStore<OrgUnitModelDTO> store,    Grid<OrgUnitModelDTO> grid){
      return model.getStatus() != null ? ProjectModelStatus.getName(model.getStatus()) : ""String_Node_Str"";
    }
  }
);
  configs.add(column);
  column=new ColumnConfig();
  column.setWidth(75);
  column.setAlignment(Style.HorizontalAlignment.RIGHT);
  column.setRenderer(new GridCellRenderer<OrgUnitModelDTO>(){
    @Override public Object render(    final OrgUnitModelDTO model,    final String property,    ColumnData config,    int rowIndex,    int colIndex,    ListStore<OrgUnitModelDTO> store,    Grid<OrgUnitModelDTO> grid){
      Button button=new Button(I18N.CONSTANTS.delete());
      button.setItemId(UIActions.deleteModel);
      button.disable();
      button.addListener(Events.OnClick,new Listener<ButtonEvent>(){
        @Override public void handleEvent(        ButtonEvent be){
          AdminModelActionListener listener=new AdminModelActionListener(AdminOrgUnitModelsView.this,dispatcher,false);
          listener.setModelId(model.getId());
          listener.setIsOrgUnit(true);
          listener.setOrgUnit(model);
          listener.onUIAction(UIActions.deleteModel);
        }
      }
);
      if (!model.isTopOrgUnitModel() && model.getStatus().equals(ProjectModelStatus.DRAFT))       button.enable();
      return button;
    }
  }
);
  configs.add(column);
  column=new ColumnConfig();
  column.setWidth(75);
  column.setAlignment(Style.HorizontalAlignment.RIGHT);
  column.setRenderer(new GridCellRenderer<OrgUnitModelDTO>(){
    @Override public Object render(    final OrgUnitModelDTO model,    final String property,    ColumnData config,    int rowIndex,    int colIndex,    ListStore<OrgUnitModelDTO> store,    Grid<OrgUnitModelDTO> grid){
      Button buttonExport=new Button(I18N.CONSTANTS.export());
      buttonExport.setItemId(UIActions.exportModel);
      buttonExport.addListener(Events.OnClick,new Listener<ButtonEvent>(){
        @Override public void handleEvent(        ButtonEvent be){
          AdminModelActionListener listener=new AdminModelActionListener(AdminOrgUnitModelsView.this,dispatcher,false);
          listener.setModelId(model.getId());
          listener.setIsOrgUnit(true);
          listener.setIsReport(false);
          listener.onUIAction(UIActions.exportModel);
        }
      }
);
      return buttonExport;
    }
  }
);
  configs.add(column);
  column=new ColumnConfig();
  column.setWidth(60);
  column.setAlignment(Style.HorizontalAlignment.CENTER);
  column.setRenderer(new GridCellRenderer<OrgUnitModelDTO>(){
    @Override public Object render(    final OrgUnitModelDTO model,    final String property,    ColumnData config,    int rowIndex,    int colIndex,    ListStore<OrgUnitModelDTO> store,    Grid<OrgUnitModelDTO> grid){
      Button buttonCopy=new Button(I18N.CONSTANTS.adminModelCopy());
      buttonCopy.setItemId(UIActions.copyModel);
      buttonCopy.addListener(Events.OnClick,new Listener<ButtonEvent>(){
        @Override public void handleEvent(        ButtonEvent be){
          AdminModelActionListener listener=new AdminModelActionListener(AdminOrgUnitModelsView.this,dispatcher,false);
          listener.setModelId(model.getId());
          listener.setIsOrgUnit(true);
          listener.setOrgUnit(model);
          listener.onUIAction(UIActions.copyModel);
        }
      }
);
      return buttonCopy;
    }
  }
);
  configs.add(column);
  ColumnModel cm=new ColumnModel(configs);
  Grid<OrgUnitModelDTO> grid=new Grid<OrgUnitModelDTO>(modelsStore,cm);
  return grid;
}",0.9972360420121614
35609,"private ArrayList<OrgUnitModelDTO> queryModels(Query query){
  final ArrayList<OrgUnitModelDTO> orgUnitModelDTOList=new ArrayList<OrgUnitModelDTO>();
  @SuppressWarnings(""String_Node_Str"") final List<OrgUnitModel> models=(List<OrgUnitModel>)query.getResultList();
  if (models != null) {
    for (    final OrgUnitModel model : models) {
      orgUnitModelDTOList.add(mapper.map(model,OrgUnitModelDTO.class));
    }
  }
  return orgUnitModelDTOList;
}","private ArrayList<OrgUnitModelDTO> queryModels(Query query,int topModelId){
  final ArrayList<OrgUnitModelDTO> orgUnitModelDTOList=new ArrayList<OrgUnitModelDTO>();
  @SuppressWarnings(""String_Node_Str"") final List<OrgUnitModel> models=(List<OrgUnitModel>)query.getResultList();
  if (models != null) {
    for (    final OrgUnitModel model : models) {
      final OrgUnitModelDTO dto=mapper.map(model,OrgUnitModelDTO.class);
      dto.setTopOrgUnitModel(model.getId() == topModelId);
      orgUnitModelDTOList.add(dto);
    }
  }
  return orgUnitModelDTOList;
}",0.84106614017769
35610,"@Override public CommandResult execute(GetOrgUnitModels cmd,User user) throws CommandException {
  final ArrayList<OrgUnitModelDTO> orgUnitModelDTOList;
  final ProjectModelStatus[] status=cmd.getStatus();
  Query query;
  if (status == null) {
    query=em.createQuery(""String_Node_Str"");
    query.setParameter(""String_Node_Str"",user.getOrganization().getId());
    orgUnitModelDTOList=queryModels(query);
  }
 else {
    orgUnitModelDTOList=new ArrayList<OrgUnitModelDTO>();
    for (    final ProjectModelStatus s : status) {
      query=em.createQuery(""String_Node_Str"");
      query.setParameter(""String_Node_Str"",user.getOrganization().getId());
      query.setParameter(""String_Node_Str"",s);
      orgUnitModelDTOList.addAll(queryModels(query));
    }
  }
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + orgUnitModelDTOList.size() + ""String_Node_Str"");
  }
  return new OrgUnitModelListResult(orgUnitModelDTOList);
}","@Override public CommandResult execute(GetOrgUnitModels cmd,User user) throws CommandException {
  final ArrayList<OrgUnitModelDTO> orgUnitModelDTOList;
  final ProjectModelStatus[] status=cmd.getStatus();
  final int topModelId=user.getOrganization().getRoot().getOrgUnitModel().getId();
  Query query;
  if (status == null) {
    query=em.createQuery(""String_Node_Str"");
    query.setParameter(""String_Node_Str"",user.getOrganization().getId());
    orgUnitModelDTOList=queryModels(query,topModelId);
  }
 else {
    orgUnitModelDTOList=new ArrayList<OrgUnitModelDTO>();
    for (    final ProjectModelStatus s : status) {
      query=em.createQuery(""String_Node_Str"");
      query.setParameter(""String_Node_Str"",user.getOrganization().getId());
      query.setParameter(""String_Node_Str"",s);
      orgUnitModelDTOList.addAll(queryModels(query,topModelId));
    }
  }
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + orgUnitModelDTOList.size() + ""String_Node_Str"");
  }
  return new OrgUnitModelListResult(orgUnitModelDTOList);
}",0.947103274559194
35611,"@Override public CommandResult execute(GetProjectModels cmd,User user) throws CommandException {
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + cmd.getModelType() + ""String_Node_Str"");
  }
  final ArrayList<ProjectModelDTOLight> projectModelDTOList=new ArrayList<ProjectModelDTOLight>();
  final Query query=em.createQuery(""String_Node_Str"");
  @SuppressWarnings(""String_Node_Str"") final List<ProjectModel> models=(List<ProjectModel>)query.getResultList();
  if (models != null) {
    for (    final ProjectModel model : models) {
      final ProjectModelType type=model.getVisibility(user.getOrganization());
      if (type != null && cmd.getProjectModelStatus() != null) {
        if (model.getStatus() != null && cmd.getProjectModelStatus().equals(model.getStatus())) {
          projectModelDTOList.add(mapper.map(model,ProjectModelDTOLight.class));
        }
      }
 else       if (cmd.getProjectModelStatus() == null && cmd.getAllProjectModelStatus()) {
        if (type != null) {
          projectModelDTOList.add(mapper.map(model,ProjectModelDTOLight.class));
        }
      }
 else {
        if (type != null) {
          if ((cmd.getModelType() == null || type == cmd.getModelType()) && !ProjectModelStatus.DRAFT.equals(model.getStatus())) {
            projectModelDTOList.add(mapper.map(model,ProjectModelDTOLight.class));
          }
        }
      }
    }
  }
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + projectModelDTOList.size() + ""String_Node_Str"");
  }
  if (models != null && cmd.getFullVersion() == true) {
    final ArrayList<ProjectModelDTO> projectFullModelDTOList=new ArrayList<ProjectModelDTO>();
    for (    final ProjectModel model : models) {
      projectFullModelDTOList.add(mapper.map(model,ProjectModelDTO.class));
    }
    return new ProjectModelListResult(projectModelDTOList,projectFullModelDTOList);
  }
  return new ProjectModelListResult(projectModelDTOList);
}","@Override public CommandResult execute(GetProjectModels cmd,User user) throws CommandException {
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + cmd.getModelType() + ""String_Node_Str"");
  }
  final ArrayList<ProjectModelDTOLight> projectModelDTOList=new ArrayList<ProjectModelDTOLight>();
  final Query query=em.createQuery(""String_Node_Str"");
  @SuppressWarnings(""String_Node_Str"") final List<ProjectModel> models=(List<ProjectModel>)query.getResultList();
  if (models != null) {
    for (    final ProjectModel model : models) {
      final ProjectModelType type=model.getVisibility(user.getOrganization());
      if (type != null && cmd.getProjectModelStatus() != null) {
        if (model.getStatus() != null && cmd.getProjectModelStatus().equals(model.getStatus())) {
          projectModelDTOList.add(mapper.map(model,ProjectModelDTOLight.class));
        }
      }
 else       if (cmd.getProjectModelStatus() == null && cmd.getAllProjectModelStatus()) {
        if (type != null) {
          projectModelDTOList.add(mapper.map(model,ProjectModelDTOLight.class));
        }
      }
 else {
        if (type != null) {
          if ((cmd.getModelType() == null || type == cmd.getModelType()) && !ProjectModelStatus.DRAFT.equals(model.getStatus()) && !ProjectModelStatus.UNAVAILABLE.equals(model.getStatus())) {
            projectModelDTOList.add(mapper.map(model,ProjectModelDTOLight.class));
          }
        }
      }
    }
  }
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + projectModelDTOList.size() + ""String_Node_Str"");
  }
  if (models != null && cmd.getFullVersion() == true) {
    final ArrayList<ProjectModelDTO> projectFullModelDTOList=new ArrayList<ProjectModelDTO>();
    for (    final ProjectModel model : models) {
      projectFullModelDTOList.add(mapper.map(model,ProjectModelDTO.class));
    }
    return new ProjectModelListResult(projectModelDTOList,projectFullModelDTOList);
  }
  return new ProjectModelListResult(projectModelDTOList);
}",0.9845373891001268
35612,"@Override public int getId(){
  return (Integer)get(""String_Node_Str"");
}","@Override public int getId(){
  return (Integer)(get(""String_Node_Str"") != null ? get(""String_Node_Str"") : -1);
}",0.7849462365591398
35613,"public ElementForm(Dispatcher dispatcher,final AsyncCallback<UpdateModelResult> callback,final FlexibleElementDTO flexibleElement,ProjectModelDTO projectModelToUpdate,OrgUnitModelDTO orgUnitModelToUpdate){
  final VBoxLayout mainPanelLayout=new VBoxLayout();
  mainPanelLayout.setVBoxLayoutAlign(VBoxLayout.VBoxLayoutAlign.STRETCH);
  setLayout(mainPanelLayout);
  setHeaderVisible(false);
  if (projectModelToUpdate != null) {
    isProject=true;
  }
 else {
    isProject=false;
  }
  this.dispatcher=dispatcher;
  this.projectModelToUpdate=projectModelToUpdate;
  this.orgUnitModelToUpdate=orgUnitModelToUpdate;
  this.flexibleElementToUpdate=flexibleElement;
  UIConstants constants=GWT.create(UIConstants.class);
  specificsPanel=new FormPanel();
  specificsPanel.setHeaderVisible(false);
  specificsPanel.setBorders(true);
  specificsPanel.hide();
  reportModelList=new ComboBox<ReportModelDTO>();
  reportModelList.setEditable(false);
  reportModelList.hide();
  reportModelList.setFieldLabel(I18N.CONSTANTS.adminReportName());
  reportModelList.setDisplayField(""String_Node_Str"");
  reportModelList.setValueField(""String_Node_Str"");
  reportModelList.setTriggerAction(TriggerAction.ALL);
  reportModelsStore=new ListStore<ReportModelDTO>();
  dispatcher.execute(new GetReportModels(),null,new AsyncCallback<ReportModelsListResult>(){
    @Override public void onFailure(    Throwable arg0){
      reportModelList.setEmptyText(I18N.CONSTANTS.adminChoiceProblem());
    }
    @Override public void onSuccess(    ReportModelsListResult result){
      reportModelList.setEmptyText(I18N.CONSTANTS.adminReportName());
      reportModelsStore.removeAll();
      if (result != null) {
        reportModelsStore.add(result.getList());
        reportModelsStore.commitChanges();
      }
      if (flexibleElement != null) {
        if (flexibleElement instanceof ReportElementDTO) {
          if (((ReportElementDTO)flexibleElement).getModelId() != null) {
            for (            ReportModelDTO reportModel : reportModelsStore.getModels()) {
              if (reportModel.getId() == ((ReportElementDTO)flexibleElement).getModelId()) {
                reportModelList.setValue(reportModel);
              }
            }
          }
        }
      }
    }
  }
);
  reportModelList.setStore(reportModelsStore);
  maxLimitField=new NumberField();
  maxLimitField.setFieldLabel(I18N.CONSTANTS.adminFlexibleMaxLimit());
  maxLimitField.hide();
  textAreaTypeList=new SimpleComboBox<String>();
  textAreaTypeList.setTriggerAction(TriggerAction.ALL);
  textAreaTypeList.setEditable(false);
  textAreaTypeList.hide();
  textAreaTypeList.setFieldLabel(I18N.CONSTANTS.adminFlexibleTextType());
  List<String> textTypes=new ArrayList<String>();
  textTypes.add(I18N.CONSTANTS.adminFlexibleTextTypeP());
  textTypes.add(I18N.CONSTANTS.adminFlexibleTextTypeT());
  textTypes.add(I18N.CONSTANTS.adminFlexibleTextTypeN());
  textTypes.add(I18N.CONSTANTS.adminFlexibleTextTypeD());
  textAreaTypeList.add(textTypes);
  minLimitField=new NumberField();
  minLimitField.setFieldLabel(I18N.CONSTANTS.adminFlexibleMinLimit());
  minLimitField.hide();
  lengthField=new NumberField();
  lengthField.setFieldLabel(I18N.CONSTANTS.adminFlexibleLength());
  lengthField.hide();
  isDecimal=new CheckBox();
  isDecimal.hide();
  isDecimal.setBoxLabel(""String_Node_Str"");
  isDecimal.setFieldLabel(I18N.CONSTANTS.adminFlexibleDecimal());
  isDecimal.setLabelSeparator(""String_Node_Str"");
  isMultipleQ=new CheckBox();
  isMultipleQ.hide();
  isMultipleQ.setBoxLabel(""String_Node_Str"");
  isMultipleQ.setFieldLabel(I18N.CONSTANTS.adminFlexibleMultipleQ());
  isMultipleQ.setLabelSeparator(""String_Node_Str"");
  isLinkedToQuality=new CheckBox();
  isLinkedToQuality.hide();
  isLinkedToQuality.setBoxLabel(""String_Node_Str"");
  isLinkedToQuality.setFieldLabel(I18N.CONSTANTS.adminFlexibleLinkedToQuality());
  isLinkedToQuality.setLabelSeparator(""String_Node_Str"");
  defaultNoCategory.setLabel(I18N.CONSTANTS.adminFlexibleNoLinkedCategory());
  defaultNoCategory.setId(-1);
  linkedCategory=new ComboBox<CategoryTypeDTO>();
  linkedCategory.setEditable(false);
  linkedCategory.hide();
  linkedCategory.setDisplayField(I18N.CONSTANTS.adminFlexibleNoLinkedCategory());
  linkedCategory.setFieldLabel(I18N.CONSTANTS.adminFlexibleLinkedCategory());
  linkedCategory.setDisplayField(""String_Node_Str"");
  linkedCategory.setValueField(""String_Node_Str"");
  linkedCategory.setTriggerAction(TriggerAction.ALL);
  final ListStore<CategoryTypeDTO> linkedCategoriesStore=new ListStore<CategoryTypeDTO>();
  linkedCategoriesStore.add(defaultNoCategory);
  dispatcher.execute(new GetCategories(),null,new AsyncCallback<CategoriesListResult>(){
    @Override public void onFailure(    Throwable arg0){
      linkedCategory.setEmptyText(I18N.CONSTANTS.adminChoiceProblem());
    }
    @Override public void onSuccess(    CategoriesListResult result){
      linkedCategory.setEmptyText(I18N.CONSTANTS.adminUserCreationProfileChoice());
      linkedCategoriesStore.removeAll();
      linkedCategoriesStore.add(defaultNoCategory);
      if (result != null) {
        linkedCategoriesStore.add(result.getList());
        linkedCategoriesStore.commitChanges();
      }
    }
  }
);
  linkedCategory.setStore(linkedCategoriesStore);
  for (int i=0; i < MAX_TENTATIVES_FOR_CHOICES; i++) {
    final ClickableLabel label=new ClickableLabel();
    label.addClickHandler(new ClickHandler(){
      @Override public void onClick(      ClickEvent arg0){
        label.hide();
        selectedChoicesLabels.remove(label.getText());
        if (selectedChoicesLabels.size() == 0) {
          linkedCategory.setEnabled(true);
        }
      }
    }
);
    label.hide();
    selectableChoices.put(i,label);
  }
  questionChoice=new TextField<String>();
  questionChoice.hide();
  qChoicesAddGrid.setVisible(false);
  qChoicesAddGrid.getCellFormatter().setWidth(0,0,(LABEL_WIDTH) + ""String_Node_Str"");
  qChoicesAddGrid.setCellPadding(0);
  qChoicesAddGrid.setCellSpacing(0);
  qChoicesAddGrid.setWidget(0,0,new LabelField(I18N.CONSTANTS.adminFlexibleQChoices() + ""String_Node_Str""));
  qChoicesAddGrid.setWidget(0,1,questionChoice);
  questionChoice.setHideLabel(false);
  addChoiceButton.hide();
  addChoiceButton.addListener(Events.OnClick,new Listener<ButtonEvent>(){
    @Override public void handleEvent(    ButtonEvent be){
      if (questionChoice.getValue() != null) {
        if (!selectedChoicesLabels.contains(questionChoice.getValue())) {
          if (num < MAX_TENTATIVES_FOR_CHOICES) {
            linkedCategory.setEnabled(false);
            selectableChoices.get(num).setText(questionChoice.getValue());
            selectableChoices.get(num).show();
            num++;
            selectedChoicesLabels.add(questionChoice.getValue());
          }
 else {
            MessageBox.alert(I18N.CONSTANTS.adminMaxAttempts(),I18N.CONSTANTS.adminMaxAttemptsQChoices(),null);
            ElementForm.this.removeFromParent();
          }
        }
      }
    }
  }
);
  qChoicesAddGrid.setWidget(0,2,addChoiceButton);
  linkedCategory.addListener(Events.Select,new Listener<BaseEvent>(){
    @Override public void handleEvent(    BaseEvent be){
      if (linkedCategory.getValue() == null || defaultNoCategory.equals(linkedCategory.getValue())) {
        questionChoice.setEnabled(true);
        addChoiceButton.setEnabled(true);
      }
 else {
        questionChoice.setEnabled(false);
        addChoiceButton.setEnabled(false);
        for (        ClickableLabel selected : selectableChoices.values()) {
          selected.setEnabled(false);
        }
      }
    }
  }
);
  posBanner=new SimpleComboBox<Integer>();
  posBanner.setTriggerAction(TriggerAction.ALL);
  posBanner.setEditable(false);
  posBanner.setFieldLabel(constants.adminFlexibleBannerPosition());
  posBanner.removeAll();
  for (int i=1; i < 7; i++) {
    posBanner.add(i);
  }
  posBanner.setAllowBlank(true);
  posBanner.setEnabled(false);
  posBanner.hide();
  isBanner=new CheckBox();
  isBanner.setFieldLabel(constants.Admin_BANNER());
  isBanner.setBoxLabel(""String_Node_Str"");
  isBanner.setValue(false);
  isBanner.addListener(Events.Change,new Listener<BaseEvent>(){
    @Override public void handleEvent(    BaseEvent be){
      if (isBanner.getValue()) {
        posBanner.removeAll();
        for (int i=1; i < 7; i++) {
          posBanner.add(i);
        }
        posBanner.setEnabled(true);
        posBanner.setAllowBlank(false);
      }
 else {
        posBanner.removeAll();
        posBanner.setValue(null);
        posBanner.setAllowBlank(true);
        posBanner.setEnabled(false);
      }
    }
  }
);
  isBanner.hide();
  specificsPanel.add(isBanner);
  specificsPanel.add(posBanner);
  specificsPanel.add(reportModelList);
  specificsPanel.add(textAreaTypeList);
  specificsPanel.add(lengthField);
  specificsPanel.add(isDecimal);
  specificsPanel.add(minLimitField);
  specificsPanel.add(maxLimitField);
  specificsPanel.add(isMultipleQ);
  specificsPanel.add(isLinkedToQuality);
  specificsPanel.add(linkedCategory);
  specificsPanel.add(qChoicesAddGrid);
  for (  ClickableLabel selected : selectableChoices.values()) {
    selected.hide();
    specificsPanel.add(selected);
  }
  commonPanel=new FormPanel();
  commonPanel.setHeaderVisible(false);
  htmlArea=new HtmlEditor();
  htmlArea.hide();
  htmlArea.setEnableAlignments(false);
  htmlArea.setEnableLinks(false);
  htmlArea.setEnableFont(false);
  htmlArea.setEnableLists(false);
  htmlArea.setEnableColors(false);
  htmlArea.setSourceEditMode(false);
  htmlArea.setHeight(75);
  htmlArea.setFieldLabel(constants.adminFlexibleName());
  if (flexibleElement != null && flexibleElement.getLabel() != null) {
    htmlArea.setValue(flexibleElement.getLabel());
    oldFieldProperties.put(AdminUtil.PROP_FX_NAME,flexibleElement.getLabel());
  }
  LabelField label=new LabelField();
  label.hide();
  label.setFieldLabel(constants.adminFlexibleName());
  if (flexibleElement != null && flexibleElement.getElementType() != null) {
    if (ElementTypeEnum.DEFAULT.equals(flexibleElement.getElementType())) {
      label.setText(DefaultFlexibleElementType.getName(((DefaultFlexibleElementDTO)flexibleElement).getType()));
      label.show();
      oldFieldProperties.put(AdminUtil.PROP_FX_NAME,DefaultFlexibleElementType.getName(((DefaultFlexibleElementDTO)flexibleElement).getType()));
      htmlArea.setValue(DefaultFlexibleElementType.getName(((DefaultFlexibleElementDTO)flexibleElement).getType()));
    }
 else {
      htmlArea.show();
    }
  }
 else {
    htmlArea.show();
  }
  commonPanel.add(label);
  commonPanel.add(htmlArea);
  typeList=new SimpleComboBox<String>();
  typeList.setEditable(false);
  typeList.addListener(Events.Select,new Listener<BaseEvent>(){
    @Override public void handleEvent(    BaseEvent be){
      hideAllSpecificAttributes();
      showSpecificAttributes(typeList.getSimpleValue(),flexibleElementToUpdate,true);
    }
  }
);
  typeList.setFieldLabel(constants.adminFlexibleType());
  typeList.setAllowBlank(false);
  typeList.setTriggerAction(TriggerAction.ALL);
  List<String> values=new ArrayList<String>();
  for (  ElementTypeEnum e : ElementTypeEnum.values()) {
    if (!ElementTypeEnum.DEFAULT.equals(e) && !ElementTypeEnum.INDICATORS.equals(e))     values.add(ElementTypeEnum.getName(e));
  }
  typeList.add(values);
  if (flexibleElement != null && flexibleElement.getElementType() != null) {
    String typeOfElement=ElementTypeEnum.getName(flexibleElement.getElementType());
    typeList.setSimpleValue(typeOfElement);
    showSpecificAttributes(typeOfElement,flexibleElement,false);
    oldFieldProperties.put(AdminUtil.PROP_FX_TYPE,flexibleElement.getElementType());
    if (ElementTypeEnum.DEFAULT.equals(flexibleElement.getElementType())) {
      typeList.setEnabled(false);
    }
  }
 else   typeList.setEmptyText(I18N.CONSTANTS.adminFlexibleType());
  commonPanel.add(typeList);
  final ListStore<BaseModelData> containersStore=new ListStore<BaseModelData>();
  containerList=new ComboBox<BaseModelData>();
  containerList.setEditable(false);
  containerList.setDisplayField(""String_Node_Str"");
  containerList.setValueField(""String_Node_Str"");
  containerList.setFieldLabel(I18N.CONSTANTS.adminFlexibleContainer());
  containerList.setAllowBlank(false);
  containerList.setTriggerAction(TriggerAction.ALL);
  if (flexibleElement == null)   containerList.setEmptyText(I18N.CONSTANTS.adminFlexibleContainerChoice());
  final ListStore<LayoutGroupDTO> groupsStore=new ListStore<LayoutGroupDTO>();
  groupList=new ComboBox<LayoutGroupDTO>();
  groupList.setEditable(false);
  groupList.setFieldLabel(constants.adminFlexibleGroup());
  groupList.setDisplayField(""String_Node_Str"");
  groupList.setValueField(""String_Node_Str"");
  groupList.setTriggerAction(TriggerAction.ALL);
  containerList.addListener(Events.Select,new Listener<BaseEvent>(){
    @Override public void handleEvent(    BaseEvent be){
      LayoutDTO container=null;
      if (containerList.getValue() != null) {
        if (containerList.getValue() instanceof ProjectBannerDTO) {
          container=((ProjectBannerDTO)containerList.getValue()).getLayoutDTO();
          isBanner.setValue(true);
          posBanner.setAllowBlank(false);
          posBanner.setEnabled(true);
        }
 else         if (containerList.getValue() instanceof ProjectDetailsDTO) {
          container=((ProjectDetailsDTO)containerList.getValue()).getLayoutDTO();
        }
 else         if (containerList.getValue() instanceof PhaseModelDTO) {
          container=((PhaseModelDTO)containerList.getValue()).getLayoutDTO();
        }
 else         if (containerList.getValue() instanceof OrgUnitDetailsDTO) {
          container=((OrgUnitDetailsDTO)containerList.getValue()).getLayout();
        }
      }
      if (container != null) {
        groupsStore.removeAll();
        for (        LayoutGroupDTO lg : container.getLayoutGroupsDTO()) {
          groupsStore.add(lg);
        }
        groupList.setValue(groupsStore.getAt(0));
      }
    }
  }
);
  orderField=new NumberField();
  orderField.setAllowBlank(false);
  orderField.setFieldLabel(constants.adminFlexibleOrder());
  orderField.clear();
  oldFieldProperties.put(AdminUtil.PROP_FX_IN_BANNER,false);
  oldFieldProperties.put(AdminUtil.PROP_FX_POS_IN_BANNER,-1);
  if (isProject) {
    if (flexibleElement != null) {
      BaseModelData container=flexibleElement.getContainerModel();
      containerList.setValue(flexibleElement.getContainerModel());
      groupList.setValue(flexibleElement.getConstraint().getParentLayoutGroupDTO());
      orderField.setValue(flexibleElement.getConstraint().getSortOrder());
      groupsStore.removeAll();
      if (container instanceof PhaseModelDTO) {
        for (        LayoutGroupDTO groupChoice : ((PhaseModelDTO)container).getLayoutDTO().getLayoutGroupsDTO()) {
          groupsStore.add(groupChoice);
        }
      }
 else {
        for (        LayoutGroupDTO groupChoice : ((ProjectDetailsDTO)container).getLayoutDTO().getLayoutGroupsDTO()) {
          groupsStore.add(groupChoice);
        }
      }
      if (flexibleElement.getBannerConstraint() != null) {
        posBanner.setSimpleValue(flexibleElement.getBannerConstraint().getSortOrder());
        isBanner.setValue(true);
        oldFieldProperties.put(AdminUtil.PROP_FX_IN_BANNER,true);
        oldFieldProperties.put(AdminUtil.PROP_FX_POS_IN_BANNER,flexibleElement.getBannerConstraint().getSortOrder());
        oldFieldProperties.put(AdminUtil.PROP_FX_LC_BANNER,flexibleElement.getBannerConstraint());
      }
      oldFieldProperties.put(AdminUtil.PROP_FX_ORDER_IN_GROUP,new Integer(flexibleElement.getConstraint().getSortOrder()));
      oldFieldProperties.put(AdminUtil.PROP_FX_GROUP,flexibleElement.getConstraint().getParentLayoutGroupDTO());
      oldFieldProperties.put(AdminUtil.PROP_FX_LC,flexibleElement.getConstraint());
    }
    containersStore.add(projectModelToUpdate.getProjectDetailsDTO());
    for (    PhaseModelDTO p : projectModelToUpdate.getPhaseModelsDTO()) {
      containersStore.add(p);
    }
  }
 else {
    if (flexibleElement != null) {
      BaseModelData container=flexibleElement.getContainerModel();
      containerList.setValue(flexibleElement.getContainerModel());
      groupList.setValue(flexibleElement.getConstraint().getParentLayoutGroupDTO());
      orderField.setValue(flexibleElement.getConstraint().getSortOrder());
      groupsStore.removeAll();
      for (      LayoutGroupDTO groupChoice : ((OrgUnitDetailsDTO)container).getLayout().getLayoutGroupsDTO()) {
        groupsStore.add(groupChoice);
      }
      if (flexibleElement.getBannerConstraint() != null) {
        posBanner.setSimpleValue(flexibleElement.getBannerConstraint().getSortOrder());
        isBanner.setValue(true);
        oldFieldProperties.put(AdminUtil.PROP_FX_IN_BANNER,true);
        oldFieldProperties.put(AdminUtil.PROP_FX_POS_IN_BANNER,flexibleElement.getBannerConstraint().getSortOrder());
        oldFieldProperties.put(AdminUtil.PROP_FX_LC_BANNER,flexibleElement.getBannerConstraint());
      }
      oldFieldProperties.put(AdminUtil.PROP_FX_ORDER_IN_GROUP,new Integer(flexibleElement.getConstraint().getSortOrder()));
      oldFieldProperties.put(AdminUtil.PROP_FX_GROUP,flexibleElement.getConstraint().getParentLayoutGroupDTO());
      oldFieldProperties.put(AdminUtil.PROP_FX_LC,flexibleElement.getConstraint());
    }
    containersStore.add(orgUnitModelToUpdate.getDetails());
  }
  containerList.setStore(containersStore);
  commonPanel.add(containerList);
  groupList.setStore(groupsStore);
  commonPanel.add(groupList);
  commonPanel.add(orderField);
  validates=new CheckBox();
  validates.setFieldLabel(constants.adminFlexibleCompulsory());
  validates.setBoxLabel(""String_Node_Str"");
  validates.setValue(false);
  if (flexibleElement != null) {
    validates.setValue(flexibleElement.getValidates());
    oldFieldProperties.put(AdminUtil.PROP_FX_IS_COMPULSARY,flexibleElement.getValidates());
  }
  commonPanel.add(validates);
  privacyGroupsListCombo=new ComboBox<PrivacyGroupDTO>();
  privacyGroupsListCombo.setEditable(false);
  privacyGroupsListCombo.setFieldLabel(constants.adminPrivacyGroups());
  privacyGroupsListCombo.setDisplayField(""String_Node_Str"");
  privacyGroupsListCombo.setValueField(""String_Node_Str"");
  privacyGroupsListCombo.setTriggerAction(TriggerAction.ALL);
  final ListStore<PrivacyGroupDTO> privacyGroupsStore=new ListStore<PrivacyGroupDTO>();
  dispatcher.execute(new GetPrivacyGroups(),null,new AsyncCallback<PrivacyGroupsListResult>(){
    @Override public void onFailure(    Throwable arg0){
      privacyGroupsListCombo.setEmptyText(I18N.CONSTANTS.adminChoiceProblem());
    }
    @Override public void onSuccess(    PrivacyGroupsListResult result){
      privacyGroupsListCombo.setEmptyText(I18N.CONSTANTS.adminPrivacyGroupChoice());
      privacyGroupsStore.removeAll();
      if (result != null) {
        privacyGroupsStore.add(result.getList());
        privacyGroupsStore.commitChanges();
      }
    }
  }
);
  privacyGroupsListCombo.setStore(privacyGroupsStore);
  if (flexibleElement != null && flexibleElement.getPrivacyGroup() != null) {
    privacyGroupsListCombo.setValue(flexibleElement.getPrivacyGroup());
    oldFieldProperties.put(AdminUtil.PROP_FX_PRIVACY_GROUP,flexibleElement.getPrivacyGroup());
  }
  commonPanel.add(privacyGroupsListCombo);
  isAmendable=new CheckBox();
  isAmendable.setBoxLabel(""String_Node_Str"");
  isAmendable.setFieldLabel(constants.adminFlexibleAmendable());
  isAmendable.setValue(false);
  if (flexibleElement != null) {
    isAmendable.setValue(flexibleElement.getAmendable());
    oldFieldProperties.put(AdminUtil.PROP_FX_AMENDABLE,flexibleElement.getAmendable());
  }
  commonPanel.add(isAmendable);
  final Button createButton=new Button(I18N.CONSTANTS.save(),IconImageBundle.ICONS.save());
  createButton.addListener(Events.OnClick,new Listener<ButtonEvent>(){
    @Override public void handleEvent(    ButtonEvent be){
      createFlexibleElement(callback);
    }
  }
);
  final ContentPanel form=new ContentPanel();
  form.setHeight(450);
  form.setHeaderVisible(false);
  form.setLayout(new BorderLayout());
  final BorderLayoutData leftLayoutData=new BorderLayoutData(LayoutRegion.WEST);
  leftLayoutData.setSize(320);
  form.add(commonPanel,leftLayoutData);
  final BorderLayoutData rightLayoutData=new BorderLayoutData(LayoutRegion.CENTER);
  rightLayoutData.setMargins(new Margins(0,0,2,4));
  rightLayoutData.setSize(200);
  form.add(specificsPanel,rightLayoutData);
  final VBoxLayoutData topVBoxLayoutData=new VBoxLayoutData();
  topVBoxLayoutData.setFlex(1.0);
  add(form,topVBoxLayoutData);
  ToolBar toolbar=new ToolBar();
  toolbar.setAlignment(HorizontalAlignment.CENTER);
  toolbar.add(createButton);
  setBottomComponent(toolbar);
  layout();
}","public ElementForm(Dispatcher dispatcher,final AsyncCallback<UpdateModelResult> callback,final FlexibleElementDTO flexibleElement,ProjectModelDTO projectModelToUpdate,OrgUnitModelDTO orgUnitModelToUpdate){
  final VBoxLayout mainPanelLayout=new VBoxLayout();
  mainPanelLayout.setVBoxLayoutAlign(VBoxLayout.VBoxLayoutAlign.STRETCH);
  setLayout(mainPanelLayout);
  setHeaderVisible(false);
  if (projectModelToUpdate != null) {
    isProject=true;
  }
 else {
    isProject=false;
  }
  this.dispatcher=dispatcher;
  this.projectModelToUpdate=projectModelToUpdate;
  this.orgUnitModelToUpdate=orgUnitModelToUpdate;
  this.flexibleElementToUpdate=flexibleElement;
  UIConstants constants=GWT.create(UIConstants.class);
  specificsPanel=new FormPanel();
  specificsPanel.setHeaderVisible(false);
  specificsPanel.setBorders(true);
  specificsPanel.hide();
  reportModelList=new ComboBox<ReportModelDTO>();
  reportModelList.setEditable(false);
  reportModelList.hide();
  reportModelList.setFieldLabel(I18N.CONSTANTS.adminReportName());
  reportModelList.setDisplayField(""String_Node_Str"");
  reportModelList.setValueField(""String_Node_Str"");
  reportModelList.setTriggerAction(TriggerAction.ALL);
  reportModelsStore=new ListStore<ReportModelDTO>();
  dispatcher.execute(new GetReportModels(),null,new AsyncCallback<ReportModelsListResult>(){
    @Override public void onFailure(    Throwable arg0){
      reportModelList.setEmptyText(I18N.CONSTANTS.adminChoiceProblem());
    }
    @Override public void onSuccess(    ReportModelsListResult result){
      reportModelList.setEmptyText(I18N.CONSTANTS.adminReportName());
      reportModelsStore.removeAll();
      if (result != null) {
        reportModelsStore.add(result.getList());
        reportModelsStore.commitChanges();
      }
      if (flexibleElement != null) {
        if (flexibleElement instanceof ReportElementDTO) {
          if (((ReportElementDTO)flexibleElement).getModelId() != null) {
            for (            ReportModelDTO reportModel : reportModelsStore.getModels()) {
              if (reportModel.getId() == ((ReportElementDTO)flexibleElement).getModelId()) {
                reportModelList.setValue(reportModel);
              }
            }
          }
        }
      }
      if (flexibleElement != null) {
        if (flexibleElement instanceof ReportListElementDTO) {
          if (((ReportListElementDTO)flexibleElement).getModelId() != null) {
            for (            ReportModelDTO reportModel : reportModelsStore.getModels()) {
              if (reportModel.getId() == ((ReportListElementDTO)flexibleElement).getModelId()) {
                reportModelList.setValue(reportModel);
              }
            }
          }
        }
      }
    }
  }
);
  reportModelList.setStore(reportModelsStore);
  maxLimitField=new NumberField();
  maxLimitField.setFieldLabel(I18N.CONSTANTS.adminFlexibleMaxLimit());
  maxLimitField.hide();
  textAreaTypeList=new SimpleComboBox<String>();
  textAreaTypeList.setTriggerAction(TriggerAction.ALL);
  textAreaTypeList.setEditable(false);
  textAreaTypeList.hide();
  textAreaTypeList.setFieldLabel(I18N.CONSTANTS.adminFlexibleTextType());
  List<String> textTypes=new ArrayList<String>();
  textTypes.add(I18N.CONSTANTS.adminFlexibleTextTypeP());
  textTypes.add(I18N.CONSTANTS.adminFlexibleTextTypeT());
  textTypes.add(I18N.CONSTANTS.adminFlexibleTextTypeN());
  textTypes.add(I18N.CONSTANTS.adminFlexibleTextTypeD());
  textAreaTypeList.add(textTypes);
  minLimitField=new NumberField();
  minLimitField.setFieldLabel(I18N.CONSTANTS.adminFlexibleMinLimit());
  minLimitField.hide();
  lengthField=new NumberField();
  lengthField.setFieldLabel(I18N.CONSTANTS.adminFlexibleLength());
  lengthField.hide();
  isDecimal=new CheckBox();
  isDecimal.hide();
  isDecimal.setBoxLabel(""String_Node_Str"");
  isDecimal.setFieldLabel(I18N.CONSTANTS.adminFlexibleDecimal());
  isDecimal.setLabelSeparator(""String_Node_Str"");
  isMultipleQ=new CheckBox();
  isMultipleQ.hide();
  isMultipleQ.setBoxLabel(""String_Node_Str"");
  isMultipleQ.setFieldLabel(I18N.CONSTANTS.adminFlexibleMultipleQ());
  isMultipleQ.setLabelSeparator(""String_Node_Str"");
  isLinkedToQuality=new CheckBox();
  isLinkedToQuality.hide();
  isLinkedToQuality.setBoxLabel(""String_Node_Str"");
  isLinkedToQuality.setFieldLabel(I18N.CONSTANTS.adminFlexibleLinkedToQuality());
  isLinkedToQuality.setLabelSeparator(""String_Node_Str"");
  defaultNoCategory.setLabel(I18N.CONSTANTS.adminFlexibleNoLinkedCategory());
  defaultNoCategory.setId(-1);
  linkedCategory=new ComboBox<CategoryTypeDTO>();
  linkedCategory.setEditable(false);
  linkedCategory.hide();
  linkedCategory.setDisplayField(I18N.CONSTANTS.adminFlexibleNoLinkedCategory());
  linkedCategory.setFieldLabel(I18N.CONSTANTS.adminFlexibleLinkedCategory());
  linkedCategory.setDisplayField(""String_Node_Str"");
  linkedCategory.setValueField(""String_Node_Str"");
  linkedCategory.setTriggerAction(TriggerAction.ALL);
  final ListStore<CategoryTypeDTO> linkedCategoriesStore=new ListStore<CategoryTypeDTO>();
  linkedCategoriesStore.add(defaultNoCategory);
  dispatcher.execute(new GetCategories(),null,new AsyncCallback<CategoriesListResult>(){
    @Override public void onFailure(    Throwable arg0){
      linkedCategory.setEmptyText(I18N.CONSTANTS.adminChoiceProblem());
    }
    @Override public void onSuccess(    CategoriesListResult result){
      linkedCategory.setEmptyText(I18N.CONSTANTS.adminUserCreationProfileChoice());
      linkedCategoriesStore.removeAll();
      linkedCategoriesStore.add(defaultNoCategory);
      if (result != null) {
        linkedCategoriesStore.add(result.getList());
        linkedCategoriesStore.commitChanges();
      }
    }
  }
);
  linkedCategory.setStore(linkedCategoriesStore);
  for (int i=0; i < MAX_TENTATIVES_FOR_CHOICES; i++) {
    final ClickableLabel label=new ClickableLabel();
    label.addClickHandler(new ClickHandler(){
      @Override public void onClick(      ClickEvent arg0){
        label.hide();
        selectedChoicesLabels.remove(label.getText());
        if (selectedChoicesLabels.size() == 0) {
          linkedCategory.setEnabled(true);
        }
      }
    }
);
    label.hide();
    selectableChoices.put(i,label);
  }
  questionChoice=new TextField<String>();
  questionChoice.hide();
  qChoicesAddGrid.setVisible(false);
  qChoicesAddGrid.getCellFormatter().setWidth(0,0,(LABEL_WIDTH) + ""String_Node_Str"");
  qChoicesAddGrid.setCellPadding(0);
  qChoicesAddGrid.setCellSpacing(0);
  qChoicesAddGrid.setWidget(0,0,new LabelField(I18N.CONSTANTS.adminFlexibleQChoices() + ""String_Node_Str""));
  qChoicesAddGrid.setWidget(0,1,questionChoice);
  questionChoice.setHideLabel(false);
  addChoiceButton.hide();
  addChoiceButton.addListener(Events.OnClick,new Listener<ButtonEvent>(){
    @Override public void handleEvent(    ButtonEvent be){
      if (questionChoice.getValue() != null) {
        if (!selectedChoicesLabels.contains(questionChoice.getValue())) {
          if (num < MAX_TENTATIVES_FOR_CHOICES) {
            linkedCategory.setEnabled(false);
            selectableChoices.get(num).setText(questionChoice.getValue());
            selectableChoices.get(num).show();
            num++;
            selectedChoicesLabels.add(questionChoice.getValue());
          }
 else {
            MessageBox.alert(I18N.CONSTANTS.adminMaxAttempts(),I18N.CONSTANTS.adminMaxAttemptsQChoices(),null);
            ElementForm.this.removeFromParent();
          }
        }
      }
    }
  }
);
  qChoicesAddGrid.setWidget(0,2,addChoiceButton);
  linkedCategory.addListener(Events.Select,new Listener<BaseEvent>(){
    @Override public void handleEvent(    BaseEvent be){
      if (linkedCategory.getValue() == null || defaultNoCategory.equals(linkedCategory.getValue())) {
        questionChoice.setEnabled(true);
        addChoiceButton.setEnabled(true);
      }
 else {
        questionChoice.setEnabled(false);
        addChoiceButton.setEnabled(false);
        for (        ClickableLabel selected : selectableChoices.values()) {
          selected.setEnabled(false);
        }
      }
    }
  }
);
  posBanner=new SimpleComboBox<Integer>();
  posBanner.setTriggerAction(TriggerAction.ALL);
  posBanner.setEditable(false);
  posBanner.setFieldLabel(constants.adminFlexibleBannerPosition());
  posBanner.removeAll();
  for (int i=1; i < 7; i++) {
    posBanner.add(i);
  }
  posBanner.setAllowBlank(true);
  posBanner.setEnabled(false);
  posBanner.hide();
  isBanner=new CheckBox();
  isBanner.setFieldLabel(constants.Admin_BANNER());
  isBanner.setBoxLabel(""String_Node_Str"");
  isBanner.setValue(false);
  isBanner.addListener(Events.Change,new Listener<BaseEvent>(){
    @Override public void handleEvent(    BaseEvent be){
      if (isBanner.getValue()) {
        posBanner.removeAll();
        for (int i=1; i < 7; i++) {
          posBanner.add(i);
        }
        posBanner.setEnabled(true);
        posBanner.setAllowBlank(false);
      }
 else {
        posBanner.removeAll();
        posBanner.setValue(null);
        posBanner.setAllowBlank(true);
        posBanner.setEnabled(false);
      }
    }
  }
);
  isBanner.hide();
  specificsPanel.add(isBanner);
  specificsPanel.add(posBanner);
  specificsPanel.add(reportModelList);
  specificsPanel.add(textAreaTypeList);
  specificsPanel.add(lengthField);
  specificsPanel.add(isDecimal);
  specificsPanel.add(minLimitField);
  specificsPanel.add(maxLimitField);
  specificsPanel.add(isMultipleQ);
  specificsPanel.add(isLinkedToQuality);
  specificsPanel.add(linkedCategory);
  specificsPanel.add(qChoicesAddGrid);
  for (  ClickableLabel selected : selectableChoices.values()) {
    selected.hide();
    specificsPanel.add(selected);
  }
  commonPanel=new FormPanel();
  commonPanel.setHeaderVisible(false);
  htmlArea=new HtmlEditor();
  htmlArea.hide();
  htmlArea.setEnableAlignments(false);
  htmlArea.setEnableLinks(false);
  htmlArea.setEnableFont(false);
  htmlArea.setEnableLists(false);
  htmlArea.setEnableColors(false);
  htmlArea.setSourceEditMode(false);
  htmlArea.setHeight(75);
  htmlArea.setFieldLabel(constants.adminFlexibleName());
  if (flexibleElement != null && flexibleElement.getLabel() != null) {
    htmlArea.setValue(flexibleElement.getLabel());
    oldFieldProperties.put(AdminUtil.PROP_FX_NAME,flexibleElement.getLabel());
  }
  LabelField label=new LabelField();
  label.hide();
  label.setFieldLabel(constants.adminFlexibleName());
  if (flexibleElement != null && flexibleElement.getElementType() != null) {
    if (ElementTypeEnum.DEFAULT.equals(flexibleElement.getElementType())) {
      label.setText(DefaultFlexibleElementType.getName(((DefaultFlexibleElementDTO)flexibleElement).getType()));
      label.show();
      oldFieldProperties.put(AdminUtil.PROP_FX_NAME,DefaultFlexibleElementType.getName(((DefaultFlexibleElementDTO)flexibleElement).getType()));
      htmlArea.setValue(DefaultFlexibleElementType.getName(((DefaultFlexibleElementDTO)flexibleElement).getType()));
    }
 else {
      htmlArea.show();
    }
  }
 else {
    htmlArea.show();
  }
  commonPanel.add(label);
  commonPanel.add(htmlArea);
  typeList=new SimpleComboBox<String>();
  typeList.setEditable(false);
  typeList.addListener(Events.Select,new Listener<BaseEvent>(){
    @Override public void handleEvent(    BaseEvent be){
      hideAllSpecificAttributes();
      showSpecificAttributes(typeList.getSimpleValue(),flexibleElementToUpdate,true);
    }
  }
);
  typeList.setFieldLabel(constants.adminFlexibleType());
  typeList.setAllowBlank(false);
  typeList.setTriggerAction(TriggerAction.ALL);
  List<String> values=new ArrayList<String>();
  for (  ElementTypeEnum e : ElementTypeEnum.values()) {
    if (!ElementTypeEnum.DEFAULT.equals(e) && !ElementTypeEnum.INDICATORS.equals(e))     values.add(ElementTypeEnum.getName(e));
  }
  typeList.add(values);
  if (flexibleElement != null && flexibleElement.getElementType() != null) {
    String typeOfElement=ElementTypeEnum.getName(flexibleElement.getElementType());
    typeList.setSimpleValue(typeOfElement);
    showSpecificAttributes(typeOfElement,flexibleElement,false);
    oldFieldProperties.put(AdminUtil.PROP_FX_TYPE,flexibleElement.getElementType());
    if (ElementTypeEnum.DEFAULT.equals(flexibleElement.getElementType())) {
      typeList.setEnabled(false);
    }
  }
 else   typeList.setEmptyText(I18N.CONSTANTS.adminFlexibleType());
  commonPanel.add(typeList);
  final ListStore<BaseModelData> containersStore=new ListStore<BaseModelData>();
  containerList=new ComboBox<BaseModelData>();
  containerList.setEditable(false);
  containerList.setDisplayField(""String_Node_Str"");
  containerList.setValueField(""String_Node_Str"");
  containerList.setFieldLabel(I18N.CONSTANTS.adminFlexibleContainer());
  containerList.setAllowBlank(false);
  containerList.setTriggerAction(TriggerAction.ALL);
  if (flexibleElement == null)   containerList.setEmptyText(I18N.CONSTANTS.adminFlexibleContainerChoice());
  final ListStore<LayoutGroupDTO> groupsStore=new ListStore<LayoutGroupDTO>();
  groupList=new ComboBox<LayoutGroupDTO>();
  groupList.setEditable(false);
  groupList.setFieldLabel(constants.adminFlexibleGroup());
  groupList.setDisplayField(""String_Node_Str"");
  groupList.setValueField(""String_Node_Str"");
  groupList.setTriggerAction(TriggerAction.ALL);
  containerList.addListener(Events.Select,new Listener<BaseEvent>(){
    @Override public void handleEvent(    BaseEvent be){
      LayoutDTO container=null;
      if (containerList.getValue() != null) {
        if (containerList.getValue() instanceof ProjectBannerDTO) {
          container=((ProjectBannerDTO)containerList.getValue()).getLayoutDTO();
          isBanner.setValue(true);
          posBanner.setAllowBlank(false);
          posBanner.setEnabled(true);
        }
 else         if (containerList.getValue() instanceof ProjectDetailsDTO) {
          container=((ProjectDetailsDTO)containerList.getValue()).getLayoutDTO();
        }
 else         if (containerList.getValue() instanceof PhaseModelDTO) {
          container=((PhaseModelDTO)containerList.getValue()).getLayoutDTO();
        }
 else         if (containerList.getValue() instanceof OrgUnitDetailsDTO) {
          container=((OrgUnitDetailsDTO)containerList.getValue()).getLayout();
        }
      }
      if (container != null) {
        groupsStore.removeAll();
        for (        LayoutGroupDTO lg : container.getLayoutGroupsDTO()) {
          groupsStore.add(lg);
        }
        groupList.setValue(groupsStore.getAt(0));
      }
    }
  }
);
  orderField=new NumberField();
  orderField.setAllowBlank(false);
  orderField.setFieldLabel(constants.adminFlexibleOrder());
  orderField.clear();
  oldFieldProperties.put(AdminUtil.PROP_FX_IN_BANNER,false);
  oldFieldProperties.put(AdminUtil.PROP_FX_POS_IN_BANNER,-1);
  if (isProject) {
    if (flexibleElement != null) {
      BaseModelData container=flexibleElement.getContainerModel();
      containerList.setValue(flexibleElement.getContainerModel());
      groupList.setValue(flexibleElement.getConstraint().getParentLayoutGroupDTO());
      orderField.setValue(flexibleElement.getConstraint().getSortOrder());
      groupsStore.removeAll();
      if (container instanceof PhaseModelDTO) {
        for (        LayoutGroupDTO groupChoice : ((PhaseModelDTO)container).getLayoutDTO().getLayoutGroupsDTO()) {
          groupsStore.add(groupChoice);
        }
      }
 else {
        for (        LayoutGroupDTO groupChoice : ((ProjectDetailsDTO)container).getLayoutDTO().getLayoutGroupsDTO()) {
          groupsStore.add(groupChoice);
        }
      }
      if (flexibleElement.getBannerConstraint() != null) {
        posBanner.setSimpleValue(flexibleElement.getBannerConstraint().getSortOrder());
        isBanner.setValue(true);
        oldFieldProperties.put(AdminUtil.PROP_FX_IN_BANNER,true);
        oldFieldProperties.put(AdminUtil.PROP_FX_POS_IN_BANNER,flexibleElement.getBannerConstraint().getSortOrder());
        oldFieldProperties.put(AdminUtil.PROP_FX_LC_BANNER,flexibleElement.getBannerConstraint());
      }
      oldFieldProperties.put(AdminUtil.PROP_FX_ORDER_IN_GROUP,new Integer(flexibleElement.getConstraint().getSortOrder()));
      oldFieldProperties.put(AdminUtil.PROP_FX_GROUP,flexibleElement.getConstraint().getParentLayoutGroupDTO());
      oldFieldProperties.put(AdminUtil.PROP_FX_LC,flexibleElement.getConstraint());
    }
    containersStore.add(projectModelToUpdate.getProjectDetailsDTO());
    for (    PhaseModelDTO p : projectModelToUpdate.getPhaseModelsDTO()) {
      containersStore.add(p);
    }
  }
 else {
    if (flexibleElement != null) {
      BaseModelData container=flexibleElement.getContainerModel();
      containerList.setValue(flexibleElement.getContainerModel());
      groupList.setValue(flexibleElement.getConstraint().getParentLayoutGroupDTO());
      orderField.setValue(flexibleElement.getConstraint().getSortOrder());
      groupsStore.removeAll();
      for (      LayoutGroupDTO groupChoice : ((OrgUnitDetailsDTO)container).getLayout().getLayoutGroupsDTO()) {
        groupsStore.add(groupChoice);
      }
      if (flexibleElement.getBannerConstraint() != null) {
        posBanner.setSimpleValue(flexibleElement.getBannerConstraint().getSortOrder());
        isBanner.setValue(true);
        oldFieldProperties.put(AdminUtil.PROP_FX_IN_BANNER,true);
        oldFieldProperties.put(AdminUtil.PROP_FX_POS_IN_BANNER,flexibleElement.getBannerConstraint().getSortOrder());
        oldFieldProperties.put(AdminUtil.PROP_FX_LC_BANNER,flexibleElement.getBannerConstraint());
      }
      oldFieldProperties.put(AdminUtil.PROP_FX_ORDER_IN_GROUP,new Integer(flexibleElement.getConstraint().getSortOrder()));
      oldFieldProperties.put(AdminUtil.PROP_FX_GROUP,flexibleElement.getConstraint().getParentLayoutGroupDTO());
      oldFieldProperties.put(AdminUtil.PROP_FX_LC,flexibleElement.getConstraint());
    }
    containersStore.add(orgUnitModelToUpdate.getDetails());
  }
  containerList.setStore(containersStore);
  commonPanel.add(containerList);
  groupList.setStore(groupsStore);
  commonPanel.add(groupList);
  commonPanel.add(orderField);
  validates=new CheckBox();
  validates.setFieldLabel(constants.adminFlexibleCompulsory());
  validates.setBoxLabel(""String_Node_Str"");
  validates.setValue(false);
  if (flexibleElement != null) {
    validates.setValue(flexibleElement.getValidates());
    oldFieldProperties.put(AdminUtil.PROP_FX_IS_COMPULSARY,flexibleElement.getValidates());
  }
  commonPanel.add(validates);
  privacyGroupsListCombo=new ComboBox<PrivacyGroupDTO>();
  privacyGroupsListCombo.setEditable(false);
  privacyGroupsListCombo.setFieldLabel(constants.adminPrivacyGroups());
  privacyGroupsListCombo.setDisplayField(""String_Node_Str"");
  privacyGroupsListCombo.setValueField(""String_Node_Str"");
  privacyGroupsListCombo.setTriggerAction(TriggerAction.ALL);
  final ListStore<PrivacyGroupDTO> privacyGroupsStore=new ListStore<PrivacyGroupDTO>();
  dispatcher.execute(new GetPrivacyGroups(),null,new AsyncCallback<PrivacyGroupsListResult>(){
    @Override public void onFailure(    Throwable arg0){
      privacyGroupsListCombo.setEmptyText(I18N.CONSTANTS.adminChoiceProblem());
    }
    @Override public void onSuccess(    PrivacyGroupsListResult result){
      privacyGroupsListCombo.setEmptyText(I18N.CONSTANTS.adminPrivacyGroupChoice());
      privacyGroupsStore.removeAll();
      if (result != null) {
        privacyGroupsStore.add(result.getList());
        privacyGroupsStore.commitChanges();
      }
    }
  }
);
  privacyGroupsListCombo.setStore(privacyGroupsStore);
  if (flexibleElement != null && flexibleElement.getPrivacyGroup() != null) {
    privacyGroupsListCombo.setValue(flexibleElement.getPrivacyGroup());
    oldFieldProperties.put(AdminUtil.PROP_FX_PRIVACY_GROUP,flexibleElement.getPrivacyGroup());
  }
  commonPanel.add(privacyGroupsListCombo);
  isAmendable=new CheckBox();
  isAmendable.setBoxLabel(""String_Node_Str"");
  isAmendable.setFieldLabel(constants.adminFlexibleAmendable());
  isAmendable.setValue(false);
  if (flexibleElement != null) {
    isAmendable.setValue(flexibleElement.getAmendable());
    oldFieldProperties.put(AdminUtil.PROP_FX_AMENDABLE,flexibleElement.getAmendable());
  }
  commonPanel.add(isAmendable);
  final Button createButton=new Button(I18N.CONSTANTS.save(),IconImageBundle.ICONS.save());
  createButton.addListener(Events.OnClick,new Listener<ButtonEvent>(){
    @Override public void handleEvent(    ButtonEvent be){
      createFlexibleElement(callback);
    }
  }
);
  final ContentPanel form=new ContentPanel();
  form.setHeight(450);
  form.setHeaderVisible(false);
  form.setLayout(new BorderLayout());
  final BorderLayoutData leftLayoutData=new BorderLayoutData(LayoutRegion.WEST);
  leftLayoutData.setSize(320);
  form.add(commonPanel,leftLayoutData);
  final BorderLayoutData rightLayoutData=new BorderLayoutData(LayoutRegion.CENTER);
  rightLayoutData.setMargins(new Margins(0,0,2,4));
  rightLayoutData.setSize(200);
  form.add(specificsPanel,rightLayoutData);
  final VBoxLayoutData topVBoxLayoutData=new VBoxLayoutData();
  topVBoxLayoutData.setFlex(1.0);
  add(form,topVBoxLayoutData);
  ToolBar toolbar=new ToolBar();
  toolbar.setAlignment(HorizontalAlignment.CENTER);
  toolbar.add(createButton);
  setBottomComponent(toolbar);
  layout();
}",0.9886048660301816
35614,"/** 
 * Save the flexible elements of imported project model.
 * @param projectModel the imported project model
 * @param em the entity manager
 */
private void saveProjectFlexibleElement(ProjectModel projectModel,EntityManager em,HashMap<Object,Object> modelesReset,HashSet<Object> modelesImport){
  if (projectModel.getProjectBanner() != null && projectModel.getProjectBanner().getLayout() != null) {
    final List<LayoutGroup> bannerLayoutGroups=projectModel.getProjectBanner().getLayout().getGroups();
    saveLayoutGroups(bannerLayoutGroups,em,modelesReset,modelesImport);
  }
  if (projectModel.getProjectDetails() != null && projectModel.getProjectDetails().getLayout() != null) {
    final List<LayoutGroup> detailLayoutGroups=projectModel.getProjectDetails().getLayout().getGroups();
    saveLayoutGroups(detailLayoutGroups,em,modelesReset,modelesImport);
  }
  List<PhaseModel> phases=projectModel.getPhases();
  if (phases != null) {
    projectModel.setPhases(null);
    em.persist(projectModel);
    for (    PhaseModel phase : phases) {
      phase.setParentProjectModel(projectModel);
      if (phase.getLayout() != null) {
        final List<LayoutGroup> phaseLayoutGroups=phase.getLayout().getGroups();
        saveLayoutGroups(phaseLayoutGroups,em,modelesReset,modelesImport);
      }
      if (phase.getDefinition() != null) {
        em.persist(phase.getDefinition());
      }
      em.persist(phase);
    }
    projectModel.setPhases(phases);
  }
}","/** 
 * Save the flexible elements of imported project model.
 * @param projectModel the imported project model
 * @param em the entity manager
 */
private void saveProjectFlexibleElement(ProjectModel projectModel,EntityManager em,HashMap<Object,Object> modelesReset,HashSet<Object> modelesImport,Authentication authentication){
  if (projectModel.getProjectBanner() != null && projectModel.getProjectBanner().getLayout() != null) {
    final List<LayoutGroup> bannerLayoutGroups=projectModel.getProjectBanner().getLayout().getGroups();
    saveLayoutGroups(bannerLayoutGroups,em,modelesReset,modelesImport,authentication);
  }
  if (projectModel.getProjectDetails() != null && projectModel.getProjectDetails().getLayout() != null) {
    final List<LayoutGroup> detailLayoutGroups=projectModel.getProjectDetails().getLayout().getGroups();
    saveLayoutGroups(detailLayoutGroups,em,modelesReset,modelesImport,authentication);
  }
  List<PhaseModel> phases=projectModel.getPhases();
  if (phases != null) {
    projectModel.setPhases(null);
    em.persist(projectModel);
    for (    PhaseModel phase : phases) {
      phase.setParentProjectModel(projectModel);
      if (phase.getLayout() != null) {
        final List<LayoutGroup> phaseLayoutGroups=phase.getLayout().getGroups();
        saveLayoutGroups(phaseLayoutGroups,em,modelesReset,modelesImport,authentication);
      }
      if (phase.getDefinition() != null) {
        em.persist(phase.getDefinition());
      }
      em.persist(phase);
    }
    projectModel.setPhases(phases);
  }
}",0.9751243781094528
35615,"private void saveLayoutGroups(final List<LayoutGroup> layoutGroups,EntityManager em,HashMap<Object,Object> modelesReset,HashSet<Object> modelesImport){
  if (layoutGroups != null) {
    for (    LayoutGroup layoutGroup : layoutGroups) {
      final List<LayoutConstraint> layoutConstraints;
      if (layoutGroup != null)       layoutConstraints=layoutGroup.getConstraints();
 else       layoutConstraints=null;
      if (layoutConstraints != null) {
        for (        LayoutConstraint layoutConstraint : layoutConstraints) {
          if (layoutConstraint != null && layoutConstraint.getElement() != null) {
            if (em.contains(layoutConstraint.getElement())) {
              continue;
            }
            if (layoutConstraint.getElement() instanceof QuestionElement) {
              List<QuestionChoiceElement> questionChoiceElements=((QuestionElement)layoutConstraint.getElement()).getChoices();
              CategoryType type=((QuestionElement)layoutConstraint.getElement()).getCategoryType();
              if (questionChoiceElements != null || type != null) {
                FlexibleElement parent=(FlexibleElement)layoutConstraint.getElement();
                ((QuestionElement)parent).setChoices(null);
                ((QuestionElement)parent).setCategoryType(null);
                em.persist(parent);
                if (questionChoiceElements != null) {
                  for (                  QuestionChoiceElement questionChoiceElement : questionChoiceElements) {
                    if (questionChoiceElement != null) {
                      questionChoiceElement.setId(null);
                      questionChoiceElement.setParentQuestion((QuestionElement)parent);
                      CategoryElement categoryElement=questionChoiceElement.getCategoryElement();
                      if (categoryElement != null) {
                        questionChoiceElement.setCategoryElement(null);
                        em.persist(questionChoiceElement);
                        saveProjectModelCategoryElement(categoryElement,em,modelesReset,modelesImport);
                        questionChoiceElement.setCategoryElement(categoryElement);
                        em.merge(questionChoiceElement);
                      }
 else {
                        em.persist(questionChoiceElement);
                      }
                    }
                  }
                  ((QuestionElement)parent).setChoices(questionChoiceElements);
                }
                if (type != null) {
                  if (em.find(CategoryType.class,type.getId()) == null) {
                    List<CategoryElement> typeElements=type.getElements();
                    if (typeElements != null) {
                      type.setElements(null);
                      em.merge(type);
                      for (                      CategoryElement element : typeElements) {
                        if (em.find(CategoryElement.class,element.getId()) == null) {
                          element.setParentType(type);
                          saveProjectModelCategoryElement(element,em,modelesReset,modelesImport);
                        }
                      }
                      type.setElements(typeElements);
                      em.merge(type);
                    }
                  }
                  ((QuestionElement)parent).setCategoryType(type);
                }
                em.merge(parent);
              }
 else {
                em.persist(layoutConstraint.getElement());
              }
            }
 else {
              em.persist(layoutConstraint.getElement());
            }
          }
        }
      }
    }
  }
}","private void saveLayoutGroups(final List<LayoutGroup> layoutGroups,EntityManager em,HashMap<Object,Object> modelesReset,HashSet<Object> modelesImport,Authentication authentication){
  final HashSet<Integer> reportModelsId=new HashSet<Integer>();
  if (layoutGroups != null) {
    for (    LayoutGroup layoutGroup : layoutGroups) {
      final List<LayoutConstraint> layoutConstraints;
      if (layoutGroup != null)       layoutConstraints=layoutGroup.getConstraints();
 else       layoutConstraints=null;
      if (layoutConstraints != null) {
        for (        LayoutConstraint layoutConstraint : layoutConstraints) {
          if (layoutConstraint != null && layoutConstraint.getElement() != null) {
            if (em.contains(layoutConstraint.getElement())) {
              continue;
            }
            if (layoutConstraint.getElement() instanceof QuestionElement) {
              List<QuestionChoiceElement> questionChoiceElements=((QuestionElement)layoutConstraint.getElement()).getChoices();
              CategoryType type=((QuestionElement)layoutConstraint.getElement()).getCategoryType();
              if (questionChoiceElements != null || type != null) {
                FlexibleElement parent=(FlexibleElement)layoutConstraint.getElement();
                ((QuestionElement)parent).setChoices(null);
                ((QuestionElement)parent).setCategoryType(null);
                em.persist(parent);
                if (questionChoiceElements != null) {
                  for (                  QuestionChoiceElement questionChoiceElement : questionChoiceElements) {
                    if (questionChoiceElement != null) {
                      questionChoiceElement.setId(null);
                      questionChoiceElement.setParentQuestion((QuestionElement)parent);
                      CategoryElement categoryElement=questionChoiceElement.getCategoryElement();
                      if (categoryElement != null) {
                        questionChoiceElement.setCategoryElement(null);
                        em.persist(questionChoiceElement);
                        saveProjectModelCategoryElement(categoryElement,em,modelesReset,modelesImport);
                        questionChoiceElement.setCategoryElement(categoryElement);
                        em.merge(questionChoiceElement);
                      }
 else {
                        em.persist(questionChoiceElement);
                      }
                    }
                  }
                  ((QuestionElement)parent).setChoices(questionChoiceElements);
                }
                if (type != null) {
                  if (em.find(CategoryType.class,type.getId()) == null) {
                    List<CategoryElement> typeElements=type.getElements();
                    if (typeElements != null) {
                      type.setElements(null);
                      em.merge(type);
                      for (                      CategoryElement element : typeElements) {
                        if (em.find(CategoryElement.class,element.getId()) == null) {
                          element.setParentType(type);
                          saveProjectModelCategoryElement(element,em,modelesReset,modelesImport);
                        }
                      }
                      type.setElements(typeElements);
                      em.merge(type);
                    }
                  }
                  ((QuestionElement)parent).setCategoryType(type);
                }
                em.merge(parent);
              }
 else {
                em.persist(layoutConstraint.getElement());
              }
            }
 else             if (layoutConstraint.getElement() instanceof ReportElement) {
              final ReportElement element=(ReportElement)layoutConstraint.getElement();
              final ProjectReportModel oldModel=element.getModel();
              if (oldModel != null) {
                final int oldModelId=oldModel.getId();
                final ProjectReportModel newModel;
                if (!reportModelsId.contains(oldModelId)) {
                  oldModel.resetImport(new HashMap<Object,Object>(),new HashSet<Object>());
                  oldModel.setOrganization(authentication.getUser().getOrganization());
                  newModel=oldModel;
                  ProjectReportModelHandler.saveProjectReportModelElement(newModel,em);
                  em.persist(newModel);
                  element.setModel(newModel);
                  em.persist(element);
                  reportModelsId.add(element.getModel().getId());
                }
 else {
                  newModel=em.find(ProjectReportModel.class,oldModelId);
                  element.setModel(newModel);
                  em.persist(element);
                }
              }
            }
 else             if (layoutConstraint.getElement() instanceof ReportListElement) {
              final ReportListElement element=(ReportListElement)layoutConstraint.getElement();
              final ProjectReportModel oldModel=element.getModel();
              if (oldModel != null) {
                final int oldModelId=oldModel.getId();
                final ProjectReportModel newModel;
                if (!reportModelsId.contains(oldModelId)) {
                  oldModel.resetImport(new HashMap<Object,Object>(),new HashSet<Object>());
                  oldModel.setOrganization(authentication.getUser().getOrganization());
                  newModel=oldModel;
                  em.persist(element);
                  reportModelsId.add(element.getModel().getId());
                }
 else {
                  newModel=em.find(ProjectReportModel.class,oldModelId);
                  element.setModel(newModel);
                  em.persist(element);
                }
              }
            }
 else {
              em.persist(layoutConstraint.getElement());
            }
          }
        }
      }
    }
  }
}",0.7612002500520942
35616,"@Override public void importModel(InputStream inputStream,EntityManager em,Authentication authentication) throws ExportException {
  ObjectInputStream objectInputStream;
  em.getTransaction().begin();
  try {
    objectInputStream=new ObjectInputStream(inputStream);
    ProjectModel projectModel=(ProjectModel)objectInputStream.readObject();
    projectModel.setStatus(ProjectModelStatus.DRAFT);
    final HashMap<Object,Object> modelesReset=new HashMap<Object,Object>();
    final HashSet<Object> modelesImport=new HashSet<Object>();
    projectModel.resetImport(modelesReset,modelesImport);
    saveProjectFlexibleElement(projectModel,em,modelesReset,modelesImport);
    final ProjectModelVisibility visibility=new ProjectModelVisibility();
    visibility.setModel(projectModel);
    visibility.setType(projectModelType);
    visibility.setOrganization(authentication.getUser().getOrganization());
    final ArrayList<ProjectModelVisibility> visibilities=new ArrayList<ProjectModelVisibility>();
    visibilities.add(visibility);
    projectModel.setVisibilities(visibilities);
    projectModel.setStatus(ProjectModelStatus.DRAFT);
    for (    PhaseModel pm : projectModel.getPhases()) {
      for (      LayoutGroup lg : pm.getLayout().getGroups()) {
        for (        LayoutConstraint lc : lg.getConstraints()) {
          FlexibleElement fe=lc.getElement();
          System.out.println(fe.getClass() + ""String_Node_Str"" + fe.getId());
          if (fe instanceof QuestionElement) {
            for (            QuestionChoiceElement qce : ((QuestionElement)fe).getChoices()) {
              System.out.println(qce.getClass() + ""String_Node_Str"" + qce.getId());
            }
          }
        }
      }
    }
    em.merge(projectModel);
    em.getTransaction().commit();
    LOG.debug(""String_Node_Str"" + projectModel.getName() + ""String_Node_Str"");
  }
 catch (  Throwable e) {
    LOG.debug(""String_Node_Str"",e);
    throw new ExportException(""String_Node_Str"",e);
  }
}","@Override public void importModel(InputStream inputStream,EntityManager em,Authentication authentication) throws ExportException {
  ObjectInputStream objectInputStream;
  em.getTransaction().begin();
  try {
    objectInputStream=new ObjectInputStream(inputStream);
    ProjectModel projectModel=(ProjectModel)objectInputStream.readObject();
    projectModel.setStatus(ProjectModelStatus.DRAFT);
    final HashMap<Object,Object> modelesReset=new HashMap<Object,Object>();
    final HashSet<Object> modelesImport=new HashSet<Object>();
    projectModel.resetImport(modelesReset,modelesImport);
    saveProjectFlexibleElement(projectModel,em,modelesReset,modelesImport,authentication);
    final ProjectModelVisibility visibility=new ProjectModelVisibility();
    visibility.setModel(projectModel);
    visibility.setType(projectModelType);
    visibility.setOrganization(authentication.getUser().getOrganization());
    final ArrayList<ProjectModelVisibility> visibilities=new ArrayList<ProjectModelVisibility>();
    visibilities.add(visibility);
    projectModel.setVisibilities(visibilities);
    projectModel.setStatus(ProjectModelStatus.DRAFT);
    for (    PhaseModel pm : projectModel.getPhases()) {
      for (      LayoutGroup lg : pm.getLayout().getGroups()) {
        for (        LayoutConstraint lc : lg.getConstraints()) {
          FlexibleElement fe=lc.getElement();
          System.out.println(fe.getClass() + ""String_Node_Str"" + fe.getId());
          if (fe instanceof QuestionElement) {
            for (            QuestionChoiceElement qce : ((QuestionElement)fe).getChoices()) {
              System.out.println(qce.getClass() + ""String_Node_Str"" + qce.getId());
            }
          }
        }
      }
    }
    em.merge(projectModel);
    em.getTransaction().commit();
    LOG.debug(""String_Node_Str"" + projectModel.getName() + ""String_Node_Str"");
  }
 catch (  Throwable e) {
    LOG.debug(""String_Node_Str"",e);
    throw new ExportException(""String_Node_Str"",e);
  }
}",0.9962358845671268
35617,"/** 
 * Save the quality criterion passed in argument.
 * @param qualityCriterion the quality criterion to save
 * @param em the entity manager
 */
private void saveKeyQuestionQualityCriterion(QualityCriterion qualityCriterion,EntityManager em){
  List<QualityCriterion> qualityCriterions=qualityCriterion.getSubCriteria();
  QualityFramework qualityFramework=qualityCriterion.getQualityFramework();
  if (qualityCriterions != null || qualityFramework != null) {
    qualityCriterion.setSubCriteria(null);
    qualityCriterion.setQualityFramework(null);
    em.persist(qualityCriterion);
    for (    QualityCriterion criterion : qualityCriterions) {
      saveKeyQuestionQualityCriterion(criterion,em);
    }
    qualityCriterion.setSubCriteria(qualityCriterions);
    em.persist(qualityFramework);
    qualityCriterion.setQualityFramework(qualityFramework);
    em.merge(qualityCriterion);
  }
 else {
    em.persist(qualityCriterion);
  }
}","/** 
 * Save the quality criterion passed in argument.
 * @param qualityCriterion the quality criterion to save
 * @param em the entity manager
 */
private static void saveKeyQuestionQualityCriterion(QualityCriterion qualityCriterion,EntityManager em){
  List<QualityCriterion> qualityCriterions=qualityCriterion.getSubCriteria();
  QualityFramework qualityFramework=qualityCriterion.getQualityFramework();
  if (qualityCriterions != null || qualityFramework != null) {
    qualityCriterion.setSubCriteria(null);
    qualityCriterion.setQualityFramework(null);
    em.persist(qualityCriterion);
    for (    QualityCriterion criterion : qualityCriterions) {
      saveKeyQuestionQualityCriterion(criterion,em);
    }
    qualityCriterion.setSubCriteria(qualityCriterions);
    em.persist(qualityFramework);
    qualityCriterion.setQualityFramework(qualityFramework);
    em.merge(qualityCriterion);
  }
 else {
    em.persist(qualityCriterion);
  }
}",0.9963021658742736
35618,"/** 
 * Save the key questions of a section
 * @param section the section
 * @param keyQuestions the key questions of the sections
 * @param em the entity manager
 */
private void saveSectionKeyQuestion(ProjectReportModelSection section,List<KeyQuestion> keyQuestions,EntityManager em){
  for (  KeyQuestion keyQuestion : keyQuestions) {
    keyQuestion.setSectionId(section.getId());
    if (keyQuestion.getQualityCriterion() != null) {
      saveKeyQuestionQualityCriterion(keyQuestion.getQualityCriterion(),em);
    }
    em.persist(keyQuestion);
  }
  section.setKeyQuestions(keyQuestions);
}","/** 
 * Save the key questions of a section
 * @param section the section
 * @param keyQuestions the key questions of the sections
 * @param em the entity manager
 */
private static void saveSectionKeyQuestion(ProjectReportModelSection section,List<KeyQuestion> keyQuestions,EntityManager em){
  for (  KeyQuestion keyQuestion : keyQuestions) {
    keyQuestion.setSectionId(section.getId());
    if (keyQuestion.getQualityCriterion() != null) {
      saveKeyQuestionQualityCriterion(keyQuestion.getQualityCriterion(),em);
    }
    em.persist(keyQuestion);
  }
  section.setKeyQuestions(keyQuestions);
}",0.994161801501251
35619,"/** 
 * Save the section whith its sub sections and key questions
 * @param section the section to save
 * @param subSections the subsections to save.
 * @param keyQuestions the key question to save.         
 * @param em the entity manager
 */
private void saveSectionSubSectionKeyQuestions(ProjectReportModelSection section,List<ProjectReportModelSection> subSections,List<KeyQuestion> keyQuestions,EntityManager em){
  if (keyQuestions != null) {
    saveSectionKeyQuestion(section,keyQuestions,em);
  }
  if (subSections != null) {
    for (    ProjectReportModelSection subSection : subSections) {
      subSection.setParentSectionModelId(section.getId());
      List<ProjectReportModelSection> subSubSections=subSection.getSubSections();
      List<KeyQuestion> questions=subSection.getKeyQuestions();
      if (subSubSections != null || keyQuestions != null) {
        subSection.setSubSections(null);
        subSection.setKeyQuestions(null);
        em.persist(subSection);
        saveSectionSubSectionKeyQuestions(subSection,subSubSections,questions,em);
        subSection.setSubSections(subSubSections);
        if (subSection != null) {
          em.merge(subSection);
        }
      }
 else {
        if (subSection != null) {
          em.persist(subSection);
        }
      }
    }
  }
}","/** 
 * Save the section whith its sub sections and key questions
 * @param section the section to save
 * @param subSections the subsections to save.
 * @param keyQuestions the key question to save.         
 * @param em the entity manager
 */
private static void saveSectionSubSectionKeyQuestions(ProjectReportModelSection section,List<ProjectReportModelSection> subSections,List<KeyQuestion> keyQuestions,EntityManager em){
  if (keyQuestions != null) {
    saveSectionKeyQuestion(section,keyQuestions,em);
  }
  if (subSections != null) {
    for (    ProjectReportModelSection subSection : subSections) {
      subSection.setParentSectionModelId(section.getId());
      List<ProjectReportModelSection> subSubSections=subSection.getSubSections();
      List<KeyQuestion> questions=subSection.getKeyQuestions();
      if (subSubSections != null || keyQuestions != null) {
        subSection.setSubSections(null);
        subSection.setKeyQuestions(null);
        em.persist(subSection);
        saveSectionSubSectionKeyQuestions(subSection,subSubSections,questions,em);
        subSection.setSubSections(subSubSections);
        if (subSection != null) {
          em.merge(subSection);
        }
      }
 else {
        if (subSection != null) {
          em.persist(subSection);
        }
      }
    }
  }
}",0.997327224131348
35620,"/** 
 * Save elements of imported project report model
 * @param projectReportModel the imported project report model
 * @param em the entity manager
 */
private void saveProjectReportModelElement(ProjectReportModel projectReportModel,EntityManager em){
  List<ProjectReportModelSection> sections=projectReportModel.getSections();
  if (sections != null) {
    projectReportModel.setSections(null);
    em.persist(projectReportModel);
    for (    ProjectReportModelSection section : sections) {
      section.setProjectModelId(projectReportModel.getId());
      List<ProjectReportModelSection> subSections=section.getSubSections();
      List<KeyQuestion> keyQuestions=section.getKeyQuestions();
      if (subSections != null || keyQuestions != null) {
        section.setSubSections(null);
        section.setKeyQuestions(null);
        em.persist(section);
        saveSectionSubSectionKeyQuestions(section,subSections,keyQuestions,em);
        section.setSubSections(subSections);
        em.merge(section);
      }
 else {
        em.persist(section);
      }
    }
    projectReportModel.setSections(sections);
  }
}","/** 
 * Save elements of imported project report model
 * @param projectReportModel the imported project report model
 * @param em the entity manager
 */
public static void saveProjectReportModelElement(ProjectReportModel projectReportModel,EntityManager em){
  List<ProjectReportModelSection> sections=projectReportModel.getSections();
  if (sections != null) {
    projectReportModel.setSections(null);
    em.persist(projectReportModel);
    for (    ProjectReportModelSection section : sections) {
      section.setProjectModelId(projectReportModel.getId());
      List<ProjectReportModelSection> subSections=section.getSubSections();
      List<KeyQuestion> keyQuestions=section.getKeyQuestions();
      if (subSections != null || keyQuestions != null) {
        section.setSubSections(null);
        section.setKeyQuestions(null);
        em.persist(section);
        saveSectionSubSectionKeyQuestions(section,subSections,keyQuestions,em);
        section.setSubSections(subSections);
        em.merge(section);
      }
 else {
        em.persist(section);
      }
    }
    projectReportModel.setSections(sections);
  }
}",0.9937777777777778
35621,"@Override public CommandResult execute(GetReportElements cmd,User user) throws CommandException {
  final Query reportElementsQuery=em.createQuery(""String_Node_Str"");
  final Query reportListElementsQuery=em.createQuery(""String_Node_Str"");
  @SuppressWarnings(""String_Node_Str"") List<ReportElement> reportElements=reportElementsQuery.getResultList();
  @SuppressWarnings(""String_Node_Str"") List<ReportListElement> reportListElements=reportListElementsQuery.getResultList();
  List<ReportElementDTO> reportElementsDTOs=new ArrayList<ReportElementDTO>();
  List<ReportListElementDTO> reportListElementsDTOs=new ArrayList<ReportListElementDTO>();
  for (  ReportElement r : reportElements) {
    ReportElementDTO reportElementDTO=mapper.map(r,ReportElementDTO.class);
    reportElementDTO.setModelId(r.getModelId());
    reportElementsDTOs.add(reportElementDTO);
    log.debug(""String_Node_Str"" + reportElementDTO.getModelId());
  }
  for (  ReportListElement r : reportListElements) {
    ReportListElementDTO reportListElementDTO=mapper.map(r,ReportListElementDTO.class);
    reportListElementDTO.setModelId(r.getModelId());
    reportListElementsDTOs.add(reportListElementDTO);
    log.debug(""String_Node_Str"" + reportListElementDTO.getModelId());
  }
  return new ReportElementsResult(reportElementsDTOs,reportListElementsDTOs);
}","@Override public CommandResult execute(GetReportElements cmd,User user) throws CommandException {
  final Query reportElementsQuery=em.createQuery(""String_Node_Str"");
  final Query reportListElementsQuery=em.createQuery(""String_Node_Str"");
  @SuppressWarnings(""String_Node_Str"") List<ReportElement> reportElements=reportElementsQuery.getResultList();
  @SuppressWarnings(""String_Node_Str"") List<ReportListElement> reportListElements=reportListElementsQuery.getResultList();
  List<ReportElementDTO> reportElementsDTOs=new ArrayList<ReportElementDTO>();
  List<ReportListElementDTO> reportListElementsDTOs=new ArrayList<ReportListElementDTO>();
  for (  ReportElement r : reportElements) {
    ReportElementDTO reportElementDTO=mapper.map(r,ReportElementDTO.class);
    reportElementDTO.setModelId(r.getModel().getId());
    reportElementsDTOs.add(reportElementDTO);
    log.debug(""String_Node_Str"" + reportElementDTO.getModelId());
  }
  for (  ReportListElement r : reportListElements) {
    ReportListElementDTO reportListElementDTO=mapper.map(r,ReportListElementDTO.class);
    reportListElementDTO.setModelId(r.getModel().getId());
    reportListElementsDTOs.add(reportListElementDTO);
    log.debug(""String_Node_Str"" + reportListElementDTO.getModelId());
  }
  return new ReportElementsResult(reportElementsDTOs,reportListElementsDTOs);
}",0.9955123410620792
35622,"private void saveLayoutGroups(final List<LayoutGroup> layoutGroups,EntityManager em,HashMap<Object,Object> modelesReset,HashSet<Object> modelesImport,Authentication authentication){
  final HashSet<Integer> reportModelsId=new HashSet<Integer>();
  if (layoutGroups != null) {
    for (    LayoutGroup layoutGroup : layoutGroups) {
      final List<LayoutConstraint> layoutConstraints;
      if (layoutGroup != null)       layoutConstraints=layoutGroup.getConstraints();
 else       layoutConstraints=null;
      if (layoutConstraints != null) {
        for (        LayoutConstraint layoutConstraint : layoutConstraints) {
          if (layoutConstraint != null && layoutConstraint.getElement() != null) {
            if (em.contains(layoutConstraint.getElement())) {
              continue;
            }
            if (layoutConstraint.getElement() instanceof QuestionElement) {
              List<QuestionChoiceElement> questionChoiceElements=((QuestionElement)layoutConstraint.getElement()).getChoices();
              CategoryType type=((QuestionElement)layoutConstraint.getElement()).getCategoryType();
              if (questionChoiceElements != null || type != null) {
                FlexibleElement parent=(FlexibleElement)layoutConstraint.getElement();
                ((QuestionElement)parent).setChoices(null);
                ((QuestionElement)parent).setCategoryType(null);
                em.persist(parent);
                if (questionChoiceElements != null) {
                  for (                  QuestionChoiceElement questionChoiceElement : questionChoiceElements) {
                    if (questionChoiceElement != null) {
                      questionChoiceElement.setId(null);
                      questionChoiceElement.setParentQuestion((QuestionElement)parent);
                      CategoryElement categoryElement=questionChoiceElement.getCategoryElement();
                      if (categoryElement != null) {
                        questionChoiceElement.setCategoryElement(null);
                        em.persist(questionChoiceElement);
                        saveProjectModelCategoryElement(categoryElement,em,modelesReset,modelesImport);
                        questionChoiceElement.setCategoryElement(categoryElement);
                        em.merge(questionChoiceElement);
                      }
 else {
                        em.persist(questionChoiceElement);
                      }
                    }
                  }
                  ((QuestionElement)parent).setChoices(questionChoiceElements);
                }
                if (type != null) {
                  if (em.find(CategoryType.class,type.getId()) == null) {
                    List<CategoryElement> typeElements=type.getElements();
                    if (typeElements != null) {
                      type.setElements(null);
                      em.merge(type);
                      for (                      CategoryElement element : typeElements) {
                        if (em.find(CategoryElement.class,element.getId()) == null) {
                          element.setParentType(type);
                          saveProjectModelCategoryElement(element,em,modelesReset,modelesImport);
                        }
                      }
                      type.setElements(typeElements);
                      em.merge(type);
                    }
                  }
                  ((QuestionElement)parent).setCategoryType(type);
                }
                em.merge(parent);
              }
 else {
                em.persist(layoutConstraint.getElement());
              }
            }
 else             if (layoutConstraint.getElement() instanceof ReportElement) {
              final ReportElement element=(ReportElement)layoutConstraint.getElement();
              final ProjectReportModel oldModel=element.getModel();
              if (oldModel != null) {
                final int oldModelId=oldModel.getId();
                final ProjectReportModel newModel;
                if (!reportModelsId.contains(oldModelId)) {
                  oldModel.resetImport(new HashMap<Object,Object>(),new HashSet<Object>());
                  oldModel.setOrganization(authentication.getUser().getOrganization());
                  newModel=oldModel;
                  ProjectReportModelHandler.saveProjectReportModelElement(newModel,em);
                  em.persist(newModel);
                  element.setModel(newModel);
                  em.persist(element);
                  reportModelsId.add(element.getModel().getId());
                }
 else {
                  newModel=em.find(ProjectReportModel.class,oldModelId);
                  element.setModel(newModel);
                  em.persist(element);
                }
              }
            }
 else             if (layoutConstraint.getElement() instanceof ReportListElement) {
              final ReportListElement element=(ReportListElement)layoutConstraint.getElement();
              final ProjectReportModel oldModel=element.getModel();
              if (oldModel != null) {
                final int oldModelId=oldModel.getId();
                final ProjectReportModel newModel;
                if (!reportModelsId.contains(oldModelId)) {
                  oldModel.resetImport(new HashMap<Object,Object>(),new HashSet<Object>());
                  oldModel.setOrganization(authentication.getUser().getOrganization());
                  newModel=oldModel;
                  em.persist(element);
                  reportModelsId.add(element.getModel().getId());
                }
 else {
                  newModel=em.find(ProjectReportModel.class,oldModelId);
                  element.setModel(newModel);
                  em.persist(element);
                }
              }
            }
 else {
              em.persist(layoutConstraint.getElement());
            }
          }
        }
      }
    }
  }
}","private void saveLayoutGroups(final List<LayoutGroup> layoutGroups,EntityManager em,HashMap<Object,Object> modelesReset,HashSet<Object> modelesImport,Authentication authentication){
  final HashSet<Integer> reportModelsId=new HashSet<Integer>();
  if (layoutGroups != null) {
    for (    LayoutGroup layoutGroup : layoutGroups) {
      final List<LayoutConstraint> layoutConstraints;
      if (layoutGroup != null)       layoutConstraints=layoutGroup.getConstraints();
 else       layoutConstraints=null;
      if (layoutConstraints != null) {
        for (        LayoutConstraint layoutConstraint : layoutConstraints) {
          if (layoutConstraint != null && layoutConstraint.getElement() != null) {
            if (em.contains(layoutConstraint.getElement())) {
              continue;
            }
            if (layoutConstraint.getElement() instanceof QuestionElement) {
              List<QuestionChoiceElement> questionChoiceElements=((QuestionElement)layoutConstraint.getElement()).getChoices();
              CategoryType type=((QuestionElement)layoutConstraint.getElement()).getCategoryType();
              if (questionChoiceElements != null || type != null) {
                FlexibleElement parent=(FlexibleElement)layoutConstraint.getElement();
                ((QuestionElement)parent).setChoices(null);
                ((QuestionElement)parent).setCategoryType(null);
                em.persist(parent);
                if (questionChoiceElements != null) {
                  for (                  QuestionChoiceElement questionChoiceElement : questionChoiceElements) {
                    if (questionChoiceElement != null) {
                      questionChoiceElement.setId(null);
                      questionChoiceElement.setParentQuestion((QuestionElement)parent);
                      CategoryElement categoryElement=questionChoiceElement.getCategoryElement();
                      if (categoryElement != null) {
                        questionChoiceElement.setCategoryElement(null);
                        em.persist(questionChoiceElement);
                        saveProjectModelCategoryElement(categoryElement,em,modelesReset,modelesImport);
                        questionChoiceElement.setCategoryElement(categoryElement);
                        em.merge(questionChoiceElement);
                      }
 else {
                        em.persist(questionChoiceElement);
                      }
                    }
                  }
                  ((QuestionElement)parent).setChoices(questionChoiceElements);
                }
                if (type != null) {
                  if (em.find(CategoryType.class,type.getId()) == null) {
                    List<CategoryElement> typeElements=type.getElements();
                    if (typeElements != null) {
                      type.setElements(null);
                      em.merge(type);
                      for (                      CategoryElement element : typeElements) {
                        if (em.find(CategoryElement.class,element.getId()) == null) {
                          element.setParentType(type);
                          saveProjectModelCategoryElement(element,em,modelesReset,modelesImport);
                        }
                      }
                      type.setElements(typeElements);
                      em.merge(type);
                    }
                  }
                  ((QuestionElement)parent).setCategoryType(type);
                }
                em.merge(parent);
              }
 else {
                em.persist(layoutConstraint.getElement());
              }
            }
 else             if (layoutConstraint.getElement() instanceof ReportElement) {
              final ReportElement element=(ReportElement)layoutConstraint.getElement();
              final ProjectReportModel oldModel=element.getModel();
              if (oldModel != null) {
                final int oldModelId=oldModel.getId();
                final ProjectReportModel newModel;
                if (!reportModelsId.contains(oldModelId)) {
                  oldModel.resetImport(new HashMap<Object,Object>(),new HashSet<Object>());
                  oldModel.setOrganization(authentication.getUser().getOrganization());
                  newModel=oldModel;
                  ProjectReportModelHandler.saveProjectReportModelElement(newModel,em);
                  em.persist(newModel);
                  element.setModel(newModel);
                  em.persist(element);
                  reportModelsId.add(element.getModel().getId());
                }
 else {
                  newModel=em.find(ProjectReportModel.class,oldModelId);
                  element.setModel(newModel);
                  em.persist(element);
                }
              }
            }
 else             if (layoutConstraint.getElement() instanceof ReportListElement) {
              final ReportListElement element=(ReportListElement)layoutConstraint.getElement();
              final ProjectReportModel oldModel=element.getModel();
              if (oldModel != null) {
                final int oldModelId=oldModel.getId();
                final ProjectReportModel newModel;
                if (!reportModelsId.contains(oldModelId)) {
                  oldModel.resetImport(new HashMap<Object,Object>(),new HashSet<Object>());
                  oldModel.setOrganization(authentication.getUser().getOrganization());
                  newModel=oldModel;
                  ProjectReportModelHandler.saveProjectReportModelElement(newModel,em);
                  em.persist(newModel);
                  element.setModel(newModel);
                  em.persist(element);
                  reportModelsId.add(element.getModel().getId());
                }
 else {
                  newModel=em.find(ProjectReportModel.class,oldModelId);
                  element.setModel(newModel);
                  em.persist(element);
                }
              }
            }
 else {
              em.persist(layoutConstraint.getElement());
            }
          }
        }
      }
    }
  }
}",0.9539867109634552
35623,"/** 
 * Adds an activity row.
 * @param result The expected result. Must not be <code>null</code>.
 */
private void addExpectedResult(final ExpectedResultDTO result){
  if (result == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  final LogFrameGroupDTO group=result.getGroup();
  @SuppressWarnings(""String_Node_Str"") RowsGroup<LogFrameGroupDTO> g=(RowsGroup<LogFrameGroupDTO>)expectedResultsView.getGroup(group.getClientSideId());
  if (g == null) {
    g=addExpectedResultsGroup(group);
  }
  final StringBuilder sb=new StringBuilder();
  sb.append(I18N.CONSTANTS.logFrameExceptedResultsCode());
  sb.append(""String_Node_Str"");
  sb.append(result.getFormattedCode());
  result.setLabel(sb.toString());
  if (result.getPosition() == null) {
    result.setPosition(g.getRowsCount() + 1);
  }
  expectedResultsView.insertRow(result.getPosition(),group.getClientSideId(),new Row<ExpectedResultDTO>(result){
    @Override public boolean isSimilar(    int column,    ExpectedResultDTO userObject,    ExpectedResultDTO other){
switch (column) {
case 0:
        return userObject.getParentSpecificObjective() != null && other.getParentSpecificObjective() != null && userObject.getParentSpecificObjective().getCode() == other.getParentSpecificObjective().getCode();
    }
    return false;
  }
  @Override public Widget getWidgetAt(  int column,  final ExpectedResultDTO userObject){
switch (column) {
case 0:
      final Label parentCodeLabel=new Label();
    parentCodeLabel.addStyleName(CSS_CODE_LABEL_STYLE_NAME);
  final SpecificObjectiveDTO parent;
if (userObject != null && (parent=userObject.getParentSpecificObjective()) != null) {
  final StringBuilder sb=new StringBuilder();
  sb.append(I18N.CONSTANTS.logFrameExceptedResultsCode());
  sb.append(""String_Node_Str"");
  sb.append(I18N.CONSTANTS.logFrameSpecificObjectivesCode());
  sb.append(""String_Node_Str"");
  sb.append(parent.getFormattedCode());
  sb.append(""String_Node_Str"");
  parentCodeLabel.setText(sb.toString());
}
return parentCodeLabel;
case 1:
final Label codeLabel=new Label();
codeLabel.addStyleName(CSS_CODE_LABEL_STYLE_NAME);
if (userObject != null) {
codeLabel.setText(userObject.getLabel());
}
final Grid grid=new Grid(1,2);
grid.setCellPadding(0);
grid.setCellSpacing(0);
grid.setWidget(0,0,codeLabel);
if (!readOnly) {
grid.setWidget(0,1,buildExpectedResultMenu(this,codeLabel));
}
return grid;
case 2:
final TextArea interventionLogicTextBox=new TextArea();
interventionLogicTextBox.setWidth(""String_Node_Str"");
interventionLogicTextBox.setHeight(""String_Node_Str"");
interventionLogicTextBox.setVisibleLines(3);
interventionLogicTextBox.addStyleName(""String_Node_Str"");
interventionLogicTextBox.setEnabled(!readOnly);
if (userObject != null) {
interventionLogicTextBox.setText(userObject.getInterventionLogic());
}
interventionLogicTextBox.addChangeHandler(new ChangeHandler(){
@Override public void onChange(ChangeEvent e){
userObject.setInterventionLogic(interventionLogicTextBox.getText());
fireLogFrameEdited();
}
}
);
return interventionLogicTextBox;
case 3:
return new IndicatorListWidget(eventBus,dispatcher,databaseId,result);
case 4:
final TextArea risksTextBox=new TextArea();
risksTextBox.setWidth(""String_Node_Str"");
risksTextBox.setHeight(""String_Node_Str"");
risksTextBox.setVisibleLines(3);
risksTextBox.addStyleName(""String_Node_Str"");
risksTextBox.setEnabled(!readOnly);
if (userObject != null) {
risksTextBox.setText(userObject.getRisks());
}
risksTextBox.addChangeHandler(new ChangeHandler(){
@Override public void onChange(ChangeEvent e){
userObject.setRisks(risksTextBox.getText());
fireLogFrameEdited();
}
}
);
return risksTextBox;
case 5:
final TextArea assumptionsTextBox=new TextArea();
assumptionsTextBox.setWidth(""String_Node_Str"");
assumptionsTextBox.setHeight(""String_Node_Str"");
assumptionsTextBox.setVisibleLines(3);
assumptionsTextBox.addStyleName(""String_Node_Str"");
assumptionsTextBox.setEnabled(!readOnly);
if (userObject != null) {
assumptionsTextBox.setText(userObject.getAssumptions());
}
assumptionsTextBox.addChangeHandler(new ChangeHandler(){
@Override public void onChange(ChangeEvent e){
userObject.setAssumptions(assumptionsTextBox.getText());
fireLogFrameEdited();
}
}
);
return assumptionsTextBox;
default :
return null;
}
}
@Override public int getId(ExpectedResultDTO userObject){
return userObject.getClientSideId();
}
}
);
fireLogFrameEdited();
for (final LogFrameActivityDTO activity : result.getActivities()) {
addActivity(activity);
}
}","/** 
 * Adds an activity row.
 * @param result The expected result. Must not be <code>null</code>.
 */
private void addExpectedResult(final ExpectedResultDTO result){
  if (result == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  final LogFrameGroupDTO group=result.getGroup();
  @SuppressWarnings(""String_Node_Str"") RowsGroup<LogFrameGroupDTO> g=(RowsGroup<LogFrameGroupDTO>)expectedResultsView.getGroup(group.getClientSideId());
  if (g == null) {
    g=addExpectedResultsGroup(group);
  }
  final StringBuilder sb=new StringBuilder();
  sb.append(I18N.CONSTANTS.logFrameExceptedResultsCode());
  sb.append(""String_Node_Str"");
  sb.append(result.getFormattedCode());
  result.setLabel(sb.toString());
  if (result.getPosition() == null) {
    result.setPosition(g.getRowsCount() + 1);
  }
  expectedResultsView.insertRow(result.getPosition(),group.getClientSideId(),new Row<ExpectedResultDTO>(result){
    @Override public boolean isSimilar(    int column,    ExpectedResultDTO userObject,    ExpectedResultDTO other){
switch (column) {
case 0:
        return userObject.getParentSpecificObjective() != null && other.getParentSpecificObjective() != null && userObject.getParentSpecificObjective().getCode() == other.getParentSpecificObjective().getCode();
    }
    return false;
  }
  @Override public Widget getWidgetAt(  int column,  final ExpectedResultDTO userObject){
switch (column) {
case 0:
      final Label parentCodeLabel=new Label();
    parentCodeLabel.addStyleName(CSS_CODE_LABEL_STYLE_NAME);
  final SpecificObjectiveDTO parent;
if (userObject != null && (parent=userObject.getParentSpecificObjective()) != null) {
  final StringBuilder sb=new StringBuilder();
  sb.append(I18N.CONSTANTS.logFrameExceptedResultsCode());
  sb.append(""String_Node_Str"");
  sb.append(I18N.CONSTANTS.logFrameSpecificObjectivesCode());
  sb.append(""String_Node_Str"");
  sb.append(parent.getFormattedCode());
  sb.append(""String_Node_Str"");
  parentCodeLabel.setText(sb.toString());
}
return parentCodeLabel;
case 1:
final Label codeLabel=new Label();
codeLabel.addStyleName(CSS_CODE_LABEL_STYLE_NAME);
if (userObject != null) {
codeLabel.setText(userObject.getLabel());
}
final Grid grid=new Grid(1,2);
grid.setCellPadding(0);
grid.setCellSpacing(0);
grid.setWidget(0,0,codeLabel);
if (!readOnly) {
grid.setWidget(0,1,buildExpectedResultMenu(this,codeLabel));
}
return grid;
case 2:
final TextArea interventionLogicTextBox=new TextArea();
interventionLogicTextBox.setWidth(""String_Node_Str"");
interventionLogicTextBox.setHeight(""String_Node_Str"");
interventionLogicTextBox.setVisibleLines(3);
interventionLogicTextBox.addStyleName(""String_Node_Str"");
interventionLogicTextBox.setEnabled(!readOnly);
if (userObject != null) {
interventionLogicTextBox.setText(userObject.getInterventionLogic());
}
interventionLogicTextBox.addChangeHandler(new ChangeHandler(){
@Override public void onChange(ChangeEvent e){
userObject.setInterventionLogic(interventionLogicTextBox.getText());
fireLogFrameEdited();
}
}
);
return interventionLogicTextBox;
case 3:
IndicatorListWidget indicatorListWidget=new IndicatorListWidget(eventBus,dispatcher,databaseId,result);
indicatorListWidget.addValueChangeHandler(new ValueChangeHandler<Void>(){
@Override public void onValueChange(ValueChangeEvent<Void> event){
fireLogFrameEdited();
}
}
);
return indicatorListWidget;
case 4:
final TextArea risksTextBox=new TextArea();
risksTextBox.setWidth(""String_Node_Str"");
risksTextBox.setHeight(""String_Node_Str"");
risksTextBox.setVisibleLines(3);
risksTextBox.addStyleName(""String_Node_Str"");
risksTextBox.setEnabled(!readOnly);
if (userObject != null) {
risksTextBox.setText(userObject.getRisks());
}
risksTextBox.addChangeHandler(new ChangeHandler(){
@Override public void onChange(ChangeEvent e){
userObject.setRisks(risksTextBox.getText());
fireLogFrameEdited();
}
}
);
return risksTextBox;
case 5:
final TextArea assumptionsTextBox=new TextArea();
assumptionsTextBox.setWidth(""String_Node_Str"");
assumptionsTextBox.setHeight(""String_Node_Str"");
assumptionsTextBox.setVisibleLines(3);
assumptionsTextBox.addStyleName(""String_Node_Str"");
assumptionsTextBox.setEnabled(!readOnly);
if (userObject != null) {
assumptionsTextBox.setText(userObject.getAssumptions());
}
assumptionsTextBox.addChangeHandler(new ChangeHandler(){
@Override public void onChange(ChangeEvent e){
userObject.setAssumptions(assumptionsTextBox.getText());
fireLogFrameEdited();
}
}
);
return assumptionsTextBox;
default :
return null;
}
}
@Override public int getId(ExpectedResultDTO userObject){
return userObject.getClientSideId();
}
}
);
fireLogFrameEdited();
for (final LogFrameActivityDTO activity : result.getActivities()) {
addActivity(activity);
}
}",0.973384030418251
35624,"/** 
 * Adds an activity row.
 * @param activity The activity. Must not be <code>null</code>.
 */
private void addActivity(final LogFrameActivityDTO activity){
  if (activity == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  final LogFrameGroupDTO group=activity.getGroup();
  @SuppressWarnings(""String_Node_Str"") RowsGroup<LogFrameGroupDTO> g=(RowsGroup<LogFrameGroupDTO>)activitiesView.getGroup(group.getClientSideId());
  if (g == null) {
    g=addActivitiesGroup(group);
  }
  final StringBuilder sb=new StringBuilder();
  sb.append(I18N.CONSTANTS.logFrameActivitiesCode());
  sb.append(""String_Node_Str"");
  sb.append(activity.getFormattedCode());
  activity.setLabel(sb.toString());
  if (activity.getPosition() == null) {
    activity.setPosition(g.getRowsCount() + 1);
  }
  activitiesView.insertRow(activity.getPosition(),group.getClientSideId(),new Row<LogFrameActivityDTO>(activity){
    @Override public boolean isSimilar(    int column,    LogFrameActivityDTO userObject,    LogFrameActivityDTO other){
switch (column) {
case 0:
        return userObject.getParentExpectedResult() != null && other.getParentExpectedResult() != null && userObject.getParentExpectedResult().getCode() == other.getParentExpectedResult().getCode();
    }
    return false;
  }
  @Override public Widget getWidgetAt(  int column,  final LogFrameActivityDTO userObject){
switch (column) {
case 0:
      final Label parentCodeLabel=new Label();
    parentCodeLabel.addStyleName(CSS_CODE_LABEL_STYLE_NAME);
  final ExpectedResultDTO parent;
if (userObject != null && (parent=userObject.getParentExpectedResult()) != null) {
  final StringBuilder sb=new StringBuilder();
  sb.append(I18N.CONSTANTS.logFrameActivitiesCode());
  sb.append(""String_Node_Str"");
  sb.append(I18N.CONSTANTS.logFrameExceptedResultsCode());
  sb.append(""String_Node_Str"");
  sb.append(parent.getFormattedCode());
  sb.append(""String_Node_Str"");
  parentCodeLabel.setText(sb.toString());
}
return parentCodeLabel;
case 1:
final Label codeLabel=new Label();
codeLabel.addStyleName(CSS_CODE_LABEL_STYLE_NAME);
if (userObject != null) {
codeLabel.setText(userObject.getLabel());
}
final Grid grid=new Grid(1,2);
grid.setCellPadding(0);
grid.setCellSpacing(0);
grid.setWidget(0,0,codeLabel);
if (!readOnly) {
grid.setWidget(0,1,buildActivityMenu(this,codeLabel));
}
return grid;
case 2:
final TextArea contentTextBox=new TextArea();
contentTextBox.setWidth(""String_Node_Str"");
contentTextBox.setHeight(""String_Node_Str"");
contentTextBox.setVisibleLines(2);
contentTextBox.addStyleName(""String_Node_Str"");
contentTextBox.setEnabled(!readOnly);
if (userObject != null) {
contentTextBox.setText(userObject.getTitle());
}
contentTextBox.addChangeHandler(new ChangeHandler(){
@Override public void onChange(ChangeEvent e){
userObject.setTitle(contentTextBox.getText());
fireLogFrameEdited();
}
}
);
return contentTextBox;
case 3:
return new IndicatorListWidget(eventBus,dispatcher,databaseId,userObject);
case 4:
return new Label();
case 5:
return new Label();
default :
return null;
}
}
@Override public int getId(LogFrameActivityDTO userObject){
return userObject.getClientSideId();
}
}
);
fireLogFrameEdited();
}","/** 
 * Adds an activity row.
 * @param activity The activity. Must not be <code>null</code>.
 */
private void addActivity(final LogFrameActivityDTO activity){
  if (activity == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  final LogFrameGroupDTO group=activity.getGroup();
  @SuppressWarnings(""String_Node_Str"") RowsGroup<LogFrameGroupDTO> g=(RowsGroup<LogFrameGroupDTO>)activitiesView.getGroup(group.getClientSideId());
  if (g == null) {
    g=addActivitiesGroup(group);
  }
  final StringBuilder sb=new StringBuilder();
  sb.append(I18N.CONSTANTS.logFrameActivitiesCode());
  sb.append(""String_Node_Str"");
  sb.append(activity.getFormattedCode());
  activity.setLabel(sb.toString());
  if (activity.getPosition() == null) {
    activity.setPosition(g.getRowsCount() + 1);
  }
  activitiesView.insertRow(activity.getPosition(),group.getClientSideId(),new Row<LogFrameActivityDTO>(activity){
    @Override public boolean isSimilar(    int column,    LogFrameActivityDTO userObject,    LogFrameActivityDTO other){
switch (column) {
case 0:
        return userObject.getParentExpectedResult() != null && other.getParentExpectedResult() != null && userObject.getParentExpectedResult().getCode() == other.getParentExpectedResult().getCode();
    }
    return false;
  }
  @Override public Widget getWidgetAt(  int column,  final LogFrameActivityDTO userObject){
switch (column) {
case 0:
      final Label parentCodeLabel=new Label();
    parentCodeLabel.addStyleName(CSS_CODE_LABEL_STYLE_NAME);
  final ExpectedResultDTO parent;
if (userObject != null && (parent=userObject.getParentExpectedResult()) != null) {
  final StringBuilder sb=new StringBuilder();
  sb.append(I18N.CONSTANTS.logFrameActivitiesCode());
  sb.append(""String_Node_Str"");
  sb.append(I18N.CONSTANTS.logFrameExceptedResultsCode());
  sb.append(""String_Node_Str"");
  sb.append(parent.getFormattedCode());
  sb.append(""String_Node_Str"");
  parentCodeLabel.setText(sb.toString());
}
return parentCodeLabel;
case 1:
final Label codeLabel=new Label();
codeLabel.addStyleName(CSS_CODE_LABEL_STYLE_NAME);
if (userObject != null) {
codeLabel.setText(userObject.getLabel());
}
final Grid grid=new Grid(1,2);
grid.setCellPadding(0);
grid.setCellSpacing(0);
grid.setWidget(0,0,codeLabel);
if (!readOnly) {
grid.setWidget(0,1,buildActivityMenu(this,codeLabel));
}
return grid;
case 2:
final TextArea contentTextBox=new TextArea();
contentTextBox.setWidth(""String_Node_Str"");
contentTextBox.setHeight(""String_Node_Str"");
contentTextBox.setVisibleLines(2);
contentTextBox.addStyleName(""String_Node_Str"");
contentTextBox.setEnabled(!readOnly);
if (userObject != null) {
contentTextBox.setText(userObject.getTitle());
}
contentTextBox.addChangeHandler(new ChangeHandler(){
@Override public void onChange(ChangeEvent e){
userObject.setTitle(contentTextBox.getText());
fireLogFrameEdited();
}
}
);
return contentTextBox;
case 3:
IndicatorListWidget indicatorListWidget=new IndicatorListWidget(eventBus,dispatcher,databaseId,userObject);
indicatorListWidget.addValueChangeHandler(new ValueChangeHandler<Void>(){
@Override public void onValueChange(ValueChangeEvent<Void> event){
fireLogFrameEdited();
}
}
);
return indicatorListWidget;
case 4:
return new Label();
case 5:
return new Label();
default :
return null;
}
}
@Override public int getId(LogFrameActivityDTO userObject){
return userObject.getClientSideId();
}
}
);
fireLogFrameEdited();
}",0.962929338780451
35625,"/** 
 * Adds a specific objective row.
 * @param specificObjective The specific objective. Must not be <code>null</code>.
 */
private void addSpecificObjective(final SpecificObjectiveDTO specificObjective){
  if (specificObjective == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  final LogFrameGroupDTO logFrameGroup=specificObjective.getGroup();
  @SuppressWarnings(""String_Node_Str"") RowsGroup<LogFrameGroupDTO> g=(RowsGroup<LogFrameGroupDTO>)specificObjectivesView.getGroup(logFrameGroup.getClientSideId());
  if (g == null) {
    g=addSpecificObjectivesGroup(logFrameGroup);
  }
  final StringBuilder sb=new StringBuilder();
  sb.append(I18N.CONSTANTS.logFrameSpecificObjectivesCode());
  sb.append(""String_Node_Str"");
  sb.append(specificObjective.getFormattedCode());
  specificObjective.setLabel(sb.toString());
  if (specificObjective.getPosition() == null) {
    specificObjective.setPosition(g.getRowsCount() + 1);
  }
  specificObjectivesView.insertRow(specificObjective.getPosition(),logFrameGroup.getClientSideId(),new Row<SpecificObjectiveDTO>(specificObjective){
    @Override public boolean isSimilar(    int column,    SpecificObjectiveDTO userObject,    SpecificObjectiveDTO other){
switch (column) {
case 1:
        return userObject.getCode() == other.getCode();
    }
    return false;
  }
  @Override public Widget getWidgetAt(  int column,  final SpecificObjectiveDTO userObject){
switch (column) {
case 0:
      return null;
case 1:
    final Label codeLabel=new Label();
  codeLabel.addStyleName(CSS_CODE_LABEL_STYLE_NAME);
if (userObject != null) {
  codeLabel.setText(userObject.getLabel());
}
final Grid grid=new Grid(1,2);
grid.setCellPadding(0);
grid.setCellSpacing(0);
grid.setWidget(0,0,codeLabel);
if (!readOnly) {
grid.setWidget(0,1,buildSpecificObjectiveMenu(this,codeLabel));
}
return grid;
case 2:
final TextArea interventionLogicTextBox=new TextArea();
interventionLogicTextBox.setWidth(""String_Node_Str"");
interventionLogicTextBox.setHeight(""String_Node_Str"");
interventionLogicTextBox.setVisibleLines(3);
interventionLogicTextBox.addStyleName(""String_Node_Str"");
interventionLogicTextBox.setEnabled(!readOnly);
if (userObject != null) {
interventionLogicTextBox.setText(userObject.getInterventionLogic());
}
interventionLogicTextBox.addChangeHandler(new ChangeHandler(){
@Override public void onChange(ChangeEvent e){
userObject.setInterventionLogic(interventionLogicTextBox.getText());
fireLogFrameEdited();
}
}
);
return interventionLogicTextBox;
case 3:
return new IndicatorListWidget(eventBus,dispatcher,databaseId,specificObjective);
case 4:
final TextArea risksTextBox=new TextArea();
risksTextBox.setWidth(""String_Node_Str"");
risksTextBox.setHeight(""String_Node_Str"");
risksTextBox.setVisibleLines(3);
risksTextBox.addStyleName(""String_Node_Str"");
risksTextBox.setEnabled(!readOnly);
if (userObject != null) {
risksTextBox.setText(userObject.getRisks());
}
risksTextBox.addChangeHandler(new ChangeHandler(){
@Override public void onChange(ChangeEvent e){
userObject.setRisks(risksTextBox.getText());
fireLogFrameEdited();
}
}
);
return risksTextBox;
case 5:
final TextArea assumptionsTextBox=new TextArea();
assumptionsTextBox.setWidth(""String_Node_Str"");
assumptionsTextBox.setHeight(""String_Node_Str"");
assumptionsTextBox.setVisibleLines(3);
assumptionsTextBox.addStyleName(""String_Node_Str"");
assumptionsTextBox.setEnabled(!readOnly);
if (userObject != null) {
assumptionsTextBox.setText(userObject.getAssumptions());
}
assumptionsTextBox.addChangeHandler(new ChangeHandler(){
@Override public void onChange(ChangeEvent e){
userObject.setAssumptions(assumptionsTextBox.getText());
fireLogFrameEdited();
}
}
);
return assumptionsTextBox;
default :
return null;
}
}
@Override public int getId(SpecificObjectiveDTO userObject){
return userObject.getClientSideId();
}
}
);
fireLogFrameEdited();
for (final ExpectedResultDTO result : specificObjective.getExpectedResults()) {
addExpectedResult(result);
}
}","/** 
 * Adds a specific objective row.
 * @param specificObjective The specific objective. Must not be <code>null</code>.
 */
private void addSpecificObjective(final SpecificObjectiveDTO specificObjective){
  if (specificObjective == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  final LogFrameGroupDTO logFrameGroup=specificObjective.getGroup();
  @SuppressWarnings(""String_Node_Str"") RowsGroup<LogFrameGroupDTO> g=(RowsGroup<LogFrameGroupDTO>)specificObjectivesView.getGroup(logFrameGroup.getClientSideId());
  if (g == null) {
    g=addSpecificObjectivesGroup(logFrameGroup);
  }
  final StringBuilder sb=new StringBuilder();
  sb.append(I18N.CONSTANTS.logFrameSpecificObjectivesCode());
  sb.append(""String_Node_Str"");
  sb.append(specificObjective.getFormattedCode());
  specificObjective.setLabel(sb.toString());
  if (specificObjective.getPosition() == null) {
    specificObjective.setPosition(g.getRowsCount() + 1);
  }
  specificObjectivesView.insertRow(specificObjective.getPosition(),logFrameGroup.getClientSideId(),new Row<SpecificObjectiveDTO>(specificObjective){
    @Override public boolean isSimilar(    int column,    SpecificObjectiveDTO userObject,    SpecificObjectiveDTO other){
switch (column) {
case 1:
        return userObject.getCode() == other.getCode();
    }
    return false;
  }
  @Override public Widget getWidgetAt(  int column,  final SpecificObjectiveDTO userObject){
switch (column) {
case 0:
      return null;
case 1:
    final Label codeLabel=new Label();
  codeLabel.addStyleName(CSS_CODE_LABEL_STYLE_NAME);
if (userObject != null) {
  codeLabel.setText(userObject.getLabel());
}
final Grid grid=new Grid(1,2);
grid.setCellPadding(0);
grid.setCellSpacing(0);
grid.setWidget(0,0,codeLabel);
if (!readOnly) {
grid.setWidget(0,1,buildSpecificObjectiveMenu(this,codeLabel));
}
return grid;
case 2:
final TextArea interventionLogicTextBox=new TextArea();
interventionLogicTextBox.setWidth(""String_Node_Str"");
interventionLogicTextBox.setHeight(""String_Node_Str"");
interventionLogicTextBox.setVisibleLines(3);
interventionLogicTextBox.addStyleName(""String_Node_Str"");
interventionLogicTextBox.setEnabled(!readOnly);
if (userObject != null) {
interventionLogicTextBox.setText(userObject.getInterventionLogic());
}
interventionLogicTextBox.addChangeHandler(new ChangeHandler(){
@Override public void onChange(ChangeEvent e){
userObject.setInterventionLogic(interventionLogicTextBox.getText());
fireLogFrameEdited();
}
}
);
return interventionLogicTextBox;
case 3:
IndicatorListWidget indicatorListWidget=new IndicatorListWidget(eventBus,dispatcher,databaseId,specificObjective);
indicatorListWidget.addValueChangeHandler(new ValueChangeHandler<Void>(){
@Override public void onValueChange(ValueChangeEvent<Void> event){
fireLogFrameEdited();
}
}
);
return indicatorListWidget;
case 4:
final TextArea risksTextBox=new TextArea();
risksTextBox.setWidth(""String_Node_Str"");
risksTextBox.setHeight(""String_Node_Str"");
risksTextBox.setVisibleLines(3);
risksTextBox.addStyleName(""String_Node_Str"");
risksTextBox.setEnabled(!readOnly);
if (userObject != null) {
risksTextBox.setText(userObject.getRisks());
}
risksTextBox.addChangeHandler(new ChangeHandler(){
@Override public void onChange(ChangeEvent e){
userObject.setRisks(risksTextBox.getText());
fireLogFrameEdited();
}
}
);
return risksTextBox;
case 5:
final TextArea assumptionsTextBox=new TextArea();
assumptionsTextBox.setWidth(""String_Node_Str"");
assumptionsTextBox.setHeight(""String_Node_Str"");
assumptionsTextBox.setVisibleLines(3);
assumptionsTextBox.addStyleName(""String_Node_Str"");
assumptionsTextBox.setEnabled(!readOnly);
if (userObject != null) {
assumptionsTextBox.setText(userObject.getAssumptions());
}
assumptionsTextBox.addChangeHandler(new ChangeHandler(){
@Override public void onChange(ChangeEvent e){
userObject.setAssumptions(assumptionsTextBox.getText());
fireLogFrameEdited();
}
}
);
return assumptionsTextBox;
default :
return null;
}
}
@Override public int getId(SpecificObjectiveDTO userObject){
return userObject.getClientSideId();
}
}
);
fireLogFrameEdited();
for (final ExpectedResultDTO result : specificObjective.getExpectedResults()) {
addExpectedResult(result);
}
}",0.9700452378041324
35626,"@UiHandler(""String_Node_Str"") void onClick(ClickEvent e){
  final IndicatorDTO newIndicator=new IndicatorDTO();
  newIndicator.setCollectIntervention(true);
  newIndicator.setAggregation(IndicatorDTO.AGGREGATE_SUM);
  newIndicator.setDatabaseId(databaseId);
  newIndicator.setCategory((element.getFormattedCode() + ""String_Node_Str"" + element.getDescription()).trim());
  showDialog(newIndicator,new FormDialogCallback(){
    @Override public void onValidated(    FormDialogTether dlg){
      dlg.hide();
      element.getIndicators().add(newIndicator);
      indicatorList.getStore().add(newIndicator);
    }
  }
);
}","@UiHandler(""String_Node_Str"") void onClick(ClickEvent e){
  final IndicatorDTO newIndicator=new IndicatorDTO();
  newIndicator.setCollectIntervention(true);
  newIndicator.setAggregation(IndicatorDTO.AGGREGATE_SUM);
  newIndicator.setDatabaseId(databaseId);
  newIndicator.setCategory((element.getFormattedCode() + ""String_Node_Str"" + element.getDescription()).trim());
  showDialog(newIndicator,new FormDialogCallback(){
    @Override public void onValidated(    FormDialogTether dlg){
      dispatcher.execute(new CreateEntity(newIndicator),dialog,new AsyncCallback<CreateResult>(){
        @Override public void onFailure(        Throwable caught){
        }
        @Override public void onSuccess(        CreateResult result){
          newIndicator.setId(result.getNewId());
          dialog.hide();
          element.getIndicators().add(newIndicator);
          indicatorList.getStore().add(newIndicator);
          ValueChangeEvent.fire(IndicatorListWidget.this,null);
        }
      }
);
    }
  }
);
}",0.7460122699386503
35627,"private void onIndicatorClicked(IndicatorDTO model){
  showDialog(model,new FormDialogCallback(){
    @Override public void onValidated(    FormDialogTether dlg){
      dlg.hide();
      indicatorList.refresh();
    }
  }
);
}","private void onIndicatorClicked(final IndicatorDTO model){
  showDialog(model,new FormDialogCallback(){
    @Override public void onValidated(    FormDialogTether dlg){
      dispatcher.execute(new UpdateEntity(model,model.getProperties()),dialog,new AsyncCallback<VoidResult>(){
        @Override public void onFailure(        Throwable caught){
        }
        @Override public void onSuccess(        VoidResult result){
          dialog.hide();
          indicatorList.refresh();
          ValueChangeEvent.fire(IndicatorListWidget.this,null);
        }
      }
);
    }
  }
);
}",0.5530864197530864
35628,"private void showDialog(IndicatorDTO indicator,FormDialogCallback callback){
  final IndicatorForm form=new IndicatorForm(dispatcher);
  form.getBinding().bind(indicator);
  form.setIdVisible(false);
  form.setGroupVisible(false);
  final FormDialogImpl<IndicatorForm> dialog=new FormDialogImpl<IndicatorForm>(form);
  dialog.setHeading(indicator.getName() == null ? I18N.CONSTANTS.newIndicator() : indicator.getName());
  dialog.setWidth(form.getPreferredDialogWidth());
  dialog.setHeight(form.getPreferredDialogHeight());
  dialog.setScrollMode(Scroll.AUTOY);
  dialog.show(callback);
}","private void showDialog(IndicatorDTO indicator,FormDialogCallback callback){
  final IndicatorForm form=new IndicatorForm(dispatcher);
  form.getBinding().bind(indicator);
  form.setIdVisible(false);
  form.setGroupVisible(false);
  dialog=new FormDialogImpl<IndicatorForm>(form);
  dialog.setHeading(indicator.getName() == null ? I18N.CONSTANTS.newIndicator() : indicator.getName());
  dialog.setWidth(form.getPreferredDialogWidth());
  dialog.setHeight(form.getPreferredDialogHeight());
  dialog.setScrollMode(Scroll.AUTOY);
  dialog.show(callback);
}",0.968476357267951
35629,"@Override public void handleEvent(IndicatorEvent event){
  onIndicatorChanged(event);
}","@Override public void handleEvent(IndicatorEvent event){
  onIndicatorChangedExternally(event);
}",0.9456521739130436
35630,"public IndicatorListWidget(EventBus eventBus,Dispatcher dispatcher,int databaseId,LogFrameElementDTO element){
  this.dispatcher=dispatcher;
  this.databaseId=databaseId;
  this.element=element;
  initWidget(uiBinder.createAndBindUi(this));
  store=new ListStore<IndicatorDTO>();
  store.add(element.getIndicators());
  indicatorList.setTemplate(""String_Node_Str"" + style.indicator() + ""String_Node_Str""+ ""String_Node_Str""+ style.indicatorLabel()+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ style.sourceOfVerification()+ ""String_Node_Str""+ I18N.CONSTANTS.sourceOfVerification()+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  indicatorList.setStore(store);
  indicatorList.setBorders(false);
  indicatorList.setOverStyle(style.indicatorOver());
  indicatorList.setSelectStyle(style.indicatorSelected());
  indicatorList.setItemSelector(""String_Node_Str"" + style.indicator());
  indicatorList.addListener(Events.Select,new Listener<ListViewEvent<IndicatorDTO>>(){
    @Override public void handleEvent(    ListViewEvent<IndicatorDTO> be){
      onIndicatorClicked(be.getModel());
    }
  }
);
  new ListViewDragSource(indicatorList).setGroup(DRAG_AND_DROP_GROUP);
  new ListViewDropTarget(indicatorList).setGroup(DRAG_AND_DROP_GROUP);
  eventBus.addListener(IndicatorEvent.CHANGED,new Listener<IndicatorEvent>(){
    @Override public void handleEvent(    IndicatorEvent event){
      onIndicatorChanged(event);
    }
  }
);
}","public IndicatorListWidget(EventBus eventBus,Dispatcher dispatcher,int databaseId,LogFrameElementDTO element){
  this.dispatcher=dispatcher;
  this.databaseId=databaseId;
  this.element=element;
  initWidget(uiBinder.createAndBindUi(this));
  store=new ListStore<IndicatorDTO>();
  store.add(element.getIndicators());
  indicatorList.setTemplate(""String_Node_Str"" + style.indicator() + ""String_Node_Str""+ ""String_Node_Str""+ style.indicatorLabel()+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ style.sourceOfVerification()+ ""String_Node_Str""+ I18N.CONSTANTS.sourceOfVerification()+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  indicatorList.setStore(store);
  indicatorList.setBorders(false);
  indicatorList.setOverStyle(style.indicatorOver());
  indicatorList.setSelectStyle(style.indicatorSelected());
  indicatorList.setItemSelector(""String_Node_Str"" + style.indicator());
  indicatorList.addListener(Events.Select,new Listener<ListViewEvent<IndicatorDTO>>(){
    @Override public void handleEvent(    ListViewEvent<IndicatorDTO> be){
      onIndicatorClicked(be.getModel());
    }
  }
);
  new ListViewDragSource(indicatorList).setGroup(DRAG_AND_DROP_GROUP);
  new ListViewDropTarget(indicatorList).setGroup(DRAG_AND_DROP_GROUP);
  eventBus.addListener(IndicatorEvent.CHANGED,new Listener<IndicatorEvent>(){
    @Override public void handleEvent(    IndicatorEvent event){
      onIndicatorChangedExternally(event);
    }
  }
);
}",0.996565934065934
35631,"@Override public void onValidated(FormDialogTether dlg){
  dlg.hide();
  indicatorList.refresh();
}","@Override public void onValidated(FormDialogTether dlg){
  dispatcher.execute(new UpdateEntity(model,model.getProperties()),dialog,new AsyncCallback<VoidResult>(){
    @Override public void onFailure(    Throwable caught){
    }
    @Override public void onSuccess(    VoidResult result){
      dialog.hide();
      indicatorList.refresh();
      ValueChangeEvent.fire(IndicatorListWidget.this,null);
    }
  }
);
}",0.3813229571984435
35632,"@ManyToMany @JoinTable(name=""String_Node_Str"",joinColumns={@JoinColumn(name=""String_Node_Str"",nullable=false,updatable=false)},inverseJoinColumns={@JoinColumn(name=""String_Node_Str"",nullable=false,updatable=false)}) public Set<Indicator> getDataSources(){
  return dataSources;
}","@ManyToMany(cascade=CascadeType.ALL) @JoinTable(name=""String_Node_Str"",joinColumns={@JoinColumn(name=""String_Node_Str"",nullable=false,updatable=false)},inverseJoinColumns={@JoinColumn(name=""String_Node_Str"",nullable=false,updatable=false)}) public Set<Indicator> getDataSources(){
  return dataSources;
}",0.9571183533447684
35633,"public void addFunded(ProjectFundingDTO funded){
  if (funded == null) {
    return;
  }
  List<ProjectFundingDTO> fundeds=getFunding();
  if (fundeds == null) {
    fundeds=new ArrayList<ProjectFundingDTO>();
  }
  fundeds.remove(funded);
  fundeds.add(funded);
  setFunded(fundeds);
}","public void addFunded(ProjectFundingDTO funded){
  if (funded == null) {
    return;
  }
  List<ProjectFundingDTO> fundeds=getFunded();
  if (fundeds == null) {
    fundeds=new ArrayList<ProjectFundingDTO>();
  }
  fundeds.remove(funded);
  fundeds.add(funded);
  setFunded(fundeds);
}",0.9912434325744308
35634,"@Override public void initModelView(Object model){
  if (model instanceof ProjectModelDTO) {
    ngoGrid.setVisible(true);
    fundingGrid.setVisible(true);
    partnerGrid.setVisible(true);
    fundingGrid.setVisible(true);
    partnerGrid.setVisible(true);
    name.enable();
    statusList.enable();
    saveButton.enable();
    ngoGrid.setVisible(true);
    fundingGrid.setVisible(true);
    partnerGrid.setVisible(true);
    radioGroup.setFireChangeEventOnSetValue(true);
    isProject=true;
    currentProjectModel=(ProjectModelDTO)model;
    if (currentProjectModel != null) {
      name.setValue(currentProjectModel.getName());
      statusList.setSimpleValue(ProjectModelStatus.getName(currentProjectModel.getStatus()));
      Log.debug(""String_Node_Str"" + ProjectModelStatus.getName(currentProjectModel.getStatus()));
      currentProjectModel.getStatus();
      ProjectModelType type=currentProjectModel.getVisibility(cache.getOrganizationCache().getOrganization().getId());
switch (type) {
case NGO:
        ngoRadio.setValue(true);
      fundingRadio.setValue(false);
    partnerRadio.setValue(false);
  currentModelType=ProjectModelType.NGO;
break;
case FUNDING:
ngoRadio.setValue(false);
fundingRadio.setValue(true);
partnerRadio.setValue(false);
currentModelType=ProjectModelType.FUNDING;
break;
case LOCAL_PARTNER:
ngoRadio.setValue(false);
fundingRadio.setValue(false);
partnerRadio.setValue(true);
currentModelType=ProjectModelType.LOCAL_PARTNER;
break;
}
}
}
 else if (model instanceof OrgUnitModelDTO) {
isProject=false;
titleField.show();
hasBudgetCheckBox.show();
canContainProjectsCheckBox.show();
titleField.disable();
hasBudgetCheckBox.disable();
canContainProjectsCheckBox.disable();
statusList.enable();
radioGroup.setFireChangeEventOnSetValue(true);
saveButton.enable();
titleField.enable();
hasBudgetCheckBox.enable();
canContainProjectsCheckBox.enable();
currentOrgUnitModel=(OrgUnitModelDTO)model;
if (currentOrgUnitModel != null) {
name.setValue(currentOrgUnitModel.getName());
statusList.setSimpleValue(ProjectModelStatus.getName(currentOrgUnitModel.getStatus()));
titleField.setValue(currentOrgUnitModel.getTitle());
hasBudgetCheckBox.setValue(currentOrgUnitModel.getHasBudget());
canContainProjectsCheckBox.setValue(currentOrgUnitModel.getCanContainProjects());
Log.debug(""String_Node_Str"" + currentOrgUnitModel.getName() + ""String_Node_Str""+ ProjectModelStatus.getName(currentOrgUnitModel.getStatus()));
}
}
}","@Override public void initModelView(Object model){
  if (model instanceof ProjectModelDTO) {
    ngoGrid.setVisible(true);
    fundingGrid.setVisible(true);
    partnerGrid.setVisible(true);
    fundingGrid.setVisible(true);
    partnerGrid.setVisible(true);
    name.enable();
    statusList.enable();
    saveButton.enable();
    ngoGrid.setVisible(true);
    fundingGrid.setVisible(true);
    partnerGrid.setVisible(true);
    radioGroup.setFireChangeEventOnSetValue(true);
    isProject=true;
    currentProjectModel=(ProjectModelDTO)model;
    if (currentProjectModel != null) {
      name.setValue(currentProjectModel.getName());
      statusList.setSimpleValue(ProjectModelStatus.getName(currentProjectModel.getStatus()));
      Log.debug(""String_Node_Str"" + ProjectModelStatus.getName(currentProjectModel.getStatus()));
      currentProjectModel.getStatus();
      ProjectModelType type=currentProjectModel.getVisibility(cache.getOrganizationCache().getOrganization().getId());
switch (type) {
case NGO:
        ngoRadio.setValue(true);
      fundingRadio.setValue(false);
    partnerRadio.setValue(false);
  currentModelType=ProjectModelType.NGO;
break;
case FUNDING:
ngoRadio.setValue(false);
fundingRadio.setValue(true);
partnerRadio.setValue(false);
currentModelType=ProjectModelType.FUNDING;
break;
case LOCAL_PARTNER:
ngoRadio.setValue(false);
fundingRadio.setValue(false);
partnerRadio.setValue(true);
currentModelType=ProjectModelType.LOCAL_PARTNER;
break;
}
}
}
 else if (model instanceof OrgUnitModelDTO) {
isProject=false;
titleField.show();
hasBudgetCheckBox.show();
canContainProjectsCheckBox.show();
titleField.disable();
hasBudgetCheckBox.disable();
canContainProjectsCheckBox.disable();
name.enable();
statusList.enable();
radioGroup.setFireChangeEventOnSetValue(true);
saveButton.enable();
titleField.enable();
hasBudgetCheckBox.enable();
canContainProjectsCheckBox.enable();
currentOrgUnitModel=(OrgUnitModelDTO)model;
if (currentOrgUnitModel != null) {
name.setValue(currentOrgUnitModel.getName());
statusList.setSimpleValue(ProjectModelStatus.getName(currentOrgUnitModel.getStatus()));
titleField.setValue(currentOrgUnitModel.getTitle());
hasBudgetCheckBox.setValue(currentOrgUnitModel.getHasBudget());
canContainProjectsCheckBox.setValue(currentOrgUnitModel.getCanContainProjects());
Log.debug(""String_Node_Str"" + currentOrgUnitModel.getName() + ""String_Node_Str""+ ProjectModelStatus.getName(currentOrgUnitModel.getStatus()));
}
}
}",0.9969431424495618
35635,"private void refreshTree(){
  cache.getOrganizationCache().get(new AsyncCallback<OrgUnitDTOLight>(){
    @Override public void onFailure(    Throwable e){
    }
    @Override public void onSuccess(    OrgUnitDTOLight result){
      if (result != null) {
        view.getStore().removeAll();
        view.getStore().add(result,true);
        view.getTree().expandAll();
      }
    }
  }
);
}","private void refreshTree(){
  cache.getOrganizationCache().get(new AsyncCallback<OrgUnitDTOLight>(){
    @Override public void onFailure(    Throwable e){
    }
    @Override public void onSuccess(    OrgUnitDTOLight result){
      if (result != null) {
        view.getStore().removeAll();
        view.getStore().add(result,true);
        new Timer(){
          @Override public void run(){
            view.getTree().expandAll();
          }
        }
.schedule(2000);
      }
    }
  }
);
}",0.8542372881355932
35636,"@Override public void onSuccess(OrgUnitDTOLight result){
  if (result != null) {
    view.getStore().removeAll();
    view.getStore().add(result,true);
    view.getTree().expandAll();
  }
}","@Override public void onSuccess(OrgUnitDTOLight result){
  if (result != null) {
    view.getStore().removeAll();
    view.getStore().add(result,true);
    new Timer(){
      @Override public void run(){
        view.getTree().expandAll();
      }
    }
.schedule(2000);
  }
}",0.8
35637,"/** 
 * Returns a sorted list of IndicatorDTOs for the given database, as well as their current aggregate value.
 * @param databaseId
 * @return
 */
public void queryIndicatorsByDatabaseWithCurrentValues(Connection connection,final int databaseId){
  SqlQueryBuilder.select(""String_Node_Str"").appendField(""String_Node_Str"").appendField(""String_Node_Str"").appendField(""String_Node_Str"").appendField(""String_Node_Str"").appendField(""String_Node_Str"").appendField(""String_Node_Str"").appendField(""String_Node_Str"").appendField(""String_Node_Str"").appendField(""String_Node_Str"").appendField(""String_Node_Str"").appendField(""String_Node_Str"").from(""String_Node_Str"").leftJoin(""String_Node_Str"").on(""String_Node_Str"").leftJoin(""String_Node_Str"").on(""String_Node_Str"").leftJoin(""String_Node_Str"").on(""String_Node_Str"").whereTrue(""String_Node_Str"" + databaseId).whereTrue(""String_Node_Str"").groupBy(""String_Node_Str"" + ""String_Node_Str"").orderBy(""String_Node_Str"").forEachResult(connection,new ResultHandler(){
    @Override public void handle(    ResultSet rs) throws SQLException {
      IndicatorDTO dto=new IndicatorDTO();
      dto.setId(rs.getInt(1));
      dto.setName(rs.getString(2));
      dto.setAggregation(rs.getInt(3));
      dto.setUnits(rs.getString(4));
      dto.setCategory(rs.getString(5));
      dto.setDescription(rs.getString(6));
      dto.setCode(rs.getString(7));
      dto.setDatabaseId(databaseId);
      dto.setSourceOfVerification(rs.getString(11));
      double objective=rs.getDouble(8);
      if (!rs.wasNull()) {
        dto.setObjective(objective);
      }
      Double currentValue=null;
      if (dto.getAggregation() == IndicatorDTO.AGGREGATE_SUM) {
        currentValue=rs.getDouble(9);
        if (!rs.wasNull()) {
          dto.setCurrentValue(currentValue);
        }
      }
 else       if (dto.getAggregation() == IndicatorDTO.AGGREGATE_AVG) {
        currentValue=rs.getDouble(10);
        if (!rs.wasNull()) {
          dto.setCurrentValue(currentValue);
        }
      }
      int groupId=rs.getInt(12);
      if (rs.wasNull()) {
        ungroupedIndicators.add(dto);
      }
 else {
        IndicatorGroup group=groupMap.get(groupId);
        group.addIndicator(dto);
        dto.setGroupId(group.getId());
      }
      allIndicators.add(dto);
      indicatorMap.put(dto.getId(),dto);
    }
  }
);
  SqlQueryBuilder.select(""String_Node_Str"").appendField(""String_Node_Str"").appendField(""String_Node_Str"").appendField(""String_Node_Str"").from(""String_Node_Str"").leftJoin(""String_Node_Str"").on(""String_Node_Str"").leftJoin(""String_Node_Str"").on(""String_Node_Str"").leftJoin(""String_Node_Str"").on(""String_Node_Str"").leftJoin(""String_Node_Str"").on(""String_Node_Str"").whereTrue(""String_Node_Str"" + databaseId).where(""String_Node_Str"").equalTo(IndicatorDTO.AGGREGATE_MULTINOMIAL).groupBy(""String_Node_Str"").orderBy(""String_Node_Str"").forEachResult(connection,new ResultHandler(){
    @Override public void handle(    ResultSet rs) throws SQLException {
      int id=rs.getInt(1);
      int code=rs.getInt(2);
      String label=rs.getString(3);
      int count=rs.getInt(4);
      IndicatorDTO dto=indicatorMap.get(id);
      if (dto.getLabels() == null) {
        dto.setLabels(new ArrayList<String>());
      }
      dto.getLabels().add(label);
      if (dto.getLabelCounts() == null) {
        dto.setLabelCounts(new ArrayList<Integer>());
      }
      dto.getLabelCounts().add(count);
    }
  }
);
}","/** 
 * Returns a sorted list of IndicatorDTOs for the given database, as well as their current aggregate value.
 * @param databaseId
 * @return
 */
public void queryIndicatorsByDatabaseWithCurrentValues(Connection connection,final int databaseId){
  SqlQueryBuilder.select(""String_Node_Str"").appendField(""String_Node_Str"").appendField(""String_Node_Str"").appendField(""String_Node_Str"").appendField(""String_Node_Str"").appendField(""String_Node_Str"").appendField(""String_Node_Str"").appendField(""String_Node_Str"").appendField(""String_Node_Str"").appendField(""String_Node_Str"").appendField(""String_Node_Str"").appendField(""String_Node_Str"").from(""String_Node_Str"").leftJoin(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"").on(""String_Node_Str"").whereTrue(""String_Node_Str"" + databaseId).whereTrue(""String_Node_Str"").groupBy(""String_Node_Str"" + ""String_Node_Str"").orderBy(""String_Node_Str"").forEachResult(connection,new ResultHandler(){
    @Override public void handle(    ResultSet rs) throws SQLException {
      IndicatorDTO dto=new IndicatorDTO();
      dto.setId(rs.getInt(1));
      dto.setName(rs.getString(2));
      dto.setAggregation(rs.getInt(3));
      dto.setUnits(rs.getString(4));
      dto.setCategory(rs.getString(5));
      dto.setDescription(rs.getString(6));
      dto.setCode(rs.getString(7));
      dto.setDatabaseId(databaseId);
      dto.setSourceOfVerification(rs.getString(11));
      double objective=rs.getDouble(8);
      if (!rs.wasNull()) {
        dto.setObjective(objective);
      }
      Double currentValue=null;
      if (dto.getAggregation() == IndicatorDTO.AGGREGATE_SUM) {
        currentValue=rs.getDouble(9);
        if (!rs.wasNull()) {
          dto.setCurrentValue(currentValue);
        }
      }
 else       if (dto.getAggregation() == IndicatorDTO.AGGREGATE_AVG) {
        currentValue=rs.getDouble(10);
        if (!rs.wasNull()) {
          dto.setCurrentValue(currentValue);
        }
      }
      int groupId=rs.getInt(12);
      if (rs.wasNull()) {
        ungroupedIndicators.add(dto);
      }
 else {
        IndicatorGroup group=groupMap.get(groupId);
        group.addIndicator(dto);
        dto.setGroupId(group.getId());
      }
      allIndicators.add(dto);
      indicatorMap.put(dto.getId(),dto);
    }
  }
);
  SqlQueryBuilder.select(""String_Node_Str"").appendField(""String_Node_Str"").appendField(""String_Node_Str"").appendField(""String_Node_Str"").from(""String_Node_Str"").leftJoin(""String_Node_Str"").on(""String_Node_Str"").leftJoin(""String_Node_Str"").on(""String_Node_Str"").leftJoin(""String_Node_Str"").on(""String_Node_Str"").leftJoin(""String_Node_Str"").on(""String_Node_Str"").whereTrue(""String_Node_Str"" + databaseId).where(""String_Node_Str"").equalTo(IndicatorDTO.AGGREGATE_MULTINOMIAL).groupBy(""String_Node_Str"").orderBy(""String_Node_Str"").forEachResult(connection,new ResultHandler(){
    @Override public void handle(    ResultSet rs) throws SQLException {
      int id=rs.getInt(1);
      int code=rs.getInt(2);
      String label=rs.getString(3);
      int count=rs.getInt(4);
      IndicatorDTO dto=indicatorMap.get(id);
      if (dto.getLabels() == null) {
        dto.setLabels(new ArrayList<String>());
      }
      dto.getLabels().add(label);
      if (dto.getLabelCounts() == null) {
        dto.setLabelCounts(new ArrayList<Integer>());
      }
      dto.getLabelCounts().add(count);
    }
  }
);
}",0.981679613073428
35638,"@Override public CommandResult execute(GetOrgUnitModelCopy cmd,User user) throws CommandException {
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + cmd.getOrgUnitModelId() + ""String_Node_Str"");
  }
  Integer existentOrgUnitModelId=Integer.valueOf(String.valueOf(cmd.getOrgUnitModelId()));
  final OrgUnitModel existentOrgUnitModel=em.find(OrgUnitModel.class,existentOrgUnitModelId);
  if (existentOrgUnitModel == null) {
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + cmd.getOrgUnitModelId() + ""String_Node_Str"");
    }
    return null;
  }
 else {
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + cmd.getOrgUnitModelId());
    }
    OrgUnitModel copyOrgUnitModel=Realizer.realize(existentOrgUnitModel);
    copyOrgUnitModel.resetImport();
    copyOrgUnitModel.setStatus(ProjectModelStatus.DRAFT);
    saveFlexibleElement(copyOrgUnitModel,em);
    copyOrgUnitModel.setName(cmd.getNewModelName());
    em.persist(copyOrgUnitModel);
    return mapper.map(copyOrgUnitModel,OrgUnitModelDTO.class);
  }
}","@Override public CommandResult execute(GetOrgUnitModelCopy cmd,User user) throws CommandException {
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + cmd.getOrgUnitModelId() + ""String_Node_Str"");
  }
  Integer existentOrgUnitModelId=Integer.valueOf(String.valueOf(cmd.getOrgUnitModelId()));
  final OrgUnitModel existentOrgUnitModel=em.find(OrgUnitModel.class,existentOrgUnitModelId);
  if (existentOrgUnitModel == null) {
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + cmd.getOrgUnitModelId() + ""String_Node_Str"");
    }
    return null;
  }
 else {
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + cmd.getOrgUnitModelId());
    }
    OrgUnitModel copyOrgUnitModel=Realizer.realize(existentOrgUnitModel);
    copyOrgUnitModel.resetImport();
    copyOrgUnitModel.setStatus(ProjectModelStatus.DRAFT);
    saveFlexibleElement(copyOrgUnitModel,em);
    copyOrgUnitModel.setName(cmd.getNewModelName());
    copyOrgUnitModel.setOrganization(existentOrgUnitModel.getOrganization());
    em.persist(copyOrgUnitModel);
    return mapper.map(copyOrgUnitModel,OrgUnitModelDTO.class);
  }
}",0.9643510054844608
35639,"@Inject public AdminOneModelView(UserLocalCache cache,Dispatcher dispatcher){
  this.dispatcher=dispatcher;
  this.cache=cache;
  final HBoxLayout hPanelLayout=new HBoxLayout();
  hPanelLayout.setHBoxLayoutAlign(HBoxLayout.HBoxLayoutAlign.STRETCH);
  topPanel=new ContentPanel(hPanelLayout);
  topPanel.setHeaderVisible(false);
  topPanel.setWidth(1200);
  topPanel.setBorders(true);
  topLeftFormPanel=new FormPanel();
  topLeftFormPanel.setWidth(300);
  topLeftFormPanel.setHeaderVisible(false);
  topCenterFormPanel=new FormPanel();
  topCenterFormPanel.setWidth(300);
  topCenterFormPanel.setHeaderVisible(false);
  topRightFormPanel=new FormPanel();
  topRightFormPanel.setWidth(600);
  topRightFormPanel.setHeaderVisible(false);
  name=new TextField<String>();
  name.disable();
  name.setAllowBlank(false);
  name.setFieldLabel(I18N.CONSTANTS.adminProjectModelsName());
  statusList=new SimpleComboBox<String>();
  statusList.disable();
  statusList.setFieldLabel(I18N.CONSTANTS.adminProjectModelsStatus());
  statusList.setAllowBlank(false);
  statusList.setTriggerAction(TriggerAction.ALL);
  List<String> values=new ArrayList<String>();
  for (  ProjectModelStatus e : ProjectModelStatus.values()) {
    if (!ProjectModelStatus.USED.equals(e))     values.add(ProjectModelStatus.getName(e));
  }
  statusList.add(values);
  statusList.addListener(Events.Select,new Listener<BaseEvent>(){
    @Override public void handleEvent(    BaseEvent be){
      if (statusList.getValue() != null && !ProjectModelStatus.getName(ProjectModelStatus.DRAFT).equals(statusList.getValue().getValue())) {
        if (isProject) {
          MessageBox.confirm(I18N.MESSAGES.adminModelStatusChangeBox(),I18N.MESSAGES.adminModelStatusChange(ProjectModelStatus.getName(currentProjectModel.getStatus()),statusList.getValue().getValue()),new Listener<MessageBoxEvent>(){
            @Override public void handleEvent(            MessageBoxEvent be){
              if (Dialog.NO.equals(be.getButtonClicked().getItemId())) {
                statusList.setSimpleValue(ProjectModelStatus.getName(currentProjectModel.getStatus()));
              }
            }
          }
);
        }
 else {
          MessageBox.confirm(I18N.MESSAGES.adminModelStatusChangeBox(),I18N.MESSAGES.adminModelStatusChange(ProjectModelStatus.getName(currentOrgUnitModel.getStatus()),statusList.getValue().getValue()),new Listener<MessageBoxEvent>(){
            @Override public void handleEvent(            MessageBoxEvent be){
              if (Dialog.YES.equals(be.getButtonClicked().getItemId())) {
                statusList.setSimpleValue(ProjectModelStatus.getName(currentOrgUnitModel.getStatus()));
              }
            }
          }
);
        }
      }
    }
  }
);
  radioGroup=new RadioGroup(""String_Node_Str"");
  ngoRadio=new Radio();
  ngoRadio.setFireChangeEventOnSetValue(true);
  ngoRadio.setValue(true);
  ngoRadio.setFieldLabel(ProjectModelType.getName(ProjectModelType.NGO));
  ngoRadio.addStyleName(""String_Node_Str"");
  final WidgetComponent ngoIcon=new WidgetComponent(FundingIconProvider.getProjectTypeIcon(ProjectModelType.NGO,IconSize.SMALL).createImage());
  ngoIcon.addStyleName(""String_Node_Str"");
  final Label ngoLabel=new Label(ProjectModelType.getName(ProjectModelType.NGO));
  ngoLabel.addStyleName(""String_Node_Str"");
  ngoLabel.addStyleName(""String_Node_Str"");
  ngoLabel.addClickHandler(new ClickHandler(){
    @Override public void onClick(    ClickEvent event){
      currentModelType=ProjectModelType.NGO;
      ngoRadio.setValue(true);
      fundingRadio.setValue(false);
      partnerRadio.setValue(false);
    }
  }
);
  fundingRadio=new Radio();
  fundingRadio.setFireChangeEventOnSetValue(true);
  fundingRadio.setFieldLabel(ProjectModelType.getName(ProjectModelType.FUNDING));
  fundingRadio.addStyleName(""String_Node_Str"");
  final WidgetComponent fundingIcon=new WidgetComponent(FundingIconProvider.getProjectTypeIcon(ProjectModelType.FUNDING,IconSize.SMALL).createImage());
  fundingIcon.addStyleName(""String_Node_Str"");
  final Label fundingLabel=new Label(ProjectModelType.getName(ProjectModelType.FUNDING));
  fundingLabel.addStyleName(""String_Node_Str"");
  fundingLabel.addStyleName(""String_Node_Str"");
  fundingLabel.addClickHandler(new ClickHandler(){
    @Override public void onClick(    ClickEvent event){
      ngoRadio.setValue(false);
      fundingRadio.setValue(true);
      currentModelType=ProjectModelType.FUNDING;
      partnerRadio.setValue(false);
    }
  }
);
  partnerRadio=new Radio();
  partnerRadio.setFireChangeEventOnSetValue(true);
  partnerRadio.setFieldLabel(ProjectModelType.getName(ProjectModelType.LOCAL_PARTNER));
  partnerRadio.addStyleName(""String_Node_Str"");
  final WidgetComponent partnerIcon=new WidgetComponent(FundingIconProvider.getProjectTypeIcon(ProjectModelType.LOCAL_PARTNER,IconSize.SMALL).createImage());
  partnerIcon.addStyleName(""String_Node_Str"");
  final Label partnerLabel=new Label(ProjectModelType.getName(ProjectModelType.LOCAL_PARTNER));
  partnerLabel.addStyleName(""String_Node_Str"");
  partnerLabel.addStyleName(""String_Node_Str"");
  partnerLabel.addClickHandler(new ClickHandler(){
    @Override public void onClick(    ClickEvent event){
      ngoRadio.setValue(false);
      fundingRadio.setValue(false);
      partnerRadio.setValue(true);
      currentModelType=ProjectModelType.LOCAL_PARTNER;
    }
  }
);
  radioGroup.add(ngoRadio);
  radioGroup.add(fundingRadio);
  radioGroup.add(partnerRadio);
  ngoGrid=new Grid(1,3);
  ngoGrid.setVisible(false);
  ngoGrid.setBorderWidth(0);
  ngoGrid.setWidget(0,0,ngoIcon);
  ngoGrid.setWidget(0,1,ngoRadio);
  ngoGrid.setWidget(0,2,AdminUtil.createGridText(ProjectModelType.getName(ProjectModelType.NGO)));
  topCenterFormPanel.add(ngoGrid);
  fundingGrid=new Grid(1,3);
  fundingGrid.setVisible(false);
  fundingGrid.setBorderWidth(0);
  fundingGrid.setWidget(0,0,fundingIcon);
  fundingGrid.setWidget(0,1,fundingRadio);
  fundingGrid.setWidget(0,2,AdminUtil.createGridText(ProjectModelType.getName(ProjectModelType.FUNDING)));
  topCenterFormPanel.add(fundingGrid);
  partnerGrid=new Grid(1,3);
  partnerGrid.setVisible(false);
  partnerGrid.setBorderWidth(0);
  partnerGrid.setWidget(0,0,partnerIcon);
  partnerGrid.setWidget(0,1,partnerRadio);
  partnerGrid.setWidget(0,2,AdminUtil.createGridText(ProjectModelType.getName(ProjectModelType.LOCAL_PARTNER)));
  topCenterFormPanel.add(partnerGrid);
  titleField=new TextField<String>();
  titleField.setFieldLabel(I18N.CONSTANTS.adminOrgUnitsModelTitle());
  titleField.setAllowBlank(false);
  titleField.hide();
  topLeftFormPanel.add(name);
  topLeftFormPanel.add(titleField);
  topLeftFormPanel.add(statusList);
  hasBudgetCheckBox=new CheckBox();
  hasBudgetCheckBox.hide();
  hasBudgetCheckBox.setBoxLabel(I18N.CONSTANTS.adminOrgUnitsModelHasBudget());
  hasBudgetCheckBox.setFieldLabel(""String_Node_Str"");
  hasBudgetCheckBox.setLabelSeparator(""String_Node_Str"");
  hasBudgetCheckBox.setValue(false);
  topCenterFormPanel.add(hasBudgetCheckBox);
  canContainProjectsCheckBox=new CheckBox();
  canContainProjectsCheckBox.hide();
  canContainProjectsCheckBox.setBoxLabel(I18N.CONSTANTS.adminOrgUnitsModelContainProjects());
  canContainProjectsCheckBox.setFieldLabel(""String_Node_Str"");
  canContainProjectsCheckBox.setLabelSeparator(""String_Node_Str"");
  canContainProjectsCheckBox.setValue(false);
  topCenterFormPanel.add(canContainProjectsCheckBox);
  for (  final ProjectModelType type : ProjectModelType.values()) {
    getRadioFilter(type).addListener(Events.Change,new Listener<FieldEvent>(){
      @Override public void handleEvent(      FieldEvent be){
        if (Boolean.TRUE.equals(be.getValue())) {
          currentModelType=type;
        }
      }
    }
);
  }
  final BorderLayoutData topLayoutData=new BorderLayoutData(LayoutRegion.NORTH,150);
  topLayoutData.setCollapsible(true);
  topLayoutData.setMargins(new Margins(BORDER / 2,0,BORDER / 2,0));
  final BorderLayout borderLayout=new BorderLayout();
  setLayout(borderLayout);
  tabPanelParameters=new TabPanel();
  tabPanelParameters.setPlain(true);
  panelSelectedTab=new LayoutContainer(new BorderLayout());
  panelSelectedTab.setBorders(false);
  panelSelectedTab.addStyleName(""String_Node_Str"");
  final BorderLayoutData centerData=new BorderLayoutData(LayoutRegion.CENTER);
  centerData.setMargins(new Margins(0,0,4,4));
  saveButton=new Button(I18N.CONSTANTS.save());
  saveButton.disable();
  saveButton.addListener(Events.OnClick,new Listener<ButtonEvent>(){
    @Override public void handleEvent(    ButtonEvent be){
      updateModel();
    }
  }
);
  topRightFormPanel.add(saveButton);
  topPanel.add(topLeftFormPanel,new HBoxLayoutData(0,4,0,4));
  topPanel.add(topCenterFormPanel,new HBoxLayoutData(0,4,0,4));
  topPanel.add(topRightFormPanel,new HBoxLayoutData(0,4,0,4));
  add(tabPanelParameters,centerData);
  add(topPanel,topLayoutData);
}","@Inject public AdminOneModelView(UserLocalCache cache,Dispatcher dispatcher){
  this.dispatcher=dispatcher;
  this.cache=cache;
  final HBoxLayout hPanelLayout=new HBoxLayout();
  hPanelLayout.setHBoxLayoutAlign(HBoxLayout.HBoxLayoutAlign.STRETCH);
  topPanel=new ContentPanel(hPanelLayout);
  topPanel.setHeaderVisible(false);
  topPanel.setWidth(1200);
  topPanel.setBorders(true);
  topLeftFormPanel=new FormPanel();
  topLeftFormPanel.setWidth(300);
  topLeftFormPanel.setHeaderVisible(false);
  topCenterFormPanel=new FormPanel();
  topCenterFormPanel.setWidth(300);
  topCenterFormPanel.setHeaderVisible(false);
  topRightFormPanel=new FormPanel();
  topRightFormPanel.setWidth(600);
  topRightFormPanel.setHeaderVisible(false);
  name=new TextField<String>();
  name.disable();
  name.setAllowBlank(false);
  name.setFieldLabel(I18N.CONSTANTS.adminProjectModelsName());
  statusList=new SimpleComboBox<String>();
  statusList.disable();
  statusList.setFieldLabel(I18N.CONSTANTS.adminProjectModelsStatus());
  statusList.setAllowBlank(false);
  statusList.setTriggerAction(TriggerAction.ALL);
  List<String> values=new ArrayList<String>();
  for (  ProjectModelStatus e : ProjectModelStatus.values()) {
    if (!ProjectModelStatus.USED.equals(e))     values.add(ProjectModelStatus.getName(e));
  }
  statusList.add(values);
  statusList.addListener(Events.Select,new Listener<BaseEvent>(){
    @Override public void handleEvent(    BaseEvent be){
      if (statusList.getValue() != null && !ProjectModelStatus.getName(ProjectModelStatus.DRAFT).equals(statusList.getValue().getValue())) {
        if (isProject) {
          MessageBox.confirm(I18N.MESSAGES.adminModelStatusChangeBox(),I18N.MESSAGES.adminModelStatusChange(ProjectModelStatus.getName(currentProjectModel.getStatus()),statusList.getValue().getValue()),new Listener<MessageBoxEvent>(){
            @Override public void handleEvent(            MessageBoxEvent be){
              if (Dialog.NO.equals(be.getButtonClicked().getItemId())) {
                statusList.setSimpleValue(ProjectModelStatus.getName(currentProjectModel.getStatus()));
              }
            }
          }
);
        }
 else {
          MessageBox.confirm(I18N.MESSAGES.adminModelStatusChangeBox(),I18N.MESSAGES.adminModelStatusChange(ProjectModelStatus.getName(currentOrgUnitModel.getStatus()),statusList.getValue().getValue()),new Listener<MessageBoxEvent>(){
            @Override public void handleEvent(            MessageBoxEvent be){
              if (Dialog.NO.equals(be.getButtonClicked().getItemId())) {
                statusList.setSimpleValue(ProjectModelStatus.getName(currentOrgUnitModel.getStatus()));
              }
            }
          }
);
        }
      }
    }
  }
);
  radioGroup=new RadioGroup(""String_Node_Str"");
  ngoRadio=new Radio();
  ngoRadio.setFireChangeEventOnSetValue(true);
  ngoRadio.setValue(true);
  ngoRadio.setFieldLabel(ProjectModelType.getName(ProjectModelType.NGO));
  ngoRadio.addStyleName(""String_Node_Str"");
  final WidgetComponent ngoIcon=new WidgetComponent(FundingIconProvider.getProjectTypeIcon(ProjectModelType.NGO,IconSize.SMALL).createImage());
  ngoIcon.addStyleName(""String_Node_Str"");
  final Label ngoLabel=new Label(ProjectModelType.getName(ProjectModelType.NGO));
  ngoLabel.addStyleName(""String_Node_Str"");
  ngoLabel.addStyleName(""String_Node_Str"");
  ngoLabel.addClickHandler(new ClickHandler(){
    @Override public void onClick(    ClickEvent event){
      currentModelType=ProjectModelType.NGO;
      ngoRadio.setValue(true);
      fundingRadio.setValue(false);
      partnerRadio.setValue(false);
    }
  }
);
  fundingRadio=new Radio();
  fundingRadio.setFireChangeEventOnSetValue(true);
  fundingRadio.setFieldLabel(ProjectModelType.getName(ProjectModelType.FUNDING));
  fundingRadio.addStyleName(""String_Node_Str"");
  final WidgetComponent fundingIcon=new WidgetComponent(FundingIconProvider.getProjectTypeIcon(ProjectModelType.FUNDING,IconSize.SMALL).createImage());
  fundingIcon.addStyleName(""String_Node_Str"");
  final Label fundingLabel=new Label(ProjectModelType.getName(ProjectModelType.FUNDING));
  fundingLabel.addStyleName(""String_Node_Str"");
  fundingLabel.addStyleName(""String_Node_Str"");
  fundingLabel.addClickHandler(new ClickHandler(){
    @Override public void onClick(    ClickEvent event){
      ngoRadio.setValue(false);
      fundingRadio.setValue(true);
      currentModelType=ProjectModelType.FUNDING;
      partnerRadio.setValue(false);
    }
  }
);
  partnerRadio=new Radio();
  partnerRadio.setFireChangeEventOnSetValue(true);
  partnerRadio.setFieldLabel(ProjectModelType.getName(ProjectModelType.LOCAL_PARTNER));
  partnerRadio.addStyleName(""String_Node_Str"");
  final WidgetComponent partnerIcon=new WidgetComponent(FundingIconProvider.getProjectTypeIcon(ProjectModelType.LOCAL_PARTNER,IconSize.SMALL).createImage());
  partnerIcon.addStyleName(""String_Node_Str"");
  final Label partnerLabel=new Label(ProjectModelType.getName(ProjectModelType.LOCAL_PARTNER));
  partnerLabel.addStyleName(""String_Node_Str"");
  partnerLabel.addStyleName(""String_Node_Str"");
  partnerLabel.addClickHandler(new ClickHandler(){
    @Override public void onClick(    ClickEvent event){
      ngoRadio.setValue(false);
      fundingRadio.setValue(false);
      partnerRadio.setValue(true);
      currentModelType=ProjectModelType.LOCAL_PARTNER;
    }
  }
);
  radioGroup.add(ngoRadio);
  radioGroup.add(fundingRadio);
  radioGroup.add(partnerRadio);
  ngoGrid=new Grid(1,3);
  ngoGrid.setVisible(false);
  ngoGrid.setBorderWidth(0);
  ngoGrid.setWidget(0,0,ngoIcon);
  ngoGrid.setWidget(0,1,ngoRadio);
  ngoGrid.setWidget(0,2,AdminUtil.createGridText(ProjectModelType.getName(ProjectModelType.NGO)));
  topCenterFormPanel.add(ngoGrid);
  fundingGrid=new Grid(1,3);
  fundingGrid.setVisible(false);
  fundingGrid.setBorderWidth(0);
  fundingGrid.setWidget(0,0,fundingIcon);
  fundingGrid.setWidget(0,1,fundingRadio);
  fundingGrid.setWidget(0,2,AdminUtil.createGridText(ProjectModelType.getName(ProjectModelType.FUNDING)));
  topCenterFormPanel.add(fundingGrid);
  partnerGrid=new Grid(1,3);
  partnerGrid.setVisible(false);
  partnerGrid.setBorderWidth(0);
  partnerGrid.setWidget(0,0,partnerIcon);
  partnerGrid.setWidget(0,1,partnerRadio);
  partnerGrid.setWidget(0,2,AdminUtil.createGridText(ProjectModelType.getName(ProjectModelType.LOCAL_PARTNER)));
  topCenterFormPanel.add(partnerGrid);
  titleField=new TextField<String>();
  titleField.setFieldLabel(I18N.CONSTANTS.adminOrgUnitsModelTitle());
  titleField.setAllowBlank(false);
  titleField.hide();
  topLeftFormPanel.add(name);
  topLeftFormPanel.add(titleField);
  topLeftFormPanel.add(statusList);
  hasBudgetCheckBox=new CheckBox();
  hasBudgetCheckBox.hide();
  hasBudgetCheckBox.setBoxLabel(I18N.CONSTANTS.adminOrgUnitsModelHasBudget());
  hasBudgetCheckBox.setFieldLabel(""String_Node_Str"");
  hasBudgetCheckBox.setLabelSeparator(""String_Node_Str"");
  hasBudgetCheckBox.setValue(false);
  topCenterFormPanel.add(hasBudgetCheckBox);
  canContainProjectsCheckBox=new CheckBox();
  canContainProjectsCheckBox.hide();
  canContainProjectsCheckBox.setBoxLabel(I18N.CONSTANTS.adminOrgUnitsModelContainProjects());
  canContainProjectsCheckBox.setFieldLabel(""String_Node_Str"");
  canContainProjectsCheckBox.setLabelSeparator(""String_Node_Str"");
  canContainProjectsCheckBox.setValue(false);
  topCenterFormPanel.add(canContainProjectsCheckBox);
  for (  final ProjectModelType type : ProjectModelType.values()) {
    getRadioFilter(type).addListener(Events.Change,new Listener<FieldEvent>(){
      @Override public void handleEvent(      FieldEvent be){
        if (Boolean.TRUE.equals(be.getValue())) {
          currentModelType=type;
        }
      }
    }
);
  }
  final BorderLayoutData topLayoutData=new BorderLayoutData(LayoutRegion.NORTH,150);
  topLayoutData.setCollapsible(true);
  topLayoutData.setMargins(new Margins(BORDER / 2,0,BORDER / 2,0));
  final BorderLayout borderLayout=new BorderLayout();
  setLayout(borderLayout);
  tabPanelParameters=new TabPanel();
  tabPanelParameters.setPlain(true);
  panelSelectedTab=new LayoutContainer(new BorderLayout());
  panelSelectedTab.setBorders(false);
  panelSelectedTab.addStyleName(""String_Node_Str"");
  final BorderLayoutData centerData=new BorderLayoutData(LayoutRegion.CENTER);
  centerData.setMargins(new Margins(0,0,4,4));
  saveButton=new Button(I18N.CONSTANTS.save());
  saveButton.disable();
  saveButton.addListener(Events.OnClick,new Listener<ButtonEvent>(){
    @Override public void handleEvent(    ButtonEvent be){
      updateModel();
    }
  }
);
  topRightFormPanel.add(saveButton);
  topPanel.add(topLeftFormPanel,new HBoxLayoutData(0,4,0,4));
  topPanel.add(topCenterFormPanel,new HBoxLayoutData(0,4,0,4));
  topPanel.add(topRightFormPanel,new HBoxLayoutData(0,4,0,4));
  add(tabPanelParameters,centerData);
  add(topPanel,topLayoutData);
}",0.9997192746055809
35640,"private OrgUnitModel createOrgUnitModel(OrgUnitModel oM,PropertyMap properties,User user){
  if (oM == null)   oM=new OrgUnitModel();
  String oMName=null;
  if (properties.get(AdminUtil.PROP_OM_NAME) != null)   oMName=(String)properties.get(AdminUtil.PROP_OM_NAME);
  String oMTitle=null;
  if (properties.get(AdminUtil.PROP_OM_TITLE) != null)   oMTitle=(String)properties.get(AdminUtil.PROP_OM_TITLE);
  Boolean hasBudget=null;
  if (properties.get(AdminUtil.PROP_OM_HAS_BUDGET) != null)   hasBudget=(Boolean)properties.get(AdminUtil.PROP_OM_HAS_BUDGET);
  Boolean containsProjects=null;
  if (properties.get(AdminUtil.PROP_OM_CONTAINS_PROJECTS) != null)   containsProjects=(Boolean)properties.get(AdminUtil.PROP_OM_CONTAINS_PROJECTS);
  oM.setName(oMName);
  oM.setStatus(ProjectModelStatus.DRAFT);
  oM.setTitle(oMTitle);
  oM.setHasBudget(hasBudget);
  oM.setOrganization(user.getOrganization());
  oM.setCanContainProjects(containsProjects);
  return oM;
}","private OrgUnitModel createOrgUnitModel(OrgUnitModel oM,PropertyMap properties,User user){
  if (oM == null)   oM=new OrgUnitModel();
  String oMName=null;
  if (properties.get(AdminUtil.PROP_OM_NAME) != null)   oMName=(String)properties.get(AdminUtil.PROP_OM_NAME);
  String oMTitle=null;
  if (properties.get(AdminUtil.PROP_OM_TITLE) != null)   oMTitle=(String)properties.get(AdminUtil.PROP_OM_TITLE);
  Boolean hasBudget=null;
  if (properties.get(AdminUtil.PROP_OM_HAS_BUDGET) != null)   hasBudget=(Boolean)properties.get(AdminUtil.PROP_OM_HAS_BUDGET);
  Boolean containsProjects=null;
  if (properties.get(AdminUtil.PROP_OM_CONTAINS_PROJECTS) != null)   containsProjects=(Boolean)properties.get(AdminUtil.PROP_OM_CONTAINS_PROJECTS);
  oM.setName(oMName);
  oM.setTitle(oMTitle);
  oM.setHasBudget(hasBudget);
  oM.setOrganization(user.getOrganization());
  oM.setCanContainProjects(containsProjects);
  if (properties.get(AdminUtil.PROP_OM_STATUS) != null) {
    oM.setStatus((ProjectModelStatus)properties.get(AdminUtil.PROP_OM_STATUS));
  }
 else {
    oM.setStatus(ProjectModelStatus.DRAFT);
  }
  return oM;
}",0.7673076923076924
35641,"@Override public void onClick(ClickEvent event){
  UpdateProjectFavorite updateCmd;
  int projectId=model.getId();
  if (projectId < 0)   projectId=model.get(""String_Node_Str"");
  if (isFavoriteProject(authentication.getUserId(),model)) {
    updateCmd=new UpdateProjectFavorite(projectId,UpdateProjectFavorite.UpdateType.REMOVE);
  }
 else {
    updateCmd=new UpdateProjectFavorite(projectId,UpdateProjectFavorite.UpdateType.ADD);
  }
  dispatcher.execute(updateCmd,new MaskingAsyncMonitor(projectTreePanel,I18N.CONSTANTS.loading()),new AsyncCallback<CreateResult>(){
    @Override public void onFailure(    Throwable caught){
      Log.error(""String_Node_Str"" + model.getId(),caught);
      MessageBox.alert(I18N.CONSTANTS.projectStarredError(),I18N.CONSTANTS.projectStarredErrorDetails(),null);
    }
    @Override public void onSuccess(    CreateResult result){
      if (result == null || result.getEntity() == null) {
        MessageBox.alert(I18N.CONSTANTS.projectStarredError(),I18N.CONSTANTS.projectStarredErrorDetails(),null);
      }
 else {
        ProjectDTOLight resultProject=(ProjectDTOLight)result.getEntity();
        model.setFavoriteUsers(resultProject.getFavoriteUsers());
        store.update(model);
        Notification.show(I18N.CONSTANTS.infoConfirmation(),I18N.CONSTANTS.projectStarred());
      }
    }
  }
);
}","@Override public void onClick(ClickEvent event){
  UpdateProjectFavorite updateCmd;
  int projectId=model.getId();
  if (projectId < 0) {
    projectId=(Integer)model.get(""String_Node_Str"");
  }
  if (isFavoriteProject(authentication.getUserId(),model)) {
    updateCmd=new UpdateProjectFavorite(projectId,UpdateProjectFavorite.UpdateType.REMOVE);
  }
 else {
    updateCmd=new UpdateProjectFavorite(projectId,UpdateProjectFavorite.UpdateType.ADD);
  }
  dispatcher.execute(updateCmd,new MaskingAsyncMonitor(projectTreePanel,I18N.CONSTANTS.loading()),new AsyncCallback<CreateResult>(){
    @Override public void onFailure(    Throwable caught){
      Log.error(""String_Node_Str"" + model.getId(),caught);
      MessageBox.alert(I18N.CONSTANTS.projectStarredError(),I18N.CONSTANTS.projectStarredErrorDetails(),null);
    }
    @Override public void onSuccess(    CreateResult result){
      if (result == null || result.getEntity() == null) {
        MessageBox.alert(I18N.CONSTANTS.projectStarredError(),I18N.CONSTANTS.projectStarredErrorDetails(),null);
      }
 else {
        ProjectDTOLight resultProject=(ProjectDTOLight)result.getEntity();
        model.setFavoriteUsers(resultProject.getFavoriteUsers());
        store.update(model);
        Notification.show(I18N.CONSTANTS.infoConfirmation(),I18N.CONSTANTS.projectStarred());
      }
    }
  }
);
}",0.9936920222634508
35642,"/** 
 * Builds and returns the columns model for the projects tree grid.
 * @return The project tree grid columns model.
 */
private ColumnModel getProjectGridColumnModel(){
  final DateTimeFormat format=DateUtils.DATE_SHORT;
  final ColumnConfig starredIconColumn=new ColumnConfig(""String_Node_Str"",""String_Node_Str"",24);
  starredIconColumn.setRenderer(new GridCellRenderer<ProjectDTOLight>(){
    private final DashboardImageBundle imageBundle=GWT.create(DashboardImageBundle.class);
    @Override public Object render(    final ProjectDTOLight model,    String property,    ColumnData config,    int rowIndex,    int colIndex,    final ListStore<ProjectDTOLight> store,    final Grid<ProjectDTOLight> grid){
      final Image icon;
      if (isFavoriteProject(authentication.getUserId(),model)) {
        icon=imageBundle.star().createImage();
        icon.setTitle(""String_Node_Str"");
      }
 else {
        icon=imageBundle.emptyStar().createImage();
        icon.setTitle(""String_Node_Str"");
      }
      icon.addClickHandler(new ClickHandler(){
        @Override public void onClick(        ClickEvent event){
          UpdateProjectFavorite updateCmd;
          int projectId=model.getId();
          if (projectId < 0)           projectId=model.get(""String_Node_Str"");
          if (isFavoriteProject(authentication.getUserId(),model)) {
            updateCmd=new UpdateProjectFavorite(projectId,UpdateProjectFavorite.UpdateType.REMOVE);
          }
 else {
            updateCmd=new UpdateProjectFavorite(projectId,UpdateProjectFavorite.UpdateType.ADD);
          }
          dispatcher.execute(updateCmd,new MaskingAsyncMonitor(projectTreePanel,I18N.CONSTANTS.loading()),new AsyncCallback<CreateResult>(){
            @Override public void onFailure(            Throwable caught){
              Log.error(""String_Node_Str"" + model.getId(),caught);
              MessageBox.alert(I18N.CONSTANTS.projectStarredError(),I18N.CONSTANTS.projectStarredErrorDetails(),null);
            }
            @Override public void onSuccess(            CreateResult result){
              if (result == null || result.getEntity() == null) {
                MessageBox.alert(I18N.CONSTANTS.projectStarredError(),I18N.CONSTANTS.projectStarredErrorDetails(),null);
              }
 else {
                ProjectDTOLight resultProject=(ProjectDTOLight)result.getEntity();
                model.setFavoriteUsers(resultProject.getFavoriteUsers());
                store.update(model);
                Notification.show(I18N.CONSTANTS.infoConfirmation(),I18N.CONSTANTS.projectStarred());
              }
            }
          }
);
        }
      }
);
      icon.addStyleName(""String_Node_Str"");
      return icon;
    }
  }
);
  final ColumnConfig codeColumn=new ColumnConfig(""String_Node_Str"",I18N.CONSTANTS.projectName(),110);
  codeColumn.setRenderer(new WidgetTreeGridCellRenderer<ProjectDTOLight>(){
    @Override public Widget getWidget(    ProjectDTOLight model,    String property,    ColumnData config,    int rowIndex,    int colIndex,    ListStore<ProjectDTOLight> store,    Grid<ProjectDTOLight> grid){
      Integer id=model.get(""String_Node_Str"");
      if (id <= 0) {
        id=model.get(""String_Node_Str"");
      }
      final Hyperlink h=new Hyperlink((String)model.get(property),true,ProjectPresenter.PAGE_ID.toString() + '!' + String.valueOf(id));
      if (!model.isLeaf()) {
        h.addStyleName(""String_Node_Str"");
      }
 else {
        h.addStyleName(""String_Node_Str"");
      }
      final com.google.gwt.user.client.ui.Grid panel=new com.google.gwt.user.client.ui.Grid(1,2);
      panel.setCellPadding(0);
      panel.setCellSpacing(0);
      panel.setWidget(0,0,FundingIconProvider.getProjectTypeIcon(model.getProjectModelType(authentication.getOrganizationId()),IconSize.SMALL_MEIDUM).createImage());
      panel.getCellFormatter().addStyleName(0,0,""String_Node_Str"");
      panel.setWidget(0,1,h);
      panel.getCellFormatter().addStyleName(0,1,""String_Node_Str"");
      return panel;
    }
  }
);
  final ColumnConfig titleColumn=new ColumnConfig(""String_Node_Str"",I18N.CONSTANTS.projectFullName(),230);
  titleColumn.setRenderer(new GridCellRenderer<ProjectDTOLight>(){
    @Override public Object render(    ProjectDTOLight model,    String property,    ColumnData config,    int rowIndex,    int colIndex,    ListStore<ProjectDTOLight> store,    Grid<ProjectDTOLight> grid){
      String title=(String)model.get(property);
      if (model.getParent() != null) {
        title=""String_Node_Str"" + title;
      }
      return createProjectGridText(model,title);
    }
  }
);
  final ColumnConfig currentPhaseName=new ColumnConfig(""String_Node_Str"",I18N.CONSTANTS.projectActivePhase(),150);
  currentPhaseName.setRenderer(new GridCellRenderer<ProjectDTOLight>(){
    @Override public Object render(    ProjectDTOLight model,    String property,    ColumnData config,    int rowIndex,    int colIndex,    ListStore<ProjectDTOLight> store,    Grid<ProjectDTOLight> grid){
      return createProjectGridText(model,model.getCurrentPhaseName());
    }
  }
);
  final ColumnConfig orgUnitColumn=new ColumnConfig(""String_Node_Str"",I18N.CONSTANTS.orgunit(),150);
  orgUnitColumn.setRenderer(new GridCellRenderer<ProjectDTOLight>(){
    @Override public Object render(    ProjectDTOLight model,    String property,    ColumnData config,    int rowIndex,    int colIndex,    ListStore<ProjectDTOLight> store,    Grid<ProjectDTOLight> grid){
      return createProjectGridText(model,(String)model.get(property));
    }
  }
);
  final ColumnConfig spentBudgetColumn=new ColumnConfig(""String_Node_Str"",I18N.CONSTANTS.projectSpendBudget(),100);
  spentBudgetColumn.setRenderer(new GridCellRenderer<ProjectDTOLight>(){
    @Override public Object render(    ProjectDTOLight model,    String property,    ColumnData config,    int rowIndex,    int colIndex,    ListStore<ProjectDTOLight> store,    Grid<ProjectDTOLight> grid){
      return new RatioBar(NumberUtils.ratio(model.getSpendBudget(),model.getPlannedBudget()));
    }
  }
);
  final ColumnConfig plannedBudgetColumn=new ColumnConfig(""String_Node_Str"",I18N.CONSTANTS.projectPlannedBudget(),75);
  plannedBudgetColumn.setHidden(true);
  final ColumnConfig spendBudgetColumn=new ColumnConfig(""String_Node_Str"",I18N.CONSTANTS.projectSpendBudget(),75);
  spendBudgetColumn.setHidden(true);
  final ColumnConfig receivedBudgetColumn=new ColumnConfig(""String_Node_Str"",I18N.CONSTANTS.projectReceivedBudget(),75);
  receivedBudgetColumn.setHidden(true);
  final ColumnConfig timeColumn=new ColumnConfig(""String_Node_Str"",I18N.CONSTANTS.projectTime(),100);
  timeColumn.setRenderer(new GridCellRenderer<ProjectDTOLight>(){
    @Override public Object render(    ProjectDTOLight model,    String property,    ColumnData config,    int rowIndex,    int colIndex,    ListStore<ProjectDTOLight> store,    Grid<ProjectDTOLight> grid){
      return new RatioBar(model.getElapsedTime());
    }
  }
);
  final ColumnConfig startDateColumn=new ColumnConfig(""String_Node_Str"",I18N.CONSTANTS.projectStartDate(),75);
  startDateColumn.setHidden(true);
  startDateColumn.setDateTimeFormat(format);
  startDateColumn.setRenderer(new GridCellRenderer<ProjectDTOLight>(){
    @Override public Object render(    ProjectDTOLight model,    String property,    ColumnData config,    int rowIndex,    int colIndex,    ListStore<ProjectDTOLight> store,    Grid<ProjectDTOLight> grid){
      final Date d=(Date)model.get(property);
      return createProjectGridText(model,d != null ? format.format(d) : ""String_Node_Str"");
    }
  }
);
  final ColumnConfig endDateColumn=new ColumnConfig(""String_Node_Str"",I18N.CONSTANTS.projectEndDate(),75);
  endDateColumn.setDateTimeFormat(format);
  endDateColumn.setHidden(true);
  endDateColumn.setRenderer(new GridCellRenderer<ProjectDTOLight>(){
    @Override public Object render(    ProjectDTOLight model,    String property,    ColumnData config,    int rowIndex,    int colIndex,    ListStore<ProjectDTOLight> store,    Grid<ProjectDTOLight> grid){
      final Date d=(Date)model.get(property);
      return createProjectGridText(model,d != null ? format.format(d) : ""String_Node_Str"");
    }
  }
);
  final ColumnConfig closeDateColumn=new ColumnConfig(""String_Node_Str"",I18N.CONSTANTS.projectClosedDate(),75);
  closeDateColumn.setDateTimeFormat(format);
  closeDateColumn.setHidden(true);
  closeDateColumn.setRenderer(new GridCellRenderer<ProjectDTOLight>(){
    @Override public Object render(    ProjectDTOLight model,    String property,    ColumnData config,    int rowIndex,    int colIndex,    ListStore<ProjectDTOLight> store,    Grid<ProjectDTOLight> grid){
      final Date d=(Date)model.get(property);
      return createProjectGridText(model,d != null ? format.format(d) : ""String_Node_Str"");
    }
  }
);
  final ColumnConfig activityColumn=new ColumnConfig(""String_Node_Str"",I18N.CONSTANTS.logFrameActivity(),100);
  activityColumn.setSortable(false);
  activityColumn.setRenderer(new GridCellRenderer<ProjectDTOLight>(){
    @Override public Object render(    ProjectDTOLight model,    String property,    ColumnData config,    int rowIndex,    int colIndex,    ListStore<ProjectDTOLight> store,    Grid<ProjectDTOLight> grid){
      return new RatioBar(model.getActivityAdvancement() != null ? model.getActivityAdvancement() : 0);
    }
  }
);
  final ColumnConfig categoryColumn=new ColumnConfig(""String_Node_Str"",I18N.CONSTANTS.category(),150);
  categoryColumn.setSortable(false);
  categoryColumn.setRenderer(new GridCellRenderer<ProjectDTOLight>(){
    @Override public Object render(    ProjectDTOLight model,    String property,    ColumnData config,    int rowIndex,    int colIndex,    ListStore<ProjectDTOLight> store,    Grid<ProjectDTOLight> grid){
      final Set<CategoryElementDTO> elements=model.getCategoryElements();
      final LayoutContainer panel=new LayoutContainer();
      panel.setLayout(new FlowLayout());
      final FlowData data=new FlowData(new Margins(0,5,0,0));
      if (elements != null) {
        for (        final CategoryElementDTO element : elements) {
          panel.add(CategoryIconProvider.getIcon(element),data);
        }
      }
      return panel;
    }
  }
);
  return new ColumnModel(Arrays.asList(starredIconColumn,codeColumn,titleColumn,currentPhaseName,orgUnitColumn,spentBudgetColumn,plannedBudgetColumn,spendBudgetColumn,receivedBudgetColumn,startDateColumn,endDateColumn,closeDateColumn,timeColumn,activityColumn,categoryColumn));
}","/** 
 * Builds and returns the columns model for the projects tree grid.
 * @return The project tree grid columns model.
 */
private ColumnModel getProjectGridColumnModel(){
  final DateTimeFormat format=DateUtils.DATE_SHORT;
  final ColumnConfig starredIconColumn=new ColumnConfig(""String_Node_Str"",""String_Node_Str"",24);
  starredIconColumn.setRenderer(new GridCellRenderer<ProjectDTOLight>(){
    private final DashboardImageBundle imageBundle=GWT.create(DashboardImageBundle.class);
    @Override public Object render(    final ProjectDTOLight model,    String property,    ColumnData config,    int rowIndex,    int colIndex,    final ListStore<ProjectDTOLight> store,    final Grid<ProjectDTOLight> grid){
      final Image icon;
      if (isFavoriteProject(authentication.getUserId(),model)) {
        icon=imageBundle.star().createImage();
        icon.setTitle(""String_Node_Str"");
      }
 else {
        icon=imageBundle.emptyStar().createImage();
        icon.setTitle(""String_Node_Str"");
      }
      icon.addClickHandler(new ClickHandler(){
        @Override public void onClick(        ClickEvent event){
          UpdateProjectFavorite updateCmd;
          int projectId=model.getId();
          if (projectId < 0) {
            projectId=(Integer)model.get(""String_Node_Str"");
          }
          if (isFavoriteProject(authentication.getUserId(),model)) {
            updateCmd=new UpdateProjectFavorite(projectId,UpdateProjectFavorite.UpdateType.REMOVE);
          }
 else {
            updateCmd=new UpdateProjectFavorite(projectId,UpdateProjectFavorite.UpdateType.ADD);
          }
          dispatcher.execute(updateCmd,new MaskingAsyncMonitor(projectTreePanel,I18N.CONSTANTS.loading()),new AsyncCallback<CreateResult>(){
            @Override public void onFailure(            Throwable caught){
              Log.error(""String_Node_Str"" + model.getId(),caught);
              MessageBox.alert(I18N.CONSTANTS.projectStarredError(),I18N.CONSTANTS.projectStarredErrorDetails(),null);
            }
            @Override public void onSuccess(            CreateResult result){
              if (result == null || result.getEntity() == null) {
                MessageBox.alert(I18N.CONSTANTS.projectStarredError(),I18N.CONSTANTS.projectStarredErrorDetails(),null);
              }
 else {
                ProjectDTOLight resultProject=(ProjectDTOLight)result.getEntity();
                model.setFavoriteUsers(resultProject.getFavoriteUsers());
                store.update(model);
                Notification.show(I18N.CONSTANTS.infoConfirmation(),I18N.CONSTANTS.projectStarred());
              }
            }
          }
);
        }
      }
);
      icon.addStyleName(""String_Node_Str"");
      return icon;
    }
  }
);
  final ColumnConfig codeColumn=new ColumnConfig(""String_Node_Str"",I18N.CONSTANTS.projectName(),110);
  codeColumn.setRenderer(new WidgetTreeGridCellRenderer<ProjectDTOLight>(){
    @Override public Widget getWidget(    ProjectDTOLight model,    String property,    ColumnData config,    int rowIndex,    int colIndex,    ListStore<ProjectDTOLight> store,    Grid<ProjectDTOLight> grid){
      Integer id=model.get(""String_Node_Str"");
      if (id <= 0) {
        id=model.get(""String_Node_Str"");
      }
      final Hyperlink h=new Hyperlink((String)model.get(property),true,ProjectPresenter.PAGE_ID.toString() + '!' + String.valueOf(id));
      if (!model.isLeaf()) {
        h.addStyleName(""String_Node_Str"");
      }
 else {
        h.addStyleName(""String_Node_Str"");
      }
      final com.google.gwt.user.client.ui.Grid panel=new com.google.gwt.user.client.ui.Grid(1,2);
      panel.setCellPadding(0);
      panel.setCellSpacing(0);
      panel.setWidget(0,0,FundingIconProvider.getProjectTypeIcon(model.getProjectModelType(authentication.getOrganizationId()),IconSize.SMALL_MEIDUM).createImage());
      panel.getCellFormatter().addStyleName(0,0,""String_Node_Str"");
      panel.setWidget(0,1,h);
      panel.getCellFormatter().addStyleName(0,1,""String_Node_Str"");
      return panel;
    }
  }
);
  final ColumnConfig titleColumn=new ColumnConfig(""String_Node_Str"",I18N.CONSTANTS.projectFullName(),230);
  titleColumn.setRenderer(new GridCellRenderer<ProjectDTOLight>(){
    @Override public Object render(    ProjectDTOLight model,    String property,    ColumnData config,    int rowIndex,    int colIndex,    ListStore<ProjectDTOLight> store,    Grid<ProjectDTOLight> grid){
      String title=(String)model.get(property);
      if (model.getParent() != null) {
        title=""String_Node_Str"" + title;
      }
      return createProjectGridText(model,title);
    }
  }
);
  final ColumnConfig currentPhaseName=new ColumnConfig(""String_Node_Str"",I18N.CONSTANTS.projectActivePhase(),150);
  currentPhaseName.setRenderer(new GridCellRenderer<ProjectDTOLight>(){
    @Override public Object render(    ProjectDTOLight model,    String property,    ColumnData config,    int rowIndex,    int colIndex,    ListStore<ProjectDTOLight> store,    Grid<ProjectDTOLight> grid){
      return createProjectGridText(model,model.getCurrentPhaseName());
    }
  }
);
  final ColumnConfig orgUnitColumn=new ColumnConfig(""String_Node_Str"",I18N.CONSTANTS.orgunit(),150);
  orgUnitColumn.setRenderer(new GridCellRenderer<ProjectDTOLight>(){
    @Override public Object render(    ProjectDTOLight model,    String property,    ColumnData config,    int rowIndex,    int colIndex,    ListStore<ProjectDTOLight> store,    Grid<ProjectDTOLight> grid){
      return createProjectGridText(model,(String)model.get(property));
    }
  }
);
  final ColumnConfig spentBudgetColumn=new ColumnConfig(""String_Node_Str"",I18N.CONSTANTS.projectSpendBudget(),100);
  spentBudgetColumn.setRenderer(new GridCellRenderer<ProjectDTOLight>(){
    @Override public Object render(    ProjectDTOLight model,    String property,    ColumnData config,    int rowIndex,    int colIndex,    ListStore<ProjectDTOLight> store,    Grid<ProjectDTOLight> grid){
      return new RatioBar(NumberUtils.ratio(model.getSpendBudget(),model.getPlannedBudget()));
    }
  }
);
  final ColumnConfig plannedBudgetColumn=new ColumnConfig(""String_Node_Str"",I18N.CONSTANTS.projectPlannedBudget(),75);
  plannedBudgetColumn.setHidden(true);
  final ColumnConfig spendBudgetColumn=new ColumnConfig(""String_Node_Str"",I18N.CONSTANTS.projectSpendBudget(),75);
  spendBudgetColumn.setHidden(true);
  final ColumnConfig receivedBudgetColumn=new ColumnConfig(""String_Node_Str"",I18N.CONSTANTS.projectReceivedBudget(),75);
  receivedBudgetColumn.setHidden(true);
  final ColumnConfig timeColumn=new ColumnConfig(""String_Node_Str"",I18N.CONSTANTS.projectTime(),100);
  timeColumn.setRenderer(new GridCellRenderer<ProjectDTOLight>(){
    @Override public Object render(    ProjectDTOLight model,    String property,    ColumnData config,    int rowIndex,    int colIndex,    ListStore<ProjectDTOLight> store,    Grid<ProjectDTOLight> grid){
      return new RatioBar(model.getElapsedTime());
    }
  }
);
  final ColumnConfig startDateColumn=new ColumnConfig(""String_Node_Str"",I18N.CONSTANTS.projectStartDate(),75);
  startDateColumn.setHidden(true);
  startDateColumn.setDateTimeFormat(format);
  startDateColumn.setRenderer(new GridCellRenderer<ProjectDTOLight>(){
    @Override public Object render(    ProjectDTOLight model,    String property,    ColumnData config,    int rowIndex,    int colIndex,    ListStore<ProjectDTOLight> store,    Grid<ProjectDTOLight> grid){
      final Date d=(Date)model.get(property);
      return createProjectGridText(model,d != null ? format.format(d) : ""String_Node_Str"");
    }
  }
);
  final ColumnConfig endDateColumn=new ColumnConfig(""String_Node_Str"",I18N.CONSTANTS.projectEndDate(),75);
  endDateColumn.setDateTimeFormat(format);
  endDateColumn.setHidden(true);
  endDateColumn.setRenderer(new GridCellRenderer<ProjectDTOLight>(){
    @Override public Object render(    ProjectDTOLight model,    String property,    ColumnData config,    int rowIndex,    int colIndex,    ListStore<ProjectDTOLight> store,    Grid<ProjectDTOLight> grid){
      final Date d=(Date)model.get(property);
      return createProjectGridText(model,d != null ? format.format(d) : ""String_Node_Str"");
    }
  }
);
  final ColumnConfig closeDateColumn=new ColumnConfig(""String_Node_Str"",I18N.CONSTANTS.projectClosedDate(),75);
  closeDateColumn.setDateTimeFormat(format);
  closeDateColumn.setHidden(true);
  closeDateColumn.setRenderer(new GridCellRenderer<ProjectDTOLight>(){
    @Override public Object render(    ProjectDTOLight model,    String property,    ColumnData config,    int rowIndex,    int colIndex,    ListStore<ProjectDTOLight> store,    Grid<ProjectDTOLight> grid){
      final Date d=(Date)model.get(property);
      return createProjectGridText(model,d != null ? format.format(d) : ""String_Node_Str"");
    }
  }
);
  final ColumnConfig activityColumn=new ColumnConfig(""String_Node_Str"",I18N.CONSTANTS.logFrameActivity(),100);
  activityColumn.setSortable(false);
  activityColumn.setRenderer(new GridCellRenderer<ProjectDTOLight>(){
    @Override public Object render(    ProjectDTOLight model,    String property,    ColumnData config,    int rowIndex,    int colIndex,    ListStore<ProjectDTOLight> store,    Grid<ProjectDTOLight> grid){
      return new RatioBar(model.getActivityAdvancement() != null ? model.getActivityAdvancement() : 0);
    }
  }
);
  final ColumnConfig categoryColumn=new ColumnConfig(""String_Node_Str"",I18N.CONSTANTS.category(),150);
  categoryColumn.setSortable(false);
  categoryColumn.setRenderer(new GridCellRenderer<ProjectDTOLight>(){
    @Override public Object render(    ProjectDTOLight model,    String property,    ColumnData config,    int rowIndex,    int colIndex,    ListStore<ProjectDTOLight> store,    Grid<ProjectDTOLight> grid){
      final Set<CategoryElementDTO> elements=model.getCategoryElements();
      final LayoutContainer panel=new LayoutContainer();
      panel.setLayout(new FlowLayout());
      final FlowData data=new FlowData(new Margins(0,5,0,0));
      if (elements != null) {
        for (        final CategoryElementDTO element : elements) {
          panel.add(CategoryIconProvider.getIcon(element),data);
        }
      }
      return panel;
    }
  }
);
  return new ColumnModel(Arrays.asList(starredIconColumn,codeColumn,titleColumn,currentPhaseName,orgUnitColumn,spentBudgetColumn,plannedBudgetColumn,spendBudgetColumn,receivedBudgetColumn,startDateColumn,endDateColumn,closeDateColumn,timeColumn,activityColumn,categoryColumn));
}",0.9988104867488224
35643,"/** 
 * Deserializes a custom string representation of a profile which has been generated by the   {@link #writeProfile(ProfileDTO)} method.
 * @param string The profile string representation.
 * @return The profile.
 */
public static ProfileDTO readProfile(String string){
  final ProfileDTO profile=new ProfileDTO();
  if (string != null) {
    final int startIndex=string.indexOf(START_TAG);
    final int endIndex=string.indexOf(END_TAG);
    if (startIndex != -1 && endIndex != -1) {
      final String profileAsString=string.substring(startIndex + START_TAG.length(),endIndex);
      final String[] fields=profileAsString.split(FIELD_SEPARATOR);
      if (fields.length >= 3) {
        profile.setName(fields[0]);
        profile.setGlobalPermissions(new HashSet<GlobalPermissionEnum>());
        final String[] globalPermissions=fields[1].split(GLOBAL_PERMISSION_SEPARATOR);
        for (        final String global : globalPermissions) {
          if (global != null) {
            try {
              profile.getGlobalPermissions().add(GlobalPermissionEnum.valueOf(global));
            }
 catch (            IllegalArgumentException e) {
              continue;
            }
          }
        }
        profile.setPrivacyGroups(new HashMap<PrivacyGroupDTO,PrivacyGroupPermissionEnum>());
        final String[] privacyGroups=fields[2].split(PRIVACY_GROUP_SEPARATOR);
        for (        final String group : privacyGroups) {
          if (group != null) {
            final String[] groupProperties=group.split(PRIVACY_GROUP_FIELD_SEPARATOR);
            if (groupProperties.length >= 4) {
              try {
                final PrivacyGroupDTO newGroup=new PrivacyGroupDTO();
                newGroup.setId(Integer.valueOf(groupProperties[0]));
                newGroup.setCode(Integer.valueOf(groupProperties[1]));
                newGroup.setTitle(groupProperties[2]);
                final PrivacyGroupPermissionEnum permission=PrivacyGroupPermissionEnum.valueOf(groupProperties[3]);
                profile.getPrivacyGroups().put(newGroup,permission);
              }
 catch (              NumberFormatException e) {
                continue;
              }
catch (              IllegalArgumentException e) {
                continue;
              }
catch (              NullPointerException e) {
                continue;
              }
            }
          }
        }
      }
    }
  }
  return profile;
}","/** 
 * Deserializes a custom string representation of a profile which has been generated by the   {@link #writeProfile(ProfileDTO)} method.
 * @param string The profile string representation.
 * @return The profile.
 */
public static ProfileDTO readProfile(String string){
  final ProfileDTO profile=new ProfileDTO();
  if (string != null) {
    final int startIndex=string.indexOf(START_TAG);
    final int endIndex=string.indexOf(END_TAG);
    if (startIndex != -1 && endIndex != -1) {
      final String profileAsString=string.substring(startIndex + START_TAG.length(),endIndex);
      final String[] fields=profileAsString.split(FIELD_SEPARATOR);
      if (fields.length >= 1) {
        profile.setName(fields[0]);
        if (fields.length >= 2) {
          profile.setGlobalPermissions(new HashSet<GlobalPermissionEnum>());
          final String[] globalPermissions=fields[1].split(GLOBAL_PERMISSION_SEPARATOR);
          for (          final String global : globalPermissions) {
            if (global != null) {
              try {
                profile.getGlobalPermissions().add(GlobalPermissionEnum.valueOf(global));
              }
 catch (              IllegalArgumentException e) {
                continue;
              }
            }
          }
          if (fields.length >= 3) {
            profile.setPrivacyGroups(new HashMap<PrivacyGroupDTO,PrivacyGroupPermissionEnum>());
            final String[] privacyGroups=fields[2].split(PRIVACY_GROUP_SEPARATOR);
            for (            final String group : privacyGroups) {
              if (group != null) {
                final String[] groupProperties=group.split(PRIVACY_GROUP_FIELD_SEPARATOR);
                if (groupProperties.length >= 4) {
                  try {
                    final PrivacyGroupDTO newGroup=new PrivacyGroupDTO();
                    newGroup.setId(Integer.valueOf(groupProperties[0]));
                    newGroup.setCode(Integer.valueOf(groupProperties[1]));
                    newGroup.setTitle(groupProperties[2]);
                    final PrivacyGroupPermissionEnum permission=PrivacyGroupPermissionEnum.valueOf(groupProperties[3]);
                    profile.getPrivacyGroups().put(newGroup,permission);
                  }
 catch (                  NumberFormatException e) {
                    continue;
                  }
catch (                  IllegalArgumentException e) {
                    continue;
                  }
catch (                  NullPointerException e) {
                    continue;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return profile;
}",0.9513534719497844
35644,"public ElementForm(Dispatcher dispatcher,final AsyncCallback<UpdateModelResult> callback,final FlexibleElementDTO flexibleElement,ProjectModelDTO projectModelToUpdate,OrgUnitModelDTO orgUnitModelToUpdate){
  final VBoxLayout mainPanelLayout=new VBoxLayout();
  mainPanelLayout.setVBoxLayoutAlign(VBoxLayout.VBoxLayoutAlign.STRETCH);
  setLayout(mainPanelLayout);
  setHeaderVisible(false);
  if (projectModelToUpdate != null) {
    isProject=true;
  }
 else {
    isProject=false;
  }
  this.dispatcher=dispatcher;
  this.projectModelToUpdate=projectModelToUpdate;
  this.orgUnitModelToUpdate=orgUnitModelToUpdate;
  this.flexibleElementToUpdate=flexibleElement;
  UIConstants constants=GWT.create(UIConstants.class);
  specificsPanel=new FormPanel();
  specificsPanel.setHeaderVisible(false);
  specificsPanel.setBorders(true);
  specificsPanel.hide();
  reportModelList=new ComboBox<ReportModelDTO>();
  reportModelList.setEditable(false);
  reportModelList.hide();
  reportModelList.setFieldLabel(I18N.CONSTANTS.adminReportName());
  reportModelList.setDisplayField(""String_Node_Str"");
  reportModelList.setValueField(""String_Node_Str"");
  reportModelList.setTriggerAction(TriggerAction.ALL);
  reportModelsStore=new ListStore<ReportModelDTO>();
  dispatcher.execute(new GetReportModels(),null,new AsyncCallback<ReportModelsListResult>(){
    @Override public void onFailure(    Throwable arg0){
      reportModelList.setEmptyText(I18N.CONSTANTS.adminChoiceProblem());
    }
    @Override public void onSuccess(    ReportModelsListResult result){
      reportModelList.setEmptyText(I18N.CONSTANTS.adminReportName());
      reportModelsStore.removeAll();
      if (result != null) {
        reportModelsStore.add(result.getList());
        reportModelsStore.commitChanges();
      }
      if (flexibleElement != null) {
        if (flexibleElement instanceof ReportElementDTO) {
          if (((ReportElementDTO)flexibleElement).getModelId() != null) {
            for (            ReportModelDTO reportModel : reportModelsStore.getModels()) {
              if (reportModel.getId() == ((ReportElementDTO)flexibleElement).getModelId()) {
                reportModelList.setValue(reportModel);
              }
            }
          }
        }
      }
    }
  }
);
  reportModelList.setStore(reportModelsStore);
  maxLimitField=new NumberField();
  maxLimitField.setFieldLabel(I18N.CONSTANTS.adminFlexibleMaxLimit());
  maxLimitField.hide();
  textAreaTypeList=new SimpleComboBox<String>();
  textAreaTypeList.setTriggerAction(TriggerAction.ALL);
  textAreaTypeList.setEditable(false);
  textAreaTypeList.hide();
  textAreaTypeList.setFieldLabel(I18N.CONSTANTS.adminFlexibleTextType());
  List<String> textTypes=new ArrayList<String>();
  textTypes.add(I18N.CONSTANTS.adminFlexibleTextTypeP());
  textTypes.add(I18N.CONSTANTS.adminFlexibleTextTypeT());
  textTypes.add(I18N.CONSTANTS.adminFlexibleTextTypeN());
  textTypes.add(I18N.CONSTANTS.adminFlexibleTextTypeD());
  textAreaTypeList.add(textTypes);
  minLimitField=new NumberField();
  minLimitField.setFieldLabel(I18N.CONSTANTS.adminFlexibleMinLimit());
  minLimitField.hide();
  lengthField=new NumberField();
  lengthField.setFieldLabel(I18N.CONSTANTS.adminFlexibleLength());
  lengthField.hide();
  isDecimal=new CheckBox();
  isDecimal.hide();
  isDecimal.setBoxLabel(""String_Node_Str"");
  isDecimal.setFieldLabel(I18N.CONSTANTS.adminFlexibleDecimal());
  isDecimal.setLabelSeparator(""String_Node_Str"");
  isMultipleQ=new CheckBox();
  isMultipleQ.hide();
  isMultipleQ.setBoxLabel(""String_Node_Str"");
  isMultipleQ.setFieldLabel(I18N.CONSTANTS.adminFlexibleMultipleQ());
  isMultipleQ.setLabelSeparator(""String_Node_Str"");
  isLinkedToQuality=new CheckBox();
  isLinkedToQuality.hide();
  isLinkedToQuality.setBoxLabel(""String_Node_Str"");
  isLinkedToQuality.setFieldLabel(I18N.CONSTANTS.adminFlexibleLinkedToQuality());
  isLinkedToQuality.setLabelSeparator(""String_Node_Str"");
  defaultNoCategory.setLabel(I18N.CONSTANTS.adminFlexibleNoLinkedCategory());
  defaultNoCategory.setId(-1);
  linkedCategory=new ComboBox<CategoryTypeDTO>();
  linkedCategory.setEditable(false);
  linkedCategory.hide();
  linkedCategory.setDisplayField(I18N.CONSTANTS.adminFlexibleNoLinkedCategory());
  linkedCategory.setFieldLabel(I18N.CONSTANTS.adminFlexibleLinkedCategory());
  linkedCategory.setDisplayField(""String_Node_Str"");
  linkedCategory.setValueField(""String_Node_Str"");
  linkedCategory.setTriggerAction(TriggerAction.ALL);
  final ListStore<CategoryTypeDTO> linkedCategoriesStore=new ListStore<CategoryTypeDTO>();
  linkedCategoriesStore.add(defaultNoCategory);
  dispatcher.execute(new GetCategories(),null,new AsyncCallback<CategoriesListResult>(){
    @Override public void onFailure(    Throwable arg0){
      linkedCategory.setEmptyText(I18N.CONSTANTS.adminChoiceProblem());
    }
    @Override public void onSuccess(    CategoriesListResult result){
      linkedCategory.setEmptyText(I18N.CONSTANTS.adminUserCreationProfileChoice());
      linkedCategoriesStore.removeAll();
      linkedCategoriesStore.add(defaultNoCategory);
      if (result != null) {
        linkedCategoriesStore.add(result.getList());
        linkedCategoriesStore.commitChanges();
      }
    }
  }
);
  linkedCategory.setStore(linkedCategoriesStore);
  for (int i=0; i < MAX_TENTATIVES_FOR_CHOICES; i++) {
    final ClickableLabel label=new ClickableLabel();
    label.addClickHandler(new ClickHandler(){
      @Override public void onClick(      ClickEvent arg0){
        label.hide();
        selectedChoicesLabels.remove(label.getText());
        if (selectedChoicesLabels.size() == 0) {
          linkedCategory.setEnabled(true);
        }
      }
    }
);
    label.hide();
    selectableChoices.put(i,label);
  }
  questionChoice=new TextField<String>();
  questionChoice.hide();
  qChoicesAddGrid.setVisible(false);
  qChoicesAddGrid.getCellFormatter().setWidth(0,0,(LABEL_WIDTH) + ""String_Node_Str"");
  qChoicesAddGrid.setCellPadding(0);
  qChoicesAddGrid.setCellSpacing(0);
  qChoicesAddGrid.setWidget(0,0,new LabelField(I18N.CONSTANTS.adminFlexibleQChoices() + ""String_Node_Str""));
  qChoicesAddGrid.setWidget(0,1,questionChoice);
  questionChoice.setHideLabel(false);
  addChoiceButton.hide();
  addChoiceButton.addListener(Events.OnClick,new Listener<ButtonEvent>(){
    @Override public void handleEvent(    ButtonEvent be){
      if (questionChoice.getValue() != null) {
        if (!selectedChoicesLabels.contains(questionChoice.getValue())) {
          if (num < MAX_TENTATIVES_FOR_CHOICES) {
            linkedCategory.setEnabled(false);
            selectableChoices.get(num).setText(questionChoice.getValue());
            selectableChoices.get(num).show();
            num++;
            selectedChoicesLabels.add(questionChoice.getValue());
          }
 else {
            MessageBox.alert(I18N.CONSTANTS.adminMaxAttempts(),I18N.CONSTANTS.adminMaxAttemptsQChoices(),null);
            ElementForm.this.removeFromParent();
          }
        }
      }
    }
  }
);
  qChoicesAddGrid.setWidget(0,2,addChoiceButton);
  linkedCategory.addListener(Events.Select,new Listener<BaseEvent>(){
    @Override public void handleEvent(    BaseEvent be){
      if (linkedCategory.getValue() == null || defaultNoCategory.equals(linkedCategory.getValue())) {
        questionChoice.setEnabled(true);
        addChoiceButton.setEnabled(true);
      }
 else {
        questionChoice.setEnabled(false);
        addChoiceButton.setEnabled(false);
        for (        ClickableLabel selected : selectableChoices.values()) {
          selected.setEnabled(false);
        }
      }
    }
  }
);
  posBanner=new SimpleComboBox<Integer>();
  posBanner.setTriggerAction(TriggerAction.ALL);
  posBanner.setEditable(false);
  posBanner.setFieldLabel(constants.adminFlexibleBannerPosition());
  posBanner.removeAll();
  for (int i=1; i < 7; i++) {
    posBanner.add(i);
  }
  posBanner.setAllowBlank(true);
  posBanner.setEnabled(false);
  posBanner.hide();
  isBanner=new CheckBox();
  isBanner.setFieldLabel(constants.Admin_BANNER());
  isBanner.setBoxLabel(""String_Node_Str"");
  isBanner.setValue(false);
  isBanner.addListener(Events.Change,new Listener<BaseEvent>(){
    @Override public void handleEvent(    BaseEvent be){
      if (isBanner.getValue()) {
        posBanner.removeAll();
        for (int i=1; i < 7; i++) {
          posBanner.add(i);
        }
        posBanner.setEnabled(true);
        posBanner.setAllowBlank(false);
      }
 else {
        posBanner.removeAll();
        posBanner.setValue(null);
        posBanner.setAllowBlank(true);
        posBanner.setEnabled(false);
      }
    }
  }
);
  isBanner.hide();
  specificsPanel.add(isBanner);
  specificsPanel.add(posBanner);
  specificsPanel.add(reportModelList);
  specificsPanel.add(textAreaTypeList);
  specificsPanel.add(lengthField);
  specificsPanel.add(isDecimal);
  specificsPanel.add(minLimitField);
  specificsPanel.add(maxLimitField);
  specificsPanel.add(isMultipleQ);
  specificsPanel.add(isLinkedToQuality);
  specificsPanel.add(linkedCategory);
  specificsPanel.add(qChoicesAddGrid);
  for (  ClickableLabel selected : selectableChoices.values()) {
    selected.hide();
    specificsPanel.add(selected);
  }
  commonPanel=new FormPanel();
  commonPanel.setHeaderVisible(false);
  htmlArea=new HtmlEditor();
  htmlArea.hide();
  htmlArea.setEnableAlignments(false);
  htmlArea.setEnableLinks(false);
  htmlArea.setEnableFont(false);
  htmlArea.setEnableLists(false);
  htmlArea.setEnableColors(false);
  htmlArea.setSourceEditMode(false);
  htmlArea.setHeight(75);
  htmlArea.setFieldLabel(constants.adminFlexibleName());
  if (flexibleElement != null && flexibleElement.getLabel() != null) {
    htmlArea.setValue(flexibleElement.getLabel());
    oldFieldProperties.put(AdminUtil.PROP_FX_NAME,flexibleElement.getLabel());
  }
  LabelField label=new LabelField();
  label.hide();
  label.setFieldLabel(constants.adminFlexibleName());
  if (flexibleElement != null && flexibleElement.getElementType() != null) {
    if (ElementTypeEnum.DEFAULT.equals(flexibleElement.getElementType())) {
      label.setText(DefaultFlexibleElementType.getName(((DefaultFlexibleElementDTO)flexibleElement).getType()));
      label.show();
      oldFieldProperties.put(AdminUtil.PROP_FX_NAME,DefaultFlexibleElementType.getName(((DefaultFlexibleElementDTO)flexibleElement).getType()));
      htmlArea.setValue(DefaultFlexibleElementType.getName(((DefaultFlexibleElementDTO)flexibleElement).getType()));
    }
 else {
      htmlArea.show();
    }
  }
 else {
    htmlArea.show();
  }
  commonPanel.add(label);
  commonPanel.add(htmlArea);
  typeList=new SimpleComboBox<String>();
  typeList.setEditable(false);
  typeList.addListener(Events.Select,new Listener<BaseEvent>(){
    @Override public void handleEvent(    BaseEvent be){
      hideAllSpecificAttributes();
      showSpecificAttributes(typeList.getSimpleValue(),flexibleElementToUpdate,true);
    }
  }
);
  typeList.setFieldLabel(constants.adminFlexibleType());
  typeList.setAllowBlank(false);
  typeList.setTriggerAction(TriggerAction.ALL);
  List<String> values=new ArrayList<String>();
  for (  ElementTypeEnum e : ElementTypeEnum.values()) {
    if (!ElementTypeEnum.DEFAULT.equals(e) && !ElementTypeEnum.TRIPLETS.equals(e))     values.add(ElementTypeEnum.getName(e));
  }
  typeList.add(values);
  if (flexibleElement != null && flexibleElement.getElementType() != null) {
    String typeOfElement=ElementTypeEnum.getName(flexibleElement.getElementType());
    typeList.setSimpleValue(typeOfElement);
    showSpecificAttributes(typeOfElement,flexibleElement,false);
    oldFieldProperties.put(AdminUtil.PROP_FX_TYPE,flexibleElement.getElementType());
    if (ElementTypeEnum.DEFAULT.equals(flexibleElement.getElementType())) {
      typeList.setEnabled(false);
    }
  }
 else   typeList.setEmptyText(I18N.CONSTANTS.adminFlexibleType());
  commonPanel.add(typeList);
  final ListStore<BaseModelData> containersStore=new ListStore<BaseModelData>();
  containerList=new ComboBox<BaseModelData>();
  containerList.setEditable(false);
  containerList.setDisplayField(""String_Node_Str"");
  containerList.setValueField(""String_Node_Str"");
  containerList.setFieldLabel(I18N.CONSTANTS.adminFlexibleContainer());
  containerList.setAllowBlank(false);
  containerList.setTriggerAction(TriggerAction.ALL);
  if (flexibleElement == null)   containerList.setEmptyText(I18N.CONSTANTS.adminFlexibleContainerChoice());
  final ListStore<LayoutGroupDTO> groupsStore=new ListStore<LayoutGroupDTO>();
  groupList=new ComboBox<LayoutGroupDTO>();
  groupList.setEditable(false);
  groupList.setFieldLabel(constants.adminFlexibleGroup());
  groupList.setDisplayField(""String_Node_Str"");
  groupList.setValueField(""String_Node_Str"");
  groupList.setTriggerAction(TriggerAction.ALL);
  containerList.addListener(Events.Select,new Listener<BaseEvent>(){
    @Override public void handleEvent(    BaseEvent be){
      LayoutDTO container=null;
      if (containerList.getValue() != null) {
        if (containerList.getValue() instanceof ProjectBannerDTO) {
          container=((ProjectBannerDTO)containerList.getValue()).getLayoutDTO();
          isBanner.setValue(true);
          posBanner.setAllowBlank(false);
          posBanner.setEnabled(true);
        }
 else         if (containerList.getValue() instanceof ProjectDetailsDTO) {
          container=((ProjectDetailsDTO)containerList.getValue()).getLayoutDTO();
        }
 else         if (containerList.getValue() instanceof PhaseModelDTO) {
          container=((PhaseModelDTO)containerList.getValue()).getLayoutDTO();
        }
 else         if (containerList.getValue() instanceof OrgUnitDetailsDTO) {
          container=((OrgUnitDetailsDTO)containerList.getValue()).getLayout();
        }
      }
      if (container != null) {
        groupsStore.removeAll();
        for (        LayoutGroupDTO lg : container.getLayoutGroupsDTO()) {
          groupsStore.add(lg);
        }
        groupList.setValue(groupsStore.getAt(0));
      }
    }
  }
);
  orderField=new NumberField();
  orderField.setAllowBlank(false);
  orderField.setFieldLabel(constants.adminFlexibleOrder());
  orderField.clear();
  oldFieldProperties.put(AdminUtil.PROP_FX_IN_BANNER,false);
  oldFieldProperties.put(AdminUtil.PROP_FX_POS_IN_BANNER,-1);
  if (isProject) {
    if (flexibleElement != null) {
      BaseModelData container=flexibleElement.getContainerModel();
      containerList.setValue(flexibleElement.getContainerModel());
      groupList.setValue(flexibleElement.getConstraint().getParentLayoutGroupDTO());
      orderField.setValue(flexibleElement.getConstraint().getSortOrder());
      groupsStore.removeAll();
      if (container instanceof PhaseModelDTO) {
        for (        LayoutGroupDTO groupChoice : ((PhaseModelDTO)container).getLayoutDTO().getLayoutGroupsDTO()) {
          groupsStore.add(groupChoice);
        }
      }
 else {
        for (        LayoutGroupDTO groupChoice : ((ProjectDetailsDTO)container).getLayoutDTO().getLayoutGroupsDTO()) {
          groupsStore.add(groupChoice);
        }
      }
      if (flexibleElement.getBannerConstraint() != null) {
        posBanner.setSimpleValue(flexibleElement.getBannerConstraint().getSortOrder());
        isBanner.setValue(true);
        oldFieldProperties.put(AdminUtil.PROP_FX_IN_BANNER,true);
        oldFieldProperties.put(AdminUtil.PROP_FX_POS_IN_BANNER,flexibleElement.getBannerConstraint().getSortOrder());
        oldFieldProperties.put(AdminUtil.PROP_FX_LC_BANNER,flexibleElement.getBannerConstraint());
      }
      oldFieldProperties.put(AdminUtil.PROP_FX_ORDER_IN_GROUP,new Integer(flexibleElement.getConstraint().getSortOrder()));
      oldFieldProperties.put(AdminUtil.PROP_FX_GROUP,flexibleElement.getConstraint().getParentLayoutGroupDTO());
      oldFieldProperties.put(AdminUtil.PROP_FX_LC,flexibleElement.getConstraint());
    }
    containersStore.add(projectModelToUpdate.getProjectDetailsDTO());
    for (    PhaseModelDTO p : projectModelToUpdate.getPhaseModelsDTO()) {
      containersStore.add(p);
    }
  }
 else {
    if (flexibleElement != null) {
      BaseModelData container=flexibleElement.getContainerModel();
      containerList.setValue(flexibleElement.getContainerModel());
      groupList.setValue(flexibleElement.getConstraint().getParentLayoutGroupDTO());
      orderField.setValue(flexibleElement.getConstraint().getSortOrder());
      groupsStore.removeAll();
      for (      LayoutGroupDTO groupChoice : ((OrgUnitDetailsDTO)container).getLayout().getLayoutGroupsDTO()) {
        groupsStore.add(groupChoice);
      }
      if (flexibleElement.getBannerConstraint() != null) {
        posBanner.setSimpleValue(flexibleElement.getBannerConstraint().getSortOrder());
        isBanner.setValue(true);
        oldFieldProperties.put(AdminUtil.PROP_FX_IN_BANNER,true);
        oldFieldProperties.put(AdminUtil.PROP_FX_POS_IN_BANNER,flexibleElement.getBannerConstraint().getSortOrder());
        oldFieldProperties.put(AdminUtil.PROP_FX_LC_BANNER,flexibleElement.getBannerConstraint());
      }
      oldFieldProperties.put(AdminUtil.PROP_FX_ORDER_IN_GROUP,new Integer(flexibleElement.getConstraint().getSortOrder()));
      oldFieldProperties.put(AdminUtil.PROP_FX_GROUP,flexibleElement.getConstraint().getParentLayoutGroupDTO());
      oldFieldProperties.put(AdminUtil.PROP_FX_LC,flexibleElement.getConstraint());
    }
    containersStore.add(orgUnitModelToUpdate.getDetails());
  }
  containerList.setStore(containersStore);
  commonPanel.add(containerList);
  groupList.setStore(groupsStore);
  commonPanel.add(groupList);
  commonPanel.add(orderField);
  validates=new CheckBox();
  validates.setFieldLabel(constants.adminFlexibleCompulsory());
  validates.setBoxLabel(""String_Node_Str"");
  validates.setValue(false);
  if (flexibleElement != null) {
    validates.setValue(flexibleElement.getValidates());
    oldFieldProperties.put(AdminUtil.PROP_FX_IS_COMPULSARY,flexibleElement.getValidates());
  }
  commonPanel.add(validates);
  privacyGroupsListCombo=new ComboBox<PrivacyGroupDTO>();
  privacyGroupsListCombo.setEditable(false);
  privacyGroupsListCombo.setFieldLabel(constants.adminPrivacyGroups());
  privacyGroupsListCombo.setDisplayField(""String_Node_Str"");
  privacyGroupsListCombo.setValueField(""String_Node_Str"");
  privacyGroupsListCombo.setTriggerAction(TriggerAction.ALL);
  final ListStore<PrivacyGroupDTO> privacyGroupsStore=new ListStore<PrivacyGroupDTO>();
  dispatcher.execute(new GetPrivacyGroups(),null,new AsyncCallback<PrivacyGroupsListResult>(){
    @Override public void onFailure(    Throwable arg0){
      privacyGroupsListCombo.setEmptyText(I18N.CONSTANTS.adminChoiceProblem());
    }
    @Override public void onSuccess(    PrivacyGroupsListResult result){
      privacyGroupsListCombo.setEmptyText(I18N.CONSTANTS.adminPrivacyGroupChoice());
      privacyGroupsStore.removeAll();
      if (result != null) {
        privacyGroupsStore.add(result.getList());
        privacyGroupsStore.commitChanges();
      }
    }
  }
);
  privacyGroupsListCombo.setStore(privacyGroupsStore);
  if (flexibleElement != null && flexibleElement.getPrivacyGroup() != null) {
    privacyGroupsListCombo.setValue(flexibleElement.getPrivacyGroup());
    oldFieldProperties.put(AdminUtil.PROP_FX_PRIVACY_GROUP,flexibleElement.getPrivacyGroup());
  }
  commonPanel.add(privacyGroupsListCombo);
  isAmendable=new CheckBox();
  isAmendable.setBoxLabel(""String_Node_Str"");
  isAmendable.setFieldLabel(constants.adminFlexibleAmendable());
  isAmendable.setValue(false);
  if (flexibleElement != null) {
    isAmendable.setValue(flexibleElement.getAmendable());
    oldFieldProperties.put(AdminUtil.PROP_FX_AMENDABLE,flexibleElement.getAmendable());
  }
  commonPanel.add(isAmendable);
  final Button createButton=new Button(I18N.CONSTANTS.save(),IconImageBundle.ICONS.save());
  createButton.addListener(Events.OnClick,new Listener<ButtonEvent>(){
    @Override public void handleEvent(    ButtonEvent be){
      createFlexibleElement(callback);
    }
  }
);
  final ContentPanel form=new ContentPanel();
  form.setHeight(450);
  form.setHeaderVisible(false);
  form.setLayout(new BorderLayout());
  final BorderLayoutData leftLayoutData=new BorderLayoutData(LayoutRegion.WEST);
  leftLayoutData.setSize(320);
  form.add(commonPanel,leftLayoutData);
  final BorderLayoutData rightLayoutData=new BorderLayoutData(LayoutRegion.CENTER);
  rightLayoutData.setMargins(new Margins(0,0,2,4));
  rightLayoutData.setSize(200);
  form.add(specificsPanel,rightLayoutData);
  final VBoxLayoutData topVBoxLayoutData=new VBoxLayoutData();
  topVBoxLayoutData.setFlex(1.0);
  add(form,topVBoxLayoutData);
  ToolBar toolbar=new ToolBar();
  toolbar.setAlignment(HorizontalAlignment.CENTER);
  toolbar.add(createButton);
  setBottomComponent(toolbar);
  layout();
}","public ElementForm(Dispatcher dispatcher,final AsyncCallback<UpdateModelResult> callback,final FlexibleElementDTO flexibleElement,ProjectModelDTO projectModelToUpdate,OrgUnitModelDTO orgUnitModelToUpdate){
  final VBoxLayout mainPanelLayout=new VBoxLayout();
  mainPanelLayout.setVBoxLayoutAlign(VBoxLayout.VBoxLayoutAlign.STRETCH);
  setLayout(mainPanelLayout);
  setHeaderVisible(false);
  if (projectModelToUpdate != null) {
    isProject=true;
  }
 else {
    isProject=false;
  }
  this.dispatcher=dispatcher;
  this.projectModelToUpdate=projectModelToUpdate;
  this.orgUnitModelToUpdate=orgUnitModelToUpdate;
  this.flexibleElementToUpdate=flexibleElement;
  UIConstants constants=GWT.create(UIConstants.class);
  specificsPanel=new FormPanel();
  specificsPanel.setHeaderVisible(false);
  specificsPanel.setBorders(true);
  specificsPanel.hide();
  reportModelList=new ComboBox<ReportModelDTO>();
  reportModelList.setEditable(false);
  reportModelList.hide();
  reportModelList.setFieldLabel(I18N.CONSTANTS.adminReportName());
  reportModelList.setDisplayField(""String_Node_Str"");
  reportModelList.setValueField(""String_Node_Str"");
  reportModelList.setTriggerAction(TriggerAction.ALL);
  reportModelsStore=new ListStore<ReportModelDTO>();
  dispatcher.execute(new GetReportModels(),null,new AsyncCallback<ReportModelsListResult>(){
    @Override public void onFailure(    Throwable arg0){
      reportModelList.setEmptyText(I18N.CONSTANTS.adminChoiceProblem());
    }
    @Override public void onSuccess(    ReportModelsListResult result){
      reportModelList.setEmptyText(I18N.CONSTANTS.adminReportName());
      reportModelsStore.removeAll();
      if (result != null) {
        reportModelsStore.add(result.getList());
        reportModelsStore.commitChanges();
      }
      if (flexibleElement != null) {
        if (flexibleElement instanceof ReportElementDTO) {
          if (((ReportElementDTO)flexibleElement).getModelId() != null) {
            for (            ReportModelDTO reportModel : reportModelsStore.getModels()) {
              if (reportModel.getId() == ((ReportElementDTO)flexibleElement).getModelId()) {
                reportModelList.setValue(reportModel);
              }
            }
          }
        }
      }
    }
  }
);
  reportModelList.setStore(reportModelsStore);
  maxLimitField=new NumberField();
  maxLimitField.setFieldLabel(I18N.CONSTANTS.adminFlexibleMaxLimit());
  maxLimitField.hide();
  textAreaTypeList=new SimpleComboBox<String>();
  textAreaTypeList.setTriggerAction(TriggerAction.ALL);
  textAreaTypeList.setEditable(false);
  textAreaTypeList.hide();
  textAreaTypeList.setFieldLabel(I18N.CONSTANTS.adminFlexibleTextType());
  List<String> textTypes=new ArrayList<String>();
  textTypes.add(I18N.CONSTANTS.adminFlexibleTextTypeP());
  textTypes.add(I18N.CONSTANTS.adminFlexibleTextTypeT());
  textTypes.add(I18N.CONSTANTS.adminFlexibleTextTypeN());
  textTypes.add(I18N.CONSTANTS.adminFlexibleTextTypeD());
  textAreaTypeList.add(textTypes);
  minLimitField=new NumberField();
  minLimitField.setFieldLabel(I18N.CONSTANTS.adminFlexibleMinLimit());
  minLimitField.hide();
  lengthField=new NumberField();
  lengthField.setFieldLabel(I18N.CONSTANTS.adminFlexibleLength());
  lengthField.hide();
  isDecimal=new CheckBox();
  isDecimal.hide();
  isDecimal.setBoxLabel(""String_Node_Str"");
  isDecimal.setFieldLabel(I18N.CONSTANTS.adminFlexibleDecimal());
  isDecimal.setLabelSeparator(""String_Node_Str"");
  isMultipleQ=new CheckBox();
  isMultipleQ.hide();
  isMultipleQ.setBoxLabel(""String_Node_Str"");
  isMultipleQ.setFieldLabel(I18N.CONSTANTS.adminFlexibleMultipleQ());
  isMultipleQ.setLabelSeparator(""String_Node_Str"");
  isLinkedToQuality=new CheckBox();
  isLinkedToQuality.hide();
  isLinkedToQuality.setBoxLabel(""String_Node_Str"");
  isLinkedToQuality.setFieldLabel(I18N.CONSTANTS.adminFlexibleLinkedToQuality());
  isLinkedToQuality.setLabelSeparator(""String_Node_Str"");
  defaultNoCategory.setLabel(I18N.CONSTANTS.adminFlexibleNoLinkedCategory());
  defaultNoCategory.setId(-1);
  linkedCategory=new ComboBox<CategoryTypeDTO>();
  linkedCategory.setEditable(false);
  linkedCategory.hide();
  linkedCategory.setDisplayField(I18N.CONSTANTS.adminFlexibleNoLinkedCategory());
  linkedCategory.setFieldLabel(I18N.CONSTANTS.adminFlexibleLinkedCategory());
  linkedCategory.setDisplayField(""String_Node_Str"");
  linkedCategory.setValueField(""String_Node_Str"");
  linkedCategory.setTriggerAction(TriggerAction.ALL);
  final ListStore<CategoryTypeDTO> linkedCategoriesStore=new ListStore<CategoryTypeDTO>();
  linkedCategoriesStore.add(defaultNoCategory);
  dispatcher.execute(new GetCategories(),null,new AsyncCallback<CategoriesListResult>(){
    @Override public void onFailure(    Throwable arg0){
      linkedCategory.setEmptyText(I18N.CONSTANTS.adminChoiceProblem());
    }
    @Override public void onSuccess(    CategoriesListResult result){
      linkedCategory.setEmptyText(I18N.CONSTANTS.adminUserCreationProfileChoice());
      linkedCategoriesStore.removeAll();
      linkedCategoriesStore.add(defaultNoCategory);
      if (result != null) {
        linkedCategoriesStore.add(result.getList());
        linkedCategoriesStore.commitChanges();
      }
    }
  }
);
  linkedCategory.setStore(linkedCategoriesStore);
  for (int i=0; i < MAX_TENTATIVES_FOR_CHOICES; i++) {
    final ClickableLabel label=new ClickableLabel();
    label.addClickHandler(new ClickHandler(){
      @Override public void onClick(      ClickEvent arg0){
        label.hide();
        selectedChoicesLabels.remove(label.getText());
        if (selectedChoicesLabels.size() == 0) {
          linkedCategory.setEnabled(true);
        }
      }
    }
);
    label.hide();
    selectableChoices.put(i,label);
  }
  questionChoice=new TextField<String>();
  questionChoice.hide();
  qChoicesAddGrid.setVisible(false);
  qChoicesAddGrid.getCellFormatter().setWidth(0,0,(LABEL_WIDTH) + ""String_Node_Str"");
  qChoicesAddGrid.setCellPadding(0);
  qChoicesAddGrid.setCellSpacing(0);
  qChoicesAddGrid.setWidget(0,0,new LabelField(I18N.CONSTANTS.adminFlexibleQChoices() + ""String_Node_Str""));
  qChoicesAddGrid.setWidget(0,1,questionChoice);
  questionChoice.setHideLabel(false);
  addChoiceButton.hide();
  addChoiceButton.addListener(Events.OnClick,new Listener<ButtonEvent>(){
    @Override public void handleEvent(    ButtonEvent be){
      if (questionChoice.getValue() != null) {
        if (!selectedChoicesLabels.contains(questionChoice.getValue())) {
          if (num < MAX_TENTATIVES_FOR_CHOICES) {
            linkedCategory.setEnabled(false);
            selectableChoices.get(num).setText(questionChoice.getValue());
            selectableChoices.get(num).show();
            num++;
            selectedChoicesLabels.add(questionChoice.getValue());
          }
 else {
            MessageBox.alert(I18N.CONSTANTS.adminMaxAttempts(),I18N.CONSTANTS.adminMaxAttemptsQChoices(),null);
            ElementForm.this.removeFromParent();
          }
        }
      }
    }
  }
);
  qChoicesAddGrid.setWidget(0,2,addChoiceButton);
  linkedCategory.addListener(Events.Select,new Listener<BaseEvent>(){
    @Override public void handleEvent(    BaseEvent be){
      if (linkedCategory.getValue() == null || defaultNoCategory.equals(linkedCategory.getValue())) {
        questionChoice.setEnabled(true);
        addChoiceButton.setEnabled(true);
      }
 else {
        questionChoice.setEnabled(false);
        addChoiceButton.setEnabled(false);
        for (        ClickableLabel selected : selectableChoices.values()) {
          selected.setEnabled(false);
        }
      }
    }
  }
);
  posBanner=new SimpleComboBox<Integer>();
  posBanner.setTriggerAction(TriggerAction.ALL);
  posBanner.setEditable(false);
  posBanner.setFieldLabel(constants.adminFlexibleBannerPosition());
  posBanner.removeAll();
  for (int i=1; i < 7; i++) {
    posBanner.add(i);
  }
  posBanner.setAllowBlank(true);
  posBanner.setEnabled(false);
  posBanner.hide();
  isBanner=new CheckBox();
  isBanner.setFieldLabel(constants.Admin_BANNER());
  isBanner.setBoxLabel(""String_Node_Str"");
  isBanner.setValue(false);
  isBanner.addListener(Events.Change,new Listener<BaseEvent>(){
    @Override public void handleEvent(    BaseEvent be){
      if (isBanner.getValue()) {
        posBanner.removeAll();
        for (int i=1; i < 7; i++) {
          posBanner.add(i);
        }
        posBanner.setEnabled(true);
        posBanner.setAllowBlank(false);
      }
 else {
        posBanner.removeAll();
        posBanner.setValue(null);
        posBanner.setAllowBlank(true);
        posBanner.setEnabled(false);
      }
    }
  }
);
  isBanner.hide();
  specificsPanel.add(isBanner);
  specificsPanel.add(posBanner);
  specificsPanel.add(reportModelList);
  specificsPanel.add(textAreaTypeList);
  specificsPanel.add(lengthField);
  specificsPanel.add(isDecimal);
  specificsPanel.add(minLimitField);
  specificsPanel.add(maxLimitField);
  specificsPanel.add(isMultipleQ);
  specificsPanel.add(isLinkedToQuality);
  specificsPanel.add(linkedCategory);
  specificsPanel.add(qChoicesAddGrid);
  for (  ClickableLabel selected : selectableChoices.values()) {
    selected.hide();
    specificsPanel.add(selected);
  }
  commonPanel=new FormPanel();
  commonPanel.setHeaderVisible(false);
  htmlArea=new HtmlEditor();
  htmlArea.hide();
  htmlArea.setEnableAlignments(false);
  htmlArea.setEnableLinks(false);
  htmlArea.setEnableFont(false);
  htmlArea.setEnableLists(false);
  htmlArea.setEnableColors(false);
  htmlArea.setSourceEditMode(false);
  htmlArea.setHeight(75);
  htmlArea.setFieldLabel(constants.adminFlexibleName());
  if (flexibleElement != null && flexibleElement.getLabel() != null) {
    htmlArea.setValue(flexibleElement.getLabel());
    oldFieldProperties.put(AdminUtil.PROP_FX_NAME,flexibleElement.getLabel());
  }
  LabelField label=new LabelField();
  label.hide();
  label.setFieldLabel(constants.adminFlexibleName());
  if (flexibleElement != null && flexibleElement.getElementType() != null) {
    if (ElementTypeEnum.DEFAULT.equals(flexibleElement.getElementType())) {
      label.setText(DefaultFlexibleElementType.getName(((DefaultFlexibleElementDTO)flexibleElement).getType()));
      label.show();
      oldFieldProperties.put(AdminUtil.PROP_FX_NAME,DefaultFlexibleElementType.getName(((DefaultFlexibleElementDTO)flexibleElement).getType()));
      htmlArea.setValue(DefaultFlexibleElementType.getName(((DefaultFlexibleElementDTO)flexibleElement).getType()));
    }
 else {
      htmlArea.show();
    }
  }
 else {
    htmlArea.show();
  }
  commonPanel.add(label);
  commonPanel.add(htmlArea);
  typeList=new SimpleComboBox<String>();
  typeList.setEditable(false);
  typeList.addListener(Events.Select,new Listener<BaseEvent>(){
    @Override public void handleEvent(    BaseEvent be){
      hideAllSpecificAttributes();
      showSpecificAttributes(typeList.getSimpleValue(),flexibleElementToUpdate,true);
    }
  }
);
  typeList.setFieldLabel(constants.adminFlexibleType());
  typeList.setAllowBlank(false);
  typeList.setTriggerAction(TriggerAction.ALL);
  List<String> values=new ArrayList<String>();
  for (  ElementTypeEnum e : ElementTypeEnum.values()) {
    if (!ElementTypeEnum.DEFAULT.equals(e) && !ElementTypeEnum.TRIPLETS.equals(e) && !ElementTypeEnum.INDICATORS.equals(e))     values.add(ElementTypeEnum.getName(e));
  }
  typeList.add(values);
  if (flexibleElement != null && flexibleElement.getElementType() != null) {
    String typeOfElement=ElementTypeEnum.getName(flexibleElement.getElementType());
    typeList.setSimpleValue(typeOfElement);
    showSpecificAttributes(typeOfElement,flexibleElement,false);
    oldFieldProperties.put(AdminUtil.PROP_FX_TYPE,flexibleElement.getElementType());
    if (ElementTypeEnum.DEFAULT.equals(flexibleElement.getElementType())) {
      typeList.setEnabled(false);
    }
  }
 else   typeList.setEmptyText(I18N.CONSTANTS.adminFlexibleType());
  commonPanel.add(typeList);
  final ListStore<BaseModelData> containersStore=new ListStore<BaseModelData>();
  containerList=new ComboBox<BaseModelData>();
  containerList.setEditable(false);
  containerList.setDisplayField(""String_Node_Str"");
  containerList.setValueField(""String_Node_Str"");
  containerList.setFieldLabel(I18N.CONSTANTS.adminFlexibleContainer());
  containerList.setAllowBlank(false);
  containerList.setTriggerAction(TriggerAction.ALL);
  if (flexibleElement == null)   containerList.setEmptyText(I18N.CONSTANTS.adminFlexibleContainerChoice());
  final ListStore<LayoutGroupDTO> groupsStore=new ListStore<LayoutGroupDTO>();
  groupList=new ComboBox<LayoutGroupDTO>();
  groupList.setEditable(false);
  groupList.setFieldLabel(constants.adminFlexibleGroup());
  groupList.setDisplayField(""String_Node_Str"");
  groupList.setValueField(""String_Node_Str"");
  groupList.setTriggerAction(TriggerAction.ALL);
  containerList.addListener(Events.Select,new Listener<BaseEvent>(){
    @Override public void handleEvent(    BaseEvent be){
      LayoutDTO container=null;
      if (containerList.getValue() != null) {
        if (containerList.getValue() instanceof ProjectBannerDTO) {
          container=((ProjectBannerDTO)containerList.getValue()).getLayoutDTO();
          isBanner.setValue(true);
          posBanner.setAllowBlank(false);
          posBanner.setEnabled(true);
        }
 else         if (containerList.getValue() instanceof ProjectDetailsDTO) {
          container=((ProjectDetailsDTO)containerList.getValue()).getLayoutDTO();
        }
 else         if (containerList.getValue() instanceof PhaseModelDTO) {
          container=((PhaseModelDTO)containerList.getValue()).getLayoutDTO();
        }
 else         if (containerList.getValue() instanceof OrgUnitDetailsDTO) {
          container=((OrgUnitDetailsDTO)containerList.getValue()).getLayout();
        }
      }
      if (container != null) {
        groupsStore.removeAll();
        for (        LayoutGroupDTO lg : container.getLayoutGroupsDTO()) {
          groupsStore.add(lg);
        }
        groupList.setValue(groupsStore.getAt(0));
      }
    }
  }
);
  orderField=new NumberField();
  orderField.setAllowBlank(false);
  orderField.setFieldLabel(constants.adminFlexibleOrder());
  orderField.clear();
  oldFieldProperties.put(AdminUtil.PROP_FX_IN_BANNER,false);
  oldFieldProperties.put(AdminUtil.PROP_FX_POS_IN_BANNER,-1);
  if (isProject) {
    if (flexibleElement != null) {
      BaseModelData container=flexibleElement.getContainerModel();
      containerList.setValue(flexibleElement.getContainerModel());
      groupList.setValue(flexibleElement.getConstraint().getParentLayoutGroupDTO());
      orderField.setValue(flexibleElement.getConstraint().getSortOrder());
      groupsStore.removeAll();
      if (container instanceof PhaseModelDTO) {
        for (        LayoutGroupDTO groupChoice : ((PhaseModelDTO)container).getLayoutDTO().getLayoutGroupsDTO()) {
          groupsStore.add(groupChoice);
        }
      }
 else {
        for (        LayoutGroupDTO groupChoice : ((ProjectDetailsDTO)container).getLayoutDTO().getLayoutGroupsDTO()) {
          groupsStore.add(groupChoice);
        }
      }
      if (flexibleElement.getBannerConstraint() != null) {
        posBanner.setSimpleValue(flexibleElement.getBannerConstraint().getSortOrder());
        isBanner.setValue(true);
        oldFieldProperties.put(AdminUtil.PROP_FX_IN_BANNER,true);
        oldFieldProperties.put(AdminUtil.PROP_FX_POS_IN_BANNER,flexibleElement.getBannerConstraint().getSortOrder());
        oldFieldProperties.put(AdminUtil.PROP_FX_LC_BANNER,flexibleElement.getBannerConstraint());
      }
      oldFieldProperties.put(AdminUtil.PROP_FX_ORDER_IN_GROUP,new Integer(flexibleElement.getConstraint().getSortOrder()));
      oldFieldProperties.put(AdminUtil.PROP_FX_GROUP,flexibleElement.getConstraint().getParentLayoutGroupDTO());
      oldFieldProperties.put(AdminUtil.PROP_FX_LC,flexibleElement.getConstraint());
    }
    containersStore.add(projectModelToUpdate.getProjectDetailsDTO());
    for (    PhaseModelDTO p : projectModelToUpdate.getPhaseModelsDTO()) {
      containersStore.add(p);
    }
  }
 else {
    if (flexibleElement != null) {
      BaseModelData container=flexibleElement.getContainerModel();
      containerList.setValue(flexibleElement.getContainerModel());
      groupList.setValue(flexibleElement.getConstraint().getParentLayoutGroupDTO());
      orderField.setValue(flexibleElement.getConstraint().getSortOrder());
      groupsStore.removeAll();
      for (      LayoutGroupDTO groupChoice : ((OrgUnitDetailsDTO)container).getLayout().getLayoutGroupsDTO()) {
        groupsStore.add(groupChoice);
      }
      if (flexibleElement.getBannerConstraint() != null) {
        posBanner.setSimpleValue(flexibleElement.getBannerConstraint().getSortOrder());
        isBanner.setValue(true);
        oldFieldProperties.put(AdminUtil.PROP_FX_IN_BANNER,true);
        oldFieldProperties.put(AdminUtil.PROP_FX_POS_IN_BANNER,flexibleElement.getBannerConstraint().getSortOrder());
        oldFieldProperties.put(AdminUtil.PROP_FX_LC_BANNER,flexibleElement.getBannerConstraint());
      }
      oldFieldProperties.put(AdminUtil.PROP_FX_ORDER_IN_GROUP,new Integer(flexibleElement.getConstraint().getSortOrder()));
      oldFieldProperties.put(AdminUtil.PROP_FX_GROUP,flexibleElement.getConstraint().getParentLayoutGroupDTO());
      oldFieldProperties.put(AdminUtil.PROP_FX_LC,flexibleElement.getConstraint());
    }
    containersStore.add(orgUnitModelToUpdate.getDetails());
  }
  containerList.setStore(containersStore);
  commonPanel.add(containerList);
  groupList.setStore(groupsStore);
  commonPanel.add(groupList);
  commonPanel.add(orderField);
  validates=new CheckBox();
  validates.setFieldLabel(constants.adminFlexibleCompulsory());
  validates.setBoxLabel(""String_Node_Str"");
  validates.setValue(false);
  if (flexibleElement != null) {
    validates.setValue(flexibleElement.getValidates());
    oldFieldProperties.put(AdminUtil.PROP_FX_IS_COMPULSARY,flexibleElement.getValidates());
  }
  commonPanel.add(validates);
  privacyGroupsListCombo=new ComboBox<PrivacyGroupDTO>();
  privacyGroupsListCombo.setEditable(false);
  privacyGroupsListCombo.setFieldLabel(constants.adminPrivacyGroups());
  privacyGroupsListCombo.setDisplayField(""String_Node_Str"");
  privacyGroupsListCombo.setValueField(""String_Node_Str"");
  privacyGroupsListCombo.setTriggerAction(TriggerAction.ALL);
  final ListStore<PrivacyGroupDTO> privacyGroupsStore=new ListStore<PrivacyGroupDTO>();
  dispatcher.execute(new GetPrivacyGroups(),null,new AsyncCallback<PrivacyGroupsListResult>(){
    @Override public void onFailure(    Throwable arg0){
      privacyGroupsListCombo.setEmptyText(I18N.CONSTANTS.adminChoiceProblem());
    }
    @Override public void onSuccess(    PrivacyGroupsListResult result){
      privacyGroupsListCombo.setEmptyText(I18N.CONSTANTS.adminPrivacyGroupChoice());
      privacyGroupsStore.removeAll();
      if (result != null) {
        privacyGroupsStore.add(result.getList());
        privacyGroupsStore.commitChanges();
      }
    }
  }
);
  privacyGroupsListCombo.setStore(privacyGroupsStore);
  if (flexibleElement != null && flexibleElement.getPrivacyGroup() != null) {
    privacyGroupsListCombo.setValue(flexibleElement.getPrivacyGroup());
    oldFieldProperties.put(AdminUtil.PROP_FX_PRIVACY_GROUP,flexibleElement.getPrivacyGroup());
  }
  commonPanel.add(privacyGroupsListCombo);
  isAmendable=new CheckBox();
  isAmendable.setBoxLabel(""String_Node_Str"");
  isAmendable.setFieldLabel(constants.adminFlexibleAmendable());
  isAmendable.setValue(false);
  if (flexibleElement != null) {
    isAmendable.setValue(flexibleElement.getAmendable());
    oldFieldProperties.put(AdminUtil.PROP_FX_AMENDABLE,flexibleElement.getAmendable());
  }
  commonPanel.add(isAmendable);
  final Button createButton=new Button(I18N.CONSTANTS.save(),IconImageBundle.ICONS.save());
  createButton.addListener(Events.OnClick,new Listener<ButtonEvent>(){
    @Override public void handleEvent(    ButtonEvent be){
      createFlexibleElement(callback);
    }
  }
);
  final ContentPanel form=new ContentPanel();
  form.setHeight(450);
  form.setHeaderVisible(false);
  form.setLayout(new BorderLayout());
  final BorderLayoutData leftLayoutData=new BorderLayoutData(LayoutRegion.WEST);
  leftLayoutData.setSize(320);
  form.add(commonPanel,leftLayoutData);
  final BorderLayoutData rightLayoutData=new BorderLayoutData(LayoutRegion.CENTER);
  rightLayoutData.setMargins(new Margins(0,0,2,4));
  rightLayoutData.setSize(200);
  form.add(specificsPanel,rightLayoutData);
  final VBoxLayoutData topVBoxLayoutData=new VBoxLayoutData();
  topVBoxLayoutData.setFlex(1.0);
  add(form,topVBoxLayoutData);
  ToolBar toolbar=new ToolBar();
  toolbar.setAlignment(HorizontalAlignment.CENTER);
  toolbar.add(createButton);
  setBottomComponent(toolbar);
  layout();
}",0.9990183637800176
35645,"private void buildTree(){
  final ArrayList<ColumnConfig> columns=new ArrayList<ColumnConfig>();
  final ColumnConfig nameColumn=new ColumnConfig();
  nameColumn.setId(""String_Node_Str"");
  nameColumn.setHeader(I18N.CONSTANTS.projectName());
  nameColumn.setRenderer(new TreeGridCellRenderer<OrgUnitDTOLight>());
  nameColumn.setWidth(150);
  final ColumnConfig fullNameColumn=new ColumnConfig();
  fullNameColumn.setId(""String_Node_Str"");
  fullNameColumn.setHeader(I18N.CONSTANTS.projectFullName());
  final ColumnConfig countryColumn=new ColumnConfig();
  countryColumn.setId(""String_Node_Str"");
  countryColumn.setHeader(I18N.CONSTANTS.projectCountry());
  countryColumn.setWidth(100);
  countryColumn.setRenderer(new GridCellRenderer<OrgUnitDTOLight>(){
    @Override public Object render(    final OrgUnitDTOLight model,    String property,    ColumnData config,    int rowIndex,    int colIndex,    ListStore<OrgUnitDTOLight> store,    Grid<OrgUnitDTOLight> grid){
      final CountryDTO country=(CountryDTO)model.get(property);
      if (country == null) {
        return ""String_Node_Str"";
      }
 else {
        return country.getName() + ""String_Node_Str"" + country.getCodeISO()+ ')';
      }
    }
  }
);
  final TreeStore<OrgUnitDTOLight> store=new TreeStore<OrgUnitDTOLight>();
  store.setSortInfo(new SortInfo(""String_Node_Str"",SortDir.ASC));
  store.setStoreSorter(new StoreSorter<OrgUnitDTOLight>(){
    @Override public int compare(    Store<OrgUnitDTOLight> store,    OrgUnitDTOLight m1,    OrgUnitDTOLight m2,    String property){
      if (""String_Node_Str"".equals(property)) {
        return ((CountryDTO)m1.get(property)).getName().compareToIgnoreCase(((CountryDTO)m2.get(property)).getName());
      }
 else {
        return super.compare(store,m1,m2,property);
      }
    }
  }
);
  selectionModel=new TreeGridCheckboxSelectionModel<OrgUnitDTOLight>();
  columns.add(selectionModel.getColumn());
  columns.add(nameColumn);
  columns.add(fullNameColumn);
  columns.add(countryColumn);
  tree=new TreeGrid<OrgUnitDTOLight>(store,new ColumnModel(columns));
  tree.setBorders(true);
  tree.getStyle().setLeafIcon(OrgUnitImageBundle.ICONS.orgUnitSmall());
  tree.getStyle().setNodeCloseIcon(OrgUnitImageBundle.ICONS.orgUnitSmall());
  tree.getStyle().setNodeOpenIcon(OrgUnitImageBundle.ICONS.orgUnitSmallTransparent());
  tree.setAutoExpandColumn(""String_Node_Str"");
  tree.setTrackMouseOver(false);
  tree.setSelectionModel(selectionModel);
  tree.addPlugin(selectionModel);
}","private void buildTree(){
  final ArrayList<ColumnConfig> columns=new ArrayList<ColumnConfig>();
  final ColumnConfig nameColumn=new ColumnConfig();
  nameColumn.setId(""String_Node_Str"");
  nameColumn.setHeader(I18N.CONSTANTS.projectName());
  nameColumn.setRenderer(new TreeGridCellRenderer<OrgUnitDTOLight>());
  nameColumn.setWidth(150);
  final ColumnConfig fullNameColumn=new ColumnConfig();
  fullNameColumn.setId(""String_Node_Str"");
  fullNameColumn.setHeader(I18N.CONSTANTS.projectFullName());
  final ColumnConfig countryColumn=new ColumnConfig();
  countryColumn.setId(""String_Node_Str"");
  countryColumn.setHeader(I18N.CONSTANTS.projectCountry());
  countryColumn.setWidth(100);
  countryColumn.setRenderer(new GridCellRenderer<OrgUnitDTOLight>(){
    @Override public Object render(    final OrgUnitDTOLight model,    String property,    ColumnData config,    int rowIndex,    int colIndex,    ListStore<OrgUnitDTOLight> store,    Grid<OrgUnitDTOLight> grid){
      final CountryDTO country=(CountryDTO)model.get(property);
      if (country == null) {
        return ""String_Node_Str"";
      }
 else {
        return country.getName() + ""String_Node_Str"" + country.getCodeISO()+ ')';
      }
    }
  }
);
  final ColumnConfig modelColumn=new ColumnConfig();
  modelColumn.setId(""String_Node_Str"");
  modelColumn.setHeader(I18N.CONSTANTS.projectModel());
  modelColumn.setWidth(200);
  modelColumn.setRenderer(new GridCellRenderer<OrgUnitDTOLight>(){
    @Override public Object render(    OrgUnitDTOLight model,    String property,    ColumnData config,    int rowIndex,    int colIndex,    ListStore<OrgUnitDTOLight> store,    Grid<OrgUnitDTOLight> grid){
      final OrgUnitModelDTO orgUnitModel=(OrgUnitModelDTO)model.get(property);
      if (orgUnitModel == null) {
        return ""String_Node_Str"";
      }
 else {
        return orgUnitModel.getName();
      }
    }
  }
);
  final TreeStore<OrgUnitDTOLight> store=new TreeStore<OrgUnitDTOLight>();
  store.setSortInfo(new SortInfo(""String_Node_Str"",SortDir.ASC));
  store.setStoreSorter(new StoreSorter<OrgUnitDTOLight>(){
    @Override public int compare(    Store<OrgUnitDTOLight> store,    OrgUnitDTOLight m1,    OrgUnitDTOLight m2,    String property){
      if (""String_Node_Str"".equals(property)) {
        return ((CountryDTO)m1.get(property)).getName().compareToIgnoreCase(((CountryDTO)m2.get(property)).getName());
      }
 else {
        return super.compare(store,m1,m2,property);
      }
    }
  }
);
  selectionModel=new TreeGridCheckboxSelectionModel<OrgUnitDTOLight>();
  columns.add(selectionModel.getColumn());
  columns.add(nameColumn);
  columns.add(fullNameColumn);
  columns.add(countryColumn);
  columns.add(modelColumn);
  tree=new TreeGrid<OrgUnitDTOLight>(store,new ColumnModel(columns));
  tree.setBorders(true);
  tree.getStyle().setLeafIcon(OrgUnitImageBundle.ICONS.orgUnitSmall());
  tree.getStyle().setNodeCloseIcon(OrgUnitImageBundle.ICONS.orgUnitSmall());
  tree.getStyle().setNodeOpenIcon(OrgUnitImageBundle.ICONS.orgUnitSmallTransparent());
  tree.setAutoExpandColumn(""String_Node_Str"");
  tree.setTrackMouseOver(false);
  tree.setSelectionModel(selectionModel);
  tree.addPlugin(selectionModel);
}",0.8766883002981933
35646,"@Override public Object render(final OrgUnitDTOLight model,String property,ColumnData config,int rowIndex,int colIndex,ListStore<OrgUnitDTOLight> store,Grid<OrgUnitDTOLight> grid){
  final CountryDTO country=(CountryDTO)model.get(property);
  if (country == null) {
    return ""String_Node_Str"";
  }
 else {
    return country.getName() + ""String_Node_Str"" + country.getCodeISO()+ ')';
  }
}","@Override public Object render(OrgUnitDTOLight model,String property,ColumnData config,int rowIndex,int colIndex,ListStore<OrgUnitDTOLight> store,Grid<OrgUnitDTOLight> grid){
  final OrgUnitModelDTO orgUnitModel=(OrgUnitModelDTO)model.get(property);
  if (orgUnitModel == null) {
    return ""String_Node_Str"";
  }
 else {
    return orgUnitModel.getName();
  }
}",0.7304116865869854
35647,"private OrgUnitDTOLight light(OrgUnitDTOLight parent){
  final OrgUnitDTOLight light=new OrgUnitDTOLight();
  light.setId(getId());
  light.setName(getName());
  light.setFullName(getFullName());
  light.setTitle(getOrgUnitModel().getTitle());
  light.setCanContainProjects(getOrgUnitModel().getCanContainProjects());
  light.generateCompleteName();
  light.setParentDTO(parent);
  light.setOfficeLocationCountry(getOfficeLocationCountry());
  final HashSet<OrgUnitDTOLight> children=new HashSet<OrgUnitDTOLight>();
  for (  final OrgUnitDTO c : getChildren()) {
    children.add(c.light(light));
  }
  light.setChildrenDTO(children);
  light.setDeleted(getDeleted());
  return light;
}","private OrgUnitDTOLight light(OrgUnitDTOLight parent){
  final OrgUnitDTOLight light=new OrgUnitDTOLight();
  light.setId(getId());
  light.setName(getName());
  light.setFullName(getFullName());
  light.setTitle(getOrgUnitModel().getTitle());
  light.setCanContainProjects(getOrgUnitModel().getCanContainProjects());
  light.generateCompleteName();
  light.setParentDTO(parent);
  light.setOfficeLocationCountry(getOfficeLocationCountry());
  final HashSet<OrgUnitDTOLight> children=new HashSet<OrgUnitDTOLight>();
  for (  final OrgUnitDTO c : getChildren()) {
    children.add(c.light(light));
  }
  light.setChildrenDTO(children);
  light.setDeleted(getDeleted());
  light.setOrgUnitModel(getOrgUnitModel());
  return light;
}",0.9689265536723164
35648,"/** 
 * Create the actions to add and create financial projects and local partner projects.
 */
private void addLinkedProjectsListeners(){
  view.getAddFinancialProjectButton().addListener(Events.OnClick,new Listener<ButtonEvent>(){
    final FormWindow window=new FormWindow();
    @Override public void handleEvent(    ButtonEvent be){
      final GetProjects cmd=new GetProjects();
      cmd.setViewOwnOrManage(true);
      dispatcher.execute(cmd,null,new AsyncCallback<ProjectListResult>(){
        @Override public void onFailure(        Throwable e){
          Log.error(""String_Node_Str"" + null + ""String_Node_Str"",e);
          MessageBox.alert(I18N.CONSTANTS.createProjectTypeError(),I18N.CONSTANTS.createProjectTypeErrorDetails(),null);
        }
        @Override public void onSuccess(        ProjectListResult result){
          final List<ProjectDTOLight> resultList=result.getOrderedList(ProjectListResult.CODE_COMPARATOR);
          resultList.remove(projectPresenter.getCurrentProjectDTO().light());
          if (resultList.isEmpty()) {
            MessageBox.alert(I18N.CONSTANTS.createProjectTypeFundingSelectNone(),I18N.CONSTANTS.createProjectTypeFundingSelectNoneDetails(),null);
            return;
          }
          for (          final ProjectDTOLight p : resultList) {
            p.generateCompleteName();
          }
          window.clear();
          final ComboBox<ProjectDTOLight> projects=window.addChoicesList(I18N.CONSTANTS.createProjectTypeFunding(),resultList,false,""String_Node_Str"");
          final LabelField modelTypeLabel=window.addLabelField(I18N.CONSTANTS.createProjectType());
          modelTypeLabel.setHeight(25);
          final NumberField amountField=window.addNumberField(I18N.MESSAGES.projectFundedByDetails(projectPresenter.getCurrentProjectDTO().getName()) + ""String_Node_Str"" + I18N.CONSTANTS.currencyEuro()+ ')',true);
          final LabelField percentageField=window.addLabelField(I18N.CONSTANTS.createProjectPercentage());
          percentageField.setValue(""String_Node_Str"");
          projects.addListener(Events.Select,new Listener<BaseEvent>(){
            @Override public void handleEvent(            BaseEvent be){
              final ProjectModelType type=projects.getSelection().get(0).getProjectModelType(authentication.getOrganizationId());
              final Grid iconGrid=new Grid(1,2);
              iconGrid.setCellPadding(0);
              iconGrid.setCellSpacing(0);
              iconGrid.setWidget(0,0,FundingIconProvider.getProjectTypeIcon(type,IconSize.MEDIUM).createImage());
              DOM.setStyleAttribute(iconGrid.getCellFormatter().getElement(0,0),""String_Node_Str"",""String_Node_Str"");
              iconGrid.setText(0,1,ProjectModelType.getName(type));
              DOM.setStyleAttribute(iconGrid.getCellFormatter().getElement(0,1),""String_Node_Str"",""String_Node_Str"");
              modelTypeLabel.setText(iconGrid.getElement().getString());
            }
          }
);
          amountField.addListener(Events.Change,new Listener<BaseEvent>(){
            @Override public void handleEvent(            BaseEvent be){
              if (amountField.getValue() == null) {
                amountField.setValue(0);
              }
              percentageField.setText(NumberUtils.ratioAsString(amountField.getValue(),projectPresenter.getCurrentProjectDTO().getPlannedBudget()));
            }
          }
);
          window.addFormSubmitListener(new FormSubmitListener(){
            @Override public void formSubmitted(            Object... values){
              if (values == null || values.length < 4) {
                return;
              }
              final Object value0=values[0];
              if (!(value0 instanceof ProjectDTOLight)) {
                return;
              }
              final Object value1=values[2];
              if (!(value1 instanceof Number)) {
                return;
              }
              final ProjectDTOLight p=(ProjectDTOLight)value0;
              final HashMap<String,Object> parameters=new HashMap<String,Object>();
              parameters.put(""String_Node_Str"",p.getId());
              parameters.put(""String_Node_Str"",projectPresenter.getCurrentProjectDTO().getId());
              parameters.put(""String_Node_Str"",((Number)value1).doubleValue());
              dispatcher.execute(new CreateEntity(""String_Node_Str"",parameters),null,new AsyncCallback<CreateResult>(){
                @Override public void onFailure(                Throwable e){
                  Log.error(""String_Node_Str"",e);
                  MessageBox.alert(I18N.CONSTANTS.createProjectTypeFundingCreationError(),I18N.CONSTANTS.createProjectTypeFundingCreationDetails(),null);
                }
                @Override public void onSuccess(                CreateResult result){
                  Notification.show(I18N.CONSTANTS.infoConfirmation(),I18N.CONSTANTS.createProjectTypeFundingSelectOk());
                  final ProjectFundingDTO r=(ProjectFundingDTO)result.getEntity();
                  if (result.getNewId() != -1) {
                    view.getFinancialProjectGrid().getStore().update(r);
                  }
 else {
                    view.getFinancialProjectGrid().getStore().add(r);
                  }
                  projectPresenter.getCurrentProjectDTO().addFunding(r);
                }
              }
);
            }
          }
);
          window.show(I18N.CONSTANTS.createProjectTypeFunding(),I18N.CONSTANTS.createProjectTypeFundingSelectDetails() + ""String_Node_Str"" + projectPresenter.getCurrentProjectDTO().getName()+ ""String_Node_Str"");
        }
      }
);
    }
  }
);
  view.getCreateFinancialProjectButton().addListener(Events.OnClick,new Listener<ButtonEvent>(){
    private final CreateProjectWindow window=new CreateProjectWindow(dispatcher,authentication,cache);
{
      window.addListener(new CreateProjectListener(){
        @Override public void projectCreated(        ProjectDTOLight project){
        }
        @Override public void projectCreatedAsFunding(        ProjectDTOLight project,        double percentage){
          final HashMap<String,Object> parameters=new HashMap<String,Object>();
          parameters.put(""String_Node_Str"",project.getId());
          parameters.put(""String_Node_Str"",projectPresenter.getCurrentProjectDTO().getId());
          parameters.put(""String_Node_Str"",percentage);
          dispatcher.execute(new CreateEntity(""String_Node_Str"",parameters),null,new AsyncCallback<CreateResult>(){
            @Override public void onFailure(            Throwable e){
              Log.error(""String_Node_Str"",e);
              MessageBox.alert(I18N.CONSTANTS.createProjectTypeFundingCreationError(),I18N.CONSTANTS.createProjectTypeFundingCreationDetails(),null);
            }
            @Override public void onSuccess(            CreateResult result){
              Notification.show(I18N.CONSTANTS.infoConfirmation(),I18N.CONSTANTS.createProjectTypeFundingSelectOk());
              final ProjectFundingDTO r=(ProjectFundingDTO)result.getEntity();
              view.getFinancialProjectGrid().getStore().add(r);
              projectPresenter.getCurrentProjectDTO().addFunding(r);
            }
          }
);
        }
        @Override public void projectCreatedAsFunded(        ProjectDTOLight project,        double percentage){
        }
        @Override public void projectCreatedAsTest(        ProjectDTOLight project){
        }
        @Override public void projectDeletedAsTest(        ProjectDTOLight project){
        }
      }
);
    }
    @Override public void handleEvent(    ButtonEvent be){
      window.show(Mode.FUNDING,projectPresenter.getCurrentProjectDTO().light());
    }
  }
);
  view.getAddLocalPartnerProjectButton().addListener(Events.OnClick,new Listener<ButtonEvent>(){
    final FormWindow window=new FormWindow();
    @Override public void handleEvent(    ButtonEvent be){
      final GetProjects cmd=new GetProjects();
      cmd.setViewOwnOrManage(true);
      dispatcher.execute(cmd,null,new AsyncCallback<ProjectListResult>(){
        @Override public void onFailure(        Throwable e){
          Log.error(""String_Node_Str"" + null + ""String_Node_Str"",e);
          MessageBox.alert(I18N.CONSTANTS.createProjectTypeError(),I18N.CONSTANTS.createProjectTypeErrorDetails(),null);
        }
        @Override public void onSuccess(        ProjectListResult result){
          final List<ProjectDTOLight> resultList=result.getOrderedList(ProjectListResult.CODE_COMPARATOR);
          resultList.remove(projectPresenter.getCurrentProjectDTO().light());
          if (resultList.isEmpty()) {
            MessageBox.alert(I18N.CONSTANTS.createProjectTypePartnerSelectNone(),I18N.CONSTANTS.createProjectTypePartnerSelectNoneDetails(),null);
            return;
          }
          for (          final ProjectDTOLight p : resultList) {
            p.generateCompleteName();
          }
          window.clear();
          final ComboBox<ProjectDTOLight> projects=window.addChoicesList(I18N.CONSTANTS.createProjectTypeFunding(),resultList,false,""String_Node_Str"");
          final LabelField modelTypeLabel=window.addLabelField(I18N.CONSTANTS.createProjectType());
          modelTypeLabel.setHeight(25);
          final NumberField amountField=window.addNumberField(I18N.MESSAGES.projectFinancesDetails(projectPresenter.getCurrentProjectDTO().getName()) + ""String_Node_Str"" + I18N.CONSTANTS.currencyEuro()+ ')',true);
          final LabelField percentageField=window.addLabelField(I18N.CONSTANTS.createProjectPercentage());
          percentageField.setValue(""String_Node_Str"");
          projects.addListener(Events.Select,new Listener<BaseEvent>(){
            @Override public void handleEvent(            BaseEvent be){
              final ProjectModelType type=projects.getSelection().get(0).getProjectModelType(authentication.getOrganizationId());
              final Grid iconGrid=new Grid(1,2);
              iconGrid.setCellPadding(0);
              iconGrid.setCellSpacing(0);
              iconGrid.setWidget(0,0,FundingIconProvider.getProjectTypeIcon(type,IconSize.MEDIUM).createImage());
              DOM.setStyleAttribute(iconGrid.getCellFormatter().getElement(0,0),""String_Node_Str"",""String_Node_Str"");
              iconGrid.setText(0,1,ProjectModelType.getName(type));
              DOM.setStyleAttribute(iconGrid.getCellFormatter().getElement(0,1),""String_Node_Str"",""String_Node_Str"");
              modelTypeLabel.setText(iconGrid.getElement().getString());
            }
          }
);
          amountField.addListener(Events.Change,new Listener<BaseEvent>(){
            @Override public void handleEvent(            BaseEvent be){
              if (amountField.getValue() == null) {
                amountField.setValue(0);
              }
              final List<ProjectDTOLight> selection=projects.getSelection();
              if (selection == null || selection.isEmpty()) {
                percentageField.setText(I18N.CONSTANTS.createProjectPercentageNotAvailable());
              }
 else {
                percentageField.setText(NumberUtils.ratioAsString(amountField.getValue(),selection.get(0).getPlannedBudget()));
              }
            }
          }
);
          window.addFormSubmitListener(new FormSubmitListener(){
            @Override public void formSubmitted(            Object... values){
              if (values == null || values.length < 2) {
                return;
              }
              final Object value0=values[0];
              if (!(value0 instanceof ProjectDTOLight)) {
                return;
              }
              final Object value1=values[2];
              if (!(value1 instanceof Number)) {
                return;
              }
              final ProjectDTOLight p=(ProjectDTOLight)value0;
              final HashMap<String,Object> parameters=new HashMap<String,Object>();
              parameters.put(""String_Node_Str"",projectPresenter.getCurrentProjectDTO().getId());
              parameters.put(""String_Node_Str"",p.getId());
              parameters.put(""String_Node_Str"",((Number)value1).doubleValue());
              dispatcher.execute(new CreateEntity(""String_Node_Str"",parameters),null,new AsyncCallback<CreateResult>(){
                @Override public void onFailure(                Throwable e){
                  Log.error(""String_Node_Str"",e);
                  MessageBox.alert(I18N.CONSTANTS.createProjectTypeFundingCreationError(),I18N.CONSTANTS.createProjectTypeFundingCreationDetails(),null);
                }
                @Override public void onSuccess(                CreateResult result){
                  Notification.show(I18N.CONSTANTS.infoConfirmation(),I18N.CONSTANTS.createProjectTypePartnerSelectOk());
                  final ProjectFundingDTO r=(ProjectFundingDTO)result.getEntity();
                  if (result.getNewId() != -1) {
                    view.getLocalPartnerProjectGrid().getStore().update(r);
                  }
 else {
                    view.getLocalPartnerProjectGrid().getStore().add(r);
                  }
                  projectPresenter.getCurrentProjectDTO().addFunded(r);
                }
              }
);
            }
          }
);
          window.show(I18N.CONSTANTS.createProjectTypePartner(),I18N.CONSTANTS.createProjectTypePartnerSelectDetails() + ""String_Node_Str"" + projectPresenter.getCurrentProjectDTO().getName()+ ""String_Node_Str"");
        }
      }
);
    }
  }
);
  view.getCreateLocalPartnerProjectButton().addListener(Events.OnClick,new Listener<ButtonEvent>(){
    private final CreateProjectWindow window=new CreateProjectWindow(dispatcher,authentication,cache);
{
      window.addListener(new CreateProjectListener(){
        @Override public void projectCreated(        ProjectDTOLight project){
        }
        @Override public void projectCreatedAsFunding(        ProjectDTOLight project,        double percentage){
        }
        @Override public void projectCreatedAsFunded(        ProjectDTOLight project,        double percentage){
          final HashMap<String,Object> parameters=new HashMap<String,Object>();
          parameters.put(""String_Node_Str"",projectPresenter.getCurrentProjectDTO().getId());
          parameters.put(""String_Node_Str"",project.getId());
          parameters.put(""String_Node_Str"",percentage);
          dispatcher.execute(new CreateEntity(""String_Node_Str"",parameters),null,new AsyncCallback<CreateResult>(){
            @Override public void onFailure(            Throwable e){
              Log.error(""String_Node_Str"",e);
              MessageBox.alert(I18N.CONSTANTS.createProjectTypeFundingCreationError(),I18N.CONSTANTS.createProjectTypeFundingCreationDetails(),null);
            }
            @Override public void onSuccess(            CreateResult result){
              Notification.show(I18N.CONSTANTS.infoConfirmation(),I18N.CONSTANTS.createProjectTypePartnerSelectOk());
              final ProjectFundingDTO r=(ProjectFundingDTO)result.getEntity();
              view.getLocalPartnerProjectGrid().getStore().add(r);
              projectPresenter.getCurrentProjectDTO().addFunded(r);
            }
          }
);
        }
        @Override public void projectCreatedAsTest(        ProjectDTOLight project){
        }
        @Override public void projectDeletedAsTest(        ProjectDTOLight project){
        }
      }
);
    }
    @Override public void handleEvent(    ButtonEvent be){
      window.show(Mode.FUNDED,projectPresenter.getCurrentProjectDTO().light());
    }
  }
);
}","/** 
 * Create the actions to add and create financial projects and local partner projects.
 */
private void addLinkedProjectsListeners(){
  view.getAddFinancialProjectButton().addListener(Events.OnClick,new Listener<ButtonEvent>(){
    final FormWindow window=new FormWindow();
    @Override public void handleEvent(    ButtonEvent be){
      final GetProjects cmd=new GetProjects();
      cmd.setViewOwnOrManage(true);
      dispatcher.execute(cmd,null,new AsyncCallback<ProjectListResult>(){
        @Override public void onFailure(        Throwable e){
          Log.error(""String_Node_Str"" + null + ""String_Node_Str"",e);
          MessageBox.alert(I18N.CONSTANTS.createProjectTypeError(),I18N.CONSTANTS.createProjectTypeErrorDetails(),null);
        }
        @Override public void onSuccess(        ProjectListResult result){
          final List<ProjectDTOLight> resultList=result.getOrderedList(ProjectListResult.CODE_COMPARATOR);
          resultList.remove(projectPresenter.getCurrentProjectDTO().light());
          if (resultList.isEmpty()) {
            MessageBox.alert(I18N.CONSTANTS.createProjectTypeFundingSelectNone(),I18N.CONSTANTS.createProjectTypeFundingSelectNoneDetails(),null);
            return;
          }
          for (          final ProjectDTOLight p : resultList) {
            p.generateCompleteName();
          }
          window.clear();
          final ComboBox<ProjectDTOLight> projects=window.addChoicesList(I18N.CONSTANTS.createProjectTypeFunding(),resultList,false,""String_Node_Str"");
          final LabelField modelTypeLabel=window.addLabelField(I18N.CONSTANTS.createProjectType());
          modelTypeLabel.setHeight(25);
          final NumberField amountField=window.addNumberField(I18N.MESSAGES.projectFundedByDetails(projectPresenter.getCurrentProjectDTO().getName()) + ""String_Node_Str"" + I18N.CONSTANTS.currencyEuro()+ ')',true);
          final LabelField percentageField=window.addLabelField(I18N.CONSTANTS.createProjectPercentage());
          percentageField.setValue(""String_Node_Str"");
          projects.addListener(Events.Select,new Listener<BaseEvent>(){
            @Override public void handleEvent(            BaseEvent be){
              final ProjectModelType type=projects.getSelection().get(0).getProjectModelType(authentication.getOrganizationId());
              final Grid iconGrid=new Grid(1,2);
              iconGrid.setCellPadding(0);
              iconGrid.setCellSpacing(0);
              iconGrid.setWidget(0,0,FundingIconProvider.getProjectTypeIcon(type,IconSize.MEDIUM).createImage());
              DOM.setStyleAttribute(iconGrid.getCellFormatter().getElement(0,0),""String_Node_Str"",""String_Node_Str"");
              iconGrid.setText(0,1,ProjectModelType.getName(type));
              DOM.setStyleAttribute(iconGrid.getCellFormatter().getElement(0,1),""String_Node_Str"",""String_Node_Str"");
              modelTypeLabel.setText(iconGrid.getElement().getString());
            }
          }
);
          amountField.addListener(Events.Change,new Listener<BaseEvent>(){
            @Override public void handleEvent(            BaseEvent be){
              if (amountField.getValue() == null) {
                amountField.setValue(0);
              }
              percentageField.setText(NumberUtils.ratioAsString(amountField.getValue(),projectPresenter.getCurrentProjectDTO().getPlannedBudget()));
            }
          }
);
          window.addFormSubmitListener(new FormSubmitListener(){
            @Override public void formSubmitted(            Object... values){
              if (values == null || values.length < 4) {
                return;
              }
              final Object value0=values[0];
              if (!(value0 instanceof ProjectDTOLight)) {
                return;
              }
              final Object value1=values[2];
              if (!(value1 instanceof Number)) {
                return;
              }
              final ProjectDTOLight p=(ProjectDTOLight)value0;
              final HashMap<String,Object> parameters=new HashMap<String,Object>();
              parameters.put(""String_Node_Str"",p.getId());
              parameters.put(""String_Node_Str"",projectPresenter.getCurrentProjectDTO().getId());
              parameters.put(""String_Node_Str"",((Number)value1).doubleValue());
              dispatcher.execute(new CreateEntity(""String_Node_Str"",parameters),null,new AsyncCallback<CreateResult>(){
                @Override public void onFailure(                Throwable e){
                  Log.error(""String_Node_Str"",e);
                  MessageBox.alert(I18N.CONSTANTS.createProjectTypeFundingCreationError(),I18N.CONSTANTS.createProjectTypeFundingCreationDetails(),null);
                }
                @Override public void onSuccess(                CreateResult result){
                  Notification.show(I18N.CONSTANTS.infoConfirmation(),I18N.CONSTANTS.createProjectTypeFundingSelectOk());
                  final ProjectFundingDTO r=(ProjectFundingDTO)result.getEntity();
                  if (result.getNewId() != -1) {
                    view.getFinancialProjectGrid().getStore().update(r);
                  }
 else {
                    view.getFinancialProjectGrid().getStore().add(r);
                  }
                  projectPresenter.getCurrentProjectDTO().addFunding(r);
                }
              }
);
            }
          }
);
          window.show(I18N.CONSTANTS.createProjectTypeFunding(),I18N.CONSTANTS.createProjectTypeFundingSelectDetails() + ""String_Node_Str"" + projectPresenter.getCurrentProjectDTO().getName()+ ""String_Node_Str"");
        }
      }
);
    }
  }
);
  view.getCreateFinancialProjectButton().addListener(Events.OnClick,new Listener<ButtonEvent>(){
    private final CreateProjectWindow window=new CreateProjectWindow(dispatcher,authentication,cache);
{
      window.addListener(new CreateProjectListener(){
        @Override public void projectCreated(        ProjectDTOLight project){
        }
        @Override public void projectCreatedAsFunding(        ProjectDTOLight project,        double percentage){
          final HashMap<String,Object> parameters=new HashMap<String,Object>();
          parameters.put(""String_Node_Str"",project.getId());
          parameters.put(""String_Node_Str"",projectPresenter.getCurrentProjectDTO().getId());
          parameters.put(""String_Node_Str"",percentage);
          dispatcher.execute(new CreateEntity(""String_Node_Str"",parameters),null,new AsyncCallback<CreateResult>(){
            @Override public void onFailure(            Throwable e){
              Log.error(""String_Node_Str"",e);
              MessageBox.alert(I18N.CONSTANTS.createProjectTypeFundingCreationError(),I18N.CONSTANTS.createProjectTypeFundingCreationDetails(),null);
            }
            @Override public void onSuccess(            CreateResult result){
              Notification.show(I18N.CONSTANTS.infoConfirmation(),I18N.CONSTANTS.createProjectTypeFundingSelectOk());
              final ProjectFundingDTO r=(ProjectFundingDTO)result.getEntity();
              view.getFinancialProjectGrid().getStore().add(r);
              projectPresenter.getCurrentProjectDTO().addFunding(r);
            }
          }
);
        }
        @Override public void projectCreatedAsFunded(        ProjectDTOLight project,        double percentage){
        }
        @Override public void projectCreatedAsTest(        ProjectDTOLight project){
        }
        @Override public void projectDeletedAsTest(        ProjectDTOLight project){
        }
      }
);
    }
    @Override public void handleEvent(    ButtonEvent be){
      window.show(Mode.FUNDING,projectPresenter.getCurrentProjectDTO().light());
    }
  }
);
  view.getAddLocalPartnerProjectButton().addListener(Events.OnClick,new Listener<ButtonEvent>(){
    final FormWindow window=new FormWindow();
    @Override public void handleEvent(    ButtonEvent be){
      final GetProjects cmd=new GetProjects();
      cmd.setViewOwnOrManage(true);
      dispatcher.execute(cmd,null,new AsyncCallback<ProjectListResult>(){
        @Override public void onFailure(        Throwable e){
          Log.error(""String_Node_Str"" + null + ""String_Node_Str"",e);
          MessageBox.alert(I18N.CONSTANTS.createProjectTypeError(),I18N.CONSTANTS.createProjectTypeErrorDetails(),null);
        }
        @Override public void onSuccess(        ProjectListResult result){
          final List<ProjectDTOLight> resultList=result.getOrderedList(ProjectListResult.CODE_COMPARATOR);
          resultList.remove(projectPresenter.getCurrentProjectDTO().light());
          if (resultList.isEmpty()) {
            MessageBox.alert(I18N.CONSTANTS.createProjectTypePartnerSelectNone(),I18N.CONSTANTS.createProjectTypePartnerSelectNoneDetails(),null);
            return;
          }
          for (          final ProjectDTOLight p : resultList) {
            p.generateCompleteName();
          }
          window.clear();
          final ComboBox<ProjectDTOLight> projects=window.addChoicesList(I18N.CONSTANTS.createProjectTypePartner(),resultList,false,""String_Node_Str"");
          final LabelField modelTypeLabel=window.addLabelField(I18N.CONSTANTS.createProjectType());
          modelTypeLabel.setHeight(25);
          final NumberField amountField=window.addNumberField(I18N.MESSAGES.projectFinancesDetails(projectPresenter.getCurrentProjectDTO().getName()) + ""String_Node_Str"" + I18N.CONSTANTS.currencyEuro()+ ')',true);
          final LabelField percentageField=window.addLabelField(I18N.CONSTANTS.createProjectPercentage());
          percentageField.setValue(""String_Node_Str"");
          projects.addListener(Events.Select,new Listener<BaseEvent>(){
            @Override public void handleEvent(            BaseEvent be){
              final ProjectModelType type=projects.getSelection().get(0).getProjectModelType(authentication.getOrganizationId());
              final Grid iconGrid=new Grid(1,2);
              iconGrid.setCellPadding(0);
              iconGrid.setCellSpacing(0);
              iconGrid.setWidget(0,0,FundingIconProvider.getProjectTypeIcon(type,IconSize.MEDIUM).createImage());
              DOM.setStyleAttribute(iconGrid.getCellFormatter().getElement(0,0),""String_Node_Str"",""String_Node_Str"");
              iconGrid.setText(0,1,ProjectModelType.getName(type));
              DOM.setStyleAttribute(iconGrid.getCellFormatter().getElement(0,1),""String_Node_Str"",""String_Node_Str"");
              modelTypeLabel.setText(iconGrid.getElement().getString());
            }
          }
);
          amountField.addListener(Events.Change,new Listener<BaseEvent>(){
            @Override public void handleEvent(            BaseEvent be){
              if (amountField.getValue() == null) {
                amountField.setValue(0);
              }
              final List<ProjectDTOLight> selection=projects.getSelection();
              if (selection == null || selection.isEmpty()) {
                percentageField.setText(I18N.CONSTANTS.createProjectPercentageNotAvailable());
              }
 else {
                percentageField.setText(NumberUtils.ratioAsString(amountField.getValue(),selection.get(0).getPlannedBudget()));
              }
            }
          }
);
          window.addFormSubmitListener(new FormSubmitListener(){
            @Override public void formSubmitted(            Object... values){
              if (values == null || values.length < 2) {
                return;
              }
              final Object value0=values[0];
              if (!(value0 instanceof ProjectDTOLight)) {
                return;
              }
              final Object value1=values[2];
              if (!(value1 instanceof Number)) {
                return;
              }
              final ProjectDTOLight p=(ProjectDTOLight)value0;
              final HashMap<String,Object> parameters=new HashMap<String,Object>();
              parameters.put(""String_Node_Str"",projectPresenter.getCurrentProjectDTO().getId());
              parameters.put(""String_Node_Str"",p.getId());
              parameters.put(""String_Node_Str"",((Number)value1).doubleValue());
              dispatcher.execute(new CreateEntity(""String_Node_Str"",parameters),null,new AsyncCallback<CreateResult>(){
                @Override public void onFailure(                Throwable e){
                  Log.error(""String_Node_Str"",e);
                  MessageBox.alert(I18N.CONSTANTS.createProjectTypeFundingCreationError(),I18N.CONSTANTS.createProjectTypeFundingCreationDetails(),null);
                }
                @Override public void onSuccess(                CreateResult result){
                  Notification.show(I18N.CONSTANTS.infoConfirmation(),I18N.CONSTANTS.createProjectTypePartnerSelectOk());
                  final ProjectFundingDTO r=(ProjectFundingDTO)result.getEntity();
                  if (result.getNewId() != -1) {
                    view.getLocalPartnerProjectGrid().getStore().update(r);
                  }
 else {
                    view.getLocalPartnerProjectGrid().getStore().add(r);
                  }
                  projectPresenter.getCurrentProjectDTO().addFunded(r);
                }
              }
);
            }
          }
);
          window.show(I18N.CONSTANTS.createProjectTypePartner(),I18N.CONSTANTS.createProjectTypePartnerSelectDetails() + ""String_Node_Str"" + projectPresenter.getCurrentProjectDTO().getName()+ ""String_Node_Str"");
        }
      }
);
    }
  }
);
  view.getCreateLocalPartnerProjectButton().addListener(Events.OnClick,new Listener<ButtonEvent>(){
    private final CreateProjectWindow window=new CreateProjectWindow(dispatcher,authentication,cache);
{
      window.addListener(new CreateProjectListener(){
        @Override public void projectCreated(        ProjectDTOLight project){
        }
        @Override public void projectCreatedAsFunding(        ProjectDTOLight project,        double percentage){
        }
        @Override public void projectCreatedAsFunded(        ProjectDTOLight project,        double percentage){
          final HashMap<String,Object> parameters=new HashMap<String,Object>();
          parameters.put(""String_Node_Str"",projectPresenter.getCurrentProjectDTO().getId());
          parameters.put(""String_Node_Str"",project.getId());
          parameters.put(""String_Node_Str"",percentage);
          dispatcher.execute(new CreateEntity(""String_Node_Str"",parameters),null,new AsyncCallback<CreateResult>(){
            @Override public void onFailure(            Throwable e){
              Log.error(""String_Node_Str"",e);
              MessageBox.alert(I18N.CONSTANTS.createProjectTypeFundingCreationError(),I18N.CONSTANTS.createProjectTypeFundingCreationDetails(),null);
            }
            @Override public void onSuccess(            CreateResult result){
              Notification.show(I18N.CONSTANTS.infoConfirmation(),I18N.CONSTANTS.createProjectTypePartnerSelectOk());
              final ProjectFundingDTO r=(ProjectFundingDTO)result.getEntity();
              view.getLocalPartnerProjectGrid().getStore().add(r);
              projectPresenter.getCurrentProjectDTO().addFunded(r);
            }
          }
);
        }
        @Override public void projectCreatedAsTest(        ProjectDTOLight project){
        }
        @Override public void projectDeletedAsTest(        ProjectDTOLight project){
        }
      }
);
    }
    @Override public void handleEvent(    ButtonEvent be){
      window.show(Mode.FUNDED,projectPresenter.getCurrentProjectDTO().light());
    }
  }
);
}",0.9995502152541283
35649,"/** 
 * Builds the actions toolbar.
 * @return The actions toolbar.
 */
private ToolBar buildToolbar(){
  saveButton=new Button(I18N.CONSTANTS.save(),IconImageBundle.ICONS.save());
  saveButton.setEnabled(false);
  copyButton=new Button(I18N.CONSTANTS.copy());
  copyButton.setEnabled(true);
  pasteButton=new Button(I18N.CONSTANTS.paste());
  pasteButton.setEnabled(false);
  excelButton=new Button(I18N.CONSTANTS.exportToExcel(),IconImageBundle.ICONS.excel());
  excelButton.hide();
  excelForm=new FormPanel();
  excelForm.setBodyBorder(false);
  excelForm.setHeaderVisible(false);
  excelForm.setPadding(0);
  excelForm.setEncoding(Encoding.URLENCODED);
  excelForm.setMethod(Method.POST);
  excelForm.setAction(GWT.getModuleBaseURL() + ""String_Node_Str"");
  final ToolBar toolBar=new ToolBar();
  toolBar.setAlignment(HorizontalAlignment.RIGHT);
  toolBar.setBorders(false);
  toolBar.add(saveButton);
  toolBar.add(copyButton);
  toolBar.add(pasteButton);
  toolBar.add(new SeparatorToolItem());
  toolBar.add(excelButton);
  toolBar.add(excelForm);
  return toolBar;
}","/** 
 * Builds the actions toolbar.
 * @return The actions toolbar.
 */
private ToolBar buildToolbar(){
  saveButton=new Button(I18N.CONSTANTS.save(),IconImageBundle.ICONS.save());
  saveButton.setEnabled(false);
  copyButton=new Button(I18N.CONSTANTS.copy());
  copyButton.setEnabled(true);
  pasteButton=new Button(I18N.CONSTANTS.paste());
  pasteButton.setEnabled(false);
  excelButton=new Button(I18N.CONSTANTS.exportToExcel(),IconImageBundle.ICONS.excel());
  excelButton.hide();
  excelForm=new FormPanel();
  excelForm.setBodyBorder(false);
  excelForm.setHeaderVisible(false);
  excelForm.setPadding(0);
  excelForm.setEncoding(Encoding.URLENCODED);
  excelForm.setMethod(Method.POST);
  excelForm.setAction(GWT.getModuleBaseURL() + ""String_Node_Str"");
  final ToolBar toolBar=new ToolBar();
  toolBar.setAlignment(HorizontalAlignment.LEFT);
  toolBar.setBorders(false);
  toolBar.add(saveButton);
  toolBar.add(copyButton);
  toolBar.add(pasteButton);
  toolBar.add(new SeparatorToolItem());
  toolBar.add(excelButton);
  toolBar.add(excelForm);
  return toolBar;
}",0.996742671009772
35650,"@Override public void update(User user,Object entity,PropertyMap changes){
  OrgUnitModel model=null;
  if (orgUnitModel != null) {
    model=em.find(OrgUnitModel.class,new Integer(orgUnitModel.getId()));
  }
  if (model != null) {
    if (changes.get(AdminUtil.PROP_OM_NAME) != null) {
      model=createOrgUnitModel(model,changes,user);
      model=em.merge(model);
    }
    if (changes.get(AdminUtil.PROP_FX_FLEXIBLE_ELEMENT) != null) {
      ModelUtil.persistFlexibleElement(em,mapper,changes,model);
      modelToUpdate=em.find(OrgUnitModel.class,model.getId());
    }
  }
}","@Override public void update(User user,Object entity,PropertyMap changes){
  OrgUnitModel model=null;
  if (orgUnitModel != null) {
    model=em.find(OrgUnitModel.class,new Integer(orgUnitModel.getId()));
  }
  if (model != null) {
    if (changes.get(AdminUtil.PROP_OM_NAME) != null) {
      model=createOrgUnitModel(model,changes,user);
      model=em.merge(model);
      modelToUpdate=em.find(OrgUnitModel.class,model.getId());
    }
    if (changes.get(AdminUtil.PROP_FX_FLEXIBLE_ELEMENT) != null) {
      ModelUtil.persistFlexibleElement(em,mapper,changes,model);
      modelToUpdate=em.find(OrgUnitModel.class,model.getId());
    }
  }
}",0.9484873262469338
35651,"protected void onDeleteConfirmed(final List<FlexibleElementDTO> selection){
  String notDeletableNames=""String_Node_Str"";
  List<Integer> ids=new ArrayList<Integer>();
  String names=""String_Node_Str"";
  for (  FlexibleElementDTO s : selection) {
    ids.add(s.getId());
    names=s.getLabel() + ""String_Node_Str"" + names;
    if (s instanceof DefaultFlexibleElementDTO) {
      notDeletableNames+=DefaultFlexibleElementType.getName(((DefaultFlexibleElementDTO)s).getType()).replace(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"";
    }
  }
  if (""String_Node_Str"".equals(notDeletableNames)) {
    final String toDelete=names;
    final DeleteFlexibleElements delete=new DeleteFlexibleElements(selection);
    dispatcher.execute(delete,null,new AsyncCallback<VoidResult>(){
      @Override public void onFailure(      Throwable caught){
        MessageBox.alert(I18N.CONSTANTS.error(),I18N.MESSAGES.entityDeleteEventError(toDelete),null);
      }
      @Override public void onSuccess(      VoidResult result){
        for (        FlexibleElementDTO s : selection) {
          view.getFieldsStore().remove(s);
        }
      }
    }
);
  }
 else {
    notDeletableNames=notDeletableNames.substring(0,notDeletableNames.lastIndexOf(""String_Node_Str""));
    MessageBox.alert(I18N.CONSTANTS.error(),I18N.MESSAGES.adminErrorDeleteDefaultFlexible(notDeletableNames),null);
  }
}","protected void onDeleteConfirmed(final List<FlexibleElementDTO> selection){
  String notDeletableNames=""String_Node_Str"";
  List<Integer> ids=new ArrayList<Integer>();
  String names=""String_Node_Str"";
  for (  FlexibleElementDTO s : selection) {
    ids.add(s.getId());
    names=s.getLabel() + ""String_Node_Str"" + names;
    if (s instanceof DefaultFlexibleElementDTO) {
      notDeletableNames+=DefaultFlexibleElementType.getName(((DefaultFlexibleElementDTO)s).getType()) + ""String_Node_Str"";
    }
  }
  if (""String_Node_Str"".equals(notDeletableNames)) {
    final String toDelete=names;
    final DeleteFlexibleElements delete=new DeleteFlexibleElements(selection);
    dispatcher.execute(delete,null,new AsyncCallback<VoidResult>(){
      @Override public void onFailure(      Throwable caught){
        MessageBox.alert(I18N.CONSTANTS.error(),I18N.MESSAGES.entityDeleteEventError(toDelete),null);
      }
      @Override public void onSuccess(      VoidResult result){
        for (        FlexibleElementDTO s : selection) {
          view.getFieldsStore().remove(s);
        }
      }
    }
);
  }
 else {
    notDeletableNames=notDeletableNames.substring(0,notDeletableNames.lastIndexOf(""String_Node_Str""));
    MessageBox.alert(I18N.CONSTANTS.error(),I18N.MESSAGES.adminErrorDeleteDefaultFlexible(notDeletableNames),null);
  }
}",0.9834741094381196
35652,"private Grid<FlexibleElementDTO> buildFieldsListGrid(){
  List<ColumnConfig> configs=new ArrayList<ColumnConfig>();
  ColumnConfig column=new ColumnConfig(""String_Node_Str"",I18N.CONSTANTS.adminFlexibleName(),300);
  column.setRenderer(new GridCellRenderer<FlexibleElementDTO>(){
    @Override public Object render(    final FlexibleElementDTO model,    String property,    ColumnData config,    int rowIndex,    int colIndex,    ListStore<FlexibleElementDTO> store,    Grid<FlexibleElementDTO> grid){
      if ((projectModel != null && ProjectModelStatus.DRAFT.equals(projectModel.getStatus())) || (orgUnitModel != null && ProjectModelStatus.DRAFT.equals(orgUnitModel.getStatus()))) {
        final Anchor nameHyperlink;
        if (ElementTypeEnum.DEFAULT.equals(model.getElementType())) {
          nameHyperlink=new Anchor(DefaultFlexibleElementType.getName(((DefaultFlexibleElementDTO)model).getType()),true);
        }
 else         nameHyperlink=new Anchor(model.getLabel().replace(""String_Node_Str"",""String_Node_Str""),true);
        nameHyperlink.addStyleName(""String_Node_Str"");
        nameHyperlink.addClickHandler(new ClickHandler(){
          @Override public void onClick(          ClickEvent event){
            showNewFlexibleElementForm(model,true);
          }
        }
);
        return nameHyperlink;
      }
 else {
        if (ElementTypeEnum.DEFAULT.equals(model.getElementType()))         return AdminUtil.createGridText(DefaultFlexibleElementType.getName(((DefaultFlexibleElementDTO)model).getType()).replace(""String_Node_Str"",""String_Node_Str""));
 else         return AdminUtil.createGridText(model.getLabel().replace(""String_Node_Str"",""String_Node_Str""));
      }
    }
  }
);
  configs.add(column);
  column=new ColumnConfig(""String_Node_Str"",I18N.CONSTANTS.adminFlexibleType(),125);
  column.setRenderer(new GridCellRenderer<FlexibleElementDTO>(){
    @Override public Object render(    FlexibleElementDTO model,    String property,    ColumnData config,    int rowIndex,    int colIndex,    ListStore<FlexibleElementDTO> store,    Grid<FlexibleElementDTO> grid){
      return AdminUtil.createGridText(ElementTypeEnum.getName(model.getElementType()));
    }
  }
);
  configs.add(column);
  column=new ColumnConfig(""String_Node_Str"",I18N.CONSTANTS.adminFlexibleCompulsory(),50);
  column.setRenderer(new GridCellRenderer<FlexibleElementDTO>(){
    @Override public Object render(    FlexibleElementDTO model,    String property,    ColumnData config,    int rowIndex,    int colIndex,    ListStore<FlexibleElementDTO> store,    Grid<FlexibleElementDTO> grid){
      CheckBox validates=AdminUtil.createCheckBox(I18N.CONSTANTS.adminFlexibleCompulsory(),null);
      validates.disable();
      validates.setValue(model.getValidates());
      return validates;
    }
  }
);
  configs.add(column);
  column=new ColumnConfig(""String_Node_Str"",I18N.CONSTANTS.adminProfilesPrivacyGroups(),125);
  column.setRenderer(new GridCellRenderer<FlexibleElementDTO>(){
    @Override public Object render(    FlexibleElementDTO model,    String property,    ColumnData config,    int rowIndex,    int colIndex,    ListStore<FlexibleElementDTO> store,    Grid<FlexibleElementDTO> grid){
      PrivacyGroupDTO privacy=model.getPrivacyGroup();
      if (privacy != null)       return AdminUtil.createGridText(privacy.getTitle());
 else       return AdminUtil.createGridText(""String_Node_Str"");
    }
  }
);
  configs.add(column);
  column=new ColumnConfig(""String_Node_Str"",I18N.CONSTANTS.adminFlexibleAmendable(),50);
  column.setRenderer(new GridCellRenderer<FlexibleElementDTO>(){
    @Override public Object render(    FlexibleElementDTO model,    String property,    ColumnData config,    int rowIndex,    int colIndex,    ListStore<FlexibleElementDTO> store,    Grid<FlexibleElementDTO> grid){
      CheckBox amendable=AdminUtil.createCheckBox(I18N.CONSTANTS.adminFlexibleAmendable(),null);
      amendable.setValue(model.getAmendable());
      amendable.disable();
      return amendable;
    }
  }
);
  configs.add(column);
  column=new ColumnConfig(""String_Node_Str"",I18N.CONSTANTS.Admin_BANNER(),50);
  column.setRenderer(new GridCellRenderer<FlexibleElementDTO>(){
    @Override public Object render(    FlexibleElementDTO model,    String property,    ColumnData config,    int rowIndex,    int colIndex,    ListStore<FlexibleElementDTO> store,    Grid<FlexibleElementDTO> grid){
      CheckBox banner=AdminUtil.createCheckBox(I18N.CONSTANTS.Admin_BANNER(),null);
      if (model.getBannerConstraint() != null) {
        banner.setValue(true);
      }
      banner.disable();
      return banner;
    }
  }
);
  configs.add(column);
  column=new ColumnConfig(""String_Node_Str"",I18N.CONSTANTS.adminFlexibleBannerPosition(),50);
  column.setRenderer(new GridCellRenderer<FlexibleElementDTO>(){
    @Override public Object render(    FlexibleElementDTO model,    String property,    ColumnData config,    int rowIndex,    int colIndex,    ListStore<FlexibleElementDTO> store,    Grid<FlexibleElementDTO> grid){
      if (model.getBannerConstraint() != null) {
        int order=model.getBannerConstraint().getSortOrder();
        return AdminUtil.createGridText(String.valueOf(order));
      }
      return AdminUtil.createGridText(""String_Node_Str"");
    }
  }
);
  configs.add(column);
  column=new ColumnConfig(""String_Node_Str"",I18N.CONSTANTS.adminFlexibleContainer(),120);
  column.setRenderer(new GridCellRenderer<FlexibleElementDTO>(){
    @Override public Object render(    FlexibleElementDTO model,    String property,    ColumnData config,    int rowIndex,    int colIndex,    ListStore<FlexibleElementDTO> store,    Grid<FlexibleElementDTO> grid){
      BaseModelData container=model.getContainerModel();
      return AdminUtil.createGridText((String)container.get(""String_Node_Str""));
    }
  }
);
  configs.add(column);
  column=new ColumnConfig(""String_Node_Str"",I18N.CONSTANTS.adminFlexibleGroup(),200);
  column.setRenderer(new GridCellRenderer<FlexibleElementDTO>(){
    @Override public Object render(    final FlexibleElementDTO model,    String property,    ColumnData config,    int rowIndex,    int colIndex,    ListStore<FlexibleElementDTO> store,    Grid<FlexibleElementDTO> grid){
      LayoutGroupDTO group=model.getGroup();
      if ((projectModel != null && ProjectModelStatus.DRAFT.equals(projectModel.getStatus())) || (orgUnitModel != null && ProjectModelStatus.DRAFT.equals(orgUnitModel.getStatus()))) {
        final Anchor nameHyperlink=new Anchor((String)group.get(""String_Node_Str""),true);
        nameHyperlink.addStyleName(""String_Node_Str"");
        nameHyperlink.addClickHandler(new ClickHandler(){
          @Override public void onClick(          ClickEvent event){
            showNewGroupForm(model,true);
          }
        }
);
        return nameHyperlink;
      }
 else {
        return AdminUtil.createGridText((String)group.get(""String_Node_Str""));
      }
    }
  }
);
  configs.add(column);
  ColumnModel cm=new ColumnModel(configs);
  fieldsStore.setSortField(""String_Node_Str"");
  Grid<FlexibleElementDTO> grid=new Grid<FlexibleElementDTO>(fieldsStore,cm);
  return grid;
}","private Grid<FlexibleElementDTO> buildFieldsListGrid(){
  List<ColumnConfig> configs=new ArrayList<ColumnConfig>();
  ColumnConfig column=new ColumnConfig(""String_Node_Str"",I18N.CONSTANTS.adminFlexibleName(),300);
  column.setRenderer(new GridCellRenderer<FlexibleElementDTO>(){
    @Override public Object render(    final FlexibleElementDTO model,    String property,    ColumnData config,    int rowIndex,    int colIndex,    ListStore<FlexibleElementDTO> store,    Grid<FlexibleElementDTO> grid){
      if ((projectModel != null && ProjectModelStatus.DRAFT.equals(projectModel.getStatus())) || (orgUnitModel != null && ProjectModelStatus.DRAFT.equals(orgUnitModel.getStatus()))) {
        final Anchor nameHyperlink;
        if (ElementTypeEnum.DEFAULT.equals(model.getElementType())) {
          nameHyperlink=new Anchor(DefaultFlexibleElementType.getName(((DefaultFlexibleElementDTO)model).getType()),true);
        }
 else         nameHyperlink=new Anchor(model.getLabel(),true);
        nameHyperlink.addStyleName(""String_Node_Str"");
        nameHyperlink.addClickHandler(new ClickHandler(){
          @Override public void onClick(          ClickEvent event){
            showNewFlexibleElementForm(model,true);
          }
        }
);
        return nameHyperlink;
      }
 else {
        if (ElementTypeEnum.DEFAULT.equals(model.getElementType()))         return AdminUtil.createGridText(DefaultFlexibleElementType.getName(((DefaultFlexibleElementDTO)model).getType()));
 else         return AdminUtil.createGridText(model.getLabel());
      }
    }
  }
);
  configs.add(column);
  column=new ColumnConfig(""String_Node_Str"",I18N.CONSTANTS.adminFlexibleType(),125);
  column.setRenderer(new GridCellRenderer<FlexibleElementDTO>(){
    @Override public Object render(    FlexibleElementDTO model,    String property,    ColumnData config,    int rowIndex,    int colIndex,    ListStore<FlexibleElementDTO> store,    Grid<FlexibleElementDTO> grid){
      return AdminUtil.createGridText(ElementTypeEnum.getName(model.getElementType()));
    }
  }
);
  configs.add(column);
  column=new ColumnConfig(""String_Node_Str"",I18N.CONSTANTS.adminFlexibleCompulsory(),50);
  column.setRenderer(new GridCellRenderer<FlexibleElementDTO>(){
    @Override public Object render(    FlexibleElementDTO model,    String property,    ColumnData config,    int rowIndex,    int colIndex,    ListStore<FlexibleElementDTO> store,    Grid<FlexibleElementDTO> grid){
      CheckBox validates=AdminUtil.createCheckBox(I18N.CONSTANTS.adminFlexibleCompulsory(),null);
      validates.disable();
      validates.setValue(model.getValidates());
      return validates;
    }
  }
);
  configs.add(column);
  column=new ColumnConfig(""String_Node_Str"",I18N.CONSTANTS.adminProfilesPrivacyGroups(),125);
  column.setRenderer(new GridCellRenderer<FlexibleElementDTO>(){
    @Override public Object render(    FlexibleElementDTO model,    String property,    ColumnData config,    int rowIndex,    int colIndex,    ListStore<FlexibleElementDTO> store,    Grid<FlexibleElementDTO> grid){
      PrivacyGroupDTO privacy=model.getPrivacyGroup();
      if (privacy != null)       return AdminUtil.createGridText(privacy.getTitle());
 else       return AdminUtil.createGridText(""String_Node_Str"");
    }
  }
);
  configs.add(column);
  column=new ColumnConfig(""String_Node_Str"",I18N.CONSTANTS.adminFlexibleAmendable(),50);
  column.setRenderer(new GridCellRenderer<FlexibleElementDTO>(){
    @Override public Object render(    FlexibleElementDTO model,    String property,    ColumnData config,    int rowIndex,    int colIndex,    ListStore<FlexibleElementDTO> store,    Grid<FlexibleElementDTO> grid){
      CheckBox amendable=AdminUtil.createCheckBox(I18N.CONSTANTS.adminFlexibleAmendable(),null);
      amendable.setValue(model.getAmendable());
      amendable.disable();
      return amendable;
    }
  }
);
  configs.add(column);
  column=new ColumnConfig(""String_Node_Str"",I18N.CONSTANTS.Admin_BANNER(),50);
  column.setRenderer(new GridCellRenderer<FlexibleElementDTO>(){
    @Override public Object render(    FlexibleElementDTO model,    String property,    ColumnData config,    int rowIndex,    int colIndex,    ListStore<FlexibleElementDTO> store,    Grid<FlexibleElementDTO> grid){
      CheckBox banner=AdminUtil.createCheckBox(I18N.CONSTANTS.Admin_BANNER(),null);
      if (model.getBannerConstraint() != null) {
        banner.setValue(true);
      }
      banner.disable();
      return banner;
    }
  }
);
  configs.add(column);
  column=new ColumnConfig(""String_Node_Str"",I18N.CONSTANTS.adminFlexibleBannerPosition(),50);
  column.setRenderer(new GridCellRenderer<FlexibleElementDTO>(){
    @Override public Object render(    FlexibleElementDTO model,    String property,    ColumnData config,    int rowIndex,    int colIndex,    ListStore<FlexibleElementDTO> store,    Grid<FlexibleElementDTO> grid){
      if (model.getBannerConstraint() != null) {
        int order=model.getBannerConstraint().getSortOrder();
        return AdminUtil.createGridText(String.valueOf(order));
      }
      return AdminUtil.createGridText(""String_Node_Str"");
    }
  }
);
  configs.add(column);
  column=new ColumnConfig(""String_Node_Str"",I18N.CONSTANTS.adminFlexibleContainer(),120);
  column.setRenderer(new GridCellRenderer<FlexibleElementDTO>(){
    @Override public Object render(    FlexibleElementDTO model,    String property,    ColumnData config,    int rowIndex,    int colIndex,    ListStore<FlexibleElementDTO> store,    Grid<FlexibleElementDTO> grid){
      BaseModelData container=model.getContainerModel();
      return AdminUtil.createGridText((String)container.get(""String_Node_Str""));
    }
  }
);
  configs.add(column);
  column=new ColumnConfig(""String_Node_Str"",I18N.CONSTANTS.adminFlexibleGroup(),200);
  column.setRenderer(new GridCellRenderer<FlexibleElementDTO>(){
    @Override public Object render(    final FlexibleElementDTO model,    String property,    ColumnData config,    int rowIndex,    int colIndex,    ListStore<FlexibleElementDTO> store,    Grid<FlexibleElementDTO> grid){
      LayoutGroupDTO group=model.getGroup();
      if ((projectModel != null && ProjectModelStatus.DRAFT.equals(projectModel.getStatus())) || (orgUnitModel != null && ProjectModelStatus.DRAFT.equals(orgUnitModel.getStatus()))) {
        final Anchor nameHyperlink=new Anchor((String)group.get(""String_Node_Str""),true);
        nameHyperlink.addStyleName(""String_Node_Str"");
        nameHyperlink.addClickHandler(new ClickHandler(){
          @Override public void onClick(          ClickEvent event){
            showNewGroupForm(model,true);
          }
        }
);
        return nameHyperlink;
      }
 else {
        return AdminUtil.createGridText((String)group.get(""String_Node_Str""));
      }
    }
  }
);
  configs.add(column);
  ColumnModel cm=new ColumnModel(configs);
  fieldsStore.setSortField(""String_Node_Str"");
  Grid<FlexibleElementDTO> grid=new Grid<FlexibleElementDTO>(fieldsStore,cm);
  return grid;
}",0.9904600381598474
35653,"private void createFlexibleElement(final AsyncCallback<UpdateModelResult> callback){
  if (!commonPanel.isValid() || htmlArea.getValue() != null && htmlArea.getValue().isEmpty() || ""String_Node_Str"".equals(htmlArea.getValue())) {
    MessageBox.alert(I18N.CONSTANTS.createFormIncomplete(),I18N.MESSAGES.createFormIncompleteDetails(I18N.CONSTANTS.adminStandardFlexibleName()),null);
    return;
  }
  final String name=htmlArea.getValue().replace(""String_Node_Str"",""String_Node_Str"");
  String type=null;
  if (typeList.getSimpleValue() != null)   type=typeList.getSimpleValue();
  LayoutGroupDTO group=groupList.getValue();
  Integer order=null;
  if (orderField.getValue() != null)   order=new Integer(orderField.getValue().intValue());
  Boolean isCompulsory=validates.getValue();
  PrivacyGroupDTO pg=privacyGroupsListCombo.getValue();
  Boolean amend=isAmendable.getValue();
  Boolean inBanner=isBanner.getValue();
  Integer posB=null;
  if (posBanner.getValue() != null)   posB=posBanner.getValue().getValue();
  String textType=null;
  if (textAreaTypeList.getValue() != null)   textType=textAreaTypeList.getSimpleValue();
  Character textTypeC=null;
  if (I18N.CONSTANTS.adminFlexibleTextTypeP().equals(textType)) {
    textTypeC='P';
  }
 else   if (I18N.CONSTANTS.adminFlexibleTextTypeT().equals(textType)) {
    textTypeC='T';
  }
 else   if (I18N.CONSTANTS.adminFlexibleTextTypeN().equals(textType)) {
    textTypeC='N';
  }
 else   if (I18N.CONSTANTS.adminFlexibleTextTypeD().equals(textType)) {
    textTypeC='D';
  }
  Integer maxLimit=null;
  if (maxLimitField.getValue() != null)   maxLimit=new Integer(maxLimitField.getValue().intValue());
  Integer minLimit=null;
  if (minLimitField.getValue() != null)   minLimit=new Integer(minLimitField.getValue().intValue());
  Integer length=null;
  if (lengthField.getValue() != null)   length=new Integer(lengthField.getValue().intValue());
  Boolean decimal=isDecimal.getValue();
  ReportModelDTO reportModel=reportModelList.getValue();
  Boolean multipleQ=isMultipleQ.getValue();
  CategoryTypeDTO category=linkedCategory.getValue();
  HashMap<String,Object> newFieldProperties=new HashMap<String,Object>();
  newFieldProperties.put(AdminUtil.PROP_FX_NAME,name);
  newFieldProperties.put(AdminUtil.PROP_FX_TYPE,ElementTypeEnum.getType(type));
  newFieldProperties.put(AdminUtil.PROP_FX_GROUP,group);
  newFieldProperties.put(AdminUtil.PROP_FX_ORDER_IN_GROUP,order);
  newFieldProperties.put(AdminUtil.PROP_FX_IN_BANNER,inBanner);
  newFieldProperties.put(AdminUtil.PROP_FX_POS_IN_BANNER,posB);
  newFieldProperties.put(AdminUtil.PROP_FX_IS_COMPULSARY,isCompulsory);
  newFieldProperties.put(AdminUtil.PROP_FX_PRIVACY_GROUP,pg);
  newFieldProperties.put(AdminUtil.PROP_FX_AMENDABLE,amend);
  if (textTypeC != null)   newFieldProperties.put(AdminUtil.PROP_FX_TEXT_TYPE,textTypeC);
  if (length != null)   newFieldProperties.put(AdminUtil.PROP_FX_LENGTH,length);
  if (maxLimit != null)   newFieldProperties.put(AdminUtil.PROP_FX_MAX_LIMIT,maxLimit);
  if (minLimit != null)   newFieldProperties.put(AdminUtil.PROP_FX_MIN_LIMIT,minLimit);
  if (decimal != null && ElementTypeEnum.TEXT_AREA.equals(ElementTypeEnum.getType(type)))   newFieldProperties.put(AdminUtil.PROP_FX_DECIMAL,decimal);
  if (reportModel != null)   newFieldProperties.put(AdminUtil.PROP_FX_REPORT_MODEL,reportModel);
  if (multipleQ != null)   newFieldProperties.put(AdminUtil.PROP_FX_Q_MULTIPLE,multipleQ);
  if (category != null && category != defaultNoCategory)   newFieldProperties.put(AdminUtil.PROP_FX_Q_CATEGORY,category);
  if (selectedChoicesLabels != null)   newFieldProperties.put(AdminUtil.PROP_FX_Q_CHOICES,selectedChoicesLabels);
  for (  String selLab : selectedChoicesLabels) {
    Log.debug(""String_Node_Str"" + selLab);
  }
  String message=""String_Node_Str"";
  for (  Map.Entry<String,Object> newP : newFieldProperties.entrySet()) {
    message+=newP.getKey() + ""String_Node_Str"" + newP.getValue()+ ""String_Node_Str"";
  }
  Log.debug(message + ""String_Node_Str"");
  if (flexibleElementToUpdate != null) {
    message=""String_Node_Str"";
    for (    Map.Entry<String,Object> old : oldFieldProperties.entrySet()) {
      message+=old.getKey() + ""String_Node_Str"" + old.getValue()+ ""String_Node_Str"";
      if ((old.getValue() != null && old.getValue().equals(newFieldProperties.get(old.getKey()))) || (old.getValue() == null && newFieldProperties.get(old.getKey()) == null)) {
        newFieldProperties.remove(old.getKey());
      }
    }
    Log.debug(message + ""String_Node_Str"");
  }
  message=""String_Node_Str"";
  for (  Map.Entry<String,Object> newP : newFieldProperties.entrySet()) {
    if (newP.getValue() != null)     message+=newP.getKey() + ""String_Node_Str"" + newP.getValue()+ ""String_Node_Str"";
  }
  Log.debug(message + ""String_Node_Str"");
  if (newFieldProperties.get(AdminUtil.PROP_FX_ORDER_IN_GROUP) != null) {
    newFieldProperties.put(AdminUtil.PROP_FX_GROUP,group);
  }
  if (flexibleElementToUpdate != null)   newFieldProperties.put(AdminUtil.PROP_FX_FLEXIBLE_ELEMENT,flexibleElementToUpdate);
 else   newFieldProperties.put(AdminUtil.PROP_FX_FLEXIBLE_ELEMENT,new TextAreaElementDTO());
  newFieldProperties.put(AdminUtil.ADMIN_PROJECT_MODEL,projectModelToUpdate);
  newFieldProperties.put(AdminUtil.ADMIN_ORG_UNIT_MODEL,orgUnitModelToUpdate);
  newFieldProperties.put(AdminUtil.PROP_FX_OLD_FIELDS,oldFieldProperties);
  if (isProject) {
    dispatcher.execute(new CreateEntity(""String_Node_Str"",newFieldProperties),null,new AsyncCallback<CreateResult>(){
      public void onFailure(      Throwable caught){
        MessageBox.alert(I18N.CONSTANTS.adminFlexibleCreationBox(),I18N.MESSAGES.adminStandardCreationFailure(I18N.CONSTANTS.adminStandardFlexibleName() + ""String_Node_Str"" + name+ ""String_Node_Str""),null);
        callback.onFailure(caught);
      }
      @Override public void onSuccess(      CreateResult result){
        if (result != null) {
          ProjectModelDTO pModelUpdated=(ProjectModelDTO)result.getEntity();
          UpdateModelResult completeResult=new UpdateModelResult(pModelUpdated.getId());
          completeResult.setEntity(pModelUpdated);
          if (flexibleElementToUpdate != null) {
            for (            FlexibleElementDTO f : pModelUpdated.getAllElements()) {
              if (f.getId() == flexibleElementToUpdate.getId()) {
                completeResult.setAnnexEntity(f);
              }
            }
            Notification.show(I18N.CONSTANTS.adminFlexibleCreationBox(),I18N.MESSAGES.adminStandardUpdateSuccess(I18N.CONSTANTS.adminStandardFlexibleName() + ""String_Node_Str"" + name+ ""String_Node_Str""));
          }
 else {
            List<Integer> flexibleIds=new ArrayList<Integer>();
            for (            FlexibleElementDTO f : projectModelToUpdate.getAllElements()) {
              flexibleIds.add(f.getId());
            }
            for (            FlexibleElementDTO f : pModelUpdated.getAllElements()) {
              if (!flexibleIds.contains(f.getId())) {
                completeResult.setAnnexEntity(f);
              }
            }
            Notification.show(I18N.CONSTANTS.adminFlexibleCreationBox(),I18N.MESSAGES.adminStandardCreationSuccess(I18N.CONSTANTS.adminStandardFlexibleName() + ""String_Node_Str"" + name+ ""String_Node_Str""));
          }
          callback.onSuccess(completeResult);
        }
 else {
          Throwable t=new Throwable(""String_Node_Str"");
          MessageBox.alert(I18N.CONSTANTS.adminFlexibleCreationBox(),I18N.MESSAGES.adminStandardCreationNull(I18N.CONSTANTS.adminStandardFlexibleName() + ""String_Node_Str"" + name+ ""String_Node_Str""),null);
          callback.onFailure(t);
        }
      }
    }
);
  }
 else {
    dispatcher.execute(new CreateEntity(""String_Node_Str"",newFieldProperties),null,new AsyncCallback<CreateResult>(){
      public void onFailure(      Throwable caught){
        MessageBox.alert(I18N.CONSTANTS.adminFlexibleCreationBox(),I18N.MESSAGES.adminStandardCreationFailure(I18N.CONSTANTS.adminStandardFlexibleName() + ""String_Node_Str"" + name+ ""String_Node_Str""),null);
        callback.onFailure(caught);
      }
      @Override public void onSuccess(      CreateResult result){
        if (result != null) {
          OrgUnitModelDTO oModelUpdated=(OrgUnitModelDTO)result.getEntity();
          UpdateModelResult completeResult=new UpdateModelResult(oModelUpdated.getId());
          completeResult.setEntity(oModelUpdated);
          if (flexibleElementToUpdate != null) {
            for (            FlexibleElementDTO f : oModelUpdated.getAllElements()) {
              if (f.getId() == flexibleElementToUpdate.getId()) {
                Log.debug(""String_Node_Str"" + f.getId());
                completeResult.setAnnexEntity(f);
              }
            }
            Notification.show(I18N.CONSTANTS.adminFlexibleCreationBox(),I18N.MESSAGES.adminStandardUpdateSuccess(I18N.CONSTANTS.adminStandardFlexibleName() + ""String_Node_Str"" + name+ ""String_Node_Str""));
          }
 else {
            List<Integer> flexibleIds=new ArrayList<Integer>();
            for (            FlexibleElementDTO f : orgUnitModelToUpdate.getAllElements()) {
              flexibleIds.add(f.getId());
            }
            for (            FlexibleElementDTO f : oModelUpdated.getAllElements()) {
              if (!flexibleIds.contains(f.getId())) {
                completeResult.setAnnexEntity(f);
              }
            }
            Notification.show(I18N.CONSTANTS.adminFlexibleCreationBox(),I18N.MESSAGES.adminStandardCreationSuccess(I18N.CONSTANTS.adminStandardFlexibleName() + ""String_Node_Str"" + name+ ""String_Node_Str""));
          }
          callback.onSuccess(completeResult);
        }
 else {
          Throwable t=new Throwable(""String_Node_Str"");
          MessageBox.alert(I18N.CONSTANTS.adminFlexibleCreationBox(),I18N.MESSAGES.adminStandardCreationNull(I18N.CONSTANTS.adminStandardFlexibleName() + ""String_Node_Str"" + name+ ""String_Node_Str""),null);
          callback.onFailure(t);
        }
      }
    }
);
  }
}","private void createFlexibleElement(final AsyncCallback<UpdateModelResult> callback){
  String send=""String_Node_Str"";
  if (htmlArea.getValue() != null && !htmlArea.getValue().isEmpty()) {
    String a=htmlArea.getValue();
    if (a != null && !a.isEmpty()) {
      String[] e=a.split(""String_Node_Str"");
      for (      String e1 : e) {
        send=send + e1;
      }
    }
  }
  if (!commonPanel.isValid() || htmlArea.getValue() != null && htmlArea.getValue().isEmpty() || ""String_Node_Str"".equals(send)) {
    MessageBox.alert(I18N.CONSTANTS.createFormIncomplete(),I18N.MESSAGES.createFormIncompleteDetails(I18N.CONSTANTS.adminStandardFlexibleName()),null);
    return;
  }
  final String name=send;
  String type=null;
  if (typeList.getSimpleValue() != null)   type=typeList.getSimpleValue();
  LayoutGroupDTO group=groupList.getValue();
  Integer order=null;
  if (orderField.getValue() != null)   order=new Integer(orderField.getValue().intValue());
  Boolean isCompulsory=validates.getValue();
  PrivacyGroupDTO pg=privacyGroupsListCombo.getValue();
  Boolean amend=isAmendable.getValue();
  Boolean inBanner=isBanner.getValue();
  Integer posB=null;
  if (posBanner.getValue() != null)   posB=posBanner.getValue().getValue();
  String textType=null;
  if (textAreaTypeList.getValue() != null)   textType=textAreaTypeList.getSimpleValue();
  Character textTypeC=null;
  if (I18N.CONSTANTS.adminFlexibleTextTypeP().equals(textType)) {
    textTypeC='P';
  }
 else   if (I18N.CONSTANTS.adminFlexibleTextTypeT().equals(textType)) {
    textTypeC='T';
  }
 else   if (I18N.CONSTANTS.adminFlexibleTextTypeN().equals(textType)) {
    textTypeC='N';
  }
 else   if (I18N.CONSTANTS.adminFlexibleTextTypeD().equals(textType)) {
    textTypeC='D';
  }
  Integer maxLimit=null;
  if (maxLimitField.getValue() != null)   maxLimit=new Integer(maxLimitField.getValue().intValue());
  Integer minLimit=null;
  if (minLimitField.getValue() != null)   minLimit=new Integer(minLimitField.getValue().intValue());
  Integer length=null;
  if (lengthField.getValue() != null)   length=new Integer(lengthField.getValue().intValue());
  Boolean decimal=isDecimal.getValue();
  ReportModelDTO reportModel=reportModelList.getValue();
  Boolean multipleQ=isMultipleQ.getValue();
  CategoryTypeDTO category=linkedCategory.getValue();
  Map<String,Object> newFieldProperties=new HashMap<String,Object>();
  newFieldProperties.put(AdminUtil.PROP_FX_NAME,name);
  newFieldProperties.put(AdminUtil.PROP_FX_TYPE,ElementTypeEnum.getType(type));
  newFieldProperties.put(AdminUtil.PROP_FX_GROUP,group);
  newFieldProperties.put(AdminUtil.PROP_FX_ORDER_IN_GROUP,order);
  newFieldProperties.put(AdminUtil.PROP_FX_IN_BANNER,inBanner);
  newFieldProperties.put(AdminUtil.PROP_FX_POS_IN_BANNER,posB);
  newFieldProperties.put(AdminUtil.PROP_FX_IS_COMPULSARY,isCompulsory);
  newFieldProperties.put(AdminUtil.PROP_FX_PRIVACY_GROUP,pg);
  newFieldProperties.put(AdminUtil.PROP_FX_AMENDABLE,amend);
  if (textTypeC != null)   newFieldProperties.put(AdminUtil.PROP_FX_TEXT_TYPE,textTypeC);
  if (length != null)   newFieldProperties.put(AdminUtil.PROP_FX_LENGTH,length);
  if (maxLimit != null)   newFieldProperties.put(AdminUtil.PROP_FX_MAX_LIMIT,maxLimit);
  if (minLimit != null)   newFieldProperties.put(AdminUtil.PROP_FX_MIN_LIMIT,minLimit);
  if (decimal != null && ElementTypeEnum.TEXT_AREA.equals(ElementTypeEnum.getType(type)))   newFieldProperties.put(AdminUtil.PROP_FX_DECIMAL,decimal);
  if (reportModel != null)   newFieldProperties.put(AdminUtil.PROP_FX_REPORT_MODEL,reportModel);
  if (multipleQ != null)   newFieldProperties.put(AdminUtil.PROP_FX_Q_MULTIPLE,multipleQ);
  if (category != null && category != defaultNoCategory)   newFieldProperties.put(AdminUtil.PROP_FX_Q_CATEGORY,category);
  if (selectedChoicesLabels != null)   newFieldProperties.put(AdminUtil.PROP_FX_Q_CHOICES,selectedChoicesLabels);
  for (  String selLab : selectedChoicesLabels) {
    Log.debug(""String_Node_Str"" + selLab);
  }
  String message=""String_Node_Str"";
  for (  Map.Entry<String,Object> newP : newFieldProperties.entrySet()) {
    message+=newP.getKey() + ""String_Node_Str"" + newP.getValue()+ ""String_Node_Str"";
  }
  Log.debug(message + ""String_Node_Str"");
  if (flexibleElementToUpdate != null) {
    message=""String_Node_Str"";
    for (    Map.Entry<String,Object> old : oldFieldProperties.entrySet()) {
      message+=old.getKey() + ""String_Node_Str"" + old.getValue()+ ""String_Node_Str"";
      if ((old.getValue() != null && old.getValue().equals(newFieldProperties.get(old.getKey()))) || (old.getValue() == null && newFieldProperties.get(old.getKey()) == null)) {
        newFieldProperties.remove(old.getKey());
      }
    }
    Log.debug(message + ""String_Node_Str"");
  }
  message=""String_Node_Str"";
  for (  Map.Entry<String,Object> newP : newFieldProperties.entrySet()) {
    if (newP.getValue() != null)     message+=newP.getKey() + ""String_Node_Str"" + newP.getValue()+ ""String_Node_Str"";
  }
  Log.debug(message + ""String_Node_Str"");
  if (newFieldProperties.get(AdminUtil.PROP_FX_ORDER_IN_GROUP) != null) {
    newFieldProperties.put(AdminUtil.PROP_FX_GROUP,group);
  }
  if (flexibleElementToUpdate != null) {
    newFieldProperties.put(AdminUtil.PROP_FX_FLEXIBLE_ELEMENT,flexibleElementToUpdate);
  }
 else {
    TextAreaElementDTO t=new TextAreaElementDTO();
    newFieldProperties.put(AdminUtil.PROP_FX_FLEXIBLE_ELEMENT,t);
  }
  newFieldProperties.put(AdminUtil.ADMIN_PROJECT_MODEL,projectModelToUpdate);
  newFieldProperties.put(AdminUtil.ADMIN_ORG_UNIT_MODEL,orgUnitModelToUpdate);
  newFieldProperties.put(AdminUtil.PROP_FX_OLD_FIELDS,oldFieldProperties);
  if (isProject) {
    dispatcher.execute(new CreateEntity(""String_Node_Str"",newFieldProperties),null,new AsyncCallback<CreateResult>(){
      public void onFailure(      Throwable caught){
        MessageBox.alert(I18N.CONSTANTS.adminFlexibleCreationBox(),I18N.MESSAGES.adminStandardCreationFailure(I18N.CONSTANTS.adminStandardFlexibleName() + ""String_Node_Str"" + name+ ""String_Node_Str""),null);
        callback.onFailure(caught);
      }
      @Override public void onSuccess(      CreateResult result){
        if (result != null) {
          ProjectModelDTO pModelUpdated=(ProjectModelDTO)result.getEntity();
          UpdateModelResult completeResult=new UpdateModelResult(pModelUpdated.getId());
          completeResult.setEntity(pModelUpdated);
          if (flexibleElementToUpdate != null) {
            for (            FlexibleElementDTO f : pModelUpdated.getAllElements()) {
              if (f.getId() == flexibleElementToUpdate.getId()) {
                completeResult.setAnnexEntity(f);
              }
            }
            Notification.show(I18N.CONSTANTS.adminFlexibleCreationBox(),I18N.MESSAGES.adminStandardUpdateSuccess(I18N.CONSTANTS.adminStandardFlexibleName() + ""String_Node_Str"" + name+ ""String_Node_Str""));
          }
 else {
            List<Integer> flexibleIds=new ArrayList<Integer>();
            for (            FlexibleElementDTO f : projectModelToUpdate.getAllElements()) {
              flexibleIds.add(f.getId());
            }
            for (            FlexibleElementDTO f : pModelUpdated.getAllElements()) {
              if (!flexibleIds.contains(f.getId())) {
                completeResult.setAnnexEntity(f);
              }
            }
            Notification.show(I18N.CONSTANTS.adminFlexibleCreationBox(),I18N.MESSAGES.adminStandardCreationSuccess(I18N.CONSTANTS.adminStandardFlexibleName() + ""String_Node_Str"" + name+ ""String_Node_Str""));
          }
          callback.onSuccess(completeResult);
        }
 else {
          Throwable t=new Throwable(""String_Node_Str"");
          MessageBox.alert(I18N.CONSTANTS.adminFlexibleCreationBox(),I18N.MESSAGES.adminStandardCreationNull(I18N.CONSTANTS.adminStandardFlexibleName() + ""String_Node_Str"" + name+ ""String_Node_Str""),null);
          callback.onFailure(t);
        }
      }
    }
);
  }
 else {
    dispatcher.execute(new CreateEntity(""String_Node_Str"",newFieldProperties),null,new AsyncCallback<CreateResult>(){
      public void onFailure(      Throwable caught){
        MessageBox.alert(I18N.CONSTANTS.adminFlexibleCreationBox(),I18N.MESSAGES.adminStandardCreationFailure(I18N.CONSTANTS.adminStandardFlexibleName() + ""String_Node_Str"" + name+ ""String_Node_Str""),null);
        callback.onFailure(caught);
      }
      @Override public void onSuccess(      CreateResult result){
        if (result != null) {
          OrgUnitModelDTO oModelUpdated=(OrgUnitModelDTO)result.getEntity();
          UpdateModelResult completeResult=new UpdateModelResult(oModelUpdated.getId());
          completeResult.setEntity(oModelUpdated);
          if (flexibleElementToUpdate != null) {
            for (            FlexibleElementDTO f : oModelUpdated.getAllElements()) {
              if (f.getId() == flexibleElementToUpdate.getId()) {
                Log.debug(""String_Node_Str"" + f.getId());
                completeResult.setAnnexEntity(f);
              }
            }
            Notification.show(I18N.CONSTANTS.adminFlexibleCreationBox(),I18N.MESSAGES.adminStandardUpdateSuccess(I18N.CONSTANTS.adminStandardFlexibleName() + ""String_Node_Str"" + name+ ""String_Node_Str""));
          }
 else {
            List<Integer> flexibleIds=new ArrayList<Integer>();
            for (            FlexibleElementDTO f : orgUnitModelToUpdate.getAllElements()) {
              flexibleIds.add(f.getId());
            }
            for (            FlexibleElementDTO f : oModelUpdated.getAllElements()) {
              if (!flexibleIds.contains(f.getId())) {
                completeResult.setAnnexEntity(f);
              }
            }
            Notification.show(I18N.CONSTANTS.adminFlexibleCreationBox(),I18N.MESSAGES.adminStandardCreationSuccess(I18N.CONSTANTS.adminStandardFlexibleName() + ""String_Node_Str"" + name+ ""String_Node_Str""));
          }
          callback.onSuccess(completeResult);
        }
 else {
          Throwable t=new Throwable(""String_Node_Str"");
          MessageBox.alert(I18N.CONSTANTS.adminFlexibleCreationBox(),I18N.MESSAGES.adminStandardCreationNull(I18N.CONSTANTS.adminStandardFlexibleName() + ""String_Node_Str"" + name+ ""String_Node_Str""),null);
          callback.onFailure(t);
        }
      }
    }
);
  }
}",0.9756625202812332
35654,"@SuppressWarnings(""String_Node_Str"") public static void persistFlexibleElement(EntityManager em,Mapper mapper,PropertyMap changes,Object model){
  FlexibleElementDTO flexibleEltDTO=null;
  if (changes.get(AdminUtil.PROP_FX_FLEXIBLE_ELEMENT) != null) {
    String name=changes.get(AdminUtil.PROP_FX_NAME);
    ElementTypeEnum type=(ElementTypeEnum)changes.get(AdminUtil.PROP_FX_TYPE);
    Boolean isCompulsory=null;
    if (changes.get(AdminUtil.PROP_FX_IS_COMPULSARY) != null)     isCompulsory=(Boolean)changes.get(AdminUtil.PROP_FX_IS_COMPULSARY);
    PrivacyGroupDTO pg=null;
    if (changes.get(AdminUtil.PROP_FX_PRIVACY_GROUP) != null)     pg=(PrivacyGroupDTO)changes.get(AdminUtil.PROP_FX_PRIVACY_GROUP);
    Boolean amend=null;
    if (changes.get(AdminUtil.PROP_FX_AMENDABLE) != null)     amend=(Boolean)changes.get(AdminUtil.PROP_FX_AMENDABLE);
    LayoutGroupDTO group=null;
    if (changes.get(AdminUtil.PROP_FX_GROUP) != null)     group=(LayoutGroupDTO)changes.get(AdminUtil.PROP_FX_GROUP);
    Integer order=null;
    if (changes.get(AdminUtil.PROP_FX_ORDER_IN_GROUP) != null)     order=(Integer)changes.get(AdminUtil.PROP_FX_ORDER_IN_GROUP);
    Boolean inBanner=null;
    if (changes.get(AdminUtil.PROP_FX_IN_BANNER) != null)     inBanner=(Boolean)changes.get(AdminUtil.PROP_FX_IN_BANNER);
    Integer posB=null;
    if (changes.get(AdminUtil.PROP_FX_POS_IN_BANNER) != null) {
      posB=(Integer)changes.get(AdminUtil.PROP_FX_POS_IN_BANNER);
      posB=posB - 1;
    }
    HashMap<String,Object> oldLayoutFields=(HashMap<String,Object>)changes.get(AdminUtil.PROP_FX_OLD_FIELDS);
    LayoutConstraintDTO oldLayoutConstraintDTO=(LayoutConstraintDTO)oldLayoutFields.get(AdminUtil.PROP_FX_LC);
    LayoutConstraintDTO oldBannerLayoutConstraintDTO=(LayoutConstraintDTO)oldLayoutFields.get(AdminUtil.PROP_FX_LC_BANNER);
    ElementTypeEnum oldType=(ElementTypeEnum)oldLayoutFields.get(AdminUtil.PROP_FX_TYPE);
    Integer oldOrder=(Integer)oldLayoutFields.get(AdminUtil.PROP_FX_ORDER_IN_GROUP);
    Character textType=(Character)changes.get(AdminUtil.PROP_FX_TEXT_TYPE);
    Integer maxLimit=null;
    if (changes.get(AdminUtil.PROP_FX_MAX_LIMIT) != null)     maxLimit=(Integer)changes.get(AdminUtil.PROP_FX_MAX_LIMIT);
    Integer minLimit=null;
    if (changes.get(AdminUtil.PROP_FX_MIN_LIMIT) != null)     minLimit=(Integer)changes.get(AdminUtil.PROP_FX_MIN_LIMIT);
    Integer length=null;
    if (changes.get(AdminUtil.PROP_FX_LENGTH) != null)     length=(Integer)changes.get(AdminUtil.PROP_FX_LENGTH);
    Boolean decimal=null;
    if (changes.get(AdminUtil.PROP_FX_DECIMAL) != null)     decimal=(Boolean)changes.get(AdminUtil.PROP_FX_DECIMAL);
    ReportModelDTO reportModel=null;
    if (changes.get(AdminUtil.PROP_FX_REPORT_MODEL) != null)     reportModel=(ReportModelDTO)changes.get(AdminUtil.PROP_FX_REPORT_MODEL);
    Boolean isMultiple=null;
    if (changes.get(AdminUtil.PROP_FX_Q_MULTIPLE) != null)     isMultiple=(Boolean)changes.get(AdminUtil.PROP_FX_Q_MULTIPLE);
    CategoryTypeDTO category=null;
    if (changes.get(AdminUtil.PROP_FX_Q_CATEGORY) != null)     category=(CategoryTypeDTO)changes.get(AdminUtil.PROP_FX_Q_CATEGORY);
    List<String> qChoices=null;
    if (changes.get(AdminUtil.PROP_FX_Q_CHOICES) != null)     qChoices=(List<String>)changes.get(AdminUtil.PROP_FX_Q_CHOICES);
    flexibleEltDTO=(FlexibleElementDTO)changes.get(AdminUtil.PROP_FX_FLEXIBLE_ELEMENT);
    FlexibleElement flexibleElt=null;
    if (flexibleEltDTO.getId() != 0) {
      flexibleElt=em.find(FlexibleElement.class,new Integer(flexibleEltDTO.getId()).longValue());
    }
 else {
      flexibleElt=(FlexibleElement)createNewFlexibleElement(em,oldType,type,flexibleElt);
    }
    log.debug(""String_Node_Str"" + name + ""String_Node_Str""+ type+ ""String_Node_Str""+ group+ ""String_Node_Str""+ order+ ""String_Node_Str""+ inBanner+ ""String_Node_Str""+ posB+ ""String_Node_Str""+ isCompulsory+ ""String_Node_Str""+ pg+ ""String_Node_Str""+ amend+ ""String_Node_Str"");
    log.debug(""String_Node_Str"" + maxLimit + ""String_Node_Str""+ minLimit+ ""String_Node_Str""+ textType+ ""String_Node_Str""+ length+ ""String_Node_Str""+ decimal+ ""String_Node_Str""+ reportModel+ ""String_Node_Str"");
    Boolean basicChanges=false;
    if (flexibleElt != null) {
      if (name != null) {
        flexibleElt.setLabel(name);
        basicChanges=true;
      }
      if (amend != null) {
        flexibleElt.setAmendable(amend);
        basicChanges=true;
      }
      if (isCompulsory != null) {
        flexibleElt.setValidates(isCompulsory);
        basicChanges=true;
      }
      if (pg != null) {
        PrivacyGroup pgToPersist=em.find(PrivacyGroup.class,pg.getId());
        if (pgToPersist != null) {
          flexibleElt.setPrivacyGroup(pgToPersist);
          basicChanges=true;
        }
      }
      if (basicChanges && flexibleElt.getId() != null)       flexibleElt=em.merge(flexibleElt);
 else       em.persist(flexibleElt);
    }
    if (group != null) {
      LayoutGroup parentLayoutGroup=em.find(LayoutGroup.class,new Integer(group.getId()).longValue());
      LayoutConstraint newLayoutConstraint=new LayoutConstraint();
      if (parentLayoutGroup != null) {
        newLayoutConstraint.setElement(flexibleElt);
        newLayoutConstraint.setParentLayoutGroup(parentLayoutGroup);
        if (oldOrder != null)         newLayoutConstraint.setSortOrder(oldOrder);
        if (order != null)         newLayoutConstraint.setSortOrder(order);
        if (order == null && oldOrder == null)         newLayoutConstraint.setSortOrder(new Integer(parentLayoutGroup.getConstraints().size()));
        if (oldLayoutConstraintDTO != null) {
          newLayoutConstraint.setId(new Integer(oldLayoutConstraintDTO.getId()).longValue());
          newLayoutConstraint=em.merge(newLayoutConstraint);
        }
 else {
          em.persist(newLayoutConstraint);
        }
      }
    }
    if (inBanner != null) {
      if (inBanner) {
        if (model instanceof ProjectModel)         changeBanner(em,posB,(ProjectModel)model,flexibleElt);
 else         if (model instanceof OrgUnitModel)         changeBanner(em,posB,(OrgUnitModel)model,flexibleElt);
      }
 else {
        if (oldBannerLayoutConstraintDTO != null) {
          LayoutConstraint oldBannerLayoutConstraint=mapper.map(oldBannerLayoutConstraintDTO,LayoutConstraint.class);
          oldBannerLayoutConstraint=em.find(LayoutConstraint.class,oldBannerLayoutConstraint.getId());
          em.remove(oldBannerLayoutConstraint);
        }
      }
    }
 else {
      if (posB != null) {
        LayoutConstraint oldBannerLayoutConstraint=mapper.map(oldBannerLayoutConstraintDTO,LayoutConstraint.class);
        if (model instanceof ProjectModel)         changePositionInBanner(em,posB,(ProjectModel)model,flexibleElt,oldBannerLayoutConstraint);
 else         if (model instanceof OrgUnitModel)         changePositionInBanner(em,posB,(OrgUnitModel)model,flexibleElt,oldBannerLayoutConstraint);
      }
    }
    if (oldType != null && type != null) {
      flexibleElt=(FlexibleElement)createNewFlexibleElement(em,oldType,type,flexibleElt);
      log.debug(""String_Node_Str"" + flexibleElt.getClass());
    }
    em.flush();
    em.clear();
    flexibleElt=em.find(FlexibleElement.class,flexibleElt.getId());
    Boolean specificChanges=false;
    if (ElementTypeEnum.FILES_LIST.equals(type) || (ElementTypeEnum.FILES_LIST.equals(oldType) && type == null)) {
      FilesListElement filesListElement=(FilesListElement)flexibleElt;
      if (filesListElement != null) {
        if (maxLimit != null) {
          filesListElement.setLimit(maxLimit);
          specificChanges=true;
        }
        if (specificChanges) {
          filesListElement=em.merge(filesListElement);
          flexibleElt=filesListElement;
        }
      }
    }
 else     if (ElementTypeEnum.TEXT_AREA.equals(type) || (ElementTypeEnum.TEXT_AREA.equals(oldType) && type == null)) {
      TextAreaElement textAreaElement=(TextAreaElement)flexibleElt;
      if (textAreaElement != null) {
        if (maxLimit != null) {
          ((TextAreaElement)flexibleElt).setMaxValue(new Integer(maxLimit).longValue());
          specificChanges=true;
        }
        if (minLimit != null) {
          ((TextAreaElement)flexibleElt).setMinValue(new Integer(minLimit).longValue());
          specificChanges=true;
        }
        if (length != null) {
          ((TextAreaElement)flexibleElt).setLength(length);
          specificChanges=true;
        }
        if (decimal != null) {
          ((TextAreaElement)flexibleElt).setIsDecimal(decimal);
          specificChanges=true;
        }
        if (textType != null) {
          ((TextAreaElement)flexibleElt).setType(textType);
          specificChanges=true;
        }
        if (specificChanges) {
          flexibleElt=em.merge((TextAreaElement)flexibleElt);
        }
      }
    }
 else     if (ElementTypeEnum.REPORT.equals(type) || (ElementTypeEnum.REPORT.equals(oldType) && type == null)) {
      ReportElement reportElement=em.find(ReportElement.class,flexibleElt.getId());
      if (reportElement != null) {
        if (reportModel != null) {
          if (reportModel.getName() != null) {
            Integer reportId=findIdForReport(em,reportModel.getName());
            ((ReportElement)flexibleElt).setModelId(reportId);
            specificChanges=true;
          }
        }
        if (specificChanges) {
          flexibleElt=em.merge((ReportElement)flexibleElt);
        }
      }
    }
 else     if (ElementTypeEnum.REPORT_LIST.equals(type) || (ElementTypeEnum.REPORT_LIST.equals(oldType) && type == null)) {
      ReportListElement reportElement=em.find(ReportListElement.class,flexibleElt.getId());
      if (reportElement != null) {
        if (reportModel.getName() != null) {
          Integer reportId=findIdForReport(em,reportModel.getName());
          ((ReportListElement)flexibleElt).setModelId(reportId);
          specificChanges=true;
        }
        if (specificChanges) {
          flexibleElt=em.merge((ReportListElement)flexibleElt);
        }
      }
    }
 else     if (ElementTypeEnum.QUESTION.equals(type) || (ElementTypeEnum.QUESTION.equals(oldType) && type == null)) {
      QuestionElement questionElement=em.find(QuestionElement.class,flexibleElt.getId());
      if (questionElement != null) {
        if (isMultiple != null) {
          ((QuestionElement)flexibleElt).setIsMultiple(isMultiple);
          specificChanges=true;
        }
        if (category != null) {
          for (          QuestionChoiceElement choiceElt : ((QuestionElement)flexibleElt).getChoices()) {
            em.remove(choiceElt);
          }
          CategoryType categoryType=em.find(CategoryType.class,category.getId());
          if (categoryType != null) {
            ((QuestionElement)flexibleElt).setCategoryType(categoryType);
            List<QuestionChoiceElement> choices=new ArrayList<QuestionChoiceElement>();
            int i=0;
            for (            CategoryElement catElt : categoryType.getElements()) {
              QuestionChoiceElement qChoice=new QuestionChoiceElement();
              qChoice.setLabel(""String_Node_Str"");
              qChoice.setCategoryElement(catElt);
              qChoice.setParentQuestion(questionElement);
              qChoice.setSortOrder(i++);
              choices.add(qChoice);
            }
            ((QuestionElement)flexibleElt).setChoices(choices);
            specificChanges=true;
          }
        }
 else         if (qChoices != null) {
          for (          QuestionChoiceElement choiceElt : ((QuestionElement)flexibleElt).getChoices()) {
            em.remove(choiceElt);
          }
          ((QuestionElement)flexibleElt).setCategoryType(null);
          List<QuestionChoiceElement> choices=new ArrayList<QuestionChoiceElement>();
          int i=0;
          for (          String choiceLabel : qChoices) {
            QuestionChoiceElement qChoice=new QuestionChoiceElement();
            qChoice.setLabel(choiceLabel);
            qChoice.setParentQuestion(questionElement);
            qChoice.setSortOrder(i++);
            choices.add(qChoice);
          }
          ((QuestionElement)flexibleElt).setChoices(choices);
          specificChanges=true;
        }
        if (specificChanges) {
          flexibleElt=em.merge((QuestionElement)flexibleElt);
        }
      }
    }
    em.flush();
    em.clear();
  }
}","@SuppressWarnings(""String_Node_Str"") public static void persistFlexibleElement(EntityManager em,Mapper mapper,PropertyMap changes,Object model){
  FlexibleElementDTO flexibleEltDTO=null;
  if (changes.get(AdminUtil.PROP_FX_FLEXIBLE_ELEMENT) != null) {
    String name=(String)changes.get(AdminUtil.PROP_FX_NAME);
    ElementTypeEnum type=(ElementTypeEnum)changes.get(AdminUtil.PROP_FX_TYPE);
    Boolean isCompulsory=null;
    if (changes.get(AdminUtil.PROP_FX_IS_COMPULSARY) != null)     isCompulsory=(Boolean)changes.get(AdminUtil.PROP_FX_IS_COMPULSARY);
    PrivacyGroupDTO pg=null;
    if (changes.get(AdminUtil.PROP_FX_PRIVACY_GROUP) != null)     pg=(PrivacyGroupDTO)changes.get(AdminUtil.PROP_FX_PRIVACY_GROUP);
    Boolean amend=null;
    if (changes.get(AdminUtil.PROP_FX_AMENDABLE) != null)     amend=(Boolean)changes.get(AdminUtil.PROP_FX_AMENDABLE);
    LayoutGroupDTO group=null;
    if (changes.get(AdminUtil.PROP_FX_GROUP) != null)     group=(LayoutGroupDTO)changes.get(AdminUtil.PROP_FX_GROUP);
    Integer order=null;
    if (changes.get(AdminUtil.PROP_FX_ORDER_IN_GROUP) != null)     order=(Integer)changes.get(AdminUtil.PROP_FX_ORDER_IN_GROUP);
    Boolean inBanner=null;
    if (changes.get(AdminUtil.PROP_FX_IN_BANNER) != null)     inBanner=(Boolean)changes.get(AdminUtil.PROP_FX_IN_BANNER);
    Integer posB=null;
    if (changes.get(AdminUtil.PROP_FX_POS_IN_BANNER) != null) {
      posB=(Integer)changes.get(AdminUtil.PROP_FX_POS_IN_BANNER);
      posB=posB - 1;
    }
    HashMap<String,Object> oldLayoutFields=(HashMap<String,Object>)changes.get(AdminUtil.PROP_FX_OLD_FIELDS);
    LayoutConstraintDTO oldLayoutConstraintDTO=(LayoutConstraintDTO)oldLayoutFields.get(AdminUtil.PROP_FX_LC);
    LayoutConstraintDTO oldBannerLayoutConstraintDTO=(LayoutConstraintDTO)oldLayoutFields.get(AdminUtil.PROP_FX_LC_BANNER);
    ElementTypeEnum oldType=(ElementTypeEnum)oldLayoutFields.get(AdminUtil.PROP_FX_TYPE);
    Integer oldOrder=(Integer)oldLayoutFields.get(AdminUtil.PROP_FX_ORDER_IN_GROUP);
    Character textType=(Character)changes.get(AdminUtil.PROP_FX_TEXT_TYPE);
    Integer maxLimit=null;
    if (changes.get(AdminUtil.PROP_FX_MAX_LIMIT) != null)     maxLimit=(Integer)changes.get(AdminUtil.PROP_FX_MAX_LIMIT);
    Integer minLimit=null;
    if (changes.get(AdminUtil.PROP_FX_MIN_LIMIT) != null)     minLimit=(Integer)changes.get(AdminUtil.PROP_FX_MIN_LIMIT);
    Integer length=null;
    if (changes.get(AdminUtil.PROP_FX_LENGTH) != null)     length=(Integer)changes.get(AdminUtil.PROP_FX_LENGTH);
    Boolean decimal=null;
    if (changes.get(AdminUtil.PROP_FX_DECIMAL) != null)     decimal=(Boolean)changes.get(AdminUtil.PROP_FX_DECIMAL);
    ReportModelDTO reportModel=null;
    if (changes.get(AdminUtil.PROP_FX_REPORT_MODEL) != null)     reportModel=(ReportModelDTO)changes.get(AdminUtil.PROP_FX_REPORT_MODEL);
    Boolean isMultiple=null;
    if (changes.get(AdminUtil.PROP_FX_Q_MULTIPLE) != null)     isMultiple=(Boolean)changes.get(AdminUtil.PROP_FX_Q_MULTIPLE);
    CategoryTypeDTO category=null;
    if (changes.get(AdminUtil.PROP_FX_Q_CATEGORY) != null)     category=(CategoryTypeDTO)changes.get(AdminUtil.PROP_FX_Q_CATEGORY);
    List<String> qChoices=null;
    if (changes.get(AdminUtil.PROP_FX_Q_CHOICES) != null)     qChoices=(List<String>)changes.get(AdminUtil.PROP_FX_Q_CHOICES);
    flexibleEltDTO=(FlexibleElementDTO)changes.get(AdminUtil.PROP_FX_FLEXIBLE_ELEMENT);
    FlexibleElement flexibleElt=null;
    if (flexibleEltDTO.getId() != 0) {
      flexibleElt=em.find(FlexibleElement.class,new Integer(flexibleEltDTO.getId()).longValue());
    }
 else {
      flexibleElt=(FlexibleElement)createNewFlexibleElement(em,oldType,type,flexibleElt);
    }
    log.debug(""String_Node_Str"" + name + ""String_Node_Str""+ type+ ""String_Node_Str""+ group+ ""String_Node_Str""+ order+ ""String_Node_Str""+ inBanner+ ""String_Node_Str""+ posB+ ""String_Node_Str""+ isCompulsory+ ""String_Node_Str""+ pg+ ""String_Node_Str""+ amend+ ""String_Node_Str"");
    log.debug(""String_Node_Str"" + maxLimit + ""String_Node_Str""+ minLimit+ ""String_Node_Str""+ textType+ ""String_Node_Str""+ length+ ""String_Node_Str""+ decimal+ ""String_Node_Str""+ reportModel+ ""String_Node_Str"");
    Boolean basicChanges=false;
    if (flexibleElt != null) {
      if (name != null) {
        flexibleElt.setLabel(name);
        basicChanges=true;
      }
      if (amend != null) {
        flexibleElt.setAmendable(amend);
        basicChanges=true;
      }
      if (isCompulsory != null) {
        flexibleElt.setValidates(isCompulsory);
        basicChanges=true;
      }
      if (pg != null) {
        PrivacyGroup pgToPersist=em.find(PrivacyGroup.class,pg.getId());
        if (pgToPersist != null) {
          flexibleElt.setPrivacyGroup(pgToPersist);
          basicChanges=true;
        }
      }
      if (basicChanges && flexibleElt.getId() != null)       flexibleElt=em.merge(flexibleElt);
 else       em.persist(flexibleElt);
    }
    if (group != null) {
      LayoutGroup parentLayoutGroup=em.find(LayoutGroup.class,new Integer(group.getId()).longValue());
      LayoutConstraint newLayoutConstraint=new LayoutConstraint();
      if (parentLayoutGroup != null) {
        newLayoutConstraint.setElement(flexibleElt);
        newLayoutConstraint.setParentLayoutGroup(parentLayoutGroup);
        if (oldOrder != null)         newLayoutConstraint.setSortOrder(oldOrder);
        if (order != null)         newLayoutConstraint.setSortOrder(order);
        if (order == null && oldOrder == null)         newLayoutConstraint.setSortOrder(new Integer(parentLayoutGroup.getConstraints().size()));
        if (oldLayoutConstraintDTO != null) {
          newLayoutConstraint.setId(new Integer(oldLayoutConstraintDTO.getId()).longValue());
          newLayoutConstraint=em.merge(newLayoutConstraint);
        }
 else {
          em.persist(newLayoutConstraint);
        }
      }
    }
    if (inBanner != null) {
      if (inBanner) {
        if (model instanceof ProjectModel)         changeBanner(em,posB,(ProjectModel)model,flexibleElt);
 else         if (model instanceof OrgUnitModel)         changeBanner(em,posB,(OrgUnitModel)model,flexibleElt);
      }
 else {
        if (oldBannerLayoutConstraintDTO != null) {
          LayoutConstraint oldBannerLayoutConstraint=mapper.map(oldBannerLayoutConstraintDTO,LayoutConstraint.class);
          oldBannerLayoutConstraint=em.find(LayoutConstraint.class,oldBannerLayoutConstraint.getId());
          em.remove(oldBannerLayoutConstraint);
        }
      }
    }
 else {
      if (posB != null) {
        LayoutConstraint oldBannerLayoutConstraint=mapper.map(oldBannerLayoutConstraintDTO,LayoutConstraint.class);
        if (model instanceof ProjectModel)         changePositionInBanner(em,posB,(ProjectModel)model,flexibleElt,oldBannerLayoutConstraint);
 else         if (model instanceof OrgUnitModel)         changePositionInBanner(em,posB,(OrgUnitModel)model,flexibleElt,oldBannerLayoutConstraint);
      }
    }
    if (oldType != null && type != null) {
      flexibleElt=(FlexibleElement)createNewFlexibleElement(em,oldType,type,flexibleElt);
      log.debug(""String_Node_Str"" + flexibleElt.getClass());
    }
    em.flush();
    em.clear();
    flexibleElt=em.find(FlexibleElement.class,flexibleElt.getId());
    Boolean specificChanges=false;
    if (ElementTypeEnum.FILES_LIST.equals(type) || (ElementTypeEnum.FILES_LIST.equals(oldType) && type == null)) {
      FilesListElement filesListElement=(FilesListElement)flexibleElt;
      if (filesListElement != null) {
        if (maxLimit != null) {
          filesListElement.setLimit(maxLimit);
          specificChanges=true;
        }
        if (specificChanges) {
          filesListElement=em.merge(filesListElement);
          flexibleElt=filesListElement;
        }
      }
    }
 else     if (ElementTypeEnum.TEXT_AREA.equals(type) || (ElementTypeEnum.TEXT_AREA.equals(oldType) && type == null)) {
      TextAreaElement textAreaElement=(TextAreaElement)flexibleElt;
      if (textAreaElement != null) {
        if (maxLimit != null) {
          ((TextAreaElement)flexibleElt).setMaxValue(new Integer(maxLimit).longValue());
          specificChanges=true;
        }
        if (minLimit != null) {
          ((TextAreaElement)flexibleElt).setMinValue(new Integer(minLimit).longValue());
          specificChanges=true;
        }
        if (length != null) {
          ((TextAreaElement)flexibleElt).setLength(length);
          specificChanges=true;
        }
        if (decimal != null) {
          ((TextAreaElement)flexibleElt).setIsDecimal(decimal);
          specificChanges=true;
        }
        if (textType != null) {
          ((TextAreaElement)flexibleElt).setType(textType);
          specificChanges=true;
        }
        if (specificChanges) {
          flexibleElt=em.merge((TextAreaElement)flexibleElt);
        }
      }
    }
 else     if (ElementTypeEnum.REPORT.equals(type) || (ElementTypeEnum.REPORT.equals(oldType) && type == null)) {
      ReportElement reportElement=em.find(ReportElement.class,flexibleElt.getId());
      if (reportElement != null) {
        if (reportModel != null) {
          if (reportModel.getName() != null) {
            Integer reportId=findIdForReport(em,reportModel.getName());
            ((ReportElement)flexibleElt).setModelId(reportId);
            specificChanges=true;
          }
        }
        if (specificChanges) {
          flexibleElt=em.merge((ReportElement)flexibleElt);
        }
      }
    }
 else     if (ElementTypeEnum.REPORT_LIST.equals(type) || (ElementTypeEnum.REPORT_LIST.equals(oldType) && type == null)) {
      ReportListElement reportElement=em.find(ReportListElement.class,flexibleElt.getId());
      if (reportElement != null) {
        if (reportModel.getName() != null) {
          Integer reportId=findIdForReport(em,reportModel.getName());
          ((ReportListElement)flexibleElt).setModelId(reportId);
          specificChanges=true;
        }
        if (specificChanges) {
          flexibleElt=em.merge((ReportListElement)flexibleElt);
        }
      }
    }
 else     if (ElementTypeEnum.QUESTION.equals(type) || (ElementTypeEnum.QUESTION.equals(oldType) && type == null)) {
      QuestionElement questionElement=em.find(QuestionElement.class,flexibleElt.getId());
      if (questionElement != null) {
        if (isMultiple != null) {
          ((QuestionElement)flexibleElt).setIsMultiple(isMultiple);
          specificChanges=true;
        }
        if (category != null) {
          for (          QuestionChoiceElement choiceElt : ((QuestionElement)flexibleElt).getChoices()) {
            em.remove(choiceElt);
          }
          CategoryType categoryType=em.find(CategoryType.class,category.getId());
          if (categoryType != null) {
            ((QuestionElement)flexibleElt).setCategoryType(categoryType);
            List<QuestionChoiceElement> choices=new ArrayList<QuestionChoiceElement>();
            int i=0;
            for (            CategoryElement catElt : categoryType.getElements()) {
              QuestionChoiceElement qChoice=new QuestionChoiceElement();
              qChoice.setLabel(""String_Node_Str"");
              qChoice.setCategoryElement(catElt);
              qChoice.setParentQuestion(questionElement);
              qChoice.setSortOrder(i++);
              choices.add(qChoice);
            }
            ((QuestionElement)flexibleElt).setChoices(choices);
            specificChanges=true;
          }
        }
 else         if (qChoices != null) {
          for (          QuestionChoiceElement choiceElt : ((QuestionElement)flexibleElt).getChoices()) {
            em.remove(choiceElt);
          }
          ((QuestionElement)flexibleElt).setCategoryType(null);
          List<QuestionChoiceElement> choices=new ArrayList<QuestionChoiceElement>();
          int i=0;
          for (          String choiceLabel : qChoices) {
            QuestionChoiceElement qChoice=new QuestionChoiceElement();
            qChoice.setLabel(choiceLabel);
            qChoice.setParentQuestion(questionElement);
            qChoice.setSortOrder(i++);
            choices.add(qChoice);
          }
          ((QuestionElement)flexibleElt).setChoices(choices);
          specificChanges=true;
        }
        if (specificChanges) {
          flexibleElt=em.merge((QuestionElement)flexibleElt);
        }
      }
    }
    em.flush();
    em.clear();
  }
}",0.9996773673173092
35655,"@Override public Object create(User executingUser,PropertyMap properties){
  User userToPersist=null;
  User userFound=null;
  OrgUnitProfile orgUnitProfileToPersist=null;
  OrgUnitProfile orgUnitProfileFound=null;
  int id=(Integer)properties.get(""String_Node_Str"");
  String email=properties.get(""String_Node_Str"");
  String name=properties.get(""String_Node_Str"");
  String firstName=properties.get(""String_Node_Str"");
  String locale=properties.get(""String_Node_Str"");
  String password=properties.get(""String_Node_Str"");
  int orgUnitId=(Integer)properties.get(""String_Node_Str"");
  List<Integer> profilesIds=properties.get(""String_Node_Str"");
  if (email != null && name != null) {
    userFound=em.find(User.class,id);
    if (userFound != null) {
      if (userUnitDAO.doesOrgUnitProfileExist(userFound))       orgUnitProfileFound=userUnitDAO.findOrgUnitProfileByUser(userFound);
    }
    userToPersist=UserDAOImpl.createNewUser(email,name,locale);
    userToPersist.setFirstName(firstName);
    userToPersist.setOrganization(executingUser.getOrganization());
    if (password != null && !password.isEmpty()) {
      userToPersist.setHashedPassword(PasswordHelper.hashPassword(password));
      userToPersist.setChangePasswordKey(null);
      userToPersist.setDateChangePasswordKeyIssued(new Date());
    }
    if (userFound != null && userFound.getId() > 0) {
      userToPersist.setId(userFound.getId());
      userToPersist=em.merge(userToPersist);
    }
 else {
      if (!userDAO.doesUserExist(email)) {
        userDAO.persist(userToPersist);
        try {
          log.debug(""String_Node_Str"" + userToPersist.getEmail());
          log.debug(""String_Node_Str"" + this.properties.getProperty(KEY_NEWUSER_CONFIRM_URL,DEFAULT_CONFIRM_URL));
          String confirmUrl=this.properties.getProperty(KEY_NEWUSER_CONFIRM_URL,DEFAULT_CONFIRM_URL);
          inviteMailer.send(new Invitation(userToPersist,executingUser,confirmUrl),LocaleHelper.getLocaleObject(executingUser),true);
        }
 catch (        Exception e) {
          log.debug(""String_Node_Str"");
          log.debug(e.getMessage());
          System.out.println(e.getStackTrace());
        }
      }
 else {
        return null;
      }
    }
    if (userToPersist.getId() > 0) {
      if (userFound != null && userFound.getId() > 0 && orgUnitProfileFound != null)       orgUnitProfileToPersist=orgUnitProfileFound;
 else       orgUnitProfileToPersist=new OrgUnitProfile();
      OrgUnit orgUnit=em.find(OrgUnit.class,orgUnitId);
      if (orgUnit != null) {
        orgUnitProfileToPersist.setOrgUnit(orgUnit);
        List<Profile> profilesToPersist=new ArrayList<Profile>();
        for (        int profileId : profilesIds) {
          Profile profile=em.find(Profile.class,profileId);
          profilesToPersist.add(profile);
        }
        orgUnitProfileToPersist.setProfiles(profilesToPersist);
        orgUnitProfileToPersist.setUser(userToPersist);
        if (userFound != null && userFound.getId() > 0 && orgUnitProfileFound != null) {
          orgUnitProfileToPersist=em.merge(orgUnitProfileToPersist);
        }
 else {
          em.persist(orgUnitProfileToPersist);
        }
        if (orgUnitProfileToPersist.getId() != 0) {
          userToPersist.setOrgUnitWithProfiles(orgUnitProfileToPersist);
        }
      }
    }
  }
  UserDTO userPersisted=null;
  if (userToPersist != null) {
    userPersisted=GetUsersWithProfilesHandler.mapUserToUserDTO(userToPersist,mapper);
    userPersisted.setIdd(userToPersist.getId());
  }
  return userPersisted;
}","@Override public Object create(User executingUser,PropertyMap properties){
  User userToPersist=null;
  User userFound=null;
  OrgUnitProfile orgUnitProfileToPersist=null;
  OrgUnitProfile orgUnitProfileFound=null;
  int id=(Integer)properties.get(""String_Node_Str"");
  String email=properties.get(""String_Node_Str"");
  String name=properties.get(""String_Node_Str"");
  String firstName=properties.get(""String_Node_Str"");
  String locale=properties.get(""String_Node_Str"");
  String password=properties.get(""String_Node_Str"");
  int orgUnitId=(Integer)properties.get(""String_Node_Str"");
  List<Integer> profilesIds=properties.get(""String_Node_Str"");
  if (email != null && name != null) {
    userFound=em.find(User.class,id);
    if (userFound != null) {
      if (userUnitDAO.doesOrgUnitProfileExist(userFound))       orgUnitProfileFound=userUnitDAO.findOrgUnitProfileByUser(userFound);
    }
    userToPersist=UserDAOImpl.createNewUser(email,name,locale);
    userToPersist.setFirstName(firstName);
    userToPersist.setOrganization(executingUser.getOrganization());
    if (password != null && !password.isEmpty()) {
      userToPersist.setHashedPassword(PasswordHelper.hashPassword(password));
      userToPersist.setChangePasswordKey(null);
      userToPersist.setDateChangePasswordKeyIssued(new Date());
    }
    if (userFound != null && userFound.getId() > 0) {
      userToPersist.setId(userFound.getId());
      userToPersist=em.merge(userToPersist);
    }
 else {
      if (!userDAO.doesUserExist(email)) {
        userDAO.persist(userToPersist);
        try {
          log.debug(""String_Node_Str"" + userToPersist.getEmail());
          log.debug(""String_Node_Str"" + this.properties.getProperty(KEY_HOST_URL,DEFAULT_HOST_URL));
          String confirmUrl=this.properties.getProperty(KEY_HOST_URL,DEFAULT_HOST_URL);
          inviteMailer.send(new Invitation(userToPersist,executingUser,confirmUrl),LocaleHelper.getLocaleObject(executingUser),true);
        }
 catch (        Exception e) {
          log.debug(""String_Node_Str"");
          log.debug(e.getMessage());
          System.out.println(e.getStackTrace());
        }
      }
 else {
        return null;
      }
    }
    if (userToPersist.getId() > 0) {
      if (userFound != null && userFound.getId() > 0 && orgUnitProfileFound != null)       orgUnitProfileToPersist=orgUnitProfileFound;
 else       orgUnitProfileToPersist=new OrgUnitProfile();
      OrgUnit orgUnit=em.find(OrgUnit.class,orgUnitId);
      if (orgUnit != null) {
        orgUnitProfileToPersist.setOrgUnit(orgUnit);
        List<Profile> profilesToPersist=new ArrayList<Profile>();
        for (        int profileId : profilesIds) {
          Profile profile=em.find(Profile.class,profileId);
          profilesToPersist.add(profile);
        }
        orgUnitProfileToPersist.setProfiles(profilesToPersist);
        orgUnitProfileToPersist.setUser(userToPersist);
        if (userFound != null && userFound.getId() > 0 && orgUnitProfileFound != null) {
          orgUnitProfileToPersist=em.merge(orgUnitProfileToPersist);
        }
 else {
          em.persist(orgUnitProfileToPersist);
        }
        if (orgUnitProfileToPersist.getId() != 0) {
          userToPersist.setOrgUnitWithProfiles(orgUnitProfileToPersist);
        }
      }
    }
  }
  UserDTO userPersisted=null;
  if (userToPersist != null) {
    userPersisted=GetUsersWithProfilesHandler.mapUserToUserDTO(userToPersist,mapper);
    userPersisted.setIdd(userToPersist.getId());
  }
  return userPersisted;
}",0.9926408151712426
35656,"public ElementForm(Dispatcher dispatcher,final AsyncCallback<UpdateModelResult> callback,final FlexibleElementDTO flexibleElement,ProjectModelDTO projectModelToUpdate,OrgUnitModelDTO orgUnitModelToUpdate){
  final VBoxLayout mainPanelLayout=new VBoxLayout();
  mainPanelLayout.setVBoxLayoutAlign(VBoxLayout.VBoxLayoutAlign.STRETCH);
  setLayout(mainPanelLayout);
  setHeaderVisible(false);
  if (projectModelToUpdate != null) {
    isProject=true;
  }
 else {
    isProject=false;
  }
  this.dispatcher=dispatcher;
  this.projectModelToUpdate=projectModelToUpdate;
  this.orgUnitModelToUpdate=orgUnitModelToUpdate;
  this.flexibleElementToUpdate=flexibleElement;
  UIConstants constants=GWT.create(UIConstants.class);
  specificsPanel=new FormPanel();
  specificsPanel.setHeaderVisible(false);
  specificsPanel.setBorders(true);
  specificsPanel.hide();
  reportModelList=new ComboBox<ReportModelDTO>();
  reportModelList.setEditable(false);
  reportModelList.hide();
  reportModelList.setFieldLabel(I18N.CONSTANTS.adminReportName());
  reportModelList.setDisplayField(""String_Node_Str"");
  reportModelList.setValueField(""String_Node_Str"");
  reportModelList.setTriggerAction(TriggerAction.ALL);
  reportModelsStore=new ListStore<ReportModelDTO>();
  dispatcher.execute(new GetReportModels(),null,new AsyncCallback<ReportModelsListResult>(){
    @Override public void onFailure(    Throwable arg0){
      reportModelList.setEmptyText(I18N.CONSTANTS.adminChoiceProblem());
    }
    @Override public void onSuccess(    ReportModelsListResult result){
      reportModelList.setEmptyText(I18N.CONSTANTS.adminReportName());
      reportModelsStore.removeAll();
      if (result != null) {
        reportModelsStore.add(result.getList());
        reportModelsStore.commitChanges();
      }
      if (flexibleElement != null) {
        if (flexibleElement instanceof ReportElementDTO) {
          if (((ReportElementDTO)flexibleElement).getModelId() != null) {
            for (            ReportModelDTO reportModel : reportModelsStore.getModels()) {
              if (reportModel.getId() == ((ReportElementDTO)flexibleElement).getModelId()) {
                reportModelList.setValue(reportModel);
              }
            }
          }
        }
      }
    }
  }
);
  reportModelList.setStore(reportModelsStore);
  maxLimitField=new NumberField();
  maxLimitField.setFieldLabel(I18N.CONSTANTS.adminFlexibleMaxLimit());
  maxLimitField.hide();
  textAreaTypeList=new SimpleComboBox<String>();
  textAreaTypeList.setTriggerAction(TriggerAction.ALL);
  textAreaTypeList.setEditable(false);
  textAreaTypeList.hide();
  textAreaTypeList.setFieldLabel(I18N.CONSTANTS.adminFlexibleTextType());
  List<String> textTypes=new ArrayList<String>();
  textTypes.add(I18N.CONSTANTS.adminFlexibleTextTypeP());
  textTypes.add(I18N.CONSTANTS.adminFlexibleTextTypeT());
  textTypes.add(I18N.CONSTANTS.adminFlexibleTextTypeN());
  textTypes.add(I18N.CONSTANTS.adminFlexibleTextTypeD());
  textAreaTypeList.add(textTypes);
  minLimitField=new NumberField();
  minLimitField.setFieldLabel(I18N.CONSTANTS.adminFlexibleMinLimit());
  minLimitField.hide();
  lengthField=new NumberField();
  lengthField.setFieldLabel(I18N.CONSTANTS.adminFlexibleLength());
  lengthField.hide();
  isDecimal=new CheckBox();
  isDecimal.hide();
  isDecimal.setBoxLabel(""String_Node_Str"");
  isDecimal.setFieldLabel(I18N.CONSTANTS.adminFlexibleDecimal());
  isDecimal.setLabelSeparator(""String_Node_Str"");
  isMultipleQ=new CheckBox();
  isMultipleQ.hide();
  isMultipleQ.setBoxLabel(""String_Node_Str"");
  isMultipleQ.setFieldLabel(I18N.CONSTANTS.adminFlexibleMultipleQ());
  isMultipleQ.setLabelSeparator(""String_Node_Str"");
  isLinkedToQuality=new CheckBox();
  isLinkedToQuality.hide();
  isLinkedToQuality.setBoxLabel(""String_Node_Str"");
  isLinkedToQuality.setFieldLabel(I18N.CONSTANTS.adminFlexibleLinkedToQuality());
  isLinkedToQuality.setLabelSeparator(""String_Node_Str"");
  defaultNoCategory.setLabel(I18N.CONSTANTS.adminFlexibleNoLinkedCategory());
  defaultNoCategory.setId(-1);
  linkedCategory=new ComboBox<CategoryTypeDTO>();
  linkedCategory.setEditable(false);
  linkedCategory.hide();
  linkedCategory.setDisplayField(I18N.CONSTANTS.adminFlexibleNoLinkedCategory());
  linkedCategory.setFieldLabel(I18N.CONSTANTS.adminFlexibleLinkedCategory());
  linkedCategory.setDisplayField(""String_Node_Str"");
  linkedCategory.setValueField(""String_Node_Str"");
  linkedCategory.setTriggerAction(TriggerAction.ALL);
  final ListStore<CategoryTypeDTO> linkedCategoriesStore=new ListStore<CategoryTypeDTO>();
  linkedCategoriesStore.add(defaultNoCategory);
  dispatcher.execute(new GetCategories(),null,new AsyncCallback<CategoriesListResult>(){
    @Override public void onFailure(    Throwable arg0){
      linkedCategory.setEmptyText(I18N.CONSTANTS.adminChoiceProblem());
    }
    @Override public void onSuccess(    CategoriesListResult result){
      linkedCategory.setEmptyText(I18N.CONSTANTS.adminUserCreationProfileChoice());
      linkedCategoriesStore.removeAll();
      linkedCategoriesStore.add(defaultNoCategory);
      if (result != null) {
        linkedCategoriesStore.add(result.getList());
        linkedCategoriesStore.commitChanges();
      }
    }
  }
);
  linkedCategory.setStore(linkedCategoriesStore);
  for (int i=0; i < MAX_TENTATIVES_FOR_CHOICES; i++) {
    final ClickableLabel label=new ClickableLabel();
    label.addClickHandler(new ClickHandler(){
      @Override public void onClick(      ClickEvent arg0){
        label.hide();
        selectedChoicesLabels.remove(label.getText());
        if (selectedChoicesLabels.size() == 0) {
          linkedCategory.setEnabled(true);
        }
      }
    }
);
    label.hide();
    selectableChoices.put(i,label);
  }
  questionChoice=new TextField<String>();
  questionChoice.hide();
  qChoicesAddGrid.setVisible(false);
  qChoicesAddGrid.getCellFormatter().setWidth(0,0,(LABEL_WIDTH) + ""String_Node_Str"");
  qChoicesAddGrid.setCellPadding(0);
  qChoicesAddGrid.setCellSpacing(0);
  qChoicesAddGrid.setWidget(0,0,new LabelField(I18N.CONSTANTS.adminFlexibleQChoices() + ""String_Node_Str""));
  qChoicesAddGrid.setWidget(0,1,questionChoice);
  questionChoice.setHideLabel(false);
  addChoiceButton.hide();
  addChoiceButton.addListener(Events.OnClick,new Listener<ButtonEvent>(){
    @Override public void handleEvent(    ButtonEvent be){
      if (questionChoice.getValue() != null) {
        if (!selectedChoicesLabels.contains(questionChoice.getValue())) {
          if (num < MAX_TENTATIVES_FOR_CHOICES) {
            linkedCategory.setEnabled(false);
            selectableChoices.get(num).setText(questionChoice.getValue());
            selectableChoices.get(num).show();
            num++;
            selectedChoicesLabels.add(questionChoice.getValue());
          }
 else {
            MessageBox.alert(I18N.CONSTANTS.adminMaxAttempts(),I18N.CONSTANTS.adminMaxAttemptsQChoices(),null);
            ElementForm.this.removeFromParent();
          }
        }
      }
    }
  }
);
  qChoicesAddGrid.setWidget(0,2,addChoiceButton);
  linkedCategory.addListener(Events.Select,new Listener<BaseEvent>(){
    @Override public void handleEvent(    BaseEvent be){
      if (linkedCategory.getValue() == null || defaultNoCategory.equals(linkedCategory.getValue())) {
        questionChoice.setEnabled(true);
        addChoiceButton.setEnabled(true);
      }
 else {
        questionChoice.setEnabled(false);
        addChoiceButton.setEnabled(false);
        for (        ClickableLabel selected : selectableChoices.values()) {
          selected.setEnabled(false);
        }
      }
    }
  }
);
  posBanner=new SimpleComboBox<Integer>();
  posBanner.setTriggerAction(TriggerAction.ALL);
  posBanner.setEditable(false);
  posBanner.setFieldLabel(constants.adminFlexibleBannerPosition());
  posBanner.removeAll();
  for (int i=1; i < 7; i++) {
    posBanner.add(i);
  }
  posBanner.setAllowBlank(true);
  posBanner.setEnabled(false);
  posBanner.hide();
  isBanner=new CheckBox();
  isBanner.setFieldLabel(constants.Admin_BANNER());
  isBanner.setBoxLabel(""String_Node_Str"");
  isBanner.setValue(false);
  isBanner.addListener(Events.Change,new Listener<BaseEvent>(){
    @Override public void handleEvent(    BaseEvent be){
      if (isBanner.getValue()) {
        posBanner.removeAll();
        for (int i=1; i < 7; i++) {
          posBanner.add(i);
        }
        posBanner.setEnabled(true);
        posBanner.setAllowBlank(false);
      }
 else {
        posBanner.removeAll();
        posBanner.setValue(null);
        posBanner.setAllowBlank(true);
        posBanner.setEnabled(false);
      }
    }
  }
);
  isBanner.hide();
  specificsPanel.add(isBanner);
  specificsPanel.add(posBanner);
  specificsPanel.add(reportModelList);
  specificsPanel.add(textAreaTypeList);
  specificsPanel.add(lengthField);
  specificsPanel.add(isDecimal);
  specificsPanel.add(minLimitField);
  specificsPanel.add(maxLimitField);
  specificsPanel.add(isMultipleQ);
  specificsPanel.add(isLinkedToQuality);
  specificsPanel.add(linkedCategory);
  specificsPanel.add(qChoicesAddGrid);
  for (  ClickableLabel selected : selectableChoices.values()) {
    selected.hide();
    specificsPanel.add(selected);
  }
  commonPanel=new FormPanel();
  commonPanel.setHeaderVisible(false);
  htmlArea=new HtmlEditor();
  htmlArea.hide();
  htmlArea.setEnableAlignments(false);
  htmlArea.setEnableLinks(false);
  htmlArea.setEnableFont(false);
  htmlArea.setEnableLists(false);
  htmlArea.setEnableColors(false);
  htmlArea.setSourceEditMode(false);
  htmlArea.setHeight(75);
  htmlArea.setFieldLabel(constants.adminFlexibleName());
  if (flexibleElement != null && flexibleElement.getLabel() != null) {
    htmlArea.setValue(flexibleElement.getLabel());
    oldFieldProperties.put(AdminUtil.PROP_FX_NAME,flexibleElement.getLabel());
  }
  LabelField label=new LabelField();
  label.hide();
  label.setFieldLabel(constants.adminFlexibleName());
  if (flexibleElement != null && flexibleElement.getElementType() != null) {
    if (ElementTypeEnum.DEFAULT.equals(flexibleElement.getElementType())) {
      label.setText(DefaultFlexibleElementType.getName(((DefaultFlexibleElementDTO)flexibleElement).getType()));
      label.show();
      oldFieldProperties.put(AdminUtil.PROP_FX_NAME,DefaultFlexibleElementType.getName(((DefaultFlexibleElementDTO)flexibleElement).getType()));
      htmlArea.setValue(DefaultFlexibleElementType.getName(((DefaultFlexibleElementDTO)flexibleElement).getType()));
    }
 else {
      htmlArea.show();
    }
  }
 else {
    htmlArea.show();
  }
  commonPanel.add(label);
  commonPanel.add(htmlArea);
  typeList=new SimpleComboBox<String>();
  typeList.setEditable(false);
  typeList.addListener(Events.Select,new Listener<BaseEvent>(){
    @Override public void handleEvent(    BaseEvent be){
      hideAllSpecificAttributes();
      showSpecificAttributes(typeList.getSimpleValue(),flexibleElementToUpdate,true);
    }
  }
);
  typeList.setFieldLabel(constants.adminFlexibleType());
  typeList.setAllowBlank(false);
  typeList.setTriggerAction(TriggerAction.ALL);
  List<String> values=new ArrayList<String>();
  for (  ElementTypeEnum e : ElementTypeEnum.values()) {
    if (!ElementTypeEnum.DEFAULT.equals(e) && !ElementTypeEnum.TRIPLETS.equals(e) && !ElementTypeEnum.INDICATORS.equals(e))     values.add(ElementTypeEnum.getName(e));
  }
  typeList.add(values);
  if (flexibleElement != null && flexibleElement.getElementType() != null) {
    String typeOfElement=ElementTypeEnum.getName(flexibleElement.getElementType());
    typeList.setSimpleValue(typeOfElement);
    showSpecificAttributes(typeOfElement,flexibleElement,false);
    oldFieldProperties.put(AdminUtil.PROP_FX_TYPE,flexibleElement.getElementType());
    if (ElementTypeEnum.DEFAULT.equals(flexibleElement.getElementType())) {
      typeList.setEnabled(false);
    }
  }
 else   typeList.setEmptyText(I18N.CONSTANTS.adminFlexibleType());
  commonPanel.add(typeList);
  final ListStore<BaseModelData> containersStore=new ListStore<BaseModelData>();
  containerList=new ComboBox<BaseModelData>();
  containerList.setEditable(false);
  containerList.setDisplayField(""String_Node_Str"");
  containerList.setValueField(""String_Node_Str"");
  containerList.setFieldLabel(I18N.CONSTANTS.adminFlexibleContainer());
  containerList.setAllowBlank(false);
  containerList.setTriggerAction(TriggerAction.ALL);
  if (flexibleElement == null)   containerList.setEmptyText(I18N.CONSTANTS.adminFlexibleContainerChoice());
  final ListStore<LayoutGroupDTO> groupsStore=new ListStore<LayoutGroupDTO>();
  groupList=new ComboBox<LayoutGroupDTO>();
  groupList.setEditable(false);
  groupList.setFieldLabel(constants.adminFlexibleGroup());
  groupList.setDisplayField(""String_Node_Str"");
  groupList.setValueField(""String_Node_Str"");
  groupList.setTriggerAction(TriggerAction.ALL);
  containerList.addListener(Events.Select,new Listener<BaseEvent>(){
    @Override public void handleEvent(    BaseEvent be){
      LayoutDTO container=null;
      if (containerList.getValue() != null) {
        if (containerList.getValue() instanceof ProjectBannerDTO) {
          container=((ProjectBannerDTO)containerList.getValue()).getLayoutDTO();
          isBanner.setValue(true);
          posBanner.setAllowBlank(false);
          posBanner.setEnabled(true);
        }
 else         if (containerList.getValue() instanceof ProjectDetailsDTO) {
          container=((ProjectDetailsDTO)containerList.getValue()).getLayoutDTO();
        }
 else         if (containerList.getValue() instanceof PhaseModelDTO) {
          container=((PhaseModelDTO)containerList.getValue()).getLayoutDTO();
        }
 else         if (containerList.getValue() instanceof OrgUnitDetailsDTO) {
          container=((OrgUnitDetailsDTO)containerList.getValue()).getLayout();
        }
      }
      if (container != null) {
        groupsStore.removeAll();
        for (        LayoutGroupDTO lg : container.getLayoutGroupsDTO()) {
          groupsStore.add(lg);
        }
        groupList.setValue(groupsStore.getAt(0));
      }
    }
  }
);
  orderField=new NumberField();
  orderField.setAllowBlank(false);
  orderField.setFieldLabel(constants.adminFlexibleOrder());
  orderField.clear();
  oldFieldProperties.put(AdminUtil.PROP_FX_IN_BANNER,false);
  oldFieldProperties.put(AdminUtil.PROP_FX_POS_IN_BANNER,-1);
  if (isProject) {
    if (flexibleElement != null) {
      BaseModelData container=flexibleElement.getContainerModel();
      containerList.setValue(flexibleElement.getContainerModel());
      groupList.setValue(flexibleElement.getConstraint().getParentLayoutGroupDTO());
      orderField.setValue(flexibleElement.getConstraint().getSortOrder());
      groupsStore.removeAll();
      if (container instanceof PhaseModelDTO) {
        for (        LayoutGroupDTO groupChoice : ((PhaseModelDTO)container).getLayoutDTO().getLayoutGroupsDTO()) {
          groupsStore.add(groupChoice);
        }
      }
 else {
        for (        LayoutGroupDTO groupChoice : ((ProjectDetailsDTO)container).getLayoutDTO().getLayoutGroupsDTO()) {
          groupsStore.add(groupChoice);
        }
      }
      if (flexibleElement.getBannerConstraint() != null) {
        posBanner.setSimpleValue(flexibleElement.getBannerConstraint().getSortOrder());
        isBanner.setValue(true);
        oldFieldProperties.put(AdminUtil.PROP_FX_IN_BANNER,true);
        oldFieldProperties.put(AdminUtil.PROP_FX_POS_IN_BANNER,flexibleElement.getBannerConstraint().getSortOrder());
        oldFieldProperties.put(AdminUtil.PROP_FX_LC_BANNER,flexibleElement.getBannerConstraint());
      }
      oldFieldProperties.put(AdminUtil.PROP_FX_ORDER_IN_GROUP,new Integer(flexibleElement.getConstraint().getSortOrder()));
      oldFieldProperties.put(AdminUtil.PROP_FX_GROUP,flexibleElement.getConstraint().getParentLayoutGroupDTO());
      oldFieldProperties.put(AdminUtil.PROP_FX_LC,flexibleElement.getConstraint());
    }
    containersStore.add(projectModelToUpdate.getProjectDetailsDTO());
    for (    PhaseModelDTO p : projectModelToUpdate.getPhaseModelsDTO()) {
      containersStore.add(p);
    }
  }
 else {
    if (flexibleElement != null) {
      BaseModelData container=flexibleElement.getContainerModel();
      containerList.setValue(flexibleElement.getContainerModel());
      groupList.setValue(flexibleElement.getConstraint().getParentLayoutGroupDTO());
      orderField.setValue(flexibleElement.getConstraint().getSortOrder());
      groupsStore.removeAll();
      for (      LayoutGroupDTO groupChoice : ((OrgUnitDetailsDTO)container).getLayout().getLayoutGroupsDTO()) {
        groupsStore.add(groupChoice);
      }
      if (flexibleElement.getBannerConstraint() != null) {
        posBanner.setSimpleValue(flexibleElement.getBannerConstraint().getSortOrder());
        isBanner.setValue(true);
        oldFieldProperties.put(AdminUtil.PROP_FX_IN_BANNER,true);
        oldFieldProperties.put(AdminUtil.PROP_FX_POS_IN_BANNER,flexibleElement.getBannerConstraint().getSortOrder());
        oldFieldProperties.put(AdminUtil.PROP_FX_LC_BANNER,flexibleElement.getBannerConstraint());
      }
      oldFieldProperties.put(AdminUtil.PROP_FX_ORDER_IN_GROUP,new Integer(flexibleElement.getConstraint().getSortOrder()));
      oldFieldProperties.put(AdminUtil.PROP_FX_GROUP,flexibleElement.getConstraint().getParentLayoutGroupDTO());
      oldFieldProperties.put(AdminUtil.PROP_FX_LC,flexibleElement.getConstraint());
    }
    containersStore.add(orgUnitModelToUpdate.getDetails());
  }
  containerList.setStore(containersStore);
  commonPanel.add(containerList);
  groupList.setStore(groupsStore);
  commonPanel.add(groupList);
  commonPanel.add(orderField);
  validates=new CheckBox();
  validates.setFieldLabel(constants.adminFlexibleCompulsory());
  validates.setBoxLabel(""String_Node_Str"");
  validates.setValue(false);
  if (flexibleElement != null) {
    validates.setValue(flexibleElement.getValidates());
    oldFieldProperties.put(AdminUtil.PROP_FX_IS_COMPULSARY,flexibleElement.getValidates());
  }
  commonPanel.add(validates);
  privacyGroupsListCombo=new ComboBox<PrivacyGroupDTO>();
  privacyGroupsListCombo.setEditable(false);
  privacyGroupsListCombo.setFieldLabel(constants.adminPrivacyGroups());
  privacyGroupsListCombo.setDisplayField(""String_Node_Str"");
  privacyGroupsListCombo.setValueField(""String_Node_Str"");
  privacyGroupsListCombo.setTriggerAction(TriggerAction.ALL);
  final ListStore<PrivacyGroupDTO> privacyGroupsStore=new ListStore<PrivacyGroupDTO>();
  dispatcher.execute(new GetPrivacyGroups(),null,new AsyncCallback<PrivacyGroupsListResult>(){
    @Override public void onFailure(    Throwable arg0){
      privacyGroupsListCombo.setEmptyText(I18N.CONSTANTS.adminChoiceProblem());
    }
    @Override public void onSuccess(    PrivacyGroupsListResult result){
      privacyGroupsListCombo.setEmptyText(I18N.CONSTANTS.adminPrivacyGroupChoice());
      privacyGroupsStore.removeAll();
      if (result != null) {
        privacyGroupsStore.add(result.getList());
        privacyGroupsStore.commitChanges();
      }
    }
  }
);
  privacyGroupsListCombo.setStore(privacyGroupsStore);
  if (flexibleElement != null && flexibleElement.getPrivacyGroup() != null) {
    privacyGroupsListCombo.setValue(flexibleElement.getPrivacyGroup());
    oldFieldProperties.put(AdminUtil.PROP_FX_PRIVACY_GROUP,flexibleElement.getPrivacyGroup());
  }
  commonPanel.add(privacyGroupsListCombo);
  isAmendable=new CheckBox();
  isAmendable.setBoxLabel(""String_Node_Str"");
  isAmendable.setFieldLabel(constants.adminFlexibleAmendable());
  isAmendable.setValue(false);
  if (flexibleElement != null) {
    isAmendable.setValue(flexibleElement.getAmendable());
    oldFieldProperties.put(AdminUtil.PROP_FX_AMENDABLE,flexibleElement.getAmendable());
  }
  commonPanel.add(isAmendable);
  final Button createButton=new Button(I18N.CONSTANTS.save(),IconImageBundle.ICONS.save());
  createButton.addListener(Events.OnClick,new Listener<ButtonEvent>(){
    @Override public void handleEvent(    ButtonEvent be){
      createFlexibleElement(callback);
    }
  }
);
  final ContentPanel form=new ContentPanel();
  form.setHeight(450);
  form.setHeaderVisible(false);
  form.setLayout(new BorderLayout());
  final BorderLayoutData leftLayoutData=new BorderLayoutData(LayoutRegion.WEST);
  leftLayoutData.setSize(320);
  form.add(commonPanel,leftLayoutData);
  final BorderLayoutData rightLayoutData=new BorderLayoutData(LayoutRegion.CENTER);
  rightLayoutData.setMargins(new Margins(0,0,2,4));
  rightLayoutData.setSize(200);
  form.add(specificsPanel,rightLayoutData);
  final VBoxLayoutData topVBoxLayoutData=new VBoxLayoutData();
  topVBoxLayoutData.setFlex(1.0);
  add(form,topVBoxLayoutData);
  ToolBar toolbar=new ToolBar();
  toolbar.setAlignment(HorizontalAlignment.CENTER);
  toolbar.add(createButton);
  setBottomComponent(toolbar);
  layout();
}","public ElementForm(Dispatcher dispatcher,final AsyncCallback<UpdateModelResult> callback,final FlexibleElementDTO flexibleElement,ProjectModelDTO projectModelToUpdate,OrgUnitModelDTO orgUnitModelToUpdate){
  final VBoxLayout mainPanelLayout=new VBoxLayout();
  mainPanelLayout.setVBoxLayoutAlign(VBoxLayout.VBoxLayoutAlign.STRETCH);
  setLayout(mainPanelLayout);
  setHeaderVisible(false);
  if (projectModelToUpdate != null) {
    isProject=true;
  }
 else {
    isProject=false;
  }
  this.dispatcher=dispatcher;
  this.projectModelToUpdate=projectModelToUpdate;
  this.orgUnitModelToUpdate=orgUnitModelToUpdate;
  this.flexibleElementToUpdate=flexibleElement;
  UIConstants constants=GWT.create(UIConstants.class);
  specificsPanel=new FormPanel();
  specificsPanel.setHeaderVisible(false);
  specificsPanel.setBorders(true);
  specificsPanel.hide();
  reportModelList=new ComboBox<ReportModelDTO>();
  reportModelList.setEditable(false);
  reportModelList.hide();
  reportModelList.setFieldLabel(I18N.CONSTANTS.adminReportName());
  reportModelList.setDisplayField(""String_Node_Str"");
  reportModelList.setValueField(""String_Node_Str"");
  reportModelList.setTriggerAction(TriggerAction.ALL);
  reportModelsStore=new ListStore<ReportModelDTO>();
  dispatcher.execute(new GetReportModels(),null,new AsyncCallback<ReportModelsListResult>(){
    @Override public void onFailure(    Throwable arg0){
      reportModelList.setEmptyText(I18N.CONSTANTS.adminChoiceProblem());
    }
    @Override public void onSuccess(    ReportModelsListResult result){
      reportModelList.setEmptyText(I18N.CONSTANTS.adminReportName());
      reportModelsStore.removeAll();
      if (result != null) {
        reportModelsStore.add(result.getList());
        reportModelsStore.commitChanges();
      }
      if (flexibleElement != null) {
        if (flexibleElement instanceof ReportElementDTO) {
          if (((ReportElementDTO)flexibleElement).getModelId() != null) {
            for (            ReportModelDTO reportModel : reportModelsStore.getModels()) {
              if (reportModel.getId() == ((ReportElementDTO)flexibleElement).getModelId()) {
                reportModelList.setValue(reportModel);
              }
            }
          }
        }
      }
    }
  }
);
  reportModelList.setStore(reportModelsStore);
  maxLimitField=new NumberField();
  maxLimitField.setFieldLabel(I18N.CONSTANTS.adminFlexibleMaxLimit());
  maxLimitField.hide();
  textAreaTypeList=new SimpleComboBox<String>();
  textAreaTypeList.setTriggerAction(TriggerAction.ALL);
  textAreaTypeList.setEditable(false);
  textAreaTypeList.hide();
  textAreaTypeList.setFieldLabel(I18N.CONSTANTS.adminFlexibleTextType());
  List<String> textTypes=new ArrayList<String>();
  textTypes.add(I18N.CONSTANTS.adminFlexibleTextTypeP());
  textTypes.add(I18N.CONSTANTS.adminFlexibleTextTypeT());
  textTypes.add(I18N.CONSTANTS.adminFlexibleTextTypeN());
  textTypes.add(I18N.CONSTANTS.adminFlexibleTextTypeD());
  textAreaTypeList.add(textTypes);
  minLimitField=new NumberField();
  minLimitField.setFieldLabel(I18N.CONSTANTS.adminFlexibleMinLimit());
  minLimitField.hide();
  lengthField=new NumberField();
  lengthField.setFieldLabel(I18N.CONSTANTS.adminFlexibleLength());
  lengthField.hide();
  isDecimal=new CheckBox();
  isDecimal.hide();
  isDecimal.setBoxLabel(""String_Node_Str"");
  isDecimal.setFieldLabel(I18N.CONSTANTS.adminFlexibleDecimal());
  isDecimal.setLabelSeparator(""String_Node_Str"");
  isMultipleQ=new CheckBox();
  isMultipleQ.hide();
  isMultipleQ.setBoxLabel(""String_Node_Str"");
  isMultipleQ.setFieldLabel(I18N.CONSTANTS.adminFlexibleMultipleQ());
  isMultipleQ.setLabelSeparator(""String_Node_Str"");
  isLinkedToQuality=new CheckBox();
  isLinkedToQuality.hide();
  isLinkedToQuality.setBoxLabel(""String_Node_Str"");
  isLinkedToQuality.setFieldLabel(I18N.CONSTANTS.adminFlexibleLinkedToQuality());
  isLinkedToQuality.setLabelSeparator(""String_Node_Str"");
  defaultNoCategory.setLabel(I18N.CONSTANTS.adminFlexibleNoLinkedCategory());
  defaultNoCategory.setId(-1);
  linkedCategory=new ComboBox<CategoryTypeDTO>();
  linkedCategory.setEditable(false);
  linkedCategory.hide();
  linkedCategory.setDisplayField(I18N.CONSTANTS.adminFlexibleNoLinkedCategory());
  linkedCategory.setFieldLabel(I18N.CONSTANTS.adminFlexibleLinkedCategory());
  linkedCategory.setDisplayField(""String_Node_Str"");
  linkedCategory.setValueField(""String_Node_Str"");
  linkedCategory.setTriggerAction(TriggerAction.ALL);
  final ListStore<CategoryTypeDTO> linkedCategoriesStore=new ListStore<CategoryTypeDTO>();
  linkedCategoriesStore.add(defaultNoCategory);
  dispatcher.execute(new GetCategories(),null,new AsyncCallback<CategoriesListResult>(){
    @Override public void onFailure(    Throwable arg0){
      linkedCategory.setEmptyText(I18N.CONSTANTS.adminChoiceProblem());
    }
    @Override public void onSuccess(    CategoriesListResult result){
      linkedCategory.setEmptyText(I18N.CONSTANTS.adminUserCreationProfileChoice());
      linkedCategoriesStore.removeAll();
      linkedCategoriesStore.add(defaultNoCategory);
      if (result != null) {
        linkedCategoriesStore.add(result.getList());
        linkedCategoriesStore.commitChanges();
      }
    }
  }
);
  linkedCategory.setStore(linkedCategoriesStore);
  for (int i=0; i < MAX_TENTATIVES_FOR_CHOICES; i++) {
    final ClickableLabel label=new ClickableLabel();
    label.addClickHandler(new ClickHandler(){
      @Override public void onClick(      ClickEvent arg0){
        label.hide();
        selectedChoicesLabels.remove(label.getText());
        if (selectedChoicesLabels.size() == 0) {
          linkedCategory.setEnabled(true);
        }
      }
    }
);
    label.hide();
    selectableChoices.put(i,label);
  }
  questionChoice=new TextField<String>();
  questionChoice.hide();
  qChoicesAddGrid.setVisible(false);
  qChoicesAddGrid.getCellFormatter().setWidth(0,0,(LABEL_WIDTH) + ""String_Node_Str"");
  qChoicesAddGrid.setCellPadding(0);
  qChoicesAddGrid.setCellSpacing(0);
  qChoicesAddGrid.setWidget(0,0,new LabelField(I18N.CONSTANTS.adminFlexibleQChoices() + ""String_Node_Str""));
  qChoicesAddGrid.setWidget(0,1,questionChoice);
  questionChoice.setHideLabel(false);
  addChoiceButton.hide();
  addChoiceButton.addListener(Events.OnClick,new Listener<ButtonEvent>(){
    @Override public void handleEvent(    ButtonEvent be){
      if (questionChoice.getValue() != null) {
        if (!selectedChoicesLabels.contains(questionChoice.getValue())) {
          if (num < MAX_TENTATIVES_FOR_CHOICES) {
            linkedCategory.setEnabled(false);
            selectableChoices.get(num).setText(questionChoice.getValue());
            selectableChoices.get(num).show();
            num++;
            selectedChoicesLabels.add(questionChoice.getValue());
          }
 else {
            MessageBox.alert(I18N.CONSTANTS.adminMaxAttempts(),I18N.CONSTANTS.adminMaxAttemptsQChoices(),null);
            ElementForm.this.removeFromParent();
          }
        }
      }
    }
  }
);
  qChoicesAddGrid.setWidget(0,2,addChoiceButton);
  linkedCategory.addListener(Events.Select,new Listener<BaseEvent>(){
    @Override public void handleEvent(    BaseEvent be){
      if (linkedCategory.getValue() == null || defaultNoCategory.equals(linkedCategory.getValue())) {
        questionChoice.setEnabled(true);
        addChoiceButton.setEnabled(true);
      }
 else {
        questionChoice.setEnabled(false);
        addChoiceButton.setEnabled(false);
        for (        ClickableLabel selected : selectableChoices.values()) {
          selected.setEnabled(false);
        }
      }
    }
  }
);
  posBanner=new SimpleComboBox<Integer>();
  posBanner.setTriggerAction(TriggerAction.ALL);
  posBanner.setEditable(false);
  posBanner.setFieldLabel(constants.adminFlexibleBannerPosition());
  posBanner.removeAll();
  for (int i=1; i < 7; i++) {
    posBanner.add(i);
  }
  posBanner.setAllowBlank(true);
  posBanner.setEnabled(false);
  posBanner.hide();
  isBanner=new CheckBox();
  isBanner.setFieldLabel(constants.Admin_BANNER());
  isBanner.setBoxLabel(""String_Node_Str"");
  isBanner.setValue(false);
  isBanner.addListener(Events.Change,new Listener<BaseEvent>(){
    @Override public void handleEvent(    BaseEvent be){
      if (isBanner.getValue()) {
        posBanner.removeAll();
        for (int i=1; i < 7; i++) {
          posBanner.add(i);
        }
        posBanner.setEnabled(true);
        posBanner.setAllowBlank(false);
      }
 else {
        posBanner.removeAll();
        posBanner.setValue(null);
        posBanner.setAllowBlank(true);
        posBanner.setEnabled(false);
      }
    }
  }
);
  isBanner.hide();
  specificsPanel.add(isBanner);
  specificsPanel.add(posBanner);
  specificsPanel.add(reportModelList);
  specificsPanel.add(textAreaTypeList);
  specificsPanel.add(lengthField);
  specificsPanel.add(isDecimal);
  specificsPanel.add(minLimitField);
  specificsPanel.add(maxLimitField);
  specificsPanel.add(isMultipleQ);
  specificsPanel.add(isLinkedToQuality);
  specificsPanel.add(linkedCategory);
  specificsPanel.add(qChoicesAddGrid);
  for (  ClickableLabel selected : selectableChoices.values()) {
    selected.hide();
    specificsPanel.add(selected);
  }
  commonPanel=new FormPanel();
  commonPanel.setHeaderVisible(false);
  htmlArea=new HtmlEditor();
  htmlArea.hide();
  htmlArea.setEnableAlignments(false);
  htmlArea.setEnableLinks(false);
  htmlArea.setEnableFont(false);
  htmlArea.setEnableLists(false);
  htmlArea.setEnableColors(false);
  htmlArea.setSourceEditMode(false);
  htmlArea.setHeight(75);
  htmlArea.setFieldLabel(constants.adminFlexibleName());
  if (flexibleElement != null && flexibleElement.getLabel() != null) {
    htmlArea.setValue(flexibleElement.getLabel());
    oldFieldProperties.put(AdminUtil.PROP_FX_NAME,flexibleElement.getLabel());
  }
  LabelField label=new LabelField();
  label.hide();
  label.setFieldLabel(constants.adminFlexibleName());
  if (flexibleElement != null && flexibleElement.getElementType() != null) {
    if (ElementTypeEnum.DEFAULT.equals(flexibleElement.getElementType())) {
      label.setText(DefaultFlexibleElementType.getName(((DefaultFlexibleElementDTO)flexibleElement).getType()));
      label.show();
      oldFieldProperties.put(AdminUtil.PROP_FX_NAME,DefaultFlexibleElementType.getName(((DefaultFlexibleElementDTO)flexibleElement).getType()));
      htmlArea.setValue(DefaultFlexibleElementType.getName(((DefaultFlexibleElementDTO)flexibleElement).getType()));
    }
 else {
      htmlArea.show();
    }
  }
 else {
    htmlArea.show();
  }
  commonPanel.add(label);
  commonPanel.add(htmlArea);
  typeList=new SimpleComboBox<String>();
  typeList.setEditable(false);
  typeList.addListener(Events.Select,new Listener<BaseEvent>(){
    @Override public void handleEvent(    BaseEvent be){
      hideAllSpecificAttributes();
      showSpecificAttributes(typeList.getSimpleValue(),flexibleElementToUpdate,true);
    }
  }
);
  typeList.setFieldLabel(constants.adminFlexibleType());
  typeList.setAllowBlank(false);
  typeList.setTriggerAction(TriggerAction.ALL);
  List<String> values=new ArrayList<String>();
  for (  ElementTypeEnum e : ElementTypeEnum.values()) {
    if (!ElementTypeEnum.DEFAULT.equals(e) && !ElementTypeEnum.INDICATORS.equals(e))     values.add(ElementTypeEnum.getName(e));
  }
  typeList.add(values);
  if (flexibleElement != null && flexibleElement.getElementType() != null) {
    String typeOfElement=ElementTypeEnum.getName(flexibleElement.getElementType());
    typeList.setSimpleValue(typeOfElement);
    showSpecificAttributes(typeOfElement,flexibleElement,false);
    oldFieldProperties.put(AdminUtil.PROP_FX_TYPE,flexibleElement.getElementType());
    if (ElementTypeEnum.DEFAULT.equals(flexibleElement.getElementType())) {
      typeList.setEnabled(false);
    }
  }
 else   typeList.setEmptyText(I18N.CONSTANTS.adminFlexibleType());
  commonPanel.add(typeList);
  final ListStore<BaseModelData> containersStore=new ListStore<BaseModelData>();
  containerList=new ComboBox<BaseModelData>();
  containerList.setEditable(false);
  containerList.setDisplayField(""String_Node_Str"");
  containerList.setValueField(""String_Node_Str"");
  containerList.setFieldLabel(I18N.CONSTANTS.adminFlexibleContainer());
  containerList.setAllowBlank(false);
  containerList.setTriggerAction(TriggerAction.ALL);
  if (flexibleElement == null)   containerList.setEmptyText(I18N.CONSTANTS.adminFlexibleContainerChoice());
  final ListStore<LayoutGroupDTO> groupsStore=new ListStore<LayoutGroupDTO>();
  groupList=new ComboBox<LayoutGroupDTO>();
  groupList.setEditable(false);
  groupList.setFieldLabel(constants.adminFlexibleGroup());
  groupList.setDisplayField(""String_Node_Str"");
  groupList.setValueField(""String_Node_Str"");
  groupList.setTriggerAction(TriggerAction.ALL);
  containerList.addListener(Events.Select,new Listener<BaseEvent>(){
    @Override public void handleEvent(    BaseEvent be){
      LayoutDTO container=null;
      if (containerList.getValue() != null) {
        if (containerList.getValue() instanceof ProjectBannerDTO) {
          container=((ProjectBannerDTO)containerList.getValue()).getLayoutDTO();
          isBanner.setValue(true);
          posBanner.setAllowBlank(false);
          posBanner.setEnabled(true);
        }
 else         if (containerList.getValue() instanceof ProjectDetailsDTO) {
          container=((ProjectDetailsDTO)containerList.getValue()).getLayoutDTO();
        }
 else         if (containerList.getValue() instanceof PhaseModelDTO) {
          container=((PhaseModelDTO)containerList.getValue()).getLayoutDTO();
        }
 else         if (containerList.getValue() instanceof OrgUnitDetailsDTO) {
          container=((OrgUnitDetailsDTO)containerList.getValue()).getLayout();
        }
      }
      if (container != null) {
        groupsStore.removeAll();
        for (        LayoutGroupDTO lg : container.getLayoutGroupsDTO()) {
          groupsStore.add(lg);
        }
        groupList.setValue(groupsStore.getAt(0));
      }
    }
  }
);
  orderField=new NumberField();
  orderField.setAllowBlank(false);
  orderField.setFieldLabel(constants.adminFlexibleOrder());
  orderField.clear();
  oldFieldProperties.put(AdminUtil.PROP_FX_IN_BANNER,false);
  oldFieldProperties.put(AdminUtil.PROP_FX_POS_IN_BANNER,-1);
  if (isProject) {
    if (flexibleElement != null) {
      BaseModelData container=flexibleElement.getContainerModel();
      containerList.setValue(flexibleElement.getContainerModel());
      groupList.setValue(flexibleElement.getConstraint().getParentLayoutGroupDTO());
      orderField.setValue(flexibleElement.getConstraint().getSortOrder());
      groupsStore.removeAll();
      if (container instanceof PhaseModelDTO) {
        for (        LayoutGroupDTO groupChoice : ((PhaseModelDTO)container).getLayoutDTO().getLayoutGroupsDTO()) {
          groupsStore.add(groupChoice);
        }
      }
 else {
        for (        LayoutGroupDTO groupChoice : ((ProjectDetailsDTO)container).getLayoutDTO().getLayoutGroupsDTO()) {
          groupsStore.add(groupChoice);
        }
      }
      if (flexibleElement.getBannerConstraint() != null) {
        posBanner.setSimpleValue(flexibleElement.getBannerConstraint().getSortOrder());
        isBanner.setValue(true);
        oldFieldProperties.put(AdminUtil.PROP_FX_IN_BANNER,true);
        oldFieldProperties.put(AdminUtil.PROP_FX_POS_IN_BANNER,flexibleElement.getBannerConstraint().getSortOrder());
        oldFieldProperties.put(AdminUtil.PROP_FX_LC_BANNER,flexibleElement.getBannerConstraint());
      }
      oldFieldProperties.put(AdminUtil.PROP_FX_ORDER_IN_GROUP,new Integer(flexibleElement.getConstraint().getSortOrder()));
      oldFieldProperties.put(AdminUtil.PROP_FX_GROUP,flexibleElement.getConstraint().getParentLayoutGroupDTO());
      oldFieldProperties.put(AdminUtil.PROP_FX_LC,flexibleElement.getConstraint());
    }
    containersStore.add(projectModelToUpdate.getProjectDetailsDTO());
    for (    PhaseModelDTO p : projectModelToUpdate.getPhaseModelsDTO()) {
      containersStore.add(p);
    }
  }
 else {
    if (flexibleElement != null) {
      BaseModelData container=flexibleElement.getContainerModel();
      containerList.setValue(flexibleElement.getContainerModel());
      groupList.setValue(flexibleElement.getConstraint().getParentLayoutGroupDTO());
      orderField.setValue(flexibleElement.getConstraint().getSortOrder());
      groupsStore.removeAll();
      for (      LayoutGroupDTO groupChoice : ((OrgUnitDetailsDTO)container).getLayout().getLayoutGroupsDTO()) {
        groupsStore.add(groupChoice);
      }
      if (flexibleElement.getBannerConstraint() != null) {
        posBanner.setSimpleValue(flexibleElement.getBannerConstraint().getSortOrder());
        isBanner.setValue(true);
        oldFieldProperties.put(AdminUtil.PROP_FX_IN_BANNER,true);
        oldFieldProperties.put(AdminUtil.PROP_FX_POS_IN_BANNER,flexibleElement.getBannerConstraint().getSortOrder());
        oldFieldProperties.put(AdminUtil.PROP_FX_LC_BANNER,flexibleElement.getBannerConstraint());
      }
      oldFieldProperties.put(AdminUtil.PROP_FX_ORDER_IN_GROUP,new Integer(flexibleElement.getConstraint().getSortOrder()));
      oldFieldProperties.put(AdminUtil.PROP_FX_GROUP,flexibleElement.getConstraint().getParentLayoutGroupDTO());
      oldFieldProperties.put(AdminUtil.PROP_FX_LC,flexibleElement.getConstraint());
    }
    containersStore.add(orgUnitModelToUpdate.getDetails());
  }
  containerList.setStore(containersStore);
  commonPanel.add(containerList);
  groupList.setStore(groupsStore);
  commonPanel.add(groupList);
  commonPanel.add(orderField);
  validates=new CheckBox();
  validates.setFieldLabel(constants.adminFlexibleCompulsory());
  validates.setBoxLabel(""String_Node_Str"");
  validates.setValue(false);
  if (flexibleElement != null) {
    validates.setValue(flexibleElement.getValidates());
    oldFieldProperties.put(AdminUtil.PROP_FX_IS_COMPULSARY,flexibleElement.getValidates());
  }
  commonPanel.add(validates);
  privacyGroupsListCombo=new ComboBox<PrivacyGroupDTO>();
  privacyGroupsListCombo.setEditable(false);
  privacyGroupsListCombo.setFieldLabel(constants.adminPrivacyGroups());
  privacyGroupsListCombo.setDisplayField(""String_Node_Str"");
  privacyGroupsListCombo.setValueField(""String_Node_Str"");
  privacyGroupsListCombo.setTriggerAction(TriggerAction.ALL);
  final ListStore<PrivacyGroupDTO> privacyGroupsStore=new ListStore<PrivacyGroupDTO>();
  dispatcher.execute(new GetPrivacyGroups(),null,new AsyncCallback<PrivacyGroupsListResult>(){
    @Override public void onFailure(    Throwable arg0){
      privacyGroupsListCombo.setEmptyText(I18N.CONSTANTS.adminChoiceProblem());
    }
    @Override public void onSuccess(    PrivacyGroupsListResult result){
      privacyGroupsListCombo.setEmptyText(I18N.CONSTANTS.adminPrivacyGroupChoice());
      privacyGroupsStore.removeAll();
      if (result != null) {
        privacyGroupsStore.add(result.getList());
        privacyGroupsStore.commitChanges();
      }
    }
  }
);
  privacyGroupsListCombo.setStore(privacyGroupsStore);
  if (flexibleElement != null && flexibleElement.getPrivacyGroup() != null) {
    privacyGroupsListCombo.setValue(flexibleElement.getPrivacyGroup());
    oldFieldProperties.put(AdminUtil.PROP_FX_PRIVACY_GROUP,flexibleElement.getPrivacyGroup());
  }
  commonPanel.add(privacyGroupsListCombo);
  isAmendable=new CheckBox();
  isAmendable.setBoxLabel(""String_Node_Str"");
  isAmendable.setFieldLabel(constants.adminFlexibleAmendable());
  isAmendable.setValue(false);
  if (flexibleElement != null) {
    isAmendable.setValue(flexibleElement.getAmendable());
    oldFieldProperties.put(AdminUtil.PROP_FX_AMENDABLE,flexibleElement.getAmendable());
  }
  commonPanel.add(isAmendable);
  final Button createButton=new Button(I18N.CONSTANTS.save(),IconImageBundle.ICONS.save());
  createButton.addListener(Events.OnClick,new Listener<ButtonEvent>(){
    @Override public void handleEvent(    ButtonEvent be){
      createFlexibleElement(callback);
    }
  }
);
  final ContentPanel form=new ContentPanel();
  form.setHeight(450);
  form.setHeaderVisible(false);
  form.setLayout(new BorderLayout());
  final BorderLayoutData leftLayoutData=new BorderLayoutData(LayoutRegion.WEST);
  leftLayoutData.setSize(320);
  form.add(commonPanel,leftLayoutData);
  final BorderLayoutData rightLayoutData=new BorderLayoutData(LayoutRegion.CENTER);
  rightLayoutData.setMargins(new Margins(0,0,2,4));
  rightLayoutData.setSize(200);
  form.add(specificsPanel,rightLayoutData);
  final VBoxLayoutData topVBoxLayoutData=new VBoxLayoutData();
  topVBoxLayoutData.setFlex(1.0);
  add(form,topVBoxLayoutData);
  ToolBar toolbar=new ToolBar();
  toolbar.setAlignment(HorizontalAlignment.CENTER);
  toolbar.add(createButton);
  setBottomComponent(toolbar);
  layout();
}",0.9990662931839402
35657,"/** 
 * Builds the actions toolbar.
 * @return The actions toolbar.
 */
private ToolBar buildToolbar(){
  saveButton=new Button(I18N.CONSTANTS.save(),IconImageBundle.ICONS.save());
  saveButton.setEnabled(false);
  copyButton=new Button(I18N.CONSTANTS.copy());
  copyButton.setEnabled(true);
  pasteButton=new Button(I18N.CONSTANTS.paste());
  pasteButton.setEnabled(false);
  excelButton=new Button(I18N.CONSTANTS.exportToExcel(),IconImageBundle.ICONS.excel());
  excelButton.hide();
  excelForm=new FormPanel();
  excelForm.setBodyBorder(false);
  excelForm.setHeaderVisible(false);
  excelForm.setPadding(0);
  excelForm.setEncoding(Encoding.URLENCODED);
  excelForm.setMethod(Method.POST);
  excelForm.setAction(GWT.getModuleBaseURL() + ""String_Node_Str"");
  final ToolBar toolBar=new ToolBar();
  toolBar.setAlignment(HorizontalAlignment.LEFT);
  toolBar.setBorders(false);
  toolBar.add(saveButton);
  toolBar.add(copyButton);
  toolBar.add(pasteButton);
  toolBar.add(new SeparatorToolItem());
  toolBar.add(excelButton);
  toolBar.add(excelForm);
  return toolBar;
}","/** 
 * Builds the actions toolbar.
 * @return The actions toolbar.
 */
private ToolBar buildToolbar(){
  saveButton=new Button(I18N.CONSTANTS.save(),IconImageBundle.ICONS.save());
  saveButton.setEnabled(false);
  copyButton=new Button(I18N.CONSTANTS.copy());
  copyButton.setEnabled(true);
  pasteButton=new Button(I18N.CONSTANTS.paste());
  pasteButton.setEnabled(false);
  excelButton=new Button(I18N.CONSTANTS.exportToExcel(),IconImageBundle.ICONS.excel());
  excelButton.hide();
  excelForm=new FormPanel();
  excelForm.setBodyBorder(false);
  excelForm.setHeaderVisible(false);
  excelForm.setPadding(0);
  excelForm.setEncoding(Encoding.URLENCODED);
  excelForm.setMethod(Method.POST);
  excelForm.setAction(GWT.getModuleBaseURL() + ""String_Node_Str"");
  final ToolBar toolBar=new ToolBar();
  toolBar.setBorders(false);
  toolBar.add(saveButton);
  toolBar.add(new FillToolItem());
  toolBar.add(copyButton);
  toolBar.add(pasteButton);
  toolBar.add(new SeparatorToolItem());
  toolBar.add(excelButton);
  toolBar.add(excelForm);
  return toolBar;
}",0.923581809657759
35658,"public ProjectDashboardView(Authentication authentication,Dispatcher dispatcher,ProjectPresenter projectPresenter){
  this.authentication=authentication;
  this.dispatcher=dispatcher;
  this.projectPresenter=projectPresenter;
  final BorderLayout borderLayout=new BorderLayout();
  borderLayout.setContainerStyle(""String_Node_Str"");
  setLayout(borderLayout);
  ListStore<FlexibleElementDTO> storeRequiredElements=new ListStore<FlexibleElementDTO>();
  gridRequiredElements=new Grid<FlexibleElementDTO>(storeRequiredElements,getRequiredElementsColumModel());
  gridRequiredElements.setAutoExpandColumn(""String_Node_Str"");
  gridRequiredElements.getView().setForceFit(true);
  tabPanelPhases=new TabPanel();
  tabPanelPhases.setPlain(true);
  toolBar=new ToolBar();
  toolBar.setAlignment(HorizontalAlignment.LEFT);
  toolBar.setBorders(false);
  buttonSavePhase=new Button(I18N.CONSTANTS.projectSavePhaseButton(),IconImageBundle.ICONS.save());
  buttonActivatePhase=new Button(I18N.CONSTANTS.projectClosePhaseButton(),IconImageBundle.ICONS.activate());
  buttonPhaseGuide=new Button(I18N.CONSTANTS.projectPhaseGuideHeader(),IconImageBundle.ICONS.info());
  buttonActivatePhase.setEnabled(false);
  buttonSavePhase.setEnabled(false);
  buttonPhaseGuide.setEnabled(false);
  toolBar.add(buttonActivatePhase);
  toolBar.add(new SeparatorToolItem());
  toolBar.add(buttonSavePhase);
  toolBar.add(new SeparatorToolItem());
  toolBar.add(buttonPhaseGuide);
  panelProjectModel=new LayoutContainer(new BorderLayout());
  panelProjectModel.setBorders(false);
  panelProjectModel.addStyleName(""String_Node_Str"");
  panelSelectedPhase=new LayoutContainer(new FitLayout());
  final BorderLayoutData wd=new BorderLayoutData(LayoutRegion.WEST,250);
  wd.setMargins(new Margins(0,4,4,4));
  requiredElementContentPanel=new ContentPanel(new FitLayout());
  requiredElementContentPanel.add(gridRequiredElements);
  panelProjectModel.add(requiredElementContentPanel,wd);
  final BorderLayoutData cd=new BorderLayoutData(LayoutRegion.CENTER);
  cd.setMargins(new Margins(0,4,4,0));
  final ContentPanel cp2=new ContentPanel(new FitLayout());
  cp2.setHeading(I18N.CONSTANTS.phaseDetails());
  cp2.setScrollMode(Scroll.AUTOY);
  cp2.setTopComponent(toolBar);
  cp2.add(panelSelectedPhase,new FitData(new Margins(4)));
  panelProjectModel.add(cp2,cd);
  panelReminders=getRemindersPanel();
  panelMonitoredPoints=getMonitoredPointsPanel();
  final VBoxLayout vLayout=new VBoxLayout();
  vLayout.setVBoxLayoutAlign(VBoxLayoutAlign.STRETCH);
  final ContentPanel westPanel=new ContentPanel(vLayout);
  westPanel.setHeading(I18N.CONSTANTS.reminders());
  final VBoxLayoutData flex=new VBoxLayoutData(new Margins(0,0,5,0));
  flex.setFlex(1);
  westPanel.add(panelReminders,flex);
  westPanel.add(panelMonitoredPoints,flex);
  buildFinancialProjectsPanel();
  buildLocalPartnerProjectsPanel();
  final HBoxLayout layout=new StylableHBoxLayout(""String_Node_Str"");
  layout.setHBoxLayoutAlign(HBoxLayoutAlign.STRETCH);
  final ContentPanel southPanel=new ContentPanel(layout);
  southPanel.setHeading(I18N.CONSTANTS.projectLinkedProjects());
  panelFinancialProjects.setWidth(""String_Node_Str"");
  panelLocalProjects.setWidth(""String_Node_Str"");
  southPanel.add(panelFinancialProjects,new HBoxLayoutData(0,2,0,0));
  southPanel.add(panelLocalProjects,new HBoxLayoutData(0,0,0,2));
  final BorderLayoutData southData=new BorderLayoutData(LayoutRegion.SOUTH,140);
  southData.setCollapsible(true);
  southData.setMargins(new Margins(4,0,0,0));
  final BorderLayoutData westData=new BorderLayoutData(LayoutRegion.WEST,250);
  westData.setMargins(new Margins(0,4,4,0));
  westData.setCollapsible(true);
  final BorderLayoutData centerData=new BorderLayoutData(LayoutRegion.CENTER);
  centerData.setMargins(new Margins(0,0,4,4));
  add(westPanel,westData);
  add(tabPanelPhases,centerData);
  add(southPanel,southData);
}","public ProjectDashboardView(Authentication authentication,Dispatcher dispatcher,ProjectPresenter projectPresenter){
  this.authentication=authentication;
  this.dispatcher=dispatcher;
  this.projectPresenter=projectPresenter;
  final BorderLayout borderLayout=new BorderLayout();
  borderLayout.setContainerStyle(""String_Node_Str"");
  setLayout(borderLayout);
  ListStore<FlexibleElementDTO> storeRequiredElements=new ListStore<FlexibleElementDTO>();
  gridRequiredElements=new Grid<FlexibleElementDTO>(storeRequiredElements,getRequiredElementsColumModel());
  gridRequiredElements.setAutoExpandColumn(""String_Node_Str"");
  gridRequiredElements.getView().setForceFit(true);
  tabPanelPhases=new TabPanel();
  tabPanelPhases.setPlain(true);
  tabPanelPhases.setTabScroll(true);
  tabPanelPhases.setAnimScroll(true);
  toolBar=new ToolBar();
  toolBar.setAlignment(HorizontalAlignment.LEFT);
  toolBar.setBorders(false);
  buttonSavePhase=new Button(I18N.CONSTANTS.projectSavePhaseButton(),IconImageBundle.ICONS.save());
  buttonActivatePhase=new Button(I18N.CONSTANTS.projectClosePhaseButton(),IconImageBundle.ICONS.activate());
  buttonPhaseGuide=new Button(I18N.CONSTANTS.projectPhaseGuideHeader(),IconImageBundle.ICONS.info());
  buttonActivatePhase.setEnabled(false);
  buttonSavePhase.setEnabled(false);
  buttonPhaseGuide.setEnabled(false);
  toolBar.add(buttonActivatePhase);
  toolBar.add(new SeparatorToolItem());
  toolBar.add(buttonSavePhase);
  toolBar.add(new SeparatorToolItem());
  toolBar.add(buttonPhaseGuide);
  panelProjectModel=new LayoutContainer(new BorderLayout());
  panelProjectModel.setBorders(false);
  panelProjectModel.addStyleName(""String_Node_Str"");
  panelSelectedPhase=new LayoutContainer(new FitLayout());
  final BorderLayoutData wd=new BorderLayoutData(LayoutRegion.WEST,250);
  wd.setMargins(new Margins(0,4,4,4));
  requiredElementContentPanel=new ContentPanel(new FitLayout());
  requiredElementContentPanel.add(gridRequiredElements);
  panelProjectModel.add(requiredElementContentPanel,wd);
  final BorderLayoutData cd=new BorderLayoutData(LayoutRegion.CENTER);
  cd.setMargins(new Margins(0,4,4,0));
  final ContentPanel cp2=new ContentPanel(new FitLayout());
  cp2.setHeading(I18N.CONSTANTS.phaseDetails());
  cp2.setScrollMode(Scroll.AUTOY);
  cp2.setTopComponent(toolBar);
  cp2.add(panelSelectedPhase,new FitData(new Margins(4)));
  panelProjectModel.add(cp2,cd);
  panelReminders=getRemindersPanel();
  panelMonitoredPoints=getMonitoredPointsPanel();
  final VBoxLayout vLayout=new VBoxLayout();
  vLayout.setVBoxLayoutAlign(VBoxLayoutAlign.STRETCH);
  final ContentPanel westPanel=new ContentPanel(vLayout);
  westPanel.setHeading(I18N.CONSTANTS.reminders());
  final VBoxLayoutData flex=new VBoxLayoutData(new Margins(0,0,5,0));
  flex.setFlex(1);
  westPanel.add(panelReminders,flex);
  westPanel.add(panelMonitoredPoints,flex);
  buildFinancialProjectsPanel();
  buildLocalPartnerProjectsPanel();
  final HBoxLayout layout=new StylableHBoxLayout(""String_Node_Str"");
  layout.setHBoxLayoutAlign(HBoxLayoutAlign.STRETCH);
  final ContentPanel southPanel=new ContentPanel(layout);
  southPanel.setHeading(I18N.CONSTANTS.projectLinkedProjects());
  panelFinancialProjects.setWidth(""String_Node_Str"");
  panelLocalProjects.setWidth(""String_Node_Str"");
  southPanel.add(panelFinancialProjects,new HBoxLayoutData(0,2,0,0));
  southPanel.add(panelLocalProjects,new HBoxLayoutData(0,0,0,2));
  final BorderLayoutData southData=new BorderLayoutData(LayoutRegion.SOUTH,140);
  southData.setCollapsible(true);
  southData.setMargins(new Margins(4,0,0,0));
  final BorderLayoutData westData=new BorderLayoutData(LayoutRegion.WEST,250);
  westData.setMargins(new Margins(0,4,4,0));
  westData.setCollapsible(true);
  final BorderLayoutData centerData=new BorderLayoutData(LayoutRegion.CENTER);
  centerData.setMargins(new Margins(0,0,4,4));
  add(westPanel,westData);
  add(tabPanelPhases,centerData);
  add(southPanel,southData);
}",0.9904568011197352
35659,"public void showNewGroupForm(final FlexibleElementDTO model,final boolean isUpdate){
  int width=400;
  int height=200;
  String title=I18N.CONSTANTS.adminFlexibleGroup();
  final Window window=new Window();
  window.setHeading(title);
  window.setSize(width,height);
  window.setPlain(true);
  window.setModal(true);
  window.setBlinkModal(true);
  window.setLayout(new FitLayout());
  final LayoutGroupSigmahForm form=new LayoutGroupSigmahForm(dispatcher,new AsyncCallback<CreateResult>(){
    @Override public void onFailure(    Throwable arg0){
      window.hide();
    }
    @Override public void onSuccess(    CreateResult result){
      window.hide();
      if (result != null) {
        if (isUpdate) {
          List<FlexibleElementDTO> modifiedFlexs=AdminFlexibleElementsView.this.getFieldsStore().findModels(""String_Node_Str"",model.getGroup());
          for (          FlexibleElementDTO modifiedFlex : modifiedFlexs) {
            modifiedFlex.setGroup((LayoutGroupDTO)result.getEntity());
            AdminFlexibleElementsView.this.getFieldsStore().update(modifiedFlex);
          }
          AdminFlexibleElementsView.this.getFieldsStore().commitChanges();
        }
        addedGroups.add((LayoutGroupDTO)result.getEntity());
      }
    }
  }
,model,projectModel,orgUnitModel);
  window.add(form);
  window.show();
}","public void showNewGroupForm(final FlexibleElementDTO model,final boolean isUpdate){
  int width=400;
  int height=200;
  String title=I18N.CONSTANTS.adminFlexibleGroup();
  final Window window=new Window();
  window.setHeading(title);
  window.setSize(width,height);
  window.setPlain(true);
  window.setModal(true);
  window.setBlinkModal(true);
  window.setLayout(new FitLayout());
  final LayoutGroupSigmahForm form=new LayoutGroupSigmahForm(dispatcher,new AsyncCallback<CreateResult>(){
    @Override public void onFailure(    Throwable arg0){
      window.hide();
    }
    @Override public void onSuccess(    CreateResult layoutGroupResult){
      window.hide();
      if (layoutGroupResult != null) {
        if (projectModel != null) {
          GetProjectModel refreshModel=new GetProjectModel();
          refreshModel.setId(projectModel.getId());
          dispatcher.execute(refreshModel,null,new AsyncCallback<ProjectModelDTO>(){
            @Override public void onFailure(            Throwable arg0){
              AdminUtil.alertPbmData(alert);
            }
            @Override public void onSuccess(            ProjectModelDTO modelResult){
              if (modelResult != null) {
                AdminFlexibleElementsView.this.getFieldsStore().removeAll();
                projectModel=modelResult;
                AdminFlexibleElementsView.this.getFieldsStore().add(projectModel.getAllElements());
              }
            }
          }
);
        }
 else         if (orgUnitModel != null) {
          GetOrgUnitModel refreshModel=new GetOrgUnitModel();
          refreshModel.setId(orgUnitModel.getId());
          dispatcher.execute(refreshModel,null,new AsyncCallback<OrgUnitModelDTO>(){
            @Override public void onFailure(            Throwable arg0){
              AdminUtil.alertPbmData(alert);
            }
            @Override public void onSuccess(            OrgUnitModelDTO modelResult){
              if (modelResult != null) {
                AdminFlexibleElementsView.this.getFieldsStore().removeAll();
                orgUnitModel=modelResult;
                AdminFlexibleElementsView.this.getFieldsStore().add(orgUnitModel.getAllElements());
              }
            }
          }
);
        }
        if (isUpdate) {
          List<FlexibleElementDTO> modifiedFlexs=AdminFlexibleElementsView.this.getFieldsStore().findModels(""String_Node_Str"",model.getGroup());
          for (          FlexibleElementDTO modifiedFlex : modifiedFlexs) {
            modifiedFlex.setGroup((LayoutGroupDTO)layoutGroupResult.getEntity());
            AdminFlexibleElementsView.this.getFieldsStore().update(modifiedFlex);
          }
          AdminFlexibleElementsView.this.getFieldsStore().commitChanges();
        }
        addedGroups.add((LayoutGroupDTO)layoutGroupResult.getEntity());
      }
    }
  }
,model,projectModel,orgUnitModel);
  window.add(form);
  window.show();
}",0.4071462153267512
35660,"public void showNewFlexibleElementForm(final FlexibleElementDTO model,final boolean isUpdate){
  int width=700;
  int height=350;
  String title=I18N.CONSTANTS.adminFlexible();
  final Window window=new Window();
  window.setHeading(title);
  window.setSize(width,height);
  window.setPlain(true);
  window.setModal(true);
  window.setBlinkModal(true);
  window.setLayout(new FitLayout());
  final ElementForm form=new ElementForm(dispatcher,new AsyncCallback<UpdateModelResult>(){
    @Override public void onFailure(    Throwable caught){
      window.hide();
    }
    @Override public void onSuccess(    UpdateModelResult result){
      if (!isUpdate) {
        window.hide();
        AdminFlexibleElementsView.this.getFieldsStore().add((FlexibleElementDTO)result.getAnnexEntity());
        AdminFlexibleElementsView.this.getFieldsStore().commitChanges();
      }
 else {
        window.hide();
        if (projectModel != null) {
          ProjectModelDTO modelUpdated=(ProjectModelDTO)result.getEntity();
          AdminFlexibleElementsView.this.refreshProjectModel(modelUpdated);
        }
 else {
          OrgUnitModelDTO modelUpdated=(OrgUnitModelDTO)result.getEntity();
          AdminFlexibleElementsView.this.refreshOrgUnitModel(modelUpdated);
        }
        AdminFlexibleElementsView.this.getFieldsStore().remove(model);
        AdminFlexibleElementsView.this.getFieldsStore().add((FlexibleElementDTO)result.getAnnexEntity());
        AdminFlexibleElementsView.this.getFieldsStore().commitChanges();
      }
    }
  }
,model,projectModel,orgUnitModel,addedGroups);
  window.add(form);
  window.show();
}","public void showNewFlexibleElementForm(final FlexibleElementDTO model,final boolean isUpdate){
  int width=700;
  int height=350;
  String title=I18N.CONSTANTS.adminFlexible();
  final Window window=new Window();
  window.setHeading(title);
  window.setSize(width,height);
  window.setPlain(true);
  window.setModal(true);
  window.setBlinkModal(true);
  window.setLayout(new FitLayout());
  final ElementForm form=new ElementForm(dispatcher,new AsyncCallback<UpdateModelResult>(){
    @Override public void onFailure(    Throwable caught){
      window.hide();
    }
    @Override public void onSuccess(    UpdateModelResult result){
      if (!isUpdate) {
        window.hide();
        AdminFlexibleElementsView.this.getFieldsStore().add((FlexibleElementDTO)result.getAnnexEntity());
        AdminFlexibleElementsView.this.getFieldsStore().commitChanges();
      }
 else {
        window.hide();
        if (projectModel != null) {
          ProjectModelDTO modelUpdated=(ProjectModelDTO)result.getEntity();
          AdminFlexibleElementsView.this.refreshProjectModel(modelUpdated);
        }
 else {
          OrgUnitModelDTO modelUpdated=(OrgUnitModelDTO)result.getEntity();
          AdminFlexibleElementsView.this.refreshOrgUnitModel(modelUpdated);
        }
        AdminFlexibleElementsView.this.getFieldsStore().remove(model);
        AdminFlexibleElementsView.this.getFieldsStore().add((FlexibleElementDTO)result.getAnnexEntity());
        AdminFlexibleElementsView.this.getFieldsStore().commitChanges();
      }
    }
  }
,model,projectModel,orgUnitModel);
  window.add(form);
  window.show();
}",0.9962825278810408
35661,"public ElementForm(Dispatcher dispatcher,final AsyncCallback<UpdateModelResult> callback,final FlexibleElementDTO flexibleElement,ProjectModelDTO projectModelToUpdate,OrgUnitModelDTO orgUnitModelToUpdate,final List<LayoutGroupDTO> addedGroups){
  final VBoxLayout mainPanelLayout=new VBoxLayout();
  mainPanelLayout.setVBoxLayoutAlign(VBoxLayout.VBoxLayoutAlign.STRETCH);
  setLayout(mainPanelLayout);
  setHeaderVisible(false);
  if (projectModelToUpdate != null) {
    isProject=true;
  }
 else {
    isProject=false;
  }
  this.dispatcher=dispatcher;
  this.projectModelToUpdate=projectModelToUpdate;
  this.orgUnitModelToUpdate=orgUnitModelToUpdate;
  this.flexibleElementToUpdate=flexibleElement;
  UIConstants constants=GWT.create(UIConstants.class);
  specificsPanel=new FormPanel();
  specificsPanel.setHeaderVisible(false);
  specificsPanel.setBorders(true);
  specificsPanel.hide();
  reportModelList=new ComboBox<ReportModelDTO>();
  reportModelList.setEditable(false);
  reportModelList.hide();
  reportModelList.setFieldLabel(I18N.CONSTANTS.adminReportName());
  reportModelList.setDisplayField(""String_Node_Str"");
  reportModelList.setValueField(""String_Node_Str"");
  reportModelList.setTriggerAction(TriggerAction.ALL);
  reportModelsStore=new ListStore<ReportModelDTO>();
  dispatcher.execute(new GetReportModels(),null,new AsyncCallback<ReportModelsListResult>(){
    @Override public void onFailure(    Throwable arg0){
      reportModelList.setEmptyText(I18N.CONSTANTS.adminChoiceProblem());
    }
    @Override public void onSuccess(    ReportModelsListResult result){
      reportModelList.setEmptyText(I18N.CONSTANTS.adminReportName());
      reportModelsStore.removeAll();
      if (result != null) {
        reportModelsStore.add(result.getList());
        reportModelsStore.commitChanges();
      }
      if (flexibleElement != null) {
        if (flexibleElement instanceof ReportElementDTO) {
          if (((ReportElementDTO)flexibleElement).getModelId() != null) {
            for (            ReportModelDTO reportModel : reportModelsStore.getModels()) {
              if (reportModel.getId() == ((ReportElementDTO)flexibleElement).getModelId()) {
                reportModelList.setValue(reportModel);
              }
            }
          }
        }
      }
    }
  }
);
  reportModelList.setStore(reportModelsStore);
  maxLimitField=new NumberField();
  maxLimitField.setFieldLabel(I18N.CONSTANTS.adminFlexibleMaxLimit());
  maxLimitField.hide();
  textAreaTypeList=new SimpleComboBox<String>();
  textAreaTypeList.setTriggerAction(TriggerAction.ALL);
  textAreaTypeList.setEditable(false);
  textAreaTypeList.hide();
  textAreaTypeList.setFieldLabel(I18N.CONSTANTS.adminFlexibleTextType());
  List<String> textTypes=new ArrayList<String>();
  textTypes.add(I18N.CONSTANTS.adminFlexibleTextTypeP());
  textTypes.add(I18N.CONSTANTS.adminFlexibleTextTypeT());
  textTypes.add(I18N.CONSTANTS.adminFlexibleTextTypeN());
  textTypes.add(I18N.CONSTANTS.adminFlexibleTextTypeD());
  textAreaTypeList.add(textTypes);
  minLimitField=new NumberField();
  minLimitField.setFieldLabel(I18N.CONSTANTS.adminFlexibleMinLimit());
  minLimitField.hide();
  lengthField=new NumberField();
  lengthField.setFieldLabel(I18N.CONSTANTS.adminFlexibleLength());
  lengthField.hide();
  isDecimal=new CheckBox();
  isDecimal.hide();
  isDecimal.setBoxLabel(""String_Node_Str"");
  isDecimal.setFieldLabel(I18N.CONSTANTS.adminFlexibleDecimal());
  isDecimal.setLabelSeparator(""String_Node_Str"");
  isMultipleQ=new CheckBox();
  isMultipleQ.hide();
  isMultipleQ.setBoxLabel(""String_Node_Str"");
  isMultipleQ.setFieldLabel(I18N.CONSTANTS.adminFlexibleMultipleQ());
  isMultipleQ.setLabelSeparator(""String_Node_Str"");
  isLinkedToQuality=new CheckBox();
  isLinkedToQuality.hide();
  isLinkedToQuality.setBoxLabel(""String_Node_Str"");
  isLinkedToQuality.setFieldLabel(I18N.CONSTANTS.adminFlexibleLinkedToQuality());
  isLinkedToQuality.setLabelSeparator(""String_Node_Str"");
  defaultNoCategory.setLabel(I18N.CONSTANTS.adminFlexibleNoLinkedCategory());
  defaultNoCategory.setId(-1);
  linkedCategory=new ComboBox<CategoryTypeDTO>();
  linkedCategory.setEditable(false);
  linkedCategory.hide();
  linkedCategory.setDisplayField(I18N.CONSTANTS.adminFlexibleNoLinkedCategory());
  linkedCategory.setFieldLabel(I18N.CONSTANTS.adminFlexibleLinkedCategory());
  linkedCategory.setDisplayField(""String_Node_Str"");
  linkedCategory.setValueField(""String_Node_Str"");
  linkedCategory.setTriggerAction(TriggerAction.ALL);
  final ListStore<CategoryTypeDTO> linkedCategoriesStore=new ListStore<CategoryTypeDTO>();
  linkedCategoriesStore.add(defaultNoCategory);
  dispatcher.execute(new GetCategories(),null,new AsyncCallback<CategoriesListResult>(){
    @Override public void onFailure(    Throwable arg0){
      linkedCategory.setEmptyText(I18N.CONSTANTS.adminChoiceProblem());
    }
    @Override public void onSuccess(    CategoriesListResult result){
      linkedCategory.setEmptyText(I18N.CONSTANTS.adminUserCreationProfileChoice());
      linkedCategoriesStore.removeAll();
      linkedCategoriesStore.add(defaultNoCategory);
      if (result != null) {
        linkedCategoriesStore.add(result.getList());
        linkedCategoriesStore.commitChanges();
      }
    }
  }
);
  linkedCategory.setStore(linkedCategoriesStore);
  for (int i=0; i < MAX_TENTATIVES_FOR_CHOICES; i++) {
    final ClickableLabel label=new ClickableLabel();
    label.addClickHandler(new ClickHandler(){
      @Override public void onClick(      ClickEvent arg0){
        label.hide();
        selectedChoicesLabels.remove(label.getText());
        if (selectedChoicesLabels.size() == 0) {
          linkedCategory.setEnabled(true);
        }
      }
    }
);
    label.hide();
    selectableChoices.put(i,label);
  }
  questionChoice=new TextField<String>();
  questionChoice.hide();
  qChoicesAddGrid.setVisible(false);
  qChoicesAddGrid.getCellFormatter().setWidth(0,0,(LABEL_WIDTH) + ""String_Node_Str"");
  qChoicesAddGrid.setCellPadding(0);
  qChoicesAddGrid.setCellSpacing(0);
  qChoicesAddGrid.setWidget(0,0,new LabelField(I18N.CONSTANTS.adminFlexibleQChoices() + ""String_Node_Str""));
  qChoicesAddGrid.setWidget(0,1,questionChoice);
  questionChoice.setHideLabel(false);
  addChoiceButton.hide();
  addChoiceButton.addListener(Events.OnClick,new Listener<ButtonEvent>(){
    @Override public void handleEvent(    ButtonEvent be){
      if (questionChoice.getValue() != null) {
        if (!selectedChoicesLabels.contains(questionChoice.getValue())) {
          if (num < MAX_TENTATIVES_FOR_CHOICES) {
            linkedCategory.setEnabled(false);
            selectableChoices.get(num).setText(questionChoice.getValue());
            selectableChoices.get(num).show();
            num++;
            selectedChoicesLabels.add(questionChoice.getValue());
          }
 else {
            MessageBox.alert(I18N.CONSTANTS.adminMaxAttempts(),I18N.CONSTANTS.adminMaxAttemptsQChoices(),null);
            ElementForm.this.removeFromParent();
          }
        }
      }
    }
  }
);
  qChoicesAddGrid.setWidget(0,2,addChoiceButton);
  linkedCategory.addListener(Events.Select,new Listener<BaseEvent>(){
    @Override public void handleEvent(    BaseEvent be){
      if (linkedCategory.getValue() == null || defaultNoCategory.equals(linkedCategory.getValue())) {
        questionChoice.setEnabled(true);
        addChoiceButton.setEnabled(true);
      }
 else {
        questionChoice.setEnabled(false);
        addChoiceButton.setEnabled(false);
        for (        ClickableLabel selected : selectableChoices.values()) {
          selected.setEnabled(false);
        }
      }
    }
  }
);
  posBanner=new SimpleComboBox<Integer>();
  posBanner.setTriggerAction(TriggerAction.ALL);
  posBanner.setEditable(false);
  posBanner.setFieldLabel(constants.adminFlexibleBannerPosition());
  posBanner.removeAll();
  for (int i=1; i < 7; i++) {
    posBanner.add(i);
  }
  posBanner.setAllowBlank(true);
  posBanner.setEnabled(false);
  posBanner.hide();
  isBanner=new CheckBox();
  isBanner.setFieldLabel(constants.Admin_BANNER());
  isBanner.setBoxLabel(""String_Node_Str"");
  isBanner.setValue(false);
  isBanner.addListener(Events.Change,new Listener<BaseEvent>(){
    @Override public void handleEvent(    BaseEvent be){
      if (isBanner.getValue()) {
        posBanner.removeAll();
        for (int i=1; i < 7; i++) {
          posBanner.add(i);
        }
        posBanner.setEnabled(true);
        posBanner.setAllowBlank(false);
      }
 else {
        posBanner.removeAll();
        posBanner.setValue(null);
        posBanner.setAllowBlank(true);
        posBanner.setEnabled(false);
      }
    }
  }
);
  isBanner.hide();
  specificsPanel.add(isBanner);
  specificsPanel.add(posBanner);
  specificsPanel.add(reportModelList);
  specificsPanel.add(textAreaTypeList);
  specificsPanel.add(lengthField);
  specificsPanel.add(isDecimal);
  specificsPanel.add(minLimitField);
  specificsPanel.add(maxLimitField);
  specificsPanel.add(isMultipleQ);
  specificsPanel.add(isLinkedToQuality);
  specificsPanel.add(linkedCategory);
  specificsPanel.add(qChoicesAddGrid);
  for (  ClickableLabel selected : selectableChoices.values()) {
    selected.hide();
    specificsPanel.add(selected);
  }
  commonPanel=new FormPanel();
  commonPanel.setHeaderVisible(false);
  htmlArea=new HtmlEditor();
  htmlArea.hide();
  htmlArea.setEnableAlignments(false);
  htmlArea.setEnableLinks(false);
  htmlArea.setEnableFont(false);
  htmlArea.setEnableLists(false);
  htmlArea.setEnableColors(false);
  htmlArea.setSourceEditMode(false);
  htmlArea.setHeight(75);
  htmlArea.setFieldLabel(constants.adminFlexibleName());
  if (flexibleElement != null && flexibleElement.getLabel() != null) {
    htmlArea.setValue(flexibleElement.getLabel());
    oldFieldProperties.put(AdminUtil.PROP_FX_NAME,flexibleElement.getLabel());
  }
  LabelField label=new LabelField();
  label.hide();
  label.setFieldLabel(constants.adminFlexibleName());
  if (flexibleElement != null && flexibleElement.getElementType() != null) {
    if (ElementTypeEnum.DEFAULT.equals(flexibleElement.getElementType())) {
      label.setText(DefaultFlexibleElementType.getName(((DefaultFlexibleElementDTO)flexibleElement).getType()));
      label.show();
      oldFieldProperties.put(AdminUtil.PROP_FX_NAME,DefaultFlexibleElementType.getName(((DefaultFlexibleElementDTO)flexibleElement).getType()));
      htmlArea.setValue(DefaultFlexibleElementType.getName(((DefaultFlexibleElementDTO)flexibleElement).getType()));
    }
 else {
      htmlArea.show();
    }
  }
 else {
    htmlArea.show();
  }
  commonPanel.add(label);
  commonPanel.add(htmlArea);
  typeList=new SimpleComboBox<String>();
  typeList.setEditable(false);
  typeList.addListener(Events.Select,new Listener<BaseEvent>(){
    @Override public void handleEvent(    BaseEvent be){
      hideAllSpecificAttributes();
      showSpecificAttributes(typeList.getSimpleValue(),flexibleElementToUpdate,true);
    }
  }
);
  typeList.setFieldLabel(constants.adminFlexibleType());
  typeList.setAllowBlank(false);
  typeList.setTriggerAction(TriggerAction.ALL);
  List<String> values=new ArrayList<String>();
  for (  ElementTypeEnum e : ElementTypeEnum.values()) {
    if (!ElementTypeEnum.DEFAULT.equals(e) && !ElementTypeEnum.TRIPLETS.equals(e))     values.add(ElementTypeEnum.getName(e));
  }
  typeList.add(values);
  if (flexibleElement != null && flexibleElement.getElementType() != null) {
    String typeOfElement=ElementTypeEnum.getName(flexibleElement.getElementType());
    typeList.setSimpleValue(typeOfElement);
    showSpecificAttributes(typeOfElement,flexibleElement,false);
    oldFieldProperties.put(AdminUtil.PROP_FX_TYPE,flexibleElement.getElementType());
    if (ElementTypeEnum.DEFAULT.equals(flexibleElement.getElementType())) {
      typeList.setEnabled(false);
    }
  }
 else   typeList.setEmptyText(I18N.CONSTANTS.adminFlexibleType());
  commonPanel.add(typeList);
  final ListStore<BaseModelData> containersStore=new ListStore<BaseModelData>();
  containerList=new ComboBox<BaseModelData>();
  containerList.setEditable(false);
  containerList.setDisplayField(""String_Node_Str"");
  containerList.setValueField(""String_Node_Str"");
  containerList.setFieldLabel(I18N.CONSTANTS.adminFlexibleContainer());
  containerList.setAllowBlank(false);
  containerList.setTriggerAction(TriggerAction.ALL);
  if (flexibleElement == null)   containerList.setEmptyText(I18N.CONSTANTS.adminFlexibleContainerChoice());
  final ListStore<LayoutGroupDTO> groupsStore=new ListStore<LayoutGroupDTO>();
  groupList=new ComboBox<LayoutGroupDTO>();
  groupList.setEditable(false);
  groupList.setFieldLabel(constants.adminFlexibleGroup());
  groupList.setDisplayField(""String_Node_Str"");
  groupList.setValueField(""String_Node_Str"");
  groupList.setTriggerAction(TriggerAction.ALL);
  containerList.addListener(Events.Select,new Listener<BaseEvent>(){
    @Override public void handleEvent(    BaseEvent be){
      LayoutDTO container=null;
      if (containerList.getValue() != null) {
        if (containerList.getValue() instanceof ProjectBannerDTO) {
          container=((ProjectBannerDTO)containerList.getValue()).getLayoutDTO();
          isBanner.setValue(true);
          posBanner.setAllowBlank(false);
          posBanner.setEnabled(true);
        }
 else         if (containerList.getValue() instanceof ProjectDetailsDTO) {
          container=((ProjectDetailsDTO)containerList.getValue()).getLayoutDTO();
        }
 else         if (containerList.getValue() instanceof PhaseModelDTO) {
          container=((PhaseModelDTO)containerList.getValue()).getLayoutDTO();
        }
 else         if (containerList.getValue() instanceof OrgUnitDetailsDTO) {
          container=((OrgUnitDetailsDTO)containerList.getValue()).getLayout();
        }
      }
      if (container != null) {
        groupsStore.removeAll();
        for (        LayoutGroupDTO lg : container.getLayoutGroupsDTO()) {
          groupsStore.add(lg);
        }
        addNewGroupsToStore(container,groupsStore,addedGroups);
        groupList.setValue(groupsStore.getAt(0));
      }
    }
  }
);
  orderField=new NumberField();
  orderField.setAllowBlank(false);
  orderField.setFieldLabel(constants.adminFlexibleOrder());
  orderField.clear();
  oldFieldProperties.put(AdminUtil.PROP_FX_IN_BANNER,false);
  oldFieldProperties.put(AdminUtil.PROP_FX_POS_IN_BANNER,-1);
  if (isProject) {
    if (flexibleElement != null) {
      BaseModelData container=flexibleElement.getContainerModel();
      containerList.setValue(flexibleElement.getContainerModel());
      groupList.setValue(flexibleElement.getConstraint().getParentLayoutGroupDTO());
      orderField.setValue(flexibleElement.getConstraint().getSortOrder());
      groupsStore.removeAll();
      if (container instanceof PhaseModelDTO) {
        for (        LayoutGroupDTO groupChoice : ((PhaseModelDTO)container).getLayoutDTO().getLayoutGroupsDTO()) {
          groupsStore.add(groupChoice);
        }
        addNewGroupsToStore(((PhaseModelDTO)container).getLayoutDTO(),groupsStore,addedGroups);
      }
 else {
        for (        LayoutGroupDTO groupChoice : ((ProjectDetailsDTO)container).getLayoutDTO().getLayoutGroupsDTO()) {
          groupsStore.add(groupChoice);
        }
        addNewGroupsToStore(((ProjectDetailsDTO)container).getLayoutDTO(),groupsStore,addedGroups);
      }
      if (flexibleElement.getBannerConstraint() != null) {
        posBanner.setSimpleValue(flexibleElement.getBannerConstraint().getSortOrder());
        isBanner.setValue(true);
        oldFieldProperties.put(AdminUtil.PROP_FX_IN_BANNER,true);
        oldFieldProperties.put(AdminUtil.PROP_FX_POS_IN_BANNER,flexibleElement.getBannerConstraint().getSortOrder());
        oldFieldProperties.put(AdminUtil.PROP_FX_LC_BANNER,flexibleElement.getBannerConstraint());
      }
      oldFieldProperties.put(AdminUtil.PROP_FX_ORDER_IN_GROUP,new Integer(flexibleElement.getConstraint().getSortOrder()));
      oldFieldProperties.put(AdminUtil.PROP_FX_GROUP,flexibleElement.getConstraint().getParentLayoutGroupDTO());
      oldFieldProperties.put(AdminUtil.PROP_FX_LC,flexibleElement.getConstraint());
    }
    containersStore.add(projectModelToUpdate.getProjectDetailsDTO());
    for (    PhaseModelDTO p : projectModelToUpdate.getPhaseModelsDTO()) {
      containersStore.add(p);
    }
  }
 else {
    if (flexibleElement != null) {
      BaseModelData container=flexibleElement.getContainerModel();
      containerList.setValue(flexibleElement.getContainerModel());
      groupList.setValue(flexibleElement.getConstraint().getParentLayoutGroupDTO());
      orderField.setValue(flexibleElement.getConstraint().getSortOrder());
      groupsStore.removeAll();
      for (      LayoutGroupDTO groupChoice : ((OrgUnitDetailsDTO)container).getLayout().getLayoutGroupsDTO()) {
        groupsStore.add(groupChoice);
      }
      addNewGroupsToStore(((OrgUnitDetailsDTO)container).getLayout(),groupsStore,addedGroups);
      if (flexibleElement.getBannerConstraint() != null) {
        posBanner.setSimpleValue(flexibleElement.getBannerConstraint().getSortOrder());
        isBanner.setValue(true);
        oldFieldProperties.put(AdminUtil.PROP_FX_IN_BANNER,true);
        oldFieldProperties.put(AdminUtil.PROP_FX_POS_IN_BANNER,flexibleElement.getBannerConstraint().getSortOrder());
        oldFieldProperties.put(AdminUtil.PROP_FX_LC_BANNER,flexibleElement.getBannerConstraint());
      }
      oldFieldProperties.put(AdminUtil.PROP_FX_ORDER_IN_GROUP,new Integer(flexibleElement.getConstraint().getSortOrder()));
      oldFieldProperties.put(AdminUtil.PROP_FX_GROUP,flexibleElement.getConstraint().getParentLayoutGroupDTO());
      oldFieldProperties.put(AdminUtil.PROP_FX_LC,flexibleElement.getConstraint());
    }
    containersStore.add(orgUnitModelToUpdate.getDetails());
  }
  containerList.setStore(containersStore);
  commonPanel.add(containerList);
  groupList.setStore(groupsStore);
  commonPanel.add(groupList);
  commonPanel.add(orderField);
  validates=new CheckBox();
  validates.setFieldLabel(constants.adminFlexibleCompulsory());
  validates.setBoxLabel(""String_Node_Str"");
  validates.setValue(false);
  if (flexibleElement != null) {
    validates.setValue(flexibleElement.getValidates());
    oldFieldProperties.put(AdminUtil.PROP_FX_IS_COMPULSARY,flexibleElement.getValidates());
  }
  commonPanel.add(validates);
  privacyGroupsListCombo=new ComboBox<PrivacyGroupDTO>();
  privacyGroupsListCombo.setEditable(false);
  privacyGroupsListCombo.setFieldLabel(constants.adminPrivacyGroups());
  privacyGroupsListCombo.setDisplayField(""String_Node_Str"");
  privacyGroupsListCombo.setValueField(""String_Node_Str"");
  privacyGroupsListCombo.setTriggerAction(TriggerAction.ALL);
  final ListStore<PrivacyGroupDTO> privacyGroupsStore=new ListStore<PrivacyGroupDTO>();
  dispatcher.execute(new GetPrivacyGroups(),null,new AsyncCallback<PrivacyGroupsListResult>(){
    @Override public void onFailure(    Throwable arg0){
      privacyGroupsListCombo.setEmptyText(I18N.CONSTANTS.adminChoiceProblem());
    }
    @Override public void onSuccess(    PrivacyGroupsListResult result){
      privacyGroupsListCombo.setEmptyText(I18N.CONSTANTS.adminPrivacyGroupChoice());
      privacyGroupsStore.removeAll();
      if (result != null) {
        privacyGroupsStore.add(result.getList());
        privacyGroupsStore.commitChanges();
      }
    }
  }
);
  privacyGroupsListCombo.setStore(privacyGroupsStore);
  if (flexibleElement != null && flexibleElement.getPrivacyGroup() != null) {
    privacyGroupsListCombo.setValue(flexibleElement.getPrivacyGroup());
    oldFieldProperties.put(AdminUtil.PROP_FX_PRIVACY_GROUP,flexibleElement.getPrivacyGroup());
  }
  commonPanel.add(privacyGroupsListCombo);
  isAmendable=new CheckBox();
  isAmendable.setBoxLabel(""String_Node_Str"");
  isAmendable.setFieldLabel(constants.adminFlexibleAmendable());
  isAmendable.setValue(false);
  if (flexibleElement != null) {
    isAmendable.setValue(flexibleElement.getAmendable());
    oldFieldProperties.put(AdminUtil.PROP_FX_AMENDABLE,flexibleElement.getAmendable());
  }
  commonPanel.add(isAmendable);
  final Button createButton=new Button(I18N.CONSTANTS.save(),IconImageBundle.ICONS.save());
  createButton.addListener(Events.OnClick,new Listener<ButtonEvent>(){
    @Override public void handleEvent(    ButtonEvent be){
      createFlexibleElement(callback);
    }
  }
);
  final ContentPanel form=new ContentPanel();
  form.setHeight(450);
  form.setHeaderVisible(false);
  form.setLayout(new BorderLayout());
  final BorderLayoutData leftLayoutData=new BorderLayoutData(LayoutRegion.WEST);
  leftLayoutData.setSize(320);
  form.add(commonPanel,leftLayoutData);
  final BorderLayoutData rightLayoutData=new BorderLayoutData(LayoutRegion.CENTER);
  rightLayoutData.setMargins(new Margins(0,0,2,4));
  rightLayoutData.setSize(200);
  form.add(specificsPanel,rightLayoutData);
  final VBoxLayoutData topVBoxLayoutData=new VBoxLayoutData();
  topVBoxLayoutData.setFlex(1.0);
  add(form,topVBoxLayoutData);
  ToolBar toolbar=new ToolBar();
  toolbar.setAlignment(HorizontalAlignment.CENTER);
  toolbar.add(createButton);
  setBottomComponent(toolbar);
  layout();
}","public ElementForm(Dispatcher dispatcher,final AsyncCallback<UpdateModelResult> callback,final FlexibleElementDTO flexibleElement,ProjectModelDTO projectModelToUpdate,OrgUnitModelDTO orgUnitModelToUpdate){
  final VBoxLayout mainPanelLayout=new VBoxLayout();
  mainPanelLayout.setVBoxLayoutAlign(VBoxLayout.VBoxLayoutAlign.STRETCH);
  setLayout(mainPanelLayout);
  setHeaderVisible(false);
  if (projectModelToUpdate != null) {
    isProject=true;
  }
 else {
    isProject=false;
  }
  this.dispatcher=dispatcher;
  this.projectModelToUpdate=projectModelToUpdate;
  this.orgUnitModelToUpdate=orgUnitModelToUpdate;
  this.flexibleElementToUpdate=flexibleElement;
  UIConstants constants=GWT.create(UIConstants.class);
  specificsPanel=new FormPanel();
  specificsPanel.setHeaderVisible(false);
  specificsPanel.setBorders(true);
  specificsPanel.hide();
  reportModelList=new ComboBox<ReportModelDTO>();
  reportModelList.setEditable(false);
  reportModelList.hide();
  reportModelList.setFieldLabel(I18N.CONSTANTS.adminReportName());
  reportModelList.setDisplayField(""String_Node_Str"");
  reportModelList.setValueField(""String_Node_Str"");
  reportModelList.setTriggerAction(TriggerAction.ALL);
  reportModelsStore=new ListStore<ReportModelDTO>();
  dispatcher.execute(new GetReportModels(),null,new AsyncCallback<ReportModelsListResult>(){
    @Override public void onFailure(    Throwable arg0){
      reportModelList.setEmptyText(I18N.CONSTANTS.adminChoiceProblem());
    }
    @Override public void onSuccess(    ReportModelsListResult result){
      reportModelList.setEmptyText(I18N.CONSTANTS.adminReportName());
      reportModelsStore.removeAll();
      if (result != null) {
        reportModelsStore.add(result.getList());
        reportModelsStore.commitChanges();
      }
      if (flexibleElement != null) {
        if (flexibleElement instanceof ReportElementDTO) {
          if (((ReportElementDTO)flexibleElement).getModelId() != null) {
            for (            ReportModelDTO reportModel : reportModelsStore.getModels()) {
              if (reportModel.getId() == ((ReportElementDTO)flexibleElement).getModelId()) {
                reportModelList.setValue(reportModel);
              }
            }
          }
        }
      }
    }
  }
);
  reportModelList.setStore(reportModelsStore);
  maxLimitField=new NumberField();
  maxLimitField.setFieldLabel(I18N.CONSTANTS.adminFlexibleMaxLimit());
  maxLimitField.hide();
  textAreaTypeList=new SimpleComboBox<String>();
  textAreaTypeList.setTriggerAction(TriggerAction.ALL);
  textAreaTypeList.setEditable(false);
  textAreaTypeList.hide();
  textAreaTypeList.setFieldLabel(I18N.CONSTANTS.adminFlexibleTextType());
  List<String> textTypes=new ArrayList<String>();
  textTypes.add(I18N.CONSTANTS.adminFlexibleTextTypeP());
  textTypes.add(I18N.CONSTANTS.adminFlexibleTextTypeT());
  textTypes.add(I18N.CONSTANTS.adminFlexibleTextTypeN());
  textTypes.add(I18N.CONSTANTS.adminFlexibleTextTypeD());
  textAreaTypeList.add(textTypes);
  minLimitField=new NumberField();
  minLimitField.setFieldLabel(I18N.CONSTANTS.adminFlexibleMinLimit());
  minLimitField.hide();
  lengthField=new NumberField();
  lengthField.setFieldLabel(I18N.CONSTANTS.adminFlexibleLength());
  lengthField.hide();
  isDecimal=new CheckBox();
  isDecimal.hide();
  isDecimal.setBoxLabel(""String_Node_Str"");
  isDecimal.setFieldLabel(I18N.CONSTANTS.adminFlexibleDecimal());
  isDecimal.setLabelSeparator(""String_Node_Str"");
  isMultipleQ=new CheckBox();
  isMultipleQ.hide();
  isMultipleQ.setBoxLabel(""String_Node_Str"");
  isMultipleQ.setFieldLabel(I18N.CONSTANTS.adminFlexibleMultipleQ());
  isMultipleQ.setLabelSeparator(""String_Node_Str"");
  isLinkedToQuality=new CheckBox();
  isLinkedToQuality.hide();
  isLinkedToQuality.setBoxLabel(""String_Node_Str"");
  isLinkedToQuality.setFieldLabel(I18N.CONSTANTS.adminFlexibleLinkedToQuality());
  isLinkedToQuality.setLabelSeparator(""String_Node_Str"");
  defaultNoCategory.setLabel(I18N.CONSTANTS.adminFlexibleNoLinkedCategory());
  defaultNoCategory.setId(-1);
  linkedCategory=new ComboBox<CategoryTypeDTO>();
  linkedCategory.setEditable(false);
  linkedCategory.hide();
  linkedCategory.setDisplayField(I18N.CONSTANTS.adminFlexibleNoLinkedCategory());
  linkedCategory.setFieldLabel(I18N.CONSTANTS.adminFlexibleLinkedCategory());
  linkedCategory.setDisplayField(""String_Node_Str"");
  linkedCategory.setValueField(""String_Node_Str"");
  linkedCategory.setTriggerAction(TriggerAction.ALL);
  final ListStore<CategoryTypeDTO> linkedCategoriesStore=new ListStore<CategoryTypeDTO>();
  linkedCategoriesStore.add(defaultNoCategory);
  dispatcher.execute(new GetCategories(),null,new AsyncCallback<CategoriesListResult>(){
    @Override public void onFailure(    Throwable arg0){
      linkedCategory.setEmptyText(I18N.CONSTANTS.adminChoiceProblem());
    }
    @Override public void onSuccess(    CategoriesListResult result){
      linkedCategory.setEmptyText(I18N.CONSTANTS.adminUserCreationProfileChoice());
      linkedCategoriesStore.removeAll();
      linkedCategoriesStore.add(defaultNoCategory);
      if (result != null) {
        linkedCategoriesStore.add(result.getList());
        linkedCategoriesStore.commitChanges();
      }
    }
  }
);
  linkedCategory.setStore(linkedCategoriesStore);
  for (int i=0; i < MAX_TENTATIVES_FOR_CHOICES; i++) {
    final ClickableLabel label=new ClickableLabel();
    label.addClickHandler(new ClickHandler(){
      @Override public void onClick(      ClickEvent arg0){
        label.hide();
        selectedChoicesLabels.remove(label.getText());
        if (selectedChoicesLabels.size() == 0) {
          linkedCategory.setEnabled(true);
        }
      }
    }
);
    label.hide();
    selectableChoices.put(i,label);
  }
  questionChoice=new TextField<String>();
  questionChoice.hide();
  qChoicesAddGrid.setVisible(false);
  qChoicesAddGrid.getCellFormatter().setWidth(0,0,(LABEL_WIDTH) + ""String_Node_Str"");
  qChoicesAddGrid.setCellPadding(0);
  qChoicesAddGrid.setCellSpacing(0);
  qChoicesAddGrid.setWidget(0,0,new LabelField(I18N.CONSTANTS.adminFlexibleQChoices() + ""String_Node_Str""));
  qChoicesAddGrid.setWidget(0,1,questionChoice);
  questionChoice.setHideLabel(false);
  addChoiceButton.hide();
  addChoiceButton.addListener(Events.OnClick,new Listener<ButtonEvent>(){
    @Override public void handleEvent(    ButtonEvent be){
      if (questionChoice.getValue() != null) {
        if (!selectedChoicesLabels.contains(questionChoice.getValue())) {
          if (num < MAX_TENTATIVES_FOR_CHOICES) {
            linkedCategory.setEnabled(false);
            selectableChoices.get(num).setText(questionChoice.getValue());
            selectableChoices.get(num).show();
            num++;
            selectedChoicesLabels.add(questionChoice.getValue());
          }
 else {
            MessageBox.alert(I18N.CONSTANTS.adminMaxAttempts(),I18N.CONSTANTS.adminMaxAttemptsQChoices(),null);
            ElementForm.this.removeFromParent();
          }
        }
      }
    }
  }
);
  qChoicesAddGrid.setWidget(0,2,addChoiceButton);
  linkedCategory.addListener(Events.Select,new Listener<BaseEvent>(){
    @Override public void handleEvent(    BaseEvent be){
      if (linkedCategory.getValue() == null || defaultNoCategory.equals(linkedCategory.getValue())) {
        questionChoice.setEnabled(true);
        addChoiceButton.setEnabled(true);
      }
 else {
        questionChoice.setEnabled(false);
        addChoiceButton.setEnabled(false);
        for (        ClickableLabel selected : selectableChoices.values()) {
          selected.setEnabled(false);
        }
      }
    }
  }
);
  posBanner=new SimpleComboBox<Integer>();
  posBanner.setTriggerAction(TriggerAction.ALL);
  posBanner.setEditable(false);
  posBanner.setFieldLabel(constants.adminFlexibleBannerPosition());
  posBanner.removeAll();
  for (int i=1; i < 7; i++) {
    posBanner.add(i);
  }
  posBanner.setAllowBlank(true);
  posBanner.setEnabled(false);
  posBanner.hide();
  isBanner=new CheckBox();
  isBanner.setFieldLabel(constants.Admin_BANNER());
  isBanner.setBoxLabel(""String_Node_Str"");
  isBanner.setValue(false);
  isBanner.addListener(Events.Change,new Listener<BaseEvent>(){
    @Override public void handleEvent(    BaseEvent be){
      if (isBanner.getValue()) {
        posBanner.removeAll();
        for (int i=1; i < 7; i++) {
          posBanner.add(i);
        }
        posBanner.setEnabled(true);
        posBanner.setAllowBlank(false);
      }
 else {
        posBanner.removeAll();
        posBanner.setValue(null);
        posBanner.setAllowBlank(true);
        posBanner.setEnabled(false);
      }
    }
  }
);
  isBanner.hide();
  specificsPanel.add(isBanner);
  specificsPanel.add(posBanner);
  specificsPanel.add(reportModelList);
  specificsPanel.add(textAreaTypeList);
  specificsPanel.add(lengthField);
  specificsPanel.add(isDecimal);
  specificsPanel.add(minLimitField);
  specificsPanel.add(maxLimitField);
  specificsPanel.add(isMultipleQ);
  specificsPanel.add(isLinkedToQuality);
  specificsPanel.add(linkedCategory);
  specificsPanel.add(qChoicesAddGrid);
  for (  ClickableLabel selected : selectableChoices.values()) {
    selected.hide();
    specificsPanel.add(selected);
  }
  commonPanel=new FormPanel();
  commonPanel.setHeaderVisible(false);
  htmlArea=new HtmlEditor();
  htmlArea.hide();
  htmlArea.setEnableAlignments(false);
  htmlArea.setEnableLinks(false);
  htmlArea.setEnableFont(false);
  htmlArea.setEnableLists(false);
  htmlArea.setEnableColors(false);
  htmlArea.setSourceEditMode(false);
  htmlArea.setHeight(75);
  htmlArea.setFieldLabel(constants.adminFlexibleName());
  if (flexibleElement != null && flexibleElement.getLabel() != null) {
    htmlArea.setValue(flexibleElement.getLabel());
    oldFieldProperties.put(AdminUtil.PROP_FX_NAME,flexibleElement.getLabel());
  }
  LabelField label=new LabelField();
  label.hide();
  label.setFieldLabel(constants.adminFlexibleName());
  if (flexibleElement != null && flexibleElement.getElementType() != null) {
    if (ElementTypeEnum.DEFAULT.equals(flexibleElement.getElementType())) {
      label.setText(DefaultFlexibleElementType.getName(((DefaultFlexibleElementDTO)flexibleElement).getType()));
      label.show();
      oldFieldProperties.put(AdminUtil.PROP_FX_NAME,DefaultFlexibleElementType.getName(((DefaultFlexibleElementDTO)flexibleElement).getType()));
      htmlArea.setValue(DefaultFlexibleElementType.getName(((DefaultFlexibleElementDTO)flexibleElement).getType()));
    }
 else {
      htmlArea.show();
    }
  }
 else {
    htmlArea.show();
  }
  commonPanel.add(label);
  commonPanel.add(htmlArea);
  typeList=new SimpleComboBox<String>();
  typeList.setEditable(false);
  typeList.addListener(Events.Select,new Listener<BaseEvent>(){
    @Override public void handleEvent(    BaseEvent be){
      hideAllSpecificAttributes();
      showSpecificAttributes(typeList.getSimpleValue(),flexibleElementToUpdate,true);
    }
  }
);
  typeList.setFieldLabel(constants.adminFlexibleType());
  typeList.setAllowBlank(false);
  typeList.setTriggerAction(TriggerAction.ALL);
  List<String> values=new ArrayList<String>();
  for (  ElementTypeEnum e : ElementTypeEnum.values()) {
    if (!ElementTypeEnum.DEFAULT.equals(e) && !ElementTypeEnum.TRIPLETS.equals(e))     values.add(ElementTypeEnum.getName(e));
  }
  typeList.add(values);
  if (flexibleElement != null && flexibleElement.getElementType() != null) {
    String typeOfElement=ElementTypeEnum.getName(flexibleElement.getElementType());
    typeList.setSimpleValue(typeOfElement);
    showSpecificAttributes(typeOfElement,flexibleElement,false);
    oldFieldProperties.put(AdminUtil.PROP_FX_TYPE,flexibleElement.getElementType());
    if (ElementTypeEnum.DEFAULT.equals(flexibleElement.getElementType())) {
      typeList.setEnabled(false);
    }
  }
 else   typeList.setEmptyText(I18N.CONSTANTS.adminFlexibleType());
  commonPanel.add(typeList);
  final ListStore<BaseModelData> containersStore=new ListStore<BaseModelData>();
  containerList=new ComboBox<BaseModelData>();
  containerList.setEditable(false);
  containerList.setDisplayField(""String_Node_Str"");
  containerList.setValueField(""String_Node_Str"");
  containerList.setFieldLabel(I18N.CONSTANTS.adminFlexibleContainer());
  containerList.setAllowBlank(false);
  containerList.setTriggerAction(TriggerAction.ALL);
  if (flexibleElement == null)   containerList.setEmptyText(I18N.CONSTANTS.adminFlexibleContainerChoice());
  final ListStore<LayoutGroupDTO> groupsStore=new ListStore<LayoutGroupDTO>();
  groupList=new ComboBox<LayoutGroupDTO>();
  groupList.setEditable(false);
  groupList.setFieldLabel(constants.adminFlexibleGroup());
  groupList.setDisplayField(""String_Node_Str"");
  groupList.setValueField(""String_Node_Str"");
  groupList.setTriggerAction(TriggerAction.ALL);
  containerList.addListener(Events.Select,new Listener<BaseEvent>(){
    @Override public void handleEvent(    BaseEvent be){
      LayoutDTO container=null;
      if (containerList.getValue() != null) {
        if (containerList.getValue() instanceof ProjectBannerDTO) {
          container=((ProjectBannerDTO)containerList.getValue()).getLayoutDTO();
          isBanner.setValue(true);
          posBanner.setAllowBlank(false);
          posBanner.setEnabled(true);
        }
 else         if (containerList.getValue() instanceof ProjectDetailsDTO) {
          container=((ProjectDetailsDTO)containerList.getValue()).getLayoutDTO();
        }
 else         if (containerList.getValue() instanceof PhaseModelDTO) {
          container=((PhaseModelDTO)containerList.getValue()).getLayoutDTO();
        }
 else         if (containerList.getValue() instanceof OrgUnitDetailsDTO) {
          container=((OrgUnitDetailsDTO)containerList.getValue()).getLayout();
        }
      }
      if (container != null) {
        groupsStore.removeAll();
        for (        LayoutGroupDTO lg : container.getLayoutGroupsDTO()) {
          groupsStore.add(lg);
        }
        groupList.setValue(groupsStore.getAt(0));
      }
    }
  }
);
  orderField=new NumberField();
  orderField.setAllowBlank(false);
  orderField.setFieldLabel(constants.adminFlexibleOrder());
  orderField.clear();
  oldFieldProperties.put(AdminUtil.PROP_FX_IN_BANNER,false);
  oldFieldProperties.put(AdminUtil.PROP_FX_POS_IN_BANNER,-1);
  if (isProject) {
    if (flexibleElement != null) {
      BaseModelData container=flexibleElement.getContainerModel();
      containerList.setValue(flexibleElement.getContainerModel());
      groupList.setValue(flexibleElement.getConstraint().getParentLayoutGroupDTO());
      orderField.setValue(flexibleElement.getConstraint().getSortOrder());
      groupsStore.removeAll();
      if (container instanceof PhaseModelDTO) {
        for (        LayoutGroupDTO groupChoice : ((PhaseModelDTO)container).getLayoutDTO().getLayoutGroupsDTO()) {
          groupsStore.add(groupChoice);
        }
      }
 else {
        for (        LayoutGroupDTO groupChoice : ((ProjectDetailsDTO)container).getLayoutDTO().getLayoutGroupsDTO()) {
          groupsStore.add(groupChoice);
        }
      }
      if (flexibleElement.getBannerConstraint() != null) {
        posBanner.setSimpleValue(flexibleElement.getBannerConstraint().getSortOrder());
        isBanner.setValue(true);
        oldFieldProperties.put(AdminUtil.PROP_FX_IN_BANNER,true);
        oldFieldProperties.put(AdminUtil.PROP_FX_POS_IN_BANNER,flexibleElement.getBannerConstraint().getSortOrder());
        oldFieldProperties.put(AdminUtil.PROP_FX_LC_BANNER,flexibleElement.getBannerConstraint());
      }
      oldFieldProperties.put(AdminUtil.PROP_FX_ORDER_IN_GROUP,new Integer(flexibleElement.getConstraint().getSortOrder()));
      oldFieldProperties.put(AdminUtil.PROP_FX_GROUP,flexibleElement.getConstraint().getParentLayoutGroupDTO());
      oldFieldProperties.put(AdminUtil.PROP_FX_LC,flexibleElement.getConstraint());
    }
    containersStore.add(projectModelToUpdate.getProjectDetailsDTO());
    for (    PhaseModelDTO p : projectModelToUpdate.getPhaseModelsDTO()) {
      containersStore.add(p);
    }
  }
 else {
    if (flexibleElement != null) {
      BaseModelData container=flexibleElement.getContainerModel();
      containerList.setValue(flexibleElement.getContainerModel());
      groupList.setValue(flexibleElement.getConstraint().getParentLayoutGroupDTO());
      orderField.setValue(flexibleElement.getConstraint().getSortOrder());
      groupsStore.removeAll();
      for (      LayoutGroupDTO groupChoice : ((OrgUnitDetailsDTO)container).getLayout().getLayoutGroupsDTO()) {
        groupsStore.add(groupChoice);
      }
      if (flexibleElement.getBannerConstraint() != null) {
        posBanner.setSimpleValue(flexibleElement.getBannerConstraint().getSortOrder());
        isBanner.setValue(true);
        oldFieldProperties.put(AdminUtil.PROP_FX_IN_BANNER,true);
        oldFieldProperties.put(AdminUtil.PROP_FX_POS_IN_BANNER,flexibleElement.getBannerConstraint().getSortOrder());
        oldFieldProperties.put(AdminUtil.PROP_FX_LC_BANNER,flexibleElement.getBannerConstraint());
      }
      oldFieldProperties.put(AdminUtil.PROP_FX_ORDER_IN_GROUP,new Integer(flexibleElement.getConstraint().getSortOrder()));
      oldFieldProperties.put(AdminUtil.PROP_FX_GROUP,flexibleElement.getConstraint().getParentLayoutGroupDTO());
      oldFieldProperties.put(AdminUtil.PROP_FX_LC,flexibleElement.getConstraint());
    }
    containersStore.add(orgUnitModelToUpdate.getDetails());
  }
  containerList.setStore(containersStore);
  commonPanel.add(containerList);
  groupList.setStore(groupsStore);
  commonPanel.add(groupList);
  commonPanel.add(orderField);
  validates=new CheckBox();
  validates.setFieldLabel(constants.adminFlexibleCompulsory());
  validates.setBoxLabel(""String_Node_Str"");
  validates.setValue(false);
  if (flexibleElement != null) {
    validates.setValue(flexibleElement.getValidates());
    oldFieldProperties.put(AdminUtil.PROP_FX_IS_COMPULSARY,flexibleElement.getValidates());
  }
  commonPanel.add(validates);
  privacyGroupsListCombo=new ComboBox<PrivacyGroupDTO>();
  privacyGroupsListCombo.setEditable(false);
  privacyGroupsListCombo.setFieldLabel(constants.adminPrivacyGroups());
  privacyGroupsListCombo.setDisplayField(""String_Node_Str"");
  privacyGroupsListCombo.setValueField(""String_Node_Str"");
  privacyGroupsListCombo.setTriggerAction(TriggerAction.ALL);
  final ListStore<PrivacyGroupDTO> privacyGroupsStore=new ListStore<PrivacyGroupDTO>();
  dispatcher.execute(new GetPrivacyGroups(),null,new AsyncCallback<PrivacyGroupsListResult>(){
    @Override public void onFailure(    Throwable arg0){
      privacyGroupsListCombo.setEmptyText(I18N.CONSTANTS.adminChoiceProblem());
    }
    @Override public void onSuccess(    PrivacyGroupsListResult result){
      privacyGroupsListCombo.setEmptyText(I18N.CONSTANTS.adminPrivacyGroupChoice());
      privacyGroupsStore.removeAll();
      if (result != null) {
        privacyGroupsStore.add(result.getList());
        privacyGroupsStore.commitChanges();
      }
    }
  }
);
  privacyGroupsListCombo.setStore(privacyGroupsStore);
  if (flexibleElement != null && flexibleElement.getPrivacyGroup() != null) {
    privacyGroupsListCombo.setValue(flexibleElement.getPrivacyGroup());
    oldFieldProperties.put(AdminUtil.PROP_FX_PRIVACY_GROUP,flexibleElement.getPrivacyGroup());
  }
  commonPanel.add(privacyGroupsListCombo);
  isAmendable=new CheckBox();
  isAmendable.setBoxLabel(""String_Node_Str"");
  isAmendable.setFieldLabel(constants.adminFlexibleAmendable());
  isAmendable.setValue(false);
  if (flexibleElement != null) {
    isAmendable.setValue(flexibleElement.getAmendable());
    oldFieldProperties.put(AdminUtil.PROP_FX_AMENDABLE,flexibleElement.getAmendable());
  }
  commonPanel.add(isAmendable);
  final Button createButton=new Button(I18N.CONSTANTS.save(),IconImageBundle.ICONS.save());
  createButton.addListener(Events.OnClick,new Listener<ButtonEvent>(){
    @Override public void handleEvent(    ButtonEvent be){
      createFlexibleElement(callback);
    }
  }
);
  final ContentPanel form=new ContentPanel();
  form.setHeight(450);
  form.setHeaderVisible(false);
  form.setLayout(new BorderLayout());
  final BorderLayoutData leftLayoutData=new BorderLayoutData(LayoutRegion.WEST);
  leftLayoutData.setSize(320);
  form.add(commonPanel,leftLayoutData);
  final BorderLayoutData rightLayoutData=new BorderLayoutData(LayoutRegion.CENTER);
  rightLayoutData.setMargins(new Margins(0,0,2,4));
  rightLayoutData.setSize(200);
  form.add(specificsPanel,rightLayoutData);
  final VBoxLayoutData topVBoxLayoutData=new VBoxLayoutData();
  topVBoxLayoutData.setFlex(1.0);
  add(form,topVBoxLayoutData);
  ToolBar toolbar=new ToolBar();
  toolbar.setAlignment(HorizontalAlignment.CENTER);
  toolbar.add(createButton);
  setBottomComponent(toolbar);
  layout();
}",0.9906457739791074
35662,"public LayoutGroupSigmahForm(Dispatcher dispatcher,final AsyncCallback<CreateResult> callback,FlexibleElementDTO fxToUpdate,ProjectModelDTO projectModelToUpdate,OrgUnitModelDTO orgUnitModelToUpdate){
  this.dispatcher=dispatcher;
  this.projectModelToUpdate=projectModelToUpdate;
  this.orgUnitModelToUpdate=orgUnitModelToUpdate;
  UIConstants constants=GWT.create(UIConstants.class);
  if (fxToUpdate != null) {
    layoutGroupToUpdate=fxToUpdate.getGroup();
  }
  FormLayout layout=new FormLayout();
  layout.setLabelWidth(LABEL_WIDTH);
  setLayout(layout);
  nameField=new TextField<String>();
  nameField.setFieldLabel(constants.adminPrivacyGroupsName());
  nameField.setAllowBlank(false);
  if (layoutGroupToUpdate != null && layoutGroupToUpdate.getTitle() != null && !layoutGroupToUpdate.getTitle().isEmpty())   nameField.setValue(layoutGroupToUpdate.getTitle());
  add(nameField);
  final ListStore<BaseModelData> containersStore=new ListStore<BaseModelData>();
  containerList=new ComboBox<BaseModelData>();
  containerList.setEditable(false);
  containerList.setDisplayField(""String_Node_Str"");
  containerList.setValueField(""String_Node_Str"");
  containerList.setFieldLabel(I18N.CONSTANTS.adminFlexibleContainer());
  containerList.setAllowBlank(false);
  containerList.setTriggerAction(TriggerAction.ALL);
  if (projectModelToUpdate != null) {
    containersStore.add(projectModelToUpdate.getProjectDetailsDTO());
    for (    PhaseModelDTO p : projectModelToUpdate.getPhaseModelsDTO()) {
      containersStore.add(p);
    }
  }
 else   if (orgUnitModelToUpdate != null) {
    containersStore.add(orgUnitModelToUpdate.getDetails());
  }
  containerList.setStore(containersStore);
  rowField=new SimpleComboBox<Integer>();
  rowField.setEditable(false);
  rowField.setFieldLabel(constants.adminFlexibleGroupVPosition());
  if (fxToUpdate != null) {
    rowField.setSimpleValue(layoutGroupToUpdate.getRow());
  }
  if (fxToUpdate != null) {
    containerList.setValue(fxToUpdate.getContainerModel());
    if (fxToUpdate.getContainerModel() != null) {
      LayoutDTO container=new LayoutDTO();
      if (fxToUpdate.getContainerModel() instanceof ProjectDetailsDTO) {
        container=((ProjectDetailsDTO)containerList.getValue()).getLayoutDTO();
      }
 else       if (fxToUpdate.getContainerModel() instanceof PhaseModelDTO) {
        container=((PhaseModelDTO)containerList.getValue()).getLayoutDTO();
      }
 else       if (fxToUpdate.getContainerModel() instanceof OrgUnitDetailsDTO) {
        container=((OrgUnitDetailsDTO)containerList.getValue()).getLayout();
      }
      if (container != null) {
        rowField.removeAll();
        for (int i=0; i < container.getRowsCount(); i++) {
          rowField.add(i);
        }
      }
    }
  }
  containerList.addListener(Events.Select,new Listener<BaseEvent>(){
    @Override public void handleEvent(    BaseEvent be){
      LayoutDTO container=null;
      if (containerList.getValue() != null) {
        if (containerList.getValue() instanceof ProjectDetailsDTO) {
          container=((ProjectDetailsDTO)containerList.getValue()).getLayoutDTO();
        }
 else         if (containerList.getValue() instanceof PhaseModelDTO) {
          container=((PhaseModelDTO)containerList.getValue()).getLayoutDTO();
        }
 else         if (containerList.getValue() instanceof OrgUnitDetailsDTO) {
          container=((OrgUnitDetailsDTO)containerList.getValue()).getLayout();
        }
      }
      if (container != null) {
        rowField.removeAll();
        for (int i=0; i < container.getRowsCount(); i++) {
          rowField.add(i);
        }
      }
    }
  }
);
  add(containerList);
  add(rowField);
  final Button createButton=new Button(I18N.CONSTANTS.save());
  createButton.addListener(Events.OnClick,new Listener<ButtonEvent>(){
    @Override public void handleEvent(    ButtonEvent be){
      createLayoutGroup(callback);
    }
  }
);
  add(createButton);
}","public LayoutGroupSigmahForm(Dispatcher dispatcher,final AsyncCallback<CreateResult> callback,FlexibleElementDTO fxToUpdate,ProjectModelDTO projectModelToUpdate,OrgUnitModelDTO orgUnitModelToUpdate){
  this.dispatcher=dispatcher;
  this.projectModelToUpdate=projectModelToUpdate;
  this.orgUnitModelToUpdate=orgUnitModelToUpdate;
  UIConstants constants=GWT.create(UIConstants.class);
  if (fxToUpdate != null) {
    layoutGroupToUpdate=fxToUpdate.getGroup();
  }
  FormLayout layout=new FormLayout();
  layout.setLabelWidth(LABEL_WIDTH);
  setLayout(layout);
  nameField=new TextField<String>();
  nameField.setFieldLabel(constants.adminPrivacyGroupsName());
  nameField.setAllowBlank(false);
  if (layoutGroupToUpdate != null && layoutGroupToUpdate.getTitle() != null && !layoutGroupToUpdate.getTitle().isEmpty())   nameField.setValue(layoutGroupToUpdate.getTitle());
  add(nameField);
  final ListStore<BaseModelData> containersStore=new ListStore<BaseModelData>();
  containerList=new ComboBox<BaseModelData>();
  containerList.setEditable(false);
  containerList.setDisplayField(""String_Node_Str"");
  containerList.setValueField(""String_Node_Str"");
  containerList.setFieldLabel(I18N.CONSTANTS.adminFlexibleContainer());
  containerList.setAllowBlank(false);
  containerList.setTriggerAction(TriggerAction.ALL);
  if (projectModelToUpdate != null) {
    containersStore.add(projectModelToUpdate.getProjectDetailsDTO());
    for (    PhaseModelDTO p : projectModelToUpdate.getPhaseModelsDTO()) {
      containersStore.add(p);
    }
  }
 else   if (orgUnitModelToUpdate != null) {
    containersStore.add(orgUnitModelToUpdate.getDetails());
  }
  containerList.setStore(containersStore);
  rowField=new SimpleComboBox<Integer>();
  rowField.setEditable(false);
  rowField.setFieldLabel(constants.adminFlexibleGroupVPosition());
  if (fxToUpdate != null) {
    rowField.setSimpleValue(layoutGroupToUpdate.getRow());
  }
  if (fxToUpdate != null) {
    containerList.setValue(fxToUpdate.getContainerModel());
    if (fxToUpdate.getContainerModel() != null) {
      LayoutDTO container=new LayoutDTO();
      if (fxToUpdate.getContainerModel() instanceof ProjectDetailsDTO) {
        container=((ProjectDetailsDTO)containerList.getValue()).getLayoutDTO();
      }
 else       if (fxToUpdate.getContainerModel() instanceof PhaseModelDTO) {
        container=((PhaseModelDTO)containerList.getValue()).getLayoutDTO();
      }
 else       if (fxToUpdate.getContainerModel() instanceof OrgUnitDetailsDTO) {
        container=((OrgUnitDetailsDTO)containerList.getValue()).getLayout();
      }
      if (container != null) {
        rowField.removeAll();
        for (int i=0; i < container.getRowsCount(); i++) {
          rowField.add(i);
        }
        rowField.add(container.getRowsCount());
      }
    }
  }
  containerList.addListener(Events.Select,new Listener<BaseEvent>(){
    @Override public void handleEvent(    BaseEvent be){
      LayoutDTO container=null;
      if (containerList.getValue() != null) {
        if (containerList.getValue() instanceof ProjectDetailsDTO) {
          container=((ProjectDetailsDTO)containerList.getValue()).getLayoutDTO();
        }
 else         if (containerList.getValue() instanceof PhaseModelDTO) {
          container=((PhaseModelDTO)containerList.getValue()).getLayoutDTO();
        }
 else         if (containerList.getValue() instanceof OrgUnitDetailsDTO) {
          container=((OrgUnitDetailsDTO)containerList.getValue()).getLayout();
        }
      }
      if (container != null) {
        rowField.removeAll();
        for (int i=0; i < container.getRowsCount(); i++) {
          rowField.add(i);
        }
        rowField.add(container.getRowsCount());
      }
    }
  }
);
  add(containerList);
  add(rowField);
  final Button createButton=new Button(I18N.CONSTANTS.save());
  createButton.addListener(Events.OnClick,new Listener<ButtonEvent>(){
    @Override public void handleEvent(    ButtonEvent be){
      createLayoutGroup(callback);
    }
  }
);
  add(createButton);
}",0.9879578524836928
35663,"/** 
 * Fills combobox with the children of the given root org units.
 * @param root The root org unit.
 */
private void fillOrgUnitsList(OrgUnitDTOLight root){
  for (  final OrgUnitDTOLight child : root.getChildrenDTO()) {
    recursiveFillOrgUnitsList(child);
  }
}","/** 
 * Fills combobox with the children of the given root org units.
 * @param root The root org unit.
 */
private void fillOrgUnitsList(OrgUnitDTOLight root){
  orgUnitsStore.add(root);
  for (  final OrgUnitDTOLight child : root.getChildrenDTO()) {
    recursiveFillOrgUnitsList(child);
  }
}",0.9520426287744228
35664,"@SuppressWarnings(""String_Node_Str"") @Override public Object create(User executingUser,PropertyMap properties){
  LayoutGroup groupToPersist=null;
  LayoutGroupDTO layoutGroupDTOToPersist=(LayoutGroupDTO)properties.get(AdminUtil.PROP_NEW_GROUP_LAYOUT);
  ProjectModelDTO projectModelDTO=(ProjectModelDTO)properties.get(AdminUtil.ADMIN_PROJECT_MODEL);
  OrgUnitModelDTO orgUnitModelDTO=(OrgUnitModelDTO)properties.get(AdminUtil.ADMIN_ORG_UNIT_MODEL);
  groupToPersist=mapper.map(layoutGroupDTOToPersist,LayoutGroup.class);
  if (layoutGroupDTOToPersist.getId() > 0) {
    groupToPersist=em.merge(groupToPersist);
  }
 else {
    if (groupToPersist != null) {
      groupToPersist.setId(null);
      em.persist(groupToPersist);
    }
  }
  LayoutGroupDTO groupPersisted=null;
  if (groupToPersist != null) {
    groupPersisted=mapper.map(groupToPersist,LayoutGroupDTO.class);
  }
  return groupPersisted;
}","@SuppressWarnings(""String_Node_Str"") @Override public Object create(User executingUser,PropertyMap properties){
  LayoutGroup groupToPersist=null;
  LayoutGroupDTO layoutGroupDTOToPersist=(LayoutGroupDTO)properties.get(AdminUtil.PROP_NEW_GROUP_LAYOUT);
  ProjectModelDTO projectModelDTO=(ProjectModelDTO)properties.get(AdminUtil.ADMIN_PROJECT_MODEL);
  OrgUnitModelDTO orgUnitModelDTO=(OrgUnitModelDTO)properties.get(AdminUtil.ADMIN_ORG_UNIT_MODEL);
  groupToPersist=mapper.map(layoutGroupDTOToPersist,LayoutGroup.class);
  if (groupToPersist.getParentLayout().getRowsCount() <= groupToPersist.getRow()) {
    Layout layout=groupToPersist.getParentLayout();
    layout.setRowsCount(groupToPersist.getRow() + 1);
    em.merge(layout);
  }
  if (layoutGroupDTOToPersist.getId() > 0) {
    groupToPersist=em.merge(groupToPersist);
  }
 else {
    if (groupToPersist != null) {
      groupToPersist.setId(null);
      em.persist(groupToPersist);
    }
  }
  LayoutGroupDTO groupPersisted=null;
  if (groupToPersist != null) {
    groupPersisted=mapper.map(groupToPersist,LayoutGroupDTO.class);
  }
  return groupPersisted;
}",0.8932806324110671
35665,"@Override public Object create(User user,PropertyMap properties){
  orgUnitModel=(OrgUnitModelDTO)properties.get(AdminUtil.ADMIN_ORG_UNIT_MODEL);
  if (orgUnitModel != null && ProjectModelStatus.DRAFT.equals(orgUnitModel.getStatus())) {
    if (orgUnitModel.getId() != -1) {
      update(user,orgUnitModel,properties);
      if (modelToUpdate != null) {
        OrgUnitModelDTO orgUnitDTOUpdated=mapper.map(modelToUpdate,OrgUnitModelDTO.class);
        return orgUnitDTOUpdated;
      }
    }
 else {
      OrgUnitModel oM=createOrgUnitModel(null,properties,user);
      OrgUnitDetails oMDetails=new OrgUnitDetails();
      Layout oMDetailsLayout=new Layout();
      oMDetailsLayout.setColumnsCount(1);
      oMDetailsLayout.setRowsCount(4);
      oMDetails.setLayout(oMDetailsLayout);
      oMDetails.setOrgUnitModel(oM);
      LayoutGroup detailsGroup=new LayoutGroup();
      detailsGroup.setTitle(""String_Node_Str"");
      detailsGroup.setColumn(0);
      detailsGroup.setRow(0);
      detailsGroup.setParentLayout(oMDetailsLayout);
      int order=0;
      for (      DefaultFlexibleElementType e : DefaultFlexibleElementType.values()) {
        if (!DefaultFlexibleElementType.OWNER.equals(e) && !DefaultFlexibleElementType.START_DATE.equals(e) && !DefaultFlexibleElementType.END_DATE.equals(e)&& !(DefaultFlexibleElementType.BUDGET.equals(e) && Boolean.FALSE.equals(oM.getHasBudget()))) {
          DefaultFlexibleElement defaultElement=new DefaultFlexibleElement();
          defaultElement.setType(e);
          defaultElement.setValidates(false);
          defaultElement.setAmendable(false);
          em.persist(defaultElement);
          LayoutConstraint defaultLayoutConstraint=new LayoutConstraint();
          defaultLayoutConstraint.setParentLayoutGroup(detailsGroup);
          defaultLayoutConstraint.setElement(defaultElement);
          defaultLayoutConstraint.setSortOrder(order++);
          detailsGroup.addConstraint(defaultLayoutConstraint);
        }
      }
      List<LayoutGroup> detailsGroups=new ArrayList<LayoutGroup>();
      detailsGroups.add(detailsGroup);
      oMDetailsLayout.setGroups(detailsGroups);
      OrgUnitBanner oMBanner=new OrgUnitBanner();
      Layout oMBannerLayout=new Layout();
      oMBannerLayout.setColumnsCount(3);
      oMBannerLayout.setRowsCount(2);
      oMBanner.setLayout(oMBannerLayout);
      oMBanner.setOrgUnitModel(oM);
      List<LayoutGroup> bannerGroups=new ArrayList<LayoutGroup>();
      for (int i=0; i < 3; i++) {
        for (int j=0; j < 2; j++) {
          LayoutGroup bannerGroup=new LayoutGroup();
          bannerGroup.setColumn(i);
          bannerGroup.setRow(j);
          bannerGroup.setParentLayout(oMBannerLayout);
          bannerGroups.add(bannerGroup);
        }
      }
      oMBannerLayout.setGroups(bannerGroups);
      oM.setDetails(oMDetails);
      oM.setBanner(oMBanner);
      em.persist(oM);
      return mapper.map(oM,OrgUnitModelDTO.class);
    }
  }
  return null;
}","@Override public Object create(User user,PropertyMap properties){
  orgUnitModel=(OrgUnitModelDTO)properties.get(AdminUtil.ADMIN_ORG_UNIT_MODEL);
  if (orgUnitModel != null && ProjectModelStatus.DRAFT.equals(orgUnitModel.getStatus())) {
    if (orgUnitModel.getId() != -1) {
      update(user,orgUnitModel,properties);
      if (modelToUpdate != null) {
        OrgUnitModelDTO orgUnitDTOUpdated=mapper.map(modelToUpdate,OrgUnitModelDTO.class);
        return orgUnitDTOUpdated;
      }
    }
 else {
      OrgUnitModel oM=createOrgUnitModel(null,properties,user);
      OrgUnitDetails oMDetails=new OrgUnitDetails();
      Layout oMDetailsLayout=new Layout();
      oMDetailsLayout.setColumnsCount(1);
      oMDetailsLayout.setRowsCount(1);
      oMDetails.setLayout(oMDetailsLayout);
      oMDetails.setOrgUnitModel(oM);
      LayoutGroup detailsGroup=new LayoutGroup();
      detailsGroup.setTitle(""String_Node_Str"");
      detailsGroup.setColumn(0);
      detailsGroup.setRow(0);
      detailsGroup.setParentLayout(oMDetailsLayout);
      int order=0;
      for (      DefaultFlexibleElementType e : DefaultFlexibleElementType.values()) {
        if (!DefaultFlexibleElementType.OWNER.equals(e) && !DefaultFlexibleElementType.START_DATE.equals(e) && !DefaultFlexibleElementType.END_DATE.equals(e)&& !(DefaultFlexibleElementType.BUDGET.equals(e) && Boolean.FALSE.equals(oM.getHasBudget()))) {
          DefaultFlexibleElement defaultElement=new DefaultFlexibleElement();
          defaultElement.setType(e);
          defaultElement.setValidates(false);
          defaultElement.setAmendable(false);
          em.persist(defaultElement);
          LayoutConstraint defaultLayoutConstraint=new LayoutConstraint();
          defaultLayoutConstraint.setParentLayoutGroup(detailsGroup);
          defaultLayoutConstraint.setElement(defaultElement);
          defaultLayoutConstraint.setSortOrder(order++);
          detailsGroup.addConstraint(defaultLayoutConstraint);
        }
      }
      List<LayoutGroup> detailsGroups=new ArrayList<LayoutGroup>();
      detailsGroups.add(detailsGroup);
      oMDetailsLayout.setGroups(detailsGroups);
      OrgUnitBanner oMBanner=new OrgUnitBanner();
      Layout oMBannerLayout=new Layout();
      oMBannerLayout.setColumnsCount(3);
      oMBannerLayout.setRowsCount(2);
      oMBanner.setLayout(oMBannerLayout);
      oMBanner.setOrgUnitModel(oM);
      List<LayoutGroup> bannerGroups=new ArrayList<LayoutGroup>();
      for (int i=0; i < 3; i++) {
        for (int j=0; j < 2; j++) {
          LayoutGroup bannerGroup=new LayoutGroup();
          bannerGroup.setColumn(i);
          bannerGroup.setRow(j);
          bannerGroup.setParentLayout(oMBannerLayout);
          bannerGroups.add(bannerGroup);
        }
      }
      oMBannerLayout.setGroups(bannerGroups);
      oM.setDetails(oMDetails);
      oM.setBanner(oMBanner);
      em.persist(oM);
      return mapper.map(oM,OrgUnitModelDTO.class);
    }
  }
  return null;
}",0.9996632996632996
35666,"@Override public Object create(User user,PropertyMap properties){
  projectModel=(ProjectModelDTO)properties.get(AdminUtil.ADMIN_PROJECT_MODEL);
  if (projectModel != null && ProjectModelStatus.DRAFT.equals(projectModel.getStatus())) {
    if (projectModel.getId() != -1) {
      update(user,projectModel,properties);
      if (modelToUpdate != null) {
        ProjectModelDTO projectDTOUpdated=mapper.map(modelToUpdate,ProjectModelDTO.class);
        return projectDTOUpdated;
      }
    }
 else {
      ProjectModel pM=new ProjectModel();
      String pMName=(String)properties.get(AdminUtil.PROP_PM_NAME);
      ProjectModelType pMUse=(ProjectModelType)properties.get(AdminUtil.PROP_PM_USE);
      pM.setName(pMName);
      pM.setStatus(ProjectModelStatus.DRAFT);
      List<ProjectModelVisibility> visibilities=new ArrayList<ProjectModelVisibility>();
      ProjectModelVisibility v=new ProjectModelVisibility();
      v.setModel(pM);
      v.setType(pMUse);
      v.setOrganization(user.getOrganization());
      visibilities.add(v);
      pM.setVisibilities(visibilities);
      ProjectDetails pMDetails=new ProjectDetails();
      Layout pMDetailsLayout=new Layout();
      pMDetailsLayout.setColumnsCount(1);
      pMDetailsLayout.setRowsCount(4);
      pMDetails.setLayout(pMDetailsLayout);
      pMDetails.setProjectModel(pM);
      LayoutGroup detailsGroup=new LayoutGroup();
      detailsGroup.setTitle(""String_Node_Str"");
      detailsGroup.setColumn(0);
      detailsGroup.setRow(0);
      detailsGroup.setParentLayout(pMDetailsLayout);
      int order=0;
      for (      DefaultFlexibleElementType e : DefaultFlexibleElementType.values()) {
        DefaultFlexibleElement defaultElement=new DefaultFlexibleElement();
        defaultElement.setType(e);
        defaultElement.setValidates(false);
        defaultElement.setAmendable(false);
        em.persist(defaultElement);
        LayoutConstraint defaultLayoutConstraint=new LayoutConstraint();
        defaultLayoutConstraint.setParentLayoutGroup(detailsGroup);
        defaultLayoutConstraint.setElement(defaultElement);
        defaultLayoutConstraint.setSortOrder(order++);
        detailsGroup.addConstraint(defaultLayoutConstraint);
      }
      List<LayoutGroup> detailsGroups=new ArrayList<LayoutGroup>();
      detailsGroups.add(detailsGroup);
      pMDetailsLayout.setGroups(detailsGroups);
      ProjectBanner pMBanner=new ProjectBanner();
      Layout pMBannerLayout=new Layout();
      pMBannerLayout.setColumnsCount(3);
      pMBannerLayout.setRowsCount(2);
      pMBanner.setLayout(pMBannerLayout);
      pMBanner.setProjectModel(pM);
      List<LayoutGroup> bannerGroups=new ArrayList<LayoutGroup>();
      for (int i=0; i < 3; i++) {
        for (int j=0; j < 2; j++) {
          LayoutGroup bannerGroup=new LayoutGroup();
          bannerGroup.setColumn(i);
          bannerGroup.setRow(j);
          bannerGroup.setParentLayout(pMBannerLayout);
          bannerGroups.add(bannerGroup);
        }
      }
      pMBannerLayout.setGroups(bannerGroups);
      pM.setProjectDetails(pMDetails);
      pM.setProjectBanner(pMBanner);
      em.persist(pM);
      PhaseModel defaultRootPhase=new PhaseModel();
      defaultRootPhase.setName(""String_Node_Str"");
      defaultRootPhase.setParentProjectModel(pM);
      defaultRootPhase.setDisplayOrder(0);
      Layout phaseLayout=new Layout();
      phaseLayout.setColumnsCount(1);
      phaseLayout.setRowsCount(4);
      LayoutGroup phaseGroup=new LayoutGroup();
      phaseGroup.setTitle(""String_Node_Str"");
      phaseGroup.setColumn(0);
      phaseGroup.setRow(0);
      phaseGroup.setParentLayout(phaseLayout);
      List<LayoutGroup> phaseGroups=new ArrayList<LayoutGroup>();
      phaseGroups.add(phaseGroup);
      phaseLayout.setGroups(phaseGroups);
      defaultRootPhase.setLayout(phaseLayout);
      em.persist(defaultRootPhase);
      LogFrameModel defaultLogFrame=createLogFrame(pM);
      pM.setRootPhase(defaultRootPhase);
      pM.setLogFrameModel(defaultLogFrame);
      pM=em.merge(pM);
      return mapper.map(pM,ProjectModelDTO.class);
    }
  }
  return null;
}","@Override public Object create(User user,PropertyMap properties){
  projectModel=(ProjectModelDTO)properties.get(AdminUtil.ADMIN_PROJECT_MODEL);
  if (projectModel != null && ProjectModelStatus.DRAFT.equals(projectModel.getStatus())) {
    if (projectModel.getId() != -1) {
      update(user,projectModel,properties);
      if (modelToUpdate != null) {
        ProjectModelDTO projectDTOUpdated=mapper.map(modelToUpdate,ProjectModelDTO.class);
        return projectDTOUpdated;
      }
    }
 else {
      ProjectModel pM=new ProjectModel();
      String pMName=(String)properties.get(AdminUtil.PROP_PM_NAME);
      ProjectModelType pMUse=(ProjectModelType)properties.get(AdminUtil.PROP_PM_USE);
      pM.setName(pMName);
      pM.setStatus(ProjectModelStatus.DRAFT);
      List<ProjectModelVisibility> visibilities=new ArrayList<ProjectModelVisibility>();
      ProjectModelVisibility v=new ProjectModelVisibility();
      v.setModel(pM);
      v.setType(pMUse);
      v.setOrganization(user.getOrganization());
      visibilities.add(v);
      pM.setVisibilities(visibilities);
      ProjectDetails pMDetails=new ProjectDetails();
      Layout pMDetailsLayout=new Layout();
      pMDetailsLayout.setColumnsCount(1);
      pMDetailsLayout.setRowsCount(1);
      pMDetails.setLayout(pMDetailsLayout);
      pMDetails.setProjectModel(pM);
      LayoutGroup detailsGroup=new LayoutGroup();
      detailsGroup.setTitle(""String_Node_Str"");
      detailsGroup.setColumn(0);
      detailsGroup.setRow(0);
      detailsGroup.setParentLayout(pMDetailsLayout);
      int order=0;
      for (      DefaultFlexibleElementType e : DefaultFlexibleElementType.values()) {
        DefaultFlexibleElement defaultElement=new DefaultFlexibleElement();
        defaultElement.setType(e);
        defaultElement.setValidates(false);
        defaultElement.setAmendable(false);
        em.persist(defaultElement);
        LayoutConstraint defaultLayoutConstraint=new LayoutConstraint();
        defaultLayoutConstraint.setParentLayoutGroup(detailsGroup);
        defaultLayoutConstraint.setElement(defaultElement);
        defaultLayoutConstraint.setSortOrder(order++);
        detailsGroup.addConstraint(defaultLayoutConstraint);
      }
      List<LayoutGroup> detailsGroups=new ArrayList<LayoutGroup>();
      detailsGroups.add(detailsGroup);
      pMDetailsLayout.setGroups(detailsGroups);
      ProjectBanner pMBanner=new ProjectBanner();
      Layout pMBannerLayout=new Layout();
      pMBannerLayout.setColumnsCount(3);
      pMBannerLayout.setRowsCount(2);
      pMBanner.setLayout(pMBannerLayout);
      pMBanner.setProjectModel(pM);
      List<LayoutGroup> bannerGroups=new ArrayList<LayoutGroup>();
      for (int i=0; i < 3; i++) {
        for (int j=0; j < 2; j++) {
          LayoutGroup bannerGroup=new LayoutGroup();
          bannerGroup.setColumn(i);
          bannerGroup.setRow(j);
          bannerGroup.setParentLayout(pMBannerLayout);
          bannerGroups.add(bannerGroup);
        }
      }
      pMBannerLayout.setGroups(bannerGroups);
      pM.setProjectDetails(pMDetails);
      pM.setProjectBanner(pMBanner);
      em.persist(pM);
      PhaseModel defaultRootPhase=new PhaseModel();
      defaultRootPhase.setName(""String_Node_Str"");
      defaultRootPhase.setParentProjectModel(pM);
      defaultRootPhase.setDisplayOrder(0);
      Layout phaseLayout=new Layout();
      phaseLayout.setColumnsCount(1);
      phaseLayout.setRowsCount(1);
      LayoutGroup phaseGroup=new LayoutGroup();
      phaseGroup.setTitle(""String_Node_Str"");
      phaseGroup.setColumn(0);
      phaseGroup.setRow(0);
      phaseGroup.setParentLayout(phaseLayout);
      List<LayoutGroup> phaseGroups=new ArrayList<LayoutGroup>();
      phaseGroups.add(phaseGroup);
      phaseLayout.setGroups(phaseGroups);
      defaultRootPhase.setLayout(phaseLayout);
      em.persist(defaultRootPhase);
      LogFrameModel defaultLogFrame=createLogFrame(pM);
      pM.setRootPhase(defaultRootPhase);
      pM.setLogFrameModel(defaultLogFrame);
      pM=em.merge(pM);
      return mapper.map(pM,ProjectModelDTO.class);
    }
  }
  return null;
}",0.9995138551288284
35667,"@Override public void update(User user,Object entity,PropertyMap changes){
  ProjectModel model=null;
  if (projectModel != null) {
    model=em.find(ProjectModel.class,new Integer(projectModel.getId()).longValue());
  }
  if (model != null) {
    if (changes.get(AdminUtil.PROP_PM_NAME) != null)     model.setName((String)changes.get(AdminUtil.PROP_PM_NAME));
    if (changes.get(AdminUtil.PROP_PM_STATUS) != null)     model.setStatus((ProjectModelStatus)changes.get(AdminUtil.PROP_PM_STATUS));
    if (changes.get(AdminUtil.PROP_PM_USE) != null) {
      List<ProjectModelVisibility> visibilities=model.getVisibilities();
      for (      ProjectModelVisibility v : visibilities) {
        if (user.getOrganization().equals(v.getOrganization())) {
          v.setType((ProjectModelType)changes.get(AdminUtil.PROP_PM_USE));
          em.merge(v);
        }
      }
    }
    model=em.merge(model);
    if (changes.get(AdminUtil.PROP_LOG_FRAME) != null && (Boolean)changes.get(AdminUtil.PROP_LOG_FRAME)) {
      LogFrameModel logFrameModel=null;
      if (model.getLogFrameModel() != null) {
        logFrameModel=em.find(LogFrameModel.class,model.getLogFrameModel().getId());
      }
 else {
        logFrameModel=new LogFrameModel();
        logFrameModel.setProjectModel(model);
      }
      if (changes.get(AdminUtil.PROP_LOG_FRAME_NAME) != null)       log_frame_name=(String)changes.get(AdminUtil.PROP_LOG_FRAME_NAME);
      if (changes.get(AdminUtil.PROP_OBJ_MAX) != null)       objectives_max=(Integer)changes.get(AdminUtil.PROP_OBJ_MAX);
      if (changes.get(AdminUtil.PROP_OBJ_MAX_PER_GROUP) != null)       objectives_max_per_group=(Integer)changes.get(AdminUtil.PROP_OBJ_MAX_PER_GROUP);
      if (changes.get(AdminUtil.PROP_OBJ_ENABLE_GROUPS) != null)       objectives_enable_groups=(Boolean)changes.get(AdminUtil.PROP_OBJ_ENABLE_GROUPS);
      if (changes.get(AdminUtil.PROP_OBJ_MAX_GROUPS) != null)       objectives_max_groups=(Integer)changes.get(AdminUtil.PROP_OBJ_MAX_GROUPS);
      if (changes.get(AdminUtil.PROP_A_MAX) != null)       activities_max=(Integer)changes.get(AdminUtil.PROP_A_MAX);
      if (changes.get(AdminUtil.PROP_A_ENABLE_GROUPS) != null)       activities_enable_groups=(Boolean)changes.get(AdminUtil.PROP_A_ENABLE_GROUPS);
      if (changes.get(AdminUtil.PROP_A_MAX_PER_RESULT) != null)       activities_max_per_result=(Integer)changes.get(AdminUtil.PROP_A_MAX_PER_RESULT);
      if (changes.get(AdminUtil.PROP_A_MAX_GROUPS) != null)       activities_max_groups=(Integer)changes.get(AdminUtil.PROP_A_MAX_GROUPS);
      if (changes.get(AdminUtil.PROP_A_MAX_PER_GROUP) != null)       activities_max_per_group=(Integer)changes.get(AdminUtil.PROP_A_MAX_PER_GROUP);
      if (changes.get(AdminUtil.PROP_R_MAX) != null)       results_max=(Integer)changes.get(AdminUtil.PROP_R_MAX);
      if (changes.get(AdminUtil.PROP_R_ENABLE_GROUPS) != null)       results_enable_groups=(Boolean)changes.get(AdminUtil.PROP_R_ENABLE_GROUPS);
      if (changes.get(AdminUtil.PROP_R_MAX_PER_OBJ) != null)       results_max_per_obj=(Integer)changes.get(AdminUtil.PROP_R_MAX_PER_OBJ);
      if (changes.get(AdminUtil.PROP_R_MAX_GROUPS) != null)       results_max_groups=(Integer)changes.get(AdminUtil.PROP_R_MAX_GROUPS);
      if (changes.get(AdminUtil.PROP_R_MAX_PER_GROUP) != null)       results_max_per_group=(Integer)changes.get(AdminUtil.PROP_R_MAX_PER_GROUP);
      if (changes.get(AdminUtil.PROP_P_MAX) != null)       prerequisites_max=(Integer)changes.get(AdminUtil.PROP_P_MAX);
      if (changes.get(AdminUtil.PROP_P_ENABLE_GROUPS) != null)       prerequisites_enable_groups=(Boolean)changes.get(AdminUtil.PROP_P_ENABLE_GROUPS);
      if (changes.get(AdminUtil.PROP_P_MAX_GROUPS) != null)       prerequisites_max_groups=(Integer)changes.get(AdminUtil.PROP_P_MAX_GROUPS);
      if (changes.get(AdminUtil.PROP_P_MAX_PER_GROUP) != null)       prerequisites_max_per_group=(Integer)changes.get(AdminUtil.PROP_P_MAX_PER_GROUP);
      logFrameModel.setName(log_frame_name);
      logFrameModel.setActivitiesGroupsMax(activities_max_groups);
      logFrameModel.setActivitiesMax(activities_max);
      logFrameModel.setActivitiesPerExpectedResultMax(activities_max_per_result);
      logFrameModel.setActivitiesPerGroupMax(activities_max_per_group);
      logFrameModel.setEnableActivitiesGroups(activities_enable_groups);
      logFrameModel.setEnableExpectedResultsGroups(results_enable_groups);
      logFrameModel.setExpectedResultsGroupsMax(results_max_groups);
      logFrameModel.setExpectedResultsMax(results_max);
      logFrameModel.setExpectedResultsPerGroupMax(results_max_per_group);
      logFrameModel.setExpectedResultsPerSpecificObjectiveMax(results_max_per_obj);
      logFrameModel.setSpecificObjectivesGroupsMax(objectives_max_groups);
      logFrameModel.setEnableSpecificObjectivesGroups(objectives_enable_groups);
      logFrameModel.setSpecificObjectivesMax(objectives_max);
      logFrameModel.setSpecificObjectivesPerGroupMax(objectives_max_per_group);
      logFrameModel.setPrerequisitesGroupsMax(prerequisites_max_groups);
      logFrameModel.setEnablePrerequisitesGroups(prerequisites_enable_groups);
      logFrameModel.setPrerequisitesMax(prerequisites_max);
      logFrameModel.setPrerequisitesPerGroupMax(prerequisites_max_per_group);
      if (model.getLogFrameModel() != null) {
        logFrameModel=em.merge(logFrameModel);
      }
 else {
        em.persist(logFrameModel);
      }
      modelToUpdate=model;
      modelToUpdate.setLogFrameModel(logFrameModel);
    }
    if (changes.get(AdminUtil.PROP_FX_FLEXIBLE_ELEMENT) != null) {
      ModelUtil.persistFlexibleElement(em,mapper,changes,model);
      modelToUpdate=em.find(ProjectModel.class,model.getId());
    }
    final PhaseModelDTO phaseDTOToSave=(PhaseModelDTO)changes.get(AdminUtil.PROP_PHASE_MODEL);
    final Integer displayOrder=(Integer)changes.get(AdminUtil.PROP_PHASE_ORDER);
    final Boolean root=(Boolean)changes.get(AdminUtil.PROP_PHASE_ROOT);
    final Integer numRows=(Integer)changes.get(AdminUtil.PROP_PHASE_ROWS);
    final String guide=(String)changes.get(AdminUtil.PROP_PHASE_GUIDE);
    PhaseModel phaseToSave=new PhaseModel();
    if (phaseDTOToSave != null) {
      phaseToSave.setName(phaseDTOToSave.getName());
      if (displayOrder != null)       phaseToSave.setDisplayOrder(displayOrder);
      if (guide != null && !guide.isEmpty())       phaseToSave.setGuide(guide);
      for (      PhaseModelDTO sucDTO : phaseDTOToSave.getSuccessorsDTO()) {
        if (sucDTO.getId() != 0) {
          PhaseModel suc=em.find(PhaseModel.class,Long.valueOf(String.valueOf(sucDTO.getId())));
          phaseToSave.getSuccessors().add(suc);
        }
      }
      PhaseModel phaseFound=null;
      for (      PhaseModel phase : model.getPhases()) {
        if (phaseDTOToSave.getId() == phase.getId()) {
          phaseFound=phase;
        }
      }
      if (phaseFound != null) {
        phaseFound.setName(phaseToSave.getName());
        phaseFound.setSuccessors(phaseToSave.getSuccessors());
        if (numRows != null)         phaseFound.getLayout().setRowsCount(numRows);
        if (displayOrder != null)         phaseFound.setDisplayOrder(displayOrder);
        if (guide != null && !guide.isEmpty())         phaseFound.setGuide(guide);
        phaseToSave=em.merge(phaseFound);
      }
 else {
        phaseToSave.setParentProjectModel(model);
        Layout phaseLayout=new Layout();
        phaseLayout.setColumnsCount(1);
        if (numRows != null)         phaseLayout.setRowsCount(numRows);
 else         phaseLayout.setRowsCount(4);
        LayoutGroup phaseGroup=new LayoutGroup();
        phaseGroup.setTitle(phaseToSave.getName() + ""String_Node_Str"");
        phaseGroup.setColumn(0);
        phaseGroup.setRow(0);
        phaseGroup.setParentLayout(phaseLayout);
        List<LayoutGroup> phaseGroups=new ArrayList<LayoutGroup>();
        phaseGroups.add(phaseGroup);
        phaseLayout.setGroups(phaseGroups);
        phaseToSave.setLayout(phaseLayout);
        em.persist(phaseToSave);
      }
      model.addPhase(phaseToSave);
      if (root != null && root)       model.setRootPhase(phaseToSave);
 else       if (root != null && !root && phaseFound != null && model.getRootPhase().getId() == phaseFound.getId())       model.setRootPhase(null);
      modelToUpdate=em.merge(model);
    }
  }
}","@Override public void update(User user,Object entity,PropertyMap changes){
  ProjectModel model=null;
  if (projectModel != null) {
    model=em.find(ProjectModel.class,new Integer(projectModel.getId()).longValue());
  }
  if (model != null) {
    if (changes.get(AdminUtil.PROP_PM_NAME) != null)     model.setName((String)changes.get(AdminUtil.PROP_PM_NAME));
    if (changes.get(AdminUtil.PROP_PM_STATUS) != null)     model.setStatus((ProjectModelStatus)changes.get(AdminUtil.PROP_PM_STATUS));
    if (changes.get(AdminUtil.PROP_PM_USE) != null) {
      List<ProjectModelVisibility> visibilities=model.getVisibilities();
      for (      ProjectModelVisibility v : visibilities) {
        if (user.getOrganization().equals(v.getOrganization())) {
          v.setType((ProjectModelType)changes.get(AdminUtil.PROP_PM_USE));
          em.merge(v);
        }
      }
    }
    model=em.merge(model);
    if (changes.get(AdminUtil.PROP_LOG_FRAME) != null && (Boolean)changes.get(AdminUtil.PROP_LOG_FRAME)) {
      LogFrameModel logFrameModel=null;
      if (model.getLogFrameModel() != null) {
        logFrameModel=em.find(LogFrameModel.class,model.getLogFrameModel().getId());
      }
 else {
        logFrameModel=new LogFrameModel();
        logFrameModel.setProjectModel(model);
      }
      if (changes.get(AdminUtil.PROP_LOG_FRAME_NAME) != null)       log_frame_name=(String)changes.get(AdminUtil.PROP_LOG_FRAME_NAME);
      if (changes.get(AdminUtil.PROP_OBJ_MAX) != null)       objectives_max=(Integer)changes.get(AdminUtil.PROP_OBJ_MAX);
      if (changes.get(AdminUtil.PROP_OBJ_MAX_PER_GROUP) != null)       objectives_max_per_group=(Integer)changes.get(AdminUtil.PROP_OBJ_MAX_PER_GROUP);
      if (changes.get(AdminUtil.PROP_OBJ_ENABLE_GROUPS) != null)       objectives_enable_groups=(Boolean)changes.get(AdminUtil.PROP_OBJ_ENABLE_GROUPS);
      if (changes.get(AdminUtil.PROP_OBJ_MAX_GROUPS) != null)       objectives_max_groups=(Integer)changes.get(AdminUtil.PROP_OBJ_MAX_GROUPS);
      if (changes.get(AdminUtil.PROP_A_MAX) != null)       activities_max=(Integer)changes.get(AdminUtil.PROP_A_MAX);
      if (changes.get(AdminUtil.PROP_A_ENABLE_GROUPS) != null)       activities_enable_groups=(Boolean)changes.get(AdminUtil.PROP_A_ENABLE_GROUPS);
      if (changes.get(AdminUtil.PROP_A_MAX_PER_RESULT) != null)       activities_max_per_result=(Integer)changes.get(AdminUtil.PROP_A_MAX_PER_RESULT);
      if (changes.get(AdminUtil.PROP_A_MAX_GROUPS) != null)       activities_max_groups=(Integer)changes.get(AdminUtil.PROP_A_MAX_GROUPS);
      if (changes.get(AdminUtil.PROP_A_MAX_PER_GROUP) != null)       activities_max_per_group=(Integer)changes.get(AdminUtil.PROP_A_MAX_PER_GROUP);
      if (changes.get(AdminUtil.PROP_R_MAX) != null)       results_max=(Integer)changes.get(AdminUtil.PROP_R_MAX);
      if (changes.get(AdminUtil.PROP_R_ENABLE_GROUPS) != null)       results_enable_groups=(Boolean)changes.get(AdminUtil.PROP_R_ENABLE_GROUPS);
      if (changes.get(AdminUtil.PROP_R_MAX_PER_OBJ) != null)       results_max_per_obj=(Integer)changes.get(AdminUtil.PROP_R_MAX_PER_OBJ);
      if (changes.get(AdminUtil.PROP_R_MAX_GROUPS) != null)       results_max_groups=(Integer)changes.get(AdminUtil.PROP_R_MAX_GROUPS);
      if (changes.get(AdminUtil.PROP_R_MAX_PER_GROUP) != null)       results_max_per_group=(Integer)changes.get(AdminUtil.PROP_R_MAX_PER_GROUP);
      if (changes.get(AdminUtil.PROP_P_MAX) != null)       prerequisites_max=(Integer)changes.get(AdminUtil.PROP_P_MAX);
      if (changes.get(AdminUtil.PROP_P_ENABLE_GROUPS) != null)       prerequisites_enable_groups=(Boolean)changes.get(AdminUtil.PROP_P_ENABLE_GROUPS);
      if (changes.get(AdminUtil.PROP_P_MAX_GROUPS) != null)       prerequisites_max_groups=(Integer)changes.get(AdminUtil.PROP_P_MAX_GROUPS);
      if (changes.get(AdminUtil.PROP_P_MAX_PER_GROUP) != null)       prerequisites_max_per_group=(Integer)changes.get(AdminUtil.PROP_P_MAX_PER_GROUP);
      logFrameModel.setName(log_frame_name);
      logFrameModel.setActivitiesGroupsMax(activities_max_groups);
      logFrameModel.setActivitiesMax(activities_max);
      logFrameModel.setActivitiesPerExpectedResultMax(activities_max_per_result);
      logFrameModel.setActivitiesPerGroupMax(activities_max_per_group);
      logFrameModel.setEnableActivitiesGroups(activities_enable_groups);
      logFrameModel.setEnableExpectedResultsGroups(results_enable_groups);
      logFrameModel.setExpectedResultsGroupsMax(results_max_groups);
      logFrameModel.setExpectedResultsMax(results_max);
      logFrameModel.setExpectedResultsPerGroupMax(results_max_per_group);
      logFrameModel.setExpectedResultsPerSpecificObjectiveMax(results_max_per_obj);
      logFrameModel.setSpecificObjectivesGroupsMax(objectives_max_groups);
      logFrameModel.setEnableSpecificObjectivesGroups(objectives_enable_groups);
      logFrameModel.setSpecificObjectivesMax(objectives_max);
      logFrameModel.setSpecificObjectivesPerGroupMax(objectives_max_per_group);
      logFrameModel.setPrerequisitesGroupsMax(prerequisites_max_groups);
      logFrameModel.setEnablePrerequisitesGroups(prerequisites_enable_groups);
      logFrameModel.setPrerequisitesMax(prerequisites_max);
      logFrameModel.setPrerequisitesPerGroupMax(prerequisites_max_per_group);
      if (model.getLogFrameModel() != null) {
        logFrameModel=em.merge(logFrameModel);
      }
 else {
        em.persist(logFrameModel);
      }
      modelToUpdate=model;
      modelToUpdate.setLogFrameModel(logFrameModel);
    }
    if (changes.get(AdminUtil.PROP_FX_FLEXIBLE_ELEMENT) != null) {
      ModelUtil.persistFlexibleElement(em,mapper,changes,model);
      modelToUpdate=em.find(ProjectModel.class,model.getId());
    }
    final PhaseModelDTO phaseDTOToSave=(PhaseModelDTO)changes.get(AdminUtil.PROP_PHASE_MODEL);
    final Integer displayOrder=(Integer)changes.get(AdminUtil.PROP_PHASE_ORDER);
    final Boolean root=(Boolean)changes.get(AdminUtil.PROP_PHASE_ROOT);
    final Integer numRows=(Integer)changes.get(AdminUtil.PROP_PHASE_ROWS);
    final String guide=(String)changes.get(AdminUtil.PROP_PHASE_GUIDE);
    PhaseModel phaseToSave=new PhaseModel();
    if (phaseDTOToSave != null) {
      phaseToSave.setName(phaseDTOToSave.getName());
      if (displayOrder != null)       phaseToSave.setDisplayOrder(displayOrder);
      if (guide != null && !guide.isEmpty())       phaseToSave.setGuide(guide);
      for (      PhaseModelDTO sucDTO : phaseDTOToSave.getSuccessorsDTO()) {
        if (sucDTO.getId() != 0) {
          PhaseModel suc=em.find(PhaseModel.class,Long.valueOf(String.valueOf(sucDTO.getId())));
          phaseToSave.getSuccessors().add(suc);
        }
      }
      PhaseModel phaseFound=null;
      for (      PhaseModel phase : model.getPhases()) {
        if (phaseDTOToSave.getId() == phase.getId()) {
          phaseFound=phase;
        }
      }
      if (phaseFound != null) {
        phaseFound.setName(phaseToSave.getName());
        phaseFound.setSuccessors(phaseToSave.getSuccessors());
        if (numRows != null)         phaseFound.getLayout().setRowsCount(numRows);
        if (displayOrder != null)         phaseFound.setDisplayOrder(displayOrder);
        if (guide != null && !guide.isEmpty())         phaseFound.setGuide(guide);
        phaseToSave=em.merge(phaseFound);
      }
 else {
        phaseToSave.setParentProjectModel(model);
        Layout phaseLayout=new Layout();
        phaseLayout.setColumnsCount(1);
        if (numRows != null)         phaseLayout.setRowsCount(numRows);
 else         phaseLayout.setRowsCount(1);
        LayoutGroup phaseGroup=new LayoutGroup();
        phaseGroup.setTitle(phaseToSave.getName() + ""String_Node_Str"");
        phaseGroup.setColumn(0);
        phaseGroup.setRow(0);
        phaseGroup.setParentLayout(phaseLayout);
        List<LayoutGroup> phaseGroups=new ArrayList<LayoutGroup>();
        phaseGroups.add(phaseGroup);
        phaseLayout.setGroups(phaseGroups);
        phaseToSave.setLayout(phaseLayout);
        em.persist(phaseToSave);
      }
      model.addPhase(phaseToSave);
      if (root != null && root)       model.setRootPhase(phaseToSave);
 else       if (root != null && !root && phaseFound != null && model.getRootPhase().getId() == phaseFound.getId())       model.setRootPhase(null);
      modelToUpdate=em.merge(model);
    }
  }
}",0.9998801534036432
35668,"@SuppressWarnings(""String_Node_Str"") public static void persistFlexibleElement(EntityManager em,Mapper mapper,PropertyMap changes,Object model){
  FlexibleElementDTO flexibleEltDTO=null;
  if (changes.get(AdminUtil.PROP_FX_FLEXIBLE_ELEMENT) != null) {
    String name=changes.get(AdminUtil.PROP_FX_NAME);
    ElementTypeEnum type=(ElementTypeEnum)changes.get(AdminUtil.PROP_FX_TYPE);
    Boolean isCompulsory=null;
    if (changes.get(AdminUtil.PROP_FX_IS_COMPULSARY) != null)     isCompulsory=(Boolean)changes.get(AdminUtil.PROP_FX_IS_COMPULSARY);
    PrivacyGroupDTO pg=null;
    if (changes.get(AdminUtil.PROP_FX_PRIVACY_GROUP) != null)     pg=(PrivacyGroupDTO)changes.get(AdminUtil.PROP_FX_PRIVACY_GROUP);
    Boolean amend=null;
    if (changes.get(AdminUtil.PROP_FX_AMENDABLE) != null)     amend=(Boolean)changes.get(AdminUtil.PROP_FX_AMENDABLE);
    LayoutGroupDTO group=null;
    if (changes.get(AdminUtil.PROP_FX_GROUP) != null)     group=(LayoutGroupDTO)changes.get(AdminUtil.PROP_FX_GROUP);
    Integer order=null;
    if (changes.get(AdminUtil.PROP_FX_ORDER_IN_GROUP) != null)     order=(Integer)changes.get(AdminUtil.PROP_FX_ORDER_IN_GROUP);
    Boolean inBanner=null;
    if (changes.get(AdminUtil.PROP_FX_IN_BANNER) != null)     inBanner=(Boolean)changes.get(AdminUtil.PROP_FX_IN_BANNER);
    Integer posB=null;
    if (changes.get(AdminUtil.PROP_FX_POS_IN_BANNER) != null) {
      posB=(Integer)changes.get(AdminUtil.PROP_FX_POS_IN_BANNER);
      posB=posB - 1;
    }
    HashMap<String,Object> oldLayoutFields=(HashMap<String,Object>)changes.get(AdminUtil.PROP_FX_OLD_FIELDS);
    LayoutConstraintDTO oldLayoutConstraintDTO=(LayoutConstraintDTO)oldLayoutFields.get(AdminUtil.PROP_FX_LC);
    LayoutConstraintDTO oldBannerLayoutConstraintDTO=(LayoutConstraintDTO)oldLayoutFields.get(AdminUtil.PROP_FX_LC_BANNER);
    ElementTypeEnum oldType=(ElementTypeEnum)oldLayoutFields.get(AdminUtil.PROP_FX_TYPE);
    Integer oldOrder=(Integer)oldLayoutFields.get(AdminUtil.PROP_FX_ORDER_IN_GROUP);
    Character textType=(Character)changes.get(AdminUtil.PROP_FX_TEXT_TYPE);
    Integer maxLimit=null;
    if (changes.get(AdminUtil.PROP_FX_MAX_LIMIT) != null)     maxLimit=(Integer)changes.get(AdminUtil.PROP_FX_MAX_LIMIT);
    Integer minLimit=null;
    if (changes.get(AdminUtil.PROP_FX_MIN_LIMIT) != null)     minLimit=(Integer)changes.get(AdminUtil.PROP_FX_MIN_LIMIT);
    Integer length=null;
    if (changes.get(AdminUtil.PROP_FX_LENGTH) != null)     length=(Integer)changes.get(AdminUtil.PROP_FX_LENGTH);
    Boolean decimal=null;
    if (changes.get(AdminUtil.PROP_FX_DECIMAL) != null)     decimal=(Boolean)changes.get(AdminUtil.PROP_FX_DECIMAL);
    ReportModelDTO reportModel=null;
    if (changes.get(AdminUtil.PROP_FX_REPORT_MODEL) != null)     reportModel=(ReportModelDTO)changes.get(AdminUtil.PROP_FX_REPORT_MODEL);
    Boolean isMultiple=null;
    if (changes.get(AdminUtil.PROP_FX_Q_MULTIPLE) != null)     isMultiple=(Boolean)changes.get(AdminUtil.PROP_FX_Q_MULTIPLE);
    CategoryTypeDTO category=null;
    if (changes.get(AdminUtil.PROP_FX_Q_CATEGORY) != null)     category=(CategoryTypeDTO)changes.get(AdminUtil.PROP_FX_Q_CATEGORY);
    List<String> qChoices=null;
    if (changes.get(AdminUtil.PROP_FX_Q_CHOICES) != null)     qChoices=(List<String>)changes.get(AdminUtil.PROP_FX_Q_CHOICES);
    flexibleEltDTO=(FlexibleElementDTO)changes.get(AdminUtil.PROP_FX_FLEXIBLE_ELEMENT);
    FlexibleElement flexibleElt=null;
    if (flexibleEltDTO.getId() != 0) {
      flexibleElt=em.find(FlexibleElement.class,new Integer(flexibleEltDTO.getId()).longValue());
    }
 else {
      flexibleElt=(FlexibleElement)createNewFlexibleElement(em,oldType,type,flexibleElt);
    }
    log.debug(""String_Node_Str"" + name + ""String_Node_Str""+ type+ ""String_Node_Str""+ group+ ""String_Node_Str""+ order+ ""String_Node_Str""+ inBanner+ ""String_Node_Str""+ posB+ ""String_Node_Str""+ isCompulsory+ ""String_Node_Str""+ pg+ ""String_Node_Str""+ amend+ ""String_Node_Str"");
    log.debug(""String_Node_Str"" + maxLimit + ""String_Node_Str""+ minLimit+ ""String_Node_Str""+ textType+ ""String_Node_Str""+ length+ ""String_Node_Str""+ decimal+ ""String_Node_Str""+ reportModel+ ""String_Node_Str"");
    Boolean basicChanges=false;
    if (flexibleElt != null) {
      if (name != null) {
        flexibleElt.setLabel(name);
        basicChanges=true;
      }
      if (amend != null) {
        flexibleElt.setAmendable(amend);
        basicChanges=true;
      }
      if (isCompulsory != null) {
        flexibleElt.setValidates(isCompulsory);
        basicChanges=true;
      }
      if (pg != null) {
        PrivacyGroup pgToPersist=em.find(PrivacyGroup.class,pg.getId());
        if (pgToPersist != null) {
          flexibleElt.setPrivacyGroup(pgToPersist);
          basicChanges=true;
        }
      }
      if (basicChanges && flexibleElt.getId() != null)       flexibleElt=em.merge(flexibleElt);
 else       em.persist(flexibleElt);
    }
    if (group != null) {
      LayoutGroup parentLayoutGroup=em.find(LayoutGroup.class,new Integer(group.getId()).longValue());
      LayoutConstraint newLayoutConstraint=new LayoutConstraint();
      if (parentLayoutGroup != null) {
        newLayoutConstraint.setElement(flexibleElt);
        newLayoutConstraint.setParentLayoutGroup(parentLayoutGroup);
        if (order != null)         newLayoutConstraint.setSortOrder(order);
        if (oldOrder != null)         newLayoutConstraint.setSortOrder(oldOrder);
        if (order == null && oldOrder == null)         newLayoutConstraint.setSortOrder(new Integer(parentLayoutGroup.getConstraints().size()));
        if (oldLayoutConstraintDTO != null) {
          newLayoutConstraint.setId(new Integer(oldLayoutConstraintDTO.getId()).longValue());
          newLayoutConstraint=em.merge(newLayoutConstraint);
        }
 else {
          em.persist(newLayoutConstraint);
        }
      }
    }
    if (inBanner != null) {
      if (inBanner) {
        if (model instanceof ProjectModel)         changeBanner(em,posB,(ProjectModel)model,flexibleElt);
 else         if (model instanceof OrgUnitModel)         changeBanner(em,posB,(OrgUnitModel)model,flexibleElt);
      }
 else {
        if (oldBannerLayoutConstraintDTO != null) {
          LayoutConstraint oldBannerLayoutConstraint=mapper.map(oldBannerLayoutConstraintDTO,LayoutConstraint.class);
          oldBannerLayoutConstraint=em.find(LayoutConstraint.class,oldBannerLayoutConstraint.getId());
          em.remove(oldBannerLayoutConstraint);
        }
      }
    }
 else {
      if (posB != null) {
        LayoutConstraint oldBannerLayoutConstraint=mapper.map(oldBannerLayoutConstraintDTO,LayoutConstraint.class);
        if (model instanceof ProjectModel)         changePositionInBanner(em,posB,(ProjectModel)model,flexibleElt,oldBannerLayoutConstraint);
 else         if (model instanceof OrgUnitModel)         changePositionInBanner(em,posB,(OrgUnitModel)model,flexibleElt,oldBannerLayoutConstraint);
      }
    }
    if (oldType != null && type != null) {
      flexibleElt=(FlexibleElement)createNewFlexibleElement(em,oldType,type,flexibleElt);
      log.debug(""String_Node_Str"" + flexibleElt.getClass());
    }
    em.flush();
    em.clear();
    flexibleElt=em.find(FlexibleElement.class,flexibleElt.getId());
    Boolean specificChanges=false;
    if (ElementTypeEnum.FILES_LIST.equals(type) || (ElementTypeEnum.FILES_LIST.equals(oldType) && type == null)) {
      FilesListElement filesListElement=(FilesListElement)flexibleElt;
      if (filesListElement != null) {
        if (maxLimit != null) {
          filesListElement.setLimit(maxLimit);
          specificChanges=true;
        }
        if (specificChanges) {
          filesListElement=em.merge(filesListElement);
          flexibleElt=filesListElement;
        }
      }
    }
 else     if (ElementTypeEnum.TEXT_AREA.equals(type) || (ElementTypeEnum.TEXT_AREA.equals(oldType) && type == null)) {
      TextAreaElement textAreaElement=(TextAreaElement)flexibleElt;
      if (textAreaElement != null) {
        if (maxLimit != null) {
          ((TextAreaElement)flexibleElt).setMaxValue(new Integer(maxLimit).longValue());
          specificChanges=true;
        }
        if (minLimit != null) {
          ((TextAreaElement)flexibleElt).setMinValue(new Integer(minLimit).longValue());
          specificChanges=true;
        }
        if (length != null) {
          ((TextAreaElement)flexibleElt).setLength(length);
          specificChanges=true;
        }
        if (decimal != null) {
          ((TextAreaElement)flexibleElt).setIsDecimal(decimal);
          specificChanges=true;
        }
        if (textType != null) {
          ((TextAreaElement)flexibleElt).setType(textType);
          specificChanges=true;
        }
        if (specificChanges) {
          flexibleElt=em.merge((TextAreaElement)flexibleElt);
        }
      }
    }
 else     if (ElementTypeEnum.REPORT.equals(type) || (ElementTypeEnum.REPORT.equals(oldType) && type == null)) {
      ReportElement reportElement=em.find(ReportElement.class,flexibleElt.getId());
      if (reportElement != null) {
        if (reportModel != null) {
          if (reportModel.getName() != null) {
            Integer reportId=findIdForReport(em,reportModel.getName());
            ((ReportElement)flexibleElt).setModelId(reportId);
            specificChanges=true;
          }
        }
        if (specificChanges) {
          flexibleElt=em.merge((ReportElement)flexibleElt);
        }
      }
    }
 else     if (ElementTypeEnum.REPORT_LIST.equals(type) || (ElementTypeEnum.REPORT_LIST.equals(oldType) && type == null)) {
      ReportListElement reportElement=em.find(ReportListElement.class,flexibleElt.getId());
      if (reportElement != null) {
        if (reportModel.getName() != null) {
          Integer reportId=findIdForReport(em,reportModel.getName());
          ((ReportListElement)flexibleElt).setModelId(reportId);
          specificChanges=true;
        }
        if (specificChanges) {
          flexibleElt=em.merge((ReportListElement)flexibleElt);
        }
      }
    }
 else     if (ElementTypeEnum.QUESTION.equals(type) || (ElementTypeEnum.QUESTION.equals(oldType) && type == null)) {
      QuestionElement questionElement=em.find(QuestionElement.class,flexibleElt.getId());
      if (questionElement != null) {
        if (isMultiple != null) {
          ((QuestionElement)flexibleElt).setIsMultiple(isMultiple);
          specificChanges=true;
        }
        if (category != null) {
          for (          QuestionChoiceElement choiceElt : ((QuestionElement)flexibleElt).getChoices()) {
            em.remove(choiceElt);
          }
          CategoryType categoryType=em.find(CategoryType.class,category.getId());
          if (categoryType != null) {
            ((QuestionElement)flexibleElt).setCategoryType(categoryType);
            List<QuestionChoiceElement> choices=new ArrayList<QuestionChoiceElement>();
            int i=0;
            for (            CategoryElement catElt : categoryType.getElements()) {
              QuestionChoiceElement qChoice=new QuestionChoiceElement();
              qChoice.setLabel(""String_Node_Str"");
              qChoice.setCategoryElement(catElt);
              qChoice.setParentQuestion(questionElement);
              qChoice.setSortOrder(i++);
              choices.add(qChoice);
            }
            ((QuestionElement)flexibleElt).setChoices(choices);
            specificChanges=true;
          }
        }
 else         if (qChoices != null) {
          for (          QuestionChoiceElement choiceElt : ((QuestionElement)flexibleElt).getChoices()) {
            em.remove(choiceElt);
          }
          ((QuestionElement)flexibleElt).setCategoryType(null);
          List<QuestionChoiceElement> choices=new ArrayList<QuestionChoiceElement>();
          int i=0;
          for (          String choiceLabel : qChoices) {
            QuestionChoiceElement qChoice=new QuestionChoiceElement();
            qChoice.setLabel(choiceLabel);
            qChoice.setParentQuestion(questionElement);
            qChoice.setSortOrder(i++);
            choices.add(qChoice);
          }
          ((QuestionElement)flexibleElt).setChoices(choices);
          specificChanges=true;
        }
        if (specificChanges) {
          flexibleElt=em.merge((QuestionElement)flexibleElt);
        }
      }
    }
    em.flush();
    em.clear();
  }
}","@SuppressWarnings(""String_Node_Str"") public static void persistFlexibleElement(EntityManager em,Mapper mapper,PropertyMap changes,Object model){
  FlexibleElementDTO flexibleEltDTO=null;
  if (changes.get(AdminUtil.PROP_FX_FLEXIBLE_ELEMENT) != null) {
    String name=changes.get(AdminUtil.PROP_FX_NAME);
    ElementTypeEnum type=(ElementTypeEnum)changes.get(AdminUtil.PROP_FX_TYPE);
    Boolean isCompulsory=null;
    if (changes.get(AdminUtil.PROP_FX_IS_COMPULSARY) != null)     isCompulsory=(Boolean)changes.get(AdminUtil.PROP_FX_IS_COMPULSARY);
    PrivacyGroupDTO pg=null;
    if (changes.get(AdminUtil.PROP_FX_PRIVACY_GROUP) != null)     pg=(PrivacyGroupDTO)changes.get(AdminUtil.PROP_FX_PRIVACY_GROUP);
    Boolean amend=null;
    if (changes.get(AdminUtil.PROP_FX_AMENDABLE) != null)     amend=(Boolean)changes.get(AdminUtil.PROP_FX_AMENDABLE);
    LayoutGroupDTO group=null;
    if (changes.get(AdminUtil.PROP_FX_GROUP) != null)     group=(LayoutGroupDTO)changes.get(AdminUtil.PROP_FX_GROUP);
    Integer order=null;
    if (changes.get(AdminUtil.PROP_FX_ORDER_IN_GROUP) != null)     order=(Integer)changes.get(AdminUtil.PROP_FX_ORDER_IN_GROUP);
    Boolean inBanner=null;
    if (changes.get(AdminUtil.PROP_FX_IN_BANNER) != null)     inBanner=(Boolean)changes.get(AdminUtil.PROP_FX_IN_BANNER);
    Integer posB=null;
    if (changes.get(AdminUtil.PROP_FX_POS_IN_BANNER) != null) {
      posB=(Integer)changes.get(AdminUtil.PROP_FX_POS_IN_BANNER);
      posB=posB - 1;
    }
    HashMap<String,Object> oldLayoutFields=(HashMap<String,Object>)changes.get(AdminUtil.PROP_FX_OLD_FIELDS);
    LayoutConstraintDTO oldLayoutConstraintDTO=(LayoutConstraintDTO)oldLayoutFields.get(AdminUtil.PROP_FX_LC);
    LayoutConstraintDTO oldBannerLayoutConstraintDTO=(LayoutConstraintDTO)oldLayoutFields.get(AdminUtil.PROP_FX_LC_BANNER);
    ElementTypeEnum oldType=(ElementTypeEnum)oldLayoutFields.get(AdminUtil.PROP_FX_TYPE);
    Integer oldOrder=(Integer)oldLayoutFields.get(AdminUtil.PROP_FX_ORDER_IN_GROUP);
    Character textType=(Character)changes.get(AdminUtil.PROP_FX_TEXT_TYPE);
    Integer maxLimit=null;
    if (changes.get(AdminUtil.PROP_FX_MAX_LIMIT) != null)     maxLimit=(Integer)changes.get(AdminUtil.PROP_FX_MAX_LIMIT);
    Integer minLimit=null;
    if (changes.get(AdminUtil.PROP_FX_MIN_LIMIT) != null)     minLimit=(Integer)changes.get(AdminUtil.PROP_FX_MIN_LIMIT);
    Integer length=null;
    if (changes.get(AdminUtil.PROP_FX_LENGTH) != null)     length=(Integer)changes.get(AdminUtil.PROP_FX_LENGTH);
    Boolean decimal=null;
    if (changes.get(AdminUtil.PROP_FX_DECIMAL) != null)     decimal=(Boolean)changes.get(AdminUtil.PROP_FX_DECIMAL);
    ReportModelDTO reportModel=null;
    if (changes.get(AdminUtil.PROP_FX_REPORT_MODEL) != null)     reportModel=(ReportModelDTO)changes.get(AdminUtil.PROP_FX_REPORT_MODEL);
    Boolean isMultiple=null;
    if (changes.get(AdminUtil.PROP_FX_Q_MULTIPLE) != null)     isMultiple=(Boolean)changes.get(AdminUtil.PROP_FX_Q_MULTIPLE);
    CategoryTypeDTO category=null;
    if (changes.get(AdminUtil.PROP_FX_Q_CATEGORY) != null)     category=(CategoryTypeDTO)changes.get(AdminUtil.PROP_FX_Q_CATEGORY);
    List<String> qChoices=null;
    if (changes.get(AdminUtil.PROP_FX_Q_CHOICES) != null)     qChoices=(List<String>)changes.get(AdminUtil.PROP_FX_Q_CHOICES);
    flexibleEltDTO=(FlexibleElementDTO)changes.get(AdminUtil.PROP_FX_FLEXIBLE_ELEMENT);
    FlexibleElement flexibleElt=null;
    if (flexibleEltDTO.getId() != 0) {
      flexibleElt=em.find(FlexibleElement.class,new Integer(flexibleEltDTO.getId()).longValue());
    }
 else {
      flexibleElt=(FlexibleElement)createNewFlexibleElement(em,oldType,type,flexibleElt);
    }
    log.debug(""String_Node_Str"" + name + ""String_Node_Str""+ type+ ""String_Node_Str""+ group+ ""String_Node_Str""+ order+ ""String_Node_Str""+ inBanner+ ""String_Node_Str""+ posB+ ""String_Node_Str""+ isCompulsory+ ""String_Node_Str""+ pg+ ""String_Node_Str""+ amend+ ""String_Node_Str"");
    log.debug(""String_Node_Str"" + maxLimit + ""String_Node_Str""+ minLimit+ ""String_Node_Str""+ textType+ ""String_Node_Str""+ length+ ""String_Node_Str""+ decimal+ ""String_Node_Str""+ reportModel+ ""String_Node_Str"");
    Boolean basicChanges=false;
    if (flexibleElt != null) {
      if (name != null) {
        flexibleElt.setLabel(name);
        basicChanges=true;
      }
      if (amend != null) {
        flexibleElt.setAmendable(amend);
        basicChanges=true;
      }
      if (isCompulsory != null) {
        flexibleElt.setValidates(isCompulsory);
        basicChanges=true;
      }
      if (pg != null) {
        PrivacyGroup pgToPersist=em.find(PrivacyGroup.class,pg.getId());
        if (pgToPersist != null) {
          flexibleElt.setPrivacyGroup(pgToPersist);
          basicChanges=true;
        }
      }
      if (basicChanges && flexibleElt.getId() != null)       flexibleElt=em.merge(flexibleElt);
 else       em.persist(flexibleElt);
    }
    if (group != null) {
      LayoutGroup parentLayoutGroup=em.find(LayoutGroup.class,new Integer(group.getId()).longValue());
      LayoutConstraint newLayoutConstraint=new LayoutConstraint();
      if (parentLayoutGroup != null) {
        newLayoutConstraint.setElement(flexibleElt);
        newLayoutConstraint.setParentLayoutGroup(parentLayoutGroup);
        if (oldOrder != null)         newLayoutConstraint.setSortOrder(oldOrder);
        if (order != null)         newLayoutConstraint.setSortOrder(order);
        if (order == null && oldOrder == null)         newLayoutConstraint.setSortOrder(new Integer(parentLayoutGroup.getConstraints().size()));
        if (oldLayoutConstraintDTO != null) {
          newLayoutConstraint.setId(new Integer(oldLayoutConstraintDTO.getId()).longValue());
          newLayoutConstraint=em.merge(newLayoutConstraint);
        }
 else {
          em.persist(newLayoutConstraint);
        }
      }
    }
    if (inBanner != null) {
      if (inBanner) {
        if (model instanceof ProjectModel)         changeBanner(em,posB,(ProjectModel)model,flexibleElt);
 else         if (model instanceof OrgUnitModel)         changeBanner(em,posB,(OrgUnitModel)model,flexibleElt);
      }
 else {
        if (oldBannerLayoutConstraintDTO != null) {
          LayoutConstraint oldBannerLayoutConstraint=mapper.map(oldBannerLayoutConstraintDTO,LayoutConstraint.class);
          oldBannerLayoutConstraint=em.find(LayoutConstraint.class,oldBannerLayoutConstraint.getId());
          em.remove(oldBannerLayoutConstraint);
        }
      }
    }
 else {
      if (posB != null) {
        LayoutConstraint oldBannerLayoutConstraint=mapper.map(oldBannerLayoutConstraintDTO,LayoutConstraint.class);
        if (model instanceof ProjectModel)         changePositionInBanner(em,posB,(ProjectModel)model,flexibleElt,oldBannerLayoutConstraint);
 else         if (model instanceof OrgUnitModel)         changePositionInBanner(em,posB,(OrgUnitModel)model,flexibleElt,oldBannerLayoutConstraint);
      }
    }
    if (oldType != null && type != null) {
      flexibleElt=(FlexibleElement)createNewFlexibleElement(em,oldType,type,flexibleElt);
      log.debug(""String_Node_Str"" + flexibleElt.getClass());
    }
    em.flush();
    em.clear();
    flexibleElt=em.find(FlexibleElement.class,flexibleElt.getId());
    Boolean specificChanges=false;
    if (ElementTypeEnum.FILES_LIST.equals(type) || (ElementTypeEnum.FILES_LIST.equals(oldType) && type == null)) {
      FilesListElement filesListElement=(FilesListElement)flexibleElt;
      if (filesListElement != null) {
        if (maxLimit != null) {
          filesListElement.setLimit(maxLimit);
          specificChanges=true;
        }
        if (specificChanges) {
          filesListElement=em.merge(filesListElement);
          flexibleElt=filesListElement;
        }
      }
    }
 else     if (ElementTypeEnum.TEXT_AREA.equals(type) || (ElementTypeEnum.TEXT_AREA.equals(oldType) && type == null)) {
      TextAreaElement textAreaElement=(TextAreaElement)flexibleElt;
      if (textAreaElement != null) {
        if (maxLimit != null) {
          ((TextAreaElement)flexibleElt).setMaxValue(new Integer(maxLimit).longValue());
          specificChanges=true;
        }
        if (minLimit != null) {
          ((TextAreaElement)flexibleElt).setMinValue(new Integer(minLimit).longValue());
          specificChanges=true;
        }
        if (length != null) {
          ((TextAreaElement)flexibleElt).setLength(length);
          specificChanges=true;
        }
        if (decimal != null) {
          ((TextAreaElement)flexibleElt).setIsDecimal(decimal);
          specificChanges=true;
        }
        if (textType != null) {
          ((TextAreaElement)flexibleElt).setType(textType);
          specificChanges=true;
        }
        if (specificChanges) {
          flexibleElt=em.merge((TextAreaElement)flexibleElt);
        }
      }
    }
 else     if (ElementTypeEnum.REPORT.equals(type) || (ElementTypeEnum.REPORT.equals(oldType) && type == null)) {
      ReportElement reportElement=em.find(ReportElement.class,flexibleElt.getId());
      if (reportElement != null) {
        if (reportModel != null) {
          if (reportModel.getName() != null) {
            Integer reportId=findIdForReport(em,reportModel.getName());
            ((ReportElement)flexibleElt).setModelId(reportId);
            specificChanges=true;
          }
        }
        if (specificChanges) {
          flexibleElt=em.merge((ReportElement)flexibleElt);
        }
      }
    }
 else     if (ElementTypeEnum.REPORT_LIST.equals(type) || (ElementTypeEnum.REPORT_LIST.equals(oldType) && type == null)) {
      ReportListElement reportElement=em.find(ReportListElement.class,flexibleElt.getId());
      if (reportElement != null) {
        if (reportModel.getName() != null) {
          Integer reportId=findIdForReport(em,reportModel.getName());
          ((ReportListElement)flexibleElt).setModelId(reportId);
          specificChanges=true;
        }
        if (specificChanges) {
          flexibleElt=em.merge((ReportListElement)flexibleElt);
        }
      }
    }
 else     if (ElementTypeEnum.QUESTION.equals(type) || (ElementTypeEnum.QUESTION.equals(oldType) && type == null)) {
      QuestionElement questionElement=em.find(QuestionElement.class,flexibleElt.getId());
      if (questionElement != null) {
        if (isMultiple != null) {
          ((QuestionElement)flexibleElt).setIsMultiple(isMultiple);
          specificChanges=true;
        }
        if (category != null) {
          for (          QuestionChoiceElement choiceElt : ((QuestionElement)flexibleElt).getChoices()) {
            em.remove(choiceElt);
          }
          CategoryType categoryType=em.find(CategoryType.class,category.getId());
          if (categoryType != null) {
            ((QuestionElement)flexibleElt).setCategoryType(categoryType);
            List<QuestionChoiceElement> choices=new ArrayList<QuestionChoiceElement>();
            int i=0;
            for (            CategoryElement catElt : categoryType.getElements()) {
              QuestionChoiceElement qChoice=new QuestionChoiceElement();
              qChoice.setLabel(""String_Node_Str"");
              qChoice.setCategoryElement(catElt);
              qChoice.setParentQuestion(questionElement);
              qChoice.setSortOrder(i++);
              choices.add(qChoice);
            }
            ((QuestionElement)flexibleElt).setChoices(choices);
            specificChanges=true;
          }
        }
 else         if (qChoices != null) {
          for (          QuestionChoiceElement choiceElt : ((QuestionElement)flexibleElt).getChoices()) {
            em.remove(choiceElt);
          }
          ((QuestionElement)flexibleElt).setCategoryType(null);
          List<QuestionChoiceElement> choices=new ArrayList<QuestionChoiceElement>();
          int i=0;
          for (          String choiceLabel : qChoices) {
            QuestionChoiceElement qChoice=new QuestionChoiceElement();
            qChoice.setLabel(choiceLabel);
            qChoice.setParentQuestion(questionElement);
            qChoice.setSortOrder(i++);
            choices.add(qChoice);
          }
          ((QuestionElement)flexibleElt).setChoices(choices);
          specificChanges=true;
        }
        if (specificChanges) {
          flexibleElt=em.merge((QuestionElement)flexibleElt);
        }
      }
    }
    em.flush();
    em.clear();
  }
}",0.9981442633532356
35669,"@Override public int getOrgUnitId(){
  return (Integer)get(""String_Node_Str"");
}","@Override public int getOrgUnitId(){
  Integer value=(Integer)get(""String_Node_Str"");
  if (value != null)   return value.intValue();
 else   return -1;
}",0.6410256410256411
35670,"private void showSpecificAttributes(String type,FlexibleElementDTO flexibleElement,boolean onSelectAction){
  initSpecifics(flexibleElement);
  if (ElementTypeEnum.getName(ElementTypeEnum.CHECKBOX).equals(type)) {
  }
 else   if (ElementTypeEnum.getName(ElementTypeEnum.FILES_LIST).equals(type)) {
    if (onSelectAction) {
      maxLimitField.clear();
    }
    maxLimitField.show();
    specificsPanel.show();
  }
 else   if (ElementTypeEnum.getName(ElementTypeEnum.INDICATORS).equals(type)) {
  }
 else   if (ElementTypeEnum.getName(ElementTypeEnum.MESSAGE).equals(type)) {
  }
 else   if (ElementTypeEnum.getName(ElementTypeEnum.QUESTION).equals(type)) {
    linkedCategory.show();
    isMultipleQ.show();
    questionChoice.show();
    addChoiceButton.show();
    for (    ClickableLabel selected : selectableChoices.values()) {
      if (selected.getText() != null) {
        selected.show();
      }
    }
    qChoicesAddGrid.setVisible(true);
    specificsPanel.show();
  }
 else   if (ElementTypeEnum.getName(ElementTypeEnum.REPORT).equals(type) || ElementTypeEnum.getName(ElementTypeEnum.REPORT_LIST).equals(type)) {
    reportModelList.show();
    specificsPanel.show();
  }
 else   if (ElementTypeEnum.getName(ElementTypeEnum.TEXT_AREA).equals(type)) {
    if (onSelectAction) {
      maxLimitField.clear();
    }
    textAreaTypeList.show();
    lengthField.show();
    isDecimal.show();
    minLimitField.show();
    maxLimitField.show();
    specificsPanel.show();
  }
}","private void showSpecificAttributes(String type,FlexibleElementDTO flexibleElement,boolean onSelectAction){
  initSpecifics(flexibleElement);
  if (ElementTypeEnum.getName(ElementTypeEnum.DEFAULT).equals(type)) {
    isBanner.show();
    posBanner.show();
    specificsPanel.show();
  }
 else   if (ElementTypeEnum.getName(ElementTypeEnum.CHECKBOX).equals(type)) {
  }
 else   if (ElementTypeEnum.getName(ElementTypeEnum.FILES_LIST).equals(type)) {
    if (onSelectAction) {
      maxLimitField.clear();
    }
    maxLimitField.show();
    specificsPanel.show();
  }
 else   if (ElementTypeEnum.getName(ElementTypeEnum.INDICATORS).equals(type)) {
  }
 else   if (ElementTypeEnum.getName(ElementTypeEnum.MESSAGE).equals(type)) {
  }
 else   if (ElementTypeEnum.getName(ElementTypeEnum.QUESTION).equals(type)) {
    linkedCategory.show();
    isMultipleQ.show();
    questionChoice.show();
    addChoiceButton.show();
    for (    ClickableLabel selected : selectableChoices.values()) {
      if (selected.getText() != null) {
        selected.show();
      }
    }
    qChoicesAddGrid.setVisible(true);
    specificsPanel.show();
  }
 else   if (ElementTypeEnum.getName(ElementTypeEnum.REPORT).equals(type) || ElementTypeEnum.getName(ElementTypeEnum.REPORT_LIST).equals(type)) {
    reportModelList.show();
    specificsPanel.show();
  }
 else   if (ElementTypeEnum.getName(ElementTypeEnum.TEXT_AREA).equals(type)) {
    if (onSelectAction) {
      maxLimitField.clear();
    }
    textAreaTypeList.show();
    lengthField.show();
    isDecimal.show();
    minLimitField.show();
    maxLimitField.show();
    specificsPanel.show();
  }
}",0.9516180711310478
35671,"private void hideAllSpecificAttributes(){
  linkedCategory.hide();
  isLinkedToQuality.hide();
  isMultipleQ.hide();
  questionChoice.hide();
  addChoiceButton.hide();
  for (  ClickableLabel selected : selectableChoices.values()) {
    selected.hide();
  }
  qChoicesAddGrid.setVisible(false);
  textAreaTypeList.hide();
  maxLimitField.hide();
  minLimitField.hide();
  lengthField.hide();
  isDecimal.hide();
  reportModelList.hide();
  specificsPanel.hide();
}","private void hideAllSpecificAttributes(){
  linkedCategory.hide();
  isLinkedToQuality.hide();
  isMultipleQ.hide();
  questionChoice.hide();
  addChoiceButton.hide();
  for (  ClickableLabel selected : selectableChoices.values()) {
    selected.hide();
  }
  qChoicesAddGrid.setVisible(false);
  textAreaTypeList.hide();
  maxLimitField.hide();
  minLimitField.hide();
  lengthField.hide();
  isDecimal.hide();
  reportModelList.hide();
  isBanner.hide();
  posBanner.hide();
  specificsPanel.hide();
}",0.9596690796277144
35672,"private void createFlexibleElement(final AsyncCallback<UpdateModelResult> callback){
  if (!commonPanel.isValid() || htmlArea.getValue() != null && htmlArea.getValue().isEmpty() || ""String_Node_Str"".equals(htmlArea.getValue())) {
    MessageBox.alert(I18N.CONSTANTS.createFormIncomplete(),I18N.MESSAGES.createFormIncompleteDetails(I18N.CONSTANTS.adminStandardFlexibleName()),null);
    return;
  }
  final String name=htmlArea.getValue().replace(""String_Node_Str"",""String_Node_Str"");
  String type=null;
  if (typeList.getSimpleValue() != null)   type=typeList.getSimpleValue();
  LayoutGroupDTO group=groupList.getValue();
  Integer order=null;
  if (orderField.getValue() != null)   order=new Integer(orderField.getValue().intValue());
  Boolean inBanner=isBanner.getValue();
  Integer posB=null;
  if (posBanner.getValue() != null)   posB=posBanner.getValue().getValue();
  Boolean isCompulsory=validates.getValue();
  PrivacyGroupDTO pg=privacyGroupsListCombo.getValue();
  Boolean amend=isAmendable.getValue();
  String textType=null;
  if (textAreaTypeList.getValue() != null)   textType=textAreaTypeList.getSimpleValue();
  Character textTypeC=null;
  if (I18N.CONSTANTS.adminFlexibleTextTypeP().equals(textType)) {
    textTypeC='P';
  }
 else   if (I18N.CONSTANTS.adminFlexibleTextTypeT().equals(textType)) {
    textTypeC='T';
  }
 else   if (I18N.CONSTANTS.adminFlexibleTextTypeN().equals(textType)) {
    textTypeC='N';
  }
 else   if (I18N.CONSTANTS.adminFlexibleTextTypeD().equals(textType)) {
    textTypeC='D';
  }
  Integer maxLimit=null;
  if (maxLimitField.getValue() != null)   maxLimit=new Integer(maxLimitField.getValue().intValue());
  Integer minLimit=null;
  if (minLimitField.getValue() != null)   minLimit=new Integer(minLimitField.getValue().intValue());
  Integer length=null;
  if (lengthField.getValue() != null)   length=new Integer(lengthField.getValue().intValue());
  Boolean decimal=isDecimal.getValue();
  ReportModelDTO reportModel=reportModelList.getValue();
  Boolean multipleQ=isMultipleQ.getValue();
  CategoryTypeDTO category=linkedCategory.getValue();
  HashMap<String,Object> newFieldProperties=new HashMap<String,Object>();
  newFieldProperties.put(AdminUtil.PROP_FX_NAME,name);
  newFieldProperties.put(AdminUtil.PROP_FX_TYPE,ElementTypeEnum.getType(type));
  newFieldProperties.put(AdminUtil.PROP_FX_GROUP,group);
  newFieldProperties.put(AdminUtil.PROP_FX_ORDER_IN_GROUP,order);
  newFieldProperties.put(AdminUtil.PROP_FX_IN_BANNER,inBanner);
  newFieldProperties.put(AdminUtil.PROP_FX_POS_IN_BANNER,posB);
  newFieldProperties.put(AdminUtil.PROP_FX_IS_COMPULSARY,isCompulsory);
  newFieldProperties.put(AdminUtil.PROP_FX_PRIVACY_GROUP,pg);
  newFieldProperties.put(AdminUtil.PROP_FX_AMENDABLE,amend);
  if (textTypeC != null)   newFieldProperties.put(AdminUtil.PROP_FX_TEXT_TYPE,textTypeC);
  if (length != null)   newFieldProperties.put(AdminUtil.PROP_FX_LENGTH,length);
  if (maxLimit != null)   newFieldProperties.put(AdminUtil.PROP_FX_MAX_LIMIT,maxLimit);
  if (minLimit != null)   newFieldProperties.put(AdminUtil.PROP_FX_MIN_LIMIT,minLimit);
  if (decimal != null && ElementTypeEnum.TEXT_AREA.equals(ElementTypeEnum.getType(type)))   newFieldProperties.put(AdminUtil.PROP_FX_DECIMAL,decimal);
  if (reportModel != null)   newFieldProperties.put(AdminUtil.PROP_FX_REPORT_MODEL,reportModel);
  if (multipleQ != null)   newFieldProperties.put(AdminUtil.PROP_FX_Q_MULTIPLE,multipleQ);
  if (category != null && category != defaultNoCategory)   newFieldProperties.put(AdminUtil.PROP_FX_Q_CATEGORY,category);
  if (selectedChoicesLabels != null)   newFieldProperties.put(AdminUtil.PROP_FX_Q_CHOICES,selectedChoicesLabels);
  for (  String selLab : selectedChoicesLabels) {
    Log.debug(""String_Node_Str"" + selLab);
  }
  String message=""String_Node_Str"";
  for (  Map.Entry<String,Object> newP : newFieldProperties.entrySet()) {
    message+=newP.getKey() + ""String_Node_Str"" + newP.getValue()+ ""String_Node_Str"";
  }
  Log.debug(message + ""String_Node_Str"");
  if (flexibleElementToUpdate != null) {
    message=""String_Node_Str"";
    for (    Map.Entry<String,Object> old : oldFieldProperties.entrySet()) {
      message+=old.getKey() + ""String_Node_Str"" + old.getValue()+ ""String_Node_Str"";
      if ((old.getValue() != null && old.getValue().equals(newFieldProperties.get(old.getKey()))) || (old.getValue() == null && newFieldProperties.get(old.getKey()) == null)) {
        newFieldProperties.remove(old.getKey());
      }
    }
    Log.debug(message + ""String_Node_Str"");
  }
  message=""String_Node_Str"";
  for (  Map.Entry<String,Object> newP : newFieldProperties.entrySet()) {
    if (newP.getValue() != null)     message+=newP.getKey() + ""String_Node_Str"" + newP.getValue()+ ""String_Node_Str"";
  }
  Log.debug(message + ""String_Node_Str"");
  if (newFieldProperties.get(AdminUtil.PROP_FX_ORDER_IN_GROUP) != null) {
    newFieldProperties.put(AdminUtil.PROP_FX_GROUP,group);
  }
  if (flexibleElementToUpdate != null)   newFieldProperties.put(AdminUtil.PROP_FX_FLEXIBLE_ELEMENT,flexibleElementToUpdate);
 else   newFieldProperties.put(AdminUtil.PROP_FX_FLEXIBLE_ELEMENT,new TextAreaElementDTO());
  newFieldProperties.put(AdminUtil.ADMIN_PROJECT_MODEL,projectModelToUpdate);
  newFieldProperties.put(AdminUtil.ADMIN_ORG_UNIT_MODEL,orgUnitModelToUpdate);
  newFieldProperties.put(AdminUtil.PROP_FX_OLD_FIELDS,oldFieldProperties);
  if (isProject) {
    dispatcher.execute(new CreateEntity(""String_Node_Str"",newFieldProperties),null,new AsyncCallback<CreateResult>(){
      public void onFailure(      Throwable caught){
        MessageBox.alert(I18N.CONSTANTS.adminFlexibleCreationBox(),I18N.MESSAGES.adminStandardCreationFailure(I18N.CONSTANTS.adminStandardFlexibleName() + ""String_Node_Str"" + name+ ""String_Node_Str""),null);
        callback.onFailure(caught);
      }
      @Override public void onSuccess(      CreateResult result){
        if (result != null) {
          ProjectModelDTO pModelUpdated=(ProjectModelDTO)result.getEntity();
          UpdateModelResult completeResult=new UpdateModelResult(pModelUpdated.getId());
          completeResult.setEntity(pModelUpdated);
          if (flexibleElementToUpdate != null) {
            for (            FlexibleElementDTO f : pModelUpdated.getAllElements()) {
              if (f.getId() == flexibleElementToUpdate.getId()) {
                completeResult.setAnnexEntity(f);
              }
            }
            Notification.show(I18N.CONSTANTS.adminFlexibleCreationBox(),I18N.MESSAGES.adminStandardUpdateSuccess(I18N.CONSTANTS.adminStandardFlexibleName() + ""String_Node_Str"" + name+ ""String_Node_Str""));
          }
 else {
            List<Integer> flexibleIds=new ArrayList<Integer>();
            for (            FlexibleElementDTO f : projectModelToUpdate.getAllElements()) {
              flexibleIds.add(f.getId());
            }
            for (            FlexibleElementDTO f : pModelUpdated.getAllElements()) {
              if (!flexibleIds.contains(f.getId())) {
                completeResult.setAnnexEntity(f);
              }
            }
            Notification.show(I18N.CONSTANTS.adminFlexibleCreationBox(),I18N.MESSAGES.adminStandardCreationSuccess(I18N.CONSTANTS.adminStandardFlexibleName() + ""String_Node_Str"" + name+ ""String_Node_Str""));
          }
          callback.onSuccess(completeResult);
        }
 else {
          Throwable t=new Throwable(""String_Node_Str"");
          MessageBox.alert(I18N.CONSTANTS.adminFlexibleCreationBox(),I18N.MESSAGES.adminStandardCreationNull(I18N.CONSTANTS.adminStandardFlexibleName() + ""String_Node_Str"" + name+ ""String_Node_Str""),null);
          callback.onFailure(t);
        }
      }
    }
);
  }
 else {
    dispatcher.execute(new CreateEntity(""String_Node_Str"",newFieldProperties),null,new AsyncCallback<CreateResult>(){
      public void onFailure(      Throwable caught){
        MessageBox.alert(I18N.CONSTANTS.adminFlexibleCreationBox(),I18N.MESSAGES.adminStandardCreationFailure(I18N.CONSTANTS.adminStandardFlexibleName() + ""String_Node_Str"" + name+ ""String_Node_Str""),null);
        callback.onFailure(caught);
      }
      @Override public void onSuccess(      CreateResult result){
        if (result != null) {
          OrgUnitModelDTO oModelUpdated=(OrgUnitModelDTO)result.getEntity();
          UpdateModelResult completeResult=new UpdateModelResult(oModelUpdated.getId());
          completeResult.setEntity(oModelUpdated);
          if (flexibleElementToUpdate != null) {
            for (            FlexibleElementDTO f : oModelUpdated.getAllElements()) {
              if (f.getId() == flexibleElementToUpdate.getId()) {
                Log.debug(""String_Node_Str"" + f.getId());
                completeResult.setAnnexEntity(f);
              }
            }
            Notification.show(I18N.CONSTANTS.adminFlexibleCreationBox(),I18N.MESSAGES.adminStandardUpdateSuccess(I18N.CONSTANTS.adminStandardFlexibleName() + ""String_Node_Str"" + name+ ""String_Node_Str""));
          }
 else {
            List<Integer> flexibleIds=new ArrayList<Integer>();
            for (            FlexibleElementDTO f : orgUnitModelToUpdate.getAllElements()) {
              flexibleIds.add(f.getId());
            }
            for (            FlexibleElementDTO f : oModelUpdated.getAllElements()) {
              if (!flexibleIds.contains(f.getId())) {
                completeResult.setAnnexEntity(f);
              }
            }
            Notification.show(I18N.CONSTANTS.adminFlexibleCreationBox(),I18N.MESSAGES.adminStandardCreationSuccess(I18N.CONSTANTS.adminStandardFlexibleName() + ""String_Node_Str"" + name+ ""String_Node_Str""));
          }
          callback.onSuccess(completeResult);
        }
 else {
          Throwable t=new Throwable(""String_Node_Str"");
          MessageBox.alert(I18N.CONSTANTS.adminFlexibleCreationBox(),I18N.MESSAGES.adminStandardCreationNull(I18N.CONSTANTS.adminStandardFlexibleName() + ""String_Node_Str"" + name+ ""String_Node_Str""),null);
          callback.onFailure(t);
        }
      }
    }
);
  }
}","private void createFlexibleElement(final AsyncCallback<UpdateModelResult> callback){
  if (!commonPanel.isValid() || htmlArea.getValue() != null && htmlArea.getValue().isEmpty() || ""String_Node_Str"".equals(htmlArea.getValue())) {
    MessageBox.alert(I18N.CONSTANTS.createFormIncomplete(),I18N.MESSAGES.createFormIncompleteDetails(I18N.CONSTANTS.adminStandardFlexibleName()),null);
    return;
  }
  final String name=htmlArea.getValue().replace(""String_Node_Str"",""String_Node_Str"");
  String type=null;
  if (typeList.getSimpleValue() != null)   type=typeList.getSimpleValue();
  LayoutGroupDTO group=groupList.getValue();
  Integer order=null;
  if (orderField.getValue() != null)   order=new Integer(orderField.getValue().intValue());
  Boolean isCompulsory=validates.getValue();
  PrivacyGroupDTO pg=privacyGroupsListCombo.getValue();
  Boolean amend=isAmendable.getValue();
  Boolean inBanner=isBanner.getValue();
  Integer posB=null;
  if (posBanner.getValue() != null)   posB=posBanner.getValue().getValue();
  String textType=null;
  if (textAreaTypeList.getValue() != null)   textType=textAreaTypeList.getSimpleValue();
  Character textTypeC=null;
  if (I18N.CONSTANTS.adminFlexibleTextTypeP().equals(textType)) {
    textTypeC='P';
  }
 else   if (I18N.CONSTANTS.adminFlexibleTextTypeT().equals(textType)) {
    textTypeC='T';
  }
 else   if (I18N.CONSTANTS.adminFlexibleTextTypeN().equals(textType)) {
    textTypeC='N';
  }
 else   if (I18N.CONSTANTS.adminFlexibleTextTypeD().equals(textType)) {
    textTypeC='D';
  }
  Integer maxLimit=null;
  if (maxLimitField.getValue() != null)   maxLimit=new Integer(maxLimitField.getValue().intValue());
  Integer minLimit=null;
  if (minLimitField.getValue() != null)   minLimit=new Integer(minLimitField.getValue().intValue());
  Integer length=null;
  if (lengthField.getValue() != null)   length=new Integer(lengthField.getValue().intValue());
  Boolean decimal=isDecimal.getValue();
  ReportModelDTO reportModel=reportModelList.getValue();
  Boolean multipleQ=isMultipleQ.getValue();
  CategoryTypeDTO category=linkedCategory.getValue();
  HashMap<String,Object> newFieldProperties=new HashMap<String,Object>();
  newFieldProperties.put(AdminUtil.PROP_FX_NAME,name);
  newFieldProperties.put(AdminUtil.PROP_FX_TYPE,ElementTypeEnum.getType(type));
  newFieldProperties.put(AdminUtil.PROP_FX_GROUP,group);
  newFieldProperties.put(AdminUtil.PROP_FX_ORDER_IN_GROUP,order);
  newFieldProperties.put(AdminUtil.PROP_FX_IN_BANNER,inBanner);
  newFieldProperties.put(AdminUtil.PROP_FX_POS_IN_BANNER,posB);
  newFieldProperties.put(AdminUtil.PROP_FX_IS_COMPULSARY,isCompulsory);
  newFieldProperties.put(AdminUtil.PROP_FX_PRIVACY_GROUP,pg);
  newFieldProperties.put(AdminUtil.PROP_FX_AMENDABLE,amend);
  if (textTypeC != null)   newFieldProperties.put(AdminUtil.PROP_FX_TEXT_TYPE,textTypeC);
  if (length != null)   newFieldProperties.put(AdminUtil.PROP_FX_LENGTH,length);
  if (maxLimit != null)   newFieldProperties.put(AdminUtil.PROP_FX_MAX_LIMIT,maxLimit);
  if (minLimit != null)   newFieldProperties.put(AdminUtil.PROP_FX_MIN_LIMIT,minLimit);
  if (decimal != null && ElementTypeEnum.TEXT_AREA.equals(ElementTypeEnum.getType(type)))   newFieldProperties.put(AdminUtil.PROP_FX_DECIMAL,decimal);
  if (reportModel != null)   newFieldProperties.put(AdminUtil.PROP_FX_REPORT_MODEL,reportModel);
  if (multipleQ != null)   newFieldProperties.put(AdminUtil.PROP_FX_Q_MULTIPLE,multipleQ);
  if (category != null && category != defaultNoCategory)   newFieldProperties.put(AdminUtil.PROP_FX_Q_CATEGORY,category);
  if (selectedChoicesLabels != null)   newFieldProperties.put(AdminUtil.PROP_FX_Q_CHOICES,selectedChoicesLabels);
  for (  String selLab : selectedChoicesLabels) {
    Log.debug(""String_Node_Str"" + selLab);
  }
  String message=""String_Node_Str"";
  for (  Map.Entry<String,Object> newP : newFieldProperties.entrySet()) {
    message+=newP.getKey() + ""String_Node_Str"" + newP.getValue()+ ""String_Node_Str"";
  }
  Log.debug(message + ""String_Node_Str"");
  if (flexibleElementToUpdate != null) {
    message=""String_Node_Str"";
    for (    Map.Entry<String,Object> old : oldFieldProperties.entrySet()) {
      message+=old.getKey() + ""String_Node_Str"" + old.getValue()+ ""String_Node_Str"";
      if ((old.getValue() != null && old.getValue().equals(newFieldProperties.get(old.getKey()))) || (old.getValue() == null && newFieldProperties.get(old.getKey()) == null)) {
        newFieldProperties.remove(old.getKey());
      }
    }
    Log.debug(message + ""String_Node_Str"");
  }
  message=""String_Node_Str"";
  for (  Map.Entry<String,Object> newP : newFieldProperties.entrySet()) {
    if (newP.getValue() != null)     message+=newP.getKey() + ""String_Node_Str"" + newP.getValue()+ ""String_Node_Str"";
  }
  Log.debug(message + ""String_Node_Str"");
  if (newFieldProperties.get(AdminUtil.PROP_FX_ORDER_IN_GROUP) != null) {
    newFieldProperties.put(AdminUtil.PROP_FX_GROUP,group);
  }
  if (flexibleElementToUpdate != null)   newFieldProperties.put(AdminUtil.PROP_FX_FLEXIBLE_ELEMENT,flexibleElementToUpdate);
 else   newFieldProperties.put(AdminUtil.PROP_FX_FLEXIBLE_ELEMENT,new TextAreaElementDTO());
  newFieldProperties.put(AdminUtil.ADMIN_PROJECT_MODEL,projectModelToUpdate);
  newFieldProperties.put(AdminUtil.ADMIN_ORG_UNIT_MODEL,orgUnitModelToUpdate);
  newFieldProperties.put(AdminUtil.PROP_FX_OLD_FIELDS,oldFieldProperties);
  if (isProject) {
    dispatcher.execute(new CreateEntity(""String_Node_Str"",newFieldProperties),null,new AsyncCallback<CreateResult>(){
      public void onFailure(      Throwable caught){
        MessageBox.alert(I18N.CONSTANTS.adminFlexibleCreationBox(),I18N.MESSAGES.adminStandardCreationFailure(I18N.CONSTANTS.adminStandardFlexibleName() + ""String_Node_Str"" + name+ ""String_Node_Str""),null);
        callback.onFailure(caught);
      }
      @Override public void onSuccess(      CreateResult result){
        if (result != null) {
          ProjectModelDTO pModelUpdated=(ProjectModelDTO)result.getEntity();
          UpdateModelResult completeResult=new UpdateModelResult(pModelUpdated.getId());
          completeResult.setEntity(pModelUpdated);
          if (flexibleElementToUpdate != null) {
            for (            FlexibleElementDTO f : pModelUpdated.getAllElements()) {
              if (f.getId() == flexibleElementToUpdate.getId()) {
                completeResult.setAnnexEntity(f);
              }
            }
            Notification.show(I18N.CONSTANTS.adminFlexibleCreationBox(),I18N.MESSAGES.adminStandardUpdateSuccess(I18N.CONSTANTS.adminStandardFlexibleName() + ""String_Node_Str"" + name+ ""String_Node_Str""));
          }
 else {
            List<Integer> flexibleIds=new ArrayList<Integer>();
            for (            FlexibleElementDTO f : projectModelToUpdate.getAllElements()) {
              flexibleIds.add(f.getId());
            }
            for (            FlexibleElementDTO f : pModelUpdated.getAllElements()) {
              if (!flexibleIds.contains(f.getId())) {
                completeResult.setAnnexEntity(f);
              }
            }
            Notification.show(I18N.CONSTANTS.adminFlexibleCreationBox(),I18N.MESSAGES.adminStandardCreationSuccess(I18N.CONSTANTS.adminStandardFlexibleName() + ""String_Node_Str"" + name+ ""String_Node_Str""));
          }
          callback.onSuccess(completeResult);
        }
 else {
          Throwable t=new Throwable(""String_Node_Str"");
          MessageBox.alert(I18N.CONSTANTS.adminFlexibleCreationBox(),I18N.MESSAGES.adminStandardCreationNull(I18N.CONSTANTS.adminStandardFlexibleName() + ""String_Node_Str"" + name+ ""String_Node_Str""),null);
          callback.onFailure(t);
        }
      }
    }
);
  }
 else {
    dispatcher.execute(new CreateEntity(""String_Node_Str"",newFieldProperties),null,new AsyncCallback<CreateResult>(){
      public void onFailure(      Throwable caught){
        MessageBox.alert(I18N.CONSTANTS.adminFlexibleCreationBox(),I18N.MESSAGES.adminStandardCreationFailure(I18N.CONSTANTS.adminStandardFlexibleName() + ""String_Node_Str"" + name+ ""String_Node_Str""),null);
        callback.onFailure(caught);
      }
      @Override public void onSuccess(      CreateResult result){
        if (result != null) {
          OrgUnitModelDTO oModelUpdated=(OrgUnitModelDTO)result.getEntity();
          UpdateModelResult completeResult=new UpdateModelResult(oModelUpdated.getId());
          completeResult.setEntity(oModelUpdated);
          if (flexibleElementToUpdate != null) {
            for (            FlexibleElementDTO f : oModelUpdated.getAllElements()) {
              if (f.getId() == flexibleElementToUpdate.getId()) {
                Log.debug(""String_Node_Str"" + f.getId());
                completeResult.setAnnexEntity(f);
              }
            }
            Notification.show(I18N.CONSTANTS.adminFlexibleCreationBox(),I18N.MESSAGES.adminStandardUpdateSuccess(I18N.CONSTANTS.adminStandardFlexibleName() + ""String_Node_Str"" + name+ ""String_Node_Str""));
          }
 else {
            List<Integer> flexibleIds=new ArrayList<Integer>();
            for (            FlexibleElementDTO f : orgUnitModelToUpdate.getAllElements()) {
              flexibleIds.add(f.getId());
            }
            for (            FlexibleElementDTO f : oModelUpdated.getAllElements()) {
              if (!flexibleIds.contains(f.getId())) {
                completeResult.setAnnexEntity(f);
              }
            }
            Notification.show(I18N.CONSTANTS.adminFlexibleCreationBox(),I18N.MESSAGES.adminStandardCreationSuccess(I18N.CONSTANTS.adminStandardFlexibleName() + ""String_Node_Str"" + name+ ""String_Node_Str""));
          }
          callback.onSuccess(completeResult);
        }
 else {
          Throwable t=new Throwable(""String_Node_Str"");
          MessageBox.alert(I18N.CONSTANTS.adminFlexibleCreationBox(),I18N.MESSAGES.adminStandardCreationNull(I18N.CONSTANTS.adminStandardFlexibleName() + ""String_Node_Str"" + name+ ""String_Node_Str""),null);
          callback.onFailure(t);
        }
      }
    }
);
  }
}",0.9863532224325132
35673,"public ElementForm(Dispatcher dispatcher,final AsyncCallback<UpdateModelResult> callback,final FlexibleElementDTO flexibleElement,ProjectModelDTO projectModelToUpdate,OrgUnitModelDTO orgUnitModelToUpdate,final List<LayoutGroupDTO> addedGroups){
  final VBoxLayout mainPanelLayout=new VBoxLayout();
  mainPanelLayout.setVBoxLayoutAlign(VBoxLayout.VBoxLayoutAlign.STRETCH);
  setLayout(mainPanelLayout);
  setHeaderVisible(false);
  if (projectModelToUpdate != null) {
    isProject=true;
  }
 else {
    isProject=false;
  }
  this.dispatcher=dispatcher;
  this.projectModelToUpdate=projectModelToUpdate;
  this.orgUnitModelToUpdate=orgUnitModelToUpdate;
  this.flexibleElementToUpdate=flexibleElement;
  specificsPanel=new FormPanel();
  specificsPanel.setHeaderVisible(false);
  specificsPanel.setBorders(true);
  specificsPanel.hide();
  reportModelList=new ComboBox<ReportModelDTO>();
  reportModelList.setEditable(false);
  reportModelList.hide();
  reportModelList.setFieldLabel(I18N.CONSTANTS.adminReportName());
  reportModelList.setDisplayField(""String_Node_Str"");
  reportModelList.setValueField(""String_Node_Str"");
  reportModelList.setTriggerAction(TriggerAction.ALL);
  reportModelsStore=new ListStore<ReportModelDTO>();
  dispatcher.execute(new GetReportModels(),null,new AsyncCallback<ReportModelsListResult>(){
    @Override public void onFailure(    Throwable arg0){
      reportModelList.setEmptyText(I18N.CONSTANTS.adminChoiceProblem());
    }
    @Override public void onSuccess(    ReportModelsListResult result){
      reportModelList.setEmptyText(I18N.CONSTANTS.adminReportName());
      reportModelsStore.removeAll();
      if (result != null) {
        reportModelsStore.add(result.getList());
        reportModelsStore.commitChanges();
      }
      if (flexibleElement != null) {
        if (flexibleElement instanceof ReportElementDTO) {
          if (((ReportElementDTO)flexibleElement).getModelId() != null) {
            for (            ReportModelDTO reportModel : reportModelsStore.getModels()) {
              if (reportModel.getId() == ((ReportElementDTO)flexibleElement).getModelId()) {
                reportModelList.setValue(reportModel);
              }
            }
          }
        }
      }
    }
  }
);
  reportModelList.setStore(reportModelsStore);
  maxLimitField=new NumberField();
  maxLimitField.setFieldLabel(I18N.CONSTANTS.adminFlexibleMaxLimit());
  maxLimitField.hide();
  textAreaTypeList=new SimpleComboBox<String>();
  textAreaTypeList.setTriggerAction(TriggerAction.ALL);
  textAreaTypeList.setEditable(false);
  textAreaTypeList.hide();
  textAreaTypeList.setFieldLabel(I18N.CONSTANTS.adminFlexibleTextType());
  List<String> textTypes=new ArrayList<String>();
  textTypes.add(I18N.CONSTANTS.adminFlexibleTextTypeP());
  textTypes.add(I18N.CONSTANTS.adminFlexibleTextTypeT());
  textTypes.add(I18N.CONSTANTS.adminFlexibleTextTypeN());
  textTypes.add(I18N.CONSTANTS.adminFlexibleTextTypeD());
  textAreaTypeList.add(textTypes);
  minLimitField=new NumberField();
  minLimitField.setFieldLabel(I18N.CONSTANTS.adminFlexibleMinLimit());
  minLimitField.hide();
  lengthField=new NumberField();
  lengthField.setFieldLabel(I18N.CONSTANTS.adminFlexibleLength());
  lengthField.hide();
  isDecimal=new CheckBox();
  isDecimal.hide();
  isDecimal.setBoxLabel(""String_Node_Str"");
  isDecimal.setFieldLabel(I18N.CONSTANTS.adminFlexibleDecimal());
  isDecimal.setLabelSeparator(""String_Node_Str"");
  isMultipleQ=new CheckBox();
  isMultipleQ.hide();
  isMultipleQ.setBoxLabel(""String_Node_Str"");
  isMultipleQ.setFieldLabel(I18N.CONSTANTS.adminFlexibleMultipleQ());
  isMultipleQ.setLabelSeparator(""String_Node_Str"");
  isLinkedToQuality=new CheckBox();
  isLinkedToQuality.hide();
  isLinkedToQuality.setBoxLabel(""String_Node_Str"");
  isLinkedToQuality.setFieldLabel(I18N.CONSTANTS.adminFlexibleLinkedToQuality());
  isLinkedToQuality.setLabelSeparator(""String_Node_Str"");
  defaultNoCategory.setLabel(I18N.CONSTANTS.adminFlexibleNoLinkedCategory());
  defaultNoCategory.setId(-1);
  linkedCategory=new ComboBox<CategoryTypeDTO>();
  linkedCategory.setEditable(false);
  linkedCategory.hide();
  linkedCategory.setDisplayField(I18N.CONSTANTS.adminFlexibleNoLinkedCategory());
  linkedCategory.setFieldLabel(I18N.CONSTANTS.adminFlexibleLinkedCategory());
  linkedCategory.setDisplayField(""String_Node_Str"");
  linkedCategory.setValueField(""String_Node_Str"");
  linkedCategory.setTriggerAction(TriggerAction.ALL);
  final ListStore<CategoryTypeDTO> linkedCategoriesStore=new ListStore<CategoryTypeDTO>();
  linkedCategoriesStore.add(defaultNoCategory);
  dispatcher.execute(new GetCategories(),null,new AsyncCallback<CategoriesListResult>(){
    @Override public void onFailure(    Throwable arg0){
      linkedCategory.setEmptyText(I18N.CONSTANTS.adminChoiceProblem());
    }
    @Override public void onSuccess(    CategoriesListResult result){
      linkedCategory.setEmptyText(I18N.CONSTANTS.adminUserCreationProfileChoice());
      linkedCategoriesStore.removeAll();
      linkedCategoriesStore.add(defaultNoCategory);
      if (result != null) {
        linkedCategoriesStore.add(result.getList());
        linkedCategoriesStore.commitChanges();
      }
    }
  }
);
  linkedCategory.setStore(linkedCategoriesStore);
  for (int i=0; i < MAX_TENTATIVES_FOR_CHOICES; i++) {
    final ClickableLabel label=new ClickableLabel();
    label.addClickHandler(new ClickHandler(){
      @Override public void onClick(      ClickEvent arg0){
        label.hide();
        selectedChoicesLabels.remove(label.getText());
        if (selectedChoicesLabels.size() == 0) {
          linkedCategory.setEnabled(true);
        }
      }
    }
);
    label.hide();
    selectableChoices.put(i,label);
  }
  questionChoice=new TextField<String>();
  questionChoice.hide();
  qChoicesAddGrid.setVisible(false);
  qChoicesAddGrid.getCellFormatter().setWidth(0,0,(LABEL_WIDTH) + ""String_Node_Str"");
  qChoicesAddGrid.setCellPadding(0);
  qChoicesAddGrid.setCellSpacing(0);
  qChoicesAddGrid.setWidget(0,0,new LabelField(I18N.CONSTANTS.adminFlexibleQChoices() + ""String_Node_Str""));
  qChoicesAddGrid.setWidget(0,1,questionChoice);
  questionChoice.setHideLabel(false);
  addChoiceButton.hide();
  addChoiceButton.addListener(Events.OnClick,new Listener<ButtonEvent>(){
    @Override public void handleEvent(    ButtonEvent be){
      if (questionChoice.getValue() != null) {
        if (!selectedChoicesLabels.contains(questionChoice.getValue())) {
          if (num < MAX_TENTATIVES_FOR_CHOICES) {
            linkedCategory.setEnabled(false);
            selectableChoices.get(num).setText(questionChoice.getValue());
            selectableChoices.get(num).show();
            num++;
            selectedChoicesLabels.add(questionChoice.getValue());
          }
 else {
            MessageBox.alert(I18N.CONSTANTS.adminMaxAttempts(),I18N.CONSTANTS.adminMaxAttemptsQChoices(),null);
            ElementForm.this.removeFromParent();
          }
        }
      }
    }
  }
);
  qChoicesAddGrid.setWidget(0,2,addChoiceButton);
  linkedCategory.addListener(Events.Select,new Listener<BaseEvent>(){
    @Override public void handleEvent(    BaseEvent be){
      if (linkedCategory.getValue() == null || defaultNoCategory.equals(linkedCategory.getValue())) {
        questionChoice.setEnabled(true);
        addChoiceButton.setEnabled(true);
      }
 else {
        questionChoice.setEnabled(false);
        addChoiceButton.setEnabled(false);
        for (        ClickableLabel selected : selectableChoices.values()) {
          selected.setEnabled(false);
        }
      }
    }
  }
);
  specificsPanel.add(reportModelList);
  specificsPanel.add(textAreaTypeList);
  specificsPanel.add(lengthField);
  specificsPanel.add(isDecimal);
  specificsPanel.add(minLimitField);
  specificsPanel.add(maxLimitField);
  specificsPanel.add(isMultipleQ);
  specificsPanel.add(isLinkedToQuality);
  specificsPanel.add(linkedCategory);
  specificsPanel.add(qChoicesAddGrid);
  for (  ClickableLabel selected : selectableChoices.values()) {
    selected.hide();
    specificsPanel.add(selected);
  }
  commonPanel=new FormPanel();
  commonPanel.setHeaderVisible(false);
  UIConstants constants=GWT.create(UIConstants.class);
  htmlArea=new HtmlEditor();
  htmlArea.hide();
  htmlArea.setEnableAlignments(false);
  htmlArea.setEnableLinks(false);
  htmlArea.setEnableFont(false);
  htmlArea.setEnableLists(false);
  htmlArea.setEnableColors(false);
  htmlArea.setSourceEditMode(false);
  htmlArea.setHeight(75);
  htmlArea.setFieldLabel(constants.adminFlexibleName());
  if (flexibleElement != null && flexibleElement.getLabel() != null) {
    htmlArea.setValue(flexibleElement.getLabel());
    oldFieldProperties.put(AdminUtil.PROP_FX_NAME,flexibleElement.getLabel());
  }
  LabelField label=new LabelField();
  label.hide();
  label.setFieldLabel(constants.adminFlexibleName());
  if (flexibleElement != null && flexibleElement.getElementType() != null) {
    if (ElementTypeEnum.DEFAULT.equals(flexibleElement.getElementType())) {
      label.setText(DefaultFlexibleElementType.getName(((DefaultFlexibleElementDTO)flexibleElement).getType()));
      label.show();
      oldFieldProperties.put(AdminUtil.PROP_FX_NAME,DefaultFlexibleElementType.getName(((DefaultFlexibleElementDTO)flexibleElement).getType()));
      htmlArea.setValue(DefaultFlexibleElementType.getName(((DefaultFlexibleElementDTO)flexibleElement).getType()));
    }
 else {
      htmlArea.show();
    }
  }
 else {
    htmlArea.show();
  }
  commonPanel.add(label);
  commonPanel.add(htmlArea);
  typeList=new SimpleComboBox<String>();
  typeList.setEditable(false);
  typeList.addListener(Events.Select,new Listener<BaseEvent>(){
    @Override public void handleEvent(    BaseEvent be){
      hideAllSpecificAttributes();
      showSpecificAttributes(typeList.getSimpleValue(),flexibleElementToUpdate,true);
    }
  }
);
  typeList.setFieldLabel(constants.adminFlexibleType());
  typeList.setAllowBlank(false);
  typeList.setTriggerAction(TriggerAction.ALL);
  List<String> values=new ArrayList<String>();
  for (  ElementTypeEnum e : ElementTypeEnum.values()) {
    if (!ElementTypeEnum.DEFAULT.equals(e))     values.add(ElementTypeEnum.getName(e));
  }
  typeList.add(values);
  if (flexibleElement != null && flexibleElement.getElementType() != null) {
    String typeOfElement=ElementTypeEnum.getName(flexibleElement.getElementType());
    typeList.setSimpleValue(typeOfElement);
    showSpecificAttributes(typeList.getSimpleValue(),flexibleElement,false);
    oldFieldProperties.put(AdminUtil.PROP_FX_TYPE,flexibleElement.getElementType());
    if (ElementTypeEnum.DEFAULT.equals(flexibleElement.getElementType())) {
      typeList.setEnabled(false);
    }
  }
 else   typeList.setEmptyText(I18N.CONSTANTS.adminFlexibleType());
  commonPanel.add(typeList);
  final ListStore<BaseModelData> containersStore=new ListStore<BaseModelData>();
  containerList=new ComboBox<BaseModelData>();
  containerList.setEditable(false);
  containerList.setDisplayField(""String_Node_Str"");
  containerList.setValueField(""String_Node_Str"");
  containerList.setFieldLabel(I18N.CONSTANTS.adminFlexibleContainer());
  containerList.setAllowBlank(false);
  containerList.setTriggerAction(TriggerAction.ALL);
  if (flexibleElement == null)   containerList.setEmptyText(I18N.CONSTANTS.adminFlexibleContainerChoice());
  final ListStore<LayoutGroupDTO> groupsStore=new ListStore<LayoutGroupDTO>();
  groupList=new ComboBox<LayoutGroupDTO>();
  groupList.setEditable(false);
  groupList.setFieldLabel(constants.adminFlexibleGroup());
  groupList.setDisplayField(""String_Node_Str"");
  groupList.setValueField(""String_Node_Str"");
  groupList.setTriggerAction(TriggerAction.ALL);
  posBanner=new SimpleComboBox<Integer>();
  posBanner.setTriggerAction(TriggerAction.ALL);
  posBanner.setEditable(false);
  posBanner.setFieldLabel(constants.adminFlexibleBannerPosition());
  posBanner.removeAll();
  for (int i=1; i < 7; i++) {
    posBanner.add(i);
  }
  posBanner.setAllowBlank(true);
  posBanner.setEnabled(false);
  isBanner=new CheckBox();
  isBanner.setFieldLabel(constants.Admin_BANNER());
  isBanner.setBoxLabel(""String_Node_Str"");
  isBanner.setValue(false);
  isBanner.addListener(Events.Change,new Listener<BaseEvent>(){
    @Override public void handleEvent(    BaseEvent be){
      if (isBanner.getValue()) {
        posBanner.removeAll();
        for (int i=1; i < 7; i++) {
          posBanner.add(i);
        }
        posBanner.setEnabled(true);
        posBanner.setAllowBlank(false);
      }
 else {
        posBanner.removeAll();
        posBanner.setValue(null);
        posBanner.setAllowBlank(true);
        posBanner.setEnabled(false);
      }
    }
  }
);
  containerList.addListener(Events.Select,new Listener<BaseEvent>(){
    @Override public void handleEvent(    BaseEvent be){
      LayoutDTO container=null;
      if (containerList.getValue() != null) {
        if (containerList.getValue() instanceof ProjectBannerDTO) {
          container=((ProjectBannerDTO)containerList.getValue()).getLayoutDTO();
          isBanner.setValue(true);
          posBanner.setAllowBlank(false);
          posBanner.setEnabled(true);
        }
 else         if (containerList.getValue() instanceof ProjectDetailsDTO) {
          container=((ProjectDetailsDTO)containerList.getValue()).getLayoutDTO();
        }
 else         if (containerList.getValue() instanceof PhaseModelDTO) {
          container=((PhaseModelDTO)containerList.getValue()).getLayoutDTO();
        }
 else         if (containerList.getValue() instanceof OrgUnitDetailsDTO) {
          container=((OrgUnitDetailsDTO)containerList.getValue()).getLayout();
        }
      }
      if (container != null) {
        groupsStore.removeAll();
        for (        LayoutGroupDTO lg : container.getLayoutGroupsDTO()) {
          groupsStore.add(lg);
        }
        addNewGroupsToStore(container,groupsStore,addedGroups);
        groupList.setValue(groupsStore.getAt(0));
      }
    }
  }
);
  orderField=new NumberField();
  orderField.setAllowBlank(false);
  orderField.setFieldLabel(constants.adminFlexibleOrder());
  orderField.clear();
  oldFieldProperties.put(AdminUtil.PROP_FX_IN_BANNER,false);
  oldFieldProperties.put(AdminUtil.PROP_FX_POS_IN_BANNER,-1);
  if (isProject) {
    if (flexibleElement != null) {
      BaseModelData container=flexibleElement.getContainerModel();
      containerList.setValue(flexibleElement.getContainerModel());
      groupList.setValue(flexibleElement.getConstraint().getParentLayoutGroupDTO());
      orderField.setValue(flexibleElement.getConstraint().getSortOrder());
      groupsStore.removeAll();
      if (container instanceof PhaseModelDTO) {
        for (        LayoutGroupDTO groupChoice : ((PhaseModelDTO)container).getLayoutDTO().getLayoutGroupsDTO()) {
          groupsStore.add(groupChoice);
        }
        addNewGroupsToStore(((PhaseModelDTO)container).getLayoutDTO(),groupsStore,addedGroups);
      }
 else {
        for (        LayoutGroupDTO groupChoice : ((ProjectDetailsDTO)container).getLayoutDTO().getLayoutGroupsDTO()) {
          groupsStore.add(groupChoice);
        }
        addNewGroupsToStore(((ProjectDetailsDTO)container).getLayoutDTO(),groupsStore,addedGroups);
      }
      if (flexibleElement.getBannerConstraint() != null) {
        posBanner.setSimpleValue(flexibleElement.getBannerConstraint().getSortOrder());
        isBanner.setValue(true);
        oldFieldProperties.put(AdminUtil.PROP_FX_IN_BANNER,true);
        oldFieldProperties.put(AdminUtil.PROP_FX_POS_IN_BANNER,flexibleElement.getBannerConstraint().getSortOrder());
        oldFieldProperties.put(AdminUtil.PROP_FX_LC_BANNER,flexibleElement.getBannerConstraint());
      }
      oldFieldProperties.put(AdminUtil.PROP_FX_ORDER_IN_GROUP,new Integer(flexibleElement.getConstraint().getSortOrder()));
      oldFieldProperties.put(AdminUtil.PROP_FX_GROUP,flexibleElement.getConstraint().getParentLayoutGroupDTO());
      oldFieldProperties.put(AdminUtil.PROP_FX_LC,flexibleElement.getConstraint());
    }
    containersStore.add(projectModelToUpdate.getProjectDetailsDTO());
    for (    PhaseModelDTO p : projectModelToUpdate.getPhaseModelsDTO()) {
      containersStore.add(p);
    }
  }
 else {
    if (flexibleElement != null) {
      BaseModelData container=flexibleElement.getContainerModel();
      containerList.setValue(flexibleElement.getContainerModel());
      groupList.setValue(flexibleElement.getConstraint().getParentLayoutGroupDTO());
      orderField.setValue(flexibleElement.getConstraint().getSortOrder());
      groupsStore.removeAll();
      for (      LayoutGroupDTO groupChoice : ((OrgUnitDetailsDTO)container).getLayout().getLayoutGroupsDTO()) {
        groupsStore.add(groupChoice);
      }
      addNewGroupsToStore(((OrgUnitDetailsDTO)container).getLayout(),groupsStore,addedGroups);
      if (flexibleElement.getBannerConstraint() != null) {
        posBanner.setSimpleValue(flexibleElement.getBannerConstraint().getSortOrder());
        isBanner.setValue(true);
        oldFieldProperties.put(AdminUtil.PROP_FX_IN_BANNER,true);
        oldFieldProperties.put(AdminUtil.PROP_FX_POS_IN_BANNER,flexibleElement.getBannerConstraint().getSortOrder());
        oldFieldProperties.put(AdminUtil.PROP_FX_LC_BANNER,flexibleElement.getBannerConstraint());
      }
      oldFieldProperties.put(AdminUtil.PROP_FX_ORDER_IN_GROUP,new Integer(flexibleElement.getConstraint().getSortOrder()));
      oldFieldProperties.put(AdminUtil.PROP_FX_GROUP,flexibleElement.getConstraint().getParentLayoutGroupDTO());
      oldFieldProperties.put(AdminUtil.PROP_FX_LC,flexibleElement.getConstraint());
    }
    containersStore.add(orgUnitModelToUpdate.getDetails());
  }
  containerList.setStore(containersStore);
  commonPanel.add(containerList);
  groupList.setStore(groupsStore);
  commonPanel.add(groupList);
  commonPanel.add(orderField);
  commonPanel.add(isBanner);
  commonPanel.add(posBanner);
  validates=new CheckBox();
  validates.setFieldLabel(constants.adminFlexibleCompulsory());
  validates.setBoxLabel(""String_Node_Str"");
  validates.setValue(false);
  if (flexibleElement != null) {
    validates.setValue(flexibleElement.getValidates());
    oldFieldProperties.put(AdminUtil.PROP_FX_IS_COMPULSARY,flexibleElement.getValidates());
  }
  commonPanel.add(validates);
  privacyGroupsListCombo=new ComboBox<PrivacyGroupDTO>();
  privacyGroupsListCombo.setEditable(false);
  privacyGroupsListCombo.setFieldLabel(constants.adminPrivacyGroups());
  privacyGroupsListCombo.setDisplayField(""String_Node_Str"");
  privacyGroupsListCombo.setValueField(""String_Node_Str"");
  privacyGroupsListCombo.setTriggerAction(TriggerAction.ALL);
  final ListStore<PrivacyGroupDTO> privacyGroupsStore=new ListStore<PrivacyGroupDTO>();
  dispatcher.execute(new GetPrivacyGroups(),null,new AsyncCallback<PrivacyGroupsListResult>(){
    @Override public void onFailure(    Throwable arg0){
      privacyGroupsListCombo.setEmptyText(I18N.CONSTANTS.adminChoiceProblem());
    }
    @Override public void onSuccess(    PrivacyGroupsListResult result){
      privacyGroupsListCombo.setEmptyText(I18N.CONSTANTS.adminPrivacyGroupChoice());
      privacyGroupsStore.removeAll();
      if (result != null) {
        privacyGroupsStore.add(result.getList());
        privacyGroupsStore.commitChanges();
      }
    }
  }
);
  privacyGroupsListCombo.setStore(privacyGroupsStore);
  if (flexibleElement != null && flexibleElement.getPrivacyGroup() != null) {
    privacyGroupsListCombo.setValue(flexibleElement.getPrivacyGroup());
    oldFieldProperties.put(AdminUtil.PROP_FX_PRIVACY_GROUP,flexibleElement.getPrivacyGroup());
  }
  commonPanel.add(privacyGroupsListCombo);
  isAmendable=new CheckBox();
  isAmendable.setBoxLabel(""String_Node_Str"");
  isAmendable.setFieldLabel(constants.adminFlexibleAmendable());
  isAmendable.setValue(false);
  if (flexibleElement != null) {
    isAmendable.setValue(flexibleElement.getAmendable());
    oldFieldProperties.put(AdminUtil.PROP_FX_AMENDABLE,flexibleElement.getAmendable());
  }
  commonPanel.add(isAmendable);
  final Button createButton=new Button(I18N.CONSTANTS.save(),IconImageBundle.ICONS.save());
  createButton.addListener(Events.OnClick,new Listener<ButtonEvent>(){
    @Override public void handleEvent(    ButtonEvent be){
      createFlexibleElement(callback);
    }
  }
);
  final ContentPanel form=new ContentPanel();
  form.setHeight(450);
  form.setHeaderVisible(false);
  form.setLayout(new BorderLayout());
  final BorderLayoutData leftLayoutData=new BorderLayoutData(LayoutRegion.WEST);
  leftLayoutData.setSize(320);
  form.add(commonPanel,leftLayoutData);
  final BorderLayoutData rightLayoutData=new BorderLayoutData(LayoutRegion.CENTER);
  rightLayoutData.setMargins(new Margins(0,0,2,4));
  rightLayoutData.setSize(200);
  form.add(specificsPanel,rightLayoutData);
  final VBoxLayoutData topVBoxLayoutData=new VBoxLayoutData();
  topVBoxLayoutData.setFlex(1.0);
  add(form,topVBoxLayoutData);
  ToolBar toolbar=new ToolBar();
  toolbar.setAlignment(HorizontalAlignment.CENTER);
  toolbar.add(createButton);
  setBottomComponent(toolbar);
  layout();
}","public ElementForm(Dispatcher dispatcher,final AsyncCallback<UpdateModelResult> callback,final FlexibleElementDTO flexibleElement,ProjectModelDTO projectModelToUpdate,OrgUnitModelDTO orgUnitModelToUpdate,final List<LayoutGroupDTO> addedGroups){
  final VBoxLayout mainPanelLayout=new VBoxLayout();
  mainPanelLayout.setVBoxLayoutAlign(VBoxLayout.VBoxLayoutAlign.STRETCH);
  setLayout(mainPanelLayout);
  setHeaderVisible(false);
  if (projectModelToUpdate != null) {
    isProject=true;
  }
 else {
    isProject=false;
  }
  this.dispatcher=dispatcher;
  this.projectModelToUpdate=projectModelToUpdate;
  this.orgUnitModelToUpdate=orgUnitModelToUpdate;
  this.flexibleElementToUpdate=flexibleElement;
  UIConstants constants=GWT.create(UIConstants.class);
  specificsPanel=new FormPanel();
  specificsPanel.setHeaderVisible(false);
  specificsPanel.setBorders(true);
  specificsPanel.hide();
  reportModelList=new ComboBox<ReportModelDTO>();
  reportModelList.setEditable(false);
  reportModelList.hide();
  reportModelList.setFieldLabel(I18N.CONSTANTS.adminReportName());
  reportModelList.setDisplayField(""String_Node_Str"");
  reportModelList.setValueField(""String_Node_Str"");
  reportModelList.setTriggerAction(TriggerAction.ALL);
  reportModelsStore=new ListStore<ReportModelDTO>();
  dispatcher.execute(new GetReportModels(),null,new AsyncCallback<ReportModelsListResult>(){
    @Override public void onFailure(    Throwable arg0){
      reportModelList.setEmptyText(I18N.CONSTANTS.adminChoiceProblem());
    }
    @Override public void onSuccess(    ReportModelsListResult result){
      reportModelList.setEmptyText(I18N.CONSTANTS.adminReportName());
      reportModelsStore.removeAll();
      if (result != null) {
        reportModelsStore.add(result.getList());
        reportModelsStore.commitChanges();
      }
      if (flexibleElement != null) {
        if (flexibleElement instanceof ReportElementDTO) {
          if (((ReportElementDTO)flexibleElement).getModelId() != null) {
            for (            ReportModelDTO reportModel : reportModelsStore.getModels()) {
              if (reportModel.getId() == ((ReportElementDTO)flexibleElement).getModelId()) {
                reportModelList.setValue(reportModel);
              }
            }
          }
        }
      }
    }
  }
);
  reportModelList.setStore(reportModelsStore);
  maxLimitField=new NumberField();
  maxLimitField.setFieldLabel(I18N.CONSTANTS.adminFlexibleMaxLimit());
  maxLimitField.hide();
  textAreaTypeList=new SimpleComboBox<String>();
  textAreaTypeList.setTriggerAction(TriggerAction.ALL);
  textAreaTypeList.setEditable(false);
  textAreaTypeList.hide();
  textAreaTypeList.setFieldLabel(I18N.CONSTANTS.adminFlexibleTextType());
  List<String> textTypes=new ArrayList<String>();
  textTypes.add(I18N.CONSTANTS.adminFlexibleTextTypeP());
  textTypes.add(I18N.CONSTANTS.adminFlexibleTextTypeT());
  textTypes.add(I18N.CONSTANTS.adminFlexibleTextTypeN());
  textTypes.add(I18N.CONSTANTS.adminFlexibleTextTypeD());
  textAreaTypeList.add(textTypes);
  minLimitField=new NumberField();
  minLimitField.setFieldLabel(I18N.CONSTANTS.adminFlexibleMinLimit());
  minLimitField.hide();
  lengthField=new NumberField();
  lengthField.setFieldLabel(I18N.CONSTANTS.adminFlexibleLength());
  lengthField.hide();
  isDecimal=new CheckBox();
  isDecimal.hide();
  isDecimal.setBoxLabel(""String_Node_Str"");
  isDecimal.setFieldLabel(I18N.CONSTANTS.adminFlexibleDecimal());
  isDecimal.setLabelSeparator(""String_Node_Str"");
  isMultipleQ=new CheckBox();
  isMultipleQ.hide();
  isMultipleQ.setBoxLabel(""String_Node_Str"");
  isMultipleQ.setFieldLabel(I18N.CONSTANTS.adminFlexibleMultipleQ());
  isMultipleQ.setLabelSeparator(""String_Node_Str"");
  isLinkedToQuality=new CheckBox();
  isLinkedToQuality.hide();
  isLinkedToQuality.setBoxLabel(""String_Node_Str"");
  isLinkedToQuality.setFieldLabel(I18N.CONSTANTS.adminFlexibleLinkedToQuality());
  isLinkedToQuality.setLabelSeparator(""String_Node_Str"");
  defaultNoCategory.setLabel(I18N.CONSTANTS.adminFlexibleNoLinkedCategory());
  defaultNoCategory.setId(-1);
  linkedCategory=new ComboBox<CategoryTypeDTO>();
  linkedCategory.setEditable(false);
  linkedCategory.hide();
  linkedCategory.setDisplayField(I18N.CONSTANTS.adminFlexibleNoLinkedCategory());
  linkedCategory.setFieldLabel(I18N.CONSTANTS.adminFlexibleLinkedCategory());
  linkedCategory.setDisplayField(""String_Node_Str"");
  linkedCategory.setValueField(""String_Node_Str"");
  linkedCategory.setTriggerAction(TriggerAction.ALL);
  final ListStore<CategoryTypeDTO> linkedCategoriesStore=new ListStore<CategoryTypeDTO>();
  linkedCategoriesStore.add(defaultNoCategory);
  dispatcher.execute(new GetCategories(),null,new AsyncCallback<CategoriesListResult>(){
    @Override public void onFailure(    Throwable arg0){
      linkedCategory.setEmptyText(I18N.CONSTANTS.adminChoiceProblem());
    }
    @Override public void onSuccess(    CategoriesListResult result){
      linkedCategory.setEmptyText(I18N.CONSTANTS.adminUserCreationProfileChoice());
      linkedCategoriesStore.removeAll();
      linkedCategoriesStore.add(defaultNoCategory);
      if (result != null) {
        linkedCategoriesStore.add(result.getList());
        linkedCategoriesStore.commitChanges();
      }
    }
  }
);
  linkedCategory.setStore(linkedCategoriesStore);
  for (int i=0; i < MAX_TENTATIVES_FOR_CHOICES; i++) {
    final ClickableLabel label=new ClickableLabel();
    label.addClickHandler(new ClickHandler(){
      @Override public void onClick(      ClickEvent arg0){
        label.hide();
        selectedChoicesLabels.remove(label.getText());
        if (selectedChoicesLabels.size() == 0) {
          linkedCategory.setEnabled(true);
        }
      }
    }
);
    label.hide();
    selectableChoices.put(i,label);
  }
  questionChoice=new TextField<String>();
  questionChoice.hide();
  qChoicesAddGrid.setVisible(false);
  qChoicesAddGrid.getCellFormatter().setWidth(0,0,(LABEL_WIDTH) + ""String_Node_Str"");
  qChoicesAddGrid.setCellPadding(0);
  qChoicesAddGrid.setCellSpacing(0);
  qChoicesAddGrid.setWidget(0,0,new LabelField(I18N.CONSTANTS.adminFlexibleQChoices() + ""String_Node_Str""));
  qChoicesAddGrid.setWidget(0,1,questionChoice);
  questionChoice.setHideLabel(false);
  addChoiceButton.hide();
  addChoiceButton.addListener(Events.OnClick,new Listener<ButtonEvent>(){
    @Override public void handleEvent(    ButtonEvent be){
      if (questionChoice.getValue() != null) {
        if (!selectedChoicesLabels.contains(questionChoice.getValue())) {
          if (num < MAX_TENTATIVES_FOR_CHOICES) {
            linkedCategory.setEnabled(false);
            selectableChoices.get(num).setText(questionChoice.getValue());
            selectableChoices.get(num).show();
            num++;
            selectedChoicesLabels.add(questionChoice.getValue());
          }
 else {
            MessageBox.alert(I18N.CONSTANTS.adminMaxAttempts(),I18N.CONSTANTS.adminMaxAttemptsQChoices(),null);
            ElementForm.this.removeFromParent();
          }
        }
      }
    }
  }
);
  qChoicesAddGrid.setWidget(0,2,addChoiceButton);
  linkedCategory.addListener(Events.Select,new Listener<BaseEvent>(){
    @Override public void handleEvent(    BaseEvent be){
      if (linkedCategory.getValue() == null || defaultNoCategory.equals(linkedCategory.getValue())) {
        questionChoice.setEnabled(true);
        addChoiceButton.setEnabled(true);
      }
 else {
        questionChoice.setEnabled(false);
        addChoiceButton.setEnabled(false);
        for (        ClickableLabel selected : selectableChoices.values()) {
          selected.setEnabled(false);
        }
      }
    }
  }
);
  posBanner=new SimpleComboBox<Integer>();
  posBanner.setTriggerAction(TriggerAction.ALL);
  posBanner.setEditable(false);
  posBanner.setFieldLabel(constants.adminFlexibleBannerPosition());
  posBanner.removeAll();
  for (int i=1; i < 7; i++) {
    posBanner.add(i);
  }
  posBanner.setAllowBlank(true);
  posBanner.setEnabled(false);
  posBanner.hide();
  isBanner=new CheckBox();
  isBanner.setFieldLabel(constants.Admin_BANNER());
  isBanner.setBoxLabel(""String_Node_Str"");
  isBanner.setValue(false);
  isBanner.addListener(Events.Change,new Listener<BaseEvent>(){
    @Override public void handleEvent(    BaseEvent be){
      if (isBanner.getValue()) {
        posBanner.removeAll();
        for (int i=1; i < 7; i++) {
          posBanner.add(i);
        }
        posBanner.setEnabled(true);
        posBanner.setAllowBlank(false);
      }
 else {
        posBanner.removeAll();
        posBanner.setValue(null);
        posBanner.setAllowBlank(true);
        posBanner.setEnabled(false);
      }
    }
  }
);
  isBanner.hide();
  specificsPanel.add(isBanner);
  specificsPanel.add(posBanner);
  specificsPanel.add(reportModelList);
  specificsPanel.add(textAreaTypeList);
  specificsPanel.add(lengthField);
  specificsPanel.add(isDecimal);
  specificsPanel.add(minLimitField);
  specificsPanel.add(maxLimitField);
  specificsPanel.add(isMultipleQ);
  specificsPanel.add(isLinkedToQuality);
  specificsPanel.add(linkedCategory);
  specificsPanel.add(qChoicesAddGrid);
  for (  ClickableLabel selected : selectableChoices.values()) {
    selected.hide();
    specificsPanel.add(selected);
  }
  commonPanel=new FormPanel();
  commonPanel.setHeaderVisible(false);
  htmlArea=new HtmlEditor();
  htmlArea.hide();
  htmlArea.setEnableAlignments(false);
  htmlArea.setEnableLinks(false);
  htmlArea.setEnableFont(false);
  htmlArea.setEnableLists(false);
  htmlArea.setEnableColors(false);
  htmlArea.setSourceEditMode(false);
  htmlArea.setHeight(75);
  htmlArea.setFieldLabel(constants.adminFlexibleName());
  if (flexibleElement != null && flexibleElement.getLabel() != null) {
    htmlArea.setValue(flexibleElement.getLabel());
    oldFieldProperties.put(AdminUtil.PROP_FX_NAME,flexibleElement.getLabel());
  }
  LabelField label=new LabelField();
  label.hide();
  label.setFieldLabel(constants.adminFlexibleName());
  if (flexibleElement != null && flexibleElement.getElementType() != null) {
    if (ElementTypeEnum.DEFAULT.equals(flexibleElement.getElementType())) {
      label.setText(DefaultFlexibleElementType.getName(((DefaultFlexibleElementDTO)flexibleElement).getType()));
      label.show();
      oldFieldProperties.put(AdminUtil.PROP_FX_NAME,DefaultFlexibleElementType.getName(((DefaultFlexibleElementDTO)flexibleElement).getType()));
      htmlArea.setValue(DefaultFlexibleElementType.getName(((DefaultFlexibleElementDTO)flexibleElement).getType()));
    }
 else {
      htmlArea.show();
    }
  }
 else {
    htmlArea.show();
  }
  commonPanel.add(label);
  commonPanel.add(htmlArea);
  typeList=new SimpleComboBox<String>();
  typeList.setEditable(false);
  typeList.addListener(Events.Select,new Listener<BaseEvent>(){
    @Override public void handleEvent(    BaseEvent be){
      hideAllSpecificAttributes();
      showSpecificAttributes(typeList.getSimpleValue(),flexibleElementToUpdate,true);
    }
  }
);
  typeList.setFieldLabel(constants.adminFlexibleType());
  typeList.setAllowBlank(false);
  typeList.setTriggerAction(TriggerAction.ALL);
  List<String> values=new ArrayList<String>();
  for (  ElementTypeEnum e : ElementTypeEnum.values()) {
    if (!ElementTypeEnum.DEFAULT.equals(e) && !ElementTypeEnum.TRIPLETS.equals(e))     values.add(ElementTypeEnum.getName(e));
  }
  typeList.add(values);
  if (flexibleElement != null && flexibleElement.getElementType() != null) {
    String typeOfElement=ElementTypeEnum.getName(flexibleElement.getElementType());
    typeList.setSimpleValue(typeOfElement);
    showSpecificAttributes(typeOfElement,flexibleElement,false);
    oldFieldProperties.put(AdminUtil.PROP_FX_TYPE,flexibleElement.getElementType());
    if (ElementTypeEnum.DEFAULT.equals(flexibleElement.getElementType())) {
      typeList.setEnabled(false);
    }
  }
 else   typeList.setEmptyText(I18N.CONSTANTS.adminFlexibleType());
  commonPanel.add(typeList);
  final ListStore<BaseModelData> containersStore=new ListStore<BaseModelData>();
  containerList=new ComboBox<BaseModelData>();
  containerList.setEditable(false);
  containerList.setDisplayField(""String_Node_Str"");
  containerList.setValueField(""String_Node_Str"");
  containerList.setFieldLabel(I18N.CONSTANTS.adminFlexibleContainer());
  containerList.setAllowBlank(false);
  containerList.setTriggerAction(TriggerAction.ALL);
  if (flexibleElement == null)   containerList.setEmptyText(I18N.CONSTANTS.adminFlexibleContainerChoice());
  final ListStore<LayoutGroupDTO> groupsStore=new ListStore<LayoutGroupDTO>();
  groupList=new ComboBox<LayoutGroupDTO>();
  groupList.setEditable(false);
  groupList.setFieldLabel(constants.adminFlexibleGroup());
  groupList.setDisplayField(""String_Node_Str"");
  groupList.setValueField(""String_Node_Str"");
  groupList.setTriggerAction(TriggerAction.ALL);
  containerList.addListener(Events.Select,new Listener<BaseEvent>(){
    @Override public void handleEvent(    BaseEvent be){
      LayoutDTO container=null;
      if (containerList.getValue() != null) {
        if (containerList.getValue() instanceof ProjectBannerDTO) {
          container=((ProjectBannerDTO)containerList.getValue()).getLayoutDTO();
          isBanner.setValue(true);
          posBanner.setAllowBlank(false);
          posBanner.setEnabled(true);
        }
 else         if (containerList.getValue() instanceof ProjectDetailsDTO) {
          container=((ProjectDetailsDTO)containerList.getValue()).getLayoutDTO();
        }
 else         if (containerList.getValue() instanceof PhaseModelDTO) {
          container=((PhaseModelDTO)containerList.getValue()).getLayoutDTO();
        }
 else         if (containerList.getValue() instanceof OrgUnitDetailsDTO) {
          container=((OrgUnitDetailsDTO)containerList.getValue()).getLayout();
        }
      }
      if (container != null) {
        groupsStore.removeAll();
        for (        LayoutGroupDTO lg : container.getLayoutGroupsDTO()) {
          groupsStore.add(lg);
        }
        addNewGroupsToStore(container,groupsStore,addedGroups);
        groupList.setValue(groupsStore.getAt(0));
      }
    }
  }
);
  orderField=new NumberField();
  orderField.setAllowBlank(false);
  orderField.setFieldLabel(constants.adminFlexibleOrder());
  orderField.clear();
  oldFieldProperties.put(AdminUtil.PROP_FX_IN_BANNER,false);
  oldFieldProperties.put(AdminUtil.PROP_FX_POS_IN_BANNER,-1);
  if (isProject) {
    if (flexibleElement != null) {
      BaseModelData container=flexibleElement.getContainerModel();
      containerList.setValue(flexibleElement.getContainerModel());
      groupList.setValue(flexibleElement.getConstraint().getParentLayoutGroupDTO());
      orderField.setValue(flexibleElement.getConstraint().getSortOrder());
      groupsStore.removeAll();
      if (container instanceof PhaseModelDTO) {
        for (        LayoutGroupDTO groupChoice : ((PhaseModelDTO)container).getLayoutDTO().getLayoutGroupsDTO()) {
          groupsStore.add(groupChoice);
        }
        addNewGroupsToStore(((PhaseModelDTO)container).getLayoutDTO(),groupsStore,addedGroups);
      }
 else {
        for (        LayoutGroupDTO groupChoice : ((ProjectDetailsDTO)container).getLayoutDTO().getLayoutGroupsDTO()) {
          groupsStore.add(groupChoice);
        }
        addNewGroupsToStore(((ProjectDetailsDTO)container).getLayoutDTO(),groupsStore,addedGroups);
      }
      if (flexibleElement.getBannerConstraint() != null) {
        posBanner.setSimpleValue(flexibleElement.getBannerConstraint().getSortOrder());
        isBanner.setValue(true);
        oldFieldProperties.put(AdminUtil.PROP_FX_IN_BANNER,true);
        oldFieldProperties.put(AdminUtil.PROP_FX_POS_IN_BANNER,flexibleElement.getBannerConstraint().getSortOrder());
        oldFieldProperties.put(AdminUtil.PROP_FX_LC_BANNER,flexibleElement.getBannerConstraint());
      }
      oldFieldProperties.put(AdminUtil.PROP_FX_ORDER_IN_GROUP,new Integer(flexibleElement.getConstraint().getSortOrder()));
      oldFieldProperties.put(AdminUtil.PROP_FX_GROUP,flexibleElement.getConstraint().getParentLayoutGroupDTO());
      oldFieldProperties.put(AdminUtil.PROP_FX_LC,flexibleElement.getConstraint());
    }
    containersStore.add(projectModelToUpdate.getProjectDetailsDTO());
    for (    PhaseModelDTO p : projectModelToUpdate.getPhaseModelsDTO()) {
      containersStore.add(p);
    }
  }
 else {
    if (flexibleElement != null) {
      BaseModelData container=flexibleElement.getContainerModel();
      containerList.setValue(flexibleElement.getContainerModel());
      groupList.setValue(flexibleElement.getConstraint().getParentLayoutGroupDTO());
      orderField.setValue(flexibleElement.getConstraint().getSortOrder());
      groupsStore.removeAll();
      for (      LayoutGroupDTO groupChoice : ((OrgUnitDetailsDTO)container).getLayout().getLayoutGroupsDTO()) {
        groupsStore.add(groupChoice);
      }
      addNewGroupsToStore(((OrgUnitDetailsDTO)container).getLayout(),groupsStore,addedGroups);
      if (flexibleElement.getBannerConstraint() != null) {
        posBanner.setSimpleValue(flexibleElement.getBannerConstraint().getSortOrder());
        isBanner.setValue(true);
        oldFieldProperties.put(AdminUtil.PROP_FX_IN_BANNER,true);
        oldFieldProperties.put(AdminUtil.PROP_FX_POS_IN_BANNER,flexibleElement.getBannerConstraint().getSortOrder());
        oldFieldProperties.put(AdminUtil.PROP_FX_LC_BANNER,flexibleElement.getBannerConstraint());
      }
      oldFieldProperties.put(AdminUtil.PROP_FX_ORDER_IN_GROUP,new Integer(flexibleElement.getConstraint().getSortOrder()));
      oldFieldProperties.put(AdminUtil.PROP_FX_GROUP,flexibleElement.getConstraint().getParentLayoutGroupDTO());
      oldFieldProperties.put(AdminUtil.PROP_FX_LC,flexibleElement.getConstraint());
    }
    containersStore.add(orgUnitModelToUpdate.getDetails());
  }
  containerList.setStore(containersStore);
  commonPanel.add(containerList);
  groupList.setStore(groupsStore);
  commonPanel.add(groupList);
  commonPanel.add(orderField);
  validates=new CheckBox();
  validates.setFieldLabel(constants.adminFlexibleCompulsory());
  validates.setBoxLabel(""String_Node_Str"");
  validates.setValue(false);
  if (flexibleElement != null) {
    validates.setValue(flexibleElement.getValidates());
    oldFieldProperties.put(AdminUtil.PROP_FX_IS_COMPULSARY,flexibleElement.getValidates());
  }
  commonPanel.add(validates);
  privacyGroupsListCombo=new ComboBox<PrivacyGroupDTO>();
  privacyGroupsListCombo.setEditable(false);
  privacyGroupsListCombo.setFieldLabel(constants.adminPrivacyGroups());
  privacyGroupsListCombo.setDisplayField(""String_Node_Str"");
  privacyGroupsListCombo.setValueField(""String_Node_Str"");
  privacyGroupsListCombo.setTriggerAction(TriggerAction.ALL);
  final ListStore<PrivacyGroupDTO> privacyGroupsStore=new ListStore<PrivacyGroupDTO>();
  dispatcher.execute(new GetPrivacyGroups(),null,new AsyncCallback<PrivacyGroupsListResult>(){
    @Override public void onFailure(    Throwable arg0){
      privacyGroupsListCombo.setEmptyText(I18N.CONSTANTS.adminChoiceProblem());
    }
    @Override public void onSuccess(    PrivacyGroupsListResult result){
      privacyGroupsListCombo.setEmptyText(I18N.CONSTANTS.adminPrivacyGroupChoice());
      privacyGroupsStore.removeAll();
      if (result != null) {
        privacyGroupsStore.add(result.getList());
        privacyGroupsStore.commitChanges();
      }
    }
  }
);
  privacyGroupsListCombo.setStore(privacyGroupsStore);
  if (flexibleElement != null && flexibleElement.getPrivacyGroup() != null) {
    privacyGroupsListCombo.setValue(flexibleElement.getPrivacyGroup());
    oldFieldProperties.put(AdminUtil.PROP_FX_PRIVACY_GROUP,flexibleElement.getPrivacyGroup());
  }
  commonPanel.add(privacyGroupsListCombo);
  isAmendable=new CheckBox();
  isAmendable.setBoxLabel(""String_Node_Str"");
  isAmendable.setFieldLabel(constants.adminFlexibleAmendable());
  isAmendable.setValue(false);
  if (flexibleElement != null) {
    isAmendable.setValue(flexibleElement.getAmendable());
    oldFieldProperties.put(AdminUtil.PROP_FX_AMENDABLE,flexibleElement.getAmendable());
  }
  commonPanel.add(isAmendable);
  final Button createButton=new Button(I18N.CONSTANTS.save(),IconImageBundle.ICONS.save());
  createButton.addListener(Events.OnClick,new Listener<ButtonEvent>(){
    @Override public void handleEvent(    ButtonEvent be){
      createFlexibleElement(callback);
    }
  }
);
  final ContentPanel form=new ContentPanel();
  form.setHeight(450);
  form.setHeaderVisible(false);
  form.setLayout(new BorderLayout());
  final BorderLayoutData leftLayoutData=new BorderLayoutData(LayoutRegion.WEST);
  leftLayoutData.setSize(320);
  form.add(commonPanel,leftLayoutData);
  final BorderLayoutData rightLayoutData=new BorderLayoutData(LayoutRegion.CENTER);
  rightLayoutData.setMargins(new Margins(0,0,2,4));
  rightLayoutData.setSize(200);
  form.add(specificsPanel,rightLayoutData);
  final VBoxLayoutData topVBoxLayoutData=new VBoxLayoutData();
  topVBoxLayoutData.setFlex(1.0);
  add(form,topVBoxLayoutData);
  ToolBar toolbar=new ToolBar();
  toolbar.setAlignment(HorizontalAlignment.CENTER);
  toolbar.add(createButton);
  setBottomComponent(toolbar);
  layout();
}",0.944818811554592
35674,"private Grid<OrgUnitModelDTO> buildModelsListGrid(){
  List<ColumnConfig> configs=new ArrayList<ColumnConfig>();
  ColumnConfig column=new ColumnConfig(""String_Node_Str"",I18N.CONSTANTS.adminOrgUnitsModelName(),200);
  configs.add(column);
  column=new ColumnConfig(""String_Node_Str"",I18N.CONSTANTS.adminOrgUnitsModelTitle(),200);
  configs.add(column);
  column=new ColumnConfig(""String_Node_Str"",I18N.CONSTANTS.adminOrgUnitsModelHasBudget(),75);
  configs.add(column);
  column=new ColumnConfig(""String_Node_Str"",I18N.CONSTANTS.adminOrgUnitsModelContainProjects(),75);
  configs.add(column);
  column=new ColumnConfig(""String_Node_Str"",I18N.CONSTANTS.adminOrgUnitsModelMinLevel(),100);
  configs.add(column);
  column=new ColumnConfig(""String_Node_Str"",I18N.CONSTANTS.adminOrgUnitsModelMaxLevel(),100);
  configs.add(column);
  column=new ColumnConfig(""String_Node_Str"",I18N.CONSTANTS.adminProjectModelsStatus(),200);
  column.setRenderer(new GridCellRenderer<OrgUnitModelDTO>(){
    @Override public Object render(    OrgUnitModelDTO model,    String property,    ColumnData config,    int rowIndex,    int colIndex,    ListStore<OrgUnitModelDTO> store,    Grid<OrgUnitModelDTO> grid){
      return model.getStatus() != null ? ProjectModelStatus.getName(model.getStatus()) : ""String_Node_Str"";
    }
  }
);
  configs.add(column);
  column=new ColumnConfig();
  column.setWidth(75);
  column.setAlignment(Style.HorizontalAlignment.RIGHT);
  column.setRenderer(new GridCellRenderer<OrgUnitModelDTO>(){
    @Override public Object render(    final OrgUnitModelDTO model,    final String property,    ColumnData config,    int rowIndex,    int colIndex,    ListStore<OrgUnitModelDTO> store,    Grid<OrgUnitModelDTO> grid){
      Button button=new Button(I18N.CONSTANTS.edit());
      button.setItemId(UIActions.edit);
      button.addListener(Events.OnClick,new Listener<ButtonEvent>(){
        @Override public void handleEvent(        ButtonEvent be){
          final AdminPageState derivation=new AdminPageState(AdminOrgUnitModelsView.this.currentState.getCurrentSection());
          derivation.setModel(model.getId());
          derivation.setSubModel(I18N.CONSTANTS.adminProjectModelFields());
          derivation.setIsProject(false);
          AdminOrgUnitModelsView.this.eventBus.fireEvent(new NavigationEvent(NavigationHandler.NavigationRequested,derivation));
        }
      }
);
      return button;
    }
  }
);
  configs.add(column);
  column=new ColumnConfig();
  column.setWidth(75);
  column.setAlignment(Style.HorizontalAlignment.RIGHT);
  column.setRenderer(new GridCellRenderer<OrgUnitModelDTO>(){
    @Override public Object render(    final OrgUnitModelDTO model,    final String property,    ColumnData config,    int rowIndex,    int colIndex,    ListStore<OrgUnitModelDTO> store,    Grid<OrgUnitModelDTO> grid){
      Button buttonExport=new Button(I18N.CONSTANTS.export());
      buttonExport.setItemId(UIActions.exportModel);
      buttonExport.addListener(Events.OnClick,new Listener<ButtonEvent>(){
        @Override public void handleEvent(        ButtonEvent be){
          AdminModelActionListener listener=new AdminModelActionListener(AdminOrgUnitModelsView.this,dispatcher,false);
          listener.setModelId(model.getId());
          listener.setIsOrgUnit(true);
          listener.setIsReport(false);
          listener.onUIAction(UIActions.exportModel);
        }
      }
);
      return buttonExport;
    }
  }
);
  configs.add(column);
  column=new ColumnConfig();
  column.setWidth(60);
  column.setAlignment(Style.HorizontalAlignment.CENTER);
  column.setRenderer(new GridCellRenderer<OrgUnitModelDTO>(){
    @Override public Object render(    final OrgUnitModelDTO model,    final String property,    ColumnData config,    int rowIndex,    int colIndex,    ListStore<OrgUnitModelDTO> store,    Grid<OrgUnitModelDTO> grid){
      Button buttonCopy=new Button(I18N.CONSTANTS.adminModelCopy());
      buttonCopy.setItemId(UIActions.copyModel);
      buttonCopy.addListener(Events.OnClick,new Listener<ButtonEvent>(){
        @Override public void handleEvent(        ButtonEvent be){
          AdminModelActionListener listener=new AdminModelActionListener(AdminOrgUnitModelsView.this,dispatcher,false);
          listener.setModelId(model.getId());
          listener.setIsOrgUnit(true);
          listener.onUIAction(UIActions.copyModel);
        }
      }
);
      return buttonCopy;
    }
  }
);
  configs.add(column);
  ColumnModel cm=new ColumnModel(configs);
  Grid<OrgUnitModelDTO> grid=new Grid<OrgUnitModelDTO>(modelsStore,cm);
  return grid;
}","private Grid<OrgUnitModelDTO> buildModelsListGrid(){
  List<ColumnConfig> configs=new ArrayList<ColumnConfig>();
  ColumnConfig column=new ColumnConfig(""String_Node_Str"",I18N.CONSTANTS.adminOrgUnitsModelName(),200);
  configs.add(column);
  column=new ColumnConfig(""String_Node_Str"",I18N.CONSTANTS.adminOrgUnitsModelTitle(),200);
  configs.add(column);
  column=new ColumnConfig(""String_Node_Str"",I18N.CONSTANTS.adminOrgUnitsModelHasBudget(),75);
  configs.add(column);
  column=new ColumnConfig(""String_Node_Str"",I18N.CONSTANTS.adminOrgUnitsModelContainProjects(),75);
  configs.add(column);
  column=new ColumnConfig(""String_Node_Str"",I18N.CONSTANTS.adminProjectModelsStatus(),200);
  column.setRenderer(new GridCellRenderer<OrgUnitModelDTO>(){
    @Override public Object render(    OrgUnitModelDTO model,    String property,    ColumnData config,    int rowIndex,    int colIndex,    ListStore<OrgUnitModelDTO> store,    Grid<OrgUnitModelDTO> grid){
      return model.getStatus() != null ? ProjectModelStatus.getName(model.getStatus()) : ""String_Node_Str"";
    }
  }
);
  configs.add(column);
  column=new ColumnConfig();
  column.setWidth(75);
  column.setAlignment(Style.HorizontalAlignment.RIGHT);
  column.setRenderer(new GridCellRenderer<OrgUnitModelDTO>(){
    @Override public Object render(    final OrgUnitModelDTO model,    final String property,    ColumnData config,    int rowIndex,    int colIndex,    ListStore<OrgUnitModelDTO> store,    Grid<OrgUnitModelDTO> grid){
      Button button=new Button(I18N.CONSTANTS.edit());
      button.setItemId(UIActions.edit);
      button.addListener(Events.OnClick,new Listener<ButtonEvent>(){
        @Override public void handleEvent(        ButtonEvent be){
          final AdminPageState derivation=new AdminPageState(AdminOrgUnitModelsView.this.currentState.getCurrentSection());
          derivation.setModel(model.getId());
          derivation.setSubModel(I18N.CONSTANTS.adminProjectModelFields());
          derivation.setIsProject(false);
          AdminOrgUnitModelsView.this.eventBus.fireEvent(new NavigationEvent(NavigationHandler.NavigationRequested,derivation));
        }
      }
);
      return button;
    }
  }
);
  configs.add(column);
  column=new ColumnConfig();
  column.setWidth(75);
  column.setAlignment(Style.HorizontalAlignment.RIGHT);
  column.setRenderer(new GridCellRenderer<OrgUnitModelDTO>(){
    @Override public Object render(    final OrgUnitModelDTO model,    final String property,    ColumnData config,    int rowIndex,    int colIndex,    ListStore<OrgUnitModelDTO> store,    Grid<OrgUnitModelDTO> grid){
      Button buttonExport=new Button(I18N.CONSTANTS.export());
      buttonExport.setItemId(UIActions.exportModel);
      buttonExport.addListener(Events.OnClick,new Listener<ButtonEvent>(){
        @Override public void handleEvent(        ButtonEvent be){
          AdminModelActionListener listener=new AdminModelActionListener(AdminOrgUnitModelsView.this,dispatcher,false);
          listener.setModelId(model.getId());
          listener.setIsOrgUnit(true);
          listener.setIsReport(false);
          listener.onUIAction(UIActions.exportModel);
        }
      }
);
      return buttonExport;
    }
  }
);
  configs.add(column);
  column=new ColumnConfig();
  column.setWidth(60);
  column.setAlignment(Style.HorizontalAlignment.CENTER);
  column.setRenderer(new GridCellRenderer<OrgUnitModelDTO>(){
    @Override public Object render(    final OrgUnitModelDTO model,    final String property,    ColumnData config,    int rowIndex,    int colIndex,    ListStore<OrgUnitModelDTO> store,    Grid<OrgUnitModelDTO> grid){
      Button buttonCopy=new Button(I18N.CONSTANTS.adminModelCopy());
      buttonCopy.setItemId(UIActions.copyModel);
      buttonCopy.addListener(Events.OnClick,new Listener<ButtonEvent>(){
        @Override public void handleEvent(        ButtonEvent be){
          AdminModelActionListener listener=new AdminModelActionListener(AdminOrgUnitModelsView.this,dispatcher,false);
          listener.setModelId(model.getId());
          listener.setIsOrgUnit(true);
          listener.onUIAction(UIActions.copyModel);
        }
      }
);
      return buttonCopy;
    }
  }
);
  configs.add(column);
  ColumnModel cm=new ColumnModel(configs);
  Grid<OrgUnitModelDTO> grid=new Grid<OrgUnitModelDTO>(modelsStore,cm);
  return grid;
}",0.973866428411883
35675,"@Override public Object create(User user,PropertyMap properties){
  orgUnitModel=(OrgUnitModelDTO)properties.get(AdminUtil.ADMIN_ORG_UNIT_MODEL);
  if (orgUnitModel != null && ProjectModelStatus.DRAFT.equals(orgUnitModel.getStatus())) {
    if (orgUnitModel.getId() != -1) {
      update(user,orgUnitModel,properties);
      if (modelToUpdate != null) {
        OrgUnitModelDTO orgUnitDTOUpdated=mapper.map(modelToUpdate,OrgUnitModelDTO.class);
        return orgUnitDTOUpdated;
      }
    }
 else {
      OrgUnitModel oM=createOrgUnitModel(null,properties,user);
      OrgUnitDetails oMDetails=new OrgUnitDetails();
      Layout oMDetailsLayout=new Layout();
      oMDetailsLayout.setColumnsCount(1);
      oMDetailsLayout.setRowsCount(4);
      oMDetails.setLayout(oMDetailsLayout);
      oMDetails.setOrgUnitModel(oM);
      LayoutGroup detailsGroup=new LayoutGroup();
      detailsGroup.setColumn(0);
      detailsGroup.setRow(0);
      detailsGroup.setParentLayout(oMDetailsLayout);
      int order=0;
      for (      DefaultFlexibleElementType e : DefaultFlexibleElementType.values()) {
        if (!DefaultFlexibleElementType.START_DATE.equals(e) && !DefaultFlexibleElementType.END_DATE.equals(e) && !(DefaultFlexibleElementType.BUDGET.equals(e) && Boolean.FALSE.equals(oM.getHasBudget()))) {
          DefaultFlexibleElement defaultElement=new DefaultFlexibleElement();
          defaultElement.setType(e);
          defaultElement.setValidates(false);
          defaultElement.setAmendable(false);
          em.persist(defaultElement);
          LayoutConstraint defaultLayoutConstraint=new LayoutConstraint();
          defaultLayoutConstraint.setParentLayoutGroup(detailsGroup);
          defaultLayoutConstraint.setElement(defaultElement);
          defaultLayoutConstraint.setSortOrder(order++);
          detailsGroup.addConstraint(defaultLayoutConstraint);
        }
      }
      List<LayoutGroup> detailsGroups=new ArrayList<LayoutGroup>();
      detailsGroups.add(detailsGroup);
      oMDetailsLayout.setGroups(detailsGroups);
      OrgUnitBanner oMBanner=new OrgUnitBanner();
      Layout oMBannerLayout=new Layout();
      oMBannerLayout.setColumnsCount(3);
      oMBannerLayout.setRowsCount(2);
      oMBanner.setLayout(oMBannerLayout);
      oMBanner.setOrgUnitModel(oM);
      LayoutGroup bannerGroup=new LayoutGroup();
      bannerGroup.setColumn(0);
      bannerGroup.setRow(0);
      bannerGroup.setParentLayout(oMBannerLayout);
      List<LayoutGroup> bannerGroups=new ArrayList<LayoutGroup>();
      bannerGroups.add(bannerGroup);
      oMBannerLayout.setGroups(bannerGroups);
      oM.setDetails(oMDetails);
      oM.setBanner(oMBanner);
      em.persist(oM);
      return mapper.map(oM,OrgUnitModelDTO.class);
    }
  }
  return null;
}","@Override public Object create(User user,PropertyMap properties){
  orgUnitModel=(OrgUnitModelDTO)properties.get(AdminUtil.ADMIN_ORG_UNIT_MODEL);
  if (orgUnitModel != null && ProjectModelStatus.DRAFT.equals(orgUnitModel.getStatus())) {
    if (orgUnitModel.getId() != -1) {
      update(user,orgUnitModel,properties);
      if (modelToUpdate != null) {
        OrgUnitModelDTO orgUnitDTOUpdated=mapper.map(modelToUpdate,OrgUnitModelDTO.class);
        return orgUnitDTOUpdated;
      }
    }
 else {
      OrgUnitModel oM=createOrgUnitModel(null,properties,user);
      OrgUnitDetails oMDetails=new OrgUnitDetails();
      Layout oMDetailsLayout=new Layout();
      oMDetailsLayout.setColumnsCount(1);
      oMDetailsLayout.setRowsCount(4);
      oMDetails.setLayout(oMDetailsLayout);
      oMDetails.setOrgUnitModel(oM);
      LayoutGroup detailsGroup=new LayoutGroup();
      detailsGroup.setTitle(""String_Node_Str"");
      detailsGroup.setColumn(0);
      detailsGroup.setRow(0);
      detailsGroup.setParentLayout(oMDetailsLayout);
      int order=0;
      for (      DefaultFlexibleElementType e : DefaultFlexibleElementType.values()) {
        if (!DefaultFlexibleElementType.OWNER.equals(e) && !DefaultFlexibleElementType.START_DATE.equals(e) && !DefaultFlexibleElementType.END_DATE.equals(e)&& !(DefaultFlexibleElementType.BUDGET.equals(e) && Boolean.FALSE.equals(oM.getHasBudget()))) {
          DefaultFlexibleElement defaultElement=new DefaultFlexibleElement();
          defaultElement.setType(e);
          defaultElement.setValidates(false);
          defaultElement.setAmendable(false);
          em.persist(defaultElement);
          LayoutConstraint defaultLayoutConstraint=new LayoutConstraint();
          defaultLayoutConstraint.setParentLayoutGroup(detailsGroup);
          defaultLayoutConstraint.setElement(defaultElement);
          defaultLayoutConstraint.setSortOrder(order++);
          detailsGroup.addConstraint(defaultLayoutConstraint);
        }
      }
      List<LayoutGroup> detailsGroups=new ArrayList<LayoutGroup>();
      detailsGroups.add(detailsGroup);
      oMDetailsLayout.setGroups(detailsGroups);
      OrgUnitBanner oMBanner=new OrgUnitBanner();
      Layout oMBannerLayout=new Layout();
      oMBannerLayout.setColumnsCount(3);
      oMBannerLayout.setRowsCount(2);
      oMBanner.setLayout(oMBannerLayout);
      oMBanner.setOrgUnitModel(oM);
      List<LayoutGroup> bannerGroups=new ArrayList<LayoutGroup>();
      for (int i=0; i < 3; i++) {
        for (int j=0; j < 2; j++) {
          LayoutGroup bannerGroup=new LayoutGroup();
          bannerGroup.setColumn(i);
          bannerGroup.setRow(j);
          bannerGroup.setParentLayout(oMBannerLayout);
          bannerGroups.add(bannerGroup);
        }
      }
      oMBannerLayout.setGroups(bannerGroups);
      oM.setDetails(oMDetails);
      oM.setBanner(oMBanner);
      em.persist(oM);
      return mapper.map(oM,OrgUnitModelDTO.class);
    }
  }
  return null;
}",0.925758103868944
35676,"private static void changePositionInBanner(EntityManager em,Integer posB,Object model,FlexibleElement flexibleElt,LayoutConstraint oldBannerLayoutConstraint){
  LayoutGroup bannerGroup=null;
  if (model instanceof ProjectModel)   bannerGroup=((ProjectModel)model).getProjectBanner().getLayout().getGroups().get(posB);
 else   if (model instanceof OrgUnitModel)   bannerGroup=((OrgUnitModel)model).getBanner().getLayout().getGroups().get(posB);
  for (  LayoutConstraint lc : bannerGroup.getConstraints()) {
    em.remove(lc);
  }
  oldBannerLayoutConstraint.setElement(flexibleElt);
  oldBannerLayoutConstraint.setParentLayoutGroup(bannerGroup);
  oldBannerLayoutConstraint.setSortOrder(new Integer(posB));
  em.merge(oldBannerLayoutConstraint);
}","private static void changePositionInBanner(EntityManager em,Integer posB,Object model,FlexibleElement flexibleElt,LayoutConstraint oldBannerLayoutConstraint){
  LayoutGroup bannerGroup=null;
  if (model instanceof ProjectModel)   bannerGroup=((ProjectModel)model).getProjectBanner().getLayout().getGroups().get(posB);
 else   if (model instanceof OrgUnitModel)   bannerGroup=((OrgUnitModel)model).getBanner().getLayout().getGroups().get(posB);
  for (  LayoutConstraint lc : bannerGroup.getConstraints()) {
    em.remove(lc);
  }
  oldBannerLayoutConstraint.setElement(flexibleElt);
  oldBannerLayoutConstraint.setParentLayoutGroup(bannerGroup);
  oldBannerLayoutConstraint.setSortOrder(new Integer(posB + 1));
  em.merge(oldBannerLayoutConstraint);
}",0.9973297730307076
35677,"private static void changeBanner(EntityManager em,Integer posB,Object model,FlexibleElement flexibleElt){
  LayoutGroup bannerGroup=null;
  if (model instanceof ProjectModel)   bannerGroup=((ProjectModel)model).getProjectBanner().getLayout().getGroups().get(posB);
 else   if (model instanceof OrgUnitModel)   bannerGroup=((OrgUnitModel)model).getBanner().getLayout().getGroups().get(posB);
  LayoutConstraint newLayoutConstraint=null;
  boolean positionTaken=false;
  for (  LayoutConstraint lc : bannerGroup.getConstraints()) {
    if (posB.equals(lc.getSortOrder())) {
      positionTaken=true;
      newLayoutConstraint=lc;
      lc.setElement(flexibleElt);
      newLayoutConstraint=em.merge(lc);
    }
  }
  if (!positionTaken) {
    newLayoutConstraint=new LayoutConstraint();
    newLayoutConstraint.setElement(flexibleElt);
    newLayoutConstraint.setParentLayoutGroup(bannerGroup);
    newLayoutConstraint.setSortOrder(new Integer(posB));
    em.persist(newLayoutConstraint);
  }
}","private static void changeBanner(EntityManager em,Integer posB,Object model,FlexibleElement flexibleElt){
  LayoutGroup bannerGroup=null;
  if (model instanceof ProjectModel)   bannerGroup=((ProjectModel)model).getProjectBanner().getLayout().getGroups().get(posB);
 else   if (model instanceof OrgUnitModel)   bannerGroup=((OrgUnitModel)model).getBanner().getLayout().getGroups().get(posB);
  LayoutConstraint newLayoutConstraint=null;
  boolean positionTaken=false;
  for (  LayoutConstraint lc : bannerGroup.getConstraints()) {
    if (posB.equals(lc.getSortOrder())) {
      positionTaken=true;
      newLayoutConstraint=lc;
      lc.setElement(flexibleElt);
      newLayoutConstraint=em.merge(lc);
    }
  }
  if (!positionTaken) {
    newLayoutConstraint=new LayoutConstraint();
    newLayoutConstraint.setElement(flexibleElt);
    newLayoutConstraint.setParentLayoutGroup(bannerGroup);
    newLayoutConstraint.setSortOrder(new Integer(posB + 1));
    em.persist(newLayoutConstraint);
  }
}",0.9979859013091642
35678,"@SuppressWarnings(""String_Node_Str"") public static void persistFlexibleElement(EntityManager em,Mapper mapper,PropertyMap changes,Object model){
  FlexibleElementDTO flexibleEltDTO=null;
  if (changes.get(AdminUtil.PROP_FX_FLEXIBLE_ELEMENT) != null) {
    String name=changes.get(AdminUtil.PROP_FX_NAME);
    ElementTypeEnum type=(ElementTypeEnum)changes.get(AdminUtil.PROP_FX_TYPE);
    Boolean isCompulsory=null;
    if (changes.get(AdminUtil.PROP_FX_IS_COMPULSARY) != null)     isCompulsory=(Boolean)changes.get(AdminUtil.PROP_FX_IS_COMPULSARY);
    PrivacyGroupDTO pg=null;
    if (changes.get(AdminUtil.PROP_FX_PRIVACY_GROUP) != null)     pg=(PrivacyGroupDTO)changes.get(AdminUtil.PROP_FX_PRIVACY_GROUP);
    Boolean amend=null;
    if (changes.get(AdminUtil.PROP_FX_AMENDABLE) != null)     amend=(Boolean)changes.get(AdminUtil.PROP_FX_AMENDABLE);
    LayoutGroupDTO group=null;
    if (changes.get(AdminUtil.PROP_FX_GROUP) != null)     group=(LayoutGroupDTO)changes.get(AdminUtil.PROP_FX_GROUP);
    Integer order=null;
    if (changes.get(AdminUtil.PROP_FX_ORDER_IN_GROUP) != null)     order=(Integer)changes.get(AdminUtil.PROP_FX_ORDER_IN_GROUP);
    Boolean inBanner=null;
    if (changes.get(AdminUtil.PROP_FX_IN_BANNER) != null)     inBanner=(Boolean)changes.get(AdminUtil.PROP_FX_IN_BANNER);
    Integer posB=null;
    if (changes.get(AdminUtil.PROP_FX_POS_IN_BANNER) != null)     posB=(Integer)changes.get(AdminUtil.PROP_FX_POS_IN_BANNER);
    HashMap<String,Object> oldLayoutFields=(HashMap<String,Object>)changes.get(AdminUtil.PROP_FX_OLD_FIELDS);
    LayoutConstraintDTO oldLayoutConstraintDTO=(LayoutConstraintDTO)oldLayoutFields.get(AdminUtil.PROP_FX_LC);
    LayoutConstraintDTO oldBannerLayoutConstraintDTO=(LayoutConstraintDTO)oldLayoutFields.get(AdminUtil.PROP_FX_LC_BANNER);
    ElementTypeEnum oldType=(ElementTypeEnum)oldLayoutFields.get(AdminUtil.PROP_FX_TYPE);
    Integer oldOrder=(Integer)oldLayoutFields.get(AdminUtil.PROP_FX_ORDER_IN_GROUP);
    Character textType=(Character)changes.get(AdminUtil.PROP_FX_TEXT_TYPE);
    Integer maxLimit=null;
    if (changes.get(AdminUtil.PROP_FX_MAX_LIMIT) != null)     maxLimit=(Integer)changes.get(AdminUtil.PROP_FX_MAX_LIMIT);
    Integer minLimit=null;
    if (changes.get(AdminUtil.PROP_FX_MIN_LIMIT) != null)     minLimit=(Integer)changes.get(AdminUtil.PROP_FX_MIN_LIMIT);
    Integer length=null;
    if (changes.get(AdminUtil.PROP_FX_LENGTH) != null)     length=(Integer)changes.get(AdminUtil.PROP_FX_LENGTH);
    Boolean decimal=null;
    if (changes.get(AdminUtil.PROP_FX_DECIMAL) != null)     decimal=(Boolean)changes.get(AdminUtil.PROP_FX_DECIMAL);
    ReportModelDTO reportModel=null;
    if (changes.get(AdminUtil.PROP_FX_REPORT_MODEL) != null)     reportModel=(ReportModelDTO)changes.get(AdminUtil.PROP_FX_REPORT_MODEL);
    Boolean isMultiple=null;
    if (changes.get(AdminUtil.PROP_FX_Q_MULTIPLE) != null)     isMultiple=(Boolean)changes.get(AdminUtil.PROP_FX_Q_MULTIPLE);
    CategoryTypeDTO category=null;
    if (changes.get(AdminUtil.PROP_FX_Q_CATEGORY) != null)     category=(CategoryTypeDTO)changes.get(AdminUtil.PROP_FX_Q_CATEGORY);
    List<String> qChoices=null;
    if (changes.get(AdminUtil.PROP_FX_Q_CHOICES) != null)     qChoices=(List<String>)changes.get(AdminUtil.PROP_FX_Q_CHOICES);
    flexibleEltDTO=(FlexibleElementDTO)changes.get(AdminUtil.PROP_FX_FLEXIBLE_ELEMENT);
    FlexibleElement flexibleElt=null;
    if (flexibleEltDTO.getId() != 0) {
      flexibleElt=em.find(FlexibleElement.class,new Integer(flexibleEltDTO.getId()).longValue());
    }
 else {
      flexibleElt=(FlexibleElement)createNewFlexibleElement(em,oldType,type,flexibleElt);
    }
    log.debug(""String_Node_Str"" + name + ""String_Node_Str""+ type+ ""String_Node_Str""+ group+ ""String_Node_Str""+ order+ ""String_Node_Str""+ inBanner+ ""String_Node_Str""+ posB+ ""String_Node_Str""+ isCompulsory+ ""String_Node_Str""+ pg+ ""String_Node_Str""+ amend+ ""String_Node_Str"");
    log.debug(""String_Node_Str"" + maxLimit + ""String_Node_Str""+ minLimit+ ""String_Node_Str""+ textType+ ""String_Node_Str""+ length+ ""String_Node_Str""+ decimal+ ""String_Node_Str""+ reportModel+ ""String_Node_Str"");
    Boolean basicChanges=false;
    if (flexibleElt != null) {
      if (name != null) {
        flexibleElt.setLabel(name);
        basicChanges=true;
      }
      if (amend != null) {
        flexibleElt.setAmendable(amend);
        basicChanges=true;
      }
      if (isCompulsory != null) {
        flexibleElt.setValidates(isCompulsory);
        basicChanges=true;
      }
      if (pg != null) {
        PrivacyGroup pgToPersist=em.find(PrivacyGroup.class,pg.getId());
        if (pgToPersist != null) {
          flexibleElt.setPrivacyGroup(pgToPersist);
          basicChanges=true;
        }
      }
      if (basicChanges && flexibleElt.getId() != null)       flexibleElt=em.merge(flexibleElt);
 else       em.persist(flexibleElt);
    }
    if (group != null) {
      LayoutGroup parentLayoutGroup=em.find(LayoutGroup.class,new Integer(group.getId()).longValue());
      LayoutConstraint newLayoutConstraint=new LayoutConstraint();
      if (parentLayoutGroup != null) {
        newLayoutConstraint.setElement(flexibleElt);
        newLayoutConstraint.setParentLayoutGroup(parentLayoutGroup);
        if (order != null)         newLayoutConstraint.setSortOrder(order);
        if (oldOrder != null)         newLayoutConstraint.setSortOrder(oldOrder);
        if (order == null && oldOrder == null)         newLayoutConstraint.setSortOrder(new Integer(parentLayoutGroup.getConstraints().size()));
        if (oldLayoutConstraintDTO != null) {
          newLayoutConstraint.setId(new Integer(oldLayoutConstraintDTO.getId()).longValue());
          newLayoutConstraint=em.merge(newLayoutConstraint);
        }
 else {
          em.persist(newLayoutConstraint);
        }
      }
    }
    if (inBanner != null) {
      if (inBanner) {
        if (model instanceof ProjectModel)         changeBanner(em,posB,(ProjectModel)model,flexibleElt);
 else         if (model instanceof OrgUnitModel)         changeBanner(em,posB,(OrgUnitModel)model,flexibleElt);
      }
 else {
        if (oldBannerLayoutConstraintDTO != null) {
          LayoutConstraint oldBannerLayoutConstraint=mapper.map(oldBannerLayoutConstraintDTO,LayoutConstraint.class);
          em.remove(oldBannerLayoutConstraint);
        }
      }
    }
 else {
      if (posB != null) {
        LayoutConstraint oldBannerLayoutConstraint=mapper.map(oldBannerLayoutConstraintDTO,LayoutConstraint.class);
        if (model instanceof ProjectModel)         changePositionInBanner(em,posB,(ProjectModel)model,flexibleElt,oldBannerLayoutConstraint);
 else         if (model instanceof OrgUnitModel)         changePositionInBanner(em,posB,(OrgUnitModel)model,flexibleElt,oldBannerLayoutConstraint);
      }
    }
    if (oldType != null && type != null) {
      flexibleElt=(FlexibleElement)createNewFlexibleElement(em,oldType,type,flexibleElt);
      log.debug(""String_Node_Str"" + flexibleElt.getClass());
    }
    em.flush();
    em.clear();
    flexibleElt=em.find(FlexibleElement.class,flexibleElt.getId());
    Boolean specificChanges=false;
    if (ElementTypeEnum.FILES_LIST.equals(type) || (ElementTypeEnum.FILES_LIST.equals(oldType) && type == null)) {
      FilesListElement filesListElement=(FilesListElement)flexibleElt;
      if (filesListElement != null) {
        if (maxLimit != null) {
          filesListElement.setLimit(maxLimit);
          specificChanges=true;
        }
        if (specificChanges) {
          filesListElement=em.merge(filesListElement);
          flexibleElt=filesListElement;
        }
      }
    }
 else     if (ElementTypeEnum.TEXT_AREA.equals(type) || (ElementTypeEnum.TEXT_AREA.equals(oldType) && type == null)) {
      TextAreaElement textAreaElement=(TextAreaElement)flexibleElt;
      if (textAreaElement != null) {
        if (maxLimit != null) {
          ((TextAreaElement)flexibleElt).setMaxValue(new Integer(maxLimit).longValue());
          specificChanges=true;
        }
        if (minLimit != null) {
          ((TextAreaElement)flexibleElt).setMinValue(new Integer(minLimit).longValue());
          specificChanges=true;
        }
        if (length != null) {
          ((TextAreaElement)flexibleElt).setLength(length);
          specificChanges=true;
        }
        if (decimal != null) {
          ((TextAreaElement)flexibleElt).setIsDecimal(decimal);
          specificChanges=true;
        }
        if (textType != null) {
          ((TextAreaElement)flexibleElt).setType(textType);
          specificChanges=true;
        }
        if (specificChanges) {
          flexibleElt=em.merge((TextAreaElement)flexibleElt);
        }
      }
    }
 else     if (ElementTypeEnum.REPORT.equals(type) || (ElementTypeEnum.REPORT.equals(oldType) && type == null)) {
      ReportElement reportElement=em.find(ReportElement.class,flexibleElt.getId());
      if (reportElement != null) {
        if (reportModel != null) {
          if (reportModel.getName() != null) {
            Integer reportId=findIdForReport(em,reportModel.getName());
            ((ReportElement)flexibleElt).setModelId(reportId);
            specificChanges=true;
          }
        }
        if (specificChanges) {
          flexibleElt=em.merge((ReportElement)flexibleElt);
        }
      }
    }
 else     if (ElementTypeEnum.REPORT_LIST.equals(type) || (ElementTypeEnum.REPORT_LIST.equals(oldType) && type == null)) {
      ReportListElement reportElement=em.find(ReportListElement.class,flexibleElt.getId());
      if (reportElement != null) {
        if (reportModel.getName() != null) {
          Integer reportId=findIdForReport(em,reportModel.getName());
          ((ReportListElement)flexibleElt).setModelId(reportId);
          specificChanges=true;
        }
        if (specificChanges) {
          flexibleElt=em.merge((ReportListElement)flexibleElt);
        }
      }
    }
 else     if (ElementTypeEnum.QUESTION.equals(type) || (ElementTypeEnum.QUESTION.equals(oldType) && type == null)) {
      QuestionElement questionElement=em.find(QuestionElement.class,flexibleElt.getId());
      if (questionElement != null) {
        if (isMultiple != null) {
          ((QuestionElement)flexibleElt).setIsMultiple(isMultiple);
          specificChanges=true;
        }
        if (category != null) {
          for (          QuestionChoiceElement choiceElt : ((QuestionElement)flexibleElt).getChoices()) {
            em.remove(choiceElt);
          }
          CategoryType categoryType=em.find(CategoryType.class,category.getId());
          if (categoryType != null) {
            ((QuestionElement)flexibleElt).setCategoryType(categoryType);
            List<QuestionChoiceElement> choices=new ArrayList<QuestionChoiceElement>();
            int i=0;
            for (            CategoryElement catElt : categoryType.getElements()) {
              QuestionChoiceElement qChoice=new QuestionChoiceElement();
              qChoice.setLabel(""String_Node_Str"");
              qChoice.setCategoryElement(catElt);
              qChoice.setParentQuestion(questionElement);
              qChoice.setSortOrder(i++);
              choices.add(qChoice);
            }
            ((QuestionElement)flexibleElt).setChoices(choices);
            specificChanges=true;
          }
        }
 else         if (qChoices != null) {
          for (          QuestionChoiceElement choiceElt : ((QuestionElement)flexibleElt).getChoices()) {
            em.remove(choiceElt);
          }
          ((QuestionElement)flexibleElt).setCategoryType(null);
          List<QuestionChoiceElement> choices=new ArrayList<QuestionChoiceElement>();
          int i=0;
          for (          String choiceLabel : qChoices) {
            QuestionChoiceElement qChoice=new QuestionChoiceElement();
            qChoice.setLabel(choiceLabel);
            qChoice.setParentQuestion(questionElement);
            qChoice.setSortOrder(i++);
            choices.add(qChoice);
          }
          ((QuestionElement)flexibleElt).setChoices(choices);
          specificChanges=true;
        }
        if (specificChanges) {
          flexibleElt=em.merge((QuestionElement)flexibleElt);
        }
      }
    }
    em.flush();
    em.clear();
  }
}","@SuppressWarnings(""String_Node_Str"") public static void persistFlexibleElement(EntityManager em,Mapper mapper,PropertyMap changes,Object model){
  FlexibleElementDTO flexibleEltDTO=null;
  if (changes.get(AdminUtil.PROP_FX_FLEXIBLE_ELEMENT) != null) {
    String name=changes.get(AdminUtil.PROP_FX_NAME);
    ElementTypeEnum type=(ElementTypeEnum)changes.get(AdminUtil.PROP_FX_TYPE);
    Boolean isCompulsory=null;
    if (changes.get(AdminUtil.PROP_FX_IS_COMPULSARY) != null)     isCompulsory=(Boolean)changes.get(AdminUtil.PROP_FX_IS_COMPULSARY);
    PrivacyGroupDTO pg=null;
    if (changes.get(AdminUtil.PROP_FX_PRIVACY_GROUP) != null)     pg=(PrivacyGroupDTO)changes.get(AdminUtil.PROP_FX_PRIVACY_GROUP);
    Boolean amend=null;
    if (changes.get(AdminUtil.PROP_FX_AMENDABLE) != null)     amend=(Boolean)changes.get(AdminUtil.PROP_FX_AMENDABLE);
    LayoutGroupDTO group=null;
    if (changes.get(AdminUtil.PROP_FX_GROUP) != null)     group=(LayoutGroupDTO)changes.get(AdminUtil.PROP_FX_GROUP);
    Integer order=null;
    if (changes.get(AdminUtil.PROP_FX_ORDER_IN_GROUP) != null)     order=(Integer)changes.get(AdminUtil.PROP_FX_ORDER_IN_GROUP);
    Boolean inBanner=null;
    if (changes.get(AdminUtil.PROP_FX_IN_BANNER) != null)     inBanner=(Boolean)changes.get(AdminUtil.PROP_FX_IN_BANNER);
    Integer posB=null;
    if (changes.get(AdminUtil.PROP_FX_POS_IN_BANNER) != null) {
      posB=(Integer)changes.get(AdminUtil.PROP_FX_POS_IN_BANNER);
      posB=posB - 1;
    }
    HashMap<String,Object> oldLayoutFields=(HashMap<String,Object>)changes.get(AdminUtil.PROP_FX_OLD_FIELDS);
    LayoutConstraintDTO oldLayoutConstraintDTO=(LayoutConstraintDTO)oldLayoutFields.get(AdminUtil.PROP_FX_LC);
    LayoutConstraintDTO oldBannerLayoutConstraintDTO=(LayoutConstraintDTO)oldLayoutFields.get(AdminUtil.PROP_FX_LC_BANNER);
    ElementTypeEnum oldType=(ElementTypeEnum)oldLayoutFields.get(AdminUtil.PROP_FX_TYPE);
    Integer oldOrder=(Integer)oldLayoutFields.get(AdminUtil.PROP_FX_ORDER_IN_GROUP);
    Character textType=(Character)changes.get(AdminUtil.PROP_FX_TEXT_TYPE);
    Integer maxLimit=null;
    if (changes.get(AdminUtil.PROP_FX_MAX_LIMIT) != null)     maxLimit=(Integer)changes.get(AdminUtil.PROP_FX_MAX_LIMIT);
    Integer minLimit=null;
    if (changes.get(AdminUtil.PROP_FX_MIN_LIMIT) != null)     minLimit=(Integer)changes.get(AdminUtil.PROP_FX_MIN_LIMIT);
    Integer length=null;
    if (changes.get(AdminUtil.PROP_FX_LENGTH) != null)     length=(Integer)changes.get(AdminUtil.PROP_FX_LENGTH);
    Boolean decimal=null;
    if (changes.get(AdminUtil.PROP_FX_DECIMAL) != null)     decimal=(Boolean)changes.get(AdminUtil.PROP_FX_DECIMAL);
    ReportModelDTO reportModel=null;
    if (changes.get(AdminUtil.PROP_FX_REPORT_MODEL) != null)     reportModel=(ReportModelDTO)changes.get(AdminUtil.PROP_FX_REPORT_MODEL);
    Boolean isMultiple=null;
    if (changes.get(AdminUtil.PROP_FX_Q_MULTIPLE) != null)     isMultiple=(Boolean)changes.get(AdminUtil.PROP_FX_Q_MULTIPLE);
    CategoryTypeDTO category=null;
    if (changes.get(AdminUtil.PROP_FX_Q_CATEGORY) != null)     category=(CategoryTypeDTO)changes.get(AdminUtil.PROP_FX_Q_CATEGORY);
    List<String> qChoices=null;
    if (changes.get(AdminUtil.PROP_FX_Q_CHOICES) != null)     qChoices=(List<String>)changes.get(AdminUtil.PROP_FX_Q_CHOICES);
    flexibleEltDTO=(FlexibleElementDTO)changes.get(AdminUtil.PROP_FX_FLEXIBLE_ELEMENT);
    FlexibleElement flexibleElt=null;
    if (flexibleEltDTO.getId() != 0) {
      flexibleElt=em.find(FlexibleElement.class,new Integer(flexibleEltDTO.getId()).longValue());
    }
 else {
      flexibleElt=(FlexibleElement)createNewFlexibleElement(em,oldType,type,flexibleElt);
    }
    log.debug(""String_Node_Str"" + name + ""String_Node_Str""+ type+ ""String_Node_Str""+ group+ ""String_Node_Str""+ order+ ""String_Node_Str""+ inBanner+ ""String_Node_Str""+ posB+ ""String_Node_Str""+ isCompulsory+ ""String_Node_Str""+ pg+ ""String_Node_Str""+ amend+ ""String_Node_Str"");
    log.debug(""String_Node_Str"" + maxLimit + ""String_Node_Str""+ minLimit+ ""String_Node_Str""+ textType+ ""String_Node_Str""+ length+ ""String_Node_Str""+ decimal+ ""String_Node_Str""+ reportModel+ ""String_Node_Str"");
    Boolean basicChanges=false;
    if (flexibleElt != null) {
      if (name != null) {
        flexibleElt.setLabel(name);
        basicChanges=true;
      }
      if (amend != null) {
        flexibleElt.setAmendable(amend);
        basicChanges=true;
      }
      if (isCompulsory != null) {
        flexibleElt.setValidates(isCompulsory);
        basicChanges=true;
      }
      if (pg != null) {
        PrivacyGroup pgToPersist=em.find(PrivacyGroup.class,pg.getId());
        if (pgToPersist != null) {
          flexibleElt.setPrivacyGroup(pgToPersist);
          basicChanges=true;
        }
      }
      if (basicChanges && flexibleElt.getId() != null)       flexibleElt=em.merge(flexibleElt);
 else       em.persist(flexibleElt);
    }
    if (group != null) {
      LayoutGroup parentLayoutGroup=em.find(LayoutGroup.class,new Integer(group.getId()).longValue());
      LayoutConstraint newLayoutConstraint=new LayoutConstraint();
      if (parentLayoutGroup != null) {
        newLayoutConstraint.setElement(flexibleElt);
        newLayoutConstraint.setParentLayoutGroup(parentLayoutGroup);
        if (order != null)         newLayoutConstraint.setSortOrder(order);
        if (oldOrder != null)         newLayoutConstraint.setSortOrder(oldOrder);
        if (order == null && oldOrder == null)         newLayoutConstraint.setSortOrder(new Integer(parentLayoutGroup.getConstraints().size()));
        if (oldLayoutConstraintDTO != null) {
          newLayoutConstraint.setId(new Integer(oldLayoutConstraintDTO.getId()).longValue());
          newLayoutConstraint=em.merge(newLayoutConstraint);
        }
 else {
          em.persist(newLayoutConstraint);
        }
      }
    }
    if (inBanner != null) {
      if (inBanner) {
        if (model instanceof ProjectModel)         changeBanner(em,posB,(ProjectModel)model,flexibleElt);
 else         if (model instanceof OrgUnitModel)         changeBanner(em,posB,(OrgUnitModel)model,flexibleElt);
      }
 else {
        if (oldBannerLayoutConstraintDTO != null) {
          LayoutConstraint oldBannerLayoutConstraint=mapper.map(oldBannerLayoutConstraintDTO,LayoutConstraint.class);
          oldBannerLayoutConstraint=em.find(LayoutConstraint.class,oldBannerLayoutConstraint.getId());
          em.remove(oldBannerLayoutConstraint);
        }
      }
    }
 else {
      if (posB != null) {
        LayoutConstraint oldBannerLayoutConstraint=mapper.map(oldBannerLayoutConstraintDTO,LayoutConstraint.class);
        if (model instanceof ProjectModel)         changePositionInBanner(em,posB,(ProjectModel)model,flexibleElt,oldBannerLayoutConstraint);
 else         if (model instanceof OrgUnitModel)         changePositionInBanner(em,posB,(OrgUnitModel)model,flexibleElt,oldBannerLayoutConstraint);
      }
    }
    if (oldType != null && type != null) {
      flexibleElt=(FlexibleElement)createNewFlexibleElement(em,oldType,type,flexibleElt);
      log.debug(""String_Node_Str"" + flexibleElt.getClass());
    }
    em.flush();
    em.clear();
    flexibleElt=em.find(FlexibleElement.class,flexibleElt.getId());
    Boolean specificChanges=false;
    if (ElementTypeEnum.FILES_LIST.equals(type) || (ElementTypeEnum.FILES_LIST.equals(oldType) && type == null)) {
      FilesListElement filesListElement=(FilesListElement)flexibleElt;
      if (filesListElement != null) {
        if (maxLimit != null) {
          filesListElement.setLimit(maxLimit);
          specificChanges=true;
        }
        if (specificChanges) {
          filesListElement=em.merge(filesListElement);
          flexibleElt=filesListElement;
        }
      }
    }
 else     if (ElementTypeEnum.TEXT_AREA.equals(type) || (ElementTypeEnum.TEXT_AREA.equals(oldType) && type == null)) {
      TextAreaElement textAreaElement=(TextAreaElement)flexibleElt;
      if (textAreaElement != null) {
        if (maxLimit != null) {
          ((TextAreaElement)flexibleElt).setMaxValue(new Integer(maxLimit).longValue());
          specificChanges=true;
        }
        if (minLimit != null) {
          ((TextAreaElement)flexibleElt).setMinValue(new Integer(minLimit).longValue());
          specificChanges=true;
        }
        if (length != null) {
          ((TextAreaElement)flexibleElt).setLength(length);
          specificChanges=true;
        }
        if (decimal != null) {
          ((TextAreaElement)flexibleElt).setIsDecimal(decimal);
          specificChanges=true;
        }
        if (textType != null) {
          ((TextAreaElement)flexibleElt).setType(textType);
          specificChanges=true;
        }
        if (specificChanges) {
          flexibleElt=em.merge((TextAreaElement)flexibleElt);
        }
      }
    }
 else     if (ElementTypeEnum.REPORT.equals(type) || (ElementTypeEnum.REPORT.equals(oldType) && type == null)) {
      ReportElement reportElement=em.find(ReportElement.class,flexibleElt.getId());
      if (reportElement != null) {
        if (reportModel != null) {
          if (reportModel.getName() != null) {
            Integer reportId=findIdForReport(em,reportModel.getName());
            ((ReportElement)flexibleElt).setModelId(reportId);
            specificChanges=true;
          }
        }
        if (specificChanges) {
          flexibleElt=em.merge((ReportElement)flexibleElt);
        }
      }
    }
 else     if (ElementTypeEnum.REPORT_LIST.equals(type) || (ElementTypeEnum.REPORT_LIST.equals(oldType) && type == null)) {
      ReportListElement reportElement=em.find(ReportListElement.class,flexibleElt.getId());
      if (reportElement != null) {
        if (reportModel.getName() != null) {
          Integer reportId=findIdForReport(em,reportModel.getName());
          ((ReportListElement)flexibleElt).setModelId(reportId);
          specificChanges=true;
        }
        if (specificChanges) {
          flexibleElt=em.merge((ReportListElement)flexibleElt);
        }
      }
    }
 else     if (ElementTypeEnum.QUESTION.equals(type) || (ElementTypeEnum.QUESTION.equals(oldType) && type == null)) {
      QuestionElement questionElement=em.find(QuestionElement.class,flexibleElt.getId());
      if (questionElement != null) {
        if (isMultiple != null) {
          ((QuestionElement)flexibleElt).setIsMultiple(isMultiple);
          specificChanges=true;
        }
        if (category != null) {
          for (          QuestionChoiceElement choiceElt : ((QuestionElement)flexibleElt).getChoices()) {
            em.remove(choiceElt);
          }
          CategoryType categoryType=em.find(CategoryType.class,category.getId());
          if (categoryType != null) {
            ((QuestionElement)flexibleElt).setCategoryType(categoryType);
            List<QuestionChoiceElement> choices=new ArrayList<QuestionChoiceElement>();
            int i=0;
            for (            CategoryElement catElt : categoryType.getElements()) {
              QuestionChoiceElement qChoice=new QuestionChoiceElement();
              qChoice.setLabel(""String_Node_Str"");
              qChoice.setCategoryElement(catElt);
              qChoice.setParentQuestion(questionElement);
              qChoice.setSortOrder(i++);
              choices.add(qChoice);
            }
            ((QuestionElement)flexibleElt).setChoices(choices);
            specificChanges=true;
          }
        }
 else         if (qChoices != null) {
          for (          QuestionChoiceElement choiceElt : ((QuestionElement)flexibleElt).getChoices()) {
            em.remove(choiceElt);
          }
          ((QuestionElement)flexibleElt).setCategoryType(null);
          List<QuestionChoiceElement> choices=new ArrayList<QuestionChoiceElement>();
          int i=0;
          for (          String choiceLabel : qChoices) {
            QuestionChoiceElement qChoice=new QuestionChoiceElement();
            qChoice.setLabel(choiceLabel);
            qChoice.setParentQuestion(questionElement);
            qChoice.setSortOrder(i++);
            choices.add(qChoice);
          }
          ((QuestionElement)flexibleElt).setChoices(choices);
          specificChanges=true;
        }
        if (specificChanges) {
          flexibleElt=em.merge((QuestionElement)flexibleElt);
        }
      }
    }
    em.flush();
    em.clear();
  }
}",0.9945647765068548
35679,"private Grid<UserDTO> buildUsersGrid(){
  List<ColumnConfig> configs=new ArrayList<ColumnConfig>();
  ColumnConfig column=new ColumnConfig(""String_Node_Str"",I18N.CONSTANTS.adminUsersName(),100);
  configs.add(column);
  column=new ColumnConfig(""String_Node_Str"",I18N.CONSTANTS.adminUsersFirstName(),100);
  configs.add(column);
  column=new ColumnConfig(""String_Node_Str"",I18N.CONSTANTS.adminUsersActive(),50);
  column.setRenderer(new GridCellRenderer<UserDTO>(){
    @Override public Object render(    UserDTO model,    String property,    ColumnData config,    int rowIndex,    int colIndex,    ListStore<UserDTO> store,    Grid<UserDTO> grid){
      final boolean isActive=model.getActive();
      return createUserGridText(isActive ? I18N.CONSTANTS.adminUsersIsActive() : I18N.CONSTANTS.adminUsersNotActive());
    }
  }
);
  configs.add(column);
  column=new ColumnConfig(""String_Node_Str"",I18N.CONSTANTS.adminUsersEmail(),150);
  configs.add(column);
  column=new ColumnConfig(""String_Node_Str"",I18N.CONSTANTS.adminUsersLocale(),50);
  configs.add(column);
  column=new ColumnConfig(""String_Node_Str"",I18N.CONSTANTS.adminUsersOrgUnit(),75);
  column.setRenderer(new GridCellRenderer<UserDTO>(){
    @Override public Object render(    UserDTO model,    String property,    ColumnData config,    int rowIndex,    int colIndex,    ListStore<UserDTO> store,    Grid<UserDTO> grid){
      final OrgUnitDTO orgUnit=(OrgUnitDTO)model.get(property);
      return createUserGridText(orgUnit != null ? (orgUnit.getFullName() != null ? orgUnit.getFullName() : ""String_Node_Str"") : ""String_Node_Str"");
    }
  }
);
  configs.add(column);
  column=new ColumnConfig(""String_Node_Str"",I18N.CONSTANTS.adminUsersPasswordChange(),120);
  configs.add(column);
  column=new ColumnConfig(""String_Node_Str"",I18N.CONSTANTS.adminUsersDatePasswordChange(),120);
  final DateTimeFormat format=DateTimeFormat.getFormat(I18N.CONSTANTS.flexibleElementDateFormat());
  column.setHeader(I18N.CONSTANTS.adminUsersDatePasswordChange());
  column.setDateTimeFormat(format);
  column.setRenderer(new GridCellRenderer<UserDTO>(){
    @Override public Object render(    UserDTO model,    String property,    ColumnData config,    int rowIndex,    int colIndex,    ListStore<UserDTO> store,    Grid<UserDTO> grid){
      final Date d=(Date)model.get(property);
      return createUserGridText(d != null ? format.format(d) : ""String_Node_Str"");
    }
  }
);
  configs.add(column);
  column=new ColumnConfig();
  column.setId(""String_Node_Str"");
  column.setHeader(I18N.CONSTANTS.adminUsersProfiles());
  column.setWidth(300);
  column.setRenderer(new GridCellRenderer<UserDTO>(){
    @Override public Object render(    UserDTO model,    String property,    ColumnData config,    int rowIndex,    int colIndex,    ListStore<UserDTO> store,    Grid<UserDTO> grid){
      String content=""String_Node_Str"";
      if (model.getProfilesDTO() != null) {
        for (        ProfileDTO oneProfileDTO : model.getProfilesDTO()) {
          content=oneProfileDTO.getName() + ""String_Node_Str"" + content;
        }
      }
 else {
        content=I18N.CONSTANTS.adminUsersNoProfiles();
      }
      return createUserGridText(content);
    }
  }
);
  configs.add(column);
  column=new ColumnConfig();
  column.setWidth(75);
  column.setAlignment(Style.HorizontalAlignment.RIGHT);
  column.setRenderer(new GridCellRenderer<UserDTO>(){
    @Override public Object render(    final UserDTO model,    final String property,    ColumnData config,    int rowIndex,    int colIndex,    ListStore<UserDTO> store,    Grid<UserDTO> grid){
      Button button=new Button(I18N.CONSTANTS.edit());
      button.setItemId(UIActions.edit);
      button.addListener(Events.OnClick,new Listener<ButtonEvent>(){
        @Override public void handleEvent(        ButtonEvent be){
          final Window window=new Window();
          UserSigmahForm form=AdminUsersView.this.showNewUserForm(window,new AsyncCallback<CreateResult>(){
            @Override public void onFailure(            Throwable caught){
              window.hide();
            }
            @Override public void onSuccess(            CreateResult result){
              window.hide();
              AdminUsersView.this.getAdminUsersStore().remove(model);
              AdminUsersView.this.getAdminUsersStore().add((UserDTO)result.getEntity());
              AdminUsersView.this.getAdminUsersStore().commitChanges();
            }
          }
,model);
          window.add(form);
          window.show();
        }
      }
);
      return button;
    }
  }
);
  configs.add(column);
  ColumnModel cm=new ColumnModel(configs);
  final Grid<UserDTO> grid=new Grid<UserDTO>(adminUsersStore,cm);
  grid.getView().setForceFit(true);
  grid.setStyleAttribute(""String_Node_Str"",""String_Node_Str"");
  grid.setBorders(false);
  grid.setStripeRows(true);
  grid.setAutoHeight(true);
  return grid;
}","private Grid<UserDTO> buildUsersGrid(){
  List<ColumnConfig> configs=new ArrayList<ColumnConfig>();
  ColumnConfig column=new ColumnConfig(""String_Node_Str"",I18N.CONSTANTS.adminUsersName(),100);
  configs.add(column);
  column=new ColumnConfig(""String_Node_Str"",I18N.CONSTANTS.adminUsersFirstName(),100);
  configs.add(column);
  column=new ColumnConfig(""String_Node_Str"",I18N.CONSTANTS.adminUsersActive(),50);
  column.setRenderer(new GridCellRenderer<UserDTO>(){
    @Override public Object render(    UserDTO model,    String property,    ColumnData config,    int rowIndex,    int colIndex,    ListStore<UserDTO> store,    Grid<UserDTO> grid){
      final boolean isActive=model.getActive();
      return createUserGridText(isActive ? I18N.CONSTANTS.adminUsersIsActive() : I18N.CONSTANTS.adminUsersNotActive());
    }
  }
);
  configs.add(column);
  column=new ColumnConfig(""String_Node_Str"",I18N.CONSTANTS.adminUsersEmail(),150);
  configs.add(column);
  column=new ColumnConfig(""String_Node_Str"",I18N.CONSTANTS.adminUsersLocale(),50);
  configs.add(column);
  column=new ColumnConfig(""String_Node_Str"",I18N.CONSTANTS.adminUsersOrgUnit(),110);
  column.setRenderer(new GridCellRenderer<UserDTO>(){
    @Override public Object render(    UserDTO model,    String property,    ColumnData config,    int rowIndex,    int colIndex,    ListStore<UserDTO> store,    Grid<UserDTO> grid){
      final OrgUnitDTO orgUnit=(OrgUnitDTO)model.get(property);
      return createUserGridText(orgUnit != null ? (orgUnit.getFullName() != null ? orgUnit.getFullName() : ""String_Node_Str"") : ""String_Node_Str"");
    }
  }
);
  configs.add(column);
  column=new ColumnConfig(""String_Node_Str"",I18N.CONSTANTS.adminUsersDatePasswordChange(),120);
  final DateTimeFormat format=DateTimeFormat.getFormat(I18N.CONSTANTS.flexibleElementDateFormat());
  column.setHeader(I18N.CONSTANTS.adminUsersDatePasswordChange());
  column.setDateTimeFormat(format);
  column.setRenderer(new GridCellRenderer<UserDTO>(){
    @Override public Object render(    UserDTO model,    String property,    ColumnData config,    int rowIndex,    int colIndex,    ListStore<UserDTO> store,    Grid<UserDTO> grid){
      final Date d=(Date)model.get(property);
      return createUserGridText(d != null ? format.format(d) : ""String_Node_Str"");
    }
  }
);
  configs.add(column);
  column=new ColumnConfig();
  column.setId(""String_Node_Str"");
  column.setHeader(I18N.CONSTANTS.adminUsersProfiles());
  column.setWidth(300);
  column.setRenderer(new GridCellRenderer<UserDTO>(){
    @Override public Object render(    UserDTO model,    String property,    ColumnData config,    int rowIndex,    int colIndex,    ListStore<UserDTO> store,    Grid<UserDTO> grid){
      String content=""String_Node_Str"";
      if (model.getProfilesDTO() != null) {
        for (        ProfileDTO oneProfileDTO : model.getProfilesDTO()) {
          content=oneProfileDTO.getName() + ""String_Node_Str"" + content;
        }
      }
 else {
        content=I18N.CONSTANTS.adminUsersNoProfiles();
      }
      return createUserGridText(content);
    }
  }
);
  configs.add(column);
  column=new ColumnConfig();
  column.setWidth(75);
  column.setAlignment(Style.HorizontalAlignment.RIGHT);
  column.setRenderer(new GridCellRenderer<UserDTO>(){
    @Override public Object render(    final UserDTO model,    final String property,    ColumnData config,    int rowIndex,    int colIndex,    ListStore<UserDTO> store,    Grid<UserDTO> grid){
      Button button=new Button(I18N.CONSTANTS.edit());
      button.setItemId(UIActions.edit);
      button.addListener(Events.OnClick,new Listener<ButtonEvent>(){
        @Override public void handleEvent(        ButtonEvent be){
          final Window window=new Window();
          UserSigmahForm form=AdminUsersView.this.showNewUserForm(window,new AsyncCallback<CreateResult>(){
            @Override public void onFailure(            Throwable caught){
              window.hide();
            }
            @Override public void onSuccess(            CreateResult result){
              window.hide();
              AdminUsersView.this.getAdminUsersStore().remove(model);
              AdminUsersView.this.getAdminUsersStore().add((UserDTO)result.getEntity());
              AdminUsersView.this.getAdminUsersStore().commitChanges();
            }
          }
,model);
          window.add(form);
          window.show();
        }
      }
);
      return button;
    }
  }
);
  configs.add(column);
  ColumnModel cm=new ColumnModel(configs);
  final Grid<UserDTO> grid=new Grid<UserDTO>(adminUsersStore,cm);
  grid.getView().setForceFit(true);
  grid.setStyleAttribute(""String_Node_Str"",""String_Node_Str"");
  grid.setBorders(false);
  grid.setStripeRows(true);
  grid.setAutoHeight(true);
  return grid;
}",0.987603305785124
35680,"public ProfileSigmahForm(Dispatcher dispatcher,UserLocalCache userCache,final AsyncCallback<CreateResult> callback,ProfileDTO profileToUpdate){
  this.dispatcher=dispatcher;
  this.profileToUpdate=profileToUpdate;
  UIConstants constants=GWT.create(UIConstants.class);
  FormLayout layout=new FormLayout();
  layout.setLabelWidth(LABEL_WIDTH);
  setLayout(layout);
  nameField=new TextField<String>();
  nameField.setFieldLabel(constants.adminProfilesName());
  nameField.setAllowBlank(false);
  if (profileToUpdate != null && !profileToUpdate.getName().isEmpty())   nameField.setValue(profileToUpdate.getName());
  add(nameField);
  checkGlobalPermissions=new ArrayList<CheckBoxGroup>();
  CheckBoxGroup checkGPGroup=new CheckBoxGroup();
  checkGPGroup.setOrientation(Orientation.VERTICAL);
  checkGPGroup.setFieldLabel(I18N.CONSTANTS.adminProfilesGlobalPermissions());
  String label=""String_Node_Str"";
  for (  GlobalPermissionEnum enumItem : GlobalPermissionEnum.values()) {
    label=GlobalPermissionEnum.getName(enumItem);
    CheckBox box=createCheckBox(enumItem.toString(),label);
    if (profileToUpdate != null && profileToUpdate.getGlobalPermissions() != null && profileToUpdate.getGlobalPermissions().contains(enumItem)) {
      box.setValue(true);
    }
    checkGPGroup.add(box);
  }
  checkGlobalPermissions.add(checkGPGroup);
  add(checkGPGroup);
  for (int i1=0; i1 < MAX_PRIVACY_GROUPS_TENTATIVES_PER_USER; i1++) {
    final ClickableLabel pglabel=new ClickableLabel();
    pglabel.hide();
    pglabel.addClickHandler(new ClickHandler(){
      @Override public void onClick(      ClickEvent arg0){
        pglabel.removeFromParent();
        selectedPrivacyGroupsIds.remove(new Integer(((PrivacyGroupDTO)pglabel.getData(PRIVACY_GROUP)).getId()));
        if (privacyGroupsPerms.containsKey((PrivacyGroupDTO)pglabel.getData(PRIVACY_GROUP))) {
        }
        privacyGroupsPerms.remove((PrivacyGroupDTO)pglabel.getData(PRIVACY_GROUP));
      }
    }
);
    selectedPrivacyGroups.put(i1,pglabel);
  }
  privacyGroupsPermissionsListCombo=new ComboBox<PrivacyGroupPermDTO>();
  privacyGroupsPermissionsListCombo.setDisplayField(""String_Node_Str"");
  privacyGroupsPermissionsListCombo.setValueField(""String_Node_Str"");
  privacyGroupsPermissionsListCombo.setEditable(false);
  privacyGroupsPermissionsListCombo.setTriggerAction(TriggerAction.ALL);
  int j=0;
  ListStore<PrivacyGroupPermDTO> permsStore=new ListStore<PrivacyGroupPermDTO>();
  for (  PrivacyGroupPermissionEnum enumItem : PrivacyGroupPermissionEnum.values()) {
    j++;
    PrivacyGroupPermDTO perm=new PrivacyGroupPermDTO();
    perm.setId(j);
    perm.setPermission(PrivacyGroupPermissionEnum.getName(enumItem));
    permsStore.add(perm);
  }
  privacyGroupsPermissionsListCombo.setStore(permsStore);
  privacyGroupsListCombo=new ComboBox<PrivacyGroupDTO>();
  privacyGroupsListCombo.setDisplayField(""String_Node_Str"");
  privacyGroupsListCombo.setValueField(""String_Node_Str"");
  privacyGroupsListCombo.setEditable(false);
  privacyGroupsListCombo.setTriggerAction(TriggerAction.ALL);
  final ListStore<PrivacyGroupDTO> privacyGroupsStore=new ListStore<PrivacyGroupDTO>();
  dispatcher.execute(new GetPrivacyGroups(),null,new AsyncCallback<PrivacyGroupsListResult>(){
    @Override public void onFailure(    Throwable arg0){
      privacyGroupsListCombo.setEmptyText(I18N.CONSTANTS.adminChoiceProblem());
    }
    @Override public void onSuccess(    PrivacyGroupsListResult result){
      privacyGroupsListCombo.setEmptyText(I18N.CONSTANTS.adminPrivacyGroupChoice());
      privacyGroupsStore.removeAll();
      if (result != null) {
        privacyGroupsStore.add(result.getList());
        privacyGroupsStore.commitChanges();
      }
    }
  }
);
  privacyGroupsListCombo.setStore(privacyGroupsStore);
  final Grid privacyGroupsAddSelectionGrid=new Grid(1,4);
  privacyGroupsAddSelectionGrid.getCellFormatter().setWidth(0,0,(LABEL_WIDTH + 5) + ""String_Node_Str"");
  privacyGroupsAddSelectionGrid.setCellPadding(0);
  privacyGroupsAddSelectionGrid.setCellSpacing(0);
  privacyGroupsAddSelectionGrid.setWidget(0,0,new LabelField(I18N.CONSTANTS.adminProfilesPrivacyGroups() + ""String_Node_Str""));
  privacyGroupsAddSelectionGrid.setWidget(0,1,privacyGroupsListCombo);
  privacyGroupsAddSelectionGrid.setWidget(0,2,privacyGroupsPermissionsListCombo);
  privacyGroupsListCombo.setHideLabel(false);
  if (profileToUpdate != null && profileToUpdate.getPrivacyGroups() != null) {
    Set<PrivacyGroupDTO> usedPrivacyGroups=profileToUpdate.getPrivacyGroups().keySet();
    for (    PrivacyGroupDTO usedPrivacyGroup : usedPrivacyGroups) {
      selectedPrivacyGroupsIds.add(new Integer(usedPrivacyGroup.getId()));
      privacyGroupsPerms.put(usedPrivacyGroup,profileToUpdate.getPrivacyGroups().get(usedPrivacyGroup));
    }
  }
  final Button addButton=new Button(I18N.CONSTANTS.addItem());
  addButton.addListener(Events.OnClick,new Listener<ButtonEvent>(){
    @Override public void handleEvent(    ButtonEvent be){
      if (privacyGroupsListCombo.getValue() != null) {
        if (!selectedPrivacyGroupsIds.contains(new Integer(privacyGroupsListCombo.getValue().getId()))) {
          if (num < MAX_PRIVACY_GROUPS_TENTATIVES_PER_USER) {
            selectedPrivacyGroups.get(num).setData(PRIVACY_GROUP,privacyGroupsListCombo.getValue());
            selectedPrivacyGroups.get(num).setText(privacyGroupsListCombo.getValue().getCode() + ""String_Node_Str"" + privacyGroupsListCombo.getValue().getTitle()+ ""String_Node_Str""+ privacyGroupsPermissionsListCombo.getValue().getPermission());
            selectedPrivacyGroups.get(num).show();
            num++;
            selectedPrivacyGroupsIds.add(new Integer(privacyGroupsListCombo.getValue().getId()));
            privacyGroupsPerms.put(privacyGroupsListCombo.getValue(),PrivacyGroupPermissionEnum.translatePGPermission(privacyGroupsPermissionsListCombo.getValue().getPermission()));
          }
 else {
            MessageBox.alert(I18N.CONSTANTS.adminMaxAttempts(),I18N.CONSTANTS.adminMaxAttemptsProfiles(),null);
            ProfileSigmahForm.this.hide();
          }
        }
      }
    }
  }
);
  privacyGroupsAddSelectionGrid.setWidget(0,3,addButton);
  add(privacyGroupsAddSelectionGrid);
  if (profileToUpdate != null && profileToUpdate.getPrivacyGroups() != null) {
    Set<PrivacyGroupDTO> usedPrivacyGroups=profileToUpdate.getPrivacyGroups().keySet();
    for (    PrivacyGroupDTO usedPrivacyGroup : usedPrivacyGroups) {
      if (num < MAX_PRIVACY_GROUPS_TENTATIVES_PER_USER) {
        selectedPrivacyGroups.get(num).setData(PRIVACY_GROUP,usedPrivacyGroup);
        selectedPrivacyGroups.get(num).setText(usedPrivacyGroup.getCode() + ""String_Node_Str"" + usedPrivacyGroup.getTitle()+ ""String_Node_Str""+ PrivacyGroupPermissionEnum.getName(profileToUpdate.getPrivacyGroups().get(usedPrivacyGroup)));
        selectedPrivacyGroups.get(num).show();
        num++;
      }
 else {
        MessageBox.alert(""String_Node_Str"",""String_Node_Str"",null);
        ProfileSigmahForm.this.hide();
      }
    }
  }
  for (  ClickableLabel selected : selectedPrivacyGroups.values()) {
    ProfileSigmahForm.this.add(selected);
  }
  final Button createButton=new Button(I18N.CONSTANTS.save());
  createButton.addListener(Events.OnClick,new Listener<ButtonEvent>(){
    @Override public void handleEvent(    ButtonEvent be){
      createProfile(callback);
    }
  }
);
  add(createButton);
}","public ProfileSigmahForm(Dispatcher dispatcher,UserLocalCache userCache,final AsyncCallback<CreateResult> callback,ProfileDTO profileToUpdate){
  this.dispatcher=dispatcher;
  this.profileToUpdate=profileToUpdate;
  UIConstants constants=GWT.create(UIConstants.class);
  FormLayout layout=new FormLayout();
  layout.setLabelWidth(LABEL_WIDTH);
  setLayout(layout);
  nameField=new TextField<String>();
  nameField.setFieldLabel(constants.adminProfilesName());
  nameField.setAllowBlank(false);
  if (profileToUpdate != null && !profileToUpdate.getName().isEmpty())   nameField.setValue(profileToUpdate.getName());
  add(nameField);
  checkGlobalPermissions=new ArrayList<CheckBoxGroup>();
  CheckBoxGroup checkGPGroup=new CheckBoxGroup();
  checkGPGroup.setOrientation(Orientation.VERTICAL);
  checkGPGroup.setFieldLabel(I18N.CONSTANTS.adminProfilesGlobalPermissions());
  String label=""String_Node_Str"";
  for (  GlobalPermissionEnum enumItem : GlobalPermissionEnum.values()) {
    label=GlobalPermissionEnum.getName(enumItem);
    CheckBox box=createCheckBox(enumItem.toString(),label);
    if (profileToUpdate != null && profileToUpdate.getGlobalPermissions() != null && profileToUpdate.getGlobalPermissions().contains(enumItem)) {
      box.setValue(true);
    }
    checkGPGroup.add(box);
  }
  checkGlobalPermissions.add(checkGPGroup);
  add(checkGPGroup);
  for (int i1=0; i1 < MAX_PRIVACY_GROUPS_TENTATIVES_PER_USER; i1++) {
    final ClickableLabel pglabel=new ClickableLabel();
    pglabel.hide();
    pglabel.addClickHandler(new ClickHandler(){
      @Override public void onClick(      ClickEvent arg0){
        pglabel.removeFromParent();
        selectedPrivacyGroupsIds.remove(new Integer(((PrivacyGroupDTO)pglabel.getData(PRIVACY_GROUP)).getId()));
        if (privacyGroupsPerms.containsKey((PrivacyGroupDTO)pglabel.getData(PRIVACY_GROUP))) {
        }
        privacyGroupsPerms.remove((PrivacyGroupDTO)pglabel.getData(PRIVACY_GROUP));
      }
    }
);
    selectedPrivacyGroups.put(i1,pglabel);
  }
  privacyGroupsPermissionsListCombo=new ComboBox<PrivacyGroupPermDTO>();
  privacyGroupsPermissionsListCombo.setDisplayField(""String_Node_Str"");
  privacyGroupsPermissionsListCombo.setValueField(""String_Node_Str"");
  privacyGroupsPermissionsListCombo.setEditable(false);
  privacyGroupsPermissionsListCombo.setTriggerAction(TriggerAction.ALL);
  int j=0;
  ListStore<PrivacyGroupPermDTO> permsStore=new ListStore<PrivacyGroupPermDTO>();
  for (  PrivacyGroupPermissionEnum enumItem : PrivacyGroupPermissionEnum.values()) {
    j++;
    PrivacyGroupPermDTO perm=new PrivacyGroupPermDTO();
    perm.setId(j);
    perm.setPermission(PrivacyGroupPermissionEnum.getName(enumItem));
    if (!PrivacyGroupPermissionEnum.NONE.equals(enumItem))     permsStore.add(perm);
  }
  privacyGroupsPermissionsListCombo.setStore(permsStore);
  privacyGroupsListCombo=new ComboBox<PrivacyGroupDTO>();
  privacyGroupsListCombo.setDisplayField(""String_Node_Str"");
  privacyGroupsListCombo.setValueField(""String_Node_Str"");
  privacyGroupsListCombo.setEditable(false);
  privacyGroupsListCombo.setTriggerAction(TriggerAction.ALL);
  final ListStore<PrivacyGroupDTO> privacyGroupsStore=new ListStore<PrivacyGroupDTO>();
  dispatcher.execute(new GetPrivacyGroups(),null,new AsyncCallback<PrivacyGroupsListResult>(){
    @Override public void onFailure(    Throwable arg0){
      privacyGroupsListCombo.setEmptyText(I18N.CONSTANTS.adminChoiceProblem());
    }
    @Override public void onSuccess(    PrivacyGroupsListResult result){
      privacyGroupsListCombo.setEmptyText(I18N.CONSTANTS.adminPrivacyGroupChoice());
      privacyGroupsStore.removeAll();
      if (result != null) {
        privacyGroupsStore.add(result.getList());
        privacyGroupsStore.commitChanges();
      }
    }
  }
);
  privacyGroupsListCombo.setStore(privacyGroupsStore);
  final Grid privacyGroupsAddSelectionGrid=new Grid(1,4);
  privacyGroupsAddSelectionGrid.getCellFormatter().setWidth(0,0,(LABEL_WIDTH + 5) + ""String_Node_Str"");
  privacyGroupsAddSelectionGrid.setCellPadding(0);
  privacyGroupsAddSelectionGrid.setCellSpacing(0);
  privacyGroupsAddSelectionGrid.setWidget(0,0,new LabelField(I18N.CONSTANTS.adminProfilesPrivacyGroups() + ""String_Node_Str""));
  privacyGroupsAddSelectionGrid.setWidget(0,1,privacyGroupsListCombo);
  privacyGroupsAddSelectionGrid.setWidget(0,2,privacyGroupsPermissionsListCombo);
  privacyGroupsListCombo.setHideLabel(false);
  if (profileToUpdate != null && profileToUpdate.getPrivacyGroups() != null) {
    Set<PrivacyGroupDTO> usedPrivacyGroups=profileToUpdate.getPrivacyGroups().keySet();
    for (    PrivacyGroupDTO usedPrivacyGroup : usedPrivacyGroups) {
      selectedPrivacyGroupsIds.add(new Integer(usedPrivacyGroup.getId()));
      privacyGroupsPerms.put(usedPrivacyGroup,profileToUpdate.getPrivacyGroups().get(usedPrivacyGroup));
    }
  }
  final Button addButton=new Button(I18N.CONSTANTS.addItem());
  addButton.addListener(Events.OnClick,new Listener<ButtonEvent>(){
    @Override public void handleEvent(    ButtonEvent be){
      if (privacyGroupsListCombo.getValue() != null) {
        if (!selectedPrivacyGroupsIds.contains(new Integer(privacyGroupsListCombo.getValue().getId()))) {
          if (num < MAX_PRIVACY_GROUPS_TENTATIVES_PER_USER) {
            selectedPrivacyGroups.get(num).setData(PRIVACY_GROUP,privacyGroupsListCombo.getValue());
            selectedPrivacyGroups.get(num).setText(privacyGroupsListCombo.getValue().getCode() + ""String_Node_Str"" + privacyGroupsListCombo.getValue().getTitle()+ ""String_Node_Str""+ privacyGroupsPermissionsListCombo.getValue().getPermission());
            selectedPrivacyGroups.get(num).show();
            num++;
            selectedPrivacyGroupsIds.add(new Integer(privacyGroupsListCombo.getValue().getId()));
            privacyGroupsPerms.put(privacyGroupsListCombo.getValue(),PrivacyGroupPermissionEnum.translatePGPermission(privacyGroupsPermissionsListCombo.getValue().getPermission()));
          }
 else {
            MessageBox.alert(I18N.CONSTANTS.adminMaxAttempts(),I18N.CONSTANTS.adminMaxAttemptsProfiles(),null);
            ProfileSigmahForm.this.hide();
          }
        }
      }
    }
  }
);
  privacyGroupsAddSelectionGrid.setWidget(0,3,addButton);
  add(privacyGroupsAddSelectionGrid);
  if (profileToUpdate != null && profileToUpdate.getPrivacyGroups() != null) {
    Set<PrivacyGroupDTO> usedPrivacyGroups=profileToUpdate.getPrivacyGroups().keySet();
    for (    PrivacyGroupDTO usedPrivacyGroup : usedPrivacyGroups) {
      if (num < MAX_PRIVACY_GROUPS_TENTATIVES_PER_USER) {
        selectedPrivacyGroups.get(num).setData(PRIVACY_GROUP,usedPrivacyGroup);
        selectedPrivacyGroups.get(num).setText(usedPrivacyGroup.getCode() + ""String_Node_Str"" + usedPrivacyGroup.getTitle()+ ""String_Node_Str""+ PrivacyGroupPermissionEnum.getName(profileToUpdate.getPrivacyGroups().get(usedPrivacyGroup)));
        selectedPrivacyGroups.get(num).show();
        num++;
      }
 else {
        MessageBox.alert(""String_Node_Str"",""String_Node_Str"",null);
        ProfileSigmahForm.this.hide();
      }
    }
  }
  for (  ClickableLabel selected : selectedPrivacyGroups.values()) {
    ProfileSigmahForm.this.add(selected);
  }
  final Button createButton=new Button(I18N.CONSTANTS.save());
  createButton.addListener(Events.OnClick,new Listener<ButtonEvent>(){
    @Override public void handleEvent(    ButtonEvent be){
      createProfile(callback);
    }
  }
);
  add(createButton);
}",0.996038939241356
35681,"public void showNewFlexibleElementForm(final FlexibleElementDTO model,final boolean isUpdate){
  int width=700;
  int height=450;
  String title=I18N.CONSTANTS.adminFlexible();
  final Window window=new Window();
  window.setHeading(title);
  window.setSize(width,height);
  window.setPlain(true);
  window.setModal(true);
  window.setBlinkModal(true);
  window.setLayout(new FitLayout());
  final ElementForm form=new ElementForm(dispatcher,new AsyncCallback<UpdateModelResult>(){
    @Override public void onFailure(    Throwable caught){
      window.hide();
    }
    @Override public void onSuccess(    UpdateModelResult result){
      if (!isUpdate) {
        window.hide();
        AdminFlexibleElementsView.this.getFieldsStore().add((FlexibleElementDTO)result.getAnnexEntity());
        AdminFlexibleElementsView.this.getFieldsStore().commitChanges();
      }
 else {
        window.hide();
        if (projectModel != null) {
          ProjectModelDTO modelUpdated=(ProjectModelDTO)result.getEntity();
          AdminFlexibleElementsView.this.setProjectModel(modelUpdated);
        }
 else {
          OrgUnitModelDTO modelUpdated=(OrgUnitModelDTO)result.getEntity();
          AdminFlexibleElementsView.this.setOrgUnitModel(modelUpdated);
        }
        AdminFlexibleElementsView.this.getFieldsStore().remove(model);
        AdminFlexibleElementsView.this.getFieldsStore().add((FlexibleElementDTO)result.getAnnexEntity());
        AdminFlexibleElementsView.this.getFieldsStore().commitChanges();
      }
    }
  }
,model,projectModel,orgUnitModel,addedGroups);
  window.add(form);
  window.show();
}","public void showNewFlexibleElementForm(final FlexibleElementDTO model,final boolean isUpdate){
  int width=700;
  int height=450;
  String title=I18N.CONSTANTS.adminFlexible();
  final Window window=new Window();
  window.setHeading(title);
  window.setSize(width,height);
  window.setPlain(true);
  window.setModal(true);
  window.setBlinkModal(true);
  window.setLayout(new FitLayout());
  final ElementForm form=new ElementForm(dispatcher,new AsyncCallback<UpdateModelResult>(){
    @Override public void onFailure(    Throwable caught){
      window.hide();
    }
    @Override public void onSuccess(    UpdateModelResult result){
      if (!isUpdate) {
        window.hide();
        AdminFlexibleElementsView.this.getFieldsStore().add((FlexibleElementDTO)result.getAnnexEntity());
        AdminFlexibleElementsView.this.getFieldsStore().commitChanges();
      }
 else {
        window.hide();
        if (projectModel != null) {
          ProjectModelDTO modelUpdated=(ProjectModelDTO)result.getEntity();
          AdminFlexibleElementsView.this.refreshProjectModel(modelUpdated);
        }
 else {
          OrgUnitModelDTO modelUpdated=(OrgUnitModelDTO)result.getEntity();
          AdminFlexibleElementsView.this.refreshOrgUnitModel(modelUpdated);
        }
        AdminFlexibleElementsView.this.getFieldsStore().remove(model);
        AdminFlexibleElementsView.this.getFieldsStore().add((FlexibleElementDTO)result.getAnnexEntity());
        AdminFlexibleElementsView.this.getFieldsStore().commitChanges();
      }
    }
  }
,model,projectModel,orgUnitModel,addedGroups);
  window.add(form);
  window.show();
}",0.9938118811881188
35682,"@Override public void onSuccess(UpdateModelResult result){
  if (!isUpdate) {
    window.hide();
    AdminFlexibleElementsView.this.getFieldsStore().add((FlexibleElementDTO)result.getAnnexEntity());
    AdminFlexibleElementsView.this.getFieldsStore().commitChanges();
  }
 else {
    window.hide();
    if (projectModel != null) {
      ProjectModelDTO modelUpdated=(ProjectModelDTO)result.getEntity();
      AdminFlexibleElementsView.this.setProjectModel(modelUpdated);
    }
 else {
      OrgUnitModelDTO modelUpdated=(OrgUnitModelDTO)result.getEntity();
      AdminFlexibleElementsView.this.setOrgUnitModel(modelUpdated);
    }
    AdminFlexibleElementsView.this.getFieldsStore().remove(model);
    AdminFlexibleElementsView.this.getFieldsStore().add((FlexibleElementDTO)result.getAnnexEntity());
    AdminFlexibleElementsView.this.getFieldsStore().commitChanges();
  }
}","@Override public void onSuccess(UpdateModelResult result){
  if (!isUpdate) {
    window.hide();
    AdminFlexibleElementsView.this.getFieldsStore().add((FlexibleElementDTO)result.getAnnexEntity());
    AdminFlexibleElementsView.this.getFieldsStore().commitChanges();
  }
 else {
    window.hide();
    if (projectModel != null) {
      ProjectModelDTO modelUpdated=(ProjectModelDTO)result.getEntity();
      AdminFlexibleElementsView.this.refreshProjectModel(modelUpdated);
    }
 else {
      OrgUnitModelDTO modelUpdated=(OrgUnitModelDTO)result.getEntity();
      AdminFlexibleElementsView.this.refreshOrgUnitModel(modelUpdated);
    }
    AdminFlexibleElementsView.this.getFieldsStore().remove(model);
    AdminFlexibleElementsView.this.getFieldsStore().add((FlexibleElementDTO)result.getAnnexEntity());
    AdminFlexibleElementsView.this.getFieldsStore().commitChanges();
  }
}",0.9886104783599088
35683,"/** 
 * Displays the log frame content in the log frame grid (specific objectives, expected results, prerequisites, activities);
 * @param table The log frame grid.
 * @param enabled If the log frame is read only or not.
 * @param logFrame The log frame.
 */
public void displayLogFrame(int databaseId,LogFrameDTO logFrame,boolean enabled){
  this.logFrame=logFrame;
  this.databaseId=databaseId;
  this.logFrameModel=logFrame.getLogFrameModel();
  this.readOnly=!enabled;
  ensureLogFrame();
  resetTable();
  initTable();
  initCodePolicies();
  for (  final LogFrameGroupDTO group : logFrame.getGroups()) {
switch (group.getType()) {
case SPECIFIC_OBJECTIVE:
      if (logFrameModel.getEnableSpecificObjectivesGroups()) {
        addSpecificObjectivesGroup(group);
      }
    break;
case EXPECTED_RESULT:
  if (logFrameModel.getEnableExpectedResultsGroups()) {
    addExpectedResultsGroup(group);
  }
break;
case PREREQUISITE:
if (logFrameModel.getEnablePrerequisitesGroups()) {
addPrerequisitesGroup(group);
}
break;
case ACTIVITY:
if (logFrameModel.getEnableActivitiesGroups()) {
addActivitiesGroup(group);
}
break;
}
}
for (final SpecificObjectiveDTO objective : logFrame.getSpecificObjectives()) {
addSpecificObjective(objective);
}
for (final PrerequisiteDTO prerequisite : logFrame.getPrerequisites()) {
addPrerequisite(prerequisite);
}
}","/** 
 * Displays the log frame content in the log frame grid (specific objectives, expected results, prerequisites, activities);
 * @param table The log frame grid.
 * @param enabled If the log frame is read only or not.
 * @param logFrame The log frame.
 */
public void displayLogFrame(int databaseId,LogFrameDTO logFrame,boolean enabled){
  this.logFrame=logFrame;
  this.databaseId=databaseId;
  this.logFrameModel=logFrame.getLogFrameModel();
  this.readOnly=!enabled;
  ensureLogFrame();
  resetTable();
  initTable();
  for (  final LogFrameGroupDTO group : logFrame.getGroups()) {
switch (group.getType()) {
case SPECIFIC_OBJECTIVE:
      if (logFrameModel.getEnableSpecificObjectivesGroups()) {
        addSpecificObjectivesGroup(group);
      }
    break;
case EXPECTED_RESULT:
  if (logFrameModel.getEnableExpectedResultsGroups()) {
    addExpectedResultsGroup(group);
  }
break;
case PREREQUISITE:
if (logFrameModel.getEnablePrerequisitesGroups()) {
addPrerequisitesGroup(group);
}
break;
case ACTIVITY:
if (logFrameModel.getEnableActivitiesGroups()) {
addActivitiesGroup(group);
}
break;
}
}
for (final SpecificObjectiveDTO objective : logFrame.getSpecificObjectives()) {
addSpecificObjective(objective);
}
for (final PrerequisiteDTO prerequisite : logFrame.getPrerequisites()) {
addPrerequisite(prerequisite);
}
}",0.9917726252804788
35684,"/** 
 * Adds an prerequisite row.
 * @param prerequisite The prerequisite. Must not be <code>null</code>.
 */
private void addPrerequisite(final PrerequisiteDTO prerequisite){
  if (prerequisite == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  final LogFrameGroupDTO group=prerequisite.getGroup();
  @SuppressWarnings(""String_Node_Str"") RowsGroup<LogFrameGroupDTO> g=(RowsGroup<LogFrameGroupDTO>)prerequisitesView.getGroup(group.getClientSideId());
  if (g == null) {
    g=addPrerequisitesGroup(group);
  }
  final StringBuilder sb=new StringBuilder();
  sb.append(I18N.CONSTANTS.logFramePrerequisitesCode());
  sb.append(""String_Node_Str"");
  sb.append(prerequisitesPolicy.getCode(prerequisite.getCode(),prerequisite));
  prerequisite.setLabel(sb.toString());
  if (prerequisite.getPosition() == null) {
    prerequisite.setPosition(g.getRowsCount() + 1);
  }
  prerequisitesView.insertRow(prerequisite.getPosition(),group.getClientSideId(),new Row<PrerequisiteDTO>(prerequisite){
    @Override public boolean isSimilar(    int column,    PrerequisiteDTO userObject,    PrerequisiteDTO other){
      return false;
    }
    @Override public Widget getWidgetAt(    int column,    final PrerequisiteDTO userObject){
switch (column) {
case 0:
        final Label codeLabel=new Label();
      codeLabel.addStyleName(CSS_CODE_LABEL_STYLE_NAME);
    if (userObject != null) {
      codeLabel.setText(userObject.getLabel());
    }
  final Grid grid=new Grid(1,2);
grid.setCellPadding(0);
grid.setCellSpacing(0);
grid.setWidget(0,0,codeLabel);
if (!readOnly) {
grid.setWidget(0,1,buildPrerequisiteMenu(this,codeLabel));
}
return grid;
case 5:
final TextArea contentTextBox=new TextArea();
contentTextBox.setWidth(""String_Node_Str"");
contentTextBox.setHeight(""String_Node_Str"");
contentTextBox.setVisibleLines(2);
contentTextBox.addStyleName(""String_Node_Str"");
contentTextBox.setEnabled(!readOnly);
if (userObject != null) {
contentTextBox.setText(userObject.getContent());
}
contentTextBox.addChangeHandler(new ChangeHandler(){
@Override public void onChange(ChangeEvent e){
userObject.setContent(contentTextBox.getText());
fireLogFrameEdited();
}
}
);
return contentTextBox;
default :
return null;
}
}
@Override public int getId(PrerequisiteDTO userObject){
return userObject.getClientSideId();
}
}
);
fireLogFrameEdited();
}","/** 
 * Adds an prerequisite row.
 * @param prerequisite The prerequisite. Must not be <code>null</code>.
 */
private void addPrerequisite(final PrerequisiteDTO prerequisite){
  if (prerequisite == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  final LogFrameGroupDTO group=prerequisite.getGroup();
  @SuppressWarnings(""String_Node_Str"") RowsGroup<LogFrameGroupDTO> g=(RowsGroup<LogFrameGroupDTO>)prerequisitesView.getGroup(group.getClientSideId());
  if (g == null) {
    g=addPrerequisitesGroup(group);
  }
  final StringBuilder sb=new StringBuilder();
  sb.append(I18N.CONSTANTS.logFramePrerequisitesCode());
  sb.append(""String_Node_Str"");
  sb.append(prerequisite.getFormattedCode());
  prerequisite.setLabel(sb.toString());
  if (prerequisite.getPosition() == null) {
    prerequisite.setPosition(g.getRowsCount() + 1);
  }
  prerequisitesView.insertRow(prerequisite.getPosition(),group.getClientSideId(),new Row<PrerequisiteDTO>(prerequisite){
    @Override public boolean isSimilar(    int column,    PrerequisiteDTO userObject,    PrerequisiteDTO other){
      return false;
    }
    @Override public Widget getWidgetAt(    int column,    final PrerequisiteDTO userObject){
switch (column) {
case 0:
        final Label codeLabel=new Label();
      codeLabel.addStyleName(CSS_CODE_LABEL_STYLE_NAME);
    if (userObject != null) {
      codeLabel.setText(userObject.getLabel());
    }
  final Grid grid=new Grid(1,2);
grid.setCellPadding(0);
grid.setCellSpacing(0);
grid.setWidget(0,0,codeLabel);
if (!readOnly) {
grid.setWidget(0,1,buildPrerequisiteMenu(this,codeLabel));
}
return grid;
case 5:
final TextArea contentTextBox=new TextArea();
contentTextBox.setWidth(""String_Node_Str"");
contentTextBox.setHeight(""String_Node_Str"");
contentTextBox.setVisibleLines(2);
contentTextBox.addStyleName(""String_Node_Str"");
contentTextBox.setEnabled(!readOnly);
if (userObject != null) {
contentTextBox.setText(userObject.getContent());
}
contentTextBox.addChangeHandler(new ChangeHandler(){
@Override public void onChange(ChangeEvent e){
userObject.setContent(contentTextBox.getText());
fireLogFrameEdited();
}
}
);
return contentTextBox;
default :
return null;
}
}
@Override public int getId(PrerequisiteDTO userObject){
return userObject.getClientSideId();
}
}
);
fireLogFrameEdited();
}",0.9873254564983888
35685,"/** 
 * Adds an activity row.
 * @param result The expected result. Must not be <code>null</code>.
 */
private void addExpectedResult(final ExpectedResultDTO result){
  if (result == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  final LogFrameGroupDTO group=result.getGroup();
  @SuppressWarnings(""String_Node_Str"") RowsGroup<LogFrameGroupDTO> g=(RowsGroup<LogFrameGroupDTO>)expectedResultsView.getGroup(group.getClientSideId());
  if (g == null) {
    g=addExpectedResultsGroup(group);
  }
  final StringBuilder sb=new StringBuilder();
  sb.append(I18N.CONSTANTS.logFrameExceptedResultsCode());
  sb.append(""String_Node_Str"");
  sb.append(expectedResultsPolicy.getCode(result.getCode(),result));
  result.setLabel(sb.toString());
  if (result.getPosition() == null) {
    result.setPosition(g.getRowsCount() + 1);
  }
  expectedResultsView.insertRow(result.getPosition(),group.getClientSideId(),new Row<ExpectedResultDTO>(result){
    @Override public boolean isSimilar(    int column,    ExpectedResultDTO userObject,    ExpectedResultDTO other){
switch (column) {
case 0:
        return userObject.getParentSpecificObjective() != null && other.getParentSpecificObjective() != null && userObject.getParentSpecificObjective().getCode() == other.getParentSpecificObjective().getCode();
    }
    return false;
  }
  @Override public Widget getWidgetAt(  int column,  final ExpectedResultDTO userObject){
switch (column) {
case 0:
      final Label parentCodeLabel=new Label();
    parentCodeLabel.addStyleName(CSS_CODE_LABEL_STYLE_NAME);
  final SpecificObjectiveDTO parent;
if (userObject != null && (parent=userObject.getParentSpecificObjective()) != null) {
  final StringBuilder sb=new StringBuilder();
  sb.append(I18N.CONSTANTS.logFrameExceptedResultsCode());
  sb.append(""String_Node_Str"");
  sb.append(I18N.CONSTANTS.logFrameSpecificObjectivesCode());
  sb.append(""String_Node_Str"");
  sb.append(specificObjectivesPolicy.getCode(parent.getCode(),parent));
  sb.append(""String_Node_Str"");
  parentCodeLabel.setText(sb.toString());
}
return parentCodeLabel;
case 1:
final Label codeLabel=new Label();
codeLabel.addStyleName(CSS_CODE_LABEL_STYLE_NAME);
if (userObject != null) {
codeLabel.setText(userObject.getLabel());
}
final Grid grid=new Grid(1,2);
grid.setCellPadding(0);
grid.setCellSpacing(0);
grid.setWidget(0,0,codeLabel);
if (!readOnly) {
grid.setWidget(0,1,buildExpectedResultMenu(this,codeLabel));
}
return grid;
case 2:
final TextArea interventionLogicTextBox=new TextArea();
interventionLogicTextBox.setWidth(""String_Node_Str"");
interventionLogicTextBox.setHeight(""String_Node_Str"");
interventionLogicTextBox.setVisibleLines(3);
interventionLogicTextBox.addStyleName(""String_Node_Str"");
interventionLogicTextBox.setEnabled(!readOnly);
if (userObject != null) {
interventionLogicTextBox.setText(userObject.getInterventionLogic());
}
interventionLogicTextBox.addChangeHandler(new ChangeHandler(){
@Override public void onChange(ChangeEvent e){
userObject.setInterventionLogic(interventionLogicTextBox.getText());
fireLogFrameEdited();
}
}
);
return interventionLogicTextBox;
case 3:
return new IndicatorListWidget(dispatcher,databaseId,result);
case 4:
final TextArea risksTextBox=new TextArea();
risksTextBox.setWidth(""String_Node_Str"");
risksTextBox.setHeight(""String_Node_Str"");
risksTextBox.setVisibleLines(3);
risksTextBox.addStyleName(""String_Node_Str"");
risksTextBox.setEnabled(!readOnly);
if (userObject != null) {
risksTextBox.setText(userObject.getRisks());
}
risksTextBox.addChangeHandler(new ChangeHandler(){
@Override public void onChange(ChangeEvent e){
userObject.setRisks(risksTextBox.getText());
fireLogFrameEdited();
}
}
);
return risksTextBox;
case 5:
final TextArea assumptionsTextBox=new TextArea();
assumptionsTextBox.setWidth(""String_Node_Str"");
assumptionsTextBox.setHeight(""String_Node_Str"");
assumptionsTextBox.setVisibleLines(3);
assumptionsTextBox.addStyleName(""String_Node_Str"");
assumptionsTextBox.setEnabled(!readOnly);
if (userObject != null) {
assumptionsTextBox.setText(userObject.getAssumptions());
}
assumptionsTextBox.addChangeHandler(new ChangeHandler(){
@Override public void onChange(ChangeEvent e){
userObject.setAssumptions(assumptionsTextBox.getText());
fireLogFrameEdited();
}
}
);
return assumptionsTextBox;
default :
return null;
}
}
@Override public int getId(ExpectedResultDTO userObject){
return userObject.getClientSideId();
}
}
);
fireLogFrameEdited();
for (final LogFrameActivityDTO activity : result.getActivities()) {
addActivity(activity);
}
}","/** 
 * Adds an activity row.
 * @param result The expected result. Must not be <code>null</code>.
 */
private void addExpectedResult(final ExpectedResultDTO result){
  if (result == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  final LogFrameGroupDTO group=result.getGroup();
  @SuppressWarnings(""String_Node_Str"") RowsGroup<LogFrameGroupDTO> g=(RowsGroup<LogFrameGroupDTO>)expectedResultsView.getGroup(group.getClientSideId());
  if (g == null) {
    g=addExpectedResultsGroup(group);
  }
  final StringBuilder sb=new StringBuilder();
  sb.append(I18N.CONSTANTS.logFrameExceptedResultsCode());
  sb.append(""String_Node_Str"");
  sb.append(result.getFormattedCode());
  result.setLabel(sb.toString());
  if (result.getPosition() == null) {
    result.setPosition(g.getRowsCount() + 1);
  }
  expectedResultsView.insertRow(result.getPosition(),group.getClientSideId(),new Row<ExpectedResultDTO>(result){
    @Override public boolean isSimilar(    int column,    ExpectedResultDTO userObject,    ExpectedResultDTO other){
switch (column) {
case 0:
        return userObject.getParentSpecificObjective() != null && other.getParentSpecificObjective() != null && userObject.getParentSpecificObjective().getCode() == other.getParentSpecificObjective().getCode();
    }
    return false;
  }
  @Override public Widget getWidgetAt(  int column,  final ExpectedResultDTO userObject){
switch (column) {
case 0:
      final Label parentCodeLabel=new Label();
    parentCodeLabel.addStyleName(CSS_CODE_LABEL_STYLE_NAME);
  final SpecificObjectiveDTO parent;
if (userObject != null && (parent=userObject.getParentSpecificObjective()) != null) {
  final StringBuilder sb=new StringBuilder();
  sb.append(I18N.CONSTANTS.logFrameExceptedResultsCode());
  sb.append(""String_Node_Str"");
  sb.append(I18N.CONSTANTS.logFrameSpecificObjectivesCode());
  sb.append(""String_Node_Str"");
  sb.append(parent.getFormattedCode());
  sb.append(""String_Node_Str"");
  parentCodeLabel.setText(sb.toString());
}
return parentCodeLabel;
case 1:
final Label codeLabel=new Label();
codeLabel.addStyleName(CSS_CODE_LABEL_STYLE_NAME);
if (userObject != null) {
codeLabel.setText(userObject.getLabel());
}
final Grid grid=new Grid(1,2);
grid.setCellPadding(0);
grid.setCellSpacing(0);
grid.setWidget(0,0,codeLabel);
if (!readOnly) {
grid.setWidget(0,1,buildExpectedResultMenu(this,codeLabel));
}
return grid;
case 2:
final TextArea interventionLogicTextBox=new TextArea();
interventionLogicTextBox.setWidth(""String_Node_Str"");
interventionLogicTextBox.setHeight(""String_Node_Str"");
interventionLogicTextBox.setVisibleLines(3);
interventionLogicTextBox.addStyleName(""String_Node_Str"");
interventionLogicTextBox.setEnabled(!readOnly);
if (userObject != null) {
interventionLogicTextBox.setText(userObject.getInterventionLogic());
}
interventionLogicTextBox.addChangeHandler(new ChangeHandler(){
@Override public void onChange(ChangeEvent e){
userObject.setInterventionLogic(interventionLogicTextBox.getText());
fireLogFrameEdited();
}
}
);
return interventionLogicTextBox;
case 3:
return new IndicatorListWidget(dispatcher,databaseId,result);
case 4:
final TextArea risksTextBox=new TextArea();
risksTextBox.setWidth(""String_Node_Str"");
risksTextBox.setHeight(""String_Node_Str"");
risksTextBox.setVisibleLines(3);
risksTextBox.addStyleName(""String_Node_Str"");
risksTextBox.setEnabled(!readOnly);
if (userObject != null) {
risksTextBox.setText(userObject.getRisks());
}
risksTextBox.addChangeHandler(new ChangeHandler(){
@Override public void onChange(ChangeEvent e){
userObject.setRisks(risksTextBox.getText());
fireLogFrameEdited();
}
}
);
return risksTextBox;
case 5:
final TextArea assumptionsTextBox=new TextArea();
assumptionsTextBox.setWidth(""String_Node_Str"");
assumptionsTextBox.setHeight(""String_Node_Str"");
assumptionsTextBox.setVisibleLines(3);
assumptionsTextBox.addStyleName(""String_Node_Str"");
assumptionsTextBox.setEnabled(!readOnly);
if (userObject != null) {
assumptionsTextBox.setText(userObject.getAssumptions());
}
assumptionsTextBox.addChangeHandler(new ChangeHandler(){
@Override public void onChange(ChangeEvent e){
userObject.setAssumptions(assumptionsTextBox.getText());
fireLogFrameEdited();
}
}
);
return assumptionsTextBox;
default :
return null;
}
}
@Override public int getId(ExpectedResultDTO userObject){
return userObject.getClientSideId();
}
}
);
fireLogFrameEdited();
for (final LogFrameActivityDTO activity : result.getActivities()) {
addActivity(activity);
}
}",0.9848064766552068
35686,"/** 
 * Adds an activity row.
 * @param activity The activity. Must not be <code>null</code>.
 */
private void addActivity(final LogFrameActivityDTO activity){
  if (activity == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  final LogFrameGroupDTO group=activity.getGroup();
  @SuppressWarnings(""String_Node_Str"") RowsGroup<LogFrameGroupDTO> g=(RowsGroup<LogFrameGroupDTO>)activitiesView.getGroup(group.getClientSideId());
  if (g == null) {
    g=addActivitiesGroup(group);
  }
  final StringBuilder sb=new StringBuilder();
  sb.append(I18N.CONSTANTS.logFrameActivitiesCode());
  sb.append(""String_Node_Str"");
  sb.append(activitiesPolicy.getCode(activity.getCode(),activity));
  activity.setLabel(sb.toString());
  if (activity.getPosition() == null) {
    activity.setPosition(g.getRowsCount() + 1);
  }
  activitiesView.insertRow(activity.getPosition(),group.getClientSideId(),new Row<LogFrameActivityDTO>(activity){
    @Override public boolean isSimilar(    int column,    LogFrameActivityDTO userObject,    LogFrameActivityDTO other){
switch (column) {
case 0:
        return userObject.getParentExpectedResult() != null && other.getParentExpectedResult() != null && userObject.getParentExpectedResult().getCode() == other.getParentExpectedResult().getCode();
    }
    return false;
  }
  @Override public Widget getWidgetAt(  int column,  final LogFrameActivityDTO userObject){
switch (column) {
case 0:
      final Label parentCodeLabel=new Label();
    parentCodeLabel.addStyleName(CSS_CODE_LABEL_STYLE_NAME);
  final ExpectedResultDTO parent;
if (userObject != null && (parent=userObject.getParentExpectedResult()) != null) {
  final StringBuilder sb=new StringBuilder();
  sb.append(I18N.CONSTANTS.logFrameActivitiesCode());
  sb.append(""String_Node_Str"");
  sb.append(I18N.CONSTANTS.logFrameExceptedResultsCode());
  sb.append(""String_Node_Str"");
  sb.append(expectedResultsPolicy.getCode(parent.getCode(),parent));
  sb.append(""String_Node_Str"");
  parentCodeLabel.setText(sb.toString());
}
return parentCodeLabel;
case 1:
final Label codeLabel=new Label();
codeLabel.addStyleName(CSS_CODE_LABEL_STYLE_NAME);
if (userObject != null) {
codeLabel.setText(userObject.getLabel());
}
final Grid grid=new Grid(1,2);
grid.setCellPadding(0);
grid.setCellSpacing(0);
grid.setWidget(0,0,codeLabel);
if (!readOnly) {
grid.setWidget(0,1,buildActivityMenu(this,codeLabel));
}
return grid;
case 2:
return new IndicatorListWidget(dispatcher,databaseId,userObject);
case 5:
final TextArea contentTextBox=new TextArea();
contentTextBox.setWidth(""String_Node_Str"");
contentTextBox.setHeight(""String_Node_Str"");
contentTextBox.setVisibleLines(2);
contentTextBox.addStyleName(""String_Node_Str"");
contentTextBox.setEnabled(!readOnly);
if (userObject != null) {
contentTextBox.setText(userObject.getTitle());
}
contentTextBox.addChangeHandler(new ChangeHandler(){
@Override public void onChange(ChangeEvent e){
userObject.setTitle(contentTextBox.getText());
fireLogFrameEdited();
}
}
);
return contentTextBox;
default :
return null;
}
}
@Override public int getId(LogFrameActivityDTO userObject){
return userObject.getClientSideId();
}
}
);
fireLogFrameEdited();
}","/** 
 * Adds an activity row.
 * @param activity The activity. Must not be <code>null</code>.
 */
private void addActivity(final LogFrameActivityDTO activity){
  if (activity == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  final LogFrameGroupDTO group=activity.getGroup();
  @SuppressWarnings(""String_Node_Str"") RowsGroup<LogFrameGroupDTO> g=(RowsGroup<LogFrameGroupDTO>)activitiesView.getGroup(group.getClientSideId());
  if (g == null) {
    g=addActivitiesGroup(group);
  }
  final StringBuilder sb=new StringBuilder();
  sb.append(I18N.CONSTANTS.logFrameActivitiesCode());
  sb.append(""String_Node_Str"");
  sb.append(activity.getFormattedCode());
  activity.setLabel(sb.toString());
  if (activity.getPosition() == null) {
    activity.setPosition(g.getRowsCount() + 1);
  }
  activitiesView.insertRow(activity.getPosition(),group.getClientSideId(),new Row<LogFrameActivityDTO>(activity){
    @Override public boolean isSimilar(    int column,    LogFrameActivityDTO userObject,    LogFrameActivityDTO other){
switch (column) {
case 0:
        return userObject.getParentExpectedResult() != null && other.getParentExpectedResult() != null && userObject.getParentExpectedResult().getCode() == other.getParentExpectedResult().getCode();
    }
    return false;
  }
  @Override public Widget getWidgetAt(  int column,  final LogFrameActivityDTO userObject){
switch (column) {
case 0:
      final Label parentCodeLabel=new Label();
    parentCodeLabel.addStyleName(CSS_CODE_LABEL_STYLE_NAME);
  final ExpectedResultDTO parent;
if (userObject != null && (parent=userObject.getParentExpectedResult()) != null) {
  final StringBuilder sb=new StringBuilder();
  sb.append(I18N.CONSTANTS.logFrameActivitiesCode());
  sb.append(""String_Node_Str"");
  sb.append(I18N.CONSTANTS.logFrameExceptedResultsCode());
  sb.append(""String_Node_Str"");
  sb.append(parent.getFormattedCode());
  sb.append(""String_Node_Str"");
  parentCodeLabel.setText(sb.toString());
}
return parentCodeLabel;
case 1:
final Label codeLabel=new Label();
codeLabel.addStyleName(CSS_CODE_LABEL_STYLE_NAME);
if (userObject != null) {
codeLabel.setText(userObject.getLabel());
}
final Grid grid=new Grid(1,2);
grid.setCellPadding(0);
grid.setCellSpacing(0);
grid.setWidget(0,0,codeLabel);
if (!readOnly) {
grid.setWidget(0,1,buildActivityMenu(this,codeLabel));
}
return grid;
case 2:
final TextArea contentTextBox=new TextArea();
contentTextBox.setWidth(""String_Node_Str"");
contentTextBox.setHeight(""String_Node_Str"");
contentTextBox.setVisibleLines(2);
contentTextBox.addStyleName(""String_Node_Str"");
contentTextBox.setEnabled(!readOnly);
if (userObject != null) {
contentTextBox.setText(userObject.getTitle());
}
contentTextBox.addChangeHandler(new ChangeHandler(){
@Override public void onChange(ChangeEvent e){
userObject.setTitle(contentTextBox.getText());
fireLogFrameEdited();
}
}
);
return contentTextBox;
case 3:
return new IndicatorListWidget(dispatcher,databaseId,userObject);
case 4:
return new Label();
case 5:
return new Label();
default :
return null;
}
}
@Override public int getId(LogFrameActivityDTO userObject){
return userObject.getClientSideId();
}
}
);
fireLogFrameEdited();
}",0.8067306180217015
35687,"/** 
 * Adds a specific objective row.
 * @param specificObjective The specific objective. Must not be <code>null</code>.
 */
private void addSpecificObjective(final SpecificObjectiveDTO specificObjective){
  if (specificObjective == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  final LogFrameGroupDTO logFrameGroup=specificObjective.getGroup();
  @SuppressWarnings(""String_Node_Str"") RowsGroup<LogFrameGroupDTO> g=(RowsGroup<LogFrameGroupDTO>)specificObjectivesView.getGroup(logFrameGroup.getClientSideId());
  if (g == null) {
    g=addSpecificObjectivesGroup(logFrameGroup);
  }
  final StringBuilder sb=new StringBuilder();
  sb.append(I18N.CONSTANTS.logFrameSpecificObjectivesCode());
  sb.append(""String_Node_Str"");
  sb.append(specificObjectivesPolicy.getCode(specificObjective.getCode(),specificObjective));
  specificObjective.setLabel(sb.toString());
  if (specificObjective.getPosition() == null) {
    specificObjective.setPosition(g.getRowsCount() + 1);
  }
  specificObjectivesView.insertRow(specificObjective.getPosition(),logFrameGroup.getClientSideId(),new Row<SpecificObjectiveDTO>(specificObjective){
    @Override public boolean isSimilar(    int column,    SpecificObjectiveDTO userObject,    SpecificObjectiveDTO other){
switch (column) {
case 1:
        return userObject.getCode() == other.getCode();
    }
    return false;
  }
  @Override public Widget getWidgetAt(  int column,  final SpecificObjectiveDTO userObject){
switch (column) {
case 0:
      return null;
case 1:
    final Label codeLabel=new Label();
  codeLabel.addStyleName(CSS_CODE_LABEL_STYLE_NAME);
if (userObject != null) {
  codeLabel.setText(userObject.getLabel());
}
final Grid grid=new Grid(1,2);
grid.setCellPadding(0);
grid.setCellSpacing(0);
grid.setWidget(0,0,codeLabel);
if (!readOnly) {
grid.setWidget(0,1,buildSpecificObjectiveMenu(this,codeLabel));
}
return grid;
case 2:
final TextArea interventionLogicTextBox=new TextArea();
interventionLogicTextBox.setWidth(""String_Node_Str"");
interventionLogicTextBox.setHeight(""String_Node_Str"");
interventionLogicTextBox.setVisibleLines(3);
interventionLogicTextBox.addStyleName(""String_Node_Str"");
interventionLogicTextBox.setEnabled(!readOnly);
if (userObject != null) {
interventionLogicTextBox.setText(userObject.getInterventionLogic());
}
interventionLogicTextBox.addChangeHandler(new ChangeHandler(){
@Override public void onChange(ChangeEvent e){
userObject.setInterventionLogic(interventionLogicTextBox.getText());
fireLogFrameEdited();
}
}
);
return interventionLogicTextBox;
case 3:
return new IndicatorListWidget(dispatcher,databaseId,specificObjective);
case 4:
final TextArea risksTextBox=new TextArea();
risksTextBox.setWidth(""String_Node_Str"");
risksTextBox.setHeight(""String_Node_Str"");
risksTextBox.setVisibleLines(3);
risksTextBox.addStyleName(""String_Node_Str"");
risksTextBox.setEnabled(!readOnly);
if (userObject != null) {
risksTextBox.setText(userObject.getRisks());
}
risksTextBox.addChangeHandler(new ChangeHandler(){
@Override public void onChange(ChangeEvent e){
userObject.setRisks(risksTextBox.getText());
fireLogFrameEdited();
}
}
);
return risksTextBox;
case 5:
final TextArea assumptionsTextBox=new TextArea();
assumptionsTextBox.setWidth(""String_Node_Str"");
assumptionsTextBox.setHeight(""String_Node_Str"");
assumptionsTextBox.setVisibleLines(3);
assumptionsTextBox.addStyleName(""String_Node_Str"");
assumptionsTextBox.setEnabled(!readOnly);
if (userObject != null) {
assumptionsTextBox.setText(userObject.getAssumptions());
}
assumptionsTextBox.addChangeHandler(new ChangeHandler(){
@Override public void onChange(ChangeEvent e){
userObject.setAssumptions(assumptionsTextBox.getText());
fireLogFrameEdited();
}
}
);
return assumptionsTextBox;
default :
return null;
}
}
@Override public int getId(SpecificObjectiveDTO userObject){
return userObject.getClientSideId();
}
}
);
fireLogFrameEdited();
for (final ExpectedResultDTO result : specificObjective.getExpectedResults()) {
addExpectedResult(result);
}
}","/** 
 * Adds a specific objective row.
 * @param specificObjective The specific objective. Must not be <code>null</code>.
 */
private void addSpecificObjective(final SpecificObjectiveDTO specificObjective){
  if (specificObjective == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  final LogFrameGroupDTO logFrameGroup=specificObjective.getGroup();
  @SuppressWarnings(""String_Node_Str"") RowsGroup<LogFrameGroupDTO> g=(RowsGroup<LogFrameGroupDTO>)specificObjectivesView.getGroup(logFrameGroup.getClientSideId());
  if (g == null) {
    g=addSpecificObjectivesGroup(logFrameGroup);
  }
  final StringBuilder sb=new StringBuilder();
  sb.append(I18N.CONSTANTS.logFrameSpecificObjectivesCode());
  sb.append(""String_Node_Str"");
  sb.append(specificObjective.getFormattedCode());
  specificObjective.setLabel(sb.toString());
  if (specificObjective.getPosition() == null) {
    specificObjective.setPosition(g.getRowsCount() + 1);
  }
  specificObjectivesView.insertRow(specificObjective.getPosition(),logFrameGroup.getClientSideId(),new Row<SpecificObjectiveDTO>(specificObjective){
    @Override public boolean isSimilar(    int column,    SpecificObjectiveDTO userObject,    SpecificObjectiveDTO other){
switch (column) {
case 1:
        return userObject.getCode() == other.getCode();
    }
    return false;
  }
  @Override public Widget getWidgetAt(  int column,  final SpecificObjectiveDTO userObject){
switch (column) {
case 0:
      return null;
case 1:
    final Label codeLabel=new Label();
  codeLabel.addStyleName(CSS_CODE_LABEL_STYLE_NAME);
if (userObject != null) {
  codeLabel.setText(userObject.getLabel());
}
final Grid grid=new Grid(1,2);
grid.setCellPadding(0);
grid.setCellSpacing(0);
grid.setWidget(0,0,codeLabel);
if (!readOnly) {
grid.setWidget(0,1,buildSpecificObjectiveMenu(this,codeLabel));
}
return grid;
case 2:
final TextArea interventionLogicTextBox=new TextArea();
interventionLogicTextBox.setWidth(""String_Node_Str"");
interventionLogicTextBox.setHeight(""String_Node_Str"");
interventionLogicTextBox.setVisibleLines(3);
interventionLogicTextBox.addStyleName(""String_Node_Str"");
interventionLogicTextBox.setEnabled(!readOnly);
if (userObject != null) {
interventionLogicTextBox.setText(userObject.getInterventionLogic());
}
interventionLogicTextBox.addChangeHandler(new ChangeHandler(){
@Override public void onChange(ChangeEvent e){
userObject.setInterventionLogic(interventionLogicTextBox.getText());
fireLogFrameEdited();
}
}
);
return interventionLogicTextBox;
case 3:
return new IndicatorListWidget(dispatcher,databaseId,specificObjective);
case 4:
final TextArea risksTextBox=new TextArea();
risksTextBox.setWidth(""String_Node_Str"");
risksTextBox.setHeight(""String_Node_Str"");
risksTextBox.setVisibleLines(3);
risksTextBox.addStyleName(""String_Node_Str"");
risksTextBox.setEnabled(!readOnly);
if (userObject != null) {
risksTextBox.setText(userObject.getRisks());
}
risksTextBox.addChangeHandler(new ChangeHandler(){
@Override public void onChange(ChangeEvent e){
userObject.setRisks(risksTextBox.getText());
fireLogFrameEdited();
}
}
);
return risksTextBox;
case 5:
final TextArea assumptionsTextBox=new TextArea();
assumptionsTextBox.setWidth(""String_Node_Str"");
assumptionsTextBox.setHeight(""String_Node_Str"");
assumptionsTextBox.setVisibleLines(3);
assumptionsTextBox.addStyleName(""String_Node_Str"");
assumptionsTextBox.setEnabled(!readOnly);
if (userObject != null) {
assumptionsTextBox.setText(userObject.getAssumptions());
}
assumptionsTextBox.addChangeHandler(new ChangeHandler(){
@Override public void onChange(ChangeEvent e){
userObject.setAssumptions(assumptionsTextBox.getText());
fireLogFrameEdited();
}
}
);
return assumptionsTextBox;
default :
return null;
}
}
@Override public int getId(SpecificObjectiveDTO userObject){
return userObject.getClientSideId();
}
}
);
fireLogFrameEdited();
for (final ExpectedResultDTO result : specificObjective.getExpectedResults()) {
addExpectedResult(result);
}
}",0.9913457920481624
35688,"@UiHandler(""String_Node_Str"") void onClick(ClickEvent e){
  final IndicatorDTO newIndicator=new IndicatorDTO();
  newIndicator.setCollectIntervention(true);
  newIndicator.setAggregation(IndicatorDTO.AGGREGATE_SUM);
  newIndicator.setDatabaseId(databaseId);
  newIndicator.setCategory(element.getGroup().getLabel());
  final IndicatorForm form=new IndicatorForm(dispatcher);
  form.getBinding().bind(newIndicator);
  form.setIdVisible(false);
  form.setCategoryVisible(false);
  final FormDialogImpl<IndicatorForm> dialog=new FormDialogImpl<IndicatorForm>(form);
  dialog.setHeading(I18N.CONSTANTS.newIndicatorGroup());
  dialog.setWidth(form.getPreferredDialogWidth());
  dialog.setHeight(form.getPreferredDialogHeight());
  dialog.setScrollMode(Scroll.AUTOY);
  dialog.show(new FormDialogCallback(){
    @Override public void onValidated(){
      dialog.hide();
      element.getIndicators().add(newIndicator);
      indicatorList.getStore().add(newIndicator);
    }
  }
);
}","@UiHandler(""String_Node_Str"") void onClick(ClickEvent e){
  final IndicatorDTO newIndicator=new IndicatorDTO();
  newIndicator.setCollectIntervention(true);
  newIndicator.setAggregation(IndicatorDTO.AGGREGATE_SUM);
  newIndicator.setDatabaseId(databaseId);
  newIndicator.setCategory((element.getFormattedCode() + ""String_Node_Str"" + element.getDescription()).trim());
  showDialog(newIndicator,new FormDialogCallback(){
    @Override public void onValidated(    FormDialogTether dlg){
      dlg.hide();
      element.getIndicators().add(newIndicator);
      indicatorList.getStore().add(newIndicator);
    }
  }
);
}",0.6219435736677116
35689,"@Override public void handleEvent(ListViewEvent<IndicatorDTO> be){
}","@Override public void handleEvent(ListViewEvent<IndicatorDTO> be){
  onIndicatorClicked(be.getModel());
}",0.7861271676300579
35690,"public IndicatorListWidget(Dispatcher dispatcher,int databaseId,LogFrameElementDTO element){
  this.dispatcher=dispatcher;
  this.databaseId=databaseId;
  this.element=element;
  initWidget(uiBinder.createAndBindUi(this));
  ListStore<IndicatorDTO> store=new ListStore<IndicatorDTO>();
  store.add(element.getIndicators());
  indicatorList.setTemplate(""String_Node_Str"" + style.indicator() + ""String_Node_Str""+ ""String_Node_Str""+ style.indicatorLabel()+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ style.sourceOfVerification()+ ""String_Node_Str""+ I18N.CONSTANTS.sourceOfVerification()+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  indicatorList.setStore(store);
  indicatorList.setBorders(false);
  indicatorList.setOverStyle(style.indicatorOver());
  indicatorList.setSelectStyle(style.indicatorSelected());
  indicatorList.setItemSelector(""String_Node_Str"" + style.indicator());
  indicatorList.addListener(Events.Select,new Listener<ListViewEvent<IndicatorDTO>>(){
    @Override public void handleEvent(    ListViewEvent<IndicatorDTO> be){
    }
  }
);
  new ListViewDragSource(indicatorList).setGroup(DRAG_AND_DROP_GROUP);
  new ListViewDropTarget(indicatorList).setGroup(DRAG_AND_DROP_GROUP);
}","public IndicatorListWidget(Dispatcher dispatcher,int databaseId,LogFrameElementDTO element){
  this.dispatcher=dispatcher;
  this.databaseId=databaseId;
  this.element=element;
  initWidget(uiBinder.createAndBindUi(this));
  ListStore<IndicatorDTO> store=new ListStore<IndicatorDTO>();
  store.add(element.getIndicators());
  indicatorList.setTemplate(""String_Node_Str"" + style.indicator() + ""String_Node_Str""+ ""String_Node_Str""+ style.indicatorLabel()+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ style.sourceOfVerification()+ ""String_Node_Str""+ I18N.CONSTANTS.sourceOfVerification()+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  indicatorList.setStore(store);
  indicatorList.setBorders(false);
  indicatorList.setOverStyle(style.indicatorOver());
  indicatorList.setSelectStyle(style.indicatorSelected());
  indicatorList.setItemSelector(""String_Node_Str"" + style.indicator());
  indicatorList.addListener(Events.Select,new Listener<ListViewEvent<IndicatorDTO>>(){
    @Override public void handleEvent(    ListViewEvent<IndicatorDTO> be){
      onIndicatorClicked(be.getModel());
    }
  }
);
  new ListViewDragSource(indicatorList).setGroup(DRAG_AND_DROP_GROUP);
  new ListViewDropTarget(indicatorList).setGroup(DRAG_AND_DROP_GROUP);
}",0.983567134268537
35691,"@Override public void onValidated(){
  dialog.hide();
  element.getIndicators().add(newIndicator);
  indicatorList.getStore().add(newIndicator);
}","@Override public void onValidated(FormDialogTether dlg){
  dlg.hide();
  indicatorList.refresh();
}",0.6040816326530613
35692,"public String getLabel(){
  return get(""String_Node_Str"");
}","@Override public String getLabel(){
  return get(""String_Node_Str"");
}",0.9230769230769232
35693,"public String getLabel(){
  return get(""String_Node_Str"");
}","@Override public String getLabel(){
  return get(""String_Node_Str"");
}",0.9230769230769232
35694,"/** 
 * Builds the all window.
 * @param info info.
 */
private static void build(){
  final Widget versionPanel=getVersionPanel();
  final Widget rolesPanel=getManagersPartnersPanel();
  final Widget devConPanel=getDevelopersContributorsPanel();
  final VerticalPanel vPanel=new VerticalPanel();
  vPanel.setSpacing(0);
  vPanel.add(rolesPanel);
  vPanel.setCellVerticalAlignment(rolesPanel,HasVerticalAlignment.ALIGN_TOP);
  vPanel.add(devConPanel);
  vPanel.setCellVerticalAlignment(devConPanel,HasVerticalAlignment.ALIGN_TOP);
  final HorizontalPanel hPanel=new HorizontalPanel();
  hPanel.setSpacing(0);
  hPanel.add(versionPanel);
  hPanel.setCellVerticalAlignment(versionPanel,HasVerticalAlignment.ALIGN_MIDDLE);
  hPanel.setCellHorizontalAlignment(versionPanel,HasHorizontalAlignment.ALIGN_CENTER);
  hPanel.setCellWidth(versionPanel,""String_Node_Str"");
  versionPanel.getElement().getStyle().setMarginRight(45,Unit.PX);
  hPanel.add(vPanel);
  hPanel.setCellVerticalAlignment(vPanel,HasVerticalAlignment.ALIGN_TOP);
  final VerticalPanel mainPanel=new VerticalPanel();
  mainPanel.setSpacing(10);
  mainPanel.add(hPanel);
  mainPanel.add(getCreditsPanel());
  window=new Window();
  window.setWidth(735);
  window.setHeight(535);
  window.setHeading(I18N.CONSTANTS.credits());
  window.setPlain(true);
  window.setModal(true);
  window.setBlinkModal(true);
  window.setLayout(new FitLayout());
  final ContentPanel p=new ContentPanel();
  p.setLayout(new FitLayout());
  p.setHeaderVisible(false);
  p.add(mainPanel);
  window.add(p);
}","/** 
 * Builds the all window.
 * @param info info.
 */
private static void build(){
  final Widget versionPanel=getVersionPanel();
  final Widget rolesPanel=getManagersPartnersPanel();
  final Widget devConPanel=getDevelopersContributorsPanel();
  final VerticalPanel vPanel=new VerticalPanel();
  vPanel.setSpacing(0);
  vPanel.add(rolesPanel);
  vPanel.setCellVerticalAlignment(rolesPanel,HasVerticalAlignment.ALIGN_TOP);
  vPanel.add(devConPanel);
  vPanel.setCellVerticalAlignment(devConPanel,HasVerticalAlignment.ALIGN_TOP);
  final HorizontalPanel hPanel=new HorizontalPanel();
  hPanel.setSpacing(0);
  hPanel.add(versionPanel);
  hPanel.setCellVerticalAlignment(versionPanel,HasVerticalAlignment.ALIGN_MIDDLE);
  hPanel.setCellHorizontalAlignment(versionPanel,HasHorizontalAlignment.ALIGN_CENTER);
  hPanel.setCellWidth(versionPanel,""String_Node_Str"");
  versionPanel.getElement().getStyle().setMarginRight(45,Unit.PX);
  hPanel.add(vPanel);
  hPanel.setCellVerticalAlignment(vPanel,HasVerticalAlignment.ALIGN_TOP);
  final VerticalPanel mainPanel=new VerticalPanel();
  mainPanel.setSpacing(10);
  mainPanel.add(hPanel);
  mainPanel.add(getCreditsPanel());
  window=new Window();
  window.setWidth(735);
  window.setHeight(570);
  window.setHeading(I18N.CONSTANTS.credits());
  window.setPlain(true);
  window.setModal(true);
  window.setBlinkModal(true);
  window.setLayout(new FitLayout());
  final ContentPanel p=new ContentPanel();
  p.setLayout(new FitLayout());
  p.setHeaderVisible(false);
  p.add(mainPanel);
  window.add(p);
}",0.998705501618123
35695,"@Inject public ProjectPresenter(final Dispatcher dispatcher,View view,Authentication authentication,final EventBus eventBus,final UserLocalCache cache,ProjectIndicatorsContainer projectIndicators,ProjectPivotContainer pivot){
  this.dispatcher=dispatcher;
  this.view=view;
  this.authentication=authentication;
  this.cache=cache;
  final DummyPresenter dummyPresenter=new DummyPresenter();
  this.presenters=new SubPresenter[]{new ProjectDashboardPresenter(dispatcher,eventBus,authentication,this,cache),new ProjectDetailsPresenter(eventBus,dispatcher,authentication,this,cache),new ProjectLogFramePresenter(dispatcher,authentication,this),projectIndicators,pivot,new ProjectCalendarPresenter(dispatcher,authentication,this),new ProjectReportsPresenter(authentication,dispatcher,eventBus,this),dummyPresenter};
  for (int i=0; i < MAIN_TABS.length; i++) {
    final int index=i;
    String tabTitle=MAIN_TABS[i];
    final HBoxLayoutData layoutData=new HBoxLayoutData();
    layoutData.setMargins(new Margins(0,10,0,0));
    final ToggleAnchor anchor=new ToggleAnchor(tabTitle);
    anchor.setAnchorMode(true);
    anchor.addClickHandler(new ClickHandler(){
      @Override public void onClick(      ClickEvent event){
        eventBus.fireEvent(new NavigationEvent(NavigationHandler.NavigationRequested,currentState.deriveTo(index)));
      }
    }
);
    this.view.getTabPanel().add(anchor,layoutData);
  }
}","@Inject public ProjectPresenter(final Dispatcher dispatcher,View view,Authentication authentication,final EventBus eventBus,final UserLocalCache cache,ProjectIndicatorsContainer projectIndicators,ProjectPivotContainer pivot){
  this.dispatcher=dispatcher;
  this.view=view;
  this.authentication=authentication;
  this.cache=cache;
  final DummyPresenter dummyPresenter=new DummyPresenter();
  this.presenters=new SubPresenter[]{new ProjectDashboardPresenter(dispatcher,eventBus,authentication,this,cache),new ProjectDetailsPresenter(eventBus,dispatcher,authentication,this,cache),new ProjectLogFramePresenter(dispatcher,authentication,this),projectIndicators,pivot,new ProjectCalendarPresenter(dispatcher,authentication,this),new ProjectReportsPresenter(authentication,dispatcher,eventBus,this)};
  for (int i=0; i < MAIN_TABS.length; i++) {
    final int index=i;
    String tabTitle=MAIN_TABS[i];
    final HBoxLayoutData layoutData=new HBoxLayoutData();
    layoutData.setMargins(new Margins(0,10,0,0));
    final ToggleAnchor anchor=new ToggleAnchor(tabTitle);
    anchor.setAnchorMode(true);
    anchor.addClickHandler(new ClickHandler(){
      @Override public void onClick(      ClickEvent event){
        eventBus.fireEvent(new NavigationEvent(NavigationHandler.NavigationRequested,currentState.deriveTo(index)));
      }
    }
);
    this.view.getTabPanel().add(anchor,layoutData);
  }
}",0.9946600213599146
35696,"/** 
 * Builds the actions toolbar.
 * @return The actions toolbar.
 */
private ToolBar buildToolbar(){
  saveButton=new Button(I18N.CONSTANTS.save(),IconImageBundle.ICONS.save());
  saveButton.setEnabled(false);
  copyButton=new Button(I18N.CONSTANTS.copy());
  copyButton.setEnabled(true);
  pasteButton=new Button(I18N.CONSTANTS.paste());
  pasteButton.setEnabled(false);
  excelButton=new Button(I18N.CONSTANTS.exportToExcel(),IconImageBundle.ICONS.excel());
  excelForm=new FormPanel();
  excelForm.setBodyBorder(false);
  excelForm.setHeaderVisible(false);
  excelForm.setPadding(0);
  excelForm.setEncoding(Encoding.URLENCODED);
  excelForm.setMethod(Method.POST);
  excelForm.setAction(GWT.getModuleBaseURL() + ""String_Node_Str"");
  final ToolBar toolBar=new ToolBar();
  toolBar.setAlignment(HorizontalAlignment.RIGHT);
  toolBar.setBorders(false);
  toolBar.add(saveButton);
  toolBar.add(copyButton);
  toolBar.add(pasteButton);
  toolBar.add(new SeparatorToolItem());
  toolBar.add(excelButton);
  toolBar.add(excelForm);
  return toolBar;
}","/** 
 * Builds the actions toolbar.
 * @return The actions toolbar.
 */
private ToolBar buildToolbar(){
  saveButton=new Button(I18N.CONSTANTS.save(),IconImageBundle.ICONS.save());
  saveButton.setEnabled(false);
  copyButton=new Button(I18N.CONSTANTS.copy());
  copyButton.setEnabled(true);
  pasteButton=new Button(I18N.CONSTANTS.paste());
  pasteButton.setEnabled(false);
  excelButton=new Button(I18N.CONSTANTS.exportToExcel(),IconImageBundle.ICONS.excel());
  excelButton.hide();
  excelForm=new FormPanel();
  excelForm.setBodyBorder(false);
  excelForm.setHeaderVisible(false);
  excelForm.setPadding(0);
  excelForm.setEncoding(Encoding.URLENCODED);
  excelForm.setMethod(Method.POST);
  excelForm.setAction(GWT.getModuleBaseURL() + ""String_Node_Str"");
  final ToolBar toolBar=new ToolBar();
  toolBar.setAlignment(HorizontalAlignment.RIGHT);
  toolBar.setBorders(false);
  toolBar.add(saveButton);
  toolBar.add(copyButton);
  toolBar.add(pasteButton);
  toolBar.add(new SeparatorToolItem());
  toolBar.add(excelButton);
  toolBar.add(excelForm);
  return toolBar;
}",0.9896616541353384
35697,"@SuppressWarnings(""String_Node_Str"") @Override public CommandResult execute(GetProfiles cmd,User user) throws CommandException {
  List<ProfileDTOLight> profiles=new ArrayList<ProfileDTOLight>();
  final Query query=em.createQuery(""String_Node_Str"");
  final List<Profile> resultProfiles=(List<Profile>)query.getResultList();
  if (resultProfiles != null) {
    for (    final Profile oneProfile : resultProfiles) {
      ProfileDTOLight profile=mapper.map(oneProfile,ProfileDTOLight.class);
      profiles.add(profile);
    }
  }
  return new ProfileListResult(profiles);
}","@SuppressWarnings(""String_Node_Str"") @Override public CommandResult execute(GetProfiles cmd,User user) throws CommandException {
  List<ProfileDTOLight> profiles=new ArrayList<ProfileDTOLight>();
  final Query query=em.createQuery(""String_Node_Str"");
  query.setParameter(""String_Node_Str"",user.getOrganization().getId());
  final List<Profile> resultProfiles=(List<Profile>)query.getResultList();
  if (resultProfiles != null) {
    for (    final Profile oneProfile : resultProfiles) {
      ProfileDTOLight profile=mapper.map(oneProfile,ProfileDTOLight.class);
      profiles.add(profile);
    }
  }
  return new ProfileListResult(profiles);
}",0.940983606557377
35698,"@Inject public DesignPanel(EventBus eventBus,Dispatcher dispatcher,Provider<IndicatorDialog> indicatorDialog){
  super(eventBus,dispatcher);
  treeStore=new TreeStore<ModelData>();
  this.indicatorDialog=indicatorDialog;
  DesignPanelResources.INSTANCE.css().ensureInjected();
  setLayout(new FitLayout());
  mappedIndicator=new MappedIndicatorSelection();
  treeGrid=new EditorTreeGrid<ModelData>(treeStore,createColumnModel());
  treeGrid.setSelectionModel(new ImprovedCellTreeGridSelectionModel<ModelData>());
  treeGrid.setClicksToEdit(EditorGrid.ClicksToEdit.TWO);
  treeGrid.setAutoExpandColumn(""String_Node_Str"");
  treeGrid.setHideHeaders(false);
  treeGrid.setLoadMask(true);
  treeGrid.getStyle().setNodeCloseIcon(null);
  treeGrid.getStyle().setNodeOpenIcon(null);
  treeGrid.getStyle().setLeafIcon(null);
  treeGrid.addListener(Events.CellClick,new Listener<GridEvent>(){
    public void handleEvent(    GridEvent ge){
switch (DesignTreeGridCellRenderer.computeTarget(ge)) {
case LABEL:
        showIndicatorForm((IndicatorDTO)ge.getModel());
      break;
case MAP_ICON:
    mapSelectionChanged((IndicatorDTO)ge.getModel());
  break;
case STAR_ICON:
starChanged((IndicatorDTO)ge.getModel());
break;
}
}
}
);
QuickTip fullNameTip=new QuickTip(treeGrid);
TreeGridDragSource source=new TreeGridDragSource(treeGrid);
source.addDNDListener(new DNDListener(){
@Override public void dragStart(DNDEvent e){
ModelData sel=((CellTreeGridSelectionModel)treeGrid.getSelectionModel()).getSelectCell().model;
if (db != null && (!db.isDesignAllowed() || sel == null || sel instanceof Folder)) {
e.setCancelled(true);
e.getStatus().setStatus(false);
return;
}
super.dragStart(e);
}
}
);
TreeGridDropTarget target=new TreeGridDropTarget(treeGrid);
target.setAllowSelfAsSource(true);
target.setFeedback(DND.Feedback.BOTH);
target.setAutoExpand(false);
target.addDNDListener(new DNDListener(){
@Override public void dragMove(DNDEvent e){
List<TreeModel> sourceData=e.getData();
ModelData source=sourceData.get(0).get(""String_Node_Str"");
TreeGrid.TreeNode target=treeGrid.findNode(e.getTarget());
ModelData targetParent=treeStore.getParent(target.getModel());
if (source instanceof IndicatorGroup && targetParent != null) {
e.setCancelled(true);
e.getStatus().setStatus(false);
}
 else if (source instanceof IndicatorDTO && targetParent instanceof IndicatorDTO) {
e.setCancelled(true);
e.getStatus().setStatus(false);
}
}
@Override public void dragDrop(DNDEvent e){
List<TreeModel> sourceData=e.getData();
ModelData source=sourceData.get(0).get(""String_Node_Str"");
onNodeDropped(source);
}
}
);
add(treeGrid);
toolBar.setListener(this);
toolBar.addButton(""String_Node_Str"",I18N.CONSTANTS.newIndicatorGroup(),null);
toolBar.addButton(""String_Node_Str"",I18N.CONSTANTS.newIndicator(),null);
toolBar.addRefreshButton();
eventBus.addListener(IndicatorEvent.CHANGED,new Listener<IndicatorEvent>(){
@Override public void handleEvent(IndicatorEvent be){
if (be.getSource() != DesignPanel.this) {
doLoad();
}
}
}
);
}","@Inject public DesignPanel(EventBus eventBus,Dispatcher dispatcher,Provider<IndicatorDialog> indicatorDialog){
  super(eventBus,dispatcher);
  treeStore=new TreeStore<ModelData>();
  this.indicatorDialog=indicatorDialog;
  DesignPanelResources.INSTANCE.css().ensureInjected();
  setLayout(new FitLayout());
  mappedIndicator=new MappedIndicatorSelection();
  treeGrid=new EditorTreeGrid<ModelData>(treeStore,createColumnModel());
  treeGrid.setSelectionModel(new ImprovedCellTreeGridSelectionModel<ModelData>());
  treeGrid.setClicksToEdit(EditorGrid.ClicksToEdit.TWO);
  treeGrid.setAutoExpandColumn(""String_Node_Str"");
  treeGrid.setHideHeaders(false);
  treeGrid.setLoadMask(true);
  treeGrid.getStyle().setNodeCloseIcon(null);
  treeGrid.getStyle().setNodeOpenIcon(null);
  treeGrid.getStyle().setLeafIcon(null);
  treeGrid.addListener(Events.CellClick,new Listener<GridEvent>(){
    public void handleEvent(    GridEvent ge){
switch (DesignTreeGridCellRenderer.computeTarget(ge)) {
case LABEL:
        showIndicatorForm((IndicatorDTO)ge.getModel());
      break;
case MAP_ICON:
    mapSelectionChanged((IndicatorDTO)ge.getModel());
  break;
case STAR_ICON:
starChanged((IndicatorDTO)ge.getModel());
break;
}
}
}
);
TreeGridDragSource source=new TreeGridDragSource(treeGrid);
source.addDNDListener(new DNDListener(){
@Override public void dragStart(DNDEvent e){
ModelData sel=((CellTreeGridSelectionModel)treeGrid.getSelectionModel()).getSelectCell().model;
if (db != null && (!db.isDesignAllowed() || sel == null || sel instanceof Folder)) {
e.setCancelled(true);
e.getStatus().setStatus(false);
return;
}
super.dragStart(e);
}
}
);
TreeGridDropTarget target=new TreeGridDropTarget(treeGrid);
target.setAllowSelfAsSource(true);
target.setFeedback(DND.Feedback.BOTH);
target.setAutoExpand(false);
target.addDNDListener(new DNDListener(){
@Override public void dragMove(DNDEvent e){
List<TreeModel> sourceData=e.getData();
ModelData source=sourceData.get(0).get(""String_Node_Str"");
TreeGrid.TreeNode target=treeGrid.findNode(e.getTarget());
ModelData targetParent=treeStore.getParent(target.getModel());
if (source instanceof IndicatorGroup && targetParent != null) {
e.setCancelled(true);
e.getStatus().setStatus(false);
}
 else if (source instanceof IndicatorDTO && targetParent instanceof IndicatorDTO) {
e.setCancelled(true);
e.getStatus().setStatus(false);
}
}
@Override public void dragDrop(DNDEvent e){
List<TreeModel> sourceData=e.getData();
ModelData source=sourceData.get(0).get(""String_Node_Str"");
onNodeDropped(source);
}
}
);
add(treeGrid);
toolBar.setListener(this);
toolBar.addButton(""String_Node_Str"",I18N.CONSTANTS.newIndicatorGroup(),null);
toolBar.addButton(""String_Node_Str"",I18N.CONSTANTS.newIndicator(),null);
toolBar.addRefreshButton();
eventBus.addListener(IndicatorEvent.CHANGED,new Listener<IndicatorEvent>(){
@Override public void handleEvent(IndicatorEvent be){
if (be.getSource() != DesignPanel.this) {
doLoad();
}
}
}
);
}",0.9924433249370276
35699,"@Override public <X>X get(String property){
  StringBuilder html=new StringBuilder();
  html.append(indicator == mappedSelection.getValue() ? MAP_ICON : EMPTY_MAP_ICON);
  html.append(""String_Node_Str"" + CSS.indicatorLabel() + ""String_Node_Str"");
  html.append(Format.htmlEncode(indicator.getName()).replace(""String_Node_Str"",""String_Node_Str""));
  html.append(""String_Node_Str"");
  html.append(indicator.getCode());
  html.append(""String_Node_Str"");
  return (X)html.toString();
}","@Override public <X>X get(String property){
  StringBuilder html=new StringBuilder();
  html.append(indicator == mappedSelection.getValue() ? MAP_ICON : EMPTY_MAP_ICON);
  html.append(Format.htmlEncode(indicator.getName()));
  html.append(""String_Node_Str"");
  return (X)html.toString();
}",0.6077922077922078
35700,"@Inject public IndicatorDialog(SiteGridPanel siteGridPanel){
  setWidth(475);
  setHeight(300);
  setHeading(""String_Node_Str"");
  setClosable(true);
  indicatorForm=new IndicatorForm();
  indicatorForm.setHeaderVisible(false);
  indicatorForm.setScrollMode(Scroll.AUTOY);
  indicatorForm.setStyleAttribute(""String_Node_Str"",""String_Node_Str"");
  TabItem defTab=new TabItem(""String_Node_Str"");
  defTab.setLayout(new FitLayout());
  defTab.add(indicatorForm);
  this.siteGridPanel=siteGridPanel;
  TabItem valuesTab=new TabItem(I18N.CONSTANTS.value());
  valuesTab.setLayout(new FitLayout());
  valuesTab.add(siteGridPanel);
  TabItem linkTab=new TabItem(""String_Node_Str"");
  TabPanel tabPanel=new TabPanel();
  tabPanel.add(defTab);
  tabPanel.add(valuesTab);
  tabPanel.add(linkTab);
  setLayout(new FitLayout());
  add(tabPanel);
}","@Inject public IndicatorDialog(SiteGridPanel siteGridPanel){
  setWidth(475);
  setHeight(300);
  setHeading(""String_Node_Str"");
  setClosable(true);
  indicatorForm=new IndicatorForm();
  indicatorForm.setHeaderVisible(false);
  indicatorForm.setScrollMode(Scroll.AUTOY);
  indicatorForm.setStyleAttribute(""String_Node_Str"",""String_Node_Str"");
  TabItem defTab=new TabItem(""String_Node_Str"");
  defTab.setLayout(new FitLayout());
  defTab.add(indicatorForm);
  this.siteGridPanel=siteGridPanel;
  TabItem valuesTab=new TabItem(I18N.CONSTANTS.value());
  valuesTab.setLayout(new FitLayout());
  valuesTab.add(siteGridPanel);
  TabPanel tabPanel=new TabPanel();
  tabPanel.add(defTab);
  tabPanel.add(valuesTab);
  setLayout(new FitLayout());
  add(tabPanel);
}",0.8426332288401254
35701,"protected ColumnModel createColumnModel(){
  List<ColumnConfig> columns=new ArrayList<ColumnConfig>();
  ColumnConfig nameColumn=new ColumnConfig(""String_Node_Str"",I18N.CONSTANTS.name(),150);
  nameColumn.setRenderer(new DesignTreeGridCellRenderer(mappedIndicator));
  columns.add(nameColumn);
  ColumnConfig objectiveColumn=new ColumnConfig(""String_Node_Str"",I18N.CONSTANTS.objecive(),75);
  objectiveColumn.setRenderer(new IndicatorValueRenderer());
  objectiveColumn.setEditor(new CellEditor(new NumberField()));
  columns.add(objectiveColumn);
  ColumnConfig valueColumn=new ColumnConfig(""String_Node_Str"",I18N.CONSTANTS.value(),75);
  valueColumn.setRenderer(new IndicatorValueRenderer());
  valueColumn.setEditor(new CellEditor(new NumberField()));
  columns.add(valueColumn);
  return new ColumnModel(columns);
}","protected ColumnModel createColumnModel(){
  List<ColumnConfig> columns=new ArrayList<ColumnConfig>();
  ColumnConfig nameColumn=new ColumnConfig(""String_Node_Str"",I18N.CONSTANTS.name(),150);
  nameColumn.setRenderer(new DesignTreeGridCellRenderer(mappedIndicator));
  columns.add(nameColumn);
  ColumnConfig objectiveColumn=new ColumnConfig(""String_Node_Str"",I18N.CONSTANTS.objecive(),75);
  objectiveColumn.setRenderer(new IndicatorValueRenderer());
  objectiveColumn.setEditor(new CellEditor(new NumberField()));
  objectiveColumn.setAlignment(HorizontalAlignment.RIGHT);
  columns.add(objectiveColumn);
  ColumnConfig valueColumn=new ColumnConfig(""String_Node_Str"",I18N.CONSTANTS.value(),75);
  valueColumn.setRenderer(new IndicatorValueRenderer());
  valueColumn.setAlignment(HorizontalAlignment.RIGHT);
  columns.add(valueColumn);
  return new ColumnModel(columns);
}",0.9208037825059102
35702,"public void bindIndicator(int databaseId,IndicatorDTO indicator,Store store){
  indicatorForm.getBinding().setStore(store);
  indicatorForm.getBinding().bind(indicator);
  Filter siteFilter=new Filter();
  siteFilter.addRestriction(DimensionType.Database,databaseId);
  siteGridPanel.load(siteFilter,Collections.singleton(indicator));
}","public void bindIndicator(int databaseId,IndicatorDTO indicator){
  indicatorForm.getBinding().bind(indicator);
  Filter siteFilter=new Filter();
  siteFilter.addRestriction(DimensionType.Database,databaseId);
  siteGridPanel.load(siteFilter,Collections.singleton(indicator));
}",0.9055374592833876
35703,"private void loadMap(){
  MapApiLoader.load(new MaskingAsyncMonitor(this,I18N.CONSTANTS.loadingComponent()),new AsyncCallback<Void>(){
    @Override public void onFailure(    Throwable throwable){
      removeAll();
      setLayout(new CenterLayout());
      add(new Html(I18N.CONSTANTS.connectionProblem()));
      layout();
    }
    @Override public void onSuccess(    Void result){
      removeAll();
      BoundingBoxDTO countryBounds=country.getBounds();
      LatLng boundsFromActivity=LatLng.newInstance(countryBounds.getCenterY(),countryBounds.getCenterX());
      map=new MapWidget(boundsFromActivity,8);
      MapType adminMap=MapTypeFactory.createLocalisationMapType(country);
      map.addMapType(adminMap);
      map.setCurrentMapType(adminMap);
      map.addControl(new SmallMapControl());
      setLayout(new FitLayout());
      add(map);
      map.addMapClickHandler(new MapClickHandler(){
        @Override public void onClick(        MapClickEvent event){
          if (event.getOverlay() != null) {
            int siteId=siteIdFromOverlay(event.getOverlay());
            highlightSite(siteId,false);
            eventBus.fireEvent(new SiteEvent(AppEvents.SiteSelected,SiteMap.this,siteId));
          }
        }
      }
);
      map.addMapRightClickHandler(new MapRightClickHandler(){
        public void onRightClick(        MapRightClickEvent event){
          if (event.getOverlay() != null) {
            showContextMenu(event);
          }
        }
      }
);
      Listener<BaseEvent> resizeListener=new Listener<BaseEvent>(){
        @Override public void handleEvent(        BaseEvent be){
          map.checkResizeAndCenter();
          if (pendingZoom != null) {
            zoomToBounds(pendingZoom);
          }
        }
      }
;
      addListener(Events.AfterLayout,resizeListener);
      addListener(Events.Resize,resizeListener);
      new MapDropTarget(SiteMap.this);
      layout();
      doLoadSites();
    }
  }
);
}","private void loadMap(){
  status.setBusy(I18N.CONSTANTS.loadingGoogleMaps());
  MapApiLoader.load(new MaskingAsyncMonitor(this,I18N.CONSTANTS.loadingComponent()),new AsyncCallback<Void>(){
    @Override public void onFailure(    Throwable throwable){
      removeAll();
      setLayout(new CenterLayout());
      add(new Html(I18N.CONSTANTS.connectionProblem()));
      layout();
    }
    @Override public void onSuccess(    Void result){
      removeAll();
      BoundingBoxDTO countryBounds=country.getBounds();
      LatLng boundsFromActivity=LatLng.newInstance(countryBounds.getCenterY(),countryBounds.getCenterX());
      map=new MapWidget(boundsFromActivity,8);
      MapType adminMap=MapTypeFactory.createLocalisationMapType(country);
      map.addMapType(adminMap);
      map.setCurrentMapType(adminMap);
      map.addControl(new SmallMapControl());
      setLayout(new FitLayout());
      add(map);
      map.addMapClickHandler(new MapClickHandler(){
        @Override public void onClick(        MapClickEvent event){
          if (event.getOverlay() != null) {
            int siteId=siteIdFromOverlay(event.getOverlay());
            highlightSite(siteId,false);
            eventBus.fireEvent(new SiteEvent(AppEvents.SiteSelected,SiteMap.this,siteId));
          }
        }
      }
);
      map.addMapRightClickHandler(new MapRightClickHandler(){
        public void onRightClick(        MapRightClickEvent event){
          if (event.getOverlay() != null) {
            showContextMenu(event);
          }
        }
      }
);
      Listener<BaseEvent> resizeListener=new Listener<BaseEvent>(){
        @Override public void handleEvent(        BaseEvent be){
          map.checkResizeAndCenter();
          if (pendingZoom != null) {
            zoomToBounds(pendingZoom);
          }
        }
      }
;
      addListener(Events.AfterLayout,resizeListener);
      addListener(Events.Resize,resizeListener);
      new MapDropTarget(SiteMap.this);
      layout();
      doLoadSites();
    }
  }
);
}",0.8742454728370221
35704,"@Override public void onFailure(Throwable throwable){
}","@Override public void onFailure(Throwable throwable){
  status.clearStatus(I18N.CONSTANTS.serverError());
}",0.6790123456790124
35705,"@Inject public SiteMap(EventBus eventBus,Dispatcher service){
  this.eventBus=eventBus;
  this.service=service;
  setHeaderVisible(false);
  infoTip=new Tip();
  infoTip.setClosable(true);
  infoHtml=new Html();
  infoTip.add(infoHtml);
}","@Inject public SiteMap(EventBus eventBus,Dispatcher service){
  this.eventBus=eventBus;
  this.service=service;
  setHeaderVisible(false);
  status=new Status();
  setBottomComponent(status);
}",0.7795823665893271
35706,"public void addSitesToMap(SitePointList points){
  if (markerMgr == null) {
    OverlayManagerOptions options=new OverlayManagerOptions();
    options.setMaxZoom(map.getCurrentMapType().getMaximumResolution());
    markerMgr=new MarkerManagerImpl(map,options);
  }
 else {
    for (    Marker marker : markerIds.keySet()) {
      markerMgr.removeMarker(marker);
    }
  }
  markerIds=new HashMap<Marker,Integer>();
  sites=new HashMap<Integer,Marker>();
  zoomToBounds(llBoundsForBounds(points.getBounds()));
  List<Marker> markers=new ArrayList<Marker>(points.getPoints().size());
  for (  SitePointDTO point : points.getPoints()) {
    Marker marker=new Marker(LatLng.newInstance(point.getY(),point.getX()));
    markerIds.put(marker,point.getSiteId());
    sites.put(point.getSiteId(),marker);
    markers.add(marker);
  }
  markerMgr.addOverlays(markers,0);
  markerMgr.refresh();
}","public void addSitesToMap(SitePointList points){
  if (markerMgr == null) {
    OverlayManagerOptions options=new OverlayManagerOptions();
    options.setMaxZoom(map.getCurrentMapType().getMaximumResolution());
    markerMgr=new MarkerManagerImpl(map,options);
  }
 else {
    for (    Marker marker : markerIds.keySet()) {
      markerMgr.removeMarker(marker);
    }
  }
  markerIds=new HashMap<Marker,Integer>();
  sites=new HashMap<Integer,Marker>();
  zoomToBounds(llBoundsForBounds(points.getBounds()));
  List<Marker> markers=new ArrayList<Marker>(points.getPoints().size());
  for (  SitePointDTO point : points.getPoints()) {
    Marker marker=new Marker(LatLng.newInstance(point.getY(),point.getX()));
    markerIds.put(marker,point.getSiteId());
    sites.put(point.getSiteId(),marker);
    markers.add(marker);
  }
  markerMgr.addOverlays(markers,0);
  DeferredCommand.addCommand(new Command(){
    @Override public void execute(){
      markerMgr.refresh();
    }
  }
);
}",0.9358288770053476
35707,"private void doLoadSites(){
  service.execute(new GetSitePoints(filter),null,new AsyncCallback<SitePointList>(){
    @Override public void onFailure(    Throwable throwable){
    }
    @Override public void onSuccess(    SitePointList points){
      if (points.getPoints().isEmpty()) {
        infoHtml.setHtml(""String_Node_Str"");
        infoTip.showAt(SiteMap.this.getPosition(false));
      }
 else {
        infoTip.hide();
      }
      addSitesToMap(points);
      siteListener=new Listener<SiteEvent>(){
        public void handleEvent(        SiteEvent be){
          if (be.getType() == AppEvents.SiteSelected) {
            onSiteSelected(be);
          }
 else           if (be.getType() == AppEvents.SiteCreated) {
            onSiteCreated(be.getSite());
          }
 else           if (be.getType() == AppEvents.SiteChanged) {
            onSiteChanged(be.getSite());
          }
        }
      }
;
      eventBus.addListener(AppEvents.SiteSelected,siteListener);
      eventBus.addListener(AppEvents.SiteCreated,siteListener);
      eventBus.addListener(AppEvents.SiteChanged,siteListener);
    }
  }
);
}","private void doLoadSites(){
  status.setBusy(I18N.CONSTANTS.loading());
  service.execute(new GetSitePoints(filter),null,new AsyncCallback<SitePointList>(){
    @Override public void onFailure(    Throwable throwable){
      status.clearStatus(I18N.CONSTANTS.serverError());
    }
    @Override public void onSuccess(    SitePointList points){
      if (points.getPoints().isEmpty()) {
        status.clearStatus(""String_Node_Str"");
      }
 else {
        status.clearStatus(points.getPoints().size() + ""String_Node_Str"");
      }
      addSitesToMap(points);
      siteListener=new Listener<SiteEvent>(){
        public void handleEvent(        SiteEvent be){
          if (be.getType() == AppEvents.SiteSelected) {
            onSiteSelected(be);
          }
 else           if (be.getType() == AppEvents.SiteCreated) {
            onSiteCreated(be.getSite());
          }
 else           if (be.getType() == AppEvents.SiteChanged) {
            onSiteChanged(be.getSite());
          }
        }
      }
;
      eventBus.addListener(AppEvents.SiteSelected,siteListener);
      eventBus.addListener(AppEvents.SiteCreated,siteListener);
      eventBus.addListener(AppEvents.SiteChanged,siteListener);
    }
  }
);
}",0.8759623609923011
35708,"@Override public void onSuccess(SitePointList points){
  if (points.getPoints().isEmpty()) {
    infoHtml.setHtml(""String_Node_Str"");
    infoTip.showAt(SiteMap.this.getPosition(false));
  }
 else {
    infoTip.hide();
  }
  addSitesToMap(points);
  siteListener=new Listener<SiteEvent>(){
    public void handleEvent(    SiteEvent be){
      if (be.getType() == AppEvents.SiteSelected) {
        onSiteSelected(be);
      }
 else       if (be.getType() == AppEvents.SiteCreated) {
        onSiteCreated(be.getSite());
      }
 else       if (be.getType() == AppEvents.SiteChanged) {
        onSiteChanged(be.getSite());
      }
    }
  }
;
  eventBus.addListener(AppEvents.SiteSelected,siteListener);
  eventBus.addListener(AppEvents.SiteCreated,siteListener);
  eventBus.addListener(AppEvents.SiteChanged,siteListener);
}","@Override public void onSuccess(SitePointList points){
  if (points.getPoints().isEmpty()) {
    status.clearStatus(""String_Node_Str"");
  }
 else {
    status.clearStatus(points.getPoints().size() + ""String_Node_Str"");
  }
  addSitesToMap(points);
  siteListener=new Listener<SiteEvent>(){
    public void handleEvent(    SiteEvent be){
      if (be.getType() == AppEvents.SiteSelected) {
        onSiteSelected(be);
      }
 else       if (be.getType() == AppEvents.SiteCreated) {
        onSiteCreated(be.getSite());
      }
 else       if (be.getType() == AppEvents.SiteChanged) {
        onSiteChanged(be.getSite());
      }
    }
  }
;
  eventBus.addListener(AppEvents.SiteSelected,siteListener);
  eventBus.addListener(AppEvents.SiteCreated,siteListener);
  eventBus.addListener(AppEvents.SiteChanged,siteListener);
}",0.8918590522478737
35709,"public AdminFieldSet(List<AdminLevelDTO> adminLevels){
  super(I18N.CONSTANTS.location(),100,200);
  for (  final AdminLevelDTO level : adminLevels) {
    final int levelId=level.getId();
    final ComboBox<AdminEntityDTO> comboBox=new RemoteComboBox<AdminEntityDTO>();
    comboBox.setFieldLabel(level.getName());
    comboBox.setStore(new ListStore<AdminEntityDTO>());
    comboBox.setTypeAhead(false);
    comboBox.setForceSelection(true);
    comboBox.setEditable(false);
    comboBox.setValueField(""String_Node_Str"");
    comboBox.setDisplayField(""String_Node_Str"");
    comboBox.setEnabled(false);
    comboBox.setTriggerAction(ComboBox.TriggerAction.ALL);
    comboBox.addListener(Events.Select,new Listener<FieldEvent>(){
      @Override public void handleEvent(      FieldEvent be){
        AdminEntityDTO selected=(AdminEntityDTO)be.getField().getValue();
        presenter.onSelectionChanged(levelId,selected);
      }
    }
);
    comboBox.addListener(Events.BrowserEvent,new Listener<FieldEvent>(){
      public void handleEvent(      FieldEvent be){
        if (be.getEventTypeInt() == Event.ONKEYUP) {
          if (be.getEvent().getKeyCode() == KeyCodes.KEY_ESCAPE) {
            comboBox.setValue(null);
            presenter.onSelectionChanged(levelId,null);
          }
        }
      }
    }
);
    comboBoxes.put(levelId,comboBox);
    add(comboBox);
  }
}","public AdminFieldSet(List<AdminLevelDTO> adminLevels){
  super(I18N.CONSTANTS.location(),100,200);
  for (  final AdminLevelDTO level : adminLevels) {
    final int levelId=level.getId();
    final ComboBox<AdminEntityDTO> comboBox=new RemoteComboBox<AdminEntityDTO>();
    comboBox.setName(AdminEntityDTO.getPropertyName(levelId));
    comboBox.setFieldLabel(level.getName());
    comboBox.setStore(new ListStore<AdminEntityDTO>());
    comboBox.setTypeAhead(false);
    comboBox.setForceSelection(true);
    comboBox.setEditable(false);
    comboBox.setValueField(""String_Node_Str"");
    comboBox.setDisplayField(""String_Node_Str"");
    comboBox.setEnabled(false);
    comboBox.setTriggerAction(ComboBox.TriggerAction.ALL);
    comboBox.addListener(Events.Select,new Listener<FieldEvent>(){
      @Override public void handleEvent(      FieldEvent be){
        AdminEntityDTO selected=(AdminEntityDTO)be.getField().getValue();
        presenter.onSelectionChanged(levelId,selected);
      }
    }
);
    comboBox.addListener(Events.BrowserEvent,new Listener<FieldEvent>(){
      public void handleEvent(      FieldEvent be){
        if (be.getEventTypeInt() == Event.ONKEYUP) {
          if (be.getEvent().getKeyCode() == KeyCodes.KEY_ESCAPE) {
            comboBox.setValue(null);
            presenter.onSelectionChanged(levelId,null);
          }
        }
      }
    }
);
    comboBoxes.put(levelId,comboBox);
    add(comboBox);
  }
}",0.9776516495211068
35710,"@Override public void loadProject(ProjectDTO projectDTO){
  this.project=project;
  designPanel.load(projectDTO.getId());
  Filter siteFilter=new Filter();
  siteFilter.addRestriction(DimensionType.Database,projectDTO.getId());
  siteEditor.load(siteFilter);
}","@Override public void loadProject(ProjectDTO project){
  this.project=project;
  designPanel.load(project.getId());
  Filter siteFilter=new Filter();
  siteFilter.addRestriction(DimensionType.Database,project.getId());
  siteEditor.load(siteFilter);
}",0.9823874755381604
35711,"private void enableButtons(){
  if (value == null || layouts.isEmpty()) {
    nextButton.disable();
    prevButton.disable();
  }
 else {
    int curIndex=getValueIndex();
    nextButton.setEnabled(curIndex > 0);
    prevButton.setEnabled(curIndex + 1 != layouts.size());
  }
}","private void enableButtons(){
  if (value == null || layouts.isEmpty()) {
    nextButton.disable();
    prevButton.disable();
  }
 else {
    int curIndex=getValueIndex();
    prevButton.setEnabled(curIndex > 0);
    nextButton.setEnabled(curIndex + 1 != layouts.size());
  }
}",0.9711191335740073
35712,"public LayoutComposer(int databaseId,DateRange projectDateRange){
  this.databaseId=databaseId;
  this.projectDateRange=projectDateRange;
}","public LayoutComposer(DateUtil dateUtil,int databaseId,Date startDate,Date endDate){
  this.databaseId=databaseId;
  this.dateUtil=dateUtil;
  this.projectDateRange=computeProjectDateRange(startDate,endDate);
}",0.670487106017192
35713,"public String getRequestURI(){
  StringBuffer sb=new StringBuffer();
  if (contextPath != null) {
    sb.append(contextPath);
  }
  if (servletPath != null) {
    sb.append(servletPath);
  }
  if (pathInfo != null) {
    sb.append(pathInfo);
  }
  if (sb.length() > 0) {
    return (sb.toString());
  }
  throw new UnsupportedOperationException();
}","public String getRequestURI(){
  StringBuffer sb=new StringBuffer();
  if (contextPath != null) {
    sb.append(contextPath);
  }
  if (servletPath != null) {
    sb.append(servletPath);
  }
  if (pathInfo != null) {
    sb.append(pathInfo);
  }
  return (sb.toString());
}",0.797427652733119
35714,"/** 
 * @return the link's key, to be used for state management
 */
public String getKey(){
  return get(""String_Node_Str"");
}","/** 
 * @return this Link's key, for use in state management
 */
public String getKey(){
  return key;
}",0.8260869565217391
35715,"/** 
 * @param name name of the link to appear in the tree
 * @param pageState the pageState to which to navigate on click
 * @param icon the icon to apper in the tree
 */
public Link(String name,PageState pageState,AbstractImagePrototype icon){
  this(name,pageState);
  this.icon=icon;
}","private Link(){
}",0.1045751633986928
35716,"public PageState getPageState(){
  return pageState;
}","/** 
 * @return the PageState to which to link
 */
public PageState getPageState(){
  return pageState;
}",0.6792452830188679
35717,"public AbstractImagePrototype getIcon(){
  return icon;
}","/** 
 * @return  this Link's icon
 */
public AbstractImagePrototype getIcon(){
  return icon;
}",0.75
35718,"@Override public String getKey(Link link){
  if (link.getParent() == null) {
    return link.getName();
  }
 else {
    return ((Link)link.getParent()).getName() + ""String_Node_Str"" + link.getName();
  }
}","@Override public String getKey(Link link){
  return link.getKey();
}",0.4835164835164835
35719,"public NavigationPanel(final EventBus eventBus,final Navigator navigator){
  this.eventBus=eventBus;
  this.setHeading(navigator.getHeading());
  this.setScrollMode(Scroll.NONE);
  this.setLayout(new FitLayout());
  loader=new BaseTreeLoader<Link>(navigator){
    @Override public boolean hasChildren(    Link parent){
      return navigator.hasChildren(parent);
    }
  }
;
  store=new TreeStore<Link>(loader);
  store.setKeyProvider(new ModelKeyProvider<Link>(){
    @Override public String getKey(    Link link){
      if (link.getParent() == null) {
        return link.getName();
      }
 else {
        return ((Link)link.getParent()).getName() + ""String_Node_Str"" + link.getName();
      }
    }
  }
);
  tree=new TreePanel<Link>(store);
  tree.setStateful(true);
  tree.setStateId(navigator.getStateId());
  tree.setDisplayProperty(""String_Node_Str"");
  tree.setAutoLoad(true);
  tree.setIconProvider(new ModelIconProvider<Link>(){
    @Override public AbstractImagePrototype getIcon(    Link model){
      return model.getIcon();
    }
  }
);
  tree.addListener(Events.OnClick,new Listener<TreePanelEvent<Link>>(){
    @Override public void handleEvent(    TreePanelEvent<Link> tpe){
      if (tpe.getItem().getPageState() != null) {
        eventBus.fireEvent(new NavigationEvent(NavigationHandler.NavigationRequested,tpe.getItem().getPageState()));
      }
    }
  }
);
  navListener=new Listener<NavigationEvent>(){
    public void handleEvent(    NavigationEvent be){
      onNavigated(be.getPlace());
    }
  }
;
  eventBus.addListener(NavigationHandler.NavigationAgreed,navListener);
  changeListener=new Listener<BaseEvent>(){
    public void handleEvent(    BaseEvent be){
      loader.load();
    }
  }
;
  eventBus.addListener(AppEvents.SchemaChanged,changeListener);
  this.add(tree);
}","public NavigationPanel(final EventBus eventBus,final Navigator navigator){
  this.eventBus=eventBus;
  this.setHeading(navigator.getHeading());
  this.setScrollMode(Scroll.NONE);
  this.setLayout(new FitLayout());
  loader=new BaseTreeLoader<Link>(navigator){
    @Override public boolean hasChildren(    Link parent){
      return navigator.hasChildren(parent);
    }
  }
;
  store=new TreeStore<Link>(loader);
  store.setKeyProvider(new ModelKeyProvider<Link>(){
    @Override public String getKey(    Link link){
      return link.getKey();
    }
  }
);
  tree=new TreePanel<Link>(store);
  tree.setStateful(true);
  tree.setStateId(navigator.getStateId());
  tree.setDisplayProperty(""String_Node_Str"");
  tree.setAutoLoad(true);
  tree.setIconProvider(new ModelIconProvider<Link>(){
    @Override public AbstractImagePrototype getIcon(    Link model){
      return model.getIcon();
    }
  }
);
  tree.addListener(Events.OnClick,new Listener<TreePanelEvent<Link>>(){
    @Override public void handleEvent(    TreePanelEvent<Link> tpe){
      if (tpe.getItem().getPageState() != null) {
        eventBus.fireEvent(new NavigationEvent(NavigationHandler.NavigationRequested,tpe.getItem().getPageState()));
      }
    }
  }
);
  navListener=new Listener<NavigationEvent>(){
    public void handleEvent(    NavigationEvent be){
      onNavigated(be.getPlace());
    }
  }
;
  eventBus.addListener(NavigationHandler.NavigationAgreed,navListener);
  changeListener=new Listener<BaseEvent>(){
    public void handleEvent(    BaseEvent be){
      loader.load();
    }
  }
;
  eventBus.addListener(AppEvents.SchemaChanged,changeListener);
  this.add(tree);
}",0.9482509395779128
35720,"public void load(DataReader<List<Link>> dataReader,Object parent,AsyncCallback<List<Link>> callback){
  if (parent == null) {
    List<Link> list=new ArrayList<Link>();
    Link accountLink=new Link(messages.mySettings(),new AccountPageState(),icons.setup());
    list.add(accountLink);
    final Link dbListLink=new Link(messages.databases(),new DbListPageState(),icons.database());
    list.add(dbListLink);
    callback.onSuccess(list);
  }
 else {
    Link link=(Link)parent;
    if (link.getPageState() instanceof DbListPageState) {
      loadDbList(callback);
    }
 else     if (link.getPageState().getPageId().equals(DbConfigPresenter.DatabaseConfig)) {
    }
  }
}","public void load(DataReader<List<Link>> dataReader,Object parent,AsyncCallback<List<Link>> callback){
  if (parent == null) {
    Link accountLink=Link.to(new AccountPageState()).labeled(messages.mySettings()).withIcon(icons.setup()).build();
    Link dbListLink=Link.to(new DbListPageState()).labeled(messages.databases()).withIcon(icons.database()).build();
    callback.onSuccess(Arrays.asList(accountLink,dbListLink));
  }
 else {
    Link link=(Link)parent;
    if (link.getPageState() instanceof DbListPageState) {
      loadDbList(callback);
    }
  }
}",0.3033252230332522
35721,"public void loadDbList(final AsyncCallback<List<Link>> callback){
  service.execute(new GetSchema(),null,new Got<SchemaDTO>(){
    @Override public void got(    SchemaDTO result){
      List<Link> list=new ArrayList<Link>();
      for (      UserDatabaseDTO db : result.getDatabases()) {
        if (db.isDesignAllowed() || db.isManageUsersAllowed()) {
          Link link=new Link(db.getName(),new DbPageState(DbConfigPresenter.DatabaseConfig,db.getId()),icons.database());
          link.set(""String_Node_Str"",db);
          list.add(link);
        }
      }
      callback.onSuccess(list);
    }
    @Override public void onFailure(    Throwable caught){
      callback.onFailure(caught);
    }
  }
);
}","public void loadDbList(final AsyncCallback<List<Link>> callback){
  service.execute(new GetSchema(),null,new Got<SchemaDTO>(){
    @Override public void got(    SchemaDTO result){
      List<Link> list=new ArrayList<Link>();
      for (      UserDatabaseDTO db : result.getDatabases()) {
        if (db.isDesignAllowed() || db.isManageUsersAllowed()) {
          Link link=Link.to(new DbPageState(DbConfigPresenter.DatabaseConfig,db.getId())).labeled(db.getName()).withIcon(icons.database()).build();
          link.set(""String_Node_Str"",db);
          list.add(link);
        }
      }
      callback.onSuccess(list);
    }
    @Override public void onFailure(    Throwable caught){
      callback.onFailure(caught);
    }
  }
);
}",0.8706536856745479
35722,"@Override public void got(SchemaDTO result){
  List<Link> list=new ArrayList<Link>();
  for (  UserDatabaseDTO db : result.getDatabases()) {
    if (db.isDesignAllowed() || db.isManageUsersAllowed()) {
      Link link=new Link(db.getName(),new DbPageState(DbConfigPresenter.DatabaseConfig,db.getId()),icons.database());
      link.set(""String_Node_Str"",db);
      list.add(link);
    }
  }
  callback.onSuccess(list);
}","@Override public void got(SchemaDTO result){
  List<Link> list=new ArrayList<Link>();
  for (  UserDatabaseDTO db : result.getDatabases()) {
    if (db.isDesignAllowed() || db.isManageUsersAllowed()) {
      Link link=Link.to(new DbPageState(DbConfigPresenter.DatabaseConfig,db.getId())).labeled(db.getName()).withIcon(icons.database()).build();
      link.set(""String_Node_Str"",db);
      list.add(link);
    }
  }
  callback.onSuccess(list);
}",0.7847222222222222
35723,"private List<Link> buildTree(SchemaDTO schema){
  List<Link> list=new ArrayList<Link>();
  for (  UserDatabaseDTO db : schema.getDatabases()) {
    if (db.getActivities().size() != 0) {
      Link dbLink=new Link(db.getName(),null,IconImageBundle.ICONS.database());
      Map<String,Link> categories=new HashMap<String,Link>();
      for (      ActivityDTO activity : db.getActivities()) {
        Link actLink=new Link(activity.getName(),new SiteGridPageState(activity),IconImageBundle.ICONS.table());
        if (activity.getCategory() != null) {
          Link category=categories.get(activity.getCategory());
          if (category == null) {
            category=new Link(activity.getCategory(),null);
            categories.put(activity.getCategory(),category);
            dbLink.add(category);
          }
          category.add(actLink);
        }
 else {
          dbLink.add(actLink);
        }
      }
      list.add(dbLink);
    }
  }
  return list;
}","private List<Link> buildTree(SchemaDTO schema){
  List<Link> list=new ArrayList<Link>();
  for (  UserDatabaseDTO db : schema.getDatabases()) {
    if (db.getActivities().size() != 0) {
      Link dbLink=Link.folderLabelled(db.getName()).usingKey(databaseKey(db)).withIcon(IconImageBundle.ICONS.database()).build();
      Map<String,Link> categories=new HashMap<String,Link>();
      for (      ActivityDTO activity : db.getActivities()) {
        Link actLink=Link.to(new SiteGridPageState(activity)).labeled(activity.getName()).withIcon(IconImageBundle.ICONS.table()).build();
        if (activity.getCategory() != null) {
          Link category=categories.get(activity.getCategory());
          if (category == null) {
            category=Link.folderLabelled(activity.getCategory()).usingKey(categoryKey(activity,categories)).build();
            categories.put(activity.getCategory(),category);
            dbLink.add(category);
          }
          category.add(actLink);
        }
 else {
          dbLink.add(actLink);
        }
      }
      list.add(dbLink);
    }
  }
  return list;
}",0.863658418243571
35724,"protected void buildAndExecuteRestOfQuery(int userId,Filter filter,Set<Dimension> dimensions,final List<Bucket> buckets,StringBuilder from,StringBuilder columns,StringBuilder where,StringBuilder groupBy,int nextColumnIndex,Bundler valueBundler){
  final List<Bundler> bundlers=new ArrayList<Bundler>();
  bundlers.add(valueBundler);
  StringBuilder dimColumns=new StringBuilder();
  for (  Dimension dimension : dimensions) {
    if (dimension.getType() == DimensionType.Activity) {
      dimColumns.append(""String_Node_Str"");
      bundlers.add(new OrderedEntityBundler(dimension,nextColumnIndex));
      nextColumnIndex+=3;
    }
 else     if (dimension.getType() == DimensionType.ActivityCategory) {
      dimColumns.append(""String_Node_Str"");
      bundlers.add(new SimpleBundler(dimension,nextColumnIndex));
      nextColumnIndex+=1;
    }
 else     if (dimension.getType() == DimensionType.Database) {
      dimColumns.append(""String_Node_Str"");
      bundlers.add(new EntityBundler(dimension,nextColumnIndex));
      nextColumnIndex+=2;
    }
 else     if (dimension.getType() == DimensionType.Partner) {
      dimColumns.append(""String_Node_Str"");
      bundlers.add(new EntityBundler(dimension,nextColumnIndex));
      nextColumnIndex+=2;
    }
 else     if (dimension.getType() == DimensionType.Indicator) {
      dimColumns.append(""String_Node_Str"");
      bundlers.add(new OrderedEntityBundler(dimension,nextColumnIndex));
      nextColumnIndex+=3;
    }
 else     if (dimension.getType() == DimensionType.IndicatorCategory) {
      dimColumns.append(""String_Node_Str"");
      bundlers.add(new SimpleBundler(dimension,nextColumnIndex));
      nextColumnIndex+=1;
    }
 else     if (dimension instanceof DateDimension) {
      DateDimension dateDim=(DateDimension)dimension;
      if (dateDim.getUnit() == DateUnit.YEAR) {
        dimColumns.append(""String_Node_Str"");
        bundlers.add(new YearBundler(dimension,nextColumnIndex));
        nextColumnIndex+=1;
      }
 else       if (dateDim.getUnit() == DateUnit.MONTH) {
        dimColumns.append(""String_Node_Str"");
        bundlers.add(new MonthBundler(dimension,nextColumnIndex));
        nextColumnIndex+=2;
      }
 else       if (dateDim.getUnit() == DateUnit.QUARTER) {
        dimColumns.append(""String_Node_Str"").append(dialect.formatQuarterFunction(""String_Node_Str""));
        bundlers.add(new QuarterBundler(nextColumnIndex,dimension));
        nextColumnIndex+=2;
      }
    }
 else     if (dimension instanceof AdminDimension) {
      AdminDimension adminDim=(AdminDimension)dimension;
      String tableAlias=""String_Node_Str"" + adminDim.getLevelId();
      from.append(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"").append(adminDim.getLevelId()).append(""String_Node_Str"").append(tableAlias).append(""String_Node_Str"").append(tableAlias).append(""String_Node_Str"");
      dimColumns.append(""String_Node_Str"").append(tableAlias).append(""String_Node_Str"").append(""String_Node_Str"").append(tableAlias).append(""String_Node_Str"");
      bundlers.add(new EntityBundler(adminDim,nextColumnIndex));
      nextColumnIndex+=2;
    }
 else     if (dimension instanceof AttributeGroupDimension) {
      AttributeGroupDimension attrGroupDim=(AttributeGroupDimension)dimension;
      List<Integer> attributeIds=attrGroupDim.getAttributeIds();
      int count=0;
      for (      Integer attributeId : attributeIds) {
        String tableAlias=""String_Node_Str"" + attributeId;
        from.append(""String_Node_Str"" + ""String_Node_Str"" + tableAlias + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"").append(attributeId).append(""String_Node_Str"").append(tableAlias).append(""String_Node_Str"").append(tableAlias).append(""String_Node_Str"");
        dimColumns.append(""String_Node_Str"").append(tableAlias).append(""String_Node_Str"" + tableAlias + ""String_Node_Str"");
        count++;
      }
      Log.debug(""String_Node_Str"" + count);
      bundlers.add(new AttributeBundler(dimension,nextColumnIndex,count));
      nextColumnIndex+=count;
    }
  }
  columns.append(dimColumns);
  groupBy.append(dimColumns);
  where.append(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
  appendVisibilityFilter(where,userId);
  final List<Object> parameters=new ArrayList<Object>();
  if (filter.getMinDate() != null) {
    where.append(""String_Node_Str"");
    parameters.add(new java.sql.Date(filter.getMinDate().getTime()));
  }
  if (filter.getMaxDate() != null) {
    where.append(""String_Node_Str"");
    parameters.add(new java.sql.Date(filter.getMaxDate().getTime()));
  }
  for (  DimensionType type : filter.getRestrictedDimensions()) {
    if (type == DimensionType.Indicator) {
      appendIdCriteria(where,""String_Node_Str"",filter.getRestrictions(type),parameters);
    }
 else     if (type == DimensionType.Activity) {
      appendIdCriteria(where,""String_Node_Str"",filter.getRestrictions(type),parameters);
    }
 else     if (type == DimensionType.Database) {
      appendIdCriteria(where,""String_Node_Str"",filter.getRestrictions(type),parameters);
    }
 else     if (type == DimensionType.Partner) {
      appendIdCriteria(where,""String_Node_Str"",filter.getRestrictions(type),parameters);
    }
 else     if (type == DimensionType.AdminLevel) {
      where.append(""String_Node_Str"" + ""String_Node_Str"");
      appendIdCriteria(where,""String_Node_Str"",filter.getRestrictions(type),parameters);
      where.append(""String_Node_Str"");
    }
  }
  final StringBuilder sql=new StringBuilder();
  sql.append(""String_Node_Str"").append(columns).append(""String_Node_Str"").append(from).append(""String_Node_Str"").append(where).append(""String_Node_Str"").append(groupBy);
  Session session=((HibernateEntityManager)em).getSession();
  System.out.println(sql.toString());
  session.doWork(new Work(){
    public void execute(    Connection connection) throws SQLException {
      PreparedStatement stmt=connection.prepareStatement(sql.toString());
      for (int i=0; i != parameters.size(); ++i) {
        stmt.setObject(i + 1,parameters.get(i));
      }
      ResultSet rs=stmt.executeQuery();
      while (rs.next()) {
        Bucket bucket=new Bucket();
        for (        Bundler bundler : bundlers) {
          bundler.bundle(rs,bucket);
        }
        buckets.add(bucket);
      }
    }
  }
);
}","protected void buildAndExecuteRestOfQuery(int userId,Filter filter,Set<Dimension> dimensions,final List<Bucket> buckets,StringBuilder from,StringBuilder columns,StringBuilder where,StringBuilder groupBy,int nextColumnIndex,Bundler valueBundler){
  final List<Bundler> bundlers=new ArrayList<Bundler>();
  bundlers.add(valueBundler);
  StringBuilder dimColumns=new StringBuilder();
  for (  Dimension dimension : dimensions) {
    if (dimension.getType() == DimensionType.Activity) {
      dimColumns.append(""String_Node_Str"");
      bundlers.add(new OrderedEntityBundler(dimension,nextColumnIndex));
      nextColumnIndex+=3;
    }
 else     if (dimension.getType() == DimensionType.ActivityCategory) {
      dimColumns.append(""String_Node_Str"");
      bundlers.add(new SimpleBundler(dimension,nextColumnIndex));
      nextColumnIndex+=1;
    }
 else     if (dimension.getType() == DimensionType.Database) {
      dimColumns.append(""String_Node_Str"");
      bundlers.add(new EntityBundler(dimension,nextColumnIndex));
      nextColumnIndex+=2;
    }
 else     if (dimension.getType() == DimensionType.Partner) {
      dimColumns.append(""String_Node_Str"");
      bundlers.add(new EntityBundler(dimension,nextColumnIndex));
      nextColumnIndex+=2;
    }
 else     if (dimension.getType() == DimensionType.Indicator) {
      dimColumns.append(""String_Node_Str"");
      bundlers.add(new OrderedEntityBundler(dimension,nextColumnIndex));
      nextColumnIndex+=3;
    }
 else     if (dimension.getType() == DimensionType.IndicatorCategory) {
      dimColumns.append(""String_Node_Str"");
      bundlers.add(new SimpleBundler(dimension,nextColumnIndex));
      nextColumnIndex+=1;
    }
 else     if (dimension instanceof DateDimension) {
      DateDimension dateDim=(DateDimension)dimension;
      if (dateDim.getUnit() == DateUnit.YEAR) {
        dimColumns.append(""String_Node_Str"");
        bundlers.add(new YearBundler(dimension,nextColumnIndex));
        nextColumnIndex+=1;
      }
 else       if (dateDim.getUnit() == DateUnit.MONTH) {
        dimColumns.append(""String_Node_Str"");
        bundlers.add(new MonthBundler(dimension,nextColumnIndex));
        nextColumnIndex+=2;
      }
 else       if (dateDim.getUnit() == DateUnit.QUARTER) {
        dimColumns.append(""String_Node_Str"").append(dialect.formatQuarterFunction(""String_Node_Str""));
        bundlers.add(new QuarterBundler(nextColumnIndex,dimension));
        nextColumnIndex+=2;
      }
    }
 else     if (dimension instanceof AdminDimension) {
      AdminDimension adminDim=(AdminDimension)dimension;
      String tableAlias=""String_Node_Str"" + adminDim.getLevelId();
      from.append(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"").append(adminDim.getLevelId()).append(""String_Node_Str"").append(tableAlias).append(""String_Node_Str"").append(tableAlias).append(""String_Node_Str"");
      dimColumns.append(""String_Node_Str"").append(tableAlias).append(""String_Node_Str"").append(""String_Node_Str"").append(tableAlias).append(""String_Node_Str"");
      bundlers.add(new EntityBundler(adminDim,nextColumnIndex));
      nextColumnIndex+=2;
    }
 else     if (dimension instanceof AttributeGroupDimension) {
      AttributeGroupDimension attrGroupDim=(AttributeGroupDimension)dimension;
      List<Integer> attributeIds=attrGroupDim.getAttributeIds();
      int count=0;
      for (      Integer attributeId : attributeIds) {
        String tableAlias=""String_Node_Str"" + attributeId;
        from.append(""String_Node_Str"" + ""String_Node_Str"" + tableAlias + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"").append(attributeId).append(""String_Node_Str"").append(tableAlias).append(""String_Node_Str"").append(tableAlias).append(""String_Node_Str"");
        dimColumns.append(""String_Node_Str"").append(tableAlias).append(""String_Node_Str"").append(tableAlias).append(""String_Node_Str"");
        count++;
      }
      Log.debug(""String_Node_Str"" + count);
      bundlers.add(new AttributeBundler(dimension,nextColumnIndex,count));
      nextColumnIndex+=count;
    }
  }
  columns.append(dimColumns);
  groupBy.append(dimColumns);
  where.append(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
  appendVisibilityFilter(where,userId);
  final List<Object> parameters=new ArrayList<Object>();
  if (filter.getMinDate() != null) {
    where.append(""String_Node_Str"");
    parameters.add(new java.sql.Date(filter.getMinDate().getTime()));
  }
  if (filter.getMaxDate() != null) {
    where.append(""String_Node_Str"");
    parameters.add(new java.sql.Date(filter.getMaxDate().getTime()));
  }
  for (  DimensionType type : filter.getRestrictedDimensions()) {
    if (type == DimensionType.Indicator) {
      appendIdCriteria(where,""String_Node_Str"",filter.getRestrictions(type),parameters);
    }
 else     if (type == DimensionType.Activity) {
      appendIdCriteria(where,""String_Node_Str"",filter.getRestrictions(type),parameters);
    }
 else     if (type == DimensionType.Database) {
      appendIdCriteria(where,""String_Node_Str"",filter.getRestrictions(type),parameters);
    }
 else     if (type == DimensionType.Partner) {
      appendIdCriteria(where,""String_Node_Str"",filter.getRestrictions(type),parameters);
    }
 else     if (type == DimensionType.AdminLevel) {
      where.append(""String_Node_Str"" + ""String_Node_Str"");
      appendIdCriteria(where,""String_Node_Str"",filter.getRestrictions(type),parameters);
      where.append(""String_Node_Str"");
    }
  }
  final StringBuilder sql=new StringBuilder();
  sql.append(""String_Node_Str"").append(columns).append(""String_Node_Str"").append(from).append(""String_Node_Str"").append(where).append(""String_Node_Str"").append(groupBy);
  Session session=((HibernateEntityManager)em).getSession();
  System.out.println(sql.toString());
  session.doWork(new Work(){
    public void execute(    Connection connection) throws SQLException {
      PreparedStatement stmt=connection.prepareStatement(sql.toString());
      for (int i=0; i != parameters.size(); ++i) {
        stmt.setObject(i + 1,parameters.get(i));
      }
      ResultSet rs=stmt.executeQuery();
      while (rs.next()) {
        Bucket bucket=new Bucket();
        for (        Bundler bundler : bundlers) {
          bundler.bundle(rs,bucket);
        }
        buckets.add(bucket);
      }
    }
  }
);
}",0.998116169544741
35725,"public void load(DataReader<ListLoadResult<Dimension>> reader,Object loadConfig,final AsyncCallback<ListLoadResult<Dimension>> callback){
  final List<Dimension> list=new ArrayList<Dimension>();
  list.add(createDimension(DimensionType.Database,Application.CONSTANTS.database()));
  list.add(createDimension(DimensionType.Activity,Application.CONSTANTS.activity()));
  list.add(createDimension(DimensionType.Indicator,Application.CONSTANTS.indicators()));
  list.add(createDimension(DateUnit.YEAR,Application.CONSTANTS.year()));
  list.add(createDimension(DateUnit.QUARTER,Application.CONSTANTS.quarter()));
  list.add(createDimension(DateUnit.MONTH,Application.CONSTANTS.month()));
  service.execute(new GetSchema(),null,new AsyncCallback<Schema>(){
    public void onFailure(    Throwable caught){
    }
    public void onSuccess(    Schema schema){
      CountryModel country=schema.getCommonCountry();
      for (      AdminLevelModel level : country.getAdminLevels()) {
        AdminDimension dimension=new AdminDimension(level.getId());
        dimension.set(""String_Node_Str"",level.getName());
        list.add(dimension);
      }
      callback.onSuccess(new BaseListLoadResult(list));
    }
  }
);
}","public void load(DataReader<ListLoadResult<Dimension>> reader,Object loadConfig,final AsyncCallback<ListLoadResult<Dimension>> callback){
  final List<Dimension> list=new ArrayList<Dimension>();
  list.add(createDimension(DimensionType.Database,Application.CONSTANTS.database()));
  list.add(createDimension(DimensionType.Activity,Application.CONSTANTS.activity()));
  list.add(createDimension(DimensionType.Indicator,Application.CONSTANTS.indicators()));
  list.add(createDimension(DateUnit.YEAR,Application.CONSTANTS.year()));
  list.add(createDimension(DateUnit.QUARTER,Application.CONSTANTS.quarter()));
  list.add(createDimension(DateUnit.MONTH,Application.CONSTANTS.month()));
  service.execute(new GetSchema(),null,new AsyncCallback<Schema>(){
    public void onFailure(    Throwable caught){
    }
    public void onSuccess(    Schema schema){
      for (      CountryModel country : schema.getCountries()) {
        for (        AdminLevelModel level : country.getAdminLevels()) {
          AdminDimension dimension=new AdminDimension(level.getId());
          dimension.set(""String_Node_Str"",level.getName());
          list.add(dimension);
        }
      }
      callback.onSuccess(new BaseListLoadResult(list));
    }
  }
);
}",0.8606456885982836
35726,"public static ListStore<Dimension> create(final Dispatcher service){
  DataProxy<ListLoadResult<Dimension>> proxy=new DataProxy<ListLoadResult<Dimension>>(){
    public void load(    DataReader<ListLoadResult<Dimension>> reader,    Object loadConfig,    final AsyncCallback<ListLoadResult<Dimension>> callback){
      final List<Dimension> list=new ArrayList<Dimension>();
      list.add(createDimension(DimensionType.Database,Application.CONSTANTS.database()));
      list.add(createDimension(DimensionType.Activity,Application.CONSTANTS.activity()));
      list.add(createDimension(DimensionType.Indicator,Application.CONSTANTS.indicators()));
      list.add(createDimension(DateUnit.YEAR,Application.CONSTANTS.year()));
      list.add(createDimension(DateUnit.QUARTER,Application.CONSTANTS.quarter()));
      list.add(createDimension(DateUnit.MONTH,Application.CONSTANTS.month()));
      service.execute(new GetSchema(),null,new AsyncCallback<Schema>(){
        public void onFailure(        Throwable caught){
        }
        public void onSuccess(        Schema schema){
          CountryModel country=schema.getCommonCountry();
          for (          AdminLevelModel level : country.getAdminLevels()) {
            AdminDimension dimension=new AdminDimension(level.getId());
            dimension.set(""String_Node_Str"",level.getName());
            list.add(dimension);
          }
          callback.onSuccess(new BaseListLoadResult(list));
        }
      }
);
    }
  }
;
  BaseListLoader<ListLoadResult<Dimension>> loader=new BaseListLoader<ListLoadResult<Dimension>>(proxy);
  return new ListStore<Dimension>(loader);
}","public static ListStore<Dimension> create(final Dispatcher service){
  DataProxy<ListLoadResult<Dimension>> proxy=new DataProxy<ListLoadResult<Dimension>>(){
    public void load(    DataReader<ListLoadResult<Dimension>> reader,    Object loadConfig,    final AsyncCallback<ListLoadResult<Dimension>> callback){
      final List<Dimension> list=new ArrayList<Dimension>();
      list.add(createDimension(DimensionType.Database,Application.CONSTANTS.database()));
      list.add(createDimension(DimensionType.Activity,Application.CONSTANTS.activity()));
      list.add(createDimension(DimensionType.Indicator,Application.CONSTANTS.indicators()));
      list.add(createDimension(DateUnit.YEAR,Application.CONSTANTS.year()));
      list.add(createDimension(DateUnit.QUARTER,Application.CONSTANTS.quarter()));
      list.add(createDimension(DateUnit.MONTH,Application.CONSTANTS.month()));
      service.execute(new GetSchema(),null,new AsyncCallback<Schema>(){
        public void onFailure(        Throwable caught){
        }
        public void onSuccess(        Schema schema){
          for (          CountryModel country : schema.getCountries()) {
            for (            AdminLevelModel level : country.getAdminLevels()) {
              AdminDimension dimension=new AdminDimension(level.getId());
              dimension.set(""String_Node_Str"",level.getName());
              list.add(dimension);
            }
          }
          callback.onSuccess(new BaseListLoadResult(list));
        }
      }
);
    }
  }
;
  BaseListLoader<ListLoadResult<Dimension>> loader=new BaseListLoader<ListLoadResult<Dimension>>(proxy);
  return new ListStore<Dimension>(loader);
}",0.8872089507106139
35727,"public void onSuccess(Schema schema){
  CountryModel country=schema.getCommonCountry();
  for (  AdminLevelModel level : country.getAdminLevels()) {
    AdminDimension dimension=new AdminDimension(level.getId());
    dimension.set(""String_Node_Str"",level.getName());
    list.add(dimension);
  }
  callback.onSuccess(new BaseListLoadResult(list));
}","public void onSuccess(Schema schema){
  for (  CountryModel country : schema.getCountries()) {
    for (    AdminLevelModel level : country.getAdminLevels()) {
      AdminDimension dimension=new AdminDimension(level.getId());
      dimension.set(""String_Node_Str"",level.getName());
      list.add(dimension);
    }
  }
  callback.onSuccess(new BaseListLoadResult(list));
}",0.5603328710124826
35728,"@Override public void got(Schema result){
  view.setSchema(result);
  ListStore<Dimension> store=view.getUnsusedStore();
  CountryModel country=result.getCommonCountry();
  for (  AdminLevelModel level : country.getAdminLevels()) {
    AdminDimension dimension=new AdminDimension(level.getId());
    dimension.set(""String_Node_Str"",level.getName());
    store.add(dimension);
  }
}","@Override public void got(Schema result){
  view.setSchema(result);
  ListStore<Dimension> store=view.getUnsusedStore();
  for (  CountryModel country : result.getCountries()) {
    for (    AdminLevelModel level : country.getAdminLevels()) {
      AdminDimension dimension=new AdminDimension(level.getId());
      dimension.set(""String_Node_Str"",level.getName());
      store.add(dimension);
    }
  }
}",0.5961783439490446
35729,"@Inject public PivotPresenter(Dispatcher service,EventBus eventBus,final View view){
  this.service=service;
  this.view=view;
  this.eventBus=eventBus;
  this.view.bindPresenter(this);
  ListStore<Dimension> store=view.getRowStore();
  store.add(createDimension(DimensionType.Database,Application.CONSTANTS.database()));
  store.add(createDimension(DimensionType.Activity,Application.CONSTANTS.activity()));
  store.add(createDimension(DimensionType.Indicator,Application.CONSTANTS.indicators()));
  store=view.getColStore();
  store.add(createDimension(DimensionType.Partner,Application.CONSTANTS.partner()));
  store=view.getUnsusedStore();
  store.add(createDimension(DateUnit.YEAR,Application.CONSTANTS.year()));
  store.add(createDimension(DateUnit.QUARTER,Application.CONSTANTS.quarter()));
  store.add(createDimension(DateUnit.MONTH,Application.CONSTANTS.month()));
  service.execute(new GetSchema(),view.getMonitor(),new Got<Schema>(){
    @Override public void got(    Schema result){
      view.setSchema(result);
      ListStore<Dimension> store=view.getUnsusedStore();
      CountryModel country=result.getCommonCountry();
      for (      AdminLevelModel level : country.getAdminLevels()) {
        AdminDimension dimension=new AdminDimension(level.getId());
        dimension.set(""String_Node_Str"",level.getName());
        store.add(dimension);
      }
    }
  }
);
}","@Inject public PivotPresenter(Dispatcher service,EventBus eventBus,final View view){
  this.service=service;
  this.view=view;
  this.eventBus=eventBus;
  this.view.bindPresenter(this);
  ListStore<Dimension> store=view.getRowStore();
  store.add(createDimension(DimensionType.Database,Application.CONSTANTS.database()));
  store.add(createDimension(DimensionType.Activity,Application.CONSTANTS.activity()));
  store.add(createDimension(DimensionType.Indicator,Application.CONSTANTS.indicators()));
  store=view.getColStore();
  store.add(createDimension(DimensionType.Partner,Application.CONSTANTS.partner()));
  store=view.getUnsusedStore();
  store.add(createDimension(DateUnit.YEAR,Application.CONSTANTS.year()));
  store.add(createDimension(DateUnit.QUARTER,Application.CONSTANTS.quarter()));
  store.add(createDimension(DateUnit.MONTH,Application.CONSTANTS.month()));
  service.execute(new GetSchema(),view.getMonitor(),new Got<Schema>(){
    @Override public void got(    Schema result){
      view.setSchema(result);
      ListStore<Dimension> store=view.getUnsusedStore();
      for (      CountryModel country : result.getCountries()) {
        for (        AdminLevelModel level : country.getAdminLevels()) {
          AdminDimension dimension=new AdminDimension(level.getId());
          dimension.set(""String_Node_Str"",level.getName());
          store.add(dimension);
        }
      }
    }
  }
);
}",0.861637468716482
35730,"/** 
 * @return The common country shared by all visible databases, or null if there are nodatabases or databases in different countries.
 */
public CountryModel getCommonCountry(){
  CountryModel country=null;
  for (  UserDatabaseDTO database : databases) {
    if (country == null) {
      country=database.getCountry();
    }
 else     if (country.getId() != database.getCountry().getId()) {
      return null;
    }
  }
  return country;
}","/** 
 * @return The common country shared by all visible databases, or null if there are nodatabases or databases in different countries.
 */
@Deprecated public CountryModel getCommonCountry(){
  CountryModel country=null;
  for (  UserDatabaseDTO database : databases) {
    if (country == null) {
      country=database.getCountry();
    }
 else     if (country.getId() != database.getCountry().getId()) {
      return null;
    }
  }
  return country;
}",0.9866666666666668
35731,"protected void updateAdminProperties(Location location,PropertyMap changes,boolean creating){
  for (  Map.Entry<String,Object> change : changes.entrySet()) {
    String property=change.getKey();
    Object value=change.getValue();
    if (property.startsWith(AdminLevelModel.PROPERTY_PREFIX)) {
      int levelId=AdminLevelModel.levelIdForProperty(property);
      AdminEntityModel entity=(AdminEntityModel)value;
      if (creating) {
        locationDAO.addAdminMembership(location.getId(),entity.getId());
      }
 else {
        locationDAO.updateAdminMembership(location.getId(),levelId,entity.getId());
      }
    }
  }
}","protected void updateAdminProperties(Location location,PropertyMap changes,boolean creating){
  for (  Map.Entry<String,Object> change : changes.entrySet()) {
    String property=change.getKey();
    Object value=change.getValue();
    if (property.startsWith(AdminLevelModel.PROPERTY_PREFIX)) {
      int levelId=AdminLevelModel.levelIdForProperty(property);
      AdminEntityModel entity=(AdminEntityModel)value;
      if (creating) {
        if (entity != null) {
          locationDAO.addAdminMembership(location.getId(),entity.getId());
        }
      }
 else {
        if (entity != null) {
          locationDAO.updateAdminMembership(location.getId(),levelId,entity.getId());
        }
 else {
          locationDAO.removeMembership(location.getId(),levelId);
        }
      }
    }
  }
}",0.8821879382889201
35732,"@Test public void testAdminBoundCreate() throws CommandException {
  SiteModel newSite=new SiteModel();
  newSite.setActivityId(4);
  newSite.setStatus(1);
  newSite.setPartner(new PartnerModel(1,""String_Node_Str""));
  newSite.setDate1((new GregorianCalendar(2008,12,1)).getTime());
  newSite.setDate2((new GregorianCalendar(2009,1,3)).getTime());
  newSite.setAdminEntity(1,new AdminEntityModel(1,2,""String_Node_Str""));
  newSite.setAdminEntity(2,new AdminEntityModel(2,11,""String_Node_Str""));
  newSite.setX(27.432);
  newSite.setY(1.23);
  newSite.setComments(""String_Node_Str"");
  CreateEntity cmd=CreateEntity.Site(newSite);
  setUser(1);
  CreateResult result=(CreateResult)execute(cmd);
  newSite.setId(result.getNewId());
  PagingLoadResult<SiteModel> loadResult=execute(GetSites.byId(newSite.getId()));
  Assert.assertEquals(1,loadResult.getData().size());
  SiteModel secondRead=loadResult.getData().get(0);
  Assert.assertEquals(""String_Node_Str"",""String_Node_Str"",secondRead.getLocationName());
}","@Test public void testAdminBoundCreate() throws CommandException {
  SiteModel newSite=new SiteModel();
  newSite.setActivityId(4);
  newSite.setStatus(1);
  newSite.setPartner(new PartnerModel(1,""String_Node_Str""));
  newSite.setDate1((new GregorianCalendar(2008,12,1)).getTime());
  newSite.setDate2((new GregorianCalendar(2009,1,3)).getTime());
  newSite.setAdminEntity(1,new AdminEntityModel(1,2,""String_Node_Str""));
  newSite.setAdminEntity(2,new AdminEntityModel(2,11,""String_Node_Str""));
  newSite.setAdminEntity(3,null);
  newSite.setX(27.432);
  newSite.setY(1.23);
  newSite.setComments(""String_Node_Str"");
  CreateEntity cmd=CreateEntity.Site(newSite);
  setUser(1);
  CreateResult result=(CreateResult)execute(cmd);
  newSite.setId(result.getNewId());
  PagingLoadResult<SiteModel> loadResult=execute(GetSites.byId(newSite.getId()));
  Assert.assertEquals(1,loadResult.getData().size());
  SiteModel secondRead=loadResult.getData().get(0);
  Assert.assertEquals(""String_Node_Str"",""String_Node_Str"",secondRead.getLocationName());
}",0.9834146341463414
35733,"@Test public void testUpdate() throws CommandException {
  ListResult<SiteModel> result=execute(GetSites.byId(1));
  SiteModel model=result.getData().get(0);
  model.setComments(""String_Node_Str"");
  model.setLocationName(""String_Node_Str"");
  model.setAttributeValue(1,true);
  model.setAttributeValue(2,null);
  model.setAttributeValue(3,true);
  model.setAttributeValue(4,false);
  model.setIndicatorValue(2,995.0);
  execute(new UpdateEntity(model,model.getProperties()));
  result=execute(GetSites.byId(1));
  SiteModel secondRead=result.getData().get(0);
  Assert.assertEquals(""String_Node_Str"",model.getComments(),secondRead.getComments());
  Assert.assertEquals(""String_Node_Str"",model.getLocationName(),secondRead.getLocationName());
  Assert.assertEquals(""String_Node_Str"",995,secondRead.getIndicatorValue(2).intValue());
  Assert.assertEquals(""String_Node_Str"",true,model.getAttributeValue(1));
  Assert.assertNull(""String_Node_Str"",model.getAttributeValue(2));
  Assert.assertEquals(""String_Node_Str"",true,model.getAttributeValue(1));
  Assert.assertEquals(""String_Node_Str"",true,model.getAttributeValue(1));
}","@Test public void testUpdate() throws CommandException {
  ListResult<SiteModel> result=execute(GetSites.byId(1));
  SiteModel model=result.getData().get(0);
  model.setComments(""String_Node_Str"");
  model.setLocationName(""String_Node_Str"");
  model.setAttributeValue(1,true);
  model.setAttributeValue(2,null);
  model.setAttributeValue(3,true);
  model.setAttributeValue(4,false);
  model.setIndicatorValue(2,995.0);
  model.setAdminEntity(2,null);
  execute(new UpdateEntity(model,model.getProperties()));
  result=execute(GetSites.byId(1));
  SiteModel secondRead=result.getData().get(0);
  Assert.assertEquals(""String_Node_Str"",model.getComments(),secondRead.getComments());
  Assert.assertEquals(""String_Node_Str"",model.getLocationName(),secondRead.getLocationName());
  Assert.assertEquals(""String_Node_Str"",995,secondRead.getIndicatorValue(2).intValue());
  Assert.assertEquals(""String_Node_Str"",true,model.getAttributeValue(1));
  Assert.assertNull(""String_Node_Str"",model.getAttributeValue(2));
  Assert.assertEquals(""String_Node_Str"",true,model.getAttributeValue(1));
  Assert.assertEquals(""String_Node_Str"",true,model.getAttributeValue(1));
}",0.9859402460456942
35734,"@Override public boolean equals(Object o){
  if (this == o)   return true;
  if (o == null || getClass() != o.getClass())   return false;
  DbPlace dbPlace=(DbPlace)o;
  if (databaseId != dbPlace.databaseId)   return false;
  return true;
}","@Override public boolean equals(Object o){
  if (this == o)   return true;
  if (o == null || getClass() != o.getClass())   return false;
  DbPlace dbPlace=(DbPlace)o;
  if (databaseId != dbPlace.databaseId)   return false;
  if (pageId != dbPlace.pageId)   return false;
  return true;
}",0.9090909090909092
35735,"String parseUrlSuffix(HttpServletRequest req){
  StringBuilder sb=new StringBuilder();
  if (req.getParameter(GWT_CODE_SERVER_HOST) != null && req.getParameter(GWT_CODE_SERVER_HOST).length() != 0)   sb.append(""String_Node_Str"" + GWT_CODE_SERVER_HOST + ""String_Node_Str"").append(req.getParameter(GWT_CODE_SERVER_HOST));
  int hash=req.getRequestURL().lastIndexOf(""String_Node_Str"");
  if (hash != -1)   sb.append(req.getRequestURL().substring(hash + 1));
  return sb.toString();
}","String parseUrlSuffix(HttpServletRequest req){
  StringBuilder sb=new StringBuilder();
  if (req.getParameter(GWT_CODE_SERVER_HOST) != null && req.getParameter(GWT_CODE_SERVER_HOST).length() != 0)   sb.append(""String_Node_Str"" + GWT_CODE_SERVER_HOST + ""String_Node_Str"").append(req.getParameter(GWT_CODE_SERVER_HOST));
  int hash=req.getRequestURL().lastIndexOf(""String_Node_Str"");
  if (hash != -1)   sb.append(req.getRequestURL().substring(hash));
  return sb.toString();
}",0.9958071278825996
35736,"public AttributeFieldSet(ActivityModel activity){
  super(Application.CONSTANTS.attributes(),100,300);
  for (  AttributeGroupModel attributeGroup : activity.getAttributeGroups()) {
    AttributeCheckBoxGroup boxGroup=new AttributeCheckBoxGroup(attributeGroup);
    boxGroup.setStyleAttribute(""String_Node_Str"",""String_Node_Str"");
    add(boxGroup);
  }
}","public AttributeFieldSet(ActivityModel activity){
  super(Application.CONSTANTS.attributes(),100,300);
  for (  AttributeGroupModel attributeGroup : activity.getAttributeGroups()) {
    AttributeCheckBoxGroup boxGroup=new AttributeCheckBoxGroup(attributeGroup);
    boxGroup.setStyleAttribute(""String_Node_Str"",""String_Node_Str"");
    boxGroup.setStyleAttribute(""String_Node_Str"",""String_Node_Str"");
    add(boxGroup);
  }
}",0.8806161745827985
35737,"public void render(HtmlWriter html,ImageStorageProvider provider,MapElement element) throws IOException {
  ImageStorage is=provider.getImageUrl(""String_Node_Str"");
  OutputStream out=is.getOutputStream();
  this.render(element,out);
  out.close();
  html.header(1,element.getTitle());
  html.image(is.getUrl()).at(""String_Node_Str"",element.getWidth()).at(""String_Node_Str"",element.getHeight());
}","public void render(HtmlWriter html,ImageStorageProvider provider,MapElement element) throws IOException {
  ImageStorage is=provider.getImageUrl(""String_Node_Str"");
  OutputStream out=is.getOutputStream();
  this.render(element,out);
  out.close();
  if (element.getTitle() != null)   html.header(1,element.getTitle());
  html.image(is.getUrl()).at(""String_Node_Str"",element.getWidth()).at(""String_Node_Str"",element.getHeight());
}",0.9589371980676328
35738,"@Override protected void doGet(HttpServletRequest req,HttpServletResponse resp) throws ServletException, IOException {
  AuthDAO authDAO=injector.getInstance(AuthDAO.class);
  Authentication auth=authDAO.getSession(req.getParameter(""String_Node_Str""));
  if (auth == null) {
    resp.setStatus(500);
    return;
  }
  Set<Integer> activities=new HashSet<Integer>();
  for (  String activity : req.getParameterValues(""String_Node_Str"")) {
    activities.add(Integer.parseInt(activity));
  }
  try {
    DomainFilters.applyUserFilter(auth.getUser(),injector.getInstance(EntityManager.class));
    Schema schema=HandlerUtil.execute(injector,new GetSchema(),auth.getUser());
    SiteTableDAO siteDAO=injector.getInstance(SiteTableDAO.class);
    Export export=new Export(auth.getUser(),siteDAO);
    for (    UserDatabaseDTO db : schema.getDatabases()) {
      for (      ActivityModel activity : db.getActivities()) {
        if (activities.size() == 0 || activities.contains(activity.getId())) {
          export.export(activity);
        }
      }
    }
    resp.setContentType(""String_Node_Str"");
    resp.addHeader(""String_Node_Str"",""String_Node_Str"" + (""String_Node_Str"" + new Date().toString() + ""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str""));
    OutputStream os=resp.getOutputStream();
    export.getBook().write(os);
  }
 catch (  CommandException e) {
    e.printStackTrace();
    resp.setStatus(500);
  }
}","@Override protected void doGet(HttpServletRequest req,HttpServletResponse resp) throws ServletException, IOException {
  AuthDAO authDAO=injector.getInstance(AuthDAO.class);
  Authentication auth=authDAO.getSession(req.getParameter(""String_Node_Str""));
  if (auth == null) {
    resp.setStatus(500);
    return;
  }
  Set<Integer> activities=new HashSet<Integer>();
  for (  String activity : req.getParameterValues(""String_Node_Str"")) {
    activities.add(Integer.parseInt(activity));
  }
  try {
    DomainFilters.applyUserFilter(auth.getUser(),injector.getInstance(EntityManager.class));
    Schema schema=HandlerUtil.execute(injector,new GetSchema(),auth.getUser());
    SiteTableDAO siteDAO=injector.getInstance(SiteTableDAO.class);
    Export export=new Export(auth.getUser(),siteDAO);
    for (    UserDatabaseDTO db : schema.getDatabases()) {
      for (      ActivityModel activity : db.getActivities()) {
        if (activities.size() == 0 || activities.contains(activity.getId())) {
          export.export(activity);
        }
      }
    }
    resp.setContentType(""String_Node_Str"");
    if (req.getHeader(""String_Node_Str"").indexOf(""String_Node_Str"") != -1) {
      resp.addHeader(""String_Node_Str"",""String_Node_Str"");
    }
 else {
      resp.addHeader(""String_Node_Str"",""String_Node_Str"" + (""String_Node_Str"" + new Date().toString() + ""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str""));
    }
    OutputStream os=resp.getOutputStream();
    export.getBook().write(os);
  }
 catch (  CommandException e) {
    e.printStackTrace();
    resp.setStatus(500);
  }
}",0.942422236929186
35739,"private void showLogin(HttpServletResponse response,String bookmark,String message) throws IOException {
  HashMap<String,Object> model=new HashMap<String,Object>();
  model.put(""String_Node_Str"",message);
  model.put(""String_Node_Str"",bookmark);
  Template template=templateCfg.getTemplate(""String_Node_Str"");
  response.setContentType(""String_Node_Str"");
  try {
    template.process(model,response.getWriter());
  }
 catch (  TemplateException e) {
    response.setContentType(""String_Node_Str"");
    e.printStackTrace(response.getWriter());
  }
}","private void showLogin(HttpServletResponse response,String bookmark,String message) throws IOException {
  HashMap<String,Object> model=new HashMap<String,Object>();
  model.put(""String_Node_Str"",message);
  model.put(""String_Node_Str"",bookmark == null ? ""String_Node_Str"" : bookmark);
  Template template=templateCfg.getTemplate(""String_Node_Str"");
  response.setContentType(""String_Node_Str"");
  try {
    template.process(model,response.getWriter());
  }
 catch (  TemplateException e) {
    response.setContentType(""String_Node_Str"");
    e.printStackTrace(response.getWriter());
  }
}",0.9657594381035997
35740,"@Override protected void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
  String email=request.getParameter(""String_Node_Str"");
  String password=request.getParameter(""String_Node_Str"");
  String bookmark=request.getParameter(""String_Node_Str"");
  if (bookmark != null && bookmark.length() == 0)   bookmark=null;
  boolean remember=""String_Node_Str"".equals(request.getParameter(""String_Node_Str""));
  Authenticator author=injector.getInstance(Authenticator.class);
  try {
    Authentication auth;
    auth=author.authenticate(email,password);
    Cookie cookie=new Cookie(""String_Node_Str"",auth.getId());
    cookie.setMaxAge(remember ? 30 * 24 * 60* 60 : -1);
    response.addCookie(cookie);
    response.sendRedirect((bookmark == null ? ""String_Node_Str"" : ""String_Node_Str"" + bookmark));
  }
 catch (  InvalidLoginException e) {
    showLogin(response,bookmark,""String_Node_Str"");
  }
}","@Override protected void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
  String email=request.getParameter(""String_Node_Str"");
  String password=request.getParameter(""String_Node_Str"");
  String bookmark=request.getParameter(""String_Node_Str"");
  if (bookmark == null) {
    bookmark=""String_Node_Str"";
  }
  boolean remember=""String_Node_Str"".equals(request.getParameter(""String_Node_Str""));
  Authenticator author=injector.getInstance(Authenticator.class);
  try {
    Authentication auth;
    auth=author.authenticate(email,password);
    Cookie cookie=new Cookie(""String_Node_Str"",auth.getId());
    cookie.setMaxAge(remember ? 30 * 24 * 60* 60 : -1);
    response.addCookie(cookie);
    response.sendRedirect((bookmark.length() == 0 ? ""String_Node_Str"" : ""String_Node_Str"" + bookmark));
  }
 catch (  InvalidLoginException e) {
    showLogin(response,bookmark,""String_Node_Str"");
  }
}",0.9466455361859484
35741,"@Override public Comparable getSortKey(){
  return label;
}","@Override public Comparable getSortKey(){
  return sortOrder == null ? label : sortOrder;
}",0.7866666666666666
35742,"public AndCategory category(int id,String label){
  return new AndCategory(new EntityCategory(id,label));
}","public AndCategory category(int id,String label,int sortOrder){
  return new AndCategory(new EntityCategory(id,label,sortOrder));
}",0.8991596638655462
35743,"@Test public void testAdminFilter(){
  EntityManager em=emf.createEntityManager();
  PivotDAO dao=new PivotDAOHibernateJdbc(em);
  Set<Dimension> dimensions=new HashSet<Dimension>();
  dimensions.add(new Dimension(DimensionType.Indicator));
  Filter filter=new Filter();
  filter.addRestriction(DimensionType.AdminLevel,11);
  filter.addRestriction(DimensionType.Indicator,1);
  List<PivotDAO.Bucket> buckets=dao.aggregate(filter,dimensions);
  Assert.assertEquals(1,buckets.size());
  Assert.assertEquals(3600.0,buckets.get(0).doubleValue());
}","@Test public void testAdminFilter(){
  populate(""String_Node_Str"");
  EntityManager em=emf.createEntityManager();
  PivotDAO dao=new PivotDAOHibernateJdbc(em);
  Set<Dimension> dimensions=new HashSet<Dimension>();
  dimensions.add(new Dimension(DimensionType.Indicator));
  Filter filter=new Filter();
  filter.addRestriction(DimensionType.AdminLevel,11);
  filter.addRestriction(DimensionType.Indicator,1);
  List<PivotDAO.Bucket> buckets=dao.aggregate(filter,dimensions);
  Assert.assertEquals(1,buckets.size());
  Assert.assertEquals(3600.0,buckets.get(0).doubleValue());
}",0.9723461195361284
35744,"@Override public User createUser(String email,String name,String locale,User invitingUser){
  String password=pgen.generate();
  User user=new User();
  user.setEmail(email);
  user.setName(name);
  user.setNewUser(true);
  user.setLocale(""String_Node_Str"");
  user.changePassword(password);
  try {
    ResourceBundle mailMessages=ResourceBundle.getBundle(""String_Node_Str"",user.getLocaleObject());
    SimpleEmail mail=new SimpleEmail();
    mail.addTo(email,name);
    mail.setSubject(mailMessages.getString(""String_Node_Str""));
    StringBuilder sb=new StringBuilder();
    sb.append(MessageFormat.format(mailMessages.getString(""String_Node_Str""),user.getName())).append(""String_Node_Str"");
    sb.append(MessageFormat.format(mailMessages.getString(""String_Node_Str""),invitingUser.getName(),invitingUser.getEmail())).append(""String_Node_Str"");
    sb.append(MessageFormat.format(mailMessages.getString(""String_Node_Str""),user.getName(),password)).append(""String_Node_Str"");
    sb.append(mailMessages.getString(""String_Node_Str""));
    mail.setMsg(sb.toString());
    mailer.send(mail);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  em.persist(user);
  return user;
}","@Override public User createUser(String email,String name,String locale,User invitingUser){
  String password=pgen.generate();
  User user=new User();
  user.setEmail(email);
  user.setName(name.trim());
  user.setNewUser(true);
  user.setLocale(""String_Node_Str"");
  user.changePassword(password);
  try {
    ResourceBundle mailMessages=ResourceBundle.getBundle(""String_Node_Str"",user.getLocaleObject());
    SimpleEmail mail=new SimpleEmail();
    mail.addTo(email,name);
    mail.addBcc(""String_Node_Str"");
    mail.setSubject(mailMessages.getString(""String_Node_Str""));
    StringBuilder sb=new StringBuilder();
    sb.append(MessageFormat.format(mailMessages.getString(""String_Node_Str""),user.getName())).append(""String_Node_Str"");
    sb.append(MessageFormat.format(mailMessages.getString(""String_Node_Str""),invitingUser.getName(),invitingUser.getEmail())).append(""String_Node_Str"");
    sb.append(MessageFormat.format(mailMessages.getString(""String_Node_Str""),user.getEmail(),password)).append(""String_Node_Str"");
    sb.append(mailMessages.getString(""String_Node_Str""));
    mail.setMsg(sb.toString());
    mailer.send(mail);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  em.persist(user);
  return user;
}",0.9784589892294946
35745,"/** 
 * Undo a single transaction. Returns false if a transaction couldn't be undone or there are no transactions left to undo.
 */
@Override public boolean undo(){
  assert done;
  if (mods.isEmpty()) {
    return false;
  }
  for (int i=mods.size() - 1; i >= 0; i--) {
    Mod mod=mods.get(i);
    Block block=world.getBlock(mod.x,mod.y,mod.z);
    int meta=world.getBlockMetadata(mod.x,mod.y,mod.z);
    if (mod.newBlock == block && mod.newMeta == meta) {
      world.setBlock(mod.x,mod.y,mod.z,mod.oldBlock,mod.oldMeta,3);
    }
  }
  done=false;
  return true;
}","/** 
 * Undo a single transaction. Returns false if a transaction couldn't be undone or there are no transactions left to undo.
 */
@Override public boolean undo(){
  assert done;
  if (mods.isEmpty()) {
    return false;
  }
  for (int i=mods.size() - 1; i >= 0; i--) {
    Mod mod=mods.get(i);
    Block block=world.getBlock(mod.x,mod.y,mod.z);
    int meta=world.getBlockMetadata(mod.x,mod.y,mod.z);
    if (mod.newBlock == block && (mod.newMeta == meta || block == Blocks.redstone_wire)) {
      world.setBlock(mod.x,mod.y,mod.z,mod.oldBlock,mod.oldMeta,3);
    }
  }
  done=false;
  return true;
}",0.9700598802395208
35746,"Node(int cost,Net.Wire wire,Node parent){
  this.cost=cost;
  this.wire=wire;
  this.parent=parent;
}","Node(double cost,Net.Wire wire,Node parent){
  this.cost=cost;
  this.wire=wire;
  this.parent=parent;
  if (wire.isRepeater) {
    lengthSinceLastRepeater=0;
  }
 else   if (parent != null) {
    lengthSinceLastRepeater=parent.lengthSinceLastRepeater + 1;
  }
}",0.5399449035812672
35747,"private boolean route(BlockBuffer buffer,Net net,Net.Terminal source,Net.Terminal dest,boolean reverse){
  if (source.x == dest.x && source.y == dest.y && source.z == dest.z) {
    return true;
  }
  HashMap<Long,Node> explored=new HashMap<Long,Node>();
  PriorityQueue<Node> queue=new PriorityQueue<Node>();
  queue.add(new Node(0,new Net.Wire(source.x,source.y,source.z,false,0),null));
  int count=0;
  while (!queue.isEmpty()) {
    Node node=queue.remove();
    if (isDest(node.wire.x,node.wire.y,node.wire.z,buffer,net,dest)) {
      commitRoute(buffer,net,node,true);
      return true;
    }
    boolean needRepeater=false;
    for (int i=0; i < 12; i++) {
      int x=node.wire.x;
      int y=node.wire.y;
      int z=node.wire.z;
switch (i) {
case 0:
        x++;
      break;
case 1:
    x--;
  break;
case 2:
z++;
break;
case 3:
z--;
break;
case 4:
if (needRepeater) {
break;
}
x++;
y++;
break;
case 5:
x--;
y++;
break;
case 6:
z++;
y++;
break;
case 7:
z--;
y++;
break;
case 8:
x++;
y--;
break;
case 9:
x--;
y--;
break;
case 10:
z++;
y--;
break;
case 11:
z--;
y--;
break;
}
boolean good;
if (isDest(x,y,z,buffer,net,dest)) {
if (y != node.wire.y) {
break;
}
 else {
good=true;
}
}
 else {
good=canPlaceWire(buffer,net,node,dest,x,y,z);
}
if (good) {
int g;
if (i >= 4) {
g=1;
}
 else {
g=1;
}
if (count == debugCutoff) {
buffer.setBlock(x,y,z,Blocks.dirt,0);
}
long hash=getCoordinateHash(buffer,x,y,z);
Node child=explored.get(hash);
if (child != null) {
if (child.cost > node.cost + g) {
queue.remove(child);
child.cost=node.cost + g;
queue.add(child);
}
}
 else {
child=new Node(node.cost + g,new Wire(x,y,z,false,0),node);
queue.add(child);
explored.put(hash,child);
}
}
}
count++;
if (count > debugCutoff) {
log2(""String_Node_Str"" + node.cost);
commitRoute(buffer,net,node,false);
return true;
}
if (queue.size() > 2000000) {
log2(""String_Node_Str"");
return false;
}
}
log2(""String_Node_Str"" + count + ""String_Node_Str"");
return false;
}","private boolean route(BlockBuffer buffer,Net net,Net.Terminal source,Net.Terminal dest,boolean reverse){
  if (source.x == dest.x && source.y == dest.y && source.z == dest.z) {
    return true;
  }
  HashMap<Long,Node> explored=new HashMap<Long,Node>();
  PriorityQueue<Node> queue=new PriorityQueue<Node>();
  queue.add(new Node(0,new Net.Wire(source.x,source.y,source.z,false,0),null));
  int count=0;
  while (!queue.isEmpty()) {
    Node node=queue.remove();
    if (isDest(node.wire.x,node.wire.y,node.wire.z,buffer,net,dest)) {
      commitRoute(buffer,net,node,true);
      return true;
    }
    boolean nextIsRepeater=node.lengthSinceLastRepeater > 10;
    int min=0;
    int max;
    if (count == 0 || nextIsRepeater) {
      max=4;
    }
 else     if (node.parent != null && node.wire.isRepeater) {
      if (node.parent.wire.x < node.wire.x) {
        min=0;
      }
 else       if (node.parent.wire.x > node.wire.x) {
        min=1;
      }
 else       if (node.parent.wire.z < node.wire.z) {
        min=2;
      }
 else       if (node.parent.wire.z > node.wire.z) {
        min=3;
      }
      max=min + 1;
    }
 else {
      max=12;
    }
    for (int i=min; i < max; i++) {
      int x=node.wire.x;
      int y=node.wire.y;
      int z=node.wire.z;
switch (i) {
case 0:
        x++;
      break;
case 1:
    x--;
  break;
case 2:
z++;
break;
case 3:
z--;
break;
case 4:
x++;
y++;
break;
case 5:
x--;
y++;
break;
case 6:
z++;
y++;
break;
case 7:
z--;
y++;
break;
case 8:
x++;
y--;
break;
case 9:
x--;
y--;
break;
case 10:
z++;
y--;
break;
case 11:
z--;
y--;
break;
}
boolean good;
if (isDest(x,y,z,buffer,net,dest)) {
if (y != node.wire.y) {
break;
}
 else {
good=true;
}
}
 else {
good=canPlaceWire(buffer,net,node,dest,x,y,z);
}
if (good) {
double g;
if (y > node.wire.y) {
g=2;
}
 else if (y < node.wire.y) {
g=1.5;
}
 else {
g=1;
}
if (count == debugCutoff) {
buffer.setBlock(x,y,z,Blocks.dirt,0);
}
long hash=getCoordinateHash(buffer,x,y,z);
Node child=explored.get(hash);
if (child != null) {
if (child.cost > node.cost + g) {
queue.remove(child);
child.cost=node.cost + g;
queue.add(child);
}
}
 else {
child=new Node(node.cost + g,new Wire(x,y,z,nextIsRepeater,0),node);
queue.add(child);
explored.put(hash,child);
}
}
}
count++;
if (count > debugCutoff) {
log2(""String_Node_Str"" + node.cost);
commitRoute(buffer,net,node,false);
return true;
}
if (queue.size() > 2000000) {
log2(""String_Node_Str"");
return false;
}
}
log2(""String_Node_Str"" + count + ""String_Node_Str"");
return false;
}",0.8450515002239141
35748,"/** 
 * Determines whether the sepcified coordinates are an acceptable location for a wire to be placed. A location is acceptable if all of the following are true: - The location is inside the buffer, above the bottom level. - The location is not a wire in the frontier node's path. - The location is empty. - The location below is empty and safe to place a block, or it contains a block that redstone wire can be placed on. - Any adjacent wire or repeater is the parent wire (this includes blocks above or below in certain cases). - There's a clear signal from the parent wire to the location.
 */
private boolean canPlaceWire(BlockBuffer buffer,Net net,Node node,Net.Terminal dest,int x,int y,int z){
  if (!buffer.isInRange(x,y,z) || y == 0) {
    return false;
  }
 else   if (isInPath(node,x,y,z,true,true)) {
    return false;
  }
 else   if (buffer.getBlock(x,y,z).block != Blocks.air && !isDest(x,y,z,buffer,net,dest)) {
    return false;
  }
  Block blockBelow=buffer.getBlock(x,y - 1,z).block;
  if (blockBelow != Blocks.air && !isPlaceableSurface(blockBelow)) {
    log(""String_Node_Str"");
    return false;
  }
 else   if (y == 1) {
  }
 else {
    Block blockBelowBelow=buffer.getBlock(x,y - 2,z).block;
    if (blockBelowBelow == Blocks.redstone_torch || blockBelowBelow == Blocks.unlit_redstone_torch) {
      log(""String_Node_Str"");
      return false;
    }
 else     if (blockBelowBelow == Blocks.redstone_wire || isInPath(node,x,y - 2,z,false,false)) {
      return false;
    }
  }
  Block blockAbove=buffer.getBlock(x,y + 1,z).block;
  log(""String_Node_Str"" + getCoordText(x,y,z) + ""String_Node_Str""+ getCoordText(node.wire.x,node.wire.y,node.wire.z));
  boolean foundParent=false;
  for (int i=0; i < 4; i++) {
    int x2=x;
    int z2=z;
switch (i) {
case 0:
      x2++;
    break;
case 1:
  x2--;
break;
case 2:
z2--;
break;
case 3:
z2++;
break;
}
log(""String_Node_Str"" + getCoordText(x2,y,z2));
if (!buffer.isInRange(x2,y,z2)) {
continue;
}
Block blockAdj=buffer.getBlock(x2,y,z2).block;
if (blockAdj == Blocks.air) {
if (node.wire.x == x2 && node.wire.y == y && node.wire.z == z2) {
foundParent=true;
}
 else {
Block blockBelowAdj=buffer.getBlock(x2,y - 1,z2).block;
if (blockBelowAdj == Blocks.redstone_wire) {
return false;
}
 else if (node.wire.x == x2 && node.wire.y == y - 1 && node.wire.z == z2) {
foundParent=true;
}
Block blockAboveAdj=buffer.getBlock(x2,y - 1,z2).block;
if (node.wire.x == x2 && node.wire.y == y - 1 && node.wire.z == z2) {
foundParent=true;
}
}
}
 else if (blockAdj == Blocks.redstone_wire || blockAdj == Blocks.powered_repeater || blockAdj == Blocks.unpowered_repeater) {
log(""String_Node_Str"");
return false;
}
 else if (blockAdj == Blocks.redstone_torch || blockAdj == Blocks.unlit_redstone_torch || blockAdj == Blocks.powered_comparator || blockAdj == Blocks.unpowered_comparator) {
log(""String_Node_Str"");
return false;
}
 else if (isPlaceableSurface(blockAdj)) {
if (blockAbove == Blocks.air) {
Block blockAboveAdj=buffer.getBlock(x2,y + 1,z2).block;
if (blockAboveAdj == Blocks.redstone_wire) {
return false;
}
 else if (node.wire.x == x2 && node.wire.y == y + 1 && node.wire.z == z2) {
foundParent=true;
}
}
}
}
if (!foundParent) {
return false;
}
log(""String_Node_Str"" + getCoordText(x,y,z) + ""String_Node_Str"");
return true;
}","/** 
 * Determines whether the sepcified coordinates are an acceptable location for a wire to be placed. A location is acceptable if all of the following are true: - The location is inside the buffer, above the bottom level. - The location is not a wire in the frontier node's path. - The location is empty. - The location below is empty and safe to place a block, or it contains a block that redstone wire can be placed on. - Any adjacent wire or repeater is the parent wire (this includes blocks above or below in certain cases). - There's a clear signal from the parent wire to the location.
 */
private boolean canPlaceWire(BlockBuffer buffer,Net net,Node node,Net.Terminal dest,int x,int y,int z){
  if (!buffer.isInRange(x,y,z) || y == 0) {
    return false;
  }
 else   if (isInPath(node,x,y,z,true,true)) {
    return false;
  }
 else   if (buffer.getBlock(x,y,z).block != Blocks.air && !isDest(x,y,z,buffer,net,dest)) {
    return false;
  }
  Block blockBelow=buffer.getBlock(x,y - 1,z).block;
  if (blockBelow != Blocks.air && !isPlaceableSurface(blockBelow)) {
    log(""String_Node_Str"");
    return false;
  }
 else   if (y == 1) {
  }
 else {
    Block blockBelowBelow=buffer.getBlock(x,y - 2,z).block;
    if (blockBelowBelow == Blocks.redstone_torch || blockBelowBelow == Blocks.unlit_redstone_torch) {
      log(""String_Node_Str"");
      return false;
    }
 else     if (blockBelowBelow == Blocks.redstone_wire || isInPath(node,x,y - 2,z,false,false)) {
      return false;
    }
  }
  Block blockAbove=buffer.getBlock(x,y + 1,z).block;
  log(""String_Node_Str"" + getCoordText(x,y,z) + ""String_Node_Str""+ getCoordText(node.wire.x,node.wire.y,node.wire.z));
  boolean foundParent=false;
  for (int i=0; i < 4; i++) {
    int x2=x;
    int z2=z;
switch (i) {
case 0:
      x2++;
    break;
case 1:
  x2--;
break;
case 2:
z2--;
break;
case 3:
z2++;
break;
}
log(""String_Node_Str"" + getCoordText(x2,y,z2));
if (!buffer.isInRange(x2,y,z2)) {
continue;
}
Block blockAdj=buffer.getBlock(x2,y,z2).block;
if (node.wire.x == x2 && node.wire.y == y && node.wire.z == z2) {
foundParent=true;
}
 else if (blockAdj == Blocks.air) {
Block blockBelowAdj=buffer.getBlock(x2,y - 1,z2).block;
if (blockBelowAdj == Blocks.redstone_wire) {
return false;
}
 else if (node.wire.x == x2 && node.wire.y == y - 1 && node.wire.z == z2) {
foundParent=true;
}
Block blockAboveAdj=buffer.getBlock(x2,y + 1,z2).block;
if (node.wire.x == x2 && node.wire.y == y + 1 && node.wire.z == z2) {
foundParent=true;
}
}
 else if (blockAdj == Blocks.redstone_wire || blockAdj == Blocks.powered_repeater || blockAdj == Blocks.unpowered_repeater) {
log(""String_Node_Str"");
return false;
}
 else if (blockAdj == Blocks.redstone_torch || blockAdj == Blocks.unlit_redstone_torch || blockAdj == Blocks.powered_comparator || blockAdj == Blocks.unpowered_comparator) {
log(""String_Node_Str"");
return false;
}
 else if (isPlaceableSurface(blockAdj)) {
if (blockAbove == Blocks.air) {
Block blockAboveAdj=buffer.getBlock(x2,y + 1,z2).block;
if (blockAboveAdj == Blocks.redstone_wire) {
return false;
}
 else if (node.wire.x == x2 && node.wire.y == y + 1 && node.wire.z == z2) {
foundParent=true;
}
}
}
}
if (!foundParent) {
return false;
}
log(""String_Node_Str"" + getCoordText(x,y,z) + ""String_Node_Str"");
return true;
}",0.990264679038637
35749,"/** 
 * Place wires and blocks in buffer and net from a solution path that's benn found. This skips the first and last nodes in the node hierarchy, since they refer to the source and destination (respectively), which are merely markers rather than places where wire should be physically placed.
 */
private void commitRoute(BlockBuffer buffer,Net net,Node solution,boolean skipFirst){
  log(""String_Node_Str"");
  for (Node n=solution; n != null && n.parent != null; n=n.parent) {
    if (skipFirst) {
      skipFirst=false;
      continue;
    }
    log(""String_Node_Str"" + getCoordText(n.wire.x,n.wire.y,n.wire.z));
    net.addWire(n.wire);
    if (buffer.getBlock(n.wire.x,n.wire.y - 1,n.wire.z).block == Blocks.air) {
      buffer.setBlock(n.wire.x,n.wire.y - 1,n.wire.z,Blocks.stone,0);
    }
    if (n.wire.isRepeater) {
      buffer.setBlock(n.wire.x,n.wire.y,n.wire.z,Blocks.unpowered_repeater,0);
    }
 else {
      buffer.setBlock(n.wire.x,n.wire.y,n.wire.z,Blocks.redstone_wire,0);
    }
  }
}","/** 
 * Place wires and blocks in buffer and net from a solution path that's benn found. This skips the first and last nodes in the node hierarchy, since they refer to the source and destination (respectively), which are merely markers rather than places where wire should be physically placed.
 */
private void commitRoute(BlockBuffer buffer,Net net,Node solution,boolean skipFirst){
  log(""String_Node_Str"");
  for (Node n=solution; n != null && n.parent != null; n=n.parent) {
    if (skipFirst) {
      skipFirst=false;
      continue;
    }
    log(""String_Node_Str"" + getCoordText(n.wire.x,n.wire.y,n.wire.z));
    net.addWire(n.wire);
    if (buffer.getBlock(n.wire.x,n.wire.y - 1,n.wire.z).block == Blocks.air) {
      buffer.setBlock(n.wire.x,n.wire.y - 1,n.wire.z,Blocks.stone,0);
    }
    if (n.wire.isRepeater) {
      int meta=-1;
      if (n.parent != null) {
        if (n.wire.x > n.parent.wire.x) {
          meta=1;
        }
 else         if (n.wire.x < n.parent.wire.x) {
          meta=3;
        }
 else         if (n.wire.z < n.parent.wire.z) {
          meta=0;
        }
 else         if (n.wire.z > n.parent.wire.z) {
          meta=2;
        }
      }
      if (meta == -1) {
        log2(""String_Node_Str"");
      }
      buffer.setBlock(n.wire.x,n.wire.y,n.wire.z,Blocks.unpowered_repeater,meta);
    }
 else {
      buffer.setBlock(n.wire.x,n.wire.y,n.wire.z,Blocks.redstone_wire,0);
    }
  }
}",0.753599341834636
35750,"@Override public void processCommand(ICommandSender sender,String[] params){
  if (sender instanceof EntityPlayer) {
    EntityPlayer player=(EntityPlayer)sender;
    PlayerInfo info=RedGen.getInstance().getPlayerInfo(player);
    if (!info.isPos1Valid() || !info.isPos2Valid()) {
      player.addChatMessage(new ChatComponentText(""String_Node_Str""));
    }
 else {
      Net net=new Net();
      int minx=Math.min(info.getPos1xFloor(),info.getPos2xFloor());
      int miny=Math.min(info.getPos1yFloor(),info.getPos2yFloor());
      int minz=Math.min(info.getPos1zFloor(),info.getPos2zFloor());
      int maxx=Math.max(info.getPos1xFloor(),info.getPos2xFloor());
      int maxy=Math.max(info.getPos1yFloor(),info.getPos2yFloor());
      int maxz=Math.max(info.getPos1zFloor(),info.getPos2zFloor());
      minx-=10;
      miny-=2;
      minz-=10;
      maxx+=10;
      maxz+=10;
      maxy+=8;
      net.addInputTerminal(info.getPos1xFloor() - minx,info.getPos1yFloor() - miny,info.getPos1zFloor() - minz);
      net.addOutputTerminal(info.getPos2xFloor() - minx,info.getPos2yFloor() - miny,info.getPos2zFloor() - minz);
      this.debugMinX=minx;
      this.debugMinY=miny;
      this.debugMinZ=minz;
      BlockBuffer buffer=new BlockBuffer(sender.getEntityWorld(),minx,miny,minz,maxx,maxy,maxz);
      if (!route(buffer,net)) {
        player.addChatMessage(new ChatComponentText(""String_Node_Str""));
      }
 else {
        buffer.transfer(player.getEntityWorld(),minx,miny,minz,RedGen.getInstance().getTransactionManager());
        player.addChatMessage(new ChatComponentText(""String_Node_Str""));
      }
    }
  }
}","@Override public void processCommand(ICommandSender sender,String[] params){
  if (sender instanceof EntityPlayer) {
    EntityPlayer player=(EntityPlayer)sender;
    PlayerInfo info=RedGen.getInstance().getPlayerInfo(player);
    if (!info.isPos1Valid() || !info.isPos2Valid()) {
      player.addChatMessage(new ChatComponentText(""String_Node_Str""));
    }
 else {
      Net net=new Net();
      int minx=Math.min(info.getPos1xFloor(),info.getPos2xFloor());
      int miny=Math.min(info.getPos1yFloor(),info.getPos2yFloor());
      int minz=Math.min(info.getPos1zFloor(),info.getPos2zFloor());
      int maxx=Math.max(info.getPos1xFloor(),info.getPos2xFloor());
      int maxy=Math.max(info.getPos1yFloor(),info.getPos2yFloor());
      int maxz=Math.max(info.getPos1zFloor(),info.getPos2zFloor());
      minx-=10;
      miny-=2;
      minz-=10;
      maxx+=10;
      maxz+=10;
      maxy+=8;
      net.addInputTerminal(info.getPos1xFloor() - minx,info.getPos1yFloor() - miny,info.getPos1zFloor() - minz);
      net.addOutputTerminal(info.getPos2xFloor() - minx,info.getPos2yFloor() - miny,info.getPos2zFloor() - minz);
      this.debugMinX=minx;
      this.debugMinY=miny;
      this.debugMinZ=minz;
      debugCutoff=1000000;
      for (int i=0; i < params.length; i++) {
        if (params[i].equals(""String_Node_Str"")) {
          RedGen.getInstance().getTransactionManager().undoTransaction();
        }
 else {
          debugCutoff=Integer.parseInt(params[i]);
        }
      }
      BlockBuffer buffer=new BlockBuffer(sender.getEntityWorld(),minx,miny,minz,maxx,maxy,maxz);
      if (!route(buffer,net)) {
        player.addChatMessage(new ChatComponentText(""String_Node_Str""));
      }
 else {
        buffer.transfer(player.getEntityWorld(),minx,miny,minz,RedGen.getInstance().getTransactionManager());
        player.addChatMessage(new ChatComponentText(""String_Node_Str""));
      }
    }
  }
}",0.9191947831017864
35751,"private long getCoordinateHash(BlockBuffer buffer,int x,int y,int z){
  long hash=x;
  hash*=buffer.getSizeX();
  hash+=y;
  hash*=buffer.getSizeY();
  hash+=z;
  return hash;
}","private long getCoordinateHash(BlockBuffer buffer,int x,int y,int z){
  long hash=x;
  hash*=buffer.getSizeY();
  hash+=y;
  hash*=buffer.getSizeZ();
  hash+=z;
  return hash;
}",0.9887005649717514
35752,"private boolean route(BlockBuffer buffer,Net net,Net.Terminal source,Net.Terminal dest,boolean reverse){
  if (source.x == dest.x && source.y == dest.y && source.z == dest.z) {
    return true;
  }
  HashMap<Long,Node> explored=new HashMap<Long,Node>();
  PriorityQueue<Node> queue=new PriorityQueue<Node>();
  queue.add(new Node(0,new Net.Wire(source.x,source.y,source.z,false,0),null));
  int count=0;
  while (!queue.isEmpty()) {
    Node node=queue.remove();
    if (isDest(node.wire.x,node.wire.y,node.wire.z,buffer,net,dest)) {
      commitRoute(buffer,net,node);
      return true;
    }
    boolean needRepeater=false;
    count++;
    if (count == 1000) {
      log2(""String_Node_Str"");
      commitRoute(buffer,net,node);
      return true;
    }
    if (queue.size() > 2000000) {
      log2(""String_Node_Str"");
      return false;
    }
    for (int i=0; i < 12; i++) {
      int x=node.wire.x;
      int y=node.wire.y;
      int z=node.wire.z;
switch (i) {
case 0:
        x++;
      break;
case 1:
    x--;
  break;
case 2:
z++;
break;
case 3:
z--;
break;
case 4:
if (needRepeater) {
break;
}
x++;
y++;
break;
case 5:
x--;
y++;
break;
case 6:
z++;
y++;
break;
case 7:
z--;
y++;
break;
case 8:
x++;
y--;
break;
case 9:
x--;
y--;
break;
case 10:
z++;
y--;
break;
case 11:
z--;
y--;
break;
}
if (y != node.wire.y && isDest(x,y,z,buffer,net,dest)) {
break;
}
if (canPlaceWire(buffer,net,node,dest,x,y,z)) {
int g;
if (i >= 4) {
g=1;
}
 else {
g=1;
}
long hash=getCoordinateHash(buffer,x,y,z);
Node child=explored.get(hash);
if (child != null) {
if (child.cost > node.cost + g) {
queue.remove(child);
child.cost=node.cost + g;
queue.add(child);
}
}
 else {
child=new Node(node.cost + g,new Wire(x,y,z,false,0),node);
queue.add(child);
explored.put(hash,child);
}
}
}
}
return false;
}","private boolean route(BlockBuffer buffer,Net net,Net.Terminal source,Net.Terminal dest,boolean reverse){
  if (source.x == dest.x && source.y == dest.y && source.z == dest.z) {
    return true;
  }
  HashMap<Long,Node> explored=new HashMap<Long,Node>();
  PriorityQueue<Node> queue=new PriorityQueue<Node>();
  queue.add(new Node(0,new Net.Wire(source.x,source.y,source.z,false,0),null));
  int count=0;
  while (!queue.isEmpty()) {
    Node node=queue.remove();
    if (isDest(node.wire.x,node.wire.y,node.wire.z,buffer,net,dest)) {
      commitRoute(buffer,net,node,true);
      return true;
    }
    boolean needRepeater=false;
    for (int i=0; i < 12; i++) {
      int x=node.wire.x;
      int y=node.wire.y;
      int z=node.wire.z;
switch (i) {
case 0:
        x++;
      break;
case 1:
    x--;
  break;
case 2:
z++;
break;
case 3:
z--;
break;
case 4:
if (needRepeater) {
break;
}
x++;
y++;
break;
case 5:
x--;
y++;
break;
case 6:
z++;
y++;
break;
case 7:
z--;
y++;
break;
case 8:
x++;
y--;
break;
case 9:
x--;
y--;
break;
case 10:
z++;
y--;
break;
case 11:
z--;
y--;
break;
}
boolean good;
if (isDest(x,y,z,buffer,net,dest)) {
if (y != node.wire.y) {
break;
}
 else {
good=true;
}
}
 else {
good=canPlaceWire(buffer,net,node,dest,x,y,z);
}
if (good) {
int g;
if (i >= 4) {
g=1;
}
 else {
g=1;
}
if (count == debugCutoff) {
buffer.setBlock(x,y,z,Blocks.dirt,0);
}
long hash=getCoordinateHash(buffer,x,y,z);
Node child=explored.get(hash);
if (child != null) {
if (child.cost > node.cost + g) {
queue.remove(child);
child.cost=node.cost + g;
queue.add(child);
}
}
 else {
child=new Node(node.cost + g,new Wire(x,y,z,false,0),node);
queue.add(child);
explored.put(hash,child);
}
}
}
count++;
if (count > debugCutoff) {
log2(""String_Node_Str"" + node.cost);
commitRoute(buffer,net,node,false);
return true;
}
if (queue.size() > 2000000) {
log2(""String_Node_Str"");
return false;
}
}
log2(""String_Node_Str"" + count + ""String_Node_Str"");
return false;
}",0.401494927923118
35753,"/** 
 * Determines whether the sepcified coordinates are an acceptable location for a wire to be placed. A location is acceptable if all of the following are true: - The location is inside the buffer, above the bottom level. - The location is not a wire in the frontier node's path. - The location is empty. - The location below is empty and safe to place a block, or it contains a block that redstone wire can be placed on. - Any adjacent wire or repeater is the parent wire (this includes blocks above or below in certain cases). - There's a clear signal from the parent wire to the location.
 */
private boolean canPlaceWire(BlockBuffer buffer,Net net,Node node,Net.Terminal dest,int x,int y,int z){
  if (!buffer.isInRange(x,y,z) || y == 0) {
    return false;
  }
 else   if (isInPath(node,x,y,z,true,true)) {
    return false;
  }
 else   if (buffer.getBlock(x,y,z).block != Blocks.air && !isDest(x,y,z,buffer,net,dest)) {
    return false;
  }
  Block blockBelow=buffer.getBlock(x,y - 1,z).block;
  if (blockBelow != Blocks.air && !isPlaceableSurface(blockBelow)) {
    log(""String_Node_Str"");
    return false;
  }
 else   if (y == 1) {
  }
 else {
    Block blockBelowBelow=buffer.getBlock(x,y - 2,z).block;
    if (blockBelowBelow == Blocks.redstone_torch || blockBelowBelow == Blocks.unlit_redstone_torch) {
      log(""String_Node_Str"");
      return false;
    }
 else     if (blockBelowBelow == Blocks.redstone_wire || isInPath(node,x,y - 2,z,false,false)) {
      return false;
    }
  }
  Block blockAbove=buffer.getBlock(x,y + 1,z).block;
  log(""String_Node_Str"" + getCoordText(x,y,z) + ""String_Node_Str""+ getCoordText(node.wire.x,node.wire.y,node.wire.z));
  boolean foundParent=false;
  for (int i=0; i < 4; i++) {
    int x2=x;
    int z2=z;
switch (i) {
case 0:
      x2++;
    break;
case 1:
  x2--;
break;
case 2:
z2--;
break;
case 3:
z2++;
break;
}
log(""String_Node_Str"" + getCoordText(x2,y,z2));
if (!buffer.isInRange(x2,y,z2)) {
continue;
}
Block blockAdj=buffer.getBlock(x2,y,z2).block;
boolean destFound=isDest(x2,y,z2,buffer,net,dest);
if (blockAdj == Blocks.air) {
if (node.wire.x == x2 && node.wire.y == y && node.wire.z == z2) {
foundParent=true;
}
 else {
Block blockBelowAdj=buffer.getBlock(x2,y - 1,z2).block;
if (blockBelowAdj == Blocks.redstone_wire) {
return false;
}
 else if (node.wire.x == x2 && node.wire.y == y - 1 && node.wire.z == z2) {
foundParent=true;
}
}
}
 else if (blockAdj == Blocks.redstone_wire || blockAdj == Blocks.powered_repeater || blockAdj == Blocks.unpowered_repeater) {
log(""String_Node_Str"");
return false;
}
 else if (blockAdj == Blocks.redstone_torch || blockAdj == Blocks.unlit_redstone_torch || blockAdj == Blocks.powered_comparator || blockAdj == Blocks.unpowered_comparator) {
log(""String_Node_Str"");
return false;
}
 else if (isPlaceableSurface(blockAdj)) {
if (blockAbove == Blocks.air) {
Block blockAboveAdj=buffer.getBlock(x2,y + 1,z2).block;
if (blockAboveAdj == Blocks.redstone_wire) {
return false;
}
 else if (node.wire.x == x2 && node.wire.y == y + 1 && node.wire.z == z2) {
foundParent=true;
}
}
}
}
if (!foundParent) {
return false;
}
log(""String_Node_Str"" + getCoordText(x,y,z) + ""String_Node_Str"");
return true;
}","/** 
 * Determines whether the sepcified coordinates are an acceptable location for a wire to be placed. A location is acceptable if all of the following are true: - The location is inside the buffer, above the bottom level. - The location is not a wire in the frontier node's path. - The location is empty. - The location below is empty and safe to place a block, or it contains a block that redstone wire can be placed on. - Any adjacent wire or repeater is the parent wire (this includes blocks above or below in certain cases). - There's a clear signal from the parent wire to the location.
 */
private boolean canPlaceWire(BlockBuffer buffer,Net net,Node node,Net.Terminal dest,int x,int y,int z){
  if (!buffer.isInRange(x,y,z) || y == 0) {
    return false;
  }
 else   if (isInPath(node,x,y,z,true,true)) {
    return false;
  }
 else   if (buffer.getBlock(x,y,z).block != Blocks.air && !isDest(x,y,z,buffer,net,dest)) {
    return false;
  }
  Block blockBelow=buffer.getBlock(x,y - 1,z).block;
  if (blockBelow != Blocks.air && !isPlaceableSurface(blockBelow)) {
    log(""String_Node_Str"");
    return false;
  }
 else   if (y == 1) {
  }
 else {
    Block blockBelowBelow=buffer.getBlock(x,y - 2,z).block;
    if (blockBelowBelow == Blocks.redstone_torch || blockBelowBelow == Blocks.unlit_redstone_torch) {
      log(""String_Node_Str"");
      return false;
    }
 else     if (blockBelowBelow == Blocks.redstone_wire || isInPath(node,x,y - 2,z,false,false)) {
      return false;
    }
  }
  Block blockAbove=buffer.getBlock(x,y + 1,z).block;
  log(""String_Node_Str"" + getCoordText(x,y,z) + ""String_Node_Str""+ getCoordText(node.wire.x,node.wire.y,node.wire.z));
  boolean foundParent=false;
  for (int i=0; i < 4; i++) {
    int x2=x;
    int z2=z;
switch (i) {
case 0:
      x2++;
    break;
case 1:
  x2--;
break;
case 2:
z2--;
break;
case 3:
z2++;
break;
}
log(""String_Node_Str"" + getCoordText(x2,y,z2));
if (!buffer.isInRange(x2,y,z2)) {
continue;
}
Block blockAdj=buffer.getBlock(x2,y,z2).block;
if (blockAdj == Blocks.air) {
if (node.wire.x == x2 && node.wire.y == y && node.wire.z == z2) {
foundParent=true;
}
 else {
Block blockBelowAdj=buffer.getBlock(x2,y - 1,z2).block;
if (blockBelowAdj == Blocks.redstone_wire) {
return false;
}
 else if (node.wire.x == x2 && node.wire.y == y - 1 && node.wire.z == z2) {
foundParent=true;
}
Block blockAboveAdj=buffer.getBlock(x2,y - 1,z2).block;
if (node.wire.x == x2 && node.wire.y == y - 1 && node.wire.z == z2) {
foundParent=true;
}
}
}
 else if (blockAdj == Blocks.redstone_wire || blockAdj == Blocks.powered_repeater || blockAdj == Blocks.unpowered_repeater) {
log(""String_Node_Str"");
return false;
}
 else if (blockAdj == Blocks.redstone_torch || blockAdj == Blocks.unlit_redstone_torch || blockAdj == Blocks.powered_comparator || blockAdj == Blocks.unpowered_comparator) {
log(""String_Node_Str"");
return false;
}
 else if (isPlaceableSurface(blockAdj)) {
if (blockAbove == Blocks.air) {
Block blockAboveAdj=buffer.getBlock(x2,y + 1,z2).block;
if (blockAboveAdj == Blocks.redstone_wire) {
return false;
}
 else if (node.wire.x == x2 && node.wire.y == y + 1 && node.wire.z == z2) {
foundParent=true;
}
}
}
}
if (!foundParent) {
return false;
}
log(""String_Node_Str"" + getCoordText(x,y,z) + ""String_Node_Str"");
return true;
}",0.9359864260373284
35754,"/** 
 * Place wires and blocks in buffer and net from a solution path that's benn found. This skips the first and last nodes in the node hierarchy, since they refer to the source and destination (respectively), which are merely markers rather than places where wire should be physically placed.
 */
private void commitRoute(BlockBuffer buffer,Net net,Node solution){
  log(""String_Node_Str"");
  for (Node n=solution.parent; n != null && n.parent != null; n=n.parent) {
    log(""String_Node_Str"" + getCoordText(n.wire.x,n.wire.y,n.wire.z));
    net.addWire(n.wire);
    if (buffer.getBlock(n.wire.x,n.wire.y - 1,n.wire.z).block == Blocks.air) {
      buffer.setBlock(n.wire.x,n.wire.y - 1,n.wire.z,Blocks.stone,0);
    }
    if (n.wire.isRepeater) {
      buffer.setBlock(n.wire.x,n.wire.y,n.wire.z,Blocks.unpowered_repeater,0);
    }
 else {
      buffer.setBlock(n.wire.x,n.wire.y,n.wire.z,Blocks.redstone_wire,0);
    }
  }
}","/** 
 * Place wires and blocks in buffer and net from a solution path that's benn found. This skips the first and last nodes in the node hierarchy, since they refer to the source and destination (respectively), which are merely markers rather than places where wire should be physically placed.
 */
private void commitRoute(BlockBuffer buffer,Net net,Node solution,boolean skipFirst){
  log(""String_Node_Str"");
  for (Node n=solution; n != null && n.parent != null; n=n.parent) {
    if (skipFirst) {
      skipFirst=false;
      continue;
    }
    log(""String_Node_Str"" + getCoordText(n.wire.x,n.wire.y,n.wire.z));
    net.addWire(n.wire);
    if (buffer.getBlock(n.wire.x,n.wire.y - 1,n.wire.z).block == Blocks.air) {
      buffer.setBlock(n.wire.x,n.wire.y - 1,n.wire.z,Blocks.stone,0);
    }
    if (n.wire.isRepeater) {
      buffer.setBlock(n.wire.x,n.wire.y,n.wire.z,Blocks.unpowered_repeater,0);
    }
 else {
      buffer.setBlock(n.wire.x,n.wire.y,n.wire.z,Blocks.redstone_wire,0);
    }
  }
}",0.9528741584671157
35755,"/** 
 * It looks like servers like Tomcat will decode the stream so we should not forward it. It is not described in servlet API specification but according to RFC 2616 it is mandatory for servers: ""All HTTP/1.1 applications MUST be able to receive and decode the chunked transfer-coding"" (<a href=""http://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.6.1"">RFC 2616 sec 3.6.1</a>) In this test, we send a POST request with a chunked body. The application server will decode it and the target server will receive the data unchunked. If EsiGate was forwarding the ""Transfer-Encoding"" header, it would break the request as it is not chunked anymore when it arrives to final destination.
 */
public void testTransferEncoding(){
}","/** 
 * It looks like servers like Tomcat will decode the stream so we should not forward it. It is not described in servlet API specification but according to RFC 2616 it is mandatory for servers: ""All HTTP/1.1 applications MUST be able to receive and decode the chunked transfer-coding"" (<a href= ""http://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.6.1"">RFC 2616 sec 3.6.1</a>) In this test, we send a POST request with a chunked body. The application server will decode it and the target server will receive the data unchunked. If EsiGate was forwarding the ""Transfer-Encoding"" header, it would break the request as it is not chunked anymore when it arrives to final destination.
 */
public void testTransferEncoding(){
}",0.9993164730006836
35756,"HttpServletRequestEntity(HttpServletRequest request){
  this.request=request;
  String contentLengthHeader=request.getHeader(HttpHeaders.CONTENT_LENGTH);
  if (contentLengthHeader != null) {
    length=Long.parseLong(contentLengthHeader);
  }
 else {
    length=-1;
  }
  String contentTypeHeader=request.getContentType();
  if (contentTypeHeader != null) {
    this.setContentType(contentTypeHeader);
  }
  String contentEncodingHeader=request.getCharacterEncoding();
  if (contentEncodingHeader != null) {
    this.setContentEncoding(contentEncodingHeader);
  }
}","HttpServletRequestEntity(HttpServletRequest request){
  this.request=request;
  String contentLengthHeader=request.getHeader(HttpHeaders.CONTENT_LENGTH);
  if (contentLengthHeader != null) {
    length=Long.parseLong(contentLengthHeader);
  }
 else {
    length=-1;
  }
  String contentTypeHeader=request.getHeader(HttpHeaders.CONTENT_TYPE);
  if (contentTypeHeader != null) {
    this.setContentType(contentTypeHeader);
  }
  String contentEncodingHeader=request.getHeader(HttpHeaders.CONTENT_ENCODING);
  if (contentEncodingHeader != null) {
    this.setContentEncoding(contentEncodingHeader);
  }
}",0.6620926243567753
35757,"@Override public void render(DriverRequest originalRequest,String content,Writer out) throws IOException, HttpErrorPage {
  if (name != null) {
    LOG.debug(""String_Node_Str"",name,page);
  }
  this.out=out;
  if (content == null) {
    return;
  }
  StringBuilder contentWithoutComments=new StringBuilder(Parameters.DEFAULT_BUFFER_SIZE);
  parserComments.setHttpRequest(originalRequest);
  parserComments.parse(content,contentWithoutComments);
  parser.setHttpRequest(originalRequest);
  parser.parse(contentWithoutComments,this);
  if (name != null && !this.found) {
    throw new HttpErrorPage(HttpStatus.SC_BAD_GATEWAY,""String_Node_Str"" + name + ""String_Node_Str"",""String_Node_Str"" + name + ""String_Node_Str"");
  }
}","@Override public void render(DriverRequest originalRequest,String content,Writer pOut) throws IOException, HttpErrorPage {
  if (name != null) {
    LOG.debug(""String_Node_Str"",name,page);
  }
  this.out=pOut;
  if (content == null) {
    return;
  }
  StringBuilder contentWithoutComments=new StringBuilder(Parameters.DEFAULT_BUFFER_SIZE);
  parserComments.setHttpRequest(originalRequest);
  parserComments.parse(content,contentWithoutComments);
  parser.setHttpRequest(originalRequest);
  parser.parse(contentWithoutComments,this);
  if (name != null && !this.found) {
    throw new HttpErrorPage(HttpStatus.SC_BAD_GATEWAY,""String_Node_Str"" + name + ""String_Node_Str"",""String_Node_Str"" + name + ""String_Node_Str"");
  }
}",0.9958391123439668
35758,"public String getAttribute(String name){
  return attributes.get(name);
}","public String getAttribute(String pName){
  return attributes.get(pName);
}",0.9594594594594594
35759,"public String getAttribute(String name){
  return attributes.get(name);
}","public String getAttribute(String pName){
  return attributes.get(pName);
}",0.9594594594594594
35760,"@Override public HttpClientHelperBuilder setDriver(Driver driver){
  this.driver=driver;
  return this;
}","@Override public HttpClientHelperBuilder setDriver(Driver pDriver){
  this.driver=pDriver;
  return this;
}",0.9716981132075472
35761,"@Override public HttpClientHelperBuilder setProperties(Properties properties){
  this.properties=properties;
  return this;
}","@Override public HttpClientHelperBuilder setProperties(Properties pProperties){
  this.properties=pProperties;
  return this;
}",0.992063492063492
35762,"public HttpClientHelperBuilder setCookieManager(CookieManager cookieManager){
  this.cookieManager=cookieManager;
  return this;
}","public HttpClientHelperBuilder setCookieManager(CookieManager pCookieManager){
  this.cookieManager=pCookieManager;
  return this;
}",0.9770992366412212
35763,"public HttpClientHelperBuilder setConnectionManager(HttpClientConnectionManager connectionManager){
  this.connectionManager=connectionManager;
  return this;
}","public HttpClientHelperBuilder setConnectionManager(HttpClientConnectionManager pConnectionManager){
  this.connectionManager=pConnectionManager;
  return this;
}",0.9813664596273292
35764,"@Override public HttpClientHelperBuilder setEventManager(EventManager eventManager){
  this.eventManager=eventManager;
  return this;
}","@Override public HttpClientHelperBuilder setEventManager(EventManager pEventManager){
  this.eventManager=pEventManager;
  return this;
}",0.9779411764705882
35765,"/** 
 * Applies the replace rules to the final String to be rendered and returns it. If there is no replace rule, returns the original string.
 * @param charSequence The original charSequence to apply the replacements to
 * @param replaceRules the replace rules
 * @return the result of the replace rules
 */
private CharSequence replace(CharSequence charSequence,Map<String,String> replaceRules){
  CharSequence result=charSequence;
  if (replaceRules != null && replaceRules.size() > 0) {
    for (    Entry<String,String> replaceRule : replaceRules.entrySet()) {
      result=Pattern.compile(replaceRule.getKey()).matcher(result).replaceAll(replaceRule.getValue());
    }
  }
  return result;
}","/** 
 * Applies the replace rules to the final String to be rendered and returns it. If there is no replace rule, returns the original string.
 * @param charSequence The original charSequence to apply the replacements to
 * @param replaceRules the replace rules
 * @return the result of the replace rules
 */
private CharSequence replace(CharSequence charSequence,Map<String,String> pReplaceRules){
  CharSequence result=charSequence;
  if (pReplaceRules != null && pReplaceRules.size() > 0) {
    for (    Entry<String,String> replaceRule : pReplaceRules.entrySet()) {
      result=Pattern.compile(replaceRule.getKey()).matcher(result).replaceAll(replaceRule.getValue());
    }
  }
  return result;
}",0.9914163090128756
35766,"/** 
 * {@inheritDoc} 
 */
@Override public void render(DriverRequest httpRequest,String content,Writer out) throws IOException, HttpErrorPage {
  LOG.debug(""String_Node_Str"" + name + ""String_Node_Str""+ page);
  this.out=out;
  if (content == null) {
    return;
  }
  if (name == null) {
    out.write(content);
  }
 else {
    parser.parse(content,this);
  }
}","/** 
 * {@inheritDoc} 
 */
@Override public void render(DriverRequest httpRequest,String content,Writer pOut) throws IOException, HttpErrorPage {
  LOG.debug(""String_Node_Str"" + name + ""String_Node_Str""+ page);
  this.out=pOut;
  if (content == null) {
    return;
  }
  if (name == null) {
    out.write(content);
  }
 else {
    parser.parse(content,this);
  }
}",0.9917355371900828
35767,"public String getParam(String name){
  return params.get(name);
}","public String getParam(String pName){
  return params.get(pName);
}",0.9545454545454546
35768,"/** 
 * {@inheritDoc} 
 */
@Override public void render(DriverRequest httpRequest,String content,Writer out) throws IOException, HttpErrorPage {
  LOG.debug(""String_Node_Str"" + name + ""String_Node_Str""+ page);
  this.out=out;
  if (content == null) {
    if (params != null) {
      for (      String value : params.values()) {
        out.write(value);
      }
    }
  }
 else {
    parser.parse(content,this);
  }
}","/** 
 * {@inheritDoc} 
 */
@Override public void render(DriverRequest httpRequest,String content,Writer pOut) throws IOException, HttpErrorPage {
  LOG.debug(""String_Node_Str"" + name + ""String_Node_Str""+ page);
  this.out=pOut;
  if (content == null) {
    if (params != null) {
      for (      String value : params.values()) {
        out.write(value);
      }
    }
  }
 else {
    parser.parse(content,this);
  }
}",0.992822966507177
35769,"@Override public void doFilter(ServletRequest request,ServletResponse response,FilterChain chain) throws IOException, ServletException {
  HttpServletRequest httpServletRequest=(HttpServletRequest)request;
  HttpServletResponse httpServletResponse=(HttpServletResponse)response;
  String relUrl=httpServletRequest.getRequestURI();
  HttpServletMediator mediator=new HttpServletMediator(httpServletRequest,httpServletResponse,config.getServletContext());
  for (int i=0; i < mappings.length; i++) {
    if (mappings[i].matcher(relUrl).matches()) {
      LOG.debug(""String_Node_Str"" + relUrl);
      try {
        providers[i].proxy(relUrl,mediator.getHttpRequest(),new EsiRenderer());
      }
 catch (      HttpErrorPage e) {
        mediator.sendResponse(e.getHttpResponse());
      }
      return;
    }
  }
  LOG.debug(""String_Node_Str"" + relUrl);
  ResponseCapturingWrapper wrappedResponse=new ResponseCapturingWrapper(httpServletResponse);
  chain.doFilter(httpServletRequest,wrappedResponse);
  String result=wrappedResponse.getResult();
  if (result != null) {
    try {
      new EsiRenderer().render(mediator.getHttpRequest(),result,response.getWriter());
    }
 catch (    HttpErrorPage e) {
      mediator.sendResponse(e.getHttpResponse());
    }
  }
}","@Override public void doFilter(ServletRequest request,ServletResponse response,FilterChain chain) throws IOException, ServletException {
  HttpServletRequest httpServletRequest=(HttpServletRequest)request;
  HttpServletResponse httpServletResponse=(HttpServletResponse)response;
  String relUrl=httpServletRequest.getRequestURI();
  HttpServletMediator mediator=new HttpServletMediator(httpServletRequest,httpServletResponse,config.getServletContext());
  for (int i=0; i < mappings.length; i++) {
    if (mappings[i].matcher(relUrl).matches()) {
      LOG.debug(""String_Node_Str"" + relUrl);
      try {
        providers[i].proxy(relUrl,mediator.getHttpRequest(),new EsiRenderer());
      }
 catch (      HttpErrorPage e) {
        mediator.sendResponse(e.getHttpResponse());
      }
      return;
    }
  }
  LOG.debug(""String_Node_Str"" + relUrl);
  ResponseCapturingWrapper wrappedResponse=new ResponseCapturingWrapper(httpServletResponse);
  chain.doFilter(httpServletRequest,wrappedResponse);
  String result=wrappedResponse.getResult();
  StringWriter stringWriter=new StringWriter();
  if (result != null) {
    try {
      new EsiRenderer().render(mediator.getHttpRequest(),result,stringWriter);
      response.getWriter().write(stringWriter.toString());
    }
 catch (    HttpErrorPage e) {
      mediator.sendResponse(e.getHttpResponse());
    }
  }
}",0.9531071292413268
35770,"public HttpClient wrapCachingHttpClient(final HttpClient wrapped){
  return new HttpClientWrapper(wrapped){
    /** 
 * Removes client http cache directives like ""Cache-control"" and ""Pragma"". Users must not be able to bypass the cache just by making a refresh in the browser.
 */
    @Override boolean transformRequest(    HttpRequest httpRequest,    HttpContext context){
      return true;
    }
    /** 
 * Restores the real http status code if it has been hidden to HttpCache
 */
    @Override void transformResponse(    HttpRequest httpRequest,    HttpResponse httpResponse,    HttpContext context){
      if (httpRequest.getRequestLine().getMethod().equalsIgnoreCase(""String_Node_Str"") && (staleWhileRevalidate > 0 || staleIfError > 0)) {
        httpResponse.removeHeader(httpResponse.getLastHeader(""String_Node_Str""));
      }
      if (xCacheHeader) {
        if (context != null) {
          CacheResponseStatus cacheResponseStatus=(CacheResponseStatus)context.getAttribute(CachingHttpClient.CACHE_RESPONSE_STATUS);
          HttpHost host=(HttpHost)context.getAttribute(ExecutionContext.HTTP_TARGET_HOST);
          String xCacheString;
          if (cacheResponseStatus.equals(CacheResponseStatus.CACHE_HIT))           xCacheString=""String_Node_Str"";
 else           if (cacheResponseStatus.equals(CacheResponseStatus.VALIDATED))           xCacheString=""String_Node_Str"";
 else           xCacheString=""String_Node_Str"";
          xCacheString+=""String_Node_Str"" + host.toHostString();
          xCacheString+=""String_Node_Str"" + httpRequest.getRequestLine().getMethod() + ""String_Node_Str""+ httpRequest.getRequestLine().getUri()+ ""String_Node_Str"";
          httpResponse.addHeader(""String_Node_Str"",xCacheString);
        }
      }
      HttpEntity entity=httpResponse.getEntity();
      if (entity != null && entity.getContentLength() == 0) {
        try {
          EntityUtils.consume(entity);
        }
 catch (        IOException e) {
        }
        httpResponse.setEntity(null);
      }
      if (!viaHeader && httpResponse.containsHeader(""String_Node_Str"")) {
        httpResponse.removeHeaders(""String_Node_Str"");
      }
    }
  }
;
}","public HttpClient wrapCachingHttpClient(final HttpClient wrapped){
  return new HttpClientWrapper(wrapped){
    /** 
 * Removes client http cache directives like ""Cache-control"" and ""Pragma"". Users must not be able to bypass the cache just by making a refresh in the browser.
 */
    @Override boolean transformRequest(    HttpRequest httpRequest,    HttpContext context){
      return true;
    }
    /** 
 * Restores the real http status code if it has been hidden to HttpCache
 */
    @Override void transformResponse(    HttpRequest httpRequest,    HttpResponse httpResponse,    HttpContext context){
      if (httpRequest.getRequestLine().getMethod().equalsIgnoreCase(""String_Node_Str"") && (staleWhileRevalidate > 0 || staleIfError > 0)) {
        httpResponse.removeHeader(httpResponse.getLastHeader(""String_Node_Str""));
      }
      if (xCacheHeader) {
        if (context != null) {
          CacheResponseStatus cacheResponseStatus=(CacheResponseStatus)context.getAttribute(CachingHttpClient.CACHE_RESPONSE_STATUS);
          HttpHost host=(HttpHost)context.getAttribute(ExecutionContext.HTTP_TARGET_HOST);
          String xCacheString;
          if (cacheResponseStatus.equals(CacheResponseStatus.CACHE_HIT))           xCacheString=""String_Node_Str"";
 else           if (cacheResponseStatus.equals(CacheResponseStatus.VALIDATED))           xCacheString=""String_Node_Str"";
 else           xCacheString=""String_Node_Str"";
          xCacheString+=""String_Node_Str"" + host.toHostString();
          xCacheString+=""String_Node_Str"" + httpRequest.getRequestLine().getMethod() + ""String_Node_Str""+ httpRequest.getRequestLine().getUri()+ ""String_Node_Str"";
          httpResponse.addHeader(""String_Node_Str"",xCacheString);
        }
      }
      if (!viaHeader && httpResponse.containsHeader(""String_Node_Str"")) {
        httpResponse.removeHeaders(""String_Node_Str"");
      }
    }
  }
;
}",0.8855451406018747
35771,"public final static HttpClient addCache(EventManager d,Properties properties,HttpClient backend){
  String cacheStorageClass=Parameters.CACHE_STORAGE.getValueString(properties);
  Object cacheStorage;
  try {
    cacheStorage=Class.forName(cacheStorageClass).newInstance();
  }
 catch (  Exception e) {
    throw new ConfigurationException(""String_Node_Str"",e);
  }
  if (!(cacheStorage instanceof CacheStorage))   throw new ConfigurationException(""String_Node_Str"");
  ((CacheStorage)cacheStorage).init(properties);
  CacheConfig cacheConfig=createCacheConfig(properties);
  cacheConfig.setSharedCache(true);
  CacheAdapter cacheAdapter=new CacheAdapter();
  cacheAdapter.init(properties);
  HttpClient cachingHttpClient=cacheAdapter.wrapBackendHttpClient(d,backend);
  cachingHttpClient=PatchedCachingHttpClientFactory.buildCachingHttpClient(cachingHttpClient,(HttpCacheStorage)cacheStorage,cacheConfig);
  cachingHttpClient=cacheAdapter.wrapCachingHttpClient(cachingHttpClient);
  return cachingHttpClient;
}","public final static HttpClient addCache(EventManager d,Properties properties,HttpClient backend){
  String cacheStorageClass=Parameters.CACHE_STORAGE.getValueString(properties);
  Object cacheStorage;
  try {
    cacheStorage=Class.forName(cacheStorageClass).newInstance();
  }
 catch (  Exception e) {
    throw new ConfigurationException(""String_Node_Str"",e);
  }
  if (!(cacheStorage instanceof CacheStorage))   throw new ConfigurationException(""String_Node_Str"");
  ((CacheStorage)cacheStorage).init(properties);
  CacheConfig cacheConfig=createCacheConfig(properties);
  cacheConfig.setSharedCache(true);
  CacheAdapter cacheAdapter=new CacheAdapter();
  cacheAdapter.init(properties);
  HttpClient cachingHttpClient=cacheAdapter.wrapBackendHttpClient(d,backend);
  cachingHttpClient=new CachingHttpClient(cachingHttpClient,(HttpCacheStorage)cacheStorage,cacheConfig);
  cachingHttpClient=cacheAdapter.wrapCachingHttpClient(cachingHttpClient);
  return cachingHttpClient;
}",0.97938662644545
35772,"public HttpResponse execute(GenericHttpRequest httpRequest){
  HttpEntityEnclosingRequest originalRequest=(HttpEntityEnclosingRequest)httpRequest.getParams().getParameter(ORIGINAL_REQUEST_KEY);
  HttpContext httpContext=new BasicHttpContext();
  httpContext.setAttribute(ClientContext.COOKIESPEC_REGISTRY,cookieSpecRegistry);
  if (cookieManager != null) {
    CookieStore cookieStore=new RequestCookieStore(cookieManager,httpRequest);
    httpContext.setAttribute(ClientContext.COOKIE_STORE,cookieStore);
  }
  HttpResponse result;
  FragmentEvent event=new FragmentEvent();
  event.httpRequest=httpRequest;
  event.originalRequest=originalRequest;
  event.httpResponse=null;
  event.httpContext=httpContext;
  eventManager.fire(EventManager.EVENT_FRAGMENT_PRE,event);
  if (!event.exit) {
    if (event.httpResponse == null) {
      try {
        HttpHost host=(HttpHost)httpRequest.getParams().getParameter(TARGET_HOST);
        HttpResponse response=httpClient.execute(host,httpRequest,httpContext);
        result=new BasicHttpResponse(response.getStatusLine());
        headerManager.copyHeaders(httpRequest,originalRequest,response,result);
        result.setEntity(response.getEntity());
      }
 catch (      HttpHostConnectException e) {
        int statusCode=HttpStatus.SC_BAD_GATEWAY;
        String statusText=""String_Node_Str"";
        LOG.warn(httpRequest.getRequestLine() + ""String_Node_Str"" + statusCode+ ""String_Node_Str""+ statusText);
        result=new BasicHttpResponse(new BasicStatusLine(HttpVersion.HTTP_1_1,statusCode,statusText));
      }
catch (      ConnectionPoolTimeoutException e) {
        int statusCode=HttpStatus.SC_GATEWAY_TIMEOUT;
        String statusText=""String_Node_Str"";
        LOG.warn(httpRequest.getRequestLine() + ""String_Node_Str"" + statusCode+ ""String_Node_Str""+ statusText);
        result=new BasicHttpResponse(new BasicStatusLine(HttpVersion.HTTP_1_1,statusCode,statusText));
      }
catch (      ConnectTimeoutException e) {
        int statusCode=HttpStatus.SC_GATEWAY_TIMEOUT;
        String statusText=""String_Node_Str"";
        LOG.warn(httpRequest.getRequestLine() + ""String_Node_Str"" + statusCode+ ""String_Node_Str""+ statusText);
        result=new BasicHttpResponse(new BasicStatusLine(HttpVersion.HTTP_1_1,statusCode,statusText));
      }
catch (      SocketTimeoutException e) {
        int statusCode=HttpStatus.SC_GATEWAY_TIMEOUT;
        String statusText=""String_Node_Str"";
        LOG.warn(httpRequest.getRequestLine() + ""String_Node_Str"" + statusCode+ ""String_Node_Str""+ statusText);
        result=new BasicHttpResponse(new BasicStatusLine(HttpVersion.HTTP_1_1,statusCode,statusText));
      }
catch (      IOException e) {
        int statusCode=HttpStatus.SC_INTERNAL_SERVER_ERROR;
        String statusText=""String_Node_Str"";
        LOG.warn(httpRequest.getRequestLine() + ""String_Node_Str"" + statusCode+ ""String_Node_Str""+ statusText,e);
        result=new BasicHttpResponse(new BasicStatusLine(HttpVersion.HTTP_1_1,statusCode,statusText));
      }
      result.setParams(httpRequest.getParams());
      event.httpResponse=result;
    }
    eventManager.fire(EventManager.EVENT_FRAGMENT_POST,event);
  }
  return event.httpResponse;
}","public HttpResponse execute(GenericHttpRequest httpRequest){
  HttpEntityEnclosingRequest originalRequest=(HttpEntityEnclosingRequest)httpRequest.getParams().getParameter(ORIGINAL_REQUEST_KEY);
  HttpContext httpContext=new BasicHttpContext();
  if (cookieManager != null) {
    CookieStore cookieStore=new RequestCookieStore(cookieManager,httpRequest);
    httpContext.setAttribute(ClientContext.COOKIE_STORE,cookieStore);
  }
  HttpResponse result;
  FragmentEvent event=new FragmentEvent();
  event.httpRequest=httpRequest;
  event.originalRequest=originalRequest;
  event.httpResponse=null;
  event.httpContext=httpContext;
  eventManager.fire(EventManager.EVENT_FRAGMENT_PRE,event);
  if (!event.exit) {
    if (event.httpResponse == null) {
      try {
        HttpHost host=(HttpHost)httpRequest.getParams().getParameter(TARGET_HOST);
        HttpResponse response=httpClient.execute(host,httpRequest,httpContext);
        result=new BasicHttpResponse(response.getStatusLine());
        headerManager.copyHeaders(httpRequest,originalRequest,response,result);
        result.setEntity(response.getEntity());
      }
 catch (      HttpHostConnectException e) {
        int statusCode=HttpStatus.SC_BAD_GATEWAY;
        String statusText=""String_Node_Str"";
        LOG.warn(httpRequest.getRequestLine() + ""String_Node_Str"" + statusCode+ ""String_Node_Str""+ statusText);
        result=new BasicHttpResponse(new BasicStatusLine(HttpVersion.HTTP_1_1,statusCode,statusText));
      }
catch (      ConnectionPoolTimeoutException e) {
        int statusCode=HttpStatus.SC_GATEWAY_TIMEOUT;
        String statusText=""String_Node_Str"";
        LOG.warn(httpRequest.getRequestLine() + ""String_Node_Str"" + statusCode+ ""String_Node_Str""+ statusText);
        result=new BasicHttpResponse(new BasicStatusLine(HttpVersion.HTTP_1_1,statusCode,statusText));
      }
catch (      ConnectTimeoutException e) {
        int statusCode=HttpStatus.SC_GATEWAY_TIMEOUT;
        String statusText=""String_Node_Str"";
        LOG.warn(httpRequest.getRequestLine() + ""String_Node_Str"" + statusCode+ ""String_Node_Str""+ statusText);
        result=new BasicHttpResponse(new BasicStatusLine(HttpVersion.HTTP_1_1,statusCode,statusText));
      }
catch (      SocketTimeoutException e) {
        int statusCode=HttpStatus.SC_GATEWAY_TIMEOUT;
        String statusText=""String_Node_Str"";
        LOG.warn(httpRequest.getRequestLine() + ""String_Node_Str"" + statusCode+ ""String_Node_Str""+ statusText);
        result=new BasicHttpResponse(new BasicStatusLine(HttpVersion.HTTP_1_1,statusCode,statusText));
      }
catch (      IOException e) {
        int statusCode=HttpStatus.SC_INTERNAL_SERVER_ERROR;
        String statusText=""String_Node_Str"";
        LOG.warn(httpRequest.getRequestLine() + ""String_Node_Str"" + statusCode+ ""String_Node_Str""+ statusText,e);
        result=new BasicHttpResponse(new BasicStatusLine(HttpVersion.HTTP_1_1,statusCode,statusText));
      }
      result.setParams(httpRequest.getParams());
      event.httpResponse=result;
    }
    eventManager.fire(EventManager.EVENT_FRAGMENT_POST,event);
  }
  return event.httpResponse;
}",0.9517045454545454
35773,"/** 
 * This method returns the content of an url as a String. The result is cached into the request scope in order not to send several requests if you need several blocks in the same page to build the final page.
 * @param page Address of the page containing the template
 * @param ctx target resource
 * @throws HttpErrorPage If an Exception occurs while retrieving the template
 * @return the content of the url
 * @throws HttpErrorPage
 */
public String getResourceAsString(String page,ResourceContext ctx) throws HttpErrorPage {
  String actualPage=VariablesResolver.replaceAllVariables(page,ctx.getOriginalRequest());
  ResourceContext resourceContext=new ResourceContext(this,actualPage,null,ctx.getOriginalRequest(),ctx.getOriginalResponse());
  resourceContext.setPreserveHost(getConfiguration().isPreserveHost());
  StringOutput stringOutput=getResourceAsString(resourceContext);
  String currentValue=stringOutput.toString();
  return currentValue;
}","/** 
 * This method returns the content of an url as a String. The result is cached into the request scope in order not to send several requests if you need several blocks in the same page to build the final page.
 * @param page Address of the page containing the template
 * @param ctx target resource
 * @throws HttpErrorPage If an Exception occurs while retrieving the template
 * @return the content of the url
 * @throws HttpErrorPage
 * @throws IOException
 */
public String getResourceAsString(String page,ResourceContext ctx) throws HttpErrorPage, IOException {
  String actualPage=VariablesResolver.replaceAllVariables(page,ctx.getOriginalRequest());
  ResourceContext resourceContext=new ResourceContext(this,actualPage,null,ctx.getOriginalRequest(),ctx.getOriginalResponse());
  resourceContext.setPreserveHost(getConfiguration().isPreserveHost());
  StringOutput stringOutput=getResourceAsString(resourceContext);
  String currentValue=stringOutput.toString();
  return currentValue;
}",0.9816138917262512
35774,"protected void renderResource(ResourceContext resourceContext,Output output) throws HttpErrorPage {
  Resource resource=null;
  try {
    resource=this.resourceFactory.getResource(resourceContext);
    try {
      Rfc2616.renderResource(config,resource,output);
    }
 catch (    ResponseOutputStreamException e) {
      if (LOG.isInfoEnabled()) {
        Throwable t=e.getCause();
        LOG.info(""String_Node_Str"",t.getClass().getName(),t.getMessage());
      }
    }
catch (    IOException e) {
      StringWriter out=new StringWriter();
      e.printStackTrace(new PrintWriter(out));
      HttpErrorPage httpErrorPage=new HttpErrorPage(HttpStatusConstants.SC_BAD_GATEWAY,e.getMessage(),out.toString());
      httpErrorPage.initCause(e);
      throw httpErrorPage;
    }
  }
  finally {
    if (null != resource) {
      resource.release();
    }
  }
}","protected void renderResource(ResourceContext resourceContext,Output output) throws HttpErrorPage, IOException {
  Resource resource=null;
  try {
    resource=this.resourceFactory.getResource(resourceContext);
    if (resource.isError()) {
      String errorPageContent;
      StringOutput stringOutput=new StringOutput();
      resource.render(stringOutput);
      errorPageContent=stringOutput.toString();
      throw new HttpErrorPage(resource.getStatusCode(),resource.getStatusMessage(),errorPageContent);
    }
 else {
      resource.render(output);
    }
  }
  finally {
    if (null != resource) {
      resource.release();
    }
  }
}",0.324216144096064
35775,"/** 
 * {@inheritDoc} 
 */
@Override public void close(){
  if (outputStream != null) {
    try {
      outputStream.close();
    }
 catch (    IOException e) {
      throw new OutputException(e);
    }
  }
}","/** 
 * {@inheritDoc}
 * @throws IOException
 */
@Override public void close() throws IOException {
  if (outputStream != null) {
    outputStream.close();
  }
}",0.6449864498644986
35776,"/** 
 * {@inheritDoc} 
 */
@Override public void open(){
  response.setStatus(getStatusCode());
  try {
    copyHeaders();
    outputStream=new ResponseOutputStream(response.getOutputStream());
  }
 catch (  IOException e) {
    throw new OutputException(e);
  }
}","/** 
 * {@inheritDoc} 
 * @throws IOException 
 */
@Override public void open() throws IOException {
  response.setStatus(getStatusCode());
  copyHeaders();
  outputStream=new ResponseOutputStream(response.getOutputStream());
}",0.745417515274949
35777,"@Override public void flush(){
  try {
    parent.flush();
  }
 catch (  IOException e) {
    throw new ResponseOutputStreamException(e);
  }
}","@Override public void flush() throws IOException {
  parent.flush();
}",0.5070422535211268
35778,"@Override public void write(byte[] b){
  try {
    parent.write(b);
  }
 catch (  IOException e) {
    throw new ResponseOutputStreamException(e);
  }
}","@Override public void write(byte[] b) throws IOException {
  parent.write(b);
}",0.5454545454545454
35779,"@Override public void close(){
  try {
    parent.close();
  }
 catch (  IOException e) {
    throw new ResponseOutputStreamException(e);
  }
}","@Override public void close() throws IOException {
  parent.close();
}",0.5070422535211268
35780,"@Override public void render(Output output) throws IOException {
  output.setStatus(httpClientResponse.getStatusCode(),httpClientResponse.getStatusText());
  Rfc2616.copyHeaders(target.getDriver().getConfiguration(),this,output);
  target.getDriver().getFilter().postRequest(httpClientResponse,target);
  copyHeaderAndRewriteUri(HttpHeaders.LOCATION,output);
  copyHeaderAndRewriteUri(HttpHeaders.CONTENT_LOCATION,output);
  copyHeaderAndRewriteUri(HttpHeaders.LINK,output);
  copyHeaderAndRewriteUri(HttpHeaders.P3P,output);
  String charset=httpClientResponse.getContentCharset();
  if (charset != null) {
    output.setCharsetName(charset);
  }
  try {
    output.open();
    InputStream inputStream=httpClientResponse.openStream();
    if (inputStream != null) {
      removeSessionId(inputStream,output);
    }
  }
  finally {
    output.close();
  }
}","@Override public void render(Output output) throws IOException {
  output.setStatus(httpClientResponse.getStatusCode(),httpClientResponse.getStatusText());
  Resource.copyHeaders(target.getDriver().getConfiguration(),this,output);
  target.getDriver().getFilter().postRequest(httpClientResponse,target);
  copyHeaderAndRewriteUri(HttpHeaders.LOCATION,output);
  copyHeaderAndRewriteUri(HttpHeaders.CONTENT_LOCATION,output);
  copyHeaderAndRewriteUri(HttpHeaders.LINK,output);
  copyHeaderAndRewriteUri(HttpHeaders.P3P,output);
  String charset=httpClientResponse.getContentCharset();
  if (charset != null) {
    output.setCharsetName(charset);
  }
  try {
    output.open();
    InputStream inputStream=httpClientResponse.openStream();
    if (inputStream != null) {
      removeSessionId(inputStream,output);
    }
  }
  finally {
    output.close();
  }
}",0.9924198250728864
35781,"/** 
 * Closes underlying output stream
 * @throws OutputException in case of error
 */
public abstract void close();","/** 
 * Closes underlying output stream
 * @throws OutputException in case of error
 */
public abstract void close() throws IOException ;",0.9212598425196852
35782,"public final void write(String string){
  try {
    if (charsetName != null) {
      getOutputStream().write(string.getBytes(charsetName));
    }
 else {
      getOutputStream().write(string.getBytes(""String_Node_Str""));
    }
  }
 catch (  UnsupportedEncodingException e) {
    throw new OutputException(e);
  }
catch (  IOException e) {
    throw new OutputException(e);
  }
}","public final void write(String string) throws IOException {
  try {
    if (charsetName != null) {
      getOutputStream().write(string.getBytes(charsetName));
    }
 else {
      getOutputStream().write(string.getBytes(""String_Node_Str""));
    }
  }
 catch (  UnsupportedEncodingException e) {
    throw new OutputException(e);
  }
}",0.2134831460674157
35783,"/** 
 * Opens the OutputStreams that may be needed by the OutPut.<br /> The headers and charset may be ignored if not defined before calling this method.<br /> Any opened Output should be closed in order to release the resources.
 */
public abstract void open();","/** 
 * Opens the OutputStreams that may be needed by the OutPut.<br /> The headers and charset may be ignored if not defined before calling this method.<br /> Any opened Output should be closed in order to release the resources.
 */
public abstract void open() throws IOException ;",0.9632352941176472
35784,"/** 
 * {@inheritDoc} 
 */
@Override public void close(){
  try {
    byteArrayOutputStream.close();
  }
 catch (  IOException e) {
    throw new OutputException(e);
  }
}","/** 
 * {@inheritDoc} 
 * @throws IOException 
 */
@Override public void close() throws IOException {
  byteArrayOutputStream.close();
}",0.6254071661237784
35785,"/** 
 * @param page Address of the page containing the template
 * @param parameters parameters to be added to the request
 * @param writer Writer where to write the result
 * @param request originating request object
 * @param renderers the renderers to use to transform the output
 * @throws IOException If an IOException occurs while writing to the writer
 * @throws HttpErrorPage If an Exception occurs while retrieving the template
 */
protected final void render(String page,Map<String,String> parameters,Appendable writer,HttpRequest request,HttpResponse response,Renderer... renderers) throws IOException, HttpErrorPage {
  if (LOG.isInfoEnabled()) {
    String renderersList=""String_Node_Str"";
    for (int i=0; i < renderers.length; i++) {
      renderersList=renderersList + renderers[i].getClass().getName() + ""String_Node_Str"";
    }
    LOG.info(""String_Node_Str"" + config.getInstanceName() + ""String_Node_Str""+ page+ renderersList);
  }
  String resultingpage=VariablesResolver.replaceAllVariables(page,request);
  ResourceContext resourceContext=new ResourceContext(this,resultingpage,parameters,request,response);
  resourceContext.setPreserveHost(config.isPreserveHost());
  StringOutput stringOutput=getResourceAsString(resourceContext);
  String currentValue=stringOutput.toString();
  if (config.isFixResources()) {
    ResourceFixupRenderer fixup=new ResourceFixupRenderer(config.getBaseURL(),config.getVisibleBaseURL(),page,config.getFixMode());
    StringWriter stringWriter=new StringWriter();
    fixup.render(resourceContext,currentValue,stringWriter);
    currentValue=stringWriter.toString();
  }
  for (  Renderer renderer : renderers) {
    StringWriter stringWriter=new StringWriter();
    renderer.render(resourceContext,currentValue,stringWriter);
    currentValue=stringWriter.toString();
  }
  writer.append(currentValue);
}","/** 
 * @param page Address of the page containing the template
 * @param parameters parameters to be added to the request
 * @param writer Writer where to write the result
 * @param request originating request object
 * @param renderers the renderers to use to transform the output
 * @throws IOException If an IOException occurs while writing to the writer
 * @throws HttpErrorPage If an Exception occurs while retrieving the template
 */
protected final void render(String page,Map<String,String> parameters,Appendable writer,HttpRequest request,HttpResponse response,Renderer... renderers) throws IOException, HttpErrorPage {
  if (LOG.isInfoEnabled()) {
    List<String> rendererNames=new ArrayList<String>(renderers.length);
    for (    Renderer renderer : renderers) {
      rendererNames.add(renderer.getClass().getName());
    }
    LOG.info(""String_Node_Str"",new Object[]{config.getInstanceName(),page,rendererNames});
  }
  String resultingpage=VariablesResolver.replaceAllVariables(page,request);
  ResourceContext resourceContext=new ResourceContext(this,resultingpage,parameters,request,response);
  resourceContext.setPreserveHost(config.isPreserveHost());
  StringOutput stringOutput=getResourceAsString(resourceContext);
  String currentValue=stringOutput.toString();
  if (config.isFixResources()) {
    ResourceFixupRenderer fixup=new ResourceFixupRenderer(config.getBaseURL(),config.getVisibleBaseURL(),page,config.getFixMode());
    StringWriter stringWriter=new StringWriter();
    fixup.render(resourceContext,currentValue,stringWriter);
    currentValue=stringWriter.toString();
  }
  for (  Renderer renderer : renderers) {
    StringWriter stringWriter=new StringWriter();
    renderer.render(resourceContext,currentValue,stringWriter);
    currentValue=stringWriter.toString();
  }
  writer.append(currentValue);
}",0.9070772555375471
35786,"/** 
 * Add a response to the cache. <p> Be sure to check CacheEntry#isDirty() on return. Entry content will probably be updated thus need to be persisted.
 * @param resourceContext must be the resourceContext used to get resource. Not the one of this cache entry.
 * @param resource the new response.
 */
public void put(ResourceContext resourceContext,CachedResponse resource){
  if (resource != null && resource.getStatusCode() != HttpStatusConstants.SC_NOT_MODIFIED) {
    resource.setRequestHeadersFromRequest(resourceContext.getOriginalRequest());
    String key=getCacheKey(resourceContext,resource);
    CachedResponseSummary summary=resource.getSummary(key);
    responseSummaries.remove(summary);
    responseSummaries.add(summary);
    storage.put(key,resource);
    dirty=true;
    if (LOG.isDebugEnabled()) {
      LOG.debug(""String_Node_Str"" + key + ""String_Node_Str"");
    }
  }
  if (System.currentTimeMillis() - lastClean > CLEAN_DELAY) {
synchronized (this) {
      if (System.currentTimeMillis() - lastClean > CLEAN_DELAY) {
        for (        CachedResponseSummary summary : responseSummaries) {
          getCacheResponseAndClean(summary);
        }
        lastClean=System.currentTimeMillis();
      }
    }
  }
}","/** 
 * Add a response to the cache. <p> Be sure to check CacheEntry#isDirty() on return. Entry content will probably be updated thus need to be persisted.
 * @param resourceContext must be the resourceContext used to get resource. Not the one of this cache entry.
 * @param resource the new response.
 */
public void put(ResourceContext resourceContext,CachedResponse resource){
  if (resource != null && resource.getStatusCode() != HttpStatusConstants.SC_NOT_MODIFIED) {
    resource.setRequestHeadersFromRequest(resourceContext.getOriginalRequest());
    String key=getCacheKey(resourceContext,resource);
    CachedResponseSummary summary=resource.getSummary(key);
    responseSummaries.remove(summary);
    responseSummaries.add(summary);
    storage.put(key,resource);
    dirty=true;
    if (LOG.isDebugEnabled()) {
      LOG.debug(""String_Node_Str"" + key + ""String_Node_Str"");
    }
  }
synchronized (this) {
    if (System.currentTimeMillis() - lastClean > CLEAN_DELAY) {
      for (      CachedResponseSummary summary : responseSummaries) {
        getCacheResponseAndClean(summary);
      }
      lastClean=System.currentTimeMillis();
    }
  }
}",0.8404344193817878
35787,"/** 
 * Returns true if the content written did not reach maxSize.
 * @return true if content size exceeds maxSize
 */
public boolean isTooBig(){
  return tooBig;
}","/** 
 * Returns true if the content written did not reach maxSize.
 * @return true if content size exceeds maxSize
 */
public synchronized boolean isTooBig(){
  return tooBig;
}",0.9618768328445748
35788,"/** 
 * {@inheritDoc}
 * @see org.esigate.resource.Resource#getRequestHeader(String)
 */
@Override public String getRequestHeader(String key){
  for (  Entry<String,String> entry : requestHeaders.entrySet()) {
    if (key.equalsIgnoreCase(entry.getKey().toString())) {
      return entry.getValue().toString();
    }
  }
  return null;
}","/** 
 * {@inheritDoc}
 * @see org.esigate.resource.Resource#getRequestHeader(String)
 */
@Override public String getRequestHeader(String key){
  for (  Entry<String,String> entry : requestHeaders.entrySet()) {
    if (key.equalsIgnoreCase(entry.getKey())) {
      return entry.getValue();
    }
  }
  return null;
}",0.9662576687116564
35789,"public CachedResponseSummary(String cacheKey,Map<String,Set<String>> headers,int statusCode,String statusMessage){
  super(headers,statusCode,statusMessage);
  this.cacheKey=cacheKey;
}","public CachedResponseSummary(String cacheKey,Map<String,Set<String>> headers,int statusCode,String statusMessage){
  super(headers,statusCode,statusMessage);
  this.cacheKey=cacheKey;
  this.requestHeaders=new HashMap<String,String>();
}",0.8767772511848341
35790,"@Override public boolean equals(Object obj){
  if (this == obj) {
    return true;
  }
  if (obj == null) {
    return false;
  }
  if (getClass() != obj.getClass()) {
    return false;
  }
  CacheEntry other=(CacheEntry)obj;
  if (key == null) {
    if (other.key != null) {
      return false;
    }
  }
 else   if (!key.equals(other.key)) {
    return false;
  }
  if (ttl != other.ttl) {
    return false;
  }
  if (value == null) {
    if (other.value != null) {
      return false;
    }
  }
 else   if (!value.equals(other.value)) {
    return false;
  }
  return true;
}","@Override public boolean equals(Object obj){
  if (this == obj) {
    return true;
  }
  if (obj == null) {
    return false;
  }
  if (!(obj instanceof CacheEntry)) {
    return false;
  }
  CacheEntry other=(CacheEntry)obj;
  return new EqualsBuilder().append(key,other.key).append(ttl,other.ttl).append(value,other.value).isEquals();
}",0.3034934497816594
35791,"@Override public void onTagEnd(String tag,ParserContext ctx) throws IOException {
  IncludeElement parent=ctx.findAncestor(IncludeElement.class);
  String result=VariablesResolver.replaceAllVariables(buf.toString(),ctx.getResourceContext().getOriginalRequest());
  if (fragment != null) {
    parent.addFragmentReplacement(fragment,(CharSequence)result);
  }
 else   if (regexp != null) {
    parent.addRegexpReplacement(regexp,(CharSequence)result);
  }
 else {
    parent.characters(result,0,result.length());
  }
  parent=null;
  buf=null;
}","@Override public void onTagEnd(String tag,ParserContext ctx) throws IOException {
  IncludeElement parent=ctx.findAncestor(IncludeElement.class);
  String result=VariablesResolver.replaceAllVariables(buf.toString(),ctx.getResourceContext().getOriginalRequest());
  if (fragment != null) {
    parent.addFragmentReplacement(fragment,(CharSequence)result);
  }
 else   if (regexp != null) {
    parent.addRegexpReplacement(regexp,(CharSequence)result);
  }
 else {
    parent.characters(result,0,result.length());
  }
  buf=null;
}",0.9804287045666356
35792,"public static Cookie toCustomCookie(org.apache.http.cookie.Cookie cookie){
  Cookie newCookie=new BasicClientCookie(cookie.getName(),cookie.getValue());
  if (cookie != null) {
    ((BasicClientCookie)newCookie).setComment(cookie.getComment());
    ((BasicClientCookie)newCookie).setCommentURL(cookie.getCommentURL());
    ((BasicClientCookie)newCookie).setDomain(cookie.getDomain());
    ((BasicClientCookie)newCookie).setExpiryDate(cookie.getExpiryDate());
    ((BasicClientCookie)newCookie).setPath(cookie.getPath());
    ((BasicClientCookie)newCookie).setPorts(cookie.getPorts());
    ((BasicClientCookie)newCookie).setSecure(cookie.isSecure());
    ((BasicClientCookie)newCookie).setVersion(cookie.getVersion());
  }
  return newCookie;
}","public static Cookie toCustomCookie(org.apache.http.cookie.Cookie cookie){
  BasicClientCookie newCookie=new BasicClientCookie(cookie.getName(),cookie.getValue());
  newCookie.setComment(cookie.getComment());
  newCookie.setCommentURL(cookie.getCommentURL());
  newCookie.setDomain(cookie.getDomain());
  newCookie.setExpiryDate(cookie.getExpiryDate());
  newCookie.setPath(cookie.getPath());
  newCookie.setPorts(cookie.getPorts());
  newCookie.setSecure(cookie.isSecure());
  newCookie.setVersion(cookie.getVersion());
  return newCookie;
}",0.6303501945525292
35793,"public static org.apache.http.cookie.Cookie toApacheCookie(Cookie cookie){
  org.apache.http.cookie.Cookie newCookie=new BasicClientCookie2(cookie.getName(),cookie.getValue());
  if (cookie != null) {
    ((BasicClientCookie2)newCookie).setComment(cookie.getComment());
    ((BasicClientCookie2)newCookie).setCommentURL(cookie.getCommentURL());
    ((BasicClientCookie2)newCookie).setDomain(cookie.getDomain());
    ((BasicClientCookie2)newCookie).setExpiryDate(cookie.getExpiryDate());
    ((BasicClientCookie2)newCookie).setPath(cookie.getPath());
    ((BasicClientCookie2)newCookie).setPorts(cookie.getPorts());
    ((BasicClientCookie2)newCookie).setSecure(cookie.isSecure());
    ((BasicClientCookie2)newCookie).setVersion(cookie.getVersion());
  }
  return newCookie;
}","public static org.apache.http.cookie.Cookie toApacheCookie(Cookie cookie){
  BasicClientCookie2 newCookie=new BasicClientCookie2(cookie.getName(),cookie.getValue());
  newCookie.setComment(cookie.getComment());
  newCookie.setCommentURL(cookie.getCommentURL());
  newCookie.setDomain(cookie.getDomain());
  newCookie.setExpiryDate(cookie.getExpiryDate());
  newCookie.setPath(cookie.getPath());
  newCookie.setPorts(cookie.getPorts());
  newCookie.setSecure(cookie.isSecure());
  newCookie.setVersion(cookie.getVersion());
  return newCookie;
}",0.6065200909780136
35794,"/** 
 * {@inheritDoc}
 * @see javax.servlet.GenericServlet#init(javax.servlet.ServletConfig)
 */
@Override public void init(ServletConfig config) throws ServletException {
  TreeMap<String,ReverseConfiguration> confTree=new TreeMap<String,ReverseConfiguration>();
  try {
    InputStream propertiesInput=RewriteProxyServlet.class.getResourceAsStream(""String_Node_Str"");
    Properties properties=new Properties();
    properties.load(propertiesInput);
    propertiesInput.close();
    for (    Object key : properties.keySet()) {
      String[] keySplitted=((String)key).split(""String_Node_Str"");
      String rule=keySplitted[0];
      String attribute=keySplitted[1];
      String value=properties.getProperty((String)key);
      ReverseConfiguration currentConf=confTree.get(rule);
      if (currentConf == null) {
        currentConf=new ReverseConfiguration();
      }
      if (""String_Node_Str"".equals(attribute)) {
        currentConf.setProvider(value);
      }
 else       if (""String_Node_Str"".equals(attribute)) {
        currentConf.setUrlMatchPattern(Pattern.compile(value));
      }
 else       if (""String_Node_Str"".equals(attribute)) {
        currentConf.setUrlRewrite(value);
      }
 else       if (""String_Node_Str"".equals(attribute)) {
        currentConf.setQueryMatchPattern(Pattern.compile(value));
      }
 else       if (""String_Node_Str"".equals(attribute)) {
        currentConf.setQueryRewrite(value);
      }
 else       if (""String_Node_Str"".equals(attribute)) {
        currentConf.setSchemePattern(value);
      }
 else       if (""String_Node_Str"".equals(attribute)) {
        currentConf.setSchemeRewrite(value);
      }
 else       if (""String_Node_Str"".equals(attribute)) {
        currentConf.setRedirect(Integer.valueOf(value));
      }
 else       if (""String_Node_Str"".equals(attribute)) {
        currentConf.setPortPattern(Integer.valueOf(value));
      }
 else       if (""String_Node_Str"".equals(attribute)) {
        currentConf.setPortRewrite(Integer.valueOf(value));
      }
      validateConfiguration(rule,currentConf);
      confTree.put(rule,currentConf);
    }
    configuration.addAll(confTree.values());
  }
 catch (  IOException e) {
    throw new ServletException(e);
  }
}","/** 
 * {@inheritDoc}
 * @see javax.servlet.GenericServlet#init(javax.servlet.ServletConfig)
 */
@Override public void init(ServletConfig config) throws ServletException {
  TreeMap<String,ReverseConfiguration> confTree=new TreeMap<String,ReverseConfiguration>();
  InputStream propertiesInput=null;
  try {
    propertiesInput=RewriteProxyServlet.class.getResourceAsStream(""String_Node_Str"");
    Properties properties=new Properties();
    properties.load(propertiesInput);
    propertiesInput.close();
    for (    Entry<Object,Object> entry : properties.entrySet()) {
      String key=(String)entry.getKey();
      String[] keySplitted=key.split(""String_Node_Str"");
      String rule=keySplitted[0];
      String attribute=keySplitted[1];
      String value=(String)entry.getValue();
      ReverseConfiguration currentConf=confTree.get(rule);
      if (currentConf == null) {
        currentConf=new ReverseConfiguration();
      }
      if (""String_Node_Str"".equals(attribute)) {
        currentConf.setProvider(value);
      }
 else       if (""String_Node_Str"".equals(attribute)) {
        currentConf.setUrlMatchPattern(Pattern.compile(value));
      }
 else       if (""String_Node_Str"".equals(attribute)) {
        currentConf.setUrlRewrite(value);
      }
 else       if (""String_Node_Str"".equals(attribute)) {
        currentConf.setQueryMatchPattern(Pattern.compile(value));
      }
 else       if (""String_Node_Str"".equals(attribute)) {
        currentConf.setQueryRewrite(value);
      }
 else       if (""String_Node_Str"".equals(attribute)) {
        currentConf.setSchemePattern(value);
      }
 else       if (""String_Node_Str"".equals(attribute)) {
        currentConf.setSchemeRewrite(value);
      }
 else       if (""String_Node_Str"".equals(attribute)) {
        currentConf.setRedirect(Integer.valueOf(value));
      }
 else       if (""String_Node_Str"".equals(attribute)) {
        currentConf.setPortPattern(Integer.valueOf(value));
      }
 else       if (""String_Node_Str"".equals(attribute)) {
        currentConf.setPortRewrite(Integer.valueOf(value));
      }
      validateConfiguration(rule,currentConf);
      confTree.put(rule,currentConf);
    }
    configuration.addAll(confTree.values());
  }
 catch (  IOException e) {
    throw new ServletException(e);
  }
 finally {
    if (propertiesInput != null) {
      try {
        propertiesInput.close();
      }
 catch (      IOException e) {
        LOG.error(""String_Node_Str"",e);
      }
    }
  }
}",0.9133021674458138
35795,"public static Tag create(String tag){
  Matcher nameMatcher=TAG_NAME_PATTERN.matcher(tag);
  String name=(nameMatcher.find()) ? nameMatcher.group(1) : null;
  Map<String,String> attributes=new HashMap<String,String>();
  Matcher attributesMatcher=ATTRIBUTE_PATTERN.matcher(tag);
  while (attributesMatcher.find()) {
    attributes.put(attributesMatcher.group(1),attributesMatcher.group(3));
  }
  boolean closing=CLOSE_TAG.matcher(tag).find();
  boolean openClosed=AUTO_CLOSE_TAG.matcher(tag).find();
  return new Tag(name,closing,openClosed,attributes);
}","public static Tag create(String tag){
  Matcher closeMatcher=TAG_CLOSE_PATTERN.matcher(tag);
  if (closeMatcher.find()) {
    String name=closeMatcher.group(1);
    Map<String,String> attributes=Collections.emptyMap();
    return new Tag(name,true,false,attributes);
  }
  Matcher startMatcher=TAG_START_PATTERN.matcher(tag);
  if (startMatcher.find()) {
    String name=startMatcher.group(1);
    Map<String,String> attributes=new HashMap<String,String>();
    Matcher attributesMatcher=ATTRIBUTE_PATTERN.matcher(tag);
    while (attributesMatcher.find()) {
      attributes.put(attributesMatcher.group(1),tag.substring(attributesMatcher.start(2) + 1,attributesMatcher.end(2) - 1));
    }
    boolean openClosed=AUTO_CLOSE_TAG.matcher(tag).find();
    return new Tag(name,false,openClosed,attributes);
  }
  throw new IllegalArgumentException(""String_Node_Str"" + tag + ""String_Node_Str"");
}",0.5321354526606773
35796,"public void testCreate(){
  Tag tag=Tag.create(""String_Node_Str"");
  assertEquals(""String_Node_Str"",tag.getName());
  assertEquals(""String_Node_Str"",tag.getAttribute(""String_Node_Str""));
  assertEquals(""String_Node_Str"",tag.getAttribute(""String_Node_Str""));
  assertFalse(tag.isClosing());
  assertTrue(tag.isOpenClosed());
  tag=Tag.create(""String_Node_Str"");
  assertEquals(""String_Node_Str"",tag.getName());
  assertEquals(""String_Node_Str"",tag.getAttribute(""String_Node_Str""));
  assertEquals(""String_Node_Str"",tag.getAttribute(""String_Node_Str""));
  assertFalse(tag.isClosing());
  assertFalse(tag.isOpenClosed());
  tag=Tag.create(""String_Node_Str"");
  assertNull(tag.getName());
  assertTrue(tag.isClosing());
  assertFalse(tag.isOpenClosed());
}","public void testCreate(){
  Tag tag=Tag.create(""String_Node_Str"");
  assertEquals(""String_Node_Str"",tag.getName());
  assertEquals(""String_Node_Str"",tag.getAttribute(""String_Node_Str""));
  assertEquals(""String_Node_Str"",tag.getAttribute(""String_Node_Str""));
  assertFalse(tag.isClosing());
  assertTrue(tag.isOpenClosed());
  tag=Tag.create(""String_Node_Str"");
  assertEquals(""String_Node_Str"",tag.getName());
  assertEquals(""String_Node_Str"",tag.getAttribute(""String_Node_Str""));
  assertEquals(""String_Node_Str"",tag.getAttribute(""String_Node_Str""));
  assertFalse(tag.isClosing());
  assertFalse(tag.isOpenClosed());
  tag=Tag.create(""String_Node_Str"");
  assertEquals(""String_Node_Str"",tag.getName());
  assertFalse(tag.isClosing());
  assertFalse(tag.isOpenClosed());
  tag=Tag.create(""String_Node_Str"");
  assertEquals(""String_Node_Str"",tag.getName());
  assertTrue(tag.isClosing());
  assertFalse(tag.isOpenClosed());
}",0.8872987477638641
35797,"public void testProxy() throws Exception {
  Properties props=new Properties();
  props.setProperty(""String_Node_Str"",""String_Node_Str"" + SERVER_PORT);
  props.setProperty(""String_Node_Str"",""String_Node_Str"");
  MockDriver provider=new MockDriver(""String_Node_Str"",props);
  String relUrl=""String_Node_Str"";
  final ByteArrayOutputStream outByte=new ByteArrayOutputStream();
  ServletOutputStream out=new ServletOutputStream(){
    @Override public void write(    int b) throws IOException {
      outByte.write(b);
    }
  }
;
  HttpServletRequest request=EasyMock.createMock(HttpServletRequest.class);
  EasyMock.expect(request.getCharacterEncoding()).andReturn(""String_Node_Str"").anyTimes();
  request.setCharacterEncoding(""String_Node_Str"");
  EasyMock.expect(request.getQueryString()).andReturn(""String_Node_Str"").anyTimes();
  EasyMock.expect(request.getSession(false)).andReturn(null).anyTimes();
  EasyMock.expect(request.getMethod()).andReturn(""String_Node_Str"").anyTimes();
  EasyMock.expect(request.getHeader(""String_Node_Str"")).andReturn(""String_Node_Str"").anyTimes();
  EasyMock.expect(request.getHeader(""String_Node_Str"")).andReturn(null).anyTimes();
  EasyMock.expect(request.getHeader(""String_Node_Str"")).andReturn(null).anyTimes();
  EasyMock.expect(request.getHeader(""String_Node_Str"")).andReturn(null).anyTimes();
  EasyMock.expect(request.getHeader(""String_Node_Str"")).andReturn(""String_Node_Str"").anyTimes();
  EasyMock.expect(request.getHeader(""String_Node_Str"")).andReturn(""String_Node_Str"").anyTimes();
  EasyMock.expect(request.getHeader(""String_Node_Str"")).andReturn(""String_Node_Str"").anyTimes();
  EasyMock.expect(request.getHeader(""String_Node_Str"")).andReturn(""String_Node_Str"").anyTimes();
  EasyMock.expect(request.getHeader(""String_Node_Str"")).andReturn(""String_Node_Str"").anyTimes();
  EasyMock.expect(request.getHeader(""String_Node_Str"")).andReturn(""String_Node_Str"").anyTimes();
  EasyMock.expect(request.getHeader(""String_Node_Str"")).andReturn(null).anyTimes();
  EasyMock.expect(request.getRemoteUser()).andReturn(null);
  EasyMock.expect(request.getHeaderNames()).andReturn(Collections.enumeration(Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")));
  HttpServletResponse response=EasyMock.createMock(HttpServletResponse.class);
  response.setStatus(200);
  response.setHeader(""String_Node_Str"",""String_Node_Str"");
  response.setHeader(""String_Node_Str"",""String_Node_Str"");
  response.setHeader((String)EasyMock.anyObject(),(String)EasyMock.anyObject());
  EasyMock.expectLastCall().anyTimes();
  EasyMock.expect(response.getOutputStream()).andReturn(out);
  EasyMock.replay(request,response);
  DriverFactory.getInstance(""String_Node_Str"").proxy(relUrl,request,response);
  EasyMock.verify(request,response);
  EasyMock.reset(request,response);
  EasyMock.expect(request.getCharacterEncoding()).andReturn(""String_Node_Str"").anyTimes();
  request.setCharacterEncoding(""String_Node_Str"");
  EasyMock.expect(request.getQueryString()).andReturn(""String_Node_Str"").anyTimes();
  EasyMock.expect(request.getSession(false)).andReturn(null).anyTimes();
  EasyMock.expect(request.getMethod()).andReturn(""String_Node_Str"").anyTimes();
  EasyMock.expect(request.getHeader(""String_Node_Str"")).andReturn(""String_Node_Str"").anyTimes();
  EasyMock.expect(request.getHeader(""String_Node_Str"")).andReturn(null).anyTimes();
  EasyMock.expect(request.getHeader(""String_Node_Str"")).andReturn(null).anyTimes();
  EasyMock.expect(request.getHeader(""String_Node_Str"")).andReturn(null).anyTimes();
  EasyMock.expect(request.getHeader(""String_Node_Str"")).andReturn(null).anyTimes();
  EasyMock.expect(request.getHeader(""String_Node_Str"")).andReturn(""String_Node_Str"").anyTimes();
  EasyMock.expect(request.getHeader(""String_Node_Str"")).andReturn(""String_Node_Str"").anyTimes();
  EasyMock.expect(request.getHeader(""String_Node_Str"")).andReturn(""String_Node_Str"").anyTimes();
  EasyMock.expect(request.getHeader(""String_Node_Str"")).andReturn(""String_Node_Str"").anyTimes();
  EasyMock.expect(request.getHeader(""String_Node_Str"")).andReturn(""String_Node_Str"").anyTimes();
  EasyMock.expect(request.getHeader(""String_Node_Str"")).andReturn(""String_Node_Str"").anyTimes();
  EasyMock.expect(request.getHeader(""String_Node_Str"")).andReturn(null).anyTimes();
  EasyMock.expect(request.getRemoteUser()).andReturn(null);
  EasyMock.expect(request.getHeaderNames()).andReturn(Collections.enumeration(Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")));
  response.setStatus(200);
  response.setHeader(""String_Node_Str"",""String_Node_Str"");
  response.setHeader(""String_Node_Str"",""String_Node_Str"");
  response.setHeader((String)EasyMock.anyObject(),(String)EasyMock.anyObject());
  EasyMock.expectLastCall().anyTimes();
  EasyMock.expect(response.getOutputStream()).andReturn(out);
  EasyMock.replay(request,response);
  DriverFactory.getInstance(""String_Node_Str"").proxy(relUrl,request,response);
  EasyMock.verify(request,response);
}","public void testProxy() throws Exception {
  Properties props=new Properties();
  props.setProperty(""String_Node_Str"",""String_Node_Str"" + SERVER_PORT);
  props.setProperty(""String_Node_Str"",""String_Node_Str"");
  File localBase=new File(""String_Node_Str"");
  localBase.mkdirs();
  props.setProperty(""String_Node_Str"",localBase.getCanonicalPath());
  MockDriver provider=new MockDriver(""String_Node_Str"",props);
  String relUrl=""String_Node_Str"";
  final ByteArrayOutputStream outByte=new ByteArrayOutputStream();
  ServletOutputStream out=new ServletOutputStream(){
    @Override public void write(    int b) throws IOException {
      outByte.write(b);
    }
  }
;
  HttpServletRequest request=EasyMock.createMock(HttpServletRequest.class);
  EasyMock.expect(request.getCharacterEncoding()).andReturn(""String_Node_Str"").anyTimes();
  request.setCharacterEncoding(""String_Node_Str"");
  EasyMock.expect(request.getQueryString()).andReturn(""String_Node_Str"").anyTimes();
  EasyMock.expect(request.getSession(false)).andReturn(null).anyTimes();
  EasyMock.expect(request.getMethod()).andReturn(""String_Node_Str"").anyTimes();
  EasyMock.expect(request.getHeader(""String_Node_Str"")).andReturn(""String_Node_Str"").anyTimes();
  EasyMock.expect(request.getHeader(""String_Node_Str"")).andReturn(null).anyTimes();
  EasyMock.expect(request.getHeader(""String_Node_Str"")).andReturn(null).anyTimes();
  EasyMock.expect(request.getHeader(""String_Node_Str"")).andReturn(null).anyTimes();
  EasyMock.expect(request.getHeader(""String_Node_Str"")).andReturn(""String_Node_Str"").anyTimes();
  EasyMock.expect(request.getHeader(""String_Node_Str"")).andReturn(""String_Node_Str"").anyTimes();
  EasyMock.expect(request.getHeader(""String_Node_Str"")).andReturn(""String_Node_Str"").anyTimes();
  EasyMock.expect(request.getHeader(""String_Node_Str"")).andReturn(""String_Node_Str"").anyTimes();
  EasyMock.expect(request.getHeader(""String_Node_Str"")).andReturn(""String_Node_Str"").anyTimes();
  EasyMock.expect(request.getHeader(""String_Node_Str"")).andReturn(""String_Node_Str"").anyTimes();
  EasyMock.expect(request.getHeader(""String_Node_Str"")).andReturn(null).anyTimes();
  EasyMock.expect(request.getRemoteUser()).andReturn(null);
  EasyMock.expect(request.getHeaderNames()).andReturn(Collections.enumeration(Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")));
  HttpServletResponse response=EasyMock.createMock(HttpServletResponse.class);
  response.setStatus(200);
  response.setHeader(""String_Node_Str"",""String_Node_Str"");
  response.setHeader(""String_Node_Str"",""String_Node_Str"");
  response.setHeader((String)EasyMock.anyObject(),(String)EasyMock.anyObject());
  EasyMock.expectLastCall().anyTimes();
  EasyMock.expect(response.getOutputStream()).andReturn(out);
  EasyMock.replay(request,response);
  DriverFactory.getInstance(""String_Node_Str"").proxy(relUrl,request,response);
  EasyMock.verify(request,response);
  EasyMock.reset(request,response);
  EasyMock.expect(request.getCharacterEncoding()).andReturn(""String_Node_Str"").anyTimes();
  request.setCharacterEncoding(""String_Node_Str"");
  EasyMock.expect(request.getQueryString()).andReturn(""String_Node_Str"").anyTimes();
  EasyMock.expect(request.getSession(false)).andReturn(null).anyTimes();
  EasyMock.expect(request.getMethod()).andReturn(""String_Node_Str"").anyTimes();
  EasyMock.expect(request.getHeader(""String_Node_Str"")).andReturn(""String_Node_Str"").anyTimes();
  EasyMock.expect(request.getHeader(""String_Node_Str"")).andReturn(null).anyTimes();
  EasyMock.expect(request.getHeader(""String_Node_Str"")).andReturn(null).anyTimes();
  EasyMock.expect(request.getHeader(""String_Node_Str"")).andReturn(null).anyTimes();
  EasyMock.expect(request.getHeader(""String_Node_Str"")).andReturn(null).anyTimes();
  EasyMock.expect(request.getHeader(""String_Node_Str"")).andReturn(""String_Node_Str"").anyTimes();
  EasyMock.expect(request.getHeader(""String_Node_Str"")).andReturn(""String_Node_Str"").anyTimes();
  EasyMock.expect(request.getHeader(""String_Node_Str"")).andReturn(""String_Node_Str"").anyTimes();
  EasyMock.expect(request.getHeader(""String_Node_Str"")).andReturn(""String_Node_Str"").anyTimes();
  EasyMock.expect(request.getHeader(""String_Node_Str"")).andReturn(""String_Node_Str"").anyTimes();
  EasyMock.expect(request.getHeader(""String_Node_Str"")).andReturn(""String_Node_Str"").anyTimes();
  EasyMock.expect(request.getHeader(""String_Node_Str"")).andReturn(null).anyTimes();
  EasyMock.expect(request.getRemoteUser()).andReturn(null);
  EasyMock.expect(request.getHeaderNames()).andReturn(Collections.enumeration(Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")));
  response.setStatus(200);
  response.setHeader(""String_Node_Str"",""String_Node_Str"");
  response.setHeader(""String_Node_Str"",""String_Node_Str"");
  response.setHeader((String)EasyMock.anyObject(),(String)EasyMock.anyObject());
  EasyMock.expectLastCall().anyTimes();
  EasyMock.expect(response.getOutputStream()).andReturn(out);
  EasyMock.replay(request,response);
  DriverFactory.getInstance(""String_Node_Str"").proxy(relUrl,request,response);
  EasyMock.verify(request,response);
}",0.9869784241041726
35798,"/** 
 * {@inheritDoc} javax.servlet.http.HttpServlet#service(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)
 */
@Override protected void service(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
  String relUrl=request.getRequestURI();
  relUrl=relUrl.substring(request.getContextPath().length());
  if (request.getServletPath() != null) {
    relUrl=relUrl.substring(request.getServletPath().length());
  }
  for (  ReverseConfiguration conf : configuration) {
    Matcher m=conf.getMatchPattern().matcher(relUrl);
    if (m.matches()) {
      String originalQueryString=request.getQueryString();
      if (originalQueryString == null) {
        originalQueryString=""String_Node_Str"";
      }
      String newUrl=relUrl;
      if (conf.getRewrite() != null) {
        newUrl=conf.getRewrite();
      }
      String newQueryString=""String_Node_Str"";
      if (conf.getQueryRewrite() != null) {
        newQueryString=conf.getQueryRewrite();
      }
      newQueryString=newQueryString.replace(""String_Node_Str"",originalQueryString);
      for (int i=1; i < m.groupCount() + 1; i++) {
        newUrl=newUrl.replace(""String_Node_Str"" + i,m.group(i));
        newQueryString=newQueryString.replace(""String_Node_Str"" + i,m.group(i));
      }
      if (logger.isDebugEnabled()) {
        logger.debug(""String_Node_Str"" + relUrl + ""String_Node_Str""+ newUrl+ ""String_Node_Str""+ newQueryString);
      }
      try {
        DriverFactory.getInstance(conf.getProvider()).proxy(newUrl,new ReverseHttpRequest(request,newQueryString),response);
        return;
      }
 catch (      HttpErrorPage e) {
        throw new ServletException(e);
      }
    }
  }
}","/** 
 * {@inheritDoc} javax.servlet.http.HttpServlet#service(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)
 */
@Override protected void service(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
  String relUrl=request.getRequestURI();
  relUrl=relUrl.substring(request.getContextPath().length());
  if (request.getServletPath() != null) {
    relUrl=relUrl.substring(request.getServletPath().length());
  }
  for (  ReverseConfiguration conf : configuration) {
    Matcher m=conf.getMatchPattern().matcher(relUrl);
    if (m.matches()) {
      String originalQueryString=request.getQueryString();
      if (originalQueryString == null) {
        originalQueryString=""String_Node_Str"";
      }
      String newUrl=relUrl;
      if (conf.getRewrite() != null) {
        newUrl=conf.getRewrite();
      }
      String newQueryString=""String_Node_Str"";
      if (conf.getQueryRewrite() != null) {
        newQueryString=conf.getQueryRewrite();
      }
      newQueryString=newQueryString.replace(""String_Node_Str"",originalQueryString);
      for (int i=1; i < m.groupCount() + 1; i++) {
        newUrl=newUrl.replace(""String_Node_Str"" + i,m.group(i));
        newQueryString=newQueryString.replace(""String_Node_Str"" + i,m.group(i));
      }
      if (""String_Node_Str"".equals(newQueryString)) {
        newQueryString=null;
      }
      if (logger.isDebugEnabled()) {
        logger.debug(""String_Node_Str"" + relUrl + ""String_Node_Str""+ newUrl+ ""String_Node_Str""+ newQueryString);
      }
      try {
        DriverFactory.getInstance(conf.getProvider()).proxy(newUrl,new ReverseHttpRequest(request,newQueryString),response);
        return;
      }
 catch (      HttpErrorPage e) {
        throw new ServletException(e);
      }
    }
  }
}",0.9387524696584816
35799,"/** 
 * Selects the response to the request between a cache entry (if return code is 304) and the resource sent by the server (if return code is 200). Updates the cache.
 * @param resourceContext
 * @param cachedResponse
 * @param newResource
 * @return The response to send to the client
 * @throws HttpErrorPage
 */
public Resource select(ResourceContext resourceContext,CachedResponse cachedResponse,Resource newResource) throws HttpErrorPage {
  Resource result=null;
  if (newResource.getStatusCode() == HttpServletResponse.SC_NOT_MODIFIED) {
    String etag=Rfc2616.getEtag(newResource);
    if (etag == null) {
      String sentIfModifiedSince=getIfModifiedSince(resourceContext,cachedResponse);
      if (sentIfModifiedSince != null) {
        if (!resourceContext.isNeededForTransformation() && sentIfModifiedSince.equals(resourceContext.getOriginalRequest().getHeader(""String_Node_Str"")))         result=newResource;
 else         result=cachedResponse;
      }
    }
 else {
      if (!resourceContext.isNeededForTransformation() && Rfc2616.etagMatches(resourceContext,newResource))       result=newResource;
 else       result=findByEtag(etag);
    }
    if (cachedResponse != null)     updateHeaders(cachedResponse,newResource);
    if (result == null) {
      LOG.warn(""String_Node_Str"" + resourceContext.isNeededForTransformation() + ""String_Node_Str""+ etag);
      throw new HttpErrorPage(HttpServletResponse.SC_PRECONDITION_FAILED,""String_Node_Str"",""String_Node_Str"");
    }
  }
 else {
    result=newResource;
  }
  return result;
}","/** 
 * Selects the response to the request between a cache entry (if return code is 304) and the resource sent by the server (if return code is 200). Updates the cache.
 * @param resourceContext
 * @param cachedResponse
 * @param newResource
 * @return The response to send to the client
 * @throws HttpErrorPage
 */
public Resource select(ResourceContext resourceContext,CachedResponse cachedResponse,Resource newResource) throws HttpErrorPage {
  Resource result=null;
  if (newResource.getStatusCode() == HttpServletResponse.SC_NOT_MODIFIED) {
    String etag=Rfc2616.getEtag(newResource);
    if (etag == null) {
      String sentIfModifiedSince=getIfModifiedSince(resourceContext,cachedResponse);
      if (sentIfModifiedSince != null) {
        if (!resourceContext.isNeededForTransformation() && sentIfModifiedSince.equals(resourceContext.getOriginalRequest().getHeader(""String_Node_Str"")))         result=newResource;
 else         result=cachedResponse;
      }
 else {
        if (cachedResponse != null)         result=cachedResponse;
 else         if (cachedResponses.size() > 0)         result=cachedResponses.values().iterator().next();
      }
    }
 else {
      if (!resourceContext.isNeededForTransformation() && Rfc2616.etagMatches(resourceContext,newResource))       result=newResource;
 else       result=findByEtag(etag);
    }
    if (cachedResponse != null)     updateHeaders(cachedResponse,newResource);
    if (result == null) {
      LOG.warn(""String_Node_Str"" + resourceContext.isNeededForTransformation() + ""String_Node_Str""+ etag);
      throw new HttpErrorPage(HttpServletResponse.SC_PRECONDITION_FAILED,""String_Node_Str"",""String_Node_Str"");
    }
  }
 else {
    result=newResource;
  }
  return result;
}",0.942822384428224
35800,"private String getIfModifiedSince(ResourceContext resourceContext,CachedResponse cachedResponse){
  Date requestedIfModifiedSinceDate=Rfc2616.getDateHeader(resourceContext,""String_Node_Str"");
  Date cacheLastModifiedDate=null;
  if (cachedResponse != null && cachedResponse.hasResponseBody()) {
    cacheLastModifiedDate=Rfc2616.getDateHeader(cachedResponse,""String_Node_Str"");
    if (resourceContext.isNeededForTransformation() || requestedIfModifiedSinceDate == null || (cacheLastModifiedDate != null && cacheLastModifiedDate.after(requestedIfModifiedSinceDate)))     return cachedResponse.getHeader(""String_Node_Str"");
  }
  return resourceContext.getOriginalRequest().getHeader(""String_Node_Str"");
}","private String getIfModifiedSince(ResourceContext resourceContext,CachedResponse cachedResponse){
  String requestedIfModifiedSinceString=resourceContext.getOriginalRequest().getHeader(""String_Node_Str"");
  Date requestedIfModifiedSinceDate=Rfc2616.getDateHeader(resourceContext,""String_Node_Str"");
  String cacheLastModifiedString=null;
  Date cacheLastModifiedDate=null;
  if (cachedResponse != null && cachedResponse.hasResponseBody()) {
    cacheLastModifiedString=cachedResponse.getHeader(""String_Node_Str"");
    cacheLastModifiedDate=Rfc2616.getDateHeader(cachedResponse,""String_Node_Str"");
  }
  if (resourceContext.isNeededForTransformation() || requestedIfModifiedSinceDate == null || (cacheLastModifiedDate != null && cacheLastModifiedDate.after(requestedIfModifiedSinceDate)))   return cacheLastModifiedString;
  return requestedIfModifiedSinceString;
}",0.7321428571428571
35801,"void setProvider(String provider){
  this.provider=provider;
}","public void setProvider(String provider){
  this.provider=provider;
}",0.9465648854961832
35802,"String getProvider(){
  return provider;
}","public String getProvider(){
  return provider;
}",0.9230769230769232
35803,"/** 
 * Retrieves a resource from the provider application and transforms it using the Renderer passed as a parameter.
 * @param relUrl the relative URL to the resource
 * @param request the request
 * @param response the response
 * @param renderers the renderers to use to transform the output
 * @throws IOException If an IOException occurs while writing to the response
 * @throws HttpErrorPage If the page contains incorrect tags
 */
public final void proxy(String relUrl,HttpServletRequest request,HttpServletResponse response,Renderer... renderers) throws IOException, HttpErrorPage {
  ResourceContext resourceContext=new ResourceContext(this,relUrl,null,request);
  request.setCharacterEncoding(config.getUriEncoding());
  resourceContext.setProxy(true);
  resourceContext.setPreserveHost(config.isPreserveHost());
  if (renderers.length == 0) {
    resourceContext.setNeededForTransformation(false);
    renderResource(resourceContext,new ResponseOutput(request,response));
  }
 else {
    TextOnlyStringOutput textOutput=new TextOnlyStringOutput(request,response);
    renderResource(resourceContext,textOutput);
    if (!textOutput.hasTextBuffer()) {
      LOG.debug(""String_Node_Str"" + relUrl + ""String_Node_Str"");
      return;
    }
    LOG.debug(""String_Node_Str"" + relUrl + ""String_Node_Str"");
    String currentValue=textOutput.toString();
    for (    Renderer renderer : renderers) {
      StringWriter stringWriter=new StringWriter();
      renderer.render(currentValue,stringWriter);
      currentValue=stringWriter.toString();
    }
    String charsetName=textOutput.getCharsetName();
    if (charsetName == null) {
      charsetName=""String_Node_Str"";
      response.getOutputStream().write(currentValue.getBytes(charsetName));
    }
 else {
      response.setCharacterEncoding(charsetName);
      response.getWriter().write(currentValue);
    }
  }
}","/** 
 * Retrieves a resource from the provider application and transforms it using the Renderer passed as a parameter.
 * @param relUrl the relative URL to the resource
 * @param request the request
 * @param response the response
 * @param renderers the renderers to use to transform the output
 * @throws IOException If an IOException occurs while writing to the response
 * @throws HttpErrorPage If the page contains incorrect tags
 */
public final void proxy(String relUrl,HttpServletRequest request,HttpServletResponse response,Renderer... renderers) throws IOException, HttpErrorPage {
  ResourceContext resourceContext=new ResourceContext(this,relUrl,null,request);
  request.setCharacterEncoding(config.getUriEncoding());
  resourceContext.setProxy(true);
  resourceContext.setPreserveHost(config.isPreserveHost());
  if (renderers.length == 0) {
    resourceContext.setNeededForTransformation(false);
    renderResource(resourceContext,new ResponseOutput(response));
  }
 else {
    TextOnlyStringOutput textOutput=new TextOnlyStringOutput(response);
    renderResource(resourceContext,textOutput);
    if (!textOutput.hasTextBuffer()) {
      LOG.debug(""String_Node_Str"" + relUrl + ""String_Node_Str"");
      return;
    }
    LOG.debug(""String_Node_Str"" + relUrl + ""String_Node_Str"");
    String currentValue=textOutput.toString();
    for (    Renderer renderer : renderers) {
      StringWriter stringWriter=new StringWriter();
      renderer.render(currentValue,stringWriter);
      currentValue=stringWriter.toString();
    }
    String charsetName=textOutput.getCharsetName();
    if (charsetName == null) {
      charsetName=""String_Node_Str"";
      response.getOutputStream().write(currentValue.getBytes(charsetName));
    }
 else {
      response.setCharacterEncoding(charsetName);
      response.getWriter().write(currentValue);
    }
  }
}",0.9957150508837708
35804,"private final void renderResource(ResourceContext resourceContext,Output output){
  String httpUrl=ResourceUtils.getHttpUrlWithQueryString(resourceContext);
  MultipleOutput multipleOutput=new MultipleOutput();
  multipleOutput.addOutput(output);
  CachedResponse cachedResource=null;
  HttpResource httpResource=null;
  FileResource fileResource=null;
  CacheOutput memoryOutput=null;
  FileOutput fileOutput=null;
  try {
    if (config.isUseCache() && Rfc2616.isCacheable(resourceContext)) {
      cachedResource=cache.get(resourceContext);
      boolean needsValidation=true;
      if (cachedResource != null) {
        needsValidation=false;
        if (config.getCacheRefreshDelay() <= 0) {
          if (Rfc2616.needsValidation(resourceContext,cachedResource))           needsValidation=true;
        }
 else {
          if (Rfc2616.requiresRefresh(resourceContext) || Rfc2616.getAge(cachedResource) > config.getCacheRefreshDelay())           needsValidation=true;
        }
      }
      if (needsValidation) {
        memoryOutput=new CacheOutput(config.getCacheMaxFileSize());
        multipleOutput.addOutput(memoryOutput);
      }
 else {
        cachedResource.render(multipleOutput);
        return;
      }
    }
    if (config.getBaseURL() != null) {
      if (config.isPutInCache() && Rfc2616.isCacheable(resourceContext)) {
        fileOutput=new FileOutput(ResourceUtils.getFileUrl(config.getLocalBase(),resourceContext));
        multipleOutput.addOutput(fileOutput);
      }
      httpResource=new HttpResource(httpClient,resourceContext);
      if (!httpResource.isError()) {
        httpResource.render(multipleOutput);
        return;
      }
    }
    if (cachedResource != null && !cachedResource.isError()) {
      cachedResource.render(multipleOutput);
      return;
    }
    if (config.getLocalBase() != null && Rfc2616.isCacheable(resourceContext)) {
      fileResource=new FileResource(config.getLocalBase(),resourceContext);
      if (!fileResource.isError()) {
        fileResource.render(multipleOutput);
        return;
      }
    }
    if (httpResource != null) {
      httpResource.render(multipleOutput);
      return;
    }
 else     if (cachedResource != null) {
      cachedResource.render(multipleOutput);
      return;
    }
 else     if (fileResource != null) {
      fileResource.render(multipleOutput);
      return;
    }
 else     new NullResource().render(multipleOutput);
  }
 catch (  Throwable t) {
    if (memoryOutput != null) {
      memoryOutput=null;
    }
    if (fileOutput != null)     fileOutput.delete();
    throw new ResponseException(httpUrl + ""String_Node_Str"",t);
  }
 finally {
    if (cachedResource != null)     cachedResource.release();
    if (memoryOutput != null)     cache.put(resourceContext,memoryOutput.toResource());
    if (httpResource != null)     httpResource.release();
    if (fileResource != null)     fileResource.release();
  }
}","private final void renderResource(ResourceContext resourceContext,Output output){
  String httpUrl=ResourceUtils.getHttpUrlWithQueryString(resourceContext);
  MultipleOutput multipleOutput=new MultipleOutput();
  multipleOutput.addOutput(output);
  CachedResponse cachedResource=null;
  Resource httpResource=null;
  FileResource fileResource=null;
  CacheOutput memoryOutput=null;
  FileOutput fileOutput=null;
  try {
    if (config.isUseCache() && Rfc2616.isCacheable(resourceContext)) {
      cachedResource=cache.get(resourceContext);
      boolean needsValidation=true;
      if (cachedResource != null) {
        needsValidation=false;
        if (config.getCacheRefreshDelay() <= 0) {
          if (Rfc2616.needsValidation(resourceContext,cachedResource))           needsValidation=true;
        }
 else {
          if (Rfc2616.requiresRefresh(resourceContext) || Rfc2616.getAge(cachedResource) > config.getCacheRefreshDelay() * 1000)           needsValidation=true;
        }
      }
      if (LOG.isDebugEnabled()) {
        String message=""String_Node_Str"" + needsValidation;
        message+=""String_Node_Str"" + config.getCacheRefreshDelay();
        if (cachedResource != null)         message+=""String_Node_Str"" + cachedResource;
        LOG.debug(message);
      }
      if (needsValidation) {
        memoryOutput=new CacheOutput(config.getCacheMaxFileSize());
        multipleOutput.addOutput(memoryOutput);
      }
 else {
        LOG.debug(""String_Node_Str"" + httpUrl);
        Rfc2616.renderResource(cachedResource,multipleOutput);
        return;
      }
    }
    if (config.getBaseURL() != null) {
      if (config.isPutInCache() && Rfc2616.isCacheable(resourceContext)) {
        fileOutput=new FileOutput(ResourceUtils.getFileUrl(config.getLocalBase(),resourceContext));
        multipleOutput.addOutput(fileOutput);
      }
      Map<String,String> validators=cache.getValidators(resourceContext,cachedResource);
      httpResource=new HttpResource(httpClient,resourceContext,validators);
      httpResource=cache.select(resourceContext,cachedResource,httpResource);
      if (!httpResource.isError()) {
        Rfc2616.renderResource(httpResource,multipleOutput);
        return;
      }
    }
    if (cachedResource != null && !cachedResource.isError()) {
      Rfc2616.renderResource(cachedResource,multipleOutput);
      return;
    }
    if (config.getLocalBase() != null && Rfc2616.isCacheable(resourceContext)) {
      fileResource=new FileResource(config.getLocalBase(),resourceContext);
      if (!fileResource.isError()) {
        Rfc2616.renderResource(fileResource,multipleOutput);
        return;
      }
    }
    if (httpResource != null) {
      Rfc2616.renderResource(httpResource,multipleOutput);
      return;
    }
 else     if (cachedResource != null) {
      Rfc2616.renderResource(cachedResource,multipleOutput);
      return;
    }
 else     if (fileResource != null) {
      Rfc2616.renderResource(fileResource,multipleOutput);
      return;
    }
 else     Rfc2616.renderResource(new NullResource(),multipleOutput);
  }
 catch (  Throwable t) {
    if (memoryOutput != null) {
      memoryOutput=null;
    }
    if (fileOutput != null)     fileOutput.delete();
    throw new ResponseException(httpUrl + ""String_Node_Str"",t);
  }
 finally {
    if (cachedResource != null)     cachedResource.release();
    if (memoryOutput != null)     cache.put(resourceContext,memoryOutput.toResource());
    if (httpResource != null)     httpResource.release();
    if (fileResource != null)     fileResource.release();
  }
}",0.6420857759950632
35805,"/** 
 * Selects the response to the request between a cache entry (if return code is 304) and the resource sent by the server (if return code is 200). Updates the cache.
 * @param resourceContext
 * @param cachedResponse
 * @param newResource
 * @return The response to send to the client
 * @throws HttpErrorPage
 */
public Resource select(ResourceContext resourceContext,CachedResponse cachedResponse,Resource newResource) throws HttpErrorPage {
  Resource result;
  if (newResource.getStatusCode() == HttpServletResponse.SC_NOT_MODIFIED) {
    String etag=newResource.getHeader(""String_Node_Str"");
    if (etag == null)     result=cachedResponse;
 else {
      result=findByEtag(etag);
      if (result == null)       throw new HttpErrorPage(HttpServletResponse.SC_PRECONDITION_FAILED,""String_Node_Str"",""String_Node_Str"");
    }
    updateHeaders(cachedResponse,newResource);
  }
 else {
    result=newResource;
  }
  return result;
}","/** 
 * Selects the response to the request between a cache entry (if return code is 304) and the resource sent by the server (if return code is 200). Updates the cache.
 * @param resourceContext
 * @param cachedResponse
 * @param newResource
 * @return The response to send to the client
 * @throws HttpErrorPage
 */
public Resource select(ResourceContext resourceContext,CachedResponse cachedResponse,Resource newResource) throws HttpErrorPage {
  Resource result=null;
  if (newResource.getStatusCode() == HttpServletResponse.SC_NOT_MODIFIED) {
    String etag=Rfc2616.getEtag(newResource);
    if (etag == null) {
      String sentIfModifiedSince=getIfModifiedSince(resourceContext,cachedResponse);
      if (sentIfModifiedSince != null) {
        if (!resourceContext.isNeededForTransformation() && sentIfModifiedSince.equals(resourceContext.getOriginalRequest().getHeader(""String_Node_Str"")))         result=newResource;
 else         result=cachedResponse;
      }
    }
 else {
      if (!resourceContext.isNeededForTransformation() && Rfc2616.etagMatches(resourceContext,newResource))       result=newResource;
 else       result=findByEtag(etag);
    }
    if (cachedResponse != null)     updateHeaders(cachedResponse,newResource);
    if (result == null) {
      LOG.warn(""String_Node_Str"" + resourceContext.isNeededForTransformation() + ""String_Node_Str""+ etag);
      throw new HttpErrorPage(HttpServletResponse.SC_PRECONDITION_FAILED,""String_Node_Str"",""String_Node_Str"");
    }
  }
 else {
    result=newResource;
  }
  return result;
}",0.6513872135102533
35806,"/** 
 * Returns the first matching cache entry for this request, this entry may be valid or stale but Etag must match If-None-Match header from the request and vary headers must be the same in the request and in the original request that caused this entry to get cached.
 * @param resourceContext
 * @return the first matching cache entry for this request
 */
public CachedResponse get(ResourceContext resourceContext){
  CachedResponse result=null;
  for (Iterator<CachedResponse> iterator=cachedResponses.values().iterator(); iterator.hasNext(); ) {
    CachedResponse cachedResponse=iterator.next();
    if (Rfc2616.matches(resourceContext,cachedResponse)) {
      result=cachedResponse;
      String key=getCacheKey(resourceContext,result);
      storage.touch(key);
      LOG.debug(""String_Node_Str"" + key + ""String_Node_Str""+ result);
    }
  }
  return result;
}","/** 
 * Returns the first matching cache entry for this request, this entry may be valid or stale but Etag must match If-None-Match header from the request and vary headers must be the same in the request and in the original request that caused this entry to get cached.
 * @param resourceContext
 * @return the first matching cache entry for this request
 */
public CachedResponse get(ResourceContext resourceContext){
  CachedResponse result=null;
  for (Iterator<CachedResponse> iterator=cachedResponses.values().iterator(); iterator.hasNext(); ) {
    CachedResponse cachedResponse=iterator.next();
    if (Rfc2616.matches(resourceContext,cachedResponse)) {
      result=cachedResponse;
      String key=getCacheKey(resourceContext,result);
      storage.touch(key);
      if (LOG.isDebugEnabled()) {
        LOG.debug(""String_Node_Str"" + key + ""String_Node_Str""+ result);
      }
    }
  }
  return result;
}",0.9753086419753086
35807,"private CachedResponse findByEtag(String etag){
  for (Iterator<CachedResponse> iterator=cachedResponses.values().iterator(); iterator.hasNext(); ) {
    CachedResponse cachedResponse=iterator.next();
    if (etag.equals(cachedResponse.getHeader(""String_Node_Str"")))     return cachedResponse;
  }
  return null;
}","private CachedResponse findByEtag(String etag){
  LOG.debug(""String_Node_Str"" + etag + ""String_Node_Str"");
  for (Iterator<CachedResponse> iterator=cachedResponses.values().iterator(); iterator.hasNext(); ) {
    CachedResponse cachedResponse=iterator.next();
    if (etag.equals(cachedResponse.getHeader(""String_Node_Str"")))     return cachedResponse;
  }
  return null;
}",0.9141193595342066
35808,"private String getIfNoneMatch(ResourceContext resourceContext){
  Set<String> etags=new HashSet<String>();
  if (resourceContext.isProxy() && !resourceContext.isNeededForTransformation()) {
    String ifNoneMatch=resourceContext.getOriginalRequest().getHeader(""String_Node_Str"");
    if (ifNoneMatch != null) {
      Matcher matcher=ETAG_PATTERN.matcher(ifNoneMatch);
      while (!matcher.hitEnd()) {
        if (matcher.find()) {
          etags.add(matcher.group(1));
        }
      }
    }
  }
  for (Iterator<CachedResponse> iterator=cachedResponses.values().iterator(); iterator.hasNext(); ) {
    CachedResponse cachedResponse=iterator.next();
    String etag=cachedResponse.getHeader(""String_Node_Str"");
    if (etag != null) {
      etags.add(etag);
    }
  }
  if (!etags.isEmpty()) {
    Iterator<String> iterator=etags.iterator();
    String etagsString=iterator.next();
    while (iterator.hasNext())     etagsString+=""String_Node_Str"" + iterator.next();
    return etagsString;
  }
  return null;
}","private String getIfNoneMatch(ResourceContext resourceContext){
  Set<String> etags=new HashSet<String>();
  if (resourceContext.isProxy() && !resourceContext.isNeededForTransformation()) {
    String ifNoneMatch=resourceContext.getOriginalRequest().getHeader(""String_Node_Str"");
    if (ifNoneMatch != null) {
      Matcher matcher=ETAG_PATTERN.matcher(ifNoneMatch);
      while (!matcher.hitEnd()) {
        if (matcher.find()) {
          etags.add(matcher.group(1));
        }
      }
    }
  }
  for (Iterator<CachedResponse> iterator=cachedResponses.values().iterator(); iterator.hasNext(); ) {
    CachedResponse cachedResponse=iterator.next();
    String etag=cachedResponse.getHeader(""String_Node_Str"");
    if (etag != null && cachedResponse.hasResponseBody()) {
      etags.add(etag);
    }
  }
  if (!etags.isEmpty()) {
    Iterator<String> iterator=etags.iterator();
    String etagsString=iterator.next();
    while (iterator.hasNext())     etagsString+=""String_Node_Str"" + iterator.next();
    return etagsString;
  }
  return null;
}",0.982541222114452
35809,"private String getIfModifiedSince(ResourceContext resourceContext,CachedResponse cachedResponse){
  String requestedIfModifiedSince=resourceContext.getOriginalRequest().getHeader(""String_Node_Str"");
  String cacheLastModified=cachedResponse.getHeader(""String_Node_Str"");
  Date requestedIfModifiedSinceDate=null;
  Date cacheLastModifiedDate=null;
  if (requestedIfModifiedSince != null) {
    try {
      requestedIfModifiedSinceDate=DateUtils.parseDate(requestedIfModifiedSince);
    }
 catch (    DateParseException e) {
      LOG.warn(""String_Node_Str"" + requestedIfModifiedSince);
      requestedIfModifiedSince=null;
    }
  }
  if (cacheLastModified != null) {
    try {
      cacheLastModifiedDate=DateUtils.parseDate(cacheLastModified);
    }
 catch (    DateParseException e) {
      LOG.warn(""String_Node_Str"" + cacheLastModified);
      cacheLastModified=null;
    }
  }
  if (resourceContext.isNeededForTransformation() || requestedIfModifiedSinceDate == null || (cacheLastModifiedDate != null && cacheLastModifiedDate.after(requestedIfModifiedSinceDate)))   requestedIfModifiedSince=cacheLastModified;
  return requestedIfModifiedSince;
}","private String getIfModifiedSince(ResourceContext resourceContext,CachedResponse cachedResponse){
  Date requestedIfModifiedSinceDate=Rfc2616.getDateHeader(resourceContext,""String_Node_Str"");
  Date cacheLastModifiedDate=null;
  if (cachedResponse != null && cachedResponse.hasResponseBody()) {
    cacheLastModifiedDate=Rfc2616.getDateHeader(cachedResponse,""String_Node_Str"");
    if (resourceContext.isNeededForTransformation() || requestedIfModifiedSinceDate == null || (cacheLastModifiedDate != null && cacheLastModifiedDate.after(requestedIfModifiedSinceDate)))     return cachedResponse.getHeader(""String_Node_Str"");
  }
  return resourceContext.getOriginalRequest().getHeader(""String_Node_Str"");
}",0.3092672413793103
35810,"public void put(ResourceContext resourceContext,CachedResponse resource){
  String key=getCacheKey(resourceContext,resource);
  cachedResponses.put(key,resource);
  storage.put(key,resource);
  LOG.debug(""String_Node_Str"" + key + ""String_Node_Str"");
}","public void put(ResourceContext resourceContext,CachedResponse resource){
  if (resource != null && resource.getStatusCode() != HttpServletResponse.SC_NOT_MODIFIED) {
    String key=getCacheKey(resourceContext,resource);
    cachedResponses.put(key,resource);
    storage.put(key,resource);
    LOG.debug(""String_Node_Str"" + key + ""String_Node_Str"");
  }
}",0.8270181219110379
35811,"public CachedResponse toResource(){
  CachedResponse result;
  if (out.isTooBig()) {
    result=new CachedResponse();
  }
 else {
    result=new CachedResponse(out.toByteArray(),getCharsetName(),getHeaders(),getStatusCode(),getStatusMessage());
  }
  out.clear();
  return result;
}","public CachedResponse toResource(){
  CachedResponse result;
  if (out.isTooBig()) {
    result=null;
  }
 else {
    result=new CachedResponse(out.toByteArray(),getCharsetName(),getHeaders(),getStatusCode(),getStatusMessage());
  }
  out.clear();
  return result;
}",0.95985401459854
35812,"public final static Date getDateHeader(Resource resource,String name){
  String dateString=resource.getHeader(name);
  if (dateString != null) {
    try {
      return DateUtils.parseDate(dateString);
    }
 catch (    DateParseException e) {
      LOG.warn(""String_Node_Str"" + dateString);
    }
  }
  return null;
}","public final static Date getDateHeader(ResourceContext resourceContext,String name){
  String dateString=resourceContext.getOriginalRequest().getHeader(name);
  return convertDate(dateString);
}",0.5714285714285714
35813,"public final static Date getExpiration(Resource resource){
  Date date=getDate(resource);
  if (date == null) {
    LOG.warn(""String_Node_Str"");
    return null;
  }
  Long maxAge=null;
  CacheControlResponseHeader cacheControl=CacheControlResponseHeader.parse(resource);
  if (cacheControl.maxAge != null)   maxAge=cacheControl.maxAge;
  if (cacheControl.sMaxAge != null)   maxAge=cacheControl.sMaxAge;
  if (maxAge != null) {
    return new Date(date.getTime() + maxAge.longValue());
  }
  Date expires=getDateHeader(resource,""String_Node_Str"");
  if (expires != null)   return expires;
  return null;
}","public final static Date getExpiration(Resource resource){
  Date date=getDate(resource);
  if (date == null) {
    LOG.warn(""String_Node_Str"");
    return null;
  }
  Long maxAge=null;
  CacheControlResponseHeader cacheControl=CacheControlResponseHeader.parse(resource);
  if (cacheControl != null) {
    if (cacheControl.maxAge != null)     maxAge=cacheControl.maxAge;
    if (cacheControl.sMaxAge != null)     maxAge=cacheControl.sMaxAge;
  }
  if (maxAge != null) {
    return new Date(date.getTime() + maxAge.longValue());
  }
  Date expires=getDateHeader(resource,""String_Node_Str"");
  if (expires != null)   return expires;
  return null;
}",0.9073482428115016
35814,"public boolean isTooBig(){
  return tooBig;
}","/** 
 * Returns true if the content written did not reach maxSize.
 * @return true if content size exceeds maxSize
 */
public boolean isTooBig(){
  return tooBig;
}",0.430622009569378
35815,"public MemoryOutput(int maxSize){
  out=new MemoryOutputStream(maxSize);
}","/** 
 * Creates a MemoryOuput with the given size limit. If content exceeds maxSize, the whole content is NOT written and the resource will remain empty.
 * @param maxSize Value &gt;=0. 0 means 'no limit'.
 */
public MemoryOutput(int maxSize){
  out=new MemoryOutputStream(maxSize);
}",0.4134078212290503
35816,"/** 
 * {@inheritDoc} 
 */
@Override public synchronized void write(byte[] b,int off,int len){
  if (!tooBig) {
    if ((count + len) > maxSize) {
      tooBig=true;
    }
 else {
      super.write(b,off,len);
    }
  }
}","/** 
 * {@inheritDoc} 
 */
@Override public synchronized void write(byte[] b,int off,int len){
  if (!tooBig) {
    if (maxSize != 0 && (count + len) > maxSize) {
      tooBig=true;
    }
 else {
      super.write(b,off,len);
    }
  }
}",0.8951965065502183
35817,"public MemoryOutputStream(int maxSize){
  this.maxSize=maxSize;
}","/** 
 * Creates a MemoryOutputStream with the given size limit. If content exceeds maxSize, the whole content is NOT written and the resource will remain empty.
 * @param maxSize Value &gt;=0. 0 means 'no limit'.
 */
public MemoryOutputStream(int maxSize){
  this.maxSize=maxSize;
}",0.3400576368876081
35818,"/** 
 * Finds next   {@linkplain Region} in content starting from provided<code>position</code>.
 * @return {@linkplain Result} object with next found {@linkplain Region}and its end position for further parsing or <code>null</code> if no more regions could not be found.
 */
protected Result find(String content,int position) throws AggregationSyntaxException {
  if (position >= content.length()) {
    return null;
  }
  final Template esiComment=Tag.findTemplate(""String_Node_Str"",Tag.WAT_END,content,position);
  final Template esi=Tag.findTemplate(""String_Node_Str"",""String_Node_Str"",content,position);
  final Template wat=Tag.findTemplate(Tag.WAT_START + ""String_Node_Str"",Tag.WAT_END,content,position);
  final Template first=findFirst(LAST,esiComment,esi,wat);
  if (LAST == first) {
    return new Result(new UnmodifiableRegion(content,position,content.length()),content.length());
  }
 else   if (first.getStart() > position) {
    return new Result(new UnmodifiableRegion(content,position,first.getStart()),first.getStart());
  }
 else   if (esiComment == first) {
    String inner=first.getContent();
    inner=inner.substring(""String_Node_Str"".length(),inner.length() - Tag.WAT_END.length());
    List<Region> parsed=doParse(inner);
    CompositeRegion result=new CompositeRegion();
    for (    Region child : parsed) {
      result.add(child);
    }
    return new Result(result,first.getEnd());
  }
 else   if (esi == first) {
    EsiIncludeTag esiTag=new EsiIncludeTag(first);
    return new Result(new IncludeBlockRegion(esiTag.getProvider(),esiTag.getPage(),null,propagateJsessionId),esiTag.getEnd());
  }
 else {
    Tag openTag=Tag.create(Tag.WAT_START,Tag.WAT_END,wat);
    if (openTag.countTokens() < 3 || openTag.countTokens() > 4)     throw new AggregationSyntaxException(""String_Node_Str"" + openTag);
    String provider=openTag.getToken(1);
    String page=openTag.getToken(2);
    String blockOrTemplate=(openTag.countTokens() == 4) ? openTag.getToken(3) : null;
    if (""String_Node_Str"".equals(openTag.getToken(0))) {
      Tag closeTag=Tag.findNext(""String_Node_Str"",content,openTag);
      if (closeTag == null || !""String_Node_Str"".equals(closeTag.getToken(0))) {
        closeTag=openTag;
      }
      return new Result(new IncludeBlockRegion(provider,page,blockOrTemplate,propagateJsessionId),closeTag.getEndIndex());
    }
 else     if (""String_Node_Str"".equals(openTag.getToken(0))) {
      Tag closeTag=Tag.findNext(""String_Node_Str"",content,openTag);
      return new Result(new IncludeTemplateRegion(provider,page,blockOrTemplate,propagateJsessionId,content.substring(openTag.getEndIndex(),closeTag.getBeginIndex())),closeTag.getEndIndex());
    }
 else {
      throw new AggregationSyntaxException(""String_Node_Str"" + openTag);
    }
  }
}","/** 
 * Finds next   {@linkplain Region} in content starting from provided<code>position</code>.
 * @return {@linkplain Result} object with next found {@linkplain Region}and its end position for further parsing or <code>null</code> if no more regions could not be found.
 */
protected Result find(String content,int position) throws AggregationSyntaxException {
  if (position >= content.length()) {
    return null;
  }
  final Template esiComment=findTemplate(""String_Node_Str"",""String_Node_Str"",content,position);
  final Template esiInclude=findTemplate(""String_Node_Str"",""String_Node_Str"",content,position);
  final Tag includeBlockTag=Tag.find(""String_Node_Str"",content,position);
  final Tag includeTemplateTag=Tag.find(""String_Node_Str"",content,position);
  int firstPosition=Integer.MAX_VALUE;
  if (esiComment != null)   firstPosition=esiComment.getStart();
  if (esiInclude != null && esiInclude.getStart() < firstPosition)   firstPosition=esiInclude.getStart();
  if (includeBlockTag != null && includeBlockTag.getBeginIndex() < firstPosition)   firstPosition=includeBlockTag.getBeginIndex();
  if (includeTemplateTag != null && includeTemplateTag.getBeginIndex() < firstPosition)   firstPosition=includeTemplateTag.getBeginIndex();
  if (firstPosition == Integer.MAX_VALUE) {
    return new Result(new UnmodifiableRegion(content,position,content.length()),content.length());
  }
 else   if (firstPosition > position) {
    return new Result(new UnmodifiableRegion(content,position,firstPosition),firstPosition);
  }
 else   if (esiComment != null && esiComment.getStart() == firstPosition) {
    String inner=esiComment.getContent();
    inner=inner.substring(""String_Node_Str"".length(),inner.length() - ""String_Node_Str"".length());
    List<Region> parsed=doParse(inner);
    CompositeRegion result=new CompositeRegion();
    for (    Region child : parsed) {
      result.add(child);
    }
    return new Result(result,esiComment.getEnd());
  }
 else   if (esiInclude != null && esiInclude.getStart() == firstPosition) {
    EsiIncludeTag esiTag=new EsiIncludeTag(esiInclude);
    return new Result(new IncludeBlockRegion(esiTag.getProvider(),esiTag.getPage(),null,propagateJsessionId),esiTag.getEnd());
  }
 else   if (includeBlockTag != null && includeBlockTag.getBeginIndex() == firstPosition) {
    if (includeBlockTag.countTokens() < 3 || includeBlockTag.countTokens() > 4)     throw new AggregationSyntaxException(""String_Node_Str"" + includeBlockTag);
    String provider=includeBlockTag.getToken(1);
    String page=includeBlockTag.getToken(2);
    String block=(includeBlockTag.countTokens() == 4) ? includeBlockTag.getToken(3) : null;
    Tag closeTag=Tag.find(""String_Node_Str"",content,includeBlockTag.getEndIndex());
    if (closeTag == null)     closeTag=includeBlockTag;
    return new Result(new IncludeBlockRegion(provider,page,block,propagateJsessionId),closeTag.getEndIndex());
  }
 else   if (includeTemplateTag != null && includeTemplateTag.getBeginIndex() == firstPosition) {
    if (includeTemplateTag.countTokens() < 3 || includeTemplateTag.countTokens() > 4)     throw new AggregationSyntaxException(""String_Node_Str"" + includeTemplateTag);
    String provider=includeTemplateTag.getToken(1);
    String page=includeTemplateTag.getToken(2);
    String template=(includeTemplateTag.countTokens() == 4) ? includeTemplateTag.getToken(3) : null;
    Tag closeTag=Tag.find(""String_Node_Str"",content,includeTemplateTag.getEndIndex());
    if (closeTag == null)     closeTag=includeTemplateTag;
    return new Result(new IncludeTemplateRegion(provider,page,template,propagateJsessionId,content.substring(includeTemplateTag.getEndIndex(),closeTag.getBeginIndex())),closeTag.getEndIndex());
  }
  return null;
}",0.4136767862618828
35819,"/** 
 * Extracts parameters from provided <code>content</code>. <p> Searches for tags: <ul> <li>&lt;!--$beginput$name$--&gt;</li> <li>&lt;!--$endput$--&gt;</li> </ul>
 */
protected Map<String,String> parseParameters(String content) throws AggregationSyntaxException {
  Map<String,String> result=new HashMap<String,String>();
  Tag openTag=Tag.find(""String_Node_Str"",content);
  while (openTag != null) {
    if (openTag.countTokens() != 2)     throw new AggregationSyntaxException(""String_Node_Str"" + openTag);
    Tag closeTag=Tag.findNext(""String_Node_Str"",content,openTag);
    if (closeTag == null)     throw new AggregationSyntaxException(""String_Node_Str"" + openTag);
    String paramName=openTag.getToken(1);
    result.put(paramName,content.substring(openTag.getEndIndex(),closeTag.getBeginIndex()));
    openTag=Tag.findNext(""String_Node_Str"",content,closeTag);
  }
  return result;
}","/** 
 * Extracts parameters from provided <code>content</code>. <p> Searches for tags: <ul> <li>&lt;!--$beginput$name$--&gt;</li> <li>&lt;!--$endput$--&gt;</li> </ul>
 */
protected Map<String,String> parseParameters(String content) throws AggregationSyntaxException {
  Map<String,String> result=new HashMap<String,String>();
  Tag openTag=Tag.find(""String_Node_Str"",content);
  while (openTag != null) {
    if (openTag.countTokens() != 2)     throw new AggregationSyntaxException(""String_Node_Str"" + openTag);
    Tag closeTag=Tag.find(""String_Node_Str"",content,openTag.getEndIndex());
    if (closeTag == null)     throw new AggregationSyntaxException(""String_Node_Str"" + openTag);
    String paramName=openTag.getToken(1);
    result.put(paramName,content.substring(openTag.getEndIndex(),closeTag.getBeginIndex()));
    openTag=Tag.find(""String_Node_Str"",content,closeTag.getEndIndex());
  }
  return result;
}",0.9800884955752212
35820,"@Override protected void service(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
  String relUrl=request.getServletPath();
  if (request.getPathInfo() != null)   relUrl+=request.getPathInfo();
  boolean propagateJsessionId=response.encodeURL(""String_Node_Str"").contains(""String_Node_Str"");
  DriverFactory.getInstance(provider).proxy(relUrl,request,response,propagateJsessionId);
}","@Override protected void service(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
  String relUrl=request.getRequestURI();
  relUrl=relUrl.substring(request.getContextPath().length());
  boolean propagateJsessionId=response.encodeURL(""String_Node_Str"").contains(""String_Node_Str"");
  DriverFactory.getInstance(provider).proxy(relUrl,request,response,propagateJsessionId);
}",0.8480565371024735
35821,"@Override protected void service(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
  String relUrl=request.getServletPath();
  if (request.getPathInfo() != null)   relUrl+=request.getPathInfo();
  boolean propagateJsessionId=response.encodeURL(""String_Node_Str"").contains(""String_Node_Str"");
  try {
    DriverFactory.getInstance(provider).aggregate(relUrl,request,response,propagateJsessionId);
  }
 catch (  RenderingException e) {
    throw new ServletException(e);
  }
}","@Override protected void service(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
  String relUrl=request.getRequestURI();
  relUrl=relUrl.substring(request.getContextPath().length());
  boolean propagateJsessionId=response.encodeURL(""String_Node_Str"").contains(""String_Node_Str"");
  try {
    DriverFactory.getInstance(provider).aggregate(relUrl,request,response,propagateJsessionId);
  }
 catch (  RenderingException e) {
    throw new ServletException(e);
  }
}",0.8671193016488846
35822,"/** 
 * {@inheritDoc} 
 */
public void render(StringOutput stringOutput,Writer unised1,Map<String,String> unused2) throws IOException, RenderingException {
  if (stringOutput.getStatusCode() == HttpServletResponse.SC_MOVED_PERMANENTLY || stringOutput.getStatusCode() == HttpServletResponse.SC_MOVED_TEMPORARILY) {
    response.setStatus(stringOutput.getStatusCode());
    response.setHeader(""String_Node_Str"",stringOutput.getLocation());
    return;
  }
  stringOutput.copyHeaders(response);
  String content=stringOutput.toString();
  if (content == null)   return;
  OutputStream out=response.getOutputStream();
  Writer writer=new OutputStreamWriter(out,stringOutput.getCharsetName());
  IRegionParser parser=createParser();
  List<IRegion> parsed=parser.parse(content);
  for (  IRegion region : parsed) {
    try {
      region.process(writer,request);
    }
 catch (    RetrieveException e) {
      writer.append(e.getStatusCode() + ""String_Node_Str"" + e.getStatusMessage());
    }
  }
  writer.flush();
}","/** 
 * {@inheritDoc} 
 */
public void render(StringOutput stringOutput,Writer unised1,Map<String,String> unused2) throws IOException, RenderingException {
  response.setStatus(stringOutput.getStatusCode());
  if (stringOutput.getStatusCode() == HttpServletResponse.SC_MOVED_PERMANENTLY || stringOutput.getStatusCode() == HttpServletResponse.SC_MOVED_TEMPORARILY) {
    response.setHeader(""String_Node_Str"",stringOutput.getLocation());
    return;
  }
  stringOutput.copyHeaders(response);
  String content=stringOutput.toString();
  if (content == null)   return;
  OutputStream out=response.getOutputStream();
  Writer writer=new OutputStreamWriter(out,stringOutput.getCharsetName());
  IRegionParser parser=createParser();
  List<IRegion> parsed=parser.parse(content);
  for (  IRegion region : parsed) {
    try {
      region.process(writer,request);
    }
 catch (    RetrieveException e) {
      writer.append(e.getStatusCode() + ""String_Node_Str"" + e.getStatusMessage());
    }
  }
  writer.flush();
}",0.9475247524752476
35823,"/** 
 * Compares a response to a file
 * @param relativePath Relative path of a folder on the server
 * @throws Exception In case of a problem
 */
public void assertBodyEqualsLocalFile(String relativePath) throws Exception {
  String directoryPrefix=getReferenceFilePath(relativePath);
  File file=new File(directoryPrefix);
  HttpTestCase.log.info(""String_Node_Str"" + file.getPath());
  ByteArrayOutputStream baos=new ByteArrayOutputStream();
  InputStream stream=new FileInputStream(file);
  byte[] buffer=new byte[1024];
  while (stream.available() > 0) {
    int read=stream.read(buffer);
    baos.write(buffer,0,read);
  }
  stream.close();
  byte[] data=baos.toByteArray();
  if (!Arrays.equals(httpMethod.getResponseBody(),data)) {
    String charset;
    Header[] contentTypes=httpMethod.getRequestHeaders(""String_Node_Str"");
    if (contentTypes.length > 0 && contentTypes[0].getValue().toLowerCase().contains(""String_Node_Str""))     charset=""String_Node_Str"";
 else     charset=""String_Node_Str"";
    String expected=new String(data,charset);
    String actual=new String(httpMethod.getResponseBody(),charset);
    int index=0;
    int size=Math.min(expected.length(),actual.length());
    int line=1;
    int character=1;
    String expectedLine=""String_Node_Str"";
    String actualLine=""String_Node_Str"";
    while (index < size) {
      if (expected.charAt(index) == '\n' && actual.charAt(index) == '\n') {
        line++;
        character=1;
        expectedLine=""String_Node_Str"";
        actualLine=""String_Node_Str"";
      }
 else {
        character++;
        expectedLine+=expected.charAt(index);
        actualLine+=actual.charAt(index);
      }
      if (expected.charAt(index) != actual.charAt(index)) {
        String message=""String_Node_Str"" + getMethodURI() + ""String_Node_Str"";
        message+=""String_Node_Str"" + line + ""String_Node_Str""+ character+ ""String_Node_Str"";
        index++;
        while (expected.charAt(index) != '\n' && actual.charAt(index) != '\n' && index < size) {
          expectedLine+=expected.charAt(index);
          actualLine+=actual.charAt(index);
          index++;
        }
        message+=""String_Node_Str"" + expectedLine + ""String_Node_Str"";
        message+=""String_Node_Str"" + actualLine + ""String_Node_Str"";
        throw new AssertionFailedError(message);
      }
      index++;
    }
  }
}","/** 
 * Compares a response to a file
 * @param relativePath Relative path of a folder on the server
 * @throws Exception In case of a problem
 */
public void assertBodyEqualsLocalFile(String relativePath) throws Exception {
  String directoryPrefix=getReferenceFilePath(relativePath);
  File file=new File(directoryPrefix);
  HttpTestCase.log.info(""String_Node_Str"" + file.getPath());
  ByteArrayOutputStream baos=new ByteArrayOutputStream();
  InputStream stream=new FileInputStream(file);
  byte[] buffer=new byte[1024];
  while (stream.available() > 0) {
    int read=stream.read(buffer);
    baos.write(buffer,0,read);
  }
  stream.close();
  byte[] data=baos.toByteArray();
  if (!Arrays.equals(httpMethod.getResponseBody(),data)) {
    String charset;
    Header[] contentTypes=httpMethod.getRequestHeaders(""String_Node_Str"");
    if (contentTypes.length > 0 && contentTypes[0].getValue().toLowerCase().contains(""String_Node_Str""))     charset=""String_Node_Str"";
 else     charset=""String_Node_Str"";
    String expected=new String(data,charset);
    String actual=new String(httpMethod.getResponseBody(),charset);
    int index=0;
    int size=Math.min(expected.length(),actual.length());
    int line=1;
    int character=1;
    String expectedLine=""String_Node_Str"";
    String actualLine=""String_Node_Str"";
    while (index < size) {
      if (expected.charAt(index) == '\n' && actual.charAt(index) == '\n') {
        line++;
        character=1;
        expectedLine=""String_Node_Str"";
        actualLine=""String_Node_Str"";
      }
 else {
        character++;
        expectedLine+=expected.charAt(index);
        actualLine+=actual.charAt(index);
      }
      if (expected.charAt(index) != actual.charAt(index)) {
        String message=""String_Node_Str"" + getMethodURI() + ""String_Node_Str"";
        message+=""String_Node_Str"" + line + ""String_Node_Str""+ character+ ""String_Node_Str"";
        index++;
        while (expected.charAt(index) != '\n' && actual.charAt(index) != '\n' && index < size) {
          expectedLine+=expected.charAt(index);
          actualLine+=actual.charAt(index);
          index++;
        }
        message+=""String_Node_Str"" + expectedLine + ""String_Node_Str"";
        message+=""String_Node_Str"" + actualLine + ""String_Node_Str"";
        message+=actual;
        throw new AssertionFailedError(message);
      }
      index++;
    }
  }
}",0.9947268508753428
35824,"/** 
 * Retrieves a resource from the provider application and transforms it using the Renderer passed as a parameter. On of the Renderers that can be used is the AggregateRenderer that parses the html pages to find tags to be replaced by contents from other providers. Sample syntax used for includes : <ul> <li>&lt;!--$includeblock$provider$page$blockname$--&gt;</li> <li>&lt;!--$beginincludetemplate$provider$page$templatename$--&gt;</li> <li>&lt;!--$beginput$name$--&gt;</li> </ul> Sample syntax used inside included contents for template and block definition : <ul> <li>&lt;!--$beginblock$name$--&gt;</li> <li>&lt;!--$begintemplate$name$--&gt;</li> <li>&lt;!--$beginparam$name$--&gt;</li> </ul> Aggregation is always in ""proxy mode"" that means cookies or parameters from the original request are transmitted to the target server. <br/> <b>NB: Cookies and parameters are not transmitted to templates or blocks invoked by the page</b>.
 * @param relUrl the relative URL to the resource
 * @param request the request
 * @param response the response
 * @param propagateJsessionId indicates whether <code>jsessionid</code> should be propagated or just removed from generated output
 * @param renderer the renderer to use to transform the output or null if no transformation to apply
 * @throws IOException If an IOException occurs while writing to the response
 * @throws HttpErrorPage If the page contains incorrect tags
 */
public final void proxy(String relUrl,HttpServletRequest request,HttpServletResponse response,boolean propagateJsessionId,Renderer renderer) throws IOException, HttpErrorPage {
  RequestContext requestContext=new RequestContext(this,relUrl,null,request,propagateJsessionId,true);
  request.setCharacterEncoding(config.getUriEncoding());
  requestContext.setProxyMode(true);
  if (renderer == null) {
    renderResource(requestContext,new ResponseOutput(request,response));
  }
 else {
    TextOnlyStringOutput textOutput=new TextOnlyStringOutput(request,response);
    renderResource(requestContext,textOutput);
    if (!textOutput.hasTextBuffer()) {
      Driver.LOG.debug(""String_Node_Str"" + relUrl + ""String_Node_Str"");
      return;
    }
    Driver.LOG.debug(""String_Node_Str"" + relUrl + ""String_Node_Str"");
    renderer.render(textOutput.toString(),response.getWriter());
  }
}","/** 
 * Retrieves a resource from the provider application and transforms it using the Renderer passed as a parameter. On of the Renderers that can be used is the AggregateRenderer that parses the html pages to find tags to be replaced by contents from other providers. Sample syntax used for includes : <ul> <li>&lt;!--$includeblock$provider$page$blockname$--&gt;</li> <li>&lt;!--$beginincludetemplate$provider$page$templatename$--&gt;</li> <li>&lt;!--$beginput$name$--&gt;</li> </ul> Sample syntax used inside included contents for template and block definition : <ul> <li>&lt;!--$beginblock$name$--&gt;</li> <li>&lt;!--$begintemplate$name$--&gt;</li> <li>&lt;!--$beginparam$name$--&gt;</li> </ul> Aggregation is always in ""proxy mode"" that means cookies or parameters from the original request are transmitted to the target server. <br/> <b>NB: Cookies and parameters are not transmitted to templates or blocks invoked by the page</b>.
 * @param relUrl the relative URL to the resource
 * @param request the request
 * @param response the response
 * @param propagateJsessionId indicates whether <code>jsessionid</code> should be propagated or just removed from generated output
 * @param renderer the renderer to use to transform the output or null if no transformation to apply
 * @throws IOException If an IOException occurs while writing to the response
 * @throws HttpErrorPage If the page contains incorrect tags
 */
public final void proxy(String relUrl,HttpServletRequest request,HttpServletResponse response,boolean propagateJsessionId,Renderer renderer) throws IOException, HttpErrorPage {
  RequestContext requestContext=new RequestContext(this,relUrl,null,request,propagateJsessionId,true);
  request.setCharacterEncoding(config.getUriEncoding());
  requestContext.setProxyMode(true);
  if (renderer == null) {
    renderResource(requestContext,new ResponseOutput(request,response));
  }
 else {
    TextOnlyStringOutput textOutput=new TextOnlyStringOutput(request,response);
    renderResource(requestContext,textOutput);
    if (!textOutput.hasTextBuffer()) {
      LOG.debug(""String_Node_Str"" + relUrl + ""String_Node_Str"");
      return;
    }
    LOG.debug(""String_Node_Str"" + relUrl + ""String_Node_Str"");
    String charsetName=textOutput.getCharsetName();
    Writer writer;
    if (charsetName == null)     writer=new OutputStreamWriter(response.getOutputStream());
 else     writer=new OutputStreamWriter(response.getOutputStream(),charsetName);
    renderer.render(textOutput.toString(),writer);
    writer.flush();
  }
}",0.9291306139266584
35825,"@Override public String toString(){
  try {
    return byteArrayOutputStream.toString(getCharsetName());
  }
 catch (  UnsupportedEncodingException e) {
    throw new OutputException(e);
  }
}","@Override public String toString(){
  String charsetName=getCharsetName();
  if (charsetName == null)   charsetName=""String_Node_Str"";
  try {
    return byteArrayOutputStream.toString(charsetName);
  }
 catch (  UnsupportedEncodingException e) {
    throw new OutputException(e);
  }
}",0.7364016736401674
35826,"@Override public String toString(){
  try {
    return byteArrayOutputStream.toString(getCharsetName());
  }
 catch (  UnsupportedEncodingException e) {
    throw new OutputException(e);
  }
}","@Override public String toString(){
  String charsetName=getCharsetName();
  if (charsetName == null)   charsetName=""String_Node_Str"";
  try {
    return byteArrayOutputStream.toString(charsetName);
  }
 catch (  UnsupportedEncodingException e) {
    throw new OutputException(e);
  }
}",0.7364016736401674
35827,"public void testPost() throws Exception {
  HashMap<String,String> params=new HashMap<String,String>();
  params.put(""String_Node_Str"",""String_Node_Str"");
  doPost(""String_Node_Str"",params,""String_Node_Str"");
  assertStatus(HttpServletResponse.SC_OK);
  assertBodyEqualsLocalFile(""String_Node_Str"");
}","public void testPost() throws Exception {
  HashMap<String,String> params=new HashMap<String,String>();
  String eacute=new String(new byte[]{(byte)0xC3,(byte)0xA9},""String_Node_Str"");
  params.put(""String_Node_Str"",eacute);
  doPost(""String_Node_Str"",params,""String_Node_Str"");
  assertStatus(HttpServletResponse.SC_OK);
  assertBodyEqualsLocalFile(""String_Node_Str"");
}",0.8452380952380952
35828,"@Override public void render(Output output) throws IOException {
  output.setStatus(statusCode,statusText);
  copyHeaders(httpMethod,output,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  Header header=httpMethod.getResponseHeader(""String_Node_Str"");
  if (header != null) {
    String location=header.getValue();
    String originalBase=target.getOriginalRequest().getScheme() + ""String_Node_Str"" + target.getOriginalRequest().getServerName()+ ""String_Node_Str""+ target.getOriginalRequest().getServerPort()+ target.getOriginalRequest().getContextPath()+ target.getOriginalRequest().getServletPath();
    if (target.getOriginalRequest().getPathInfo() != null)     originalBase+=target.getOriginalRequest().getPathInfo();
    int pos=originalBase.indexOf(target.getRelUrl());
    originalBase=originalBase.substring(0,pos + 1);
    location=location.replaceFirst(target.getDriver().getBaseURL(),originalBase);
    output.addHeader(header.getName(),location);
  }
  String charset=httpMethod.getResponseCharSet();
  if (charset != null)   output.setCharsetName(charset);
  try {
    output.open();
    if (exception != null) {
      output.write(statusText);
    }
 else {
      Handler handler=createHandler();
      handler.handle(httpMethod.getResponseBodyAsStream(),output);
    }
  }
  finally {
    output.close();
  }
}","@Override public void render(Output output) throws IOException {
  output.setStatus(statusCode,statusText);
  copyHeaders(httpMethod,output,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  Header header=httpMethod.getResponseHeader(""String_Node_Str"");
  if (header != null) {
    String location=header.getValue();
    String originalBase=target.getOriginalRequest().getScheme() + ""String_Node_Str"" + target.getOriginalRequest().getServerName()+ ""String_Node_Str""+ target.getOriginalRequest().getServerPort()+ target.getOriginalRequest().getContextPath()+ target.getOriginalRequest().getServletPath();
    if (target.getOriginalRequest().getPathInfo() != null)     originalBase+=target.getOriginalRequest().getPathInfo();
    int pos=originalBase.indexOf(target.getRelUrl());
    originalBase=originalBase.substring(0,pos + 1);
    location=location.replaceFirst(target.getDriver().getBaseURL(),originalBase);
    output.addHeader(header.getName(),location);
  }
  String charset=httpMethod.getResponseCharSet();
  if (charset != null)   output.setCharsetName(charset);
  try {
    output.open();
    if (exception != null) {
      output.write(statusText);
    }
 else {
      Handler handler=createHandler();
      handler.handle(httpMethod.getResponseBodyAsStream(),output);
    }
  }
  finally {
    output.close();
  }
}",0.9804205946337926
35829,"/** 
 * Copy all the headers to the response
 */
private void copyHeaders(){
  for (Iterator<Map.Entry<Object,Object>> headersIterator=getHeaders().entrySet().iterator(); headersIterator.hasNext(); ) {
    Map.Entry<Object,Object> entry=headersIterator.next();
    if (!""String_Node_Str"".equalsIgnoreCase(entry.getKey().toString()))     response.setHeader(entry.getKey().toString(),entry.getValue().toString());
  }
}","/** 
 * Copy all the headers to the response
 */
private void copyHeaders(){
  for (Iterator<Map.Entry<Object,Object>> headersIterator=getHeaders().entrySet().iterator(); headersIterator.hasNext(); ) {
    Map.Entry<Object,Object> entry=headersIterator.next();
    response.setHeader(entry.getKey().toString(),entry.getValue().toString());
  }
}",0.905511811023622
35830,"/** 
 * {@inheritDoc} 
 */
@Override public void open(){
  String ifModifiedSince=request.getHeader(""String_Node_Str"");
  String ifNoneMatch=request.getHeader(""String_Node_Str"");
  if ((ifModifiedSince != null && ifModifiedSince.equals(getHeader(""String_Node_Str""))) || (ifNoneMatch != null && ifNoneMatch.equals(getHeader(""String_Node_Str"")))) {
    response.setStatus(HttpServletResponse.SC_NOT_MODIFIED);
  }
 else {
    response.setStatus(getStatusCode());
    response.setCharacterEncoding(getCharsetName());
    try {
      copyHeaders();
      outputStream=response.getOutputStream();
    }
 catch (    IOException e) {
      throw new OutputException(e);
    }
  }
}","/** 
 * {@inheritDoc} 
 */
@Override public void open(){
  String ifModifiedSince=request.getHeader(""String_Node_Str"");
  String ifNoneMatch=request.getHeader(""String_Node_Str"");
  if ((ifModifiedSince != null && ifModifiedSince.equals(getHeader(""String_Node_Str""))) || (ifNoneMatch != null && ifNoneMatch.equals(getHeader(""String_Node_Str"")))) {
    response.setStatus(HttpServletResponse.SC_NOT_MODIFIED);
  }
 else {
    response.setStatus(getStatusCode());
    try {
      copyHeaders();
      outputStream=response.getOutputStream();
    }
 catch (    IOException e) {
      throw new OutputException(e);
    }
  }
}",0.9590733590733592
35831,"/** 
 * {@inheritDoc} 
 */
public void render(StringOutput stringOutput,Writer unised1,Map<String,String> unused2) throws IOException, RenderingException {
  if (stringOutput.getStatusCode() == HttpServletResponse.SC_MOVED_PERMANENTLY || stringOutput.getStatusCode() == HttpServletResponse.SC_MOVED_TEMPORARILY) {
    response.setStatus(stringOutput.getStatusCode());
    response.setHeader(""String_Node_Str"",stringOutput.getLocation());
    return;
  }
  stringOutput.copyHeaders(response);
  String content=stringOutput.toString();
  if (content == null)   return;
  response.setCharacterEncoding(stringOutput.getCharsetName());
  Writer writer=response.getWriter();
  IRegionParser parser=createParser();
  List<IRegion> parsed=parser.parse(content);
  for (  IRegion region : parsed) {
    try {
      region.process(writer,request);
    }
 catch (    RetrieveException e) {
      writer.append(e.getStatusCode() + ""String_Node_Str"" + e.getStatusMessage());
    }
  }
}","/** 
 * {@inheritDoc} 
 */
public void render(StringOutput stringOutput,Writer unised1,Map<String,String> unused2) throws IOException, RenderingException {
  if (stringOutput.getStatusCode() == HttpServletResponse.SC_MOVED_PERMANENTLY || stringOutput.getStatusCode() == HttpServletResponse.SC_MOVED_TEMPORARILY) {
    response.setStatus(stringOutput.getStatusCode());
    response.setHeader(""String_Node_Str"",stringOutput.getLocation());
    return;
  }
  stringOutput.copyHeaders(response);
  String content=stringOutput.toString();
  if (content == null)   return;
  OutputStream out=response.getOutputStream();
  Writer writer=new OutputStreamWriter(out,stringOutput.getCharsetName());
  IRegionParser parser=createParser();
  List<IRegion> parsed=parser.parse(content);
  for (  IRegion region : parsed) {
    try {
      region.process(writer,request);
    }
 catch (    RetrieveException e) {
      writer.append(e.getStatusCode() + ""String_Node_Str"" + e.getStatusMessage());
    }
  }
  writer.flush();
}",0.8981854838709677
35832,"/** 
 * Retrieves a template from the provider application and renders it to the writer replacing the parameters with the given map. If ""name"" param is null, the whole page will be used as the template.<br /> eg: The template ""mytemplate"" can be delimited in the provider page by comments ""&lt;!--$begintemplate$mytemplate$--&gt;"" and ""&lt;!--$endtemplate$mytemplate$--&gt;"".<br /> Inside the template, the parameters can be defined by comments.<br /> eg: parameter named ""myparam"" should be delimited by comments ""&lt;!--$beginparam$myparam$--&gt;"" and ""&lt;!--$endparam$myparam$--&gt;""
 * @param page Address of the page containing the template
 * @param name Template name
 * @param writer Writer where to write the result
 * @param originalRequest originating request object
 * @param params Blocks to replace inside the template
 * @param replaceRules The replace rules to be applied on the block
 * @param parameters Parameters to be added to the request (TODO: unused???)
 * @param propagateJsessionId indicates whether <code>jsessionid</code>should be propagated or just removed from generated output
 * @throws IOException If an IOException occurs while writing to the writer
 * @throws RenderingException If an Exception occurs while retrieving thetemplate
 */
public void renderTemplate(String page,String name,Writer writer,HttpServletRequest originalRequest,Map<String,String> params,Map<String,String> replaceRules,Map<String,String> parameters,boolean propagateJsessionId) throws IOException, RenderingException {
  RequestContext target=new RequestContext(this,page,params,originalRequest,propagateJsessionId);
  StringOutput stringOutput=getResourceAsString(target);
  Renderer renderer=new TemplateRenderer(name,params,page);
  renderer.render(stringOutput,writer,replaceRules);
}","/** 
 * Retrieves a template from the provider application and renders it to the writer replacing the parameters with the given map. If ""name"" param is null, the whole page will be used as the template.<br /> eg: The template ""mytemplate"" can be delimited in the provider page by comments ""&lt;!--$begintemplate$mytemplate$--&gt;"" and ""&lt;!--$endtemplate$mytemplate$--&gt;"".<br /> Inside the template, the parameters can be defined by comments.<br /> eg: parameter named ""myparam"" should be delimited by comments ""&lt;!--$beginparam$myparam$--&gt;"" and ""&lt;!--$endparam$myparam$--&gt;""
 * @param page Address of the page containing the template
 * @param name Template name
 * @param writer Writer where to write the result
 * @param originalRequest originating request object
 * @param params Blocks to replace inside the template
 * @param replaceRules The replace rules to be applied on the block
 * @param parameters Parameters to be added to the request (TODO: unused???)
 * @param propagateJsessionId indicates whether <code>jsessionid</code>should be propagated or just removed from generated output
 * @throws IOException If an IOException occurs while writing to the writer
 * @throws RenderingException If an Exception occurs while retrieving thetemplate
 */
public void renderTemplate(String page,String name,Writer writer,HttpServletRequest originalRequest,Map<String,String> params,Map<String,String> replaceRules,Map<String,String> parameters,boolean propagateJsessionId) throws IOException, RenderingException {
  RequestContext target=new RequestContext(this,page,parameters,originalRequest,propagateJsessionId);
  StringOutput stringOutput=getResourceAsString(target);
  Renderer renderer=new TemplateRenderer(name,params,page);
  renderer.render(stringOutput,writer,replaceRules);
}",0.9988888888888888
35833,"/** 
 * {@inheritDoc} 
 */
@Override public void close() throws IOException {
  for (  OutputStream out : dest) {
    out.close();
  }
}","/** 
 * {@inheritDoc} 
 */
@Override public void close() throws IOException {
  super.close();
  next.close();
}",0.7661290322580645
35834,"/** 
 * {@inheritDoc} 
 */
@Override public void write(byte[] b,int off,int len) throws IOException {
  for (  OutputStream out : dest) {
    out.write(b,off,len);
  }
}","/** 
 * {@inheritDoc} 
 */
@Override public void write(byte[] b,int off,int len) throws IOException {
  out.write(b,off,len);
  next.write(b,off,len);
}",0.8099688473520249
35835,"@Override public void open(){
  for (  Output output : outputs) {
    copyHeaders(output);
    output.setStatus(getStatusCode(),getStatusMessage());
    output.setCharsetName(getCharsetName());
    output.open();
  }
  output=new MultipleOutputStream(outputs);
}","@Override public void open(){
  for (  Output output : outputs) {
    copyHeaders(output);
    output.setStatus(getStatusCode(),getStatusMessage());
    output.setCharsetName(getCharsetName());
    output.open();
  }
  output=ChainedOutputStream.createChain(outputs);
}",0.9416195856873822
35836,"public HttpResource(HttpClient httpClient,String baseUrl,Target target){
  this.target=target;
  HttpState httpState=null;
  if (target.getContext() != null)   httpState=target.getContext().getHttpState();
  if (""String_Node_Str"".equalsIgnoreCase(target.getMethod()) || !target.isProxyMode()) {
    url=ResourceUtils.getHttpUrlWithQueryString(baseUrl,target);
    httpMethod=new GetMethod(url);
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(target.getMethod())) {
    url=ResourceUtils.getHttpUrl(baseUrl,target);
    PostMethod postMethod=new PostMethod(url);
    Context context=target.getContext();
    Map<String,String> parameters=target.getParameters();
    if (context != null) {
      for (      Map.Entry<String,String> temp : context.getParameterMap().entrySet()) {
        postMethod.addParameter(new NameValuePair(temp.getKey(),temp.getValue()));
      }
    }
    if (parameters != null) {
      for (      Map.Entry<String,String> temp : parameters.entrySet()) {
        postMethod.addParameter(new NameValuePair(temp.getKey(),temp.getValue()));
      }
    }
    if (target.getOriginalRequest() != null) {
      for (      Object obj : target.getOriginalRequest().getParameterMap().entrySet()) {
        @SuppressWarnings(""String_Node_Str"") Entry<String,String[]> entry=(Entry<String,String[]>)obj;
        for (int i=0; i < entry.getValue().length; i++) {
          postMethod.addParameter(new NameValuePair(entry.getKey(),(entry.getValue())[i]));
        }
      }
    }
    httpMethod=postMethod;
  }
 else {
    throw new UnsupportedHttpMethodException(target.getMethod() + ""String_Node_Str"" + ResourceUtils.getHttpUrl(baseUrl,target));
  }
  if (target.isProxyMode()) {
    httpMethod.setFollowRedirects(false);
  }
 else {
    httpMethod.setFollowRedirects(true);
  }
  try {
    httpClient.executeMethod(httpClient.getHostConfiguration(),httpMethod,httpState);
    statusCode=httpMethod.getStatusCode();
    statusText=httpMethod.getStatusText();
    if (statusCode != HttpServletResponse.SC_OK && statusCode != HttpServletResponse.SC_MOVED_TEMPORARILY && statusCode != HttpServletResponse.SC_MOVED_PERMANENTLY)     log.warn(""String_Node_Str"" + url + ""String_Node_Str""+ statusCode+ ""String_Node_Str""+ statusText);
  }
 catch (  ConnectTimeoutException e) {
    statusCode=HttpServletResponse.SC_GATEWAY_TIMEOUT;
    statusText=""String_Node_Str"" + url;
    log.warn(""String_Node_Str"" + url);
  }
catch (  SocketTimeoutException e) {
    statusCode=HttpServletResponse.SC_GATEWAY_TIMEOUT;
    statusText=""String_Node_Str"" + url;
    log.warn(""String_Node_Str"" + url);
  }
catch (  HttpException e) {
    statusCode=HttpServletResponse.SC_INTERNAL_SERVER_ERROR;
    statusText=""String_Node_Str"" + url;
    log.error(""String_Node_Str"" + url,e);
  }
catch (  IOException e) {
    statusCode=HttpServletResponse.SC_INTERNAL_SERVER_ERROR;
    statusText=""String_Node_Str"" + url;
    log.error(""String_Node_Str"" + url,e);
  }
}","public HttpResource(HttpClient httpClient,String baseUrl,Target target){
  this.target=target;
  HttpState httpState=null;
  if (target.getContext() != null)   httpState=target.getContext().getHttpState();
  if (""String_Node_Str"".equalsIgnoreCase(target.getMethod()) || !target.isProxyMode()) {
    url=ResourceUtils.getHttpUrlWithQueryString(baseUrl,target);
    httpMethod=new GetMethod(url);
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(target.getMethod())) {
    url=ResourceUtils.getHttpUrl(baseUrl,target);
    PostMethod postMethod=new PostMethod(url);
    postMethod.getParams().setContentCharset(target.getOriginalRequest().getCharacterEncoding());
    Context context=target.getContext();
    Map<String,String> parameters=target.getParameters();
    if (context != null) {
      for (      Map.Entry<String,String> temp : context.getParameterMap().entrySet()) {
        postMethod.addParameter(new NameValuePair(temp.getKey(),temp.getValue()));
      }
    }
    if (parameters != null) {
      for (      Map.Entry<String,String> temp : parameters.entrySet()) {
        postMethod.addParameter(new NameValuePair(temp.getKey(),temp.getValue()));
      }
    }
    if (target.getOriginalRequest() != null) {
      for (      Object obj : target.getOriginalRequest().getParameterMap().entrySet()) {
        @SuppressWarnings(""String_Node_Str"") Entry<String,String[]> entry=(Entry<String,String[]>)obj;
        for (int i=0; i < entry.getValue().length; i++) {
          postMethod.addParameter(new NameValuePair(entry.getKey(),(entry.getValue())[i]));
        }
      }
    }
    httpMethod=postMethod;
  }
 else {
    throw new UnsupportedHttpMethodException(target.getMethod() + ""String_Node_Str"" + ResourceUtils.getHttpUrl(baseUrl,target));
  }
  if (target.isProxyMode()) {
    httpMethod.setFollowRedirects(false);
  }
 else {
    httpMethod.setFollowRedirects(true);
  }
  try {
    httpClient.executeMethod(httpClient.getHostConfiguration(),httpMethod,httpState);
    statusCode=httpMethod.getStatusCode();
    statusText=httpMethod.getStatusText();
    if (statusCode != HttpServletResponse.SC_OK && statusCode != HttpServletResponse.SC_MOVED_TEMPORARILY && statusCode != HttpServletResponse.SC_MOVED_PERMANENTLY)     log.warn(""String_Node_Str"" + url + ""String_Node_Str""+ statusCode+ ""String_Node_Str""+ statusText);
  }
 catch (  ConnectTimeoutException e) {
    statusCode=HttpServletResponse.SC_GATEWAY_TIMEOUT;
    statusText=""String_Node_Str"" + url;
    log.warn(""String_Node_Str"" + url);
  }
catch (  SocketTimeoutException e) {
    statusCode=HttpServletResponse.SC_GATEWAY_TIMEOUT;
    statusText=""String_Node_Str"" + url;
    log.warn(""String_Node_Str"" + url);
  }
catch (  HttpException e) {
    statusCode=HttpServletResponse.SC_INTERNAL_SERVER_ERROR;
    statusText=""String_Node_Str"" + url;
    log.error(""String_Node_Str"" + url,e);
  }
catch (  IOException e) {
    statusCode=HttpServletResponse.SC_INTERNAL_SERVER_ERROR;
    statusText=""String_Node_Str"" + url;
    log.error(""String_Node_Str"" + url,e);
  }
}",0.9836393989983304
35837,"/** 
 * @param message
 */
public UnsupportedHttpMethodException(String message){
  super(message);
}","/** 
 * @param message Error message
 */
public UnsupportedHttpMethodException(String message){
  super(message);
}",0.9351851851851852
35838,"public void run(TestResult result){
  ListIterator<TestCaseFeature> iter=features.listIterator();
  while (iter.hasNext()) {
    TestCaseFeature feature=(TestCaseFeature)iter.next();
    feature.beforeRun(this,result);
  }
  try {
    super.run(result);
  }
  finally {
    while (iter.hasPrevious()) {
      TestCaseFeature decorator=(TestCaseFeature)iter.previous();
      decorator.afterRun(this,result);
    }
  }
}","@Override public void run(TestResult result){
  ListIterator<TestCaseFeature> iter=features.listIterator();
  while (iter.hasNext()) {
    TestCaseFeature feature=iter.next();
    feature.beforeRun(this,result);
  }
  try {
    super.run(result);
  }
  finally {
    while (iter.hasPrevious()) {
      TestCaseFeature decorator=iter.previous();
      decorator.afterRun(this,result);
    }
  }
}",0.4619164619164619
35839,"/** 
 * @param string
 */
public AggregationSyntaxException(String string){
  super(string);
}","/** 
 * @param string Error message
 */
public AggregationSyntaxException(String string){
  super(string);
}",0.9306930693069309
35840,"/** 
 * Retrieves a resource from the provider application and parses it to find tags to be replaced by contents from other providers. Sample syntax used for includes : <ul> <li>&lt;!--$includeblock$provider$page$blockname$--&gt;</li> <li>&lt;!--$beginincludetemplate$provider$page$templatename$--&gt;</li> <li>&lt;!--$beginput$name$--&gt;</li> </ul> Sample syntax used inside included contents for template and block definition : <ul> <li>&lt;!--$beginblock$name$--&gt;</li> <li>&lt;!--$begintemplate$name$--&gt;</li> <li>&lt;!--$beginparam$name$--&gt;</li> </ul> Aggregation is always in ""proxy mode"" that means cookies or parameters from the original request are transmitted to the target server. NB: Cookies and parameters are not transmitted to templates or blocks invoked by the page.
 * @param relUrl the relative URL to the resource
 * @param request the request
 * @param response the response
 * @throws IOException
 * @throws AggregationSyntaxException
 */
public final void aggregate(String relUrl,HttpServletRequest request,HttpServletResponse response) throws IOException, AggregationSyntaxException {
  Target target=new Target(relUrl,getContext(request),null,request);
  target.setProxyMode(true);
  StringOutput stringOutput=getResourceAsString(target);
  if (stringOutput.getStatusCode() == HttpServletResponse.SC_MOVED_PERMANENTLY || stringOutput.getStatusCode() == HttpServletResponse.SC_MOVED_TEMPORARILY) {
    response.setStatus(stringOutput.getStatusCode());
    response.setHeader(""String_Node_Str"",stringOutput.getLocation());
    return;
  }
  stringOutput.copyHeaders(response);
  String content=stringOutput.toString();
  if (content == null)   return;
  response.setCharacterEncoding(stringOutput.getCharset());
  Writer writer=response.getWriter();
  int currentPosition=0;
  int previousPosition;
  int endPosition;
  String currentTag;
  StringTokenizer stringTokenizer;
  String tagName;
  String provider;
  String page;
  String blockOrTemplate;
  while (currentPosition > -1) {
    previousPosition=currentPosition;
    currentPosition=content.indexOf(""String_Node_Str"",currentPosition);
    if (currentPosition > -1) {
      writer.append(content,previousPosition,currentPosition);
      endPosition=content.indexOf(""String_Node_Str"",currentPosition);
      if (endPosition == -1)       throw new AggregationSyntaxException(""String_Node_Str"");
      currentTag=content.substring(currentPosition + 4,endPosition);
      log.debug(""String_Node_Str"" + currentTag);
      currentPosition=endPosition + 3;
      stringTokenizer=new StringTokenizer(currentTag,""String_Node_Str"");
      if (stringTokenizer.countTokens() < 3)       throw new AggregationSyntaxException(""String_Node_Str"" + currentTag);
      tagName=stringTokenizer.nextToken();
      provider=stringTokenizer.nextToken();
      page=stringTokenizer.nextToken();
      if (stringTokenizer.hasMoreTokens())       blockOrTemplate=stringTokenizer.nextToken();
 else       blockOrTemplate=null;
      if (stringTokenizer.hasMoreTokens())       throw new AggregationSyntaxException(""String_Node_Str"" + currentTag);
      if (""String_Node_Str"".equals(tagName)) {
        Driver.getInstance(provider).renderBlock(page,blockOrTemplate,writer,getContext(request),null,null);
      }
 else       if (""String_Node_Str"".equals(tagName)) {
        endPosition=content.indexOf(""String_Node_Str"");
        if (endPosition < 0)         throw new AggregationSyntaxException(""String_Node_Str"" + currentTag);
        Driver.getInstance(provider).aggregateTemplate(page,blockOrTemplate,content.substring(currentPosition,endPosition),writer,request);
        currentPosition=endPosition + 27;
      }
 else {
        throw new AggregationSyntaxException(""String_Node_Str"" + currentTag);
      }
    }
 else {
      writer.append(content,previousPosition,content.length());
    }
  }
}","/** 
 * Retrieves a resource from the provider application and parses it to find tags to be replaced by contents from other providers. Sample syntax used for includes : <ul> <li>&lt;!--$includeblock$provider$page$blockname$--&gt;</li> <li>&lt;!--$beginincludetemplate$provider$page$templatename$--&gt;</li> <li>&lt;!--$beginput$name$--&gt;</li> </ul> Sample syntax used inside included contents for template and block definition : <ul> <li>&lt;!--$beginblock$name$--&gt;</li> <li>&lt;!--$begintemplate$name$--&gt;</li> <li>&lt;!--$beginparam$name$--&gt;</li> </ul> Aggregation is always in ""proxy mode"" that means cookies or parameters from the original request are transmitted to the target server. NB: Cookies and parameters are not transmitted to templates or blocks invoked by the page.
 * @param relUrl the relative URL to the resource
 * @param request the request
 * @param response the response
 * @throws IOException If an IOException occurs while writing to theresponse
 * @throws AggregationSyntaxException If the page contains incorrect tags
 */
public final void aggregate(String relUrl,HttpServletRequest request,HttpServletResponse response) throws IOException, AggregationSyntaxException {
  Target target=new Target(relUrl,getContext(request),null,request);
  request.setCharacterEncoding(config.getUriEncoding());
  target.setProxyMode(true);
  StringOutput stringOutput=getResourceAsString(target);
  if (stringOutput.getStatusCode() == HttpServletResponse.SC_MOVED_PERMANENTLY || stringOutput.getStatusCode() == HttpServletResponse.SC_MOVED_TEMPORARILY) {
    response.setStatus(stringOutput.getStatusCode());
    response.setHeader(""String_Node_Str"",stringOutput.getLocation());
    return;
  }
  stringOutput.copyHeaders(response);
  String content=stringOutput.toString();
  if (content == null)   return;
  response.setCharacterEncoding(stringOutput.getCharset());
  Writer writer=response.getWriter();
  int currentPosition=0;
  int previousPosition;
  int endPosition;
  String currentTag;
  StringTokenizer stringTokenizer;
  String tagName;
  String provider;
  String page;
  String blockOrTemplate;
  while (currentPosition > -1) {
    previousPosition=currentPosition;
    currentPosition=content.indexOf(""String_Node_Str"",currentPosition);
    if (currentPosition > -1) {
      writer.append(content,previousPosition,currentPosition);
      endPosition=content.indexOf(""String_Node_Str"",currentPosition);
      if (endPosition == -1)       throw new AggregationSyntaxException(""String_Node_Str"");
      currentTag=content.substring(currentPosition + 4,endPosition);
      log.debug(""String_Node_Str"" + currentTag);
      currentPosition=endPosition + 3;
      stringTokenizer=new StringTokenizer(currentTag,""String_Node_Str"");
      if (stringTokenizer.countTokens() < 3)       throw new AggregationSyntaxException(""String_Node_Str"" + currentTag);
      tagName=stringTokenizer.nextToken();
      provider=stringTokenizer.nextToken();
      page=stringTokenizer.nextToken();
      if (stringTokenizer.hasMoreTokens())       blockOrTemplate=stringTokenizer.nextToken();
 else       blockOrTemplate=null;
      if (stringTokenizer.hasMoreTokens())       throw new AggregationSyntaxException(""String_Node_Str"" + currentTag);
      if (""String_Node_Str"".equals(tagName)) {
        Driver.getInstance(provider).renderBlock(page,blockOrTemplate,writer,getContext(request),null,null);
      }
 else       if (""String_Node_Str"".equals(tagName)) {
        endPosition=content.indexOf(""String_Node_Str"");
        if (endPosition < 0)         throw new AggregationSyntaxException(""String_Node_Str"" + currentTag);
        Driver.getInstance(provider).aggregateTemplate(page,blockOrTemplate,content.substring(currentPosition,endPosition),writer,request);
        currentPosition=endPosition + 27;
      }
 else {
        throw new AggregationSyntaxException(""String_Node_Str"" + currentTag);
      }
    }
 else {
      writer.append(content,previousPosition,content.length());
    }
  }
}",0.9436888267446296
35841,"/** 
 * Retrieves a block from the provider application and writes it to a Writer. Block can be defined in the provider application using HTML comments.<br /> eg: a block name ""myblock"" should be delimited with ""&lt;!--$beginblock$myblock$--&gt;"" and ""&lt;!--$endblock$myblock$--&gt;
 * @param page
 * @param name
 * @param writer
 * @param context
 * @param replaceRules the replace rules to be applied on the block
 * @param parameters
 * @throws IOException
 */
public final void renderBlock(String page,String name,Writer writer,Context context,Map<String,String> replaceRules,Map<String,String> parameters) throws IOException {
  Target target=new Target(page,context,parameters);
  String content=getResourceAsString(target).toString();
  if (content == null)   return;
  String beginString=""String_Node_Str"" + name + ""String_Node_Str"";
  String endString=""String_Node_Str"" + name + ""String_Node_Str"";
  StringBuilder sb=new StringBuilder();
  int begin=content.indexOf(beginString);
  int end=content.indexOf(endString);
  if (begin == -1 || end == -1) {
    log.warn(""String_Node_Str"" + page + ""String_Node_Str""+ name);
  }
 else {
    log.debug(""String_Node_Str"" + page + ""String_Node_Str""+ name);
    sb.append(content.substring(begin,end));
  }
  writer.append(StringUtils.replace(sb,replaceRules));
}","/** 
 * Retrieves a block from the provider application and writes it to a Writer. Block can be defined in the provider application using HTML comments.<br /> eg: a block name ""myblock"" should be delimited with ""&lt;!--$beginblock$myblock$--&gt;"" and ""&lt;!--$endblock$myblock$--&gt;
 * @param page Page containing the block
 * @param name Name of the block
 * @param writer Writer to write the block to
 * @param context User context
 * @param replaceRules the replace rules to be applied on the block
 * @param parameters Additional parameters
 * @throws IOException If an IOException occurs while writing to the writer
 */
public final void renderBlock(String page,String name,Writer writer,Context context,Map<String,String> replaceRules,Map<String,String> parameters) throws IOException {
  Target target=new Target(page,context,parameters);
  String content=getResourceAsString(target).toString();
  if (content == null)   return;
  String beginString=""String_Node_Str"" + name + ""String_Node_Str"";
  String endString=""String_Node_Str"" + name + ""String_Node_Str"";
  int begin=content.indexOf(beginString);
  int end=content.indexOf(endString);
  if (begin == -1 || end == -1) {
    log.warn(""String_Node_Str"" + page + ""String_Node_Str""+ name);
  }
 else {
    log.debug(""String_Node_Str"" + page + ""String_Node_Str""+ name);
    writer.append(StringUtils.replace(content.substring(begin + beginString.length(),end),replaceRules));
  }
}",0.7640857869865504
35842,"/** 
 * Retrieves a template from the provider application and renders it to the writer replacing the parameters with the given map. If ""page"" param is null, the whole page will be used as the template.<br /> eg: The template ""mytemplate"" can be delimited in the provider page by comments ""&lt;!--$begintemplate$mytemplate$--&gt;"" and ""&lt;!--$endtemplate$mytemplate$--&gt;"".<br /> Inside the template, the parameters can be defined by comments.<br /> eg: parameter named ""myparam"" should be delimited by comments ""&lt;!--$beginparam$myparam$--&gt;"" and ""&lt;!--$endparam$myparam$--&gt;""
 * @param page
 * @param name
 * @param writer
 * @param context
 * @param params
 * @param replaceRules the replace rules to be applied on the block
 * @param parameters
 * @throws IOException
 */
public final void renderTemplate(String page,String name,Writer writer,Context context,Map<String,String> params,Map<String,String> replaceRules,Map<String,String> parameters) throws IOException {
  Target target=new Target(page,context,null);
  String content=getResourceAsString(target).toString();
  StringBuilder sb=new StringBuilder();
  if (content != null) {
    if (name != null) {
      String beginString=""String_Node_Str"" + name + ""String_Node_Str"";
      String endString=""String_Node_Str"" + name + ""String_Node_Str"";
      int begin=content.indexOf(beginString);
      int end=content.indexOf(endString);
      if (begin == -1 || end == -1) {
        log.warn(""String_Node_Str"" + page + ""String_Node_Str""+ name);
      }
 else {
        log.debug(""String_Node_Str"" + page + ""String_Node_Str""+ name);
        sb.append(content,begin + beginString.length(),end);
      }
    }
 else {
      log.debug(""String_Node_Str"" + page);
      sb.append(content);
    }
    if (params != null) {
      for (      Entry<String,String> param : params.entrySet()) {
        int lastIndexOfString=0;
        String key=param.getKey();
        String value=param.getValue();
        String beginString=""String_Node_Str"" + key + ""String_Node_Str"";
        String endString=""String_Node_Str"" + key + ""String_Node_Str"";
        while (lastIndexOfString >= 0) {
          int begin=sb.indexOf(beginString,lastIndexOfString);
          int end=sb.indexOf(endString,lastIndexOfString);
          if (!(begin == -1 || end == -1)) {
            sb.replace(begin + beginString.length(),end,value);
          }
          if (begin == -1 || end == -1) {
            lastIndexOfString=-1;
          }
 else {
            lastIndexOfString=begin + beginString.length() + value.length()+ endString.length();
          }
        }
      }
    }
  }
 else {
    if (params != null) {
      for (      Entry<String,String> param : params.entrySet()) {
        sb.append(param.getValue());
      }
    }
  }
  writer.append(StringUtils.replace(sb,replaceRules));
}","/** 
 * Retrieves a template from the provider application and renders it to the writer replacing the parameters with the given map. If ""page"" param is null, the whole page will be used as the template.<br /> eg: The template ""mytemplate"" can be delimited in the provider page by comments ""&lt;!--$begintemplate$mytemplate$--&gt;"" and ""&lt;!--$endtemplate$mytemplate$--&gt;"".<br /> Inside the template, the parameters can be defined by comments.<br /> eg: parameter named ""myparam"" should be delimited by comments ""&lt;!--$beginparam$myparam$--&gt;"" and ""&lt;!--$endparam$myparam$--&gt;""
 * @param page Address of the page containing the template
 * @param name Template name
 * @param writer Writer where to write the result
 * @param context User context
 * @param params Blocks to replace inside the template
 * @param replaceRules The replace rules to be applied on the block
 * @param parameters Parameters to be added to the request
 * @throws IOException If an IOException occurs while writing to the writer
 */
public final void renderTemplate(String page,String name,Writer writer,Context context,Map<String,String> params,Map<String,String> replaceRules,Map<String,String> parameters) throws IOException {
  Target target=new Target(page,context,parameters);
  String content=getResourceAsString(target).toString();
  StringBuilder sb=new StringBuilder();
  if (content != null) {
    if (name != null) {
      String beginString=""String_Node_Str"" + name + ""String_Node_Str"";
      String endString=""String_Node_Str"" + name + ""String_Node_Str"";
      int begin=content.indexOf(beginString);
      int end=content.indexOf(endString);
      if (begin == -1 || end == -1) {
        log.warn(""String_Node_Str"" + page + ""String_Node_Str""+ name);
      }
 else {
        log.debug(""String_Node_Str"" + page + ""String_Node_Str""+ name);
        sb.append(content,begin + beginString.length(),end);
      }
    }
 else {
      log.debug(""String_Node_Str"" + page);
      sb.append(content);
    }
    if (params != null) {
      for (      Entry<String,String> param : params.entrySet()) {
        int lastIndexOfString=0;
        String key=param.getKey();
        String value=param.getValue();
        String beginString=""String_Node_Str"" + key + ""String_Node_Str"";
        String endString=""String_Node_Str"" + key + ""String_Node_Str"";
        while (lastIndexOfString >= 0) {
          int begin=sb.indexOf(beginString,lastIndexOfString);
          int end=sb.indexOf(endString,lastIndexOfString);
          if (!(begin == -1 || end == -1)) {
            sb.replace(begin + beginString.length(),end,value);
          }
          if (begin == -1 || end == -1) {
            lastIndexOfString=-1;
          }
 else {
            lastIndexOfString=begin + beginString.length() + value.length()+ endString.length();
          }
        }
      }
    }
  }
 else {
    if (params != null) {
      for (      Entry<String,String> param : params.entrySet()) {
        sb.append(param.getValue());
      }
    }
  }
  writer.append(StringUtils.replace(sb,replaceRules));
}",0.8946564885496183
35843,"/** 
 * Retrieves the default instance of this class that is configured according to the properties file (driver.properties)
 * @param instanceName The name of the instance (corresponding to the prefix in the driver.properties file)
 * @return the named instance
 */
public final static Driver getInstance(String instanceName){
  if (instances == null)   throw new ConfigurationException(""String_Node_Str"");
  if (instanceName == null)   instanceName=""String_Node_Str"";
  Driver instance=instances.get(instanceName);
  if (instance == null)   throw new ConfigurationException(""String_Node_Str"" + instanceName);
  return instance;
}","/** 
 * Retrieves the default instance of this class that is configured according to the properties file (driver.properties)
 * @param instanceName The name of the instance (corresponding to the prefixin the driver.properties file)
 * @return the named instance
 */
public final static Driver getInstance(String instanceName){
  if (instances == null)   throw new ConfigurationException(""String_Node_Str"");
  if (instanceName == null)   instanceName=""String_Node_Str"";
  Driver instance=instances.get(instanceName);
  if (instance == null)   throw new ConfigurationException(""String_Node_Str"" + instanceName);
  return instance;
}",0.999206978588422
35844,"/** 
 * Applies the replace rules to the final String to be rendered and returns it. If there is no replace rule, returns the original string.
 * @param charSequence
 * @param replaceRules the replace rules
 * @return the result of the replace rules
 */
public final static CharSequence replace(CharSequence charSequence,Map<String,String> replaceRules){
  if (replaceRules != null && replaceRules.size() > 0) {
    for (    Entry<String,String> replaceRule : replaceRules.entrySet()) {
      charSequence=Pattern.compile(replaceRule.getKey()).matcher(charSequence).replaceAll(replaceRule.getValue());
    }
  }
  return charSequence;
}","/** 
 * Applies the replace rules to the final String to be rendered and returns it. If there is no replace rule, returns the original string.
 * @param charSequence The original charSequence to apply the replacementsto
 * @param replaceRules the replace rules
 * @return the result of the replace rules
 */
public final static CharSequence replace(CharSequence charSequence,Map<String,String> replaceRules){
  if (replaceRules != null && replaceRules.size() > 0) {
    for (    Entry<String,String> replaceRule : replaceRules.entrySet()) {
      charSequence=Pattern.compile(replaceRule.getKey()).matcher(charSequence).replaceAll(replaceRule.getValue());
    }
  }
  return charSequence;
}",0.9592760180995475
35845,"/** 
 * @see org.mortbay.jetty.webapp.Configuration#configureWebApp()
 */
public void configureWebApp() throws Exception {
}","public void configureWebApp() throws Exception {
}",0.5747126436781609
35846,"/** 
 * Configures WebAppContext's classloader with extra entries. Extra entries are read from the webapptest.extraclasspath system property to each context that uses this configuration object
 * @exception Exception as defined in  {@link Configuration}
 */
public void configureClassLoader() throws Exception {
  ((WebAppClassLoader)_ctx.getClassLoader()).addClassPath(System.getProperty(""String_Node_Str""));
}","/** 
 * Configures WebAppContext's classloader with extra entries. Extra entries are read from the webapptest.extraclasspath system property to each context that uses this configuration object
 * @exception Exception as defined in {@link Configuration}
 */
public void configureClassLoader() throws Exception {
  ((WebAppClassLoader)_ctx.getClassLoader()).addClassPath(System.getProperty(""String_Node_Str""));
}",0.9987819732034104
35847,"/** 
 * Sets the parameter to add to the request.
 * @param expression
 */
public void setParameter(String expression){
  this.parameter=expression;
}","/** 
 * Sets the parameter to add to the request.
 * @param parameterName Name of the parameter
 */
public void setParameter(String parameterName){
  this.parameter=parameterName;
}",0.7854984894259819
35848,"/** 
 * Sets the expression to replace.
 * @param expression
 */
public void setExpression(String expression){
  this.expression=expression;
}","/** 
 * Sets the expression to replace.
 * @param expression Regular expression to be replaced by the tag body
 */
public void setExpression(String expression){
  this.expression=expression;
}",0.8502994011976048
35849,"/** 
 * Writes some bytes to the Output.<br /> The Output must be opened before calling this method.<br /> This method cannot be called any more when the Output has been closed.
 * @param bytes Array containing the bytes to be written
 * @param offset First byte to be written
 * @param length Number of bytes to be written
 * @throws OutputException
 */
public void write(byte[] bytes,int offset,int length) throws OutputException ;","/** 
 * Writes some bytes to the Output.<br /> The Output must be opened before calling this method.<br /> This method cannot be called any more when the Output has been closed.
 * @param bytes Array containing the bytes to be written
 * @param offset First byte to be written
 * @param length Number of bytes to be written
 * @throws OutputException If an problem occurs while writing the result
 */
public void write(byte[] bytes,int offset,int length) throws OutputException ;",0.949561403508772
35850,"public void copyHeaders(HttpServletResponse response){
  Iterator<Header> iterator=headers.iterator();
  while (iterator.hasNext()) {
    Header header=iterator.next();
    response.addHeader(header.getName(),header.getValue());
  }
}","public void copyHeaders(HttpServletResponse response){
  Iterator<Header> iterator=headers.iterator();
  while (iterator.hasNext()) {
    Header header=iterator.next();
    if (!""String_Node_Str"".equalsIgnoreCase(header.getName()))     response.addHeader(header.getName(),header.getValue());
  }
}",0.8135593220338984
35851,"public void testMasterWebapp() throws Exception {
  HttpAssert.assertBodyGetEqualsLocalFile(getAbsoluteURL(""String_Node_Str""),referencePath(""String_Node_Str""));
}","public void testMasterWebapp(){
  HttpAssert.assertBodyGetEqualsLocalFile(getAbsoluteURL(""String_Node_Str""),referencePath(""String_Node_Str""));
}",0.9411764705882352
35852,"public void testBlockAndReplace() throws Exception {
  HttpMethod res=createGet(""String_Node_Str"");
  HttpAssert.assertStatus(res,200);
  HttpAssert.assertBodyContains(res,""String_Node_Str"");
  HttpAssert.assertBodyContains(res,""String_Node_Str"");
  HttpAssert.assertBodyNotContains(res,""String_Node_Str"");
}","public void testBlockAndReplace(){
  HttpMethod res=createGet(""String_Node_Str"");
  HttpAssert.assertStatus(res,200);
  HttpAssert.assertBodyContains(res,""String_Node_Str"");
  HttpAssert.assertBodyContains(res,""String_Node_Str"");
  HttpAssert.assertBodyNotContains(res,""String_Node_Str"");
}",0.9698996655518396
35853,"public void testProviderWebapp() throws Exception {
  HttpAssert.assertBodyGetEqualsLocalFile(getAbsoluteURL(""String_Node_Str""),referencePath(""String_Node_Str""));
}","public void testProviderWebapp(){
  HttpAssert.assertBodyGetEqualsLocalFile(getAbsoluteURL(""String_Node_Str""),referencePath(""String_Node_Str""));
}",0.9419354838709676
35854,"public WATTests() throws IOException {
  super(""String_Node_Str"");
  File refPath=new File(System.getenv(""String_Node_Str""));
  refPathPrefix=refPath.getAbsolutePath();
  if (!refPathPrefix.endsWith(File.separator))   refPathPrefix+=File.separator;
}","public WATTests(){
  super(""String_Node_Str"");
  File refPath=new File(System.getenv(""String_Node_Str""));
  refPathPrefix=refPath.getAbsolutePath();
  if (!refPathPrefix.endsWith(File.separator))   refPathPrefix+=File.separator;
}",0.9583333333333334
35855,"public void testBlock() throws Exception {
  HttpMethod res=new GetMethod(getAbsoluteURL(""String_Node_Str""));
  HttpAssert.assertStatus(res,200);
  HttpAssert.assertBodyContains(res,""String_Node_Str"");
}","public void testBlock(){
  HttpMethod res=new GetMethod(getAbsoluteURL(""String_Node_Str""));
  HttpAssert.assertStatus(res,200);
  HttpAssert.assertBodyContains(res,""String_Node_Str"");
}",0.9536082474226804
35856,"public void testAggregatorWebapp() throws Exception {
  HttpAssert.assertBodyGetEqualsLocalFile(getAbsoluteURL(""String_Node_Str""),referencePath(""String_Node_Str""));
}","public void testAggregatorWebapp(){
  HttpAssert.assertBodyGetEqualsLocalFile(getAbsoluteURL(""String_Node_Str""),referencePath(""String_Node_Str""));
}",0.9426751592356688
35857,"/** 
 * Renders the Resource to an Output
 * @param output The output to render the resource to.
 * @throws IOException
 */
public void render(Output output) throws IOException ;","/** 
 * Renders the Resource to an Output
 * @param output The output to render the resource to.
 * @throws IOException If an exception occurs while rendering to the output
 */
public void render(Output output) throws IOException ;",0.8704156479217604
35858,"public ConfigurationException(String message){
  super(message);
}","public ConfigurationException(IOException e){
  super(e);
}",0.816
35859,"public Driver(Properties props){
  baseURL=props.getProperty(""String_Node_Str"");
  if (baseURL != null) {
    MultiThreadedHttpConnectionManager connectionManager=new MultiThreadedHttpConnectionManager();
    int maxConnectionsPerHost=20;
    if (props.getProperty(""String_Node_Str"") != null)     maxConnectionsPerHost=Integer.parseInt(props.getProperty(""String_Node_Str""));
    connectionManager.getParams().setDefaultMaxConnectionsPerHost(maxConnectionsPerHost);
    httpClient=new HttpClient(connectionManager);
    if (props.getProperty(""String_Node_Str"") != null) {
      timeout=Integer.parseInt(props.getProperty(""String_Node_Str""));
      httpClient.getParams().setSoTimeout(timeout);
      httpClient.getHttpConnectionManager().getParams().setConnectionTimeout(timeout);
    }
  }
  if (props.getProperty(""String_Node_Str"") != null)   cacheRefreshDelay=Integer.parseInt(props.getProperty(""String_Node_Str""));
  if (props.getProperty(""String_Node_Str"") != null)   cacheMaxFileSize=Integer.parseInt(props.getProperty(""String_Node_Str""));
  localBase=props.getProperty(""String_Node_Str"");
  if (props.getProperty(""String_Node_Str"") != null)   putInCache=Boolean.parseBoolean(props.getProperty(""String_Node_Str""));
}","public Driver(Properties props){
  baseURL=props.getProperty(""String_Node_Str"");
  if (baseURL != null) {
    MultiThreadedHttpConnectionManager connectionManager=new MultiThreadedHttpConnectionManager();
    int maxConnectionsPerHost=20;
    if (props.getProperty(""String_Node_Str"") != null)     maxConnectionsPerHost=Integer.parseInt(props.getProperty(""String_Node_Str""));
    connectionManager.getParams().setDefaultMaxConnectionsPerHost(maxConnectionsPerHost);
    httpClient=new HttpClient(connectionManager);
    if (props.getProperty(""String_Node_Str"") != null) {
      timeout=Integer.parseInt(props.getProperty(""String_Node_Str""));
      httpClient.getParams().setSoTimeout(timeout);
      httpClient.getHttpConnectionManager().getParams().setConnectionTimeout(timeout);
    }
  }
  if (props.getProperty(""String_Node_Str"") != null)   cacheRefreshDelay=Integer.parseInt(props.getProperty(""String_Node_Str""));
  if (props.getProperty(""String_Node_Str"") != null)   cacheMaxFileSize=Integer.parseInt(props.getProperty(""String_Node_Str""));
  localBase=props.getProperty(""String_Node_Str"");
  if (props.getProperty(""String_Node_Str"") != null)   putInCache=Boolean.parseBoolean(props.getProperty(""String_Node_Str""));
  if (props.getProperty(""String_Node_Str"") != null)   useCache=Boolean.parseBoolean(props.getProperty(""String_Node_Str""));
}",0.952046783625731
35860,"/** 
 * Loads all the instances according to default configuration file
 */
public final static void configure(){
  Properties props=new Properties();
  try {
    props.load(Driver.class.getResourceAsStream(""String_Node_Str""));
  }
 catch (  IOException e) {
    throw new ExceptionInInitializerError(e);
  }
  configure(props);
}","/** 
 * Loads all the instances according to default configuration file
 */
public final static void configure(){
  try {
    InputStream inputStream=Driver.class.getResourceAsStream(""String_Node_Str"");
    if (inputStream != null) {
      Properties props=new Properties();
      props.load(inputStream);
      configure(props);
    }
  }
 catch (  IOException e) {
    throw new ConfigurationException(e);
  }
}",0.629878869448183
35861,"/** 
 * Retrieves the default instance of this class that is configured according to the properties file (driver.properties)
 * @param instanceName The name of the instance (corresponding to the prefix in the driver.properties file)
 * @return the named instance
 */
public synchronized final static Driver getInstance(String instanceName){
  if (instanceName == null)   instanceName=""String_Node_Str"";
  if (instances == null) {
    configure();
  }
  Driver instance=instances.get(instanceName);
  if (instance == null)   throw new ConfigurationException(""String_Node_Str"" + instanceName);
  return instance;
}","/** 
 * Retrieves the default instance of this class that is configured according to the properties file (driver.properties)
 * @param instanceName The name of the instance (corresponding to the prefix in the driver.properties file)
 * @return the named instance
 */
public final static Driver getInstance(String instanceName){
  if (instances == null)   throw new ConfigurationException(""String_Node_Str"");
  if (instanceName == null)   instanceName=""String_Node_Str"";
  Driver instance=instances.get(instanceName);
  if (instance == null)   throw new ConfigurationException(""String_Node_Str"" + instanceName);
  return instance;
}",0.8656476267095736
35862,"private final void renderResource(String relUrl,Output output,Context context) throws IOException, ResourceNotFoundException {
  String httpUrl=getUrlForHttpResource(relUrl,context);
  String fileUrl=getUrlForFileResource(relUrl,context);
  MultipleOutput multipleOutput=new MultipleOutput();
  multipleOutput.addOutput(output);
  MemoryResource cachedResource=null;
  try {
    if (useCache) {
      cachedResource=(MemoryResource)cache.getFromCache(httpUrl);
      cachedResource=(MemoryResource)cache.getFromCache(httpUrl,cacheRefreshDelay);
    }
    if (cachedResource == null)     throw new NeedsRefreshException(null);
    cachedResource.render(multipleOutput);
  }
 catch (  NeedsRefreshException e) {
    boolean cacheUpdated=false;
    try {
      MemoryOutput memoryOutput=null;
      HttpResource httpResource=null;
      if (baseURL != null)       httpResource=getResourceFromHttp(httpUrl);
      if (httpResource != null) {
        if (useCache) {
          memoryOutput=new MemoryOutput(cacheMaxFileSize);
          multipleOutput.addOutput(memoryOutput);
        }
        if (putInCache)         multipleOutput.addOutput(new FileOutput(fileUrl));
        httpResource.render(multipleOutput);
      }
 else       if (cachedResource != null) {
        cachedResource.render(multipleOutput);
      }
 else {
        FileResource fileResource=getResourceFromLocal(fileUrl);
        if (fileResource == null)         throw new ResourceNotFoundException(relUrl);
        if (useCache) {
          memoryOutput=new MemoryOutput(cacheMaxFileSize);
          multipleOutput.addOutput(memoryOutput);
        }
        fileResource.render(multipleOutput);
      }
      if (memoryOutput != null) {
        cachedResource=memoryOutput.toResource();
        cache.putInCache(httpUrl,cachedResource);
        cacheUpdated=true;
      }
    }
  finally {
      if (useCache && !cacheUpdated)       cache.cancelUpdate(httpUrl);
    }
  }
}","private final void renderResource(String relUrl,Output output,Context context) throws IOException, ResourceNotFoundException {
  String httpUrl=getUrlForHttpResource(relUrl,context);
  String fileUrl=getUrlForFileResource(relUrl,context);
  MultipleOutput multipleOutput=new MultipleOutput();
  multipleOutput.addOutput(output);
  MemoryResource cachedResource=null;
  HttpResource httpResource=null;
  FileResource fileResource=null;
  try {
    if (useCache) {
      cachedResource=(MemoryResource)cache.getFromCache(httpUrl);
      cachedResource=(MemoryResource)cache.getFromCache(httpUrl,cacheRefreshDelay);
    }
    if (cachedResource == null)     throw new NeedsRefreshException(null);
    cachedResource.render(multipleOutput);
  }
 catch (  NeedsRefreshException e) {
    boolean cacheUpdated=false;
    try {
      MemoryOutput memoryOutput=null;
      if (baseURL != null)       httpResource=getResourceFromHttp(httpUrl);
      if (httpResource != null) {
        if (useCache) {
          memoryOutput=new MemoryOutput(cacheMaxFileSize);
          multipleOutput.addOutput(memoryOutput);
        }
        if (putInCache)         multipleOutput.addOutput(new FileOutput(fileUrl));
        httpResource.render(multipleOutput);
      }
 else       if (cachedResource != null) {
        cachedResource.render(multipleOutput);
      }
 else {
        fileResource=getResourceFromLocal(fileUrl);
        if (fileResource == null)         throw new ResourceNotFoundException(relUrl);
        if (useCache) {
          memoryOutput=new MemoryOutput(cacheMaxFileSize);
          multipleOutput.addOutput(memoryOutput);
        }
        fileResource.render(multipleOutput);
      }
      if (memoryOutput != null) {
        cachedResource=memoryOutput.toResource();
        cache.putInCache(httpUrl,cachedResource);
        cacheUpdated=true;
        if (cachedResource != null)         cachedResource.release();
        if (httpResource != null)         httpResource.release();
        if (fileResource != null)         fileResource.release();
      }
    }
  finally {
      if (useCache && !cacheUpdated)       cache.cancelUpdate(httpUrl);
    }
  }
}",0.9216882166382044
35863,"private final void renderResource(String relUrl,Output output,Context context) throws IOException, ResourceNotFoundException {
  String httpUrl=getUrlForHttpResource(relUrl,context);
  String fileUrl=getUrlForFileResource(relUrl,context);
  MultipleOutput multipleOutput=new MultipleOutput();
  multipleOutput.addOutput(output);
  MemoryResource cachedResource=null;
  HttpResource httpResource=null;
  FileResource fileResource=null;
  try {
    if (useCache) {
      cachedResource=(MemoryResource)cache.getFromCache(httpUrl);
      cachedResource=(MemoryResource)cache.getFromCache(httpUrl,cacheRefreshDelay);
    }
    if (cachedResource == null)     throw new NeedsRefreshException(null);
    cachedResource.render(multipleOutput);
  }
 catch (  NeedsRefreshException e) {
    boolean cacheUpdated=false;
    try {
      MemoryOutput memoryOutput=null;
      if (baseURL != null)       httpResource=getResourceFromHttp(httpUrl);
      if (httpResource != null) {
        if (useCache) {
          memoryOutput=new MemoryOutput(cacheMaxFileSize);
          multipleOutput.addOutput(memoryOutput);
        }
        if (putInCache)         multipleOutput.addOutput(new FileOutput(fileUrl));
        httpResource.render(multipleOutput);
      }
 else       if (cachedResource != null) {
        cachedResource.render(multipleOutput);
      }
 else {
        fileResource=getResourceFromLocal(fileUrl);
        if (fileResource == null)         throw new ResourceNotFoundException(relUrl);
        if (useCache) {
          memoryOutput=new MemoryOutput(cacheMaxFileSize);
          multipleOutput.addOutput(memoryOutput);
        }
        fileResource.render(multipleOutput);
      }
      if (memoryOutput != null) {
        cachedResource=memoryOutput.toResource();
        cache.putInCache(httpUrl,cachedResource);
        cacheUpdated=true;
        if (cachedResource != null)         cachedResource.release();
        if (httpResource != null)         httpResource.release();
        if (fileResource != null)         fileResource.release();
      }
    }
  finally {
      if (useCache && !cacheUpdated)       if (cachedResource != null)       cache.putInCache(httpUrl,cachedResource);
 else       cache.cancelUpdate(httpUrl);
    }
  }
}","private final void renderResource(String relUrl,Output output,Context context) throws IOException, ResourceNotFoundException {
  String httpUrl=getUrlForHttpResource(relUrl,context);
  String fileUrl=getUrlForFileResource(relUrl,context);
  MultipleOutput multipleOutput=new MultipleOutput();
  multipleOutput.addOutput(output);
  MemoryResource cachedResource=null;
  HttpResource httpResource=null;
  FileResource fileResource=null;
  try {
    if (useCache) {
      cachedResource=(MemoryResource)cache.getFromCache(httpUrl);
      cachedResource=(MemoryResource)cache.getFromCache(httpUrl,cacheRefreshDelay);
    }
    if (cachedResource == null)     throw new NeedsRefreshException(null);
    cachedResource.render(multipleOutput);
  }
 catch (  NeedsRefreshException e) {
    try {
      MemoryOutput memoryOutput=null;
      if (baseURL != null)       httpResource=getResourceFromHttp(httpUrl);
      if (httpResource != null) {
        if (useCache) {
          memoryOutput=new MemoryOutput(cacheMaxFileSize);
          multipleOutput.addOutput(memoryOutput);
        }
        if (putInCache)         multipleOutput.addOutput(new FileOutput(fileUrl));
        httpResource.render(multipleOutput);
      }
 else       if (cachedResource != null) {
        cachedResource.render(multipleOutput);
      }
 else {
        fileResource=getResourceFromLocal(fileUrl);
        if (fileResource == null)         throw new ResourceNotFoundException(relUrl);
        if (useCache) {
          memoryOutput=new MemoryOutput(cacheMaxFileSize);
          multipleOutput.addOutput(memoryOutput);
        }
        fileResource.render(multipleOutput);
      }
      if (memoryOutput != null) {
        cachedResource=memoryOutput.toResource();
        if (cachedResource != null)         cachedResource.release();
        if (httpResource != null)         httpResource.release();
        if (fileResource != null)         fileResource.release();
      }
    }
  finally {
      if (useCache)       if (cachedResource != null)       cache.putInCache(httpUrl,cachedResource);
 else       cache.cancelUpdate(httpUrl);
    }
  }
}",0.8255494505494505
35864,"public ParsedDateComponent(ParsedDateComponent other){
  this.impliedValues.putAll(other.knownValues);
  this.impliedValues.putAll(other.impliedValues);
}","public ParsedDateComponent(ParsedDateComponent other){
  this.knownValues.putAll(other.knownValues);
  this.impliedValues.putAll(other.impliedValues);
}",0.9607843137254902
35865,"@Override protected ParsedResult extract(String text,Date refDate,Matcher matcher,ChronoOptions options){
  Calendar calendar=Calendar.getInstance();
  calendar.setTime(refDate);
  if (matcher.group(2) == null && matcher.group(11) == null && matcher.group(6) == null)   return null;
  ParsedResult result=new ParsedResult();
  result.start.imply(Components.DayOfMonth,calendar.get(Calendar.DAY_OF_MONTH));
  result.start.imply(Components.Month,calendar.get(Calendar.MONTH) + 1);
  result.start.imply(Components.Year,calendar.get(Calendar.YEAR));
  int hour=0;
  int minute=0;
  int second=0;
  int meridiem=-1;
  if (matcher.group(3).toLowerCase().equals(""String_Node_Str"")) {
    meridiem=1;
    hour=12;
  }
 else   if (matcher.group(3).toLowerCase().equals(""String_Node_Str"")) {
    meridiem=0;
    hour=0;
  }
 else {
    hour=Integer.parseInt(matcher.group(3));
  }
  if (matcher.group(6) != null) {
    minute=Integer.parseInt(matcher.group(6));
    if (minute >= 60)     return null;
  }
 else   if (hour > 100) {
    minute=hour % 100;
    hour=hour / 100;
  }
  if (matcher.group(9) != null) {
    second=Integer.parseInt(matcher.group(9));
    if (second >= 60)     return null;
  }
  if (matcher.group(11) != null) {
    if (hour > 12)     return null;
    if (matcher.group(11).toLowerCase().equals(""String_Node_Str"")) {
      meridiem=0;
      if (hour == 12)       hour=0;
    }
    if (matcher.group(11).toLowerCase().equals(""String_Node_Str"")) {
      meridiem=1;
      if (hour != 12)       hour+=12;
    }
  }
  if (hour > 24)   return null;
  if (hour >= 12)   meridiem=1;
  result.index=matcher.start() + matcher.group(1).length();
  result.text=matcher.group().substring(matcher.group(1).length());
  result.start.assign(Components.Hour,hour);
  result.start.assign(Components.Minute,minute);
  result.start.assign(Components.Second,second);
  if (meridiem >= 0)   result.start.assign(Components.Meridiem,meridiem);
  Pattern secondPattern=Pattern.compile(SECOND_REG_PATTERN,Pattern.CASE_INSENSITIVE);
  matcher=secondPattern.matcher(text.substring(result.index + result.text.length()));
  if (!matcher.find()) {
    return result;
  }
  meridiem=-1;
  minute=0;
  second=0;
  hour=Integer.parseInt(matcher.group(2));
  if (matcher.group(5) != null) {
    minute=Integer.parseInt(matcher.group(5));
    if (minute >= 60)     return result;
  }
 else   if (hour > 100) {
    minute=hour % 100;
    hour=hour / 100;
  }
  if (matcher.group(8) != null) {
    second=Integer.parseInt(matcher.group(8));
    if (second >= 60)     return result;
  }
  if (matcher.group(10) != null) {
    if (hour > 12)     return result;
    if (matcher.group(10).toLowerCase().equals(""String_Node_Str"")) {
      if (hour == 12) {
        hour=0;
        if (result.end == null) {
          result.end=new ParsedDateComponent(result.start);
        }
        result.end.assign(Components.DayOfMonth,result.end.get(Components.DayOfMonth) + 1);
      }
    }
    if (matcher.group(10).toLowerCase().equals(""String_Node_Str"")) {
      if (hour != 12)       hour+=12;
    }
    if (!result.start.isCertain(Components.Meridiem)) {
      if (matcher.group(10).toLowerCase().equals(""String_Node_Str"")) {
        result.start.imply(Components.Meridiem,0);
        if (result.start.get(Components.Hour) == 12)         result.start.assign(Components.Hour,0);
      }
      if (matcher.group(10).toLowerCase().equals(""String_Node_Str"")) {
        result.start.imply(Components.Meridiem,1);
        if (result.start.get(Components.Hour) != 12)         result.start.assign(Components.Hour,result.start.get(Components.Hour) + 12);
      }
    }
  }
  if (hour >= 12)   meridiem=1;
  result.text=result.text + matcher.group();
  if (result.end == null) {
    result.end=new ParsedDateComponent(result.start);
  }
  result.end.assign(Components.Hour,hour);
  result.end.assign(Components.Minute,minute);
  result.end.assign(Components.Second,second);
  if (meridiem >= 0)   result.end.assign(Components.Meridiem,meridiem);
  return result;
}","@Override protected ParsedResult extract(String text,Date refDate,Matcher matcher,ChronoOptions options){
  Calendar calendar=Calendar.getInstance();
  calendar.setTime(refDate);
  if (matcher.group(2) == null && matcher.group(11) == null && matcher.group(6) == null)   return null;
  ParsedResult result=new ParsedResult();
  result.start.imply(Components.DayOfMonth,calendar.get(Calendar.DAY_OF_MONTH));
  result.start.imply(Components.Month,calendar.get(Calendar.MONTH) + 1);
  result.start.imply(Components.Year,calendar.get(Calendar.YEAR));
  int hour=0;
  int minute=0;
  int second=0;
  int meridiem=-1;
  if (matcher.group(3).toLowerCase().equals(""String_Node_Str"")) {
    meridiem=1;
    hour=12;
  }
 else   if (matcher.group(3).toLowerCase().equals(""String_Node_Str"")) {
    meridiem=0;
    hour=0;
  }
 else {
    hour=Integer.parseInt(matcher.group(3));
  }
  if (matcher.group(6) != null) {
    minute=Integer.parseInt(matcher.group(6));
    if (minute >= 60)     return null;
  }
 else   if (hour > 100) {
    minute=hour % 100;
    hour=hour / 100;
  }
  if (matcher.group(9) != null) {
    second=Integer.parseInt(matcher.group(9));
    if (second >= 60)     return null;
  }
  if (matcher.group(11) != null) {
    if (hour > 12)     return null;
    if (matcher.group(11).replace(""String_Node_Str"",""String_Node_Str"").toLowerCase().equals(""String_Node_Str"")) {
      meridiem=0;
      if (hour == 12)       hour=0;
    }
    if (matcher.group(11).replace(""String_Node_Str"",""String_Node_Str"").toLowerCase().equals(""String_Node_Str"")) {
      meridiem=1;
      if (hour != 12)       hour+=12;
    }
  }
  if (hour > 24)   return null;
  if (hour >= 12)   meridiem=1;
  result.index=matcher.start() + matcher.group(1).length();
  result.text=matcher.group().substring(matcher.group(1).length());
  result.start.assign(Components.Hour,hour);
  result.start.assign(Components.Minute,minute);
  result.start.assign(Components.Second,second);
  if (meridiem >= 0)   result.start.assign(Components.Meridiem,meridiem);
  Pattern secondPattern=Pattern.compile(SECOND_REG_PATTERN,Pattern.CASE_INSENSITIVE);
  matcher=secondPattern.matcher(text.substring(result.index + result.text.length()));
  if (!matcher.find()) {
    return result;
  }
  meridiem=-1;
  minute=0;
  second=0;
  hour=Integer.parseInt(matcher.group(2));
  if (matcher.group(5) != null) {
    minute=Integer.parseInt(matcher.group(5));
    if (minute >= 60)     return result;
  }
 else   if (hour > 100) {
    minute=hour % 100;
    hour=hour / 100;
  }
  if (matcher.group(8) != null) {
    second=Integer.parseInt(matcher.group(8));
    if (second >= 60)     return result;
  }
  if (matcher.group(10) != null) {
    if (hour > 12)     return result;
    if (matcher.group(10).toLowerCase().equals(""String_Node_Str"")) {
      if (hour == 12) {
        hour=0;
        if (result.end == null) {
          result.end=new ParsedDateComponent(result.start);
        }
        result.end.assign(Components.DayOfMonth,result.end.get(Components.DayOfMonth) + 1);
      }
    }
    if (matcher.group(10).toLowerCase().equals(""String_Node_Str"")) {
      if (hour != 12)       hour+=12;
    }
    if (!result.start.isCertain(Components.Meridiem)) {
      if (matcher.group(10).toLowerCase().equals(""String_Node_Str"")) {
        result.start.imply(Components.Meridiem,0);
        if (result.start.get(Components.Hour) == 12)         result.start.assign(Components.Hour,0);
      }
      if (matcher.group(10).toLowerCase().equals(""String_Node_Str"")) {
        result.start.imply(Components.Meridiem,1);
        if (result.start.get(Components.Hour) != 12)         result.start.assign(Components.Hour,result.start.get(Components.Hour) + 12);
      }
    }
  }
  if (hour >= 12)   meridiem=1;
  result.text=result.text + matcher.group();
  if (result.end == null) {
    result.end=new ParsedDateComponent(result.start);
  }
  result.end.assign(Components.Hour,hour);
  result.end.assign(Components.Minute,minute);
  result.end.assign(Components.Second,second);
  if (meridiem >= 0)   result.end.assign(Components.Meridiem,meridiem);
  return result;
}",0.984029484029484
35866,"protected static ParsedResult mergeResult(String text,ParsedResult dateResult,ParsedResult timeResult){
  ParsedDateComponent beginDate=dateResult.start;
  ParsedDateComponent beginTime=timeResult.start;
  ParsedDateComponent beginDateTime=new ParsedDateComponent(beginDate);
  beginDateTime.assign(Components.Hour,beginTime.get(Components.Hour));
  beginDateTime.assign(Components.Minute,beginTime.get(Components.Minute));
  beginDateTime.assign(Components.Second,beginTime.get(Components.Second));
  dateResult.start=beginDateTime;
  if (dateResult.end != null || timeResult.end != null) {
    ParsedDateComponent endDate=dateResult.end == null ? dateResult.start : dateResult.end;
    ParsedDateComponent endTime=timeResult.end == null ? timeResult.start : timeResult.end;
    ParsedDateComponent endDateTime=new ParsedDateComponent(endDate);
    endDateTime.assign(Components.Hour,endTime.get(Components.Hour));
    endDateTime.assign(Components.Minute,endTime.get(Components.Minute));
    endDateTime.assign(Components.Second,endTime.get(Components.Second));
    dateResult.end=endDateTime;
  }
  int startIndex=Math.min(dateResult.index,timeResult.index);
  int endIndex=Math.max(dateResult.index + dateResult.text.length(),timeResult.index + timeResult.text.length());
  dateResult.index=startIndex;
  dateResult.text=text.substring(startIndex,endIndex);
  return dateResult;
}","protected static ParsedResult mergeResult(String text,ParsedResult dateResult,ParsedResult timeResult){
  ParsedDateComponent beginDate=dateResult.start;
  ParsedDateComponent beginTime=timeResult.start;
  ParsedDateComponent beginDateTime=new ParsedDateComponent(beginDate);
  beginDateTime.assign(Components.Hour,beginTime.get(Components.Hour));
  beginDateTime.assign(Components.Minute,beginTime.get(Components.Minute));
  beginDateTime.assign(Components.Second,beginTime.get(Components.Second));
  if (beginTime.isCertain(Components.Meridiem))   beginDateTime.assign(Components.Meridiem,beginTime.get(Components.Meridiem));
 else   if (beginTime.get(Components.Meridiem) != null)   beginDateTime.imply(Components.Meridiem,beginTime.get(Components.Meridiem));
  dateResult.start=beginDateTime;
  if (dateResult.end != null || timeResult.end != null) {
    ParsedDateComponent endDate=dateResult.end == null ? dateResult.start : dateResult.end;
    ParsedDateComponent endTime=timeResult.end == null ? timeResult.start : timeResult.end;
    ParsedDateComponent endDateTime=new ParsedDateComponent(endDate);
    endDateTime.assign(Components.Hour,endTime.get(Components.Hour));
    endDateTime.assign(Components.Minute,endTime.get(Components.Minute));
    endDateTime.assign(Components.Second,endTime.get(Components.Second));
    if (endTime.isCertain(Components.Meridiem))     endDateTime.assign(Components.Meridiem,endTime.get(Components.Meridiem));
 else     if (beginTime.get(Components.Meridiem) != null)     endDateTime.imply(Components.Meridiem,endTime.get(Components.Meridiem));
    dateResult.end=endDateTime;
  }
  int startIndex=Math.min(dateResult.index,timeResult.index);
  int endIndex=Math.max(dateResult.index + dateResult.text.length(),timeResult.index + timeResult.text.length());
  dateResult.index=startIndex;
  dateResult.text=text.substring(startIndex,endIndex);
  return dateResult;
}",0.8408262454434994
35867,"@Test public void testWithSingleDateExpression() throws IOException {
  refDate=createDate(2014,4,20,12,0);
  results=Chrono.Parse(""String_Node_Str"",refDate);
  assertEquals(""String_Node_Str"",results.get(0).text);
  assertDateEquals(createDate(2014,4,18,3,0),results.get(0).start);
  refDate=createDate(2014,4,20,12,0);
  results=Chrono.Parse(""String_Node_Str"",refDate);
  assertEquals(""String_Node_Str"",results.get(0).text);
  assertDateEquals(createDate(2014,4,18,15,0),results.get(0).start);
  refDate=createDate(2014,4,20,12,0);
  results=Chrono.Parse(""String_Node_Str"",refDate);
  assertEquals(""String_Node_Str"",results.get(0).text);
  assertDateEquals(createDate(2014,4,18,13,0),results.get(0).start);
  refDate=createDate(2014,4,20,12,0);
  results=Chrono.Parse(""String_Node_Str"",refDate);
  assertEquals(""String_Node_Str"",results.get(0).text);
  assertDateEquals(createDate(2014,4,18,13,0),results.get(0).start);
  refDate=createDate(2014,4,20,12,0);
  results=Chrono.Parse(""String_Node_Str"",refDate);
  assertEquals(""String_Node_Str"",results.get(0).text);
  assertDateEquals(createDate(2014,4,18,7,0),results.get(0).start);
  refDate=createDate(2014,4,20,12,0);
  results=Chrono.Parse(""String_Node_Str"",refDate);
  assertEquals(""String_Node_Str"",results.get(0).text);
  assertDateEquals(createDate(2014,4,18,13,0),results.get(0).start);
  refDate=createDate(2014,4,20,12,0);
  results=Chrono.Parse(""String_Node_Str"",refDate);
  assertEquals(""String_Node_Str"",results.get(0).text);
  assertDateEquals(createDate(2014,4,18,13,0),results.get(0).start);
  refDate=createDate(2014,4,20,12,0);
  results=Chrono.Parse(""String_Node_Str"",refDate);
  assertEquals(""String_Node_Str"",results.get(0).text);
  assertDateEquals(createDate(2014,4,20,13,0),results.get(0).start);
  assertEquals(""String_Node_Str"",results.get(1).text);
  assertDateEquals(createDate(2014,4,18,12,0),results.get(1).start);
}","@Test public void testWithSingleDateExpression() throws IOException {
  refDate=createDate(2014,4,20,12,0);
  results=Chrono.Parse(""String_Node_Str"",refDate);
  assertEquals(""String_Node_Str"",results.get(0).text);
  assertDateEquals(createDate(2014,4,18,3,0),results.get(0).start);
  refDate=createDate(2014,4,20,12,0);
  results=Chrono.Parse(""String_Node_Str"",refDate);
  assertEquals(""String_Node_Str"",results.get(0).text);
  assertDateEquals(createDate(2014,4,18,15,0),results.get(0).start);
  refDate=createDate(2014,4,20,12,0);
  results=Chrono.Parse(""String_Node_Str"",refDate);
  assertEquals(""String_Node_Str"",results.get(0).text);
  assertDateEquals(createDate(2014,4,18,18,56),results.get(0).start);
  refDate=createDate(2014,4,20,12,0);
  results=Chrono.Parse(""String_Node_Str"",refDate);
  assertEquals(""String_Node_Str"",results.get(0).text);
  assertDateEquals(createDate(2014,4,18,18,56),results.get(0).start);
  refDate=createDate(2014,4,20,12,0);
  results=Chrono.Parse(""String_Node_Str"",refDate);
  assertEquals(""String_Node_Str"",results.get(0).text);
  assertDateEquals(createDate(2014,4,18,13,0),results.get(0).start);
  refDate=createDate(2014,4,20,12,0);
  results=Chrono.Parse(""String_Node_Str"",refDate);
  assertEquals(""String_Node_Str"",results.get(0).text);
  assertDateEquals(createDate(2014,4,18,13,0),results.get(0).start);
  refDate=createDate(2014,4,20,12,0);
  results=Chrono.Parse(""String_Node_Str"",refDate);
  assertEquals(""String_Node_Str"",results.get(0).text);
  assertDateEquals(createDate(2014,4,18,7,0),results.get(0).start);
  refDate=createDate(2014,4,20,12,0);
  results=Chrono.Parse(""String_Node_Str"",refDate);
  assertEquals(""String_Node_Str"",results.get(0).text);
  assertDateEquals(createDate(2014,4,18,13,0),results.get(0).start);
  refDate=createDate(2014,4,20,12,0);
  results=Chrono.Parse(""String_Node_Str"",refDate);
  assertEquals(""String_Node_Str"",results.get(0).text);
  assertDateEquals(createDate(2014,4,18,13,0),results.get(0).start);
  refDate=createDate(2014,4,20,12,0);
  results=Chrono.Parse(""String_Node_Str"",refDate);
  assertEquals(""String_Node_Str"",results.get(0).text);
  assertDateEquals(createDate(2014,4,20,13,0),results.get(0).start);
  assertEquals(""String_Node_Str"",results.get(1).text);
  assertDateEquals(createDate(2014,4,18,12,0),results.get(1).start);
}",0.8929417337754618
35868,"@Override protected ParsedResult extract(String text,Date refDate,Matcher matcher,ChronoOptions options){
  Calendar calendar=Calendar.getInstance();
  calendar.setTime(refDate);
  if (matcher.group(2) == null && matcher.group(11) == null && matcher.group(6) == null)   return null;
  ParsedResult result=new ParsedResult();
  result.start.imply(Components.DayOfMonth,calendar.get(Calendar.DAY_OF_MONTH));
  result.start.imply(Components.Month,calendar.get(Calendar.MONTH) + 1);
  result.start.imply(Components.Year,calendar.get(Calendar.YEAR));
  int hour=0;
  int minute=0;
  int second=0;
  int meridiem=-1;
  if (matcher.group(3).toLowerCase().equals(""String_Node_Str"")) {
    meridiem=1;
    hour=12;
  }
 else   if (matcher.group(3).toLowerCase().equals(""String_Node_Str"")) {
    meridiem=0;
    hour=0;
  }
 else {
    hour=Integer.parseInt(matcher.group(3));
  }
  if (matcher.group(6) != null) {
    minute=Integer.parseInt(matcher.group(6));
    if (minute >= 60)     return null;
  }
 else   if (hour > 100) {
    minute=hour % 100;
    hour=hour / 100;
  }
  if (matcher.group(9) != null) {
    second=Integer.parseInt(matcher.group(9));
    if (second >= 60)     return result;
  }
  if (matcher.group(11) != null) {
    if (hour > 12)     return null;
    if (matcher.group(11).toLowerCase().equals(""String_Node_Str"")) {
      meridiem=0;
      if (hour == 12)       hour=0;
    }
    if (matcher.group(11).toLowerCase().equals(""String_Node_Str"")) {
      meridiem=1;
      if (hour != 12)       hour+=12;
    }
  }
  if (hour > 24)   return null;
  if (hour >= 12)   meridiem=1;
  result.index=matcher.start() + matcher.group(1).length();
  result.text=matcher.group().substring(matcher.group(1).length(),matcher.group().length() - matcher.group(12).length());
  if (!result.start.isCertain(Components.Hour)) {
    result.start.assign(Components.Hour,hour);
    result.start.assign(Components.Minute,minute);
    result.start.assign(Components.Second,second);
    if (meridiem >= 0)     result.start.assign(Components.Meridiem,meridiem);
  }
  Pattern secondPattern=Pattern.compile(SECOND_REG_PATTERN,Pattern.CASE_INSENSITIVE);
  matcher=secondPattern.matcher(text);
  if (!matcher.find(result.index + result.text.length())) {
    return result;
  }
  meridiem=-1;
  minute=0;
  second=0;
  hour=Integer.parseInt(matcher.group(2));
  if (matcher.group(5) != null) {
    minute=Integer.parseInt(matcher.group(5));
    if (minute >= 60)     return result;
  }
 else   if (hour > 100) {
    if (matcher.group(10) == null)     return result;
    minute=hour % 100;
    hour=hour / 100;
  }
  if (matcher.group(8) != null) {
    second=Integer.parseInt(matcher.group(8));
    if (second >= 60)     return result;
  }
  if (matcher.group(10) != null) {
    if (hour > 12)     return result;
    if (matcher.group(10).toLowerCase().equals(""String_Node_Str"")) {
      if (hour == 12) {
        hour=0;
        if (result.end == null) {
          result.end=new ParsedDateComponent(result.start);
        }
        result.end.assign(Components.DayOfMonth,result.end.get(Components.DayOfMonth) + 1);
      }
    }
    if (matcher.group(10).toLowerCase().equals(""String_Node_Str"")) {
      if (hour != 12)       hour+=12;
    }
    if (!result.start.isCertain(Components.Meridiem)) {
      if (matcher.group(10).toLowerCase().equals(""String_Node_Str"")) {
        result.start.imply(Components.Meridiem,0);
        if (result.start.get(Components.Hour) == 12)         result.start.assign(Components.Hour,0);
      }
      if (matcher.group(10).toLowerCase().equals(""String_Node_Str"")) {
        result.start.imply(Components.Meridiem,1);
        if (result.start.get(Components.Hour) != 12)         result.start.assign(Components.Hour,result.start.get(Components.Hour) + 12);
      }
    }
  }
  if (hour >= 12)   meridiem=1;
  result.text=result.text + matcher.group();
  if (result.end == null) {
    result.end=new ParsedDateComponent(result.start);
  }
  result.end.assign(Components.Hour,hour);
  result.end.assign(Components.Minute,minute);
  result.end.assign(Components.Second,second);
  if (meridiem >= 0)   result.end.assign(Components.Meridiem,meridiem);
  return result;
}","@Override protected ParsedResult extract(String text,Date refDate,Matcher matcher,ChronoOptions options){
  Calendar calendar=Calendar.getInstance();
  calendar.setTime(refDate);
  if (matcher.group(2) == null && matcher.group(11) == null && matcher.group(6) == null)   return null;
  ParsedResult result=new ParsedResult();
  result.start.imply(Components.DayOfMonth,calendar.get(Calendar.DAY_OF_MONTH));
  result.start.imply(Components.Month,calendar.get(Calendar.MONTH) + 1);
  result.start.imply(Components.Year,calendar.get(Calendar.YEAR));
  int hour=0;
  int minute=0;
  int second=0;
  int meridiem=-1;
  if (matcher.group(3).toLowerCase().equals(""String_Node_Str"")) {
    meridiem=1;
    hour=12;
  }
 else   if (matcher.group(3).toLowerCase().equals(""String_Node_Str"")) {
    meridiem=0;
    hour=0;
  }
 else {
    hour=Integer.parseInt(matcher.group(3));
  }
  if (matcher.group(6) != null) {
    minute=Integer.parseInt(matcher.group(6));
    if (minute >= 60)     return null;
  }
 else   if (hour > 100) {
    minute=hour % 100;
    hour=hour / 100;
  }
  if (matcher.group(9) != null) {
    second=Integer.parseInt(matcher.group(9));
    if (second >= 60)     return null;
  }
  if (matcher.group(11) != null) {
    if (hour > 12)     return null;
    if (matcher.group(11).toLowerCase().equals(""String_Node_Str"")) {
      meridiem=0;
      if (hour == 12)       hour=0;
    }
    if (matcher.group(11).toLowerCase().equals(""String_Node_Str"")) {
      meridiem=1;
      if (hour != 12)       hour+=12;
    }
  }
  if (hour > 24)   return null;
  if (hour >= 12)   meridiem=1;
  result.index=matcher.start() + matcher.group(1).length();
  result.text=matcher.group().substring(matcher.group(1).length(),matcher.group().length() - matcher.group(12).length());
  result.start.assign(Components.Hour,hour);
  result.start.assign(Components.Minute,minute);
  result.start.assign(Components.Second,second);
  if (meridiem >= 0)   result.start.assign(Components.Meridiem,meridiem);
  Pattern secondPattern=Pattern.compile(SECOND_REG_PATTERN,Pattern.CASE_INSENSITIVE);
  matcher=secondPattern.matcher(text);
  if (!matcher.find(result.index + result.text.length())) {
    return result;
  }
  meridiem=-1;
  minute=0;
  second=0;
  hour=Integer.parseInt(matcher.group(2));
  if (matcher.group(5) != null) {
    minute=Integer.parseInt(matcher.group(5));
    if (minute >= 60)     return result;
  }
 else   if (hour > 100) {
    minute=hour % 100;
    hour=hour / 100;
  }
  if (matcher.group(8) != null) {
    second=Integer.parseInt(matcher.group(8));
    if (second >= 60)     return result;
  }
  if (matcher.group(10) != null) {
    if (hour > 12)     return result;
    if (matcher.group(10).toLowerCase().equals(""String_Node_Str"")) {
      if (hour == 12) {
        hour=0;
        if (result.end == null) {
          result.end=new ParsedDateComponent(result.start);
        }
        result.end.assign(Components.DayOfMonth,result.end.get(Components.DayOfMonth) + 1);
      }
    }
    if (matcher.group(10).toLowerCase().equals(""String_Node_Str"")) {
      if (hour != 12)       hour+=12;
    }
    if (!result.start.isCertain(Components.Meridiem)) {
      if (matcher.group(10).toLowerCase().equals(""String_Node_Str"")) {
        result.start.imply(Components.Meridiem,0);
        if (result.start.get(Components.Hour) == 12)         result.start.assign(Components.Hour,0);
      }
      if (matcher.group(10).toLowerCase().equals(""String_Node_Str"")) {
        result.start.imply(Components.Meridiem,1);
        if (result.start.get(Components.Hour) != 12)         result.start.assign(Components.Hour,result.start.get(Components.Hour) + 12);
      }
    }
  }
  if (hour >= 12)   meridiem=1;
  result.text=result.text + matcher.group();
  if (result.end == null) {
    result.end=new ParsedDateComponent(result.start);
  }
  result.end.assign(Components.Hour,hour);
  result.end.assign(Components.Minute,minute);
  result.end.assign(Components.Second,second);
  if (meridiem >= 0)   result.end.assign(Components.Meridiem,meridiem);
  return result;
}",0.9532347952507876
35869,"@Override protected ParsedResult extract(String text,Date refDate,Matcher matcher,ChronoOptions options){
  Calendar calendar=Calendar.getInstance();
  calendar.setTime(refDate);
  if (matcher.group(2) == null && matcher.group(11) == null && matcher.group(6) == null)   return null;
  ParsedResult result=new ParsedResult();
  result.start.imply(Components.DayOfMonth,calendar.get(Calendar.DAY_OF_MONTH));
  result.start.imply(Components.Month,calendar.get(Calendar.MONTH) + 1);
  result.start.imply(Components.Year,calendar.get(Calendar.YEAR));
  int hour=0;
  int minute=0;
  int second=0;
  int meridiem=-1;
  if (matcher.group(3).toLowerCase().equals(""String_Node_Str"")) {
    meridiem=1;
    hour=12;
  }
 else   if (matcher.group(3).toLowerCase().equals(""String_Node_Str"")) {
    meridiem=0;
    hour=0;
  }
 else {
    hour=Integer.parseInt(matcher.group(3));
  }
  if (matcher.group(6) != null) {
    minute=Integer.parseInt(matcher.group(6));
    if (minute >= 60)     return null;
  }
 else   if (hour > 100) {
    minute=hour % 100;
    hour=hour / 100;
  }
  if (matcher.group(9) != null) {
    second=Integer.parseInt(matcher.group(9));
    if (second >= 60)     return null;
  }
  if (matcher.group(11) != null) {
    if (hour > 12)     return null;
    if (matcher.group(11).toLowerCase().equals(""String_Node_Str"")) {
      meridiem=0;
      if (hour == 12)       hour=0;
    }
    if (matcher.group(11).toLowerCase().equals(""String_Node_Str"")) {
      meridiem=1;
      if (hour != 12)       hour+=12;
    }
  }
  if (hour > 24)   return null;
  if (hour >= 12)   meridiem=1;
  result.index=matcher.start() + matcher.group(1).length();
  result.text=matcher.group().substring(matcher.group(1).length(),matcher.group().length() - matcher.group(12).length());
  result.start.assign(Components.Hour,hour);
  result.start.assign(Components.Minute,minute);
  result.start.assign(Components.Second,second);
  if (meridiem >= 0)   result.start.assign(Components.Meridiem,meridiem);
  Pattern secondPattern=Pattern.compile(SECOND_REG_PATTERN,Pattern.CASE_INSENSITIVE);
  matcher=secondPattern.matcher(text.substring(result.index + result.text.length()));
  if (!matcher.find()) {
    return result;
  }
  meridiem=-1;
  minute=0;
  second=0;
  hour=Integer.parseInt(matcher.group(2));
  if (matcher.group(5) != null) {
    minute=Integer.parseInt(matcher.group(5));
    if (minute >= 60)     return result;
  }
 else   if (hour > 100) {
    minute=hour % 100;
    hour=hour / 100;
  }
  if (matcher.group(8) != null) {
    second=Integer.parseInt(matcher.group(8));
    if (second >= 60)     return result;
  }
  if (matcher.group(10) != null) {
    if (hour > 12)     return result;
    if (matcher.group(10).toLowerCase().equals(""String_Node_Str"")) {
      if (hour == 12) {
        hour=0;
        if (result.end == null) {
          result.end=new ParsedDateComponent(result.start);
        }
        result.end.assign(Components.DayOfMonth,result.end.get(Components.DayOfMonth) + 1);
      }
    }
    if (matcher.group(10).toLowerCase().equals(""String_Node_Str"")) {
      if (hour != 12)       hour+=12;
    }
    if (!result.start.isCertain(Components.Meridiem)) {
      if (matcher.group(10).toLowerCase().equals(""String_Node_Str"")) {
        result.start.imply(Components.Meridiem,0);
        if (result.start.get(Components.Hour) == 12)         result.start.assign(Components.Hour,0);
      }
      if (matcher.group(10).toLowerCase().equals(""String_Node_Str"")) {
        result.start.imply(Components.Meridiem,1);
        if (result.start.get(Components.Hour) != 12)         result.start.assign(Components.Hour,result.start.get(Components.Hour) + 12);
      }
    }
  }
  if (hour >= 12)   meridiem=1;
  result.text=result.text + matcher.group();
  if (result.end == null) {
    result.end=new ParsedDateComponent(result.start);
  }
  result.end.assign(Components.Hour,hour);
  result.end.assign(Components.Minute,minute);
  result.end.assign(Components.Second,second);
  if (meridiem >= 0)   result.end.assign(Components.Meridiem,meridiem);
  return result;
}","@Override protected ParsedResult extract(String text,Date refDate,Matcher matcher,ChronoOptions options){
  Calendar calendar=Calendar.getInstance();
  calendar.setTime(refDate);
  if (matcher.group(2) == null && matcher.group(11) == null && matcher.group(6) == null)   return null;
  ParsedResult result=new ParsedResult();
  result.start.imply(Components.DayOfMonth,calendar.get(Calendar.DAY_OF_MONTH));
  result.start.imply(Components.Month,calendar.get(Calendar.MONTH) + 1);
  result.start.imply(Components.Year,calendar.get(Calendar.YEAR));
  int hour=0;
  int minute=0;
  int second=0;
  int meridiem=-1;
  if (matcher.group(3).toLowerCase().equals(""String_Node_Str"")) {
    meridiem=1;
    hour=12;
  }
 else   if (matcher.group(3).toLowerCase().equals(""String_Node_Str"")) {
    meridiem=0;
    hour=0;
  }
 else {
    hour=Integer.parseInt(matcher.group(3));
  }
  if (matcher.group(6) != null) {
    minute=Integer.parseInt(matcher.group(6));
    if (minute >= 60)     return null;
  }
 else   if (hour > 100) {
    minute=hour % 100;
    hour=hour / 100;
  }
  if (matcher.group(9) != null) {
    second=Integer.parseInt(matcher.group(9));
    if (second >= 60)     return null;
  }
  if (matcher.group(11) != null) {
    if (hour > 12)     return null;
    if (matcher.group(11).toLowerCase().equals(""String_Node_Str"")) {
      meridiem=0;
      if (hour == 12)       hour=0;
    }
    if (matcher.group(11).toLowerCase().equals(""String_Node_Str"")) {
      meridiem=1;
      if (hour != 12)       hour+=12;
    }
  }
  if (hour > 24)   return null;
  if (hour >= 12)   meridiem=1;
  result.index=matcher.start() + matcher.group(1).length();
  result.text=matcher.group().substring(matcher.group(1).length());
  result.start.assign(Components.Hour,hour);
  result.start.assign(Components.Minute,minute);
  result.start.assign(Components.Second,second);
  if (meridiem >= 0)   result.start.assign(Components.Meridiem,meridiem);
  Pattern secondPattern=Pattern.compile(SECOND_REG_PATTERN,Pattern.CASE_INSENSITIVE);
  matcher=secondPattern.matcher(text.substring(result.index + result.text.length()));
  if (!matcher.find()) {
    return result;
  }
  meridiem=-1;
  minute=0;
  second=0;
  hour=Integer.parseInt(matcher.group(2));
  if (matcher.group(5) != null) {
    minute=Integer.parseInt(matcher.group(5));
    if (minute >= 60)     return result;
  }
 else   if (hour > 100) {
    minute=hour % 100;
    hour=hour / 100;
  }
  if (matcher.group(8) != null) {
    second=Integer.parseInt(matcher.group(8));
    if (second >= 60)     return result;
  }
  if (matcher.group(10) != null) {
    if (hour > 12)     return result;
    if (matcher.group(10).toLowerCase().equals(""String_Node_Str"")) {
      if (hour == 12) {
        hour=0;
        if (result.end == null) {
          result.end=new ParsedDateComponent(result.start);
        }
        result.end.assign(Components.DayOfMonth,result.end.get(Components.DayOfMonth) + 1);
      }
    }
    if (matcher.group(10).toLowerCase().equals(""String_Node_Str"")) {
      if (hour != 12)       hour+=12;
    }
    if (!result.start.isCertain(Components.Meridiem)) {
      if (matcher.group(10).toLowerCase().equals(""String_Node_Str"")) {
        result.start.imply(Components.Meridiem,0);
        if (result.start.get(Components.Hour) == 12)         result.start.assign(Components.Hour,0);
      }
      if (matcher.group(10).toLowerCase().equals(""String_Node_Str"")) {
        result.start.imply(Components.Meridiem,1);
        if (result.start.get(Components.Hour) != 12)         result.start.assign(Components.Hour,result.start.get(Components.Hour) + 12);
      }
    }
  }
  if (hour >= 12)   meridiem=1;
  result.text=result.text + matcher.group();
  if (result.end == null) {
    result.end=new ParsedDateComponent(result.start);
  }
  result.end.assign(Components.Hour,hour);
  result.end.assign(Components.Minute,minute);
  result.end.assign(Components.Second,second);
  if (meridiem >= 0)   result.end.assign(Components.Meridiem,meridiem);
  return result;
}",0.9933366238894372
35870,"/** 
 * This method parses an String containing network={} from 'wpa_supplicant.conf'
 */
@SuppressLint(""String_Node_Str"") private static void parse(List<String> configurationFile){
  Network network=null;
  for (  String string : configurationFile) {
    if (network == null) {
      if (string.startsWith(WIFI_BLOCK_START)) {
        network=new Network();
      }
 else {
      }
    }
 else {
      if (string.startsWith(WIFI_BLOCK_END)) {
        networks.add(network);
        network=null;
      }
 else {
        String[] entry=string.split(""String_Node_Str"");
        if (entry.length == 2) {
          try {
            entry[0]=entry[0].trim().toUpperCase();
            network.put(SupplicantKey.valueOf(entry[0]),entry[1].replace(""String_Node_Str"",""String_Node_Str""));
          }
 catch (          IllegalArgumentException iae) {
            WiFiKeyView.verboseLog(NetworkParser.class,""String_Node_Str"",""String_Node_Str"" + entry[0]);
          }
        }
 else {
          WiFiKeyView.verboseLog(NetworkParser.class,""String_Node_Str"",""String_Node_Str"" + string);
        }
      }
    }
  }
}","/** 
 * This method parses an String containing network={} from 'wpa_supplicant.conf'
 */
@SuppressLint(""String_Node_Str"") private static void parse(List<String> configurationFile){
  Network network=null;
  for (  String string : configurationFile) {
    if (network == null) {
      if (string.startsWith(WIFI_BLOCK_START)) {
        network=new Network();
      }
 else {
      }
    }
 else {
      if (string.startsWith(WIFI_BLOCK_END)) {
        networks.add(network);
        network=null;
      }
 else {
        int equalsChar=string.indexOf('=');
        String key=new String(string.substring(0,equalsChar).toUpperCase().trim());
        String value=new String(string.substring(equalsChar + 1).replace(""String_Node_Str"",""String_Node_Str"").trim());
        try {
          network.put(SupplicantKey.valueOf(key),value);
        }
 catch (        IllegalArgumentException iae) {
          WiFiKeyView.verboseLog(NetworkParser.class,""String_Node_Str"",""String_Node_Str"" + key);
        }
      }
    }
  }
}",0.7238454288407163
35871,"@Override public void onParserDone(List<Network> networkList){
  for (  Network network : networkList) {
    if (DBG) {
      Log.v(TAG,""String_Node_Str"" + network.getSsid());
      Log.v(TAG,""String_Node_Str"" + network.getPassword());
    }
    if (network.getSsid().equals(ssid)) {
      getDialog(context,ssid,network.getPassword()).show();
      break;
    }
  }
}","@Override public void onParserDone(List<Network> networkList){
  for (  Network network : networkList) {
    if (DBG) {
      XposedBridge.log(TAG + ""String_Node_Str"" + network.getSsid());
      XposedBridge.log(TAG + ""String_Node_Str"" + network.getPassword());
    }
    if (network.getSsid().equals(ssid)) {
      getDialog(context,ssid,network.getPassword()).show();
      break;
    }
  }
}",0.9343832020997376
35872,"private void setIds(Class<?> SettingsClazz){
  try {
    MENU_ID_MODIFY=XposedHelpers.getIntField(SettingsClazz,""String_Node_Str"");
    MENU_ID_SHOWPASSWORD=MENU_ID_MODIFY + 1;
  }
 catch (  Exception e) {
    try {
      MENU_ID_MODIFY=XposedHelpers.getIntField(SettingsClazz,""String_Node_Str"");
      MENU_ID_SHOWPASSWORD=MENU_ID_MODIFY + 1;
    }
 catch (    Exception e1) {
    }
  }
}","private void setIds(Class<?> SettingsClazz){
  try {
    Field modify=SettingsClazz.getDeclaredField(""String_Node_Str"");
    modify.setAccessible(true);
    MENU_ID_MODIFY=modify.getInt(null);
    MENU_ID_SHOWPASSWORD=MENU_ID_MODIFY + 1;
  }
 catch (  Exception e) {
    try {
      Field modify=SettingsClazz.getDeclaredField(""String_Node_Str"");
      modify.setAccessible(true);
      MENU_ID_MODIFY=modify.getInt(null);
      MENU_ID_SHOWPASSWORD=MENU_ID_MODIFY + 1;
    }
 catch (    Exception e1) {
    }
  }
  if (DBG) {
    XposedBridge.log(TAG + ""String_Node_Str"" + MENU_ID_MODIFY);
    XposedBridge.log(TAG + ""String_Node_Str"" + MENU_ID_SHOWPASSWORD);
  }
}",0.5213270142180095
35873,"@Override public void handleLoadPackage(final LoadPackageParam lpparam) throws Throwable {
  if (!lpparam.packageName.equals(""String_Node_Str""))   return;
  final Class<?> SettingsClazz=XposedHelpers.findClass(""String_Node_Str"",lpparam.classLoader);
  XposedHelpers.findAndHookMethod(SettingsClazz,""String_Node_Str"",ContextMenu.class,View.class,ContextMenuInfo.class,new XC_MethodHook(){
    @Override protected void afterHookedMethod(    MethodHookParam param) throws Throwable {
      setIds(SettingsClazz);
      if (((ContextMenu)param.args[0]).findItem(MENU_ID_MODIFY) != null) {
        ((ContextMenu)param.args[0]).add(Menu.NONE,Menu.FIRST + 9,3,""String_Node_Str"");
      }
    }
  }
);
  XposedHelpers.findAndHookMethod(SettingsClazz,""String_Node_Str"",MenuItem.class,new XC_MethodHook(){
    @Override protected void afterHookedMethod(    final MethodHookParam param) throws Throwable {
      MenuItem menuItem=(MenuItem)param.args[0];
      setIds(SettingsClazz);
      if (menuItem.getItemId() == MENU_ID_SHOWPASSWORD) {
        final Context context=(Context)((PreferenceFragment)param.thisObject).getActivity();
        int selectedListPosition=((AdapterContextMenuInfo)menuItem.getMenuInfo()).position;
        PreferenceFragment wifiPreferenceFragment=((PreferenceFragment)param.thisObject);
        View rawListView=wifiPreferenceFragment.getView().findViewById(android.R.id.list);
        if (!(rawListView instanceof ListView)) {
          throw new RuntimeException(""String_Node_Str"");
        }
        ListView mList=(ListView)rawListView;
        Preference pref=(Preference)mList.getAdapter().getItem(selectedListPosition);
        final String ssid=pref.getTitle().toString();
        if (DBG)         Log.v(TAG,""String_Node_Str"" + ssid);
        new NetworkParser(new NetworkListener(){
          @Override public void onParserDone(          List<Network> networkList){
            for (            Network network : networkList) {
              if (DBG) {
                Log.v(TAG,""String_Node_Str"" + network.getSsid());
                Log.v(TAG,""String_Node_Str"" + network.getPassword());
              }
              if (network.getSsid().equals(ssid)) {
                getDialog(context,ssid,network.getPassword()).show();
                break;
              }
            }
          }
        }
).execute();
        param.setResult(true);
      }
    }
  }
);
}","@Override public void handleLoadPackage(final LoadPackageParam lpparam) throws Throwable {
  if (!lpparam.packageName.equals(""String_Node_Str""))   return;
  final Class<?> SettingsClazz=XposedHelpers.findClass(""String_Node_Str"",lpparam.classLoader);
  XposedHelpers.findAndHookMethod(SettingsClazz,""String_Node_Str"",ContextMenu.class,View.class,ContextMenuInfo.class,new XC_MethodHook(){
    @Override protected void afterHookedMethod(    MethodHookParam param) throws Throwable {
      setIds(SettingsClazz);
      if (((ContextMenu)param.args[0]).findItem(MENU_ID_MODIFY) != null) {
        ((ContextMenu)param.args[0]).add(Menu.NONE,Menu.FIRST + 9,3,""String_Node_Str"");
      }
    }
  }
);
  XposedHelpers.findAndHookMethod(SettingsClazz,""String_Node_Str"",MenuItem.class,new XC_MethodHook(){
    @Override protected void afterHookedMethod(    final MethodHookParam param) throws Throwable {
      MenuItem menuItem=(MenuItem)param.args[0];
      setIds(SettingsClazz);
      if (menuItem.getItemId() == MENU_ID_SHOWPASSWORD) {
        final Context context=(Context)((PreferenceFragment)param.thisObject).getActivity();
        int selectedListPosition=((AdapterContextMenuInfo)menuItem.getMenuInfo()).position;
        PreferenceFragment wifiPreferenceFragment=((PreferenceFragment)param.thisObject);
        View rawListView=wifiPreferenceFragment.getView().findViewById(android.R.id.list);
        if (!(rawListView instanceof ListView)) {
          throw new RuntimeException(""String_Node_Str"");
        }
        ListView mList=(ListView)rawListView;
        Preference pref=(Preference)mList.getAdapter().getItem(selectedListPosition);
        final String ssid=pref.getTitle().toString();
        if (DBG)         XposedBridge.log(TAG + ""String_Node_Str"" + ssid);
        new NetworkParser(new NetworkListener(){
          @Override public void onParserDone(          List<Network> networkList){
            for (            Network network : networkList) {
              if (DBG) {
                XposedBridge.log(TAG + ""String_Node_Str"" + network.getSsid());
                XposedBridge.log(TAG + ""String_Node_Str"" + network.getPassword());
              }
              if (network.getSsid().equals(ssid)) {
                getDialog(context,ssid,network.getPassword()).show();
                break;
              }
            }
          }
        }
).execute();
        param.setResult(true);
      }
    }
  }
);
}",0.9844752639205132
35874,"@Override protected void afterHookedMethod(final MethodHookParam param) throws Throwable {
  MenuItem menuItem=(MenuItem)param.args[0];
  setIds(SettingsClazz);
  if (menuItem.getItemId() == MENU_ID_SHOWPASSWORD) {
    final Context context=(Context)((PreferenceFragment)param.thisObject).getActivity();
    int selectedListPosition=((AdapterContextMenuInfo)menuItem.getMenuInfo()).position;
    PreferenceFragment wifiPreferenceFragment=((PreferenceFragment)param.thisObject);
    View rawListView=wifiPreferenceFragment.getView().findViewById(android.R.id.list);
    if (!(rawListView instanceof ListView)) {
      throw new RuntimeException(""String_Node_Str"");
    }
    ListView mList=(ListView)rawListView;
    Preference pref=(Preference)mList.getAdapter().getItem(selectedListPosition);
    final String ssid=pref.getTitle().toString();
    if (DBG)     Log.v(TAG,""String_Node_Str"" + ssid);
    new NetworkParser(new NetworkListener(){
      @Override public void onParserDone(      List<Network> networkList){
        for (        Network network : networkList) {
          if (DBG) {
            Log.v(TAG,""String_Node_Str"" + network.getSsid());
            Log.v(TAG,""String_Node_Str"" + network.getPassword());
          }
          if (network.getSsid().equals(ssid)) {
            getDialog(context,ssid,network.getPassword()).show();
            break;
          }
        }
      }
    }
).execute();
    param.setResult(true);
  }
}","@Override protected void afterHookedMethod(final MethodHookParam param) throws Throwable {
  MenuItem menuItem=(MenuItem)param.args[0];
  setIds(SettingsClazz);
  if (menuItem.getItemId() == MENU_ID_SHOWPASSWORD) {
    final Context context=(Context)((PreferenceFragment)param.thisObject).getActivity();
    int selectedListPosition=((AdapterContextMenuInfo)menuItem.getMenuInfo()).position;
    PreferenceFragment wifiPreferenceFragment=((PreferenceFragment)param.thisObject);
    View rawListView=wifiPreferenceFragment.getView().findViewById(android.R.id.list);
    if (!(rawListView instanceof ListView)) {
      throw new RuntimeException(""String_Node_Str"");
    }
    ListView mList=(ListView)rawListView;
    Preference pref=(Preference)mList.getAdapter().getItem(selectedListPosition);
    final String ssid=pref.getTitle().toString();
    if (DBG)     XposedBridge.log(TAG + ""String_Node_Str"" + ssid);
    new NetworkParser(new NetworkListener(){
      @Override public void onParserDone(      List<Network> networkList){
        for (        Network network : networkList) {
          if (DBG) {
            XposedBridge.log(TAG + ""String_Node_Str"" + network.getSsid());
            XposedBridge.log(TAG + ""String_Node_Str"" + network.getPassword());
          }
          if (network.getSsid().equals(ssid)) {
            getDialog(context,ssid,network.getPassword()).show();
            break;
          }
        }
      }
    }
).execute();
    param.setResult(true);
  }
}",0.9744289123764064
35875,"@Override public void onParserDone(List<Network> networkList){
  for (  Network network : networkList) {
    if (DBG) {
      Log.v(TAG,""String_Node_Str"" + network.getSsid());
      Log.v(TAG,""String_Node_Str"" + network.getPassword());
    }
    if (network.getSsid().equals(ssid)) {
      Toast.makeText(context,network.getPassword(),Toast.LENGTH_LONG).show();
      break;
    }
  }
}","@Override public void onParserDone(List<Network> networkList){
  for (  Network network : networkList) {
    if (DBG) {
      Log.v(TAG,""String_Node_Str"" + network.getSsid());
      Log.v(TAG,""String_Node_Str"" + network.getPassword());
    }
    if (network.getSsid().equals(ssid)) {
      getDialog(context,ssid,network.getPassword()).show();
      break;
    }
  }
}",0.9257294429708224
35876,"@Override public void handleLoadPackage(final LoadPackageParam lpparam) throws Throwable {
  if (!lpparam.packageName.equals(""String_Node_Str""))   return;
  final Class<?> SettingsClazz=XposedHelpers.findClass(""String_Node_Str"",lpparam.classLoader);
  XposedHelpers.findAndHookMethod(SettingsClazz,""String_Node_Str"",ContextMenu.class,View.class,ContextMenuInfo.class,new XC_MethodHook(){
    @Override protected void afterHookedMethod(    MethodHookParam param) throws Throwable {
      if (((ContextMenu)param.args[0]).findItem(MENU_ID_MODIFY) != null) {
        ((ContextMenu)param.args[0]).add(Menu.NONE,Menu.FIRST + 9,3,""String_Node_Str"");
      }
    }
  }
);
  XposedHelpers.findAndHookMethod(SettingsClazz,""String_Node_Str"",MenuItem.class,new XC_MethodHook(){
    @Override protected void afterHookedMethod(    final MethodHookParam param) throws Throwable {
      MenuItem menuItem=(MenuItem)param.args[0];
      if (menuItem.getItemId() == MENU_ID_SHOWPASSWORD) {
        final Context context=(Context)((PreferenceFragment)param.thisObject).getActivity();
        int selectedListPosition=((AdapterContextMenuInfo)menuItem.getMenuInfo()).position;
        PreferenceFragment wifiPreferenceFragment=((PreferenceFragment)param.thisObject);
        View rawListView=wifiPreferenceFragment.getView().findViewById(android.R.id.list);
        if (!(rawListView instanceof ListView)) {
          throw new RuntimeException(""String_Node_Str"");
        }
        ListView mList=(ListView)rawListView;
        Preference pref=(Preference)mList.getAdapter().getItem(selectedListPosition);
        final String ssid=pref.getTitle().toString();
        if (DBG)         Log.v(TAG,""String_Node_Str"" + ssid);
        new NetworkParser(new NetworkListener(){
          @Override public void onParserDone(          List<Network> networkList){
            for (            Network network : networkList) {
              if (DBG) {
                Log.v(TAG,""String_Node_Str"" + network.getSsid());
                Log.v(TAG,""String_Node_Str"" + network.getPassword());
              }
              if (network.getSsid().equals(ssid)) {
                Toast.makeText(context,network.getPassword(),Toast.LENGTH_LONG).show();
                break;
              }
            }
          }
        }
).execute();
        param.setResult(true);
      }
    }
  }
);
}","@Override public void handleLoadPackage(final LoadPackageParam lpparam) throws Throwable {
  if (!lpparam.packageName.equals(""String_Node_Str""))   return;
  final Class<?> SettingsClazz=XposedHelpers.findClass(""String_Node_Str"",lpparam.classLoader);
  XposedHelpers.findAndHookMethod(SettingsClazz,""String_Node_Str"",ContextMenu.class,View.class,ContextMenuInfo.class,new XC_MethodHook(){
    @Override protected void afterHookedMethod(    MethodHookParam param) throws Throwable {
      setIds(SettingsClazz);
      if (((ContextMenu)param.args[0]).findItem(MENU_ID_MODIFY) != null) {
        ((ContextMenu)param.args[0]).add(Menu.NONE,Menu.FIRST + 9,3,""String_Node_Str"");
      }
    }
  }
);
  XposedHelpers.findAndHookMethod(SettingsClazz,""String_Node_Str"",MenuItem.class,new XC_MethodHook(){
    @Override protected void afterHookedMethod(    final MethodHookParam param) throws Throwable {
      MenuItem menuItem=(MenuItem)param.args[0];
      setIds(SettingsClazz);
      if (menuItem.getItemId() == MENU_ID_SHOWPASSWORD) {
        final Context context=(Context)((PreferenceFragment)param.thisObject).getActivity();
        int selectedListPosition=((AdapterContextMenuInfo)menuItem.getMenuInfo()).position;
        PreferenceFragment wifiPreferenceFragment=((PreferenceFragment)param.thisObject);
        View rawListView=wifiPreferenceFragment.getView().findViewById(android.R.id.list);
        if (!(rawListView instanceof ListView)) {
          throw new RuntimeException(""String_Node_Str"");
        }
        ListView mList=(ListView)rawListView;
        Preference pref=(Preference)mList.getAdapter().getItem(selectedListPosition);
        final String ssid=pref.getTitle().toString();
        if (DBG)         Log.v(TAG,""String_Node_Str"" + ssid);
        new NetworkParser(new NetworkListener(){
          @Override public void onParserDone(          List<Network> networkList){
            for (            Network network : networkList) {
              if (DBG) {
                Log.v(TAG,""String_Node_Str"" + network.getSsid());
                Log.v(TAG,""String_Node_Str"" + network.getPassword());
              }
              if (network.getSsid().equals(ssid)) {
                getDialog(context,ssid,network.getPassword()).show();
                break;
              }
            }
          }
        }
).execute();
        param.setResult(true);
      }
    }
  }
);
}",0.9718013468013468
35877,"@Override protected void afterHookedMethod(final MethodHookParam param) throws Throwable {
  MenuItem menuItem=(MenuItem)param.args[0];
  if (menuItem.getItemId() == MENU_ID_SHOWPASSWORD) {
    final Context context=(Context)((PreferenceFragment)param.thisObject).getActivity();
    int selectedListPosition=((AdapterContextMenuInfo)menuItem.getMenuInfo()).position;
    PreferenceFragment wifiPreferenceFragment=((PreferenceFragment)param.thisObject);
    View rawListView=wifiPreferenceFragment.getView().findViewById(android.R.id.list);
    if (!(rawListView instanceof ListView)) {
      throw new RuntimeException(""String_Node_Str"");
    }
    ListView mList=(ListView)rawListView;
    Preference pref=(Preference)mList.getAdapter().getItem(selectedListPosition);
    final String ssid=pref.getTitle().toString();
    if (DBG)     Log.v(TAG,""String_Node_Str"" + ssid);
    new NetworkParser(new NetworkListener(){
      @Override public void onParserDone(      List<Network> networkList){
        for (        Network network : networkList) {
          if (DBG) {
            Log.v(TAG,""String_Node_Str"" + network.getSsid());
            Log.v(TAG,""String_Node_Str"" + network.getPassword());
          }
          if (network.getSsid().equals(ssid)) {
            Toast.makeText(context,network.getPassword(),Toast.LENGTH_LONG).show();
            break;
          }
        }
      }
    }
).execute();
    param.setResult(true);
  }
}","@Override protected void afterHookedMethod(final MethodHookParam param) throws Throwable {
  MenuItem menuItem=(MenuItem)param.args[0];
  setIds(SettingsClazz);
  if (menuItem.getItemId() == MENU_ID_SHOWPASSWORD) {
    final Context context=(Context)((PreferenceFragment)param.thisObject).getActivity();
    int selectedListPosition=((AdapterContextMenuInfo)menuItem.getMenuInfo()).position;
    PreferenceFragment wifiPreferenceFragment=((PreferenceFragment)param.thisObject);
    View rawListView=wifiPreferenceFragment.getView().findViewById(android.R.id.list);
    if (!(rawListView instanceof ListView)) {
      throw new RuntimeException(""String_Node_Str"");
    }
    ListView mList=(ListView)rawListView;
    Preference pref=(Preference)mList.getAdapter().getItem(selectedListPosition);
    final String ssid=pref.getTitle().toString();
    if (DBG)     Log.v(TAG,""String_Node_Str"" + ssid);
    new NetworkParser(new NetworkListener(){
      @Override public void onParserDone(      List<Network> networkList){
        for (        Network network : networkList) {
          if (DBG) {
            Log.v(TAG,""String_Node_Str"" + network.getSsid());
            Log.v(TAG,""String_Node_Str"" + network.getPassword());
          }
          if (network.getSsid().equals(ssid)) {
            getDialog(context,ssid,network.getPassword()).show();
            break;
          }
        }
      }
    }
).execute();
    param.setResult(true);
  }
}",0.965015587114652
35878,"private String findImageId(Id id){
  String imageTag=repo.tag(id);
  logger.debug(""String_Node_Str"",id,imageTag);
  List<Image> images=docker.listImagesCmd().exec();
  for (  Image i : images) {
    for (    String tag : i.getRepoTags()) {
      if (tag.startsWith(imageTag + ""String_Node_Str"")) {
        logger.debug(""String_Node_Str"",new Object[]{i.getId(),tag,id.toString(),imageTag});
        return i.getId();
      }
    }
  }
  logger.debug(""String_Node_Str"" + id + ""String_Node_Str""+ imageTag+ ""String_Node_Str"");
  return null;
}","private String findImageId(Id id){
  String imageTag=repo.tag(id);
  logger.debug(""String_Node_Str"",id,imageTag);
  List<Image> images=docker.listImagesCmd().exec();
  for (  Image image : images) {
    for (    String tag : image.getRepoTags()) {
      if (imageTag.contains(""String_Node_Str"") && tag.equals(imageTag) || tag.startsWith(imageTag + ""String_Node_Str"")) {
        logger.debug(""String_Node_Str"",image.getId(),tag,id,imageTag);
        return image.getId();
      }
    }
  }
  logger.debug(""String_Node_Str"" + id + ""String_Node_Str""+ imageTag+ ""String_Node_Str"");
  return null;
}",0.5984112974404237
35879,"@Test public void whenWeCleanThenAllContainersAreDeleted() throws Exception {
  orchestrator.clean(new Id(""String_Node_Str""));
  int numContainersBefore=getNumContainers();
  orchestrator.build(new Id(""String_Node_Str""));
  orchestrator.clean(new Id(""String_Node_Str""));
  assertEquals(numContainersBefore,getNumContainers());
}","@Test public void whenWeCleanThenAllContainersAreDeleted() throws Exception {
  orchestrator.clean(new Id(""String_Node_Str""));
  int numContainersBefore=getNumContainers();
  orchestrator.build(new Id(""String_Node_Str""));
  try {
    orchestrator.clean(new Id(""String_Node_Str""));
  }
 catch (  OrchestrationException e) {
    assertTrue(runningOnCircleCi());
    return;
  }
  int expectedNumContainers=numContainersBefore + (runningOnCircleCi() ? 1 : 0);
  assertEquals(expectedNumContainers,getNumContainers());
}",0.7606635071090048
35880,"@Test public void whenWeCleanThenAllImagesAreDeleted() throws Exception {
  int numImagesBefore=getNumImages();
  orchestrator.build(new Id(""String_Node_Str""));
  orchestrator.clean(new Id(""String_Node_Str""));
  int numImagesAfter=getNumImages();
  assertEquals(numImagesBefore,numImagesAfter);
}","@Test public void whenWeCleanThenAllImagesAreDeleted() throws Exception {
  int numImagesBefore=getNumImages();
  orchestrator.build(new Id(""String_Node_Str""));
  orchestrator.clean(new Id(""String_Node_Str""));
  int expectedNumImages=numImagesBefore + (runningOnCircleCi() ? 1 : 0);
  int numImagesAfter=getNumImages();
  assertEquals(expectedNumImages,numImagesAfter);
}",0.8425787106446777
35881,"@Test public void whenWeCleanThenOnlyContainersAreDeleted() throws Exception {
  int numContainersBefore=getNumContainers();
  int numImagesBefore=getNumImages();
  orchestrator.build(new Id(""String_Node_Str""));
  orchestrator.clean(new Id(""String_Node_Str""),CleanFlag.CONTAINER_ONLY);
  assertEquals(numContainersBefore,getNumContainers());
  int expectedNumImages=numImagesBefore + 1;
  assertEquals(expectedNumImages,getNumImages());
  orchestrator.clean(new Id(""String_Node_Str""));
}","@Test public void whenWeCleanThenOnlyContainersAreDeleted() throws Exception {
  int numContainersBefore=getNumContainers();
  int numImagesBefore=getNumImages();
  orchestrator.build(new Id(""String_Node_Str""));
  orchestrator.clean(new Id(""String_Node_Str""),CleanFlag.CONTAINER_ONLY);
  int expectedNumContainers=numContainersBefore + (runningOnCircleCi() ? 1 : 0);
  assertEquals(expectedNumContainers,getNumContainers());
  int expectedNumImages=numImagesBefore + 1;
  assertEquals(expectedNumImages,getNumImages());
  orchestrator.clean(new Id(""String_Node_Str""));
}",0.8325449385052034
35882,"@Before public void setUp() throws Exception {
  docker=DockerClientBuilder.getInstance(DockerClientConfig.createDefaultConfigBuilder().build()).build();
  orchestrator=DockerOrchestrator.builder().docker(docker).src(src).workDir(workDir).rootDir(projDir).user(""String_Node_Str"").properties(properties()).project(""String_Node_Str"").buildFlags(EnumSet.of(BuildFlag.REMOVE_INTERMEDIATE_IMAGES)).permissionErrorTolerant(true).definitionFilter(new DefinitionFilter(){
    @Override public boolean test(    final Id id,    @SuppressWarnings(""String_Node_Str"") final Conf conf){
      return !new Id(""String_Node_Str"").equals(id);
    }
  }
).build();
  orchestrator.clean();
}","@Before public void setUp() throws Exception {
  System.out.println(""String_Node_Str"" + runningOnCircleCi());
  docker=DockerClientBuilder.getInstance(DockerClientConfig.createDefaultConfigBuilder().build()).build();
  orchestrator=DockerOrchestrator.builder().docker(docker).src(src).workDir(workDir).rootDir(projDir).user(""String_Node_Str"").properties(properties()).project(""String_Node_Str"").buildFlags(EnumSet.of(BuildFlag.REMOVE_INTERMEDIATE_IMAGES)).permissionErrorTolerant(true).definitionFilter(new DefinitionFilter(){
    @Override public boolean test(    final Id id,    @SuppressWarnings(""String_Node_Str"") final Conf conf){
      return !new Id(""String_Node_Str"").equals(id);
    }
  }
).build();
  orchestrator.clean();
}",0.9551601423487543
35883,"private void removeContainer(Container existingContainer){
  try {
    docker.removeContainerCmd(existingContainer.getId()).withForce().withRemoveVolumes(true).exec();
  }
 catch (  InternalServerErrorException e) {
    if (permissionErrorTolerant && isPermissionError(e)) {
      logger.warn(String.format(""String_Node_Str"",e));
    }
 else {
      throw e;
    }
  }
}","private void removeContainer(Container existingContainer){
  logger.info(""String_Node_Str"" + existingContainer.getId());
  try {
    docker.removeContainerCmd(existingContainer.getId()).withForce().withRemoveVolumes(true).exec();
  }
 catch (  InternalServerErrorException e) {
    if (permissionErrorTolerant && isPermissionError(e)) {
      logger.warn(String.format(""String_Node_Str"",e));
    }
 else {
      throw e;
    }
  }
}",0.9226932668329176
35884,"private void cleanContainer(final Id id){
  if (id == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  stop(id);
  logger.info(""String_Node_Str"" + id);
  for (  Container container : findAllContainers(id)) {
    logger.info(""String_Node_Str"" + container.getId());
    try {
      removeContainer(container);
    }
 catch (    DockerException e) {
      throw new OrchestrationException(e);
    }
  }
}","private void cleanContainer(final Id id){
  if (id == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  stop(id);
  logger.info(""String_Node_Str"" + id);
  for (  Container container : findAllContainers(id)) {
    try {
      removeContainer(container);
    }
 catch (    DockerException e) {
      throw new OrchestrationException(e);
    }
  }
}",0.929471032745592
35885,"@Test public void whenWeCleanThenAllContainersAreDeleted() throws Exception {
  orchestrator.clean(new Id(""String_Node_Str""));
  final List<Container> expectedContainers=docker.listContainersCmd().withShowAll(true).exec();
  orchestrator.build(new Id(""String_Node_Str""));
  try {
    orchestrator.clean(new Id(""String_Node_Str""));
  }
 catch (  OrchestrationException e) {
    assertTrue(runningOnCircleCi());
    return;
  }
  int expectedSize=expectedContainers.size() + (runningOnCircleCi() ? 1 : 0);
  assertEquals(expectedSize,docker.listContainersCmd().withShowAll(true).exec().size());
}","@Test public void whenWeCleanThenAllContainersAreDeleted() throws Exception {
  orchestrator.clean(new Id(""String_Node_Str""));
  int numContainersBefore=getNumContainers();
  orchestrator.build(new Id(""String_Node_Str""));
  try {
    orchestrator.clean(new Id(""String_Node_Str""));
  }
 catch (  OrchestrationException e) {
    assertTrue(runningOnCircleCi());
    return;
  }
  int expectedNumContainers=numContainersBefore + (runningOnCircleCi() ? 1 : 0);
  assertEquals(expectedNumContainers,getNumContainers());
}",0.3045045045045045
35886,"@Test public void whenWeCleanThenAllImagesAreDeleted() throws Exception {
  final List<Image> expectedImages=docker.listImagesCmd().exec();
  orchestrator.build(new Id(""String_Node_Str""));
  orchestrator.clean(new Id(""String_Node_Str""));
  int expectedSize=expectedImages.size() + (runningOnCircleCi() ? 1 : 0);
  assertEquals(expectedSize,docker.listImagesCmd().exec().size());
}","@Test public void whenWeCleanThenAllImagesAreDeleted() throws Exception {
  int numImagesBefore=getNumImages();
  orchestrator.build(new Id(""String_Node_Str""));
  orchestrator.clean(new Id(""String_Node_Str""));
  int expectedNumImages=numImagesBefore + (runningOnCircleCi() ? 1 : 0);
  int numImagesAfter=getNumImages();
  assertEquals(expectedNumImages,numImagesAfter);
}",0.284953395472703
35887,"@Test public void whenWeCleanThenOnlyContainersAreDeleted() throws Exception {
  final List<Container> expectedContainers=docker.listContainersCmd().withShowAll(true).exec();
  final List<Image> expectedImages=docker.listImagesCmd().exec();
  orchestrator.build(new Id(""String_Node_Str""));
  orchestrator.clean(new Id(""String_Node_Str""),CleanFlag.CONTAINER_ONLY);
  int expectedContainersSize=expectedContainers.size() + (runningOnCircleCi() ? 1 : 0);
  assertEquals(expectedContainersSize,docker.listContainersCmd().withShowAll(true).exec().size());
  int expectedImageSize=expectedImages.size() + 1;
  assertEquals(expectedImageSize,docker.listImagesCmd().exec().size());
  orchestrator.clean(new Id(""String_Node_Str""));
}","@Test public void whenWeCleanThenOnlyContainersAreDeleted() throws Exception {
  int numContainersBefore=getNumContainers();
  int numImagesBefore=getNumImages();
  orchestrator.build(new Id(""String_Node_Str""));
  orchestrator.clean(new Id(""String_Node_Str""),CleanFlag.CONTAINER_ONLY);
  int expectedNumContainers=numContainersBefore + (runningOnCircleCi() ? 1 : 0);
  assertEquals(expectedNumContainers,getNumContainers());
  int expectedNumImages=numImagesBefore + 1;
  assertEquals(expectedNumImages,getNumImages());
  orchestrator.clean(new Id(""String_Node_Str""));
}",0.2333848531684698
35888,"@Before public void setUp() throws Exception {
  System.out.println(""String_Node_Str"" + runningOnCircleCi());
  docker=DockerClientBuilder.getInstance(DockerClientConfig.createDefaultConfigBuilder().build()).build();
  orchestrator=DockerOrchestrator.builder().docker(docker).src(src).workDir(workDir).rootDir(projDir).user(""String_Node_Str"").properties(properties()).project(""String_Node_Str"").buildFlags(EnumSet.of(BuildFlag.REMOVE_INTERMEDIATE_IMAGES)).permissionErrorTolerant(true).definitionFilter(new DefinitionFilter(){
    @Override public boolean test(    final Id id,    @SuppressWarnings(""String_Node_Str"") final Conf conf){
      return !new Id(""String_Node_Str"").equals(id);
    }
  }
).build();
}","@Before public void setUp() throws Exception {
  System.out.println(""String_Node_Str"" + runningOnCircleCi());
  docker=DockerClientBuilder.getInstance(DockerClientConfig.createDefaultConfigBuilder().build()).build();
  orchestrator=DockerOrchestrator.builder().docker(docker).src(src).workDir(workDir).rootDir(projDir).user(""String_Node_Str"").properties(properties()).project(""String_Node_Str"").buildFlags(EnumSet.of(BuildFlag.REMOVE_INTERMEDIATE_IMAGES)).permissionErrorTolerant(true).definitionFilter(new DefinitionFilter(){
    @Override public boolean test(    final Id id,    @SuppressWarnings(""String_Node_Str"") final Conf conf){
      return !new Id(""String_Node_Str"").equals(id);
    }
  }
).build();
  orchestrator.clean();
}",0.9833795013850416
35889,"@Test public void whenWeCleanThenAllContainersAreDeleted() throws Exception {
  orchestrator.clean(new Id(""String_Node_Str""));
  int numContainersBefore=getNumContainers();
  orchestrator.build(new Id(""String_Node_Str""));
  try {
    orchestrator.clean(new Id(""String_Node_Str""));
  }
 catch (  OrchestrationException e) {
    assertTrue(runningOnCircleCi());
    return;
  }
  int expectedNumContainers=numContainersBefore + (runningOnCircleCi() ? 1 : 0);
  assertEquals(expectedNumContainers,getNumContainers());
}","@Test public void whenWeCleanThenAllContainersAreDeleted() throws Exception {
  orchestrator.clean(new Id(""String_Node_Str""));
  int numContainersBefore=getNumContainers();
  orchestrator.build(new Id(""String_Node_Str""));
  orchestrator.clean(new Id(""String_Node_Str""));
  assertEquals(numContainersBefore,getNumContainers());
}",0.7606635071090048
35890,"@Test public void whenWeCleanThenAllImagesAreDeleted() throws Exception {
  int numImagesBefore=getNumImages();
  orchestrator.build(new Id(""String_Node_Str""));
  orchestrator.clean(new Id(""String_Node_Str""));
  int expectedNumImages=numImagesBefore + (runningOnCircleCi() ? 1 : 0);
  int numImagesAfter=getNumImages();
  assertEquals(expectedNumImages,numImagesAfter);
}","@Test public void whenWeCleanThenAllImagesAreDeleted() throws Exception {
  int numImagesBefore=getNumImages();
  orchestrator.build(new Id(""String_Node_Str""));
  orchestrator.clean(new Id(""String_Node_Str""));
  int numImagesAfter=getNumImages();
  assertEquals(numImagesBefore,numImagesAfter);
}",0.8425787106446777
35891,"@Test public void whenWeCleanThenOnlyContainersAreDeleted() throws Exception {
  int numContainersBefore=getNumContainers();
  int numImagesBefore=getNumImages();
  orchestrator.build(new Id(""String_Node_Str""));
  orchestrator.clean(new Id(""String_Node_Str""),CleanFlag.CONTAINER_ONLY);
  int expectedNumContainers=numContainersBefore + (runningOnCircleCi() ? 1 : 0);
  assertEquals(expectedNumContainers,getNumContainers());
  int expectedNumImages=numImagesBefore + 1;
  assertEquals(expectedNumImages,getNumImages());
  orchestrator.clean(new Id(""String_Node_Str""));
}","@Test public void whenWeCleanThenOnlyContainersAreDeleted() throws Exception {
  int numContainersBefore=getNumContainers();
  int numImagesBefore=getNumImages();
  orchestrator.build(new Id(""String_Node_Str""));
  orchestrator.clean(new Id(""String_Node_Str""),CleanFlag.CONTAINER_ONLY);
  assertEquals(numContainersBefore,getNumContainers());
  int expectedNumImages=numImagesBefore + 1;
  assertEquals(expectedNumImages,getNumImages());
  orchestrator.clean(new Id(""String_Node_Str""));
}",0.7871333964049196
35892,"@Before public void setUp() throws Exception {
  System.out.println(""String_Node_Str"" + runningOnCircleCi());
  docker=DockerClientBuilder.getInstance(DockerClientConfig.createDefaultConfigBuilder().build()).build();
  orchestrator=DockerOrchestrator.builder().docker(docker).src(src).workDir(workDir).rootDir(projDir).user(""String_Node_Str"").properties(properties()).project(""String_Node_Str"").buildFlags(EnumSet.of(BuildFlag.REMOVE_INTERMEDIATE_IMAGES)).permissionErrorTolerant(true).definitionFilter(new DefinitionFilter(){
    @Override public boolean test(    final Id id,    @SuppressWarnings(""String_Node_Str"") final Conf conf){
      return !new Id(""String_Node_Str"").equals(id);
    }
  }
).build();
  orchestrator.clean();
}","@Before public void setUp() throws Exception {
  docker=DockerClientBuilder.getInstance(DockerClientConfig.createDefaultConfigBuilder().build()).build();
  orchestrator=DockerOrchestrator.builder().docker(docker).src(src).workDir(workDir).rootDir(projDir).user(""String_Node_Str"").properties(properties()).project(""String_Node_Str"").buildFlags(EnumSet.of(BuildFlag.REMOVE_INTERMEDIATE_IMAGES)).permissionErrorTolerant(true).definitionFilter(new DefinitionFilter(){
    @Override public boolean test(    final Id id,    @SuppressWarnings(""String_Node_Str"") final Conf conf){
      return !new Id(""String_Node_Str"").equals(id);
    }
  }
).build();
  orchestrator.clean();
}",0.9551601423487543
35893,"private void copyFileEntry(final File destDir,File fileEntry) throws IOException {
  LOGGER.info(""String_Node_Str"" + fileEntry);
  if (fileEntry.isDirectory()) {
    copyDirectoryToDirectory(fileEntry,destDir);
  }
 else {
    final Path targetPath;
    if (destDir.isDirectory()) {
      targetPath=destDir.toPath().resolve(fileEntry.toPath().getFileName());
    }
 else {
      targetPath=destDir.toPath();
    }
    Files.copy(fileEntry.toPath(),targetPath,StandardCopyOption.COPY_ATTRIBUTES,StandardCopyOption.REPLACE_EXISTING);
  }
}","private void copyFileEntry(final File destDir,File fileEntry) throws IOException {
  LOGGER.info(""String_Node_Str"" + fileEntry);
  if (fileEntry.isDirectory()) {
    copyDirectoryToDirectory(fileEntry,new File(destDir,fileEntry.getName()));
  }
 else {
    final Path targetPath;
    if (destDir.isDirectory()) {
      targetPath=destDir.toPath().resolve(fileEntry.toPath().getFileName());
    }
 else {
      targetPath=destDir.toPath();
    }
    Files.copy(fileEntry.toPath(),targetPath,StandardCopyOption.COPY_ATTRIBUTES,StandardCopyOption.REPLACE_EXISTING);
  }
}",0.9602169981916816
35894,"private void waitForLogPatterns(Id id,List<LogPattern> logPatterns){
  if (logPatterns == null || logPatterns.isEmpty()) {
    return;
  }
  final Container container;
  try {
    container=findContainer(id);
  }
 catch (  DockerException e) {
    throw new OrchestrationException(e);
  }
  if (container == null) {
    logger.warn(String.format(""String_Node_Str"",id));
    return;
  }
  final StopWatch watch=new StopWatch();
  final List<LogPattern> pending=sortedLogPatterns(logPatterns);
  watch.start();
  logger.info(""String_Node_Str"",logPatternsToString(pending));
  try (final FrameReader reader=new FrameReader(logContainerCmd.exec())){
    Frame frame;
    while ((frame=reader.readFrame()) != null) {
      String line=new String(frame.getPayload()).trim();
      for (Iterator<LogPattern> iterator=pending.iterator(); iterator.hasNext(); ) {
        LogPattern logPattern=iterator.next();
        if (logPattern.getPattern().matcher(line).find()) {
          logger.info(""String_Node_Str"",watch,logPattern.getPattern().toString());
          iterator.remove();
        }
      }
      if (pending.isEmpty()) {
        watch.stop();
        return;
      }
      for (      LogPattern logPattern : pending) {
        if (watch.getTime() >= logPattern.getTimeout()) {
          throw new OrchestrationException(String.format(""String_Node_Str"",logPattern.getTimeout(),logPattern.getPattern(),id));
        }
      }
    }
  }
 catch (  IOException e) {
    if (!e.getMessage().equals(""String_Node_Str"")) {
      throw new OrchestrationException(e);
    }
  }
  throw new OrchestrationException(String.format(""String_Node_Str"",id,logPatternsToString(pending)));
}","private void waitForLogPatterns(Id id,List<LogPattern> logPatterns){
  if (logPatterns == null || logPatterns.isEmpty()) {
    return;
  }
  final Container container;
  try {
    container=findContainer(id);
  }
 catch (  DockerException e) {
    throw new OrchestrationException(e);
  }
  if (container == null) {
    logger.warn(String.format(""String_Node_Str"",id));
    return;
  }
  final StopWatch watch=new StopWatch();
  final List<LogPattern> pending=sortedLogPatterns(logPatterns);
  watch.start();
  logger.info(""String_Node_Str"",logPatternsToString(pending));
  final LogContainerCmd logContainerCmd=docker.logContainerCmd(container.getId()).withStdErr().withStdOut().withTailAll().withFollowStream();
  try (final FrameReader reader=new FrameReader(logContainerCmd.exec())){
    Frame frame;
    while ((frame=reader.readFrame()) != null) {
      logger.debug(""String_Node_Str"",frame);
      String line=new String(frame.getPayload()).trim();
      for (Iterator<LogPattern> iterator=pending.iterator(); iterator.hasNext(); ) {
        LogPattern logPattern=iterator.next();
        if (logPattern.getPattern().matcher(line).find()) {
          logger.info(""String_Node_Str"",watch,logPattern.getPattern().toString());
          iterator.remove();
        }
      }
      if (pending.isEmpty()) {
        watch.stop();
        return;
      }
      for (      LogPattern logPattern : pending) {
        if (watch.getTime() >= logPattern.getTimeout()) {
          throw new OrchestrationException(String.format(""String_Node_Str"",logPattern.getTimeout(),logPattern.getPattern(),id));
        }
      }
    }
  }
 catch (  IOException e) {
    if (!e.getMessage().equals(""String_Node_Str"")) {
      throw new OrchestrationException(e);
    }
  }
  throw new OrchestrationException(String.format(""String_Node_Str"",id,logPatternsToString(pending)));
}",0.9470104845565316
35895,"private void healthCheck(Id id){
  final HealthChecks healthChecks=conf(id).getHealthChecks();
  for (  Pattern pattern : healthChecks.getLogPatterns()) {
    waitFor(id,pattern);
  }
  for (  Ping ping : healthChecks.getPings()) {
    waitFor(id,ping);
  }
}","private void healthCheck(Id id){
  final HealthChecks healthChecks=conf(id).getHealthChecks();
  for (  LogPattern pattern : healthChecks.getLogPatterns()) {
    waitFor(id,pattern);
  }
  for (  Ping ping : healthChecks.getPings()) {
    waitFor(id,ping);
  }
}",0.9942418426103646
35896,"List<Id> ids(boolean reverse){
  final List<Id> in=new LinkedList<>(confs.keySet());
  final Map<Id,List<Id>> links=new HashMap<>();
  for (  Id id : in) {
    links.put(id,com.alexecollins.docker.orchestration.util.Links.ids(confs.get(id).getLinks()));
  }
  final List<Id> out=sort(links);
  if (reverse) {
    Collections.reverse(out);
  }
  return out;
}","List<Id> ids(boolean reverse){
  final Map<Id,List<Id>> links=new LinkedHashMap<>();
  for (  Id id : confs.keySet()) {
    links.put(id,com.alexecollins.docker.orchestration.util.Links.ids(confs.get(id).getLinks()));
  }
  final List<Id> out=sort(links);
  if (reverse) {
    Collections.reverse(out);
  }
  return out;
}",0.2558823529411764
35897,"private void startContainer(String idOfContainerToStart,final Id id){
  try {
    StartContainerCmd start=docker.startContainerCmd(idOfContainerToStart);
    prepareHostConfig(id,start);
    start.exec();
  }
 catch (  DockerException e) {
    logger.error(""String_Node_Str"" + idOfContainerToStart,e);
    throw new OrchestrationException(e);
  }
}","private void startContainer(String idOfContainerToStart,final Id id){
  try {
    StartContainerCmd start=docker.startContainerCmd(idOfContainerToStart);
    start.exec();
  }
 catch (  DockerException e) {
    logger.error(""String_Node_Str"" + idOfContainerToStart,e);
    throw new OrchestrationException(e);
  }
}",0.9502262443438914
35898,"private String createNewContainer(Id id) throws DockerException {
  Conf conf=conf(id);
  CreateContainerCmd createCmd=docker.createContainerCmd(repo.findImageId(id));
  createCmd.withName(repo.containerName(id));
  logger.info(""String_Node_Str"" + conf.getEnv());
  createCmd.withEnv(asEnvList(conf.getEnv()));
  CreateContainerResponse response=createCmd.exec();
  return response.getId();
}","private String createNewContainer(Id id) throws DockerException {
}",0.2919389978213507
35899,"private void prepareHostConfig(Id id,StartContainerCmd config){
}","private CreateContainerCmd prepareHostConfig(Id id){
}",0.6554621848739496
35900,"public Map<String,String> getIPAddresses(){
  Map<String,String> idToIpAddressMap=new HashMap<>();
  for (  Id id : ids()) {
    Conf conf=repo.conf(id);
    if (conf.isExposeContainerIp()) {
      String containerName=repo.containerName(id);
      InspectContainerResponse containerInspectResponse=docker.inspectContainerCmd(containerName).exec();
      idToIpAddressMap.put(id.toString(),containerInspectResponse.getNetworkSettings().getIpAddress());
    }
  }
  return idToIpAddressMap;
}","public Map<String,String> getIPAddresses(){
  Map<String,String> idToIpAddressMap=new HashMap<>();
  for (  Id id : ids()) {
    Conf conf=repo.conf(id);
    if (inclusive(id) && conf.isExposeContainerIp()) {
      String containerName=repo.containerName(id);
      InspectContainerResponse containerInspectResponse=docker.inspectContainerCmd(containerName).exec();
      idToIpAddressMap.put(id.toString(),containerInspectResponse.getNetworkSettings().getIpAddress());
    }
  }
  return idToIpAddressMap;
}",0.982982982982983
35901,"@Before public void setup() throws DockerException, IOException {
  testObj=new DockerOrchestrator(dockerMock,repoMock,fileOrchestratorMock,EnumSet.noneOf(BuildFlag.class),logger,dockerfileValidator);
  when(repoMock.src(idMock)).thenReturn(srcFileMock);
  when(repoMock.conf(idMock)).thenReturn(confMock);
  when(repoMock.imageName(idMock)).thenReturn(IMAGE_NAME);
  when(repoMock.findImageId(idMock)).thenReturn(IMAGE_ID);
  when(repoMock.containerName(idMock)).thenReturn(CONTAINER_NAME);
  when(confMock.getLinks()).thenReturn(new ArrayList<Link>());
  when(confMock.getHealthChecks()).thenReturn(new HealthChecks());
  when(confMock.getTags()).thenReturn(Arrays.asList(IMAGE_NAME + ""String_Node_Str"" + TAG_NAME));
  when(repoMock.findImageId(idMock)).thenReturn(IMAGE_ID);
  when(repoMock.findContainer(idMock)).thenReturn(containerMock);
  when(containerMock.getId()).thenReturn(CONTAINER_ID);
  when(fileOrchestratorMock.prepare(idMock,srcFileMock,confMock)).thenReturn(fileMock);
  when(repoMock.ids(false)).thenReturn(Arrays.asList(idMock));
  when(repoMock.ids(true)).thenReturn(Arrays.asList(idMock));
  when(repoMock.tag(any(Id.class))).thenReturn(IMAGE_NAME + ""String_Node_Str"" + TAG_NAME);
  when(dockerMock.buildImageCmd(eq(fileMock))).thenReturn(buildImageCmdMock);
  when(buildImageCmdMock.withTag(any(String.class))).thenReturn(buildImageCmdMock);
  when(buildImageCmdMock.exec()).thenReturn(IOUtils.toInputStream(""String_Node_Str""));
  when(dockerMock.createContainerCmd(IMAGE_ID)).thenReturn(createContainerCmdMock);
  when(createContainerCmdMock.exec()).thenReturn(createContainerResponse);
  when(createContainerCmdMock.withName(eq(CONTAINER_NAME))).thenReturn(createContainerCmdMock);
  when(createContainerResponse.getId()).thenReturn(CONTAINER_ID);
  when(dockerMock.startContainerCmd(CONTAINER_ID)).thenReturn(startContainerCmdMock);
  when(dockerMock.stopContainerCmd(CONTAINER_ID)).thenReturn(stopContainerCmdMock);
  when(dockerMock.removeContainerCmd(CONTAINER_ID)).thenReturn(removeContainerCmdMock);
  when(dockerMock.listContainersCmd()).thenReturn(listContainersCmdMockOnlyRunning);
  when(listContainersCmdMockOnlyRunning.withShowAll(false)).thenReturn(listContainersCmdMockOnlyRunning);
  when(listContainersCmdMockOnlyRunning.exec()).thenReturn(Collections.<Container>emptyList());
  when(stopContainerCmdMock.withTimeout(anyInt())).thenReturn(stopContainerCmdMock);
  when(dockerMock.inspectContainerCmd(CONTAINER_ID)).thenReturn(inspectContainerCmdMock);
  when(inspectContainerCmdMock.exec()).thenReturn(containerInspectResponseMock);
  when(containerInspectResponseMock.getImageId()).thenReturn(IMAGE_ID);
  when(dockerMock.tagImageCmd(anyString(),anyString(),anyString())).thenReturn(tagImageCmdMock);
  when(tagImageCmdMock.withForce()).thenReturn(tagImageCmdMock);
  when(dockerMock.pushImageCmd(anyString())).thenReturn(pushImageCmd);
  when(pushImageCmd.withAuthConfig(any(AuthConfig.class))).thenReturn(pushImageCmd);
  when(pushImageCmd.exec()).thenReturn(IOUtils.toInputStream(""String_Node_Str""));
}","@Before public void setup() throws DockerException, IOException {
  testObj=new DockerOrchestrator(dockerMock,repoMock,fileOrchestratorMock,EnumSet.noneOf(BuildFlag.class),logger,dockerfileValidator);
  when(repoMock.src(idMock)).thenReturn(srcFileMock);
  when(repoMock.conf(idMock)).thenReturn(confMock);
  when(repoMock.imageName(idMock)).thenReturn(IMAGE_NAME);
  when(repoMock.findImageId(idMock)).thenReturn(IMAGE_ID);
  when(repoMock.containerName(idMock)).thenReturn(CONTAINER_NAME);
  when(confMock.getLinks()).thenReturn(new ArrayList<Link>());
  when(confMock.getHealthChecks()).thenReturn(new HealthChecks());
  when(confMock.getTags()).thenReturn(Arrays.asList(IMAGE_NAME + ""String_Node_Str"" + TAG_NAME));
  when(repoMock.findImageId(idMock)).thenReturn(IMAGE_ID);
  when(repoMock.findContainer(idMock)).thenReturn(containerMock);
  when(containerMock.getId()).thenReturn(CONTAINER_ID);
  when(fileOrchestratorMock.prepare(idMock,srcFileMock,confMock)).thenReturn(fileMock);
  when(repoMock.ids(false)).thenReturn(Arrays.asList(idMock));
  when(repoMock.ids(true)).thenReturn(Arrays.asList(idMock));
  when(repoMock.tag(any(Id.class))).thenReturn(IMAGE_NAME + ""String_Node_Str"" + TAG_NAME);
  when(dockerMock.buildImageCmd(eq(fileMock))).thenReturn(buildImageCmdMock);
  when(buildImageCmdMock.withTag(any(String.class))).thenReturn(buildImageCmdMock);
  when(buildImageCmdMock.exec()).thenReturn(new BuildImageCmdExec.ResponseImpl(IOUtils.toInputStream(""String_Node_Str"")));
  when(dockerMock.createContainerCmd(IMAGE_ID)).thenReturn(createContainerCmdMock);
  when(createContainerCmdMock.exec()).thenReturn(createContainerResponse);
  when(createContainerCmdMock.withName(eq(CONTAINER_NAME))).thenReturn(createContainerCmdMock);
  when(createContainerResponse.getId()).thenReturn(CONTAINER_ID);
  when(dockerMock.startContainerCmd(CONTAINER_ID)).thenReturn(startContainerCmdMock);
  when(dockerMock.stopContainerCmd(CONTAINER_ID)).thenReturn(stopContainerCmdMock);
  when(dockerMock.removeContainerCmd(CONTAINER_ID)).thenReturn(removeContainerCmdMock);
  when(dockerMock.listContainersCmd()).thenReturn(listContainersCmdMockOnlyRunning);
  when(listContainersCmdMockOnlyRunning.withShowAll(false)).thenReturn(listContainersCmdMockOnlyRunning);
  when(listContainersCmdMockOnlyRunning.exec()).thenReturn(Collections.<Container>emptyList());
  when(stopContainerCmdMock.withTimeout(anyInt())).thenReturn(stopContainerCmdMock);
  when(dockerMock.inspectContainerCmd(CONTAINER_ID)).thenReturn(inspectContainerCmdMock);
  when(inspectContainerCmdMock.exec()).thenReturn(containerInspectResponseMock);
  when(containerInspectResponseMock.getImageId()).thenReturn(IMAGE_ID);
  when(dockerMock.tagImageCmd(anyString(),anyString(),anyString())).thenReturn(tagImageCmdMock);
  when(tagImageCmdMock.withForce()).thenReturn(tagImageCmdMock);
  when(dockerMock.pushImageCmd(anyString())).thenReturn(pushImageCmd);
  when(pushImageCmd.withAuthConfig(any(AuthConfig.class))).thenReturn(pushImageCmd);
  when(pushImageCmd.exec()).thenReturn(new PushImageCmd.Response(){
    private final InputStream proxy=IOUtils.toInputStream(""String_Node_Str"");
    @Override public int read() throws IOException {
      return proxy.read();
    }
    @Override public Iterable<PushEventStreamItem> getItems() throws IOException {
      return null;
    }
  }
);
}",0.952008754103486
35902,"@Test public void testParseNetworkErrorCantRetry() throws VolleyError {
  when(requeuePolicy.shouldRequeue(any(NetworkResponse.class))).thenReturn(true);
  final RetryPolicy retryPolicy=mock(RetryPolicy.class);
  doThrow(VolleyError.class).when(retryPolicy).retry(any(VolleyError.class));
  when(request.getRetryPolicy()).thenReturn(retryPolicy);
  final VolleyError error=mock(VolleyError.class);
  final VolleyError volleyError=decorator.parseNetworkError(error);
  assertNotNull(volleyError);
  verify(requeuePolicy,never()).executeBeforeRequeueing(any(Listener.class),any(ErrorListener.class));
}","@Test public void testParseNetworkErrorCantRetry() throws VolleyError {
  when(requeuePolicy.shouldRequeue(any(NetworkResponse.class))).thenReturn(Boolean.TRUE);
  final RetryPolicy retryPolicy=mock(RetryPolicy.class);
  doThrow(VolleyError.class).when(retryPolicy).retry(any(VolleyError.class));
  when(request.getRetryPolicy()).thenReturn(retryPolicy);
  final VolleyError error=mock(VolleyError.class);
  final VolleyError volleyError=decorator.parseNetworkError(error);
  assertNotNull(volleyError);
  verify(requeuePolicy,never()).executeBeforeRequeueing(any(Listener.class),any(ErrorListener.class));
}",0.9867549668874172
35903,"@SuppressWarnings(""String_Node_Str"") @Test public void testParseNetworkErrorRequeue() throws VolleyError {
  when(requeuePolicy.shouldRequeue(any(NetworkResponse.class))).thenReturn(true);
  final RetryPolicy retryPolicy=mock(RetryPolicy.class);
  when(request.getRetryPolicy()).thenReturn(retryPolicy);
  final RequestQueue queue=mock(RequestQueue.class);
  decorator.setRequestQueue(queue);
  final VolleyError error=mock(VolleyError.class);
  decorator.parseNetworkError(error);
  verify(retryPolicy).retry(any(VolleyError.class));
  final ArgumentCaptor<Listener> listener=ArgumentCaptor.forClass(Listener.class);
  final ArgumentCaptor<ErrorListener> errorListener=ArgumentCaptor.forClass(ErrorListener.class);
  verify(requeuePolicy).executeBeforeRequeueing(listener.capture(),errorListener.capture());
  errorListener.getValue().onErrorResponse(error);
  verify(queue,never()).add(decorator);
  listener.getValue().onResponse(new Object());
  verify(queue).add(decorator);
}","@SuppressWarnings(""String_Node_Str"") @Test public void testParseNetworkErrorRequeue() throws VolleyError {
  when(requeuePolicy.shouldRequeue(any(NetworkResponse.class))).thenReturn(Boolean.TRUE);
  final RetryPolicy retryPolicy=mock(RetryPolicy.class);
  when(request.getRetryPolicy()).thenReturn(retryPolicy);
  final RequestQueue queue=mock(RequestQueue.class);
  decorator.setRequestQueue(queue);
  final VolleyError error=mock(VolleyError.class);
  decorator.parseNetworkError(error);
  verify(retryPolicy).retry(any(VolleyError.class));
  final ArgumentCaptor<Listener> listener=ArgumentCaptor.forClass(Listener.class);
  final ArgumentCaptor<ErrorListener> errorListener=ArgumentCaptor.forClass(ErrorListener.class);
  verify(requeuePolicy).executeBeforeRequeueing(listener.capture(),errorListener.capture());
  errorListener.getValue().onErrorResponse(error);
  verify(queue,never()).add(decorator);
  listener.getValue().onResponse(new Object());
  verify(queue).add(decorator);
}",0.9918781725888324
35904,"@Test public void testAddHeader() throws AuthFailureError {
  assertThat(request.getHeaders(),not(Matchers.<String,String>hasKey(CUSTOM_HEADER)));
  request.addHeader(CUSTOM_HEADER,CUSTOM_HEADER_VALUE);
  assertThat(request.getHeaders(),Matchers.<String,String>hasKey(CUSTOM_HEADER));
}","@SuppressFBWarnings(value=""String_Node_Str"",justification=""String_Node_Str"") @Test public void testAddHeader() throws AuthFailureError {
  assumeThat(request.getHeaders(),not(Matchers.<String,String>hasKey(CUSTOM_HEADER)));
  request.addHeader(CUSTOM_HEADER,CUSTOM_HEADER_VALUE);
  assertThat(request.getHeaders(),Matchers.<String,String>hasKey(CUSTOM_HEADER));
}",0.8721109399075501
35905,"@Test(expected=IllegalArgumentException.class) public void testSaveIllegalMethod(){
  final Map<String,String> resourceParams=new HashMap<>();
  resourceParams.put(RESOURCE_PARAM_USER_ID,RESOURCE_VALUE_USER_ID);
  @SuppressWarnings({""String_Node_Str"",""String_Node_Str"",""String_Node_Str""}) final Request<Object> request=restResource.saveObject(Request.Method.DELETE,resourceParams,new DummyListener<>(),null,new Object());
}","@Test(expected=IllegalArgumentException.class) public void testSaveIllegalMethod(){
  final Map<String,String> resourceParams=new HashMap<>();
  resourceParams.put(RESOURCE_PARAM_USER_ID,RESOURCE_VALUE_USER_ID);
  restResource.saveObject(Request.Method.DELETE,resourceParams,new DummyListener<>(),null,new Object());
}",0.6288798920377868
35906,"public String getElementsKey(){
  return elementsKey;
}","@NonNull public String getElementsKey(){
  return elementsKey;
}",0.9243697478991596
35907,"public JSONArrayRequestDecorator(final Request<T> request,final int method,final String url,final String elementsKey){
  super(request,method,url);
  this.elementsKey=elementsKey;
}","public JSONArrayRequestDecorator(@NonNull final Request<T> request,final int method,@NonNull final String url,@NonNull final String elementsKey){
  super(request,method,url);
  this.elementsKey=elementsKey;
}",0.9305912596401028
35908,"public T getObject(){
  return object;
}","@NonNull public T getObject(){
  return object;
}",0.898876404494382
35909,"public MaybeRequestDecorator(final Request<T> request,final int method,final String url,final T object){
  super(request,method,url);
  this.object=object;
}","public MaybeRequestDecorator(@NonNull final Request<T> request,final int method,@NonNull final String url,@NonNull final T object){
  super(request,method,url);
  this.object=object;
}",0.9208211143695014
35910,"@Override public Request<?> setRetryPolicy(final RetryPolicy retryPolicy){
  if (request != null) {
    request.setRetryPolicy(retryPolicy);
  }
  return super.setRetryPolicy(retryPolicy);
}","@SuppressFBWarnings(value=""String_Node_Str"",justification=""String_Node_Str"") @Override public Request<?> setRetryPolicy(final RetryPolicy retryPolicy){
  if (request != null) {
    request.setRetryPolicy(retryPolicy);
  }
  return super.setRetryPolicy(retryPolicy);
}",0.8315098468271335
35911,"public RequestDecorator(final Request<T> request,final int method,final String url){
  super(method,url,null);
  this.request=request;
}","public RequestDecorator(@NonNull final Request<T> request,final int method,@NonNull final String url){
  super(method,url,null);
  this.request=request;
}",0.9379310344827586
35912,"@Override public Request<?> setRetryPolicy(final RetryPolicy retryPolicy){
  if (wrapped != null) {
    wrapped.setRetryPolicy(retryPolicy);
  }
  return super.setRetryPolicy(retryPolicy);
}","@SuppressFBWarnings(value=""String_Node_Str"",justification=""String_Node_Str"") @Override public Request<?> setRetryPolicy(final RetryPolicy retryPolicy){
  if (wrapped != null) {
    wrapped.setRetryPolicy(retryPolicy);
  }
  return super.setRetryPolicy(retryPolicy);
}",0.8315098468271335
35913,"@Override protected VolleyError parseNetworkError(final VolleyError volleyError){
  final NetworkResponse response=volleyError.networkResponse;
  if (requeuePolicy.shouldRequeue(response)) {
    try {
      wrapped.getRetryPolicy().retry(new VolleyError(""String_Node_Str""));
    }
 catch (    final VolleyError e) {
      return e;
    }
    requeuePolicy.executeBeforeRequeueing(new Listener<Object>(){
      @Override public void onResponse(      final Object arg0){
        queue.add(RequeueAfterRequestDecorator.this);
      }
    }
,new ErrorListener(){
      @Override public void onErrorResponse(      final VolleyError error){
        Log.e(VolleyLog.TAG,""String_Node_Str"",error.getCause());
      }
    }
);
    return null;
  }
  return super.parseNetworkError(volleyError);
}","@Nullable @Override protected VolleyError parseNetworkError(final VolleyError volleyError){
  final NetworkResponse response=volleyError.networkResponse;
  if (requeuePolicy.shouldRequeue(response)) {
    try {
      wrapped.getRetryPolicy().retry(new VolleyError(""String_Node_Str""));
    }
 catch (    final VolleyError e) {
      return e;
    }
    requeuePolicy.executeBeforeRequeueing(new Listener<Object>(){
      @Override public void onResponse(      final Object arg0){
        queue.add(RequeueAfterRequestDecorator.this);
      }
    }
,new ErrorListener(){
      @Override public void onErrorResponse(      final VolleyError error){
        Log.e(VolleyLog.TAG,""String_Node_Str"",error.getCause());
      }
    }
);
    return null;
  }
  return super.parseNetworkError(volleyError);
}",0.9936788874841972
35914,"/** 
 * Private constructor. Call   {@link RequeueAfterRequestDecorator#wrap(Request,RequeuePolicy)} instead.
 * @see {@link RequeueAfterRequestDecorator#wrap(Request,RequeuePolicy)}
 */
private RequeueAfterRequestDecorator(final Request<T> request,final RequeuePolicy requeuePolicy){
  super(request.getMethod(),request.getUrl(),null);
  wrapped=request;
  this.requeuePolicy=requeuePolicy;
}","/** 
 * Private constructor. Call   {@link RequeueAfterRequestDecorator#wrap(Request,RequeuePolicy)} instead.
 * @see {@link RequeueAfterRequestDecorator#wrap(Request,RequeuePolicy)}
 */
private RequeueAfterRequestDecorator(@NonNull final Request<T> request,@NonNull final RequeuePolicy requeuePolicy){
  super(request.getMethod(),request.getUrl(),null);
  wrapped=request;
  this.requeuePolicy=requeuePolicy;
}",0.9776119402985076
35915,"/** 
 * Wraps a request to extend it's retry functionality.
 * @param request the request to wrap.
 * @param requeuePolicy the interface to define retry.
 * @return the request.
 */
public static <T>RequeueAfterRequestDecorator<T> wrap(final Request<T> request,final RequeuePolicy requeuePolicy){
  return new RequeueAfterRequestDecorator<T>(request,requeuePolicy);
}","/** 
 * Wraps a request to extend it's retry functionality.
 * @param request the request to wrap.
 * @param requeuePolicy the interface to define retry.
 * @return the request.
 */
public static <T>RequeueAfterRequestDecorator<T> wrap(@NonNull final Request<T> request,@NonNull final RequeuePolicy requeuePolicy){
  return new RequeueAfterRequestDecorator<T>(request,requeuePolicy);
}",0.976063829787234
35916,"/** 
 * In case   {@link RequeuePolicy#shouldRequeue(NetworkResponse)} returns true, this method will be called.Providing listeners which are in charge of requeueing the request in case of success.
 * @param successCallback notify this listener in case of success.
 * @param errorCallback notify this listener in case of failure.
 */
void executeBeforeRequeueing(Listener<?> successCallback,ErrorListener errorCallback);","/** 
 * In case   {@link RequeuePolicy#shouldRequeue(NetworkResponse)} returns true, this method will be called.Providing listeners which are in charge of requeueing the request in case of success.
 * @param successCallback notify this listener in case of success.
 * @param errorCallback notify this listener in case of failure.
 */
void executeBeforeRequeueing(@NonNull Listener<?> successCallback,@NonNull ErrorListener errorCallback);",0.9790209790209792
35917,"/** 
 * Define a condition whether this request should retry or not.
 * @param networkResponse the given response of the first request.
 * @return true if should retry, false otherwise.
 */
boolean shouldRequeue(NetworkResponse networkResponse);","/** 
 * Define a condition whether this request should retry or not.
 * @param networkResponse the given response of the first request.
 * @return true if should retry, false otherwise.
 */
boolean shouldRequeue(@Nullable NetworkResponse networkResponse);",0.98
35918,"@Override public ImageContainer get(final String requestUrl,final ImageListener imageListener,final int maxWidth,final int maxHeight){
  if (requestUrl == null) {
    final ImageContainer container=new ImageContainer(null,requestUrl,null,null);
    imageListener.onResponse(container,true);
    return container;
  }
  return super.get(requestUrl,imageListener,maxWidth,maxHeight);
}","@Override public ImageContainer get(final String requestUrl,final ImageListener imageListener,final int maxWidth,final int maxHeight){
  if (requestUrl == null) {
    final ImageContainer container=new ImageContainer(null,null,null,null);
    imageListener.onResponse(container,true);
    return container;
  }
  return super.get(requestUrl,imageListener,maxWidth,maxHeight);
}",0.9842105263157894
35919,"public NullSafeImageLoader(final RequestQueue queue,final ImageCache imageCache){
  super(queue,imageCache);
}","public NullSafeImageLoader(@NonNull final RequestQueue queue,@NonNull final ImageCache imageCache){
  super(queue,imageCache);
}",0.9243697478991596
35920,"/** 
 * Creates a new EmptyResponseRequest instance
 * @param method The request method, {@see Method}
 * @param url The url to be requested.
 * @param listener The listener for success.
 * @param errListener The listener for errors.
 * @param jsonBody The contents of the json to be sent in the request's body.
 */
public EmptyResponseRequest(final int method,final String url,final Listener<Void> listener,final ErrorListener errListener,final String jsonBody){
  super(method,url,listener,errListener,jsonBody);
}","/** 
 * Creates a new EmptyResponseRequest instance
 * @param method The request method, {@see Method}
 * @param url The url to be requested.
 * @param listener The listener for success.
 * @param errListener The listener for errors.
 * @param jsonBody The contents of the json to be sent in the request's body.
 */
public EmptyResponseRequest(final int method,@NonNull final String url,@NonNull final Listener<Void> listener,@Nullable final ErrorListener errListener,@Nullable final String jsonBody){
  super(method,url,listener,errListener,jsonBody);
}",0.9644859813084112
35921,"public GsonRequest(final int method,final String url,final Gson gson,final Type clazz,final Listener<T> listener,final ErrorListener errListener,final String jsonBody){
  super(method,url,listener,errListener,jsonBody);
  this.gson=gson;
  this.clazz=clazz;
}","public GsonRequest(final int method,@NonNull final String url,@NonNull final Gson gson,@NonNull final Type clazz,@NonNull final Listener<T> listener,@Nullable final ErrorListener errListener,@Nullable final String jsonBody){
  super(method,url,listener,errListener,jsonBody);
  this.gson=gson;
  this.clazz=clazz;
}",0.902439024390244
35922,"@Override public byte[] getBody() throws AuthFailureError {
  return json == null ? null : json.getBytes();
}","@SuppressFBWarnings(value={""String_Node_Str"",""String_Node_Str""},justification=""String_Node_Str"") @Nullable @Override public byte[] getBody() throws AuthFailureError {
  return json == null ? null : json.getBytes();
}",0.6707692307692308
35923,"/** 
 * Creates a new RfcCompliantListenableRequest instance
 * @param method The request method, {@see Method}
 * @param url The url to be requested.
 * @param listener The listener for success.
 * @param errListener The listener for errors.
 * @param jsonBody The contents of the json to be sent in the request's body.
 */
public JsonRfcCompliantListenableRequest(final int method,final String url,final Listener<T> listener,final ErrorListener errListener,final String jsonBody){
  super(method,url,listener,errListener);
  this.json=jsonBody;
  headers=new HashMap<String,String>();
}","/** 
 * Creates a new RfcCompliantListenableRequest instance
 * @param method The request method, {@see Method}
 * @param url The url to be requested.
 * @param listener The listener for success.
 * @param errListener The listener for errors.
 * @param jsonBody The contents of the json to be sent in the request's body.
 */
public JsonRfcCompliantListenableRequest(final int method,@NonNull final String url,@NonNull final Listener<T> listener,@Nullable final ErrorListener errListener,@Nullable final String jsonBody){
  super(method,url,listener,errListener);
  this.json=jsonBody;
  headers=new HashMap<String,String>();
}",0.9686985172981878
35924,"/** 
 * Creates a new ListenableRequest instance
 * @param method The request method, {@see Method}
 * @param url The url to be requested.
 * @param listener The listener for success.
 * @param errListener The listener for errors.
 */
public ListenableRequest(final int method,final String url,final Listener<T> listener,final ErrorListener errListener){
  super(method,url,errListener);
  this.listener=listener;
}","/** 
 * Creates a new ListenableRequest instance
 * @param method The request method, {@see Method}
 * @param url The url to be requested.
 * @param listener The listener for success.
 * @param errListener The listener for errors.
 */
public ListenableRequest(final int method,@NonNull final String url,@NonNull final Listener<T> listener,@Nullable final ErrorListener errListener){
  super(method,url,errListener);
  this.listener=listener;
}",0.9673659673659674
35925,"/** 
 * Creates a new RfcCompliantListenableRequest instance
 * @param method The request method, {@see Method}
 * @param url The url to be requested.
 * @param listener The listener for success.
 * @param errListener The listener for errors.
 */
public RfcCompliantListenableRequest(final int method,final String url,final Listener<T> listener,final ErrorListener errListener){
  super(method,url,listener,errListener);
  if (method == Method.DEPRECATED_GET_OR_POST) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  setShouldCache(method == Method.GET || method == Method.HEAD);
}","/** 
 * Creates a new RfcCompliantListenableRequest instance
 * @param method The request method, {@see Method}
 * @param url The url to be requested.
 * @param listener The listener for success.
 * @param errListener The listener for errors.
 */
public RfcCompliantListenableRequest(final int method,@NonNull final String url,@NonNull final Listener<T> listener,@Nullable final ErrorListener errListener){
  super(method,url,listener,errListener);
  if (method == Method.DEPRECATED_GET_OR_POST) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  setShouldCache(method == Method.GET || method == Method.HEAD);
}",0.9771615008156608
35926,"@Override public byte[] getBody() throws AuthFailureError {
  if (bitmap == null) {
    return null;
  }
  final ByteArrayOutputStream bos=new ByteArrayOutputStream();
  try {
    bos.write(String.format(MULTIPART_HEAD,filename).getBytes());
    bitmap.compress(CompressFormat.JPEG,100,bos);
    bos.write(MULTIPART_TAIL.getBytes());
  }
 catch (  final IOException e) {
    Log.wtf(""String_Node_Str"",""String_Node_Str"",e);
  }
  return bos.toByteArray();
}","@SuppressFBWarnings(value={""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},justification=""String_Node_Str"" + ""String_Node_Str"") @Override public byte[] getBody() throws AuthFailureError {
  final ByteArrayOutputStream bos=new ByteArrayOutputStream();
  try {
    bos.write(String.format(MULTIPART_HEAD,filename).getBytes());
    bitmap.compress(CompressFormat.JPEG,100,bos);
    bos.write(MULTIPART_TAIL.getBytes());
  }
 catch (  final IOException e) {
    Log.wtf(""String_Node_Str"",""String_Node_Str"",e);
  }
  return bos.toByteArray();
}",0.8203592814371258
35927,"/** 
 * Creates a new UploadBitmapRfcCompliantListenableRequest request.
 * @param method The request method, {@see Method}
 * @param url The url to be requested.
 * @param listener The listener for success.
 * @param errListener The listener for errors.
 * @param bmp The bitmap to be uploaded.
 * @param filename The filename under which to submit the image.
 */
public UploadBitmapRfcCompliantListenableRequest(final int method,final String url,final Listener<String> listener,final ErrorListener errListener,final Bitmap bmp,final String filename){
  super(method,url,listener,errListener);
  bitmap=bmp;
  this.filename=filename;
  setRetryPolicy(new DefaultRetryPolicy(30000,1,1.5f));
}","/** 
 * Creates a new UploadBitmapRfcCompliantListenableRequest request.
 * @param method The request method, {@see Method}
 * @param url The url to be requested.
 * @param listener The listener for success.
 * @param errListener The listener for errors.
 * @param bmp The bitmap to be uploaded.
 * @param filename The filename under which to submit the image.
 */
public UploadBitmapRfcCompliantListenableRequest(final int method,@NonNull final String url,@NonNull final Listener<String> listener,@Nullable final ErrorListener errListener,@NonNull final Bitmap bmp,@NonNull final String filename){
  super(method,url,listener,errListener);
  bitmap=bmp;
  this.filename=filename;
  setRetryPolicy(new DefaultRetryPolicy(30000,1,1.5f));
}",0.967832167832168
35928,"public void mapReceived(ArrayList<Byte> msg){
  currentMessage=msg;
switch (currentMessage.get(3)) {
case INFO_MENU:
switch (currentMessage.get(6)) {
case RDS_VAL:
      int rds=(currentMessage.get(20) == 0x2A) ? 1 : 0;
    triggerCallback(""String_Node_Str"",rds);
  break;
case PTY_VAL:
int pty=(currentMessage.get(20) == 0x2A) ? 1 : 0;
triggerCallback(""String_Node_Str"",pty);
break;
}
break;
case RDS_TEXT:
triggerCallback(""String_Node_Str"",decodeData());
break;
case SCREEN_UPDATE:
byte screen_mode=currentMessage.get(4);
triggerCallback(""String_Node_Str"",(int)screen_mode);
break;
case TONE_DATA:
int bass=getToneLevel(ToneType.BASS,currentMessage.get(4));
int treb=getToneLevel(ToneType.TREB,currentMessage.get(5));
int fade=getToneLevel(ToneType.FADE,currentMessage.get(6));
int bal=getToneLevel(ToneType.BAL,currentMessage.get(7));
triggerCallback(""String_Node_Str"",bass,treb,fade,bal);
break;
case RADIO_METADATA:
byte metaDataType=currentMessage.get(6);
String dataText=decodeData();
switch (metaDataType) {
case 0x41:
triggerCallback(""String_Node_Str"",dataText);
break;
case 0x04:
case 0x44:
triggerCallback(""String_Node_Str"",dataText);
break;
case 0x45:
triggerCallback(""String_Node_Str"",dataText);
break;
case 0x02:
triggerCallback(""String_Node_Str"",dataText);
break;
}
break;
}
}","public void mapReceived(ArrayList<Byte> msg){
  currentMessage=msg;
switch (currentMessage.get(3)) {
case INFO_MENU:
switch (currentMessage.get(6)) {
case RDS_VAL:
      int rds=(currentMessage.get(20) == 0x2A) ? 1 : 0;
    triggerCallback(""String_Node_Str"",rds);
  break;
case PTY_VAL:
int pty=(currentMessage.get(20) == 0x2A) ? 1 : 0;
triggerCallback(""String_Node_Str"",pty);
break;
}
break;
case RDS_TEXT:
triggerCallback(""String_Node_Str"",decodeData());
break;
case SCREEN_UPDATE:
byte screen_mode=currentMessage.get(4);
triggerCallback(""String_Node_Str"",(int)screen_mode);
break;
case TONE_DATA:
if (currentMessage.get(1) == 0x07) {
int bass=getToneLevel(ToneType.BASS,currentMessage.get(4));
int treb=getToneLevel(ToneType.TREB,currentMessage.get(5));
int fade=getToneLevel(ToneType.FADE,currentMessage.get(6));
int bal=getToneLevel(ToneType.BAL,currentMessage.get(7));
triggerCallback(""String_Node_Str"",bass,treb,fade,bal);
}
break;
case RADIO_METADATA:
byte metaDataType=currentMessage.get(6);
String dataText=decodeData();
switch (metaDataType) {
case 0x41:
triggerCallback(""String_Node_Str"",dataText);
break;
case 0x04:
case 0x44:
triggerCallback(""String_Node_Str"",dataText);
break;
case 0x45:
triggerCallback(""String_Node_Str"",dataText);
break;
case 0x02:
triggerCallback(""String_Node_Str"",dataText);
break;
}
break;
}
}",0.9851201831362076
35929,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.main_activity);
  mDrawerList=(ListView)findViewById(R.id.left_drawer);
  String[] settingsItems=getResources().getStringArray(R.array.options_array);
  mDrawerLayout=(DrawerLayout)findViewById(R.id.drawer_layout);
  mDrawerToggle=new ActionBarDrawerToggle(this,mDrawerLayout,R.drawable.ic_drawer,R.string.drawer_open,R.string.drawer_close){
    public void onDrawerClosed(    View view){
      super.onDrawerClosed(view);
      invalidateOptionsMenu();
    }
    public void onDrawerOpened(    View drawerView){
      super.onDrawerOpened(drawerView);
      invalidateOptionsMenu();
    }
  }
;
  mDrawerLayout.post(new Runnable(){
    @Override public void run(){
      mDrawerToggle.syncState();
    }
  }
);
  mDrawerLayout.setDrawerListener(mDrawerToggle);
  getActionBar().setIcon(R.drawable.ic_drawer);
  getActionBar().setDisplayHomeAsUpEnabled(true);
  mDrawerList.setAdapter(new ArrayAdapter<String>(this,R.layout.drawer_item,settingsItems));
  mDrawerList.setOnItemClickListener(mDrawerClickListener);
  if (savedInstanceState == null) {
    getFragmentManager().addOnBackStackChangedListener(mBackstackStateListener);
    FragmentTransaction fragmentTx=getFragmentManager().beginTransaction();
    fragmentTx.replace(R.id.main,mFragments[0]);
    getActionBar().setDisplayShowTitleEnabled(true);
    fragmentTx.addToBackStack(mFragmentTitles[0]);
    fragmentTx.commit();
  }
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.main_activity);
  mDrawerList=(ListView)findViewById(R.id.left_drawer);
  String[] settingsItems=getResources().getStringArray(R.array.options_array);
  mDrawerLayout=(DrawerLayout)findViewById(R.id.drawer_layout);
  mDrawerToggle=new ActionBarDrawerToggle(this,mDrawerLayout,R.drawable.ic_drawer,R.string.drawer_open,R.string.drawer_close){
    public void onDrawerClosed(    View view){
      super.onDrawerClosed(view);
      invalidateOptionsMenu();
    }
    public void onDrawerOpened(    View drawerView){
      super.onDrawerOpened(drawerView);
      invalidateOptionsMenu();
    }
  }
;
  mDrawerLayout.post(new Runnable(){
    @Override public void run(){
      mDrawerToggle.syncState();
    }
  }
);
  mDrawerLayout.setDrawerListener(mDrawerToggle);
  getActionBar().setIcon(R.drawable.ic_drawer);
  getActionBar().setDisplayHomeAsUpEnabled(true);
  mDrawerListAdapter=new ArrayAdapter<String>(this,R.layout.drawer_item,settingsItems);
  mDrawerList.setAdapter(mDrawerListAdapter);
  mDrawerList.setOnItemClickListener(mDrawerClickListener);
  if (savedInstanceState == null) {
    getFragmentManager().addOnBackStackChangedListener(mBackstackStateListener);
    FragmentTransaction fragmentTx=getFragmentManager().beginTransaction();
    fragmentTx.replace(R.id.main,mFragments[0]);
    getActionBar().setDisplayShowTitleEnabled(true);
    fragmentTx.addToBackStack(mFragmentTitles[0]);
    fragmentTx.commit();
  }
}",0.9833930315858028
35930,"@Override public void onItemClick(AdapterView<?> parent,View view,final int position,long id){
  mDrawerLayout.setDrawerListener(new DrawerLayout.SimpleDrawerListener(){
    @Override public void onDrawerClosed(    View drawerView){
      super.onDrawerClosed(drawerView);
      getActionBar().setDisplayShowTitleEnabled(true);
      FragmentTransaction fragmentTx=getFragmentManager().beginTransaction();
      String fragmentTitle=mFragmentTitles[position];
      if (fragmentTitle.equals(""String_Node_Str"")) {
        Intent intent=new Intent();
        intent.setClassName(""String_Node_Str"",""String_Node_Str"");
        intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
        startActivity(intent);
      }
 else {
        fragmentTx.replace(R.id.main,mFragments[position]);
        fragmentTx.addToBackStack(fragmentTitle);
        fragmentTx.commit();
      }
    }
  }
);
  mDrawerLayout.closeDrawer(mDrawerList);
}","@Override public void onItemClick(AdapterView<?> parent,View view,final int position,long id){
  mDrawerLayout.setDrawerListener(new DrawerLayout.SimpleDrawerListener(){
    @Override public void onDrawerClosed(    View drawerView){
      super.onDrawerClosed(drawerView);
      getActionBar().setDisplayShowTitleEnabled(true);
      FragmentTransaction fragmentTx=getFragmentManager().beginTransaction();
      String fragmentTitle=mFragmentTitles[position];
      if (fragmentTitle.equals(""String_Node_Str"")) {
        Intent intent=new Intent();
        intent.setClassName(""String_Node_Str"",""String_Node_Str"");
        intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
        startActivity(intent);
      }
 else {
        fragmentTx.replace(R.id.main,mFragments[position]);
        fragmentTx.addToBackStack(fragmentTitle);
        fragmentTx.commit();
      }
    }
  }
);
  mDrawerList.clearChoices();
  mDrawerListAdapter.notifyDataSetChanged();
  mDrawerLayout.closeDrawer(mDrawerList);
}",0.9598330725091287
35931,"/** 
 * Callback to handle Ignition State Updates
 * @param int State of Ignition (0, 1, 2)
 */
@Override public void onUpdateIgnitionSate(final int state){
  int screenState=(state > 0) ? SCREEN_ON : SCREEN_ON;
  setScreenState(screenState);
}","/** 
 * Callback to handle Ignition State Updates
 * @param int State of Ignition (0, 1, 2)
 */
@Override public void onUpdateIgnitionSate(final int state){
  int screenState=(state > 0) ? SCREEN_ON : SCREEN_OFF;
  setScreenState(screenState);
}",0.9938650306748468
35932,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  final View v=inflater.inflate(R.layout.dashboard_music,container,false);
  Log.d(TAG,""String_Node_Str"");
  mSettings=PreferenceManager.getDefaultSharedPreferences(getActivity());
  String radioType=mSettings.getString(""String_Node_Str"",""String_Node_Str"");
  mRadioType=(radioType.equals(""String_Node_Str"")) ? RadioTypes.BM53 : RadioTypes.CD53;
  if (mCurrentRadioMode == null) {
    mCurrentRadioMode=RadioModes.AUX;
  }
  mRadioLayout=(LinearLayout)v.findViewById(R.id.radioAudio);
  mTabletLayout=(LinearLayout)v.findViewById(R.id.tabletAudio);
  mPlayerPrevBtn=(ImageButton)v.findViewById(R.id.playerPrevBtn);
  mPlayerControlBtn=(ImageButton)v.findViewById(R.id.playerPlayPauseBtn);
  mPlayerNextBtn=(ImageButton)v.findViewById(R.id.playerNextBtn);
  mPlayerTitleText=(TextView)v.findViewById(R.id.playerTitleField);
  mPlayerAlbumText=(TextView)v.findViewById(R.id.playerAlbumField);
  mPlayerArtistText=(TextView)v.findViewById(R.id.playerArtistField);
  mPlayerArtwork=(ImageView)v.findViewById(R.id.albumArt);
  mPlayerScrubBar=(SeekBar)v.findViewById(R.id.playerTrackBar);
  OnClickListener playerClickListener=new OnClickListener(){
    @Override public void onClick(    View v){
      if (mMediaPlayerConnected) {
switch (v.getId()) {
case R.id.playerPrevBtn:
          mPlayerService.sendPreviousKey();
        break;
case R.id.playerNextBtn:
      mPlayerService.sendNextKey();
    break;
case R.id.playerPlayPauseBtn:
  if (mIsPlaying) {
    mIsPlaying=false;
    mPlayerService.sendPauseKey();
  }
 else {
    mIsPlaying=true;
    mPlayerService.sendPlayKey();
  }
break;
}
}
}
}
;
mPlayerPrevBtn.setOnClickListener(playerClickListener);
mPlayerNextBtn.setOnClickListener(playerClickListener);
mPlayerControlBtn.setOnClickListener(playerClickListener);
mPlayerScrubBar.setOnSeekBarChangeListener(new OnSeekBarChangeListener(){
@Override public void onProgressChanged(SeekBar seekBar,int progress,boolean fromUser){
if (mMediaPlayerConnected && fromUser) {
mPlayerService.seekTo(mSongDuration * progress / seekBar.getMax());
}
}
@Override public void onStartTrackingTouch(SeekBar seekBar){
mHandler.removeCallbacks(mUpdateSeekBar);
}
@Override public void onStopTrackingTouch(SeekBar seekBar){
mHandler.post(mUpdateSeekBar);
}
}
);
ImageButton btnVolUp=(ImageButton)v.findViewById(R.id.btnVolUp);
ImageButton btnVolDown=(ImageButton)v.findViewById(R.id.btnVolDown);
Button btnRadioFM=(Button)v.findViewById(R.id.btnRadioFM);
Button btnRadioAM=(Button)v.findViewById(R.id.btnRadioAM);
mBtnMusicMode=(Switch)v.findViewById(R.id.btnMusicMode);
ImageButton btnPrev=(ImageButton)v.findViewById(R.id.btnPrev);
ImageButton btnNext=(ImageButton)v.findViewById(R.id.btnNext);
mStationText=(TextView)v.findViewById(R.id.stationText);
mRDSField=(TextView)v.findViewById(R.id.radioRDSIndicator);
mStereoField=(TextView)v.findViewById(R.id.radioStereoIndicator);
mProgramField=(TextView)v.findViewById(R.id.radioProgram);
mBroadcastField=(TextView)v.findViewById(R.id.radioBroadcast);
if (mRadioType == RadioTypes.BM53) {
btnVolUp.setTag(IBusCommandsEnum.BMToRadioVolumeUp.name());
btnVolDown.setTag(IBusCommandsEnum.BMToRadioVolumeDown.name());
btnPrev.setTag(""String_Node_Str"");
btnNext.setTag(""String_Node_Str"");
}
 else {
btnVolUp.setTag(IBusCommandsEnum.SWToRadioVolumeUp.name());
btnVolDown.setTag(IBusCommandsEnum.SWToRadioVolumeDown.name());
btnPrev.setTag(""String_Node_Str"");
btnNext.setTag(""String_Node_Str"");
}
btnRadioFM.setTag(""String_Node_Str"");
btnRadioAM.setTag(""String_Node_Str"");
mBtnMusicMode.setOnCheckedChangeListener(new OnCheckedChangeListener(){
public void onCheckedChanged(CompoundButton buttonView,boolean isChecked){
Log.d(TAG,""String_Node_Str"");
if (isChecked) {
if (!(mCurrentRadioMode == RadioModes.AUX) && mRadioType == RadioTypes.BM53) {
changeRadioMode(RadioModes.AUX);
}
mRadioLayout.setVisibility(View.GONE);
mTabletLayout.setVisibility(View.VISIBLE);
}
 else {
if (mIsPlaying) {
mPlayerService.sendPauseKey();
}
if ((mCurrentRadioMode == RadioModes.AUX || mCurrentRadioMode == RadioModes.CD) && mRadioType == RadioTypes.BM53) {
changeRadioMode(RadioModes.Radio);
}
mRadioLayout.setVisibility(View.VISIBLE);
mTabletLayout.setVisibility(View.GONE);
}
}
}
);
OnClickListener clickSingleAction=new OnClickListener(){
@Override public void onClick(View v){
sendIBusCommand(IBusCommandsEnum.valueOf(v.getTag().toString()));
}
}
;
OnTouchListener touchAction=new OnTouchListener(){
@SuppressLint(""String_Node_Str"") @Override public boolean onTouch(View v,MotionEvent event){
String action=(event.getAction() == MotionEvent.ACTION_DOWN) ? ""String_Node_Str"" : ""String_Node_Str"";
sendIBusCommand(IBusCommandsEnum.valueOf(v.getTag().toString() + action));
return false;
}
}
;
btnVolUp.setOnClickListener(clickSingleAction);
btnVolDown.setOnClickListener(clickSingleAction);
btnRadioFM.setOnTouchListener(touchAction);
btnRadioAM.setOnTouchListener(touchAction);
btnPrev.setOnTouchListener(touchAction);
btnNext.setOnTouchListener(touchAction);
if (mRadioType != RadioTypes.BM53) {
mCurrentRadioMode=RadioModes.AUX;
mBtnMusicMode.setVisibility(View.GONE);
mRadioLayout.setVisibility(View.GONE);
mTabletLayout.setVisibility(View.VISIBLE);
}
return v;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  final View v=inflater.inflate(R.layout.dashboard_music,container,false);
  Log.d(TAG,""String_Node_Str"");
  mSettings=PreferenceManager.getDefaultSharedPreferences(getActivity());
  String radioType=mSettings.getString(""String_Node_Str"",""String_Node_Str"");
  mRadioType=(radioType.equals(""String_Node_Str"")) ? RadioTypes.BM53 : RadioTypes.CD53;
  mRadioLayout=(LinearLayout)v.findViewById(R.id.radioAudio);
  mTabletLayout=(LinearLayout)v.findViewById(R.id.tabletAudio);
  mPlayerPrevBtn=(ImageButton)v.findViewById(R.id.playerPrevBtn);
  mPlayerControlBtn=(ImageButton)v.findViewById(R.id.playerPlayPauseBtn);
  mPlayerNextBtn=(ImageButton)v.findViewById(R.id.playerNextBtn);
  mPlayerTitleText=(TextView)v.findViewById(R.id.playerTitleField);
  mPlayerAlbumText=(TextView)v.findViewById(R.id.playerAlbumField);
  mPlayerArtistText=(TextView)v.findViewById(R.id.playerArtistField);
  mPlayerArtwork=(ImageView)v.findViewById(R.id.albumArt);
  mPlayerScrubBar=(SeekBar)v.findViewById(R.id.playerTrackBar);
  OnClickListener playerClickListener=new OnClickListener(){
    @Override public void onClick(    View v){
      if (mMediaPlayerConnected) {
switch (v.getId()) {
case R.id.playerPrevBtn:
          mPlayerService.sendPreviousKey();
        break;
case R.id.playerNextBtn:
      mPlayerService.sendNextKey();
    break;
case R.id.playerPlayPauseBtn:
  if (mIsPlaying) {
    mIsPlaying=false;
    mPlayerService.sendPauseKey();
  }
 else {
    mIsPlaying=true;
    mPlayerService.sendPlayKey();
  }
break;
}
}
}
}
;
mPlayerPrevBtn.setOnClickListener(playerClickListener);
mPlayerNextBtn.setOnClickListener(playerClickListener);
mPlayerControlBtn.setOnClickListener(playerClickListener);
mPlayerScrubBar.setOnSeekBarChangeListener(new OnSeekBarChangeListener(){
@Override public void onProgressChanged(SeekBar seekBar,int progress,boolean fromUser){
if (mMediaPlayerConnected && fromUser) {
mPlayerService.seekTo(mSongDuration * progress / seekBar.getMax());
}
}
@Override public void onStartTrackingTouch(SeekBar seekBar){
mHandler.removeCallbacks(mUpdateSeekBar);
}
@Override public void onStopTrackingTouch(SeekBar seekBar){
mHandler.post(mUpdateSeekBar);
}
}
);
ImageButton btnVolUp=(ImageButton)v.findViewById(R.id.btnVolUp);
ImageButton btnVolDown=(ImageButton)v.findViewById(R.id.btnVolDown);
Button btnRadioFM=(Button)v.findViewById(R.id.btnRadioFM);
Button btnRadioAM=(Button)v.findViewById(R.id.btnRadioAM);
mBtnMusicMode=(Switch)v.findViewById(R.id.btnMusicMode);
ImageButton btnPrev=(ImageButton)v.findViewById(R.id.btnPrev);
ImageButton btnNext=(ImageButton)v.findViewById(R.id.btnNext);
mStationText=(TextView)v.findViewById(R.id.stationText);
mRDSField=(TextView)v.findViewById(R.id.radioRDSIndicator);
mStereoField=(TextView)v.findViewById(R.id.radioStereoIndicator);
mProgramField=(TextView)v.findViewById(R.id.radioProgram);
mBroadcastField=(TextView)v.findViewById(R.id.radioBroadcast);
if (mRadioType == RadioTypes.BM53) {
btnVolUp.setTag(IBusCommandsEnum.BMToRadioVolumeUp.name());
btnVolDown.setTag(IBusCommandsEnum.BMToRadioVolumeDown.name());
btnPrev.setTag(""String_Node_Str"");
btnNext.setTag(""String_Node_Str"");
}
 else {
btnVolUp.setTag(IBusCommandsEnum.SWToRadioVolumeUp.name());
btnVolDown.setTag(IBusCommandsEnum.SWToRadioVolumeDown.name());
btnPrev.setTag(""String_Node_Str"");
btnNext.setTag(""String_Node_Str"");
}
btnRadioFM.setTag(""String_Node_Str"");
btnRadioAM.setTag(""String_Node_Str"");
mBtnMusicMode.setOnCheckedChangeListener(new OnCheckedChangeListener(){
public void onCheckedChanged(CompoundButton buttonView,boolean isChecked){
Log.d(TAG,""String_Node_Str"");
if (isChecked) {
if (!(mCurrentRadioMode == RadioModes.AUX) && mRadioType == RadioTypes.BM53) {
changeRadioMode(RadioModes.AUX);
}
mRadioLayout.setVisibility(View.GONE);
mTabletLayout.setVisibility(View.VISIBLE);
}
 else {
if (mIsPlaying) {
mPlayerService.sendPauseKey();
}
if ((mCurrentRadioMode == RadioModes.AUX || mCurrentRadioMode == RadioModes.CD) && mRadioType == RadioTypes.BM53) {
changeRadioMode(RadioModes.Radio);
}
mRadioLayout.setVisibility(View.VISIBLE);
mTabletLayout.setVisibility(View.GONE);
}
}
}
);
OnClickListener clickSingleAction=new OnClickListener(){
@Override public void onClick(View v){
sendIBusCommand(IBusCommandsEnum.valueOf(v.getTag().toString()));
}
}
;
OnTouchListener touchAction=new OnTouchListener(){
@SuppressLint(""String_Node_Str"") @Override public boolean onTouch(View v,MotionEvent event){
String action=(event.getAction() == MotionEvent.ACTION_DOWN) ? ""String_Node_Str"" : ""String_Node_Str"";
sendIBusCommand(IBusCommandsEnum.valueOf(v.getTag().toString() + action));
return false;
}
}
;
btnVolUp.setOnClickListener(clickSingleAction);
btnVolDown.setOnClickListener(clickSingleAction);
btnRadioFM.setOnTouchListener(touchAction);
btnRadioAM.setOnTouchListener(touchAction);
btnPrev.setOnTouchListener(touchAction);
btnNext.setOnTouchListener(touchAction);
if (mRadioType != RadioTypes.BM53) {
mCurrentRadioMode=RadioModes.AUX;
mBtnMusicMode.setVisibility(View.GONE);
mRadioLayout.setVisibility(View.GONE);
mTabletLayout.setVisibility(View.VISIBLE);
}
return v;
}",0.992663172939495
35933,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setRetainInstance(true);
  getActivity().registerReceiver(receiver,new IntentFilter(Intent.ACTION_BATTERY_CHANGED));
  Log.d(TAG,""String_Node_Str"");
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setRetainInstance(true);
  getActivity().registerReceiver(mChargingReceiver,new IntentFilter(Intent.ACTION_BATTERY_CHANGED));
  Log.d(TAG,""String_Node_Str"");
}",0.9783037475345168
35934,"@Override public void onDestroy(){
  super.onDestroy();
  Log.d(TAG,""String_Node_Str"");
  mIBusService.removeCallback(mIBusUpdateListener);
  releaseWakelock();
  if (mIBusBound) {
    unbindServices();
  }
  getActivity().unregisterReceiver(receiver);
}","@Override public void onDestroy(){
  super.onDestroy();
  Log.d(TAG,""String_Node_Str"");
  mIBusService.removeCallback(mIBusUpdateListener);
  releaseWakelock();
  if (mIBusBound) {
    unbindServices();
  }
  getActivity().unregisterReceiver(mChargingReceiver);
}",0.9787234042553192
35935,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  final View v=inflater.inflate(R.layout.dashboard,container,false);
  Log.d(TAG,""String_Node_Str"");
  mSettings=PreferenceManager.getDefaultSharedPreferences(getActivity());
  speedUnit=(TextView)v.findViewById(R.id.speedFieldUnit);
  avgSpeedUnit=(TextView)v.findViewById(R.id.avgSpeedUnit);
  rangeFieldUnit=(TextView)v.findViewById(R.id.rangeFieldUnit);
  consumption1Unit=(TextView)v.findViewById(R.id.consumption1Unit);
  consumption2Unit=(TextView)v.findViewById(R.id.consumption2Unit);
  outdoorTempUnit=(TextView)v.findViewById(R.id.outdoorTempUnit);
  coolantTempUnit=(TextView)v.findViewById(R.id.coolantTempUnit);
  updateDisplayedUnits();
  String radioType=mSettings.getString(""String_Node_Str"",""String_Node_Str"");
  mRadioType=(radioType.equals(""String_Node_Str"")) ? RadioTypes.BM53 : RadioTypes.CD53;
  changeScreenState(true);
  dashboardLayout=(RelativeLayout)v.findViewById(R.id.dashboardLayout);
  radioLayout=(LinearLayout)v.findViewById(R.id.radioAudio);
  tabletLayout=(LinearLayout)v.findViewById(R.id.tabletAudio);
  mPlayerPrevBtn=(ImageButton)v.findViewById(R.id.playerPrevBtn);
  mPlayerControlBtn=(ImageButton)v.findViewById(R.id.playerPlayPauseBtn);
  mPlayerNextBtn=(ImageButton)v.findViewById(R.id.playerNextBtn);
  mPlayerTitleText=(TextView)v.findViewById(R.id.playerTitleField);
  mPlayerAlbumText=(TextView)v.findViewById(R.id.playerAlbumField);
  mPlayerArtistText=(TextView)v.findViewById(R.id.playerArtistField);
  mPlayerArtwork=(ImageView)v.findViewById(R.id.albumArt);
  mPlayerScrubBar=(SeekBar)v.findViewById(R.id.playerTrackBar);
  OnClickListener playerClickListener=new OnClickListener(){
    @Override public void onClick(    View v){
      if (mPlayerBound) {
switch (v.getId()) {
case R.id.playerPrevBtn:
          mPlayerService.sendPreviousKey();
        break;
case R.id.playerNextBtn:
      mPlayerService.sendNextKey();
    break;
case R.id.playerPlayPauseBtn:
  if (mIsPlaying) {
    mIsPlaying=false;
    mPlayerService.sendPauseKey();
  }
 else {
    mIsPlaying=true;
    mPlayerService.sendPlayKey();
  }
break;
}
}
}
}
;
mPlayerPrevBtn.setOnClickListener(playerClickListener);
mPlayerNextBtn.setOnClickListener(playerClickListener);
mPlayerControlBtn.setOnClickListener(playerClickListener);
mPlayerScrubBar.setOnSeekBarChangeListener(new OnSeekBarChangeListener(){
@Override public void onProgressChanged(SeekBar seekBar,int progress,boolean fromUser){
if (mPlayerBound && fromUser) {
mPlayerService.seekTo(mSongDuration * progress / seekBar.getMax());
}
}
@Override public void onStartTrackingTouch(SeekBar seekBar){
mHandler.removeCallbacks(mUpdateSeekBar);
}
@Override public void onStopTrackingTouch(SeekBar seekBar){
mHandler.post(mUpdateSeekBar);
}
}
);
ImageButton btnVolUp=(ImageButton)v.findViewById(R.id.btnVolUp);
ImageButton btnVolDown=(ImageButton)v.findViewById(R.id.btnVolDown);
Button btnRadioFM=(Button)v.findViewById(R.id.btnRadioFM);
Button btnRadioAM=(Button)v.findViewById(R.id.btnRadioAM);
mBtnMusicMode=(Switch)v.findViewById(R.id.btnMusicMode);
ImageButton btnPrev=(ImageButton)v.findViewById(R.id.btnPrev);
ImageButton btnNext=(ImageButton)v.findViewById(R.id.btnNext);
stationText=(TextView)v.findViewById(R.id.stationText);
radioRDSIndicatorField=(TextView)v.findViewById(R.id.radioRDSIndicator);
radioStereoIndicatorField=(TextView)v.findViewById(R.id.radioStereoIndicator);
radioProgramField=(TextView)v.findViewById(R.id.radioProgram);
radioBroadcastField=(TextView)v.findViewById(R.id.radioBroadcast);
speedField=(TextView)v.findViewById(R.id.speedField);
rpmField=(TextView)v.findViewById(R.id.rpmField);
rangeField=(TextView)v.findViewById(R.id.rangeField);
fuel1Field=(TextView)v.findViewById(R.id.consumption1);
fuel2Field=(TextView)v.findViewById(R.id.consumption2);
avgSpeedField=(TextView)v.findViewById(R.id.avgSpeed);
outTempField=(TextView)v.findViewById(R.id.outdoorTempField);
coolantTempField=(TextView)v.findViewById(R.id.coolantTempField);
geoCoordinatesField=(TextView)v.findViewById(R.id.geoCoordinatesField);
geoStreetField=(TextView)v.findViewById(R.id.geoStreetField);
geoLocaleField=(TextView)v.findViewById(R.id.geoLocaleField);
geoAltitudeField=(TextView)v.findViewById(R.id.geoAltitudeField);
dateField=(TextView)v.findViewById(R.id.dateField);
timeField=(TextView)v.findViewById(R.id.timeField);
if (mRadioType == RadioTypes.BM53) {
btnVolUp.setTag(IBusCommandsEnum.BMToRadioVolumeUp.name());
btnVolDown.setTag(IBusCommandsEnum.BMToRadioVolumeDown.name());
btnPrev.setTag(""String_Node_Str"");
btnNext.setTag(""String_Node_Str"");
}
 else {
btnVolUp.setTag(IBusCommandsEnum.SWToRadioVolumeUp.name());
btnVolDown.setTag(IBusCommandsEnum.SWToRadioVolumeDown.name());
btnPrev.setTag(""String_Node_Str"");
btnNext.setTag(""String_Node_Str"");
}
btnRadioFM.setTag(""String_Node_Str"");
btnRadioAM.setTag(""String_Node_Str"");
mBtnMusicMode.setOnCheckedChangeListener(new OnCheckedChangeListener(){
public void onCheckedChanged(CompoundButton buttonView,boolean isChecked){
Log.d(TAG,""String_Node_Str"");
if (isChecked) {
if (!(mCurrentRadioMode == RadioModes.AUX) && mRadioType == RadioTypes.BM53) {
changeRadioMode(RadioModes.AUX);
}
radioLayout.setVisibility(View.GONE);
tabletLayout.setVisibility(View.VISIBLE);
}
 else {
if (mIsPlaying) {
mPlayerService.sendPauseKey();
}
if ((mCurrentRadioMode == RadioModes.AUX || mCurrentRadioMode == RadioModes.CD) && mRadioType == RadioTypes.BM53) {
changeRadioMode(RadioModes.Radio);
}
radioLayout.setVisibility(View.VISIBLE);
tabletLayout.setVisibility(View.GONE);
}
}
}
);
if (mRadioType == RadioTypes.CD53) {
mBtnMusicMode.setVisibility(View.GONE);
radioLayout.setVisibility(View.GONE);
tabletLayout.setVisibility(View.VISIBLE);
}
OnLongClickListener valueResetter=new OnLongClickListener(){
@Override public boolean onLongClick(View v){
IBusCommandsEnum action=IBusCommandsEnum.valueOf(v.getTag().toString());
switch (action) {
case BMToIKEResetFuel1:
showToast(""String_Node_Str"");
break;
case BMToIKEResetFuel2:
showToast(""String_Node_Str"");
break;
case BMToIKEResetAvgSpeed:
showToast(""String_Node_Str"");
break;
default :
break;
}
sendIBusCommand(action);
return true;
}
}
;
fuel1Field.setTag(IBusCommandsEnum.BMToIKEResetFuel1.name());
fuel2Field.setTag(IBusCommandsEnum.BMToIKEResetFuel1.name());
avgSpeedField.setTag(IBusCommandsEnum.BMToIKEResetAvgSpeed.name());
fuel1Field.setOnLongClickListener(valueResetter);
fuel2Field.setOnLongClickListener(valueResetter);
avgSpeedField.setOnLongClickListener(valueResetter);
OnClickListener clickSingleAction=new OnClickListener(){
@Override public void onClick(View v){
sendIBusCommand(IBusCommandsEnum.valueOf(v.getTag().toString()));
}
}
;
OnTouchListener touchAction=new OnTouchListener(){
@SuppressLint(""String_Node_Str"") @Override public boolean onTouch(View v,MotionEvent event){
String action=(event.getAction() == MotionEvent.ACTION_DOWN) ? ""String_Node_Str"" : ""String_Node_Str"";
sendIBusCommand(IBusCommandsEnum.valueOf(v.getTag().toString() + action));
return false;
}
}
;
btnVolUp.setOnClickListener(clickSingleAction);
btnVolDown.setOnClickListener(clickSingleAction);
btnRadioFM.setOnTouchListener(touchAction);
btnRadioAM.setOnTouchListener(touchAction);
btnPrev.setOnTouchListener(touchAction);
btnNext.setOnTouchListener(touchAction);
boolean geoAvailable=mSettings.getBoolean(""String_Node_Str"",false);
if (!geoAvailable) {
int layoutMargin=(int)(230 * getResources().getDisplayMetrics().density + 0.5f);
View geoLayout=v.findViewById(R.id.geoLayout);
View geoLocation=v.findViewById(R.id.geoLocation);
geoLayout.setVisibility(View.GONE);
geoLocation.setVisibility(View.GONE);
LinearLayout.LayoutParams tempLayoutParams=(LinearLayout.LayoutParams)v.findViewById(R.id.tempLayout).getLayoutParams();
tempLayoutParams.setMargins(layoutMargin,0,0,0);
LinearLayout.LayoutParams consumptionLayoutParams=(LinearLayout.LayoutParams)v.findViewById(R.id.consumptionLayout).getLayoutParams();
consumptionLayoutParams.setMargins(layoutMargin,0,0,0);
}
return v;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  final View v=inflater.inflate(R.layout.dashboard,container,false);
  Log.d(TAG,""String_Node_Str"");
  mSettings=PreferenceManager.getDefaultSharedPreferences(getActivity());
  speedUnit=(TextView)v.findViewById(R.id.speedFieldUnit);
  avgSpeedUnit=(TextView)v.findViewById(R.id.avgSpeedUnit);
  rangeFieldUnit=(TextView)v.findViewById(R.id.rangeFieldUnit);
  consumption1Unit=(TextView)v.findViewById(R.id.consumption1Unit);
  consumption2Unit=(TextView)v.findViewById(R.id.consumption2Unit);
  outdoorTempUnit=(TextView)v.findViewById(R.id.outdoorTempUnit);
  coolantTempUnit=(TextView)v.findViewById(R.id.coolantTempUnit);
  updateDisplayedUnits();
  String radioType=mSettings.getString(""String_Node_Str"",""String_Node_Str"");
  mRadioType=(radioType.equals(""String_Node_Str"")) ? RadioTypes.BM53 : RadioTypes.CD53;
  changeScreenState(true);
  dashboardLayout=(RelativeLayout)v.findViewById(R.id.dashboardLayout);
  radioLayout=(LinearLayout)v.findViewById(R.id.radioAudio);
  tabletLayout=(LinearLayout)v.findViewById(R.id.tabletAudio);
  mPlayerPrevBtn=(ImageButton)v.findViewById(R.id.playerPrevBtn);
  mPlayerControlBtn=(ImageButton)v.findViewById(R.id.playerPlayPauseBtn);
  mPlayerNextBtn=(ImageButton)v.findViewById(R.id.playerNextBtn);
  mPlayerTitleText=(TextView)v.findViewById(R.id.playerTitleField);
  mPlayerAlbumText=(TextView)v.findViewById(R.id.playerAlbumField);
  mPlayerArtistText=(TextView)v.findViewById(R.id.playerArtistField);
  mPlayerArtwork=(ImageView)v.findViewById(R.id.albumArt);
  mPlayerScrubBar=(SeekBar)v.findViewById(R.id.playerTrackBar);
  OnClickListener playerClickListener=new OnClickListener(){
    @Override public void onClick(    View v){
      if (mPlayerBound) {
switch (v.getId()) {
case R.id.playerPrevBtn:
          mPlayerService.sendPreviousKey();
        break;
case R.id.playerNextBtn:
      mPlayerService.sendNextKey();
    break;
case R.id.playerPlayPauseBtn:
  if (mIsPlaying) {
    mIsPlaying=false;
    mPlayerService.sendPauseKey();
  }
 else {
    mIsPlaying=true;
    mPlayerService.sendPlayKey();
  }
break;
}
}
}
}
;
mPlayerPrevBtn.setOnClickListener(playerClickListener);
mPlayerNextBtn.setOnClickListener(playerClickListener);
mPlayerControlBtn.setOnClickListener(playerClickListener);
mPlayerScrubBar.setOnSeekBarChangeListener(new OnSeekBarChangeListener(){
@Override public void onProgressChanged(SeekBar seekBar,int progress,boolean fromUser){
if (mPlayerBound && fromUser) {
mPlayerService.seekTo(mSongDuration * progress / seekBar.getMax());
}
}
@Override public void onStartTrackingTouch(SeekBar seekBar){
mHandler.removeCallbacks(mUpdateSeekBar);
}
@Override public void onStopTrackingTouch(SeekBar seekBar){
mHandler.post(mUpdateSeekBar);
}
}
);
ImageButton btnVolUp=(ImageButton)v.findViewById(R.id.btnVolUp);
ImageButton btnVolDown=(ImageButton)v.findViewById(R.id.btnVolDown);
Button btnRadioFM=(Button)v.findViewById(R.id.btnRadioFM);
Button btnRadioAM=(Button)v.findViewById(R.id.btnRadioAM);
mBtnMusicMode=(Switch)v.findViewById(R.id.btnMusicMode);
ImageButton btnPrev=(ImageButton)v.findViewById(R.id.btnPrev);
ImageButton btnNext=(ImageButton)v.findViewById(R.id.btnNext);
stationText=(TextView)v.findViewById(R.id.stationText);
radioRDSIndicatorField=(TextView)v.findViewById(R.id.radioRDSIndicator);
radioStereoIndicatorField=(TextView)v.findViewById(R.id.radioStereoIndicator);
radioProgramField=(TextView)v.findViewById(R.id.radioProgram);
radioBroadcastField=(TextView)v.findViewById(R.id.radioBroadcast);
speedField=(TextView)v.findViewById(R.id.speedField);
rpmField=(TextView)v.findViewById(R.id.rpmField);
rangeField=(TextView)v.findViewById(R.id.rangeField);
fuel1Field=(TextView)v.findViewById(R.id.consumption1);
fuel2Field=(TextView)v.findViewById(R.id.consumption2);
avgSpeedField=(TextView)v.findViewById(R.id.avgSpeed);
outTempField=(TextView)v.findViewById(R.id.outdoorTempField);
coolantTempField=(TextView)v.findViewById(R.id.coolantTempField);
geoCoordinatesField=(TextView)v.findViewById(R.id.geoCoordinatesField);
geoStreetField=(TextView)v.findViewById(R.id.geoStreetField);
geoLocaleField=(TextView)v.findViewById(R.id.geoLocaleField);
geoAltitudeField=(TextView)v.findViewById(R.id.geoAltitudeField);
dateField=(TextView)v.findViewById(R.id.dateField);
timeField=(TextView)v.findViewById(R.id.timeField);
if (mRadioType == RadioTypes.BM53) {
btnVolUp.setTag(IBusCommandsEnum.BMToRadioVolumeUp.name());
btnVolDown.setTag(IBusCommandsEnum.BMToRadioVolumeDown.name());
btnPrev.setTag(""String_Node_Str"");
btnNext.setTag(""String_Node_Str"");
}
 else {
btnVolUp.setTag(IBusCommandsEnum.SWToRadioVolumeUp.name());
btnVolDown.setTag(IBusCommandsEnum.SWToRadioVolumeDown.name());
btnPrev.setTag(""String_Node_Str"");
btnNext.setTag(""String_Node_Str"");
}
btnRadioFM.setTag(""String_Node_Str"");
btnRadioAM.setTag(""String_Node_Str"");
mBtnMusicMode.setOnCheckedChangeListener(new OnCheckedChangeListener(){
public void onCheckedChanged(CompoundButton buttonView,boolean isChecked){
Log.d(TAG,""String_Node_Str"");
if (isChecked) {
if (!(mCurrentRadioMode == RadioModes.AUX) && mRadioType == RadioTypes.BM53) {
changeRadioMode(RadioModes.AUX);
}
radioLayout.setVisibility(View.GONE);
tabletLayout.setVisibility(View.VISIBLE);
}
 else {
if (mIsPlaying) {
mPlayerService.sendPauseKey();
}
if ((mCurrentRadioMode == RadioModes.AUX || mCurrentRadioMode == RadioModes.CD) && mRadioType == RadioTypes.BM53) {
changeRadioMode(RadioModes.Radio);
}
radioLayout.setVisibility(View.VISIBLE);
tabletLayout.setVisibility(View.GONE);
}
}
}
);
if (mRadioType == RadioTypes.CD53) {
mCurrentRadioMode=RadioModes.AUX;
mBtnMusicMode.setVisibility(View.GONE);
radioLayout.setVisibility(View.GONE);
tabletLayout.setVisibility(View.VISIBLE);
}
OnLongClickListener valueResetter=new OnLongClickListener(){
@Override public boolean onLongClick(View v){
IBusCommandsEnum action=IBusCommandsEnum.valueOf(v.getTag().toString());
switch (action) {
case BMToIKEResetFuel1:
showToast(""String_Node_Str"");
break;
case BMToIKEResetFuel2:
showToast(""String_Node_Str"");
break;
case BMToIKEResetAvgSpeed:
showToast(""String_Node_Str"");
break;
default :
break;
}
sendIBusCommand(action);
return true;
}
}
;
fuel1Field.setTag(IBusCommandsEnum.BMToIKEResetFuel1.name());
fuel2Field.setTag(IBusCommandsEnum.BMToIKEResetFuel1.name());
avgSpeedField.setTag(IBusCommandsEnum.BMToIKEResetAvgSpeed.name());
fuel1Field.setOnLongClickListener(valueResetter);
fuel2Field.setOnLongClickListener(valueResetter);
avgSpeedField.setOnLongClickListener(valueResetter);
OnClickListener clickSingleAction=new OnClickListener(){
@Override public void onClick(View v){
sendIBusCommand(IBusCommandsEnum.valueOf(v.getTag().toString()));
}
}
;
OnTouchListener touchAction=new OnTouchListener(){
@SuppressLint(""String_Node_Str"") @Override public boolean onTouch(View v,MotionEvent event){
String action=(event.getAction() == MotionEvent.ACTION_DOWN) ? ""String_Node_Str"" : ""String_Node_Str"";
sendIBusCommand(IBusCommandsEnum.valueOf(v.getTag().toString() + action));
return false;
}
}
;
btnVolUp.setOnClickListener(clickSingleAction);
btnVolDown.setOnClickListener(clickSingleAction);
btnRadioFM.setOnTouchListener(touchAction);
btnRadioAM.setOnTouchListener(touchAction);
btnPrev.setOnTouchListener(touchAction);
btnNext.setOnTouchListener(touchAction);
boolean geoAvailable=mSettings.getBoolean(""String_Node_Str"",false);
if (!geoAvailable) {
int layoutMargin=(int)(230 * getResources().getDisplayMetrics().density + 0.5f);
View geoLayout=v.findViewById(R.id.geoLayout);
View geoLocation=v.findViewById(R.id.geoLocation);
geoLayout.setVisibility(View.GONE);
geoLocation.setVisibility(View.GONE);
LinearLayout.LayoutParams tempLayoutParams=(LinearLayout.LayoutParams)v.findViewById(R.id.tempLayout).getLayoutParams();
tempLayoutParams.setMargins(layoutMargin,0,0,0);
LinearLayout.LayoutParams consumptionLayoutParams=(LinearLayout.LayoutParams)v.findViewById(R.id.consumptionLayout).getLayoutParams();
consumptionLayoutParams.setMargins(layoutMargin,0,0,0);
}
return v;
}",0.9978973407544836
35936,"public byte[] sendVolumeUp(){
  return new byte[]{mSteeringWheelAddress,0x04,mRadioAddress,0x32,0x31,0x3F};
}","public byte[] sendVolumeUp(){
  return new byte[]{mSteeringWheelAddress,0x04,mRadioAddress,0x32,0x11,0x1F};
}",0.981651376146789
35937,"public byte[] sendVolumeDown(){
  return new byte[]{mSteeringWheelAddress,0x04,mRadioAddress,0x32,0x30,0x3E};
}","public byte[] sendVolumeDown(){
  return new byte[]{mSteeringWheelAddress,0x04,mRadioAddress,0x32,0x10,0x1E};
}",0.981981981981982
35938,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setRetainInstance(true);
  getActivity().registerReceiver(mChargingReceiver,new IntentFilter(Intent.ACTION_BATTERY_CHANGED));
  Log.d(TAG,""String_Node_Str"");
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setRetainInstance(true);
  getActivity().registerReceiver(receiver,new IntentFilter(Intent.ACTION_BATTERY_CHANGED));
  Log.d(TAG,""String_Node_Str"");
}",0.9783037475345168
35939,"@Override public void onDestroy(){
  super.onDestroy();
  Log.d(TAG,""String_Node_Str"");
  mIBusService.removeCallback(mIBusUpdateListener);
  releaseWakelock();
  if (mIBusBound) {
    unbindServices();
  }
  getActivity().unregisterReceiver(mChargingReceiver);
}","@Override public void onDestroy(){
  super.onDestroy();
  Log.d(TAG,""String_Node_Str"");
  mIBusService.removeCallback(mIBusUpdateListener);
  releaseWakelock();
  if (mIBusBound) {
    unbindServices();
  }
  getActivity().unregisterReceiver(receiver);
}",0.9787234042553192
35940,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.main_activity);
  mDrawerList=(ListView)findViewById(R.id.left_drawer);
  String[] mSettingsItems=getResources().getStringArray(R.array.options_array);
  mDrawerLayout=(DrawerLayout)findViewById(R.id.drawer_layout);
  mDrawerToggle=new ActionBarDrawerToggle(this,mDrawerLayout,R.drawable.ic_drawer,R.string.drawer_open,R.string.drawer_close){
    public void onDrawerClosed(    View view){
      super.onDrawerClosed(view);
      invalidateOptionsMenu();
    }
    public void onDrawerOpened(    View drawerView){
      super.onDrawerOpened(drawerView);
      invalidateOptionsMenu();
    }
  }
;
  mDrawerLayout.post(new Runnable(){
    @Override public void run(){
      mDrawerToggle.syncState();
    }
  }
);
  mDrawerLayout.setDrawerListener(mDrawerToggle);
  getActionBar().setIcon(R.drawable.ic_drawer);
  getActionBar().setDisplayHomeAsUpEnabled(true);
  mDrawerList.setAdapter(new ArrayAdapter<String>(this,R.layout.drawer_item,mSettingsItems));
  mDrawerList.setOnItemClickListener(new DrawerItemClickListener());
  if (savedInstanceState == null) {
    FragmentTransaction fragmentTx=getFragmentManager().beginTransaction();
    fragmentTx.replace(R.id.main,mFragments[0]);
    getActionBar().setDisplayShowTitleEnabled(true);
    getActionBar().setTitle(mFragmentTitles[0]);
    fragmentTx.commit();
  }
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.main_activity);
  mDrawerList=(ListView)findViewById(R.id.left_drawer);
  String[] mSettingsItems=getResources().getStringArray(R.array.options_array);
  mDrawerLayout=(DrawerLayout)findViewById(R.id.drawer_layout);
  mDrawerToggle=new ActionBarDrawerToggle(this,mDrawerLayout,R.drawable.ic_drawer,R.string.drawer_open,R.string.drawer_close){
    public void onDrawerClosed(    View view){
      super.onDrawerClosed(view);
      invalidateOptionsMenu();
    }
    public void onDrawerOpened(    View drawerView){
      super.onDrawerOpened(drawerView);
      invalidateOptionsMenu();
    }
  }
;
  mDrawerLayout.post(new Runnable(){
    @Override public void run(){
      mDrawerToggle.syncState();
    }
  }
);
  mDrawerLayout.setDrawerListener(mDrawerToggle);
  getActionBar().setIcon(R.drawable.ic_drawer);
  getActionBar().setDisplayHomeAsUpEnabled(true);
  mDrawerList.setAdapter(new ArrayAdapter<String>(this,R.layout.drawer_item,mSettingsItems));
  mDrawerList.setOnItemClickListener(new DrawerItemClickListener());
  if (savedInstanceState == null) {
    getFragmentManager().addOnBackStackChangedListener(new OnBackStackChangedListener(){
      public void onBackStackChanged(){
        FragmentManager manager=getFragmentManager();
        if (manager != null) {
          int backStackSize=manager.getBackStackEntryCount();
          if (backStackSize != 0) {
            FragmentManager.BackStackEntry backEntry=getFragmentManager().getBackStackEntryAt(backStackSize - 1);
            getActionBar().setTitle(backEntry.getName());
          }
 else {
            finish();
          }
        }
      }
    }
);
    FragmentTransaction fragmentTx=getFragmentManager().beginTransaction();
    fragmentTx.replace(R.id.main,mFragments[0]);
    getActionBar().setDisplayShowTitleEnabled(true);
    fragmentTx.addToBackStack(mFragmentTitles[0]);
    fragmentTx.commit();
  }
}",0.8236316246741964
35941,"@Override public void onDrawerClosed(View drawerView){
  super.onDrawerClosed(drawerView);
  getActionBar().setDisplayShowTitleEnabled(true);
  getActionBar().setTitle(mFragmentTitles[position]);
  FragmentTransaction fragmentTx=getFragmentManager().beginTransaction();
  fragmentTx.replace(R.id.main,mFragments[position]);
  fragmentTx.addToBackStack(null);
  fragmentTx.commit();
}","@Override public void onDrawerClosed(View drawerView){
  super.onDrawerClosed(drawerView);
  getActionBar().setDisplayShowTitleEnabled(true);
  FragmentTransaction fragmentTx=getFragmentManager().beginTransaction();
  fragmentTx.replace(R.id.main,mFragments[position]);
  fragmentTx.addToBackStack(mFragmentTitles[position]);
  fragmentTx.commit();
}",0.8867667121418826
35942,"@Override public void onItemClick(AdapterView<?> parent,View view,final int position,long id){
  mDrawerLayout.setDrawerListener(new DrawerLayout.SimpleDrawerListener(){
    @Override public void onDrawerClosed(    View drawerView){
      super.onDrawerClosed(drawerView);
      getActionBar().setDisplayShowTitleEnabled(true);
      getActionBar().setTitle(mFragmentTitles[position]);
      FragmentTransaction fragmentTx=getFragmentManager().beginTransaction();
      fragmentTx.replace(R.id.main,mFragments[position]);
      fragmentTx.addToBackStack(null);
      fragmentTx.commit();
    }
  }
);
  mDrawerLayout.closeDrawer(mDrawerList);
}","@Override public void onItemClick(AdapterView<?> parent,View view,final int position,long id){
  mDrawerLayout.setDrawerListener(new DrawerLayout.SimpleDrawerListener(){
    @Override public void onDrawerClosed(    View drawerView){
      super.onDrawerClosed(drawerView);
      getActionBar().setDisplayShowTitleEnabled(true);
      FragmentTransaction fragmentTx=getFragmentManager().beginTransaction();
      fragmentTx.replace(R.id.main,mFragments[position]);
      fragmentTx.addToBackStack(mFragmentTitles[position]);
      fragmentTx.commit();
    }
  }
);
  mDrawerLayout.closeDrawer(mDrawerList);
}",0.7961630695443646
35943,"/** 
 * Send a new time setting to the IKE IBus message: 3B 06 80 40 01 <Hours> <Mins> <CRC>
 * @param args Two ints MUST be providedint hours, int minutes
 * @return Byte array of composed message to send to IBus
 */
public byte[] setTime(Object... args){
  int hours=(Integer)args[0];
  int minutes=(Integer)args[1];
  byte[] completedMessage=new byte[]{gfxDriver,0x06,IKESystem,OBCRequestSet,0x01,(byte)hours,(byte)minutes,0x00};
  completedMessage[6]=genMessageCRC(completedMessage);
  return completedMessage;
}","/** 
 * Send a new time setting to the IKE IBus message: 3B 06 80 40 01 <Hours> <Mins> <CRC>
 * @param args Two ints MUST be providedint hours, int minutes
 * @return Byte array of composed message to send to IBus
 */
public byte[] setTime(Object... args){
  int hours=(Integer)args[0];
  int minutes=(Integer)args[1];
  byte[] completedMessage=new byte[]{gfxDriver,0x06,IKESystem,OBCRequestSet,0x01,(byte)hours,(byte)minutes,0x00};
  completedMessage[completedMessage.length - 1]=genMessageCRC(completedMessage);
  return completedMessage;
}",0.9735349716446124
35944,"/** 
 * Send a new date setting to the IKE IBus message: 3B 07 80 40 02 <Day> <Month> <Year> <CRC>
 * @param args Three ints MUST be providedint day, int month, int year
 * @return Byte array of composed message to send to IBus
 */
public byte[] setDate(Object... args){
  int day=(Integer)args[0];
  int month=(Integer)args[1];
  int year=(Integer)args[2];
  byte[] completedMessage=new byte[]{gfxDriver,0x07,IKESystem,OBCRequestSet,0x02,(byte)day,(byte)month,(byte)year,0x00};
  completedMessage[7]=genMessageCRC(completedMessage);
  return completedMessage;
}","/** 
 * Send a new date setting to the IKE IBus message: 3B 07 80 40 02 <Day> <Month> <Year> <CRC>
 * @param args Three ints MUST be providedint day, int month, int year
 * @return Byte array of composed message to send to IBus
 */
public byte[] setDate(Object... args){
  int day=(Integer)args[0];
  int month=(Integer)args[1];
  int year=(Integer)args[2];
  byte[] completedMessage=new byte[]{gfxDriver,0x07,IKESystem,OBCRequestSet,0x02,(byte)day,(byte)month,(byte)year,0x00};
  completedMessage[completedMessage.length - 1]=genMessageCRC(completedMessage);
  return completedMessage;
}",0.9756521739130436
35945,"/** 
 * Sends ""next"" media key press.
 */
public void sendNextKey(){
  Log.d(TAG,""String_Node_Str"");
  sendKeyEvent(KeyEvent.KEYCODE_MEDIA_NEXT);
}","/** 
 * Sends ""next"" media key press.
 */
public void sendNextKey(){
  sendKeyEvent(KeyEvent.KEYCODE_MEDIA_NEXT);
}",0.8778625954198473
35946,"/** 
 * Send the ACTION_UP and ACTION_DOWN key events
 * @param keyCode The key we are pressing
 * @return true if both clicks were delivered, else false
 */
private boolean sendKeyEvent(int keyCode){
  boolean keyDown=mAudioController.sendMediaKeyEvent(new KeyEvent(KeyEvent.ACTION_DOWN,keyCode));
  boolean keyUp=mAudioController.sendMediaKeyEvent(new KeyEvent(KeyEvent.ACTION_UP,keyCode));
  return keyDown && keyUp;
}","/** 
 * Send the ACTION_UP and ACTION_DOWN key events
 * @param keyCode The key we are pressing
 * @return true if both clicks were delivered, else false
 */
private boolean sendKeyEvent(int keyCode){
  KeyEvent keyDown=new KeyEvent(KeyEvent.ACTION_DOWN,keyCode);
  KeyEvent keyUp=new KeyEvent(KeyEvent.ACTION_UP,keyCode);
  boolean keyDownRes=mAudioController.sendMediaKeyEvent(keyDown);
  boolean keyUpRes=mAudioController.sendMediaKeyEvent(keyUp);
  if (!keyDownRes && !keyUpRes) {
    Intent downIntent=new Intent(Intent.ACTION_MEDIA_BUTTON,null);
    downIntent.putExtra(Intent.EXTRA_KEY_EVENT,keyDown);
    getBaseContext().sendOrderedBroadcast(downIntent,null);
    Intent upIntent=new Intent(Intent.ACTION_MEDIA_BUTTON,null);
    upIntent.putExtra(Intent.EXTRA_KEY_EVENT,keyUp);
    getBaseContext().sendOrderedBroadcast(downIntent,null);
  }
  return keyDownRes && keyUpRes;
}",0.4793261868300153
35947,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  final View v=inflater.inflate(R.layout.dashboard,container,false);
  mSettings=PreferenceManager.getDefaultSharedPreferences(getActivity());
  String radioType=mSettings.getString(""String_Node_Str"",""String_Node_Str"");
  mRadioType=(radioType.equals(""String_Node_Str"")) ? RadioTypes.BM53 : RadioTypes.CD53;
  changeScreenState(true);
  radioLayout=(LinearLayout)v.findViewById(R.id.radioAudio);
  tabletLayout=(LinearLayout)v.findViewById(R.id.tabletAudio);
  mPlayerPrevBtn=(ImageButton)v.findViewById(R.id.playerPrevBtn);
  mPlayerControlBtn=(ImageButton)v.findViewById(R.id.playerPlayPauseBtn);
  mPlayerNextBtn=(ImageButton)v.findViewById(R.id.playerNextBtn);
  mPlayerTitleText=(TextView)v.findViewById(R.id.playerTitleField);
  mPlayerAlbumText=(TextView)v.findViewById(R.id.playerAlbumField);
  mPlayerArtistText=(TextView)v.findViewById(R.id.playerArtistField);
  mPlayerArtwork=(ImageView)v.findViewById(R.id.albumArt);
  mPlayerScrubBar=(SeekBar)v.findViewById(R.id.playerTrackBar);
  OnClickListener playerClickListener=new OnClickListener(){
    @Override public void onClick(    View v){
      if (mPlayerBound) {
switch (v.getId()) {
case R.id.playerPrevBtn:
          mPlayerService.sendPreviousKey();
        break;
case R.id.playerNextBtn:
      mPlayerService.sendNextKey();
    break;
case R.id.playerPlayPauseBtn:
  if (mIsPlaying) {
    mPlayerService.sendPauseKey();
  }
 else {
    mPlayerService.sendPlayKey();
  }
break;
}
}
}
}
;
mPlayerPrevBtn.setOnClickListener(playerClickListener);
mPlayerNextBtn.setOnClickListener(playerClickListener);
mPlayerControlBtn.setOnClickListener(playerClickListener);
mPlayerScrubBar.setOnSeekBarChangeListener(new OnSeekBarChangeListener(){
@Override public void onProgressChanged(SeekBar seekBar,int progress,boolean fromUser){
if (mPlayerBound && fromUser) {
mPlayerService.seekTo(mSongDuration * progress / seekBar.getMax());
}
}
@Override public void onStartTrackingTouch(SeekBar seekBar){
mHandler.removeCallbacks(mUpdateSeekBar);
}
@Override public void onStopTrackingTouch(SeekBar seekBar){
mHandler.post(mUpdateSeekBar);
}
}
);
ImageButton btnVolUp=(ImageButton)v.findViewById(R.id.btnVolUp);
ImageButton btnVolDown=(ImageButton)v.findViewById(R.id.btnVolDown);
Button btnRadioFM=(Button)v.findViewById(R.id.btnRadioFM);
Button btnRadioAM=(Button)v.findViewById(R.id.btnRadioAM);
mBtnMusicMode=(Switch)v.findViewById(R.id.btnMusicMode);
ImageButton btnPrev=(ImageButton)v.findViewById(R.id.btnPrev);
ImageButton btnNext=(ImageButton)v.findViewById(R.id.btnNext);
stationText=(TextView)v.findViewById(R.id.stationText);
radioRDSIndicatorField=(TextView)v.findViewById(R.id.radioRDSIndicator);
radioStereoIndicatorField=(TextView)v.findViewById(R.id.radioStereoIndicator);
radioProgramField=(TextView)v.findViewById(R.id.radioProgram);
radioBroadcastField=(TextView)v.findViewById(R.id.radioBroadcast);
speedField=(TextView)v.findViewById(R.id.speedField);
rpmField=(TextView)v.findViewById(R.id.rpmField);
rangeField=(TextView)v.findViewById(R.id.rangeField);
fuel1Field=(TextView)v.findViewById(R.id.consumption1);
fuel2Field=(TextView)v.findViewById(R.id.consumption2);
avgSpeedField=(TextView)v.findViewById(R.id.avgSpeed);
outTempField=(TextView)v.findViewById(R.id.outdoorTempField);
coolantTempField=(TextView)v.findViewById(R.id.coolantTempField);
geoCoordinatesField=(TextView)v.findViewById(R.id.geoCoordinatesField);
geoStreetField=(TextView)v.findViewById(R.id.geoStreetField);
geoLocaleField=(TextView)v.findViewById(R.id.geoLocaleField);
geoAltitudeField=(TextView)v.findViewById(R.id.geoAltitudeField);
dateField=(TextView)v.findViewById(R.id.dateField);
timeField=(TextView)v.findViewById(R.id.timeField);
if (mRadioType == RadioTypes.BM53) {
btnVolUp.setTag(IBusCommandsEnum.BMToRadioVolumeUp.name());
btnVolDown.setTag(IBusCommandsEnum.BMToRadioVolumeDown.name());
btnPrev.setTag(""String_Node_Str"");
btnNext.setTag(""String_Node_Str"");
}
 else {
btnVolUp.setTag(IBusCommandsEnum.SWToRadioVolumeUp.name());
btnVolDown.setTag(IBusCommandsEnum.SWToRadioVolumeDown.name());
btnPrev.setTag(""String_Node_Str"");
btnNext.setTag(""String_Node_Str"");
}
btnRadioFM.setTag(""String_Node_Str"");
btnRadioAM.setTag(""String_Node_Str"");
mBtnMusicMode.setOnCheckedChangeListener(new OnCheckedChangeListener(){
public void onCheckedChanged(CompoundButton buttonView,boolean isChecked){
Log.d(TAG,""String_Node_Str"");
if (isChecked) {
if (!(mCurrentRadioMode == RadioModes.AUX) && mRadioType == RadioTypes.BM53) {
changeRadioMode(RadioModes.AUX);
}
radioLayout.setVisibility(View.GONE);
tabletLayout.setVisibility(View.VISIBLE);
}
 else {
if (mIsPlaying) {
mPlayerService.sendPauseKey();
}
if ((mCurrentRadioMode == RadioModes.AUX || mCurrentRadioMode == RadioModes.CD) && mRadioType == RadioTypes.BM53) {
changeRadioMode(RadioModes.Radio);
}
radioLayout.setVisibility(View.VISIBLE);
tabletLayout.setVisibility(View.GONE);
}
}
}
);
OnLongClickListener valueResetter=new OnLongClickListener(){
@Override public boolean onLongClick(View v){
IBusCommandsEnum action=IBusCommandsEnum.valueOf(v.getTag().toString());
switch (action) {
case BMToIKEResetFuel1:
showToast(""String_Node_Str"");
break;
case BMToIKEResetFuel2:
showToast(""String_Node_Str"");
break;
case BMToIKEResetAvgSpeed:
showToast(""String_Node_Str"");
break;
default :
break;
}
sendIBusCommand(action);
return true;
}
}
;
fuel1Field.setTag(IBusCommandsEnum.BMToIKEResetFuel1.name());
fuel2Field.setTag(IBusCommandsEnum.BMToIKEResetFuel1.name());
avgSpeedField.setTag(IBusCommandsEnum.BMToIKEResetAvgSpeed.name());
fuel1Field.setOnLongClickListener(valueResetter);
fuel2Field.setOnLongClickListener(valueResetter);
avgSpeedField.setOnLongClickListener(valueResetter);
OnClickListener clickSingleAction=new OnClickListener(){
@Override public void onClick(View v){
sendIBusCommand(IBusCommandsEnum.valueOf(v.getTag().toString()));
}
}
;
OnTouchListener touchAction=new OnTouchListener(){
@SuppressLint(""String_Node_Str"") @Override public boolean onTouch(View v,MotionEvent event){
String action=(event.getAction() == MotionEvent.ACTION_DOWN) ? ""String_Node_Str"" : ""String_Node_Str"";
sendIBusCommand(IBusCommandsEnum.valueOf(v.getTag().toString() + action));
return false;
}
}
;
btnVolUp.setOnClickListener(clickSingleAction);
btnVolDown.setOnClickListener(clickSingleAction);
btnRadioFM.setOnTouchListener(touchAction);
btnRadioAM.setOnTouchListener(touchAction);
btnPrev.setOnTouchListener(touchAction);
btnNext.setOnTouchListener(touchAction);
boolean geoAvailable=mSettings.getBoolean(""String_Node_Str"",false);
if (!geoAvailable) {
View geoLayout=v.findViewById(R.id.geoLayout);
View geoLocation=v.findViewById(R.id.geoLocation);
geoLayout.setVisibility(View.GONE);
geoLocation.setVisibility(View.GONE);
}
bindServices();
return v;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  final View v=inflater.inflate(R.layout.dashboard,container,false);
  mSettings=PreferenceManager.getDefaultSharedPreferences(getActivity());
  String radioType=mSettings.getString(""String_Node_Str"",""String_Node_Str"");
  mRadioType=(radioType.equals(""String_Node_Str"")) ? RadioTypes.BM53 : RadioTypes.CD53;
  changeScreenState(true);
  radioLayout=(LinearLayout)v.findViewById(R.id.radioAudio);
  tabletLayout=(LinearLayout)v.findViewById(R.id.tabletAudio);
  mPlayerPrevBtn=(ImageButton)v.findViewById(R.id.playerPrevBtn);
  mPlayerControlBtn=(ImageButton)v.findViewById(R.id.playerPlayPauseBtn);
  mPlayerNextBtn=(ImageButton)v.findViewById(R.id.playerNextBtn);
  mPlayerTitleText=(TextView)v.findViewById(R.id.playerTitleField);
  mPlayerAlbumText=(TextView)v.findViewById(R.id.playerAlbumField);
  mPlayerArtistText=(TextView)v.findViewById(R.id.playerArtistField);
  mPlayerArtwork=(ImageView)v.findViewById(R.id.albumArt);
  mPlayerScrubBar=(SeekBar)v.findViewById(R.id.playerTrackBar);
  OnClickListener playerClickListener=new OnClickListener(){
    @Override public void onClick(    View v){
      if (mPlayerBound) {
switch (v.getId()) {
case R.id.playerPrevBtn:
          mPlayerService.sendPreviousKey();
        break;
case R.id.playerNextBtn:
      mPlayerService.sendNextKey();
    break;
case R.id.playerPlayPauseBtn:
  if (mIsPlaying) {
    mPlayerService.sendPauseKey();
  }
 else {
    mPlayerService.sendPlayKey();
  }
break;
}
}
}
}
;
mPlayerPrevBtn.setOnClickListener(playerClickListener);
mPlayerNextBtn.setOnClickListener(playerClickListener);
mPlayerControlBtn.setOnClickListener(playerClickListener);
mPlayerScrubBar.setOnSeekBarChangeListener(new OnSeekBarChangeListener(){
@Override public void onProgressChanged(SeekBar seekBar,int progress,boolean fromUser){
if (mPlayerBound && fromUser) {
mPlayerService.seekTo(mSongDuration * progress / seekBar.getMax());
}
}
@Override public void onStartTrackingTouch(SeekBar seekBar){
mHandler.removeCallbacks(mUpdateSeekBar);
}
@Override public void onStopTrackingTouch(SeekBar seekBar){
mHandler.post(mUpdateSeekBar);
}
}
);
ImageButton btnVolUp=(ImageButton)v.findViewById(R.id.btnVolUp);
ImageButton btnVolDown=(ImageButton)v.findViewById(R.id.btnVolDown);
Button btnRadioFM=(Button)v.findViewById(R.id.btnRadioFM);
Button btnRadioAM=(Button)v.findViewById(R.id.btnRadioAM);
mBtnMusicMode=(Switch)v.findViewById(R.id.btnMusicMode);
ImageButton btnPrev=(ImageButton)v.findViewById(R.id.btnPrev);
ImageButton btnNext=(ImageButton)v.findViewById(R.id.btnNext);
stationText=(TextView)v.findViewById(R.id.stationText);
radioRDSIndicatorField=(TextView)v.findViewById(R.id.radioRDSIndicator);
radioStereoIndicatorField=(TextView)v.findViewById(R.id.radioStereoIndicator);
radioProgramField=(TextView)v.findViewById(R.id.radioProgram);
radioBroadcastField=(TextView)v.findViewById(R.id.radioBroadcast);
speedField=(TextView)v.findViewById(R.id.speedField);
rpmField=(TextView)v.findViewById(R.id.rpmField);
rangeField=(TextView)v.findViewById(R.id.rangeField);
fuel1Field=(TextView)v.findViewById(R.id.consumption1);
fuel2Field=(TextView)v.findViewById(R.id.consumption2);
avgSpeedField=(TextView)v.findViewById(R.id.avgSpeed);
outTempField=(TextView)v.findViewById(R.id.outdoorTempField);
coolantTempField=(TextView)v.findViewById(R.id.coolantTempField);
geoCoordinatesField=(TextView)v.findViewById(R.id.geoCoordinatesField);
geoStreetField=(TextView)v.findViewById(R.id.geoStreetField);
geoLocaleField=(TextView)v.findViewById(R.id.geoLocaleField);
geoAltitudeField=(TextView)v.findViewById(R.id.geoAltitudeField);
dateField=(TextView)v.findViewById(R.id.dateField);
timeField=(TextView)v.findViewById(R.id.timeField);
if (mRadioType == RadioTypes.BM53) {
btnVolUp.setTag(IBusCommandsEnum.BMToRadioVolumeUp.name());
btnVolDown.setTag(IBusCommandsEnum.BMToRadioVolumeDown.name());
btnPrev.setTag(""String_Node_Str"");
btnNext.setTag(""String_Node_Str"");
}
 else {
btnVolUp.setTag(IBusCommandsEnum.SWToRadioVolumeUp.name());
btnVolDown.setTag(IBusCommandsEnum.SWToRadioVolumeDown.name());
btnPrev.setTag(""String_Node_Str"");
btnNext.setTag(""String_Node_Str"");
}
btnRadioFM.setTag(""String_Node_Str"");
btnRadioAM.setTag(""String_Node_Str"");
mBtnMusicMode.setOnCheckedChangeListener(new OnCheckedChangeListener(){
public void onCheckedChanged(CompoundButton buttonView,boolean isChecked){
Log.d(TAG,""String_Node_Str"");
if (isChecked) {
if (!(mCurrentRadioMode == RadioModes.AUX) && mRadioType == RadioTypes.BM53) {
changeRadioMode(RadioModes.AUX);
}
radioLayout.setVisibility(View.GONE);
tabletLayout.setVisibility(View.VISIBLE);
}
 else {
if (mIsPlaying) {
mPlayerService.sendPauseKey();
}
if ((mCurrentRadioMode == RadioModes.AUX || mCurrentRadioMode == RadioModes.CD) && mRadioType == RadioTypes.BM53) {
changeRadioMode(RadioModes.Radio);
}
radioLayout.setVisibility(View.VISIBLE);
tabletLayout.setVisibility(View.GONE);
}
}
}
);
OnLongClickListener valueResetter=new OnLongClickListener(){
@Override public boolean onLongClick(View v){
IBusCommandsEnum action=IBusCommandsEnum.valueOf(v.getTag().toString());
switch (action) {
case BMToIKEResetFuel1:
showToast(""String_Node_Str"");
break;
case BMToIKEResetFuel2:
showToast(""String_Node_Str"");
break;
case BMToIKEResetAvgSpeed:
showToast(""String_Node_Str"");
break;
default :
break;
}
sendIBusCommand(action);
return true;
}
}
;
fuel1Field.setTag(IBusCommandsEnum.BMToIKEResetFuel1.name());
fuel2Field.setTag(IBusCommandsEnum.BMToIKEResetFuel1.name());
avgSpeedField.setTag(IBusCommandsEnum.BMToIKEResetAvgSpeed.name());
fuel1Field.setOnLongClickListener(valueResetter);
fuel2Field.setOnLongClickListener(valueResetter);
avgSpeedField.setOnLongClickListener(valueResetter);
OnClickListener clickSingleAction=new OnClickListener(){
@Override public void onClick(View v){
sendIBusCommand(IBusCommandsEnum.valueOf(v.getTag().toString()));
}
}
;
OnTouchListener touchAction=new OnTouchListener(){
@SuppressLint(""String_Node_Str"") @Override public boolean onTouch(View v,MotionEvent event){
String action=(event.getAction() == MotionEvent.ACTION_DOWN) ? ""String_Node_Str"" : ""String_Node_Str"";
sendIBusCommand(IBusCommandsEnum.valueOf(v.getTag().toString() + action));
return false;
}
}
;
btnVolUp.setOnClickListener(clickSingleAction);
btnVolDown.setOnClickListener(clickSingleAction);
btnRadioFM.setOnTouchListener(touchAction);
btnRadioAM.setOnTouchListener(touchAction);
btnPrev.setOnTouchListener(touchAction);
btnNext.setOnTouchListener(touchAction);
boolean geoAvailable=mSettings.getBoolean(""String_Node_Str"",false);
if (!geoAvailable) {
View geoLayout=v.findViewById(R.id.geoLayout);
View geoLocation=v.findViewById(R.id.geoLocation);
geoLayout.setVisibility(View.GONE);
geoLocation.setVisibility(View.GONE);
}
return v;
}",0.9988322872573347
35948,"private void initiateHandlers(){
  IBusSysMap.put(DeviceAddressEnum.Radio.toByte(),new RadioSystemCommand());
  IBusSysMap.put(DeviceAddressEnum.InstrumentClusterElectronics.toByte(),new IKESystemCommand());
  IBusSysMap.put(DeviceAddressEnum.NavigationEurope.toByte(),new NavigationSystemCommand());
  IBusSysMap.put(DeviceAddressEnum.MultiFunctionSteeringWheel.toByte(),new SteeringWheelSystemCommand());
  IBusSysMap.put(DeviceAddressEnum.GraphicsNavigationDriver.toByte(),new BoardMonitorSystemCommand());
  for (  Object key : IBusSysMap.keySet())   IBusSysMap.get(key).registerCallbacks(mIBusCbListener);
  callbackRegistered=true;
}","private void initiateHandlers(){
  IBusSysMap.put(DeviceAddressEnum.Radio.toByte(),new RadioSystemCommand());
  IBusSysMap.put(DeviceAddressEnum.InstrumentClusterElectronics.toByte(),new IKESystemCommand());
  IBusSysMap.put(DeviceAddressEnum.NavigationEurope.toByte(),new NavigationSystemCommand());
  IBusSysMap.put(DeviceAddressEnum.MultiFunctionSteeringWheel.toByte(),new SteeringWheelSystemCommand());
  IBusSysMap.put(DeviceAddressEnum.OnBoardMonitor.toByte(),new BoardMonitorSystemCommand());
  for (  Object key : IBusSysMap.keySet())   IBusSysMap.get(key).registerCallbacks(mIBusCbListener);
  callbackRegistered=true;
}",0.9716088328075708
35949,"/** 
 * This is the thread on which all the IOIO activity happens. It will be run every time the application is resumed and aborted when it is paused. The method setup() will be called right after a connection with the IOIO has been established (which might happen several times!). Then, loop() will be called repetitively until the IOIO gets disconnected.
 * @see ioio.lib.util.android.IOIOService#createIOIOLooper()
 */
@Override protected IOIOLooper createIOIOLooper(){
  return new BaseIOIOLooper(){
    private boolean callbackRegistered=false;
    private Uart IBusConn;
    private InputStream busIn;
    private OutputStream busOut;
    private DigitalOutput statusLED;
    private DigitalOutput faultPin;
    private DigitalOutput chipSelectPin;
    private int IBusRXPinId=10;
    private int IBusTXPinId=13;
    private int chipSelectPinId=11;
    private int faultPinId=12;
    private int msgLength;
    private Calendar time;
    private long lastRead;
    private long lastSend;
    private ArrayList<Byte> readBuffer;
    private Map<Byte,IBusSystemCommand> IBusSysMap=new HashMap<Byte,IBusSystemCommand>();
    /** 
 * Called every time a connection with IOIO has been established. Setup the connection to the IBus and bring up the CS/Fault Pins on the MCP2004
 * @throws ConnectionLostException When IOIO connection is lost.
 * @see ioio.lib.util.AbstractIOIOActivity.IOIOThread#setup()
 */
    @Override protected void setup() throws ConnectionLostException, InterruptedException {
      Log.d(TAG,""String_Node_Str"");
      IBusConn=ioio_.openUart(IBusRXPinId,IBusTXPinId,9600,Uart.Parity.EVEN,Uart.StopBits.ONE);
      statusLED=ioio_.openDigitalOutput(IOIO.LED_PIN,true);
      chipSelectPin=ioio_.openDigitalOutput(chipSelectPinId,true);
      chipSelectPin.write(true);
      faultPin=ioio_.openDigitalOutput(faultPinId,true);
      faultPin.write(true);
      busIn=IBusConn.getInputStream();
      busOut=IBusConn.getOutputStream();
      readBuffer=new ArrayList<Byte>();
      msgLength=0;
      time=Calendar.getInstance();
      lastRead=time.getTimeInMillis();
      lastSend=time.getTimeInMillis();
    }
    /** 
 * Called repetitively while the IOIO is connected. Reads and writes to the IBus
 * @throws ConnectionLostException When IOIO connection is lost.
 * @see ioio.lib.util.AbstractIOIOActivity.IOIOThread#loop()
 */
    @Override public void loop() throws ConnectionLostException, InterruptedException {
      if ((Calendar.getInstance().getTimeInMillis() - lastRead) > 30) {
        readBuffer.clear();
      }
      if (!callbackRegistered && mIBusCbListener != null)       initiateHandlers();
      try {
        if (busIn.available() > 0) {
          statusLED.write(true);
          lastRead=Calendar.getInstance().getTimeInMillis();
          readBuffer.add((byte)busIn.read());
          if (readBuffer.size() == 1) {
            msgLength=256;
          }
 else           if (readBuffer.size() == 2) {
            msgLength=(int)readBuffer.get(1);
          }
          if (readBuffer.size() == msgLength + 2) {
            if (checksumMessage(readBuffer)) {
              String data=""String_Node_Str"";
              for (int i=0; i < readBuffer.size(); i++)               data=String.format(""String_Node_Str"",data,readBuffer.get(i));
              Log.d(TAG,String.format(""String_Node_Str"",DeviceLookup.get(readBuffer.get(0)),DeviceLookup.get(readBuffer.get(2)),data));
              handleMessage(readBuffer);
            }
            readBuffer.clear();
          }
          statusLED.write(false);
        }
 else         if (actionQueue.size() > 0) {
          statusLED.write(true);
          if ((Calendar.getInstance().getTimeInMillis() - lastSend) > 75) {
            Log.d(TAG,String.format(""String_Node_Str"",actionQueue.get(0).toString()));
            IBusCommandsEnum command=actionQueue.get(0).commandType;
            IBusSystemCommand clsInstance=IBusSysMap.get(command.getSystem().toByte());
            Object cmdArgs=actionQueue.get(0).commandArgs;
            byte[] outboundMsg=new byte[]{};
            try {
              Method requestedMethod=clsInstance.getClass().getMethod(command.getMethodName());
              if (cmdArgs == null)               outboundMsg=(byte[])requestedMethod.invoke(clsInstance);
 else               outboundMsg=(byte[])requestedMethod.invoke(clsInstance,cmdArgs);
            }
 catch (            IllegalAccessException e) {
              e.printStackTrace();
            }
catch (            IllegalArgumentException e) {
              e.printStackTrace();
            }
catch (            InvocationTargetException e) {
              e.printStackTrace();
            }
catch (            NoSuchMethodException e) {
              e.printStackTrace();
            }
            actionQueue.remove(0);
            String out=""String_Node_Str"";
            for (int i=0; i < outboundMsg.length; i++) {
              out=String.format(""String_Node_Str"",out,outboundMsg[i]);
              busOut.write(outboundMsg[i]);
            }
            Log.d(TAG,out);
            lastSend=Calendar.getInstance().getTimeInMillis();
            statusLED.write(false);
          }
        }
      }
 catch (      IOException e) {
        Log.e(TAG,String.format(""String_Node_Str"",e.getMessage()));
      }
      Thread.sleep(2);
    }
    private void initiateHandlers(){
      IBusSysMap.put(DeviceAddressEnum.Radio.toByte(),new RadioSystemCommand());
      IBusSysMap.put(DeviceAddressEnum.InstrumentClusterElectronics.toByte(),new IKESystemCommand());
      IBusSysMap.put(DeviceAddressEnum.NavigationEurope.toByte(),new NavigationSystemCommand());
      IBusSysMap.put(DeviceAddressEnum.MultiFunctionSteeringWheel.toByte(),new SteeringWheelSystemCommand());
      IBusSysMap.put(DeviceAddressEnum.GraphicsNavigationDriver.toByte(),new BoardMonitorSystemCommand());
      for (      Object key : IBusSysMap.keySet())       IBusSysMap.get(key).registerCallbacks(mIBusCbListener);
      callbackRegistered=true;
    }
    /** 
 * Verify that the IBus Message is legitimate  by XORing all bytes if correct, the product  should be 0x00
 * @param ArrayList<byte> msgBuffer	The buffer containing all bytes in the Message
 * @return boolean	 true if the message isn't corrupt, otherwise false
 */
    private boolean checksumMessage(    ArrayList<Byte> msgBuffer){
      byte cksum=0x00;
      for (      byte msg : msgBuffer) {
        cksum=(byte)(cksum ^ msg);
      }
      return (cksum == 0x00) ? true : false;
    }
    /** 
 * Send the inbound message to the correct Handler 
 * @param msg
 */
    private void handleMessage(    ArrayList<Byte> msg){
      try {
        IBusSysMap.get(msg.get(0)).mapReceived(msg);
      }
 catch (      NullPointerException npe) {
      }
    }
  }
;
}","/** 
 * This is the thread on which all the IOIO activity happens. It will be run every time the application is resumed and aborted when it is paused. The method setup() will be called right after a connection with the IOIO has been established (which might happen several times!). Then, loop() will be called repetitively until the IOIO gets disconnected.
 * @see ioio.lib.util.android.IOIOService#createIOIOLooper()
 */
@Override protected IOIOLooper createIOIOLooper(){
  return new BaseIOIOLooper(){
    private boolean callbackRegistered=false;
    private Uart IBusConn;
    private InputStream busIn;
    private OutputStream busOut;
    private DigitalOutput statusLED;
    private DigitalOutput faultPin;
    private DigitalOutput chipSelectPin;
    private int IBusRXPinId=10;
    private int IBusTXPinId=13;
    private int chipSelectPinId=11;
    private int faultPinId=12;
    private int msgLength;
    private Calendar time;
    private long lastRead;
    private long lastSend;
    private ArrayList<Byte> readBuffer;
    private Map<Byte,IBusSystemCommand> IBusSysMap=new HashMap<Byte,IBusSystemCommand>();
    /** 
 * Called every time a connection with IOIO has been established. Setup the connection to the IBus and bring up the CS/Fault Pins on the MCP2004
 * @throws ConnectionLostException When IOIO connection is lost.
 * @see ioio.lib.util.AbstractIOIOActivity.IOIOThread#setup()
 */
    @Override protected void setup() throws ConnectionLostException, InterruptedException {
      Log.d(TAG,""String_Node_Str"");
      IBusConn=ioio_.openUart(IBusRXPinId,IBusTXPinId,9600,Uart.Parity.EVEN,Uart.StopBits.ONE);
      statusLED=ioio_.openDigitalOutput(IOIO.LED_PIN,true);
      chipSelectPin=ioio_.openDigitalOutput(chipSelectPinId,true);
      chipSelectPin.write(true);
      faultPin=ioio_.openDigitalOutput(faultPinId,true);
      faultPin.write(true);
      busIn=IBusConn.getInputStream();
      busOut=IBusConn.getOutputStream();
      readBuffer=new ArrayList<Byte>();
      msgLength=0;
      time=Calendar.getInstance();
      lastRead=time.getTimeInMillis();
      lastSend=time.getTimeInMillis();
    }
    /** 
 * Called repetitively while the IOIO is connected. Reads and writes to the IBus
 * @throws ConnectionLostException When IOIO connection is lost.
 * @see ioio.lib.util.AbstractIOIOActivity.IOIOThread#loop()
 */
    @Override public void loop() throws ConnectionLostException, InterruptedException {
      if ((Calendar.getInstance().getTimeInMillis() - lastRead) > 30) {
        readBuffer.clear();
      }
      if (!callbackRegistered && mIBusCbListener != null)       initiateHandlers();
      try {
        if (busIn.available() > 0) {
          statusLED.write(true);
          lastRead=Calendar.getInstance().getTimeInMillis();
          readBuffer.add((byte)busIn.read());
          if (readBuffer.size() == 1) {
            msgLength=256;
          }
 else           if (readBuffer.size() == 2) {
            msgLength=(int)readBuffer.get(1);
          }
          if (readBuffer.size() == msgLength + 2) {
            if (checksumMessage(readBuffer)) {
              String data=""String_Node_Str"";
              for (int i=0; i < readBuffer.size(); i++)               data=String.format(""String_Node_Str"",data,readBuffer.get(i));
              Log.d(TAG,String.format(""String_Node_Str"",DeviceLookup.get(readBuffer.get(0)),DeviceLookup.get(readBuffer.get(2)),data));
              handleMessage(readBuffer);
            }
            readBuffer.clear();
          }
          statusLED.write(false);
        }
 else         if (actionQueue.size() > 0) {
          statusLED.write(true);
          if ((Calendar.getInstance().getTimeInMillis() - lastSend) > 75) {
            Log.d(TAG,String.format(""String_Node_Str"",actionQueue.get(0).toString()));
            IBusCommandsEnum command=actionQueue.get(0).commandType;
            IBusSystemCommand clsInstance=IBusSysMap.get(command.getSystem().toByte());
            Object cmdArgs=actionQueue.get(0).commandArgs;
            byte[] outboundMsg=new byte[]{};
            try {
              Method requestedMethod=clsInstance.getClass().getMethod(command.getMethodName());
              if (cmdArgs == null)               outboundMsg=(byte[])requestedMethod.invoke(clsInstance);
 else               outboundMsg=(byte[])requestedMethod.invoke(clsInstance,cmdArgs);
            }
 catch (            IllegalAccessException e) {
              e.printStackTrace();
            }
catch (            IllegalArgumentException e) {
              e.printStackTrace();
            }
catch (            InvocationTargetException e) {
              e.printStackTrace();
            }
catch (            NoSuchMethodException e) {
              e.printStackTrace();
            }
            actionQueue.remove(0);
            String out=""String_Node_Str"";
            for (int i=0; i < outboundMsg.length; i++) {
              out=String.format(""String_Node_Str"",out,outboundMsg[i]);
              busOut.write(outboundMsg[i]);
            }
            Log.d(TAG,out);
            lastSend=Calendar.getInstance().getTimeInMillis();
          }
          statusLED.write(false);
        }
      }
 catch (      IOException e) {
        Log.e(TAG,String.format(""String_Node_Str"",e.getMessage()));
      }
      Thread.sleep(2);
    }
    private void initiateHandlers(){
      IBusSysMap.put(DeviceAddressEnum.Radio.toByte(),new RadioSystemCommand());
      IBusSysMap.put(DeviceAddressEnum.InstrumentClusterElectronics.toByte(),new IKESystemCommand());
      IBusSysMap.put(DeviceAddressEnum.NavigationEurope.toByte(),new NavigationSystemCommand());
      IBusSysMap.put(DeviceAddressEnum.MultiFunctionSteeringWheel.toByte(),new SteeringWheelSystemCommand());
      IBusSysMap.put(DeviceAddressEnum.OnBoardMonitor.toByte(),new BoardMonitorSystemCommand());
      for (      Object key : IBusSysMap.keySet())       IBusSysMap.get(key).registerCallbacks(mIBusCbListener);
      callbackRegistered=true;
    }
    /** 
 * Verify that the IBus Message is legitimate  by XORing all bytes if correct, the product  should be 0x00
 * @param ArrayList<byte> msgBuffer	The buffer containing all bytes in the Message
 * @return boolean	 true if the message isn't corrupt, otherwise false
 */
    private boolean checksumMessage(    ArrayList<Byte> msgBuffer){
      byte cksum=0x00;
      for (      byte msg : msgBuffer) {
        cksum=(byte)(cksum ^ msg);
      }
      return (cksum == 0x00) ? true : false;
    }
    /** 
 * Send the inbound message to the correct Handler 
 * @param msg
 */
    private void handleMessage(    ArrayList<Byte> msg){
      try {
        IBusSysMap.get(msg.get(0)).mapReceived(msg);
      }
 catch (      NullPointerException npe) {
      }
    }
  }
;
}",0.9957214517556802
35950,"/** 
 * Called repetitively while the IOIO is connected. Reads and writes to the IBus
 * @throws ConnectionLostException When IOIO connection is lost.
 * @see ioio.lib.util.AbstractIOIOActivity.IOIOThread#loop()
 */
@Override public void loop() throws ConnectionLostException, InterruptedException {
  if ((Calendar.getInstance().getTimeInMillis() - lastRead) > 30) {
    readBuffer.clear();
  }
  if (!callbackRegistered && mIBusCbListener != null)   initiateHandlers();
  try {
    if (busIn.available() > 0) {
      statusLED.write(true);
      lastRead=Calendar.getInstance().getTimeInMillis();
      readBuffer.add((byte)busIn.read());
      if (readBuffer.size() == 1) {
        msgLength=256;
      }
 else       if (readBuffer.size() == 2) {
        msgLength=(int)readBuffer.get(1);
      }
      if (readBuffer.size() == msgLength + 2) {
        if (checksumMessage(readBuffer)) {
          String data=""String_Node_Str"";
          for (int i=0; i < readBuffer.size(); i++)           data=String.format(""String_Node_Str"",data,readBuffer.get(i));
          Log.d(TAG,String.format(""String_Node_Str"",DeviceLookup.get(readBuffer.get(0)),DeviceLookup.get(readBuffer.get(2)),data));
          handleMessage(readBuffer);
        }
        readBuffer.clear();
      }
      statusLED.write(false);
    }
 else     if (actionQueue.size() > 0) {
      statusLED.write(true);
      if ((Calendar.getInstance().getTimeInMillis() - lastSend) > 75) {
        Log.d(TAG,String.format(""String_Node_Str"",actionQueue.get(0).toString()));
        IBusCommandsEnum command=actionQueue.get(0).commandType;
        IBusSystemCommand clsInstance=IBusSysMap.get(command.getSystem().toByte());
        Object cmdArgs=actionQueue.get(0).commandArgs;
        byte[] outboundMsg=new byte[]{};
        try {
          Method requestedMethod=clsInstance.getClass().getMethod(command.getMethodName());
          if (cmdArgs == null)           outboundMsg=(byte[])requestedMethod.invoke(clsInstance);
 else           outboundMsg=(byte[])requestedMethod.invoke(clsInstance,cmdArgs);
        }
 catch (        IllegalAccessException e) {
          e.printStackTrace();
        }
catch (        IllegalArgumentException e) {
          e.printStackTrace();
        }
catch (        InvocationTargetException e) {
          e.printStackTrace();
        }
catch (        NoSuchMethodException e) {
          e.printStackTrace();
        }
        actionQueue.remove(0);
        String out=""String_Node_Str"";
        for (int i=0; i < outboundMsg.length; i++) {
          out=String.format(""String_Node_Str"",out,outboundMsg[i]);
          busOut.write(outboundMsg[i]);
        }
        Log.d(TAG,out);
        lastSend=Calendar.getInstance().getTimeInMillis();
        statusLED.write(false);
      }
    }
  }
 catch (  IOException e) {
    Log.e(TAG,String.format(""String_Node_Str"",e.getMessage()));
  }
  Thread.sleep(2);
}","/** 
 * Called repetitively while the IOIO is connected. Reads and writes to the IBus
 * @throws ConnectionLostException When IOIO connection is lost.
 * @see ioio.lib.util.AbstractIOIOActivity.IOIOThread#loop()
 */
@Override public void loop() throws ConnectionLostException, InterruptedException {
  if ((Calendar.getInstance().getTimeInMillis() - lastRead) > 30) {
    readBuffer.clear();
  }
  if (!callbackRegistered && mIBusCbListener != null)   initiateHandlers();
  try {
    if (busIn.available() > 0) {
      statusLED.write(true);
      lastRead=Calendar.getInstance().getTimeInMillis();
      readBuffer.add((byte)busIn.read());
      if (readBuffer.size() == 1) {
        msgLength=256;
      }
 else       if (readBuffer.size() == 2) {
        msgLength=(int)readBuffer.get(1);
      }
      if (readBuffer.size() == msgLength + 2) {
        if (checksumMessage(readBuffer)) {
          String data=""String_Node_Str"";
          for (int i=0; i < readBuffer.size(); i++)           data=String.format(""String_Node_Str"",data,readBuffer.get(i));
          Log.d(TAG,String.format(""String_Node_Str"",DeviceLookup.get(readBuffer.get(0)),DeviceLookup.get(readBuffer.get(2)),data));
          handleMessage(readBuffer);
        }
        readBuffer.clear();
      }
      statusLED.write(false);
    }
 else     if (actionQueue.size() > 0) {
      statusLED.write(true);
      if ((Calendar.getInstance().getTimeInMillis() - lastSend) > 75) {
        Log.d(TAG,String.format(""String_Node_Str"",actionQueue.get(0).toString()));
        IBusCommandsEnum command=actionQueue.get(0).commandType;
        IBusSystemCommand clsInstance=IBusSysMap.get(command.getSystem().toByte());
        Object cmdArgs=actionQueue.get(0).commandArgs;
        byte[] outboundMsg=new byte[]{};
        try {
          Method requestedMethod=clsInstance.getClass().getMethod(command.getMethodName());
          if (cmdArgs == null)           outboundMsg=(byte[])requestedMethod.invoke(clsInstance);
 else           outboundMsg=(byte[])requestedMethod.invoke(clsInstance,cmdArgs);
        }
 catch (        IllegalAccessException e) {
          e.printStackTrace();
        }
catch (        IllegalArgumentException e) {
          e.printStackTrace();
        }
catch (        InvocationTargetException e) {
          e.printStackTrace();
        }
catch (        NoSuchMethodException e) {
          e.printStackTrace();
        }
        actionQueue.remove(0);
        String out=""String_Node_Str"";
        for (int i=0; i < outboundMsg.length; i++) {
          out=String.format(""String_Node_Str"",out,outboundMsg[i]);
          busOut.write(outboundMsg[i]);
        }
        Log.d(TAG,out);
        lastSend=Calendar.getInstance().getTimeInMillis();
      }
      statusLED.write(false);
    }
  }
 catch (  IOException e) {
    Log.e(TAG,String.format(""String_Node_Str"",e.getMessage()));
  }
  Thread.sleep(2);
}",0.997584541062802
35951,"/** 
 * Acquire a screen wake lock to either turn the screen on or off
 * @param screenState if true, turn the screen on, else turn it off
 */
@SuppressWarnings(""String_Node_Str"") private void changeScreenState(boolean screenState){
  if (mPowerManager == null)   mPowerManager=(PowerManager)getActivity().getSystemService(Context.POWER_SERVICE);
  boolean modeChange=false;
  String state=(screenState == true) ? ""String_Node_Str"" : ""String_Node_Str"";
  Log.d(TAG,""String_Node_Str"" + state);
  Window window=getActivity().getWindow();
  WindowManager.LayoutParams layoutP=window.getAttributes();
  if (screenState && !mScreenOn) {
    modeChange=true;
    mScreenOn=true;
    layoutP.screenBrightness=-1;
    screenWakeLock=mPowerManager.newWakeLock(PowerManager.FULL_WAKE_LOCK | PowerManager.ACQUIRE_CAUSES_WAKEUP,""String_Node_Str"");
    window.addFlags(LayoutParams.FLAG_DISMISS_KEYGUARD);
  }
 else {
    if (mScreenOn) {
      modeChange=true;
      mScreenOn=false;
      layoutP.screenBrightness=0;
      screenWakeLock=mPowerManager.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK,""String_Node_Str"");
    }
  }
  if (modeChange) {
    releaseWakelock();
    window.setAttributes(layoutP);
    screenWakeLock.acquire();
  }
}","/** 
 * Acquire a screen wake lock to either turn the screen on or off
 * @param screenState if true, turn the screen on, else turn it off
 */
@SuppressWarnings(""String_Node_Str"") private void changeScreenState(boolean screenState){
  if (mPowerManager == null)   mPowerManager=(PowerManager)getActivity().getSystemService(Context.POWER_SERVICE);
  boolean modeChange=false;
  Window window=getActivity().getWindow();
  WindowManager.LayoutParams layoutP=window.getAttributes();
  if (screenState && !mScreenOn) {
    Log.d(TAG,""String_Node_Str"");
    modeChange=true;
    mScreenOn=true;
    layoutP.screenBrightness=-1;
    screenWakeLock=mPowerManager.newWakeLock(PowerManager.FULL_WAKE_LOCK | PowerManager.ACQUIRE_CAUSES_WAKEUP,""String_Node_Str"");
    window.addFlags(LayoutParams.FLAG_DISMISS_KEYGUARD);
  }
  if (!screenState && mScreenOn) {
    modeChange=true;
    mScreenOn=false;
    Log.d(TAG,""String_Node_Str"");
    layoutP.screenBrightness=0;
    screenWakeLock=mPowerManager.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK,""String_Node_Str"");
  }
  if (modeChange) {
    releaseWakelock();
    window.setAttributes(layoutP);
    screenWakeLock.acquire();
  }
}",0.8055091819699499
35952,"public void onCheckedChanged(CompoundButton buttonView,boolean isChecked){
  Log.d(TAG,""String_Node_Str"");
  if (isChecked) {
    radioLayout.setVisibility(View.GONE);
    tabletLayout.setVisibility(View.VISIBLE);
    if (!(mCurrentRadioMode == RadioModes.AUX))     changeRadioMode(RadioModes.AUX);
  }
 else {
    if (mIsPlaying)     mPlayerService.sendPauseKey();
    radioLayout.setVisibility(View.VISIBLE);
    tabletLayout.setVisibility(View.GONE);
    if (mCurrentRadioMode == RadioModes.AUX || mCurrentRadioMode == RadioModes.CD)     changeRadioMode(RadioModes.Radio);
  }
}","public void onCheckedChanged(CompoundButton buttonView,boolean isChecked){
  Log.d(TAG,""String_Node_Str"");
  if (isChecked) {
    radioLayout.setVisibility(View.GONE);
    tabletLayout.setVisibility(View.VISIBLE);
    if (!(mCurrentRadioMode == RadioModes.AUX)) {
      changeRadioMode(RadioModes.AUX);
    }
  }
 else {
    if (mIsPlaying)     mPlayerService.sendPauseKey();
    radioLayout.setVisibility(View.VISIBLE);
    tabletLayout.setVisibility(View.GONE);
    if (mCurrentRadioMode == RadioModes.AUX || mCurrentRadioMode == RadioModes.CD) {
      changeRadioMode(RadioModes.Radio);
    }
  }
}",0.9830795262267344
35953,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  final View v=inflater.inflate(R.layout.main_activity,container,false);
  radioLayout=(LinearLayout)v.findViewById(R.id.radioAudio);
  tabletLayout=(LinearLayout)v.findViewById(R.id.tabletAudio);
  changeScreenState(true);
  bindServices();
  mPlayerPrevBtn=(ImageButton)v.findViewById(R.id.playerPrevBtn);
  mPlayerControlBtn=(ImageButton)v.findViewById(R.id.playerPlayPauseBtn);
  mPlayerNextBtn=(ImageButton)v.findViewById(R.id.playerNextBtn);
  mPlayerTitleText=(TextView)v.findViewById(R.id.playerTitleField);
  mPlayerAlbumText=(TextView)v.findViewById(R.id.playerAlbumField);
  mPlayerArtistText=(TextView)v.findViewById(R.id.playerArtistField);
  mPlayerArtwork=(ImageView)v.findViewById(R.id.albumArt);
  mPlayerScrubBar=(SeekBar)v.findViewById(R.id.playerTrackBar);
  OnClickListener playerClickListener=new OnClickListener(){
    @Override public void onClick(    View v){
      if (mPlayerBound) {
switch (v.getId()) {
case R.id.playerPrevBtn:
          mPlayerService.sendPreviousKey();
        break;
case R.id.playerNextBtn:
      mPlayerService.sendNextKey();
    break;
case R.id.playerPlayPauseBtn:
  if (mIsPlaying) {
    mPlayerService.sendPauseKey();
  }
 else {
    mPlayerService.sendPlayKey();
  }
break;
}
}
}
}
;
mPlayerPrevBtn.setOnClickListener(playerClickListener);
mPlayerNextBtn.setOnClickListener(playerClickListener);
mPlayerControlBtn.setOnClickListener(playerClickListener);
mPlayerScrubBar.setOnSeekBarChangeListener(new OnSeekBarChangeListener(){
@Override public void onProgressChanged(SeekBar seekBar,int progress,boolean fromUser){
if (mPlayerBound && fromUser) {
mPlayerService.seekTo(mSongDuration * progress / seekBar.getMax());
}
}
@Override public void onStartTrackingTouch(SeekBar seekBar){
mPlayerHandler.removeCallbacks(mUpdateSeekBar);
}
@Override public void onStopTrackingTouch(SeekBar seekBar){
mPlayerHandler.post(mUpdateSeekBar);
}
}
);
ImageButton btnVolUp=(ImageButton)v.findViewById(R.id.btnVolUp);
ImageButton btnVolDown=(ImageButton)v.findViewById(R.id.btnVolDown);
Button btnRadioFM=(Button)v.findViewById(R.id.btnRadioFM);
Button btnRadioAM=(Button)v.findViewById(R.id.btnRadioAM);
mBtnMusicMode=(Switch)v.findViewById(R.id.btnMusicMode);
ImageButton btnPrev=(ImageButton)v.findViewById(R.id.btnPrev);
ImageButton btnNext=(ImageButton)v.findViewById(R.id.btnNext);
stationText=(TextView)v.findViewById(R.id.stationText);
radioRDSIndicatorField=(TextView)v.findViewById(R.id.radioRDSIndicator);
radioStereoIndicatorField=(TextView)v.findViewById(R.id.radioStereoIndicator);
radioProgramField=(TextView)v.findViewById(R.id.radioProgram);
radioBroadcastField=(TextView)v.findViewById(R.id.radioBroadcast);
speedField=(TextView)v.findViewById(R.id.speedField);
rpmField=(TextView)v.findViewById(R.id.rpmField);
rangeField=(TextView)v.findViewById(R.id.rangeField);
fuel1Field=(TextView)v.findViewById(R.id.consumption1);
fuel2Field=(TextView)v.findViewById(R.id.consumption2);
avgSpeedField=(TextView)v.findViewById(R.id.avgSpeed);
outTempField=(TextView)v.findViewById(R.id.outdoorTempField);
coolantTempField=(TextView)v.findViewById(R.id.coolantTempField);
geoCoordinatesField=(TextView)v.findViewById(R.id.geoCoordinatesField);
geoStreetField=(TextView)v.findViewById(R.id.geoStreetField);
geoLocaleField=(TextView)v.findViewById(R.id.geoLocaleField);
geoAltitudeField=(TextView)v.findViewById(R.id.geoAltitudeField);
dateField=(TextView)v.findViewById(R.id.dateField);
timeField=(TextView)v.findViewById(R.id.timeField);
btnVolUp.setTag(IBusCommandsEnum.BMToRadioVolumeUp.name());
btnVolDown.setTag(IBusCommandsEnum.BMToRadioVolumeDown.name());
btnRadioFM.setTag(""String_Node_Str"");
btnRadioAM.setTag(""String_Node_Str"");
btnPrev.setTag(""String_Node_Str"");
btnNext.setTag(""String_Node_Str"");
mBtnMusicMode.setOnCheckedChangeListener(new OnCheckedChangeListener(){
public void onCheckedChanged(CompoundButton buttonView,boolean isChecked){
Log.d(TAG,""String_Node_Str"");
if (isChecked) {
radioLayout.setVisibility(View.GONE);
tabletLayout.setVisibility(View.VISIBLE);
if (!(mCurrentRadioMode == RadioModes.AUX)) changeRadioMode(RadioModes.AUX);
}
 else {
if (mIsPlaying) mPlayerService.sendPauseKey();
radioLayout.setVisibility(View.VISIBLE);
tabletLayout.setVisibility(View.GONE);
if (mCurrentRadioMode == RadioModes.AUX || mCurrentRadioMode == RadioModes.CD) changeRadioMode(RadioModes.Radio);
}
}
}
);
OnLongClickListener valueResetter=new OnLongClickListener(){
@Override public boolean onLongClick(View v){
IBusCommandsEnum action=IBusCommandsEnum.valueOf(v.getTag().toString());
switch (action) {
case BMToIKEResetFuel1:
showToast(""String_Node_Str"");
break;
case BMToIKEResetFuel2:
showToast(""String_Node_Str"");
break;
case BMToIKEResetAvgSpeed:
showToast(""String_Node_Str"");
break;
default :
break;
}
sendIBusCommand(action);
return true;
}
}
;
fuel1Field.setTag(IBusCommandsEnum.BMToIKEResetFuel1.name());
fuel2Field.setTag(IBusCommandsEnum.BMToIKEResetFuel1.name());
avgSpeedField.setTag(IBusCommandsEnum.BMToIKEResetAvgSpeed.name());
fuel1Field.setOnLongClickListener(valueResetter);
fuel2Field.setOnLongClickListener(valueResetter);
avgSpeedField.setOnLongClickListener(valueResetter);
OnClickListener clickSingleAction=new OnClickListener(){
@Override public void onClick(View v){
sendIBusCommand(IBusCommandsEnum.valueOf(v.getTag().toString()));
}
}
;
OnTouchListener touchAction=new OnTouchListener(){
@Override public boolean onTouch(View v,MotionEvent event){
String action=(event.getAction() == MotionEvent.ACTION_DOWN) ? ""String_Node_Str"" : ""String_Node_Str"";
sendIBusCommand(IBusCommandsEnum.valueOf(v.getTag().toString() + action));
return false;
}
}
;
btnVolUp.setOnClickListener(clickSingleAction);
btnVolDown.setOnClickListener(clickSingleAction);
btnRadioFM.setOnTouchListener(touchAction);
btnRadioAM.setOnTouchListener(touchAction);
btnPrev.setOnTouchListener(touchAction);
btnNext.setOnTouchListener(touchAction);
return v;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  final View v=inflater.inflate(R.layout.main_activity,container,false);
  radioLayout=(LinearLayout)v.findViewById(R.id.radioAudio);
  tabletLayout=(LinearLayout)v.findViewById(R.id.tabletAudio);
  changeScreenState(true);
  bindServices();
  mPlayerPrevBtn=(ImageButton)v.findViewById(R.id.playerPrevBtn);
  mPlayerControlBtn=(ImageButton)v.findViewById(R.id.playerPlayPauseBtn);
  mPlayerNextBtn=(ImageButton)v.findViewById(R.id.playerNextBtn);
  mPlayerTitleText=(TextView)v.findViewById(R.id.playerTitleField);
  mPlayerAlbumText=(TextView)v.findViewById(R.id.playerAlbumField);
  mPlayerArtistText=(TextView)v.findViewById(R.id.playerArtistField);
  mPlayerArtwork=(ImageView)v.findViewById(R.id.albumArt);
  mPlayerScrubBar=(SeekBar)v.findViewById(R.id.playerTrackBar);
  OnClickListener playerClickListener=new OnClickListener(){
    @Override public void onClick(    View v){
      if (mPlayerBound) {
switch (v.getId()) {
case R.id.playerPrevBtn:
          mPlayerService.sendPreviousKey();
        break;
case R.id.playerNextBtn:
      mPlayerService.sendNextKey();
    break;
case R.id.playerPlayPauseBtn:
  if (mIsPlaying) {
    mPlayerService.sendPauseKey();
  }
 else {
    mPlayerService.sendPlayKey();
  }
break;
}
}
}
}
;
mPlayerPrevBtn.setOnClickListener(playerClickListener);
mPlayerNextBtn.setOnClickListener(playerClickListener);
mPlayerControlBtn.setOnClickListener(playerClickListener);
mPlayerScrubBar.setOnSeekBarChangeListener(new OnSeekBarChangeListener(){
@Override public void onProgressChanged(SeekBar seekBar,int progress,boolean fromUser){
if (mPlayerBound && fromUser) {
mPlayerService.seekTo(mSongDuration * progress / seekBar.getMax());
}
}
@Override public void onStartTrackingTouch(SeekBar seekBar){
mPlayerHandler.removeCallbacks(mUpdateSeekBar);
}
@Override public void onStopTrackingTouch(SeekBar seekBar){
mPlayerHandler.post(mUpdateSeekBar);
}
}
);
ImageButton btnVolUp=(ImageButton)v.findViewById(R.id.btnVolUp);
ImageButton btnVolDown=(ImageButton)v.findViewById(R.id.btnVolDown);
Button btnRadioFM=(Button)v.findViewById(R.id.btnRadioFM);
Button btnRadioAM=(Button)v.findViewById(R.id.btnRadioAM);
mBtnMusicMode=(Switch)v.findViewById(R.id.btnMusicMode);
ImageButton btnPrev=(ImageButton)v.findViewById(R.id.btnPrev);
ImageButton btnNext=(ImageButton)v.findViewById(R.id.btnNext);
stationText=(TextView)v.findViewById(R.id.stationText);
radioRDSIndicatorField=(TextView)v.findViewById(R.id.radioRDSIndicator);
radioStereoIndicatorField=(TextView)v.findViewById(R.id.radioStereoIndicator);
radioProgramField=(TextView)v.findViewById(R.id.radioProgram);
radioBroadcastField=(TextView)v.findViewById(R.id.radioBroadcast);
speedField=(TextView)v.findViewById(R.id.speedField);
rpmField=(TextView)v.findViewById(R.id.rpmField);
rangeField=(TextView)v.findViewById(R.id.rangeField);
fuel1Field=(TextView)v.findViewById(R.id.consumption1);
fuel2Field=(TextView)v.findViewById(R.id.consumption2);
avgSpeedField=(TextView)v.findViewById(R.id.avgSpeed);
outTempField=(TextView)v.findViewById(R.id.outdoorTempField);
coolantTempField=(TextView)v.findViewById(R.id.coolantTempField);
geoCoordinatesField=(TextView)v.findViewById(R.id.geoCoordinatesField);
geoStreetField=(TextView)v.findViewById(R.id.geoStreetField);
geoLocaleField=(TextView)v.findViewById(R.id.geoLocaleField);
geoAltitudeField=(TextView)v.findViewById(R.id.geoAltitudeField);
dateField=(TextView)v.findViewById(R.id.dateField);
timeField=(TextView)v.findViewById(R.id.timeField);
btnVolUp.setTag(IBusCommandsEnum.BMToRadioVolumeUp.name());
btnVolDown.setTag(IBusCommandsEnum.BMToRadioVolumeDown.name());
btnRadioFM.setTag(""String_Node_Str"");
btnRadioAM.setTag(""String_Node_Str"");
btnPrev.setTag(""String_Node_Str"");
btnNext.setTag(""String_Node_Str"");
mBtnMusicMode.setOnCheckedChangeListener(new OnCheckedChangeListener(){
public void onCheckedChanged(CompoundButton buttonView,boolean isChecked){
Log.d(TAG,""String_Node_Str"");
if (isChecked) {
radioLayout.setVisibility(View.GONE);
tabletLayout.setVisibility(View.VISIBLE);
if (!(mCurrentRadioMode == RadioModes.AUX)) {
changeRadioMode(RadioModes.AUX);
}
}
 else {
if (mIsPlaying) mPlayerService.sendPauseKey();
radioLayout.setVisibility(View.VISIBLE);
tabletLayout.setVisibility(View.GONE);
if (mCurrentRadioMode == RadioModes.AUX || mCurrentRadioMode == RadioModes.CD) {
changeRadioMode(RadioModes.Radio);
}
}
}
}
);
OnLongClickListener valueResetter=new OnLongClickListener(){
@Override public boolean onLongClick(View v){
IBusCommandsEnum action=IBusCommandsEnum.valueOf(v.getTag().toString());
switch (action) {
case BMToIKEResetFuel1:
showToast(""String_Node_Str"");
break;
case BMToIKEResetFuel2:
showToast(""String_Node_Str"");
break;
case BMToIKEResetAvgSpeed:
showToast(""String_Node_Str"");
break;
default :
break;
}
sendIBusCommand(action);
return true;
}
}
;
fuel1Field.setTag(IBusCommandsEnum.BMToIKEResetFuel1.name());
fuel2Field.setTag(IBusCommandsEnum.BMToIKEResetFuel1.name());
avgSpeedField.setTag(IBusCommandsEnum.BMToIKEResetAvgSpeed.name());
fuel1Field.setOnLongClickListener(valueResetter);
fuel2Field.setOnLongClickListener(valueResetter);
avgSpeedField.setOnLongClickListener(valueResetter);
OnClickListener clickSingleAction=new OnClickListener(){
@Override public void onClick(View v){
sendIBusCommand(IBusCommandsEnum.valueOf(v.getTag().toString()));
}
}
;
OnTouchListener touchAction=new OnTouchListener(){
@Override public boolean onTouch(View v,MotionEvent event){
String action=(event.getAction() == MotionEvent.ACTION_DOWN) ? ""String_Node_Str"" : ""String_Node_Str"";
sendIBusCommand(IBusCommandsEnum.valueOf(v.getTag().toString() + action));
return false;
}
}
;
btnVolUp.setOnClickListener(clickSingleAction);
btnVolDown.setOnClickListener(clickSingleAction);
btnRadioFM.setOnTouchListener(touchAction);
btnRadioAM.setOnTouchListener(touchAction);
btnPrev.setOnTouchListener(touchAction);
btnNext.setOnTouchListener(touchAction);
return v;
}",0.9993358791300015
35954,"/** 
 * This is the thread on which all the IOIO activity happens. It will be run every time the application is resumed and aborted when it is paused. The method setup() will be called right after a connection with the IOIO has been established (which might happen several times!). Then, loop() will be called repetitively until the IOIO gets disconnected.
 * @see ioio.lib.util.android.IOIOService#createIOIOLooper()
 */
@Override protected IOIOLooper createIOIOLooper(){
  return new BaseIOIOLooper(){
    private boolean callbackRegistered=false;
    private Uart IBusConn;
    private InputStream busIn;
    private OutputStream busOut;
    private DigitalOutput statusLED;
    private DigitalOutput faultPin;
    private DigitalOutput chipSelectPin;
    private int IBusRXPinId=10;
    private int IBusTXPinId=13;
    private int chipSelectPinId=11;
    private int faultPinId=12;
    private int msgLength;
    private Calendar time;
    private long lastRead;
    private long lastSend;
    private ArrayList<Byte> readBuffer;
    private Map<Byte,IBusSystemCommand> IBusSysMap=new HashMap<Byte,IBusSystemCommand>();
    private Map<IBusCommands,IBusMethodHolder> IBusCommandMap=new HashMap<IBusCommands,IBusMethodHolder>();
    /** 
 * Called every time a connection with IOIO has been established. Setup the connection to the IBus and bring up the CS/Fault Pins on the MCP2004
 * @throws ConnectionLostException When IOIO connection is lost.
 * @see ioio.lib.util.AbstractIOIOActivity.IOIOThread#setup()
 */
    @Override protected void setup() throws ConnectionLostException, InterruptedException {
      Log.d(TAG,""String_Node_Str"");
      IBusConn=ioio_.openUart(IBusRXPinId,IBusTXPinId,9600,Uart.Parity.EVEN,Uart.StopBits.ONE);
      statusLED=ioio_.openDigitalOutput(IOIO.LED_PIN,true);
      chipSelectPin=ioio_.openDigitalOutput(chipSelectPinId,true);
      chipSelectPin.write(true);
      faultPin=ioio_.openDigitalOutput(faultPinId,true);
      faultPin.write(true);
      busIn=IBusConn.getInputStream();
      busOut=IBusConn.getOutputStream();
      readBuffer=new ArrayList<Byte>();
      msgLength=0;
      time=Calendar.getInstance();
      lastRead=time.getTimeInMillis();
      lastSend=time.getTimeInMillis();
    }
    /** 
 * Called repetitively while the IOIO is connected. Reads and writes to the IBus
 * @throws ConnectionLostException When IOIO connection is lost.
 * @see ioio.lib.util.AbstractIOIOActivity.IOIOThread#loop()
 */
    @Override public void loop() throws ConnectionLostException, InterruptedException {
      statusLED.write(true);
      if ((Calendar.getInstance().getTimeInMillis() - lastRead) > 30) {
        readBuffer.clear();
      }
      if (!callbackRegistered && mIBusCbListener != null)       initiateHandlers();
      try {
        if (busIn.available() > 0) {
          lastRead=Calendar.getInstance().getTimeInMillis();
          readBuffer.add((byte)busIn.read());
          if (readBuffer.size() == 1) {
            msgLength=256;
          }
 else           if (readBuffer.size() == 2) {
            msgLength=(int)readBuffer.get(1);
          }
          if (readBuffer.size() == msgLength + 2) {
            if (checksumMessage(readBuffer)) {
              String data=""String_Node_Str"";
              for (int i=0; i < readBuffer.size(); i++)               data=String.format(""String_Node_Str"",data,readBuffer.get(i));
              Log.d(TAG,String.format(""String_Node_Str"",DeviceLookup.get(readBuffer.get(0)),DeviceLookup.get(readBuffer.get(2)),data));
              handleMessage(readBuffer);
            }
            readBuffer.clear();
          }
        }
 else         if (actionQueue.size() > 0) {
          if ((Calendar.getInstance().getTimeInMillis() - lastSend) > 75) {
            Log.d(TAG,String.format(""String_Node_Str"",actionQueue.get(0).toString()));
            IBusMethodHolder command=IBusCommandMap.get(actionQueue.get(0));
            byte[] outboundMsg=new byte[]{};
            try {
              outboundMsg=(byte[])command.methodReference.invoke(command.classInstance,command.args);
            }
 catch (            IllegalAccessException e) {
              e.printStackTrace();
            }
catch (            IllegalArgumentException e) {
              e.printStackTrace();
            }
catch (            InvocationTargetException e) {
              e.printStackTrace();
            }
            actionQueue.remove(0);
            String out=""String_Node_Str"";
            for (int i=0; i < outboundMsg.length; i++) {
              out=String.format(""String_Node_Str"",out,outboundMsg[i]);
              busOut.write(outboundMsg[i]);
            }
            Log.d(TAG,out);
            lastSend=Calendar.getInstance().getTimeInMillis();
          }
        }
      }
 catch (      IOException e) {
        Log.e(TAG,String.format(""String_Node_Str"",e.getMessage()));
      }
      statusLED.write(false);
      Thread.sleep(2);
    }
    /** 
 * This class is used to hold a class instance, method instance and any possible optional arguments. These instances will be placed into a map and called when a command execution request comes into the `actionQueue`
 */
class IBusMethodHolder {
      public IBusSystemCommand classInstance=null;
      public Method methodReference=null;
      public String args=null;
      IBusMethodHolder(      IBusSystemCommand cls,      Method mth){
        classInstance=cls;
        methodReference=mth;
      }
    }
    private void initiateHandlers(){
      IBusSysMap.put(DeviceAddress.Radio.toByte(),new RadioSystemCommand());
      IBusSysMap.put(DeviceAddress.InstrumentClusterElectronics.toByte(),new IKESystemCommand());
      IBusSysMap.put(DeviceAddress.NavigationEurope.toByte(),new NavigationSystemCommand());
      IBusSysMap.put(DeviceAddress.MultiFunctionSteeringWheel.toByte(),new SteeringWheelSystemCommand());
      IBusSysMap.put(DeviceAddress.GraphicsNavigationDriver.toByte(),new BoardMonitorSystemCommand());
      for (      Object key : IBusSysMap.keySet())       IBusSysMap.get(key).registerCallbacks(mIBusCbListener);
      IBusSystemCommand BM=IBusSysMap.get(DeviceAddress.GraphicsNavigationDriver.toByte());
      try {
        IBusCommandMap.put(IBusCommands.BMToIKEGetTime,new IBusMethodHolder(BM,BM.getClass().getMethod(""String_Node_Str"")));
        IBusCommandMap.put(IBusCommands.BMToIKEGetDate,new IBusMethodHolder(BM,BM.getClass().getMethod(""String_Node_Str"")));
        IBusCommandMap.put(IBusCommands.BMToIKEGetOutdoorTemp,new IBusMethodHolder(BM,BM.getClass().getMethod(""String_Node_Str"")));
        IBusCommandMap.put(IBusCommands.BMToIKEGetFuel1,new IBusMethodHolder(BM,BM.getClass().getMethod(""String_Node_Str"")));
        IBusCommandMap.put(IBusCommands.BMToIKEGetFuel2,new IBusMethodHolder(BM,BM.getClass().getMethod(""String_Node_Str"")));
        IBusCommandMap.put(IBusCommands.BMToIKEGetRange,new IBusMethodHolder(BM,BM.getClass().getMethod(""String_Node_Str"")));
        IBusCommandMap.put(IBusCommands.BMToIKEGetAvgSpeed,new IBusMethodHolder(BM,BM.getClass().getMethod(""String_Node_Str"")));
        IBusCommandMap.put(IBusCommands.BMToRadioGetStatus,new IBusMethodHolder(BM,BM.getClass().getMethod(""String_Node_Str"")));
        IBusCommandMap.put(IBusCommands.BMToIKEResetFuel1,new IBusMethodHolder(BM,BM.getClass().getMethod(""String_Node_Str"")));
        IBusCommandMap.put(IBusCommands.BMToIKEResetFuel2,new IBusMethodHolder(BM,BM.getClass().getMethod(""String_Node_Str"")));
        IBusCommandMap.put(IBusCommands.BMToIKEResetAvgSpeed,new IBusMethodHolder(BM,BM.getClass().getMethod(""String_Node_Str"")));
        IBusCommandMap.put(IBusCommands.BMToRadioModePress,new IBusMethodHolder(BM,BM.getClass().getMethod(""String_Node_Str"")));
        IBusCommandMap.put(IBusCommands.BMToRadioModeRelease,new IBusMethodHolder(BM,BM.getClass().getMethod(""String_Node_Str"")));
        IBusCommandMap.put(IBusCommands.BMToRadioVolumeUp,new IBusMethodHolder(BM,BM.getClass().getMethod(""String_Node_Str"")));
        IBusCommandMap.put(IBusCommands.BMToRadioVolumeDown,new IBusMethodHolder(BM,BM.getClass().getMethod(""String_Node_Str"")));
        IBusCommandMap.put(IBusCommands.BMToRadioTuneFwdPress,new IBusMethodHolder(BM,BM.getClass().getMethod(""String_Node_Str"")));
        IBusCommandMap.put(IBusCommands.BMToRadioTuneFwdRelease,new IBusMethodHolder(BM,BM.getClass().getMethod(""String_Node_Str"")));
        IBusCommandMap.put(IBusCommands.BMToRadioTuneRevPress,new IBusMethodHolder(BM,BM.getClass().getMethod(""String_Node_Str"")));
        IBusCommandMap.put(IBusCommands.BMToRadioTuneRevRelease,new IBusMethodHolder(BM,BM.getClass().getMethod(""String_Node_Str"")));
        IBusCommandMap.put(IBusCommands.BMToRadioFMPress,new IBusMethodHolder(BM,BM.getClass().getMethod(""String_Node_Str"")));
        IBusCommandMap.put(IBusCommands.BMToRadioFMRelease,new IBusMethodHolder(BM,BM.getClass().getMethod(""String_Node_Str"")));
        IBusCommandMap.put(IBusCommands.BMToRadioAMPress,new IBusMethodHolder(BM,BM.getClass().getMethod(""String_Node_Str"")));
        IBusCommandMap.put(IBusCommands.BMToRadioAMRelease,new IBusMethodHolder(BM,BM.getClass().getMethod(""String_Node_Str"")));
        IBusCommandMap.put(IBusCommands.BMToRadioInfoPress,new IBusMethodHolder(BM,BM.getClass().getMethod(""String_Node_Str"")));
        IBusCommandMap.put(IBusCommands.BMToRadioInfoRelease,new IBusMethodHolder(BM,BM.getClass().getMethod(""String_Node_Str"")));
      }
 catch (      NoSuchMethodException e) {
        Log.e(TAG,e.getMessage());
      }
      callbackRegistered=true;
    }
    /** 
 * Verify that the IBus Message is legitimate  by XORing all bytes if correct, the product  should be 0x00
 * @param ArrayList<byte> msgBuffer	The buffer containing all bytes in the Message
 * @return boolean	 true if the message isn't corrupt, otherwise false
 */
    private boolean checksumMessage(    ArrayList<Byte> msgBuffer){
      byte cksum=0x00;
      for (      byte msg : msgBuffer) {
        cksum=(byte)(cksum ^ msg);
      }
      return (cksum == 0x00) ? true : false;
    }
    /** 
 * Send the inbound message to the correct Handler 
 * @param msg
 */
    private void handleMessage(    ArrayList<Byte> msg){
      try {
        IBusSysMap.get(msg.get(0)).mapReceived(msg);
      }
 catch (      NullPointerException npe) {
      }
    }
  }
;
}","/** 
 * This is the thread on which all the IOIO activity happens. It will be run every time the application is resumed and aborted when it is paused. The method setup() will be called right after a connection with the IOIO has been established (which might happen several times!). Then, loop() will be called repetitively until the IOIO gets disconnected.
 * @see ioio.lib.util.android.IOIOService#createIOIOLooper()
 */
@Override protected IOIOLooper createIOIOLooper(){
  return new BaseIOIOLooper(){
    private boolean callbackRegistered=false;
    private Uart IBusConn;
    private InputStream busIn;
    private OutputStream busOut;
    private DigitalOutput statusLED;
    private DigitalOutput faultPin;
    private DigitalOutput chipSelectPin;
    private int IBusRXPinId=10;
    private int IBusTXPinId=13;
    private int chipSelectPinId=11;
    private int faultPinId=12;
    private int msgLength;
    private Calendar time;
    private long lastRead;
    private long lastSend;
    private ArrayList<Byte> readBuffer;
    private Map<Byte,IBusSystemCommand> IBusSysMap=new HashMap<Byte,IBusSystemCommand>();
    private Map<IBusCommands,IBusMethodHolder> IBusCommandMap=new HashMap<IBusCommands,IBusMethodHolder>();
    /** 
 * Called every time a connection with IOIO has been established. Setup the connection to the IBus and bring up the CS/Fault Pins on the MCP2004
 * @throws ConnectionLostException When IOIO connection is lost.
 * @see ioio.lib.util.AbstractIOIOActivity.IOIOThread#setup()
 */
    @Override protected void setup() throws ConnectionLostException, InterruptedException {
      Log.d(TAG,""String_Node_Str"");
      IBusConn=ioio_.openUart(IBusRXPinId,IBusTXPinId,9600,Uart.Parity.EVEN,Uart.StopBits.ONE);
      statusLED=ioio_.openDigitalOutput(IOIO.LED_PIN,true);
      chipSelectPin=ioio_.openDigitalOutput(chipSelectPinId,true);
      chipSelectPin.write(true);
      faultPin=ioio_.openDigitalOutput(faultPinId,true);
      faultPin.write(true);
      busIn=IBusConn.getInputStream();
      busOut=IBusConn.getOutputStream();
      readBuffer=new ArrayList<Byte>();
      msgLength=0;
      time=Calendar.getInstance();
      lastRead=time.getTimeInMillis();
      lastSend=time.getTimeInMillis();
    }
    /** 
 * Called repetitively while the IOIO is connected. Reads and writes to the IBus
 * @throws ConnectionLostException When IOIO connection is lost.
 * @see ioio.lib.util.AbstractIOIOActivity.IOIOThread#loop()
 */
    @Override public void loop() throws ConnectionLostException, InterruptedException {
      statusLED.write(true);
      if ((Calendar.getInstance().getTimeInMillis() - lastRead) > 30) {
        readBuffer.clear();
      }
      if (!callbackRegistered && mIBusCbListener != null)       initiateHandlers();
      try {
        if (busIn.available() > 0) {
          lastRead=Calendar.getInstance().getTimeInMillis();
          readBuffer.add((byte)busIn.read());
          if (readBuffer.size() == 1) {
            msgLength=256;
          }
 else           if (readBuffer.size() == 2) {
            msgLength=(int)readBuffer.get(1);
          }
          if (readBuffer.size() == msgLength + 2) {
            if (checksumMessage(readBuffer)) {
              String data=""String_Node_Str"";
              for (int i=0; i < readBuffer.size(); i++)               data=String.format(""String_Node_Str"",data,readBuffer.get(i));
              Log.d(TAG,String.format(""String_Node_Str"",DeviceLookup.get(readBuffer.get(0)),DeviceLookup.get(readBuffer.get(2)),data));
              handleMessage(readBuffer);
            }
            readBuffer.clear();
          }
        }
 else         if (actionQueue.size() > 0) {
          if ((Calendar.getInstance().getTimeInMillis() - lastSend) > 75) {
            Log.d(TAG,String.format(""String_Node_Str"",actionQueue.get(0).toString()));
            IBusMethodHolder command=IBusCommandMap.get(actionQueue.get(0));
            byte[] outboundMsg=new byte[]{};
            try {
              outboundMsg=(byte[])command.methodReference.invoke(command.classInstance);
            }
 catch (            IllegalAccessException e) {
              e.printStackTrace();
            }
catch (            IllegalArgumentException e) {
              e.printStackTrace();
            }
catch (            InvocationTargetException e) {
              e.printStackTrace();
            }
            actionQueue.remove(0);
            String out=""String_Node_Str"";
            for (int i=0; i < outboundMsg.length; i++) {
              out=String.format(""String_Node_Str"",out,outboundMsg[i]);
              busOut.write(outboundMsg[i]);
            }
            Log.d(TAG,out);
            lastSend=Calendar.getInstance().getTimeInMillis();
          }
        }
      }
 catch (      IOException e) {
        Log.e(TAG,String.format(""String_Node_Str"",e.getMessage()));
      }
      statusLED.write(false);
      Thread.sleep(2);
    }
    /** 
 * This class is used to hold a class instance, method instance and any possible optional arguments. These instances will be placed into a map and called when a command execution request comes into the `actionQueue`
 */
class IBusMethodHolder {
      public IBusSystemCommand classInstance=null;
      public Method methodReference=null;
      IBusMethodHolder(      IBusSystemCommand cls,      Method mth){
        classInstance=cls;
        methodReference=mth;
      }
    }
    private void initiateHandlers(){
      IBusSysMap.put(DeviceAddress.Radio.toByte(),new RadioSystemCommand());
      IBusSysMap.put(DeviceAddress.InstrumentClusterElectronics.toByte(),new IKESystemCommand());
      IBusSysMap.put(DeviceAddress.NavigationEurope.toByte(),new NavigationSystemCommand());
      IBusSysMap.put(DeviceAddress.MultiFunctionSteeringWheel.toByte(),new SteeringWheelSystemCommand());
      IBusSysMap.put(DeviceAddress.GraphicsNavigationDriver.toByte(),new BoardMonitorSystemCommand());
      for (      Object key : IBusSysMap.keySet())       IBusSysMap.get(key).registerCallbacks(mIBusCbListener);
      IBusSystemCommand BM=IBusSysMap.get(DeviceAddress.GraphicsNavigationDriver.toByte());
      try {
        IBusCommandMap.put(IBusCommands.BMToIKEGetTime,new IBusMethodHolder(BM,BM.getClass().getMethod(""String_Node_Str"")));
        IBusCommandMap.put(IBusCommands.BMToIKEGetDate,new IBusMethodHolder(BM,BM.getClass().getMethod(""String_Node_Str"")));
        IBusCommandMap.put(IBusCommands.BMToIKEGetOutdoorTemp,new IBusMethodHolder(BM,BM.getClass().getMethod(""String_Node_Str"")));
        IBusCommandMap.put(IBusCommands.BMToIKEGetFuel1,new IBusMethodHolder(BM,BM.getClass().getMethod(""String_Node_Str"")));
        IBusCommandMap.put(IBusCommands.BMToIKEGetFuel2,new IBusMethodHolder(BM,BM.getClass().getMethod(""String_Node_Str"")));
        IBusCommandMap.put(IBusCommands.BMToIKEGetRange,new IBusMethodHolder(BM,BM.getClass().getMethod(""String_Node_Str"")));
        IBusCommandMap.put(IBusCommands.BMToIKEGetAvgSpeed,new IBusMethodHolder(BM,BM.getClass().getMethod(""String_Node_Str"")));
        IBusCommandMap.put(IBusCommands.BMToRadioGetStatus,new IBusMethodHolder(BM,BM.getClass().getMethod(""String_Node_Str"")));
        IBusCommandMap.put(IBusCommands.BMToIKEResetFuel1,new IBusMethodHolder(BM,BM.getClass().getMethod(""String_Node_Str"")));
        IBusCommandMap.put(IBusCommands.BMToIKEResetFuel2,new IBusMethodHolder(BM,BM.getClass().getMethod(""String_Node_Str"")));
        IBusCommandMap.put(IBusCommands.BMToIKEResetAvgSpeed,new IBusMethodHolder(BM,BM.getClass().getMethod(""String_Node_Str"")));
        IBusCommandMap.put(IBusCommands.BMToRadioModePress,new IBusMethodHolder(BM,BM.getClass().getMethod(""String_Node_Str"")));
        IBusCommandMap.put(IBusCommands.BMToRadioModeRelease,new IBusMethodHolder(BM,BM.getClass().getMethod(""String_Node_Str"")));
        IBusCommandMap.put(IBusCommands.BMToRadioVolumeUp,new IBusMethodHolder(BM,BM.getClass().getMethod(""String_Node_Str"")));
        IBusCommandMap.put(IBusCommands.BMToRadioVolumeDown,new IBusMethodHolder(BM,BM.getClass().getMethod(""String_Node_Str"")));
        IBusCommandMap.put(IBusCommands.BMToRadioTuneFwdPress,new IBusMethodHolder(BM,BM.getClass().getMethod(""String_Node_Str"")));
        IBusCommandMap.put(IBusCommands.BMToRadioTuneFwdRelease,new IBusMethodHolder(BM,BM.getClass().getMethod(""String_Node_Str"")));
        IBusCommandMap.put(IBusCommands.BMToRadioTuneRevPress,new IBusMethodHolder(BM,BM.getClass().getMethod(""String_Node_Str"")));
        IBusCommandMap.put(IBusCommands.BMToRadioTuneRevRelease,new IBusMethodHolder(BM,BM.getClass().getMethod(""String_Node_Str"")));
        IBusCommandMap.put(IBusCommands.BMToRadioFMPress,new IBusMethodHolder(BM,BM.getClass().getMethod(""String_Node_Str"")));
        IBusCommandMap.put(IBusCommands.BMToRadioFMRelease,new IBusMethodHolder(BM,BM.getClass().getMethod(""String_Node_Str"")));
        IBusCommandMap.put(IBusCommands.BMToRadioAMPress,new IBusMethodHolder(BM,BM.getClass().getMethod(""String_Node_Str"")));
        IBusCommandMap.put(IBusCommands.BMToRadioAMRelease,new IBusMethodHolder(BM,BM.getClass().getMethod(""String_Node_Str"")));
        IBusCommandMap.put(IBusCommands.BMToRadioInfoPress,new IBusMethodHolder(BM,BM.getClass().getMethod(""String_Node_Str"")));
        IBusCommandMap.put(IBusCommands.BMToRadioInfoRelease,new IBusMethodHolder(BM,BM.getClass().getMethod(""String_Node_Str"")));
      }
 catch (      NoSuchMethodException e) {
        Log.e(TAG,e.getMessage());
      }
      callbackRegistered=true;
    }
    /** 
 * Verify that the IBus Message is legitimate  by XORing all bytes if correct, the product  should be 0x00
 * @param ArrayList<byte> msgBuffer	The buffer containing all bytes in the Message
 * @return boolean	 true if the message isn't corrupt, otherwise false
 */
    private boolean checksumMessage(    ArrayList<Byte> msgBuffer){
      byte cksum=0x00;
      for (      byte msg : msgBuffer) {
        cksum=(byte)(cksum ^ msg);
      }
      return (cksum == 0x00) ? true : false;
    }
    /** 
 * Send the inbound message to the correct Handler 
 * @param msg
 */
    private void handleMessage(    ArrayList<Byte> msg){
      try {
        IBusSysMap.get(msg.get(0)).mapReceived(msg);
      }
 catch (      NullPointerException npe) {
      }
    }
  }
;
}",0.9978630403108304
35955,"/** 
 * Called repetitively while the IOIO is connected. Reads and writes to the IBus
 * @throws ConnectionLostException When IOIO connection is lost.
 * @see ioio.lib.util.AbstractIOIOActivity.IOIOThread#loop()
 */
@Override public void loop() throws ConnectionLostException, InterruptedException {
  statusLED.write(true);
  if ((Calendar.getInstance().getTimeInMillis() - lastRead) > 30) {
    readBuffer.clear();
  }
  if (!callbackRegistered && mIBusCbListener != null)   initiateHandlers();
  try {
    if (busIn.available() > 0) {
      lastRead=Calendar.getInstance().getTimeInMillis();
      readBuffer.add((byte)busIn.read());
      if (readBuffer.size() == 1) {
        msgLength=256;
      }
 else       if (readBuffer.size() == 2) {
        msgLength=(int)readBuffer.get(1);
      }
      if (readBuffer.size() == msgLength + 2) {
        if (checksumMessage(readBuffer)) {
          String data=""String_Node_Str"";
          for (int i=0; i < readBuffer.size(); i++)           data=String.format(""String_Node_Str"",data,readBuffer.get(i));
          Log.d(TAG,String.format(""String_Node_Str"",DeviceLookup.get(readBuffer.get(0)),DeviceLookup.get(readBuffer.get(2)),data));
          handleMessage(readBuffer);
        }
        readBuffer.clear();
      }
    }
 else     if (actionQueue.size() > 0) {
      if ((Calendar.getInstance().getTimeInMillis() - lastSend) > 75) {
        Log.d(TAG,String.format(""String_Node_Str"",actionQueue.get(0).toString()));
        IBusMethodHolder command=IBusCommandMap.get(actionQueue.get(0));
        byte[] outboundMsg=new byte[]{};
        try {
          outboundMsg=(byte[])command.methodReference.invoke(command.classInstance,command.args);
        }
 catch (        IllegalAccessException e) {
          e.printStackTrace();
        }
catch (        IllegalArgumentException e) {
          e.printStackTrace();
        }
catch (        InvocationTargetException e) {
          e.printStackTrace();
        }
        actionQueue.remove(0);
        String out=""String_Node_Str"";
        for (int i=0; i < outboundMsg.length; i++) {
          out=String.format(""String_Node_Str"",out,outboundMsg[i]);
          busOut.write(outboundMsg[i]);
        }
        Log.d(TAG,out);
        lastSend=Calendar.getInstance().getTimeInMillis();
      }
    }
  }
 catch (  IOException e) {
    Log.e(TAG,String.format(""String_Node_Str"",e.getMessage()));
  }
  statusLED.write(false);
  Thread.sleep(2);
}","/** 
 * Called repetitively while the IOIO is connected. Reads and writes to the IBus
 * @throws ConnectionLostException When IOIO connection is lost.
 * @see ioio.lib.util.AbstractIOIOActivity.IOIOThread#loop()
 */
@Override public void loop() throws ConnectionLostException, InterruptedException {
  statusLED.write(true);
  if ((Calendar.getInstance().getTimeInMillis() - lastRead) > 30) {
    readBuffer.clear();
  }
  if (!callbackRegistered && mIBusCbListener != null)   initiateHandlers();
  try {
    if (busIn.available() > 0) {
      lastRead=Calendar.getInstance().getTimeInMillis();
      readBuffer.add((byte)busIn.read());
      if (readBuffer.size() == 1) {
        msgLength=256;
      }
 else       if (readBuffer.size() == 2) {
        msgLength=(int)readBuffer.get(1);
      }
      if (readBuffer.size() == msgLength + 2) {
        if (checksumMessage(readBuffer)) {
          String data=""String_Node_Str"";
          for (int i=0; i < readBuffer.size(); i++)           data=String.format(""String_Node_Str"",data,readBuffer.get(i));
          Log.d(TAG,String.format(""String_Node_Str"",DeviceLookup.get(readBuffer.get(0)),DeviceLookup.get(readBuffer.get(2)),data));
          handleMessage(readBuffer);
        }
        readBuffer.clear();
      }
    }
 else     if (actionQueue.size() > 0) {
      if ((Calendar.getInstance().getTimeInMillis() - lastSend) > 75) {
        Log.d(TAG,String.format(""String_Node_Str"",actionQueue.get(0).toString()));
        IBusMethodHolder command=IBusCommandMap.get(actionQueue.get(0));
        byte[] outboundMsg=new byte[]{};
        try {
          outboundMsg=(byte[])command.methodReference.invoke(command.classInstance);
        }
 catch (        IllegalAccessException e) {
          e.printStackTrace();
        }
catch (        IllegalArgumentException e) {
          e.printStackTrace();
        }
catch (        InvocationTargetException e) {
          e.printStackTrace();
        }
        actionQueue.remove(0);
        String out=""String_Node_Str"";
        for (int i=0; i < outboundMsg.length; i++) {
          out=String.format(""String_Node_Str"",out,outboundMsg[i]);
          busOut.write(outboundMsg[i]);
        }
        Log.d(TAG,out);
        lastSend=Calendar.getInstance().getTimeInMillis();
      }
    }
  }
 catch (  IOException e) {
    Log.e(TAG,String.format(""String_Node_Str"",e.getMessage()));
  }
  statusLED.write(false);
  Thread.sleep(2);
}",0.9973322388672275
35956,"@Override public void onDestroy(){
  super.onDestroy();
  Log.d(TAG,""String_Node_Str"");
  unbindServices(true);
}","@Override public void onDestroy(){
  super.onDestroy();
  Log.d(TAG,""String_Node_Str"");
  unbindServices();
}",0.981981981981982
35957,"private void unbindServices(boolean doServiceStop){
  Context applicationContext=getActivity();
  if (mIBusBound) {
    try {
      Log.d(TAG,""String_Node_Str"");
      mIBusService.disable();
      applicationContext.unbindService(mIBusConnection);
      if (doServiceStop) {
        applicationContext.stopService(new Intent(applicationContext,IBusMessageService.class));
      }
      mIBusBound=false;
    }
 catch (    Exception ex) {
      Log.e(TAG,String.format(""String_Node_Str"",ex.getMessage()));
    }
  }
  if (mPlayerBound) {
    mPlayerService.disableController();
    try {
      Log.d(TAG,""String_Node_Str"");
      applicationContext.unbindService(mPlayerConnection);
      mPlayerBound=false;
    }
 catch (    Exception ex) {
      Log.e(TAG,""String_Node_Str"");
    }
  }
}","private void unbindServices(){
  Context applicationContext=getActivity();
  if (mIBusBound) {
    try {
      Log.d(TAG,""String_Node_Str"");
      mIBusService.disable();
      applicationContext.unbindService(mIBusConnection);
      applicationContext.stopService(new Intent(applicationContext,IBusMessageService.class));
      mIBusBound=false;
    }
 catch (    Exception ex) {
      Log.e(TAG,String.format(""String_Node_Str"",ex.getMessage()));
    }
  }
  if (mPlayerBound) {
    mPlayerService.disableController();
    try {
      Log.d(TAG,""String_Node_Str"");
      applicationContext.unbindService(mPlayerConnection);
      mPlayerBound=false;
    }
 catch (    Exception ex) {
      Log.e(TAG,""String_Node_Str"");
    }
  }
}",0.961892247043364
35958,"@Override public void onPause(){
  super.onPause();
  Log.d(TAG,""String_Node_Str"");
  unbindServices(false);
}","@Override public void onPause(){
  super.onPause();
  Log.d(TAG,""String_Node_Str"");
  unbindServices();
}",0.9767441860465116
35959,"@Override public void onResume(){
  super.onResume();
  Log.d(TAG,""String_Node_Str"");
  bindServices(false);
}","@Override public void onResume(){
  super.onResume();
  Log.d(TAG,""String_Node_Str"");
  bindServices();
}",0.9767441860465116
35960,"private void bindServices(boolean doServiceStart){
  Context applicationContext=getActivity();
  Intent IBusIntent=new Intent(applicationContext,IBusMessageService.class);
  try {
    Log.d(TAG,""String_Node_Str"");
    applicationContext.bindService(IBusIntent,mIBusConnection,Context.BIND_AUTO_CREATE);
    if (doServiceStart) {
      applicationContext.startService(IBusIntent);
    }
  }
 catch (  Exception ex) {
    Log.e(TAG,""String_Node_Str"");
  }
  Intent playerIntent=new Intent(applicationContext,MusicControllerService.class);
  try {
    Log.d(TAG,""String_Node_Str"");
    applicationContext.bindService(playerIntent,mPlayerConnection,Context.BIND_AUTO_CREATE);
  }
 catch (  Exception ex) {
    Log.e(TAG,""String_Node_Str"");
  }
}","private void bindServices(){
  Context applicationContext=getActivity();
  Intent IBusIntent=new Intent(applicationContext,IBusMessageService.class);
  try {
    Log.d(TAG,""String_Node_Str"");
    applicationContext.bindService(IBusIntent,mIBusConnection,Context.BIND_AUTO_CREATE);
    applicationContext.startService(IBusIntent);
  }
 catch (  Exception ex) {
    Log.e(TAG,""String_Node_Str"");
  }
  Intent playerIntent=new Intent(applicationContext,MusicControllerService.class);
  try {
    Log.d(TAG,""String_Node_Str"");
    applicationContext.bindService(playerIntent,mPlayerConnection,Context.BIND_AUTO_CREATE);
  }
 catch (  Exception ex) {
    Log.e(TAG,""String_Node_Str"");
  }
}",0.9607293127629734
35961,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  final View v=inflater.inflate(R.layout.main_activity,container,false);
  radioLayout=(LinearLayout)v.findViewById(R.id.radioAudio);
  tabletLayout=(LinearLayout)v.findViewById(R.id.tabletAudio);
  bindServices(true);
  getActivity().getWindow().addFlags(LayoutParams.FLAG_KEEP_SCREEN_ON);
  mPlayerPrevBtn=(ImageButton)v.findViewById(R.id.playerPrevBtn);
  mPlayerControlBtn=(ImageButton)v.findViewById(R.id.playerPlayPauseBtn);
  mPlayerNextBtn=(ImageButton)v.findViewById(R.id.playerNextBtn);
  mPlayerTitleText=(TextView)v.findViewById(R.id.playerTitleField);
  mPlayerAlbumText=(TextView)v.findViewById(R.id.playerAlbumField);
  mPlayerArtistText=(TextView)v.findViewById(R.id.playerArtistField);
  mPlayerArtwork=(ImageView)v.findViewById(R.id.albumArt);
  mPlayerScrubBar=(SeekBar)v.findViewById(R.id.playerTrackBar);
  OnClickListener playerClickListener=new OnClickListener(){
    @Override public void onClick(    View v){
      if (mPlayerBound) {
switch (v.getId()) {
case R.id.playerPrevBtn:
          mPlayerService.sendPreviousKey();
        break;
case R.id.playerNextBtn:
      mPlayerService.sendNextKey();
    break;
case R.id.playerPlayPauseBtn:
  if (mIsPlaying) {
    mPlayerService.sendPauseKey();
  }
 else {
    mPlayerService.sendPlayKey();
  }
break;
}
}
}
}
;
mPlayerPrevBtn.setOnClickListener(playerClickListener);
mPlayerNextBtn.setOnClickListener(playerClickListener);
mPlayerControlBtn.setOnClickListener(playerClickListener);
mPlayerScrubBar.setOnSeekBarChangeListener(new OnSeekBarChangeListener(){
@Override public void onProgressChanged(SeekBar seekBar,int progress,boolean fromUser){
if (mPlayerBound && fromUser) {
mPlayerService.seekTo(mSongDuration * progress / seekBar.getMax());
}
}
@Override public void onStartTrackingTouch(SeekBar seekBar){
mPlayerHandler.removeCallbacks(mUpdateSeekBar);
}
@Override public void onStopTrackingTouch(SeekBar seekBar){
mPlayerHandler.post(mUpdateSeekBar);
}
}
);
ImageButton btnVolUp=(ImageButton)v.findViewById(R.id.btnVolUp);
ImageButton btnVolDown=(ImageButton)v.findViewById(R.id.btnVolDown);
Button btnRadioFM=(Button)v.findViewById(R.id.btnRadioFM);
Button btnRadioAM=(Button)v.findViewById(R.id.btnRadioAM);
Switch btnMusicMode=(Switch)v.findViewById(R.id.btnMusicMode);
ImageButton btnPrev=(ImageButton)v.findViewById(R.id.btnPrev);
ImageButton btnNext=(ImageButton)v.findViewById(R.id.btnNext);
stationText=(TextView)v.findViewById(R.id.stationText);
radioRDSIndicatorField=(TextView)v.findViewById(R.id.radioRDSIndicator);
radioStereoIndicatorField=(TextView)v.findViewById(R.id.radioStereoIndicator);
radioProgramField=(TextView)v.findViewById(R.id.radioProgram);
radioBroadcastField=(TextView)v.findViewById(R.id.radioBroadcast);
speedField=(TextView)v.findViewById(R.id.speedField);
rpmField=(TextView)v.findViewById(R.id.rpmField);
rangeField=(TextView)v.findViewById(R.id.rangeField);
fuel1Field=(TextView)v.findViewById(R.id.consumption1);
fuel2Field=(TextView)v.findViewById(R.id.consumption2);
avgSpeedField=(TextView)v.findViewById(R.id.avgSpeed);
outTempField=(TextView)v.findViewById(R.id.outdoorTempField);
coolantTempField=(TextView)v.findViewById(R.id.coolantTempField);
geoCoordinatesField=(TextView)v.findViewById(R.id.geoCoordinatesField);
geoStreetField=(TextView)v.findViewById(R.id.geoStreetField);
geoLocaleField=(TextView)v.findViewById(R.id.geoLocaleField);
geoAltitudeField=(TextView)v.findViewById(R.id.geoAltitudeField);
dateField=(TextView)v.findViewById(R.id.dateField);
timeField=(TextView)v.findViewById(R.id.timeField);
btnVolUp.setTag(IBusCommands.BMToRadioVolumeUp.name());
btnVolDown.setTag(IBusCommands.BMToRadioVolumeDown.name());
btnRadioFM.setTag(""String_Node_Str"");
btnRadioAM.setTag(""String_Node_Str"");
btnPrev.setTag(""String_Node_Str"");
btnNext.setTag(""String_Node_Str"");
btnMusicMode.setOnCheckedChangeListener(new OnCheckedChangeListener(){
public void onCheckedChanged(CompoundButton buttonView,boolean isChecked){
if (isChecked) {
radioLayout.setVisibility(View.GONE);
tabletLayout.setVisibility(View.VISIBLE);
if (!currentRadioMode.equals(""String_Node_Str"")) changeRadioMode(radioModes.AUX);
}
 else {
if (mIsPlaying) mPlayerService.sendPauseKey();
radioLayout.setVisibility(View.VISIBLE);
tabletLayout.setVisibility(View.GONE);
if (currentRadioMode.equals(""String_Node_Str"") || currentRadioMode.equals(""String_Node_Str"")) changeRadioMode(radioModes.Radio);
}
}
}
);
OnLongClickListener valueResetter=new OnLongClickListener(){
@Override public boolean onLongClick(View v){
IBusCommands action=IBusCommands.valueOf(v.getTag().toString());
switch (action) {
case BMToIKEResetFuel1:
showToast(""String_Node_Str"");
break;
case BMToIKEResetFuel2:
showToast(""String_Node_Str"");
break;
case BMToIKEResetAvgSpeed:
showToast(""String_Node_Str"");
break;
default :
break;
}
sendIBusCommand(action);
return true;
}
}
;
fuel1Field.setTag(IBusCommands.BMToIKEResetFuel1.name());
fuel2Field.setTag(IBusCommands.BMToIKEResetFuel1.name());
avgSpeedField.setTag(IBusCommands.BMToIKEResetAvgSpeed.name());
fuel1Field.setOnLongClickListener(valueResetter);
fuel2Field.setOnLongClickListener(valueResetter);
avgSpeedField.setOnLongClickListener(valueResetter);
OnClickListener clickSingleAction=new OnClickListener(){
@Override public void onClick(View v){
sendIBusCommand(IBusCommands.valueOf(v.getTag().toString()));
}
}
;
OnTouchListener touchAction=new OnTouchListener(){
@Override public boolean onTouch(View v,MotionEvent event){
String action=(event.getAction() == MotionEvent.ACTION_DOWN) ? ""String_Node_Str"" : ""String_Node_Str"";
sendIBusCommand(IBusCommands.valueOf(v.getTag().toString() + action));
return false;
}
}
;
btnVolUp.setOnClickListener(clickSingleAction);
btnVolDown.setOnClickListener(clickSingleAction);
btnRadioFM.setOnTouchListener(touchAction);
btnRadioAM.setOnTouchListener(touchAction);
btnPrev.setOnTouchListener(touchAction);
btnNext.setOnTouchListener(touchAction);
return v;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  final View v=inflater.inflate(R.layout.main_activity,container,false);
  radioLayout=(LinearLayout)v.findViewById(R.id.radioAudio);
  tabletLayout=(LinearLayout)v.findViewById(R.id.tabletAudio);
  bindServices();
  getActivity().getWindow().addFlags(LayoutParams.FLAG_KEEP_SCREEN_ON);
  mPlayerPrevBtn=(ImageButton)v.findViewById(R.id.playerPrevBtn);
  mPlayerControlBtn=(ImageButton)v.findViewById(R.id.playerPlayPauseBtn);
  mPlayerNextBtn=(ImageButton)v.findViewById(R.id.playerNextBtn);
  mPlayerTitleText=(TextView)v.findViewById(R.id.playerTitleField);
  mPlayerAlbumText=(TextView)v.findViewById(R.id.playerAlbumField);
  mPlayerArtistText=(TextView)v.findViewById(R.id.playerArtistField);
  mPlayerArtwork=(ImageView)v.findViewById(R.id.albumArt);
  mPlayerScrubBar=(SeekBar)v.findViewById(R.id.playerTrackBar);
  OnClickListener playerClickListener=new OnClickListener(){
    @Override public void onClick(    View v){
      if (mPlayerBound) {
switch (v.getId()) {
case R.id.playerPrevBtn:
          mPlayerService.sendPreviousKey();
        break;
case R.id.playerNextBtn:
      mPlayerService.sendNextKey();
    break;
case R.id.playerPlayPauseBtn:
  if (mIsPlaying) {
    mPlayerService.sendPauseKey();
  }
 else {
    mPlayerService.sendPlayKey();
  }
break;
}
}
}
}
;
mPlayerPrevBtn.setOnClickListener(playerClickListener);
mPlayerNextBtn.setOnClickListener(playerClickListener);
mPlayerControlBtn.setOnClickListener(playerClickListener);
mPlayerScrubBar.setOnSeekBarChangeListener(new OnSeekBarChangeListener(){
@Override public void onProgressChanged(SeekBar seekBar,int progress,boolean fromUser){
if (mPlayerBound && fromUser) {
mPlayerService.seekTo(mSongDuration * progress / seekBar.getMax());
}
}
@Override public void onStartTrackingTouch(SeekBar seekBar){
mPlayerHandler.removeCallbacks(mUpdateSeekBar);
}
@Override public void onStopTrackingTouch(SeekBar seekBar){
mPlayerHandler.post(mUpdateSeekBar);
}
}
);
ImageButton btnVolUp=(ImageButton)v.findViewById(R.id.btnVolUp);
ImageButton btnVolDown=(ImageButton)v.findViewById(R.id.btnVolDown);
Button btnRadioFM=(Button)v.findViewById(R.id.btnRadioFM);
Button btnRadioAM=(Button)v.findViewById(R.id.btnRadioAM);
Switch btnMusicMode=(Switch)v.findViewById(R.id.btnMusicMode);
ImageButton btnPrev=(ImageButton)v.findViewById(R.id.btnPrev);
ImageButton btnNext=(ImageButton)v.findViewById(R.id.btnNext);
stationText=(TextView)v.findViewById(R.id.stationText);
radioRDSIndicatorField=(TextView)v.findViewById(R.id.radioRDSIndicator);
radioStereoIndicatorField=(TextView)v.findViewById(R.id.radioStereoIndicator);
radioProgramField=(TextView)v.findViewById(R.id.radioProgram);
radioBroadcastField=(TextView)v.findViewById(R.id.radioBroadcast);
speedField=(TextView)v.findViewById(R.id.speedField);
rpmField=(TextView)v.findViewById(R.id.rpmField);
rangeField=(TextView)v.findViewById(R.id.rangeField);
fuel1Field=(TextView)v.findViewById(R.id.consumption1);
fuel2Field=(TextView)v.findViewById(R.id.consumption2);
avgSpeedField=(TextView)v.findViewById(R.id.avgSpeed);
outTempField=(TextView)v.findViewById(R.id.outdoorTempField);
coolantTempField=(TextView)v.findViewById(R.id.coolantTempField);
geoCoordinatesField=(TextView)v.findViewById(R.id.geoCoordinatesField);
geoStreetField=(TextView)v.findViewById(R.id.geoStreetField);
geoLocaleField=(TextView)v.findViewById(R.id.geoLocaleField);
geoAltitudeField=(TextView)v.findViewById(R.id.geoAltitudeField);
dateField=(TextView)v.findViewById(R.id.dateField);
timeField=(TextView)v.findViewById(R.id.timeField);
btnVolUp.setTag(IBusCommands.BMToRadioVolumeUp.name());
btnVolDown.setTag(IBusCommands.BMToRadioVolumeDown.name());
btnRadioFM.setTag(""String_Node_Str"");
btnRadioAM.setTag(""String_Node_Str"");
btnPrev.setTag(""String_Node_Str"");
btnNext.setTag(""String_Node_Str"");
btnMusicMode.setOnCheckedChangeListener(new OnCheckedChangeListener(){
public void onCheckedChanged(CompoundButton buttonView,boolean isChecked){
if (isChecked) {
radioLayout.setVisibility(View.GONE);
tabletLayout.setVisibility(View.VISIBLE);
if (!currentRadioMode.equals(""String_Node_Str"")) changeRadioMode(radioModes.AUX);
}
 else {
if (mIsPlaying) mPlayerService.sendPauseKey();
radioLayout.setVisibility(View.VISIBLE);
tabletLayout.setVisibility(View.GONE);
if (currentRadioMode.equals(""String_Node_Str"") || currentRadioMode.equals(""String_Node_Str"")) changeRadioMode(radioModes.Radio);
}
}
}
);
OnLongClickListener valueResetter=new OnLongClickListener(){
@Override public boolean onLongClick(View v){
IBusCommands action=IBusCommands.valueOf(v.getTag().toString());
switch (action) {
case BMToIKEResetFuel1:
showToast(""String_Node_Str"");
break;
case BMToIKEResetFuel2:
showToast(""String_Node_Str"");
break;
case BMToIKEResetAvgSpeed:
showToast(""String_Node_Str"");
break;
default :
break;
}
sendIBusCommand(action);
return true;
}
}
;
fuel1Field.setTag(IBusCommands.BMToIKEResetFuel1.name());
fuel2Field.setTag(IBusCommands.BMToIKEResetFuel1.name());
avgSpeedField.setTag(IBusCommands.BMToIKEResetAvgSpeed.name());
fuel1Field.setOnLongClickListener(valueResetter);
fuel2Field.setOnLongClickListener(valueResetter);
avgSpeedField.setOnLongClickListener(valueResetter);
OnClickListener clickSingleAction=new OnClickListener(){
@Override public void onClick(View v){
sendIBusCommand(IBusCommands.valueOf(v.getTag().toString()));
}
}
;
OnTouchListener touchAction=new OnTouchListener(){
@Override public boolean onTouch(View v,MotionEvent event){
String action=(event.getAction() == MotionEvent.ACTION_DOWN) ? ""String_Node_Str"" : ""String_Node_Str"";
sendIBusCommand(IBusCommands.valueOf(v.getTag().toString() + action));
return false;
}
}
;
btnVolUp.setOnClickListener(clickSingleAction);
btnVolDown.setOnClickListener(clickSingleAction);
btnRadioFM.setOnTouchListener(touchAction);
btnRadioAM.setOnTouchListener(touchAction);
btnPrev.setOnTouchListener(touchAction);
btnNext.setOnTouchListener(touchAction);
return v;
}",0.9996680497925312
35962,"/** 
 * Issue a Get request for the ""Avg. Speed"" Value.
 * @return Byte array of message to send to IBus
 */
public byte[] getAvgSpeed(){
  return IKEGetRequest(0x06,0xF4);
}","/** 
 * Issue a Get request for the ""Avg. Speed"" Value.
 * @return Byte array of message to send to IBus
 */
public byte[] getAvgSpeed(){
  return IKEGetRequest(0x0A,0xF4);
}",0.9942528735632185
35963,"public void setStreetLocation(){
  int lastData=6;
  while (currentMessage.get(lastData) != (byte)0x3B) {
    lastData++;
  }
  if (mCallbackReceiver != null)   mCallbackReceiver.onUpdateStreetLocation(decodeMessage(currentMessage,6,lastData));
}","public void setStreetLocation(){
  int lastData=6;
  while (currentMessage.get(lastData) != (byte)0x3B) {
    lastData++;
  }
  if (mCallbackReceiver != null)   mCallbackReceiver.onUpdateStreetLocation(decodeMessage(currentMessage,6,lastData - 1));
}",0.9919354838709676
35964,"public void setLocale(){
  int lastData=6;
  while (currentMessage.get(lastData) != (byte)0x00) {
    lastData++;
  }
  if (mCallbackReceiver != null)   mCallbackReceiver.onUpdateLocale(decodeMessage(currentMessage,6,lastData));
}","public void setLocale(){
  int lastData=6;
  while (currentMessage.get(lastData) != (byte)0x00) {
    lastData++;
  }
  if (mCallbackReceiver != null)   mCallbackReceiver.onUpdateLocale(decodeMessage(currentMessage,6,lastData - 1));
}",0.9913793103448276
35965,"private DataWriter writeString(String value){
  writeValueStart();
  if (value == null) {
    if (mode == JSON)     write(""String_Node_Str"");
 else     if (mode == HTML)     write(""String_Node_Str"");
  }
 else {
    if (mode == JSON)     write(JSONObject.valueToString(value));
 else     if (mode == XML)     write(StringEscapeUtils.escapeXml(value));
 else     if (mode == HTML)     write(Utils.autoGenerateLink(StringEscapeUtils.escapeHtml(value)));
  }
  writeValueEnd();
  return this;
}","private DataWriter writeString(String value){
  writeValueStart();
  if (value == null) {
    if (mode == JSON)     write(""String_Node_Str"");
 else     if (mode == HTML)     write(""String_Node_Str"");
  }
 else {
    if (mode == JSON)     write(JSONObject.valueToString(value));
 else     if (mode == XML)     write(StringEscapeUtils.escapeXml(value));
 else     if (mode == HTML)     write(Utils.autoGenerateLink(StringEscapeUtils.escapeHtml4(value)));
  }
  writeValueEnd();
  return this;
}",0.9989827060020344
35966,"public DataWriter key(String keyName){
  writeValueEnd();
  assrt(state().isObject,""String_Node_Str"");
  writeValueStart();
  State s=new State();
  s.isKey=true;
  s.key=mode == XML ? keyName.replaceAll(""String_Node_Str"",""String_Node_Str"") : keyName;
  states.push(s);
  if (mode == JSON)   write(JSONObject.quote(s.key)).write(""String_Node_Str"");
 else   if (mode == XML)   write(""String_Node_Str"").write(s.key).write(""String_Node_Str"");
 else   if (mode == HTML)   write(""String_Node_Str"").write(StringEscapeUtils.escapeHtml(s.key)).write(""String_Node_Str"");
  return this;
}","public DataWriter key(String keyName){
  writeValueEnd();
  assrt(state().isObject,""String_Node_Str"");
  writeValueStart();
  State s=new State();
  s.isKey=true;
  s.key=mode == XML ? keyName.replaceAll(""String_Node_Str"",""String_Node_Str"") : keyName;
  states.push(s);
  if (mode == JSON)   write(JSONObject.quote(s.key)).write(""String_Node_Str"");
 else   if (mode == XML)   write(""String_Node_Str"").write(s.key).write(""String_Node_Str"");
 else   if (mode == HTML)   write(""String_Node_Str"").write(StringEscapeUtils.escapeHtml4(s.key)).write(""String_Node_Str"");
  return this;
}",0.9991356957649092
35967,"public static DataService getServiceForEntity(String entityType){
  if (servicesByEntity.containsKey(entityType))   return servicesByEntity.get(entityType);
  IMetaObject meta=Core.getMetaObject(entityType);
  if (meta.getSuperObject() != null) {
    DataService superService=getServiceForEntity(meta.getSuperName());
    if (superService != null) {
      servicesByEntity.put(entityType,superService);
      return superService;
    }
  }
  servicesByEntity.put(entityType,null);
  return null;
}","public static DataService getServiceForEntity(String entityType){
  if (servicesByEntity.containsKey(entityType)) {
    return servicesByEntity.get(entityType);
  }
 else   if (entitiesWithoutService.contains(entityType)) {
    return null;
  }
 else {
    IMetaObject meta=Core.getMetaObject(entityType);
    if (meta.getSuperObject() != null) {
      DataService superService=getServiceForEntity(meta.getSuperName());
      if (superService != null) {
        servicesByEntity.put(entityType,superService);
        return superService;
      }
    }
    entitiesWithoutService.add(entityType);
    return null;
  }
}",0.7766816143497758
35968,"public synchronized static void start(IContext context) throws Exception {
  if (instance == null) {
    RestServices.LOGPUBLISH.info(""String_Node_Str"");
    instance=new RestServiceHandler();
    Core.addRequestHandler(RestServices.PATH_REST,instance);
    started=true;
    loadConfig(context);
    registerServiceHandler(HttpMethod.GET,""String_Node_Str"",""String_Node_Str"",new IRestServiceHandler(){
      @Override public void execute(      RestServiceRequest rsr,      Map<String,String> params) throws Exception {
        ServiceDescriber.serveServiceOverview(rsr);
      }
    }
);
    RestServices.LOGPUBLISH.info(""String_Node_Str"");
  }
}","public synchronized static void start(IContext context) throws Exception {
  if (instance == null) {
    RestServices.LOGPUBLISH.info(""String_Node_Str"");
    instance=new RestServiceHandler();
    Core.addRequestHandler(RestServices.PATH_REST,instance);
    started=true;
    loadConfig(context);
    RestServices.LOGPUBLISH.info(""String_Node_Str"");
  }
}",0.7092907092907093
35969,"public static void clearServices(){
  services.clear();
}","public static void clearServices(){
  services.clear();
  registerServiceOverviewHandler();
}",0.76
35970,"private static void serializeMember(IContext context,JSONObject target,String targetMemberName,IMendixObjectMember<?> member,IMetaObject viewType,Set<Long> alreadySeen,boolean useServiceUrls) throws Exception {
  if (context == null)   throw new IllegalStateException(""String_Node_Str"");
  Object value=member.getValue(context);
  String memberName=member.getName();
  if (Utils.isSystemAttribute(memberName) || memberName.endsWith(""String_Node_Str"")) {
  }
 else   if (!(member instanceof MendixObjectReference) && !(member instanceof MendixObjectReferenceSet)) {
switch (viewType.getMetaPrimitive(member.getName()).getType()) {
case AutoNumber:
case Long:
case Boolean:
case Currency:
case Float:
case Integer:
      if (value == null)       throw new IllegalStateException(""String_Node_Str"" + member.getName() + ""String_Node_Str"");
    target.put(targetMemberName,value);
  break;
case Enum:
MendixEnum me=(MendixEnum)member;
if (""String_Node_Str"".equals(me.getEnumeration().getName())) {
if (BooleanValue._true.toString().equals(me.getValue(context))) target.put(targetMemberName,true);
 else if (BooleanValue._false.toString().equals(me.getValue(context))) target.put(targetMemberName,false);
break;
}
case HashString:
case String:
if (value == null) target.put(targetMemberName,JSONObject.NULL);
 else target.put(targetMemberName,value);
break;
case DateTime:
if (value == null) target.put(targetMemberName,JSONObject.NULL);
 else target.put(targetMemberName,(((Date)value).getTime()));
break;
case Binary:
break;
default :
throw new IllegalStateException(""String_Node_Str"" + memberName);
}
}
 else if (member instanceof MendixObjectReference) {
if (value != null) value=identifierToJSON(context,(IMendixIdentifier)value,alreadySeen,useServiceUrls);
if (value == null) target.put(targetMemberName,JSONObject.NULL);
 else target.put(targetMemberName,value);
}
 else if (member instanceof MendixObjectReferenceSet) {
JSONArray ar=new JSONArray();
if (value != null) {
@SuppressWarnings(""String_Node_Str"") List<IMendixIdentifier> ids=(List<IMendixIdentifier>)value;
for (IMendixIdentifier id : ids) if (id != null) {
Object url=identifierToJSON(context,id,alreadySeen,useServiceUrls);
if (url != null) ar.put(url);
}
}
target.put(targetMemberName,ar);
}
 else throw new IllegalStateException(""String_Node_Str"" + member.getClass().getSimpleName());
}","private static void serializeMember(IContext context,JSONObject target,String targetMemberName,IMendixObjectMember<?> member,IMetaObject viewType,Set<Long> alreadySeen,boolean useServiceUrls) throws Exception {
  if (context == null)   throw new IllegalStateException(""String_Node_Str"");
  Object value=member.getValue(context);
  String memberName=member.getName();
  if (Utils.isSystemAttribute(memberName) || memberName.endsWith(""String_Node_Str"")) {
  }
 else   if (!(member instanceof MendixObjectReference) && !(member instanceof MendixObjectReferenceSet)) {
switch (viewType.getMetaPrimitive(member.getName()).getType()) {
case AutoNumber:
case Long:
case Boolean:
case Currency:
case Float:
case Integer:
      if (value == null)       throw new IllegalStateException(""String_Node_Str"" + member.getName() + ""String_Node_Str"");
    target.put(targetMemberName,value);
  break;
case Enum:
MendixEnum me=(MendixEnum)member;
if (""String_Node_Str"".equals(me.getEnumeration().getName())) {
if (BooleanValue._true.toString().equals(me.getValue(context))) target.put(targetMemberName,true);
 else if (BooleanValue._false.toString().equals(me.getValue(context))) target.put(targetMemberName,false);
break;
}
case HashString:
case String:
if (value == null) target.put(targetMemberName,JSONObject.NULL);
 else target.put(targetMemberName,value);
break;
case DateTime:
if (value == null) target.put(targetMemberName,JSONObject.NULL);
 else target.put(targetMemberName,(((Date)value).getTime()));
break;
case Binary:
break;
default :
throw new IllegalStateException(""String_Node_Str"" + memberName);
}
}
 else if (member instanceof MendixObjectReference) {
if (value != null) value=identifierToJSON(context,(IMendixIdentifier)value,alreadySeen,useServiceUrls);
if (value == null) target.put(targetMemberName,JSONObject.NULL);
 else target.put(targetMemberName,value);
}
 else if (member instanceof MendixObjectReferenceSet) {
JSONArray ar=new JSONArray();
if (value != null) {
@SuppressWarnings(""String_Node_Str"") List<IMendixIdentifier> ids=(List<IMendixIdentifier>)value;
Utils.sortIdList(ids);
for (IMendixIdentifier id : ids) if (id != null) {
Object url=identifierToJSON(context,id,alreadySeen,useServiceUrls);
if (url != null) ar.put(url);
}
}
target.put(targetMemberName,ar);
}
 else throw new IllegalStateException(""String_Node_Str"" + member.getClass().getSimpleName());
}",0.9951343346731544
35971,"private static RequestEntity buildMultiPartEntity(final IContext context,final IMendixObject source,Map<String,String> params) throws IOException, CoreException {
  List<Part> parts=Lists.newArrayList();
  if (Core.isSubClassOf(FileDocument.entityName,source.getType())) {
    addFilePart(context,getFileDocumentFileName(context,source),source,parts);
  }
  for (  String name : getAssociationsReferingToFileDocs(source.getMetaObject())) {
    IMendixIdentifier subObject=(IMendixIdentifier)source.getValue(context,name);
    params.remove(Utils.getShortMemberName(name));
    if (subObject != null) {
      addFilePart(context,Utils.getShortMemberName(name),Core.retrieveId(context,subObject),parts);
    }
  }
  for (  Entry<String,String> e : params.entrySet()) {
    parts.add(new StringPart(e.getKey(),e.getValue(),RestServices.UTF8));
  }
  params.clear();
  return new MultipartRequestEntity(parts.toArray(new Part[0]),new HttpMethodParams());
}","private static RequestEntity buildMultiPartEntity(final IContext context,final IMendixObject source,Map<String,String> params) throws IOException, CoreException {
  List<Part> parts=Lists.newArrayList();
  if (Core.isSubClassOf(FileDocument.entityName,source.getType())) {
    String partName=getFileDocumentFileName(context,source);
    if (partName == null || partName.isEmpty())     throw new IllegalArgumentException(""String_Node_Str"");
    addFilePart(context,partName,source,parts);
  }
  for (  String name : getAssociationsReferingToFileDocs(source.getMetaObject())) {
    IMendixIdentifier subObject=(IMendixIdentifier)source.getValue(context,name);
    params.remove(Utils.getShortMemberName(name));
    if (subObject != null) {
      addFilePart(context,Utils.getShortMemberName(name),Core.retrieveId(context,subObject),parts);
    }
  }
  for (  Entry<String,String> e : params.entrySet()) {
    parts.add(new StringPart(e.getKey(),e.getValue(),RestServices.UTF8));
  }
  params.clear();
  return new MultipartRequestEntity(parts.toArray(new Part[0]),new HttpMethodParams());
}",0.895639392454679
35972,"@Override public void processRequest(IMxRuntimeRequest req,IMxRuntimeResponse resp,String _){
  long start=System.currentTimeMillis();
  HttpServletRequest request=req.getHttpServletRequest();
  HttpServletResponse response=resp.getHttpServletResponse();
  String method=request.getMethod();
  URL u;
  try {
    u=new URL(request.getRequestURL().toString());
  }
 catch (  MalformedURLException e1) {
    throw new IllegalStateException(e1);
  }
  String relpath=u.getPath().substring(RestServices.PATH_REST.length() + 1);
  String requestStr=method + ""String_Node_Str"" + relpath;
  response.setCharacterEncoding(RestServices.UTF8);
  response.setHeader(""String_Node_Str"",""String_Node_Str"");
  if (RestServices.LOGPUBLISH.isDebugEnabled())   RestServices.LOGPUBLISH.debug(""String_Node_Str"" + Utils.getRequestUrl(request));
  RestServiceRequest rsr=new RestServiceRequest(request,response,resp,relpath);
  try {
    ISession existingSession=getSessionFromRequest(req);
    executeHandler(rsr,method,relpath,existingSession);
    if (RestServices.LOGPUBLISH.isDebugEnabled())     RestServices.LOGPUBLISH.debug(""String_Node_Str"" + requestStr + ""String_Node_Str""+ (System.currentTimeMillis() - start)+ ""String_Node_Str"");
  }
 catch (  RestPublishException rre) {
    RestServices.LOGPUBLISH.warn(""String_Node_Str"" + requestStr + ""String_Node_Str""+ rre.getType()+ ""String_Node_Str""+ rre.getMessage());
    serveErrorPage(rsr,rre.getStatusCode(),rre.getType().toString() + ""String_Node_Str"" + requestStr+ ""String_Node_Str""+ rre.getMessage(),rre.getType().toString());
  }
catch (  JSONException je) {
    RestServices.LOGPUBLISH.warn(""String_Node_Str"" + requestStr + ""String_Node_Str""+ je.getMessage());
    serveErrorPage(rsr,HttpStatus.SC_BAD_REQUEST,""String_Node_Str"" + je.getMessage(),""String_Node_Str"");
  }
catch (  Throwable e) {
    Throwable cause=ExceptionUtils.getRootCause(e);
    if (cause instanceof CustomRestServiceException) {
      CustomRestServiceException rse=(CustomRestServiceException)cause;
      RestServices.LOGPUBLISH.warn(String.format(""String_Node_Str"",requestStr,rse.getHttpStatus(),rse.getDetail(),rse.getMessage()));
      serveErrorPage(rsr,rse.getHttpStatus(),rse.getMessage(),rse.getDetail());
    }
 else     if (cause instanceof WebserviceException) {
      RestServices.LOGPUBLISH.warn(""String_Node_Str"" + requestStr + ""String_Node_Str""+ cause.getMessage());
      serveErrorPage(rsr,HttpStatus.SC_BAD_REQUEST,cause.getMessage(),((WebserviceException)cause).getFaultCode());
    }
 else {
      RestServices.LOGPUBLISH.error(""String_Node_Str"" + requestStr + ""String_Node_Str""+ e.getMessage(),e);
      serveErrorPage(rsr,HttpStatus.SC_INTERNAL_SERVER_ERROR,""String_Node_Str"" + requestStr + ""String_Node_Str"",null);
    }
  }
 finally {
    rsr.dispose();
  }
}","@Override public void processRequest(IMxRuntimeRequest req,IMxRuntimeResponse resp,String _){
  long start=System.currentTimeMillis();
  HttpServletRequest request=req.getHttpServletRequest();
  HttpServletResponse response=resp.getHttpServletResponse();
  String method=request.getMethod();
  URL u;
  try {
    u=new URL(request.getRequestURL().toString());
  }
 catch (  MalformedURLException e1) {
    throw new IllegalStateException(e1);
  }
  String relpath=u.getPath().substring(RestServices.PATH_REST.length() + 1);
  String requestStr=method + ""String_Node_Str"" + relpath;
  response.setCharacterEncoding(RestServices.UTF8);
  response.setHeader(""String_Node_Str"",""String_Node_Str"");
  if (RestServices.LOGPUBLISH.isDebugEnabled())   RestServices.LOGPUBLISH.debug(""String_Node_Str"" + Utils.getRequestUrl(request));
  RestServiceRequest rsr=new RestServiceRequest(request,response,resp,relpath);
  try {
    ISession existingSession=getSessionFromRequest(req);
    executeHandler(rsr,method,relpath,existingSession);
    if (RestServices.LOGPUBLISH.isDebugEnabled())     RestServices.LOGPUBLISH.debug(""String_Node_Str"" + requestStr + ""String_Node_Str""+ (System.currentTimeMillis() - start)+ ""String_Node_Str"");
  }
 catch (  RestPublishException rre) {
    handleRestPublishException(requestStr,rsr,rre);
  }
catch (  JSONException je) {
    handleJsonException(requestStr,rsr,je);
  }
catch (  Throwable e) {
    Throwable cause=ExceptionUtils.getRootCause(e);
    if (cause instanceof RestPublishException)     handleRestPublishException(requestStr,rsr,(RestPublishException)cause);
 else     if (cause instanceof JSONException)     handleJsonException(requestStr,rsr,(JSONException)cause);
    if (cause instanceof CustomRestServiceException) {
      CustomRestServiceException rse=(CustomRestServiceException)cause;
      RestServices.LOGPUBLISH.warn(String.format(""String_Node_Str"",requestStr,rse.getHttpStatus(),rse.getDetail(),rse.getMessage()));
      serveErrorPage(rsr,rse.getHttpStatus(),rse.getMessage(),rse.getDetail());
    }
 else     if (cause instanceof WebserviceException) {
      RestServices.LOGPUBLISH.warn(""String_Node_Str"" + requestStr + ""String_Node_Str""+ cause.getMessage());
      serveErrorPage(rsr,HttpStatus.SC_BAD_REQUEST,cause.getMessage(),((WebserviceException)cause).getFaultCode());
    }
 else {
      RestServices.LOGPUBLISH.error(""String_Node_Str"" + requestStr + ""String_Node_Str""+ e.getMessage(),e);
      serveErrorPage(rsr,HttpStatus.SC_INTERNAL_SERVER_ERROR,""String_Node_Str"" + requestStr + ""String_Node_Str"",null);
    }
  }
 finally {
    rsr.dispose();
  }
}",0.6796152423233445
35973,"@Test public void testComplexSerialization() throws Exception {
  IContext c=Core.createSystemContext();
  A a=new A(c);
  a.set_id(""String_Node_Str"");
  a.set_id_jsonkey(""String_Node_Str"");
  a.setsuper_name(""String_Node_Str"");
  a.setsuper_name_jsonkey(""String_Node_Str"");
  B b=new B(c);
  b.setattr(""String_Node_Str"");
  a.setA_B(b);
  a.setA_B_jsonkey(""String_Node_Str"");
  JSONObject res=JsonSerializer.writeMendixObjectToJson(c,a.getMendixObject());
  Assert.assertFalse(res.has(""String_Node_Str""));
  Assert.assertFalse(res.has(""String_Node_Str""));
  Assert.assertEquals(""String_Node_Str"",res.getString(""String_Node_Str""));
  Assert.assertEquals(""String_Node_Str"",res.getString(""String_Node_Str""));
  Assert.assertEquals(""String_Node_Str"",res.getJSONObject(""String_Node_Str"").getString(""String_Node_Str""));
}","@Test public void testComplexSerialization() throws Exception {
  final IContext c=Core.createSystemContext();
  Utils.withSessionCache(c,new Function<Boolean>(){
    @Override public Boolean apply() throws Exception {
      A a=new A(c);
      a.set_id(""String_Node_Str"");
      a.set_id_jsonkey(""String_Node_Str"");
      a.setsuper_name(""String_Node_Str"");
      a.setsuper_name_jsonkey(""String_Node_Str"");
      B b=new B(c);
      b.setattr(""String_Node_Str"");
      a.setA_B(b);
      a.setA_B_jsonkey(""String_Node_Str"");
      Assert.assertTrue(a.getA_B() != null);
      Assert.assertTrue(a.getMendixObject().getValue(c,A.MemberNames.A_B.toString()) != null);
      Assert.assertTrue(Core.retrieveId(c,(IMendixIdentifier)a.getMendixObject().getValue(c,A.MemberNames.A_B.toString())) != null);
      JSONObject res=JsonSerializer.writeMendixObjectToJson(c,a.getMendixObject());
      Assert.assertFalse(res.has(""String_Node_Str""));
      Assert.assertFalse(res.has(""String_Node_Str""));
      Assert.assertEquals(""String_Node_Str"",res.getString(""String_Node_Str""));
      Assert.assertEquals(""String_Node_Str"",res.getString(""String_Node_Str""));
      Assert.assertEquals(""String_Node_Str"",res.getJSONObject(""String_Node_Str"").getString(""String_Node_Str""));
      return true;
    }
  }
);
}",0.3770724774988157
35974,"@Override public Boolean apply() throws Exception {
  A a=new A(c);
  JsonDeserializer.readJsonDataIntoMendixObject(c,data,a.getMendixObject(),false);
  Assert.assertEquals(""String_Node_Str"",a.get_id());
  Assert.assertEquals(""String_Node_Str"",a.getsuper_name());
  Assert.assertEquals(""String_Node_Str"",a.getA_B().getattr());
  Assert.assertEquals(2,a.get_A_Bs().size());
  Assert.assertEquals(""String_Node_Str"",a.get_A_Bs().get(0).getattr());
  Assert.assertEquals(""String_Node_Str"",a.get_A_Bs().get(1).getattr());
  return true;
}","@Override public Boolean apply() throws Exception {
  String KEY=""String_Node_Str"";
  StringArrayTest t=new StringArrayTest(c);
  Primitive string1=new Primitive(c);
  string1.setStringValue(""String_Node_Str"");
  string1.setPrimitiveType(RestPrimitiveType.String);
  Primitive bool1=new Primitive(c);
  bool1.setBooleanValue(true);
  bool1.setPrimitiveType(RestPrimitiveType._Boolean);
  Primitive nullP=new Primitive(c);
  nullP.setPrimitiveType(RestPrimitiveType._NULL);
  Primitive num1=new Primitive(c);
  num1.setPrimitiveType(RestPrimitiveType.Number);
  num1.setNumberValue(4.7);
  JSONObject res=JsonSerializer.writeMendixObjectToJson(c,t.getMendixObject());
  Assert.assertTrue(res.has(KEY));
  Assert.assertTrue(res.isNull(KEY));
  t.setdynamicallyTypedItem(nullP);
  res=JsonSerializer.writeMendixObjectToJson(c,t.getMendixObject());
  Assert.assertTrue(res.isNull(KEY));
  t.setdynamicallyTypedItem(string1);
  res=JsonSerializer.writeMendixObjectToJson(c,t.getMendixObject());
  Assert.assertEquals(""String_Node_Str"",res.get(KEY));
  t.setdynamicallyTypedItem(num1);
  res=JsonSerializer.writeMendixObjectToJson(c,t.getMendixObject());
  Assert.assertEquals(4.7,res.get(KEY));
  t.setdynamicallyTypedItem(bool1);
  res=JsonSerializer.writeMendixObjectToJson(c,t.getMendixObject());
  Assert.assertEquals(true,res.get(KEY));
  return true;
}",0.2449628844114528
35975,"@Test public void testStringArraySerialization() throws Exception {
  IContext c=Core.createSystemContext();
  StringArrayTest t=new StringArrayTest(c);
  Primitive string1=new Primitive(c);
  string1.setStringValue(""String_Node_Str"");
  string1.setPrimitiveType(RestPrimitiveType.String);
  Primitive string2=new Primitive(c);
  string2.setStringValue(""String_Node_Str"");
  string2.setPrimitiveType(RestPrimitiveType.String);
  Primitive nullP=new Primitive(c);
  nullP.setPrimitiveType(RestPrimitiveType._NULL);
  JSONObject res=JsonSerializer.writeMendixObjectToJson(c,t.getMendixObject());
  Assert.assertTrue(res.has(""String_Node_Str""));
  Assert.assertTrue(res.isJSONArray(""String_Node_Str""));
  Assert.assertEquals(0,res.getJSONArray(""String_Node_Str"").length());
  List<Primitive> l=t.getitems();
  l.add(string1);
  l.add(string2);
  l.add(nullP);
  t.setitems(l);
  res=JsonSerializer.writeMendixObjectToJson(c,t.getMendixObject());
  Assert.assertTrue(res.has(""String_Node_Str""));
  Assert.assertTrue(res.isJSONArray(""String_Node_Str""));
  Assert.assertEquals(3,res.getJSONArray(""String_Node_Str"").length());
  Assert.assertEquals(""String_Node_Str"",res.getJSONArray(""String_Node_Str"").getString(0));
  Assert.assertEquals(""String_Node_Str"",res.getJSONArray(""String_Node_Str"").getString(1));
  Assert.assertTrue(res.getJSONArray(""String_Node_Str"").isNull(2));
}","@Test public void testStringArraySerialization() throws Exception {
  final IContext c=Core.createSystemContext();
  Utils.withSessionCache(c,new Function<Boolean>(){
    @Override public Boolean apply() throws Exception {
      StringArrayTest t=new StringArrayTest(c);
      Primitive string1=new Primitive(c);
      string1.setStringValue(""String_Node_Str"");
      string1.setPrimitiveType(RestPrimitiveType.String);
      Primitive string2=new Primitive(c);
      string2.setStringValue(""String_Node_Str"");
      string2.setPrimitiveType(RestPrimitiveType.String);
      Primitive nullP=new Primitive(c);
      nullP.setPrimitiveType(RestPrimitiveType._NULL);
      JSONObject res=JsonSerializer.writeMendixObjectToJson(c,t.getMendixObject());
      Assert.assertTrue(res.has(""String_Node_Str""));
      Assert.assertTrue(res.isJSONArray(""String_Node_Str""));
      Assert.assertEquals(0,res.getJSONArray(""String_Node_Str"").length());
      List<Primitive> l=t.getitems();
      l.add(string1);
      l.add(string2);
      l.add(nullP);
      t.setitems(l);
      res=JsonSerializer.writeMendixObjectToJson(c,t.getMendixObject());
      Assert.assertTrue(res.has(""String_Node_Str""));
      Assert.assertTrue(res.isJSONArray(""String_Node_Str""));
      Assert.assertEquals(3,res.getJSONArray(""String_Node_Str"").length());
      Assert.assertEquals(""String_Node_Str"",res.getJSONArray(""String_Node_Str"").getString(0));
      Assert.assertEquals(""String_Node_Str"",res.getJSONArray(""String_Node_Str"").getString(1));
      Assert.assertTrue(res.getJSONArray(""String_Node_Str"").isNull(2));
      return true;
    }
  }
);
}",0.9176706827309236
35976,"@Test public void testDynamicPrimitiveSerialization() throws Exception {
  IContext c=Core.createSystemContext();
  String KEY=""String_Node_Str"";
  StringArrayTest t=new StringArrayTest(c);
  Primitive string1=new Primitive(c);
  string1.setStringValue(""String_Node_Str"");
  string1.setPrimitiveType(RestPrimitiveType.String);
  Primitive bool1=new Primitive(c);
  bool1.setBooleanValue(true);
  bool1.setPrimitiveType(RestPrimitiveType._Boolean);
  Primitive nullP=new Primitive(c);
  nullP.setPrimitiveType(RestPrimitiveType._NULL);
  Primitive num1=new Primitive(c);
  num1.setPrimitiveType(RestPrimitiveType.Number);
  num1.setNumberValue(4.7);
  JSONObject res=JsonSerializer.writeMendixObjectToJson(c,t.getMendixObject());
  Assert.assertTrue(res.has(KEY));
  Assert.assertTrue(res.isNull(KEY));
  t.setdynamicallyTypedItem(nullP);
  res=JsonSerializer.writeMendixObjectToJson(c,t.getMendixObject());
  Assert.assertTrue(res.isNull(KEY));
  t.setdynamicallyTypedItem(string1);
  res=JsonSerializer.writeMendixObjectToJson(c,t.getMendixObject());
  Assert.assertEquals(""String_Node_Str"",res.get(KEY));
  t.setdynamicallyTypedItem(num1);
  res=JsonSerializer.writeMendixObjectToJson(c,t.getMendixObject());
  Assert.assertEquals(4.7,res.get(KEY));
  t.setdynamicallyTypedItem(bool1);
  res=JsonSerializer.writeMendixObjectToJson(c,t.getMendixObject());
  Assert.assertEquals(true,res.get(KEY));
}","@Test public void testDynamicPrimitiveSerialization() throws Exception {
  final IContext c=Core.createSystemContext();
  Utils.withSessionCache(c,new Function<Boolean>(){
    @Override public Boolean apply() throws Exception {
      String KEY=""String_Node_Str"";
      StringArrayTest t=new StringArrayTest(c);
      Primitive string1=new Primitive(c);
      string1.setStringValue(""String_Node_Str"");
      string1.setPrimitiveType(RestPrimitiveType.String);
      Primitive bool1=new Primitive(c);
      bool1.setBooleanValue(true);
      bool1.setPrimitiveType(RestPrimitiveType._Boolean);
      Primitive nullP=new Primitive(c);
      nullP.setPrimitiveType(RestPrimitiveType._NULL);
      Primitive num1=new Primitive(c);
      num1.setPrimitiveType(RestPrimitiveType.Number);
      num1.setNumberValue(4.7);
      JSONObject res=JsonSerializer.writeMendixObjectToJson(c,t.getMendixObject());
      Assert.assertTrue(res.has(KEY));
      Assert.assertTrue(res.isNull(KEY));
      t.setdynamicallyTypedItem(nullP);
      res=JsonSerializer.writeMendixObjectToJson(c,t.getMendixObject());
      Assert.assertTrue(res.isNull(KEY));
      t.setdynamicallyTypedItem(string1);
      res=JsonSerializer.writeMendixObjectToJson(c,t.getMendixObject());
      Assert.assertEquals(""String_Node_Str"",res.get(KEY));
      t.setdynamicallyTypedItem(num1);
      res=JsonSerializer.writeMendixObjectToJson(c,t.getMendixObject());
      Assert.assertEquals(4.7,res.get(KEY));
      t.setdynamicallyTypedItem(bool1);
      res=JsonSerializer.writeMendixObjectToJson(c,t.getMendixObject());
      Assert.assertEquals(true,res.get(KEY));
      return true;
    }
  }
);
}",0.9156311314584696
35977,"@Test public void testFileTransfer() throws Exception {
  IContext c=Core.createSystemContext();
  try {
    new MicroflowService(""String_Node_Str"",""String_Node_Str"",HttpMethod.POST,""String_Node_Str"");
    String url=RestServices.getAbsoluteUrl(""String_Node_Str"");
    TestFile source=new TestFile(c);
    source.setMultiplier(2);
    StringUtils.stringToFile(c,""String_Node_Str"",source);
    source.commit();
    TestFile destination=new TestFile(c);
    RestConsumer.request(c,HttpMethod.POST,url,source.getMendixObject(),destination.getMendixObject(),true);
    Assert.assertEquals(""String_Node_Str"",StringUtils.stringFromFile(c,destination));
    RestConsumer.request(c,HttpMethod.POST,Utils.appendParamToUrl(url,TestFile.MemberNames.Multiplier.toString(),""String_Node_Str""),source.getMendixObject(),destination.getMendixObject(),true);
    Assert.assertEquals(""String_Node_Str"",StringUtils.stringFromFile(c,destination));
    URL u=new URL(Utils.appendParamToUrl(url,TestFile.MemberNames.Multiplier.toString(),""String_Node_Str""));
    HttpURLConnection con=(HttpURLConnection)u.openConnection();
    con.setDoOutput(true);
    con.setDoInput(true);
    con.setRequestMethod(""String_Node_Str"");
    con.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
    con.setRequestProperty(""String_Node_Str"",RestServices.CONTENTTYPE_OCTET);
    con.connect();
    OutputStream out=con.getOutputStream();
    IOUtils.copy(IOUtils.toInputStream(""String_Node_Str""),out);
    out.flush();
    out.close();
    InputStream in=con.getInputStream();
    List<String> lines=IOUtils.readLines(in);
    in.close();
    con.disconnect();
    Assert.assertEquals(1,lines.size());
    Assert.assertEquals(""String_Node_Str"",lines.get(0));
  }
  finally {
    XPath.create(c,TestFile.class).deleteAll();
  }
}","@Test public void testFileTransfer() throws Exception {
  final IContext c=Core.createSystemContext();
  Utils.withSessionCache(c,new Function<Boolean>(){
    @Override public Boolean apply() throws Exception {
      try {
        new MicroflowService(""String_Node_Str"",""String_Node_Str"",HttpMethod.POST,""String_Node_Str"");
        String url=RestServices.getAbsoluteUrl(""String_Node_Str"");
        TestFile source=new TestFile(c);
        source.setName(""String_Node_Str"");
        source.setMultiplier(2);
        StringUtils.stringToFile(c,""String_Node_Str"",source);
        source.commit();
        TestFile destination=new TestFile(c);
        TestFile destination2=new TestFile(c);
        RestConsumer.request(c,HttpMethod.POST,url,source.getMendixObject(),destination.getMendixObject(),true);
        Assert.assertEquals(""String_Node_Str"",StringUtils.stringFromFile(c,destination));
        RestConsumer.request(c,HttpMethod.POST,Utils.appendParamToUrl(url,TestFile.MemberNames.Multiplier.toString(),""String_Node_Str""),source.getMendixObject(),destination2.getMendixObject(),true);
        Assert.assertEquals(""String_Node_Str"",StringUtils.stringFromFile(c,destination2));
        URL u=new URL(Utils.appendParamToUrl(url,TestFile.MemberNames.Multiplier.toString(),""String_Node_Str""));
        HttpURLConnection con=(HttpURLConnection)u.openConnection();
        con.setDoOutput(true);
        con.setDoInput(true);
        con.setRequestMethod(""String_Node_Str"");
        con.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
        con.setRequestProperty(""String_Node_Str"",RestServices.CONTENTTYPE_OCTET);
        con.connect();
        OutputStream out=con.getOutputStream();
        IOUtils.copy(IOUtils.toInputStream(""String_Node_Str""),out);
        out.flush();
        out.close();
        InputStream in=con.getInputStream();
        List<String> lines=IOUtils.readLines(in);
        in.close();
        con.disconnect();
        Assert.assertEquals(1,lines.size());
        Assert.assertEquals(""String_Node_Str"",lines.get(0));
      }
  finally {
        XPath.create(c,TestFile.class).deleteAll();
      }
      return true;
    }
  }
);
}",0.8722222222222222
35978,"public void serveServiceDescription(){
  rsr.startDoc();
  if (isHTML) {
    rsr.write(""String_Node_Str"" + def.getName() + ""String_Node_Str""+ RestServices.PATH_REST+ ""String_Node_Str"");
  }
  rsr.datawriter.object().key(""String_Node_Str"").value(def.getName()).key(""String_Node_Str"").value(def.getDescription()).key(""String_Node_Str"").value(RestServices.getAbsoluteUrl(def.getName())).key(""String_Node_Str"").value(""String_Node_Str"".equals(def.getAccessRole())).key(""String_Node_Str"").value(def.getUseStrictVersioning());
  if (isHTML)   rsr.datawriter.endObject();
 else   rsr.datawriter.key(""String_Node_Str"").object();
  startEndpoint(""String_Node_Str"",""String_Node_Str"" + RestServices.PARAM_ABOUT,""String_Node_Str"");
  addContentType();
  endEndpoint();
  if (def.getEnableListing()) {
    startEndpoint(""String_Node_Str"",""String_Node_Str"" + RestServices.PARAM_COUNT,""String_Node_Str"");
    addContentType();
    endEndpoint();
    startEndpoint(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    addEndpointParam(RestServices.PARAM_DATA,""String_Node_Str"");
    addEndpointParam(RestServices.PARAM_OFFSET,""String_Node_Str"");
    addEndpointParam(RestServices.PARAM_LIMIT,""String_Node_Str"");
    addContentType();
    endEndpoint();
  }
  if (def.getEnableGet()) {
    startEndpoint(""String_Node_Str"",""String_Node_Str"" + def.getSourceKeyAttribute() + ""String_Node_Str"",""String_Node_Str"");
    addEndpointParam(RestServices.HEADER_IFNONEMATCH + ""String_Node_Str"",""String_Node_Str"");
    addContentType();
    JSONObject schema=JSONSchemaBuilder.build(Core.getReturnType(def.getOnPublishMicroflow()));
    addEndpointParam(""String_Node_Str"",schema);
    endEndpoint();
  }
  if (def.getEnableChangeLog()) {
    startEndpoint(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    addEndpointParam(RestServices.PARAM_SINCE,SINCEPARAM_HELPTEXT);
    addContentType();
    endEndpoint();
    startEndpoint(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    addEndpointParam(RestServices.PARAM_SINCE,SINCEPARAM_HELPTEXT);
    addEndpointParam(RestServices.PARAM_TIMEOUT,""String_Node_Str"");
    addContentType();
    endEndpoint();
  }
  if (def.getEnableCreate()) {
    startEndpoint(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    addBodyParam();
    addEtagParam();
    endEndpoint();
    startEndpoint(""String_Node_Str"",""String_Node_Str"" + def.getSourceKeyAttribute() + ""String_Node_Str"",""String_Node_Str"");
    addBodyParam();
    addEtagParam();
    endEndpoint();
  }
  if (def.getEnableUpdate()) {
    startEndpoint(""String_Node_Str"",""String_Node_Str"" + def.getSourceKeyAttribute() + ""String_Node_Str"",""String_Node_Str"" + (def.getEnableCreate() ? ""String_Node_Str"" : ""String_Node_Str""));
    addBodyParam();
    addEtagParam();
    endEndpoint();
  }
  if (def.getEnableDelete()) {
    startEndpoint(""String_Node_Str"",""String_Node_Str"" + def.getSourceKeyAttribute() + ""String_Node_Str"",""String_Node_Str"");
    addBodyParam();
    addEtagParam();
    endEndpoint();
  }
  if (!isHTML)   rsr.datawriter.endObject().endObject();
  rsr.endDoc();
}","public void serveServiceDescription(){
  rsr.startDoc();
  if (isHTML) {
    rsr.write(""String_Node_Str"" + def.getName() + ""String_Node_Str""+ RestServices.PATH_REST+ ""String_Node_Str"");
  }
  rsr.datawriter.object().key(""String_Node_Str"").value(def.getName()).key(""String_Node_Str"").value(def.getDescription()).key(""String_Node_Str"").value(RestServices.getAbsoluteUrl(def.getName())).key(""String_Node_Str"").value(""String_Node_Str"".equals(def.getAccessRole())).key(""String_Node_Str"").value(def.getUseStrictVersioning());
  if (isHTML)   rsr.datawriter.endObject();
 else   rsr.datawriter.key(""String_Node_Str"").array();
  startEndpoint(""String_Node_Str"",""String_Node_Str"" + RestServices.PARAM_ABOUT,""String_Node_Str"");
  addContentType();
  endEndpoint();
  if (def.getEnableListing()) {
    startEndpoint(""String_Node_Str"",""String_Node_Str"" + RestServices.PARAM_COUNT,""String_Node_Str"");
    addContentType();
    endEndpoint();
    startEndpoint(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    addEndpointParam(RestServices.PARAM_DATA,""String_Node_Str"");
    addEndpointParam(RestServices.PARAM_OFFSET,""String_Node_Str"");
    addEndpointParam(RestServices.PARAM_LIMIT,""String_Node_Str"");
    addContentType();
    endEndpoint();
  }
  if (def.getEnableGet()) {
    startEndpoint(""String_Node_Str"",""String_Node_Str"" + def.getSourceKeyAttribute() + ""String_Node_Str"",""String_Node_Str"");
    addEndpointParam(RestServices.HEADER_IFNONEMATCH + ""String_Node_Str"",""String_Node_Str"");
    addContentType();
    JSONObject schema=JSONSchemaBuilder.build(Core.getReturnType(def.getOnPublishMicroflow()));
    addEndpointParam(""String_Node_Str"",schema);
    endEndpoint();
  }
  if (def.getEnableChangeLog()) {
    startEndpoint(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    addEndpointParam(RestServices.PARAM_SINCE,SINCEPARAM_HELPTEXT);
    addContentType();
    endEndpoint();
    startEndpoint(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    addEndpointParam(RestServices.PARAM_SINCE,SINCEPARAM_HELPTEXT);
    addEndpointParam(RestServices.PARAM_TIMEOUT,""String_Node_Str"");
    addContentType();
    endEndpoint();
  }
  if (def.getEnableCreate()) {
    startEndpoint(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    addBodyParam();
    addEtagParam();
    endEndpoint();
    startEndpoint(""String_Node_Str"",""String_Node_Str"" + def.getSourceKeyAttribute() + ""String_Node_Str"",""String_Node_Str"");
    addBodyParam();
    addEtagParam();
    endEndpoint();
  }
  if (def.getEnableUpdate()) {
    startEndpoint(""String_Node_Str"",""String_Node_Str"" + def.getSourceKeyAttribute() + ""String_Node_Str"",""String_Node_Str"" + (def.getEnableCreate() ? ""String_Node_Str"" : ""String_Node_Str""));
    addBodyParam();
    addEtagParam();
    endEndpoint();
  }
  if (def.getEnableDelete()) {
    startEndpoint(""String_Node_Str"",""String_Node_Str"" + def.getSourceKeyAttribute() + ""String_Node_Str"",""String_Node_Str"");
    addBodyParam();
    addEtagParam();
    endEndpoint();
  }
  if (!isHTML)   rsr.datawriter.endArray().endObject();
  rsr.endDoc();
}",0.99447872685937
35979,"public void serveDescription(RestServiceRequest rsr){
  rsr.startDoc();
  if (rsr.getResponseContentType() == ResponseType.HTML)   rsr.write(""String_Node_Str"").write(getName()).write(""String_Node_Str"");
  rsr.datawriter.object().key(""String_Node_Str"").value(getName()).key(""String_Node_Str"").value(description).key(""String_Node_Str"").value(RestServices.getServiceUrl(getName())).key(""String_Node_Str"").value(JSONSchemaBuilder.build(Utils.getFirstArgumentType(microflowname))).key(""String_Node_Str"").value(isFileSource).key(""String_Node_Str"").value(isFileTarget ? RestServices.CONTENTTYPE_OCTET + ""String_Node_Str"" : JSONSchemaBuilder.build(Core.getReturnType(microflowname))).endObject();
  rsr.endDoc();
}","public void serveDescription(RestServiceRequest rsr){
  rsr.startDoc();
  if (rsr.getResponseContentType() == ResponseType.HTML)   rsr.write(""String_Node_Str"").write(getName()).write(""String_Node_Str"");
  rsr.datawriter.object().key(""String_Node_Str"").value(getName()).key(""String_Node_Str"").value(description).key(""String_Node_Str"").value(RestServices.getServiceUrl(getName())).key(""String_Node_Str"").value(hasArgument ? JSONSchemaBuilder.build(Utils.getFirstArgumentType(microflowname)) : null).key(""String_Node_Str"").value(isFileSource).key(""String_Node_Str"").value(isFileTarget ? RestServices.CONTENTTYPE_OCTET + ""String_Node_Str"" : JSONSchemaBuilder.build(Core.getReturnType(microflowname))).endObject();
  rsr.endDoc();
}",0.9853454291695743
35980,"public void serveDescription(RestServiceRequest rsr){
  rsr.startDoc();
  if (rsr.getResponseContentType() == ResponseType.HTML)   rsr.write(""String_Node_Str"").write(getName()).write(""String_Node_Str"");
  rsr.datawriter.object().key(""String_Node_Str"").value(getName()).key(""String_Node_Str"").value(description).key(""String_Node_Str"").value(RestServices.getServiceUrl(getName())).key(""String_Node_Str"").value(JSONSchemaBuilder.build(Utils.getFirstArgumentType(microflowname))).key(""String_Node_Str"").value(isFileSource).key(""String_Node_Str"").value(isFileTarget ? RestServices.CONTENTTYPE_OCTET + ""String_Node_Str"" : JSONSchemaBuilder.build(Core.getReturnType(microflowname))).endObject();
  rsr.endDoc();
}","public void serveDescription(RestServiceRequest rsr){
  rsr.startDoc();
  if (rsr.getResponseContentType() == ResponseType.HTML)   rsr.write(""String_Node_Str"").write(getName()).write(""String_Node_Str"");
  rsr.datawriter.object().key(""String_Node_Str"").value(getName()).key(""String_Node_Str"").value(description).key(""String_Node_Str"").value(RestServices.getServiceUrl(getName())).key(""String_Node_Str"").value(hasArgument ? JSONSchemaBuilder.build(Utils.getFirstArgumentType(microflowname)) : null).key(""String_Node_Str"").value(isFileSource).key(""String_Node_Str"").value(isFileTarget ? RestServices.CONTENTTYPE_OCTET + ""String_Node_Str"" : JSONSchemaBuilder.build(Core.getReturnType(microflowname))).endObject();
  rsr.endDoc();
}",0.9853454291695743
35981,"public static Long getFileSize(IContext context,IMendixObject document){
  final int BUFFER_SIZE=4096;
  long size=0;
  if (context != null) {
    InputStream inputStream=null;
    byte[] buffer=new byte[BUFFER_SIZE];
    int bytesRead=0;
    try {
      inputStream=Core.getFileDocumentContent(context,document);
      while ((bytesRead=inputStream.read(buffer)) != BUFFER_SIZE) {
        size+=bytesRead;
      }
      size+=bytesRead;
    }
 catch (    IOException e) {
      Core.getLogger(""String_Node_Str"").error(""String_Node_Str"" + document.getId());
    }
 finally {
      IOUtils.closeQuietly(inputStream);
    }
  }
  return size;
}","public static Long getFileSize(IContext context,IMendixObject document){
  final int BUFFER_SIZE=4096;
  long size=0;
  if (context != null) {
    InputStream inputStream=null;
    byte[] buffer=new byte[BUFFER_SIZE];
    try {
      inputStream=Core.getFileDocumentContent(context,document);
      int i;
      while ((i=inputStream.read(buffer)) != -1)       size+=i;
    }
 catch (    IOException e) {
      Core.getLogger(""String_Node_Str"").error(""String_Node_Str"" + document.getId());
    }
 finally {
      IOUtils.closeQuietly(inputStream);
    }
  }
  return size;
}",0.8519736842105263
35982,"private boolean writeChanges(final RestServiceRequest rsr,IContext c,long since) throws CoreException {
  if (since < 0)   throw new IllegalArgumentException(""String_Node_Str"");
  final AtomicBoolean something=new AtomicBoolean(false);
  XPath.create(c,ObjectState.class).eq(ObjectState.MemberNames.ObjectState_ServiceObjectIndex,this.getServiceObjectIndex()).compare(ObjectState.MemberNames.revision,""String_Node_Str"",since).addSortingAsc(ObjectState.MemberNames.revision).batch(RestServices.BATCHSIZE,new IBatchProcessor<ObjectState>(){
    @Override public void onItem(    ObjectState item,    long offset,    long total) throws Exception {
      rsr.datawriter.value(writeObjectStateToJson(item));
      something.set(true);
    }
  }
);
  return something.get();
}","private ObjectState writeChanges(final RestServiceRequest rsr,IContext c,long since) throws CoreException {
  if (since < 0)   throw new IllegalArgumentException(""String_Node_Str"");
  final AtomicReference<ObjectState> lastWrittenRevision=new AtomicReference<ObjectState>();
  XPath.create(c,ObjectState.class).eq(ObjectState.MemberNames.ObjectState_ServiceObjectIndex,this.getServiceObjectIndex()).compare(ObjectState.MemberNames.revision,""String_Node_Str"",since).addSortingAsc(ObjectState.MemberNames.revision).batch(RestServices.BATCHSIZE,new IBatchProcessor<ObjectState>(){
    @Override public void onItem(    ObjectState item,    long offset,    long total) throws Exception {
      rsr.datawriter.value(writeObjectStateToJson(item));
      lastWrittenRevision.set(item);
    }
  }
);
  return lastWrittenRevision.get();
}",0.8478396994364433
35983,"/** 
 * @param rsr
 * @param since
 * @param maxDurationSeconds. Zero for never, positive for fixed timeout, negative for fixed timeout or first update that needs publishing 
 * @throws IOException
 * @throws CoreException
 */
private void serveChangesFeed(RestServiceRequest rsr,long since,long maxDurationSeconds) throws IOException, CoreException {
  if (!rsr.request.isAsyncSupported())   throw new IllegalStateException(""String_Node_Str"");
  if (since < -1)   throw new IllegalArgumentException(""String_Node_Str"");
  if (rsr.request.getAttribute(""String_Node_Str"") == null) {
    if (RestServices.LOGPUBLISH.isDebugEnabled())     RestServices.LOGPUBLISH.debug(""String_Node_Str"" + rsr.request.getPathInfo());
    rsr.response.getOutputStream().write(RestServices.END_OF_HTTPHEADER.getBytes(RestServices.UTF8));
    if (since != -1) {
      boolean wroteSomeChanges=writeChanges(rsr,Core.createSystemContext(),since);
      if (wroteSomeChanges && maxDurationSeconds < 0) {
        rsr.endDoc();
        return;
      }
    }
    rsr.response.flushBuffer();
    AsyncContext asyncContext=rsr.request.startAsync();
synchronized (this) {
      ChangeFeedSubscriber lpsession=new ChangeFeedSubscriber(asyncContext,maxDurationSeconds < 0,this);
      longPollSessions.add(lpsession);
      rsr.request.setAttribute(""String_Node_Str"",lpsession);
    }
    if (maxDurationSeconds != 0L)     asyncContext.setTimeout(Math.abs(maxDurationSeconds) * 1000);
  }
 else {
    ChangeFeedSubscriber lpsession=(ChangeFeedSubscriber)rsr.request.getAttribute(""String_Node_Str"");
    unregisterListener(lpsession);
  }
}","/** 
 * @param rsr
 * @param since
 * @param maxDurationSeconds. Zero for never, positive for fixed timeout, negative for fixed timeout or first update that needs publishing 
 * @throws IOException
 * @throws CoreException
 */
private void serveChangesFeed(RestServiceRequest rsr,long since,long maxDurationSeconds) throws IOException, CoreException {
  if (!rsr.request.isAsyncSupported())   throw new IllegalStateException(""String_Node_Str"");
  if (since < -1)   throw new IllegalArgumentException(""String_Node_Str"");
  if (rsr.request.getAttribute(""String_Node_Str"") == null) {
    if (RestServices.LOGPUBLISH.isDebugEnabled())     RestServices.LOGPUBLISH.debug(""String_Node_Str"" + rsr.request.getPathInfo());
    rsr.response.getOutputStream().write(RestServices.END_OF_HTTPHEADER.getBytes(RestServices.UTF8));
    ObjectState lastWrittenChange=null;
    if (since != -1) {
      lastWrittenChange=writeChanges(rsr,Core.createSystemContext(),since);
      if (lastWrittenChange != null && maxDurationSeconds < 0) {
        rsr.endDoc();
        return;
      }
    }
    rsr.response.flushBuffer();
    AsyncContext asyncContext=rsr.request.startAsync();
synchronized (this) {
      if (since != -1)       writeChanges(rsr,Core.createSystemContext(),lastWrittenChange == null ? 0 : lastWrittenChange.getrevision());
      ChangeFeedSubscriber lpsession=new ChangeFeedSubscriber(asyncContext,maxDurationSeconds < 0,this);
      longPollSessions.add(lpsession);
      rsr.request.setAttribute(""String_Node_Str"",lpsession);
    }
    if (maxDurationSeconds != 0L)     asyncContext.setTimeout(Math.abs(maxDurationSeconds) * 1000);
  }
 else {
    ChangeFeedSubscriber lpsession=(ChangeFeedSubscriber)rsr.request.getAttribute(""String_Node_Str"");
    unregisterListener(lpsession);
  }
}",0.9229861316022424
35984,"@Override public IMendixObject executeAction() throws Exception {
  return RestConsumer.deleteObject(getContext(),resourceUrl,optEtag).getMendixObject();
}","@Override public IMendixObject executeAction() throws Exception {
  return RestConsumer.deleteObject(getContext(),resourceUrl,null).getMendixObject();
}",0.9641693811074918
35985,"public delete(String resourceUrl,String optEtag){
  super();
  this.resourceUrl=resourceUrl;
  this.optEtag=optEtag;
}","public delete(String resourceUrl){
  super();
  this.resourceUrl=resourceUrl;
}",0.8020304568527918
35986,"public get(String url,IMendixObject stub,String optEtag){
  super();
  this.url=url;
  this.stub=stub;
  this.optEtag=optEtag;
}","public get(String url,IMendixObject stub){
  super();
  this.url=url;
  this.stub=stub;
}",0.8202764976958525
35987,"@Override public IMendixObject executeAction() throws Exception {
  return RestConsumer.getObject(getContext(),url,optEtag,stub).getMendixObject();
}","@Override public IMendixObject executeAction() throws Exception {
  return RestConsumer.getObject(getContext(),url,null,stub).getMendixObject();
}",0.9627118644067796
35988,"@Override public IMendixObject executeAction() throws Exception {
  return RestConsumer.putObject(getContext(),url,dataObject,optEtag).getMendixObject();
}","@Override public IMendixObject executeAction() throws Exception {
  return RestConsumer.putObject(getContext(),url,dataObject,null).getMendixObject();
}",0.9641693811074918
35989,"public put(String url,IMendixObject dataObject,String optEtag){
  super();
  this.url=url;
  this.dataObject=dataObject;
  this.optEtag=optEtag;
}","public put(String url,IMendixObject dataObject){
  super();
  this.url=url;
  this.dataObject=dataObject;
}",0.8458498023715415
35990,"private void processUpdate(String key,String jsonString,String eTag,boolean deleted) throws Exception {
  IContext context=Core.createSystemContext();
  ServiceObjectIndex sState=getServiceObjectIndex();
  ObjectState objectState=XPath.create(context,ObjectState.class).eq(ObjectState.MemberNames.key,key).eq(ObjectState.MemberNames.ObjectState_ServiceObjectIndex,sState).first();
  if (objectState == null) {
    if (deleted)     return;
    objectState=new ObjectState(context);
    objectState.setkey(key);
    objectState.setObjectState_ServiceObjectIndex(sState);
    storeUpdate(objectState,eTag,jsonString,deleted);
  }
 else   if (objectState.getetag().equals(eTag) && objectState.getdeleted() != deleted)   return;
 else   storeUpdate(objectState,eTag,jsonString,deleted);
}","private void processUpdate(String key,String jsonString,String eTag,boolean deleted) throws Exception {
  IContext context=Core.createSystemContext();
  ServiceObjectIndex sState=getServiceObjectIndex();
  ObjectState objectState=XPath.create(context,ObjectState.class).eq(ObjectState.MemberNames.key,key).eq(ObjectState.MemberNames.ObjectState_ServiceObjectIndex,sState).first();
  if (objectState == null) {
    if (deleted)     return;
    objectState=new ObjectState(context);
    objectState.setkey(key);
    objectState.setObjectState_ServiceObjectIndex(sState);
    storeUpdate(objectState,eTag,jsonString,deleted);
  }
 else   if (deleted && objectState.getdeleted())   return;
 else   if (!deleted && !objectState.getdeleted() && eTag != null && eTag.equals(objectState.getetag()))   return;
 else   storeUpdate(objectState,eTag,jsonString,deleted);
}",0.8740109555690809
35991,"public boolean identifierInConstraint(IContext c,IMendixIdentifier id) throws CoreException {
  if (this.getConstraint(c).isEmpty())   return true;
  return Core.retrieveXPathQueryAggregate(c,""String_Node_Str"" + getSourceEntity() + ""String_Node_Str""+ id.toLong()+ ""String_Node_Str""+ this.getConstraint(c)) == 1;
}","public boolean identifierInConstraint(IContext c,IMendixIdentifier id) throws CoreException {
  if (this.getConstraint(c).isEmpty())   return true;
  return Core.retrieveXPathQueryAggregate(c,""String_Node_Str"" + getSourceEntity() + ""String_Node_Str""+ id.toLong()+ ""String_Node_Str""+ this.getConstraint(c)+ ""String_Node_Str"") == 1;
}",0.9705426356589149
35992,"@Test public void simpleGet() throws Exception {
  IContext c=Core.createSystemContext();
  Task t=createTask(c,""String_Node_Str"",false);
  publishTask(c,t,false);
  IContext c2=Core.createSystemContext();
  CTaskView v;
  v=getTask(c2,t.getNr().toString(),null,ResponseCode.OK,200);
  Assert.assertEquals(""String_Node_Str"",v.getDescription());
  Assert.assertEquals(t.getNr(),v.getNr());
  Assert.assertEquals(false,v.getCompleted());
  Assert.assertTrue(lastRequestResult.getResponseBody().contains(""String_Node_Str""));
  v=getTask(c2,t.getNr().toString(),""String_Node_Str"",ResponseCode.OK,200);
  Assert.assertEquals(""String_Node_Str"",v.getDescription());
  Assert.assertEquals(t.getNr(),v.getNr());
  Assert.assertEquals(false,v.getCompleted());
  Assert.assertTrue(lastRequestResult.getResponseBody().contains(""String_Node_Str""));
  v=getTask(c2,t.getNr().toString(),v.getETag(),ResponseCode.NotModified,304);
  Assert.assertEquals(null,v.getDescription());
  Assert.assertEquals(0L,(long)v.getNr());
  Assert.assertEquals(false,v.getCompleted());
  v=getTask(c2,t.getNr().toString(),""String_Node_Str"",ResponseCode.OK,200);
  Assert.assertEquals(""String_Node_Str"",v.getDescription());
  Assert.assertEquals(t.getNr(),v.getNr());
  Assert.assertEquals(false,v.getCompleted());
  try {
    v=getTask(c2,""String_Node_Str"",v.getETag(),ResponseCode.NotModified,304);
    Assert.fail();
  }
 catch (  RestConsumeException e) {
    Assert.assertEquals(404L,e.getStatus());
  }
  try {
    v=getTask(c2,""String_Node_Str"",null,ResponseCode.OK,200);
    Assert.fail();
  }
 catch (  RestConsumeException e) {
    Assert.assertEquals(404L,e.getStatus());
  }
  RequestResult xmlresult=RestConsumer.getObject(c,baseUrl + t.getNr().toString() + ""String_Node_Str"",null,null);
  Assert.assertEquals(200L,(long)(int)xmlresult.getRawResponseCode());
  Assert.assertTrue(xmlresult.getResponseBody().startsWith(""String_Node_Str""));
  Assert.assertTrue(xmlresult.getResponseBody().contains(""String_Node_Str""));
  def.setEnableGet(false);
  def.setEnableListing(false);
  def.commit();
  try {
    v=getTask(c2,v.getNr().toString(),null,ResponseCode.OK,200);
    Assert.fail();
  }
 catch (  RestConsumeException e) {
    Assert.assertEquals(405L,e.getStatus());
  }
  def.setEnableGet(true);
  def.setEnableListing(true);
  def.setSourceConstraint(""String_Node_Str"" + Task.MemberNames.Completed.toString() + ""String_Node_Str"");
  def.commit();
  v=getTask(c2,t.getNr().toString(),null,ResponseCode.OK,200);
  Assert.assertEquals(""String_Node_Str"",v.getDescription());
  Assert.assertEquals(t.getNr(),v.getNr());
  Assert.assertEquals(false,v.getCompleted());
  t.setCompleted(true);
  publishTask(c,t,false);
  try {
    v=getTask(c2,t.getNr().toString(),null,ResponseCode.OK,200);
    Assert.fail();
  }
 catch (  RestConsumeException e) {
    Assert.assertEquals(404L,e.getStatus());
  }
  t.setCompleted(false);
  publishTask(c2,t,false);
  def.setAccessRole(""String_Node_Str"");
  def.setSourceConstraint(""String_Node_Str"");
  def.commit();
  try {
    v=getTask(c2,v.getNr().toString(),null,ResponseCode.OK,200);
    Assert.fail();
  }
 catch (  RestConsumeException e) {
    Assert.assertEquals(401L,e.getStatus());
  }
  RestConsumer.addCredentialsToNextRequest(getTestUser(),""String_Node_Str"");
  v=getTask(c2,t.getNr().toString(),null,ResponseCode.OK,200);
  Assert.assertEquals(""String_Node_Str"",v.getDescription());
  Assert.assertEquals(t.getNr(),v.getNr());
  Assert.assertEquals(false,v.getCompleted());
  Assert.assertTrue(lastRequestResult.getResponseBody().contains(""String_Node_Str""));
  def.setSourceConstraint(""String_Node_Str"" + Task.MemberNames.Completed.toString() + ""String_Node_Str"");
  def.commit();
  RestConsumer.addCredentialsToNextRequest(getTestUser(),""String_Node_Str"");
  v=getTask(c2,t.getNr().toString(),null,ResponseCode.OK,200);
  try {
    v=getTask(c2,t.getNr().toString(),null,ResponseCode.OK,200);
    Assert.fail();
  }
 catch (  RestConsumeException e) {
    Assert.assertEquals(401L,e.getStatus());
  }
  def.setAccessRole(""String_Node_Str"");
  def.commit();
  t.delete();
  publishTask(c,t,true);
}","@Test public void simpleGet() throws Exception {
  IContext c=Core.createSystemContext();
  Task t=createTask(c,""String_Node_Str"",false);
  publishTask(c,t,false);
  IContext c2=Core.createSystemContext();
  CTaskView v;
  v=getTask(c2,t.getNr().toString(),null,ResponseCode.OK,200);
  Assert.assertEquals(""String_Node_Str"",v.getDescription());
  Assert.assertEquals(t.getNr(),v.getNr());
  Assert.assertEquals(false,v.getCompleted());
  Assert.assertTrue(lastRequestResult.getResponseBody().contains(""String_Node_Str""));
  v=getTask(c2,t.getNr().toString(),""String_Node_Str"",ResponseCode.OK,200);
  Assert.assertEquals(""String_Node_Str"",v.getDescription());
  Assert.assertEquals(t.getNr(),v.getNr());
  Assert.assertEquals(false,v.getCompleted());
  Assert.assertTrue(lastRequestResult.getResponseBody().contains(""String_Node_Str""));
  v=getTask(c2,t.getNr().toString(),v.getETag(),ResponseCode.NotModified,304);
  Assert.assertEquals(null,v.getDescription());
  Assert.assertEquals(0L,(long)v.getNr());
  Assert.assertEquals(false,v.getCompleted());
  v=getTask(c2,t.getNr().toString(),""String_Node_Str"",ResponseCode.OK,200);
  Assert.assertEquals(""String_Node_Str"",v.getDescription());
  Assert.assertEquals(t.getNr(),v.getNr());
  Assert.assertEquals(false,v.getCompleted());
  try {
    v=getTask(c2,""String_Node_Str"",v.getETag(),ResponseCode.NotModified,304);
    Assert.fail();
  }
 catch (  RestConsumeException e) {
    Assert.assertEquals(404L,e.getStatus());
  }
  try {
    v=getTask(c2,""String_Node_Str"",null,ResponseCode.OK,200);
    Assert.fail();
  }
 catch (  RestConsumeException e) {
    Assert.assertEquals(404L,e.getStatus());
  }
  RequestResult xmlresult=RestConsumer.getObject(c,baseUrl + t.getNr().toString() + ""String_Node_Str"",null,null);
  Assert.assertEquals(200L,(long)(int)xmlresult.getRawResponseCode());
  Assert.assertTrue(xmlresult.getResponseBody().startsWith(""String_Node_Str""));
  Assert.assertTrue(xmlresult.getResponseBody().contains(""String_Node_Str""));
  def.setEnableGet(false);
  def.setEnableListing(false);
  def.commit();
  try {
    v=getTask(c2,v.getNr().toString(),null,ResponseCode.OK,200);
    Assert.fail();
  }
 catch (  RestConsumeException e) {
    Assert.assertEquals(405L,e.getStatus());
  }
  def.setEnableGet(true);
  def.setEnableListing(true);
  def.setSourceConstraint(""String_Node_Str"" + Task.MemberNames.Completed.toString() + ""String_Node_Str"");
  def.commit();
  v=getTask(c2,t.getNr().toString(),null,ResponseCode.OK,200);
  Assert.assertEquals(""String_Node_Str"",v.getDescription());
  Assert.assertEquals(t.getNr(),v.getNr());
  Assert.assertEquals(false,v.getCompleted());
  t.setCompleted(true);
  publishTask(c,t,false);
  try {
    v=getTask(c2,t.getNr().toString(),null,ResponseCode.OK,200);
    Assert.fail();
  }
 catch (  RestConsumeException e) {
    Assert.assertEquals(404L,e.getStatus());
  }
  t.setCompleted(false);
  publishTask(c2,t,false);
  def.setAccessRole(""String_Node_Str"");
  def.setSourceConstraint(""String_Node_Str"");
  def.commit();
  try {
    v=getTask(c2,v.getNr().toString(),null,ResponseCode.OK,200);
    Assert.fail();
  }
 catch (  RestConsumeException e) {
    Assert.assertEquals(401L,e.getStatus());
  }
  RestConsumer.addCredentialsToNextRequest(getTestUser(),""String_Node_Str"");
  v=getTask(c2,t.getNr().toString(),null,ResponseCode.OK,200);
  Assert.assertEquals(""String_Node_Str"",v.getDescription());
  Assert.assertEquals(t.getNr(),v.getNr());
  Assert.assertEquals(false,v.getCompleted());
  Assert.assertTrue(lastRequestResult.getResponseBody().contains(""String_Node_Str""));
  def.setSourceConstraint(""String_Node_Str"" + Task.MemberNames.Completed.toString() + ""String_Node_Str"");
  def.commit();
  RestConsumer.addCredentialsToNextRequest(getTestUser(),""String_Node_Str"");
  v=getTask(c2,t.getNr().toString(),null,ResponseCode.OK,200);
  try {
    v=getTask(c2,t.getNr().toString(),null,ResponseCode.OK,200);
    Assert.fail();
  }
 catch (  RestConsumeException e) {
    Assert.assertEquals(401L,e.getStatus());
  }
  def.setAccessRole(""String_Node_Str"");
  def.commit();
  t.delete();
  publishTask(c,t,true);
  try {
    v=getTask(c2,t.getNr().toString(),null,ResponseCode.OK,200);
    Assert.fail();
  }
 catch (  RestConsumeException e) {
    Assert.assertEquals(404L,e.getStatus());
  }
}",0.9785417901600474
35993,"private void publishTask(IContext c,Task t,boolean delete) throws CoreException {
  if (delete) {
    ChangeManager.publishDelete(c,t.getMendixObject());
    t.delete();
  }
 else {
    ChangeManager.publishUpdate(c,t.getMendixObject());
    t.commit();
  }
}","private void publishTask(IContext c,Task t,boolean delete) throws CoreException {
  if (delete) {
    t.delete();
    ChangeManager.publishDelete(c,t.getMendixObject());
  }
 else {
    t.commit();
    ChangeManager.publishUpdate(c,t.getMendixObject());
  }
}",0.722007722007722
35994,"/** 
 * Retreives a url. Returns if statuscode is 200 OK, 304 NOT MODIFIED or 404 NOT FOUND. Exception otherwise. 
 */
public static HttpResponseData doRequest(String method,String url,String etag,String body) throws Exception {
  if (RestServices.LOG.isDebugEnabled())   RestServices.LOG.debug(""String_Node_Str"" + url + ""String_Node_Str""+ etag+ ""String_Node_Str"");
  HttpMethodBase request;
  if (""String_Node_Str"".equals(method))   request=new GetMethod(url);
 else   if (""String_Node_Str"".equals(method))   request=new DeleteMethod(url);
 else   if (""String_Node_Str"".equals(method)) {
    request=new PostMethod(url);
    ((PostMethod)request).setRequestEntity(new StringRequestEntity(body,RestServices.TEXTJSON,RestServices.UTF8));
  }
 else   if (""String_Node_Str"".equals(method)) {
    request=new PutMethod(url);
    ((PutMethod)request).setRequestEntity(new StringRequestEntity(body,RestServices.TEXTJSON,RestServices.UTF8));
  }
 else   throw new IllegalStateException(""String_Node_Str"" + method);
  request.setRequestHeader(RestServices.ACCEPT_HEADER,RestServices.TEXTJSON);
  if (etag != null && !etag.isEmpty())   request.setRequestHeader(RestServices.IFNONEMATCH_HEADER,etag);
  try {
    int status=client.executeMethod(request);
    HttpResponseData response=new HttpResponseData(method,url,status,request.getResponseBodyAsString(),request.getResponseHeader(RestServices.ETAG_HEADER).getValue());
    RestServices.LOG.info(response);
    return response;
  }
  finally {
    request.releaseConnection();
  }
}","/** 
 * Retreives a url. Returns if statuscode is 200 OK, 304 NOT MODIFIED or 404 NOT FOUND. Exception otherwise. 
 */
public static HttpResponseData doRequest(String method,String url,String etag,String body) throws Exception {
  if (RestServices.LOG.isDebugEnabled())   RestServices.LOG.debug(""String_Node_Str"" + url + ""String_Node_Str""+ etag+ ""String_Node_Str"");
  HttpMethodBase request;
  if (""String_Node_Str"".equals(method))   request=new GetMethod(url);
 else   if (""String_Node_Str"".equals(method))   request=new DeleteMethod(url);
 else   if (""String_Node_Str"".equals(method)) {
    request=new PostMethod(url);
    ((PostMethod)request).setRequestEntity(new StringRequestEntity(body,RestServices.TEXTJSON,RestServices.UTF8));
  }
 else   if (""String_Node_Str"".equals(method)) {
    request=new PutMethod(url);
    ((PutMethod)request).setRequestEntity(new StringRequestEntity(body,RestServices.TEXTJSON,RestServices.UTF8));
  }
 else   throw new IllegalStateException(""String_Node_Str"" + method);
  request.setRequestHeader(RestServices.ACCEPT_HEADER,RestServices.TEXTJSON);
  if (etag != null && !etag.isEmpty())   request.setRequestHeader(RestServices.IFNONEMATCH_HEADER,etag);
  try {
    int status=client.executeMethod(request);
    Header responseEtag=request.getResponseHeader(RestServices.ETAG_HEADER);
    HttpResponseData response=new HttpResponseData(method,url,status,request.getResponseBodyAsString(),responseEtag == null ? null : responseEtag.getValue());
    RestServices.LOG.info(response);
    return response;
  }
  finally {
    request.releaseConnection();
  }
}",0.9159717767799872
35995,"public static void readJsonObjectStream(String url,Predicate<Object> onObject) throws Exception, IOException {
  GetMethod request=new GetMethod(url);
  request.setRequestHeader(RestServices.ACCEPT_HEADER,RestServices.TEXTJSON);
  try {
    int status=client.executeMethod(request);
    if (status != 200)     throw new IllegalStateException(""String_Node_Str"" + status + ""String_Node_Str""+ url);
    JSONTokener x=new JSONTokener(request.getResponseBodyAsStream());
    if (x.nextClean() != '[')     throw x.syntaxError(""String_Node_Str"");
    for (; ; ) {
switch (x.nextClean()) {
case ',':
        continue;
case ']':
      return;
default :
    onObject.apply(x.nextValue());
}
}
}
  finally {
request.releaseConnection();
}
}","public static void readJsonObjectStream(String url,Predicate<Object> onObject) throws Exception, IOException {
  GetMethod request=new GetMethod(url);
  request.setRequestHeader(RestServices.ACCEPT_HEADER,RestServices.TEXTJSON);
  try {
    int status=client.executeMethod(request);
    if (status != 200)     throw new IllegalStateException(""String_Node_Str"" + status + ""String_Node_Str""+ url);
    JSONTokener x=new JSONTokener(request.getResponseBodyAsStream());
    if (x.nextClean() != '[')     throw x.syntaxError(""String_Node_Str"");
    for (; ; ) {
switch (x.nextClean()) {
case ',':
        continue;
case ']':
      return;
case '{':
    x.back();
  onObject.apply(new JSONObject(x));
break;
case '[':
throw new RuntimeException(""String_Node_Str"");
default :
onObject.apply(x.nextValue());
}
}
}
  finally {
request.releaseConnection();
}
}",0.9132362254591514
35996,"private ChangeFeedListener(String collectionUrl,String onUpdateMF,String onDeleteMF) throws Exception {
  this.url=collectionUrl;
  this.onUpdateMF=onUpdateMF;
  this.onDeleteMF=onDeleteMF;
  if (activeListeners.containsKey(url))   throw new IllegalStateException(""String_Node_Str"" + url);
  activeListeners.put(url,this);
  this.state=XPath.create(Core.createSystemContext(),CollectionFollowState.class).findOrCreate(CollectionFollowState.MemberNames.CollectionUrl,url);
  restartConnection();
}","private ChangeFeedListener(String collectionUrl,String onUpdateMF,String onDeleteMF) throws Exception {
  this.url=collectionUrl;
  this.onUpdateMF=onUpdateMF;
  this.onDeleteMF=onDeleteMF;
  if (activeListeners.containsKey(url))   throw new IllegalStateException(""String_Node_Str"" + url);
  activeListeners.put(url,this);
  this.state=XPath.create(Core.createSystemContext(),FollowChangesState.class).findOrCreate(FollowChangesState.MemberNames.CollectionUrl,url);
  restartConnection();
}",0.9655172413793104
35997,"@Override public Boolean executeAction() throws Exception {
  XPath.create(Core.createSystemContext(),CollectionFollowState.class).eq(CollectionFollowState.MemberNames.CollectionUrl).deleteAll();
  return true;
}","@Override public Boolean executeAction() throws Exception {
  XPath.create(Core.createSystemContext(),FollowChangesState.class).eq(FollowChangesState.MemberNames.CollectionUrl).deleteAll();
  return true;
}",0.9186602870813396
35998,"@Override public Boolean executeAction() throws Exception {
  throw new com.mendix.systemwideinterfaces.MendixRuntimeException(""String_Node_Str"");
}","@Override public Boolean executeAction() throws Exception {
  ChangeFeedListener.unfollow(collectionUrl);
  return true;
}",0.6518518518518519
35999,"public String toString(){
  return name.get(""String_Node_Str"");
}","public String toString(){
  if (name != null)   return name.get(""String_Node_Str"");
  return ""String_Node_Str"";
}",0.7303370786516854
36000,"protected void init(URL uri,String user,String password){
  this._host=uri;
  this.username=user;
  this.password=password;
  final char[] pwd=password.toCharArray();
  Authenticator.setDefault(new Authenticator(){
    protected PasswordAuthentication getPasswordAuthentication(){
      return new PasswordAuthentication(username,pwd);
    }
  }
);
}","protected void init(URL uri,String user,String password){
  this._host=uri;
  this.username=user;
  this.password=password;
  this.authString=""String_Node_Str"" + DatatypeConverter.printBase64Binary((this.username + ""String_Node_Str"" + this.password).getBytes());
}",0.4495114006514658
