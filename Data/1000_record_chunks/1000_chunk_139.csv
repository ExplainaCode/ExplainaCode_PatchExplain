record_number,buggy_code,fixed_code,code_similarity
138001,"/** 
 * <!-- begin-user-doc --> <!-- end-user-doc -->
 * @generated
 */
@Override protected EClass eStaticClass(){
  return PropertiesPackage.Literals.TDQ_SOURCE_FILE_ITEM;
}","/** 
 * <!-- begin-user-doc --> <!-- end-user-doc -->
 * @generated
 */
@Override protected EClass eStaticClass(){
  return org.talend.dataquality.properties.PropertiesPackage.Literals.TDQ_SOURCE_FILE_ITEM;
}",0.9109947643979056
138002,"public static TypedReturnCode<Connection> getRefreshedDataProvider(Connection prevDataProvider){
  TypedReturnCode<Connection> returnProvider=new TypedReturnCode<Connection>();
  boolean mdm=ConnectionUtils.isMdmConnection(prevDataProvider);
  IMetadataConnection metadataConnection=ConvertionHelper.convert(prevDataProvider);
  Connection conn=null;
  if (mdm) {
    conn=MetadataFillFactory.getMDMInstance().fillUIConnParams(metadataConnection,null);
    MetadataFillFactory.getMDMInstance().fillSchemas(conn,null,null);
  }
 else {
    TypedReturnCode<?> trc=(TypedReturnCode<?>)MetadataFillFactory.getDBInstance().checkConnection(metadataConnection);
    Object sqlConnObject=trc.getObject();
    DatabaseMetaData dbJDBCMetadata=null;
    if (trc.isOk() && sqlConnObject instanceof java.sql.Connection) {
      java.sql.Connection sqlConn=(java.sql.Connection)sqlConnObject;
      try {
        dbJDBCMetadata=ExtractMetaDataUtils.getConnectionMetadata(sqlConn);
      }
 catch (      SQLException e) {
        log.error(e,e);
      }
    }
    conn=MetadataFillFactory.getDBInstance().fillUIConnParams(metadataConnection,null);
    MetadataFillFactory.getDBInstance().fillCatalogs(conn,dbJDBCMetadata,null);
    MetadataFillFactory.getDBInstance().fillSchemas(conn,dbJDBCMetadata,null);
  }
  if (conn == null) {
    returnProvider.setOk(false);
  }
 else {
    returnProvider.setObject(conn);
  }
  return returnProvider;
}","public static TypedReturnCode<Connection> getRefreshedDataProvider(Connection prevDataProvider){
  TypedReturnCode<Connection> returnProvider=new TypedReturnCode<Connection>();
  boolean mdm=ConnectionUtils.isMdmConnection(prevDataProvider);
  List<String> packageFilter=null;
  IMetadataConnection metadataConnection=ConvertionHelper.convert(prevDataProvider);
  Connection conn=null;
  if (mdm) {
    conn=MetadataFillFactory.getMDMInstance().fillUIConnParams(metadataConnection,null);
    MetadataFillFactory.getMDMInstance().fillSchemas(conn,null,null);
  }
 else {
    TypedReturnCode<?> trc=(TypedReturnCode<?>)MetadataFillFactory.getDBInstance().checkConnection(metadataConnection);
    Object sqlConnObject=trc.getObject();
    DatabaseMetaData dbJDBCMetadata=null;
    if (trc.isOk() && sqlConnObject instanceof java.sql.Connection) {
      java.sql.Connection sqlConn=(java.sql.Connection)sqlConnObject;
      try {
        dbJDBCMetadata=ExtractMetaDataUtils.getConnectionMetadata(sqlConn);
        packageFilter=MetadataConnectionUtils.getPackageFilter(prevDataProvider,dbJDBCMetadata,true);
      }
 catch (      SQLException e) {
        log.error(e,e);
      }
    }
    conn=MetadataFillFactory.getDBInstance().fillUIConnParams(metadataConnection,null);
    MetadataFillFactory.getDBInstance().fillCatalogs(conn,dbJDBCMetadata,packageFilter);
    MetadataFillFactory.getDBInstance().fillSchemas(conn,dbJDBCMetadata,packageFilter);
  }
  if (conn == null) {
    returnProvider.setOk(false);
  }
 else {
    returnProvider.setObject(conn);
  }
  return returnProvider;
}",0.943245934284766
138003,"/** 
 * Test method for   {@link org.talend.dq.helper.DQDeleteHelper#deleteRelations(org.talend.core.model.properties.Item)}.
 */
@Test public void testDeleteRelations(){
  TDQReportItem item=mock(TDQReportItem.class);
  IFile file=mock(IFile.class);
  when(file.exists()).thenReturn(false);
  IFolder folder=mock(IFolder.class);
  when(folder.exists()).thenReturn(true);
  Property prop=mock(Property.class);
  when(item.getProperty()).thenReturn(prop);
  PowerMockito.mockStatic(PropertyHelper.class);
  when(PropertyHelper.getItemFile(prop)).thenReturn(file);
  PowerMockito.mockStatic(ReportHelper.class);
  when(ReportHelper.getOutputFolder(file)).thenReturn(folder);
  DQDeleteHelper.deleteRelations(item);
}","/** 
 * Test method for  {@link org.talend.dq.helper.DQDeleteHelper#deleteRelations(org.talend.core.model.properties.Item)}.
 */
@Test public void testDeleteRelations(){
  TDQReportItem item=mock(TDQReportItem.class);
  IFile file=mock(IFile.class);
  when(file.exists()).thenReturn(false);
  IFolder folder=mock(IFolder.class);
  when(folder.exists()).thenReturn(true);
  Property prop=mock(Property.class);
  when(item.getProperty()).thenReturn(prop);
  PowerMockito.mockStatic(PropertyHelper.class);
  when(PropertyHelper.getItemFile(prop)).thenReturn(file);
  PowerMockito.mockStatic(ReportHelper.class);
  when(ReportUtils.getOutputFolder(file)).thenReturn(folder);
  DQDeleteHelper.deleteRelations(item);
}",0.9915848527349228
138004,"protected IPath getItemFullPath(TDQSourceFileItem item){
  String statePathStr=null;
  if (item.getState() != null) {
    statePathStr=item.getState().getPath();
    if (!statePathStr.equals(""String_Node_Str"")) {
      org.eclipse.core.runtime.IPath path=new Path(statePathStr);
      IPath typedPath=ResourceManager.getSourceFileFolder().getLocation();
      if (path.matchingFirstSegments(typedPath) > -1) {
        statePathStr=path.removeFirstSegments(2).toString();
      }
 else {
        statePathStr=""String_Node_Str"" + statePathStr;
      }
    }
  }
  String fileName=item.getName() + ""String_Node_Str"" + item.getProperty().getVersion()+ ""String_Node_Str""+ item.getExtension();
  IPath typedPath=ResourceManager.getSourceFileFolder().getLocation();
  IPath fullpath=typedPath.append(statePathStr + ""String_Node_Str"" + fileName);
  return fullpath;
}","protected IPath getItemFullPath(TDQSourceFileItem item){
  String statePathStr=null;
  if (item.getState() != null) {
    statePathStr=item.getState().getPath();
    if (!statePathStr.equals(""String_Node_Str"")) {
      statePathStr=""String_Node_Str"" + statePathStr;
    }
  }
  String fileName=item.getName() + ""String_Node_Str"" + item.getProperty().getVersion()+ ""String_Node_Str""+ item.getExtension();
  IPath typedPath=ResourceManager.getSourceFileFolder().getLocation();
  IPath fullpath=typedPath.append(statePathStr + ""String_Node_Str"" + fileName);
  return fullpath;
}",0.7377963737796374
138005,"public static TypedReturnCode<Connection> getRefreshedDataProvider(Connection prevDataProvider){
  TypedReturnCode<Connection> returnProvider=new TypedReturnCode<Connection>();
  boolean mdm=ConnectionUtils.isMdmConnection(prevDataProvider);
  IMetadataConnection metadataConnection=ConvertionHelper.convert(prevDataProvider);
  Connection conn=null;
  if (mdm) {
    conn=MetadataFillFactory.getMDMInstance().fillUIConnParams(metadataConnection,null);
    MetadataFillFactory.getMDMInstance().fillSchemas(conn,null,null);
  }
 else {
    TypedReturnCode<?> trc=(TypedReturnCode<?>)MetadataFillFactory.getDBInstance().checkConnection(metadataConnection);
    Object sqlConnObject=trc.getObject();
    DatabaseMetaData dbJDBCMetadata=null;
    if (trc.isOk() && sqlConnObject instanceof java.sql.Connection) {
      java.sql.Connection sqlConn=(java.sql.Connection)sqlConnObject;
      try {
        dbJDBCMetadata=ExtractMetaDataUtils.getConnectionMetadata(sqlConn);
      }
 catch (      SQLException e) {
        log.error(e,e);
      }
    }
    conn=MetadataFillFactory.getDBInstance().fillUIConnParams(metadataConnection,null);
    MetadataFillFactory.getDBInstance().fillCatalogs(conn,dbJDBCMetadata,null);
    MetadataFillFactory.getDBInstance().fillSchemas(conn,dbJDBCMetadata,null);
  }
  if (conn == null) {
    returnProvider.setOk(false);
  }
 else {
    returnProvider.setObject(conn);
  }
  return returnProvider;
}","public static TypedReturnCode<Connection> getRefreshedDataProvider(Connection prevDataProvider){
  TypedReturnCode<Connection> returnProvider=new TypedReturnCode<Connection>();
  boolean mdm=ConnectionUtils.isMdmConnection(prevDataProvider);
  List<String> packageFilter=null;
  IMetadataConnection metadataConnection=ConvertionHelper.convert(prevDataProvider);
  Connection conn=null;
  if (mdm) {
    conn=MetadataFillFactory.getMDMInstance().fillUIConnParams(metadataConnection,null);
    MetadataFillFactory.getMDMInstance().fillSchemas(conn,null,null);
  }
 else {
    TypedReturnCode<?> trc=(TypedReturnCode<?>)MetadataFillFactory.getDBInstance().checkConnection(metadataConnection);
    Object sqlConnObject=trc.getObject();
    DatabaseMetaData dbJDBCMetadata=null;
    if (trc.isOk() && sqlConnObject instanceof java.sql.Connection) {
      java.sql.Connection sqlConn=(java.sql.Connection)sqlConnObject;
      try {
        dbJDBCMetadata=ExtractMetaDataUtils.getConnectionMetadata(sqlConn);
        packageFilter=MetadataConnectionUtils.getPackageFilter(prevDataProvider,dbJDBCMetadata,true);
      }
 catch (      SQLException e) {
        log.error(e,e);
      }
    }
    conn=MetadataFillFactory.getDBInstance().fillUIConnParams(metadataConnection,null);
    MetadataFillFactory.getDBInstance().fillCatalogs(conn,dbJDBCMetadata,packageFilter);
    MetadataFillFactory.getDBInstance().fillSchemas(conn,dbJDBCMetadata,packageFilter);
  }
  if (conn == null) {
    returnProvider.setOk(false);
  }
 else {
    returnProvider.setObject(conn);
  }
  return returnProvider;
}",0.943245934284766
138006,"protected IPath getItemFullPath(TDQSourceFileItem item){
  String statePathStr=null;
  if (item.getState() != null) {
    statePathStr=item.getState().getPath();
    if (!statePathStr.equals(""String_Node_Str"")) {
      statePathStr=""String_Node_Str"" + statePathStr;
    }
  }
  String fileName=item.getName() + ""String_Node_Str"" + item.getProperty().getVersion()+ ""String_Node_Str""+ item.getExtension();
  IPath typedPath=ResourceManager.getSourceFileFolder().getLocation();
  IPath fullpath=typedPath.append(statePathStr + ""String_Node_Str"" + fileName);
  return fullpath;
}","protected IPath getItemFullPath(TDQSourceFileItem item){
  String statePathStr=null;
  if (item.getState() != null) {
    statePathStr=item.getState().getPath();
    if (!statePathStr.equals(""String_Node_Str"")) {
      org.eclipse.core.runtime.IPath path=new Path(statePathStr);
      IPath typedPath=ResourceManager.getSourceFileFolder().getLocation();
      if (path.matchingFirstSegments(typedPath) > -1) {
        statePathStr=path.removeFirstSegments(2).toString();
      }
 else {
        statePathStr=""String_Node_Str"" + statePathStr;
      }
    }
  }
  String fileName=item.getName() + ""String_Node_Str"" + item.getProperty().getVersion()+ ""String_Node_Str""+ item.getExtension();
  IPath typedPath=ResourceManager.getSourceFileFolder().getLocation();
  IPath fullpath=typedPath.append(statePathStr + ""String_Node_Str"" + fileName);
  return fullpath;
}",0.8019525801952581
138007,"@Override protected void doRun(){
  if (this.node instanceof JrxmlTempSubFolderNode) {
    MessageUI.openWarning(DefaultMessagesImpl.getString(""String_Node_Str""));
    return;
  }
  InputDialog dialog=new InputDialog(Display.getDefault().getActiveShell(),DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str""),null,new IInputValidator(){
    public String isValid(    String newText){
      return null;
    }
  }
);
  if (dialog.open() == InputDialog.OK) {
    String value2=dialog.getValue();
    try {
      List<IRepositoryNode> openRepNodes=getOpenRepNodeForReName(node,true);
      RepNodeUtils.closeModelElementEditor(openRepNodes,true);
      IPath path=WorkbenchUtils.getPath(node);
      ProxyRepositoryFactory.getInstance().renameFolder(node.getObjectType(),path,value2);
      if (node != null && node.getParent() != null) {
        CorePlugin.getDefault().refreshDQView(node.getParent());
      }
    }
 catch (    PersistenceException e) {
      log.error(e.getMessage());
      MessageDialog.openError(PlatformUI.getWorkbench().getDisplay().getActiveShell(),DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str""));
    }
  }
}","@Override protected void doRun(){
  if (this.node instanceof JrxmlTempSubFolderNode) {
    MessageUI.openWarning(DefaultMessagesImpl.getString(""String_Node_Str""));
    return;
  }
  if (this.node instanceof SourceFileSubFolderNode) {
    ReturnCode rc=WorkspaceResourceHelper.checkSourceFileSubFolderNodeOpening((SourceFileSubFolderNode)node);
    if (rc.isOk()) {
      WorkspaceResourceHelper.showSourceFilesOpeningWarnMessages(rc.getMessage());
      return;
    }
  }
  InputDialog dialog=new InputDialog(Display.getDefault().getActiveShell(),DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str""),null,new IInputValidator(){
    public String isValid(    String newText){
      return null;
    }
  }
);
  if (dialog.open() == InputDialog.OK) {
    String value2=dialog.getValue();
    try {
      List<IRepositoryNode> openRepNodes=getOpenRepNodeForReName(node,true);
      RepNodeUtils.closeModelElementEditor(openRepNodes,true);
      IPath path=WorkbenchUtils.getPath(node);
      ProxyRepositoryFactory.getInstance().renameFolder(node.getObjectType(),path,value2);
      if (node != null && node.getParent() != null) {
        CorePlugin.getDefault().refreshDQView(node.getParent());
      }
    }
 catch (    PersistenceException e) {
      log.error(e.getMessage());
      MessageDialog.openError(PlatformUI.getWorkbench().getDisplay().getActiveShell(),DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str""));
    }
  }
}",0.8936635105608157
138008,"/** 
 * Test method for  {@link org.talend.dq.helper.DQDeleteHelper#deleteRelations(org.talend.core.model.properties.Item)}.
 */
@Test public void testDeleteRelations(){
  TDQReportItem item=mock(TDQReportItem.class);
  IFile file=mock(IFile.class);
  when(file.exists()).thenReturn(false);
  IFolder folder=mock(IFolder.class);
  when(folder.exists()).thenReturn(true);
  Property prop=mock(Property.class);
  when(item.getProperty()).thenReturn(prop);
  PowerMockito.mockStatic(PropertyHelper.class);
  when(PropertyHelper.getItemFile(prop)).thenReturn(file);
  PowerMockito.mockStatic(ReportHelper.class);
  when(ReportHelper.getOutputFolder(file)).thenReturn(folder);
  DQDeleteHelper.deleteRelations(item);
}","/** 
 * Test method for  {@link org.talend.dq.helper.DQDeleteHelper#deleteRelations(org.talend.core.model.properties.Item)}.
 */
@Test public void testDeleteRelations(){
  TDQReportItem item=mock(TDQReportItem.class);
  IFile file=mock(IFile.class);
  when(file.exists()).thenReturn(false);
  IFolder folder=mock(IFolder.class);
  when(folder.exists()).thenReturn(true);
  Property prop=mock(Property.class);
  when(item.getProperty()).thenReturn(prop);
  PowerMockito.mockStatic(PropertyHelper.class);
  when(PropertyHelper.getItemFile(prop)).thenReturn(file);
  PowerMockito.mockStatic(ReportHelper.class);
  when(ReportUtils.getOutputFolder(file)).thenReturn(folder);
  DQDeleteHelper.deleteRelations(item);
}",0.992280701754386
138009,"/** 
 * move Source File(close the Source File editor when it's open).
 * @param sourceNode
 * @param targetNode
 * @throws PersistenceException
 */
public void moveSourceFileRepNode(IRepositoryNode sourceNode,IRepositoryNode targetNode) throws PersistenceException {
  if (WorkspaceResourceHelper.sourceFileHasBeenOpened(sourceNode)) {
    MessageUI.openWarning(DefaultMessagesImpl.getString(""String_Node_Str"",sourceNode.getLabel()));
  }
 else {
    IRepositoryViewObject objectToMove=sourceNode.getObject();
    ERepositoryObjectType targetObjectType=targetNode.getContentType();
    IPath fullPath=ResourceManager.getSourceFileFolder().getFullPath();
    IPath makeRelativeTo=fullPath.makeRelativeTo(ResourceManager.getRootProject().getFullPath());
    ENodeType type=targetNode.getType();
    if (ENodeType.SIMPLE_FOLDER == type || ENodeType.SYSTEM_FOLDER == type) {
      TDQSourceFileItem fileItem=(TDQSourceFileItem)objectToMove.getProperty().getItem();
      String oldPath=ResourceManager.getRootFolderLocation().append(fileItem.eResource().getURI().toPlatformString(true)).toOSString();
      if (oldPath != null) {
        oldPath=StringUtils.removeEnd(oldPath,""String_Node_Str"").concat(""String_Node_Str"");
      }
 else {
        return;
      }
      moveObject(objectToMove,sourceNode,targetNode,makeRelativeTo);
      String newPath=ResourceManager.getRootFolderLocation().append(fileItem.eResource().getURI().toPlatformString(true)).toOSString();
      if (newPath == null) {
        log.error(""String_Node_Str"");
      }
      File srcFile=new File(oldPath);
      File dtnFile=new File(newPath);
      try {
        FileUtils.copyFileToDirectory(srcFile,dtnFile.getParentFile());
        FileUtils.forceDelete(srcFile);
      }
 catch (      Throwable e) {
        log.error(e.getMessage(),e);
      }
    }
    CorePlugin.getDefault().refreshDQView(targetNode.getParent());
  }
}","/** 
 * move Source File(close the Source File editor when it's open).
 * @param sourceNode
 * @param targetNode
 * @throws PersistenceException
 */
public void moveSourceFileRepNode(IRepositoryNode sourceNode,IRepositoryNode targetNode) throws PersistenceException {
  if (WorkspaceResourceHelper.sourceFileHasBeenOpened(sourceNode)) {
    MessageUI.openWarning(DefaultMessagesImpl.getString(""String_Node_Str"",sourceNode.getLabel()));
  }
 else {
    IRepositoryViewObject objectToMove=sourceNode.getObject();
    ERepositoryObjectType targetObjectType=targetNode.getContentType();
    IPath fullPath=ResourceManager.getSourceFileFolder().getFullPath();
    IPath makeRelativeTo=fullPath.makeRelativeTo(ResourceManager.getRootProject().getFullPath());
    ENodeType type=targetNode.getType();
    if (ENodeType.SIMPLE_FOLDER == type || ENodeType.SYSTEM_FOLDER == type) {
      moveObject(objectToMove,sourceNode,targetNode,makeRelativeTo);
    }
    CorePlugin.getDefault().refreshDQView(targetNode.getParent());
  }
}",0.6984235777930089
138010,"/** 
 * move Source File(close the Source File editor when it's open).
 * @param sourceNode
 * @param targetNode
 * @throws PersistenceException
 */
public void moveSourceFileRepNode(IRepositoryNode sourceNode,IRepositoryNode targetNode) throws PersistenceException {
  if (WorkspaceResourceHelper.sourceFileHasBeenOpened(sourceNode)) {
    MessageUI.openWarning(DefaultMessagesImpl.getString(""String_Node_Str"",sourceNode.getLabel()));
  }
 else {
    IRepositoryViewObject objectToMove=sourceNode.getObject();
    ERepositoryObjectType targetObjectType=targetNode.getContentType();
    IPath fullPath=ResourceManager.getSourceFileFolder().getFullPath();
    IPath makeRelativeTo=fullPath.makeRelativeTo(ResourceManager.getRootProject().getFullPath());
    ENodeType type=targetNode.getType();
    if (ENodeType.SIMPLE_FOLDER == type || ENodeType.SYSTEM_FOLDER == type) {
      TDQSourceFileItem fileItem=(TDQSourceFileItem)objectToMove.getProperty().getItem();
      String oldPath=ResourceManager.getRootFolderLocation().append(fileItem.eResource().getURI().toPlatformString(true)).toOSString();
      if (oldPath != null) {
        oldPath=StringUtils.removeEnd(oldPath,""String_Node_Str"").concat(""String_Node_Str"");
      }
 else {
        return;
      }
      moveObject(objectToMove,sourceNode,targetNode,makeRelativeTo);
      String newPath=ResourceManager.getRootFolderLocation().append(fileItem.eResource().getURI().toPlatformString(true)).toOSString();
      if (newPath == null) {
        log.error(""String_Node_Str"");
      }
      File srcFile=new File(oldPath);
      File dtnFile=new File(newPath);
      try {
        FileUtils.copyFileToDirectory(srcFile,dtnFile.getParentFile());
        FileUtils.forceDelete(srcFile);
      }
 catch (      Throwable e) {
        log.error(e.getMessage(),e);
      }
    }
    CorePlugin.getDefault().refreshDQView(targetNode.getParent());
  }
}","/** 
 * move Source File(close the Source File editor when it's open).
 * @param sourceNode
 * @param targetNode
 * @throws PersistenceException
 */
public void moveSourceFileRepNode(IRepositoryNode sourceNode,IRepositoryNode targetNode) throws PersistenceException {
  if (WorkspaceResourceHelper.sourceFileHasBeenOpened(sourceNode)) {
    MessageUI.openWarning(DefaultMessagesImpl.getString(""String_Node_Str"",sourceNode.getLabel()));
  }
 else {
    IRepositoryViewObject objectToMove=sourceNode.getObject();
    ERepositoryObjectType targetObjectType=targetNode.getContentType();
    IPath fullPath=ResourceManager.getSourceFileFolder().getFullPath();
    IPath makeRelativeTo=fullPath.makeRelativeTo(ResourceManager.getRootProject().getFullPath());
    ENodeType type=targetNode.getType();
    if (ENodeType.SIMPLE_FOLDER == type || ENodeType.SYSTEM_FOLDER == type) {
      moveObject(objectToMove,sourceNode,targetNode,makeRelativeTo);
    }
    CorePlugin.getDefault().refreshDQView(targetNode.getParent());
  }
}",0.6984235777930089
138011,"public static TypedReturnCode<Connection> getRefreshedDataProvider(Connection prevDataProvider){
  TypedReturnCode<Connection> returnProvider=new TypedReturnCode<Connection>();
  boolean mdm=ConnectionUtils.isMdmConnection(prevDataProvider);
  String urlString=JavaSqlFactory.getURL(prevDataProvider);
  String driverClassName=JavaSqlFactory.getDriverClass(prevDataProvider);
  Properties properties=new Properties();
  properties.setProperty(TaggedValueHelper.USER,JavaSqlFactory.getUsername(prevDataProvider));
  properties.setProperty(TaggedValueHelper.PASSWORD,JavaSqlFactory.getPassword(prevDataProvider));
  DBConnectionParameter connectionParameters=new DBConnectionParameter();
  connectionParameters.setName(prevDataProvider.getName());
  connectionParameters.setAuthor(MetadataHelper.getAuthor(prevDataProvider));
  connectionParameters.setDescription(MetadataHelper.getDescription(prevDataProvider));
  connectionParameters.setPurpose(MetadataHelper.getPurpose(prevDataProvider));
  connectionParameters.setStatus(MetadataHelper.getDevStatus(prevDataProvider));
  String dbType=ConnectionUtils.getDatabaseType(prevDataProvider);
  connectionParameters.setSqlTypeName(dbType);
  connectionParameters.setJdbcUrl(urlString);
  connectionParameters.setDriverClassName(driverClassName);
  connectionParameters.setParameters(properties);
  connectionParameters.setDbName(ConnectionUtils.getSID(prevDataProvider));
  connectionParameters.setRetrieveAllMetadata(ConnectionHelper.getRetrieveAllMetadata(prevDataProvider));
  if (prevDataProvider instanceof DatabaseConnection) {
    DatabaseConnection dbConn=(DatabaseConnection)prevDataProvider;
    String uiSchema=dbConn.getUiSchema();
    if (dbConn.isContextMode() && uiSchema != null) {
      uiSchema=ConnectionUtils.getOriginalConntextValue(dbConn,uiSchema);
    }
    connectionParameters.setFilterSchema(uiSchema);
  }
  IMetadataConnection metadataConnection=MetadataFillFactory.getMDMInstance().fillUIParams(ParameterUtil.toMap(connectionParameters));
  List<String> packageFilter=ConnectionUtils.getPackageFilter(connectionParameters);
  Connection conn=null;
  if (mdm) {
    conn=MetadataFillFactory.getMDMInstance().fillUIConnParams(metadataConnection,null);
    MetadataFillFactory.getMDMInstance().fillSchemas(conn,null,packageFilter);
  }
 else {
    TypedReturnCode<?> trc=(TypedReturnCode<?>)MetadataFillFactory.getDBInstance().checkConnection(metadataConnection);
    Object sqlConnObject=trc.getObject();
    DatabaseMetaData dbJDBCMetadata=null;
    if (trc.isOk() && sqlConnObject instanceof java.sql.Connection) {
      java.sql.Connection sqlConn=(java.sql.Connection)sqlConnObject;
      try {
        dbJDBCMetadata=ExtractMetaDataUtils.getConnectionMetadata(sqlConn);
      }
 catch (      SQLException e) {
        log.error(e,e);
      }
    }
    conn=MetadataFillFactory.getDBInstance().fillUIConnParams(metadataConnection,null);
    try {
      if (ConnectionUtils.isIngres(prevDataProvider) || ConnectionUtils.isInformix(prevDataProvider) || ConnectionUtils.isDB2(prevDataProvider)) {
        packageFilter=null;
      }
      if (ConnectionUtils.isDB2(prevDataProvider) && connectionParameters.getFilterSchema() != null && !connectionParameters.getFilterSchema().equals(""String_Node_Str"")) {
        if (packageFilter == null) {
          packageFilter=new ArrayList<String>();
        }
        packageFilter.add(connectionParameters.getFilterSchema());
      }
      MetadataFillFactory.getDBInstance().fillCatalogs(conn,dbJDBCMetadata,packageFilter);
      MetadataFillFactory.getDBInstance().fillSchemas(conn,dbJDBCMetadata,packageFilter);
    }
 catch (    SQLException e) {
      log.error(e);
    }
  }
  if (conn == null) {
    returnProvider.setOk(false);
  }
 else {
    returnProvider.setObject(conn);
  }
  return returnProvider;
}","public static TypedReturnCode<Connection> getRefreshedDataProvider(Connection prevDataProvider){
  TypedReturnCode<Connection> returnProvider=new TypedReturnCode<Connection>();
  boolean mdm=ConnectionUtils.isMdmConnection(prevDataProvider);
  String urlString=JavaSqlFactory.getURL(prevDataProvider);
  String driverClassName=JavaSqlFactory.getDriverClass(prevDataProvider);
  driverClassName=ConnectionUtils.getOriginalConntextValue(prevDataProvider,driverClassName);
  Properties properties=new Properties();
  properties.setProperty(TaggedValueHelper.USER,JavaSqlFactory.getUsername(prevDataProvider));
  properties.setProperty(TaggedValueHelper.PASSWORD,JavaSqlFactory.getPassword(prevDataProvider));
  DBConnectionParameter connectionParameters=new DBConnectionParameter();
  connectionParameters.setName(prevDataProvider.getName());
  connectionParameters.setAuthor(MetadataHelper.getAuthor(prevDataProvider));
  connectionParameters.setDescription(MetadataHelper.getDescription(prevDataProvider));
  connectionParameters.setPurpose(MetadataHelper.getPurpose(prevDataProvider));
  connectionParameters.setStatus(MetadataHelper.getDevStatus(prevDataProvider));
  String dbType=ConnectionUtils.getDatabaseType(prevDataProvider);
  connectionParameters.setSqlTypeName(dbType);
  connectionParameters.setJdbcUrl(urlString);
  connectionParameters.setDriverClassName(driverClassName);
  connectionParameters.setParameters(properties);
  connectionParameters.setDbName(ConnectionUtils.getSID(prevDataProvider));
  connectionParameters.setRetrieveAllMetadata(ConnectionHelper.getRetrieveAllMetadata(prevDataProvider));
  if (prevDataProvider instanceof DatabaseConnection) {
    DatabaseConnection dbConn=(DatabaseConnection)prevDataProvider;
    String uiSchema=dbConn.getUiSchema();
    String driverJarPath=dbConn.getDriverJarPath();
    if (dbConn.isContextMode() && uiSchema != null) {
      uiSchema=ConnectionUtils.getOriginalConntextValue(dbConn,uiSchema);
      driverJarPath=ConnectionUtils.getOriginalConntextValue(dbConn,driverJarPath);
    }
    connectionParameters.setDriverPath(driverJarPath);
    connectionParameters.setFilterSchema(uiSchema);
  }
  IMetadataConnection metadataConnection=null;
  List<String> packageFilter=ConnectionUtils.getPackageFilter(connectionParameters);
  Connection conn=null;
  if (mdm) {
    metadataConnection=MetadataFillFactory.getMDMInstance().fillUIParams(ParameterUtil.toMap(connectionParameters));
    conn=MetadataFillFactory.getMDMInstance().fillUIConnParams(metadataConnection,null);
    MetadataFillFactory.getMDMInstance().fillSchemas(conn,null,packageFilter);
  }
 else {
    metadataConnection=MetadataFillFactory.getMDMInstance().fillUIParams(ParameterUtil.toMap(connectionParameters));
    TypedReturnCode<?> trc=(TypedReturnCode<?>)MetadataFillFactory.getDBInstance().checkConnection(metadataConnection);
    Object sqlConnObject=trc.getObject();
    DatabaseMetaData dbJDBCMetadata=null;
    if (trc.isOk() && sqlConnObject instanceof java.sql.Connection) {
      java.sql.Connection sqlConn=(java.sql.Connection)sqlConnObject;
      try {
        dbJDBCMetadata=ExtractMetaDataUtils.getConnectionMetadata(sqlConn);
      }
 catch (      SQLException e) {
        log.error(e,e);
      }
    }
    conn=MetadataFillFactory.getDBInstance().fillUIConnParams(metadataConnection,null);
    try {
      if (ConnectionUtils.isIngres(prevDataProvider) || ConnectionUtils.isInformix(prevDataProvider) || ConnectionUtils.isDB2(prevDataProvider)) {
        packageFilter=null;
      }
      if (ConnectionUtils.isDB2(prevDataProvider) && connectionParameters.getFilterSchema() != null && !connectionParameters.getFilterSchema().equals(""String_Node_Str"")) {
        if (packageFilter == null) {
          packageFilter=new ArrayList<String>();
        }
        packageFilter.add(connectionParameters.getFilterSchema());
      }
      MetadataFillFactory.getDBInstance().fillCatalogs(conn,dbJDBCMetadata,packageFilter);
      MetadataFillFactory.getDBInstance().fillSchemas(conn,dbJDBCMetadata,packageFilter);
    }
 catch (    SQLException e) {
      log.error(e);
    }
  }
  if (conn == null) {
    returnProvider.setOk(false);
  }
 else {
    returnProvider.setObject(conn);
  }
  return returnProvider;
}",0.916615194564546
138012,"@Override protected void saveReloadResult(){
  Item item=null;
  if (selectedObj instanceof Connection) {
    Connection con=(Connection)selectedObj;
    Property property=PropertyHelper.getProperty(con);
    if (property != null) {
      item=property.getItem();
      if (con.isContextMode()) {
        if (item != null && con instanceof DatabaseConnection) {
          DatabaseConnection dbConn=(DatabaseConnection)ConnectionUtils.getOriginalDatabaseConnection((DatabaseConnection)con);
          String urlStr=DatabaseConnStrUtil.getURLString(dbConn);
          if (urlStr != null) {
            ((DatabaseConnection)con).setURL(urlStr);
            ConnectionHelper.setUsingURL(con,urlStr);
          }
        }
      }
    }
  }
 else   if (selectedObj instanceof IRepositoryViewObject) {
    item=((IRepositoryViewObject)selectedObj).getProperty().getItem();
  }
 else {
    RepositoryNode recursiveFind=RepositoryNodeHelper.recursiveFind(oldDataProvider);
    if (recursiveFind != null) {
      item=recursiveFind.getObject().getProperty().getItem();
    }
  }
  if (item == null) {
    return;
  }
  Project currentProject=ProjectManager.getInstance().getCurrentProject();
  try {
    ProxyRepositoryFactory.getInstance().save(currentProject,item);
  }
 catch (  PersistenceException e) {
    log.error(e,e);
  }
}","@Override protected void saveReloadResult(){
  Item item=null;
  if (selectedObj instanceof Connection) {
    Connection con=(Connection)selectedObj;
    Property property=PropertyHelper.getProperty(con);
    if (property != null) {
      item=property.getItem();
      if (con.isContextMode()) {
        if (item != null && con instanceof DatabaseConnection) {
          DatabaseConnection dbConn=(DatabaseConnection)ConnectionUtils.getOriginalDatabaseConnection((DatabaseConnection)con);
          String urlStr=DatabaseConnStrUtil.getURLString(dbConn);
          if (urlStr != null) {
            if (!dbConn.getDatabaseType().equals(EDatabaseTypeName.GENERAL_JDBC.getDisplayName())) {
              ((DatabaseConnection)con).setURL(urlStr);
            }
            ConnectionHelper.setUsingURL(con,urlStr);
          }
        }
      }
    }
  }
 else   if (selectedObj instanceof IRepositoryViewObject) {
    item=((IRepositoryViewObject)selectedObj).getProperty().getItem();
  }
 else {
    RepositoryNode recursiveFind=RepositoryNodeHelper.recursiveFind(oldDataProvider);
    if (recursiveFind != null) {
      item=recursiveFind.getObject().getProperty().getItem();
    }
  }
  if (item == null) {
    return;
  }
  Project currentProject=ProjectManager.getInstance().getCurrentProject();
  try {
    ProxyRepositoryFactory.getInstance().save(currentProject,item);
  }
 catch (  PersistenceException e) {
    log.error(e,e);
  }
}",0.9576853526220614
138013,"/** 
 * Get the original value for context mode.
 * @param connection
 * @param rawValue
 * @return
 */
public static String getOriginalConntextValue(Connection connection,String rawValue){
  String origValu=null;
  if (connection != null && connection.isContextMode()) {
    String contextName=connection.getContextName();
    ContextType contextType=null;
    if (contextName == null) {
      contextType=ConnectionContextHelper.getContextTypeForContextMode(connection,true);
    }
 else {
      contextType=ConnectionContextHelper.getContextTypeForContextMode(null,connection,contextName,false);
    }
    origValu=ConnectionContextHelper.getOriginalValue(contextType,rawValue);
  }
  return origValu == null ? PluginConstant.EMPTY_STRING : origValu;
}","/** 
 * Get the original value for context mode.
 * @param connection
 * @param rawValue
 * @return
 */
public static String getOriginalConntextValue(Connection connection,String rawValue){
  if (rawValue == null) {
    return PluginConstant.EMPTY_STRING;
  }
  String origValu=null;
  if (connection != null && connection.isContextMode()) {
    String contextName=connection.getContextName();
    ContextType contextType=null;
    if (contextName == null) {
      contextType=ConnectionContextHelper.getContextTypeForContextMode(connection,true);
    }
 else {
      contextType=ConnectionContextHelper.getContextTypeForContextMode(null,connection,contextName,false);
    }
    origValu=ConnectionContextHelper.getOriginalValue(contextType,rawValue);
  }
  return origValu == null ? rawValue : origValu;
}",0.3151825752722613
138014,"@Override protected boolean saveTextChange(){
  if (connection != null && connection.eIsProxy()) {
    connection=(Connection)EObjectHelper.resolveObject(connection);
  }
  JavaSqlFactory.setUsername(connection,loginText.getText());
  JavaSqlFactory.setPassword(connection,passwordText.getText());
  JavaSqlFactory.setURL(connection,urlText.getText());
  if (super.saveTextChange()) {
    ConnectionUtils.setName(connection,nameText.getText());
    PropertyHelper.getProperty(connection).setLabel(nameText.getText());
  }
 else {
    return false;
  }
  return true;
}","@Override protected boolean saveTextChange(){
  if (connection != null && connection.eIsProxy()) {
    connection=(Connection)EObjectHelper.resolveObject(connection);
  }
  if (!connection.isContextMode()) {
    JavaSqlFactory.setUsername(connection,loginText.getText());
    JavaSqlFactory.setPassword(connection,passwordText.getText());
  }
  if (super.saveTextChange()) {
    ConnectionUtils.setName(connection,nameText.getText());
    PropertyHelper.getProperty(connection).setLabel(nameText.getText());
  }
 else {
    return false;
  }
  return true;
}",0.91651865008881
138015,"private ReturnCode checkDBConnection(){
  Properties props=new Properties();
  String userName=loginText.getText();
  String password=passwordText.getText();
  String url=urlText.getText();
  if (connection.isContextMode()) {
    userName=ConnectionUtils.getOriginalConntextValue(connection,userName);
    password=ConnectionUtils.getOriginalConntextValue(connection,password);
    url=ConnectionUtils.getOriginalConntextValue(connection,url);
  }
  props.put(TaggedValueHelper.USER,userName);
  props.put(TaggedValueHelper.PASSWORD,password);
  Connection tdDataProvider2=connection;
  if (tdDataProvider2 instanceof MDMConnection) {
    props.put(TaggedValueHelper.UNIVERSE,ConnectionHelper.getUniverse((MDMConnection)tdDataProvider2));
    props.put(TaggedValueHelper.DATA_FILTER,ConnectionHelper.getDataFilter((MDMConnection)tdDataProvider2));
  }
  if (ConnectionUtils.isTeradata(tdDataProvider2)) {
    DatabaseConnection dbConn=(DatabaseConnection)tdDataProvider2;
    props.put(TaggedValueHelper.DBTYPE,dbConn.getDatabaseType());
    props.put(TaggedValueHelper.DBNAME,dbConn.getSID());
  }
  ReturnCode returnCode=ConnectionUtils.isMdmConnection(tdDataProvider2) ? new MdmWebserviceConnection(JavaSqlFactory.getURL(tdDataProvider2),props).checkDatabaseConnection() : ConnectionUtils.checkConnection(url,JavaSqlFactory.getDriverClass(tdDataProvider2),props);
  return returnCode;
}","private ReturnCode checkDBConnection(){
  Properties props=new Properties();
  String userName=loginText.getText();
  String password=passwordText.getText();
  String url=urlText.getText();
  String driverClassName=JavaSqlFactory.getDriverClass(connection);
  if (connection.isContextMode()) {
    userName=ConnectionUtils.getOriginalConntextValue(connection,userName);
    password=ConnectionUtils.getOriginalConntextValue(connection,password);
    url=ConnectionUtils.getOriginalConntextValue(connection,url);
    driverClassName=ConnectionUtils.getOriginalConntextValue(connection,driverClassName);
  }
  props.put(TaggedValueHelper.USER,userName);
  props.put(TaggedValueHelper.PASSWORD,password);
  if (connection instanceof MDMConnection) {
    props.put(TaggedValueHelper.UNIVERSE,ConnectionHelper.getUniverse((MDMConnection)connection));
    props.put(TaggedValueHelper.DATA_FILTER,ConnectionHelper.getDataFilter((MDMConnection)connection));
  }
  if (ConnectionUtils.isTeradata(connection)) {
    DatabaseConnection dbConn=(DatabaseConnection)connection;
    props.put(TaggedValueHelper.DBTYPE,dbConn.getDatabaseType());
    props.put(TaggedValueHelper.DBNAME,dbConn.getSID());
  }
  ReturnCode returnCode=ConnectionUtils.isMdmConnection(connection) ? new MdmWebserviceConnection(JavaSqlFactory.getURL(connection),props).checkDatabaseConnection() : ConnectionUtils.checkConnection(url,driverClassName,props);
  return returnCode;
}",0.7946270767055497
138016,"/** 
 * @param form
 * @param toolkit
 * @param topComp
 */
void createInformationSection(final ScrolledForm form,Composite topComp){
  infomatioinSection=createSection(form,topComp,DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str""));
  Composite sectionClient=toolkit.createComposite(infomatioinSection);
  sectionClient.setLayout(new GridLayout(2,false));
  Label loginLabel=new Label(sectionClient,SWT.NONE);
  loginLabel.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  loginText=new Text(sectionClient,SWT.BORDER);
  GridDataFactory.fillDefaults().grab(true,true).applyTo(loginText);
  Label passwordLabel=new Label(sectionClient,SWT.NONE);
  passwordLabel.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  passwordText=new Text(sectionClient,SWT.BORDER | SWT.PASSWORD);
  GridDataFactory.fillDefaults().grab(true,true).applyTo(passwordText);
  String loginValue=JavaSqlFactory.getUsername(connection);
  loginText.setText(loginValue == null ? PluginConstant.EMPTY_STRING : loginValue);
  String passwordValue=JavaSqlFactory.getPassword(connection);
  passwordText.setText(passwordValue == null ? PluginConstant.EMPTY_STRING : passwordValue);
  Label urlLabel=new Label(sectionClient,SWT.NONE);
  urlLabel.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  Composite urlComp=new Composite(sectionClient,SWT.NONE);
  GridLayout gridLayout=new GridLayout(2,false);
  gridLayout.marginWidth=0;
  gridLayout.marginHeight=0;
  urlComp.setLayout(gridLayout);
  GridDataFactory.fillDefaults().grab(true,true).applyTo(urlComp);
  urlText=new Text(urlComp,SWT.BORDER | SWT.READ_ONLY);
  GridDataFactory.fillDefaults().hint(100,-1).grab(true,true).applyTo(urlText);
  String urlValue=JavaSqlFactory.getURL(connection);
  urlText.setText(urlValue == null ? PluginConstant.EMPTY_STRING : urlValue);
  Button editButton=new Button(urlComp,SWT.PUSH);
  editButton.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  editButton.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
  editButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      changeConnectionInformations();
    }
  }
);
  String driverClass=JavaSqlFactory.getDriverClass(connection);
  if (driverClass != null && driverClass.startsWith(""String_Node_Str"")) {
    loginText.setEnabled(false);
    passwordText.setEnabled(false);
  }
  loginText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      setDirty(true);
      isLoginChanged=true;
    }
  }
);
  passwordText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      setDirty(true);
      isPassWordChanged=true;
    }
  }
);
  urlText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      setDirty(true);
      isUrlChanged=true;
    }
  }
);
  infomatioinSection.setClient(sectionClient);
}","/** 
 * @param form
 * @param toolkit
 * @param topComp
 */
void createInformationSection(final ScrolledForm form,Composite topComp){
  infomatioinSection=createSection(form,topComp,DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str""));
  Composite sectionClient=toolkit.createComposite(infomatioinSection);
  sectionClient.setLayout(new GridLayout(2,false));
  Label loginLabel=new Label(sectionClient,SWT.NONE);
  loginLabel.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  loginText=new Text(sectionClient,SWT.BORDER);
  GridDataFactory.fillDefaults().grab(true,true).applyTo(loginText);
  Label passwordLabel=new Label(sectionClient,SWT.NONE);
  passwordLabel.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  passwordText=new Text(sectionClient,SWT.BORDER | SWT.PASSWORD);
  GridDataFactory.fillDefaults().grab(true,true).applyTo(passwordText);
  String loginValue=JavaSqlFactory.getUsername(connection);
  loginText.setText(loginValue == null ? PluginConstant.EMPTY_STRING : loginValue);
  loginText.setEditable(!connection.isContextMode());
  String passwordValue=JavaSqlFactory.getPassword(connection);
  passwordText.setText(passwordValue == null ? PluginConstant.EMPTY_STRING : passwordValue);
  passwordText.setEditable(!connection.isContextMode());
  Label urlLabel=new Label(sectionClient,SWT.NONE);
  urlLabel.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  Composite urlComp=new Composite(sectionClient,SWT.NONE);
  GridLayout gridLayout=new GridLayout(2,false);
  gridLayout.marginWidth=0;
  gridLayout.marginHeight=0;
  urlComp.setLayout(gridLayout);
  GridDataFactory.fillDefaults().grab(true,true).applyTo(urlComp);
  urlText=new Text(urlComp,SWT.BORDER | SWT.READ_ONLY);
  GridDataFactory.fillDefaults().hint(100,-1).grab(true,true).applyTo(urlText);
  String urlValue=JavaSqlFactory.getURL(connection);
  urlText.setText(urlValue == null ? PluginConstant.EMPTY_STRING : urlValue);
  Button editButton=new Button(urlComp,SWT.PUSH);
  editButton.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  editButton.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
  editButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      changeConnectionInformations();
    }
  }
);
  String driverClass=JavaSqlFactory.getDriverClass(connection);
  if (driverClass != null && driverClass.startsWith(""String_Node_Str"")) {
    loginText.setEnabled(false);
    passwordText.setEnabled(false);
  }
  loginText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      setDirty(true);
      isLoginChanged=true;
    }
  }
);
  passwordText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      setDirty(true);
      isPassWordChanged=true;
    }
  }
);
  urlText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      setDirty(true);
      isUrlChanged=true;
    }
  }
);
  infomatioinSection.setClient(sectionClient);
}",0.9817763913971432
138017,"private String getItemFullPath(Property property){
  Item item=property.getItem();
  IPath path=null;
  String fileName=null;
  EElementEName elementEName=EElementEName.getElementEName(item);
  if (elementEName != null) {
    URI uri=EObjectHelper.getURI(property);
    path=new Path(uri.toPlatformString(false));
    path=new Path(path.lastSegment());
    fileName=path.removeFileExtension().addFileExtension(elementEName.getFileExt()).toString();
  }
  IPath typedPath=ResourceManager.getRootProject().getFolder(PropertyHelper.getItemTypedPath(item)).getLocation();
  String fullpath=typedPath.toOSString() + ""String_Node_Str"" + fileName;
  return fullpath;
}","private String getItemFullPath(TDQSourceFileItem item){
  String statePathStr=null;
  if (item.getState() != null) {
    statePathStr=item.getState().getPath();
    if (!statePathStr.equals(""String_Node_Str"")) {
      statePathStr=""String_Node_Str"" + statePathStr;
    }
  }
  String fileName=item.getName() + ""String_Node_Str"" + item.getProperty().getVersion()+ ""String_Node_Str""+ item.getExtension();
  IPath typedPath=ResourceManager.getSourceFileFolder().getLocation();
  String fullpath=typedPath.toOSString() + statePathStr + ""String_Node_Str""+ fileName;
  return fullpath;
}",0.178743961352657
138018,"@Override public ReturnCode save(Item item,boolean careDependency){
  ReturnCode rc=new ReturnCode();
  if (!(item instanceof TDQSourceFileItem)) {
    rc.setOk(Boolean.FALSE);
    return rc;
  }
  TDQSourceFileItem sqlItem=(TDQSourceFileItem)item;
  ByteArray byteArray=PropertiesFactory.eINSTANCE.createByteArray();
  InputStream stream=null;
  try {
    File file=new File(this.getItemFullPath(sqlItem.getProperty()));
    stream=file.toURL().openStream();
    byte[] innerContent=new byte[stream.available()];
    stream.read(innerContent);
    byteArray.setInnerContent(innerContent);
  }
 catch (  IOException e) {
    rc.setOk(Boolean.FALSE);
    ExceptionHandler.process(e);
  }
 finally {
    if (stream != null) {
      try {
        stream.close();
      }
 catch (      IOException e) {
        rc.setOk(Boolean.FALSE);
        rc.setMessage(e.getMessage());
      }
    }
  }
  String routineContent=new String(byteArray.getInnerContent());
  byteArray.setInnerContent(routineContent.getBytes());
  sqlItem.getContent().setInnerContent(routineContent.getBytes());
  return rc;
}","@Override public ReturnCode save(Item item,boolean careDependency){
  ReturnCode rc=new ReturnCode();
  if (!(item instanceof TDQSourceFileItem)) {
    rc.setOk(Boolean.FALSE);
    return rc;
  }
  TDQSourceFileItem sqlItem=(TDQSourceFileItem)item;
  ByteArray byteArray=PropertiesFactory.eINSTANCE.createByteArray();
  InputStream stream=null;
  try {
    File file=new File(this.getItemFullPath(sqlItem));
    byteArray.setInnerContentFromFile(file);
  }
 catch (  IOException e) {
    rc.setOk(Boolean.FALSE);
    ExceptionHandler.process(e);
  }
 finally {
    if (stream != null) {
      try {
        stream.close();
      }
 catch (      IOException e) {
        rc.setOk(Boolean.FALSE);
        rc.setMessage(e.getMessage());
      }
    }
  }
  String routineContent=new String(byteArray.getInnerContent());
  byteArray.setInnerContent(routineContent.getBytes());
  sqlItem.getContent().setInnerContent(routineContent.getBytes());
  return rc;
}",0.8919315403422983
138019,"@Override public void handle(Object object,String[] rowValues){
  if (duplicateMap.containsKey(object)) {
    duplicateMap.get(object).add(rowValues);
  }
 else {
    List<Object[]> temp=new ArrayList<Object[]>();
    temp.add(rowValues);
    duplicateMap.put(object,temp);
  }
}","public void handle(Object object,String[] rowValues){
  if (duplicateMap.containsKey(object)) {
    duplicateMap.get(object).add(rowValues);
  }
 else {
    List<Object[]> temp=new ArrayList<Object[]>();
    temp.add(rowValues);
    duplicateMap.put(object,temp);
  }
}",0.9817518248175182
138020,"@Override public Map<Object,List<Object[]>> getDuplicateMap(){
  return this.duplicateMap;
}","public Map<Object,List<Object[]>> getDuplicateMap(){
  return this.duplicateMap;
}",0.942528735632184
138021,"@Override public boolean storeSqlResults(List<Object[]> objects){
  if (!checkResults(objects,2)) {
    return false;
  }
  String s=String.valueOf(objects.get(0)[0]);
  String c=String.valueOf(objects.get(0)[1]);
  if (!NumberUtils.isNumber(s)) {
    s=""String_Node_Str"";
  }
  if (!NumberUtils.isNumber(c)) {
    c=""String_Node_Str"";
  }
  this.setSumStr(s);
  this.setCount(Long.valueOf(c));
  this.setNullCount(Long.valueOf(0));
  return true;
}","@Override public boolean storeSqlResults(List<Object[]> objects){
  if (!checkResults(objects,2)) {
    return false;
  }
  String s=String.valueOf(objects.get(0)[0]);
  String c=String.valueOf(objects.get(0)[1]);
  if (!NumberUtils.isNumber(s)) {
    s=""String_Node_Str"";
  }
  if (!NumberUtils.isNumber(c)) {
    c=""String_Node_Str"";
  }
  this.setSumStr(s);
  this.setCount(Long.valueOf(c));
  return true;
}",0.955813953488372
138022,"/** 
 * <!-- begin-user-doc --> <!-- end-user-doc -->
 * @generated NOT
 */
public Double getMean(){
  Long c=getCount();
  if (c.compareTo(0L) == 0) {
    return Double.NaN;
  }
  Double sum=null;
  try {
    sum=Double.valueOf(getSumStr());
  }
 catch (  Exception e) {
    return Double.NaN;
  }
  if (sum == null) {
    throw new RuntimeException(""String_Node_Str"");
  }
  Long nullCount=getNullCount();
  if (nullCount == null) {
    nullCount=0L;
  }
  long nonNULLCount=c.longValue() - nullCount.longValue();
  if (nonNULLCount == 0) {
    return Double.NaN;
  }
  return sum / nonNULLCount;
}","/** 
 * <!-- begin-user-doc --> <!-- end-user-doc -->
 * @generated NOT
 */
public Double getMean(){
  Long c=getCount();
  if (c.compareTo(0L) == 0) {
    return Double.NaN;
  }
  Double sum=null;
  try {
    sum=Double.valueOf(getSumStr());
  }
 catch (  Exception e) {
    return Double.NaN;
  }
  if (sum == null) {
    throw new RuntimeException(""String_Node_Str"");
  }
  return sum / c;
}",0.7847082494969819
138023,"@Override public boolean handle(Object data){
  boolean handled=super.handle(data);
  return handled;
}","@Override public boolean handle(Object data){
  if (data == null) {
    nullCount++;
  }
 else {
    count++;
  }
  Boolean handleStatus=handleGenericSum(data);
  return handleStatus;
}",0.6527777777777778
138024,"@Override public boolean handle(Object data){
  boolean handled=super.handle(data);
  if (data == null) {
    return false;
  }
  this.getGenericSum(data).sumObject(data);
  return handled;
}","@Override public boolean handle(Object data){
  boolean handled=super.handle(data);
  if (!handled) {
    return handled;
  }
  return handleGenericSum(data);
}",0.6666666666666666
138025,"public boolean removeAliasInSQLExplorer(IRepositoryNode children){
  boolean hasDependencyItem=true;
  Item item=children.getObject().getProperty().getItem();
  Object ob=((ConnectionItem)item).getConnection();
  if (item != null && item instanceof ConnectionItem) {
    Connection connection=((ConnectionItem)item).getConnection();
    if (connection instanceof DatabaseConnection || connection instanceof DelimitedFileConnection || connection instanceof MDMConnection) {
      List<ModelElement> dependencyClients=EObjectHelper.getDependencyClients(connection);
      if (!(dependencyClients == null || dependencyClients.isEmpty())) {
        hasDependencyItem=false;
      }
 else {
        CWMPlugin.getDefault().removeAliasInSQLExplorer(connection);
      }
    }
  }
  return hasDependencyItem;
}","public boolean removeAliasInSQLExplorer(IRepositoryNode children){
  boolean hasDependencyItem=true;
  Item item=children.getObject().getProperty().getItem();
  if (item != null && item instanceof ConnectionItem) {
    Connection connection=((ConnectionItem)item).getConnection();
    if (connection instanceof DatabaseConnection || connection instanceof DelimitedFileConnection || connection instanceof MDMConnection) {
      List<ModelElement> dependencyClients=EObjectHelper.getDependencyClients(connection);
      if (!(dependencyClients == null || dependencyClients.isEmpty())) {
        hasDependencyItem=false;
      }
 else {
        CWMPlugin.getDefault().removeAliasInSQLExplorer(connection);
      }
    }
  }
  return hasDependencyItem;
}",0.9664948453608248
138026,"@Override protected void handleAddElement(ModelElementChangeRightTarget addElement){
  EObject rightElement=addElement.getRightElement();
  TdColumn columnSetSwitch=SwitchHelpers.COLUMN_SWITCH.doSwitch(rightElement);
  if (columnSetSwitch != null) {
    ColumnSet columnSet=null;
    if (selectedObj instanceof DBColumnFolderRepNode) {
      DBColumnFolderRepNode columnFolderRepNode=(DBColumnFolderRepNode)selectedObj;
      columnSet=columnFolderRepNode.getColumnSet();
    }
 else     if (selectedObj instanceof ColumnSet) {
      columnSet=(ColumnSet)selectedObj;
    }
    ColumnSetHelper.addColumn(columnSetSwitch,columnSet);
    PrimaryKey primaryKey=ColumnHelper.getPrimaryKey(columnSetSwitch);
    if (primaryKey != null) {
      TableHelper.addPrimaryKey((TdTable)columnSet,primaryKey);
      PrimaryKey newPrimaryKey=TableHelper.addPrimaryKey((TdTable)columnSet,primaryKey);
      columnSetSwitch.getUniqueKey().remove(primaryKey);
      columnSetSwitch.getUniqueKey().add(newPrimaryKey);
    }
    Set<ForeignKey> foreignKeySet=ColumnHelper.getForeignKey(columnSetSwitch);
    for (    ForeignKey foreignKey : foreignKeySet) {
      if (foreignKey != null) {
        ForeignKey newForeignKey=TableHelper.addForeignKey((TdTable)columnSet,foreignKey);
        columnSetSwitch.getKeyRelationship().remove(foreignKey);
        columnSetSwitch.getKeyRelationship().add(newForeignKey);
      }
    }
    return;
  }
  TdExpression addedExpression=DataqualitySwitchHelper.TDEXPRESSION_SWITCH.doSwitch(rightElement);
  if (addedExpression != null) {
    TdColumn parentColumn=SwitchHelpers.COLUMN_SWITCH.doSwitch(addElement.getLeftParent());
    if (parentColumn != null) {
      parentColumn.setInitialValue(addedExpression);
    }
  }
}","@Override protected void handleAddElement(ModelElementChangeRightTarget addElement){
  EObject rightElement=addElement.getRightElement();
  TdColumn columnSetSwitch=SwitchHelpers.COLUMN_SWITCH.doSwitch(rightElement);
  if (columnSetSwitch != null) {
    ColumnSet columnSet=null;
    if (selectedObj instanceof DBColumnFolderRepNode) {
      DBColumnFolderRepNode columnFolderRepNode=(DBColumnFolderRepNode)selectedObj;
      columnSet=columnFolderRepNode.getColumnSet();
    }
 else     if (selectedObj instanceof ColumnSet) {
      columnSet=(ColumnSet)selectedObj;
    }
    ColumnSetHelper.addColumn(columnSetSwitch,columnSet);
    PrimaryKey primaryKey=ColumnHelper.getPrimaryKey(columnSetSwitch);
    TableHelper.addPrimaryKey((TdTable)columnSet,columnSetSwitch);
    Set<ForeignKey> foreignKeySet=ColumnHelper.getForeignKey(columnSetSwitch);
    for (    ForeignKey foreignKey : foreignKeySet) {
      TableHelper.addForeignKey((TdTable)columnSet,foreignKey,columnSetSwitch);
    }
    return;
  }
  TdExpression addedExpression=DataqualitySwitchHelper.TDEXPRESSION_SWITCH.doSwitch(rightElement);
  if (addedExpression != null) {
    TdColumn parentColumn=SwitchHelpers.COLUMN_SWITCH.doSwitch(addElement.getLeftParent());
    if (parentColumn != null) {
      parentColumn.setInitialValue(addedExpression);
    }
  }
}",0.8386044995109228
138027,"@Override protected void handleAddElement(ModelElementChangeRightTarget addElement){
  EObject rightElement=addElement.getRightElement();
  TdColumn columnSetSwitch=SwitchHelpers.COLUMN_SWITCH.doSwitch(rightElement);
  if (columnSetSwitch != null) {
    ColumnSet columnSet=null;
    if (selectedObj instanceof DBColumnFolderRepNode) {
      DBColumnFolderRepNode columnFolderRepNode=(DBColumnFolderRepNode)selectedObj;
      columnSet=columnFolderRepNode.getColumnSet();
    }
 else     if (selectedObj instanceof ColumnSet) {
      columnSet=(ColumnSet)selectedObj;
    }
    ColumnSetHelper.addColumn(columnSetSwitch,columnSet);
    PrimaryKey primaryKey=ColumnHelper.getPrimaryKey(columnSetSwitch);
    if (primaryKey != null) {
      TableHelper.addPrimaryKey((TdTable)columnSet,primaryKey);
      PrimaryKey newPrimaryKey=TableHelper.addPrimaryKey((TdTable)columnSet,primaryKey);
      columnSetSwitch.getUniqueKey().remove(primaryKey);
      columnSetSwitch.getUniqueKey().add(newPrimaryKey);
    }
    Set<ForeignKey> foreignKeySet=ColumnHelper.getForeignKey(columnSetSwitch);
    for (    ForeignKey foreignKey : foreignKeySet) {
      if (foreignKey != null) {
        ForeignKey newForeignKey=TableHelper.addForeignKey((TdTable)columnSet,foreignKey);
        columnSetSwitch.getKeyRelationship().remove(foreignKey);
        columnSetSwitch.getKeyRelationship().add(newForeignKey);
      }
    }
    return;
  }
  TdExpression addedExpression=DataqualitySwitchHelper.TDEXPRESSION_SWITCH.doSwitch(rightElement);
  if (addedExpression != null) {
    TdColumn parentColumn=SwitchHelpers.COLUMN_SWITCH.doSwitch(addElement.getLeftParent());
    if (parentColumn != null) {
      parentColumn.setInitialValue(addedExpression);
    }
  }
}","@Override protected void handleAddElement(ModelElementChangeRightTarget addElement){
  EObject rightElement=addElement.getRightElement();
  TdColumn columnSetSwitch=SwitchHelpers.COLUMN_SWITCH.doSwitch(rightElement);
  if (columnSetSwitch != null) {
    ColumnSet columnSet=null;
    if (selectedObj instanceof DBColumnFolderRepNode) {
      DBColumnFolderRepNode columnFolderRepNode=(DBColumnFolderRepNode)selectedObj;
      columnSet=columnFolderRepNode.getColumnSet();
    }
 else     if (selectedObj instanceof ColumnSet) {
      columnSet=(ColumnSet)selectedObj;
    }
    ColumnSetHelper.addColumn(columnSetSwitch,columnSet);
    PrimaryKey primaryKey=ColumnHelper.getPrimaryKey(columnSetSwitch);
    if (primaryKey != null) {
      TableHelper.addPrimaryKey((TdTable)columnSet,columnSetSwitch);
    }
    Set<ForeignKey> foreignKeySet=ColumnHelper.getForeignKey(columnSetSwitch);
    for (    ForeignKey foreignKey : foreignKeySet) {
      if (foreignKey != null) {
        TableHelper.addForeignKey((TdTable)columnSet,foreignKey,columnSetSwitch);
      }
    }
    return;
  }
  TdExpression addedExpression=DataqualitySwitchHelper.TDEXPRESSION_SWITCH.doSwitch(rightElement);
  if (addedExpression != null) {
    TdColumn parentColumn=SwitchHelpers.COLUMN_SWITCH.doSwitch(addElement.getLeftParent());
    if (parentColumn != null) {
      parentColumn.setInitialValue(addedExpression);
    }
  }
}",0.8458849698125198
138028,"@Override protected void handleAddElement(ModelElementChangeRightTarget addElement){
  EObject rightElement=addElement.getRightElement();
  TdColumn columnSetSwitch=SwitchHelpers.COLUMN_SWITCH.doSwitch(rightElement);
  if (columnSetSwitch != null) {
    ColumnSet columnSet=null;
    if (selectedObj instanceof DBColumnFolderRepNode) {
      DBColumnFolderRepNode columnFolderRepNode=(DBColumnFolderRepNode)selectedObj;
      columnSet=columnFolderRepNode.getColumnSet();
    }
 else     if (selectedObj instanceof ColumnSet) {
      columnSet=(ColumnSet)selectedObj;
    }
    ColumnSetHelper.addColumn(columnSetSwitch,columnSet);
    PrimaryKey primaryKey=ColumnHelper.getPrimaryKey(columnSetSwitch);
    if (primaryKey != null) {
      TableHelper.addPrimaryKey((TdTable)columnSet,primaryKey);
      PrimaryKey newPrimaryKey=TableHelper.addPrimaryKey((TdTable)columnSet,primaryKey);
      columnSetSwitch.getUniqueKey().remove(primaryKey);
      columnSetSwitch.getUniqueKey().add(newPrimaryKey);
    }
    Set<ForeignKey> foreignKeySet=ColumnHelper.getForeignKey(columnSetSwitch);
    for (    ForeignKey foreignKey : foreignKeySet) {
      if (foreignKey != null) {
        ForeignKey newForeignKey=TableHelper.addForeignKey((TdTable)columnSet,foreignKey);
        columnSetSwitch.getKeyRelationship().remove(foreignKey);
        columnSetSwitch.getKeyRelationship().add(newForeignKey);
      }
    }
    return;
  }
  TdExpression addedExpression=DataqualitySwitchHelper.TDEXPRESSION_SWITCH.doSwitch(rightElement);
  if (addedExpression != null) {
    TdColumn parentColumn=SwitchHelpers.COLUMN_SWITCH.doSwitch(addElement.getLeftParent());
    if (parentColumn != null) {
      parentColumn.setInitialValue(addedExpression);
    }
  }
}","@Override protected void handleAddElement(ModelElementChangeRightTarget addElement){
  EObject rightElement=addElement.getRightElement();
  TdColumn columnSetSwitch=SwitchHelpers.COLUMN_SWITCH.doSwitch(rightElement);
  if (columnSetSwitch != null) {
    ColumnSet columnSet=null;
    if (selectedObj instanceof DBColumnFolderRepNode) {
      DBColumnFolderRepNode columnFolderRepNode=(DBColumnFolderRepNode)selectedObj;
      columnSet=columnFolderRepNode.getColumnSet();
    }
 else     if (selectedObj instanceof ColumnSet) {
      columnSet=(ColumnSet)selectedObj;
    }
    ColumnSetHelper.addColumn(columnSetSwitch,columnSet);
    PrimaryKey primaryKey=ColumnHelper.getPrimaryKey(columnSetSwitch);
    if (primaryKey != null) {
      TableHelper.addPrimaryKey((TdTable)columnSet,columnSetSwitch);
    }
    Set<ForeignKey> foreignKeySet=ColumnHelper.getForeignKey(columnSetSwitch);
    for (    ForeignKey foreignKey : foreignKeySet) {
      if (foreignKey != null) {
        TableHelper.addForeignKey((TdTable)columnSet,foreignKey,columnSetSwitch);
      }
    }
    return;
  }
  TdExpression addedExpression=DataqualitySwitchHelper.TDEXPRESSION_SWITCH.doSwitch(rightElement);
  if (addedExpression != null) {
    TdColumn parentColumn=SwitchHelpers.COLUMN_SWITCH.doSwitch(addElement.getLeftParent());
    if (parentColumn != null) {
      parentColumn.setInitialValue(addedExpression);
    }
  }
}",0.8458849698125198
138029,"public Image getImage(Object element){
  Image image=super.getImage(element);
  if (element instanceof IRepositoryNode) {
    IRepositoryNode node=(IRepositoryNode)element;
    IRepositoryViewObject viewObject=node.getObject();
    ENodeType type=node.getType();
    if (node instanceof ReportAnalysisRepNode) {
      image=ImageLib.getImage(ImageLib.ANALYSIS_OBJECT);
    }
    if (element instanceof RecycleBinRepNode) {
      image=ImageLib.getImage(ImageLib.RECYCLEBIN_EMPTY);
    }
 else     if (type.equals(ENodeType.SYSTEM_FOLDER)) {
      if (viewObject.getLabel().equals(EResourceConstant.DATA_PROFILING.getName())) {
        image=ImageLib.getImage(ImageLib.DATA_PROFILING);
      }
 else       if (viewObject.getLabel().equals(EResourceConstant.METADATA.getName())) {
        image=ImageLib.getImage(ImageLib.METADATA);
      }
 else       if (node instanceof DBConnectionFolderRepNode) {
        image=ImageLib.getImage(ImageLib.CONNECTION);
      }
 else       if (node instanceof MDMConnectionFolderRepNode) {
        image=ImageLib.getImage(ImageLib.MDM_CONNECTION);
      }
 else       if (viewObject.getLabel().equals(EResourceConstant.FILEDELIMITED.getName())) {
        image=ImageLib.getImage(ImageLib.FILE_DELIMITED);
      }
 else       if (viewObject.getLabel().equals(EResourceConstant.LIBRARIES.getName())) {
        image=ImageLib.getImage(ImageLib.LIBRARIES);
      }
 else       if (viewObject.getLabel().equals(EResourceConstant.EXCHANGE.getName())) {
        image=ImageLib.getImage(ImageLib.EXCHANGE);
      }
 else {
        image=ImageLib.getImage(ImageLib.FOLDERNODE_IMAGE);
      }
    }
 else     if (type.equals(ENodeType.SIMPLE_FOLDER)) {
      image=ImageLib.getImage(ImageLib.FOLDERNODE_IMAGE);
    }
 else     if (type.equals(ENodeType.REPOSITORY_ELEMENT)) {
      if (node instanceof DBConnectionRepNode) {
        if (!isSupportedConnection(node)) {
          image=ImageLib.createErrorIcon(ImageLib.TD_DATAPROVIDER).createImage();
        }
        image=ImageLib.getImage(ImageLib.TD_DATAPROVIDER);
      }
 else       if (node instanceof MDMConnectionRepNode) {
        image=ImageLib.getImage(ImageLib.MDM_CONNECTION);
      }
 else       if (node instanceof DFConnectionRepNode) {
        image=ImageLib.getImage(ImageLib.FILE_DELIMITED);
      }
 else       if (node instanceof AnalysisRepNode) {
        image=ImageLib.getImage(ImageLib.ANALYSIS_OBJECT);
      }
 else       if (node instanceof ReportRepNode) {
        image=ImageLib.getImage(ImageLib.REPORT_OBJECT);
      }
 else       if (node instanceof SysIndicatorDefinitionRepNode) {
        image=ImageLib.getImage(ImageLib.IND_DEFINITION);
      }
 else       if (node instanceof PatternRepNode) {
        image=ImageLib.getImage(ImageLib.PATTERN_REG);
      }
 else       if (node instanceof RuleRepNode) {
        image=ImageLib.getImage(ImageLib.DQ_RULE);
      }
 else       if (node instanceof SourceFileRepNode) {
        image=ImageLib.getImage(ImageLib.SOURCE_FILE);
      }
 else       if (node instanceof ExchangeCategoryRepNode || node instanceof ExchangeComponentRepNode) {
        image=ImageLib.getImage(ImageLib.EXCHANGE);
      }
 else       if (node instanceof RepositoryNode) {
        Image imageNode=getImageByContentType((RepositoryNode)node);
        if (image != null) {
          image=imageNode;
        }
      }
      if (viewObject != null) {
        if (ERepositoryStatus.LOCK_BY_USER == ProxyRepositoryFactory.getInstance().getStatus(viewObject)) {
          image=ImageLib.createLockedIcon(ImageDescriptor.createFromImage(image)).createImage();
        }
 else         if (ERepositoryStatus.LOCK_BY_OTHER == ProxyRepositoryFactory.getInstance().getStatus(viewObject)) {
          image=ImageLib.createLockedByOtherIcon(ImageDescriptor.createFromImage(image)).createImage();
        }
      }
    }
 else     if (type.equals(ENodeType.TDQ_REPOSITORY_ELEMENT)) {
      if (node instanceof DBCatalogRepNode) {
        image=ImageLib.getImage(ImageLib.CATALOG);
      }
 else       if (node instanceof DBSchemaRepNode) {
        image=ImageLib.getImage(ImageLib.SCHEMA);
      }
 else       if (node instanceof DBTableFolderRepNode) {
        image=ImageLib.getImage(ImageLib.FOLDERNODE_IMAGE);
      }
 else       if (node instanceof DBViewFolderRepNode) {
        image=ImageLib.getImage(ImageLib.FOLDERNODE_IMAGE);
      }
 else       if (node instanceof DBTableRepNode || node instanceof DFTableRepNode) {
        image=ImageLib.getImage(ImageLib.TABLE);
      }
 else       if (node instanceof DBViewRepNode) {
        image=ImageLib.getImage(ImageLib.VIEW);
      }
 else       if (node instanceof DBColumnRepNode) {
        if (((DBColumnRepNode)node).isKey()) {
          image=ImageLib.getImage(ImageLib.PK_COLUMN);
        }
 else {
          image=ImageLib.getImage(ImageLib.TD_COLUMN);
        }
      }
 else       if (node instanceof DFColumnRepNode) {
        image=ImageLib.getImage(ImageLib.TD_COLUMN);
      }
 else       if (node instanceof MDMSchemaRepNode) {
        image=ImageLib.getImage(ImageLib.XML_DOC);
      }
 else       if (node instanceof MDMXmlElementRepNode) {
        image=ImageLib.getImage(ImageLib.XML_ELEMENT_DOC);
      }
 else       if (node instanceof DBColumnFolderRepNode || node instanceof DFColumnFolderRepNode) {
        image=ImageLib.getImage(ImageLib.FOLDERNODE_IMAGE);
      }
 else       if (node instanceof JrxmlTempleteRepNode) {
        image=ImageLib.getImage(ImageLib.XML_DOC);
      }
    }
  }
  return image;
}","public Image getImage(Object element){
  Image image=super.getImage(element);
  if (element instanceof IRepositoryNode) {
    IRepositoryNode node=(IRepositoryNode)element;
    IRepositoryViewObject viewObject=node.getObject();
    ENodeType type=node.getType();
    if (node instanceof ReportAnalysisRepNode) {
      image=ImageLib.getImage(ImageLib.ANALYSIS_OBJECT);
    }
    if (element instanceof RecycleBinRepNode) {
      image=ImageLib.getImage(ImageLib.RECYCLEBIN_EMPTY);
    }
 else     if (type.equals(ENodeType.SYSTEM_FOLDER)) {
      if (viewObject.getLabel().equals(EResourceConstant.DATA_PROFILING.getName())) {
        image=ImageLib.getImage(ImageLib.DATA_PROFILING);
      }
 else       if (viewObject.getLabel().equals(EResourceConstant.METADATA.getName())) {
        image=ImageLib.getImage(ImageLib.METADATA);
      }
 else       if (node instanceof DBConnectionFolderRepNode) {
        image=ImageLib.getImage(ImageLib.CONNECTION);
      }
 else       if (node instanceof MDMConnectionFolderRepNode) {
        image=ImageLib.getImage(ImageLib.MDM_CONNECTION);
      }
 else       if (viewObject.getLabel().equals(EResourceConstant.FILEDELIMITED.getName())) {
        image=ImageLib.getImage(ImageLib.FILE_DELIMITED);
      }
 else       if (viewObject.getLabel().equals(EResourceConstant.LIBRARIES.getName())) {
        image=ImageLib.getImage(ImageLib.LIBRARIES);
      }
 else       if (viewObject.getLabel().equals(EResourceConstant.EXCHANGE.getName())) {
        image=ImageLib.getImage(ImageLib.EXCHANGE);
      }
 else {
        image=ImageLib.getImage(ImageLib.FOLDERNODE_IMAGE);
      }
    }
 else     if (type.equals(ENodeType.SIMPLE_FOLDER)) {
      image=ImageLib.getImage(ImageLib.FOLDERNODE_IMAGE);
    }
 else     if (type.equals(ENodeType.REPOSITORY_ELEMENT)) {
      if (node instanceof DBConnectionRepNode) {
        if (!isSupportedConnection(node)) {
          image=ImageLib.createErrorIcon(ImageLib.TD_DATAPROVIDER).createImage();
        }
        image=ImageLib.getImage(ImageLib.TD_DATAPROVIDER);
      }
 else       if (node instanceof MDMConnectionRepNode) {
        image=ImageLib.getImage(ImageLib.MDM_CONNECTION);
      }
 else       if (node instanceof MDMSchemaRepNode) {
        image=ImageLib.getImage(ImageLib.XML_DOC);
      }
 else       if (node instanceof MDMXmlElementRepNode) {
        image=ImageLib.getImage(ImageLib.XML_ELEMENT_DOC);
      }
 else       if (node instanceof DFConnectionRepNode) {
        image=ImageLib.getImage(ImageLib.FILE_DELIMITED);
      }
 else       if (node instanceof AnalysisRepNode) {
        image=ImageLib.getImage(ImageLib.ANALYSIS_OBJECT);
      }
 else       if (node instanceof ReportRepNode) {
        image=ImageLib.getImage(ImageLib.REPORT_OBJECT);
      }
 else       if (node instanceof SysIndicatorDefinitionRepNode) {
        image=ImageLib.getImage(ImageLib.IND_DEFINITION);
      }
 else       if (node instanceof PatternRepNode) {
        image=ImageLib.getImage(ImageLib.PATTERN_REG);
      }
 else       if (node instanceof RuleRepNode) {
        image=ImageLib.getImage(ImageLib.DQ_RULE);
      }
 else       if (node instanceof SourceFileRepNode) {
        image=ImageLib.getImage(ImageLib.SOURCE_FILE);
      }
 else       if (node instanceof ExchangeCategoryRepNode || node instanceof ExchangeComponentRepNode) {
        image=ImageLib.getImage(ImageLib.EXCHANGE);
      }
 else       if (node instanceof RepositoryNode) {
        Image imageNode=getImageByContentType((RepositoryNode)node);
        if (image != null) {
          image=imageNode;
        }
      }
      if (viewObject != null) {
        if (ERepositoryStatus.LOCK_BY_USER == ProxyRepositoryFactory.getInstance().getStatus(viewObject)) {
          image=ImageLib.createLockedIcon(ImageDescriptor.createFromImage(image)).createImage();
        }
 else         if (ERepositoryStatus.LOCK_BY_OTHER == ProxyRepositoryFactory.getInstance().getStatus(viewObject)) {
          image=ImageLib.createLockedByOtherIcon(ImageDescriptor.createFromImage(image)).createImage();
        }
      }
    }
 else     if (type.equals(ENodeType.TDQ_REPOSITORY_ELEMENT)) {
      if (node instanceof DBCatalogRepNode) {
        image=ImageLib.getImage(ImageLib.CATALOG);
      }
 else       if (node instanceof DBSchemaRepNode) {
        image=ImageLib.getImage(ImageLib.SCHEMA);
      }
 else       if (node instanceof DBTableFolderRepNode) {
        image=ImageLib.getImage(ImageLib.FOLDERNODE_IMAGE);
      }
 else       if (node instanceof DBViewFolderRepNode) {
        image=ImageLib.getImage(ImageLib.FOLDERNODE_IMAGE);
      }
 else       if (node instanceof DBTableRepNode || node instanceof DFTableRepNode) {
        image=ImageLib.getImage(ImageLib.TABLE);
      }
 else       if (node instanceof DBViewRepNode) {
        image=ImageLib.getImage(ImageLib.VIEW);
      }
 else       if (node instanceof DBColumnRepNode) {
        if (((DBColumnRepNode)node).isKey()) {
          image=ImageLib.getImage(ImageLib.PK_COLUMN);
        }
 else {
          image=ImageLib.getImage(ImageLib.TD_COLUMN);
        }
      }
 else       if (node instanceof DFColumnRepNode) {
        image=ImageLib.getImage(ImageLib.TD_COLUMN);
      }
 else       if (node instanceof MDMSchemaRepNode) {
        image=ImageLib.getImage(ImageLib.XML_DOC);
      }
 else       if (node instanceof MDMXmlElementRepNode) {
        image=ImageLib.getImage(ImageLib.XML_ELEMENT_DOC);
      }
 else       if (node instanceof DBColumnFolderRepNode || node instanceof DFColumnFolderRepNode) {
        image=ImageLib.getImage(ImageLib.FOLDERNODE_IMAGE);
      }
 else       if (node instanceof JrxmlTempleteRepNode) {
        image=ImageLib.getImage(ImageLib.XML_DOC);
      }
    }
  }
  return image;
}",0.9791963015647226
138030,"public static TypedReturnCode<Connection> getRefreshedDataProvider(Connection prevDataProvider){
  TypedReturnCode<Connection> returnProvider=new TypedReturnCode<Connection>();
  boolean mdm=ConnectionUtils.isMdmConnection(prevDataProvider);
  String urlString=JavaSqlFactory.getURL(prevDataProvider);
  String driverClassName=JavaSqlFactory.getDriverClass(prevDataProvider);
  Properties properties=new Properties();
  properties.setProperty(TaggedValueHelper.USER,JavaSqlFactory.getUsername(prevDataProvider));
  properties.setProperty(TaggedValueHelper.PASSWORD,JavaSqlFactory.getPassword(prevDataProvider));
  DBConnectionParameter connectionParameters=new DBConnectionParameter();
  connectionParameters.setName(prevDataProvider.getName());
  connectionParameters.setAuthor(MetadataHelper.getAuthor(prevDataProvider));
  connectionParameters.setDescription(MetadataHelper.getDescription(prevDataProvider));
  connectionParameters.setPurpose(MetadataHelper.getPurpose(prevDataProvider));
  connectionParameters.setStatus(MetadataHelper.getDevStatus(prevDataProvider));
  String dbType=ConnectionUtils.getDatabaseType(prevDataProvider);
  connectionParameters.setSqlTypeName(dbType);
  connectionParameters.setJdbcUrl(urlString);
  connectionParameters.setDriverClassName(driverClassName);
  connectionParameters.setParameters(properties);
  connectionParameters.setDbName(ConnectionUtils.getSID(prevDataProvider));
  connectionParameters.setRetrieveAllMetadata(ConnectionHelper.getRetrieveAllMetadata(prevDataProvider));
  if (prevDataProvider instanceof DatabaseConnection) {
    DatabaseConnection dbConn=(DatabaseConnection)prevDataProvider;
    String uiSchema=dbConn.getUiSchema();
    if (dbConn.isContextMode() && uiSchema != null) {
      uiSchema=ConnectionUtils.getOriginalConntextValue(dbConn,uiSchema);
    }
    connectionParameters.setFilterSchema(uiSchema);
  }
  IMetadataConnection metadataConnection=MetadataFillFactory.getMDMInstance().fillUIParams(ParameterUtil.toMap(connectionParameters));
  List<String> packageFilter=ConnectionUtils.getPackageFilter(connectionParameters);
  Connection conn=null;
  if (mdm) {
    conn=MetadataFillFactory.getMDMInstance().fillUIConnParams(metadataConnection,null);
    MetadataFillFactory.getMDMInstance().fillSchemas(conn,null,packageFilter);
  }
 else {
    TypedReturnCode<?> trc=(TypedReturnCode<?>)MetadataFillFactory.getDBInstance().checkConnection(metadataConnection);
    Object sqlConnObject=trc.getObject();
    DatabaseMetaData dbJDBCMetadata=null;
    if (trc.isOk() && sqlConnObject instanceof java.sql.Connection) {
      java.sql.Connection sqlConn=(java.sql.Connection)sqlConnObject;
      try {
        dbJDBCMetadata=org.talend.utils.sql.ConnectionUtils.getConnectionMetadata(sqlConn);
      }
 catch (      SQLException e) {
        log.error(e,e);
      }
    }
    conn=MetadataFillFactory.getDBInstance().fillUIConnParams(metadataConnection,null);
    try {
      if (ConnectionUtils.isIngres(prevDataProvider) || ConnectionUtils.isInformix(prevDataProvider) || ConnectionUtils.isDB2(prevDataProvider)) {
        packageFilter=null;
      }
      if (ConnectionUtils.isDB2(prevDataProvider) && connectionParameters.getFilterSchema() != null && !connectionParameters.getFilterSchema().equals(""String_Node_Str"")) {
        if (packageFilter == null) {
          packageFilter=new ArrayList<String>();
        }
        packageFilter.add(connectionParameters.getFilterSchema());
      }
      MetadataFillFactory.getDBInstance().fillCatalogs(conn,dbJDBCMetadata,packageFilter);
      MetadataFillFactory.getDBInstance().fillSchemas(conn,dbJDBCMetadata,packageFilter);
    }
 catch (    SQLException e) {
      log.error(e);
    }
  }
  if (conn == null) {
    returnProvider.setOk(false);
  }
 else {
    returnProvider.setObject(conn);
  }
  return returnProvider;
}","public static TypedReturnCode<Connection> getRefreshedDataProvider(Connection prevDataProvider){
  TypedReturnCode<Connection> returnProvider=new TypedReturnCode<Connection>();
  boolean mdm=ConnectionUtils.isMdmConnection(prevDataProvider);
  String urlString=JavaSqlFactory.getURL(prevDataProvider);
  String driverClassName=JavaSqlFactory.getDriverClass(prevDataProvider);
  Properties properties=new Properties();
  properties.setProperty(TaggedValueHelper.USER,JavaSqlFactory.getUsername(prevDataProvider));
  properties.setProperty(TaggedValueHelper.PASSWORD,JavaSqlFactory.getPassword(prevDataProvider));
  DBConnectionParameter connectionParameters=new DBConnectionParameter();
  connectionParameters.setName(prevDataProvider.getName());
  connectionParameters.setAuthor(MetadataHelper.getAuthor(prevDataProvider));
  connectionParameters.setDescription(MetadataHelper.getDescription(prevDataProvider));
  connectionParameters.setPurpose(MetadataHelper.getPurpose(prevDataProvider));
  connectionParameters.setStatus(MetadataHelper.getDevStatus(prevDataProvider));
  String dbType=ConnectionUtils.getDatabaseType(prevDataProvider);
  connectionParameters.setSqlTypeName(dbType);
  connectionParameters.setJdbcUrl(urlString);
  connectionParameters.setDriverClassName(driverClassName);
  connectionParameters.setParameters(properties);
  connectionParameters.setDbName(ConnectionUtils.getSID(prevDataProvider));
  connectionParameters.setRetrieveAllMetadata(ConnectionHelper.getRetrieveAllMetadata(prevDataProvider));
  if (prevDataProvider instanceof DatabaseConnection) {
    DatabaseConnection dbConn=(DatabaseConnection)prevDataProvider;
    String uiSchema=dbConn.getUiSchema();
    if (dbConn.isContextMode() && uiSchema != null) {
      uiSchema=ConnectionUtils.getOriginalConntextValue(dbConn,uiSchema);
    }
    connectionParameters.setFilterSchema(uiSchema);
  }
  IMetadataConnection metadataConnection=MetadataFillFactory.getMDMInstance().fillUIParams(ParameterUtil.toMap(connectionParameters));
  List<String> packageFilter=ConnectionUtils.getPackageFilter(connectionParameters);
  Connection conn=null;
  if (mdm) {
    conn=MetadataFillFactory.getMDMInstance().fillUIConnParams(metadataConnection,null);
    MetadataFillFactory.getMDMInstance().fillSchemas(conn,null,packageFilter);
  }
 else {
    TypedReturnCode<?> trc=(TypedReturnCode<?>)MetadataFillFactory.getDBInstance().checkConnection(metadataConnection);
    Object sqlConnObject=trc.getObject();
    DatabaseMetaData dbJDBCMetadata=null;
    if (trc.isOk() && sqlConnObject instanceof java.sql.Connection) {
      java.sql.Connection sqlConn=(java.sql.Connection)sqlConnObject;
      try {
        dbJDBCMetadata=ExtractMetaDataUtils.getConnectionMetadata(sqlConn);
      }
 catch (      SQLException e) {
        log.error(e,e);
      }
    }
    conn=MetadataFillFactory.getDBInstance().fillUIConnParams(metadataConnection,null);
    try {
      if (ConnectionUtils.isIngres(prevDataProvider) || ConnectionUtils.isInformix(prevDataProvider) || ConnectionUtils.isDB2(prevDataProvider)) {
        packageFilter=null;
      }
      if (ConnectionUtils.isDB2(prevDataProvider) && connectionParameters.getFilterSchema() != null && !connectionParameters.getFilterSchema().equals(""String_Node_Str"")) {
        if (packageFilter == null) {
          packageFilter=new ArrayList<String>();
        }
        packageFilter.add(connectionParameters.getFilterSchema());
      }
      MetadataFillFactory.getDBInstance().fillCatalogs(conn,dbJDBCMetadata,packageFilter);
      MetadataFillFactory.getDBInstance().fillSchemas(conn,dbJDBCMetadata,packageFilter);
    }
 catch (    SQLException e) {
      log.error(e);
    }
  }
  if (conn == null) {
    returnProvider.setOk(false);
  }
 else {
    returnProvider.setObject(conn);
  }
  return returnProvider;
}",0.9940104166666668
138031,"public void run(){
  ImportInfoDialog.openImportInformation(null,DefaultMessagesImpl.getString(""String_Node_Str""),(ReturnCode[])information.toArray(new ReturnCode[0]));
}","public void run(){
  ImportInfoDialog.openImportInformation(getShell(),DefaultMessagesImpl.getString(""String_Node_Str""),(ReturnCode[])information.toArray(new ReturnCode[0]));
}",0.9710982658959536
138032,"@Override public boolean performFinish(){
  if (IMessageProvider.WARNING == page.getMessageType()) {
    if (!MessageDialog.openConfirm(null,DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str""))) {
      return false;
    }
  }
  File file=new File(page.getSourceFile());
  final List<ReturnCode> information=ImportFactory.importToStucture(file,folder,type,page.getSkip(),page.getRename());
  if (0 < information.size()) {
    Display.getDefault().asyncExec(new Runnable(){
      public void run(){
        ImportInfoDialog.openImportInformation(null,DefaultMessagesImpl.getString(""String_Node_Str""),(ReturnCode[])information.toArray(new ReturnCode[0]));
      }
    }
);
  }
  return true;
}","@Override public boolean performFinish(){
  if (IMessageProvider.WARNING == page.getMessageType()) {
    if (!MessageDialog.openConfirm(null,DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str""))) {
      return false;
    }
  }
  File file=new File(page.getSourceFile());
  final List<ReturnCode> information=ImportFactory.importToStucture(file,folder,type,page.getSkip(),page.getRename());
  if (0 < information.size()) {
    Display.getDefault().asyncExec(new Runnable(){
      public void run(){
        ImportInfoDialog.openImportInformation(getShell(),DefaultMessagesImpl.getString(""String_Node_Str""),(ReturnCode[])information.toArray(new ReturnCode[0]));
      }
    }
);
  }
  return true;
}",0.9905405405405404
138033,"private void updateUI(IJobChangeEvent event){
  final List<ReturnCode> information=new ArrayList<ReturnCode>();
  setEnabled(true);
  if (fExtensionDownloaded > 0) {
    for (    IEcosComponent componet : fInstalledComponents) {
      List<File> validFiles=extractFiles(componet,information);
      if (!validFiles.isEmpty()) {
        String categoryName=componet.getCategry().getName();
        EEcosCategory ecosCategory=EEcosCategory.getEcosCategory(categoryName);
        if (ecosCategory != null) {
          EResourceConstant resourceType=ecosCategory.getResource();
          for (          File oneFile : validFiles) {
            information.addAll(ImportFactory.doInport(resourceType,oneFile,componet.getName()));
          }
        }
      }
    }
    if (information.isEmpty()) {
      information.add(new ReturnCode(DefaultMessagesImpl.getString(""String_Node_Str""),false));
    }
    ImportInfoDialog.openImportInformation(null,DefaultMessagesImpl.getString(""String_Node_Str""),(ReturnCode[])information.toArray(new ReturnCode[0]));
    CorePlugin.getDefault().refreshDQView();
  }
}","private void updateUI(IJobChangeEvent event){
  final List<ReturnCode> information=new ArrayList<ReturnCode>();
  setEnabled(true);
  if (fExtensionDownloaded > 0) {
    for (    IEcosComponent componet : fInstalledComponents) {
      List<File> validFiles=extractFiles(componet,information);
      if (!validFiles.isEmpty()) {
        String categoryName=componet.getCategry().getName();
        EEcosCategory ecosCategory=EEcosCategory.getEcosCategory(categoryName);
        if (ecosCategory != null) {
          EResourceConstant resourceType=ecosCategory.getResource();
          for (          File oneFile : validFiles) {
            information.addAll(ImportFactory.doInport(resourceType,oneFile,componet.getName()));
          }
        }
      }
    }
    if (information.isEmpty()) {
      information.add(new ReturnCode(DefaultMessagesImpl.getString(""String_Node_Str""),false));
    }
    ImportInfoDialog.openImportInformation(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),DefaultMessagesImpl.getString(""String_Node_Str""),(ReturnCode[])information.toArray(new ReturnCode[0]));
    CorePlugin.getDefault().refreshDQView();
  }
}",0.9702618730581448
138034,"public void run(){
  ImportInfoDialog.openImportInformation(null,DefaultMessagesImpl.getString(""String_Node_Str""),(ReturnCode[])information.toArray(new ReturnCode[0]));
}","public void run(){
  ImportInfoDialog.openImportInformation(getShell(),DefaultMessagesImpl.getString(""String_Node_Str""),(ReturnCode[])information.toArray(new ReturnCode[0]));
}",0.9710982658959536
138035,"@Override public boolean performFinish(){
  if (IMessageProvider.WARNING == page.getMessageType()) {
    if (!MessageDialog.openConfirm(null,DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str""))) {
      return false;
    }
  }
  File file=new File(page.getSourceFile());
  final List<ReturnCode> information=ImportFactory.importIndicatorToStucture(file,folder,page.getSkip(),page.getRename());
  if (information.isEmpty()) {
    information.add(new ReturnCode(DefaultMessagesImpl.getString(""String_Node_Str""),false));
  }
  Display.getDefault().asyncExec(new Runnable(){
    public void run(){
      ImportInfoDialog.openImportInformation(null,DefaultMessagesImpl.getString(""String_Node_Str""),(ReturnCode[])information.toArray(new ReturnCode[0]));
    }
  }
);
  CorePlugin.getDefault().refreshDQView(RepositoryNodeHelper.getLibrariesFolderNode(EResourceConstant.USER_DEFINED_INDICATORS));
  return true;
}","@Override public boolean performFinish(){
  if (IMessageProvider.WARNING == page.getMessageType()) {
    if (!MessageDialog.openConfirm(null,DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str""))) {
      return false;
    }
  }
  File file=new File(page.getSourceFile());
  final List<ReturnCode> information=ImportFactory.importIndicatorToStucture(file,folder,page.getSkip(),page.getRename());
  if (information.isEmpty()) {
    information.add(new ReturnCode(DefaultMessagesImpl.getString(""String_Node_Str""),false));
  }
  Display.getDefault().asyncExec(new Runnable(){
    public void run(){
      ImportInfoDialog.openImportInformation(getShell(),DefaultMessagesImpl.getString(""String_Node_Str""),(ReturnCode[])information.toArray(new ReturnCode[0]));
    }
  }
);
  CorePlugin.getDefault().refreshDQView(RepositoryNodeHelper.getLibrariesFolderNode(EResourceConstant.USER_DEFINED_INDICATORS));
  return true;
}",0.9926701570680628
138036,"public void run(){
  ImportInfoDialog.openImportInformation(null,DefaultMessagesImpl.getString(""String_Node_Str""),(ReturnCode[])information.toArray(new ReturnCode[0]));
}","public void run(){
  ImportInfoDialog.openImportInformation(getShell(),DefaultMessagesImpl.getString(""String_Node_Str""),(ReturnCode[])information.toArray(new ReturnCode[0]));
}",0.9710982658959536
138037,"@Override public boolean performFinish(){
  if (IMessageProvider.WARNING == page.getMessageType()) {
    if (!MessageDialog.openConfirm(getShell(),DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str""))) {
      return false;
    }
  }
  File file=new File(page.getSourceFile());
  final List<ReturnCode> information=ImportFactory.importParserRuleToStucture(file,folder,page.getSkip(),page.getRename());
  if (0 < information.size()) {
    Display.getDefault().asyncExec(new Runnable(){
      public void run(){
        ImportInfoDialog.openImportInformation(null,DefaultMessagesImpl.getString(""String_Node_Str""),(ReturnCode[])information.toArray(new ReturnCode[0]));
      }
    }
);
    CorePlugin.getDefault().refreshDQView(RepositoryNodeHelper.getLibrariesFolderNode(EResourceConstant.RULES_PARSER));
  }
  return true;
}","@Override public boolean performFinish(){
  if (IMessageProvider.WARNING == page.getMessageType()) {
    if (!MessageDialog.openConfirm(getShell(),DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str""))) {
      return false;
    }
  }
  File file=new File(page.getSourceFile());
  final List<ReturnCode> information=ImportFactory.importParserRuleToStucture(file,folder,page.getSkip(),page.getRename());
  if (0 < information.size()) {
    Display.getDefault().asyncExec(new Runnable(){
      public void run(){
        ImportInfoDialog.openImportInformation(getShell(),DefaultMessagesImpl.getString(""String_Node_Str""),(ReturnCode[])information.toArray(new ReturnCode[0]));
      }
    }
);
    CorePlugin.getDefault().refreshDQView(RepositoryNodeHelper.getLibrariesFolderNode(EResourceConstant.RULES_PARSER));
  }
  return true;
}",0.9919632606199772
138038,"public void run(IIntroSite site,Properties params){
  PlatformUI.getWorkbench().getIntroManager().closeIntro(PlatformUI.getWorkbench().getIntroManager().getIntro());
  run();
}","public void run(IIntroSite site,Properties params){
  IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
  if (factory.isUserReadOnlyOnCurrentProject()) {
    MessageDialog.openWarning(null,""String_Node_Str"",""String_Node_Str"");
  }
 else {
    PlatformUI.getWorkbench().getIntroManager().closeIntro(PlatformUI.getWorkbench().getIntroManager().getIntro());
    IWorkbenchWindow workbenchWindow=PlatformUI.getWorkbench().getActiveWorkbenchWindow();
    if (null == workbenchWindow) {
      return;
    }
    IWorkbenchPage workbenchPage=workbenchWindow.getActivePage();
    if (null == workbenchPage) {
      return;
    }
    IPerspectiveDescriptor currentPerspective=workbenchPage.getPerspective();
    if (!IBrandingConfiguration.PERSPECTIVE_DQ_ID.equals(currentPerspective.getId())) {
      try {
        workbenchWindow.getWorkbench().showPerspective(IBrandingConfiguration.PERSPECTIVE_DQ_ID,workbenchWindow);
        workbenchPage=workbenchWindow.getActivePage();
      }
 catch (      WorkbenchException e) {
        ExceptionHandler.process(e);
        return;
      }
    }
    run();
  }
}",0.261609907120743
138039,"/** 
 * TDQ-5241 Test method for  {@link org.talend.dataprofiler.core.ui.utils.ModelElementIndicatorRule#patternRule(org.talend.dq.nodes.indicator.type.IndicatorEnum,orgomg.cwm.objectmodel.core.ModelElement,org.talend.dataquality.analysis.ExecutionLanguage)}.
 */
@Test public void testPatternRule(){
  TdSqlDataType tdsql=mock(TdSqlDataType.class);
  TdColumn me=mock(TdColumn.class);
  when(me.getSqlDataType()).thenReturn(tdsql);
  when(tdsql.getJavaDataType()).thenReturn(Types.TIME);
  when(me.getContentType()).thenReturn(""String_Node_Str"");
  Assert.assertTrue(ModelElementIndicatorRule.patternRule(IndicatorEnum.ModeIndicatorEnum,me,ExecutionLanguage.JAVA));
  Assert.assertFalse(ModelElementIndicatorRule.patternRule(IndicatorEnum.FrequencyIndicatorEnum,me,ExecutionLanguage.JAVA));
  Assert.assertFalse(ModelElementIndicatorRule.patternRule(IndicatorEnum.LowFrequencyIndicatorEnum,me,ExecutionLanguage.JAVA));
  Assert.assertFalse(ModelElementIndicatorRule.patternRule(IndicatorEnum.DateFrequencyIndicatorEnum,me,ExecutionLanguage.JAVA));
  Assert.assertFalse(ModelElementIndicatorRule.patternRule(IndicatorEnum.WeekFrequencyIndicatorEnum,me,ExecutionLanguage.JAVA));
  Assert.assertFalse(ModelElementIndicatorRule.patternRule(IndicatorEnum.MonthFrequencyIndicatorEnum,me,ExecutionLanguage.JAVA));
  Assert.assertFalse(ModelElementIndicatorRule.patternRule(IndicatorEnum.QuarterFrequencyIndicatorEnum,me,ExecutionLanguage.JAVA));
  Assert.assertFalse(ModelElementIndicatorRule.patternRule(IndicatorEnum.YearFrequencyIndicatorEnum,me,ExecutionLanguage.JAVA));
  Assert.assertFalse(ModelElementIndicatorRule.patternRule(IndicatorEnum.DateLowFrequencyIndicatorEnum,me,ExecutionLanguage.JAVA));
  Assert.assertFalse(ModelElementIndicatorRule.patternRule(IndicatorEnum.WeekLowFrequencyIndicatorEnum,me,ExecutionLanguage.JAVA));
  Assert.assertFalse(ModelElementIndicatorRule.patternRule(IndicatorEnum.MonthLowFrequencyIndicatorEnum,me,ExecutionLanguage.JAVA));
  Assert.assertFalse(ModelElementIndicatorRule.patternRule(IndicatorEnum.QuarterLowFrequencyIndicatorEnum,me,ExecutionLanguage.JAVA));
  Assert.assertFalse(ModelElementIndicatorRule.patternRule(IndicatorEnum.YearLowFrequencyIndicatorEnum,me,ExecutionLanguage.JAVA));
}","/** 
 * TDQ-5241 Test method for  {@link org.talend.dataprofiler.core.ui.utils.ModelElementIndicatorRule#patternRule(org.talend.dq.nodes.indicator.type.IndicatorEnum,orgomg.cwm.objectmodel.core.ModelElement,org.talend.dataquality.analysis.ExecutionLanguage)}.
 */
@Test public void testPatternRule(){
  TdSqlDataType tdsql=mock(TdSqlDataType.class);
  TdColumn me=mock(TdColumn.class);
  when(me.getSqlDataType()).thenReturn(tdsql);
  when(tdsql.getJavaDataType()).thenReturn(Types.TIME);
  when(me.getContentType()).thenReturn(""String_Node_Str"");
  Assert.assertTrue(ModelElementIndicatorRule.patternRule(IndicatorEnum.ModeIndicatorEnum,me,ExecutionLanguage.JAVA));
  Assert.assertFalse(ModelElementIndicatorRule.patternRule(IndicatorEnum.DateFrequencyIndicatorEnum,me,ExecutionLanguage.JAVA));
  Assert.assertFalse(ModelElementIndicatorRule.patternRule(IndicatorEnum.WeekFrequencyIndicatorEnum,me,ExecutionLanguage.JAVA));
  Assert.assertFalse(ModelElementIndicatorRule.patternRule(IndicatorEnum.MonthFrequencyIndicatorEnum,me,ExecutionLanguage.JAVA));
  Assert.assertFalse(ModelElementIndicatorRule.patternRule(IndicatorEnum.QuarterFrequencyIndicatorEnum,me,ExecutionLanguage.JAVA));
  Assert.assertFalse(ModelElementIndicatorRule.patternRule(IndicatorEnum.YearFrequencyIndicatorEnum,me,ExecutionLanguage.JAVA));
  Assert.assertFalse(ModelElementIndicatorRule.patternRule(IndicatorEnum.DateLowFrequencyIndicatorEnum,me,ExecutionLanguage.JAVA));
  Assert.assertFalse(ModelElementIndicatorRule.patternRule(IndicatorEnum.WeekLowFrequencyIndicatorEnum,me,ExecutionLanguage.JAVA));
  Assert.assertFalse(ModelElementIndicatorRule.patternRule(IndicatorEnum.MonthLowFrequencyIndicatorEnum,me,ExecutionLanguage.JAVA));
  Assert.assertFalse(ModelElementIndicatorRule.patternRule(IndicatorEnum.QuarterLowFrequencyIndicatorEnum,me,ExecutionLanguage.JAVA));
  Assert.assertFalse(ModelElementIndicatorRule.patternRule(IndicatorEnum.YearLowFrequencyIndicatorEnum,me,ExecutionLanguage.JAVA));
}",0.939976275207592
138040,"public static boolean patternRule(IndicatorEnum indicatorType,ModelElement me,ExecutionLanguage language){
  int javaType=0;
  boolean isDeliFileColumn=!(me instanceof TdColumn) && me instanceof MetadataColumn;
  if (me instanceof TdColumn) {
    javaType=((TdColumn)me).getSqlDataType().getJavaDataType();
  }
 else   if (me instanceof TdXmlElementType) {
    javaType=XSDDataTypeConvertor.convertToJDBCType(((TdXmlElementType)me).getJavaType());
  }
 else   if (isDeliFileColumn) {
    javaType=TalendTypeConvert.convertToJDBCType(((MetadataColumn)me).getTalendType());
  }
  DataminingType dataminingType=MetadataHelper.getDataminingType(me);
  if (dataminingType == null || isDeliFileColumn) {
    dataminingType=MetadataHelper.getDefaultDataminingType(javaType);
  }
  if (javaType == Types.LONGVARCHAR && ExecutionLanguage.SQL.equals(language)) {
    return enableLongVarchar(indicatorType,dataminingType,me);
  }
switch (indicatorType) {
case CountsIndicatorEnum:
case RowCountIndicatorEnum:
case NullCountIndicatorEnum:
case DistinctCountIndicatorEnum:
case UniqueIndicatorEnum:
case DuplicateCountIndicatorEnum:
    return true;
case DefValueCountIndicatorEnum:
  Expression initialValue=null;
if (me instanceof TdColumn) {
  initialValue=((TdColumn)me).getInitialValue();
}
if (initialValue != null && initialValue.getBody() != null) {
return initialValue.getBody().length() != 0 || Java2SqlType.isTextInSQL(javaType);
}
break;
case BlankCountIndicatorEnum:
if (me instanceof TdXmlElementType || !Java2SqlType.isTextInSQL(javaType)) {
return false;
}
 else {
return true;
}
case TextIndicatorEnum:
case MinLengthIndicatorEnum:
case MinLengthWithNullIndicatorEnum:
case MinLengthWithBlankIndicatorEnum:
case MinLengthWithBlankNullIndicatorEnum:
case MaxLengthIndicatorEnum:
case MaxLengthWithNullIndicatorEnum:
case MaxLengthWithBlankIndicatorEnum:
case MaxLengthWithBlankNullIndicatorEnum:
case AverageLengthIndicatorEnum:
case AverageLengthWithNullIndicatorEnum:
case AverageLengthWithBlankIndicatorEnum:
case AverageLengthWithNullBlankIndicatorEnum:
if (Java2SqlType.isTextInSQL(javaType)) {
if (dataminingType == DataminingType.NOMINAL || dataminingType == DataminingType.UNSTRUCTURED_TEXT) {
return true;
}
}
break;
case ModeIndicatorEnum:
if (Java2SqlType.isTimeSQL(javaType)) {
return true;
}
case FrequencyIndicatorEnum:
case LowFrequencyIndicatorEnum:
if (Java2SqlType.isTimeSQL(javaType)) {
return false;
}
case PatternFreqIndicatorEnum:
case PatternLowFreqIndicatorEnum:
if (dataminingType == DataminingType.NOMINAL || dataminingType == DataminingType.INTERVAL) {
return true;
}
break;
case DatePatternFreqIndicatorEnum:
if (ExecutionLanguage.JAVA.equals(language) && (Java2SqlType.isDateInSQL(javaType) || Java2SqlType.isTextInSQL(javaType))) {
return true;
}
break;
case SoundexIndicatorEnum:
case SoundexLowIndicatorEnum:
if (!Java2SqlType.isDateInSQL(javaType) && !Java2SqlType.isNumbericInSQL(javaType) && (dataminingType == DataminingType.NOMINAL || dataminingType == DataminingType.INTERVAL)) {
return true;
}
break;
case MeanIndicatorEnum:
case MedianIndicatorEnum:
case IQRIndicatorEnum:
case LowerQuartileIndicatorEnum:
case UpperQuartileIndicatorEnum:
if (Java2SqlType.isNumbericInSQL(javaType)) {
if (dataminingType == DataminingType.INTERVAL) {
return true;
}
}
break;
case BoxIIndicatorEnum:
case RangeIndicatorEnum:
case MinValueIndicatorEnum:
case MaxValueIndicatorEnum:
if (Java2SqlType.isNumbericInSQL(javaType) || Java2SqlType.isDateInSQL(javaType)) {
if (dataminingType == DataminingType.INTERVAL) {
return true;
}
}
break;
case DateFrequencyIndicatorEnum:
case WeekFrequencyIndicatorEnum:
case MonthFrequencyIndicatorEnum:
case QuarterFrequencyIndicatorEnum:
case YearFrequencyIndicatorEnum:
case DateLowFrequencyIndicatorEnum:
case WeekLowFrequencyIndicatorEnum:
case MonthLowFrequencyIndicatorEnum:
case QuarterLowFrequencyIndicatorEnum:
case YearLowFrequencyIndicatorEnum:
if (Java2SqlType.isDateInSQL(javaType) && !Java2SqlType.isTimeSQL(javaType) && (dataminingType == DataminingType.NOMINAL || dataminingType == DataminingType.INTERVAL)) {
return true;
}
break;
case BinFrequencyIndicatorEnum:
case BinLowFrequencyIndicatorEnum:
if (Java2SqlType.isNumbericInSQL(javaType) && (dataminingType == DataminingType.NOMINAL || dataminingType == DataminingType.INTERVAL)) {
return true;
}
break;
case ValidPhoneCountIndicatorEnum:
case PossiblePhoneCountIndicatorEnum:
case ValidRegCodeCountIndicatorEnum:
case InvalidRegCodeCountIndicatorEnum:
case WellFormE164PhoneCountIndicatorEnum:
case WellFormIntePhoneCountIndicatorEnum:
case WellFormNationalPhoneCountIndicatorEnum:
case PhoneNumbStatisticsIndicatorEnum:
case FormatFreqPieIndictorEnum:
if (ExecutionLanguage.JAVA.equals(language) && (dataminingType == DataminingType.NOMINAL || dataminingType == DataminingType.INTERVAL)) {
return true;
}
break;
default :
return false;
}
return false;
}","public static boolean patternRule(IndicatorEnum indicatorType,ModelElement me,ExecutionLanguage language){
  int javaType=0;
  boolean isDeliFileColumn=!(me instanceof TdColumn) && me instanceof MetadataColumn;
  if (me instanceof TdColumn) {
    javaType=((TdColumn)me).getSqlDataType().getJavaDataType();
  }
 else   if (me instanceof TdXmlElementType) {
    javaType=XSDDataTypeConvertor.convertToJDBCType(((TdXmlElementType)me).getJavaType());
  }
 else   if (isDeliFileColumn) {
    javaType=TalendTypeConvert.convertToJDBCType(((MetadataColumn)me).getTalendType());
  }
  DataminingType dataminingType=MetadataHelper.getDataminingType(me);
  if (dataminingType == null || isDeliFileColumn) {
    dataminingType=MetadataHelper.getDefaultDataminingType(javaType);
  }
  if (javaType == Types.LONGVARCHAR && ExecutionLanguage.SQL.equals(language)) {
    return enableLongVarchar(indicatorType,dataminingType,me);
  }
switch (indicatorType) {
case CountsIndicatorEnum:
case RowCountIndicatorEnum:
case NullCountIndicatorEnum:
case DistinctCountIndicatorEnum:
case UniqueIndicatorEnum:
case DuplicateCountIndicatorEnum:
    return true;
case DefValueCountIndicatorEnum:
  Expression initialValue=null;
if (me instanceof TdColumn) {
  initialValue=((TdColumn)me).getInitialValue();
}
if (initialValue != null && initialValue.getBody() != null) {
return initialValue.getBody().length() != 0 || Java2SqlType.isTextInSQL(javaType);
}
break;
case BlankCountIndicatorEnum:
if (me instanceof TdXmlElementType || !Java2SqlType.isTextInSQL(javaType)) {
return false;
}
 else {
return true;
}
case TextIndicatorEnum:
case MinLengthIndicatorEnum:
case MinLengthWithNullIndicatorEnum:
case MinLengthWithBlankIndicatorEnum:
case MinLengthWithBlankNullIndicatorEnum:
case MaxLengthIndicatorEnum:
case MaxLengthWithNullIndicatorEnum:
case MaxLengthWithBlankIndicatorEnum:
case MaxLengthWithBlankNullIndicatorEnum:
case AverageLengthIndicatorEnum:
case AverageLengthWithNullIndicatorEnum:
case AverageLengthWithBlankIndicatorEnum:
case AverageLengthWithNullBlankIndicatorEnum:
if (Java2SqlType.isTextInSQL(javaType)) {
if (dataminingType == DataminingType.NOMINAL || dataminingType == DataminingType.UNSTRUCTURED_TEXT) {
return true;
}
}
break;
case ModeIndicatorEnum:
if (Java2SqlType.isTimeSQL(javaType)) {
return true;
}
case FrequencyIndicatorEnum:
case LowFrequencyIndicatorEnum:
case PatternFreqIndicatorEnum:
case PatternLowFreqIndicatorEnum:
if (dataminingType == DataminingType.NOMINAL || dataminingType == DataminingType.INTERVAL) {
return true;
}
break;
case DatePatternFreqIndicatorEnum:
if (ExecutionLanguage.JAVA.equals(language) && (Java2SqlType.isDateInSQL(javaType) || Java2SqlType.isTextInSQL(javaType))) {
return true;
}
break;
case SoundexIndicatorEnum:
case SoundexLowIndicatorEnum:
if (!Java2SqlType.isDateInSQL(javaType) && !Java2SqlType.isNumbericInSQL(javaType) && (dataminingType == DataminingType.NOMINAL || dataminingType == DataminingType.INTERVAL)) {
return true;
}
break;
case MeanIndicatorEnum:
case MedianIndicatorEnum:
case IQRIndicatorEnum:
case LowerQuartileIndicatorEnum:
case UpperQuartileIndicatorEnum:
if (Java2SqlType.isNumbericInSQL(javaType)) {
if (dataminingType == DataminingType.INTERVAL) {
return true;
}
}
break;
case BoxIIndicatorEnum:
case RangeIndicatorEnum:
case MinValueIndicatorEnum:
case MaxValueIndicatorEnum:
if (Java2SqlType.isNumbericInSQL(javaType) || Java2SqlType.isDateInSQL(javaType)) {
if (dataminingType == DataminingType.INTERVAL) {
return true;
}
}
break;
case DateFrequencyIndicatorEnum:
case WeekFrequencyIndicatorEnum:
case MonthFrequencyIndicatorEnum:
case QuarterFrequencyIndicatorEnum:
case YearFrequencyIndicatorEnum:
case DateLowFrequencyIndicatorEnum:
case WeekLowFrequencyIndicatorEnum:
case MonthLowFrequencyIndicatorEnum:
case QuarterLowFrequencyIndicatorEnum:
case YearLowFrequencyIndicatorEnum:
if (Java2SqlType.isDateInSQL(javaType) && !Java2SqlType.isTimeSQL(javaType) && (dataminingType == DataminingType.NOMINAL || dataminingType == DataminingType.INTERVAL)) {
return true;
}
break;
case BinFrequencyIndicatorEnum:
case BinLowFrequencyIndicatorEnum:
if (Java2SqlType.isNumbericInSQL(javaType) && (dataminingType == DataminingType.NOMINAL || dataminingType == DataminingType.INTERVAL)) {
return true;
}
break;
case ValidPhoneCountIndicatorEnum:
case PossiblePhoneCountIndicatorEnum:
case ValidRegCodeCountIndicatorEnum:
case InvalidRegCodeCountIndicatorEnum:
case WellFormE164PhoneCountIndicatorEnum:
case WellFormIntePhoneCountIndicatorEnum:
case WellFormNationalPhoneCountIndicatorEnum:
case PhoneNumbStatisticsIndicatorEnum:
case FormatFreqPieIndictorEnum:
if (ExecutionLanguage.JAVA.equals(language) && (dataminingType == DataminingType.NOMINAL || dataminingType == DataminingType.INTERVAL)) {
return true;
}
break;
default :
return false;
}
return false;
}",0.9942363112391932
138041,"public void run(){
  ImportInfoDialog.openImportInformation(null,DefaultMessagesImpl.getString(""String_Node_Str""),(ReturnCode[])information.toArray(new ReturnCode[0]));
}","public void run(){
  ImportInfoDialog.openImportInformation(getShell(),DefaultMessagesImpl.getString(""String_Node_Str""),(ReturnCode[])information.toArray(new ReturnCode[0]));
}",0.9710982658959536
138042,"@Override public boolean performFinish(){
  if (IMessageProvider.WARNING == page.getMessageType()) {
    if (!MessageDialog.openConfirm(null,DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str""))) {
      return false;
    }
  }
  File file=new File(page.getSourceFile());
  final List<ReturnCode> information=ImportFactory.importToStucture(file,folder,type,page.getSkip(),page.getRename());
  if (0 < information.size()) {
    Display.getDefault().asyncExec(new Runnable(){
      public void run(){
        ImportInfoDialog.openImportInformation(null,DefaultMessagesImpl.getString(""String_Node_Str""),(ReturnCode[])information.toArray(new ReturnCode[0]));
      }
    }
);
  }
  return true;
}","@Override public boolean performFinish(){
  if (IMessageProvider.WARNING == page.getMessageType()) {
    if (!MessageDialog.openConfirm(null,DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str""))) {
      return false;
    }
  }
  File file=new File(page.getSourceFile());
  final List<ReturnCode> information=ImportFactory.importToStucture(file,folder,type,page.getSkip(),page.getRename());
  if (0 < information.size()) {
    Display.getDefault().asyncExec(new Runnable(){
      public void run(){
        ImportInfoDialog.openImportInformation(getShell(),DefaultMessagesImpl.getString(""String_Node_Str""),(ReturnCode[])information.toArray(new ReturnCode[0]));
      }
    }
);
  }
  return true;
}",0.9905405405405404
138043,"private void updateUI(IJobChangeEvent event){
  final List<ReturnCode> information=new ArrayList<ReturnCode>();
  setEnabled(true);
  if (fExtensionDownloaded > 0) {
    for (    IEcosComponent componet : fInstalledComponents) {
      List<File> validFiles=extractFiles(componet,information);
      if (!validFiles.isEmpty()) {
        String categoryName=componet.getCategry().getName();
        EEcosCategory ecosCategory=EEcosCategory.getEcosCategory(categoryName);
        if (ecosCategory != null) {
          EResourceConstant resourceType=ecosCategory.getResource();
          for (          File oneFile : validFiles) {
            information.addAll(ImportFactory.doInport(resourceType,oneFile,componet.getName()));
          }
        }
      }
    }
    if (information.isEmpty()) {
      information.add(new ReturnCode(DefaultMessagesImpl.getString(""String_Node_Str""),false));
    }
    ImportInfoDialog.openImportInformation(null,DefaultMessagesImpl.getString(""String_Node_Str""),(ReturnCode[])information.toArray(new ReturnCode[0]));
    CorePlugin.getDefault().refreshDQView();
  }
}","private void updateUI(IJobChangeEvent event){
  final List<ReturnCode> information=new ArrayList<ReturnCode>();
  setEnabled(true);
  if (fExtensionDownloaded > 0) {
    for (    IEcosComponent componet : fInstalledComponents) {
      List<File> validFiles=extractFiles(componet,information);
      if (!validFiles.isEmpty()) {
        String categoryName=componet.getCategry().getName();
        EEcosCategory ecosCategory=EEcosCategory.getEcosCategory(categoryName);
        if (ecosCategory != null) {
          EResourceConstant resourceType=ecosCategory.getResource();
          for (          File oneFile : validFiles) {
            information.addAll(ImportFactory.doInport(resourceType,oneFile,componet.getName()));
          }
        }
      }
    }
    if (information.isEmpty()) {
      information.add(new ReturnCode(DefaultMessagesImpl.getString(""String_Node_Str""),false));
    }
    ImportInfoDialog.openImportInformation(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),DefaultMessagesImpl.getString(""String_Node_Str""),(ReturnCode[])information.toArray(new ReturnCode[0]));
    CorePlugin.getDefault().refreshDQView();
  }
}",0.9702618730581448
138044,"public void run(){
  ImportInfoDialog.openImportInformation(null,DefaultMessagesImpl.getString(""String_Node_Str""),(ReturnCode[])information.toArray(new ReturnCode[0]));
}","public void run(){
  ImportInfoDialog.openImportInformation(getShell(),DefaultMessagesImpl.getString(""String_Node_Str""),(ReturnCode[])information.toArray(new ReturnCode[0]));
}",0.9710982658959536
138045,"@Override public boolean performFinish(){
  if (IMessageProvider.WARNING == page.getMessageType()) {
    if (!MessageDialog.openConfirm(null,DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str""))) {
      return false;
    }
  }
  File file=new File(page.getSourceFile());
  final List<ReturnCode> information=ImportFactory.importIndicatorToStucture(file,folder,page.getSkip(),page.getRename());
  if (information.isEmpty()) {
    information.add(new ReturnCode(DefaultMessagesImpl.getString(""String_Node_Str""),false));
  }
  Display.getDefault().asyncExec(new Runnable(){
    public void run(){
      ImportInfoDialog.openImportInformation(null,DefaultMessagesImpl.getString(""String_Node_Str""),(ReturnCode[])information.toArray(new ReturnCode[0]));
    }
  }
);
  CorePlugin.getDefault().refreshDQView(RepositoryNodeHelper.getLibrariesFolderNode(EResourceConstant.USER_DEFINED_INDICATORS));
  return true;
}","@Override public boolean performFinish(){
  if (IMessageProvider.WARNING == page.getMessageType()) {
    if (!MessageDialog.openConfirm(null,DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str""))) {
      return false;
    }
  }
  File file=new File(page.getSourceFile());
  final List<ReturnCode> information=ImportFactory.importIndicatorToStucture(file,folder,page.getSkip(),page.getRename());
  if (information.isEmpty()) {
    information.add(new ReturnCode(DefaultMessagesImpl.getString(""String_Node_Str""),false));
  }
  Display.getDefault().asyncExec(new Runnable(){
    public void run(){
      ImportInfoDialog.openImportInformation(getShell(),DefaultMessagesImpl.getString(""String_Node_Str""),(ReturnCode[])information.toArray(new ReturnCode[0]));
    }
  }
);
  CorePlugin.getDefault().refreshDQView(RepositoryNodeHelper.getLibrariesFolderNode(EResourceConstant.USER_DEFINED_INDICATORS));
  return true;
}",0.9926701570680628
138046,"/** 
 * Test the text by the regular text of regularText.
 */
private void testRegularText(){
  if (isJavaEngine) {
    String regexStr=regularText.getText();
    if (regexStr.length() >= 2) {
      regexStr=regexStr.substring(1,regexStr.length() - 1);
    }
    boolean flag=java.util.regex.Pattern.matches(regexStr,testText.getText());
    if (flag) {
      emoticonLabel.setImage(ImageLib.getImage(ImageLib.EMOTICON_SMILE));
      resultLabel.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
      return;
    }
 else {
      emoticonLabel.setImage(ImageLib.getImage(ImageLib.EXCLAMATION));
      resultLabel.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
      return;
    }
  }
 else {
    for (    IRepositoryNode connRepNode : listTdDataProviders) {
      ConnectionItem connItem=(ConnectionItem)connRepNode.getObject().getProperty().getItem();
      Connection tddataprovider=connItem.getConnection();
      if (tddataprovider.getName().equals(dbCombo.getText())) {
        DbmsLanguage createDbmsLanguage=DbmsLanguageFactory.createDbmsLanguage(tddataprovider);
        if (null != createDbmsLanguage) {
          createDbmsLanguage.setFunctionName(getFunctionName());
        }
        String selectRegexpTestString=createDbmsLanguage.getSelectRegexpTestString(testText.getText(),regularText.getText());
        TypedReturnCode<java.sql.Connection> rcConn=JavaSqlFactory.createConnection(tddataprovider);
        try {
          if (!rcConn.isOk()) {
            throw new DataprofilerCoreException(rcConn.getMessage());
          }
          java.sql.Connection connection=rcConn.getObject();
          Statement createStatement=connection.createStatement();
          ResultSet resultSet=createStatement.executeQuery(selectRegexpTestString);
          while (resultSet.next()) {
            String okString=resultSet.getString(1);
            if (""String_Node_Str"".equalsIgnoreCase(okString) || (createDbmsLanguage.getDbmsName().equals(SupportDBUrlType.POSTGRESQLEFAULTURL.getLanguage()) && ""String_Node_Str"".equalsIgnoreCase(okString))) {
              emoticonLabel.setImage(ImageLib.getImage(ImageLib.EMOTICON_SMILE));
              resultLabel.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
              return;
            }
          }
          emoticonLabel.setImage(ImageLib.getImage(ImageLib.EXCLAMATION));
          resultLabel.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
          return;
        }
 catch (        Exception exception) {
          log.error(exception,exception);
          String exceptionName=exception.getClass().getName();
          Shell shell=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell();
          MessageBoxExceptionHandler.process(exception,shell,exceptionName);
          emoticonLabel.setImage(null);
          return;
        }
 finally {
          ConnectionUtils.closeConnection(rcConn.getObject());
        }
      }
    }
  }
  MessageDialog.openWarning(new Shell(),""String_Node_Str"",NO_DATABASE_SELECTEDED);
}","/** 
 * Test the text by the regular text of regularText.
 */
private void testRegularText(){
  if (isJavaEngine) {
    String regexStr=regularText.getText();
    if (regexStr.length() >= 2) {
      regexStr=regexStr.substring(1,regexStr.length() - 1);
    }
    boolean flag=java.util.regex.Pattern.compile(regexStr).matcher(testText.getText()).find();
    if (flag) {
      emoticonLabel.setImage(ImageLib.getImage(ImageLib.EMOTICON_SMILE));
      resultLabel.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
      return;
    }
 else {
      emoticonLabel.setImage(ImageLib.getImage(ImageLib.EXCLAMATION));
      resultLabel.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
      return;
    }
  }
 else {
    for (    IRepositoryNode connRepNode : listTdDataProviders) {
      ConnectionItem connItem=(ConnectionItem)connRepNode.getObject().getProperty().getItem();
      Connection tddataprovider=connItem.getConnection();
      if (tddataprovider.getName().equals(dbCombo.getText())) {
        DbmsLanguage createDbmsLanguage=DbmsLanguageFactory.createDbmsLanguage(tddataprovider);
        if (null != createDbmsLanguage) {
          createDbmsLanguage.setFunctionName(getFunctionName());
        }
        String selectRegexpTestString=createDbmsLanguage.getSelectRegexpTestString(testText.getText(),regularText.getText());
        TypedReturnCode<java.sql.Connection> rcConn=JavaSqlFactory.createConnection(tddataprovider);
        try {
          if (!rcConn.isOk()) {
            throw new DataprofilerCoreException(rcConn.getMessage());
          }
          java.sql.Connection connection=rcConn.getObject();
          Statement createStatement=connection.createStatement();
          ResultSet resultSet=createStatement.executeQuery(selectRegexpTestString);
          while (resultSet.next()) {
            String okString=resultSet.getString(1);
            if (""String_Node_Str"".equalsIgnoreCase(okString) || (createDbmsLanguage.getDbmsName().equals(SupportDBUrlType.POSTGRESQLEFAULTURL.getLanguage()) && ""String_Node_Str"".equalsIgnoreCase(okString))) {
              emoticonLabel.setImage(ImageLib.getImage(ImageLib.EMOTICON_SMILE));
              resultLabel.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
              return;
            }
          }
          emoticonLabel.setImage(ImageLib.getImage(ImageLib.EXCLAMATION));
          resultLabel.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
          return;
        }
 catch (        Exception exception) {
          log.error(exception,exception);
          String exceptionName=exception.getClass().getName();
          Shell shell=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell();
          MessageBoxExceptionHandler.process(exception,shell,exceptionName);
          emoticonLabel.setImage(null);
          return;
        }
 finally {
          ConnectionUtils.closeConnection(rcConn.getObject());
        }
      }
    }
  }
  MessageDialog.openWarning(new Shell(),""String_Node_Str"",NO_DATABASE_SELECTEDED);
}",0.9937541091387244
138047,"/** 
 * TDQ-5241 Test method for  {@link org.talend.dataprofiler.core.ui.utils.ModelElementIndicatorRule#patternRule(org.talend.dq.nodes.indicator.type.IndicatorEnum,orgomg.cwm.objectmodel.core.ModelElement,org.talend.dataquality.analysis.ExecutionLanguage)}.
 */
@Test public void testPatternRule(){
  TdSqlDataType tdsql=mock(TdSqlDataType.class);
  TdColumn me=mock(TdColumn.class);
  when(me.getSqlDataType()).thenReturn(tdsql);
  when(tdsql.getJavaDataType()).thenReturn(Types.TIME);
  when(me.getContentType()).thenReturn(""String_Node_Str"");
  Assert.assertTrue(ModelElementIndicatorRule.patternRule(IndicatorEnum.ModeIndicatorEnum,me,ExecutionLanguage.JAVA));
  Assert.assertFalse(ModelElementIndicatorRule.patternRule(IndicatorEnum.FrequencyIndicatorEnum,me,ExecutionLanguage.JAVA));
  Assert.assertFalse(ModelElementIndicatorRule.patternRule(IndicatorEnum.LowFrequencyIndicatorEnum,me,ExecutionLanguage.JAVA));
  Assert.assertFalse(ModelElementIndicatorRule.patternRule(IndicatorEnum.DateFrequencyIndicatorEnum,me,ExecutionLanguage.JAVA));
  Assert.assertFalse(ModelElementIndicatorRule.patternRule(IndicatorEnum.WeekFrequencyIndicatorEnum,me,ExecutionLanguage.JAVA));
  Assert.assertFalse(ModelElementIndicatorRule.patternRule(IndicatorEnum.MonthFrequencyIndicatorEnum,me,ExecutionLanguage.JAVA));
  Assert.assertFalse(ModelElementIndicatorRule.patternRule(IndicatorEnum.QuarterFrequencyIndicatorEnum,me,ExecutionLanguage.JAVA));
  Assert.assertFalse(ModelElementIndicatorRule.patternRule(IndicatorEnum.YearFrequencyIndicatorEnum,me,ExecutionLanguage.JAVA));
  Assert.assertFalse(ModelElementIndicatorRule.patternRule(IndicatorEnum.DateLowFrequencyIndicatorEnum,me,ExecutionLanguage.JAVA));
  Assert.assertFalse(ModelElementIndicatorRule.patternRule(IndicatorEnum.WeekLowFrequencyIndicatorEnum,me,ExecutionLanguage.JAVA));
  Assert.assertFalse(ModelElementIndicatorRule.patternRule(IndicatorEnum.MonthLowFrequencyIndicatorEnum,me,ExecutionLanguage.JAVA));
  Assert.assertFalse(ModelElementIndicatorRule.patternRule(IndicatorEnum.QuarterLowFrequencyIndicatorEnum,me,ExecutionLanguage.JAVA));
  Assert.assertFalse(ModelElementIndicatorRule.patternRule(IndicatorEnum.YearLowFrequencyIndicatorEnum,me,ExecutionLanguage.JAVA));
}","/** 
 * TDQ-5241 Test method for  {@link org.talend.dataprofiler.core.ui.utils.ModelElementIndicatorRule#patternRule(org.talend.dq.nodes.indicator.type.IndicatorEnum,orgomg.cwm.objectmodel.core.ModelElement,org.talend.dataquality.analysis.ExecutionLanguage)}.
 */
@Test public void testPatternRule(){
  TdSqlDataType tdsql=mock(TdSqlDataType.class);
  TdColumn me=mock(TdColumn.class);
  when(me.getSqlDataType()).thenReturn(tdsql);
  when(tdsql.getJavaDataType()).thenReturn(Types.TIME);
  when(me.getContentType()).thenReturn(""String_Node_Str"");
  Assert.assertTrue(ModelElementIndicatorRule.patternRule(IndicatorEnum.ModeIndicatorEnum,me,ExecutionLanguage.JAVA));
  Assert.assertFalse(ModelElementIndicatorRule.patternRule(IndicatorEnum.FrequencyIndicatorEnum,me,ExecutionLanguage.JAVA));
  Assert.assertFalse(ModelElementIndicatorRule.patternRule(IndicatorEnum.DateFrequencyIndicatorEnum,me,ExecutionLanguage.JAVA));
  Assert.assertFalse(ModelElementIndicatorRule.patternRule(IndicatorEnum.WeekFrequencyIndicatorEnum,me,ExecutionLanguage.JAVA));
  Assert.assertFalse(ModelElementIndicatorRule.patternRule(IndicatorEnum.MonthFrequencyIndicatorEnum,me,ExecutionLanguage.JAVA));
  Assert.assertFalse(ModelElementIndicatorRule.patternRule(IndicatorEnum.QuarterFrequencyIndicatorEnum,me,ExecutionLanguage.JAVA));
  Assert.assertFalse(ModelElementIndicatorRule.patternRule(IndicatorEnum.YearFrequencyIndicatorEnum,me,ExecutionLanguage.JAVA));
  Assert.assertFalse(ModelElementIndicatorRule.patternRule(IndicatorEnum.DateLowFrequencyIndicatorEnum,me,ExecutionLanguage.JAVA));
  Assert.assertFalse(ModelElementIndicatorRule.patternRule(IndicatorEnum.WeekLowFrequencyIndicatorEnum,me,ExecutionLanguage.JAVA));
  Assert.assertFalse(ModelElementIndicatorRule.patternRule(IndicatorEnum.MonthLowFrequencyIndicatorEnum,me,ExecutionLanguage.JAVA));
  Assert.assertFalse(ModelElementIndicatorRule.patternRule(IndicatorEnum.QuarterLowFrequencyIndicatorEnum,me,ExecutionLanguage.JAVA));
  Assert.assertFalse(ModelElementIndicatorRule.patternRule(IndicatorEnum.YearLowFrequencyIndicatorEnum,me,ExecutionLanguage.JAVA));
}",0.9705069124423964
138048,"public static boolean patternRule(IndicatorEnum indicatorType,ModelElement me,ExecutionLanguage language){
  int javaType=0;
  boolean isDeliFileColumn=!(me instanceof TdColumn) && me instanceof MetadataColumn;
  if (me instanceof TdColumn) {
    javaType=((TdColumn)me).getSqlDataType().getJavaDataType();
  }
 else   if (me instanceof TdXmlElementType) {
    javaType=XSDDataTypeConvertor.convertToJDBCType(((TdXmlElementType)me).getJavaType());
  }
 else   if (isDeliFileColumn) {
    javaType=TalendTypeConvert.convertToJDBCType(((MetadataColumn)me).getTalendType());
  }
  DataminingType dataminingType=MetadataHelper.getDataminingType(me);
  if (dataminingType == null || isDeliFileColumn) {
    dataminingType=MetadataHelper.getDefaultDataminingType(javaType);
  }
  if (javaType == Types.LONGVARCHAR && ExecutionLanguage.SQL.equals(language)) {
    return enableLongVarchar(indicatorType,dataminingType,me);
  }
switch (indicatorType) {
case CountsIndicatorEnum:
case RowCountIndicatorEnum:
case NullCountIndicatorEnum:
case DistinctCountIndicatorEnum:
case UniqueIndicatorEnum:
case DuplicateCountIndicatorEnum:
    return true;
case DefValueCountIndicatorEnum:
  Expression initialValue=null;
if (me instanceof TdColumn) {
  initialValue=((TdColumn)me).getInitialValue();
}
if (initialValue != null && initialValue.getBody() != null) {
return initialValue.getBody().length() != 0 || Java2SqlType.isTextInSQL(javaType);
}
break;
case BlankCountIndicatorEnum:
if (me instanceof TdXmlElementType || !Java2SqlType.isTextInSQL(javaType)) {
return false;
}
 else {
return true;
}
case TextIndicatorEnum:
case MinLengthIndicatorEnum:
case MinLengthWithNullIndicatorEnum:
case MinLengthWithBlankIndicatorEnum:
case MinLengthWithBlankNullIndicatorEnum:
case MaxLengthIndicatorEnum:
case MaxLengthWithNullIndicatorEnum:
case MaxLengthWithBlankIndicatorEnum:
case MaxLengthWithBlankNullIndicatorEnum:
case AverageLengthIndicatorEnum:
case AverageLengthWithNullIndicatorEnum:
case AverageLengthWithBlankIndicatorEnum:
case AverageLengthWithNullBlankIndicatorEnum:
if (Java2SqlType.isTextInSQL(javaType)) {
if (dataminingType == DataminingType.NOMINAL || dataminingType == DataminingType.UNSTRUCTURED_TEXT) {
return true;
}
}
break;
case ModeIndicatorEnum:
if (Java2SqlType.isTimeSQL(javaType)) {
return true;
}
case FrequencyIndicatorEnum:
case LowFrequencyIndicatorEnum:
if (Java2SqlType.isTimeSQL(javaType)) {
return false;
}
case PatternFreqIndicatorEnum:
case PatternLowFreqIndicatorEnum:
if (dataminingType == DataminingType.NOMINAL || dataminingType == DataminingType.INTERVAL) {
return true;
}
break;
case DatePatternFreqIndicatorEnum:
if (ExecutionLanguage.JAVA.equals(language) && (Java2SqlType.isDateInSQL(javaType) || Java2SqlType.isTextInSQL(javaType))) {
return true;
}
break;
case SoundexIndicatorEnum:
case SoundexLowIndicatorEnum:
if (!Java2SqlType.isDateInSQL(javaType) && !Java2SqlType.isNumbericInSQL(javaType) && (dataminingType == DataminingType.NOMINAL || dataminingType == DataminingType.INTERVAL)) {
return true;
}
break;
case MeanIndicatorEnum:
case MedianIndicatorEnum:
case IQRIndicatorEnum:
case LowerQuartileIndicatorEnum:
case UpperQuartileIndicatorEnum:
if (Java2SqlType.isNumbericInSQL(javaType)) {
if (dataminingType == DataminingType.INTERVAL) {
return true;
}
}
break;
case BoxIIndicatorEnum:
case RangeIndicatorEnum:
case MinValueIndicatorEnum:
case MaxValueIndicatorEnum:
if (Java2SqlType.isNumbericInSQL(javaType) || Java2SqlType.isDateInSQL(javaType)) {
if (dataminingType == DataminingType.INTERVAL) {
return true;
}
}
break;
case DateFrequencyIndicatorEnum:
case WeekFrequencyIndicatorEnum:
case MonthFrequencyIndicatorEnum:
case QuarterFrequencyIndicatorEnum:
case YearFrequencyIndicatorEnum:
case DateLowFrequencyIndicatorEnum:
case WeekLowFrequencyIndicatorEnum:
case MonthLowFrequencyIndicatorEnum:
case QuarterLowFrequencyIndicatorEnum:
case YearLowFrequencyIndicatorEnum:
if (Java2SqlType.isDateInSQL(javaType) && !Java2SqlType.isTimeSQL(javaType) && (dataminingType == DataminingType.NOMINAL || dataminingType == DataminingType.INTERVAL)) {
return true;
}
break;
case BinFrequencyIndicatorEnum:
case BinLowFrequencyIndicatorEnum:
if (Java2SqlType.isNumbericInSQL(javaType) && (dataminingType == DataminingType.NOMINAL || dataminingType == DataminingType.INTERVAL)) {
return true;
}
break;
case ValidPhoneCountIndicatorEnum:
case PossiblePhoneCountIndicatorEnum:
case ValidRegCodeCountIndicatorEnum:
case InvalidRegCodeCountIndicatorEnum:
case WellFormE164PhoneCountIndicatorEnum:
case WellFormIntePhoneCountIndicatorEnum:
case WellFormNationalPhoneCountIndicatorEnum:
case PhoneNumbStatisticsIndicatorEnum:
case FormatFreqPieIndictorEnum:
if (ExecutionLanguage.JAVA.equals(language) && (dataminingType == DataminingType.NOMINAL || dataminingType == DataminingType.INTERVAL)) {
return true;
}
break;
default :
return false;
}
return false;
}","public static boolean patternRule(IndicatorEnum indicatorType,ModelElement me,ExecutionLanguage language){
  int javaType=0;
  boolean isDeliFileColumn=!(me instanceof TdColumn) && me instanceof MetadataColumn;
  if (me instanceof TdColumn) {
    javaType=((TdColumn)me).getSqlDataType().getJavaDataType();
  }
 else   if (me instanceof TdXmlElementType) {
    javaType=XSDDataTypeConvertor.convertToJDBCType(((TdXmlElementType)me).getJavaType());
  }
 else   if (isDeliFileColumn) {
    javaType=TalendTypeConvert.convertToJDBCType(((MetadataColumn)me).getTalendType());
  }
  DataminingType dataminingType=MetadataHelper.getDataminingType(me);
  if (dataminingType == null || isDeliFileColumn) {
    dataminingType=MetadataHelper.getDefaultDataminingType(javaType);
  }
  if (javaType == Types.LONGVARCHAR && ExecutionLanguage.SQL.equals(language)) {
    return enableLongVarchar(indicatorType,dataminingType,me);
  }
switch (indicatorType) {
case CountsIndicatorEnum:
case RowCountIndicatorEnum:
case NullCountIndicatorEnum:
case DistinctCountIndicatorEnum:
case UniqueIndicatorEnum:
case DuplicateCountIndicatorEnum:
    return true;
case DefValueCountIndicatorEnum:
  Expression initialValue=null;
if (me instanceof TdColumn) {
  initialValue=((TdColumn)me).getInitialValue();
}
if (initialValue != null && initialValue.getBody() != null) {
return initialValue.getBody().length() != 0 || Java2SqlType.isTextInSQL(javaType);
}
break;
case BlankCountIndicatorEnum:
if (me instanceof TdXmlElementType || !Java2SqlType.isTextInSQL(javaType)) {
return false;
}
 else {
return true;
}
case TextIndicatorEnum:
case MinLengthIndicatorEnum:
case MinLengthWithNullIndicatorEnum:
case MinLengthWithBlankIndicatorEnum:
case MinLengthWithBlankNullIndicatorEnum:
case MaxLengthIndicatorEnum:
case MaxLengthWithNullIndicatorEnum:
case MaxLengthWithBlankIndicatorEnum:
case MaxLengthWithBlankNullIndicatorEnum:
case AverageLengthIndicatorEnum:
case AverageLengthWithNullIndicatorEnum:
case AverageLengthWithBlankIndicatorEnum:
case AverageLengthWithNullBlankIndicatorEnum:
if (Java2SqlType.isTextInSQL(javaType)) {
if (dataminingType == DataminingType.NOMINAL || dataminingType == DataminingType.UNSTRUCTURED_TEXT) {
return true;
}
}
break;
case ModeIndicatorEnum:
if (Java2SqlType.isTimeSQL(javaType)) {
return true;
}
case FrequencyIndicatorEnum:
case LowFrequencyIndicatorEnum:
case PatternFreqIndicatorEnum:
case PatternLowFreqIndicatorEnum:
if (dataminingType == DataminingType.NOMINAL || dataminingType == DataminingType.INTERVAL) {
return true;
}
break;
case DatePatternFreqIndicatorEnum:
if (ExecutionLanguage.JAVA.equals(language) && (Java2SqlType.isDateInSQL(javaType) || Java2SqlType.isTextInSQL(javaType))) {
return true;
}
break;
case SoundexIndicatorEnum:
case SoundexLowIndicatorEnum:
if (!Java2SqlType.isDateInSQL(javaType) && !Java2SqlType.isNumbericInSQL(javaType) && (dataminingType == DataminingType.NOMINAL || dataminingType == DataminingType.INTERVAL)) {
return true;
}
break;
case MeanIndicatorEnum:
case MedianIndicatorEnum:
case IQRIndicatorEnum:
case LowerQuartileIndicatorEnum:
case UpperQuartileIndicatorEnum:
if (Java2SqlType.isNumbericInSQL(javaType)) {
if (dataminingType == DataminingType.INTERVAL) {
return true;
}
}
break;
case BoxIIndicatorEnum:
case RangeIndicatorEnum:
case MinValueIndicatorEnum:
case MaxValueIndicatorEnum:
if (Java2SqlType.isNumbericInSQL(javaType) || Java2SqlType.isDateInSQL(javaType)) {
if (dataminingType == DataminingType.INTERVAL) {
return true;
}
}
break;
case DateFrequencyIndicatorEnum:
case WeekFrequencyIndicatorEnum:
case MonthFrequencyIndicatorEnum:
case QuarterFrequencyIndicatorEnum:
case YearFrequencyIndicatorEnum:
case DateLowFrequencyIndicatorEnum:
case WeekLowFrequencyIndicatorEnum:
case MonthLowFrequencyIndicatorEnum:
case QuarterLowFrequencyIndicatorEnum:
case YearLowFrequencyIndicatorEnum:
if (Java2SqlType.isDateInSQL(javaType) && !Java2SqlType.isTimeSQL(javaType) && (dataminingType == DataminingType.NOMINAL || dataminingType == DataminingType.INTERVAL)) {
return true;
}
break;
case BinFrequencyIndicatorEnum:
case BinLowFrequencyIndicatorEnum:
if (Java2SqlType.isNumbericInSQL(javaType) && (dataminingType == DataminingType.NOMINAL || dataminingType == DataminingType.INTERVAL)) {
return true;
}
break;
case ValidPhoneCountIndicatorEnum:
case PossiblePhoneCountIndicatorEnum:
case ValidRegCodeCountIndicatorEnum:
case InvalidRegCodeCountIndicatorEnum:
case WellFormE164PhoneCountIndicatorEnum:
case WellFormIntePhoneCountIndicatorEnum:
case WellFormNationalPhoneCountIndicatorEnum:
case PhoneNumbStatisticsIndicatorEnum:
case FormatFreqPieIndictorEnum:
if (ExecutionLanguage.JAVA.equals(language) && (dataminingType == DataminingType.NOMINAL || dataminingType == DataminingType.INTERVAL)) {
return true;
}
break;
default :
return false;
}
return false;
}",0.9942363112391932
138049,"@Override protected ModelElementIndicator[] getPredefinedColumnIndicator(){
  IndicatorEnum[] allwedEnumes=new IndicatorEnum[5];
  allwedEnumes[0]=IndicatorEnum.CountsIndicatorEnum;
  allwedEnumes[1]=IndicatorEnum.MinValueIndicatorEnum;
  allwedEnumes[2]=IndicatorEnum.MaxValueIndicatorEnum;
  allwedEnumes[3]=IndicatorEnum.LowFrequencyIndicatorEnum;
  allwedEnumes[4]=IndicatorEnum.FrequencyIndicatorEnum;
  ModelElementIndicator[] returnColumnIndicator=composePredefinedColumnIndicator(allwedEnumes);
  if (parameters != null) {
    for (    ModelElementIndicator columnIndicator : returnColumnIndicator) {
      for (      Indicator indicator : columnIndicator.getIndicators()) {
        if (indicator instanceof FrequencyIndicator) {
          indicator.getParameters().getDateParameters().setDateAggregationType(parameters.getDateParameters().getDateAggregationType());
        }
      }
    }
  }
  return returnColumnIndicator;
}","@Override protected ModelElementIndicator[] getPredefinedColumnIndicator(){
  int count=5;
  if (isTimeType()) {
    count=3;
  }
  IndicatorEnum[] allwedEnumes=new IndicatorEnum[count];
  allwedEnumes[0]=IndicatorEnum.CountsIndicatorEnum;
  allwedEnumes[1]=IndicatorEnum.MinValueIndicatorEnum;
  allwedEnumes[2]=IndicatorEnum.MaxValueIndicatorEnum;
  if (count == 5) {
    allwedEnumes[3]=IndicatorEnum.LowFrequencyIndicatorEnum;
    allwedEnumes[4]=IndicatorEnum.FrequencyIndicatorEnum;
  }
  ModelElementIndicator[] returnColumnIndicator=composePredefinedColumnIndicator(allwedEnumes);
  if (parameters != null) {
    for (    ModelElementIndicator columnIndicator : returnColumnIndicator) {
      for (      Indicator indicator : columnIndicator.getIndicators()) {
        if (indicator instanceof FrequencyIndicator) {
          indicator.getParameters().getDateParameters().setDateAggregationType(parameters.getDateParameters().getDateAggregationType());
        }
      }
    }
  }
  return returnColumnIndicator;
}",0.9550561797752808
138050,"@Override protected void handleAddElement(ModelElementChangeRightTarget addElement){
  EObject rightElement=addElement.getRightElement();
  Catalog catalog=SwitchHelpers.CATALOG_SWITCH.doSwitch(rightElement);
  if (catalog != null) {
    ConnectionHelper.addCatalog(catalog,oldDataProvider);
    this.tempReloadProvider.getDataPackage().remove(catalog);
  }
 else {
    Schema schema=SwitchHelpers.SCHEMA_SWITCH.doSwitch(rightElement);
    if (schema != null) {
      EObject eContainer=schema.eContainer();
      if (eContainer != null && eContainer instanceof Catalog) {
        Catalog schemaParent=(Catalog)eContainer;
        List<Schema> schemas=new ArrayList<Schema>();
        schemas.add(schema);
        Catalog oldCatalog=CatalogHelper.getCatalog(oldDataProvider,schemaParent.getName());
        if (oldCatalog != null) {
          CatalogHelper.addSchemas(schemas,oldCatalog);
          schemaParent.getOwnedElement().remove(schema);
        }
      }
 else {
        ConnectionHelper.addSchema(schema,oldDataProvider);
        this.tempReloadProvider.getDataPackage().remove(catalog);
      }
    }
  }
  return;
}","@Override protected void handleAddElement(ModelElementChangeRightTarget addElement){
  EObject rightElement=addElement.getRightElement();
  Catalog catalog=SwitchHelpers.CATALOG_SWITCH.doSwitch(rightElement);
  if (catalog != null) {
    catalog.getDataManager().clear();
    ConnectionHelper.addCatalog(catalog,oldDataProvider);
    this.tempReloadProvider.getDataPackage().remove(catalog);
  }
 else {
    Schema schema=SwitchHelpers.SCHEMA_SWITCH.doSwitch(rightElement);
    if (schema != null) {
      EObject eContainer=schema.eContainer();
      if (eContainer != null && eContainer instanceof Catalog) {
        Catalog schemaParent=(Catalog)eContainer;
        List<Schema> schemas=new ArrayList<Schema>();
        schemas.add(schema);
        Catalog oldCatalog=CatalogHelper.getCatalog(oldDataProvider,schemaParent.getName());
        if (oldCatalog != null) {
          CatalogHelper.addSchemas(schemas,oldCatalog);
          schemaParent.getOwnedElement().remove(schema);
        }
      }
 else {
        schema.getDataManager().clear();
        ConnectionHelper.addSchema(schema,oldDataProvider);
        this.tempReloadProvider.getDataPackage().remove(catalog);
      }
    }
  }
  return;
}",0.9661380197171024
138051,"public ChangeConnectionAction(Connection oldDataProvider,Connection newDataProvider,Analysis analysis){
  this.oldDataProvider=oldDataProvider;
  this.newDataProvider=newDataProvider;
  this.synAnalysis=analysis;
  changeActionStatus=new ReturnCode(Boolean.FALSE);
}","public ChangeConnectionAction(Connection oldDataProvider,Connection newDataProvider,Analysis analysis){
  this.oldDataProvider=oldDataProvider;
  this.newDataProvider=newDataProvider;
  this.synAnalysis=analysis;
  this.changeActionStatus=new ReturnCode(Boolean.FALSE);
}",0.9906890130353816
138052,"public IFile duplicate(String newLabel){
  if (modelElement != null) {
    ModelElement newObject=(ModelElement)EMFSharedResources.getInstance().copyEObject(modelElement);
    newObject.setName(newLabel);
    IFolder folder=extractFolder(modelElement);
    if (folder != null) {
      newObject=update(modelElement,newObject);
      AElementPersistance elementWriter=ElementWriterFactory.getInstance().create(modelElement);
      if (elementWriter != null) {
        elementWriter.create(newObject,folder);
        for (        Dependency dependency : modelElement.getClientDependency()) {
          for (          ModelElement supplyier : dependency.getSupplier()) {
            TypedReturnCode<Dependency> rc=DependenciesHandler.getInstance().setUsageDependencyOn(newObject,supplyier);
            EMFSharedResources.getInstance().saveResource(rc.getObject().eResource());
          }
        }
        URI uri;
        if (newObject.eIsProxy()) {
          uri=((InternalEObject)newObject).eProxyURI();
        }
 else {
          uri=newObject.eResource().getURI();
        }
        return ResourceManager.getRoot().getFile(new Path(uri.toPlatformString(false)));
      }
    }
  }
  return null;
}","public IFile duplicate(String newLabel){
  if (modelElement != null) {
    ModelElement newObject=(ModelElement)EMFSharedResources.getInstance().copyEObject(modelElement);
    newObject.setName(newLabel);
    if (newObject instanceof AbstractMetadataObject) {
      AbstractMetadataObject amObj=(AbstractMetadataObject)newObject;
      amObj.setLabel(newLabel);
    }
    IFolder folder=extractFolder(modelElement);
    if (folder != null) {
      newObject=update(modelElement,newObject);
      AElementPersistance elementWriter=ElementWriterFactory.getInstance().create(modelElement);
      if (elementWriter != null) {
        elementWriter.create(newObject,folder);
        for (        Dependency dependency : modelElement.getClientDependency()) {
          for (          ModelElement supplyier : dependency.getSupplier()) {
            TypedReturnCode<Dependency> rc=DependenciesHandler.getInstance().setUsageDependencyOn(newObject,supplyier);
            EMFSharedResources.getInstance().saveResource(rc.getObject().eResource());
          }
        }
        URI uri;
        if (newObject.eIsProxy()) {
          uri=((InternalEObject)newObject).eProxyURI();
        }
 else {
          uri=newObject.eResource().getURI();
        }
        return ResourceManager.getRoot().getFile(new Path(uri.toPlatformString(false)));
      }
    }
  }
  return null;
}",0.9365511872323862
138053,"@Override public void reloadInputModel(){
  TdColumn column=null;
  modelInput.clear();
  synedEleMap.clear();
  for (  ModelElement element : analyzedElements) {
    try {
      column=(TdColumn)element;
      synedEleMap.put(column,null);
      ColumnSet anaColumnSet=ColumnHelper.getColumnSetOwner(column);
      Package anaPackage=ColumnSetHelper.getParentCatalogOrSchema(anaColumnSet);
      if (anaPackage == null) {
        return;
      }
      Package connPackage=null;
      for (      Package pk : newDataProvider.getDataPackage()) {
        if (pk instanceof Catalog && anaPackage instanceof Schema) {
          Catalog catl=CatalogHelper.getParentCatalog(anaPackage);
          if (null != catl && pk.getName().equalsIgnoreCase(catl.getName())) {
            connPackage=pk;
            break;
          }
        }
 else         if (null != anaPackage && pk.getName().equalsIgnoreCase(anaPackage.getName())) {
          connPackage=pk;
          break;
        }
      }
      if (connPackage == null) {
        SynTreeModel synTreeModel=new SynTreeModel(column);
        synTreeModel.setOldDataProvElement(anaPackage);
        modelInput.add(synTreeModel);
        continue;
      }
      List<? extends MetadataTable> connColumnSetList=null;
      if (connPackage instanceof Catalog && anaPackage instanceof Schema) {
        for (        Schema sche : CatalogHelper.getSchemas((Catalog)connPackage)) {
          if (sche.getName().equalsIgnoreCase(anaPackage.getName())) {
            connPackage=sche;
            break;
          }
        }
      }
      boolean loadFromDb=connPackage.getOwnedElement().size() == 0;
      if (anaColumnSet instanceof TdTable) {
        connColumnSetList=DqRepositoryViewService.getTables(newDataProvider,connPackage,null,loadFromDb);
        if (loadFromDb) {
          for (          MetadataTable table : connColumnSetList) {
            PackageHelper.addMetadataTable(table,connPackage);
          }
        }
      }
 else {
        connColumnSetList=DqRepositoryViewService.getViews(newDataProvider,connPackage,null,loadFromDb);
        if (loadFromDb) {
          for (          MetadataTable table : connColumnSetList) {
            PackageHelper.addMetadataTable(table,connPackage);
          }
        }
      }
      ColumnSet connColumnSet=null;
      for (      Object colSet : connColumnSetList) {
        if (((ColumnSet)colSet).getName().equalsIgnoreCase(anaColumnSet.getName())) {
          connColumnSet=(ColumnSet)colSet;
          break;
        }
      }
      if (connColumnSet == null) {
        SynTreeModel synTreeModel=new SynTreeModel(column);
        synTreeModel.setOldDataProvElement(anaColumnSet);
        synTreeModel.setNewDataProvElement(connPackage);
        modelInput.add(synTreeModel);
        continue;
      }
      TdColumn connColumn=null;
      loadFromDb=connColumnSet.getOwnedElement().size() == 0;
      List<TdColumn> columns=DqRepositoryViewService.getColumns(newDataProvider,connColumnSet,null,loadFromDb);
      ColumnSetHelper.addColumns(connColumnSet,columns);
      for (      TdColumn loopColumn : columns) {
        if (loopColumn.getName().equalsIgnoreCase(column.getName())) {
          connColumn=loopColumn;
          break;
        }
      }
      if (connColumn == null) {
        SynTreeModel synTreeModel=new SynTreeModel(column);
        synTreeModel.setOldDataProvElement(column);
        synTreeModel.setNewDataProvElement(connColumnSet);
        modelInput.add(synTreeModel);
        continue;
      }
      synedEleMap.put(column,connColumn);
      if (!connColumn.getSqlDataType().getName().equals(column.getSqlDataType().getName())) {
        SynTreeModel synTreeModel=new SynTreeModel(column);
        synTreeModel.setOldDataProvElement(column.getSqlDataType());
        modelInput.add(synTreeModel);
        continue;
      }
    }
 catch (    Exception e) {
      log.error(e,e);
      e.printStackTrace();
    }
  }
}","@Override public void reloadInputModel(){
  TdColumn column=null;
  modelInput.clear();
  synedEleMap.clear();
  for (  ModelElement element : analyzedElements) {
    try {
      column=(TdColumn)element;
      synedEleMap.put(column,null);
      ColumnSet anaColumnSet=ColumnHelper.getColumnOwnerAsColumnSet(column);
      Package anaPackage=ColumnSetHelper.getParentCatalogOrSchema(anaColumnSet);
      if (anaPackage == null) {
        return;
      }
      Package connPackage=null;
      for (      Package pk : newDataProvider.getDataPackage()) {
        if (pk instanceof Catalog && anaPackage instanceof Schema) {
          Catalog catl=CatalogHelper.getParentCatalog(anaPackage);
          if (null != catl && pk.getName().equalsIgnoreCase(catl.getName())) {
            connPackage=pk;
            break;
          }
        }
 else         if (null != anaPackage && pk.getName().equalsIgnoreCase(anaPackage.getName())) {
          connPackage=pk;
          break;
        }
      }
      if (connPackage == null) {
        SynTreeModel synTreeModel=new SynTreeModel(column);
        synTreeModel.setOldDataProvElement(anaPackage);
        modelInput.add(synTreeModel);
        continue;
      }
      List<? extends MetadataTable> connColumnSetList=null;
      if (connPackage instanceof Catalog && anaPackage instanceof Schema) {
        for (        Schema sche : CatalogHelper.getSchemas((Catalog)connPackage)) {
          if (sche.getName().equalsIgnoreCase(anaPackage.getName())) {
            connPackage=sche;
            break;
          }
        }
      }
      boolean loadFromDb=connPackage.getOwnedElement().size() == 0;
      if (anaColumnSet instanceof TdTable) {
        connColumnSetList=DqRepositoryViewService.getTables(newDataProvider,connPackage,null,loadFromDb);
        if (loadFromDb) {
          for (          MetadataTable table : connColumnSetList) {
            PackageHelper.addMetadataTable(table,connPackage);
          }
        }
      }
 else {
        connColumnSetList=DqRepositoryViewService.getViews(newDataProvider,connPackage,null,loadFromDb);
        if (loadFromDb) {
          for (          MetadataTable table : connColumnSetList) {
            PackageHelper.addMetadataTable(table,connPackage);
          }
        }
      }
      ColumnSet connColumnSet=null;
      for (      Object colSet : connColumnSetList) {
        if (((ColumnSet)colSet).getName().equalsIgnoreCase(anaColumnSet.getName())) {
          connColumnSet=(ColumnSet)colSet;
          break;
        }
      }
      if (connColumnSet == null) {
        SynTreeModel synTreeModel=new SynTreeModel(column);
        synTreeModel.setOldDataProvElement(anaColumnSet);
        synTreeModel.setNewDataProvElement(connPackage);
        modelInput.add(synTreeModel);
        continue;
      }
      TdColumn connColumn=null;
      loadFromDb=connColumnSet.getFeature().size() == 0;
      List<TdColumn> columns=DqRepositoryViewService.getColumns(newDataProvider,connColumnSet,null,loadFromDb);
      ColumnSetHelper.addColumns(connColumnSet,columns);
      for (      TdColumn loopColumn : columns) {
        if (loopColumn.getName().equalsIgnoreCase(column.getName())) {
          connColumn=loopColumn;
          break;
        }
      }
      if (connColumn == null) {
        SynTreeModel synTreeModel=new SynTreeModel(column);
        synTreeModel.setOldDataProvElement(column);
        synTreeModel.setNewDataProvElement(connColumnSet);
        modelInput.add(synTreeModel);
        continue;
      }
      synedEleMap.put(column,connColumn);
      if (!connColumn.getSqlDataType().getName().equals(column.getSqlDataType().getName())) {
        SynTreeModel synTreeModel=new SynTreeModel(column);
        synTreeModel.setOldDataProvElement(column.getSqlDataType());
        modelInput.add(synTreeModel);
        continue;
      }
    }
 catch (    Exception e) {
      log.error(e,e);
      e.printStackTrace();
    }
  }
}",0.9958180205297174
138054,"@Override protected void handleAddElement(ModelElementChangeRightTarget addElement){
  EObject rightElement=addElement.getRightElement();
  Catalog catalog=SwitchHelpers.CATALOG_SWITCH.doSwitch(rightElement);
  if (catalog != null) {
    ConnectionHelper.addCatalog(catalog,oldDataProvider);
    this.tempReloadProvider.getDataPackage().remove(catalog);
  }
 else {
    Schema schema=SwitchHelpers.SCHEMA_SWITCH.doSwitch(rightElement);
    if (schema != null) {
      EObject eContainer=schema.eContainer();
      if (eContainer != null && eContainer instanceof Catalog) {
        Catalog schemaParent=(Catalog)eContainer;
        List<Schema> schemas=new ArrayList<Schema>();
        schemas.add(schema);
        Catalog oldCatalog=CatalogHelper.getCatalog(oldDataProvider,schemaParent.getName());
        if (oldCatalog != null) {
          CatalogHelper.addSchemas(schemas,oldCatalog);
          schemaParent.getOwnedElement().remove(schema);
        }
      }
 else {
        ConnectionHelper.addSchema(schema,oldDataProvider);
        this.tempReloadProvider.getDataPackage().remove(catalog);
      }
    }
  }
  return;
}","@Override protected void handleAddElement(ModelElementChangeRightTarget addElement){
  EObject rightElement=addElement.getRightElement();
  Catalog catalog=SwitchHelpers.CATALOG_SWITCH.doSwitch(rightElement);
  if (catalog != null) {
    catalog.getDataManager().clear();
    ConnectionHelper.addCatalog(catalog,oldDataProvider);
    this.tempReloadProvider.getDataPackage().remove(catalog);
  }
 else {
    Schema schema=SwitchHelpers.SCHEMA_SWITCH.doSwitch(rightElement);
    if (schema != null) {
      EObject eContainer=schema.eContainer();
      if (eContainer != null && eContainer instanceof Catalog) {
        Catalog schemaParent=(Catalog)eContainer;
        List<Schema> schemas=new ArrayList<Schema>();
        schemas.add(schema);
        Catalog oldCatalog=CatalogHelper.getCatalog(oldDataProvider,schemaParent.getName());
        if (oldCatalog != null) {
          CatalogHelper.addSchemas(schemas,oldCatalog);
          schemaParent.getOwnedElement().remove(schema);
        }
      }
 else {
        schema.getDataManager().clear();
        ConnectionHelper.addSchema(schema,oldDataProvider);
        this.tempReloadProvider.getDataPackage().remove(catalog);
      }
    }
  }
  return;
}",0.9661380197171024
138055,"public ChangeConnectionAction(Connection oldDataProvider,Connection newDataProvider,Analysis analysis){
  this.oldDataProvider=oldDataProvider;
  this.newDataProvider=newDataProvider;
  this.synAnalysis=analysis;
  changeActionStatus=new ReturnCode(Boolean.FALSE);
}","public ChangeConnectionAction(Connection oldDataProvider,Connection newDataProvider,Analysis analysis){
  this.oldDataProvider=oldDataProvider;
  this.newDataProvider=newDataProvider;
  this.synAnalysis=analysis;
  this.changeActionStatus=new ReturnCode(Boolean.FALSE);
}",0.9906890130353816
138056,"public IFile duplicate(String newLabel){
  if (modelElement != null) {
    ModelElement newObject=(ModelElement)EMFSharedResources.getInstance().copyEObject(modelElement);
    newObject.setName(newLabel);
    IFolder folder=extractFolder(modelElement);
    if (folder != null) {
      newObject=update(modelElement,newObject);
      AElementPersistance elementWriter=ElementWriterFactory.getInstance().create(modelElement);
      if (elementWriter != null) {
        elementWriter.create(newObject,folder);
        for (        Dependency dependency : modelElement.getClientDependency()) {
          for (          ModelElement supplyier : dependency.getSupplier()) {
            TypedReturnCode<Dependency> rc=DependenciesHandler.getInstance().setUsageDependencyOn(newObject,supplyier);
            EMFSharedResources.getInstance().saveResource(rc.getObject().eResource());
          }
        }
        URI uri;
        if (newObject.eIsProxy()) {
          uri=((InternalEObject)newObject).eProxyURI();
        }
 else {
          uri=newObject.eResource().getURI();
        }
        return ResourceManager.getRoot().getFile(new Path(uri.toPlatformString(false)));
      }
    }
  }
  return null;
}","public IFile duplicate(String newLabel){
  if (modelElement != null) {
    ModelElement newObject=(ModelElement)EMFSharedResources.getInstance().copyEObject(modelElement);
    newObject.setName(newLabel);
    if (newObject instanceof AbstractMetadataObject) {
      AbstractMetadataObject amObj=(AbstractMetadataObject)newObject;
      amObj.setLabel(newLabel);
    }
    IFolder folder=extractFolder(modelElement);
    if (folder != null) {
      newObject=update(modelElement,newObject);
      AElementPersistance elementWriter=ElementWriterFactory.getInstance().create(modelElement);
      if (elementWriter != null) {
        elementWriter.create(newObject,folder);
        for (        Dependency dependency : modelElement.getClientDependency()) {
          for (          ModelElement supplyier : dependency.getSupplier()) {
            TypedReturnCode<Dependency> rc=DependenciesHandler.getInstance().setUsageDependencyOn(newObject,supplyier);
            EMFSharedResources.getInstance().saveResource(rc.getObject().eResource());
          }
        }
        URI uri;
        if (newObject.eIsProxy()) {
          uri=((InternalEObject)newObject).eProxyURI();
        }
 else {
          uri=newObject.eResource().getURI();
        }
        return ResourceManager.getRoot().getFile(new Path(uri.toPlatformString(false)));
      }
    }
  }
  return null;
}",0.9365511872323862
138057,"@Override public void reloadInputModel(){
  TdColumn column=null;
  modelInput.clear();
  synedEleMap.clear();
  for (  ModelElement element : analyzedElements) {
    try {
      column=(TdColumn)element;
      synedEleMap.put(column,null);
      ColumnSet anaColumnSet=ColumnHelper.getColumnSetOwner(column);
      Package anaPackage=ColumnSetHelper.getParentCatalogOrSchema(anaColumnSet);
      if (anaPackage == null) {
        return;
      }
      Package connPackage=null;
      for (      Package pk : newDataProvider.getDataPackage()) {
        if (pk instanceof Catalog && anaPackage instanceof Schema) {
          Catalog catl=CatalogHelper.getParentCatalog(anaPackage);
          if (null != catl && pk.getName().equalsIgnoreCase(catl.getName())) {
            connPackage=pk;
            break;
          }
        }
 else         if (null != anaPackage && pk.getName().equalsIgnoreCase(anaPackage.getName())) {
          connPackage=pk;
          break;
        }
      }
      if (connPackage == null) {
        SynTreeModel synTreeModel=new SynTreeModel(column);
        synTreeModel.setOldDataProvElement(anaPackage);
        modelInput.add(synTreeModel);
        continue;
      }
      List<? extends MetadataTable> connColumnSetList=null;
      if (connPackage instanceof Catalog && anaPackage instanceof Schema) {
        for (        Schema sche : CatalogHelper.getSchemas((Catalog)connPackage)) {
          if (sche.getName().equalsIgnoreCase(anaPackage.getName())) {
            connPackage=sche;
            break;
          }
        }
      }
      boolean loadFromDb=connPackage.getOwnedElement().size() == 0;
      if (anaColumnSet instanceof TdTable) {
        connColumnSetList=DqRepositoryViewService.getTables(newDataProvider,connPackage,null,loadFromDb);
        if (loadFromDb) {
          for (          MetadataTable table : connColumnSetList) {
            PackageHelper.addMetadataTable(table,connPackage);
          }
        }
      }
 else {
        connColumnSetList=DqRepositoryViewService.getViews(newDataProvider,connPackage,null,loadFromDb);
        if (loadFromDb) {
          for (          MetadataTable table : connColumnSetList) {
            PackageHelper.addMetadataTable(table,connPackage);
          }
        }
      }
      ColumnSet connColumnSet=null;
      for (      Object colSet : connColumnSetList) {
        if (((ColumnSet)colSet).getName().equalsIgnoreCase(anaColumnSet.getName())) {
          connColumnSet=(ColumnSet)colSet;
          break;
        }
      }
      if (connColumnSet == null) {
        SynTreeModel synTreeModel=new SynTreeModel(column);
        synTreeModel.setOldDataProvElement(anaColumnSet);
        synTreeModel.setNewDataProvElement(connPackage);
        modelInput.add(synTreeModel);
        continue;
      }
      TdColumn connColumn=null;
      loadFromDb=connColumnSet.getOwnedElement().size() == 0;
      List<TdColumn> columns=DqRepositoryViewService.getColumns(newDataProvider,connColumnSet,null,loadFromDb);
      ColumnSetHelper.addColumns(connColumnSet,columns);
      for (      TdColumn loopColumn : columns) {
        if (loopColumn.getName().equalsIgnoreCase(column.getName())) {
          connColumn=loopColumn;
          break;
        }
      }
      if (connColumn == null) {
        SynTreeModel synTreeModel=new SynTreeModel(column);
        synTreeModel.setOldDataProvElement(column);
        synTreeModel.setNewDataProvElement(connColumnSet);
        modelInput.add(synTreeModel);
        continue;
      }
      synedEleMap.put(column,connColumn);
      if (!connColumn.getSqlDataType().getName().equals(column.getSqlDataType().getName())) {
        SynTreeModel synTreeModel=new SynTreeModel(column);
        synTreeModel.setOldDataProvElement(column.getSqlDataType());
        modelInput.add(synTreeModel);
        continue;
      }
    }
 catch (    Exception e) {
      log.error(e,e);
      e.printStackTrace();
    }
  }
}","@Override public void reloadInputModel(){
  TdColumn column=null;
  modelInput.clear();
  synedEleMap.clear();
  for (  ModelElement element : analyzedElements) {
    try {
      column=(TdColumn)element;
      synedEleMap.put(column,null);
      ColumnSet anaColumnSet=ColumnHelper.getColumnOwnerAsColumnSet(column);
      Package anaPackage=ColumnSetHelper.getParentCatalogOrSchema(anaColumnSet);
      if (anaPackage == null) {
        return;
      }
      Package connPackage=null;
      for (      Package pk : newDataProvider.getDataPackage()) {
        if (pk instanceof Catalog && anaPackage instanceof Schema) {
          Catalog catl=CatalogHelper.getParentCatalog(anaPackage);
          if (null != catl && pk.getName().equalsIgnoreCase(catl.getName())) {
            connPackage=pk;
            break;
          }
        }
 else         if (null != anaPackage && pk.getName().equalsIgnoreCase(anaPackage.getName())) {
          connPackage=pk;
          break;
        }
      }
      if (connPackage == null) {
        SynTreeModel synTreeModel=new SynTreeModel(column);
        synTreeModel.setOldDataProvElement(anaPackage);
        modelInput.add(synTreeModel);
        continue;
      }
      List<? extends MetadataTable> connColumnSetList=null;
      if (connPackage instanceof Catalog && anaPackage instanceof Schema) {
        for (        Schema sche : CatalogHelper.getSchemas((Catalog)connPackage)) {
          if (sche.getName().equalsIgnoreCase(anaPackage.getName())) {
            connPackage=sche;
            break;
          }
        }
      }
      boolean loadFromDb=connPackage.getOwnedElement().size() == 0;
      if (anaColumnSet instanceof TdTable) {
        connColumnSetList=DqRepositoryViewService.getTables(newDataProvider,connPackage,null,loadFromDb);
        if (loadFromDb) {
          for (          MetadataTable table : connColumnSetList) {
            PackageHelper.addMetadataTable(table,connPackage);
          }
        }
      }
 else {
        connColumnSetList=DqRepositoryViewService.getViews(newDataProvider,connPackage,null,loadFromDb);
        if (loadFromDb) {
          for (          MetadataTable table : connColumnSetList) {
            PackageHelper.addMetadataTable(table,connPackage);
          }
        }
      }
      ColumnSet connColumnSet=null;
      for (      Object colSet : connColumnSetList) {
        if (((ColumnSet)colSet).getName().equalsIgnoreCase(anaColumnSet.getName())) {
          connColumnSet=(ColumnSet)colSet;
          break;
        }
      }
      if (connColumnSet == null) {
        SynTreeModel synTreeModel=new SynTreeModel(column);
        synTreeModel.setOldDataProvElement(anaColumnSet);
        synTreeModel.setNewDataProvElement(connPackage);
        modelInput.add(synTreeModel);
        continue;
      }
      TdColumn connColumn=null;
      loadFromDb=connColumnSet.getFeature().size() == 0;
      List<TdColumn> columns=DqRepositoryViewService.getColumns(newDataProvider,connColumnSet,null,loadFromDb);
      ColumnSetHelper.addColumns(connColumnSet,columns);
      for (      TdColumn loopColumn : columns) {
        if (loopColumn.getName().equalsIgnoreCase(column.getName())) {
          connColumn=loopColumn;
          break;
        }
      }
      if (connColumn == null) {
        SynTreeModel synTreeModel=new SynTreeModel(column);
        synTreeModel.setOldDataProvElement(column);
        synTreeModel.setNewDataProvElement(connColumnSet);
        modelInput.add(synTreeModel);
        continue;
      }
      synedEleMap.put(column,connColumn);
      if (!connColumn.getSqlDataType().getName().equals(column.getSqlDataType().getName())) {
        SynTreeModel synTreeModel=new SynTreeModel(column);
        synTreeModel.setOldDataProvElement(column.getSqlDataType());
        modelInput.add(synTreeModel);
        continue;
      }
    }
 catch (    Exception e) {
      log.error(e,e);
      e.printStackTrace();
    }
  }
}",0.9958180205297174
138058,"/** 
 * DOC xqliu Comment method ""createIndicatorUnit"".
 * @param fe
 * @param tableIndicator
 * @param analysis
 * @return
 */
public static TableIndicatorUnit createIndicatorUnit(IFile fe,TableIndicator tableIndicator,Analysis analysis){
  WhereRule whereRule=DQRuleResourceFileHelper.getInstance().findWhereRule(fe);
  for (  Indicator indicator : tableIndicator.getIndicators()) {
    if (whereRule.getName().equals(indicator.getName())) {
      return null;
    }
  }
  WhereRuleIndicator wrIndicator=IndicatorSqlFactory.eINSTANCE.createWhereRuleIndicator();
  wrIndicator.setAnalyzedElement(tableIndicator.getColumnSet());
  wrIndicator.setIndicatorDefinition(whereRule);
  IndicatorEnum type=IndicatorEnum.findIndicatorEnum(wrIndicator.eClass());
  TableIndicatorUnit addIndicatorUnit=tableIndicator.addSpecialIndicator(fe,type,wrIndicator);
  DependenciesHandler.getInstance().setUsageDependencyOn(analysis,whereRule);
  return addIndicatorUnit;
}","/** 
 * DOC xqliu Comment method ""createIndicatorUnit"".
 * @param fe
 * @param tableIndicator
 * @param analysis
 * @return
 */
public static TableIndicatorUnit createIndicatorUnit(IFile fe,TableIndicator tableIndicator,Analysis analysis){
  WhereRule whereRule=DQRuleResourceFileHelper.getInstance().findWhereRule(fe);
  for (  Indicator indicator : tableIndicator.getIndicators()) {
    if (whereRule.getName().equals(indicator.getName())) {
      return null;
    }
  }
  WhereRuleIndicator[] compositeWhereRuleIndicator=createCompositeWhereRuleIndicator(tableIndicator.getColumnSet(),whereRule);
  IndicatorEnum type=IndicatorEnum.findIndicatorEnum(compositeWhereRuleIndicator[0].eClass());
  TableIndicatorUnit addIndicatorUnit=tableIndicator.addSpecialIndicator(fe,type,compositeWhereRuleIndicator[0]);
  DependenciesHandler.getInstance().setUsageDependencyOn(analysis,whereRule);
  IndicatorEnum whereRuleAidType=IndicatorEnum.findIndicatorEnum(compositeWhereRuleIndicator[1].eClass());
  tableIndicator.addSpecialIndicator(fe,whereRuleAidType,compositeWhereRuleIndicator[1]);
  return addIndicatorUnit;
}",0.5950653120464441
138059,"public void dropWhereRules(Object data,List<IFile> files,int index,TreeItem item){
  TreeItem treeItem=null;
  if (item == null) {
    if (getTree().getItemCount() > 0) {
      treeItem=getTree().getItem(0);
    }
  }
 else {
    treeItem=item;
  }
  if (data != null && treeItem != null && files.size() > 0) {
    Analysis analysis=getAnalysis();
    for (    IFile file : files) {
      TableIndicatorUnit addIndicatorUnit=DQRuleUtilities.createIndicatorUnit(file,(TableIndicator)data,analysis);
      if (addIndicatorUnit != null) {
        createOneUnit(treeItem,addIndicatorUnit);
        setDirty(true);
      }
      TableIndicatorUnit addIndicatorAideUnit=DQRuleUtilities.createIndicatorAideUnit(file,(TableIndicator)data,analysis);
      if (addIndicatorUnit != null) {
        setDirty(true);
      }
 else {
        log.error(""String_Node_Str"");
      }
    }
  }
}","public void dropWhereRules(Object data,List<IFile> files,int index,TreeItem item){
  TreeItem treeItem=null;
  if (item == null) {
    if (getTree().getItemCount() > 0) {
      treeItem=getTree().getItem(0);
    }
  }
 else {
    treeItem=item;
  }
  if (data != null && treeItem != null && files.size() > 0) {
    Analysis analysis=getAnalysis();
    for (    IFile file : files) {
      TableIndicatorUnit addIndicatorUnit=DQRuleUtilities.createIndicatorUnit(file,(TableIndicator)data,analysis);
      if (addIndicatorUnit != null) {
        createOneUnit(treeItem,addIndicatorUnit);
        setDirty(true);
      }
    }
  }
}",0.8358803986710963
138060,"@Override public ModelElement initCWMResourceBuilder(){
  Analysis analysis=(Analysis)super.initCWMResourceBuilder();
  NamedColumnSet[] ncss=getNamedColumnSet();
  Connection tdp=getTdDataProvider();
  if (ncss != null && getAnalysisBuilder() != null) {
    List<Indicator> indicatorList=new ArrayList<Indicator>();
    WhereRule[] whereRules=getWhereRules(dqruleSelectPage.getCViewer().getCheckedElements());
    for (    NamedColumnSet ncs : ncss) {
      RowCountIndicator rowCountIndicator=IndicatorsFactory.eINSTANCE.createRowCountIndicator();
      DefinitionHandler.getInstance().setDefaultIndicatorDefinition(rowCountIndicator);
      rowCountIndicator.setAnalyzedElement(ncs);
      indicatorList.add(rowCountIndicator);
      if (whereRules != null) {
        for (        WhereRule whereRule : whereRules) {
          WhereRuleIndicator wrIndicator=IndicatorSqlFactory.eINSTANCE.createWhereRuleIndicator();
          wrIndicator.setAnalyzedElement(ncs);
          wrIndicator.setIndicatorDefinition(whereRule);
          indicatorList.add(wrIndicator);
          WhereRuleAideIndicator wraIndicator=IndicatorSqlFactory.eINSTANCE.createWhereRuleAideIndicator();
          wraIndicator.setAnalyzedElement(wrIndicator.getAnalyzedElement());
          wraIndicator.setIndicatorDefinition(wrIndicator.getIndicatorDefinition());
          indicatorList.add(wraIndicator);
        }
      }
    }
    getAnalysisBuilder().addElementsToAnalyze(ncss,indicatorList.toArray(new Indicator[indicatorList.size()]));
    getAnalysisBuilder().setAnalysisConnection(tdp);
  }
  return analysis;
}","@Override public ModelElement initCWMResourceBuilder(){
  Analysis analysis=(Analysis)super.initCWMResourceBuilder();
  NamedColumnSet[] ncss=getNamedColumnSet();
  Connection tdp=getTdDataProvider();
  if (ncss != null && getAnalysisBuilder() != null) {
    List<Indicator> indicatorList=new ArrayList<Indicator>();
    WhereRule[] whereRules=getWhereRules(dqruleSelectPage.getCViewer().getCheckedElements());
    for (    NamedColumnSet ncs : ncss) {
      RowCountIndicator rowCountIndicator=IndicatorsFactory.eINSTANCE.createRowCountIndicator();
      DefinitionHandler.getInstance().setDefaultIndicatorDefinition(rowCountIndicator);
      rowCountIndicator.setAnalyzedElement(ncs);
      indicatorList.add(rowCountIndicator);
      if (whereRules != null) {
        for (        WhereRule whereRule : whereRules) {
          WhereRuleIndicator[] compositeWhereRuleIndicator=DQRuleUtilities.createCompositeWhereRuleIndicator(ncs,whereRule);
          indicatorList.addAll(Arrays.asList(compositeWhereRuleIndicator));
        }
      }
    }
    getAnalysisBuilder().addElementsToAnalyze(ncss,indicatorList.toArray(new Indicator[indicatorList.size()]));
    getAnalysisBuilder().setAnalysisConnection(tdp);
  }
  return analysis;
}",0.6470796460176991
138061,"private void computeRepNodeType(IRepositoryNode[] selectedRepositoryNodes,IRepositoryNode targetNode) throws PersistenceException {
  if (selectedRepositoryNodes != null) {
    for (    IRepositoryNode sourceNode : selectedRepositoryNodes) {
      if (targetNode == sourceNode.getParent()) {
        return;
      }
      if (isSameType(sourceNode,targetNode)) {
        if (sourceNode.getType() == ENodeType.REPOSITORY_ELEMENT) {
          if (sourceNode instanceof AnalysisRepNode) {
            moveAnalysisRepNode(sourceNode,targetNode);
          }
 else           if (sourceNode instanceof ReportRepNode) {
            moveReportRepNode(sourceNode,targetNode);
          }
 else           if (sourceNode instanceof DBConnectionRepNode) {
            moveConnectionRepNode(sourceNode,targetNode);
          }
 else           if (sourceNode instanceof SysIndicatorDefinitionRepNode) {
            if (!((SysIndicatorDefinitionRepNode)sourceNode).isSystemIndicator()) {
              moveUDIRepNode(sourceNode,targetNode);
            }
          }
 else           if (sourceNode instanceof PatternRepNode) {
            movePatternRepNode(sourceNode,targetNode);
          }
 else {
            moveCommonRepNode(sourceNode,targetNode);
          }
        }
 else         if (sourceNode.getType() == ENodeType.SIMPLE_FOLDER) {
          moveFolderRepNode(sourceNode,targetNode);
        }
        closeEditorIfOpened(sourceNode);
      }
    }
  }
}","private void computeRepNodeType(IRepositoryNode[] selectedRepositoryNodes,IRepositoryNode targetNode) throws PersistenceException {
  if (selectedRepositoryNodes != null) {
    for (    IRepositoryNode sourceNode : selectedRepositoryNodes) {
      if (targetNode == sourceNode.getParent()) {
        continue;
      }
      if (isSameType(sourceNode,targetNode)) {
        if (sourceNode.getType() == ENodeType.REPOSITORY_ELEMENT) {
          if (sourceNode instanceof AnalysisRepNode) {
            moveAnalysisRepNode(sourceNode,targetNode);
          }
 else           if (sourceNode instanceof ReportRepNode) {
            moveReportRepNode(sourceNode,targetNode);
          }
 else           if (sourceNode instanceof DBConnectionRepNode) {
            moveConnectionRepNode(sourceNode,targetNode);
          }
 else           if (sourceNode instanceof SysIndicatorDefinitionRepNode) {
            if (!((SysIndicatorDefinitionRepNode)sourceNode).isSystemIndicator()) {
              moveUDIRepNode(sourceNode,targetNode);
            }
          }
 else           if (sourceNode instanceof PatternRepNode) {
            movePatternRepNode(sourceNode,targetNode);
          }
 else {
            moveCommonRepNode(sourceNode,targetNode);
          }
        }
 else         if (sourceNode.getType() == ENodeType.SIMPLE_FOLDER) {
          moveFolderRepNode(sourceNode,targetNode);
        }
        closeEditorIfOpened(sourceNode);
        CorePlugin.getDefault().refreshDQView(sourceNode.getParent());
      }
    }
  }
}",0.9714860784971486
138062,"@Override public IStatus handleDrop(CommonDropAdapter aDropAdapter,DropTargetEvent aDropTargetEvent,Object aTarget){
  IRepositoryNode targetNode=null;
  try {
    IRepositoryNode[] selectedRepositoryNodes=null;
    targetNode=(IRepositoryNode)aTarget;
    if (aDropAdapter.getCurrentTarget() == null || aDropTargetEvent.data == null) {
      return Status.CANCEL_STATUS;
    }
    TransferData currentTransfer=aDropAdapter.getCurrentTransfer();
    if (LocalSelectionTransfer.getTransfer().isSupportedType(currentTransfer)) {
      selectedRepositoryNodes=getSelectedRepositoryNodes();
    }
    computeRepNodeType(selectedRepositoryNodes,targetNode);
    if (DQRepositoryNode.isOnFilterring()) {
      RepositoryNodeHelper.fillTreeList(null);
      RepositoryNodeHelper.setFilteredNode(RepositoryNodeHelper.getRootNode(ERepositoryObjectType.TDQ_DATA_PROFILING,true));
    }
  }
 catch (  PersistenceException e) {
    e.printStackTrace();
  }
  ProxyRepositoryManager.getInstance().refresh();
  if (targetNode != null) {
    CorePlugin.getDefault().refreshDQView(RepositoryNodeHelper.getRootNode(targetNode.getObjectType()));
  }
 else {
    CorePlugin.getDefault().refreshDQView();
  }
  return Status.OK_STATUS;
}","@Override public IStatus handleDrop(CommonDropAdapter aDropAdapter,DropTargetEvent aDropTargetEvent,Object aTarget){
  IRepositoryNode targetNode=null;
  try {
    IRepositoryNode[] selectedRepositoryNodes=null;
    targetNode=(IRepositoryNode)aTarget;
    if (aDropAdapter.getCurrentTarget() == null || aDropTargetEvent.data == null) {
      return Status.CANCEL_STATUS;
    }
    TransferData currentTransfer=aDropAdapter.getCurrentTransfer();
    if (LocalSelectionTransfer.getTransfer().isSupportedType(currentTransfer)) {
      selectedRepositoryNodes=getSelectedRepositoryNodes();
    }
    computeRepNodeType(selectedRepositoryNodes,targetNode);
    if (DQRepositoryNode.isOnFilterring()) {
      RepositoryNodeHelper.fillTreeList(null);
      RepositoryNodeHelper.setFilteredNode(RepositoryNodeHelper.getRootNode(ERepositoryObjectType.TDQ_DATA_PROFILING,true));
    }
  }
 catch (  PersistenceException e) {
    e.printStackTrace();
  }
  ProxyRepositoryManager.getInstance().refresh();
  return Status.OK_STATUS;
}",0.9133928571428572
138063,"@Override protected void saveAnalysis() throws DataprofilerCoreException {
  analysis.setName(analysis.getName().replace(""String_Node_Str"",""String_Node_Str""));
  for (  Domain domain : this.analysis.getParameters().getDataFilter()) {
    domain.setName(this.analysis.getName());
  }
  IRepositoryViewObject reposObject=null;
  getAnalysisHandler().clearAnalysis();
  List<RepositoryNode> columnListAANode=anaColumnCompareViewer.getColumnListA();
  List<RepositoryNode> columnListBBNode=anaColumnCompareViewer.getColumnListB();
  AnalysisBuilder anaBuilder=new AnalysisBuilder();
  anaBuilder.setAnalysis(this.analysis);
  Connection tdDataProvider=null;
  for (int i=0; i < columnListAANode.size(); i++) {
    if (columnListBBNode.size() > i) {
      ColumnDependencyIndicator indicator=ColumnsetFactory.eINSTANCE.createColumnDependencyIndicator();
      TdColumn columnA=(TdColumn)((MetadataColumnRepositoryObject)columnListAANode.get(i).getObject()).getTdColumn();
      TdColumn columnB=(TdColumn)((MetadataColumnRepositoryObject)columnListBBNode.get(i).getObject()).getTdColumn();
      indicator.setColumnA(columnA);
      indicator.setColumnB(columnB);
      indicator.setIndicatorDefinition(DefinitionHandler.getInstance().getFDRuleDefaultIndicatorDefinition());
      analysis.getResults().getIndicators().add(indicator);
      anaBuilder.addElementToAnalyze(columnA,indicator);
      anaBuilder.addElementToAnalyze(columnB,indicator);
    }
  }
  if (columnListAANode.size() > 0) {
    reposObject=columnListAANode.get(0).getObject();
    tdDataProvider=((ConnectionItem)reposObject.getProperty().getItem()).getConnection();
    analysis.getContext().setConnection(tdDataProvider);
    TypedReturnCode<Dependency> rc=DependenciesHandler.getInstance().setDependencyOn(analysis,tdDataProvider);
    if (!rc.isOk()) {
      log.info(""String_Node_Str"" + analysis.getFileName());
    }
  }
 else {
    tdDataProvider=(Connection)analysis.getContext().getConnection();
    if (tdDataProvider != null && tdDataProvider.getSupplierDependency().size() > 0) {
      tdDataProvider.getSupplierDependency().get(0).getClient().remove(analysis);
      analysis.getContext().setConnection(null);
      analysis.getClientDependency().clear();
    }
  }
  this.updateAnalysisClientDependency();
  ReturnCode saved=new ReturnCode(false);
  IEditorInput editorInput=this.getEditorInput();
  if (editorInput instanceof AnalysisItemEditorInput) {
    AnalysisItemEditorInput analysisInput=(AnalysisItemEditorInput)editorInput;
    TDQAnalysisItem tdqAnalysisItem=analysisInput.getTDQAnalysisItem();
    tdqAnalysisItem.getProperty().setLabel(analysis.getName());
    this.nameText.setText(analysis.getName());
    saved=ElementWriterFactory.getInstance().createAnalysisWrite().save(tdqAnalysisItem);
  }
  logSaved(saved);
}","@Override protected void saveAnalysis() throws DataprofilerCoreException {
  analysis.setName(analysis.getName().replace(""String_Node_Str"",""String_Node_Str""));
  for (  Domain domain : this.analysis.getParameters().getDataFilter()) {
    domain.setName(this.analysis.getName());
  }
  IRepositoryViewObject reposObject=null;
  getAnalysisHandler().clearAnalysis();
  List<RepositoryNode> columnListAANode=anaColumnCompareViewer.getColumnListA();
  List<RepositoryNode> columnListBBNode=anaColumnCompareViewer.getColumnListB();
  AnalysisBuilder anaBuilder=new AnalysisBuilder();
  anaBuilder.setAnalysis(this.analysis);
  Connection tdDataProvider=null;
  for (int i=0; i < columnListAANode.size(); i++) {
    if (columnListBBNode.size() > i) {
      ColumnDependencyIndicator indicator=ColumnsetFactory.eINSTANCE.createColumnDependencyIndicator();
      TdColumn columnA=(TdColumn)((MetadataColumnRepositoryObject)columnListAANode.get(i).getObject()).getTdColumn();
      TdColumn columnB=(TdColumn)((MetadataColumnRepositoryObject)columnListBBNode.get(i).getObject()).getTdColumn();
      indicator.setColumnA(columnA);
      indicator.setColumnB(columnB);
      indicator.setIndicatorDefinition(DefinitionHandler.getInstance().getFDRuleDefaultIndicatorDefinition());
      analysis.getResults().getIndicators().add(indicator);
      anaBuilder.addElementToAnalyze(columnA,indicator);
      anaBuilder.addElementToAnalyze(columnB,indicator);
    }
  }
  if (columnListAANode.size() > 0) {
    reposObject=columnListAANode.get(0).getObject();
    tdDataProvider=((ConnectionItem)reposObject.getProperty().getItem()).getConnection();
    analysis.getContext().setConnection(tdDataProvider);
    TypedReturnCode<Dependency> rc=DependenciesHandler.getInstance().setDependencyOn(analysis,tdDataProvider);
    if (!rc.isOk()) {
      log.info(""String_Node_Str"" + analysis.getFileName());
    }
  }
 else {
    tdDataProvider=(Connection)analysis.getContext().getConnection();
    if (tdDataProvider != null && tdDataProvider.getSupplierDependency().size() > 0) {
      tdDataProvider.getSupplierDependency().get(0).getClient().remove(analysis);
      analysis.getContext().setConnection(null);
      analysis.getClientDependency().clear();
    }
  }
  this.updateAnalysisClientDependency();
  ReturnCode saved=new ReturnCode(false);
  IEditorInput editorInput=this.getEditorInput();
  if (editorInput instanceof AnalysisItemEditorInput) {
    AnalysisItemEditorInput analysisInput=(AnalysisItemEditorInput)editorInput;
    TDQAnalysisItem tdqAnalysisItem=analysisInput.getTDQAnalysisItem();
    tdqAnalysisItem.getProperty().setLabel(analysis.getName());
    this.nameText.setText(analysis.getName());
    saved=ElementWriterFactory.getInstance().createAnalysisWrite().save(tdqAnalysisItem);
  }
  logSaved(saved);
  anaColumnCompareViewer.setDirty(false);
  dataFilterComp.setDirty(false);
}",0.9866666666666668
138064,"@Override protected void saveAnalysis() throws DataprofilerCoreException {
  this.analysis.setName(this.analysis.getName().replace(""String_Node_Str"",""String_Node_Str""));
  for (  Domain domain : this.analysis.getParameters().getDataFilter()) {
    domain.setName(this.analysis.getName());
  }
  IRepositoryViewObject reposObject=null;
  getAnalysisHandler().clearAnalysis();
  List<ModelElement> analysedElements=new ArrayList<ModelElement>();
  anaColumnCompareViewer.setColumnABForMatchingIndicator(rowMatchingIndicatorA,anaColumnCompareViewer.getColumnListA(),anaColumnCompareViewer.getColumnListB());
  anaColumnCompareViewer.setColumnABForMatchingIndicator(rowMatchingIndicatorB,anaColumnCompareViewer.getColumnListB(),anaColumnCompareViewer.getColumnListA());
  Connection tdDataProvider=null;
  for (int i=0; i < anaColumnCompareViewer.getColumnListA().size(); i++) {
    reposObject=anaColumnCompareViewer.getColumnListA().get(i).getObject();
    analysedElements.add(((MetadataColumnRepositoryObject)reposObject).getTdColumn());
  }
  for (int i=0; i < anaColumnCompareViewer.getColumnListB().size(); i++) {
    reposObject=anaColumnCompareViewer.getColumnListB().get(i).getObject();
    analysedElements.add(((MetadataColumnRepositoryObject)reposObject).getTdColumn());
  }
  if (analysedElements.size() > 0) {
    tdDataProvider=ConnectionHelper.getTdDataProvider((TdColumn)analysedElements.get(0));
    analysis.getContext().setConnection(tdDataProvider);
    analysis.getContext().setConnection(tdDataProvider);
    TypedReturnCode<Dependency> rc=DependenciesHandler.getInstance().setDependencyOn(analysis,tdDataProvider);
    if (!rc.isOk()) {
      log.info(""String_Node_Str"" + analysis.getFileName());
    }
  }
 else {
    tdDataProvider=(Connection)analysis.getContext().getConnection();
    if (tdDataProvider != null) {
      tdDataProvider.getSupplierDependency().get(0).getClient().remove(analysis);
      analysis.getContext().setConnection(null);
      analysis.getClientDependency().clear();
    }
  }
  AnalysisBuilder anaBuilder=new AnalysisBuilder();
  anaBuilder.setAnalysis(this.analysis);
  if (anaColumnCompareViewer.getCheckComputeButton().getSelection()) {
    analysis.getParameters().getDeactivatedIndicators().add(rowMatchingIndicatorB);
  }
 else {
    analysis.getParameters().getDeactivatedIndicators().clear();
  }
  anaBuilder.addElementsToAnalyze(analysedElements.toArray(new ModelElement[analysedElements.size()]),new Indicator[]{rowMatchingIndicatorA,rowMatchingIndicatorB});
  this.updateAnalysisClientDependency();
  ReturnCode saved=new ReturnCode(false);
  IEditorInput editorInput=this.getEditorInput();
  if (editorInput instanceof AnalysisItemEditorInput) {
    AnalysisItemEditorInput analysisInput=(AnalysisItemEditorInput)editorInput;
    TDQAnalysisItem tdqAnalysisItem=analysisInput.getTDQAnalysisItem();
    tdqAnalysisItem.getProperty().setLabel(analysis.getName());
    this.nameText.setText(analysis.getName());
    saved=ElementWriterFactory.getInstance().createAnalysisWrite().save(tdqAnalysisItem);
  }
  logSaved(saved);
}","@Override protected void saveAnalysis() throws DataprofilerCoreException {
  this.analysis.setName(this.analysis.getName().replace(""String_Node_Str"",""String_Node_Str""));
  for (  Domain domain : this.analysis.getParameters().getDataFilter()) {
    domain.setName(this.analysis.getName());
  }
  IRepositoryViewObject reposObject=null;
  getAnalysisHandler().clearAnalysis();
  List<ModelElement> analysedElements=new ArrayList<ModelElement>();
  anaColumnCompareViewer.setColumnABForMatchingIndicator(rowMatchingIndicatorA,anaColumnCompareViewer.getColumnListA(),anaColumnCompareViewer.getColumnListB());
  anaColumnCompareViewer.setColumnABForMatchingIndicator(rowMatchingIndicatorB,anaColumnCompareViewer.getColumnListB(),anaColumnCompareViewer.getColumnListA());
  Connection tdDataProvider=null;
  for (int i=0; i < anaColumnCompareViewer.getColumnListA().size(); i++) {
    reposObject=anaColumnCompareViewer.getColumnListA().get(i).getObject();
    analysedElements.add(((MetadataColumnRepositoryObject)reposObject).getTdColumn());
  }
  for (int i=0; i < anaColumnCompareViewer.getColumnListB().size(); i++) {
    reposObject=anaColumnCompareViewer.getColumnListB().get(i).getObject();
    analysedElements.add(((MetadataColumnRepositoryObject)reposObject).getTdColumn());
  }
  if (analysedElements.size() > 0) {
    tdDataProvider=ConnectionHelper.getTdDataProvider((TdColumn)analysedElements.get(0));
    analysis.getContext().setConnection(tdDataProvider);
    analysis.getContext().setConnection(tdDataProvider);
    TypedReturnCode<Dependency> rc=DependenciesHandler.getInstance().setDependencyOn(analysis,tdDataProvider);
    if (!rc.isOk()) {
      log.info(""String_Node_Str"" + analysis.getFileName());
    }
  }
 else {
    tdDataProvider=(Connection)analysis.getContext().getConnection();
    if (tdDataProvider != null) {
      tdDataProvider.getSupplierDependency().get(0).getClient().remove(analysis);
      analysis.getContext().setConnection(null);
      analysis.getClientDependency().clear();
    }
  }
  AnalysisBuilder anaBuilder=new AnalysisBuilder();
  anaBuilder.setAnalysis(this.analysis);
  if (anaColumnCompareViewer.getCheckComputeButton().getSelection()) {
    analysis.getParameters().getDeactivatedIndicators().add(rowMatchingIndicatorB);
  }
 else {
    analysis.getParameters().getDeactivatedIndicators().clear();
  }
  anaBuilder.addElementsToAnalyze(analysedElements.toArray(new ModelElement[analysedElements.size()]),new Indicator[]{rowMatchingIndicatorA,rowMatchingIndicatorB});
  this.updateAnalysisClientDependency();
  ReturnCode saved=new ReturnCode(false);
  IEditorInput editorInput=this.getEditorInput();
  if (editorInput instanceof AnalysisItemEditorInput) {
    AnalysisItemEditorInput analysisInput=(AnalysisItemEditorInput)editorInput;
    TDQAnalysisItem tdqAnalysisItem=analysisInput.getTDQAnalysisItem();
    tdqAnalysisItem.getProperty().setLabel(analysis.getName());
    this.nameText.setText(analysis.getName());
    saved=ElementWriterFactory.getInstance().createAnalysisWrite().save(tdqAnalysisItem);
  }
  logSaved(saved);
  anaColumnCompareViewer.setDirty(false);
  dataFilterCompA.setDirty(false);
  dataFilterCompB.setDirty(false);
}",0.9821826280623608
138065,"/** 
 * ADD mzhao 2009-05-05 bug:6587.
 */
protected void updateBindConnection(AbstractAnalysisMetadataPage masterPage,List<TableViewer> tableViewerPosStack){
  boolean isEmpty1=tableViewerPosStack.get(0) == null || tableViewerPosStack.get(0).getInput() == null || ((List<TdColumn>)tableViewerPosStack.get(0).getInput()).size() == 0;
  boolean isEmpty2=tableViewerPosStack.get(1) == null || tableViewerPosStack.get(1).getInput() == null || ((List<TdColumn>)tableViewerPosStack.get(1).getInput()).size() == 0;
  if (isEmpty1 && isEmpty2) {
    return;
  }
 else {
    TableViewer columnsElementViewer=null;
    if (!isEmpty1) {
      columnsElementViewer=tableViewerPosStack.get(0);
    }
 else {
      columnsElementViewer=tableViewerPosStack.get(1);
    }
    Connection tdProvider=null;
    Object input=columnsElementViewer.getInput();
    List<DBColumnRepNode> columnSet=(List<DBColumnRepNode>)input;
    if (columnSet != null && columnSet.size() != 0) {
      TdColumn column=(TdColumn)((MetadataColumnRepositoryObject)columnSet.get(0).getObject()).getTdColumn();
      if (column != null && column.eIsProxy()) {
        column=(TdColumn)EObjectHelper.resolveObject(column);
      }
      tdProvider=ConnectionHelper.getTdDataProvider(column);
      setConnectionState(masterPage,tdProvider);
    }
  }
}","/** 
 * ADD mzhao 2009-05-05 bug:6587.
 */
protected void updateBindConnection(AbstractAnalysisMetadataPage masterPage,List<TableViewer> tableViewerPosStack){
  boolean isEmpty1=tableViewerPosStack.get(0) == null || tableViewerPosStack.get(0).getInput() == null || ((List)tableViewerPosStack.get(0).getInput()).size() == 0;
  boolean isEmpty2=tableViewerPosStack.get(1) == null || tableViewerPosStack.get(1).getInput() == null || ((List)tableViewerPosStack.get(1).getInput()).size() == 0;
  if (isEmpty1 && isEmpty2) {
    return;
  }
 else {
    TableViewer columnsElementViewer=null;
    if (!isEmpty1) {
      columnsElementViewer=tableViewerPosStack.get(0);
    }
 else {
      columnsElementViewer=tableViewerPosStack.get(1);
    }
    Connection tdProvider=null;
    Object input=columnsElementViewer.getInput();
    List<DBColumnRepNode> columnSet=(List<DBColumnRepNode>)input;
    if (columnSet != null && columnSet.size() != 0) {
      TdColumn column=(TdColumn)((MetadataColumnRepositoryObject)columnSet.get(0).getObject()).getTdColumn();
      if (column != null && column.eIsProxy()) {
        column=(TdColumn)EObjectHelper.resolveObject(column);
      }
      tdProvider=ConnectionHelper.getTdDataProvider(column);
      setConnectionState(masterPage,tdProvider);
    }
  }
}",0.9923017705927636
138066,"protected void removeItemBranch(TreeItem item){
  TreeEditor[] editors=(TreeEditor[])item.getData(ITEM_EDITOR_KEY);
  if (editors != null) {
    for (int j=0; j < editors.length; j++) {
      editors[j].getEditor().dispose();
      editors[j].dispose();
    }
  }
  if (item.getItemCount() == 0) {
    item.dispose();
    this.setDirty(true);
    return;
  }
  TreeItem[] items=item.getItems();
  for (int i=0; i < items.length; i++) {
    removeItemBranch(items[i]);
    removeTreeItem(items[i]);
  }
  item.dispose();
  this.setDirty(true);
}","protected void removeItemBranch(TreeItem item){
  if (item == null) {
    return;
  }
  TreeEditor[] editors=(TreeEditor[])item.getData(ITEM_EDITOR_KEY);
  if (editors != null) {
    for (int j=0; j < editors.length; j++) {
      editors[j].getEditor().dispose();
      editors[j].dispose();
    }
  }
  if (item.getItemCount() == 0) {
    item.dispose();
    this.setDirty(true);
    return;
  }
  TreeItem[] items=item.getItems();
  for (int i=0; i < items.length; i++) {
    removeItemBranch(items[i]);
    removeTreeItem(items[i]);
  }
  item.dispose();
  this.setDirty(true);
}",0.966252220248668
138067,"@Override protected void saveAnalysis() throws DataprofilerCoreException {
  for (  Domain domain : this.analysis.getParameters().getDataFilter()) {
    domain.setName(this.analysis.getName());
  }
  IRepositoryViewObject reposObject=null;
  getAnalysisHandler().clearAnalysis();
  List<RepositoryNode> columnListAANode=anaColumnCompareViewer.getColumnListA();
  List<RepositoryNode> columnListBBNode=anaColumnCompareViewer.getColumnListB();
  AnalysisBuilder anaBuilder=new AnalysisBuilder();
  anaBuilder.setAnalysis(this.analysis);
  Connection tdDataProvider=null;
  for (int i=0; i < columnListAANode.size(); i++) {
    if (columnListBBNode.size() > i) {
      ColumnDependencyIndicator indicator=ColumnsetFactory.eINSTANCE.createColumnDependencyIndicator();
      TdColumn columnA=(TdColumn)((MetadataColumnRepositoryObject)columnListAANode.get(i).getObject()).getTdColumn();
      TdColumn columnB=(TdColumn)((MetadataColumnRepositoryObject)columnListBBNode.get(i).getObject()).getTdColumn();
      indicator.setColumnA(columnA);
      indicator.setColumnB(columnB);
      indicator.setIndicatorDefinition(DefinitionHandler.getInstance().getFDRuleDefaultIndicatorDefinition());
      analysis.getResults().getIndicators().add(indicator);
      anaBuilder.addElementToAnalyze(columnA,indicator);
      anaBuilder.addElementToAnalyze(columnB,indicator);
    }
  }
  if (columnListAANode.size() > 0) {
    reposObject=columnListAANode.get(0).getObject();
    tdDataProvider=((ConnectionItem)reposObject.getProperty().getItem()).getConnection();
    analysis.getContext().setConnection(tdDataProvider);
    TypedReturnCode<Dependency> rc=DependenciesHandler.getInstance().setDependencyOn(analysis,tdDataProvider);
    if (!rc.isOk()) {
      log.info(""String_Node_Str"" + analysis.getFileName());
    }
  }
 else {
    tdDataProvider=(Connection)analysis.getContext().getConnection();
    if (tdDataProvider != null && tdDataProvider.getSupplierDependency().size() > 0) {
      tdDataProvider.getSupplierDependency().get(0).getClient().remove(analysis);
      analysis.getContext().setConnection(null);
      analysis.getClientDependency().clear();
    }
  }
  this.updateAnalysisClientDependency();
  ReturnCode saved=new ReturnCode(false);
  IEditorInput editorInput=this.getEditorInput();
  if (editorInput instanceof AnalysisItemEditorInput) {
    AnalysisItemEditorInput analysisInput=(AnalysisItemEditorInput)editorInput;
    TDQAnalysisItem tdqAnalysisItem=analysisInput.getTDQAnalysisItem();
    tdqAnalysisItem.getProperty().setDisplayName(analysis.getName());
    tdqAnalysisItem.getProperty().setLabel(WorkspaceUtils.normalize(analysis.getName()));
    this.nameText.setText(analysis.getName());
    saved=ElementWriterFactory.getInstance().createAnalysisWrite().save(tdqAnalysisItem,true);
  }
  logSaved(saved);
}","@Override protected void saveAnalysis() throws DataprofilerCoreException {
  for (  Domain domain : this.analysis.getParameters().getDataFilter()) {
    domain.setName(this.analysis.getName());
  }
  IRepositoryViewObject reposObject=null;
  getAnalysisHandler().clearAnalysis();
  List<RepositoryNode> columnListAANode=anaColumnCompareViewer.getColumnListA();
  List<RepositoryNode> columnListBBNode=anaColumnCompareViewer.getColumnListB();
  AnalysisBuilder anaBuilder=new AnalysisBuilder();
  anaBuilder.setAnalysis(this.analysis);
  Connection tdDataProvider=null;
  for (int i=0; i < columnListAANode.size(); i++) {
    if (columnListBBNode.size() > i) {
      ColumnDependencyIndicator indicator=ColumnsetFactory.eINSTANCE.createColumnDependencyIndicator();
      TdColumn columnA=(TdColumn)((MetadataColumnRepositoryObject)columnListAANode.get(i).getObject()).getTdColumn();
      TdColumn columnB=(TdColumn)((MetadataColumnRepositoryObject)columnListBBNode.get(i).getObject()).getTdColumn();
      indicator.setColumnA(columnA);
      indicator.setColumnB(columnB);
      indicator.setIndicatorDefinition(DefinitionHandler.getInstance().getFDRuleDefaultIndicatorDefinition());
      analysis.getResults().getIndicators().add(indicator);
      anaBuilder.addElementToAnalyze(columnA,indicator);
      anaBuilder.addElementToAnalyze(columnB,indicator);
    }
  }
  if (columnListAANode.size() > 0) {
    reposObject=columnListAANode.get(0).getObject();
    tdDataProvider=((ConnectionItem)reposObject.getProperty().getItem()).getConnection();
    analysis.getContext().setConnection(tdDataProvider);
    TypedReturnCode<Dependency> rc=DependenciesHandler.getInstance().setDependencyOn(analysis,tdDataProvider);
    if (!rc.isOk()) {
      log.info(""String_Node_Str"" + analysis.getFileName());
    }
  }
 else {
    tdDataProvider=(Connection)analysis.getContext().getConnection();
    if (tdDataProvider != null && tdDataProvider.getSupplierDependency().size() > 0) {
      tdDataProvider.getSupplierDependency().get(0).getClient().remove(analysis);
      analysis.getContext().setConnection(null);
      analysis.getClientDependency().clear();
    }
  }
  this.updateAnalysisClientDependency();
  ReturnCode saved=new ReturnCode(false);
  IEditorInput editorInput=this.getEditorInput();
  if (editorInput instanceof AnalysisItemEditorInput) {
    AnalysisItemEditorInput analysisInput=(AnalysisItemEditorInput)editorInput;
    TDQAnalysisItem tdqAnalysisItem=analysisInput.getTDQAnalysisItem();
    tdqAnalysisItem.getProperty().setDisplayName(analysis.getName());
    tdqAnalysisItem.getProperty().setLabel(WorkspaceUtils.normalize(analysis.getName()));
    this.nameText.setText(analysis.getName());
    saved=ElementWriterFactory.getInstance().createAnalysisWrite().save(tdqAnalysisItem,true);
  }
  logSaved(saved);
  anaColumnCompareViewer.setDirty(false);
  dataFilterComp.setDirty(false);
}",0.9867411025819958
138068,"@Override protected void saveAnalysis() throws DataprofilerCoreException {
  for (  Domain domain : this.analysis.getParameters().getDataFilter()) {
    domain.setName(this.analysis.getName());
  }
  IRepositoryViewObject reposObject=null;
  getAnalysisHandler().clearAnalysis();
  List<ModelElement> analysedElements=new ArrayList<ModelElement>();
  anaColumnCompareViewer.setColumnABForMatchingIndicator(rowMatchingIndicatorA,anaColumnCompareViewer.getColumnListA(),anaColumnCompareViewer.getColumnListB());
  anaColumnCompareViewer.setColumnABForMatchingIndicator(rowMatchingIndicatorB,anaColumnCompareViewer.getColumnListB(),anaColumnCompareViewer.getColumnListA());
  Connection tdDataProvider=null;
  for (int i=0; i < anaColumnCompareViewer.getColumnListA().size(); i++) {
    reposObject=anaColumnCompareViewer.getColumnListA().get(i).getObject();
    analysedElements.add(((MetadataColumnRepositoryObject)reposObject).getTdColumn());
  }
  for (int i=0; i < anaColumnCompareViewer.getColumnListB().size(); i++) {
    reposObject=anaColumnCompareViewer.getColumnListB().get(i).getObject();
    analysedElements.add(((MetadataColumnRepositoryObject)reposObject).getTdColumn());
  }
  if (analysedElements.size() > 0) {
    tdDataProvider=ConnectionHelper.getTdDataProvider((TdColumn)analysedElements.get(0));
    analysis.getContext().setConnection(tdDataProvider);
    analysis.getContext().setConnection(tdDataProvider);
    TypedReturnCode<Dependency> rc=DependenciesHandler.getInstance().setDependencyOn(analysis,tdDataProvider);
    if (!rc.isOk()) {
      log.info(""String_Node_Str"" + analysis.getFileName());
    }
  }
 else {
    tdDataProvider=(Connection)analysis.getContext().getConnection();
    if (tdDataProvider != null) {
      tdDataProvider.getSupplierDependency().get(0).getClient().remove(analysis);
      analysis.getContext().setConnection(null);
      analysis.getClientDependency().clear();
    }
  }
  AnalysisBuilder anaBuilder=new AnalysisBuilder();
  anaBuilder.setAnalysis(this.analysis);
  if (anaColumnCompareViewer.getCheckComputeButton().getSelection()) {
    analysis.getParameters().getDeactivatedIndicators().add(rowMatchingIndicatorB);
  }
 else {
    analysis.getParameters().getDeactivatedIndicators().clear();
  }
  anaBuilder.addElementsToAnalyze(analysedElements.toArray(new ModelElement[analysedElements.size()]),new Indicator[]{rowMatchingIndicatorA,rowMatchingIndicatorB});
  this.updateAnalysisClientDependency();
  ReturnCode saved=new ReturnCode(false);
  IEditorInput editorInput=this.getEditorInput();
  if (editorInput instanceof AnalysisItemEditorInput) {
    AnalysisItemEditorInput analysisInput=(AnalysisItemEditorInput)editorInput;
    TDQAnalysisItem tdqAnalysisItem=analysisInput.getTDQAnalysisItem();
    tdqAnalysisItem.getProperty().setDisplayName(analysis.getName());
    tdqAnalysisItem.getProperty().setLabel(WorkspaceUtils.normalize(analysis.getName()));
    this.nameText.setText(analysis.getName());
    saved=ElementWriterFactory.getInstance().createAnalysisWrite().save(tdqAnalysisItem,true);
  }
  logSaved(saved);
}","@Override protected void saveAnalysis() throws DataprofilerCoreException {
  for (  Domain domain : this.analysis.getParameters().getDataFilter()) {
    domain.setName(this.analysis.getName());
  }
  IRepositoryViewObject reposObject=null;
  getAnalysisHandler().clearAnalysis();
  List<ModelElement> analysedElements=new ArrayList<ModelElement>();
  anaColumnCompareViewer.setColumnABForMatchingIndicator(rowMatchingIndicatorA,anaColumnCompareViewer.getColumnListA(),anaColumnCompareViewer.getColumnListB());
  anaColumnCompareViewer.setColumnABForMatchingIndicator(rowMatchingIndicatorB,anaColumnCompareViewer.getColumnListB(),anaColumnCompareViewer.getColumnListA());
  Connection tdDataProvider=null;
  for (int i=0; i < anaColumnCompareViewer.getColumnListA().size(); i++) {
    reposObject=anaColumnCompareViewer.getColumnListA().get(i).getObject();
    analysedElements.add(((MetadataColumnRepositoryObject)reposObject).getTdColumn());
  }
  for (int i=0; i < anaColumnCompareViewer.getColumnListB().size(); i++) {
    reposObject=anaColumnCompareViewer.getColumnListB().get(i).getObject();
    analysedElements.add(((MetadataColumnRepositoryObject)reposObject).getTdColumn());
  }
  if (analysedElements.size() > 0) {
    tdDataProvider=ConnectionHelper.getTdDataProvider((TdColumn)analysedElements.get(0));
    analysis.getContext().setConnection(tdDataProvider);
    analysis.getContext().setConnection(tdDataProvider);
    TypedReturnCode<Dependency> rc=DependenciesHandler.getInstance().setDependencyOn(analysis,tdDataProvider);
    if (!rc.isOk()) {
      log.info(""String_Node_Str"" + analysis.getFileName());
    }
  }
 else {
    tdDataProvider=(Connection)analysis.getContext().getConnection();
    if (tdDataProvider != null) {
      tdDataProvider.getSupplierDependency().get(0).getClient().remove(analysis);
      analysis.getContext().setConnection(null);
      analysis.getClientDependency().clear();
    }
  }
  AnalysisBuilder anaBuilder=new AnalysisBuilder();
  anaBuilder.setAnalysis(this.analysis);
  if (anaColumnCompareViewer.getCheckComputeButton().getSelection()) {
    analysis.getParameters().getDeactivatedIndicators().add(rowMatchingIndicatorB);
  }
 else {
    analysis.getParameters().getDeactivatedIndicators().clear();
  }
  anaBuilder.addElementsToAnalyze(analysedElements.toArray(new ModelElement[analysedElements.size()]),new Indicator[]{rowMatchingIndicatorA,rowMatchingIndicatorB});
  this.updateAnalysisClientDependency();
  ReturnCode saved=new ReturnCode(false);
  IEditorInput editorInput=this.getEditorInput();
  if (editorInput instanceof AnalysisItemEditorInput) {
    AnalysisItemEditorInput analysisInput=(AnalysisItemEditorInput)editorInput;
    TDQAnalysisItem tdqAnalysisItem=analysisInput.getTDQAnalysisItem();
    tdqAnalysisItem.getProperty().setDisplayName(analysis.getName());
    tdqAnalysisItem.getProperty().setLabel(WorkspaceUtils.normalize(analysis.getName()));
    this.nameText.setText(analysis.getName());
    saved=ElementWriterFactory.getInstance().createAnalysisWrite().save(tdqAnalysisItem,true);
  }
  logSaved(saved);
  anaColumnCompareViewer.setDirty(false);
  dataFilterCompA.setDirty(false);
  dataFilterCompB.setDirty(false);
}",0.982216576691013
138069,"/** 
 * ADD mzhao 2009-05-05 bug:6587.
 */
protected void updateBindConnection(AbstractAnalysisMetadataPage masterPage,List<TableViewer> tableViewerPosStack){
  boolean isEmpty1=tableViewerPosStack.get(0) == null || tableViewerPosStack.get(0).getInput() == null || ((List<TdColumn>)tableViewerPosStack.get(0).getInput()).size() == 0;
  boolean isEmpty2=tableViewerPosStack.get(1) == null || tableViewerPosStack.get(1).getInput() == null || ((List<TdColumn>)tableViewerPosStack.get(1).getInput()).size() == 0;
  if (isEmpty1 && isEmpty2) {
    return;
  }
 else {
    TableViewer columnsElementViewer=null;
    if (!isEmpty1) {
      columnsElementViewer=tableViewerPosStack.get(0);
    }
 else {
      columnsElementViewer=tableViewerPosStack.get(1);
    }
    Connection tdProvider=null;
    Object input=columnsElementViewer.getInput();
    List<DBColumnRepNode> columnSet=(List<DBColumnRepNode>)input;
    if (columnSet != null && columnSet.size() != 0) {
      TdColumn column=(TdColumn)((MetadataColumnRepositoryObject)columnSet.get(0).getObject()).getTdColumn();
      if (column != null && column.eIsProxy()) {
        column=(TdColumn)EObjectHelper.resolveObject(column);
      }
      tdProvider=ConnectionHelper.getTdDataProvider(column);
      setConnectionState(masterPage,tdProvider);
    }
  }
}","/** 
 * ADD mzhao 2009-05-05 bug:6587.
 */
protected void updateBindConnection(AbstractAnalysisMetadataPage masterPage,List<TableViewer> tableViewerPosStack){
  boolean isEmpty1=tableViewerPosStack.get(0) == null || tableViewerPosStack.get(0).getInput() == null || ((List)tableViewerPosStack.get(0).getInput()).size() == 0;
  boolean isEmpty2=tableViewerPosStack.get(1) == null || tableViewerPosStack.get(1).getInput() == null || ((List)tableViewerPosStack.get(1).getInput()).size() == 0;
  if (isEmpty1 && isEmpty2) {
    return;
  }
 else {
    TableViewer columnsElementViewer=null;
    if (!isEmpty1) {
      columnsElementViewer=tableViewerPosStack.get(0);
    }
 else {
      columnsElementViewer=tableViewerPosStack.get(1);
    }
    Connection tdProvider=null;
    Object input=columnsElementViewer.getInput();
    List<DBColumnRepNode> columnSet=(List<DBColumnRepNode>)input;
    if (columnSet != null && columnSet.size() != 0) {
      TdColumn column=(TdColumn)((MetadataColumnRepositoryObject)columnSet.get(0).getObject()).getTdColumn();
      if (column != null && column.eIsProxy()) {
        column=(TdColumn)EObjectHelper.resolveObject(column);
      }
      tdProvider=ConnectionHelper.getTdDataProvider(column);
      setConnectionState(masterPage,tdProvider);
    }
  }
}",0.9923017705927636
138070,"public void testGetSearchResultStringStringMapOfStringStringBoolean(){
  Map<String,String> information2value=new HashMap<String,String>();
  information2value.put(""String_Node_Str"",""String_Node_Str"");
  Map<String,String[]> hits=null;
  try {
    final String inputName=""String_Node_Str"";
    hits=hl.getSearchResult(indexfolder,inputName,information2value,false);
    String[] soreDocs=hits.get(inputName);
    assertNotNull(soreDocs);
    if (soreDocs != null) {
      boolean found=false;
      for (      String doc : soreDocs) {
        if (inputName.equals(doc)) {
          found=true;
          break;
        }
        System.out.println(doc);
      }
      assertTrue(inputName + ""String_Node_Str"",found);
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
catch (  ParseException e) {
    e.printStackTrace();
  }
}","@Test public void testGetSearchResultStringStringMapOfStringStringBoolean(){
  Map<String,String> information2value=new HashMap<String,String>();
  information2value.put(""String_Node_Str"",""String_Node_Str"");
  Map<String,String[]> hits=null;
  try {
    final String inputName=""String_Node_Str"";
    hits=hl.getSearchResult(indexfolder,inputName,information2value,false);
    String[] soreDocs=hits.get(inputName);
    assertNotNull(soreDocs);
    if (soreDocs != null) {
      boolean found=false;
      for (      String doc : soreDocs) {
        if (inputName.equals(doc)) {
          found=true;
          break;
        }
        System.out.println(doc);
      }
      assertTrue(inputName + ""String_Node_Str"",found);
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
catch (  ParseException e) {
    e.printStackTrace();
  }
}",0.9964497041420118
138071,"@AfterClass public static void tearDown() throws Exception {
  searcher.close();
}","@AfterClass public static void tearDown() throws Exception {
  if (searcher != null) {
    searcher.close();
  }
}",0.8367346938775511
138072,"public void modifyText(ModifyEvent e){
  if (text.getText() == null || ""String_Node_Str"".equals(text.getText().trim())) {
    int status=IStatus.ERROR;
    IProject rootProject=SQLExplorerPlugin.getDefault().getRootProject();
    final IFolder defaultValidFolder=rootProject.getFolder(""String_Node_Str"").getFolder(""String_Node_Str"");
    if (selectedFolder != null && (""String_Node_Str"".equals(selectedFolder.getName()) || defaultValidFolder.getFullPath().isPrefixOf(selectedFolder.getFullPath()))) {
      status=IStatus.INFO;
    }
    updateStatus(new Status(status,SQLExplorerPlugin.PLUGIN_ID,""String_Node_Str""));
    text.setText(DEFAULT_FILE_NAME);
    fileName=DEFAULT_FILE_NAME;
  }
 else {
    fileName=text.getText();
  }
}","public void modifyText(ModifyEvent e){
  if (text.getText() == null || ""String_Node_Str"".equals(text.getText().trim())) {
    int status=IStatus.ERROR;
    IProject rootProject=ReponsitoryContextBridge.getRootProject();
    final IFolder defaultValidFolder=rootProject.getFolder(""String_Node_Str"").getFolder(""String_Node_Str"");
    if (selectedFolder != null && (""String_Node_Str"".equals(selectedFolder.getName()) || defaultValidFolder.getFullPath().isPrefixOf(selectedFolder.getFullPath()))) {
      status=IStatus.INFO;
    }
    updateStatus(new Status(status,SQLExplorerPlugin.PLUGIN_ID,""String_Node_Str""));
    text.setText(DEFAULT_FILE_NAME);
    fileName=DEFAULT_FILE_NAME;
  }
 else {
    fileName=text.getText();
  }
}",0.9643835616438357
138073,"/** 
 * qzhang FolderSelectionDialog constructor comment.
 * @param parent
 * @param labelProvider
 * @param contentProvider
 */
public FolderSelectionDialog(Shell parent,ILabelProvider labelProvider,ITreeContentProvider contentProvider){
  super(parent,labelProvider,contentProvider);
  IProject rootProject=SQLExplorerPlugin.getDefault().getRootProject();
  final IFolder defaultValidFolder=rootProject.getFolder(""String_Node_Str"").getFolder(""String_Node_Str"");
  setComparator(new ResourceComparator(ResourceComparator.NAME));
  setValidator(new ISelectionStatusValidator(){
    public IStatus validate(    Object[] selection){
      if (selection.length == 1) {
        if (selection[0] instanceof IFolder) {
          selectedFolder=(IFolder)selection[0];
          IPath projectRelativePath=selectedFolder.getProjectRelativePath();
          if (""String_Node_Str"".equals(selectedFolder.getName()) || defaultValidFolder.getFullPath().isPrefixOf(selectedFolder.getFullPath())) {
            return Status.OK_STATUS;
          }
        }
      }
      return new Status(IStatus.ERROR,SQLExplorerPlugin.PLUGIN_ID,""String_Node_Str"");
    }
  }
);
}","/** 
 * qzhang FolderSelectionDialog constructor comment.
 * @param parent
 * @param labelProvider
 * @param contentProvider
 */
public FolderSelectionDialog(Shell parent,ILabelProvider labelProvider,ITreeContentProvider contentProvider){
  super(parent,labelProvider,contentProvider);
  IProject rootProject=ReponsitoryContextBridge.getRootProject();
  final IFolder defaultValidFolder=rootProject.getFolder(""String_Node_Str"").getFolder(""String_Node_Str"");
  setComparator(new ResourceComparator(ResourceComparator.NAME));
  setValidator(new ISelectionStatusValidator(){
    public IStatus validate(    Object[] selection){
      if (selection.length == 1) {
        if (selection[0] instanceof IFolder) {
          selectedFolder=(IFolder)selection[0];
          IPath projectRelativePath=selectedFolder.getProjectRelativePath();
          if (""String_Node_Str"".equals(selectedFolder.getName()) || defaultValidFolder.getFullPath().isPrefixOf(selectedFolder.getFullPath())) {
            return Status.OK_STATUS;
          }
        }
      }
      return new Status(IStatus.ERROR,SQLExplorerPlugin.PLUGIN_ID,""String_Node_Str"");
    }
  }
);
}",0.977332170880558
138074,"protected Control createDialogArea(Composite parent){
  Composite result=(Composite)super.createDialogArea(parent);
  Composite fileNameComp=new Composite(result,SWT.NULL);
  fileNameComp.setLayout(new GridLayout(2,false));
  fileNameComp.setLayoutData(new GridData(GridData.FILL_BOTH));
  Label label=new Label(fileNameComp,SWT.NULL);
  label.setText(""String_Node_Str"");
  final Text text=new Text(fileNameComp,SWT.BORDER);
  text.setText(this.getFileName());
  text.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  text.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (text.getText() == null || ""String_Node_Str"".equals(text.getText().trim())) {
        int status=IStatus.ERROR;
        IProject rootProject=SQLExplorerPlugin.getDefault().getRootProject();
        final IFolder defaultValidFolder=rootProject.getFolder(""String_Node_Str"").getFolder(""String_Node_Str"");
        if (selectedFolder != null && (""String_Node_Str"".equals(selectedFolder.getName()) || defaultValidFolder.getFullPath().isPrefixOf(selectedFolder.getFullPath()))) {
          status=IStatus.INFO;
        }
        updateStatus(new Status(status,SQLExplorerPlugin.PLUGIN_ID,""String_Node_Str""));
        text.setText(DEFAULT_FILE_NAME);
        fileName=DEFAULT_FILE_NAME;
      }
 else {
        fileName=text.getText();
      }
    }
  }
);
  getTreeViewer().addSelectionChangedListener(this);
  getTreeViewer().expandAll();
  applyDialogFont(result);
  return result;
}","protected Control createDialogArea(Composite parent){
  Composite result=(Composite)super.createDialogArea(parent);
  Composite fileNameComp=new Composite(result,SWT.NULL);
  fileNameComp.setLayout(new GridLayout(2,false));
  fileNameComp.setLayoutData(new GridData(GridData.FILL_BOTH));
  Label label=new Label(fileNameComp,SWT.NULL);
  label.setText(""String_Node_Str"");
  final Text text=new Text(fileNameComp,SWT.BORDER);
  text.setText(this.getFileName());
  text.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  text.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (text.getText() == null || ""String_Node_Str"".equals(text.getText().trim())) {
        int status=IStatus.ERROR;
        IProject rootProject=ReponsitoryContextBridge.getRootProject();
        final IFolder defaultValidFolder=rootProject.getFolder(""String_Node_Str"").getFolder(""String_Node_Str"");
        if (selectedFolder != null && (""String_Node_Str"".equals(selectedFolder.getName()) || defaultValidFolder.getFullPath().isPrefixOf(selectedFolder.getFullPath()))) {
          status=IStatus.INFO;
        }
        updateStatus(new Status(status,SQLExplorerPlugin.PLUGIN_ID,""String_Node_Str""));
        text.setText(DEFAULT_FILE_NAME);
        fileName=DEFAULT_FILE_NAME;
      }
 else {
        fileName=text.getText();
      }
    }
  }
);
  getTreeViewer().addSelectionChangedListener(this);
  getTreeViewer().expandAll();
  applyDialogFont(result);
  return result;
}",0.9820119920053296
138075,"@Override protected void performSaveAs(IProgressMonitor progressMonitor){
  Shell shell=getSite().getShell();
  final IEditorInput input=getEditorInput();
  IDocumentProvider provider=getDocumentProvider();
  IEditorInput newInput;
  if (input instanceof IURIEditorInput && !(input instanceof IFileEditorInput)) {
    super.performSaveAs(progressMonitor);
    return;
  }
  IProject rootProject=SQLExplorerPlugin.getDefault().getRootProject();
  final IFolder defaultValidFolder=rootProject.getFolder(""String_Node_Str"").getFolder(""String_Node_Str"");
  ILabelProvider lp=new WorkbenchLabelProvider();
  ITreeContentProvider cp=new WorkbenchContentProvider();
  FolderSelectionDialog dialog=new FolderSelectionDialog(shell,lp,cp);
  dialog.setTitle(""String_Node_Str"");
  dialog.setMessage(""String_Node_Str"");
  dialog.setInput(rootProject);
  dialog.addFilter(new ViewerFilter(){
    @Override public boolean select(    Viewer viewer,    Object parentElement,    Object element){
      if (element instanceof IFolder) {
        IFolder folder=(IFolder)element;
        if (""String_Node_Str"".equals(folder.getName()) || ""String_Node_Str"".equals(folder.getName())) {
          return true;
        }
 else {
          return defaultValidFolder.getFullPath().isPrefixOf(folder.getFullPath()) && !folder.getName().endsWith(SVN_FOLDER_NAME);
        }
      }
      return false;
    }
  }
);
  dialog.setComparator(new ResourceComparator(ResourceComparator.NAME));
  if (dialog.open() == Window.CANCEL) {
    if (progressMonitor != null)     progressMonitor.setCanceled(true);
    return;
  }
  Object elements=dialog.getResult()[0];
  String fileName=getValidFileName(dialog.getFileName());
  IResource elem=(IResource)elements;
  if (elem instanceof IFolder) {
    IPath filePath=((IFolder)elem).getFullPath();
    filePath=filePath.append(fileName);
    if (filePath == null) {
      if (progressMonitor != null)       progressMonitor.setCanceled(true);
      return;
    }
    IWorkspace workspace=ResourcesPlugin.getWorkspace();
    IFile file=workspace.getRoot().getFile(filePath);
    while (fileExist(file)) {
      InputDialog inputDialog=new InputDialog(getSite().getShell(),""String_Node_Str"",""String_Node_Str"",filePath.lastSegment(),null);
      if (inputDialog.open() == InputDialog.CANCEL) {
        return;
      }
 else {
        IPath lseg=filePath.removeLastSegments(1);
        IPath append=lseg.append(inputDialog.getValue());
        file=workspace.getRoot().getFile(append);
      }
    }
    newInput=new FileEditorInput(file);
    if (provider == null) {
      return;
    }
    boolean success=false;
    try {
      provider.aboutToChange(newInput);
      file=createIFile(file,getViewer().getDocument().get());
      newInput=new FileEditorInput(file);
      success=true;
    }
 catch (    CoreException x) {
      final IStatus status=x.getStatus();
      if (status == null || status.getSeverity() != IStatus.CANCEL) {
        String title=""String_Node_Str"";
        String msg=""String_Node_Str"";
        MessageDialog.openError(shell,title,msg);
      }
    }
 finally {
      provider.changed(newInput);
      if (success)       setInput(newInput);
    }
    if (progressMonitor != null)     progressMonitor.setCanceled(!success);
  }
}","@Override protected void performSaveAs(IProgressMonitor progressMonitor){
  Shell shell=getSite().getShell();
  final IEditorInput input=getEditorInput();
  IDocumentProvider provider=getDocumentProvider();
  IEditorInput newInput;
  if (input instanceof IURIEditorInput && !(input instanceof IFileEditorInput)) {
    super.performSaveAs(progressMonitor);
    return;
  }
  IProject rootProject=ReponsitoryContextBridge.getRootProject();
  final IFolder defaultValidFolder=rootProject.getFolder(""String_Node_Str"").getFolder(""String_Node_Str"");
  ILabelProvider lp=new WorkbenchLabelProvider();
  ITreeContentProvider cp=new WorkbenchContentProvider();
  FolderSelectionDialog dialog=new FolderSelectionDialog(shell,lp,cp);
  dialog.setTitle(""String_Node_Str"");
  dialog.setMessage(""String_Node_Str"");
  dialog.setInput(rootProject);
  dialog.addFilter(new ViewerFilter(){
    @Override public boolean select(    Viewer viewer,    Object parentElement,    Object element){
      if (element instanceof IFolder) {
        IFolder folder=(IFolder)element;
        if (""String_Node_Str"".equals(folder.getName()) || ""String_Node_Str"".equals(folder.getName())) {
          return true;
        }
 else {
          return defaultValidFolder.getFullPath().isPrefixOf(folder.getFullPath()) && !folder.getName().endsWith(SVN_FOLDER_NAME);
        }
      }
      return false;
    }
  }
);
  dialog.setComparator(new ResourceComparator(ResourceComparator.NAME));
  if (dialog.open() == Window.CANCEL) {
    if (progressMonitor != null)     progressMonitor.setCanceled(true);
    return;
  }
  Object elements=dialog.getResult()[0];
  String fileName=getValidFileName(dialog.getFileName());
  IResource elem=(IResource)elements;
  if (elem instanceof IFolder) {
    IPath filePath=((IFolder)elem).getFullPath();
    filePath=filePath.append(fileName);
    if (filePath == null) {
      if (progressMonitor != null)       progressMonitor.setCanceled(true);
      return;
    }
    IWorkspace workspace=ResourcesPlugin.getWorkspace();
    IFile file=workspace.getRoot().getFile(filePath);
    while (fileExist(file)) {
      InputDialog inputDialog=new InputDialog(getSite().getShell(),""String_Node_Str"",""String_Node_Str"",filePath.lastSegment(),null);
      if (inputDialog.open() == InputDialog.CANCEL) {
        return;
      }
 else {
        IPath lseg=filePath.removeLastSegments(1);
        IPath append=lseg.append(inputDialog.getValue());
        file=workspace.getRoot().getFile(append);
      }
    }
    newInput=new FileEditorInput(file);
    if (provider == null) {
      return;
    }
    boolean success=false;
    try {
      provider.aboutToChange(newInput);
      file=createIFile(file,getViewer().getDocument().get());
      newInput=new FileEditorInput(file);
      success=true;
    }
 catch (    CoreException x) {
      final IStatus status=x.getStatus();
      if (status == null || status.getSeverity() != IStatus.CANCEL) {
        String title=""String_Node_Str"";
        String msg=""String_Node_Str"";
        MessageDialog.openError(shell,title,msg);
      }
    }
 finally {
      provider.changed(newInput);
      if (success)       setInput(newInput);
    }
    if (progressMonitor != null)     progressMonitor.setCanceled(!success);
  }
}",0.9920196439533456
138076,"/** 
 * Test method for   {@link org.talend.dq.sql.converters.CwmZExpression#getColumn2()}.
 */
@Test public void testGetColumn2(){
  fail(""String_Node_Str"");
}","/** 
 * Test method for   {@link org.talend.dq.sql.converters.CwmZExpression#getColumn2()}.
 */
@Test public void testGetColumn2(){
  CwmZExpression<Double> exp=new CwmZExpression<Double>(SqlPredicate.EQUAL);
  String name=""String_Node_Str"";
  TdColumn column=getColumn(name);
  TdTable table=getTable(tableName);
  column.setOwner(table);
  Double value=new Double(5.0);
  exp.setOperands(column,value);
  Assert.assertNull(exp.getColumn2());
}",0.512396694214876
138077,"/** 
 * Test method for   {@link org.talend.dq.sql.converters.CwmZExpression#generateExpressions()}.
 */
@Test public void testGenerateExpressions(){
  fail(""String_Node_Str"");
}","/** 
 * Test method for   {@link org.talend.dq.sql.converters.CwmZExpression#generateExpressions()}.
 */
@Test public void testGenerateExpressions(){
  CwmZExpression<String> expre=new CwmZExpression<String>(SqlPredicate.EQUAL);
  TdColumn column=getColumn(""String_Node_Str"");
  TdTable table=getTable(tableName);
  column.setOwner(table);
  expre.setOperands(column,""String_Node_Str"");
  Assert.assertNotNull(expre.generateExpressions());
  String nameStr=tableName + ""String_Node_Str"" + column.getName();
  System.out.println(expre.generateExpressions().getExpression().getBody());
  Assert.assertEquals(simpleExpectedExpression(nameStr,SqlPredicate.EQUAL,""String_Node_Str""),expre.generateExpressions().getExpression().getBody());
}",0.3815789473684211
138078,"/** 
 * DOC scorreia Comment method ""generateExpression"".
 * @param operator
 * @param value
 * @param name
 */
private <T>void generateExpression(SqlPredicate operator,String name,T value){
  CwmZExpression<T> exp=new CwmZExpression<T>(operator);
  TdColumn column=getColumn(name);
  exp.setOperands(column,value);
  ZExpression zExpression=exp.generateZExpression();
  Assert.assertNotNull(zExpression);
  Assert.assertEquals(simpleExpectedExpression(name,operator,value),zExpression.toString());
  System.out.println(zExpression.toString());
}","/** 
 * DOC scorreia Comment method ""generateExpression"".
 * @param operator
 * @param value
 * @param name
 */
private <T>void generateExpression(SqlPredicate operator,String name,T value){
  CwmZExpression<T> exp=new CwmZExpression<T>(operator);
  TdColumn column=getColumn(name);
  TdTable table=getTable(tableName);
  column.setOwner(table);
  exp.setOperands(column,value);
  ZExpression zExpression=exp.generateZExpression();
  Assert.assertNotNull(zExpression);
  String nameStr=tableName + ""String_Node_Str"" + column.getName();
  Assert.assertEquals(simpleExpectedExpression(nameStr,operator,value),zExpression.toString());
  System.out.println(zExpression.toString());
}",0.8914285714285715
138079,"/** 
 * Test method for   {@link org.talend.dq.sql.converters.CwmZExpression#getColumn1()}.
 */
@Test public void testGetColumn1(){
  fail(""String_Node_Str"");
}","/** 
 * Test method for   {@link org.talend.dq.sql.converters.CwmZExpression#getColumn1()}.
 */
@Test public void testGetColumn1(){
  CwmZExpression<Double> exp=new CwmZExpression<Double>(SqlPredicate.EQUAL);
  String name=""String_Node_Str"";
  TdColumn column=getColumn(name);
  TdTable table=getTable(tableName);
  column.setOwner(table);
  Double value=new Double(5.0);
  exp.setOperands(column,value);
  Assert.assertNotNull(exp.getColumn1());
}",0.5098684210526315
138080,"private <T>String simpleExpectedExpression(String left,SqlPredicate operator,T right){
  String rightStr=right.toString();
  if (operator.equals(SqlPredicate.IN) || operator.equals(SqlPredicate.NOT_IN)) {
    rightStr=parenthesis(rightStr);
  }
  return parenthesis(left + ""String_Node_Str"" + operator.getLiteral()+ ""String_Node_Str""+ rightStr);
}","private <T>String simpleExpectedExpression(String left,SqlPredicate operator,T right){
  String rightStr=right.toString();
  if (operator.equals(SqlPredicate.UNION) || operator.equals(SqlPredicate.ALL)) {
    return left + ""String_Node_Str"" + operator.getLiteral()+ ""String_Node_Str""+ rightStr;
  }
  if (operator.equals(SqlPredicate.IN) || operator.equals(SqlPredicate.NOT_IN)) {
    rightStr=parenthesis(rightStr);
  }
  return parenthesis(left + ""String_Node_Str"" + operator.getLiteral()+ ""String_Node_Str""+ rightStr);
}",0.7977011494252874
138081,"/** 
 * Test method for  {@link org.talend.dq.sql.converters.CwmZExpression#setOperands(orgomg.cwm.resource.relational.Column,orgomg.cwm.resource.relational.Column)}.
 */
@Test public void testSetOperandsColumnColumn(){
  fail(""String_Node_Str"");
}","/** 
 * Test method for  {@link org.talend.dq.sql.converters.CwmZExpression#setOperands(orgomg.cwm.resource.relational.Column,orgomg.cwm.resource.relational.Column)}.
 */
@Test public void testSetOperandsColumnColumn(){
  CwmZExpression<Integer> exp=new CwmZExpression<Integer>(SqlPredicate.EQUAL);
  String column1_Name=""String_Node_Str"";
  TdColumn column1=getColumn(column1_Name);
  String column2_Name=""String_Node_Str"";
  TdColumn column2=getColumn(column2_Name);
  exp.setOperands(column1,column2);
  Assert.assertNull(exp.getInstance());
}",0.6120906801007556
138082,"/** 
 * Test method for   {@link org.talend.dq.sql.converters.CwmZExpression#getInstance()}.
 */
@Test public void testGetInstance(){
  CwmZExpression<Double> exp=new CwmZExpression<Double>(SqlPredicate.EQUAL);
  String name=""String_Node_Str"";
  TdColumn column=getColumn(name);
  Double value=new Double(5.0);
  exp.setOperands(column,value);
  Assert.assertEquals(value.toString(),exp.getInstance().toString());
}","/** 
 * Test method for   {@link org.talend.dq.sql.converters.CwmZExpression#getInstance()}.
 */
@Test public void testGetInstance(){
  CwmZExpression<Double> exp=new CwmZExpression<Double>(SqlPredicate.EQUAL);
  String name=""String_Node_Str"";
  TdColumn column=getColumn(name);
  TdTable table=getTable(tableName);
  column.setOwner(table);
  Double value=new Double(5.0);
  exp.setOperands(column,value);
  Assert.assertEquals(value.toString(),exp.getInstance().toString());
}",0.9294512877939528
138083,"/** 
 * Test method for   {@link org.talend.dq.sql.converters.CwmZExpression#getOperator()}.
 */
@Test public void testGetOperator(){
  Assert.assertTrue(operators.length == 17);
  for (  SqlPredicate equalOp : operators) {
    CwmZExpression<?> exp=new CwmZExpression<Integer>(equalOp);
    String operator=exp.getOperator();
    Assert.assertEquals(equalOp.getLiteral(),operator);
  }
}","/** 
 * Test method for   {@link org.talend.dq.sql.converters.CwmZExpression#getOperator()}.
 */
@Test public void testGetOperator(){
  Assert.assertTrue(operators.length == 19);
  for (  SqlPredicate equalOp : operators) {
    CwmZExpression<?> exp=new CwmZExpression<Integer>(equalOp);
    String operator=exp.getOperator();
    Assert.assertEquals(equalOp.getLiteral(),operator);
  }
}",0.9974226804123713
138084,"/** 
 * DOC bZhou Comment method ""addListeners"".
 */
private void addListeners(){
  SelectionListener modeSwitchListener=new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      setDirState(isDirState());
      setArchState(!isDirState());
    }
  }
;
  dirBTN.addSelectionListener(modeSwitchListener);
  archBTN.addSelectionListener(modeSwitchListener);
  ModifyListener populateListener=new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (isDirState()) {
        basePath=dirTxt.getText();
      }
 else {
        basePath=archTxt.getText();
      }
      textModified(basePath);
    }
  }
;
  dirTxt.addModifyListener(populateListener);
  archTxt.addModifyListener(populateListener);
  browseDirBTN.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      String result=openDirectoryDialog();
      if (result != null) {
        dirTxt.setText(result);
      }
    }
    private String openDirectoryDialog(){
      DirectoryDialog dialog=new DirectoryDialog(Display.getDefault().getActiveShell());
      if (dirTxt.getText() != null) {
        dialog.setFilterPath(dirTxt.getText());
      }
      return dialog.open();
    }
  }
);
  browseArchBTN.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      String result=openFileDialog();
      if (result != null) {
        archTxt.setText(result);
      }
    }
    private String openFileDialog(){
      FileDialog dialog=new FileDialog(Display.getDefault().getActiveShell());
      dialog.setFilterExtensions(FILE_EXPORT_MASK);
      if (archTxt.getText() != null) {
        dialog.setFileName(archTxt.getText());
      }
      return dialog.open();
    }
  }
);
  overwriteBTN.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      textModified(basePath);
    }
  }
);
  repositoryTree.getTree().addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      TreeItem item=(TreeItem)e.item;
      ItemRecord record=(ItemRecord)item.getData();
      if (record.getFile().isFile()) {
        for (        File file : record.getDependencyMap().keySet()) {
          ItemRecord findRecord=ItemRecord.findRecord(file);
          if (findRecord != null) {
            repositoryTree.setChecked(findRecord,item.getChecked());
          }
        }
      }
      populateElement();
      repositoryTree.refresh();
      checkforErrors();
    }
  }
);
}","/** 
 * DOC bZhou Comment method ""addListeners"".
 */
private void addListeners(){
  SelectionListener modeSwitchListener=new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      setDirState(isDirState());
      setArchState(!isDirState());
    }
  }
;
  dirBTN.addSelectionListener(modeSwitchListener);
  archBTN.addSelectionListener(modeSwitchListener);
  ModifyListener populateListener=new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (isDirState()) {
        basePath=dirTxt.getText();
      }
 else {
        basePath=archTxt.getText();
      }
      textModified(basePath);
    }
  }
;
  dirTxt.addModifyListener(populateListener);
  archTxt.addModifyListener(populateListener);
  browseDirBTN.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      String result=openDirectoryDialog();
      if (result != null) {
        dirTxt.setText(result);
      }
    }
    private String openDirectoryDialog(){
      DirectoryDialog dialog=new DirectoryDialog(Display.getDefault().getActiveShell());
      if (dirTxt.getText() != null) {
        dialog.setFilterPath(dirTxt.getText());
      }
      return dialog.open();
    }
  }
);
  browseArchBTN.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      String result=openFileDialog();
      if (result != null) {
        archTxt.setText(result);
      }
    }
    private String openFileDialog(){
      FileDialog dialog=new FileDialog(Display.getDefault().getActiveShell());
      dialog.setFilterExtensions(FILE_EXPORT_MASK);
      if (archTxt.getText() != null) {
        dialog.setFileName(archTxt.getText());
      }
      return dialog.open();
    }
  }
);
  overwriteBTN.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      populateElement();
      checkforErrors();
    }
  }
);
  repositoryTree.getTree().addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      TreeItem item=(TreeItem)e.item;
      ItemRecord record=(ItemRecord)item.getData();
      if (record.getFile().isFile()) {
        for (        File file : record.getDependencyMap().keySet()) {
          ItemRecord findRecord=ItemRecord.findRecord(file);
          if (findRecord != null) {
            repositoryTree.setChecked(findRecord,item.getChecked());
          }
        }
      }
      populateElement();
      repositoryTree.refresh();
      checkforErrors();
    }
  }
);
}",0.9886647454370796
138085,"private boolean allowDND(IRepositoryNode sourceNode,IRepositoryNode targetNode){
  IPath sourcePath=WorkbenchUtils.getPath((RepositoryNode)sourceNode);
  IPath targetPath=WorkbenchUtils.getPath((RepositoryNode)targetNode);
  int sourceCount=sourcePath.segmentCount();
  int targetCount=targetPath.segmentCount();
  if (sourceCount == 1 || targetCount == 1) {
    return false;
  }
  if (isSubObjectType(sourceNode,targetNode)) {
    return false;
  }
  return true;
}","private boolean allowDND(IRepositoryNode sourceNode,IRepositoryNode targetNode){
  IPath sourcePath=WorkbenchUtils.getPath((RepositoryNode)sourceNode);
  IPath targetPath=WorkbenchUtils.getPath((RepositoryNode)targetNode);
  int sourceCount=sourcePath.segmentCount();
  int targetCount=targetPath.segmentCount();
  if (sourceCount == 1 || targetCount == 1) {
    return false;
  }
  if (isSubObjectType(sourceNode,targetNode)) {
    return false;
  }
  IRepositoryViewObject object=sourceNode.getObject();
  if (object != null) {
    if (object.getProperty().getItem().getState().isLocked()) {
      return false;
    }
  }
  return true;
}",0.8202348690153568
138086,"public Boolean isModelTask(){
  return ""String_Node_Str"".equals(getId()) || ""String_Node_Str"".equals(getId()) || ""String_Node_Str"".equals(getId())|| ""String_Node_Str"".equals(getId())|| ""String_Node_Str"".equals(getId())|| ""String_Node_Str"".equals(getId())|| ""String_Node_Str"".equals(getId())|| ""String_Node_Str"".equals(getId());
}","public Boolean isModelTask(){
  return ""String_Node_Str"".equals(getId()) || ""String_Node_Str"".equals(getId()) || ""String_Node_Str"".equals(getId())|| ""String_Node_Str"".equals(getId())|| ""String_Node_Str"".equals(getId())|| ""String_Node_Str"".equals(getId())|| ""String_Node_Str"".equals(getId())|| ""String_Node_Str"".equals(getId())|| ""String_Node_Str"".equals(getId());
}",0.9481268011527376
138087,"/** 
 * Test method for   {@link org.talend.dq.sql.converters.CwmZExpression#getColumn2()}.
 */
@Test public void testGetColumn2(){
  fail(""String_Node_Str"");
}","/** 
 * Test method for   {@link org.talend.dq.sql.converters.CwmZExpression#getColumn2()}.
 */
@Test public void testGetColumn2(){
  CwmZExpression<Double> exp=new CwmZExpression<Double>(SqlPredicate.EQUAL);
  String name=""String_Node_Str"";
  TdColumn column=getColumn(name);
  TdTable table=getTable(tableName);
  column.setOwner(table);
  Double value=new Double(5.0);
  exp.setOperands(column,value);
  Assert.assertNull(exp.getColumn2());
}",0.512396694214876
138088,"/** 
 * Test method for   {@link org.talend.dq.sql.converters.CwmZExpression#generateExpressions()}.
 */
@Test public void testGenerateExpressions(){
  fail(""String_Node_Str"");
}","/** 
 * Test method for   {@link org.talend.dq.sql.converters.CwmZExpression#generateExpressions()}.
 */
@Test public void testGenerateExpressions(){
  CwmZExpression<String> expre=new CwmZExpression<String>(SqlPredicate.EQUAL);
  TdColumn column=getColumn(""String_Node_Str"");
  TdTable table=getTable(tableName);
  column.setOwner(table);
  expre.setOperands(column,""String_Node_Str"");
  Assert.assertNotNull(expre.generateExpressions());
  String nameStr=tableName + ""String_Node_Str"" + column.getName();
  System.out.println(expre.generateExpressions().getExpression().getBody());
  Assert.assertEquals(simpleExpectedExpression(nameStr,SqlPredicate.EQUAL,""String_Node_Str""),expre.generateExpressions().getExpression().getBody());
}",0.3815789473684211
138089,"/** 
 * DOC scorreia Comment method ""generateExpression"".
 * @param operator
 * @param value
 * @param name
 */
private <T>void generateExpression(SqlPredicate operator,String name,T value){
  CwmZExpression<T> exp=new CwmZExpression<T>(operator);
  TdColumn column=getColumn(name);
  exp.setOperands(column,value);
  ZExpression zExpression=exp.generateZExpression();
  Assert.assertNotNull(zExpression);
  Assert.assertEquals(simpleExpectedExpression(name,operator,value),zExpression.toString());
  System.out.println(zExpression.toString());
}","/** 
 * DOC scorreia Comment method ""generateExpression"".
 * @param operator
 * @param value
 * @param name
 */
private <T>void generateExpression(SqlPredicate operator,String name,T value){
  CwmZExpression<T> exp=new CwmZExpression<T>(operator);
  TdColumn column=getColumn(name);
  TdTable table=getTable(tableName);
  column.setOwner(table);
  exp.setOperands(column,value);
  ZExpression zExpression=exp.generateZExpression();
  Assert.assertNotNull(zExpression);
  String nameStr=tableName + ""String_Node_Str"" + column.getName();
  Assert.assertEquals(simpleExpectedExpression(nameStr,operator,value),zExpression.toString());
  System.out.println(zExpression.toString());
}",0.8914285714285715
138090,"/** 
 * Test method for   {@link org.talend.dq.sql.converters.CwmZExpression#getColumn1()}.
 */
@Test public void testGetColumn1(){
  fail(""String_Node_Str"");
}","/** 
 * Test method for   {@link org.talend.dq.sql.converters.CwmZExpression#getColumn1()}.
 */
@Test public void testGetColumn1(){
  CwmZExpression<Double> exp=new CwmZExpression<Double>(SqlPredicate.EQUAL);
  String name=""String_Node_Str"";
  TdColumn column=getColumn(name);
  TdTable table=getTable(tableName);
  column.setOwner(table);
  Double value=new Double(5.0);
  exp.setOperands(column,value);
  Assert.assertNotNull(exp.getColumn1());
}",0.5098684210526315
138091,"private <T>String simpleExpectedExpression(String left,SqlPredicate operator,T right){
  String rightStr=right.toString();
  if (operator.equals(SqlPredicate.IN) || operator.equals(SqlPredicate.NOT_IN)) {
    rightStr=parenthesis(rightStr);
  }
  return parenthesis(left + ""String_Node_Str"" + operator.getLiteral()+ ""String_Node_Str""+ rightStr);
}","private <T>String simpleExpectedExpression(String left,SqlPredicate operator,T right){
  String rightStr=right.toString();
  if (operator.equals(SqlPredicate.UNION) || operator.equals(SqlPredicate.ALL)) {
    return left + ""String_Node_Str"" + operator.getLiteral()+ ""String_Node_Str""+ rightStr;
  }
  if (operator.equals(SqlPredicate.IN) || operator.equals(SqlPredicate.NOT_IN)) {
    rightStr=parenthesis(rightStr);
  }
  return parenthesis(left + ""String_Node_Str"" + operator.getLiteral()+ ""String_Node_Str""+ rightStr);
}",0.7977011494252874
138092,"/** 
 * Test method for  {@link org.talend.dq.sql.converters.CwmZExpression#setOperands(orgomg.cwm.resource.relational.Column,orgomg.cwm.resource.relational.Column)}.
 */
@Test public void testSetOperandsColumnColumn(){
  fail(""String_Node_Str"");
}","/** 
 * Test method for  {@link org.talend.dq.sql.converters.CwmZExpression#setOperands(orgomg.cwm.resource.relational.Column,orgomg.cwm.resource.relational.Column)}.
 */
@Test public void testSetOperandsColumnColumn(){
  CwmZExpression<Integer> exp=new CwmZExpression<Integer>(SqlPredicate.EQUAL);
  String column1_Name=""String_Node_Str"";
  TdColumn column1=getColumn(column1_Name);
  String column2_Name=""String_Node_Str"";
  TdColumn column2=getColumn(column2_Name);
  exp.setOperands(column1,column2);
  Assert.assertNull(exp.getInstance());
}",0.6120906801007556
138093,"/** 
 * Test method for   {@link org.talend.dq.sql.converters.CwmZExpression#getInstance()}.
 */
@Test public void testGetInstance(){
  CwmZExpression<Double> exp=new CwmZExpression<Double>(SqlPredicate.EQUAL);
  String name=""String_Node_Str"";
  TdColumn column=getColumn(name);
  Double value=new Double(5.0);
  exp.setOperands(column,value);
  Assert.assertEquals(value.toString(),exp.getInstance().toString());
}","/** 
 * Test method for   {@link org.talend.dq.sql.converters.CwmZExpression#getInstance()}.
 */
@Test public void testGetInstance(){
  CwmZExpression<Double> exp=new CwmZExpression<Double>(SqlPredicate.EQUAL);
  String name=""String_Node_Str"";
  TdColumn column=getColumn(name);
  TdTable table=getTable(tableName);
  column.setOwner(table);
  Double value=new Double(5.0);
  exp.setOperands(column,value);
  Assert.assertEquals(value.toString(),exp.getInstance().toString());
}",0.9294512877939528
138094,"/** 
 * Test method for   {@link org.talend.dq.sql.converters.CwmZExpression#getOperator()}.
 */
@Test public void testGetOperator(){
  Assert.assertTrue(operators.length == 17);
  for (  SqlPredicate equalOp : operators) {
    CwmZExpression<?> exp=new CwmZExpression<Integer>(equalOp);
    String operator=exp.getOperator();
    Assert.assertEquals(equalOp.getLiteral(),operator);
  }
}","/** 
 * Test method for   {@link org.talend.dq.sql.converters.CwmZExpression#getOperator()}.
 */
@Test public void testGetOperator(){
  Assert.assertTrue(operators.length == 19);
  for (  SqlPredicate equalOp : operators) {
    CwmZExpression<?> exp=new CwmZExpression<Integer>(equalOp);
    String operator=exp.getOperator();
    Assert.assertEquals(equalOp.getLiteral(),operator);
  }
}",0.9974226804123713
138095,"/** 
 * DOC bZhou Comment method ""addListeners"".
 */
private void addListeners(){
  SelectionListener modeSwitchListener=new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      setDirState(isDirState());
      setArchState(!isDirState());
    }
  }
;
  dirBTN.addSelectionListener(modeSwitchListener);
  archBTN.addSelectionListener(modeSwitchListener);
  ModifyListener populateListener=new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (isDirState()) {
        basePath=dirTxt.getText();
      }
 else {
        basePath=archTxt.getText();
      }
      textModified(basePath);
    }
  }
;
  dirTxt.addModifyListener(populateListener);
  archTxt.addModifyListener(populateListener);
  browseDirBTN.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      String result=openDirectoryDialog();
      if (result != null) {
        dirTxt.setText(result);
      }
    }
    private String openDirectoryDialog(){
      DirectoryDialog dialog=new DirectoryDialog(Display.getDefault().getActiveShell());
      if (dirTxt.getText() != null) {
        dialog.setFilterPath(dirTxt.getText());
      }
      return dialog.open();
    }
  }
);
  browseArchBTN.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      String result=openFileDialog();
      if (result != null) {
        archTxt.setText(result);
      }
    }
    private String openFileDialog(){
      FileDialog dialog=new FileDialog(Display.getDefault().getActiveShell());
      dialog.setFilterExtensions(FILE_EXPORT_MASK);
      if (archTxt.getText() != null) {
        dialog.setFileName(archTxt.getText());
      }
      return dialog.open();
    }
  }
);
  overwriteBTN.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      textModified(basePath);
    }
  }
);
  repositoryTree.getTree().addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      TreeItem item=(TreeItem)e.item;
      ItemRecord record=(ItemRecord)item.getData();
      if (record.getFile().isFile()) {
        for (        File file : record.getDependencyMap().keySet()) {
          ItemRecord findRecord=ItemRecord.findRecord(file);
          if (findRecord != null) {
            repositoryTree.setChecked(findRecord,item.getChecked());
          }
        }
      }
      populateElement();
      repositoryTree.refresh();
      checkforErrors();
    }
  }
);
}","/** 
 * DOC bZhou Comment method ""addListeners"".
 */
private void addListeners(){
  SelectionListener modeSwitchListener=new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      setDirState(isDirState());
      setArchState(!isDirState());
    }
  }
;
  dirBTN.addSelectionListener(modeSwitchListener);
  archBTN.addSelectionListener(modeSwitchListener);
  ModifyListener populateListener=new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (isDirState()) {
        basePath=dirTxt.getText();
      }
 else {
        basePath=archTxt.getText();
      }
      textModified(basePath);
    }
  }
;
  dirTxt.addModifyListener(populateListener);
  archTxt.addModifyListener(populateListener);
  browseDirBTN.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      String result=openDirectoryDialog();
      if (result != null) {
        dirTxt.setText(result);
      }
    }
    private String openDirectoryDialog(){
      DirectoryDialog dialog=new DirectoryDialog(Display.getDefault().getActiveShell());
      if (dirTxt.getText() != null) {
        dialog.setFilterPath(dirTxt.getText());
      }
      return dialog.open();
    }
  }
);
  browseArchBTN.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      String result=openFileDialog();
      if (result != null) {
        archTxt.setText(result);
      }
    }
    private String openFileDialog(){
      FileDialog dialog=new FileDialog(Display.getDefault().getActiveShell());
      dialog.setFilterExtensions(FILE_EXPORT_MASK);
      if (archTxt.getText() != null) {
        dialog.setFileName(archTxt.getText());
      }
      return dialog.open();
    }
  }
);
  overwriteBTN.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      populateElement();
      checkforErrors();
    }
  }
);
  repositoryTree.getTree().addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      TreeItem item=(TreeItem)e.item;
      ItemRecord record=(ItemRecord)item.getData();
      if (record.getFile().isFile()) {
        for (        File file : record.getDependencyMap().keySet()) {
          ItemRecord findRecord=ItemRecord.findRecord(file);
          if (findRecord != null) {
            repositoryTree.setChecked(findRecord,item.getChecked());
          }
        }
      }
      populateElement();
      repositoryTree.refresh();
      checkforErrors();
    }
  }
);
}",0.9886647454370796
138096,"private boolean allowDND(IRepositoryNode sourceNode,IRepositoryNode targetNode){
  IPath sourcePath=WorkbenchUtils.getPath((RepositoryNode)sourceNode);
  IPath targetPath=WorkbenchUtils.getPath((RepositoryNode)targetNode);
  int sourceCount=sourcePath.segmentCount();
  int targetCount=targetPath.segmentCount();
  if (sourceCount == 1 || targetCount == 1) {
    return false;
  }
  if (isSubObjectType(sourceNode,targetNode)) {
    return false;
  }
  return true;
}","private boolean allowDND(IRepositoryNode sourceNode,IRepositoryNode targetNode){
  IPath sourcePath=WorkbenchUtils.getPath((RepositoryNode)sourceNode);
  IPath targetPath=WorkbenchUtils.getPath((RepositoryNode)targetNode);
  int sourceCount=sourcePath.segmentCount();
  int targetCount=targetPath.segmentCount();
  if (sourceCount == 1 || targetCount == 1) {
    return false;
  }
  if (isSubObjectType(sourceNode,targetNode)) {
    return false;
  }
  IRepositoryViewObject object=sourceNode.getObject();
  if (object != null) {
    if (object.getProperty().getItem().getState().isLocked()) {
      return false;
    }
  }
  return true;
}",0.8202348690153568
138097,"@Override public List<IRepositoryNode> getChildren(){
  if (children.isEmpty()) {
    return filterResultsIfAny(children);
  }
  DBColumnFolderRepNode columnFolderNode=new DBColumnFolderRepNode(null,this,ENodeType.TDQ_REPOSITORY_ELEMENT);
  children.add(columnFolderNode);
  return filterResultsIfAny(children);
}","@Override public List<IRepositoryNode> getChildren(){
  if (!children.isEmpty()) {
    return filterResultsIfAny(children);
  }
  DBColumnFolderRepNode columnFolderNode=new DBColumnFolderRepNode(null,this,ENodeType.TDQ_REPOSITORY_ELEMENT);
  children.add(columnFolderNode);
  return filterResultsIfAny(children);
}",0.9984051036682616
138098,"@Override public boolean isSimilar(EObject obj1,EObject obj2) throws FactoryException {
  DatabaseConnection connection1=SwitchHelpers.DATABASECONNECTION_SWITCH.doSwitch(obj1);
  DatabaseConnection connection2=SwitchHelpers.DATABASECONNECTION_SWITCH.doSwitch(obj2);
  if (connection1 != null && connection2 != null) {
    changeUrl=ConnectionHelper.isUrlChanged(connection1);
  }
  if (changeUrl) {
    return false;
  }
 else {
    boolean result=false;
    if (obj1 instanceof Catalog && obj2 instanceof Catalog) {
      Catalog catalog1=(Catalog)obj1;
      Catalog catalog2=(Catalog)obj2;
      result=StringUtils.equalsIgnoreCase(catalog1.getName(),catalog2.getName());
    }
 else     if (obj1 instanceof Schema && obj2 instanceof Schema) {
      Schema schema1=(Schema)obj1;
      Schema schema2=(Schema)obj2;
      result=StringUtils.equalsIgnoreCase(schema1.getName(),schema2.getName());
    }
 else     if (obj1 instanceof TdTable && obj2 instanceof TdTable) {
      TdTable tdTable1=(TdTable)obj1;
      TdTable tdTable2=(TdTable)obj2;
      result=StringUtils.equalsIgnoreCase(tdTable1.getName(),tdTable2.getName());
    }
 else     if (obj1 instanceof TdView && obj2 instanceof TdView) {
      TdView tdView1=(TdView)obj1;
      TdView tdView2=(TdView)obj2;
      result=StringUtils.equalsIgnoreCase(tdView1.getName(),tdView2.getName());
    }
 else     if (obj1 instanceof TdColumn && obj2 instanceof TdColumn) {
      TdColumn tdColumn1=(TdColumn)obj1;
      TdColumn tdColumn2=(TdColumn)obj2;
      result=StringUtils.equalsIgnoreCase(tdColumn1.getName(),tdColumn2.getName()) && isSimilar(tdColumn1.getSqlDataType(),tdColumn2.getSqlDataType());
    }
 else     if (obj1 instanceof TaggedValue && obj2 instanceof TaggedValue) {
      TaggedValue taggedValue1=(TaggedValue)obj1;
      TaggedValue taggedValue2=(TaggedValue)obj2;
      result=StringUtils.equalsIgnoreCase(taggedValue1.getTag(),taggedValue2.getTag()) && StringUtils.equalsIgnoreCase(taggedValue1.getValue(),taggedValue2.getValue());
    }
 else     if (obj1 instanceof TdExpression && obj2 instanceof TdExpression) {
      TdExpression tdExpression1=(TdExpression)obj1;
      TdExpression tdExpression2=(TdExpression)obj2;
      result=StringUtils.equalsIgnoreCase(tdExpression1.getLanguage(),tdExpression2.getLanguage()) && StringUtils.equalsIgnoreCase(tdExpression1.getBody(),tdExpression2.getBody());
    }
 else     if (obj1 instanceof TdSqlDataType && obj2 instanceof TdSqlDataType) {
      TdSqlDataType tdExpression1=(TdSqlDataType)obj1;
      TdSqlDataType tdExpression2=(TdSqlDataType)obj2;
      result=StringUtils.equalsIgnoreCase(tdExpression1.getName(),tdExpression2.getName());
    }
 else {
      result=super.isSimilar(obj1,obj2);
    }
    return result;
  }
}","@Override public boolean isSimilar(EObject obj1,EObject obj2) throws FactoryException {
  DatabaseConnection connection1=SwitchHelpers.DATABASECONNECTION_SWITCH.doSwitch(obj1);
  DatabaseConnection connection2=SwitchHelpers.DATABASECONNECTION_SWITCH.doSwitch(obj2);
  if (connection1 != null && connection2 != null) {
    changeUrl=ConnectionHelper.isUrlChanged(connection1);
  }
  boolean result=true;
  if (obj1 instanceof Catalog && obj2 instanceof Catalog) {
    Catalog catalog1=(Catalog)obj1;
    Catalog catalog2=(Catalog)obj2;
    result=StringUtils.equalsIgnoreCase(catalog1.getName(),catalog2.getName());
  }
 else   if (obj1 instanceof Schema && obj2 instanceof Schema) {
    Schema schema1=(Schema)obj1;
    Schema schema2=(Schema)obj2;
    result=StringUtils.equalsIgnoreCase(schema1.getName(),schema2.getName());
  }
 else   if (obj1 instanceof TdTable && obj2 instanceof TdTable) {
    TdTable tdTable1=(TdTable)obj1;
    TdTable tdTable2=(TdTable)obj2;
    result=StringUtils.equalsIgnoreCase(tdTable1.getName(),tdTable2.getName());
  }
 else   if (obj1 instanceof TdView && obj2 instanceof TdView) {
    TdView tdView1=(TdView)obj1;
    TdView tdView2=(TdView)obj2;
    result=StringUtils.equalsIgnoreCase(tdView1.getName(),tdView2.getName());
  }
 else   if (obj1 instanceof TdColumn && obj2 instanceof TdColumn) {
    TdColumn tdColumn1=(TdColumn)obj1;
    TdColumn tdColumn2=(TdColumn)obj2;
    result=StringUtils.equalsIgnoreCase(tdColumn1.getName(),tdColumn2.getName()) && isSimilar(tdColumn1.getSqlDataType(),tdColumn2.getSqlDataType());
  }
 else   if (obj1 instanceof TaggedValue && obj2 instanceof TaggedValue) {
    TaggedValue taggedValue1=(TaggedValue)obj1;
    TaggedValue taggedValue2=(TaggedValue)obj2;
    result=StringUtils.equalsIgnoreCase(taggedValue1.getTag(),taggedValue2.getTag()) && StringUtils.equalsIgnoreCase(taggedValue1.getValue(),taggedValue2.getValue());
  }
 else   if (obj1 instanceof TdExpression && obj2 instanceof TdExpression) {
    TdExpression tdExpression1=(TdExpression)obj1;
    TdExpression tdExpression2=(TdExpression)obj2;
    result=StringUtils.equalsIgnoreCase(tdExpression1.getLanguage(),tdExpression2.getLanguage()) && StringUtils.equalsIgnoreCase(tdExpression1.getBody(),tdExpression2.getBody());
  }
 else   if (obj1 instanceof TdSqlDataType && obj2 instanceof TdSqlDataType) {
    TdSqlDataType tdExpression1=(TdSqlDataType)obj1;
    TdSqlDataType tdExpression2=(TdSqlDataType)obj2;
    result=StringUtils.equalsIgnoreCase(tdExpression1.getName(),tdExpression2.getName());
  }
  if (obj1 instanceof DatabaseConnection) {
    return true;
  }
 else   if (changeUrl && !result) {
    return false;
  }
  return true;
}",0.8580882352941176
138099,"@Override public boolean isSimilar(EObject obj1,EObject obj2) throws FactoryException {
  DatabaseConnection connection1=SwitchHelpers.DATABASECONNECTION_SWITCH.doSwitch(obj1);
  DatabaseConnection connection2=SwitchHelpers.DATABASECONNECTION_SWITCH.doSwitch(obj2);
  if (connection1 != null && connection2 != null) {
    changeUrl=ConnectionHelper.isUrlChanged(connection1);
  }
  if (changeUrl) {
    return false;
  }
 else {
    boolean result=false;
    if (obj1 instanceof Catalog && obj2 instanceof Catalog) {
      Catalog catalog1=(Catalog)obj1;
      Catalog catalog2=(Catalog)obj2;
      result=StringUtils.equalsIgnoreCase(catalog1.getName(),catalog2.getName());
    }
 else     if (obj1 instanceof Schema && obj2 instanceof Schema) {
      Schema schema1=(Schema)obj1;
      Schema schema2=(Schema)obj2;
      result=StringUtils.equalsIgnoreCase(schema1.getName(),schema2.getName());
    }
 else     if (obj1 instanceof TdTable && obj2 instanceof TdTable) {
      TdTable tdTable1=(TdTable)obj1;
      TdTable tdTable2=(TdTable)obj2;
      result=StringUtils.equalsIgnoreCase(tdTable1.getName(),tdTable2.getName());
    }
 else     if (obj1 instanceof TdView && obj2 instanceof TdView) {
      TdView tdView1=(TdView)obj1;
      TdView tdView2=(TdView)obj2;
      result=StringUtils.equalsIgnoreCase(tdView1.getName(),tdView2.getName());
    }
 else     if (obj1 instanceof TdColumn && obj2 instanceof TdColumn) {
      TdColumn tdColumn1=(TdColumn)obj1;
      TdColumn tdColumn2=(TdColumn)obj2;
      result=StringUtils.equalsIgnoreCase(tdColumn1.getName(),tdColumn2.getName()) && isSimilar(tdColumn1.getSqlDataType(),tdColumn2.getSqlDataType());
    }
 else     if (obj1 instanceof TaggedValue && obj2 instanceof TaggedValue) {
      TaggedValue taggedValue1=(TaggedValue)obj1;
      TaggedValue taggedValue2=(TaggedValue)obj2;
      result=StringUtils.equalsIgnoreCase(taggedValue1.getTag(),taggedValue2.getTag()) && StringUtils.equalsIgnoreCase(taggedValue1.getValue(),taggedValue2.getValue());
    }
 else     if (obj1 instanceof TdExpression && obj2 instanceof TdExpression) {
      TdExpression tdExpression1=(TdExpression)obj1;
      TdExpression tdExpression2=(TdExpression)obj2;
      result=StringUtils.equalsIgnoreCase(tdExpression1.getLanguage(),tdExpression2.getLanguage()) && StringUtils.equalsIgnoreCase(tdExpression1.getBody(),tdExpression2.getBody());
    }
 else     if (obj1 instanceof TdSqlDataType && obj2 instanceof TdSqlDataType) {
      TdSqlDataType tdExpression1=(TdSqlDataType)obj1;
      TdSqlDataType tdExpression2=(TdSqlDataType)obj2;
      result=StringUtils.equalsIgnoreCase(tdExpression1.getName(),tdExpression2.getName());
    }
 else {
      result=super.isSimilar(obj1,obj2);
    }
    return result;
  }
}","@Override public boolean isSimilar(EObject obj1,EObject obj2) throws FactoryException {
  DatabaseConnection connection1=SwitchHelpers.DATABASECONNECTION_SWITCH.doSwitch(obj1);
  DatabaseConnection connection2=SwitchHelpers.DATABASECONNECTION_SWITCH.doSwitch(obj2);
  if (connection1 != null && connection2 != null) {
    changeUrl=ConnectionHelper.isUrlChanged(connection1);
  }
  boolean result=true;
  if (obj1 instanceof Catalog && obj2 instanceof Catalog) {
    Catalog catalog1=(Catalog)obj1;
    Catalog catalog2=(Catalog)obj2;
    result=StringUtils.equalsIgnoreCase(catalog1.getName(),catalog2.getName());
  }
 else   if (obj1 instanceof Schema && obj2 instanceof Schema) {
    Schema schema1=(Schema)obj1;
    Schema schema2=(Schema)obj2;
    result=StringUtils.equalsIgnoreCase(schema1.getName(),schema2.getName());
  }
 else   if (obj1 instanceof TdTable && obj2 instanceof TdTable) {
    TdTable tdTable1=(TdTable)obj1;
    TdTable tdTable2=(TdTable)obj2;
    result=StringUtils.equalsIgnoreCase(tdTable1.getName(),tdTable2.getName());
  }
 else   if (obj1 instanceof TdView && obj2 instanceof TdView) {
    TdView tdView1=(TdView)obj1;
    TdView tdView2=(TdView)obj2;
    result=StringUtils.equalsIgnoreCase(tdView1.getName(),tdView2.getName());
  }
 else   if (obj1 instanceof TdColumn && obj2 instanceof TdColumn) {
    TdColumn tdColumn1=(TdColumn)obj1;
    TdColumn tdColumn2=(TdColumn)obj2;
    result=StringUtils.equalsIgnoreCase(tdColumn1.getName(),tdColumn2.getName()) && isSimilar(tdColumn1.getSqlDataType(),tdColumn2.getSqlDataType());
  }
 else   if (obj1 instanceof TaggedValue && obj2 instanceof TaggedValue) {
    TaggedValue taggedValue1=(TaggedValue)obj1;
    TaggedValue taggedValue2=(TaggedValue)obj2;
    result=StringUtils.equalsIgnoreCase(taggedValue1.getTag(),taggedValue2.getTag()) && StringUtils.equalsIgnoreCase(taggedValue1.getValue(),taggedValue2.getValue());
  }
 else   if (obj1 instanceof TdExpression && obj2 instanceof TdExpression) {
    TdExpression tdExpression1=(TdExpression)obj1;
    TdExpression tdExpression2=(TdExpression)obj2;
    result=StringUtils.equalsIgnoreCase(tdExpression1.getLanguage(),tdExpression2.getLanguage()) && StringUtils.equalsIgnoreCase(tdExpression1.getBody(),tdExpression2.getBody());
  }
 else   if (obj1 instanceof TdSqlDataType && obj2 instanceof TdSqlDataType) {
    TdSqlDataType tdExpression1=(TdSqlDataType)obj1;
    TdSqlDataType tdExpression2=(TdSqlDataType)obj2;
    result=StringUtils.equalsIgnoreCase(tdExpression1.getName(),tdExpression2.getName());
  }
  if (obj1 instanceof DatabaseConnection) {
    return true;
  }
 else   if (changeUrl && !result) {
    return false;
  }
  return true;
}",0.8580882352941176
138100,"/** 
 * DOC bZhou Comment method ""fillParametersFromURL"".
 * @param dbconn
 * @param s
 */
private void fillParametersFromURL(DatabaseConnection dbconn,String[] s){
  String selection=s[0];
  int index=1;
  if (s[index] != ""String_Node_Str"") {
    if (selection.equals(EDatabaseConnTemplate.GODBC.getDBDisplayName()) || selection.equals(EDatabaseConnTemplate.MSODBC.getDBDisplayName())) {
      dbconn.setDatasourceName(s[index]);
    }
 else     if (selection.equals(EDatabaseConnTemplate.SQLITE.getDBDisplayName()) || selection.equals(EDatabaseConnTemplate.ACCESS.getDBDisplayName())) {
      dbconn.setFileFieldName(s[index]);
    }
 else     if (selection.equals(EDatabaseConnTemplate.JAVADB_EMBEDED.getDBDisplayName())) {
      dbconn.setSID(s[index]);
    }
 else     if (selection.equals(EDatabaseConnTemplate.HSQLDB_IN_PROGRESS.getDBDisplayName())) {
      dbconn.setDBRootPath(s[index]);
    }
 else {
      dbconn.setServerName(s[index]);
    }
  }
  index=2;
  if (s[index] != ""String_Node_Str"") {
    if (selection.equals(EDatabaseConnTemplate.INTERBASE.getDBDisplayName()) || selection.equals(EDatabaseConnTemplate.TERADATA.getDBDisplayName()) || selection.equals(EDatabaseConnTemplate.AS400.getDBDisplayName())|| selection.equals(EDatabaseConnTemplate.HSQLDB_IN_PROGRESS.getDBDisplayName())) {
      dbconn.setSID(s[index]);
    }
 else     if (selection.equals(EDatabaseConnTemplate.FIREBIRD.getDBDisplayName())) {
      dbconn.setFileFieldName(s[index]);
    }
 else {
      dbconn.setPort(s[index]);
    }
  }
  index=3;
  if (s[index] != ""String_Node_Str"") {
    if (selection.equals(EDatabaseConnTemplate.AS400.getDBDisplayName()) || selection.equals(EDatabaseConnTemplate.MYSQL.getDBDisplayName())) {
      dbconn.setSID(s[index]);
    }
  }
  index=4;
  if (s[index] != ""String_Node_Str"") {
    if (selection.equals(EDatabaseConnTemplate.INFORMIX.getDBDisplayName())) {
      dbconn.setDatasourceName(s[index]);
    }
 else {
      dbconn.setAdditionalParams(s[index]);
    }
  }
  index=5;
  if (s[index] != ""String_Node_Str"") {
    dbconn.setAdditionalParams(s[index]);
  }
}","/** 
 * DOC bZhou Comment method ""fillParametersFromURL"".
 * @param dbconn
 * @param s
 */
private void fillParametersFromURL(DatabaseConnection dbconn,String[] s){
  String selection=s[0];
  int index=1;
  if (s[index] != ""String_Node_Str"") {
    if (selection.equals(EDatabaseConnTemplate.GODBC.getDBDisplayName()) || selection.equals(EDatabaseConnTemplate.MSODBC.getDBDisplayName())) {
      dbconn.setDatasourceName(s[index]);
    }
 else     if (selection.equals(EDatabaseConnTemplate.SQLITE.getDBDisplayName()) || selection.equals(EDatabaseConnTemplate.ACCESS.getDBDisplayName())) {
      dbconn.setFileFieldName(s[index]);
    }
 else     if (selection.equals(EDatabaseConnTemplate.JAVADB_EMBEDED.getDBDisplayName())) {
      dbconn.setSID(s[index]);
    }
 else     if (selection.equals(EDatabaseConnTemplate.HSQLDB_IN_PROGRESS.getDBDisplayName())) {
      dbconn.setDBRootPath(s[index]);
    }
 else {
      dbconn.setServerName(s[index]);
    }
  }
  index=2;
  if (s[index] != ""String_Node_Str"") {
    if (selection.equals(EDatabaseConnTemplate.INTERBASE.getDBDisplayName()) || selection.equals(EDatabaseConnTemplate.TERADATA.getDBDisplayName()) || selection.equals(EDatabaseConnTemplate.AS400.getDBDisplayName())|| selection.equals(EDatabaseConnTemplate.HSQLDB_IN_PROGRESS.getDBDisplayName())) {
      dbconn.setSID(s[index]);
    }
 else     if (selection.equals(EDatabaseConnTemplate.FIREBIRD.getDBDisplayName())) {
      dbconn.setFileFieldName(s[index]);
    }
 else {
      dbconn.setPort(s[index]);
    }
  }
  index=3;
  if (s[index] != ""String_Node_Str"") {
    if (selection.equals(EDatabaseConnTemplate.IBMDB2.getDBDisplayName()) || selection.equals(EDatabaseConnTemplate.INFORMIX.getDBDisplayName()) || selection.equals(EDatabaseConnTemplate.ORACLEFORSID.getDBDisplayName())|| selection.equals(EDatabaseConnTemplate.INGRES.getDBDisplayName())) {
      dbconn.setSID(s[index]);
    }
  }
  index=4;
  if (s[index] != ""String_Node_Str"") {
    if (selection.equals(EDatabaseConnTemplate.INFORMIX.getDBDisplayName())) {
      dbconn.setDatasourceName(s[index]);
    }
 else {
      dbconn.setAdditionalParams(s[index]);
    }
  }
  index=5;
  if (s[index] != ""String_Node_Str"") {
    dbconn.setAdditionalParams(s[index]);
  }
}",0.8869445084043288
138101,"/** 
 * DOC bZhou Comment method ""fillParametersFromURL"".
 * @param dbconn
 * @param s
 */
private void fillParametersFromURL(DatabaseConnection dbconn,String[] s){
  String selection=s[0];
  int index=1;
  if (s[index] != ""String_Node_Str"") {
    if (selection.equals(EDatabaseConnTemplate.GODBC.getDBDisplayName()) || selection.equals(EDatabaseConnTemplate.MSODBC.getDBDisplayName())) {
      dbconn.setDatasourceName(s[index]);
    }
 else     if (selection.equals(EDatabaseConnTemplate.SQLITE.getDBDisplayName()) || selection.equals(EDatabaseConnTemplate.ACCESS.getDBDisplayName())) {
      dbconn.setFileFieldName(s[index]);
    }
 else     if (selection.equals(EDatabaseConnTemplate.JAVADB_EMBEDED.getDBDisplayName())) {
      dbconn.setSID(s[index]);
    }
 else     if (selection.equals(EDatabaseConnTemplate.HSQLDB_IN_PROGRESS.getDBDisplayName())) {
      dbconn.setDBRootPath(s[index]);
    }
 else {
      dbconn.setServerName(s[index]);
    }
  }
  index=2;
  if (s[index] != ""String_Node_Str"") {
    if (selection.equals(EDatabaseConnTemplate.INTERBASE.getDBDisplayName()) || selection.equals(EDatabaseConnTemplate.TERADATA.getDBDisplayName()) || selection.equals(EDatabaseConnTemplate.AS400.getDBDisplayName())|| selection.equals(EDatabaseConnTemplate.HSQLDB_IN_PROGRESS.getDBDisplayName())) {
      dbconn.setSID(s[index]);
    }
 else     if (selection.equals(EDatabaseConnTemplate.FIREBIRD.getDBDisplayName())) {
      dbconn.setFileFieldName(s[index]);
    }
 else {
      dbconn.setPort(s[index]);
    }
  }
  index=3;
  if (s[index] != ""String_Node_Str"") {
    if (selection.equals(EDatabaseConnTemplate.AS400.getDBDisplayName()) || selection.equals(EDatabaseConnTemplate.MYSQL.getDBDisplayName())) {
      dbconn.setSID(s[index]);
    }
  }
  index=4;
  if (s[index] != ""String_Node_Str"") {
    if (selection.equals(EDatabaseConnTemplate.INFORMIX.getDBDisplayName())) {
      dbconn.setDatasourceName(s[index]);
    }
 else {
      dbconn.setAdditionalParams(s[index]);
    }
  }
  index=5;
  if (s[index] != ""String_Node_Str"") {
    dbconn.setAdditionalParams(s[index]);
  }
}","/** 
 * DOC bZhou Comment method ""fillParametersFromURL"".
 * @param dbconn
 * @param s
 */
private void fillParametersFromURL(DatabaseConnection dbconn,String[] s){
  String selection=s[0];
  int index=1;
  if (s[index] != ""String_Node_Str"") {
    if (selection.equals(EDatabaseConnTemplate.GODBC.getDBDisplayName()) || selection.equals(EDatabaseConnTemplate.MSODBC.getDBDisplayName())) {
      dbconn.setDatasourceName(s[index]);
    }
 else     if (selection.equals(EDatabaseConnTemplate.SQLITE.getDBDisplayName()) || selection.equals(EDatabaseConnTemplate.ACCESS.getDBDisplayName())) {
      dbconn.setFileFieldName(s[index]);
    }
 else     if (selection.equals(EDatabaseConnTemplate.JAVADB_EMBEDED.getDBDisplayName())) {
      dbconn.setSID(s[index]);
    }
 else     if (selection.equals(EDatabaseConnTemplate.HSQLDB_IN_PROGRESS.getDBDisplayName())) {
      dbconn.setDBRootPath(s[index]);
    }
 else {
      dbconn.setServerName(s[index]);
    }
  }
  index=2;
  if (s[index] != ""String_Node_Str"") {
    if (selection.equals(EDatabaseConnTemplate.INTERBASE.getDBDisplayName()) || selection.equals(EDatabaseConnTemplate.TERADATA.getDBDisplayName()) || selection.equals(EDatabaseConnTemplate.AS400.getDBDisplayName())|| selection.equals(EDatabaseConnTemplate.HSQLDB_IN_PROGRESS.getDBDisplayName())) {
      dbconn.setSID(s[index]);
    }
 else     if (selection.equals(EDatabaseConnTemplate.FIREBIRD.getDBDisplayName())) {
      dbconn.setFileFieldName(s[index]);
    }
 else {
      dbconn.setPort(s[index]);
    }
  }
  index=3;
  if (s[index] != ""String_Node_Str"" && StringUtils.isEmpty(dbconn.getSID())) {
    if (selection.equals(EDatabaseConnTemplate.IBMDB2.getDBDisplayName()) || selection.equals(EDatabaseConnTemplate.INFORMIX.getDBDisplayName()) || selection.equals(EDatabaseConnTemplate.ORACLEFORSID.getDBDisplayName())|| selection.equals(EDatabaseConnTemplate.INGRES.getDBDisplayName())) {
      dbconn.setSID(s[index]);
    }
  }
  index=4;
  if (s[index] != ""String_Node_Str"") {
    if (selection.equals(EDatabaseConnTemplate.INFORMIX.getDBDisplayName())) {
      dbconn.setDatasourceName(s[index]);
    }
 else {
      dbconn.setAdditionalParams(s[index]);
    }
  }
  index=5;
  if (s[index] != ""String_Node_Str"") {
    dbconn.setAdditionalParams(s[index]);
  }
}",0.8788501026694046
138102,"public static List<RuleRepNode> getRuleRepNodes(IRepositoryNode parrentNode,boolean recursiveFind,boolean withDeleted){
  List<RuleRepNode> result=new ArrayList<RuleRepNode>();
  if (parrentNode != null && (parrentNode instanceof RulesSQLFolderRepNode || parrentNode instanceof RulesSubFolderRepNode || parrentNode instanceof RulesParserFolderRepNode)) {
    List<IRepositoryNode> children=parrentNode.getChildren(withDeleted);
    if (children.size() > 0) {
      for (      IRepositoryNode inode : children) {
        if (inode instanceof RuleRepNode) {
          result.add((RuleRepNode)inode);
        }
 else         if (inode instanceof RulesSQLFolderRepNode || inode instanceof RulesSubFolderRepNode) {
          if (recursiveFind) {
            result.addAll(getRuleRepNodes(inode,recursiveFind,withDeleted));
          }
        }
      }
    }
  }
  return result;
}","public static List<RuleRepNode> getRuleRepNodes(IRepositoryNode parrentNode,boolean recursiveFind,boolean withDeleted){
  List<RuleRepNode> result=new ArrayList<RuleRepNode>();
  if (parrentNode != null && (parrentNode instanceof RulesSQLFolderRepNode || parrentNode instanceof RulesSQLSubFolderRepNode || parrentNode instanceof RulesParserSubFolderRepNode|| parrentNode instanceof RulesParserFolderRepNode)) {
    List<IRepositoryNode> children=parrentNode.getChildren(withDeleted);
    if (children.size() > 0) {
      for (      IRepositoryNode inode : children) {
        if (inode instanceof RuleRepNode) {
          result.add((RuleRepNode)inode);
        }
 else         if (inode instanceof RulesSQLFolderRepNode || inode instanceof RulesSQLSubFolderRepNode || inode instanceof RulesParserSubFolderRepNode) {
          if (recursiveFind) {
            result.addAll(getRuleRepNodes(inode,recursiveFind,withDeleted));
          }
        }
      }
    }
  }
  return result;
}",0.942442173211404
138103,"@Override public List<IRepositoryNode> getChildren(boolean withDeleted){
  try {
    super.getChildren().clear();
    RootContainer<String,IRepositoryViewObject> tdqViewObjects=ProxyRepositoryFactory.getInstance().getTdqRepositoryViewObjects(getContentType(),RepositoryNodeHelper.getPath(this).toString());
    for (    Container<String,IRepositoryViewObject> container : tdqViewObjects.getSubContainer()) {
      Folder folder=new Folder((Property)container.getProperty(),ERepositoryObjectType.TDQ_RULES_PARSER);
      if (!withDeleted && folder.isDeleted()) {
        continue;
      }
      RulesSubFolderRepNode childNodeFolder=new RulesSubFolderRepNode(folder,this,ENodeType.SIMPLE_FOLDER);
      childNodeFolder.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.TDQ_RULES_PARSER);
      childNodeFolder.setProperties(EProperties.LABEL,ERepositoryObjectType.TDQ_RULES_PARSER);
      super.getChildren().add(childNodeFolder);
    }
    for (    IRepositoryViewObject viewObject : tdqViewObjects.getMembers()) {
      if (!withDeleted && viewObject.isDeleted()) {
        continue;
      }
      RuleRepNode repNode=new RuleRepNode(viewObject,this,ENodeType.REPOSITORY_ELEMENT);
      repNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.TDQ_RULES_PARSER);
      repNode.setProperties(EProperties.LABEL,ERepositoryObjectType.TDQ_RULES_PARSER);
      viewObject.setRepositoryNode(repNode);
      super.getChildren().add(repNode);
    }
  }
 catch (  PersistenceException e) {
    log.error(e,e);
  }
  return filterResultsIfAny(super.getChildren());
}","@Override public List<IRepositoryNode> getChildren(boolean withDeleted){
  try {
    super.getChildren().clear();
    RootContainer<String,IRepositoryViewObject> tdqViewObjects=ProxyRepositoryFactory.getInstance().getTdqRepositoryViewObjects(getContentType(),RepositoryNodeHelper.getPath(this).toString());
    for (    Container<String,IRepositoryViewObject> container : tdqViewObjects.getSubContainer()) {
      Folder folder=new Folder((Property)container.getProperty(),ERepositoryObjectType.TDQ_RULES_PARSER);
      if (!withDeleted && folder.isDeleted()) {
        continue;
      }
      RulesParserSubFolderRepNode childNodeFolder=new RulesParserSubFolderRepNode(folder,this,ENodeType.SIMPLE_FOLDER);
      childNodeFolder.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.TDQ_RULES_PARSER);
      childNodeFolder.setProperties(EProperties.LABEL,ERepositoryObjectType.TDQ_RULES_PARSER);
      super.getChildren().add(childNodeFolder);
    }
    for (    IRepositoryViewObject viewObject : tdqViewObjects.getMembers()) {
      if (!withDeleted && viewObject.isDeleted()) {
        continue;
      }
      RuleRepNode repNode=new RuleRepNode(viewObject,this,ENodeType.REPOSITORY_ELEMENT);
      repNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.TDQ_RULES_PARSER);
      repNode.setProperties(EProperties.LABEL,ERepositoryObjectType.TDQ_RULES_PARSER);
      viewObject.setRepositoryNode(repNode);
      super.getChildren().add(repNode);
    }
  }
 catch (  PersistenceException e) {
    log.error(e,e);
  }
  return filterResultsIfAny(super.getChildren());
}",0.996216897856242
138104,"@Override public List<IRepositoryNode> getChildren(boolean withDeleted){
  try {
    super.getChildren().clear();
    RootContainer<String,IRepositoryViewObject> tdqViewObjects=ProxyRepositoryFactory.getInstance().getTdqRepositoryViewObjects(getContentType(),RepositoryNodeHelper.getPath(this).toString());
    for (    Container<String,IRepositoryViewObject> container : tdqViewObjects.getSubContainer()) {
      Folder folder=new Folder((Property)container.getProperty(),ERepositoryObjectType.TDQ_RULES_SQL);
      if (!withDeleted && folder.isDeleted()) {
        continue;
      }
      RulesSubFolderRepNode childNodeFolder=new RulesSubFolderRepNode(folder,this,ENodeType.SIMPLE_FOLDER);
      childNodeFolder.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.TDQ_RULES_SQL);
      childNodeFolder.setProperties(EProperties.LABEL,ERepositoryObjectType.TDQ_RULES_SQL);
      super.getChildren().add(childNodeFolder);
    }
    for (    IRepositoryViewObject viewObject : tdqViewObjects.getMembers()) {
      if (!withDeleted && viewObject.isDeleted()) {
        continue;
      }
      RuleRepNode repNode=new RuleRepNode(viewObject,this,ENodeType.REPOSITORY_ELEMENT);
      repNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.TDQ_RULES_SQL);
      repNode.setProperties(EProperties.LABEL,ERepositoryObjectType.TDQ_RULES_SQL);
      viewObject.setRepositoryNode(repNode);
      super.getChildren().add(repNode);
    }
  }
 catch (  PersistenceException e) {
    log.error(e,e);
  }
  return filterResultsIfAny(super.getChildren());
}","@Override public List<IRepositoryNode> getChildren(boolean withDeleted){
  try {
    super.getChildren().clear();
    RootContainer<String,IRepositoryViewObject> tdqViewObjects=ProxyRepositoryFactory.getInstance().getTdqRepositoryViewObjects(getContentType(),RepositoryNodeHelper.getPath(this).toString());
    for (    Container<String,IRepositoryViewObject> container : tdqViewObjects.getSubContainer()) {
      Folder folder=new Folder((Property)container.getProperty(),ERepositoryObjectType.TDQ_RULES_SQL);
      if (!withDeleted && folder.isDeleted()) {
        continue;
      }
      RulesSQLSubFolderRepNode childNodeFolder=new RulesSQLSubFolderRepNode(folder,this,ENodeType.SIMPLE_FOLDER);
      childNodeFolder.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.TDQ_RULES_SQL);
      childNodeFolder.setProperties(EProperties.LABEL,ERepositoryObjectType.TDQ_RULES_SQL);
      super.getChildren().add(childNodeFolder);
    }
    for (    IRepositoryViewObject viewObject : tdqViewObjects.getMembers()) {
      if (!withDeleted && viewObject.isDeleted()) {
        continue;
      }
      RuleRepNode repNode=new RuleRepNode(viewObject,this,ENodeType.REPOSITORY_ELEMENT);
      repNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.TDQ_RULES_SQL);
      repNode.setProperties(EProperties.LABEL,ERepositoryObjectType.TDQ_RULES_SQL);
      viewObject.setRepositoryNode(repNode);
      super.getChildren().add(repNode);
    }
  }
 catch (  PersistenceException e) {
    log.error(e,e);
  }
  return filterResultsIfAny(super.getChildren());
}",0.9980867346938777
138105,"private boolean shouldShowRenameFolderMenu(RepositoryNode node){
  boolean show=false;
  if (node instanceof AnalysisSubFolderRepNode) {
    AnalysisSubFolderRepNode anaSubFolderNode=(AnalysisSubFolderRepNode)node;
    show=!anaSubFolderNode.isVirtualFolder();
  }
 else   if (node instanceof ReportSubFolderRepNode) {
    ReportSubFolderRepNode repSubFolderNode=(ReportSubFolderRepNode)node;
    show=!repSubFolderNode.isVirtualFolder();
  }
 else   if (node instanceof UserDefIndicatorSubFolderRepNode || node instanceof PatternRegexSubFolderRepNode || node instanceof PatternSqlSubFolderRepNode|| node instanceof RulesSubFolderRepNode|| node instanceof DBConnectionSubFolderRepNode|| node instanceof MDMConnectionSubFolderRepNode|| node instanceof DFConnectionSubFolderRepNode) {
    show=true;
  }
  return show;
}","private boolean shouldShowRenameFolderMenu(RepositoryNode node){
  boolean show=false;
  if (node instanceof AnalysisSubFolderRepNode) {
    AnalysisSubFolderRepNode anaSubFolderNode=(AnalysisSubFolderRepNode)node;
    show=!anaSubFolderNode.isVirtualFolder();
  }
 else   if (node instanceof ReportSubFolderRepNode) {
    ReportSubFolderRepNode repSubFolderNode=(ReportSubFolderRepNode)node;
    show=!repSubFolderNode.isVirtualFolder();
  }
 else   if (node instanceof UserDefIndicatorSubFolderRepNode || node instanceof PatternRegexSubFolderRepNode || node instanceof PatternSqlSubFolderRepNode|| node instanceof RulesSQLSubFolderRepNode|| node instanceof RulesParserSubFolderRepNode|| node instanceof DBConnectionSubFolderRepNode|| node instanceof MDMConnectionSubFolderRepNode|| node instanceof DFConnectionSubFolderRepNode) {
    show=true;
  }
  return show;
}",0.970919881305638
138106,"private void moveCommonRepNode(IRepositoryNode sourceNode,IRepositoryNode targetNode){
  IRepositoryViewObject objectToMove=sourceNode.getObject();
  ERepositoryObjectType targetObjectType=targetNode.getContentType();
  IPath fullPath=getNodeFullPath(targetObjectType);
  IPath makeRelativeTo=fullPath.makeRelativeTo(ResourceManager.getRootProject().getFullPath());
  IPath removeLastSegments=makeRelativeTo.removeLastSegments(1);
  if (ERepositoryObjectType.TDQ_RULES_SQL.equals(targetObjectType) || ERepositoryObjectType.TDQ_ANALYSIS_ELEMENT.equals(targetObjectType) || ERepositoryObjectType.TDQ_REPORT_ELEMENT.equals(targetObjectType)|| ERepositoryObjectType.METADATA_CONNECTIONS.equals(targetObjectType)|| ERepositoryObjectType.METADATA_FILE_DELIMITED.equals(targetObjectType)|| ERepositoryObjectType.METADATA_MDMCONNECTION.equals(targetObjectType)) {
    removeLastSegments=makeRelativeTo;
  }
  if (targetNode.getType() == ENodeType.SIMPLE_FOLDER) {
    moveObject(objectToMove,sourceNode,targetNode,removeLastSegments);
  }
 else   if (targetNode.getType() == ENodeType.SYSTEM_FOLDER) {
    moveObject(objectToMove,sourceNode,targetNode,removeLastSegments);
  }
  CorePlugin.getDefault().refreshDQView(targetNode.getParent());
}","private void moveCommonRepNode(IRepositoryNode sourceNode,IRepositoryNode targetNode){
  IRepositoryViewObject objectToMove=sourceNode.getObject();
  ERepositoryObjectType targetObjectType=targetNode.getContentType();
  IPath fullPath=getNodeFullPath(targetObjectType);
  IPath makeRelativeTo=fullPath.makeRelativeTo(ResourceManager.getRootProject().getFullPath());
  IPath removeLastSegments=makeRelativeTo.removeLastSegments(1);
  if (ERepositoryObjectType.TDQ_RULES_SQL.equals(targetObjectType) || ERepositoryObjectType.TDQ_RULES_PARSER.equals(targetObjectType) || ERepositoryObjectType.METADATA_FILE_DELIMITED.equals(targetObjectType)|| ERepositoryObjectType.METADATA_MDMCONNECTION.equals(targetObjectType)) {
    removeLastSegments=makeRelativeTo;
  }
  if (targetNode.getType() == ENodeType.SIMPLE_FOLDER) {
    moveObject(objectToMove,sourceNode,targetNode,removeLastSegments);
  }
 else   if (targetNode.getType() == ENodeType.SYSTEM_FOLDER) {
    moveObject(objectToMove,sourceNode,targetNode,removeLastSegments);
  }
  CorePlugin.getDefault().refreshDQView(targetNode.getParent());
}",0.929553264604811
138107,"private IPath getNodeFullPath(ERepositoryObjectType objectType){
  IPath fullPath=null;
  if (objectType == ERepositoryObjectType.TDQ_JRAXML_ELEMENT) {
    fullPath=ResourceManager.getJRXMLFolder().getFullPath();
  }
 else   if (objectType == ERepositoryObjectType.TDQ_PATTERN_REGEX) {
    fullPath=ResourceManager.getPatternRegexFolder().getFullPath();
  }
 else   if (objectType == ERepositoryObjectType.TDQ_PATTERN_SQL) {
    fullPath=ResourceManager.getPatternSQLFolder().getFullPath();
  }
 else   if (objectType == ERepositoryObjectType.TDQ_SOURCE_FILE_ELEMENT) {
    fullPath=ResourceManager.getSourceFileFolder().getFullPath();
  }
 else   if (objectType == ERepositoryObjectType.TDQ_RULES_SQL) {
    fullPath=ResourceManager.getRulesSQLFolder().getFullPath();
  }
 else   if (objectType == ERepositoryObjectType.TDQ_USERDEFINE_INDICATORS) {
    fullPath=ResourceManager.getUDIFolder().getFullPath();
  }
 else   if (objectType == ERepositoryObjectType.METADATA_CONNECTIONS) {
    fullPath=ResourceManager.getConnectionFolder().getFullPath();
  }
 else   if (objectType == ERepositoryObjectType.TDQ_ANALYSIS_ELEMENT) {
    fullPath=ResourceManager.getAnalysisFolder().getFullPath();
  }
 else   if (objectType == ERepositoryObjectType.TDQ_REPORT_ELEMENT) {
    fullPath=ResourceManager.getReportsFolder().getFullPath();
  }
 else   if (objectType == ERepositoryObjectType.METADATA_FILE_DELIMITED) {
    fullPath=ResourceManager.getFileDelimitedFolder().getFullPath();
  }
 else   if (objectType == ERepositoryObjectType.METADATA_MDMCONNECTION) {
    fullPath=ResourceManager.getMDMConnectionFolder().getFullPath();
  }
  return fullPath;
}","private IPath getNodeFullPath(ERepositoryObjectType objectType){
  IPath fullPath=null;
  if (objectType == ERepositoryObjectType.TDQ_JRAXML_ELEMENT) {
    fullPath=ResourceManager.getJRXMLFolder().getFullPath();
  }
 else   if (objectType == ERepositoryObjectType.TDQ_PATTERN_REGEX) {
    fullPath=ResourceManager.getPatternRegexFolder().getFullPath();
  }
 else   if (objectType == ERepositoryObjectType.TDQ_PATTERN_SQL) {
    fullPath=ResourceManager.getPatternSQLFolder().getFullPath();
  }
 else   if (objectType == ERepositoryObjectType.TDQ_SOURCE_FILE_ELEMENT) {
    fullPath=ResourceManager.getSourceFileFolder().getFullPath();
  }
 else   if (objectType == ERepositoryObjectType.TDQ_RULES_SQL) {
    fullPath=ResourceManager.getRulesSQLFolder().getFullPath();
  }
 else   if (objectType == ERepositoryObjectType.TDQ_USERDEFINE_INDICATORS) {
    fullPath=ResourceManager.getUDIFolder().getFullPath();
  }
 else   if (objectType == ERepositoryObjectType.METADATA_CONNECTIONS) {
    fullPath=ResourceManager.getConnectionFolder().getFullPath();
  }
 else   if (objectType == ERepositoryObjectType.TDQ_ANALYSIS_ELEMENT) {
    fullPath=ResourceManager.getAnalysisFolder().getFullPath();
  }
 else   if (objectType == ERepositoryObjectType.TDQ_REPORT_ELEMENT) {
    fullPath=ResourceManager.getReportsFolder().getFullPath();
  }
 else   if (objectType == ERepositoryObjectType.METADATA_FILE_DELIMITED) {
    fullPath=ResourceManager.getFileDelimitedFolder().getFullPath();
  }
 else   if (objectType == ERepositoryObjectType.METADATA_MDMCONNECTION) {
    fullPath=ResourceManager.getMDMConnectionFolder().getFullPath();
  }
 else   if (objectType == ERepositoryObjectType.TDQ_RULES_PARSER) {
    fullPath=ResourceManager.getRulesParserFolder().getFullPath();
  }
  return fullPath;
}",0.9501893387707544
138108,"/** 
 * DOC bZhou Comment method ""createNewItemFile"".
 * @param file
 */
private void createNewItemFile(File file){
  ModelElement modelElement=getModelElement(file);
  if (modelElement != null) {
    boolean needUpdateFlag=!modelElement.eIsProxy();
    if (needUpdateFlag) {
      IFile iFile=WorkspaceUtils.fileToIFile(file);
      IFolder parentFolder=(IFolder)iFile.getParent();
      Resource oldRes=modelElement.eResource();
      List<Resource> needSaves=getReferenceResources(oldRes);
      AElementPersistance writer=ElementWriterFactory.getInstance().create(modelElement);
      writer.create(modelElement,parentFolder,true);
      EMFUtil.changeUri(oldRes,EObjectHelper.getURI(modelElement));
      for (      Resource toSave : needSaves) {
        EMFSharedResources.getInstance().saveResource(toSave);
      }
    }
  }
}","/** 
 * DOC bZhou Comment method ""createNewItemFile"".
 * @param file
 */
private void createNewItemFile(File file){
  ModelElement modelElement=getModelElement(file);
  if (modelElement != null) {
    boolean needUpdateFlag=!modelElement.eIsProxy();
    if (needUpdateFlag) {
      IFile iFile=WorkspaceUtils.fileToIFile(file);
      IFolder parentFolder=(IFolder)iFile.getParent();
      Resource oldRes=modelElement.eResource();
      List<Resource> needSaves=getReferenceResources(oldRes,modelElement);
      AElementPersistance writer=ElementWriterFactory.getInstance().create(modelElement);
      writer.create(modelElement,parentFolder,true);
      EMFUtil.changeUri(oldRes,EObjectHelper.getURI(modelElement));
      for (      Resource toSave : needSaves) {
        EMFSharedResources.getInstance().saveResource(toSave);
      }
    }
  }
}",0.992266508030934
138109,"/** 
 * DOC bZhou Comment method ""getReferenceResources"".
 * @param res
 * @return
 */
public List<Resource> getReferenceResources(Resource res){
  EcoreUtil.resolveAll(res);
  Map<EObject,Collection<Setting>> find=EcoreUtil.ExternalCrossReferencer.find(res);
  List<Resource> needSaves=new ArrayList<Resource>();
  for (  EObject object : find.keySet()) {
    Resource resource=object.eResource();
    if (resource == null) {
      continue;
    }
    EcoreUtil.resolveAll(resource);
    needSaves.add(resource);
  }
  needSaves.add(res);
  return needSaves;
}","/** 
 * DOC bZhou Comment method ""getReferenceResources"".
 * @param res
 * @param modelElement
 * @return
 */
public List<Resource> getReferenceResources(Resource res,ModelElement modelElement){
  EcoreUtil.resolveAll(res);
  Map<EObject,Collection<Setting>> find=EcoreUtil.ExternalCrossReferencer.find(res);
  List<Resource> needSaves=new ArrayList<Resource>();
  for (  EObject object : find.keySet()) {
    Resource resource=object.eResource();
    if (resource == null) {
      continue;
    }
    EcoreUtil.resolveAll(resource);
    needSaves.add(resource);
  }
  if (res.getURI().toPlatformString(false).contains(EResourceConstant.LIBRARIES.getPath())) {
    final List<? extends ModelElement> allElement=AnaResourceFileHelper.getInstance().getAllElement();
    for (    ModelElement element : allElement) {
      Map<EObject,Collection<Setting>> allFind=EcoreUtil.ExternalCrossReferencer.find(element.eResource());
      if (allFind.keySet().contains(modelElement)) {
        needSaves.add(element.eResource());
      }
    }
  }
  needSaves.add(res);
  return needSaves;
}",0.6617915904936015
138110,"private String copyFile(File targetFolder,File propFile,Property property,IPath path,String connNameAfter,String connName,Map<File,File> folderMap) throws IOException {
  File destItemFile=new Path(targetFolder.getAbsolutePath()).append(path).append(connNameAfter).addFileExtension(FactoriesUtil.ITEM_EXTENSION).toFile();
  File destPropFile=new Path(targetFolder.getAbsolutePath()).append(path).append(connNameAfter).addFileExtension(FactoriesUtil.PROPERTIES_EXTENSION).toFile();
  File srcItemFile=new Path(propFile.getAbsolutePath()).removeFileExtension().addFileExtension(FactoriesUtil.ITEM_EXTENSION).toFile();
  File srcPropFile=propFile;
  Item item=property.getItem();
  FileUtils.copyFile(srcItemFile,destItemFile);
  FileUtils.copyFile(srcPropFile,destPropFile);
  if (item instanceof ConnectionItem) {
    ConnectionItem connectionItem=(ConnectionItem)item;
    Resource itemResource=getResource(destItemFile.getAbsolutePath());
    Connection conn=null;
    for (    EObject object : itemResource.getContents()) {
      if (object instanceof Connection) {
        conn=(Connection)object;
        if (connName != null) {
          conn.setName(connName);
          conn.setLabel(connName);
        }
        String relationPropPath=ReponsitoryContextBridge.getRootProject().getFullPath().append(new Path(destPropFile.getPath()).makeRelativeTo(this.getWorkspacePath())).toOSString();
        MetadataHelper.setPropertyPath(relationPropPath,conn);
        connectionItem.setConnection(conn);
      }
    }
    EMFUtil.saveResource(itemResource);
    Resource propResource=getResource(destPropFile.getAbsolutePath());
    Property newProperty=(Property)EcoreUtil.getObjectByType(propResource.getContents(),PropertiesPackage.eINSTANCE.getProperty());
    newProperty.setAuthor(property.getAuthor());
    newProperty.setLabel(connectionItem.getConnection().getName());
    newProperty.setItem(item);
    item.setProperty(newProperty);
    propResource.getContents().clear();
    propResource.getContents().add(newProperty);
    propResource.getContents().add(item);
    propResource.getContents().add(item.getState());
    EMFUtil.saveResource(propResource);
  }
  return connNameAfter;
}","private String copyFile(File targetFolder,File propFile,Property property,IPath path,String connNameAfter,String connName,Map<File,File> folderMap) throws IOException {
  File destItemFile=new Path(targetFolder.getAbsolutePath()).append(path).append(connNameAfter).addFileExtension(FactoriesUtil.ITEM_EXTENSION).toFile();
  File destPropFile=new Path(targetFolder.getAbsolutePath()).append(path).append(connNameAfter).addFileExtension(FactoriesUtil.PROPERTIES_EXTENSION).toFile();
  File srcItemFile=new Path(propFile.getAbsolutePath()).removeFileExtension().addFileExtension(FactoriesUtil.ITEM_EXTENSION).toFile();
  File srcPropFile=propFile;
  Item item=property.getItem();
  FileUtils.copyFile(srcItemFile,destItemFile);
  FileUtils.copyFile(srcPropFile,destPropFile);
  if (item instanceof ConnectionItem) {
    ConnectionItem connectionItem=(ConnectionItem)item;
    Connection conn=getConnectionFromFile(destItemFile);
    if (conn != null) {
      if (connName != null) {
        conn.setName(connName);
        conn.setLabel(connName);
      }
      String relationPropPath=ReponsitoryContextBridge.getRootProject().getFullPath().append(new Path(destPropFile.getPath()).makeRelativeTo(this.getWorkspacePath())).toOSString();
      MetadataHelper.setPropertyPath(relationPropPath,conn);
      connectionItem.setConnection(conn);
    }
    EMFUtil.saveResource(conn.eResource());
    Resource propResource=getResource(destPropFile);
    Property newProperty=(Property)EcoreUtil.getObjectByType(propResource.getContents(),PropertiesPackage.eINSTANCE.getProperty());
    newProperty.setAuthor(property.getAuthor());
    newProperty.setLabel(connectionItem.getConnection().getName());
    newProperty.setItem(item);
    item.setProperty(newProperty);
    propResource.getContents().clear();
    propResource.getContents().add(newProperty);
    propResource.getContents().add(item);
    propResource.getContents().add(item.getState());
    EMFUtil.saveResource(propResource);
  }
  return connNameAfter;
}",0.9050678087080656
138111,"@Override protected boolean doExecute() throws Exception {
  boolean result=true;
  Map<File,File> folderMap=initStructure();
  for (  File folder : folderMap.keySet()) {
    try {
      tansferFile(folder,folderMap);
    }
 catch (    Exception e) {
      log.error(e,e);
    }
  }
  File srcMdmXsdFolder=getWorkspacePath().append(ExchangeFileNameToReferenceTask.MDM_CONNECTION + IPath.SEPARATOR + ""String_Node_Str"").toFile();
  File tarMdmXsdFolder=getWorkspacePath().append(ERepositoryObjectType.getFolderName(ERepositoryObjectType.METADATA_MDMCONNECTION) + IPath.SEPARATOR + ""String_Node_Str"").toFile();
  FilesUtils.copyFolder(srcMdmXsdFolder,tarMdmXsdFolder,true,null,null,true,null);
  File mdmConnectionFolder=new File(ResourceManager.getMDMConnectionFolder().getRawLocationURI());
  final String[] metadataFileExtentionNames={""String_Node_Str""};
  UpdateMDMConnectionXSDPathTask.doUpdate(true,true,mdmConnectionFolder,metadataFileExtentionNames);
  ArrayList<File> fileList=new ArrayList<File>();
  FilesUtils.getAllFilesFromFolder(mdmConnectionFolder,fileList,new FilenameFilter(){
    public boolean accept(    File dir,    String name){
      if (name.endsWith(""String_Node_Str"")) {
        return true;
      }
      return false;
    }
  }
);
  for (  File file : fileList) {
    Connection connection=PrvResourceFileHelper.getInstance().findProvider(WorkspaceUtils.fileToIFile(file));
    connection.eResource().unload();
    EObjectHelper.resolveObject(connection);
  }
  File tdqMetadataFile=getWorkspacePath().append(OLD_MEATADATA_FOLDER_NAME).toFile();
  if (tdqMetadataFile.exists()) {
    FileUtils.deleteDirectory(tdqMetadataFile);
  }
  File fileAnalysis=getWorkspacePath().append(EResourceConstant.ANALYSIS.getPath()).toFile();
  File fileRule=getWorkspacePath().append(EResourceConstant.RULES.getPath()).toFile();
  try {
    String[] anaFileExtentionNames={FactoriesUtil.ANA};
    String[] rulesFileEctentionNames={FactoriesUtil.DQRULE};
    result&=FilesUtils.migrateFolder(fileAnalysis,anaFileExtentionNames,this.getReplaceStringMap(),log) && FilesUtils.migrateFolder(fileRule,rulesFileEctentionNames,this.getReplaceStringMap(),log);
  }
 catch (  Exception e) {
    result=false;
    log.error(e,e);
  }
  return result;
}","@Override protected boolean doExecute() throws Exception {
  boolean result=true;
  Map<File,File> folderMap=initStructure();
  for (  File folder : folderMap.keySet()) {
    try {
      tansferFile(folder,folderMap);
    }
 catch (    Exception e) {
      log.error(e,e);
    }
  }
  File srcMdmXsdFolder=getWorkspacePath().append(ExchangeFileNameToReferenceTask.MDM_CONNECTION + IPath.SEPARATOR + ""String_Node_Str"").toFile();
  File tarMdmXsdFolder=getWorkspacePath().append(ERepositoryObjectType.getFolderName(ERepositoryObjectType.METADATA_MDMCONNECTION) + IPath.SEPARATOR + ""String_Node_Str"").toFile();
  FilesUtils.copyFolder(srcMdmXsdFolder,tarMdmXsdFolder,true,null,null,true,null);
  File mdmConnectionFolder=new File(ResourceManager.getMDMConnectionFolder().getRawLocationURI());
  final String[] metadataFileExtentionNames={""String_Node_Str""};
  UpdateMDMConnectionXSDPathTask.doUpdate(true,true,mdmConnectionFolder,metadataFileExtentionNames);
  ArrayList<File> fileList=new ArrayList<File>();
  FilesUtils.getAllFilesFromFolder(mdmConnectionFolder,fileList,new FilenameFilter(){
    public boolean accept(    File dir,    String name){
      if (name.endsWith(""String_Node_Str"")) {
        return true;
      }
      return false;
    }
  }
);
  for (  File file : fileList) {
    Connection connection=PrvResourceFileHelper.getInstance().findProvider(WorkspaceUtils.fileToIFile(file));
    connection.eResource().unload();
    EObjectHelper.resolveObject(connection);
  }
  File tdqMetadataFile=getWorkspacePath().append(OLD_MEATADATA_FOLDER_NAME).toFile();
  if (tdqMetadataFile.exists()) {
    FileUtils.deleteDirectory(tdqMetadataFile);
  }
  File fileAnalysis=getWorkspacePath().append(EResourceConstant.ANALYSIS.getPath()).toFile();
  File fileRule=getWorkspacePath().append(EResourceConstant.RULES.getPath()).toFile();
  try {
    String[] anaFileExtentionNames={FactoriesUtil.ANA};
    String[] rulesFileEctentionNames={FactoriesUtil.DQRULE};
    result&=FilesUtils.migrateFolder(fileAnalysis,anaFileExtentionNames,this.getReplaceStringMap(),log) && FilesUtils.migrateFolder(fileRule,rulesFileEctentionNames,this.getReplaceStringMap(),log);
  }
 catch (  Exception e) {
    result=false;
    log.error(e,e);
  }
  fillConnectionNameLabel();
  return result;
}",0.993599646877069
138112,"/** 
 * DOC bZhou Comment method ""createNewItemFile"".
 * @param file
 */
private void createNewItemFile(File file){
  ModelElement modelElement=getModelElement(file);
  if (modelElement != null) {
    boolean needUpdateFlag=!modelElement.eIsProxy();
    if (needUpdateFlag) {
      IFile iFile=WorkspaceUtils.fileToIFile(file);
      IFolder parentFolder=(IFolder)iFile.getParent();
      AElementPersistance writer=ElementWriterFactory.getInstance().create(modelElement);
      writer.create(modelElement,parentFolder,true);
    }
    URI uri=EObjectHelper.getURI(modelElement);
    if (uri != null) {
      replaceMap.put(file.getName(),uri.lastSegment());
      if (needUpdateFlag && uri.isPlatform()) {
        IPath filePath=new Path(uri.toPlatformString(false));
        IFile needUpdateFile=ResourceManager.getRoot().getFile(filePath);
        newFileList.add(needUpdateFile.getLocation().toFile());
      }
    }
  }
}","/** 
 * DOC bZhou Comment method ""createNewItemFile"".
 * @param file
 */
private void createNewItemFile(File file){
  ModelElement modelElement=getModelElement(file);
  if (modelElement != null) {
    boolean needUpdateFlag=!modelElement.eIsProxy();
    if (needUpdateFlag) {
      IFile iFile=WorkspaceUtils.fileToIFile(file);
      IFolder parentFolder=(IFolder)iFile.getParent();
      Resource oldRes=modelElement.eResource();
      List<Resource> needSaves=getReferenceResources(oldRes);
      AElementPersistance writer=ElementWriterFactory.getInstance().create(modelElement);
      writer.create(modelElement,parentFolder,true);
      EMFUtil.changeUri(oldRes,EObjectHelper.getURI(modelElement));
      for (      Resource toSave : needSaves) {
        EMFSharedResources.getInstance().saveResource(toSave);
      }
    }
  }
}",0.6863636363636364
138113,"@Override protected boolean doExecute() throws Exception {
  newFileList=new ArrayList<File>();
  replaceMap=new HashMap<String,String>();
  ArrayList<File> fileList=getNeedUpdateFiles();
  for (  File file : fileList) {
    createNewItemFile(file);
    deleteOldItemFile(file);
  }
  updateConnectionFile();
  updateFile();
  return true;
}","@Override protected boolean doExecute() throws Exception {
  ArrayList<File> fileList=getNeedUpdateFiles();
  for (  File file : fileList) {
    createNewItemFile(file);
    deleteOldItemFile(file);
  }
  updateConnectionFile();
  return true;
}",0.8361774744027304
138114,"/** 
 * DOC bZhou Comment method ""addConnectionFileToUpdate"".
 */
private void updateConnectionFile(){
  File rawDir=getWorkspacePath().append(EResourceConstant.METADATA.getPath()).toFile();
  ArrayList<File> fileList=new ArrayList<File>();
  if (rawDir.exists()) {
    getAllFilesFromFolder(rawDir,fileList,new FilenameFilter(){
      public boolean accept(      File dir,      String name){
        return name.endsWith(FactoriesUtil.ITEM_EXTENSION);
      }
    }
);
  }
  for (  File file : fileList) {
    IFile iFile=WorkspaceUtils.fileToIFile(file);
    Property property=PropertyHelper.getProperty(iFile);
    if (property != null) {
      Item item=property.getItem();
      EResourceConstant type=EResourceConstant.getTypedConstant(item);
      if (type == EResourceConstant.DB_CONNECTIONS) {
        DatabaseConnectionItem dbItem=(DatabaseConnectionItem)item;
        DatabaseConnection connection=(DatabaseConnection)dbItem.getConnection();
        String otherParameter=ConnectionHelper.getOtherParameter(connection);
        if (!StringUtils.isBlank(otherParameter)) {
          connection.setUiSchema(otherParameter);
          EMFSharedResources.getInstance().saveResource(connection.eResource());
        }
      }
    }
  }
  newFileList.addAll(fileList);
}","/** 
 * DOC bZhou Comment method ""addConnectionFileToUpdate"".
 */
private void updateConnectionFile(){
  File rawDir=getWorkspacePath().append(EResourceConstant.METADATA.getPath()).toFile();
  ArrayList<File> fileList=new ArrayList<File>();
  if (rawDir.exists()) {
    getAllFilesFromFolder(rawDir,fileList,new FilenameFilter(){
      public boolean accept(      File dir,      String name){
        return name.endsWith(FactoriesUtil.ITEM_EXTENSION);
      }
    }
);
  }
  for (  File file : fileList) {
    IFile iFile=WorkspaceUtils.fileToIFile(file);
    Property property=PropertyHelper.getProperty(iFile);
    if (property != null) {
      Item item=property.getItem();
      EResourceConstant type=EResourceConstant.getTypedConstant(item);
      if (type == EResourceConstant.DB_CONNECTIONS) {
        DatabaseConnectionItem dbItem=(DatabaseConnectionItem)item;
        DatabaseConnection connection=(DatabaseConnection)dbItem.getConnection();
        String otherParameter=ConnectionHelper.getOtherParameter(connection);
        if (!StringUtils.isBlank(otherParameter)) {
          connection.setUiSchema(otherParameter);
          EMFSharedResources.getInstance().saveResource(connection.eResource());
        }
      }
    }
  }
}",0.9872915011914216
138115,"/** 
 * @param outputFolder
 * @throws DataprofilerCoreException
 */
public void saveAnalysis() throws DataprofilerCoreException {
  this.analysis.setName(this.analysis.getName().replace(""String_Node_Str"",""String_Node_Str""));
  for (  Domain domain : this.analysis.getParameters().getDataFilter()) {
    domain.setName(this.analysis.getName());
  }
  IRepositoryViewObject reposObject=null;
  Connection tdProvider=null;
  correlationAnalysisHandler.clearAnalysis();
  columnSetMultiIndicator.getAnalyzedColumns().clear();
  Analysis analysis=correlationAnalysisHandler.getAnalysis();
  analysis.getParameters().setExecutionLanguage(ExecutionLanguage.get(execLang));
  correlationAnalysisHandler.setStringDataFilter(dataFilterComp.getDataFilterString());
  List<RepositoryNode> repositoryNodeList=treeViewer.getColumnSetMultiValueList();
  if (repositoryNodeList != null && repositoryNodeList.size() != 0) {
    reposObject=repositoryNodeList.get(0).getObject();
    tdProvider=((ConnectionItem)reposObject.getProperty().getItem()).getConnection();
    analysis.getContext().setConnection(tdProvider);
    List<TdColumn> columnLst=new ArrayList<TdColumn>();
    for (    RepositoryNode repNode : repositoryNodeList) {
      columnLst.add((TdColumn)((MetadataColumnRepositoryObject)repNode.getObject()).getTdColumn());
    }
    columnSetMultiIndicator.getAnalyzedColumns().addAll(columnLst);
    correlationAnalysisHandler.addIndicator(columnLst,columnSetMultiIndicator);
  }
 else {
    tdProvider=(Connection)analysis.getContext().getConnection();
    if (tdProvider != null && tdProvider.getSupplierDependency().size() > 0) {
      tdProvider.getSupplierDependency().get(0).getClient().remove(analysis);
      analysis.getContext().setConnection(null);
      analysis.getResults().getIndicators().clear();
    }
    ColumnsetFactory columnsetFactory=ColumnsetFactory.eINSTANCE;
    ColumnSetMultiValueIndicator columnSetMultiValueIndicator=null;
    if (ColumnsetPackage.eINSTANCE.getCountAvgNullIndicator() == columnSetMultiIndicator.eClass()) {
      columnSetMultiValueIndicator=columnsetFactory.createCountAvgNullIndicator();
    }
    if (ColumnsetPackage.eINSTANCE.getMinMaxDateIndicator() == columnSetMultiIndicator.eClass()) {
      columnSetMultiValueIndicator=columnsetFactory.createMinMaxDateIndicator();
    }
    if (ColumnsetPackage.eINSTANCE.getWeakCorrelationIndicator() == columnSetMultiIndicator.eClass()) {
      columnSetMultiValueIndicator=columnsetFactory.createWeakCorrelationIndicator();
    }
    fillSimpleIndicators(columnSetMultiValueIndicator);
    analysis.getResults().getIndicators().add(columnSetMultiValueIndicator);
    analysis.getClientDependency().clear();
  }
  String urlString=analysis.eResource() != null ? analysis.eResource().getURI().toFileString() : PluginConstant.EMPTY_STRING;
  this.updateAnalysisClientDependency();
  ReturnCode saved=new ReturnCode(false);
  IEditorInput editorInput=this.getEditorInput();
  if (editorInput instanceof AnalysisItemEditorInput) {
    AnalysisItemEditorInput analysisInput=(AnalysisItemEditorInput)editorInput;
    TDQAnalysisItem tdqAnalysisItem=analysisInput.getTDQAnalysisItem();
    tdqAnalysisItem.getProperty().setLabel(analysis.getName());
    this.nameText.setText(analysis.getName());
    saved=ElementWriterFactory.getInstance().createAnalysisWrite().save(tdqAnalysisItem);
  }
  if (saved.isOk()) {
    RepositoryNode node=RepositoryNodeHelper.recursiveFind(tdProvider);
    if (node != null) {
      ElementWriterFactory.getInstance().createDataProviderWriter().save(node.getObject().getProperty().getItem());
    }
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + urlString + ""String_Node_Str"");
    }
  }
 else {
    throw new DataprofilerCoreException(DefaultMessagesImpl.getString(""String_Node_Str"",analysis.getName(),urlString,saved.getMessage()));
  }
  treeViewer.setDirty(false);
  dataFilterComp.setDirty(false);
}","/** 
 * @param outputFolder
 * @throws DataprofilerCoreException
 */
public void saveAnalysis() throws DataprofilerCoreException {
  this.analysis.setName(this.analysis.getName().replace(""String_Node_Str"",""String_Node_Str""));
  for (  Domain domain : this.analysis.getParameters().getDataFilter()) {
    domain.setName(this.analysis.getName());
  }
  IRepositoryViewObject reposObject=null;
  Connection tdProvider=null;
  correlationAnalysisHandler.clearAnalysis();
  columnSetMultiIndicator.getAnalyzedColumns().clear();
  Analysis analysis=correlationAnalysisHandler.getAnalysis();
  analysis.getParameters().setExecutionLanguage(ExecutionLanguage.get(execLang));
  correlationAnalysisHandler.setStringDataFilter(dataFilterComp.getDataFilterString());
  List<RepositoryNode> repositoryNodeList=treeViewer.getColumnSetMultiValueList();
  if (repositoryNodeList != null && repositoryNodeList.size() != 0) {
    reposObject=repositoryNodeList.get(0).getObject();
    tdProvider=((ConnectionItem)reposObject.getProperty().getItem()).getConnection();
    analysis.getContext().setConnection(tdProvider);
    List<TdColumn> columnLst=new ArrayList<TdColumn>();
    for (    RepositoryNode repNode : repositoryNodeList) {
      columnLst.add((TdColumn)((MetadataColumnRepositoryObject)repNode.getObject()).getTdColumn());
    }
    columnSetMultiIndicator.getAnalyzedColumns().addAll(columnLst);
    correlationAnalysisHandler.addIndicator(columnLst,columnSetMultiIndicator);
  }
 else {
    tdProvider=(Connection)analysis.getContext().getConnection();
    if (tdProvider != null && tdProvider.getSupplierDependency().size() > 0) {
      tdProvider.getSupplierDependency().get(0).getClient().remove(analysis);
      analysis.getContext().setConnection(null);
      analysis.getResults().getIndicators().clear();
    }
    ColumnsetFactory columnsetFactory=ColumnsetFactory.eINSTANCE;
    ColumnSetMultiValueIndicator columnSetMultiValueIndicator=null;
    if (ColumnsetPackage.eINSTANCE.getCountAvgNullIndicator() == columnSetMultiIndicator.eClass()) {
      columnSetMultiValueIndicator=columnsetFactory.createCountAvgNullIndicator();
    }
    if (ColumnsetPackage.eINSTANCE.getMinMaxDateIndicator() == columnSetMultiIndicator.eClass()) {
      columnSetMultiValueIndicator=columnsetFactory.createMinMaxDateIndicator();
    }
    if (ColumnsetPackage.eINSTANCE.getWeakCorrelationIndicator() == columnSetMultiIndicator.eClass()) {
      columnSetMultiValueIndicator=columnsetFactory.createWeakCorrelationIndicator();
    }
    fillSimpleIndicators(columnSetMultiValueIndicator);
    analysis.getResults().getIndicators().add(columnSetMultiValueIndicator);
    analysis.getClientDependency().clear();
  }
  String urlString=analysis.eResource() != null ? (analysis.eResource().getURI().isFile() ? analysis.eResource().getURI().toFileString() : analysis.eResource().getURI().toString()) : PluginConstant.EMPTY_STRING;
  this.updateAnalysisClientDependency();
  ReturnCode saved=new ReturnCode(false);
  IEditorInput editorInput=this.getEditorInput();
  if (editorInput instanceof AnalysisItemEditorInput) {
    AnalysisItemEditorInput analysisInput=(AnalysisItemEditorInput)editorInput;
    TDQAnalysisItem tdqAnalysisItem=analysisInput.getTDQAnalysisItem();
    tdqAnalysisItem.getProperty().setLabel(analysis.getName());
    this.nameText.setText(analysis.getName());
    saved=ElementWriterFactory.getInstance().createAnalysisWrite().save(tdqAnalysisItem);
  }
  if (saved.isOk()) {
    RepositoryNode node=RepositoryNodeHelper.recursiveFind(tdProvider);
    if (node != null) {
      ElementWriterFactory.getInstance().createDataProviderWriter().save(node.getObject().getProperty().getItem());
    }
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + urlString + ""String_Node_Str"");
    }
  }
 else {
    throw new DataprofilerCoreException(DefaultMessagesImpl.getString(""String_Node_Str"",analysis.getName(),urlString,saved.getMessage()));
  }
  treeViewer.setDirty(false);
  dataFilterComp.setDirty(false);
}",0.9887019834295756
138116,"/** 
 * @param outputFolder
 * @throws DataprofilerCoreException
 */
public void saveAnalysis() throws DataprofilerCoreException {
  IRepositoryViewObject reposObject=null;
  analysisHandler.clearAnalysis();
  ModelElementIndicator[] modelElementIndicators=this.getCurrentModelElementIndicators();
  Connection tdProvider=null;
  Analysis analysis=analysisHandler.getAnalysis();
  this.analysis.setName(this.analysis.getName().replace(""String_Node_Str"",""String_Node_Str""));
  for (  Domain domain : this.analysis.getParameters().getDataFilter()) {
    domain.setName(this.analysis.getName());
  }
  analysis.getParameters().setExecutionLanguage(ExecutionLanguage.get(execLang));
  if (ExecutionLanguage.JAVA.equals(ExecutionLanguage.get(execLang))) {
    analysis.getParameters().setMaxNumberRows(Integer.parseInt(maxNumText.getText()));
    analysis.getParameters().setStoreData(drillDownCheck.getSelection());
  }
  if (modelElementIndicators != null && modelElementIndicators.length != 0) {
    tdProvider=ModelElementIndicatorHelper.getTdDataProvider(modelElementIndicators[0]);
    if (tdProvider.eIsProxy()) {
      tdProvider=(Connection)EObjectHelper.resolveObject(tdProvider);
    }
    analysis.getContext().setConnection(tdProvider);
    for (    ModelElementIndicator modelElementIndicator : modelElementIndicators) {
      reposObject=modelElementIndicator.getModelElementRepositoryNode().getObject();
      ModelElement modelEle=null;
      if (reposObject instanceof MetadataColumnRepositoryObject) {
        modelEle=((MetadataColumnRepositoryObject)reposObject).getTdColumn();
      }
 else       if (reposObject instanceof MetadataXmlElementTypeRepositoryObject) {
        modelEle=((MetadataXmlElementTypeRepositoryObject)reposObject).getTdXmlElementType();
      }
      analysisHandler.addIndicator(modelEle,modelElementIndicator.getIndicators());
      DataminingType type=MetadataHelper.getDataminingType(modelEle);
      if (type == null) {
        type=MetadataHelper.getDefaultDataminingType(modelElementIndicator.getJavaType());
      }
      analysisHandler.setDatamingType(type.getLiteral(),modelEle);
    }
  }
 else {
    tdProvider=(Connection)analysis.getContext().getConnection();
    if (tdProvider != null && tdProvider.getSupplierDependency().size() > 0) {
      if (tdProvider.getSupplierDependency().size() > 0) {
        tdProvider.getSupplierDependency().get(0).getClient().remove(analysis);
      }
      analysis.getContext().setConnection(null);
      analysis.getClientDependency().clear();
    }
  }
  analysisHandler.setStringDataFilter(dataFilterComp.getDataFilterString());
  String urlString=analysis.eResource() != null ? analysis.eResource().getURI().toFileString() : PluginConstant.EMPTY_STRING;
  this.updateAnalysisClientDependency();
  ReturnCode saved=new ReturnCode(false);
  IEditorInput editorInput=this.getEditorInput();
  if (editorInput instanceof AnalysisItemEditorInput) {
    AnalysisItemEditorInput analysisInput=(AnalysisItemEditorInput)editorInput;
    TDQAnalysisItem tdqAnalysisItem=analysisInput.getTDQAnalysisItem();
    tdqAnalysisItem.getProperty().setLabel(analysisHandler.getName());
    this.nameText.setText(analysisHandler.getName());
    saved=ElementWriterFactory.getInstance().createAnalysisWrite().save(tdqAnalysisItem);
  }
  if (saved.isOk()) {
    RepositoryNode node=RepositoryNodeHelper.recursiveFind(tdProvider);
    if (node != null) {
      ElementWriterFactory.getInstance().createDataProviderWriter().save(node.getObject().getProperty().getItem());
    }
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + urlString + ""String_Node_Str"");
    }
  }
 else {
    throw new DataprofilerCoreException(DefaultMessagesImpl.getString(""String_Node_Str"",analysis.getName(),urlString,saved.getMessage()));
  }
  treeViewer.setDirty(false);
  dataFilterComp.setDirty(false);
}","/** 
 * @param outputFolder
 * @throws DataprofilerCoreException
 */
public void saveAnalysis() throws DataprofilerCoreException {
  IRepositoryViewObject reposObject=null;
  analysisHandler.clearAnalysis();
  ModelElementIndicator[] modelElementIndicators=this.getCurrentModelElementIndicators();
  Connection tdProvider=null;
  Analysis analysis=analysisHandler.getAnalysis();
  this.analysis.setName(this.analysis.getName().replace(""String_Node_Str"",""String_Node_Str""));
  for (  Domain domain : this.analysis.getParameters().getDataFilter()) {
    domain.setName(this.analysis.getName());
  }
  analysis.getParameters().setExecutionLanguage(ExecutionLanguage.get(execLang));
  if (ExecutionLanguage.JAVA.equals(ExecutionLanguage.get(execLang))) {
    analysis.getParameters().setMaxNumberRows(Integer.parseInt(maxNumText.getText()));
    analysis.getParameters().setStoreData(drillDownCheck.getSelection());
  }
  if (modelElementIndicators != null && modelElementIndicators.length != 0) {
    tdProvider=ModelElementIndicatorHelper.getTdDataProvider(modelElementIndicators[0]);
    if (tdProvider.eIsProxy()) {
      tdProvider=(Connection)EObjectHelper.resolveObject(tdProvider);
    }
    analysis.getContext().setConnection(tdProvider);
    for (    ModelElementIndicator modelElementIndicator : modelElementIndicators) {
      reposObject=modelElementIndicator.getModelElementRepositoryNode().getObject();
      ModelElement modelEle=null;
      if (reposObject instanceof MetadataColumnRepositoryObject) {
        modelEle=((MetadataColumnRepositoryObject)reposObject).getTdColumn();
      }
 else       if (reposObject instanceof MetadataXmlElementTypeRepositoryObject) {
        modelEle=((MetadataXmlElementTypeRepositoryObject)reposObject).getTdXmlElementType();
      }
      analysisHandler.addIndicator(modelEle,modelElementIndicator.getIndicators());
      DataminingType type=MetadataHelper.getDataminingType(modelEle);
      if (type == null) {
        type=MetadataHelper.getDefaultDataminingType(modelElementIndicator.getJavaType());
      }
      analysisHandler.setDatamingType(type.getLiteral(),modelEle);
    }
  }
 else {
    tdProvider=(Connection)analysis.getContext().getConnection();
    if (tdProvider != null && tdProvider.getSupplierDependency().size() > 0) {
      if (tdProvider.getSupplierDependency().size() > 0) {
        tdProvider.getSupplierDependency().get(0).getClient().remove(analysis);
      }
      analysis.getContext().setConnection(null);
      analysis.getClientDependency().clear();
    }
  }
  analysisHandler.setStringDataFilter(dataFilterComp.getDataFilterString());
  String urlString=analysis.eResource() != null ? (analysis.eResource().getURI().isFile() ? analysis.eResource().getURI().toFileString() : analysis.eResource().getURI().toString()) : PluginConstant.EMPTY_STRING;
  this.updateAnalysisClientDependency();
  ReturnCode saved=new ReturnCode(false);
  IEditorInput editorInput=this.getEditorInput();
  if (editorInput instanceof AnalysisItemEditorInput) {
    AnalysisItemEditorInput analysisInput=(AnalysisItemEditorInput)editorInput;
    TDQAnalysisItem tdqAnalysisItem=analysisInput.getTDQAnalysisItem();
    tdqAnalysisItem.getProperty().setLabel(analysisHandler.getName());
    this.nameText.setText(analysisHandler.getName());
    saved=ElementWriterFactory.getInstance().createAnalysisWrite().save(tdqAnalysisItem);
  }
  if (saved.isOk()) {
    RepositoryNode node=RepositoryNodeHelper.recursiveFind(tdProvider);
    if (node != null) {
      ElementWriterFactory.getInstance().createDataProviderWriter().save(node.getObject().getProperty().getItem());
    }
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + urlString + ""String_Node_Str"");
    }
  }
 else {
    throw new DataprofilerCoreException(DefaultMessagesImpl.getString(""String_Node_Str"",analysis.getName(),urlString,saved.getMessage()));
  }
  treeViewer.setDirty(false);
  dataFilterComp.setDirty(false);
}",0.9885145482388974
138117,"/** 
 * @param outputFolder
 * @throws DataprofilerCoreException
 */
public void saveAnalysis() throws DataprofilerCoreException {
  columnSetAnalysisHandler.setName(columnSetAnalysisHandler.getName().replace(""String_Node_Str"",""String_Node_Str""));
  for (  Domain domain : this.analysis.getParameters().getDataFilter()) {
    domain.setName(this.analysis.getName());
  }
  IRepositoryViewObject reposObject=null;
  columnSetAnalysisHandler.clearAnalysis();
  simpleStatIndicator.getAnalyzedColumns().clear();
  allMatchIndicator.getAnalyzedColumns().clear();
  Analysis analysis=columnSetAnalysisHandler.getAnalysis();
  analysis.getParameters().setExecutionLanguage(ExecutionLanguage.get(execLang));
  columnSetAnalysisHandler.setStringDataFilter(dataFilterComp.getDataFilterString());
  List<IRepositoryNode> repositoryNodes=treeViewer.getColumnSetMultiValueList();
  Connection tdProvider=null;
  if (repositoryNodes != null && repositoryNodes.size() != 0) {
    ConnectionItem item=(ConnectionItem)repositoryNodes.get(0).getObject().getProperty().getItem();
    tdProvider=item.getConnection();
    if (tdProvider.eIsProxy()) {
      tdProvider=(Connection)EObjectHelper.resolveObject(tdProvider);
    }
    analysis.getContext().setConnection(tdProvider);
    List<ModelElement> columnList=new ArrayList<ModelElement>();
    for (    IRepositoryNode rd : repositoryNodes) {
      reposObject=rd.getObject();
      if (rd instanceof MDMXmlElementRepNode) {
        columnList.add((ModelElement)((MetadataXmlElementTypeRepositoryObject)reposObject).getTdXmlElementType());
      }
 else {
        columnList.add((ModelElement)((MetadataColumnRepositoryObject)reposObject).getTdColumn());
      }
    }
    simpleStatIndicator.getAnalyzedColumns().addAll(columnList);
    columnSetAnalysisHandler.addIndicator(columnList,simpleStatIndicator);
    allMatchIndicator.getCompositeRegexMatchingIndicators().clear();
    ModelElementIndicator[] modelElementIndicator=treeViewer.getModelElementIndicator();
    if (modelElementIndicator != null) {
      for (      ModelElementIndicator modelElementInd : modelElementIndicator) {
        Indicator[] inds=modelElementInd.getPatternIndicators();
        for (        Indicator ind : inds) {
          if (ind instanceof RegexpMatchingIndicator) {
            IRepositoryViewObject obj=modelElementInd.getModelElementRepositoryNode().getObject();
            ModelElement analyzedElt=obj instanceof MetadataColumnRepositoryObject ? ((MetadataColumnRepositoryObject)obj).getTdColumn() : ((MetadataXmlElementTypeRepositoryObject)obj).getModelElement();
            ind.setAnalyzedElement(analyzedElt);
            allMatchIndicator.getCompositeRegexMatchingIndicators().add((RegexpMatchingIndicator)ind);
          }
        }
      }
    }
    if (allMatchIndicator.getCompositeRegexMatchingIndicators().size() > 0) {
      allMatchIndicator.getAnalyzedColumns().addAll(columnList);
      columnSetAnalysisHandler.addIndicator(columnList,allMatchIndicator);
    }
  }
 else {
    tdProvider=(Connection)analysis.getContext().getConnection();
    if (tdProvider != null && tdProvider.getSupplierDependency().size() > 0) {
      tdProvider.getSupplierDependency().get(0).getClient().remove(analysis);
      analysis.getContext().setConnection(null);
      analysis.getClientDependency().clear();
    }
  }
  String urlString=analysis.eResource() != null ? analysis.eResource().getURI().toFileString() : PluginConstant.EMPTY_STRING;
  this.updateAnalysisClientDependency();
  ReturnCode saved=new ReturnCode(false);
  IEditorInput editorInput=this.getEditorInput();
  if (editorInput instanceof AnalysisItemEditorInput) {
    AnalysisItemEditorInput analysisInput=(AnalysisItemEditorInput)editorInput;
    TDQAnalysisItem tdqAnalysisItem=analysisInput.getTDQAnalysisItem();
    tdqAnalysisItem.getProperty().setLabel(columnSetAnalysisHandler.getName());
    this.nameText.setText(columnSetAnalysisHandler.getName());
    saved=ElementWriterFactory.getInstance().createAnalysisWrite().save(tdqAnalysisItem);
  }
  if (saved.isOk()) {
    RepositoryNode node=RepositoryNodeHelper.recursiveFind(tdProvider);
    if (node != null) {
      ElementWriterFactory.getInstance().createDataProviderWriter().save(node.getObject().getProperty().getItem());
    }
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + urlString + ""String_Node_Str"");
    }
  }
 else {
    throw new DataprofilerCoreException(DefaultMessagesImpl.getString(""String_Node_Str"",analysis.getName(),urlString,saved.getMessage()));
  }
  treeViewer.setDirty(false);
  dataFilterComp.setDirty(false);
}","/** 
 * @param outputFolder
 * @throws DataprofilerCoreException
 */
public void saveAnalysis() throws DataprofilerCoreException {
  columnSetAnalysisHandler.setName(columnSetAnalysisHandler.getName().replace(""String_Node_Str"",""String_Node_Str""));
  for (  Domain domain : this.analysis.getParameters().getDataFilter()) {
    domain.setName(this.analysis.getName());
  }
  IRepositoryViewObject reposObject=null;
  columnSetAnalysisHandler.clearAnalysis();
  simpleStatIndicator.getAnalyzedColumns().clear();
  allMatchIndicator.getAnalyzedColumns().clear();
  Analysis analysis=columnSetAnalysisHandler.getAnalysis();
  analysis.getParameters().setExecutionLanguage(ExecutionLanguage.get(execLang));
  columnSetAnalysisHandler.setStringDataFilter(dataFilterComp.getDataFilterString());
  List<IRepositoryNode> repositoryNodes=treeViewer.getColumnSetMultiValueList();
  Connection tdProvider=null;
  if (repositoryNodes != null && repositoryNodes.size() != 0) {
    ConnectionItem item=(ConnectionItem)repositoryNodes.get(0).getObject().getProperty().getItem();
    tdProvider=item.getConnection();
    if (tdProvider.eIsProxy()) {
      tdProvider=(Connection)EObjectHelper.resolveObject(tdProvider);
    }
    analysis.getContext().setConnection(tdProvider);
    List<ModelElement> columnList=new ArrayList<ModelElement>();
    for (    IRepositoryNode rd : repositoryNodes) {
      reposObject=rd.getObject();
      if (rd instanceof MDMXmlElementRepNode) {
        columnList.add((ModelElement)((MetadataXmlElementTypeRepositoryObject)reposObject).getTdXmlElementType());
      }
 else {
        columnList.add((ModelElement)((MetadataColumnRepositoryObject)reposObject).getTdColumn());
      }
    }
    simpleStatIndicator.getAnalyzedColumns().addAll(columnList);
    columnSetAnalysisHandler.addIndicator(columnList,simpleStatIndicator);
    allMatchIndicator.getCompositeRegexMatchingIndicators().clear();
    ModelElementIndicator[] modelElementIndicator=treeViewer.getModelElementIndicator();
    if (modelElementIndicator != null) {
      for (      ModelElementIndicator modelElementInd : modelElementIndicator) {
        Indicator[] inds=modelElementInd.getPatternIndicators();
        for (        Indicator ind : inds) {
          if (ind instanceof RegexpMatchingIndicator) {
            IRepositoryViewObject obj=modelElementInd.getModelElementRepositoryNode().getObject();
            ModelElement analyzedElt=obj instanceof MetadataColumnRepositoryObject ? ((MetadataColumnRepositoryObject)obj).getTdColumn() : ((MetadataXmlElementTypeRepositoryObject)obj).getModelElement();
            ind.setAnalyzedElement(analyzedElt);
            allMatchIndicator.getCompositeRegexMatchingIndicators().add((RegexpMatchingIndicator)ind);
          }
        }
      }
    }
    if (allMatchIndicator.getCompositeRegexMatchingIndicators().size() > 0) {
      allMatchIndicator.getAnalyzedColumns().addAll(columnList);
      columnSetAnalysisHandler.addIndicator(columnList,allMatchIndicator);
    }
  }
 else {
    tdProvider=(Connection)analysis.getContext().getConnection();
    if (tdProvider != null && tdProvider.getSupplierDependency().size() > 0) {
      tdProvider.getSupplierDependency().get(0).getClient().remove(analysis);
      analysis.getContext().setConnection(null);
      analysis.getClientDependency().clear();
    }
  }
  String urlString=analysis.eResource() != null ? (analysis.eResource().getURI().isFile() ? analysis.eResource().getURI().toFileString() : analysis.eResource().getURI().toString()) : PluginConstant.EMPTY_STRING;
  this.updateAnalysisClientDependency();
  ReturnCode saved=new ReturnCode(false);
  IEditorInput editorInput=this.getEditorInput();
  if (editorInput instanceof AnalysisItemEditorInput) {
    AnalysisItemEditorInput analysisInput=(AnalysisItemEditorInput)editorInput;
    TDQAnalysisItem tdqAnalysisItem=analysisInput.getTDQAnalysisItem();
    tdqAnalysisItem.getProperty().setLabel(columnSetAnalysisHandler.getName());
    this.nameText.setText(columnSetAnalysisHandler.getName());
    saved=ElementWriterFactory.getInstance().createAnalysisWrite().save(tdqAnalysisItem);
  }
  if (saved.isOk()) {
    RepositoryNode node=RepositoryNodeHelper.recursiveFind(tdProvider);
    if (node != null) {
      ElementWriterFactory.getInstance().createDataProviderWriter().save(node.getObject().getProperty().getItem());
    }
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + urlString + ""String_Node_Str"");
    }
  }
 else {
    throw new DataprofilerCoreException(DefaultMessagesImpl.getString(""String_Node_Str"",analysis.getName(),urlString,saved.getMessage()));
  }
  treeViewer.setDirty(false);
  dataFilterComp.setDirty(false);
}",0.990343347639485
138118,"@Override public void saveAnalysis() throws DataprofilerCoreException {
  List<DQRule> oldDqRules=getDqRules(analysis);
  analysis.setName(analysis.getName().replace(""String_Node_Str"",""String_Node_Str""));
  for (  Domain domain : this.analysis.getParameters().getDataFilter()) {
    domain.setName(this.analysis.getName());
  }
  IRepositoryViewObject reposObject=null;
  analysisHandler.clearAnalysis();
  TableIndicator[] tableIndicators=treeViewer.getTableIndicator();
  Connection tdProvider=null;
  Analysis analysis=analysisHandler.getAnalysis();
  analysis.getParameters().setExecutionLanguage(ExecutionLanguage.get(execLang));
  if (tableIndicators != null && tableIndicators.length != 0) {
    tdProvider=ConnectionHelper.getDataProvider(tableIndicators[0].getColumnSet());
    if (tdProvider.eIsProxy()) {
      tdProvider=(Connection)EObjectHelper.resolveObject(tdProvider);
    }
    analysis.getContext().setConnection(tdProvider);
    for (    TableIndicator tableIndicator : tableIndicators) {
      analysisHandler.addIndicator(tableIndicator.getColumnSet(),tableIndicator.getIndicators());
    }
  }
 else {
    tdProvider=(Connection)analysis.getContext().getConnection();
    if (tdProvider != null && tdProvider.getSupplierDependency().size() > 0) {
      tdProvider.getSupplierDependency().get(0).getClient().remove(analysis);
      analysis.getContext().setConnection(null);
      analysis.getClientDependency().clear();
    }
  }
  analysisHandler.setStringDataFilter(dataFilterComp.getDataFilterString());
  String urlString=analysis.eResource() != null ? analysis.eResource().getURI().toFileString() : PluginConstant.EMPTY_STRING;
  this.updateAnalysisClientDependency();
  ReturnCode saved=new ReturnCode(false);
  IEditorInput editorInput=this.getEditorInput();
  if (editorInput instanceof AnalysisItemEditorInput) {
    AnalysisItemEditorInput analysisInput=(AnalysisItemEditorInput)editorInput;
    TDQAnalysisItem tdqAnalysisItem=analysisInput.getTDQAnalysisItem();
    tdqAnalysisItem.getProperty().setLabel(analysisHandler.getName());
    this.nameText.setText(analysisHandler.getName());
    saved=ElementWriterFactory.getInstance().createAnalysisWrite().save(tdqAnalysisItem);
  }
  if (saved.isOk()) {
    RepositoryNode node=RepositoryNodeHelper.recursiveFind(tdProvider);
    if (node != null) {
      ElementWriterFactory.getInstance().createDataProviderWriter().save(node.getObject().getProperty().getItem());
    }
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + urlString + ""String_Node_Str"");
    }
    this.updateDQRuleDependency(oldDqRules);
  }
 else {
    throw new DataprofilerCoreException(DefaultMessagesImpl.getString(""String_Node_Str"",analysis.getName(),urlString,saved.getMessage()));
  }
  treeViewer.setDirty(false);
  dataFilterComp.setDirty(false);
}","@Override public void saveAnalysis() throws DataprofilerCoreException {
  List<DQRule> oldDqRules=getDqRules(analysis);
  analysis.setName(analysis.getName().replace(""String_Node_Str"",""String_Node_Str""));
  for (  Domain domain : this.analysis.getParameters().getDataFilter()) {
    domain.setName(this.analysis.getName());
  }
  IRepositoryViewObject reposObject=null;
  analysisHandler.clearAnalysis();
  TableIndicator[] tableIndicators=treeViewer.getTableIndicator();
  Connection tdProvider=null;
  Analysis analysis=analysisHandler.getAnalysis();
  analysis.getParameters().setExecutionLanguage(ExecutionLanguage.get(execLang));
  if (tableIndicators != null && tableIndicators.length != 0) {
    tdProvider=ConnectionHelper.getDataProvider(tableIndicators[0].getColumnSet());
    if (tdProvider.eIsProxy()) {
      tdProvider=(Connection)EObjectHelper.resolveObject(tdProvider);
    }
    analysis.getContext().setConnection(tdProvider);
    for (    TableIndicator tableIndicator : tableIndicators) {
      analysisHandler.addIndicator(tableIndicator.getColumnSet(),tableIndicator.getIndicators());
    }
  }
 else {
    tdProvider=(Connection)analysis.getContext().getConnection();
    if (tdProvider != null && tdProvider.getSupplierDependency().size() > 0) {
      tdProvider.getSupplierDependency().get(0).getClient().remove(analysis);
      analysis.getContext().setConnection(null);
      analysis.getClientDependency().clear();
    }
  }
  analysisHandler.setStringDataFilter(dataFilterComp.getDataFilterString());
  String urlString=analysis.eResource() != null ? (analysis.eResource().getURI().isFile() ? analysis.eResource().getURI().toFileString() : analysis.eResource().getURI().toString()) : PluginConstant.EMPTY_STRING;
  this.updateAnalysisClientDependency();
  ReturnCode saved=new ReturnCode(false);
  IEditorInput editorInput=this.getEditorInput();
  if (editorInput instanceof AnalysisItemEditorInput) {
    AnalysisItemEditorInput analysisInput=(AnalysisItemEditorInput)editorInput;
    TDQAnalysisItem tdqAnalysisItem=analysisInput.getTDQAnalysisItem();
    tdqAnalysisItem.getProperty().setLabel(analysisHandler.getName());
    this.nameText.setText(analysisHandler.getName());
    saved=ElementWriterFactory.getInstance().createAnalysisWrite().save(tdqAnalysisItem);
  }
  if (saved.isOk()) {
    RepositoryNode node=RepositoryNodeHelper.recursiveFind(tdProvider);
    if (node != null) {
      ElementWriterFactory.getInstance().createDataProviderWriter().save(node.getObject().getProperty().getItem());
    }
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + urlString + ""String_Node_Str"");
    }
    this.updateDQRuleDependency(oldDqRules);
  }
 else {
    throw new DataprofilerCoreException(DefaultMessagesImpl.getString(""String_Node_Str"",analysis.getName(),urlString,saved.getMessage()));
  }
  treeViewer.setDirty(false);
  dataFilterComp.setDirty(false);
}",0.9843205574912892
138119,"/** 
 * DOC klliu Comment method ""expandImageComposite"".
 * @param expand
 */
protected void expandImageComposite(boolean expand){
  GridData formData=new GridData(GridData.FILL_HORIZONTAL);
  if (expand) {
    formData.heightHint=30;
  }
 else {
    formData.heightHint=0;
  }
  formData.horizontalAlignment=GridData.BEGINNING;
  imgCom.setLayoutData(formData);
  imgCom.getParent().layout();
}","/** 
 * DOC klliu Comment method ""expandImageComposite"".
 * @param expand
 */
protected void expandImageComposite(){
  GridData formData=new GridData(GridData.FILL_HORIZONTAL);
  formData.heightHint=30;
  formData.horizontalAlignment=GridData.BEGINNING;
  imgCom.setLayoutData(formData);
  imgCom.getParent().layout();
}",0.8951048951048951
138120,"protected void createPatternTestCom(final Composite parent){
  ScrolledComposite scrolledComposite=new ScrolledComposite(parent,SWT.V_SCROLL | SWT.H_SCROLL);
  scrolledComposite.setExpandHorizontal(true);
  scrolledComposite.setExpandVertical(true);
  final Composite mainComposite=new Composite(scrolledComposite,SWT.NULL);
  scrolledComposite.setContent(mainComposite);
  GridLayout blay=new GridLayout();
  mainComposite.setLayout(blay);
  final Composite coboCom=new Composite(mainComposite,SWT.NULL);
  imgCom=new Composite(mainComposite,SWT.NULL);
  final Composite textCom=new Composite(mainComposite,SWT.NULL);
  final Composite buttonsCom=new Composite(mainComposite,SWT.FILL | SWT.NULL);
  mainComposite.addListener(SWT.Resize,new Listener(){
    public void handleEvent(    Event event){
      GridData formData=new GridData(GridData.FILL_HORIZONTAL);
      formData.heightHint=105;
      textCom.setLayoutData(formData);
      buttonsCom.setLayoutData(formData);
    }
  }
);
  GridLayout layout=new GridLayout();
  layout.numColumns=5;
  coboCom.setLayout(layout);
  GridData data=new GridData(GridData.FILL_BOTH);
  buttonJava=new Button(coboCom,SWT.RADIO);
  buttonJava.setText(ExecutionLanguage.JAVA.getLiteral());
  data=new GridData(GridData.FILL_HORIZONTAL);
  data.widthHint=20;
  buttonJava.setLayoutData(data);
  buttonJava.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      isJavaEngine=true;
      sqlButton.setEnabled(false);
      dbCombo.setEnabled(false);
      functionNameText.setEnabled(false);
    }
  }
);
  buttonSql=new Button(coboCom,SWT.RADIO);
  data=new GridData(GridData.FILL_HORIZONTAL);
  data.widthHint=90;
  buttonSql.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  buttonSql.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      isJavaEngine=false;
      sqlButton.setEnabled(true);
      dbCombo.setEnabled(true);
      functionNameText.setEnabled(true);
    }
  }
);
  buttonSql.setSelection(true);
  buttonSql.setEnabled(!isJavaEngine);
  buttonSql.setLayoutData(data);
  dbCombo=new CCombo(coboCom,SWT.DROP_DOWN | SWT.BORDER);
  dbCombo.setEditable(false);
  data=new GridData(GridData.FILL_HORIZONTAL);
  data.widthHint=60;
  dbCombo.setLayoutData(data);
  functionLabel=new Label(coboCom,SWT.NONE);
  functionLabel.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  functionNameText=new Text(coboCom,SWT.BORDER);
  functionNameText.setText(PluginConstant.EMPTY_STRING);
  GridData functionNameTextGD=new GridData(SWT.LEFT,SWT.DEFAULT,false,false,1,1);
  functionNameTextGD.widthHint=0;
  functionNameText.setLayoutData(functionNameTextGD);
  functionLabel.setLayoutData(functionNameTextGD);
  functionNameText.setVisible(false);
  functionLabel.setVisible(false);
  GridData comData=new GridData(GridData.FILL_HORIZONTAL);
  comData.heightHint=37;
  coboCom.setLayoutData(comData);
  layout=new GridLayout();
  layout.numColumns=2;
  imgCom.setLayout(layout);
  emoticonLabel=new Label(imgCom,SWT.NONE);
  GridData gd=new GridData(GridData.FILL_HORIZONTAL);
  gd.heightHint=18;
  gd.widthHint=18;
  emoticonLabel.setLayoutData(gd);
  gd=new GridData();
  gd.heightHint=18;
  gd.widthHint=65;
  gd.horizontalAlignment=GridData.BEGINNING;
  resultLabel=new Label(imgCom,SWT.NONE);
  resultLabel.setLayoutData(gd);
  GridData imgData=new GridData(GridData.FILL_HORIZONTAL);
  imgData.heightHint=0;
  imgData.horizontalAlignment=GridData.BEGINNING;
  imgCom.setLayoutData(imgData);
  layout=new GridLayout();
  layout.numColumns=2;
  textCom.setLayout(layout);
  data=new GridData(GridData.FILL_HORIZONTAL);
  data.horizontalAlignment=GridData.BEGINNING;
  textAreaLabel=new Label(textCom,SWT.NONE);
  textAreaLabel.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  testText=new Text(textCom,SWT.BORDER | SWT.MULTI | SWT.WRAP| SWT.V_SCROLL);
  data=new GridData(GridData.FILL_HORIZONTAL);
  data.heightHint=40;
  testText.setLayoutData(data);
  testText.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
  GridData textAreaLabelGD=new GridData(SWT.LEFT,SWT.CENTER,false,false,1,1);
  textAreaLabel.setLayoutData(textAreaLabelGD);
  regularLabel=new Label(textCom,SWT.NULL);
  regularLabel.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  regularLabel.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
  GridData regularLabelGD=new GridData(SWT.LEFT,SWT.CENTER,false,false,1,1);
  regularLabel.setLayoutData(regularLabelGD);
  this.regularText=new Text(textCom,SWT.BORDER | SWT.MULTI | SWT.WRAP| SWT.V_SCROLL);
  this.regularText.setLayoutData(data);
  regularText.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
  regularText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      boolean enabled=(!regularText.getText().equals(PluginConstant.EMPTY_STRING)) && (CheckValueUtils.isPatternValue(regularText.getText()));
      if (pattern != null) {
        saveButton.setEnabled(enabled);
      }
      createPatternButton.setEnabled(enabled);
    }
  }
);
  GridData textData=new GridData(GridData.FILL_BOTH);
  textData.heightHint=400;
  textCom.setLayoutData(textData);
  GridLayout llayout=new GridLayout();
  llayout.numColumns=4;
  buttonsCom.setLayout(llayout);
  data=new GridData(GridData.FILL_HORIZONTAL);
  data.heightHint=25;
  data.widthHint=92;
  sqlButton=new Button(buttonsCom,SWT.PUSH);
  sqlButton.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  sqlButton.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
  sqlButton.setLayoutData(data);
  sqlButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      openSQLEditor();
    }
  }
);
  createPatternButton=new Button(buttonsCom,SWT.PUSH);
  createPatternButton.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  createPatternButton.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
  data=new GridData(GridData.FILL_HORIZONTAL);
  data.heightHint=25;
  data.widthHint=92;
  createPatternButton.setLayoutData(data);
  createPatternButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      String language=null;
      if (regularExpression != null) {
        language=regularExpression.getExpression().getLanguage();
      }
 else {
        DbmsLanguage dbmsLanguage=getDbmsLanguage();
        if (dbmsLanguage != null) {
          dbmsLanguage.setFunctionName(getFunctionName());
          language=dbmsLanguage.getDbmsName();
        }
      }
      new CreatePatternAction(ResourceManager.getPatternFolder(),ExpressionType.REGEXP,regularText.getText(),language).run();
    }
  }
);
  createPatternButton.setEnabled(false);
  saveButton=new Button(buttonsCom,SWT.PUSH);
  saveButton.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  saveButton.setEnabled(false);
  saveButton.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
  data=new GridData(GridData.FILL_HORIZONTAL);
  data.heightHint=25;
  data.widthHint=92;
  saveButton.setLayoutData(data);
  saveButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      savePattern();
    }
  }
);
  testButton=new Button(buttonsCom,SWT.PUSH);
  data=new GridData(GridData.FILL_HORIZONTAL);
  testButton.setLayoutData(data);
  testButton.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  testButton.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
  testButton.setLayoutData(data);
  testButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      testRegularText();
      expandImageComposite(true);
    }
  }
);
  data=new GridData(GridData.FILL_HORIZONTAL);
  buttonsCom.setLayoutData(data);
  scrolledComposite.setMinSize(mainComposite.computeSize(SWT.DEFAULT,SWT.DEFAULT));
  mainComposite.layout();
  activateContext();
  fillComboData();
}","protected void createPatternTestCom(final Composite parent){
  ScrolledComposite scrolledComposite=new ScrolledComposite(parent,SWT.V_SCROLL | SWT.H_SCROLL);
  scrolledComposite.setExpandHorizontal(true);
  scrolledComposite.setExpandVertical(true);
  final Composite mainComposite=new Composite(scrolledComposite,SWT.NULL);
  scrolledComposite.setContent(mainComposite);
  GridLayout blay=new GridLayout();
  mainComposite.setLayout(blay);
  final Composite coboCom=new Composite(mainComposite,SWT.NULL);
  imgCom=new Composite(mainComposite,SWT.NULL);
  final Composite textCom=new Composite(mainComposite,SWT.NULL);
  final Composite buttonsCom=new Composite(mainComposite,SWT.FILL | SWT.NULL);
  mainComposite.addListener(SWT.Resize,new Listener(){
    public void handleEvent(    Event event){
      GridData formData=new GridData(GridData.FILL_HORIZONTAL);
      formData.heightHint=105;
      textCom.setLayoutData(formData);
      buttonsCom.setLayoutData(formData);
    }
  }
);
  GridLayout layout=new GridLayout();
  layout.numColumns=5;
  coboCom.setLayout(layout);
  GridData data=new GridData(GridData.FILL_BOTH);
  buttonJava=new Button(coboCom,SWT.RADIO);
  buttonJava.setText(ExecutionLanguage.JAVA.getLiteral());
  data=new GridData(GridData.FILL_HORIZONTAL);
  data.widthHint=20;
  buttonJava.setLayoutData(data);
  buttonJava.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      isJavaEngine=true;
      sqlButton.setEnabled(false);
      dbCombo.setEnabled(false);
      functionNameText.setEnabled(false);
    }
  }
);
  buttonSql=new Button(coboCom,SWT.RADIO);
  data=new GridData(GridData.FILL_HORIZONTAL);
  data.widthHint=90;
  buttonSql.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  buttonSql.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      isJavaEngine=false;
      sqlButton.setEnabled(true);
      dbCombo.setEnabled(true);
      functionNameText.setEnabled(true);
    }
  }
);
  buttonSql.setSelection(true);
  buttonSql.setEnabled(!isJavaEngine);
  buttonSql.setLayoutData(data);
  dbCombo=new CCombo(coboCom,SWT.DROP_DOWN | SWT.BORDER);
  dbCombo.setEditable(false);
  data=new GridData(GridData.FILL_HORIZONTAL);
  data.widthHint=60;
  dbCombo.setLayoutData(data);
  functionLabel=new Label(coboCom,SWT.NONE);
  functionLabel.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  functionNameText=new Text(coboCom,SWT.BORDER);
  functionNameText.setText(PluginConstant.EMPTY_STRING);
  GridData functionNameTextGD=new GridData(SWT.LEFT,SWT.DEFAULT,false,false,1,1);
  functionNameTextGD.widthHint=0;
  functionNameText.setLayoutData(functionNameTextGD);
  functionLabel.setLayoutData(functionNameTextGD);
  functionNameText.setVisible(false);
  functionLabel.setVisible(false);
  GridData comData=new GridData(GridData.FILL_HORIZONTAL);
  comData.heightHint=37;
  coboCom.setLayoutData(comData);
  layout=new GridLayout();
  layout.numColumns=2;
  imgCom.setLayout(layout);
  emoticonLabel=new Label(imgCom,SWT.NONE);
  GridData gd=new GridData(GridData.FILL_HORIZONTAL);
  gd.heightHint=18;
  gd.widthHint=18;
  emoticonLabel.setLayoutData(gd);
  gd=new GridData();
  gd.heightHint=18;
  gd.widthHint=65;
  gd.horizontalAlignment=GridData.BEGINNING;
  resultLabel=new Label(imgCom,SWT.NONE);
  resultLabel.setLayoutData(gd);
  GridData imgData=new GridData(GridData.FILL_HORIZONTAL);
  imgData.heightHint=0;
  imgData.horizontalAlignment=GridData.BEGINNING;
  imgCom.setLayoutData(imgData);
  layout=new GridLayout();
  layout.numColumns=2;
  textCom.setLayout(layout);
  data=new GridData(GridData.FILL_HORIZONTAL);
  data.horizontalAlignment=GridData.BEGINNING;
  textAreaLabel=new Label(textCom,SWT.NONE);
  textAreaLabel.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  testText=new Text(textCom,SWT.BORDER | SWT.MULTI | SWT.WRAP| SWT.V_SCROLL);
  data=new GridData(GridData.FILL_HORIZONTAL);
  data.heightHint=40;
  testText.setLayoutData(data);
  testText.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
  GridData textAreaLabelGD=new GridData(SWT.LEFT,SWT.CENTER,false,false,1,1);
  textAreaLabel.setLayoutData(textAreaLabelGD);
  regularLabel=new Label(textCom,SWT.NULL);
  regularLabel.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  regularLabel.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
  GridData regularLabelGD=new GridData(SWT.LEFT,SWT.CENTER,false,false,1,1);
  regularLabel.setLayoutData(regularLabelGD);
  this.regularText=new Text(textCom,SWT.BORDER | SWT.MULTI | SWT.WRAP| SWT.V_SCROLL);
  this.regularText.setLayoutData(data);
  regularText.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
  regularText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      boolean enabled=(!regularText.getText().equals(PluginConstant.EMPTY_STRING)) && (CheckValueUtils.isPatternValue(regularText.getText()));
      if (pattern != null) {
        saveButton.setEnabled(enabled);
      }
      createPatternButton.setEnabled(enabled);
    }
  }
);
  GridData textData=new GridData(GridData.FILL_BOTH);
  textData.heightHint=400;
  textCom.setLayoutData(textData);
  GridLayout llayout=new GridLayout();
  llayout.numColumns=4;
  buttonsCom.setLayout(llayout);
  data=new GridData(GridData.FILL_HORIZONTAL);
  data.heightHint=25;
  data.widthHint=92;
  sqlButton=new Button(buttonsCom,SWT.PUSH);
  sqlButton.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  sqlButton.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
  sqlButton.setLayoutData(data);
  sqlButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      openSQLEditor();
    }
  }
);
  createPatternButton=new Button(buttonsCom,SWT.PUSH);
  createPatternButton.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  createPatternButton.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
  data=new GridData(GridData.FILL_HORIZONTAL);
  data.heightHint=25;
  data.widthHint=92;
  createPatternButton.setLayoutData(data);
  createPatternButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      String language=null;
      if (regularExpression != null) {
        language=regularExpression.getExpression().getLanguage();
      }
 else {
        DbmsLanguage dbmsLanguage=getDbmsLanguage();
        if (dbmsLanguage != null) {
          dbmsLanguage.setFunctionName(getFunctionName());
          language=dbmsLanguage.getDbmsName();
        }
      }
      new CreatePatternAction(ResourceManager.getPatternFolder(),ExpressionType.REGEXP,regularText.getText(),language).run();
    }
  }
);
  createPatternButton.setEnabled(false);
  saveButton=new Button(buttonsCom,SWT.PUSH);
  saveButton.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  saveButton.setEnabled(false);
  saveButton.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
  data=new GridData(GridData.FILL_HORIZONTAL);
  data.heightHint=25;
  data.widthHint=92;
  saveButton.setLayoutData(data);
  saveButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      savePattern();
    }
  }
);
  testButton=new Button(buttonsCom,SWT.PUSH);
  data=new GridData(GridData.FILL_HORIZONTAL);
  testButton.setLayoutData(data);
  testButton.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  testButton.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
  testButton.setLayoutData(data);
  testButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      testRegularText();
    }
  }
);
  expandImageComposite();
  data=new GridData(GridData.FILL_HORIZONTAL);
  buttonsCom.setLayoutData(data);
  scrolledComposite.setMinSize(mainComposite.computeSize(SWT.DEFAULT,SWT.DEFAULT));
  mainComposite.layout();
  activateContext();
  fillComboData();
}",0.998391089108911
138121,"@Override public void run(){
  ISelection selection=this.getSelection();
  Object[] deleteElements=((IStructuredSelection)selection).toArray();
  if (DQRepositoryNode.isOnFilterring() && deleteElements.length != 0) {
    if (deleteElements[0] instanceof RepositoryNode) {
      setPreviousFilteredNode((RepositoryNode)deleteElements[0]);
    }
    for (    Object obj : deleteElements) {
      if (obj instanceof RepositoryNode) {
        RepositoryNode node=(RepositoryNode)obj;
        RepositoryNodeHelper.removeChildrenNodesWhenFiltering(node);
      }
    }
  }
  List deleteNodes=null;
  List<IRepositoryNode> shownNodes=null;
  List<IRepositoryNode> findAllRecycleBinNodes=null;
  if (DQRepositoryNode.isOnFilterring()) {
    deleteNodes=new ArrayList();
    Collections.addAll(deleteNodes,deleteElements);
    shownNodes=RepositoryNodeHelper.findAllChildrenNodes(deleteNodes);
    List<IRepositoryNode> recycleBinNodeFirstLevelChildren=((RepositoryNode)RepositoryNodeHelper.getRecycleBinRepNode()).getChildren();
    findAllRecycleBinNodes=RepositoryNodeHelper.findAllChildrenNodes(recycleBinNodeFirstLevelChildren);
  }
  for (  Object obj : deleteElements) {
    if (obj instanceof RepositoryNode) {
      RepositoryNode node=(RepositoryNode)obj;
      if (node instanceof ReportFileRepNode) {
        deleteReportFile((ReportFileRepNode)node);
        continue;
      }
      boolean isStateDeleted=RepositoryNodeHelper.isStateDeleted(node);
      if (!isStateDeleted) {
        excuteSuperRun(null);
        break;
      }
      if (DQRepositoryNode.isOnFilterring() && isStateDeleted) {
        for (        IRepositoryNode iRepositoryNode : findAllRecycleBinNodes) {
          if (node.equals(iRepositoryNode)) {
            node=(RepositoryNode)iRepositoryNode;
            shownNodes=RepositoryNodeHelper.findAllChildrenNodes(deleteNodes);
            break;
          }
        }
        if (!RepositoryNodeHelper.isEmptyRecycleBin(findAllRecycleBinNodes,shownNodes)) {
          break;
        }
      }
      boolean hasDependency=false;
      if (node.getType() == ENodeType.SIMPLE_FOLDER || node.getType() == ENodeType.SYSTEM_FOLDER) {
        List<IRepositoryNode> newLs=RepositoryNodeHelper.getRepositoryElementFromFolder(node,true);
        boolean haveSubNode=false;
        for (        IRepositoryNode subNode : newLs) {
          hasDependency=RepositoryNodeHelper.hasDependencyClients(subNode);
          if (!hasDependency || hasDependency && handleDependencies(subNode)) {
            excuteSuperRun((RepositoryNode)subNode);
          }
 else {
            haveSubNode=true;
          }
        }
        if (!haveSubNode) {
          excuteSuperRun(node);
        }
      }
 else {
        hasDependency=RepositoryNodeHelper.hasDependencyClients(node);
        if (!hasDependency || hasDependency && handleDependencies(node)) {
          excuteSuperRun((RepositoryNode)node);
        }
      }
    }
  }
  if (DQRepositoryNode.isOnFilterring() && 0 != deleteElements.length) {
    RepositoryNodeHelper.regainRecycleBinFilteredNode();
  }
  CorePlugin.getDefault().refreshWorkSpace();
  CorePlugin.getDefault().refreshDQView(RepositoryNodeHelper.getRecycleBinRepNode());
}","@Override public void run(){
  ISelection selection=this.getSelection();
  Object[] deleteElements=((IStructuredSelection)selection).toArray();
  if (DQRepositoryNode.isOnFilterring() && deleteElements.length != 0) {
    if (deleteElements[0] instanceof RepositoryNode) {
      setPreviousFilteredNode((RepositoryNode)deleteElements[0]);
    }
    for (    Object obj : deleteElements) {
      if (obj instanceof RepositoryNode) {
        RepositoryNode node=(RepositoryNode)obj;
        RepositoryNodeHelper.removeChildrenNodesWhenFiltering(node);
      }
    }
  }
  List deleteNodes=null;
  List<IRepositoryNode> shownNodes=null;
  List<IRepositoryNode> findAllRecycleBinNodes=null;
  if (DQRepositoryNode.isOnFilterring()) {
    deleteNodes=new ArrayList();
    Collections.addAll(deleteNodes,deleteElements);
    shownNodes=RepositoryNodeHelper.findAllChildrenNodes(deleteNodes);
    List<IRepositoryNode> recycleBinNodeFirstLevelChildren=((RepositoryNode)RepositoryNodeHelper.getRecycleBinRepNode()).getChildren();
    findAllRecycleBinNodes=RepositoryNodeHelper.findAllChildrenNodes(recycleBinNodeFirstLevelChildren);
  }
  HashSet<RepositoryNode> deleteElementsParents=new HashSet<RepositoryNode>();
  for (  Object obj : deleteElements) {
    if (obj instanceof RepositoryNode) {
      RepositoryNode parent=((RepositoryNode)obj).getParent();
      deleteElementsParents.add(parent);
    }
  }
  for (  Object obj : deleteElements) {
    if (obj instanceof RepositoryNode) {
      RepositoryNode node=(RepositoryNode)obj;
      if (node instanceof ReportFileRepNode) {
        deleteReportFile((ReportFileRepNode)node);
        continue;
      }
      boolean isStateDeleted=RepositoryNodeHelper.isStateDeleted(node);
      if (!isStateDeleted) {
        excuteSuperRun(null);
        break;
      }
      if (DQRepositoryNode.isOnFilterring() && isStateDeleted) {
        for (        IRepositoryNode iRepositoryNode : findAllRecycleBinNodes) {
          if (node.equals(iRepositoryNode)) {
            node=(RepositoryNode)iRepositoryNode;
            shownNodes=RepositoryNodeHelper.findAllChildrenNodes(deleteNodes);
            break;
          }
        }
        if (!RepositoryNodeHelper.isEmptyRecycleBin(findAllRecycleBinNodes,shownNodes)) {
          break;
        }
      }
      boolean hasDependency=false;
      if (node.getType() == ENodeType.SIMPLE_FOLDER || node.getType() == ENodeType.SYSTEM_FOLDER) {
        List<IRepositoryNode> newLs=RepositoryNodeHelper.getRepositoryElementFromFolder(node,true);
        boolean haveSubNode=false;
        for (        IRepositoryNode subNode : newLs) {
          hasDependency=RepositoryNodeHelper.hasDependencyClients(subNode);
          if (!hasDependency || hasDependency && handleDependencies(subNode)) {
            excuteSuperRun((RepositoryNode)subNode);
          }
 else {
            haveSubNode=true;
          }
        }
        if (!haveSubNode) {
          excuteSuperRun(node);
        }
      }
 else {
        hasDependency=RepositoryNodeHelper.hasDependencyClients(node);
        if (!hasDependency || hasDependency && handleDependencies(node)) {
          excuteSuperRun((RepositoryNode)node);
        }
      }
    }
  }
  for (  RepositoryNode repositoryNode : deleteElementsParents) {
    CorePlugin.getDefault().refreshDQView(repositoryNode);
  }
  if (DQRepositoryNode.isOnFilterring() && 0 != deleteElements.length) {
    RepositoryNodeHelper.regainRecycleBinFilteredNode();
  }
  CorePlugin.getDefault().refreshWorkSpace();
  CorePlugin.getDefault().refreshDQView(RepositoryNodeHelper.getRecycleBinRepNode());
}",0.8947291146674498
138122,"/** 
 * DOC qiongli :excute super method run().
 * @param currentNode:null for logical delete a selected element by UI.none-null for physical delete or logicaldelete dependecy.
 */
private void excuteSuperRun(RepositoryNode currentNode){
  this.currentNode=currentNode;
  if (currentNode != null) {
    deleteConnectionForSQL(currentNode);
  }
  super.setAvoidUnloadResources(true);
  IRepositoryNode node=getCurrentRepositoryNode();
  super.run();
  if (currentNode != null) {
    RepositoryNode parent=currentNode.getParent();
    if (parent != null && (parent.getType() == ENodeType.SIMPLE_FOLDER || parent.getLabel().equalsIgnoreCase(ERepositoryObjectType.RECYCLE_BIN.name().replaceAll(""String_Node_Str"",PluginConstant.SPACE_STRING)))) {
      parent.getChildren(true).remove(currentNode);
    }
  }
  if (null != node) {
    CorePlugin.getDefault().refreshDQView(node.getParent());
  }
}","/** 
 * DOC qiongli :excute super method run().
 * @param currentNode:null for logical delete a selected element by UI.none-null for physical delete or logicaldelete dependecy.
 */
private void excuteSuperRun(RepositoryNode currentNode){
  this.currentNode=currentNode;
  if (currentNode != null) {
    deleteConnectionForSQL(currentNode);
  }
  super.setAvoidUnloadResources(true);
  IRepositoryNode node=getCurrentRepositoryNode();
  super.run();
  if (currentNode != null) {
    RepositoryNode parent=currentNode.getParent();
    if (parent != null && (parent.getType() == ENodeType.SIMPLE_FOLDER || parent.getLabel().equalsIgnoreCase(ERepositoryObjectType.RECYCLE_BIN.name().replaceAll(""String_Node_Str"",PluginConstant.SPACE_STRING)))) {
      parent.getChildren(true).remove(currentNode);
    }
  }
}",0.948733058338244
138123,"@Override public void run(){
  ISelection selection=this.getSelection();
  Object[] deleteElements=((IStructuredSelection)selection).toArray();
  if (DQRepositoryNode.isOnFilterring() && deleteElements.length != 0) {
    if (deleteElements[0] instanceof RepositoryNode) {
      setPreviousFilteredNode((RepositoryNode)deleteElements[0]);
    }
    for (    Object obj : deleteElements) {
      if (obj instanceof RepositoryNode) {
        RepositoryNode node=(RepositoryNode)obj;
        RepositoryNodeHelper.removeChildrenNodesWhenFiltering(node);
      }
    }
  }
  List deleteNodes=null;
  List<IRepositoryNode> shownNodes=null;
  List<IRepositoryNode> findAllRecycleBinNodes=null;
  if (DQRepositoryNode.isOnFilterring()) {
    deleteNodes=new ArrayList();
    Collections.addAll(deleteNodes,deleteElements);
    shownNodes=RepositoryNodeHelper.findAllChildrenNodes(deleteNodes);
    List<IRepositoryNode> recycleBinNodeFirstLevelChildren=((RepositoryNode)RepositoryNodeHelper.getRecycleBinRepNode()).getChildren();
    findAllRecycleBinNodes=RepositoryNodeHelper.findAllChildrenNodes(recycleBinNodeFirstLevelChildren);
  }
  for (  Object obj : deleteElements) {
    if (obj instanceof RepositoryNode) {
      RepositoryNode node=(RepositoryNode)obj;
      if (node instanceof ReportFileRepNode) {
        deleteReportFile((ReportFileRepNode)node);
        continue;
      }
      boolean isStateDeleted=RepositoryNodeHelper.isStateDeleted(node);
      if (!isStateDeleted) {
        excuteSuperRun(null);
        break;
      }
      if (DQRepositoryNode.isOnFilterring() && isStateDeleted) {
        for (        IRepositoryNode iRepositoryNode : findAllRecycleBinNodes) {
          if (node.equals(iRepositoryNode)) {
            node=(RepositoryNode)iRepositoryNode;
            shownNodes=RepositoryNodeHelper.findAllChildrenNodes(deleteNodes);
            break;
          }
        }
        if (!RepositoryNodeHelper.isEmptyRecycleBin(findAllRecycleBinNodes,shownNodes)) {
          break;
        }
      }
      boolean hasDependency=false;
      if (node.getType() == ENodeType.SIMPLE_FOLDER || node.getType() == ENodeType.SYSTEM_FOLDER) {
        List<IRepositoryNode> newLs=RepositoryNodeHelper.getRepositoryElementFromFolder(node,true);
        boolean haveSubNode=false;
        for (        IRepositoryNode subNode : newLs) {
          hasDependency=RepositoryNodeHelper.hasDependencyClients(subNode);
          if (!hasDependency || hasDependency && handleDependencies(subNode)) {
            excuteSuperRun((RepositoryNode)subNode);
          }
 else {
            haveSubNode=true;
          }
        }
        if (!haveSubNode) {
          excuteSuperRun(node);
        }
      }
 else {
        hasDependency=RepositoryNodeHelper.hasDependencyClients(node);
        if (!hasDependency || hasDependency && handleDependencies(node)) {
          excuteSuperRun((RepositoryNode)node);
        }
      }
    }
  }
  if (DQRepositoryNode.isOnFilterring() && 0 != deleteElements.length) {
    RepositoryNodeHelper.regainRecycleBinFilteredNode();
  }
  CorePlugin.getDefault().refreshWorkSpace();
  CorePlugin.getDefault().refreshDQView(RepositoryNodeHelper.getRecycleBinRepNode());
}","@Override public void run(){
  ISelection selection=this.getSelection();
  Object[] deleteElements=((IStructuredSelection)selection).toArray();
  if (DQRepositoryNode.isOnFilterring() && deleteElements.length != 0) {
    if (deleteElements[0] instanceof RepositoryNode) {
      setPreviousFilteredNode((RepositoryNode)deleteElements[0]);
    }
    for (    Object obj : deleteElements) {
      if (obj instanceof RepositoryNode) {
        RepositoryNode node=(RepositoryNode)obj;
        RepositoryNodeHelper.removeChildrenNodesWhenFiltering(node);
      }
    }
  }
  List deleteNodes=null;
  List<IRepositoryNode> shownNodes=null;
  List<IRepositoryNode> findAllRecycleBinNodes=null;
  if (DQRepositoryNode.isOnFilterring()) {
    deleteNodes=new ArrayList();
    Collections.addAll(deleteNodes,deleteElements);
    shownNodes=RepositoryNodeHelper.findAllChildrenNodes(deleteNodes);
    List<IRepositoryNode> recycleBinNodeFirstLevelChildren=((RepositoryNode)RepositoryNodeHelper.getRecycleBinRepNode()).getChildren();
    findAllRecycleBinNodes=RepositoryNodeHelper.findAllChildrenNodes(recycleBinNodeFirstLevelChildren);
  }
  HashSet<RepositoryNode> deleteElementsParents=new HashSet<RepositoryNode>();
  for (  Object obj : deleteElements) {
    if (obj instanceof RepositoryNode) {
      RepositoryNode parent=((RepositoryNode)obj).getParent();
      deleteElementsParents.add(parent);
    }
  }
  for (  Object obj : deleteElements) {
    if (obj instanceof RepositoryNode) {
      RepositoryNode node=(RepositoryNode)obj;
      if (node instanceof ReportFileRepNode) {
        deleteReportFile((ReportFileRepNode)node);
        continue;
      }
      boolean isStateDeleted=RepositoryNodeHelper.isStateDeleted(node);
      if (!isStateDeleted) {
        excuteSuperRun(null);
        break;
      }
      if (DQRepositoryNode.isOnFilterring() && isStateDeleted) {
        for (        IRepositoryNode iRepositoryNode : findAllRecycleBinNodes) {
          if (node.equals(iRepositoryNode)) {
            node=(RepositoryNode)iRepositoryNode;
            shownNodes=RepositoryNodeHelper.findAllChildrenNodes(deleteNodes);
            break;
          }
        }
        if (!RepositoryNodeHelper.isEmptyRecycleBin(findAllRecycleBinNodes,shownNodes)) {
          break;
        }
      }
      boolean hasDependency=false;
      if (node.getType() == ENodeType.SIMPLE_FOLDER || node.getType() == ENodeType.SYSTEM_FOLDER) {
        List<IRepositoryNode> newLs=RepositoryNodeHelper.getRepositoryElementFromFolder(node,true);
        boolean haveSubNode=false;
        for (        IRepositoryNode subNode : newLs) {
          hasDependency=RepositoryNodeHelper.hasDependencyClients(subNode);
          if (!hasDependency || hasDependency && handleDependencies(subNode)) {
            excuteSuperRun((RepositoryNode)subNode);
          }
 else {
            haveSubNode=true;
          }
        }
        if (!haveSubNode) {
          excuteSuperRun(node);
        }
      }
 else {
        hasDependency=RepositoryNodeHelper.hasDependencyClients(node);
        if (!hasDependency || hasDependency && handleDependencies(node)) {
          excuteSuperRun((RepositoryNode)node);
        }
      }
    }
  }
  for (  RepositoryNode repositoryNode : deleteElementsParents) {
    CorePlugin.getDefault().refreshDQView(repositoryNode);
  }
  if (DQRepositoryNode.isOnFilterring() && 0 != deleteElements.length) {
    RepositoryNodeHelper.regainRecycleBinFilteredNode();
  }
  CorePlugin.getDefault().refreshWorkSpace();
  CorePlugin.getDefault().refreshDQView(RepositoryNodeHelper.getRecycleBinRepNode());
}",0.8947291146674498
138124,"/** 
 * DOC qiongli :excute super method run().
 * @param currentNode:null for logical delete a selected element by UI.none-null for physical delete or logicaldelete dependecy.
 */
private void excuteSuperRun(RepositoryNode currentNode){
  this.currentNode=currentNode;
  if (currentNode != null) {
    deleteConnectionForSQL(currentNode);
  }
  super.setAvoidUnloadResources(true);
  IRepositoryNode node=getCurrentRepositoryNode();
  super.run();
  if (currentNode != null) {
    RepositoryNode parent=currentNode.getParent();
    if (parent != null && (parent.getType() == ENodeType.SIMPLE_FOLDER || parent.getLabel().equalsIgnoreCase(ERepositoryObjectType.RECYCLE_BIN.name().replaceAll(""String_Node_Str"",PluginConstant.SPACE_STRING)))) {
      parent.getChildren(true).remove(currentNode);
    }
  }
  if (null != node) {
    CorePlugin.getDefault().refreshDQView(node.getParent());
  }
}","/** 
 * DOC qiongli :excute super method run().
 * @param currentNode:null for logical delete a selected element by UI.none-null for physical delete or logicaldelete dependecy.
 */
private void excuteSuperRun(RepositoryNode currentNode){
  this.currentNode=currentNode;
  if (currentNode != null) {
    deleteConnectionForSQL(currentNode);
  }
  super.setAvoidUnloadResources(true);
  IRepositoryNode node=getCurrentRepositoryNode();
  super.run();
  if (currentNode != null) {
    RepositoryNode parent=currentNode.getParent();
    if (parent != null && (parent.getType() == ENodeType.SIMPLE_FOLDER || parent.getLabel().equalsIgnoreCase(ERepositoryObjectType.RECYCLE_BIN.name().replaceAll(""String_Node_Str"",PluginConstant.SPACE_STRING)))) {
      parent.getChildren(true).remove(currentNode);
    }
  }
}",0.948733058338244
138125,"/** 
 * DOC klliu ColumnFilterAction constructor comment.
 * @param node
 */
public ColumnFilterAction(IRepositoryNode node){
  this();
  this.node=node;
  if (node.getObject() instanceof TdTableRepositoryObject) {
    TdTableRepositoryObject tableObject=(TdTableRepositoryObject)node.getObject();
    this.namedColumnSet=tableObject.getTdTable();
  }
 else   if (node.getObject() instanceof TdViewRepositoryObject) {
    TdViewRepositoryObject viewObject=(TdViewRepositoryObject)node.getObject();
    this.namedColumnSet=viewObject.getTdView();
  }
}","/** 
 * DOC klliu ColumnFilterAction constructor comment.
 * @param node
 */
public ColumnFilterAction(IRepositoryNode node){
  this();
  this.node=node;
  if (node instanceof DBTableRepNode) {
    this.namedColumnSet=((DBTableRepNode)node).getTdTable();
  }
 else   if (node instanceof DBViewRepNode) {
    this.namedColumnSet=((DBViewRepNode)node).getTdView();
  }
}",0.4243743199129489
138126,"@Override public void run(){
  ColumnFilterWizard wizard=new ColumnFilterWizard(this.namedColumnSet);
  WizardDialog dialog=new WizardDialog(null,wizard);
  dialog.setPageSize(WIDTH,HEIGHT);
  dialog.open();
  CorePlugin.getDefault().refreshDQView(node);
}","@Override public void run(){
  ColumnFilterWizard wizard=new ColumnFilterWizard(this.namedColumnSet);
  WizardDialog dialog=new WizardDialog(null,wizard);
  dialog.setPageSize(WIDTH,HEIGHT);
  if (dialog.open() == Dialog.OK) {
    CorePlugin.getDefault().refreshDQView(node);
  }
}",0.9459962756052142
138127,"/** 
 * DOC Administrator Comment method ""initializedConnection"". for 6560
 * @param indicators
 */
private void initializedConnection(ModelElementIndicator[] indicators){
  Analysis analysis=masterPage.getAnalysisHandler().getAnalysis();
  DataManager connection=analysis.getContext().getConnection();
  Connection tdDataProvider=null;
  boolean enableWhereClauseFlag=true;
  boolean enableExecuteLanguageFlag=true;
  String execLang=analysis.getParameters().getExecutionLanguage().getLiteral();
  if (execLang != null && ExecutionLanguage.JAVA.getLiteral().equals(execLang)) {
    enableExecuteLanguageFlag=false;
  }
  if (indicators != null && indicators.length > 0) {
    if (connection == null) {
      tdDataProvider=ModelElementIndicatorHelper.getTdDataProvider(indicators[0]);
      analysis.getContext().setConnection(tdDataProvider);
      if (tdDataProvider != null && masterPage.getExecCombo() != null) {
        if (ConnectionUtils.isDelimitedFileConnection(tdDataProvider)) {
          masterPage.setWhereClauseDisabled();
          masterPage.changeExecuteLanguageToJava(true);
          enableWhereClauseFlag=false;
          enableExecuteLanguageFlag=false;
        }
 else         if (ConnectionUtils.isMdmConnection(tdDataProvider)) {
          masterPage.setWhereClauseDisabled();
          enableWhereClauseFlag=false;
        }
      }
    }
  }
  if (enableWhereClauseFlag) {
    masterPage.setWhereClauseEnable();
  }
  if (enableExecuteLanguageFlag) {
    masterPage.changeExecuteLanguageToSql(true);
  }
}","/** 
 * DOC Administrator Comment method ""initializedConnection"". for 6560
 * @param indicators
 */
private void initializedConnection(ModelElementIndicator[] indicators){
  Analysis analysis=masterPage.getAnalysisHandler().getAnalysis();
  DataManager connection=analysis.getContext().getConnection();
  boolean enableWhereClauseFlag=true;
  boolean enableExecuteLanguageFlag=true;
  if (indicators != null && indicators.length > 0) {
    if (connection == null) {
      connection=ModelElementIndicatorHelper.getTdDataProvider(indicators[0]);
      analysis.getContext().setConnection(connection);
    }
    if (connection != null && masterPage.getExecCombo() != null) {
      if (ConnectionUtils.isDelimitedFileConnection((DataProvider)connection)) {
        masterPage.setWhereClauseDisabled();
        masterPage.changeExecuteLanguageToJava(true);
        enableWhereClauseFlag=false;
        enableExecuteLanguageFlag=false;
      }
 else       if (ConnectionUtils.isMdmConnection(connection)) {
        masterPage.setWhereClauseDisabled();
        enableWhereClauseFlag=false;
      }
    }
  }
  String execLang=analysis.getParameters().getExecutionLanguage().getLiteral();
  if (execLang != null && ExecutionLanguage.JAVA.getLiteral().equals(execLang) && (ConnectionUtils.isDelimitedFileConnection((DataProvider)connection) || ConnectionUtils.isMdmConnection(connection))) {
    enableExecuteLanguageFlag=false;
  }
  if (enableWhereClauseFlag) {
    masterPage.setWhereClauseEnable();
  }
  if (enableExecuteLanguageFlag) {
    masterPage.changeExecuteLanguageToSql(true);
  }
}",0.4275641025641025
138128,"/** 
 * DOC Administrator Comment method ""initializedConnection"". for 6560
 * @param indicators
 */
private void initializedConnection(ModelElementIndicator[] indicators){
  Analysis analysis=masterPage.getAnalysisHandler().getAnalysis();
  DataManager connection=analysis.getContext().getConnection();
  Connection tdDataProvider=null;
  boolean enableWhereClauseFlag=true;
  boolean enableExecuteLanguageFlag=true;
  if (indicators != null && indicators.length > 0) {
    if (connection == null) {
      tdDataProvider=ModelElementIndicatorHelper.getTdDataProvider(indicators[0]);
      connection=tdDataProvider;
      if (tdDataProvider != null && masterPage.getExecCombo() != null) {
        if (ConnectionUtils.isDelimitedFileConnection(tdDataProvider)) {
          masterPage.setWhereClauseDisabled();
          masterPage.changeExecuteLanguageToJava(true);
          enableWhereClauseFlag=false;
          enableExecuteLanguageFlag=false;
        }
 else         if (ConnectionUtils.isMdmConnection(tdDataProvider)) {
          masterPage.setWhereClauseDisabled();
          enableWhereClauseFlag=false;
        }
      }
    }
  }
  if (enableWhereClauseFlag) {
    masterPage.setWhereClauseEnable();
  }
  if (enableExecuteLanguageFlag) {
    masterPage.changeExecuteLanguageToSql(true);
  }
}","/** 
 * DOC Administrator Comment method ""initializedConnection"". for 6560
 * @param indicators
 */
private void initializedConnection(ModelElementIndicator[] indicators){
  Analysis analysis=masterPage.getAnalysisHandler().getAnalysis();
  DataManager connection=analysis.getContext().getConnection();
  Connection tdDataProvider=null;
  boolean enableWhereClauseFlag=true;
  boolean enableExecuteLanguageFlag=true;
  CCombo execCombo=masterPage.getExecCombo();
  String execLang=execCombo.getText();
  if (ExecutionLanguage.JAVA.getLiteral().equals(execLang)) {
    enableExecuteLanguageFlag=false;
  }
  if (indicators != null && indicators.length > 0) {
    if (connection == null) {
      tdDataProvider=ModelElementIndicatorHelper.getTdDataProvider(indicators[0]);
      connection=tdDataProvider;
      if (tdDataProvider != null && masterPage.getExecCombo() != null) {
        if (ConnectionUtils.isDelimitedFileConnection(tdDataProvider)) {
          masterPage.setWhereClauseDisabled();
          masterPage.changeExecuteLanguageToJava(true);
          enableWhereClauseFlag=false;
          enableExecuteLanguageFlag=false;
        }
 else         if (ConnectionUtils.isMdmConnection(tdDataProvider)) {
          masterPage.setWhereClauseDisabled();
          enableWhereClauseFlag=false;
        }
      }
    }
  }
  if (enableWhereClauseFlag) {
    masterPage.setWhereClauseEnable();
  }
  if (enableExecuteLanguageFlag) {
    masterPage.changeExecuteLanguageToSql(true);
  }
}",0.9327129563350036
138129,"/** 
 * DOC bZhou Comment method ""update"".
 * @param desFile
 * @param isCovered
 * @throws IOException
 * @throws CoreException
 * @throws Exception
 */
private void update(File desFile,boolean isCovered) throws IOException, CoreException {
  String curProjectLabel=ResourceManager.getRootProjectName();
  if (!StringUtils.equals(projectName,curProjectLabel)) {
    String content=FileUtils.readFileToString(desFile,""String_Node_Str"");
    content=StringUtils.replace(content,""String_Node_Str"" + projectName + ""String_Node_Str"",""String_Node_Str"" + curProjectLabel + ""String_Node_Str"");
    FileUtils.writeStringToFile(desFile,content,""String_Node_Str"");
  }
  if (desFile.exists()) {
    IFile desIFile=ResourceService.file2IFile(desFile);
    if (isCovered && FactoriesUtil.isEmfFile(desIFile.getFileExtension())) {
      URI uri=URI.createPlatformResourceURI(desIFile.getFullPath().toString(),false);
      EMFSharedResources.getInstance().reloadResource(uri);
    }
    String fileExtension=desIFile.getFileExtension();
    if (fileExtension.equals(FactoriesUtil.PROPERTIES_EXTENSION)) {
      Property property=PropertyHelper.getProperty(desIFile);
      if (property != null) {
        User user=ReponsitoryContextBridge.getUser();
        if (user != null && property.getAuthor() == null) {
          property.setAuthor(user);
          EMFSharedResources.getInstance().saveResource(property.eResource());
        }
        if (log.isDebugEnabled()) {
          log.debug(""String_Node_Str"" + desIFile + ""String_Node_Str""+ property.getLabel());
        }
      }
 else {
        log.error(""String_Node_Str"" + desIFile.getFullPath().toString());
      }
    }
  }
}","/** 
 * DOC bZhou Comment method ""update"".
 * @param desFile
 * @param isCovered
 * @throws IOException
 * @throws CoreException
 * @throws Exception
 */
private void update(File desFile,boolean isCovered) throws IOException, CoreException {
  String curProjectLabel=ResourceManager.getRootProjectName();
  if (desFile.exists()) {
    IFile desIFile=ResourceService.file2IFile(desFile);
    String fileExt=desIFile.getFileExtension();
    if (FactoriesUtil.isEmfFile(fileExt)) {
      if (!StringUtils.equals(projectName,curProjectLabel)) {
        String content=FileUtils.readFileToString(desFile,""String_Node_Str"");
        content=StringUtils.replace(content,""String_Node_Str"" + projectName + ""String_Node_Str"",""String_Node_Str"" + curProjectLabel + ""String_Node_Str"");
        FileUtils.writeStringToFile(desFile,content,""String_Node_Str"");
      }
      if (isCovered) {
        URI uri=URI.createPlatformResourceURI(desIFile.getFullPath().toString(),false);
        EMFSharedResources.getInstance().reloadResource(uri);
      }
    }
    if (fileExt.equals(FactoriesUtil.PROPERTIES_EXTENSION)) {
      Property property=PropertyHelper.getProperty(desIFile);
      if (property != null) {
        User user=ReponsitoryContextBridge.getUser();
        if (user != null && property.getAuthor() == null) {
          property.setAuthor(user);
          EMFSharedResources.getInstance().saveResource(property.eResource());
        }
        if (log.isDebugEnabled()) {
          log.debug(""String_Node_Str"" + desIFile + ""String_Node_Str""+ property.getLabel());
        }
      }
 else {
        log.error(""String_Node_Str"" + desIFile.getFullPath().toString());
      }
    }
  }
}",0.7253731343283583
138130,"@Override protected boolean doExecute() throws Exception {
  boolean result=true;
  List<File> mergeFolders=new ArrayList<File>();
  mergeFolders.add(getWorkspacePath().append(TDQ_METADATA).toFile());
  mergeFolders.add(getWorkspacePath().append(TDQ_LIBRARIES).toFile());
  mergeFolders.add(getWorkspacePath().append(TDQ_DATAPROFILING).toFile());
  Map<File,File> fileMap=new HashMap<File,File>();
  for (  File rawFile : mergeFolders) {
    if (rawFile.exists()) {
      File migFile=new Path(rawFile.getAbsolutePath()).addFileExtension(MIGRATION_FOLDER_EXT).toFile();
      rawFile.renameTo(migFile);
      fileMap.put(rawFile,migFile);
    }
  }
  for (  File rawFile : fileMap.keySet()) {
    result=result && merge(rawFile,fileMap.get(rawFile));
  }
  for (  File rawFile : fileMap.keySet()) {
    fileMap.get(rawFile).renameTo(rawFile.getAbsoluteFile());
  }
  if (GlobalServiceRegister.getDefault().isServiceRegistered(IMigrateDIMetadataItemService.class)) {
    IMigrateDIMetadataItemService service=(IMigrateDIMetadataItemService)GlobalServiceRegister.getDefault().getService(IMigrateDIMetadataItemService.class);
    File parentFolder=getWorkspacePath().append(""String_Node_Str"").toFile();
    if (parentFolder.exists()) {
      for (      File propFile : getPropertyFiles(parentFolder)) {
        Property property=PropertyHelper.getProperty(propFile);
        if (property != null) {
          Item item=property.getItem();
          if (item != null) {
            service.migrateDIItems(item);
          }
        }
      }
    }
  }
  return result;
}","@Override protected boolean doExecute() throws Exception {
  boolean result=true;
  List<File> mergeFolders=new ArrayList<File>();
  mergeFolders.add(getWorkspacePath().append(TDQ_METADATA).toFile());
  mergeFolders.add(getWorkspacePath().append(TDQ_LIBRARIES).toFile());
  mergeFolders.add(getWorkspacePath().append(TDQ_DATAPROFILING).toFile());
  Map<File,File> fileMap=new HashMap<File,File>();
  for (  File rawFile : mergeFolders) {
    if (rawFile.exists()) {
      File migFile=new Path(rawFile.getAbsolutePath()).addFileExtension(MIGRATION_FOLDER_EXT).toFile();
      rawFile.renameTo(migFile);
      fileMap.put(rawFile,migFile);
    }
  }
  for (  File rawFile : fileMap.keySet()) {
    result=result && merge(rawFile,fileMap.get(rawFile));
  }
  for (  File rawFile : fileMap.keySet()) {
    fileMap.get(rawFile).renameTo(rawFile.getAbsoluteFile());
  }
  if (!isWorksapcePath() && GlobalServiceRegister.getDefault().isServiceRegistered(IMigrateDIMetadataItemService.class)) {
    IMigrateDIMetadataItemService service=(IMigrateDIMetadataItemService)GlobalServiceRegister.getDefault().getService(IMigrateDIMetadataItemService.class);
    File parentFolder=getWorkspacePath().append(""String_Node_Str"").toFile();
    if (parentFolder.exists()) {
      for (      File propFile : getPropertyFiles(parentFolder)) {
        Property property=PropertyHelper.getProperty(propFile);
        if (property != null) {
          Item item=property.getItem();
          if (item != null) {
            service.migrateDIItems(item);
          }
        }
      }
    }
  }
  return result;
}",0.9930247305009512
138131,"/** 
 * Get the version number as specified in plugin.xml
 * @return version number of SQL Explorer plugin
 */
public String getVersion(){
  String version=(String)plugin.getBundle().getHeaders().get(org.osgi.framework.Constants.BUNDLE_VERSION);
  return version;
}","/** 
 * Get the version number as specified in plugin.xml
 * @return version number of SQL Explorer plugin
 */
public String getVersion(){
  String version=System.getProperty(""String_Node_Str"");
  if (version == null || ""String_Node_Str"".equals(version.trim())) {
    version=(String)plugin.getBundle().getHeaders().get(org.osgi.framework.Constants.BUNDLE_VERSION);
  }
  return version;
}",0.8103975535168195
138132,"/** 
 * DOC bzhou Comment method ""getProductVersion"".
 * @return
 */
public ProductVersion getProductVersion(){
  Object obj=plugin.getBundle().getHeaders().get(org.osgi.framework.Constants.BUNDLE_VERSION);
  ProductVersion currentVersion=ProductVersion.fromString(obj.toString());
  return currentVersion;
}","/** 
 * DOC bzhou Comment method ""getProductVersion"".
 * @return
 */
public ProductVersion getProductVersion(){
  ProductVersion currentVersion=ProductVersion.fromString(VersionUtils.getVersion());
  return currentVersion;
}",0.5639097744360902
138133,"/** 
 * DOC hcheng Comment method ""getCurrentVersion"".
 * @param normalize
 * @return
 */
public static String getCurrentVersion(boolean normalize){
  String version=(String)CorePlugin.getDefault().getBundle().getHeaders().get(org.osgi.framework.Constants.BUNDLE_VERSION);
  if (normalize) {
    version=normalizeVersion(version);
  }
  return version;
}","/** 
 * DOC hcheng Comment method ""getCurrentVersion"".
 * @param normalize
 * @return
 */
public static String getCurrentVersion(boolean normalize){
  String version=VersionUtils.getVersion();
  if (normalize) {
    version=normalizeVersion(version);
  }
  return version;
}",0.5700636942675159
138134,"/** 
 * DOC bzhou Comment method ""getProductVersion"".
 * @return
 */
public ProductVersion getProductVersion(){
  Object obj=bundle.getHeaders().get(org.osgi.framework.Constants.BUNDLE_VERSION);
  ProductVersion currentVersion=ProductVersion.fromString(obj.toString());
  return currentVersion;
}","/** 
 * DOC bzhou Comment method ""getProductVersion"".
 * @return
 */
public ProductVersion getProductVersion(){
  String version=System.getProperty(""String_Node_Str"");
  if (version == null || ""String_Node_Str"".equals(version.trim())) {
    version=(String)bundle.getHeaders().get(org.osgi.framework.Constants.BUNDLE_VERSION);
  }
  ProductVersion currentVersion=ProductVersion.fromString(version);
  return currentVersion;
}",0.7545076282940361
138135,"public void preWindowOpen(){
  IWorkbenchWindowConfigurer configurer=getWindowConfigurer();
  configurer.setInitialSize(new Point(1024,768));
  configurer.setShowCoolBar(true);
  configurer.setShowStatusLine(false);
  String buildId=CorePlugin.getDefault().getBundle().getHeaders().get(org.osgi.framework.Constants.BUNDLE_VERSION).toString();
  IBrandingService brandingService=(IBrandingService)GlobalServiceRegister.getDefault().getBrandingService(IBrandingService.class);
  configurer.setTitle(brandingService.getFullProductName() + ""String_Node_Str"" + buildId+ ""String_Node_Str"");
}","public void preWindowOpen(){
  IWorkbenchWindowConfigurer configurer=getWindowConfigurer();
  configurer.setInitialSize(new Point(1024,768));
  configurer.setShowCoolBar(true);
  configurer.setShowStatusLine(false);
  String buildId=VersionUtils.getVersion();
  IBrandingService brandingService=(IBrandingService)GlobalServiceRegister.getDefault().getBrandingService(IBrandingService.class);
  configurer.setTitle(brandingService.getFullProductName() + ""String_Node_Str"" + buildId+ ""String_Node_Str"");
}",0.8852157943067034
138136,"public Map<IPath,IPath> mapping(ItemRecord record){
  Map<IPath,IPath> toImportMap=new HashMap<IPath,IPath>();
  if (record.isValid()) {
    Property property=record.getProperty();
    IPath itemPath=null;
    IPath itemDesPath=null;
    if (property != null) {
      itemPath=PropertyHelper.getItemPath(property);
    }
 else {
      String currentProjectName=ResourceManager.getRootProjectName();
      itemPath=new Path(currentProjectName).append(record.getFullPath().removeFirstSegments(1));
    }
    itemDesPath=ResourcesPlugin.getWorkspace().getRoot().getFile(itemPath).getLocation();
    IPath propDesPath=itemDesPath.removeFileExtension().addFileExtension(FactoriesUtil.PROPERTIES_EXTENSION);
    toImportMap.put(record.getFilePath(),itemDesPath);
    if (property == null) {
      return toImportMap;
    }
    toImportMap.put(record.getPropertyPath(),propDesPath);
    EResourceConstant typedConstant=EResourceConstant.getTypedConstant(property.getItem());
    if (typedConstant != null && typedConstant == EResourceConstant.MDM_CONNECTIONS) {
      ConnectionItem item=(ConnectionItem)property.getItem();
      Connection connection=item.getConnection();
      List<TdXmlSchema> tdXmlDocumentList=ConnectionHelper.getTdXmlDocument(connection);
      for (      TdXmlSchema schema : tdXmlDocumentList) {
        IPath srcPath=record.getFilePath().removeLastSegments(1).append(schema.getXsdFilePath());
        if (!srcPath.toFile().exists()) {
          log.error(""String_Node_Str"" + srcPath.toFile() + ""String_Node_Str"");
          break;
        }
        IPath desPath=itemDesPath.removeLastSegments(1).append(new Path(schema.getXsdFilePath()));
        toImportMap.put(srcPath,desPath);
      }
    }
  }
  return toImportMap;
}","public Map<IPath,IPath> mapping(ItemRecord record){
  Map<IPath,IPath> toImportMap=new HashMap<IPath,IPath>();
  if (record.isValid()) {
    Property property=record.getProperty();
    IPath itemPath=null;
    IPath itemDesPath=null;
    if (property != null) {
      itemPath=PropertyHelper.getItemPath(property);
    }
 else {
      String currentProjectName=ResourceManager.getRootProjectName();
      IPath fullPath=record.getFullPath();
      int constantIndex=EResourceConstant.getTopConstantIndexFromPath(fullPath);
      itemPath=new Path(currentProjectName).append(fullPath.removeFirstSegments(constantIndex));
    }
    itemDesPath=ResourcesPlugin.getWorkspace().getRoot().getFile(itemPath).getLocation();
    IPath propDesPath=itemDesPath.removeFileExtension().addFileExtension(FactoriesUtil.PROPERTIES_EXTENSION);
    toImportMap.put(record.getFilePath(),itemDesPath);
    if (property == null) {
      return toImportMap;
    }
    toImportMap.put(record.getPropertyPath(),propDesPath);
    EResourceConstant typedConstant=EResourceConstant.getTypedConstant(property.getItem());
    if (typedConstant != null && typedConstant == EResourceConstant.MDM_CONNECTIONS) {
      ConnectionItem item=(ConnectionItem)property.getItem();
      Connection connection=item.getConnection();
      List<TdXmlSchema> tdXmlDocumentList=ConnectionHelper.getTdXmlDocument(connection);
      for (      TdXmlSchema schema : tdXmlDocumentList) {
        IPath srcPath=record.getFilePath().removeLastSegments(1).append(schema.getXsdFilePath());
        if (!srcPath.toFile().exists()) {
          log.error(""String_Node_Str"" + srcPath.toFile() + ""String_Node_Str"");
          break;
        }
        IPath desPath=itemDesPath.removeLastSegments(1).append(new Path(schema.getXsdFilePath()));
        toImportMap.put(srcPath,desPath);
      }
    }
  }
  return toImportMap;
}",0.9501385041551248
138137,"public Map<IPath,IPath> mapping(ItemRecord record){
  Map<IPath,IPath> toImportMap=new HashMap<IPath,IPath>();
  if (record.isValid()) {
    Property property=record.getProperty();
    IPath itemPath=null;
    IPath itemDesPath=null;
    if (property != null) {
      itemPath=PropertyHelper.getItemPath(property);
    }
 else {
      itemPath=new Path(projectName).append(record.getFullPath().removeFirstSegments(1));
    }
    itemDesPath=ResourcesPlugin.getWorkspace().getRoot().getFile(itemPath).getLocation();
    IPath propDesPath=itemDesPath.removeFileExtension().addFileExtension(FactoriesUtil.PROPERTIES_EXTENSION);
    toImportMap.put(record.getFilePath(),itemDesPath);
    if (property == null) {
      return toImportMap;
    }
    toImportMap.put(record.getPropertyPath(),propDesPath);
    EResourceConstant typedConstant=EResourceConstant.getTypedConstant(property.getItem());
    if (typedConstant != null && typedConstant == EResourceConstant.MDM_CONNECTIONS) {
      ConnectionItem item=(ConnectionItem)property.getItem();
      Connection connection=item.getConnection();
      List<TdXmlSchema> tdXmlDocumentList=ConnectionHelper.getTdXmlDocument(connection);
      for (      TdXmlSchema schema : tdXmlDocumentList) {
        IPath srcPath=record.getFilePath().removeLastSegments(1).append(schema.getXsdFilePath());
        if (!srcPath.toFile().exists()) {
          log.error(""String_Node_Str"" + srcPath.toFile() + ""String_Node_Str"");
          break;
        }
        IPath desPath=itemDesPath.removeLastSegments(1).append(new Path(schema.getXsdFilePath()));
        toImportMap.put(srcPath,desPath);
      }
    }
  }
  return toImportMap;
}","public Map<IPath,IPath> mapping(ItemRecord record){
  Map<IPath,IPath> toImportMap=new HashMap<IPath,IPath>();
  if (record.isValid()) {
    Property property=record.getProperty();
    IPath itemPath=null;
    IPath itemDesPath=null;
    if (property != null) {
      itemPath=PropertyHelper.getItemPath(property);
    }
 else {
      String currentProjectName=ResourceManager.getRootProjectName();
      itemPath=new Path(currentProjectName).append(record.getFullPath().removeFirstSegments(1));
    }
    itemDesPath=ResourcesPlugin.getWorkspace().getRoot().getFile(itemPath).getLocation();
    IPath propDesPath=itemDesPath.removeFileExtension().addFileExtension(FactoriesUtil.PROPERTIES_EXTENSION);
    toImportMap.put(record.getFilePath(),itemDesPath);
    if (property == null) {
      return toImportMap;
    }
    toImportMap.put(record.getPropertyPath(),propDesPath);
    EResourceConstant typedConstant=EResourceConstant.getTypedConstant(property.getItem());
    if (typedConstant != null && typedConstant == EResourceConstant.MDM_CONNECTIONS) {
      ConnectionItem item=(ConnectionItem)property.getItem();
      Connection connection=item.getConnection();
      List<TdXmlSchema> tdXmlDocumentList=ConnectionHelper.getTdXmlDocument(connection);
      for (      TdXmlSchema schema : tdXmlDocumentList) {
        IPath srcPath=record.getFilePath().removeLastSegments(1).append(schema.getXsdFilePath());
        if (!srcPath.toFile().exists()) {
          log.error(""String_Node_Str"" + srcPath.toFile() + ""String_Node_Str"");
          break;
        }
        IPath desPath=itemDesPath.removeLastSegments(1).append(new Path(schema.getXsdFilePath()));
        toImportMap.put(srcPath,desPath);
      }
    }
  }
  return toImportMap;
}",0.976826048694632
138138,"protected void initMetaTextFied(){
  Property property=getProperty();
  if (property != null) {
    String name=property.getLabel();
    String purpose=property.getPurpose();
    String description=property.getDescription();
    String author=property.getAuthor().getLogin();
    String devStatus=property.getStatusCode();
    nameText.setText(name == null ? PluginConstant.EMPTY_STRING : name);
    setOldDataproviderName(nameText.getText());
    purposeText.setText(purpose == null ? PluginConstant.EMPTY_STRING : purpose);
    descriptionText.setText(description == null ? PluginConstant.EMPTY_STRING : description);
    authorText.setText(author == null ? PluginConstant.EMPTY_STRING : author);
    authorText.setEnabled(false);
    statusCombo.setText(devStatus == null ? PluginConstant.EMPTY_STRING : devStatus);
  }
}","protected void initMetaTextFied(){
  Property property=getProperty();
  if (property != null) {
    String name=property.getLabel();
    String purpose=property.getPurpose();
    String description=property.getDescription();
    String author=property.getAuthor().getLogin();
    String devStatus=property.getStatusCode();
    nameText.setText(name == null ? PluginConstant.EMPTY_STRING : name);
    setOldDataproviderName(nameText.getText());
    purposeText.setText(purpose == null ? PluginConstant.EMPTY_STRING : purpose);
    descriptionText.setText(description == null ? PluginConstant.EMPTY_STRING : description);
    TaggedValue tv=TaggedValueHelper.getTaggedValue(TaggedValueHelper.AUTHOR,currentModelElement.getTaggedValue());
    authorText.setText(author == null ? (tv == null ? PluginConstant.EMPTY_STRING : (tv.getValue() == null ? PluginConstant.EMPTY_STRING : tv.getValue())) : author);
    authorText.setEnabled(false);
    statusCombo.setText(devStatus == null ? PluginConstant.EMPTY_STRING : devStatus);
  }
}",0.807131280388979
138139,"/** 
 * @return true if any text fields with validates contains whitespace. 
 */
public boolean checkWhithspace(){
  return 0 == getWhitespaceFields().size();
}","/** 
 * @return true if any text fields with validates contains whitespace.
 */
public boolean checkWhithspace(){
  return 0 == getWhitespaceFields().size();
}",0.9968652037617556
138140,"protected void saveReloadResult(){
  ElementWriterFactory.getInstance().createDataProviderWriter().save(oldDataProvider,true);
}","protected void saveReloadResult(){
  if (oldDataProvider.getName() == null) {
    oldDataProvider.setName(PropertyHelper.getProperty(oldDataProvider).getLabel());
  }
  ElementWriterFactory.getInstance().createDataProviderWriter().save(oldDataProvider,true);
}",0.6597938144329897
138141,"@Override protected Connection findDataProvider(){
  Connection provider=null;
  if (selectedObj instanceof RepositoryNode) {
    if (selectedObj instanceof DBTableFolderRepNode || selectedObj instanceof DBViewFolderRepNode) {
      provider=ConnectionHelper.getTdDataProvider(getPackageFromObject(selectedObj));
    }
    Item connItem=null;
    IRepositoryViewObject object=((RepositoryNode)selectedObj).getObject();
    if (null != object) {
      connItem=object.getProperty().getItem();
    }
 else {
      connItem=((RepositoryNode)selectedObj).getParent().getObject().getProperty().getItem();
    }
    provider=((ConnectionItem)connItem).getConnection();
  }
 else   if (selectedObj instanceof Package) {
    provider=ConnectionHelper.getTdDataProvider((Package)selectedObj);
  }
  if (provider.getName() == null) {
    provider.setName(PropertyHelper.getProperty(provider).getLabel());
  }
  return provider;
}","@Override protected Connection findDataProvider(){
  Connection provider=null;
  if (selectedObj instanceof RepositoryNode) {
    if (selectedObj instanceof DBTableFolderRepNode || selectedObj instanceof DBViewFolderRepNode) {
      provider=ConnectionHelper.getTdDataProvider(getPackageFromObject(selectedObj));
    }
    Item connItem=null;
    IRepositoryViewObject object=((RepositoryNode)selectedObj).getObject();
    if (null != object) {
      connItem=object.getProperty().getItem();
    }
 else {
      connItem=((RepositoryNode)selectedObj).getParent().getObject().getProperty().getItem();
    }
    provider=((ConnectionItem)connItem).getConnection();
  }
 else   if (selectedObj instanceof Package) {
    provider=ConnectionHelper.getTdDataProvider((Package)selectedObj);
  }
  return provider;
}",0.9276201505500868
138142,"@Override protected Connection findDataProvider(){
  Connection provider=null;
  if (selectedObj instanceof RepositoryNode) {
    if (selectedObj instanceof DBTableFolderRepNode || selectedObj instanceof DBViewFolderRepNode) {
      provider=ConnectionHelper.getTdDataProvider(getPackageFromObject(selectedObj));
    }
    Item connItem=null;
    IRepositoryViewObject object=((RepositoryNode)selectedObj).getObject();
    if (null != object) {
      connItem=object.getProperty().getItem();
    }
 else {
      connItem=((RepositoryNode)selectedObj).getParent().getObject().getProperty().getItem();
    }
    provider=((ConnectionItem)connItem).getConnection();
  }
 else   if (selectedObj instanceof Package) {
    provider=ConnectionHelper.getTdDataProvider((Package)selectedObj);
  }
  return provider;
}","@Override protected Connection findDataProvider(){
  Connection provider=null;
  if (selectedObj instanceof RepositoryNode) {
    if (selectedObj instanceof DBTableFolderRepNode || selectedObj instanceof DBViewFolderRepNode) {
      provider=ConnectionHelper.getTdDataProvider(getPackageFromObject(selectedObj));
    }
    Item connItem=null;
    IRepositoryViewObject object=((RepositoryNode)selectedObj).getObject();
    if (null != object) {
      connItem=object.getProperty().getItem();
    }
 else {
      connItem=((RepositoryNode)selectedObj).getParent().getObject().getProperty().getItem();
    }
    provider=((ConnectionItem)connItem).getConnection();
  }
 else   if (selectedObj instanceof Package) {
    provider=ConnectionHelper.getTdDataProvider((Package)selectedObj);
  }
  if (provider.getName() == null) {
    provider.setName(PropertyHelper.getProperty(provider).getLabel());
  }
  return provider;
}",0.9195136074116966
138143,"/** 
 * Create TableFolderNodeRepositoryNode.
 * @param node parent RepositoryNode
 * @param metadataObject parent CatalogViewObject or SchemaViewObject
 */
private void createRepositoryNodeTableFolderNode(List<IRepositoryNode> node,IRepositoryViewObject metadataObject){
  List<TdTable> tables=new ArrayList<TdTable>();
  String filterCharacter=null;
  try {
    if (metadataObject instanceof MetadataCatalogRepositoryObject) {
      viewObject=((MetadataCatalogRepositoryObject)metadataObject).getViewObject();
      item=(ConnectionItem)viewObject.getProperty().getItem();
      connection=item.getConnection();
      catalog=((MetadataCatalogRepositoryObject)metadataObject).getCatalog();
      tables=PackageHelper.getTables(catalog);
      filterCharacter=RepositoryNodeHelper.getTableFilter(catalog,schema);
      if (!isOnFilterring()) {
        if (tables.isEmpty()) {
          tables=DqRepositoryViewService.getTables(connection,catalog,null,true);
          if (tables.size() > 0) {
            ElementWriterFactory.getInstance().createDataProviderWriter().save(item);
          }
        }
      }
    }
 else {
      viewObject=((MetadataSchemaRepositoryObject)metadataObject).getViewObject();
      item=(ConnectionItem)viewObject.getProperty().getItem();
      connection=item.getConnection();
      schema=((MetadataSchemaRepositoryObject)metadataObject).getSchema();
      tables=PackageHelper.getTables(schema);
      filterCharacter=RepositoryNodeHelper.getTableFilter(catalog,schema);
      RepositoryNode parent=metadataObject.getRepositoryNode().getParent();
      IRepositoryViewObject object=parent.getObject();
      if (object instanceof MetadataCatalogRepositoryObject && filterCharacter.equals(""String_Node_Str"")) {
        filterCharacter=RepositoryNodeHelper.getTableFilter(((MetadataCatalogRepositoryObject)object).getCatalog(),null);
      }
      if (!isOnFilterring()) {
        if (tables.isEmpty()) {
          tables=DqRepositoryViewService.getTables(connection,schema,null,true);
          if (tables.size() > 0) {
            ElementWriterFactory.getInstance().createDataProviderWriter().save(item);
          }
        }
      }
    }
    if (tables.size() > 0) {
      if (!DQRepositoryNode.isOnFilterring()) {
        Project currentProject=ProjectManager.getInstance().getCurrentProject();
        ProxyRepositoryFactory.getInstance().save(currentProject,item);
      }
    }
 else {
      ConnectionUtils.retrieveColumn(tables);
    }
    if (filterCharacter != null && !filterCharacter.equals(""String_Node_Str"")) {
      tables=RepositoryNodeHelper.filterTables(tables,filterCharacter);
    }
  }
 catch (  Exception e) {
    log.error(e,e);
  }
  createTableRepositoryNode(tables,node);
}","/** 
 * Create TableFolderNodeRepositoryNode.
 * @param node parent RepositoryNode
 * @param metadataObject parent CatalogViewObject or SchemaViewObject
 */
private void createRepositoryNodeTableFolderNode(List<IRepositoryNode> node,IRepositoryViewObject metadataObject){
  List<TdTable> tables=new ArrayList<TdTable>();
  String filterCharacter=null;
  try {
    if (metadataObject instanceof MetadataCatalogRepositoryObject) {
      viewObject=((MetadataCatalogRepositoryObject)metadataObject).getViewObject();
      item=(ConnectionItem)viewObject.getProperty().getItem();
      connection=item.getConnection();
      catalog=((MetadataCatalogRepositoryObject)metadataObject).getCatalog();
      tables=PackageHelper.getTables(catalog);
      filterCharacter=RepositoryNodeHelper.getTableFilter(catalog,schema);
      if (!isOnFilterring()) {
        if (tables.isEmpty()) {
          tables=DqRepositoryViewService.getTables(connection,catalog,null,true);
          if (tables.size() > 0) {
            ElementWriterFactory.getInstance().createDataProviderWriter().save(item);
          }
        }
      }
    }
 else {
      viewObject=((MetadataSchemaRepositoryObject)metadataObject).getViewObject();
      item=(ConnectionItem)viewObject.getProperty().getItem();
      connection=item.getConnection();
      schema=((MetadataSchemaRepositoryObject)metadataObject).getSchema();
      tables=PackageHelper.getTables(schema);
      filterCharacter=RepositoryNodeHelper.getTableFilter(catalog,schema);
      RepositoryNode parent=metadataObject.getRepositoryNode().getParent();
      IRepositoryViewObject object=parent.getObject();
      if (object instanceof MetadataCatalogRepositoryObject && filterCharacter.equals(""String_Node_Str"")) {
        filterCharacter=RepositoryNodeHelper.getTableFilter(((MetadataCatalogRepositoryObject)object).getCatalog(),null);
      }
      if (!isOnFilterring()) {
        if (tables.isEmpty()) {
          tables=DqRepositoryViewService.getTables(connection,schema,null,true);
          if (tables.size() > 0) {
            ElementWriterFactory.getInstance().createDataProviderWriter().save(item);
          }
        }
      }
    }
    if (tables.size() > 0) {
      if (!DQRepositoryNode.isOnFilterring()) {
        Project currentProject=ProjectManager.getInstance().getCurrentProject();
        ProxyRepositoryFactory.getInstance().save(currentProject,item);
      }
    }
    ConnectionUtils.retrieveColumn(tables);
    if (filterCharacter != null && !filterCharacter.equals(""String_Node_Str"")) {
      tables=RepositoryNodeHelper.filterTables(tables,filterCharacter);
    }
  }
 catch (  Exception e) {
    log.error(e,e);
  }
  createTableRepositoryNode(tables,node);
}",0.9970663733039972
138144,"/** 
 * Create TableFolderNodeRepositoryNode.
 * @param node parent RepositoryNode
 * @param metadataObject parent CatalogViewObject or SchemaViewObject
 */
private void createRepositoryNodeViewFolderNode(List<IRepositoryNode> node,IRepositoryViewObject metadataObject){
  List<TdView> views=new ArrayList<TdView>();
  String filterCharacter=null;
  try {
    if (metadataObject instanceof MetadataCatalogRepositoryObject) {
      viewObject=((MetadataCatalogRepositoryObject)metadataObject).getViewObject();
      catalog=((MetadataCatalogRepositoryObject)metadataObject).getCatalog();
      item=(ConnectionItem)viewObject.getProperty().getItem();
      views=PackageHelper.getViews(catalog);
      filterCharacter=RepositoryNodeHelper.getViewFilter(catalog,schema);
      if (views.isEmpty()) {
        if (!isOnFilterring()) {
          connection=item.getConnection();
          views=DqRepositoryViewService.getViews(connection,catalog,null,true);
          if (views.size() > 0) {
            ProxyRepositoryFactory.getInstance().save(item);
          }
        }
      }
 else {
        ConnectionUtils.retrieveColumn(views);
      }
    }
 else     if (metadataObject instanceof MetadataSchemaRepositoryObject) {
      viewObject=((MetadataSchemaRepositoryObject)metadataObject).getViewObject();
      schema=((MetadataSchemaRepositoryObject)metadataObject).getSchema();
      item=(ConnectionItem)viewObject.getProperty().getItem();
      views=PackageHelper.getViews(schema);
      filterCharacter=RepositoryNodeHelper.getViewFilter(catalog,schema);
      RepositoryNode parent=metadataObject.getRepositoryNode().getParent();
      IRepositoryViewObject object=parent.getObject();
      if (object instanceof MetadataCatalogRepositoryObject && filterCharacter.equals(PluginConstant.EMPTY_STRING)) {
        filterCharacter=RepositoryNodeHelper.getViewFilter(((MetadataCatalogRepositoryObject)object).getCatalog(),null);
      }
      if (views.isEmpty()) {
        if (!isOnFilterring()) {
          connection=item.getConnection();
          views=DqRepositoryViewService.getViews(connection,schema,null,true);
          if (views.size() > 0) {
            ProxyRepositoryFactory.getInstance().save(item);
          }
        }
      }
 else {
        ConnectionUtils.retrieveColumn(views);
      }
    }
  }
 catch (  Exception e) {
    log.error(e,e);
  }
  if (filterCharacter != null && !filterCharacter.equals(PluginConstant.EMPTY_STRING)) {
    views=RepositoryNodeHelper.filterViews(views,filterCharacter);
  }
  createViewRepositoryNode(views,node);
}","/** 
 * Create TableFolderNodeRepositoryNode.
 * @param node parent RepositoryNode
 * @param metadataObject parent CatalogViewObject or SchemaViewObject
 */
private void createRepositoryNodeViewFolderNode(List<IRepositoryNode> node,IRepositoryViewObject metadataObject){
  List<TdView> views=new ArrayList<TdView>();
  String filterCharacter=null;
  try {
    if (metadataObject instanceof MetadataCatalogRepositoryObject) {
      viewObject=((MetadataCatalogRepositoryObject)metadataObject).getViewObject();
      catalog=((MetadataCatalogRepositoryObject)metadataObject).getCatalog();
      item=(ConnectionItem)viewObject.getProperty().getItem();
      views=PackageHelper.getViews(catalog);
      filterCharacter=RepositoryNodeHelper.getViewFilter(catalog,schema);
      if (views.isEmpty()) {
        if (!isOnFilterring()) {
          connection=item.getConnection();
          views=DqRepositoryViewService.getViews(connection,catalog,null,true);
          if (views.size() > 0) {
            ProxyRepositoryFactory.getInstance().save(item);
          }
        }
      }
      ConnectionUtils.retrieveColumn(views);
    }
 else     if (metadataObject instanceof MetadataSchemaRepositoryObject) {
      viewObject=((MetadataSchemaRepositoryObject)metadataObject).getViewObject();
      schema=((MetadataSchemaRepositoryObject)metadataObject).getSchema();
      item=(ConnectionItem)viewObject.getProperty().getItem();
      views=PackageHelper.getViews(schema);
      filterCharacter=RepositoryNodeHelper.getViewFilter(catalog,schema);
      RepositoryNode parent=metadataObject.getRepositoryNode().getParent();
      IRepositoryViewObject object=parent.getObject();
      if (object instanceof MetadataCatalogRepositoryObject && filterCharacter.equals(PluginConstant.EMPTY_STRING)) {
        filterCharacter=RepositoryNodeHelper.getViewFilter(((MetadataCatalogRepositoryObject)object).getCatalog(),null);
      }
      if (views.isEmpty()) {
        if (!isOnFilterring()) {
          connection=item.getConnection();
          views=DqRepositoryViewService.getViews(connection,schema,null,true);
          if (views.size() > 0) {
            ProxyRepositoryFactory.getInstance().save(item);
          }
        }
      }
 else {
        ConnectionUtils.retrieveColumn(views);
      }
    }
  }
 catch (  Exception e) {
    log.error(e,e);
  }
  if (filterCharacter != null && !filterCharacter.equals(PluginConstant.EMPTY_STRING)) {
    views=RepositoryNodeHelper.filterViews(views,filterCharacter);
  }
  createViewRepositoryNode(views,node);
}",0.9964871194379392
138145,"private void moveConnectionRepNode(IRepositoryNode sourceNode,IRepositoryNode targetNode) throws PersistenceException {
  IRepositoryViewObject objectToMove=sourceNode.getObject();
  ConnectionItem item=(ConnectionItem)objectToMove.getProperty().getItem();
  IPath fullPath=Path.EMPTY;
  if (targetNode.getParent() instanceof DBConnectionFolderRepNode) {
    fullPath=ResourceManager.getConnectionFolder().getFullPath();
  }
 else   if (targetNode.getParent() instanceof DFConnectionFolderRepNode) {
    fullPath=ResourceManager.getFileDelimitedFolder().getFullPath();
  }
 else   if (targetNode.getParent() instanceof MDMConnectionFolderRepNode || targetNode.getParent() instanceof MDMConnectionSubFolderRepNode) {
    fullPath=ResourceManager.getMDMConnectionFolder().getFullPath();
  }
  if (targetNode.getType() == ENodeType.SIMPLE_FOLDER) {
    moveObject(objectToMove,sourceNode,targetNode,fullPath.makeRelativeTo(ResourceManager.getRootProject().getFullPath()));
  }
 else   if (targetNode.getType() == ENodeType.SYSTEM_FOLDER) {
    moveObject(objectToMove,sourceNode,targetNode,Path.EMPTY);
  }
  CorePlugin.getDefault().refreshDQView(targetNode.getParent());
  this.updateConnectionDependency(item);
}","private void moveConnectionRepNode(IRepositoryNode sourceNode,IRepositoryNode targetNode) throws PersistenceException {
  IRepositoryViewObject objectToMove=sourceNode.getObject();
  ConnectionItem item=(ConnectionItem)objectToMove.getProperty().getItem();
  IPath fullPath=Path.EMPTY;
  if (targetNode.getParent() instanceof DBConnectionFolderRepNode) {
    fullPath=ResourceManager.getConnectionFolder().getFullPath();
  }
 else   if (targetNode.getParent() instanceof DFConnectionFolderRepNode) {
    fullPath=ResourceManager.getFileDelimitedFolder().getFullPath();
  }
 else   if (targetNode.getParent() instanceof MDMConnectionFolderRepNode || targetNode.getParent() instanceof MDMConnectionSubFolderRepNode) {
    fullPath=ResourceManager.getMDMConnectionFolder().getFullPath();
  }
  if (targetNode.getType() == ENodeType.SIMPLE_FOLDER) {
    moveObject(objectToMove,sourceNode,targetNode,fullPath.makeRelativeTo(ResourceManager.getRootProject().getFullPath()));
  }
 else   if (targetNode.getType() == ENodeType.SYSTEM_FOLDER) {
    moveObject(objectToMove,sourceNode,targetNode,Path.EMPTY);
  }
  CorePlugin.getDefault().refreshDQView(targetNode.getParent());
}",0.982780344393112
138146,"private void computeDependcy(FolderItem emfFolder){
  try {
    if (emfFolder != null) {
      Item[] childrens=(Item[])emfFolder.getChildren().toArray();
      for (int i=0; i < childrens.length; i++) {
        if (childrens[i] instanceof FolderItem) {
          FolderItem children=(FolderItem)childrens[i];
          computeDependcy(children);
        }
 else {
          if (childrens[i] instanceof TDQAnalysisItem) {
            this.updateAnalysisDependency((TDQAnalysisItem)childrens[i]);
          }
 else           if (childrens[i] instanceof TDQReportItem) {
            this.updateReportDependency((TDQReportItem)childrens[i]);
          }
 else           if (childrens[i] instanceof TDQIndicatorDefinitionItem) {
            this.updateIndicatorDefinitionDependency((TDQIndicatorDefinitionItem)childrens[i]);
          }
 else           if (childrens[i] instanceof TDQBusinessRuleItem) {
            this.updateBusinessRuleDependency((TDQBusinessRuleItem)childrens[i]);
          }
 else           if (childrens[i] instanceof TDQPatternItem) {
            this.updatePatternDependency((TDQPatternItem)childrens[i]);
          }
 else           if (childrens[i] instanceof ConnectionItem) {
            this.updateConnectionDependency((ConnectionItem)childrens[i]);
          }
        }
      }
    }
  }
 catch (  Exception e) {
    log.error(e,e);
  }
}","private void computeDependcy(FolderItem emfFolder){
  try {
    if (emfFolder != null) {
      Item[] childrens=(Item[])emfFolder.getChildren().toArray();
      for (int i=0; i < childrens.length; i++) {
        if (childrens[i] instanceof FolderItem) {
          FolderItem children=(FolderItem)childrens[i];
          computeDependcy(children);
        }
 else {
          updateDependcyByItem(childrens[i]);
        }
      }
    }
  }
 catch (  Exception e) {
    log.error(e,e);
  }
}",0.5032327586206896
138147,"private void computePath(FolderHelper folderHelper,IPath sourcePath,IPath targetPath,IPath makeRelativeTo,ERepositoryObjectType type,IRepositoryNode sourceNode,IRepositoryNode targetNode) throws PersistenceException {
  String completeNewPath=null;
  IPath sourceMakeRelativeTo=sourcePath.makeRelativeTo(makeRelativeTo);
  IPath targetMakeRelativeTo=targetPath.makeRelativeTo(makeRelativeTo);
  factory.moveFolder(type,sourceMakeRelativeTo,targetMakeRelativeTo);
  if (targetMakeRelativeTo.isEmpty()) {
    completeNewPath=ERepositoryObjectType.getFolderName(type) + IPath.SEPARATOR + sourceMakeRelativeTo.lastSegment();
  }
 else {
    completeNewPath=ERepositoryObjectType.getFolderName(type) + IPath.SEPARATOR + targetMakeRelativeTo.toString()+ IPath.SEPARATOR+ sourceMakeRelativeTo.lastSegment();
  }
  RepositoryNode sourceParent=sourceNode.getParent();
  RepositoryNode targetParent=targetNode.getParent();
  CorePlugin.getDefault().refreshDQView(sourceParent);
  CorePlugin.getDefault().refreshDQView(targetParent);
  FolderItem emfFolder=folderHelper.getFolder(completeNewPath);
  computeDependcy(emfFolder);
}","private void computePath(FolderHelper folderHelper,IPath sourcePath,IPath targetPath,IPath makeRelativeTo,ERepositoryObjectType type,IRepositoryNode sourceNode,IRepositoryNode targetNode) throws PersistenceException {
  String completeNewPath=null;
  IPath sourceMakeRelativeTo=sourcePath.makeRelativeTo(makeRelativeTo);
  IPath targetMakeRelativeTo=targetPath.makeRelativeTo(makeRelativeTo);
  factory.moveFolder(type,sourceMakeRelativeTo,targetMakeRelativeTo);
  if (targetMakeRelativeTo.isEmpty()) {
    completeNewPath=ERepositoryObjectType.getFolderName(type) + IPath.SEPARATOR + sourceMakeRelativeTo.lastSegment();
  }
 else {
    completeNewPath=ERepositoryObjectType.getFolderName(type) + IPath.SEPARATOR + targetMakeRelativeTo.toString()+ IPath.SEPARATOR+ sourceMakeRelativeTo.lastSegment();
  }
  RepositoryNode sourceParent=sourceNode.getParent();
  RepositoryNode targetParent=targetNode.getParent();
  CorePlugin.getDefault().refreshDQView(sourceParent);
  CorePlugin.getDefault().refreshDQView(targetParent);
  FolderItem emfFolder=folderHelper.getFolder(completeNewPath);
}",0.986400725294651
138148,"/** 
 * DOC qiongli Comment method ""lock"".
 * @param item
 */
public void lock(final Item item){
  if (!isReadOnly() && item != null) {
    if (!item.eIsProxy()) {
      try {
        ProxyRepositoryFactory.getInstance().lock(item);
        CommonViewer commonViewer=RepositoryNodeHelper.getDQCommonViewer();
        if (commonViewer != null) {
          commonViewer.refresh();
        }
      }
 catch (      PersistenceException e) {
        log.error(e,e);
      }
catch (      LoginException e) {
        log.error(e,e);
      }
    }
  }
}","/** 
 * DOC qiongli Comment method ""lock"".
 * @param item
 */
public void lock(final Item item){
  if (!isReadOnly() && item != null) {
    if (!item.eIsProxy()) {
      try {
        ProxyRepositoryFactory.getInstance().lock(item);
      }
 catch (      PersistenceException e) {
        log.error(e,e);
      }
catch (      LoginException e) {
        log.error(e,e);
      }
    }
  }
}",0.8329764453961456
138149,"/** 
 * DOC qiongli Comment method ""unLock"".
 * @param item
 */
public void unLock(final Item item){
  if (!isReadOnly() & item != null) {
    try {
      ProxyRepositoryFactory.getInstance().unlock(item);
      CommonViewer commonViewer=RepositoryNodeHelper.getDQCommonViewer();
      if (commonViewer != null) {
        commonViewer.refresh();
      }
    }
 catch (    PersistenceException e) {
      log.error(e,e);
    }
catch (    LoginException e) {
      log.error(e,e);
    }
  }
}","/** 
 * DOC qiongli Comment method ""unLock"".
 * @param item
 */
public void unLock(final Item item){
  if (!isReadOnly() & item != null) {
    try {
      ProxyRepositoryFactory.getInstance().unlock(item);
    }
 catch (    PersistenceException e) {
      log.error(e,e);
    }
catch (    LoginException e) {
      log.error(e,e);
    }
  }
}",0.8221153846153846
138150,"@Override public void run(){
  ISelection selection=this.getSelection();
  for (  Object obj : ((IStructuredSelection)selection).toArray()) {
    if (obj instanceof RepositoryNode) {
      RepositoryNode node=(RepositoryNode)obj;
      if (node instanceof ReportFileRepNode) {
        deleteReportFile((ReportFileRepNode)node);
        continue;
      }
      boolean isStateDeleted=RepositoryNodeHelper.isStateDeleted(node);
      if (!isStateDeleted) {
        closeEditors(selection);
        excuteSuperRun(null);
        break;
      }
      boolean hasDependency=false;
      if (node.getType() == ENodeType.SIMPLE_FOLDER || node.getType() == ENodeType.SYSTEM_FOLDER) {
        List<IRepositoryNode> newLs=RepositoryNodeHelper.getRepositoryElementFromFolder(node,true);
        boolean haveSubNode=false;
        for (        IRepositoryNode subNode : newLs) {
          hasDependency=RepositoryNodeHelper.hasDependencyClients(subNode);
          if (!hasDependency || hasDependency && handleDependencies(subNode)) {
            excuteSuperRun((RepositoryNode)subNode);
          }
 else {
            haveSubNode=true;
          }
        }
        if (!haveSubNode) {
          excuteSuperRun(node);
        }
      }
 else {
        hasDependency=RepositoryNodeHelper.hasDependencyClients(node);
        if (!hasDependency || hasDependency && handleDependencies(node)) {
          excuteSuperRun((RepositoryNode)node);
        }
      }
    }
  }
  CorePlugin.getDefault().refreshWorkSpace();
  CorePlugin.getDefault().refreshDQView(RepositoryNodeHelper.getRecycleBinRepNode());
}","@Override public void run(){
  ISelection selection=this.getSelection();
  for (  Object obj : ((IStructuredSelection)selection).toArray()) {
    if (obj instanceof RepositoryNode) {
      RepositoryNode node=(RepositoryNode)obj;
      if (node instanceof ReportFileRepNode) {
        deleteReportFile((ReportFileRepNode)node);
        continue;
      }
      boolean isStateDeleted=RepositoryNodeHelper.isStateDeleted(node);
      if (!isStateDeleted) {
        excuteSuperRun(null);
        break;
      }
      boolean hasDependency=false;
      if (node.getType() == ENodeType.SIMPLE_FOLDER || node.getType() == ENodeType.SYSTEM_FOLDER) {
        List<IRepositoryNode> newLs=RepositoryNodeHelper.getRepositoryElementFromFolder(node,true);
        boolean haveSubNode=false;
        for (        IRepositoryNode subNode : newLs) {
          hasDependency=RepositoryNodeHelper.hasDependencyClients(subNode);
          if (!hasDependency || hasDependency && handleDependencies(subNode)) {
            excuteSuperRun((RepositoryNode)subNode);
          }
 else {
            haveSubNode=true;
          }
        }
        if (!haveSubNode) {
          excuteSuperRun(node);
        }
      }
 else {
        hasDependency=RepositoryNodeHelper.hasDependencyClients(node);
        if (!hasDependency || hasDependency && handleDependencies(node)) {
          excuteSuperRun((RepositoryNode)node);
        }
      }
    }
  }
  CorePlugin.getDefault().refreshWorkSpace();
  CorePlugin.getDefault().refreshDQView(RepositoryNodeHelper.getRecycleBinRepNode());
}",0.9895071542130366
138151,"@Override public void partClosed(IWorkbenchPart part){
  if (!isCommonFormEditor(part)) {
    return;
  }
  Item item=getItem((IEditorPart)part);
  if (item == null) {
    return;
  }
  if (ProxyRepositoryManager.getInstance().isReadOnly() || ProxyRepositoryManager.getInstance().isEditable(item)) {
    ProxyRepositoryManager.getInstance().unLock(item);
  }
 else {
    ProxyRepositoryManager.getInstance().refresh();
    CorePlugin.getDefault().refreshDQView();
  }
  super.partClosed(part);
}","@Override public void partClosed(IWorkbenchPart part){
  if (!isCommonFormEditor(part)) {
    return;
  }
  Item item=getItem((IEditorPart)part);
  if (item == null) {
    return;
  }
  if (ProxyRepositoryManager.getInstance().isReadOnly() || ProxyRepositoryManager.getInstance().isEditable(item)) {
    ProxyRepositoryManager.getInstance().unLock(item);
    RepositoryNode recursiveFind=RepositoryNodeHelper.recursiveFind(item.getProperty());
    CommonViewer dqCommonViewer=RepositoryNodeHelper.getDQCommonViewer();
    if (dqCommonViewer != null && null != recursiveFind) {
      dqCommonViewer.refresh(recursiveFind);
    }
 else {
      CorePlugin.getDefault().refreshDQView();
    }
  }
 else {
    ProxyRepositoryManager.getInstance().refresh();
    CorePlugin.getDefault().refreshDQView();
  }
  super.partClosed(part);
}",0.6359516616314199
138152,"@Override public void partOpened(IWorkbenchPart part){
  if (!isCommonFormEditor(part)) {
    return;
  }
  Item item=getItem((IEditorPart)part);
  if (item == null) {
    return;
  }
  CorePlugin.getDefault().refreshWorkSpace();
  if (ProxyRepositoryManager.getInstance().isReadOnly() || !ProxyRepositoryManager.getInstance().isEditable(item)) {
    MessageDialog.openWarning(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),""String_Node_Str"",part.getTitle() + ""String_Node_Str"" + ProxyRepositoryFactory.getInstance().getStatus(item).name()+ ""String_Node_Str"");
    lockCommonFormEditor(part);
    CorePlugin.getDefault().refreshDQView();
    return;
  }
  ProxyRepositoryManager.getInstance().lock(item);
  super.partOpened(part);
}","@Override public void partOpened(IWorkbenchPart part){
  if (!isCommonFormEditor(part)) {
    return;
  }
  Item item=getItem((IEditorPart)part);
  if (item == null) {
    return;
  }
  CorePlugin.getDefault().refreshWorkSpace();
  if (ProxyRepositoryManager.getInstance().isReadOnly() || !ProxyRepositoryManager.getInstance().isEditable(item)) {
    MessageDialog.openWarning(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),""String_Node_Str"",part.getTitle() + ""String_Node_Str"" + ProxyRepositoryFactory.getInstance().getStatus(item).name()+ ""String_Node_Str"");
    lockCommonFormEditor(part);
    CorePlugin.getDefault().refreshDQView();
    return;
  }
  ProxyRepositoryManager.getInstance().lock(item);
  RepositoryNode recursiveFind=RepositoryNodeHelper.recursiveFind(item.getProperty());
  CommonViewer dqCommonViewer=RepositoryNodeHelper.getDQCommonViewer();
  if (dqCommonViewer != null && null != recursiveFind) {
    dqCommonViewer.refresh(recursiveFind);
  }
 else {
    CorePlugin.getDefault().refreshDQView();
  }
  super.partOpened(part);
}",0.823982398239824
138153,"@Override public void postWindowOpen(){
  this.getWindowConfigurer().getWindow().getShell().setMaximized(true);
  super.postWindowOpen();
  ChangePerspectiveAction.getAction().switchTitle();
}","@Override public void postWindowOpen(){
  this.getWindowConfigurer().getWindow().getShell().setMaximized(true);
  super.postWindowOpen();
  ChangePerspectiveAction.getAction().switchTitle();
  ITDQRepositoryService tdqRepositoryService=(ITDQRepositoryService)org.talend.core.GlobalServiceRegister.getDefault().getService(ITDQRepositoryService.class);
  if (tdqRepositoryService != null) {
    tdqRepositoryService.addPartListener();
  }
}",0.6095238095238096
138154,"private void createChildrenNode(Tree tree,TreeItemContainer parentItem,TreeColumn[] treeColumns,IIndicatorNode[] branchNodes){
  boolean expanded=false;
  for (int i=0; i < branchNodes.length; i++) {
    IIndicatorNode indicatorNode=branchNodes[i];
    if (!indicatorNode.getLabel().equals(""String_Node_Str"")) {
      final TreeItemContainer treeItem;
      if (parentItem == null) {
        treeItem=new TreeItemContainer(tree,SWT.NONE,treeColumns.length);
        tree.setFocus();
      }
 else {
        treeItem=new TreeItemContainer(parentItem,SWT.NONE,treeColumns.length);
      }
      TreeEditor editor;
      Button checkButton;
      Button rowCheckButton=null;
      Button commonCheckButton;
      List<Button> rowButtonList=new ArrayList<Button>();
      for (int j=0; j < treeColumns.length; j++) {
        IndicatorEnum indicatorEnum=indicatorNode.getIndicatorEnum();
        if (j == 0) {
          treeItem.setText(0,indicatorNode.getLabel());
          if (indicatorEnum != null) {
            treeItem.setData(INDICATORITEM,indicatorNode);
          }
          continue;
        }
 else         if (j == 1 && treeColumns.length > 2) {
          editor=new TreeEditor(tree);
          rowCheckButton=new Button(tree,SWT.CHECK);
          rowCheckButton.addSelectionListener(new RowSelectButtonListener(j,treeItem,indicatorEnum,null));
          checkButtons.add(rowCheckButton);
          Color systemColor=tree.getDisplay().getSystemColor(SWT.COLOR_YELLOW);
          treeItem.setBackground(j,systemColor);
          rowCheckButton.setBackground(systemColor);
          commonCheckButton=rowCheckButton;
        }
 else {
          editor=new TreeEditor(tree);
          checkButton=new Button(tree,SWT.CHECK);
          checkButton.setData(indicatorNode);
          int currentModelElement=this.pageSize * (this.currentPage - 1) + j - 2;
          ModelElementIndicator pageIndicator=getResult()[currentModelElement];
          boolean isMatch=isMatchCurrentIndicator(pageIndicator,indicatorNode);
          if (null != pageIndicator && pageIndicator.tempContains(indicatorEnum)) {
            if (isMatch) {
              checkButton.setSelection(true);
              expanded=true;
            }
          }
          checkButton.setEnabled(isMatch);
          checkButton.addSelectionListener(new ButtonSelectionListener(j,treeItem,indicatorEnum,pageIndicator));
          if (indicatorEnum != null) {
            checkButton.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str"",indicatorEnum.getLabel(),pageIndicator.getElementName()));
          }
          checkButton.setData(MODELELEMENTINDICATORFLAG,pageIndicator);
          commonCheckButton=checkButton;
          rowButtonList.add(checkButton);
          checkButtons.add(checkButton);
        }
        commonCheckButton.pack();
        editor.minimumWidth=commonCheckButton.getSize().x;
        editor.horizontalAlignment=SWT.CENTER;
        editor.setEditor(commonCheckButton,treeItem,j);
        treeItem.setButton(j,commonCheckButton);
      }
      if (rowCheckButton != null) {
        boolean allChecked=true;
        rowCheckButton.setData(ROWINDICATORFLAG,rowButtonList);
        for (        Button btn : rowButtonList) {
          if (!btn.getSelection()) {
            allChecked=false;
          }
        }
        rowCheckButton.setSelection(allChecked);
      }
      if (indicatorNode.hasChildren()) {
        createChildrenNode(tree,treeItem,treeColumns,indicatorNode.getChildren());
      }
      if (expanded) {
        TreeItem item=treeItem.getParentItem();
        while (null != item) {
          item.setExpanded(true);
          item=item.getParentItem();
        }
      }
    }
  }
}","private void createChildrenNode(Tree tree,TreeItemContainer parentItem,TreeColumn[] treeColumns,IIndicatorNode[] branchNodes){
  boolean expanded=false;
  for (int i=0; i < branchNodes.length; i++) {
    IIndicatorNode indicatorNode=branchNodes[i];
    if (!indicatorNode.getLabel().equals(""String_Node_Str"")) {
      final TreeItemContainer treeItem;
      if (parentItem == null) {
        treeItem=new TreeItemContainer(tree,SWT.NONE,treeColumns.length);
        tree.setFocus();
      }
 else {
        treeItem=new TreeItemContainer(parentItem,SWT.NONE,treeColumns.length);
      }
      TreeEditor editor;
      Button checkButton;
      Button rowCheckButton=null;
      Button commonCheckButton;
      List<Button> rowButtonList=new ArrayList<Button>();
      for (int j=0; j < treeColumns.length; j++) {
        IndicatorEnum indicatorEnum=indicatorNode.getIndicatorEnum();
        if (j == 0) {
          treeItem.setText(0,indicatorNode.getLabel());
          if (indicatorEnum != null) {
            treeItem.setData(INDICATORITEM,indicatorNode);
          }
          continue;
        }
 else         if (j == 1 && treeColumns.length > 2) {
          editor=new TreeEditor(tree);
          rowCheckButton=new Button(tree,SWT.CHECK);
          rowCheckButton.addSelectionListener(new RowSelectButtonListener(j,treeItem,indicatorEnum,null));
          checkButtons.add(rowCheckButton);
          Color systemColor=tree.getDisplay().getSystemColor(SWT.COLOR_YELLOW);
          treeItem.setBackground(j,systemColor);
          rowCheckButton.setBackground(systemColor);
          commonCheckButton=rowCheckButton;
        }
 else {
          editor=new TreeEditor(tree);
          checkButton=new Button(tree,SWT.CHECK);
          checkButton.setData(indicatorNode);
          ModelElementIndicator pageIndicator=null;
          if (isUsePaging()) {
            int currentModelElement=this.pageSize * (this.currentPage - 1) + j - 2;
            pageIndicator=getResult()[currentModelElement];
          }
 else {
            pageIndicator=(ModelElementIndicator)treeColumns[j].getData();
          }
          boolean isMatch=isMatchCurrentIndicator(pageIndicator,indicatorNode);
          if (null != pageIndicator && pageIndicator.tempContains(indicatorEnum)) {
            if (isMatch) {
              checkButton.setSelection(true);
              expanded=true;
            }
          }
          checkButton.setEnabled(isMatch);
          checkButton.addSelectionListener(new ButtonSelectionListener(j,treeItem,indicatorEnum,pageIndicator));
          if (indicatorEnum != null) {
            checkButton.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str"",indicatorEnum.getLabel(),pageIndicator.getElementName()));
          }
          checkButton.setData(MODELELEMENTINDICATORFLAG,pageIndicator);
          commonCheckButton=checkButton;
          rowButtonList.add(checkButton);
          checkButtons.add(checkButton);
        }
        commonCheckButton.pack();
        editor.minimumWidth=commonCheckButton.getSize().x;
        editor.horizontalAlignment=SWT.CENTER;
        editor.setEditor(commonCheckButton,treeItem,j);
        treeItem.setButton(j,commonCheckButton);
      }
      if (rowCheckButton != null) {
        boolean allChecked=true;
        rowCheckButton.setData(ROWINDICATORFLAG,rowButtonList);
        for (        Button btn : rowButtonList) {
          if (!btn.getSelection()) {
            allChecked=false;
          }
        }
        rowCheckButton.setSelection(allChecked);
      }
      if (indicatorNode.hasChildren()) {
        createChildrenNode(tree,treeItem,treeColumns,indicatorNode.getChildren());
      }
      if (expanded) {
        TreeItem item=treeItem.getParentItem();
        while (null != item) {
          item.setExpanded(true);
          item=item.getParentItem();
        }
      }
    }
  }
}",0.9638713080168776
138155,"private void initializationMonitor(){
  pageFirstImgHypLnk.addMouseListener(new org.eclipse.swt.events.MouseAdapter(){
    @Override public void mouseUp(    MouseEvent e){
      if (currentPage != 1) {
        loadPageTempIndicator(1);
        currentPage=1;
        tree.dispose();
        buttomComp.dispose();
        if (IndicatorSelectDialog.this.parent != null) {
          initializationTree(IndicatorSelectDialog.this.parent);
          IndicatorSelectDialog.this.parent.layout();
        }
        pageFirstImgHypLnk.setEnabled(false);
        pagePreviouseImgHypLnk.setEnabled(false);
        pageNextImgHypLnk.setEnabled(true);
        pageLastImgHypLnk.setEnabled(true);
        okButton.setEnabled(false);
        pageGoTo.select(currentPage - 1);
      }
    }
  }
);
  pagePreviouseImgHypLnk.addMouseListener(new org.eclipse.swt.events.MouseAdapter(){
    @Override public void mouseUp(    MouseEvent e){
      if (currentPage > 1) {
        currentPage--;
        tree.dispose();
        buttomComp.dispose();
        if (IndicatorSelectDialog.this.parent != null) {
          initializationTree(IndicatorSelectDialog.this.parent);
          IndicatorSelectDialog.this.parent.layout();
        }
        pageNextImgHypLnk.setEnabled(true);
        pageLastImgHypLnk.setEnabled(true);
        okButton.setEnabled(false);
        if (currentPage <= 1) {
          pageFirstImgHypLnk.setEnabled(false);
          pagePreviouseImgHypLnk.setEnabled(false);
        }
        pageGoTo.select(currentPage - 1);
      }
    }
  }
);
  pageNextImgHypLnk.addMouseListener(new org.eclipse.swt.events.MouseAdapter(){
    @Override public void mouseUp(    MouseEvent e){
      if (currentPage < totalPages) {
        currentPage++;
        tree.dispose();
        buttomComp.dispose();
        if (IndicatorSelectDialog.this.parent != null) {
          initializationTree(IndicatorSelectDialog.this.parent);
          IndicatorSelectDialog.this.parent.layout();
        }
        pageFirstImgHypLnk.setEnabled(true);
        pagePreviouseImgHypLnk.setEnabled(true);
        if (currentPage >= totalPages) {
          okButton.setEnabled(true);
          pageNextImgHypLnk.setEnabled(false);
          pageLastImgHypLnk.setEnabled(false);
        }
        pageGoTo.select(currentPage - 1);
      }
    }
  }
);
  pageLastImgHypLnk.addMouseListener(new org.eclipse.swt.events.MouseAdapter(){
    @Override public void mouseUp(    MouseEvent e){
      if (currentPage != totalPages) {
        loadPageTempIndicator(totalPages);
        currentPage=totalPages;
        tree.dispose();
        buttomComp.dispose();
        if (IndicatorSelectDialog.this.parent != null) {
          initializationTree(IndicatorSelectDialog.this.parent);
          IndicatorSelectDialog.this.parent.layout();
        }
        pageFirstImgHypLnk.setEnabled(true);
        pagePreviouseImgHypLnk.setEnabled(true);
        pageNextImgHypLnk.setEnabled(false);
        pageLastImgHypLnk.setEnabled(false);
        okButton.setEnabled(true);
        pageGoTo.select(currentPage - 1);
      }
    }
  }
);
  pageGoTo.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      int toPage=pageGoTo.getSelectionIndex() + 1;
      loadPageTempIndicator(toPage);
      currentPage=toPage;
      tree.dispose();
      buttomComp.dispose();
      if (IndicatorSelectDialog.this.parent != null) {
        initializationTree(IndicatorSelectDialog.this.parent);
        IndicatorSelectDialog.this.parent.layout();
      }
      if (currentPage == 1) {
        pageFirstImgHypLnk.setEnabled(false);
        pagePreviouseImgHypLnk.setEnabled(false);
        pageNextImgHypLnk.setEnabled(true);
        pageLastImgHypLnk.setEnabled(true);
        okButton.setEnabled(false);
      }
 else       if (currentPage == totalPages) {
        pageFirstImgHypLnk.setEnabled(true);
        pagePreviouseImgHypLnk.setEnabled(true);
        pageNextImgHypLnk.setEnabled(false);
        pageLastImgHypLnk.setEnabled(false);
        okButton.setEnabled(true);
      }
 else {
        pageFirstImgHypLnk.setEnabled(true);
        pagePreviouseImgHypLnk.setEnabled(true);
        pageNextImgHypLnk.setEnabled(true);
        pageLastImgHypLnk.setEnabled(true);
        okButton.setEnabled(false);
      }
    }
  }
);
}","private void initializationMonitor(){
  pageFirstImgHypLnk.addMouseListener(new org.eclipse.swt.events.MouseAdapter(){
    @Override public void mouseUp(    MouseEvent e){
      if (currentPage != 1) {
        currentPage=1;
        tree.dispose();
        buttomComp.dispose();
        if (IndicatorSelectDialog.this.parent != null) {
          initializationTree(IndicatorSelectDialog.this.parent);
          IndicatorSelectDialog.this.parent.layout();
        }
        pageFirstImgHypLnk.setEnabled(false);
        pagePreviouseImgHypLnk.setEnabled(false);
        pageNextImgHypLnk.setEnabled(true);
        pageLastImgHypLnk.setEnabled(true);
        okButton.setEnabled(false);
        pageGoTo.select(currentPage - 1);
      }
    }
  }
);
  pagePreviouseImgHypLnk.addMouseListener(new org.eclipse.swt.events.MouseAdapter(){
    @Override public void mouseUp(    MouseEvent e){
      if (currentPage > 1) {
        currentPage--;
        tree.dispose();
        buttomComp.dispose();
        if (IndicatorSelectDialog.this.parent != null) {
          initializationTree(IndicatorSelectDialog.this.parent);
          IndicatorSelectDialog.this.parent.layout();
        }
        pageNextImgHypLnk.setEnabled(true);
        pageLastImgHypLnk.setEnabled(true);
        okButton.setEnabled(false);
        if (currentPage <= 1) {
          pageFirstImgHypLnk.setEnabled(false);
          pagePreviouseImgHypLnk.setEnabled(false);
        }
        pageGoTo.select(currentPage - 1);
      }
    }
  }
);
  pageNextImgHypLnk.addMouseListener(new org.eclipse.swt.events.MouseAdapter(){
    @Override public void mouseUp(    MouseEvent e){
      if (currentPage < totalPages) {
        currentPage++;
        tree.dispose();
        buttomComp.dispose();
        if (IndicatorSelectDialog.this.parent != null) {
          initializationTree(IndicatorSelectDialog.this.parent);
          IndicatorSelectDialog.this.parent.layout();
        }
        pageFirstImgHypLnk.setEnabled(true);
        pagePreviouseImgHypLnk.setEnabled(true);
        if (currentPage >= totalPages) {
          okButton.setEnabled(true);
          pageNextImgHypLnk.setEnabled(false);
          pageLastImgHypLnk.setEnabled(false);
        }
        pageGoTo.select(currentPage - 1);
      }
    }
  }
);
  pageLastImgHypLnk.addMouseListener(new org.eclipse.swt.events.MouseAdapter(){
    @Override public void mouseUp(    MouseEvent e){
      if (currentPage != totalPages) {
        currentPage=totalPages;
        tree.dispose();
        buttomComp.dispose();
        if (IndicatorSelectDialog.this.parent != null) {
          initializationTree(IndicatorSelectDialog.this.parent);
          IndicatorSelectDialog.this.parent.layout();
        }
        pageFirstImgHypLnk.setEnabled(true);
        pagePreviouseImgHypLnk.setEnabled(true);
        pageNextImgHypLnk.setEnabled(false);
        pageLastImgHypLnk.setEnabled(false);
        okButton.setEnabled(true);
        pageGoTo.select(currentPage - 1);
      }
    }
  }
);
  pageGoTo.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      int toPage=pageGoTo.getSelectionIndex() + 1;
      currentPage=toPage;
      tree.dispose();
      buttomComp.dispose();
      if (IndicatorSelectDialog.this.parent != null) {
        initializationTree(IndicatorSelectDialog.this.parent);
        IndicatorSelectDialog.this.parent.layout();
      }
      if (currentPage == 1) {
        pageFirstImgHypLnk.setEnabled(false);
        pagePreviouseImgHypLnk.setEnabled(false);
        pageNextImgHypLnk.setEnabled(true);
        pageLastImgHypLnk.setEnabled(true);
        okButton.setEnabled(false);
      }
 else       if (currentPage == totalPages) {
        pageFirstImgHypLnk.setEnabled(true);
        pagePreviouseImgHypLnk.setEnabled(true);
        pageNextImgHypLnk.setEnabled(false);
        pageLastImgHypLnk.setEnabled(false);
        okButton.setEnabled(true);
      }
 else {
        pageFirstImgHypLnk.setEnabled(true);
        pagePreviouseImgHypLnk.setEnabled(true);
        pageNextImgHypLnk.setEnabled(true);
        pageLastImgHypLnk.setEnabled(true);
        okButton.setEnabled(false);
      }
    }
  }
);
}",0.9866385372714488
138156,"/** 
 * DOC xqliu IndicatorSelectDialog constructor comment.
 * @param parentShell
 * @param title
 * @param modelElementIndicators
 * @deprecated
 */
public IndicatorSelectDialog(Shell parentShell,String title,ModelElementIndicator[] modelElementIndicators){
  this(parentShell,title,modelElementIndicators,null);
  Object editorPart=CorePlugin.getDefault().getWorkbench().getActiveWorkbenchWindow().getActivePage().getActiveEditor();
  if (editorPart instanceof AnalysisEditor) {
    AnalysisEditor analyEditor=(AnalysisEditor)editorPart;
    if (analyEditor.getMasterPage() instanceof ColumnMasterDetailsPage) {
      this.language=ExecutionLanguage.get(((ColumnMasterDetailsPage)analyEditor.getMasterPage()).getExecCombo().getText());
      DataManager connection=((ColumnMasterDetailsPage)analyEditor.getMasterPage()).getAnalysis().getContext().getConnection();
      if (connection == null && modelElementIndicators.length > 0) {
      }
      this.dbms=DbmsLanguageFactory.createDbmsLanguage(connection);
    }
  }
}","/** 
 * DOC xqliu IndicatorSelectDialog constructor comment.
 * @param parentShell
 * @param title
 * @param modelElementIndicators
 * @deprecated
 */
public IndicatorSelectDialog(Shell parentShell,String title,ModelElementIndicator[] modelElementIndicators){
  this(parentShell,title,modelElementIndicators,null);
  Object editorPart=CorePlugin.getDefault().getWorkbench().getActiveWorkbenchWindow().getActivePage().getActiveEditor();
  if (editorPart instanceof AnalysisEditor) {
    AnalysisEditor analyEditor=(AnalysisEditor)editorPart;
    if (analyEditor.getMasterPage() instanceof ColumnMasterDetailsPage) {
      this.language=ExecutionLanguage.get(((ColumnMasterDetailsPage)analyEditor.getMasterPage()).getExecCombo().getText());
      DataManager connection=((ColumnMasterDetailsPage)analyEditor.getMasterPage()).getAnalysis().getContext().getConnection();
      if (connection == null && modelElementIndicators.length > 0) {
      }
      this.dbms=DbmsLanguageFactory.createDbmsLanguage(connection);
    }
  }
  for (  ModelElementIndicator modelElementIndicator : getResult()) {
    modelElementIndicator.copyOldIndicatorEnum();
  }
}",0.9428571428571428
138157,"private TreeColumn[] createTreeColumns(Tree tree){
  tree.setHeaderVisible(true);
  TreeColumn[] treeColumn=null;
  if (this.allColumnsCountSize > 1 && !isUsePaging()) {
    treeColumn=new TreeColumn[allColumnsCountSize + 2];
    treeColumn[0]=new TreeColumn(tree,SWT.CENTER);
    treeColumn[0].setWidth(COL0_WIDTH);
    treeColumn[0].setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    treeColumn[1]=new TreeColumn(tree,SWT.CENTER);
    treeColumn[1].setWidth(COLI_WIDTH);
    treeColumn[1].setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    treeColumn[1].setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
    for (int i=0; i < this.allColumnsCountSize; i++) {
      treeColumn[i + 2]=new TreeColumn(tree,SWT.CENTER);
      treeColumn[i + 2].setWidth(COLI_WIDTH);
      treeColumn[i + 2].setText(getResult()[i].getElementName());
      treeColumn[i + 2].setData(getResult()[i]);
      treeColumn[i + 2].setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
      getResult()[i].copyOldIndicatorEnum();
    }
  }
 else   if (this.allColumnsCountSize > 1 && isUsePaging()) {
    int treeColumnSize=0;
    if (this.currentPage != this.totalPages) {
      treeColumnSize=this.pageSize;
    }
 else {
      treeColumnSize=this.allColumnsCountSize - (this.currentPage - 1) * this.pageSize;
    }
    treeColumn=new TreeColumn[treeColumnSize + 2];
    treeColumn[0]=new TreeColumn(tree,SWT.CENTER);
    treeColumn[0].setWidth(COL0_WIDTH);
    treeColumn[0].setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    treeColumn[1]=new TreeColumn(tree,SWT.CENTER);
    treeColumn[1].setWidth(COLI_WIDTH);
    treeColumn[1].setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    treeColumn[1].setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
    for (int i=0; i < treeColumnSize; i++) {
      treeColumn[i + 2]=new TreeColumn(tree,SWT.CENTER);
      treeColumn[i + 2].setWidth(COLI_WIDTH);
      treeColumn[i + 2].setText(getResult()[(this.currentPage - 1) * this.pageSize + i].getElementName());
      treeColumn[i + 2].setData(getResult()[(this.currentPage - 1) * this.pageSize + i]);
      treeColumn[i + 2].setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
      ModelElementIndicator modelElementIndicator=getResult()[(this.currentPage - 1) * this.pageSize + i];
      List<IndicatorEnum> tempIndicator=modelElementIndicator.getTempIndicator();
      if (null != tempIndicator && tempIndicator.isEmpty()) {
        modelElementIndicator.copyOldIndicatorEnum();
      }
    }
  }
 else {
    treeColumn=new TreeColumn[allColumnsCountSize + 1];
    treeColumn[0]=new TreeColumn(tree,SWT.CENTER);
    treeColumn[0].setWidth(COL0_WIDTH);
    treeColumn[0].setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    for (int i=0; i < this.allColumnsCountSize; i++) {
      treeColumn[i + 1]=new TreeColumn(tree,SWT.CENTER);
      treeColumn[i + 1].setWidth(COLI_WIDTH);
      treeColumn[i + 1].setText(getResult()[i].getElementName());
      treeColumn[i + 1].setData(getResult()[i]);
      getResult()[i].copyOldIndicatorEnum();
    }
  }
  return treeColumn;
}","private TreeColumn[] createTreeColumns(Tree tree){
  tree.setHeaderVisible(true);
  TreeColumn[] treeColumn=null;
  if (this.allColumnsCountSize > 1 && !isUsePaging()) {
    treeColumn=new TreeColumn[allColumnsCountSize + 2];
    treeColumn[0]=new TreeColumn(tree,SWT.CENTER);
    treeColumn[0].setWidth(COL0_WIDTH);
    treeColumn[0].setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    treeColumn[1]=new TreeColumn(tree,SWT.CENTER);
    treeColumn[1].setWidth(COLI_WIDTH);
    treeColumn[1].setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    treeColumn[1].setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
    for (int i=0; i < this.allColumnsCountSize; i++) {
      treeColumn[i + 2]=new TreeColumn(tree,SWT.CENTER);
      treeColumn[i + 2].setWidth(COLI_WIDTH);
      treeColumn[i + 2].setText(getResult()[i].getElementName());
      treeColumn[i + 2].setData(getResult()[i]);
      treeColumn[i + 2].setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
    }
  }
 else   if (this.allColumnsCountSize > 1 && isUsePaging()) {
    int treeColumnSize=0;
    if (this.currentPage != this.totalPages) {
      treeColumnSize=this.pageSize;
    }
 else {
      treeColumnSize=this.allColumnsCountSize - (this.currentPage - 1) * this.pageSize;
    }
    treeColumn=new TreeColumn[treeColumnSize + 2];
    treeColumn[0]=new TreeColumn(tree,SWT.CENTER);
    treeColumn[0].setWidth(COL0_WIDTH);
    treeColumn[0].setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    treeColumn[1]=new TreeColumn(tree,SWT.CENTER);
    treeColumn[1].setWidth(COLI_WIDTH);
    treeColumn[1].setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    treeColumn[1].setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
    for (int i=0; i < treeColumnSize; i++) {
      treeColumn[i + 2]=new TreeColumn(tree,SWT.CENTER);
      treeColumn[i + 2].setWidth(COLI_WIDTH);
      treeColumn[i + 2].setText(getResult()[(this.currentPage - 1) * this.pageSize + i].getElementName());
      treeColumn[i + 2].setData(getResult()[(this.currentPage - 1) * this.pageSize + i]);
      treeColumn[i + 2].setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
      ModelElementIndicator modelElementIndicator=getResult()[(this.currentPage - 1) * this.pageSize + i];
      List<IndicatorEnum> tempIndicator=modelElementIndicator.getTempIndicator();
    }
  }
 else {
    treeColumn=new TreeColumn[allColumnsCountSize + 1];
    treeColumn[0]=new TreeColumn(tree,SWT.CENTER);
    treeColumn[0].setWidth(COL0_WIDTH);
    treeColumn[0].setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    for (int i=0; i < this.allColumnsCountSize; i++) {
      treeColumn[i + 1]=new TreeColumn(tree,SWT.CENTER);
      treeColumn[i + 1].setWidth(COLI_WIDTH);
      treeColumn[i + 1].setText(getResult()[i].getElementName());
      treeColumn[i + 1].setData(getResult()[i]);
    }
  }
  return treeColumn;
}",0.9648719632304662
138158,"private void createChildrenNode(Tree tree,TreeItemContainer parentItem,TreeColumn[] treeColumns,IIndicatorNode[] branchNodes){
  boolean expanded=false;
  for (int i=0; i < branchNodes.length; i++) {
    IIndicatorNode indicatorNode=branchNodes[i];
    if (!indicatorNode.getLabel().equals(""String_Node_Str"")) {
      final TreeItemContainer treeItem;
      if (parentItem == null) {
        treeItem=new TreeItemContainer(tree,SWT.NONE,treeColumns.length);
        tree.setFocus();
      }
 else {
        treeItem=new TreeItemContainer(parentItem,SWT.NONE,treeColumns.length);
      }
      TreeEditor editor;
      Button checkButton;
      Button rowCheckButton=null;
      Button commonCheckButton;
      List<Button> rowButtonList=new ArrayList<Button>();
      for (int j=0; j < treeColumns.length; j++) {
        IndicatorEnum indicatorEnum=indicatorNode.getIndicatorEnum();
        if (j == 0) {
          treeItem.setText(0,indicatorNode.getLabel());
          if (indicatorEnum != null) {
            treeItem.setData(INDICATORITEM,indicatorNode);
          }
          continue;
        }
 else         if (j == 1 && treeColumns.length > 2) {
          editor=new TreeEditor(tree);
          rowCheckButton=new Button(tree,SWT.CHECK);
          rowCheckButton.addSelectionListener(new RowSelectButtonListener(j,treeItem,indicatorEnum,null));
          checkButtons.add(rowCheckButton);
          Color systemColor=tree.getDisplay().getSystemColor(SWT.COLOR_YELLOW);
          treeItem.setBackground(j,systemColor);
          rowCheckButton.setBackground(systemColor);
          commonCheckButton=rowCheckButton;
        }
 else {
          editor=new TreeEditor(tree);
          checkButton=new Button(tree,SWT.CHECK);
          checkButton.setData(indicatorNode);
          ModelElementIndicator pageIndicator=(ModelElementIndicator)treeColumns[j].getData();
          boolean isMatch=isMatchCurrentIndicator(pageIndicator,indicatorNode);
          if (null != pageIndicator && pageIndicator.tempContains(indicatorEnum)) {
            if (isMatch) {
              checkButton.setSelection(true);
              expanded=true;
            }
          }
          checkButton.setEnabled(isMatch);
          checkButton.addSelectionListener(new ButtonSelectionListener(j,treeItem,indicatorEnum,pageIndicator));
          if (indicatorEnum != null) {
            checkButton.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str"",indicatorEnum.getLabel(),pageIndicator.getElementName()));
          }
          checkButton.setData(MODELELEMENTINDICATORFLAG,pageIndicator);
          commonCheckButton=checkButton;
          rowButtonList.add(checkButton);
          checkButtons.add(checkButton);
        }
        commonCheckButton.pack();
        editor.minimumWidth=commonCheckButton.getSize().x;
        editor.horizontalAlignment=SWT.CENTER;
        editor.setEditor(commonCheckButton,treeItem,j);
        treeItem.setButton(j,commonCheckButton);
      }
      if (rowCheckButton != null) {
        boolean allChecked=true;
        rowCheckButton.setData(ROWINDICATORFLAG,rowButtonList);
        for (        Button btn : rowButtonList) {
          if (!btn.getSelection()) {
            allChecked=false;
          }
        }
        rowCheckButton.setSelection(allChecked);
      }
      if (indicatorNode.hasChildren()) {
        createChildrenNode(tree,treeItem,treeColumns,indicatorNode.getChildren());
      }
      if (expanded) {
        TreeItem item=treeItem.getParentItem();
        while (null != item) {
          item.setExpanded(true);
          item=item.getParentItem();
        }
      }
    }
  }
}","private void createChildrenNode(Tree tree,TreeItemContainer parentItem,TreeColumn[] treeColumns,IIndicatorNode[] branchNodes){
  boolean expanded=false;
  for (int i=0; i < branchNodes.length; i++) {
    IIndicatorNode indicatorNode=branchNodes[i];
    if (!indicatorNode.getLabel().equals(""String_Node_Str"")) {
      final TreeItemContainer treeItem;
      if (parentItem == null) {
        treeItem=new TreeItemContainer(tree,SWT.NONE,treeColumns.length);
        tree.setFocus();
      }
 else {
        treeItem=new TreeItemContainer(parentItem,SWT.NONE,treeColumns.length);
      }
      TreeEditor editor;
      Button checkButton;
      Button rowCheckButton=null;
      Button commonCheckButton;
      List<Button> rowButtonList=new ArrayList<Button>();
      for (int j=0; j < treeColumns.length; j++) {
        IndicatorEnum indicatorEnum=indicatorNode.getIndicatorEnum();
        if (j == 0) {
          treeItem.setText(0,indicatorNode.getLabel());
          if (indicatorEnum != null) {
            treeItem.setData(INDICATORITEM,indicatorNode);
          }
          continue;
        }
 else         if (j == 1 && treeColumns.length > 2) {
          editor=new TreeEditor(tree);
          rowCheckButton=new Button(tree,SWT.CHECK);
          rowCheckButton.addSelectionListener(new RowSelectButtonListener(j,treeItem,indicatorEnum,null));
          checkButtons.add(rowCheckButton);
          Color systemColor=tree.getDisplay().getSystemColor(SWT.COLOR_YELLOW);
          treeItem.setBackground(j,systemColor);
          rowCheckButton.setBackground(systemColor);
          commonCheckButton=rowCheckButton;
        }
 else {
          editor=new TreeEditor(tree);
          checkButton=new Button(tree,SWT.CHECK);
          checkButton.setData(indicatorNode);
          int currentModelElement=this.pageSize * (this.currentPage - 1) + j - 2;
          ModelElementIndicator pageIndicator=getResult()[currentModelElement];
          boolean isMatch=isMatchCurrentIndicator(pageIndicator,indicatorNode);
          if (null != pageIndicator && pageIndicator.tempContains(indicatorEnum)) {
            if (isMatch) {
              checkButton.setSelection(true);
              expanded=true;
            }
          }
          checkButton.setEnabled(isMatch);
          checkButton.addSelectionListener(new ButtonSelectionListener(j,treeItem,indicatorEnum,pageIndicator));
          if (indicatorEnum != null) {
            checkButton.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str"",indicatorEnum.getLabel(),pageIndicator.getElementName()));
          }
          checkButton.setData(MODELELEMENTINDICATORFLAG,pageIndicator);
          commonCheckButton=checkButton;
          rowButtonList.add(checkButton);
          checkButtons.add(checkButton);
        }
        commonCheckButton.pack();
        editor.minimumWidth=commonCheckButton.getSize().x;
        editor.horizontalAlignment=SWT.CENTER;
        editor.setEditor(commonCheckButton,treeItem,j);
        treeItem.setButton(j,commonCheckButton);
      }
      if (rowCheckButton != null) {
        boolean allChecked=true;
        rowCheckButton.setData(ROWINDICATORFLAG,rowButtonList);
        for (        Button btn : rowButtonList) {
          if (!btn.getSelection()) {
            allChecked=false;
          }
        }
        rowCheckButton.setSelection(allChecked);
      }
      if (indicatorNode.hasChildren()) {
        createChildrenNode(tree,treeItem,treeColumns,indicatorNode.getChildren());
      }
      if (expanded) {
        TreeItem item=treeItem.getParentItem();
        while (null != item) {
          item.setExpanded(true);
          item=item.getParentItem();
        }
      }
    }
  }
}",0.9788972089857044
138159,"@Override public void widgetSelected(SelectionEvent e){
  int toPage=pageGoTo.getSelectionIndex() + 1;
  loadPageTempIndicator(toPage);
  currentPage=toPage;
  tree.dispose();
  buttomComp.dispose();
  if (IndicatorSelectDialog.this.parent != null) {
    initializationTree(IndicatorSelectDialog.this.parent);
    IndicatorSelectDialog.this.parent.layout();
  }
  if (currentPage == 1) {
    pageFirstImgHypLnk.setEnabled(false);
    pagePreviouseImgHypLnk.setEnabled(false);
    pageNextImgHypLnk.setEnabled(true);
    pageLastImgHypLnk.setEnabled(true);
    okButton.setEnabled(false);
  }
 else   if (currentPage == totalPages) {
    pageFirstImgHypLnk.setEnabled(true);
    pagePreviouseImgHypLnk.setEnabled(true);
    pageNextImgHypLnk.setEnabled(false);
    pageLastImgHypLnk.setEnabled(false);
    okButton.setEnabled(true);
  }
 else {
    pageFirstImgHypLnk.setEnabled(true);
    pagePreviouseImgHypLnk.setEnabled(true);
    pageNextImgHypLnk.setEnabled(true);
    pageLastImgHypLnk.setEnabled(true);
    okButton.setEnabled(false);
  }
}","@Override public void widgetSelected(SelectionEvent e){
  int toPage=pageGoTo.getSelectionIndex() + 1;
  currentPage=toPage;
  tree.dispose();
  buttomComp.dispose();
  if (IndicatorSelectDialog.this.parent != null) {
    initializationTree(IndicatorSelectDialog.this.parent);
    IndicatorSelectDialog.this.parent.layout();
  }
  if (currentPage == 1) {
    pageFirstImgHypLnk.setEnabled(false);
    pagePreviouseImgHypLnk.setEnabled(false);
    pageNextImgHypLnk.setEnabled(true);
    pageLastImgHypLnk.setEnabled(true);
    okButton.setEnabled(false);
  }
 else   if (currentPage == totalPages) {
    pageFirstImgHypLnk.setEnabled(true);
    pagePreviouseImgHypLnk.setEnabled(true);
    pageNextImgHypLnk.setEnabled(false);
    pageLastImgHypLnk.setEnabled(false);
    okButton.setEnabled(true);
  }
 else {
    pageFirstImgHypLnk.setEnabled(true);
    pagePreviouseImgHypLnk.setEnabled(true);
    pageNextImgHypLnk.setEnabled(true);
    pageLastImgHypLnk.setEnabled(true);
    okButton.setEnabled(false);
  }
}",0.9839883551673944
138160,"@Override public void mouseUp(MouseEvent e){
  if (currentPage != totalPages) {
    loadPageTempIndicator(totalPages);
    currentPage=totalPages;
    tree.dispose();
    buttomComp.dispose();
    if (IndicatorSelectDialog.this.parent != null) {
      initializationTree(IndicatorSelectDialog.this.parent);
      IndicatorSelectDialog.this.parent.layout();
    }
    pageFirstImgHypLnk.setEnabled(true);
    pagePreviouseImgHypLnk.setEnabled(true);
    pageNextImgHypLnk.setEnabled(false);
    pageLastImgHypLnk.setEnabled(false);
    okButton.setEnabled(true);
    pageGoTo.select(currentPage - 1);
  }
}","@Override public void mouseUp(MouseEvent e){
  if (currentPage != totalPages) {
    currentPage=totalPages;
    tree.dispose();
    buttomComp.dispose();
    if (IndicatorSelectDialog.this.parent != null) {
      initializationTree(IndicatorSelectDialog.this.parent);
      IndicatorSelectDialog.this.parent.layout();
    }
    pageFirstImgHypLnk.setEnabled(true);
    pagePreviouseImgHypLnk.setEnabled(true);
    pageNextImgHypLnk.setEnabled(false);
    pageLastImgHypLnk.setEnabled(false);
    okButton.setEnabled(true);
    pageGoTo.select(currentPage - 1);
  }
}",0.9666951323654996
138161,"/** 
 * DOC bZhou Comment method ""getIndicatorPercentValue"".
 * @param indicator, never null
 * @return null in case of error
 */
public static String getIndicatorPercentValue(Indicator indicator){
  try {
    String indicatorValue=getIndicatorValue(indicator);
    if (indicatorValue != null) {
      double userCount=NumberFormat.getInstance().parse(indicatorValue).doubleValue();
      double count=Double.valueOf(indicator.getCount());
      return computePercent(userCount,count);
    }
  }
 catch (  NumberFormatException e) {
    log.warn(""String_Node_Str"" + indicator.getName(),e);
  }
catch (  ParseException e) {
    log.warn(""String_Node_Str"" + indicator.getName(),e);
  }
  return null;
}","/** 
 * DOC bZhou Comment method ""getIndicatorPercentValue"".
 * @param indicator, never null
 * @return null in case of error
 */
public static String getIndicatorPercentValue(Indicator indicator){
  try {
    String indicatorValue=getIndicatorValue(indicator);
    if (indicatorValue != null) {
      if (IndicatorsPackage.eINSTANCE.getModeIndicator().equals(indicator.eClass())) {
        return null;
      }
      double userCount=NumberFormat.getInstance().parse(indicatorValue).doubleValue();
      double count=Double.valueOf(indicator.getCount());
      return computePercent(userCount,count);
    }
  }
 catch (  NumberFormatException e) {
    log.warn(""String_Node_Str"" + indicator.getName(),e);
  }
catch (  ParseException e) {
    log.warn(""String_Node_Str"" + indicator.getName(),e);
  }
  return null;
}",0.9234828496042216
138162,"public String trimIfBlank(String colName){
  return ""String_Node_Str"" + trim(colName) + ""String_Node_Str""+ colName+ ""String_Node_Str"";
}","public String trimIfBlank(String colName){
  return ""String_Node_Str"" + charLength(trim(colName)) + ""String_Node_Str""+ colName+ ""String_Node_Str"";
}",0.9577464788732394
138163,"@Override public String getAverageLengthWithBlankRows(){
  String whereExpression=""String_Node_Str"";
  return ""String_Node_Str"" + trimIfBlank(""String_Node_Str"") + ""String_Node_Str""+ trimIfBlank(""String_Node_Str"")+ ""String_Node_Str""+ whereExpression+ ""String_Node_Str""+ trimIfBlank(""String_Node_Str"")+ ""String_Node_Str""+ whereExpression+ ""String_Node_Str"";
}","@Override public String getAverageLengthWithBlankRows(){
  String sql=""String_Node_Str"" + charLength(trimIfBlank(""String_Node_Str"")) + ""String_Node_Str""+ ""String_Node_Str""+ charLength(trimIfBlank(""String_Node_Str""))+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ charLength(trimIfBlank(""String_Node_Str""))+ ""String_Node_Str"";
  return sql;
}",0.5049365303244006
138164,"@Override public String getAverageLengthWithNullBlankRows(){
  return ""String_Node_Str"" + trimIfBlank(""String_Node_Str"") + ""String_Node_Str""+ trimIfBlank(""String_Node_Str"")+ ""String_Node_Str""+ trimIfBlank(""String_Node_Str"")+ ""String_Node_Str"";
}","@Override public String getAverageLengthWithNullBlankRows(){
  String sql=""String_Node_Str"" + charLength(trimIfBlank(""String_Node_Str"")) + ""String_Node_Str""+ ""String_Node_Str""+ charLength(trimIfBlank(""String_Node_Str""))+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ charLength(trimIfBlank(""String_Node_Str""))+ ""String_Node_Str"";
  return sql;
}",0.519134775374376
138165,"@Override public PieDataset getPieDataset(){
  DefaultPieDataset dataset=new DefaultPieDataset();
  for (  IndicatorUnit unit : units) {
    if (unit.isExcuted()) {
      FrequencyExt[] frequencyExt=(FrequencyExt[])unit.getValue();
      ComparatorsFactory.sort(frequencyExt,ComparatorsFactory.TEXT_STATISTICS_COMPARATOR_ID);
      int numOfShown=frequencyExt.length;
      for (int i=0; i < numOfShown; i++) {
        FrequencyExt freqExt=frequencyExt[i];
        String keyLabel=String.valueOf(freqExt.getKey());
        if (""String_Node_Str"".equals(keyLabel)) {
          keyLabel=SpecialValueDisplay.NULL_FIELD;
        }
        if (PluginConstant.EMPTY_STRING.equals(keyLabel)) {
          keyLabel=SpecialValueDisplay.EMPTY_FIELD;
        }
        Double percent=freqExt.getFrequency();
        dataset.setValue(keyLabel,percent);
      }
    }
  }
  return dataset;
}","@Override public PieDataset getPieDataset(){
  DefaultPieDataset dataset=new DefaultPieDataset();
  for (  IndicatorUnit unit : units) {
    if (unit.isExcuted()) {
      FrequencyExt[] frequencyExt=(FrequencyExt[])unit.getValue();
      ComparatorsFactory.sort(frequencyExt,ComparatorsFactory.FREQUENCY_COMPARATOR_ID);
      int numOfShown=frequencyExt.length;
      for (int i=0; i < numOfShown; i++) {
        FrequencyExt freqExt=frequencyExt[i];
        String keyLabel=String.valueOf(freqExt.getKey());
        if (""String_Node_Str"".equals(keyLabel)) {
          keyLabel=SpecialValueDisplay.NULL_FIELD;
        }
        if (PluginConstant.EMPTY_STRING.equals(keyLabel)) {
          keyLabel=SpecialValueDisplay.EMPTY_FIELD;
        }
        Double percent=freqExt.getFrequency();
        dataset.setValue(keyLabel,percent);
      }
    }
  }
  return dataset;
}",0.9873997709049256
138166,"@Override protected Connection findDataProvider(){
  Connection provider=null;
  if (selectedObj instanceof RepositoryNode) {
    if (selectedObj instanceof DBTableFolderRepNode || selectedObj instanceof DBViewFolderRepNode) {
      provider=ConnectionHelper.getTdDataProvider(getPackageFromObject(selectedObj));
    }
    Item connItem=((RepositoryNode)selectedObj).getObject().getProperty().getItem();
    provider=((ConnectionItem)connItem).getConnection();
  }
 else   if (selectedObj instanceof Package) {
    provider=ConnectionHelper.getTdDataProvider((Package)selectedObj);
  }
  return provider;
}","@Override protected Connection findDataProvider(){
  Connection provider=null;
  if (selectedObj instanceof RepositoryNode) {
    if (selectedObj instanceof DBTableFolderRepNode || selectedObj instanceof DBViewFolderRepNode) {
      provider=ConnectionHelper.getTdDataProvider(getPackageFromObject(selectedObj));
    }
    Item connItem=null;
    IRepositoryViewObject object=((RepositoryNode)selectedObj).getObject();
    if (null != object) {
      connItem=object.getProperty().getItem();
    }
 else {
      connItem=((RepositoryNode)selectedObj).getParent().getObject().getProperty().getItem();
    }
    provider=((ConnectionItem)connItem).getConnection();
  }
 else   if (selectedObj instanceof Package) {
    provider=ConnectionHelper.getTdDataProvider((Package)selectedObj);
  }
  return provider;
}",0.8571428571428571
138167,"/** 
 * DOC bZhou Comment method ""createDQStructure"".
 */
public void createDQStructure(){
  RepositoryNodeBuilder instance=RepositoryNodeBuilder.getInstance();
  Plugin plugin=CorePlugin.getDefault();
  try {
    IProject project=ResourceManager.getRootProject();
    if (!project.exists()) {
      project=createNewProject(ResourceManager.getRootProjectName());
    }
    if (!project.getFolder(EResourceConstant.DB_CONNECTIONS.getPath()).exists()) {
      ProxyRepositoryFactory.getInstance().createFolder(ERepositoryObjectType.METADATA,Path.EMPTY,EResourceConstant.DB_CONNECTIONS.getName());
    }
    if (!project.getFolder(EResourceConstant.MDM_CONNECTIONS.getPath()).exists()) {
      ProxyRepositoryFactory.getInstance().createFolder(ERepositoryObjectType.METADATA,Path.EMPTY,EResourceConstant.MDM_CONNECTIONS.getName());
    }
    if (!project.getFolder(EResourceConstant.FILEDELIMITED.getPath()).exists()) {
      ProxyRepositoryFactory.getInstance().createFolder(ERepositoryObjectType.METADATA,Path.EMPTY,EResourceConstant.FILEDELIMITED.getName());
    }
    if (!project.getFolder(EResourceConstant.ANALYSIS.getPath()).exists()) {
      ProxyRepositoryFactory.getInstance().createFolder(ERepositoryObjectType.TDQ_DATA_PROFILING,Path.EMPTY,EResourceConstant.ANALYSIS.getName());
    }
    if (!ReponsitoryContextBridge.isDefautProject()) {
      if (!project.getFolder(EResourceConstant.REPORTS.getPath()).exists()) {
        Folder reportFoler=ProxyRepositoryFactory.getInstance().createFolder(ERepositoryObjectType.TDQ_DATA_PROFILING,Path.EMPTY,EResourceConstant.REPORTS.getName());
      }
    }
    if (!project.getFolder(EResourceConstant.PATTERNS.getPath()).exists()) {
      ProxyRepositoryFactory.getInstance().createFolder(ERepositoryObjectType.TDQ_LIBRARIES,Path.EMPTY,EResourceConstant.PATTERNS.getName());
    }
    if (!project.getFolder(EResourceConstant.RULES.getPath()).exists()) {
      ProxyRepositoryFactory.getInstance().createFolder(ERepositoryObjectType.TDQ_LIBRARIES,Path.EMPTY,EResourceConstant.RULES.getName());
    }
    Folder rulesSQLFoler=null;
    if (!project.getFolder(EResourceConstant.RULES_SQL.getPath()).exists()) {
      rulesSQLFoler=ProxyRepositoryFactory.getInstance().createFolder(ERepositoryObjectType.TDQ_RULES,Path.EMPTY,EResourceConstant.RULES_SQL.getName());
    }
 else {
      rulesSQLFoler=instance.getObjectFolder(EResourceConstant.RULES_SQL);
    }
    rulesSQLFoler.getProperty().getItem().getState().setPath(ERepositoryObjectType.TDQ_RULES_SQL.getFolder());
    Folder rulesParserFoler=null;
    if (!project.getFolder(EResourceConstant.RULES_PARSER.getPath()).exists()) {
      if (!ReponsitoryContextBridge.isDefautProject()) {
        rulesParserFoler=ProxyRepositoryFactory.getInstance().createFolder(ERepositoryObjectType.TDQ_RULES,Path.EMPTY,EResourceConstant.RULES_PARSER.getName());
      }
    }
 else {
      rulesParserFoler=instance.getObjectFolder(EResourceConstant.RULES_PARSER);
    }
    rulesParserFoler.getProperty().getItem().getState().setPath(ERepositoryObjectType.TDQ_RULES_PARSER.getFolder());
    if (!project.getFolder(EResourceConstant.EXCHANGE.getPath()).exists()) {
      ProxyRepositoryFactory.getInstance().createFolder(ERepositoryObjectType.TDQ_LIBRARIES,Path.EMPTY,EResourceConstant.EXCHANGE.getName());
    }
    if (!project.getFolder(EResourceConstant.INDICATORS.getPath()).exists()) {
      ProxyRepositoryFactory.getInstance().createFolder(ERepositoryObjectType.TDQ_LIBRARIES,Path.EMPTY,EResourceConstant.INDICATORS.getName());
    }
    Folder systemIndicatorFoler=null;
    if (!project.getFolder(EResourceConstant.SYSTEM_INDICATORS.getPath()).exists()) {
      systemIndicatorFoler=ProxyRepositoryFactory.getInstance().createFolder(ERepositoryObjectType.TDQ_INDICATOR_ELEMENT,Path.EMPTY,EResourceConstant.SYSTEM_INDICATORS.getName());
    }
 else {
      systemIndicatorFoler=instance.getObjectFolder(EResourceConstant.SYSTEM_INDICATORS);
    }
    systemIndicatorFoler.getProperty().getItem().getState().setPath(ERepositoryObjectType.TDQ_SYSTEM_INDICATORS.getFolder());
    if (!project.getFolder(EResourceConstant.USER_DEFINED_INDICATORS.getPath()).exists()) {
      ProxyRepositoryFactory.getInstance().createFolder(ERepositoryObjectType.TDQ_INDICATOR_ELEMENT,Path.EMPTY,EResourceConstant.USER_DEFINED_INDICATORS.getName());
    }
    if (!project.getFolder(EResourceConstant.USER_DEFINED_INDICATORS_LIB.getPath()).exists()) {
      ProxyRepositoryFactory.getInstance().createFolder(ERepositoryObjectType.TDQ_USERDEFINE_INDICATORS,Path.EMPTY,EResourceConstant.USER_DEFINED_INDICATORS_LIB.getName());
    }
    if (!project.getFolder(EResourceConstant.JRXML_TEMPLATE.getPath()).exists()) {
      ProxyRepositoryFactory.getInstance().createFolder(ERepositoryObjectType.TDQ_LIBRARIES,Path.EMPTY,EResourceConstant.JRXML_TEMPLATE.getName());
    }
    Folder patternRegexFoler=null;
    if (!project.getFolder(EResourceConstant.PATTERN_REGEX.getPath()).exists()) {
      patternRegexFoler=ProxyRepositoryFactory.getInstance().createFolder(ERepositoryObjectType.TDQ_PATTERN_ELEMENT,Path.EMPTY,EResourceConstant.PATTERN_REGEX.getName());
    }
 else {
      patternRegexFoler=instance.getObjectFolder(EResourceConstant.PATTERN_REGEX);
    }
    patternRegexFoler.getProperty().getItem().getState().setPath(ERepositoryObjectType.TDQ_PATTERN_REGEX.getFolder());
    Folder patternSQLFoler=null;
    if (!project.getFolder(EResourceConstant.PATTERN_SQL.getPath()).exists()) {
      patternSQLFoler=ProxyRepositoryFactory.getInstance().createFolder(ERepositoryObjectType.TDQ_PATTERN_ELEMENT,Path.EMPTY,EResourceConstant.PATTERN_SQL.getName());
    }
 else {
      patternSQLFoler=instance.getObjectFolder(EResourceConstant.PATTERN_SQL);
    }
    patternSQLFoler.getProperty().getItem().getState().setPath(ERepositoryObjectType.TDQ_PATTERN_SQL.getFolder());
    Folder sourceFileFoler=null;
    if (!project.getFolder(EResourceConstant.SOURCE_FILES.getPath()).exists()) {
      sourceFileFoler=ProxyRepositoryFactory.getInstance().createFolder(ERepositoryObjectType.TDQ_LIBRARIES,Path.EMPTY,EResourceConstant.SOURCE_FILES.getName());
    }
 else {
      sourceFileFoler=instance.getObjectFolder(EResourceConstant.SOURCE_FILES);
    }
    sourceFileFoler.getProperty().getItem().getState().setPath(ERepositoryObjectType.TDQ_SOURCE_FILE_ELEMENT.getFolder());
    if (systemIndicatorFoler != null && patternRegexFoler != null && patternSQLFoler != null && sourceFileFoler != null && rulesSQLFoler != null && rulesParserFoler != null) {
      copyFilesToFolder(plugin,SYSTEM_INDICATOR_PATH,true,systemIndicatorFoler,null,ERepositoryObjectType.TDQ_SYSTEM_INDICATORS);
      copyFilesToFolder(plugin,PATTERN_PATH,true,patternRegexFoler,null,ERepositoryObjectType.TDQ_PATTERN_REGEX);
      copyFilesToFolder(plugin,SQL_LIKE_PATH,true,patternSQLFoler,null,ERepositoryObjectType.TDQ_PATTERN_SQL);
      copyFilesToFolder(plugin,DEMO_PATH,true,sourceFileFoler,null,ERepositoryObjectType.TDQ_SOURCE_FILE_ELEMENT);
      copyFilesToFolder(plugin,RULES_PATH,true,rulesSQLFoler,null,ERepositoryObjectType.TDQ_RULES_SQL);
      copyFilesToFolder(plugin,RULES_PARSER,true,rulesParserFoler,null,ERepositoryObjectType.TDQ_RULES_PARSER);
    }
    WorkspaceVersionHelper.storeVersion();
    ResourceService.refreshStructure();
  }
 catch (  Exception ex) {
    ExceptionHandler.process(ex);
    ProxyRepositoryManager.getInstance().save();
  }
}","/** 
 * DOC bZhou Comment method ""createDQStructure"".
 */
public void createDQStructure(){
  RepositoryNodeBuilder instance=RepositoryNodeBuilder.getInstance();
  Plugin plugin=CorePlugin.getDefault();
  try {
    IProject project=ResourceManager.getRootProject();
    if (!project.exists()) {
      project=createNewProject(ResourceManager.getRootProjectName());
    }
    if (!project.getFolder(EResourceConstant.DB_CONNECTIONS.getPath()).exists()) {
      ProxyRepositoryFactory.getInstance().createFolder(ERepositoryObjectType.METADATA,Path.EMPTY,EResourceConstant.DB_CONNECTIONS.getName());
    }
    if (!project.getFolder(EResourceConstant.MDM_CONNECTIONS.getPath()).exists()) {
      ProxyRepositoryFactory.getInstance().createFolder(ERepositoryObjectType.METADATA,Path.EMPTY,EResourceConstant.MDM_CONNECTIONS.getName());
    }
    if (!project.getFolder(EResourceConstant.FILEDELIMITED.getPath()).exists()) {
      ProxyRepositoryFactory.getInstance().createFolder(ERepositoryObjectType.METADATA,Path.EMPTY,EResourceConstant.FILEDELIMITED.getName());
    }
    if (!project.getFolder(EResourceConstant.ANALYSIS.getPath()).exists()) {
      ProxyRepositoryFactory.getInstance().createFolder(ERepositoryObjectType.TDQ_DATA_PROFILING,Path.EMPTY,EResourceConstant.ANALYSIS.getName());
    }
    if (!ReponsitoryContextBridge.isDefautProject()) {
      if (!project.getFolder(EResourceConstant.REPORTS.getPath()).exists()) {
        Folder reportFoler=ProxyRepositoryFactory.getInstance().createFolder(ERepositoryObjectType.TDQ_DATA_PROFILING,Path.EMPTY,EResourceConstant.REPORTS.getName());
      }
    }
    if (!project.getFolder(EResourceConstant.PATTERNS.getPath()).exists()) {
      ProxyRepositoryFactory.getInstance().createFolder(ERepositoryObjectType.TDQ_LIBRARIES,Path.EMPTY,EResourceConstant.PATTERNS.getName());
    }
    if (!project.getFolder(EResourceConstant.RULES.getPath()).exists()) {
      ProxyRepositoryFactory.getInstance().createFolder(ERepositoryObjectType.TDQ_LIBRARIES,Path.EMPTY,EResourceConstant.RULES.getName());
    }
    Folder rulesSQLFoler=null;
    if (!project.getFolder(EResourceConstant.RULES_SQL.getPath()).exists()) {
      rulesSQLFoler=ProxyRepositoryFactory.getInstance().createFolder(ERepositoryObjectType.TDQ_RULES,Path.EMPTY,EResourceConstant.RULES_SQL.getName());
    }
 else {
      rulesSQLFoler=instance.getObjectFolder(EResourceConstant.RULES_SQL);
    }
    rulesSQLFoler.getProperty().getItem().getState().setPath(ERepositoryObjectType.TDQ_RULES_SQL.getFolder());
    Folder rulesParserFoler=null;
    if (!project.getFolder(EResourceConstant.RULES_PARSER.getPath()).exists()) {
      if (!ReponsitoryContextBridge.isDefautProject()) {
        rulesParserFoler=ProxyRepositoryFactory.getInstance().createFolder(ERepositoryObjectType.TDQ_RULES,Path.EMPTY,EResourceConstant.RULES_PARSER.getName());
      }
    }
 else {
      rulesParserFoler=instance.getObjectFolder(EResourceConstant.RULES_PARSER);
    }
    if (rulesParserFoler != null) {
      rulesParserFoler.getProperty().getItem().getState().setPath(ERepositoryObjectType.TDQ_RULES_PARSER.getFolder());
    }
    if (!project.getFolder(EResourceConstant.EXCHANGE.getPath()).exists()) {
      ProxyRepositoryFactory.getInstance().createFolder(ERepositoryObjectType.TDQ_LIBRARIES,Path.EMPTY,EResourceConstant.EXCHANGE.getName());
    }
    if (!project.getFolder(EResourceConstant.INDICATORS.getPath()).exists()) {
      ProxyRepositoryFactory.getInstance().createFolder(ERepositoryObjectType.TDQ_LIBRARIES,Path.EMPTY,EResourceConstant.INDICATORS.getName());
    }
    Folder systemIndicatorFoler=null;
    if (!project.getFolder(EResourceConstant.SYSTEM_INDICATORS.getPath()).exists()) {
      systemIndicatorFoler=ProxyRepositoryFactory.getInstance().createFolder(ERepositoryObjectType.TDQ_INDICATOR_ELEMENT,Path.EMPTY,EResourceConstant.SYSTEM_INDICATORS.getName());
    }
 else {
      systemIndicatorFoler=instance.getObjectFolder(EResourceConstant.SYSTEM_INDICATORS);
    }
    systemIndicatorFoler.getProperty().getItem().getState().setPath(ERepositoryObjectType.TDQ_SYSTEM_INDICATORS.getFolder());
    if (!project.getFolder(EResourceConstant.USER_DEFINED_INDICATORS.getPath()).exists()) {
      ProxyRepositoryFactory.getInstance().createFolder(ERepositoryObjectType.TDQ_INDICATOR_ELEMENT,Path.EMPTY,EResourceConstant.USER_DEFINED_INDICATORS.getName());
    }
    if (!project.getFolder(EResourceConstant.USER_DEFINED_INDICATORS_LIB.getPath()).exists()) {
      ProxyRepositoryFactory.getInstance().createFolder(ERepositoryObjectType.TDQ_USERDEFINE_INDICATORS,Path.EMPTY,EResourceConstant.USER_DEFINED_INDICATORS_LIB.getName());
    }
    if (!project.getFolder(EResourceConstant.JRXML_TEMPLATE.getPath()).exists()) {
      ProxyRepositoryFactory.getInstance().createFolder(ERepositoryObjectType.TDQ_LIBRARIES,Path.EMPTY,EResourceConstant.JRXML_TEMPLATE.getName());
    }
    Folder patternRegexFoler=null;
    if (!project.getFolder(EResourceConstant.PATTERN_REGEX.getPath()).exists()) {
      patternRegexFoler=ProxyRepositoryFactory.getInstance().createFolder(ERepositoryObjectType.TDQ_PATTERN_ELEMENT,Path.EMPTY,EResourceConstant.PATTERN_REGEX.getName());
    }
 else {
      patternRegexFoler=instance.getObjectFolder(EResourceConstant.PATTERN_REGEX);
    }
    patternRegexFoler.getProperty().getItem().getState().setPath(ERepositoryObjectType.TDQ_PATTERN_REGEX.getFolder());
    Folder patternSQLFoler=null;
    if (!project.getFolder(EResourceConstant.PATTERN_SQL.getPath()).exists()) {
      patternSQLFoler=ProxyRepositoryFactory.getInstance().createFolder(ERepositoryObjectType.TDQ_PATTERN_ELEMENT,Path.EMPTY,EResourceConstant.PATTERN_SQL.getName());
    }
 else {
      patternSQLFoler=instance.getObjectFolder(EResourceConstant.PATTERN_SQL);
    }
    patternSQLFoler.getProperty().getItem().getState().setPath(ERepositoryObjectType.TDQ_PATTERN_SQL.getFolder());
    Folder sourceFileFoler=null;
    if (!project.getFolder(EResourceConstant.SOURCE_FILES.getPath()).exists()) {
      sourceFileFoler=ProxyRepositoryFactory.getInstance().createFolder(ERepositoryObjectType.TDQ_LIBRARIES,Path.EMPTY,EResourceConstant.SOURCE_FILES.getName());
    }
 else {
      sourceFileFoler=instance.getObjectFolder(EResourceConstant.SOURCE_FILES);
    }
    sourceFileFoler.getProperty().getItem().getState().setPath(ERepositoryObjectType.TDQ_SOURCE_FILE_ELEMENT.getFolder());
    if (systemIndicatorFoler != null && patternRegexFoler != null && patternSQLFoler != null && sourceFileFoler != null && rulesSQLFoler != null) {
      copyFilesToFolder(plugin,SYSTEM_INDICATOR_PATH,true,systemIndicatorFoler,null,ERepositoryObjectType.TDQ_SYSTEM_INDICATORS);
      copyFilesToFolder(plugin,PATTERN_PATH,true,patternRegexFoler,null,ERepositoryObjectType.TDQ_PATTERN_REGEX);
      copyFilesToFolder(plugin,SQL_LIKE_PATH,true,patternSQLFoler,null,ERepositoryObjectType.TDQ_PATTERN_SQL);
      copyFilesToFolder(plugin,DEMO_PATH,true,sourceFileFoler,null,ERepositoryObjectType.TDQ_SOURCE_FILE_ELEMENT);
      copyFilesToFolder(plugin,RULES_PATH,true,rulesSQLFoler,null,ERepositoryObjectType.TDQ_RULES_SQL);
    }
    if (rulesParserFoler != null) {
      copyFilesToFolder(plugin,RULES_PARSER,true,rulesParserFoler,null,ERepositoryObjectType.TDQ_RULES_PARSER);
    }
    WorkspaceVersionHelper.storeVersion();
    ResourceService.refreshStructure();
  }
 catch (  Exception ex) {
    ExceptionHandler.process(ex);
    ProxyRepositoryManager.getInstance().save();
  }
}",0.992350020131526
138168,"/** 
 * create indicatorMappings according category indicatorEnum.
 * @param categoryEnums
 * @return
 */
private IndicatorUnit[] createCategoryIndicatorUnits(IndicatorEnum[] categoryEnums){
  List<IndicatorUnit> indicatorUnitList=new ArrayList<IndicatorUnit>();
  IndicatorUnit indicatorUnit;
  for (  IndicatorEnum categoryEnum : categoryEnums) {
    if (!IndicatorEnum.isPlainIndicatorEnum(categoryEnum)) {
      continue;
    }
    indicatorUnit=getIndicatorUnit(categoryEnum);
switch (categoryEnum) {
case CountsIndicatorEnum:
      CountsIndicator countsIndicator=(CountsIndicator)indicatorUnit.getIndicator();
    countsIndicator.setBlankCountIndicator((BlankCountIndicator)getIndicatorUnit(IndicatorEnum.BlankCountIndicatorEnum).getIndicator());
  countsIndicator.setDistinctCountIndicator((DistinctCountIndicator)getIndicatorUnit(IndicatorEnum.DistinctCountIndicatorEnum).getIndicator());
countsIndicator.setDuplicateCountIndicator((DuplicateCountIndicator)getIndicatorUnit(IndicatorEnum.DuplicateCountIndicatorEnum).getIndicator());
countsIndicator.setRowCountIndicator((RowCountIndicator)getIndicatorUnit(IndicatorEnum.RowCountIndicatorEnum).getIndicator());
countsIndicator.setNullCountIndicator((NullCountIndicator)getIndicatorUnit(IndicatorEnum.NullCountIndicatorEnum).getIndicator());
countsIndicator.setUniqueCountIndicator((UniqueCountIndicator)getIndicatorUnit(IndicatorEnum.UniqueIndicatorEnum).getIndicator());
countsIndicator.setDefaultValueIndicator((DefValueCountIndicator)getIndicatorUnit(IndicatorEnum.DefValueCountIndicatorEnum).getIndicator());
indicatorUnit.setChildren(createCategoryIndicatorUnits(IndicatorEnum.CountsIndicatorEnum.getChildren()));
indicatorUnitList.add(indicatorUnit);
break;
case TextIndicatorEnum:
TextIndicator textIndicator=(TextIndicator)indicatorUnit.getIndicator();
textIndicator.setMinLengthIndicator((MinLengthIndicator)getIndicatorUnit(IndicatorEnum.MinLengthIndicatorEnum).getIndicator());
textIndicator.setMaxLengthIndicator((MaxLengthIndicator)getIndicatorUnit(IndicatorEnum.MaxLengthIndicatorEnum).getIndicator());
textIndicator.setAverageLengthIndicator((AverageLengthIndicator)getIndicatorUnit(IndicatorEnum.AverageLengthIndicatorEnum).getIndicator());
textIndicator.setAvgLengthWithBlankIndicator((AvgLengthWithBlankIndicator)getIndicatorUnit(IndicatorEnum.AverageLengthWithBlankIndicatorEnum).getIndicator());
textIndicator.setAvgLengthWithNullIndicator((AvgLengthWithNullIndicator)getIndicatorUnit(IndicatorEnum.AverageLengthWithNullIndicatorEnum).getIndicator());
textIndicator.setAvgLengthWithBlankNullIndicator((AvgLengthWithBlankNullIndicator)getIndicatorUnit(IndicatorEnum.AverageLengthWithNullBlankIndicatorEnum).getIndicator());
textIndicator.setMinLengthWithBlankIndicator((MinLengthWithBlankIndicator)getIndicatorUnit(IndicatorEnum.MinLengthWithBlankIndicatorEnum).getIndicator());
textIndicator.setMinLengthWithNullIndicator((MinLengthWithNullIndicator)getIndicatorUnit(IndicatorEnum.MinLengthWithNullIndicatorEnum).getIndicator());
textIndicator.setMinLengthWithBlankNullIndicator((MinLengthWithBlankNullIndicator)getIndicatorUnit(IndicatorEnum.MinLengthWithBlankNullIndicatorEnum).getIndicator());
textIndicator.setMaxLengthWithBlankIndicator((MaxLengthWithBlankIndicator)getIndicatorUnit(IndicatorEnum.MaxLengthWithBlankIndicatorEnum).getIndicator());
textIndicator.setMaxLengthWithNullIndicator((MaxLengthWithNullIndicator)getIndicatorUnit(IndicatorEnum.MaxLengthWithNullIndicatorEnum).getIndicator());
textIndicator.setMaxLengthWithBlankNullIndicator((MaxLengthWithBlankNullIndicator)getIndicatorUnit(IndicatorEnum.MaxLengthWithBlankNullIndicatorEnum).getIndicator());
indicatorUnit.setChildren(createCategoryIndicatorUnits(IndicatorEnum.TextIndicatorEnum.getChildren()));
indicatorUnitList.add(indicatorUnit);
break;
case BoxIIndicatorEnum:
BoxIndicator boxtIndicator=(BoxIndicator)indicatorUnit.getIndicator();
boxtIndicator.setRangeIndicator((RangeIndicator)getIndicatorUnit(IndicatorEnum.RangeIndicatorEnum).getIndicator());
boxtIndicator.setIQR((IQRIndicator)getIndicatorUnit(IndicatorEnum.IQRIndicatorEnum).getIndicator());
boxtIndicator.setMeanIndicator((MeanIndicator)getIndicatorUnit(IndicatorEnum.MeanIndicatorEnum).getIndicator());
boxtIndicator.setMedianIndicator((MedianIndicator)getIndicatorUnit(IndicatorEnum.MedianIndicatorEnum).getIndicator());
indicatorUnit.setChildren(createCategoryIndicatorUnits(IndicatorEnum.BoxIIndicatorEnum.getChildren()));
indicatorUnitList.add(indicatorUnit);
break;
case IQRIndicatorEnum:
IQRIndicator iqrIndicator=(IQRIndicator)indicatorUnit.getIndicator();
iqrIndicator.setLowerValue((LowerQuartileIndicator)getIndicatorUnit(IndicatorEnum.LowerQuartileIndicatorEnum).getIndicator());
iqrIndicator.setUpperValue((UpperQuartileIndicator)getIndicatorUnit(IndicatorEnum.UpperQuartileIndicatorEnum).getIndicator());
indicatorUnit.setChildren(createCategoryIndicatorUnits(IndicatorEnum.IQRIndicatorEnum.getChildren()));
indicatorUnitList.add(indicatorUnit);
break;
case RangeIndicatorEnum:
RangeIndicator rangeIndicator=(RangeIndicator)indicatorUnit.getIndicator();
rangeIndicator.setLowerValue((MinValueIndicator)getIndicatorUnit(IndicatorEnum.MinValueIndicatorEnum).getIndicator());
rangeIndicator.setUpperValue((MaxValueIndicator)getIndicatorUnit(IndicatorEnum.MaxValueIndicatorEnum).getIndicator());
indicatorUnit.setChildren(createCategoryIndicatorUnits(IndicatorEnum.RangeIndicatorEnum.getChildren()));
indicatorUnitList.add(indicatorUnit);
break;
case PhoneNumbStatisticsIndicatorEnum:
PhoneNumbStatisticsIndicator phoneNumbIndicator=(PhoneNumbStatisticsIndicator)indicatorUnit.getIndicator();
phoneNumbIndicator.setValidPhoneCountIndicator((ValidPhoneCountIndicator)getIndicatorUnit(IndicatorEnum.ValidPhoneCountIndicatorEnum).getIndicator());
phoneNumbIndicator.setPossiblePhoneCountIndicator((PossiblePhoneCountIndicator)getIndicatorUnit(IndicatorEnum.PossiblePhoneCountIndicatorEnum).getIndicator());
phoneNumbIndicator.setValidRegCodeCountIndicator((ValidRegCodeCountIndicator)getIndicatorUnit(IndicatorEnum.ValidRegCodeCountIndicatorEnum).getIndicator());
phoneNumbIndicator.setInvalidRegCodeCountIndicator((InvalidRegCodeCountIndicator)getIndicatorUnit(IndicatorEnum.InvalidRegCodeCountIndicatorEnum).getIndicator());
phoneNumbIndicator.setWellFormE164PhoneCountIndicator((WellFormE164PhoneCountIndicator)getIndicatorUnit(IndicatorEnum.WellFormE164PhoneCountIndicatorEnum).getIndicator());
phoneNumbIndicator.setWellFormIntePhoneCountIndicator((WellFormIntePhoneCountIndicatorImpl)getIndicatorUnit(IndicatorEnum.WellFormIntePhoneCountIndicatorEnum).getIndicator());
phoneNumbIndicator.setWellFormNationalPhoneCountIndicator((WellFormNationalPhoneCountIndicatorImpl)getIndicatorUnit(IndicatorEnum.WellFormNationalPhoneCountIndicatorEnum).getIndicator());
phoneNumbIndicator.setFormatFreqPieIndicator((FormatFreqPieIndicatorImpl)getIndicatorUnit(IndicatorEnum.FormatFreqPieIndictorEnum).getIndicator());
indicatorUnit.setChildren(createCategoryIndicatorUnits(IndicatorEnum.PhoneNumbStatisticsIndicatorEnum.getChildren()));
indicatorUnitList.add(indicatorUnit);
break;
default :
indicatorUnitList.add(indicatorUnit);
break;
}
}
return indicatorUnitList.toArray(new IndicatorUnit[indicatorUnitList.size()]);
}","/** 
 * create indicatorMappings according category indicatorEnum.
 * @param categoryEnums
 * @return
 */
private IndicatorUnit[] createCategoryIndicatorUnits(IndicatorEnum[] categoryEnums){
  List<IndicatorUnit> indicatorUnitList=new ArrayList<IndicatorUnit>();
  IndicatorUnit indicatorUnit;
  for (  IndicatorEnum categoryEnum : categoryEnums) {
    if (null == categoryEnum) {
      continue;
    }
    if (!IndicatorEnum.isPlainIndicatorEnum(categoryEnum)) {
      continue;
    }
    indicatorUnit=getIndicatorUnit(categoryEnum);
switch (categoryEnum) {
case CountsIndicatorEnum:
      CountsIndicator countsIndicator=(CountsIndicator)indicatorUnit.getIndicator();
    countsIndicator.setBlankCountIndicator((BlankCountIndicator)getIndicatorUnit(IndicatorEnum.BlankCountIndicatorEnum).getIndicator());
  countsIndicator.setDistinctCountIndicator((DistinctCountIndicator)getIndicatorUnit(IndicatorEnum.DistinctCountIndicatorEnum).getIndicator());
countsIndicator.setDuplicateCountIndicator((DuplicateCountIndicator)getIndicatorUnit(IndicatorEnum.DuplicateCountIndicatorEnum).getIndicator());
countsIndicator.setRowCountIndicator((RowCountIndicator)getIndicatorUnit(IndicatorEnum.RowCountIndicatorEnum).getIndicator());
countsIndicator.setNullCountIndicator((NullCountIndicator)getIndicatorUnit(IndicatorEnum.NullCountIndicatorEnum).getIndicator());
countsIndicator.setUniqueCountIndicator((UniqueCountIndicator)getIndicatorUnit(IndicatorEnum.UniqueIndicatorEnum).getIndicator());
countsIndicator.setDefaultValueIndicator((DefValueCountIndicator)getIndicatorUnit(IndicatorEnum.DefValueCountIndicatorEnum).getIndicator());
indicatorUnit.setChildren(createCategoryIndicatorUnits(IndicatorEnum.CountsIndicatorEnum.getChildren()));
indicatorUnitList.add(indicatorUnit);
break;
case TextIndicatorEnum:
TextIndicator textIndicator=(TextIndicator)indicatorUnit.getIndicator();
textIndicator.setMinLengthIndicator((MinLengthIndicator)getIndicatorUnit(IndicatorEnum.MinLengthIndicatorEnum).getIndicator());
textIndicator.setMaxLengthIndicator((MaxLengthIndicator)getIndicatorUnit(IndicatorEnum.MaxLengthIndicatorEnum).getIndicator());
textIndicator.setAverageLengthIndicator((AverageLengthIndicator)getIndicatorUnit(IndicatorEnum.AverageLengthIndicatorEnum).getIndicator());
textIndicator.setAvgLengthWithBlankIndicator((AvgLengthWithBlankIndicator)getIndicatorUnit(IndicatorEnum.AverageLengthWithBlankIndicatorEnum).getIndicator());
textIndicator.setAvgLengthWithNullIndicator((AvgLengthWithNullIndicator)getIndicatorUnit(IndicatorEnum.AverageLengthWithNullIndicatorEnum).getIndicator());
textIndicator.setAvgLengthWithBlankNullIndicator((AvgLengthWithBlankNullIndicator)getIndicatorUnit(IndicatorEnum.AverageLengthWithNullBlankIndicatorEnum).getIndicator());
textIndicator.setMinLengthWithBlankIndicator((MinLengthWithBlankIndicator)getIndicatorUnit(IndicatorEnum.MinLengthWithBlankIndicatorEnum).getIndicator());
textIndicator.setMinLengthWithNullIndicator((MinLengthWithNullIndicator)getIndicatorUnit(IndicatorEnum.MinLengthWithNullIndicatorEnum).getIndicator());
textIndicator.setMinLengthWithBlankNullIndicator((MinLengthWithBlankNullIndicator)getIndicatorUnit(IndicatorEnum.MinLengthWithBlankNullIndicatorEnum).getIndicator());
textIndicator.setMaxLengthWithBlankIndicator((MaxLengthWithBlankIndicator)getIndicatorUnit(IndicatorEnum.MaxLengthWithBlankIndicatorEnum).getIndicator());
textIndicator.setMaxLengthWithNullIndicator((MaxLengthWithNullIndicator)getIndicatorUnit(IndicatorEnum.MaxLengthWithNullIndicatorEnum).getIndicator());
textIndicator.setMaxLengthWithBlankNullIndicator((MaxLengthWithBlankNullIndicator)getIndicatorUnit(IndicatorEnum.MaxLengthWithBlankNullIndicatorEnum).getIndicator());
indicatorUnit.setChildren(createCategoryIndicatorUnits(IndicatorEnum.TextIndicatorEnum.getChildren()));
indicatorUnitList.add(indicatorUnit);
break;
case BoxIIndicatorEnum:
BoxIndicator boxtIndicator=(BoxIndicator)indicatorUnit.getIndicator();
boxtIndicator.setRangeIndicator((RangeIndicator)getIndicatorUnit(IndicatorEnum.RangeIndicatorEnum).getIndicator());
boxtIndicator.setIQR((IQRIndicator)getIndicatorUnit(IndicatorEnum.IQRIndicatorEnum).getIndicator());
boxtIndicator.setMeanIndicator((MeanIndicator)getIndicatorUnit(IndicatorEnum.MeanIndicatorEnum).getIndicator());
boxtIndicator.setMedianIndicator((MedianIndicator)getIndicatorUnit(IndicatorEnum.MedianIndicatorEnum).getIndicator());
indicatorUnit.setChildren(createCategoryIndicatorUnits(IndicatorEnum.BoxIIndicatorEnum.getChildren()));
indicatorUnitList.add(indicatorUnit);
break;
case IQRIndicatorEnum:
IQRIndicator iqrIndicator=(IQRIndicator)indicatorUnit.getIndicator();
iqrIndicator.setLowerValue((LowerQuartileIndicator)getIndicatorUnit(IndicatorEnum.LowerQuartileIndicatorEnum).getIndicator());
iqrIndicator.setUpperValue((UpperQuartileIndicator)getIndicatorUnit(IndicatorEnum.UpperQuartileIndicatorEnum).getIndicator());
indicatorUnit.setChildren(createCategoryIndicatorUnits(IndicatorEnum.IQRIndicatorEnum.getChildren()));
indicatorUnitList.add(indicatorUnit);
break;
case RangeIndicatorEnum:
RangeIndicator rangeIndicator=(RangeIndicator)indicatorUnit.getIndicator();
rangeIndicator.setLowerValue((MinValueIndicator)getIndicatorUnit(IndicatorEnum.MinValueIndicatorEnum).getIndicator());
rangeIndicator.setUpperValue((MaxValueIndicator)getIndicatorUnit(IndicatorEnum.MaxValueIndicatorEnum).getIndicator());
indicatorUnit.setChildren(createCategoryIndicatorUnits(IndicatorEnum.RangeIndicatorEnum.getChildren()));
indicatorUnitList.add(indicatorUnit);
break;
case PhoneNumbStatisticsIndicatorEnum:
PhoneNumbStatisticsIndicator phoneNumbIndicator=(PhoneNumbStatisticsIndicator)indicatorUnit.getIndicator();
phoneNumbIndicator.setValidPhoneCountIndicator((ValidPhoneCountIndicator)getIndicatorUnit(IndicatorEnum.ValidPhoneCountIndicatorEnum).getIndicator());
phoneNumbIndicator.setPossiblePhoneCountIndicator((PossiblePhoneCountIndicator)getIndicatorUnit(IndicatorEnum.PossiblePhoneCountIndicatorEnum).getIndicator());
phoneNumbIndicator.setValidRegCodeCountIndicator((ValidRegCodeCountIndicator)getIndicatorUnit(IndicatorEnum.ValidRegCodeCountIndicatorEnum).getIndicator());
phoneNumbIndicator.setInvalidRegCodeCountIndicator((InvalidRegCodeCountIndicator)getIndicatorUnit(IndicatorEnum.InvalidRegCodeCountIndicatorEnum).getIndicator());
phoneNumbIndicator.setWellFormE164PhoneCountIndicator((WellFormE164PhoneCountIndicator)getIndicatorUnit(IndicatorEnum.WellFormE164PhoneCountIndicatorEnum).getIndicator());
phoneNumbIndicator.setWellFormIntePhoneCountIndicator((WellFormIntePhoneCountIndicatorImpl)getIndicatorUnit(IndicatorEnum.WellFormIntePhoneCountIndicatorEnum).getIndicator());
phoneNumbIndicator.setWellFormNationalPhoneCountIndicator((WellFormNationalPhoneCountIndicatorImpl)getIndicatorUnit(IndicatorEnum.WellFormNationalPhoneCountIndicatorEnum).getIndicator());
phoneNumbIndicator.setFormatFreqPieIndicator((FormatFreqPieIndicatorImpl)getIndicatorUnit(IndicatorEnum.FormatFreqPieIndictorEnum).getIndicator());
indicatorUnit.setChildren(createCategoryIndicatorUnits(IndicatorEnum.PhoneNumbStatisticsIndicatorEnum.getChildren()));
indicatorUnitList.add(indicatorUnit);
break;
default :
indicatorUnitList.add(indicatorUnit);
break;
}
}
return indicatorUnitList.toArray(new IndicatorUnit[indicatorUnitList.size()]);
}",0.9962850853054486
138169,"/** 
 * Handle the category IndicatorEnum.
 */
private void processCategoryIndicator(){
  List<IndicatorEnum> categoryEnumList=new ArrayList<IndicatorEnum>();
  listCopy(categoryEnumList,flatIndicatorEnumList);
  Iterator<IndicatorEnum> iterator=flatIndicatorEnumList.iterator();
  List<IndicatorEnum> currentCountsChildren=new ArrayList<IndicatorEnum>();
  List<IndicatorEnum> currentBOXChildren=new ArrayList<IndicatorEnum>();
  while (iterator.hasNext()) {
    IndicatorEnum indEnum=iterator.next();
    if (countsEnumChildren.contains(indEnum)) {
      currentCountsChildren.add(indEnum);
      continue;
    }
    if (boxEnumChildren.contains(indEnum)) {
      currentBOXChildren.add(indEnum);
    }
    if ((indEnum != IndicatorEnum.CountsIndicatorEnum) && (indEnum != IndicatorEnum.BoxIIndicatorEnum) && indEnum.hasChildren()) {
      for (      IndicatorEnum childrenEnum : indEnum.getChildren()) {
        categoryEnumList.remove(childrenEnum);
      }
    }
  }
  if (currentCountsChildren.size() == countsEnumChildren.size() && flatIndicatorEnumList.contains(IndicatorEnum.CountsIndicatorEnum)) {
    categoryEnumList.removeAll(currentCountsChildren);
  }
 else {
    categoryEnumList.remove(IndicatorEnum.CountsIndicatorEnum);
  }
  if (currentBOXChildren.size() == boxEnumChildren.size() && flatIndicatorEnumList.contains(IndicatorEnum.BoxIIndicatorEnum)) {
    categoryEnumList.removeAll(currentBOXChildren);
  }
 else {
    categoryEnumList.remove(IndicatorEnum.BoxIIndicatorEnum);
  }
  plainIndicatorUnits=createCategoryIndicatorUnits(categoryEnumList.toArray(new IndicatorEnum[categoryEnumList.size()]));
}","/** 
 * Handle the category IndicatorEnum.
 */
private void processCategoryIndicator(){
  List<IndicatorEnum> categoryEnumList=new ArrayList<IndicatorEnum>();
  listCopy(categoryEnumList,flatIndicatorEnumList);
  Iterator<IndicatorEnum> iterator=flatIndicatorEnumList.iterator();
  List<IndicatorEnum> currentCountsChildren=new ArrayList<IndicatorEnum>();
  List<IndicatorEnum> currentBOXChildren=new ArrayList<IndicatorEnum>();
  while (iterator.hasNext()) {
    IndicatorEnum indEnum=iterator.next();
    if (countsEnumChildren.contains(indEnum)) {
      currentCountsChildren.add(indEnum);
      continue;
    }
    if (boxEnumChildren.contains(indEnum)) {
      currentBOXChildren.add(indEnum);
    }
    if (null != indEnum && (indEnum != IndicatorEnum.CountsIndicatorEnum) && (indEnum != IndicatorEnum.BoxIIndicatorEnum) && indEnum.hasChildren()) {
      for (      IndicatorEnum childrenEnum : indEnum.getChildren()) {
        categoryEnumList.remove(childrenEnum);
      }
    }
  }
  if (currentCountsChildren.size() == countsEnumChildren.size() && flatIndicatorEnumList.contains(IndicatorEnum.CountsIndicatorEnum)) {
    categoryEnumList.removeAll(currentCountsChildren);
  }
 else {
    categoryEnumList.remove(IndicatorEnum.CountsIndicatorEnum);
  }
  if (currentBOXChildren.size() == boxEnumChildren.size() && flatIndicatorEnumList.contains(IndicatorEnum.BoxIIndicatorEnum)) {
    categoryEnumList.removeAll(currentBOXChildren);
  }
 else {
    categoryEnumList.remove(IndicatorEnum.BoxIIndicatorEnum);
  }
  plainIndicatorUnits=createCategoryIndicatorUnits(categoryEnumList.toArray(new IndicatorEnum[categoryEnumList.size()]));
}",0.9941842669115396
138170,"public static boolean canOpenEditor(RepositoryNode node){
  return node instanceof AnalysisRepNode || node instanceof SysIndicatorDefinitionRepNode || node instanceof PatternRepNode|| node instanceof JrxmlTempleteRepNode|| node instanceof SourceFileRepNode|| node instanceof RuleRepNode|| node instanceof DBConnectionRepNode|| node instanceof MDMConnectionRepNode|| node instanceof ReportRepNode|| node instanceof ReportFileRepNode;
}","public static boolean canOpenEditor(RepositoryNode node){
  return node instanceof AnalysisRepNode || node instanceof SysIndicatorDefinitionRepNode || node instanceof PatternRepNode|| node instanceof JrxmlTempleteRepNode|| node instanceof SourceFileRepNode|| node instanceof RuleRepNode|| node instanceof DBConnectionRepNode|| node instanceof MDMConnectionRepNode|| node instanceof ReportRepNode|| node instanceof ReportFileRepNode|| node instanceof ReportAnalysisRepNode;
}",0.9559471365638766
138171,"/** 
 * build RepositoryNode(Analysis) children according to IResource array.
 * @param analyses
 * @return
 */
private List<IRepositoryNode> buildChildrenAnalysis(List<Analysis> analyses){
  List<IRepositoryNode> nodes=new ArrayList<IRepositoryNode>();
  for (  Analysis analysis : analyses) {
    ModelElement anaEleModelElement=analysis.getModelElement();
    if (null == anaEleModelElement) {
      continue;
    }
    Property anaEleProperty=PropertyHelper.getProperty(anaEleModelElement);
    IRepositoryViewObject medataViewObject=null;
    try {
      medataViewObject=ProxyRepositoryFactory.getInstance().getLastVersion(anaEleProperty.getId());
    }
 catch (    Exception e) {
      log.error(e);
    }
    ReportAnalysisRepNode node=new ReportAnalysisRepNode(medataViewObject,this,ENodeType.TDQ_REPOSITORY_ELEMENT);
    node.setReport(this.getReport());
    node.setAnalysis(analysis);
    node.setId(this.getReport().getName() + analysis.getName());
    nodes.add(node);
  }
  if (nodes.size() > 0) {
    this.getReportSubFolderChildren().clear();
    this.getReportSubFolderChildren().addAll(nodes);
  }
  return this.getReportSubFolderChildren();
}","/** 
 * build RepositoryNode(Analysis) children according to IResource array.
 * @param analyses
 * @return
 */
private List<IRepositoryNode> buildChildrenAnalysis(List<Analysis> analyses){
  List<IRepositoryNode> nodes=new ArrayList<IRepositoryNode>();
  for (  Analysis analysis : analyses) {
    Property anaEleProperty=PropertyHelper.getProperty(analysis);
    IRepositoryViewObject viewObject=null;
    try {
      viewObject=ProxyRepositoryFactory.getInstance().getLastVersion(anaEleProperty.getId());
    }
 catch (    Exception e) {
      log.error(e);
    }
    if (null == viewObject) {
      continue;
    }
    ReportAnalysisRepNode node=new ReportAnalysisRepNode(viewObject,this,ENodeType.TDQ_REPOSITORY_ELEMENT);
    node.setReport(this.getReport());
    node.setAnalysis(analysis);
    node.setId(this.getReport().getName() + analysis.getName());
    nodes.add(node);
  }
  if (nodes.size() > 0) {
    this.getReportSubFolderChildren().clear();
    this.getReportSubFolderChildren().addAll(nodes);
  }
  return this.getReportSubFolderChildren();
}",0.9010791366906474
138172,"/** 
 * DOC xqliu Comment method ""createIndicatorUnit"".
 * @param pfile
 * @param modelElementIndicator
 * @param analysis
 * @param indicatorDefinition
 * @return
 */
public static TypedReturnCode<IndicatorUnit> createIndicatorUnit(Pattern pattern,ModelElementIndicator modelElementIndicator,Analysis analysis,IndicatorDefinition indicatorDefinition){
  TypedReturnCode<IndicatorUnit> result=new TypedReturnCode<IndicatorUnit>();
  for (  Indicator indicator : modelElementIndicator.getIndicators()) {
    if (UDIHelper.getMatchingIndicatorName(indicatorDefinition,pattern).equals(indicator.getName()) && indicator instanceof PatternMatchingIndicator) {
      result.setOk(false);
      result.setMessage(DefaultMessagesImpl.getString(""String_Node_Str""));
      return result;
    }
  }
  Indicator patternMatchingIndicator=null;
  String expressionType=DomainHelper.getExpressionType(pattern);
  boolean isSQLPattern=(ExpressionType.SQL_LIKE.getLiteral().equals(expressionType));
  if (indicatorDefinition != null) {
    patternMatchingIndicator=UDIFactory.createUserDefIndicator(indicatorDefinition,pattern);
  }
 else {
    patternMatchingIndicator=isSQLPattern ? PatternIndicatorFactory.createSqlPatternMatchingIndicator(pattern) : PatternIndicatorFactory.createRegexpMatchingIndicator(pattern);
  }
  IEditorPart theEdit=CorePlugin.getDefault().getCurrentActiveEditor();
  if (theEdit != null && theEdit instanceof AnalysisEditor && analysis.getContext().getConnection() == null) {
    theEdit.doSave(null);
  }
  ExecutionLanguage executionLanguage=analysis.getParameters().getExecutionLanguage();
  DbmsLanguage dbmsLanguage=DbmsLanguageFactory.createDbmsLanguage(analysis);
  if (dbmsLanguage.isSql()) {
    MessageUI.openWarning(DefaultMessagesImpl.getString(""String_Node_Str""));
    result.setOk(false);
    return result;
  }
  boolean isJavaEngin=ExecutionLanguage.JAVA.equals(executionLanguage);
  Expression returnExpression=dbmsLanguage.getRegexp(pattern,isJavaEngin);
  if (ExpressionType.REGEXP.getLiteral().equals(expressionType) && returnExpression == null) {
    String executeType=isJavaEngin ? executionLanguage.getName() : dbmsLanguage.getDbmsName();
    boolean openPattern=MessageDialog.openQuestion(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str"",executeType));
    if (openPattern) {
      RepositoryNode node=(RepositoryNode)RepositoryNodeHelper.recursiveFind(pattern);
      if (RepositoryNodeHelper.canOpenEditor(node)) {
        new OpenItemEditorAction(node).run();
      }
    }
    result.setOk(false);
    return result;
  }
  String javaRexex=DomainHelper.getJavaRegexp(pattern);
  if (javaRexex == null) {
  }
  DataManager dm=analysis.getContext().getConnection();
  if (dm != null) {
    TypedReturnCode<java.sql.Connection> trc=JavaSqlFactory.createConnection((Connection)dm);
    boolean isDelimitedFileConnection=ConnectionUtils.isDelimitedFileConnection((DataProvider)dm);
    boolean isMdmConnection=ConnectionUtils.isMdmConnection((DataProvider)dm);
    if (trc != null) {
      java.sql.Connection conn=trc.getObject();
      if (isDelimitedFileConnection) {
        dbmsLanguage=DbmsLanguageFactory.createDbmsLanguage((DelimitedFileConnection)dm);
      }
 else       if (isMdmConnection) {
        dbmsLanguage=DbmsLanguageFactory.createDbmsLanguage((MDMConnection)dm);
      }
 else {
        try {
          SoftwareSystem softwareSystem=DatabaseContentRetriever.getSoftwareSystem(conn);
          dbmsLanguage=DbmsLanguageFactory.createDbmsLanguage(softwareSystem);
        }
 catch (        SQLException e) {
          log.error(e,e);
        }
      }
    }
    if (!(isSQLPattern || DefinitionHandler.getInstance().canRunRegularExpressionMatchingIndicator(dbmsLanguage,isJavaEngin,pattern) || isDelimitedFileConnection)) {
      result.setOk(false);
      result.setMessage(DefaultMessagesImpl.getString(""String_Node_Str""));
      return result;
    }
  }
  if (indicatorDefinition == null) {
    if (!DefinitionHandler.getInstance().setDefaultIndicatorDefinition(patternMatchingIndicator)) {
      log.error(DefaultMessagesImpl.getString(""String_Node_Str"",patternMatchingIndicator.getName()));
    }
  }
 else {
    patternMatchingIndicator.setIndicatorDefinition(indicatorDefinition);
  }
  IndicatorEnum type=IndicatorEnum.findIndicatorEnum(patternMatchingIndicator.eClass());
  IndicatorUnit addIndicatorUnit=modelElementIndicator.addSpecialIndicator(type,patternMatchingIndicator);
  DependenciesHandler.getInstance().setUsageDependencyOn(analysis,pattern);
  result.setOk(true);
  result.setMessage(DefaultMessagesImpl.getString(""String_Node_Str""));
  result.setObject(addIndicatorUnit);
  return result;
}","/** 
 * DOC xqliu Comment method ""createIndicatorUnit"".
 * @param pfile
 * @param modelElementIndicator
 * @param analysis
 * @param indicatorDefinition
 * @return
 */
public static TypedReturnCode<IndicatorUnit> createIndicatorUnit(Pattern pattern,ModelElementIndicator modelElementIndicator,Analysis analysis,IndicatorDefinition indicatorDefinition){
  TypedReturnCode<IndicatorUnit> result=new TypedReturnCode<IndicatorUnit>();
  for (  Indicator indicator : modelElementIndicator.getIndicators()) {
    if (UDIHelper.getMatchingIndicatorName(indicatorDefinition,pattern).equals(indicator.getName()) && indicator instanceof PatternMatchingIndicator) {
      result.setOk(false);
      result.setMessage(DefaultMessagesImpl.getString(""String_Node_Str""));
      return result;
    }
  }
  Indicator patternMatchingIndicator=null;
  String expressionType=DomainHelper.getExpressionType(pattern);
  boolean isSQLPattern=(ExpressionType.SQL_LIKE.getLiteral().equals(expressionType));
  if (indicatorDefinition != null) {
    patternMatchingIndicator=UDIFactory.createUserDefIndicator(indicatorDefinition,pattern);
  }
 else {
    patternMatchingIndicator=isSQLPattern ? PatternIndicatorFactory.createSqlPatternMatchingIndicator(pattern) : PatternIndicatorFactory.createRegexpMatchingIndicator(pattern);
  }
  IEditorPart theEdit=CorePlugin.getDefault().getCurrentActiveEditor();
  if (theEdit != null && theEdit instanceof AnalysisEditor && analysis.getContext().getConnection() == null) {
    theEdit.doSave(null);
  }
  ExecutionLanguage executionLanguage=analysis.getParameters().getExecutionLanguage();
  DbmsLanguage dbmsLanguage=DbmsLanguageFactory.createDbmsLanguage(analysis);
  if (dbmsLanguage.isSql()) {
    MessageUI.openWarning(DefaultMessagesImpl.getString(""String_Node_Str""));
    result.setOk(false);
    return result;
  }
  boolean isJavaEngin=ExecutionLanguage.JAVA.equals(executionLanguage);
  Expression returnExpression=dbmsLanguage.getRegexp(pattern,isJavaEngin);
  if ((ExpressionType.REGEXP.getLiteral().equals(expressionType) || ExpressionType.SQL_LIKE.getLiteral().equals(expressionType)) && returnExpression == null) {
    String executeType=isJavaEngin ? executionLanguage.getName() : dbmsLanguage.getDbmsName();
    boolean openPattern=MessageDialog.openQuestion(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str"",executeType));
    if (openPattern) {
      RepositoryNode node=(RepositoryNode)RepositoryNodeHelper.recursiveFind(pattern);
      if (RepositoryNodeHelper.canOpenEditor(node)) {
        new OpenItemEditorAction(node).run();
      }
    }
    result.setOk(false);
    return result;
  }
  String javaRexex=DomainHelper.getJavaRegexp(pattern);
  if (javaRexex == null) {
  }
  DataManager dm=analysis.getContext().getConnection();
  if (dm != null) {
    TypedReturnCode<java.sql.Connection> trc=JavaSqlFactory.createConnection((Connection)dm);
    boolean isDelimitedFileConnection=ConnectionUtils.isDelimitedFileConnection((DataProvider)dm);
    boolean isMdmConnection=ConnectionUtils.isMdmConnection((DataProvider)dm);
    if (trc != null) {
      java.sql.Connection conn=trc.getObject();
      if (isDelimitedFileConnection) {
        dbmsLanguage=DbmsLanguageFactory.createDbmsLanguage((DelimitedFileConnection)dm);
      }
 else       if (isMdmConnection) {
        dbmsLanguage=DbmsLanguageFactory.createDbmsLanguage((MDMConnection)dm);
      }
 else {
        try {
          SoftwareSystem softwareSystem=DatabaseContentRetriever.getSoftwareSystem(conn);
          dbmsLanguage=DbmsLanguageFactory.createDbmsLanguage(softwareSystem);
        }
 catch (        SQLException e) {
          log.error(e,e);
        }
      }
    }
    if (!(isSQLPattern || DefinitionHandler.getInstance().canRunRegularExpressionMatchingIndicator(dbmsLanguage,isJavaEngin,pattern) || isDelimitedFileConnection)) {
      result.setOk(false);
      result.setMessage(DefaultMessagesImpl.getString(""String_Node_Str""));
      return result;
    }
  }
  if (indicatorDefinition == null) {
    if (!DefinitionHandler.getInstance().setDefaultIndicatorDefinition(patternMatchingIndicator)) {
      log.error(DefaultMessagesImpl.getString(""String_Node_Str"",patternMatchingIndicator.getName()));
    }
  }
 else {
    patternMatchingIndicator.setIndicatorDefinition(indicatorDefinition);
  }
  IndicatorEnum type=IndicatorEnum.findIndicatorEnum(patternMatchingIndicator.eClass());
  IndicatorUnit addIndicatorUnit=modelElementIndicator.addSpecialIndicator(type,patternMatchingIndicator);
  DependenciesHandler.getInstance().setUsageDependencyOn(analysis,pattern);
  result.setOk(true);
  result.setMessage(DefaultMessagesImpl.getString(""String_Node_Str""));
  result.setObject(addIndicatorUnit);
  return result;
}",0.9932467532467532
138173,"@Override public void mouseDown(MouseEvent e){
  DataManager dm=analysis.getContext().getConnection();
  if (dm == null) {
    masterPage.doSave(null);
  }
  IRepositoryNode patternFolderNode=RepositoryNodeHelper.getLibrariesFolderNode(EResourceConstant.PATTERN_REGEX);
  CheckedTreeSelectionDialog dialog=PatternUtilities.createPatternCheckedTreeSelectionDialog(patternFolderNode);
  if (null != filters) {
    for (    ViewerFilter filter : filters) {
      dialog.addFilter(filter);
    }
  }
  AnalysisType analysisType=analysis.getParameters().getAnalysisType();
  ExecutionLanguage executionLanguage=analysis.getParameters().getExecutionLanguage();
  if (AnalysisType.COLUMN_SET.equals(analysisType)) {
    if (ExecutionLanguage.SQL.equals(executionLanguage)) {
      MessageUI.openWarning(DefaultMessagesImpl.getString(""String_Node_Str""));
      return;
    }
  }
  if (dialog.open() == Window.OK) {
    for (    Object obj : dialog.getResult()) {
      if (obj instanceof PatternRepNode) {
        PatternRepNode patternNode=(PatternRepNode)obj;
        TypedReturnCode<IndicatorUnit> trc=PatternUtilities.createIndicatorUnit(patternNode.getPattern(),meIndicator,analysis);
        if (trc.isOk()) {
          columnDropTree.createOneUnit(treeItem,trc.getObject());
          columnDropTree.setDirty(true);
        }
 else         if (trc.getMessage() != null && !trc.getMessage().trim().equals(""String_Node_Str"")) {
          MessageUI.openError(trc.getMessage());
        }
      }
    }
  }
}","@Override public void mouseDown(MouseEvent e){
  DataManager dm=analysis.getContext().getConnection();
  if (dm == null) {
    masterPage.doSave(null);
  }
  IRepositoryNode patternFolderNode=null;
  AnalysisType analysisType=analysis.getParameters().getAnalysisType();
  ExecutionLanguage executionLanguage=analysis.getParameters().getExecutionLanguage();
  if (AnalysisType.COLUMN_SET.equals(analysisType)) {
    if (ExecutionLanguage.SQL.equals(executionLanguage)) {
      MessageUI.openWarning(DefaultMessagesImpl.getString(""String_Node_Str""));
      return;
    }
 else     if (ExecutionLanguage.JAVA.equals(executionLanguage)) {
      patternFolderNode=RepositoryNodeHelper.getLibrariesFolderNode(EResourceConstant.PATTERN_REGEX);
    }
  }
 else   if (AnalysisType.MULTIPLE_COLUMN.equals(analysisType)) {
    if (ExecutionLanguage.JAVA.equals(executionLanguage)) {
      patternFolderNode=RepositoryNodeHelper.getLibrariesFolderNode(EResourceConstant.PATTERN_REGEX);
    }
  }
  if (null == patternFolderNode) {
    patternFolderNode=RepositoryNodeHelper.getLibrariesFolderNode(EResourceConstant.PATTERNS);
  }
  CheckedTreeSelectionDialog dialog=PatternUtilities.createPatternCheckedTreeSelectionDialog(patternFolderNode);
  if (null != filters) {
    for (    ViewerFilter filter : filters) {
      dialog.addFilter(filter);
    }
  }
  if (dialog.open() == Window.OK) {
    for (    Object obj : dialog.getResult()) {
      if (obj instanceof PatternRepNode) {
        PatternRepNode patternNode=(PatternRepNode)obj;
        TypedReturnCode<IndicatorUnit> trc=PatternUtilities.createIndicatorUnit(patternNode.getPattern(),meIndicator,analysis);
        if (trc.isOk()) {
          columnDropTree.createOneUnit(treeItem,trc.getObject());
          columnDropTree.setDirty(true);
        }
 else         if (trc.getMessage() != null && !trc.getMessage().trim().equals(""String_Node_Str"")) {
          MessageUI.openError(trc.getMessage());
        }
      }
    }
  }
}",0.5668295487208969
138174,"/** 
 * DOC klliu Comment method ""createSystemFolder"".
 * @param node
 * @param resConstant
 * @return
 * @throws PersistenceException
 */
public RepositoryNode createRepositoryNodeSystemFolder(FolderHelper folderHelper,RepositoryNode node,EResourceConstant resConstant) throws PersistenceException {
  IRepositoryViewObject folder=null;
  DQRepositoryNode subFolderNode=null;
  if (folderHelper != null) {
    FolderItem folder2=folderHelper.getFolder(resConstant.getPath());
    folder=new Folder(folder2.getProperty(),retrieveRepObjectTypeByPath(resConstant.getPath()));
  }
 else {
    folder=ProxyRepositoryFactory.getInstance().createFolder(retrieveRepObjectTypeByPath(resConstant.getPath()),Path.EMPTY,resConstant.getName());
  }
switch (resConstant) {
case ANALYSIS:
    AnalysisFolderRepNode anaFolderNode=new AnalysisFolderRepNode(folder,node,ENodeType.SYSTEM_FOLDER);
  folder.setRepositoryNode(anaFolderNode);
node.getChildren().add(anaFolderNode);
return anaFolderNode;
case REPORTS:
ReportFolderRepNode repFolderNode=new ReportFolderRepNode(folder,node,ENodeType.SYSTEM_FOLDER);
folder.setRepositoryNode(repFolderNode);
node.getChildren().add(repFolderNode);
return repFolderNode;
case INDICATORS:
IndicatorFolderRepNode indicatorFolderRepNode=new IndicatorFolderRepNode(folder,node,ENodeType.SYSTEM_FOLDER);
folder.setRepositoryNode(indicatorFolderRepNode);
node.getChildren().add(indicatorFolderRepNode);
return indicatorFolderRepNode;
case JRXML_TEMPLATE:
JrxmlTempFolderRepNode jrxmlFolderNode=new JrxmlTempFolderRepNode(folder,node,ENodeType.SYSTEM_FOLDER);
folder.setRepositoryNode(jrxmlFolderNode);
node.getChildren().add(jrxmlFolderNode);
return jrxmlFolderNode;
case SOURCE_FILES:
SourceFileFolderRepNode sourceFileFolder=new SourceFileFolderRepNode(folder,node,ENodeType.SYSTEM_FOLDER);
folder.setRepositoryNode(sourceFileFolder);
node.getChildren().add(sourceFileFolder);
return sourceFileFolder;
case PATTERNS:
PatternFolderRepNode regexFolder2=new PatternFolderRepNode(folder,node,ENodeType.SYSTEM_FOLDER);
folder.setRepositoryNode(regexFolder2);
node.getChildren().add(regexFolder2);
return regexFolder2;
case RULES:
RulesFolderRepNode ruleFolder=new RulesFolderRepNode(folder,node,ENodeType.SYSTEM_FOLDER);
folder.setRepositoryNode(ruleFolder);
node.getChildren().add(ruleFolder);
return ruleFolder;
case DB_CONNECTIONS:
DBConnectionFolderRepNode dbFolder=new DBConnectionFolderRepNode(folder,node,ENodeType.SYSTEM_FOLDER);
folder.setRepositoryNode(dbFolder);
node.getChildren().add(dbFolder);
return dbFolder;
case MDM_CONNECTIONS:
MDMConnectionFolderRepNode mdmFolder=new MDMConnectionFolderRepNode(folder,node,ENodeType.SYSTEM_FOLDER);
folder.setRepositoryNode(mdmFolder);
node.getChildren().add(mdmFolder);
return mdmFolder;
case FILEDELIMITED:
DFConnectionFolderRepNode dfmFolder=new DFConnectionFolderRepNode(folder,node,ENodeType.SYSTEM_FOLDER);
folder.setRepositoryNode(dfmFolder);
node.getChildren().add(dfmFolder);
return dfmFolder;
case EXCHANGE:
ExchangeFolderRepNode exchangeFolder=new ExchangeFolderRepNode(folder,node,ENodeType.SYSTEM_FOLDER);
folder.setRepositoryNode(exchangeFolder);
node.getChildren().add(exchangeFolder);
return exchangeFolder;
default :
subFolderNode=new DQRepositoryNode(folder,node,ENodeType.SYSTEM_FOLDER);
folder.setRepositoryNode(subFolderNode);
node.getChildren().add(subFolderNode);
break;
}
return subFolderNode;
}","/** 
 * DOC klliu Comment method ""createSystemFolder"".
 * @param node
 * @param resConstant
 * @return
 * @throws PersistenceException
 */
public RepositoryNode createRepositoryNodeSystemFolder(FolderHelper folderHelper,RepositoryNode node,EResourceConstant resConstant) throws PersistenceException {
  IRepositoryViewObject folder=null;
  DQRepositoryNode subFolderNode=null;
  if (folderHelper != null) {
    FolderItem folder2=folderHelper.getFolder(resConstant.getPath());
    folder=new Folder(folder2.getProperty(),retrieveRepObjectTypeByPath(resConstant.getPath()));
  }
 else {
    folder=ProxyRepositoryFactory.getInstance().createFolder(retrieveRepObjectTypeByPath(resConstant.getPath()),Path.EMPTY,resConstant.getName());
  }
switch (resConstant) {
case ANALYSIS:
    AnalysisFolderRepNode anaFolderNode=new AnalysisFolderRepNode(folder,node,ENodeType.SYSTEM_FOLDER);
  folder.setRepositoryNode(anaFolderNode);
node.getChildren().add(anaFolderNode);
return anaFolderNode;
case REPORTS:
ReportFolderRepNode repFolderNode=new ReportFolderRepNode(folder,node,ENodeType.SYSTEM_FOLDER);
folder.setRepositoryNode(repFolderNode);
node.getChildren().add(repFolderNode);
return repFolderNode;
case INDICATORS:
IndicatorFolderRepNode indicatorFolderRepNode=new IndicatorFolderRepNode(folder,node,ENodeType.SYSTEM_FOLDER);
folder.setRepositoryNode(indicatorFolderRepNode);
node.getChildren().add(indicatorFolderRepNode);
return indicatorFolderRepNode;
case JRXML_TEMPLATE:
JrxmlTempFolderRepNode jrxmlFolderNode=new JrxmlTempFolderRepNode(folder,node,ENodeType.SYSTEM_FOLDER);
folder.setRepositoryNode(jrxmlFolderNode);
node.getChildren().add(jrxmlFolderNode);
return jrxmlFolderNode;
case SOURCE_FILES:
SourceFileFolderRepNode sourceFileFolder=new SourceFileFolderRepNode(folder,node,ENodeType.SYSTEM_FOLDER);
folder.setRepositoryNode(sourceFileFolder);
node.getChildren().add(sourceFileFolder);
return sourceFileFolder;
case PATTERNS:
PatternFolderRepNode regexFolder2=new PatternFolderRepNode(folder,node,ENodeType.SYSTEM_FOLDER);
folder.setRepositoryNode(regexFolder2);
node.getChildren().add(regexFolder2);
return regexFolder2;
case RULES:
RulesFolderRepNode ruleFolder=new RulesFolderRepNode(folder,node,ENodeType.SYSTEM_FOLDER);
folder.setRepositoryNode(ruleFolder);
node.getChildren().add(ruleFolder);
return ruleFolder;
case DB_CONNECTIONS:
DBConnectionFolderRepNode dbFolder=new DBConnectionFolderRepNode(folder,node,ENodeType.SYSTEM_FOLDER);
folder.setRepositoryNode(dbFolder);
node.getChildren().add(dbFolder);
return dbFolder;
case MDM_CONNECTIONS:
MDMConnectionFolderRepNode mdmFolder=new MDMConnectionFolderRepNode(folder,node,ENodeType.SYSTEM_FOLDER);
folder.setRepositoryNode(mdmFolder);
node.getChildren().add(mdmFolder);
return mdmFolder;
case FILEDELIMITED:
DFConnectionFolderRepNode dfmFolder=new DFConnectionFolderRepNode(folder,node,ENodeType.SYSTEM_FOLDER);
folder.setRepositoryNode(dfmFolder);
node.getChildren().add(dfmFolder);
return dfmFolder;
case EXCHANGE:
ExchangeFolderRepNode exchangeFolder=new ExchangeFolderRepNode(folder,node,ENodeType.SYSTEM_FOLDER);
folder.setRepositoryNode(exchangeFolder);
node.getChildren().add(exchangeFolder);
return exchangeFolder;
default :
subFolderNode=new DQRepositoryNode(folder,node,ENodeType.SYSTEM_FOLDER);
folder.setRepositoryNode(subFolderNode);
node.getChildren().add(subFolderNode);
if (resConstant.equals(EResourceConstant.PATTERNS)) {
createRepositoryNodeSystemFolder(folderHelper,subFolderNode,EResourceConstant.PATTERN_REGEX);
createRepositoryNodeSystemFolder(folderHelper,subFolderNode,EResourceConstant.PATTERN_SQL);
}
break;
}
return subFolderNode;
}",0.9655172413793104
138175,"private void selectPagesAllIndicator(){
  IIndicatorNode[] branchNodes=IndicatorTreeModelBuilder.buildIndicatorCategory();
  for (  ModelElementIndicator modelEleIndi : getResult()) {
    List<IndicatorEnum> tempIndicator=modelEleIndi.getTempIndicator();
    if (null != tempIndicator) {
      tempIndicator.clear();
    }
    for (    IIndicatorNode iIndicatorNode : branchNodes) {
      addModelElementIndicator(modelEleIndi,iIndicatorNode);
    }
  }
}","private void selectPagesAllIndicator(boolean selected){
  if (selected) {
    IIndicatorNode[] branchNodes=IndicatorTreeModelBuilder.buildIndicatorCategory();
    for (    ModelElementIndicator modelEleIndi : getResult()) {
      List<IndicatorEnum> tempIndicator=modelEleIndi.getTempIndicator();
      if (null != tempIndicator) {
        tempIndicator.clear();
      }
      for (      IIndicatorNode iIndicatorNode : branchNodes) {
        addModelElementIndicator(modelEleIndi,iIndicatorNode);
      }
    }
  }
 else {
    for (    ModelElementIndicator modelEleIndi : getResult()) {
      modelEleIndi.getTempIndicator().clear();
    }
  }
}",0.8257713248638838
138176,"private void createChildrenNode(Tree tree,TreeItemContainer parentItem,TreeColumn[] treeColumns,IIndicatorNode[] branchNodes){
  boolean expanded=false;
  for (int i=0; i < branchNodes.length; i++) {
    IIndicatorNode indicatorNode=branchNodes[i];
    if (!indicatorNode.getLabel().equals(""String_Node_Str"")) {
      final TreeItemContainer treeItem;
      if (parentItem == null) {
        treeItem=new TreeItemContainer(tree,SWT.NONE,treeColumns.length);
      }
 else {
        treeItem=new TreeItemContainer(parentItem,SWT.NONE,treeColumns.length);
      }
      TreeEditor editor;
      Button checkButton;
      Button rowCheckButton=null;
      Button commonCheckButton;
      List<Button> rowButtonList=new ArrayList<Button>();
      for (int j=0; j < treeColumns.length; j++) {
        IndicatorEnum indicatorEnum=indicatorNode.getIndicatorEnum();
        if (j == 0) {
          treeItem.setText(0,indicatorNode.getLabel());
          if (indicatorEnum != null) {
            treeItem.setData(INDICATORITEM,indicatorNode);
          }
          continue;
        }
 else         if (j == 1 && treeColumns.length > 2) {
          editor=new TreeEditor(tree);
          rowCheckButton=new Button(tree,SWT.CHECK);
          rowCheckButton.addSelectionListener(new RowSelectButtonListener(j,treeItem,indicatorEnum,null));
          checkButtons.add(rowCheckButton);
          Color systemColor=tree.getDisplay().getSystemColor(SWT.COLOR_YELLOW);
          treeItem.setBackground(j,systemColor);
          rowCheckButton.setBackground(systemColor);
          commonCheckButton=rowCheckButton;
        }
 else {
          editor=new TreeEditor(tree);
          checkButton=new Button(tree,SWT.CHECK);
          checkButton.setData(indicatorNode);
          ModelElementIndicator pageIndicator=(ModelElementIndicator)treeColumns[j].getData();
          boolean isMatch=isMatchCurrentIndicator(pageIndicator,indicatorNode);
          if (null != pageIndicator && pageIndicator.tempContains(indicatorEnum)) {
            if (isMatch) {
              checkButton.setSelection(true);
              expanded=true;
            }
          }
          checkButton.setEnabled(isMatch);
          checkButton.addSelectionListener(new ButtonSelectionListener(j,treeItem,indicatorEnum,pageIndicator));
          if (indicatorEnum != null) {
            checkButton.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str"",indicatorEnum.getLabel(),pageIndicator.getElementName()));
          }
          checkButton.setData(MODELELEMENTINDICATORFLAG,pageIndicator);
          commonCheckButton=checkButton;
          rowButtonList.add(checkButton);
          checkButtons.add(checkButton);
        }
        commonCheckButton.pack();
        editor.minimumWidth=commonCheckButton.getSize().x;
        editor.horizontalAlignment=SWT.CENTER;
        editor.setEditor(commonCheckButton,treeItem,j);
        treeItem.setButton(j,commonCheckButton);
      }
      if (rowCheckButton != null) {
        boolean allChecked=true;
        rowCheckButton.setData(ROWINDICATORFLAG,rowButtonList);
        for (        Button btn : rowButtonList) {
          if (!btn.getSelection()) {
            allChecked=false;
          }
        }
        rowCheckButton.setSelection(allChecked);
      }
      if (indicatorNode.hasChildren()) {
        createChildrenNode(tree,treeItem,treeColumns,indicatorNode.getChildren());
      }
      if (expanded) {
        TreeItem item=treeItem.getParentItem();
        while (null != item) {
          item.setExpanded(true);
          item=item.getParentItem();
        }
      }
    }
  }
}","private void createChildrenNode(Tree tree,TreeItemContainer parentItem,TreeColumn[] treeColumns,IIndicatorNode[] branchNodes){
  boolean expanded=false;
  for (int i=0; i < branchNodes.length; i++) {
    IIndicatorNode indicatorNode=branchNodes[i];
    if (!indicatorNode.getLabel().equals(""String_Node_Str"")) {
      final TreeItemContainer treeItem;
      if (parentItem == null) {
        treeItem=new TreeItemContainer(tree,SWT.NONE,treeColumns.length);
        tree.setFocus();
      }
 else {
        treeItem=new TreeItemContainer(parentItem,SWT.NONE,treeColumns.length);
      }
      TreeEditor editor;
      Button checkButton;
      Button rowCheckButton=null;
      Button commonCheckButton;
      List<Button> rowButtonList=new ArrayList<Button>();
      for (int j=0; j < treeColumns.length; j++) {
        IndicatorEnum indicatorEnum=indicatorNode.getIndicatorEnum();
        if (j == 0) {
          treeItem.setText(0,indicatorNode.getLabel());
          if (indicatorEnum != null) {
            treeItem.setData(INDICATORITEM,indicatorNode);
          }
          continue;
        }
 else         if (j == 1 && treeColumns.length > 2) {
          editor=new TreeEditor(tree);
          rowCheckButton=new Button(tree,SWT.CHECK);
          rowCheckButton.addSelectionListener(new RowSelectButtonListener(j,treeItem,indicatorEnum,null));
          checkButtons.add(rowCheckButton);
          Color systemColor=tree.getDisplay().getSystemColor(SWT.COLOR_YELLOW);
          treeItem.setBackground(j,systemColor);
          rowCheckButton.setBackground(systemColor);
          commonCheckButton=rowCheckButton;
        }
 else {
          editor=new TreeEditor(tree);
          checkButton=new Button(tree,SWT.CHECK);
          checkButton.setData(indicatorNode);
          ModelElementIndicator pageIndicator=(ModelElementIndicator)treeColumns[j].getData();
          boolean isMatch=isMatchCurrentIndicator(pageIndicator,indicatorNode);
          if (null != pageIndicator && pageIndicator.tempContains(indicatorEnum)) {
            if (isMatch) {
              checkButton.setSelection(true);
              expanded=true;
            }
          }
          checkButton.setEnabled(isMatch);
          checkButton.addSelectionListener(new ButtonSelectionListener(j,treeItem,indicatorEnum,pageIndicator));
          if (indicatorEnum != null) {
            checkButton.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str"",indicatorEnum.getLabel(),pageIndicator.getElementName()));
          }
          checkButton.setData(MODELELEMENTINDICATORFLAG,pageIndicator);
          commonCheckButton=checkButton;
          rowButtonList.add(checkButton);
          checkButtons.add(checkButton);
        }
        commonCheckButton.pack();
        editor.minimumWidth=commonCheckButton.getSize().x;
        editor.horizontalAlignment=SWT.CENTER;
        editor.setEditor(commonCheckButton,treeItem,j);
        treeItem.setButton(j,commonCheckButton);
      }
      if (rowCheckButton != null) {
        boolean allChecked=true;
        rowCheckButton.setData(ROWINDICATORFLAG,rowButtonList);
        for (        Button btn : rowButtonList) {
          if (!btn.getSelection()) {
            allChecked=false;
          }
        }
        rowCheckButton.setSelection(allChecked);
      }
      if (indicatorNode.hasChildren()) {
        createChildrenNode(tree,treeItem,treeColumns,indicatorNode.getChildren());
      }
      if (expanded) {
        TreeItem item=treeItem.getParentItem();
        while (null != item) {
          item.setExpanded(true);
          item=item.getParentItem();
        }
      }
    }
  }
}",0.9965531504205156
138177,"/** 
 * DOC yyi 2010-05-19 select all enabled indicators on Ctrl+Shift+[A|N] is down or other case.
 * @param selected
 */
public void selectAllIndicators(boolean selected){
  for (  Button checkButton : checkButtons) {
    if (checkButton.isDisposed()) {
      continue;
    }
    if (checkButton.isEnabled() && selected != checkButton.getSelection()) {
      checkButton.setSelection(selected);
      Listener[] listeners=checkButton.getListeners(SWT.Selection);
      if (listeners.length > 0) {
        TypedListener typedListener=(TypedListener)checkButton.getListeners(SWT.Selection)[0];
        if (typedListener.getEventListener() instanceof ButtonSelectionListener) {
          ButtonSelectionListener listener=(ButtonSelectionListener)typedListener.getEventListener();
          Event e=new Event();
          e.widget=checkButton;
          listener.widgetSelected(new SelectionEvent(e));
        }
      }
    }
  }
  if (isUsePaging()) {
    selectPagesAllIndicator();
  }
}","/** 
 * DOC yyi 2010-05-19 select all enabled indicators on Ctrl+Shift+[A|N] is down or other case.
 * @param selected
 */
public void selectAllIndicators(boolean selected){
  for (  Button checkButton : checkButtons) {
    if (checkButton.isDisposed()) {
      continue;
    }
    if (checkButton.isEnabled() && selected != checkButton.getSelection()) {
      checkButton.setSelection(selected);
      Listener[] listeners=checkButton.getListeners(SWT.Selection);
      if (listeners.length > 0) {
        TypedListener typedListener=(TypedListener)checkButton.getListeners(SWT.Selection)[0];
        if (typedListener.getEventListener() instanceof ButtonSelectionListener) {
          ButtonSelectionListener listener=(ButtonSelectionListener)typedListener.getEventListener();
          Event e=new Event();
          e.widget=checkButton;
          listener.widgetSelected(new SelectionEvent(e));
        }
      }
    }
  }
  if (isUsePaging()) {
    selectPagesAllIndicator(selected);
  }
}",0.9959636730575177
138178,"/** 
 * when user paging from page1 to page10 ,if we turn to the last page ,the page2-page9 have not been loaded ,and this method is used to load temp indicators on those(2-9) pages. DOC gdbu Comment method ""loadPageTempIndicator"".
 * @param toPage
 */
private void loadPageTempIndicator(int toPage){
  if (this.currentPage < toPage) {
    while (this.currentPage < toPage) {
      this.currentPage++;
      int from=(this.currentPage - 1) * this.pageSize;
      int end=this.currentPage * this.pageSize;
      for (int i=from; i < end; i++) {
        List<IndicatorEnum> tempIndicator=getResult()[i].getTempIndicator();
        if (null != tempIndicator && tempIndicator.isEmpty()) {
          getResult()[i].copyOldIndicatorEnum();
        }
      }
    }
  }
 else   if (this.currentPage > toPage) {
    while (this.currentPage > toPage) {
      this.currentPage--;
      int from=(this.currentPage - 1) * this.pageSize;
      int end=this.currentPage * this.pageSize;
      for (int i=from; i > end; i--) {
        List<IndicatorEnum> tempIndicator=getResult()[i].getTempIndicator();
        if (null != tempIndicator && tempIndicator.isEmpty()) {
          getResult()[i].copyOldIndicatorEnum();
        }
      }
    }
  }
 else {
    return;
  }
}","/** 
 * when user paging from page1 to page10 ,if we turn to the last page ,the page2-page9 have not been loaded ,and this method is used to load temp indicators on those(2-9) pages. DOC gdbu Comment method ""loadPageTempIndicator"".
 * @param toPage
 */
private void loadPageTempIndicator(int toPage){
  if (this.currentPage < toPage) {
    while (this.currentPage < toPage) {
      this.currentPage++;
      int from=(this.currentPage - 1) * this.pageSize;
      int end=this.currentPage * this.pageSize < this.allColumnsCountSize ? this.currentPage * this.pageSize : this.allColumnsCountSize;
      for (int i=from; i < end; i++) {
        List<IndicatorEnum> tempIndicator=getResult()[i].getTempIndicator();
        if (null != tempIndicator && tempIndicator.isEmpty()) {
          getResult()[i].copyOldIndicatorEnum();
        }
      }
    }
  }
 else   if (this.currentPage > toPage) {
    while (this.currentPage > toPage) {
      this.currentPage--;
      int from=(this.currentPage - 1) * this.pageSize;
      int end=this.currentPage * this.pageSize < this.allColumnsCountSize ? this.currentPage * this.pageSize : this.allColumnsCountSize;
      for (int i=from; i > end; i--) {
        List<IndicatorEnum> tempIndicator=getResult()[i].getTempIndicator();
        if (null != tempIndicator && tempIndicator.isEmpty()) {
          getResult()[i].copyOldIndicatorEnum();
        }
      }
    }
  }
 else {
    return;
  }
}",0.9337304542069992
138179,"@Override public void createPartControl(final Composite parent){
  ScrolledComposite scrolledComposite=new ScrolledComposite(parent,SWT.V_SCROLL);
  scrolledComposite.setExpandHorizontal(true);
  scrolledComposite.setExpandVertical(true);
  Composite mainComposite=new Composite(scrolledComposite,SWT.NONE);
  scrolledComposite.setContent(mainComposite);
  BorderLayout blay=new BorderLayout();
  mainComposite.setLayout(blay);
  final Composite composite=new Composite(mainComposite,SWT.NONE);
  composite.setLayoutData(BorderLayout.NORTH);
  GridLayout layout=new GridLayout();
  layout.marginHeight=0;
  layout.marginWidth=0;
  composite.setLayout(layout);
  Composite coboCom=new Composite(composite,SWT.NONE);
  layout=new GridLayout();
  layout.numColumns=5;
  coboCom.setLayout(layout);
  GridData data=new GridData();
  data.horizontalAlignment=GridData.CENTER;
  coboCom.setLayoutData(data);
  buttonJava=new Button(coboCom,SWT.RADIO);
  buttonJava.setText(ExecutionLanguage.JAVA.getLiteral());
  data=new GridData();
  buttonJava.setLayoutData(data);
  buttonJava.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      isJavaEngine=true;
      sqlButton.setEnabled(false);
      dbCombo.setEnabled(false);
      functionNameText.setEnabled(false);
    }
  }
);
  buttonSql=new Button(coboCom,SWT.RADIO);
  buttonSql.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  buttonSql.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      isJavaEngine=false;
      sqlButton.setEnabled(true);
      dbCombo.setEnabled(true);
      functionNameText.setEnabled(true);
    }
  }
);
  buttonSql.setSelection(true);
  buttonSql.setEnabled(!isJavaEngine);
  dbCombo=new CCombo(coboCom,SWT.DROP_DOWN | SWT.BORDER);
  dbCombo.setEditable(false);
  data=new GridData();
  data.widthHint=90;
  dbCombo.setLayoutData(data);
  functionLabel=new Label(coboCom,SWT.NONE);
  functionLabel.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  functionNameText=new Text(coboCom,SWT.BORDER);
  functionNameText.setText(PluginConstant.EMPTY_STRING);
  GridData functionNameTextGD=new GridData(SWT.LEFT,SWT.CENTER,false,false,1,1);
  functionNameTextGD.widthHint=100;
  functionNameText.setLayoutData(functionNameTextGD);
  functionNameText.setVisible(false);
  functionLabel.setVisible(false);
  Composite imgCom=new Composite(composite,SWT.NONE);
  imgCom.setLayout(layout);
  data=new GridData();
  data.horizontalAlignment=GridData.END;
  imgCom.setLayoutData(data);
  emoticonLabel=new Label(imgCom,SWT.NONE);
  GridData gd=new GridData();
  gd.heightHint=18;
  gd.widthHint=18;
  emoticonLabel.setLayoutData(gd);
  gd=new GridData();
  gd.heightHint=18;
  gd.widthHint=65;
  resultLabel=new Label(imgCom,SWT.NONE);
  resultLabel.setLayoutData(gd);
  textAreaLabel=new Label(composite,SWT.NONE);
  textAreaLabel.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  testText=new Text(composite,SWT.BORDER | SWT.MULTI | SWT.WRAP| SWT.V_SCROLL);
  data=new GridData(GridData.FILL_HORIZONTAL);
  data.heightHint=40;
  testText.setLayoutData(data);
  testText.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
  GridData textAreaLabelGD=new GridData(SWT.LEFT,SWT.CENTER,false,false,1,1);
  textAreaLabel.setLayoutData(textAreaLabelGD);
  regularLabel=new Label(composite,SWT.NONE);
  regularLabel.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  regularLabel.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
  GridData regularLabelGD=new GridData(SWT.LEFT,SWT.CENTER,false,false,1,1);
  regularLabelGD.widthHint=160;
  regularLabel.setLayoutData(regularLabelGD);
  this.regularText=new Text(composite,SWT.BORDER | SWT.MULTI | SWT.WRAP| SWT.V_SCROLL);
  this.regularText.setLayoutData(data);
  regularText.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
  regularText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      boolean enabled=(!regularText.getText().equals(PluginConstant.EMPTY_STRING)) && (CheckValueUtils.isPatternValue(regularText.getText()));
      if (pattern != null) {
        saveButton.setEnabled(enabled);
      }
      createPatternButton.setEnabled(enabled);
    }
  }
);
  BorderLayout blayout=new BorderLayout();
  Composite bottom=new Composite(mainComposite,SWT.NONE);
  bottom.setLayout(blayout);
  bottom.setLayoutData(BorderLayout.CENTER);
  Composite centerPane=new Composite(bottom,SWT.NONE);
  centerPane.setLayoutData(BorderLayout.CENTER);
  final Composite rightPane=new Composite(bottom,SWT.NONE);
  rightPane.setLayoutData(BorderLayout.EAST);
  GridLayout llayout=new GridLayout();
  llayout.numColumns=3;
  centerPane.setLayout(llayout);
  GridLayout rlayout=new GridLayout();
  rlayout.numColumns=1;
  rightPane.setLayout(rlayout);
  data=new GridData();
  data.heightHint=25;
  data.widthHint=92;
  sqlButton=new Button(centerPane,SWT.PUSH);
  sqlButton.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  sqlButton.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
  sqlButton.setLayoutData(data);
  sqlButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      openSQLEditor();
    }
  }
);
  createPatternButton=new Button(centerPane,SWT.PUSH);
  createPatternButton.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  createPatternButton.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
  data=new GridData();
  data.heightHint=25;
  data.widthHint=92;
  createPatternButton.setLayoutData(data);
  createPatternButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      String language=null;
      if (regularExpression != null) {
        language=regularExpression.getExpression().getLanguage();
      }
 else {
        DbmsLanguage dbmsLanguage=getDbmsLanguage();
        if (dbmsLanguage != null) {
          dbmsLanguage.setFunctionName(getFunctionName());
          language=dbmsLanguage.getDbmsName();
        }
      }
      new CreatePatternAction(ResourceManager.getPatternFolder(),ExpressionType.REGEXP,regularText.getText(),language).run();
    }
  }
);
  createPatternButton.setEnabled(false);
  saveButton=new Button(centerPane,SWT.PUSH);
  saveButton.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  saveButton.setEnabled(false);
  saveButton.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
  data=new GridData();
  data.heightHint=25;
  data.widthHint=92;
  saveButton.setLayoutData(data);
  saveButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      savePattern();
    }
  }
);
  testButton=new Button(rightPane,SWT.PUSH);
  testButton.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  testButton.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
  testButton.setLayoutData(data);
  testButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      testRegularText();
    }
  }
);
  scrolledComposite.setMinSize(mainComposite.computeSize(SWT.DEFAULT,SWT.DEFAULT));
  mainComposite.layout();
  activateContext();
  fillComboData();
}","@Override public void createPartControl(final Composite parent){
  ScrolledComposite scrolledComposite=new ScrolledComposite(parent,SWT.V_SCROLL);
  scrolledComposite.setExpandHorizontal(true);
  scrolledComposite.setExpandVertical(true);
  Composite mainComposite=new Composite(scrolledComposite,SWT.NONE);
  scrolledComposite.setContent(mainComposite);
  BorderLayout blay=new BorderLayout();
  mainComposite.setLayout(blay);
  final Composite composite=new Composite(mainComposite,SWT.NONE);
  composite.setLayoutData(BorderLayout.NORTH);
  GridLayout layout=new GridLayout();
  layout.marginHeight=0;
  layout.marginWidth=0;
  composite.setLayout(layout);
  Composite coboCom=new Composite(composite,SWT.NONE);
  layout=new GridLayout();
  layout.numColumns=5;
  coboCom.setLayout(layout);
  GridData data=new GridData();
  data.horizontalAlignment=GridData.CENTER;
  coboCom.setLayoutData(data);
  buttonJava=new Button(coboCom,SWT.RADIO);
  buttonJava.setText(ExecutionLanguage.JAVA.getLiteral());
  data=new GridData();
  buttonJava.setLayoutData(data);
  buttonJava.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      isJavaEngine=true;
      sqlButton.setEnabled(false);
      dbCombo.setEnabled(false);
      functionNameText.setEnabled(false);
    }
  }
);
  buttonSql=new Button(coboCom,SWT.RADIO);
  buttonSql.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  buttonSql.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      isJavaEngine=false;
      sqlButton.setEnabled(true);
      dbCombo.setEnabled(true);
      functionNameText.setEnabled(true);
    }
  }
);
  buttonSql.setSelection(true);
  buttonSql.setEnabled(!isJavaEngine);
  dbCombo=new CCombo(coboCom,SWT.DROP_DOWN | SWT.BORDER);
  dbCombo.setEditable(false);
  data=new GridData();
  data.widthHint=90;
  dbCombo.setLayoutData(data);
  functionLabel=new Label(coboCom,SWT.NONE);
  functionLabel.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  functionNameText=new Text(coboCom,SWT.BORDER);
  functionNameText.setText(PluginConstant.EMPTY_STRING);
  GridData functionNameTextGD=new GridData(SWT.LEFT,SWT.CENTER,false,false,1,1);
  functionNameTextGD.widthHint=100;
  functionNameText.setLayoutData(functionNameTextGD);
  functionNameText.setVisible(false);
  functionLabel.setVisible(false);
  Composite imgCom=new Composite(composite,SWT.NONE);
  layout=new GridLayout();
  layout.numColumns=2;
  layout.marginRight=50;
  imgCom.setLayout(layout);
  data=new GridData();
  data.horizontalAlignment=GridData.END;
  imgCom.setLayoutData(data);
  emoticonLabel=new Label(imgCom,SWT.NONE);
  GridData gd=new GridData();
  gd.heightHint=18;
  gd.widthHint=18;
  emoticonLabel.setLayoutData(gd);
  gd=new GridData();
  gd.heightHint=18;
  gd.widthHint=65;
  resultLabel=new Label(imgCom,SWT.NONE);
  resultLabel.setLayoutData(gd);
  textAreaLabel=new Label(composite,SWT.NONE);
  textAreaLabel.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  testText=new Text(composite,SWT.BORDER | SWT.MULTI | SWT.WRAP| SWT.V_SCROLL);
  data=new GridData(GridData.FILL_HORIZONTAL);
  data.heightHint=40;
  testText.setLayoutData(data);
  testText.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
  GridData textAreaLabelGD=new GridData(SWT.LEFT,SWT.CENTER,false,false,1,1);
  textAreaLabel.setLayoutData(textAreaLabelGD);
  regularLabel=new Label(composite,SWT.NONE);
  regularLabel.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  regularLabel.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
  GridData regularLabelGD=new GridData(SWT.LEFT,SWT.CENTER,false,false,1,1);
  regularLabelGD.widthHint=160;
  regularLabel.setLayoutData(regularLabelGD);
  this.regularText=new Text(composite,SWT.BORDER | SWT.MULTI | SWT.WRAP| SWT.V_SCROLL);
  this.regularText.setLayoutData(data);
  regularText.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
  regularText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      boolean enabled=(!regularText.getText().equals(PluginConstant.EMPTY_STRING)) && (CheckValueUtils.isPatternValue(regularText.getText()));
      if (pattern != null) {
        saveButton.setEnabled(enabled);
      }
      createPatternButton.setEnabled(enabled);
    }
  }
);
  BorderLayout blayout=new BorderLayout();
  Composite bottom=new Composite(mainComposite,SWT.NONE);
  bottom.setLayout(blayout);
  bottom.setLayoutData(BorderLayout.CENTER);
  Composite centerPane=new Composite(bottom,SWT.NONE);
  centerPane.setLayoutData(BorderLayout.CENTER);
  final Composite rightPane=new Composite(bottom,SWT.NONE);
  rightPane.setLayoutData(BorderLayout.EAST);
  GridLayout llayout=new GridLayout();
  llayout.numColumns=3;
  centerPane.setLayout(llayout);
  GridLayout rlayout=new GridLayout();
  rlayout.numColumns=1;
  rightPane.setLayout(rlayout);
  data=new GridData();
  data.heightHint=25;
  data.widthHint=92;
  sqlButton=new Button(centerPane,SWT.PUSH);
  sqlButton.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  sqlButton.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
  sqlButton.setLayoutData(data);
  sqlButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      openSQLEditor();
    }
  }
);
  createPatternButton=new Button(centerPane,SWT.PUSH);
  createPatternButton.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  createPatternButton.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
  data=new GridData();
  data.heightHint=25;
  data.widthHint=92;
  createPatternButton.setLayoutData(data);
  createPatternButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      String language=null;
      if (regularExpression != null) {
        language=regularExpression.getExpression().getLanguage();
      }
 else {
        DbmsLanguage dbmsLanguage=getDbmsLanguage();
        if (dbmsLanguage != null) {
          dbmsLanguage.setFunctionName(getFunctionName());
          language=dbmsLanguage.getDbmsName();
        }
      }
      new CreatePatternAction(ResourceManager.getPatternFolder(),ExpressionType.REGEXP,regularText.getText(),language).run();
    }
  }
);
  createPatternButton.setEnabled(false);
  saveButton=new Button(centerPane,SWT.PUSH);
  saveButton.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  saveButton.setEnabled(false);
  saveButton.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
  data=new GridData();
  data.heightHint=25;
  data.widthHint=92;
  saveButton.setLayoutData(data);
  saveButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      savePattern();
    }
  }
);
  testButton=new Button(rightPane,SWT.PUSH);
  testButton.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  testButton.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
  testButton.setLayoutData(data);
  testButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      testRegularText();
    }
  }
);
  scrolledComposite.setMinSize(mainComposite.computeSize(SWT.DEFAULT,SWT.DEFAULT));
  mainComposite.layout();
  activateContext();
  fillComboData();
}",0.994919731761837
138180,"/** 
 * Test method for   {@link org.talend.dataprofiler.core.migration.impl.RefactMdmMetadataTask#doExecute()}.
 */
@Test public void testDoExecute(){
  ArrayList<IMigrationTask> taskList=new ArrayList<IMigrationTask>();
  taskList.add(MigrationTaskManager.findMigrationTaskByPID(""String_Node_Str""));
  MigrationTaskManager.doMigrationTask(taskList);
}","/** 
 * Test method for   {@link org.talend.dataprofiler.core.migration.impl.RefactMdmMetadataTask#doExecute()}.
 */
@Test public void testDoExecute(){
  try {
    RefactMdmMetadataTask refactMdmMetadataTask=new RefactMdmMetadataTask();
    refactMdmMetadataTask.doExecute();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}",0.5058139534883721
138181,"/** 
 * Test method for   {@link org.talend.dataprofiler.core.migration.AMigrationTask#execute()}.
 */
@Test public void testExecute(){
  ArrayList<IMigrationTask> taskList=new ArrayList<IMigrationTask>();
  taskList.add(MigrationTaskManager.findMigrationTaskByPID(""String_Node_Str""));
  MigrationTaskManager.doMigrationTask(taskList);
}","/** 
 * Test method for   {@link org.talend.dataprofiler.core.migration.AMigrationTask#execute()}.
 */
@Test public void testExecute(){
  try {
    SplitSysIndicatorTask splitSysIndicatorTask=new SplitSysIndicatorTask();
    splitSysIndicatorTask.doExecute();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}",0.4908536585365853
138182,"@Override protected boolean doExecute() throws Exception {
  IndicatorDefinition definition0=IndicatorDefinitionFileHelper.getSystemIndicatorByName(AVERAGE_LENGTH);
  IndicatorDefinition definition1=IndicatorDefinitionFileHelper.getSystemIndicatorByName(AVERAGE_LENGTH_WITH_BLANK);
  IndicatorDefinition definition2=IndicatorDefinitionFileHelper.getSystemIndicatorByName(AVERAGE_LENGTH_WITH_BLANK_AND_NULL);
  IndicatorDefinition definition3=IndicatorDefinitionFileHelper.getSystemIndicatorByName(AVERAGE_LENGTH_WITH_NULL);
  IndicatorDefinition definition4=IndicatorDefinitionFileHelper.getSystemIndicatorByName(MAXIMAL_LENGTH);
  IndicatorDefinition definition5=IndicatorDefinitionFileHelper.getSystemIndicatorByName(MAXIMAL_LENGTH_WITH_BLANK);
  IndicatorDefinition definition6=IndicatorDefinitionFileHelper.getSystemIndicatorByName(MAXIMAL_LENGTH_WITH_BLANK_AND_NULL);
  IndicatorDefinition definition7=IndicatorDefinitionFileHelper.getSystemIndicatorByName(MAXIMAL_LENGTH_WITH_NULL);
  IndicatorDefinition definition8=IndicatorDefinitionFileHelper.getSystemIndicatorByName(MINIMAL_LENGTH);
  IndicatorDefinition definition9=IndicatorDefinitionFileHelper.getSystemIndicatorByName(MINIMAL_LENGTH_WITH_BLANK);
  IndicatorDefinition definition10=IndicatorDefinitionFileHelper.getSystemIndicatorByName(MINIMAL_LENGTH_WITH_BLANK_AND_NULL);
  IndicatorDefinition definition11=IndicatorDefinitionFileHelper.getSystemIndicatorByName(MINIMAL_LENGTH_WITH_NULL);
  if (definition0 != null && definition1 != null && definition2 != null && definition3 != null && definition4 != null && definition5 != null && definition6 != null && definition7 != null && definition8 != null && definition9 != null && definition10 != null && definition11 != null) {
    IndicatorDefinitionFileHelper.addSqlExpression(definition0,SQLite,""String_Node_Str"");
    IndicatorDefinitionFileHelper.addSqlExpression(definition1,SQLite,""String_Node_Str"");
    IndicatorDefinitionFileHelper.addSqlExpression(definition2,SQLite,""String_Node_Str"");
    IndicatorDefinitionFileHelper.addSqlExpression(definition3,SQLite,""String_Node_Str"");
    IndicatorDefinitionFileHelper.addSqlExpression(definition4,SQLite,""String_Node_Str"");
    IndicatorDefinitionFileHelper.addSqlExpression(definition5,SQLite,""String_Node_Str"");
    IndicatorDefinitionFileHelper.addSqlExpression(definition6,SQLite,""String_Node_Str"");
    IndicatorDefinitionFileHelper.addSqlExpression(definition7,SQLite,""String_Node_Str"");
    IndicatorDefinitionFileHelper.addSqlExpression(definition8,SQLite,""String_Node_Str"");
    IndicatorDefinitionFileHelper.addSqlExpression(definition9,SQLite,""String_Node_Str"");
    IndicatorDefinitionFileHelper.addSqlExpression(definition10,SQLite,""String_Node_Str"");
    IndicatorDefinitionFileHelper.addSqlExpression(definition11,SQLite,""String_Node_Str"");
    return IndicatorDefinitionFileHelper.save(definition0) & IndicatorDefinitionFileHelper.save(definition1) & IndicatorDefinitionFileHelper.save(definition2)& IndicatorDefinitionFileHelper.save(definition3)& IndicatorDefinitionFileHelper.save(definition4)& IndicatorDefinitionFileHelper.save(definition5)& IndicatorDefinitionFileHelper.save(definition6)& IndicatorDefinitionFileHelper.save(definition7)& IndicatorDefinitionFileHelper.save(definition8)& IndicatorDefinitionFileHelper.save(definition9)& IndicatorDefinitionFileHelper.save(definition10)& IndicatorDefinitionFileHelper.save(definition11);
  }
  return false;
}","@Override protected boolean doExecute() throws Exception {
  IndicatorDefinition definition0=IndicatorDefinitionFileHelper.getSystemIndicatorByName(AVERAGE_LENGTH);
  IndicatorDefinition definition1=IndicatorDefinitionFileHelper.getSystemIndicatorByName(AVERAGE_LENGTH_WITH_BLANK);
  IndicatorDefinition definition2=IndicatorDefinitionFileHelper.getSystemIndicatorByName(AVERAGE_LENGTH_WITH_BLANK_AND_NULL);
  IndicatorDefinition definition3=IndicatorDefinitionFileHelper.getSystemIndicatorByName(AVERAGE_LENGTH_WITH_NULL);
  IndicatorDefinition definition4=IndicatorDefinitionFileHelper.getSystemIndicatorByName(MAXIMAL_LENGTH);
  IndicatorDefinition definition5=IndicatorDefinitionFileHelper.getSystemIndicatorByName(MAXIMAL_LENGTH_WITH_BLANK);
  IndicatorDefinition definition6=IndicatorDefinitionFileHelper.getSystemIndicatorByName(MAXIMAL_LENGTH_WITH_BLANK_AND_NULL);
  IndicatorDefinition definition7=IndicatorDefinitionFileHelper.getSystemIndicatorByName(MAXIMAL_LENGTH_WITH_NULL);
  IndicatorDefinition definition8=IndicatorDefinitionFileHelper.getSystemIndicatorByName(MINIMAL_LENGTH);
  IndicatorDefinition definition9=IndicatorDefinitionFileHelper.getSystemIndicatorByName(MINIMAL_LENGTH_WITH_BLANK);
  IndicatorDefinition definition10=IndicatorDefinitionFileHelper.getSystemIndicatorByName(MINIMAL_LENGTH_WITH_BLANK_AND_NULL);
  IndicatorDefinition definition11=IndicatorDefinitionFileHelper.getSystemIndicatorByName(MINIMAL_LENGTH_WITH_NULL);
  if (definition0 != null && definition1 != null && definition2 != null && definition3 != null && definition4 != null && definition5 != null && definition6 != null && definition7 != null && definition8 != null && definition9 != null && definition10 != null && definition11 != null) {
    IndicatorDefinitionFileHelper.addSqlExpression(definition0,SQLITE,""String_Node_Str"");
    IndicatorDefinitionFileHelper.addSqlExpression(definition1,SQLITE,""String_Node_Str"");
    IndicatorDefinitionFileHelper.addSqlExpression(definition2,SQLITE,""String_Node_Str"");
    IndicatorDefinitionFileHelper.addSqlExpression(definition3,SQLITE,""String_Node_Str"");
    IndicatorDefinitionFileHelper.addSqlExpression(definition4,SQLITE,""String_Node_Str"");
    IndicatorDefinitionFileHelper.addSqlExpression(definition5,SQLITE,""String_Node_Str"");
    IndicatorDefinitionFileHelper.addSqlExpression(definition6,SQLITE,""String_Node_Str"");
    IndicatorDefinitionFileHelper.addSqlExpression(definition7,SQLITE,""String_Node_Str"");
    IndicatorDefinitionFileHelper.addSqlExpression(definition8,SQLITE,""String_Node_Str"");
    IndicatorDefinitionFileHelper.addSqlExpression(definition9,SQLITE,""String_Node_Str"");
    IndicatorDefinitionFileHelper.addSqlExpression(definition10,SQLITE,""String_Node_Str"");
    IndicatorDefinitionFileHelper.addSqlExpression(definition11,SQLITE,""String_Node_Str"");
    return IndicatorDefinitionFileHelper.save(definition0) & IndicatorDefinitionFileHelper.save(definition1) & IndicatorDefinitionFileHelper.save(definition2)& IndicatorDefinitionFileHelper.save(definition3)& IndicatorDefinitionFileHelper.save(definition4)& IndicatorDefinitionFileHelper.save(definition5)& IndicatorDefinitionFileHelper.save(definition6)& IndicatorDefinitionFileHelper.save(definition7)& IndicatorDefinitionFileHelper.save(definition8)& IndicatorDefinitionFileHelper.save(definition9)& IndicatorDefinitionFileHelper.save(definition10)& IndicatorDefinitionFileHelper.save(definition11);
  }
  return false;
}",0.9895531050493326
138183,"@Override public List<IRepositoryNode> getChildren(){
  if (!super.getChildren().isEmpty()) {
    return filterResultsIfAny(super.getChildren());
  }
  IRepositoryViewObject object=this.getParent().getObject();
  createRepositoryNodeTableFolderNode(super.getChildren(),object);
  return filterResultsIfAny(super.getChildren());
}","@Override public List<IRepositoryNode> getChildren(){
  if (!super.getChildren().isEmpty()) {
    if (DQRepositoryNode.isUntilSchema()) {
      return super.getChildren();
    }
    return filterResultsIfAny(super.getChildren());
  }
  IRepositoryViewObject object=this.getParent().getObject();
  createRepositoryNodeTableFolderNode(super.getChildren(),object);
  if (DQRepositoryNode.isUntilSchema()) {
    return super.getChildren();
  }
  return filterResultsIfAny(super.getChildren());
}",0.802439024390244
138184,"@Override public List<IRepositoryNode> getChildren(){
  List<IRepositoryNode> repsNodes=new ArrayList<IRepositoryNode>();
  IRepositoryViewObject object=this.getParent().getObject();
  createRepositoryNodeViewFolderNode(repsNodes,object);
  return filterResultsIfAny(repsNodes);
}","@Override public List<IRepositoryNode> getChildren(){
  List<IRepositoryNode> repsNodes=new ArrayList<IRepositoryNode>();
  IRepositoryViewObject object=this.getParent().getObject();
  createRepositoryNodeViewFolderNode(repsNodes,object);
  if (DQRepositoryNode.isUntilSchema()) {
    return repsNodes;
  }
  return filterResultsIfAny(repsNodes);
}",0.89171974522293
138185,"public void run(){
  boolean save=DQRepositoryNode.isOnFilterring();
  String value=DQRepositoryNode.getFilterStr();
  boolean untilSchema=false;
  boolean untilTable=false;
  try {
    if (DIALOG_TYPE_TABLE == getDialogType()) {
      untilSchema=DQRepositoryNode.isUntilSchema();
    }
 else     if (isfViewer) {
      untilTable=DQRepositoryNode.isUntilTable();
    }
    DQRepositoryNode.setFilterStr(filter);
    if (filter.equals(""String_Node_Str"")) {
      DQRepositoryNode.setFiltering(false);
      if (isfViewer) {
        fViewer.refresh();
      }
 else {
        sTableViewer.refresh();
      }
    }
 else {
      DQRepositoryNode.setFiltering(true);
      if (isfViewer) {
        if (DIALOG_TYPE_TABLE == getDialogType()) {
          DQRepositoryNode.setUntilSchema(true);
        }
 else {
          DQRepositoryNode.setUntilTable(true);
        }
        fViewer.refresh();
        fViewer.expandAll();
      }
 else {
        sTableViewer.refresh();
      }
    }
  }
  finally {
    DQRepositoryNode.setFiltering(save);
    DQRepositoryNode.setFilterStr(value);
    if (isfViewer) {
      DQRepositoryNode.setUntilTable(untilTable);
    }
    if (DIALOG_TYPE_TABLE == getDialogType()) {
      DQRepositoryNode.setUntilSchema(untilSchema);
    }
  }
  updateOKStatus();
}","public void run(){
  boolean save=DQRepositoryNode.isOnFilterring();
  String value=DQRepositoryNode.getFilterStr();
  boolean untilSchema=false;
  boolean untilTable=false;
  try {
    if (DIALOG_TYPE_TABLE == getDialogType()) {
      untilSchema=DQRepositoryNode.isUntilSchema();
    }
 else     if (isfViewer) {
      untilTable=DQRepositoryNode.isUntilTable();
    }
    DQRepositoryNode.setFilterStr(filter);
    if (filter.equals(""String_Node_Str"")) {
      DQRepositoryNode.setFiltering(false);
      if (isfViewer) {
        fViewer.refresh();
      }
 else {
        unfoldToCheckedElements();
        sTableViewer.refresh();
      }
    }
 else {
      DQRepositoryNode.setFiltering(true);
      if (isfViewer) {
        if (DIALOG_TYPE_TABLE == getDialogType()) {
          DQRepositoryNode.setUntilSchema(true);
        }
 else {
          DQRepositoryNode.setUntilTable(true);
        }
        fViewer.refresh();
        fViewer.expandAll();
      }
 else {
        sTableViewer.refresh();
      }
    }
  }
  finally {
    DQRepositoryNode.setFiltering(save);
    DQRepositoryNode.setFilterStr(value);
    if (isfViewer) {
      DQRepositoryNode.setUntilTable(untilTable);
    }
    if (DIALOG_TYPE_TABLE == getDialogType()) {
      DQRepositoryNode.setUntilSchema(untilSchema);
    }
  }
  updateOKStatus();
}",0.9866156787762906
138186,"@Override public IStatus runInUIThread(final IProgressMonitor monitor){
  getDisplay().asyncExec(new Runnable(){
    public void run(){
      boolean save=DQRepositoryNode.isOnFilterring();
      String value=DQRepositoryNode.getFilterStr();
      boolean untilSchema=false;
      boolean untilTable=false;
      try {
        if (DIALOG_TYPE_TABLE == getDialogType()) {
          untilSchema=DQRepositoryNode.isUntilSchema();
        }
 else         if (isfViewer) {
          untilTable=DQRepositoryNode.isUntilTable();
        }
        DQRepositoryNode.setFilterStr(filter);
        if (filter.equals(""String_Node_Str"")) {
          DQRepositoryNode.setFiltering(false);
          if (isfViewer) {
            fViewer.refresh();
          }
 else {
            sTableViewer.refresh();
          }
        }
 else {
          DQRepositoryNode.setFiltering(true);
          if (isfViewer) {
            if (DIALOG_TYPE_TABLE == getDialogType()) {
              DQRepositoryNode.setUntilSchema(true);
            }
 else {
              DQRepositoryNode.setUntilTable(true);
            }
            fViewer.refresh();
            fViewer.expandAll();
          }
 else {
            sTableViewer.refresh();
          }
        }
      }
  finally {
        DQRepositoryNode.setFiltering(save);
        DQRepositoryNode.setFilterStr(value);
        if (isfViewer) {
          DQRepositoryNode.setUntilTable(untilTable);
        }
        if (DIALOG_TYPE_TABLE == getDialogType()) {
          DQRepositoryNode.setUntilSchema(untilSchema);
        }
      }
      updateOKStatus();
    }
  }
);
  return Status.OK_STATUS;
}","@Override public IStatus runInUIThread(final IProgressMonitor monitor){
  getDisplay().asyncExec(new Runnable(){
    public void run(){
      boolean save=DQRepositoryNode.isOnFilterring();
      String value=DQRepositoryNode.getFilterStr();
      boolean untilSchema=false;
      boolean untilTable=false;
      try {
        if (DIALOG_TYPE_TABLE == getDialogType()) {
          untilSchema=DQRepositoryNode.isUntilSchema();
        }
 else         if (isfViewer) {
          untilTable=DQRepositoryNode.isUntilTable();
        }
        DQRepositoryNode.setFilterStr(filter);
        if (filter.equals(""String_Node_Str"")) {
          DQRepositoryNode.setFiltering(false);
          if (isfViewer) {
            fViewer.refresh();
          }
 else {
            unfoldToCheckedElements();
            sTableViewer.refresh();
          }
        }
 else {
          DQRepositoryNode.setFiltering(true);
          if (isfViewer) {
            if (DIALOG_TYPE_TABLE == getDialogType()) {
              DQRepositoryNode.setUntilSchema(true);
            }
 else {
              DQRepositoryNode.setUntilTable(true);
            }
            fViewer.refresh();
            fViewer.expandAll();
          }
 else {
            sTableViewer.refresh();
          }
        }
      }
  finally {
        DQRepositoryNode.setFiltering(save);
        DQRepositoryNode.setFilterStr(value);
        if (isfViewer) {
          DQRepositoryNode.setUntilTable(untilTable);
        }
        if (DIALOG_TYPE_TABLE == getDialogType()) {
          DQRepositoryNode.setUntilSchema(untilSchema);
        }
      }
      updateOKStatus();
    }
  }
);
  return Status.OK_STATUS;
}",0.9881278538812786
138187,"@Override public IndicatorParameters getParameters(){
  if (null == super.getParameters()) {
    parameters=IndicatorsFactory.eINSTANCE.createIndicatorParameters();
  }
  if (null == parameters.getTextParameter()) {
    parameters.setTextParameter(IndicatorsFactory.eINSTANCE.createTextParameters());
  }
  return parameters;
}","@Override public IndicatorParameters getParameters(){
  if (null == super.getParameters()) {
    setParameters(IndicatorsFactory.eINSTANCE.createIndicatorParameters());
  }
  if (null == parameters.getTextParameter()) {
    parameters.setTextParameter(IndicatorsFactory.eINSTANCE.createTextParameters());
  }
  return parameters;
}",0.96048632218845
138188,"/** 
 * DOC bZhou Comment method ""updateIndicatorItem"".
 * @param file
 * @throws URISyntaxException
 * @throws IOException
 */
private void updateIndicatorItem(File file) throws IOException, URISyntaxException {
  if (file.getName().endsWith(FactoriesUtil.ANA)) {
    Analysis analysis=(Analysis)getModelElement(file);
    Collection<Indicator> indicators=IndicatorHelper.getIndicators(analysis.getResults());
    for (    Indicator indicator : indicators) {
      String fragment=null;
      IndicatorDefinition indicatorDefinition=indicator.getIndicatorDefinition();
      if (indicatorDefinition != null) {
        if (indicatorDefinition.eIsProxy()) {
          URI uri=((InternalEObject)indicatorDefinition).eProxyURI();
          fragment=uri.lastSegment();
        }
 else {
          fragment=indicatorDefinition.eResource().getURI().lastSegment();
        }
        if (fragment != null && !fragment.contains(FILE_NAME_FLAG)) {
          String replace=fragment.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",FILE_NAME_FLAG);
          FileUtils.replaceInFile(file.getAbsolutePath(),fragment,replace);
        }
      }
    }
  }
}","/** 
 * DOC bZhou Comment method ""updateIndicatorItem"".
 * @param file
 * @throws URISyntaxException
 * @throws IOException
 */
private void updateIndicatorItem(File file) throws IOException, URISyntaxException {
  if (file.getName().endsWith(FactoriesUtil.ANA)) {
    Analysis analysis=(Analysis)getModelElement(file);
    Collection<Indicator> indicators=IndicatorHelper.getIndicators(analysis.getResults());
    for (    Indicator indicator : indicators) {
      String fragment=null;
      IndicatorDefinition indicatorDefinition=indicator.getIndicatorDefinition();
      if (indicatorDefinition != null) {
        if (indicatorDefinition.eIsProxy()) {
          URI uri=((InternalEObject)indicatorDefinition).eProxyURI();
          fragment=uri.lastSegment();
        }
 else {
          fragment=indicatorDefinition.eResource().getURI().lastSegment();
        }
        if (fragment != null && !fragment.contains(FILE_NAME_FLAG) && !DefinitionHandler.FILENAME.equals(fragment)) {
          String replace=fragment.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",FILE_NAME_FLAG);
          FileUtils.replaceInFile(file.getAbsolutePath(),fragment,replace);
        }
      }
    }
  }
}",0.9798149705634988
138189,"/** 
 * DOC bZhou Comment method ""clearUnloadResources"".
 */
private void clearUnloadResources(){
  Iterator<Resource> it=EMFSharedResources.getInstance().getResourceSet().getResources().iterator();
  while (it.hasNext()) {
    Resource resource=it.next();
    if (!resource.isLoaded() || resource.getContents().isEmpty()) {
      it.remove();
    }
  }
}","/** 
 * DOC bZhou Comment method ""clearUnloadResources"".
 */
private void clearUnloadResources(){
  Iterator<Resource> it=EMFSharedResources.getInstance().getResourceSet().getResources().iterator();
  while (it.hasNext()) {
    Resource resource=it.next();
    boolean isNotPlatformExist=!resource.getURI().isPlatform() || !ResourceManager.getRoot().getFile(new Path(resource.getURI().toPlatformString(false))).exists();
    if (!resource.isLoaded() || resource.getContents().isEmpty() || isNotPlatformExist) {
      it.remove();
    }
  }
}",0.7678571428571429
138190,"private boolean isConflict(Property p1,Property p2){
  if (p1 != null && p2 != null) {
    return p1.getId().equals(p2.getId()) || p1.getLabel().equals(p2.getLabel());
  }
  return false;
}","private boolean isConflict(Property p1,Property p2){
  if (p1 != null && p2 != null) {
    boolean isConflict=ResourceHelper.getUUID(p1).equals(ResourceHelper.getUUID(p2));
    boolean isExisted=p1.getId().equals(p2.getId()) || p1.getLabel().equals(p2.getLabel());
    return isConflict || isExisted;
  }
  return false;
}",0.7123287671232876
138191,"@Override public void createPartControl(final Composite parent){
  ScrolledComposite scrolledComposite=new ScrolledComposite(parent,SWT.V_SCROLL);
  scrolledComposite.setExpandHorizontal(true);
  scrolledComposite.setExpandVertical(true);
  Composite mainComposite=new Composite(scrolledComposite,SWT.NONE);
  scrolledComposite.setContent(mainComposite);
  BorderLayout blay=new BorderLayout();
  mainComposite.setLayout(blay);
  final Composite composite=new Composite(mainComposite,SWT.NONE);
  composite.setLayoutData(BorderLayout.NORTH);
  GridLayout layout=new GridLayout();
  layout.marginHeight=0;
  layout.marginWidth=0;
  composite.setLayout(layout);
  Composite coboCom=new Composite(composite,SWT.NONE);
  layout=new GridLayout();
  layout.numColumns=5;
  coboCom.setLayout(layout);
  GridData data=new GridData();
  data.horizontalAlignment=GridData.CENTER;
  coboCom.setLayoutData(data);
  buttonJava=new Button(coboCom,SWT.RADIO);
  buttonJava.setText(ExecutionLanguage.JAVA.getLiteral());
  data=new GridData();
  data.widthHint=120;
  buttonJava.setLayoutData(data);
  buttonJava.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      isJavaEngine=true;
      sqlButton.setEnabled(false);
      dbCombo.setEnabled(false);
    }
  }
);
  buttonSql=new Button(coboCom,SWT.RADIO);
  buttonSql.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  buttonSql.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      isJavaEngine=false;
      sqlButton.setEnabled(true);
      dbCombo.setEnabled(true);
    }
  }
);
  buttonSql.setSelection(true);
  buttonSql.setEnabled(!isJavaEngine);
  dbCombo=new CCombo(coboCom,SWT.DROP_DOWN | SWT.BORDER);
  dbCombo.setEditable(false);
  data=new GridData();
  data.widthHint=100;
  dbCombo.setLayoutData(data);
  functionLabel=new Label(coboCom,SWT.NONE);
  functionLabel.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  functionNameText=new Text(coboCom,SWT.BORDER);
  functionNameText.setText(PluginConstant.EMPTY_STRING);
  GridData functionNameTextGD=new GridData(SWT.LEFT,SWT.CENTER,false,false,1,1);
  functionNameTextGD.widthHint=180;
  functionNameText.setLayoutData(functionNameTextGD);
  functionNameText.setVisible(false);
  functionLabel.setVisible(false);
  Composite imgCom=new Composite(composite,SWT.NONE);
  imgCom.setLayout(layout);
  data=new GridData();
  data.horizontalAlignment=GridData.END;
  imgCom.setLayoutData(data);
  emoticonLabel=new Label(imgCom,SWT.NONE);
  GridData gd=new GridData();
  gd.heightHint=18;
  gd.widthHint=18;
  emoticonLabel.setLayoutData(gd);
  gd=new GridData();
  gd.heightHint=18;
  gd.widthHint=65;
  resultLabel=new Label(imgCom,SWT.NONE);
  resultLabel.setLayoutData(gd);
  textAreaLabel=new Label(composite,SWT.NONE);
  textAreaLabel.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  testText=new Text(composite,SWT.BORDER | SWT.MULTI | SWT.WRAP| SWT.V_SCROLL);
  data=new GridData(GridData.FILL_HORIZONTAL);
  data.heightHint=40;
  testText.setLayoutData(data);
  testText.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
  GridData textAreaLabelGD=new GridData(SWT.LEFT,SWT.CENTER,false,false,1,1);
  textAreaLabel.setLayoutData(textAreaLabelGD);
  regularLabel=new Label(composite,SWT.NONE);
  regularLabel.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  regularLabel.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
  GridData regularLabelGD=new GridData(SWT.LEFT,SWT.CENTER,false,false,1,1);
  regularLabelGD.widthHint=160;
  regularLabel.setLayoutData(regularLabelGD);
  this.regularText=new Text(composite,SWT.BORDER | SWT.MULTI | SWT.WRAP| SWT.V_SCROLL);
  this.regularText.setLayoutData(data);
  regularText.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
  regularText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      boolean enabled=(!regularText.getText().equals(PluginConstant.EMPTY_STRING)) && (CheckValueUtils.isPatternValue(regularText.getText()));
      if (pattern != null) {
        saveButton.setEnabled(enabled);
      }
      createPatternButton.setEnabled(enabled);
    }
  }
);
  BorderLayout blayout=new BorderLayout();
  Composite bottom=new Composite(mainComposite,SWT.NONE);
  bottom.setLayout(blayout);
  bottom.setLayoutData(BorderLayout.CENTER);
  Composite centerPane=new Composite(bottom,SWT.NONE);
  centerPane.setLayoutData(BorderLayout.CENTER);
  final Composite rightPane=new Composite(bottom,SWT.NONE);
  rightPane.setLayoutData(BorderLayout.EAST);
  GridLayout llayout=new GridLayout();
  llayout.numColumns=3;
  centerPane.setLayout(llayout);
  GridLayout rlayout=new GridLayout();
  rlayout.numColumns=1;
  rightPane.setLayout(rlayout);
  data=new GridData();
  data.heightHint=25;
  data.widthHint=92;
  sqlButton=new Button(centerPane,SWT.PUSH);
  sqlButton.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  sqlButton.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
  sqlButton.setLayoutData(data);
  sqlButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      openSQLEditor();
    }
  }
);
  createPatternButton=new Button(centerPane,SWT.PUSH);
  createPatternButton.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  createPatternButton.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
  data=new GridData();
  data.heightHint=25;
  data.widthHint=92;
  createPatternButton.setLayoutData(data);
  createPatternButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      String language=null;
      if (regularExpression != null) {
        language=regularExpression.getExpression().getLanguage();
      }
 else {
        DbmsLanguage dbmsLanguage=getDbmsLanguage();
        if (dbmsLanguage != null) {
          dbmsLanguage.setFunctionName(getFunctionName());
          language=dbmsLanguage.getDbmsName();
        }
      }
      new CreatePatternAction(ResourceManager.getPatternFolder(),ExpressionType.REGEXP,regularText.getText(),language).run();
    }
  }
);
  createPatternButton.setEnabled(false);
  saveButton=new Button(centerPane,SWT.PUSH);
  saveButton.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  saveButton.setEnabled(false);
  saveButton.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
  data=new GridData();
  data.heightHint=25;
  data.widthHint=92;
  saveButton.setLayoutData(data);
  saveButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      savePattern();
    }
  }
);
  testButton=new Button(rightPane,SWT.PUSH);
  testButton.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  testButton.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
  testButton.setLayoutData(data);
  testButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      testRegularText();
    }
  }
);
  scrolledComposite.setMinSize(mainComposite.computeSize(SWT.DEFAULT,SWT.DEFAULT));
  mainComposite.layout();
  activateContext();
  fillComboData();
}","@Override public void createPartControl(final Composite parent){
  ScrolledComposite scrolledComposite=new ScrolledComposite(parent,SWT.V_SCROLL);
  scrolledComposite.setExpandHorizontal(true);
  scrolledComposite.setExpandVertical(true);
  Composite mainComposite=new Composite(scrolledComposite,SWT.NONE);
  scrolledComposite.setContent(mainComposite);
  BorderLayout blay=new BorderLayout();
  mainComposite.setLayout(blay);
  final Composite composite=new Composite(mainComposite,SWT.NONE);
  composite.setLayoutData(BorderLayout.NORTH);
  GridLayout layout=new GridLayout();
  layout.marginHeight=0;
  layout.marginWidth=0;
  composite.setLayout(layout);
  Composite coboCom=new Composite(composite,SWT.NONE);
  layout=new GridLayout();
  layout.numColumns=5;
  coboCom.setLayout(layout);
  GridData data=new GridData();
  data.horizontalAlignment=GridData.CENTER;
  coboCom.setLayoutData(data);
  buttonJava=new Button(coboCom,SWT.RADIO);
  buttonJava.setText(ExecutionLanguage.JAVA.getLiteral());
  data=new GridData();
  buttonJava.setLayoutData(data);
  buttonJava.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      isJavaEngine=true;
      sqlButton.setEnabled(false);
      dbCombo.setEnabled(false);
      functionNameText.setEnabled(false);
    }
  }
);
  buttonSql=new Button(coboCom,SWT.RADIO);
  buttonSql.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  buttonSql.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      isJavaEngine=false;
      sqlButton.setEnabled(true);
      dbCombo.setEnabled(true);
      functionNameText.setEnabled(true);
    }
  }
);
  buttonSql.setSelection(true);
  buttonSql.setEnabled(!isJavaEngine);
  dbCombo=new CCombo(coboCom,SWT.DROP_DOWN | SWT.BORDER);
  dbCombo.setEditable(false);
  data=new GridData();
  data.widthHint=90;
  dbCombo.setLayoutData(data);
  functionLabel=new Label(coboCom,SWT.NONE);
  functionLabel.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  functionNameText=new Text(coboCom,SWT.BORDER);
  functionNameText.setText(PluginConstant.EMPTY_STRING);
  GridData functionNameTextGD=new GridData(SWT.LEFT,SWT.CENTER,false,false,1,1);
  functionNameTextGD.widthHint=100;
  functionNameText.setLayoutData(functionNameTextGD);
  functionNameText.setVisible(false);
  functionLabel.setVisible(false);
  Composite imgCom=new Composite(composite,SWT.NONE);
  imgCom.setLayout(layout);
  data=new GridData();
  data.horizontalAlignment=GridData.END;
  imgCom.setLayoutData(data);
  emoticonLabel=new Label(imgCom,SWT.NONE);
  GridData gd=new GridData();
  gd.heightHint=18;
  gd.widthHint=18;
  emoticonLabel.setLayoutData(gd);
  gd=new GridData();
  gd.heightHint=18;
  gd.widthHint=65;
  resultLabel=new Label(imgCom,SWT.NONE);
  resultLabel.setLayoutData(gd);
  textAreaLabel=new Label(composite,SWT.NONE);
  textAreaLabel.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  testText=new Text(composite,SWT.BORDER | SWT.MULTI | SWT.WRAP| SWT.V_SCROLL);
  data=new GridData(GridData.FILL_HORIZONTAL);
  data.heightHint=40;
  testText.setLayoutData(data);
  testText.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
  GridData textAreaLabelGD=new GridData(SWT.LEFT,SWT.CENTER,false,false,1,1);
  textAreaLabel.setLayoutData(textAreaLabelGD);
  regularLabel=new Label(composite,SWT.NONE);
  regularLabel.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  regularLabel.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
  GridData regularLabelGD=new GridData(SWT.LEFT,SWT.CENTER,false,false,1,1);
  regularLabelGD.widthHint=160;
  regularLabel.setLayoutData(regularLabelGD);
  this.regularText=new Text(composite,SWT.BORDER | SWT.MULTI | SWT.WRAP| SWT.V_SCROLL);
  this.regularText.setLayoutData(data);
  regularText.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
  regularText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      boolean enabled=(!regularText.getText().equals(PluginConstant.EMPTY_STRING)) && (CheckValueUtils.isPatternValue(regularText.getText()));
      if (pattern != null) {
        saveButton.setEnabled(enabled);
      }
      createPatternButton.setEnabled(enabled);
    }
  }
);
  BorderLayout blayout=new BorderLayout();
  Composite bottom=new Composite(mainComposite,SWT.NONE);
  bottom.setLayout(blayout);
  bottom.setLayoutData(BorderLayout.CENTER);
  Composite centerPane=new Composite(bottom,SWT.NONE);
  centerPane.setLayoutData(BorderLayout.CENTER);
  final Composite rightPane=new Composite(bottom,SWT.NONE);
  rightPane.setLayoutData(BorderLayout.EAST);
  GridLayout llayout=new GridLayout();
  llayout.numColumns=3;
  centerPane.setLayout(llayout);
  GridLayout rlayout=new GridLayout();
  rlayout.numColumns=1;
  rightPane.setLayout(rlayout);
  data=new GridData();
  data.heightHint=25;
  data.widthHint=92;
  sqlButton=new Button(centerPane,SWT.PUSH);
  sqlButton.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  sqlButton.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
  sqlButton.setLayoutData(data);
  sqlButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      openSQLEditor();
    }
  }
);
  createPatternButton=new Button(centerPane,SWT.PUSH);
  createPatternButton.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  createPatternButton.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
  data=new GridData();
  data.heightHint=25;
  data.widthHint=92;
  createPatternButton.setLayoutData(data);
  createPatternButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      String language=null;
      if (regularExpression != null) {
        language=regularExpression.getExpression().getLanguage();
      }
 else {
        DbmsLanguage dbmsLanguage=getDbmsLanguage();
        if (dbmsLanguage != null) {
          dbmsLanguage.setFunctionName(getFunctionName());
          language=dbmsLanguage.getDbmsName();
        }
      }
      new CreatePatternAction(ResourceManager.getPatternFolder(),ExpressionType.REGEXP,regularText.getText(),language).run();
    }
  }
);
  createPatternButton.setEnabled(false);
  saveButton=new Button(centerPane,SWT.PUSH);
  saveButton.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  saveButton.setEnabled(false);
  saveButton.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
  data=new GridData();
  data.heightHint=25;
  data.widthHint=92;
  saveButton.setLayoutData(data);
  saveButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      savePattern();
    }
  }
);
  testButton=new Button(rightPane,SWT.PUSH);
  testButton.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  testButton.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
  testButton.setLayoutData(data);
  testButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      testRegularText();
    }
  }
);
  scrolledComposite.setMinSize(mainComposite.computeSize(SWT.DEFAULT,SWT.DEFAULT));
  mainComposite.layout();
  activateContext();
  fillComboData();
}",0.9924801750068362
138192,"public static DQRepositoryNode getPreviouFilteredNode(DQRepositoryNode dqNode){
  if (!allFilteredNode.isEmpty()) {
    DQRepositoryNode findFilteredNode=findPreviouFilteredNode(dqNode);
    if (null != findFilteredNode) {
      return findFilteredNode;
    }
 else {
      DQRepositoryNode findFilteredNodeByMemorySave=findPreviouFilteredNode(getFilteredNode());
      if (null != findFilteredNodeByMemorySave) {
        return findFilteredNodeByMemorySave;
      }
    }
    return null;
  }
 else {
    return null;
  }
}","/** 
 * DOC gdbu Comment method ""getPreviouFilteredNode"".
 * @param repoNode
 * @return
 */
public static IRepositoryNode getPreviouFilteredNode(IRepositoryNode repoNode){
  if (!allFilteredNodeList.isEmpty()) {
    IRepositoryNode findFilteredNode=findPreviouFilteredNode(repoNode);
    if (null != findFilteredNode) {
      return findFilteredNode;
    }
 else {
    }
    return null;
  }
 else {
    return null;
  }
}",0.587737843551797
138193,"private static DQRepositoryNode findNextFilteredNode(DQRepositoryNode dqNode){
  for (int i=0; i < allFilteredNode.size(); i++) {
    if (allFilteredNode.get(i).equals(dqNode)) {
      if (i != (allFilteredNode.size() - 1)) {
        DQRepositoryNode dqRepositoryNode=allFilteredNode.get(i + 1);
        setFilteredNode(dqRepositoryNode);
        return dqRepositoryNode;
      }
 else {
        DQRepositoryNode dqRepositoryNode=allFilteredNode.get(0);
        setFilteredNode(dqRepositoryNode);
        return dqRepositoryNode;
      }
    }
  }
  return null;
}","private static IRepositoryNode findNextFilteredNode(IRepositoryNode dqNode){
  boolean findGivenNode=false;
  for (int i=0; i < allFilteredNodeList.size(); i++) {
    if (allFilteredNodeList.get(i).equals(dqNode) || findGivenNode) {
      if (!findGivenNode) {
        findGivenNode=true;
        continue;
      }
      if (allFilteredNodeList.get(i).getLabel().toLowerCase().contains(DQRepositoryNode.getFilterStr())) {
        return allFilteredNodeList.get(i);
      }
    }
  }
  return null;
}",0.1222953904045155
138194,"public static List<IRepositoryNode> getUdisRepositoryNodes(boolean withDeleted){
  RepositoryNode node=getRootNode(ERepositoryObjectType.TDQ_LIBRARIES);
  List<IRepositoryNode> udisNodes=new ArrayList<IRepositoryNode>();
  if (node != null) {
    List<IRepositoryNode> childrens=node.getChildren();
    for (    IRepositoryNode subNode : childrens) {
      if (EResourceConstant.INDICATORS.getName().equals((subNode.getObject().getLabel())) || EResourceConstant.RULES.getName().equals((subNode.getObject().getLabel()))) {
        List<IRepositoryNode> subChildren=subNode.getChildren();
        for (        IRepositoryNode udisNode : subChildren) {
          if (udisNode instanceof UserDefIndicatorFolderRepNode || udisNode instanceof RulesFolderRepNode) {
            udisNodes.addAll(getModelElementFromFolder(udisNode,withDeleted));
          }
        }
      }
    }
  }
  return udisNodes;
}","public static List<IRepositoryNode> getUdisRepositoryNodes(boolean withDeleted){
  RepositoryNode node=getRootNode(ERepositoryObjectType.TDQ_LIBRARIES);
  List<IRepositoryNode> udisNodes=new ArrayList<IRepositoryNode>();
  if (node != null) {
    List<IRepositoryNode> childrens=node.getChildren();
    for (    IRepositoryNode subNode : childrens) {
      if (EResourceConstant.INDICATORS.getName().equals((subNode.getObject().getLabel())) || EResourceConstant.RULES.getName().equals((subNode.getObject().getLabel()))) {
        List<IRepositoryNode> subChildren=subNode.getChildren();
        for (        IRepositoryNode udisNode : subChildren) {
          if (udisNode instanceof UserDefIndicatorFolderRepNode || udisNode instanceof RulesSQLFolderRepNode) {
            udisNodes.addAll(getModelElementFromFolder(udisNode,withDeleted));
          }
        }
      }
    }
  }
  return udisNodes;
}",0.9983342587451416
138195,"public static List<RuleRepNode> getRuleRepNodes(IRepositoryNode parrentNode,boolean recursiveFind,boolean withDeleted){
  List<RuleRepNode> result=new ArrayList<RuleRepNode>();
  if (parrentNode != null && (parrentNode instanceof RulesFolderRepNode || parrentNode instanceof RulesSubFolderRepNode)) {
    List<IRepositoryNode> children=parrentNode.getChildren(withDeleted);
    if (children.size() > 0) {
      for (      IRepositoryNode inode : children) {
        if (inode instanceof RuleRepNode) {
          result.add((RuleRepNode)inode);
        }
 else         if (inode instanceof RulesFolderRepNode || inode instanceof RulesSubFolderRepNode) {
          if (recursiveFind) {
            result.addAll(getRuleRepNodes(inode,recursiveFind,withDeleted));
          }
        }
      }
    }
  }
  return result;
}","public static List<RuleRepNode> getRuleRepNodes(IRepositoryNode parrentNode,boolean recursiveFind,boolean withDeleted){
  List<RuleRepNode> result=new ArrayList<RuleRepNode>();
  if (parrentNode != null && (parrentNode instanceof RulesSQLFolderRepNode || parrentNode instanceof RulesSubFolderRepNode)) {
    List<IRepositoryNode> children=parrentNode.getChildren(withDeleted);
    if (children.size() > 0) {
      for (      IRepositoryNode inode : children) {
        if (inode instanceof RuleRepNode) {
          result.add((RuleRepNode)inode);
        }
 else         if (inode instanceof RulesSQLFolderRepNode || inode instanceof RulesSubFolderRepNode) {
          if (recursiveFind) {
            result.addAll(getRuleRepNodes(inode,recursiveFind,withDeleted));
          }
        }
      }
    }
  }
  return result;
}",0.9963503649635036
138196,"private static DQRepositoryNode findPreviouFilteredNode(DQRepositoryNode dqNode){
  for (int i=0; i < allFilteredNode.size(); i++) {
    if (allFilteredNode.get(i).equals(dqNode)) {
      if (i != 0) {
        DQRepositoryNode dqRepositoryNode=allFilteredNode.get(i - 1);
        setFilteredNode(dqRepositoryNode);
        return dqRepositoryNode;
      }
 else {
        DQRepositoryNode dqRepositoryNode=allFilteredNode.get(allFilteredNode.size() - 1);
        setFilteredNode(dqRepositoryNode);
        return dqRepositoryNode;
      }
    }
  }
  return null;
}","private static IRepositoryNode findPreviouFilteredNode(IRepositoryNode dqNode){
  boolean findGivenNode=false;
  for (int i=allFilteredNodeList.size() - 1; i >= 0; i--) {
    if (allFilteredNodeList.get(i).equals(dqNode) || findGivenNode) {
      if (!findGivenNode) {
        findGivenNode=true;
        continue;
      }
      if (allFilteredNodeList.get(i).getLabel().toLowerCase().contains(DQRepositoryNode.getFilterStr())) {
        return allFilteredNodeList.get(i);
      }
    }
  }
  return null;
}",0.1623134328358209
138197,"public static DBColumnRepNode recursiveFindTdColumn(TdColumn tdColumn){
  if (tdColumn == null) {
    return null;
  }
  String uuidTdColumn=ResourceHelper.getUUID(tdColumn);
  if (uuidTdColumn == null) {
    return null;
  }
  IRepositoryNode columnSetNode=recursiveFind(ColumnHelper.getColumnOwnerAsColumnSet(tdColumn));
  if (columnSetNode == null) {
    return null;
  }
  List<IRepositoryNode> children=columnSetNode.getChildren().get(0).getChildren();
  IRepositoryNode iRepositoryNode=children.get(0);
  if (iRepositoryNode != null && iRepositoryNode instanceof DBColumnRepNode) {
    for (    IRepositoryNode childNode : children) {
      if (childNode != null && childNode instanceof DBColumnRepNode) {
        DBColumnRepNode dbColumnRepNode=(DBColumnRepNode)childNode;
        if (uuidTdColumn.equals(ResourceHelper.getUUID(dbColumnRepNode.getTdColumn()))) {
          return dbColumnRepNode;
        }
      }
    }
  }
  return null;
}","public static DBColumnRepNode recursiveFindTdColumn(TdColumn tdColumn){
  if (tdColumn == null) {
    return null;
  }
  String uuidTdColumn=ResourceHelper.getUUID(tdColumn);
  if (uuidTdColumn == null) {
    return null;
  }
  IRepositoryNode columnSetNode=recursiveFind(ColumnHelper.getColumnOwnerAsColumnSet(tdColumn));
  if (columnSetNode == null) {
    return null;
  }
  if (!columnSetNode.hasChildren()) {
    return null;
  }
  if (!columnSetNode.getChildren().get(0).hasChildren()) {
    return null;
  }
  List<IRepositoryNode> children=columnSetNode.getChildren().get(0).getChildren();
  IRepositoryNode iRepositoryNode=children.get(0);
  if (iRepositoryNode != null && iRepositoryNode instanceof DBColumnRepNode) {
    for (    IRepositoryNode childNode : children) {
      if (childNode != null && childNode instanceof DBColumnRepNode) {
        DBColumnRepNode dbColumnRepNode=(DBColumnRepNode)childNode;
        if (uuidTdColumn.equals(ResourceHelper.getUUID(dbColumnRepNode.getTdColumn()))) {
          return dbColumnRepNode;
        }
      }
    }
  }
  return null;
}",0.9316953316953316
138198,"/** 
 * get RepositoryNode which contains a ModelElment(include: Analysis, Report, IndicatorDefinition, Pattern, DqRule) under the parentNode.
 * @param parentNode
 * @param recursive
 * @return
 */
public static List<RepositoryNode> getModelElementRepNodes(RepositoryNode parentNode,boolean recursive){
  List<RepositoryNode> result=new ArrayList<RepositoryNode>();
  List<IRepositoryNode> children=parentNode.getChildren();
  for (  IRepositoryNode node : children) {
    ModelElement modelElementFromRepositoryNode=RepositoryNodeHelper.getModelElementFromRepositoryNode(node);
    if (modelElementFromRepositoryNode != null) {
      result.add((RepositoryNode)node);
    }
 else {
      boolean isFolder=false;
      if (node instanceof AnalysisFolderRepNode) {
        AnalysisFolderRepNode anaFolderRepNode=(AnalysisFolderRepNode)node;
        isFolder=!anaFolderRepNode.isVirtualFolder();
      }
 else       if (node instanceof ReportFolderRepNode) {
        ReportFolderRepNode repFolderRepNode=(ReportFolderRepNode)node;
        isFolder=!repFolderRepNode.isVirtualFolder();
      }
 else       if (node instanceof UserDefIndicatorFolderRepNode || node instanceof PatternRegexFolderRepNode || node instanceof PatternRegexSubFolderRepNode|| node instanceof PatternSqlFolderRepNode|| node instanceof PatternSqlSubFolderRepNode|| node instanceof RulesFolderRepNode) {
        isFolder=true;
      }
      if (isFolder && recursive) {
        result.addAll(getModelElementRepNodes((RepositoryNode)node,recursive));
      }
    }
  }
  return result;
}","/** 
 * get RepositoryNode which contains a ModelElment(include: Analysis, Report, IndicatorDefinition, Pattern, DqRule) under the parentNode.
 * @param parentNode
 * @param recursive
 * @return
 */
public static List<RepositoryNode> getModelElementRepNodes(RepositoryNode parentNode,boolean recursive){
  List<RepositoryNode> result=new ArrayList<RepositoryNode>();
  List<IRepositoryNode> children=parentNode.getChildren();
  for (  IRepositoryNode node : children) {
    ModelElement modelElementFromRepositoryNode=RepositoryNodeHelper.getModelElementFromRepositoryNode(node);
    if (modelElementFromRepositoryNode != null) {
      result.add((RepositoryNode)node);
    }
 else {
      boolean isFolder=false;
      if (node instanceof AnalysisFolderRepNode) {
        AnalysisFolderRepNode anaFolderRepNode=(AnalysisFolderRepNode)node;
        isFolder=!anaFolderRepNode.isVirtualFolder();
      }
 else       if (node instanceof ReportFolderRepNode) {
        ReportFolderRepNode repFolderRepNode=(ReportFolderRepNode)node;
        isFolder=!repFolderRepNode.isVirtualFolder();
      }
 else       if (node instanceof UserDefIndicatorFolderRepNode || node instanceof PatternRegexFolderRepNode || node instanceof PatternRegexSubFolderRepNode|| node instanceof PatternSqlFolderRepNode|| node instanceof PatternSqlSubFolderRepNode|| node instanceof RulesSQLFolderRepNode) {
        isFolder=true;
      }
      if (isFolder && recursive) {
        result.addAll(getModelElementRepNodes((RepositoryNode)node,recursive));
      }
    }
  }
  return result;
}",0.9990369181380416
138199,"public static DQRepositoryNode getNextFilteredNode(DQRepositoryNode dqNode){
  if (!allFilteredNode.isEmpty()) {
    DQRepositoryNode findFilteredNode=findNextFilteredNode(dqNode);
    if (null != findFilteredNode) {
      return findFilteredNode;
    }
 else {
      DQRepositoryNode findFilteredNodeByMemorySave=findNextFilteredNode(getFilteredNode());
      if (null != findFilteredNodeByMemorySave) {
        return findFilteredNodeByMemorySave;
      }
    }
    return null;
  }
 else {
    return null;
  }
}","/** 
 * DOC gdbu Comment method ""getNextFilteredNode"".
 * @param repoNode
 * @return
 */
public static IRepositoryNode getNextFilteredNode(IRepositoryNode repoNode){
  if (!allFilteredNodeList.isEmpty()) {
    IRepositoryNode findFilteredNode=findNextFilteredNode(repoNode);
    if (null != findFilteredNode) {
      return findFilteredNode;
    }
 else {
    }
    return null;
  }
 else {
    return null;
  }
}",0.5862068965517241
138200,"public static DQRepositoryNode getFirstFilteredNode(){
  if (!allFilteredNode.isEmpty()) {
    DQRepositoryNode dqRepositoryNode=allFilteredNode.get(0);
    setFilteredNode(dqRepositoryNode);
    return dqRepositoryNode;
  }
 else {
    return null;
  }
}","/** 
 * DOC gdbu Comment method ""getFirstFilteredNode"".
 * @return
 */
public static IRepositoryNode getFirstFilteredNode(){
  if (!allFilteredNodeList.isEmpty()) {
    for (    IRepositoryNode iNode : allFilteredNodeList) {
      if (iNode.getLabel().toLowerCase().contains(DQRepositoryNode.getFilterStr())) {
        return iNode;
      }
    }
    return null;
  }
 else {
    return null;
  }
}",0.1347626339969372
138201,"@Override public String getLabel(){
  if (getObject() == null) {
    return this.getProperties(EProperties.LABEL).toString();
  }
  return this.getObject().getLabel();
}","@Override public String getLabel(){
  if (getObject() == null) {
    return this.getProperties(EProperties.LABEL).toString();
  }
  return this.getNodeName();
}",0.9361702127659576
138202,"public boolean canMatch(){
  boolean returnVal=false;
  String label=getLabel();
  if (isUntilSchema()) {
    label=getObject().getLabel();
  }
  if (label.toLowerCase().contains(getFilterStr())) {
    RepositoryNodeHelper.setAllFilterNodeList(this);
    if (!isUntilSchema()) {
      return true;
    }
 else {
      returnVal=true;
    }
  }
  DQRepositoryNode childNode=null;
  for (  IRepositoryNode child : getChildren()) {
    childNode=(DQRepositoryNode)child;
    if (isUntilSchema()) {
      if (childNode instanceof DBTableFolderRepNode || childNode instanceof DBViewFolderRepNode) {
        return returnVal ? true : false;
      }
      if (childNode instanceof DBTableRepNode || childNode instanceof DBViewRepNode || childNode instanceof DFTableRepNode|| childNode instanceof MDMSchemaRepNode|| childNode instanceof MDMXmlElementRepNode) {
        continue;
      }
    }
    if (isUntilTable()) {
      if (childNode instanceof DBColumnFolderRepNode) {
        continue;
      }
    }
    if (childNode.canMatch()) {
      return true;
    }
  }
  return false;
}","public boolean canMatch(){
  boolean returnVal=false;
  String label=getLabel();
  if (isUntilSchema()) {
    label=getObject().getLabel();
  }
 else {
    if (null != this.getObject() && this.getObject().isDeleted()) {
      label=this.getProperties(EProperties.LABEL).toString();
    }
 else {
      label=getLabel().toLowerCase();
    }
  }
  if (label.toLowerCase().contains(getFilterStr())) {
    if (!isUntilSchema()) {
      return true;
    }
 else {
      returnVal=true;
    }
  }
  DQRepositoryNode childNode=null;
  for (  IRepositoryNode child : getChildren()) {
    childNode=(DQRepositoryNode)child;
    if (isUntilSchema()) {
      if (childNode instanceof DBTableFolderRepNode || childNode instanceof DBViewFolderRepNode) {
        return returnVal ? true : false;
      }
      if (childNode instanceof DBTableRepNode || childNode instanceof DBViewRepNode || childNode instanceof DFTableRepNode|| childNode instanceof MDMSchemaRepNode|| childNode instanceof MDMXmlElementRepNode) {
        continue;
      }
    }
    if (isUntilTable()) {
      if (childNode instanceof DBColumnFolderRepNode) {
        continue;
      }
    }
    if (childNode.canMatch()) {
      return true;
    }
  }
  return false;
}",0.8796175575836592
138203,"/** 
 * DOC qzhang Comment method ""createIndicatorParameters"".
 * @param indicatorItem
 * @param parameters
 */
private void createIndicatorParameters(TreeItem indicatorItem,IndicatorUnit indicatorUnit){
  TreeItem[] items=indicatorItem.getItems();
  if (indicatorItem != null && !indicatorItem.isDisposed()) {
    for (    TreeItem treeItem : items) {
      if (DATA_PARAM.equals(treeItem.getData(DATA_PARAM))) {
        treeItem.dispose();
      }
    }
  }
  IndicatorParameters parameters=indicatorUnit.getIndicator().getParameters();
  if (parameters == null) {
    return;
  }
  if (hideParameters(indicatorUnit)) {
    return;
  }
  TreeItem iParamItem;
  if (indicatorUnit.getIndicator() instanceof FrequencyIndicator) {
    if (parameters.getBins() == null) {
      return;
    }
    iParamItem=new TreeItem(indicatorItem,SWT.NONE);
    iParamItem.setText(0,DefaultMessagesImpl.getString(""String_Node_Str"") + parameters.getTopN());
    iParamItem.setData(DATA_PARAM,DATA_PARAM);
    iParamItem.setImage(0,ImageLib.getImage(ImageLib.OPTION));
  }
  TextParameters tParameter=parameters.getTextParameter();
  if (tParameter != null) {
    iParamItem=new TreeItem(indicatorItem,SWT.NONE);
    iParamItem.setText(0,DefaultMessagesImpl.getString(""String_Node_Str""));
    iParamItem.setData(DATA_PARAM,DATA_PARAM);
    iParamItem.setImage(0,ImageLib.getImage(ImageLib.OPTION));
    TreeItem subParamItem=new TreeItem(iParamItem,SWT.NONE);
    subParamItem.setText(DefaultMessagesImpl.getString(""String_Node_Str"") + tParameter.isUseBlank());
    subParamItem.setImage(0,ImageLib.getImage(ImageLib.OPTION));
    subParamItem.setData(DATA_PARAM,DATA_PARAM);
    subParamItem=new TreeItem(iParamItem,SWT.NONE);
    subParamItem.setText(DefaultMessagesImpl.getString(""String_Node_Str"") + tParameter.isIgnoreCase());
    subParamItem.setImage(0,ImageLib.getImage(ImageLib.OPTION));
    subParamItem.setData(DATA_PARAM,DATA_PARAM);
    subParamItem=new TreeItem(iParamItem,SWT.NONE);
    subParamItem.setText(DefaultMessagesImpl.getString(""String_Node_Str"") + tParameter.isUseNulls());
    subParamItem.setImage(0,ImageLib.getImage(ImageLib.OPTION));
    subParamItem.setData(DATA_PARAM,DATA_PARAM);
  }
  DateParameters dParameters=parameters.getDateParameters();
  if (dParameters != null) {
    iParamItem=new TreeItem(indicatorItem,SWT.NONE);
    iParamItem.setText(0,DefaultMessagesImpl.getString(""String_Node_Str""));
    iParamItem.setData(DATA_PARAM,DATA_PARAM);
    iParamItem.setImage(0,ImageLib.getImage(ImageLib.OPTION));
    TreeItem subParamItem=new TreeItem(iParamItem,SWT.NONE);
    subParamItem.setText(DefaultMessagesImpl.getString(""String_Node_Str"",dParameters.getDateAggregationType().getName()));
    subParamItem.setImage(0,ImageLib.getImage(ImageLib.OPTION));
    subParamItem.setData(DATA_PARAM,DATA_PARAM);
  }
  Domain indicatorValidDomain=parameters.getIndicatorValidDomain();
  if (indicatorValidDomain != null) {
    iParamItem=new TreeItem(indicatorItem,SWT.NONE);
    iParamItem.setText(0,DefaultMessagesImpl.getString(""String_Node_Str"") + (indicatorValidDomain != null));
    iParamItem.setData(DATA_PARAM,DATA_PARAM);
    iParamItem.setImage(0,ImageLib.getImage(ImageLib.OPTION));
  }
  Domain bins=parameters.getBins();
  if (bins != null) {
    iParamItem=new TreeItem(indicatorItem,SWT.NONE);
    iParamItem.setText(0,DefaultMessagesImpl.getString(""String_Node_Str"") + (bins != null));
    iParamItem.setData(DATA_PARAM,DATA_PARAM);
    iParamItem.setImage(0,ImageLib.getImage(ImageLib.OPTION));
  }
}","/** 
 * DOC qzhang Comment method ""createIndicatorParameters"".
 * @param indicatorItem
 * @param parameters
 */
private void createIndicatorParameters(TreeItem indicatorItem,IndicatorUnit indicatorUnit){
  TreeItem[] items=indicatorItem.getItems();
  if (indicatorItem != null && !indicatorItem.isDisposed()) {
    for (    TreeItem treeItem : items) {
      if (DATA_PARAM.equals(treeItem.getData(DATA_PARAM))) {
        treeItem.dispose();
      }
    }
  }
  IndicatorParameters parameters=indicatorUnit.getIndicator().getParameters();
  if (parameters == null) {
    return;
  }
  if (hideParameters(indicatorUnit)) {
    return;
  }
  TreeItem iParamItem;
  if (indicatorUnit.getIndicator() instanceof FrequencyIndicator) {
    if (parameters.getBins() == null) {
      return;
    }
    iParamItem=new TreeItem(indicatorItem,SWT.NONE);
    iParamItem.setText(0,DefaultMessagesImpl.getString(""String_Node_Str"") + parameters.getTopN());
    iParamItem.setData(DATA_PARAM,DATA_PARAM);
    iParamItem.setImage(0,ImageLib.getImage(ImageLib.OPTION));
  }
  TextParameters tParameter=parameters.getTextParameter();
  if (tParameter != null && !hideTextParameters(indicatorUnit)) {
    iParamItem=new TreeItem(indicatorItem,SWT.NONE);
    iParamItem.setText(0,DefaultMessagesImpl.getString(""String_Node_Str""));
    iParamItem.setData(DATA_PARAM,DATA_PARAM);
    iParamItem.setImage(0,ImageLib.getImage(ImageLib.OPTION));
    TreeItem subParamItem=new TreeItem(iParamItem,SWT.NONE);
    subParamItem.setText(DefaultMessagesImpl.getString(""String_Node_Str"") + tParameter.isUseBlank());
    subParamItem.setImage(0,ImageLib.getImage(ImageLib.OPTION));
    subParamItem.setData(DATA_PARAM,DATA_PARAM);
    subParamItem=new TreeItem(iParamItem,SWT.NONE);
    subParamItem.setText(DefaultMessagesImpl.getString(""String_Node_Str"") + tParameter.isIgnoreCase());
    subParamItem.setImage(0,ImageLib.getImage(ImageLib.OPTION));
    subParamItem.setData(DATA_PARAM,DATA_PARAM);
    subParamItem=new TreeItem(iParamItem,SWT.NONE);
    subParamItem.setText(DefaultMessagesImpl.getString(""String_Node_Str"") + tParameter.isUseNulls());
    subParamItem.setImage(0,ImageLib.getImage(ImageLib.OPTION));
    subParamItem.setData(DATA_PARAM,DATA_PARAM);
  }
  DateParameters dParameters=parameters.getDateParameters();
  if (dParameters != null) {
    iParamItem=new TreeItem(indicatorItem,SWT.NONE);
    iParamItem.setText(0,DefaultMessagesImpl.getString(""String_Node_Str""));
    iParamItem.setData(DATA_PARAM,DATA_PARAM);
    iParamItem.setImage(0,ImageLib.getImage(ImageLib.OPTION));
    TreeItem subParamItem=new TreeItem(iParamItem,SWT.NONE);
    subParamItem.setText(DefaultMessagesImpl.getString(""String_Node_Str"",dParameters.getDateAggregationType().getName()));
    subParamItem.setImage(0,ImageLib.getImage(ImageLib.OPTION));
    subParamItem.setData(DATA_PARAM,DATA_PARAM);
  }
  Domain indicatorValidDomain=parameters.getIndicatorValidDomain();
  if (indicatorValidDomain != null) {
    iParamItem=new TreeItem(indicatorItem,SWT.NONE);
    iParamItem.setText(0,DefaultMessagesImpl.getString(""String_Node_Str"") + (indicatorValidDomain != null));
    iParamItem.setData(DATA_PARAM,DATA_PARAM);
    iParamItem.setImage(0,ImageLib.getImage(ImageLib.OPTION));
  }
  Domain bins=parameters.getBins();
  if (bins != null) {
    iParamItem=new TreeItem(indicatorItem,SWT.NONE);
    iParamItem.setText(0,DefaultMessagesImpl.getString(""String_Node_Str"") + (bins != null));
    iParamItem.setData(DATA_PARAM,DATA_PARAM);
    iParamItem.setImage(0,ImageLib.getImage(ImageLib.OPTION));
  }
}",0.9946493945367502
138204,"@Override public IndicatorParameters getParameters(){
  if (parameters != null) {
    TextParameters textParameters=parameters.getTextParameter();
    if (textParameters == null) {
      textParameters=IndicatorsFactory.eINSTANCE.createTextParameters();
    }
    textParameters.setUseNulls(false);
    textParameters.setUseBlank(true);
    parameters.setTextParameter(textParameters);
  }
  return parameters;
}","@Override public IndicatorParameters getParameters(){
  parameters=super.getParameters();
  parameters.getTextParameter().setUseNulls(false);
  parameters.getTextParameter().setUseBlank(true);
  return parameters;
}",0.2966507177033493
138205,"@Override public IndicatorParameters getParameters(){
  if (parameters != null) {
    TextParameters textParameters=parameters.getTextParameter();
    if (textParameters == null) {
      textParameters=IndicatorsFactory.eINSTANCE.createTextParameters();
    }
    textParameters.setUseNulls(true);
    textParameters.setUseBlank(true);
    parameters.setTextParameter(textParameters);
  }
  return parameters;
}","@Override public IndicatorParameters getParameters(){
  parameters=super.getParameters();
  parameters.getTextParameter().setUseNulls(true);
  parameters.getTextParameter().setUseBlank(true);
  return parameters;
}",0.336
138206,"@Override public IndicatorParameters getParameters(){
  if (parameters != null) {
    TextParameters textParameters=parameters.getTextParameter();
    if (textParameters == null) {
      textParameters=IndicatorsFactory.eINSTANCE.createTextParameters();
    }
    textParameters.setUseNulls(true);
    textParameters.setUseBlank(false);
    parameters.setTextParameter(textParameters);
  }
  return parameters;
}","@Override public IndicatorParameters getParameters(){
  parameters=super.getParameters();
  parameters.getTextParameter().setUseNulls(true);
  parameters.getTextParameter().setUseBlank(false);
  return parameters;
}",0.3381180223285486
138207,"@Override public boolean handle(Object data){
  count++;
  if (data == null) {
    nullCount++;
  }
 else {
    String str=(String)data;
    sumLength+=str.length();
  }
  return true;
}","@Override public boolean handle(Object data){
  if (data == null) {
    nullCount++;
    count++;
  }
 else {
    String str=(String)data;
    sumLength+=str.length();
    if (str.length() > 0) {
      count++;
    }
  }
  return true;
}",0.7423167848699763
138208,"@Override public IndicatorParameters getParameters(){
  if (parameters != null) {
    TextParameters textParameters=parameters.getTextParameter();
    if (textParameters == null) {
      textParameters=IndicatorsFactory.eINSTANCE.createTextParameters();
    }
    textParameters.setUseNulls(false);
    textParameters.setUseBlank(true);
    parameters.setTextParameter(textParameters);
  }
  return parameters;
}","@Override public IndicatorParameters getParameters(){
  parameters=super.getParameters();
  parameters.getTextParameter().setUseNulls(false);
  parameters.getTextParameter().setUseBlank(true);
  return parameters;
}",0.2966507177033493
138209,"@Override public void stop(BundleContext context) throws Exception {
  this.bundle=null;
  plugin=null;
}","public void stop(BundleContext context) throws Exception {
  this.bundle=null;
  plugin=null;
}",0.95
138210,"@Override public void start(BundleContext context) throws Exception {
  this.bundle=context.getBundle();
  plugin=this;
}","public void start(BundleContext context) throws Exception {
  this.bundle=context.getBundle();
  plugin=this;
}",0.956896551724138
138211,"@Override public IMigrationTask[] getMigrationTasks(){
  return allTaskList.toArray(new IMigrationTask[allTaskList.size()]);
}","public IMigrationTask[] getMigrationTasks(){
  return allTaskList.toArray(new IMigrationTask[allTaskList.size()]);
}",0.9586776859504132
138212,"/** 
 * DOC xqliu Comment method ""setInput"".
 * @param objs
 */
public void setInput(Object[] objs){
  List<DBTableRepNode> tableNodeList=RepositoryNodeHelper.getTableNodeList(objs);
  List<DBViewRepNode> viewNodeList=RepositoryNodeHelper.getViewNodeList(objs);
  if (tableNodeList.size() == 0 && viewNodeList.size() == 0) {
    return;
  }
  List<RepositoryNode> setList=new ArrayList<RepositoryNode>();
  Connection tdProvider=null;
  for (  DBTableRepNode tableNode : tableNodeList) {
    if (tdProvider == null)     tdProvider=DataProviderHelper.getTdDataProvider(TableHelper.getParentCatalogOrSchema(tableNode.getTdTable()));
    if (tdProvider == null) {
      MessageUI.openError(DefaultMessagesImpl.getString(""String_Node_Str"",tableNode.getLabel()));
    }
 else     if (this.getAnalysis().getContext().getConnection() != null && !tdProvider.equals(this.getAnalysis().getContext().getConnection())) {
      MessageUI.openError(DefaultMessagesImpl.getString(""String_Node_Str"",tableNode.getLabel()));
    }
 else {
      setList.add(tableNode);
    }
  }
  for (  DBViewRepNode tableNode : viewNodeList) {
    if (tdProvider == null)     tdProvider=DataProviderHelper.getTdDataProvider(TableHelper.getParentCatalogOrSchema(tableNode.getTdView()));
    if (tdProvider == null) {
      MessageUI.openError(DefaultMessagesImpl.getString(""String_Node_Str"",tableNode.getLabel()));
    }
 else     if (this.getAnalysis().getContext().getConnection() != null && !tdProvider.equals(this.getAnalysis().getContext().getConnection())) {
      MessageUI.openError(DefaultMessagesImpl.getString(""String_Node_Str"",tableNode.getLabel()));
    }
 else {
      setList.add(tableNode);
    }
  }
  List<TableIndicator> tableIndicatorList=new ArrayList<TableIndicator>();
  for (  TableIndicator tableIndicator : tableIndicators) {
    if (setList.contains(tableIndicator.getColumnSet())) {
      tableIndicatorList.add(tableIndicator);
      setList.remove(tableIndicator.getColumnSet());
    }
  }
  for (  RepositoryNode set : setList) {
    TableIndicator tableIndicator=null;
    if (set instanceof DBViewRepNode) {
      tableIndicator=TableIndicator.createTableIndicatorWithRowCountIndicator(((DBViewRepNode)set).getTdView());
    }
 else     if (set instanceof DBTableRepNode) {
      tableIndicator=TableIndicator.createTableIndicatorWithRowCountIndicator(((DBTableRepNode)set).getTdTable());
    }
 else {
      continue;
    }
    tableIndicatorList.add(tableIndicator);
  }
  this.tableIndicators=tableIndicatorList.toArray(new TableIndicator[tableIndicatorList.size()]);
  this.setElements(tableIndicators);
}","/** 
 * DOC xqliu Comment method ""setInput"".
 * @param objs
 */
public void setInput(Object[] objs){
  List<DBTableRepNode> tableNodeList=RepositoryNodeHelper.getTableNodeList(objs);
  List<TableIndicator> tableIndicatorList=new ArrayList<TableIndicator>();
  List<DBViewRepNode> viewNodeList=RepositoryNodeHelper.getViewNodeList(objs);
  if (tableNodeList.size() == 0 && viewNodeList.size() == 0) {
    this.tableIndicators=tableIndicatorList.toArray(new TableIndicator[tableIndicatorList.size()]);
    this.setElements(tableIndicators);
    return;
  }
  List<RepositoryNode> setList=new ArrayList<RepositoryNode>();
  Connection tdProvider=null;
  for (  DBTableRepNode tableNode : tableNodeList) {
    if (tdProvider == null)     tdProvider=DataProviderHelper.getTdDataProvider(TableHelper.getParentCatalogOrSchema(tableNode.getTdTable()));
    if (tdProvider == null) {
      MessageUI.openError(DefaultMessagesImpl.getString(""String_Node_Str"",tableNode.getLabel()));
    }
 else     if (this.getAnalysis().getContext().getConnection() != null && !tdProvider.equals(this.getAnalysis().getContext().getConnection())) {
      MessageUI.openError(DefaultMessagesImpl.getString(""String_Node_Str"",tableNode.getLabel()));
    }
 else {
      setList.add(tableNode);
    }
  }
  for (  DBViewRepNode tableNode : viewNodeList) {
    if (tdProvider == null)     tdProvider=DataProviderHelper.getTdDataProvider(TableHelper.getParentCatalogOrSchema(tableNode.getTdView()));
    if (tdProvider == null) {
      MessageUI.openError(DefaultMessagesImpl.getString(""String_Node_Str"",tableNode.getLabel()));
    }
 else     if (this.getAnalysis().getContext().getConnection() != null && !tdProvider.equals(this.getAnalysis().getContext().getConnection())) {
      MessageUI.openError(DefaultMessagesImpl.getString(""String_Node_Str"",tableNode.getLabel()));
    }
 else {
      setList.add(tableNode);
    }
  }
  for (  TableIndicator tableIndicator : tableIndicators) {
    if (setList.contains(tableIndicator.getColumnSet())) {
      tableIndicatorList.add(tableIndicator);
      setList.remove(tableIndicator.getColumnSet());
    }
  }
  for (  RepositoryNode set : setList) {
    TableIndicator tableIndicator=null;
    if (set instanceof DBViewRepNode) {
      tableIndicator=TableIndicator.createTableIndicatorWithRowCountIndicator(((DBViewRepNode)set).getTdView());
    }
 else     if (set instanceof DBTableRepNode) {
      tableIndicator=TableIndicator.createTableIndicatorWithRowCountIndicator(((DBTableRepNode)set).getTdTable());
    }
 else {
      continue;
    }
    tableIndicatorList.add(tableIndicator);
  }
  this.tableIndicators=tableIndicatorList.toArray(new TableIndicator[tableIndicatorList.size()]);
  this.setElements(tableIndicators);
}",0.9460518947171924
138213,"/** 
 * DOC scorreia Comment method ""instantiateQuery"".
 * @param indicator
 */
private void instantiateQuery(Indicator indicator){
  if (ColumnsetPackage.eINSTANCE.getColumnSetMultiValueIndicator().isSuperTypeOf(indicator.eClass())) {
    ColumnSetMultiValueIndicator colSetMultValIndicator=(ColumnSetMultiValueIndicator)indicator;
    final EList<ModelElement> analyzedColumns=colSetMultValIndicator.getAnalyzedColumns();
    final EList<String> numericFunctions=initializeNumericFunctions(colSetMultValIndicator);
    final EList<String> dateFunctions=initializeDateFunctions(colSetMultValIndicator);
    List<String> nominalColumns=new ArrayList<String>();
    for (    ModelElement column : colSetMultValIndicator.getNominalColumns()) {
      nominalColumns.add(getQuotedColumnName(column));
    }
    List<String> computedColumns=new ArrayList<String>();
    for (    ModelElement column : colSetMultValIndicator.getNumericColumns()) {
      for (      String f : numericFunctions) {
        computedColumns.add(replaceVariablesLow(f,getQuotedColumnName(column)));
      }
    }
    for (    ModelElement column : colSetMultValIndicator.getDateColumns()) {
      for (      String f : dateFunctions) {
        computedColumns.add(replaceVariablesLow(f,getQuotedColumnName(column)));
      }
    }
    computedColumns.add(colSetMultValIndicator.getCountAll());
    String selectItems=createSelect(nominalColumns,computedColumns);
    final Expression sqlGenericExpression=dbms().getSqlExpression(indicator.getIndicatorDefinition());
    String grpByClause=createGroupBy(nominalColumns);
    String tableName=getTableName(analyzedColumns);
    String sqlExpr=dbms().fillGenericQueryWithColumnTableAndAlias(sqlGenericExpression.getBody(),selectItems,tableName,grpByClause);
    String stringDataFilter=AnalysisHelper.getStringDataFilter(cachedAnalysis);
    if (stringDataFilter == null) {
      stringDataFilter=PluginConstant.EMPTY_STRING;
    }
    sqlExpr=dbms().addWhereToStatement(sqlExpr,stringDataFilter);
    indicator.setInstantiatedExpression(BooleanExpressionHelper.createTdExpression(sqlGenericExpression.getLanguage(),sqlExpr));
    if (ColumnsetPackage.eINSTANCE.getSimpleStatIndicator().isSuperTypeOf(indicator.eClass())) {
      SimpleStatIndicator simpleIndicator=(SimpleStatIndicator)indicator;
      String columnsName=createSelect(nominalColumns,new ArrayList<String>());
      for (      Indicator leafIndicator : simpleIndicator.getLeafIndicators()) {
        final Expression leafSqlGenericExpression=dbms().getSqlExpression(leafIndicator.getIndicatorDefinition());
        String leafSqlExpr=dbms().fillGenericQueryWithColumnTableAndAlias(leafSqlGenericExpression.getBody(),columnsName,tableName,grpByClause);
        leafSqlExpr=dbms().addWhereToStatement(leafSqlExpr,stringDataFilter);
        leafIndicator.setInstantiatedExpression(BooleanExpressionHelper.createTdExpression(leafSqlGenericExpression.getLanguage(),leafSqlExpr));
      }
    }
  }
}","/** 
 * DOC scorreia Comment method ""instantiateQuery"".
 * @param indicator
 */
private void instantiateQuery(Indicator indicator){
  if (ColumnsetPackage.eINSTANCE.getColumnSetMultiValueIndicator().isSuperTypeOf(indicator.eClass())) {
    ColumnSetMultiValueIndicator colSetMultValIndicator=(ColumnSetMultiValueIndicator)indicator;
    final EList<ModelElement> analyzedColumns=colSetMultValIndicator.getAnalyzedColumns();
    final EList<String> numericFunctions=initializeNumericFunctions(colSetMultValIndicator);
    final EList<String> dateFunctions=initializeDateFunctions(colSetMultValIndicator);
    final String caseStr=""String_Node_Str"";
    if (SupportDBUrlType.EXCEL.getDBKey().equals(dbms().getDbmsName()) && (dateFunctions.contains(caseStr) || numericFunctions.contains(caseStr))) {
      this.errorMessage=Messages.getString(""String_Node_Str"");
      Display.getDefault().syncExec(new Runnable(){
        public void run(){
          MessageDialog.openWarning(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),Messages.getString(""String_Node_Str""),errorMessage);
          return;
        }
      }
);
    }
    List<String> nominalColumns=new ArrayList<String>();
    for (    ModelElement column : colSetMultValIndicator.getNominalColumns()) {
      nominalColumns.add(getQuotedColumnName(column));
    }
    List<String> computedColumns=new ArrayList<String>();
    for (    ModelElement column : colSetMultValIndicator.getNumericColumns()) {
      for (      String f : numericFunctions) {
        computedColumns.add(replaceVariablesLow(f,getQuotedColumnName(column)));
      }
    }
    for (    ModelElement column : colSetMultValIndicator.getDateColumns()) {
      for (      String f : dateFunctions) {
        computedColumns.add(replaceVariablesLow(f,getQuotedColumnName(column)));
      }
    }
    computedColumns.add(colSetMultValIndicator.getCountAll());
    String selectItems=createSelect(nominalColumns,computedColumns);
    final Expression sqlGenericExpression=dbms().getSqlExpression(indicator.getIndicatorDefinition());
    String grpByClause=createGroupBy(nominalColumns);
    String tableName=getTableName(analyzedColumns);
    String sqlExpr=dbms().fillGenericQueryWithColumnTableAndAlias(sqlGenericExpression.getBody(),selectItems,tableName,grpByClause);
    String stringDataFilter=AnalysisHelper.getStringDataFilter(cachedAnalysis);
    if (stringDataFilter == null) {
      stringDataFilter=PluginConstant.EMPTY_STRING;
    }
    sqlExpr=dbms().addWhereToStatement(sqlExpr,stringDataFilter);
    indicator.setInstantiatedExpression(BooleanExpressionHelper.createTdExpression(sqlGenericExpression.getLanguage(),sqlExpr));
    if (ColumnsetPackage.eINSTANCE.getSimpleStatIndicator().isSuperTypeOf(indicator.eClass())) {
      SimpleStatIndicator simpleIndicator=(SimpleStatIndicator)indicator;
      String columnsName=createSelect(nominalColumns,new ArrayList<String>());
      for (      Indicator leafIndicator : simpleIndicator.getLeafIndicators()) {
        final Expression leafSqlGenericExpression=dbms().getSqlExpression(leafIndicator.getIndicatorDefinition());
        String leafSqlExpr=dbms().fillGenericQueryWithColumnTableAndAlias(leafSqlGenericExpression.getBody(),columnsName,tableName,grpByClause);
        leafSqlExpr=dbms().addWhereToStatement(leafSqlExpr,stringDataFilter);
        leafIndicator.setInstantiatedExpression(BooleanExpressionHelper.createTdExpression(leafSqlGenericExpression.getLanguage(),leafSqlExpr));
      }
    }
  }
}",0.9179115971045742
138214,"/** 
 * get MDM software Version.
 * @return
 */
public String getVersion(){
  String versionStr=PluginConstant.EMPTY_STRING;
  try {
    XtentisBindingStub stub=getXtentisBindingStub();
    WSVersion wsVersion=stub.getComponentVersion(new WSGetComponentVersion(WSComponent.DataManager,null));
    versionStr=wsVersion.getMajor() + PluginConstant.DOT_STRING + wsVersion.getMinor()+ PluginConstant.DOT_STRING+ wsVersion.getRevision();
  }
 catch (  Exception e) {
    log.error(e,e);
  }
  return versionStr;
}","/** 
 * get MDM software Version.
 * @return
 */
public String getVersion(){
  String versionStr=PluginConstant.EMPTY_STRING;
  try {
    if (!checkDatabaseConnection().isOk()) {
      return versionStr;
    }
    XtentisBindingStub stub=getXtentisBindingStub();
    WSVersion wsVersion=stub.getComponentVersion(new WSGetComponentVersion(WSComponent.DataManager,null));
    versionStr=wsVersion.getMajor() + PluginConstant.DOT_STRING + wsVersion.getMinor()+ PluginConstant.DOT_STRING+ wsVersion.getRevision();
  }
 catch (  Exception e) {
    log.error(e,e);
  }
  return versionStr;
}",0.9305301645338208
138215,"public Collection<TdXmlSchema> createConnection(Connection dataProvider){
  List<TdXmlSchema> xmlDocs=new ArrayList<TdXmlSchema>();
  MDMConnection mdmConn=(MDMConnection)dataProvider;
  String datamodel=mdmConn.getDatamodel();
  try {
    XtentisBindingStub stub=getXtentisBindingStub();
    WSDataModelPK[] pks=stub.getDataModelPKs(new WSRegexDataModelPKs(PluginConstant.EMPTY_STRING));
    String techXSDFolderName=getTechXSDFolderName();
    for (    WSDataModelPK pk : pks) {
      if (datamodel.equals(pk.getPk())) {
        adaptToCWMDocument(xmlDocs,stub,pk.getPk(),techXSDFolderName,dataProvider);
      }
    }
  }
 catch (  Exception e) {
    log.error(e);
    return null;
  }
  return xmlDocs;
}","public Collection<TdXmlSchema> createConnection(Connection dataProvider){
  List<TdXmlSchema> xmlDocs=new ArrayList<TdXmlSchema>();
  MDMConnection mdmConn=(MDMConnection)dataProvider;
  String datamodel=mdmConn.getDatamodel();
  try {
    if (!checkDatabaseConnection().isOk()) {
      return null;
    }
    XtentisBindingStub stub=getXtentisBindingStub();
    WSDataModelPK[] pks=stub.getDataModelPKs(new WSRegexDataModelPKs(PluginConstant.EMPTY_STRING));
    String techXSDFolderName=getTechXSDFolderName();
    for (    WSDataModelPK pk : pks) {
      if (datamodel.equals(pk.getPk())) {
        adaptToCWMDocument(xmlDocs,stub,pk.getPk(),techXSDFolderName,dataProvider);
      }
    }
  }
 catch (  Exception e) {
    log.error(e);
    return null;
  }
  return xmlDocs;
}",0.9528936742934052
138216,"@SuppressWarnings(""String_Node_Str"") @Override public void fillContextMenu(IMenuManager menu){
  if (!isShowMenu()) {
    return;
  }
  TreeSelection currentSelection=((TreeSelection)this.getContext().getSelection());
  if (isSelectedColumnLevel(currentSelection) || isSelectedMdmColumn(currentSelection)) {
    IMenuManager submenu=new MenuManager(DefaultMessagesImpl.getString(""String_Node_Str""),NEW_MENU_NAME);
    menu.insertAfter(ICommonMenuConstants.GROUP_NEW,submenu);
    analyzeColumnAction.setColumnSelection(currentSelection);
    submenu.add(analyzeColumnAction);
  }
  if (isSelectedColumnLevel(currentSelection) || isSelectedMdmColumn(currentSelection)) {
    analyzeColumnSetAction.setColumnSelection(currentSelection);
    menu.add(analyzeColumnSetAction);
  }
}","@SuppressWarnings(""String_Node_Str"") @Override public void fillContextMenu(IMenuManager menu){
  if (!isShowMenu()) {
    return;
  }
  TreeSelection currentSelection=((TreeSelection)this.getContext().getSelection());
  if (isSelectedColumnLevel(currentSelection)) {
    IMenuManager submenu=new MenuManager(DefaultMessagesImpl.getString(""String_Node_Str""),NEW_MENU_NAME);
    menu.insertAfter(ICommonMenuConstants.GROUP_NEW,submenu);
    analyzeColumnAction.setColumnSelection(currentSelection);
    submenu.add(analyzeColumnAction);
  }
  if (isSelectedColumnLevel(currentSelection) || isSelectedMdmColumn(currentSelection)) {
    analyzeColumnSetAction.setColumnSelection(currentSelection);
    menu.add(analyzeColumnSetAction);
  }
}",0.972937293729373
138217,"@Override public void run(){
  ISelection selection=this.getSelection();
  boolean onlyDeleteReportFile=true;
  for (  Object obj : ((IStructuredSelection)selection).toArray()) {
    if (obj instanceof RepositoryNode) {
      RepositoryNode node=(RepositoryNode)obj;
      if (node instanceof ReportFileRepNode) {
        deleteReportFile((ReportFileRepNode)node);
        continue;
      }
      onlyDeleteReportFile=false;
      boolean isStateDeleted=RepositoryNodeHelper.isStateDeleted(node);
      if (!isStateDeleted) {
        closeEditors(selection);
        excuteSuperRun(null);
        break;
      }
      boolean hasDependency=false;
      if (node.getType() == ENodeType.SIMPLE_FOLDER || node.getType() == ENodeType.SYSTEM_FOLDER) {
        List<IRepositoryNode> newLs=RepositoryNodeHelper.getRepositoryElementFromFolder(node,true);
        for (        IRepositoryNode subNode : newLs) {
          hasDependency=RepositoryNodeHelper.hasDependencyClients(subNode);
          if (!hasDependency || hasDependency && handleDependencies(subNode)) {
            excuteSuperRun((RepositoryNode)subNode);
          }
        }
        excuteSuperRun(node);
      }
 else {
        hasDependency=RepositoryNodeHelper.hasDependencyClients(node);
        if (!hasDependency || hasDependency && handleDependencies(node)) {
          excuteSuperRun((RepositoryNode)node);
        }
      }
    }
  }
  if (!onlyDeleteReportFile) {
    CorePlugin.getDefault().refreshWorkSpace();
    CorePlugin.getDefault().refreshDQView();
  }
}","@Override public void run(){
  ISelection selection=this.getSelection();
  boolean onlyDeleteReportFile=true;
  for (  Object obj : ((IStructuredSelection)selection).toArray()) {
    if (obj instanceof RepositoryNode) {
      RepositoryNode node=(RepositoryNode)obj;
      if (node instanceof ReportFileRepNode) {
        deleteReportFile((ReportFileRepNode)node);
        continue;
      }
      onlyDeleteReportFile=false;
      boolean isStateDeleted=RepositoryNodeHelper.isStateDeleted(node);
      if (!isStateDeleted) {
        closeEditors(selection);
        excuteSuperRun(null);
        break;
      }
      boolean hasDependency=false;
      if (node.getType() == ENodeType.SIMPLE_FOLDER || node.getType() == ENodeType.SYSTEM_FOLDER) {
        List<IRepositoryNode> newLs=RepositoryNodeHelper.getRepositoryElementFromFolder(node,true);
        boolean haveSubNode=false;
        for (        IRepositoryNode subNode : newLs) {
          hasDependency=RepositoryNodeHelper.hasDependencyClients(subNode);
          if (!hasDependency || hasDependency && handleDependencies(subNode)) {
            excuteSuperRun((RepositoryNode)subNode);
          }
 else {
            haveSubNode=true;
          }
        }
        if (!haveSubNode) {
          excuteSuperRun(node);
        }
      }
 else {
        hasDependency=RepositoryNodeHelper.hasDependencyClients(node);
        if (!hasDependency || hasDependency && handleDependencies(node)) {
          excuteSuperRun((RepositoryNode)node);
        }
      }
    }
  }
  if (!onlyDeleteReportFile) {
    CorePlugin.getDefault().refreshWorkSpace();
    CorePlugin.getDefault().refreshDQView();
  }
}",0.9607781612802008
138218,"public Map<String,String> getQueryMap(){
  boolean isSqlEngine=ExecutionLanguage.SQL.equals(this.analysis.getParameters().getExecutionLanguage());
  Map<String,String> map=new HashMap<String,String>();
switch (this.indicatorEnum) {
case AverageLengthIndicatorEnum:
    map.put(MENU_VIEW_ROWS,isSqlEngine ? getComment(MENU_VIEW_ROWS) + getAverageLengthRowsStatement() : null);
  break;
case MinLengthIndicatorEnum:
case MaxLengthIndicatorEnum:
case MinLengthWithBlankIndicatorEnum:
case MinLengthWithBlankNullIndicatorEnum:
case MinLengthWithNullIndicatorEnum:
case MaxLengthWithBlankIndicatorEnum:
case MaxLengthWithBlankNullIndicatorEnum:
case MaxLengthWithNullIndicatorEnum:
case AverageLengthWithBlankIndicatorEnum:
case AverageLengthWithNullBlankIndicatorEnum:
case AverageLengthWithNullIndicatorEnum:
map.put(MENU_VIEW_ROWS,isSqlEngine ? getComment(MENU_VIEW_ROWS) + getTextRowsStatement() : null);
break;
default :
}
return map;
}","public Map<String,String> getQueryMap(){
  boolean isSqlEngine=ExecutionLanguage.SQL.equals(this.analysis.getParameters().getExecutionLanguage());
  Map<String,String> map=new HashMap<String,String>();
switch (this.indicatorEnum) {
case AverageLengthIndicatorEnum:
case AverageLengthWithBlankIndicatorEnum:
case AverageLengthWithNullBlankIndicatorEnum:
case AverageLengthWithNullIndicatorEnum:
    map.put(MENU_VIEW_ROWS,isSqlEngine ? getComment(MENU_VIEW_ROWS) + getAverageLengthRowsStatement() : null);
  break;
case MinLengthIndicatorEnum:
case MaxLengthIndicatorEnum:
case MinLengthWithBlankIndicatorEnum:
case MinLengthWithBlankNullIndicatorEnum:
case MinLengthWithNullIndicatorEnum:
case MaxLengthWithBlankIndicatorEnum:
case MaxLengthWithBlankNullIndicatorEnum:
case MaxLengthWithNullIndicatorEnum:
map.put(MENU_VIEW_ROWS,isSqlEngine ? getComment(MENU_VIEW_ROWS) + getTextRowsStatement() : null);
break;
default :
}
return map;
}",0.8621794871794872
138219,"public boolean computeColumnValueLength(List<Object[]> newColumnElementList){
  List<Integer> maxLength=new ArrayList<Integer>();
  for (  Object[] columnValue : newColumnElementList) {
    maxLength.add(columnValue.length);
  }
  return (Integer)Collections.max(maxLength) == Collections.min(maxLength);
}","public boolean computeColumnValueLength(List<Object[]> newColumnElementList){
  List<Integer> maxLength=new ArrayList<Integer>();
  for (  Object[] columnValue : newColumnElementList) {
    maxLength.add(columnValue.length);
  }
  if (maxLength.size() == 0 || maxLength == null) {
    return true;
  }
  return (Integer)Collections.max(maxLength) == Collections.min(maxLength);
}",0.8934306569343066
138220,"/** 
 * DOC xqliu Comment method ""canParallel"".
 * @return
 */
private boolean canParallel(){
  try {
    TypedReturnCode<Connection> typedReturnCode=this.getConnection(cachedAnalysis);
    Connection connection=typedReturnCode.getObject();
    DatabaseMetaData connectionMetadata=org.talend.utils.sql.ConnectionUtils.getConnectionMetadata(connection);
    if (connectionMetadata.getDriverName() != null && connectionMetadata.getDriverName().toLowerCase().startsWith(DatabaseConstant.ODBC_DRIVER_NAME)) {
      return false;
    }
  }
 catch (  SQLException e) {
    log.warn(e,e);
  }
  return this.parallel;
}","/** 
 * DOC xqliu Comment method ""canParallel"".
 * @return
 */
private boolean canParallel(){
  try {
    TypedReturnCode<Connection> typedReturnCode=this.getConnection(cachedAnalysis);
    Connection connection=typedReturnCode.getObject();
    DatabaseMetaData connectionMetadata=org.talend.utils.sql.ConnectionUtils.getConnectionMetadata(connection);
    if (connectionMetadata.getDriverName() != null && connectionMetadata.getDriverName().toLowerCase().startsWith(DatabaseConstant.ODBC_DRIVER_NAME)) {
      return false;
    }
    if (""String_Node_Str"".equals(connection.getMetaData().getDatabaseProductName())) {
      return false;
    }
  }
 catch (  SQLException e) {
    log.warn(e,e);
  }
  return this.parallel;
}",0.9153558052434456
138221,"/** 
 * DOC qzhang Comment method ""createOneUnit"".
 * @param treeItem
 * @param indicatorUnit
 */
public void createOneUnit(final TreeItem treeItem,IndicatorUnit indicatorUnit){
  final TreeItem indicatorItem=new TreeItem(treeItem,SWT.NONE);
  final IndicatorUnit unit=indicatorUnit;
  IndicatorEnum indicatorType=indicatorUnit.getType();
  indicatorItem.setData(MODELELEMENT_INDICATOR_KEY,treeItem.getData(MODELELEMENT_INDICATOR_KEY));
  indicatorItem.setData(INDICATOR_UNIT_KEY,unit);
  indicatorItem.setData(viewKey,this);
  indicatorItem.setImage(0,getIndicatorImage(unit));
  String indicatorName=getIndicatorName(indicatorUnit);
  String label=indicatorName == null ? ""String_Node_Str"" : indicatorName;
  indicatorItem.setText(0,label);
  TreeEditor optionEditor;
  optionEditor=new TreeEditor(tree);
  Label optionLabel=new Label(tree,SWT.NONE);
  optionLabel.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_WHITE));
  optionLabel.setImage(ImageLib.getImage(ImageLib.INDICATOR_OPTION));
  optionLabel.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
  optionLabel.pack();
  optionLabel.setData(indicatorUnit);
  optionLabel.addMouseListener(new MouseAdapter(){
    @Override public void mouseDown(    MouseEvent e){
      openIndicatorOptionDialog(null,indicatorItem);
    }
  }
);
  optionEditor.minimumWidth=optionLabel.getImage().getBounds().width;
  optionEditor.horizontalAlignment=SWT.CENTER;
  optionEditor.setEditor(optionLabel,indicatorItem,1);
  TreeEditor delEditor=new TreeEditor(tree);
  Label delLabel=new Label(tree,SWT.NONE);
  delLabel.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_WHITE));
  delLabel.setImage(ImageLib.getImage(ImageLib.DELETE_ACTION));
  delLabel.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
  delLabel.pack();
  delLabel.addMouseListener(new MouseAdapter(){
    @Override public void mouseDown(    MouseEvent e){
      ModelElementIndicator meIndicator=(ModelElementIndicator)treeItem.getData(MODELELEMENT_INDICATOR_KEY);
      deleteIndicatorItems(meIndicator,unit);
      if (indicatorItem.getParentItem() != null && indicatorItem.getParentItem().getData(INDICATOR_UNIT_KEY) != null) {
        setElements(modelElementIndicators);
      }
 else {
        removeItemBranch(indicatorItem);
      }
    }
  }
);
  delEditor.minimumWidth=delLabel.getImage().getBounds().width;
  delEditor.horizontalAlignment=SWT.CENTER;
  if (AnalysisColumnTreeViewer.VIEWER_KEY.equals(viewKey)) {
    delEditor.setEditor(delLabel,indicatorItem,4);
  }
 else   if (AnalysisColumnSetTreeViewer.VIEWER_KEY.equals(viewKey)) {
    delEditor.setEditor(delLabel,indicatorItem,3);
  }
  indicatorItem.setData(ITEM_EDITOR_KEY,new TreeEditor[]{optionEditor,delEditor});
  if (indicatorType.hasChildren()) {
    indicatorItem.setData(treeItem.getData(MODELELEMENT_INDICATOR_KEY));
    createIndicatorItems(indicatorItem,indicatorUnit.getChildren());
  }
  createIndicatorParameters(indicatorItem,indicatorUnit);
  Display.getCurrent().asyncExec(new Runnable(){
    public void run(){
      tree.setFocus();
    }
  }
);
}","/** 
 * DOC qzhang Comment method ""createOneUnit"".
 * @param treeItem
 * @param indicatorUnit
 */
public void createOneUnit(final TreeItem treeItem,IndicatorUnit indicatorUnit){
  final TreeItem indicatorItem=new TreeItem(treeItem,SWT.NONE);
  final IndicatorUnit unit=indicatorUnit;
  IndicatorEnum indicatorType=indicatorUnit.getType();
  indicatorItem.setData(MODELELEMENT_INDICATOR_KEY,treeItem.getData(MODELELEMENT_INDICATOR_KEY));
  indicatorItem.setData(INDICATOR_UNIT_KEY,unit);
  indicatorItem.setData(viewKey,this);
  indicatorItem.setImage(0,getIndicatorImage(unit));
  String indicatorName=getIndicatorName(indicatorUnit);
  String label=indicatorName == null ? ""String_Node_Str"" : indicatorName;
  indicatorItem.setText(0,label);
  TreeEditor optionEditor;
  optionEditor=new TreeEditor(tree);
  Label optionLabel=new Label(tree,SWT.NONE);
  optionLabel.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_WHITE));
  optionLabel.setImage(ImageLib.getImage(ImageLib.INDICATOR_OPTION));
  optionLabel.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
  optionLabel.pack();
  optionLabel.setData(indicatorUnit);
  optionLabel.addMouseListener(new MouseAdapter(){
    @Override public void mouseDown(    MouseEvent e){
      openIndicatorOptionDialog(null,indicatorItem);
    }
  }
);
  optionEditor.minimumWidth=optionLabel.getImage().getBounds().width;
  optionEditor.horizontalAlignment=SWT.CENTER;
  optionEditor.setEditor(optionLabel,indicatorItem,1);
  TreeEditor delEditor=new TreeEditor(tree);
  Label delLabel=new Label(tree,SWT.NONE);
  delLabel.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_WHITE));
  delLabel.setImage(ImageLib.getImage(ImageLib.DELETE_ACTION));
  delLabel.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
  delLabel.pack();
  delLabel.addMouseListener(new MouseAdapter(){
    @Override public void mouseDown(    MouseEvent e){
      ModelElementIndicator meIndicator=(ModelElementIndicator)treeItem.getData(MODELELEMENT_INDICATOR_KEY);
      deleteIndicatorItems(meIndicator,unit);
      if (indicatorItem.getParentItem() != null && indicatorItem.getParentItem().getData(INDICATOR_UNIT_KEY) != null) {
        setElements(modelElementIndicators);
      }
 else {
        removeItemBranch(indicatorItem);
      }
    }
  }
);
  delEditor.minimumWidth=delLabel.getImage().getBounds().width;
  delEditor.horizontalAlignment=SWT.CENTER;
  if (AnalysisColumnTreeViewer.VIEWER_KEY.equals(viewKey)) {
    delEditor.setEditor(delLabel,indicatorItem,4);
  }
 else   if (AnalysisColumnSetTreeViewer.VIEWER_KEY.equals(viewKey)) {
    delEditor.setEditor(delLabel,indicatorItem,3);
  }
  indicatorItem.setData(ITEM_EDITOR_KEY,new TreeEditor[]{optionEditor,delEditor});
  if (indicatorType.hasChildren()) {
    indicatorItem.setData(treeItem.getData(MODELELEMENT_INDICATOR_KEY));
    createIndicatorItems(indicatorItem,indicatorUnit.getChildren());
  }
  createIndicatorParameters(indicatorItem,indicatorUnit);
  Display.getCurrent().asyncExec(new Runnable(){
    public void run(){
      Rectangle bounds=tree.getBounds();
      tree.setBounds(bounds.x,bounds.y,bounds.width,bounds.height - 1);
      tree.setBounds(bounds.x,bounds.y,bounds.width,bounds.height + 1);
    }
  }
);
}",0.9701445631678188
138222,"public void run(){
  tree.setFocus();
}","public void run(){
  Rectangle bounds=tree.getBounds();
  tree.setBounds(bounds.x,bounds.y,bounds.width,bounds.height - 1);
  tree.setBounds(bounds.x,bounds.y,bounds.width,bounds.height + 1);
}",0.3189655172413793
138223,"@SuppressWarnings(""String_Node_Str"") @Override public void fillContextMenu(IMenuManager menu){
  if (!isShowMenu()) {
    return;
  }
  TreeSelection currentSelection=((TreeSelection)this.getContext().getSelection());
  if (isSelectedColumnLevel(currentSelection) || isSelectedMdmColumn(currentSelection)) {
    IMenuManager submenu=new MenuManager(DefaultMessagesImpl.getString(""String_Node_Str""),NEW_MENU_NAME);
    menu.insertAfter(ICommonMenuConstants.GROUP_NEW,submenu);
    analyzeColumnAction.setColumnSelection(currentSelection);
    submenu.add(analyzeColumnAction);
  }
  if (isSelectedTdColumn(currentSelection)) {
    analyzeColumnSetAction.setColumnSelection(currentSelection);
    menu.add(analyzeColumnSetAction);
  }
}","@SuppressWarnings(""String_Node_Str"") @Override public void fillContextMenu(IMenuManager menu){
  if (!isShowMenu()) {
    return;
  }
  TreeSelection currentSelection=((TreeSelection)this.getContext().getSelection());
  if (isSelectedColumnLevel(currentSelection) || isSelectedMdmColumn(currentSelection)) {
    IMenuManager submenu=new MenuManager(DefaultMessagesImpl.getString(""String_Node_Str""),NEW_MENU_NAME);
    menu.insertAfter(ICommonMenuConstants.GROUP_NEW,submenu);
    analyzeColumnAction.setColumnSelection(currentSelection);
    submenu.add(analyzeColumnAction);
  }
  if (isSelectedColumnLevel(currentSelection) || isSelectedMdmColumn(currentSelection)) {
    analyzeColumnSetAction.setColumnSelection(currentSelection);
    menu.add(analyzeColumnSetAction);
  }
}",0.9682539682539684
138224,"/** 
 * DOC scorreia Comment method ""instantiateQuery"".
 * @param indicator
 */
private void instantiateQuery(Indicator indicator){
  if (ColumnsetPackage.eINSTANCE.getColumnSetMultiValueIndicator().isSuperTypeOf(indicator.eClass())) {
    ColumnSetMultiValueIndicator colSetMultValIndicator=(ColumnSetMultiValueIndicator)indicator;
    final EList<ModelElement> analyzedColumns=colSetMultValIndicator.getAnalyzedColumns();
    final EList<String> numericFunctions=initializeNumericFunctions(colSetMultValIndicator);
    final EList<String> dateFunctions=initializeDateFunctions(colSetMultValIndicator);
    final String caseStr=""String_Node_Str"";
    if (SupportDBUrlType.EXCEL.getDBKey().equals(dbms().getDbmsName()) && (dateFunctions.contains(caseStr) || numericFunctions.contains(caseStr))) {
      this.errorMessage=Messages.getString(""String_Node_Str"");
      Display.getDefault().syncExec(new Runnable(){
        public void run(){
          MessageDialog.openWarning(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),Messages.getString(""String_Node_Str""),errorMessage);
          return;
        }
      }
);
    }
    List<String> nominalColumns=new ArrayList<String>();
    for (    ModelElement column : colSetMultValIndicator.getNominalColumns()) {
      nominalColumns.add(getQuotedColumnName(column));
    }
    List<String> computedColumns=new ArrayList<String>();
    for (    ModelElement column : colSetMultValIndicator.getNumericColumns()) {
      for (      String f : numericFunctions) {
        computedColumns.add(replaceVariablesLow(f,getQuotedColumnName(column)));
      }
    }
    for (    ModelElement column : colSetMultValIndicator.getDateColumns()) {
      for (      String f : dateFunctions) {
        computedColumns.add(replaceVariablesLow(f,getQuotedColumnName(column)));
      }
    }
    computedColumns.add(colSetMultValIndicator.getCountAll());
    String selectItems=createSelect(nominalColumns,computedColumns);
    final Expression sqlGenericExpression=dbms().getSqlExpression(indicator.getIndicatorDefinition());
    String grpByClause=createGroupBy(nominalColumns);
    String tableName=getTableName(analyzedColumns);
    String sqlExpr=dbms().fillGenericQueryWithColumnTableAndAlias(sqlGenericExpression.getBody(),selectItems,tableName,grpByClause);
    String stringDataFilter=AnalysisHelper.getStringDataFilter(cachedAnalysis);
    if (stringDataFilter == null) {
      stringDataFilter=PluginConstant.EMPTY_STRING;
    }
    sqlExpr=dbms().addWhereToStatement(sqlExpr,stringDataFilter);
    indicator.setInstantiatedExpression(BooleanExpressionHelper.createTdExpression(sqlGenericExpression.getLanguage(),sqlExpr));
    if (ColumnsetPackage.eINSTANCE.getSimpleStatIndicator().isSuperTypeOf(indicator.eClass())) {
      SimpleStatIndicator simpleIndicator=(SimpleStatIndicator)indicator;
      String columnsName=createSelect(nominalColumns,new ArrayList<String>());
      for (      Indicator leafIndicator : simpleIndicator.getLeafIndicators()) {
        final Expression leafSqlGenericExpression=dbms().getSqlExpression(leafIndicator.getIndicatorDefinition());
        String leafSqlExpr=dbms().fillGenericQueryWithColumnTableAndAlias(leafSqlGenericExpression.getBody(),columnsName,tableName,grpByClause);
        leafSqlExpr=dbms().addWhereToStatement(leafSqlExpr,stringDataFilter);
        leafIndicator.setInstantiatedExpression(BooleanExpressionHelper.createTdExpression(leafSqlGenericExpression.getLanguage(),leafSqlExpr));
      }
    }
  }
}","/** 
 * DOC scorreia Comment method ""instantiateQuery"".
 * @param indicator
 */
private void instantiateQuery(Indicator indicator){
  if (ColumnsetPackage.eINSTANCE.getColumnSetMultiValueIndicator().isSuperTypeOf(indicator.eClass())) {
    ColumnSetMultiValueIndicator colSetMultValIndicator=(ColumnSetMultiValueIndicator)indicator;
    final EList<ModelElement> analyzedColumns=colSetMultValIndicator.getAnalyzedColumns();
    final EList<String> numericFunctions=initializeNumericFunctions(colSetMultValIndicator);
    final EList<String> dateFunctions=initializeDateFunctions(colSetMultValIndicator);
    final String caseStr=""String_Node_Str"";
    if (""String_Node_Str"".equals(dbms().getDbmsName()) && (dateFunctions.contains(caseStr) || numericFunctions.contains(caseStr))) {
      this.errorMessage=Messages.getString(""String_Node_Str"");
      Display.getDefault().syncExec(new Runnable(){
        public void run(){
          MessageDialog.openWarning(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),Messages.getString(""String_Node_Str""),errorMessage);
          return;
        }
      }
);
    }
    List<String> nominalColumns=new ArrayList<String>();
    for (    ModelElement column : colSetMultValIndicator.getNominalColumns()) {
      nominalColumns.add(getQuotedColumnName(column));
    }
    List<String> computedColumns=new ArrayList<String>();
    for (    ModelElement column : colSetMultValIndicator.getNumericColumns()) {
      for (      String f : numericFunctions) {
        computedColumns.add(replaceVariablesLow(f,getQuotedColumnName(column)));
      }
    }
    for (    ModelElement column : colSetMultValIndicator.getDateColumns()) {
      for (      String f : dateFunctions) {
        computedColumns.add(replaceVariablesLow(f,getQuotedColumnName(column)));
      }
    }
    computedColumns.add(colSetMultValIndicator.getCountAll());
    String selectItems=createSelect(nominalColumns,computedColumns);
    final Expression sqlGenericExpression=dbms().getSqlExpression(indicator.getIndicatorDefinition());
    String grpByClause=createGroupBy(nominalColumns);
    String tableName=getTableName(analyzedColumns);
    String sqlExpr=dbms().fillGenericQueryWithColumnTableAndAlias(sqlGenericExpression.getBody(),selectItems,tableName,grpByClause);
    String stringDataFilter=AnalysisHelper.getStringDataFilter(cachedAnalysis);
    if (stringDataFilter == null) {
      stringDataFilter=PluginConstant.EMPTY_STRING;
    }
    sqlExpr=dbms().addWhereToStatement(sqlExpr,stringDataFilter);
    indicator.setInstantiatedExpression(BooleanExpressionHelper.createTdExpression(sqlGenericExpression.getLanguage(),sqlExpr));
    if (ColumnsetPackage.eINSTANCE.getSimpleStatIndicator().isSuperTypeOf(indicator.eClass())) {
      SimpleStatIndicator simpleIndicator=(SimpleStatIndicator)indicator;
      String columnsName=createSelect(nominalColumns,new ArrayList<String>());
      for (      Indicator leafIndicator : simpleIndicator.getLeafIndicators()) {
        final Expression leafSqlGenericExpression=dbms().getSqlExpression(leafIndicator.getIndicatorDefinition());
        String leafSqlExpr=dbms().fillGenericQueryWithColumnTableAndAlias(leafSqlGenericExpression.getBody(),columnsName,tableName,grpByClause);
        leafSqlExpr=dbms().addWhereToStatement(leafSqlExpr,stringDataFilter);
        leafIndicator.setInstantiatedExpression(BooleanExpressionHelper.createTdExpression(leafSqlGenericExpression.getLanguage(),leafSqlExpr));
      }
    }
  }
}",0.992867332382311
138225,"/** 
 * Method ""createSqlQuery"".
 * @param dataFilterExpression
 * @param analysis
 * @param indicator
 * @throws ParseException
 * @throws AnalysisExecutionException
 */
private boolean createSqlQuery(String dataFilterAsString,Indicator indicator) throws ParseException, AnalysisExecutionException {
  ModelElement analyzedElement=indicator.getAnalyzedElement();
  if (analyzedElement == null) {
    return traceError(Messages.getString(""String_Node_Str"",indicator.getName()));
  }
  TdColumn tdColumn=SwitchHelpers.COLUMN_SWITCH.doSwitch(indicator.getAnalyzedElement());
  if (tdColumn == null) {
    return traceError(Messages.getString(""String_Node_Str"",indicator.getName()));
  }
  if (tdColumn.eIsProxy()) {
    tdColumn=(TdColumn)EObjectHelper.resolveObject(tdColumn);
  }
  String colName=getQuotedColumnName(tdColumn);
  if (!belongToSameSchemata(tdColumn)) {
    StringBuffer buf=new StringBuffer();
    for (    orgomg.cwm.objectmodel.core.Package schema : schemata.values()) {
      buf.append(schema.getName() + ""String_Node_Str"");
    }
    log.error(Messages.getString(""String_Node_Str"",colName,buf.toString().trim()));
    return false;
  }
  colName=castColumn(indicator,tdColumn,colName);
  String language=dbms().getDbmsName();
  Expression sqlGenericExpression=null;
  IndicatorDefinition indicatorDefinition;
  String label=indicator.getIndicatorDefinition().getLabel();
  if (label == null || PluginConstant.EMPTY_STRING.equals(label)) {
    indicatorDefinition=indicator.getIndicatorDefinition();
  }
 else {
    indicatorDefinition=DefinitionHandler.getInstance().getIndicatorDefinition(label);
  }
  if (indicatorDefinition == null) {
    return traceError(Messages.getString(""String_Node_Str"",indicator.getName()));
  }
  sqlGenericExpression=dbms().getSqlExpression(indicatorDefinition);
  final EClass indicatorEclass=indicator.eClass();
  if (sqlGenericExpression == null || sqlGenericExpression.getBody() == null) {
    if (IndicatorsPackage.eINSTANCE.getRegexpMatchingIndicator().equals(indicatorEclass)) {
      return traceError(Messages.getString(""String_Node_Str"",language));
    }
    traceError(Messages.getString(""String_Node_Str"",new Object[]{(indicator.getName() != null ? indicator.getName() : indicatorEclass.getName()),ResourceHelper.getUUID(indicatorDefinition),language}));
  }
  List<String> whereExpression=new ArrayList<String>();
  if (StringUtils.isNotBlank(dataFilterAsString)) {
    whereExpression.add(dataFilterAsString);
  }
  List<String> rangeStrings=null;
  DateGrain dateAggregationType=null;
  IndicatorParameters parameters=indicator.getParameters();
  if (parameters != null) {
    Domain bins=parameters.getBins();
    if (bins != null) {
      rangeStrings=getBinsAsGenericString(bins.getRanges(),colName);
    }
    DateParameters dateParameters=parameters.getDateParameters();
    if (dateParameters != null) {
      dateAggregationType=dateParameters.getDateAggregationType();
    }
    TextParameters textParameter=parameters.getTextParameter();
    if (textParameter != null) {
      if (textParameter.isUseNulls()) {
        colName=dbms().replaceNullsWithString(colName,""String_Node_Str"");
      }
 else {
        whereExpression.add(colName.concat(dbms().isNotNull()));
      }
      if (textParameter.isIgnoreCase()) {
        colName=dbms().toUpperCase(colName);
      }
      if (!textParameter.isUseBlank() && IndicatorsPackage.eINSTANCE.getLengthIndicator().isSuperTypeOf(indicatorEclass)) {
        String tdColName=getQuotedColumnName(tdColumn);
        tdColName=dbms().replaceNullsWithString(tdColName,""String_Node_Str"");
        whereExpression.add(dbms().isNotBlank(tdColName));
      }
 else       if (textParameter.isUseBlank() && IndicatorsPackage.eINSTANCE.getFrequencyIndicator().isSuperTypeOf(indicatorEclass)) {
        colName=dbms().trim(colName);
      }
    }
  }
  final ColumnSet columnSetOwner=ColumnHelper.getColumnOwnerAsColumnSet(tdColumn);
  String schemaName=getQuotedSchemaName(columnSetOwner);
  String table=getQuotedTableName(tdColumn);
  String catalogName=getQuotedCatalogName(columnSetOwner);
  if (catalogName == null && schemaName != null) {
    final Schema parentSchema=SchemaHelper.getParentSchema(columnSetOwner);
    final Catalog parentCatalog=CatalogHelper.getParentCatalog(parentSchema);
    catalogName=parentCatalog != null ? parentCatalog.getName() : null;
  }
  boolean isSybase=false;
  if (Arrays.asList(org.talend.utils.sql.ConnectionUtils.getSybaseDBProductsName()).contains(dbms().getDbmsName())) {
    isSybase=true;
  }
  if (isSybase) {
    schemaName=ColumnSetHelper.getTableOwner(columnSetOwner);
  }
  table=dbms().toQualifiedName(catalogName,schemaName,table);
  String completedSqlString=null;
  if (indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getMedianIndicator()) || indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getLowerQuartileIndicator()) || indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getUpperQuartileIndicator())) {
    completedSqlString=getCompletedStringForQuantiles(indicator,sqlGenericExpression,colName,table,whereExpression);
    if (completedSqlString != null) {
      whereExpression=duplicateForCrossJoin(completedSqlString,whereExpression,tdColumn);
      completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
    }
  }
 else   if (indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getFrequencyIndicator()) || IndicatorsPackage.eINSTANCE.getFrequencyIndicator().isSuperTypeOf(indicatorEclass) || indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getModeIndicator())|| UDIHelper.isFrequency(indicator)) {
    int topN=indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getModeIndicator()) ? 1 : getTopN(indicator);
    if (topN <= 0) {
      topN=TOP_N;
    }
    if (rangeStrings != null) {
      completedSqlString=getUnionCompletedString(indicator,sqlGenericExpression,colName,table,whereExpression,rangeStrings);
      if (indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getModeIndicator())) {
        completedSqlString=dbms().getTopNQuery(completedSqlString,topN);
      }
    }
 else     if (dateAggregationType != null && !dateAggregationType.equals(DateGrain.NONE) && Java2SqlType.isDateInSQL(tdColumn.getSqlDataType().getJavaDataType())) {
      completedSqlString=getDateAggregatedCompletedStringWithoutAlia(sqlGenericExpression,colName,table,dateAggregationType);
      completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
      completedSqlString=dbms().getTopNQuery(completedSqlString,topN);
    }
 else {
      if (indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getPatternFreqIndicator()) || indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getPatternLowFreqIndicator())) {
        if (Java2SqlType.isNumbericInSQL(tdColumn.getSqlDataType().getJavaDataType()) || Java2SqlType.isDateInSQL(tdColumn.getSqlDataType().getJavaDataType())) {
          colName=addFunctionTypeConvert(colName);
        }
        final EList<CharactersMapping> charactersMapping=indicatorDefinition.getCharactersMapping();
        colName=dbms().getPatternFinderFunction(colName,charactersMapping);
        if (colName == null) {
          colName=dbms().getPatternFinderDefaultFunction(colName);
        }
        if (colName == null) {
          return traceError(Messages.getString(""String_Node_Str"",language,indicator.getName()));
        }
      }
 else       if (indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getSoundexFreqIndicator()) || indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getSoundexLowFreqIndicator())) {
        table=dbms().getSoundexFunction(table,colName);
      }
      completedSqlString=dbms().fillGenericQueryWithColumnTableAndAlias(sqlGenericExpression.getBody(),colName,table,colName);
      completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
      completedSqlString=dbms().getTopNQuery(completedSqlString,topN);
    }
  }
 else   if (IndicatorsPackage.eINSTANCE.getPatternMatchingIndicator().isSuperTypeOf(indicatorEclass)) {
    List<String> patterns=getPatterns(indicator);
    if (patterns.isEmpty()) {
      return traceError(Messages.getString(""String_Node_Str"",language,indicator.getName()));
    }
    completedSqlString=replaceVariables(sqlGenericExpression.getBody(),colName,table,patterns);
    completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
  }
 else {
    if (IndicatorsPackage.eINSTANCE.getDefValueCountIndicator().equals(indicatorEclass)) {
      String defValue=ColumnHelper.getDefaultValue(tdColumn);
      if (defValue == null) {
        return traceError(Messages.getString(""String_Node_Str"",colName,indicator.getName()));
      }
      int javaType=tdColumn.getSqlDataType().getJavaDataType();
      if (!Java2SqlType.isNumbericInSQL(javaType) && !isFunction(defValue,table)) {
        defValue=""String_Node_Str"" + defValue + ""String_Node_Str"";
      }
      whereExpression.add(colName + dbms().equal() + defValue);
    }
    completedSqlString=dbms().fillGenericQueryWithColumnsAndTable(sqlGenericExpression.getBody(),colName,table);
    completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
  }
  String finalQuery=completedSqlString;
  if (finalQuery != null) {
    TdExpression instantiateSqlExpression=BooleanExpressionHelper.createTdExpression(language,finalQuery);
    indicator.setInstantiatedExpression(instantiateSqlExpression);
    return true;
  }
  return false;
}","/** 
 * Method ""createSqlQuery"".
 * @param dataFilterExpression
 * @param analysis
 * @param indicator
 * @throws ParseException
 * @throws AnalysisExecutionException
 */
private boolean createSqlQuery(String dataFilterAsString,Indicator indicator) throws ParseException, AnalysisExecutionException {
  ModelElement analyzedElement=indicator.getAnalyzedElement();
  if (analyzedElement == null) {
    return traceError(Messages.getString(""String_Node_Str"",indicator.getName()));
  }
  TdColumn tdColumn=SwitchHelpers.COLUMN_SWITCH.doSwitch(indicator.getAnalyzedElement());
  if (tdColumn == null) {
    return traceError(Messages.getString(""String_Node_Str"",indicator.getName()));
  }
  if (tdColumn.eIsProxy()) {
    tdColumn=(TdColumn)EObjectHelper.resolveObject(tdColumn);
  }
  String colName=getQuotedColumnName(tdColumn);
  if (!belongToSameSchemata(tdColumn)) {
    StringBuffer buf=new StringBuffer();
    for (    orgomg.cwm.objectmodel.core.Package schema : schemata.values()) {
      buf.append(schema.getName() + ""String_Node_Str"");
    }
    log.error(Messages.getString(""String_Node_Str"",colName,buf.toString().trim()));
    return false;
  }
  colName=castColumn(indicator,tdColumn,colName);
  String language=dbms().getDbmsName();
  Expression sqlGenericExpression=null;
  IndicatorDefinition indicatorDefinition;
  String label=indicator.getIndicatorDefinition().getLabel();
  if (label == null || PluginConstant.EMPTY_STRING.equals(label)) {
    indicatorDefinition=indicator.getIndicatorDefinition();
  }
 else {
    indicatorDefinition=DefinitionHandler.getInstance().getIndicatorDefinition(label);
  }
  if (indicatorDefinition == null) {
    return traceError(Messages.getString(""String_Node_Str"",indicator.getName()));
  }
  sqlGenericExpression=dbms().getSqlExpression(indicatorDefinition);
  final EClass indicatorEclass=indicator.eClass();
  if (sqlGenericExpression == null || sqlGenericExpression.getBody() == null) {
    if (IndicatorsPackage.eINSTANCE.getRegexpMatchingIndicator().equals(indicatorEclass)) {
      return traceError(Messages.getString(""String_Node_Str"",language));
    }
    traceError(Messages.getString(""String_Node_Str"",new Object[]{(indicator.getName() != null ? indicator.getName() : indicatorEclass.getName()),ResourceHelper.getUUID(indicatorDefinition),language}));
  }
  List<String> whereExpression=new ArrayList<String>();
  if (StringUtils.isNotBlank(dataFilterAsString)) {
    whereExpression.add(dataFilterAsString);
  }
  List<String> rangeStrings=null;
  DateGrain dateAggregationType=null;
  IndicatorParameters parameters=indicator.getParameters();
  if (parameters != null) {
    Domain bins=parameters.getBins();
    if (bins != null) {
      rangeStrings=getBinsAsGenericString(bins.getRanges(),colName);
    }
    DateParameters dateParameters=parameters.getDateParameters();
    if (dateParameters != null) {
      dateAggregationType=dateParameters.getDateAggregationType();
    }
    TextParameters textParameter=parameters.getTextParameter();
    if (textParameter != null) {
      if (textParameter.isUseNulls()) {
        colName=dbms().replaceNullsWithString(colName,""String_Node_Str"");
      }
 else {
        whereExpression.add(colName.concat(dbms().isNotNull()));
      }
      if (textParameter.isIgnoreCase()) {
        colName=dbms().toUpperCase(colName);
      }
      if (!textParameter.isUseBlank() && IndicatorsPackage.eINSTANCE.getLengthIndicator().isSuperTypeOf(indicatorEclass)) {
        String tdColName=getQuotedColumnName(tdColumn);
        tdColName=dbms().replaceNullsWithString(tdColName,""String_Node_Str"");
        whereExpression.add(dbms().isNotBlank(tdColName));
      }
 else       if (textParameter.isUseBlank() && IndicatorsPackage.eINSTANCE.getFrequencyIndicator().isSuperTypeOf(indicatorEclass)) {
        colName=dbms().trim(colName);
      }
    }
  }
  final ColumnSet columnSetOwner=ColumnHelper.getColumnOwnerAsColumnSet(tdColumn);
  String schemaName=getQuotedSchemaName(columnSetOwner);
  String table=getQuotedTableName(tdColumn);
  String catalogName=getQuotedCatalogName(columnSetOwner);
  if (catalogName == null && schemaName != null) {
    final Schema parentSchema=SchemaHelper.getParentSchema(columnSetOwner);
    final Catalog parentCatalog=CatalogHelper.getParentCatalog(parentSchema);
    catalogName=parentCatalog != null ? parentCatalog.getName() : null;
  }
  boolean isSybase=false;
  if (Arrays.asList(org.talend.utils.sql.ConnectionUtils.getSybaseDBProductsName()).contains(dbms().getDbmsName())) {
    isSybase=true;
  }
  if (isSybase) {
    schemaName=ColumnSetHelper.getTableOwner(columnSetOwner);
  }
  table=dbms().toQualifiedName(catalogName,schemaName,table);
  String completedSqlString=null;
  if (indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getMedianIndicator()) || indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getLowerQuartileIndicator()) || indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getUpperQuartileIndicator())) {
    completedSqlString=getCompletedStringForQuantiles(indicator,sqlGenericExpression,colName,table,whereExpression);
    if (completedSqlString != null) {
      whereExpression=duplicateForCrossJoin(completedSqlString,whereExpression,tdColumn);
      completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
    }
  }
 else   if (indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getFrequencyIndicator()) || IndicatorsPackage.eINSTANCE.getFrequencyIndicator().isSuperTypeOf(indicatorEclass) || indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getModeIndicator())|| UDIHelper.isFrequency(indicator)) {
    int topN=indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getModeIndicator()) ? 1 : getTopN(indicator);
    if (topN <= 0) {
      topN=TOP_N;
    }
    if (rangeStrings != null) {
      completedSqlString=getUnionCompletedString(indicator,sqlGenericExpression,colName,table,whereExpression,rangeStrings);
      if (indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getModeIndicator())) {
        completedSqlString=dbms().getTopNQuery(completedSqlString,topN);
      }
    }
 else     if (dateAggregationType != null && !dateAggregationType.equals(DateGrain.NONE) && Java2SqlType.isDateInSQL(tdColumn.getSqlDataType().getJavaDataType())) {
      completedSqlString=getDateAggregatedCompletedStringWithoutAlia(sqlGenericExpression,colName,table,dateAggregationType);
      completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
      completedSqlString=dbms().getTopNQuery(completedSqlString,topN);
    }
 else {
      if (indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getPatternFreqIndicator()) || indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getPatternLowFreqIndicator())) {
        if (Java2SqlType.isNumbericInSQL(tdColumn.getSqlDataType().getJavaDataType()) || Java2SqlType.isDateInSQL(tdColumn.getSqlDataType().getJavaDataType())) {
          colName=addFunctionTypeConvert(colName);
        }
        final EList<CharactersMapping> charactersMapping=indicatorDefinition.getCharactersMapping();
        colName=dbms().getPatternFinderFunction(colName,charactersMapping);
        if (colName == null) {
          colName=dbms().getPatternFinderDefaultFunction(colName);
        }
        if (colName == null) {
          return traceError(Messages.getString(""String_Node_Str"",language,indicator.getName()));
        }
      }
 else       if (indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getSoundexFreqIndicator()) || indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getSoundexLowFreqIndicator())) {
        table=dbms().getSoundexFunction(table,colName);
      }
      completedSqlString=dbms().fillGenericQueryWithColumnTableAndAlias(sqlGenericExpression.getBody(),colName,table,colName);
      completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
      completedSqlString=dbms().getTopNQuery(completedSqlString,topN);
    }
  }
 else   if (IndicatorsPackage.eINSTANCE.getPatternMatchingIndicator().isSuperTypeOf(indicatorEclass)) {
    List<String> patterns=getPatterns(indicator);
    if (patterns.isEmpty()) {
      return traceError(Messages.getString(""String_Node_Str"",language,indicator.getName()));
    }
    completedSqlString=replaceVariables(sqlGenericExpression.getBody(),colName,table,patterns);
    completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
  }
 else {
    if (IndicatorsPackage.eINSTANCE.getDefValueCountIndicator().equals(indicatorEclass)) {
      String defValue=ColumnHelper.getDefaultValue(tdColumn);
      if (defValue == null) {
        return traceError(Messages.getString(""String_Node_Str"",colName,indicator.getName()));
      }
      int javaType=tdColumn.getSqlDataType().getJavaDataType();
      if (!Java2SqlType.isNumbericInSQL(javaType) && !isFunction(defValue,table)) {
        defValue=""String_Node_Str"" + defValue + ""String_Node_Str"";
      }
      whereExpression.add(colName + dbms().equal() + defValue);
    }
    String sqlBody=sqlGenericExpression.getBody();
    if (sqlBody.indexOf(""String_Node_Str"") != -1) {
      completedSqlString=dbms().fillGenericQueryWithColumnTableAndAlias(sqlBody,colName,table,colName);
    }
 else {
      completedSqlString=dbms().fillGenericQueryWithColumnsAndTable(sqlBody,colName,table);
    }
    completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
  }
  String finalQuery=completedSqlString;
  if (finalQuery != null) {
    TdExpression instantiateSqlExpression=BooleanExpressionHelper.createTdExpression(language,finalQuery);
    indicator.setInstantiatedExpression(instantiateSqlExpression);
    return true;
  }
  return false;
}",0.9583507306889352
138226,"/** 
 * <!-- begin-user-doc --> <!-- end-user-doc -->
 * @generated NOT
 */
public EList<ModelElement> getNominalColumns(){
  EList<ModelElement> nominalColumns=new BasicElistExtend<ModelElement>();
  if (analyzedColumns != null) {
    for (    ModelElement column : analyzedColumns) {
      final MetadataColumn mdColumn=SwitchHelpers.METADATA_COLUMN_SWITCH.doSwitch(column);
      final TdColumn tdColumn=SwitchHelpers.COLUMN_SWITCH.doSwitch(column);
      final TdXmlElementType tdXmlElement=SwitchHelpers.XMLELEMENTTYPE_SWITCH.doSwitch(column);
      if (tdXmlElement != null) {
        break;
      }
      if (tdColumn == null && mdColumn == null && tdXmlElement == null) {
        if (column == null) {
          log.error(""String_Node_Str"");
        }
 else {
          log.error(""String_Node_Str"" + column.getName());
        }
        continue;
      }
      DataminingType dataminingType=null;
      if (tdColumn != null) {
        dataminingType=MetadataHelper.getDataminingType(column);
      }
 else       if (mdColumn != null) {
        int javaType=TalendTypeConvert.convertToJDBCType(mdColumn.getTalendType());
        dataminingType=MetadataHelper.getDefaultDataminingType(javaType);
      }
      if (dataminingType != null && DataminingType.NOMINAL.equals(dataminingType)) {
        nominalColumns.add(column);
      }
 else       if (null != mdColumn) {
        nominalColumns.add(column);
      }
    }
  }
  return nominalColumns;
}","/** 
 * <!-- begin-user-doc --> <!-- end-user-doc -->
 * @generated NOT
 */
public EList<ModelElement> getNominalColumns(){
  EList<ModelElement> nominalColumns=new BasicElistExtend<ModelElement>();
  if (analyzedColumns != null) {
    for (    ModelElement column : analyzedColumns) {
      final MetadataColumn mdColumn=SwitchHelpers.METADATA_COLUMN_SWITCH.doSwitch(column);
      final TdColumn tdColumn=SwitchHelpers.COLUMN_SWITCH.doSwitch(column);
      final TdXmlElementType tdXmlElement=SwitchHelpers.XMLELEMENTTYPE_SWITCH.doSwitch(column);
      if (tdXmlElement != null) {
        break;
      }
      if (tdColumn == null && mdColumn == null && tdXmlElement == null) {
        if (column == null) {
          log.error(""String_Node_Str"");
        }
 else {
          log.error(""String_Node_Str"" + column.getName());
        }
        continue;
      }
      DataminingType dataminingType=null;
      if (tdColumn != null) {
        dataminingType=MetadataHelper.getDataminingType(column);
      }
 else       if (mdColumn != null) {
        int javaType=TalendTypeConvert.convertToJDBCType(mdColumn.getTalendType());
        dataminingType=MetadataHelper.getDefaultDataminingType(javaType);
      }
      if (dataminingType != null && DataminingType.NOMINAL.equals(dataminingType)) {
        nominalColumns.add(column);
      }
    }
  }
  return nominalColumns;
}",0.9491166077738517
138227,"/** 
 * DOC bZhou Comment method ""checkConflict"".
 * @param record
 */
private void checkConflict(ItemRecord record){
  Property property=record.getProperty();
  if (property != null) {
    try {
      List<IRepositoryViewObject> allObjects=DqRepositoryViewService.getAllRepositoryResourceObjects(true);
      for (      IRepositoryViewObject object : allObjects) {
        if (record.getProperty() != null && record.getProperty().getId().equals(object.getProperty().getId())) {
          record.setConflictObject(object);
          record.addError(""String_Node_Str"" + record.getName() + ""String_Node_Str"");
          break;
        }
      }
    }
 catch (    Exception e) {
      record.addError(""String_Node_Str"" + record.getName() + ""String_Node_Str"");
    }
  }
}","/** 
 * DOC bZhou Comment method ""checkConflict"".
 * @param record
 */
private void checkConflict(ItemRecord record){
  Property property=record.getProperty();
  if (property != null) {
    try {
      List<IRepositoryViewObject> allObjects=DqRepositoryViewService.getAllRepositoryResourceObjects(true);
      for (      IRepositoryViewObject object : allObjects) {
        if (isConflict(property,object.getProperty())) {
          record.setConflictObject(object);
          record.addError(""String_Node_Str"" + record.getName() + ""String_Node_Str"");
          break;
        }
      }
    }
 catch (    Exception e) {
      record.addError(""String_Node_Str"" + record.getName() + ""String_Node_Str"");
    }
  }
}",0.927027027027027
138228,"public ItemRecord[] populate(ItemRecord[] elements,boolean checkExisted){
  List<ItemRecord> inValidRecords=new ArrayList<ItemRecord>();
  for (  ItemRecord record : elements) {
    record.getErrors().clear();
    checkDependency(record);
    if (checkExisted) {
      checkExisted(record);
    }
    if (!record.isValid()) {
      inValidRecords.add(record);
    }
  }
  return inValidRecords.toArray(new ItemRecord[inValidRecords.size()]);
}","public ItemRecord[] populate(ItemRecord[] elements,boolean checkExisted){
  List<ItemRecord> inValidRecords=new ArrayList<ItemRecord>();
  for (  ItemRecord record : elements) {
    record.getErrors().clear();
    checkDependency(record);
    if (checkExisted) {
      checkConflict(record);
    }
    if (!record.isValid()) {
      inValidRecords.add(record);
    }
  }
  return inValidRecords.toArray(new ItemRecord[inValidRecords.size()]);
}",0.9830890642615558
138229,"public void finish(ItemRecord[] records,IProgressMonitor monitor) throws IOException, CoreException {
  ItemRecord.clear();
  handleDefinitionFile();
  doMigration(monitor);
  deleteTempProjectFolder();
  clearUnloadResources();
  syncConnectionWithExplorer();
}","public void finish(ItemRecord[] records,IProgressMonitor monitor) throws IOException, CoreException {
  ItemRecord.clear();
  handleDefinitionFile();
  doMigration(monitor);
  deleteTempProjectFolder();
}",0.8755364806866953
138230,"/** 
 * DOC mzhao Comment method ""updateLineForJava"".
 * @param combo
 */
private void updateLineForJava(final CCombo combo){
  Composite detailComp=widgetMap.get(combo);
  if (detailComp != null) {
    detailComp.dispose();
  }
  detailComp=new Composite(combo.getParent(),SWT.NONE);
  detailComp.setLayout(new GridLayout(4,false));
  final Text classNameText=new Text(detailComp,SWT.BORDER);
  classNameText.setLayoutData(new GridData(GridData.FILL_BOTH));
  classNameText.addModifyListener(new NeedToSetDirtyListener());
  ((GridData)classNameText.getLayoutData()).widthHint=250;
  final Text jarPathText=new Text(detailComp,SWT.BORDER);
  jarPathText.setLayoutData(new GridData(GridData.FILL_BOTH));
  jarPathText.addModifyListener(new NeedToSetDirtyListener());
  ((GridData)jarPathText.getLayoutData()).widthHint=350;
  Button button=new Button(detailComp,SWT.PUSH);
  button.setText(""String_Node_Str"");
  button.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      JavaUdiJarSelectDialog selectDialog=UDIUtils.createUdiJarCheckedTreeSelectionDialog(ResourceManager.getUDIJarFolder(),jarPathText.getText().split(""String_Node_Str""));
      if (selectDialog.open() == Window.OK) {
        String path=""String_Node_Str"";
        for (        Object obj : selectDialog.getResult()) {
          if (obj instanceof File) {
            IFile file=ResourceManager.getRoot().getFile(new org.eclipse.core.runtime.Path(((File)obj).getPath()));
            if (!""String_Node_Str"".equalsIgnoreCase(path)) {
              path+=""String_Node_Str"";
            }
            path+=file.getName();
            setDirty(true);
          }
        }
        jarPathText.setText(path);
        validateJavaUDI(classNameText,jarPathText);
        ProxyRepositoryManager.getInstance().save(Boolean.TRUE);
      }
    }
  }
);
  classNameText.addListener(SWT.Modify,new Listener(){
    public void handleEvent(    Event event){
      setClassNameForSave(classNameText.getText().toString());
      setJarPathForSave(jarPathText.getText().toString());
    }
  }
);
  combo.setData(PluginConstant.CLASS_NAME_TEXT,classNameText);
  combo.setData(PluginConstant.JAR_FILE_PATH,jarPathText);
  createExpressionDelButton(detailComp,combo);
  GridDataFactory.fillDefaults().align(SWT.FILL,SWT.FILL).grab(true,false).applyTo(detailComp);
  detailComp.getParent().layout();
  widgetMap.put(combo,detailComp);
  definitionSection.setExpanded(false);
  definitionSection.setExpanded(true);
}","/** 
 * DOC mzhao Comment method ""updateLineForJava"".
 * @param combo
 */
private void updateLineForJava(final CCombo combo){
  Composite detailComp=widgetMap.get(combo);
  if (detailComp != null) {
    detailComp.dispose();
  }
  detailComp=new Composite(combo.getParent(),SWT.NONE);
  detailComp.setLayout(new GridLayout(4,false));
  final Text classNameText=new Text(detailComp,SWT.BORDER);
  classNameText.setLayoutData(new GridData(GridData.FILL_BOTH));
  classNameText.addModifyListener(new NeedToSetDirtyListener());
  ((GridData)classNameText.getLayoutData()).widthHint=250;
  classNameText.addModifyListener(new ExpressTextModListener(combo));
  final Text jarPathText=new Text(detailComp,SWT.BORDER);
  jarPathText.setLayoutData(new GridData(GridData.FILL_BOTH));
  jarPathText.addModifyListener(new NeedToSetDirtyListener());
  ((GridData)jarPathText.getLayoutData()).widthHint=350;
  Button button=new Button(detailComp,SWT.PUSH);
  button.setText(""String_Node_Str"");
  button.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      JavaUdiJarSelectDialog selectDialog=UDIUtils.createUdiJarCheckedTreeSelectionDialog(ResourceManager.getUDIJarFolder(),jarPathText.getText().split(""String_Node_Str""));
      if (selectDialog.open() == Window.OK) {
        String path=""String_Node_Str"";
        for (        Object obj : selectDialog.getResult()) {
          if (obj instanceof File) {
            IFile file=ResourceManager.getRoot().getFile(new org.eclipse.core.runtime.Path(((File)obj).getPath()));
            if (!""String_Node_Str"".equalsIgnoreCase(path)) {
              path+=""String_Node_Str"";
            }
            path+=file.getName();
            setDirty(true);
          }
        }
        jarPathText.setText(path);
        validateJavaUDI(classNameText,jarPathText);
        ProxyRepositoryManager.getInstance().save(Boolean.TRUE);
      }
    }
  }
);
  classNameText.addListener(SWT.Modify,new Listener(){
    public void handleEvent(    Event event){
      setClassNameForSave(classNameText.getText().toString());
      setJarPathForSave(jarPathText.getText().toString());
    }
  }
);
  combo.setData(PluginConstant.CLASS_NAME_TEXT,classNameText);
  combo.setData(PluginConstant.JAR_FILE_PATH,jarPathText);
  createExpressionDelButton(detailComp,combo);
  GridDataFactory.fillDefaults().align(SWT.FILL,SWT.FILL).grab(true,false).applyTo(detailComp);
  detailComp.getParent().layout();
  widgetMap.put(combo,detailComp);
  definitionSection.setExpanded(false);
  definitionSection.setExpanded(true);
}",0.9862637362637364
138231,"public int getJavaType(){
  return super.getJavaType();
}","public int getJavaType(){
  return TalendTypeConvert.convertToJDBCType(getXmlElementType().getJavaType());
}",0.6666666666666666
138232,"/** 
 * DOC xqliu Comment method ""createIndicatorUnit"".
 * @param pfile
 * @param modelElementIndicator
 * @param analysis
 * @param indicatorDefinition
 * @return
 */
public static TypedReturnCode<IndicatorUnit> createIndicatorUnit(Pattern pattern,ModelElementIndicator modelElementIndicator,Analysis analysis,IndicatorDefinition indicatorDefinition){
  TypedReturnCode<IndicatorUnit> result=new TypedReturnCode<IndicatorUnit>();
  for (  Indicator indicator : modelElementIndicator.getIndicators()) {
    if (UDIHelper.getMatchingIndicatorName(indicatorDefinition,pattern).equals(indicator.getName())) {
      result.setOk(false);
      result.setMessage(DefaultMessagesImpl.getString(""String_Node_Str""));
      return result;
    }
  }
  Indicator patternMatchingIndicator=null;
  String expressionType=DomainHelper.getExpressionType(pattern);
  boolean isSQLPattern=(ExpressionType.SQL_LIKE.getLiteral().equals(expressionType));
  if (indicatorDefinition != null) {
    patternMatchingIndicator=UDIFactory.createUserDefIndicator(indicatorDefinition,pattern);
  }
 else {
    patternMatchingIndicator=isSQLPattern ? PatternIndicatorFactory.createSqlPatternMatchingIndicator(pattern) : PatternIndicatorFactory.createRegexpMatchingIndicator(pattern);
  }
  IEditorPart theEdit=CorePlugin.getDefault().getCurrentActiveEditor();
  if (theEdit != null && theEdit instanceof AnalysisEditor && analysis.getContext().getConnection() == null) {
    theEdit.doSave(null);
  }
  ExecutionLanguage executionLanguage=analysis.getParameters().getExecutionLanguage();
  DbmsLanguage dbmsLanguage=DbmsLanguageFactory.createDbmsLanguage(analysis);
  if (dbmsLanguage.isSql()) {
    MessageUI.openWarning(DefaultMessagesImpl.getString(""String_Node_Str""));
    result.setOk(false);
    return result;
  }
  boolean isJavaEngin=ExecutionLanguage.JAVA.equals(executionLanguage);
  Expression returnExpression=dbmsLanguage.getRegexp(pattern,isJavaEngin);
  if (ExpressionType.REGEXP.getLiteral().equals(expressionType) && returnExpression == null) {
    String executeType=isJavaEngin ? executionLanguage.getName() : dbmsLanguage.getDbmsName();
    boolean openPattern=MessageDialog.openQuestion(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str"",executeType));
    if (openPattern) {
      RepositoryNode node=(RepositoryNode)RepositoryNodeHelper.recursiveFind(pattern);
      if (RepositoryNodeHelper.canOpenEditor(node)) {
        new OpenItemEditorAction(node).run();
      }
    }
    result.setOk(false);
    return result;
  }
  String javaRexex=DomainHelper.getJavaRegexp(pattern);
  if (javaRexex == null) {
  }
  DataManager dm=analysis.getContext().getConnection();
  if (dm != null) {
    TypedReturnCode<java.sql.Connection> trc=JavaSqlFactory.createConnection((Connection)dm);
    boolean isDelimitedFileConnection=ConnectionUtils.isDelimitedFileConnection((DataProvider)dm);
    if (trc != null) {
      java.sql.Connection conn=trc.getObject();
      if (isDelimitedFileConnection) {
        dbmsLanguage=DbmsLanguageFactory.createDbmsLanguage((DelimitedFileConnection)dm);
      }
 else {
        try {
          SoftwareSystem softwareSystem=DatabaseContentRetriever.getSoftwareSystem(conn);
          dbmsLanguage=DbmsLanguageFactory.createDbmsLanguage(softwareSystem);
        }
 catch (        SQLException e) {
          log.error(e,e);
        }
      }
    }
    if (!(isSQLPattern || DefinitionHandler.getInstance().canRunRegularExpressionMatchingIndicator(dbmsLanguage,isJavaEngin,pattern) || isDelimitedFileConnection)) {
      result.setOk(false);
      result.setMessage(DefaultMessagesImpl.getString(""String_Node_Str""));
      return result;
    }
  }
  if (indicatorDefinition == null) {
    if (!DefinitionHandler.getInstance().setDefaultIndicatorDefinition(patternMatchingIndicator)) {
      log.error(DefaultMessagesImpl.getString(""String_Node_Str"",patternMatchingIndicator.getName()));
    }
  }
 else {
    patternMatchingIndicator.setIndicatorDefinition(indicatorDefinition);
  }
  IndicatorEnum type=IndicatorEnum.findIndicatorEnum(patternMatchingIndicator.eClass());
  IndicatorUnit addIndicatorUnit=modelElementIndicator.addSpecialIndicator(type,patternMatchingIndicator);
  DependenciesHandler.getInstance().setUsageDependencyOn(analysis,pattern);
  result.setOk(true);
  result.setMessage(DefaultMessagesImpl.getString(""String_Node_Str""));
  result.setObject(addIndicatorUnit);
  return result;
}","/** 
 * DOC xqliu Comment method ""createIndicatorUnit"".
 * @param pfile
 * @param modelElementIndicator
 * @param analysis
 * @param indicatorDefinition
 * @return
 */
public static TypedReturnCode<IndicatorUnit> createIndicatorUnit(Pattern pattern,ModelElementIndicator modelElementIndicator,Analysis analysis,IndicatorDefinition indicatorDefinition){
  TypedReturnCode<IndicatorUnit> result=new TypedReturnCode<IndicatorUnit>();
  for (  Indicator indicator : modelElementIndicator.getIndicators()) {
    if (UDIHelper.getMatchingIndicatorName(indicatorDefinition,pattern).equals(indicator.getName())) {
      result.setOk(false);
      result.setMessage(DefaultMessagesImpl.getString(""String_Node_Str""));
      return result;
    }
  }
  Indicator patternMatchingIndicator=null;
  String expressionType=DomainHelper.getExpressionType(pattern);
  boolean isSQLPattern=(ExpressionType.SQL_LIKE.getLiteral().equals(expressionType));
  if (indicatorDefinition != null) {
    patternMatchingIndicator=UDIFactory.createUserDefIndicator(indicatorDefinition,pattern);
  }
 else {
    patternMatchingIndicator=isSQLPattern ? PatternIndicatorFactory.createSqlPatternMatchingIndicator(pattern) : PatternIndicatorFactory.createRegexpMatchingIndicator(pattern);
  }
  IEditorPart theEdit=CorePlugin.getDefault().getCurrentActiveEditor();
  if (theEdit != null && theEdit instanceof AnalysisEditor && analysis.getContext().getConnection() == null) {
    theEdit.doSave(null);
  }
  ExecutionLanguage executionLanguage=analysis.getParameters().getExecutionLanguage();
  DbmsLanguage dbmsLanguage=DbmsLanguageFactory.createDbmsLanguage(analysis);
  if (dbmsLanguage.isSql()) {
    MessageUI.openWarning(DefaultMessagesImpl.getString(""String_Node_Str""));
    result.setOk(false);
    return result;
  }
  boolean isJavaEngin=ExecutionLanguage.JAVA.equals(executionLanguage);
  Expression returnExpression=dbmsLanguage.getRegexp(pattern,isJavaEngin);
  if (ExpressionType.REGEXP.getLiteral().equals(expressionType) && returnExpression == null) {
    String executeType=isJavaEngin ? executionLanguage.getName() : dbmsLanguage.getDbmsName();
    boolean openPattern=MessageDialog.openQuestion(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str"",executeType));
    if (openPattern) {
      RepositoryNode node=(RepositoryNode)RepositoryNodeHelper.recursiveFind(pattern);
      if (RepositoryNodeHelper.canOpenEditor(node)) {
        new OpenItemEditorAction(node).run();
      }
    }
    result.setOk(false);
    return result;
  }
  String javaRexex=DomainHelper.getJavaRegexp(pattern);
  if (javaRexex == null) {
  }
  DataManager dm=analysis.getContext().getConnection();
  if (dm != null) {
    TypedReturnCode<java.sql.Connection> trc=JavaSqlFactory.createConnection((Connection)dm);
    boolean isDelimitedFileConnection=ConnectionUtils.isDelimitedFileConnection((DataProvider)dm);
    boolean isMdmConnection=ConnectionUtils.isMdmConnection((DataProvider)dm);
    if (trc != null) {
      java.sql.Connection conn=trc.getObject();
      if (isDelimitedFileConnection) {
        dbmsLanguage=DbmsLanguageFactory.createDbmsLanguage((DelimitedFileConnection)dm);
      }
 else       if (isMdmConnection) {
        dbmsLanguage=DbmsLanguageFactory.createDbmsLanguage((MDMConnection)dm);
      }
 else {
        try {
          SoftwareSystem softwareSystem=DatabaseContentRetriever.getSoftwareSystem(conn);
          dbmsLanguage=DbmsLanguageFactory.createDbmsLanguage(softwareSystem);
        }
 catch (        SQLException e) {
          log.error(e,e);
        }
      }
    }
    if (!(isSQLPattern || DefinitionHandler.getInstance().canRunRegularExpressionMatchingIndicator(dbmsLanguage,isJavaEngin,pattern) || isDelimitedFileConnection)) {
      result.setOk(false);
      result.setMessage(DefaultMessagesImpl.getString(""String_Node_Str""));
      return result;
    }
  }
  if (indicatorDefinition == null) {
    if (!DefinitionHandler.getInstance().setDefaultIndicatorDefinition(patternMatchingIndicator)) {
      log.error(DefaultMessagesImpl.getString(""String_Node_Str"",patternMatchingIndicator.getName()));
    }
  }
 else {
    patternMatchingIndicator.setIndicatorDefinition(indicatorDefinition);
  }
  IndicatorEnum type=IndicatorEnum.findIndicatorEnum(patternMatchingIndicator.eClass());
  IndicatorUnit addIndicatorUnit=modelElementIndicator.addSpecialIndicator(type,patternMatchingIndicator);
  DependenciesHandler.getInstance().setUsageDependencyOn(analysis,pattern);
  result.setOk(true);
  result.setMessage(DefaultMessagesImpl.getString(""String_Node_Str""));
  result.setObject(addIndicatorUnit);
  return result;
}",0.9781857451403888
138233,"/** 
 * @param outputFolder
 * @throws DataprofilerCoreException
 */
public void saveAnalysis() throws DataprofilerCoreException {
  columnSetAnalysisHandler.setName(columnSetAnalysisHandler.getName().replace(""String_Node_Str"",""String_Node_Str""));
  for (  Domain domain : this.analysis.getParameters().getDataFilter()) {
    domain.setName(this.analysis.getName());
  }
  IRepositoryViewObject reposObject=null;
  columnSetAnalysisHandler.clearAnalysis();
  simpleStatIndicator.getAnalyzedColumns().clear();
  allMatchIndicator.getAnalyzedColumns().clear();
  Analysis analysis=columnSetAnalysisHandler.getAnalysis();
  analysis.getParameters().setExecutionLanguage(ExecutionLanguage.get(execLang));
  columnSetAnalysisHandler.setStringDataFilter(dataFilterComp.getDataFilterString());
  List<IRepositoryNode> repositoryNodes=treeViewer.getColumnSetMultiValueList();
  Connection tdProvider=null;
  if (repositoryNodes != null && repositoryNodes.size() != 0) {
    ConnectionItem item=(ConnectionItem)repositoryNodes.get(0).getObject().getProperty().getItem();
    tdProvider=item.getConnection();
    if (tdProvider.eIsProxy()) {
      tdProvider=(Connection)EObjectHelper.resolveObject(tdProvider);
    }
    analysis.getContext().setConnection(tdProvider);
    List<ModelElement> columnList=new ArrayList<ModelElement>();
    for (    IRepositoryNode rd : repositoryNodes) {
      reposObject=rd.getObject();
      if (rd instanceof MDMXmlElementRepNode) {
        columnList.add((ModelElement)((MetadataXmlElementTypeRepositoryObject)reposObject).getTdXmlElementType());
      }
 else {
        columnList.add((ModelElement)((MetadataColumnRepositoryObject)reposObject).getTdColumn());
      }
    }
    simpleStatIndicator.getAnalyzedColumns().addAll(columnList);
    columnSetAnalysisHandler.addIndicator(columnList,simpleStatIndicator);
    allMatchIndicator.getCompositeRegexMatchingIndicators().clear();
    ModelElementIndicator[] modelElementIndicator=treeViewer.getModelElementIndicator();
    if (modelElementIndicator != null) {
      for (      ModelElementIndicator modelElementInd : modelElementIndicator) {
        Indicator[] inds=modelElementInd.getPatternIndicators();
        for (        Indicator ind : inds) {
          if (ind instanceof RegexpMatchingIndicator) {
            ind.setAnalyzedElement(((MetadataColumnRepositoryObject)modelElementInd.getModelElementRepositoryNode().getObject()).getTdColumn());
            allMatchIndicator.getCompositeRegexMatchingIndicators().add((RegexpMatchingIndicator)ind);
          }
        }
      }
    }
    if (allMatchIndicator.getCompositeRegexMatchingIndicators().size() > 0) {
      allMatchIndicator.getAnalyzedColumns().addAll(columnList);
      columnSetAnalysisHandler.addIndicator(columnList,allMatchIndicator);
    }
  }
 else {
    tdProvider=(Connection)analysis.getContext().getConnection();
    if (tdProvider != null && tdProvider.getSupplierDependency().size() > 0) {
      tdProvider.getSupplierDependency().get(0).getClient().remove(analysis);
      analysis.getContext().setConnection(null);
      analysis.getClientDependency().clear();
    }
  }
  String urlString=analysis.eResource() != null ? analysis.eResource().getURI().toFileString() : PluginConstant.EMPTY_STRING;
  this.updateAnalysisClientDependency();
  ReturnCode saved=new ReturnCode(false);
  IEditorInput editorInput=this.getEditorInput();
  if (editorInput instanceof AnalysisItemEditorInput) {
    AnalysisItemEditorInput analysisInput=(AnalysisItemEditorInput)editorInput;
    TDQAnalysisItem tdqAnalysisItem=analysisInput.getTDQAnalysisItem();
    tdqAnalysisItem.getProperty().setLabel(columnSetAnalysisHandler.getName());
    this.nameText.setText(columnSetAnalysisHandler.getName());
    saved=ElementWriterFactory.getInstance().createAnalysisWrite().save(tdqAnalysisItem);
  }
  if (saved.isOk()) {
    RepositoryNode node=RepositoryNodeHelper.recursiveFind(tdProvider);
    if (node != null) {
      ElementWriterFactory.getInstance().createDataProviderWriter().save(node.getObject().getProperty().getItem());
    }
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + urlString + ""String_Node_Str"");
    }
  }
 else {
    throw new DataprofilerCoreException(DefaultMessagesImpl.getString(""String_Node_Str"",analysis.getName(),urlString,saved.getMessage()));
  }
  treeViewer.setDirty(false);
  dataFilterComp.setDirty(false);
}","/** 
 * @param outputFolder
 * @throws DataprofilerCoreException
 */
public void saveAnalysis() throws DataprofilerCoreException {
  columnSetAnalysisHandler.setName(columnSetAnalysisHandler.getName().replace(""String_Node_Str"",""String_Node_Str""));
  for (  Domain domain : this.analysis.getParameters().getDataFilter()) {
    domain.setName(this.analysis.getName());
  }
  IRepositoryViewObject reposObject=null;
  columnSetAnalysisHandler.clearAnalysis();
  simpleStatIndicator.getAnalyzedColumns().clear();
  allMatchIndicator.getAnalyzedColumns().clear();
  Analysis analysis=columnSetAnalysisHandler.getAnalysis();
  analysis.getParameters().setExecutionLanguage(ExecutionLanguage.get(execLang));
  columnSetAnalysisHandler.setStringDataFilter(dataFilterComp.getDataFilterString());
  List<IRepositoryNode> repositoryNodes=treeViewer.getColumnSetMultiValueList();
  Connection tdProvider=null;
  if (repositoryNodes != null && repositoryNodes.size() != 0) {
    ConnectionItem item=(ConnectionItem)repositoryNodes.get(0).getObject().getProperty().getItem();
    tdProvider=item.getConnection();
    if (tdProvider.eIsProxy()) {
      tdProvider=(Connection)EObjectHelper.resolveObject(tdProvider);
    }
    analysis.getContext().setConnection(tdProvider);
    List<ModelElement> columnList=new ArrayList<ModelElement>();
    for (    IRepositoryNode rd : repositoryNodes) {
      reposObject=rd.getObject();
      if (rd instanceof MDMXmlElementRepNode) {
        columnList.add((ModelElement)((MetadataXmlElementTypeRepositoryObject)reposObject).getTdXmlElementType());
      }
 else {
        columnList.add((ModelElement)((MetadataColumnRepositoryObject)reposObject).getTdColumn());
      }
    }
    simpleStatIndicator.getAnalyzedColumns().addAll(columnList);
    columnSetAnalysisHandler.addIndicator(columnList,simpleStatIndicator);
    allMatchIndicator.getCompositeRegexMatchingIndicators().clear();
    ModelElementIndicator[] modelElementIndicator=treeViewer.getModelElementIndicator();
    if (modelElementIndicator != null) {
      for (      ModelElementIndicator modelElementInd : modelElementIndicator) {
        Indicator[] inds=modelElementInd.getPatternIndicators();
        for (        Indicator ind : inds) {
          if (ind instanceof RegexpMatchingIndicator) {
            IRepositoryViewObject obj=modelElementInd.getModelElementRepositoryNode().getObject();
            ModelElement analyzedElt=obj instanceof MetadataColumnRepositoryObject ? ((MetadataColumnRepositoryObject)obj).getTdColumn() : ((MetadataXmlElementTypeRepositoryObject)obj).getModelElement();
            ind.setAnalyzedElement(analyzedElt);
            allMatchIndicator.getCompositeRegexMatchingIndicators().add((RegexpMatchingIndicator)ind);
          }
        }
      }
    }
    if (allMatchIndicator.getCompositeRegexMatchingIndicators().size() > 0) {
      allMatchIndicator.getAnalyzedColumns().addAll(columnList);
      columnSetAnalysisHandler.addIndicator(columnList,allMatchIndicator);
    }
  }
 else {
    tdProvider=(Connection)analysis.getContext().getConnection();
    if (tdProvider != null && tdProvider.getSupplierDependency().size() > 0) {
      tdProvider.getSupplierDependency().get(0).getClient().remove(analysis);
      analysis.getContext().setConnection(null);
      analysis.getClientDependency().clear();
    }
  }
  String urlString=analysis.eResource() != null ? analysis.eResource().getURI().toFileString() : PluginConstant.EMPTY_STRING;
  this.updateAnalysisClientDependency();
  ReturnCode saved=new ReturnCode(false);
  IEditorInput editorInput=this.getEditorInput();
  if (editorInput instanceof AnalysisItemEditorInput) {
    AnalysisItemEditorInput analysisInput=(AnalysisItemEditorInput)editorInput;
    TDQAnalysisItem tdqAnalysisItem=analysisInput.getTDQAnalysisItem();
    tdqAnalysisItem.getProperty().setLabel(columnSetAnalysisHandler.getName());
    this.nameText.setText(columnSetAnalysisHandler.getName());
    saved=ElementWriterFactory.getInstance().createAnalysisWrite().save(tdqAnalysisItem);
  }
  if (saved.isOk()) {
    RepositoryNode node=RepositoryNodeHelper.recursiveFind(tdProvider);
    if (node != null) {
      ElementWriterFactory.getInstance().createDataProviderWriter().save(node.getObject().getProperty().getItem());
    }
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + urlString + ""String_Node_Str"");
    }
  }
 else {
    throw new DataprofilerCoreException(DefaultMessagesImpl.getString(""String_Node_Str"",analysis.getName(),urlString,saved.getMessage()));
  }
  treeViewer.setDirty(false);
  dataFilterComp.setDirty(false);
}",0.9682064916362024
138234,"private void addItemElements(final ModelElementIndicator[] elements){
  for (int i=0; i < elements.length; i++) {
    final ModelElementIndicator meIndicator=(ModelElementIndicator)elements[i];
    final ModelElement modelElement=RepositoryNodeHelper.getSubModelElement(meIndicator.getModelElementRepositoryNode());
    final TreeItem treeItem=new TreeItem(tree,SWT.NONE);
    MetadataHelper.setDataminingType(DataminingType.NOMINAL,modelElement);
    columnSetMultiValueList.add(meIndicator.getModelElementRepositoryNode());
    treeItem.setImage(ImageLib.getImage(ImageLib.TD_COLUMN));
    treeItem.setText(0,getModelElemetnDisplayName(meIndicator));
    treeItem.setData(COLUMN_INDICATOR_KEY,modelElement);
    treeItem.setData(MODELELEMENT_INDICATOR_KEY,meIndicator);
    TreeEditor comboEditor=new TreeEditor(tree);
    final CCombo combo=new CCombo(tree,SWT.BORDER);
    for (    DataminingType type : DataminingType.values()) {
      combo.add(type.getLiteral());
    }
    DataminingType dataminingType=MetadataHelper.getDataminingType(modelElement);
    if (meIndicator instanceof DelimitedFileIndicator) {
      dataminingType=MetadataHelper.getDefaultDataminingType(meIndicator.getJavaType());
    }
    if (dataminingType == null) {
      combo.select(0);
    }
 else {
      combo.setText(dataminingType.getLiteral());
    }
    combo.addSelectionListener(new SelectionAdapter(){
      public void widgetSelected(      SelectionEvent e){
        MetadataHelper.setDataminingType(DataminingType.get(combo.getText()),modelElement);
        setDirty(true);
      }
    }
);
    combo.setEditable(false);
    comboEditor.minimumWidth=WIDTH1_CELL;
    comboEditor.setEditor(combo,treeItem,1);
    TreeEditor addPatternEditor=new TreeEditor(tree);
    Label addPatternLabl=new Label(tree,SWT.NONE);
    addPatternLabl.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_WHITE));
    addPatternLabl.setImage(ImageLib.getImage(ImageLib.ADD_PATTERN));
    addPatternLabl.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
    addPatternLabl.pack();
    PatternMouseAdapter mouseAdapter=new PatternMouseAdapter(this,masterPage,meIndicator,treeItem);
    mouseAdapter.addFilter(new ViewerFilter(){
      @Override public boolean select(      Viewer viewer,      Object parentElement,      Object element){
        if (element instanceof IFolder) {
          IFolder folder=(IFolder)element;
          return !folder.getName().endsWith(""String_Node_Str"");
        }
        return true;
      }
    }
);
    addPatternLabl.addMouseListener(mouseAdapter);
    addPatternEditor.minimumWidth=addPatternLabl.getImage().getBounds().width;
    addPatternEditor.setEditor(addPatternLabl,treeItem,2);
    TreeEditor delLabelEditor=new TreeEditor(tree);
    Label delLabel=new Label(tree,SWT.NONE);
    delLabel.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_WHITE));
    delLabel.setImage(ImageLib.getImage(ImageLib.DELETE_ACTION));
    delLabel.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
    delLabel.pack();
    delLabel.addMouseListener(new MouseAdapter(){
      @Override public void mouseDown(      MouseEvent e){
        deleteColumnItems(meIndicator.getModelElementRepositoryNode());
        removeItemBranch(treeItem);
        enabledButtons(false);
        updateBindConnection(masterPage,tree);
      }
    }
);
    delLabelEditor.minimumWidth=delLabel.getImage().getBounds().width;
    delLabelEditor.horizontalAlignment=SWT.CENTER;
    delLabelEditor.setEditor(delLabel,treeItem,3);
    treeItem.setData(ITEM_EDITOR_KEY,new TreeEditor[]{comboEditor,addPatternEditor,delLabelEditor});
    if (meIndicator.hasIndicators()) {
      createIndicatorItems(treeItem,meIndicator.getIndicatorUnits());
    }
    delLabelEditor.layout();
    treeItem.setExpanded(true);
  }
  tree.layout();
  tree.redraw();
  this.setDirty(true);
  tree.forceFocus();
}","private void addItemElements(final ModelElementIndicator[] elements){
  for (int i=0; i < elements.length; i++) {
    final ModelElementIndicator meIndicator=(ModelElementIndicator)elements[i];
    final ModelElement modelElement=RepositoryNodeHelper.getSubModelElement(meIndicator.getModelElementRepositoryNode());
    final TreeItem treeItem=new TreeItem(tree,SWT.NONE);
    MetadataHelper.setDataminingType(DataminingType.NOMINAL,modelElement);
    columnSetMultiValueList.add(meIndicator.getModelElementRepositoryNode());
    treeItem.setImage(ImageLib.getImage(ImageLib.TD_COLUMN));
    treeItem.setText(0,getModelElemetnDisplayName(meIndicator));
    treeItem.setData(COLUMN_INDICATOR_KEY,modelElement);
    treeItem.setData(MODELELEMENT_INDICATOR_KEY,meIndicator);
    TreeEditor comboEditor=new TreeEditor(tree);
    final CCombo combo=new CCombo(tree,SWT.BORDER);
    for (    DataminingType type : DataminingType.values()) {
      combo.add(type.getLiteral());
    }
    DataminingType dataminingType=MetadataHelper.getDataminingType(modelElement);
    if (meIndicator instanceof DelimitedFileIndicator) {
      dataminingType=MetadataHelper.getDefaultDataminingType(meIndicator.getJavaType());
    }
 else     if (meIndicator instanceof XmlElementIndicator) {
      dataminingType=MetadataHelper.getDataminingType(modelElement);
    }
    if (dataminingType == null) {
      combo.select(0);
    }
 else {
      combo.setText(dataminingType.getLiteral());
    }
    combo.addSelectionListener(new SelectionAdapter(){
      public void widgetSelected(      SelectionEvent e){
        MetadataHelper.setDataminingType(DataminingType.get(combo.getText()),modelElement);
        setDirty(true);
      }
    }
);
    combo.setEditable(false);
    comboEditor.minimumWidth=WIDTH1_CELL;
    comboEditor.setEditor(combo,treeItem,1);
    TreeEditor addPatternEditor=new TreeEditor(tree);
    Label addPatternLabl=new Label(tree,SWT.NONE);
    addPatternLabl.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_WHITE));
    addPatternLabl.setImage(ImageLib.getImage(ImageLib.ADD_PATTERN));
    addPatternLabl.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
    addPatternLabl.pack();
    PatternMouseAdapter mouseAdapter=new PatternMouseAdapter(this,masterPage,meIndicator,treeItem);
    mouseAdapter.addFilter(new ViewerFilter(){
      @Override public boolean select(      Viewer viewer,      Object parentElement,      Object element){
        if (element instanceof IFolder) {
          IFolder folder=(IFolder)element;
          return !folder.getName().endsWith(""String_Node_Str"");
        }
        return true;
      }
    }
);
    addPatternLabl.addMouseListener(mouseAdapter);
    addPatternEditor.minimumWidth=addPatternLabl.getImage().getBounds().width;
    addPatternEditor.setEditor(addPatternLabl,treeItem,2);
    TreeEditor delLabelEditor=new TreeEditor(tree);
    Label delLabel=new Label(tree,SWT.NONE);
    delLabel.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_WHITE));
    delLabel.setImage(ImageLib.getImage(ImageLib.DELETE_ACTION));
    delLabel.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
    delLabel.pack();
    delLabel.addMouseListener(new MouseAdapter(){
      @Override public void mouseDown(      MouseEvent e){
        deleteColumnItems(meIndicator.getModelElementRepositoryNode());
        removeItemBranch(treeItem);
        enabledButtons(false);
        updateBindConnection(masterPage,tree);
      }
    }
);
    delLabelEditor.minimumWidth=delLabel.getImage().getBounds().width;
    delLabelEditor.horizontalAlignment=SWT.CENTER;
    delLabelEditor.setEditor(delLabel,treeItem,3);
    treeItem.setData(ITEM_EDITOR_KEY,new TreeEditor[]{comboEditor,addPatternEditor,delLabelEditor});
    if (meIndicator.hasIndicators()) {
      createIndicatorItems(treeItem,meIndicator.getIndicatorUnits());
    }
    delLabelEditor.layout();
    treeItem.setExpanded(true);
  }
  tree.layout();
  tree.redraw();
  this.setDirty(true);
  tree.forceFocus();
}",0.9830167316643604
138235,"@Override public void mouseDown(MouseEvent e){
  DataManager dm=analysis.getContext().getConnection();
  if (dm == null) {
    masterPage.doSave(null);
  }
  if (dm != null && dm instanceof Connection) {
    Connection dp=(Connection)dm;
    if (ConnectionUtils.isMdmConnection(dp)) {
      MessageUI.openWarning(DefaultMessagesImpl.getString(""String_Node_Str""));
      return;
    }
  }
  IRepositoryNode patternFolderNode=RepositoryNodeHelper.getLibrariesFolderNode(EResourceConstant.PATTERN_REGEX);
  CheckedTreeSelectionDialog dialog=PatternUtilities.createPatternCheckedTreeSelectionDialog(patternFolderNode);
  if (null != filters) {
    for (    ViewerFilter filter : filters) {
      dialog.addFilter(filter);
    }
  }
  if (dialog.open() == Window.OK) {
    for (    Object obj : dialog.getResult()) {
      if (obj instanceof PatternRepNode) {
        PatternRepNode patternNode=(PatternRepNode)obj;
        TypedReturnCode<IndicatorUnit> trc=PatternUtilities.createIndicatorUnit(patternNode.getPattern(),meIndicator,analysis);
        if (trc.isOk()) {
          columnDropTree.createOneUnit(treeItem,trc.getObject());
          columnDropTree.setDirty(true);
        }
 else         if (trc.getMessage() != null && !trc.getMessage().trim().equals(""String_Node_Str"")) {
          MessageUI.openError(trc.getMessage());
        }
      }
    }
  }
}","@Override public void mouseDown(MouseEvent e){
  DataManager dm=analysis.getContext().getConnection();
  if (dm == null) {
    masterPage.doSave(null);
  }
  IRepositoryNode patternFolderNode=RepositoryNodeHelper.getLibrariesFolderNode(EResourceConstant.PATTERN_REGEX);
  CheckedTreeSelectionDialog dialog=PatternUtilities.createPatternCheckedTreeSelectionDialog(patternFolderNode);
  if (null != filters) {
    for (    ViewerFilter filter : filters) {
      dialog.addFilter(filter);
    }
  }
  if (dialog.open() == Window.OK) {
    for (    Object obj : dialog.getResult()) {
      if (obj instanceof PatternRepNode) {
        PatternRepNode patternNode=(PatternRepNode)obj;
        TypedReturnCode<IndicatorUnit> trc=PatternUtilities.createIndicatorUnit(patternNode.getPattern(),meIndicator,analysis);
        if (trc.isOk()) {
          columnDropTree.createOneUnit(treeItem,trc.getObject());
          columnDropTree.setDirty(true);
        }
 else         if (trc.getMessage() != null && !trc.getMessage().trim().equals(""String_Node_Str"")) {
          MessageUI.openError(trc.getMessage());
        }
      }
    }
  }
}",0.9067524115755627
138236,"/** 
 * DOC xqliu Comment method ""getDataminingType"".
 * @param modelElement
 * @return
 */
public static DataminingType getDataminingType(ModelElement modelElement){
  if (modelElement != null) {
    if (modelElement instanceof TdColumn) {
      return getDataminingType((TdColumn)modelElement);
    }
 else     if (modelElement instanceof TdXmlElementType) {
      DataminingType.get(((TdXmlElementType)modelElement).getContentType());
    }
  }
  return getDefaultDataminingType(0);
}","/** 
 * DOC xqliu Comment method ""getDataminingType"".
 * @param modelElement
 * @return
 */
public static DataminingType getDataminingType(ModelElement modelElement){
  if (modelElement != null) {
    if (modelElement instanceof TdColumn) {
      return getDataminingType((TdColumn)modelElement);
    }
 else     if (modelElement instanceof TdXmlElementType) {
      return DataminingType.get(((TdXmlElementType)modelElement).getContentType());
    }
  }
  return getDefaultDataminingType(0);
}",0.9928644240570846
138237,"/** 
 * DOC xqliu Comment method ""getPath"".
 * @param element
 * @param itemPath
 * @return
 */
private IPath getPath(ModelElement element,IPath itemPath){
  IPath path=new Path(PluginConstant.EMPTY_STRING);
  if (element instanceof DatabaseConnection) {
    path=itemPath.makeRelativeTo(ResourceManager.getTDQConnectionFolder().getFullPath());
  }
 else   if (element instanceof MDMConnection) {
    path=itemPath.makeRelativeTo(ResourceManager.getMDMConnectionFolder().getFullPath());
  }
 else   if (element instanceof Analysis) {
    path=itemPath.makeRelativeTo(ResourceManager.getAnalysisFolder().getFullPath());
  }
 else   if (element instanceof Report) {
    path=itemPath.makeRelativeTo(ResourceManager.getReportsFolder().getFullPath());
  }
 else   if (element instanceof IndicatorDefinition) {
    if (element instanceof WhereRule) {
      path=itemPath.makeRelativeTo(ResourceManager.getRulesFolder().getFullPath());
    }
 else {
      path=itemPath.makeRelativeTo(ResourceManager.getIndicatorFolder().getFullPath());
    }
  }
 else   if (element instanceof Pattern) {
    path=itemPath.makeRelativeTo(ResourceManager.getPatternFolder().getFullPath());
  }
  return path;
}","/** 
 * DOC xqliu Comment method ""getPath"".
 * @param element
 * @param itemPath
 * @return
 */
private IPath getPath(ModelElement element,IPath itemPath){
  IPath path=new Path(PluginConstant.EMPTY_STRING);
  if (element instanceof DatabaseConnection) {
    path=itemPath.makeRelativeTo(ResourceManager.getConnectionFolder().getFullPath());
  }
 else   if (element instanceof MDMConnection) {
    path=itemPath.makeRelativeTo(ResourceManager.getMDMConnectionFolder().getFullPath());
  }
 else   if (element instanceof Analysis) {
    path=itemPath.makeRelativeTo(ResourceManager.getAnalysisFolder().getFullPath());
  }
 else   if (element instanceof Report) {
    path=itemPath.makeRelativeTo(ResourceManager.getReportsFolder().getFullPath());
  }
 else   if (element instanceof IndicatorDefinition) {
    if (element instanceof WhereRule) {
      path=itemPath.makeRelativeTo(ResourceManager.getRulesSQLFolder().getFullPath());
    }
 else {
      path=itemPath.makeRelativeTo(ResourceManager.getIndicatorFolder().getFullPath());
    }
  }
 else   if (element instanceof Pattern) {
    path=itemPath.makeRelativeTo(ResourceManager.getPatternFolder().getFullPath());
  }
  return path;
}",0.4335016835016835
138238,"/** 
 * DOC xqliu Comment method ""getDataminingType"".
 * @param modelElement
 * @return
 */
public static DataminingType getDataminingType(ModelElement modelElement){
  if (modelElement != null) {
    if (modelElement instanceof TdColumn) {
      return getDataminingType((TdColumn)modelElement);
    }
 else     if (modelElement instanceof TdXmlElementType) {
      return DataminingType.get(((TdXmlElementType)modelElement).getContentType());
    }
  }
  return getDefaultDataminingType(0);
}","/** 
 * DOC xqliu Comment method ""getDataminingType"".
 * @param modelElement
 * @return
 */
public static DataminingType getDataminingType(ModelElement modelElement){
  if (modelElement != null) {
    if (modelElement instanceof TdColumn) {
      return getDataminingType((TdColumn)modelElement);
    }
 else     if (modelElement instanceof TdXmlElementType) {
      return DataminingType.get(((TdXmlElementType)modelElement).getContentType());
    }
 else     if (modelElement instanceof MetadataColumn) {
      int javaType=TalendTypeConvert.convertToJDBCType(((MetadataColumn)modelElement).getTalendType());
      return MetadataHelper.getDefaultDataminingType(javaType);
    }
  }
  return getDefaultDataminingType(0);
}",0.8111658456486043
138239,"/** 
 * <!-- begin-user-doc --> <!-- end-user-doc -->
 * @generated NOT
 */
public EList<String> getColumnHeaders(){
  EList<String> headers=new BasicEList<String>();
  for (  ModelElement column : this.getNominalColumns()) {
    headers.add(getColumnName(column));
  }
  for (  ModelElement column : this.getNumericColumns()) {
    for (    String f : this.getNumericFunctions()) {
      headers.add(MessageFormat.format(f,getColumnName(column)));
    }
  }
  for (  ModelElement column : this.getDateColumns()) {
    for (    String f : this.getDateFunctions()) {
      headers.add(MessageFormat.format(f,getColumnName(column)));
    }
  }
  if (analyzedColumns != null) {
    for (    ModelElement modEle : analyzedColumns) {
      TdXmlElementType tdXmlElemnt=SwitchHelpers.XMLELEMENTTYPE_SWITCH.doSwitch(modEle);
      if (tdXmlElemnt != null) {
        headers.add(tdXmlElemnt.getName());
      }
    }
  }
  headers.add(this.getCountAll());
  return headers;
}","/** 
 * <!-- begin-user-doc --> <!-- end-user-doc -->
 * @generated NOT
 */
public EList<String> getColumnHeaders(){
  EList<String> headers=new BasicEList<String>();
  for (  ModelElement column : this.getNominalColumns()) {
    headers.add(column.getName());
  }
  for (  ModelElement column : this.getNumericColumns()) {
    for (    String f : this.getNumericFunctions()) {
      headers.add(MessageFormat.format(f,column.getName()));
    }
  }
  for (  ModelElement column : this.getDateColumns()) {
    for (    String f : this.getDateFunctions()) {
      headers.add(MessageFormat.format(f,column.getName()));
    }
  }
  if (analyzedColumns != null) {
    for (    ModelElement modEle : analyzedColumns) {
      TdXmlElementType tdXmlElemnt=SwitchHelpers.XMLELEMENTTYPE_SWITCH.doSwitch(modEle);
      if (tdXmlElemnt != null) {
        headers.add(tdXmlElemnt.getName());
      }
    }
  }
  headers.add(this.getCountAll());
  return headers;
}",0.6638874413757165
138240,"public Map<String,String> getQueryMap(){
  boolean isSqlEngine=ExecutionLanguage.SQL.equals(this.analysis.getParameters().getExecutionLanguage());
  Map<String,String> map=new HashMap<String,String>();
switch (this.indicatorEnum) {
case MinLengthIndicatorEnum:
case MaxLengthIndicatorEnum:
case AverageLengthIndicatorEnum:
case MinLengthWithBlankIndicatorEnum:
case MinLengthWithBlankNullIndicatorEnum:
case MinLengthWithNullIndicatorEnum:
case MaxLengthWithBlankIndicatorEnum:
case MaxLengthWithBlankNullIndicatorEnum:
case MaxLengthWithNullIndicatorEnum:
case AverageLengthWithBlankIndicatorEnum:
case AverageLengthWithNullBlankIndicatorEnum:
case AverageLengthWithNullIndicatorEnum:
    map.put(MENU_VIEW_ROWS,isSqlEngine ? getComment(MENU_VIEW_ROWS) + getTextRowsStatement() : null);
  break;
default :
}
return map;
}","public Map<String,String> getQueryMap(){
  boolean isSqlEngine=ExecutionLanguage.SQL.equals(this.analysis.getParameters().getExecutionLanguage());
  Map<String,String> map=new HashMap<String,String>();
switch (this.indicatorEnum) {
case AverageLengthIndicatorEnum:
    map.put(MENU_VIEW_ROWS,isSqlEngine ? getComment(MENU_VIEW_ROWS) + getAverageLengthRowsStatement() : null);
  break;
case MinLengthIndicatorEnum:
case MaxLengthIndicatorEnum:
case MinLengthWithBlankIndicatorEnum:
case MinLengthWithBlankNullIndicatorEnum:
case MinLengthWithNullIndicatorEnum:
case MaxLengthWithBlankIndicatorEnum:
case MaxLengthWithBlankNullIndicatorEnum:
case MaxLengthWithNullIndicatorEnum:
case AverageLengthWithBlankIndicatorEnum:
case AverageLengthWithNullBlankIndicatorEnum:
case AverageLengthWithNullIndicatorEnum:
map.put(MENU_VIEW_ROWS,isSqlEngine ? getComment(MENU_VIEW_ROWS) + getTextRowsStatement() : null);
break;
default :
}
return map;
}",0.4516496018202502
138241,"/** 
 * DOC bZhou Comment method ""computePath"".
 * @param property
 * @param file
 * @return
 */
public static String computePath(Property property,File file){
  IPath filePath=new Path(file.getAbsolutePath()).setDevice(null);
  int flag=0;
  EResourceConstant typedConstant=EResourceConstant.getTypedConstant(property.getItem());
  if (typedConstant != null) {
    String typedName=typedConstant.getName();
    for (int i=0; i < filePath.segmentCount(); i++) {
      String seg=filePath.segment(i);
      if (seg.equals(typedName)) {
        flag=i + 1;
        break;
      }
    }
  }
 else {
    List<EResourceConstant> typedConstantList=EResourceConstant.getTypedConstantList();
    typedConstantList.add(EResourceConstant.OLD_DB_CONNECTIONS);
    typedConstantList.add(EResourceConstant.MDM_CONNECTIONS);
    for (int i=0; i < filePath.segmentCount() && flag == 0; i++) {
      String seg=filePath.segment(i);
      for (      EResourceConstant constant : typedConstantList) {
        if (seg.equals(constant.getName())) {
          flag=i + 1;
          break;
        }
      }
    }
  }
  IPath statPath=filePath.removeFirstSegments(flag).removeLastSegments(1);
  return statPath.toString();
}","/** 
 * DOC bZhou Comment method ""computePath"".
 * @param property
 * @param file
 * @return
 */
public static String computePath(Property property,File file){
  IPath filePath=new Path(file.getAbsolutePath()).setDevice(null);
  boolean isConnFromOld=file.getAbsolutePath().contains(EResourceConstant.OLD_METADATA.getName());
  int flag=0;
  EResourceConstant typedConstant=EResourceConstant.getTypedConstant(property.getItem());
  if (typedConstant != null && !isConnFromOld) {
    String typedName=typedConstant.getName();
    for (int i=0; i < filePath.segmentCount(); i++) {
      String seg=filePath.segment(i);
      if (seg.equals(typedName)) {
        flag=i + 1;
        break;
      }
    }
  }
 else {
    List<EResourceConstant> typedConstantList=EResourceConstant.getTypedConstantList();
    typedConstantList.add(EResourceConstant.OLD_DB_CONNECTIONS);
    typedConstantList.add(EResourceConstant.OLD_MDM_CONNECTIONS);
    for (int i=0; i < filePath.segmentCount() && flag == 0; i++) {
      String seg=filePath.segment(i);
      for (      EResourceConstant constant : typedConstantList) {
        if (seg.equals(constant.getName())) {
          flag=i + 1;
          break;
        }
      }
    }
  }
  IPath statPath=filePath.removeFirstSegments(flag).removeLastSegments(1);
  return statPath.toString();
}",0.9291089108910892
138242,"@Override public void addDependencies(ModelElement element){
  Analysis analysis=(Analysis)element;
  List<IndicatorDefinition> udis=AnalysisHelper.getUserDefinedIndicators(analysis);
  try {
    for (    IndicatorDefinition udi : udis) {
      if (udi == null) {
        continue;
      }
      InternalEObject iudi=(InternalEObject)udi;
      if (!iudi.eIsProxy()) {
        TypedReturnCode<Dependency> dependencyReturn=DependenciesHandler.getInstance().setDependencyOn(analysis,udi);
        if (dependencyReturn.isOk()) {
          Property property=PropertyHelper.getProperty(udi);
          if (property != null) {
            TDQItem udiItem=(TDQItem)property.getItem();
            if (udiItem instanceof TDQIndicatorDefinitionItem) {
              ((TDQIndicatorDefinitionItem)udiItem).setIndicatorDefinition(udi);
            }
 else             if (udiItem instanceof TDQBusinessRuleItem) {
              ((TDQBusinessRuleItem)udiItem).setDqrule((DQRule)udi);
            }
          }
          ProxyRepositoryFactory.getInstance().getRepositoryFactoryFromProvider().getResourceManager().saveResource(udi.eResource());
        }
      }
    }
    List<Pattern> patterns=AnalysisHelper.getPatterns(analysis);
    for (    Pattern pattern : patterns) {
      InternalEObject iptn=(InternalEObject)pattern;
      if (!iptn.eIsProxy()) {
        TypedReturnCode<Dependency> dependencyReturn=DependenciesHandler.getInstance().setDependencyOn(analysis,pattern);
        if (dependencyReturn.isOk()) {
          Property property=PropertyHelper.getProperty(pattern);
          if (property != null) {
            TDQPatternItem patternItem=(TDQPatternItem)property.getItem();
            patternItem.setPattern(pattern);
          }
          ProxyRepositoryFactory.getInstance().getRepositoryFactoryFromProvider().getResourceManager().saveResource(pattern.eResource());
        }
      }
    }
  }
 catch (  PersistenceException e) {
    log.error(e,e);
  }
}","@Override public void addDependencies(ModelElement element){
  Analysis analysis=(Analysis)element;
  List<IndicatorDefinition> udis=AnalysisHelper.getUserDefinedIndicators(analysis);
  try {
    for (    IndicatorDefinition udi : udis) {
      if (udi == null) {
        continue;
      }
      InternalEObject iudi=(InternalEObject)udi;
      if (!iudi.eIsProxy()) {
        TypedReturnCode<Dependency> dependencyReturn=DependenciesHandler.getInstance().setDependencyOn(analysis,udi);
        if (dependencyReturn.isOk()) {
          Property property=PropertyHelper.getProperty(udi);
          if (property != null) {
            TDQItem udiItem=(TDQItem)property.getItem();
            if (udiItem instanceof TDQIndicatorDefinitionItem) {
              ((TDQIndicatorDefinitionItem)udiItem).setIndicatorDefinition(udi);
            }
 else             if (udiItem instanceof TDQBusinessRuleItem) {
              ((TDQBusinessRuleItem)udiItem).setDqrule((DQRule)udi);
            }
          }
          ProxyRepositoryFactory.getInstance().getRepositoryFactoryFromProvider().getResourceManager().saveResource(udi.eResource());
        }
      }
    }
    List<Pattern> patterns=AnalysisHelper.getPatterns(analysis);
    for (    Pattern pattern : patterns) {
      InternalEObject iptn=(InternalEObject)pattern;
      if (!iptn.eIsProxy()) {
        TypedReturnCode<Dependency> dependencyReturn=DependenciesHandler.getInstance().setDependencyOn(analysis,pattern);
        if (dependencyReturn.isOk()) {
          Property property=PropertyHelper.getProperty(pattern);
          if (property != null && property.getItem() instanceof TDQPatternItem) {
            TDQPatternItem patternItem=(TDQPatternItem)property.getItem();
            patternItem.setPattern(pattern);
          }
          ProxyRepositoryFactory.getInstance().getRepositoryFactoryFromProvider().getResourceManager().saveResource(pattern.eResource());
        }
      }
    }
  }
 catch (  PersistenceException e) {
    log.error(e,e);
  }
}",0.9733534439416792
138243,"public List<IRepositoryNode> getHiddenRepositoryCategory(IRepositoryNode parent){
  List<IRepositoryNode> nodes=new ArrayList<IRepositoryNode>();
  return nodes;
}","public List<IRepositoryNode> getHiddenRepositoryCategory(IRepositoryNode parent,String type){
  List<IRepositoryNode> nodes=new ArrayList<IRepositoryNode>();
  return nodes;
}",0.9644970414201184
138244,"@SuppressWarnings(""String_Node_Str"") @Override public void fillContextMenu(IMenuManager menu){
  if (!isShowMenu()) {
    return;
  }
  TreeSelection currentSelection=((TreeSelection)this.getContext().getSelection());
  if (isSelectedColumnLevel(currentSelection)) {
    IMenuManager submenu=new MenuManager(DefaultMessagesImpl.getString(""String_Node_Str""),NEW_MENU_NAME);
    menu.insertAfter(ICommonMenuConstants.GROUP_NEW,submenu);
    analyzeColumnAction.setColumnSelection(currentSelection);
    submenu.add(analyzeColumnAction);
  }
  if (isSelectedTdColumn(currentSelection)) {
    analyzeColumnSetAction.setColumnSelection(currentSelection);
    menu.add(analyzeColumnSetAction);
  }
}","@SuppressWarnings(""String_Node_Str"") @Override public void fillContextMenu(IMenuManager menu){
  if (!isShowMenu()) {
    return;
  }
  TreeSelection currentSelection=((TreeSelection)this.getContext().getSelection());
  if (isSelectedColumnLevel(currentSelection) || isSelectedMdmColumn(currentSelection)) {
    IMenuManager submenu=new MenuManager(DefaultMessagesImpl.getString(""String_Node_Str""),NEW_MENU_NAME);
    menu.insertAfter(ICommonMenuConstants.GROUP_NEW,submenu);
    analyzeColumnAction.setColumnSelection(currentSelection);
    submenu.add(analyzeColumnAction);
  }
  if (isSelectedTdColumn(currentSelection)) {
    analyzeColumnSetAction.setColumnSelection(currentSelection);
    menu.add(analyzeColumnSetAction);
  }
}",0.9712683952347584
138245,"private boolean hideParameters(IndicatorUnit indicatorUnit){
  EClass indicatorEclass=indicatorUnit.getIndicator().eClass();
  if (indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getMinLengthWithNullIndicator()) || indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getMinLengthWithBlankIndicator()) || indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getMinLengthWithBlankNullIndicator())|| indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getMaxLengthWithNullIndicator())|| indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getMaxLengthWithBlankIndicator())|| indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getMaxLengthWithBlankNullIndicator())|| indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getAvgLengthWithNullIndicator())|| indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getAvgLengthWithBlankIndicator())|| indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getAvgLengthWithBlankNullIndicator())|| indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getDateFrequencyIndicator())|| indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getWeekFrequencyIndicator())|| indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getMonthFrequencyIndicator())|| indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getQuarterFrequencyIndicator())|| indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getYearFrequencyIndicator())|| indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getDateLowFrequencyIndicator())|| indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getWeekLowFrequencyIndicator())|| indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getMonthLowFrequencyIndicator())|| indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getQuarterLowFrequencyIndicator())|| indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getYearLowFrequencyIndicator())) {
    return true;
  }
  return false;
}","private boolean hideParameters(IndicatorUnit indicatorUnit){
  EClass indicatorEclass=indicatorUnit.getIndicator().eClass();
  if (indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getDateFrequencyIndicator()) || indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getWeekFrequencyIndicator()) || indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getMonthFrequencyIndicator())|| indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getQuarterFrequencyIndicator())|| indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getYearFrequencyIndicator())|| indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getDateLowFrequencyIndicator())|| indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getWeekLowFrequencyIndicator())|| indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getMonthLowFrequencyIndicator())|| indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getQuarterLowFrequencyIndicator())|| indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getYearLowFrequencyIndicator())) {
    return true;
  }
  return false;
}",0.6279234585400425
138246,"public ExecutiveAnalysisJob(ColumnAnalysisSqlExecutor parent,Connection connection,Map<ModelElement,List<Indicator>> elementToIndicator,Indicator indicator){
  super(PluginConstant.EMPTY_STRING);
  this.parent=parent;
  this.connection=connection;
  this.elementToIndicator=elementToIndicator;
  this.indicator=indicator;
}","public ExecutiveAnalysisJob(ColumnAnalysisSqlExecutor parent,Connection connection,Map<ModelElement,List<Indicator>> elementToIndicator,Indicator indicator,ConnectionPool connPool){
  super(PluginConstant.EMPTY_STRING);
  this.connPool=connPool;
  this.parent=parent;
  this.connection=connection;
  this.elementToIndicator=elementToIndicator;
  this.indicator=indicator;
}",0.9281609195402298
138247,"@Override protected IStatus run(IProgressMonitor monitor){
  ColumnAnalysisSqlParallelExecutor columnSqlParallel=ColumnAnalysisSqlParallelExecutor.createInstance(parent,connection,elementToIndicator,indicator);
  columnSqlParallel.run();
  if (columnSqlParallel.ok) {
    return Status.OK_STATUS;
  }
 else {
    this.errorMessage=Messages.getString(""String_Node_Str"");
    return Status.CANCEL_STATUS;
  }
}","@Override protected IStatus run(IProgressMonitor monitor){
  ColumnAnalysisSqlParallelExecutor columnSqlParallel=ColumnAnalysisSqlParallelExecutor.createInstance(parent,connection,elementToIndicator,indicator,connPool);
  columnSqlParallel.run();
  if (columnSqlParallel.ok) {
    return Status.OK_STATUS;
  }
 else {
    this.errorMessage=Messages.getString(""String_Node_Str"");
    return Status.CANCEL_STATUS;
  }
}",0.9890909090909092
138248,"@Override protected boolean runAnalysis(Analysis analysis,String sqlStatement){
  boolean ok=true;
  TypedReturnCode<Connection> trc=this.getConnection(analysis);
  if (!trc.isOk()) {
    return traceError(""String_Node_Str"" + analysis.getName() + ""String_Node_Str""+ trc.getMessage());
  }
  Connection connection=trc.getObject();
  try {
    Map<ModelElement,List<Indicator>> elementToIndicator=new HashMap<ModelElement,List<Indicator>>();
    Collection<Indicator> indicators=IndicatorHelper.getIndicatorLeaves(analysis.getResults());
    if (canParallel()) {
      ok=runAnalysisIndicatorsParallel(analysis,elementToIndicator,indicators);
    }
 else {
      ok=runAnalysisIndicators(connection,elementToIndicator,indicators);
    }
    connection.close();
    setRowCountAndNullCount(elementToIndicator);
  }
 catch (  SQLException e) {
    log.error(e,e);
    this.errorMessage=e.getMessage();
    ok=false;
  }
 finally {
    ConnectionUtils.closeConnection(connection);
  }
  return ok;
}","@Override protected boolean runAnalysis(Analysis analysis,String sqlStatement){
  boolean ok=true;
  TypedReturnCode<Connection> trc=this.getConnection(analysis);
  if (!trc.isOk()) {
    return traceError(""String_Node_Str"" + analysis.getName() + ""String_Node_Str""+ trc.getMessage());
  }
  Connection connection=null;
  ConnectionPool connPool=null;
  try {
    Map<ModelElement,List<Indicator>> elementToIndicator=new HashMap<ModelElement,List<Indicator>>();
    Collection<Indicator> indicators=IndicatorHelper.getIndicatorLeaves(analysis.getResults());
    if (canParallel()) {
      connPool=new ConnectionPool(trc);
      try {
        connPool.createPool();
      }
 catch (      Exception e1) {
        log.error(e1);
      }
      ok=runAnalysisIndicatorsParallel(analysis,elementToIndicator,indicators,connPool);
    }
 else {
      connection=trc.getObject();
      ok=runAnalysisIndicators(connection,elementToIndicator,indicators);
    }
    setRowCountAndNullCount(elementToIndicator);
  }
 catch (  SQLException e) {
    log.error(e,e);
    this.errorMessage=e.getMessage();
    ok=false;
  }
 finally {
    if (null != connection) {
      ConnectionUtils.closeConnection(connection);
    }
    if (null != connPool) {
      try {
        connPool.closeConnectionPool();
      }
 catch (      SQLException e) {
        log.error(""String_Node_Str"" + e);
      }
    }
  }
  return ok;
}",0.5271512113617377
138249,"/** 
 * The original method have been removed,this is the rewriting method. The logic of the new approach by Job to executive indicators,replace the original thread in the thread way nested. Each indicator corresponds to a job, after all the indicators executed and then running the main thread.
 * @param analysis
 * @param elementToIndicator
 * @param indicators
 * @return ok(execution results)
 * @throws SQLException
 */
private boolean runAnalysisIndicatorsParallel(Analysis analysis,Map<ModelElement,List<Indicator>> elementToIndicator,Collection<Indicator> indicators) throws SQLException {
  boolean ok=true;
  List<ExecutiveAnalysisJob> excuteAnalysisJober=new ArrayList<ExecutiveAnalysisJob>();
  TypedReturnCode<Connection> trcConn=null;
  for (  Indicator indicator : indicators) {
    if (null == trcConn || !trcConn.isOk()) {
      trcConn=this.getConnection(analysis);
    }
    if (trcConn.isOk()) {
      ExecutiveAnalysisJob eaj=new ExecutiveAnalysisJob(this,trcConn.getObject(),elementToIndicator,indicator);
      excuteAnalysisJober.add(eaj);
      eaj.schedule();
    }
  }
  for (  ExecutiveAnalysisJob exeAnaJober : excuteAnalysisJober) {
    try {
      exeAnaJober.join();
    }
 catch (    InterruptedException e) {
      log.warn(e,e);
    }
    if (exeAnaJober.errorMessage != null) {
      this.errorMessage=exeAnaJober.errorMessage;
      ok=false;
    }
  }
  if (null != trcConn && null != trcConn.getObject() && !trcConn.getObject().isClosed()) {
    trcConn.getObject().close();
  }
  return ok;
}","/** 
 * The original method have been removed,this is the rewriting method. The logic of the new approach by Job to executive indicators,replace the original thread in the thread way nested. Each indicator corresponds to a job, after all the indicators executed and then running the main thread.
 * @param analysis
 * @param elementToIndicator
 * @param indicators
 * @return ok(execution results)
 * @throws SQLException
 */
private boolean runAnalysisIndicatorsParallel(Analysis analysis,Map<ModelElement,List<Indicator>> elementToIndicator,Collection<Indicator> indicators,ConnectionPool connPool) throws SQLException {
  List<ExecutiveAnalysisJob> excuteAnalysisJober=new ArrayList<ExecutiveAnalysisJob>();
  try {
    for (    Indicator indicator : indicators) {
      if (connPool.isOK()) {
        Connection conn=connPool.getConnection();
        ExecutiveAnalysisJob eaj=new ExecutiveAnalysisJob(ColumnAnalysisSqlExecutor.this,conn,elementToIndicator,indicator,connPool);
        excuteAnalysisJober.add(eaj);
        eaj.schedule();
      }
    }
    for (    ExecutiveAnalysisJob exeAnaJober : excuteAnalysisJober) {
      try {
        exeAnaJober.join();
      }
 catch (      InterruptedException e) {
        log.error(e);
      }
      if (exeAnaJober.errorMessage != null) {
        ColumnAnalysisSqlExecutor.this.errorMessage=exeAnaJober.errorMessage;
        ColumnAnalysisSqlExecutor.this.parallelExeStatus=false;
      }
    }
  }
 catch (  Throwable thr) {
    log.error(thr);
  }
  return parallelExeStatus;
}",0.600326264274062
138250,"public static ColumnAnalysisSqlParallelExecutor createInstance(ColumnAnalysisSqlExecutor parent,Connection connection,Map<ModelElement,List<Indicator>> elementToIndicator,Indicator indicator){
  ColumnAnalysisSqlParallelExecutor inst=createInstance(parent);
  if (inst != null) {
    inst.connection=connection;
    inst.elementToIndicator=elementToIndicator;
    inst.indicator=indicator;
  }
  return inst;
}","public static ColumnAnalysisSqlParallelExecutor createInstance(ColumnAnalysisSqlExecutor parent,Connection connection,Map<ModelElement,List<Indicator>> elementToIndicator,Indicator indicator,ConnectionPool connPool){
  ColumnAnalysisSqlParallelExecutor inst=createInstance(parent);
  if (inst != null) {
    inst.connection=connection;
    inst.elementToIndicator=elementToIndicator;
    inst.indicator=indicator;
    inst.connPool=connPool;
  }
  return inst;
}",0.9403669724770642
138251,"public void run(){
  try {
    if (indicator instanceof CompositeIndicator) {
      return;
    }
synchronized (schemata) {
      String catalogName=getCatalogOrSchemaName(indicator.getAnalyzedElement());
      if (catalogName != null) {
        changeCatalog(catalogName,connection);
      }
    }
    Expression query=dbms().getInstantiatedExpression(indicator);
    if (query == null || !executeQuery(indicator,connection,query.getBody())) {
      ok=traceError(""String_Node_Str"" + indicator.getName() + ""String_Node_Str""+ ((query == null) ? ""String_Node_Str"" : ""String_Node_Str"" + query.getBody()));
    }
 else {
      indicator.setComputed(true);
    }
synchronized (elementToIndicator) {
      MultiMapHelper.addUniqueObjectToListMap(indicator.getAnalyzedElement(),indicator,elementToIndicator);
    }
  }
 catch (  SQLException e) {
    this.setException(e);
  }
}","public void run(){
  try {
    if (indicator instanceof CompositeIndicator) {
      return;
    }
synchronized (schemata) {
      String catalogName=getCatalogOrSchemaName(indicator.getAnalyzedElement());
      if (catalogName != null) {
        changeCatalog(catalogName,connection);
      }
    }
    Expression query=dbms().getInstantiatedExpression(indicator);
    if (query == null || !executeQuery(indicator,connection,query.getBody())) {
      ok=traceError(""String_Node_Str"" + indicator.getName() + ""String_Node_Str""+ ((query == null) ? ""String_Node_Str"" : ""String_Node_Str"" + query.getBody()));
    }
 else {
      indicator.setComputed(true);
    }
synchronized (elementToIndicator) {
      MultiMapHelper.addUniqueObjectToListMap(indicator.getAnalyzedElement(),indicator,elementToIndicator);
    }
  }
 catch (  SQLException e) {
    this.setException(e);
  }
 finally {
    connPool.returnConnection(connection);
  }
}",0.9678135405105438
138252,"@Override public void saveAnalysis() throws DataprofilerCoreException {
  analysis.setName(analysis.getName().replace(""String_Node_Str"",""String_Node_Str""));
  for (  Domain domain : this.analysis.getParameters().getDataFilter()) {
    domain.setName(this.analysis.getName());
  }
  IRepositoryViewObject reposObject=null;
  analysisHandler.clearAnalysis();
  TableIndicator[] tableIndicators=treeViewer.getTableIndicator();
  Connection tdProvider=null;
  Analysis analysis=analysisHandler.getAnalysis();
  analysis.getParameters().setExecutionLanguage(ExecutionLanguage.get(execLang));
  if (tableIndicators != null && tableIndicators.length != 0) {
    tdProvider=ConnectionHelper.getDataProvider(tableIndicators[0].getColumnSet());
    if (tdProvider.eIsProxy()) {
      tdProvider=(Connection)EObjectHelper.resolveObject(tdProvider);
    }
    analysis.getContext().setConnection(tdProvider);
    for (    TableIndicator tableIndicator : tableIndicators) {
      analysisHandler.addIndicator(tableIndicator.getColumnSet(),tableIndicator.getIndicators());
    }
  }
 else {
    tdProvider=(Connection)analysis.getContext().getConnection();
    if (tdProvider != null && tdProvider.getSupplierDependency().size() > 0) {
      tdProvider.getSupplierDependency().get(0).getClient().remove(analysis);
      analysis.getContext().setConnection(null);
      analysis.getClientDependency().clear();
    }
  }
  analysisHandler.setStringDataFilter(dataFilterComp.getDataFilterString());
  String urlString=analysis.eResource() != null ? analysis.eResource().getURI().toFileString() : PluginConstant.EMPTY_STRING;
  this.updateAnalysisClientDependency();
  ReturnCode saved=new ReturnCode(false);
  IEditorInput editorInput=this.getEditorInput();
  if (editorInput instanceof AnalysisItemEditorInput) {
    AnalysisItemEditorInput analysisInput=(AnalysisItemEditorInput)editorInput;
    TDQAnalysisItem tdqAnalysisItem=analysisInput.getTDQAnalysisItem();
    tdqAnalysisItem.getProperty().setLabel(analysisHandler.getName());
    this.nameText.setText(analysisHandler.getName());
    saved=ElementWriterFactory.getInstance().createAnalysisWrite().save(tdqAnalysisItem);
  }
  if (saved.isOk()) {
    RepositoryNode node=RepositoryNodeHelper.recursiveFind(tdProvider);
    if (node != null) {
      ElementWriterFactory.getInstance().createDataProviderWriter().save(node.getObject().getProperty().getItem());
    }
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + urlString + ""String_Node_Str"");
    }
  }
 else {
    throw new DataprofilerCoreException(DefaultMessagesImpl.getString(""String_Node_Str"",analysis.getName(),urlString,saved.getMessage()));
  }
  treeViewer.setDirty(false);
  dataFilterComp.setDirty(false);
}","@Override public void saveAnalysis() throws DataprofilerCoreException {
  List<DQRule> oldDqRules=getDqRules(analysis);
  analysis.setName(analysis.getName().replace(""String_Node_Str"",""String_Node_Str""));
  for (  Domain domain : this.analysis.getParameters().getDataFilter()) {
    domain.setName(this.analysis.getName());
  }
  IRepositoryViewObject reposObject=null;
  analysisHandler.clearAnalysis();
  TableIndicator[] tableIndicators=treeViewer.getTableIndicator();
  Connection tdProvider=null;
  Analysis analysis=analysisHandler.getAnalysis();
  analysis.getParameters().setExecutionLanguage(ExecutionLanguage.get(execLang));
  if (tableIndicators != null && tableIndicators.length != 0) {
    tdProvider=ConnectionHelper.getDataProvider(tableIndicators[0].getColumnSet());
    if (tdProvider.eIsProxy()) {
      tdProvider=(Connection)EObjectHelper.resolveObject(tdProvider);
    }
    analysis.getContext().setConnection(tdProvider);
    for (    TableIndicator tableIndicator : tableIndicators) {
      analysisHandler.addIndicator(tableIndicator.getColumnSet(),tableIndicator.getIndicators());
    }
  }
 else {
    tdProvider=(Connection)analysis.getContext().getConnection();
    if (tdProvider != null && tdProvider.getSupplierDependency().size() > 0) {
      tdProvider.getSupplierDependency().get(0).getClient().remove(analysis);
      analysis.getContext().setConnection(null);
      analysis.getClientDependency().clear();
    }
  }
  analysisHandler.setStringDataFilter(dataFilterComp.getDataFilterString());
  String urlString=analysis.eResource() != null ? analysis.eResource().getURI().toFileString() : PluginConstant.EMPTY_STRING;
  this.updateAnalysisClientDependency();
  ReturnCode saved=new ReturnCode(false);
  IEditorInput editorInput=this.getEditorInput();
  if (editorInput instanceof AnalysisItemEditorInput) {
    AnalysisItemEditorInput analysisInput=(AnalysisItemEditorInput)editorInput;
    TDQAnalysisItem tdqAnalysisItem=analysisInput.getTDQAnalysisItem();
    tdqAnalysisItem.getProperty().setLabel(analysisHandler.getName());
    this.nameText.setText(analysisHandler.getName());
    saved=ElementWriterFactory.getInstance().createAnalysisWrite().save(tdqAnalysisItem);
  }
  if (saved.isOk()) {
    RepositoryNode node=RepositoryNodeHelper.recursiveFind(tdProvider);
    if (node != null) {
      ElementWriterFactory.getInstance().createDataProviderWriter().save(node.getObject().getProperty().getItem());
    }
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + urlString + ""String_Node_Str"");
    }
    this.updateDQRuleDependency(oldDqRules);
  }
 else {
    throw new DataprofilerCoreException(DefaultMessagesImpl.getString(""String_Node_Str"",analysis.getName(),urlString,saved.getMessage()));
  }
  treeViewer.setDirty(false);
  dataFilterComp.setDirty(false);
}",0.983276389138644
138253,"@Override protected boolean doExecute() throws Exception {
  String categorie=""String_Node_Str"";
  String accessQuery=""String_Node_Str"";
  TalendDefinitionFileUpdate talendDefinitionFileUpdate=new TalendDefinitionFileUpdate();
  if (-1 == talendDefinitionFileUpdate.indexOf(accessQuery)) {
    talendDefinitionFileUpdate.add(categorie,categorie + System.getProperty(""String_Node_Str"") + accessQuery);
    return talendDefinitionFileUpdate.replace(this.getClass().getName());
  }
  return false;
}","@Override protected boolean doExecute() throws Exception {
  boolean rc=true;
  String categorie=""String_Node_Str"";
  String accessQuery=""String_Node_Str"";
  TalendDefinitionFileUpdate talendDefinitionFileUpdate=new TalendDefinitionFileUpdate();
  if (-1 == talendDefinitionFileUpdate.indexOf(accessQuery)) {
    talendDefinitionFileUpdate.add(categorie,categorie + System.getProperty(""String_Node_Str"") + accessQuery);
    rc=talendDefinitionFileUpdate.replace(this.getClass().getName());
  }
  return rc;
}",0.8227091633466136
138254,"public Resource create(IProject project,Item item,int classID,IPath path){
  String fileExtension=FileConstants.ITEM_EXTENSION;
  Resource itemResource=null;
  try {
switch (classID) {
case org.talend.dataquality.properties.PropertiesPackage.TDQ_ANALYSIS_ITEM:
      fileExtension=FileConstants.ANA_EXTENSION;
    itemResource=xmiResourceManager.createItemResourceWithExtension(project,item,path,ERepositoryObjectType.TDQ_ANALYSIS_ELEMENT,false,fileExtension);
  AnalysisWriter createAnalysisWrite=org.talend.dq.writer.impl.ElementWriterFactory.getInstance().createAnalysisWrite();
Analysis analysis=((TDQAnalysisItem)item).getAnalysis();
createAnalysisWrite.addResourceContent(itemResource,analysis);
createAnalysisWrite.addDependencies(analysis);
break;
case org.talend.dataquality.properties.PropertiesPackage.TDQ_REPORT_ITEM:
fileExtension=FileConstants.REP_EXTENSION;
itemResource=xmiResourceManager.createItemResourceWithExtension(project,item,path,ERepositoryObjectType.TDQ_REPORT_ELEMENT,false,fileExtension);
ReportWriter createReportWriter=org.talend.dq.writer.impl.ElementWriterFactory.getInstance().createReportWriter();
Report report=((TDQReportItem)item).getReport();
createReportWriter.addResourceContent(itemResource,report);
createReportWriter.addDependencies(report);
break;
case org.talend.dataquality.properties.PropertiesPackage.TDQ_INDICATOR_DEFINITION_ITEM:
fileExtension=FileConstants.DEF_EXTENSION;
itemResource=xmiResourceManager.createItemResourceWithExtension(project,item,path,ERepositoryObjectType.TDQ_INDICATOR_ELEMENT,false,fileExtension);
IndicatorDefinition indicatorDefinition=((TDQIndicatorDefinitionItem)item).getIndicatorDefinition();
IndicatorDefinitionWriter createIndicatorDefinitionWriter=org.talend.dq.writer.impl.ElementWriterFactory.getInstance().createIndicatorDefinitionWriter();
createIndicatorDefinitionWriter.addResourceContent(itemResource,indicatorDefinition);
break;
case org.talend.dataquality.properties.PropertiesPackage.TDQ_PATTERN_ITEM:
fileExtension=FileConstants.PAT_EXTENSION;
itemResource=xmiResourceManager.createItemResourceWithExtension(project,item,path,ERepositoryObjectType.TDQ_PATTERN_ELEMENT,false,fileExtension);
Pattern pattern=((TDQPatternItem)item).getPattern();
PatternWriter createPatternWriter=org.talend.dq.writer.impl.ElementWriterFactory.getInstance().createPatternWriter();
createPatternWriter.addResourceContent(itemResource,pattern);
break;
case org.talend.dataquality.properties.PropertiesPackage.TDQ_BUSINESS_RULE_ITEM:
fileExtension=FileConstants.RULE_EXTENSION;
itemResource=xmiResourceManager.createItemResourceWithExtension(project,item,path,ERepositoryObjectType.TDQ_RULES_SQL,false,fileExtension);
DQRule dqrule=((TDQBusinessRuleItem)item).getDqrule();
DQRuleWriter createdRuleWriter=org.talend.dq.writer.impl.ElementWriterFactory.getInstance().createdRuleWriter();
createdRuleWriter.addResourceContent(itemResource,dqrule);
break;
case org.talend.dataquality.properties.PropertiesPackage.TDQ_JRXML_ITEM:
fileExtension=FileConstants.JRXML_EXTENSION;
itemResource=xmiResourceManager.createItemResourceWithExtension(project,item,path,ERepositoryObjectType.TDQ_JRAXML_ELEMENT,true,fileExtension);
itemResource.getContents().add(((TDQFileItem)item).getContent());
break;
case org.talend.dataquality.properties.PropertiesPackage.TDQ_SOURCE_FILE_ITEM:
fileExtension=FileConstants.SQL_EXTENSION;
itemResource=xmiResourceManager.createItemResourceWithExtension(project,item,path,ERepositoryObjectType.TDQ_SOURCE_FILE_ELEMENT,true,fileExtension);
itemResource.getContents().add(((TDQFileItem)item).getContent());
break;
default :
}
}
 catch (PersistenceException e) {
log.error(e,e);
}
return itemResource;
}","public Resource create(IProject project,Item item,int classID,IPath path){
  String fileExtension=FileConstants.ITEM_EXTENSION;
  Resource itemResource=null;
  try {
switch (classID) {
case org.talend.dataquality.properties.PropertiesPackage.TDQ_ANALYSIS_ITEM:
      fileExtension=FileConstants.ANA_EXTENSION;
    itemResource=xmiResourceManager.createItemResourceWithExtension(project,item,path,ERepositoryObjectType.TDQ_ANALYSIS_ELEMENT,false,fileExtension);
  AnalysisWriter createAnalysisWrite=org.talend.dq.writer.impl.ElementWriterFactory.getInstance().createAnalysisWrite();
Analysis analysis=((TDQAnalysisItem)item).getAnalysis();
createAnalysisWrite.addResourceContent(itemResource,analysis);
createAnalysisWrite.addDependencies(analysis);
break;
case org.talend.dataquality.properties.PropertiesPackage.TDQ_REPORT_ITEM:
fileExtension=FileConstants.REP_EXTENSION;
itemResource=xmiResourceManager.createItemResourceWithExtension(project,item,path,ERepositoryObjectType.TDQ_REPORT_ELEMENT,false,fileExtension);
ReportWriter createReportWriter=org.talend.dq.writer.impl.ElementWriterFactory.getInstance().createReportWriter();
Report report=((TDQReportItem)item).getReport();
createReportWriter.addResourceContent(itemResource,report);
createReportWriter.addDependencies(report);
break;
case org.talend.dataquality.properties.PropertiesPackage.TDQ_INDICATOR_DEFINITION_ITEM:
fileExtension=FileConstants.DEF_EXTENSION;
itemResource=xmiResourceManager.createItemResourceWithExtension(project,item,path,ERepositoryObjectType.TDQ_INDICATOR_ELEMENT,false,fileExtension);
IndicatorDefinition indicatorDefinition=((TDQIndicatorDefinitionItem)item).getIndicatorDefinition();
IndicatorDefinitionWriter createIndicatorDefinitionWriter=org.talend.dq.writer.impl.ElementWriterFactory.getInstance().createIndicatorDefinitionWriter();
createIndicatorDefinitionWriter.addResourceContent(itemResource,indicatorDefinition);
break;
case org.talend.dataquality.properties.PropertiesPackage.TDQ_PATTERN_ITEM:
fileExtension=FileConstants.PAT_EXTENSION;
itemResource=xmiResourceManager.createItemResourceWithExtension(project,item,path,ERepositoryObjectType.TDQ_PATTERN_ELEMENT,false,fileExtension);
Pattern pattern=((TDQPatternItem)item).getPattern();
PatternWriter createPatternWriter=org.talend.dq.writer.impl.ElementWriterFactory.getInstance().createPatternWriter();
createPatternWriter.addResourceContent(itemResource,pattern);
break;
case org.talend.dataquality.properties.PropertiesPackage.TDQ_BUSINESS_RULE_ITEM:
fileExtension=FileConstants.RULE_EXTENSION;
itemResource=xmiResourceManager.createItemResourceWithExtension(project,item,path,ERepositoryObjectType.TDQ_RULES,false,fileExtension);
DQRule dqrule=((TDQBusinessRuleItem)item).getDqrule();
DQRuleWriter createdRuleWriter=org.talend.dq.writer.impl.ElementWriterFactory.getInstance().createdRuleWriter();
createdRuleWriter.addResourceContent(itemResource,dqrule);
break;
case org.talend.dataquality.properties.PropertiesPackage.TDQ_JRXML_ITEM:
fileExtension=FileConstants.JRXML_EXTENSION;
itemResource=xmiResourceManager.createItemResourceWithExtension(project,item,path,ERepositoryObjectType.TDQ_JRAXML_ELEMENT,true,fileExtension);
itemResource.getContents().add(((TDQFileItem)item).getContent());
break;
case org.talend.dataquality.properties.PropertiesPackage.TDQ_SOURCE_FILE_ITEM:
fileExtension=FileConstants.SQL_EXTENSION;
itemResource=xmiResourceManager.createItemResourceWithExtension(project,item,path,ERepositoryObjectType.TDQ_SOURCE_FILE_ELEMENT,true,fileExtension);
itemResource.getContents().add(((TDQFileItem)item).getContent());
break;
default :
}
}
 catch (PersistenceException e) {
log.error(e,e);
}
return itemResource;
}",0.9994577006507592
138255,"/** 
 * Method ""fillDataset"" fills in the data sets.
 * @param nominalColumns the nominal columns
 * @param listRows the rows (=result set)
 * @param firstNumericColumnIdx the index of the first numeric column
 * @return a map [key -> aggregated values] where identifies a level of aggregation
 */
private static Map<String,ValueAggregator> fillDataset(final EList<ModelElement> nominalColumns,final List<Object[]> listRows,final int firstNumericColumnIdx){
  Map<String,ValueAggregator> valueAggregators=new HashMap<String,ValueAggregator>();
  int xPos=firstNumericColumnIdx;
  int yPos=firstNumericColumnIdx + 1;
  int zPos=firstNumericColumnIdx + 2;
  for (int i=nominalColumns.size(); i > 0; i--) {
    String key=createKey(nominalColumns,i);
    for (    Object[] row : listRows) {
      final Object xobj=row[xPos];
      final Double xValue=xobj != null ? Double.valueOf(String.valueOf(xobj)) : null;
      final Object yobj=row[yPos];
      final Double yValue=yobj != null ? Double.valueOf(String.valueOf(yobj)) : null;
      final Object zobj=row[zPos];
      final Double zValue=zobj != null ? Double.valueOf(String.valueOf(zobj)) : null;
      ValueAggregator valueAggregator=valueAggregators.get(key);
      if (valueAggregator == null) {
        valueAggregator=new ValueAggregator();
        valueAggregators.put(key,valueAggregator);
      }
      MultipleKey multipleKey=new MultipleKey(row,i);
      valueAggregator.addValue(multipleKey,new Double[]{xValue,yValue,zValue});
    }
  }
  return valueAggregators;
}","/** 
 * Method ""fillDataset"" fills in the data sets.
 * @param nominalColumns the nominal columns
 * @param listRows the rows (=result set)
 * @param firstNumericColumnIdx the index of the first numeric column
 * @return a map [key -> aggregated values] where identifies a level of aggregation
 */
private static Map<String,ValueAggregator> fillDataset(final EList<ModelElement> nominalColumns,final List<Object[]> listRows,final int firstNumericColumnIdx){
  Map<String,ValueAggregator> valueAggregators=new HashMap<String,ValueAggregator>();
  int xPos=firstNumericColumnIdx;
  int yPos=firstNumericColumnIdx + 1;
  int zPos=firstNumericColumnIdx + 2;
  for (int i=nominalColumns.size(); i > 0; i--) {
    String key=createKey(nominalColumns,i);
    if (null != listRows) {
      for (      Object[] row : listRows) {
        final Object xobj=row[xPos];
        final Double xValue=xobj != null ? Double.valueOf(String.valueOf(xobj)) : null;
        final Object yobj=row[yPos];
        final Double yValue=yobj != null ? Double.valueOf(String.valueOf(yobj)) : null;
        final Object zobj=row[zPos];
        final Double zValue=zobj != null ? Double.valueOf(String.valueOf(zobj)) : null;
        ValueAggregator valueAggregator=valueAggregators.get(key);
        if (valueAggregator == null) {
          valueAggregator=new ValueAggregator();
          valueAggregators.put(key,valueAggregator);
        }
        MultipleKey multipleKey=new MultipleKey(row,i);
        valueAggregator.addValue(multipleKey,new Double[]{xValue,yValue,zValue});
      }
    }
  }
  return valueAggregators;
}",0.975703324808184
138256,"/** 
 */
private static Map<String,DateValueAggregate> fillGanttDataset(final EList<ModelElement> nominalColumns,final List<Object[]> listRows,final int firstDateColumnIdx){
  Map<String,DateValueAggregate> valueAggregators=new TreeMap<String,DateValueAggregate>();
  int minPos=firstDateColumnIdx;
  int maxPos=firstDateColumnIdx + 1;
  for (int i=nominalColumns.size(); i > 0; i--) {
    String key=createKey(nominalColumns,i);
    for (    Object[] row : listRows) {
      final Object minObj=row[minPos];
      final Date minDate=minObj != null ? (Date)minObj : null;
      final Object maxobj=row[maxPos];
      final Date maxDate=maxobj != null ? (Date)maxobj : null;
      DateValueAggregate valueAggregator=valueAggregators.get(key);
      if (valueAggregator == null) {
        valueAggregator=new DateValueAggregate();
        valueAggregators.put(key,valueAggregator);
      }
      MultipleKey multipleKey=new MultipleKey(row,i);
      valueAggregator.addValue(multipleKey,new Date[]{minDate,maxDate});
    }
  }
  return valueAggregators;
}","/** 
 */
private static Map<String,DateValueAggregate> fillGanttDataset(final EList<ModelElement> nominalColumns,final List<Object[]> listRows,final int firstDateColumnIdx){
  Map<String,DateValueAggregate> valueAggregators=new TreeMap<String,DateValueAggregate>();
  int minPos=firstDateColumnIdx;
  int maxPos=firstDateColumnIdx + 1;
  for (int i=nominalColumns.size(); i > 0; i--) {
    String key=createKey(nominalColumns,i);
    if (null != listRows) {
      for (      Object[] row : listRows) {
        final Object minObj=row[minPos];
        final Date minDate=minObj != null ? (Date)minObj : null;
        final Object maxobj=row[maxPos];
        final Date maxDate=maxobj != null ? (Date)maxobj : null;
        DateValueAggregate valueAggregator=valueAggregators.get(key);
        if (valueAggregator == null) {
          valueAggregator=new DateValueAggregate();
          valueAggregators.put(key,valueAggregator);
        }
        MultipleKey multipleKey=new MultipleKey(row,i);
        valueAggregator.addValue(multipleKey,new Date[]{minDate,maxDate});
      }
    }
  }
  return valueAggregators;
}",0.966789667896679
138257,"/** 
 * The original method have been removed,this is the rewriting method. The logic of the new approach by Job to executive indicators,replace the original thread in the thread way nested. Each indicator corresponds to a job, after all the indicators executed and then running the main thread.
 * @param analysis
 * @param elementToIndicator
 * @param indicators
 * @return ok(execution results)
 * @throws SQLException
 */
private boolean runAnalysisIndicatorsParallel(Analysis analysis,Map<ModelElement,List<Indicator>> elementToIndicator,Collection<Indicator> indicators) throws SQLException {
  boolean ok=true;
  List<ExecutiveAnalysisJob> excuteAnalysisJober=new ArrayList<ExecutiveAnalysisJob>();
  for (  Indicator indicator : indicators) {
    TypedReturnCode<Connection> trcConn=this.getConnection(analysis);
    if (trcConn.isOk()) {
      ExecutiveAnalysisJob eaj=new ExecutiveAnalysisJob(this,trcConn.getObject(),elementToIndicator,indicator);
      excuteAnalysisJober.add(eaj);
      eaj.schedule();
    }
  }
  for (  ExecutiveAnalysisJob exeAnaJober : excuteAnalysisJober) {
    try {
      exeAnaJober.join();
    }
 catch (    InterruptedException e) {
      log.warn(e,e);
    }
    if (exeAnaJober.errorMessage != null) {
      this.errorMessage=exeAnaJober.errorMessage;
      ok=false;
    }
  }
  return ok;
}","/** 
 * The original method have been removed,this is the rewriting method. The logic of the new approach by Job to executive indicators,replace the original thread in the thread way nested. Each indicator corresponds to a job, after all the indicators executed and then running the main thread.
 * @param analysis
 * @param elementToIndicator
 * @param indicators
 * @return ok(execution results)
 * @throws SQLException
 */
private boolean runAnalysisIndicatorsParallel(Analysis analysis,Map<ModelElement,List<Indicator>> elementToIndicator,Collection<Indicator> indicators) throws SQLException {
  boolean ok=true;
  List<ExecutiveAnalysisJob> excuteAnalysisJober=new ArrayList<ExecutiveAnalysisJob>();
  TypedReturnCode<Connection> trcConn=null;
  for (  Indicator indicator : indicators) {
    if (null == trcConn || !trcConn.isOk()) {
      trcConn=this.getConnection(analysis);
    }
    if (trcConn.isOk()) {
      ExecutiveAnalysisJob eaj=new ExecutiveAnalysisJob(this,trcConn.getObject(),elementToIndicator,indicator);
      excuteAnalysisJober.add(eaj);
      eaj.schedule();
    }
  }
  for (  ExecutiveAnalysisJob exeAnaJober : excuteAnalysisJober) {
    try {
      exeAnaJober.join();
    }
 catch (    InterruptedException e) {
      log.warn(e,e);
    }
    if (exeAnaJober.errorMessage != null) {
      this.errorMessage=exeAnaJober.errorMessage;
      ok=false;
    }
  }
  if (null != trcConn && null != trcConn.getObject() && !trcConn.getObject().isClosed()) {
    trcConn.getObject().close();
  }
  return ok;
}",0.898186889818689
138258,"public void run(){
  try {
    if (indicator instanceof CompositeIndicator) {
      return;
    }
synchronized (schemata) {
      String catalogName=getCatalogOrSchemaName(indicator.getAnalyzedElement());
      if (catalogName != null) {
        changeCatalog(catalogName,connection);
      }
    }
    Expression query=dbms().getInstantiatedExpression(indicator);
    if (query == null || !executeQuery(indicator,connection,query.getBody())) {
      ok=traceError(""String_Node_Str"" + indicator.getName() + ""String_Node_Str""+ ((query == null) ? ""String_Node_Str"" : ""String_Node_Str"" + query.getBody()));
    }
 else {
      indicator.setComputed(true);
    }
synchronized (elementToIndicator) {
      MultiMapHelper.addUniqueObjectToListMap(indicator.getAnalyzedElement(),indicator,elementToIndicator);
    }
  }
 catch (  SQLException e) {
    this.setException(e);
  }
 finally {
    try {
      if (connection != null && !connection.isClosed()) {
        connection.close();
      }
    }
 catch (    SQLException e) {
      this.setException(e);
    }
  }
}","public void run(){
  try {
    if (indicator instanceof CompositeIndicator) {
      return;
    }
synchronized (schemata) {
      String catalogName=getCatalogOrSchemaName(indicator.getAnalyzedElement());
      if (catalogName != null) {
        changeCatalog(catalogName,connection);
      }
    }
    Expression query=dbms().getInstantiatedExpression(indicator);
    if (query == null || !executeQuery(indicator,connection,query.getBody())) {
      ok=traceError(""String_Node_Str"" + indicator.getName() + ""String_Node_Str""+ ((query == null) ? ""String_Node_Str"" : ""String_Node_Str"" + query.getBody()));
    }
 else {
      indicator.setComputed(true);
    }
synchronized (elementToIndicator) {
      MultiMapHelper.addUniqueObjectToListMap(indicator.getAnalyzedElement(),indicator,elementToIndicator);
    }
  }
 catch (  SQLException e) {
    this.setException(e);
  }
}",0.9022245214692188
138259,"protected String getInstantiatedClause(){
  String colName=columnName;
  String function=null;
  TdColumn column=(TdColumn)indicator.getAnalyzedElement();
  int javaType=column.getSqlDataType().getJavaDataType();
  if (!Java2SqlType.isNumbericInSQL(javaType)) {
    function=getFunction();
  }
 else {
    colName=columnNameConvert();
  }
  Object value=null;
  if (Java2SqlType.isNumbericInSQL(javaType) && dbmsLanguage instanceof DB2DbmsLanguage) {
    value=entity.getKey();
  }
 else {
    value=""String_Node_Str"" + entity.getKey() + ""String_Node_Str"";
  }
  String clause=entity.isLabelNull() ? columnName + dbmsLanguage.isNull() : ((function == null ? colName : function) + dbmsLanguage.equal() + value);
  return clause;
}","protected String getInstantiatedClause(){
  String colName=columnName;
  String function=null;
  TdColumn column=(TdColumn)indicator.getAnalyzedElement();
  int javaType=column.getSqlDataType().getJavaDataType();
  if (!Java2SqlType.isNumbericInSQL(javaType)) {
    function=getFunction();
  }
 else {
    colName=columnNameConvert();
  }
  Object value=null;
  if (Java2SqlType.isNumbericInSQL(javaType) && dbmsLanguage instanceof DB2DbmsLanguage) {
    value=entity.getKey();
  }
 else {
    value=""String_Node_Str"" + entity.getKey() + ""String_Node_Str"";
  }
  String clause=entity.isLabelNull() ? columnName + dbmsLanguage.isNull() : ((function == null ? colName : function) + dbmsLanguage.equal() + value);
  if (dbmsLanguage instanceof InfomixDbmsLanguage) {
    clause=clause.replaceAll(InfomixDbmsLanguage.AS_REPLACE_COLUMN,PluginConstant.EMPTY_STRING);
  }
  return clause;
}",0.8858560794044665
138260,"@Override protected void addFieldsListeners(){
  lowerText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      String min=lowerText.getText();
      String max=higherText.getText();
      if (!min.equals(""String_Node_Str"") && !CheckValueUtils.isNumberWithNegativeValue(min)) {
        updateStatus(IStatus.ERROR,MSG_ONLY_NUMBER);
      }
 else       if (CheckValueUtils.isAoverB(min,max)) {
        updateStatus(IStatus.ERROR,UIMessages.MSG_LOWER_LESS_HIGHER);
      }
 else {
        updateStatus(IStatus.OK,MSG_OK);
      }
    }
  }
);
  higherText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      String max=higherText.getText();
      String min=lowerText.getText();
      if (!max.equals(""String_Node_Str"") && !CheckValueUtils.isNumberWithNegativeValue(max)) {
        updateStatus(IStatus.ERROR,MSG_ONLY_NUMBER);
      }
 else       if (CheckValueUtils.isAoverB(min,max)) {
        updateStatus(IStatus.ERROR,UIMessages.MSG_LOWER_LESS_HIGHER);
      }
 else {
        updateStatus(IStatus.OK,MSG_OK);
      }
    }
  }
);
}","@Override protected void addFieldsListeners(){
  lowerText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      String min=lowerText.getText();
      String max=higherText.getText();
      if (!min.equals(""String_Node_Str"") && !CheckValueUtils.isRealNumberValue(min)) {
        updateStatus(IStatus.ERROR,MSG_ONLY_NUMBER);
      }
 else       if (CheckValueUtils.isAoverB(min,max)) {
        updateStatus(IStatus.ERROR,UIMessages.MSG_LOWER_LESS_HIGHER);
      }
 else {
        updateStatus(IStatus.OK,MSG_OK);
      }
    }
  }
);
  higherText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      String max=higherText.getText();
      String min=lowerText.getText();
      if (!max.equals(""String_Node_Str"") && !CheckValueUtils.isRealNumberValue(max)) {
        updateStatus(IStatus.ERROR,MSG_ONLY_NUMBER);
      }
 else       if (CheckValueUtils.isAoverB(min,max)) {
        updateStatus(IStatus.ERROR,UIMessages.MSG_LOWER_LESS_HIGHER);
      }
 else {
        updateStatus(IStatus.OK,MSG_OK);
      }
    }
  }
);
}",0.985546522131888
138261,"public void modifyText(ModifyEvent e){
  String max=higherText.getText();
  String min=lowerText.getText();
  if (!max.equals(""String_Node_Str"") && !CheckValueUtils.isNumberWithNegativeValue(max)) {
    updateStatus(IStatus.ERROR,MSG_ONLY_NUMBER);
  }
 else   if (CheckValueUtils.isAoverB(min,max)) {
    updateStatus(IStatus.ERROR,UIMessages.MSG_LOWER_LESS_HIGHER);
  }
 else {
    updateStatus(IStatus.OK,MSG_OK);
  }
}","public void modifyText(ModifyEvent e){
  String max=higherText.getText();
  String min=lowerText.getText();
  if (!max.equals(""String_Node_Str"") && !CheckValueUtils.isRealNumberValue(max)) {
    updateStatus(IStatus.ERROR,MSG_ONLY_NUMBER);
  }
 else   if (CheckValueUtils.isAoverB(min,max)) {
    updateStatus(IStatus.ERROR,UIMessages.MSG_LOWER_LESS_HIGHER);
  }
 else {
    updateStatus(IStatus.OK,MSG_OK);
  }
}",0.9808153477218226
138262,"private void init(){
  final Listener labelListener=new Listener(){
    public void handleEvent(    Event event){
      Label label=(Label)event.widget;
      Shell shell=label.getShell();
switch (event.type) {
case SWT.MouseDown:
        Event e=new Event();
      e.item=(TreeItem)label.getData(TREEITEM);
    setSelection(new TreeItem[]{(TreeItem)e.item});
  notifyListeners(SWT.Selection,e);
shell.dispose();
setFocus();
break;
case SWT.MouseExit:
shell.dispose();
break;
default :
}
}
}
;
Listener treeListener=new Listener(){
Shell tip=null;
Label label=null;
public void handleEvent(Event event){
switch (event.type) {
case SWT.Dispose:
case SWT.KeyDown:
case SWT.MouseMove:
if (tip == null) {
break;
}
tip.dispose();
tip=null;
label=null;
break;
case SWT.MouseHover:
TreeItem item=getItem(new Point(event.x,event.y));
if (isValidItem(item)) {
if (tip != null && !tip.isDisposed()) {
tip.dispose();
}
tip=new Shell(parent.getShell(),SWT.ON_TOP | SWT.NO_FOCUS | SWT.TOOL);
tip.setBackground(parent.getShell().getDisplay().getSystemColor(SWT.COLOR_INFO_BACKGROUND));
FillLayout layout=new FillLayout();
layout.marginWidth=2;
tip.setLayout(layout);
label=new Label(tip,SWT.WRAP);
label.setForeground(parent.getShell().getDisplay().getSystemColor(SWT.COLOR_INFO_FOREGROUND));
label.setBackground(parent.getShell().getDisplay().getSystemColor(SWT.COLOR_INFO_BACKGROUND));
label.setData(TREEITEM,item);
String displayedText=getItemTooltipText(item);
label.setText(displayedText);
label.addListener(SWT.MouseExit,labelListener);
label.addListener(SWT.MouseDown,labelListener);
int widthHit=SWT.DEFAULT;
if (displayedText.length() > 100) {
widthHit=500;
}
Point size=tip.computeSize(widthHit,SWT.DEFAULT);
Rectangle rect=item.getBounds(0);
Point pt=toDisplay(rect.x,rect.y);
tip.setBounds(pt.x,pt.y,size.x,size.y);
tip.setVisible(true);
}
default :
}
}
}
;
this.addListener(SWT.Dispose,treeListener);
this.addListener(SWT.KeyDown,treeListener);
this.addListener(SWT.MouseMove,treeListener);
this.addListener(SWT.MouseHover,treeListener);
}","private void init(){
  final Listener labelListener=new Listener(){
    public void handleEvent(    Event event){
      Label label=(Label)event.widget;
      Shell shell=label.getShell();
switch (event.type) {
case SWT.MouseDown:
        Event e=new Event();
      e.item=(TreeItem)label.getData(TREEITEM);
    setSelection(new TreeItem[]{(TreeItem)e.item});
  notifyListeners(SWT.Selection,e);
shell.dispose();
break;
case SWT.MouseExit:
shell.dispose();
break;
default :
}
}
}
;
Listener treeListener=new Listener(){
Shell tip=null;
Label label=null;
public void handleEvent(Event event){
switch (event.type) {
case SWT.Dispose:
case SWT.KeyDown:
case SWT.MouseMove:
if (tip == null) {
break;
}
tip.dispose();
tip=null;
label=null;
break;
case SWT.MouseHover:
TreeItem item=getItem(new Point(event.x,event.y));
if (isValidItem(item)) {
if (tip != null && !tip.isDisposed()) {
tip.dispose();
}
tip=new Shell(parent.getShell(),SWT.ON_TOP | SWT.NO_FOCUS | SWT.TOOL);
tip.setBackground(parent.getShell().getDisplay().getSystemColor(SWT.COLOR_INFO_BACKGROUND));
FillLayout layout=new FillLayout();
layout.marginWidth=2;
tip.setLayout(layout);
label=new Label(tip,SWT.WRAP);
label.setForeground(parent.getShell().getDisplay().getSystemColor(SWT.COLOR_INFO_FOREGROUND));
label.setBackground(parent.getShell().getDisplay().getSystemColor(SWT.COLOR_INFO_BACKGROUND));
label.setData(TREEITEM,item);
String displayedText=getItemTooltipText(item);
label.setText(displayedText);
label.addListener(SWT.MouseExit,labelListener);
label.addListener(SWT.MouseDown,labelListener);
int widthHit=SWT.DEFAULT;
if (displayedText.length() > 100) {
widthHit=500;
}
Point size=tip.computeSize(widthHit,SWT.DEFAULT);
Rectangle rect=item.getBounds(0);
Point pt=toDisplay(rect.x,rect.y);
tip.setBounds(pt.x,pt.y,size.x,size.y);
tip.setVisible(true);
}
default :
}
}
}
;
this.addListener(SWT.Dispose,treeListener);
this.addListener(SWT.KeyDown,treeListener);
this.addListener(SWT.MouseMove,treeListener);
this.addListener(SWT.MouseHover,treeListener);
}",0.9970472440944882
138263,"/** 
 * DOC qzhang Comment method ""createOneUnit"".
 * @param treeItem
 * @param indicatorUnit
 */
public void createOneUnit(final TreeItem treeItem,IndicatorUnit indicatorUnit){
  final TreeItem indicatorItem=new TreeItem(treeItem,SWT.NONE);
  final IndicatorUnit unit=indicatorUnit;
  IndicatorEnum indicatorType=indicatorUnit.getType();
  indicatorItem.setData(MODELELEMENT_INDICATOR_KEY,treeItem.getData(MODELELEMENT_INDICATOR_KEY));
  indicatorItem.setData(INDICATOR_UNIT_KEY,unit);
  indicatorItem.setData(viewKey,this);
  indicatorItem.setImage(0,getIndicatorImage(unit));
  String indicatorName=getIndicatorName(indicatorUnit);
  String label=indicatorName == null ? ""String_Node_Str"" : indicatorName;
  indicatorItem.setText(0,label);
  TreeEditor optionEditor;
  optionEditor=new TreeEditor(tree);
  Label optionLabel=new Label(tree,SWT.NONE);
  optionLabel.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_WHITE));
  optionLabel.setImage(ImageLib.getImage(ImageLib.INDICATOR_OPTION));
  optionLabel.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
  optionLabel.pack();
  optionLabel.setData(indicatorUnit);
  optionLabel.addMouseListener(new MouseAdapter(){
    @Override public void mouseDown(    MouseEvent e){
      openIndicatorOptionDialog(null,indicatorItem);
    }
  }
);
  optionEditor.minimumWidth=optionLabel.getImage().getBounds().width;
  optionEditor.horizontalAlignment=SWT.CENTER;
  optionEditor.setEditor(optionLabel,indicatorItem,1);
  TreeEditor delEditor=new TreeEditor(tree);
  Label delLabel=new Label(tree,SWT.NONE);
  delLabel.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_WHITE));
  delLabel.setImage(ImageLib.getImage(ImageLib.DELETE_ACTION));
  delLabel.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
  delLabel.pack();
  delLabel.addMouseListener(new MouseAdapter(){
    @Override public void mouseDown(    MouseEvent e){
      ModelElementIndicator meIndicator=(ModelElementIndicator)treeItem.getData(MODELELEMENT_INDICATOR_KEY);
      deleteIndicatorItems(meIndicator,unit);
      if (indicatorItem.getParentItem() != null && indicatorItem.getParentItem().getData(INDICATOR_UNIT_KEY) != null) {
        setElements(modelElementIndicators);
      }
 else {
        removeItemBranch(indicatorItem);
      }
    }
  }
);
  delEditor.minimumWidth=delLabel.getImage().getBounds().width;
  delEditor.horizontalAlignment=SWT.CENTER;
  if (AnalysisColumnTreeViewer.VIEWER_KEY.equals(viewKey)) {
    delEditor.setEditor(delLabel,indicatorItem,4);
  }
 else   if (AnalysisColumnSetTreeViewer.VIEWER_KEY.equals(viewKey)) {
    delEditor.setEditor(delLabel,indicatorItem,3);
  }
  indicatorItem.setData(ITEM_EDITOR_KEY,new TreeEditor[]{optionEditor,delEditor});
  if (indicatorType.hasChildren()) {
    indicatorItem.setData(treeItem.getData(MODELELEMENT_INDICATOR_KEY));
    createIndicatorItems(indicatorItem,indicatorUnit.getChildren());
  }
  createIndicatorParameters(indicatorItem,indicatorUnit);
  Display.getCurrent().asyncExec(new Runnable(){
    public void run(){
      tree.getColumn(0).setWidth(tree.getColumn(0).getWidth() + 1);
    }
  }
);
  Display.getCurrent().asyncExec(new Runnable(){
    public void run(){
      tree.getColumn(0).setWidth(tree.getColumn(0).getWidth() - 1);
    }
  }
);
}","/** 
 * DOC qzhang Comment method ""createOneUnit"".
 * @param treeItem
 * @param indicatorUnit
 */
public void createOneUnit(final TreeItem treeItem,IndicatorUnit indicatorUnit){
  final TreeItem indicatorItem=new TreeItem(treeItem,SWT.NONE);
  final IndicatorUnit unit=indicatorUnit;
  IndicatorEnum indicatorType=indicatorUnit.getType();
  indicatorItem.setData(MODELELEMENT_INDICATOR_KEY,treeItem.getData(MODELELEMENT_INDICATOR_KEY));
  indicatorItem.setData(INDICATOR_UNIT_KEY,unit);
  indicatorItem.setData(viewKey,this);
  indicatorItem.setImage(0,getIndicatorImage(unit));
  String indicatorName=getIndicatorName(indicatorUnit);
  String label=indicatorName == null ? ""String_Node_Str"" : indicatorName;
  indicatorItem.setText(0,label);
  TreeEditor optionEditor;
  optionEditor=new TreeEditor(tree);
  Label optionLabel=new Label(tree,SWT.NONE);
  optionLabel.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_WHITE));
  optionLabel.setImage(ImageLib.getImage(ImageLib.INDICATOR_OPTION));
  optionLabel.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
  optionLabel.pack();
  optionLabel.setData(indicatorUnit);
  optionLabel.addMouseListener(new MouseAdapter(){
    @Override public void mouseDown(    MouseEvent e){
      openIndicatorOptionDialog(null,indicatorItem);
    }
  }
);
  optionEditor.minimumWidth=optionLabel.getImage().getBounds().width;
  optionEditor.horizontalAlignment=SWT.CENTER;
  optionEditor.setEditor(optionLabel,indicatorItem,1);
  TreeEditor delEditor=new TreeEditor(tree);
  Label delLabel=new Label(tree,SWT.NONE);
  delLabel.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_WHITE));
  delLabel.setImage(ImageLib.getImage(ImageLib.DELETE_ACTION));
  delLabel.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
  delLabel.pack();
  delLabel.addMouseListener(new MouseAdapter(){
    @Override public void mouseDown(    MouseEvent e){
      ModelElementIndicator meIndicator=(ModelElementIndicator)treeItem.getData(MODELELEMENT_INDICATOR_KEY);
      deleteIndicatorItems(meIndicator,unit);
      if (indicatorItem.getParentItem() != null && indicatorItem.getParentItem().getData(INDICATOR_UNIT_KEY) != null) {
        setElements(modelElementIndicators);
      }
 else {
        removeItemBranch(indicatorItem);
      }
    }
  }
);
  delEditor.minimumWidth=delLabel.getImage().getBounds().width;
  delEditor.horizontalAlignment=SWT.CENTER;
  if (AnalysisColumnTreeViewer.VIEWER_KEY.equals(viewKey)) {
    delEditor.setEditor(delLabel,indicatorItem,4);
  }
 else   if (AnalysisColumnSetTreeViewer.VIEWER_KEY.equals(viewKey)) {
    delEditor.setEditor(delLabel,indicatorItem,3);
  }
  indicatorItem.setData(ITEM_EDITOR_KEY,new TreeEditor[]{optionEditor,delEditor});
  if (indicatorType.hasChildren()) {
    indicatorItem.setData(treeItem.getData(MODELELEMENT_INDICATOR_KEY));
    createIndicatorItems(indicatorItem,indicatorUnit.getChildren());
  }
  createIndicatorParameters(indicatorItem,indicatorUnit);
  Display.getCurrent().asyncExec(new Runnable(){
    public void run(){
      tree.setFocus();
    }
  }
);
}",0.96625
138264,"public void run(){
  tree.getColumn(0).setWidth(tree.getColumn(0).getWidth() - 1);
}","public void run(){
  tree.setFocus();
}",0.5528455284552846
138265,"@Override public void run(){
  SQLExplorerPlugin default1=SQLExplorerPlugin.getDefault();
  Collection<Alias> aliases=default1.getAliasManager().getAliases();
  Connection tdDataProvider=ConnectionHelper.getDataProvider(view);
  String url=JavaSqlFactory.getURL(tdDataProvider);
  for (  Alias alias : aliases) {
    if (alias.getUrl().equals(url)) {
      String qualifiedName=getTableQualifiedName(tdDataProvider);
      String query=""String_Node_Str"" + qualifiedName;
      SQLEditorInput input=new SQLEditorInput(""String_Node_Str"" + SQLExplorerPlugin.getDefault().getEditorSerialNo() + ""String_Node_Str"");
      input.setUser(alias.getDefaultUser());
      try {
        IWorkbenchPage page=SQLExplorerPlugin.getDefault().getWorkbench().getActiveWorkbenchWindow().getActivePage();
        SQLEditor editorPart=(SQLEditor)page.openEditor((IEditorInput)input,SQLEditor.class.getName());
        editorPart.setText(query);
        ExecSQLAction execSQLAction=new ExecSQLAction(editorPart);
        execSQLAction.run();
      }
 catch (      PartInitException e) {
        log.error(e,e);
      }
    }
  }
}","@Override public void run(){
  SQLExplorerPlugin default1=SQLExplorerPlugin.getDefault();
  Collection<Alias> aliases=default1.getAliasManager().getAliases();
  Connection tdDataProvider=ConnectionHelper.getDataProvider(view);
  String url=JavaSqlFactory.getURL(tdDataProvider);
  String qualifiedName=getTableQualifiedName(tdDataProvider);
  String query=""String_Node_Str"" + qualifiedName;
  String connectionName=tdDataProvider.getName();
  User defaultUser=null;
  for (  Alias alias : aliases) {
    if (alias.getUrl().equals(url)) {
      defaultUser=alias.getDefaultUser();
    }
  }
  if (null == defaultUser) {
    return;
  }
  SQLEditorInput input=new SQLEditorInput(""String_Node_Str"" + connectionName + ""String_Node_Str""+ qualifiedName+ ""String_Node_Str"");
  input.setUser(defaultUser);
  try {
    IWorkbenchPage page=SQLExplorerPlugin.getDefault().getWorkbench().getActiveWorkbenchWindow().getActivePage();
    SQLEditor editorPart=(SQLEditor)page.openEditor((IEditorInput)input,SQLEditor.class.getName());
    editorPart.setText(query);
    ExecSQLAction execSQLAction=new ExecSQLAction(editorPart);
    execSQLAction.run();
  }
 catch (  PartInitException e) {
    log.error(e,e);
  }
}",0.6175833694239931
138266,"public void propertyChange(PropertyChangeEvent evt){
  if (PluginConstant.ISDIRTY_PROPERTY.equals(evt.getPropertyName())) {
    currentEditor.firePropertyChange(IEditorPart.PROP_DIRTY);
    currentEditor.setRefreshResultPage(true);
  }
 else   if (PluginConstant.DATAFILTER_PROPERTY.equals(evt.getPropertyName())) {
    this.analysisHandler.setStringDataFilter((String)evt.getNewValue());
  }
}","public void propertyChange(PropertyChangeEvent evt){
  if (PluginConstant.ISDIRTY_PROPERTY.equals(evt.getPropertyName())) {
    currentEditor.firePropertyChange(IEditorPart.PROP_DIRTY);
    currentEditor.setRefreshResultPage(true);
  }
 else   if (PluginConstant.DATAFILTER_PROPERTY.equals(evt.getPropertyName())) {
    this.analysisHandler.setStringDataFilter((String)evt.getNewValue());
  }
 else   if (PluginConstant.EXPAND_TREE.equals(evt.getPropertyName())) {
    ModelElementIndicator indicator=(ModelElementIndicator)((Widget)evt.getNewValue()).getData(AbstractColumnDropTree.MODELELEMENT_INDICATOR_KEY);
    expandChart(indicator);
  }
}",0.7584215591915303
138267,"public void createPreviewCharts(final ScrolledForm form,final Composite composite,final boolean isCreate){
  previewChartList=new ArrayList<ExpandableComposite>();
  final ModelElementIndicator[] modelElementIndicatores=treeViewer.getModelElementIndicator();
  UIPagination uiPagination=new UIPagination(toolkit,composite);
  int pageSize=IndicatorPaginationInfo.getPageSize();
  int totalPages=modelElementIndicatores.length / pageSize;
  List<ModelElementIndicator> modelElementIndicators=null;
  for (int index=0; index < totalPages; index++) {
    modelElementIndicators=new ArrayList<ModelElementIndicator>();
    for (int idx=0; idx < pageSize; idx++) {
      modelElementIndicators.add(modelElementIndicatores[index * pageSize + idx]);
    }
    IndicatorPaginationInfo pginfo=new MasterPaginationInfo(form,previewChartList,modelElementIndicators,uiPagination);
    uiPagination.addPage(pginfo);
  }
  int left=modelElementIndicatores.length % pageSize;
  if (left != 0) {
    modelElementIndicators=new ArrayList<ModelElementIndicator>();
    for (int leftIdx=0; leftIdx < left; leftIdx++) {
      modelElementIndicators.add(modelElementIndicatores[totalPages * pageSize + leftIdx]);
    }
    IndicatorPaginationInfo pginfo=new MasterPaginationInfo(form,previewChartList,modelElementIndicators,uiPagination);
    uiPagination.addPage(pginfo);
    totalPages++;
  }
  uiPagination.init();
  for (  ExpandableComposite comp : previewChartList) {
    registerSection(comp);
  }
  composite.layout();
  composite.pack();
  form.reflow(true);
}","public void createPreviewCharts(final ScrolledForm form,final Composite composite,final boolean isCreate){
  previewChartList=new ArrayList<ExpandableComposite>();
  final ModelElementIndicator[] modelElementIndicatores=treeViewer.getModelElementIndicator();
  uiPagination=new UIPagination(toolkit,composite);
  int pageSize=IndicatorPaginationInfo.getPageSize();
  int totalPages=modelElementIndicatores.length / pageSize;
  List<ModelElementIndicator> modelElementIndicators=null;
  for (int index=0; index < totalPages; index++) {
    modelElementIndicators=new ArrayList<ModelElementIndicator>();
    for (int idx=0; idx < pageSize; idx++) {
      modelElementIndicators.add(modelElementIndicatores[index * pageSize + idx]);
    }
    IndicatorPaginationInfo pginfo=new MasterPaginationInfo(form,previewChartList,modelElementIndicators,uiPagination);
    uiPagination.addPage(pginfo);
  }
  int left=modelElementIndicatores.length % pageSize;
  if (left != 0) {
    modelElementIndicators=new ArrayList<ModelElementIndicator>();
    for (int leftIdx=0; leftIdx < left; leftIdx++) {
      modelElementIndicators.add(modelElementIndicatores[totalPages * pageSize + leftIdx]);
    }
    IndicatorPaginationInfo pginfo=new MasterPaginationInfo(form,previewChartList,modelElementIndicators,uiPagination);
    uiPagination.addPage(pginfo);
    totalPages++;
  }
  uiPagination.init();
  for (  ExpandableComposite comp : previewChartList) {
    registerSection(comp);
  }
  composite.layout();
  composite.pack();
  form.reflow(true);
}",0.9957833279273436
138268,"private void addTreeListener(final Tree tree){
  tree.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      TreeItem item=(TreeItem)e.item;
      if (DATA_PARAM.equals(item.getData(DATA_PARAM))) {
        tree.setMenu(null);
      }
 else {
        new AnalysisColumnColumnMenuProvider(tree).createTreeMenu(Boolean.FALSE);
      }
    }
  }
);
  tree.addTreeListener(new TreeAdapter(){
    @Override public void treeCollapsed(    TreeEvent e){
      ExpandableComposite theSuitedComposite=getTheSuitedComposite(e);
      ScrolledForm form=masterPage.getForm();
      Composite comp=masterPage.getChartComposite();
      if (theSuitedComposite != null && theSuitedComposite.isExpanded()) {
        getTheSuitedComposite(e).setExpanded(false);
      }
      comp.layout();
      form.reflow(true);
    }
    @Override public void treeExpanded(    TreeEvent e){
      ExpandableComposite theSuitedComposite=getTheSuitedComposite(e);
      ScrolledForm form=masterPage.getForm();
      Composite comp=masterPage.getChartComposite();
      if (theSuitedComposite != null && !theSuitedComposite.isExpanded()) {
        theSuitedComposite.setExpanded(true);
      }
      comp.layout();
      form.reflow(true);
    }
  }
);
  tree.addMouseListener(new MouseAdapter(){
    @Override public void mouseDoubleClick(    MouseEvent e){
      TreeItem[] treeSelection=tree.getSelection();
      if (treeSelection.length > 0) {
        TreeItem item=treeSelection[0];
        Object indicatorobj=item.getData(INDICATOR_UNIT_KEY);
        Object meobj=item.getData(MODELELEMENT_INDICATOR_KEY);
        if (meobj != null && indicatorobj == null) {
          openIndicatorSelectDialog(null);
        }
 else         if (meobj != null && indicatorobj != null) {
          openIndicatorOptionDialog(null,item);
        }
      }
    }
  }
);
}","private void addTreeListener(final Tree tree){
  tree.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      TreeItem item=(TreeItem)e.item;
      if (DATA_PARAM.equals(item.getData(DATA_PARAM))) {
        tree.setMenu(null);
      }
 else {
        new AnalysisColumnColumnMenuProvider(tree).createTreeMenu(Boolean.FALSE);
      }
    }
  }
);
  tree.addTreeListener(new TreeAdapter(){
    @Override public void treeCollapsed(    TreeEvent e){
      ExpandableComposite theSuitedComposite=getTheSuitedComposite(e);
      ScrolledForm form=masterPage.getForm();
      Composite comp=masterPage.getChartComposite();
      if (theSuitedComposite != null && theSuitedComposite.isExpanded()) {
        getTheSuitedComposite(e).setExpanded(false);
      }
      comp.layout();
      form.reflow(true);
    }
    @Override public void treeExpanded(    TreeEvent e){
      ExpandableComposite theSuitedComposite=getTheSuitedComposite(e);
      ScrolledForm form=masterPage.getForm();
      Composite comp=masterPage.getChartComposite();
      if (theSuitedComposite != null && !theSuitedComposite.isExpanded()) {
        theSuitedComposite.setExpanded(true);
      }
 else {
        propertyChangeSupport.firePropertyChange(PluginConstant.EXPAND_TREE,null,e.item);
      }
      comp.layout();
      form.reflow(true);
    }
  }
);
  tree.addMouseListener(new MouseAdapter(){
    @Override public void mouseDoubleClick(    MouseEvent e){
      TreeItem[] treeSelection=tree.getSelection();
      if (treeSelection.length > 0) {
        TreeItem item=treeSelection[0];
        Object indicatorobj=item.getData(INDICATOR_UNIT_KEY);
        Object meobj=item.getData(MODELELEMENT_INDICATOR_KEY);
        if (meobj != null && indicatorobj == null) {
          openIndicatorSelectDialog(null);
        }
 else         if (meobj != null && indicatorobj != null) {
          openIndicatorOptionDialog(null,item);
        }
      }
    }
  }
);
}",0.9726522187822496
138269,"@Override public void treeExpanded(TreeEvent e){
  ExpandableComposite theSuitedComposite=getTheSuitedComposite(e);
  ScrolledForm form=masterPage.getForm();
  Composite comp=masterPage.getChartComposite();
  if (theSuitedComposite != null && !theSuitedComposite.isExpanded()) {
    theSuitedComposite.setExpanded(true);
  }
  comp.layout();
  form.reflow(true);
}","@Override public void treeExpanded(TreeEvent e){
  ExpandableComposite theSuitedComposite=getTheSuitedComposite(e);
  ScrolledForm form=masterPage.getForm();
  Composite comp=masterPage.getChartComposite();
  if (theSuitedComposite != null && !theSuitedComposite.isExpanded()) {
    theSuitedComposite.setExpanded(true);
  }
 else {
    propertyChangeSupport.firePropertyChange(PluginConstant.EXPAND_TREE,null,e.item);
  }
  comp.layout();
  form.reflow(true);
}",0.8813559322033898
138270,"private Section createTableSectionPart(Composite parentComp,String title,ColumnSetMultiValueIndicator columnSetMultiIndicator){
  Section columnSetElementSection=this.createSection(form,parentComp,title,null);
  Composite sectionTableComp=toolkit.createComposite(columnSetElementSection);
  sectionTableComp.setLayoutData(new GridData(GridData.FILL_BOTH));
  sectionTableComp.setLayout(new GridLayout());
  TableViewer columnsElementViewer=new TableViewer(sectionTableComp,SWT.MULTI | SWT.FULL_SELECTION | SWT.BORDER);
  Table table=columnsElementViewer.getTable();
  List<String> tableColumnNames=columnSetMultiIndicator.getColumnHeaders();
  for (  String tableColumnName : tableColumnNames) {
    final TableColumn columnHeader=new TableColumn(table,SWT.NONE);
    columnHeader.setText(tableColumnName);
  }
  table.setLinesVisible(true);
  table.setHeaderVisible(true);
  TableSectionViewerProvider provider=new TableSectionViewerProvider();
  List<Object[]> tableRows=columnSetMultiIndicator.getListRows();
  columnsElementViewer.setContentProvider(provider);
  columnsElementViewer.setLabelProvider(provider);
  columnsElementViewer.setInput(tableRows);
  for (int i=0; i < tableColumnNames.size(); i++) {
    table.getColumn(i).pack();
  }
  columnSetElementSection.setClient(sectionTableComp);
  setupTableGridDataLimitedSize(table,tableRows.size());
  addColumnSorters(columnsElementViewer,table.getColumns(),this.buildSorter(tableRows));
  columnSetElementSection.setExpanded(false);
  return columnSetElementSection;
}","private Section createTableSectionPart(Composite parentComp,String title,ColumnSetMultiValueIndicator columnSetMultiIndicator){
  Section columnSetElementSection=this.createSection(form,parentComp,title,null);
  Composite sectionTableComp=toolkit.createComposite(columnSetElementSection);
  sectionTableComp.setLayoutData(new GridData(GridData.FILL_BOTH));
  sectionTableComp.setLayout(new GridLayout());
  TableViewer columnsElementViewer=new TableViewer(sectionTableComp,SWT.MULTI | SWT.FULL_SELECTION | SWT.BORDER);
  Table table=columnsElementViewer.getTable();
  List<String> tableColumnNames=columnSetMultiIndicator.getColumnHeaders();
  for (  String tableColumnName : tableColumnNames) {
    final TableColumn columnHeader=new TableColumn(table,SWT.NONE);
    columnHeader.setText(tableColumnName);
  }
  table.setLinesVisible(true);
  table.setHeaderVisible(true);
  TableSectionViewerProvider provider=new TableSectionViewerProvider();
  List<Object[]> tableRows=columnSetMultiIndicator.getListRows();
  columnsElementViewer.setContentProvider(provider);
  columnsElementViewer.setLabelProvider(provider);
  columnsElementViewer.setInput(tableRows);
  for (int i=0; i < tableColumnNames.size(); i++) {
    table.getColumn(i).pack();
  }
  columnSetElementSection.setClient(sectionTableComp);
  setupTableGridDataLimitedSize(table,tableRows != null ? tableRows.size() : 0);
  addColumnSorters(columnsElementViewer,table.getColumns(),this.buildSorter(tableRows));
  columnSetElementSection.setExpanded(false);
  return columnSetElementSection;
}",0.9922128487994808
138271,"/** 
 * If the pattern is not null, will save it and update the corresponding pattern editor content.
 */
private void savePattern(){
  if (pattern != null) {
    String expressionLanguage=this.regularExpression.getExpression().getLanguage();
    DbmsLanguage dbmsLanguage=this.getDbmsLanguage();
    dbmsLanguage.setFunctionName(getFunctionName());
    boolean isLanguageMatched=false;
    if (isJavaEngine && expressionLanguage.equals(ExecutionLanguage.JAVA.getLiteral()) || dbmsLanguage != null && (dbmsLanguage.getDbmsName().equalsIgnoreCase(expressionLanguage))) {
      isLanguageMatched=true;
    }
    if (!isLanguageMatched) {
      String messageInfo=DefaultMessagesImpl.getString(""String_Node_Str"",expressionLanguage,dbmsLanguage.getDbmsName(),expressionLanguage,expressionLanguage,dbmsLanguage.getDbmsName());
      MessageDialog messageDialog=new MessageDialog(new Shell(),DefaultMessagesImpl.getString(""String_Node_Str""),null,messageInfo,MessageDialog.WARNING,new String[]{IDialogConstants.YES_LABEL,IDialogConstants.NO_LABEL},0);
      int result=messageDialog.open();
      if (result == MessageDialog.OK) {
        regularExpression.getExpression().setBody(regularText.getText());
      }
 else {
        EList<PatternComponent> components=this.pattern.getComponents();
        boolean isContainLanguage=false;
        for (int i=0; i < components.size(); i++) {
          RegularExpressionImpl regularExpress=(RegularExpressionImpl)components.get(i);
          if (dbmsLanguage.getDbmsName().equalsIgnoreCase(regularExpress.getExpression().getLanguage())) {
            regularExpress.getExpression().setBody(regularText.getText());
            isContainLanguage=true;
            break;
          }
        }
        if (!isContainLanguage) {
          RegularExpression newRegularExpress=BooleanExpressionHelper.createRegularExpression(dbmsLanguage.getDbmsName(),regularText.getText());
          this.pattern.getComponents().add(newRegularExpress);
        }
      }
    }
 else {
      regularExpression.getExpression().setBody(regularText.getText());
    }
    EMFUtil.saveSingleResource(pattern.eResource());
    editorPage.updatePatternDefinitonSection();
    saveButton.setEnabled(false);
  }
}","/** 
 * If the pattern is not null, will save it and update the corresponding pattern editor content.
 */
private void savePattern(){
  if (pattern != null) {
    String expressionLanguage=this.regularExpression.getExpression().getLanguage();
    DbmsLanguage dbmsLanguage=this.getDbmsLanguage();
    if (null != dbmsLanguage) {
      dbmsLanguage.setFunctionName(getFunctionName());
    }
    boolean isLanguageMatched=false;
    if (isJavaEngine && expressionLanguage.equals(ExecutionLanguage.JAVA.getLiteral()) || dbmsLanguage != null && (dbmsLanguage.getDbmsName().equalsIgnoreCase(expressionLanguage))) {
      isLanguageMatched=true;
    }
    if (!isLanguageMatched) {
      String messageInfo=DefaultMessagesImpl.getString(""String_Node_Str"",expressionLanguage,dbmsLanguage.getDbmsName(),expressionLanguage,expressionLanguage,dbmsLanguage.getDbmsName());
      MessageDialog messageDialog=new MessageDialog(new Shell(),DefaultMessagesImpl.getString(""String_Node_Str""),null,messageInfo,MessageDialog.WARNING,new String[]{IDialogConstants.YES_LABEL,IDialogConstants.NO_LABEL},0);
      int result=messageDialog.open();
      if (result == MessageDialog.OK) {
        regularExpression.getExpression().setBody(regularText.getText());
      }
 else {
        EList<PatternComponent> components=this.pattern.getComponents();
        boolean isContainLanguage=false;
        for (int i=0; i < components.size(); i++) {
          RegularExpressionImpl regularExpress=(RegularExpressionImpl)components.get(i);
          if (dbmsLanguage.getDbmsName().equalsIgnoreCase(regularExpress.getExpression().getLanguage())) {
            regularExpress.getExpression().setBody(regularText.getText());
            isContainLanguage=true;
            break;
          }
        }
        if (!isContainLanguage) {
          RegularExpression newRegularExpress=BooleanExpressionHelper.createRegularExpression(dbmsLanguage.getDbmsName(),regularText.getText());
          this.pattern.getComponents().add(newRegularExpress);
        }
      }
    }
 else {
      regularExpression.getExpression().setBody(regularText.getText());
    }
    EMFUtil.saveSingleResource(pattern.eResource());
    editorPage.updatePatternDefinitonSection();
    saveButton.setEnabled(false);
  }
}",0.9910714285714286
138272,"/** 
 * DOC qzhang Comment method ""createOneUnit"".
 * @param treeItem
 * @param indicatorUnit
 */
public void createOneUnit(final TreeItem treeItem,IndicatorUnit indicatorUnit){
  final TreeItem indicatorItem=new TreeItem(treeItem,SWT.NONE);
  final IndicatorUnit unit=indicatorUnit;
  IndicatorEnum indicatorType=indicatorUnit.getType();
  indicatorItem.setData(MODELELEMENT_INDICATOR_KEY,treeItem.getData(MODELELEMENT_INDICATOR_KEY));
  indicatorItem.setData(INDICATOR_UNIT_KEY,unit);
  indicatorItem.setData(viewKey,this);
  indicatorItem.setImage(0,getIndicatorImage(unit));
  String indicatorName=getIndicatorName(indicatorUnit);
  String label=indicatorName == null ? ""String_Node_Str"" : indicatorName;
  indicatorItem.setText(0,label);
  TreeEditor optionEditor;
  optionEditor=new TreeEditor(tree);
  Label optionLabel=new Label(tree,SWT.NONE);
  optionLabel.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_WHITE));
  optionLabel.setImage(ImageLib.getImage(ImageLib.INDICATOR_OPTION));
  optionLabel.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
  optionLabel.pack();
  optionLabel.setData(indicatorUnit);
  optionLabel.addMouseListener(new MouseAdapter(){
    @Override public void mouseDown(    MouseEvent e){
      openIndicatorOptionDialog(null,indicatorItem);
    }
  }
);
  optionEditor.minimumWidth=optionLabel.getImage().getBounds().width;
  optionEditor.horizontalAlignment=SWT.CENTER;
  optionEditor.setEditor(optionLabel,indicatorItem,1);
  TreeEditor delEditor=new TreeEditor(tree);
  Label delLabel=new Label(tree,SWT.NONE);
  delLabel.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_WHITE));
  delLabel.setImage(ImageLib.getImage(ImageLib.DELETE_ACTION));
  delLabel.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
  delLabel.pack();
  delLabel.addMouseListener(new MouseAdapter(){
    @Override public void mouseDown(    MouseEvent e){
      ModelElementIndicator meIndicator=(ModelElementIndicator)treeItem.getData(MODELELEMENT_INDICATOR_KEY);
      deleteIndicatorItems(meIndicator,unit);
      if (indicatorItem.getParentItem() != null && indicatorItem.getParentItem().getData(INDICATOR_UNIT_KEY) != null) {
        setElements(modelElementIndicators);
      }
 else {
        removeItemBranch(indicatorItem);
      }
    }
  }
);
  delEditor.minimumWidth=delLabel.getImage().getBounds().width;
  delEditor.horizontalAlignment=SWT.CENTER;
  if (AnalysisColumnTreeViewer.VIEWER_KEY.equals(viewKey)) {
    delEditor.setEditor(delLabel,indicatorItem,4);
  }
 else   if (AnalysisColumnSetTreeViewer.VIEWER_KEY.equals(viewKey)) {
    delEditor.setEditor(delLabel,indicatorItem,3);
  }
  indicatorItem.setData(ITEM_EDITOR_KEY,new TreeEditor[]{optionEditor,delEditor});
  if (indicatorType.hasChildren()) {
    indicatorItem.setData(treeItem.getData(MODELELEMENT_INDICATOR_KEY));
    createIndicatorItems(indicatorItem,indicatorUnit.getChildren());
  }
  createIndicatorParameters(indicatorItem,indicatorUnit);
  Display.getCurrent().asyncExec(new Runnable(){
    public void run(){
      tree.getColumn(0).setWidth(tree.getColumn(0).getWidth() + 1);
      tree.getColumn(0).setWidth(tree.getColumn(0).getWidth() - 1);
    }
  }
);
}","/** 
 * DOC qzhang Comment method ""createOneUnit"".
 * @param treeItem
 * @param indicatorUnit
 */
public void createOneUnit(final TreeItem treeItem,IndicatorUnit indicatorUnit){
  final TreeItem indicatorItem=new TreeItem(treeItem,SWT.NONE);
  final IndicatorUnit unit=indicatorUnit;
  IndicatorEnum indicatorType=indicatorUnit.getType();
  indicatorItem.setData(MODELELEMENT_INDICATOR_KEY,treeItem.getData(MODELELEMENT_INDICATOR_KEY));
  indicatorItem.setData(INDICATOR_UNIT_KEY,unit);
  indicatorItem.setData(viewKey,this);
  indicatorItem.setImage(0,getIndicatorImage(unit));
  String indicatorName=getIndicatorName(indicatorUnit);
  String label=indicatorName == null ? ""String_Node_Str"" : indicatorName;
  indicatorItem.setText(0,label);
  TreeEditor optionEditor;
  optionEditor=new TreeEditor(tree);
  Label optionLabel=new Label(tree,SWT.NONE);
  optionLabel.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_WHITE));
  optionLabel.setImage(ImageLib.getImage(ImageLib.INDICATOR_OPTION));
  optionLabel.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
  optionLabel.pack();
  optionLabel.setData(indicatorUnit);
  optionLabel.addMouseListener(new MouseAdapter(){
    @Override public void mouseDown(    MouseEvent e){
      openIndicatorOptionDialog(null,indicatorItem);
    }
  }
);
  optionEditor.minimumWidth=optionLabel.getImage().getBounds().width;
  optionEditor.horizontalAlignment=SWT.CENTER;
  optionEditor.setEditor(optionLabel,indicatorItem,1);
  TreeEditor delEditor=new TreeEditor(tree);
  Label delLabel=new Label(tree,SWT.NONE);
  delLabel.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_WHITE));
  delLabel.setImage(ImageLib.getImage(ImageLib.DELETE_ACTION));
  delLabel.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
  delLabel.pack();
  delLabel.addMouseListener(new MouseAdapter(){
    @Override public void mouseDown(    MouseEvent e){
      ModelElementIndicator meIndicator=(ModelElementIndicator)treeItem.getData(MODELELEMENT_INDICATOR_KEY);
      deleteIndicatorItems(meIndicator,unit);
      if (indicatorItem.getParentItem() != null && indicatorItem.getParentItem().getData(INDICATOR_UNIT_KEY) != null) {
        setElements(modelElementIndicators);
      }
 else {
        removeItemBranch(indicatorItem);
      }
    }
  }
);
  delEditor.minimumWidth=delLabel.getImage().getBounds().width;
  delEditor.horizontalAlignment=SWT.CENTER;
  if (AnalysisColumnTreeViewer.VIEWER_KEY.equals(viewKey)) {
    delEditor.setEditor(delLabel,indicatorItem,4);
  }
 else   if (AnalysisColumnSetTreeViewer.VIEWER_KEY.equals(viewKey)) {
    delEditor.setEditor(delLabel,indicatorItem,3);
  }
  indicatorItem.setData(ITEM_EDITOR_KEY,new TreeEditor[]{optionEditor,delEditor});
  if (indicatorType.hasChildren()) {
    indicatorItem.setData(treeItem.getData(MODELELEMENT_INDICATOR_KEY));
    createIndicatorItems(indicatorItem,indicatorUnit.getChildren());
  }
  createIndicatorParameters(indicatorItem,indicatorUnit);
  Display.getCurrent().asyncExec(new Runnable(){
    public void run(){
      tree.getColumn(0).setWidth(tree.getColumn(0).getWidth() + 1);
    }
  }
);
  Display.getCurrent().asyncExec(new Runnable(){
    public void run(){
      tree.getColumn(0).setWidth(tree.getColumn(0).getWidth() - 1);
    }
  }
);
}",0.9851067096576078
138273,"public void run(){
  tree.getColumn(0).setWidth(tree.getColumn(0).getWidth() + 1);
  tree.getColumn(0).setWidth(tree.getColumn(0).getWidth() - 1);
}","public void run(){
  tree.getColumn(0).setWidth(tree.getColumn(0).getWidth() - 1);
}",0.7241379310344828
138274,"@Override public void run(){
  ISelection selection=this.getSelection();
  boolean onlyDeleteReportFile=true;
  for (  Object obj : ((IStructuredSelection)selection).toArray()) {
    if (obj instanceof RepositoryNode) {
      RepositoryNode node=(RepositoryNode)obj;
      if (node instanceof ReportFileRepNode) {
        deleteReportFile((ReportFileRepNode)node);
        continue;
      }
      onlyDeleteReportFile=false;
      boolean isStateDeleted=RepositoryNodeHelper.isStateDeleted(node);
      if (!isStateDeleted) {
        closeEditors(selection);
        excuteSuperRun(null);
        break;
      }
      boolean hasDependency=false;
      if (node.getType() == ENodeType.SIMPLE_FOLDER) {
        List<IRepositoryNode> newLs=RepositoryNodeHelper.getRepositoryElementFromFolder(node,true);
        for (        IRepositoryNode subNode : newLs) {
          hasDependency=RepositoryNodeHelper.hasDependencyClients(subNode);
          if (!hasDependency || hasDependency && handleDependencies(subNode)) {
            excuteSuperRun((RepositoryNode)subNode);
          }
        }
        excuteSuperRun(node);
      }
 else {
        hasDependency=RepositoryNodeHelper.hasDependencyClients(node);
        if (!hasDependency || hasDependency && handleDependencies(node)) {
          excuteSuperRun((RepositoryNode)node);
        }
      }
    }
  }
  if (!onlyDeleteReportFile) {
    CorePlugin.getDefault().refreshWorkSpace();
    CorePlugin.getDefault().refreshDQView();
  }
}","@Override public void run(){
  ISelection selection=this.getSelection();
  boolean onlyDeleteReportFile=true;
  for (  Object obj : ((IStructuredSelection)selection).toArray()) {
    if (obj instanceof RepositoryNode) {
      RepositoryNode node=(RepositoryNode)obj;
      if (node instanceof ReportFileRepNode) {
        deleteReportFile((ReportFileRepNode)node);
        continue;
      }
      onlyDeleteReportFile=false;
      boolean isStateDeleted=RepositoryNodeHelper.isStateDeleted(node);
      if (!isStateDeleted) {
        closeEditors(selection);
        excuteSuperRun(null);
        break;
      }
      boolean hasDependency=false;
      if (node.getType() == ENodeType.SIMPLE_FOLDER || node.getType() == ENodeType.SYSTEM_FOLDER) {
        List<IRepositoryNode> newLs=RepositoryNodeHelper.getRepositoryElementFromFolder(node,true);
        for (        IRepositoryNode subNode : newLs) {
          hasDependency=RepositoryNodeHelper.hasDependencyClients(subNode);
          if (!hasDependency || hasDependency && handleDependencies(subNode)) {
            excuteSuperRun((RepositoryNode)subNode);
          }
        }
        excuteSuperRun(node);
      }
 else {
        hasDependency=RepositoryNodeHelper.hasDependencyClients(node);
        if (!hasDependency || hasDependency && handleDependencies(node)) {
          excuteSuperRun((RepositoryNode)node);
        }
      }
    }
  }
  if (!onlyDeleteReportFile) {
    CorePlugin.getDefault().refreshWorkSpace();
    CorePlugin.getDefault().refreshDQView();
  }
}",0.985084521047398
138275,"@Override protected boolean doExecute() throws Exception {
  newFileList=new ArrayList<File>();
  replaceMap=new HashMap<String,String>();
  ArrayList<File> fileList=getNeedUpdateFiles();
  for (  File file : fileList) {
    createNewItemFile(file);
    deleteOldItemFile(file);
  }
  addConnectionFileToUpdate();
  updateFile();
  return true;
}","@Override protected boolean doExecute() throws Exception {
  newFileList=new ArrayList<File>();
  replaceMap=new HashMap<String,String>();
  ArrayList<File> fileList=getNeedUpdateFiles();
  for (  File file : fileList) {
    createNewItemFile(file);
    deleteOldItemFile(file);
  }
  updateConnectionFile();
  updateFile();
  return true;
}",0.975254730713246
138276,"/** 
 * DOC qzhang Comment method ""createOneUnit"".
 * @param treeItem
 * @param indicatorUnit
 */
public void createOneUnit(final TreeItem treeItem,IndicatorUnit indicatorUnit){
  final TreeItem indicatorItem=new TreeItem(treeItem,SWT.NONE);
  final IndicatorUnit unit=indicatorUnit;
  IndicatorEnum indicatorType=indicatorUnit.getType();
  indicatorItem.setData(MODELELEMENT_INDICATOR_KEY,treeItem.getData(MODELELEMENT_INDICATOR_KEY));
  indicatorItem.setData(INDICATOR_UNIT_KEY,unit);
  indicatorItem.setData(viewKey,this);
  indicatorItem.setImage(0,getIndicatorImage(unit));
  String indicatorName=getIndicatorName(indicatorUnit);
  String label=indicatorName == null ? ""String_Node_Str"" : indicatorName;
  indicatorItem.setText(0,label);
  TreeEditor optionEditor;
  optionEditor=new TreeEditor(tree);
  Label optionLabel=new Label(tree,SWT.NONE);
  optionLabel.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_WHITE));
  optionLabel.setImage(ImageLib.getImage(ImageLib.INDICATOR_OPTION));
  optionLabel.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
  optionLabel.pack();
  optionLabel.setData(indicatorUnit);
  optionLabel.addMouseListener(new MouseAdapter(){
    @Override public void mouseDown(    MouseEvent e){
      openIndicatorOptionDialog(null,indicatorItem);
    }
  }
);
  optionEditor.minimumWidth=optionLabel.getImage().getBounds().width;
  optionEditor.horizontalAlignment=SWT.CENTER;
  optionEditor.setEditor(optionLabel,indicatorItem,1);
  TreeEditor delEditor=new TreeEditor(tree);
  Label delLabel=new Label(tree,SWT.NONE);
  delLabel.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_WHITE));
  delLabel.setImage(ImageLib.getImage(ImageLib.DELETE_ACTION));
  delLabel.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
  delLabel.pack();
  delLabel.addMouseListener(new MouseAdapter(){
    @Override public void mouseDown(    MouseEvent e){
      ModelElementIndicator meIndicator=(ModelElementIndicator)treeItem.getData(MODELELEMENT_INDICATOR_KEY);
      deleteIndicatorItems(meIndicator,unit);
      if (indicatorItem.getParentItem() != null && indicatorItem.getParentItem().getData(INDICATOR_UNIT_KEY) != null) {
        setElements(modelElementIndicators);
      }
 else {
        removeItemBranch(indicatorItem);
      }
    }
  }
);
  delEditor.minimumWidth=delLabel.getImage().getBounds().width;
  delEditor.horizontalAlignment=SWT.CENTER;
  if (AnalysisColumnTreeViewer.VIEWER_KEY.equals(viewKey)) {
    delEditor.setEditor(delLabel,indicatorItem,4);
  }
 else   if (AnalysisColumnSetTreeViewer.VIEWER_KEY.equals(viewKey)) {
    delEditor.setEditor(delLabel,indicatorItem,3);
  }
  indicatorItem.setData(ITEM_EDITOR_KEY,new TreeEditor[]{optionEditor,delEditor});
  if (indicatorType.hasChildren()) {
    indicatorItem.setData(treeItem.getData(MODELELEMENT_INDICATOR_KEY));
    createIndicatorItems(indicatorItem,indicatorUnit.getChildren());
  }
  createIndicatorParameters(indicatorItem,indicatorUnit);
  tree.getColumn(0).pack();
}","/** 
 * DOC qzhang Comment method ""createOneUnit"".
 * @param treeItem
 * @param indicatorUnit
 */
public void createOneUnit(final TreeItem treeItem,IndicatorUnit indicatorUnit){
  final TreeItem indicatorItem=new TreeItem(treeItem,SWT.NONE);
  final IndicatorUnit unit=indicatorUnit;
  IndicatorEnum indicatorType=indicatorUnit.getType();
  indicatorItem.setData(MODELELEMENT_INDICATOR_KEY,treeItem.getData(MODELELEMENT_INDICATOR_KEY));
  indicatorItem.setData(INDICATOR_UNIT_KEY,unit);
  indicatorItem.setData(viewKey,this);
  indicatorItem.setImage(0,getIndicatorImage(unit));
  String indicatorName=getIndicatorName(indicatorUnit);
  String label=indicatorName == null ? ""String_Node_Str"" : indicatorName;
  indicatorItem.setText(0,label);
  TreeEditor optionEditor;
  optionEditor=new TreeEditor(tree);
  Label optionLabel=new Label(tree,SWT.NONE);
  optionLabel.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_WHITE));
  optionLabel.setImage(ImageLib.getImage(ImageLib.INDICATOR_OPTION));
  optionLabel.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
  optionLabel.pack();
  optionLabel.setData(indicatorUnit);
  optionLabel.addMouseListener(new MouseAdapter(){
    @Override public void mouseDown(    MouseEvent e){
      openIndicatorOptionDialog(null,indicatorItem);
    }
  }
);
  optionEditor.minimumWidth=optionLabel.getImage().getBounds().width;
  optionEditor.horizontalAlignment=SWT.CENTER;
  optionEditor.setEditor(optionLabel,indicatorItem,1);
  TreeEditor delEditor=new TreeEditor(tree);
  Label delLabel=new Label(tree,SWT.NONE);
  delLabel.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_WHITE));
  delLabel.setImage(ImageLib.getImage(ImageLib.DELETE_ACTION));
  delLabel.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
  delLabel.pack();
  delLabel.addMouseListener(new MouseAdapter(){
    @Override public void mouseDown(    MouseEvent e){
      ModelElementIndicator meIndicator=(ModelElementIndicator)treeItem.getData(MODELELEMENT_INDICATOR_KEY);
      deleteIndicatorItems(meIndicator,unit);
      if (indicatorItem.getParentItem() != null && indicatorItem.getParentItem().getData(INDICATOR_UNIT_KEY) != null) {
        setElements(modelElementIndicators);
      }
 else {
        removeItemBranch(indicatorItem);
      }
    }
  }
);
  delEditor.minimumWidth=delLabel.getImage().getBounds().width;
  delEditor.horizontalAlignment=SWT.CENTER;
  if (AnalysisColumnTreeViewer.VIEWER_KEY.equals(viewKey)) {
    delEditor.setEditor(delLabel,indicatorItem,4);
  }
 else   if (AnalysisColumnSetTreeViewer.VIEWER_KEY.equals(viewKey)) {
    delEditor.setEditor(delLabel,indicatorItem,3);
  }
  indicatorItem.setData(ITEM_EDITOR_KEY,new TreeEditor[]{optionEditor,delEditor});
  if (indicatorType.hasChildren()) {
    indicatorItem.setData(treeItem.getData(MODELELEMENT_INDICATOR_KEY));
    createIndicatorItems(indicatorItem,indicatorUnit.getChildren());
  }
  createIndicatorParameters(indicatorItem,indicatorUnit);
  Display.getCurrent().asyncExec(new Runnable(){
    public void run(){
      tree.getColumn(0).setWidth(tree.getColumn(0).getWidth() + 1);
      tree.getColumn(0).setWidth(tree.getColumn(0).getWidth() - 1);
    }
  }
);
}",0.965196471531676
138277,"/** 
 * DOC xqliu Comment method ""getPath"".
 * @param element
 * @param itemPath
 * @return
 */
private IPath getPath(ModelElement element,IPath itemPath){
  IPath path=new Path(PluginConstant.EMPTY_STRING);
  if (element instanceof DatabaseConnection) {
    path=itemPath.makeRelativeTo(ResourceManager.getTDQConnectionFolder().getFullPath());
  }
 else   if (element instanceof MDMConnection) {
    path=itemPath.makeRelativeTo(ResourceManager.getMDMConnectionFolder().getFullPath());
  }
 else   if (element instanceof Analysis) {
    path=itemPath.makeRelativeTo(ResourceManager.getAnalysisFolder().getFullPath());
  }
 else   if (element instanceof Report) {
    path=itemPath.makeRelativeTo(ResourceManager.getReportsFolder().getFullPath());
  }
 else   if (element instanceof IndicatorDefinition) {
    if (element instanceof WhereRule) {
      path=itemPath.makeRelativeTo(ResourceManager.getRulesSQLFolder().getFullPath());
    }
 else {
      path=itemPath.makeRelativeTo(ResourceManager.getIndicatorFolder().getFullPath());
    }
  }
 else   if (element instanceof Pattern) {
    path=itemPath.makeRelativeTo(ResourceManager.getPatternFolder().getFullPath());
  }
  return path;
}","/** 
 * DOC xqliu Comment method ""getPath"".
 * @param element
 * @param itemPath
 * @return
 */
private IPath getPath(ModelElement element,IPath itemPath){
  IPath path=new Path(PluginConstant.EMPTY_STRING);
  if (element instanceof DatabaseConnection) {
    path=itemPath.makeRelativeTo(ResourceManager.getTDQConnectionFolder().getFullPath());
  }
 else   if (element instanceof MDMConnection) {
    path=itemPath.makeRelativeTo(ResourceManager.getMDMConnectionFolder().getFullPath());
  }
 else   if (element instanceof Analysis) {
    path=itemPath.makeRelativeTo(ResourceManager.getAnalysisFolder().getFullPath());
  }
 else   if (element instanceof Report) {
    path=itemPath.makeRelativeTo(ResourceManager.getReportsFolder().getFullPath());
  }
 else   if (element instanceof IndicatorDefinition) {
    if (element instanceof WhereRule) {
      path=itemPath.makeRelativeTo(ResourceManager.getRulesFolder().getFullPath());
    }
 else {
      path=itemPath.makeRelativeTo(ResourceManager.getIndicatorFolder().getFullPath());
    }
  }
 else   if (element instanceof Pattern) {
    path=itemPath.makeRelativeTo(ResourceManager.getPatternFolder().getFullPath());
  }
  return path;
}",0.9987389659520808
138278,"/** 
 * DOC bZhou Comment method ""checkConflict"".
 * @param record
 */
private void checkConflict(ItemRecord record){
  Property property=record.getProperty();
  if (property != null) {
    try {
      RepositoryNode node=RepositoryNodeHelper.recursiveFind(property);
      if (node != null) {
        record.setConflictNode(node);
        record.addError(""String_Node_Str"" + record.getName() + ""String_Node_Str"");
      }
    }
 catch (    Exception e) {
      record.addError(""String_Node_Str"" + record.getName() + ""String_Node_Str"");
    }
  }
}","/** 
 * DOC bZhou Comment method ""checkConflict"".
 * @param record
 */
private void checkConflict(ItemRecord record){
  Property property=record.getProperty();
  if (property != null) {
    try {
      List<IRepositoryViewObject> allObjects=DqRepositoryViewService.getAllRepositoryResourceObjects(true);
      for (      IRepositoryViewObject object : allObjects) {
        if (record.getProperty() != null && record.getProperty().getId().equals(object.getProperty().getId())) {
          record.setConflictObject(object);
          record.addError(""String_Node_Str"" + record.getName() + ""String_Node_Str"");
          break;
        }
      }
    }
 catch (    Exception e) {
      record.addError(""String_Node_Str"" + record.getName() + ""String_Node_Str"");
    }
  }
}",0.7477203647416414
138279,"@Override protected void run(){
  try {
    for (    ItemRecord record : fRecords) {
      if (fMonitor.isCanceled()) {
        break;
      }
      Map<IPath,IPath> toImportMap=mapping(record);
      fMonitor.subTask(""String_Node_Str"" + record.getName());
      if (record.isValid()) {
        log.info(""String_Node_Str"" + record.getFile().getAbsolutePath());
        IRepositoryNode conflictNode=record.getConflictNode();
        if (conflictNode != null) {
          IRepositoryViewObject object=conflictNode.getObject();
          ProxyRepositoryFactory.getInstance().deleteObjectPhysical(object);
        }
        for (        IPath resPath : toImportMap.keySet()) {
          IPath desPath=toImportMap.get(resPath);
          ResourceSet resourceSet=ProxyRepositoryFactory.getInstance().getRepositoryFactoryFromProvider().getResourceManager().resourceSet;
synchronized (resourceSet) {
            write(resPath,desPath);
          }
        }
      }
 else {
        for (        String error : record.getErrors()) {
          log.error(error);
        }
      }
      fMonitor.worked(1);
    }
    finish(fRecords,fMonitor);
  }
 catch (  Exception e) {
    log.error(e,e);
  }
}","@Override protected void run(){
  try {
    for (    ItemRecord record : fRecords) {
      if (fMonitor.isCanceled()) {
        break;
      }
      Map<IPath,IPath> toImportMap=mapping(record);
      fMonitor.subTask(""String_Node_Str"" + record.getName());
      if (record.isValid()) {
        log.info(""String_Node_Str"" + record.getFile().getAbsolutePath());
        IRepositoryViewObject object=record.getConflictObject();
        if (object != null) {
          ProxyRepositoryFactory.getInstance().deleteObjectPhysical(object);
        }
        for (        IPath resPath : toImportMap.keySet()) {
          IPath desPath=toImportMap.get(resPath);
          ResourceSet resourceSet=ProxyRepositoryFactory.getInstance().getRepositoryFactoryFromProvider().getResourceManager().resourceSet;
synchronized (resourceSet) {
            write(resPath,desPath);
          }
        }
      }
 else {
        for (        String error : record.getErrors()) {
          log.error(error);
        }
      }
      fMonitor.worked(1);
    }
    finish(fRecords,fMonitor);
  }
 catch (  Exception e) {
    log.error(e,e);
  }
}",0.929284164859002
138280,"public void write(ItemRecord[] records,IProgressMonitor monitor){
  if (monitor == null) {
    monitor=new NullProgressMonitor();
  }
  final ItemRecord[] fRecords=records;
  final IProgressMonitor fMonitor=monitor;
  RepositoryWorkUnit<Object> workUnit=new RepositoryWorkUnit<Object>(""String_Node_Str""){
    @Override protected void run(){
      try {
        for (        ItemRecord record : fRecords) {
          if (fMonitor.isCanceled()) {
            break;
          }
          Map<IPath,IPath> toImportMap=mapping(record);
          fMonitor.subTask(""String_Node_Str"" + record.getName());
          if (record.isValid()) {
            log.info(""String_Node_Str"" + record.getFile().getAbsolutePath());
            IRepositoryNode conflictNode=record.getConflictNode();
            if (conflictNode != null) {
              IRepositoryViewObject object=conflictNode.getObject();
              ProxyRepositoryFactory.getInstance().deleteObjectPhysical(object);
            }
            for (            IPath resPath : toImportMap.keySet()) {
              IPath desPath=toImportMap.get(resPath);
              ResourceSet resourceSet=ProxyRepositoryFactory.getInstance().getRepositoryFactoryFromProvider().getResourceManager().resourceSet;
synchronized (resourceSet) {
                write(resPath,desPath);
              }
            }
          }
 else {
            for (            String error : record.getErrors()) {
              log.error(error);
            }
          }
          fMonitor.worked(1);
        }
        finish(fRecords,fMonitor);
      }
 catch (      Exception e) {
        log.error(e,e);
      }
    }
  }
;
  workUnit.setAvoidUnloadResources(Boolean.TRUE);
  ProxyRepositoryFactory.getInstance().executeRepositoryWorkUnit(workUnit);
}","public void write(ItemRecord[] records,IProgressMonitor monitor){
  if (monitor == null) {
    monitor=new NullProgressMonitor();
  }
  final ItemRecord[] fRecords=records;
  final IProgressMonitor fMonitor=monitor;
  RepositoryWorkUnit<Object> workUnit=new RepositoryWorkUnit<Object>(""String_Node_Str""){
    @Override protected void run(){
      try {
        for (        ItemRecord record : fRecords) {
          if (fMonitor.isCanceled()) {
            break;
          }
          Map<IPath,IPath> toImportMap=mapping(record);
          fMonitor.subTask(""String_Node_Str"" + record.getName());
          if (record.isValid()) {
            log.info(""String_Node_Str"" + record.getFile().getAbsolutePath());
            IRepositoryViewObject object=record.getConflictObject();
            if (object != null) {
              ProxyRepositoryFactory.getInstance().deleteObjectPhysical(object);
            }
            for (            IPath resPath : toImportMap.keySet()) {
              IPath desPath=toImportMap.get(resPath);
              ResourceSet resourceSet=ProxyRepositoryFactory.getInstance().getRepositoryFactoryFromProvider().getResourceManager().resourceSet;
synchronized (resourceSet) {
                write(resPath,desPath);
              }
            }
          }
 else {
            for (            String error : record.getErrors()) {
              log.error(error);
            }
          }
          fMonitor.worked(1);
        }
        finish(fRecords,fMonitor);
      }
 catch (      Exception e) {
        log.error(e,e);
      }
    }
  }
;
  workUnit.setAvoidUnloadResources(Boolean.TRUE);
  ProxyRepositoryFactory.getInstance().executeRepositoryWorkUnit(workUnit);
}",0.9496402877697842
138281,"/** 
 * DOC mzhao Comment method ""setAnalysisFilterDateFrom"".
 * @param report
 * @param dateText
 * @return
 * @return
 * @throws ParseException
 */
public static void setAnalysisFilterDateTo(TdReport report,String dateText){
  if (dateText == null || dateText.trim().equals(""String_Node_Str"")) {
    return;
  }
  try {
    report.setDateTo(DateUtils.parse(DateUtils.PATTERN_1,dateText));
  }
 catch (  ParseException e) {
    log.error(e,e);
  }
}","/** 
 * DOC mzhao Comment method ""setAnalysisFilterDateFrom"".
 * @param report
 * @param dateText
 * @return
 * @return
 * @throws ParseException
 */
public static void setAnalysisFilterDateTo(TdReport report,String dateText){
  if (dateText == null || dateText.trim().equals(""String_Node_Str"")) {
    report.setDateTo(null);
    return;
  }
  try {
    report.setDateTo(DateUtils.parse(DateUtils.PATTERN_1,dateText));
  }
 catch (  ParseException e) {
    log.error(e,e);
  }
}",0.9698275862068966
138282,"/** 
 * DOC mzhao Set analysis filter date from.
 * @param report
 * @param dateText
 * @return
 * @throws ParseException
 */
public static void setAnalysisFilterDateFrom(TdReport report,String dateText){
  if (dateText == null || dateText.trim().equals(""String_Node_Str"")) {
    return;
  }
  try {
    report.setDateFrom(DateUtils.parse(DateUtils.PATTERN_1,dateText));
  }
 catch (  ParseException e) {
    log.error(e,e);
  }
}","/** 
 * DOC mzhao Set analysis filter date from.
 * @param report
 * @param dateText
 * @return
 * @throws ParseException
 */
public static void setAnalysisFilterDateFrom(TdReport report,String dateText){
  if (dateText == null || dateText.trim().equals(""String_Node_Str"")) {
    report.setDateFrom(null);
    return;
  }
  try {
    report.setDateFrom(DateUtils.parse(DateUtils.PATTERN_1,dateText));
  }
 catch (  ParseException e) {
    log.error(e,e);
  }
}",0.9662921348314608
138283,"protected void saveReloadResult(){
  ElementWriterFactory.getInstance().createDataProviderWriter().save(oldDataProvider);
}","protected void saveReloadResult(){
  ElementWriterFactory.getInstance().createDataProviderWriter().save(oldDataProvider,true);
}",0.9800796812749004
138284,"@Override protected void copy(boolean leftToRight){
  ModelElement modelElement=null;
  IFile resourceFile=null;
  if (selectedOjbect instanceof IFile) {
    modelElement=PrvResourceFileHelper.getInstance().findProvider((IFile)selectedOjbect);
  }
 else   if (selectedOjbect instanceof IRepositoryViewObject) {
    ModelElement me=PropertyHelper.retrieveElement(((IRepositoryViewObject)selectedOjbect).getProperty().getItem());
    if (me instanceof Connection) {
      modelElement=me;
    }
  }
 else {
    IRepositoryNode parentNode=DBTableRepNode.getParentPackageNode((IRepositoryNode)selectedOjbect);
    Package ctatlogSwtich=parentNode instanceof DBCatalogRepNode ? ((DBCatalogRepNode)parentNode).getCatalog() : null;
    if (ctatlogSwtich != null) {
      resourceFile=PrvResourceFileHelper.getInstance().findCorrespondingFile(ConnectionHelper.getTdDataProvider(ctatlogSwtich));
      modelElement=ConnectionHelper.getTdDataProvider(ctatlogSwtich);
    }
    ColumnSet columnSet=parentNode instanceof DBTableRepNode ? ((DBTableRepNode)parentNode).getTdTable() : null;
    if (columnSet != null) {
      resourceFile=PrvResourceFileHelper.getInstance().findCorrespondingFile(ConnectionHelper.getDataProvider(columnSet));
      modelElement=ConnectionHelper.getDataProvider(columnSet);
    }
  }
  if (modelElement != null && resourceFile != null) {
    String titleMessage=DefaultMessagesImpl.getString(""String_Node_Str"");
    int showDialog=DeleteModelElementConfirmDialog.showElementImpactDialog(null,new ModelElement[]{modelElement},titleMessage,titleMessage);
    if (showDialog == Window.OK) {
      EObjectHelper.removeDependencys(new IResource[]{resourceFile});
    }
 else {
      return;
    }
  }
  int diffItemsCount=((ModelCompareInput)getInput()).getDiffAsList().size();
  try {
    super.copy(leftToRight);
    ModelCompareInput modelCompareInput=(ModelCompareInput)getInput();
    if (!leftToRight && modelCompareInput.getDiffAsList().size() == 0) {
      Resource leftResource=modelCompareInput.getLeftResource();
      XmiResourceManager resourceManager=ProxyRepositoryFactory.getInstance().getRepositoryFactoryFromProvider().getResourceManager();
      resourceManager.saveResource(leftResource);
      final MatchModel match=(MatchModel)modelCompareInput.getMatch();
      match.getUnmatchedElements().clear();
      final ComparisonResourceSnapshot snap=DiffFactory.eINSTANCE.createComparisonResourceSnapshot();
      snap.setDiff((DiffModel)((ModelCompareInput)getInput()).getDiff());
      snap.setMatch((MatchModel)((ModelCompareInput)getInput()).getMatch());
      configuration.setProperty(EMFCompareConstants.PROPERTY_CONTENT_INPUT_CHANGED,snap);
    }
    if (!leftToRight && diffItemsCount > 0) {
      if (selectedOjbect instanceof RepositoryViewObject) {
        new ReloadDatabaseAction(((RepositoryViewObject)selectedOjbect).getRepositoryNode(),null).run();
      }
 else {
        new ReloadDatabaseAction(selectedOjbect,null).run();
      }
    }
  }
 catch (  Throwable e) {
    log.error(e.getMessage(),e);
  }
}","@Override protected void copy(boolean leftToRight){
  ModelElement modelElement=null;
  IFile resourceFile=null;
  if (selectedOjbect instanceof IFile) {
    modelElement=PrvResourceFileHelper.getInstance().findProvider((IFile)selectedOjbect);
  }
 else   if (selectedOjbect instanceof IRepositoryViewObject) {
    modelElement=PropertyHelper.getModelElement(((IRepositoryViewObject)selectedOjbect).getProperty());
  }
 else {
    IRepositoryNode parentNode=DBTableRepNode.getParentPackageNode((IRepositoryNode)selectedOjbect);
    Package ctatlogSwtich=parentNode instanceof DBCatalogRepNode ? ((DBCatalogRepNode)parentNode).getCatalog() : null;
    if (ctatlogSwtich != null) {
      resourceFile=PrvResourceFileHelper.getInstance().findCorrespondingFile(ConnectionHelper.getTdDataProvider(ctatlogSwtich));
      modelElement=ConnectionHelper.getTdDataProvider(ctatlogSwtich);
    }
    ColumnSet columnSet=parentNode instanceof DBTableRepNode ? ((DBTableRepNode)parentNode).getTdTable() : null;
    if (columnSet != null) {
      resourceFile=PrvResourceFileHelper.getInstance().findCorrespondingFile(ConnectionHelper.getDataProvider(columnSet));
      modelElement=ConnectionHelper.getDataProvider(columnSet);
    }
  }
  if (modelElement != null && resourceFile != null) {
    String titleMessage=DefaultMessagesImpl.getString(""String_Node_Str"");
    int showDialog=DeleteModelElementConfirmDialog.showElementImpactDialog(null,new ModelElement[]{modelElement},titleMessage,titleMessage);
    if (showDialog == Window.OK) {
      EObjectHelper.removeDependencys(new IResource[]{resourceFile});
    }
 else {
      return;
    }
  }
  int diffItemsCount=((ModelCompareInput)getInput()).getDiffAsList().size();
  try {
    super.copy(leftToRight);
    ModelCompareInput modelCompareInput=(ModelCompareInput)getInput();
    if (!leftToRight && modelCompareInput.getDiffAsList().size() == 0) {
      Resource leftResource=modelCompareInput.getLeftResource();
      XmiResourceManager resourceManager=ProxyRepositoryFactory.getInstance().getRepositoryFactoryFromProvider().getResourceManager();
      resourceManager.saveResource(leftResource);
      final MatchModel match=(MatchModel)modelCompareInput.getMatch();
      match.getUnmatchedElements().clear();
      final ComparisonResourceSnapshot snap=DiffFactory.eINSTANCE.createComparisonResourceSnapshot();
      snap.setDiff((DiffModel)((ModelCompareInput)getInput()).getDiff());
      snap.setMatch((MatchModel)((ModelCompareInput)getInput()).getMatch());
      configuration.setProperty(EMFCompareConstants.PROPERTY_CONTENT_INPUT_CHANGED,snap);
    }
    if (!leftToRight && diffItemsCount > 0) {
      if (selectedOjbect instanceof RepositoryViewObject) {
        new ReloadDatabaseAction(((RepositoryViewObject)selectedOjbect).getRepositoryNode(),null).run();
      }
 else {
        new ReloadDatabaseAction(selectedOjbect,null).run();
      }
    }
  }
 catch (  Throwable e) {
    log.error(e.getMessage(),e);
  }
}",0.9840848806366048
138285,"@Override protected Connection findDataProvider(){
  Assert.isTrue(selectedObj instanceof IRepositoryViewObject,this.selectedObj + ""String_Node_Str"");
  Connection returnValue=null;
  ModelElement modelElement=PropertyHelper.retrieveElement(((IRepositoryViewObject)selectedObj).getProperty().getItem());
  if (modelElement instanceof Connection) {
    returnValue=(Connection)modelElement;
  }
  return returnValue;
}","@Override protected Connection findDataProvider(){
  Assert.isTrue(selectedObj instanceof IRepositoryViewObject,this.selectedObj + ""String_Node_Str"");
  Connection returnValue=null;
  ModelElement modelElement=PropertyHelper.getModelElement(((IRepositoryViewObject)selectedObj).getProperty());
  if (modelElement instanceof Connection) {
    returnValue=(Connection)modelElement;
  }
  return returnValue;
}",0.9684466019417476
138286,"@Override protected boolean isValid(){
  ModelElement modelElement=PropertyHelper.retrieveElement(((IRepositoryViewObject)selectedObj).getProperty().getItem());
  return modelElement instanceof Connection;
}","@Override protected boolean isValid(){
  ModelElement modelElement=PropertyHelper.getModelElement(((IRepositoryViewObject)selectedObj).getProperty());
  return modelElement instanceof Connection;
}",0.9504950495049505
138287,"/** 
 * DOC bZhou Comment method ""getProperty"".
 * @param element
 * @return property or null
 */
public static Property getProperty(ModelElement element){
  if (element != null && element.eIsProxy()) {
    element=(ModelElement)EObjectHelper.resolveObject(element);
  }
  URI uri=element.eResource() == null ? null : element.eResource().getURI();
  if (uri != null) {
    if (uri.isPlatform()) {
      IFile propertyFile=PropertyHelper.getPropertyFile(element);
      return getProperty(propertyFile);
    }
 else {
      File file=new Path(uri.toFileString()).removeFileExtension().addFileExtension(FactoriesUtil.PROPERTIES_EXTENSION).toFile();
      return getProperty(file);
    }
  }
  return null;
}","/** 
 * DOC bZhou Comment method ""getProperty"".
 * @param element
 * @return property or null
 */
public static Property getProperty(ModelElement element){
  URI uri=element.eResource() == null ? null : element.eResource().getURI();
  if (uri != null) {
    if (uri.isPlatform()) {
      IFile propertyFile=PropertyHelper.getPropertyFile(element);
      return getProperty(propertyFile);
    }
 else {
      File file=new Path(uri.toFileString()).removeFileExtension().addFileExtension(FactoriesUtil.PROPERTIES_EXTENSION).toFile();
      return getProperty(file);
    }
  }
  return null;
}",0.9111969111969112
138288,"@Override public boolean select(Viewer viewer,Object parentElement,Object element){
  if (element instanceof DBConnectionRepNode) {
    DBConnectionRepNode node=(DBConnectionRepNode)element;
    Integer selectIndex=metadataFormPage.getConnCombo().getSelectionIndex();
    Integer connectionIndex=null;
    ModelElement modelelement=PropertyHelper.retrieveElement((node.getObject()).getProperty().getItem());
    Object value=metadataFormPage.getConnCombo().getData(modelelement == null ? ""String_Node_Str"" : modelelement.getName());
    if (value != null && value instanceof Integer) {
      connectionIndex=(Integer)value;
    }
    return (connectionIndex != null && selectIndex.intValue() == connectionIndex.intValue());
  }
  return true;
}","@Override public boolean select(Viewer viewer,Object parentElement,Object element){
  if (element instanceof DBConnectionRepNode) {
    DBConnectionRepNode node=(DBConnectionRepNode)element;
    Integer selectIndex=metadataFormPage.getConnCombo().getSelectionIndex();
    Integer connectionIndex=null;
    ModelElement modelelement=PropertyHelper.getModelElement((node.getObject()).getProperty());
    Object value=metadataFormPage.getConnCombo().getData(modelelement == null ? ""String_Node_Str"" : modelelement.getName());
    if (value != null && value instanceof Integer) {
      connectionIndex=(Integer)value;
    }
    return (connectionIndex != null && selectIndex.intValue() == connectionIndex.intValue());
  }
  return true;
}",0.9824086603518268
138289,"/** 
 * DOC mzhao 2009-05-05 bug: 6587, Add connection metadata filter.
 */
private void addConnFilterListener(){
  AbstractViewerFilter connFiler=new AbstractViewerFilter(){
    @Override public int getId(){
      return 0;
    }
    @Override public boolean select(    Viewer viewer,    Object parentElement,    Object element){
      if (element instanceof DBConnectionRepNode) {
        DBConnectionRepNode node=(DBConnectionRepNode)element;
        Integer selectIndex=metadataFormPage.getConnCombo().getSelectionIndex();
        Integer connectionIndex=null;
        ModelElement modelelement=PropertyHelper.retrieveElement((node.getObject()).getProperty().getItem());
        Object value=metadataFormPage.getConnCombo().getData(modelelement == null ? ""String_Node_Str"" : modelelement.getName());
        if (value != null && value instanceof Integer) {
          connectionIndex=(Integer)value;
        }
        return (connectionIndex != null && selectIndex.intValue() == connectionIndex.intValue());
      }
      return true;
    }
  }
;
  addFilter(connFiler);
}","/** 
 * DOC mzhao 2009-05-05 bug: 6587, Add connection metadata filter.
 */
private void addConnFilterListener(){
  AbstractViewerFilter connFiler=new AbstractViewerFilter(){
    @Override public int getId(){
      return 0;
    }
    @Override public boolean select(    Viewer viewer,    Object parentElement,    Object element){
      if (element instanceof DBConnectionRepNode) {
        DBConnectionRepNode node=(DBConnectionRepNode)element;
        Integer selectIndex=metadataFormPage.getConnCombo().getSelectionIndex();
        Integer connectionIndex=null;
        ModelElement modelelement=PropertyHelper.getModelElement((node.getObject()).getProperty());
        Object value=metadataFormPage.getConnCombo().getData(modelelement == null ? ""String_Node_Str"" : modelelement.getName());
        if (value != null && value instanceof Integer) {
          connectionIndex=(Integer)value;
        }
        return (connectionIndex != null && selectIndex.intValue() == connectionIndex.intValue());
      }
      return true;
    }
  }
;
  addFilter(connFiler);
}",0.9878504672897196
138290,"/** 
 * check that directory exist and issue an error message if not. <br> check that the folder is a data quality repository or issue an error.<br> check that anything is check in the tree or issue an error.<br>
 */
private void checkforErrors(){
  List<String> dErrors=new ArrayList<String>();
  if (repositoryTree.getTree().getItems().length == 0) {
    dErrors.add(Messages.getString(""String_Node_Str""));
  }
  if (repositoryTree.getCheckedElements().length == 0) {
    dErrors.add(Messages.getString(""String_Node_Str""));
  }
  dErrors.addAll(writer.check());
  ItemRecord[] elements=getElements();
  for (  ItemRecord record : elements) {
    for (    File depFile : record.getDependencyMap().keySet()) {
      ModelElement element=record.getDependencyMap().get(depFile);
      ItemRecord findRecord=ItemRecord.findRecord(depFile);
      if (findRecord == null || !repositoryTree.getChecked(findRecord)) {
        dErrors.add(""String_Node_Str"" + record.getName() + ""String_Node_Str""+ element.getName());
      }
    }
  }
  if (!dErrors.isEmpty()) {
    setErrorMessage(dErrors.get(0));
  }
 else {
    setErrorMessage(null);
  }
  updatePageStatus();
}","/** 
 * check that directory exist and issue an error message if not. <br> check that the folder is a data quality repository or issue an error.<br> check that anything is check in the tree or issue an error.<br>
 */
private void checkforErrors(){
  List<String> dErrors=new ArrayList<String>();
  if (repositoryTree.getTree().getItems().length == 0) {
    dErrors.add(Messages.getString(""String_Node_Str""));
  }
  if (repositoryTree.getCheckedElements().length == 0) {
    dErrors.add(Messages.getString(""String_Node_Str""));
  }
  dErrors.addAll(writer.check());
  ItemRecord[] elements=getElements();
  for (  ItemRecord record : elements) {
    for (    File depFile : record.getDependencyMap().keySet()) {
      ModelElement element=record.getDependencyMap().get(depFile);
      ItemRecord findRecord=ItemRecord.findRecord(depFile);
      String dptLabel=element != null ? element.getName() : depFile.getName();
      if (findRecord == null || !repositoryTree.getChecked(findRecord)) {
        dErrors.add(""String_Node_Str"" + record.getName() + ""String_Node_Str""+ dptLabel);
      }
    }
  }
  if (!dErrors.isEmpty()) {
    setErrorMessage(dErrors.get(0));
  }
 else {
    setErrorMessage(null);
  }
  updatePageStatus();
}",0.956412405699916
138291,"/** 
 * DOC bZhou Comment method ""update"".
 * @param desFile
 * @param isCovered
 * @throws IOException
 * @throws CoreException
 * @throws Exception
 */
private void update(File desFile,boolean isCovered) throws IOException, CoreException {
  String curProjectLabel=ResourceManager.getRootProjectName();
  if (!StringUtils.equals(projectName,curProjectLabel)) {
    String content=FileUtils.readFileToString(desFile,""String_Node_Str"");
    content=StringUtils.replace(content,""String_Node_Str"" + projectName + ""String_Node_Str"",""String_Node_Str"" + curProjectLabel + ""String_Node_Str"");
    FileUtils.writeStringToFile(desFile,content,""String_Node_Str"");
  }
  if (desFile.exists()) {
    IFile desIFile=ResourceService.file2IFile(desFile);
    if (isCovered) {
      URI uri=URI.createPlatformResourceURI(desIFile.getFullPath().toString(),false);
      EMFSharedResources.getInstance().reloadResource(uri);
    }
    String fileExtension=desIFile.getFileExtension();
    if (fileExtension.equals(FactoriesUtil.PROPERTIES_EXTENSION)) {
      Property property=PropertyHelper.getProperty(desIFile);
      if (property != null) {
        User user=ReponsitoryContextBridge.getUser();
        if (user != null && property.getAuthor() == null) {
          property.setAuthor(user);
          EMFSharedResources.getInstance().saveResource(property.eResource());
        }
        if (log.isDebugEnabled()) {
          log.debug(""String_Node_Str"" + desIFile + ""String_Node_Str""+ property.getLabel());
        }
      }
 else {
        log.error(""String_Node_Str"" + desIFile.getFullPath().toString());
      }
    }
  }
}","/** 
 * DOC bZhou Comment method ""update"".
 * @param desFile
 * @param isCovered
 * @throws IOException
 * @throws CoreException
 * @throws Exception
 */
private void update(File desFile,boolean isCovered) throws IOException, CoreException {
  String curProjectLabel=ResourceManager.getRootProjectName();
  if (!StringUtils.equals(projectName,curProjectLabel)) {
    String content=FileUtils.readFileToString(desFile,""String_Node_Str"");
    content=StringUtils.replace(content,""String_Node_Str"" + projectName + ""String_Node_Str"",""String_Node_Str"" + curProjectLabel + ""String_Node_Str"");
    FileUtils.writeStringToFile(desFile,content,""String_Node_Str"");
  }
  if (desFile.exists()) {
    IFile desIFile=ResourceService.file2IFile(desFile);
    if (isCovered && FactoriesUtil.isEmfFile(desIFile.getFileExtension())) {
      URI uri=URI.createPlatformResourceURI(desIFile.getFullPath().toString(),false);
      EMFSharedResources.getInstance().reloadResource(uri);
    }
    String fileExtension=desIFile.getFileExtension();
    if (fileExtension.equals(FactoriesUtil.PROPERTIES_EXTENSION)) {
      Property property=PropertyHelper.getProperty(desIFile);
      if (property != null) {
        User user=ReponsitoryContextBridge.getUser();
        if (user != null && property.getAuthor() == null) {
          property.setAuthor(user);
          EMFSharedResources.getInstance().saveResource(property.eResource());
        }
        if (log.isDebugEnabled()) {
          log.debug(""String_Node_Str"" + desIFile + ""String_Node_Str""+ property.getLabel());
        }
      }
 else {
        log.error(""String_Node_Str"" + desIFile.getFullPath().toString());
      }
    }
  }
}",0.9829476248477468
138292,"public ItemRecord[] populate(ItemRecord[] elements,boolean checkExisted){
  List<ItemRecord> inValidRecords=new ArrayList<ItemRecord>();
  for (  ItemRecord record : elements) {
    record.getErrors().clear();
    checkDependency(record);
    if (checkExisted) {
      checkExisted(record);
      checkConflict(record);
    }
    if (!record.isValid()) {
      inValidRecords.add(record);
    }
  }
  return inValidRecords.toArray(new ItemRecord[inValidRecords.size()]);
}","public ItemRecord[] populate(ItemRecord[] elements,boolean checkExisted){
  List<ItemRecord> inValidRecords=new ArrayList<ItemRecord>();
  for (  ItemRecord record : elements) {
    record.getErrors().clear();
    checkDependency(record);
    if (checkExisted) {
      checkExisted(record);
    }
    if (!record.isValid()) {
      inValidRecords.add(record);
    }
  }
  return inValidRecords.toArray(new ItemRecord[inValidRecords.size()]);
}",0.73224043715847
138293,"/** 
 * DOC bZhou Comment method ""checkExisted"".
 * @param record
 */
private void checkExisted(ItemRecord record){
  Property property=record.getProperty();
  if (property != null) {
    IPath itemPath=PropertyHelper.getItemPath(property);
    if (itemPath != null) {
      IFile itemFile=ResourcesPlugin.getWorkspace().getRoot().getFile(itemPath);
      if (itemFile.exists()) {
        record.addError(""String_Node_Str"" + record.getName() + ""String_Node_Str""+ itemFile.getFullPath().toString());
      }
    }
 else {
      record.addError(""String_Node_Str"" + record.getName() + ""String_Node_Str"");
    }
  }
}","/** 
 * DOC bZhou Comment method ""checkExisted"".
 * @param record
 */
private void checkExisted(ItemRecord record){
  Property property=record.getProperty();
  if (property != null) {
    IPath itemPath=PropertyHelper.getItemPath(property);
    if (itemPath != null) {
      IFile itemFile=ResourcesPlugin.getWorkspace().getRoot().getFile(itemPath);
      if (itemFile.exists()) {
        record.addError(""String_Node_Str"" + record.getName() + ""String_Node_Str""+ itemFile.getFullPath().toString());
      }
 else {
        checkConflict(record);
      }
    }
 else {
      record.addError(""String_Node_Str"" + record.getName() + ""String_Node_Str"");
    }
  }
}",0.9630793401413984
138294,"/** 
 * DOC bZhou Comment method ""changePerspective"".
 * @param perspectiveID
 */
public static void changePerspective(String perspectiveID){
  IWorkbenchWindow activeWindow=PlatformUI.getWorkbench().getActiveWorkbenchWindow();
  try {
    PlatformUI.getWorkbench().showPerspective(perspectiveID,activeWindow);
  }
 catch (  WorkbenchException e) {
    log.error(e.getMessage(),e);
  }
}","/** 
 * DOC bZhou Comment method ""changePerspective"".
 * @param perspectiveID
 */
public static void changePerspective(final String perspectiveID){
  Display.getCurrent().asyncExec(new Runnable(){
    public void run(){
      IWorkbenchWindow activeWindow=PlatformUI.getWorkbench().getActiveWorkbenchWindow();
      try {
        PlatformUI.getWorkbench().showPerspective(perspectiveID,activeWindow);
      }
 catch (      WorkbenchException e) {
        log.error(e.getMessage(),e);
      }
    }
  }
);
}",0.8667413213885778
138295,"public static void autoChange2DataProfilerPerspective(){
  if (!AUTO_CHANGE2DATA_PROFILER) {
    return;
  }
  try {
    IPerspectiveDescriptor perspective=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().getPerspective();
    if (!PluginConstant.PERSPECTIVE_ID.equals(perspective.getId())) {
      int autoChange=ResourcesPlugin.getPlugin().getPluginPreferences().getInt(PluginConstant.AUTO_CHANGE2DATA_PROFILER);
switch (autoChange) {
case AUTO_CHANGE2DATA_PROFILER_TRUE:
        Thread.sleep(SLEEP_TIME_MILLIS);
      changePerspective(PluginConstant.PERSPECTIVE_ID);
    break;
case AUTO_CHANGE2DATA_PROFILER_FALSE:
  break;
default :
if (MessageUI.openYesNoQuestion(DefaultMessagesImpl.getString(""String_Node_Str""))) {
  ResourcesPlugin.getPlugin().getPluginPreferences().setValue(PluginConstant.AUTO_CHANGE2DATA_PROFILER,AUTO_CHANGE2DATA_PROFILER_TRUE);
  Thread.sleep(SLEEP_TIME_MILLIS);
  changePerspective(PluginConstant.PERSPECTIVE_ID);
}
 else {
  ResourcesPlugin.getPlugin().getPluginPreferences().setValue(PluginConstant.AUTO_CHANGE2DATA_PROFILER,AUTO_CHANGE2DATA_PROFILER_FALSE);
}
}
}
}
 catch (Throwable t) {
log.warn(t,t);
}
}","public static void autoChange2DataProfilerPerspective(){
  if (!AUTO_CHANGE2DATA_PROFILER) {
    return;
  }
  try {
    IPerspectiveDescriptor perspective=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().getPerspective();
    if (!PluginConstant.PERSPECTIVE_ID.equals(perspective.getId())) {
      int autoChange=ResourcesPlugin.getPlugin().getPluginPreferences().getInt(PluginConstant.AUTO_CHANGE2DATA_PROFILER);
switch (autoChange) {
case AUTO_CHANGE2DATA_PROFILER_TRUE:
        changePerspective(PluginConstant.PERSPECTIVE_ID);
      break;
case AUTO_CHANGE2DATA_PROFILER_FALSE:
    break;
default :
  if (MessageUI.openYesNoQuestion(DefaultMessagesImpl.getString(""String_Node_Str""))) {
    ResourcesPlugin.getPlugin().getPluginPreferences().setValue(PluginConstant.AUTO_CHANGE2DATA_PROFILER,AUTO_CHANGE2DATA_PROFILER_TRUE);
    changePerspective(PluginConstant.PERSPECTIVE_ID);
  }
 else {
    ResourcesPlugin.getPlugin().getPluginPreferences().setValue(PluginConstant.AUTO_CHANGE2DATA_PROFILER,AUTO_CHANGE2DATA_PROFILER_FALSE);
  }
}
}
}
 catch (Throwable t) {
log.warn(t,t);
}
}",0.8844797178130511
138296,"/** 
 * @param catalogName (can be null)
 * @param connection
 * @param queryStmt
 * @return
 * @throws SQLException
 */
protected List<Object[]> executeQuery(String catalogName,Connection connection,String queryStmt) throws SQLException {
  if (catalogName != null) {
    changeCatalog(catalogName,connection);
  }
  Statement statement=connection.createStatement();
  if (log.isInfoEnabled()) {
    log.info(Messages.getString(""String_Node_Str"",queryStmt));
  }
  if (continueRun()) {
    statement.execute(queryStmt);
  }
  ResultSet resultSet=statement.getResultSet();
  if (resultSet == null) {
    String mess=Messages.getString(""String_Node_Str"") + queryStmt;
    log.warn(mess);
    return null;
  }
  ResultSetMetaData metaData=resultSet.getMetaData();
  int columnCount=metaData.getColumnCount();
  List<Object[]> myResultSet=new ArrayList<Object[]>();
  while (resultSet.next()) {
    Object[] result=new Object[columnCount];
    for (int i=0; i < columnCount; i++) {
      result[i]=resultSet.getObject(i + 1);
    }
    myResultSet.add(result);
  }
  resultSet.close();
  statement.close();
  return myResultSet;
}","/** 
 * @param catalogName (can be null)
 * @param connection
 * @param queryStmt
 * @return
 * @throws SQLException
 */
protected List<Object[]> executeQuery(String catalogName,Connection connection,String queryStmt) throws SQLException {
  if (catalogName != null) {
    changeCatalog(catalogName,connection);
  }
  Statement statement=connection.createStatement();
  if (log.isInfoEnabled()) {
    log.info(Messages.getString(""String_Node_Str"",queryStmt));
  }
  if (continueRun()) {
    statement.execute(queryStmt);
  }
  ResultSet resultSet=statement.getResultSet();
  if (resultSet == null) {
    String mess=Messages.getString(""String_Node_Str"") + queryStmt;
    log.warn(mess);
    return null;
  }
  ResultSetMetaData metaData=resultSet.getMetaData();
  int columnCount=metaData.getColumnCount();
  List<Object[]> myResultSet=new ArrayList<Object[]>();
  while (resultSet.next()) {
    Object[] result=new Object[columnCount];
    for (int i=0; i < columnCount; i++) {
      result[i]=resultSet.getObject(i + 1);
    }
    myResultSet.add(result);
  }
  resultSet.close();
  statement.close();
  connection.close();
  return myResultSet;
}",0.9903339191564148
138297,"/** 
 * @param catalogName (can be null)
 * @param connection
 * @param queryStmt
 * @return
 * @throws SQLException
 */
protected List<Object[]> executeQuery(String catalogName,Connection connection,String queryStmt) throws SQLException {
  if (catalogName != null) {
    changeCatalog(catalogName,connection);
  }
  Statement statement=connection.createStatement();
  if (log.isInfoEnabled()) {
    log.info(Messages.getString(""String_Node_Str"",queryStmt));
  }
  if (continueRun()) {
    statement.execute(queryStmt);
  }
  ResultSet resultSet=statement.getResultSet();
  if (resultSet == null) {
    String mess=Messages.getString(""String_Node_Str"") + queryStmt;
    log.warn(mess);
    return null;
  }
  ResultSetMetaData metaData=resultSet.getMetaData();
  int columnCount=metaData.getColumnCount();
  List<Object[]> myResultSet=new ArrayList<Object[]>();
  while (resultSet.next()) {
    Object[] result=new Object[columnCount];
    for (int i=0; i < columnCount; i++) {
      result[i]=resultSet.getObject(i + 1);
    }
    myResultSet.add(result);
  }
  resultSet.close();
  statement.close();
  connection.close();
  return myResultSet;
}","/** 
 * @param catalogName (can be null)
 * @param connection
 * @param queryStmt
 * @return
 * @throws SQLException
 */
protected List<Object[]> executeQuery(String catalogName,Connection connection,String queryStmt) throws SQLException {
  if (catalogName != null) {
    changeCatalog(catalogName,connection);
  }
  Statement statement=connection.createStatement();
  if (log.isInfoEnabled()) {
    log.info(Messages.getString(""String_Node_Str"",queryStmt));
  }
  if (continueRun()) {
    statement.execute(queryStmt);
  }
  ResultSet resultSet=statement.getResultSet();
  if (resultSet == null) {
    String mess=Messages.getString(""String_Node_Str"") + queryStmt;
    log.warn(mess);
    return null;
  }
  ResultSetMetaData metaData=resultSet.getMetaData();
  int columnCount=metaData.getColumnCount();
  List<Object[]> myResultSet=new ArrayList<Object[]>();
  while (resultSet.next()) {
    Object[] result=new Object[columnCount];
    for (int i=0; i < columnCount; i++) {
      result[i]=resultSet.getObject(i + 1);
    }
    myResultSet.add(result);
  }
  resultSet.close();
  statement.close();
  return myResultSet;
}",0.9903339191564148
138298,"public void run(){
  try {
    if (indicator instanceof CompositeIndicator) {
      return;
    }
synchronized (schemata) {
      String catalogName=getCatalogOrSchemaName(indicator.getAnalyzedElement());
      if (catalogName != null) {
        changeCatalog(catalogName,connection);
      }
    }
    Expression query=dbms().getInstantiatedExpression(indicator);
    if (query == null || !executeQuery(indicator,connection,query.getBody())) {
      ok=traceError(""String_Node_Str"" + indicator.getName() + ""String_Node_Str""+ ((query == null) ? ""String_Node_Str"" : ""String_Node_Str"" + query.getBody()));
    }
 else {
      indicator.setComputed(true);
    }
synchronized (elementToIndicator) {
      MultiMapHelper.addUniqueObjectToListMap(indicator.getAnalyzedElement(),indicator,elementToIndicator);
    }
  }
 catch (  SQLException e) {
    this.setException(e);
  }
}","public void run(){
  try {
    if (indicator instanceof CompositeIndicator) {
      return;
    }
synchronized (schemata) {
      String catalogName=getCatalogOrSchemaName(indicator.getAnalyzedElement());
      if (catalogName != null) {
        changeCatalog(catalogName,connection);
      }
    }
    Expression query=dbms().getInstantiatedExpression(indicator);
    if (query == null || !executeQuery(indicator,connection,query.getBody())) {
      ok=traceError(""String_Node_Str"" + indicator.getName() + ""String_Node_Str""+ ((query == null) ? ""String_Node_Str"" : ""String_Node_Str"" + query.getBody()));
    }
 else {
      indicator.setComputed(true);
    }
synchronized (elementToIndicator) {
      MultiMapHelper.addUniqueObjectToListMap(indicator.getAnalyzedElement(),indicator,elementToIndicator);
    }
  }
 catch (  SQLException e) {
    this.setException(e);
  }
 finally {
    try {
      if (connection != null && !connection.isClosed()) {
        connection.close();
      }
    }
 catch (    SQLException e) {
      this.setException(e);
    }
  }
}",0.901189860320745
138299,"public static void export(File exportFile,IFolder folder,IndicatorDefinition... indicatorDefinitions){
  if (exportFile.isDirectory()) {
    for (    IndicatorDefinition id : indicatorDefinitions) {
      File file=new File(exportFile,id.getName() + ""String_Node_Str"");
      export(file,folder,id);
    }
  }
  String fileExtName=getFileExtName(exportFile);
  if (""String_Node_Str"".equalsIgnoreCase(fileExtName)) {
    try {
      CsvWriter out=new CsvWriter(new FileOutputStream(exportFile),CURRENT_SEPARATOR,Charset.defaultCharset());
      out.setEscapeMode(ESCAPE_MODE_BACKSLASH);
      out.setTextQualifier(TEXT_QUAL);
      out.setForceQualifier(USE_TEXT_QUAL);
      PatternToExcelEnum[] values=PatternToExcelEnum.values();
      String[] temp=new String[values.length];
      for (int i=0; i < indicatorDefinitions.length + 1; i++) {
        for (int j=0; j < values.length; j++) {
          if (i == 0) {
            temp[j]=values[j].getLiteral();
          }
 else {
            temp[j]=getRelatedValueFromIndicatorDefinition(indicatorDefinitions[i - 1],folder).get(values[j]);
          }
        }
        out.writeRecord(temp);
      }
      out.flush();
      out.close();
    }
 catch (    FileNotFoundException fe) {
      MessageDialogWithToggle.openError(null,DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str""));
    }
catch (    Exception e) {
      log.error(e.getMessage());
    }
  }
}","public static void export(File exportFile,IFolder folder,IndicatorDefinition... indicatorDefinitions){
  if (exportFile.isDirectory()) {
    for (    IndicatorDefinition id : indicatorDefinitions) {
      File file=new File(exportFile,id.getName() + ""String_Node_Str"");
      export(file,folder,id);
    }
  }
  String fileExtName=getFileExtName(exportFile);
  if (""String_Node_Str"".equalsIgnoreCase(fileExtName)) {
    try {
      CsvWriter out=new CsvWriter(new FileOutputStream(exportFile),CURRENT_SEPARATOR,Charset.defaultCharset());
      out.setEscapeMode(CsvWriter.ESCAPE_MODE_DOUBLED);
      out.setTextQualifier(TEXT_QUAL);
      out.setForceQualifier(USE_TEXT_QUAL);
      PatternToExcelEnum[] values=PatternToExcelEnum.values();
      String[] temp=new String[values.length];
      for (int i=0; i < indicatorDefinitions.length + 1; i++) {
        for (int j=0; j < values.length; j++) {
          if (i == 0) {
            temp[j]=values[j].getLiteral();
          }
 else {
            temp[j]=getRelatedValueFromIndicatorDefinition(indicatorDefinitions[i - 1],folder).get(values[j]);
          }
        }
        out.writeRecord(temp);
      }
      out.flush();
      out.close();
    }
 catch (    FileNotFoundException fe) {
      MessageDialogWithToggle.openError(null,DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str""));
    }
catch (    Exception e) {
      log.error(e.getMessage());
    }
  }
}",0.9924657534246576
138300,"/** 
 * DOC xqliu Comment method ""importIndicatorToStucture"".
 * @param importFile
 * @param selectionFolder
 * @param skip
 * @param rename
 * @return
 */
public static List<ReturnCode> importIndicatorToStucture(File importFile,IFolder selectionFolder,boolean skip,boolean rename){
  List<ReturnCode> information=new ArrayList<ReturnCode>();
  Set<String> names=UDIHelper.getAllIndicatorNames(selectionFolder);
  String fileExtName=getFileExtName(importFile);
  if (""String_Node_Str"".equalsIgnoreCase(fileExtName)) {
    String name=""String_Node_Str"";
    try {
      CsvReader reader=new CsvReader(new FileReader(importFile),CURRENT_SEPARATOR);
      reader.setEscapeMode(ESCAPE_MODE_BACKSLASH);
      reader.setTextQualifier(TEXT_QUAL);
      reader.setUseTextQualifier(USE_TEXT_QUAL);
      reader.readHeaders();
      java.text.SimpleDateFormat simpleDateFormat=new java.text.SimpleDateFormat(""String_Node_Str"");
      while (reader.readRecord()) {
        name=reader.get(PatternToExcelEnum.Label.getLiteral());
        if (names.contains(name)) {
          if (skip) {
            information.add(new ReturnCode(DefaultMessagesImpl.getString(""String_Node_Str"") + name,false));
            continue;
          }
          if (rename) {
            name=name + ""String_Node_Str"" + simpleDateFormat.format(new Date())+ Math.random()+ ""String_Node_Str"";
          }
        }
        UDIParameters udiParameters=new ImportFactory().new UDIParameters();
        udiParameters.name=name;
        udiParameters.auther=reader.get(PatternToExcelEnum.Author.getLiteral());
        udiParameters.description=reader.get(PatternToExcelEnum.Description.getLiteral());
        udiParameters.purpose=reader.get(PatternToExcelEnum.Purpose.getLiteral());
        udiParameters.relativePath=reader.get(PatternToExcelEnum.RelativePath.getLiteral());
        udiParameters.category=reader.get(PatternToExcelEnum.Category.getLiteral());
        udiParameters.javaClassName=reader.get(PatternToExcelEnum.JavaClassName.getLiteral());
        udiParameters.javaJarPath=reader.get(PatternToExcelEnum.JavaJarPath.getLiteral());
        for (        PatternLanguageType languagetype : PatternLanguageType.values()) {
          String cellStr=reader.get(languagetype.getExcelEnum().getLiteral());
          if (cellStr != null && !cellStr.equals(""String_Node_Str"")) {
            udiParameters.regex.put(languagetype.getLiteral(),cellStr);
          }
        }
        createAndStoreUDI(udiParameters,selectionFolder);
        names.add(name);
        information.add(new ReturnCode(DefaultMessagesImpl.getString(""String_Node_Str"") + name,true));
      }
      reader.close();
    }
 catch (    Exception e) {
      log.error(e,e);
      information.add(new ReturnCode(DefaultMessagesImpl.getString(""String_Node_Str"") + name,false));
    }
  }
  if (""String_Node_Str"".equalsIgnoreCase(fileExtName)) {
    Map<Integer,PatternLanguageType> expressionMap=new HashMap<Integer,PatternLanguageType>();
    try {
      WorkbookSettings settings=new WorkbookSettings();
      settings.setEncoding(""String_Node_Str"");
      Workbook rwb=Workbook.getWorkbook(importFile,settings);
      Sheet[] sheets=rwb.getSheets();
      for (      Sheet sheet : sheets) {
        Cell[] headerRow=sheet.getRow(0);
        for (        Cell cell : headerRow) {
          for (          PatternLanguageType languageType : PatternLanguageType.values()) {
            if (cell.getContents().equals(languageType.getExcelEnum().getLiteral())) {
              expressionMap.put(cell.getColumn(),languageType);
            }
          }
        }
        for (int i=1; i < sheet.getRows(); i++) {
          Cell[] row=sheet.getRow(i);
          Cell cell=row[0];
          if (CellType.LABEL.equals(cell.getType())) {
            String contents=cell.getContents();
            if (names.contains(contents)) {
              if (skip) {
                continue;
              }
              if (rename) {
                contents=contents + ""String_Node_Str"" + new Date()+ ""String_Node_Str"";
              }
            }
            UDIParameters udiParameters=new ImportFactory().new UDIParameters();
            udiParameters.name=contents;
            udiParameters.auther=row[6].getContents();
            udiParameters.description=row[2].getContents();
            udiParameters.purpose=row[1].getContents();
            udiParameters.status=DevelopmentStatus.DRAFT.getLiteral();
            udiParameters.category=row[16].getContents();
            for (            int columnIndex : expressionMap.keySet()) {
              String rowContent=row[columnIndex].getContents();
              if (!rowContent.equals(""String_Node_Str"")) {
                udiParameters.regex.put(expressionMap.get(columnIndex).getLiteral(),rowContent);
              }
            }
            createAndStoreUDI(udiParameters,selectionFolder);
            names.add(contents);
          }
        }
      }
      rwb.close();
    }
 catch (    BiffException e) {
      log.error(e,e);
    }
catch (    IOException e) {
      log.error(e,e);
    }
  }
  return information;
}","/** 
 * DOC xqliu Comment method ""importIndicatorToStucture"".
 * @param importFile
 * @param selectionFolder
 * @param skip
 * @param rename
 * @return
 */
public static List<ReturnCode> importIndicatorToStucture(File importFile,IFolder selectionFolder,boolean skip,boolean rename){
  List<ReturnCode> information=new ArrayList<ReturnCode>();
  Set<String> names=UDIHelper.getAllIndicatorNames(selectionFolder);
  String fileExtName=getFileExtName(importFile);
  if (""String_Node_Str"".equalsIgnoreCase(fileExtName)) {
    String name=""String_Node_Str"";
    try {
      CsvReader reader=new CsvReader(new FileReader(importFile),CURRENT_SEPARATOR);
      reader.setEscapeMode(CsvReader.ESCAPE_MODE_DOUBLED);
      reader.setTextQualifier(TEXT_QUAL);
      reader.setUseTextQualifier(USE_TEXT_QUAL);
      reader.readHeaders();
      java.text.SimpleDateFormat simpleDateFormat=new java.text.SimpleDateFormat(""String_Node_Str"");
      while (reader.readRecord()) {
        name=reader.get(PatternToExcelEnum.Label.getLiteral());
        if (names.contains(name)) {
          if (skip) {
            information.add(new ReturnCode(DefaultMessagesImpl.getString(""String_Node_Str"") + name,false));
            continue;
          }
          if (rename) {
            name=name + ""String_Node_Str"" + simpleDateFormat.format(new Date())+ Math.random()+ ""String_Node_Str"";
          }
        }
        UDIParameters udiParameters=new ImportFactory().new UDIParameters();
        udiParameters.name=name;
        udiParameters.auther=reader.get(PatternToExcelEnum.Author.getLiteral());
        udiParameters.description=reader.get(PatternToExcelEnum.Description.getLiteral());
        udiParameters.purpose=reader.get(PatternToExcelEnum.Purpose.getLiteral());
        udiParameters.relativePath=reader.get(PatternToExcelEnum.RelativePath.getLiteral());
        udiParameters.category=reader.get(PatternToExcelEnum.Category.getLiteral());
        udiParameters.javaClassName=reader.get(PatternToExcelEnum.JavaClassName.getLiteral());
        udiParameters.javaJarPath=reader.get(PatternToExcelEnum.JavaJarPath.getLiteral());
        for (        PatternLanguageType languagetype : PatternLanguageType.values()) {
          String cellStr=reader.get(languagetype.getExcelEnum().getLiteral());
          if (cellStr != null && !cellStr.equals(""String_Node_Str"")) {
            udiParameters.regex.put(languagetype.getLiteral(),cellStr);
          }
        }
        createAndStoreUDI(udiParameters,selectionFolder);
        names.add(name);
        information.add(new ReturnCode(DefaultMessagesImpl.getString(""String_Node_Str"") + name,true));
      }
      reader.close();
    }
 catch (    Exception e) {
      log.error(e,e);
      information.add(new ReturnCode(DefaultMessagesImpl.getString(""String_Node_Str"") + name,false));
    }
  }
  if (""String_Node_Str"".equalsIgnoreCase(fileExtName)) {
    Map<Integer,PatternLanguageType> expressionMap=new HashMap<Integer,PatternLanguageType>();
    try {
      WorkbookSettings settings=new WorkbookSettings();
      settings.setEncoding(""String_Node_Str"");
      Workbook rwb=Workbook.getWorkbook(importFile,settings);
      Sheet[] sheets=rwb.getSheets();
      for (      Sheet sheet : sheets) {
        Cell[] headerRow=sheet.getRow(0);
        for (        Cell cell : headerRow) {
          for (          PatternLanguageType languageType : PatternLanguageType.values()) {
            if (cell.getContents().equals(languageType.getExcelEnum().getLiteral())) {
              expressionMap.put(cell.getColumn(),languageType);
            }
          }
        }
        for (int i=1; i < sheet.getRows(); i++) {
          Cell[] row=sheet.getRow(i);
          Cell cell=row[0];
          if (CellType.LABEL.equals(cell.getType())) {
            String contents=cell.getContents();
            if (names.contains(contents)) {
              if (skip) {
                continue;
              }
              if (rename) {
                contents=contents + ""String_Node_Str"" + new Date()+ ""String_Node_Str"";
              }
            }
            UDIParameters udiParameters=new ImportFactory().new UDIParameters();
            udiParameters.name=contents;
            udiParameters.auther=row[6].getContents();
            udiParameters.description=row[2].getContents();
            udiParameters.purpose=row[1].getContents();
            udiParameters.status=DevelopmentStatus.DRAFT.getLiteral();
            udiParameters.category=row[16].getContents();
            for (            int columnIndex : expressionMap.keySet()) {
              String rowContent=row[columnIndex].getContents();
              if (!rowContent.equals(""String_Node_Str"")) {
                udiParameters.regex.put(expressionMap.get(columnIndex).getLiteral(),rowContent);
              }
            }
            createAndStoreUDI(udiParameters,selectionFolder);
            names.add(contents);
          }
        }
      }
      rwb.close();
    }
 catch (    BiffException e) {
      log.error(e,e);
    }
catch (    IOException e) {
      log.error(e,e);
    }
  }
  return information;
}",0.9978486211617446
138301,"public static List<ReturnCode> importToStucture(File importFile,IFolder selectionFolder,ExpressionType type,boolean skip,boolean rename){
  List<ReturnCode> importEvent=new ArrayList<ReturnCode>();
  Set<String> names=PatternUtilities.getNestFolderPatternNames(new HashSet<String>(),selectionFolder);
  String fileExtName=getFileExtName(importFile);
  if (""String_Node_Str"".equalsIgnoreCase(fileExtName)) {
    try {
      CsvReader reader=new CsvReader(new FileReader(importFile),CURRENT_SEPARATOR);
      reader.setEscapeMode(ESCAPE_MODE_BACKSLASH);
      reader.setTextQualifier(TEXT_QUAL);
      reader.setUseTextQualifier(USE_TEXT_QUAL);
      reader.readHeaders();
      while (reader.readRecord()) {
        String name=reader.get(PatternToExcelEnum.Label.getLiteral());
        if (names.contains(name)) {
          if (skip) {
            importEvent.add(new ReturnCode(DefaultMessagesImpl.getString(""String_Node_Str"",name),false));
            continue;
          }
          if (rename) {
            name=name + ""String_Node_Str"" + new Date()+ ""String_Node_Str"";
          }
        }
        PatternParameters patternParameters=new ImportFactory().new PatternParameters();
        patternParameters.name=name;
        patternParameters.auther=reader.get(PatternToExcelEnum.Author.getLiteral());
        patternParameters.description=reader.get(PatternToExcelEnum.Description.getLiteral());
        patternParameters.purpose=reader.get(PatternToExcelEnum.Purpose.getLiteral());
        patternParameters.relativePath=reader.get(PatternToExcelEnum.RelativePath.getLiteral());
        for (        PatternLanguageType languagetype : PatternLanguageType.values()) {
          String cellStr=reader.get(languagetype.getExcelEnum().getLiteral());
          if (cellStr != null && !cellStr.equals(""String_Node_Str"")) {
            patternParameters.regex.put(languagetype.getLiteral(),cellStr);
          }
        }
        try {
          String relativePath=""String_Node_Str"" + createAndStorePattern(patternParameters,selectionFolder,type);
          names.add(name);
          importEvent.add(new ReturnCode(DefaultMessagesImpl.getString(""String_Node_Str"",name,relativePath),true));
        }
 catch (        Exception e) {
          importEvent.add(new ReturnCode(DefaultMessagesImpl.getString(""String_Node_Str"") + name,false));
        }
      }
      reader.close();
    }
 catch (    Exception e) {
      log.error(e,e);
      importEvent.add(new ReturnCode(DefaultMessagesImpl.getString(""String_Node_Str""),false));
    }
  }
  if (""String_Node_Str"".equalsIgnoreCase(fileExtName)) {
    Map<Integer,PatternLanguageType> expressionMap=new HashMap<Integer,PatternLanguageType>();
    try {
      WorkbookSettings settings=new WorkbookSettings();
      settings.setEncoding(""String_Node_Str"");
      Workbook rwb=Workbook.getWorkbook(importFile,settings);
      Sheet[] sheets=rwb.getSheets();
      for (      Sheet sheet : sheets) {
        Cell[] headerRow=sheet.getRow(0);
        for (        Cell cell : headerRow) {
          for (          PatternLanguageType languageType : PatternLanguageType.values()) {
            if (cell.getContents().equals(languageType.getExcelEnum().getLiteral())) {
              expressionMap.put(cell.getColumn(),languageType);
            }
          }
        }
        for (int i=1; i < sheet.getRows(); i++) {
          Cell[] row=sheet.getRow(i);
          Cell cell=row[0];
          if (CellType.LABEL.equals(cell.getType())) {
            String contents=cell.getContents();
            if (names.contains(contents)) {
              if (skip) {
                importEvent.add(new ReturnCode(DefaultMessagesImpl.getString(""String_Node_Str"",contents),false));
                continue;
              }
              if (rename) {
                contents=contents + ""String_Node_Str"" + new Date()+ ""String_Node_Str"";
              }
            }
            PatternParameters patternParameters=new ImportFactory().new PatternParameters();
            patternParameters.name=contents;
            patternParameters.auther=row[6].getContents();
            patternParameters.description=row[2].getContents();
            patternParameters.purpose=row[1].getContents();
            patternParameters.status=DevelopmentStatus.DRAFT.getLiteral();
            for (            int columnIndex : expressionMap.keySet()) {
              String rowContent=row[columnIndex].getContents();
              if (!rowContent.equals(""String_Node_Str"")) {
                patternParameters.regex.put(expressionMap.get(columnIndex).getLiteral(),rowContent);
              }
            }
            String relativePath=""String_Node_Str"" + createAndStorePattern(patternParameters,selectionFolder,type);
            names.add(contents);
            importEvent.add(new ReturnCode(DefaultMessagesImpl.getString(""String_Node_Str"",contents,relativePath),true));
          }
        }
      }
      rwb.close();
    }
 catch (    BiffException e) {
      log.error(e,e);
      importEvent.add(new ReturnCode(DefaultMessagesImpl.getString(""String_Node_Str""),false));
    }
catch (    IOException e) {
      log.error(e,e);
      importEvent.add(new ReturnCode(DefaultMessagesImpl.getString(""String_Node_Str""),false));
    }
  }
  return importEvent;
}","public static List<ReturnCode> importToStucture(File importFile,IFolder selectionFolder,ExpressionType type,boolean skip,boolean rename){
  List<ReturnCode> importEvent=new ArrayList<ReturnCode>();
  Set<String> names=PatternUtilities.getNestFolderPatternNames(new HashSet<String>(),selectionFolder);
  String fileExtName=getFileExtName(importFile);
  if (""String_Node_Str"".equalsIgnoreCase(fileExtName)) {
    try {
      CsvReader reader=new CsvReader(new FileReader(importFile),CURRENT_SEPARATOR);
      reader.setEscapeMode(CsvReader.ESCAPE_MODE_DOUBLED);
      reader.setTextQualifier(TEXT_QUAL);
      reader.setUseTextQualifier(USE_TEXT_QUAL);
      reader.readHeaders();
      while (reader.readRecord()) {
        String name=reader.get(PatternToExcelEnum.Label.getLiteral());
        if (names.contains(name)) {
          if (skip) {
            importEvent.add(new ReturnCode(DefaultMessagesImpl.getString(""String_Node_Str"",name),false));
            continue;
          }
          if (rename) {
            name=name + ""String_Node_Str"" + new Date()+ ""String_Node_Str"";
          }
        }
        PatternParameters patternParameters=new ImportFactory().new PatternParameters();
        patternParameters.name=name;
        patternParameters.auther=reader.get(PatternToExcelEnum.Author.getLiteral());
        patternParameters.description=reader.get(PatternToExcelEnum.Description.getLiteral());
        patternParameters.purpose=reader.get(PatternToExcelEnum.Purpose.getLiteral());
        patternParameters.relativePath=reader.get(PatternToExcelEnum.RelativePath.getLiteral());
        for (        PatternLanguageType languagetype : PatternLanguageType.values()) {
          String cellStr=reader.get(languagetype.getExcelEnum().getLiteral());
          if (cellStr != null && !cellStr.equals(""String_Node_Str"")) {
            patternParameters.regex.put(languagetype.getLiteral(),cellStr);
          }
        }
        try {
          String relativePath=""String_Node_Str"" + createAndStorePattern(patternParameters,selectionFolder,type);
          names.add(name);
          importEvent.add(new ReturnCode(DefaultMessagesImpl.getString(""String_Node_Str"",name,relativePath),true));
        }
 catch (        Exception e) {
          importEvent.add(new ReturnCode(DefaultMessagesImpl.getString(""String_Node_Str"") + name,false));
        }
      }
      reader.close();
    }
 catch (    Exception e) {
      log.error(e,e);
      importEvent.add(new ReturnCode(DefaultMessagesImpl.getString(""String_Node_Str""),false));
    }
  }
  if (""String_Node_Str"".equalsIgnoreCase(fileExtName)) {
    Map<Integer,PatternLanguageType> expressionMap=new HashMap<Integer,PatternLanguageType>();
    try {
      WorkbookSettings settings=new WorkbookSettings();
      settings.setEncoding(""String_Node_Str"");
      Workbook rwb=Workbook.getWorkbook(importFile,settings);
      Sheet[] sheets=rwb.getSheets();
      for (      Sheet sheet : sheets) {
        Cell[] headerRow=sheet.getRow(0);
        for (        Cell cell : headerRow) {
          for (          PatternLanguageType languageType : PatternLanguageType.values()) {
            if (cell.getContents().equals(languageType.getExcelEnum().getLiteral())) {
              expressionMap.put(cell.getColumn(),languageType);
            }
          }
        }
        for (int i=1; i < sheet.getRows(); i++) {
          Cell[] row=sheet.getRow(i);
          Cell cell=row[0];
          if (CellType.LABEL.equals(cell.getType())) {
            String contents=cell.getContents();
            if (names.contains(contents)) {
              if (skip) {
                importEvent.add(new ReturnCode(DefaultMessagesImpl.getString(""String_Node_Str"",contents),false));
                continue;
              }
              if (rename) {
                contents=contents + ""String_Node_Str"" + new Date()+ ""String_Node_Str"";
              }
            }
            PatternParameters patternParameters=new ImportFactory().new PatternParameters();
            patternParameters.name=contents;
            patternParameters.auther=row[6].getContents();
            patternParameters.description=row[2].getContents();
            patternParameters.purpose=row[1].getContents();
            patternParameters.status=DevelopmentStatus.DRAFT.getLiteral();
            for (            int columnIndex : expressionMap.keySet()) {
              String rowContent=row[columnIndex].getContents();
              if (!rowContent.equals(""String_Node_Str"")) {
                patternParameters.regex.put(expressionMap.get(columnIndex).getLiteral(),rowContent);
              }
            }
            String relativePath=""String_Node_Str"" + createAndStorePattern(patternParameters,selectionFolder,type);
            names.add(contents);
            importEvent.add(new ReturnCode(DefaultMessagesImpl.getString(""String_Node_Str"",contents,relativePath),true));
          }
        }
      }
      rwb.close();
    }
 catch (    BiffException e) {
      log.error(e,e);
      importEvent.add(new ReturnCode(DefaultMessagesImpl.getString(""String_Node_Str""),false));
    }
catch (    IOException e) {
      log.error(e,e);
      importEvent.add(new ReturnCode(DefaultMessagesImpl.getString(""String_Node_Str""),false));
    }
  }
  return importEvent;
}",0.9979194250047286
138302,"/** 
 * set a csv file.
 * @param csvFile
 * @return whether the file be loaded.
 */
public boolean setCsvFile(File csvFile){
  quotesError=false;
  hasPatternHeaders=false;
  try {
    reader=new CsvReader(new FileReader(csvFile),CURRENT_SEPARATOR);
  }
 catch (  FileNotFoundException e1) {
    e1.printStackTrace();
    return false;
  }
  reader.setEscapeMode(CsvReader.ESCAPE_MODE_BACKSLASH);
  reader.setUseTextQualifier(useTextQualifier);
  try {
    reader.readHeaders();
    String[] headers=reader.getHeaders();
    hasPatternHeaders=checkFileHeader(headers);
    createHeader(headers);
  }
 catch (  IOException e1) {
    e1.printStackTrace();
  }
  viewer.setInput(reader);
  return true;
}","/** 
 * set a csv file.
 * @param csvFile
 * @return whether the file be loaded.
 */
public boolean setCsvFile(File csvFile){
  quotesError=false;
  hasPatternHeaders=false;
  try {
    reader=new CsvReader(new FileReader(csvFile),CURRENT_SEPARATOR);
  }
 catch (  FileNotFoundException e1) {
    e1.printStackTrace();
    return false;
  }
  reader.setEscapeMode(CsvReader.ESCAPE_MODE_DOUBLED);
  reader.setUseTextQualifier(useTextQualifier);
  try {
    reader.readHeaders();
    String[] headers=reader.getHeaders();
    hasPatternHeaders=checkFileHeader(headers);
    createHeader(headers);
  }
 catch (  IOException e1) {
    e1.printStackTrace();
  }
  viewer.setInput(reader);
  return true;
}",0.9914407988587732
138303,"@Override public void write(IPath resPath,IPath desPath) throws IOException, CoreException {
  File file=getBasePath().toFile();
  if (!file.exists()) {
    file.createNewFile();
  }
  tempMap.put(resPath.toFile(),desPath.toOSString());
}","@Override public void write(IPath resPath,IPath desPath) throws IOException, CoreException {
  File file=getBasePath().toFile();
  if (!file.exists()) {
    file.createNewFile();
  }
  tempMap.put(resPath.toFile(),desPath.toPortableString());
}",0.979253112033195
138304,"/** 
 * DOC bZhou Comment method ""isTOPFile"".
 * @param file
 * @return
 */
private boolean isValidDirectory(File file){
  if (!file.getName().startsWith(""String_Node_Str"")) {
    IPath filePath=new Path(file.getAbsolutePath());
    for (    EResourceConstant constant : EResourceConstant.getTopConstants()) {
      if (filePath.toString().indexOf(constant.getPath()) > 0) {
        String lastSeg=filePath.lastSegment();
        if (constant == EResourceConstant.METADATA) {
          return lastSeg.equals(constant.getName()) || lastSeg.equals(EResourceConstant.DB_CONNECTIONS.getName()) || lastSeg.equals(EResourceConstant.MDM_CONNECTIONS.getName())|| lastSeg.equals(EResourceConstant.FILEDELIMITED.getName());
        }
 else         if (constant == EResourceConstant.LIBRARIES) {
          return !lastSeg.equals(EResourceConstant.JRXML_TEMPLATE.getName());
        }
        return true;
      }
    }
  }
  return false;
}","/** 
 * DOC bZhou Comment method ""isTOPFile"".
 * @param file
 * @return
 */
private boolean isValidDirectory(File file){
  if (!file.getName().startsWith(""String_Node_Str"")) {
    IPath filePath=new Path(file.getAbsolutePath());
    String pathStr=filePath.toPortableString();
    for (    EResourceConstant constant : EResourceConstant.getTopConstants()) {
      if (filePath.toString().indexOf(constant.getPath()) > 0) {
        String lastSeg=filePath.lastSegment();
        if (constant == EResourceConstant.METADATA) {
          return lastSeg.equals(constant.getName()) || pathStr.contains(EResourceConstant.DB_CONNECTIONS.getPath()) || pathStr.contains(EResourceConstant.MDM_CONNECTIONS.getPath())|| pathStr.contains(EResourceConstant.FILEDELIMITED.getPath());
        }
 else         if (constant == EResourceConstant.LIBRARIES) {
          return !lastSeg.equals(EResourceConstant.JRXML_TEMPLATE.getName());
        }
        return true;
      }
    }
  }
  return false;
}",0.9184100418410042
138305,"@Override protected void copy(boolean leftToRight){
  ModelElement modelElement=null;
  IFile resourceFile=null;
  if (selectedOjbect instanceof IFile) {
    modelElement=PrvResourceFileHelper.getInstance().findProvider((IFile)selectedOjbect);
  }
 else   if (selectedOjbect instanceof IRepositoryViewObject) {
    ModelElement me=PropertyHelper.retrieveElement(((IRepositoryViewObject)selectedOjbect).getProperty().getItem());
    if (me instanceof Connection) {
      modelElement=me;
    }
  }
 else {
    Package ctatlogSwtich=SwitchHelpers.PACKAGE_SWITCH.doSwitch((EObject)((AbstractDatabaseFolderNode)selectedOjbect).getParent());
    if (ctatlogSwtich != null) {
      resourceFile=PrvResourceFileHelper.getInstance().findCorrespondingFile(ConnectionHelper.getTdDataProvider(ctatlogSwtich));
      modelElement=ConnectionHelper.getTdDataProvider(ctatlogSwtich);
    }
    ColumnSet columnSet=SwitchHelpers.COLUMN_SET_SWITCH.doSwitch((EObject)((AbstractDatabaseFolderNode)selectedOjbect).getParent());
    if (columnSet != null) {
      resourceFile=PrvResourceFileHelper.getInstance().findCorrespondingFile(ConnectionHelper.getDataProvider(columnSet));
      modelElement=ConnectionHelper.getDataProvider(columnSet);
    }
  }
  if (modelElement != null && resourceFile != null) {
    String titleMessage=DefaultMessagesImpl.getString(""String_Node_Str"");
    int showDialog=DeleteModelElementConfirmDialog.showElementImpactDialog(null,new ModelElement[]{modelElement},titleMessage,titleMessage);
    if (showDialog == Window.OK) {
      EObjectHelper.removeDependencys(new IResource[]{resourceFile});
    }
 else {
      return;
    }
  }
  int diffItemsCount=((ModelCompareInput)getInput()).getDiffAsList().size();
  try {
    super.copy(leftToRight);
    ModelCompareInput modelCompareInput=(ModelCompareInput)getInput();
    if (!leftToRight && modelCompareInput.getDiffAsList().size() == 0) {
      Resource leftResource=modelCompareInput.getLeftResource();
      XmiResourceManager resourceManager=ProxyRepositoryFactory.getInstance().getRepositoryFactoryFromProvider().getResourceManager();
      resourceManager.saveResource(leftResource);
      final MatchModel match=(MatchModel)modelCompareInput.getMatch();
      match.getUnmatchedElements().clear();
      final ComparisonResourceSnapshot snap=DiffFactory.eINSTANCE.createComparisonResourceSnapshot();
      snap.setDiff((DiffModel)((ModelCompareInput)getInput()).getDiff());
      snap.setMatch((MatchModel)((ModelCompareInput)getInput()).getMatch());
      configuration.setProperty(EMFCompareConstants.PROPERTY_CONTENT_INPUT_CHANGED,snap);
    }
    if (!leftToRight && diffItemsCount > 0) {
      new ReloadDatabaseAction(selectedOjbect,null).run();
    }
  }
 catch (  Throwable e) {
    log.error(e.getMessage(),e);
  }
}","@Override protected void copy(boolean leftToRight){
  ModelElement modelElement=null;
  IFile resourceFile=null;
  if (selectedOjbect instanceof IFile) {
    modelElement=PrvResourceFileHelper.getInstance().findProvider((IFile)selectedOjbect);
  }
 else   if (selectedOjbect instanceof IRepositoryViewObject) {
    ModelElement me=PropertyHelper.retrieveElement(((IRepositoryViewObject)selectedOjbect).getProperty().getItem());
    if (me instanceof Connection) {
      modelElement=me;
    }
  }
 else {
    Package ctatlogSwtich=SwitchHelpers.PACKAGE_SWITCH.doSwitch((EObject)((AbstractDatabaseFolderNode)selectedOjbect).getParent());
    if (ctatlogSwtich != null) {
      resourceFile=PrvResourceFileHelper.getInstance().findCorrespondingFile(ConnectionHelper.getTdDataProvider(ctatlogSwtich));
      modelElement=ConnectionHelper.getTdDataProvider(ctatlogSwtich);
    }
    ColumnSet columnSet=SwitchHelpers.COLUMN_SET_SWITCH.doSwitch((EObject)((AbstractDatabaseFolderNode)selectedOjbect).getParent());
    if (columnSet != null) {
      resourceFile=PrvResourceFileHelper.getInstance().findCorrespondingFile(ConnectionHelper.getDataProvider(columnSet));
      modelElement=ConnectionHelper.getDataProvider(columnSet);
    }
  }
  if (modelElement != null && resourceFile != null) {
    String titleMessage=DefaultMessagesImpl.getString(""String_Node_Str"");
    int showDialog=DeleteModelElementConfirmDialog.showElementImpactDialog(null,new ModelElement[]{modelElement},titleMessage,titleMessage);
    if (showDialog == Window.OK) {
      EObjectHelper.removeDependencys(new IResource[]{resourceFile});
    }
 else {
      return;
    }
  }
  int diffItemsCount=((ModelCompareInput)getInput()).getDiffAsList().size();
  try {
    super.copy(leftToRight);
    ModelCompareInput modelCompareInput=(ModelCompareInput)getInput();
    if (!leftToRight && modelCompareInput.getDiffAsList().size() == 0) {
      Resource leftResource=modelCompareInput.getLeftResource();
      XmiResourceManager resourceManager=ProxyRepositoryFactory.getInstance().getRepositoryFactoryFromProvider().getResourceManager();
      resourceManager.saveResource(leftResource);
      final MatchModel match=(MatchModel)modelCompareInput.getMatch();
      match.getUnmatchedElements().clear();
      final ComparisonResourceSnapshot snap=DiffFactory.eINSTANCE.createComparisonResourceSnapshot();
      snap.setDiff((DiffModel)((ModelCompareInput)getInput()).getDiff());
      snap.setMatch((MatchModel)((ModelCompareInput)getInput()).getMatch());
      configuration.setProperty(EMFCompareConstants.PROPERTY_CONTENT_INPUT_CHANGED,snap);
    }
    if (!leftToRight && diffItemsCount > 0) {
      if (selectedOjbect instanceof RepositoryViewObject) {
        new ReloadDatabaseAction(((RepositoryViewObject)selectedOjbect).getRepositoryNode(),null).run();
      }
    }
  }
 catch (  Throwable e) {
    log.error(e.getMessage(),e);
  }
}",0.9716088328075708
138306,"@Override public ItemRecord computeInput(IPath path){
  sourcePath=path.removeFileExtension();
  try {
    FilesUtils.createFolder(sourcePath.toFile());
    FilesUtils.unzip(path.toOSString(),sourcePath.toOSString());
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  File libFolder=DqFileUtils.getFile(sourcePath.toFile(),EResourceConstant.LIBRARIES.getName(),true);
  IPath projectPath=new Path(libFolder.getParentFile().getAbsolutePath());
  return super.computeInput(projectPath);
}","@Override public ItemRecord computeInput(IPath path){
  sourcePath=path.removeFileExtension();
  try {
    FilesUtils.createFolder(sourcePath.toFile());
    FilesUtils.unzip(path.toOSString(),sourcePath.toOSString());
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  File libFolder=DqFileUtils.getFile(sourcePath.toFile(),EResourceConstant.LIBRARIES.getName(),true);
  if (libFolder != null && libFolder.exists()) {
    IPath projectPath=new Path(libFolder.getParentFile().getAbsolutePath());
    return super.computeInput(projectPath);
  }
  return null;
}",0.9323308270676692
138307,"/** 
 * DOC zshen Comment method ""initProxyRepository"".
 */
public ReturnCode initProxyRepository(){
  ReturnCode rc=new ReturnCode();
  Location instanceLoc=Platform.getInstanceLocation();
  try {
    if (instanceLoc.isLocked()) {
      rc.setMessage(DefaultMessagesImpl.getString(""String_Node_Str""));
      rc.setOk(false);
      return rc;
    }
 else {
      instanceLoc.lock();
    }
  }
 catch (  IOException e) {
    log.error(e,e);
  }
  Project project=null;
  RepositoryContext repositoryContext=(RepositoryContext)org.talend.core.runtime.CoreRuntimePlugin.getInstance().getContext().getProperty(Context.REPOSITORY_CONTEXT_KEY);
  if (repositoryContext != null) {
    project=repositoryContext.getProject();
    User user=repositoryContext.getUser();
    ReponsitoryContextBridge.initialized(project.getEmfProject(),user);
  }
 else {
    ProxyRepositoryFactory proxyRepository=ProxyRepositoryFactory.getInstance();
    IRepositoryFactory repository=RepositoryFactoryProvider.getRepositoriyById(""String_Node_Str"");
    if (repository == null) {
      log.fatal(DefaultMessagesImpl.getString(""String_Node_Str""));
      rc.setMessage(DefaultMessagesImpl.getString(""String_Node_Str""));
      rc.setOk(false);
      return rc;
    }
    proxyRepository.setRepositoryFactoryFromProvider(repository);
    try {
      proxyRepository.checkAvailability();
      proxyRepository.initialize();
      XmiResourceManager xmiResourceManager=new XmiResourceManager();
      IProject rootProject=ResourceManager.getRootProject();
      if (rootProject.getFile(FileConstants.LOCAL_PROJECT_FILENAME).exists()) {
        new EMFUtil();
        project=new Project(xmiResourceManager.loadProject(rootProject));
      }
 else {
        User user=PropertiesFactoryImpl.eINSTANCE.createUser();
        user.setLogin(""String_Node_Str"");
        user.setPassword(""String_Node_Str"".getBytes());
        String projectName=ResourceManager.getRootProjectName();
        String projectDesc=ResourcesPlugin.getWorkspace().newProjectDescription(projectName).getComment();
        Project projectInfor=ProjectHelper.createProject(projectName,projectDesc,ECodeLanguage.JAVA.getName(),user);
        checkFileName(projectInfor.getLabel(),RepositoryConstants.PROJECT_PATTERN);
        project=proxyRepository.getRepositoryFactoryFromProvider().createProject(projectInfor);
      }
      if (project != null) {
        initRepositoryContext(project);
        String defaultTechnicalStatusList=""String_Node_Str"";
        List<Status> statusList=StatusHelper.parse(defaultTechnicalStatusList);
        proxyRepository.setTechnicalStatus(statusList);
      }
    }
 catch (    PersistenceException e) {
      ExceptionHandler.process(e);
      rc.setMessage(e.getMessage());
      rc.setOk(false);
      return rc;
    }
  }
  return rc;
}","/** 
 * DOC zshen Comment method ""initProxyRepository"".
 */
public ReturnCode initProxyRepository(){
  ReturnCode rc=new ReturnCode();
  Project project=null;
  RepositoryContext repositoryContext=(RepositoryContext)org.talend.core.runtime.CoreRuntimePlugin.getInstance().getContext().getProperty(Context.REPOSITORY_CONTEXT_KEY);
  if (repositoryContext != null) {
    project=repositoryContext.getProject();
    User user=repositoryContext.getUser();
    ReponsitoryContextBridge.initialized(project.getEmfProject(),user);
  }
 else {
    Location instanceLoc=Platform.getInstanceLocation();
    try {
      if (instanceLoc.isLocked()) {
        rc.setMessage(DefaultMessagesImpl.getString(""String_Node_Str""));
        rc.setOk(false);
        return rc;
      }
 else {
        instanceLoc.lock();
      }
    }
 catch (    IOException e) {
      log.error(e,e);
    }
    ProxyRepositoryFactory proxyRepository=ProxyRepositoryFactory.getInstance();
    IRepositoryFactory repository=RepositoryFactoryProvider.getRepositoriyById(""String_Node_Str"");
    if (repository == null) {
      log.fatal(DefaultMessagesImpl.getString(""String_Node_Str""));
      rc.setMessage(DefaultMessagesImpl.getString(""String_Node_Str""));
      rc.setOk(false);
      return rc;
    }
    proxyRepository.setRepositoryFactoryFromProvider(repository);
    try {
      proxyRepository.checkAvailability();
      proxyRepository.initialize();
      XmiResourceManager xmiResourceManager=new XmiResourceManager();
      IProject rootProject=ResourceManager.getRootProject();
      if (rootProject.getFile(FileConstants.LOCAL_PROJECT_FILENAME).exists()) {
        new EMFUtil();
        project=new Project(xmiResourceManager.loadProject(rootProject));
      }
 else {
        User user=PropertiesFactoryImpl.eINSTANCE.createUser();
        user.setLogin(""String_Node_Str"");
        user.setPassword(""String_Node_Str"".getBytes());
        String projectName=ResourceManager.getRootProjectName();
        String projectDesc=ResourcesPlugin.getWorkspace().newProjectDescription(projectName).getComment();
        Project projectInfor=ProjectHelper.createProject(projectName,projectDesc,ECodeLanguage.JAVA.getName(),user);
        checkFileName(projectInfor.getLabel(),RepositoryConstants.PROJECT_PATTERN);
        project=proxyRepository.getRepositoryFactoryFromProvider().createProject(projectInfor);
      }
      if (project != null) {
        initRepositoryContext(project);
        String defaultTechnicalStatusList=""String_Node_Str"";
        List<Status> statusList=StatusHelper.parse(defaultTechnicalStatusList);
        proxyRepository.setTechnicalStatus(statusList);
      }
    }
 catch (    PersistenceException e) {
      ExceptionHandler.process(e);
      rc.setMessage(e.getMessage());
      rc.setOk(false);
      return rc;
    }
  }
  return rc;
}",0.8859773371104815
138308,"/** 
 * DOC qiongli Comment method ""createColumnAnalysis"".bug 16252.
 * @param newTree
 */
private void createColumnAnalysis(Tree newTree){
  TreeItem[] items=newTree.getSelection();
  if (items.length > 0) {
    TreePath[] paths=new TreePath[items.length];
    for (int i=0; i < items.length; i++) {
      TdColumn tdColumn=(TdColumn)items[i].getData(""String_Node_Str"");
      paths[i]=new TreePath(new Object[]{tdColumn});
    }
    CreateColumnAnalysisAction analysisAction=new CreateColumnAnalysisAction();
    analysisAction.setSelection(new TreeSelection(paths));
    analysisAction.run();
  }
}","/** 
 * DOC qiongli Comment method ""createColumnAnalysis"".bug 16252.
 * @param newTree
 */
private void createColumnAnalysis(Tree newTree){
  TreeItem[] items=newTree.getSelection();
  if (items.length > 0) {
    TreePath[] paths=new TreePath[items.length];
    for (int i=0; i < items.length; i++) {
      ColumnIndicator data=(ColumnIndicator)items[i].getData(""String_Node_Str"");
      IRepositoryNode modelElementRepositoryNode=data.getModelElementRepositoryNode();
      paths[i]=new TreePath(new Object[]{modelElementRepositoryNode});
    }
    CreateColumnAnalysisAction analysisAction=new CreateColumnAnalysisAction();
    analysisAction.setSelection(new TreeSelection(paths));
    analysisAction.run();
  }
}",0.6165527714502658
138309,"/** 
 * DOC bZhou Comment method ""removeAliasInSQLExplorer"".
 * @param dataproviders
 */
public void removeAliasInSQLExplorer(DataProvider... dataproviders){
  SQLExplorerPlugin sqlPlugin=SQLExplorerPlugin.getDefault();
  AliasManager aliasManager=sqlPlugin.getAliasManager();
  for (  DataProvider dataProvider : dataproviders) {
    try {
      aliasManager.loadAliases();
      String aliasName=dataProvider.getName();
      Alias alias=aliasManager.getAlias(aliasName);
      if (alias != null) {
        aliasManager.removeAlias(aliasName);
      }
    }
 catch (    Exception e) {
      log.error(e,e);
    }
  }
  aliasManager.modelChanged();
}","/** 
 * DOC bZhou Comment method ""removeAliasInSQLExplorer"".
 * @param dataproviders
 */
public void removeAliasInSQLExplorer(DataProvider... dataproviders){
  SQLExplorerPlugin sqlPlugin=SQLExplorerPlugin.getDefault();
  AliasManager aliasManager=sqlPlugin.getAliasManager();
  for (  DataProvider dataProvider : dataproviders) {
    try {
      aliasManager.loadAliases();
      String aliasName=dataProvider.getName();
      Alias alias=aliasManager.getAlias(aliasName);
      if (alias != null) {
        aliasManager.removeAlias(aliasName);
        aliasManager.saveAliases();
      }
    }
 catch (    Exception e) {
      log.error(e,e);
    }
  }
  aliasManager.modelChanged();
}",0.9730941704035876
138310,"public void saveAnalysis() throws DataprofilerCoreException {
  this.analysis.setName(this.analysis.getName().replace(""String_Node_Str"",""String_Node_Str""));
  if (isConnectionAnalysis()) {
    AnalysisHelper.setReloadDatabases(analysis,reloadDatabasesBtn.getSelection());
  }
  EList<Domain> dataFilters=analysis.getParameters().getDataFilter();
  if (!this.tableFilterText.getText().equals(DomainHelper.getTablePattern(dataFilters))) {
    DomainHelper.setDataFilterTablePattern(dataFilters,tableFilterText.getText());
    latestTableFilterValue=this.tableFilterText.getText();
  }
  if (!this.viewFilterText.getText().equals(DomainHelper.getViewPattern(dataFilters))) {
    DomainHelper.setDataFilterViewPattern(dataFilters,viewFilterText.getText());
    latestViewFilterValue=this.viewFilterText.getText();
  }
  this.updateAnalysisClientDependency();
  ReturnCode saved=new ReturnCode(false);
  IEditorInput editorInput=this.getEditorInput();
  if (editorInput instanceof AnalysisItemEditorInput) {
    AnalysisItemEditorInput analysisInput=(AnalysisItemEditorInput)editorInput;
    TDQAnalysisItem tdqAnalysisItem=analysisInput.getTDQAnalysisItem();
    tdqAnalysisItem.getProperty().setLabel(analysis.getName());
    this.nameText.setText(analysis.getName());
    saved=ElementWriterFactory.getInstance().createAnalysisWrite().save(tdqAnalysisItem);
  }
  if (saved.isOk()) {
    log.info(""String_Node_Str"" + analysis.getFileName());
  }
}","public void saveAnalysis() throws DataprofilerCoreException {
  this.analysis.setName(this.analysis.getName().replace(""String_Node_Str"",""String_Node_Str""));
  if (isConnectionAnalysis()) {
    AnalysisHelper.setReloadDatabases(analysis,reloadDatabasesBtn.getSelection());
  }
  EList<Domain> dataFilters=analysis.getParameters().getDataFilter();
  if (!this.tableFilterText.getText().equals(DomainHelper.getTablePattern(dataFilters))) {
    DomainHelper.setDataFilterTablePattern(dataFilters,tableFilterText.getText());
    latestTableFilterValue=this.tableFilterText.getText();
  }
  if (!this.viewFilterText.getText().equals(DomainHelper.getViewPattern(dataFilters))) {
    DomainHelper.setDataFilterViewPattern(dataFilters,viewFilterText.getText());
    latestViewFilterValue=this.viewFilterText.getText();
  }
  this.updateAnalysisClientDependency();
  ReturnCode saved=new ReturnCode(false);
  IEditorInput editorInput=this.getEditorInput();
  if (editorInput instanceof AnalysisItemEditorInput) {
    AnalysisItemEditorInput analysisInput=(AnalysisItemEditorInput)editorInput;
    TDQAnalysisItem tdqAnalysisItem=analysisInput.getTDQAnalysisItem();
    if (tdqAnalysisItem.eIsProxy()) {
      tdqAnalysisItem=(TDQAnalysisItem)EObjectHelper.resolveObject(tdqAnalysisItem);
    }
    tdqAnalysisItem.getProperty().setLabel(analysis.getName());
    this.nameText.setText(analysis.getName());
    saved=ElementWriterFactory.getInstance().createAnalysisWrite().save(tdqAnalysisItem);
  }
  if (saved.isOk()) {
    log.info(""String_Node_Str"" + analysis.getFileName());
  }
}",0.9572706194104008
138311,"@Override protected void saveAnalysis() throws DataprofilerCoreException {
  analysis.setName(analysis.getName().replace(""String_Node_Str"",""String_Node_Str""));
  for (  Domain domain : this.analysis.getParameters().getDataFilter()) {
    domain.setName(this.analysis.getName());
  }
  IRepositoryViewObject reposObject=null;
  getAnalysisHandler().clearAnalysis();
  List<RepositoryNode> columnListAANode=anaColumnCompareViewer.getColumnListA();
  List<RepositoryNode> columnListBBNode=anaColumnCompareViewer.getColumnListB();
  AnalysisBuilder anaBuilder=new AnalysisBuilder();
  anaBuilder.setAnalysis(this.analysis);
  Connection tdDataProvider=null;
  for (int i=0; i < columnListAANode.size(); i++) {
    if (columnListBBNode.size() > i) {
      ColumnDependencyIndicator indicator=ColumnsetFactory.eINSTANCE.createColumnDependencyIndicator();
      TdColumn columnA=(TdColumn)((MetadataColumnRepositoryObject)columnListAANode.get(i).getObject()).getTdColumn();
      TdColumn columnB=(TdColumn)((MetadataColumnRepositoryObject)columnListBBNode.get(i).getObject()).getTdColumn();
      indicator.setColumnA(columnA);
      indicator.setColumnB(columnB);
      indicator.setIndicatorDefinition(DefinitionHandler.getInstance().getFDRuleDefaultIndicatorDefinition());
      analysis.getResults().getIndicators().add(indicator);
      anaBuilder.addElementToAnalyze(columnA,indicator);
      anaBuilder.addElementToAnalyze(columnB,indicator);
    }
  }
  if (columnListAANode.size() > 0) {
    reposObject=columnListAANode.get(0).getObject();
    tdDataProvider=((ConnectionItem)reposObject.getProperty().getItem()).getConnection();
    analysis.getContext().setConnection(tdDataProvider);
    TypedReturnCode<Dependency> rc=DependenciesHandler.getInstance().setDependencyOn(analysis,tdDataProvider);
    if (!rc.isOk()) {
      log.info(""String_Node_Str"" + analysis.getFileName());
    }
  }
 else {
    tdDataProvider=(Connection)analysis.getContext().getConnection();
    if (tdDataProvider != null && tdDataProvider.getSupplierDependency().size() > 0) {
      tdDataProvider.getSupplierDependency().get(0).getClient().remove(analysis);
      analysis.getContext().setConnection(null);
      analysis.getClientDependency().clear();
    }
  }
  this.updateAnalysisClientDependency();
  ReturnCode saved=new ReturnCode(false);
  IEditorInput editorInput=this.getEditorInput();
  if (editorInput instanceof AnalysisItemEditorInput) {
    AnalysisItemEditorInput analysisInput=(AnalysisItemEditorInput)editorInput;
    TDQAnalysisItem tdqAnalysisItem=analysisInput.getTDQAnalysisItem();
    tdqAnalysisItem.getProperty().setLabel(analysis.getName());
    this.nameText.setText(analysis.getName());
    saved=ElementWriterFactory.getInstance().createAnalysisWrite().save(tdqAnalysisItem);
  }
  if (saved.isOk()) {
    RepositoryNode node=RepositoryNodeHelper.recursiveFind(tdDataProvider);
    if (node != null) {
      ElementWriterFactory.getInstance().createDataProviderWriter().save(node.getObject().getProperty().getItem());
    }
    log.info(""String_Node_Str"" + analysis.getFileName());
  }
}","@Override protected void saveAnalysis() throws DataprofilerCoreException {
  analysis.setName(analysis.getName().replace(""String_Node_Str"",""String_Node_Str""));
  for (  Domain domain : this.analysis.getParameters().getDataFilter()) {
    domain.setName(this.analysis.getName());
  }
  IRepositoryViewObject reposObject=null;
  getAnalysisHandler().clearAnalysis();
  List<RepositoryNode> columnListAANode=anaColumnCompareViewer.getColumnListA();
  List<RepositoryNode> columnListBBNode=anaColumnCompareViewer.getColumnListB();
  AnalysisBuilder anaBuilder=new AnalysisBuilder();
  anaBuilder.setAnalysis(this.analysis);
  Connection tdDataProvider=null;
  for (int i=0; i < columnListAANode.size(); i++) {
    if (columnListBBNode.size() > i) {
      ColumnDependencyIndicator indicator=ColumnsetFactory.eINSTANCE.createColumnDependencyIndicator();
      TdColumn columnA=(TdColumn)((MetadataColumnRepositoryObject)columnListAANode.get(i).getObject()).getTdColumn();
      TdColumn columnB=(TdColumn)((MetadataColumnRepositoryObject)columnListBBNode.get(i).getObject()).getTdColumn();
      indicator.setColumnA(columnA);
      indicator.setColumnB(columnB);
      indicator.setIndicatorDefinition(DefinitionHandler.getInstance().getFDRuleDefaultIndicatorDefinition());
      analysis.getResults().getIndicators().add(indicator);
      anaBuilder.addElementToAnalyze(columnA,indicator);
      anaBuilder.addElementToAnalyze(columnB,indicator);
    }
  }
  if (columnListAANode.size() > 0) {
    reposObject=columnListAANode.get(0).getObject();
    tdDataProvider=((ConnectionItem)reposObject.getProperty().getItem()).getConnection();
    analysis.getContext().setConnection(tdDataProvider);
    TypedReturnCode<Dependency> rc=DependenciesHandler.getInstance().setDependencyOn(analysis,tdDataProvider);
    if (!rc.isOk()) {
      log.info(""String_Node_Str"" + analysis.getFileName());
    }
  }
 else {
    tdDataProvider=(Connection)analysis.getContext().getConnection();
    if (tdDataProvider != null && tdDataProvider.getSupplierDependency().size() > 0) {
      tdDataProvider.getSupplierDependency().get(0).getClient().remove(analysis);
      analysis.getContext().setConnection(null);
      analysis.getClientDependency().clear();
    }
  }
  this.updateAnalysisClientDependency();
  ReturnCode saved=new ReturnCode(false);
  IEditorInput editorInput=this.getEditorInput();
  if (editorInput instanceof AnalysisItemEditorInput) {
    AnalysisItemEditorInput analysisInput=(AnalysisItemEditorInput)editorInput;
    TDQAnalysisItem tdqAnalysisItem=analysisInput.getTDQAnalysisItem();
    if (tdqAnalysisItem.eIsProxy()) {
      tdqAnalysisItem=(TDQAnalysisItem)EObjectHelper.resolveObject(tdqAnalysisItem);
    }
    tdqAnalysisItem.getProperty().setLabel(analysis.getName());
    this.nameText.setText(analysis.getName());
    saved=ElementWriterFactory.getInstance().createAnalysisWrite().save(tdqAnalysisItem);
  }
  if (saved.isOk()) {
    RepositoryNode node=RepositoryNodeHelper.recursiveFind(tdDataProvider);
    if (node != null) {
      ElementWriterFactory.getInstance().createDataProviderWriter().save(node.getObject().getProperty().getItem());
    }
    log.info(""String_Node_Str"" + analysis.getFileName());
  }
}",0.8585427532795954
138312,"/** 
 * @param outputFolder
 * @throws DataprofilerCoreException
 */
public void saveAnalysis() throws DataprofilerCoreException {
  IRepositoryViewObject reposObject=null;
  analysisHandler.clearAnalysis();
  ModelElementIndicator[] modelElementIndicators=treeViewer.getModelElementIndicator();
  Connection tdProvider=null;
  Analysis analysis=analysisHandler.getAnalysis();
  this.analysis.setName(this.analysis.getName().replace(""String_Node_Str"",""String_Node_Str""));
  for (  Domain domain : this.analysis.getParameters().getDataFilter()) {
    domain.setName(this.analysis.getName());
  }
  analysis.getParameters().setExecutionLanguage(ExecutionLanguage.get(execLang));
  if (ExecutionLanguage.JAVA.equals(ExecutionLanguage.get(execLang))) {
    analysis.getParameters().setMaxNumberRows(Integer.parseInt(maxNumText.getText()));
    analysis.getParameters().setStoreData(drillDownCheck.getSelection());
  }
  if (modelElementIndicators != null && modelElementIndicators.length != 0) {
    tdProvider=ModelElementIndicatorHelper.getTdDataProvider(modelElementIndicators[0]);
    if (tdProvider.eIsProxy()) {
      tdProvider=(Connection)EObjectHelper.resolveObject(tdProvider);
    }
    analysis.getContext().setConnection(tdProvider);
    for (    ModelElementIndicator modelElementIndicator : modelElementIndicators) {
      reposObject=modelElementIndicator.getModelElementRepositoryNode().getObject();
      ModelElement modelEle=null;
      if (reposObject instanceof MetadataColumnRepositoryObject) {
        modelEle=((MetadataColumnRepositoryObject)reposObject).getTdColumn();
      }
 else       if (reposObject instanceof MetadataXmlElementTypeRepositoryObject) {
        modelEle=((MetadataXmlElementTypeRepositoryObject)reposObject).getTdXmlElementType();
      }
      analysisHandler.addIndicator(modelEle,modelElementIndicator.getIndicators());
      DataminingType type=MetadataHelper.getDataminingType(modelEle);
      if (type == null) {
        type=MetadataHelper.getDefaultDataminingType(modelElementIndicator.getJavaType());
      }
      analysisHandler.setDatamingType(type.getLiteral(),modelEle);
    }
  }
 else {
    tdProvider=(Connection)analysis.getContext().getConnection();
    if (tdProvider != null && tdProvider.getSupplierDependency().size() > 0) {
      if (tdProvider.getSupplierDependency().size() > 0) {
        tdProvider.getSupplierDependency().get(0).getClient().remove(analysis);
      }
      analysis.getContext().setConnection(null);
      analysis.getClientDependency().clear();
    }
  }
  analysisHandler.setStringDataFilter(dataFilterComp.getDataFilterString());
  String urlString=analysis.eResource() != null ? analysis.eResource().getURI().toFileString() : PluginConstant.EMPTY_STRING;
  this.updateAnalysisClientDependency();
  ReturnCode saved=new ReturnCode(false);
  IEditorInput editorInput=this.getEditorInput();
  if (editorInput instanceof AnalysisItemEditorInput) {
    AnalysisItemEditorInput analysisInput=(AnalysisItemEditorInput)editorInput;
    TDQAnalysisItem tdqAnalysisItem=analysisInput.getTDQAnalysisItem();
    tdqAnalysisItem.getProperty().setLabel(analysisHandler.getName());
    this.nameText.setText(analysisHandler.getName());
    saved=ElementWriterFactory.getInstance().createAnalysisWrite().save(tdqAnalysisItem);
  }
  if (saved.isOk()) {
    RepositoryNode node=RepositoryNodeHelper.recursiveFind(tdProvider);
    if (node != null) {
      ElementWriterFactory.getInstance().createDataProviderWriter().save(node.getObject().getProperty().getItem());
    }
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + urlString + ""String_Node_Str"");
    }
  }
 else {
    throw new DataprofilerCoreException(DefaultMessagesImpl.getString(""String_Node_Str"",analysis.getName(),urlString,saved.getMessage()));
  }
  treeViewer.setDirty(false);
  dataFilterComp.setDirty(false);
}","/** 
 * @param outputFolder
 * @throws DataprofilerCoreException
 */
public void saveAnalysis() throws DataprofilerCoreException {
  IRepositoryViewObject reposObject=null;
  analysisHandler.clearAnalysis();
  ModelElementIndicator[] modelElementIndicators=treeViewer.getModelElementIndicator();
  Connection tdProvider=null;
  Analysis analysis=analysisHandler.getAnalysis();
  this.analysis.setName(this.analysis.getName().replace(""String_Node_Str"",""String_Node_Str""));
  for (  Domain domain : this.analysis.getParameters().getDataFilter()) {
    domain.setName(this.analysis.getName());
  }
  analysis.getParameters().setExecutionLanguage(ExecutionLanguage.get(execLang));
  if (ExecutionLanguage.JAVA.equals(ExecutionLanguage.get(execLang))) {
    analysis.getParameters().setMaxNumberRows(Integer.parseInt(maxNumText.getText()));
    analysis.getParameters().setStoreData(drillDownCheck.getSelection());
  }
  if (modelElementIndicators != null && modelElementIndicators.length != 0) {
    tdProvider=ModelElementIndicatorHelper.getTdDataProvider(modelElementIndicators[0]);
    if (tdProvider.eIsProxy()) {
      tdProvider=(Connection)EObjectHelper.resolveObject(tdProvider);
    }
    analysis.getContext().setConnection(tdProvider);
    for (    ModelElementIndicator modelElementIndicator : modelElementIndicators) {
      reposObject=modelElementIndicator.getModelElementRepositoryNode().getObject();
      ModelElement modelEle=null;
      if (reposObject instanceof MetadataColumnRepositoryObject) {
        modelEle=((MetadataColumnRepositoryObject)reposObject).getTdColumn();
      }
 else       if (reposObject instanceof MetadataXmlElementTypeRepositoryObject) {
        modelEle=((MetadataXmlElementTypeRepositoryObject)reposObject).getTdXmlElementType();
      }
      analysisHandler.addIndicator(modelEle,modelElementIndicator.getIndicators());
      DataminingType type=MetadataHelper.getDataminingType(modelEle);
      if (type == null) {
        type=MetadataHelper.getDefaultDataminingType(modelElementIndicator.getJavaType());
      }
      analysisHandler.setDatamingType(type.getLiteral(),modelEle);
    }
  }
 else {
    tdProvider=(Connection)analysis.getContext().getConnection();
    if (tdProvider != null && tdProvider.getSupplierDependency().size() > 0) {
      if (tdProvider.getSupplierDependency().size() > 0) {
        tdProvider.getSupplierDependency().get(0).getClient().remove(analysis);
      }
      analysis.getContext().setConnection(null);
      analysis.getClientDependency().clear();
    }
  }
  analysisHandler.setStringDataFilter(dataFilterComp.getDataFilterString());
  String urlString=analysis.eResource() != null ? analysis.eResource().getURI().toFileString() : PluginConstant.EMPTY_STRING;
  this.updateAnalysisClientDependency();
  ReturnCode saved=new ReturnCode(false);
  IEditorInput editorInput=this.getEditorInput();
  if (editorInput instanceof AnalysisItemEditorInput) {
    AnalysisItemEditorInput analysisInput=(AnalysisItemEditorInput)editorInput;
    TDQAnalysisItem tdqAnalysisItem=analysisInput.getTDQAnalysisItem();
    if (tdqAnalysisItem.eIsProxy()) {
      tdqAnalysisItem=(TDQAnalysisItem)EObjectHelper.resolveObject(tdqAnalysisItem);
    }
    tdqAnalysisItem.getProperty().setLabel(analysisHandler.getName());
    this.nameText.setText(analysisHandler.getName());
    saved=ElementWriterFactory.getInstance().createAnalysisWrite().save(tdqAnalysisItem);
  }
  if (saved.isOk()) {
    RepositoryNode node=RepositoryNodeHelper.recursiveFind(tdProvider);
    if (node != null) {
      ElementWriterFactory.getInstance().createDataProviderWriter().save(node.getObject().getProperty().getItem());
    }
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + urlString + ""String_Node_Str"");
    }
  }
 else {
    throw new DataprofilerCoreException(DefaultMessagesImpl.getString(""String_Node_Str"",analysis.getName(),urlString,saved.getMessage()));
  }
  treeViewer.setDirty(false);
  dataFilterComp.setDirty(false);
}",0.8878730158730159
138313,"/** 
 * @param outputFolder
 * @throws DataprofilerCoreException
 */
public void saveAnalysis() throws DataprofilerCoreException {
  columnSetAnalysisHandler.setName(columnSetAnalysisHandler.getName().replace(""String_Node_Str"",""String_Node_Str""));
  for (  Domain domain : this.analysis.getParameters().getDataFilter()) {
    domain.setName(this.analysis.getName());
  }
  IRepositoryViewObject reposObject=null;
  columnSetAnalysisHandler.clearAnalysis();
  simpleStatIndicator.getAnalyzedColumns().clear();
  allMatchIndicator.getAnalyzedColumns().clear();
  Analysis analysis=columnSetAnalysisHandler.getAnalysis();
  analysis.getParameters().setExecutionLanguage(ExecutionLanguage.get(execLang));
  columnSetAnalysisHandler.setStringDataFilter(dataFilterComp.getDataFilterString());
  List<IRepositoryNode> repositoryNodes=treeViewer.getColumnSetMultiValueList();
  Connection tdProvider=null;
  if (repositoryNodes != null && repositoryNodes.size() != 0) {
    ConnectionItem item=(ConnectionItem)repositoryNodes.get(0).getObject().getProperty().getItem();
    tdProvider=item.getConnection();
    if (tdProvider.eIsProxy()) {
      tdProvider=(Connection)EObjectHelper.resolveObject(tdProvider);
    }
    analysis.getContext().setConnection(tdProvider);
    List<ModelElement> columnList=new ArrayList<ModelElement>();
    for (    IRepositoryNode rd : repositoryNodes) {
      reposObject=rd.getObject();
      if (rd instanceof MDMXmlElementRepNode) {
        columnList.add((ModelElement)((MetadataXmlElementTypeRepositoryObject)reposObject).getTdXmlElementType());
      }
 else {
        columnList.add((ModelElement)((MetadataColumnRepositoryObject)reposObject).getTdColumn());
      }
    }
    simpleStatIndicator.getAnalyzedColumns().addAll(columnList);
    columnSetAnalysisHandler.addIndicator(columnList,simpleStatIndicator);
    allMatchIndicator.getCompositeRegexMatchingIndicators().clear();
    ModelElementIndicator[] modelElementIndicator=treeViewer.getModelElementIndicator();
    if (modelElementIndicator != null) {
      for (      ModelElementIndicator modelElementInd : modelElementIndicator) {
        Indicator[] inds=modelElementInd.getPatternIndicators();
        for (        Indicator ind : inds) {
          if (ind instanceof RegexpMatchingIndicator) {
            ind.setAnalyzedElement(((MetadataColumnRepositoryObject)modelElementInd.getModelElementRepositoryNode().getObject()).getTdColumn());
            allMatchIndicator.getCompositeRegexMatchingIndicators().add((RegexpMatchingIndicator)ind);
          }
        }
      }
    }
    if (allMatchIndicator.getCompositeRegexMatchingIndicators().size() > 0) {
      allMatchIndicator.getAnalyzedColumns().addAll(columnList);
      columnSetAnalysisHandler.addIndicator(columnList,allMatchIndicator);
    }
  }
 else {
    tdProvider=(Connection)analysis.getContext().getConnection();
    if (tdProvider != null && tdProvider.getSupplierDependency().size() > 0) {
      tdProvider.getSupplierDependency().get(0).getClient().remove(analysis);
      analysis.getContext().setConnection(null);
      analysis.getClientDependency().clear();
    }
  }
  String urlString=analysis.eResource() != null ? analysis.eResource().getURI().toFileString() : PluginConstant.EMPTY_STRING;
  this.updateAnalysisClientDependency();
  ReturnCode saved=new ReturnCode(false);
  IEditorInput editorInput=this.getEditorInput();
  if (editorInput instanceof AnalysisItemEditorInput) {
    AnalysisItemEditorInput analysisInput=(AnalysisItemEditorInput)editorInput;
    TDQAnalysisItem tdqAnalysisItem=analysisInput.getTDQAnalysisItem();
    tdqAnalysisItem.getProperty().setLabel(columnSetAnalysisHandler.getName());
    this.nameText.setText(columnSetAnalysisHandler.getName());
    saved=ElementWriterFactory.getInstance().createAnalysisWrite().save(tdqAnalysisItem);
  }
  if (saved.isOk()) {
    RepositoryNode node=RepositoryNodeHelper.recursiveFind(tdProvider);
    if (node != null) {
      ElementWriterFactory.getInstance().createDataProviderWriter().save(node.getObject().getProperty().getItem());
    }
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + urlString + ""String_Node_Str"");
    }
  }
 else {
    throw new DataprofilerCoreException(DefaultMessagesImpl.getString(""String_Node_Str"",analysis.getName(),urlString,saved.getMessage()));
  }
  treeViewer.setDirty(false);
  dataFilterComp.setDirty(false);
}","/** 
 * @param outputFolder
 * @throws DataprofilerCoreException
 */
public void saveAnalysis() throws DataprofilerCoreException {
  columnSetAnalysisHandler.setName(columnSetAnalysisHandler.getName().replace(""String_Node_Str"",""String_Node_Str""));
  for (  Domain domain : this.analysis.getParameters().getDataFilter()) {
    domain.setName(this.analysis.getName());
  }
  IRepositoryViewObject reposObject=null;
  columnSetAnalysisHandler.clearAnalysis();
  simpleStatIndicator.getAnalyzedColumns().clear();
  allMatchIndicator.getAnalyzedColumns().clear();
  Analysis analysis=columnSetAnalysisHandler.getAnalysis();
  analysis.getParameters().setExecutionLanguage(ExecutionLanguage.get(execLang));
  columnSetAnalysisHandler.setStringDataFilter(dataFilterComp.getDataFilterString());
  List<IRepositoryNode> repositoryNodes=treeViewer.getColumnSetMultiValueList();
  Connection tdProvider=null;
  if (repositoryNodes != null && repositoryNodes.size() != 0) {
    ConnectionItem item=(ConnectionItem)repositoryNodes.get(0).getObject().getProperty().getItem();
    tdProvider=item.getConnection();
    if (tdProvider.eIsProxy()) {
      tdProvider=(Connection)EObjectHelper.resolveObject(tdProvider);
    }
    analysis.getContext().setConnection(tdProvider);
    List<ModelElement> columnList=new ArrayList<ModelElement>();
    for (    IRepositoryNode rd : repositoryNodes) {
      reposObject=rd.getObject();
      if (rd instanceof MDMXmlElementRepNode) {
        columnList.add((ModelElement)((MetadataXmlElementTypeRepositoryObject)reposObject).getTdXmlElementType());
      }
 else {
        columnList.add((ModelElement)((MetadataColumnRepositoryObject)reposObject).getTdColumn());
      }
    }
    simpleStatIndicator.getAnalyzedColumns().addAll(columnList);
    columnSetAnalysisHandler.addIndicator(columnList,simpleStatIndicator);
    allMatchIndicator.getCompositeRegexMatchingIndicators().clear();
    ModelElementIndicator[] modelElementIndicator=treeViewer.getModelElementIndicator();
    if (modelElementIndicator != null) {
      for (      ModelElementIndicator modelElementInd : modelElementIndicator) {
        Indicator[] inds=modelElementInd.getPatternIndicators();
        for (        Indicator ind : inds) {
          if (ind instanceof RegexpMatchingIndicator) {
            ind.setAnalyzedElement(((MetadataColumnRepositoryObject)modelElementInd.getModelElementRepositoryNode().getObject()).getTdColumn());
            allMatchIndicator.getCompositeRegexMatchingIndicators().add((RegexpMatchingIndicator)ind);
          }
        }
      }
    }
    if (allMatchIndicator.getCompositeRegexMatchingIndicators().size() > 0) {
      allMatchIndicator.getAnalyzedColumns().addAll(columnList);
      columnSetAnalysisHandler.addIndicator(columnList,allMatchIndicator);
    }
  }
 else {
    tdProvider=(Connection)analysis.getContext().getConnection();
    if (tdProvider != null && tdProvider.getSupplierDependency().size() > 0) {
      tdProvider.getSupplierDependency().get(0).getClient().remove(analysis);
      analysis.getContext().setConnection(null);
      analysis.getClientDependency().clear();
    }
  }
  String urlString=analysis.eResource() != null ? analysis.eResource().getURI().toFileString() : PluginConstant.EMPTY_STRING;
  this.updateAnalysisClientDependency();
  ReturnCode saved=new ReturnCode(false);
  IEditorInput editorInput=this.getEditorInput();
  if (editorInput instanceof AnalysisItemEditorInput) {
    AnalysisItemEditorInput analysisInput=(AnalysisItemEditorInput)editorInput;
    TDQAnalysisItem tdqAnalysisItem=analysisInput.getTDQAnalysisItem();
    if (tdqAnalysisItem.eIsProxy()) {
      tdqAnalysisItem=(TDQAnalysisItem)EObjectHelper.resolveObject(tdqAnalysisItem);
    }
    tdqAnalysisItem.getProperty().setLabel(columnSetAnalysisHandler.getName());
    this.nameText.setText(columnSetAnalysisHandler.getName());
    saved=ElementWriterFactory.getInstance().createAnalysisWrite().save(tdqAnalysisItem);
  }
  if (saved.isOk()) {
    RepositoryNode node=RepositoryNodeHelper.recursiveFind(tdProvider);
    if (node != null) {
      ElementWriterFactory.getInstance().createDataProviderWriter().save(node.getObject().getProperty().getItem());
    }
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + urlString + ""String_Node_Str"");
    }
  }
 else {
    throw new DataprofilerCoreException(DefaultMessagesImpl.getString(""String_Node_Str"",analysis.getName(),urlString,saved.getMessage()));
  }
  treeViewer.setDirty(false);
  dataFilterComp.setDirty(false);
}",0.8973069616716952
138314,"@Override protected void saveAnalysis() throws DataprofilerCoreException {
  this.analysis.setName(this.analysis.getName().replace(""String_Node_Str"",""String_Node_Str""));
  for (  Domain domain : this.analysis.getParameters().getDataFilter()) {
    domain.setName(this.analysis.getName());
  }
  IRepositoryViewObject reposObject=null;
  getAnalysisHandler().clearAnalysis();
  List<ModelElement> analysedElements=new ArrayList<ModelElement>();
  anaColumnCompareViewer.setColumnABForMatchingIndicator(rowMatchingIndicatorA,anaColumnCompareViewer.getColumnListA(),anaColumnCompareViewer.getColumnListB());
  anaColumnCompareViewer.setColumnABForMatchingIndicator(rowMatchingIndicatorB,anaColumnCompareViewer.getColumnListB(),anaColumnCompareViewer.getColumnListA());
  Connection tdDataProvider=null;
  for (int i=0; i < anaColumnCompareViewer.getColumnListA().size(); i++) {
    reposObject=anaColumnCompareViewer.getColumnListA().get(i).getObject();
    analysedElements.add(((MetadataColumnRepositoryObject)reposObject).getTdColumn());
  }
  for (int i=0; i < anaColumnCompareViewer.getColumnListB().size(); i++) {
    reposObject=anaColumnCompareViewer.getColumnListB().get(i).getObject();
    analysedElements.add(((MetadataColumnRepositoryObject)reposObject).getTdColumn());
  }
  if (analysedElements.size() > 0) {
    tdDataProvider=ConnectionHelper.getTdDataProvider((TdColumn)analysedElements.get(0));
    analysis.getContext().setConnection(tdDataProvider);
    analysis.getContext().setConnection(tdDataProvider);
    TypedReturnCode<Dependency> rc=DependenciesHandler.getInstance().setDependencyOn(analysis,tdDataProvider);
    if (!rc.isOk()) {
      log.info(""String_Node_Str"" + analysis.getFileName());
    }
  }
 else {
    tdDataProvider=(Connection)analysis.getContext().getConnection();
    if (tdDataProvider != null) {
      tdDataProvider.getSupplierDependency().get(0).getClient().remove(analysis);
      analysis.getContext().setConnection(null);
      analysis.getClientDependency().clear();
    }
  }
  AnalysisBuilder anaBuilder=new AnalysisBuilder();
  anaBuilder.setAnalysis(this.analysis);
  if (anaColumnCompareViewer.getCheckComputeButton().getSelection()) {
    analysis.getParameters().getDeactivatedIndicators().add(rowMatchingIndicatorB);
  }
 else {
    analysis.getParameters().getDeactivatedIndicators().clear();
  }
  anaBuilder.addElementsToAnalyze(analysedElements.toArray(new ModelElement[analysedElements.size()]),new Indicator[]{rowMatchingIndicatorA,rowMatchingIndicatorB});
  this.updateAnalysisClientDependency();
  ReturnCode saved=new ReturnCode(false);
  IEditorInput editorInput=this.getEditorInput();
  if (editorInput instanceof AnalysisItemEditorInput) {
    AnalysisItemEditorInput analysisInput=(AnalysisItemEditorInput)editorInput;
    TDQAnalysisItem tdqAnalysisItem=analysisInput.getTDQAnalysisItem();
    tdqAnalysisItem.getProperty().setLabel(analysis.getName());
    this.nameText.setText(analysis.getName());
    saved=ElementWriterFactory.getInstance().createAnalysisWrite().save(tdqAnalysisItem);
  }
  if (saved.isOk()) {
    RepositoryNode node=RepositoryNodeHelper.recursiveFind(tdDataProvider);
    if (node != null) {
      ElementWriterFactory.getInstance().createDataProviderWriter().save(node.getObject().getProperty().getItem());
    }
    log.info(""String_Node_Str"" + analysis.getFileName());
  }
}","@Override protected void saveAnalysis() throws DataprofilerCoreException {
  this.analysis.setName(this.analysis.getName().replace(""String_Node_Str"",""String_Node_Str""));
  for (  Domain domain : this.analysis.getParameters().getDataFilter()) {
    domain.setName(this.analysis.getName());
  }
  IRepositoryViewObject reposObject=null;
  getAnalysisHandler().clearAnalysis();
  List<ModelElement> analysedElements=new ArrayList<ModelElement>();
  anaColumnCompareViewer.setColumnABForMatchingIndicator(rowMatchingIndicatorA,anaColumnCompareViewer.getColumnListA(),anaColumnCompareViewer.getColumnListB());
  anaColumnCompareViewer.setColumnABForMatchingIndicator(rowMatchingIndicatorB,anaColumnCompareViewer.getColumnListB(),anaColumnCompareViewer.getColumnListA());
  Connection tdDataProvider=null;
  for (int i=0; i < anaColumnCompareViewer.getColumnListA().size(); i++) {
    reposObject=anaColumnCompareViewer.getColumnListA().get(i).getObject();
    analysedElements.add(((MetadataColumnRepositoryObject)reposObject).getTdColumn());
  }
  for (int i=0; i < anaColumnCompareViewer.getColumnListB().size(); i++) {
    reposObject=anaColumnCompareViewer.getColumnListB().get(i).getObject();
    analysedElements.add(((MetadataColumnRepositoryObject)reposObject).getTdColumn());
  }
  if (analysedElements.size() > 0) {
    tdDataProvider=ConnectionHelper.getTdDataProvider((TdColumn)analysedElements.get(0));
    analysis.getContext().setConnection(tdDataProvider);
    analysis.getContext().setConnection(tdDataProvider);
    TypedReturnCode<Dependency> rc=DependenciesHandler.getInstance().setDependencyOn(analysis,tdDataProvider);
    if (!rc.isOk()) {
      log.info(""String_Node_Str"" + analysis.getFileName());
    }
  }
 else {
    tdDataProvider=(Connection)analysis.getContext().getConnection();
    if (tdDataProvider != null) {
      tdDataProvider.getSupplierDependency().get(0).getClient().remove(analysis);
      analysis.getContext().setConnection(null);
      analysis.getClientDependency().clear();
    }
  }
  AnalysisBuilder anaBuilder=new AnalysisBuilder();
  anaBuilder.setAnalysis(this.analysis);
  if (anaColumnCompareViewer.getCheckComputeButton().getSelection()) {
    analysis.getParameters().getDeactivatedIndicators().add(rowMatchingIndicatorB);
  }
 else {
    analysis.getParameters().getDeactivatedIndicators().clear();
  }
  anaBuilder.addElementsToAnalyze(analysedElements.toArray(new ModelElement[analysedElements.size()]),new Indicator[]{rowMatchingIndicatorA,rowMatchingIndicatorB});
  this.updateAnalysisClientDependency();
  ReturnCode saved=new ReturnCode(false);
  IEditorInput editorInput=this.getEditorInput();
  if (editorInput instanceof AnalysisItemEditorInput) {
    AnalysisItemEditorInput analysisInput=(AnalysisItemEditorInput)editorInput;
    TDQAnalysisItem tdqAnalysisItem=analysisInput.getTDQAnalysisItem();
    if (tdqAnalysisItem.eIsProxy()) {
      tdqAnalysisItem=(TDQAnalysisItem)EObjectHelper.resolveObject(tdqAnalysisItem);
    }
    tdqAnalysisItem.getProperty().setLabel(analysis.getName());
    this.nameText.setText(analysis.getName());
    saved=ElementWriterFactory.getInstance().createAnalysisWrite().save(tdqAnalysisItem);
  }
  if (saved.isOk()) {
    RepositoryNode node=RepositoryNodeHelper.recursiveFind(tdDataProvider);
    if (node != null) {
      ElementWriterFactory.getInstance().createDataProviderWriter().save(node.getObject().getProperty().getItem());
    }
    log.info(""String_Node_Str"" + analysis.getFileName());
  }
}",0.8748000581648975
138315,"@Override public void saveAnalysis() throws DataprofilerCoreException {
  analysis.setName(analysis.getName().replace(""String_Node_Str"",""String_Node_Str""));
  for (  Domain domain : this.analysis.getParameters().getDataFilter()) {
    domain.setName(this.analysis.getName());
  }
  IRepositoryViewObject reposObject=null;
  analysisHandler.clearAnalysis();
  TableIndicator[] tableIndicators=treeViewer.getTableIndicator();
  Connection tdProvider=null;
  Analysis analysis=analysisHandler.getAnalysis();
  analysis.getParameters().setExecutionLanguage(ExecutionLanguage.get(execLang));
  if (tableIndicators != null && tableIndicators.length != 0) {
    tdProvider=ConnectionHelper.getDataProvider(tableIndicators[0].getColumnSet());
    if (tdProvider.eIsProxy()) {
      tdProvider=(Connection)EObjectHelper.resolveObject(tdProvider);
    }
    analysis.getContext().setConnection(tdProvider);
    for (    TableIndicator tableIndicator : tableIndicators) {
      analysisHandler.addIndicator(tableIndicator.getColumnSet(),tableIndicator.getIndicators());
    }
  }
 else {
    tdProvider=(Connection)analysis.getContext().getConnection();
    if (tdProvider != null && tdProvider.getSupplierDependency().size() > 0) {
      tdProvider.getSupplierDependency().get(0).getClient().remove(analysis);
      analysis.getContext().setConnection(null);
      analysis.getClientDependency().clear();
    }
  }
  analysisHandler.setStringDataFilter(dataFilterComp.getDataFilterString());
  String urlString=analysis.eResource() != null ? analysis.eResource().getURI().toFileString() : PluginConstant.EMPTY_STRING;
  this.updateAnalysisClientDependency();
  ReturnCode saved=new ReturnCode(false);
  IEditorInput editorInput=this.getEditorInput();
  if (editorInput instanceof AnalysisItemEditorInput) {
    AnalysisItemEditorInput analysisInput=(AnalysisItemEditorInput)editorInput;
    TDQAnalysisItem tdqAnalysisItem=analysisInput.getTDQAnalysisItem();
    tdqAnalysisItem.getProperty().setLabel(analysisHandler.getName());
    this.nameText.setText(analysisHandler.getName());
    saved=ElementWriterFactory.getInstance().createAnalysisWrite().save(tdqAnalysisItem);
  }
  if (saved.isOk()) {
    RepositoryNode node=RepositoryNodeHelper.recursiveFind(tdProvider);
    if (node != null) {
      ElementWriterFactory.getInstance().createDataProviderWriter().save(node.getObject().getProperty().getItem());
    }
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + urlString + ""String_Node_Str"");
    }
  }
 else {
    throw new DataprofilerCoreException(DefaultMessagesImpl.getString(""String_Node_Str"",analysis.getName(),urlString,saved.getMessage()));
  }
  treeViewer.setDirty(false);
  dataFilterComp.setDirty(false);
}","@Override public void saveAnalysis() throws DataprofilerCoreException {
  analysis.setName(analysis.getName().replace(""String_Node_Str"",""String_Node_Str""));
  for (  Domain domain : this.analysis.getParameters().getDataFilter()) {
    domain.setName(this.analysis.getName());
  }
  IRepositoryViewObject reposObject=null;
  analysisHandler.clearAnalysis();
  TableIndicator[] tableIndicators=treeViewer.getTableIndicator();
  Connection tdProvider=null;
  Analysis analysis=analysisHandler.getAnalysis();
  analysis.getParameters().setExecutionLanguage(ExecutionLanguage.get(execLang));
  if (tableIndicators != null && tableIndicators.length != 0) {
    tdProvider=ConnectionHelper.getDataProvider(tableIndicators[0].getColumnSet());
    if (tdProvider.eIsProxy()) {
      tdProvider=(Connection)EObjectHelper.resolveObject(tdProvider);
    }
    analysis.getContext().setConnection(tdProvider);
    for (    TableIndicator tableIndicator : tableIndicators) {
      analysisHandler.addIndicator(tableIndicator.getColumnSet(),tableIndicator.getIndicators());
    }
  }
 else {
    tdProvider=(Connection)analysis.getContext().getConnection();
    if (tdProvider != null && tdProvider.getSupplierDependency().size() > 0) {
      tdProvider.getSupplierDependency().get(0).getClient().remove(analysis);
      analysis.getContext().setConnection(null);
      analysis.getClientDependency().clear();
    }
  }
  analysisHandler.setStringDataFilter(dataFilterComp.getDataFilterString());
  String urlString=analysis.eResource() != null ? analysis.eResource().getURI().toFileString() : PluginConstant.EMPTY_STRING;
  this.updateAnalysisClientDependency();
  ReturnCode saved=new ReturnCode(false);
  IEditorInput editorInput=this.getEditorInput();
  if (editorInput instanceof AnalysisItemEditorInput) {
    AnalysisItemEditorInput analysisInput=(AnalysisItemEditorInput)editorInput;
    TDQAnalysisItem tdqAnalysisItem=analysisInput.getTDQAnalysisItem();
    if (tdqAnalysisItem.eIsProxy()) {
      tdqAnalysisItem=(TDQAnalysisItem)EObjectHelper.resolveObject(tdqAnalysisItem);
    }
    tdqAnalysisItem.getProperty().setLabel(analysisHandler.getName());
    this.nameText.setText(analysisHandler.getName());
    saved=ElementWriterFactory.getInstance().createAnalysisWrite().save(tdqAnalysisItem);
  }
  if (saved.isOk()) {
    RepositoryNode node=RepositoryNodeHelper.recursiveFind(tdProvider);
    if (node != null) {
      ElementWriterFactory.getInstance().createDataProviderWriter().save(node.getObject().getProperty().getItem());
    }
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + urlString + ""String_Node_Str"");
    }
  }
 else {
    throw new DataprofilerCoreException(DefaultMessagesImpl.getString(""String_Node_Str"",analysis.getName(),urlString,saved.getMessage()));
  }
  treeViewer.setDirty(false);
  dataFilterComp.setDirty(false);
}",0.842236912631767
138316,"/** 
 * @return query string for full table select
 */
private String createTableSelect(){
  TableNode node=(TableNode)_selectedNodes[0];
  StringBuffer query=new StringBuffer(""String_Node_Str"");
  String sep=""String_Node_Str"";
  List columnNames=node.getColumnNames();
  Iterator it=columnNames.iterator();
  while (it.hasNext()) {
    query.append(sep);
    String column=(String)it.next();
    query.append(quote(column,getQuoteString(node)));
    sep=""String_Node_Str"";
  }
  query.append(""String_Node_Str"");
  query.append(node.getQualifiedName());
  return query.toString();
}","/** 
 * @return query string for full table select
 */
private String createTableSelect(){
  TableNode node=(TableNode)_selectedNodes[0];
  StringBuffer query=new StringBuffer(""String_Node_Str"");
  String sep=""String_Node_Str"";
  List columnNames=node.getColumnNames();
  Iterator it=columnNames.iterator();
  while (it.hasNext()) {
    query.append(sep);
    String column=(String)it.next();
    query.append(quote(column,getQuoteString(node)));
    sep=""String_Node_Str"";
  }
  query.append(""String_Node_Str"");
  query.append(fixTableName(node.getQualifiedName()));
  return query.toString();
}",0.9881154499151104
138317,"/** 
 * @return query string for full table select
 */
private String createColumnSelect(){
  StringBuffer query=new StringBuffer(""String_Node_Str"");
  String sep=""String_Node_Str"";
  String table=""String_Node_Str"";
  for (int i=0; i < _selectedNodes.length; i++) {
    INode node=_selectedNodes[i];
    if (node instanceof ColumnNode) {
      ColumnNode column=(ColumnNode)node;
      if (table.length() == 0) {
        table=column.getQualifiedParentTableName();
      }
      if (column.getQualifiedParentTableName().equals(table)) {
        query.append(sep);
        query.append(quote(column.getName(),getQuoteString(column)));
        sep=""String_Node_Str"";
      }
    }
  }
  query.append(""String_Node_Str"");
  query.append(table);
  return query.toString();
}","/** 
 * @return query string for full table select
 */
private String createColumnSelect(){
  StringBuffer query=new StringBuffer(""String_Node_Str"");
  String sep=""String_Node_Str"";
  String table=""String_Node_Str"";
  for (int i=0; i < _selectedNodes.length; i++) {
    INode node=_selectedNodes[i];
    if (node instanceof ColumnNode) {
      ColumnNode column=(ColumnNode)node;
      if (table.length() == 0) {
        table=column.getQualifiedParentTableName();
      }
      if (column.getQualifiedParentTableName().equals(table)) {
        query.append(sep);
        query.append(quote(column.getName(),getQuoteString(column)));
        sep=""String_Node_Str"";
      }
    }
  }
  query.append(""String_Node_Str"");
  query.append(fixTableName(table));
  return query.toString();
}",0.9845360824742267
138318,"private void moveConnectionRepNode(IRepositoryNode sourceNode,IRepositoryNode targetNode) throws PersistenceException {
  IRepositoryViewObject objectToMove=sourceNode.getObject();
  ConnectionItem item=(ConnectionItem)objectToMove.getProperty().getItem();
  IPath fullPath=ResourceManager.getReportsFolder().getFullPath();
  if (targetNode.getType() == ENodeType.SIMPLE_FOLDER) {
    moveObject(objectToMove,sourceNode,targetNode,fullPath.makeRelativeTo(ResourceManager.getRootProject().getFullPath()));
  }
 else   if (targetNode.getType() == ENodeType.SYSTEM_FOLDER) {
    moveObject(objectToMove,sourceNode,targetNode,Path.EMPTY);
  }
  CorePlugin.getDefault().refreshDQView(targetNode.getParent());
  this.updateConnectionDependency(item);
}","private void moveConnectionRepNode(IRepositoryNode sourceNode,IRepositoryNode targetNode) throws PersistenceException {
  IRepositoryViewObject objectToMove=sourceNode.getObject();
  ConnectionItem item=(ConnectionItem)objectToMove.getProperty().getItem();
  IPath fullPath=Path.EMPTY;
  if (targetNode.getParent() instanceof DBConnectionFolderRepNode) {
    fullPath=ResourceManager.getConnectionFolder().getFullPath();
  }
 else   if (targetNode.getParent() instanceof DFConnectionFolderRepNode) {
    fullPath=ResourceManager.getFileDelimitedFolder().getFullPath();
  }
 else   if (targetNode.getParent() instanceof MDMConnectionFolderRepNode || targetNode.getParent() instanceof MDMConnectionSubFolderRepNode) {
    fullPath=ResourceManager.getMDMConnectionFolder().getFullPath();
  }
  if (targetNode.getType() == ENodeType.SIMPLE_FOLDER) {
    moveObject(objectToMove,sourceNode,targetNode,fullPath.makeRelativeTo(ResourceManager.getRootProject().getFullPath()));
  }
 else   if (targetNode.getType() == ENodeType.SYSTEM_FOLDER) {
    moveObject(objectToMove,sourceNode,targetNode,Path.EMPTY);
  }
  CorePlugin.getDefault().refreshDQView(targetNode.getParent());
  this.updateConnectionDependency(item);
}",0.7133367399080225
138319,"@Override protected ReturnCode executeSqlQuery(String sqlStatement) throws SQLException {
  ReturnCode ok=new ReturnCode(true);
  DataProvider dataProvider=this.getDataManager();
  if (this.elementToIndicators.values().isEmpty()) {
    String msg=""String_Node_Str"";
    log.error(msg);
    ok.setReturnCode(msg,false);
    return ok;
  }
  Indicator[] indics=this.getAllIndicators();
  if (indics.length == 0) {
    String msg=""String_Node_Str"" + dataProvider;
    log.error(msg);
    ok.setReturnCode(msg,false);
    return ok;
  }
  for (  Indicator indicator : indics) {
    SchemaIndicator schemaIndicator=DataqualitySwitchHelper.SCHEMA_SWITCH.doSwitch(indicator);
    if (schemaIndicator == null) {
      continue;
    }
    Schema schema=(Schema)schemaIndicator.getAnalyzedElement();
    String catName=schema.getName();
    if (!checkSchema(schema)) {
      ok.setReturnCode(Messages.getString(""String_Node_Str"",catName),false);
      return ok;
    }
    EObject container=schema.eContainer();
    if (container != null) {
      Catalog catalog=SwitchHelpers.CATALOG_SWITCH.doSwitch(container);
      if (catalog != null) {
        catName=catalog.getName();
      }
    }
    if (!ConnectionUtils.isOdbcProgress(connection)) {
      connection.setCatalog(catName);
    }
    evalSchemaIndicLow(null,schemaIndicator,null,schema,ok);
  }
  return ok;
}","@Override protected ReturnCode executeSqlQuery(String sqlStatement) throws SQLException {
  ReturnCode ok=new ReturnCode(true);
  DataProvider dataProvider=this.getDataManager();
  if (this.elementToIndicators.values().isEmpty()) {
    String msg=""String_Node_Str"";
    log.error(msg);
    ok.setReturnCode(msg,false);
    return ok;
  }
  Indicator[] indics=this.getAllIndicators();
  if (indics.length == 0) {
    String msg=""String_Node_Str"" + dataProvider;
    log.error(msg);
    ok.setReturnCode(msg,false);
    return ok;
  }
  for (  Indicator indicator : indics) {
    SchemaIndicator schemaIndicator=DataqualitySwitchHelper.SCHEMA_SWITCH.doSwitch(indicator);
    if (schemaIndicator == null) {
      continue;
    }
    Schema schema=(Schema)schemaIndicator.getAnalyzedElement();
    String catName=schema.getName();
    if (!checkSchema(schema)) {
      ok.setReturnCode(Messages.getString(""String_Node_Str"",catName),false);
      return ok;
    }
    EObject container=schema.eContainer();
    if (container != null) {
      Catalog catalog=SwitchHelpers.CATALOG_SWITCH.doSwitch(container);
      if (catalog != null) {
        catName=catalog.getName();
      }
    }
    if (!ConnectionUtils.isOdbcProgress(connection) && !ConnectionUtils.isOdbcOracle(connection)) {
      connection.setCatalog(catName);
    }
    evalSchemaIndicLow(null,schemaIndicator,null,schema,ok);
  }
  return ok;
}",0.98371335504886
138320,"/** 
 * DOC scorreia Comment method ""getRowCounts"".
 * @param schemaIndic
 * @param quCatalog
 * @param quSchema
 * @param quTable
 * @return
 * @throws SQLException
 */
private long getRowCounts(String quCatalog,String quSchema,String quTable) throws SQLException {
  String sqlStatement=SELECT_COUNT_FROM + dbms().toQualifiedName(quCatalog,quSchema,quTable);
  Statement statement=connection.createStatement(ResultSet.TYPE_FORWARD_ONLY,ResultSet.CONCUR_READ_ONLY);
  long totalRowCount=0;
  try {
    if (log.isInfoEnabled()) {
      log.info(""String_Node_Str"" + sqlStatement);
    }
    if (continueRun()) {
      statement.execute(sqlStatement);
    }
  }
 catch (  SQLException e) {
    statement.close();
    log.warn(e.getMessage() + ""String_Node_Str"" + sqlStatement);
    if (log.isDebugEnabled()) {
      log.debug(e,e);
    }
    reloadConnectionAfterException(quCatalog);
    return totalRowCount;
  }
  ResultSet resultSet=statement.getResultSet();
  if (resultSet == null) {
    String mess=""String_Node_Str"" + sqlStatement;
    log.warn(mess);
  }
 else {
    while (resultSet != null && resultSet.next()) {
      if (!continueRun()) {
        break;
      }
      String str=String.valueOf(resultSet.getObject(1));
      Long count=Long.valueOf(str);
      totalRowCount+=count;
      if (log.isDebugEnabled()) {
        log.debug(quCatalog + ""String_Node_Str"" + quSchema+ ""String_Node_Str""+ quTable+ ""String_Node_Str""+ count);
      }
    }
    resultSet.close();
  }
  statement.close();
  return totalRowCount;
}","/** 
 * DOC scorreia Comment method ""getRowCounts"".
 * @param schemaIndic
 * @param quCatalog
 * @param quSchema
 * @param quTable
 * @return
 * @throws SQLException
 */
private long getRowCounts(String quCatalog,String quSchema,String quTable) throws SQLException {
  String sqlStatement=SELECT_COUNT_FROM + dbms().toQualifiedName(quCatalog,quSchema,quTable);
  Statement statement=connection.createStatement(ResultSet.TYPE_FORWARD_ONLY,ResultSet.CONCUR_READ_ONLY);
  long totalRowCount=0;
  try {
    if (log.isInfoEnabled()) {
      log.info(""String_Node_Str"" + sqlStatement);
    }
    if (continueRun()) {
      statement.execute(sqlStatement);
    }
  }
 catch (  SQLException e) {
    statement.close();
    log.warn(e.getMessage() + ""String_Node_Str"" + sqlStatement);
    if (log.isDebugEnabled()) {
      log.debug(e,e);
    }
    reloadConnectionAfterException(quCatalog);
    return totalRowCount;
  }
  ResultSet resultSet=statement.getResultSet();
  if (resultSet == null) {
    String mess=""String_Node_Str"" + sqlStatement;
    log.warn(mess);
  }
 else {
    while (resultSet != null && resultSet.next()) {
      if (!continueRun()) {
        break;
      }
      String str=String.valueOf(resultSet.getObject(1));
      Long count=IndicatorImpl.getLongFromObject(str);
      totalRowCount+=count;
      if (log.isDebugEnabled()) {
        log.debug(quCatalog + ""String_Node_Str"" + quSchema+ ""String_Node_Str""+ quTable+ ""String_Node_Str""+ count);
      }
    }
    resultSet.close();
  }
  statement.close();
  return totalRowCount;
}",0.989282234491718
138321,"/** 
 * DOC scorreia Comment method ""computeUniqueCount"".
 * @param objects
 * @return
 */
private boolean computeCounts(List<Object[]> objects){
  boolean ok=true;
  this.setDistinctCount(Long.valueOf(objects.size()));
  Long uniq=0L;
  Long rowcount=0L;
  for (  Object[] row : objects) {
    Object c=row[row.length - 1];
    if (c != null) {
      Long val=Long.valueOf(String.valueOf(c));
      rowcount+=val;
      if (val == 1) {
        uniq++;
      }
    }
 else {
      ok=false;
    }
  }
  this.setCount(rowcount);
  this.setUniqueCount(uniq);
  return ok;
}","/** 
 * DOC scorreia Comment method ""computeUniqueCount"".
 * @param objects
 * @return
 */
private boolean computeCounts(List<Object[]> objects){
  boolean ok=true;
  this.setDistinctCount(Long.valueOf(objects.size()));
  Long uniq=0L;
  Long rowcount=0L;
  for (  Object[] row : objects) {
    Object c=row[row.length - 1];
    if (c != null) {
      Long val=Long.valueOf(getLongFromObject(String.valueOf(c)));
      rowcount+=val;
      if (val == 1) {
        uniq++;
      }
    }
 else {
      ok=false;
    }
  }
  this.setCount(rowcount);
  this.setUniqueCount(uniq);
  return ok;
}",0.983634797588286
138322,"/** 
 * DOC jet Comment method ""getNBDistinct"".
 * @param myResultSet
 * @return
 */
private static Long getNBDistinct(List<Object[]> myResultSet){
  if (myResultSet.size() == 1 && myResultSet.get(0).length == 2) {
    return Long.valueOf(String.valueOf(myResultSet.get(0)[1]));
  }
  return null;
}","/** 
 * DOC jet Comment method ""getNBDistinct"".
 * @param myResultSet
 * @return
 */
private static Long getNBDistinct(List<Object[]> myResultSet){
  if (myResultSet.size() == 1 && myResultSet.get(0).length == 2) {
    return Long.valueOf(IndicatorImpl.getLongFromObject(String.valueOf(myResultSet.get(0)[1])));
  }
  return null;
}",0.94770206022187
138323,"private static Long getNB(List<Object[]> myResultSet){
  if (myResultSet.size() == 1 && myResultSet.get(0).length == 2) {
    return Long.valueOf(String.valueOf(myResultSet.get(0)[0]));
  }
  return null;
}","private static Long getNB(List<Object[]> myResultSet){
  if (myResultSet.size() == 1 && myResultSet.get(0).length == 2) {
    return IndicatorImpl.getLongFromObject(String.valueOf(myResultSet.get(0)[0]));
  }
  return null;
}",0.9234338747099768
138324,"@Override public boolean storeSqlResults(List<Object[]> objects){
  if (!checkResults(objects,1)) {
    return false;
  }
  Long c=Long.valueOf(String.valueOf(objects.get(0)[0]));
  this.setUserCount(c);
  return true;
}","@Override public boolean storeSqlResults(List<Object[]> objects){
  if (!checkResults(objects,1)) {
    return false;
  }
  Long c=IndicatorImpl.getLongFromObject(String.valueOf(objects.get(0)[0]));
  this.setUserCount(c);
  return true;
}",0.9237472766884532
138325,"/** 
 * DOC qzhang Comment method ""createIFile"".
 * @param monitor
 * @param file
 * @param content
 * @throws CoreException
 */
private IFile createIFile(IProgressMonitor monitor,IFile file,String content) throws CoreException {
  try {
    if (GlobalServiceRegister.getDefault().isServiceRegistered(ISaveAsService.class)) {
      ISaveAsService service=(ISaveAsService)GlobalServiceRegister.getDefault().getService(ISaveAsService.class);
      String fName=StringUtils.removeEnd(file.getName(),DEFAULT_FILE_EXTENSION);
      Item item=service.createFile(content,Path.EMPTY,fName,file.getFileExtension());
      IPath location=file.getLocation();
      if (item != null && item.getProperty() != null && location != null) {
        IWorkspace workspace=ResourcesPlugin.getWorkspace();
        location=location.removeLastSegments(1);
        StringBuffer strb=new StringBuffer();
        strb.append(location.toString());
        String version=item.getProperty().getVersion() == null ? ""String_Node_Str"" : item.getProperty().getVersion();
        strb.append(Path.SEPARATOR).append(fName).append(""String_Node_Str"" + version).append(DEFAULT_FILE_EXTENSION);
        location=Path.fromOSString(strb.toString());
        file=workspace.getRoot().getFileForLocation(location);
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
 finally {
    monitor.done();
  }
  return file;
}","/** 
 * DOC qzhang Comment method ""createIFile"".
 * @param monitor
 * @param file
 * @param content
 * @throws CoreException
 */
private IFile createIFile(IFile file,String content) throws CoreException {
  try {
    if (GlobalServiceRegister.getDefault().isServiceRegistered(ISaveAsService.class)) {
      ISaveAsService service=(ISaveAsService)GlobalServiceRegister.getDefault().getService(ISaveAsService.class);
      String fName=StringUtils.removeEnd(file.getName(),DEFAULT_FILE_EXTENSION);
      IWorkspace workspace=ResourcesPlugin.getWorkspace();
      IPath rootPath=new Path(""String_Node_Str"");
      Item item=service.createFile(content,file.getProjectRelativePath().removeLastSegments(1).makeRelativeTo(rootPath),fName,file.getFileExtension());
      IPath location=file.getLocation();
      if (item != null && item.getProperty() != null && location != null) {
        location=location.removeLastSegments(1);
        StringBuffer strb=new StringBuffer();
        strb.append(location.toString());
        String version=item.getProperty().getVersion() == null ? ""String_Node_Str"" : ""String_Node_Str"" + item.getProperty().getVersion();
        strb.append(Path.SEPARATOR).append(fName).append(version).append(DEFAULT_FILE_EXTENSION);
        location=Path.fromOSString(strb.toString());
        file=workspace.getRoot().getFileForLocation(location);
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return file;
}",0.8700842696629213
138326,"@Override protected void performSaveAs(IProgressMonitor progressMonitor){
  Shell shell=getSite().getShell();
  final IEditorInput input=getEditorInput();
  IDocumentProvider provider=getDocumentProvider();
  IEditorInput newInput;
  if (input instanceof IURIEditorInput && !(input instanceof IFileEditorInput)) {
    super.performSaveAs(progressMonitor);
    return;
  }
  IProject rootProject=SQLExplorerPlugin.getDefault().getRootProject();
  final IFolder defaultValidFolder=rootProject.getFolder(""String_Node_Str"").getFolder(""String_Node_Str"");
  ILabelProvider lp=new WorkbenchLabelProvider();
  ITreeContentProvider cp=new WorkbenchContentProvider();
  FolderSelectionDialog dialog=new FolderSelectionDialog(shell,lp,cp);
  dialog.setTitle(""String_Node_Str"");
  dialog.setMessage(""String_Node_Str"");
  dialog.setInput(rootProject);
  dialog.addFilter(new ViewerFilter(){
    @Override public boolean select(    Viewer viewer,    Object parentElement,    Object element){
      if (element instanceof IFolder) {
        IFolder folder=(IFolder)element;
        if (""String_Node_Str"".equals(folder.getName()) || ""String_Node_Str"".equals(folder.getName())) {
          return true;
        }
 else {
          return defaultValidFolder.getFullPath().isPrefixOf(folder.getFullPath()) && !folder.getName().endsWith(SVN_FOLDER_NAME);
        }
      }
      return false;
    }
  }
);
  dialog.setComparator(new ResourceComparator(ResourceComparator.NAME));
  if (dialog.open() == Window.CANCEL) {
    if (progressMonitor != null)     progressMonitor.setCanceled(true);
    return;
  }
  Object elements=dialog.getResult()[0];
  String fileName=getValidFileName(dialog.getFileName());
  IResource elem=(IResource)elements;
  if (elem instanceof IFolder) {
    IPath filePath=((IFolder)elem).getFullPath();
    filePath=filePath.append(fileName);
    if (filePath == null) {
      if (progressMonitor != null)       progressMonitor.setCanceled(true);
      return;
    }
    IWorkspace workspace=ResourcesPlugin.getWorkspace();
    IFile file=workspace.getRoot().getFile(filePath);
    while (fileExist(file)) {
      InputDialog inputDialog=new InputDialog(getSite().getShell(),""String_Node_Str"",""String_Node_Str"",filePath.lastSegment(),null);
      if (inputDialog.open() == InputDialog.CANCEL) {
        return;
      }
 else {
        IPath lseg=filePath.removeLastSegments(1);
        IPath append=lseg.append(inputDialog.getValue());
        file=workspace.getRoot().getFile(append);
      }
    }
    newInput=new FileEditorInput(file);
    if (provider == null) {
      return;
    }
    boolean success=false;
    try {
      provider.aboutToChange(newInput);
      file=createIFile(progressMonitor,file,getViewer().getDocument().get());
      newInput=new FileEditorInput(file);
      success=true;
    }
 catch (    CoreException x) {
      final IStatus status=x.getStatus();
      if (status == null || status.getSeverity() != IStatus.CANCEL) {
        String title=""String_Node_Str"";
        String msg=""String_Node_Str"";
        MessageDialog.openError(shell,title,msg);
      }
    }
 finally {
      provider.changed(newInput);
      if (success)       setInput(newInput);
    }
    if (progressMonitor != null)     progressMonitor.setCanceled(!success);
  }
}","@Override protected void performSaveAs(IProgressMonitor progressMonitor){
  Shell shell=getSite().getShell();
  final IEditorInput input=getEditorInput();
  IDocumentProvider provider=getDocumentProvider();
  IEditorInput newInput;
  if (input instanceof IURIEditorInput && !(input instanceof IFileEditorInput)) {
    super.performSaveAs(progressMonitor);
    return;
  }
  IProject rootProject=SQLExplorerPlugin.getDefault().getRootProject();
  final IFolder defaultValidFolder=rootProject.getFolder(""String_Node_Str"").getFolder(""String_Node_Str"");
  ILabelProvider lp=new WorkbenchLabelProvider();
  ITreeContentProvider cp=new WorkbenchContentProvider();
  FolderSelectionDialog dialog=new FolderSelectionDialog(shell,lp,cp);
  dialog.setTitle(""String_Node_Str"");
  dialog.setMessage(""String_Node_Str"");
  dialog.setInput(rootProject);
  dialog.addFilter(new ViewerFilter(){
    @Override public boolean select(    Viewer viewer,    Object parentElement,    Object element){
      if (element instanceof IFolder) {
        IFolder folder=(IFolder)element;
        if (""String_Node_Str"".equals(folder.getName()) || ""String_Node_Str"".equals(folder.getName())) {
          return true;
        }
 else {
          return defaultValidFolder.getFullPath().isPrefixOf(folder.getFullPath()) && !folder.getName().endsWith(SVN_FOLDER_NAME);
        }
      }
      return false;
    }
  }
);
  dialog.setComparator(new ResourceComparator(ResourceComparator.NAME));
  if (dialog.open() == Window.CANCEL) {
    if (progressMonitor != null)     progressMonitor.setCanceled(true);
    return;
  }
  Object elements=dialog.getResult()[0];
  String fileName=getValidFileName(dialog.getFileName());
  IResource elem=(IResource)elements;
  if (elem instanceof IFolder) {
    IPath filePath=((IFolder)elem).getFullPath();
    filePath=filePath.append(fileName);
    if (filePath == null) {
      if (progressMonitor != null)       progressMonitor.setCanceled(true);
      return;
    }
    IWorkspace workspace=ResourcesPlugin.getWorkspace();
    IFile file=workspace.getRoot().getFile(filePath);
    while (fileExist(file)) {
      InputDialog inputDialog=new InputDialog(getSite().getShell(),""String_Node_Str"",""String_Node_Str"",filePath.lastSegment(),null);
      if (inputDialog.open() == InputDialog.CANCEL) {
        return;
      }
 else {
        IPath lseg=filePath.removeLastSegments(1);
        IPath append=lseg.append(inputDialog.getValue());
        file=workspace.getRoot().getFile(append);
      }
    }
    newInput=new FileEditorInput(file);
    if (provider == null) {
      return;
    }
    boolean success=false;
    try {
      provider.aboutToChange(newInput);
      file=createIFile(file,getViewer().getDocument().get());
      newInput=new FileEditorInput(file);
      success=true;
    }
 catch (    CoreException x) {
      final IStatus status=x.getStatus();
      if (status == null || status.getSeverity() != IStatus.CANCEL) {
        String title=""String_Node_Str"";
        String msg=""String_Node_Str"";
        MessageDialog.openError(shell,title,msg);
      }
    }
 finally {
      provider.changed(newInput);
      if (success)       setInput(newInput);
    }
    if (progressMonitor != null)     progressMonitor.setCanceled(!success);
  }
}",0.9975527684307128
138327,"@Override public List<IRepositoryNode> getChildren(boolean withDeleted){
  try {
    super.getChildren().clear();
    RootContainer<String,IRepositoryViewObject> tdqViewObjects=ProxyRepositoryFactory.getInstance().getTdqRepositoryViewObjects(getContentType(),RepositoryNodeHelper.getPath(this).toString());
    for (    Container<String,IRepositoryViewObject> container : tdqViewObjects.getSubContainer()) {
      Folder folder=new Folder((Property)container.getProperty(),ERepositoryObjectType.TDQ_JRAXML_ELEMENT);
      if (!withDeleted && folder.isDeleted()) {
        continue;
      }
      JrxmlTempSubFolderNode childNodeFolder=new JrxmlTempSubFolderNode(folder,this,ENodeType.SIMPLE_FOLDER);
      childNodeFolder.setProperties(EProperties.LABEL,ERepositoryObjectType.TDQ_JRAXML_ELEMENT);
      childNodeFolder.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.TDQ_JRAXML_ELEMENT);
      folder.setRepositoryNode(childNodeFolder);
      super.getChildren().add(childNodeFolder);
    }
    for (    IRepositoryViewObject viewObject : tdqViewObjects.getMembers()) {
      if (!withDeleted && viewObject.isDeleted()) {
        continue;
      }
      JrxmlTempleteRepNode jrxmlNode=new JrxmlTempleteRepNode(viewObject,this,ENodeType.REPOSITORY_ELEMENT);
      jrxmlNode.setProperties(EProperties.LABEL,ERepositoryObjectType.TDQ_JRAXML_ELEMENT);
      jrxmlNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.TDQ_JRAXML_ELEMENT);
      viewObject.setRepositoryNode(jrxmlNode);
      super.getChildren().add(jrxmlNode);
    }
  }
 catch (  PersistenceException e) {
    log.error(e,e);
  }
  return super.getChildren();
}","@Override public List<IRepositoryNode> getChildren(boolean withDeleted){
  try {
    super.getChildren().clear();
    RootContainer<String,IRepositoryViewObject> tdqViewObjects=ProxyRepositoryFactory.getInstance().getTdqRepositoryViewObjects(getContentType(),RepositoryNodeHelper.getPath(this).toString());
    for (    Container<String,IRepositoryViewObject> container : tdqViewObjects.getSubContainer()) {
      Folder folder=new Folder((Property)container.getProperty(),ERepositoryObjectType.TDQ_JRAXML_ELEMENT);
      if (!withDeleted && folder.isDeleted()) {
        continue;
      }
      JrxmlTempSubFolderNode childNodeFolder=new JrxmlTempSubFolderNode(folder,this,ENodeType.SIMPLE_FOLDER);
      childNodeFolder.setProperties(EProperties.LABEL,ERepositoryObjectType.TDQ_JRAXML_ELEMENT);
      childNodeFolder.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.TDQ_JRAXML_ELEMENT);
      folder.setRepositoryNode(childNodeFolder);
      super.getChildren().add(childNodeFolder);
    }
    for (    IRepositoryViewObject viewObject : tdqViewObjects.getMembers()) {
      if (!withDeleted && viewObject.isDeleted()) {
        continue;
      }
      JrxmlTempleteRepNode jrxmlNode=new JrxmlTempleteRepNode(viewObject,this,ENodeType.REPOSITORY_ELEMENT);
      jrxmlNode.setProperties(EProperties.LABEL,ERepositoryObjectType.TDQ_JRAXML_ELEMENT);
      jrxmlNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.TDQ_JRAXML_ELEMENT);
      viewObject.setRepositoryNode(jrxmlNode);
      if (!duplicateNode(super.getChildren(),jrxmlNode)) {
        super.getChildren().add(jrxmlNode);
      }
    }
  }
 catch (  PersistenceException e) {
    log.error(e,e);
  }
  return super.getChildren();
}",0.975942975942976
138328,"/** 
 * Copy the files from srcPath to destination folder.
 * @param srcPath The path name in which to look. The path is always relative to the root of this bundle and maybegin with &quot;/&quot;. A path value of &quot;/&quot; indicates the root of this bundle.
 * @param srcPath
 * @param recurse If <code>true</code>, recurse into subdirectories(contains directories). Otherwise only returnentries from the specified path.
 * @param desFolder
 * @throws IOException
 * @throws CoreException
 */
@SuppressWarnings(""String_Node_Str"") public void copyFilesToFolder(Plugin plugin,String srcPath,boolean recurse,IFolder desFolder,String suffix,boolean... isImportItem) throws IOException, CoreException {
  if (plugin == null) {
    return;
  }
  Enumeration paths=null;
  paths=plugin.getBundle().getEntryPaths(srcPath);
  if (paths == null) {
    return;
  }
  while (paths.hasMoreElements()) {
    String nextElement=(String)paths.nextElement();
    String currentPath=""String_Node_Str"" + nextElement;
    URL resourceURL=plugin.getBundle().getEntry(currentPath);
    URL fileURL=null;
    File file=null;
    try {
      fileURL=FileLocator.toFileURL(resourceURL);
      file=new File(fileURL.getFile());
      if (file.isDirectory() && recurse) {
        if (file.getName().startsWith(""String_Node_Str"")) {
          continue;
        }
        IFolder folder=desFolder.getFolder(file.getName());
        if (!folder.exists()) {
          this.createDQStructure();
        }
        copyFilesToFolder(plugin,currentPath,recurse,folder,suffix,isImportItem);
        continue;
      }
      if (suffix != null && !file.getName().endsWith(suffix)) {
        continue;
      }
      String fileName=new Path(fileURL.getPath()).lastSegment();
      InputStream openStream=null;
      openStream=fileURL.openStream();
      copyFileToFolder(openStream,fileName,desFolder,isImportItem);
    }
 catch (    IOException e) {
      log.error(e,e);
    }
  }
}","/** 
 * Copy the files from srcPath to destination folder.
 * @param srcPath The path name in which to look. The path is always relative to the root of this bundle and maybegin with &quot;/&quot;. A path value of &quot;/&quot; indicates the root of this bundle.
 * @param srcPath
 * @param recurse If <code>true</code>, recurse into subdirectories(contains directories). Otherwise only returnentries from the specified path.
 * @param desFolder
 * @throws IOException
 * @throws CoreException
 */
@SuppressWarnings(""String_Node_Str"") public void copyFilesToFolder(Plugin plugin,String srcPath,boolean recurse,IFolder desFolder,String suffix,boolean... isImportItem) throws IOException, CoreException {
  if (plugin == null) {
    return;
  }
  Enumeration paths=null;
  paths=plugin.getBundle().getEntryPaths(srcPath);
  if (paths == null) {
    return;
  }
  while (paths.hasMoreElements()) {
    String nextElement=(String)paths.nextElement();
    String currentPath=""String_Node_Str"" + nextElement;
    URL resourceURL=plugin.getBundle().getEntry(currentPath);
    URL fileURL=null;
    File file=null;
    try {
      fileURL=FileLocator.toFileURL(resourceURL);
      file=new File(fileURL.getFile());
      if (file.isDirectory() && recurse) {
        if (file.getName().startsWith(""String_Node_Str"")) {
          continue;
        }
        IFolder folder=desFolder.getFolder(file.getName());
        if (!folder.exists()) {
          this.createDQStructure();
        }
        copyFilesToFolder(plugin,currentPath,recurse,folder,suffix,isImportItem);
        continue;
      }
      if (suffix != null && !file.getName().endsWith(suffix)) {
        continue;
      }
      String fileName=new Path(fileURL.getPath()).lastSegment();
      InputStream openStream=null;
      openStream=fileURL.openStream();
      copyFileToFolder(openStream,fileName,desFolder,isImportItem);
      openStream.close();
    }
 catch (    IOException e) {
      log.error(e,e);
    }
  }
}",0.9933774834437086
138329,"@Override protected boolean doExecute() throws Exception {
  try {
    Collection<Analysis> analyses=searchAllAnalysis(ResourceManager.getAnalysisFolder());
    AnalysisWriter analysisWriter=ElementWriterFactory.getInstance().createAnalysisWrite();
    for (    Analysis analysis : analyses) {
      EList<Indicator> allIndics=analysis.getResults().getIndicators();
      List<Indicator> textIndLeaves=null;
      Indicator textIndCategory=null;
      for (      Indicator indicator : allIndics) {
        if (indicator instanceof TextIndicator) {
          textIndCategory=indicator;
          textIndLeaves=IndicatorHelper.getIndicatorLeaves(indicator);
          break;
        }
      }
      if (textIndCategory != null && textIndLeaves != null) {
        analysis.getResults().getIndicators().remove(textIndCategory);
        analysis.getResults().getIndicators().addAll(textIndLeaves);
      }
      analysisWriter.save(analysis);
    }
  }
 catch (  Exception e) {
    log.error(e,e);
    return false;
  }
  return true;
}","@Override protected boolean doExecute() throws Exception {
  try {
    Collection<Analysis> analyses=(Collection<Analysis>)AnaResourceFileHelper.getInstance().getAllElement();
    AnalysisWriter analysisWriter=ElementWriterFactory.getInstance().createAnalysisWrite();
    for (    Analysis analysis : analyses) {
      EList<Indicator> allIndics=analysis.getResults().getIndicators();
      List<Indicator> textIndLeaves=null;
      Indicator textIndCategory=null;
      for (      Indicator indicator : allIndics) {
        if (indicator instanceof TextIndicator) {
          textIndCategory=indicator;
          textIndLeaves=IndicatorHelper.getIndicatorLeaves(indicator);
          break;
        }
      }
      if (textIndCategory != null && textIndLeaves != null) {
        analysis.getResults().getIndicators().remove(textIndCategory);
        analysis.getResults().getIndicators().addAll(textIndLeaves);
      }
      analysisWriter.save(analysis);
    }
  }
 catch (  Exception e) {
    log.error(e,e);
    return false;
  }
  return true;
}",0.956271023546372
138330,"@Override protected boolean doExecute() throws Exception {
  boolean ok=true;
  DQStructureManager manager=DQStructureManager.getInstance();
  IFolder systemIndicatorFolder=ResourceManager.getSystemIndicatorFolder();
  if (!systemIndicatorFolder.exists()) {
    systemIndicatorFolder=manager.createNewFolder(ResourceManager.getIndicatorFolder(),EResourceConstant.SYSTEM_INDICATORS);
  }
  manager.copyFilesToFolder(CorePlugin.getDefault(),DQStructureManager.SYSTEM_INDICATOR_PATH,true,systemIndicatorFolder,null,true);
  DefinitionHandler.getInstance().reloadIndicatorsDefinitions();
  Collection<Analysis> analyses=new ArrayList<Analysis>();
  analyses=searchAllAnalysis(ResourceManager.getAnalysisFolder());
  AnalysisWriter analysisWriter=ElementWriterFactory.getInstance().createAnalysisWrite();
  for (  Analysis ana : analyses) {
    try {
      for (      Indicator ind : ana.getResults().getIndicators()) {
        updateIndDefinition(ind);
        if (ind instanceof CompositeIndicator) {
          for (          Indicator indLeave : IndicatorHelper.getIndicatorLeaves(ind)) {
            updateIndDefinition(indLeave);
          }
        }
      }
      analysisWriter.save(ana);
    }
 catch (    Exception e) {
      log.warn(e,e);
      ok=false;
    }
  }
  ResourceManager.getLibrariesFolder().getFile(DefinitionHandler.FILENAME).delete(true,new NullProgressMonitor());
  DefinitionHandler.getInstance().copyDefinitionsIntoFolder(ResourceManager.getLibrariesFolder());
  return ok;
}","@Override protected boolean doExecute() throws Exception {
  boolean ok=true;
  DQStructureManager manager=DQStructureManager.getInstance();
  IFolder systemIndicatorFolder=ResourceManager.getSystemIndicatorFolder();
  if (!systemIndicatorFolder.exists()) {
    systemIndicatorFolder=manager.createNewFolder(ResourceManager.getIndicatorFolder(),EResourceConstant.SYSTEM_INDICATORS);
  }
  manager.copyFilesToFolder(CorePlugin.getDefault(),DQStructureManager.SYSTEM_INDICATOR_PATH,true,systemIndicatorFolder,null,true);
  DefinitionHandler.getInstance().reloadIndicatorsDefinitions();
  Collection<Analysis> analyses=(Collection<Analysis>)AnaResourceFileHelper.getInstance().getAllElement();
  AnalysisWriter analysisWriter=ElementWriterFactory.getInstance().createAnalysisWrite();
  for (  Analysis ana : analyses) {
    try {
      for (      Indicator ind : ana.getResults().getIndicators()) {
        updateIndDefinition(ind);
        if (ind instanceof CompositeIndicator) {
          for (          Indicator indLeave : IndicatorHelper.getIndicatorLeaves(ind)) {
            updateIndDefinition(indLeave);
          }
        }
      }
      analysisWriter.save(ana);
    }
 catch (    Exception e) {
      log.warn(e,e);
      ok=false;
    }
  }
  ResourceManager.getLibrariesFolder().getFile(DefinitionHandler.FILENAME).delete(true,new NullProgressMonitor());
  DefinitionHandler.getInstance().copyDefinitionsIntoFolder(ResourceManager.getLibrariesFolder());
  return ok;
}",0.9533713518953372
138331,"/** 
 * DOC bZhou Comment method ""createNewItemFile"".
 * @param file
 */
private void createNewItemFile(File file){
  ModelElement modelElement=getModelElement(file);
  if (modelElement != null && !modelElement.eIsProxy()) {
    IFile iFile=ResourceService.file2IFile(file);
    IFolder parentFolder=(IFolder)iFile.getParent();
    TypedReturnCode<Object> trc=ElementWriterFactory.getInstance().create(modelElement).create(modelElement,parentFolder,true);
    if (trc.getObject() instanceof Item) {
      Property property=((Item)trc.getObject()).getProperty();
      IPath newFileNamePath=new Path(property.getLabel() + ""String_Node_Str"" + property.getVersion()).addFileExtension(iFile.getFileExtension());
      IFile newFile=parentFolder.getFile(newFileNamePath);
      newFileList.add(newFile.getLocation().toFile());
      replaceMap.put(file.getName(),newFile.getFullPath().lastSegment());
    }
  }
 else   if (modelElement.eIsProxy()) {
    InternalEObject eobject=(InternalEObject)modelElement;
    replaceMap.put(file.getName(),eobject.eProxyURI().lastSegment());
  }
  newFileList.addAll(findRawConnectionFiles());
}","/** 
 * DOC bZhou Comment method ""createNewItemFile"".
 * @param file
 */
private void createNewItemFile(File file){
  ModelElement modelElement=getModelElement(file);
  if (modelElement != null && !modelElement.eIsProxy()) {
    IFile iFile=ResourceService.file2IFile(file);
    IFolder parentFolder=(IFolder)iFile.getParent();
    TypedReturnCode<Object> trc=ElementWriterFactory.getInstance().create(modelElement).create(modelElement,parentFolder,true);
    if (trc.getObject() instanceof Item) {
      Property property=((Item)trc.getObject()).getProperty();
      IPath newFileNamePath=new Path(property.getLabel() + ""String_Node_Str"" + property.getVersion()).addFileExtension(iFile.getFileExtension());
      IFile newFile=parentFolder.getFile(newFileNamePath);
      newFileList.add(newFile.getLocation().toFile());
      replaceMap.put(file.getName(),newFile.getFullPath().lastSegment());
    }
  }
 else   if (modelElement.eIsProxy()) {
    InternalEObject eobject=(InternalEObject)modelElement;
    replaceMap.put(file.getName(),eobject.eProxyURI().lastSegment());
  }
}",0.9782411604714416
138332,"@Override protected boolean doExecute() throws Exception {
  newFileList=new ArrayList<File>();
  replaceMap=new HashMap<String,String>();
  ArrayList<File> fileList=getNeedUpdateFiles();
  for (  File file : fileList) {
    createNewItemFile(file);
    deleteOldItemFile(file);
  }
  updateFile();
  return true;
}","@Override protected boolean doExecute() throws Exception {
  newFileList=new ArrayList<File>();
  replaceMap=new HashMap<String,String>();
  ArrayList<File> fileList=getNeedUpdateFiles();
  for (  File file : fileList) {
    createNewItemFile(file);
    deleteOldItemFile(file);
  }
  addConnectionFileToUpdate();
  updateFile();
  return true;
}",0.9531013615733736
138333,"/** 
 * DOC bZhou Comment method ""updateIndicatorItem"".
 * @param file
 * @throws URISyntaxException
 * @throws IOException
 */
private void updateIndicatorItem(File file) throws IOException, URISyntaxException {
  if (file.getName().endsWith(FactoriesUtil.ANA)) {
    Analysis analysis=(Analysis)getModelElement(file);
    Collection<Indicator> indicators=IndicatorHelper.getIndicators(analysis.getResults());
    for (    Indicator indicator : indicators) {
      String fragment=null;
      IndicatorDefinition indicatorDefinition=indicator.getIndicatorDefinition();
      if (indicatorDefinition != null) {
        if (indicatorDefinition.eIsProxy()) {
          URI uri=((InternalEObject)indicatorDefinition).eProxyURI();
          fragment=uri.lastSegment();
        }
 else {
          fragment=indicatorDefinition.eResource().getURI().lastSegment();
        }
        if (fragment != null) {
          String replace=fragment.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
          FileUtils.replaceInFile(file.getAbsolutePath(),fragment,replace);
        }
      }
    }
  }
}","/** 
 * DOC bZhou Comment method ""updateIndicatorItem"".
 * @param file
 * @throws URISyntaxException
 * @throws IOException
 */
private void updateIndicatorItem(File file) throws IOException, URISyntaxException {
  if (file.getName().endsWith(FactoriesUtil.ANA)) {
    Analysis analysis=(Analysis)getModelElement(file);
    Collection<Indicator> indicators=IndicatorHelper.getIndicators(analysis.getResults());
    for (    Indicator indicator : indicators) {
      String fragment=null;
      IndicatorDefinition indicatorDefinition=indicator.getIndicatorDefinition();
      if (indicatorDefinition != null) {
        if (indicatorDefinition.eIsProxy()) {
          URI uri=((InternalEObject)indicatorDefinition).eProxyURI();
          fragment=uri.lastSegment();
        }
 else {
          fragment=indicatorDefinition.eResource().getURI().lastSegment();
        }
        if (fragment != null && !fragment.contains(FILE_NAME_FLAG)) {
          String replace=fragment.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",FILE_NAME_FLAG);
          FileUtils.replaceInFile(file.getAbsolutePath(),fragment,replace);
        }
      }
    }
  }
}",0.9725490196078432
138334,"public boolean accept(File dir,String name){
  return name.endsWith(FactoriesUtil.ITEM_EXTENSION);
}","public boolean accept(File dir,String name){
  if (isNotSVNFolder(dir)) {
    File file=new Path(dir.getAbsolutePath()).append(name).toFile();
    if (file.isFile()) {
      ModelElement element=getModelElement(file);
      if (element != null) {
        String newName=WorkspaceUtils.normalize(element.getName());
        return !name.contains(newName) || !name.contains(""String_Node_Str"");
      }
    }
  }
  return false;
}",0.2239089184060721
138335,"public double getMatchingWeight(String str1,String str2){
  return StringComparisonUtil.difference(algorithm.encode(str1),algorithm.encode(str2)) / algorithm.getMaxCodeLen();
}","public double getMatchingWeight(String str1,String str2){
  return StringComparisonUtil.difference(algorithm.encode(str1),algorithm.encode(str2)) / (double)algorithm.getMaxCodeLen();
}",0.9777777777777776
138336,"public double getMatchingWeight(String str1,String str2){
  int maxLen=Math.min(str1.length(),str2.length());
  if (maxLen == 0) {
    return 1.0;
  }
 else {
    final int levenshteinDistance=StringUtils.getLevenshteinDistance(str1,str2);
    return 1.0 - ((double)levenshteinDistance / maxLen);
  }
}","public double getMatchingWeight(String str1,String str2){
  int maxLen=Math.max(str1.length(),str2.length());
  if (maxLen == 0) {
    return 1.0;
  }
 else {
    final int levenshteinDistance=StringUtils.getLevenshteinDistance(str1,str2);
    return 1.0 - ((double)levenshteinDistance / maxLen);
  }
}",0.9933774834437086
138337,"public double getMatchingWeight(String str1,String str2){
  return StringComparisonUtil.difference(algorithm.encode(str1),algorithm.encode(str2)) / algorithm.getMaxCodeLen();
}","public double getMatchingWeight(String str1,String str2){
  return StringComparisonUtil.difference(algorithm.encode(str1),algorithm.encode(str2)) / (double)algorithm.getMaxCodeLen();
}",0.9777777777777776
138338,"/** 
 * DOC bZhou Comment method ""getItemPath"". This method is to get the entire path of a item. e.g. getItemPath() = Project/TypedPath/StatePath/xxxx.property.
 * @param property
 * @return
 */
public static IPath getItemPath(Property property){
  Item item=property.getItem();
  IPath path=null;
  String fileName=null;
  EElementEName elementEName=EElementEName.getElementEName(item);
  if (elementEName != null) {
    URI uri=getURI(property);
    if (uri.isFile()) {
      path=new Path(uri.toFileString());
    }
 else     if (uri.isPlatform()) {
      path=new Path(uri.toPlatformString(false));
    }
 else {
      path=new Path(uri.lastSegment());
    }
    path=new Path(path.lastSegment());
    fileName=path.removeFileExtension().addFileExtension(elementEName.getFileExt()).toString();
  }
 else   if (item instanceof TDQItem) {
    TDQItem dqItem=(TDQItem)item;
    if (!StringUtils.isBlank(dqItem.getFilename())) {
      fileName=dqItem.getFilename();
    }
  }
  if (fileName != null) {
    path=ResourceManager.getRootProject().getFullPath().append(getItemTypedPath(property)).append(getItemStatePath(property)).append(fileName);
  }
  return path;
}","/** 
 * DOC bZhou Comment method ""getItemPath"". This method is to get the entire path of a item. e.g. getItemPath() = Project/TypedPath/StatePath/xxxx.property.
 * @param property
 * @return
 */
public static IPath getItemPath(Property property){
  Item item=property.getItem();
  IPath path=null;
  String fileName=null;
  EElementEName elementEName=EElementEName.getElementEName(item);
  if (elementEName != null) {
    URI uri=EObjectHelper.getURI(property);
    if (uri.isFile()) {
      path=new Path(uri.toFileString());
    }
 else     if (uri.isPlatform()) {
      path=new Path(uri.toPlatformString(false));
    }
 else {
      path=new Path(uri.lastSegment());
    }
    path=new Path(path.lastSegment());
    fileName=path.removeFileExtension().addFileExtension(elementEName.getFileExt()).toString();
  }
 else   if (item instanceof TDQItem) {
    TDQItem dqItem=(TDQItem)item;
    if (!StringUtils.isBlank(dqItem.getFilename())) {
      fileName=dqItem.getFilename();
    }
  }
  if (fileName != null) {
    path=ResourceManager.getRootProject().getFullPath().append(getItemTypedPath(property)).append(getItemStatePath(property)).append(fileName);
  }
  return path;
}",0.9940323955669224
138339,"/** 
 * DOC bZhou Comment method ""getItemStatePath"". This method is to get the relative path to the typed path of a item. e.g. Project/TypedPath/StatePath/xxxx.property
 * @param property
 * @return
 */
public static IPath getItemStatePath(Property property){
  Item item=property.getItem();
  String statePathStr=null;
  if (item.getState() != null) {
    statePathStr=item.getState().getPath();
  }
 else {
    URI propURI=getURI(property);
    if (StringUtils.isBlank(statePathStr) && propURI.isPlatformResource()) {
      IPath propPath=new Path(propURI.toPlatformString(true)).removeLastSegments(1);
      IPath typedPath=ResourceManager.getRootProject().getFullPath().append(getItemTypedPath(property));
      return propPath.makeRelativeTo(typedPath);
    }
  }
  return statePathStr != null ? new Path(statePathStr) : Path.EMPTY;
}","/** 
 * DOC bZhou Comment method ""getItemStatePath"". This method is to get the relative path to the typed path of a item. e.g. Project/TypedPath/StatePath/xxxx.property
 * @param property
 * @return
 */
public static IPath getItemStatePath(Property property){
  Item item=property.getItem();
  String statePathStr=null;
  if (item.getState() != null) {
    statePathStr=item.getState().getPath();
  }
 else {
    URI propURI=EObjectHelper.getURI(property);
    if (StringUtils.isBlank(statePathStr) && propURI.isPlatformResource()) {
      IPath propPath=new Path(propURI.toPlatformString(true)).removeLastSegments(1);
      IPath typedPath=ResourceManager.getRootProject().getFullPath().append(getItemTypedPath(property));
      return propPath.makeRelativeTo(typedPath);
    }
  }
  return statePathStr != null ? new Path(statePathStr) : Path.EMPTY;
}",0.991725768321513
138340,"/** 
 * DOC bZhou Comment method ""addResourceContent"".
 * @param element
 * @return
 */
protected abstract void addResourceContent(ModelElement element);","public void addResourceContent(Resource resource,ModelElement element){
  if (resource != null) {
    EList<EObject> resourceContents=resource.getContents();
    if (!resourceContents.contains(element)) {
      resourceContents.add(element);
    }
    EList<Dependency> supplierDependency=element.getSupplierDependency();
    if (supplierDependency != null) {
      for (      Dependency dependency : supplierDependency) {
        if (!resourceContents.contains(dependency)) {
          resourceContents.add(dependency);
        }
      }
    }
  }
}",0.0199146514935988
138341,"public void addResourceContent(Resource resource,Analysis element){
  if (resource != null) {
    EList<EObject> resourceContents=resource.getContents();
    EList<Domain> dataFilter=AnalysisHelper.getDataFilter(element);
    List<Domain> domains=DomainHelper.getDomains(resourceContents);
    resourceContents.removeAll(domains);
    if (dataFilter != null) {
      for (      Domain domain : dataFilter) {
        if (!resourceContents.contains(domain)) {
          resourceContents.add(domain);
        }
      }
    }
    resource.getContents().add(element);
  }
}","public void addResourceContent(Resource resource,Analysis element){
  super.addResourceContent(resource,element);
  if (resource != null) {
    EList<EObject> resourceContents=resource.getContents();
    EList<Domain> dataFilter=AnalysisHelper.getDataFilter(element);
    if (dataFilter != null) {
      for (      Domain domain : dataFilter) {
        if (!resourceContents.contains(domain)) {
          resourceContents.add(domain);
        }
      }
    }
  }
}",0.810077519379845
138342,"@Override protected void addResourceContent(ModelElement element){
  EList<EObject> resourceContents=element.eResource().getContents();
  EList<Dependency> supplierDependency=element.getSupplierDependency();
  if (supplierDependency.size() != 0) {
    resourceContents.addAll(supplierDependency);
  }
  Collection<? extends ModelElement> catalogs=ConnectionHelper.getCatalogs((Connection)element);
  resourceContents.addAll(catalogs);
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"");
  }
  Collection<? extends ModelElement> schemas=ConnectionHelper.getSchema((Connection)element);
  resourceContents.addAll(schemas);
  Collection<? extends ModelElement> xmlSchemas=ConnectionHelper.getTdXmlDocument((Connection)element);
  resourceContents.addAll(xmlSchemas);
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"");
  }
}","@Override protected void addResourceContent(ModelElement element){
  super.addResourceContent(element);
  if (element.eResource() != null) {
    EList<EObject> resourceContents=element.eResource().getContents();
    Collection<? extends ModelElement> catalogs=ConnectionHelper.getCatalogs((Connection)element);
    resourceContents.addAll(catalogs);
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"");
    }
    Collection<? extends ModelElement> schemas=ConnectionHelper.getSchema((Connection)element);
    resourceContents.addAll(schemas);
    Collection<? extends ModelElement> xmlSchemas=ConnectionHelper.getTdXmlDocument((Connection)element);
    resourceContents.addAll(xmlSchemas);
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"");
    }
  }
}",0.8373235113566605
138343,"/** 
 * DOC xqliu Comment method ""fillDbConnectionInformation"".
 * @param dbConn
 * @return
 */
public static DatabaseConnection fillDbConnectionInformation(DatabaseConnection dbConn){
  if (DatabaseConstant.XML_EXIST_DRIVER_NAME.equals(dbConn.getDriverClass())) {
    IXMLDBConnection xmlDBConnection=new EXistXMLDBConnection(dbConn.getDriverClass(),dbConn.getURL());
    ConnectionHelper.addXMLDocuments(xmlDBConnection.createConnection(dbConn));
  }
 else {
    boolean noStructureExists=ConnectionHelper.getAllCatalogs(dbConn).isEmpty() && ConnectionHelper.getAllSchemas(dbConn).isEmpty();
    java.sql.Connection sqlConn=null;
    try {
      if (noStructureExists) {
        Map<String,String> paramMap=ParameterUtil.toMap(ConnectionUtils.createConnectionParam(dbConn));
        IMetadataConnection metaConnection=MetadataFillFactory.getDBInstance().fillUIParams(paramMap);
        dbConn=(DatabaseConnection)MetadataFillFactory.getDBInstance().fillUIConnParams(metaConnection,dbConn);
        sqlConn=(java.sql.Connection)MetadataConnectionUtils.checkConnection(metaConnection).getObject();
        if (sqlConn != null) {
          MetadataFillFactory.getDBInstance().fillCatalogs(dbConn,sqlConn.getMetaData(),MetadataConnectionUtils.getPackageFilter(dbConn,sqlConn.getMetaData()));
          MetadataFillFactory.getDBInstance().fillSchemas(dbConn,sqlConn.getMetaData(),MetadataConnectionUtils.getPackageFilter(dbConn,sqlConn.getMetaData()));
        }
      }
    }
 catch (    SQLException e) {
      log.error(e,e);
    }
 finally {
      if (sqlConn != null) {
        ConnectionUtils.closeConnection(sqlConn);
      }
    }
  }
  return dbConn;
}","/** 
 * DOC xqliu Comment method ""fillDbConnectionInformation"".
 * @param dbConn
 * @return
 */
public static DatabaseConnection fillDbConnectionInformation(DatabaseConnection dbConn){
  if (DatabaseConstant.XML_EXIST_DRIVER_NAME.equals(dbConn.getDriverClass())) {
    IXMLDBConnection xmlDBConnection=new EXistXMLDBConnection(dbConn.getDriverClass(),dbConn.getURL());
    ConnectionHelper.addXMLDocuments(xmlDBConnection.createConnection(dbConn));
  }
 else {
    boolean noStructureExists=ConnectionHelper.getAllCatalogs(dbConn).isEmpty() && ConnectionHelper.getAllSchemas(dbConn).isEmpty();
    java.sql.Connection sqlConn=null;
    try {
      if (noStructureExists) {
        Map<String,String> paramMap=ParameterUtil.toMap(ConnectionUtils.createConnectionParam(dbConn));
        IMetadataConnection metaConnection=MetadataFillFactory.getDBInstance().fillUIParams(paramMap);
        dbConn=(DatabaseConnection)MetadataFillFactory.getDBInstance().fillUIConnParams(metaConnection,dbConn);
        sqlConn=(java.sql.Connection)MetadataConnectionUtils.checkConnection(metaConnection).getObject();
        if (sqlConn != null) {
          MetadataFillFactory.getDBInstance().fillCatalogs(dbConn,sqlConn.getMetaData(),MetadataConnectionUtils.getPackageFilter(dbConn,sqlConn.getMetaData(),true));
          MetadataFillFactory.getDBInstance().fillSchemas(dbConn,sqlConn.getMetaData(),MetadataConnectionUtils.getPackageFilter(dbConn,sqlConn.getMetaData(),false));
        }
      }
    }
 catch (    SQLException e) {
      log.error(e,e);
    }
 finally {
      if (sqlConn != null) {
        ConnectionUtils.closeConnection(sqlConn);
      }
    }
  }
  return dbConn;
}",0.9966937180643222
138344,"@Override public void reset(){
  isChangedconnectionUrl=false;
  super.reset();
}","@Override public void reset(){
  changeUrl=false;
  super.reset();
}",0.8993288590604027
138345,"@Override public boolean isSimilar(EObject obj1,EObject obj2) throws FactoryException {
  return Boolean.TRUE;
}","@Override public boolean isSimilar(EObject obj1,EObject obj2) throws FactoryException {
  DatabaseConnection connection1=SwitchHelpers.DATABASECONNECTION_SWITCH.doSwitch(obj1);
  DatabaseConnection connection2=SwitchHelpers.DATABASECONNECTION_SWITCH.doSwitch(obj2);
  if (connection1 != null && connection2 != null) {
    changeUrl=ConnectionHelper.isUrlChanged(connection1);
  }
  return changeUrl ? false : super.isSimilar(obj1,obj2);
}",0.3454545454545454
138346,"public Connection reloadCurrentLevelElement() throws ReloadCompareException {
  if (!isValid()) {
    return null;
  }
  oldDataProvider=upperCaseConnection(findDataProvider());
  if (oldDataProvider == null) {
    return null;
  }
  createTempConnectionFile();
  if (compareWithReloadObject()) {
    saveReloadResult();
  }
  return oldDataProvider;
}","public Connection reloadCurrentLevelElement() throws ReloadCompareException {
  if (!isValid()) {
    return null;
  }
  oldDataProvider=upperCaseConnection(findDataProvider());
  if (oldDataProvider == null) {
    return null;
  }
  createTempConnectionFile();
  if (compareWithReloadObject()) {
    updateTaggedValue();
    saveReloadResult();
  }
  return oldDataProvider;
}",0.9657064471879286
138347,"public DQRepositoryViewLabelProvider(){
  super(MNComposedAdapterFactory.getAdapterFactory());
}","public DQRepositoryViewLabelProvider(){
  super(MNComposedAdapterFactory.getAdapterFactory());
  if (null == ITALIC_FONT) {
    ITALIC_FONT=Display.getDefault().getSystemFont();
    FontData[] exfds=ITALIC_FONT.getFontData();
    if (exfds.length > 0) {
      FontData fd=exfds[0];
      fd.setStyle(SWT.ITALIC);
      ITALIC_FONT=new Font(ITALIC_FONT.getDevice(),fd);
    }
  }
}",0.4033613445378151
138348,"@Override public boolean isSimilar(EObject obj1,EObject obj2) throws FactoryException {
  DatabaseConnection connection1=SwitchHelpers.DATABASECONNECTION_SWITCH.doSwitch(obj1);
  DatabaseConnection connection2=SwitchHelpers.DATABASECONNECTION_SWITCH.doSwitch(obj2);
  if (connection1 != null && connection2 != null) {
    changeUrl=ConnectionHelper.isUrlChanged(connection1);
  }
  return changeUrl ? false : super.isSimilar(obj1,obj2);
}","@Override public boolean isSimilar(EObject obj1,EObject obj2) throws FactoryException {
  return Boolean.TRUE;
}",0.3745454545454545
138349,"public Connection reloadCurrentLevelElement() throws ReloadCompareException {
  if (!isValid()) {
    return null;
  }
  oldDataProvider=upperCaseConnection(findDataProvider());
  if (oldDataProvider == null) {
    return null;
  }
  createTempConnectionFile();
  if (compareWithReloadObject()) {
    updateTaggedValue();
    saveReloadResult();
  }
  return oldDataProvider;
}","public Connection reloadCurrentLevelElement() throws ReloadCompareException {
  if (!isValid()) {
    return null;
  }
  oldDataProvider=upperCaseConnection(findDataProvider());
  if (oldDataProvider == null) {
    return null;
  }
  createTempConnectionFile();
  if (compareWithReloadObject()) {
    saveReloadResult();
  }
  return oldDataProvider;
}",0.9657064471879286
138350,"@Override public Font getFont(Object element){
  boolean changeURL=false;
  if (element instanceof IRepositoryNode) {
    IRepositoryNode node=(IRepositoryNode)element;
    ENodeType type=node.getType();
    if (type.equals(ENodeType.REPOSITORY_ELEMENT)) {
      if (node instanceof DBConnectionRepNode) {
        ConnectionItem connectionItem=(ConnectionItem)node.getObject().getProperty().getItem();
        if (connectionItem.getConnection() instanceof DatabaseConnection) {
          changeURL=ConnectionHelper.isUrlChanged(connectionItem.getConnection());
        }
      }
    }
  }
  return changeURL ? ITALIC_FONT : super.getFont(element);
}","@Override public Font getFont(Object element){
  boolean changeURL=false;
  if (element instanceof IRepositoryNode) {
    IRepositoryNode node=(IRepositoryNode)element;
    ENodeType type=node.getType();
    if (type.equals(ENodeType.REPOSITORY_ELEMENT)) {
      if (node instanceof DBConnectionRepNode) {
        ConnectionItem connectionItem=(ConnectionItem)node.getObject().getProperty().getItem();
        if (connectionItem.getConnection() instanceof DatabaseConnection) {
          changeURL=true;
        }
      }
    }
  }
  return changeURL ? ITALIC_FONT : super.getFont(element);
}",0.9476228847703464
138351,"/** 
 * Initialises the metadata, but only if the meta data has not already been collected
 */
private void initialise() throws SQLException {
  if (getConnection() != null)   return;
  _assistanceEnabled=SQLExplorerPlugin.getDefault().getPluginPreferences().getBoolean(IConstants.SQL_ASSIST);
  if (_assistanceEnabled) {
    dictionary=new Dictionary();
    DictionaryLoader dictionaryLoader=new DictionaryLoader(this);
    dictionaryLoader.schedule(500);
  }
  SQLConnection connection=null;
  try {
    connection=grabConnection();
    metaData=connection.getSQLMetaData();
    databaseProductName=metaData.getDatabaseProductName();
    dbModel=new DatabaseModel(this);
    try {
      if (metaData.supportsCatalogs())       catalogs=metaData.getCatalogs();
    }
 catch (    Exception e) {
      SQLExplorerPlugin.error(databaseProductName + ""String_Node_Str"" + e);
    }
  }
  finally {
    if (connection != null)     releaseConnection(connection);
  }
}","/** 
 * Initialises the metadata, but only if the meta data has not already been collected
 */
private void initialise() throws SQLException {
  if (getConnection() != null)   return;
  _assistanceEnabled=SQLExplorerPlugin.getDefault().getPluginPreferences().getBoolean(IConstants.SQL_ASSIST);
  if (_assistanceEnabled) {
    dictionary=new Dictionary();
    DictionaryLoader dictionaryLoader=new DictionaryLoader(this);
    dictionaryLoader.schedule(500);
  }
  SQLConnection connection=null;
  try {
    connection=grabConnection();
    metaData=connection.getSQLMetaData();
    databaseProductName=metaData.getDatabaseProductName();
    dbModel=new DatabaseModel(this);
    if (metaData.supportsCatalogs())     catalogs=metaData.getCatalogs();
  }
 catch (  SQLException sqlerror) {
    SQLExplorerPlugin.error(sqlerror);
  }
 finally {
    if (connection != null)     releaseConnection(connection);
  }
}",0.8693790149892934
138352,"/** 
 * DOC qzhang Comment method ""createOneUnit"".
 * @param treeItem
 * @param indicatorUnit
 */
public void createOneUnit(final TreeItem treeItem,IndicatorUnit indicatorUnit){
  final TreeItem indicatorItem=new TreeItem(treeItem,SWT.NONE);
  final IndicatorUnit unit=indicatorUnit;
  IndicatorEnum indicatorType=indicatorUnit.getType();
  indicatorItem.setData(MODELELEMENT_INDICATOR_KEY,treeItem.getData(MODELELEMENT_INDICATOR_KEY));
  indicatorItem.setData(INDICATOR_UNIT_KEY,unit);
  indicatorItem.setData(viewKey,this);
  indicatorItem.setImage(0,getIndicatorImage(unit));
  String indicatorName=getIndicatorName(indicatorUnit);
  String label=indicatorName == null ? ""String_Node_Str"" : indicatorName;
  indicatorItem.setText(0,label);
  TreeEditor optionEditor;
  optionEditor=new TreeEditor(tree);
  Label optionLabel=new Label(tree,SWT.NONE);
  optionLabel.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_WHITE));
  optionLabel.setImage(ImageLib.getImage(ImageLib.INDICATOR_OPTION));
  optionLabel.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
  optionLabel.pack();
  optionLabel.setData(indicatorUnit);
  optionLabel.addMouseListener(new MouseAdapter(){
    @Override public void mouseDown(    MouseEvent e){
      openIndicatorOptionDialog(null,indicatorItem);
    }
  }
);
  optionEditor.minimumWidth=optionLabel.getImage().getBounds().width;
  optionEditor.horizontalAlignment=SWT.CENTER;
  optionEditor.setEditor(optionLabel,indicatorItem,1);
  TreeEditor delEditor=new TreeEditor(tree);
  Label delLabel=new Label(tree,SWT.NONE);
  delLabel.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_WHITE));
  delLabel.setImage(ImageLib.getImage(ImageLib.DELETE_ACTION));
  delLabel.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
  delLabel.pack();
  delLabel.addMouseListener(new MouseAdapter(){
    @Override public void mouseDown(    MouseEvent e){
      ModelElementIndicator meIndicator=(ModelElementIndicator)treeItem.getData(MODELELEMENT_INDICATOR_KEY);
      deleteIndicatorItems(meIndicator,unit);
      if (indicatorItem.getParentItem() != null && indicatorItem.getParentItem().getData(INDICATOR_UNIT_KEY) != null) {
        setElements(modelElementIndicators);
      }
 else {
        removeItemBranch(indicatorItem);
      }
    }
  }
);
  delEditor.minimumWidth=delLabel.getImage().getBounds().width;
  delEditor.horizontalAlignment=SWT.CENTER;
  if (AnalysisColumnTreeViewer.VIEWER_KEY.equals(viewKey)) {
    delEditor.setEditor(delLabel,indicatorItem,4);
  }
 else   if (AnalysisColumnSetTreeViewer.VIEWER_KEY.equals(viewKey)) {
    delEditor.setEditor(delLabel,indicatorItem,3);
  }
  indicatorItem.setData(ITEM_EDITOR_KEY,new TreeEditor[]{optionEditor,delEditor});
  if (indicatorType.hasChildren()) {
    indicatorItem.setData(treeItem.getData(MODELELEMENT_INDICATOR_KEY));
    createIndicatorItems(indicatorItem,indicatorUnit.getChildren());
  }
  createIndicatorParameters(indicatorItem,indicatorUnit);
}","/** 
 * DOC qzhang Comment method ""createOneUnit"".
 * @param treeItem
 * @param indicatorUnit
 */
public void createOneUnit(final TreeItem treeItem,IndicatorUnit indicatorUnit){
  final TreeItem indicatorItem=new TreeItem(treeItem,SWT.NONE);
  final IndicatorUnit unit=indicatorUnit;
  IndicatorEnum indicatorType=indicatorUnit.getType();
  indicatorItem.setData(MODELELEMENT_INDICATOR_KEY,treeItem.getData(MODELELEMENT_INDICATOR_KEY));
  indicatorItem.setData(INDICATOR_UNIT_KEY,unit);
  indicatorItem.setData(viewKey,this);
  indicatorItem.setImage(0,getIndicatorImage(unit));
  String indicatorName=getIndicatorName(indicatorUnit);
  String label=indicatorName == null ? ""String_Node_Str"" : indicatorName;
  indicatorItem.setText(0,label);
  TreeEditor optionEditor;
  optionEditor=new TreeEditor(tree);
  Label optionLabel=new Label(tree,SWT.NONE);
  optionLabel.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_WHITE));
  optionLabel.setImage(ImageLib.getImage(ImageLib.INDICATOR_OPTION));
  optionLabel.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
  optionLabel.pack();
  optionLabel.setData(indicatorUnit);
  optionLabel.addMouseListener(new MouseAdapter(){
    @Override public void mouseDown(    MouseEvent e){
      openIndicatorOptionDialog(null,indicatorItem);
    }
  }
);
  optionEditor.minimumWidth=optionLabel.getImage().getBounds().width;
  optionEditor.horizontalAlignment=SWT.CENTER;
  optionEditor.setEditor(optionLabel,indicatorItem,1);
  TreeEditor delEditor=new TreeEditor(tree);
  Label delLabel=new Label(tree,SWT.NONE);
  delLabel.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_WHITE));
  delLabel.setImage(ImageLib.getImage(ImageLib.DELETE_ACTION));
  delLabel.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
  delLabel.pack();
  delLabel.addMouseListener(new MouseAdapter(){
    @Override public void mouseDown(    MouseEvent e){
      ModelElementIndicator meIndicator=(ModelElementIndicator)treeItem.getData(MODELELEMENT_INDICATOR_KEY);
      deleteIndicatorItems(meIndicator,unit);
      if (indicatorItem.getParentItem() != null && indicatorItem.getParentItem().getData(INDICATOR_UNIT_KEY) != null) {
        setElements(modelElementIndicators);
      }
 else {
        removeItemBranch(indicatorItem);
      }
    }
  }
);
  delEditor.minimumWidth=delLabel.getImage().getBounds().width;
  delEditor.horizontalAlignment=SWT.CENTER;
  if (AnalysisColumnTreeViewer.VIEWER_KEY.equals(viewKey)) {
    delEditor.setEditor(delLabel,indicatorItem,4);
  }
 else   if (AnalysisColumnSetTreeViewer.VIEWER_KEY.equals(viewKey)) {
    delEditor.setEditor(delLabel,indicatorItem,3);
  }
  indicatorItem.setData(ITEM_EDITOR_KEY,new TreeEditor[]{optionEditor,delEditor});
  if (indicatorType.hasChildren()) {
    indicatorItem.setData(treeItem.getData(MODELELEMENT_INDICATOR_KEY));
    createIndicatorItems(indicatorItem,indicatorUnit.getChildren());
  }
  createIndicatorParameters(indicatorItem,indicatorUnit);
  tree.getColumn(0).pack();
}",0.9953441968739608
138353,"/** 
 * DOC bZhou Comment method ""getFileResource"".
 * @param file
 * @return get null if the file is not exist.
 */
public synchronized Resource getFileResource(IFile file){
  if (file.exists()) {
    URI uri=URI.createPlatformResourceURI(file.getFullPath().toString(),false);
    Resource res=EMFSharedResources.getInstance().getResource(uri,false);
    if (res == null || res.getContents().isEmpty() || getModelElement(res) == null) {
      res=EMFSharedResources.getInstance().reloadResource(uri);
    }
    return res;
  }
  return null;
}","/** 
 * DOC bZhou Comment method ""getFileResource"".
 * @param file
 * @return get null if the file is not exist.
 */
public synchronized Resource getFileResource(IFile file){
  if (file.exists()) {
    URI uri=URI.createPlatformResourceURI(file.getFullPath().toString(),false);
    Resource res=EMFSharedResources.getInstance().getResource(uri,false);
    if (EMFSharedResources.getInstance().isNeedReload(res)) {
      res=EMFSharedResources.getInstance().reloadResource(uri);
    }
    return res;
  }
  return null;
}",0.8872180451127819
138354,"@Override public boolean isSimilar(EObject obj1,EObject obj2) throws FactoryException {
  return Boolean.TRUE;
}","@Override public boolean isSimilar(EObject obj1,EObject obj2) throws FactoryException {
  DatabaseConnection connection1=SwitchHelpers.DATABASECONNECTION_SWITCH.doSwitch(obj1);
  DatabaseConnection connection2=SwitchHelpers.DATABASECONNECTION_SWITCH.doSwitch(obj2);
  if (connection1 != null && connection2 != null) {
    changeUrl=ConnectionHelper.isUrlChanged(connection1);
  }
  return changeUrl ? false : super.isSimilar(obj1,obj2);
}",0.3454545454545454
138355,"public Connection reloadCurrentLevelElement() throws ReloadCompareException {
  if (!isValid()) {
    return null;
  }
  oldDataProvider=upperCaseConnection(findDataProvider());
  if (oldDataProvider == null) {
    return null;
  }
  createTempConnectionFile();
  if (compareWithReloadObject()) {
    saveReloadResult();
  }
  return oldDataProvider;
}","public Connection reloadCurrentLevelElement() throws ReloadCompareException {
  if (!isValid()) {
    return null;
  }
  oldDataProvider=upperCaseConnection(findDataProvider());
  if (oldDataProvider == null) {
    return null;
  }
  createTempConnectionFile();
  if (compareWithReloadObject()) {
    updateTaggedValue();
    saveReloadResult();
  }
  return oldDataProvider;
}",0.9657064471879286
138356,"@Override public Font getFont(Object element){
  boolean changeURL=false;
  if (element instanceof IRepositoryNode) {
    IRepositoryNode node=(IRepositoryNode)element;
    ENodeType type=node.getType();
    if (type.equals(ENodeType.REPOSITORY_ELEMENT)) {
      if (node instanceof DBConnectionRepNode) {
        ConnectionItem connectionItem=(ConnectionItem)node.getObject().getProperty().getItem();
        if (connectionItem.getConnection() instanceof DatabaseConnection) {
          changeURL=true;
        }
      }
    }
  }
  return changeURL ? ITALIC_FONT : super.getFont(element);
}","@Override public Font getFont(Object element){
  boolean changeURL=false;
  if (element instanceof IRepositoryNode) {
    IRepositoryNode node=(IRepositoryNode)element;
    ENodeType type=node.getType();
    if (type.equals(ENodeType.REPOSITORY_ELEMENT)) {
      if (node instanceof DBConnectionRepNode) {
        ConnectionItem connectionItem=(ConnectionItem)node.getObject().getProperty().getItem();
        if (connectionItem.getConnection() instanceof DatabaseConnection) {
          changeURL=ConnectionHelper.isUrlChanged(connectionItem.getConnection());
        }
      }
    }
  }
  return changeURL ? italicFont : super.getFont(element);
}",0.8096774193548387
138357,"public DQRepositoryViewLabelProvider(){
  super(MNComposedAdapterFactory.getAdapterFactory());
  if (null == ITALIC_FONT) {
    ITALIC_FONT=Display.getDefault().getSystemFont();
    FontData[] exfds=ITALIC_FONT.getFontData();
    if (exfds.length > 0) {
      FontData fd=exfds[0];
      fd.setStyle(SWT.ITALIC);
      ITALIC_FONT=new Font(ITALIC_FONT.getDevice(),fd);
    }
  }
}","public DQRepositoryViewLabelProvider(){
  super(MNComposedAdapterFactory.getAdapterFactory());
  if (null == italicFont) {
    italicFont=Display.getDefault().getSystemFont();
    FontData[] exfds=italicFont.getFontData();
    if (exfds.length > 0) {
      FontData fd=exfds[0];
      fd.setStyle(SWT.ITALIC);
      italicFont=new Font(italicFont.getDevice(),fd);
    }
  }
}",0.4079470198675496
138358,"public void start(BundleContext context) throws Exception {
  super.start(context);
  plugin=this;
  getPreferenceStore().setDefault(PluginConstant.CHEAT_SHEET_VIEW,true);
  try {
    for (    BookMarkEnum bookMark : BookMarkEnum.VALUES) {
      BaseHelpSystem.getBookmarkManager().addBookmark(bookMark.getHref(),bookMark.getLabel());
    }
  }
 catch (  Exception e) {
    log.error(e,e);
  }
  repositoryInitialized=this.initProxyRepository();
  SQLExplorerPlugin.getDefault().setRootProject(ReponsitoryContextBridge.getRootProject());
}","public void start(BundleContext context) throws Exception {
  super.start(context);
  plugin=this;
  getPreferenceStore().setDefault(PluginConstant.CHEAT_SHEET_VIEW,true);
  getPreferenceStore().setValue(ITalendCorePrefConstants.PREVIEW_LIMIT,""String_Node_Str"");
  getPreferenceStore().setValue(ITalendCorePrefConstants.LANGUAGE_SELECTOR,Locale.getDefault().getLanguage());
  try {
    for (    BookMarkEnum bookMark : BookMarkEnum.VALUES) {
      BaseHelpSystem.getBookmarkManager().addBookmark(bookMark.getHref(),bookMark.getLabel());
    }
  }
 catch (  Exception e) {
    log.error(e,e);
  }
  repositoryInitialized=this.initProxyRepository();
  SQLExplorerPlugin.getDefault().setRootProject(ReponsitoryContextBridge.getRootProject());
}",0.8421875
138359,"public IPreferenceStore getPreferenceStore(){
  return null;
}","public IPreferenceStore getPreferenceStore(){
  return CorePlugin.getDefault().getPreferenceStore();
}",0.7439024390243902
138360,"public TdReport findReport(IFile file){
  if (checkFile(file)) {
    TdReport report=allRepMap.get(file);
    if (report == null) {
      report=readFromFile(file);
    }
    return report;
  }
  return null;
}","public TdReport findReport(IFile file){
  if (checkFile(file)) {
    TdReport report=allRepMap.get(file);
    if (report == null) {
      report=retireReport(getFileResource(file,true));
    }
    return report;
  }
  return null;
}",0.8868778280542986
138361,"@Override public void run(){
  ISelection selection=this.getSelection();
  for (  Object obj : ((IStructuredSelection)selection).toArray()) {
    if (obj instanceof RepositoryNode) {
      RepositoryNode node=(RepositoryNode)obj;
      if (node instanceof ReportFileRepNode) {
        deleteReportFile((ReportFileRepNode)node);
        continue;
      }
      boolean isStateDeleted=RepositoryNodeHelper.isStateDeleted(node);
      if (!isStateDeleted) {
        closeEditors(selection);
        RepositoryNodeHelper.getModelElementFromRepositoryNode(node);
        excuteSuperRun(null);
        break;
      }
      boolean hasDependency=false;
      if (node.getType() == ENodeType.SIMPLE_FOLDER) {
        List<IRepositoryNode> newLs=RepositoryNodeHelper.getRepositoryElementFromFolder(node,true);
        for (        IRepositoryNode subNode : newLs) {
          hasDependency=RepositoryNodeHelper.hasDependencyClients(subNode);
          if (!hasDependency || hasDependency && handleDependencies(subNode)) {
            excuteSuperRun((RepositoryNode)subNode);
          }
        }
        excuteSuperRun(node);
      }
 else {
        hasDependency=RepositoryNodeHelper.hasDependencyClients(node);
        if (!hasDependency || hasDependency && handleDependencies(node)) {
          EObjectHelper.removeDependencys(RepositoryNodeHelper.getModelElementFromRepositoryNode(node));
          excuteSuperRun((RepositoryNode)node);
        }
      }
    }
  }
  CorePlugin.getDefault().refreshDQView();
  CorePlugin.getDefault().refreshWorkSpace();
}","@Override public void run(){
  ISelection selection=this.getSelection();
  for (  Object obj : ((IStructuredSelection)selection).toArray()) {
    if (obj instanceof RepositoryNode) {
      RepositoryNode node=(RepositoryNode)obj;
      if (node instanceof ReportFileRepNode) {
        deleteReportFile((ReportFileRepNode)node);
        continue;
      }
      boolean isStateDeleted=RepositoryNodeHelper.isStateDeleted(node);
      if (!isStateDeleted) {
        closeEditors(selection);
        RepositoryNodeHelper.getModelElementFromRepositoryNode(node);
        excuteSuperRun(null);
        break;
      }
      boolean hasDependency=false;
      if (node.getType() == ENodeType.SIMPLE_FOLDER) {
        List<IRepositoryNode> newLs=RepositoryNodeHelper.getRepositoryElementFromFolder(node,true);
        for (        IRepositoryNode subNode : newLs) {
          hasDependency=RepositoryNodeHelper.hasDependencyClients(subNode);
          if (!hasDependency || hasDependency && handleDependencies(subNode)) {
            excuteSuperRun((RepositoryNode)subNode);
          }
        }
        excuteSuperRun(node);
      }
 else {
        hasDependency=RepositoryNodeHelper.hasDependencyClients(node);
        if (!hasDependency || hasDependency && handleDependencies(node)) {
          ModelElement modelEle=RepositoryNodeHelper.getModelElementFromRepositoryNode(node);
          EObjectHelper.removeDependencys(modelEle);
          if (modelEle instanceof TdReport) {
            IFile file=ResourceManager.getReportsFolder().getFile(WorkbenchUtils.getFilePath(node));
            if (file.exists()) {
              RepResourceFileHelper.getInstance().remove(file);
            }
          }
          excuteSuperRun((RepositoryNode)node);
        }
      }
    }
  }
  CorePlugin.getDefault().refreshDQView();
  CorePlugin.getDefault().refreshWorkSpace();
}",0.8799062683069713
138362,"@Override protected void doRun(){
  ISelection selection=getSelection();
  Object obj=((IStructuredSelection)selection).getFirstElement();
  final RepositoryNode node=(RepositoryNode)obj;
  final String title=DefaultMessagesImpl.getString(""String_Node_Str"");
  String message=null;
  if (node.getChildren().size() == 0) {
    return;
  }
 else   if (node.getChildren().size() >= 1) {
    message=DefaultMessagesImpl.getString(""String_Node_Str"") + ""String_Node_Str"" + DefaultMessagesImpl.getString(""String_Node_Str"");
  }
  final Shell shell=super.getShell();
  if (!(MessageDialog.openQuestion(shell,title,message))) {
    return;
  }
  IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
  for (  IRepositoryNode child : node.getChildren()) {
    try {
      if (child.getType() == ENodeType.REPOSITORY_ELEMENT) {
        EObjectHelper.removeDependencys(RepositoryNodeHelper.getModelElementFromRepositoryNode(child));
      }
      deleteElements(factory,(RepositoryNode)child);
    }
 catch (    Exception e) {
      MessageBoxExceptionHandler.process(e);
    }
  }
  try {
    factory.saveProject(ProjectManager.getInstance().getCurrentProject());
  }
 catch (  PersistenceException e) {
    ExceptionHandler.process(e);
  }
}","@Override protected void doRun(){
  ISelection selection=getSelection();
  Object obj=((IStructuredSelection)selection).getFirstElement();
  final RepositoryNode node=(RepositoryNode)obj;
  final String title=DefaultMessagesImpl.getString(""String_Node_Str"");
  String message=null;
  if (node.getChildren().size() == 0) {
    return;
  }
 else   if (node.getChildren().size() >= 1) {
    message=DefaultMessagesImpl.getString(""String_Node_Str"") + ""String_Node_Str"" + DefaultMessagesImpl.getString(""String_Node_Str"");
  }
  final Shell shell=super.getShell();
  if (!(MessageDialog.openQuestion(shell,title,message))) {
    return;
  }
  IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
  for (  IRepositoryNode child : node.getChildren()) {
    try {
      if (child.getType() == ENodeType.REPOSITORY_ELEMENT) {
        ModelElement modelEle=RepositoryNodeHelper.getModelElementFromRepositoryNode(child);
        if (modelEle != null && modelEle instanceof TdReport) {
          IFile file=ResourceManager.getReportsFolder().getFile(WorkbenchUtils.getFilePath(node));
          if (file.exists()) {
            RepResourceFileHelper.getInstance().remove(file);
          }
        }
        EObjectHelper.removeDependencys(modelEle);
      }
      deleteElements(factory,(RepositoryNode)child);
    }
 catch (    Exception e) {
      MessageBoxExceptionHandler.process(e);
    }
  }
  try {
    factory.saveProject(ProjectManager.getInstance().getCurrentProject());
  }
 catch (  PersistenceException e) {
    ExceptionHandler.process(e);
  }
}",0.8435277382645804
138363,"@Override public void finish(ItemRecord[] records,IProgressMonitor monitor) throws IOException, CoreException {
  super.finish(records,monitor);
  FilesUtils.removeFolder(sourcePath.toFile(),true);
}","@Override public void finish(ItemRecord[] records,IProgressMonitor monitor) throws IOException, CoreException {
  super.finish(records,monitor);
  if (sourcePath != null && sourcePath.toFile().exists()) {
    FilesUtils.removeFolder(sourcePath.toFile(),true);
  }
}",0.8577586206896551
138364,"@Override public boolean isSimilar(EObject obj1,EObject obj2) throws FactoryException {
  DatabaseConnection connection1=SwitchHelpers.DATABASECONNECTION_SWITCH.doSwitch(obj1);
  DatabaseConnection connection2=SwitchHelpers.DATABASECONNECTION_SWITCH.doSwitch(obj2);
  if (connection1 != null && connection2 != null) {
    isChangedconnectionUrl=connection1.getURL().equals(connection2.getURL());
  }
  return isChangedconnectionUrl ? false : super.isSimilar(obj1,obj2);
}","@Override public boolean isSimilar(EObject obj1,EObject obj2) throws FactoryException {
  return Boolean.TRUE;
}",0.353344768439108
138365,"protected void handleDiffPackageElement(DiffElement difElement){
  ModelElementChangeRightTarget addElement=addModelSwitch.doSwitch(difElement);
  if (addElement != null) {
    handleAddElement(addElement);
    return;
  }
  if (difElement instanceof UpdateAttribute) {
    handleUpdateElement((UpdateAttribute)difElement);
    return;
  }
  if (difElement instanceof ReferenceChangeLeftTarget) {
    handleReferenceValuesChange((ReferenceChangeLeftTarget)difElement);
    return;
  }
  if (difElement instanceof ReferenceChangeRightTarget) {
    handleReferenceValuesChange((ReferenceChangeRightTarget)difElement);
    return;
  }
  ModelElementChangeLeftTarget removeElement=removeModelSwitch.doSwitch(difElement);
  if (removeElement != null) {
    handleRemoveElement(removeElement);
  }
}","protected void handleDiffPackageElement(DiffElement difElement){
  DiffGroup diffGroup=diffGroupSwitch.doSwitch(difElement);
  if (diffGroup != null) {
    EList<DiffElement> subDiffElements=diffGroup.getSubDiffElements();
    for (    DiffElement de : subDiffElements) {
      handleDiffPackageElement(de);
    }
    return;
  }
  ModelElementChangeRightTarget addElement=addModelSwitch.doSwitch(difElement);
  if (addElement != null) {
    handleAddElement(addElement);
    return;
  }
  if (difElement instanceof UpdateAttribute) {
    handleUpdateElement((UpdateAttribute)difElement);
    return;
  }
  if (difElement instanceof ReferenceChangeLeftTarget) {
    handleReferenceValuesChange((ReferenceChangeLeftTarget)difElement);
    return;
  }
  if (difElement instanceof ReferenceChangeRightTarget) {
    handleReferenceValuesChange((ReferenceChangeRightTarget)difElement);
    return;
  }
  ModelElementChangeLeftTarget removeElement=removeModelSwitch.doSwitch(difElement);
  if (removeElement != null) {
    handleRemoveElement(removeElement);
  }
}",0.7941653160453809
138366,"private void initSwitchValue(){
  addModelSwitch=new DiffSwitch<ModelElementChangeRightTarget>(){
    @Override public ModelElementChangeRightTarget caseModelElementChangeRightTarget(    ModelElementChangeRightTarget object){
      return object;
    }
  }
;
  updateModelSwitch=new DiffSwitch<UpdateModelElement>(){
    public UpdateModelElement caseUpdateModelElement(    UpdateModelElement object){
      return object;
    }
  }
;
  removeModelSwitch=new DiffSwitch<ModelElementChangeLeftTarget>(){
    @Override public ModelElementChangeLeftTarget caseModelElementChangeLeftTarget(    ModelElementChangeLeftTarget object){
      return object;
    }
  }
;
  packageSwitch=new CoreSwitch<Package>(){
    public Package casePackage(    Package object){
      return object;
    }
  }
;
}","private void initSwitchValue(){
  addModelSwitch=new DiffSwitch<ModelElementChangeRightTarget>(){
    @Override public ModelElementChangeRightTarget caseModelElementChangeRightTarget(    ModelElementChangeRightTarget object){
      return object;
    }
  }
;
  updateModelSwitch=new DiffSwitch<UpdateModelElement>(){
    public UpdateModelElement caseUpdateModelElement(    UpdateModelElement object){
      return object;
    }
  }
;
  removeModelSwitch=new DiffSwitch<ModelElementChangeLeftTarget>(){
    @Override public ModelElementChangeLeftTarget caseModelElementChangeLeftTarget(    ModelElementChangeLeftTarget object){
      return object;
    }
  }
;
  packageSwitch=new CoreSwitch<Package>(){
    public Package casePackage(    Package object){
      return object;
    }
  }
;
  diffGroupSwitch=new DiffSwitch<DiffGroup>(){
    public DiffGroup caseDiffGroup(    DiffGroup object){
      return object;
    }
  }
;
}",0.918509895227008
138367,"@Override protected void saveReloadResult(){
  RepositoryNode recursiveFind=RepositoryNodeHelper.recursiveFind(oldDataProvider);
  Item item=recursiveFind.getObject().getProperty().getItem();
  ElementWriterFactory.getInstance().createDataProviderWriter().save(item);
}","@Override protected void saveReloadResult(){
  RepositoryNode recursiveFind=RepositoryNodeHelper.recursiveFind(oldDataProvider);
  Item item=recursiveFind.getObject().getProperty().getItem();
  Project currentProject=ProjectManager.getInstance().getCurrentProject();
  try {
    ProxyRepositoryFactory.getInstance().save(currentProject,item);
  }
 catch (  PersistenceException e) {
    log.error(e,e);
  }
}",0.5908419497784343
138368,"@Override protected void updateDependencies(ModelElement element){
  Connection connection=(Connection)element;
  EList<Dependency> supplierDependency=connection.getSupplierDependency();
  try {
    for (    Dependency sDependency : supplierDependency) {
      EList<ModelElement> client=sDependency.getClient();
      for (      ModelElement me : client) {
        if (me instanceof Analysis) {
          Analysis analysis=(Analysis)me;
          TypedReturnCode<Dependency> dependencyReturn=DependenciesHandler.getInstance().setDependencyOn(analysis,connection);
          if (dependencyReturn.isOk()) {
            RepositoryNode repositoryNode=RepositoryNodeHelper.recursiveFind(analysis);
            if (repositoryNode != null) {
              TDQAnalysisItem analysisItem=(TDQAnalysisItem)repositoryNode.getObject().getProperty().getItem();
              analysisItem.setAnalysis(analysis);
            }
            ProxyRepositoryFactory.getInstance().getRepositoryFactoryFromProvider().getResourceManager().saveResource(analysis.eResource());
          }
        }
      }
    }
  }
 catch (  PersistenceException e) {
    log.error(e,e);
  }
}","@Override protected void updateDependencies(ModelElement element){
  Connection connection=(Connection)element;
  EList<Dependency> supplierDependency=connection.getSupplierDependency();
  try {
    for (    Dependency sDependency : supplierDependency) {
      EList<ModelElement> client=sDependency.getClient();
      for (      ModelElement me : client) {
        if (me instanceof Analysis) {
          Analysis analysis=(Analysis)me;
          TypedReturnCode<Dependency> dependencyReturn=DependenciesHandler.getInstance().setDependencyOn(analysis,connection);
          if (dependencyReturn.isOk()) {
            RepositoryNode repositoryNode=RepositoryNodeHelper.recursiveFind(analysis);
            if (repositoryNode != null) {
              TDQAnalysisItem analysisItem=(TDQAnalysisItem)repositoryNode.getObject().getProperty().getItem();
              analysisItem.setAnalysis(analysis);
              ElementWriterFactory.getInstance().createAnalysisWrite().save(analysisItem);
            }
          }
        }
      }
    }
  }
 catch (  Exception e) {
    log.error(e,e);
  }
}",0.8918558077436582
138369,"private void impactExistingAnalyses(DataProvider oldDataProvider) throws PartInitException {
  EList<Dependency> clientDependencies=oldDataProvider.getSupplierDependency();
  List<Analysis> unsynedAnalyses=new ArrayList<Analysis>();
  for (  Dependency dep : clientDependencies) {
    StringBuffer impactedAnaStr=new StringBuffer();
    for (    ModelElement mod : dep.getClient()) {
      if (!(mod instanceof Analysis)) {
        continue;
      }
      Analysis ana=(Analysis)mod;
      unsynedAnalyses.add(ana);
      impactedAnaStr.append(ana.getName());
    }
    for (    Analysis analysis : unsynedAnalyses) {
      Resource eResource=analysis.eResource();
      if (eResource == null) {
        continue;
      }
      EMFSharedResources.getInstance().unloadResource(eResource.getURI().toString());
      IWorkspaceRoot root=ResourcesPlugin.getWorkspace().getRoot();
      Path path=new Path(analysis.getFileName() == null ? eResource.getURI().toPlatformString(false) : analysis.getFileName());
      IFile file=root.getFile(path);
      analysis=AnaResourceFileHelper.getInstance().readFromFile(file);
      eResource=analysis.eResource();
      Map<EObject,Collection<Setting>> referenceMaps=EcoreUtil.UnresolvedProxyCrossReferencer.find(eResource);
      Iterator<EObject> it=referenceMaps.keySet().iterator();
      ModelElement eobj=null;
      while (it.hasNext()) {
        eobj=(ModelElement)it.next();
        Collection<Setting> settings=referenceMaps.get(eobj);
        for (        Setting setting : settings) {
          if (setting.getEObject() instanceof AnalysisContext) {
            analysis.getContext().getAnalysedElements().remove(eobj);
          }
 else           if (setting.getEObject() instanceof Indicator) {
            analysis.getResults().getIndicators().remove(setting.getEObject());
          }
        }
      }
      AnaResourceFileHelper.getInstance().save(analysis);
    }
  }
  IWorkbenchPage activePage=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
  IEditorReference[] editors=activePage.getEditorReferences();
  if (editors != null) {
    for (    IEditorReference editorRef : editors) {
      if (editorRef.getId().equals(ANALYSIS_EDITOR_ID)) {
        boolean isConfirm=MessageDialog.openConfirm(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
        if (!isConfirm) {
          return;
        }
      }
    }
    for (    IEditorReference editorRef : editors) {
      IEditorInput editorInput=editorRef.getEditorInput();
      if (editorRef.getId().equals(ANALYSIS_EDITOR_ID)) {
        activePage.closeEditor(editorRef.getEditor(false),false);
        activePage.openEditor(editorInput,ANALYSIS_EDITOR_ID);
      }
    }
  }
}","private void impactExistingAnalyses(DataProvider oldDataProvider) throws PartInitException {
  EList<Dependency> clientDependencies=oldDataProvider.getSupplierDependency();
  List<Analysis> unsynedAnalyses=new ArrayList<Analysis>();
  for (  Dependency dep : clientDependencies) {
    StringBuffer impactedAnaStr=new StringBuffer();
    for (    ModelElement mod : dep.getClient()) {
      if (!(mod instanceof Analysis)) {
        continue;
      }
      Analysis ana=(Analysis)mod;
      unsynedAnalyses.add(ana);
      impactedAnaStr.append(ana.getName());
    }
    for (    Analysis analysis : unsynedAnalyses) {
      Resource eResource=analysis.eResource();
      if (eResource == null) {
        continue;
      }
      EMFSharedResources.getInstance().unloadResource(eResource.getURI().toString());
      IWorkspaceRoot root=ResourcesPlugin.getWorkspace().getRoot();
      Path path=new Path(analysis.getFileName() == null ? eResource.getURI().toPlatformString(false) : analysis.getFileName());
      IFile file=root.getFile(path);
      analysis=(Analysis)AnaResourceFileHelper.getInstance().getModelElement(file);
      if (analysis != null) {
        eResource=analysis.eResource();
        Map<EObject,Collection<Setting>> referenceMaps=EcoreUtil.UnresolvedProxyCrossReferencer.find(eResource);
        Iterator<EObject> it=referenceMaps.keySet().iterator();
        ModelElement eobj=null;
        while (it.hasNext()) {
          eobj=(ModelElement)it.next();
          Collection<Setting> settings=referenceMaps.get(eobj);
          for (          Setting setting : settings) {
            if (setting.getEObject() instanceof AnalysisContext) {
              analysis.getContext().getAnalysedElements().remove(eobj);
            }
 else             if (setting.getEObject() instanceof Indicator) {
              analysis.getResults().getIndicators().remove(setting.getEObject());
            }
          }
        }
        AnaResourceFileHelper.getInstance().save(analysis);
      }
    }
  }
  IWorkbenchPage activePage=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
  IEditorReference[] editors=activePage.getEditorReferences();
  if (editors != null) {
    for (    IEditorReference editorRef : editors) {
      if (editorRef.getId().equals(ANALYSIS_EDITOR_ID)) {
        boolean isConfirm=MessageDialog.openConfirm(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
        if (!isConfirm) {
          return;
        }
      }
    }
    for (    IEditorReference editorRef : editors) {
      IEditorInput editorInput=editorRef.getEditorInput();
      if (editorRef.getId().equals(ANALYSIS_EDITOR_ID)) {
        activePage.closeEditor(editorRef.getEditor(false),false);
        activePage.openEditor(editorInput,ANALYSIS_EDITOR_ID);
      }
    }
  }
}",0.9632495164410058
138370,"@Override protected void copy(boolean leftToRight){
  ModelElement modelElement=null;
  IFile resourceFile=null;
  if (selectedOjbect instanceof IFile) {
    TypedReturnCode<Connection> returnValue=PrvResourceFileHelper.getInstance().findProvider((IFile)selectedOjbect);
    modelElement=returnValue.getObject();
  }
 else   if (selectedOjbect instanceof IRepositoryViewObject) {
    ModelElement me=PropertyHelper.retrieveElement(((IRepositoryViewObject)selectedOjbect).getProperty().getItem());
    if (me instanceof Connection) {
      modelElement=me;
    }
  }
 else {
    Package ctatlogSwtich=SwitchHelpers.PACKAGE_SWITCH.doSwitch((EObject)((AbstractDatabaseFolderNode)selectedOjbect).getParent());
    if (ctatlogSwtich != null) {
      resourceFile=PrvResourceFileHelper.getInstance().findCorrespondingFile(ConnectionHelper.getTdDataProvider(ctatlogSwtich));
      modelElement=ConnectionHelper.getTdDataProvider(ctatlogSwtich);
    }
    ColumnSet columnSet=SwitchHelpers.COLUMN_SET_SWITCH.doSwitch((EObject)((AbstractDatabaseFolderNode)selectedOjbect).getParent());
    if (columnSet != null) {
      resourceFile=PrvResourceFileHelper.getInstance().findCorrespondingFile(ConnectionHelper.getDataProvider(columnSet));
      modelElement=ConnectionHelper.getDataProvider(columnSet);
    }
  }
  if (modelElement != null && resourceFile != null) {
    String titleMessage=DefaultMessagesImpl.getString(""String_Node_Str"");
    int showDialog=DeleteModelElementConfirmDialog.showElementImpactDialog(null,new ModelElement[]{modelElement},titleMessage,titleMessage);
    if (showDialog == Window.OK) {
      EObjectHelper.removeDependencys(new IResource[]{resourceFile});
    }
 else {
      return;
    }
  }
  int diffItemsCount=((ModelCompareInput)getInput()).getDiffAsList().size();
  try {
    super.copy(leftToRight);
    ModelCompareInput modelCompareInput=(ModelCompareInput)getInput();
    if (!leftToRight && modelCompareInput.getDiffAsList().size() == 0) {
      Resource leftResource=modelCompareInput.getLeftResource();
      XmiResourceManager resourceManager=ProxyRepositoryFactory.getInstance().getRepositoryFactoryFromProvider().getResourceManager();
      resourceManager.saveResource(leftResource);
      final MatchModel match=(MatchModel)modelCompareInput.getMatch();
      match.getUnmatchedElements().clear();
      final ComparisonResourceSnapshot snap=DiffFactory.eINSTANCE.createComparisonResourceSnapshot();
      snap.setDiff((DiffModel)((ModelCompareInput)getInput()).getDiff());
      snap.setMatch((MatchModel)((ModelCompareInput)getInput()).getMatch());
      configuration.setProperty(EMFCompareConstants.PROPERTY_CONTENT_INPUT_CHANGED,snap);
    }
    if (!leftToRight && diffItemsCount > 0) {
      new ReloadDatabaseAction(selectedOjbect,null).run();
    }
  }
 catch (  Throwable e) {
    log.error(e.getMessage(),e);
  }
}","@Override protected void copy(boolean leftToRight){
  ModelElement modelElement=null;
  IFile resourceFile=null;
  if (selectedOjbect instanceof IFile) {
    modelElement=PrvResourceFileHelper.getInstance().findProvider((IFile)selectedOjbect);
  }
 else   if (selectedOjbect instanceof IRepositoryViewObject) {
    ModelElement me=PropertyHelper.retrieveElement(((IRepositoryViewObject)selectedOjbect).getProperty().getItem());
    if (me instanceof Connection) {
      modelElement=me;
    }
  }
 else {
    Package ctatlogSwtich=SwitchHelpers.PACKAGE_SWITCH.doSwitch((EObject)((AbstractDatabaseFolderNode)selectedOjbect).getParent());
    if (ctatlogSwtich != null) {
      resourceFile=PrvResourceFileHelper.getInstance().findCorrespondingFile(ConnectionHelper.getTdDataProvider(ctatlogSwtich));
      modelElement=ConnectionHelper.getTdDataProvider(ctatlogSwtich);
    }
    ColumnSet columnSet=SwitchHelpers.COLUMN_SET_SWITCH.doSwitch((EObject)((AbstractDatabaseFolderNode)selectedOjbect).getParent());
    if (columnSet != null) {
      resourceFile=PrvResourceFileHelper.getInstance().findCorrespondingFile(ConnectionHelper.getDataProvider(columnSet));
      modelElement=ConnectionHelper.getDataProvider(columnSet);
    }
  }
  if (modelElement != null && resourceFile != null) {
    String titleMessage=DefaultMessagesImpl.getString(""String_Node_Str"");
    int showDialog=DeleteModelElementConfirmDialog.showElementImpactDialog(null,new ModelElement[]{modelElement},titleMessage,titleMessage);
    if (showDialog == Window.OK) {
      EObjectHelper.removeDependencys(new IResource[]{resourceFile});
    }
 else {
      return;
    }
  }
  int diffItemsCount=((ModelCompareInput)getInput()).getDiffAsList().size();
  try {
    super.copy(leftToRight);
    ModelCompareInput modelCompareInput=(ModelCompareInput)getInput();
    if (!leftToRight && modelCompareInput.getDiffAsList().size() == 0) {
      Resource leftResource=modelCompareInput.getLeftResource();
      XmiResourceManager resourceManager=ProxyRepositoryFactory.getInstance().getRepositoryFactoryFromProvider().getResourceManager();
      resourceManager.saveResource(leftResource);
      final MatchModel match=(MatchModel)modelCompareInput.getMatch();
      match.getUnmatchedElements().clear();
      final ComparisonResourceSnapshot snap=DiffFactory.eINSTANCE.createComparisonResourceSnapshot();
      snap.setDiff((DiffModel)((ModelCompareInput)getInput()).getDiff());
      snap.setMatch((MatchModel)((ModelCompareInput)getInput()).getMatch());
      configuration.setProperty(EMFCompareConstants.PROPERTY_CONTENT_INPUT_CHANGED,snap);
    }
    if (!leftToRight && diffItemsCount > 0) {
      new ReloadDatabaseAction(selectedOjbect,null).run();
    }
  }
 catch (  Throwable e) {
    log.error(e.getMessage(),e);
  }
}",0.9835718071012188
138371,"@Override protected Connection findDataProvider(){
  Connection provider=null;
  if (selectedObj instanceof RepositoryNode) {
    Item connItem=((RepositoryNode)selectedObj).getObject().getProperty().getItem();
    provider=((ConnectionItem)connItem).getConnection();
  }
 else {
    TypedReturnCode<Connection> returnVlaue=PrvResourceFileHelper.getInstance().findProvider((IFile)selectedObj);
    provider=returnVlaue.getObject();
  }
  return provider;
}","@Override protected Connection findDataProvider(){
  Connection provider=null;
  if (selectedObj instanceof RepositoryNode) {
    Item connItem=((RepositoryNode)selectedObj).getObject().getProperty().getItem();
    provider=((ConnectionItem)connItem).getConnection();
  }
 else {
    provider=PrvResourceFileHelper.getInstance().findProvider((IFile)selectedObj);
  }
  return provider;
}",0.863582443653618
138372,"public Connection getAdaptableProvider(Object element){
  Connection adaptedDataProvider=null;
  if (element instanceof IFile) {
    TypedReturnCode<Connection> returnVlaue=PrvResourceFileHelper.getInstance().findProvider((IFile)element);
    adaptedDataProvider=returnVlaue.getObject();
  }
 else   if (element instanceof IRepositoryViewObject) {
    Item item=((IRepositoryViewObject)element).getProperty().getItem();
    if (item instanceof ConnectionItem) {
      adaptedDataProvider=((ConnectionItem)item).getConnection();
    }
  }
 else   if (element instanceof Connection) {
    adaptedDataProvider=ConnectionUtils.fillConnectionMetadataInformation((Connection)element);
  }
 else {
    Package package1=SwitchHelpers.PACKAGE_SWITCH.doSwitch((ModelElement)element);
    if (package1 != null) {
      adaptedDataProvider=ConnectionHelper.getTdDataProvider(package1);
    }
 else {
      ColumnSet columnSet1=SwitchHelpers.COLUMN_SET_SWITCH.doSwitch((ModelElement)element);
      if (columnSet1 != null) {
        adaptedDataProvider=ConnectionHelper.getDataProvider(columnSet1);
      }
 else {
        TdColumn column1=SwitchHelpers.COLUMN_SWITCH.doSwitch((TdColumn)element);
        if (column1 != null) {
          adaptedDataProvider=ConnectionHelper.getTdDataProvider(column1);
        }
      }
    }
  }
  return adaptedDataProvider;
}","public Connection getAdaptableProvider(Object element){
  Connection adaptedDataProvider=null;
  if (element instanceof IFile) {
    adaptedDataProvider=PrvResourceFileHelper.getInstance().findProvider((IFile)element);
  }
 else   if (element instanceof IRepositoryViewObject) {
    Item item=((IRepositoryViewObject)element).getProperty().getItem();
    if (item instanceof ConnectionItem) {
      adaptedDataProvider=((ConnectionItem)item).getConnection();
    }
  }
 else   if (element instanceof Connection) {
    adaptedDataProvider=ConnectionUtils.fillConnectionMetadataInformation((Connection)element);
  }
 else {
    Package package1=SwitchHelpers.PACKAGE_SWITCH.doSwitch((ModelElement)element);
    if (package1 != null) {
      adaptedDataProvider=ConnectionHelper.getTdDataProvider(package1);
    }
 else {
      ColumnSet columnSet1=SwitchHelpers.COLUMN_SET_SWITCH.doSwitch((ModelElement)element);
      if (columnSet1 != null) {
        adaptedDataProvider=ConnectionHelper.getDataProvider(columnSet1);
      }
 else {
        TdColumn column1=SwitchHelpers.COLUMN_SWITCH.doSwitch((TdColumn)element);
        if (column1 != null) {
          adaptedDataProvider=ConnectionHelper.getTdDataProvider(column1);
        }
      }
    }
  }
  return adaptedDataProvider;
}",0.9593001141118296
138373,"/** 
 * DOC bZhou Comment method ""getALLElements"".
 * @param withSystem
 * @return
 */
public static ModelElement[] getALLElements(boolean withSystem){
  Collection<Analysis> allAnalysis=AnaResourceFileHelper.getInstance().getAllAnalysis();
  Collection<WhereRule> allDQRules=DQRuleResourceFileHelper.getInstance().getAllDQRules();
  Collection<Pattern> allPatternes=PatternResourceFileHelper.getInstance().getAllPatternes();
  Collection<Connection> allDataProviders=new ArrayList<Connection>();
  try {
    for (    ConnectionItem connItem : ProxyRepositoryFactory.getInstance().getMetadataConnectionsItem()) {
      allDataProviders.add(connItem.getConnection());
    }
  }
 catch (  PersistenceException e) {
  }
  Collection<TdReport> allReports=RepResourceFileHelper.getInstance().getAllReports();
  Collection<IndicatorDefinition> allUDIs=IndicatorResourceFileHelper.getInstance().getAllUDIs();
  List<ModelElement> allElement=new ArrayList<ModelElement>();
  allElement.addAll(allAnalysis);
  allElement.addAll(allDQRules);
  allElement.addAll(allPatternes);
  allElement.addAll(allDataProviders);
  allElement.addAll(allReports);
  allElement.addAll(allUDIs);
  return allElement.toArray(new ModelElement[allElement.size()]);
}","/** 
 * DOC bZhou Comment method ""getALLElements"".
 * @param withSystem
 * @return
 */
public static ModelElement[] getALLElements(boolean withSystem){
  List<ModelElement> allElement=ResourceFileMap.getAll();
  return allElement.toArray(new ModelElement[allElement.size()]);
}",0.2352941176470588
138374,"private void initRuleRepNode(WhereRule whereRule){
  RepositoryNode recursiveFind=RepositoryNodeHelper.recursiveFind(whereRule);
  if (recursiveFind != null && recursiveFind instanceof RuleRepNode) {
    this.ruleRepNode=(RuleRepNode)recursiveFind;
    this.whereRuleItem=(TDQBusinessRuleItem)this.ruleRepNode.getObject().getProperty().getItem();
  }
}","private void initRuleRepNode(WhereRule whereRule){
  RepositoryNode recursiveFind=RepositoryNodeHelper.recursiveFind(whereRule);
  if (recursiveFind != null && recursiveFind instanceof RuleRepNode) {
    this.ruleRepNode=(RuleRepNode)recursiveFind;
    this.whereRuleItem=(TDQBusinessRuleItem)this.ruleRepNode.getObject().getProperty().getItem();
  }
 else {
    Property property=PropertyHelper.getProperty(whereRule);
    this.whereRuleItem=(TDQBusinessRuleItem)property.getItem();
  }
}",0.8370986920332937
138375,"/** 
 * DOC qiongli Comment method ""createjavaEnginSection"".
 * @param sectionClient
 * @return
 */
protected Composite createjavaEnginSection(Composite sectionClient){
  AnalysisParameters anaParameters=columnSetAnalysisHandler.getAnalysis().getParameters();
  Composite javaEnginSection=toolkit.createComposite(sectionClient);
  Composite checkSection=toolkit.createComposite(javaEnginSection);
  Composite numberSection=toolkit.createComposite(javaEnginSection);
  GridLayout gridLayout=new GridLayout(2,false);
  gridLayout.marginWidth=0;
  GridDataFactory.fillDefaults().grab(true,false).span(2,0).align(SWT.FILL,SWT.BEGINNING).applyTo(javaEnginSection);
  GridDataFactory.fillDefaults().grab(true,false).span(2,0).align(SWT.FILL,SWT.BEGINNING).applyTo(checkSection);
  GridDataFactory.fillDefaults().grab(true,false).span(2,0).align(SWT.FILL,SWT.BEGINNING).applyTo(numberSection);
  javaEnginSection.setLayout(gridLayout);
  checkSection.setLayout(gridLayout);
  numberSection.setLayout(gridLayout);
  toolkit.createLabel(checkSection,DefaultMessagesImpl.getString(""String_Node_Str""));
  drillDownCheck=toolkit.createButton(checkSection,""String_Node_Str"",SWT.CHECK);
  drillDownCheck.setSelection(true);
  simpleStatIndicator.setStoreData(true);
  drillDownCheck.setSelection(anaParameters.isStoreData());
  drillDownCheck.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      simpleStatIndicator.setStoreData(drillDownCheck.getSelection());
      setDirty(true);
    }
  }
);
  Label maxNumLabel=toolkit.createLabel(numberSection,DefaultMessagesImpl.getString(""String_Node_Str""));
  maxNumText=toolkit.createText(numberSection,null,SWT.BORDER);
  maxNumText.setText(String.valueOf(anaParameters.getMaxNumberRows()));
  maxNumText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      String textContent=maxNumText.getText();
      if (stringUtil.isANum(textContent)) {
        setDirty(true);
      }
 else {
        MessageDialog.openWarning(e.display.getActiveShell(),DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str""));
        maxNumText.setText(textContent.substring(0,textContent.length() - 1));
      }
    }
  }
);
  GridDataFactory.fillDefaults().grab(true,false).applyTo(maxNumText);
  GridDataFactory.fillDefaults().align(SWT.BEGINNING,SWT.BEGINNING).applyTo(maxNumLabel);
  GridDataFactory.fillDefaults().grab(true,false).align(SWT.FILL,SWT.BEGINNING).applyTo(drillDownCheck);
  return javaEnginSection;
}","/** 
 * DOC qiongli Comment method ""createjavaEnginSection"".
 * @param sectionClient
 * @return
 */
protected Composite createjavaEnginSection(Composite sectionClient){
  AnalysisParameters anaParameters=columnSetAnalysisHandler.getAnalysis().getParameters();
  Composite javaEnginSection=toolkit.createComposite(sectionClient);
  Composite checkSection=toolkit.createComposite(javaEnginSection);
  Composite numberSection=toolkit.createComposite(javaEnginSection);
  GridLayout gridLayout=new GridLayout(2,false);
  gridLayout.marginWidth=0;
  GridDataFactory.fillDefaults().grab(true,false).span(2,0).align(SWT.FILL,SWT.BEGINNING).applyTo(javaEnginSection);
  GridDataFactory.fillDefaults().grab(true,false).span(2,0).align(SWT.FILL,SWT.BEGINNING).applyTo(checkSection);
  GridDataFactory.fillDefaults().grab(true,false).span(2,0).align(SWT.FILL,SWT.BEGINNING).applyTo(numberSection);
  javaEnginSection.setLayout(gridLayout);
  checkSection.setLayout(gridLayout);
  numberSection.setLayout(gridLayout);
  toolkit.createLabel(checkSection,DefaultMessagesImpl.getString(""String_Node_Str""));
  drillDownCheck=toolkit.createButton(checkSection,""String_Node_Str"",SWT.CHECK);
  drillDownCheck.setSelection(true);
  simpleStatIndicator.setStoreData(true);
  drillDownCheck.setSelection(anaParameters.isStoreData());
  drillDownCheck.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      storeDataCheck.setSelection(drillDownCheck.getSelection());
      simpleStatIndicator.setStoreData(drillDownCheck.getSelection());
      columnSetAnalysisHandler.getAnalysis().getParameters().setStoreData(drillDownCheck.getSelection());
      setDirty(true);
    }
  }
);
  Label maxNumLabel=toolkit.createLabel(numberSection,DefaultMessagesImpl.getString(""String_Node_Str""));
  maxNumText=toolkit.createText(numberSection,null,SWT.BORDER);
  maxNumText.setText(String.valueOf(anaParameters.getMaxNumberRows()));
  maxNumText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      String textContent=maxNumText.getText();
      if (stringUtil.isANum(textContent)) {
        setDirty(true);
      }
 else {
        MessageDialog.openWarning(e.display.getActiveShell(),DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str""));
        maxNumText.setText(textContent.substring(0,textContent.length() - 1));
      }
    }
  }
);
  GridDataFactory.fillDefaults().grab(true,false).applyTo(maxNumText);
  GridDataFactory.fillDefaults().align(SWT.BEGINNING,SWT.BEGINNING).applyTo(maxNumLabel);
  GridDataFactory.fillDefaults().grab(true,false).align(SWT.FILL,SWT.BEGINNING).applyTo(drillDownCheck);
  return javaEnginSection;
}",0.9676326684230336
138376,"@Override public void widgetSelected(SelectionEvent e){
  simpleStatIndicator.setStoreData(drillDownCheck.getSelection());
  setDirty(true);
}","@Override public void widgetSelected(SelectionEvent e){
  storeDataCheck.setSelection(drillDownCheck.getSelection());
  simpleStatIndicator.setStoreData(drillDownCheck.getSelection());
  columnSetAnalysisHandler.getAnalysis().getParameters().setStoreData(drillDownCheck.getSelection());
  setDirty(true);
}",0.6026785714285714
138377,"private Section createAllMatchPart(Composite parentComp,String title,AllMatchIndicator matchIndicator){
  Section section=createSection(form,parentComp,title,null);
  section.setLayoutData(new GridData(GridData.FILL_BOTH));
  Composite sectionClient=toolkit.createComposite(section);
  sectionClient.setLayout(new GridLayout(2,false));
  sectionClient.setLayoutData(new GridData(GridData.FILL_BOTH));
  GridDataFactory.fillDefaults().align(SWT.FILL,SWT.TOP).applyTo(sectionClient);
  List<IndicatorUnit> units=new ArrayList<IndicatorUnit>();
  units.add(new IndicatorUnit(IndicatorEnum.AllMatchIndicatorEnum,allMatchIndicator,null));
  EIndicatorChartType matchingType=EIndicatorChartType.PATTERN_MATCHING;
  IChartTypeStates chartTypeState=ChartTypeStatesOperator.getChartState(matchingType,units);
  ChartWithData chartData=new ChartWithData(matchingType,chartTypeState.getChart(),chartTypeState.getDataEntity());
  TableViewer tableviewer=chartTypeState.getTableForm(sectionClient);
  tableviewer.setInput(chartData);
  TableUtils.addTooltipOnTableItem(tableviewer.getTable());
  ChartTableFactory.addMenuAndTip(tableviewer,chartTypeState.getDataExplorer(),masterPage.getAnalysis());
  if (!EditorPreferencePage.isHideGraphics()) {
    JFreeChart chart=chartTypeState.getChart();
    ChartDecorator.decorate(chart);
    if (chart != null) {
      ChartComposite cc=new ChartComposite(sectionClient,SWT.NONE,chart,true);
      GridData gd=new GridData();
      gd.widthHint=PluginConstant.CHART_STANDARD_WIDHT;
      gd.heightHint=PluginConstant.CHART_STANDARD_HEIGHT;
      cc.setLayoutData(gd);
    }
  }
  section.setClient(sectionClient);
  return section;
}","private Section createAllMatchPart(Composite parentComp,String title,AllMatchIndicator matchIndicator){
  Section section=createSection(form,parentComp,title,null);
  section.setLayoutData(new GridData(GridData.FILL_BOTH));
  Composite sectionClient=toolkit.createComposite(section);
  sectionClient.setLayout(new GridLayout(2,false));
  sectionClient.setLayoutData(new GridData(GridData.FILL_BOTH));
  GridDataFactory.fillDefaults().align(SWT.FILL,SWT.TOP).applyTo(sectionClient);
  List<IndicatorUnit> units=new ArrayList<IndicatorUnit>();
  units.add(new IndicatorUnit(IndicatorEnum.AllMatchIndicatorEnum,allMatchIndicator,null));
  EIndicatorChartType matchingType=EIndicatorChartType.PATTERN_MATCHING;
  IChartTypeStates chartTypeState=ChartTypeStatesOperator.getChartState(matchingType,units);
  ChartWithData chartData=new ChartWithData(matchingType,chartTypeState.getChart(),chartTypeState.getDataEntity());
  TableViewer tableviewer=chartTypeState.getTableForm(sectionClient);
  tableviewer.setInput(chartData);
  TableUtils.addTooltipOnTableItem(tableviewer.getTable());
  if (masterPage.getAnalysis().getParameters().isStoreData()) {
    ChartTableFactory.addMenuAndTip(tableviewer,chartTypeState.getDataExplorer(),masterPage.getAnalysis());
  }
  if (!EditorPreferencePage.isHideGraphics()) {
    JFreeChart chart=chartTypeState.getChart();
    ChartDecorator.decorate(chart);
    if (chart != null) {
      ChartComposite cc=new ChartComposite(sectionClient,SWT.NONE,chart,true);
      GridData gd=new GridData();
      gd.widthHint=PluginConstant.CHART_STANDARD_WIDHT;
      gd.heightHint=PluginConstant.CHART_STANDARD_HEIGHT;
      cc.setLayoutData(gd);
    }
  }
  section.setClient(sectionClient);
  return section;
}",0.9793996468510888
138378,"private void createSimpleTable2(final ScrolledForm form,final Composite composite,final SimpleStatIndicator simpleStatIndicator){
  List<IndicatorUnit> units=new ArrayList<IndicatorUnit>();
  units.add(new IndicatorUnit(IndicatorEnum.RowCountIndicatorEnum,masterPage.getSimpleStatIndicator().getRowCountIndicator(),null));
  units.add(new IndicatorUnit(IndicatorEnum.DistinctCountIndicatorEnum,masterPage.getSimpleStatIndicator().getDistinctCountIndicator(),null));
  units.add(new IndicatorUnit(IndicatorEnum.DuplicateCountIndicatorEnum,masterPage.getSimpleStatIndicator().getDuplicateCountIndicator(),null));
  units.add(new IndicatorUnit(IndicatorEnum.UniqueIndicatorEnum,masterPage.getSimpleStatIndicator().getUniqueCountIndicator(),null));
  EIndicatorChartType simpleStatType=EIndicatorChartType.SIMPLE_STATISTICS;
  IChartTypeStates chartTypeState=ChartTypeStatesOperator.getChartState(simpleStatType,units);
  ChartWithData chartData=new ChartWithData(simpleStatType,chartTypeState.getChart(),chartTypeState.getDataEntity());
  TableViewer tableviewer=chartTypeState.getTableForm(composite);
  tableviewer.setInput(chartData);
  TableUtils.addTooltipOnTableItem(tableviewer.getTable());
  DataExplorer dataExplorer=chartTypeState.getDataExplorer();
  Analysis analysis=this.getAnalysisHandler().getAnalysis();
  ChartTableFactory.addMenuAndTip(tableviewer,dataExplorer,analysis);
  if (!EditorPreferencePage.isHideGraphics()) {
    JFreeChart chart=chartTypeState.getChart();
    ChartDecorator.decorate(chart);
    if (chart != null) {
      ChartComposite cc=new ChartComposite(composite,SWT.NONE,chart,true);
      GridData gd=new GridData();
      gd.widthHint=PluginConstant.CHART_STANDARD_WIDHT;
      gd.heightHint=PluginConstant.CHART_STANDARD_HEIGHT;
      cc.setLayoutData(gd);
      addMouseListenerForChart(cc,dataExplorer,analysis);
    }
  }
}","private void createSimpleTable2(final ScrolledForm form,final Composite composite,final SimpleStatIndicator simpleStatIndicator){
  List<IndicatorUnit> units=new ArrayList<IndicatorUnit>();
  units.add(new IndicatorUnit(IndicatorEnum.RowCountIndicatorEnum,masterPage.getSimpleStatIndicator().getRowCountIndicator(),null));
  units.add(new IndicatorUnit(IndicatorEnum.DistinctCountIndicatorEnum,masterPage.getSimpleStatIndicator().getDistinctCountIndicator(),null));
  units.add(new IndicatorUnit(IndicatorEnum.DuplicateCountIndicatorEnum,masterPage.getSimpleStatIndicator().getDuplicateCountIndicator(),null));
  units.add(new IndicatorUnit(IndicatorEnum.UniqueIndicatorEnum,masterPage.getSimpleStatIndicator().getUniqueCountIndicator(),null));
  EIndicatorChartType simpleStatType=EIndicatorChartType.SIMPLE_STATISTICS;
  IChartTypeStates chartTypeState=ChartTypeStatesOperator.getChartState(simpleStatType,units);
  ChartWithData chartData=new ChartWithData(simpleStatType,chartTypeState.getChart(),chartTypeState.getDataEntity());
  TableViewer tableviewer=chartTypeState.getTableForm(composite);
  tableviewer.setInput(chartData);
  TableUtils.addTooltipOnTableItem(tableviewer.getTable());
  DataExplorer dataExplorer=chartTypeState.getDataExplorer();
  Analysis analysis=this.getAnalysisHandler().getAnalysis();
  ChartTableFactory.addMenuAndTip(tableviewer,dataExplorer,analysis);
  if (!EditorPreferencePage.isHideGraphics()) {
    JFreeChart chart=chartTypeState.getChart();
    ChartDecorator.decorate(chart);
    if (chart != null) {
      ChartComposite cc=new ChartComposite(composite,SWT.NONE,chart,true);
      GridData gd=new GridData();
      gd.widthHint=PluginConstant.CHART_STANDARD_WIDHT;
      gd.heightHint=PluginConstant.CHART_STANDARD_HEIGHT;
      cc.setLayoutData(gd);
      ExecutionLanguage execuLanguage=analysis.getParameters().getExecutionLanguage();
      boolean isAllow=ExecutionLanguage.SQL.equals(execuLanguage) || ExecutionLanguage.JAVA.equals(execuLanguage) && analysis.getParameters().isStoreData();
      if (isAllow) {
        addMouseListenerForChart(cc,dataExplorer,analysis);
      }
    }
  }
}",0.9313358302122348
138379,"public Image getImage(Object element){
  Image image=super.getImage(element);
  if (element instanceof IRepositoryNode) {
    IRepositoryNode node=(IRepositoryNode)element;
    IRepositoryViewObject viewObject=node.getObject();
    ENodeType type=node.getType();
    if (node instanceof ReportAnalysisRepNode) {
      image=ImageLib.getImage(ImageLib.ANALYSIS_OBJECT);
    }
    if (element instanceof RecycleBinRepNode) {
      image=ImageLib.getImage(ImageLib.RECYCLEBIN_EMPTY);
    }
 else     if (type.equals(ENodeType.SYSTEM_FOLDER)) {
      if (viewObject.getLabel().equals(EResourceConstant.DATA_PROFILING.getName())) {
        image=ImageLib.getImage(ImageLib.DATA_PROFILING);
      }
 else       if (viewObject.getLabel().equals(EResourceConstant.METADATA.getName())) {
        image=ImageLib.getImage(ImageLib.METADATA);
      }
 else       if (node instanceof DBConnectionFolderRepNode) {
        image=ImageLib.getImage(ImageLib.CONNECTION);
      }
 else       if (node instanceof MDMConnectionFolderRepNode) {
        image=ImageLib.getImage(ImageLib.MDM_CONNECTION);
      }
 else       if (viewObject.getLabel().equals(EResourceConstant.FILEDELIMITED.getName())) {
        image=ImageLib.getImage(ImageLib.FILE_DELIMITED);
      }
 else       if (viewObject.getLabel().equals(EResourceConstant.LIBRARIES.getName())) {
        image=ImageLib.getImage(ImageLib.LIBRARIES);
      }
 else       if (viewObject.getLabel().equals(EResourceConstant.EXCHANGE.getName())) {
        image=ImageLib.getImage(ImageLib.EXCHANGE);
      }
 else {
        image=ImageLib.getImage(ImageLib.FOLDERNODE_IMAGE);
      }
    }
 else     if (type.equals(ENodeType.SIMPLE_FOLDER)) {
      image=ImageLib.getImage(ImageLib.FOLDERNODE_IMAGE);
    }
 else     if (type.equals(ENodeType.REPOSITORY_ELEMENT)) {
      if (node instanceof DBConnectionRepNode) {
        if (!isSupportedConnection(node)) {
          image=ImageLib.createErrorIcon(ImageLib.TD_DATAPROVIDER).createImage();
        }
        image=ImageLib.getImage(ImageLib.TD_DATAPROVIDER);
      }
 else       if (node instanceof MDMConnectionRepNode) {
        image=ImageLib.getImage(ImageLib.MDM_CONNECTION);
      }
 else       if (node instanceof DFConnectionRepNode) {
        image=ImageLib.getImage(ImageLib.FILE_DELIMITED);
      }
 else       if (node instanceof AnalysisRepNode) {
        image=ImageLib.getImage(ImageLib.ANALYSIS_OBJECT);
      }
 else       if (node instanceof ReportRepNode) {
        image=ImageLib.getImage(ImageLib.REPORT_OBJECT);
      }
 else       if (node instanceof SysIndicatorDefinitionRepNode) {
        image=ImageLib.getImage(ImageLib.IND_DEFINITION);
      }
 else       if (node instanceof PatternRepNode) {
        image=ImageLib.getImage(ImageLib.PATTERN_REG);
      }
 else       if (node instanceof RuleRepNode) {
        image=ImageLib.getImage(ImageLib.DQ_RULE);
      }
 else       if (node instanceof SourceFileRepNode) {
        image=ImageLib.getImage(ImageLib.SOURCE_FILE);
      }
 else       if (node instanceof ExchangeCategoryRepNode || node instanceof ExchangeComponentRepNode) {
        image=ImageLib.getImage(ImageLib.EXCHANGE);
      }
 else       if (node instanceof RepositoryNode) {
        Image imageNode=getImageByContentType((RepositoryNode)node);
        if (image != null) {
          image=imageNode;
        }
      }
      if (ERepositoryStatus.LOCK_BY_USER == ProxyRepositoryFactory.getInstance().getStatus(viewObject)) {
        image=ImageLib.createLockedIcon(ImageDescriptor.createFromImage(image)).createImage();
      }
    }
 else     if (type.equals(ENodeType.TDQ_REPOSITORY_ELEMENT)) {
      if (node instanceof DBCatalogRepNode) {
        image=ImageLib.getImage(ImageLib.CATALOG);
      }
 else       if (node instanceof DBSchemaRepNode) {
        image=ImageLib.getImage(ImageLib.SCHEMA);
      }
 else       if (node instanceof DBTableFolderRepNode) {
        image=ImageLib.getImage(ImageLib.FOLDERNODE_IMAGE);
      }
 else       if (node instanceof DBViewFolderRepNode) {
        image=ImageLib.getImage(ImageLib.FOLDERNODE_IMAGE);
      }
 else       if (node instanceof DBTableRepNode || node instanceof DFTableRepNode) {
        image=ImageLib.getImage(ImageLib.TABLE);
      }
 else       if (node instanceof DBViewRepNode) {
        image=ImageLib.getImage(ImageLib.VIEW);
      }
 else       if (node instanceof DBColumnRepNode) {
        if (((DBColumnRepNode)node).isKey()) {
          image=ImageLib.getImage(ImageLib.PK_COLUMN);
        }
 else {
          image=ImageLib.getImage(ImageLib.TD_COLUMN);
        }
      }
 else       if (node instanceof DFColumnRepNode) {
        image=ImageLib.getImage(ImageLib.TD_COLUMN);
      }
 else       if (node instanceof MDMSchemaRepNode) {
        image=ImageLib.getImage(ImageLib.XML_DOC);
      }
 else       if (node instanceof MDMXmlElementRepNode) {
        image=ImageLib.getImage(ImageLib.XML_ELEMENT_DOC);
      }
 else       if (node instanceof DBColumnFolderRepNode || node instanceof DFColumnFolderRepNode) {
        image=ImageLib.getImage(ImageLib.FOLDERNODE_IMAGE);
      }
    }
  }
  return image;
}","public Image getImage(Object element){
  Image image=super.getImage(element);
  if (element instanceof IRepositoryNode) {
    IRepositoryNode node=(IRepositoryNode)element;
    IRepositoryViewObject viewObject=node.getObject();
    ENodeType type=node.getType();
    if (node instanceof ReportAnalysisRepNode) {
      image=ImageLib.getImage(ImageLib.ANALYSIS_OBJECT);
    }
    if (element instanceof RecycleBinRepNode) {
      image=ImageLib.getImage(ImageLib.RECYCLEBIN_EMPTY);
    }
 else     if (type.equals(ENodeType.SYSTEM_FOLDER)) {
      if (viewObject.getLabel().equals(EResourceConstant.DATA_PROFILING.getName())) {
        image=ImageLib.getImage(ImageLib.DATA_PROFILING);
      }
 else       if (viewObject.getLabel().equals(EResourceConstant.METADATA.getName())) {
        image=ImageLib.getImage(ImageLib.METADATA);
      }
 else       if (node instanceof DBConnectionFolderRepNode) {
        image=ImageLib.getImage(ImageLib.CONNECTION);
      }
 else       if (node instanceof MDMConnectionFolderRepNode) {
        image=ImageLib.getImage(ImageLib.MDM_CONNECTION);
      }
 else       if (viewObject.getLabel().equals(EResourceConstant.FILEDELIMITED.getName())) {
        image=ImageLib.getImage(ImageLib.FILE_DELIMITED);
      }
 else       if (viewObject.getLabel().equals(EResourceConstant.LIBRARIES.getName())) {
        image=ImageLib.getImage(ImageLib.LIBRARIES);
      }
 else       if (viewObject.getLabel().equals(EResourceConstant.EXCHANGE.getName())) {
        image=ImageLib.getImage(ImageLib.EXCHANGE);
      }
 else {
        image=ImageLib.getImage(ImageLib.FOLDERNODE_IMAGE);
      }
    }
 else     if (type.equals(ENodeType.SIMPLE_FOLDER)) {
      image=ImageLib.getImage(ImageLib.FOLDERNODE_IMAGE);
    }
 else     if (type.equals(ENodeType.REPOSITORY_ELEMENT)) {
      if (node instanceof DBConnectionRepNode) {
        if (!isSupportedConnection(node)) {
          image=ImageLib.createErrorIcon(ImageLib.TD_DATAPROVIDER).createImage();
        }
        image=ImageLib.getImage(ImageLib.TD_DATAPROVIDER);
      }
 else       if (node instanceof MDMConnectionRepNode) {
        image=ImageLib.getImage(ImageLib.MDM_CONNECTION);
      }
 else       if (node instanceof DFConnectionRepNode) {
        image=ImageLib.getImage(ImageLib.FILE_DELIMITED);
      }
 else       if (node instanceof AnalysisRepNode) {
        image=ImageLib.getImage(ImageLib.ANALYSIS_OBJECT);
      }
 else       if (node instanceof ReportRepNode) {
        image=ImageLib.getImage(ImageLib.REPORT_OBJECT);
      }
 else       if (node instanceof SysIndicatorDefinitionRepNode) {
        image=ImageLib.getImage(ImageLib.IND_DEFINITION);
      }
 else       if (node instanceof PatternRepNode) {
        image=ImageLib.getImage(ImageLib.PATTERN_REG);
      }
 else       if (node instanceof RuleRepNode) {
        image=ImageLib.getImage(ImageLib.DQ_RULE);
      }
 else       if (node instanceof SourceFileRepNode) {
        image=ImageLib.getImage(ImageLib.SOURCE_FILE);
      }
 else       if (node instanceof ExchangeCategoryRepNode || node instanceof ExchangeComponentRepNode) {
        image=ImageLib.getImage(ImageLib.EXCHANGE);
      }
 else       if (node instanceof RepositoryNode) {
        Image imageNode=getImageByContentType((RepositoryNode)node);
        if (image != null) {
          image=imageNode;
        }
      }
      if (viewObject != null) {
        if (ERepositoryStatus.LOCK_BY_USER == ProxyRepositoryFactory.getInstance().getStatus(viewObject)) {
          image=ImageLib.createLockedIcon(ImageDescriptor.createFromImage(image)).createImage();
        }
      }
    }
 else     if (type.equals(ENodeType.TDQ_REPOSITORY_ELEMENT)) {
      if (node instanceof DBCatalogRepNode) {
        image=ImageLib.getImage(ImageLib.CATALOG);
      }
 else       if (node instanceof DBSchemaRepNode) {
        image=ImageLib.getImage(ImageLib.SCHEMA);
      }
 else       if (node instanceof DBTableFolderRepNode) {
        image=ImageLib.getImage(ImageLib.FOLDERNODE_IMAGE);
      }
 else       if (node instanceof DBViewFolderRepNode) {
        image=ImageLib.getImage(ImageLib.FOLDERNODE_IMAGE);
      }
 else       if (node instanceof DBTableRepNode || node instanceof DFTableRepNode) {
        image=ImageLib.getImage(ImageLib.TABLE);
      }
 else       if (node instanceof DBViewRepNode) {
        image=ImageLib.getImage(ImageLib.VIEW);
      }
 else       if (node instanceof DBColumnRepNode) {
        if (((DBColumnRepNode)node).isKey()) {
          image=ImageLib.getImage(ImageLib.PK_COLUMN);
        }
 else {
          image=ImageLib.getImage(ImageLib.TD_COLUMN);
        }
      }
 else       if (node instanceof DFColumnRepNode) {
        image=ImageLib.getImage(ImageLib.TD_COLUMN);
      }
 else       if (node instanceof MDMSchemaRepNode) {
        image=ImageLib.getImage(ImageLib.XML_DOC);
      }
 else       if (node instanceof MDMXmlElementRepNode) {
        image=ImageLib.getImage(ImageLib.XML_ELEMENT_DOC);
      }
 else       if (node instanceof DBColumnFolderRepNode || node instanceof DFColumnFolderRepNode) {
        image=ImageLib.getImage(ImageLib.FOLDERNODE_IMAGE);
      }
    }
  }
  return image;
}",0.9955252918287938
138380,"@Override public void run(){
  ISelection selection=this.getSelection();
  for (  Object obj : ((IStructuredSelection)selection).toArray()) {
    if (obj instanceof RepositoryNode) {
      RepositoryNode node=(RepositoryNode)obj;
      if (node instanceof ReportFileRepNode) {
        deleteReportFile((ReportFileRepNode)node);
        continue;
      }
      boolean isStateDeleted=RepositoryNodeHelper.isStateDeleted(node);
      if (!isStateDeleted) {
        closeEditors(selection);
        RepositoryNodeHelper.getModelElementFromRepositoryNode(node);
        excuteSuperRun(null);
        break;
      }
      boolean hasDependency=false;
      if (node.getType() == ENodeType.SIMPLE_FOLDER) {
        List<IRepositoryNode> newLs=RepositoryNodeHelper.getRepositoryElementFromFolder(node,true);
        for (        IRepositoryNode subNode : newLs) {
          hasDependency=RepositoryNodeHelper.hasDependencyClients(subNode);
          if (!hasDependency || hasDependency && handleDependencies(subNode)) {
            excuteSuperRun((RepositoryNode)subNode);
          }
        }
        excuteSuperRun(node);
      }
 else {
        hasDependency=RepositoryNodeHelper.hasDependencyClients(node);
        if (!hasDependency || hasDependency && handleDependencies(node)) {
          ModelElement modelEle=RepositoryNodeHelper.getModelElementFromRepositoryNode(node);
          EObjectHelper.removeDependencys(modelEle);
          if (modelEle instanceof TdReport) {
            IFile file=ResourceManager.getReportsFolder().getFile(WorkbenchUtils.getFilePath(node));
            if (file.exists()) {
              RepResourceFileHelper.getInstance().remove(file);
            }
          }
          excuteSuperRun((RepositoryNode)node);
        }
      }
    }
  }
  CorePlugin.getDefault().refreshDQView();
  CorePlugin.getDefault().refreshWorkSpace();
}","@Override public void run(){
  ISelection selection=this.getSelection();
  for (  Object obj : ((IStructuredSelection)selection).toArray()) {
    if (obj instanceof RepositoryNode) {
      RepositoryNode node=(RepositoryNode)obj;
      if (node instanceof ReportFileRepNode) {
        deleteReportFile((ReportFileRepNode)node);
        continue;
      }
      boolean isStateDeleted=RepositoryNodeHelper.isStateDeleted(node);
      if (!isStateDeleted) {
        closeEditors(selection);
        RepositoryNodeHelper.getModelElementFromRepositoryNode(node);
        excuteSuperRun(null);
        break;
      }
      boolean hasDependency=false;
      if (node.getType() == ENodeType.SIMPLE_FOLDER) {
        List<IRepositoryNode> newLs=RepositoryNodeHelper.getRepositoryElementFromFolder(node,true);
        for (        IRepositoryNode subNode : newLs) {
          hasDependency=RepositoryNodeHelper.hasDependencyClients(subNode);
          if (!hasDependency || hasDependency && handleDependencies(subNode)) {
            excuteSuperRun((RepositoryNode)subNode);
          }
        }
        excuteSuperRun(node);
      }
 else {
        hasDependency=RepositoryNodeHelper.hasDependencyClients(node);
        if (!hasDependency || hasDependency && handleDependencies(node)) {
          ModelElement modelEle=RepositoryNodeHelper.getModelElementFromRepositoryNode(node);
          EObjectHelper.removeDependencys(modelEle);
          if (modelEle instanceof TdReport) {
            IFile file=ResourceManager.getReportsFolder().getFile(WorkbenchUtils.getFilePath(node));
            if (file != null) {
              RepResourceFileHelper.getInstance().remove(file);
            }
          }
          excuteSuperRun((RepositoryNode)node);
        }
      }
    }
  }
  CorePlugin.getDefault().refreshDQView();
  CorePlugin.getDefault().refreshWorkSpace();
}",0.9954362416107384
138381,"@Override protected void doRun(){
  ISelection selection=getSelection();
  Object obj=((IStructuredSelection)selection).getFirstElement();
  final RepositoryNode node=(RepositoryNode)obj;
  final String title=DefaultMessagesImpl.getString(""String_Node_Str"");
  String message=null;
  if (node.getChildren().size() == 0) {
    return;
  }
 else   if (node.getChildren().size() >= 1) {
    message=DefaultMessagesImpl.getString(""String_Node_Str"") + ""String_Node_Str"" + DefaultMessagesImpl.getString(""String_Node_Str"");
  }
  final Shell shell=super.getShell();
  if (!(MessageDialog.openQuestion(shell,title,message))) {
    return;
  }
  IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
  for (  IRepositoryNode child : node.getChildren()) {
    try {
      if (child.getType() == ENodeType.REPOSITORY_ELEMENT) {
        ModelElement modelEle=RepositoryNodeHelper.getModelElementFromRepositoryNode(child);
        if (modelEle != null && modelEle instanceof TdReport) {
          IFile file=ResourceManager.getReportsFolder().getFile(WorkbenchUtils.getFilePath(node));
          if (file.exists()) {
            RepResourceFileHelper.getInstance().remove(file);
          }
        }
        EObjectHelper.removeDependencys(modelEle);
      }
      deleteElements(factory,(RepositoryNode)child);
    }
 catch (    Exception e) {
      MessageBoxExceptionHandler.process(e);
    }
  }
  try {
    factory.saveProject(ProjectManager.getInstance().getCurrentProject());
  }
 catch (  PersistenceException e) {
    ExceptionHandler.process(e);
  }
}","@Override protected void doRun(){
  ISelection selection=getSelection();
  Object obj=((IStructuredSelection)selection).getFirstElement();
  final RepositoryNode node=(RepositoryNode)obj;
  final String title=DefaultMessagesImpl.getString(""String_Node_Str"");
  String message=null;
  if (node.getChildren().size() == 0) {
    return;
  }
 else   if (node.getChildren().size() >= 1) {
    message=DefaultMessagesImpl.getString(""String_Node_Str"") + ""String_Node_Str"" + DefaultMessagesImpl.getString(""String_Node_Str"");
  }
  final Shell shell=super.getShell();
  if (!(MessageDialog.openQuestion(shell,title,message))) {
    return;
  }
  IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
  for (  IRepositoryNode child : node.getChildren()) {
    try {
      if (child.getType() == ENodeType.REPOSITORY_ELEMENT) {
        ModelElement modelEle=RepositoryNodeHelper.getModelElementFromRepositoryNode(child);
        if (modelEle != null && modelEle instanceof TdReport) {
          IFile file=ResourceManager.getReportsFolder().getFile(WorkbenchUtils.getFilePath(node));
          if (file != null) {
            RepResourceFileHelper.getInstance().remove(file);
          }
        }
        EObjectHelper.removeDependencys(modelEle);
      }
      deleteElements(factory,(RepositoryNode)child);
    }
 catch (    Exception e) {
      MessageBoxExceptionHandler.process(e);
    }
  }
  try {
    factory.saveProject(ProjectManager.getInstance().getCurrentProject());
  }
 catch (  PersistenceException e) {
    ExceptionHandler.process(e);
  }
}",0.994566954298498
138382,"public Image getImage(Object element){
  if (element instanceof IRepositoryNode) {
    IRepositoryNode node=(IRepositoryNode)element;
    IRepositoryViewObject viewObject=node.getObject();
    ENodeType type=node.getType();
    if (node instanceof ReportAnalysisRepNode) {
      return ImageLib.getImage(ImageLib.ANALYSIS_OBJECT);
    }
    if (element instanceof RecycleBinRepNode) {
      return ImageLib.getImage(ImageLib.RECYCLEBIN_EMPTY);
    }
 else     if (type.equals(ENodeType.SYSTEM_FOLDER)) {
      if (viewObject.getLabel().equals(EResourceConstant.DATA_PROFILING.getName())) {
        return ImageLib.getImage(ImageLib.DATA_PROFILING);
      }
 else       if (viewObject.getLabel().equals(EResourceConstant.METADATA.getName())) {
        return ImageLib.getImage(ImageLib.METADATA);
      }
 else       if (node instanceof DBConnectionFolderRepNode) {
        return ImageLib.getImage(ImageLib.CONNECTION);
      }
 else       if (node instanceof MDMConnectionFolderRepNode) {
        return ImageLib.getImage(ImageLib.MDM_CONNECTION);
      }
 else       if (viewObject.getLabel().equals(EResourceConstant.FILEDELIMITED.getName())) {
        return ImageLib.getImage(ImageLib.FILE_DELIMITED);
      }
 else       if (viewObject.getLabel().equals(EResourceConstant.LIBRARIES.getName())) {
        return ImageLib.getImage(ImageLib.LIBRARIES);
      }
 else       if (viewObject.getLabel().equals(EResourceConstant.EXCHANGE.getName())) {
        return ImageLib.getImage(ImageLib.EXCHANGE);
      }
      return ImageLib.getImage(ImageLib.FOLDERNODE_IMAGE);
    }
 else     if (type.equals(ENodeType.SIMPLE_FOLDER)) {
      return ImageLib.getImage(ImageLib.FOLDERNODE_IMAGE);
    }
 else     if (type.equals(ENodeType.REPOSITORY_ELEMENT)) {
      if (node instanceof DBConnectionRepNode) {
        if (!isSupportedConnection(node)) {
          return ImageLib.createErrorIcon(ImageLib.TD_DATAPROVIDER).createImage();
        }
        return ImageLib.getImage(ImageLib.TD_DATAPROVIDER);
      }
 else       if (node instanceof MDMConnectionRepNode) {
        return ImageLib.getImage(ImageLib.MDM_CONNECTION);
      }
 else       if (node instanceof DFConnectionRepNode) {
        return ImageLib.getImage(ImageLib.FILE_DELIMITED);
      }
 else       if (node instanceof AnalysisRepNode) {
        return ImageLib.getImage(ImageLib.ANALYSIS_OBJECT);
      }
 else       if (node instanceof ReportRepNode) {
        return ImageLib.getImage(ImageLib.REPORT_OBJECT);
      }
 else       if (node instanceof SysIndicatorDefinitionRepNode) {
        return ImageLib.getImage(ImageLib.IND_DEFINITION);
      }
 else       if (node instanceof PatternRepNode) {
        return ImageLib.getImage(ImageLib.PATTERN_REG);
      }
 else       if (node instanceof RuleRepNode) {
        return ImageLib.getImage(ImageLib.DQ_RULE);
      }
 else       if (node instanceof SourceFileRepNode) {
        return ImageLib.getImage(ImageLib.SOURCE_FILE);
      }
 else       if (node instanceof ExchangeCategoryRepNode || node instanceof ExchangeComponentRepNode) {
        return ImageLib.getImage(ImageLib.EXCHANGE);
      }
 else       if (node instanceof RepositoryNode) {
        Image image=getImageByContentType((RepositoryNode)node);
        if (image != null) {
          return image;
        }
      }
    }
 else     if (type.equals(ENodeType.TDQ_REPOSITORY_ELEMENT)) {
      if (node instanceof DBCatalogRepNode) {
        return ImageLib.getImage(ImageLib.CATALOG);
      }
 else       if (node instanceof DBSchemaRepNode) {
        return ImageLib.getImage(ImageLib.SCHEMA);
      }
 else       if (node instanceof DBTableFolderRepNode) {
        return ImageLib.getImage(ImageLib.FOLDERNODE_IMAGE);
      }
 else       if (node instanceof DBViewFolderRepNode) {
        return ImageLib.getImage(ImageLib.FOLDERNODE_IMAGE);
      }
 else       if (node instanceof DBTableRepNode || node instanceof DFTableRepNode) {
        return ImageLib.getImage(ImageLib.TABLE);
      }
 else       if (node instanceof DBViewRepNode) {
        return ImageLib.getImage(ImageLib.VIEW);
      }
 else       if (node instanceof DBColumnRepNode) {
        if (((DBColumnRepNode)node).isKey()) {
          return ImageLib.getImage(ImageLib.PK_COLUMN);
        }
        return ImageLib.getImage(ImageLib.TD_COLUMN);
      }
 else       if (node instanceof DFColumnRepNode) {
        return ImageLib.getImage(ImageLib.TD_COLUMN);
      }
 else       if (node instanceof MDMSchemaRepNode) {
        return ImageLib.getImage(ImageLib.XML_DOC);
      }
 else       if (node instanceof MDMXmlElementRepNode) {
        return ImageLib.getImage(ImageLib.XML_ELEMENT_DOC);
      }
 else       if (node instanceof DBColumnFolderRepNode || node instanceof DFColumnFolderRepNode) {
        return ImageLib.getImage(ImageLib.FOLDERNODE_IMAGE);
      }
    }
  }
  return super.getImage(element);
}","public Image getImage(Object element){
  Image image=super.getImage(element);
  if (element instanceof IRepositoryNode) {
    IRepositoryNode node=(IRepositoryNode)element;
    IRepositoryViewObject viewObject=node.getObject();
    ENodeType type=node.getType();
    if (node instanceof ReportAnalysisRepNode) {
      image=ImageLib.getImage(ImageLib.ANALYSIS_OBJECT);
    }
    if (element instanceof RecycleBinRepNode) {
      image=ImageLib.getImage(ImageLib.RECYCLEBIN_EMPTY);
    }
 else     if (type.equals(ENodeType.SYSTEM_FOLDER)) {
      if (viewObject.getLabel().equals(EResourceConstant.DATA_PROFILING.getName())) {
        image=ImageLib.getImage(ImageLib.DATA_PROFILING);
      }
 else       if (viewObject.getLabel().equals(EResourceConstant.METADATA.getName())) {
        image=ImageLib.getImage(ImageLib.METADATA);
      }
 else       if (node instanceof DBConnectionFolderRepNode) {
        image=ImageLib.getImage(ImageLib.CONNECTION);
      }
 else       if (node instanceof MDMConnectionFolderRepNode) {
        image=ImageLib.getImage(ImageLib.MDM_CONNECTION);
      }
 else       if (viewObject.getLabel().equals(EResourceConstant.FILEDELIMITED.getName())) {
        image=ImageLib.getImage(ImageLib.FILE_DELIMITED);
      }
 else       if (viewObject.getLabel().equals(EResourceConstant.LIBRARIES.getName())) {
        image=ImageLib.getImage(ImageLib.LIBRARIES);
      }
 else       if (viewObject.getLabel().equals(EResourceConstant.EXCHANGE.getName())) {
        image=ImageLib.getImage(ImageLib.EXCHANGE);
      }
 else {
        image=ImageLib.getImage(ImageLib.FOLDERNODE_IMAGE);
      }
    }
 else     if (type.equals(ENodeType.SIMPLE_FOLDER)) {
      image=ImageLib.getImage(ImageLib.FOLDERNODE_IMAGE);
    }
 else     if (type.equals(ENodeType.REPOSITORY_ELEMENT)) {
      if (node instanceof DBConnectionRepNode) {
        if (!isSupportedConnection(node)) {
          image=ImageLib.createErrorIcon(ImageLib.TD_DATAPROVIDER).createImage();
        }
        image=ImageLib.getImage(ImageLib.TD_DATAPROVIDER);
      }
 else       if (node instanceof MDMConnectionRepNode) {
        image=ImageLib.getImage(ImageLib.MDM_CONNECTION);
      }
 else       if (node instanceof DFConnectionRepNode) {
        image=ImageLib.getImage(ImageLib.FILE_DELIMITED);
      }
 else       if (node instanceof AnalysisRepNode) {
        image=ImageLib.getImage(ImageLib.ANALYSIS_OBJECT);
      }
 else       if (node instanceof ReportRepNode) {
        image=ImageLib.getImage(ImageLib.REPORT_OBJECT);
      }
 else       if (node instanceof SysIndicatorDefinitionRepNode) {
        image=ImageLib.getImage(ImageLib.IND_DEFINITION);
      }
 else       if (node instanceof PatternRepNode) {
        image=ImageLib.getImage(ImageLib.PATTERN_REG);
      }
 else       if (node instanceof RuleRepNode) {
        image=ImageLib.getImage(ImageLib.DQ_RULE);
      }
 else       if (node instanceof SourceFileRepNode) {
        image=ImageLib.getImage(ImageLib.SOURCE_FILE);
      }
 else       if (node instanceof ExchangeCategoryRepNode || node instanceof ExchangeComponentRepNode) {
        image=ImageLib.getImage(ImageLib.EXCHANGE);
      }
 else       if (node instanceof RepositoryNode) {
        Image imageNode=getImageByContentType((RepositoryNode)node);
        if (image != null) {
          image=imageNode;
        }
      }
      if (ERepositoryStatus.LOCK_BY_USER == ProxyRepositoryFactory.getInstance().getStatus(viewObject)) {
        image=ImageLib.createLockedIcon(ImageDescriptor.createFromImage(image)).createImage();
      }
    }
 else     if (type.equals(ENodeType.TDQ_REPOSITORY_ELEMENT)) {
      if (node instanceof DBCatalogRepNode) {
        image=ImageLib.getImage(ImageLib.CATALOG);
      }
 else       if (node instanceof DBSchemaRepNode) {
        image=ImageLib.getImage(ImageLib.SCHEMA);
      }
 else       if (node instanceof DBTableFolderRepNode) {
        image=ImageLib.getImage(ImageLib.FOLDERNODE_IMAGE);
      }
 else       if (node instanceof DBViewFolderRepNode) {
        image=ImageLib.getImage(ImageLib.FOLDERNODE_IMAGE);
      }
 else       if (node instanceof DBTableRepNode || node instanceof DFTableRepNode) {
        image=ImageLib.getImage(ImageLib.TABLE);
      }
 else       if (node instanceof DBViewRepNode) {
        image=ImageLib.getImage(ImageLib.VIEW);
      }
 else       if (node instanceof DBColumnRepNode) {
        if (((DBColumnRepNode)node).isKey()) {
          image=ImageLib.getImage(ImageLib.PK_COLUMN);
        }
        image=ImageLib.getImage(ImageLib.TD_COLUMN);
      }
 else       if (node instanceof DFColumnRepNode) {
        image=ImageLib.getImage(ImageLib.TD_COLUMN);
      }
 else       if (node instanceof MDMSchemaRepNode) {
        image=ImageLib.getImage(ImageLib.XML_DOC);
      }
 else       if (node instanceof MDMXmlElementRepNode) {
        image=ImageLib.getImage(ImageLib.XML_ELEMENT_DOC);
      }
 else       if (node instanceof DBColumnFolderRepNode || node instanceof DFColumnFolderRepNode) {
        image=ImageLib.getImage(ImageLib.FOLDERNODE_IMAGE);
      }
    }
  }
  return image;
}",0.8667401985360473
138383,"private void excuteSuperRun(RepositoryNode currentNode){
  this.currentNode=currentNode;
  super.run();
  if (currentNode != null) {
    RepositoryNode parent=currentNode.getParent();
    if (parent != null && parent.getType() == ENodeType.SIMPLE_FOLDER) {
      parent.getChildren(true).remove(currentNode);
    }
  }
}","private void excuteSuperRun(RepositoryNode currentNode){
  this.currentNode=currentNode;
  super.run();
  if (currentNode != null) {
    RepositoryNode parent=currentNode.getParent();
    if (parent != null && (parent.getType() == ENodeType.SIMPLE_FOLDER || parent.getLabel().equalsIgnoreCase(ERepositoryObjectType.RECYCLE_BIN.name().replaceAll(""String_Node_Str"",""String_Node_Str"")))) {
      parent.getChildren(true).remove(currentNode);
    }
  }
}",0.8311688311688312
138384,"public DataSet getDataSet(){
  List<String> columnElementList=filterAdaptColumnHeader();
  columnHeader=new String[columnElementList.size()];
  int headerIndex=0;
  for (  String columnElement : columnElementList) {
    columnHeader[headerIndex++]=columnElement;
  }
  List<Object[]> newColumnElementList=filterAdaptDataList();
  if (newColumnElementList.size() <= 0) {
    columnValue=new String[0][0];
    return new DataSet(columnHeader,columnValue);
  }
  columnValue=new String[newColumnElementList.size()][columnElementList.size()];
  int rowIndex=0;
  for (  Object[] tableRow : newColumnElementList) {
    int columnIndex=0;
    for (    Object tableValue : tableRow) {
      columnValue[rowIndex][columnIndex++]=tableValue == null ? ""String_Node_Str"" : tableValue.toString();
    }
    rowIndex++;
  }
  return new DataSet(columnHeader,columnValue);
}","public DataSet getDataSet(){
  List<String> columnElementList=filterAdaptColumnHeader();
  columnHeader=new String[columnElementList.size()];
  int headerIndex=0;
  for (  String columnElement : columnElementList) {
    columnHeader[headerIndex++]=columnElement;
  }
  List<Object[]> newColumnElementList=filterAdaptDataList();
  if (newColumnElementList.size() <= 0) {
    columnValue=new String[0][0];
    return new DataSet(columnHeader,columnValue);
  }
  if (DrillDownEditorInput.judgeMenuType(getMenuType(),DrillDownEditorInput.MENU_VALUE_TYPE)) {
    columnValue=new String[newColumnElementList.size()][newColumnElementList.get(0).length];
  }
 else {
    columnValue=new String[newColumnElementList.size()][columnElementList.size()];
  }
  int rowIndex=0;
  for (  Object[] tableRow : newColumnElementList) {
    int columnIndex=0;
    for (    Object tableValue : tableRow) {
      columnValue[rowIndex][columnIndex++]=tableValue == null ? ""String_Node_Str"" : tableValue.toString();
    }
    rowIndex++;
  }
  return new DataSet(columnHeader,columnValue);
}",0.8842760768033212
138385,"/** 
 * zshen Comment method ""getRepositoryFolderNode"".
 * @param folderConstant
 * @return one RepositoryFolderNode which corresponding to the value of folderConstant
 */
public static IRepositoryNode getMetadataFolderNode(EResourceConstant folderConstant){
  String[] folderPathArray=folderConstant.getPath().split(""String_Node_Str"");
  if (folderPathArray.length <= 0) {
    return null;
  }
  IRepositoryNode node=getRootNode(ERepositoryObjectType.METADATA);
  for (int i=1; folderPathArray.length > i; i++) {
    for (    IRepositoryNode childNode : node.getChildren()) {
      if (childNode.getObject().getLabel().equalsIgnoreCase(folderPathArray[i])) {
        node=childNode;
        break;
      }
    }
  }
  return node;
}","/** 
 * zshen Comment method ""getRepositoryFolderNode"".
 * @param folderConstant
 * @return one RepositoryFolderNode which corresponding to the value of folderConstant
 */
public static IRepositoryNode getMetadataFolderNode(EResourceConstant folderConstant){
  String[] folderPathArray=folderConstant.getPath().split(""String_Node_Str"");
  if (folderPathArray.length <= 0) {
    return null;
  }
  IRepositoryNode node=getRootNode(ERepositoryObjectType.METADATA);
  if (node != null) {
    for (int i=1; folderPathArray.length > i; i++) {
      for (      IRepositoryNode childNode : node.getChildren()) {
        if (childNode.getObject().getLabel().equalsIgnoreCase(folderPathArray[i])) {
          node=childNode;
          break;
        }
      }
    }
  }
  return node;
}",0.9642384105960264
138386,"public static IRepositoryNode getLibrariesFolderNode(EResourceConstant folderConstant){
  String[] folderPathArray=folderConstant.getPath().split(""String_Node_Str"");
  if (folderPathArray.length <= 0) {
    return null;
  }
  IRepositoryNode node=getRootNode(ERepositoryObjectType.TDQ_LIBRARIES);
  for (int i=1; folderPathArray.length > i; i++) {
    for (    IRepositoryNode childNode : node.getChildren()) {
      if (childNode.getObject().getLabel().equalsIgnoreCase(folderPathArray[i])) {
        node=childNode;
        break;
      }
    }
  }
  return node;
}","public static IRepositoryNode getLibrariesFolderNode(EResourceConstant folderConstant){
  String[] folderPathArray=folderConstant.getPath().split(""String_Node_Str"");
  if (folderPathArray.length <= 0) {
    return null;
  }
  IRepositoryNode node=getRootNode(ERepositoryObjectType.TDQ_LIBRARIES);
  if (node != null) {
    for (int i=1; folderPathArray.length > i; i++) {
      for (      IRepositoryNode childNode : node.getChildren()) {
        if (childNode.getObject().getLabel().equalsIgnoreCase(folderPathArray[i])) {
          node=childNode;
          break;
        }
      }
    }
  }
  return node;
}",0.9541595925297114
138387,"public static IRepositoryNode getDataProfilingFolderNode(EResourceConstant folderConstant){
  String[] folderPathArray=folderConstant.getPath().split(""String_Node_Str"");
  if (folderPathArray.length <= 0) {
    return null;
  }
  IRepositoryNode node=getRootNode(ERepositoryObjectType.TDQ_DATA_PROFILING);
  for (int i=1; folderPathArray.length > i; i++) {
    for (    IRepositoryNode childNode : node.getChildren()) {
      if (childNode.getObject().getLabel().equalsIgnoreCase(folderPathArray[i])) {
        node=childNode;
        break;
      }
    }
  }
  return node;
}","public static IRepositoryNode getDataProfilingFolderNode(EResourceConstant folderConstant){
  String[] folderPathArray=folderConstant.getPath().split(""String_Node_Str"");
  if (folderPathArray.length <= 0) {
    return null;
  }
  IRepositoryNode node=getRootNode(ERepositoryObjectType.TDQ_DATA_PROFILING);
  if (node != null) {
    for (int i=1; folderPathArray.length > i; i++) {
      for (      IRepositoryNode childNode : node.getChildren()) {
        if (childNode.getObject().getLabel().equalsIgnoreCase(folderPathArray[i])) {
          node=childNode;
          break;
        }
      }
    }
  }
  return node;
}",0.9548494983277592
138388,"/** 
 * update ModelElement files (Analysis, Report, IndicatorDefinition, Pattern, Rule).
 * @param parentFile
 * @param fileExtension
 * @param baseFolder
 * @param baseFile
 * @param createSubFolder
 * @param replaceStringMap
 * @return
 */
private boolean updateModelElements(File parentFile,String fileExtension,IFolder baseFolder,File baseFile,boolean createSubFolder,Map<String,String> replaceStringMap){
  boolean isImport=true;
  try {
    if (!parentFile.isFile()) {
      boolean updateSubFolders=true;
      if (createSubFolder) {
        updateSubFolders=createSubFolder(parentFile,baseFolder);
      }
      if (updateSubFolders) {
        File[] listFiles=parentFile.listFiles();
        for (        File file : listFiles) {
          updateModelElements(file,fileExtension,baseFolder,baseFile,createSubFolder,replaceStringMap);
        }
      }
    }
 else {
      if (parentFile.getName().endsWith(fileExtension)) {
        ModelElement modelElement=getModelElement(parentFile);
        if (modelElement != null) {
          IFolder fullPathFolder=getFullPathFolder(baseFolder,baseFile,parentFile);
          if (fileExtension.equals(FactoriesUtil.ANA)) {
            setReplaceChildNameForAna(modelElement);
          }
          ElementWriterFactory.getInstance().createPatternWriter().create(modelElement,fullPathFolder,isImport);
          IPath replatePrefixPath=fullPathFolder.getFullPath().removeFirstSegments(2);
          String oldFileNameFull=replatePrefixPath.append(parentFile.getName()).toString();
          String newFileNameFull=replatePrefixPath.append(getDefaultNewFileName(modelElement.getName(),fileExtension)).toString();
          replaceStringMap.put(oldFileNameFull,newFileNameFull);
        }
      }
    }
  }
 catch (  Exception e) {
    log.error(e,e);
    return false;
  }
  return true;
}","/** 
 * update ModelElement files (Analysis, Report, IndicatorDefinition, Pattern, Rule).
 * @param parentFile
 * @param fileExtension
 * @param baseFolder
 * @param baseFile
 * @param createSubFolder
 * @param replaceStringMap
 * @return
 */
private boolean updateModelElements(File parentFile,String fileExtension,IFolder baseFolder,File baseFile,boolean createSubFolder,Map<String,String> replaceStringMap){
  boolean isImport=true;
  try {
    if (!parentFile.isFile()) {
      boolean updateSubFolders=true;
      if (createSubFolder) {
        updateSubFolders=createSubFolder(parentFile,baseFolder);
      }
      if (updateSubFolders) {
        File[] listFiles=parentFile.listFiles();
        for (        File file : listFiles) {
          updateModelElements(file,fileExtension,baseFolder,baseFile,createSubFolder,replaceStringMap);
        }
      }
    }
 else {
      if (parentFile.getName().endsWith(fileExtension)) {
        ModelElement modelElement=getModelElement(parentFile);
        if (modelElement != null) {
          IFolder fullPathFolder=getFullPathFolder(baseFolder,baseFile,parentFile);
          if (fileExtension.equals(FactoriesUtil.ANA)) {
            setReplaceChildNameForAna(modelElement);
          }
          String modelName=checkName(modelElement,fullPathFolder);
          modelElement.setName(modelName);
          ElementWriterFactory.getInstance().createPatternWriter().create(modelElement,fullPathFolder,isImport);
          IPath replatePrefixPath=fullPathFolder.getFullPath().removeFirstSegments(2);
          String oldFileNameFull=replatePrefixPath.append(parentFile.getName()).toString();
          String newFileNameFull=replatePrefixPath.append(getDefaultNewFileName(modelElement.getName(),fileExtension)).toString();
          replaceStringMap.put(oldFileNameFull,newFileNameFull);
        }
      }
    }
  }
 catch (  Exception e) {
    log.error(e,e);
    return false;
  }
  return true;
}",0.97094558901215
138389,"private String copyFile(File targetFolder,File propFile,Property property,IPath path,String connNameAfter,Map<File,File> folderMap) throws IOException {
  String connName=null;
  File destItemFile=new Path(targetFolder.getAbsolutePath()).append(path).append(connNameAfter).addFileExtension(FactoriesUtil.ITEM_EXTENSION).toFile();
  File destPropFile=new Path(targetFolder.getAbsolutePath()).append(path).append(connNameAfter).addFileExtension(FactoriesUtil.PROPERTIES_EXTENSION).toFile();
  File srcItemFile=new Path(propFile.getAbsolutePath()).removeFileExtension().addFileExtension(FactoriesUtil.ITEM_EXTENSION).toFile();
  File srcPropFile=propFile;
  Item item=property.getItem();
  if (destItemFile.exists()) {
    int num=0;
    if (item instanceof ConnectionItem) {
      Resource itemResource=getResource(srcItemFile.getAbsolutePath());
      Connection conn=null;
      for (      EObject object : itemResource.getContents()) {
        if (object instanceof Connection) {
          conn=(Connection)object;
          connName=conn.getName();
        }
      }
      while (destItemFile.exists() || destPropFile.exists()) {
        String version=property.getVersion();
        if (version == null) {
          version=""String_Node_Str"";
        }
        connName=connName + String.valueOf(++num);
        conn.setName(connName);
        connNameAfter=connName + ""String_Node_Str"" + version;
        destItemFile=new Path(destItemFile.getPath()).removeLastSegments(1).append(connNameAfter).addFileExtension(FactoriesUtil.ITEM_EXTENSION).toFile();
        destPropFile=new Path(destPropFile.getPath()).removeLastSegments(1).append(connNameAfter).addFileExtension(FactoriesUtil.PROPERTIES_EXTENSION).toFile();
      }
    }
  }
  FileUtils.copyFile(srcItemFile,destItemFile);
  FileUtils.copyFile(srcPropFile,destPropFile);
  if (item instanceof ConnectionItem) {
    ConnectionItem connectionItem=(ConnectionItem)item;
    Resource itemResource=getResource(destItemFile.getAbsolutePath());
    Connection conn=null;
    for (    EObject object : itemResource.getContents()) {
      if (object instanceof Connection) {
        conn=(Connection)object;
        if (connName != null) {
          conn.setName(connName);
          conn.setLabel(connName);
        }
        String relationPropPath=ReponsitoryContextBridge.getRootProject().getFullPath().append(new Path(destPropFile.getPath()).makeRelativeTo(this.getWorkspacePath())).toOSString();
        MetadataHelper.setPropertyPath(relationPropPath,conn);
        connectionItem.setConnection(conn);
      }
    }
    EMFUtil.saveResource(itemResource);
    Resource propResource=getResource(destPropFile.getAbsolutePath());
    Property newProperty=(Property)EcoreUtil.getObjectByType(propResource.getContents(),PropertiesPackage.eINSTANCE.getProperty());
    newProperty.setAuthor(property.getAuthor());
    newProperty.setLabel(connectionItem.getConnection().getName());
    newProperty.setItem(item);
    item.setProperty(newProperty);
    propResource.getContents().clear();
    propResource.getContents().add(newProperty);
    propResource.getContents().add(item);
    propResource.getContents().add(item.getState());
    EMFUtil.saveResource(propResource);
  }
  return connNameAfter;
}","private String copyFile(File targetFolder,File propFile,Property property,IPath path,String connNameAfter,String connName,Map<File,File> folderMap) throws IOException {
  File destItemFile=new Path(targetFolder.getAbsolutePath()).append(path).append(connNameAfter).addFileExtension(FactoriesUtil.ITEM_EXTENSION).toFile();
  File destPropFile=new Path(targetFolder.getAbsolutePath()).append(path).append(connNameAfter).addFileExtension(FactoriesUtil.PROPERTIES_EXTENSION).toFile();
  File srcItemFile=new Path(propFile.getAbsolutePath()).removeFileExtension().addFileExtension(FactoriesUtil.ITEM_EXTENSION).toFile();
  File srcPropFile=propFile;
  Item item=property.getItem();
  FileUtils.copyFile(srcItemFile,destItemFile);
  FileUtils.copyFile(srcPropFile,destPropFile);
  if (item instanceof ConnectionItem) {
    ConnectionItem connectionItem=(ConnectionItem)item;
    Resource itemResource=getResource(destItemFile.getAbsolutePath());
    Connection conn=null;
    for (    EObject object : itemResource.getContents()) {
      if (object instanceof Connection) {
        conn=(Connection)object;
        if (connName != null) {
          conn.setName(connName);
          conn.setLabel(connName);
        }
        String relationPropPath=ReponsitoryContextBridge.getRootProject().getFullPath().append(new Path(destPropFile.getPath()).makeRelativeTo(this.getWorkspacePath())).toOSString();
        MetadataHelper.setPropertyPath(relationPropPath,conn);
        connectionItem.setConnection(conn);
      }
    }
    EMFUtil.saveResource(itemResource);
    Resource propResource=getResource(destPropFile.getAbsolutePath());
    Property newProperty=(Property)EcoreUtil.getObjectByType(propResource.getContents(),PropertiesPackage.eINSTANCE.getProperty());
    newProperty.setAuthor(property.getAuthor());
    newProperty.setLabel(connectionItem.getConnection().getName());
    newProperty.setItem(item);
    item.setProperty(newProperty);
    propResource.getContents().clear();
    propResource.getContents().add(newProperty);
    propResource.getContents().add(item);
    propResource.getContents().add(item.getState());
    EMFUtil.saveResource(propResource);
  }
  return connNameAfter;
}",0.7999265785609398
138390,"private void handlePropertiesFile(File propFile,Map<File,File> folderMap,File parentFolder) throws PersistenceException, IOException {
  URI uri=URI.createFileURI(propFile.getAbsolutePath());
  Resource resource=resourceSet.getResource(uri,true);
  Property property=(Property)EcoreUtil.getObjectByType(resource.getContents(),PropertiesPackage.eINSTANCE.getProperty());
  if (property != null) {
    File targetFolder=folderMap.get(parentFolder);
    Item item=property.getItem();
    String connNameBofore=null;
    String connNameAfter=null;
    IPath path=new Path(item.getState().getPath());
    if (ProxyRepositoryFactory.getInstance().getFolderItem(ProjectManager.getInstance().getCurrentProject(),ERepositoryObjectType.getItemType(item),path) == null) {
      ProxyRepositoryFactory.getInstance().createFolder(ERepositoryObjectType.getItemType(item),path.removeLastSegments(1),path.lastSegment());
    }
    String connName=null;
    if (item instanceof ConnectionItem) {
      Connection conn=((ConnectionItem)item).getConnection();
      connNameBofore=conn.eResource().getURI().trimFileExtension().lastSegment();
      String version=property.getVersion();
      if (version == null) {
        version=""String_Node_Str"";
      }
      String label=conn.getName() + ""String_Node_Str"" + version;
      connNameAfter=label;
      File destItemFile=new Path(targetFolder.getAbsolutePath()).append(path).append(connNameAfter).addFileExtension(FactoriesUtil.ITEM_EXTENSION).toFile();
      File destPropFile=new Path(targetFolder.getAbsolutePath()).append(path).append(connNameAfter).addFileExtension(FactoriesUtil.PROPERTIES_EXTENSION).toFile();
      if (destItemFile.exists()) {
        int num=0;
        while (destItemFile.exists() || destPropFile.exists()) {
          connName=conn.getName() + String.valueOf(++num);
          connNameAfter=connName + ""String_Node_Str"" + version;
          destItemFile=new Path(destItemFile.getPath()).removeLastSegments(1).append(connNameAfter).addFileExtension(FactoriesUtil.ITEM_EXTENSION).toFile();
          destPropFile=new Path(destPropFile.getPath()).removeLastSegments(1).append(connNameAfter).addFileExtension(FactoriesUtil.PROPERTIES_EXTENSION).toFile();
        }
        conn.setName(connName);
        conn.setLabel(connName);
        property.setLabel(connName);
      }
      String relationPropPath=ReponsitoryContextBridge.getRootProject().getFullPath().append(new Path(destPropFile.getPath()).makeRelativeTo(this.getWorkspacePath())).toOSString();
      MetadataHelper.setPropertyPath(relationPropPath,conn);
    }
    if (isWorksapcePath()) {
      ProxyRepositoryFactory.getInstance().create(item,path,true);
    }
 else {
      connNameAfter=copyFile(targetFolder,propFile,property,path,connNameAfter,folderMap);
    }
    if (connNameBofore != null && connNameAfter != null) {
      getReplaceStringMap().put(connNameBofore,connNameAfter);
    }
  }
}","private void handlePropertiesFile(File propFile,Map<File,File> folderMap,File parentFolder) throws PersistenceException, IOException {
  URI uri=URI.createFileURI(propFile.getAbsolutePath());
  Resource resource=resourceSet.getResource(uri,true);
  Property property=(Property)EcoreUtil.getObjectByType(resource.getContents(),PropertiesPackage.eINSTANCE.getProperty());
  if (property != null) {
    File targetFolder=folderMap.get(parentFolder);
    Item item=property.getItem();
    String connNameBofore=null;
    String connNameAfter=null;
    IPath path=new Path(item.getState().getPath());
    if (ProxyRepositoryFactory.getInstance().getFolderItem(ProjectManager.getInstance().getCurrentProject(),ERepositoryObjectType.getItemType(item),path) == null) {
      ProxyRepositoryFactory.getInstance().createFolder(ERepositoryObjectType.getItemType(item),path.removeLastSegments(1),path.lastSegment());
    }
    String connName=null;
    if (item instanceof ConnectionItem) {
      Connection conn=((ConnectionItem)item).getConnection();
      connNameBofore=conn.eResource().getURI().trimFileExtension().lastSegment();
      String version=property.getVersion();
      if (version == null) {
        version=""String_Node_Str"";
      }
      String label=conn.getName() + ""String_Node_Str"" + version;
      connNameAfter=label;
      File destItemFile=new Path(targetFolder.getAbsolutePath()).append(path).append(connNameAfter).addFileExtension(FactoriesUtil.ITEM_EXTENSION).toFile();
      File destPropFile=new Path(targetFolder.getAbsolutePath()).append(path).append(connNameAfter).addFileExtension(FactoriesUtil.PROPERTIES_EXTENSION).toFile();
      if (destItemFile.exists()) {
        int num=0;
        while (destItemFile.exists() || destPropFile.exists()) {
          connName=conn.getName() + String.valueOf(++num);
          connNameAfter=connName + ""String_Node_Str"" + version;
          destItemFile=new Path(destItemFile.getPath()).removeLastSegments(1).append(connNameAfter).addFileExtension(FactoriesUtil.ITEM_EXTENSION).toFile();
          destPropFile=new Path(destPropFile.getPath()).removeLastSegments(1).append(connNameAfter).addFileExtension(FactoriesUtil.PROPERTIES_EXTENSION).toFile();
        }
        conn.setName(connName);
        conn.setLabel(connName);
        property.setLabel(connName);
      }
      String relationPropPath=ReponsitoryContextBridge.getRootProject().getFullPath().append(new Path(destPropFile.getPath()).makeRelativeTo(this.getWorkspacePath())).toOSString();
      MetadataHelper.setPropertyPath(relationPropPath,conn);
    }
    if (isWorksapcePath()) {
      ProxyRepositoryFactory.getInstance().create(item,path,true);
    }
 else {
      connNameAfter=copyFile(targetFolder,propFile,property,path,connNameAfter,connName,folderMap);
    }
    if (connNameBofore != null && connNameAfter != null) {
      getReplaceStringMap().put(connNameBofore,connNameAfter);
    }
  }
}",0.9984618014014698
138391,"/** 
 * DOC qiongli Comment method ""initAllFolder"".
 */
private void initAllFolders(){
  Project newProject=ProjectManager.getInstance().getCurrentProject();
  List<FolderItem> folderItems=ProjectManager.getInstance().getFolders(newProject.getEmfProject());
  try {
    for (    FolderItem folder : new ArrayList<FolderItem>(folderItems)) {
      if (WorkbenchUtils.isTDQOrMetadataRootFolder(folder)) {
        ERepositoryObjectType type=WorkbenchUtils.getFolderContentType(folder);
        ProxyRepositoryFactory.getInstance().getAll(type,true);
      }
    }
  }
 catch (  PersistenceException e) {
    log.error(e,e);
  }
}","/** 
 * DOC qiongli Comment method ""initAllFolder"".
 */
private void initAllFolders(){
  Project newProject=ProjectManager.getInstance().getCurrentProject();
  List<FolderItem> folderItems=ProjectManager.getInstance().getFolders(newProject.getEmfProject());
  try {
    for (    FolderItem folder : new ArrayList<FolderItem>(folderItems)) {
      if (WorkbenchUtils.isTDQOrMetadataRootFolder(folder)) {
        ERepositoryObjectType type=WorkbenchUtils.getFolderContentType(folder);
        if (type != null) {
          ProxyRepositoryFactory.getInstance().getAll(type,true);
        }
      }
    }
  }
 catch (  PersistenceException e) {
    log.error(e,e);
  }
}",0.9690402476780186
138392,"@Override public void addDependencies(ModelElement element){
  Analysis analysis=(Analysis)element;
  List<IndicatorDefinition> udis=AnalysisHelper.getUserDefinedIndicators(analysis);
  try {
    for (    IndicatorDefinition udi : udis) {
      if (udi == null) {
        continue;
      }
      InternalEObject iudi=(InternalEObject)udi;
      if (!iudi.eIsProxy()) {
        TypedReturnCode<Dependency> dependencyReturn=DependenciesHandler.getInstance().setDependencyOn(analysis,udi);
        if (dependencyReturn.isOk()) {
          RepositoryNode repositoryNode=RepositoryNodeHelper.recursiveFind(udi);
          if (repositoryNode != null) {
            TDQItem udiItem=(TDQItem)repositoryNode.getObject().getProperty().getItem();
            if (udiItem instanceof TDQIndicatorDefinitionItem) {
              ((TDQIndicatorDefinitionItem)udiItem).setIndicatorDefinition(udi);
            }
 else             if (udiItem instanceof TDQBusinessRuleItem) {
              ((TDQBusinessRuleItem)udiItem).setDqrule((DQRule)udi);
            }
          }
          ProxyRepositoryFactory.getInstance().getRepositoryFactoryFromProvider().getResourceManager().saveResource(udi.eResource());
        }
      }
    }
    List<Pattern> patterns=AnalysisHelper.getPatterns(analysis);
    for (    Pattern pattern : patterns) {
      InternalEObject iptn=(InternalEObject)pattern;
      if (!iptn.eIsProxy()) {
        TypedReturnCode<Dependency> dependencyReturn=DependenciesHandler.getInstance().setDependencyOn(analysis,pattern);
        if (dependencyReturn.isOk()) {
          RepositoryNode repositoryNode=RepositoryNodeHelper.recursiveFind(pattern);
          if (repositoryNode != null) {
            TDQPatternItem patternItem=(TDQPatternItem)repositoryNode.getObject().getProperty().getItem();
            patternItem.setPattern(pattern);
          }
          ProxyRepositoryFactory.getInstance().getRepositoryFactoryFromProvider().getResourceManager().saveResource(pattern.eResource());
        }
      }
    }
  }
 catch (  PersistenceException e) {
    log.error(e,e);
  }
}","@Override public void addDependencies(ModelElement element){
  Analysis analysis=(Analysis)element;
  List<IndicatorDefinition> udis=AnalysisHelper.getUserDefinedIndicators(analysis);
  try {
    for (    IndicatorDefinition udi : udis) {
      if (udi == null) {
        continue;
      }
      InternalEObject iudi=(InternalEObject)udi;
      if (!iudi.eIsProxy()) {
        TypedReturnCode<Dependency> dependencyReturn=DependenciesHandler.getInstance().setDependencyOn(analysis,udi);
        if (dependencyReturn.isOk()) {
          Property property=PropertyHelper.getProperty(udi);
          if (property != null) {
            TDQItem udiItem=(TDQItem)property.getItem();
            if (udiItem instanceof TDQIndicatorDefinitionItem) {
              ((TDQIndicatorDefinitionItem)udiItem).setIndicatorDefinition(udi);
            }
 else             if (udiItem instanceof TDQBusinessRuleItem) {
              ((TDQBusinessRuleItem)udiItem).setDqrule((DQRule)udi);
            }
          }
          ProxyRepositoryFactory.getInstance().getRepositoryFactoryFromProvider().getResourceManager().saveResource(udi.eResource());
        }
      }
    }
    List<Pattern> patterns=AnalysisHelper.getPatterns(analysis);
    for (    Pattern pattern : patterns) {
      InternalEObject iptn=(InternalEObject)pattern;
      if (!iptn.eIsProxy()) {
        TypedReturnCode<Dependency> dependencyReturn=DependenciesHandler.getInstance().setDependencyOn(analysis,pattern);
        if (dependencyReturn.isOk()) {
          Property property=PropertyHelper.getProperty(pattern);
          if (property != null) {
            TDQPatternItem patternItem=(TDQPatternItem)property.getItem();
            patternItem.setPattern(pattern);
          }
          ProxyRepositoryFactory.getInstance().getRepositoryFactoryFromProvider().getResourceManager().saveResource(pattern.eResource());
        }
      }
    }
  }
 catch (  PersistenceException e) {
    log.error(e,e);
  }
}",0.9199209095402868
138393,"@Override public void addDependencies(ModelElement element){
  TdReport report=(TdReport)element;
  for (  Analysis ana : ReportHelper.getAnalyses(report)) {
    TypedReturnCode<Dependency> dependencyReturn=DependenciesHandler.getInstance().setDependencyOn(report,ana);
    if (dependencyReturn.isOk()) {
      try {
        RepositoryNode repositoryNode=RepositoryNodeHelper.recursiveFind(ana);
        if (repositoryNode != null) {
          TDQAnalysisItem anaItem=(TDQAnalysisItem)repositoryNode.getObject().getProperty().getItem();
          anaItem.setAnalysis(ana);
        }
        ProxyRepositoryFactory.getInstance().getRepositoryFactoryFromProvider().getResourceManager().saveResource(ana.eResource());
      }
 catch (      PersistenceException e) {
        log.error(e,e);
      }
    }
  }
}","@Override public void addDependencies(ModelElement element){
  TdReport report=(TdReport)element;
  for (  Analysis ana : ReportHelper.getAnalyses(report)) {
    TypedReturnCode<Dependency> dependencyReturn=DependenciesHandler.getInstance().setDependencyOn(report,ana);
    if (dependencyReturn.isOk()) {
      try {
        Property property=PropertyHelper.getProperty(ana);
        if (property != null) {
          TDQAnalysisItem anaItem=(TDQAnalysisItem)property.getItem();
          anaItem.setAnalysis(ana);
        }
        ProxyRepositoryFactory.getInstance().getRepositoryFactoryFromProvider().getResourceManager().saveResource(ana.eResource());
      }
 catch (      PersistenceException e) {
        log.error(e,e);
      }
    }
  }
}",0.8957528957528957
138394,"public void recomputeIndicators(){
  correlationAnalysisHandler=new ColumnCorrelationAnalysisHandler();
  correlationAnalysisHandler.setAnalysis((Analysis)this.currentModelElement);
  stringDataFilter=correlationAnalysisHandler.getStringDataFilter();
  analyzedColumns=correlationAnalysisHandler.getAnalyzedColumns();
  if (correlationAnalysisHandler.getIndicator() == null) {
    ColumnsetFactory columnsetFactory=ColumnsetFactory.eINSTANCE;
    if (ColumnsetPackage.eINSTANCE.getCountAvgNullIndicator() == columnSetMultiIndicator.eClass()) {
      columnSetMultiIndicator=columnsetFactory.createCountAvgNullIndicator();
      fillSimpleIndicators(columnSetMultiIndicator);
    }
    if (ColumnsetPackage.eINSTANCE.getMinMaxDateIndicator() == columnSetMultiIndicator.eClass()) {
      columnSetMultiIndicator=columnsetFactory.createMinMaxDateIndicator();
    }
    if (ColumnsetPackage.eINSTANCE.getWeakCorrelationIndicator() == columnSetMultiIndicator.eClass()) {
      columnSetMultiIndicator=columnsetFactory.createWeakCorrelationIndicator();
    }
  }
 else {
    columnSetMultiIndicator=(ColumnSetMultiValueIndicator)correlationAnalysisHandler.getIndicator();
  }
  initializeIndicator(columnSetMultiIndicator);
  columnSetMultiIndicator.setStoreData(true);
  for (  ModelElement element : analyzedColumns) {
    TdColumn tdColumn=SwitchHelpers.COLUMN_SWITCH.doSwitch(element);
    if (tdColumn == null) {
      continue;
    }
    DataminingType dataminingType=correlationAnalysisHandler.getDatamingType(tdColumn);
    MetadataHelper.setDataminingType(dataminingType == null ? DataminingType.NOMINAL : dataminingType,tdColumn);
  }
}","public void recomputeIndicators(){
  correlationAnalysisHandler=new ColumnCorrelationAnalysisHandler();
  correlationAnalysisHandler.setAnalysis((Analysis)this.currentModelElement);
  stringDataFilter=correlationAnalysisHandler.getStringDataFilter();
  analyzedColumns=correlationAnalysisHandler.getAnalyzedColumns();
  if (correlationAnalysisHandler.getIndicator() == null && columnSetMultiIndicator != null) {
    ColumnsetFactory columnsetFactory=ColumnsetFactory.eINSTANCE;
    if (ColumnsetPackage.eINSTANCE.getCountAvgNullIndicator() == columnSetMultiIndicator.eClass()) {
      columnSetMultiIndicator=columnsetFactory.createCountAvgNullIndicator();
      fillSimpleIndicators(columnSetMultiIndicator);
    }
    if (ColumnsetPackage.eINSTANCE.getMinMaxDateIndicator() == columnSetMultiIndicator.eClass()) {
      columnSetMultiIndicator=columnsetFactory.createMinMaxDateIndicator();
    }
    if (ColumnsetPackage.eINSTANCE.getWeakCorrelationIndicator() == columnSetMultiIndicator.eClass()) {
      columnSetMultiIndicator=columnsetFactory.createWeakCorrelationIndicator();
    }
  }
 else {
    columnSetMultiIndicator=(ColumnSetMultiValueIndicator)correlationAnalysisHandler.getIndicator();
  }
  if (columnSetMultiIndicator == null) {
    columnSetMultiIndicator=ColumnsetFactory.eINSTANCE.createCountAvgNullIndicator();
  }
  initializeIndicator(columnSetMultiIndicator);
  columnSetMultiIndicator.setStoreData(true);
  for (  ModelElement element : analyzedColumns) {
    TdColumn tdColumn=SwitchHelpers.COLUMN_SWITCH.doSwitch(element);
    if (tdColumn == null) {
      continue;
    }
    DataminingType dataminingType=correlationAnalysisHandler.getDatamingType(tdColumn);
    MetadataHelper.setDataminingType(dataminingType == null ? DataminingType.NOMINAL : dataminingType,tdColumn);
  }
}",0.9518282066163668
138395,"/** 
 * get the (Resource) ModelElement from a node(include: connection, analysis, business rule, indicator definition, pattern, report), if there have not ModelElement return null.
 * @param node
 * @return
 */
public static ModelElement getResourceModelElement(IRepositoryNode node){
  if (node != null) {
    ENodeType nodeType=node.getType();
    if (ENodeType.REPOSITORY_ELEMENT.equals(nodeType) || ENodeType.TDQ_REPOSITORY_ELEMENT.equals(nodeType)) {
      IRepositoryViewObject object=node.getObject();
      if (object != null) {
        Property property=object.getProperty();
        if (property != null) {
          Item item=property.getItem();
          if (item != null && item instanceof TDQItem) {
            if (item instanceof TDQAnalysisItem) {
              return ((TDQAnalysisItem)item).getAnalysis();
            }
 else             if (item instanceof TDQBusinessRuleItem) {
              return ((TDQBusinessRuleItem)item).getDqrule();
            }
 else             if (item instanceof TDQIndicatorDefinitionItem) {
              return ((TDQIndicatorDefinitionItem)item).getIndicatorDefinition();
            }
 else             if (item instanceof TDQPatternItem) {
              return ((TDQPatternItem)item).getPattern();
            }
 else             if (item instanceof TDQReportItem) {
              return ((TDQReportItem)item).getReport();
            }
          }
 else           if (item != null && item instanceof ConnectionItem) {
            return ((ConnectionItem)item).getConnection();
          }
        }
      }
    }
  }
  return null;
}","/** 
 * get the (Resource) ModelElement from a item(include: connection, analysis, business rule, indicator definition, pattern, report), if there have not ModelElement return null.
 * @param item
 * @return
 */
public static ModelElement getResourceModelElement(Item item){
  if (item != null && item instanceof TDQItem) {
    if (item instanceof TDQAnalysisItem) {
      return ((TDQAnalysisItem)item).getAnalysis();
    }
 else     if (item instanceof TDQBusinessRuleItem) {
      return ((TDQBusinessRuleItem)item).getDqrule();
    }
 else     if (item instanceof TDQIndicatorDefinitionItem) {
      return ((TDQIndicatorDefinitionItem)item).getIndicatorDefinition();
    }
 else     if (item instanceof TDQPatternItem) {
      return ((TDQPatternItem)item).getPattern();
    }
 else     if (item instanceof TDQReportItem) {
      return ((TDQReportItem)item).getReport();
    }
  }
 else   if (item != null && item instanceof ConnectionItem) {
    return ((ConnectionItem)item).getConnection();
  }
  return null;
}",0.2550746840291076
138396,"/** 
 * DOC bZhou Comment method ""checkConflict"".
 * @param record
 */
private void checkConflict(ItemRecord record){
  Property property=record.getProperty();
  if (property != null) {
    try {
      for (      ERepositoryObjectType type : RepositoryObjectTypeHelper.getDQResourceTypeList()) {
        List<IRepositoryViewObject> typedObjectList=ProxyRepositoryFactory.getInstance().getAll(type);
        for (        IRepositoryViewObject object : typedObjectList) {
          Property property2=object.getProperty();
          if (property.getId().equals(property2.getId())) {
            record.addError(""String_Node_Str"" + record.getName() + ""String_Node_Str"");
          }
        }
      }
    }
 catch (    Exception e) {
      record.addError(""String_Node_Str"" + record.getName() + ""String_Node_Str"");
    }
  }
}","/** 
 * DOC bZhou Comment method ""checkConflict"".
 * @param record
 */
private void checkConflict(ItemRecord record){
  Property property=record.getProperty();
  if (property != null) {
    try {
      RepositoryNode node=RepositoryNodeHelper.recursiveFind(property);
      if (node != null) {
        record.setConflictNode(node);
        record.addError(""String_Node_Str"" + record.getName() + ""String_Node_Str"");
      }
    }
 catch (    Exception e) {
      record.addError(""String_Node_Str"" + record.getName() + ""String_Node_Str"");
    }
  }
}",0.4959883296863603
138397,"/** 
 * DOC bZhou Comment method ""update"".
 * @param desFile
 * @param isCovered
 * @throws IOException
 * @throws CoreException
 * @throws Exception
 */
private void update(File desFile,boolean isCovered) throws IOException, CoreException {
  String curProjectLabel=ResourceManager.getRootProjectName();
  if (!StringUtils.equals(projectName,curProjectLabel)) {
    String content=FileUtils.readFileToString(desFile,""String_Node_Str"");
    content=StringUtils.replace(content,""String_Node_Str"" + projectName + ""String_Node_Str"",""String_Node_Str"" + curProjectLabel + ""String_Node_Str"");
    FileUtils.writeStringToFile(desFile,content,""String_Node_Str"");
  }
  if (desFile.exists()) {
    IFile desIFile=ResourceService.file2IFile(desFile);
    if (isCovered) {
      URI uri=URI.createPlatformResourceURI(desIFile.getFullPath().toString(),false);
      EMFSharedResources.getInstance().reloadResource(uri);
      ResourceFileMap resourceFileMap=ModelElementFileFactory.getResourceFileMap(desIFile);
      if (resourceFileMap != null) {
        resourceFileMap.remove(desIFile);
      }
    }
    String fileExtension=desIFile.getFileExtension();
    if (fileExtension.equals(FactoriesUtil.PROPERTIES_EXTENSION)) {
      Property property=PropertyHelper.getProperty(desIFile);
      if (property != null) {
        User user=ReponsitoryContextBridge.getUser();
        if (user != null && property.getAuthor() == null) {
          property.setAuthor(user);
          EMFSharedResources.getInstance().saveResource(property.eResource());
        }
        if (log.isDebugEnabled()) {
          log.debug(""String_Node_Str"" + desIFile + ""String_Node_Str""+ property.getLabel());
        }
        Item item=property.getItem();
        EResourceConstant typedConstant=EResourceConstant.getTypedConstant(item);
        if (typedConstant == EResourceConstant.DB_CONNECTIONS || typedConstant == EResourceConstant.MDM_CONNECTIONS) {
        }
      }
 else {
        log.error(""String_Node_Str"" + desIFile.getFullPath().toString());
      }
    }
  }
}","/** 
 * DOC bZhou Comment method ""update"".
 * @param desFile
 * @param isCovered
 * @throws IOException
 * @throws CoreException
 * @throws Exception
 */
private void update(File desFile,boolean isCovered) throws IOException, CoreException {
  String curProjectLabel=ResourceManager.getRootProjectName();
  if (!StringUtils.equals(projectName,curProjectLabel)) {
    String content=FileUtils.readFileToString(desFile,""String_Node_Str"");
    content=StringUtils.replace(content,""String_Node_Str"" + projectName + ""String_Node_Str"",""String_Node_Str"" + curProjectLabel + ""String_Node_Str"");
    FileUtils.writeStringToFile(desFile,content,""String_Node_Str"");
  }
  if (desFile.exists()) {
    IFile desIFile=ResourceService.file2IFile(desFile);
    if (isCovered) {
      URI uri=URI.createPlatformResourceURI(desIFile.getFullPath().toString(),false);
      EMFSharedResources.getInstance().reloadResource(uri);
      ResourceFileMap resourceFileMap=ModelElementFileFactory.getResourceFileMap(desIFile);
      if (resourceFileMap != null) {
        resourceFileMap.remove(desIFile);
      }
    }
    String fileExtension=desIFile.getFileExtension();
    if (fileExtension.equals(FactoriesUtil.PROPERTIES_EXTENSION)) {
      Property property=PropertyHelper.getProperty(desIFile);
      if (property != null) {
        User user=ReponsitoryContextBridge.getUser();
        if (user != null && property.getAuthor() == null) {
          property.setAuthor(user);
          EMFSharedResources.getInstance().saveResource(property.eResource());
        }
        if (log.isDebugEnabled()) {
          log.debug(""String_Node_Str"" + desIFile + ""String_Node_Str""+ property.getLabel());
        }
      }
 else {
        log.error(""String_Node_Str"" + desIFile.getFullPath().toString());
      }
    }
  }
}",0.8928292046936115
138398,"@Override protected void run(){
  try {
    for (    ItemRecord record : fRecords) {
      if (fMonitor.isCanceled()) {
        break;
      }
      Map<IPath,IPath> toImportMap=mapping(record);
      fMonitor.subTask(""String_Node_Str"" + record.getName());
      if (record.isValid()) {
        log.info(""String_Node_Str"" + record.getFile().getAbsolutePath());
        for (        IPath resPath : toImportMap.keySet()) {
          IPath desPath=toImportMap.get(resPath);
synchronized (ProxyRepositoryFactory.getInstance().getRepositoryFactoryFromProvider().getResourceManager().resourceSet) {
            write(resPath,desPath);
          }
        }
      }
 else {
        for (        String error : record.getErrors()) {
          log.error(error);
        }
      }
      fMonitor.worked(1);
    }
    finish(fRecords,fMonitor);
  }
 catch (  Exception e) {
    log.error(e,e);
  }
}","@Override protected void run(){
  try {
    for (    ItemRecord record : fRecords) {
      if (fMonitor.isCanceled()) {
        break;
      }
      Map<IPath,IPath> toImportMap=mapping(record);
      fMonitor.subTask(""String_Node_Str"" + record.getName());
      if (record.isValid()) {
        log.info(""String_Node_Str"" + record.getFile().getAbsolutePath());
        IRepositoryNode conflictNode=record.getConflictNode();
        if (conflictNode != null) {
          IRepositoryViewObject object=conflictNode.getObject();
          ProxyRepositoryFactory.getInstance().deleteObjectPhysical(object);
        }
        for (        IPath resPath : toImportMap.keySet()) {
          IPath desPath=toImportMap.get(resPath);
          ResourceSet resourceSet=ProxyRepositoryFactory.getInstance().getRepositoryFactoryFromProvider().getResourceManager().resourceSet;
synchronized (resourceSet) {
            write(resPath,desPath);
          }
        }
      }
 else {
        for (        String error : record.getErrors()) {
          log.error(error);
        }
      }
      fMonitor.worked(1);
    }
    finish(fRecords,fMonitor);
  }
 catch (  Exception e) {
    log.error(e,e);
  }
}",0.766859344894027
138399,"public ItemRecord[] populate(ItemRecord[] elements,boolean checkExisted){
  List<ItemRecord> inValidRecords=new ArrayList<ItemRecord>();
  for (  ItemRecord record : elements) {
    record.getErrors().clear();
    checkDependency(record);
    if (checkExisted) {
      checkExisted(record);
    }
    checkConflict(record);
    if (!record.isValid()) {
      inValidRecords.add(record);
    }
  }
  return inValidRecords.toArray(new ItemRecord[inValidRecords.size()]);
}","public ItemRecord[] populate(ItemRecord[] elements,boolean checkExisted){
  List<ItemRecord> inValidRecords=new ArrayList<ItemRecord>();
  for (  ItemRecord record : elements) {
    record.getErrors().clear();
    checkDependency(record);
    if (checkExisted) {
      checkExisted(record);
      checkConflict(record);
    }
    if (!record.isValid()) {
      inValidRecords.add(record);
    }
  }
  return inValidRecords.toArray(new ItemRecord[inValidRecords.size()]);
}",0.989384288747346
138400,"public void write(ItemRecord[] records,IProgressMonitor monitor){
  if (monitor == null) {
    monitor=new NullProgressMonitor();
  }
  final ItemRecord[] fRecords=records;
  final IProgressMonitor fMonitor=monitor;
  RepositoryWorkUnit<Object> workUnit=new RepositoryWorkUnit<Object>(""String_Node_Str""){
    @Override protected void run(){
      try {
        for (        ItemRecord record : fRecords) {
          if (fMonitor.isCanceled()) {
            break;
          }
          Map<IPath,IPath> toImportMap=mapping(record);
          fMonitor.subTask(""String_Node_Str"" + record.getName());
          if (record.isValid()) {
            log.info(""String_Node_Str"" + record.getFile().getAbsolutePath());
            for (            IPath resPath : toImportMap.keySet()) {
              IPath desPath=toImportMap.get(resPath);
synchronized (ProxyRepositoryFactory.getInstance().getRepositoryFactoryFromProvider().getResourceManager().resourceSet) {
                write(resPath,desPath);
              }
            }
          }
 else {
            for (            String error : record.getErrors()) {
              log.error(error);
            }
          }
          fMonitor.worked(1);
        }
        finish(fRecords,fMonitor);
      }
 catch (      Exception e) {
        log.error(e,e);
      }
    }
  }
;
  workUnit.setAvoidUnloadResources(Boolean.TRUE);
  ProxyRepositoryFactory.getInstance().executeRepositoryWorkUnit(workUnit);
}","public void write(ItemRecord[] records,IProgressMonitor monitor){
  if (monitor == null) {
    monitor=new NullProgressMonitor();
  }
  final ItemRecord[] fRecords=records;
  final IProgressMonitor fMonitor=monitor;
  RepositoryWorkUnit<Object> workUnit=new RepositoryWorkUnit<Object>(""String_Node_Str""){
    @Override protected void run(){
      try {
        for (        ItemRecord record : fRecords) {
          if (fMonitor.isCanceled()) {
            break;
          }
          Map<IPath,IPath> toImportMap=mapping(record);
          fMonitor.subTask(""String_Node_Str"" + record.getName());
          if (record.isValid()) {
            log.info(""String_Node_Str"" + record.getFile().getAbsolutePath());
            IRepositoryNode conflictNode=record.getConflictNode();
            if (conflictNode != null) {
              IRepositoryViewObject object=conflictNode.getObject();
              ProxyRepositoryFactory.getInstance().deleteObjectPhysical(object);
            }
            for (            IPath resPath : toImportMap.keySet()) {
              IPath desPath=toImportMap.get(resPath);
              ResourceSet resourceSet=ProxyRepositoryFactory.getInstance().getRepositoryFactoryFromProvider().getResourceManager().resourceSet;
synchronized (resourceSet) {
                write(resPath,desPath);
              }
            }
          }
 else {
            for (            String error : record.getErrors()) {
              log.error(error);
            }
          }
          fMonitor.worked(1);
        }
        finish(fRecords,fMonitor);
      }
 catch (      Exception e) {
        log.error(e,e);
      }
    }
  }
;
  workUnit.setAvoidUnloadResources(Boolean.TRUE);
  ProxyRepositoryFactory.getInstance().executeRepositoryWorkUnit(workUnit);
}",0.8915065096094235
138401,"@Override protected void removeItemBranch(TreeItem item){
  IndicatorUnit unit=(IndicatorUnit)item.getData(INDICATOR_UNIT_KEY);
  ModelElementIndicator meIndicator=(ModelElementIndicator)item.getData(MODELELEMENT_INDICATOR_KEY);
  deleteColumnItems(meIndicator.getModelElementRepositoryNode());
  deleteModelElementItems(meIndicator);
  if (null != unit) {
    meIndicator.removeIndicatorUnit(unit);
    masterPage.getAllMatchIndicator().getCompositeRegexMatchingIndicators().remove(unit.getIndicator());
    masterPage.updateIndicatorSection();
  }
  updateBindConnection(masterPage,tree);
  super.removeItemBranch(item);
  enabledButtons(false);
  tree.setFocus();
}","@Override protected void removeItemBranch(TreeItem item){
  IndicatorUnit unit=(IndicatorUnit)item.getData(INDICATOR_UNIT_KEY);
  ModelElementIndicator meIndicator=(ModelElementIndicator)item.getData(MODELELEMENT_INDICATOR_KEY);
  deleteColumnItems(meIndicator.getModelElementRepositoryNode());
  deleteModelElementItems(meIndicator);
  if (null != unit) {
    meIndicator.removeIndicatorUnit(unit);
    masterPage.getAllMatchIndicator().getCompositeRegexMatchingIndicators().remove(unit.getIndicator());
    masterPage.updateIndicatorSection();
  }
  super.removeItemBranch(item);
  updateBindConnection(masterPage,tree);
  enabledButtons(false);
  tree.setFocus();
}",0.93562874251497
138402,"public void saveAnalysis() throws DataprofilerCoreException {
  this.analysis.setName(this.analysis.getName().replace(""String_Node_Str"",""String_Node_Str""));
  for (  Domain domain : this.analysis.getParameters().getDataFilter()) {
    domain.setName(this.analysis.getName());
  }
  if (isConnectionAnalysis()) {
    AnalysisHelper.setReloadDatabases(analysis,reloadDatabasesBtn.getSelection());
  }
  EList<Domain> dataFilters=analysis.getParameters().getDataFilter();
  if (!this.tableFilterText.getText().equals(latestTableFilterValue)) {
    DomainHelper.setDataFilterTablePattern(dataFilters,tableFilterText.getText());
    latestTableFilterValue=this.tableFilterText.getText();
  }
  if (!this.viewFilterText.getText().equals(latestViewFilterValue)) {
    DomainHelper.setDataFilterViewPattern(dataFilters,viewFilterText.getText());
    latestViewFilterValue=this.viewFilterText.getText();
  }
  this.updateAnalysisClientDependency();
  ReturnCode saved=new ReturnCode(false);
  IEditorInput editorInput=this.getEditorInput();
  if (editorInput instanceof AnalysisItemEditorInput) {
    AnalysisItemEditorInput analysisInput=(AnalysisItemEditorInput)editorInput;
    TDQAnalysisItem tdqAnalysisItem=analysisInput.getTDQAnalysisItem();
    tdqAnalysisItem.getProperty().setLabel(analysis.getName());
    this.nameText.setText(analysis.getName());
    saved=ElementWriterFactory.getInstance().createAnalysisWrite().save(tdqAnalysisItem);
  }
  if (saved.isOk()) {
    log.info(""String_Node_Str"" + analysis.getFileName());
  }
}","public void saveAnalysis() throws DataprofilerCoreException {
  this.analysis.setName(this.analysis.getName().replace(""String_Node_Str"",""String_Node_Str""));
  if (isConnectionAnalysis()) {
    AnalysisHelper.setReloadDatabases(analysis,reloadDatabasesBtn.getSelection());
  }
  EList<Domain> dataFilters=analysis.getParameters().getDataFilter();
  if (!this.tableFilterText.getText().equals(DomainHelper.getTablePattern(dataFilters))) {
    DomainHelper.setDataFilterTablePattern(dataFilters,tableFilterText.getText());
    latestTableFilterValue=this.tableFilterText.getText();
  }
  if (!this.viewFilterText.getText().equals(DomainHelper.getViewPattern(dataFilters))) {
    DomainHelper.setDataFilterViewPattern(dataFilters,viewFilterText.getText());
    latestViewFilterValue=this.viewFilterText.getText();
  }
  this.updateAnalysisClientDependency();
  ReturnCode saved=new ReturnCode(false);
  IEditorInput editorInput=this.getEditorInput();
  if (editorInput instanceof AnalysisItemEditorInput) {
    AnalysisItemEditorInput analysisInput=(AnalysisItemEditorInput)editorInput;
    TDQAnalysisItem tdqAnalysisItem=analysisInput.getTDQAnalysisItem();
    tdqAnalysisItem.getProperty().setLabel(analysis.getName());
    this.nameText.setText(analysis.getName());
    saved=ElementWriterFactory.getInstance().createAnalysisWrite().save(tdqAnalysisItem);
  }
  if (saved.isOk()) {
    log.info(""String_Node_Str"" + analysis.getFileName());
  }
}",0.8188235294117647
138403,"public Color getBackground(Object element,int columnIndex){
  if (element instanceof OverviewIndUIElement) {
    SchemaIndicator indicator=(SchemaIndicator)((OverviewIndUIElement)element).getOverviewIndicator();
    if (indicator.getTableRowCount() == 0) {
      return zeroRowColor;
    }
  }
  return null;
}","public Color getBackground(Object element,int columnIndex){
  if (element instanceof OverviewIndUIElement) {
    SchemaIndicator indicator=(SchemaIndicator)((OverviewIndUIElement)element).getOverviewIndicator();
    if (indicator.getTableRowCount() == 0 && indicator.getViewCount() == 0) {
      return zeroRowColor;
    }
  }
  return null;
}",0.9494640122511484
138404,"public void modifyText(ModifyEvent e){
  getParameter().setName(nameText.getText());
  setPageComplete(nameText.getText() != null && !""String_Node_Str"".equals(nameText.getText().trim()));
}","public void modifyText(ModifyEvent e){
  getParameter().setName(nameText.getText());
  String text=nameText.getText();
  setPageComplete(text != null && !""String_Node_Str"".equals(text.trim()) && !text.contains(""String_Node_Str""));
}",0.6935866983372921
138405,"@Override protected void addListeners(){
  super.addListeners();
  this.nameText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      getParameter().setName(nameText.getText());
      setPageComplete(nameText.getText() != null && !""String_Node_Str"".equals(nameText.getText().trim()));
    }
  }
);
}","@Override protected void addListeners(){
  super.addListeners();
  this.nameText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      getParameter().setName(nameText.getText());
      String text=nameText.getText();
      setPageComplete(text != null && !""String_Node_Str"".equals(text.trim()) && !text.contains(""String_Node_Str""));
    }
  }
);
}",0.8165517241379311
138406,"private void setPropertyMetadata(ModelElement modelElement,Property property){
  String purpose=MetadataHelper.getPurpose(modelElement);
  String description=MetadataHelper.getDescription(modelElement);
  String version=MetadataHelper.getVersion(modelElement);
  String status=MetadataHelper.getDevStatus(modelElement);
  property.setId(EcoreUtil.generateUUID());
  if (SwitchHelpers.DELIMITEDFILECONNECTION_SWITCH.doSwitch(modelElement) == null) {
    property.setLabel(WorkspaceUtils.normalize(modelElement.getName()));
  }
  property.setPurpose(purpose);
  property.setDescription(description);
  property.setStatusCode(status);
  property.setVersion(version);
  List<Information> informations=ListUtils.castList(Information.class,property.getInformations());
  InformationLevel maxLevel=null;
  for (  Information information : informations) {
    int value=information.getLevel().getValue();
    if (maxLevel == null || value > maxLevel.getValue()) {
      maxLevel=information.getLevel();
    }
  }
  property.setMaxInformationLevel(maxLevel);
}","private void setPropertyMetadata(ModelElement modelElement,Property property){
  String purpose=MetadataHelper.getPurpose(modelElement);
  String description=MetadataHelper.getDescription(modelElement);
  String version=MetadataHelper.getVersion(modelElement);
  String status=MetadataHelper.getDevStatus(modelElement);
  if (property.getId() == null) {
    property.setId(EcoreUtil.generateUUID());
  }
  if (SwitchHelpers.DELIMITEDFILECONNECTION_SWITCH.doSwitch(modelElement) == null) {
    property.setLabel(WorkspaceUtils.normalize(modelElement.getName()));
  }
  property.setPurpose(purpose);
  property.setDescription(description);
  property.setStatusCode(status);
  property.setVersion(version);
  List<Information> informations=ListUtils.castList(Information.class,property.getInformations());
  InformationLevel maxLevel=null;
  for (  Information information : informations) {
    int value=information.getLevel().getValue();
    if (maxLevel == null || value > maxLevel.getValue()) {
      maxLevel=information.getLevel();
    }
  }
  property.setMaxInformationLevel(maxLevel);
}",0.9813258636788048
138407,"/** 
 * DOC qiongli Comment method ""evaluateByMDM"".
 * @param sqlStatement
 * @param returnCode
 * @return
 */
private ReturnCode evaluateByMDM(String sqlStatement,ReturnCode returnCode){
  if (mdmWebserviceConn == null || tdXmlDocument == null) {
    returnCode.setOk(false);
    return returnCode;
  }
  MdmStatement statement=mdmWebserviceConn.createStatement();
  String[] resultSet=null;
  this.getAnalyzedElements();
  if (continueRun()) {
    try {
      List<String> strResultList=new ArrayList<String>();
      returnCode.setOk(true);
      returnCode.setOk(returnCode.isOk() && statement.execute(tdXmlDocument,sqlStatement));
      List<String> strResultListTemp=Arrays.asList(statement.getResultSet());
      strResultList.addAll(strResultListTemp.subList(1,strResultListTemp.size()));
      resultSet=strResultList.toArray(new String[strResultList.size()]);
    }
 catch (    RemoteException e) {
      returnCode.setMessage(e.getMessage());
    }
catch (    ServiceException e) {
      returnCode.setMessage(e.getMessage());
    }
  }
  if (resultSet == null) {
    String mess=""String_Node_Str"" + sqlStatement;
    log.warn(mess);
    returnCode.setReturnCode(mess,false);
    return returnCode;
  }
  List<Map<String,String>> resultSetList=new ArrayList<Map<String,String>>();
  List<ModelElement> analysisElementList=this.analysis.getContext().getAnalysedElements();
  TdXmlElementType parentElement=SwitchHelpers.XMLELEMENTTYPE_SWITCH.doSwitch(XmlElementHelper.getParentElement(SwitchHelpers.XMLELEMENTTYPE_SWITCH.doSwitch(analysisElementList.get(0))));
  List<TdXmlElementType> columnList=org.talend.cwm.db.connection.ConnectionUtils.getXMLElements(parentElement);
  if (analysis.getParameters().isStoreData()) {
    resultSetList=statement.tidyResultSet(columnList.toArray(new ModelElement[columnList.size()]),resultSet);
  }
 else {
    resultSetList=statement.tidyResultSet(analysisElementList.toArray(new ModelElement[analysisElementList.size()]),resultSet);
  }
  List<String> columnNames=getAnalyzedElementsName();
  for (int i=0; i < resultSetList.size(); i++) {
    Map<String,String> rowMap=(Map<String,String>)resultSetList.get(i);
    EList<Object> objectLs=new BasicEList<Object>();
    Iterator<String> it=columnNames.iterator();
    while (it.hasNext()) {
      Object obj=rowMap.get(it.next());
      if (obj != null && (PluginConstant.EMPTY_STRING.equals(obj.toString().trim()))) {
        obj=obj.toString().trim();
      }
      objectLs.add(obj);
    }
    if (objectLs.size() == 0) {
      continue;
    }
    handleObjects(rowMap,objectLs,columnList);
  }
  return returnCode;
}","/** 
 * DOC qiongli Comment method ""evaluateByMDM"".
 * @param sqlStatement
 * @param returnCode
 * @return
 */
private ReturnCode evaluateByMDM(String sqlStatement,ReturnCode returnCode){
  if (mdmWebserviceConn == null || tdXmlDocument == null) {
    returnCode.setOk(false);
    return returnCode;
  }
  MdmStatement statement=mdmWebserviceConn.createStatement();
  String[] resultSet=null;
  this.getAnalyzedElements();
  if (continueRun()) {
    try {
      returnCode.setOk(true);
      returnCode.setOk(returnCode.isOk() && statement.execute(tdXmlDocument,sqlStatement));
      List<String> strResultList=Arrays.asList(statement.getResultSet());
      resultSet=strResultList.toArray(new String[strResultList.size()]);
    }
 catch (    RemoteException e) {
      returnCode.setMessage(e.getMessage());
    }
catch (    ServiceException e) {
      returnCode.setMessage(e.getMessage());
    }
  }
  if (resultSet == null) {
    String mess=""String_Node_Str"" + sqlStatement;
    log.warn(mess);
    returnCode.setReturnCode(mess,false);
    return returnCode;
  }
  List<Map<String,String>> resultSetList=new ArrayList<Map<String,String>>();
  List<ModelElement> analysisElementList=this.analysis.getContext().getAnalysedElements();
  TdXmlElementType parentElement=SwitchHelpers.XMLELEMENTTYPE_SWITCH.doSwitch(XmlElementHelper.getParentElement(SwitchHelpers.XMLELEMENTTYPE_SWITCH.doSwitch(analysisElementList.get(0))));
  List<TdXmlElementType> columnList=org.talend.cwm.db.connection.ConnectionUtils.getXMLElements(parentElement);
  if (analysis.getParameters().isStoreData()) {
    resultSetList=statement.tidyResultSet(columnList.toArray(new ModelElement[columnList.size()]),resultSet);
  }
 else {
    resultSetList=statement.tidyResultSet(analysisElementList.toArray(new ModelElement[analysisElementList.size()]),resultSet);
  }
  List<String> columnNames=getAnalyzedElementsName();
  for (int i=0; i < resultSetList.size(); i++) {
    Map<String,String> rowMap=(Map<String,String>)resultSetList.get(i);
    EList<Object> objectLs=new BasicEList<Object>();
    Iterator<String> it=columnNames.iterator();
    while (it.hasNext()) {
      Object obj=rowMap.get(it.next());
      if (obj != null && (PluginConstant.EMPTY_STRING.equals(obj.toString().trim()))) {
        obj=obj.toString().trim();
      }
      objectLs.add(obj);
    }
    if (objectLs.size() == 0) {
      continue;
    }
    handleObjects(rowMap,objectLs,columnList);
  }
  return returnCode;
}",0.9715071723324818
138408,protected abstract ReturnCode canSave();,public abstract ReturnCode canSave();,0.8571428571428571
138409,"@Override protected ReturnCode canSave(){
  this.nameText.setText(this.nameText.getText().replace(""String_Node_Str"",""String_Node_Str""));
  if (this.nameText.getText().length() == 0) {
    this.nameText.setText(this.analysis.getName());
    return new ReturnCode(DefaultMessagesImpl.getString(""String_Node_Str""),false);
  }
  String elementName=this.nameText.getText();
  List<IRepositoryNode> childrensname=this.analysisRepNode.getParent().getChildren();
  for (  IRepositoryNode children : childrensname) {
    if (elementName.equals(this.analysis.getName())) {
      return new ReturnCode(true);
    }
 else     if (elementName.equals((children.getLabel() + ""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str""))) {
      this.nameText.setText(this.analysis.getName());
      return new ReturnCode(DefaultMessagesImpl.getString(""String_Node_Str""),false);
    }
  }
  return new ReturnCode(true);
}","@Override public ReturnCode canSave(){
  this.nameText.setText(this.nameText.getText().replace(""String_Node_Str"",""String_Node_Str""));
  if (this.nameText.getText().length() == 0) {
    this.nameText.setText(this.analysis.getName());
    return new ReturnCode(DefaultMessagesImpl.getString(""String_Node_Str""),false);
  }
  String elementName=this.nameText.getText();
  List<IRepositoryNode> childrensname=this.analysisRepNode.getParent().getChildren();
  for (  IRepositoryNode children : childrensname) {
    if (elementName.equals(this.analysis.getName())) {
      return new ReturnCode(true);
    }
 else     if (elementName.equals((children.getLabel() + ""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str""))) {
      this.nameText.setText(this.analysis.getName());
      return new ReturnCode(DefaultMessagesImpl.getString(""String_Node_Str""),false);
    }
  }
  return new ReturnCode(true);
}",0.993939393939394
138410,"@Override protected ReturnCode canSave(){
  ReturnCode canModRetCode=canModifyAnalysisName();
  if (!canModRetCode.isOk()) {
    return canModRetCode;
  }
  String message=null;
  List<RepositoryNode> columnSetMultiValueList=getTreeViewer().getColumnSetMultiValueList();
  if (!columnSetMultiValueList.isEmpty()) {
    List<RepositoryNode> nodes=treeViewer.getColumnSetMultiValueList();
    if (ColumnsetPackage.eINSTANCE.getCountAvgNullIndicator() == columnSetMultiIndicator.eClass() || ColumnsetPackage.eINSTANCE.getMinMaxDateIndicator() == columnSetMultiIndicator.eClass()) {
      message=verifyColumn(nodes,columnSetMultiIndicator.eClass());
    }
 else     if (ColumnsetPackage.eINSTANCE.getWeakCorrelationIndicator() == columnSetMultiIndicator.eClass()) {
      List<DBColumnRepNode> columnNodes=RepositoryNodeHelper.getColumnNodeList(nodes.toArray());
      for (      DBColumnRepNode columNode : columnNodes) {
        TdColumn tdColumn=columNode.getTdColumn();
        if (correlationAnalysisHandler.getDatamingType(tdColumn) != DataminingType.NOMINAL) {
          message=DefaultMessagesImpl.getString(""String_Node_Str"");
          break;
        }
      }
    }
  }
  if (message == null) {
    return new ReturnCode(true);
  }
  return new ReturnCode(message,false);
}","@Override public ReturnCode canSave(){
  ReturnCode canModRetCode=canModifyAnalysisName();
  if (!canModRetCode.isOk()) {
    return canModRetCode;
  }
  String message=null;
  List<RepositoryNode> columnSetMultiValueList=getTreeViewer().getColumnSetMultiValueList();
  if (!columnSetMultiValueList.isEmpty()) {
    List<RepositoryNode> nodes=treeViewer.getColumnSetMultiValueList();
    if (ColumnsetPackage.eINSTANCE.getCountAvgNullIndicator() == columnSetMultiIndicator.eClass() || ColumnsetPackage.eINSTANCE.getMinMaxDateIndicator() == columnSetMultiIndicator.eClass()) {
      message=verifyColumn(nodes,columnSetMultiIndicator.eClass());
    }
 else     if (ColumnsetPackage.eINSTANCE.getWeakCorrelationIndicator() == columnSetMultiIndicator.eClass()) {
      List<DBColumnRepNode> columnNodes=RepositoryNodeHelper.getColumnNodeList(nodes.toArray());
      for (      DBColumnRepNode columNode : columnNodes) {
        TdColumn tdColumn=columNode.getTdColumn();
        if (correlationAnalysisHandler.getDatamingType(tdColumn) != DataminingType.NOMINAL) {
          message=DefaultMessagesImpl.getString(""String_Node_Str"");
          break;
        }
      }
    }
  }
  if (message == null) {
    return new ReturnCode(true);
  }
  return new ReturnCode(message,false);
}",0.9949198905822588
138411,"@Override protected ReturnCode canSave(){
  return validator(columnListA,columnListB);
}","@Override public ReturnCode canSave(){
  return validator(columnListA,columnListB);
}",0.9364161849710982
138412,"@Override protected ReturnCode canSave(){
  ReturnCode canModRetCode=canModifyAnalysisName();
  if (!canModRetCode.isOk()) {
    return canModRetCode;
  }
  ReturnCode checkMdmExecutionEngine=checkMdmExecutionEngine();
  if (!checkMdmExecutionEngine.isOk()) {
    return checkMdmExecutionEngine;
  }
  List<ModelElement> analyzedElement=new ArrayList<ModelElement>();
  for (  ModelElementIndicator modelElementIndicator : treeViewer.getModelElementIndicator()) {
    IRepositoryViewObject modelElementRepositoryObj=modelElementIndicator.getModelElementRepositoryNode().getObject();
    if (modelElementRepositoryObj instanceof MetadataColumnRepositoryObject) {
      analyzedElement.add(((MetadataColumnRepositoryObject)modelElementRepositoryObj).getTdColumn());
    }
  }
  if (!analyzedElement.isEmpty()) {
    if (!ModelElementHelper.isFromSameTable(analyzedElement) && !""String_Node_Str"".equals(dataFilterComp.getDataFilterString())) {
      return new ReturnCode(DefaultMessagesImpl.getString(""String_Node_Str""),false);
    }
  }
  return new ReturnCode(true);
}","@Override public ReturnCode canSave(){
  ReturnCode canModRetCode=canModifyAnalysisName();
  if (!canModRetCode.isOk()) {
    return canModRetCode;
  }
  ReturnCode checkMdmExecutionEngine=checkMdmExecutionEngine();
  if (!checkMdmExecutionEngine.isOk()) {
    return checkMdmExecutionEngine;
  }
  List<ModelElement> analyzedElement=new ArrayList<ModelElement>();
  for (  ModelElementIndicator modelElementIndicator : treeViewer.getModelElementIndicator()) {
    IRepositoryViewObject modelElementRepositoryObj=modelElementIndicator.getModelElementRepositoryNode().getObject();
    if (modelElementRepositoryObj instanceof MetadataColumnRepositoryObject) {
      analyzedElement.add(((MetadataColumnRepositoryObject)modelElementRepositoryObj).getTdColumn());
    }
  }
  if (!analyzedElement.isEmpty()) {
    if (!ModelElementHelper.isFromSameTable(analyzedElement) && !""String_Node_Str"".equals(dataFilterComp.getDataFilterString())) {
      return new ReturnCode(DefaultMessagesImpl.getString(""String_Node_Str""),false);
    }
  }
  return new ReturnCode(true);
}",0.993905297702766
138413,"@Override protected ReturnCode canRun(){
  List<IRepositoryNode> columnSetMultiValueList=this.treeViewer.getColumnSetMultiValueList();
  ReturnCode canSave=canSave();
  if (!canSave.isOk()) {
    return canSave;
  }
  if (columnSetMultiValueList.isEmpty()) {
    return new ReturnCode(DefaultMessagesImpl.getString(""String_Node_Str""),false);
  }
  resetResultPageData();
  return new ReturnCode(true);
}","@Override protected ReturnCode canRun(){
  List<IRepositoryNode> columnSetMultiValueList=this.treeViewer.getColumnSetMultiValueList();
  if (columnSetMultiValueList.isEmpty()) {
    return new ReturnCode(DefaultMessagesImpl.getString(""String_Node_Str""),false);
  }
  resetResultPageData();
  return new ReturnCode(true);
}",0.8882758620689655
138414,"@Override protected ReturnCode canSave(){
  ReturnCode canModRetCode=canModifyAnalysisName();
  if (!canModRetCode.isOk()) {
    return canModRetCode;
  }
  String message=null;
  List<IRepositoryNode> columnSetMultiValueList=this.treeViewer.getColumnSetMultiValueList();
  List<ModelElement> columnList=new ArrayList<ModelElement>();
  Set<EObject> nodeTypeName=new HashSet<EObject>();
  for (  IRepositoryNode rd : columnSetMultiValueList) {
    ModelElement modelElementFromRepositoryNode=RepositoryNodeHelper.getModelElementFromRepositoryNode(rd);
    EObject eContainer=modelElementFromRepositoryNode.eContainer();
    nodeTypeName.add(eContainer);
    columnList.add(RepositoryNodeHelper.getModelElementFromRepositoryNode(rd));
  }
  if (nodeTypeName.size() > 1) {
    return new ReturnCode(DefaultMessagesImpl.getString(""String_Node_Str""),false);
  }
  if (!columnSetMultiValueList.isEmpty()) {
    if (columnList.get(0) instanceof TdColumn) {
      if (!ModelElementHelper.isFromSameTable(columnList)) {
        message=DefaultMessagesImpl.getString(""String_Node_Str"");
      }
    }
 else     if (columnList.get(0) instanceof MetadataColumn) {
      if (!isFromSameTableByDFColumn(columnSetMultiValueList)) {
        message=DefaultMessagesImpl.getString(""String_Node_Str"");
      }
    }
  }
  if (message == null) {
    resetResultPageData();
    return new ReturnCode(true);
  }
  return new ReturnCode(message,false);
}","@Override public ReturnCode canSave(){
  ReturnCode canModRetCode=canModifyAnalysisName();
  if (!canModRetCode.isOk()) {
    return canModRetCode;
  }
  String message=null;
  List<IRepositoryNode> columnSetMultiValueList=this.treeViewer.getColumnSetMultiValueList();
  List<ModelElement> columnList=new ArrayList<ModelElement>();
  Set<EObject> nodeTypeName=new HashSet<EObject>();
  for (  IRepositoryNode rd : columnSetMultiValueList) {
    ModelElement modelElementFromRepositoryNode=RepositoryNodeHelper.getModelElementFromRepositoryNode(rd);
    EObject eContainer=modelElementFromRepositoryNode.eContainer();
    nodeTypeName.add(eContainer);
    columnList.add(RepositoryNodeHelper.getModelElementFromRepositoryNode(rd));
  }
  if (nodeTypeName.size() > 1) {
    return new ReturnCode(DefaultMessagesImpl.getString(""String_Node_Str""),false);
  }
  if (!columnSetMultiValueList.isEmpty()) {
    if (columnList.get(0) instanceof TdColumn) {
      if (!ModelElementHelper.isFromSameTable(columnList)) {
        message=DefaultMessagesImpl.getString(""String_Node_Str"");
      }
    }
 else     if (columnList.get(0) instanceof MetadataColumn) {
      if (!isFromSameTableByDFColumn(columnSetMultiValueList)) {
        message=DefaultMessagesImpl.getString(""String_Node_Str"");
      }
    }
  }
  if (message == null) {
    resetResultPageData();
    return new ReturnCode(true);
  }
  return new ReturnCode(message,false);
}",0.9954561342188046
138415,"@Override protected ReturnCode canSave(){
  ReturnCode canModRetCode=canModifyAnalysisName();
  if (!canModRetCode.isOk()) {
    return canModRetCode;
  }
  if (anaColumnCompareViewer.getColumnListA().size() != anaColumnCompareViewer.getColumnListB().size()) {
    return new ReturnCode(DefaultMessagesImpl.getString(""String_Node_Str""),false);
  }
  List<TdColumn> columnAList=new ArrayList<TdColumn>();
  List<TdColumn> columnBList=new ArrayList<TdColumn>();
  for (  RepositoryNode rd : anaColumnCompareViewer.getColumnListA()) {
    columnAList.add((TdColumn)((MetadataColumnRepositoryObject)rd.getObject()).getTdColumn());
  }
  for (  RepositoryNode rd : anaColumnCompareViewer.getColumnListB()) {
    columnBList.add((TdColumn)((MetadataColumnRepositoryObject)rd.getObject()).getTdColumn());
  }
  if (anaColumnCompareViewer.getColumnListA().size() > 0) {
    if (!ColumnHelper.isFromSameTable(columnAList) || !ColumnHelper.isFromSameTable(columnBList)) {
      return new ReturnCode(DefaultMessagesImpl.getString(""String_Node_Str""),false);
    }
    for (int i=0; i < anaColumnCompareViewer.getColumnListA().size(); i++) {
      TdColumn columnA=columnAList.get(i);
      TdColumn columnB=columnBList.get(i);
      ColumnSet ownerA=ColumnHelper.getColumnOwnerAsColumnSet(columnA);
      ColumnSet ownerB=ColumnHelper.getColumnOwnerAsColumnSet(columnB);
      int typeA=((TdColumn)columnA).getSqlDataType().getJavaDataType();
      int typeB=((TdColumn)columnB).getSqlDataType().getJavaDataType();
      if (!Java2SqlType.isGenericSameType(typeA,typeB)) {
        return new ReturnCode(DefaultMessagesImpl.getString(""String_Node_Str""),false);
      }
      if (!ColumnSetHelper.isFromSamePackage(ownerA,ownerB)) {
        return new ReturnCode(DefaultMessagesImpl.getString(""String_Node_Str""),false);
      }
    }
    List<TdColumn> allColumns=new ArrayList<TdColumn>();
    allColumns.addAll(columnAList);
    allColumns.addAll(columnBList);
  }
  return new ReturnCode(true);
}","@Override public ReturnCode canSave(){
  ReturnCode canModRetCode=canModifyAnalysisName();
  if (!canModRetCode.isOk()) {
    return canModRetCode;
  }
  if (anaColumnCompareViewer.getColumnListA().size() != anaColumnCompareViewer.getColumnListB().size()) {
    return new ReturnCode(DefaultMessagesImpl.getString(""String_Node_Str""),false);
  }
  List<TdColumn> columnAList=new ArrayList<TdColumn>();
  List<TdColumn> columnBList=new ArrayList<TdColumn>();
  for (  RepositoryNode rd : anaColumnCompareViewer.getColumnListA()) {
    columnAList.add((TdColumn)((MetadataColumnRepositoryObject)rd.getObject()).getTdColumn());
  }
  for (  RepositoryNode rd : anaColumnCompareViewer.getColumnListB()) {
    columnBList.add((TdColumn)((MetadataColumnRepositoryObject)rd.getObject()).getTdColumn());
  }
  if (anaColumnCompareViewer.getColumnListA().size() > 0) {
    if (!ColumnHelper.isFromSameTable(columnAList) || !ColumnHelper.isFromSameTable(columnBList)) {
      return new ReturnCode(DefaultMessagesImpl.getString(""String_Node_Str""),false);
    }
    for (int i=0; i < anaColumnCompareViewer.getColumnListA().size(); i++) {
      TdColumn columnA=columnAList.get(i);
      TdColumn columnB=columnBList.get(i);
      ColumnSet ownerA=ColumnHelper.getColumnOwnerAsColumnSet(columnA);
      ColumnSet ownerB=ColumnHelper.getColumnOwnerAsColumnSet(columnB);
      int typeA=((TdColumn)columnA).getSqlDataType().getJavaDataType();
      int typeB=((TdColumn)columnB).getSqlDataType().getJavaDataType();
      if (!Java2SqlType.isGenericSameType(typeA,typeB)) {
        return new ReturnCode(DefaultMessagesImpl.getString(""String_Node_Str""),false);
      }
      if (!ColumnSetHelper.isFromSamePackage(ownerA,ownerB)) {
        return new ReturnCode(DefaultMessagesImpl.getString(""String_Node_Str""),false);
      }
    }
    List<TdColumn> allColumns=new ArrayList<TdColumn>();
    allColumns.addAll(columnAList);
    allColumns.addAll(columnBList);
  }
  return new ReturnCode(true);
}",0.9967246157722348
138416,"@Override protected ReturnCode canSave(){
  ReturnCode canModRetCode=canModifyAnalysisName();
  if (!canModRetCode.isOk()) {
    return canModRetCode;
  }
  return new ReturnCode(true);
}","@Override public ReturnCode canSave(){
  ReturnCode canModRetCode=canModifyAnalysisName();
  if (!canModRetCode.isOk()) {
    return canModRetCode;
  }
  return new ReturnCode(true);
}",0.9703504043126684
138417,"@Override public boolean canDrop(IRepositoryNode reposNode){
  List<IRepositoryNode> existColumns=new ArrayList<IRepositoryNode>();
  for (  IRepositoryNode columnFromMultiValueList : this.getColumnSetMultiValueList()) {
    existColumns.add(columnFromMultiValueList);
  }
  if (existColumns.contains(reposNode)) {
    return false;
  }
  return true;
}","@Override public boolean canDrop(IRepositoryNode reposNode){
  Set<EObject> nodeTypeName=new HashSet<EObject>();
  for (  IRepositoryNode rd : columnSetMultiValueList) {
    ModelElement modelElementFromRepositoryNode=RepositoryNodeHelper.getModelElementFromRepositoryNode(rd);
    EObject eContainer=modelElementFromRepositoryNode.eContainer();
    nodeTypeName.add(eContainer);
  }
  ModelElement modelElement=RepositoryNodeHelper.getModelElementFromRepositoryNode(reposNode);
  nodeTypeName.add(modelElement.eContainer());
  if (nodeTypeName.size() > 1) {
    return false;
  }
  List<IRepositoryNode> existColumns=new ArrayList<IRepositoryNode>();
  for (  IRepositoryNode columnFromMultiValueList : this.getColumnSetMultiValueList()) {
    existColumns.add(columnFromMultiValueList);
  }
  if (existColumns.contains(reposNode)) {
    return false;
  }
  return true;
}",0.5758564437194127
138418,"@Override public void openEditor(Item item){
  super.openEditor(item);
  if (this.selectionPage != null) {
    AnalysisEditor editor=(AnalysisEditor)PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().getActiveEditor();
    if (editor != null) {
      AbstractAnalysisMetadataPage masterPage=editor.getMasterPage();
      List<IRepositoryNode> nodes=this.selectionPage.nodes;
      if (nodes != null && nodes.size() > 0) {
        List<IRepositoryNode> nodeList=new ArrayList<IRepositoryNode>();
        nodeList.addAll(nodes);
        masterPage.getTreeViewer().setInput(nodeList.toArray(new RepositoryNode[nodeList.size()]));
      }
    }
  }
}","@Override public void openEditor(Item item){
  super.openEditor(item);
  if (this.selectionPage != null) {
    AnalysisEditor editor=(AnalysisEditor)PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().getActiveEditor();
    if (editor != null) {
      AbstractAnalysisMetadataPage masterPage=editor.getMasterPage();
      List<IRepositoryNode> nodes=this.selectionPage.nodes;
      if (nodes != null && nodes.size() > 0) {
        List<IRepositoryNode> nodeList=new ArrayList<IRepositoryNode>();
        for (        IRepositoryNode repNode : nodes) {
          repNode=RepositoryNodeHelper.recursiveFind(RepositoryNodeHelper.getModelElementFromRepositoryNode(repNode));
          nodeList.add(repNode);
        }
        masterPage.getTreeViewer().setInput(nodeList.toArray(new RepositoryNode[nodeList.size()]));
      }
    }
  }
}",0.7344782034346103
138419,"/** 
 * Method ""createSqlQuery"".
 * @param dataFilterExpression
 * @param analysis
 * @param indicator
 * @throws ParseException
 * @throws AnalysisExecutionException
 */
private boolean createSqlQuery(String dataFilterAsString,Indicator indicator) throws ParseException, AnalysisExecutionException {
  ModelElement analyzedElement=indicator.getAnalyzedElement();
  if (analyzedElement == null) {
    return traceError(""String_Node_Str"" + indicator.getName());
  }
  TdColumn tdColumn=SwitchHelpers.COLUMN_SWITCH.doSwitch(indicator.getAnalyzedElement());
  if (tdColumn == null) {
    return traceError(""String_Node_Str"" + indicator.getName());
  }
  if (tdColumn.eIsProxy()) {
    tdColumn=(TdColumn)EObjectHelper.resolveObject(tdColumn);
  }
  String colName=getQuotedColumnName(tdColumn);
  if (!belongToSameSchemata(tdColumn)) {
    StringBuffer buf=new StringBuffer();
    for (    orgomg.cwm.objectmodel.core.Package schema : schemata.values()) {
      buf.append(schema.getName() + ""String_Node_Str"");
    }
    log.error(""String_Node_Str"" + colName + ""String_Node_Str""+ buf.toString().trim()+ ""String_Node_Str"");
    return false;
  }
  colName=castColumn(indicator,tdColumn,colName);
  String language=dbms().getDbmsName();
  Expression sqlGenericExpression=null;
  IndicatorDefinition indicatorDefinition;
  String label=indicator.getIndicatorDefinition().getLabel();
  if (label == null || ""String_Node_Str"".equals(label)) {
    indicatorDefinition=indicator.getIndicatorDefinition();
  }
 else {
    indicatorDefinition=DefinitionHandler.getInstance().getIndicatorDefinition(label);
  }
  if (indicatorDefinition == null) {
    return traceError(""String_Node_Str"" + indicator.getName() + ""String_Node_Str"");
  }
  sqlGenericExpression=dbms().getSqlExpression(indicatorDefinition);
  final EClass indicatorEclass=indicator.eClass();
  if (sqlGenericExpression == null || sqlGenericExpression.getBody() == null) {
    if (IndicatorsPackage.eINSTANCE.getRegexpMatchingIndicator().equals(indicatorEclass)) {
      return traceError(""String_Node_Str"" + language + ""String_Node_Str"");
    }
    return traceError(""String_Node_Str"" + (indicator.getName() != null ? indicator.getName() : indicatorEclass.getName()) + ""String_Node_Str""+ ResourceHelper.getUUID(indicatorDefinition)+ ""String_Node_Str"");
  }
  List<String> whereExpression=new ArrayList<String>();
  if (StringUtils.isNotBlank(dataFilterAsString)) {
    whereExpression.add(dataFilterAsString);
  }
  List<String> rangeStrings=null;
  DateGrain dateAggregationType=null;
  IndicatorParameters parameters=indicator.getParameters();
  if (parameters != null) {
    Domain bins=parameters.getBins();
    if (bins != null) {
      rangeStrings=getBinsAsGenericString(bins.getRanges(),colName);
    }
    DateParameters dateParameters=parameters.getDateParameters();
    if (dateParameters != null) {
      dateAggregationType=dateParameters.getDateAggregationType();
    }
    TextParameters textParameter=parameters.getTextParameter();
    if (textParameter != null) {
      if (textParameter.isUseNulls()) {
        colName=dbms().replaceNullsWithString(colName,""String_Node_Str"");
      }
 else {
        whereExpression.add(colName.concat(dbms().isNotNull()));
      }
      if (textParameter.isIgnoreCase()) {
        colName=dbms().toUpperCase(colName);
      }
      if (!textParameter.isUseBlank() && IndicatorsPackage.eINSTANCE.getLengthIndicator().isSuperTypeOf(indicatorEclass)) {
        String tdColName=getQuotedColumnName(tdColumn);
        tdColName=dbms().replaceNullsWithString(tdColName,""String_Node_Str"");
        whereExpression.add(dbms().isNotBlank(tdColName));
      }
 else       if (textParameter.isUseBlank() && IndicatorsPackage.eINSTANCE.getFrequencyIndicator().isSuperTypeOf(indicatorEclass)) {
        colName=dbms().trim(colName);
      }
    }
  }
  final ColumnSet columnSetOwner=ColumnHelper.getColumnOwnerAsColumnSet(tdColumn);
  String schemaName=getQuotedSchemaName(columnSetOwner);
  String table=getQuotedTableName(tdColumn);
  String catalogName=getQuotedCatalogName(columnSetOwner);
  if (catalogName == null && schemaName != null) {
    final Schema parentSchema=SchemaHelper.getParentSchema(columnSetOwner);
    final Catalog parentCatalog=CatalogHelper.getParentCatalog(parentSchema);
    catalogName=parentCatalog != null ? parentCatalog.getName() : null;
  }
  boolean isSybase=false;
  if (Arrays.asList(org.talend.utils.sql.ConnectionUtils.getSybaseDBProductsName()).contains(dbms().getDbmsName())) {
    isSybase=true;
  }
  if (isSybase) {
    schemaName=ColumnSetHelper.getTableOwner(columnSetOwner);
  }
 else {
    table=dbms().toQualifiedName(catalogName,schemaName,table);
  }
  String completedSqlString=null;
  if (indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getMedianIndicator()) || indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getLowerQuartileIndicator()) || indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getUpperQuartileIndicator())) {
    completedSqlString=getCompletedStringForQuantiles(indicator,sqlGenericExpression,colName,table,whereExpression);
    if (completedSqlString != null) {
      whereExpression=duplicateForCrossJoin(completedSqlString,whereExpression,tdColumn);
      completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
    }
  }
 else   if (indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getFrequencyIndicator()) || IndicatorsPackage.eINSTANCE.getFrequencyIndicator().isSuperTypeOf(indicatorEclass) || indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getModeIndicator())|| UDIHelper.isFrequency(indicator)) {
    int topN=indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getModeIndicator()) ? 1 : getTopN(indicator);
    if (topN <= 0) {
      topN=TOP_N;
    }
    if (rangeStrings != null) {
      completedSqlString=getUnionCompletedString(indicator,sqlGenericExpression,colName,table,whereExpression,rangeStrings);
      if (indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getModeIndicator())) {
        completedSqlString=dbms().getTopNQuery(completedSqlString,topN);
      }
    }
 else     if (dateAggregationType != null && !dateAggregationType.equals(DateGrain.NONE) && Java2SqlType.isDateInSQL(tdColumn.getSqlDataType().getJavaDataType())) {
      completedSqlString=getDateAggregatedCompletedStringWithoutAlia(sqlGenericExpression,colName,table,dateAggregationType);
      completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
      completedSqlString=dbms().getTopNQuery(completedSqlString,topN);
    }
 else {
      if (indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getPatternFreqIndicator()) || indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getPatternLowFreqIndicator())) {
        if (Java2SqlType.isNumbericInSQL(tdColumn.getSqlDataType().getJavaDataType()) || Java2SqlType.isDateInSQL(tdColumn.getSqlDataType().getJavaDataType())) {
          colName=addFunctionTypeConvert(colName);
        }
        final EList<CharactersMapping> charactersMapping=indicatorDefinition.getCharactersMapping();
        colName=dbms().getPatternFinderFunction(colName,charactersMapping);
        if (colName == null) {
          colName=dbms().getPatternFinderDefaultFunction(colName);
        }
        if (colName == null) {
          return traceError(""String_Node_Str"" + language + ""String_Node_Str""+ indicator.getName());
        }
      }
 else       if (indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getSoundexFreqIndicator()) || indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getSoundexLowFreqIndicator())) {
        table=dbms().getSoundexFunction(table,colName);
      }
      completedSqlString=dbms().fillGenericQueryWithColumnTableAndAlias(sqlGenericExpression.getBody(),colName,table,colName);
      completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
      completedSqlString=dbms().getTopNQuery(completedSqlString,topN);
    }
  }
 else   if (IndicatorsPackage.eINSTANCE.getPatternMatchingIndicator().isSuperTypeOf(indicatorEclass)) {
    List<String> patterns=getPatterns(indicator);
    if (patterns.isEmpty()) {
      return traceError(""String_Node_Str"" + language + ""String_Node_Str""+ indicator.getName());
    }
    completedSqlString=replaceVariables(sqlGenericExpression.getBody(),colName,table,patterns);
    completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
  }
 else {
    if (IndicatorsPackage.eINSTANCE.getDefValueCountIndicator().equals(indicatorEclass)) {
      String defValue=ColumnHelper.getDefaultValue(tdColumn);
      if (defValue == null) {
        return traceError(""String_Node_Str"" + colName + ""String_Node_Str""+ indicator.getName()+ ""String_Node_Str"");
      }
      int javaType=tdColumn.getSqlDataType().getJavaDataType();
      if (!Java2SqlType.isNumbericInSQL(javaType) && !isFunction(defValue,table)) {
        defValue=""String_Node_Str"" + defValue + ""String_Node_Str"";
      }
      whereExpression.add(colName + dbms().equal() + defValue);
    }
    completedSqlString=dbms().fillGenericQueryWithColumnsAndTable(sqlGenericExpression.getBody(),colName,table);
    completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
  }
  String finalQuery=completedSqlString;
  if (finalQuery != null) {
    TdExpression instantiateSqlExpression=BooleanExpressionHelper.createTdExpression(language,finalQuery);
    indicator.setInstantiatedExpression(instantiateSqlExpression);
    return true;
  }
  return false;
}","/** 
 * Method ""createSqlQuery"".
 * @param dataFilterExpression
 * @param analysis
 * @param indicator
 * @throws ParseException
 * @throws AnalysisExecutionException
 */
private boolean createSqlQuery(String dataFilterAsString,Indicator indicator) throws ParseException, AnalysisExecutionException {
  ModelElement analyzedElement=indicator.getAnalyzedElement();
  if (analyzedElement == null) {
    return traceError(""String_Node_Str"" + indicator.getName());
  }
  TdColumn tdColumn=SwitchHelpers.COLUMN_SWITCH.doSwitch(indicator.getAnalyzedElement());
  if (tdColumn == null) {
    return traceError(""String_Node_Str"" + indicator.getName());
  }
  if (tdColumn.eIsProxy()) {
    tdColumn=(TdColumn)EObjectHelper.resolveObject(tdColumn);
  }
  String colName=getQuotedColumnName(tdColumn);
  if (!belongToSameSchemata(tdColumn)) {
    StringBuffer buf=new StringBuffer();
    for (    orgomg.cwm.objectmodel.core.Package schema : schemata.values()) {
      buf.append(schema.getName() + ""String_Node_Str"");
    }
    log.error(""String_Node_Str"" + colName + ""String_Node_Str""+ buf.toString().trim()+ ""String_Node_Str"");
    return false;
  }
  colName=castColumn(indicator,tdColumn,colName);
  String language=dbms().getDbmsName();
  Expression sqlGenericExpression=null;
  IndicatorDefinition indicatorDefinition;
  String label=indicator.getIndicatorDefinition().getLabel();
  if (label == null || ""String_Node_Str"".equals(label)) {
    indicatorDefinition=indicator.getIndicatorDefinition();
  }
 else {
    indicatorDefinition=DefinitionHandler.getInstance().getIndicatorDefinition(label);
  }
  if (indicatorDefinition == null) {
    return traceError(""String_Node_Str"" + indicator.getName() + ""String_Node_Str"");
  }
  sqlGenericExpression=dbms().getSqlExpression(indicatorDefinition);
  final EClass indicatorEclass=indicator.eClass();
  if (sqlGenericExpression == null || sqlGenericExpression.getBody() == null) {
    if (IndicatorsPackage.eINSTANCE.getRegexpMatchingIndicator().equals(indicatorEclass)) {
      return traceError(""String_Node_Str"" + language + ""String_Node_Str"");
    }
    return traceError(""String_Node_Str"" + (indicator.getName() != null ? indicator.getName() : indicatorEclass.getName()) + ""String_Node_Str""+ ResourceHelper.getUUID(indicatorDefinition)+ ""String_Node_Str"");
  }
  List<String> whereExpression=new ArrayList<String>();
  if (StringUtils.isNotBlank(dataFilterAsString)) {
    whereExpression.add(dataFilterAsString);
  }
  List<String> rangeStrings=null;
  DateGrain dateAggregationType=null;
  IndicatorParameters parameters=indicator.getParameters();
  if (parameters != null) {
    Domain bins=parameters.getBins();
    if (bins != null) {
      rangeStrings=getBinsAsGenericString(bins.getRanges(),colName);
    }
    DateParameters dateParameters=parameters.getDateParameters();
    if (dateParameters != null) {
      dateAggregationType=dateParameters.getDateAggregationType();
    }
    TextParameters textParameter=parameters.getTextParameter();
    if (textParameter != null) {
      if (textParameter.isUseNulls()) {
        colName=dbms().replaceNullsWithString(colName,""String_Node_Str"");
      }
 else {
        whereExpression.add(colName.concat(dbms().isNotNull()));
      }
      if (textParameter.isIgnoreCase()) {
        colName=dbms().toUpperCase(colName);
      }
      if (!textParameter.isUseBlank() && IndicatorsPackage.eINSTANCE.getLengthIndicator().isSuperTypeOf(indicatorEclass)) {
        String tdColName=getQuotedColumnName(tdColumn);
        tdColName=dbms().replaceNullsWithString(tdColName,""String_Node_Str"");
        whereExpression.add(dbms().isNotBlank(tdColName));
      }
 else       if (textParameter.isUseBlank() && IndicatorsPackage.eINSTANCE.getFrequencyIndicator().isSuperTypeOf(indicatorEclass)) {
        colName=dbms().trim(colName);
      }
    }
  }
  final ColumnSet columnSetOwner=ColumnHelper.getColumnOwnerAsColumnSet(tdColumn);
  String schemaName=getQuotedSchemaName(columnSetOwner);
  String table=getQuotedTableName(tdColumn);
  String catalogName=getQuotedCatalogName(columnSetOwner);
  if (catalogName == null && schemaName != null) {
    final Schema parentSchema=SchemaHelper.getParentSchema(columnSetOwner);
    final Catalog parentCatalog=CatalogHelper.getParentCatalog(parentSchema);
    catalogName=parentCatalog != null ? parentCatalog.getName() : null;
  }
  boolean isSybase=false;
  if (Arrays.asList(org.talend.utils.sql.ConnectionUtils.getSybaseDBProductsName()).contains(dbms().getDbmsName())) {
    isSybase=true;
  }
  if (isSybase) {
    schemaName=ColumnSetHelper.getTableOwner(columnSetOwner);
  }
  table=dbms().toQualifiedName(catalogName,schemaName,table);
  String completedSqlString=null;
  if (indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getMedianIndicator()) || indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getLowerQuartileIndicator()) || indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getUpperQuartileIndicator())) {
    completedSqlString=getCompletedStringForQuantiles(indicator,sqlGenericExpression,colName,table,whereExpression);
    if (completedSqlString != null) {
      whereExpression=duplicateForCrossJoin(completedSqlString,whereExpression,tdColumn);
      completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
    }
  }
 else   if (indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getFrequencyIndicator()) || IndicatorsPackage.eINSTANCE.getFrequencyIndicator().isSuperTypeOf(indicatorEclass) || indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getModeIndicator())|| UDIHelper.isFrequency(indicator)) {
    int topN=indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getModeIndicator()) ? 1 : getTopN(indicator);
    if (topN <= 0) {
      topN=TOP_N;
    }
    if (rangeStrings != null) {
      completedSqlString=getUnionCompletedString(indicator,sqlGenericExpression,colName,table,whereExpression,rangeStrings);
      if (indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getModeIndicator())) {
        completedSqlString=dbms().getTopNQuery(completedSqlString,topN);
      }
    }
 else     if (dateAggregationType != null && !dateAggregationType.equals(DateGrain.NONE) && Java2SqlType.isDateInSQL(tdColumn.getSqlDataType().getJavaDataType())) {
      completedSqlString=getDateAggregatedCompletedStringWithoutAlia(sqlGenericExpression,colName,table,dateAggregationType);
      completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
      completedSqlString=dbms().getTopNQuery(completedSqlString,topN);
    }
 else {
      if (indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getPatternFreqIndicator()) || indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getPatternLowFreqIndicator())) {
        if (Java2SqlType.isNumbericInSQL(tdColumn.getSqlDataType().getJavaDataType()) || Java2SqlType.isDateInSQL(tdColumn.getSqlDataType().getJavaDataType())) {
          colName=addFunctionTypeConvert(colName);
        }
        final EList<CharactersMapping> charactersMapping=indicatorDefinition.getCharactersMapping();
        colName=dbms().getPatternFinderFunction(colName,charactersMapping);
        if (colName == null) {
          colName=dbms().getPatternFinderDefaultFunction(colName);
        }
        if (colName == null) {
          return traceError(""String_Node_Str"" + language + ""String_Node_Str""+ indicator.getName());
        }
      }
 else       if (indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getSoundexFreqIndicator()) || indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getSoundexLowFreqIndicator())) {
        table=dbms().getSoundexFunction(table,colName);
      }
      completedSqlString=dbms().fillGenericQueryWithColumnTableAndAlias(sqlGenericExpression.getBody(),colName,table,colName);
      completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
      completedSqlString=dbms().getTopNQuery(completedSqlString,topN);
    }
  }
 else   if (IndicatorsPackage.eINSTANCE.getPatternMatchingIndicator().isSuperTypeOf(indicatorEclass)) {
    List<String> patterns=getPatterns(indicator);
    if (patterns.isEmpty()) {
      return traceError(""String_Node_Str"" + language + ""String_Node_Str""+ indicator.getName());
    }
    completedSqlString=replaceVariables(sqlGenericExpression.getBody(),colName,table,patterns);
    completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
  }
 else {
    if (IndicatorsPackage.eINSTANCE.getDefValueCountIndicator().equals(indicatorEclass)) {
      String defValue=ColumnHelper.getDefaultValue(tdColumn);
      if (defValue == null) {
        return traceError(""String_Node_Str"" + colName + ""String_Node_Str""+ indicator.getName()+ ""String_Node_Str"");
      }
      int javaType=tdColumn.getSqlDataType().getJavaDataType();
      if (!Java2SqlType.isNumbericInSQL(javaType) && !isFunction(defValue,table)) {
        defValue=""String_Node_Str"" + defValue + ""String_Node_Str"";
      }
      whereExpression.add(colName + dbms().equal() + defValue);
    }
    completedSqlString=dbms().fillGenericQueryWithColumnsAndTable(sqlGenericExpression.getBody(),colName,table);
    completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
  }
  String finalQuery=completedSqlString;
  if (finalQuery != null) {
    TdExpression instantiateSqlExpression=BooleanExpressionHelper.createTdExpression(language,finalQuery);
    indicator.setInstantiatedExpression(instantiateSqlExpression);
    return true;
  }
  return false;
}",0.9992630027374184
138420,"/** 
 * Analysis of whether the name check can be modified DOC gdbu Comment method ""canModifyAnalysisName"".
 * @return ReturnCodec
 */
protected ReturnCode canModifyAnalysisName(){
  this.nameText.setText(this.nameText.getText().replace(""String_Node_Str"",""String_Node_Str""));
  if (this.nameText.getText().length() == 0) {
    this.nameText.setText(this.analysis.getName());
    return new ReturnCode(DefaultMessagesImpl.getString(""String_Node_Str""),false);
  }
  String elementName=this.nameText.getText();
  List<IRepositoryNode> childrensname=this.analysisRepNode.getParent().getChildren();
  for (  IRepositoryNode children : childrensname) {
    if (elementName.equals(this.analysis.getName())) {
      break;
    }
 else     if (elementName.equals((children.getLabel() + ""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str""))) {
      this.nameText.setText(this.analysis.getName());
      return new ReturnCode(DefaultMessagesImpl.getString(""String_Node_Str""),false);
    }
  }
  return new ReturnCode(true);
}","/** 
 * Analysis of whether the name check can be modified DOC gdbu Comment method ""canModifyAnalysisName"".
 * @return ReturnCodec
 */
protected ReturnCode canModifyAnalysisName(){
  this.nameText.setText(this.nameText.getText().replace(""String_Node_Str"",""String_Node_Str""));
  if (this.nameText.getText().length() == 0) {
    this.nameText.setText(this.analysis.getName());
    return new ReturnCode(DefaultMessagesImpl.getString(""String_Node_Str""),false);
  }
  String elementName=this.nameText.getText();
  List<IRepositoryNode> childrensname=this.analysisRepNode.getParent().getChildren();
  for (  IRepositoryNode children : childrensname) {
    if (elementName.equals(this.analysis.getName())) {
      break;
    }
 else     if (elementName.equals((children.getLabel() + ""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str""))) {
      this.nameText.setText(this.analysis.getName());
      return new ReturnCode(DefaultMessagesImpl.getString(""String_Node_Str""),false);
    }
  }
  setDirty(false);
  return new ReturnCode(true);
}",0.9908256880733946
138421,"@Override public List<IRepositoryNode> getChildren(boolean withDeleted){
  try {
    super.getChildren().clear();
    RootContainer<String,IRepositoryViewObject> tdqViewObjects=ProxyRepositoryFactory.getInstance().getTdqRepositoryViewObjects(getContentType(),RepositoryNodeHelper.getPath(this).toString());
    for (    Container<String,IRepositoryViewObject> container : tdqViewObjects.getSubContainer()) {
      Folder folder=new Folder((Property)container.getProperty(),ERepositoryObjectType.METADATA_CONNECTIONS);
      if (!withDeleted && folder.isDeleted()) {
        continue;
      }
      DBConnectionSubFolderRepNode childNodeFolder=new DBConnectionSubFolderRepNode(folder,this,ENodeType.SIMPLE_FOLDER);
      childNodeFolder.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_CONNECTIONS);
      childNodeFolder.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_CONNECTIONS);
      super.getChildren().add(childNodeFolder);
    }
    for (    IRepositoryViewObject viewObject : tdqViewObjects.getMembers()) {
      if (!withDeleted && viewObject.isDeleted()) {
        continue;
      }
      DBConnectionRepNode repNode=new DBConnectionRepNode(viewObject,this,ENodeType.REPOSITORY_ELEMENT);
      repNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_CONNECTIONS);
      repNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_CONNECTIONS);
      viewObject.setRepositoryNode(repNode);
      super.getChildren().add(repNode);
    }
  }
 catch (  PersistenceException e) {
    log.error(e,e);
  }
  return super.getChildren();
}","@Override public List<IRepositoryNode> getChildren(boolean withDeleted){
  try {
    super.getChildren().clear();
    RootContainer<String,IRepositoryViewObject> tdqViewObjects=ProxyRepositoryFactory.getInstance().getTdqRepositoryViewObjects(getContentType(),RepositoryNodeHelper.getPath(this).toString());
    for (    Container<String,IRepositoryViewObject> container : tdqViewObjects.getSubContainer()) {
      Folder folder=new Folder((Property)container.getProperty(),ERepositoryObjectType.METADATA_CONNECTIONS);
      if (!withDeleted && folder.isDeleted()) {
        continue;
      }
      DBConnectionSubFolderRepNode childNodeFolder=new DBConnectionSubFolderRepNode(folder,this,ENodeType.SIMPLE_FOLDER);
      childNodeFolder.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_CONNECTIONS);
      childNodeFolder.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_CONNECTIONS);
      folder.setRepositoryNode(childNodeFolder);
      super.getChildren().add(childNodeFolder);
    }
    for (    IRepositoryViewObject viewObject : tdqViewObjects.getMembers()) {
      if (!withDeleted && viewObject.isDeleted()) {
        continue;
      }
      DBConnectionRepNode repNode=new DBConnectionRepNode(viewObject,this,ENodeType.REPOSITORY_ELEMENT);
      repNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_CONNECTIONS);
      repNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_CONNECTIONS);
      viewObject.setRepositoryNode(repNode);
      super.getChildren().add(repNode);
    }
  }
 catch (  PersistenceException e) {
    log.error(e,e);
  }
  return super.getChildren();
}",0.9850107066381156
138422,"public ItemRecord[] populate(ItemRecord[] elements,boolean checkExisted){
  List<ItemRecord> inValidRecords=new ArrayList<ItemRecord>();
  for (  ItemRecord record : elements) {
    record.getErrors().clear();
    checkDependency(record);
    if (checkExisted) {
      checkExisted(record);
    }
    if (!record.isValid()) {
      inValidRecords.add(record);
    }
  }
  return inValidRecords.toArray(new ItemRecord[inValidRecords.size()]);
}","public ItemRecord[] populate(ItemRecord[] elements,boolean checkExisted){
  List<ItemRecord> inValidRecords=new ArrayList<ItemRecord>();
  for (  ItemRecord record : elements) {
    record.getErrors().clear();
    checkDependency(record);
    if (checkExisted) {
      checkExisted(record);
    }
    checkConflict(record);
    if (!record.isValid()) {
      inValidRecords.add(record);
    }
  }
  return inValidRecords.toArray(new ItemRecord[inValidRecords.size()]);
}",0.968236582694414
138423,"/** 
 * DOC scorreia Comment method ""createTableIndicator"".
 * @param t
 * @param schemaIndic
 * @param rowCount
 * @param pkCount
 * @param idxCount
 */
private void createTableIndicator(NamedColumnSet t,SchemaIndicator schemaIndic,long rowCount,int pkCount,int idxCount){
  TableIndicator tableIndicator=SchemaFactory.eINSTANCE.createTableIndicator();
  DefinitionHandler.getInstance().setDefaultIndicatorDefinition(tableIndicator);
  tableIndicator.setAnalyzedElement(t);
  tableIndicator.setTableName(t.getName());
  tableIndicator.setRowCount(rowCount);
  tableIndicator.setKeyCount(pkCount);
  tableIndicator.setIndexCount(idxCount);
  schemaIndic.addTableIndicator(tableIndicator);
}","/** 
 * DOC scorreia Comment method ""createTableIndicator"".
 * @param t
 * @param schemaIndic
 * @param rowCount
 * @param pkCount
 * @param idxCount
 */
private void createTableIndicator(NamedColumnSet t,SchemaIndicator schemaIndic,long rowCount,int pkCount,int idxCount){
  TableIndicator tableIndicator=SchemaFactory.eINSTANCE.createTableIndicator();
  DefinitionHandler.getInstance().setDefaultIndicatorDefinition(tableIndicator);
  tableIndicator.setTableName(t.getName());
  tableIndicator.setRowCount(rowCount);
  tableIndicator.setKeyCount(pkCount);
  tableIndicator.setIndexCount(idxCount);
  schemaIndic.addTableIndicator(tableIndicator);
}",0.7298507462686568
138424,"/** 
 * DOC yyi 2011-03-14 19460:remove selected element form the tree
 */
private void removeSelectedElements(){
  TreeItem[] selection=tree.getSelection();
  for (  TreeItem treeItem : selection) {
    ModelElementIndicator meIndicator=(ModelElementIndicator)treeItem.getData(MODELELEMENT_INDICATOR_KEY);
    deleteColumnItems(meIndicator.getModelElementRepositoryNode());
    deleteModelElementItems(meIndicator);
    removeItemBranch(treeItem);
  }
  updateBindConnection(masterPage,tree);
  setElements(modelElementIndicators);
  enabledButtons(false);
  tree.setFocus();
}","/** 
 * DOC yyi 2011-03-14 19460:remove selected element form the tree
 */
private void removeSelectedElements(){
  TreeItem[] selection=tree.getSelection();
  for (  TreeItem treeItem : selection) {
    removeItemBranch(treeItem);
  }
}",0.5226993865030675
138425,"@Override protected void removeItemBranch(TreeItem item){
  IndicatorUnit unit=(IndicatorUnit)item.getData(INDICATOR_UNIT_KEY);
  ModelElementIndicator meIndicator=(ModelElementIndicator)item.getData(MODELELEMENT_INDICATOR_KEY);
  super.removeItemBranch(item);
  if (null != unit) {
    meIndicator.removeIndicatorUnit(unit);
    masterPage.getAllMatchIndicator().getCompositeRegexMatchingIndicators().remove(unit.getIndicator());
    masterPage.updateIndicatorSection();
  }
}","@Override protected void removeItemBranch(TreeItem item){
  IndicatorUnit unit=(IndicatorUnit)item.getData(INDICATOR_UNIT_KEY);
  ModelElementIndicator meIndicator=(ModelElementIndicator)item.getData(MODELELEMENT_INDICATOR_KEY);
  deleteColumnItems(meIndicator.getModelElementRepositoryNode());
  deleteModelElementItems(meIndicator);
  if (null != unit) {
    meIndicator.removeIndicatorUnit(unit);
    masterPage.getAllMatchIndicator().getCompositeRegexMatchingIndicators().remove(unit.getIndicator());
    masterPage.updateIndicatorSection();
  }
  updateBindConnection(masterPage,tree);
  super.removeItemBranch(item);
  enabledButtons(false);
  tree.setFocus();
}",0.7877729257641921
138426,"@Override public void fillContextMenu(IMenuManager menu){
  Iterator<?> iter=((TreeSelection)this.getContext().getSelection()).iterator();
  while (iter.hasNext()) {
    Object obj=iter.next();
    if (obj instanceof RepositoryNode) {
      if (ConnectionUtils.isMdmConnection(((RepositoryNode)obj).getObject())) {
        return;
      }
    }
 else {
      return;
    }
  }
  TreeSelection treeSelection=(TreeSelection)getContext().getSelection();
  if (treeSelection == null) {
    return;
  }
  Object firstElement=treeSelection.getFirstElement();
  RepositoryNode rNode=(RepositoryNode)firstElement;
  IFolder folder=WorkbenchUtils.getFolder(rNode);
  IFolder metadataFolder=ResourceManager.getMetadataFolder();
  if (!folder.getFullPath().toOSString().startsWith(metadataFolder.getFullPath().toOSString())) {
    return;
  }
  Object[] selectedObj=treeSelection.toArray();
  if (selectedObj.length < 2) {
    return;
  }
  List<Object> objects=new ArrayList<Object>();
  for (  Object obj : selectedObj) {
    RepositoryNode node=(RepositoryNode)obj;
    if (node instanceof DBConnectionRepNode) {
      Property property=((DBConnectionRepNode)node).getObject().getProperty();
      DatabaseConnectionItem databaseConnectionItem=(DatabaseConnectionItem)property.getItem();
      Connection databaseConnection=databaseConnectionItem.getConnection();
      objects.add(databaseConnection);
    }
 else     if (node instanceof DBCatalogRepNode) {
      Catalog catalog=((DBCatalogRepNode)node).getCatalog();
      objects.add(catalog);
    }
 else     if (node instanceof DBSchemaRepNode) {
      Schema schema=((DBSchemaRepNode)node).getSchema();
      objects.add(schema);
    }
 else     if (node instanceof DBTableRepNode) {
      TdTable tdTable=((DBTableRepNode)node).getTdTable();
      objects.add(tdTable);
    }
 else     if (node instanceof DBColumnRepNode) {
      TdColumn tdColumn=((DBColumnRepNode)node).getTdColumn();
      objects.add(tdColumn);
    }
  }
  selectionCompareAction.refreshSelectedObj(objects.get(0),objects.get(1));
  menu.add(selectionCompareAction);
}","@Override public void fillContextMenu(IMenuManager menu){
  Iterator<?> iter=((TreeSelection)this.getContext().getSelection()).iterator();
  while (iter.hasNext()) {
    Object obj=iter.next();
    if (obj instanceof RepositoryNode) {
      if (ConnectionUtils.isMdmConnection(((RepositoryNode)obj).getObject())) {
        return;
      }
    }
 else {
      return;
    }
  }
  TreeSelection treeSelection=(TreeSelection)getContext().getSelection();
  if (treeSelection == null) {
    return;
  }
  Object firstElement=treeSelection.getFirstElement();
  RepositoryNode rNode=(RepositoryNode)firstElement;
  IFolder folder=WorkbenchUtils.getFolder(rNode);
  IFolder metadataFolder=ResourceManager.getMetadataFolder();
  if (!folder.getFullPath().toOSString().startsWith(metadataFolder.getFullPath().toOSString())) {
    return;
  }
  Object[] selectedObj=treeSelection.toArray();
  if (selectedObj.length < 2) {
    return;
  }
  List<Object> objects=new ArrayList<Object>();
  for (  Object obj : selectedObj) {
    RepositoryNode node=(RepositoryNode)obj;
    if (node instanceof DBConnectionRepNode) {
      Property property=((DBConnectionRepNode)node).getObject().getProperty();
      DatabaseConnectionItem databaseConnectionItem=(DatabaseConnectionItem)property.getItem();
      Connection databaseConnection=databaseConnectionItem.getConnection();
      objects.add(databaseConnection);
    }
 else     if (node instanceof DBCatalogRepNode) {
      Catalog catalog=((DBCatalogRepNode)node).getCatalog();
      objects.add(catalog);
    }
 else     if (node instanceof DBSchemaRepNode) {
      Schema schema=((DBSchemaRepNode)node).getSchema();
      objects.add(schema);
    }
 else     if (node instanceof DBTableRepNode) {
      TdTable tdTable=((DBTableRepNode)node).getTdTable();
      objects.add(tdTable);
    }
 else     if (node instanceof DBColumnRepNode) {
      TdColumn tdColumn=((DBColumnRepNode)node).getTdColumn();
      objects.add(tdColumn);
    }
 else     if (node instanceof DFColumnRepNode) {
    }
  }
  if (2 == objects.size()) {
    selectionCompareAction.refreshSelectedObj(objects.get(0),objects.get(1));
    menu.add(selectionCompareAction);
  }
}",0.9784644194756554
138427,"@Override protected boolean doExecute() throws Exception {
  if (indicatorModelMigration == null) {
    indicatorModelMigration=new TopDataqualityMigrationFrom410to420usingGenericVM();
  }
  File rawFile=getWorkspacePath().append(TDQ_DATAPROFILING).toFile();
  if (rawFile.exists()) {
    File migFile=new Path(rawFile.getAbsolutePath()).addFileExtension(MIGRATION_FOLDER_EXT).toFile();
    rawFile.renameTo(migFile);
    migrate(migFile);
    migFile.renameTo(rawFile.getAbsoluteFile());
  }
  return Boolean.TRUE;
}","@Override protected boolean doExecute() throws Exception {
  File rawFile=getWorkspacePath().append(TDQ_DATAPROFILING).toFile();
  if (rawFile.exists()) {
    File migFile=new Path(rawFile.getAbsolutePath()).addFileExtension(MIGRATION_FOLDER_EXT).toFile();
    rawFile.renameTo(migFile);
    migrate(migFile);
    migFile.renameTo(rawFile.getAbsoluteFile());
  }
  return Boolean.TRUE;
}",0.8561946902654868
138428,"/** 
 * DOC yyi 2011-03-14 19460:remove selected element form the tree
 */
private void removeSelectedElements(){
  TreeItem[] selection=tree.getSelection();
  for (  TreeItem treeItem : selection) {
    ModelElementIndicator meIndicator=(ModelElementIndicator)treeItem.getData(MODELELEMENT_INDICATOR_KEY);
    deleteColumnItems(meIndicator.getModelElementRepositoryNode());
    removeItemBranch(treeItem);
  }
  updateBindConnection(masterPage,tree);
  enabledButtons(false);
  tree.setFocus();
}","/** 
 * DOC yyi 2011-03-14 19460:remove selected element form the tree
 */
private void removeSelectedElements(){
  TreeItem[] selection=tree.getSelection();
  for (  TreeItem treeItem : selection) {
    ModelElementIndicator meIndicator=(ModelElementIndicator)treeItem.getData(MODELELEMENT_INDICATOR_KEY);
    deleteColumnItems(meIndicator.getModelElementRepositoryNode());
    deleteModelElementItems(meIndicator);
    removeItemBranch(treeItem);
  }
  updateBindConnection(masterPage,tree);
  setElements(modelElementIndicators);
  enabledButtons(false);
  tree.setFocus();
}",0.9246511627906976
138429,"/** 
 * Remove the selected elements(eg:TdColumn or Indicator) from tree.
 * @param newTree
 */
private void removeSelectedElements(final Tree newTree){
  TreeItem[] selection=newTree.getSelection();
  for (  TreeItem item : selection) {
    ModelElementIndicator meIndicator=(ModelElementIndicator)item.getData(MODELELEMENT_INDICATOR_KEY);
    IndicatorUnit indicatorUnit=(IndicatorUnit)item.getData(INDICATOR_UNIT_KEY);
    if (indicatorUnit != null) {
      deleteIndicatorItems(meIndicator,indicatorUnit);
    }
 else {
      RepositoryNode tdColumn=(RepositoryNode)item.getData(COLUMN_INDICATOR_KEY);
      deleteColumnItems(tdColumn);
    }
    removeItemBranch(item);
  }
}","/** 
 * DOC yyi 2011-03-14 19460:remove selected element form the tree
 */
private void removeSelectedElements(){
  TreeItem[] selection=tree.getSelection();
  for (  TreeItem treeItem : selection) {
    ModelElementIndicator meIndicator=(ModelElementIndicator)treeItem.getData(MODELELEMENT_INDICATOR_KEY);
    deleteColumnItems(meIndicator.getModelElementRepositoryNode());
    removeItemBranch(treeItem);
  }
  updateBindConnection(masterPage,tree);
  enabledButtons(false);
  tree.setFocus();
}",0.4689889549702634
138430,"/** 
 * DOC zshen Comment method ""createButtonSection"".
 * @param topComp create the button with delButton,moveUpButton,moveDownButton
 */
private void createButtonSection(Composite topComp){
  Composite buttonsComp=masterPage.getEditor().getToolkit().createComposite(topComp,SWT.NONE);
  buttonsComp.setLayout(new GridLayout(3,true));
  buttonsComp.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  GridData buttonGridData=new GridData();
  buttonGridData.heightHint=25;
  buttonGridData.horizontalAlignment=GridData.CENTER;
  buttonGridData.verticalAlignment=GridData.FILL;
  buttonGridData.grabExcessHorizontalSpace=true;
  buttonGridData.grabExcessVerticalSpace=true;
  final Button delButton=new Button(buttonsComp,SWT.NULL);
  delButton.setImage(ImageLib.getImage(ImageLib.DELETE_ACTION));
  delButton.setLayoutData(buttonGridData);
  final Button moveUpButton=new Button(buttonsComp,SWT.NULL);
  moveUpButton.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  moveUpButton.setLayoutData(buttonGridData);
  final Button moveDownButton=new Button(buttonsComp,SWT.NULL);
  moveDownButton.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  moveDownButton.setLayoutData(buttonGridData);
  buttons.put(""String_Node_Str"",delButton);
  buttons.put(""String_Node_Str"",moveUpButton);
  buttons.put(""String_Node_Str"",moveDownButton);
  enabledButtons(false);
  moveUpButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      moveElement(setTreeViewer,-1);
    }
  }
);
  moveDownButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      moveElement(setTreeViewer,1);
    }
  }
);
  delButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      TreeItem[] selection=tree.getSelection();
      for (      TreeItem treeItem : selection) {
        ModelElementIndicator meIndicator=(ModelElementIndicator)treeItem.getData(MODELELEMENT_INDICATOR_KEY);
        deleteColumnItems(meIndicator.getModelElementRepositoryNode());
        removeItemBranch(treeItem);
      }
      updateBindConnection(masterPage,tree);
      enabledButtons(false);
      tree.setFocus();
    }
  }
);
}","/** 
 * DOC zshen Comment method ""createButtonSection"".
 * @param topComp create the button with delButton,moveUpButton,moveDownButton
 */
private void createButtonSection(Composite topComp){
  Composite buttonsComp=masterPage.getEditor().getToolkit().createComposite(topComp,SWT.NONE);
  buttonsComp.setLayout(new GridLayout(3,true));
  buttonsComp.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  GridData buttonGridData=new GridData();
  buttonGridData.heightHint=25;
  buttonGridData.horizontalAlignment=GridData.CENTER;
  buttonGridData.verticalAlignment=GridData.FILL;
  buttonGridData.grabExcessHorizontalSpace=true;
  buttonGridData.grabExcessVerticalSpace=true;
  final Button delButton=new Button(buttonsComp,SWT.NULL);
  delButton.setImage(ImageLib.getImage(ImageLib.DELETE_ACTION));
  delButton.setLayoutData(buttonGridData);
  final Button moveUpButton=new Button(buttonsComp,SWT.NULL);
  moveUpButton.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  moveUpButton.setLayoutData(buttonGridData);
  final Button moveDownButton=new Button(buttonsComp,SWT.NULL);
  moveDownButton.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  moveDownButton.setLayoutData(buttonGridData);
  buttons.put(""String_Node_Str"",delButton);
  buttons.put(""String_Node_Str"",moveUpButton);
  buttons.put(""String_Node_Str"",moveDownButton);
  enabledButtons(false);
  moveUpButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      moveElement(setTreeViewer,-1);
    }
  }
);
  moveDownButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      moveElement(setTreeViewer,1);
    }
  }
);
  delButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      removeSelectedElements();
    }
  }
);
}",0.8947623666343356
138431,"/** 
 * Add qiongli handle ColumnSetMultiValueIndicator.
 * @return
 */
protected String getAnalyzedElementName(Indicator ind){
  if (ind.getAnalyzedElement() != null) {
    return dbmsLanguage.quote(ind.getAnalyzedElement().getName());
  }
  StringBuffer name=new StringBuffer(PluginConstant.EMPTY_STRING);
  EObject object=ind.eContainer();
  EList<MetadataColumn> eLs=null;
  if (object != null && object instanceof ColumnSetMultiValueIndicator) {
    eLs=((ColumnSetMultiValueIndicator)object).getAnalyzedColumns();
  }
 else   if (ind instanceof AllMatchIndicator) {
    eLs=((AllMatchIndicator)ind).getAnalyzedColumns();
  }
  if (eLs != null && !eLs.isEmpty()) {
    for (    MetadataColumn mColumn : eLs) {
      name.append(dbmsLanguage.quote(mColumn.getName())).append(""String_Node_Str"");
    }
    if (eLs.size() > 0) {
      return org.apache.commons.lang.StringUtils.removeEnd(name.toString(),""String_Node_Str"");
    }
  }
  return name.toString();
}","/** 
 * Add qiongli handle ColumnSetMultiValueIndicator.
 * @return
 */
protected String getAnalyzedElementName(Indicator ind){
  if (ind.getAnalyzedElement() != null) {
    return dbmsLanguage.quote(ind.getAnalyzedElement().getName());
  }
  StringBuffer name=new StringBuffer(PluginConstant.EMPTY_STRING);
  EObject object=ind.eContainer();
  EList<ModelElement> eLs=null;
  if (object != null && object instanceof ColumnSetMultiValueIndicator) {
    eLs=((ColumnSetMultiValueIndicator)object).getAnalyzedColumns();
  }
 else   if (ind instanceof AllMatchIndicator) {
    eLs=((AllMatchIndicator)ind).getAnalyzedColumns();
  }
  if (eLs != null && !eLs.isEmpty()) {
    for (    ModelElement mColumn : eLs) {
      name.append(dbmsLanguage.quote(mColumn.getName())).append(""String_Node_Str"");
    }
    if (eLs.size() > 0) {
      return org.apache.commons.lang.StringUtils.removeEnd(name.toString(),""String_Node_Str"");
    }
  }
  return name.toString();
}",0.9750260145681582
138432,"/** 
 * create column header for columnSet analysis.
 * @param simpInd
 * @param columnElementList
 */
private List<String> columnHeaderForColumnSet(SimpleStatIndicator simpInd){
  List<String> columnElementList=new ArrayList<String>();
  if (simpInd.getAnalyzedColumns().size() == 0) {
    return columnElementList;
  }
  if (DrillDownEditorInput.judgeMenuType(this.getMenuType(),DrillDownEditorInput.MENU_VALUE_TYPE)) {
    for (    MetadataColumn mColumn : simpInd.getAnalyzedColumns()) {
      columnElementList.add(mColumn.getLabel());
    }
  }
 else {
    boolean isDelimitedFile=false;
    for (    MetadataColumn mColumn : simpInd.getAnalyzedColumns()) {
      if (!(mColumn instanceof TdColumn)) {
        isDelimitedFile=true;
        break;
      }
    }
    if (isDelimitedFile) {
      List<MetadataColumn> columnList=((MetadataTable)ColumnHelper.getColumnOwnerAsMetadataTable(simpInd.getAnalyzedColumns().get(0))).getColumns();
      for (      MetadataColumn mdColumn : columnList) {
        columnElementList.add(mdColumn.getLabel());
      }
    }
 else {
      List<TdColumn> columnList=TableHelper.getColumns(SwitchHelpers.TABLE_SWITCH.doSwitch((simpInd.getAnalyzedColumns().get(0).eContainer())));
      for (      TdColumn tdColumn : columnList) {
        columnElementList.add(tdColumn.getLabel());
      }
    }
  }
  return columnElementList;
}","/** 
 * create column header for columnSet analysis.
 * @param simpInd
 * @param columnElementList
 */
private List<String> columnHeaderForColumnSet(SimpleStatIndicator simpInd){
  List<String> columnElementList=new ArrayList<String>();
  if (simpInd.getAnalyzedColumns().size() == 0) {
    return columnElementList;
  }
  if (DrillDownEditorInput.judgeMenuType(this.getMenuType(),DrillDownEditorInput.MENU_VALUE_TYPE)) {
    for (    ModelElement mColumn : simpInd.getAnalyzedColumns()) {
      columnElementList.add(((MetadataColumn)mColumn).getLabel());
    }
  }
 else {
    boolean isDelimitedFile=false;
    for (    ModelElement mColumn : simpInd.getAnalyzedColumns()) {
      if (!(mColumn instanceof TdColumn)) {
        isDelimitedFile=true;
        break;
      }
    }
    if (isDelimitedFile) {
      List<MetadataColumn> columnList=((MetadataTable)ColumnHelper.getColumnOwnerAsMetadataTable(simpInd.getAnalyzedColumns().get(0))).getColumns();
      for (      MetadataColumn mdColumn : columnList) {
        columnElementList.add(mdColumn.getLabel());
      }
    }
 else {
      List<TdColumn> columnList=TableHelper.getColumns(SwitchHelpers.TABLE_SWITCH.doSwitch((simpInd.getAnalyzedColumns().get(0).eContainer())));
      for (      TdColumn tdColumn : columnList) {
        columnElementList.add(tdColumn.getLabel());
      }
    }
  }
  return columnElementList;
}",0.9709302325581396
138433,"/** 
 * DOC bZhou Comment method ""getItemPath"". This method is to get the entire path of a item. e.g. getItemPath() = Project/TypedPath/StatePath/xxxx.property.
 * @param property
 * @return
 */
public static IPath getItemPath(Property property){
  Item item=property.getItem();
  if (property.eIsProxy()) {
    property=(Property)EObjectHelper.resolveObject(property);
  }
  if (item instanceof TDQItem) {
    TDQItem tdqItem=(TDQItem)item;
    return ResourceManager.getRootProject().getFullPath().append(getItemTypedPath(property)).append(getItemStatePath(property)).append(tdqItem.getFilename());
  }
 else {
    IPath itemFilePath=new Path(property.eResource().getURI().lastSegment()).removeFileExtension().addFileExtension(FactoriesUtil.ITEM_EXTENSION);
    return ResourceManager.getRootProject().getFullPath().append(getItemTypedPath(property)).append(getItemStatePath(property)).append(itemFilePath);
  }
}","/** 
 * DOC bZhou Comment method ""getItemPath"". This method is to get the entire path of a item. e.g. getItemPath() = Project/TypedPath/StatePath/xxxx.property.
 * @param property
 * @return
 */
public static IPath getItemPath(Property property){
  URI uri=getURI(property);
  Item item=property.getItem();
  EElementEName elementEName=EElementEName.getElementEName(item);
  if (elementEName != null) {
    IPath path=new Path(uri.lastSegment());
    path=path.removeFileExtension().addFileExtension(elementEName.getFileExt());
    return ResourceManager.getRootProject().getFullPath().append(getItemTypedPath(property)).append(getItemStatePath(property)).append(path);
  }
  return Path.EMPTY;
}",0.3923029174425822
138434,"/** 
 * DOC bZhou Comment method ""getItemStatePath"". This method is to get the relative path to the typed path of a item. e.g. Project/TypedPath/StatePath/xxxx.property
 * @param property
 * @return
 */
public static IPath getItemStatePath(Property property){
  if (property.eIsProxy()) {
    property=(Property)EObjectHelper.resolveObject(property);
  }
  Item item=property.getItem();
  URI propURI;
  if (property.eIsProxy()) {
    propURI=((InternalEObject)property).eProxyURI();
  }
 else {
    propURI=property.eResource().getURI();
  }
  String statePathStr=null;
  if (item.getState() != null) {
    statePathStr=item.getState().getPath();
  }
  if (StringUtils.isBlank(statePathStr) && propURI.isPlatformResource()) {
    IPath propPath=new Path(propURI.toPlatformString(true)).removeLastSegments(1);
    IPath typedPath=ResourceManager.getRootProject().getFullPath().append(getItemTypedPath(property));
    return propPath.makeRelativeTo(typedPath);
  }
  return statePathStr != null ? new Path(statePathStr) : null;
}","/** 
 * DOC bZhou Comment method ""getItemStatePath"". This method is to get the relative path to the typed path of a item. e.g. Project/TypedPath/StatePath/xxxx.property
 * @param property
 * @return
 */
public static IPath getItemStatePath(Property property){
  Item item=property.getItem();
  String statePathStr=null;
  if (item.getState() != null) {
    statePathStr=item.getState().getPath();
  }
 else {
    URI propURI=getURI(property);
    if (StringUtils.isBlank(statePathStr) && propURI.isPlatformResource()) {
      IPath propPath=new Path(propURI.toPlatformString(true)).removeLastSegments(1);
      IPath typedPath=ResourceManager.getRootProject().getFullPath().append(getItemTypedPath(property));
      return propPath.makeRelativeTo(typedPath);
    }
  }
  return statePathStr != null ? new Path(statePathStr) : Path.EMPTY;
}",0.3706480985538297
138435,"/** 
 * DOC bZhou Comment method ""getItemPath"". This method is to get the entire path of a item. e.g. getItemPath() = Project/TypedPath/StatePath/xxxx.property.
 * @param property
 * @return
 */
public static IPath getItemPath(Property property){
  URI uri=getURI(property);
  Item item=property.getItem();
  EElementEName elementEName=EElementEName.getElementEName(item);
  if (elementEName != null) {
    IPath path=new Path(uri.lastSegment());
    path=path.removeFileExtension().addFileExtension(elementEName.getFileExt());
    return ResourceManager.getRootProject().getFullPath().append(getItemTypedPath(property)).append(getItemStatePath(property)).append(path);
  }
  return Path.EMPTY;
}","/** 
 * DOC bZhou Comment method ""getItemPath"". This method is to get the entire path of a item. e.g. getItemPath() = Project/TypedPath/StatePath/xxxx.property.
 * @param property
 * @return
 */
public static IPath getItemPath(Property property){
  Item item=property.getItem();
  IPath path=null;
  String fileName=null;
  EElementEName elementEName=EElementEName.getElementEName(item);
  if (elementEName != null) {
    URI uri=getURI(property);
    if (uri.isFile()) {
      path=new Path(uri.toFileString());
    }
 else     if (uri.isPlatform()) {
      path=new Path(uri.toPlatformString(false));
    }
 else {
      path=new Path(uri.lastSegment());
    }
    path=new Path(path.lastSegment());
    fileName=path.removeFileExtension().addFileExtension(elementEName.getFileExt()).toString();
  }
 else   if (item instanceof TDQItem) {
    TDQItem dqItem=(TDQItem)item;
    if (!StringUtils.isBlank(dqItem.getFilename())) {
      fileName=dqItem.getFilename();
    }
  }
  if (fileName != null) {
    path=ResourceManager.getRootProject().getFullPath().append(getItemTypedPath(property)).append(getItemStatePath(property)).append(fileName);
  }
  return path;
}",0.5316863587540279
138436,"/** 
 * DOC bZhou Comment method ""checkExisted"".
 * @param record
 */
private void checkExisted(ItemRecord record){
  Property property=record.getProperty();
  if (property != null) {
    IPath itemPath=PropertyHelper.getItemPath(property);
    IFile itemFile=ResourcesPlugin.getWorkspace().getRoot().getFile(itemPath);
    if (itemFile.exists()) {
      record.addError(""String_Node_Str"" + record.getName() + ""String_Node_Str""+ itemFile.getFullPath().toString());
    }
  }
}","/** 
 * DOC bZhou Comment method ""checkExisted"".
 * @param record
 */
private void checkExisted(ItemRecord record){
  Property property=record.getProperty();
  if (property != null) {
    IPath itemPath=PropertyHelper.getItemPath(property);
    if (itemPath != null) {
      IFile itemFile=ResourcesPlugin.getWorkspace().getRoot().getFile(itemPath);
      if (itemFile.exists()) {
        record.addError(""String_Node_Str"" + record.getName() + ""String_Node_Str""+ itemFile.getFullPath().toString());
      }
    }
 else {
      record.addError(""String_Node_Str"" + record.getName() + ""String_Node_Str"");
    }
  }
}",0.8741965105601469
138437,"@Override protected String createSqlStatement(Analysis analysis){
  if (isDelimitedFile) {
    return ""String_Node_Str"";
  }
  this.cachedAnalysis=analysis;
  StringBuilder sql=new StringBuilder(""String_Node_Str"");
  EList<Indicator> indicators=analysis.getResults().getIndicators();
  EList<MetadataColumn> analysedElements=null;
  for (  Indicator indicator : indicators) {
    if (ColumnsetPackage.eINSTANCE.getColumnSetMultiValueIndicator().isSuperTypeOf(indicator.eClass())) {
      ColumnSetMultiValueIndicator colSetMultValIndicator=(ColumnSetMultiValueIndicator)indicator;
      if (analysedElements == null) {
        analysedElements=colSetMultValIndicator.getAnalyzedColumns();
      }
 else {
        analysedElements.addAll(colSetMultValIndicator.getAnalyzedColumns());
      }
    }
  }
  if (analysedElements == null || analysedElements.isEmpty()) {
    this.errorMessage=Messages.getString(""String_Node_Str"",analysis.getName());
    return null;
  }
  Set<ColumnSet> fromPart=new HashSet<ColumnSet>();
  final Iterator<MetadataColumn> iterator=analysedElements.iterator();
  while (iterator.hasNext()) {
    ModelElement modelElement=iterator.next();
    TdColumn col=SwitchHelpers.COLUMN_SWITCH.doSwitch(modelElement);
    if (col == null) {
      this.errorMessage=Messages.getString(""String_Node_Str"",modelElement);
      return null;
    }
    Classifier owner=col.getOwner();
    if (owner == null) {
      this.errorMessage=Messages.getString(""String_Node_Str"",col.getName());
    }
    ColumnSet colSet=SwitchHelpers.COLUMN_SET_SWITCH.doSwitch(owner);
    if (colSet == null) {
      this.errorMessage=Messages.getString(""String_Node_Str"",col.getName(),colSet);
      return null;
    }
    if (!analysis.getParameters().isStoreData()) {
      sql.append(this.quote(col.getName()));
      if (iterator.hasNext()) {
        sql.append(',');
      }
    }
    fromPart.add(colSet);
  }
  if (fromPart.size() != 1) {
    log.error(""String_Node_Str"" + fromPart.size() + ""String_Node_Str"");
    this.errorMessage=""String_Node_Str"";
    return null;
  }
  if (analysis.getParameters().isStoreData()) {
    List<TdColumn> columnList=TableHelper.getColumns(SwitchHelpers.TABLE_SWITCH.doSwitch(analysedElements.get(0).eContainer()));
    Iterator<TdColumn> iter=columnList.iterator();
    while (iter.hasNext()) {
      TdColumn column=iter.next();
      sql.append(this.quote(column.getName()));
      if (iter.hasNext()) {
        sql.append(',');
      }
    }
  }
  sql.append(dbms().from());
  ModelElement element=fromPart.iterator().next();
  Package parentRelation=PackageHelper.getParentPackage((MetadataTable)fromPart.iterator().next());
  if (parentRelation instanceof Schema) {
    sql.append(dbms().toQualifiedName(null,parentRelation.getName(),element.getName()));
  }
 else   if (parentRelation instanceof Catalog) {
    String ownerUser=null;
    if (ConnectionUtils.isSybaseeDBProducts(dbms().getDbmsName())) {
      ownerUser=ColumnSetHelper.getTableOwner((ModelElement)element);
    }
    sql.append(dbms().toQualifiedName(parentRelation.getName(),ownerUser,element.getName()));
  }
  ModelElementAnalysisHandler handler=new ModelElementAnalysisHandler();
  handler.setAnalysis(analysis);
  String stringDataFilter=handler.getStringDataFilter();
  sql.append(GenericSQLHandler.WHERE_CLAUSE);
  String sqlStatement=sql.toString();
  sqlStatement=dbms().addWhereToStatement(sqlStatement,stringDataFilter);
  return sqlStatement;
}","@Override protected String createSqlStatement(Analysis analysis){
  if (isDelimitedFile) {
    return ""String_Node_Str"";
  }
  this.cachedAnalysis=analysis;
  StringBuilder sql=new StringBuilder(""String_Node_Str"");
  EList<Indicator> indicators=analysis.getResults().getIndicators();
  EList<ModelElement> analysedElements=null;
  for (  Indicator indicator : indicators) {
    if (ColumnsetPackage.eINSTANCE.getColumnSetMultiValueIndicator().isSuperTypeOf(indicator.eClass())) {
      ColumnSetMultiValueIndicator colSetMultValIndicator=(ColumnSetMultiValueIndicator)indicator;
      if (analysedElements == null) {
        analysedElements=colSetMultValIndicator.getAnalyzedColumns();
      }
 else {
        analysedElements.addAll(colSetMultValIndicator.getAnalyzedColumns());
      }
    }
  }
  if (analysedElements == null || analysedElements.isEmpty()) {
    this.errorMessage=Messages.getString(""String_Node_Str"",analysis.getName());
    return null;
  }
  Set<ColumnSet> fromPart=new HashSet<ColumnSet>();
  final Iterator<ModelElement> iterator=analysedElements.iterator();
  while (iterator.hasNext()) {
    ModelElement modelElement=iterator.next();
    TdColumn col=SwitchHelpers.COLUMN_SWITCH.doSwitch(modelElement);
    if (col == null) {
      this.errorMessage=Messages.getString(""String_Node_Str"",modelElement);
      return null;
    }
    Classifier owner=col.getOwner();
    if (owner == null) {
      this.errorMessage=Messages.getString(""String_Node_Str"",col.getName());
    }
    ColumnSet colSet=SwitchHelpers.COLUMN_SET_SWITCH.doSwitch(owner);
    if (colSet == null) {
      this.errorMessage=Messages.getString(""String_Node_Str"",col.getName(),colSet);
      return null;
    }
    if (!analysis.getParameters().isStoreData()) {
      sql.append(this.quote(col.getName()));
      if (iterator.hasNext()) {
        sql.append(',');
      }
    }
    fromPart.add(colSet);
  }
  if (fromPart.size() != 1) {
    log.error(""String_Node_Str"" + fromPart.size() + ""String_Node_Str"");
    this.errorMessage=""String_Node_Str"";
    return null;
  }
  if (analysis.getParameters().isStoreData()) {
    List<TdColumn> columnList=TableHelper.getColumns(SwitchHelpers.TABLE_SWITCH.doSwitch(analysedElements.get(0).eContainer()));
    Iterator<TdColumn> iter=columnList.iterator();
    while (iter.hasNext()) {
      TdColumn column=iter.next();
      sql.append(this.quote(column.getName()));
      if (iter.hasNext()) {
        sql.append(',');
      }
    }
  }
  sql.append(dbms().from());
  ModelElement element=fromPart.iterator().next();
  Package parentRelation=PackageHelper.getParentPackage((MetadataTable)fromPart.iterator().next());
  if (parentRelation instanceof Schema) {
    sql.append(dbms().toQualifiedName(null,parentRelation.getName(),element.getName()));
  }
 else   if (parentRelation instanceof Catalog) {
    String ownerUser=null;
    if (ConnectionUtils.isSybaseeDBProducts(dbms().getDbmsName())) {
      ownerUser=ColumnSetHelper.getTableOwner((ModelElement)element);
    }
    sql.append(dbms().toQualifiedName(parentRelation.getName(),ownerUser,element.getName()));
  }
  ModelElementAnalysisHandler handler=new ModelElementAnalysisHandler();
  handler.setAnalysis(analysis);
  String stringDataFilter=handler.getStringDataFilter();
  sql.append(GenericSQLHandler.WHERE_CLAUSE);
  String sqlStatement=sql.toString();
  sqlStatement=dbms().addWhereToStatement(sqlStatement,stringDataFilter);
  return sqlStatement;
}",0.9930615784908932
138438,"/** 
 * Method ""addColumnToAnalyze"".
 * @param column
 * @return
 */
public boolean addIndicator(List<MetadataColumn> columns,Indicator indicator){
  for (  ModelElement tdColumn : columns) {
    if (!analysis.getContext().getAnalysedElements().contains(tdColumn)) {
      analysis.getContext().getAnalysedElements().add(tdColumn);
    }
  }
  analysis.getResults().getIndicators().add(indicator);
  initializeIndicator(indicator);
  DataManager connection=analysis.getContext().getConnection();
  if (connection == null) {
    for (    ModelElement element : columns) {
      TdColumn tdColumn=SwitchHelpers.COLUMN_SWITCH.doSwitch(element);
      log.error(""String_Node_Str"");
      connection=ConnectionHelper.getTdDataProvider(tdColumn);
      analysis.getContext().setConnection(connection);
    }
  }
  TypedReturnCode<Dependency> rc=DependenciesHandler.getInstance().setDependencyOn(analysis,connection);
  if (rc.isOk()) {
  }
  return true;
}","/** 
 * Method ""addColumnToAnalyze"".
 * @param column
 * @return
 */
public boolean addIndicator(List<ModelElement> columns,Indicator indicator){
  for (  ModelElement tdColumn : columns) {
    if (!analysis.getContext().getAnalysedElements().contains(tdColumn)) {
      analysis.getContext().getAnalysedElements().add(tdColumn);
    }
  }
  analysis.getResults().getIndicators().add(indicator);
  initializeIndicator(indicator);
  DataManager connection=analysis.getContext().getConnection();
  if (connection == null) {
    for (    ModelElement element : columns) {
      TdColumn tdColumn=SwitchHelpers.COLUMN_SWITCH.doSwitch(element);
      log.error(""String_Node_Str"");
      connection=ConnectionHelper.getTdDataProvider(tdColumn);
      analysis.getContext().setConnection(connection);
    }
  }
  TypedReturnCode<Dependency> rc=DependenciesHandler.getInstance().setDependencyOn(analysis,connection);
  if (rc.isOk()) {
  }
  return true;
}",0.987355110642782
138439,"/** 
 * DOC scorreia Comment method ""getTableName"".
 * @param analyzedColumns
 * @return the quoted table name
 */
private String getTableName(final EList<MetadataColumn> analyzedColumns){
  EObject owner=analyzedColumns.get(0).eContainer();
  ColumnSet set=SwitchHelpers.COLUMN_SET_SWITCH.doSwitch(owner);
  MetadataTable mdColumn=SwitchHelpers.METADATA_TABLE_SWITCH.doSwitch(owner);
  String tableName=""String_Node_Str"";
  ModelElement columnSetOwner=null;
  if (null == set && mdColumn != null) {
    tableName=mdColumn.getName();
    columnSetOwner=mdColumn;
  }
 else   if (null != set) {
    tableName=set.getName();
    columnSetOwner=set;
  }
  Package pack=ColumnSetHelper.getParentCatalogOrSchema(columnSetOwner);
  if (pack instanceof Schema && ColumnSetHelper.getParentCatalogOrSchema(pack) instanceof Catalog) {
    pack=ColumnSetHelper.getParentCatalogOrSchema(pack);
  }
  if (pack == null) {
    log.error(""String_Node_Str"" + tableName);
  }
 else {
    this.catalogOrSchema=pack.getName();
  }
  String schemaName=getQuotedSchemaName(columnSetOwner);
  String catalogName=getQuotedCatalogName(columnSetOwner);
  if (catalogName == null && schemaName != null) {
    final Schema parentSchema=SchemaHelper.getParentSchema(columnSetOwner);
    final Catalog parentCatalog=CatalogHelper.getParentCatalog(parentSchema);
    catalogName=parentCatalog != null ? parentCatalog.getName() : null;
  }
  if (ConnectionUtils.isSybaseeDBProducts(dbms().getDbmsName())) {
    schemaName=ColumnSetHelper.getTableOwner(columnSetOwner);
  }
  return dbms().toQualifiedName(catalogName,schemaName,tableName);
}","/** 
 * DOC scorreia Comment method ""getTableName"".
 * @param analyzedColumns
 * @return the quoted table name
 */
private String getTableName(final EList<ModelElement> analyzedColumns){
  EObject owner=analyzedColumns.get(0).eContainer();
  ColumnSet set=SwitchHelpers.COLUMN_SET_SWITCH.doSwitch(owner);
  MetadataTable mdColumn=SwitchHelpers.METADATA_TABLE_SWITCH.doSwitch(owner);
  String tableName=""String_Node_Str"";
  ModelElement columnSetOwner=null;
  if (null == set && mdColumn != null) {
    tableName=mdColumn.getName();
    columnSetOwner=mdColumn;
  }
 else   if (null != set) {
    tableName=set.getName();
    columnSetOwner=set;
  }
  Package pack=ColumnSetHelper.getParentCatalogOrSchema(columnSetOwner);
  if (pack instanceof Schema && ColumnSetHelper.getParentCatalogOrSchema(pack) instanceof Catalog) {
    pack=ColumnSetHelper.getParentCatalogOrSchema(pack);
  }
  if (pack == null) {
    log.error(""String_Node_Str"" + tableName);
  }
 else {
    this.catalogOrSchema=pack.getName();
  }
  String schemaName=getQuotedSchemaName(columnSetOwner);
  String catalogName=getQuotedCatalogName(columnSetOwner);
  if (catalogName == null && schemaName != null) {
    final Schema parentSchema=SchemaHelper.getParentSchema(columnSetOwner);
    final Catalog parentCatalog=CatalogHelper.getParentCatalog(parentSchema);
    catalogName=parentCatalog != null ? parentCatalog.getName() : null;
  }
  if (ConnectionUtils.isSybaseeDBProducts(dbms().getDbmsName())) {
    schemaName=ColumnSetHelper.getTableOwner(columnSetOwner);
  }
  return dbms().toQualifiedName(catalogName,schemaName,tableName);
}",0.9925373134328358
138440,"/** 
 * DOC scorreia Comment method ""instantiateQuery"".
 * @param indicator
 */
private void instantiateQuery(Indicator indicator){
  if (ColumnsetPackage.eINSTANCE.getColumnSetMultiValueIndicator().isSuperTypeOf(indicator.eClass())) {
    ColumnSetMultiValueIndicator colSetMultValIndicator=(ColumnSetMultiValueIndicator)indicator;
    final EList<MetadataColumn> analyzedColumns=colSetMultValIndicator.getAnalyzedColumns();
    final EList<String> numericFunctions=initializeNumericFunctions(colSetMultValIndicator);
    final EList<String> dateFunctions=initializeDateFunctions(colSetMultValIndicator);
    List<String> nominalColumns=new ArrayList<String>();
    for (    ModelElement column : colSetMultValIndicator.getNominalColumns()) {
      nominalColumns.add(getQuotedColumnName(column));
    }
    List<String> computedColumns=new ArrayList<String>();
    for (    ModelElement column : colSetMultValIndicator.getNumericColumns()) {
      for (      String f : numericFunctions) {
        computedColumns.add(replaceVariablesLow(f,getQuotedColumnName(column)));
      }
    }
    for (    ModelElement column : colSetMultValIndicator.getDateColumns()) {
      for (      String f : dateFunctions) {
        computedColumns.add(replaceVariablesLow(f,getQuotedColumnName(column)));
      }
    }
    computedColumns.add(colSetMultValIndicator.getCountAll());
    String selectItems=createSelect(nominalColumns,computedColumns);
    final Expression sqlGenericExpression=dbms().getSqlExpression(indicator.getIndicatorDefinition());
    String grpByClause=createGroupBy(nominalColumns);
    String tableName=getTableName(analyzedColumns);
    String sqlExpr=dbms().fillGenericQueryWithColumnTableAndAlias(sqlGenericExpression.getBody(),selectItems,tableName,grpByClause);
    String stringDataFilter=AnalysisHelper.getStringDataFilter(cachedAnalysis);
    if (stringDataFilter == null) {
      stringDataFilter=""String_Node_Str"";
    }
    sqlExpr=dbms().addWhereToStatement(sqlExpr,stringDataFilter);
    indicator.setInstantiatedExpression(BooleanExpressionHelper.createTdExpression(sqlGenericExpression.getLanguage(),sqlExpr));
  }
}","/** 
 * DOC scorreia Comment method ""instantiateQuery"".
 * @param indicator
 */
private void instantiateQuery(Indicator indicator){
  if (ColumnsetPackage.eINSTANCE.getColumnSetMultiValueIndicator().isSuperTypeOf(indicator.eClass())) {
    ColumnSetMultiValueIndicator colSetMultValIndicator=(ColumnSetMultiValueIndicator)indicator;
    final EList<ModelElement> analyzedColumns=colSetMultValIndicator.getAnalyzedColumns();
    final EList<String> numericFunctions=initializeNumericFunctions(colSetMultValIndicator);
    final EList<String> dateFunctions=initializeDateFunctions(colSetMultValIndicator);
    List<String> nominalColumns=new ArrayList<String>();
    for (    ModelElement column : colSetMultValIndicator.getNominalColumns()) {
      nominalColumns.add(getQuotedColumnName(column));
    }
    List<String> computedColumns=new ArrayList<String>();
    for (    ModelElement column : colSetMultValIndicator.getNumericColumns()) {
      for (      String f : numericFunctions) {
        computedColumns.add(replaceVariablesLow(f,getQuotedColumnName(column)));
      }
    }
    for (    ModelElement column : colSetMultValIndicator.getDateColumns()) {
      for (      String f : dateFunctions) {
        computedColumns.add(replaceVariablesLow(f,getQuotedColumnName(column)));
      }
    }
    computedColumns.add(colSetMultValIndicator.getCountAll());
    String selectItems=createSelect(nominalColumns,computedColumns);
    final Expression sqlGenericExpression=dbms().getSqlExpression(indicator.getIndicatorDefinition());
    String grpByClause=createGroupBy(nominalColumns);
    String tableName=getTableName(analyzedColumns);
    String sqlExpr=dbms().fillGenericQueryWithColumnTableAndAlias(sqlGenericExpression.getBody(),selectItems,tableName,grpByClause);
    String stringDataFilter=AnalysisHelper.getStringDataFilter(cachedAnalysis);
    if (stringDataFilter == null) {
      stringDataFilter=""String_Node_Str"";
    }
    sqlExpr=dbms().addWhereToStatement(sqlExpr,stringDataFilter);
    indicator.setInstantiatedExpression(BooleanExpressionHelper.createTdExpression(sqlGenericExpression.getLanguage(),sqlExpr));
  }
}",0.9943977591036416
138441,"public String getQueryStirng(MetadataColumn column,Analysis ana,EList<MetadataColumn> nominalList,String columnName,String columnValue){
  setAnalysis(ana);
  String queryString=SELECT_ALL_FROM + getFullyQualifiedTableName(column);
  int col=columnName.indexOf(""String_Node_Str"");
  int val=columnValue.indexOf(""String_Node_Str"");
  for (  ModelElement nominal : nominalList) {
    final TdColumn tdColumn=(TdColumn)nominal;
    if (col > 0 && val > 0) {
      String[] name=columnName.split(""String_Node_Str"");
      String[] value=columnValue.split(""String_Node_Str"");
      for (int i=0; i < name.length; i++) {
        String where=dbmsLanguage.and();
        if (i == 0) {
          where=dbmsLanguage.where();
        }
        queryString=buildWhereClause(queryString,tdColumn,name[i],value[i],where);
      }
    }
 else {
      queryString=buildWhereClause(queryString,tdColumn,columnName.trim(),columnValue,dbmsLanguage.where());
    }
  }
  return queryString;
}","public String getQueryStirng(ModelElement column,Analysis ana,EList<ModelElement> nominalList,String columnName,String columnValue){
  setAnalysis(ana);
  String queryString=SELECT_ALL_FROM + getFullyQualifiedTableName(column);
  int col=columnName.indexOf(""String_Node_Str"");
  int val=columnValue.indexOf(""String_Node_Str"");
  for (  ModelElement nominal : nominalList) {
    final TdColumn tdColumn=(TdColumn)nominal;
    if (col > 0 && val > 0) {
      String[] name=columnName.split(""String_Node_Str"");
      String[] value=columnValue.split(""String_Node_Str"");
      for (int i=0; i < name.length; i++) {
        String where=dbmsLanguage.and();
        if (i == 0) {
          where=dbmsLanguage.where();
        }
        queryString=buildWhereClause(queryString,tdColumn,name[i],value[i],where);
      }
    }
 else {
      queryString=buildWhereClause(queryString,tdColumn,columnName.trim(),columnValue,dbmsLanguage.where());
    }
  }
  return queryString;
}",0.9752832131822864
138442,"protected Collection<Analysis> searchAllAnalysis(IFolder folder) throws ClassNotFoundException {
  Collection<Analysis> analyses=new ArrayList<Analysis>();
  try {
    for (    IResource resource : folder.members()) {
      if (resource.getType() == IResource.FOLDER) {
        if (!resource.getName().startsWith(""String_Node_Str"")) {
          analyses.addAll(searchAllAnalysis(folder.getFolder(resource.getName())));
        }
        continue;
      }
      IFile file=(IFile)resource;
      if (null != file.getFileExtension() && file.getFileExtension().equals(FactoriesUtil.ANA)) {
        URI uri=URI.createPlatformResourceURI(file.getFullPath().toString(),false);
        Resource eResource=null;
        try {
          eResource=EMFSharedResources.getInstance().getResource(uri,true);
        }
 catch (        Exception e) {
        }
        if (eResource.getContents().size() > 0) {
          analyses.add((Analysis)eResource.getContents().get(0));
        }
 else {
          log.error(""String_Node_Str"" + eResource);
        }
      }
    }
  }
 catch (  Exception e) {
    log.error(e,e);
  }
  return analyses;
}","protected Collection<Analysis> searchAllAnalysis(IFolder folder) throws ClassNotFoundException {
  Collection<Analysis> analyses=new ArrayList<Analysis>();
  try {
    for (    IResource resource : folder.members()) {
      if (resource.getType() == IResource.FOLDER) {
        if (!resource.getName().startsWith(""String_Node_Str"")) {
          analyses.addAll(searchAllAnalysis(folder.getFolder(resource.getName())));
        }
        continue;
      }
      IFile file=(IFile)resource;
      if (null != file.getFileExtension() && file.getFileExtension().equals(FactoriesUtil.ANA)) {
        URI uri=URI.createPlatformResourceURI(file.getFullPath().toString(),false);
        Resource eResource=null;
        try {
          eResource=EMFSharedResources.getInstance().getResource(uri,true);
        }
 catch (        Exception e) {
          eResource=EMFSharedResources.getInstance().getResource(uri,true);
        }
        if (eResource.getContents().size() > 0) {
          analyses.add((Analysis)eResource.getContents().get(0));
        }
 else {
          log.error(""String_Node_Str"" + eResource);
        }
      }
    }
  }
 catch (  Exception e) {
    log.error(e,e);
  }
  return analyses;
}",0.967409948542024
138443,"/** 
 * Method ""createKey"" creates a key with the concatenation of the values of the first n columns of the given list.
 * @param nominalColumns
 * @param n
 * @return a key
 */
private static String createKey(EList<MetadataColumn> nominalColumns,int n){
  StringBuilder builder=new StringBuilder();
  for (int i=0; i < n; i++) {
    builder.append(nominalColumns.get(i).getName()).append(""String_Node_Str"");
  }
  return builder.toString();
}","/** 
 * Method ""createKey"" creates a key with the concatenation of the values of the first n columns of the given list.
 * @param nominalColumns
 * @param n
 * @return a key
 */
private static String createKey(EList<ModelElement> nominalColumns,int n){
  StringBuilder builder=new StringBuilder();
  for (int i=0; i < n; i++) {
    builder.append(nominalColumns.get(i).getName()).append(""String_Node_Str"");
  }
  return builder.toString();
}",0.9728506787330315
138444,"/** 
 * Method ""fillDataset"" fills in the data sets.
 * @param nominalColumns the nominal columns
 * @param listRows the rows (=result set)
 * @param firstNumericColumnIdx the index of the first numeric column
 * @return a map [key -> aggregated values] where identifies a level of aggregation
 */
private static Map<String,ValueAggregator> fillDataset(final EList<MetadataColumn> nominalColumns,final List<Object[]> listRows,final int firstNumericColumnIdx){
  Map<String,ValueAggregator> valueAggregators=new HashMap<String,ValueAggregator>();
  int xPos=firstNumericColumnIdx;
  int yPos=firstNumericColumnIdx + 1;
  int zPos=firstNumericColumnIdx + 2;
  for (int i=nominalColumns.size(); i > 0; i--) {
    String key=createKey(nominalColumns,i);
    for (    Object[] row : listRows) {
      final Object xobj=row[xPos];
      final Double xValue=xobj != null ? Double.valueOf(String.valueOf(xobj)) : null;
      final Object yobj=row[yPos];
      final Double yValue=yobj != null ? Double.valueOf(String.valueOf(yobj)) : null;
      final Object zobj=row[zPos];
      final Double zValue=zobj != null ? Double.valueOf(String.valueOf(zobj)) : null;
      ValueAggregator valueAggregator=valueAggregators.get(key);
      if (valueAggregator == null) {
        valueAggregator=new ValueAggregator();
        valueAggregators.put(key,valueAggregator);
      }
      MultipleKey multipleKey=new MultipleKey(row,i);
      valueAggregator.addValue(multipleKey,new Double[]{xValue,yValue,zValue});
    }
  }
  return valueAggregators;
}","/** 
 * Method ""fillDataset"" fills in the data sets.
 * @param nominalColumns the nominal columns
 * @param listRows the rows (=result set)
 * @param firstNumericColumnIdx the index of the first numeric column
 * @return a map [key -> aggregated values] where identifies a level of aggregation
 */
private static Map<String,ValueAggregator> fillDataset(final EList<ModelElement> nominalColumns,final List<Object[]> listRows,final int firstNumericColumnIdx){
  Map<String,ValueAggregator> valueAggregators=new HashMap<String,ValueAggregator>();
  int xPos=firstNumericColumnIdx;
  int yPos=firstNumericColumnIdx + 1;
  int zPos=firstNumericColumnIdx + 2;
  for (int i=nominalColumns.size(); i > 0; i--) {
    String key=createKey(nominalColumns,i);
    for (    Object[] row : listRows) {
      final Object xobj=row[xPos];
      final Double xValue=xobj != null ? Double.valueOf(String.valueOf(xobj)) : null;
      final Object yobj=row[yPos];
      final Double yValue=yobj != null ? Double.valueOf(String.valueOf(yobj)) : null;
      final Object zobj=row[zPos];
      final Double zValue=zobj != null ? Double.valueOf(String.valueOf(zobj)) : null;
      ValueAggregator valueAggregator=valueAggregators.get(key);
      if (valueAggregator == null) {
        valueAggregator=new ValueAggregator();
        valueAggregators.put(key,valueAggregator);
      }
      MultipleKey multipleKey=new MultipleKey(row,i);
      valueAggregator.addValue(multipleKey,new Double[]{xValue,yValue,zValue});
    }
  }
  return valueAggregators;
}",0.9928198433420364
138445,"/** 
 */
private static Map<String,DateValueAggregate> fillGanttDataset(final EList<MetadataColumn> nominalColumns,final List<Object[]> listRows,final int firstDateColumnIdx){
  Map<String,DateValueAggregate> valueAggregators=new TreeMap<String,DateValueAggregate>();
  int minPos=firstDateColumnIdx;
  int maxPos=firstDateColumnIdx + 1;
  for (int i=nominalColumns.size(); i > 0; i--) {
    String key=createKey(nominalColumns,i);
    for (    Object[] row : listRows) {
      final Object minObj=row[minPos];
      final Date minDate=minObj != null ? (Date)minObj : null;
      final Object maxobj=row[maxPos];
      final Date maxDate=maxobj != null ? (Date)maxobj : null;
      DateValueAggregate valueAggregator=valueAggregators.get(key);
      if (valueAggregator == null) {
        valueAggregator=new DateValueAggregate();
        valueAggregators.put(key,valueAggregator);
      }
      MultipleKey multipleKey=new MultipleKey(row,i);
      valueAggregator.addValue(multipleKey,new Date[]{minDate,maxDate});
    }
  }
  return valueAggregators;
}","/** 
 */
private static Map<String,DateValueAggregate> fillGanttDataset(final EList<ModelElement> nominalColumns,final List<Object[]> listRows,final int firstDateColumnIdx){
  Map<String,DateValueAggregate> valueAggregators=new TreeMap<String,DateValueAggregate>();
  int minPos=firstDateColumnIdx;
  int maxPos=firstDateColumnIdx + 1;
  for (int i=nominalColumns.size(); i > 0; i--) {
    String key=createKey(nominalColumns,i);
    for (    Object[] row : listRows) {
      final Object minObj=row[minPos];
      final Date minDate=minObj != null ? (Date)minObj : null;
      final Object maxobj=row[maxPos];
      final Date maxDate=maxobj != null ? (Date)maxobj : null;
      DateValueAggregate valueAggregator=valueAggregators.get(key);
      if (valueAggregator == null) {
        valueAggregator=new DateValueAggregate();
        valueAggregators.put(key,valueAggregator);
      }
      MultipleKey multipleKey=new MultipleKey(row,i);
      valueAggregator.addValue(multipleKey,new Date[]{minDate,maxDate});
    }
  }
  return valueAggregators;
}",0.9895635673624288
138446,"public void createPreviewCharts(final ScrolledForm form,final Composite composite,final boolean isCreate){
  List<Composite> previewChartList=new ArrayList<Composite>();
  if (ColumnsetPackage.eINSTANCE.getWeakCorrelationIndicator() == columnSetMultiIndicator.eClass()) {
    GraphBuilder gBuilder=new GraphBuilder();
    gBuilder.setTotalWeight(columnSetMultiIndicator.getCount());
    List<Object[]> listRows=columnSetMultiIndicator.getListRows();
    if (listRows != null) {
      JungGraphGenerator generator=new JungGraphGenerator(gBuilder,listRows);
      generator.generate(composite,false,true);
    }
  }
 else {
    List<MetadataColumn> numericOrDateList=new ArrayList<MetadataColumn>();
    if (ColumnsetPackage.eINSTANCE.getCountAvgNullIndicator() == columnSetMultiIndicator.eClass()) {
      numericOrDateList=columnSetMultiIndicator.getNumericColumns();
    }
    if (ColumnsetPackage.eINSTANCE.getMinMaxDateIndicator() == columnSetMultiIndicator.eClass()) {
      numericOrDateList=columnSetMultiIndicator.getDateColumns();
    }
    for (    MetadataColumn column : numericOrDateList) {
      final MetadataColumn tdColumn=(MetadataColumn)column;
      ExpandableComposite exComp=toolkit.createExpandableComposite(composite,ExpandableComposite.TREE_NODE | ExpandableComposite.CLIENT_INDENT);
      exComp.setText(DefaultMessagesImpl.getString(""String_Node_Str"",tdColumn.getName()));
      exComp.setLayout(new GridLayout());
      exComp.setData(columnSetMultiIndicator);
      previewChartList.add(exComp);
      final Composite comp=toolkit.createComposite(exComp);
      comp.setLayout(new GridLayout());
      comp.setLayoutData(new GridData(GridData.FILL_BOTH));
      if (tdColumn != null) {
        IRunnableWithProgress rwp=new IRunnableWithProgress(){
          public void run(          final IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
            monitor.beginTask(DefaultMessagesImpl.getString(""String_Node_Str"",tdColumn.getName()),IProgressMonitor.UNKNOWN);
            Display.getDefault().asyncExec(new Runnable(){
              public void run(){
                new HideSeriesChartComposite(comp,analysis,columnSetMultiIndicator,tdColumn,false);
              }
            }
);
            monitor.done();
          }
        }
;
        try {
          new ProgressMonitorDialog(getSite().getShell()).run(true,false,rwp);
        }
 catch (        Exception ex) {
          log.error(ex,ex);
        }
      }
      exComp.addExpansionListener(new ExpansionAdapter(){
        @Override public void expansionStateChanged(        ExpansionEvent e){
          getChartComposite().layout();
          form.reflow(true);
        }
      }
);
      exComp.setExpanded(true);
      exComp.setClient(comp);
    }
  }
  if (!previewChartList.isEmpty()) {
    this.previewChartCompsites=previewChartList.toArray(new Composite[previewChartList.size()]);
  }
}","public void createPreviewCharts(final ScrolledForm form,final Composite composite,final boolean isCreate){
  List<Composite> previewChartList=new ArrayList<Composite>();
  if (ColumnsetPackage.eINSTANCE.getWeakCorrelationIndicator() == columnSetMultiIndicator.eClass()) {
    GraphBuilder gBuilder=new GraphBuilder();
    gBuilder.setTotalWeight(columnSetMultiIndicator.getCount());
    List<Object[]> listRows=columnSetMultiIndicator.getListRows();
    if (listRows != null) {
      JungGraphGenerator generator=new JungGraphGenerator(gBuilder,listRows);
      generator.generate(composite,false,true);
    }
  }
 else {
    List<ModelElement> numericOrDateList=new ArrayList<ModelElement>();
    if (ColumnsetPackage.eINSTANCE.getCountAvgNullIndicator() == columnSetMultiIndicator.eClass()) {
      numericOrDateList=columnSetMultiIndicator.getNumericColumns();
    }
    if (ColumnsetPackage.eINSTANCE.getMinMaxDateIndicator() == columnSetMultiIndicator.eClass()) {
      numericOrDateList=columnSetMultiIndicator.getDateColumns();
    }
    for (    ModelElement column : numericOrDateList) {
      final MetadataColumn tdColumn=(MetadataColumn)column;
      ExpandableComposite exComp=toolkit.createExpandableComposite(composite,ExpandableComposite.TREE_NODE | ExpandableComposite.CLIENT_INDENT);
      exComp.setText(DefaultMessagesImpl.getString(""String_Node_Str"",tdColumn.getName()));
      exComp.setLayout(new GridLayout());
      exComp.setData(columnSetMultiIndicator);
      previewChartList.add(exComp);
      final Composite comp=toolkit.createComposite(exComp);
      comp.setLayout(new GridLayout());
      comp.setLayoutData(new GridData(GridData.FILL_BOTH));
      if (tdColumn != null) {
        IRunnableWithProgress rwp=new IRunnableWithProgress(){
          public void run(          final IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
            monitor.beginTask(DefaultMessagesImpl.getString(""String_Node_Str"",tdColumn.getName()),IProgressMonitor.UNKNOWN);
            Display.getDefault().asyncExec(new Runnable(){
              public void run(){
                new HideSeriesChartComposite(comp,analysis,columnSetMultiIndicator,tdColumn,false);
              }
            }
);
            monitor.done();
          }
        }
;
        try {
          new ProgressMonitorDialog(getSite().getShell()).run(true,false,rwp);
        }
 catch (        Exception ex) {
          log.error(ex,ex);
        }
      }
      exComp.addExpansionListener(new ExpansionAdapter(){
        @Override public void expansionStateChanged(        ExpansionEvent e){
          getChartComposite().layout();
          form.reflow(true);
        }
      }
);
      exComp.setExpanded(true);
      exComp.setClient(comp);
    }
  }
  if (!previewChartList.isEmpty()) {
    this.previewChartCompsites=previewChartList.toArray(new Composite[previewChartList.size()]);
  }
}",0.9876712328767124
138447,"private void createBubbleOrGanttChart(final ScrolledForm form,final Composite composite,final ColumnSetMultiValueIndicator columnSetMultiValueIndicator){
  List<Composite> previewChartList=new ArrayList<Composite>();
  List<MetadataColumn> bubOrGanttColumnList=new ArrayList<MetadataColumn>();
  if (columnSetMultiValueIndicator instanceof CountAvgNullIndicator) {
    bubOrGanttColumnList=columnSetMultiValueIndicator.getNumericColumns();
  }
 else {
    bubOrGanttColumnList=columnSetMultiValueIndicator.getDateColumns();
  }
  for (  ModelElement column : bubOrGanttColumnList) {
    final MetadataColumn tdColumn=(MetadataColumn)column;
    final ExpandableComposite exComp=toolkit.createExpandableComposite(composite,ExpandableComposite.TREE_NODE | ExpandableComposite.CLIENT_INDENT);
    exComp.setText(DefaultMessagesImpl.getString(""String_Node_Str"",tdColumn.getName()));
    exComp.setLayout(new GridLayout());
    exComp.setData(columnSetMultiValueIndicator);
    previewChartList.add(exComp);
    final Composite comp=toolkit.createComposite(exComp);
    comp.setLayout(new GridLayout(2,false));
    comp.setLayoutData(new GridData(GridData.FILL_BOTH));
    if (tdColumn != null) {
      IRunnableWithProgress rwp=new IRunnableWithProgress(){
        public void run(        final IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
          monitor.beginTask(DefaultMessagesImpl.getString(""String_Node_Str"",tdColumn.getName()),IProgressMonitor.UNKNOWN);
          Display.getDefault().asyncExec(new Runnable(){
            public void run(){
              HideSeriesChartComposite hcc=new HideSeriesChartComposite(comp,getAnalysisHandler().getAnalysis(),columnSetMultiValueIndicator,tdColumn,true);
              GridData gd=new GridData();
              gd.widthHint=800;
              gd.heightHint=450;
              hcc.setLayoutData(gd);
            }
          }
);
          monitor.done();
        }
      }
;
      try {
        new ProgressMonitorDialog(getSite().getShell()).run(true,false,rwp);
      }
 catch (      Exception ex) {
        log.error(ex,ex);
      }
    }
    exComp.addExpansionListener(new ExpansionAdapter(){
      @Override public void expansionStateChanged(      ExpansionEvent e){
        getChartComposite().layout();
        form.reflow(true);
      }
    }
);
    exComp.setExpanded(true);
    exComp.setClient(comp);
  }
  if (!previewChartList.isEmpty()) {
    this.previewChartCompsites=previewChartList.toArray(new Composite[previewChartList.size()]);
  }
}","private void createBubbleOrGanttChart(final ScrolledForm form,final Composite composite,final ColumnSetMultiValueIndicator columnSetMultiValueIndicator){
  List<Composite> previewChartList=new ArrayList<Composite>();
  List<ModelElement> bubOrGanttColumnList=new ArrayList<ModelElement>();
  if (columnSetMultiValueIndicator instanceof CountAvgNullIndicator) {
    bubOrGanttColumnList=columnSetMultiValueIndicator.getNumericColumns();
  }
 else {
    bubOrGanttColumnList=columnSetMultiValueIndicator.getDateColumns();
  }
  for (  ModelElement column : bubOrGanttColumnList) {
    final MetadataColumn tdColumn=(MetadataColumn)column;
    final ExpandableComposite exComp=toolkit.createExpandableComposite(composite,ExpandableComposite.TREE_NODE | ExpandableComposite.CLIENT_INDENT);
    exComp.setText(DefaultMessagesImpl.getString(""String_Node_Str"",tdColumn.getName()));
    exComp.setLayout(new GridLayout());
    exComp.setData(columnSetMultiValueIndicator);
    previewChartList.add(exComp);
    final Composite comp=toolkit.createComposite(exComp);
    comp.setLayout(new GridLayout(2,false));
    comp.setLayoutData(new GridData(GridData.FILL_BOTH));
    if (tdColumn != null) {
      IRunnableWithProgress rwp=new IRunnableWithProgress(){
        public void run(        final IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
          monitor.beginTask(DefaultMessagesImpl.getString(""String_Node_Str"",tdColumn.getName()),IProgressMonitor.UNKNOWN);
          Display.getDefault().asyncExec(new Runnable(){
            public void run(){
              HideSeriesChartComposite hcc=new HideSeriesChartComposite(comp,getAnalysisHandler().getAnalysis(),columnSetMultiValueIndicator,tdColumn,true);
              GridData gd=new GridData();
              gd.widthHint=800;
              gd.heightHint=450;
              hcc.setLayoutData(gd);
            }
          }
);
          monitor.done();
        }
      }
;
      try {
        new ProgressMonitorDialog(getSite().getShell()).run(true,false,rwp);
      }
 catch (      Exception ex) {
        log.error(ex,ex);
      }
    }
    exComp.addExpansionListener(new ExpansionAdapter(){
      @Override public void expansionStateChanged(      ExpansionEvent e){
        getChartComposite().layout();
        form.reflow(true);
      }
    }
);
    exComp.setExpanded(true);
    exComp.setClient(comp);
  }
  if (!previewChartList.isEmpty()) {
    this.previewChartCompsites=previewChartList.toArray(new Composite[previewChartList.size()]);
  }
}",0.9905511811023622
138448,"/** 
 * @param outputFolder
 * @throws DataprofilerCoreException
 */
public void saveAnalysis() throws DataprofilerCoreException {
  columnSetAnalysisHandler.setName(columnSetAnalysisHandler.getName().replace(""String_Node_Str"",""String_Node_Str""));
  for (  Domain domain : this.analysis.getParameters().getDataFilter()) {
    domain.setName(this.analysis.getName());
  }
  IRepositoryViewObject reposObject=null;
  columnSetAnalysisHandler.clearAnalysis();
  simpleStatIndicator.getAnalyzedColumns().clear();
  allMatchIndicator.getAnalyzedColumns().clear();
  Analysis analysis=columnSetAnalysisHandler.getAnalysis();
  analysis.getParameters().setExecutionLanguage(ExecutionLanguage.get(execLang));
  columnSetAnalysisHandler.setStringDataFilter(dataFilterComp.getDataFilterString());
  List<IRepositoryNode> repositoryNodes=treeViewer.getColumnSetMultiValueList();
  Connection tdProvider=null;
  if (repositoryNodes != null && repositoryNodes.size() != 0) {
    ConnectionItem item=(ConnectionItem)repositoryNodes.get(0).getObject().getProperty().getItem();
    tdProvider=item.getConnection();
    if (tdProvider.eIsProxy()) {
      tdProvider=(Connection)EObjectHelper.resolveObject(tdProvider);
    }
    analysis.getContext().setConnection(tdProvider);
    List<MetadataColumn> columnList=new ArrayList<MetadataColumn>();
    for (    IRepositoryNode rd : repositoryNodes) {
      reposObject=rd.getObject();
      columnList.add((MetadataColumn)((MetadataColumnRepositoryObject)reposObject).getTdColumn());
    }
    simpleStatIndicator.getAnalyzedColumns().addAll(columnList);
    columnSetAnalysisHandler.addIndicator(columnList,simpleStatIndicator);
    allMatchIndicator.getCompositeRegexMatchingIndicators().clear();
    ModelElementIndicator[] modelElementIndicator=treeViewer.getModelElementIndicator();
    if (modelElementIndicator != null) {
      for (      ModelElementIndicator modelElementInd : modelElementIndicator) {
        Indicator[] inds=modelElementInd.getPatternIndicators();
        for (        Indicator ind : inds) {
          if (ind instanceof RegexpMatchingIndicator) {
            ind.setAnalyzedElement(((MetadataColumnRepositoryObject)modelElementInd.getModelElementRepositoryNode().getObject()).getTdColumn());
            allMatchIndicator.getCompositeRegexMatchingIndicators().add((RegexpMatchingIndicator)ind);
          }
        }
      }
    }
    if (allMatchIndicator.getCompositeRegexMatchingIndicators().size() > 0) {
      allMatchIndicator.getAnalyzedColumns().addAll(columnList);
      columnSetAnalysisHandler.addIndicator(columnList,allMatchIndicator);
    }
  }
 else {
    tdProvider=(Connection)analysis.getContext().getConnection();
    if (tdProvider != null) {
      tdProvider.getSupplierDependency().get(0).getClient().remove(analysis);
      analysis.getContext().setConnection(null);
      analysis.getClientDependency().clear();
    }
  }
  String urlString=analysis.eResource() != null ? analysis.eResource().getURI().toFileString() : PluginConstant.EMPTY_STRING;
  this.updateAnalysisClientDependency();
  ReturnCode saved=new ReturnCode(false);
  IEditorInput editorInput=this.getEditorInput();
  if (editorInput instanceof AnalysisItemEditorInput) {
    AnalysisItemEditorInput analysisInput=(AnalysisItemEditorInput)editorInput;
    TDQAnalysisItem tdqAnalysisItem=analysisInput.getTDQAnalysisItem();
    tdqAnalysisItem.getProperty().setLabel(columnSetAnalysisHandler.getName());
    this.nameText.setText(columnSetAnalysisHandler.getName());
    saved=ElementWriterFactory.getInstance().createAnalysisWrite().save(tdqAnalysisItem);
  }
  if (saved.isOk()) {
    RepositoryNode node=RepositoryNodeHelper.recursiveFind(tdProvider);
    if (node != null) {
      ElementWriterFactory.getInstance().createDataProviderWriter().save(node.getObject().getProperty().getItem());
    }
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + urlString + ""String_Node_Str"");
    }
  }
 else {
    throw new DataprofilerCoreException(DefaultMessagesImpl.getString(""String_Node_Str"",analysis.getName(),urlString,saved.getMessage()));
  }
  treeViewer.setDirty(false);
  dataFilterComp.setDirty(false);
}","/** 
 * @param outputFolder
 * @throws DataprofilerCoreException
 */
public void saveAnalysis() throws DataprofilerCoreException {
  columnSetAnalysisHandler.setName(columnSetAnalysisHandler.getName().replace(""String_Node_Str"",""String_Node_Str""));
  for (  Domain domain : this.analysis.getParameters().getDataFilter()) {
    domain.setName(this.analysis.getName());
  }
  IRepositoryViewObject reposObject=null;
  columnSetAnalysisHandler.clearAnalysis();
  simpleStatIndicator.getAnalyzedColumns().clear();
  allMatchIndicator.getAnalyzedColumns().clear();
  Analysis analysis=columnSetAnalysisHandler.getAnalysis();
  analysis.getParameters().setExecutionLanguage(ExecutionLanguage.get(execLang));
  columnSetAnalysisHandler.setStringDataFilter(dataFilterComp.getDataFilterString());
  List<IRepositoryNode> repositoryNodes=treeViewer.getColumnSetMultiValueList();
  Connection tdProvider=null;
  if (repositoryNodes != null && repositoryNodes.size() != 0) {
    ConnectionItem item=(ConnectionItem)repositoryNodes.get(0).getObject().getProperty().getItem();
    tdProvider=item.getConnection();
    if (tdProvider.eIsProxy()) {
      tdProvider=(Connection)EObjectHelper.resolveObject(tdProvider);
    }
    analysis.getContext().setConnection(tdProvider);
    List<ModelElement> columnList=new ArrayList<ModelElement>();
    for (    IRepositoryNode rd : repositoryNodes) {
      reposObject=rd.getObject();
      columnList.add((ModelElement)((MetadataColumnRepositoryObject)reposObject).getTdColumn());
    }
    simpleStatIndicator.getAnalyzedColumns().addAll(columnList);
    columnSetAnalysisHandler.addIndicator(columnList,simpleStatIndicator);
    allMatchIndicator.getCompositeRegexMatchingIndicators().clear();
    ModelElementIndicator[] modelElementIndicator=treeViewer.getModelElementIndicator();
    if (modelElementIndicator != null) {
      for (      ModelElementIndicator modelElementInd : modelElementIndicator) {
        Indicator[] inds=modelElementInd.getPatternIndicators();
        for (        Indicator ind : inds) {
          if (ind instanceof RegexpMatchingIndicator) {
            ind.setAnalyzedElement(((MetadataColumnRepositoryObject)modelElementInd.getModelElementRepositoryNode().getObject()).getTdColumn());
            allMatchIndicator.getCompositeRegexMatchingIndicators().add((RegexpMatchingIndicator)ind);
          }
        }
      }
    }
    if (allMatchIndicator.getCompositeRegexMatchingIndicators().size() > 0) {
      allMatchIndicator.getAnalyzedColumns().addAll(columnList);
      columnSetAnalysisHandler.addIndicator(columnList,allMatchIndicator);
    }
  }
 else {
    tdProvider=(Connection)analysis.getContext().getConnection();
    if (tdProvider != null) {
      tdProvider.getSupplierDependency().get(0).getClient().remove(analysis);
      analysis.getContext().setConnection(null);
      analysis.getClientDependency().clear();
    }
  }
  String urlString=analysis.eResource() != null ? analysis.eResource().getURI().toFileString() : PluginConstant.EMPTY_STRING;
  this.updateAnalysisClientDependency();
  ReturnCode saved=new ReturnCode(false);
  IEditorInput editorInput=this.getEditorInput();
  if (editorInput instanceof AnalysisItemEditorInput) {
    AnalysisItemEditorInput analysisInput=(AnalysisItemEditorInput)editorInput;
    TDQAnalysisItem tdqAnalysisItem=analysisInput.getTDQAnalysisItem();
    tdqAnalysisItem.getProperty().setLabel(columnSetAnalysisHandler.getName());
    this.nameText.setText(columnSetAnalysisHandler.getName());
    saved=ElementWriterFactory.getInstance().createAnalysisWrite().save(tdqAnalysisItem);
  }
  if (saved.isOk()) {
    RepositoryNode node=RepositoryNodeHelper.recursiveFind(tdProvider);
    if (node != null) {
      ElementWriterFactory.getInstance().createDataProviderWriter().save(node.getObject().getProperty().getItem());
    }
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + urlString + ""String_Node_Str"");
    }
  }
 else {
    throw new DataprofilerCoreException(DefaultMessagesImpl.getString(""String_Node_Str"",analysis.getName(),urlString,saved.getMessage()));
  }
  treeViewer.setDirty(false);
  dataFilterComp.setDirty(false);
}",0.991377245508982
138449,"private void addMenuOnBubbleChart(ChartEntity chartEntity,Menu menu){
  if (chartEntity instanceof XYItemEntity) {
    XYItemEntity xyItemEntity=(XYItemEntity)chartEntity;
    DefaultXYZDataset xyzDataSet=(DefaultXYZDataset)xyItemEntity.getDataset();
    final Comparable<?> seriesKey=xyzDataSet.getSeriesKey(xyItemEntity.getSeriesIndex());
    final String seriesK=String.valueOf(seriesKey);
    try {
      final Map<String,ValueAggregator> createXYZDatasets=ChartDatasetUtils.createXYZDatasets(indicator,column);
      final ValueAggregator valueAggregator=createXYZDatasets.get(seriesKey);
      valueAggregator.addSeriesToXYZDataset(xyzDataSet,seriesK);
      String seriesLabel=valueAggregator.getLabels(seriesK).get(xyItemEntity.getItem());
      EList<MetadataColumn> nominalList=indicator.getNominalColumns();
      final String queryString=MultiColumnSetValueExplorer.getInstance().getQueryStirng(column,analysis,nominalList,seriesK,seriesLabel);
      MenuItem item=new MenuItem(menu,SWT.PUSH);
      item.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
      item.addSelectionListener(new SelectionAdapter(){
        @Override public void widgetSelected(        SelectionEvent e){
          Display.getDefault().asyncExec(new Runnable(){
            public void run(){
              Connection tdDataProvider=SwitchHelpers.CONNECTION_SWITCH.doSwitch(analysis.getContext().getConnection());
              String query=queryString;
              String editorName=ColumnHelper.getColumnSetOwner(column).getName();
              CorePlugin.getDefault().runInDQViewer(tdDataProvider,query,editorName);
            }
          }
);
        }
      }
);
    }
 catch (    Throwable e) {
      log.error(e,e);
    }
  }
}","private void addMenuOnBubbleChart(ChartEntity chartEntity,Menu menu){
  if (chartEntity instanceof XYItemEntity) {
    XYItemEntity xyItemEntity=(XYItemEntity)chartEntity;
    DefaultXYZDataset xyzDataSet=(DefaultXYZDataset)xyItemEntity.getDataset();
    final Comparable<?> seriesKey=xyzDataSet.getSeriesKey(xyItemEntity.getSeriesIndex());
    final String seriesK=String.valueOf(seriesKey);
    try {
      final Map<String,ValueAggregator> createXYZDatasets=ChartDatasetUtils.createXYZDatasets(indicator,column);
      final ValueAggregator valueAggregator=createXYZDatasets.get(seriesKey);
      valueAggregator.addSeriesToXYZDataset(xyzDataSet,seriesK);
      String seriesLabel=valueAggregator.getLabels(seriesK).get(xyItemEntity.getItem());
      EList<ModelElement> nominalList=indicator.getNominalColumns();
      final String queryString=MultiColumnSetValueExplorer.getInstance().getQueryStirng(column,analysis,nominalList,seriesK,seriesLabel);
      MenuItem item=new MenuItem(menu,SWT.PUSH);
      item.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
      item.addSelectionListener(new SelectionAdapter(){
        @Override public void widgetSelected(        SelectionEvent e){
          Display.getDefault().asyncExec(new Runnable(){
            public void run(){
              Connection tdDataProvider=SwitchHelpers.CONNECTION_SWITCH.doSwitch(analysis.getContext().getConnection());
              String query=queryString;
              String editorName=ColumnHelper.getColumnSetOwner(column).getName();
              CorePlugin.getDefault().runInDQViewer(tdDataProvider,query,editorName);
            }
          }
);
        }
      }
);
    }
 catch (    Throwable e) {
      log.error(e,e);
    }
  }
}",0.9930875576036866
138450,"public HideSeriesChartComposite(Composite comp,Analysis ana,ColumnSetMultiValueIndicator indicator,MetadataColumn column,boolean isNeedUtility){
  super(comp,SWT.NONE);
  this.analysis=ana;
  this.indicator=indicator;
  this.column=column;
  this.isNeedUtility=isNeedUtility;
  this.setCursor(new Cursor(Display.getDefault(),SWT.CURSOR_HAND));
  this.setToolTipText(""String_Node_Str"");
  createHideSeriesArea();
  addSpecifiedListeners();
  GridData gd=new GridData();
  gd.heightHint=indicator.getAnalyzedColumns().size() * 30 < 230 ? 230 : indicator.getAnalyzedColumns().size() * 30;
  gd.widthHint=460;
  this.setLayoutData(gd);
}","public HideSeriesChartComposite(Composite comp,Analysis ana,ColumnSetMultiValueIndicator indicator,ModelElement column,boolean isNeedUtility){
  super(comp,SWT.NONE);
  this.analysis=ana;
  this.indicator=indicator;
  this.column=column;
  this.isNeedUtility=isNeedUtility;
  this.setCursor(new Cursor(Display.getDefault(),SWT.CURSOR_HAND));
  this.setToolTipText(""String_Node_Str"");
  createHideSeriesArea();
  addSpecifiedListeners();
  GridData gd=new GridData();
  gd.heightHint=indicator.getAnalyzedColumns().size() * 30 < 230 ? 230 : indicator.getAnalyzedColumns().size() * 30;
  gd.widthHint=460;
  this.setLayoutData(gd);
}",0.981012658227848
138451,"private void addSpecifiedListeners(){
  this.addChartMouseListener(new ChartMouseListener(){
    public void chartMouseClicked(    ChartMouseEvent event){
      setRangeZoomable(event.getTrigger().getButton() == 1);
      setDomainZoomable(event.getTrigger().getButton() == 1);
      if (event.getTrigger().getButton() != 3) {
        return;
      }
      Menu menu=new Menu(getShell(),SWT.POP_UP);
      setMenu(menu);
      MenuItem itemShowInFullScreen=new MenuItem(menu,SWT.PUSH);
      itemShowInFullScreen.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
      itemShowInFullScreen.addSelectionListener(new SelectionAdapter(){
        @Override public void widgetSelected(        SelectionEvent e){
          Display.getDefault().asyncExec(new Runnable(){
            public void run(){
              ChartUtils.showChartInFillScreen(createChart(),indicator);
            }
          }
);
        }
      }
);
      ChartEntity chartEntity=event.getEntity();
      if (chartEntity != null) {
        if (ColumnsetPackage.eINSTANCE.getCountAvgNullIndicator().equals(indicator.eClass())) {
          addMenuOnBubbleChart(chartEntity,menu);
        }
 else         if (ColumnsetPackage.eINSTANCE.getMinMaxDateIndicator().equals(indicator.eClass())) {
          addMenuOnGantChart(chartEntity,menu);
        }
      }
      menu.setVisible(true);
    }
    private void addMenuOnBubbleChart(    ChartEntity chartEntity,    Menu menu){
      if (chartEntity instanceof XYItemEntity) {
        XYItemEntity xyItemEntity=(XYItemEntity)chartEntity;
        DefaultXYZDataset xyzDataSet=(DefaultXYZDataset)xyItemEntity.getDataset();
        final Comparable<?> seriesKey=xyzDataSet.getSeriesKey(xyItemEntity.getSeriesIndex());
        final String seriesK=String.valueOf(seriesKey);
        try {
          final Map<String,ValueAggregator> createXYZDatasets=ChartDatasetUtils.createXYZDatasets(indicator,column);
          final ValueAggregator valueAggregator=createXYZDatasets.get(seriesKey);
          valueAggregator.addSeriesToXYZDataset(xyzDataSet,seriesK);
          String seriesLabel=valueAggregator.getLabels(seriesK).get(xyItemEntity.getItem());
          EList<MetadataColumn> nominalList=indicator.getNominalColumns();
          final String queryString=MultiColumnSetValueExplorer.getInstance().getQueryStirng(column,analysis,nominalList,seriesK,seriesLabel);
          MenuItem item=new MenuItem(menu,SWT.PUSH);
          item.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
          item.addSelectionListener(new SelectionAdapter(){
            @Override public void widgetSelected(            SelectionEvent e){
              Display.getDefault().asyncExec(new Runnable(){
                public void run(){
                  Connection tdDataProvider=SwitchHelpers.CONNECTION_SWITCH.doSwitch(analysis.getContext().getConnection());
                  String query=queryString;
                  String editorName=ColumnHelper.getColumnSetOwner(column).getName();
                  CorePlugin.getDefault().runInDQViewer(tdDataProvider,query,editorName);
                }
              }
);
            }
          }
);
        }
 catch (        Throwable e) {
          log.error(e,e);
        }
      }
    }
    public void chartMouseMoved(    ChartMouseEvent event){
    }
  }
);
}","private void addSpecifiedListeners(){
  this.addChartMouseListener(new ChartMouseListener(){
    public void chartMouseClicked(    ChartMouseEvent event){
      setRangeZoomable(event.getTrigger().getButton() == 1);
      setDomainZoomable(event.getTrigger().getButton() == 1);
      if (event.getTrigger().getButton() != 3) {
        return;
      }
      Menu menu=new Menu(getShell(),SWT.POP_UP);
      setMenu(menu);
      MenuItem itemShowInFullScreen=new MenuItem(menu,SWT.PUSH);
      itemShowInFullScreen.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
      itemShowInFullScreen.addSelectionListener(new SelectionAdapter(){
        @Override public void widgetSelected(        SelectionEvent e){
          Display.getDefault().asyncExec(new Runnable(){
            public void run(){
              ChartUtils.showChartInFillScreen(createChart(),indicator);
            }
          }
);
        }
      }
);
      ChartEntity chartEntity=event.getEntity();
      if (chartEntity != null) {
        if (ColumnsetPackage.eINSTANCE.getCountAvgNullIndicator().equals(indicator.eClass())) {
          addMenuOnBubbleChart(chartEntity,menu);
        }
 else         if (ColumnsetPackage.eINSTANCE.getMinMaxDateIndicator().equals(indicator.eClass())) {
          addMenuOnGantChart(chartEntity,menu);
        }
      }
      menu.setVisible(true);
    }
    private void addMenuOnBubbleChart(    ChartEntity chartEntity,    Menu menu){
      if (chartEntity instanceof XYItemEntity) {
        XYItemEntity xyItemEntity=(XYItemEntity)chartEntity;
        DefaultXYZDataset xyzDataSet=(DefaultXYZDataset)xyItemEntity.getDataset();
        final Comparable<?> seriesKey=xyzDataSet.getSeriesKey(xyItemEntity.getSeriesIndex());
        final String seriesK=String.valueOf(seriesKey);
        try {
          final Map<String,ValueAggregator> createXYZDatasets=ChartDatasetUtils.createXYZDatasets(indicator,column);
          final ValueAggregator valueAggregator=createXYZDatasets.get(seriesKey);
          valueAggregator.addSeriesToXYZDataset(xyzDataSet,seriesK);
          String seriesLabel=valueAggregator.getLabels(seriesK).get(xyItemEntity.getItem());
          EList<ModelElement> nominalList=indicator.getNominalColumns();
          final String queryString=MultiColumnSetValueExplorer.getInstance().getQueryStirng(column,analysis,nominalList,seriesK,seriesLabel);
          MenuItem item=new MenuItem(menu,SWT.PUSH);
          item.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
          item.addSelectionListener(new SelectionAdapter(){
            @Override public void widgetSelected(            SelectionEvent e){
              Display.getDefault().asyncExec(new Runnable(){
                public void run(){
                  Connection tdDataProvider=SwitchHelpers.CONNECTION_SWITCH.doSwitch(analysis.getContext().getConnection());
                  String query=queryString;
                  String editorName=ColumnHelper.getColumnSetOwner(column).getName();
                  CorePlugin.getDefault().runInDQViewer(tdDataProvider,query,editorName);
                }
              }
);
            }
          }
);
        }
 catch (        Throwable e) {
          log.error(e,e);
        }
      }
    }
    public void chartMouseMoved(    ChartMouseEvent event){
    }
  }
);
}",0.996386630532972
138452,"private void addMenuOnGantChart(ChartEntity chartEntity,Menu menu){
  if (chartEntity instanceof CategoryItemEntity) {
    CategoryItemEntity itemEntity=(CategoryItemEntity)chartEntity;
    String seriesK=itemEntity.getRowKey().toString();
    String seriesLabel=itemEntity.getColumnKey().toString();
    EList<MetadataColumn> nominalList=indicator.getNominalColumns();
    final String sql=MultiColumnSetValueExplorer.getInstance().getQueryStirng(column,analysis,nominalList,seriesK,seriesLabel);
    MenuItem item=new MenuItem(menu,SWT.PUSH);
    item.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    item.addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      SelectionEvent e){
        Display.getDefault().asyncExec(new Runnable(){
          public void run(){
            Connection tdDataProvider=SwitchHelpers.CONNECTION_SWITCH.doSwitch(analysis.getContext().getConnection());
            String query=sql;
            String editorName=ColumnHelper.getColumnSetOwner(column).getName();
            CorePlugin.getDefault().runInDQViewer(tdDataProvider,query,editorName);
          }
        }
);
      }
    }
);
  }
}","private void addMenuOnGantChart(ChartEntity chartEntity,Menu menu){
  if (chartEntity instanceof CategoryItemEntity) {
    CategoryItemEntity itemEntity=(CategoryItemEntity)chartEntity;
    String seriesK=itemEntity.getRowKey().toString();
    String seriesLabel=itemEntity.getColumnKey().toString();
    EList<ModelElement> nominalList=indicator.getNominalColumns();
    final String sql=MultiColumnSetValueExplorer.getInstance().getQueryStirng(column,analysis,nominalList,seriesK,seriesLabel);
    MenuItem item=new MenuItem(menu,SWT.PUSH);
    item.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    item.addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      SelectionEvent e){
        Display.getDefault().asyncExec(new Runnable(){
          public void run(){
            Connection tdDataProvider=SwitchHelpers.CONNECTION_SWITCH.doSwitch(analysis.getContext().getConnection());
            String query=sql;
            String editorName=ColumnHelper.getColumnSetOwner(column).getName();
            CorePlugin.getDefault().runInDQViewer(tdDataProvider,query,editorName);
          }
        }
);
      }
    }
);
  }
}",0.9898132427843804
138453,"/** 
 * zshen.
 * @return the input of table.
 */
private List<Map<Integer,RegexpMatchingIndicator>> organizeTableInput(){
  List<Map<Integer,RegexpMatchingIndicator>> returnList=new ArrayList<Map<Integer,RegexpMatchingIndicator>>();
  AllMatchIndicatorImpl allMatchIndicator=this.selectPatternsWizard.getAllMatchIndicator();
  if (allMatchIndicator == null) {
    return returnList;
  }
  List<MetadataColumn> analysisColumns=this.selectPatternsWizard.getAllMatchIndicator().getAnalyzedColumns();
  List<RegexpMatchingIndicator> regexpMatchingIndicatorList=this.selectPatternsWizard.getAllMatchIndicator().getCompositeRegexMatchingIndicators();
  for (  RegexpMatchingIndicator regexIndicator : regexpMatchingIndicatorList) {
    int index=analysisColumns.indexOf(regexIndicator.getAnalyzedElement());
    Map<Integer,RegexpMatchingIndicator> returnMap=getMapLocation(returnList,index);
    returnMap.put(index,regexIndicator);
    if (returnMap.size() == 1) {
      returnList.add(returnMap);
    }
  }
  return returnList;
}","/** 
 * zshen.
 * @return the input of table.
 */
private List<Map<Integer,RegexpMatchingIndicator>> organizeTableInput(){
  List<Map<Integer,RegexpMatchingIndicator>> returnList=new ArrayList<Map<Integer,RegexpMatchingIndicator>>();
  AllMatchIndicatorImpl allMatchIndicator=this.selectPatternsWizard.getAllMatchIndicator();
  if (allMatchIndicator == null) {
    return returnList;
  }
  List<ModelElement> analysisColumns=this.selectPatternsWizard.getAllMatchIndicator().getAnalyzedColumns();
  List<RegexpMatchingIndicator> regexpMatchingIndicatorList=this.selectPatternsWizard.getAllMatchIndicator().getCompositeRegexMatchingIndicators();
  for (  RegexpMatchingIndicator regexIndicator : regexpMatchingIndicatorList) {
    int index=analysisColumns.indexOf(regexIndicator.getAnalyzedElement());
    Map<Integer,RegexpMatchingIndicator> returnMap=getMapLocation(returnList,index);
    returnMap.put(index,regexIndicator);
    if (returnMap.size() == 1) {
      returnList.add(returnMap);
    }
  }
  return returnList;
}",0.9892787524366472
138454,"public void createControl(Composite parent){
  GridLayout parentGridLayout=new GridLayout();
  GridData data=new GridData();
  data.horizontalAlignment=GridData.FILL;
  data.verticalAlignment=GridData.FILL;
  data.grabExcessHorizontalSpace=true;
  data.grabExcessVerticalSpace=true;
  parent.setLayout(parentGridLayout);
  List<MetadataColumn> analysisColumns=this.selectPatternsWizard.getSsIndicator().getAnalyzedColumns();
  GridTableViewer tableView=new GridTableViewer(parent,SWT.NONE);
  this.table=tableView.getGrid();
  this.table.setLayoutData(data);
  table.setHeaderVisible(true);
  table.setLinesVisible(true);
  for (  ModelElement element : analysisColumns) {
    GridColumn tableCum=new GridColumn(table,SWT.CHECK);
    MetadataColumn mdColumn=SwitchHelpers.METADATA_COLUMN_SWITCH.doSwitch(element);
    TdColumn tdColumn=SwitchHelpers.COLUMN_SWITCH.doSwitch(element);
    if (tdColumn != null) {
      tableCum.setText(tdColumn.getName());
    }
 else     if (mdColumn != null) {
      tableCum.setText(mdColumn.getId());
    }
  }
  tableView.setContentProvider(new PatternSelectContentProvider());
  tableView.setLabelProvider(new PatternSelectLabelProvider());
  this.tableInputList=organizeTableInput();
  tableView.setInput(tableInputList);
  for (  GridColumn tableCum : table.getColumns()) {
    tableCum.pack();
  }
  initDataFilterSection(parent);
  inItitemCheck();
  this.setControl(parent);
  this.setPageComplete(true);
}","public void createControl(Composite parent){
  GridLayout parentGridLayout=new GridLayout();
  GridData data=new GridData();
  data.horizontalAlignment=GridData.FILL;
  data.verticalAlignment=GridData.FILL;
  data.grabExcessHorizontalSpace=true;
  data.grabExcessVerticalSpace=true;
  parent.setLayout(parentGridLayout);
  List<ModelElement> analysisColumns=this.selectPatternsWizard.getSsIndicator().getAnalyzedColumns();
  GridTableViewer tableView=new GridTableViewer(parent,SWT.NONE);
  this.table=tableView.getGrid();
  this.table.setLayoutData(data);
  table.setHeaderVisible(true);
  table.setLinesVisible(true);
  for (  ModelElement element : analysisColumns) {
    GridColumn tableCum=new GridColumn(table,SWT.CHECK);
    MetadataColumn mdColumn=SwitchHelpers.METADATA_COLUMN_SWITCH.doSwitch(element);
    TdColumn tdColumn=SwitchHelpers.COLUMN_SWITCH.doSwitch(element);
    if (tdColumn != null) {
      tableCum.setText(tdColumn.getName());
    }
 else     if (mdColumn != null) {
      tableCum.setText(mdColumn.getId());
    }
  }
  tableView.setContentProvider(new PatternSelectContentProvider());
  tableView.setLabelProvider(new PatternSelectLabelProvider());
  this.tableInputList=organizeTableInput();
  tableView.setInput(tableInputList);
  for (  GridColumn tableCum : table.getColumns()) {
    tableCum.pack();
  }
  initDataFilterSection(parent);
  inItitemCheck();
  this.setControl(parent);
  this.setPageComplete(true);
}",0.9917127071823204
138455,"protected Section creatMetadataSection(final ScrolledForm form,Composite topComp){
  Section section=createSection(form,topComp,getMetadataTitle(),""String_Node_Str"");
  Composite parent=toolkit.createComposite(section);
  parent.setLayout(new GridLayout(2,false));
  nameText=createMetadataTextFiled(NAME_LABEL,parent);
  nameText.setTextLimit(EmfHelper.getStringMaxSize(CorePackage.Literals.MODEL_ELEMENT__NAME,MAX_TEXT_FIELD_STRING_SIZE_FOR_USUAL_STRING));
  purposeText=createMetadataTextFiled(PURPOSE_LABEL,parent);
  purposeText.setTextLimit(TaggedValueHelper.getStringMaxSize(TaggedValueHelper.PURPOSE,MAX_TEXT_FIELD_STRING_SIZE_FOR_USUAL_STRING));
  toolkit.createLabel(parent,DESCRIPTION_LABEL);
  descriptionText=toolkit.createText(parent,null,SWT.BORDER | SWT.MULTI | SWT.WRAP| SWT.V_SCROLL);
  GridDataFactory.fillDefaults().hint(META_FIELD_WIDTH,60).applyTo(descriptionText);
  descriptionText.setTextLimit(TaggedValueHelper.getStringMaxSize(TaggedValueHelper.DESCRIPTION,MAX_TEXT_FIELD_STRING_SIZE_FOR_USUAL_STRING));
  authorText=createMetadataTextFiled(AUTHOR_LABEL,parent);
  authorText.setTextLimit(TaggedValueHelper.getStringMaxSize(TaggedValueHelper.AUTHOR,MAX_TEXT_FIELD_STRING_SIZE_FOR_USUAL_STRING));
  if (!ReponsitoryContextBridge.isDefautProject()) {
    authorText.setEnabled(false);
    authorText.setBackground(Display.getCurrent().getSystemColor(SWT.COLOR_WIDGET_BACKGROUND));
  }
  lockerText=createMetadataTextFiled(LOCKER_LABEL,parent);
  versionText=createMetadataVersionFiled(VERSION_LABEL,parent);
  toolkit.createLabel(parent,STATUS_LABEL);
  statusCombo=new CCombo(parent,SWT.BORDER);
  statusCombo.setEditable(false);
  String statusValue=DevelopmentStatus.DRAFT.getLiteral();
  TaggedValue taggedValue=TaggedValueHelper.getTaggedValue(TaggedValueHelper.DEV_STATUS,getCurrentModelElement(this.getEditor()).getTaggedValue());
  if (taggedValue != null) {
    statusValue=taggedValue.getValue();
  }
  List<org.talend.core.model.properties.Status> statusList=MetadataHelper.getTechnicalStatus();
  if (statusList != null && statusList.size() > 0) {
    List<String> statusArray=MetadataHelper.toArray(statusList);
    String[] tempString=new String[statusList.size()];
    statusCombo.setItems(statusArray.toArray(tempString));
    if (statusArray.contains(statusValue)) {
      statusCombo.remove(statusValue);
      statusCombo.add(statusValue,0);
    }
  }
 else {
    for (    DevelopmentStatus status : DevelopmentStatus.values()) {
      statusCombo.add(status.getLiteral());
    }
    statusCombo.add(statusValue,0);
  }
  initMetaTextFied();
  nameText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      setDirty(true);
    }
  }
);
  purposeText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      setDirty(true);
    }
  }
);
  descriptionText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      setDirty(true);
    }
  }
);
  authorText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      setDirty(true);
    }
  }
);
  statusCombo.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      setDirty(true);
    }
  }
);
  section.setClient(parent);
  return section;
}","protected Section creatMetadataSection(final ScrolledForm form,Composite topComp){
  Section section=createSection(form,topComp,getMetadataTitle(),""String_Node_Str"");
  Composite parent=toolkit.createComposite(section);
  parent.setLayout(new GridLayout(2,false));
  nameText=createMetadataTextFiled(NAME_LABEL,parent);
  nameText.setTextLimit(EmfHelper.getStringMaxSize(CorePackage.Literals.MODEL_ELEMENT__NAME,MAX_TEXT_FIELD_STRING_SIZE_FOR_USUAL_STRING));
  purposeText=createMetadataTextFiled(PURPOSE_LABEL,parent);
  purposeText.setTextLimit(TaggedValueHelper.getStringMaxSize(TaggedValueHelper.PURPOSE,MAX_TEXT_FIELD_STRING_SIZE_FOR_USUAL_STRING));
  toolkit.createLabel(parent,DESCRIPTION_LABEL);
  descriptionText=toolkit.createText(parent,null,SWT.BORDER | SWT.MULTI | SWT.WRAP| SWT.V_SCROLL);
  GridDataFactory.fillDefaults().hint(META_FIELD_WIDTH,60).applyTo(descriptionText);
  descriptionText.setTextLimit(TaggedValueHelper.getStringMaxSize(TaggedValueHelper.DESCRIPTION,MAX_TEXT_FIELD_STRING_SIZE_FOR_USUAL_STRING));
  authorText=createMetadataTextFiled(AUTHOR_LABEL,parent);
  authorText.setTextLimit(TaggedValueHelper.getStringMaxSize(TaggedValueHelper.AUTHOR,MAX_TEXT_FIELD_STRING_SIZE_FOR_USUAL_STRING));
  if (!ReponsitoryContextBridge.isDefautProject()) {
    authorText.setEnabled(false);
    authorText.setBackground(Display.getCurrent().getSystemColor(SWT.COLOR_WIDGET_BACKGROUND));
  }
  lockerText=createMetadataTextFiled(LOCKER_LABEL,parent);
  versionText=createMetadataVersionFiled(VERSION_LABEL,parent);
  toolkit.createLabel(parent,STATUS_LABEL);
  statusCombo=new CCombo(parent,SWT.BORDER);
  statusCombo.setEditable(false);
  String statusValue=getProperty() != null ? getProperty().getStatusCode() : DevelopmentStatus.DRAFT.getLiteral();
  List<org.talend.core.model.properties.Status> statusList=MetadataHelper.getTechnicalStatus();
  if (statusList != null && statusList.size() > 0) {
    List<String> statusArray=MetadataHelper.toArray(statusList);
    String[] tempString=new String[statusList.size()];
    statusCombo.setItems(statusArray.toArray(tempString));
    if (statusArray.contains(statusValue)) {
      statusCombo.remove(statusValue);
      statusCombo.add(statusValue,0);
    }
  }
 else {
    for (    DevelopmentStatus status : DevelopmentStatus.values()) {
      statusCombo.add(status.getLiteral());
    }
    statusCombo.add(statusValue,0);
  }
  initMetaTextFied();
  nameText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      setDirty(true);
    }
  }
);
  purposeText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      setDirty(true);
    }
  }
);
  descriptionText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      setDirty(true);
    }
  }
);
  authorText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      setDirty(true);
    }
  }
);
  statusCombo.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      setDirty(true);
    }
  }
);
  section.setClient(parent);
  return section;
}",0.9271236267987004
138456,"/** 
 * DOC bZhou Comment method ""getIntactElemenetName"".
 * @return
 */
public String getIntactElemenetName(){
  if (currentModelElement == null) {
    currentModelElement=getCurrentModelElement(getEditor());
  }
  return DqRepositoryViewService.buildElementName(currentModelElement);
}","/** 
 * DOC bZhou Comment method ""getIntactElemenetName"".
 * @return
 */
public String getIntactElemenetName(){
  if (currentModelElement == null) {
    currentModelElement=getCurrentModelElement(getEditor());
  }
  return DqRepositoryViewService.buildElementName(getProperty());
}",0.943661971830986
138457,"protected void initMetaTextFied(){
  String name=currentModelElement.getName();
  String purpose=MetadataHelper.getPurpose(currentModelElement);
  String description=MetadataHelper.getDescription(currentModelElement);
  String author=MetadataHelper.getAuthor(currentModelElement);
  String version=MetadataHelper.getVersion(currentModelElement);
  String devStatus=MetadataHelper.getDevStatus(currentModelElement);
  String locker=RepositoryNodeHelper.getLocker(this.repositoryViewObject);
  if (currentModelElement instanceof Connection) {
    Property property=PropertyHelper.getProperty(currentModelElement);
    if (property != null) {
      name=property.getLabel();
      purpose=property.getPurpose();
      description=property.getDescription();
      author=property.getAuthor().getLogin();
      version=property.getVersion();
      devStatus=property.getStatusCode();
    }
  }
  nameText.setText(name == null ? PluginConstant.EMPTY_STRING : name);
  purposeText.setText(purpose == null ? PluginConstant.EMPTY_STRING : purpose);
  descriptionText.setText(description == null ? PluginConstant.EMPTY_STRING : description);
  authorText.setText(author == null ? PluginConstant.EMPTY_STRING : author);
  authorText.setEnabled(false);
  lockerText.setText(locker == null ? PluginConstant.EMPTY_STRING : locker);
  lockerText.setEnabled(false);
  versionText.setText(version == null ? VersionUtils.DEFAULT_VERSION : version);
  statusCombo.setText(devStatus == null ? PluginConstant.EMPTY_STRING : devStatus);
}","protected void initMetaTextFied(){
  Property property=getProperty();
  if (property != null) {
    String name=property.getLabel();
    String purpose=property.getPurpose();
    String description=property.getDescription();
    String author=property.getAuthor().getLogin();
    String version=property.getVersion();
    String devStatus=property.getStatusCode();
    String lockerStr=null;
    ItemState state=property.getItem().getState();
    if (state != null) {
      User locker=state.getLocker();
      if (locker != null) {
        lockerStr=locker.getLogin();
      }
    }
    nameText.setText(name == null ? PluginConstant.EMPTY_STRING : name);
    purposeText.setText(purpose == null ? PluginConstant.EMPTY_STRING : purpose);
    descriptionText.setText(description == null ? PluginConstant.EMPTY_STRING : description);
    authorText.setText(author == null ? PluginConstant.EMPTY_STRING : author);
    authorText.setEnabled(false);
    lockerText.setText(lockerStr == null ? PluginConstant.EMPTY_STRING : lockerStr);
    lockerText.setEnabled(false);
    statusCombo.setText(devStatus == null ? PluginConstant.EMPTY_STRING : devStatus);
  }
}",0.4827844311377245
138458,"protected String decorateText(String input,Object element){
  if (element instanceof IFile) {
    IFile file=(IFile)element;
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + file.getLocation());
    }
    ModelElement mElement=null;
    try {
      mElement=ModelElementFileFactory.getModelElement(file);
    }
 catch (    Exception exc) {
      log.error(exc,exc);
    }
    if (mElement != null) {
      return DqRepositoryViewService.buildElementName(mElement);
    }
  }
  input=DQStructureMessage.getString(super.decorateText(input,element));
  if (element instanceof IFolder) {
    if (input.startsWith(DQStructureManager.PREFIX_TDQ)) {
      input=input.replaceFirst(DQStructureManager.PREFIX_TDQ,""String_Node_Str"");
    }
    IFolder folder=(IFolder)element;
    if (ResourceManager.isAnalysisFolder(folder)) {
      input+=""String_Node_Str"" + getFileCount(folder,new String[]{""String_Node_Str""}) + ""String_Node_Str"";
    }
 else     if (ResourceManager.isReportsFolder(folder)) {
      input+=""String_Node_Str"" + getFileCount(folder,new String[]{""String_Node_Str""}) + ""String_Node_Str"";
    }
  }
  return super.decorateText(input,element);
}","protected String decorateText(String input,Object element){
  if (element instanceof IFile) {
    IFile file=(IFile)element;
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + file.getLocation());
    }
    ModelElement mElement=null;
    try {
      mElement=ModelElementFileFactory.getModelElement(file);
    }
 catch (    Exception exc) {
      log.error(exc,exc);
    }
    if (mElement != null) {
      Property property=ProxyRepositoryFactory.getInstance().getProperty(mElement);
      return DqRepositoryViewService.buildElementName(property);
    }
  }
  input=DQStructureMessage.getString(super.decorateText(input,element));
  if (element instanceof IFolder) {
    if (input.startsWith(DQStructureManager.PREFIX_TDQ)) {
      input=input.replaceFirst(DQStructureManager.PREFIX_TDQ,""String_Node_Str"");
    }
    IFolder folder=(IFolder)element;
    if (ResourceManager.isAnalysisFolder(folder)) {
      input+=""String_Node_Str"" + getFileCount(folder,new String[]{""String_Node_Str""}) + ""String_Node_Str"";
    }
 else     if (ResourceManager.isReportsFolder(folder)) {
      input+=""String_Node_Str"" + getFileCount(folder,new String[]{""String_Node_Str""}) + ""String_Node_Str"";
    }
  }
  return super.decorateText(input,element);
}",0.9587458745874587
138459,"public void createControl(Composite parent){
  List<MetadataColumn> analysisColumns=this.selectPatternsWizard.getSsIndicator().getAnalyzedColumns();
  GridTableViewer tableView=new GridTableViewer(parent,SWT.NONE);
  this.table=tableView.getGrid();
  table.setHeaderVisible(true);
  table.setLinesVisible(true);
  for (  ModelElement analysisColumn : analysisColumns) {
    GridColumn tableCum=new GridColumn(table,SWT.CHECK);
    tableCum.setText(analysisColumn.getName());
  }
  tableView.setContentProvider(new PatternSelectContentProvider());
  tableView.setLabelProvider(new PatternSelectLabelProvider());
  this.tableInputList=organizeTableInput();
  tableView.setInput(tableInputList);
  for (  GridColumn tableCum : table.getColumns()) {
    tableCum.pack();
  }
  inItitemCheck();
  this.setControl(parent);
  this.setPageComplete(true);
}","public void createControl(Composite parent){
  List<MetadataColumn> analysisColumns=this.selectPatternsWizard.getSsIndicator().getAnalyzedColumns();
  GridTableViewer tableView=new GridTableViewer(parent,SWT.NONE);
  this.table=tableView.getGrid();
  table.setHeaderVisible(true);
  table.setLinesVisible(true);
  for (  ModelElement element : analysisColumns) {
    GridColumn tableCum=new GridColumn(table,SWT.CHECK);
    MetadataColumn mdColumn=SwitchHelpers.METADATA_COLUMN_SWITCH.doSwitch(element);
    TdColumn tdColumn=SwitchHelpers.COLUMN_SWITCH.doSwitch(element);
    if (tdColumn != null) {
      tableCum.setText(tdColumn.getName());
    }
 else     if (mdColumn != null) {
      tableCum.setText(mdColumn.getId());
    }
  }
  tableView.setContentProvider(new PatternSelectContentProvider());
  tableView.setLabelProvider(new PatternSelectLabelProvider());
  this.tableInputList=organizeTableInput();
  tableView.setInput(tableInputList);
  for (  GridColumn tableCum : table.getColumns()) {
    tableCum.pack();
  }
  inItitemCheck();
  this.setControl(parent);
  this.setPageComplete(true);
}",0.8331627430910952
138460,"/** 
 * <!-- begin-user-doc --> <!-- end-user-doc -->
 * @generated NOT
 */
public EList<MetadataColumn> getNominalColumns(){
  EList<MetadataColumn> nominalColumns=new BasicElistExtend<MetadataColumn>();
  if (analyzedColumns != null) {
    for (    MetadataColumn column : analyzedColumns) {
      final MetadataColumn mdColumn=SwitchHelpers.METADATA_COLUMN_SWITCH.doSwitch(column);
      final TdColumn tdColumn=SwitchHelpers.COLUMN_SWITCH.doSwitch(column);
      if (tdColumn == null && mdColumn == null) {
        if (column == null) {
          log.error(""String_Node_Str"");
        }
 else {
          log.error(""String_Node_Str"" + column.getName());
        }
        continue;
      }
      DataminingType dataminingType=MetadataHelper.getDataminingType(column);
      if (DataminingType.NOMINAL.equals(dataminingType)) {
        nominalColumns.add(column);
      }
    }
  }
  return nominalColumns;
}","/** 
 * <!-- begin-user-doc --> <!-- end-user-doc -->
 * @generated NOT
 */
public EList<MetadataColumn> getNominalColumns(){
  EList<MetadataColumn> nominalColumns=new BasicElistExtend<MetadataColumn>();
  if (analyzedColumns != null) {
    for (    MetadataColumn column : analyzedColumns) {
      final MetadataColumn mdColumn=SwitchHelpers.METADATA_COLUMN_SWITCH.doSwitch(column);
      final TdColumn tdColumn=SwitchHelpers.COLUMN_SWITCH.doSwitch(column);
      if (tdColumn == null && mdColumn == null) {
        if (column == null) {
          log.error(""String_Node_Str"");
        }
 else {
          log.error(""String_Node_Str"" + column.getName());
        }
        continue;
      }
      DataminingType dataminingType=MetadataHelper.getDataminingType(column);
      if (DataminingType.NOMINAL.equals(dataminingType)) {
        nominalColumns.add(column);
      }
 else       if (null != mdColumn) {
        nominalColumns.add(column);
      }
    }
  }
  return nominalColumns;
}",0.957939011566772
138461,"/** 
 * <!-- begin-user-doc --> <!-- end-user-doc -->
 * @generated NOT
 */
public EList<String> getColumnHeaders(){
  EList<String> headers=new BasicEList<String>();
  for (  ModelElement column : this.getNominalColumns()) {
    headers.add(column.getName());
  }
  for (  ModelElement column : this.getNumericColumns()) {
    for (    String f : this.getNumericFunctions()) {
      headers.add(MessageFormat.format(f,column.getName()));
    }
  }
  for (  ModelElement column : this.getDateColumns()) {
    for (    String f : this.getDateFunctions()) {
      headers.add(MessageFormat.format(f,column.getName()));
    }
  }
  headers.add(this.getCountAll());
  return headers;
}","/** 
 * <!-- begin-user-doc --> <!-- end-user-doc -->
 * @generated NOT
 */
public EList<String> getColumnHeaders(){
  EList<String> headers=new BasicEList<String>();
  for (  ModelElement column : this.getNominalColumns()) {
    headers.add(getColumnName(column));
  }
  for (  ModelElement column : this.getNumericColumns()) {
    for (    String f : this.getNumericFunctions()) {
      headers.add(MessageFormat.format(f,getColumnName(column)));
    }
  }
  for (  ModelElement column : this.getDateColumns()) {
    for (    String f : this.getDateFunctions()) {
      headers.add(MessageFormat.format(f,getColumnName(column)));
    }
  }
  headers.add(this.getCountAll());
  return headers;
}",0.9455337690631808
138462,"public Item getItem(){
  return item;
}","public Item getItem(){
  if (item.eIsProxy()) {
    item=(Item)EObjectHelper.resolveObject(item);
  }
  return item;
}",0.4968152866242038
138463,"public void activateEditor(IWorkbenchPage aPage,IStructuredSelection aSelection){
  RepositoryNode repNode=(RepositoryNode)aSelection.getFirstElement();
  OpenItemEditorAction openEditorAction=new OpenItemEditorAction(repNode.getObject());
  AbstractItemEditorInput absEditorInput=openEditorAction.computeEditorInput();
  aPage.bringToTop(aPage.findEditor(absEditorInput));
}","public void activateEditor(IWorkbenchPage aPage,IStructuredSelection aSelection){
  RepositoryNode repNode=(RepositoryNode)aSelection.getFirstElement();
  OpenItemEditorAction openEditorAction=new OpenItemEditorAction(repNode.getObject());
  AbstractItemEditorInput absEditorInput=openEditorAction.computeEditorInput();
  if (absEditorInput != null) {
    aPage.bringToTop(aPage.findEditor(absEditorInput));
  }
}",0.9517766497461928
138464,"/** 
 * Change connection informations with server, port etc., and update related analyses. MOD yyi 9082 2010-02-25
 */
protected void changeConnectionInformations(){
  if (connectionItem != null) {
    if (connectionItem.eIsProxy()) {
      connectionItem=(ConnectionItem)EObjectHelper.resolveObject(connectionItem);
    }
    RepositoryNode node=RepositoryNodeHelper.recursiveFind(connectionItem.getConnection());
    IWizard wizard=null;
    if (node != null) {
      if (node instanceof DBConnectionRepNode) {
        wizard=new DatabaseWizard(PlatformUI.getWorkbench(),false,node,null);
      }
 else       if (node instanceof MDMConnectionRepNode) {
        if (PluginChecker.isMDMPluginLoaded() && GlobalServiceRegister.getDefault().isServiceRegistered(IMDMProviderService.class)) {
          IMDMProviderService service=(IMDMProviderService)GlobalServiceRegister.getDefault().getService(IMDMProviderService.class);
          if (service != null) {
            wizard=service.newMDMWizard(PlatformUI.getWorkbench(),false,node,null);
          }
        }
      }
    }
    if (wizard != null) {
      WizardDialog dialog=new WizardDialog(null,wizard);
      dialog.setPageSize(550,550);
      wizard.setContainer(dialog);
      dialog.open();
    }
  }
}","/** 
 * Change connection informations with server, port etc., and update related analyses. MOD yyi 9082 2010-02-25
 */
protected void changeConnectionInformations(){
  if (connectionItem != null) {
    if (connectionItem.eIsProxy()) {
      connectionItem=(ConnectionItem)EObjectHelper.resolveObject(connectionItem);
    }
    RepositoryNode node=RepositoryNodeHelper.recursiveFind(((ConnectionItem)connectionItem).getConnection());
    IWizard wizard=null;
    if (node != null) {
      if (node instanceof DBConnectionRepNode) {
        wizard=new DatabaseWizard(PlatformUI.getWorkbench(),false,node,null);
      }
 else       if (node instanceof MDMConnectionRepNode) {
        if (PluginChecker.isMDMPluginLoaded() && GlobalServiceRegister.getDefault().isServiceRegistered(IMDMProviderService.class)) {
          IMDMProviderService service=(IMDMProviderService)GlobalServiceRegister.getDefault().getService(IMDMProviderService.class);
          if (service != null) {
            wizard=service.newMDMWizard(PlatformUI.getWorkbench(),false,node,null);
          }
        }
      }
    }
    if (wizard != null) {
      WizardDialog dialog=new WizardDialog(null,wizard);
      dialog.setPageSize(550,550);
      wizard.setContainer(dialog);
      dialog.open();
    }
  }
}",0.9921259842519684
138465,"@Override protected ModelElement getCurrentModelElement(FormEditor editor){
  IEditorInput editorInput=editor.getEditorInput();
  if (editorInput instanceof ConnectionItemEditorInput) {
    ConnectionItemEditorInput input=(ConnectionItemEditorInput)editorInput;
    connectionItem=input.getConnectionItem();
    connection=input.getConnectionItem().getConnection();
  }
 else   if (editorInput instanceof FileEditorInput) {
    Property proty=PropertyHelper.getProperty(((FileEditorInput)editorInput).getFile());
    Item item=proty.getItem();
    if (item instanceof ConnectionItem) {
      connectionItem=(ConnectionItem)item;
      connection=((ConnectionItem)item).getConnection();
    }
  }
  initConnectionRepNode(connection);
  return ConnectionUtils.fillConnectionInformation(connection);
}","@Override protected ModelElement getCurrentModelElement(FormEditor editor){
  IEditorInput editorInput=editor.getEditorInput();
  if (editorInput instanceof ConnectionItemEditorInput) {
    ConnectionItemEditorInput input=(ConnectionItemEditorInput)editorInput;
    connectionItem=input.getItem();
    connection=((ConnectionItem)input.getItem()).getConnection();
  }
 else   if (editorInput instanceof FileEditorInput) {
    Property proty=PropertyHelper.getProperty(((FileEditorInput)editorInput).getFile());
    Item item=proty.getItem();
    if (item instanceof ConnectionItem) {
      connectionItem=(ConnectionItem)item;
      connection=((ConnectionItem)item).getConnection();
    }
  }
  initConnectionRepNode(connection);
  return ConnectionUtils.fillConnectionInformation(connection);
}",0.958594730238394
138466,"public ConnectionItemEditorInput(Item connItem){
  super(connItem);
  connectionItem=(ConnectionItem)connItem;
}","public ConnectionItemEditorInput(Item connItem){
  super(connItem);
}",0.7624309392265194
138467,"@Override public String getName(){
  return getPath() + connectionItem.getConnection().getName();
}","@Override public String getName(){
  return getPath() + ((ConnectionItem)item).getConnection().getName();
}",0.9514563106796116
138468,"@Override public String getToolTipText(){
  return getPath() + connectionItem.getConnection().getName();
}","@Override public String getToolTipText(){
  return getPath() + ((ConnectionItem)item).getConnection().getName();
}",0.9545454545454546
138469,"public void clear(){
  super.clear();
  this.allAnalysisMap.clear();
}","public void clear(){
  for (  Analysis analysis : allAnalysisMap.values()) {
    if (analysis.eIsProxy()) {
      ResourceSet resourceSet=ProxyRepositoryFactory.getInstance().getRepositoryFactoryFromProvider().getResourceManager().resourceSet;
      analysis=(Analysis)EcoreUtil.resolve(analysis,resourceSet);
    }
    URI uri=analysis.eResource().getURI();
    EMFSharedResources.getInstance().unloadResource(uri.toString());
  }
  super.clear();
  this.allAnalysisMap.clear();
}",0.1887477313974591
138470,"/** 
 * clear the cache of ModelElement.
 * @return
 */
private boolean reloadModelElementCache(){
  try {
    AnaResourceFileHelper.getInstance().clear();
    RepResourceFileHelper.getInstance().clear();
    IndicatorResourceFileHelper.getInstance().clear();
    PatternResourceFileHelper.getInstance().clear();
    DQRuleResourceFileHelper.getInstance().clear();
    ResourceFileMap.getAll();
  }
 catch (  Exception e) {
    log.error(e,e);
    return false;
  }
  return true;
}","/** 
 * clear the cache of ModelElement.
 * @return
 */
private boolean reloadModelElementCache(){
  try {
    AnaResourceFileHelper.getInstance().clear();
    RepResourceFileHelper.getInstance().clear();
    IndicatorResourceFileHelper.getInstance().clear();
    PatternResourceFileHelper.getInstance().clear();
    DQRuleResourceFileHelper.getInstance().clear();
    PrvResourceFileHelper.getInstance().clear();
    ResourceFileMap.getAll();
  }
 catch (  Exception e) {
    log.error(e,e);
    return false;
  }
  return true;
}",0.9516288252714707
138471,"private void tansferFile(File parentFolder,Map<File,File> folderMap) throws Exception {
  resourceSet=new ResourceSetImpl();
  if (!parentFolder.exists()) {
    return;
  }
  List<File> fileList=new ArrayList<File>();
  FilesUtils.getAllFilesFromFolder(parentFolder,fileList,nonPropertyFileFilter);
  for (  File propFile : fileList) {
    try {
      handlePropertiesFile(propFile,folderMap,parentFolder);
    }
 catch (    Exception e) {
      log.warn(e,e);
    }
  }
}","private void tansferFile(File parentFolder,Map<File,File> folderMap) throws Exception {
  resourceSet=new ResourceSetImpl();
  if (!parentFolder.exists()) {
    return;
  }
  List<File> fileList=new ArrayList<File>();
  FilesUtils.getAllFilesFromFolder(parentFolder,fileList,nonPropertyFileFilter);
  for (  File propFile : fileList) {
    try {
      handlePropertiesFile(propFile,folderMap,parentFolder);
    }
 catch (    Exception e) {
      log.warn(e,e);
    }
  }
  if (isWorksapcePath()) {
    collectConnectionID();
  }
}",0.942115768463074
138472,"public AbstractItemEditorInput computeEditorInput(){
  if (reposViewObj == null) {
    editorInput=null;
  }
 else {
    String key=reposViewObj.getRepositoryObjectType().getKey();
    Item item=reposViewObj.getProperty().getItem();
    if (ERepositoryObjectType.METADATA_CONNECTIONS.getKey().equals(key) || ERepositoryObjectType.METADATA_MDMCONNECTION.getKey().equals(key)) {
      editorInput=new ConnectionItemEditorInput(item);
      editorID=ConnectionEditor.class.getName();
    }
 else     if (ERepositoryObjectType.TDQ_ANALYSIS_ELEMENT.getKey().equals(key)) {
      editorInput=new AnalysisItemEditorInput(item);
      Analysis analysis=((TDQAnalysisItem)item).getAnalysis();
      AnalysisParameters parameters=analysis.getParameters();
      AnalysisType analysisType=parameters.getAnalysisType();
      EList<ModelElement> analysedElements=analysis.getContext().getAnalysedElements();
      RepositoryNode connectionRepositoryNode=null;
      if (analysedElements.size() > 0) {
        ModelElement modelElement=analysedElements.get(0);
        if (modelElement instanceof Catalog) {
          Catalog catalog=SwitchHelpers.CATALOG_SWITCH.caseCatalog((Catalog)modelElement);
          connection=ConnectionHelper.getConnection(catalog);
        }
 else         if (modelElement instanceof Schema) {
          Schema schema=SwitchHelpers.SCHEMA_SWITCH.caseSchema((Schema)modelElement);
          if (schema != null) {
            connection=ConnectionHelper.getConnection(schema);
          }
        }
 else         if (modelElement instanceof TdTable) {
          TdTable tdTable=SwitchHelpers.TABLE_SWITCH.caseTdTable((TdTable)modelElement);
          connection=ConnectionHelper.getConnection(tdTable);
        }
 else         if (modelElement instanceof TdView) {
          TdView tdView=SwitchHelpers.VIEW_SWITCH.caseView((View)modelElement);
          connection=ConnectionHelper.getConnection(tdView);
        }
 else         if (modelElement instanceof TdColumn) {
          TdColumn tdColumn=SwitchHelpers.COLUMN_SWITCH.caseTdColumn((TdColumn)modelElement);
          connection=ConnectionHelper.getConnection(tdColumn);
        }
        connectionRepositoryNode=RepositoryNodeHelper.recursiveFind(connection);
      }
      ((AnalysisItemEditorInput)editorInput).setConnectionNode((DBConnectionRepNode)connectionRepositoryNode);
      editorID=AnalysisEditor.class.getName();
    }
 else     if (ERepositoryObjectType.TDQ_INDICATOR_ELEMENT.getKey().equals(key)) {
      editorInput=new IndicatorDefinitionItemEditorInput(item);
      editorID=IndicatorEditor.class.getName();
    }
 else     if (ERepositoryObjectType.TDQ_BUSINESSRULE_ELEMENT.getKey().equals(key)) {
      editorInput=new BusinessRuleItemEditorInput(item);
      editorID=DQRuleEditor.class.getName();
    }
 else     if (ERepositoryObjectType.TDQ_PATTERN_ELEMENT.getKey().equals(key)) {
      editorInput=new PatternItemEditorInput(item);
      editorID=PatternEditor.class.getName();
    }
 else     if (ERepositoryObjectType.TDQ_REPORT_ELEMENT.getKey().equals(key)) {
      editorInput=new ReportItemEditorInput(item);
      editorID=""String_Node_Str"";
    }
  }
  return editorInput;
}","public AbstractItemEditorInput computeEditorInput(){
  if (reposViewObj == null) {
    editorInput=null;
  }
 else {
    String key=reposViewObj.getRepositoryObjectType().getKey();
    Item item=reposViewObj.getProperty().getItem();
    if (ERepositoryObjectType.METADATA_CONNECTIONS.getKey().equals(key) || ERepositoryObjectType.METADATA_MDMCONNECTION.getKey().equals(key)) {
      editorInput=new ConnectionItemEditorInput(item);
      editorID=ConnectionEditor.class.getName();
    }
 else     if (ERepositoryObjectType.TDQ_ANALYSIS_ELEMENT.getKey().equals(key)) {
      editorInput=new AnalysisItemEditorInput(item);
      Analysis analysis=((TDQAnalysisItem)item).getAnalysis();
      AnalysisParameters parameters=analysis.getParameters();
      AnalysisType analysisType=parameters.getAnalysisType();
      EList<ModelElement> analysedElements=analysis.getContext().getAnalysedElements();
      RepositoryNode connectionRepositoryNode=null;
      if (analysedElements.size() > 0) {
        ModelElement modelElement=analysedElements.get(0);
        if (modelElement instanceof Connection) {
          connection=(Connection)modelElement;
        }
        if (modelElement instanceof Catalog) {
          Catalog catalog=SwitchHelpers.CATALOG_SWITCH.caseCatalog((Catalog)modelElement);
          connection=ConnectionHelper.getConnection(catalog);
        }
 else         if (modelElement instanceof Schema) {
          Schema schema=SwitchHelpers.SCHEMA_SWITCH.caseSchema((Schema)modelElement);
          if (schema != null) {
            connection=ConnectionHelper.getConnection(schema);
          }
        }
 else         if (modelElement instanceof TdTable) {
          TdTable tdTable=SwitchHelpers.TABLE_SWITCH.caseTdTable((TdTable)modelElement);
          connection=ConnectionHelper.getConnection(tdTable);
        }
 else         if (modelElement instanceof TdView) {
          TdView tdView=SwitchHelpers.VIEW_SWITCH.caseView((View)modelElement);
          connection=ConnectionHelper.getConnection(tdView);
        }
 else         if (modelElement instanceof TdColumn) {
          TdColumn tdColumn=SwitchHelpers.COLUMN_SWITCH.caseTdColumn((TdColumn)modelElement);
          connection=ConnectionHelper.getConnection(tdColumn);
        }
        connectionRepositoryNode=RepositoryNodeHelper.recursiveFind(connection);
      }
      ((AnalysisItemEditorInput)editorInput).setConnectionNode((DBConnectionRepNode)connectionRepositoryNode);
      editorID=AnalysisEditor.class.getName();
    }
 else     if (ERepositoryObjectType.TDQ_INDICATOR_ELEMENT.getKey().equals(key)) {
      editorInput=new IndicatorDefinitionItemEditorInput(item);
      editorID=IndicatorEditor.class.getName();
    }
 else     if (ERepositoryObjectType.TDQ_BUSINESSRULE_ELEMENT.getKey().equals(key)) {
      editorInput=new BusinessRuleItemEditorInput(item);
      editorID=DQRuleEditor.class.getName();
    }
 else     if (ERepositoryObjectType.TDQ_PATTERN_ELEMENT.getKey().equals(key)) {
      editorInput=new PatternItemEditorInput(item);
      editorID=PatternEditor.class.getName();
    }
 else     if (ERepositoryObjectType.TDQ_REPORT_ELEMENT.getKey().equals(key)) {
      editorInput=new ReportItemEditorInput(item);
      editorID=""String_Node_Str"";
    }
  }
  return editorInput;
}",0.9834442209500232
138473,"/** 
 * DOC xqliu Comment method ""installDND"". bug 8791 2009-08-31.
 * @param myTable
 */
public static void installDND(final Table targetControl){
  IWorkbenchPage activePage=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
  DQRespositoryView findView=(DQRespositoryView)activePage.findView(DQRespositoryView.ID);
  final CommonViewer commonViewer=findView.getCommonViewer();
  final LocalSelectionTransfer transfer=LocalSelectionTransfer.getTransfer();
  int operations=DND.DROP_COPY | DND.DROP_MOVE;
  Transfer[] transfers=new Transfer[]{transfer};
  DropTarget dropTarget=new DropTarget(targetControl,operations);
  dropTarget.setTransfer(transfers);
  DropTargetListener dndListener=new TableDropTargetEffect(targetControl){
    ISelectionReceiver receiver=null;
    @Override public void dragEnter(    DropTargetEvent event){
      super.dragEnter(event);
      IStructuredSelection selection=(IStructuredSelection)LocalSelectionTransfer.getTransfer().getSelection();
      Object object=selection.getFirstElement();
      if (object instanceof TdColumn) {
        receiver=new ColumnReceiverTable();
      }
      if (receiver == null) {
        event.detail=DND.DROP_NONE;
      }
 else {
        event.feedback=DND.FEEDBACK_EXPAND;
        receiver.doDropValidation(event,commonViewer);
      }
    }
    @Override public void dragOver(    DropTargetEvent event){
      if (receiver == null)       return;
      super.dragOver(event);
      receiver.doDropValidation(event,commonViewer);
    }
    @SuppressWarnings(""String_Node_Str"") @Override public void drop(    DropTargetEvent event){
      if (receiver == null)       return;
      int index=targetControl.getItemCount();
      super.drop(event);
      if (event.item == null) {
        index=-1;
      }
 else {
        TableItem item=(TableItem)event.item;
        TableItem[] items=targetControl.getItems();
        for (int i=0; i < items.length; i++) {
          if (items[i] == item) {
            index=i;
            break;
          }
        }
      }
      receiver.drop(event,commonViewer,index);
    }
  }
;
  dropTarget.addDropListener(dndListener);
}","/** 
 * DOC xqliu Comment method ""installDND"". bug 8791 2009-08-31.
 * @param myTable
 */
public static void installDND(final Table targetControl){
  IWorkbenchPage activePage=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
  DQRespositoryView findView=(DQRespositoryView)activePage.findView(DQRespositoryView.ID);
  final CommonViewer commonViewer=findView.getCommonViewer();
  final LocalSelectionTransfer transfer=LocalSelectionTransfer.getTransfer();
  int operations=DND.DROP_COPY | DND.DROP_MOVE;
  Transfer[] transfers=new Transfer[]{transfer};
  DropTarget dropTarget=new DropTarget(targetControl,operations);
  dropTarget.setTransfer(transfers);
  DropTargetListener dndListener=new TableDropTargetEffect(targetControl){
    ISelectionReceiver receiver=null;
    @Override public void dragEnter(    DropTargetEvent event){
      super.dragEnter(event);
      IStructuredSelection selection=(IStructuredSelection)LocalSelectionTransfer.getTransfer().getSelection();
      Object object=selection.getFirstElement();
      if (object instanceof DBColumnRepNode) {
        receiver=new ColumnReceiverTable();
      }
      if (receiver == null) {
        event.detail=DND.DROP_NONE;
      }
 else {
        event.feedback=DND.FEEDBACK_EXPAND;
        receiver.doDropValidation(event,commonViewer);
      }
    }
    @Override public void dragOver(    DropTargetEvent event){
      if (receiver == null)       return;
      super.dragOver(event);
      receiver.doDropValidation(event,commonViewer);
    }
    @SuppressWarnings(""String_Node_Str"") @Override public void drop(    DropTargetEvent event){
      if (receiver == null)       return;
      int index=targetControl.getItemCount();
      super.drop(event);
      if (event.item == null) {
        index=-1;
      }
 else {
        TableItem item=(TableItem)event.item;
        TableItem[] items=targetControl.getItems();
        for (int i=0; i < items.length; i++) {
          if (items[i] == item) {
            index=i;
            break;
          }
        }
      }
      receiver.drop(event,commonViewer,index);
    }
  }
;
  dropTarget.addDropListener(dndListener);
}",0.9974483878450476
138474,"@Override public void dragEnter(DropTargetEvent event){
  super.dragEnter(event);
  IStructuredSelection selection=(IStructuredSelection)LocalSelectionTransfer.getTransfer().getSelection();
  Object object=selection.getFirstElement();
  if (object instanceof TdColumn) {
    receiver=new ColumnReceiverTable();
  }
  if (receiver == null) {
    event.detail=DND.DROP_NONE;
  }
 else {
    event.feedback=DND.FEEDBACK_EXPAND;
    receiver.doDropValidation(event,commonViewer);
  }
}","@Override public void dragEnter(DropTargetEvent event){
  super.dragEnter(event);
  IStructuredSelection selection=(IStructuredSelection)LocalSelectionTransfer.getTransfer().getSelection();
  Object object=selection.getFirstElement();
  if (object instanceof DBColumnRepNode) {
    receiver=new ColumnReceiverTable();
  }
  if (receiver == null) {
    event.detail=DND.DROP_NONE;
  }
 else {
    event.feedback=DND.FEEDBACK_EXPAND;
    receiver.doDropValidation(event,commonViewer);
  }
}",0.9886480908152736
138475,"public void doDropValidation(DropTargetEvent event,CommonViewer commonViewer){
  event.detail=DND.DROP_NONE;
  IRepositoryNode firstElement=(RepositoryNode)((StructuredSelection)LocalSelectionTransfer.getTransfer().getSelection()).getFirstElement();
  IRepositoryViewObject repViewObj=firstElement.getObject();
  if (repViewObj instanceof MetadataColumnRepositoryObject) {
    TdColumn column=(TdColumn)firstElement;
    Table table=(Table)((DropTarget)event.widget).getControl();
    AbstractColumnDropTree viewer=(AbstractColumnDropTree)table.getData();
    if (viewer != null && viewer.canDrop(firstElement)) {
      event.detail=DND.DROP_MOVE;
    }
  }
}","public void doDropValidation(DropTargetEvent event,CommonViewer commonViewer){
  event.detail=DND.DROP_NONE;
  IRepositoryNode firstElement=(RepositoryNode)((StructuredSelection)LocalSelectionTransfer.getTransfer().getSelection()).getFirstElement();
  IRepositoryViewObject repViewObj=firstElement.getObject();
  if (repViewObj instanceof MetadataColumnRepositoryObject) {
    DBColumnRepNode column=(DBColumnRepNode)firstElement;
    Table table=(Table)((DropTarget)event.widget).getControl();
    AbstractColumnDropTree viewer=(AbstractColumnDropTree)table.getData();
    if (viewer != null && viewer.canDrop(firstElement)) {
      event.detail=DND.DROP_MOVE;
    }
  }
}",0.96996996996997
138476,"/** 
 * Change connection informations with server, port etc., and update related analyses. MOD yyi 9082 2010-02-25
 */
protected void changeConnectionInformations(){
  if (connectionItem != null) {
    RepositoryNode node=RepositoryNodeHelper.recursiveFind(connectionItem.getConnection());
    IWizard wizard=null;
    if (node != null) {
      if (node instanceof DBConnectionRepNode) {
        wizard=new DatabaseWizard(PlatformUI.getWorkbench(),false,node,null);
      }
 else       if (node instanceof MDMConnectionRepNode) {
        if (PluginChecker.isMDMPluginLoaded() && GlobalServiceRegister.getDefault().isServiceRegistered(IMDMProviderService.class)) {
          IMDMProviderService service=(IMDMProviderService)GlobalServiceRegister.getDefault().getService(IMDMProviderService.class);
          if (service != null) {
            wizard=service.newMDMWizard(PlatformUI.getWorkbench(),false,node,null);
          }
        }
      }
    }
    if (wizard != null) {
      WizardDialog dialog=new WizardDialog(null,wizard);
      dialog.setPageSize(550,550);
      wizard.setContainer(dialog);
      dialog.open();
    }
  }
}","/** 
 * Change connection informations with server, port etc., and update related analyses. MOD yyi 9082 2010-02-25
 */
protected void changeConnectionInformations(){
  if (connectionItem != null) {
    if (connectionItem.eIsProxy()) {
      connectionItem=(ConnectionItem)EObjectHelper.resolveObject(connectionItem);
    }
    RepositoryNode node=RepositoryNodeHelper.recursiveFind(connectionItem.getConnection());
    IWizard wizard=null;
    if (node != null) {
      if (node instanceof DBConnectionRepNode) {
        wizard=new DatabaseWizard(PlatformUI.getWorkbench(),false,node,null);
      }
 else       if (node instanceof MDMConnectionRepNode) {
        if (PluginChecker.isMDMPluginLoaded() && GlobalServiceRegister.getDefault().isServiceRegistered(IMDMProviderService.class)) {
          IMDMProviderService service=(IMDMProviderService)GlobalServiceRegister.getDefault().getService(IMDMProviderService.class);
          if (service != null) {
            wizard=service.newMDMWizard(PlatformUI.getWorkbench(),false,node,null);
          }
        }
      }
    }
    if (wizard != null) {
      WizardDialog dialog=new WizardDialog(null,wizard);
      dialog.setPageSize(550,550);
      wizard.setContainer(dialog);
      dialog.open();
    }
  }
}",0.9478514810179391
138477,"protected void initMetaTextFied(){
  Property property=getProperty();
  if (property != null) {
    String name=property.getLabel();
    String purpose=property.getPurpose();
    String description=property.getDescription();
    String author=property.getAuthor().getLogin();
    String version=property.getVersion();
    String devStatus=property.getStatusCode();
    String lockerStr=null;
    ItemState state=property.getItem().getState();
    if (state != null) {
      User locker=state.getLocker();
      if (locker != null) {
        lockerStr=locker.getLogin();
      }
    }
    nameText.setText(name == null ? PluginConstant.EMPTY_STRING : name);
    purposeText.setText(purpose == null ? PluginConstant.EMPTY_STRING : purpose);
    descriptionText.setText(description == null ? PluginConstant.EMPTY_STRING : description);
    authorText.setText(author == null ? PluginConstant.EMPTY_STRING : author);
    authorText.setEnabled(false);
    lockerText.setText(lockerStr == null ? PluginConstant.EMPTY_STRING : lockerStr);
    lockerText.setEnabled(false);
    statusCombo.setText(devStatus == null ? PluginConstant.EMPTY_STRING : devStatus);
  }
}","protected void initMetaTextFied(){
  Property property=getProperty();
  if (property != null) {
    String name=property.getLabel();
    String purpose=property.getPurpose();
    String description=property.getDescription();
    String author=property.getAuthor().getLogin();
    String version=property.getVersion();
    String devStatus=property.getStatusCode();
    String lockerStr=null;
    ItemState state=property.getItem().getState();
    if (state != null) {
      User locker=state.getLocker();
      if (locker != null) {
        lockerStr=locker.getLogin();
      }
    }
    nameText.setText(name == null ? PluginConstant.EMPTY_STRING : name);
    purposeText.setText(purpose == null ? PluginConstant.EMPTY_STRING : purpose);
    descriptionText.setText(description == null ? PluginConstant.EMPTY_STRING : description);
    authorText.setText(author == null ? PluginConstant.EMPTY_STRING : author);
    authorText.setEnabled(false);
    lockerText.setText(lockerStr == null ? PluginConstant.EMPTY_STRING : lockerStr);
    lockerText.setEnabled(false);
    versionText.setText(version == null ? VersionUtils.DEFAULT_VERSION : version);
    statusCombo.setText(devStatus == null ? PluginConstant.EMPTY_STRING : devStatus);
  }
}",0.9653444676409186
138478,"/** 
 * DOC qiongli close editor by file.
 * @param fileRes
 */
public void closeEditorIfOpened(Property property){
  IWorkbenchPage activePage=CorePlugin.getDefault().getWorkbench().getActiveWorkbenchWindow().getActivePage();
  IEditorReference[] editorReferences=activePage.getEditorReferences();
  IEditorInput editorInput=null;
  for (  IEditorReference reference : editorReferences) {
    try {
      editorInput=reference.getEditorInput();
      if (editorInput instanceof FileEditorInput) {
        FileEditorInput fileInput=(FileEditorInput)editorInput;
        if (property.eResource() != null) {
          IPath propPath=new Path(property.eResource().getURI().lastSegment()).removeFileExtension();
          IPath filePath=new Path(fileInput.getFile().getName()).removeFileExtension();
          if (filePath.equals(propPath)) {
            activePage.closeEditor(reference.getEditor(false),false);
            break;
          }
        }
      }
 else       if (editorInput instanceof SQLEditorInput) {
        SQLEditorInput sqlEditorInput=(SQLEditorInput)editorInput;
        if (sqlEditorInput.getUser() == null) {
          if (sqlEditorInput.getName().equals(property.getLabel())) {
            activePage.closeEditor(reference.getEditor(false),false);
          }
        }
 else         if (sqlEditorInput.getUser().getAlias().getName().equals(property.getLabel())) {
          activePage.closeEditor(reference.getEditor(false),false);
        }
      }
 else       if (editorInput instanceof ConnectionItemEditorInput) {
        ConnectionItemEditorInput connectionInput=(ConnectionItemEditorInput)editorInput;
        if (property != null && property.equals(connectionInput.getItem().getProperty())) {
          activePage.closeEditor(reference.getEditor(false),false);
        }
      }
    }
 catch (    PartInitException e) {
      e.printStackTrace();
    }
  }
}","/** 
 * DOC qiongli close editor by file.
 * @param fileRes
 */
public void closeEditorIfOpened(Item item){
  IWorkbenchPage activePage=CorePlugin.getDefault().getWorkbench().getActiveWorkbenchWindow().getActivePage();
  IEditorReference[] editorReferences=activePage.getEditorReferences();
  IEditorInput editorInput=null;
  Property property=item.getProperty();
  for (  IEditorReference reference : editorReferences) {
    try {
      editorInput=reference.getEditorInput();
      if (editorInput instanceof FileEditorInput) {
        FileEditorInput fileInput=(FileEditorInput)editorInput;
        if (property.eResource() != null) {
          IPath itemPath=PropertyHelper.getItemPath(property);
          if (itemPath != null && itemPath.equals(fileInput.getFile().getFullPath())) {
            activePage.closeEditor(reference.getEditor(false),false);
            break;
          }
        }
      }
 else       if (editorInput instanceof SQLEditorInput) {
        SQLEditorInput sqlEditorInput=(SQLEditorInput)editorInput;
        if (sqlEditorInput.getUser() == null) {
          if (sqlEditorInput.getName().equals(property.getLabel())) {
            activePage.closeEditor(reference.getEditor(false),false);
          }
        }
 else         if (sqlEditorInput.getUser().getAlias().getName().equals(property.getLabel())) {
          activePage.closeEditor(reference.getEditor(false),false);
        }
      }
 else       if (editorInput instanceof AbstractItemEditorInput) {
        AbstractItemEditorInput input=(AbstractItemEditorInput)editorInput;
        Item it=input.getItem();
        if (it != null && item.equals(it)) {
          activePage.closeEditor(reference.getEditor(false),false);
        }
      }
    }
 catch (    PartInitException e) {
      e.printStackTrace();
    }
  }
}",0.8593073593073594
138479,"/** 
 * DOC qiongli Comment method ""getChildren"".
 * @param rcBinNode
 * @return
 */
public void loadChildren(RecycleBinRepNode rcBinNode){
  List<RepositoryNode> foldersList=new ArrayList<RepositoryNode>();
  Project newProject=ProjectManager.getInstance().getCurrentProject();
  List<FolderItem> folderItems=newProject.getEmfProject().getFolders();
  for (  FolderItem folder : new ArrayList<FolderItem>(folderItems)) {
    if (WorkbenchUtils.isTDQOrMetadataRootFolder(folder)) {
      addItemToRecycleBin(rcBinNode,folder,foldersList);
    }
  }
  recycleBinChildren=rcBinNode.getChildren();
}","/** 
 * DOC qiongli Comment method ""getChildren"".
 * @param rcBinNode
 * @return
 */
public void loadChildren(RecycleBinRepNode rcBinNode){
  List<RepositoryNode> foldersList=new ArrayList<RepositoryNode>();
  Project newProject=ProjectManager.getInstance().getCurrentProject();
  List<FolderItem> folderItems=ProjectManager.getInstance().getFolders(newProject.getEmfProject());
  for (  FolderItem folder : new ArrayList<FolderItem>(folderItems)) {
    if (WorkbenchUtils.isTDQOrMetadataRootFolder(folder)) {
      addItemToRecycleBin(rcBinNode,folder,foldersList);
    }
  }
  recycleBinChildren=rcBinNode.getChildren();
}",0.9573770491803278
138480,"public void openEditor(Item item){
  Class<?> clazz=null;
  IEditorInput editorInput=null;
  if (item instanceof ConnectionItem) {
    clazz=ConnectionEditor.class;
    editorInput=new ConnectionItemEditorInput(item);
  }
  if (editorInput != null && clazz != null) {
    CorePlugin.getDefault().closeEditorIfOpened(item.getProperty());
    CorePlugin.getDefault().openEditor(editorInput,clazz.getName());
  }
}","public void openEditor(Item item){
  Class<?> clazz=null;
  IEditorInput editorInput=null;
  if (item instanceof ConnectionItem) {
    clazz=ConnectionEditor.class;
    editorInput=new ConnectionItemEditorInput(item);
  }
  if (editorInput != null && clazz != null) {
    CorePlugin.getDefault().closeEditorIfOpened(item);
    CorePlugin.getDefault().openEditor(editorInput,clazz.getName());
  }
}",0.9554455445544554
138481,"/** 
 * DOC qiongli Comment method ""physicalDeleteDependencies"".
 * @param dependences
 * @return
 */
private boolean physicalDeleteDependencies(List<ModelElement> dependences){
  boolean isSucceed=true;
  try {
    for (    ModelElement mod : dependences) {
      List<ModelElement> subDependences=EObjectHelper.getDependencyClients(mod);
      if (subDependences != null && !subDependences.isEmpty()) {
        isSucceed=physicalDeleteDependencies(subDependences);
      }
      if (!isSucceed) {
        return false;
      }
      currentNode=RepositoryNodeHelper.recursiveFind(mod);
      if (currentNode != null && !RepositoryNodeHelper.isStateDeleted(currentNode)) {
        if (currentNode.getObject() != null)         CorePlugin.getDefault().closeEditorIfOpened(currentNode.getObject().getProperty());
        super.run();
        CorePlugin.getDefault().refreshDQView();
      }
      currentNode=findRepNodeInRecBin(currentNode);
      if (currentNode != null) {
        super.run();
        IFile propertyFile=PropertyHelper.getPropertyFile(mod);
        if (propertyFile != null && propertyFile.exists()) {
          isSucceed=false;
        }
 else {
          EObjectHelper.removeDependencys(mod);
        }
      }
    }
  }
 catch (  Exception exc) {
    log.error(exc,exc);
    return false;
  }
  return isSucceed;
}","/** 
 * DOC qiongli Comment method ""physicalDeleteDependencies"".
 * @param dependences
 * @return
 */
private boolean physicalDeleteDependencies(List<ModelElement> dependences){
  boolean isSucceed=true;
  try {
    for (    ModelElement mod : dependences) {
      List<ModelElement> subDependences=EObjectHelper.getDependencyClients(mod);
      if (subDependences != null && !subDependences.isEmpty()) {
        isSucceed=physicalDeleteDependencies(subDependences);
      }
      if (!isSucceed) {
        return false;
      }
      RepositoryNode tempNode=RepositoryNodeHelper.recursiveFind(mod);
      if (tempNode != null && !RepositoryNodeHelper.isStateDeleted(tempNode)) {
        if (tempNode.getObject() != null) {
          CorePlugin.getDefault().closeEditorIfOpened(tempNode.getObject().getProperty().getItem());
        }
        excuteSuperRun(tempNode);
        CorePlugin.getDefault().refreshDQView();
      }
      tempNode=RepositoryNodeHelper.recursiveFind(mod);
      if (tempNode != null) {
        excuteSuperRun(tempNode);
        IFile propertyFile=PropertyHelper.getPropertyFile(mod);
        if (propertyFile != null && propertyFile.exists()) {
          isSucceed=false;
        }
 else {
          EObjectHelper.removeDependencys(mod);
        }
      }
    }
  }
 catch (  Exception exc) {
    log.error(exc,exc);
    return false;
  }
  return isSucceed;
}",0.8908489525909592
138482,"private void closeEditors(Object[] selections){
  for (  Object obj : selections) {
    if (obj instanceof RepositoryNode) {
      RepositoryNode node=(RepositoryNode)obj;
      if (node.getObject() != null) {
        CorePlugin.getDefault().closeEditorIfOpened(node.getObject().getProperty());
      }
    }
  }
}","private void closeEditors(ISelection selection){
  Object[] objs=((IStructuredSelection)selection).toArray();
  for (  Object obj : objs) {
    if (obj instanceof RepositoryNode) {
      RepositoryNode node=(RepositoryNode)obj;
      if (node.getObject() != null) {
        CorePlugin.getDefault().closeEditorIfOpened(node.getObject().getProperty().getItem());
      }
    }
  }
}",0.8443804034582133
138483,"@Override public void run(){
  ISelection selection=this.getSelection();
  Object[] objs=((IStructuredSelection)selection).toArray();
  for (  Object obj : objs) {
    if (obj instanceof RepositoryNode) {
      RepositoryNode node=(RepositoryNode)obj;
      boolean isStateDeleted=RepositoryNodeHelper.isStateDeleted(node);
      if (!isStateDeleted) {
        closeEditors(objs);
        currentNode=null;
        super.run();
        break;
      }
      if (node.getType() == ENodeType.SIMPLE_FOLDER) {
        List<IRepositoryNode> newLs=new ArrayList<IRepositoryNode>();
        findRepNodesByFolderNode(node,newLs);
        for (        IRepositoryNode subNode : newLs) {
          if (showDependenciesDialog((RepositoryNode)subNode)) {
            currentNode=(RepositoryNode)subNode;
            super.run();
          }
        }
      }
 else {
        if (showDependenciesDialog(node)) {
          EObjectHelper.removeDependencys(RepositoryNodeHelper.getModelElementFromRepositoryNode(node));
          currentNode=node;
          super.run();
        }
      }
    }
  }
  CorePlugin.getDefault().refreshDQView();
  CorePlugin.getDefault().refreshWorkSpace();
}","@Override public void run(){
  ISelection selection=this.getSelection();
  for (  Object obj : ((IStructuredSelection)selection).toArray()) {
    if (obj instanceof RepositoryNode) {
      RepositoryNode node=(RepositoryNode)obj;
      boolean isStateDeleted=RepositoryNodeHelper.isStateDeleted(node);
      if (!isStateDeleted) {
        closeEditors(selection);
        excuteSuperRun(null);
        break;
      }
      if (node.getType() == ENodeType.SIMPLE_FOLDER) {
        List<IRepositoryNode> newLs=new ArrayList<IRepositoryNode>();
        findRepNodesByFolderNode(node,newLs);
        for (        IRepositoryNode subNode : newLs) {
          if (showDependenciesDialog((RepositoryNode)subNode)) {
            excuteSuperRun((RepositoryNode)subNode);
          }
        }
        excuteSuperRun(node);
      }
 else {
        if (showDependenciesDialog(node)) {
          EObjectHelper.removeDependencys(RepositoryNodeHelper.getModelElementFromRepositoryNode(node));
          excuteSuperRun(node);
        }
      }
    }
  }
  CorePlugin.getDefault().refreshDQView();
  CorePlugin.getDefault().refreshWorkSpace();
}",0.7237185056472633
138484,"/** 
 * DOC xqliu Comment method ""getPath"".
 * @param element
 * @param itemPath
 * @return
 */
private IPath getPath(ModelElement element,IPath itemPath){
  IPath path=new Path(""String_Node_Str"");
  if (element instanceof DatabaseConnection) {
    path=itemPath.makeRelativeTo(ResourceManager.getTDQConnectionFolder().getFullPath());
  }
 else   if (element instanceof MDMConnection) {
    path=itemPath.makeRelativeTo(ResourceManager.getMDMConnectionFolder().getFullPath());
  }
 else   if (element instanceof Analysis) {
    path=itemPath.makeRelativeTo(ResourceManager.getAnalysisFolder().getFullPath());
    if (path.isEmpty()) {
      return itemPath;
    }
  }
 else   if (element instanceof Report) {
    path=itemPath.makeRelativeTo(ResourceManager.getReportsFolder().getFullPath());
    if (path.isEmpty()) {
      return itemPath;
    }
  }
 else   if (element instanceof IndicatorDefinition) {
    if (element instanceof WhereRule) {
      path=itemPath.makeRelativeTo(ResourceManager.getRulesSQLFolder().getFullPath());
    }
 else {
      path=itemPath.makeRelativeTo(ResourceManager.getIndicatorFolder().getFullPath());
    }
  }
 else   if (element instanceof Pattern) {
    path=itemPath.makeRelativeTo(ResourceManager.getPatternFolder().getFullPath());
  }
  return path;
}","/** 
 * DOC xqliu Comment method ""getPath"".
 * @param element
 * @param itemPath
 * @return
 */
private IPath getPath(ModelElement element,IPath itemPath){
  IPath path=new Path(""String_Node_Str"");
  if (element instanceof DatabaseConnection) {
    path=itemPath.makeRelativeTo(ResourceManager.getTDQConnectionFolder().getFullPath());
  }
 else   if (element instanceof MDMConnection) {
    path=itemPath.makeRelativeTo(ResourceManager.getMDMConnectionFolder().getFullPath());
  }
 else   if (element instanceof Analysis) {
    path=itemPath.makeRelativeTo(ResourceManager.getAnalysisFolder().getFullPath());
  }
 else   if (element instanceof Report) {
    path=itemPath.makeRelativeTo(ResourceManager.getReportsFolder().getFullPath());
  }
 else   if (element instanceof IndicatorDefinition) {
    if (element instanceof WhereRule) {
      path=itemPath.makeRelativeTo(ResourceManager.getRulesSQLFolder().getFullPath());
    }
 else {
      path=itemPath.makeRelativeTo(ResourceManager.getIndicatorFolder().getFullPath());
    }
  }
 else   if (element instanceof Pattern) {
    path=itemPath.makeRelativeTo(ResourceManager.getPatternFolder().getFullPath());
  }
  return path;
}",0.86084142394822
138485,"@Override protected String createSqlStatement(Analysis analysis){
  if (isDelimitedFile) {
    return ""String_Node_Str"";
  }
  this.cachedAnalysis=analysis;
  StringBuilder sql=new StringBuilder(""String_Node_Str"");
  EList<Indicator> indicators=analysis.getResults().getIndicators();
  EList<ModelElement> analysedElements=null;
  for (  Indicator indicator : indicators) {
    if (ColumnsetPackage.eINSTANCE.getColumnSetMultiValueIndicator().isSuperTypeOf(indicator.eClass())) {
      ColumnSetMultiValueIndicator colSetMultValIndicator=(ColumnSetMultiValueIndicator)indicator;
      if (analysedElements == null) {
        analysedElements=colSetMultValIndicator.getAnalyzedColumns();
      }
 else {
        analysedElements.addAll(colSetMultValIndicator.getAnalyzedColumns());
      }
    }
  }
  if (analysedElements == null || analysedElements.isEmpty()) {
    this.errorMessage=Messages.getString(""String_Node_Str"",analysis.getName());
    return null;
  }
  Set<ColumnSet> fromPart=new HashSet<ColumnSet>();
  final Iterator<ModelElement> iterator=analysedElements.iterator();
  while (iterator.hasNext()) {
    ModelElement modelElement=iterator.next();
    TdColumn col=SwitchHelpers.COLUMN_SWITCH.doSwitch(modelElement);
    if (col == null) {
      this.errorMessage=Messages.getString(""String_Node_Str"",modelElement);
      return null;
    }
    Classifier owner=col.getOwner();
    if (owner == null) {
      this.errorMessage=Messages.getString(""String_Node_Str"",col.getName());
    }
    ColumnSet colSet=SwitchHelpers.COLUMN_SET_SWITCH.doSwitch(owner);
    if (colSet == null) {
      this.errorMessage=Messages.getString(""String_Node_Str"",col.getName(),colSet);
      return null;
    }
    if (!analysis.getParameters().isStoreData()) {
      sql.append(this.quote(col.getName()));
      if (iterator.hasNext()) {
        sql.append(',');
      }
    }
    fromPart.add(colSet);
  }
  if (fromPart.size() != 1) {
    log.error(""String_Node_Str"" + fromPart.size() + ""String_Node_Str"");
    this.errorMessage=""String_Node_Str"";
    return null;
  }
  if (analysis.getParameters().isStoreData()) {
    List<TdColumn> columnList=TableHelper.getColumns(SwitchHelpers.TABLE_SWITCH.doSwitch(analysedElements.get(0).eContainer()));
    Iterator<TdColumn> iter=columnList.iterator();
    while (iter.hasNext()) {
      TdColumn column=iter.next();
      sql.append(this.quote(column.getName()));
      if (iter.hasNext()) {
        sql.append(',');
      }
    }
  }
  sql.append(dbms().from());
  ModelElement element=fromPart.iterator().next();
  Package parentRelation=PackageHelper.getParentPackage((MetadataTable)fromPart.iterator().next());
  if (parentRelation instanceof Schema) {
    sql.append(dbms().toQualifiedName(null,parentRelation.getName(),element.getName()));
  }
 else   if (parentRelation instanceof Catalog) {
    String ownerUser=null;
    if (ConnectionUtils.isSybaseeDBProducts(dbms().getDbmsName())) {
      ownerUser=ColumnSetHelper.getTableOwner((ModelElement)element);
    }
    sql.append(dbms().toQualifiedName(parentRelation.getName(),ownerUser,element.getName()));
  }
  ModelElementAnalysisHandler handler=new ModelElementAnalysisHandler();
  handler.setAnalysis(analysis);
  String stringDataFilter=handler.getStringDataFilter();
  sql.append(GenericSQLHandler.WHERE_CLAUSE);
  String sqlStatement=sql.toString();
  sqlStatement=dbms().addWhereToStatement(sqlStatement,stringDataFilter);
  return sqlStatement;
}","@Override protected String createSqlStatement(Analysis analysis){
  if (isDelimitedFile) {
    return ""String_Node_Str"";
  }
  this.cachedAnalysis=analysis;
  StringBuilder sql=new StringBuilder(""String_Node_Str"");
  EList<Indicator> indicators=analysis.getResults().getIndicators();
  EList<MetadataColumn> analysedElements=null;
  for (  Indicator indicator : indicators) {
    if (ColumnsetPackage.eINSTANCE.getColumnSetMultiValueIndicator().isSuperTypeOf(indicator.eClass())) {
      ColumnSetMultiValueIndicator colSetMultValIndicator=(ColumnSetMultiValueIndicator)indicator;
      if (analysedElements == null) {
        analysedElements=colSetMultValIndicator.getAnalyzedColumns();
      }
 else {
        analysedElements.addAll(colSetMultValIndicator.getAnalyzedColumns());
      }
    }
  }
  if (analysedElements == null || analysedElements.isEmpty()) {
    this.errorMessage=Messages.getString(""String_Node_Str"",analysis.getName());
    return null;
  }
  Set<ColumnSet> fromPart=new HashSet<ColumnSet>();
  final Iterator<MetadataColumn> iterator=analysedElements.iterator();
  while (iterator.hasNext()) {
    ModelElement modelElement=iterator.next();
    TdColumn col=SwitchHelpers.COLUMN_SWITCH.doSwitch(modelElement);
    if (col == null) {
      this.errorMessage=Messages.getString(""String_Node_Str"",modelElement);
      return null;
    }
    Classifier owner=col.getOwner();
    if (owner == null) {
      this.errorMessage=Messages.getString(""String_Node_Str"",col.getName());
    }
    ColumnSet colSet=SwitchHelpers.COLUMN_SET_SWITCH.doSwitch(owner);
    if (colSet == null) {
      this.errorMessage=Messages.getString(""String_Node_Str"",col.getName(),colSet);
      return null;
    }
    if (!analysis.getParameters().isStoreData()) {
      sql.append(this.quote(col.getName()));
      if (iterator.hasNext()) {
        sql.append(',');
      }
    }
    fromPart.add(colSet);
  }
  if (fromPart.size() != 1) {
    log.error(""String_Node_Str"" + fromPart.size() + ""String_Node_Str"");
    this.errorMessage=""String_Node_Str"";
    return null;
  }
  if (analysis.getParameters().isStoreData()) {
    List<TdColumn> columnList=TableHelper.getColumns(SwitchHelpers.TABLE_SWITCH.doSwitch(analysedElements.get(0).eContainer()));
    Iterator<TdColumn> iter=columnList.iterator();
    while (iter.hasNext()) {
      TdColumn column=iter.next();
      sql.append(this.quote(column.getName()));
      if (iter.hasNext()) {
        sql.append(',');
      }
    }
  }
  sql.append(dbms().from());
  ModelElement element=fromPart.iterator().next();
  Package parentRelation=PackageHelper.getParentPackage((MetadataTable)fromPart.iterator().next());
  if (parentRelation instanceof Schema) {
    sql.append(dbms().toQualifiedName(null,parentRelation.getName(),element.getName()));
  }
 else   if (parentRelation instanceof Catalog) {
    String ownerUser=null;
    if (ConnectionUtils.isSybaseeDBProducts(dbms().getDbmsName())) {
      ownerUser=ColumnSetHelper.getTableOwner((ModelElement)element);
    }
    sql.append(dbms().toQualifiedName(parentRelation.getName(),ownerUser,element.getName()));
  }
  ModelElementAnalysisHandler handler=new ModelElementAnalysisHandler();
  handler.setAnalysis(analysis);
  String stringDataFilter=handler.getStringDataFilter();
  sql.append(GenericSQLHandler.WHERE_CLAUSE);
  String sqlStatement=sql.toString();
  sqlStatement=dbms().addWhereToStatement(sqlStatement,stringDataFilter);
  return sqlStatement;
}",0.9930615784908932
138486,"/** 
 * Method ""addColumnToAnalyze"".
 * @param column
 * @return
 */
public boolean addIndicator(List<ModelElement> columns,Indicator indicator){
  for (  ModelElement tdColumn : columns) {
    if (!analysis.getContext().getAnalysedElements().contains(tdColumn)) {
      analysis.getContext().getAnalysedElements().add(tdColumn);
    }
  }
  analysis.getResults().getIndicators().add(indicator);
  initializeIndicator(indicator);
  DataManager connection=analysis.getContext().getConnection();
  if (connection == null) {
    for (    ModelElement element : columns) {
      TdColumn tdColumn=SwitchHelpers.COLUMN_SWITCH.doSwitch(element);
      log.error(""String_Node_Str"");
      connection=ConnectionHelper.getTdDataProvider(tdColumn);
      analysis.getContext().setConnection(connection);
    }
  }
  TypedReturnCode<Dependency> rc=DependenciesHandler.getInstance().setDependencyOn(analysis,connection);
  if (rc.isOk()) {
  }
  return true;
}","/** 
 * Method ""addColumnToAnalyze"".
 * @param column
 * @return
 */
public boolean addIndicator(List<MetadataColumn> columns,Indicator indicator){
  for (  ModelElement tdColumn : columns) {
    if (!analysis.getContext().getAnalysedElements().contains(tdColumn)) {
      analysis.getContext().getAnalysedElements().add(tdColumn);
    }
  }
  analysis.getResults().getIndicators().add(indicator);
  initializeIndicator(indicator);
  DataManager connection=analysis.getContext().getConnection();
  if (connection == null) {
    for (    ModelElement element : columns) {
      TdColumn tdColumn=SwitchHelpers.COLUMN_SWITCH.doSwitch(element);
      log.error(""String_Node_Str"");
      connection=ConnectionHelper.getTdDataProvider(tdColumn);
      analysis.getContext().setConnection(connection);
    }
  }
  TypedReturnCode<Dependency> rc=DependenciesHandler.getInstance().setDependencyOn(analysis,connection);
  if (rc.isOk()) {
  }
  return true;
}",0.987355110642782
138487,"/** 
 * DOC scorreia Comment method ""getTableName"".
 * @param analyzedColumns
 * @return the quoted table name
 */
private String getTableName(final EList<ModelElement> analyzedColumns){
  EObject owner=analyzedColumns.get(0).eContainer();
  ColumnSet set=SwitchHelpers.COLUMN_SET_SWITCH.doSwitch(owner);
  MetadataTable mdColumn=SwitchHelpers.METADATA_TABLE_SWITCH.doSwitch(owner);
  String tableName=""String_Node_Str"";
  ModelElement columnSetOwner=null;
  if (null == set && mdColumn != null) {
    tableName=mdColumn.getName();
    columnSetOwner=mdColumn;
  }
 else   if (null != set) {
    tableName=set.getName();
    columnSetOwner=set;
  }
  Package pack=ColumnSetHelper.getParentCatalogOrSchema(columnSetOwner);
  if (pack instanceof Schema && ColumnSetHelper.getParentCatalogOrSchema(pack) instanceof Catalog) {
    pack=ColumnSetHelper.getParentCatalogOrSchema(pack);
  }
  if (pack == null) {
    log.error(""String_Node_Str"" + tableName);
  }
 else {
    this.catalogOrSchema=pack.getName();
  }
  String schemaName=getQuotedSchemaName(columnSetOwner);
  String catalogName=getQuotedCatalogName(columnSetOwner);
  if (catalogName == null && schemaName != null) {
    final Schema parentSchema=SchemaHelper.getParentSchema(columnSetOwner);
    final Catalog parentCatalog=CatalogHelper.getParentCatalog(parentSchema);
    catalogName=parentCatalog != null ? parentCatalog.getName() : null;
  }
  if (ConnectionUtils.isSybaseeDBProducts(dbms().getDbmsName())) {
    schemaName=ColumnSetHelper.getTableOwner(columnSetOwner);
  }
  return dbms().toQualifiedName(catalogName,schemaName,tableName);
}","/** 
 * DOC scorreia Comment method ""getTableName"".
 * @param analyzedColumns
 * @return the quoted table name
 */
private String getTableName(final EList<MetadataColumn> analyzedColumns){
  EObject owner=analyzedColumns.get(0).eContainer();
  ColumnSet set=SwitchHelpers.COLUMN_SET_SWITCH.doSwitch(owner);
  MetadataTable mdColumn=SwitchHelpers.METADATA_TABLE_SWITCH.doSwitch(owner);
  String tableName=""String_Node_Str"";
  ModelElement columnSetOwner=null;
  if (null == set && mdColumn != null) {
    tableName=mdColumn.getName();
    columnSetOwner=mdColumn;
  }
 else   if (null != set) {
    tableName=set.getName();
    columnSetOwner=set;
  }
  Package pack=ColumnSetHelper.getParentCatalogOrSchema(columnSetOwner);
  if (pack instanceof Schema && ColumnSetHelper.getParentCatalogOrSchema(pack) instanceof Catalog) {
    pack=ColumnSetHelper.getParentCatalogOrSchema(pack);
  }
  if (pack == null) {
    log.error(""String_Node_Str"" + tableName);
  }
 else {
    this.catalogOrSchema=pack.getName();
  }
  String schemaName=getQuotedSchemaName(columnSetOwner);
  String catalogName=getQuotedCatalogName(columnSetOwner);
  if (catalogName == null && schemaName != null) {
    final Schema parentSchema=SchemaHelper.getParentSchema(columnSetOwner);
    final Catalog parentCatalog=CatalogHelper.getParentCatalog(parentSchema);
    catalogName=parentCatalog != null ? parentCatalog.getName() : null;
  }
  if (ConnectionUtils.isSybaseeDBProducts(dbms().getDbmsName())) {
    schemaName=ColumnSetHelper.getTableOwner(columnSetOwner);
  }
  return dbms().toQualifiedName(catalogName,schemaName,tableName);
}",0.9925373134328358
138488,"/** 
 * DOC scorreia Comment method ""instantiateQuery"".
 * @param indicator
 */
private void instantiateQuery(Indicator indicator){
  if (ColumnsetPackage.eINSTANCE.getColumnSetMultiValueIndicator().isSuperTypeOf(indicator.eClass())) {
    ColumnSetMultiValueIndicator colSetMultValIndicator=(ColumnSetMultiValueIndicator)indicator;
    final EList<ModelElement> analyzedColumns=colSetMultValIndicator.getAnalyzedColumns();
    final EList<String> numericFunctions=initializeNumericFunctions(colSetMultValIndicator);
    final EList<String> dateFunctions=initializeDateFunctions(colSetMultValIndicator);
    List<String> nominalColumns=new ArrayList<String>();
    for (    ModelElement column : colSetMultValIndicator.getNominalColumns()) {
      nominalColumns.add(getQuotedColumnName(column));
    }
    List<String> computedColumns=new ArrayList<String>();
    for (    ModelElement column : colSetMultValIndicator.getNumericColumns()) {
      for (      String f : numericFunctions) {
        computedColumns.add(replaceVariablesLow(f,getQuotedColumnName(column)));
      }
    }
    for (    ModelElement column : colSetMultValIndicator.getDateColumns()) {
      for (      String f : dateFunctions) {
        computedColumns.add(replaceVariablesLow(f,getQuotedColumnName(column)));
      }
    }
    computedColumns.add(colSetMultValIndicator.getCountAll());
    String selectItems=createSelect(nominalColumns,computedColumns);
    final Expression sqlGenericExpression=dbms().getSqlExpression(indicator.getIndicatorDefinition());
    String grpByClause=createGroupBy(nominalColumns);
    String tableName=getTableName(analyzedColumns);
    String sqlExpr=dbms().fillGenericQueryWithColumnTableAndAlias(sqlGenericExpression.getBody(),selectItems,tableName,grpByClause);
    String stringDataFilter=AnalysisHelper.getStringDataFilter(cachedAnalysis);
    if (stringDataFilter == null) {
      stringDataFilter=""String_Node_Str"";
    }
    sqlExpr=dbms().addWhereToStatement(sqlExpr,stringDataFilter);
    indicator.setInstantiatedExpression(BooleanExpressionHelper.createTdExpression(sqlGenericExpression.getLanguage(),sqlExpr));
  }
}","/** 
 * DOC scorreia Comment method ""instantiateQuery"".
 * @param indicator
 */
private void instantiateQuery(Indicator indicator){
  if (ColumnsetPackage.eINSTANCE.getColumnSetMultiValueIndicator().isSuperTypeOf(indicator.eClass())) {
    ColumnSetMultiValueIndicator colSetMultValIndicator=(ColumnSetMultiValueIndicator)indicator;
    final EList<MetadataColumn> analyzedColumns=colSetMultValIndicator.getAnalyzedColumns();
    final EList<String> numericFunctions=initializeNumericFunctions(colSetMultValIndicator);
    final EList<String> dateFunctions=initializeDateFunctions(colSetMultValIndicator);
    List<String> nominalColumns=new ArrayList<String>();
    for (    ModelElement column : colSetMultValIndicator.getNominalColumns()) {
      nominalColumns.add(getQuotedColumnName(column));
    }
    List<String> computedColumns=new ArrayList<String>();
    for (    ModelElement column : colSetMultValIndicator.getNumericColumns()) {
      for (      String f : numericFunctions) {
        computedColumns.add(replaceVariablesLow(f,getQuotedColumnName(column)));
      }
    }
    for (    ModelElement column : colSetMultValIndicator.getDateColumns()) {
      for (      String f : dateFunctions) {
        computedColumns.add(replaceVariablesLow(f,getQuotedColumnName(column)));
      }
    }
    computedColumns.add(colSetMultValIndicator.getCountAll());
    String selectItems=createSelect(nominalColumns,computedColumns);
    final Expression sqlGenericExpression=dbms().getSqlExpression(indicator.getIndicatorDefinition());
    String grpByClause=createGroupBy(nominalColumns);
    String tableName=getTableName(analyzedColumns);
    String sqlExpr=dbms().fillGenericQueryWithColumnTableAndAlias(sqlGenericExpression.getBody(),selectItems,tableName,grpByClause);
    String stringDataFilter=AnalysisHelper.getStringDataFilter(cachedAnalysis);
    if (stringDataFilter == null) {
      stringDataFilter=""String_Node_Str"";
    }
    sqlExpr=dbms().addWhereToStatement(sqlExpr,stringDataFilter);
    indicator.setInstantiatedExpression(BooleanExpressionHelper.createTdExpression(sqlGenericExpression.getLanguage(),sqlExpr));
  }
}",0.9943977591036416
138489,"public String getQueryStirng(ModelElement column,Analysis ana,EList<ModelElement> nominalList,String columnName,String columnValue){
  setAnalysis(ana);
  String queryString=SELECT_ALL_FROM + getFullyQualifiedTableName(column);
  int col=columnName.indexOf(""String_Node_Str"");
  int val=columnValue.indexOf(""String_Node_Str"");
  for (  ModelElement nominal : nominalList) {
    final TdColumn tdColumn=(TdColumn)nominal;
    if (col > 0 && val > 0) {
      String[] name=columnName.split(""String_Node_Str"");
      String[] value=columnValue.split(""String_Node_Str"");
      for (int i=0; i < name.length; i++) {
        String where=dbmsLanguage.and();
        if (i == 0) {
          where=dbmsLanguage.where();
        }
        queryString=buildWhereClause(queryString,tdColumn,name[i],value[i],where);
      }
    }
 else {
      queryString=buildWhereClause(queryString,tdColumn,columnName.trim(),columnValue,dbmsLanguage.where());
    }
  }
  return queryString;
}","public String getQueryStirng(MetadataColumn column,Analysis ana,EList<MetadataColumn> nominalList,String columnName,String columnValue){
  setAnalysis(ana);
  String queryString=SELECT_ALL_FROM + getFullyQualifiedTableName(column);
  int col=columnName.indexOf(""String_Node_Str"");
  int val=columnValue.indexOf(""String_Node_Str"");
  for (  ModelElement nominal : nominalList) {
    final TdColumn tdColumn=(TdColumn)nominal;
    if (col > 0 && val > 0) {
      String[] name=columnName.split(""String_Node_Str"");
      String[] value=columnValue.split(""String_Node_Str"");
      for (int i=0; i < name.length; i++) {
        String where=dbmsLanguage.and();
        if (i == 0) {
          where=dbmsLanguage.where();
        }
        queryString=buildWhereClause(queryString,tdColumn,name[i],value[i],where);
      }
    }
 else {
      queryString=buildWhereClause(queryString,tdColumn,columnName.trim(),columnValue,dbmsLanguage.where());
    }
  }
  return queryString;
}",0.9752832131822864
138490,"protected Collection<Analysis> searchAllAnalysis(IFolder folder) throws ClassNotFoundException {
  Collection<Analysis> analyses=new ArrayList<Analysis>();
  try {
    for (    IResource resource : folder.members()) {
      if (resource.getType() == IResource.FOLDER) {
        if (!resource.getName().startsWith(""String_Node_Str"")) {
          analyses.addAll(searchAllAnalysis(folder.getFolder(resource.getName())));
        }
        continue;
      }
      IFile file=(IFile)resource;
      if (null != file.getFileExtension() && file.getFileExtension().equals(FactoriesUtil.ANA)) {
        URI uri=URI.createPlatformResourceURI(file.getFullPath().toString(),false);
        Resource eResource=null;
        try {
          eResource=EMFSharedResources.getInstance().getResource(uri,true);
        }
 catch (        Exception e) {
          eResource=EMFSharedResources.getInstance().getResource(uri,true);
        }
        if (eResource.getContents().size() > 0) {
          analyses.add((Analysis)eResource.getContents().get(0));
        }
 else {
          log.error(""String_Node_Str"" + eResource);
        }
      }
    }
  }
 catch (  Exception e) {
    log.error(e,e);
  }
  return analyses;
}","protected Collection<Analysis> searchAllAnalysis(IFolder folder) throws ClassNotFoundException {
  Collection<Analysis> analyses=new ArrayList<Analysis>();
  try {
    for (    IResource resource : folder.members()) {
      if (resource.getType() == IResource.FOLDER) {
        if (!resource.getName().startsWith(""String_Node_Str"")) {
          analyses.addAll(searchAllAnalysis(folder.getFolder(resource.getName())));
        }
        continue;
      }
      IFile file=(IFile)resource;
      if (null != file.getFileExtension() && file.getFileExtension().equals(FactoriesUtil.ANA)) {
        URI uri=URI.createPlatformResourceURI(file.getFullPath().toString(),false);
        Resource eResource=null;
        try {
          eResource=EMFSharedResources.getInstance().getResource(uri,true);
        }
 catch (        Exception e) {
        }
        if (eResource.getContents().size() > 0) {
          analyses.add((Analysis)eResource.getContents().get(0));
        }
 else {
          log.error(""String_Node_Str"" + eResource);
        }
      }
    }
  }
 catch (  Exception e) {
    log.error(e,e);
  }
  return analyses;
}",0.967409948542024
138491,"/** 
 * Method ""createKey"" creates a key with the concatenation of the values of the first n columns of the given list.
 * @param nominalColumns
 * @param n
 * @return a key
 */
private static String createKey(EList<ModelElement> nominalColumns,int n){
  StringBuilder builder=new StringBuilder();
  for (int i=0; i < n; i++) {
    builder.append(nominalColumns.get(i).getName()).append(""String_Node_Str"");
  }
  return builder.toString();
}","/** 
 * Method ""createKey"" creates a key with the concatenation of the values of the first n columns of the given list.
 * @param nominalColumns
 * @param n
 * @return a key
 */
private static String createKey(EList<MetadataColumn> nominalColumns,int n){
  StringBuilder builder=new StringBuilder();
  for (int i=0; i < n; i++) {
    builder.append(nominalColumns.get(i).getName()).append(""String_Node_Str"");
  }
  return builder.toString();
}",0.9728506787330315
138492,"/** 
 * Method ""fillDataset"" fills in the data sets.
 * @param nominalColumns the nominal columns
 * @param listRows the rows (=result set)
 * @param firstNumericColumnIdx the index of the first numeric column
 * @return a map [key -> aggregated values] where identifies a level of aggregation
 */
private static Map<String,ValueAggregator> fillDataset(final EList<ModelElement> nominalColumns,final List<Object[]> listRows,final int firstNumericColumnIdx){
  Map<String,ValueAggregator> valueAggregators=new HashMap<String,ValueAggregator>();
  int xPos=firstNumericColumnIdx;
  int yPos=firstNumericColumnIdx + 1;
  int zPos=firstNumericColumnIdx + 2;
  for (int i=nominalColumns.size(); i > 0; i--) {
    String key=createKey(nominalColumns,i);
    for (    Object[] row : listRows) {
      final Object xobj=row[xPos];
      final Double xValue=xobj != null ? Double.valueOf(String.valueOf(xobj)) : null;
      final Object yobj=row[yPos];
      final Double yValue=yobj != null ? Double.valueOf(String.valueOf(yobj)) : null;
      final Object zobj=row[zPos];
      final Double zValue=zobj != null ? Double.valueOf(String.valueOf(zobj)) : null;
      ValueAggregator valueAggregator=valueAggregators.get(key);
      if (valueAggregator == null) {
        valueAggregator=new ValueAggregator();
        valueAggregators.put(key,valueAggregator);
      }
      MultipleKey multipleKey=new MultipleKey(row,i);
      valueAggregator.addValue(multipleKey,new Double[]{xValue,yValue,zValue});
    }
  }
  return valueAggregators;
}","/** 
 * Method ""fillDataset"" fills in the data sets.
 * @param nominalColumns the nominal columns
 * @param listRows the rows (=result set)
 * @param firstNumericColumnIdx the index of the first numeric column
 * @return a map [key -> aggregated values] where identifies a level of aggregation
 */
private static Map<String,ValueAggregator> fillDataset(final EList<MetadataColumn> nominalColumns,final List<Object[]> listRows,final int firstNumericColumnIdx){
  Map<String,ValueAggregator> valueAggregators=new HashMap<String,ValueAggregator>();
  int xPos=firstNumericColumnIdx;
  int yPos=firstNumericColumnIdx + 1;
  int zPos=firstNumericColumnIdx + 2;
  for (int i=nominalColumns.size(); i > 0; i--) {
    String key=createKey(nominalColumns,i);
    for (    Object[] row : listRows) {
      final Object xobj=row[xPos];
      final Double xValue=xobj != null ? Double.valueOf(String.valueOf(xobj)) : null;
      final Object yobj=row[yPos];
      final Double yValue=yobj != null ? Double.valueOf(String.valueOf(yobj)) : null;
      final Object zobj=row[zPos];
      final Double zValue=zobj != null ? Double.valueOf(String.valueOf(zobj)) : null;
      ValueAggregator valueAggregator=valueAggregators.get(key);
      if (valueAggregator == null) {
        valueAggregator=new ValueAggregator();
        valueAggregators.put(key,valueAggregator);
      }
      MultipleKey multipleKey=new MultipleKey(row,i);
      valueAggregator.addValue(multipleKey,new Double[]{xValue,yValue,zValue});
    }
  }
  return valueAggregators;
}",0.9928198433420364
138493,"/** 
 */
private static Map<String,DateValueAggregate> fillGanttDataset(final EList<ModelElement> nominalColumns,final List<Object[]> listRows,final int firstDateColumnIdx){
  Map<String,DateValueAggregate> valueAggregators=new TreeMap<String,DateValueAggregate>();
  int minPos=firstDateColumnIdx;
  int maxPos=firstDateColumnIdx + 1;
  for (int i=nominalColumns.size(); i > 0; i--) {
    String key=createKey(nominalColumns,i);
    for (    Object[] row : listRows) {
      final Object minObj=row[minPos];
      final Date minDate=minObj != null ? (Date)minObj : null;
      final Object maxobj=row[maxPos];
      final Date maxDate=maxobj != null ? (Date)maxobj : null;
      DateValueAggregate valueAggregator=valueAggregators.get(key);
      if (valueAggregator == null) {
        valueAggregator=new DateValueAggregate();
        valueAggregators.put(key,valueAggregator);
      }
      MultipleKey multipleKey=new MultipleKey(row,i);
      valueAggregator.addValue(multipleKey,new Date[]{minDate,maxDate});
    }
  }
  return valueAggregators;
}","/** 
 */
private static Map<String,DateValueAggregate> fillGanttDataset(final EList<MetadataColumn> nominalColumns,final List<Object[]> listRows,final int firstDateColumnIdx){
  Map<String,DateValueAggregate> valueAggregators=new TreeMap<String,DateValueAggregate>();
  int minPos=firstDateColumnIdx;
  int maxPos=firstDateColumnIdx + 1;
  for (int i=nominalColumns.size(); i > 0; i--) {
    String key=createKey(nominalColumns,i);
    for (    Object[] row : listRows) {
      final Object minObj=row[minPos];
      final Date minDate=minObj != null ? (Date)minObj : null;
      final Object maxobj=row[maxPos];
      final Date maxDate=maxobj != null ? (Date)maxobj : null;
      DateValueAggregate valueAggregator=valueAggregators.get(key);
      if (valueAggregator == null) {
        valueAggregator=new DateValueAggregate();
        valueAggregators.put(key,valueAggregator);
      }
      MultipleKey multipleKey=new MultipleKey(row,i);
      valueAggregator.addValue(multipleKey,new Date[]{minDate,maxDate});
    }
  }
  return valueAggregators;
}",0.9895635673624288
138494,"public void createPreviewCharts(final ScrolledForm form,final Composite composite,final boolean isCreate){
  List<Composite> previewChartList=new ArrayList<Composite>();
  if (ColumnsetPackage.eINSTANCE.getWeakCorrelationIndicator() == columnSetMultiIndicator.eClass()) {
    GraphBuilder gBuilder=new GraphBuilder();
    gBuilder.setTotalWeight(columnSetMultiIndicator.getCount());
    List<Object[]> listRows=columnSetMultiIndicator.getListRows();
    if (listRows != null) {
      JungGraphGenerator generator=new JungGraphGenerator(gBuilder,listRows);
      generator.generate(composite,false,true);
    }
  }
 else {
    List<ModelElement> numericOrDateList=new ArrayList<ModelElement>();
    if (ColumnsetPackage.eINSTANCE.getCountAvgNullIndicator() == columnSetMultiIndicator.eClass()) {
      numericOrDateList=columnSetMultiIndicator.getNumericColumns();
    }
    if (ColumnsetPackage.eINSTANCE.getMinMaxDateIndicator() == columnSetMultiIndicator.eClass()) {
      numericOrDateList=columnSetMultiIndicator.getDateColumns();
    }
    for (    ModelElement column : numericOrDateList) {
      final ModelElement tdColumn=(ModelElement)column;
      ExpandableComposite exComp=toolkit.createExpandableComposite(composite,ExpandableComposite.TREE_NODE | ExpandableComposite.CLIENT_INDENT);
      exComp.setText(DefaultMessagesImpl.getString(""String_Node_Str"",tdColumn.getName()));
      exComp.setLayout(new GridLayout());
      exComp.setData(columnSetMultiIndicator);
      previewChartList.add(exComp);
      final Composite comp=toolkit.createComposite(exComp);
      comp.setLayout(new GridLayout());
      comp.setLayoutData(new GridData(GridData.FILL_BOTH));
      if (tdColumn != null) {
        IRunnableWithProgress rwp=new IRunnableWithProgress(){
          public void run(          final IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
            monitor.beginTask(DefaultMessagesImpl.getString(""String_Node_Str"",tdColumn.getName()),IProgressMonitor.UNKNOWN);
            Display.getDefault().asyncExec(new Runnable(){
              public void run(){
                new HideSeriesChartComposite(comp,analysis,columnSetMultiIndicator,tdColumn,false);
              }
            }
);
            monitor.done();
          }
        }
;
        try {
          new ProgressMonitorDialog(getSite().getShell()).run(true,false,rwp);
        }
 catch (        Exception ex) {
          log.error(ex,ex);
        }
      }
      exComp.addExpansionListener(new ExpansionAdapter(){
        @Override public void expansionStateChanged(        ExpansionEvent e){
          getChartComposite().layout();
          form.reflow(true);
        }
      }
);
      exComp.setExpanded(true);
      exComp.setClient(comp);
    }
  }
  if (!previewChartList.isEmpty()) {
    this.previewChartCompsites=previewChartList.toArray(new Composite[previewChartList.size()]);
  }
}","public void createPreviewCharts(final ScrolledForm form,final Composite composite,final boolean isCreate){
  List<Composite> previewChartList=new ArrayList<Composite>();
  if (ColumnsetPackage.eINSTANCE.getWeakCorrelationIndicator() == columnSetMultiIndicator.eClass()) {
    GraphBuilder gBuilder=new GraphBuilder();
    gBuilder.setTotalWeight(columnSetMultiIndicator.getCount());
    List<Object[]> listRows=columnSetMultiIndicator.getListRows();
    if (listRows != null) {
      JungGraphGenerator generator=new JungGraphGenerator(gBuilder,listRows);
      generator.generate(composite,false,true);
    }
  }
 else {
    List<MetadataColumn> numericOrDateList=new ArrayList<MetadataColumn>();
    if (ColumnsetPackage.eINSTANCE.getCountAvgNullIndicator() == columnSetMultiIndicator.eClass()) {
      numericOrDateList=columnSetMultiIndicator.getNumericColumns();
    }
    if (ColumnsetPackage.eINSTANCE.getMinMaxDateIndicator() == columnSetMultiIndicator.eClass()) {
      numericOrDateList=columnSetMultiIndicator.getDateColumns();
    }
    for (    MetadataColumn column : numericOrDateList) {
      final MetadataColumn tdColumn=(MetadataColumn)column;
      ExpandableComposite exComp=toolkit.createExpandableComposite(composite,ExpandableComposite.TREE_NODE | ExpandableComposite.CLIENT_INDENT);
      exComp.setText(DefaultMessagesImpl.getString(""String_Node_Str"",tdColumn.getName()));
      exComp.setLayout(new GridLayout());
      exComp.setData(columnSetMultiIndicator);
      previewChartList.add(exComp);
      final Composite comp=toolkit.createComposite(exComp);
      comp.setLayout(new GridLayout());
      comp.setLayoutData(new GridData(GridData.FILL_BOTH));
      if (tdColumn != null) {
        IRunnableWithProgress rwp=new IRunnableWithProgress(){
          public void run(          final IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
            monitor.beginTask(DefaultMessagesImpl.getString(""String_Node_Str"",tdColumn.getName()),IProgressMonitor.UNKNOWN);
            Display.getDefault().asyncExec(new Runnable(){
              public void run(){
                new HideSeriesChartComposite(comp,analysis,columnSetMultiIndicator,tdColumn,false);
              }
            }
);
            monitor.done();
          }
        }
;
        try {
          new ProgressMonitorDialog(getSite().getShell()).run(true,false,rwp);
        }
 catch (        Exception ex) {
          log.error(ex,ex);
        }
      }
      exComp.addExpansionListener(new ExpansionAdapter(){
        @Override public void expansionStateChanged(        ExpansionEvent e){
          getChartComposite().layout();
          form.reflow(true);
        }
      }
);
      exComp.setExpanded(true);
      exComp.setClient(comp);
    }
  }
  if (!previewChartList.isEmpty()) {
    this.previewChartCompsites=previewChartList.toArray(new Composite[previewChartList.size()]);
  }
}",0.9794379712131596
138495,"private void createBubbleOrGanttChart(final ScrolledForm form,final Composite composite,final ColumnSetMultiValueIndicator columnSetMultiValueIndicator){
  List<Composite> previewChartList=new ArrayList<Composite>();
  List<ModelElement> bubOrGanttColumnList=new ArrayList<ModelElement>();
  if (columnSetMultiValueIndicator instanceof CountAvgNullIndicator) {
    bubOrGanttColumnList=columnSetMultiValueIndicator.getNumericColumns();
  }
 else {
    bubOrGanttColumnList=columnSetMultiValueIndicator.getDateColumns();
  }
  for (  ModelElement column : bubOrGanttColumnList) {
    final ModelElement tdColumn=(ModelElement)column;
    final ExpandableComposite exComp=toolkit.createExpandableComposite(composite,ExpandableComposite.TREE_NODE | ExpandableComposite.CLIENT_INDENT);
    exComp.setText(DefaultMessagesImpl.getString(""String_Node_Str"",tdColumn.getName()));
    exComp.setLayout(new GridLayout());
    exComp.setData(columnSetMultiValueIndicator);
    previewChartList.add(exComp);
    final Composite comp=toolkit.createComposite(exComp);
    comp.setLayout(new GridLayout(2,false));
    comp.setLayoutData(new GridData(GridData.FILL_BOTH));
    if (tdColumn != null) {
      IRunnableWithProgress rwp=new IRunnableWithProgress(){
        public void run(        final IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
          monitor.beginTask(DefaultMessagesImpl.getString(""String_Node_Str"",tdColumn.getName()),IProgressMonitor.UNKNOWN);
          Display.getDefault().asyncExec(new Runnable(){
            public void run(){
              HideSeriesChartComposite hcc=new HideSeriesChartComposite(comp,getAnalysisHandler().getAnalysis(),columnSetMultiValueIndicator,tdColumn,true);
              GridData gd=new GridData();
              gd.widthHint=800;
              gd.heightHint=450;
              hcc.setLayoutData(gd);
            }
          }
);
          monitor.done();
        }
      }
;
      try {
        new ProgressMonitorDialog(getSite().getShell()).run(true,false,rwp);
      }
 catch (      Exception ex) {
        log.error(ex,ex);
      }
    }
    exComp.addExpansionListener(new ExpansionAdapter(){
      @Override public void expansionStateChanged(      ExpansionEvent e){
        getChartComposite().layout();
        form.reflow(true);
      }
    }
);
    exComp.setExpanded(true);
    exComp.setClient(comp);
  }
  if (!previewChartList.isEmpty()) {
    this.previewChartCompsites=previewChartList.toArray(new Composite[previewChartList.size()]);
  }
}","private void createBubbleOrGanttChart(final ScrolledForm form,final Composite composite,final ColumnSetMultiValueIndicator columnSetMultiValueIndicator){
  List<Composite> previewChartList=new ArrayList<Composite>();
  List<MetadataColumn> bubOrGanttColumnList=new ArrayList<MetadataColumn>();
  if (columnSetMultiValueIndicator instanceof CountAvgNullIndicator) {
    bubOrGanttColumnList=columnSetMultiValueIndicator.getNumericColumns();
  }
 else {
    bubOrGanttColumnList=columnSetMultiValueIndicator.getDateColumns();
  }
  for (  ModelElement column : bubOrGanttColumnList) {
    final MetadataColumn tdColumn=(MetadataColumn)column;
    final ExpandableComposite exComp=toolkit.createExpandableComposite(composite,ExpandableComposite.TREE_NODE | ExpandableComposite.CLIENT_INDENT);
    exComp.setText(DefaultMessagesImpl.getString(""String_Node_Str"",tdColumn.getName()));
    exComp.setLayout(new GridLayout());
    exComp.setData(columnSetMultiValueIndicator);
    previewChartList.add(exComp);
    final Composite comp=toolkit.createComposite(exComp);
    comp.setLayout(new GridLayout(2,false));
    comp.setLayoutData(new GridData(GridData.FILL_BOTH));
    if (tdColumn != null) {
      IRunnableWithProgress rwp=new IRunnableWithProgress(){
        public void run(        final IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
          monitor.beginTask(DefaultMessagesImpl.getString(""String_Node_Str"",tdColumn.getName()),IProgressMonitor.UNKNOWN);
          Display.getDefault().asyncExec(new Runnable(){
            public void run(){
              HideSeriesChartComposite hcc=new HideSeriesChartComposite(comp,getAnalysisHandler().getAnalysis(),columnSetMultiValueIndicator,tdColumn,true);
              GridData gd=new GridData();
              gd.widthHint=800;
              gd.heightHint=450;
              hcc.setLayoutData(gd);
            }
          }
);
          monitor.done();
        }
      }
;
      try {
        new ProgressMonitorDialog(getSite().getShell()).run(true,false,rwp);
      }
 catch (      Exception ex) {
        log.error(ex,ex);
      }
    }
    exComp.addExpansionListener(new ExpansionAdapter(){
      @Override public void expansionStateChanged(      ExpansionEvent e){
        getChartComposite().layout();
        form.reflow(true);
      }
    }
);
    exComp.setExpanded(true);
    exComp.setClient(comp);
  }
  if (!previewChartList.isEmpty()) {
    this.previewChartCompsites=previewChartList.toArray(new Composite[previewChartList.size()]);
  }
}",0.9810874704491724
138496,"/** 
 * @param outputFolder
 * @throws DataprofilerCoreException
 */
public void saveAnalysis() throws DataprofilerCoreException {
  IRepositoryViewObject reposObject=null;
  columnSetAnalysisHandler.clearAnalysis();
  simpleStatIndicator.getAnalyzedColumns().clear();
  allMatchIndicator.getAnalyzedColumns().clear();
  Analysis analysis=columnSetAnalysisHandler.getAnalysis();
  analysis.getParameters().setExecutionLanguage(ExecutionLanguage.get(execLang));
  columnSetAnalysisHandler.setStringDataFilter(dataFilterComp.getDataFilterString());
  List<IRepositoryNode> repositoryNodes=treeViewer.getColumnSetMultiValueList();
  Connection tdProvider=null;
  if (repositoryNodes != null && repositoryNodes.size() != 0) {
    ConnectionItem item=(ConnectionItem)repositoryNodes.get(0).getObject().getProperty().getItem();
    tdProvider=item.getConnection();
    if (tdProvider.eIsProxy()) {
      tdProvider=(Connection)EObjectHelper.resolveObject(tdProvider);
    }
    analysis.getContext().setConnection(tdProvider);
    List<ModelElement> columnList=new ArrayList<ModelElement>();
    for (    IRepositoryNode rd : repositoryNodes) {
      reposObject=rd.getObject();
      columnList.add((ModelElement)((MetadataColumnRepositoryObject)reposObject).getTdColumn());
    }
    simpleStatIndicator.getAnalyzedColumns().addAll(columnList);
    columnSetAnalysisHandler.addIndicator(columnList,simpleStatIndicator);
    allMatchIndicator.getCompositeRegexMatchingIndicators().clear();
    ModelElementIndicator[] modelElementIndicator=treeViewer.getModelElementIndicator();
    if (modelElementIndicator != null) {
      for (      ModelElementIndicator modelElementInd : modelElementIndicator) {
        Indicator[] inds=modelElementInd.getPatternIndicators();
        for (        Indicator ind : inds) {
          if (ind instanceof RegexpMatchingIndicator) {
            ind.setAnalyzedElement(((MetadataColumnRepositoryObject)modelElementInd.getModelElementRepositoryNode().getObject()).getTdColumn());
            allMatchIndicator.getCompositeRegexMatchingIndicators().add((RegexpMatchingIndicator)ind);
          }
        }
      }
    }
    if (allMatchIndicator.getCompositeRegexMatchingIndicators().size() > 0) {
      allMatchIndicator.getAnalyzedColumns().addAll(columnList);
      columnSetAnalysisHandler.addIndicator(columnList,allMatchIndicator);
    }
  }
 else {
    tdProvider=(Connection)analysis.getContext().getConnection();
    if (tdProvider != null) {
      tdProvider.getSupplierDependency().get(0).getClient().remove(analysis);
      analysis.getContext().setConnection(null);
      analysis.getClientDependency().clear();
    }
  }
  String urlString=analysis.eResource() != null ? analysis.eResource().getURI().toFileString() : PluginConstant.EMPTY_STRING;
  this.updateAnalysisClientDependency();
  ReturnCode saved=new ReturnCode(false);
  IEditorInput editorInput=this.getEditorInput();
  if (editorInput instanceof AnalysisItemEditorInput) {
    AnalysisItemEditorInput analysisInput=(AnalysisItemEditorInput)editorInput;
    TDQAnalysisItem tdqAnalysisItem=analysisInput.getTDQAnalysisItem();
    saved=ElementWriterFactory.getInstance().createAnalysisWrite().save(tdqAnalysisItem);
  }
  if (saved.isOk()) {
    RepositoryNode node=RepositoryNodeHelper.recursiveFind(tdProvider);
    if (node != null) {
      ElementWriterFactory.getInstance().createDataProviderWriter().save(node.getObject().getProperty().getItem());
    }
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + urlString + ""String_Node_Str"");
    }
  }
 else {
    throw new DataprofilerCoreException(DefaultMessagesImpl.getString(""String_Node_Str"",analysis.getName(),urlString,saved.getMessage()));
  }
  treeViewer.setDirty(false);
  dataFilterComp.setDirty(false);
}","/** 
 * @param outputFolder
 * @throws DataprofilerCoreException
 */
public void saveAnalysis() throws DataprofilerCoreException {
  IRepositoryViewObject reposObject=null;
  columnSetAnalysisHandler.clearAnalysis();
  simpleStatIndicator.getAnalyzedColumns().clear();
  allMatchIndicator.getAnalyzedColumns().clear();
  Analysis analysis=columnSetAnalysisHandler.getAnalysis();
  analysis.getParameters().setExecutionLanguage(ExecutionLanguage.get(execLang));
  columnSetAnalysisHandler.setStringDataFilter(dataFilterComp.getDataFilterString());
  List<IRepositoryNode> repositoryNodes=treeViewer.getColumnSetMultiValueList();
  Connection tdProvider=null;
  if (repositoryNodes != null && repositoryNodes.size() != 0) {
    ConnectionItem item=(ConnectionItem)repositoryNodes.get(0).getObject().getProperty().getItem();
    tdProvider=item.getConnection();
    if (tdProvider.eIsProxy()) {
      tdProvider=(Connection)EObjectHelper.resolveObject(tdProvider);
    }
    analysis.getContext().setConnection(tdProvider);
    List<MetadataColumn> columnList=new ArrayList<MetadataColumn>();
    for (    IRepositoryNode rd : repositoryNodes) {
      reposObject=rd.getObject();
      columnList.add((MetadataColumn)((MetadataColumnRepositoryObject)reposObject).getTdColumn());
    }
    simpleStatIndicator.getAnalyzedColumns().addAll(columnList);
    columnSetAnalysisHandler.addIndicator(columnList,simpleStatIndicator);
    allMatchIndicator.getCompositeRegexMatchingIndicators().clear();
    ModelElementIndicator[] modelElementIndicator=treeViewer.getModelElementIndicator();
    if (modelElementIndicator != null) {
      for (      ModelElementIndicator modelElementInd : modelElementIndicator) {
        Indicator[] inds=modelElementInd.getPatternIndicators();
        for (        Indicator ind : inds) {
          if (ind instanceof RegexpMatchingIndicator) {
            ind.setAnalyzedElement(((MetadataColumnRepositoryObject)modelElementInd.getModelElementRepositoryNode().getObject()).getTdColumn());
            allMatchIndicator.getCompositeRegexMatchingIndicators().add((RegexpMatchingIndicator)ind);
          }
        }
      }
    }
    if (allMatchIndicator.getCompositeRegexMatchingIndicators().size() > 0) {
      allMatchIndicator.getAnalyzedColumns().addAll(columnList);
      columnSetAnalysisHandler.addIndicator(columnList,allMatchIndicator);
    }
  }
 else {
    tdProvider=(Connection)analysis.getContext().getConnection();
    if (tdProvider != null) {
      tdProvider.getSupplierDependency().get(0).getClient().remove(analysis);
      analysis.getContext().setConnection(null);
      analysis.getClientDependency().clear();
    }
  }
  String urlString=analysis.eResource() != null ? analysis.eResource().getURI().toFileString() : PluginConstant.EMPTY_STRING;
  this.updateAnalysisClientDependency();
  ReturnCode saved=new ReturnCode(false);
  IEditorInput editorInput=this.getEditorInput();
  if (editorInput instanceof AnalysisItemEditorInput) {
    AnalysisItemEditorInput analysisInput=(AnalysisItemEditorInput)editorInput;
    TDQAnalysisItem tdqAnalysisItem=analysisInput.getTDQAnalysisItem();
    saved=ElementWriterFactory.getInstance().createAnalysisWrite().save(tdqAnalysisItem);
  }
  if (saved.isOk()) {
    RepositoryNode node=RepositoryNodeHelper.recursiveFind(tdProvider);
    if (node != null) {
      ElementWriterFactory.getInstance().createDataProviderWriter().save(node.getObject().getProperty().getItem());
    }
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + urlString + ""String_Node_Str"");
    }
  }
 else {
    throw new DataprofilerCoreException(DefaultMessagesImpl.getString(""String_Node_Str"",analysis.getName(),urlString,saved.getMessage()));
  }
  treeViewer.setDirty(false);
  dataFilterComp.setDirty(false);
}",0.990506329113924
138497,"private void addMenuOnBubbleChart(ChartEntity chartEntity,Menu menu){
  if (chartEntity instanceof XYItemEntity) {
    XYItemEntity xyItemEntity=(XYItemEntity)chartEntity;
    DefaultXYZDataset xyzDataSet=(DefaultXYZDataset)xyItemEntity.getDataset();
    final Comparable<?> seriesKey=xyzDataSet.getSeriesKey(xyItemEntity.getSeriesIndex());
    final String seriesK=String.valueOf(seriesKey);
    try {
      final Map<String,ValueAggregator> createXYZDatasets=ChartDatasetUtils.createXYZDatasets(indicator,column);
      final ValueAggregator valueAggregator=createXYZDatasets.get(seriesKey);
      valueAggregator.addSeriesToXYZDataset(xyzDataSet,seriesK);
      String seriesLabel=valueAggregator.getLabels(seriesK).get(xyItemEntity.getItem());
      EList<ModelElement> nominalList=indicator.getNominalColumns();
      final String queryString=MultiColumnSetValueExplorer.getInstance().getQueryStirng(column,analysis,nominalList,seriesK,seriesLabel);
      MenuItem item=new MenuItem(menu,SWT.PUSH);
      item.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
      item.addSelectionListener(new SelectionAdapter(){
        @Override public void widgetSelected(        SelectionEvent e){
          Display.getDefault().asyncExec(new Runnable(){
            public void run(){
              Connection tdDataProvider=SwitchHelpers.CONNECTION_SWITCH.doSwitch(analysis.getContext().getConnection());
              String query=queryString;
              String editorName=ColumnHelper.getColumnSetOwner(column).getName();
              CorePlugin.getDefault().runInDQViewer(tdDataProvider,query,editorName);
            }
          }
);
        }
      }
);
    }
 catch (    Throwable e) {
      log.error(e,e);
    }
  }
}","private void addMenuOnBubbleChart(ChartEntity chartEntity,Menu menu){
  if (chartEntity instanceof XYItemEntity) {
    XYItemEntity xyItemEntity=(XYItemEntity)chartEntity;
    DefaultXYZDataset xyzDataSet=(DefaultXYZDataset)xyItemEntity.getDataset();
    final Comparable<?> seriesKey=xyzDataSet.getSeriesKey(xyItemEntity.getSeriesIndex());
    final String seriesK=String.valueOf(seriesKey);
    try {
      final Map<String,ValueAggregator> createXYZDatasets=ChartDatasetUtils.createXYZDatasets(indicator,column);
      final ValueAggregator valueAggregator=createXYZDatasets.get(seriesKey);
      valueAggregator.addSeriesToXYZDataset(xyzDataSet,seriesK);
      String seriesLabel=valueAggregator.getLabels(seriesK).get(xyItemEntity.getItem());
      EList<MetadataColumn> nominalList=indicator.getNominalColumns();
      final String queryString=MultiColumnSetValueExplorer.getInstance().getQueryStirng(column,analysis,nominalList,seriesK,seriesLabel);
      MenuItem item=new MenuItem(menu,SWT.PUSH);
      item.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
      item.addSelectionListener(new SelectionAdapter(){
        @Override public void widgetSelected(        SelectionEvent e){
          Display.getDefault().asyncExec(new Runnable(){
            public void run(){
              Connection tdDataProvider=SwitchHelpers.CONNECTION_SWITCH.doSwitch(analysis.getContext().getConnection());
              String query=queryString;
              String editorName=ColumnHelper.getColumnSetOwner(column).getName();
              CorePlugin.getDefault().runInDQViewer(tdDataProvider,query,editorName);
            }
          }
);
        }
      }
);
    }
 catch (    Throwable e) {
      log.error(e,e);
    }
  }
}",0.9930875576036866
138498,"public HideSeriesChartComposite(Composite comp,Analysis ana,ColumnSetMultiValueIndicator indicator,ModelElement column,boolean isNeedUtility){
  super(comp,SWT.NONE);
  this.analysis=ana;
  this.indicator=indicator;
  this.column=column;
  this.isNeedUtility=isNeedUtility;
  this.setCursor(new Cursor(Display.getDefault(),SWT.CURSOR_HAND));
  this.setToolTipText(""String_Node_Str"");
  createHideSeriesArea();
  addSpecifiedListeners();
  GridData gd=new GridData();
  gd.heightHint=indicator.getAnalyzedColumns().size() * 30 < 230 ? 230 : indicator.getAnalyzedColumns().size() * 30;
  gd.widthHint=460;
  this.setLayoutData(gd);
}","public HideSeriesChartComposite(Composite comp,Analysis ana,ColumnSetMultiValueIndicator indicator,MetadataColumn column,boolean isNeedUtility){
  super(comp,SWT.NONE);
  this.analysis=ana;
  this.indicator=indicator;
  this.column=column;
  this.isNeedUtility=isNeedUtility;
  this.setCursor(new Cursor(Display.getDefault(),SWT.CURSOR_HAND));
  this.setToolTipText(""String_Node_Str"");
  createHideSeriesArea();
  addSpecifiedListeners();
  GridData gd=new GridData();
  gd.heightHint=indicator.getAnalyzedColumns().size() * 30 < 230 ? 230 : indicator.getAnalyzedColumns().size() * 30;
  gd.widthHint=460;
  this.setLayoutData(gd);
}",0.981012658227848
138499,"private void addSpecifiedListeners(){
  this.addChartMouseListener(new ChartMouseListener(){
    public void chartMouseClicked(    ChartMouseEvent event){
      setRangeZoomable(event.getTrigger().getButton() == 1);
      setDomainZoomable(event.getTrigger().getButton() == 1);
      if (event.getTrigger().getButton() != 3) {
        return;
      }
      Menu menu=new Menu(getShell(),SWT.POP_UP);
      setMenu(menu);
      MenuItem itemShowInFullScreen=new MenuItem(menu,SWT.PUSH);
      itemShowInFullScreen.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
      itemShowInFullScreen.addSelectionListener(new SelectionAdapter(){
        @Override public void widgetSelected(        SelectionEvent e){
          Display.getDefault().asyncExec(new Runnable(){
            public void run(){
              ChartUtils.showChartInFillScreen(createChart(),indicator);
            }
          }
);
        }
      }
);
      ChartEntity chartEntity=event.getEntity();
      if (chartEntity != null) {
        if (ColumnsetPackage.eINSTANCE.getCountAvgNullIndicator().equals(indicator.eClass())) {
          addMenuOnBubbleChart(chartEntity,menu);
        }
 else         if (ColumnsetPackage.eINSTANCE.getMinMaxDateIndicator().equals(indicator.eClass())) {
          addMenuOnGantChart(chartEntity,menu);
        }
      }
      menu.setVisible(true);
    }
    private void addMenuOnBubbleChart(    ChartEntity chartEntity,    Menu menu){
      if (chartEntity instanceof XYItemEntity) {
        XYItemEntity xyItemEntity=(XYItemEntity)chartEntity;
        DefaultXYZDataset xyzDataSet=(DefaultXYZDataset)xyItemEntity.getDataset();
        final Comparable<?> seriesKey=xyzDataSet.getSeriesKey(xyItemEntity.getSeriesIndex());
        final String seriesK=String.valueOf(seriesKey);
        try {
          final Map<String,ValueAggregator> createXYZDatasets=ChartDatasetUtils.createXYZDatasets(indicator,column);
          final ValueAggregator valueAggregator=createXYZDatasets.get(seriesKey);
          valueAggregator.addSeriesToXYZDataset(xyzDataSet,seriesK);
          String seriesLabel=valueAggregator.getLabels(seriesK).get(xyItemEntity.getItem());
          EList<ModelElement> nominalList=indicator.getNominalColumns();
          final String queryString=MultiColumnSetValueExplorer.getInstance().getQueryStirng(column,analysis,nominalList,seriesK,seriesLabel);
          MenuItem item=new MenuItem(menu,SWT.PUSH);
          item.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
          item.addSelectionListener(new SelectionAdapter(){
            @Override public void widgetSelected(            SelectionEvent e){
              Display.getDefault().asyncExec(new Runnable(){
                public void run(){
                  Connection tdDataProvider=SwitchHelpers.CONNECTION_SWITCH.doSwitch(analysis.getContext().getConnection());
                  String query=queryString;
                  String editorName=ColumnHelper.getColumnSetOwner(column).getName();
                  CorePlugin.getDefault().runInDQViewer(tdDataProvider,query,editorName);
                }
              }
);
            }
          }
);
        }
 catch (        Throwable e) {
          log.error(e,e);
        }
      }
    }
    public void chartMouseMoved(    ChartMouseEvent event){
    }
  }
);
}","private void addSpecifiedListeners(){
  this.addChartMouseListener(new ChartMouseListener(){
    public void chartMouseClicked(    ChartMouseEvent event){
      setRangeZoomable(event.getTrigger().getButton() == 1);
      setDomainZoomable(event.getTrigger().getButton() == 1);
      if (event.getTrigger().getButton() != 3) {
        return;
      }
      Menu menu=new Menu(getShell(),SWT.POP_UP);
      setMenu(menu);
      MenuItem itemShowInFullScreen=new MenuItem(menu,SWT.PUSH);
      itemShowInFullScreen.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
      itemShowInFullScreen.addSelectionListener(new SelectionAdapter(){
        @Override public void widgetSelected(        SelectionEvent e){
          Display.getDefault().asyncExec(new Runnable(){
            public void run(){
              ChartUtils.showChartInFillScreen(createChart(),indicator);
            }
          }
);
        }
      }
);
      ChartEntity chartEntity=event.getEntity();
      if (chartEntity != null) {
        if (ColumnsetPackage.eINSTANCE.getCountAvgNullIndicator().equals(indicator.eClass())) {
          addMenuOnBubbleChart(chartEntity,menu);
        }
 else         if (ColumnsetPackage.eINSTANCE.getMinMaxDateIndicator().equals(indicator.eClass())) {
          addMenuOnGantChart(chartEntity,menu);
        }
      }
      menu.setVisible(true);
    }
    private void addMenuOnBubbleChart(    ChartEntity chartEntity,    Menu menu){
      if (chartEntity instanceof XYItemEntity) {
        XYItemEntity xyItemEntity=(XYItemEntity)chartEntity;
        DefaultXYZDataset xyzDataSet=(DefaultXYZDataset)xyItemEntity.getDataset();
        final Comparable<?> seriesKey=xyzDataSet.getSeriesKey(xyItemEntity.getSeriesIndex());
        final String seriesK=String.valueOf(seriesKey);
        try {
          final Map<String,ValueAggregator> createXYZDatasets=ChartDatasetUtils.createXYZDatasets(indicator,column);
          final ValueAggregator valueAggregator=createXYZDatasets.get(seriesKey);
          valueAggregator.addSeriesToXYZDataset(xyzDataSet,seriesK);
          String seriesLabel=valueAggregator.getLabels(seriesK).get(xyItemEntity.getItem());
          EList<MetadataColumn> nominalList=indicator.getNominalColumns();
          final String queryString=MultiColumnSetValueExplorer.getInstance().getQueryStirng(column,analysis,nominalList,seriesK,seriesLabel);
          MenuItem item=new MenuItem(menu,SWT.PUSH);
          item.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
          item.addSelectionListener(new SelectionAdapter(){
            @Override public void widgetSelected(            SelectionEvent e){
              Display.getDefault().asyncExec(new Runnable(){
                public void run(){
                  Connection tdDataProvider=SwitchHelpers.CONNECTION_SWITCH.doSwitch(analysis.getContext().getConnection());
                  String query=queryString;
                  String editorName=ColumnHelper.getColumnSetOwner(column).getName();
                  CorePlugin.getDefault().runInDQViewer(tdDataProvider,query,editorName);
                }
              }
);
            }
          }
);
        }
 catch (        Throwable e) {
          log.error(e,e);
        }
      }
    }
    public void chartMouseMoved(    ChartMouseEvent event){
    }
  }
);
}",0.996386630532972
138500,"private void addMenuOnGantChart(ChartEntity chartEntity,Menu menu){
  if (chartEntity instanceof CategoryItemEntity) {
    CategoryItemEntity itemEntity=(CategoryItemEntity)chartEntity;
    String seriesK=itemEntity.getRowKey().toString();
    String seriesLabel=itemEntity.getColumnKey().toString();
    EList<ModelElement> nominalList=indicator.getNominalColumns();
    final String sql=MultiColumnSetValueExplorer.getInstance().getQueryStirng(column,analysis,nominalList,seriesK,seriesLabel);
    MenuItem item=new MenuItem(menu,SWT.PUSH);
    item.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    item.addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      SelectionEvent e){
        Display.getDefault().asyncExec(new Runnable(){
          public void run(){
            Connection tdDataProvider=SwitchHelpers.CONNECTION_SWITCH.doSwitch(analysis.getContext().getConnection());
            String query=sql;
            String editorName=ColumnHelper.getColumnSetOwner(column).getName();
            CorePlugin.getDefault().runInDQViewer(tdDataProvider,query,editorName);
          }
        }
);
      }
    }
);
  }
}","private void addMenuOnGantChart(ChartEntity chartEntity,Menu menu){
  if (chartEntity instanceof CategoryItemEntity) {
    CategoryItemEntity itemEntity=(CategoryItemEntity)chartEntity;
    String seriesK=itemEntity.getRowKey().toString();
    String seriesLabel=itemEntity.getColumnKey().toString();
    EList<MetadataColumn> nominalList=indicator.getNominalColumns();
    final String sql=MultiColumnSetValueExplorer.getInstance().getQueryStirng(column,analysis,nominalList,seriesK,seriesLabel);
    MenuItem item=new MenuItem(menu,SWT.PUSH);
    item.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    item.addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      SelectionEvent e){
        Display.getDefault().asyncExec(new Runnable(){
          public void run(){
            Connection tdDataProvider=SwitchHelpers.CONNECTION_SWITCH.doSwitch(analysis.getContext().getConnection());
            String query=sql;
            String editorName=ColumnHelper.getColumnSetOwner(column).getName();
            CorePlugin.getDefault().runInDQViewer(tdDataProvider,query,editorName);
          }
        }
);
      }
    }
);
  }
}",0.9898132427843804
138501,"/** 
 * zshen.
 * @return the input of table.
 */
private List<Map<Integer,RegexpMatchingIndicator>> organizeTableInput(){
  List<Map<Integer,RegexpMatchingIndicator>> returnList=new ArrayList<Map<Integer,RegexpMatchingIndicator>>();
  AllMatchIndicatorImpl allMatchIndicator=this.selectPatternsWizard.getAllMatchIndicator();
  if (allMatchIndicator == null) {
    return returnList;
  }
  List<ModelElement> analysisColumns=this.selectPatternsWizard.getAllMatchIndicator().getAnalyzedColumns();
  List<RegexpMatchingIndicator> regexpMatchingIndicatorList=this.selectPatternsWizard.getAllMatchIndicator().getCompositeRegexMatchingIndicators();
  for (  RegexpMatchingIndicator regexIndicator : regexpMatchingIndicatorList) {
    int index=analysisColumns.indexOf(regexIndicator.getAnalyzedElement());
    Map<Integer,RegexpMatchingIndicator> returnMap=getMapLocation(returnList,index);
    returnMap.put(index,regexIndicator);
    if (returnMap.size() == 1) {
      returnList.add(returnMap);
    }
  }
  return returnList;
}","/** 
 * zshen.
 * @return the input of table.
 */
private List<Map<Integer,RegexpMatchingIndicator>> organizeTableInput(){
  List<Map<Integer,RegexpMatchingIndicator>> returnList=new ArrayList<Map<Integer,RegexpMatchingIndicator>>();
  AllMatchIndicatorImpl allMatchIndicator=this.selectPatternsWizard.getAllMatchIndicator();
  if (allMatchIndicator == null) {
    return returnList;
  }
  List<MetadataColumn> analysisColumns=this.selectPatternsWizard.getAllMatchIndicator().getAnalyzedColumns();
  List<RegexpMatchingIndicator> regexpMatchingIndicatorList=this.selectPatternsWizard.getAllMatchIndicator().getCompositeRegexMatchingIndicators();
  for (  RegexpMatchingIndicator regexIndicator : regexpMatchingIndicatorList) {
    int index=analysisColumns.indexOf(regexIndicator.getAnalyzedElement());
    Map<Integer,RegexpMatchingIndicator> returnMap=getMapLocation(returnList,index);
    returnMap.put(index,regexIndicator);
    if (returnMap.size() == 1) {
      returnList.add(returnMap);
    }
  }
  return returnList;
}",0.9892787524366472
138502,"public void createControl(Composite parent){
  List<ModelElement> analysisColumns=this.selectPatternsWizard.getSsIndicator().getAnalyzedColumns();
  GridTableViewer tableView=new GridTableViewer(parent,SWT.NONE);
  this.table=tableView.getGrid();
  table.setHeaderVisible(true);
  table.setLinesVisible(true);
  for (  ModelElement analysisColumn : analysisColumns) {
    GridColumn tableCum=new GridColumn(table,SWT.CHECK);
    tableCum.setText(analysisColumn.getName());
  }
  tableView.setContentProvider(new PatternSelectContentProvider());
  tableView.setLabelProvider(new PatternSelectLabelProvider());
  this.tableInputList=organizeTableInput();
  tableView.setInput(tableInputList);
  for (  GridColumn tableCum : table.getColumns()) {
    tableCum.pack();
  }
  inItitemCheck();
  this.setControl(parent);
  this.setPageComplete(true);
}","public void createControl(Composite parent){
  List<MetadataColumn> analysisColumns=this.selectPatternsWizard.getSsIndicator().getAnalyzedColumns();
  GridTableViewer tableView=new GridTableViewer(parent,SWT.NONE);
  this.table=tableView.getGrid();
  table.setHeaderVisible(true);
  table.setLinesVisible(true);
  for (  ModelElement analysisColumn : analysisColumns) {
    GridColumn tableCum=new GridColumn(table,SWT.CHECK);
    tableCum.setText(analysisColumn.getName());
  }
  tableView.setContentProvider(new PatternSelectContentProvider());
  tableView.setLabelProvider(new PatternSelectLabelProvider());
  this.tableInputList=organizeTableInput();
  tableView.setInput(tableInputList);
  for (  GridColumn tableCum : table.getColumns()) {
    tableCum.pack();
  }
  inItitemCheck();
  this.setControl(parent);
  this.setPageComplete(true);
}",0.9858323494687132
138503,"@Override public void openEditor(Item item){
  TDQPatternItem patternItem=(TDQPatternItem)item;
  String subfolderPath=patternItem.getState().getPath();
  String folderPath=ResourceManager.getIndicatorFolder().getFullPath().toString();
  Path path=new Path(folderPath);
  Path append=(Path)path.append(new Path(subfolderPath)).append(new Path(patternItem.getFilename()));
  IPath removeLastSegments=append.removeFirstSegments(1);
  IFile fileEditorInput=ResourceManager.getRootProject().getFile(removeLastSegments);
  try {
    IDE.openEditor(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage(),fileEditorInput,true);
  }
 catch (  PartInitException e) {
    log.error(e,e);
  }
}","@Override public void openEditor(Item item){
  PatternItemEditorInput analysisEditorInput=new PatternItemEditorInput(item);
  CorePlugin.getDefault().openEditor(analysisEditorInput,PatternEditor.class.getName());
}",0.1361141602634467
138504,"@Override public void openEditor(Item item){
  TDQBusinessRuleItem ruleItem=(TDQBusinessRuleItem)item;
  String folderPath=ruleItem.getState().getPath();
  if (folderPath.equals(""String_Node_Str"")) {
    folderPath=ResourceManager.getRulesSQLFolder().toString();
  }
  Path path=new Path(folderPath);
  Path append=(Path)path.append(new Path(ruleItem.getFilename()));
  IPath removeLastSegments=append.removeFirstSegments(2);
  IFile fileEditorInput=ResourceManager.getRootProject().getFile(removeLastSegments);
  try {
    IDE.openEditor(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage(),fileEditorInput,true);
  }
 catch (  PartInitException e) {
    log.error(e,e);
  }
}","@Override public void openEditor(Item item){
  BusinessRuleItemEditorInput dqRuleEditorInput=new BusinessRuleItemEditorInput(item);
  CorePlugin.getDefault().openEditor(dqRuleEditorInput,DQRuleEditor.class.getName());
}",0.1140350877192982
138505,"@Override public void openEditor(Item item){
  TDQIndicatorDefinitionItem indicatorItem=(TDQIndicatorDefinitionItem)item;
  String subfolderPath=indicatorItem.getState().getPath();
  String folderPath=ResourceManager.getIndicatorFolder().getFullPath().toString();
  Path path=new Path(folderPath);
  Path append=(Path)path.append(new Path(subfolderPath)).append(new Path(indicatorItem.getFilename()));
  IPath removeLastSegments=append.removeFirstSegments(1);
  IFile fileEditorInput=ResourceManager.getRootProject().getFile(removeLastSegments);
  try {
    IDE.openEditor(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage(),fileEditorInput,true);
  }
 catch (  PartInitException e) {
    log.error(e,e);
  }
}","@Override public void openEditor(Item item){
  IndicatorDefinitionItemEditorInput udiEditorInput=new IndicatorDefinitionItemEditorInput(item);
  CorePlugin.getDefault().openEditor(udiEditorInput,IndicatorEditor.class.getName());
}",0.1776384535005224
138506,"/** 
 * DOC qiongli Comment method ""createAnalysisParamSection"".
 * @param form
 * @param anasisDataComp
 */
void createAnalysisParamSection(final ScrolledForm form,Composite anasisDataComp){
  analysisParamSection=createSection(form,anasisDataComp,DefaultMessagesImpl.getString(""String_Node_Str""),null);
  Composite sectionClient=toolkit.createComposite(analysisParamSection);
  sectionClient.setLayout(new GridLayout(2,false));
  toolkit.createLabel(sectionClient,DefaultMessagesImpl.getString(""String_Node_Str""));
  execCombo=new CCombo(sectionClient,SWT.BORDER);
  execCombo.setEditable(false);
  for (  ExecutionLanguage language : ExecutionLanguage.VALUES) {
    String temp=language.getLiteral();
    execCombo.add(temp);
  }
  ExecutionLanguage executionLanguage=analysis.getParameters().getExecutionLanguage();
  final Composite javaEnginSection=createjavaEnginSection(sectionClient);
  if (ExecutionLanguage.SQL.equals(executionLanguage)) {
    javaEnginSection.setVisible(false);
  }
  execCombo.setText(executionLanguage.getLiteral());
  execLang=executionLanguage.getLiteral();
  treeViewer.setLanguage(ExecutionLanguage.get(executionLanguage.getLiteral()));
  execCombo.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      execLang=execCombo.getText();
      if (ExecutionLanguage.SQL.equals(ExecutionLanguage.get(execLang)) && includeDatePatternFreqIndicator()) {
        MessageUI.openWarning(DefaultMessagesImpl.getString(""String_Node_Str""));
        execCombo.setText(ExecutionLanguage.JAVA.getLiteral());
        execLang=execCombo.getText();
        return;
      }
      if (ExecutionLanguage.SQL.equals(ExecutionLanguage.get(execLang))) {
        javaEnginSection.setVisible(false);
      }
 else {
        javaEnginSection.setVisible(true);
      }
      setDirty(true);
      treeViewer.setLanguage(ExecutionLanguage.get(execLang));
    }
  }
);
  analysisParamSection.setClient(sectionClient);
}","/** 
 * DOC qiongli Comment method ""createAnalysisParamSection"".
 * @param form
 * @param anasisDataComp
 */
void createAnalysisParamSection(final ScrolledForm form,Composite anasisDataComp){
  analysisParamSection=createSection(form,anasisDataComp,DefaultMessagesImpl.getString(""String_Node_Str""),null);
  Composite sectionClient=toolkit.createComposite(analysisParamSection);
  sectionClient.setLayout(new GridLayout(2,false));
  toolkit.createLabel(sectionClient,DefaultMessagesImpl.getString(""String_Node_Str""));
  execCombo=new CCombo(sectionClient,SWT.BORDER);
  execCombo.setEditable(false);
  for (  ExecutionLanguage language : ExecutionLanguage.VALUES) {
    String temp=language.getLiteral();
    execCombo.add(temp);
  }
  ExecutionLanguage executionLanguage=analysis.getParameters().getExecutionLanguage();
  final Composite javaEnginSection=createjavaEnginSection(sectionClient);
  if (ExecutionLanguage.SQL.equals(executionLanguage)) {
    javaEnginSection.setVisible(false);
    GridData data=(GridData)javaEnginSection.getLayoutData();
    data.heightHint=10;
    javaEnginSection.setLayoutData(data);
    analysisParamSection.setExpanded(true);
  }
  execCombo.setText(executionLanguage.getLiteral());
  execLang=executionLanguage.getLiteral();
  treeViewer.setLanguage(ExecutionLanguage.get(executionLanguage.getLiteral()));
  execCombo.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      execLang=execCombo.getText();
      if (ExecutionLanguage.SQL.equals(ExecutionLanguage.get(execLang)) && includeDatePatternFreqIndicator()) {
        MessageUI.openWarning(DefaultMessagesImpl.getString(""String_Node_Str""));
        execCombo.setText(ExecutionLanguage.JAVA.getLiteral());
        execLang=execCombo.getText();
        return;
      }
      if (ExecutionLanguage.SQL.equals(ExecutionLanguage.get(execLang))) {
        javaEnginSection.setVisible(false);
        GridData data=(GridData)javaEnginSection.getLayoutData();
        data.heightHint=10;
        javaEnginSection.setLayoutData(data);
        analysisParamSection.setExpanded(true);
      }
 else {
        javaEnginSection.setVisible(true);
        GridData data=(GridData)javaEnginSection.getLayoutData();
        data.heightHint=100;
        javaEnginSection.setLayoutData(data);
        analysisParamSection.setExpanded(true);
      }
      setDirty(true);
      treeViewer.setLanguage(ExecutionLanguage.get(execLang));
    }
  }
);
  toolkit.createLabel(sectionClient,""String_Node_Str"").setToolTipText(""String_Node_Str"");
  storeDataCheck=new Button(sectionClient,SWT.CHECK | SWT.RIGHT_TO_LEFT);
  storeDataCheck.setSelection(simpleStatIndicator.isStoreData());
  storeDataCheck.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      simpleStatIndicator.setStoreData(storeDataCheck.getSelection());
      setDirty(true);
    }
  }
);
  analysisParamSection.setClient(sectionClient);
}",0.7949603739077423
138507,"public static void removeDependencys(IResource... resources){
  for (  IResource selectedObj : resources) {
    IFile file=((IFile)selectedObj);
    if (file.getFileExtension() == null) {
      continue;
    }
    ModelElement elementToDelete=getModelElement(file);
    if (elementToDelete != null) {
      List<Resource> modifiedResources=DependenciesHandler.getInstance().clearDependencies(elementToDelete);
      for (      Resource resource : modifiedResources) {
        EMFUtil.saveSingleResource(resource);
      }
    }
  }
}","/** 
 * DOC qiongli Comment method ""removeDependencys"".
 * @param elementToDelete
 */
public static void removeDependencys(ModelElement elementToDelete){
  if (elementToDelete != null) {
    List<Resource> modifiedResources=DependenciesHandler.getInstance().clearDependencies(elementToDelete);
    for (    Resource resource : modifiedResources) {
      EMFUtil.saveSingleResource(resource);
    }
  }
}",0.2521367521367521
138508,"/** 
 * ADD mzhao 15750 , build dq metadata tree, get connection root node.
 */
public static List<IRepositoryNode> getConnectionRepositoryNodes(){
  RepositoryNode node=getRootNode(ERepositoryObjectType.METADATA);
  List<IRepositoryNode> connNodes=new ArrayList<IRepositoryNode>();
  if (node != null) {
    List<IRepositoryNode> childrens=node.getChildren();
    for (    IRepositoryNode subNode : childrens) {
      if (subNode instanceof DBConnectionFolderRepNode || subNode instanceof DFConnectionFolderRepNode || subNode instanceof MDMConnectionFolderRepNode) {
        connNodes.addAll(getModelElementFromFolder(subNode));
      }
    }
  }
  return connNodes;
}","/** 
 * ADD mzhao 15750 , build dq metadata tree, get connection root node.
 */
public static List<IRepositoryNode> getConnectionRepositoryNodes(boolean withDeleted){
  RepositoryNode node=getRootNode(ERepositoryObjectType.METADATA);
  List<IRepositoryNode> connNodes=new ArrayList<IRepositoryNode>();
  if (node != null) {
    List<IRepositoryNode> childrens=node.getChildren();
    for (    IRepositoryNode subNode : childrens) {
      if (subNode instanceof DBConnectionFolderRepNode || subNode instanceof DFConnectionFolderRepNode || subNode instanceof MDMConnectionFolderRepNode) {
        connNodes.addAll(getModelElementFromFolder(subNode,withDeleted));
      }
    }
  }
  return connNodes;
}",0.9773557341124908
138509,"public static List<IRepositoryNode> getDBConnectionRepositoryNodes(){
  RepositoryNode node=getRootNode(ERepositoryObjectType.METADATA);
  List<IRepositoryNode> connNodes=new ArrayList<IRepositoryNode>();
  if (node != null) {
    List<IRepositoryNode> childrens=node.getChildren();
    for (    IRepositoryNode subNode : childrens) {
      if (subNode instanceof DBConnectionFolderRepNode) {
        connNodes.addAll(getModelElementFromFolder(subNode));
      }
    }
  }
  return connNodes;
}","public static List<IRepositoryNode> getDBConnectionRepositoryNodes(boolean withDeleted){
  RepositoryNode node=getRootNode(ERepositoryObjectType.METADATA);
  List<IRepositoryNode> connNodes=new ArrayList<IRepositoryNode>();
  if (node != null) {
    List<IRepositoryNode> childrens=node.getChildren();
    for (    IRepositoryNode subNode : childrens) {
      if (subNode instanceof DBConnectionFolderRepNode) {
        connNodes.addAll(getModelElementFromFolder(subNode,withDeleted));
      }
    }
  }
  return connNodes;
}",0.9695780176643768
138510,"/** 
 * Add zshen 15750 get all the Connection Node from one folder node.
 * @param folderNode any node
 * @return
 */
private static List<IRepositoryNode> getModelElementFromFolder(IRepositoryNode folderNode){
  List<IRepositoryNode> repositoryNodeList=new ArrayList<IRepositoryNode>();
  if (isFolderNode(folderNode.getType())) {
    for (    IRepositoryNode thefolderNode : folderNode.getChildren()) {
      repositoryNodeList.addAll(getModelElementFromFolder(thefolderNode));
    }
  }
 else {
    repositoryNodeList.add(folderNode);
  }
  return repositoryNodeList;
}","/** 
 * Add zshen 15750 get all the Connection Node from one folder node.
 * @param folderNode any node
 * @return
 */
private static List<IRepositoryNode> getModelElementFromFolder(IRepositoryNode folderNode,boolean withDelted){
  List<IRepositoryNode> repositoryNodeList=new ArrayList<IRepositoryNode>();
  if (isFolderNode(folderNode.getType())) {
    for (    IRepositoryNode thefolderNode : folderNode.getChildren(withDelted)) {
      repositoryNodeList.addAll(getModelElementFromFolder(thefolderNode,withDelted));
    }
  }
 else {
    repositoryNodeList.add(folderNode);
  }
  return repositoryNodeList;
}",0.9662162162162162
138511,"public static List<IRepositoryNode> getDataProfilingRepositoryNodes(){
  RepositoryNode node=getRootNode(ERepositoryObjectType.TDQ_DATA_PROFILING);
  List<IRepositoryNode> dataProfilingNodes=new ArrayList<IRepositoryNode>();
  if (node != null) {
    List<IRepositoryNode> childrens=node.getChildren();
    for (    IRepositoryNode subNode : childrens) {
      if (subNode instanceof AnalysisFolderRepNode || subNode instanceof ReportFolderRepNode) {
        dataProfilingNodes.addAll(getModelElementFromFolder(subNode));
      }
    }
  }
  return dataProfilingNodes;
}","public static List<IRepositoryNode> getDataProfilingRepositoryNodes(boolean withDeleted){
  RepositoryNode node=getRootNode(ERepositoryObjectType.TDQ_DATA_PROFILING);
  List<IRepositoryNode> dataProfilingNodes=new ArrayList<IRepositoryNode>();
  if (node != null) {
    List<IRepositoryNode> childrens=node.getChildren();
    for (    IRepositoryNode subNode : childrens) {
      if (subNode instanceof AnalysisFolderRepNode || subNode instanceof ReportFolderRepNode) {
        dataProfilingNodes.addAll(getModelElementFromFolder(subNode,withDeleted));
      }
    }
  }
  return dataProfilingNodes;
}",0.9735269000853972
138512,"public static List<IRepositoryNode> getPatternsRepositoryNodes(){
  RepositoryNode node=getRootNode(ERepositoryObjectType.TDQ_LIBRARIES);
  List<IRepositoryNode> patternsNodes=new ArrayList<IRepositoryNode>();
  if (node != null) {
    List<IRepositoryNode> childrens=node.getChildren();
    for (    IRepositoryNode subNode : childrens) {
      if (EResourceConstant.PATTERNS.getName().equals((subNode.getObject().getLabel()))) {
        List<IRepositoryNode> subChildren=subNode.getChildren();
        for (        IRepositoryNode patternsNode : subChildren) {
          if (patternsNode instanceof PatternRegexFolderRepNode || patternsNode instanceof PatternSqlFolderRepNode) {
            patternsNodes.addAll(getModelElementFromFolder(patternsNode));
          }
        }
        return patternsNodes;
      }
    }
  }
  return patternsNodes;
}","public static List<IRepositoryNode> getPatternsRepositoryNodes(boolean withDeleted){
  RepositoryNode node=getRootNode(ERepositoryObjectType.TDQ_LIBRARIES);
  List<IRepositoryNode> patternsNodes=new ArrayList<IRepositoryNode>();
  if (node != null) {
    List<IRepositoryNode> childrens=node.getChildren();
    for (    IRepositoryNode subNode : childrens) {
      if (EResourceConstant.PATTERNS.getName().equals((subNode.getObject().getLabel()))) {
        List<IRepositoryNode> subChildren=subNode.getChildren();
        for (        IRepositoryNode patternsNode : subChildren) {
          if (patternsNode instanceof PatternRegexFolderRepNode || patternsNode instanceof PatternSqlFolderRepNode) {
            patternsNodes.addAll(getModelElementFromFolder(patternsNode,withDeleted));
          }
        }
        return patternsNodes;
      }
    }
  }
  return patternsNodes;
}",0.9821119446047316
138513,"public static List<IRepositoryNode> getUdisRepositoryNodes(){
  RepositoryNode node=getRootNode(ERepositoryObjectType.TDQ_LIBRARIES);
  List<IRepositoryNode> udisNodes=new ArrayList<IRepositoryNode>();
  if (node != null) {
    List<IRepositoryNode> childrens=node.getChildren();
    for (    IRepositoryNode subNode : childrens) {
      if (EResourceConstant.INDICATORS.getName().equals((subNode.getObject().getLabel())) || EResourceConstant.RULES.getName().equals((subNode.getObject().getLabel()))) {
        List<IRepositoryNode> subChildren=subNode.getChildren();
        for (        IRepositoryNode udisNode : subChildren) {
          if (udisNode instanceof UserDefIndicatorFolderRepNode || udisNode instanceof RulesFolderRepNode) {
            udisNodes.addAll(getModelElementFromFolder(udisNode));
          }
        }
      }
    }
  }
  return udisNodes;
}","public static List<IRepositoryNode> getUdisRepositoryNodes(boolean withDeleted){
  RepositoryNode node=getRootNode(ERepositoryObjectType.TDQ_LIBRARIES);
  List<IRepositoryNode> udisNodes=new ArrayList<IRepositoryNode>();
  if (node != null) {
    List<IRepositoryNode> childrens=node.getChildren();
    for (    IRepositoryNode subNode : childrens) {
      if (EResourceConstant.INDICATORS.getName().equals((subNode.getObject().getLabel())) || EResourceConstant.RULES.getName().equals((subNode.getObject().getLabel()))) {
        List<IRepositoryNode> subChildren=subNode.getChildren();
        for (        IRepositoryNode udisNode : subChildren) {
          if (udisNode instanceof UserDefIndicatorFolderRepNode || udisNode instanceof RulesFolderRepNode) {
            udisNodes.addAll(getModelElementFromFolder(udisNode,withDeleted));
          }
        }
      }
    }
  }
  return udisNodes;
}",0.9824561403508772
138514,"@Override public List<IRepositoryNode> getChildren(){
  try {
    super.getChildren().clear();
    RootContainer<String,IRepositoryViewObject> tdqViewObjects=ProxyRepositoryFactory.getInstance().getTdqRepositoryViewObjects(getContentType(),RepositoryNodeHelper.getPath(this).toString());
    for (    Container<String,IRepositoryViewObject> container : tdqViewObjects.getSubContainer()) {
      Folder folder=new Folder((Property)container.getProperty(),ERepositoryObjectType.TDQ_ANALYSIS);
      if (folder.isDeleted()) {
        continue;
      }
      AnalysisSubFolderRepNode childNodeFolder=new AnalysisSubFolderRepNode(folder,this,ENodeType.SIMPLE_FOLDER);
      childNodeFolder.setProperties(EProperties.LABEL,ERepositoryObjectType.TDQ_ANALYSIS_ELEMENT);
      childNodeFolder.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.TDQ_ANALYSIS_ELEMENT);
      folder.setRepositoryNode(childNodeFolder);
      super.getChildren().add(childNodeFolder);
    }
    for (    IRepositoryViewObject viewObject : tdqViewObjects.getMembers()) {
      if (viewObject.isDeleted()) {
        continue;
      }
      AnalysisRepNode anaNode=new AnalysisRepNode(viewObject,this,ENodeType.REPOSITORY_ELEMENT);
      anaNode.setProperties(EProperties.LABEL,ERepositoryObjectType.TDQ_ANALYSIS_ELEMENT);
      anaNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.TDQ_ANALYSIS_ELEMENT);
      viewObject.setRepositoryNode(anaNode);
      super.getChildren().add(anaNode);
    }
  }
 catch (  PersistenceException e) {
    log.error(e,e);
  }
  return super.getChildren();
}","@Override public List<IRepositoryNode> getChildren(boolean withDeleted){
  try {
    super.getChildren().clear();
    RootContainer<String,IRepositoryViewObject> tdqViewObjects=ProxyRepositoryFactory.getInstance().getTdqRepositoryViewObjects(getContentType(),RepositoryNodeHelper.getPath(this).toString());
    for (    Container<String,IRepositoryViewObject> container : tdqViewObjects.getSubContainer()) {
      Folder folder=new Folder((Property)container.getProperty(),ERepositoryObjectType.TDQ_ANALYSIS);
      if (!withDeleted && folder.isDeleted()) {
        continue;
      }
      AnalysisSubFolderRepNode childNodeFolder=new AnalysisSubFolderRepNode(folder,this,ENodeType.SIMPLE_FOLDER);
      childNodeFolder.setProperties(EProperties.LABEL,ERepositoryObjectType.TDQ_ANALYSIS_ELEMENT);
      childNodeFolder.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.TDQ_ANALYSIS_ELEMENT);
      folder.setRepositoryNode(childNodeFolder);
      super.getChildren().add(childNodeFolder);
    }
    for (    IRepositoryViewObject viewObject : tdqViewObjects.getMembers()) {
      if (!withDeleted && viewObject.isDeleted()) {
        continue;
      }
      AnalysisRepNode anaNode=new AnalysisRepNode(viewObject,this,ENodeType.REPOSITORY_ELEMENT);
      anaNode.setProperties(EProperties.LABEL,ERepositoryObjectType.TDQ_ANALYSIS_ELEMENT);
      anaNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.TDQ_ANALYSIS_ELEMENT);
      viewObject.setRepositoryNode(anaNode);
      super.getChildren().add(anaNode);
    }
  }
 catch (  PersistenceException e) {
    log.error(e,e);
  }
  return super.getChildren();
}",0.9841565703634668
138515,"@Override public List<IRepositoryNode> getChildren(){
  try {
    super.getChildren().clear();
    RootContainer<String,IRepositoryViewObject> tdqViewObjects=ProxyRepositoryFactory.getInstance().getTdqRepositoryViewObjects(getContentType(),RepositoryNodeHelper.getPath(this).toString());
    for (    Container<String,IRepositoryViewObject> container : tdqViewObjects.getSubContainer()) {
      Folder folder=new Folder((Property)container.getProperty(),ERepositoryObjectType.METADATA_CONNECTIONS);
      if (folder.isDeleted()) {
        continue;
      }
      DBConnectionSubFolderRepNode childNodeFolder=new DBConnectionSubFolderRepNode(folder,this,ENodeType.SIMPLE_FOLDER);
      childNodeFolder.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_CONNECTIONS);
      childNodeFolder.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_CONNECTIONS);
      super.getChildren().add(childNodeFolder);
    }
    for (    IRepositoryViewObject viewObject : tdqViewObjects.getMembers()) {
      if (!viewObject.isDeleted()) {
        DBConnectionRepNode repNode=new DBConnectionRepNode(viewObject,this,ENodeType.REPOSITORY_ELEMENT);
        repNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_CONNECTIONS);
        repNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_CONNECTIONS);
        viewObject.setRepositoryNode(repNode);
        super.getChildren().add(repNode);
      }
    }
  }
 catch (  PersistenceException e) {
    log.error(e,e);
  }
  return super.getChildren();
}","@Override public List<IRepositoryNode> getChildren(boolean withDeleted){
  try {
    super.getChildren().clear();
    RootContainer<String,IRepositoryViewObject> tdqViewObjects=ProxyRepositoryFactory.getInstance().getTdqRepositoryViewObjects(getContentType(),RepositoryNodeHelper.getPath(this).toString());
    for (    Container<String,IRepositoryViewObject> container : tdqViewObjects.getSubContainer()) {
      Folder folder=new Folder((Property)container.getProperty(),ERepositoryObjectType.METADATA_CONNECTIONS);
      if (!withDeleted && folder.isDeleted()) {
        continue;
      }
      DBConnectionSubFolderRepNode childNodeFolder=new DBConnectionSubFolderRepNode(folder,this,ENodeType.SIMPLE_FOLDER);
      childNodeFolder.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_CONNECTIONS);
      childNodeFolder.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_CONNECTIONS);
      super.getChildren().add(childNodeFolder);
    }
    for (    IRepositoryViewObject viewObject : tdqViewObjects.getMembers()) {
      if (!withDeleted && viewObject.isDeleted()) {
        continue;
      }
      DBConnectionRepNode repNode=new DBConnectionRepNode(viewObject,this,ENodeType.REPOSITORY_ELEMENT);
      repNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_CONNECTIONS);
      repNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_CONNECTIONS);
      viewObject.setRepositoryNode(repNode);
      super.getChildren().add(repNode);
    }
  }
 catch (  PersistenceException e) {
    log.error(e,e);
  }
  return super.getChildren();
}",0.920303605313093
138516,"public AnalysisColumnSetTreeViewer(Composite parent,ColumnSetMasterPage masterPage){
  absMasterPage=masterPage;
  viewKey=VIEWER_KEY;
  parentComp=parent;
  tree=createTree(parent);
  tree.setData(this);
  columnSetMultiValueList=new ArrayList<IRepositoryNode>();
  this.masterPage=masterPage;
  this.createButtonSection(parent.getParent());
  this.setElements(masterPage.getCurrentModelElementIndicators());
  this.setDirty(false);
  AbstractColumnDropTree treeViewer=masterPage.getTreeViewer();
  if (treeViewer != null && treeViewer instanceof AnalysisColumnSetTreeViewer) {
    setTreeViewer=(AnalysisColumnSetTreeViewer)treeViewer;
  }
}","public AnalysisColumnSetTreeViewer(Composite parent,ColumnSetMasterPage masterPage){
  absMasterPage=masterPage;
  viewKey=VIEWER_KEY;
  parentComp=parent;
  tree=createTree(parent);
  tree.setData(this);
  columnSetMultiValueList=new ArrayList<IRepositoryNode>();
  this.masterPage=masterPage;
  this.createButtonSection(parent.getParent());
  this.setElements(masterPage.getCurrentModelElementIndicators());
  this.setDirty(false);
  AbstractColumnDropTree treeViewer=null == masterPage.getTreeViewer() ? this : masterPage.getTreeViewer();
  if (treeViewer != null && treeViewer instanceof AnalysisColumnSetTreeViewer) {
    setTreeViewer=(AnalysisColumnSetTreeViewer)treeViewer;
  }
}",0.9669172932330828
138517,"/** 
 * DOC zshen Comment method ""createButtonSection"".
 * @param topComp create the button with delButton,moveUpButton,moveDownButton
 */
private void createButtonSection(Composite topComp){
  Composite buttonsComp=masterPage.getEditor().getToolkit().createComposite(topComp,SWT.NONE);
  buttonsComp.setLayout(new GridLayout(3,true));
  buttonsComp.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  GridData buttonGridData=new GridData();
  buttonGridData.heightHint=25;
  buttonGridData.horizontalAlignment=GridData.CENTER;
  buttonGridData.verticalAlignment=GridData.FILL;
  buttonGridData.grabExcessHorizontalSpace=true;
  buttonGridData.grabExcessVerticalSpace=true;
  final Button delButton=new Button(buttonsComp,SWT.NULL);
  delButton.setImage(ImageLib.getImage(ImageLib.DELETE_ACTION));
  delButton.setLayoutData(buttonGridData);
  final Button moveUpButton=new Button(buttonsComp,SWT.NULL);
  moveUpButton.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  moveUpButton.setLayoutData(buttonGridData);
  final Button moveDownButton=new Button(buttonsComp,SWT.NULL);
  moveDownButton.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  moveDownButton.setLayoutData(buttonGridData);
  buttons.put(""String_Node_Str"",delButton);
  buttons.put(""String_Node_Str"",moveUpButton);
  buttons.put(""String_Node_Str"",moveDownButton);
  enabledButtons(false);
  moveUpButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      moveElement(setTreeViewer,-1);
    }
  }
);
  moveDownButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      moveElement(setTreeViewer,1);
    }
  }
);
  delButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      Tree currentTree=tree;
      Object[] selectItem=currentTree.getSelection();
      List<IRepositoryNode> columnList=setTreeViewer.getColumnSetMultiValueList();
      for (int i=0; i < selectItem.length; i++) {
        Object removeElement=((TreeItem)selectItem[i]).getData(AnalysisColumnNominalIntervalTreeViewer.COLUMN_INDICATOR_KEY);
        columnList.remove(removeElement);
      }
      masterPage.getTreeViewer().setInput(convertList(columnList).toArray());
      enabledButtons(false);
    }
  }
);
}","/** 
 * DOC zshen Comment method ""createButtonSection"".
 * @param topComp create the button with delButton,moveUpButton,moveDownButton
 */
private void createButtonSection(Composite topComp){
  Composite buttonsComp=masterPage.getEditor().getToolkit().createComposite(topComp,SWT.NONE);
  buttonsComp.setLayout(new GridLayout(3,true));
  buttonsComp.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  GridData buttonGridData=new GridData();
  buttonGridData.heightHint=25;
  buttonGridData.horizontalAlignment=GridData.CENTER;
  buttonGridData.verticalAlignment=GridData.FILL;
  buttonGridData.grabExcessHorizontalSpace=true;
  buttonGridData.grabExcessVerticalSpace=true;
  final Button delButton=new Button(buttonsComp,SWT.NULL);
  delButton.setImage(ImageLib.getImage(ImageLib.DELETE_ACTION));
  delButton.setLayoutData(buttonGridData);
  final Button moveUpButton=new Button(buttonsComp,SWT.NULL);
  moveUpButton.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  moveUpButton.setLayoutData(buttonGridData);
  final Button moveDownButton=new Button(buttonsComp,SWT.NULL);
  moveDownButton.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  moveDownButton.setLayoutData(buttonGridData);
  buttons.put(""String_Node_Str"",delButton);
  buttons.put(""String_Node_Str"",moveUpButton);
  buttons.put(""String_Node_Str"",moveDownButton);
  enabledButtons(false);
  moveUpButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      moveElement(setTreeViewer,-1);
    }
  }
);
  moveDownButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      moveElement(setTreeViewer,1);
    }
  }
);
  delButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      TreeItem[] selection=tree.getSelection();
      for (      TreeItem treeItem : selection) {
        ModelElementIndicator meIndicator=(ModelElementIndicator)treeItem.getData(MODELELEMENT_INDICATOR_KEY);
        deleteColumnItems(meIndicator.getModelElementRepositoryNode());
        removeItemBranch(treeItem);
      }
      updateBindConnection(masterPage,tree);
      enabledButtons(false);
      tree.setFocus();
    }
  }
);
}",0.8499237638858637
138518,"/** 
 * Set the pattern and regularExpression value to the corresponding field, it can be called after the control created.
 * @param pattern
 * @param regularExpression
 */
public void setPatternExpression(PatternMasterDetailsPage editorPage,Pattern editorPattern,RegularExpression regularExpression){
  this.editorPage=editorPage;
  pattern=editorPattern;
  this.regularExpression=regularExpression;
  if (PluginConstant.EMPTY_STRING.equals(regularText)) {
    return;
  }
  this.regularText.setText(regularExpression.getExpression().getBody());
  this.saveButton.setEnabled(true);
  this.createPatternButton.setEnabled(true);
}","/** 
 * Set the pattern and regularExpression value to the corresponding field, it can be called after the control created.
 * @param pattern
 * @param regularExpression
 */
public void setPatternExpression(PatternMasterDetailsPage editorPage,Pattern editorPattern,RegularExpression regularExpression){
  this.editorPage=editorPage;
  pattern=editorPattern;
  this.regularExpression=regularExpression;
  String body=regularExpression.getExpression().getBody();
  this.regularText.setText(body == null ? ""String_Node_Str"" : body);
  this.saveButton.setEnabled(true);
  this.createPatternButton.setEnabled(true);
  if (regularExpression != null) {
    String language=regularExpression.getExpression().getLanguage();
    isJavaEngine=StringUtils.equalsIgnoreCase(language,PatternLanguageType.JAVA.getName());
    buttonJava.setSelection(isJavaEngine);
    buttonSql.setEnabled(!isJavaEngine);
    buttonSql.setSelection(!isJavaEngine);
    dbCombo.setEnabled(buttonSql.getSelection());
  }
}",0.5176034589252625
138519,"@Override public void createPartControl(final Composite parent){
  ScrolledComposite scrolledComposite=new ScrolledComposite(parent,SWT.V_SCROLL);
  scrolledComposite.setExpandHorizontal(true);
  scrolledComposite.setExpandVertical(true);
  Composite mainComposite=new Composite(scrolledComposite,SWT.NONE);
  scrolledComposite.setContent(mainComposite);
  BorderLayout blay=new BorderLayout();
  mainComposite.setLayout(blay);
  final Composite composite=new Composite(mainComposite,SWT.NONE);
  composite.setLayoutData(BorderLayout.NORTH);
  GridLayout layout=new GridLayout();
  layout.marginHeight=0;
  layout.marginWidth=0;
  layout.numColumns=1;
  composite.setLayout(layout);
  Composite coboCom=new Composite(composite,SWT.NONE);
  layout=new GridLayout();
  layout.numColumns=3;
  coboCom.setLayout(layout);
  GridData data=new GridData();
  data.horizontalAlignment=GridData.CENTER;
  coboCom.setLayoutData(data);
  Button buttonJava=new Button(coboCom,SWT.RADIO);
  buttonJava.setText(ExecutionLanguage.JAVA.getLiteral());
  data=new GridData();
  data.widthHint=120;
  buttonJava.setLayoutData(data);
  buttonJava.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      isJavaEngine=true;
      sqlButton.setEnabled(false);
    }
  }
);
  Button buttonSql=new Button(coboCom,SWT.RADIO);
  buttonSql.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  buttonSql.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      isJavaEngine=false;
      sqlButton.setEnabled(true);
    }
  }
);
  buttonSql.setSelection(true);
  dbCombo=new CCombo(coboCom,SWT.DROP_DOWN | SWT.BORDER);
  dbCombo.setEditable(false);
  data=new GridData();
  data.widthHint=100;
  dbCombo.setLayoutData(data);
  listTdDataProviders=RepositoryNodeHelper.getConnectionRepositoryNodes();
  List<String> items=new ArrayList<String>();
  for (  IRepositoryNode connRepNode : listTdDataProviders) {
    ConnectionItem connItem=(ConnectionItem)connRepNode.getObject().getProperty().getItem();
    items.add(connItem.getConnection().getName());
  }
  if (!items.isEmpty()) {
    dbCombo.setItems(items.toArray(new String[0]));
    if (dbCombo.getText().equals(""String_Node_Str"")) {
      dbCombo.setText(items.get(0));
    }
  }
  Composite imgCom=new Composite(composite,SWT.NONE);
  imgCom.setLayout(layout);
  data=new GridData();
  data.horizontalAlignment=GridData.END;
  imgCom.setLayoutData(data);
  emoticonLabel=new Label(imgCom,SWT.NONE);
  GridData gd=new GridData();
  gd.heightHint=18;
  gd.widthHint=18;
  emoticonLabel.setLayoutData(gd);
  gd=new GridData();
  gd.heightHint=18;
  gd.widthHint=65;
  resultLabel=new Label(imgCom,SWT.NONE);
  resultLabel.setLayoutData(gd);
  Label textAreaLabel=new Label(composite,SWT.NONE);
  textAreaLabel.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  testText=new Text(composite,SWT.BORDER | SWT.MULTI | SWT.WRAP| SWT.V_SCROLL);
  data=new GridData(GridData.FILL_HORIZONTAL);
  data.heightHint=40;
  testText.setLayoutData(data);
  testText.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
  Label regularLabel=new Label(composite,SWT.NONE);
  regularLabel.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  this.regularText=new Text(composite,SWT.BORDER | SWT.MULTI | SWT.WRAP| SWT.V_SCROLL);
  this.regularText.setLayoutData(data);
  regularText.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
  regularText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      boolean enabled=(!regularText.getText().equals(PluginConstant.EMPTY_STRING)) && (CheckValueUtils.isPatternValue(regularText.getText()));
      if (pattern != null) {
        saveButton.setEnabled(enabled);
      }
      createPatternButton.setEnabled(enabled);
    }
  }
);
  BorderLayout blayout=new BorderLayout();
  Composite bottom=new Composite(mainComposite,SWT.NONE);
  bottom.setLayout(blayout);
  bottom.setLayoutData(BorderLayout.CENTER);
  Composite centerPane=new Composite(bottom,SWT.NONE);
  centerPane.setLayoutData(BorderLayout.CENTER);
  final Composite rightPane=new Composite(bottom,SWT.NONE);
  rightPane.setLayoutData(BorderLayout.EAST);
  GridLayout llayout=new GridLayout();
  llayout.numColumns=3;
  centerPane.setLayout(llayout);
  GridLayout rlayout=new GridLayout();
  rlayout.numColumns=1;
  rightPane.setLayout(rlayout);
  data=new GridData();
  data.heightHint=25;
  data.widthHint=92;
  sqlButton=new Button(centerPane,SWT.PUSH);
  sqlButton.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  sqlButton.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
  sqlButton.setLayoutData(data);
  sqlButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      openSQLEditor();
    }
  }
);
  createPatternButton=new Button(centerPane,SWT.PUSH);
  createPatternButton.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  createPatternButton.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
  data=new GridData();
  data.heightHint=25;
  data.widthHint=92;
  createPatternButton.setLayoutData(data);
  createPatternButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      String language=null;
      if (regularExpression != null) {
        language=regularExpression.getExpression().getLanguage();
      }
 else {
        DbmsLanguage dbmsLanguage=getDbmsLanguage();
        if (dbmsLanguage != null) {
          language=dbmsLanguage.getDbmsName();
        }
      }
      new CreatePatternAction(ResourceManager.getPatternFolder(),ExpressionType.REGEXP,regularText.getText(),language).run();
    }
  }
);
  createPatternButton.setEnabled(false);
  saveButton=new Button(centerPane,SWT.PUSH);
  saveButton.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  saveButton.setEnabled(false);
  saveButton.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
  data=new GridData();
  data.heightHint=25;
  data.widthHint=92;
  saveButton.setLayoutData(data);
  saveButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      savePattern();
    }
  }
);
  testButton=new Button(rightPane,SWT.PUSH);
  testButton.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  testButton.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
  testButton.setLayoutData(data);
  testButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      testRegularText();
    }
  }
);
  scrolledComposite.setMinSize(mainComposite.computeSize(SWT.DEFAULT,SWT.DEFAULT));
  mainComposite.layout();
  activateContext();
}","@Override public void createPartControl(final Composite parent){
  ScrolledComposite scrolledComposite=new ScrolledComposite(parent,SWT.V_SCROLL);
  scrolledComposite.setExpandHorizontal(true);
  scrolledComposite.setExpandVertical(true);
  Composite mainComposite=new Composite(scrolledComposite,SWT.NONE);
  scrolledComposite.setContent(mainComposite);
  BorderLayout blay=new BorderLayout();
  mainComposite.setLayout(blay);
  final Composite composite=new Composite(mainComposite,SWT.NONE);
  composite.setLayoutData(BorderLayout.NORTH);
  GridLayout layout=new GridLayout();
  layout.marginHeight=0;
  layout.marginWidth=0;
  layout.numColumns=1;
  composite.setLayout(layout);
  Composite coboCom=new Composite(composite,SWT.NONE);
  layout=new GridLayout();
  layout.numColumns=3;
  coboCom.setLayout(layout);
  GridData data=new GridData();
  data.horizontalAlignment=GridData.CENTER;
  coboCom.setLayoutData(data);
  buttonJava=new Button(coboCom,SWT.RADIO);
  buttonJava.setText(ExecutionLanguage.JAVA.getLiteral());
  data=new GridData();
  data.widthHint=120;
  buttonJava.setLayoutData(data);
  buttonJava.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      isJavaEngine=true;
      sqlButton.setEnabled(false);
      dbCombo.setEnabled(false);
    }
  }
);
  buttonSql=new Button(coboCom,SWT.RADIO);
  buttonSql.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  buttonSql.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      isJavaEngine=false;
      sqlButton.setEnabled(true);
      dbCombo.setEnabled(true);
    }
  }
);
  buttonSql.setSelection(true);
  buttonSql.setEnabled(!isJavaEngine);
  dbCombo=new CCombo(coboCom,SWT.DROP_DOWN | SWT.BORDER);
  dbCombo.setEditable(false);
  data=new GridData();
  data.widthHint=100;
  dbCombo.setLayoutData(data);
  listTdDataProviders=RepositoryNodeHelper.getConnectionRepositoryNodes();
  List<String> items=new ArrayList<String>();
  for (  IRepositoryNode connRepNode : listTdDataProviders) {
    ConnectionItem connItem=(ConnectionItem)connRepNode.getObject().getProperty().getItem();
    items.add(connItem.getConnection().getName());
  }
  if (!items.isEmpty()) {
    dbCombo.setItems(items.toArray(new String[0]));
    if (dbCombo.getText().equals(""String_Node_Str"")) {
      dbCombo.setText(items.get(0));
    }
  }
  Composite imgCom=new Composite(composite,SWT.NONE);
  imgCom.setLayout(layout);
  data=new GridData();
  data.horizontalAlignment=GridData.END;
  imgCom.setLayoutData(data);
  emoticonLabel=new Label(imgCom,SWT.NONE);
  GridData gd=new GridData();
  gd.heightHint=18;
  gd.widthHint=18;
  emoticonLabel.setLayoutData(gd);
  gd=new GridData();
  gd.heightHint=18;
  gd.widthHint=65;
  resultLabel=new Label(imgCom,SWT.NONE);
  resultLabel.setLayoutData(gd);
  Label textAreaLabel=new Label(composite,SWT.NONE);
  textAreaLabel.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  testText=new Text(composite,SWT.BORDER | SWT.MULTI | SWT.WRAP| SWT.V_SCROLL);
  data=new GridData(GridData.FILL_HORIZONTAL);
  data.heightHint=40;
  testText.setLayoutData(data);
  testText.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
  Label regularLabel=new Label(composite,SWT.NONE);
  regularLabel.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  this.regularText=new Text(composite,SWT.BORDER | SWT.MULTI | SWT.WRAP| SWT.V_SCROLL);
  this.regularText.setLayoutData(data);
  regularText.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
  regularText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      boolean enabled=(!regularText.getText().equals(PluginConstant.EMPTY_STRING)) && (CheckValueUtils.isPatternValue(regularText.getText()));
      if (pattern != null) {
        saveButton.setEnabled(enabled);
      }
      createPatternButton.setEnabled(enabled);
    }
  }
);
  BorderLayout blayout=new BorderLayout();
  Composite bottom=new Composite(mainComposite,SWT.NONE);
  bottom.setLayout(blayout);
  bottom.setLayoutData(BorderLayout.CENTER);
  Composite centerPane=new Composite(bottom,SWT.NONE);
  centerPane.setLayoutData(BorderLayout.CENTER);
  final Composite rightPane=new Composite(bottom,SWT.NONE);
  rightPane.setLayoutData(BorderLayout.EAST);
  GridLayout llayout=new GridLayout();
  llayout.numColumns=3;
  centerPane.setLayout(llayout);
  GridLayout rlayout=new GridLayout();
  rlayout.numColumns=1;
  rightPane.setLayout(rlayout);
  data=new GridData();
  data.heightHint=25;
  data.widthHint=92;
  sqlButton=new Button(centerPane,SWT.PUSH);
  sqlButton.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  sqlButton.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
  sqlButton.setLayoutData(data);
  sqlButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      openSQLEditor();
    }
  }
);
  createPatternButton=new Button(centerPane,SWT.PUSH);
  createPatternButton.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  createPatternButton.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
  data=new GridData();
  data.heightHint=25;
  data.widthHint=92;
  createPatternButton.setLayoutData(data);
  createPatternButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      String language=null;
      if (regularExpression != null) {
        language=regularExpression.getExpression().getLanguage();
      }
 else {
        DbmsLanguage dbmsLanguage=getDbmsLanguage();
        if (dbmsLanguage != null) {
          language=dbmsLanguage.getDbmsName();
        }
      }
      new CreatePatternAction(ResourceManager.getPatternFolder(),ExpressionType.REGEXP,regularText.getText(),language).run();
    }
  }
);
  createPatternButton.setEnabled(false);
  saveButton=new Button(centerPane,SWT.PUSH);
  saveButton.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  saveButton.setEnabled(false);
  saveButton.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
  data=new GridData();
  data.heightHint=25;
  data.widthHint=92;
  saveButton.setLayoutData(data);
  saveButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      savePattern();
    }
  }
);
  testButton=new Button(rightPane,SWT.PUSH);
  testButton.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  testButton.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
  testButton.setLayoutData(data);
  testButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      testRegularText();
    }
  }
);
  scrolledComposite.setMinSize(mainComposite.computeSize(SWT.DEFAULT,SWT.DEFAULT));
  mainComposite.layout();
  activateContext();
}",0.991418181818182
138520,"@Override public void createPartControl(final Composite parent){
  ScrolledComposite scrolledComposite=new ScrolledComposite(parent,SWT.V_SCROLL);
  scrolledComposite.setExpandHorizontal(true);
  scrolledComposite.setExpandVertical(true);
  Composite mainComposite=new Composite(scrolledComposite,SWT.NONE);
  scrolledComposite.setContent(mainComposite);
  BorderLayout blay=new BorderLayout();
  mainComposite.setLayout(blay);
  final Composite composite=new Composite(mainComposite,SWT.NONE);
  composite.setLayoutData(BorderLayout.NORTH);
  GridLayout layout=new GridLayout();
  layout.marginHeight=0;
  layout.marginWidth=0;
  layout.numColumns=1;
  composite.setLayout(layout);
  Composite coboCom=new Composite(composite,SWT.NONE);
  layout=new GridLayout();
  layout.numColumns=3;
  coboCom.setLayout(layout);
  GridData data=new GridData();
  data.horizontalAlignment=GridData.CENTER;
  coboCom.setLayoutData(data);
  buttonJava=new Button(coboCom,SWT.RADIO);
  buttonJava.setText(ExecutionLanguage.JAVA.getLiteral());
  data=new GridData();
  data.widthHint=120;
  buttonJava.setLayoutData(data);
  buttonJava.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      isJavaEngine=true;
      sqlButton.setEnabled(false);
      dbCombo.setEnabled(false);
    }
  }
);
  buttonSql=new Button(coboCom,SWT.RADIO);
  buttonSql.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  buttonSql.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      isJavaEngine=false;
      sqlButton.setEnabled(true);
      dbCombo.setEnabled(true);
    }
  }
);
  buttonSql.setSelection(true);
  buttonSql.setEnabled(!isJavaEngine);
  dbCombo=new CCombo(coboCom,SWT.DROP_DOWN | SWT.BORDER);
  dbCombo.setEditable(false);
  data=new GridData();
  data.widthHint=100;
  dbCombo.setLayoutData(data);
  listTdDataProviders=RepositoryNodeHelper.getConnectionRepositoryNodes();
  List<String> items=new ArrayList<String>();
  for (  IRepositoryNode connRepNode : listTdDataProviders) {
    ConnectionItem connItem=(ConnectionItem)connRepNode.getObject().getProperty().getItem();
    items.add(connItem.getConnection().getName());
  }
  if (!items.isEmpty()) {
    dbCombo.setItems(items.toArray(new String[0]));
    if (dbCombo.getText().equals(""String_Node_Str"")) {
      dbCombo.setText(items.get(0));
    }
  }
  Composite imgCom=new Composite(composite,SWT.NONE);
  imgCom.setLayout(layout);
  data=new GridData();
  data.horizontalAlignment=GridData.END;
  imgCom.setLayoutData(data);
  emoticonLabel=new Label(imgCom,SWT.NONE);
  GridData gd=new GridData();
  gd.heightHint=18;
  gd.widthHint=18;
  emoticonLabel.setLayoutData(gd);
  gd=new GridData();
  gd.heightHint=18;
  gd.widthHint=65;
  resultLabel=new Label(imgCom,SWT.NONE);
  resultLabel.setLayoutData(gd);
  Label textAreaLabel=new Label(composite,SWT.NONE);
  textAreaLabel.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  testText=new Text(composite,SWT.BORDER | SWT.MULTI | SWT.WRAP| SWT.V_SCROLL);
  data=new GridData(GridData.FILL_HORIZONTAL);
  data.heightHint=40;
  testText.setLayoutData(data);
  testText.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
  Label regularLabel=new Label(composite,SWT.NONE);
  regularLabel.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  this.regularText=new Text(composite,SWT.BORDER | SWT.MULTI | SWT.WRAP| SWT.V_SCROLL);
  this.regularText.setLayoutData(data);
  regularText.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
  regularText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      boolean enabled=(!regularText.getText().equals(PluginConstant.EMPTY_STRING)) && (CheckValueUtils.isPatternValue(regularText.getText()));
      if (pattern != null) {
        saveButton.setEnabled(enabled);
      }
      createPatternButton.setEnabled(enabled);
    }
  }
);
  BorderLayout blayout=new BorderLayout();
  Composite bottom=new Composite(mainComposite,SWT.NONE);
  bottom.setLayout(blayout);
  bottom.setLayoutData(BorderLayout.CENTER);
  Composite centerPane=new Composite(bottom,SWT.NONE);
  centerPane.setLayoutData(BorderLayout.CENTER);
  final Composite rightPane=new Composite(bottom,SWT.NONE);
  rightPane.setLayoutData(BorderLayout.EAST);
  GridLayout llayout=new GridLayout();
  llayout.numColumns=3;
  centerPane.setLayout(llayout);
  GridLayout rlayout=new GridLayout();
  rlayout.numColumns=1;
  rightPane.setLayout(rlayout);
  data=new GridData();
  data.heightHint=25;
  data.widthHint=92;
  sqlButton=new Button(centerPane,SWT.PUSH);
  sqlButton.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  sqlButton.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
  sqlButton.setLayoutData(data);
  sqlButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      openSQLEditor();
    }
  }
);
  createPatternButton=new Button(centerPane,SWT.PUSH);
  createPatternButton.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  createPatternButton.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
  data=new GridData();
  data.heightHint=25;
  data.widthHint=92;
  createPatternButton.setLayoutData(data);
  createPatternButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      String language=null;
      if (regularExpression != null) {
        language=regularExpression.getExpression().getLanguage();
      }
 else {
        DbmsLanguage dbmsLanguage=getDbmsLanguage();
        if (dbmsLanguage != null) {
          language=dbmsLanguage.getDbmsName();
        }
      }
      new CreatePatternAction(ResourceManager.getPatternFolder(),ExpressionType.REGEXP,regularText.getText(),language).run();
    }
  }
);
  createPatternButton.setEnabled(false);
  saveButton=new Button(centerPane,SWT.PUSH);
  saveButton.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  saveButton.setEnabled(false);
  saveButton.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
  data=new GridData();
  data.heightHint=25;
  data.widthHint=92;
  saveButton.setLayoutData(data);
  saveButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      savePattern();
    }
  }
);
  testButton=new Button(rightPane,SWT.PUSH);
  testButton.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  testButton.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
  testButton.setLayoutData(data);
  testButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      testRegularText();
    }
  }
);
  scrolledComposite.setMinSize(mainComposite.computeSize(SWT.DEFAULT,SWT.DEFAULT));
  mainComposite.layout();
  activateContext();
}","@Override public void createPartControl(final Composite parent){
  ScrolledComposite scrolledComposite=new ScrolledComposite(parent,SWT.V_SCROLL);
  scrolledComposite.setExpandHorizontal(true);
  scrolledComposite.setExpandVertical(true);
  Composite mainComposite=new Composite(scrolledComposite,SWT.NONE);
  scrolledComposite.setContent(mainComposite);
  BorderLayout blay=new BorderLayout();
  mainComposite.setLayout(blay);
  final Composite composite=new Composite(mainComposite,SWT.NONE);
  composite.setLayoutData(BorderLayout.NORTH);
  GridLayout layout=new GridLayout();
  layout.marginHeight=0;
  layout.marginWidth=0;
  layout.numColumns=1;
  composite.setLayout(layout);
  Composite coboCom=new Composite(composite,SWT.NONE);
  layout=new GridLayout();
  layout.numColumns=3;
  coboCom.setLayout(layout);
  GridData data=new GridData();
  data.horizontalAlignment=GridData.CENTER;
  coboCom.setLayoutData(data);
  buttonJava=new Button(coboCom,SWT.RADIO);
  buttonJava.setText(ExecutionLanguage.JAVA.getLiteral());
  data=new GridData();
  data.widthHint=120;
  buttonJava.setLayoutData(data);
  buttonJava.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      isJavaEngine=true;
      sqlButton.setEnabled(false);
      dbCombo.setEnabled(false);
    }
  }
);
  buttonSql=new Button(coboCom,SWT.RADIO);
  buttonSql.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  buttonSql.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      isJavaEngine=false;
      sqlButton.setEnabled(true);
      dbCombo.setEnabled(true);
    }
  }
);
  buttonSql.setSelection(true);
  buttonSql.setEnabled(!isJavaEngine);
  dbCombo=new CCombo(coboCom,SWT.DROP_DOWN | SWT.BORDER);
  dbCombo.setEditable(false);
  data=new GridData();
  data.widthHint=100;
  dbCombo.setLayoutData(data);
  listTdDataProviders=RepositoryNodeHelper.getDBConnectionRepositoryNodes();
  List<String> items=new ArrayList<String>();
  for (  IRepositoryNode connRepNode : listTdDataProviders) {
    ConnectionItem connItem=(ConnectionItem)connRepNode.getObject().getProperty().getItem();
    items.add(connItem.getConnection().getName());
  }
  if (!items.isEmpty()) {
    dbCombo.setItems(items.toArray(new String[0]));
    if (dbCombo.getText().equals(""String_Node_Str"")) {
      dbCombo.setText(items.get(0));
    }
  }
  Composite imgCom=new Composite(composite,SWT.NONE);
  imgCom.setLayout(layout);
  data=new GridData();
  data.horizontalAlignment=GridData.END;
  imgCom.setLayoutData(data);
  emoticonLabel=new Label(imgCom,SWT.NONE);
  GridData gd=new GridData();
  gd.heightHint=18;
  gd.widthHint=18;
  emoticonLabel.setLayoutData(gd);
  gd=new GridData();
  gd.heightHint=18;
  gd.widthHint=65;
  resultLabel=new Label(imgCom,SWT.NONE);
  resultLabel.setLayoutData(gd);
  Label textAreaLabel=new Label(composite,SWT.NONE);
  textAreaLabel.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  testText=new Text(composite,SWT.BORDER | SWT.MULTI | SWT.WRAP| SWT.V_SCROLL);
  data=new GridData(GridData.FILL_HORIZONTAL);
  data.heightHint=40;
  testText.setLayoutData(data);
  testText.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
  Label regularLabel=new Label(composite,SWT.NONE);
  regularLabel.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  this.regularText=new Text(composite,SWT.BORDER | SWT.MULTI | SWT.WRAP| SWT.V_SCROLL);
  this.regularText.setLayoutData(data);
  regularText.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
  regularText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      boolean enabled=(!regularText.getText().equals(PluginConstant.EMPTY_STRING)) && (CheckValueUtils.isPatternValue(regularText.getText()));
      if (pattern != null) {
        saveButton.setEnabled(enabled);
      }
      createPatternButton.setEnabled(enabled);
    }
  }
);
  BorderLayout blayout=new BorderLayout();
  Composite bottom=new Composite(mainComposite,SWT.NONE);
  bottom.setLayout(blayout);
  bottom.setLayoutData(BorderLayout.CENTER);
  Composite centerPane=new Composite(bottom,SWT.NONE);
  centerPane.setLayoutData(BorderLayout.CENTER);
  final Composite rightPane=new Composite(bottom,SWT.NONE);
  rightPane.setLayoutData(BorderLayout.EAST);
  GridLayout llayout=new GridLayout();
  llayout.numColumns=3;
  centerPane.setLayout(llayout);
  GridLayout rlayout=new GridLayout();
  rlayout.numColumns=1;
  rightPane.setLayout(rlayout);
  data=new GridData();
  data.heightHint=25;
  data.widthHint=92;
  sqlButton=new Button(centerPane,SWT.PUSH);
  sqlButton.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  sqlButton.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
  sqlButton.setLayoutData(data);
  sqlButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      openSQLEditor();
    }
  }
);
  createPatternButton=new Button(centerPane,SWT.PUSH);
  createPatternButton.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  createPatternButton.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
  data=new GridData();
  data.heightHint=25;
  data.widthHint=92;
  createPatternButton.setLayoutData(data);
  createPatternButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      String language=null;
      if (regularExpression != null) {
        language=regularExpression.getExpression().getLanguage();
      }
 else {
        DbmsLanguage dbmsLanguage=getDbmsLanguage();
        if (dbmsLanguage != null) {
          language=dbmsLanguage.getDbmsName();
        }
      }
      new CreatePatternAction(ResourceManager.getPatternFolder(),ExpressionType.REGEXP,regularText.getText(),language).run();
    }
  }
);
  createPatternButton.setEnabled(false);
  saveButton=new Button(centerPane,SWT.PUSH);
  saveButton.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  saveButton.setEnabled(false);
  saveButton.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
  data=new GridData();
  data.heightHint=25;
  data.widthHint=92;
  saveButton.setLayoutData(data);
  saveButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      savePattern();
    }
  }
);
  testButton=new Button(rightPane,SWT.PUSH);
  testButton.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  testButton.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
  testButton.setLayoutData(data);
  testButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      testRegularText();
    }
  }
);
  scrolledComposite.setMinSize(mainComposite.computeSize(SWT.DEFAULT,SWT.DEFAULT));
  mainComposite.layout();
  activateContext();
}",0.9998555122092184
138521,"@Override public void openEditor(Item item){
  PatternItemEditorInput analysisEditorInput=new PatternItemEditorInput(item);
  CorePlugin.getDefault().openEditor(analysisEditorInput,PatternEditor.class.getName());
}","@Override public void openEditor(Item item){
  TDQPatternItem patternItem=(TDQPatternItem)item;
  String subfolderPath=patternItem.getState().getPath();
  String folderPath=ResourceManager.getIndicatorFolder().getFullPath().toString();
  Path path=new Path(folderPath);
  Path append=(Path)path.append(new Path(subfolderPath)).append(new Path(patternItem.getFilename()));
  IPath removeLastSegments=append.removeFirstSegments(1);
  IFile fileEditorInput=ResourceManager.getRootProject().getFile(removeLastSegments);
  try {
    IDE.openEditor(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage(),fileEditorInput,true);
  }
 catch (  PartInitException e) {
    log.error(e,e);
  }
}",0.1646542261251372
138522,"@Override public boolean equals(Object obj){
  if (this == obj) {
    return true;
  }
  if (obj instanceof AbstractItemEditorInput) {
    AbstractItemEditorInput other=(AbstractItemEditorInput)obj;
    return StringUtils.equals(item.getProperty().getLabel(),other.item.getProperty().getLabel());
  }
  return false;
}","@Override public boolean equals(Object obj){
  if (obj instanceof AbstractItemEditorInput) {
    AbstractItemEditorInput other=(AbstractItemEditorInput)obj;
    boolean isEqualsId=item.getProperty().getId().equals(other.item.getProperty().getId());
    if (isEqualsId) {
      if (StringUtils.equals(item.getProperty().getLabel(),other.item.getProperty().getLabel())) {
        if (item.getProperty().getVersion().equals(other.item.getProperty().getVersion())) {
          return true;
        }
      }
    }
 else     return false;
  }
  return false;
}",0.6162657502863689
138523,"@Override public void openEditor(Item item){
  AnalysisItemEditorInput analysisEditorInput=new AnalysisItemEditorInput(item);
  DBConnectionRepNode connectionRepNode=getParameter().getConnectionRepNode();
  analysisEditorInput.setConnectionNode(connectionRepNode);
  CorePlugin.getDefault().openEditor(analysisEditorInput,AnalysisEditor.class.getName());
}","@Override public void openEditor(Item item){
  TDQAnalysisItem anaItem=(TDQAnalysisItem)item;
  String folderPath=anaItem.getState().getPath();
  Path path=new Path(folderPath);
  Path append=(Path)path.append(new Path(anaItem.getFilename()));
  IPath removeLastSegments=append.removeFirstSegments(1);
  IFile fileEditorInput=ResourceManager.getRootProject().getFile(removeLastSegments);
  try {
    IDE.openEditor(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage(),fileEditorInput,true);
  }
 catch (  PartInitException e) {
    log.error(e,e);
  }
}",0.1837837837837838
138524,"@Override public void openEditor(Item item){
  BusinessRuleItemEditorInput dqRuleEditorInput=new BusinessRuleItemEditorInput(item);
  CorePlugin.getDefault().openEditor(dqRuleEditorInput,DQRuleEditor.class.getName());
}","@Override public void openEditor(Item item){
  TDQBusinessRuleItem ruleItem=(TDQBusinessRuleItem)item;
  String folderPath=ruleItem.getState().getPath();
  if (folderPath.equals(""String_Node_Str"")) {
    folderPath=ResourceManager.getRulesSQLFolder().toString();
  }
  Path path=new Path(folderPath);
  Path append=(Path)path.append(new Path(ruleItem.getFilename()));
  IPath removeLastSegments=append.removeFirstSegments(2);
  IFile fileEditorInput=ResourceManager.getRootProject().getFile(removeLastSegments);
  try {
    IDE.openEditor(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage(),fileEditorInput,true);
  }
 catch (  PartInitException e) {
    log.error(e,e);
  }
}",0.131578947368421
138525,"@Override public void openEditor(Item item){
  IndicatorDefinitionItemEditorInput udiEditorInput=new IndicatorDefinitionItemEditorInput(item);
  CorePlugin.getDefault().openEditor(udiEditorInput,IndicatorEditor.class.getName());
}","@Override public void openEditor(Item item){
  TDQIndicatorDefinitionItem indicatorItem=(TDQIndicatorDefinitionItem)item;
  String subfolderPath=indicatorItem.getState().getPath();
  String folderPath=ResourceManager.getIndicatorFolder().getFullPath().toString();
  Path path=new Path(folderPath);
  Path append=(Path)path.append(new Path(subfolderPath)).append(new Path(indicatorItem.getFilename()));
  IPath removeLastSegments=append.removeFirstSegments(1);
  IFile fileEditorInput=ResourceManager.getRootProject().getFile(removeLastSegments);
  try {
    IDE.openEditor(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage(),fileEditorInput,true);
  }
 catch (  PartInitException e) {
    log.error(e,e);
  }
}",0.1567398119122257
138526,"@Override public void openEditor(Item item){
  TDQAnalysisItem anaItem=(TDQAnalysisItem)item;
  String folderPath=anaItem.getState().getPath();
  Path path=new Path(folderPath);
  Path append=(Path)path.append(new Path(anaItem.getFilename()));
  IPath removeLastSegments=append.removeFirstSegments(1);
  IFile fileEditorInput=ResourceManager.getRootProject().getFile(removeLastSegments);
  try {
    IDE.openEditor(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage(),fileEditorInput,true);
  }
 catch (  PartInitException e) {
    log.error(e,e);
  }
}","@Override public void openEditor(Item item){
  AnalysisItemEditorInput analysisEditorInput=new AnalysisItemEditorInput(item);
  DBConnectionRepNode connectionRepNode=getParameter().getConnectionRepNode();
  analysisEditorInput.setConnectionNode(connectionRepNode);
  CorePlugin.getDefault().openEditor(analysisEditorInput,AnalysisEditor.class.getName());
}",0.1275675675675675
138527,"@Override public boolean handleResourceChange(ModelElement modelElement){
  List<ModelElement> clientDependencys=EObjectHelper.getDependencyClients(modelElement);
  if (clientDependencys.size() > 0) {
    ModelElement[] dependencyElements=clientDependencys.toArray(new ModelElement[clientDependencys.size()]);
    DeleteModelElementConfirmDialog.showDialog(null,PropertyHelper.getItemFile(PropertyHelper.getProperty(modelElement)),dependencyElements,DefaultMessagesImpl.getString(""String_Node_Str""));
    return false;
  }
  return super.handleResourceChange(modelElement);
}","@Override public boolean handleResourceChange(ModelElement modelElement){
  final ModelElement modelElementFinal=modelElement;
  List<ModelElement> clientDependencys=EObjectHelper.getDependencyClients(modelElement);
  if (clientDependencys.size() > 0) {
    final ModelElement[] dependencyElements=clientDependencys.toArray(new ModelElement[clientDependencys.size()]);
    Display.getDefault().asyncExec(new Runnable(){
      public void run(){
        DeleteModelElementConfirmDialog.showDialog(null,PropertyHelper.getItemFile(PropertyHelper.getProperty(modelElementFinal)),dependencyElements,DefaultMessagesImpl.getString(""String_Node_Str""));
      }
    }
);
    return false;
  }
  return super.handleResourceChange(modelElement);
}",0.8771929824561403
138528,"@Override public void run(){
  boolean haveDependencies=false;
  ISelection selection=this.getSelection();
  for (  Object obj : ((IStructuredSelection)selection).toArray()) {
    if (obj instanceof RepositoryNode) {
      RepositoryNode node=(RepositoryNode)obj;
      List<ModelElement> dependencies=EObjectHelper.getDependencyClients(node);
      if (dependencies != null && !dependencies.isEmpty()) {
        haveDependencies=true;
        ModelElement modEle=RepositoryNodeHelper.getMetadataElement(node);
        showDependenciesDialog(modEle,dependencies);
        break;
      }
    }
  }
  if (haveDependencies) {
    return;
  }
  super.run();
  CorePlugin.getDefault().refreshDQView();
  CorePlugin.getDefault().refreshWorkSpace();
}","@Override public void run(){
  boolean haveDependencies=false;
  ISelection selection=this.getSelection();
  for (  Object obj : ((IStructuredSelection)selection).toArray()) {
    if (obj instanceof RepositoryNode) {
      RepositoryNode node=(RepositoryNode)obj;
      List<ModelElement> dependencies=EObjectHelper.getDependencyClients(node);
      if (dependencies != null && !dependencies.isEmpty()) {
        haveDependencies=true;
        ModelElement modEle=RepositoryNodeHelper.getModelElementFromRepositoryNode(node);
        showDependenciesDialog(modEle,dependencies);
        break;
      }
    }
  }
  if (haveDependencies) {
    return;
  }
  super.run();
  CorePlugin.getDefault().refreshDQView();
  CorePlugin.getDefault().refreshWorkSpace();
}",0.980705256154358
138529,"@Override public List<IRepositoryNode> getChildren(){
  anaElement=new ArrayList<IRepositoryNode>();
  IRepositoryViewObject reportViewObject=this.getObject();
  if (reportViewObject == null) {
    ReportRepNode parent=(ReportRepNode)this.getParent();
    TDQReportItem reportItem=(TDQReportItem)parent.getObject().getProperty().getItem();
    TdReport report=(TdReport)reportItem.getReport();
    if (this.getProperties(EProperties.LABEL).equals(parent.ANA_FLODER)) {
      for (      AnalysisMap analysisMap : analysisMaps) {
        Analysis analysis=analysisMap.getAnalysis();
        RepositoryNode recursiveFind=RepositoryNodeHelper.recursiveFind(analysis);
        IRepositoryViewObject viewObject=recursiveFind.getObject();
        AnalysisRepNode anaNode=new AnalysisRepNode(viewObject,this,ENodeType.REPOSITORY_ELEMENT);
        anaNode.setProperties(EProperties.LABEL,ERepositoryObjectType.TDQ_ANALYSIS_ELEMENT);
        anaNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.TDQ_ANALYSIS_ELEMENT);
        viewObject.setRepositoryNode(anaNode);
        anaElement.add(anaNode);
      }
    }
 else {
      EList<Document> documents=report.getDocument();
      for (      Document document : documents) {
      }
    }
    return anaElement;
  }
  return super.getChildren();
}","@Override public List<IRepositoryNode> getChildren(){
  anaElement=new ArrayList<IRepositoryNode>();
  IRepositoryViewObject reportViewObject=this.getObject();
  if (reportViewObject == null) {
    ReportRepNode parent=(ReportRepNode)this.getParent();
    TDQReportItem reportItem=(TDQReportItem)parent.getObject().getProperty().getItem();
    TdReport report=(TdReport)reportItem.getReport();
    if (this.getProperties(EProperties.LABEL).equals(parent.ANA_FLODER)) {
      for (      AnalysisMap analysisMap : analysisMaps) {
        Analysis analysis=analysisMap.getAnalysis();
        RepositoryNode recursiveFind=RepositoryNodeHelper.recursiveFind(analysis);
        if (recursiveFind == null) {
          continue;
        }
        IRepositoryViewObject viewObject=recursiveFind.getObject();
        AnalysisRepNode anaNode=new AnalysisRepNode(viewObject,this,ENodeType.REPOSITORY_ELEMENT);
        anaNode.setProperties(EProperties.LABEL,ERepositoryObjectType.TDQ_ANALYSIS_ELEMENT);
        anaNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.TDQ_ANALYSIS_ELEMENT);
        viewObject.setRepositoryNode(anaNode);
        anaElement.add(anaNode);
      }
    }
 else {
      EList<Document> documents=report.getDocument();
      for (      Document document : documents) {
      }
    }
    return anaElement;
  }
  return super.getChildren();
}",0.9749157618869336
138530,"@Override public void init(IViewSite site,IMemento memento) throws PartInitException {
  super.init(site,memento);
  if (memento == null) {
    setLinkingEnabled(false);
  }
  try {
    addPostWindowCloseListener();
    addResourceChangedListener();
    initToolBar();
    initWorkspace();
  }
 catch (  Exception e) {
    log.error(e,e);
  }
}","@Override public void init(IViewSite site,IMemento memento) throws PartInitException {
  super.init(site,memento);
  if (memento == null) {
    setLinkingEnabled(false);
  }
  try {
    addPostWindowCloseListener();
    initToolBar();
    initWorkspace();
  }
 catch (  Exception e) {
    log.error(e,e);
  }
}",0.9480122324159022
138531,"/** 
 * DOC bZhou Comment method ""getAvailableComponentExtensions"".
 * @param version
 * @param categry
 * @param reload
 * @return
 */
public static List<IEcosComponent> getAvailableComponentExtensions(String version,IEcosCategory categry,boolean reload){
  List<IEcosComponent> extensions=new ArrayList<IEcosComponent>();
  try {
    List<RevisionInfo> revisions=EcosystemService.getRevisionList(categry.getId(),version);
    Map<String,IEcosComponent> extensionsMap=new HashMap<String,IEcosComponent>();
    for (    RevisionInfo revision : revisions) {
      IEcosComponent extension=extensionsMap.get(revision.getExtension_name());
      if (extension == null) {
        extension=new EcosComponent();
        extension.setName(revision.getExtension_name());
        extension.setAuthor(revision.getAuthor_name());
        extension.setCategry(categry);
        extension.setDescription(revision.getExtension_description());
        extensionsMap.put(extension.getName(),extension);
        extensions.add(extension);
      }
      IRevision rev=convertRevision(revision);
      extension.getRevisions().add(rev);
      if (extension.getLatestRevision() == null || extension.getLatestRevision().getDate().before(rev.getDate())) {
        extension.setLatestRevision(rev);
      }
    }
  }
 catch (  Exception e) {
    log.error(e,e);
  }
  return extensions;
}","/** 
 * DOC bZhou Comment method ""getAvailableComponentExtensions"".
 * @param version
 * @param categry
 * @param reload
 * @return
 */
public static List<IEcosComponent> getAvailableComponentExtensions(String version,IEcosCategory categry,boolean reload){
  List<IEcosComponent> extensions=new ArrayList<IEcosComponent>();
  try {
    List<RevisionInfo> revisions=EcosystemService.getRevisionList(categry.getId(),version);
    Map<String,IEcosComponent> extensionsMap=new HashMap<String,IEcosComponent>();
    for (    RevisionInfo revision : revisions) {
      IEcosComponent extension=extensionsMap.get(revision.getExtensOnName());
      if (extension == null) {
        extension=new EcosComponent();
        extension.setName(revision.getExtensOnName());
        extension.setAuthor(revision.getAuthorName());
        extension.setCategry(categry);
        extension.setDescription(revision.getExtensionDescription());
        extensionsMap.put(extension.getName(),extension);
        extensions.add(extension);
      }
      IRevision rev=convertRevision(revision);
      extension.getRevisions().add(rev);
      if (extension.getLatestRevision() == null || extension.getLatestRevision().getDate().before(rev.getDate())) {
        extension.setLatestRevision(rev);
      }
    }
  }
 catch (  Exception e) {
    log.error(e,e);
  }
  return extensions;
}",0.991929567131328
138532,"/** 
 * Convert the web service returned value to our model object.
 * @param revision The message returned from web service method call.
 * @return
 * @throws ParseException
 */
private static IRevision convertRevision(RevisionInfo revision) throws ParseException {
  IRevision rev=new Revision();
  rev.setDate(formatter.parse(revision.getRevision_date()));
  rev.setName(revision.getRevision_name());
  rev.setUrl(revision.getDownload_url());
  rev.setDescription(revision.getRevision_description());
  rev.setId(revision.getRevision_id());
  rev.setFileName(revision.getFilename());
  return rev;
}","/** 
 * Convert the web service returned value to our model object.
 * @param revision The message returned from web service method call.
 * @return
 * @throws ParseException
 */
private static IRevision convertRevision(RevisionInfo revision) throws ParseException {
  IRevision rev=new Revision();
  rev.setDate(formatter.parse(revision.getRevisionDate()));
  rev.setName(revision.getRevisionName());
  rev.setUrl(revision.getDownloadUrl());
  rev.setDescription(revision.getRevisionDescription());
  rev.setId(revision.getRevisionId());
  rev.setFileName(revision.getFilename());
  return rev;
}",0.7389491242702252
138533,"/** 
 * Method ""getIndicators"".
 * @param column
 * @return the indicators attached to this column
 */
public Collection<Indicator> getIndicators(ModelElement modelElement){
  Collection<Indicator> indics=new ArrayList<Indicator>();
  EList<Indicator> allIndics=analysis.getResults().getIndicators();
  for (  Indicator indicator : allIndics) {
    if (indicator.getAnalyzedElement() != null && indicator.getAnalyzedElement().equals(modelElement)) {
      indics.add(indicator);
    }
  }
  return indics;
}","/** 
 * Method ""getIndicators"".
 * @param column
 * @return the indicators attached to this column
 */
public Collection<Indicator> getIndicators(ModelElement modelElement){
  Collection<Indicator> indics=new ArrayList<Indicator>();
  EList<Indicator> allIndics=analysis.getResults().getIndicators();
  for (  Indicator indicator : allIndics) {
    if (indicator.getAnalyzedElement() != null && indicator.getAnalyzedElement().equals(modelElement)) {
      initializeIndicator(indicator);
      indics.add(indicator);
    }
  }
  return indics;
}",0.9486692015209124
138534,"private void initializeIndicator(Indicator indicator,ModelElement modelElement){
  indicator.setAnalyzedElement(modelElement);
  if (indicator.getIndicatorDefinition() == null) {
    DefinitionHandler.getInstance().setDefaultIndicatorDefinition(indicator);
  }
  if (indicator instanceof CompositeIndicator) {
    for (    Indicator child : ((CompositeIndicator)indicator).getChildIndicators()) {
      initializeIndicator(child,modelElement);
    }
  }
}","/** 
 * zshen Comment method ""initializeIndicator"".
 * @param indicator
 */
private void initializeIndicator(Indicator indicator){
  if (indicator.getIndicatorDefinition() == null || indicator.getIndicatorDefinition().eIsProxy()) {
    DefinitionHandler.getInstance().setDefaultIndicatorDefinition(indicator);
  }
  if (indicator instanceof CompositeIndicator) {
    for (    Indicator child : ((CompositeIndicator)indicator).getChildIndicators()) {
      initializeIndicator(child);
    }
  }
}",0.7789473684210526
138535,"public void clear(){
  for (  Analysis analysis : allAnalysisMap.values()) {
    URI uri=analysis.eResource().getURI();
    EMFSharedResources.getInstance().unloadResource(uri.toString());
  }
  super.clear();
  this.allAnalysisMap.clear();
}","public void clear(){
  super.clear();
  this.allAnalysisMap.clear();
}",0.4487179487179487
138536,"/** 
 * DOC rli Comment method ""retireAnalysis"".
 * @param fileResource
 * @return
 */
public Analysis retireAnalysis(Resource fileResource){
  EList<EObject> contents=fileResource.getContents();
  if (contents.isEmpty()) {
    log.error(""String_Node_Str"" + fileResource);
  }
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + contents.size());
  }
  AnalysisSwitch<Analysis> mySwitch=new AnalysisSwitch<Analysis>(){
    public Analysis caseAnalysis(    Analysis object){
      return object;
    }
  }
;
  Analysis analysis=null;
  if (contents != null && contents.size() != 0) {
    analysis=mySwitch.doSwitch(contents.get(0));
  }
  return analysis;
}","/** 
 * DOC rli Comment method ""retireAnalysis"".
 * @param fileResource
 * @return
 */
public Analysis retireAnalysis(Resource fileResource){
  EList<EObject> contents=fileResource.getContents();
  if (contents.isEmpty()) {
    log.error(""String_Node_Str"" + fileResource);
  }
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + contents.size());
  }
  AnalysisSwitch<Analysis> mySwitch=new AnalysisSwitch<Analysis>(){
    public Analysis caseAnalysis(    Analysis object){
      return object;
    }
  }
;
  Analysis analysis=null;
  if (contents != null) {
    Iterator<EObject> iter=contents.iterator();
    while (iter.hasNext()) {
      analysis=mySwitch.doSwitch(iter.next());
      if (analysis != null) {
        break;
      }
    }
  }
  return analysis;
}",0.8105117565698479
138537,"public static List<ModelElement> getAll(){
  List<ModelElement> all=new ArrayList<ModelElement>();
  all.addAll(AnaResourceFileHelper.getInstance().getAllAnalysis());
  all.addAll(DQRuleResourceFileHelper.getInstance().getAllDQRules());
  all.addAll(IndicatorResourceFileHelper.getInstance().getAllUDIs());
  all.addAll(PatternResourceFileHelper.getInstance().getAllPatternes());
  all.addAll(PrvResourceFileHelper.getInstance().getAllDataProviders());
  if (!PluginChecker.isOnlyTopLoaded()) {
    all.addAll(RepResourceFileHelper.getInstance().getAllReports());
  }
  return all;
}","public static List<ModelElement> getAll(){
  List<ModelElement> all=new ArrayList<ModelElement>();
  all.addAll(AnaResourceFileHelper.getInstance().getAllAnalysis());
  all.addAll(DQRuleResourceFileHelper.getInstance().getAllDQRules());
  all.addAll(IndicatorResourceFileHelper.getInstance().getAllUDIs());
  all.addAll(IndicatorResourceFileHelper.getInstance().getAllSysIs());
  DefinitionHandler.reload();
  all.addAll(PatternResourceFileHelper.getInstance().getAllPatternes());
  all.addAll(PrvResourceFileHelper.getInstance().getAllDataProviders());
  if (!PluginChecker.isOnlyTopLoaded()) {
    all.addAll(RepResourceFileHelper.getInstance().getAllReports());
  }
  return all;
}",0.920284135753749
138538,"@Override protected boolean doExecute() throws Exception {
  boolean returnFlag=true;
  List<File> mergeFolders=new ArrayList<File>();
  mergeFolders.add(getWorkspacePath().append(DB_CONNECTION).toFile());
  mergeFolders.add(getWorkspacePath().append(MDM_CONNECTION).toFile());
  List<File> resources=new ArrayList<File>();
  for (  File theFile : mergeFolders) {
    if (theFile != null && theFile.exists() && (DB_CONNECTION.endsWith(theFile.getName()) || MDM_CONNECTION.endsWith(theFile.getName()))) {
      for (      File newFile : theFile.listFiles()) {
        if (newFile.isDirectory()) {
          resources.addAll(iteratorResource(newFile));
        }
 else         if (newFile.getName().toLowerCase().endsWith(FactoriesUtil.PROPERTIES_EXTENSION.toLowerCase())) {
          resources.add(newFile);
        }
      }
    }
  }
  if (resources.size() > 0) {
    for (    File resource : resources) {
      if (resource.isFile() && resource.getName().toLowerCase().endsWith(FactoriesUtil.PROPERTIES_EXTENSION.toLowerCase())) {
        try {
          handlePropertiesFile(resource);
        }
 catch (        Exception e) {
          returnFlag=false;
          log.warn(""String_Node_Str"" + resource.getAbsolutePath(),e);
        }
      }
    }
    File fileAnalysis=new File(ResourceManager.getAnalysisFolder().getRawLocationURI());
    File fileRule=new File(ResourceManager.getRulesFolder().getRawLocationURI());
    try {
      String[] anaFileExtentionNames={FactoriesUtil.ANA};
      String[] rulesFileEctentionNames={FactoriesUtil.DQRULE};
      returnFlag&=FilesUtils.migrateFolder(fileAnalysis,anaFileExtentionNames,this.getReplaceStringMap(),log) && FilesUtils.migrateFolder(fileRule,rulesFileEctentionNames,this.getReplaceStringMap(),log);
      AnaResourceFileHelper.getInstance().clear();
      AnaResourceFileHelper.getInstance().getAllAnalysis();
    }
 catch (    Exception e) {
      returnFlag=false;
      log.error(e,e);
    }
  }
  return returnFlag;
}","@Override protected boolean doExecute() throws Exception {
  boolean returnFlag=true;
  List<File> mergeFolders=new ArrayList<File>();
  mergeFolders.add(getWorkspacePath().append(DB_CONNECTION).toFile());
  mergeFolders.add(getWorkspacePath().append(MDM_CONNECTION).toFile());
  List<File> resources=new ArrayList<File>();
  for (  File theFile : mergeFolders) {
    if (theFile != null && theFile.exists() && (DB_CONNECTION.endsWith(theFile.getName()) || MDM_CONNECTION.endsWith(theFile.getName()))) {
      for (      File newFile : theFile.listFiles()) {
        if (newFile.isDirectory()) {
          resources.addAll(iteratorResource(newFile));
        }
 else         if (newFile.getName().toLowerCase().endsWith(FactoriesUtil.PROPERTIES_EXTENSION.toLowerCase())) {
          resources.add(newFile);
        }
      }
    }
  }
  if (resources.size() > 0) {
    for (    File resource : resources) {
      if (resource.isFile() && resource.getName().toLowerCase().endsWith(FactoriesUtil.PROPERTIES_EXTENSION.toLowerCase())) {
        try {
          handlePropertiesFile(resource);
        }
 catch (        Exception e) {
          returnFlag=false;
          log.warn(""String_Node_Str"" + resource.getAbsolutePath(),e);
        }
      }
    }
    File fileAnalysis=new File(ResourceManager.getAnalysisFolder().getRawLocationURI());
    File fileRule=new File(ResourceManager.getRulesFolder().getRawLocationURI());
    try {
      String[] anaFileExtentionNames={FactoriesUtil.ANA};
      String[] rulesFileEctentionNames={FactoriesUtil.DQRULE};
      returnFlag&=FilesUtils.migrateFolder(fileAnalysis,anaFileExtentionNames,this.getReplaceStringMap(),log) && FilesUtils.migrateFolder(fileRule,rulesFileEctentionNames,this.getReplaceStringMap(),log);
    }
 catch (    Exception e) {
      returnFlag=false;
      log.error(e,e);
    }
  }
  return returnFlag;
}",0.97116134060795
138539,"@Override protected boolean doExecute() throws Exception {
  boolean result=true;
  File fileAnalysis=this.getWorkspacePath().append(EResourceConstant.ANALYSIS.getPath()).toFile();
  try {
    String[] anaFileExtentionNames={""String_Node_Str""};
    result=FilesUtils.migrateFolder(fileAnalysis,anaFileExtentionNames,this.getReplaceStringMapMdm(),log);
    AnaResourceFileHelper.getInstance().clear();
    AnaResourceFileHelper.getInstance().getAllAnalysis();
  }
 catch (  Exception e) {
    result=false;
    log.error(e,e);
  }
  return result;
}","@Override protected boolean doExecute() throws Exception {
  boolean result=true;
  File fileAnalysis=this.getWorkspacePath().append(EResourceConstant.ANALYSIS.getPath()).toFile();
  try {
    String[] anaFileExtentionNames={""String_Node_Str""};
    result=FilesUtils.migrateFolder(fileAnalysis,anaFileExtentionNames,this.getReplaceStringMapMdm(),log);
  }
 catch (  Exception e) {
    result=false;
    log.error(e,e);
  }
  return result;
}",0.8918099089989889
138540,"/** 
 * delete mig folders.
 * @param basePath
 * @return
 */
private boolean deleteMigFolders(IPath basePath){
  IPath librariesPath=basePath.append(ResourceManager.getLibrariesFolder().getFullPath().makeRelativeTo(ResourceManager.getRootProject().getFullPath()));
  IPath dataProfilingPath=basePath.append(ResourceManager.getDataProfilingFolder().getFullPath().makeRelativeTo(ResourceManager.getRootProject().getFullPath()));
  boolean delete=FilesUtils.removeFolder(new File(librariesPath.toOSString() + MIGRATION_FOLDER_EXT),true);
  boolean delete2=FilesUtils.removeFolder(new File(dataProfilingPath.toOSString() + MIGRATION_FOLDER_EXT),true);
  ResourceService.refreshStructure();
  return delete && delete2;
}","/** 
 * delete mig folders.
 * @param basePath
 * @return
 */
private boolean deleteMigFolders(IPath basePath){
  IPath librariesPath=basePath.append(ResourceManager.getLibrariesFolder().getFullPath().makeRelativeTo(ResourceManager.getRootProject().getFullPath()));
  IPath dataProfilingPath=basePath.append(ResourceManager.getDataProfilingFolder().getFullPath().makeRelativeTo(ResourceManager.getRootProject().getFullPath()));
  File librariesFile=new File(librariesPath.toOSString() + MIGRATION_FOLDER_EXT);
  File dataProfilingFile=new File(dataProfilingPath.toOSString() + MIGRATION_FOLDER_EXT);
  boolean delete=true;
  boolean delete2=true;
  if (librariesFile != null) {
    delete=FilesUtils.removeFolder(librariesFile,true);
  }
  if (dataProfilingFile != null) {
    delete2=FilesUtils.removeFolder(dataProfilingFile,true);
  }
  ResourceService.refreshStructure();
  return delete && delete2;
}",0.7822331893892659
138541,"/** 
 * clear the cache of ModelElement.
 * @return
 */
private boolean reloadModelElementCache(){
  try {
    AnaResourceFileHelper.getInstance().clear();
    RepResourceFileHelper.getInstance().clear();
    IndicatorResourceFileHelper.getInstance().clear();
    PatternResourceFileHelper.getInstance().clear();
    DQRuleResourceFileHelper.getInstance().clear();
    ResourceFileMap.getAll();
  }
 catch (  Exception e) {
    log.error(e,e);
    return false;
  }
  return true;
}","/** 
 * clear the cache of ModelElement.
 * @return
 */
private boolean reloadModelElementCache(){
  try {
    AnaResourceFileHelper.getInstance().clear();
    RepResourceFileHelper.getInstance().clear();
    IndicatorResourceFileHelper.getInstance().clear();
    PatternResourceFileHelper.getInstance().clear();
    DQRuleResourceFileHelper.getInstance().clear();
    EMFSharedResources.getInstance().unloadResources();
    ResourceFileMap.getAll();
  }
 catch (  Exception e) {
    log.error(e,e);
    return false;
  }
  return true;
}",0.9450980392156862
138542,"@Override protected boolean doExecute() throws Exception {
  boolean result=true;
  Map<File,File> folderMap=initStructure();
  for (  File folder : folderMap.keySet()) {
    try {
      tansferFile(folder,folderMap);
    }
 catch (    Exception e) {
      log.error(e,e);
    }
  }
  File srcMdmXsdFolder=getWorkspacePath().append(ExchangeFileNameToReferenceTask.MDM_CONNECTION + IPath.SEPARATOR + ""String_Node_Str"").toFile();
  File tarMdmXsdFolder=getWorkspacePath().append(ERepositoryObjectType.getFolderName(ERepositoryObjectType.METADATA_MDMCONNECTION) + IPath.SEPARATOR + ""String_Node_Str"").toFile();
  FilesUtils.copyFolder(srcMdmXsdFolder,tarMdmXsdFolder,true,null,null,true,null);
  File mdmConnectionFolder=new File(ResourceManager.getMDMConnectionFolder().getRawLocationURI());
  final String[] metadataFileExtentionNames={""String_Node_Str""};
  UpdateMDMConnectionXSDPathTask.doUpdate(true,true,mdmConnectionFolder,metadataFileExtentionNames);
  ArrayList<File> fileList=new ArrayList<File>();
  FilesUtils.getAllFilesFromFolder(mdmConnectionFolder,fileList,new FilenameFilter(){
    public boolean accept(    File dir,    String name){
      if (name.endsWith(""String_Node_Str"")) {
        return true;
      }
      return false;
    }
  }
);
  for (  File file : fileList) {
    TypedReturnCode<Connection> findProvider=PrvResourceFileHelper.getInstance().findProvider(WorkspaceUtils.fileToIFile(file));
    Connection connection=findProvider.getObject();
    connection.eResource().unload();
    EObjectHelper.resolveObject(connection);
  }
  File tdqMetadataFile=getWorkspacePath().append(OLD_MEATADATA_FOLDER_NAME).toFile();
  if (tdqMetadataFile.exists()) {
    FileUtils.deleteDirectory(tdqMetadataFile);
  }
  File fileAnalysis=getWorkspacePath().append(EResourceConstant.ANALYSIS.getPath()).toFile();
  File fileRule=getWorkspacePath().append(EResourceConstant.RULES.getPath()).toFile();
  try {
    String[] anaFileExtentionNames={FactoriesUtil.ANA};
    String[] rulesFileEctentionNames={FactoriesUtil.DQRULE};
    result&=FilesUtils.migrateFolder(fileAnalysis,anaFileExtentionNames,this.getReplaceStringMap(),log) && FilesUtils.migrateFolder(fileRule,rulesFileEctentionNames,this.getReplaceStringMap(),log);
    AnaResourceFileHelper.getInstance().clear();
    AnaResourceFileHelper.getInstance().getAllAnalysis();
    ResourceService.refreshStructure();
  }
 catch (  Exception e) {
    result=false;
    log.error(e,e);
  }
  return result;
}","@Override protected boolean doExecute() throws Exception {
  boolean result=true;
  Map<File,File> folderMap=initStructure();
  for (  File folder : folderMap.keySet()) {
    try {
      tansferFile(folder,folderMap);
    }
 catch (    Exception e) {
      log.error(e,e);
    }
  }
  File srcMdmXsdFolder=getWorkspacePath().append(ExchangeFileNameToReferenceTask.MDM_CONNECTION + IPath.SEPARATOR + ""String_Node_Str"").toFile();
  File tarMdmXsdFolder=getWorkspacePath().append(ERepositoryObjectType.getFolderName(ERepositoryObjectType.METADATA_MDMCONNECTION) + IPath.SEPARATOR + ""String_Node_Str"").toFile();
  FilesUtils.copyFolder(srcMdmXsdFolder,tarMdmXsdFolder,true,null,null,true,null);
  File mdmConnectionFolder=new File(ResourceManager.getMDMConnectionFolder().getRawLocationURI());
  final String[] metadataFileExtentionNames={""String_Node_Str""};
  UpdateMDMConnectionXSDPathTask.doUpdate(true,true,mdmConnectionFolder,metadataFileExtentionNames);
  ArrayList<File> fileList=new ArrayList<File>();
  FilesUtils.getAllFilesFromFolder(mdmConnectionFolder,fileList,new FilenameFilter(){
    public boolean accept(    File dir,    String name){
      if (name.endsWith(""String_Node_Str"")) {
        return true;
      }
      return false;
    }
  }
);
  for (  File file : fileList) {
    TypedReturnCode<Connection> findProvider=PrvResourceFileHelper.getInstance().findProvider(WorkspaceUtils.fileToIFile(file));
    Connection connection=findProvider.getObject();
    connection.eResource().unload();
    EObjectHelper.resolveObject(connection);
  }
  File tdqMetadataFile=getWorkspacePath().append(OLD_MEATADATA_FOLDER_NAME).toFile();
  if (tdqMetadataFile.exists()) {
    FileUtils.deleteDirectory(tdqMetadataFile);
  }
  File fileAnalysis=getWorkspacePath().append(EResourceConstant.ANALYSIS.getPath()).toFile();
  File fileRule=getWorkspacePath().append(EResourceConstant.RULES.getPath()).toFile();
  try {
    String[] anaFileExtentionNames={FactoriesUtil.ANA};
    String[] rulesFileEctentionNames={FactoriesUtil.DQRULE};
    result&=FilesUtils.migrateFolder(fileAnalysis,anaFileExtentionNames,this.getReplaceStringMap(),log) && FilesUtils.migrateFolder(fileRule,rulesFileEctentionNames,this.getReplaceStringMap(),log);
  }
 catch (  Exception e) {
    result=false;
    log.error(e,e);
  }
  return result;
}",0.9371738676685452
138543,"private TableIndicatorUnit createIndicatorUnit(IFile fe,IndicatorEnum indicatorEnum,Indicator indicator){
  if (indicator == null) {
    IndicatorsFactory factory=IndicatorsFactory.eINSTANCE;
    indicator=(Indicator)factory.create(indicatorEnum.getIndicatorType());
    indicator.setAnalyzedElement(getColumnSet());
    if (!DefinitionHandler.getInstance().setDefaultIndicatorDefinition(indicator)) {
      log.error(DefaultMessagesImpl.getString(""String_Node_Str"") + indicator.getName());
    }
  }
  TableIndicatorUnit indicatorUnit=new TableIndicatorUnit(indicatorEnum,indicator,this);
  this.indicatorUnitMap.put(indicatorEnum,indicatorUnit);
  return indicatorUnit;
}","private TableIndicatorUnit createIndicatorUnit(IFile fe,IndicatorEnum indicatorEnum,Indicator indicator){
  if (indicator == null) {
    IndicatorsFactory factory=IndicatorsFactory.eINSTANCE;
    indicator=(Indicator)factory.create(indicatorEnum.getIndicatorType());
    indicator.setAnalyzedElement(getColumnSet());
  }
  if (!DefinitionHandler.getInstance().setDefaultIndicatorDefinition(indicator)) {
    log.error(DefaultMessagesImpl.getString(""String_Node_Str"") + indicator.getName());
  }
  TableIndicatorUnit indicatorUnit=new TableIndicatorUnit(indicatorEnum,indicator,this);
  this.indicatorUnitMap.put(indicatorEnum,indicatorUnit);
  return indicatorUnit;
}",0.7402985074626866
138544,"private void initializeIndicator(Indicator indicator){
  if (indicator.getIndicatorDefinition() == null) {
    DefinitionHandler.getInstance().setDefaultIndicatorDefinition(indicator);
  }
  if (indicator instanceof CompositeIndicator) {
    for (    Indicator child : ((CompositeIndicator)indicator).getChildIndicators()) {
      initializeIndicator(child);
    }
  }
}","private void initializeIndicator(Indicator indicator){
  if (indicator.getIndicatorDefinition() == null || indicator.getIndicatorDefinition().eIsProxy()) {
    DefinitionHandler.getInstance().setDefaultIndicatorDefinition(indicator);
  }
  if (indicator instanceof CompositeIndicator) {
    for (    Indicator child : ((CompositeIndicator)indicator).getChildIndicators()) {
      initializeIndicator(child);
    }
  }
}",0.9378960709759188
138545,"public void recomputeIndicators(){
  columnSetAnalysisHandler=new ColumnSetAnalysisHandler();
  columnSetAnalysisHandler.setAnalysis((Analysis)this.currentModelElement);
  stringDataFilter=columnSetAnalysisHandler.getStringDataFilter();
  analyzedColumns=columnSetAnalysisHandler.getAnalyzedColumns();
  if (columnSetAnalysisHandler.getSimpleStatIndicator() == null) {
    ColumnsetFactory columnsetFactory=ColumnsetFactory.eINSTANCE;
    simpleStatIndicator=columnsetFactory.createSimpleStatIndicator();
    simpleStatIndicator.setRowCountIndicator(IndicatorsFactory.eINSTANCE.createRowCountIndicator());
    simpleStatIndicator.setDistinctCountIndicator(IndicatorsFactory.eINSTANCE.createDistinctCountIndicator());
    simpleStatIndicator.setDuplicateCountIndicator(IndicatorsFactory.eINSTANCE.createDuplicateCountIndicator());
    simpleStatIndicator.setUniqueCountIndicator(IndicatorsFactory.eINSTANCE.createUniqueCountIndicator());
  }
 else {
    simpleStatIndicator=(SimpleStatIndicator)columnSetAnalysisHandler.getSimpleStatIndicator();
  }
  if (columnSetAnalysisHandler.getAllmatchIndicator() == null) {
    ColumnsetFactory columnsetFactory=ColumnsetFactory.eINSTANCE;
    allMatchIndicator=columnsetFactory.createAllMatchIndicator();
    DefinitionHandler.getInstance().setDefaultIndicatorDefinition(allMatchIndicator);
  }
 else {
    allMatchIndicator=(AllMatchIndicator)columnSetAnalysisHandler.getAllmatchIndicator();
  }
  initializeIndicator(simpleStatIndicator);
  List<ModelElementIndicator> meIndicatorList=new ArrayList<ModelElementIndicator>();
  ModelElementIndicator currentIndicator;
  for (  ModelElement element : analyzedColumns) {
    TdColumn tdColumn=SwitchHelpers.COLUMN_SWITCH.doSwitch(element);
    if (tdColumn == null) {
      continue;
    }
    MetadataHelper.setDataminingType(DataminingType.NOMINAL,tdColumn);
    currentIndicator=ModelElementIndicatorHelper.createModelElementIndicator(RepositoryNodeHelper.recursiveFind(tdColumn));
    Collection<Indicator> indicatorList=columnSetAnalysisHandler.getRegexMathingIndicators(element);
    currentIndicator.setIndicators(indicatorList.toArray(new Indicator[indicatorList.size()]));
    meIndicatorList.add(currentIndicator);
  }
  currentModelElementIndicators=meIndicatorList.toArray(new ModelElementIndicator[meIndicatorList.size()]);
}","public void recomputeIndicators(){
  columnSetAnalysisHandler=new ColumnSetAnalysisHandler();
  columnSetAnalysisHandler.setAnalysis((Analysis)this.currentModelElement);
  stringDataFilter=columnSetAnalysisHandler.getStringDataFilter();
  analyzedColumns=columnSetAnalysisHandler.getAnalyzedColumns();
  if (columnSetAnalysisHandler.getSimpleStatIndicator() == null || columnSetAnalysisHandler.getSimpleStatIndicator().eIsProxy()) {
    ColumnsetFactory columnsetFactory=ColumnsetFactory.eINSTANCE;
    simpleStatIndicator=columnsetFactory.createSimpleStatIndicator();
    simpleStatIndicator.setRowCountIndicator(IndicatorsFactory.eINSTANCE.createRowCountIndicator());
    simpleStatIndicator.setDistinctCountIndicator(IndicatorsFactory.eINSTANCE.createDistinctCountIndicator());
    simpleStatIndicator.setDuplicateCountIndicator(IndicatorsFactory.eINSTANCE.createDuplicateCountIndicator());
    simpleStatIndicator.setUniqueCountIndicator(IndicatorsFactory.eINSTANCE.createUniqueCountIndicator());
  }
 else {
    simpleStatIndicator=(SimpleStatIndicator)columnSetAnalysisHandler.getSimpleStatIndicator();
  }
  if (columnSetAnalysisHandler.getAllmatchIndicator() == null) {
    ColumnsetFactory columnsetFactory=ColumnsetFactory.eINSTANCE;
    allMatchIndicator=columnsetFactory.createAllMatchIndicator();
    DefinitionHandler.getInstance().setDefaultIndicatorDefinition(allMatchIndicator);
  }
 else {
    allMatchIndicator=(AllMatchIndicator)columnSetAnalysisHandler.getAllmatchIndicator();
  }
  initializeIndicator(simpleStatIndicator);
  List<ModelElementIndicator> meIndicatorList=new ArrayList<ModelElementIndicator>();
  ModelElementIndicator currentIndicator;
  for (  ModelElement element : analyzedColumns) {
    TdColumn tdColumn=SwitchHelpers.COLUMN_SWITCH.doSwitch(element);
    if (tdColumn == null) {
      continue;
    }
    MetadataHelper.setDataminingType(DataminingType.NOMINAL,tdColumn);
    currentIndicator=ModelElementIndicatorHelper.createModelElementIndicator(RepositoryNodeHelper.recursiveFind(tdColumn));
    Collection<Indicator> indicatorList=columnSetAnalysisHandler.getRegexMathingIndicators(element);
    currentIndicator.setIndicators(indicatorList.toArray(new Indicator[indicatorList.size()]));
    meIndicatorList.add(currentIndicator);
  }
  currentModelElementIndicators=meIndicatorList.toArray(new ModelElementIndicator[meIndicatorList.size()]);
}",0.9864406779661016
138546,"/** 
 * DOC xqliu Comment method ""createConnectionParam"".
 * @param conn
 * @return
 */
public static DBConnectionParameter createConnectionParam(Connection conn){
  DBConnectionParameter connectionParam=new DBConnectionParameter();
  Properties properties=new Properties();
  properties.setProperty(TaggedValueHelper.USER,JavaSqlFactory.getUsernameDefault(conn));
  properties.setProperty(TaggedValueHelper.PASSWORD,JavaSqlFactory.getPasswordDefault(conn));
  connectionParam.setParameters(properties);
  connectionParam.setName(conn.getName());
  connectionParam.setAuthor(MetadataHelper.getAuthor(conn));
  connectionParam.setDescription(MetadataHelper.getDescription(conn));
  connectionParam.setPurpose(MetadataHelper.getPurpose(conn));
  connectionParam.setStatus(MetadataHelper.getDevStatus(conn));
  connectionParam.setDriverPath(""String_Node_Str"");
  connectionParam.setDriverClassName(JavaSqlFactory.getDriverClass(conn));
  connectionParam.setJdbcUrl(JavaSqlFactory.getURL(conn));
  connectionParam.setHost(ConnectionUtils.getServerName(conn));
  connectionParam.setPort(ConnectionUtils.getPort(conn));
  if (conn instanceof DatabaseConnection) {
    connectionParam.setSqlTypeName(((DatabaseConnection)conn).getDatabaseType());
  }
  String schema=MetadataHelper.getOtherParameter(conn);
  connectionParam.setOtherParameter(schema);
  connectionParam.setDbName(ConnectionUtils.getSID(conn));
  String retrieveAllMetadata=MetadataHelper.getRetrieveAllMetadata(conn);
  connectionParam.setRetrieveAllMetadata(retrieveAllMetadata == null ? true : new Boolean(retrieveAllMetadata).booleanValue());
  return connectionParam;
}","/** 
 * DOC xqliu Comment method ""createConnectionParam"".
 * @param conn
 * @return
 */
public static DBConnectionParameter createConnectionParam(Connection conn){
  DBConnectionParameter connectionParam=new DBConnectionParameter();
  Properties properties=new Properties();
  properties.setProperty(TaggedValueHelper.USER,JavaSqlFactory.getUsernameDefault(conn));
  properties.setProperty(TaggedValueHelper.PASSWORD,JavaSqlFactory.getPasswordDefault(conn));
  connectionParam.setParameters(properties);
  connectionParam.setName(conn.getName());
  connectionParam.setAuthor(MetadataHelper.getAuthor(conn));
  connectionParam.setDescription(MetadataHelper.getDescription(conn));
  connectionParam.setPurpose(MetadataHelper.getPurpose(conn));
  connectionParam.setStatus(MetadataHelper.getDevStatus(conn));
  connectionParam.setDriverPath(((DatabaseConnection)conn).getDriverJarPath());
  connectionParam.setDriverClassName(JavaSqlFactory.getDriverClass(conn));
  connectionParam.setJdbcUrl(JavaSqlFactory.getURL(conn));
  connectionParam.setHost(ConnectionUtils.getServerName(conn));
  connectionParam.setPort(ConnectionUtils.getPort(conn));
  if (conn instanceof DatabaseConnection) {
    connectionParam.setSqlTypeName(((DatabaseConnection)conn).getDatabaseType());
  }
  String schema=MetadataHelper.getOtherParameter(conn);
  connectionParam.setOtherParameter(schema);
  connectionParam.setDbName(ConnectionUtils.getSID(conn));
  String retrieveAllMetadata=MetadataHelper.getRetrieveAllMetadata(conn);
  connectionParam.setRetrieveAllMetadata(retrieveAllMetadata == null ? true : new Boolean(retrieveAllMetadata).booleanValue());
  return connectionParam;
}",0.981177899210686
138547,"/** 
 * Method ""getRegexp"".
 * @param pattern a pattern
 * @return the body of the regular expression applicable to this dbms or null
 */
public Expression getRegexp(Pattern pattern,boolean isJavaEngin){
  Expression expression=null;
  EList<PatternComponent> components=pattern.getComponents();
  for (  PatternComponent patternComponent : components) {
    if (patternComponent != null) {
      expression=this.getExpression(patternComponent);
      if (expression != null && !(isJavaEngin ^ DbmsLanguageFactory.compareDbmsLanguage(ExecutionLanguage.JAVA.getName(),expression.getLanguage()))) {
        return expression;
      }
    }
  }
  return null;
}","/** 
 * Method ""getRegexp"".
 * @param pattern a pattern
 * @return the body of the regular expression applicable to this dbms or null
 */
public Expression getRegexp(Pattern pattern,boolean isJavaEngin){
  Expression expression=null;
  EList<PatternComponent> components=pattern.getComponents();
  for (  PatternComponent patternComponent : components) {
    if (patternComponent != null) {
      expression=this.getExpression(patternComponent);
      if (expression != null && (!(isJavaEngin ^ DbmsLanguageFactory.compareDbmsLanguage(ExecutionLanguage.JAVA.getName(),expression.getLanguage())) || DbmsLanguageFactory.compareDbmsLanguage(ExecutionLanguage.SQL.getName(),expression.getLanguage()))) {
        return expression;
      }
    }
  }
  return null;
}",0.927413671599718
138548,"/** 
 * ADD mzhao 15750 , build dq metadata tree, get connection root node.
 */
public static List<IRepositoryNode> getConnectionRepositoryNodes(){
  RepositoryNode node=getRootNode(EResourceConstant.METADATA.getName());
  List<IRepositoryNode> connNodes=new ArrayList<IRepositoryNode>();
  if (node != null) {
    List<IRepositoryNode> childrens=node.getChildren();
    for (    IRepositoryNode subNode : childrens) {
      if (subNode instanceof DBConnectionFolderRepNode || subNode instanceof DFConnectionFolderRepNode) {
        connNodes.addAll(getConnectionFromFolder(subNode));
      }
    }
  }
  return connNodes;
}","/** 
 * ADD mzhao 15750 , build dq metadata tree, get connection root node.
 */
public static List<IRepositoryNode> getConnectionRepositoryNodes(){
  RepositoryNode node=getRootNode(EResourceConstant.METADATA.getName());
  List<IRepositoryNode> connNodes=new ArrayList<IRepositoryNode>();
  if (node != null) {
    List<IRepositoryNode> childrens=node.getChildren();
    for (    IRepositoryNode subNode : childrens) {
      if (subNode instanceof DBConnectionFolderRepNode || subNode instanceof DFConnectionFolderRepNode) {
        connNodes.addAll(getModelElementFromFolder(subNode));
      }
    }
  }
  return connNodes;
}",0.9824
138549,"public static RepositoryNode recursiveFind(ModelElement modelElement){
  if (modelElement instanceof Analysis) {
    Analysis analysis=(Analysis)modelElement;
    List<IRepositoryNode> dataprofilingNode=getDataProfilingRepositoryNodes();
    for (    IRepositoryNode anaNode : dataprofilingNode) {
      Item itemTemp=((IRepositoryViewObject)anaNode.getObject()).getProperty().getItem();
      if (itemTemp instanceof TDQAnalysisItem) {
        TDQAnalysisItem item=(TDQAnalysisItem)itemTemp;
        if (ResourceHelper.getUUID(analysis).equals(ResourceHelper.getUUID(item.getAnalysis()))) {
          return (RepositoryNode)anaNode;
        }
      }
 else       if (itemTemp instanceof FolderItem) {
        List<TDQAnalysisItem> anaItems=getAnalysisItemsFromFolderItem((FolderItem)itemTemp);
        for (        TDQAnalysisItem anaItem : anaItems) {
          if (ResourceHelper.getUUID(analysis).equals(ResourceHelper.getUUID(anaItem.getAnalysis()))) {
            return (RepositoryNode)anaNode;
          }
        }
      }
    }
  }
 else   if (modelElement instanceof TdReport) {
  }
 else   if (modelElement instanceof TdColumn) {
    TdColumn column=(TdColumn)modelElement;
    IRepositoryNode columnSetNode=recursiveFind(ColumnHelper.getColumnOwnerAsColumnSet(column));
    for (    IRepositoryNode columnNode : columnSetNode.getChildren().get(0).getChildren()) {
      TdColumn columnOnUI=(TdColumn)((MetadataColumnRepositoryObject)columnNode.getObject()).getTdColumn();
      if (ResourceHelper.getUUID(column).equals(ResourceHelper.getUUID(columnOnUI))) {
        return (RepositoryNode)columnNode;
      }
    }
  }
 else   if (modelElement instanceof TdTable) {
    TdTable table=(TdTable)modelElement;
    IRepositoryNode schemaOrCatalogNode=recursiveFind(ColumnSetHelper.getParentCatalogOrSchema(modelElement));
    for (    IRepositoryNode tableNode : schemaOrCatalogNode.getChildren().get(0).getChildren()) {
      TdTable tableOnUI=(TdTable)((TdTableRepositoryObject)tableNode.getObject()).getTdTable();
      if (ResourceHelper.getUUID(table).equals(ResourceHelper.getUUID(tableOnUI))) {
        return (RepositoryNode)tableNode;
      }
    }
  }
 else   if (modelElement instanceof TdView) {
    TdView view=(TdView)modelElement;
    IRepositoryNode schemaOrCatalogNode=recursiveFind(ColumnSetHelper.getParentCatalogOrSchema(modelElement));
    for (    IRepositoryNode viewNode : schemaOrCatalogNode.getChildren().get(1).getChildren()) {
      TdView viewOnUI=(TdView)((TdViewRepositoryObject)viewNode.getObject()).getTdView();
      if (ResourceHelper.getUUID(view).equals(ResourceHelper.getUUID(viewOnUI))) {
        return (RepositoryNode)viewNode;
      }
    }
  }
 else   if (modelElement instanceof MetadataColumn) {
    MetadataColumn column=(MetadataColumn)modelElement;
    IRepositoryNode columnSetNode=recursiveFind(ColumnHelper.getColumnOwnerAsMetadataTable(column));
    for (    IRepositoryNode columnNode : columnSetNode.getChildren().get(0).getChildren()) {
      MetadataColumn columnOnUI=((MetadataColumnRepositoryObject)columnNode.getObject()).getTdColumn();
      if (ResourceHelper.getUUID(column).equals(ResourceHelper.getUUID(columnOnUI))) {
        return (RepositoryNode)columnNode;
      }
    }
  }
 else   if (modelElement instanceof MetadataTable) {
    MetadataTable table=(MetadataTable)modelElement;
    if (table.getNamespace() instanceof RecordFile) {
      IRepositoryNode connNode=recursiveFind(ConnectionHelper.getTdDataProvider(table));
      for (      IRepositoryNode tableNode : connNode.getChildren()) {
        MetadataTable tableOnUI=(MetadataTable)((MetadataTableRepositoryObject)tableNode.getObject()).getTable();
        if (ResourceHelper.getUUID(table).equals(ResourceHelper.getUUID(tableOnUI))) {
          return (RepositoryNode)tableNode;
        }
      }
    }
  }
 else   if (modelElement instanceof Catalog) {
    Catalog catalog=(Catalog)modelElement;
    IRepositoryNode connNode=recursiveFind(ConnectionHelper.getTdDataProvider(catalog));
    for (    IRepositoryNode catalogNode : connNode.getChildren()) {
      Catalog catalogOnUI=((MetadataCatalogRepositoryObject)catalogNode.getObject()).getCatalog();
      if (ResourceHelper.getUUID(catalog).equals(ResourceHelper.getUUID(catalogOnUI))) {
        return (RepositoryNode)catalogNode;
      }
    }
  }
 else   if (modelElement instanceof Schema) {
    Schema schema=(Schema)modelElement;
    Catalog catalog=CatalogHelper.getParentCatalog(schema);
    if (catalog != null) {
      IRepositoryNode catalogNode=recursiveFind(catalog);
      for (      IRepositoryNode schemaNode : catalogNode.getChildren()) {
        Schema schemaOnUI=((MetadataSchemaRepositoryObject)schemaNode.getObject()).getSchema();
        if (ResourceHelper.getUUID(schema).equals(ResourceHelper.getUUID(schemaOnUI))) {
          return (RepositoryNode)schemaNode;
        }
      }
    }
    IRepositoryNode connNode=recursiveFind(ConnectionHelper.getTdDataProvider(schema));
    for (    IRepositoryNode schemaNode : connNode.getChildren()) {
      Schema schemaOnUI=((MetadataSchemaRepositoryObject)schemaNode.getObject()).getSchema();
      if (ResourceHelper.getUUID(schema).equals(ResourceHelper.getUUID(schemaOnUI))) {
        return (RepositoryNode)schemaNode;
      }
    }
  }
 else   if (modelElement instanceof Connection) {
    Connection connection=(Connection)modelElement;
    List<IRepositoryNode> connsNode=getConnectionRepositoryNodes();
    for (    IRepositoryNode connNode : connsNode) {
      Item itemTemp=((IRepositoryViewObject)connNode.getObject()).getProperty().getItem();
      if (itemTemp instanceof ConnectionItem) {
        ConnectionItem item=(ConnectionItem)itemTemp;
        if (ResourceHelper.getUUID(connection).equals(ResourceHelper.getUUID(item.getConnection()))) {
          return (RepositoryNode)connNode;
        }
      }
 else       if (itemTemp instanceof FolderItem) {
        List<ConnectionItem> connItems=getConnectionItemsFromFolderItem((FolderItem)itemTemp);
        for (        ConnectionItem connItem : connItems) {
          if (ResourceHelper.getUUID(connection).equals(ResourceHelper.getUUID(connItem.getConnection()))) {
            return (RepositoryNode)connNode;
          }
        }
      }
    }
  }
  return null;
}","public static RepositoryNode recursiveFind(ModelElement modelElement){
  if (modelElement instanceof Analysis) {
    Analysis analysis=(Analysis)modelElement;
    List<IRepositoryNode> dataprofilingNode=getDataProfilingRepositoryNodes();
    for (    IRepositoryNode anaNode : dataprofilingNode) {
      Item itemTemp=((IRepositoryViewObject)anaNode.getObject()).getProperty().getItem();
      if (itemTemp instanceof TDQAnalysisItem) {
        TDQAnalysisItem item=(TDQAnalysisItem)itemTemp;
        if (ResourceHelper.getUUID(analysis).equals(ResourceHelper.getUUID(item.getAnalysis()))) {
          return (RepositoryNode)anaNode;
        }
      }
 else       if (itemTemp instanceof FolderItem) {
        List<TDQAnalysisItem> anaItems=getAnalysisItemsFromFolderItem((FolderItem)itemTemp);
        for (        TDQAnalysisItem anaItem : anaItems) {
          if (ResourceHelper.getUUID(analysis).equals(ResourceHelper.getUUID(anaItem.getAnalysis()))) {
            return (RepositoryNode)anaNode;
          }
        }
      }
    }
  }
 else   if (modelElement instanceof TdReport) {
  }
 else   if (modelElement instanceof TdColumn) {
    TdColumn column=(TdColumn)modelElement;
    IRepositoryNode columnSetNode=recursiveFind(ColumnHelper.getColumnOwnerAsColumnSet(column));
    for (    IRepositoryNode columnNode : columnSetNode.getChildren().get(0).getChildren()) {
      TdColumn columnOnUI=(TdColumn)((MetadataColumnRepositoryObject)columnNode.getObject()).getTdColumn();
      if (ResourceHelper.getUUID(column).equals(ResourceHelper.getUUID(columnOnUI))) {
        return (RepositoryNode)columnNode;
      }
    }
  }
 else   if (modelElement instanceof TdTable) {
    TdTable table=(TdTable)modelElement;
    IRepositoryNode schemaOrCatalogNode=recursiveFind(ColumnSetHelper.getParentCatalogOrSchema(modelElement));
    for (    IRepositoryNode tableNode : schemaOrCatalogNode.getChildren().get(0).getChildren()) {
      TdTable tableOnUI=(TdTable)((TdTableRepositoryObject)tableNode.getObject()).getTdTable();
      if (ResourceHelper.getUUID(table).equals(ResourceHelper.getUUID(tableOnUI))) {
        return (RepositoryNode)tableNode;
      }
    }
  }
 else   if (modelElement instanceof TdView) {
    TdView view=(TdView)modelElement;
    IRepositoryNode schemaOrCatalogNode=recursiveFind(ColumnSetHelper.getParentCatalogOrSchema(modelElement));
    for (    IRepositoryNode viewNode : schemaOrCatalogNode.getChildren().get(1).getChildren()) {
      TdView viewOnUI=(TdView)((TdViewRepositoryObject)viewNode.getObject()).getTdView();
      if (ResourceHelper.getUUID(view).equals(ResourceHelper.getUUID(viewOnUI))) {
        return (RepositoryNode)viewNode;
      }
    }
  }
 else   if (modelElement instanceof MetadataColumn) {
    MetadataColumn column=(MetadataColumn)modelElement;
    IRepositoryNode columnSetNode=recursiveFind(ColumnHelper.getColumnOwnerAsMetadataTable(column));
    for (    IRepositoryNode columnNode : columnSetNode.getChildren().get(0).getChildren()) {
      MetadataColumn columnOnUI=((MetadataColumnRepositoryObject)columnNode.getObject()).getTdColumn();
      if (ResourceHelper.getUUID(column).equals(ResourceHelper.getUUID(columnOnUI))) {
        return (RepositoryNode)columnNode;
      }
    }
  }
 else   if (modelElement instanceof MetadataTable) {
    MetadataTable table=(MetadataTable)modelElement;
    if (table.getNamespace() instanceof RecordFile) {
      IRepositoryNode connNode=recursiveFind(ConnectionHelper.getTdDataProvider(table));
      for (      IRepositoryNode tableNode : connNode.getChildren()) {
        MetadataTable tableOnUI=(MetadataTable)((MetadataTableRepositoryObject)tableNode.getObject()).getTable();
        if (ResourceHelper.getUUID(table).equals(ResourceHelper.getUUID(tableOnUI))) {
          return (RepositoryNode)tableNode;
        }
      }
    }
  }
 else   if (modelElement instanceof Catalog) {
    Catalog catalog=(Catalog)modelElement;
    IRepositoryNode connNode=recursiveFind(ConnectionHelper.getTdDataProvider(catalog));
    for (    IRepositoryNode catalogNode : connNode.getChildren()) {
      Catalog catalogOnUI=((MetadataCatalogRepositoryObject)catalogNode.getObject()).getCatalog();
      if (ResourceHelper.getUUID(catalog).equals(ResourceHelper.getUUID(catalogOnUI))) {
        return (RepositoryNode)catalogNode;
      }
    }
  }
 else   if (modelElement instanceof Schema) {
    Schema schema=(Schema)modelElement;
    Catalog catalog=CatalogHelper.getParentCatalog(schema);
    if (catalog != null) {
      IRepositoryNode catalogNode=recursiveFind(catalog);
      for (      IRepositoryNode schemaNode : catalogNode.getChildren()) {
        Schema schemaOnUI=((MetadataSchemaRepositoryObject)schemaNode.getObject()).getSchema();
        if (ResourceHelper.getUUID(schema).equals(ResourceHelper.getUUID(schemaOnUI))) {
          return (RepositoryNode)schemaNode;
        }
      }
    }
    IRepositoryNode connNode=recursiveFind(ConnectionHelper.getTdDataProvider(schema));
    for (    IRepositoryNode schemaNode : connNode.getChildren()) {
      Schema schemaOnUI=((MetadataSchemaRepositoryObject)schemaNode.getObject()).getSchema();
      if (ResourceHelper.getUUID(schema).equals(ResourceHelper.getUUID(schemaOnUI))) {
        return (RepositoryNode)schemaNode;
      }
    }
  }
 else   if (modelElement instanceof Connection) {
    Connection connection=(Connection)modelElement;
    List<IRepositoryNode> connsNode=getConnectionRepositoryNodes();
    for (    IRepositoryNode connNode : connsNode) {
      Item itemTemp=((IRepositoryViewObject)connNode.getObject()).getProperty().getItem();
      if (itemTemp instanceof ConnectionItem) {
        ConnectionItem item=(ConnectionItem)itemTemp;
        if (ResourceHelper.getUUID(connection).equals(ResourceHelper.getUUID(item.getConnection()))) {
          return (RepositoryNode)connNode;
        }
      }
 else       if (itemTemp instanceof FolderItem) {
        List<ConnectionItem> connItems=getConnectionItemsFromFolderItem((FolderItem)itemTemp);
        for (        ConnectionItem connItem : connItems) {
          if (ResourceHelper.getUUID(connection).equals(ResourceHelper.getUUID(connItem.getConnection()))) {
            return (RepositoryNode)connNode;
          }
        }
      }
    }
  }
 else   if (modelElement instanceof Pattern) {
    Pattern pattern=(Pattern)modelElement;
    List<IRepositoryNode> patternsNode=getPatternsRepositoryNodes();
    for (    IRepositoryNode patternNode : patternsNode) {
      Item itemTemp=((IRepositoryViewObject)patternNode.getObject()).getProperty().getItem();
      if (itemTemp instanceof TDQPatternItem) {
        TDQPatternItem item=(TDQPatternItem)itemTemp;
        if (ResourceHelper.getUUID(pattern).equals(ResourceHelper.getUUID(item.getPattern()))) {
          return (RepositoryNode)patternNode;
        }
      }
 else       if (itemTemp instanceof FolderItem) {
        List<TDQPatternItem> patternItems=getPatternsItemsFromFolderItem((FolderItem)itemTemp);
        for (        TDQPatternItem patternItem : patternItems) {
          if (ResourceHelper.getUUID(pattern).equals(ResourceHelper.getUUID(patternItem.getPattern()))) {
            return (RepositoryNode)patternNode;
          }
        }
      }
    }
  }
  return null;
}",0.9259777564999632
138550,"/** 
 * DOC klliu Comment method ""getRootNode"".
 * @return
 */
public static RepositoryNode getRootNode(String nodeName){
  RepositoryNode node=null;
  CommonViewer commonViewer=getDQCommonViewer();
  if (commonViewer != null) {
    TreeItem[] items=commonViewer.getTree().getItems();
    for (    TreeItem item : items) {
      String text=item.getText();
      if (text.equals(nodeName)) {
        node=(RepositoryNode)item.getData();
      }
    }
  }
  return node;
}","/** 
 * DOC klliu Comment method ""getRootNode"".
 * @return
 */
public static RepositoryNode getRootNode(String nodeName){
  RepositoryNode node=null;
  CommonViewer commonViewer=getDQCommonViewer();
  if (commonViewer != null) {
    TreeItem[] items=commonViewer.getTree().getItems();
    for (    TreeItem item : items) {
      String text=item.getText();
      if (text.equals(nodeName)) {
        node=(RepositoryNode)item.getData();
        return node;
      }
    }
  }
  return node;
}",0.9781931464174456
138551,"public static List<IRepositoryNode> getDataProfilingRepositoryNodes(){
  RepositoryNode node=getRootNode(EResourceConstant.DATA_PROFILING.getName());
  List<IRepositoryNode> dataProfilingNodes=new ArrayList<IRepositoryNode>();
  if (node != null) {
    List<IRepositoryNode> childrens=node.getChildren();
    for (    IRepositoryNode subNode : childrens) {
      if (subNode instanceof AnalysisFolderRepNode || subNode instanceof ReportFolderRepNode) {
        dataProfilingNodes.addAll(getAnalysisFromFolder(subNode));
      }
    }
  }
  return dataProfilingNodes;
}","public static List<IRepositoryNode> getDataProfilingRepositoryNodes(){
  RepositoryNode node=getRootNode(EResourceConstant.DATA_PROFILING.getName());
  List<IRepositoryNode> dataProfilingNodes=new ArrayList<IRepositoryNode>();
  if (node != null) {
    List<IRepositoryNode> childrens=node.getChildren();
    for (    IRepositoryNode subNode : childrens) {
      if (subNode instanceof AnalysisFolderRepNode || subNode instanceof ReportFolderRepNode) {
        dataProfilingNodes.addAll(getModelElementFromFolder(subNode));
      }
    }
  }
  return dataProfilingNodes;
}",0.9824561403508772
138552,"/** 
 * (non-Javadoc)
 * @see org.talend.dq.writer.AElementPersistance#addDependencies(orgomg.cwm.objectmodel.core.ModelElement)
 */
@Override public void addDependencies(ModelElement element){
  Analysis analysis=(Analysis)element;
  List<IndicatorDefinition> udis=AnalysisHelper.getUserDefinedIndicators(analysis);
  try {
    for (    IndicatorDefinition udi : udis) {
      if (udi == null) {
        continue;
      }
      InternalEObject iudi=(InternalEObject)udi;
      if (!iudi.eIsProxy()) {
        TypedReturnCode<Dependency> dependencyReturn=DependenciesHandler.getInstance().setDependencyOn(analysis,udi);
        if (dependencyReturn.isOk()) {
          ProxyRepositoryFactory.getInstance().getRepositoryFactoryFromProvider().getResourceManager().saveResource(udi.eResource());
        }
      }
    }
    List<Pattern> patterns=AnalysisHelper.getPatterns(analysis);
    for (    Pattern pattern : patterns) {
      InternalEObject iptn=(InternalEObject)pattern;
      if (!iptn.eIsProxy()) {
        TypedReturnCode<Dependency> dependencyReturn=DependenciesHandler.getInstance().setDependencyOn(analysis,pattern);
        if (dependencyReturn.isOk()) {
          ProxyRepositoryFactory.getInstance().getRepositoryFactoryFromProvider().getResourceManager().saveResource(pattern.eResource());
        }
      }
    }
  }
 catch (  PersistenceException e) {
    e.printStackTrace();
  }
}","/** 
 * (non-Javadoc)
 * @see org.talend.dq.writer.AElementPersistance#addDependencies(orgomg.cwm.objectmodel.core.ModelElement)
 */
@Override public void addDependencies(ModelElement element){
  Analysis analysis=(Analysis)element;
  List<IndicatorDefinition> udis=AnalysisHelper.getUserDefinedIndicators(analysis);
  try {
    for (    IndicatorDefinition udi : udis) {
      if (udi == null) {
        continue;
      }
      InternalEObject iudi=(InternalEObject)udi;
      if (!iudi.eIsProxy()) {
        TypedReturnCode<Dependency> dependencyReturn=DependenciesHandler.getInstance().setDependencyOn(analysis,udi);
        if (dependencyReturn.isOk()) {
          ProxyRepositoryFactory.getInstance().getRepositoryFactoryFromProvider().getResourceManager().saveResource(udi.eResource());
        }
      }
    }
    List<Pattern> patterns=AnalysisHelper.getPatterns(analysis);
    for (    Pattern pattern : patterns) {
      InternalEObject iptn=(InternalEObject)pattern;
      if (!iptn.eIsProxy()) {
        TypedReturnCode<Dependency> dependencyReturn=DependenciesHandler.getInstance().setDependencyOn(analysis,pattern);
        if (dependencyReturn.isOk()) {
          TDQPatternItem patternItem=(TDQPatternItem)RepositoryNodeHelper.recursiveFind(pattern).getObject().getProperty().getItem();
          patternItem.setPattern(pattern);
          ProxyRepositoryFactory.getInstance().getRepositoryFactoryFromProvider().getResourceManager().saveResource(pattern.eResource());
        }
      }
    }
  }
 catch (  PersistenceException e) {
    e.printStackTrace();
  }
}",0.9405840886203424
138553,"public ReturnCode save(Item item){
  return null;
}","public ReturnCode save(Item item){
  ReturnCode rc=new ReturnCode();
  try {
    TDQPatternItem patternItem=(TDQPatternItem)item;
    if (patternItem != null && patternItem.eIsProxy()) {
      patternItem=(TDQPatternItem)EObjectHelper.resolveObject(patternItem);
      patternItem.getProperty().setLabel(patternItem.getPattern().getName());
    }
    Pattern pattern=patternItem.getPattern();
    addDependencies(pattern);
    addResourceContent(pattern.eResource(),pattern);
    patternItem.setPattern(pattern);
    ProxyRepositoryFactory.getInstance().save(patternItem);
  }
 catch (  PersistenceException e) {
    log.error(e,e);
    rc.setOk(Boolean.FALSE);
    rc.setMessage(e.getMessage());
  }
  return rc;
}",0.1253263707571801
138554,"/** 
 * DOC xqliu Comment method ""createIndicatorUnit"".
 * @param pfile
 * @param modelElementIndicator
 * @param analysis
 * @param indicatorDefinition
 * @return
 */
public static TypedReturnCode<IndicatorUnit> createIndicatorUnit(IFile pfile,ModelElementIndicator modelElementIndicator,Analysis analysis,IndicatorDefinition indicatorDefinition){
  TypedReturnCode<IndicatorUnit> result=new TypedReturnCode<IndicatorUnit>();
  Pattern pattern=PatternResourceFileHelper.getInstance().findPattern(pfile);
  for (  Indicator indicator : modelElementIndicator.getIndicators()) {
    if (UDIHelper.getMatchingIndicatorName(indicatorDefinition,pattern).equals(indicator.getName())) {
      result.setOk(false);
      result.setMessage(""String_Node_Str"");
      return result;
    }
  }
  Indicator patternMatchingIndicator=null;
  String expressionType=DomainHelper.getExpressionType(pattern);
  boolean isSQLPattern=(ExpressionType.SQL_LIKE.getLiteral().equals(expressionType));
  if (indicatorDefinition != null) {
    patternMatchingIndicator=UDIFactory.createUserDefIndicator(indicatorDefinition,pattern);
  }
 else {
    patternMatchingIndicator=isSQLPattern ? PatternIndicatorFactory.createSqlPatternMatchingIndicator(pattern) : PatternIndicatorFactory.createRegexpMatchingIndicator(pattern);
  }
  DbmsLanguage dbmsLanguage=DbmsLanguageFactory.createDbmsLanguage(analysis);
  boolean isJavaEngin=ExecutionLanguage.JAVA.equals(analysis.getParameters().getExecutionLanguage());
  Expression returnExpression=dbmsLanguage.getRegexp(pattern,isJavaEngin);
  if (ExpressionType.REGEXP.getLiteral().equals(expressionType) && returnExpression == null) {
    result.setOk(false);
    result.setMessage(DefaultMessagesImpl.getString(""String_Node_Str""));
    return result;
  }
  DataManager dm=analysis.getContext().getConnection();
  if (dm != null) {
    TypedReturnCode<java.sql.Connection> trc=JavaSqlFactory.createConnection((Connection)dm);
    boolean isDelimitedFileConnection=ConnectionUtils.isDelimitedFileConnection((DataProvider)dm);
    if (trc != null) {
      java.sql.Connection conn=trc.getObject();
      if (isDelimitedFileConnection) {
        dbmsLanguage=DbmsLanguageFactory.createDbmsLanguage((DelimitedFileConnection)dm);
      }
 else {
        try {
          SoftwareSystem softwareSystem=DatabaseContentRetriever.getSoftwareSystem(conn);
          dbmsLanguage=DbmsLanguageFactory.createDbmsLanguage(softwareSystem);
        }
 catch (        SQLException e) {
          log.error(e,e);
        }
      }
    }
    if (!(isSQLPattern || DefinitionHandler.getInstance().canRunRegularExpressionMatchingIndicator(dbmsLanguage,isJavaEngin,pattern) || isDelimitedFileConnection)) {
      result.setOk(false);
      result.setMessage(DefaultMessagesImpl.getString(""String_Node_Str""));
      return result;
    }
  }
  if (indicatorDefinition == null) {
    if (!DefinitionHandler.getInstance().setDefaultIndicatorDefinition(patternMatchingIndicator)) {
      log.error(""String_Node_Str"" + patternMatchingIndicator.getName());
    }
  }
 else {
    patternMatchingIndicator.setIndicatorDefinition(indicatorDefinition);
  }
  IndicatorEnum type=IndicatorEnum.findIndicatorEnum(patternMatchingIndicator.eClass());
  IndicatorUnit addIndicatorUnit=modelElementIndicator.addSpecialIndicator(type,patternMatchingIndicator);
  DependenciesHandler.getInstance().setUsageDependencyOn(analysis,pattern);
  result.setOk(true);
  result.setMessage(""String_Node_Str"");
  result.setObject(addIndicatorUnit);
  return result;
}","/** 
 * DOC xqliu Comment method ""createIndicatorUnit"".
 * @param pfile
 * @param modelElementIndicator
 * @param analysis
 * @param indicatorDefinition
 * @return
 */
public static TypedReturnCode<IndicatorUnit> createIndicatorUnit(IFile pfile,ModelElementIndicator modelElementIndicator,Analysis analysis,IndicatorDefinition indicatorDefinition){
  TypedReturnCode<IndicatorUnit> result=new TypedReturnCode<IndicatorUnit>();
  Pattern pattern=PatternResourceFileHelper.getInstance().findPattern(pfile);
  for (  Indicator indicator : modelElementIndicator.getIndicators()) {
    if (UDIHelper.getMatchingIndicatorName(indicatorDefinition,pattern).equals(indicator.getName())) {
      result.setOk(false);
      result.setMessage(""String_Node_Str"");
      return result;
    }
  }
  Indicator patternMatchingIndicator=null;
  String expressionType=DomainHelper.getExpressionType(pattern);
  boolean isSQLPattern=(ExpressionType.SQL_LIKE.getLiteral().equals(expressionType));
  if (indicatorDefinition != null) {
    patternMatchingIndicator=UDIFactory.createUserDefIndicator(indicatorDefinition,pattern);
  }
 else {
    patternMatchingIndicator=isSQLPattern ? PatternIndicatorFactory.createSqlPatternMatchingIndicator(pattern) : PatternIndicatorFactory.createRegexpMatchingIndicator(pattern);
  }
  IEditorPart theEdit=CorePlugin.getDefault().getCurrentActiveEditor();
  if (theEdit != null && theEdit instanceof AnalysisEditor && analysis.getContext().getConnection() == null) {
    theEdit.doSave(null);
  }
  DbmsLanguage dbmsLanguage=DbmsLanguageFactory.createDbmsLanguage(analysis);
  boolean isJavaEngin=ExecutionLanguage.JAVA.equals(analysis.getParameters().getExecutionLanguage());
  Expression returnExpression=dbmsLanguage.getRegexp(pattern,isJavaEngin);
  if (ExpressionType.REGEXP.getLiteral().equals(expressionType) && returnExpression == null) {
    result.setOk(false);
    result.setMessage(DefaultMessagesImpl.getString(""String_Node_Str""));
    return result;
  }
  DataManager dm=analysis.getContext().getConnection();
  if (dm != null) {
    TypedReturnCode<java.sql.Connection> trc=JavaSqlFactory.createConnection((Connection)dm);
    boolean isDelimitedFileConnection=ConnectionUtils.isDelimitedFileConnection((DataProvider)dm);
    if (trc != null) {
      java.sql.Connection conn=trc.getObject();
      if (isDelimitedFileConnection) {
        dbmsLanguage=DbmsLanguageFactory.createDbmsLanguage((DelimitedFileConnection)dm);
      }
 else {
        try {
          SoftwareSystem softwareSystem=DatabaseContentRetriever.getSoftwareSystem(conn);
          dbmsLanguage=DbmsLanguageFactory.createDbmsLanguage(softwareSystem);
        }
 catch (        SQLException e) {
          log.error(e,e);
        }
      }
    }
    if (!(isSQLPattern || DefinitionHandler.getInstance().canRunRegularExpressionMatchingIndicator(dbmsLanguage,isJavaEngin,pattern) || isDelimitedFileConnection)) {
      result.setOk(false);
      result.setMessage(DefaultMessagesImpl.getString(""String_Node_Str""));
      return result;
    }
  }
  if (indicatorDefinition == null) {
    if (!DefinitionHandler.getInstance().setDefaultIndicatorDefinition(patternMatchingIndicator)) {
      log.error(""String_Node_Str"" + patternMatchingIndicator.getName());
    }
  }
 else {
    patternMatchingIndicator.setIndicatorDefinition(indicatorDefinition);
  }
  IndicatorEnum type=IndicatorEnum.findIndicatorEnum(patternMatchingIndicator.eClass());
  IndicatorUnit addIndicatorUnit=modelElementIndicator.addSpecialIndicator(type,patternMatchingIndicator);
  DependenciesHandler.getInstance().setUsageDependencyOn(analysis,pattern);
  result.setOk(true);
  result.setMessage(""String_Node_Str"");
  result.setObject(addIndicatorUnit);
  return result;
}",0.9706894179166092
138555,"private boolean savePattern(){
  if (tempPatternComponents.size() == 0) {
    MessageDialog.openError(null,DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str"",pattern.getName()));
    return false;
  }
  this.pattern.getComponents().clear();
  this.pattern.getComponents().addAll(tempPatternComponents);
  TaggedValueHelper.setValidStatus(true,pattern);
  EList<PatternComponent> components=this.pattern.getComponents();
  List<String> existLanguage=new ArrayList<String>();
  for (int i=0; i < components.size(); i++) {
    RegularExpressionImpl regularExpress=(RegularExpressionImpl)components.get(i);
    String language=regularExpress.getExpression().getLanguage();
    if ((regularExpress.getExpression().getBody() == null) || (!regularExpress.getExpression().getBody().matches(""String_Node_Str""))) {
      MessageDialog.openWarning(null,DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str"",language));
      return false;
    }
    if (existLanguage.contains(language)) {
      MessageDialog.openError(null,DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str"",language));
      return false;
    }
 else {
      existLanguage.add(language);
    }
  }
  PatternResourceFileHelper.getInstance().save(pattern);
  return true;
}","private boolean savePattern(){
  if (tempPatternComponents.size() == 0) {
    MessageDialog.openError(null,DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str"",pattern.getName()));
    return false;
  }
  this.pattern.getComponents().clear();
  this.pattern.getComponents().addAll(tempPatternComponents);
  TaggedValueHelper.setValidStatus(true,pattern);
  EList<PatternComponent> components=this.pattern.getComponents();
  List<String> existLanguage=new ArrayList<String>();
  for (int i=0; i < components.size(); i++) {
    RegularExpressionImpl regularExpress=(RegularExpressionImpl)components.get(i);
    String language=regularExpress.getExpression().getLanguage();
    if ((regularExpress.getExpression().getBody() == null) || (!regularExpress.getExpression().getBody().matches(""String_Node_Str""))) {
      MessageDialog.openWarning(null,DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str"",language));
      return false;
    }
    if (existLanguage.contains(language)) {
      MessageDialog.openError(null,DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str"",language));
      return false;
    }
 else {
      existLanguage.add(language);
    }
  }
  Item patternItem=((PatternItemEditorInput)this.getEditor().getEditorInput()).getItem();
  ((TDQPatternItem)patternItem).setPattern(this.pattern);
  ElementWriterFactory.getInstance().createPatternWriter().save(patternItem);
  return true;
}",0.9298791018998273
138556,"public String getText(Object element){
  if (element instanceof IRepositoryNode) {
    IRepositoryNode node=(IRepositoryNode)element;
    if (node instanceof RecycleBinRepNode || node instanceof ExchangeCategoryRepNode || node instanceof ExchangeComponentRepNode) {
      return node.getLabel();
    }
 else     if (node instanceof DBConnectionFolderRepNode) {
      return ""String_Node_Str"" + ((DBConnectionFolderRepNode)node).getObject().getLabel();
    }
 else     if (node instanceof DBTableFolderRepNode) {
      return ((DBTableFolderRepNode)node).getNodeName();
    }
 else     if (node instanceof DBViewFolderRepNode) {
      return ((DBViewFolderRepNode)node).getNodeName();
    }
 else     if (node instanceof DBColumnFolderRepNode || node instanceof DFColumnFolderRepNode) {
      return DefaultMessagesImpl.getString(""String_Node_Str"");
    }
 else     if (node instanceof SourceFileRepNode) {
      return ((SourceFileRepNode)node).getLabel();
    }
 else     if (node instanceof AnalysisRepNode || node instanceof ReportRepNode || node instanceof SysIndicatorDefinitionRepNode|| node instanceof PatternRepNode|| node instanceof RuleRepNode) {
      return node.getObject().getLabel() + ""String_Node_Str"" + node.getObject().getVersion();
    }
 else     if (node instanceof DBConnectionRepNode && !isSupportedConnection(node)) {
      return node.getObject().getLabel() + ""String_Node_Str"";
    }
 else     if (node instanceof AnalysisFolderRepNode) {
      return node.getObject().getLabel() + ""String_Node_Str"" + node.getChildren().size()+ ""String_Node_Str"";
    }
 else     if (node instanceof AnalysisSubFolderRepNode) {
      AnalysisSubFolderRepNode anaSubNode=(AnalysisSubFolderRepNode)node;
      IRepositoryViewObject object=node.getObject();
      if (object == null) {
        return DefaultMessagesImpl.getString(""String_Node_Str"") + anaSubNode.getCount();
      }
    }
 else     if (node instanceof ReportFolderRepNode) {
      return node.getObject().getLabel() + ""String_Node_Str"" + node.getChildren().size()+ ""String_Node_Str"";
    }
 else     if (node instanceof ReportSubFolderRepNode) {
      ReportSubFolderRepNode repSubNode=(ReportSubFolderRepNode)node;
      IRepositoryViewObject object=node.getObject();
      if (object == null) {
        return (String)node.getProperties(EProperties.LABEL) + repSubNode.getCount();
      }
    }
 else     if (node instanceof PatternLanguageRepNode) {
      return node.getLabel();
    }
    String label=node.getObject().getLabel();
    boolean startsWith=label.startsWith(DQStructureManager.PREFIX_TDQ);
    if (startsWith) {
      label=label.substring(4,label.length());
      return label;
    }
 else     if (label.equals(EResourceConstant.METADATA.getName())) {
      label=label.substring(0,1).toUpperCase() + label.substring(1);
      return label;
    }
    return node.getObject().getLabel();
  }
  String text=super.getText(element);
  return ""String_Node_Str"".equals(text) ? DefaultMessagesImpl.getString(""String_Node_Str"") : text;
}","public String getText(Object element){
  if (element instanceof IRepositoryNode) {
    IRepositoryNode node=(IRepositoryNode)element;
    if (node instanceof RecycleBinRepNode || node instanceof ExchangeCategoryRepNode || node instanceof ExchangeComponentRepNode) {
      return node.getLabel();
    }
 else     if (node instanceof DBConnectionFolderRepNode) {
      return ""String_Node_Str"" + ((DBConnectionFolderRepNode)node).getObject().getLabel();
    }
 else     if (node instanceof DBTableFolderRepNode) {
      return ((DBTableFolderRepNode)node).getNodeName();
    }
 else     if (node instanceof DBViewFolderRepNode) {
      return ((DBViewFolderRepNode)node).getNodeName();
    }
 else     if (node instanceof DBColumnFolderRepNode || node instanceof DFColumnFolderRepNode) {
      return DefaultMessagesImpl.getString(""String_Node_Str"");
    }
 else     if (node instanceof SourceFileRepNode) {
      return ((SourceFileRepNode)node).getLabel();
    }
 else     if (node instanceof AnalysisRepNode || node instanceof ReportRepNode || node instanceof SysIndicatorDefinitionRepNode|| node instanceof PatternRepNode|| node instanceof RuleRepNode) {
      return node.getObject().getLabel() + ""String_Node_Str"" + node.getObject().getVersion();
    }
 else     if (node instanceof DBConnectionRepNode && !isSupportedConnection(node)) {
      return node.getObject().getLabel() + ""String_Node_Str"";
    }
 else     if (node instanceof AnalysisSubFolderRepNode) {
      AnalysisSubFolderRepNode anaSubNode=(AnalysisSubFolderRepNode)node;
      IRepositoryViewObject object=node.getObject();
      if (object == null) {
        return DefaultMessagesImpl.getString(""String_Node_Str"") + anaSubNode.getCount();
      }
    }
 else     if (node instanceof AnalysisFolderRepNode) {
      return node.getObject().getLabel() + ""String_Node_Str"" + node.getChildren().size()+ ""String_Node_Str"";
    }
 else     if (node instanceof ReportFolderRepNode) {
      return node.getObject().getLabel() + ""String_Node_Str"" + node.getChildren().size()+ ""String_Node_Str"";
    }
 else     if (node instanceof ReportSubFolderRepNode) {
      ReportSubFolderRepNode repSubNode=(ReportSubFolderRepNode)node;
      IRepositoryViewObject object=node.getObject();
      if (object == null) {
        return (String)node.getProperties(EProperties.LABEL) + repSubNode.getCount();
      }
    }
 else     if (node instanceof PatternLanguageRepNode) {
      return node.getLabel();
    }
    String label=node.getObject().getLabel();
    boolean startsWith=label.startsWith(DQStructureManager.PREFIX_TDQ);
    if (startsWith) {
      label=label.substring(4,label.length());
      return label;
    }
 else     if (label.equals(EResourceConstant.METADATA.getName())) {
      label=label.substring(0,1).toUpperCase() + label.substring(1);
      return label;
    }
    return node.getObject().getLabel();
  }
  String text=super.getText(element);
  return ""String_Node_Str"".equals(text) ? DefaultMessagesImpl.getString(""String_Node_Str"") : text;
}",0.8953988745448527
138557,"@Override public String getLabel(){
  if (this.getObject() != null) {
    this.getObject().getLabel();
  }
  return super.getLabel();
}","@Override public String getLabel(){
  if (this.getObject() != null) {
    this.getObject().getLabel();
  }
  if (getObjectType() == null) {
    return ERepositoryObjectType.TDQ_FOLDER_NODE.toString();
  }
  return super.getLabel();
}",0.7336956521739131
138558,"/** 
 * DOC klliu Comment method ""getRootNode"".
 * @return
 */
public static RepositoryNode getRootNode(String nodeName){
  RepositoryNode node=null;
  CommonViewer commonViewer=getDQCommonViewer();
  if (commonViewer != null) {
    TreeItem[] items=commonViewer.getTree().getItems();
    for (    TreeItem item : items) {
      String text=item.getText();
      if (text.equals(nodeName)) {
        node=(RepositoryNode)item.getData();
        return node;
      }
    }
  }
  return node;
}","/** 
 * DOC klliu Comment method ""getRootNode"".
 * @return
 */
public static RepositoryNode getRootNode(String nodeName){
  RepositoryNode node=null;
  CommonViewer commonViewer=getDQCommonViewer();
  if (commonViewer != null) {
    TreeItem[] items=commonViewer.getTree().getItems();
    for (    TreeItem item : items) {
      String text=item.getText();
      if (text.equalsIgnoreCase(nodeName)) {
        node=(RepositoryNode)item.getData();
        return node;
      }
    }
  }
  return node;
}",0.9899396378269618
138559,"public void run(){
  setExecuted(AnalysisExecutorSelector.executeAnalysis(getAnalysis(),getMonitor()));
  AnaResourceFileHelper.getInstance().save(getAnalysis());
}","public void run(){
  AnaResourceFileHelper.getInstance().save(getAnalysis());
}",0.6502057613168725
138560,"@Override public boolean equals(Object obj){
  if (this == obj) {
    return true;
  }
  if (obj instanceof AbstractItemEditorInput) {
    AbstractItemEditorInput other=(AbstractItemEditorInput)obj;
    return item.getProperty().getLabel().equals(other.item.getProperty().getLabel());
  }
  return false;
}","@Override public boolean equals(Object obj){
  if (this == obj) {
    return true;
  }
  if (obj instanceof AbstractItemEditorInput) {
    AbstractItemEditorInput other=(AbstractItemEditorInput)obj;
    return StringUtils.equals(item.getProperty().getLabel(),other.item.getProperty().getLabel());
  }
  return false;
}",0.9551282051282052
138561,"/** 
 * (non-Javadoc)
 * @see org.talend.dq.writer.AElementPersistance#addDependencies(orgomg.cwm.objectmodel.core.ModelElement)
 */
@Override public void addDependencies(ModelElement element){
  Analysis analysis=(Analysis)element;
  List<IndicatorDefinition> udis=AnalysisHelper.getUserDefinedIndicators(analysis);
  try {
    for (    IndicatorDefinition udi : udis) {
      if (udi == null) {
        continue;
      }
      InternalEObject iudi=(InternalEObject)udi;
      if (!iudi.eIsProxy()) {
        TypedReturnCode<Dependency> dependencyReturn=DependenciesHandler.getInstance().setDependencyOn(analysis,udi);
        if (dependencyReturn.isOk()) {
          TDQItem udiItem=(TDQItem)RepositoryNodeHelper.recursiveFind(udi).getObject().getProperty().getItem();
          if (udiItem instanceof TDQIndicatorDefinitionItem) {
            ((TDQIndicatorDefinitionItem)udiItem).setIndicatorDefinition(udi);
          }
 else           if (udiItem instanceof TDQBusinessRuleItem) {
            ((TDQBusinessRuleItem)udiItem).setDqrule((DQRule)udi);
          }
          ProxyRepositoryFactory.getInstance().getRepositoryFactoryFromProvider().getResourceManager().saveResource(udi.eResource());
        }
      }
    }
    List<Pattern> patterns=AnalysisHelper.getPatterns(analysis);
    for (    Pattern pattern : patterns) {
      InternalEObject iptn=(InternalEObject)pattern;
      if (!iptn.eIsProxy()) {
        TypedReturnCode<Dependency> dependencyReturn=DependenciesHandler.getInstance().setDependencyOn(analysis,pattern);
        if (dependencyReturn.isOk()) {
          TDQPatternItem patternItem=(TDQPatternItem)RepositoryNodeHelper.recursiveFind(pattern).getObject().getProperty().getItem();
          patternItem.setPattern(pattern);
          ProxyRepositoryFactory.getInstance().getRepositoryFactoryFromProvider().getResourceManager().saveResource(pattern.eResource());
        }
      }
    }
  }
 catch (  PersistenceException e) {
    e.printStackTrace();
  }
}","/** 
 * (non-Javadoc)
 * @see org.talend.dq.writer.AElementPersistance#addDependencies(orgomg.cwm.objectmodel.core.ModelElement)
 */
@Override public void addDependencies(ModelElement element){
  Analysis analysis=(Analysis)element;
  List<IndicatorDefinition> udis=AnalysisHelper.getUserDefinedIndicators(analysis);
  try {
    for (    IndicatorDefinition udi : udis) {
      if (udi == null) {
        continue;
      }
      InternalEObject iudi=(InternalEObject)udi;
      if (!iudi.eIsProxy()) {
        TypedReturnCode<Dependency> dependencyReturn=DependenciesHandler.getInstance().setDependencyOn(analysis,udi);
        if (dependencyReturn.isOk()) {
          RepositoryNode repositoryNode=RepositoryNodeHelper.recursiveFind(udi);
          if (repositoryNode != null) {
            TDQItem udiItem=(TDQItem)repositoryNode.getObject().getProperty().getItem();
            if (udiItem instanceof TDQIndicatorDefinitionItem) {
              ((TDQIndicatorDefinitionItem)udiItem).setIndicatorDefinition(udi);
            }
 else             if (udiItem instanceof TDQBusinessRuleItem) {
              ((TDQBusinessRuleItem)udiItem).setDqrule((DQRule)udi);
            }
          }
          ProxyRepositoryFactory.getInstance().getRepositoryFactoryFromProvider().getResourceManager().saveResource(udi.eResource());
        }
      }
    }
    List<Pattern> patterns=AnalysisHelper.getPatterns(analysis);
    for (    Pattern pattern : patterns) {
      InternalEObject iptn=(InternalEObject)pattern;
      if (!iptn.eIsProxy()) {
        TypedReturnCode<Dependency> dependencyReturn=DependenciesHandler.getInstance().setDependencyOn(analysis,pattern);
        if (dependencyReturn.isOk()) {
          RepositoryNode repositoryNode=RepositoryNodeHelper.recursiveFind(pattern);
          if (repositoryNode != null) {
            TDQPatternItem patternItem=(TDQPatternItem)repositoryNode.getObject().getProperty().getItem();
            patternItem.setPattern(pattern);
          }
          ProxyRepositoryFactory.getInstance().getRepositoryFactoryFromProvider().getResourceManager().saveResource(pattern.eResource());
        }
      }
    }
  }
 catch (  PersistenceException e) {
    e.printStackTrace();
  }
}",0.917697431018078
138562,"@Override public void addDependencies(ModelElement element){
  TdReport report=(TdReport)element;
  for (  Analysis ana : ReportHelper.getAnalyses(report)) {
    TypedReturnCode<Dependency> dependencyReturn=DependenciesHandler.getInstance().setDependencyOn(report,ana);
    if (dependencyReturn.isOk()) {
      try {
        RepositoryNode repositoryNode=RepositoryNodeHelper.recursiveFind(ana);
        TDQAnalysisItem anaItem=(TDQAnalysisItem)repositoryNode.getObject().getProperty().getItem();
        anaItem.setAnalysis(ana);
        ProxyRepositoryFactory.getInstance().getRepositoryFactoryFromProvider().getResourceManager().saveResource(ana.eResource());
      }
 catch (      PersistenceException e) {
        e.printStackTrace();
      }
    }
  }
}","@Override public void addDependencies(ModelElement element){
  TdReport report=(TdReport)element;
  for (  Analysis ana : ReportHelper.getAnalyses(report)) {
    TypedReturnCode<Dependency> dependencyReturn=DependenciesHandler.getInstance().setDependencyOn(report,ana);
    if (dependencyReturn.isOk()) {
      try {
        RepositoryNode repositoryNode=RepositoryNodeHelper.recursiveFind(ana);
        if (repositoryNode != null) {
          TDQAnalysisItem anaItem=(TDQAnalysisItem)repositoryNode.getObject().getProperty().getItem();
          anaItem.setAnalysis(ana);
        }
        ProxyRepositoryFactory.getInstance().getRepositoryFactoryFromProvider().getResourceManager().saveResource(ana.eResource());
      }
 catch (      PersistenceException e) {
        e.printStackTrace();
      }
    }
  }
}",0.9668789808917198
138563,"/** 
 * DOC klliu Comment method ""copyFileToFolder"".
 * @param inputStream
 * @param fileName
 * @param folder
 * @throws CoreException
 * @throws IOException
 */
private void copyFileToFolder(InputStream inputStream,String fileName,IFolder folder) throws CoreException, IOException {
  if (inputStream == null) {
    return;
  }
  IFile element=folder.getFile(fileName);
  if (!element.exists()) {
    element.create(inputStream,false,null);
    ModelElement modelElement=ModelElementFileFactory.getModelElement(element);
    if (modelElement != null) {
      AElementPersistance writer=ElementWriterFactory.getInstance().create(element.getFileExtension());
      if (writer != null) {
        writer.create(modelElement,folder);
        element.delete(true,null);
      }
    }
  }
}","/** 
 * DOC klliu Comment method ""copyFileToFolder"".
 * @param inputStream
 * @param fileName
 * @param folder
 * @throws CoreException
 * @throws IOException
 */
private void copyFileToFolder(InputStream inputStream,String fileName,IFolder folder,boolean... isImportItem) throws CoreException, IOException {
  if (inputStream == null) {
    return;
  }
  IFile element=folder.getFile(fileName);
  if (!element.exists()) {
    element.create(inputStream,false,null);
    ModelElement modelElement=ModelElementFileFactory.getModelElement(element);
    if (modelElement != null) {
      AElementPersistance writer=ElementWriterFactory.getInstance().create(element.getFileExtension());
      if (writer != null) {
        writer.create(modelElement,folder,isImportItem);
        element.delete(true,null);
      }
    }
  }
}",0.9769757311761046
138564,"/** 
 * Copy the files from srcPath to destination folder.
 * @param srcPath The path name in which to look. The path is always relative to the root of this bundle and maybegin with &quot;/&quot;. A path value of &quot;/&quot; indicates the root of this bundle.
 * @param srcPath
 * @param recurse If <code>true</code>, recurse into subdirectories(contains directories). Otherwise only returnentries from the specified path.
 * @param desFolder
 * @throws IOException
 * @throws CoreException
 */
@SuppressWarnings(""String_Node_Str"") public void copyFilesToFolder(Plugin plugin,String srcPath,boolean recurse,IFolder desFolder,String suffix) throws IOException, CoreException {
  if (plugin == null) {
    return;
  }
  Enumeration paths=null;
  paths=plugin.getBundle().getEntryPaths(srcPath);
  if (paths == null) {
    return;
  }
  while (paths.hasMoreElements()) {
    String nextElement=(String)paths.nextElement();
    String currentPath=""String_Node_Str"" + nextElement;
    URL resourceURL=plugin.getBundle().getEntry(currentPath);
    URL fileURL=null;
    File file=null;
    try {
      fileURL=FileLocator.toFileURL(resourceURL);
      file=new File(fileURL.getFile());
      if (file.isDirectory() && recurse) {
        if (file.getName().startsWith(""String_Node_Str"")) {
          continue;
        }
        IFolder folder=desFolder.getFolder(file.getName());
        if (!folder.exists()) {
          folder.create(true,true,null);
        }
        copyFilesToFolder(plugin,currentPath,recurse,folder,suffix);
        continue;
      }
      if (suffix != null && !file.getName().endsWith(suffix)) {
        continue;
      }
      String fileName=new Path(fileURL.getPath()).lastSegment();
      InputStream openStream=null;
      openStream=fileURL.openStream();
      copyFileToFolder(openStream,fileName,desFolder);
    }
 catch (    IOException e) {
      log.error(e,e);
    }
  }
}","/** 
 * Copy the files from srcPath to destination folder.
 * @param srcPath The path name in which to look. The path is always relative to the root of this bundle and maybegin with &quot;/&quot;. A path value of &quot;/&quot; indicates the root of this bundle.
 * @param srcPath
 * @param recurse If <code>true</code>, recurse into subdirectories(contains directories). Otherwise only returnentries from the specified path.
 * @param desFolder
 * @throws IOException
 * @throws CoreException
 */
@SuppressWarnings(""String_Node_Str"") public void copyFilesToFolder(Plugin plugin,String srcPath,boolean recurse,IFolder desFolder,String suffix,boolean... isImportItem) throws IOException, CoreException {
  if (plugin == null) {
    return;
  }
  Enumeration paths=null;
  paths=plugin.getBundle().getEntryPaths(srcPath);
  if (paths == null) {
    return;
  }
  while (paths.hasMoreElements()) {
    String nextElement=(String)paths.nextElement();
    String currentPath=""String_Node_Str"" + nextElement;
    URL resourceURL=plugin.getBundle().getEntry(currentPath);
    URL fileURL=null;
    File file=null;
    try {
      fileURL=FileLocator.toFileURL(resourceURL);
      file=new File(fileURL.getFile());
      if (file.isDirectory() && recurse) {
        if (file.getName().startsWith(""String_Node_Str"")) {
          continue;
        }
        IFolder folder=desFolder.getFolder(file.getName());
        if (!folder.exists()) {
          folder.create(true,true,null);
        }
        copyFilesToFolder(plugin,currentPath,recurse,folder,suffix,isImportItem);
        continue;
      }
      if (suffix != null && !file.getName().endsWith(suffix)) {
        continue;
      }
      String fileName=new Path(fileURL.getPath()).lastSegment();
      InputStream openStream=null;
      openStream=fileURL.openStream();
      copyFileToFolder(openStream,fileName,desFolder,isImportItem);
    }
 catch (    IOException e) {
      log.error(e,e);
    }
  }
}",0.9870466321243524
138565,"protected Collection<Analysis> searchAllAnalysis(IFolder folder){
  Collection<Analysis> analyses=new ArrayList<Analysis>();
  try {
    for (    IResource resource : folder.members()) {
      if (resource.getType() == IResource.FOLDER) {
        if (!resource.getName().startsWith(""String_Node_Str"")) {
          analyses.addAll(searchAllAnalysis(folder.getFolder(resource.getName())));
        }
        continue;
      }
      IFile file=(IFile)resource;
      if (null != file.getFileExtension() && file.getFileExtension().equals(FactoriesUtil.ANA)) {
        URI uri=URI.createPlatformResourceURI(file.getFullPath().toString(),false);
        Resource eResource=EMFSharedResources.getInstance().getResource(uri,true);
        if (!eResource.getContents().isEmpty()) {
          analyses.add((Analysis)eResource.getContents().get(0));
        }
      }
    }
  }
 catch (  Exception e) {
    log.error(e);
  }
  return analyses;
}","protected Collection<Analysis> searchAllAnalysis(IFolder folder){
  Collection<Analysis> analyses=new ArrayList<Analysis>();
  try {
    for (    IResource resource : folder.members()) {
      if (resource.getType() == IResource.FOLDER) {
        if (!resource.getName().startsWith(""String_Node_Str"")) {
          analyses.addAll(searchAllAnalysis(folder.getFolder(resource.getName())));
        }
        continue;
      }
      IFile file=(IFile)resource;
      if (null != file.getFileExtension() && file.getFileExtension().equals(FactoriesUtil.ANA)) {
        URI uri=URI.createPlatformResourceURI(file.getFullPath().toString(),false);
        Resource eResource=EMFSharedResources.getInstance().getResource(uri,true);
        if (eResource.getContents().size() > 0) {
          analyses.add((Analysis)eResource.getContents().get(0));
        }
 else {
          log.error(""String_Node_Str"" + eResource);
        }
      }
    }
  }
 catch (  Exception e) {
    log.error(e);
  }
  return analyses;
}",0.953560371517028
138566,"@Override protected boolean doExecute() throws Exception {
  boolean returnFlag=true;
  List<File> mergeFolders=new ArrayList<File>();
  mergeFolders.add(getWorkspacePath().append(DB_CONNECTION).toFile());
  mergeFolders.add(getWorkspacePath().append(MDM_CONNECTION).toFile());
  List<File> resources=new ArrayList<File>();
  for (  File theFile : mergeFolders) {
    if (theFile != null && theFile.exists() && (DB_CONNECTION.endsWith(theFile.getName()) || MDM_CONNECTION.endsWith(theFile.getName()))) {
      for (      File newFile : theFile.listFiles()) {
        if (newFile.isDirectory()) {
          resources.addAll(iteratorResource(newFile));
        }
 else         if (newFile.getName().toLowerCase().endsWith(FactoriesUtil.PROPERTIES_EXTENSION.toLowerCase())) {
          resources.add(newFile);
        }
      }
    }
  }
  if (resources.size() > 0) {
    for (    File resource : resources) {
      if (resource.isFile() && resource.getName().toLowerCase().endsWith(FactoriesUtil.PROPERTIES_EXTENSION.toLowerCase())) {
        try {
          handlePropertiesFile(resource);
        }
 catch (        Exception e) {
          returnFlag=false;
          log.warn(""String_Node_Str"" + resource.getAbsolutePath(),e);
        }
      }
    }
    File fileAnalysis=new File(ResourceManager.getAnalysisFolder().getRawLocationURI());
    File fileRule=new File(ResourceManager.getRulesFolder().getRawLocationURI());
    try {
      String[] anaFileExtentionNames={FactoriesUtil.ANA};
      String[] rulesFileEctentionNames={FactoriesUtil.DQRULE};
      returnFlag&=FilesUtils.migrateFolder(fileAnalysis,anaFileExtentionNames,this.getReplaceStringMap(),log) && FilesUtils.migrateFolder(fileRule,rulesFileEctentionNames,this.getReplaceStringMap(),log);
      AnaResourceFileHelper.getInstance().clear();
    }
 catch (    Exception e) {
      returnFlag=false;
      log.error(e,e);
    }
  }
  return returnFlag;
}","@Override protected boolean doExecute() throws Exception {
  boolean returnFlag=true;
  List<File> mergeFolders=new ArrayList<File>();
  mergeFolders.add(getWorkspacePath().append(DB_CONNECTION).toFile());
  mergeFolders.add(getWorkspacePath().append(MDM_CONNECTION).toFile());
  List<File> resources=new ArrayList<File>();
  for (  File theFile : mergeFolders) {
    if (theFile != null && theFile.exists() && (DB_CONNECTION.endsWith(theFile.getName()) || MDM_CONNECTION.endsWith(theFile.getName()))) {
      for (      File newFile : theFile.listFiles()) {
        if (newFile.isDirectory()) {
          resources.addAll(iteratorResource(newFile));
        }
 else         if (newFile.getName().toLowerCase().endsWith(FactoriesUtil.PROPERTIES_EXTENSION.toLowerCase())) {
          resources.add(newFile);
        }
      }
    }
  }
  if (resources.size() > 0) {
    for (    File resource : resources) {
      if (resource.isFile() && resource.getName().toLowerCase().endsWith(FactoriesUtil.PROPERTIES_EXTENSION.toLowerCase())) {
        try {
          handlePropertiesFile(resource);
        }
 catch (        Exception e) {
          returnFlag=false;
          log.warn(""String_Node_Str"" + resource.getAbsolutePath(),e);
        }
      }
    }
    File fileAnalysis=new File(ResourceManager.getAnalysisFolder().getRawLocationURI());
    File fileRule=new File(ResourceManager.getRulesFolder().getRawLocationURI());
    try {
      String[] anaFileExtentionNames={FactoriesUtil.ANA};
      String[] rulesFileEctentionNames={FactoriesUtil.DQRULE};
      returnFlag&=FilesUtils.migrateFolder(fileAnalysis,anaFileExtentionNames,this.getReplaceStringMap(),log) && FilesUtils.migrateFolder(fileRule,rulesFileEctentionNames,this.getReplaceStringMap(),log);
      AnaResourceFileHelper.getInstance().clear();
      AnaResourceFileHelper.getInstance().getAllAnalysis();
    }
 catch (    Exception e) {
      returnFlag=false;
      log.error(e,e);
    }
  }
  return returnFlag;
}",0.9846153846153848
138567,"@Override protected boolean doExecute() throws Exception {
  boolean result=true;
  File fileAnalysis=this.getWorkspacePath().append(EResourceConstant.ANALYSIS.getPath()).toFile();
  try {
    String[] anaFileExtentionNames={""String_Node_Str""};
    result=FilesUtils.migrateFolder(fileAnalysis,anaFileExtentionNames,this.getReplaceStringMapMdm(),log);
    AnaResourceFileHelper.getInstance().clear();
  }
 catch (  Exception e) {
    result=false;
    log.error(e,e);
  }
  return result;
}","@Override protected boolean doExecute() throws Exception {
  boolean result=true;
  File fileAnalysis=this.getWorkspacePath().append(EResourceConstant.ANALYSIS.getPath()).toFile();
  try {
    String[] anaFileExtentionNames={""String_Node_Str""};
    result=FilesUtils.migrateFolder(fileAnalysis,anaFileExtentionNames,this.getReplaceStringMapMdm(),log);
    AnaResourceFileHelper.getInstance().clear();
    AnaResourceFileHelper.getInstance().getAllAnalysis();
  }
 catch (  Exception e) {
    result=false;
    log.error(e,e);
  }
  return result;
}",0.9441233140655106
138568,"public Date getOrder(){
  return createDate(2010,9,28);
}","public Date getOrder(){
  return createDate(2010,8,15);
}",0.9473684210526316
138569,"@Override protected boolean doExecute() throws Exception {
  boolean ok=true;
  DQStructureManager manager=DQStructureManager.getInstance();
  IFolder systemIndicatorFolder=ResourceManager.getSystemIndicatorFolder();
  if (!systemIndicatorFolder.exists()) {
    systemIndicatorFolder=manager.createNewFolder(ResourceManager.getIndicatorFolder(),EResourceConstant.SYSTEM_INDICATORS);
  }
  manager.copyFilesToFolder(CorePlugin.getDefault(),DQStructureManager.SYSTEM_INDICATOR_PATH,true,systemIndicatorFolder,null);
  DefinitionHandler.getInstance().reloadIndicatorsDefinitions();
  Collection<Analysis> analyses=searchAllAnalysis(ResourceManager.getAnalysisFolder());
  AnalysisWriter analysisWriter=ElementWriterFactory.getInstance().createAnalysisWrite();
  for (  Analysis ana : analyses) {
    try {
      for (      Indicator ind : ana.getResults().getIndicators()) {
        updateIndDefinition(ind);
        if (ind instanceof CompositeIndicator) {
          for (          Indicator indLeave : IndicatorHelper.getIndicatorLeaves(ind)) {
            updateIndDefinition(indLeave);
          }
        }
      }
      analysisWriter.save(ana);
    }
 catch (    Exception e) {
      log.warn(e,e);
      ok=false;
    }
  }
  ResourceManager.getLibrariesFolder().getFile(DefinitionHandler.FILENAME).delete(true,new NullProgressMonitor());
  DefinitionHandler.getInstance().copyDefinitionsIntoFolder(ResourceManager.getLibrariesFolder());
  return ok;
}","@Override protected boolean doExecute() throws Exception {
  boolean ok=true;
  DQStructureManager manager=DQStructureManager.getInstance();
  IFolder systemIndicatorFolder=ResourceManager.getSystemIndicatorFolder();
  if (!systemIndicatorFolder.exists()) {
    systemIndicatorFolder=manager.createNewFolder(ResourceManager.getIndicatorFolder(),EResourceConstant.SYSTEM_INDICATORS);
  }
  manager.copyFilesToFolder(CorePlugin.getDefault(),DQStructureManager.SYSTEM_INDICATOR_PATH,true,systemIndicatorFolder,null,true);
  DefinitionHandler.getInstance().reloadIndicatorsDefinitions();
  Collection<Analysis> analyses=searchAllAnalysis(ResourceManager.getAnalysisFolder());
  AnalysisWriter analysisWriter=ElementWriterFactory.getInstance().createAnalysisWrite();
  for (  Analysis ana : analyses) {
    try {
      for (      Indicator ind : ana.getResults().getIndicators()) {
        updateIndDefinition(ind);
        if (ind instanceof CompositeIndicator) {
          for (          Indicator indLeave : IndicatorHelper.getIndicatorLeaves(ind)) {
            updateIndDefinition(indLeave);
          }
        }
      }
      analysisWriter.save(ana);
    }
 catch (    Exception e) {
      log.warn(e,e);
      ok=false;
    }
  }
  ResourceManager.getLibrariesFolder().getFile(DefinitionHandler.FILENAME).delete(true,new NullProgressMonitor());
  DefinitionHandler.getInstance().copyDefinitionsIntoFolder(ResourceManager.getLibrariesFolder());
  return ok;
}",0.9982870846180198
138570,"/** 
 * update ModelElement files (Analysis, Report, IndicatorDefinition, Pattern, Rule).
 * @param parentFile
 * @param fileExtension
 * @param baseFolder
 * @param baseFile
 * @param createSubFolder
 * @param replaceStringMap
 * @return
 */
private boolean updateModelElements(File parentFile,String fileExtension,IFolder baseFolder,File baseFile,boolean createSubFolder,Map<String,String> replaceStringMap){
  try {
    if (!parentFile.isFile()) {
      boolean updateSubFolders=true;
      if (createSubFolder) {
        updateSubFolders=createSubFolder(parentFile,baseFolder);
      }
      if (updateSubFolders) {
        File[] listFiles=parentFile.listFiles();
        for (        File file : listFiles) {
          updateModelElements(file,fileExtension,baseFolder,baseFile,createSubFolder,replaceStringMap);
        }
      }
    }
 else {
      if (parentFile.getName().endsWith(fileExtension)) {
        ModelElement modelElement=getModelElement(parentFile);
        if (modelElement != null) {
          IFolder fullPathFolder=getFullPathFolder(baseFolder,baseFile,parentFile);
          ElementWriterFactory.getInstance().createPatternWriter().create(modelElement,fullPathFolder);
          IPath replatePrefixPath=fullPathFolder.getFullPath().removeFirstSegments(2);
          String oldFileNameFull=replatePrefixPath.append(parentFile.getName()).toString();
          String newFileNameFull=replatePrefixPath.append(getDefaultNewFileName(modelElement.getName(),fileExtension)).toString();
          replaceStringMap.put(oldFileNameFull,newFileNameFull);
        }
      }
    }
  }
 catch (  Exception e) {
    log.error(e,e);
    return false;
  }
  return true;
}","/** 
 * update ModelElement files (Analysis, Report, IndicatorDefinition, Pattern, Rule).
 * @param parentFile
 * @param fileExtension
 * @param baseFolder
 * @param baseFile
 * @param createSubFolder
 * @param replaceStringMap
 * @return
 */
private boolean updateModelElements(File parentFile,String fileExtension,IFolder baseFolder,File baseFile,boolean createSubFolder,Map<String,String> replaceStringMap){
  boolean isImport=true;
  try {
    if (!parentFile.isFile()) {
      boolean updateSubFolders=true;
      if (createSubFolder) {
        updateSubFolders=createSubFolder(parentFile,baseFolder);
      }
      if (updateSubFolders) {
        File[] listFiles=parentFile.listFiles();
        for (        File file : listFiles) {
          updateModelElements(file,fileExtension,baseFolder,baseFile,createSubFolder,replaceStringMap);
        }
      }
    }
 else {
      if (parentFile.getName().endsWith(fileExtension)) {
        ModelElement modelElement=getModelElement(parentFile);
        if (modelElement != null) {
          IFolder fullPathFolder=getFullPathFolder(baseFolder,baseFile,parentFile);
          ElementWriterFactory.getInstance().createPatternWriter().create(modelElement,fullPathFolder,isImport);
          IPath replatePrefixPath=fullPathFolder.getFullPath().removeFirstSegments(2);
          String oldFileNameFull=replatePrefixPath.append(parentFile.getName()).toString();
          String newFileNameFull=replatePrefixPath.append(getDefaultNewFileName(modelElement.getName(),fileExtension)).toString();
          replaceStringMap.put(oldFileNameFull,newFileNameFull);
        }
      }
    }
  }
 catch (  Exception e) {
    log.error(e,e);
    return false;
  }
  return true;
}",0.9899941141848146
138571,"public static RepositoryNode recursiveFind(ModelElement modelElement){
  if (modelElement instanceof Analysis) {
    Analysis analysis=(Analysis)modelElement;
    List<IRepositoryNode> dataprofilingNode=getDataProfilingRepositoryNodes();
    for (    IRepositoryNode anaNode : dataprofilingNode) {
      Item itemTemp=((IRepositoryViewObject)anaNode.getObject()).getProperty().getItem();
      if (itemTemp instanceof TDQAnalysisItem) {
        TDQAnalysisItem item=(TDQAnalysisItem)itemTemp;
        if (ResourceHelper.getUUID(analysis).equals(ResourceHelper.getUUID(item.getAnalysis()))) {
          return (RepositoryNode)anaNode;
        }
      }
 else       if (itemTemp instanceof FolderItem) {
        List<TDQAnalysisItem> anaItems=getAnalysisItemsFromFolderItem((FolderItem)itemTemp);
        for (        TDQAnalysisItem anaItem : anaItems) {
          if (ResourceHelper.getUUID(analysis).equals(ResourceHelper.getUUID(anaItem.getAnalysis()))) {
            return (RepositoryNode)anaNode;
          }
        }
      }
    }
  }
 else   if (modelElement instanceof TdReport) {
    TdReport report=(TdReport)modelElement;
    List<IRepositoryNode> dataprofilingNode=getDataProfilingRepositoryNodes();
    for (    IRepositoryNode patternNode : dataprofilingNode) {
      Item itemTemp=((IRepositoryViewObject)patternNode.getObject()).getProperty().getItem();
      if (itemTemp instanceof TDQReportItem) {
        TDQReportItem item=(TDQReportItem)itemTemp;
        if (ResourceHelper.getUUID(report).equals(ResourceHelper.getUUID(item.getReport()))) {
          return (RepositoryNode)patternNode;
        }
      }
 else       if (itemTemp instanceof FolderItem) {
        List<TDQReportItem> reportItems=getReportItemsFromFolderItem((FolderItem)itemTemp);
        for (        TDQReportItem patternItem : reportItems) {
          if (ResourceHelper.getUUID(report).equals(ResourceHelper.getUUID(patternItem.getReport()))) {
            return (RepositoryNode)patternNode;
          }
        }
      }
    }
  }
 else   if (modelElement instanceof TdColumn) {
    TdColumn column=(TdColumn)modelElement;
    IRepositoryNode columnSetNode=recursiveFind(ColumnHelper.getColumnOwnerAsColumnSet(column));
    for (    IRepositoryNode columnNode : columnSetNode.getChildren().get(0).getChildren()) {
      TdColumn columnOnUI=(TdColumn)((MetadataColumnRepositoryObject)columnNode.getObject()).getTdColumn();
      if (ResourceHelper.getUUID(column).equals(ResourceHelper.getUUID(columnOnUI))) {
        return (RepositoryNode)columnNode;
      }
    }
  }
 else   if (modelElement instanceof TdTable) {
    TdTable table=(TdTable)modelElement;
    IRepositoryNode schemaOrCatalogNode=recursiveFind(ColumnSetHelper.getParentCatalogOrSchema(modelElement));
    for (    IRepositoryNode tableNode : schemaOrCatalogNode.getChildren().get(0).getChildren()) {
      TdTable tableOnUI=(TdTable)((TdTableRepositoryObject)tableNode.getObject()).getTdTable();
      if (ResourceHelper.getUUID(table).equals(ResourceHelper.getUUID(tableOnUI))) {
        return (RepositoryNode)tableNode;
      }
    }
  }
 else   if (modelElement instanceof TdView) {
    TdView view=(TdView)modelElement;
    IRepositoryNode schemaOrCatalogNode=recursiveFind(ColumnSetHelper.getParentCatalogOrSchema(modelElement));
    for (    IRepositoryNode viewNode : schemaOrCatalogNode.getChildren().get(1).getChildren()) {
      TdView viewOnUI=(TdView)((TdViewRepositoryObject)viewNode.getObject()).getTdView();
      if (ResourceHelper.getUUID(view).equals(ResourceHelper.getUUID(viewOnUI))) {
        return (RepositoryNode)viewNode;
      }
    }
  }
 else   if (modelElement instanceof MetadataColumn) {
    MetadataColumn column=(MetadataColumn)modelElement;
    IRepositoryNode columnSetNode=recursiveFind(ColumnHelper.getColumnOwnerAsMetadataTable(column));
    for (    IRepositoryNode columnNode : columnSetNode.getChildren().get(0).getChildren()) {
      MetadataColumn columnOnUI=((MetadataColumnRepositoryObject)columnNode.getObject()).getTdColumn();
      if (ResourceHelper.getUUID(column).equals(ResourceHelper.getUUID(columnOnUI))) {
        return (RepositoryNode)columnNode;
      }
    }
  }
 else   if (modelElement instanceof MetadataTable) {
    MetadataTable table=(MetadataTable)modelElement;
    if (table.getNamespace() instanceof RecordFile) {
      IRepositoryNode connNode=recursiveFind(ConnectionHelper.getTdDataProvider(table));
      for (      IRepositoryNode tableNode : connNode.getChildren()) {
        MetadataTable tableOnUI=(MetadataTable)((MetadataTableRepositoryObject)tableNode.getObject()).getTable();
        if (ResourceHelper.getUUID(table).equals(ResourceHelper.getUUID(tableOnUI))) {
          return (RepositoryNode)tableNode;
        }
      }
    }
  }
 else   if (modelElement instanceof Catalog) {
    Catalog catalog=(Catalog)modelElement;
    IRepositoryNode connNode=recursiveFind(ConnectionHelper.getTdDataProvider(catalog));
    for (    IRepositoryNode catalogNode : connNode.getChildren()) {
      Catalog catalogOnUI=((MetadataCatalogRepositoryObject)catalogNode.getObject()).getCatalog();
      if (ResourceHelper.getUUID(catalog).equals(ResourceHelper.getUUID(catalogOnUI))) {
        return (RepositoryNode)catalogNode;
      }
    }
  }
 else   if (modelElement instanceof Schema) {
    Schema schema=(Schema)modelElement;
    Catalog catalog=CatalogHelper.getParentCatalog(schema);
    if (catalog != null) {
      IRepositoryNode catalogNode=recursiveFind(catalog);
      for (      IRepositoryNode schemaNode : catalogNode.getChildren()) {
        Schema schemaOnUI=((MetadataSchemaRepositoryObject)schemaNode.getObject()).getSchema();
        if (ResourceHelper.getUUID(schema).equals(ResourceHelper.getUUID(schemaOnUI))) {
          return (RepositoryNode)schemaNode;
        }
      }
    }
    IRepositoryNode connNode=recursiveFind(ConnectionHelper.getTdDataProvider(schema));
    for (    IRepositoryNode schemaNode : connNode.getChildren()) {
      Schema schemaOnUI=((MetadataSchemaRepositoryObject)schemaNode.getObject()).getSchema();
      if (ResourceHelper.getUUID(schema).equals(ResourceHelper.getUUID(schemaOnUI))) {
        return (RepositoryNode)schemaNode;
      }
    }
  }
 else   if (modelElement instanceof Connection) {
    Connection connection=(Connection)modelElement;
    List<IRepositoryNode> connsNode=getConnectionRepositoryNodes();
    for (    IRepositoryNode connNode : connsNode) {
      Item itemTemp=((IRepositoryViewObject)connNode.getObject()).getProperty().getItem();
      if (itemTemp instanceof ConnectionItem) {
        ConnectionItem item=(ConnectionItem)itemTemp;
        if (ResourceHelper.getUUID(connection).equals(ResourceHelper.getUUID(item.getConnection()))) {
          return (RepositoryNode)connNode;
        }
      }
 else       if (itemTemp instanceof FolderItem) {
        List<ConnectionItem> connItems=getConnectionItemsFromFolderItem((FolderItem)itemTemp);
        for (        ConnectionItem connItem : connItems) {
          if (ResourceHelper.getUUID(connection).equals(ResourceHelper.getUUID(connItem.getConnection()))) {
            return (RepositoryNode)connNode;
          }
        }
      }
    }
  }
 else   if (modelElement instanceof Pattern) {
    Pattern pattern=(Pattern)modelElement;
    List<IRepositoryNode> patternsNode=getPatternsRepositoryNodes();
    for (    IRepositoryNode patternNode : patternsNode) {
      Item itemTemp=((IRepositoryViewObject)patternNode.getObject()).getProperty().getItem();
      if (itemTemp instanceof TDQPatternItem) {
        TDQPatternItem item=(TDQPatternItem)itemTemp;
        if (ResourceHelper.getUUID(pattern).equals(ResourceHelper.getUUID(item.getPattern()))) {
          return (RepositoryNode)patternNode;
        }
      }
 else       if (itemTemp instanceof FolderItem) {
        List<TDQPatternItem> patternItems=getPatternsItemsFromFolderItem((FolderItem)itemTemp);
        for (        TDQPatternItem patternItem : patternItems) {
          if (ResourceHelper.getUUID(pattern).equals(ResourceHelper.getUUID(patternItem.getPattern()))) {
            return (RepositoryNode)patternNode;
          }
        }
      }
    }
  }
 else   if (modelElement instanceof IndicatorDefinition) {
    IndicatorDefinition udi=(IndicatorDefinition)modelElement;
    List<IRepositoryNode> udisNode=getUdisRepositoryNodes();
    for (    IRepositoryNode udiNode : udisNode) {
      Item itemTemp=((IRepositoryViewObject)udiNode.getObject()).getProperty().getItem();
      if (itemTemp instanceof TDQIndicatorDefinitionItem) {
        TDQIndicatorDefinitionItem item=(TDQIndicatorDefinitionItem)itemTemp;
        if (ResourceHelper.getUUID(udi).equals(ResourceHelper.getUUID(item.getIndicatorDefinition()))) {
          return (RepositoryNode)udiNode;
        }
      }
 else       if (itemTemp instanceof FolderItem) {
        List<TDQIndicatorDefinitionItem> udiItems=getIndicatorItemsFromFolderItem((FolderItem)itemTemp);
        for (        TDQIndicatorDefinitionItem udiItem : udiItems) {
          if (ResourceHelper.getUUID(udi).equals(ResourceHelper.getUUID(udiItem.getIndicatorDefinition()))) {
            return (RepositoryNode)udiNode;
          }
        }
      }
    }
  }
  return null;
}","public static RepositoryNode recursiveFind(ModelElement modelElement){
  if (modelElement instanceof Analysis) {
    Analysis analysis=(Analysis)modelElement;
    List<IRepositoryNode> dataprofilingNode=getDataProfilingRepositoryNodes();
    for (    IRepositoryNode anaNode : dataprofilingNode) {
      Item itemTemp=((IRepositoryViewObject)anaNode.getObject()).getProperty().getItem();
      if (itemTemp instanceof TDQAnalysisItem) {
        TDQAnalysisItem item=(TDQAnalysisItem)itemTemp;
        if (ResourceHelper.getUUID(analysis).equals(ResourceHelper.getUUID(item.getAnalysis()))) {
          return (RepositoryNode)anaNode;
        }
      }
 else       if (itemTemp instanceof FolderItem) {
        List<TDQAnalysisItem> anaItems=getAnalysisItemsFromFolderItem((FolderItem)itemTemp);
        for (        TDQAnalysisItem anaItem : anaItems) {
          if (ResourceHelper.getUUID(analysis).equals(ResourceHelper.getUUID(anaItem.getAnalysis()))) {
            return (RepositoryNode)anaNode;
          }
        }
      }
    }
  }
 else   if (modelElement instanceof TdReport) {
    TdReport report=(TdReport)modelElement;
    List<IRepositoryNode> dataprofilingNode=getDataProfilingRepositoryNodes();
    for (    IRepositoryNode patternNode : dataprofilingNode) {
      Item itemTemp=((IRepositoryViewObject)patternNode.getObject()).getProperty().getItem();
      if (itemTemp instanceof TDQReportItem) {
        TDQReportItem item=(TDQReportItem)itemTemp;
        if (ResourceHelper.getUUID(report).equals(ResourceHelper.getUUID(item.getReport()))) {
          return (RepositoryNode)patternNode;
        }
      }
 else       if (itemTemp instanceof FolderItem) {
        List<TDQReportItem> reportItems=getReportItemsFromFolderItem((FolderItem)itemTemp);
        for (        TDQReportItem patternItem : reportItems) {
          if (ResourceHelper.getUUID(report).equals(ResourceHelper.getUUID(patternItem.getReport()))) {
            return (RepositoryNode)patternNode;
          }
        }
      }
    }
  }
 else   if (modelElement instanceof TdColumn) {
    TdColumn column=(TdColumn)modelElement;
    IRepositoryNode columnSetNode=recursiveFind(ColumnHelper.getColumnOwnerAsColumnSet(column));
    for (    IRepositoryNode columnNode : columnSetNode.getChildren().get(0).getChildren()) {
      TdColumn columnOnUI=(TdColumn)((MetadataColumnRepositoryObject)columnNode.getObject()).getTdColumn();
      if (ResourceHelper.getUUID(column).equals(ResourceHelper.getUUID(columnOnUI))) {
        return (RepositoryNode)columnNode;
      }
    }
  }
 else   if (modelElement instanceof TdTable) {
    TdTable table=(TdTable)modelElement;
    IRepositoryNode schemaOrCatalogNode=recursiveFind(ColumnSetHelper.getParentCatalogOrSchema(modelElement));
    for (    IRepositoryNode tableNode : schemaOrCatalogNode.getChildren().get(0).getChildren()) {
      TdTable tableOnUI=(TdTable)((TdTableRepositoryObject)tableNode.getObject()).getTdTable();
      if (ResourceHelper.getUUID(table).equals(ResourceHelper.getUUID(tableOnUI))) {
        return (RepositoryNode)tableNode;
      }
    }
  }
 else   if (modelElement instanceof TdView) {
    TdView view=(TdView)modelElement;
    IRepositoryNode schemaOrCatalogNode=recursiveFind(ColumnSetHelper.getParentCatalogOrSchema(modelElement));
    for (    IRepositoryNode viewNode : schemaOrCatalogNode.getChildren().get(1).getChildren()) {
      TdView viewOnUI=(TdView)((TdViewRepositoryObject)viewNode.getObject()).getTdView();
      if (ResourceHelper.getUUID(view).equals(ResourceHelper.getUUID(viewOnUI))) {
        return (RepositoryNode)viewNode;
      }
    }
  }
 else   if (modelElement instanceof MetadataColumn) {
    MetadataColumn column=(MetadataColumn)modelElement;
    IRepositoryNode columnSetNode=recursiveFind(ColumnHelper.getColumnOwnerAsMetadataTable(column));
    for (    IRepositoryNode columnNode : columnSetNode.getChildren().get(0).getChildren()) {
      MetadataColumn columnOnUI=((MetadataColumnRepositoryObject)columnNode.getObject()).getTdColumn();
      if (ResourceHelper.getUUID(column).equals(ResourceHelper.getUUID(columnOnUI))) {
        return (RepositoryNode)columnNode;
      }
    }
  }
 else   if (modelElement instanceof MetadataTable) {
    MetadataTable table=(MetadataTable)modelElement;
    if (table.getNamespace() instanceof RecordFile) {
      IRepositoryNode connNode=recursiveFind(ConnectionHelper.getTdDataProvider(table));
      for (      IRepositoryNode tableNode : connNode.getChildren()) {
        MetadataTable tableOnUI=(MetadataTable)((MetadataTableRepositoryObject)tableNode.getObject()).getTable();
        if (ResourceHelper.getUUID(table).equals(ResourceHelper.getUUID(tableOnUI))) {
          return (RepositoryNode)tableNode;
        }
      }
    }
  }
 else   if (modelElement instanceof Catalog) {
    Catalog catalog=(Catalog)modelElement;
    IRepositoryNode connNode=recursiveFind(ConnectionHelper.getTdDataProvider(catalog));
    for (    IRepositoryNode catalogNode : connNode.getChildren()) {
      Catalog catalogOnUI=((MetadataCatalogRepositoryObject)catalogNode.getObject()).getCatalog();
      if (ResourceHelper.getUUID(catalog).equals(ResourceHelper.getUUID(catalogOnUI))) {
        return (RepositoryNode)catalogNode;
      }
    }
  }
 else   if (modelElement instanceof Schema) {
    Schema schema=(Schema)modelElement;
    Catalog catalog=CatalogHelper.getParentCatalog(schema);
    if (catalog != null) {
      IRepositoryNode catalogNode=recursiveFind(catalog);
      for (      IRepositoryNode schemaNode : catalogNode.getChildren()) {
        Schema schemaOnUI=((MetadataSchemaRepositoryObject)schemaNode.getObject()).getSchema();
        if (ResourceHelper.getUUID(schema).equals(ResourceHelper.getUUID(schemaOnUI))) {
          return (RepositoryNode)schemaNode;
        }
      }
    }
    IRepositoryNode connNode=recursiveFind(ConnectionHelper.getTdDataProvider(schema));
    for (    IRepositoryNode schemaNode : connNode.getChildren()) {
      Schema schemaOnUI=((MetadataSchemaRepositoryObject)schemaNode.getObject()).getSchema();
      if (ResourceHelper.getUUID(schema).equals(ResourceHelper.getUUID(schemaOnUI))) {
        return (RepositoryNode)schemaNode;
      }
    }
  }
 else   if (modelElement instanceof Connection) {
    Connection connection=(Connection)modelElement;
    List<IRepositoryNode> connsNode=getConnectionRepositoryNodes();
    for (    IRepositoryNode connNode : connsNode) {
      Item itemTemp=((IRepositoryViewObject)connNode.getObject()).getProperty().getItem();
      if (itemTemp instanceof ConnectionItem) {
        ConnectionItem item=(ConnectionItem)itemTemp;
        if (ResourceHelper.getUUID(connection).equals(ResourceHelper.getUUID(item.getConnection()))) {
          return (RepositoryNode)connNode;
        }
      }
 else       if (itemTemp instanceof FolderItem) {
        List<ConnectionItem> connItems=getConnectionItemsFromFolderItem((FolderItem)itemTemp);
        for (        ConnectionItem connItem : connItems) {
          if (ResourceHelper.getUUID(connection).equals(ResourceHelper.getUUID(connItem.getConnection()))) {
            return (RepositoryNode)connNode;
          }
        }
      }
    }
  }
 else   if (modelElement instanceof Pattern) {
    Pattern pattern=(Pattern)modelElement;
    List<IRepositoryNode> patternsNode=getPatternsRepositoryNodes();
    for (    IRepositoryNode patternNode : patternsNode) {
      Item itemTemp=((IRepositoryViewObject)patternNode.getObject()).getProperty().getItem();
      if (itemTemp instanceof TDQPatternItem) {
        TDQPatternItem item=(TDQPatternItem)itemTemp;
        if (ResourceHelper.getUUID(pattern).equals(ResourceHelper.getUUID(item.getPattern()))) {
          return (RepositoryNode)patternNode;
        }
      }
 else       if (itemTemp instanceof FolderItem) {
        List<TDQPatternItem> patternItems=getPatternsItemsFromFolderItem((FolderItem)itemTemp);
        for (        TDQPatternItem patternItem : patternItems) {
          if (ResourceHelper.getUUID(pattern).equals(ResourceHelper.getUUID(patternItem.getPattern()))) {
            return (RepositoryNode)patternNode;
          }
        }
      }
    }
  }
 else   if (modelElement instanceof IndicatorDefinition) {
    IndicatorDefinition udi=(IndicatorDefinition)modelElement;
    List<IRepositoryNode> udisNode=getUdisRepositoryNodes();
    for (    IRepositoryNode udiNode : udisNode) {
      Item itemTemp=((IRepositoryViewObject)udiNode.getObject()).getProperty().getItem();
      if (itemTemp instanceof TDQIndicatorDefinitionItem) {
        TDQIndicatorDefinitionItem item=(TDQIndicatorDefinitionItem)itemTemp;
        if (ResourceHelper.getUUID(udi).equals(ResourceHelper.getUUID(item.getIndicatorDefinition()))) {
          return (RepositoryNode)udiNode;
        }
      }
 else       if (itemTemp instanceof TDQBusinessRuleItem) {
        TDQBusinessRuleItem item=(TDQBusinessRuleItem)itemTemp;
        if (ResourceHelper.getUUID(udi).equals(ResourceHelper.getUUID(item.getDqrule()))) {
          return (RepositoryNode)udiNode;
        }
      }
 else       if (itemTemp instanceof FolderItem) {
        List<TDQIndicatorDefinitionItem> udiItems=getIndicatorItemsFromFolderItem((FolderItem)itemTemp);
        for (        TDQIndicatorDefinitionItem udiItem : udiItems) {
          if (ResourceHelper.getUUID(udi).equals(ResourceHelper.getUUID(udiItem.getIndicatorDefinition()))) {
            return (RepositoryNode)udiNode;
          }
        }
      }
    }
  }
  return null;
}",0.9853653344686286
138572,"public static List<IRepositoryNode> getUdisRepositoryNodes(){
  RepositoryNode node=getRootNode(EResourceConstant.LIBRARIES.getName());
  List<IRepositoryNode> udisNodes=new ArrayList<IRepositoryNode>();
  if (node != null) {
    List<IRepositoryNode> childrens=node.getChildren();
    for (    IRepositoryNode subNode : childrens) {
      if (EResourceConstant.INDICATORS.getName().equals((subNode.getObject().getLabel()))) {
        List<IRepositoryNode> subChildren=subNode.getChildren();
        for (        IRepositoryNode udisNode : subChildren) {
          if (udisNode instanceof UserDefIndicatorFolderRepNode) {
            udisNodes.addAll(getModelElementFromFolder(udisNode));
          }
        }
        return udisNodes;
      }
    }
  }
  return udisNodes;
}","public static List<IRepositoryNode> getUdisRepositoryNodes(){
  RepositoryNode node=getRootNode(EResourceConstant.LIBRARIES.getName());
  List<IRepositoryNode> udisNodes=new ArrayList<IRepositoryNode>();
  if (node != null) {
    List<IRepositoryNode> childrens=node.getChildren();
    for (    IRepositoryNode subNode : childrens) {
      if (EResourceConstant.INDICATORS.getName().equals((subNode.getObject().getLabel())) || EResourceConstant.RULES.getName().equals((subNode.getObject().getLabel()))) {
        List<IRepositoryNode> subChildren=subNode.getChildren();
        for (        IRepositoryNode udisNode : subChildren) {
          if (udisNode instanceof UserDefIndicatorFolderRepNode || udisNode instanceof RulesFolderRepNode) {
            udisNodes.addAll(getModelElementFromFolder(udisNode));
          }
        }
      }
    }
  }
  return udisNodes;
}",0.8967193195625759
138573,"/** 
 * (non-Javadoc)
 * @see org.talend.dq.writer.AElementPersistance#addDependencies(orgomg.cwm.objectmodel.core.ModelElement)
 */
@Override public void addDependencies(ModelElement element){
  Analysis analysis=(Analysis)element;
  List<IndicatorDefinition> udis=AnalysisHelper.getUserDefinedIndicators(analysis);
  try {
    for (    IndicatorDefinition udi : udis) {
      if (udi == null) {
        continue;
      }
      InternalEObject iudi=(InternalEObject)udi;
      if (!iudi.eIsProxy()) {
        TypedReturnCode<Dependency> dependencyReturn=DependenciesHandler.getInstance().setDependencyOn(analysis,udi);
        if (dependencyReturn.isOk()) {
          TDQIndicatorDefinitionItem udiItem=(TDQIndicatorDefinitionItem)RepositoryNodeHelper.recursiveFind(udi).getObject().getProperty().getItem();
          udiItem.setIndicatorDefinition(udi);
          ProxyRepositoryFactory.getInstance().getRepositoryFactoryFromProvider().getResourceManager().saveResource(udi.eResource());
        }
      }
    }
    List<Pattern> patterns=AnalysisHelper.getPatterns(analysis);
    for (    Pattern pattern : patterns) {
      InternalEObject iptn=(InternalEObject)pattern;
      if (!iptn.eIsProxy()) {
        TypedReturnCode<Dependency> dependencyReturn=DependenciesHandler.getInstance().setDependencyOn(analysis,pattern);
        if (dependencyReturn.isOk()) {
          TDQPatternItem patternItem=(TDQPatternItem)RepositoryNodeHelper.recursiveFind(pattern).getObject().getProperty().getItem();
          patternItem.setPattern(pattern);
          ProxyRepositoryFactory.getInstance().getRepositoryFactoryFromProvider().getResourceManager().saveResource(pattern.eResource());
        }
      }
    }
  }
 catch (  PersistenceException e) {
    e.printStackTrace();
  }
}","/** 
 * (non-Javadoc)
 * @see org.talend.dq.writer.AElementPersistance#addDependencies(orgomg.cwm.objectmodel.core.ModelElement)
 */
@Override public void addDependencies(ModelElement element){
  Analysis analysis=(Analysis)element;
  List<IndicatorDefinition> udis=AnalysisHelper.getUserDefinedIndicators(analysis);
  try {
    for (    IndicatorDefinition udi : udis) {
      if (udi == null) {
        continue;
      }
      InternalEObject iudi=(InternalEObject)udi;
      if (!iudi.eIsProxy()) {
        TypedReturnCode<Dependency> dependencyReturn=DependenciesHandler.getInstance().setDependencyOn(analysis,udi);
        if (dependencyReturn.isOk()) {
          TDQItem udiItem=(TDQItem)RepositoryNodeHelper.recursiveFind(udi).getObject().getProperty().getItem();
          if (udiItem instanceof TDQIndicatorDefinitionItem) {
            ((TDQIndicatorDefinitionItem)udiItem).setIndicatorDefinition(udi);
          }
 else           if (udiItem instanceof TDQBusinessRuleItem) {
            ((TDQBusinessRuleItem)udiItem).setDqrule((DQRule)udi);
          }
          ProxyRepositoryFactory.getInstance().getRepositoryFactoryFromProvider().getResourceManager().saveResource(udi.eResource());
        }
      }
    }
    List<Pattern> patterns=AnalysisHelper.getPatterns(analysis);
    for (    Pattern pattern : patterns) {
      InternalEObject iptn=(InternalEObject)pattern;
      if (!iptn.eIsProxy()) {
        TypedReturnCode<Dependency> dependencyReturn=DependenciesHandler.getInstance().setDependencyOn(analysis,pattern);
        if (dependencyReturn.isOk()) {
          TDQPatternItem patternItem=(TDQPatternItem)RepositoryNodeHelper.recursiveFind(pattern).getObject().getProperty().getItem();
          patternItem.setPattern(pattern);
          ProxyRepositoryFactory.getInstance().getRepositoryFactoryFromProvider().getResourceManager().saveResource(pattern.eResource());
        }
      }
    }
  }
 catch (  PersistenceException e) {
    e.printStackTrace();
  }
}",0.9122340425531916
138574,"@SuppressWarnings(""String_Node_Str"") @Override public void run(){
  hasDateColumn=false;
  hasNumberColumn=false;
  if (openStandardAnalysisDialog(AnalysisType.COLUMN_CORRELATION) == Window.OK) {
    AnalysisEditor editor=(AnalysisEditor)PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().getActiveEditor();
    if (editor != null) {
      ColumnCorrelationNominalAndIntervalMasterPage page=(ColumnCorrelationNominalAndIntervalMasterPage)editor.getMasterPage();
      if (!this.selection.isEmpty()) {
        TdColumn[] columns=new TdColumn[selection.size()];
        Iterator it=this.selection.iterator();
        int i=0;
        while (it.hasNext()) {
          columns[i]=(TdColumn)it.next();
          i++;
        }
        page.getTreeViewer().setInput(columns);
      }
    }
  }
}","@SuppressWarnings(""String_Node_Str"") @Override public void run(){
  hasDateColumn=false;
  hasNumberColumn=false;
  if (openStandardAnalysisDialog(AnalysisType.COLUMN_CORRELATION) == Window.OK) {
    AnalysisEditor editor=(AnalysisEditor)PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().getActiveEditor();
    if (editor != null) {
      ColumnCorrelationNominalAndIntervalMasterPage page=(ColumnCorrelationNominalAndIntervalMasterPage)editor.getMasterPage();
      if (!this.selection.isEmpty()) {
        DBColumnRepNode[] columns=new DBColumnRepNode[selection.size()];
        Iterator it=this.selection.iterator();
        int i=0;
        while (it.hasNext()) {
          columns[i]=(DBColumnRepNode)it.next();
          i++;
        }
        page.getTreeViewer().setInput(columns);
      }
    }
  }
}",0.9577981651376148
138575,"private void checkSelectedColumn(){
  if (!selection.isEmpty()) {
    Iterator it=selection.iterator();
    while (it.hasNext()) {
      TdColumn column=(TdColumn)it.next();
      if (Java2SqlType.isNumbericInSQL(column.getSqlDataType().getJavaDataType())) {
        hasNumberColumn=true;
      }
 else       if (Java2SqlType.isDateInSQL(column.getSqlDataType().getJavaDataType()) || Java2SqlType.isDateTimeSQL(column.getSqlDataType().getJavaDataType())) {
        hasDateColumn=true;
      }
    }
  }
}","private void checkSelectedColumn(){
  if (!selection.isEmpty()) {
    Iterator it=selection.iterator();
    while (it.hasNext()) {
      Object theObject=it.next();
      TdColumn column=null;
      if (theObject instanceof DBColumnRepNode) {
        column=((DBColumnRepNode)theObject).getTdColumn();
      }
      if (Java2SqlType.isNumbericInSQL(column.getSqlDataType().getJavaDataType())) {
        hasNumberColumn=true;
      }
 else       if (Java2SqlType.isDateInSQL(column.getSqlDataType().getJavaDataType()) || Java2SqlType.isDateTimeSQL(column.getSqlDataType().getJavaDataType())) {
        hasDateColumn=true;
      }
    }
  }
}",0.8653846153846154
138576,"/** 
 * ADD mzhao 15750 , build dq metadata tree, get connection root node.
 */
public static List<IRepositoryNode> getConnectionRepositoryNodes(){
  RepositoryNode node=getRootNode(EResourceConstant.METADATA.getName());
  List<IRepositoryNode> connNodes=new ArrayList<IRepositoryNode>();
  if (node != null) {
    List<IRepositoryNode> childrens=node.getChildren();
    for (    IRepositoryNode subNode : childrens) {
      if (subNode instanceof DBConnectionFolderRepNode || subNode instanceof DFConnectionFolderRepNode) {
        connNodes.addAll(subNode.getChildren());
      }
    }
  }
  return connNodes;
}","/** 
 * ADD mzhao 15750 , build dq metadata tree, get connection root node.
 */
public static List<IRepositoryNode> getConnectionRepositoryNodes(){
  RepositoryNode node=getRootNode(EResourceConstant.METADATA.getName());
  List<IRepositoryNode> connNodes=new ArrayList<IRepositoryNode>();
  if (node != null) {
    List<IRepositoryNode> childrens=node.getChildren();
    for (    IRepositoryNode subNode : childrens) {
      if (subNode instanceof DBConnectionFolderRepNode || subNode instanceof DFConnectionFolderRepNode) {
        connNodes.addAll(getConnectionFromFolder(subNode));
      }
    }
  }
  return connNodes;
}",0.9700889248181084
138577,"public ReturnCode save(Item item){
  ReturnCode rc=new ReturnCode();
  try {
    TDQAnalysisItem anaItem=(TDQAnalysisItem)item;
    if (anaItem != null && anaItem.eIsProxy()) {
      anaItem=(TDQAnalysisItem)EObjectHelper.resolveObject(anaItem);
      anaItem.getProperty().setLabel(anaItem.getAnalysis().getName());
    }
    Analysis analysis=anaItem.getAnalysis();
    addDependencies(analysis);
    addResourceContent(analysis.eResource(),analysis);
    ProxyRepositoryFactory.getInstance().save(anaItem);
  }
 catch (  PersistenceException e) {
    log.error(e,e);
    rc.setOk(Boolean.FALSE);
    rc.setMessage(e.getMessage());
  }
  return rc;
}","public ReturnCode save(Item item){
  ReturnCode rc=new ReturnCode();
  try {
    TDQAnalysisItem anaItem=(TDQAnalysisItem)item;
    if (anaItem != null && anaItem.eIsProxy()) {
      anaItem=(TDQAnalysisItem)EObjectHelper.resolveObject(anaItem);
      anaItem.getProperty().setLabel(anaItem.getAnalysis().getName());
    }
    Analysis analysis=anaItem.getAnalysis();
    addDependencies(analysis);
    addResourceContent(analysis.eResource(),analysis);
    anaItem.setAnalysis(analysis);
    ProxyRepositoryFactory.getInstance().save(anaItem);
  }
 catch (  PersistenceException e) {
    log.error(e,e);
    rc.setOk(Boolean.FALSE);
    rc.setMessage(e.getMessage());
  }
  return rc;
}",0.9738610903659448
138578,"protected void reloadDataproviderAndFillConnCombo(){
  List<IRepositoryNode> allConnectionReposNodes=DQStructureManager.getInstance().getConnectionRepositoryNodes();
  int index=0;
  connCombo.removeAll();
  for (  IRepositoryNode repNode : allConnectionReposNodes) {
    connCombo.add(repNode.getObject().getProperty().getLabel(),index);
    connCombo.setData(repNode.getObject().getProperty().getLabel(),index);
    connCombo.setData(index + ""String_Node_Str"",repNode);
    index++;
  }
  if (index > 0) {
    connCombo.select(0);
  }
}","protected void reloadDataproviderAndFillConnCombo(){
  List<IRepositoryNode> allConnectionReposNodes=RepositoryNodeHelper.getConnectionRepositoryNodes();
  int index=0;
  connCombo.removeAll();
  for (  IRepositoryNode repNode : allConnectionReposNodes) {
    connCombo.add(repNode.getObject().getProperty().getLabel(),index);
    connCombo.setData(repNode.getObject().getProperty().getLabel(),index);
    connCombo.setData(index + ""String_Node_Str"",repNode);
    index++;
  }
  if (index > 0) {
    connCombo.select(0);
  }
}",0.9511278195488722
138579,"/** 
 * @param outputFolder
 * @throws DataprofilerCoreException
 */
public void saveAnalysis() throws DataprofilerCoreException {
  IRepositoryViewObject reposObject=null;
  correlationAnalysisHandler.clearAnalysis();
  columnSetMultiIndicator.getAnalyzedColumns().clear();
  Analysis analysis=correlationAnalysisHandler.getAnalysis();
  analysis.getParameters().setExecutionLanguage(ExecutionLanguage.get(execLang));
  correlationAnalysisHandler.setStringDataFilter(dataFilterComp.getDataFilterString());
  List<RepositoryNode> repositoryNodeList=treeViewer.getColumnSetMultiValueList();
  if (repositoryNodeList != null && repositoryNodeList.size() != 0) {
    reposObject=repositoryNodeList.get(0).getObject();
    Connection tdProvider=((ConnectionItem)reposObject.getProperty().getItem()).getConnection();
    analysis.getContext().setConnection(tdProvider);
    List<TdColumn> columnLst=new ArrayList<TdColumn>();
    for (    RepositoryNode repNode : repositoryNodeList) {
      columnLst.add((TdColumn)((MetadataColumnRepositoryObject)repNode.getObject()).getTdColumn());
    }
    columnSetMultiIndicator.getAnalyzedColumns().addAll(columnLst);
    correlationAnalysisHandler.addIndicator(columnLst,columnSetMultiIndicator);
  }
 else {
    analysis.getContext().setConnection(null);
    analysis.getResults().getIndicators().clear();
    ColumnsetFactory columnsetFactory=ColumnsetFactory.eINSTANCE;
    ColumnSetMultiValueIndicator columnSetMultiValueIndicator=null;
    if (ColumnsetPackage.eINSTANCE.getCountAvgNullIndicator() == columnSetMultiIndicator.eClass()) {
      columnSetMultiValueIndicator=columnsetFactory.createCountAvgNullIndicator();
    }
    if (ColumnsetPackage.eINSTANCE.getMinMaxDateIndicator() == columnSetMultiIndicator.eClass()) {
      columnSetMultiValueIndicator=columnsetFactory.createMinMaxDateIndicator();
    }
    if (ColumnsetPackage.eINSTANCE.getWeakCorrelationIndicator() == columnSetMultiIndicator.eClass()) {
      columnSetMultiValueIndicator=columnsetFactory.createWeakCorrelationIndicator();
    }
    fillSimpleIndicators(columnSetMultiValueIndicator);
    analysis.getResults().getIndicators().add(columnSetMultiValueIndicator);
    analysis.getClientDependency().clear();
  }
  String urlString=analysis.eResource() != null ? analysis.eResource().getURI().toFileString() : PluginConstant.EMPTY_STRING;
  this.updateAnalysisClientDependency();
  ReturnCode saved=new ReturnCode(false);
  IEditorInput editorInput=this.getEditorInput();
  if (editorInput instanceof AnalysisItemEditorInput) {
    AnalysisItemEditorInput analysisInput=(AnalysisItemEditorInput)editorInput;
    TDQAnalysisItem tdqAnalysisItem=analysisInput.getTDQAnalysisItem();
    saved=ElementWriterFactory.getInstance().createAnalysisWrite().save(tdqAnalysisItem);
  }
  if (saved.isOk()) {
    if (reposObject != null) {
      ElementWriterFactory.getInstance().createDataProviderWriter().save(reposObject.getProperty().getItem());
    }
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + urlString + ""String_Node_Str"");
    }
  }
 else {
    throw new DataprofilerCoreException(DefaultMessagesImpl.getString(""String_Node_Str"",analysis.getName(),urlString,saved.getMessage()));
  }
  treeViewer.setDirty(false);
  dataFilterComp.setDirty(false);
}","/** 
 * @param outputFolder
 * @throws DataprofilerCoreException
 */
public void saveAnalysis() throws DataprofilerCoreException {
  IRepositoryViewObject reposObject=null;
  Connection tdProvider=null;
  correlationAnalysisHandler.clearAnalysis();
  columnSetMultiIndicator.getAnalyzedColumns().clear();
  Analysis analysis=correlationAnalysisHandler.getAnalysis();
  analysis.getParameters().setExecutionLanguage(ExecutionLanguage.get(execLang));
  correlationAnalysisHandler.setStringDataFilter(dataFilterComp.getDataFilterString());
  List<RepositoryNode> repositoryNodeList=treeViewer.getColumnSetMultiValueList();
  if (repositoryNodeList != null && repositoryNodeList.size() != 0) {
    reposObject=repositoryNodeList.get(0).getObject();
    tdProvider=((ConnectionItem)reposObject.getProperty().getItem()).getConnection();
    analysis.getContext().setConnection(tdProvider);
    List<TdColumn> columnLst=new ArrayList<TdColumn>();
    for (    RepositoryNode repNode : repositoryNodeList) {
      columnLst.add((TdColumn)((MetadataColumnRepositoryObject)repNode.getObject()).getTdColumn());
    }
    columnSetMultiIndicator.getAnalyzedColumns().addAll(columnLst);
    correlationAnalysisHandler.addIndicator(columnLst,columnSetMultiIndicator);
  }
 else {
    tdProvider=(Connection)analysis.getContext().getConnection();
    tdProvider.getSupplierDependency().get(0).getClient().remove(analysis);
    analysis.getContext().setConnection(null);
    analysis.getResults().getIndicators().clear();
    ColumnsetFactory columnsetFactory=ColumnsetFactory.eINSTANCE;
    ColumnSetMultiValueIndicator columnSetMultiValueIndicator=null;
    if (ColumnsetPackage.eINSTANCE.getCountAvgNullIndicator() == columnSetMultiIndicator.eClass()) {
      columnSetMultiValueIndicator=columnsetFactory.createCountAvgNullIndicator();
    }
    if (ColumnsetPackage.eINSTANCE.getMinMaxDateIndicator() == columnSetMultiIndicator.eClass()) {
      columnSetMultiValueIndicator=columnsetFactory.createMinMaxDateIndicator();
    }
    if (ColumnsetPackage.eINSTANCE.getWeakCorrelationIndicator() == columnSetMultiIndicator.eClass()) {
      columnSetMultiValueIndicator=columnsetFactory.createWeakCorrelationIndicator();
    }
    fillSimpleIndicators(columnSetMultiValueIndicator);
    analysis.getResults().getIndicators().add(columnSetMultiValueIndicator);
    analysis.getClientDependency().clear();
  }
  String urlString=analysis.eResource() != null ? analysis.eResource().getURI().toFileString() : PluginConstant.EMPTY_STRING;
  this.updateAnalysisClientDependency();
  ReturnCode saved=new ReturnCode(false);
  IEditorInput editorInput=this.getEditorInput();
  if (editorInput instanceof AnalysisItemEditorInput) {
    AnalysisItemEditorInput analysisInput=(AnalysisItemEditorInput)editorInput;
    TDQAnalysisItem tdqAnalysisItem=analysisInput.getTDQAnalysisItem();
    saved=ElementWriterFactory.getInstance().createAnalysisWrite().save(tdqAnalysisItem);
  }
  if (saved.isOk()) {
    reposObject=RepositoryNodeHelper.recursiveFind(tdProvider).getObject();
    if (reposObject != null) {
      ElementWriterFactory.getInstance().createDataProviderWriter().save(reposObject.getProperty().getItem());
    }
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + urlString + ""String_Node_Str"");
    }
  }
 else {
    throw new DataprofilerCoreException(DefaultMessagesImpl.getString(""String_Node_Str"",analysis.getName(),urlString,saved.getMessage()));
  }
  treeViewer.setDirty(false);
  dataFilterComp.setDirty(false);
}",0.9373440939104916
138580,"@Override protected void saveAnalysis() throws DataprofilerCoreException {
  IRepositoryViewObject reposObject=null;
  getAnalysisHandler().clearAnalysis();
  List<RepositoryNode> columnListAANode=anaColumnCompareViewer.getColumnListA();
  List<RepositoryNode> columnListBBNode=anaColumnCompareViewer.getColumnListB();
  AnalysisBuilder anaBuilder=new AnalysisBuilder();
  anaBuilder.setAnalysis(this.analysis);
  Connection tdDataProvider=null;
  for (int i=0; i < columnListAANode.size(); i++) {
    if (columnListBBNode.size() > i) {
      ColumnDependencyIndicator indicator=ColumnsetFactory.eINSTANCE.createColumnDependencyIndicator();
      TdColumn columnA=(TdColumn)((MetadataColumnRepositoryObject)columnListAANode.get(i).getObject()).getTdColumn();
      TdColumn columnB=(TdColumn)((MetadataColumnRepositoryObject)columnListBBNode.get(i).getObject()).getTdColumn();
      indicator.setColumnA(columnA);
      indicator.setColumnB(columnB);
      indicator.setIndicatorDefinition(DefinitionHandler.getInstance().getFDRuleDefaultIndicatorDefinition());
      analysis.getResults().getIndicators().add(indicator);
      anaBuilder.addElementToAnalyze(columnA,indicator);
      anaBuilder.addElementToAnalyze(columnB,indicator);
    }
  }
  if (columnListAANode.size() > 0) {
    reposObject=columnListAANode.get(0).getObject();
    tdDataProvider=((ConnectionItem)reposObject.getProperty().getItem()).getConnection();
    analysis.getContext().setConnection(tdDataProvider);
    TypedReturnCode<Dependency> rc=DependenciesHandler.getInstance().setDependencyOn(analysis,tdDataProvider);
    if (!rc.isOk()) {
      log.info(""String_Node_Str"" + analysis.getFileName());
    }
  }
 else {
    analysis.getContext().setConnection(null);
    analysis.getClientDependency().clear();
  }
  this.updateAnalysisClientDependency();
  ReturnCode saved=new ReturnCode(false);
  IEditorInput editorInput=this.getEditorInput();
  if (editorInput instanceof AnalysisItemEditorInput) {
    AnalysisItemEditorInput analysisInput=(AnalysisItemEditorInput)editorInput;
    TDQAnalysisItem tdqAnalysisItem=analysisInput.getTDQAnalysisItem();
    saved=ElementWriterFactory.getInstance().createAnalysisWrite().save(tdqAnalysisItem);
  }
  if (saved.isOk()) {
    if (reposObject != null) {
      ElementWriterFactory.getInstance().createDataProviderWriter().save(reposObject.getProperty().getItem());
    }
    log.info(""String_Node_Str"" + analysis.getFileName());
  }
}","@Override protected void saveAnalysis() throws DataprofilerCoreException {
  IRepositoryViewObject reposObject=null;
  getAnalysisHandler().clearAnalysis();
  List<RepositoryNode> columnListAANode=anaColumnCompareViewer.getColumnListA();
  List<RepositoryNode> columnListBBNode=anaColumnCompareViewer.getColumnListB();
  AnalysisBuilder anaBuilder=new AnalysisBuilder();
  anaBuilder.setAnalysis(this.analysis);
  Connection tdDataProvider=null;
  for (int i=0; i < columnListAANode.size(); i++) {
    if (columnListBBNode.size() > i) {
      ColumnDependencyIndicator indicator=ColumnsetFactory.eINSTANCE.createColumnDependencyIndicator();
      TdColumn columnA=(TdColumn)((MetadataColumnRepositoryObject)columnListAANode.get(i).getObject()).getTdColumn();
      TdColumn columnB=(TdColumn)((MetadataColumnRepositoryObject)columnListBBNode.get(i).getObject()).getTdColumn();
      indicator.setColumnA(columnA);
      indicator.setColumnB(columnB);
      indicator.setIndicatorDefinition(DefinitionHandler.getInstance().getFDRuleDefaultIndicatorDefinition());
      analysis.getResults().getIndicators().add(indicator);
      anaBuilder.addElementToAnalyze(columnA,indicator);
      anaBuilder.addElementToAnalyze(columnB,indicator);
    }
  }
  if (columnListAANode.size() > 0) {
    reposObject=columnListAANode.get(0).getObject();
    tdDataProvider=((ConnectionItem)reposObject.getProperty().getItem()).getConnection();
    analysis.getContext().setConnection(tdDataProvider);
    TypedReturnCode<Dependency> rc=DependenciesHandler.getInstance().setDependencyOn(analysis,tdDataProvider);
    if (!rc.isOk()) {
      log.info(""String_Node_Str"" + analysis.getFileName());
    }
  }
 else {
    tdDataProvider=(Connection)analysis.getContext().getConnection();
    tdDataProvider.getSupplierDependency().get(0).getClient().remove(analysis);
    analysis.getContext().setConnection(null);
    analysis.getClientDependency().clear();
  }
  this.updateAnalysisClientDependency();
  ReturnCode saved=new ReturnCode(false);
  IEditorInput editorInput=this.getEditorInput();
  if (editorInput instanceof AnalysisItemEditorInput) {
    AnalysisItemEditorInput analysisInput=(AnalysisItemEditorInput)editorInput;
    TDQAnalysisItem tdqAnalysisItem=analysisInput.getTDQAnalysisItem();
    saved=ElementWriterFactory.getInstance().createAnalysisWrite().save(tdqAnalysisItem);
  }
  if (saved.isOk()) {
    reposObject=RepositoryNodeHelper.recursiveFind(tdDataProvider).getObject();
    if (reposObject != null) {
      ElementWriterFactory.getInstance().createDataProviderWriter().save(reposObject.getProperty().getItem());
    }
    log.info(""String_Node_Str"" + analysis.getFileName());
  }
}",0.9241835147744946
138581,"/** 
 * @param outputFolder
 * @throws DataprofilerCoreException
 */
public void saveAnalysis() throws DataprofilerCoreException {
  IRepositoryViewObject reposObject=null;
  analysisHandler.clearAnalysis();
  ModelElementIndicator[] modelElementIndicators=treeViewer.getModelElementIndicator();
  Connection tdProvider=null;
  Analysis analysis=analysisHandler.getAnalysis();
  analysis.getParameters().setExecutionLanguage(ExecutionLanguage.get(execLang));
  if (ExecutionLanguage.JAVA.equals(ExecutionLanguage.get(execLang))) {
    analysis.getParameters().setMaxNumberRows(Integer.parseInt(maxNumText.getText()));
    analysis.getParameters().setStoreData(drillDownCheck.getSelection());
  }
  if (modelElementIndicators != null && modelElementIndicators.length != 0) {
    tdProvider=ModelElementIndicatorHelper.getTdDataProvider(modelElementIndicators[0]);
    if (tdProvider.eIsProxy()) {
      tdProvider=(Connection)EObjectHelper.resolveObject(tdProvider);
    }
    analysis.getContext().setConnection(tdProvider);
    for (    ModelElementIndicator modelElementIndicator : modelElementIndicators) {
      reposObject=modelElementIndicator.getModelElementRepositoryNode().getObject();
      ModelElement modelEle=null;
      if (reposObject instanceof MetadataColumnRepositoryObject) {
        modelEle=((MetadataColumnRepositoryObject)reposObject).getTdColumn();
      }
 else       if (reposObject instanceof MetadataXmlElementTypeRepositoryObject) {
        modelEle=((MetadataXmlElementTypeRepositoryObject)reposObject).getTdXmlElementType();
      }
      analysisHandler.addIndicator(modelEle,modelElementIndicator.getIndicators());
      DataminingType type=MetadataHelper.getDataminingType(modelEle);
      if (type == null) {
        type=MetadataHelper.getDefaultDataminingType(modelElementIndicator.getJavaType());
      }
      analysisHandler.setDatamingType(type.getLiteral(),modelEle);
    }
  }
 else {
    analysis.getContext().setConnection(null);
    analysis.getClientDependency().clear();
  }
  analysisHandler.setStringDataFilter(dataFilterComp.getDataFilterString());
  String urlString=analysis.eResource() != null ? analysis.eResource().getURI().toFileString() : PluginConstant.EMPTY_STRING;
  this.updateAnalysisClientDependency();
  ReturnCode saved=new ReturnCode(false);
  IEditorInput editorInput=this.getEditorInput();
  if (editorInput instanceof AnalysisItemEditorInput) {
    AnalysisItemEditorInput analysisInput=(AnalysisItemEditorInput)editorInput;
    TDQAnalysisItem tdqAnalysisItem=analysisInput.getTDQAnalysisItem();
    saved=ElementWriterFactory.getInstance().createAnalysisWrite().save(tdqAnalysisItem);
  }
  if (saved.isOk()) {
    if (reposObject != null) {
      ElementWriterFactory.getInstance().createDataProviderWriter().save(reposObject.getProperty().getItem());
    }
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + urlString + ""String_Node_Str"");
    }
  }
 else {
    throw new DataprofilerCoreException(DefaultMessagesImpl.getString(""String_Node_Str"",analysis.getName(),urlString,saved.getMessage()));
  }
  treeViewer.setDirty(false);
  dataFilterComp.setDirty(false);
}","/** 
 * @param outputFolder
 * @throws DataprofilerCoreException
 */
public void saveAnalysis() throws DataprofilerCoreException {
  IRepositoryViewObject reposObject=null;
  analysisHandler.clearAnalysis();
  ModelElementIndicator[] modelElementIndicators=treeViewer.getModelElementIndicator();
  Connection tdProvider=null;
  Analysis analysis=analysisHandler.getAnalysis();
  analysis.getParameters().setExecutionLanguage(ExecutionLanguage.get(execLang));
  if (ExecutionLanguage.JAVA.equals(ExecutionLanguage.get(execLang))) {
    analysis.getParameters().setMaxNumberRows(Integer.parseInt(maxNumText.getText()));
    analysis.getParameters().setStoreData(drillDownCheck.getSelection());
  }
  if (modelElementIndicators != null && modelElementIndicators.length != 0) {
    tdProvider=ModelElementIndicatorHelper.getTdDataProvider(modelElementIndicators[0]);
    if (tdProvider.eIsProxy()) {
      tdProvider=(Connection)EObjectHelper.resolveObject(tdProvider);
    }
    analysis.getContext().setConnection(tdProvider);
    for (    ModelElementIndicator modelElementIndicator : modelElementIndicators) {
      reposObject=modelElementIndicator.getModelElementRepositoryNode().getObject();
      ModelElement modelEle=null;
      if (reposObject instanceof MetadataColumnRepositoryObject) {
        modelEle=((MetadataColumnRepositoryObject)reposObject).getTdColumn();
      }
 else       if (reposObject instanceof MetadataXmlElementTypeRepositoryObject) {
        modelEle=((MetadataXmlElementTypeRepositoryObject)reposObject).getTdXmlElementType();
      }
      analysisHandler.addIndicator(modelEle,modelElementIndicator.getIndicators());
      DataminingType type=MetadataHelper.getDataminingType(modelEle);
      if (type == null) {
        type=MetadataHelper.getDefaultDataminingType(modelElementIndicator.getJavaType());
      }
      analysisHandler.setDatamingType(type.getLiteral(),modelEle);
    }
  }
 else {
    tdProvider=(Connection)analysis.getContext().getConnection();
    tdProvider.getSupplierDependency().get(0).getClient().remove(analysis);
    analysis.getContext().setConnection(null);
    analysis.getClientDependency().clear();
  }
  analysisHandler.setStringDataFilter(dataFilterComp.getDataFilterString());
  String urlString=analysis.eResource() != null ? analysis.eResource().getURI().toFileString() : PluginConstant.EMPTY_STRING;
  this.updateAnalysisClientDependency();
  ReturnCode saved=new ReturnCode(false);
  IEditorInput editorInput=this.getEditorInput();
  if (editorInput instanceof AnalysisItemEditorInput) {
    AnalysisItemEditorInput analysisInput=(AnalysisItemEditorInput)editorInput;
    TDQAnalysisItem tdqAnalysisItem=analysisInput.getTDQAnalysisItem();
    saved=ElementWriterFactory.getInstance().createAnalysisWrite().save(tdqAnalysisItem);
  }
  if (saved.isOk()) {
    reposObject=RepositoryNodeHelper.recursiveFind(tdProvider).getObject();
    if (reposObject != null) {
      ElementWriterFactory.getInstance().createDataProviderWriter().save(reposObject.getProperty().getItem());
    }
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + urlString + ""String_Node_Str"");
    }
  }
 else {
    throw new DataprofilerCoreException(DefaultMessagesImpl.getString(""String_Node_Str"",analysis.getName(),urlString,saved.getMessage()));
  }
  treeViewer.setDirty(false);
  dataFilterComp.setDirty(false);
}",0.94092439546985
138582,"/** 
 * @param outputFolder
 * @throws DataprofilerCoreException
 */
public void saveAnalysis() throws DataprofilerCoreException {
  IRepositoryViewObject reposObject=null;
  columnSetAnalysisHandler.clearAnalysis();
  simpleStatIndicator.getAnalyzedColumns().clear();
  allMatchIndicator.getAnalyzedColumns().clear();
  Analysis analysis=columnSetAnalysisHandler.getAnalysis();
  analysis.getParameters().setExecutionLanguage(ExecutionLanguage.JAVA);
  columnSetAnalysisHandler.setStringDataFilter(dataFilterComp.getDataFilterString());
  List<IRepositoryNode> repositoryNodes=treeViewer.getColumnSetMultiValueList();
  Connection tdProvider=null;
  if (repositoryNodes != null && repositoryNodes.size() != 0) {
    ConnectionItem item=(ConnectionItem)repositoryNodes.get(0).getObject().getProperty().getItem();
    tdProvider=item.getConnection();
    if (tdProvider.eIsProxy()) {
      tdProvider=(Connection)EObjectHelper.resolveObject(tdProvider);
    }
    analysis.getContext().setConnection(tdProvider);
    List<TdColumn> columnList=new ArrayList<TdColumn>();
    for (    IRepositoryNode rd : repositoryNodes) {
      reposObject=rd.getObject();
      columnList.add((TdColumn)((MetadataColumnRepositoryObject)reposObject).getTdColumn());
    }
    simpleStatIndicator.getAnalyzedColumns().addAll(columnList);
    columnSetAnalysisHandler.addIndicator(columnList,simpleStatIndicator);
    allMatchIndicator.getCompositeRegexMatchingIndicators().clear();
    ModelElementIndicator[] modelElementIndicator=treeViewer.getModelElementIndicator();
    if (modelElementIndicator != null) {
      for (      ModelElementIndicator modelElementInd : modelElementIndicator) {
        Indicator[] inds=modelElementInd.getPatternIndicators();
        for (        Indicator ind : inds) {
          if (ind instanceof RegexpMatchingIndicator) {
            ind.setAnalyzedElement(((MetadataColumnRepositoryObject)modelElementInd.getModelElementRepositoryNode().getObject()).getTdColumn());
            allMatchIndicator.getCompositeRegexMatchingIndicators().add((RegexpMatchingIndicator)ind);
          }
        }
      }
    }
    if (allMatchIndicator.getCompositeRegexMatchingIndicators().size() > 0) {
      allMatchIndicator.getAnalyzedColumns().addAll(columnList);
      columnSetAnalysisHandler.addIndicator(columnList,allMatchIndicator);
    }
  }
 else {
    analysis.getContext().setConnection(null);
    analysis.getClientDependency().clear();
  }
  String urlString=analysis.eResource() != null ? analysis.eResource().getURI().toFileString() : PluginConstant.EMPTY_STRING;
  this.updateAnalysisClientDependency();
  ReturnCode saved=new ReturnCode(false);
  IEditorInput editorInput=this.getEditorInput();
  if (editorInput instanceof AnalysisItemEditorInput) {
    AnalysisItemEditorInput analysisInput=(AnalysisItemEditorInput)editorInput;
    TDQAnalysisItem tdqAnalysisItem=analysisInput.getTDQAnalysisItem();
    saved=ElementWriterFactory.getInstance().createAnalysisWrite().save(tdqAnalysisItem);
  }
  if (saved.isOk()) {
    if (tdProvider != null) {
      ElementWriterFactory.getInstance().createDataProviderWriter().save(reposObject.getProperty().getItem());
    }
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + urlString + ""String_Node_Str"");
    }
  }
 else {
    throw new DataprofilerCoreException(DefaultMessagesImpl.getString(""String_Node_Str"",analysis.getName(),urlString,saved.getMessage()));
  }
  treeViewer.setDirty(false);
  dataFilterComp.setDirty(false);
}","/** 
 * @param outputFolder
 * @throws DataprofilerCoreException
 */
public void saveAnalysis() throws DataprofilerCoreException {
  IRepositoryViewObject reposObject=null;
  columnSetAnalysisHandler.clearAnalysis();
  simpleStatIndicator.getAnalyzedColumns().clear();
  allMatchIndicator.getAnalyzedColumns().clear();
  Analysis analysis=columnSetAnalysisHandler.getAnalysis();
  analysis.getParameters().setExecutionLanguage(ExecutionLanguage.JAVA);
  columnSetAnalysisHandler.setStringDataFilter(dataFilterComp.getDataFilterString());
  List<IRepositoryNode> repositoryNodes=treeViewer.getColumnSetMultiValueList();
  Connection tdProvider=null;
  if (repositoryNodes != null && repositoryNodes.size() != 0) {
    ConnectionItem item=(ConnectionItem)repositoryNodes.get(0).getObject().getProperty().getItem();
    tdProvider=item.getConnection();
    if (tdProvider.eIsProxy()) {
      tdProvider=(Connection)EObjectHelper.resolveObject(tdProvider);
    }
    analysis.getContext().setConnection(tdProvider);
    List<TdColumn> columnList=new ArrayList<TdColumn>();
    for (    IRepositoryNode rd : repositoryNodes) {
      reposObject=rd.getObject();
      columnList.add((TdColumn)((MetadataColumnRepositoryObject)reposObject).getTdColumn());
    }
    simpleStatIndicator.getAnalyzedColumns().addAll(columnList);
    columnSetAnalysisHandler.addIndicator(columnList,simpleStatIndicator);
    allMatchIndicator.getCompositeRegexMatchingIndicators().clear();
    ModelElementIndicator[] modelElementIndicator=treeViewer.getModelElementIndicator();
    if (modelElementIndicator != null) {
      for (      ModelElementIndicator modelElementInd : modelElementIndicator) {
        Indicator[] inds=modelElementInd.getPatternIndicators();
        for (        Indicator ind : inds) {
          if (ind instanceof RegexpMatchingIndicator) {
            ind.setAnalyzedElement(((MetadataColumnRepositoryObject)modelElementInd.getModelElementRepositoryNode().getObject()).getTdColumn());
            allMatchIndicator.getCompositeRegexMatchingIndicators().add((RegexpMatchingIndicator)ind);
          }
        }
      }
    }
    if (allMatchIndicator.getCompositeRegexMatchingIndicators().size() > 0) {
      allMatchIndicator.getAnalyzedColumns().addAll(columnList);
      columnSetAnalysisHandler.addIndicator(columnList,allMatchIndicator);
    }
  }
 else {
    tdProvider=(Connection)analysis.getContext().getConnection();
    tdProvider.getSupplierDependency().get(0).getClient().remove(analysis);
    analysis.getContext().setConnection(null);
    analysis.getClientDependency().clear();
  }
  String urlString=analysis.eResource() != null ? analysis.eResource().getURI().toFileString() : PluginConstant.EMPTY_STRING;
  this.updateAnalysisClientDependency();
  ReturnCode saved=new ReturnCode(false);
  IEditorInput editorInput=this.getEditorInput();
  if (editorInput instanceof AnalysisItemEditorInput) {
    AnalysisItemEditorInput analysisInput=(AnalysisItemEditorInput)editorInput;
    TDQAnalysisItem tdqAnalysisItem=analysisInput.getTDQAnalysisItem();
    saved=ElementWriterFactory.getInstance().createAnalysisWrite().save(tdqAnalysisItem);
  }
  if (saved.isOk()) {
    reposObject=RepositoryNodeHelper.recursiveFind(tdProvider).getObject();
    if (tdProvider != null) {
      ElementWriterFactory.getInstance().createDataProviderWriter().save(reposObject.getProperty().getItem());
    }
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + urlString + ""String_Node_Str"");
    }
  }
 else {
    throw new DataprofilerCoreException(DefaultMessagesImpl.getString(""String_Node_Str"",analysis.getName(),urlString,saved.getMessage()));
  }
  treeViewer.setDirty(false);
  dataFilterComp.setDirty(false);
}",0.9425731639977912
138583,"@Override protected void saveAnalysis() throws DataprofilerCoreException {
  IRepositoryViewObject reposObject=null;
  getAnalysisHandler().clearAnalysis();
  List<ModelElement> analysedElements=new ArrayList<ModelElement>();
  anaColumnCompareViewer.setColumnABForMatchingIndicator(rowMatchingIndicatorA,anaColumnCompareViewer.getColumnListA(),anaColumnCompareViewer.getColumnListB());
  anaColumnCompareViewer.setColumnABForMatchingIndicator(rowMatchingIndicatorB,anaColumnCompareViewer.getColumnListB(),anaColumnCompareViewer.getColumnListA());
  Connection tdDataProvider=null;
  for (int i=0; i < anaColumnCompareViewer.getColumnListA().size(); i++) {
    reposObject=anaColumnCompareViewer.getColumnListA().get(i).getObject();
    analysedElements.add(((MetadataColumnRepositoryObject)reposObject).getTdColumn());
  }
  for (int i=0; i < anaColumnCompareViewer.getColumnListB().size(); i++) {
    reposObject=anaColumnCompareViewer.getColumnListB().get(i).getObject();
    analysedElements.add(((MetadataColumnRepositoryObject)reposObject).getTdColumn());
  }
  if (analysedElements.size() > 0) {
    tdDataProvider=ConnectionHelper.getTdDataProvider((TdColumn)analysedElements.get(0));
    analysis.getContext().setConnection(tdDataProvider);
    analysis.getContext().setConnection(tdDataProvider);
    TypedReturnCode<Dependency> rc=DependenciesHandler.getInstance().setDependencyOn(analysis,tdDataProvider);
    if (!rc.isOk()) {
      log.info(""String_Node_Str"" + analysis.getFileName());
    }
  }
 else {
    analysis.getContext().setConnection(null);
    analysis.getClientDependency().clear();
  }
  AnalysisBuilder anaBuilder=new AnalysisBuilder();
  anaBuilder.setAnalysis(this.analysis);
  if (anaColumnCompareViewer.getCheckComputeButton().getSelection()) {
    analysis.getParameters().getDeactivatedIndicators().add(rowMatchingIndicatorB);
  }
 else {
    analysis.getParameters().getDeactivatedIndicators().clear();
  }
  anaBuilder.addElementsToAnalyze(analysedElements.toArray(new ModelElement[analysedElements.size()]),new Indicator[]{rowMatchingIndicatorA,rowMatchingIndicatorB});
  this.updateAnalysisClientDependency();
  ReturnCode saved=new ReturnCode(false);
  IEditorInput editorInput=this.getEditorInput();
  if (editorInput instanceof AnalysisItemEditorInput) {
    AnalysisItemEditorInput analysisInput=(AnalysisItemEditorInput)editorInput;
    TDQAnalysisItem tdqAnalysisItem=analysisInput.getTDQAnalysisItem();
    saved=ElementWriterFactory.getInstance().createAnalysisWrite().save(tdqAnalysisItem);
  }
  if (saved.isOk()) {
    if (reposObject != null) {
      ElementWriterFactory.getInstance().createDataProviderWriter().save(reposObject.getProperty().getItem());
    }
    log.info(""String_Node_Str"" + analysis.getFileName());
  }
}","@Override protected void saveAnalysis() throws DataprofilerCoreException {
  IRepositoryViewObject reposObject=null;
  getAnalysisHandler().clearAnalysis();
  List<ModelElement> analysedElements=new ArrayList<ModelElement>();
  anaColumnCompareViewer.setColumnABForMatchingIndicator(rowMatchingIndicatorA,anaColumnCompareViewer.getColumnListA(),anaColumnCompareViewer.getColumnListB());
  anaColumnCompareViewer.setColumnABForMatchingIndicator(rowMatchingIndicatorB,anaColumnCompareViewer.getColumnListB(),anaColumnCompareViewer.getColumnListA());
  Connection tdDataProvider=null;
  for (int i=0; i < anaColumnCompareViewer.getColumnListA().size(); i++) {
    reposObject=anaColumnCompareViewer.getColumnListA().get(i).getObject();
    analysedElements.add(((MetadataColumnRepositoryObject)reposObject).getTdColumn());
  }
  for (int i=0; i < anaColumnCompareViewer.getColumnListB().size(); i++) {
    reposObject=anaColumnCompareViewer.getColumnListB().get(i).getObject();
    analysedElements.add(((MetadataColumnRepositoryObject)reposObject).getTdColumn());
  }
  if (analysedElements.size() > 0) {
    tdDataProvider=ConnectionHelper.getTdDataProvider((TdColumn)analysedElements.get(0));
    analysis.getContext().setConnection(tdDataProvider);
    analysis.getContext().setConnection(tdDataProvider);
    TypedReturnCode<Dependency> rc=DependenciesHandler.getInstance().setDependencyOn(analysis,tdDataProvider);
    if (!rc.isOk()) {
      log.info(""String_Node_Str"" + analysis.getFileName());
    }
  }
 else {
    tdDataProvider=(Connection)analysis.getContext().getConnection();
    tdDataProvider.getSupplierDependency().get(0).getClient().remove(analysis);
    analysis.getContext().setConnection(null);
    analysis.getClientDependency().clear();
  }
  AnalysisBuilder anaBuilder=new AnalysisBuilder();
  anaBuilder.setAnalysis(this.analysis);
  if (anaColumnCompareViewer.getCheckComputeButton().getSelection()) {
    analysis.getParameters().getDeactivatedIndicators().add(rowMatchingIndicatorB);
  }
 else {
    analysis.getParameters().getDeactivatedIndicators().clear();
  }
  anaBuilder.addElementsToAnalyze(analysedElements.toArray(new ModelElement[analysedElements.size()]),new Indicator[]{rowMatchingIndicatorA,rowMatchingIndicatorB});
  this.updateAnalysisClientDependency();
  ReturnCode saved=new ReturnCode(false);
  IEditorInput editorInput=this.getEditorInput();
  if (editorInput instanceof AnalysisItemEditorInput) {
    AnalysisItemEditorInput analysisInput=(AnalysisItemEditorInput)editorInput;
    TDQAnalysisItem tdqAnalysisItem=analysisInput.getTDQAnalysisItem();
    saved=ElementWriterFactory.getInstance().createAnalysisWrite().save(tdqAnalysisItem);
  }
  if (saved.isOk()) {
    reposObject=RepositoryNodeHelper.recursiveFind(tdDataProvider).getObject();
    if (reposObject != null) {
      ElementWriterFactory.getInstance().createDataProviderWriter().save(reposObject.getProperty().getItem());
    }
    log.info(""String_Node_Str"" + analysis.getFileName());
  }
}",0.9325259515570934
138584,"@Override public void saveAnalysis() throws DataprofilerCoreException {
  IRepositoryViewObject reposObject=null;
  analysisHandler.clearAnalysis();
  TableIndicator[] tableIndicators=treeViewer.getTableIndicator();
  Connection tdProvider=null;
  Analysis analysis=analysisHandler.getAnalysis();
  analysis.getParameters().setExecutionLanguage(ExecutionLanguage.get(execLang));
  if (tableIndicators != null && tableIndicators.length != 0) {
    tdProvider=ConnectionHelper.getDataProvider(tableIndicators[0].getColumnSet());
    if (tdProvider.eIsProxy()) {
      tdProvider=(Connection)EObjectHelper.resolveObject(tdProvider);
    }
    analysis.getContext().setConnection(tdProvider);
    for (    TableIndicator tableIndicator : tableIndicators) {
      analysisHandler.addIndicator(tableIndicator.getColumnSet(),tableIndicator.getIndicators());
    }
  }
 else {
    analysis.getContext().setConnection(null);
    analysis.getClientDependency().clear();
  }
  analysisHandler.setStringDataFilter(dataFilterComp.getDataFilterString());
  String urlString=analysis.eResource() != null ? analysis.eResource().getURI().toFileString() : PluginConstant.EMPTY_STRING;
  this.updateAnalysisClientDependency();
  ReturnCode saved=new ReturnCode(false);
  IEditorInput editorInput=this.getEditorInput();
  if (editorInput instanceof AnalysisItemEditorInput) {
    AnalysisItemEditorInput analysisInput=(AnalysisItemEditorInput)editorInput;
    TDQAnalysisItem tdqAnalysisItem=analysisInput.getTDQAnalysisItem();
    saved=ElementWriterFactory.getInstance().createAnalysisWrite().save(tdqAnalysisItem);
  }
  if (saved.isOk()) {
    reposObject=RepositoryNodeHelper.recursiveFind(tdProvider).getObject();
    if (reposObject != null) {
      ElementWriterFactory.getInstance().createDataProviderWriter().save(reposObject.getProperty().getItem());
    }
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + urlString + ""String_Node_Str"");
    }
  }
 else {
    throw new DataprofilerCoreException(DefaultMessagesImpl.getString(""String_Node_Str"",analysis.getName(),urlString,saved.getMessage()));
  }
  treeViewer.setDirty(false);
  dataFilterComp.setDirty(false);
}","@Override public void saveAnalysis() throws DataprofilerCoreException {
  IRepositoryViewObject reposObject=null;
  analysisHandler.clearAnalysis();
  TableIndicator[] tableIndicators=treeViewer.getTableIndicator();
  Connection tdProvider=null;
  Analysis analysis=analysisHandler.getAnalysis();
  analysis.getParameters().setExecutionLanguage(ExecutionLanguage.get(execLang));
  if (tableIndicators != null && tableIndicators.length != 0) {
    tdProvider=ConnectionHelper.getDataProvider(tableIndicators[0].getColumnSet());
    if (tdProvider.eIsProxy()) {
      tdProvider=(Connection)EObjectHelper.resolveObject(tdProvider);
    }
    analysis.getContext().setConnection(tdProvider);
    for (    TableIndicator tableIndicator : tableIndicators) {
      analysisHandler.addIndicator(tableIndicator.getColumnSet(),tableIndicator.getIndicators());
    }
  }
 else {
    tdProvider=(Connection)analysis.getContext().getConnection();
    tdProvider.getSupplierDependency().get(0).getClient().remove(analysis);
    analysis.getContext().setConnection(null);
    analysis.getClientDependency().clear();
  }
  analysisHandler.setStringDataFilter(dataFilterComp.getDataFilterString());
  String urlString=analysis.eResource() != null ? analysis.eResource().getURI().toFileString() : PluginConstant.EMPTY_STRING;
  this.updateAnalysisClientDependency();
  ReturnCode saved=new ReturnCode(false);
  IEditorInput editorInput=this.getEditorInput();
  if (editorInput instanceof AnalysisItemEditorInput) {
    AnalysisItemEditorInput analysisInput=(AnalysisItemEditorInput)editorInput;
    TDQAnalysisItem tdqAnalysisItem=analysisInput.getTDQAnalysisItem();
    saved=ElementWriterFactory.getInstance().createAnalysisWrite().save(tdqAnalysisItem);
  }
  if (saved.isOk()) {
    reposObject=RepositoryNodeHelper.recursiveFind(tdProvider).getObject();
    if (reposObject != null) {
      ElementWriterFactory.getInstance().createDataProviderWriter().save(reposObject.getProperty().getItem());
    }
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + urlString + ""String_Node_Str"");
    }
  }
 else {
    throw new DataprofilerCoreException(DefaultMessagesImpl.getString(""String_Node_Str"",analysis.getName(),urlString,saved.getMessage()));
  }
  treeViewer.setDirty(false);
  dataFilterComp.setDirty(false);
}",0.9683741648106904
138585,"@Override public Image getImage(Object element){
  Image image=null;
  if (element instanceof ItemRecord) {
    ItemRecord record=(ItemRecord)element;
    File file=record.getFile();
    String fileName=file.getName();
    if (file.isDirectory()) {
      image=ImageLib.getImage(ImageLib.FOLDERNODE_IMAGE);
      EResourceConstant constant=resolveResourceConstant(fileName);
      if (constant != null) {
switch (constant) {
case DATA_PROFILING:
          image=ImageLib.getImage(ImageLib.DATA_PROFILING);
        break;
case METADATA:
      image=ImageLib.getImage(ImageLib.METADATA);
    break;
case LIBRARIES:
  image=ImageLib.getImage(ImageLib.LIBRARIES);
break;
case ANALYSIS:
break;
case REPORTS:
break;
case EXCHANGE:
image=ImageLib.getImage(ImageLib.EXCHANGE);
break;
case DB_CONNECTIONS:
case MDM_CONNECTIONS:
image=ImageLib.getImage(ImageLib.CONNECTION);
break;
default :
break;
}
}
}
 else {
if (fileName.endsWith(FactoriesUtil.ANA)) {
image=ImageLib.getImage(ImageLib.ANALYSIS_OBJECT);
}
 else if (fileName.endsWith(FactoriesUtil.REP)) {
image=ImageLib.getImage(ImageLib.REPORT_OBJECT);
}
 else if (fileName.endsWith(FactoriesUtil.PATTERN)) {
image=ImageLib.getImage(ImageLib.PATTERN_REG);
}
 else if (fileName.endsWith(FactoriesUtil.DQRULE)) {
image=ImageLib.getImage(ImageLib.DQ_RULE);
}
 else if (fileName.endsWith(FactoriesUtil.ITEM_EXTENSION)) {
image=ImageLib.getImage(ImageLib.TD_DATAPROVIDER);
}
 else if (fileName.endsWith(FactoriesUtil.DEFINITION)) {
image=ImageLib.getImage(ImageLib.IND_DEFINITION);
}
}
}
return image != null ? image : super.getImage(element);
}","@Override public Image getImage(Object element){
  Image image=null;
  if (element instanceof ItemRecord) {
    ItemRecord record=(ItemRecord)element;
    File file=record.getFile();
    String fileName=file.getName();
    if (file.isDirectory()) {
      image=ImageLib.getImage(ImageLib.FOLDERNODE_IMAGE);
      EResourceConstant constant=resolveResourceConstant(fileName);
      if (constant != null) {
switch (constant) {
case DATA_PROFILING:
          image=ImageLib.getImage(ImageLib.DATA_PROFILING);
        break;
case METADATA:
      image=ImageLib.getImage(ImageLib.METADATA);
    break;
case LIBRARIES:
  image=ImageLib.getImage(ImageLib.LIBRARIES);
break;
case ANALYSIS:
break;
case REPORTS:
break;
case EXCHANGE:
image=ImageLib.getImage(ImageLib.EXCHANGE);
break;
case DB_CONNECTIONS:
case MDM_CONNECTIONS:
image=ImageLib.getImage(ImageLib.CONNECTION);
break;
default :
break;
}
}
}
 else {
if (fileName.endsWith(FactoriesUtil.ANA)) {
image=ImageLib.getImage(ImageLib.ANALYSIS_OBJECT);
}
 else if (fileName.endsWith(FactoriesUtil.REP)) {
image=ImageLib.getImage(ImageLib.REPORT_OBJECT);
}
 else if (fileName.endsWith(FactoriesUtil.PATTERN)) {
image=ImageLib.getImage(ImageLib.PATTERN_REG);
}
 else if (fileName.endsWith(FactoriesUtil.DQRULE)) {
image=ImageLib.getImage(ImageLib.DQ_RULE);
}
 else if (fileName.endsWith(FactoriesUtil.ITEM_EXTENSION)) {
image=ImageLib.getImage(ImageLib.TD_DATAPROVIDER);
}
 else if (fileName.endsWith(FactoriesUtil.DEFINITION)) {
image=ImageLib.getImage(ImageLib.IND_DEFINITION);
}
 else if (fileName.endsWith(FactoriesUtil.SQL)) {
image=ImageLib.getImage(ImageLib.SOURCE_FILE);
}
}
}
return image != null ? image : super.getImage(element);
}",0.969734026291654
138586,"/** 
 * DOC bZhou Comment method ""initialize"".
 */
private void initialize(){
  URI itemURI=URI.createFileURI(file.getAbsolutePath());
  URI propURI=itemURI.trimFileExtension().appendFileExtension(FactoriesUtil.PROPERTIES_EXTENSION);
  elementEName=EElementEName.findENameByExt(itemURI.fileExtension());
  try {
    if (property == null) {
      Resource resource=resourceSet.getResource(propURI,true);
      property=(Property)EcoreUtil.getObjectByType(resource.getContents(),PropertiesPackage.eINSTANCE.getProperty());
    }
    if (element == null && !isJRXml()) {
      Resource resource=resourceSet.getResource(itemURI,true);
      EList<EObject> contents=resource.getContents();
      if (contents != null && !contents.isEmpty()) {
        if (property.getItem() instanceof ConnectionItem) {
          element=((ConnectionItem)property.getItem()).getConnection();
        }
 else {
          EObject object=contents.get(0);
          element=(ModelElement)object;
        }
      }
    }
    computeDependencies();
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"" + getName() + ""String_Node_Str""+ e.getMessage());
  }
}","/** 
 * DOC bZhou Comment method ""initialize"".
 */
private void initialize(){
  URI itemURI=URI.createFileURI(file.getAbsolutePath());
  URI propURI=itemURI.trimFileExtension().appendFileExtension(FactoriesUtil.PROPERTIES_EXTENSION);
  elementEName=EElementEName.findENameByExt(itemURI.fileExtension());
  try {
    if (property == null) {
      Resource resource=resourceSet.getResource(propURI,true);
      property=(Property)EcoreUtil.getObjectByType(resource.getContents(),PropertiesPackage.eINSTANCE.getProperty());
    }
    if (element == null && !isJRXml()) {
      Resource resource=resourceSet.getResource(itemURI,true);
      EList<EObject> contents=resource.getContents();
      if (contents != null && !contents.isEmpty()) {
        if (property.getItem() instanceof ConnectionItem) {
          element=((ConnectionItem)property.getItem()).getConnection();
        }
 else {
          EObject object=contents.get(0);
          element=(ModelElement)object;
        }
      }
    }
    computeDependencies();
  }
 catch (  Exception e) {
    if (!isSQL()) {
      log.error(""String_Node_Str"" + getName() + ""String_Node_Str""+ e.getMessage(),e);
    }
  }
}",0.9869791666666666
138587,"/** 
 * DOC bZhou Comment method ""createItem"".
 * @param element
 * @return
 */
public Item createItem(ModelElement element){
  Item item=null;
  if (ModelElementIdentifier.isAnalysis(element)) {
    item=PropertiesFactory.eINSTANCE.createTDQAnalysisItem();
    ((TDQAnalysisItem)item).setAnalysis((Analysis)element);
  }
 else   if (ModelElementIdentifier.isDQRule(element)) {
    item=PropertiesFactory.eINSTANCE.createTDQBusinessRuleItem();
    ((TDQBusinessRuleItem)item).setDqrule((DQRule)element);
  }
 else   if (ModelElementIdentifier.isDataProvider(element)) {
    if (element instanceof DatabaseConnection) {
      item=org.talend.core.model.properties.PropertiesFactory.eINSTANCE.createDatabaseConnectionItem();
      ((ConnectionItem)item).setConnection((DatabaseConnection)element);
    }
 else     if (element instanceof MDMConnection) {
      item=org.talend.core.model.properties.PropertiesFactory.eINSTANCE.createMDMConnectionItem();
      ((ConnectionItem)item).setConnection((MDMConnection)element);
    }
    ((ConnectionItem)item).setConnection((Connection)element);
  }
 else   if (ModelElementIdentifier.isID(element)) {
    item=PropertiesFactory.eINSTANCE.createTDQIndicatorDefinitionItem();
    ((TDQIndicatorDefinitionItem)item).setIndicatorDefinition((IndicatorDefinition)element);
  }
 else   if (ModelElementIdentifier.isPattern(element)) {
    item=PropertiesFactory.eINSTANCE.createTDQPatternItem();
    ((TDQPatternItem)item).setPattern((Pattern)element);
  }
 else   if (ModelElementIdentifier.isReport(element)) {
    item=PropertiesFactory.eINSTANCE.createTDQReportItem();
    ((TDQReportItem)item).setReport((Report)element);
  }
 else {
    item=org.talend.core.model.properties.PropertiesFactory.eINSTANCE.createTDQItem();
  }
  ItemState itemState=org.talend.core.model.properties.PropertiesFactory.eINSTANCE.createItemState();
  itemState.setDeleted(false);
  item.setState(itemState);
  Resource eResource=element.eResource();
  if (eResource != null) {
    URI uri=eResource.getURI();
    if (item instanceof TDQItem) {
      ((TDQItem)item).setFilename(URI.decode(uri.lastSegment()));
    }
    if (uri.isPlatform()) {
      IPath elementPath=new Path(uri.toPlatformString(true)).removeLastSegments(1);
      IPath typedPath=ResourceManager.getRootProject().getFullPath().append(PropertyHelper.getItemTypedPath(item));
      IPath statePath=elementPath.makeRelativeTo(typedPath);
      itemState.setPath(statePath.toString());
    }
  }
  return item;
}","/** 
 * DOC bZhou Comment method ""createItem"".
 * @param element
 * @return
 */
public Item createItem(ModelElement element){
  Item item=null;
  if (ModelElementIdentifier.isAnalysis(element)) {
    item=PropertiesFactory.eINSTANCE.createTDQAnalysisItem();
    ((TDQAnalysisItem)item).setAnalysis((Analysis)element);
  }
 else   if (ModelElementIdentifier.isDQRule(element)) {
    item=PropertiesFactory.eINSTANCE.createTDQBusinessRuleItem();
    ((TDQBusinessRuleItem)item).setDqrule((DQRule)element);
  }
 else   if (ModelElementIdentifier.isDataProvider(element)) {
    if (element instanceof DatabaseConnection) {
      item=org.talend.core.model.properties.PropertiesFactory.eINSTANCE.createDatabaseConnectionItem();
      ((ConnectionItem)item).setConnection((DatabaseConnection)element);
    }
 else     if (element instanceof MDMConnection) {
      item=org.talend.core.model.properties.PropertiesFactory.eINSTANCE.createMDMConnectionItem();
      ((ConnectionItem)item).setConnection((MDMConnection)element);
    }
    ((ConnectionItem)item).setConnection((Connection)element);
  }
 else   if (ModelElementIdentifier.isID(element)) {
    item=PropertiesFactory.eINSTANCE.createTDQIndicatorDefinitionItem();
    ((TDQIndicatorDefinitionItem)item).setIndicatorDefinition((IndicatorDefinition)element);
  }
 else   if (ModelElementIdentifier.isPattern(element)) {
    item=PropertiesFactory.eINSTANCE.createTDQPatternItem();
    ((TDQPatternItem)item).setPattern((Pattern)element);
  }
 else   if (ModelElementIdentifier.isReport(element)) {
    item=PropertiesFactory.eINSTANCE.createTDQReportItem();
    ((TDQReportItem)item).setReport((Report)element);
  }
 else {
    item=org.talend.core.model.properties.PropertiesFactory.eINSTANCE.createTDQItem();
  }
  ItemState itemState=org.talend.core.model.properties.PropertiesFactory.eINSTANCE.createItemState();
  itemState.setDeleted(false);
  item.setState(itemState);
  if (item instanceof TDQItem) {
    ((TDQItem)item).setFilename(element.getName() + ""String_Node_Str"" + MetadataHelper.getVersion(element)+ PluginConstant.DOT_STRING+ this.getFileExtension());
  }
  Resource eResource=element.eResource();
  if (eResource != null) {
    URI uri=eResource.getURI();
    if (item instanceof TDQItem) {
      ((TDQItem)item).setFilename(URI.decode(uri.lastSegment()));
    }
    if (uri.isPlatform()) {
      IPath elementPath=new Path(uri.toPlatformString(true)).removeLastSegments(1);
      IPath typedPath=ResourceManager.getRootProject().getFullPath().append(PropertyHelper.getItemTypedPath(item));
      IPath statePath=elementPath.makeRelativeTo(typedPath);
      itemState.setPath(statePath.toString());
    }
  }
  return item;
}",0.961864406779661
138588,"/** 
 * DOC klliu Comment method ""copyFileToFolder"".
 * @param inputStream
 * @param fileName
 * @param folder
 * @throws CoreException
 * @throws IOException
 */
private void copyFileToFolder(InputStream inputStream,String fileName,IFolder folder) throws CoreException, IOException {
  if (inputStream == null) {
    return;
  }
  IFile element=folder.getFile(fileName);
  if (!element.exists()) {
    element.create(inputStream,false,null);
    ModelElement modelElement=ModelElementFileFactory.getModelElement(element);
    if (modelElement != null) {
      AElementPersistance writer=ElementWriterFactory.getInstance().create(element.getFileExtension());
      if (writer != null) {
        writer.create(modelElement,folder);
      }
    }
  }
}","/** 
 * DOC klliu Comment method ""copyFileToFolder"".
 * @param inputStream
 * @param fileName
 * @param folder
 * @throws CoreException
 * @throws IOException
 */
private void copyFileToFolder(InputStream inputStream,String fileName,IFolder folder) throws CoreException, IOException {
  if (inputStream == null) {
    return;
  }
  IFile element=folder.getFile(fileName);
  if (!element.exists()) {
    element.create(inputStream,false,null);
    ModelElement modelElement=ModelElementFileFactory.getModelElement(element);
    if (modelElement != null) {
      AElementPersistance writer=ElementWriterFactory.getInstance().create(element.getFileExtension());
      if (writer != null) {
        writer.create(modelElement,folder);
        element.delete(true,null);
      }
    }
  }
}",0.977198697068404
138589,"private List<String> doCollectChildNames(final RepositoryNode node){
  List<String> names=new ArrayList<String>();
  for (  IRepositoryNode sibling : node.getChildren()) {
    names.add((String)sibling.getProperties(EProperties.LABEL));
  }
  return names;
}","private List<String> doCollectChildNames(final RepositoryNode node){
  List<String> names=new ArrayList<String>();
  for (  IRepositoryNode sibling : node.getChildren()) {
    names.add(sibling.getObject().getProperty().getLabel());
  }
  return names;
}",0.8671875
138590,"protected String[] collectSiblingNames(final RepositoryNode node){
  List<String> names=doCollectChildNames(node.getParent());
  names.remove((String)node.getProperties(EProperties.LABEL));
  return names.toArray(new String[names.size()]);
}","protected String[] collectSiblingNames(final RepositoryNode node){
  List<String> names=doCollectChildNames(node.getParent());
  names.remove(node.getObject().getProperty().getLabel());
  return names.toArray(new String[names.size()]);
}",0.6652719665271967
138591,"/** 
 * DOC klliu DBCatalogRepNode constructor comment.
 * @param object
 * @param parent
 * @param type
 */
public DBCatalogRepNode(IRepositoryViewObject object,RepositoryNode parent,ENodeType type){
  super(object,parent,type);
  parentObject=object;
}","/** 
 * DOC klliu DBCatalogRepNode constructor comment.
 * @param object
 * @param parent
 * @param type
 */
public DBCatalogRepNode(IRepositoryViewObject object,RepositoryNode parent,ENodeType type){
  super(object,parent,type);
  parentObject=object;
  schemaChildren=new ArrayList<IRepositoryNode>();
}",0.9087656529516994
138592,"/** 
 * Create SchemaRepositoryNode under CatalogRepositoryNode.
 * @param node parent CatalogRepositoryNode
 * @param metadataCatalog parent CatalogViewObject
 * @param schema the schema should to be added under the catalog
 */
private List<IRepositoryNode> createRepositoryNodeSchema(List<Schema> schemas){
  List<IRepositoryNode> repsNodes=new ArrayList<IRepositoryNode>();
  for (  Schema schema : schemas) {
    MetadataSchemaRepositoryObject metadataSchema=new MetadataSchemaRepositoryObject(((MetadataCatalogRepositoryObject)getObject()).getViewObject(),schema);
    RepositoryNode schemaNode=new DBSchemaRepNode((IRepositoryViewObject)metadataSchema,this,ENodeType.TDQ_REPOSITORY_ELEMENT);
    schemaNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_CON_SCHEMA);
    schemaNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_CON_SCHEMA);
    metadataSchema.setRepositoryNode(schemaNode);
    repsNodes.add(schemaNode);
  }
  return repsNodes;
}","/** 
 * Create SchemaRepositoryNode under CatalogRepositoryNode.
 * @param node parent CatalogRepositoryNode
 * @param metadataCatalog parent CatalogViewObject
 * @param schema the schema should to be added under the catalog
 */
private List<IRepositoryNode> createRepositoryNodeSchema(List<Schema> schemas){
  if (!schemaChildren.isEmpty()) {
    return schemaChildren;
  }
  for (  Schema schema : schemas) {
    MetadataSchemaRepositoryObject metadataSchema=new MetadataSchemaRepositoryObject(((MetadataCatalogRepositoryObject)getObject()).getViewObject(),schema);
    RepositoryNode schemaNode=new DBSchemaRepNode((IRepositoryViewObject)metadataSchema,this,ENodeType.TDQ_REPOSITORY_ELEMENT);
    schemaNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_CON_SCHEMA);
    schemaNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_CON_SCHEMA);
    metadataSchema.setRepositoryNode(schemaNode);
    schemaChildren.add(schemaNode);
  }
  return schemaChildren;
}",0.9137412236710132
138593,"@Override public List<IRepositoryNode> getChildren(){
  List<IRepositoryNode> repsNodes=new ArrayList<IRepositoryNode>();
  List<TdColumn> tdcolumns=new ArrayList<TdColumn>();
  IRepositoryViewObject meataColumnSetObject=this.getObject();
  if (meataColumnSetObject instanceof TdTableRepositoryObject) {
    TdTableRepositoryObject tdTableRepositoryObject=(TdTableRepositoryObject)meataColumnSetObject;
    object=tdTableRepositoryObject.getViewObject();
    tdTable=tdTableRepositoryObject.getTdTable();
    columns=tdTable.getColumns();
  }
 else   if (meataColumnSetObject instanceof TdViewRepositoryObject) {
    TdViewRepositoryObject tdViewRepositoryObject=(TdViewRepositoryObject)meataColumnSetObject;
    object=tdViewRepositoryObject.getViewObject();
    tdView=tdViewRepositoryObject.getTdView();
    columns=tdView.getColumns();
  }
  item=(ConnectionItem)object.getProperty().getItem();
  connection=item.getConnection();
  if (columns.size() <= 0) {
    try {
      if (tdTable != null) {
        tdcolumns=DqRepositoryViewService.getColumns(connection,tdTable,null,true);
      }
 else       if (tdView != null) {
        tdcolumns=DqRepositoryViewService.getColumns(connection,tdView,null,true);
      }
    }
 catch (    Exception e) {
      log.error(e,e);
    }
  }
 else {
    for (    MetadataColumn mec : columns) {
      tdcolumns.add((TdColumn)mec);
    }
  }
  createTdcolumnsNode(tdcolumns,repsNodes);
  return repsNodes;
}","@Override public List<IRepositoryNode> getChildren(){
  if (!children.isEmpty()) {
    return children;
  }
  List<TdColumn> tdcolumns=new ArrayList<TdColumn>();
  IRepositoryViewObject meataColumnSetObject=this.getObject();
  if (meataColumnSetObject instanceof TdTableRepositoryObject) {
    TdTableRepositoryObject tdTableRepositoryObject=(TdTableRepositoryObject)meataColumnSetObject;
    object=tdTableRepositoryObject.getViewObject();
    tdTable=tdTableRepositoryObject.getTdTable();
    columns=tdTable.getColumns();
  }
 else   if (meataColumnSetObject instanceof TdViewRepositoryObject) {
    TdViewRepositoryObject tdViewRepositoryObject=(TdViewRepositoryObject)meataColumnSetObject;
    object=tdViewRepositoryObject.getViewObject();
    tdView=tdViewRepositoryObject.getTdView();
    columns=tdView.getColumns();
  }
  item=(ConnectionItem)object.getProperty().getItem();
  connection=item.getConnection();
  if (columns.size() <= 0) {
    try {
      if (tdTable != null) {
        tdcolumns=DqRepositoryViewService.getColumns(connection,tdTable,null,true);
      }
 else       if (tdView != null) {
        tdcolumns=DqRepositoryViewService.getColumns(connection,tdView,null,true);
      }
    }
 catch (    Exception e) {
      log.error(e,e);
    }
  }
 else {
    for (    MetadataColumn mec : columns) {
      tdcolumns.add((TdColumn)mec);
    }
  }
  createTdcolumnsNode(tdcolumns,children);
  return children;
}",0.9395833333333332
138594,"/** 
 * DOC klliu DBColumnFolderRepNode constructor comment.
 * @param object
 * @param parent
 * @param type
 */
public DBColumnFolderRepNode(IRepositoryViewObject object,RepositoryNode parent,ENodeType type){
  super(object,parent,type);
}","/** 
 * DOC klliu DBColumnFolderRepNode constructor comment.
 * @param object
 * @param parent
 * @param type
 */
public DBColumnFolderRepNode(IRepositoryViewObject object,RepositoryNode parent,ENodeType type){
  super(object,parent,type);
  children=new ArrayList<IRepositoryNode>();
}",0.9146110056925996
138595,"/** 
 * DOC klliu FolderRepNode constructor comment.
 * @param object
 * @param parent
 * @param type
 */
public DBTableFolderRepNode(IRepositoryViewObject object,RepositoryNode parent,ENodeType type){
  super(object,parent,type);
}","/** 
 * DOC klliu FolderRepNode constructor comment.
 * @param object
 * @param parent
 * @param type
 */
public DBTableFolderRepNode(IRepositoryViewObject object,RepositoryNode parent,ENodeType type){
  super(object,parent,type);
  children=new ArrayList<IRepositoryNode>();
}",0.911591355599214
138596,"@Override public List<IRepositoryNode> getChildren(){
  List<IRepositoryNode> repsNodes=new ArrayList<IRepositoryNode>();
  IRepositoryViewObject object=this.getParent().getObject();
  createRepositoryNodeTableFolderNode(repsNodes,object);
  return repsNodes;
}","@Override public List<IRepositoryNode> getChildren(){
  if (!children.isEmpty()) {
    return children;
  }
  IRepositoryViewObject object=this.getParent().getObject();
  createRepositoryNodeTableFolderNode(children,object);
  return children;
}",0.691699604743083
138597,"/** 
 * Create TableFolderNodeRepositoryNode.
 * @param node parent RepositoryNode
 * @param metadataObject parent CatalogViewObject or SchemaViewObject
 */
private void createRepositoryNodeTableFolderNode(List<IRepositoryNode> node,IRepositoryViewObject metadataObject){
  List<TdTable> tables=new ArrayList<TdTable>();
  if (metadataObject instanceof MetadataCatalogRepositoryObject) {
    viewObject=((MetadataCatalogRepositoryObject)metadataObject).getViewObject();
    catalog=((MetadataCatalogRepositoryObject)metadataObject).getCatalog();
    item=(ConnectionItem)viewObject.getProperty().getItem();
    connection=item.getConnection();
  }
 else   if (metadataObject instanceof MetadataSchemaRepositoryObject) {
    viewObject=((MetadataSchemaRepositoryObject)metadataObject).getViewObject();
    schema=((MetadataSchemaRepositoryObject)metadataObject).getSchema();
    item=(ConnectionItem)viewObject.getProperty().getItem();
    connection=item.getConnection();
  }
  EList<ModelElement> ownedElement=null;
  if (catalog != null) {
    ownedElement=catalog.getOwnedElement();
  }
  if (ownedElement != null && ownedElement.size() <= 0) {
    try {
      if (catalog != null) {
        tables=DqRepositoryViewService.getTables(connection,catalog,null,true);
      }
 else       if (schema != null) {
        tables=DqRepositoryViewService.getTables(connection,schema,null,true);
      }
      for (      ModelElement element : ownedElement) {
        if (element instanceof TdTable) {
          TdTable table=(TdTable)element;
          tables.add(table);
        }
      }
    }
 catch (    Exception e) {
      log.error(e,e);
    }
  }
 else {
    if (tables.size() <= 0) {
      try {
        if (catalog != null) {
          tables=DqRepositoryViewService.getTables(connection,catalog,null,true);
        }
 else         if (schema != null) {
          tables=DqRepositoryViewService.getTables(connection,schema,null,true);
        }
      }
 catch (      Exception e) {
        log.error(e,e);
      }
    }
  }
  createTableRepositoryNode(tables,node);
}","/** 
 * Create TableFolderNodeRepositoryNode.
 * @param node parent RepositoryNode
 * @param metadataObject parent CatalogViewObject or SchemaViewObject
 */
private void createRepositoryNodeTableFolderNode(List<IRepositoryNode> node,IRepositoryViewObject metadataObject){
  List<TdTable> tables=new ArrayList<TdTable>();
  try {
    if (metadataObject instanceof MetadataCatalogRepositoryObject) {
      viewObject=((MetadataCatalogRepositoryObject)metadataObject).getViewObject();
      catalog=((MetadataCatalogRepositoryObject)metadataObject).getCatalog();
      tables=PackageHelper.getTables(catalog);
      if (tables.isEmpty()) {
        tables=DqRepositoryViewService.getTables(connection,catalog,null,true);
      }
    }
 else {
      viewObject=((MetadataSchemaRepositoryObject)metadataObject).getViewObject();
      schema=((MetadataSchemaRepositoryObject)metadataObject).getSchema();
      tables=PackageHelper.getTables(schema);
      if (tables.isEmpty()) {
        tables=DqRepositoryViewService.getTables(connection,schema,null,true);
      }
    }
  }
 catch (  Exception e) {
    log.error(e,e);
  }
  createTableRepositoryNode(tables,node);
}",0.5030940594059405
138598,"/** 
 * DOC zshen Comment method ""initProxyRepository"".
 */
public boolean initProxyRepository(){
  Project project=null;
  RepositoryContext repositoryContext=(RepositoryContext)org.talend.core.runtime.CoreRuntimePlugin.getInstance().getContext().getProperty(Context.REPOSITORY_CONTEXT_KEY);
  if (repositoryContext != null) {
    project=repositoryContext.getProject();
    User user=repositoryContext.getUser();
    ReponsitoryContextBridge.initialized(project.getEmfProject(),user);
  }
 else {
    ProxyRepositoryFactory proxyRepository=ProxyRepositoryFactory.getInstance();
    IRepositoryFactory repository=RepositoryFactoryProvider.getRepositoriyById(""String_Node_Str"");
    if (repository == null) {
      log.fatal(""String_Node_Str"");
      return false;
    }
    proxyRepository.setRepositoryFactoryFromProvider(repository);
    try {
      proxyRepository.checkAvailability();
      proxyRepository.initialize();
      XmiResourceManager xmiResourceManager=new XmiResourceManager();
      IProject rootProject=ResourceManager.getRootProject();
      if (rootProject.getFile(FileConstants.LOCAL_PROJECT_FILENAME).exists()) {
        project=new Project(xmiResourceManager.loadProject(rootProject));
      }
 else {
        User user=PropertiesFactoryImpl.eINSTANCE.createUser();
        user.setLogin(""String_Node_Str"");
        user.setPassword(""String_Node_Str"".getBytes());
        String projectName=ResourceManager.getRootProjectName();
        String projectDesc=ResourcesPlugin.getWorkspace().newProjectDescription(projectName).getComment();
        Project projectInfor=ProjectHelper.createProject(projectName,projectDesc,ECodeLanguage.JAVA.getName(),user);
        checkFileName(projectInfor.getLabel(),RepositoryConstants.PROJECT_PATTERN);
        project=proxyRepository.getRepositoryFactoryFromProvider().createProject(projectInfor);
      }
      if (project != null) {
        initRepositoryContext(project);
      }
    }
 catch (    PersistenceException e) {
      ExceptionHandler.process(e);
      return false;
    }
  }
  return true;
}","/** 
 * DOC zshen Comment method ""initProxyRepository"".
 */
public boolean initProxyRepository(){
  Project project=null;
  RepositoryContext repositoryContext=(RepositoryContext)org.talend.core.runtime.CoreRuntimePlugin.getInstance().getContext().getProperty(Context.REPOSITORY_CONTEXT_KEY);
  if (repositoryContext != null) {
    project=repositoryContext.getProject();
    User user=repositoryContext.getUser();
    ReponsitoryContextBridge.initialized(project.getEmfProject(),user);
  }
 else {
    ProxyRepositoryFactory proxyRepository=ProxyRepositoryFactory.getInstance();
    IRepositoryFactory repository=RepositoryFactoryProvider.getRepositoriyById(""String_Node_Str"");
    if (repository == null) {
      log.fatal(""String_Node_Str"");
      return false;
    }
    proxyRepository.setRepositoryFactoryFromProvider(repository);
    try {
      proxyRepository.checkAvailability();
      proxyRepository.initialize();
      XmiResourceManager xmiResourceManager=new XmiResourceManager();
      IProject rootProject=ResourceManager.getRootProject();
      if (rootProject.getFile(FileConstants.LOCAL_PROJECT_FILENAME).exists()) {
        new EMFUtil();
        project=new Project(xmiResourceManager.loadProject(rootProject));
      }
 else {
        User user=PropertiesFactoryImpl.eINSTANCE.createUser();
        user.setLogin(""String_Node_Str"");
        user.setPassword(""String_Node_Str"".getBytes());
        String projectName=ResourceManager.getRootProjectName();
        String projectDesc=ResourcesPlugin.getWorkspace().newProjectDescription(projectName).getComment();
        Project projectInfor=ProjectHelper.createProject(projectName,projectDesc,ECodeLanguage.JAVA.getName(),user);
        checkFileName(projectInfor.getLabel(),RepositoryConstants.PROJECT_PATTERN);
        project=proxyRepository.getRepositoryFactoryFromProvider().createProject(projectInfor);
      }
      if (project != null) {
        initRepositoryContext(project);
      }
    }
 catch (    PersistenceException e) {
      ExceptionHandler.process(e);
      return false;
    }
  }
  return true;
}",0.9944698244770378
138599,"public static final Connection getTdDataProvider(ModelElementIndicator indicator){
  Item connItem=indicator.getModelElementRepositoryNode().getObject().getProperty().getItem();
  if (connItem instanceof ConnectionItem) {
    return ((ConnectionItem)connItem).getConnection();
  }
  return null;
}","public static final Connection getTdDataProvider(ModelElementIndicator indicator){
  Property property=indicator.getModelElementRepositoryNode().getObject().getProperty();
  if (property != null && property.getItem() instanceof ConnectionItem) {
    return ((ConnectionItem)property.getItem()).getConnection();
  }
  return null;
}",0.821656050955414
138600,"public String[] getAvailableLanguages(){
  String[] languages={ECodeLanguage.JAVA.getName(),ECodeLanguage.PERL.getName()};
  return languages;
}","public String[] getAvailableLanguages(){
  String[] languages;
  if (GlobalServiceRegister.getDefault().isServiceRegistered(ICorePerlService.class)) {
    languages=new String[]{ECodeLanguage.JAVA.getName(),ECodeLanguage.PERL.getName()};
  }
 else {
    languages=new String[]{ECodeLanguage.JAVA.getName()};
  }
  return languages;
}",0.5324947589098532
138601,"@Override public void handleUnload(Resource toBeUnloadedResource){
  for (  EObject eObject : toBeUnloadedResource.getContents()) {
    if (eObject instanceof DatabaseConnection) {
    }
 else     if (eObject instanceof MDMConnection) {
      if (xmiResourceManager != null) {
        try {
          xmiResourceManager.saveResource(toBeUnloadedResource);
        }
 catch (        PersistenceException e) {
          log.error(e,e);
        }
      }
    }
  }
  super.handleUnload(toBeUnloadedResource);
}","@Override public void handleUnload(Resource toBeUnloadedResource){
  for (  EObject eObject : toBeUnloadedResource.getContents()) {
    if (eObject instanceof DatabaseConnection) {
    }
 else     if (eObject instanceof MDMConnection) {
    }
  }
  super.handleUnload(toBeUnloadedResource);
}",0.7309136420525657
138602,"/** 
 * DOC bZhou Comment method ""iteratedProperties"".Move the method from DeleteObjectsAction.java to this class(-qiongli).
 * @param obj
 * @param propList
 * @throws Exception
 */
public void getPropertiesByObject(Object obj,Set<Property> propList) throws Exception {
  if (obj instanceof IFile) {
    IFile file=(IFile)obj;
    Property property=PropertyHelper.getProperty(file);
    if (property == null) {
      property=PropertyHelper.createTDQItemProperty();
      property.setLabel(file.getName());
      ((TDQItem)property.getItem()).setFilename(file.getFullPath().toString());
    }
    if (!property.getItem().getState().isDeleted()) {
      propList.add(property);
    }
  }
 else   if (obj instanceof IFolder) {
    IFolder folder=(IFolder)obj;
    IPath path=folder.getFullPath();
    List<IRepositoryViewObject> conList=null;
    if (ResourceManager.getConnectionFolder().getFullPath().isPrefixOf(path)) {
      path=path.makeRelativeTo(ResourceManager.getConnectionFolder().getFullPath());
      conList=ProxyRepositoryViewObject.fetchRepositoryViewObjectsByFolder(true,ERepositoryObjectType.METADATA_CONNECTIONS,path,true);
    }
 else     if (ResourceManager.getMDMConnectionFolder().getFullPath().isPrefixOf(path)) {
      path=path.makeRelativeTo(ResourceManager.getMDMConnectionFolder().getFullPath());
      conList=ProxyRepositoryViewObject.fetchRepositoryViewObjectsByFolder(true,ERepositoryObjectType.METADATA_MDMCONNECTION,path,true);
    }
    if (conList != null) {
      for (      IRepositoryViewObject repViewObj : conList) {
        Property prop=repViewObj.getProperty();
        if (!prop.getItem().getState().isDeleted())         propList.add(prop);
      }
    }
 else {
      if (!existChildFolder(propList,folder)) {
        Property property=PropertyHelper.createFolderItemProperty();
        property.getItem().getState().setPath(folder.getFullPath().toOSString());
        propList.add(property);
      }
      for (      IResource rersource : folder.members()) {
        getPropertiesByObject(rersource,propList);
      }
    }
  }
 else   if (obj instanceof IRepositoryViewObject) {
    propList.add(((IRepositoryViewObject)obj).getProperty());
  }
 else   if (obj instanceof DQRecycleBinNode) {
    Object o=((DQRecycleBinNode)obj).getObject();
    if (o instanceof Property) {
      propList.add((Property)o);
    }
 else {
      String pathStr=o.toString();
      IPath path=new Path(pathStr).removeFirstSegments(1);
      Property property=PropertyHelper.createFolderItemProperty();
      property.getItem().getState().setPath(path.toOSString());
      propList.add(property);
    }
  }
}","/** 
 * DOC bZhou Comment method ""iteratedProperties"".Move the method from DeleteObjectsAction.java to this class(-qiongli).
 * @param obj
 * @param propList
 * @throws Exception
 */
public void getPropertiesByObject(Object obj,Set<Property> propList) throws Exception {
  if (obj instanceof IFile) {
    IFile file=(IFile)obj;
    Property property=PropertyHelper.getProperty(file);
    if (property == null) {
      property=PropertyHelper.createTDQItemProperty();
      property.setLabel(file.getName());
      ((TDQItem)property.getItem()).setFilename(file.getFullPath().toString());
    }
    if (!property.getItem().getState().isDeleted()) {
      propList.add(property);
    }
  }
 else   if (obj instanceof IFolder) {
    IFolder folder=(IFolder)obj;
    IPath path=folder.getFullPath();
    List<IRepositoryViewObject> conList=null;
    boolean hasChild=true;
    if (folder.members().length == 0) {
      hasChild=false;
    }
    if (hasChild && ResourceManager.getConnectionFolder().getFullPath().isPrefixOf(path)) {
      path=path.makeRelativeTo(ResourceManager.getConnectionFolder().getFullPath());
      conList=ProxyRepositoryViewObject.fetchRepositoryViewObjectsByFolder(true,ERepositoryObjectType.METADATA_CONNECTIONS,path,true);
    }
 else     if (hasChild && ResourceManager.getMDMConnectionFolder().getFullPath().isPrefixOf(path)) {
      path=path.makeRelativeTo(ResourceManager.getMDMConnectionFolder().getFullPath());
      conList=ProxyRepositoryViewObject.fetchRepositoryViewObjectsByFolder(true,ERepositoryObjectType.METADATA_MDMCONNECTION,path,true);
    }
    if (conList != null) {
      for (      IRepositoryViewObject repViewObj : conList) {
        Property prop=repViewObj.getProperty();
        if (!prop.getItem().getState().isDeleted())         propList.add(prop);
      }
    }
 else {
      if (!existChildFolder(propList,folder)) {
        Property property=PropertyHelper.createFolderItemProperty();
        property.getItem().getState().setPath(folder.getFullPath().toOSString());
        propList.add(property);
      }
      for (      IResource rersource : folder.members()) {
        getPropertiesByObject(rersource,propList);
      }
    }
  }
 else   if (obj instanceof IRepositoryViewObject) {
    propList.add(((IRepositoryViewObject)obj).getProperty());
  }
 else   if (obj instanceof DQRecycleBinNode) {
    Object o=((DQRecycleBinNode)obj).getObject();
    if (o instanceof Property) {
      propList.add((Property)o);
    }
 else {
      String pathStr=o.toString();
      IPath path=new Path(pathStr).removeFirstSegments(1);
      Property property=PropertyHelper.createFolderItemProperty();
      property.getItem().getState().setPath(path.toOSString());
      propList.add(property);
    }
  }
}",0.9764422185123354
138603,"@Override public IndicatorParameters getParameters(){
  parameters=super.getParameters();
  if (parameters == null) {
    parameters=IndicatorsFactory.eINSTANCE.createIndicatorParameters();
  }
  TextParameters textParameters=parameters.getTextParameter();
  if (textParameters == null) {
    textParameters=IndicatorsFactory.eINSTANCE.createTextParameters();
  }
  textParameters.setUseNulls(false);
  textParameters.setUseBlank(true);
  parameters.setTextParameter(textParameters);
  return parameters;
}","@Override public IndicatorParameters getParameters(){
  if (parameters != null) {
    TextParameters textParameters=parameters.getTextParameter();
    if (textParameters == null) {
      textParameters=IndicatorsFactory.eINSTANCE.createTextParameters();
    }
    textParameters.setUseNulls(false);
    textParameters.setUseBlank(true);
    parameters.setTextParameter(textParameters);
  }
  return parameters;
}",0.3856209150326797
138604,"@Override public IndicatorParameters getParameters(){
  parameters=super.getParameters();
  if (parameters == null) {
    parameters=IndicatorsFactory.eINSTANCE.createIndicatorParameters();
  }
  TextParameters textParameters=parameters.getTextParameter();
  if (textParameters == null) {
    textParameters=IndicatorsFactory.eINSTANCE.createTextParameters();
  }
  textParameters.setUseNulls(true);
  textParameters.setUseBlank(true);
  parameters.setTextParameter(textParameters);
  return parameters;
}","@Override public IndicatorParameters getParameters(){
  if (parameters != null) {
    TextParameters textParameters=parameters.getTextParameter();
    if (textParameters == null) {
      textParameters=IndicatorsFactory.eINSTANCE.createTextParameters();
    }
    textParameters.setUseNulls(true);
    textParameters.setUseBlank(true);
    parameters.setTextParameter(textParameters);
  }
  return parameters;
}",0.3864628820960699
138605,"@Override public IndicatorParameters getParameters(){
  parameters=super.getParameters();
  if (parameters == null) {
    parameters=IndicatorsFactory.eINSTANCE.createIndicatorParameters();
  }
  TextParameters textParameters=parameters.getTextParameter();
  if (textParameters == null) {
    textParameters=IndicatorsFactory.eINSTANCE.createTextParameters();
  }
  textParameters.setUseNulls(true);
  textParameters.setUseBlank(false);
  parameters.setTextParameter(textParameters);
  return parameters;
}","@Override public IndicatorParameters getParameters(){
  if (parameters != null) {
    TextParameters textParameters=parameters.getTextParameter();
    if (textParameters == null) {
      textParameters=IndicatorsFactory.eINSTANCE.createTextParameters();
    }
    textParameters.setUseNulls(true);
    textParameters.setUseBlank(false);
    parameters.setTextParameter(textParameters);
  }
  return parameters;
}",0.3856209150326797
138606,"@Override public IndicatorParameters getParameters(){
  parameters=super.getParameters();
  if (parameters == null) {
    parameters=IndicatorsFactory.eINSTANCE.createIndicatorParameters();
  }
  TextParameters textParameters=parameters.getTextParameter();
  if (textParameters == null) {
    textParameters=IndicatorsFactory.eINSTANCE.createTextParameters();
  }
  textParameters.setUseNulls(false);
  textParameters.setUseBlank(true);
  parameters.setTextParameter(textParameters);
  return parameters;
}","@Override public IndicatorParameters getParameters(){
  if (parameters != null) {
    TextParameters textParameters=parameters.getTextParameter();
    if (textParameters == null) {
      textParameters=IndicatorsFactory.eINSTANCE.createTextParameters();
    }
    textParameters.setUseNulls(false);
    textParameters.setUseBlank(true);
    parameters.setTextParameter(textParameters);
  }
  return parameters;
}",0.3856209150326797
138607,"@Override public IndicatorParameters getParameters(){
  parameters=super.getParameters();
  if (parameters == null) {
    parameters=IndicatorsFactory.eINSTANCE.createIndicatorParameters();
  }
  TextParameters textParameters=parameters.getTextParameter();
  if (textParameters == null) {
    textParameters=IndicatorsFactory.eINSTANCE.createTextParameters();
  }
  textParameters.setUseNulls(true);
  textParameters.setUseBlank(true);
  parameters.setTextParameter(textParameters);
  return parameters;
}","@Override public IndicatorParameters getParameters(){
  if (parameters != null) {
    TextParameters textParameters=parameters.getTextParameter();
    if (textParameters == null) {
      textParameters=IndicatorsFactory.eINSTANCE.createTextParameters();
    }
    textParameters.setUseNulls(true);
    textParameters.setUseBlank(true);
    parameters.setTextParameter(textParameters);
  }
  return parameters;
}",0.3864628820960699
138608,"@Override public IndicatorParameters getParameters(){
  parameters=super.getParameters();
  if (parameters == null) {
    parameters=IndicatorsFactory.eINSTANCE.createIndicatorParameters();
  }
  TextParameters textParameters=parameters.getTextParameter();
  if (textParameters == null) {
    textParameters=IndicatorsFactory.eINSTANCE.createTextParameters();
  }
  textParameters.setUseNulls(true);
  textParameters.setUseBlank(false);
  parameters.setTextParameter(textParameters);
  return parameters;
}","@Override public IndicatorParameters getParameters(){
  if (parameters != null) {
    TextParameters textParameters=parameters.getTextParameter();
    if (textParameters == null) {
      textParameters=IndicatorsFactory.eINSTANCE.createTextParameters();
    }
    textParameters.setUseNulls(true);
    textParameters.setUseBlank(false);
    parameters.setTextParameter(textParameters);
  }
  return parameters;
}",0.3856209150326797
138609,"@Override public IndicatorParameters getParameters(){
  parameters=super.getParameters();
  if (parameters == null) {
    parameters=IndicatorsFactory.eINSTANCE.createIndicatorParameters();
  }
  TextParameters textParameters=parameters.getTextParameter();
  if (textParameters == null) {
    textParameters=IndicatorsFactory.eINSTANCE.createTextParameters();
  }
  textParameters.setUseNulls(false);
  textParameters.setUseBlank(true);
  parameters.setTextParameter(textParameters);
  return parameters;
}","@Override public IndicatorParameters getParameters(){
  if (parameters != null) {
    TextParameters textParameters=parameters.getTextParameter();
    if (textParameters == null) {
      textParameters=IndicatorsFactory.eINSTANCE.createTextParameters();
    }
    textParameters.setUseNulls(false);
    textParameters.setUseBlank(true);
    parameters.setTextParameter(textParameters);
  }
  return parameters;
}",0.3856209150326797
138610,"@Override public IndicatorParameters getParameters(){
  parameters=super.getParameters();
  if (parameters == null) {
    parameters=IndicatorsFactory.eINSTANCE.createIndicatorParameters();
  }
  TextParameters textParameters=parameters.getTextParameter();
  if (textParameters == null) {
    textParameters=IndicatorsFactory.eINSTANCE.createTextParameters();
  }
  textParameters.setUseNulls(true);
  textParameters.setUseBlank(true);
  parameters.setTextParameter(textParameters);
  return parameters;
}","@Override public IndicatorParameters getParameters(){
  if (parameters != null) {
    TextParameters textParameters=parameters.getTextParameter();
    if (textParameters == null) {
      textParameters=IndicatorsFactory.eINSTANCE.createTextParameters();
    }
    textParameters.setUseNulls(true);
    textParameters.setUseBlank(true);
    parameters.setTextParameter(textParameters);
  }
  return parameters;
}",0.3864628820960699
138611,"@Override public IndicatorParameters getParameters(){
  parameters=super.getParameters();
  if (parameters == null) {
    parameters=IndicatorsFactory.eINSTANCE.createIndicatorParameters();
  }
  TextParameters textParameters=parameters.getTextParameter();
  if (textParameters == null) {
    textParameters=IndicatorsFactory.eINSTANCE.createTextParameters();
  }
  textParameters.setUseNulls(true);
  textParameters.setUseBlank(false);
  parameters.setTextParameter(textParameters);
  return parameters;
}","@Override public IndicatorParameters getParameters(){
  if (parameters != null) {
    TextParameters textParameters=parameters.getTextParameter();
    if (textParameters == null) {
      textParameters=IndicatorsFactory.eINSTANCE.createTextParameters();
    }
    textParameters.setUseNulls(true);
    textParameters.setUseBlank(false);
    parameters.setTextParameter(textParameters);
  }
  return parameters;
}",0.3856209150326797
138612,"@Override public IStatus runInWorkspace(IProgressMonitor monitor) throws CoreException {
  monitor.beginTask(DefaultMessagesImpl.getString(""String_Node_Str"",analysis.getName()),IProgressMonitor.UNKNOWN);
  Display.getDefault().asyncExec(new Runnable(){
    public void run(){
      if (listener != null) {
        listener.fireRuningItemChanged(false);
      }
    }
  }
);
  ReturnCode executed=null;
  AnalysisExecutorThread aet=new AnalysisExecutorThread(analysis,monitor);
  new Thread(aet).start();
  while (true) {
    if (aet.getExecuted() != null) {
      executed=aet.getExecuted();
      break;
    }
    if (monitor.isCanceled()) {
      executed=new ReturnCode(DefaultMessagesImpl.getString(""String_Node_Str""),false);
      break;
    }
  }
  aet=null;
  monitor.done();
  Display.getDefault().asyncExec(new Runnable(){
    public void run(){
      if (listener != null) {
        listener.fireRuningItemChanged(true);
      }
    }
  }
);
  displayResultStatus(executed);
  return Status.OK_STATUS;
}","@Override public IStatus runInWorkspace(IProgressMonitor monitor) throws CoreException {
  monitor.beginTask(DefaultMessagesImpl.getString(""String_Node_Str"",analysis.getName()),IProgressMonitor.UNKNOWN);
  Display.getDefault().asyncExec(new Runnable(){
    public void run(){
      if (listener != null) {
        listener.fireRuningItemChanged(false);
      }
    }
  }
);
  ReturnCode executed=null;
  AnalysisExecutorThread aet=new AnalysisExecutorThread(analysis,monitor);
  new Thread(aet).start();
  while (true) {
    if (aet.getExecuted() != null) {
      executed=aet.getExecuted();
      break;
    }
    if (monitor.isCanceled()) {
      executed=new ReturnCode(DefaultMessagesImpl.getString(""String_Node_Str""),false);
      break;
    }
  }
  aet=null;
  monitor.done();
  Display.getDefault().asyncExec(new Runnable(){
    public void run(){
      if (listener != null) {
        listener.fireRuningItemChanged(true);
      }
      CorePlugin.getDefault().refreshDQView();
    }
  }
);
  displayResultStatus(executed);
  return Status.OK_STATUS;
}",0.9773275446213218
138613,"@Override protected void createFormContent(IManagedForm managedForm){
  this.form=managedForm.getForm();
  Composite body=form.getBody();
  body.setLayout(new GridLayout());
  final SashForm sForm=new SashForm(body,SWT.NULL);
  sForm.setLayoutData(new GridData(GridData.FILL_BOTH));
  topComp=toolkit.createComposite(sForm);
  topComp.setLayoutData(new GridData(GridData.FILL_BOTH));
  topComp.setLayout(new GridLayout());
  metadataSection=creatMetadataSection(form,topComp);
  metadataSection.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  metadataSection.setDescription(DefaultMessagesImpl.getString(""String_Node_Str""));
  form.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  createAnalysisColumnsSection(form,topComp);
  createIndicatorsSection(form,topComp);
  createDataFilterSection(form,topComp);
  Composite previewComp=toolkit.createComposite(sForm);
  previewComp.setLayoutData(new GridData(GridData.FILL_BOTH));
  previewComp.setLayout(new GridLayout());
  previewComp.addControlListener(new ControlAdapter(){
    @Override public void controlResized(    ControlEvent e){
      super.controlResized(e);
      sForm.redraw();
      form.reflow(true);
    }
  }
);
  createPreviewSection(form,previewComp);
}","@Override protected void createFormContent(IManagedForm managedForm){
  this.form=managedForm.getForm();
  Composite body=form.getBody();
  body.setLayout(new GridLayout());
  final SashForm sForm=new SashForm(body,SWT.NULL);
  sForm.setLayoutData(new GridData(GridData.FILL_BOTH));
  topComp=toolkit.createComposite(sForm);
  topComp.setLayoutData(new GridData(GridData.FILL_BOTH));
  topComp.setLayout(new GridLayout());
  metadataSection=creatMetadataSection(form,topComp);
  metadataSection.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  metadataSection.setDescription(DefaultMessagesImpl.getString(""String_Node_Str""));
  form.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  createAnalysisColumnsSection(form,topComp);
  createIndicatorsSection(form,topComp);
  createDataFilterSection(form,topComp);
  createAnalysisParamSection(form,topComp);
  Composite previewComp=toolkit.createComposite(sForm);
  previewComp.setLayoutData(new GridData(GridData.FILL_BOTH));
  previewComp.setLayout(new GridLayout());
  previewComp.addControlListener(new ControlAdapter(){
    @Override public void controlResized(    ControlEvent e){
      super.controlResized(e);
      sForm.redraw();
      form.reflow(true);
    }
  }
);
  createPreviewSection(form,previewComp);
}",0.9826361483820047
138614,"private Section createTableSectionPart(Composite parentComp,String title,SimpleStatIndicator ssIndicator){
  Section columnSetElementSection=this.createSection(form,parentComp,title,null);
  Composite sectionTableComp=toolkit.createComposite(columnSetElementSection);
  sectionTableComp.setLayoutData(new GridData(GridData.FILL_BOTH));
  sectionTableComp.setLayout(new GridLayout());
  Button filterDataBt=new Button(sectionTableComp,SWT.NONE);
  filterDataBt.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  filterDataBt.setLayoutData(new GridData(SWT.CENTER,SWT.CENTER,false,false));
  filterDataBt.addMouseListener(new MouseListener(){
    public void mouseDoubleClick(    MouseEvent e){
    }
    public void mouseDown(    MouseEvent e){
      List<Indicator> indicatorsList=masterPage.analysis.getResults().getIndicators();
      SelectPatternsWizard wizard=new SelectPatternsWizard(indicatorsList);
      wizard.setOldTableInputList(ColumnSetResultPage.this.tableFilterResult);
      WizardDialog dialog=new WizardDialog(null,wizard);
      dialog.setPageSize(300,400);
      wizard.setContainer(dialog);
      wizard.setWindowTitle(DefaultMessagesImpl.getString(""String_Node_Str""));
      if (WizardDialog.OK == dialog.open()) {
        ColumnSetResultPage.this.tableFilterResult=((SelectPatternsWizard)wizard).getPatternSelectPage().getTableInputList();
        columnsElementViewer.refresh();
      }
    }
    public void mouseUp(    MouseEvent e){
    }
  }
);
  columnsElementViewer=new TableViewer(sectionTableComp,SWT.MULTI | SWT.FULL_SELECTION | SWT.BORDER);
  Table table=columnsElementViewer.getTable();
  table.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true));
  List<String> tableColumnNames=ssIndicator.getColumnHeaders();
  for (  String tableColumnName : tableColumnNames) {
    final TableColumn columnHeader=new TableColumn(table,SWT.NONE);
    columnHeader.setText(tableColumnName);
  }
  table.setLinesVisible(true);
  table.setHeaderVisible(true);
  TableSectionViewerProvider provider=new TableSectionViewerProvider();
  List<Object[]> tableRows=ssIndicator.getListRows();
  columnsElementViewer.setContentProvider(provider);
  columnsElementViewer.setLabelProvider(provider);
  columnsElementViewer.setInput(tableRows);
  for (int i=0; i < tableColumnNames.size(); i++) {
    table.getColumn(i).pack();
  }
  columnSetElementSection.setClient(sectionTableComp);
  columnSetElementSection.setExpanded(false);
  setupTableGridDataLimitedSize(table,tableRows.size());
  addColumnSorters(columnsElementViewer,table.getColumns(),this.buildSorter(tableRows));
  return columnSetElementSection;
}","private Section createTableSectionPart(Composite parentComp,String title,SimpleStatIndicator ssIndicator){
  Section columnSetElementSection=this.createSection(form,parentComp,title,null);
  Composite sectionTableComp=toolkit.createComposite(columnSetElementSection);
  if (ssIndicator.isStoreData()) {
    columnSetElementSection.setExpanded(true);
    columnSetElementSection.setEnabled(true);
    sectionTableComp.setLayoutData(new GridData(GridData.FILL_BOTH));
    sectionTableComp.setLayout(new GridLayout());
    Button filterDataBt=new Button(sectionTableComp,SWT.NONE);
    filterDataBt.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    filterDataBt.setLayoutData(new GridData(SWT.CENTER,SWT.CENTER,false,false));
    filterDataBt.addMouseListener(new MouseListener(){
      public void mouseDoubleClick(      MouseEvent e){
      }
      public void mouseDown(      MouseEvent e){
        List<Indicator> indicatorsList=masterPage.analysis.getResults().getIndicators();
        SelectPatternsWizard wizard=new SelectPatternsWizard(indicatorsList);
        wizard.setOldTableInputList(ColumnSetResultPage.this.tableFilterResult);
        WizardDialog dialog=new WizardDialog(null,wizard);
        dialog.setPageSize(300,400);
        wizard.setContainer(dialog);
        wizard.setWindowTitle(DefaultMessagesImpl.getString(""String_Node_Str""));
        if (WizardDialog.OK == dialog.open()) {
          ColumnSetResultPage.this.tableFilterResult=((SelectPatternsWizard)wizard).getPatternSelectPage().getTableInputList();
          columnsElementViewer.refresh();
        }
      }
      public void mouseUp(      MouseEvent e){
      }
    }
);
    columnsElementViewer=new TableViewer(sectionTableComp,SWT.MULTI | SWT.FULL_SELECTION | SWT.BORDER);
    Table table=columnsElementViewer.getTable();
    table.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true));
    List<String> tableColumnNames=ssIndicator.getColumnHeaders();
    for (    String tableColumnName : tableColumnNames) {
      final TableColumn columnHeader=new TableColumn(table,SWT.NONE);
      columnHeader.setText(tableColumnName);
    }
    table.setLinesVisible(true);
    table.setHeaderVisible(true);
    TableSectionViewerProvider provider=new TableSectionViewerProvider();
    List<Object[]> tableRows=ssIndicator.getListRows();
    columnsElementViewer.setContentProvider(provider);
    columnsElementViewer.setLabelProvider(provider);
    columnsElementViewer.setInput(tableRows);
    for (int i=0; i < tableColumnNames.size(); i++) {
      table.getColumn(i).pack();
    }
    columnSetElementSection.setClient(sectionTableComp);
    columnSetElementSection.setExpanded(false);
    setupTableGridDataLimitedSize(table,tableRows.size());
    addColumnSorters(columnsElementViewer,table.getColumns(),this.buildSorter(tableRows));
  }
 else {
    columnSetElementSection.setExpanded(false);
    columnSetElementSection.setEnabled(false);
  }
  return columnSetElementSection;
}",0.9093499554764024
138615,"protected ReturnCode executeSqlQuery(String sqlStatement) throws SQLException {
  ReturnCode ok=new ReturnCode(true);
  Set<String> columns=getAnalyzedElements();
  List<String> columnlist=sortColumnName(columns,sqlStatement);
  if (columnlist.isEmpty()) {
    ok.setReturnCode(Messages.getString(""String_Node_Str""),false);
    return ok;
  }
  Map<String,String> columnlistMap=buildColumnListMap(columnlist);
  Statement statement=null;
  statement=connection.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_UPDATABLE);
  statement.setFetchSize(fetchSize);
  if (continueRun()) {
    if (log.isInfoEnabled()) {
      log.info(""String_Node_Str"" + sqlStatement);
    }
    statement.execute(sqlStatement);
  }
  ResultSet resultSet=statement.getResultSet();
  if (resultSet == null) {
    String mess=""String_Node_Str"" + sqlStatement;
    log.warn(mess);
    ok.setReturnCode(mess,false);
    return ok;
  }
  AnalysisResult anaResult=analysis.getResults();
  EMap<Indicator,AnalyzedDataSet> indicToRowMap=anaResult.getIndicToRowMap();
  indicToRowMap.clear();
  int recordIncrement=0;
  int rowNum=0;
  label:   while (resultSet.next()) {
    for (int i=0; i < columnlist.size(); i++) {
      String col=columnlist.get(i);
      List<Indicator> indicators=getIndicators(col);
      col=columnlistMap.get(columnlist.get(i));
      Object object=resultSet.getObject(col);
      if (object != null && !(object instanceof String) && object.toString().indexOf(""String_Node_Str"") > -1) {
        object=resultSet.getTimestamp(col);
      }
      for (      Indicator indicator : indicators) {
        if (!continueRun()) {
          break label;
        }
        indicator.handle(object);
        AnalyzedDataSet analyzedDataSet=indicToRowMap.get(indicator);
        if (analyzedDataSet == null) {
          analyzedDataSet=AnalysisFactory.eINSTANCE.createAnalyzedDataSet();
          indicToRowMap.put(indicator,analyzedDataSet);
          analyzedDataSet.setDataCount(analysis.getParameters().getMaxNumberRows());
          analyzedDataSet.setRecordSize(0);
        }
        if (analysis.getParameters().isStoreData() && indicator.mustStoreRow()) {
          List<Object[]> valueObjectList=initDataSet(indicator,indicToRowMap,object);
          recordIncrement=valueObjectList.size();
          for (int j=0; j < resultSet.getMetaData().getColumnCount(); j++) {
            List<TdColumn> columnList=TableHelper.getColumns(SwitchHelpers.TABLE_SWITCH.doSwitch(indicator.getAnalyzedElement().eContainer()));
            String newcol=columnList.get(j).getName();
            Object newobject=resultSet.getObject(newcol);
            if (newobject != null && !(newobject instanceof String) && newobject.toString().indexOf(""String_Node_Str"") > -1) {
              newobject=resultSet.getTimestamp(newcol);
            }
            if (recordIncrement < analysis.getParameters().getMaxNumberRows()) {
              if (recordIncrement < valueObjectList.size()) {
                valueObjectList.get(recordIncrement)[j]=newobject;
              }
 else {
                Object[] valueObject=new Object[resultSet.getMetaData().getColumnCount()];
                valueObject[j]=newobject;
                valueObjectList.add(valueObject);
              }
            }
          }
        }
 else         if (indicator instanceof UniqueCountIndicator && analysis.getResults().getIndicToRowMap().get(indicator).getData() != null) {
          List<Object[]> removeValueObjectList=analysis.getResults().getIndicToRowMap().get(indicator).getData();
          List<TdColumn> columnElementList=TableHelper.getColumns(SwitchHelpers.TABLE_SWITCH.doSwitch(indicator.getAnalyzedElement().eContainer()));
          int offsetting=columnElementList.indexOf(indicator.getAnalyzedElement());
          for (          Object[] dataObject : removeValueObjectList) {
            if (dataObject[offsetting].equals(object)) {
              removeValueObjectList.remove(dataObject);
              break;
            }
          }
        }
      }
    }
    rowNum++;
  }
  resultSet.close();
  connection.close();
  return ok;
}","protected ReturnCode executeSqlQuery(String sqlStatement) throws SQLException {
  ReturnCode ok=new ReturnCode(true);
  Set<String> columns=getAnalyzedElements();
  List<String> columnlist=sortColumnName(columns,sqlStatement);
  if (columnlist.isEmpty()) {
    ok.setReturnCode(Messages.getString(""String_Node_Str""),false);
    return ok;
  }
  Map<String,String> columnlistMap=buildColumnListMap(columnlist);
  Statement statement=null;
  statement=connection.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_UPDATABLE);
  statement.setFetchSize(fetchSize);
  if (continueRun()) {
    if (log.isInfoEnabled()) {
      log.info(""String_Node_Str"" + sqlStatement);
    }
    statement.execute(sqlStatement);
  }
  ResultSet resultSet=statement.getResultSet();
  if (resultSet == null) {
    String mess=""String_Node_Str"" + sqlStatement;
    log.warn(mess);
    ok.setReturnCode(mess,false);
    return ok;
  }
  AnalysisResult anaResult=analysis.getResults();
  EMap<Indicator,AnalyzedDataSet> indicToRowMap=anaResult.getIndicToRowMap();
  indicToRowMap.clear();
  int recordIncrement=0;
  label:   while (resultSet.next()) {
    for (int i=0; i < columnlist.size(); i++) {
      String col=columnlist.get(i);
      List<Indicator> indicators=getIndicators(col);
      col=columnlistMap.get(columnlist.get(i));
      Object object=resultSet.getObject(col);
      if (object != null && !(object instanceof String) && object.toString().indexOf(""String_Node_Str"") > -1) {
        object=resultSet.getTimestamp(col);
      }
      for (      Indicator indicator : indicators) {
        if (!continueRun()) {
          break label;
        }
        indicator.handle(object);
        AnalyzedDataSet analyzedDataSet=indicToRowMap.get(indicator);
        if (analyzedDataSet == null) {
          analyzedDataSet=AnalysisFactory.eINSTANCE.createAnalyzedDataSet();
          indicToRowMap.put(indicator,analyzedDataSet);
          analyzedDataSet.setDataCount(analysis.getParameters().getMaxNumberRows());
          analyzedDataSet.setRecordSize(0);
        }
        if (analysis.getParameters().isStoreData() && indicator.mustStoreRow()) {
          List<Object[]> valueObjectList=initDataSet(indicator,indicToRowMap,object);
          recordIncrement=valueObjectList.size();
          for (int j=0; j < resultSet.getMetaData().getColumnCount(); j++) {
            List<TdColumn> columnList=TableHelper.getColumns(SwitchHelpers.TABLE_SWITCH.doSwitch(indicator.getAnalyzedElement().eContainer()));
            String newcol=columnList.get(j).getName();
            Object newobject=resultSet.getObject(newcol);
            if (newobject != null && !(newobject instanceof String) && newobject.toString().indexOf(""String_Node_Str"") > -1) {
              newobject=resultSet.getTimestamp(newcol);
            }
            if (recordIncrement < analysis.getParameters().getMaxNumberRows()) {
              if (recordIncrement < valueObjectList.size()) {
                valueObjectList.get(recordIncrement)[j]=newobject;
              }
 else {
                Object[] valueObject=new Object[resultSet.getMetaData().getColumnCount()];
                valueObject[j]=newobject;
                valueObjectList.add(valueObject);
              }
            }
          }
        }
 else         if (indicator instanceof UniqueCountIndicator && analysis.getResults().getIndicToRowMap().get(indicator).getData() != null) {
          List<Object[]> removeValueObjectList=analysis.getResults().getIndicToRowMap().get(indicator).getData();
          List<TdColumn> columnElementList=TableHelper.getColumns(SwitchHelpers.TABLE_SWITCH.doSwitch(indicator.getAnalyzedElement().eContainer()));
          int offsetting=columnElementList.indexOf(indicator.getAnalyzedElement());
          for (          Object[] dataObject : removeValueObjectList) {
            if (dataObject[offsetting].equals(object)) {
              removeValueObjectList.remove(dataObject);
              break;
            }
          }
        }
      }
    }
  }
  resultSet.close();
  connection.close();
  return ok;
}",0.9963459196102314
138616,"/** 
 * DOC bZhou Comment method ""isWithRowCountIndicator"". If have RowCountIndicator in the indicator list, return true, otherwise, return false.
 * @return
 */
protected boolean isWithRowCountIndicator(){
  if (!units.isEmpty()) {
    Indicator indicator=units.get(0).getIndicator();
    ModelElement currentAnalyzedElement=indicator.getAnalyzedElement();
    InternalEObject eIndicator=(InternalEObject)indicator;
    AnalysisResult result=(AnalysisResult)eIndicator.eContainer();
    for (    Indicator indi : result.getIndicators()) {
      ModelElement analyzedElement=indi.getAnalyzedElement();
      if (indi instanceof RowCountIndicator && analyzedElement == currentAnalyzedElement) {
        return true;
      }
    }
  }
  return false;
}","/** 
 * DOC bZhou Comment method ""isWithRowCountIndicator"". If have RowCountIndicator in the indicator list, return true, otherwise, return false.
 * @return
 */
protected boolean isWithRowCountIndicator(){
  if (!units.isEmpty()) {
    Indicator indicator=units.get(0).getIndicator();
    ModelElement currentAnalyzedElement=indicator.getAnalyzedElement();
    InternalEObject eIndicator=(InternalEObject)indicator;
    AnalysisResult result=(AnalysisResult)eIndicator.eContainer();
    for (    Indicator indi : result.getIndicators()) {
      ModelElement analyzedElement=indi.getAnalyzedElement();
      if (analyzedElement == currentAnalyzedElement) {
        if (indi instanceof RowCountIndicator) {
          return true;
        }
 else         if (indi instanceof CountsIndicator) {
          CountsIndicator cindi=(CountsIndicator)indi;
          return cindi.getRowCountIndicator() != null;
        }
      }
    }
  }
  return false;
}",0.8403064230995875
138617,"/** 
 * Create a new database node with the given name
 * @param name
 * @param alias
 */
public DatabaseNode(String name,MetaDataSession session) throws SQLException {
  super(name,session);
  setImageKey(""String_Node_Str"");
  try {
    SQLDatabaseMetaData metadata=_session.getMetaData();
    if (metadata.supportsCatalogs()) {
      _supportsCatalogs=true;
    }
    if (metadata.supportsSchemas()) {
      _supportsSchemas=true;
    }
    _databaseProductName=metadata.getDatabaseProductName();
    try {
      _databaseVersion=""String_Node_Str"" + metadata.getJDBCMetaData().getDatabaseMajorVersion() + ""String_Node_Str""+ metadata.getJDBCMetaData().getDatabaseMinorVersion()+ ""String_Node_Str"";
    }
 catch (    Exception e) {
      SQLExplorerPlugin.error(""String_Node_Str"",e);
      _databaseVersion=""String_Node_Str"";
    }
  }
 catch (  AbstractMethodError e) {
    SQLExplorerPlugin.error(""String_Node_Str"",e);
  }
}","/** 
 * Create a new database node with the given name
 * @param name
 * @param alias
 */
public DatabaseNode(String name,MetaDataSession session) throws SQLException {
  super(name,session);
  setImageKey(""String_Node_Str"");
  try {
    SQLDatabaseMetaData metadata=_session.getMetaData();
    if (metadata.supportsCatalogs()) {
      _supportsCatalogs=true;
    }
    if (metadata.supportsSchemas()) {
      _supportsSchemas=true;
    }
    _databaseProductName=metadata.getDatabaseProductName();
    try {
      _databaseVersion=""String_Node_Str"" + metadata.getJDBCMetaData().getDatabaseMajorVersion() + ""String_Node_Str""+ metadata.getJDBCMetaData().getDatabaseMinorVersion()+ ""String_Node_Str"";
    }
 catch (    Exception e) {
      _databaseVersion=""String_Node_Str"";
    }
  }
 catch (  AbstractMethodError e) {
    SQLExplorerPlugin.error(""String_Node_Str"",e);
  }
}",0.8766666666666667
138618,"/** 
 * DOC bZhou Comment method ""update"".
 * @param oldObject
 * @param newObject
 * @return
 */
protected ModelElement update(ModelElement oldObject,ModelElement newObject){
  newObject.setName(""String_Node_Str"" + newObject.getName());
  String author=ReponsitoryContextBridge.getAuthor();
  if (!StringUtils.isEmpty(author)) {
    MetadataHelper.setAuthor(newObject,author);
  }
  return newObject;
}","/** 
 * DOC bZhou Comment method ""update"".
 * @param oldObject
 * @param newObject
 * @return
 */
protected ModelElement update(ModelElement oldObject,ModelElement newObject){
  newObject.setName(""String_Node_Str"" + newObject.getName());
  String author=ReponsitoryContextBridge.getAuthor();
  if (!StringUtils.isEmpty(author)) {
    MetadataHelper.setAuthor(newObject,author);
  }
  newObject.getClientDependency().addAll(oldObject.getClientDependency());
  return newObject;
}",0.8785471055618616
138619,"public void recomputeIndicators(){
  correlationAnalysisHandler=new ColumnCorrelationAnalysisHandler();
  correlationAnalysisHandler.setAnalysis((Analysis)this.currentModelElement);
  stringDataFilter=correlationAnalysisHandler.getStringDataFilter();
  analyzedColumns=correlationAnalysisHandler.getAnalyzedColumns();
  if (correlationAnalysisHandler.getIndicator() == null) {
    ColumnsetFactory columnsetFactory=ColumnsetFactory.eINSTANCE;
    if (ColumnsetPackage.eINSTANCE.getCountAvgNullIndicator() == columnSetMultiIndicator.eClass()) {
      columnSetMultiIndicator=columnsetFactory.createCountAvgNullIndicator();
      fillSimpleIndicators(columnSetMultiIndicator);
    }
    if (ColumnsetPackage.eINSTANCE.getMinMaxDateIndicator() == columnSetMultiIndicator.eClass()) {
      columnSetMultiIndicator=columnsetFactory.createMinMaxDateIndicator();
    }
    if (ColumnsetPackage.eINSTANCE.getWeakCorrelationIndicator() == columnSetMultiIndicator.eClass()) {
      columnSetMultiIndicator=columnsetFactory.createWeakCorrelationIndicator();
    }
  }
 else {
    columnSetMultiIndicator=(ColumnSetMultiValueIndicator)correlationAnalysisHandler.getIndicator();
  }
  initializeIndicator(columnSetMultiIndicator);
  for (  ModelElement element : analyzedColumns) {
    TdColumn tdColumn=SwitchHelpers.COLUMN_SWITCH.doSwitch(element);
    if (tdColumn == null) {
      continue;
    }
    DataminingType dataminingType=correlationAnalysisHandler.getDatamingType(tdColumn);
    MetadataHelper.setDataminingType(dataminingType == null ? DataminingType.NOMINAL : dataminingType,tdColumn);
  }
}","public void recomputeIndicators(){
  correlationAnalysisHandler=new ColumnCorrelationAnalysisHandler();
  correlationAnalysisHandler.setAnalysis((Analysis)this.currentModelElement);
  stringDataFilter=correlationAnalysisHandler.getStringDataFilter();
  analyzedColumns=correlationAnalysisHandler.getAnalyzedColumns();
  if (correlationAnalysisHandler.getIndicator() == null) {
    ColumnsetFactory columnsetFactory=ColumnsetFactory.eINSTANCE;
    if (ColumnsetPackage.eINSTANCE.getCountAvgNullIndicator() == columnSetMultiIndicator.eClass()) {
      columnSetMultiIndicator=columnsetFactory.createCountAvgNullIndicator();
      fillSimpleIndicators(columnSetMultiIndicator);
    }
    if (ColumnsetPackage.eINSTANCE.getMinMaxDateIndicator() == columnSetMultiIndicator.eClass()) {
      columnSetMultiIndicator=columnsetFactory.createMinMaxDateIndicator();
    }
    if (ColumnsetPackage.eINSTANCE.getWeakCorrelationIndicator() == columnSetMultiIndicator.eClass()) {
      columnSetMultiIndicator=columnsetFactory.createWeakCorrelationIndicator();
    }
  }
 else {
    columnSetMultiIndicator=(ColumnSetMultiValueIndicator)correlationAnalysisHandler.getIndicator();
  }
  initializeIndicator(columnSetMultiIndicator);
  columnSetMultiIndicator.setStoreData(true);
  for (  ModelElement element : analyzedColumns) {
    TdColumn tdColumn=SwitchHelpers.COLUMN_SWITCH.doSwitch(element);
    if (tdColumn == null) {
      continue;
    }
    DataminingType dataminingType=correlationAnalysisHandler.getDatamingType(tdColumn);
    MetadataHelper.setDataminingType(dataminingType == null ? DataminingType.NOMINAL : dataminingType,tdColumn);
  }
}",0.9857761286332716
138620,"public void handleEvent(Event event){
  int columnIndex=getColumnIndex(table,column);
  TableItem[] items=table.getItems();
  int length=""String_Node_Str"".equals(items[items.length - 1].getText(columnIndex)) ? items.length - 1 : items.length;
  for (int i=1; i < length; i++) {
    String value2=items[i].getText(columnIndex);
    for (int j=0; j < i; j++) {
      String value1=items[j].getText(columnIndex);
      boolean isLessThan=true;
      if (StringUtils.isNumeric(value2) && StringUtils.isNumeric(value1)) {
        isLessThan=Long.valueOf(value2).compareTo(Long.valueOf(value1)) < 0;
      }
 else {
        isLessThan=comparator.compare(value2,value1) < 0;
      }
      if ((isAscend && isLessThan) || (!isAscend && !isLessThan)) {
        String[] values=getTableItemText(table,items[i]);
        Object obj=items[i].getData();
        items[i].dispose();
        TableItem item=new TableItem(table,SWT.NONE,j);
        item.setText(values);
        item.setData(obj);
        items=table.getItems();
        break;
      }
    }
  }
  table.setSortColumn(column);
  table.setSortDirection((isAscend ? SWT.UP : SWT.DOWN));
  isAscend=!isAscend;
}","public void handleEvent(Event event){
  int columnIndex=getColumnIndex(table,column);
  TableItem[] items=table.getItems();
  int length=""String_Node_Str"".equals(items[items.length - 1].getText(columnIndex)) ? items.length - 1 : items.length;
  for (int i=1; i < length; i++) {
    String value2=items[i].getText(columnIndex);
    for (int j=0; j < i; j++) {
      String value1=items[j].getText(columnIndex);
      boolean isLessThan=true;
      if (StringUtils.isNumeric(value2) && StringUtils.isNotEmpty(value2) && StringUtils.isNumeric(value1)&& StringUtils.isNotEmpty(value1)) {
        isLessThan=Long.valueOf(value2).compareTo(Long.valueOf(value1)) < 0;
      }
 else {
        isLessThan=comparator.compare(value2,value1) < 0;
      }
      if ((isAscend && isLessThan) || (!isAscend && !isLessThan)) {
        String[] values=getTableItemText(table,items[i]);
        Object obj=items[i].getData();
        items[i].dispose();
        TableItem item=new TableItem(table,SWT.NONE,j);
        item.setText(values);
        item.setData(obj);
        items=table.getItems();
        break;
      }
    }
  }
  table.setSortColumn(column);
  table.setSortDirection((isAscend ? SWT.UP : SWT.DOWN));
  isAscend=!isAscend;
}",0.9668763102725368
138621,"private void addSorter(final Table table,final TableColumn column){
  column.addListener(SWT.Selection,new Listener(){
    boolean isAscend=true;
    Collator comparator=Collator.getInstance(Locale.getDefault());
    public void handleEvent(    Event event){
      int columnIndex=getColumnIndex(table,column);
      TableItem[] items=table.getItems();
      int length=""String_Node_Str"".equals(items[items.length - 1].getText(columnIndex)) ? items.length - 1 : items.length;
      for (int i=1; i < length; i++) {
        String value2=items[i].getText(columnIndex);
        for (int j=0; j < i; j++) {
          String value1=items[j].getText(columnIndex);
          boolean isLessThan=true;
          if (StringUtils.isNumeric(value2) && StringUtils.isNumeric(value1)) {
            isLessThan=Long.valueOf(value2).compareTo(Long.valueOf(value1)) < 0;
          }
 else {
            isLessThan=comparator.compare(value2,value1) < 0;
          }
          if ((isAscend && isLessThan) || (!isAscend && !isLessThan)) {
            String[] values=getTableItemText(table,items[i]);
            Object obj=items[i].getData();
            items[i].dispose();
            TableItem item=new TableItem(table,SWT.NONE,j);
            item.setText(values);
            item.setData(obj);
            items=table.getItems();
            break;
          }
        }
      }
      table.setSortColumn(column);
      table.setSortDirection((isAscend ? SWT.UP : SWT.DOWN));
      isAscend=!isAscend;
    }
  }
);
}","private void addSorter(final Table table,final TableColumn column){
  column.addListener(SWT.Selection,new Listener(){
    boolean isAscend=true;
    Collator comparator=Collator.getInstance(Locale.getDefault());
    public void handleEvent(    Event event){
      int columnIndex=getColumnIndex(table,column);
      TableItem[] items=table.getItems();
      int length=""String_Node_Str"".equals(items[items.length - 1].getText(columnIndex)) ? items.length - 1 : items.length;
      for (int i=1; i < length; i++) {
        String value2=items[i].getText(columnIndex);
        for (int j=0; j < i; j++) {
          String value1=items[j].getText(columnIndex);
          boolean isLessThan=true;
          if (StringUtils.isNumeric(value2) && StringUtils.isNotEmpty(value2) && StringUtils.isNumeric(value1)&& StringUtils.isNotEmpty(value1)) {
            isLessThan=Long.valueOf(value2).compareTo(Long.valueOf(value1)) < 0;
          }
 else {
            isLessThan=comparator.compare(value2,value1) < 0;
          }
          if ((isAscend && isLessThan) || (!isAscend && !isLessThan)) {
            String[] values=getTableItemText(table,items[i]);
            Object obj=items[i].getData();
            items[i].dispose();
            TableItem item=new TableItem(table,SWT.NONE,j);
            item.setText(values);
            item.setData(obj);
            items=table.getItems();
            break;
          }
        }
      }
      table.setSortColumn(column);
      table.setSortDirection((isAscend ? SWT.UP : SWT.DOWN));
      isAscend=!isAscend;
    }
  }
);
}",0.9743256418589537
138622,"protected ReturnCode executeSqlQuery(String sqlStatement) throws SQLException {
  ReturnCode ok=new ReturnCode(true);
  Set<String> columns=getAnalyzedElements();
  List<String> columnlist=sortColumnName(columns,sqlStatement);
  if (columnlist.isEmpty()) {
    ok.setReturnCode(Messages.getString(""String_Node_Str""),false);
    return ok;
  }
  Map<String,String> columnlistMap=buildColumnListMap(columnlist);
  Statement statement=null;
  statement=connection.createStatement();
  statement.setFetchSize(fetchSize);
  if (continueRun()) {
    if (log.isInfoEnabled()) {
      log.info(""String_Node_Str"" + sqlStatement);
    }
    statement.execute(sqlStatement);
  }
  ResultSet resultSet=statement.getResultSet();
  if (resultSet == null) {
    String mess=""String_Node_Str"" + sqlStatement;
    log.warn(mess);
    ok.setReturnCode(mess,false);
    return ok;
  }
  AnalysisResult anaResult=analysis.getResults();
  EMap<Indicator,AnalyzedDataSet> indicToRowMap=anaResult.getIndicToRowMap();
  indicToRowMap.clear();
  int recordIncrement=0;
  label:   while (resultSet.next()) {
    for (int i=0; i < columnlist.size(); i++) {
      String col=columnlist.get(i);
      List<Indicator> indicators=getIndicators(col);
      col=columnlistMap.get(columnlist.get(i));
      Object object=resultSet.getObject(col);
      if (object != null && !(object instanceof String) && object.toString().indexOf(""String_Node_Str"") > -1) {
        object=resultSet.getTimestamp(col);
      }
      for (      Indicator indicator : indicators) {
        if (!continueRun()) {
          break label;
        }
        indicator.handle(object);
        AnalyzedDataSet analyzedDataSet=indicToRowMap.get(indicator);
        if (analyzedDataSet == null) {
          analyzedDataSet=AnalysisFactory.eINSTANCE.createAnalyzedDataSet();
          indicToRowMap.put(indicator,analyzedDataSet);
          analyzedDataSet.setDataCount(analysis.getParameters().getMaxNumberRows());
          analyzedDataSet.setRecordSize(0);
        }
        if (analysis.getParameters().isStoreData() && indicator.mustStoreRow()) {
          List<Object[]> valueObjectList=initDataSet(indicator,indicToRowMap,object);
          recordIncrement=valueObjectList.size();
          for (int j=0; j < resultSet.getMetaData().getColumnCount(); j++) {
            List<TdColumn> columnList=TableHelper.getColumns(SwitchHelpers.TABLE_SWITCH.doSwitch(indicator.getAnalyzedElement().eContainer()));
            String newcol=columnList.get(j).getName();
            Object newobject=resultSet.getObject(newcol);
            if (newobject != null && !(newobject instanceof String) && newobject.toString().indexOf(""String_Node_Str"") > -1) {
              newobject=resultSet.getTimestamp(newcol);
            }
            if (recordIncrement < analysis.getParameters().getMaxNumberRows()) {
              if (recordIncrement < valueObjectList.size()) {
                valueObjectList.get(recordIncrement)[j]=newobject;
              }
 else {
                Object[] valueObject=new Object[resultSet.getMetaData().getColumnCount()];
                valueObject[j]=newobject;
                valueObjectList.add(valueObject);
              }
            }
          }
        }
 else         if (indicator instanceof UniqueCountIndicator && analysis.getResults().getIndicToRowMap().get(indicator).getData() != null) {
          List<Object[]> removeValueObjectList=analysis.getResults().getIndicToRowMap().get(indicator).getData();
          List<TdColumn> columnElementList=TableHelper.getColumns(SwitchHelpers.TABLE_SWITCH.doSwitch(indicator.getAnalyzedElement().eContainer()));
          int offsetting=columnElementList.indexOf(indicator.getAnalyzedElement());
          for (          Object[] dataObject : removeValueObjectList) {
            if (dataObject[offsetting].equals(object)) {
              removeValueObjectList.remove(dataObject);
              break;
            }
          }
        }
      }
    }
  }
  resultSet.close();
  connection.close();
  return ok;
}","protected ReturnCode executeSqlQuery(String sqlStatement) throws SQLException {
  ReturnCode ok=new ReturnCode(true);
  Set<String> columns=getAnalyzedElements();
  List<String> columnlist=sortColumnName(columns,sqlStatement);
  if (columnlist.isEmpty()) {
    ok.setReturnCode(Messages.getString(""String_Node_Str""),false);
    return ok;
  }
  Map<String,String> columnlistMap=buildColumnListMap(columnlist);
  Statement statement=null;
  statement=connection.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_UPDATABLE);
  statement.setFetchSize(fetchSize);
  if (continueRun()) {
    if (log.isInfoEnabled()) {
      log.info(""String_Node_Str"" + sqlStatement);
    }
    statement.execute(sqlStatement);
  }
  ResultSet resultSet=statement.getResultSet();
  if (resultSet == null) {
    String mess=""String_Node_Str"" + sqlStatement;
    log.warn(mess);
    ok.setReturnCode(mess,false);
    return ok;
  }
  AnalysisResult anaResult=analysis.getResults();
  EMap<Indicator,AnalyzedDataSet> indicToRowMap=anaResult.getIndicToRowMap();
  indicToRowMap.clear();
  int recordIncrement=0;
  int rowNum=0;
  label:   while (resultSet.next()) {
    for (int i=0; i < columnlist.size(); i++) {
      String col=columnlist.get(i);
      List<Indicator> indicators=getIndicators(col);
      col=columnlistMap.get(columnlist.get(i));
      Object object=resultSet.getObject(col);
      if (object != null && !(object instanceof String) && object.toString().indexOf(""String_Node_Str"") > -1) {
        object=resultSet.getTimestamp(col);
      }
      for (      Indicator indicator : indicators) {
        if (!continueRun()) {
          break label;
        }
        indicator.handle(object);
        AnalyzedDataSet analyzedDataSet=indicToRowMap.get(indicator);
        if (analyzedDataSet == null) {
          analyzedDataSet=AnalysisFactory.eINSTANCE.createAnalyzedDataSet();
          indicToRowMap.put(indicator,analyzedDataSet);
          analyzedDataSet.setDataCount(analysis.getParameters().getMaxNumberRows());
          analyzedDataSet.setRecordSize(0);
        }
        if (analysis.getParameters().isStoreData() && indicator.mustStoreRow()) {
          List<Object[]> valueObjectList=initDataSet(indicator,indicToRowMap,object);
          recordIncrement=valueObjectList.size();
          for (int j=0; j < resultSet.getMetaData().getColumnCount(); j++) {
            List<TdColumn> columnList=TableHelper.getColumns(SwitchHelpers.TABLE_SWITCH.doSwitch(indicator.getAnalyzedElement().eContainer()));
            String newcol=columnList.get(j).getName();
            Object newobject=resultSet.getObject(newcol);
            if (newobject != null && !(newobject instanceof String) && newobject.toString().indexOf(""String_Node_Str"") > -1) {
              newobject=resultSet.getTimestamp(newcol);
            }
            if (recordIncrement < analysis.getParameters().getMaxNumberRows()) {
              if (recordIncrement < valueObjectList.size()) {
                valueObjectList.get(recordIncrement)[j]=newobject;
              }
 else {
                Object[] valueObject=new Object[resultSet.getMetaData().getColumnCount()];
                valueObject[j]=newobject;
                valueObjectList.add(valueObject);
              }
            }
          }
        }
 else         if (indicator instanceof UniqueCountIndicator && analysis.getResults().getIndicToRowMap().get(indicator).getData() != null) {
          List<Object[]> removeValueObjectList=analysis.getResults().getIndicToRowMap().get(indicator).getData();
          List<TdColumn> columnElementList=TableHelper.getColumns(SwitchHelpers.TABLE_SWITCH.doSwitch(indicator.getAnalyzedElement().eContainer()));
          int offsetting=columnElementList.indexOf(indicator.getAnalyzedElement());
          for (          Object[] dataObject : removeValueObjectList) {
            if (dataObject[offsetting].equals(object)) {
              removeValueObjectList.remove(dataObject);
              break;
            }
          }
        }
      }
    }
    rowNum++;
  }
  resultSet.close();
  connection.close();
  return ok;
}",0.988957055214724
138623,"@Override public Expression getInstantiatedExpressions(String language){
  if (""String_Node_Str"".equals(language)) {
    language=""String_Node_Str"";
  }
  return super.getInstantiatedExpressions(language);
}","@Override public Expression getInstantiatedExpressions(String language){
  return super.getInstantiatedExpressions(language);
}",0.7604790419161677
138624,"protected void createPart(Composite parent,String dbLiteral,final DBConnectionParameter connectionParam){
  if (dbLiteral.trim().equals(""String_Node_Str"")) {
    GridLayout layout=new GridLayout();
    layout.numColumns=3;
    parent.setLayout(layout);
    Label labelJar=new Label(parent,SWT.NONE);
    labelJar.setText(""String_Node_Str"");
    final Text jarText=new Text(parent,SWT.BORDER | SWT.SINGLE);
    jarText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    jarText.setEditable(false);
    jarText.addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
        connectionParam.setDriverPath(jarText.getText());
      }
    }
);
    final Button selectJar=new Button(parent,SWT.PUSH);
    final StringBuilder filenameAll=new StringBuilder();
    selectJar.setText(""String_Node_Str"");
    selectJar.addSelectionListener(new SelectionAdapter(){
      public void widgetSelected(      SelectionEvent event){
        FileDialog dialog=new FileDialog(Display.getCurrent().getActiveShell());
        String filename=dialog.open();
        if (filename != null) {
          filenameAll.append(filename + ""String_Node_Str"");
          jarText.setText(filenameAll.toString());
          int length=filenameAll.length();
          filenameAll.delete(0,length);
        }
 else {
          jarText.setText(""String_Node_Str"");
        }
      }
    }
);
    Label labelDriver=new Label(parent,SWT.NONE);
    labelDriver.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    final Combo comboDriver=new Combo(parent,SWT.READ_ONLY);
    comboDriver.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    comboDriver.addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      SelectionEvent e){
        String driverClassName=comboDriver.getText();
        connectionParam.setDriverClassName(driverClassName);
        if (abstractWizardPage instanceof DatabaseWizardPage) {
          ((DatabaseWizardPage)abstractWizardPage).updateLoginPassEnable(!SupportDBUrlType.SQLITE3DEFAULTURL.getDbDriver().equals(driverClassName));
        }
      }
    }
);
    Button listDriverBtn=new Button(parent,SWT.PUSH);
    listDriverBtn.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    listDriverBtn.addSelectionListener(new SelectionAdapter(){
      public void widgetSelected(      SelectionEvent e){
        comboDriver.removeAll();
        for (        String stringToFile : jarText.getText().trim().split(""String_Node_Str"")) {
          File file=new File(stringToFile);
          if (file != null) {
            try {
              MyURLClassLoader cl=new MyURLClassLoader(file.toURL());
              Class[] classes=cl.getAssignableClasses(Driver.class);
              for (int i=0; i < classes.length; ++i) {
                comboDriver.add(classes[i].getName());
              }
            }
 catch (            MalformedURLException ex) {
              log.error(ex,ex);
            }
catch (            IOException ex) {
              log.error(ex,ex);
            }
          }
        }
        if (comboDriver.getItemCount() > 0) {
          String driverClassName=comboDriver.getItem(0);
          comboDriver.setText(driverClassName);
          connectionParam.setDriverClassName(driverClassName);
          if (abstractWizardPage instanceof DatabaseWizardPage) {
            ((DatabaseWizardPage)abstractWizardPage).updateButtonState();
            ((DatabaseWizardPage)abstractWizardPage).updateLoginPassEnable(!SupportDBUrlType.SQLITE3DEFAULTURL.getDbDriver().equals(driverClassName));
          }
        }
      }
    }
);
    Label labelUrl=new Label(parent,SWT.NONE);
    labelUrl.setText(""String_Node_Str"");
    final Text urlText2=new Text(parent,SWT.BORDER | SWT.SINGLE);
    urlText2.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    urlText2.addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
        connectionParam.setJdbcUrl(urlText2.getText());
        if (abstractWizardPage instanceof DatabaseWizardPage) {
          ((DatabaseWizardPage)abstractWizardPage).updateButtonState();
        }
      }
    }
);
  }
 else   if (dbLiteral.trim().equals(SupportDBUrlType.SQLITE3DEFAULTURL.getLanguage())) {
    GridLayout layout=new GridLayout();
    layout.numColumns=3;
    parent.setLayout(layout);
    Label labelfile=new Label(parent,SWT.NONE);
    final Text fileText=new Text(parent,SWT.BORDER | SWT.SINGLE);
    final Button selectFile=new Button(parent,SWT.PUSH);
    Label labelUrl=new Label(parent,SWT.NONE);
    final Text urlText3=new Text(parent,SWT.BORDER | SWT.SINGLE);
    labelfile.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    fileText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    fileText.setEditable(true);
    fileText.addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
        connectionParam.setFilePath(fileText.getText());
      }
    }
);
    selectFile.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    labelUrl.setText(""String_Node_Str"");
    urlText3.setEditable(false);
    urlText3.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    setConnectionURL(SupportDBUrlStore.getInstance().getDBUrl(dbType.getDBKey(),""String_Node_Str"",""String_Node_Str"",fileText.getText(),""String_Node_Str"",""String_Node_Str""));
    urlText3.setText(getConnectionURL());
    urlText3.setEditable(false);
    urlText3.addKeyListener(new KeyAdapter(){
      public void keyReleased(      KeyEvent e){
        setConnectionURL(urlText3.getText());
      }
    }
);
    urlText3.addFocusListener(new FocusAdapter(){
      public void focusGained(      FocusEvent e){
        urlText3.setEditable(true);
      }
      public void focusLost(      FocusEvent e){
        urlText3.setEditable(false);
      }
    }
);
    selectFile.addSelectionListener(new SelectionAdapter(){
      public void widgetSelected(      SelectionEvent event){
        FileDialog dialog=new FileDialog(Display.getCurrent().getActiveShell());
        String filename=dialog.open();
        if (filename != null) {
          fileText.setText(filename);
        }
 else {
          fileText.setText(""String_Node_Str"");
        }
        String url=SupportDBUrlStore.getInstance().getDBUrl(dbType.getDBKey(),""String_Node_Str"",""String_Node_Str"",fileText.getText(),""String_Node_Str"",""String_Node_Str"");
        if (log.isInfoEnabled()) {
          log.info(""String_Node_Str"" + url);
        }
        setConnectionURL(url);
        urlText3.setText(getConnectionURL());
      }
    }
);
  }
 else   if (dbLiteral.trim().equals(SupportDBUrlType.MDM.getLanguage())) {
    GridLayout layout=new GridLayout();
    layout.numColumns=2;
    parent.setLayout(layout);
    boolean compositeEnable=!(dbType.getHostName() == null);
    Label label=new Label(parent,SWT.NONE);
    label.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    final Text hostNameText=new Text(parent,SWT.BORDER | SWT.SINGLE);
    hostNameText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    if (compositeEnable) {
      hostNameText.setText(dbType.getHostName());
      connectionParam.setHost(dbType.getHostName());
    }
    label.setEnabled(compositeEnable);
    hostNameText.setEnabled(compositeEnable);
    compositeEnable=!(dbType.getPort() == null);
    label=new Label(parent,SWT.NONE);
    label.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    final Text portText=new Text(parent,SWT.BORDER | SWT.SINGLE);
    portText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    if (compositeEnable) {
      portText.setText(dbType.getPort());
      connectionParam.setPort(dbType.getPort());
    }
    label.setEnabled(compositeEnable);
    portText.setEnabled(compositeEnable);
    compositeEnable=false;
    label=new Label(parent,SWT.NONE);
    label.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    final Text databaseNameText=new Text(parent,SWT.BORDER | SWT.SINGLE);
    databaseNameText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    databaseNameText.setText(dbType.getDBName());
    label.setEnabled(compositeEnable);
    databaseNameText.setEnabled(compositeEnable);
    label=new Label(parent,SWT.NONE);
    label.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    dataFilterCombo=new MultipleSelectionCombo(parent,SWT.READ_ONLY);
    dataFilterCombo.setEnabled(false);
    dataFilterCombo.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    dataFilterCombo.addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
        connectionParam.getParameters().setProperty(TaggedValueHelper.DATA_FILTER,((Text)e.getSource()).getText());
      }
    }
);
    label=new Label(parent,SWT.NONE);
    label.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    final Text universeText=new Text(parent,SWT.BORDER | SWT.SINGLE);
    universeText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    universeText.setText(""String_Node_Str"");
    label=new Label(parent,SWT.NONE);
    label.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    urlText=new Text(parent,SWT.BORDER | SWT.SINGLE);
    urlText.setEditable(false);
    urlText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    urlText.addFocusListener(new FocusAdapter(){
      public void focusGained(      FocusEvent e){
        urlText.setEditable(true);
      }
      public void focusLost(      FocusEvent e){
        urlText.setEditable(false);
      }
    }
);
    urlText.setText(getConnectionURL());
    urlText.addKeyListener(new KeyAdapter(){
      public void keyReleased(      KeyEvent e){
        setConnectionURL(urlText.getText());
      }
    }
);
    universeText.addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent event){
        setConnectionURL(SupportDBUrlStore.getInstance().getDBUrl(dbType.getDBKey(),hostNameText.getText(),portText.getText(),databaseNameText.getText(),universeText.getText(),""String_Node_Str""));
        urlText.setText(getConnectionURL());
        connectionParam.getParameters().setProperty(TaggedValueHelper.UNIVERSE,universeText.getText());
      }
    }
);
    hostNameText.addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent event){
        String host=hostNameText.getText();
        setConnectionURL(SupportDBUrlStore.getInstance().getDBUrl(dbType.getDBKey(),host,portText.getText(),databaseNameText.getText(),universeText.getText(),""String_Node_Str""));
        urlText.setText(getConnectionURL());
        connectionParam.setHost(host);
      }
    }
);
    portText.addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent event){
        String port=portText.getText();
        setConnectionURL(SupportDBUrlStore.getInstance().getDBUrl(dbType.getDBKey(),hostNameText.getText(),port,databaseNameText.getText(),universeText.getText(),""String_Node_Str""));
        urlText.setText(getConnectionURL());
        connectionParam.setPort(port);
      }
    }
);
    portText.addKeyListener(new KeyAdapter(){
      public void keyReleased(      KeyEvent e){
        Long portValue=null;
        try {
          portValue=new Long(portText.getText());
        }
 catch (        NumberFormatException e1) {
        }
        if (portValue == null || portValue <= 0) {
          portText.setText(PluginConstant.EMPTY_STRING);
        }
      }
    }
);
  }
 else {
    GridLayout layout=new GridLayout();
    layout.numColumns=2;
    parent.setLayout(layout);
    boolean compositeEnable=!(dbType.getHostName() == null);
    Label label=new Label(parent,SWT.NONE);
    label.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    final Text hostNameText=new Text(parent,SWT.BORDER | SWT.SINGLE);
    hostNameText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    if (compositeEnable) {
      hostNameText.setText(dbType.getHostName());
      connectionParam.setHost(dbType.getHostName());
    }
    label.setEnabled(compositeEnable);
    hostNameText.setEnabled(compositeEnable);
    compositeEnable=!(dbType.getPort() == null);
    label=new Label(parent,SWT.NONE);
    label.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    final Text portText=new Text(parent,SWT.BORDER | SWT.SINGLE);
    portText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    if (compositeEnable) {
      portText.setText(dbType.getPort());
      connectionParam.setPort(dbType.getPort());
    }
    label.setEnabled(compositeEnable);
    portText.setEnabled(compositeEnable);
    compositeEnable=!(dbType.getDBName() == null);
    label=new Label(parent,SWT.NONE);
    if (dbType == SupportDBUrlType.ORACLEWITHSIDDEFAULTURL) {
      label.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    }
 else     if (dbType == SupportDBUrlType.ORACLEWITHSERVICENAMEDEFAULTURL) {
      label.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    }
 else {
      label.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    }
    final Text databaseNameText=new Text(parent,SWT.BORDER | SWT.SINGLE);
    databaseNameText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    if (compositeEnable) {
      databaseNameText.setText(dbType.getDBName());
    }
    label.setEnabled(compositeEnable);
    databaseNameText.setEnabled(compositeEnable);
    if (dbType == SupportDBUrlType.ORACLEWITHSIDDEFAULTURL) {
      label=new Label(parent,SWT.NONE);
      label.setText(""String_Node_Str"");
      final Text schemaText=new Text(parent,SWT.BORDER | SWT.SINGLE);
      schemaText.setEditable(true);
      schemaText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
      schemaText.addModifyListener(new ModifyListener(){
        public void modifyText(        ModifyEvent event){
          String schema=schemaText.getText();
          connectionParam.setOtherParameter(schema);
        }
      }
);
    }
    compositeEnable=!(dbType.getParamSeprator() == null);
    label=new Label(parent,SWT.NONE);
    label.setText(""String_Node_Str"");
    final Text parameterText=new Text(parent,SWT.BORDER | SWT.SINGLE);
    parameterText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    if (dbType.getParamSeprator() != null) {
      parameterText.setText(org.talend.dq.PluginConstant.DEFAULT_PARAMETERS);
      connectionParam.setADDParameter(org.talend.dq.PluginConstant.DEFAULT_PARAMETERS);
    }
 else {
      parameterText.setText(PluginConstant.EMPTY_STRING);
      connectionParam.setADDParameter(PluginConstant.EMPTY_STRING);
    }
    parameterText.setEnabled(compositeEnable);
    label.setEnabled(compositeEnable);
    parameterText.setEnabled(compositeEnable);
    compositeEnable=!(dbType.getDataSource() == null);
    label=new Label(parent,SWT.NONE);
    label.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    final Text dataSourceText=new Text(parent,SWT.BORDER | SWT.SINGLE);
    dataSourceText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    if (compositeEnable) {
      dataSourceText.setText(dbType.getDataSource());
    }
    label.setEnabled(compositeEnable);
    dataSourceText.setEnabled(compositeEnable);
    label=new Label(parent,SWT.NONE);
    label.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    urlText=new Text(parent,SWT.BORDER | SWT.SINGLE);
    urlText.setEditable(false);
    urlText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    urlText.addFocusListener(new FocusAdapter(){
      public void focusGained(      FocusEvent e){
        urlText.setEditable(true);
      }
      public void focusLost(      FocusEvent e){
        urlText.setEditable(false);
      }
    }
);
    urlText.setText(getConnectionURL());
    urlText.addKeyListener(new KeyAdapter(){
      public void keyReleased(      KeyEvent e){
        setConnectionURL(urlText.getText());
      }
    }
);
    dataSourceText.addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent event){
        setConnectionURL(SupportDBUrlStore.getInstance().getDBUrl(dbType.getDBKey(),hostNameText.getText(),portText.getText(),databaseNameText.getText(),dataSourceText.getText(),parameterText.getText()));
        urlText.setText(getConnectionURL());
      }
    }
);
    hostNameText.addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent event){
        String host=hostNameText.getText();
        setConnectionURL(SupportDBUrlStore.getInstance().getDBUrl(dbType.getDBKey(),host,portText.getText(),databaseNameText.getText(),dataSourceText.getText(),parameterText.getText()));
        urlText.setText(getConnectionURL());
        connectionParam.setHost(host);
      }
    }
);
    portText.addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent event){
        String port=portText.getText();
        setConnectionURL(SupportDBUrlStore.getInstance().getDBUrl(dbType.getDBKey(),hostNameText.getText(),port,databaseNameText.getText(),dataSourceText.getText(),parameterText.getText()));
        urlText.setText(getConnectionURL());
        connectionParam.setPort(port);
      }
    }
);
    portText.addKeyListener(new KeyAdapter(){
      public void keyReleased(      KeyEvent e){
        Long portValue=null;
        try {
          portValue=new Long(portText.getText());
        }
 catch (        NumberFormatException e1) {
        }
        if (portValue == null || portValue <= 0) {
          portText.setText(PluginConstant.EMPTY_STRING);
        }
      }
    }
);
    databaseNameText.addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent event){
        String dbName=databaseNameText.getText();
        setConnectionURL(SupportDBUrlStore.getInstance().getDBUrl(dbType.getDBKey(),hostNameText.getText(),portText.getText(),dbName,dataSourceText.getText(),parameterText.getText()));
        urlText.setText(getConnectionURL());
        SupportDBUrlStore.getInstance().changeAllDBNmae(dbName);
        connectionParam.setDbName(dbName);
      }
    }
);
    parameterText.addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
        connectionParam.setADDParameter(parameterText.getText());
        setConnectionURL(SupportDBUrlStore.getInstance().getDBUrl(dbType.getDBKey(),hostNameText.getText(),portText.getText(),databaseNameText.getText(),dataSourceText.getText(),parameterText.getText()));
        urlText.setText(getConnectionURL());
      }
    }
);
  }
}","protected void createPart(Composite parent,String dbLiteral,final DBConnectionParameter connectionParam){
  if (dbLiteral.trim().equals(""String_Node_Str"")) {
    GridLayout layout=new GridLayout();
    layout.numColumns=3;
    parent.setLayout(layout);
    Label labelJar=new Label(parent,SWT.NONE);
    labelJar.setText(""String_Node_Str"");
    final Text jarText=new Text(parent,SWT.BORDER | SWT.SINGLE);
    jarText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    jarText.setEditable(false);
    jarText.addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
        connectionParam.setDriverPath(jarText.getText());
      }
    }
);
    final Button selectJar=new Button(parent,SWT.PUSH);
    final StringBuilder filenameAll=new StringBuilder();
    selectJar.setText(""String_Node_Str"");
    selectJar.addSelectionListener(new SelectionAdapter(){
      public void widgetSelected(      SelectionEvent event){
        FileDialog dialog=new FileDialog(Display.getCurrent().getActiveShell());
        String filename=dialog.open();
        if (filename != null) {
          filenameAll.append(filename + ""String_Node_Str"");
          jarText.setText(filenameAll.toString());
          int length=filenameAll.length();
          filenameAll.delete(0,length);
        }
 else {
          jarText.setText(""String_Node_Str"");
        }
      }
    }
);
    Label labelDriver=new Label(parent,SWT.NONE);
    labelDriver.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    final Combo comboDriver=new Combo(parent,SWT.READ_ONLY);
    comboDriver.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    comboDriver.addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      SelectionEvent e){
        String driverClassName=comboDriver.getText();
        connectionParam.setDriverClassName(driverClassName);
        if (abstractWizardPage instanceof DatabaseWizardPage) {
          ((DatabaseWizardPage)abstractWizardPage).updateLoginPassEnable(!SupportDBUrlType.SQLITE3DEFAULTURL.getDbDriver().equals(driverClassName));
        }
      }
    }
);
    Button listDriverBtn=new Button(parent,SWT.PUSH);
    listDriverBtn.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    listDriverBtn.addSelectionListener(new SelectionAdapter(){
      public void widgetSelected(      SelectionEvent e){
        comboDriver.removeAll();
        for (        String stringToFile : jarText.getText().trim().split(""String_Node_Str"")) {
          File file=new File(stringToFile);
          if (file != null) {
            try {
              MyURLClassLoader cl=new MyURLClassLoader(file.toURL());
              Class[] classes=cl.getAssignableClasses(Driver.class);
              for (int i=0; i < classes.length; ++i) {
                comboDriver.add(classes[i].getName());
              }
            }
 catch (            MalformedURLException ex) {
              log.error(ex,ex);
            }
catch (            IOException ex) {
              log.error(ex,ex);
            }
          }
        }
        if (comboDriver.getItemCount() > 0) {
          String driverClassName=comboDriver.getItem(0);
          comboDriver.setText(driverClassName);
          connectionParam.setDriverClassName(driverClassName);
          if (abstractWizardPage instanceof DatabaseWizardPage) {
            ((DatabaseWizardPage)abstractWizardPage).updateButtonState();
            ((DatabaseWizardPage)abstractWizardPage).updateLoginPassEnable(!SupportDBUrlType.SQLITE3DEFAULTURL.getDbDriver().equals(driverClassName));
          }
        }
      }
    }
);
    Label labelUrl=new Label(parent,SWT.NONE);
    labelUrl.setText(""String_Node_Str"");
    final Text urlText2=new Text(parent,SWT.BORDER | SWT.SINGLE);
    urlText2.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    urlText2.addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
        connectionParam.setJdbcUrl(urlText2.getText());
        if (abstractWizardPage instanceof DatabaseWizardPage) {
          ((DatabaseWizardPage)abstractWizardPage).updateButtonState();
        }
      }
    }
);
  }
 else   if (dbLiteral.trim().equals(SupportDBUrlType.SQLITE3DEFAULTURL.getLanguage())) {
    GridLayout layout=new GridLayout();
    layout.numColumns=3;
    parent.setLayout(layout);
    Label labelfile=new Label(parent,SWT.NONE);
    final Text fileText=new Text(parent,SWT.BORDER | SWT.SINGLE);
    final Button selectFile=new Button(parent,SWT.PUSH);
    Label labelUrl=new Label(parent,SWT.NONE);
    final Text urlText3=new Text(parent,SWT.BORDER | SWT.SINGLE);
    labelfile.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    fileText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    fileText.setEditable(true);
    fileText.addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
        connectionParam.setFilePath(fileText.getText());
      }
    }
);
    selectFile.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    labelUrl.setText(""String_Node_Str"");
    urlText3.setEditable(false);
    urlText3.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    setConnectionURL(SupportDBUrlStore.getInstance().getDBUrl(dbType.getDBKey(),""String_Node_Str"",""String_Node_Str"",fileText.getText(),""String_Node_Str"",""String_Node_Str""));
    urlText3.setText(getConnectionURL());
    urlText3.setEditable(false);
    urlText3.addKeyListener(new KeyAdapter(){
      public void keyReleased(      KeyEvent e){
        setConnectionURL(urlText3.getText());
      }
    }
);
    urlText3.addFocusListener(new FocusAdapter(){
      public void focusGained(      FocusEvent e){
        urlText3.setEditable(true);
      }
      public void focusLost(      FocusEvent e){
        urlText3.setEditable(false);
      }
    }
);
    selectFile.addSelectionListener(new SelectionAdapter(){
      public void widgetSelected(      SelectionEvent event){
        FileDialog dialog=new FileDialog(Display.getCurrent().getActiveShell());
        String filename=dialog.open();
        if (filename != null) {
          fileText.setText(filename);
        }
 else {
          fileText.setText(""String_Node_Str"");
        }
        String url=SupportDBUrlStore.getInstance().getDBUrl(dbType.getDBKey(),""String_Node_Str"",""String_Node_Str"",fileText.getText(),""String_Node_Str"",""String_Node_Str"");
        if (log.isInfoEnabled()) {
          log.info(""String_Node_Str"" + url);
        }
        setConnectionURL(url);
        urlText3.setText(getConnectionURL());
      }
    }
);
  }
 else   if (dbLiteral.trim().equals(SupportDBUrlType.MDM.getLanguage())) {
    GridLayout layout=new GridLayout();
    layout.numColumns=2;
    parent.setLayout(layout);
    boolean compositeEnable=!(dbType.getHostName() == null);
    Label label=new Label(parent,SWT.NONE);
    label.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    final Text hostNameText=new Text(parent,SWT.BORDER | SWT.SINGLE);
    hostNameText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    if (compositeEnable) {
      hostNameText.setText(dbType.getHostName());
      connectionParam.setHost(dbType.getHostName());
    }
    label.setEnabled(compositeEnable);
    hostNameText.setEnabled(compositeEnable);
    compositeEnable=!(dbType.getPort() == null);
    label=new Label(parent,SWT.NONE);
    label.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    final Text portText=new Text(parent,SWT.BORDER | SWT.SINGLE);
    portText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    if (compositeEnable) {
      portText.setText(dbType.getPort());
      connectionParam.setPort(dbType.getPort());
    }
    label.setEnabled(compositeEnable);
    portText.setEnabled(compositeEnable);
    compositeEnable=false;
    label=new Label(parent,SWT.NONE);
    label.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    final Text databaseNameText=new Text(parent,SWT.BORDER | SWT.SINGLE);
    databaseNameText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    databaseNameText.setText(dbType.getDBName());
    label.setEnabled(compositeEnable);
    databaseNameText.setEnabled(compositeEnable);
    label=new Label(parent,SWT.NONE);
    label.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    dataFilterCombo=new MultipleSelectionCombo(parent,SWT.READ_ONLY);
    dataFilterCombo.setEnabled(false);
    dataFilterCombo.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    dataFilterCombo.addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
        connectionParam.getParameters().setProperty(TaggedValueHelper.DATA_FILTER,((Text)e.getSource()).getText());
      }
    }
);
    label=new Label(parent,SWT.NONE);
    label.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    final Text universeText=new Text(parent,SWT.BORDER | SWT.SINGLE);
    universeText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    universeText.setText(""String_Node_Str"");
    label=new Label(parent,SWT.NONE);
    label.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    urlText=new Text(parent,SWT.BORDER | SWT.SINGLE);
    urlText.setEditable(false);
    urlText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    urlText.addFocusListener(new FocusAdapter(){
      public void focusGained(      FocusEvent e){
        urlText.setEditable(true);
      }
      public void focusLost(      FocusEvent e){
        urlText.setEditable(false);
      }
    }
);
    urlText.setText(getConnectionURL());
    urlText.addKeyListener(new KeyAdapter(){
      public void keyReleased(      KeyEvent e){
        setConnectionURL(urlText.getText());
      }
    }
);
    universeText.addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent event){
        setConnectionURL(SupportDBUrlStore.getInstance().getDBUrl(dbType.getDBKey(),hostNameText.getText(),portText.getText(),databaseNameText.getText(),universeText.getText(),""String_Node_Str""));
        urlText.setText(getConnectionURL());
        connectionParam.getParameters().setProperty(TaggedValueHelper.UNIVERSE,universeText.getText());
      }
    }
);
    hostNameText.addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent event){
        String host=hostNameText.getText();
        setConnectionURL(SupportDBUrlStore.getInstance().getDBUrl(dbType.getDBKey(),host,portText.getText(),databaseNameText.getText(),universeText.getText(),""String_Node_Str""));
        urlText.setText(getConnectionURL());
        connectionParam.setHost(host);
      }
    }
);
    portText.addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent event){
        String port=portText.getText();
        setConnectionURL(SupportDBUrlStore.getInstance().getDBUrl(dbType.getDBKey(),hostNameText.getText(),port,databaseNameText.getText(),universeText.getText(),""String_Node_Str""));
        urlText.setText(getConnectionURL());
        connectionParam.setPort(port);
      }
    }
);
    portText.addKeyListener(new KeyAdapter(){
      public void keyReleased(      KeyEvent e){
        Long portValue=null;
        try {
          portValue=new Long(portText.getText());
        }
 catch (        NumberFormatException e1) {
        }
        if (portValue == null || portValue <= 0) {
          portText.setText(PluginConstant.EMPTY_STRING);
        }
      }
    }
);
  }
 else {
    GridLayout layout=new GridLayout();
    layout.numColumns=2;
    parent.setLayout(layout);
    boolean compositeEnable=!(dbType.getHostName() == null);
    Label label=new Label(parent,SWT.NONE);
    label.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    final Text hostNameText=new Text(parent,SWT.BORDER | SWT.SINGLE);
    hostNameText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    if (compositeEnable) {
      hostNameText.setText(dbType.getHostName());
      connectionParam.setHost(dbType.getHostName());
    }
    label.setEnabled(compositeEnable);
    hostNameText.setEnabled(compositeEnable);
    compositeEnable=!(dbType.getPort() == null);
    label=new Label(parent,SWT.NONE);
    label.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    final Text portText=new Text(parent,SWT.BORDER | SWT.SINGLE);
    portText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    if (compositeEnable) {
      portText.setText(dbType.getPort());
      connectionParam.setPort(dbType.getPort());
    }
    label.setEnabled(compositeEnable);
    portText.setEnabled(compositeEnable);
    compositeEnable=!(dbType.getDBName() == null);
    label=new Label(parent,SWT.NONE);
    if (dbType == SupportDBUrlType.ORACLEWITHSIDDEFAULTURL) {
      label.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    }
 else     if (dbType == SupportDBUrlType.ORACLEWITHSERVICENAMEDEFAULTURL) {
      label.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    }
 else {
      label.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    }
    final Text databaseNameText=new Text(parent,SWT.BORDER | SWT.SINGLE);
    databaseNameText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    if (compositeEnable) {
      databaseNameText.setText(dbType.getDBName());
    }
    label.setEnabled(compositeEnable);
    databaseNameText.setEnabled(compositeEnable);
    if (dbType == SupportDBUrlType.ORACLEWITHSIDDEFAULTURL) {
      label=new Label(parent,SWT.NONE);
      label.setText(""String_Node_Str"");
      final Text schemaText=new Text(parent,SWT.BORDER | SWT.SINGLE);
      schemaText.setEditable(true);
      schemaText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
      schemaText.addModifyListener(new ModifyListener(){
        public void modifyText(        ModifyEvent event){
          String schema=schemaText.getText();
          connectionParam.setOtherParameter(schema);
        }
      }
);
    }
    compositeEnable=!(dbType.getParamSeprator() == null);
    label=new Label(parent,SWT.NONE);
    label.setText(""String_Node_Str"");
    final Text parameterText=new Text(parent,SWT.BORDER | SWT.SINGLE);
    parameterText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    if (dbType.getParamSeprator() != null) {
      parameterText.setText(org.talend.dq.PluginConstant.DEFAULT_PARAMETERS);
      connectionParam.setADDParameter(org.talend.dq.PluginConstant.DEFAULT_PARAMETERS);
    }
 else {
      parameterText.setText(PluginConstant.EMPTY_STRING);
      connectionParam.setADDParameter(PluginConstant.EMPTY_STRING);
    }
    parameterText.setEnabled(compositeEnable);
    label.setEnabled(compositeEnable);
    parameterText.setEnabled(compositeEnable);
    compositeEnable=!(dbType.getDataSource() == null);
    label=new Label(parent,SWT.NONE);
    label.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    final Text dataSourceText=new Text(parent,SWT.BORDER | SWT.SINGLE);
    dataSourceText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    if (compositeEnable) {
      dataSourceText.setText(dbType.getDataSource());
    }
    label.setEnabled(compositeEnable);
    dataSourceText.setEnabled(compositeEnable);
    label=new Label(parent,SWT.NONE);
    label.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    urlText=new Text(parent,SWT.BORDER | SWT.SINGLE);
    urlText.setEditable(false);
    urlText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    urlText.addFocusListener(new FocusAdapter(){
      public void focusGained(      FocusEvent e){
        urlText.setEditable(true);
      }
      public void focusLost(      FocusEvent e){
        urlText.setEditable(false);
      }
    }
);
    urlText.setText(getConnectionURL());
    urlText.addKeyListener(new KeyAdapter(){
      public void keyReleased(      KeyEvent e){
        setConnectionURL(urlText.getText());
      }
    }
);
    dataSourceText.addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent event){
        setConnectionURL(SupportDBUrlStore.getInstance().getDBUrl(dbType.getDBKey(),hostNameText.getText(),portText.getText(),databaseNameText.getText(),dataSourceText.getText(),parameterText.getText()));
        urlText.setText(getConnectionURL());
      }
    }
);
    hostNameText.addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent event){
        String host=hostNameText.getText();
        setConnectionURL(SupportDBUrlStore.getInstance().getDBUrl(dbType.getDBKey(),host,portText.getText(),databaseNameText.getText(),dataSourceText.getText(),parameterText.getText()));
        urlText.setText(getConnectionURL());
        connectionParam.setHost(host);
      }
    }
);
    portText.addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent event){
        String port=portText.getText();
        setConnectionURL(SupportDBUrlStore.getInstance().getDBUrl(dbType.getDBKey(),hostNameText.getText(),port,databaseNameText.getText(),dataSourceText.getText(),parameterText.getText()));
        urlText.setText(getConnectionURL());
        connectionParam.setPort(port);
      }
    }
);
    final boolean ingresdb=isIngres(dbLiteral);
    portText.addKeyListener(new KeyAdapter(){
      public void keyReleased(      KeyEvent e){
        if (!ingresdb) {
          Long portValue=null;
          try {
            portValue=new Long(portText.getText());
          }
 catch (          NumberFormatException e1) {
          }
          if (portValue == null || portValue <= 0) {
            portText.setText(PluginConstant.EMPTY_STRING);
          }
        }
      }
    }
);
    databaseNameText.addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent event){
        String dbName=databaseNameText.getText();
        setConnectionURL(SupportDBUrlStore.getInstance().getDBUrl(dbType.getDBKey(),hostNameText.getText(),portText.getText(),dbName,dataSourceText.getText(),parameterText.getText()));
        urlText.setText(getConnectionURL());
        SupportDBUrlStore.getInstance().changeAllDBNmae(dbName);
        connectionParam.setDbName(dbName);
      }
    }
);
    parameterText.addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
        connectionParam.setADDParameter(parameterText.getText());
        setConnectionURL(SupportDBUrlStore.getInstance().getDBUrl(dbType.getDBKey(),hostNameText.getText(),portText.getText(),databaseNameText.getText(),dataSourceText.getText(),parameterText.getText()));
        urlText.setText(getConnectionURL());
      }
    }
);
  }
}",0.9972873526173018
138625,"public void keyReleased(KeyEvent e){
  Long portValue=null;
  try {
    portValue=new Long(portText.getText());
  }
 catch (  NumberFormatException e1) {
  }
  if (portValue == null || portValue <= 0) {
    portText.setText(PluginConstant.EMPTY_STRING);
  }
}","public void keyReleased(KeyEvent e){
  if (!ingresdb) {
    Long portValue=null;
    try {
      portValue=new Long(portText.getText());
    }
 catch (    NumberFormatException e1) {
    }
    if (portValue == null || portValue <= 0) {
      portText.setText(PluginConstant.EMPTY_STRING);
    }
  }
}",0.9087656529516994
138626,"/** 
 * DOC bZhou Comment method ""getOutputType"".
 * @param tag
 * @param element
 * @return
 */
public static String getOutputType(Report report){
  TaggedValue taggedValue=TaggedValueHelper.getTaggedValue(TaggedValueHelper.OUTPUT_TYPE_TAG,report.getTaggedValue());
  if (taggedValue == null) {
    return ""String_Node_Str"";
  }
  return taggedValue.getValue();
}","/** 
 * DOC bZhou Comment method ""getOutputType"".
 * @param tag
 * @param element
 * @return
 */
public static String getOutputType(Report report){
  TaggedValue taggedValue=TaggedValueHelper.getTaggedValue(TaggedValueHelper.OUTPUT_TYPE_TAG,report.getTaggedValue());
  if (taggedValue == null || taggedValue.getValue() == null) {
    return ""String_Node_Str"";
  }
  return taggedValue.getValue();
}",0.9553805774278216
138627,"public void handleEvent(Event event){
  int columnIndex=getColumnIndex(table,column);
  TableItem[] items=table.getItems();
  for (int i=1; i < items.length - 1; i++) {
    String value2=items[i].getText(columnIndex);
    for (int j=0; j < i; j++) {
      String value1=items[j].getText(columnIndex);
      boolean isLessThan=true;
      if (StringUtils.isNumeric(value2) && StringUtils.isNumeric(value1)) {
        isLessThan=Long.valueOf(value2).compareTo(Long.valueOf(value1)) < 0;
      }
 else {
        isLessThan=comparator.compare(value2,value1) < 0;
      }
      if ((isAscend && isLessThan) || (!isAscend && !isLessThan)) {
        String[] values=getTableItemText(table,items[i]);
        Object obj=items[i].getData();
        items[i].dispose();
        TableItem item=new TableItem(table,SWT.NONE,j);
        item.setText(values);
        item.setData(obj);
        items=table.getItems();
        break;
      }
    }
  }
  table.setSortColumn(column);
  table.setSortDirection((isAscend ? SWT.UP : SWT.DOWN));
  isAscend=!isAscend;
}","public void handleEvent(Event event){
  int columnIndex=getColumnIndex(table,column);
  TableItem[] items=table.getItems();
  int length=""String_Node_Str"".equals(items[items.length - 1].getText(columnIndex)) ? items.length - 1 : items.length;
  for (int i=1; i < length; i++) {
    String value2=items[i].getText(columnIndex);
    for (int j=0; j < i; j++) {
      String value1=items[j].getText(columnIndex);
      boolean isLessThan=true;
      if (StringUtils.isNumeric(value2) && StringUtils.isNumeric(value1)) {
        isLessThan=Long.valueOf(value2).compareTo(Long.valueOf(value1)) < 0;
      }
 else {
        isLessThan=comparator.compare(value2,value1) < 0;
      }
      if ((isAscend && isLessThan) || (!isAscend && !isLessThan)) {
        String[] values=getTableItemText(table,items[i]);
        Object obj=items[i].getData();
        items[i].dispose();
        TableItem item=new TableItem(table,SWT.NONE,j);
        item.setText(values);
        item.setData(obj);
        items=table.getItems();
        break;
      }
    }
  }
  table.setSortColumn(column);
  table.setSortDirection((isAscend ? SWT.UP : SWT.DOWN));
  isAscend=!isAscend;
}",0.9416025350837482
138628,"private void addSorter(final Table table,final TableColumn column){
  column.addListener(SWT.Selection,new Listener(){
    boolean isAscend=true;
    Collator comparator=Collator.getInstance(Locale.getDefault());
    public void handleEvent(    Event event){
      int columnIndex=getColumnIndex(table,column);
      TableItem[] items=table.getItems();
      for (int i=1; i < items.length - 1; i++) {
        String value2=items[i].getText(columnIndex);
        for (int j=0; j < i; j++) {
          String value1=items[j].getText(columnIndex);
          boolean isLessThan=true;
          if (StringUtils.isNumeric(value2) && StringUtils.isNumeric(value1)) {
            isLessThan=Long.valueOf(value2).compareTo(Long.valueOf(value1)) < 0;
          }
 else {
            isLessThan=comparator.compare(value2,value1) < 0;
          }
          if ((isAscend && isLessThan) || (!isAscend && !isLessThan)) {
            String[] values=getTableItemText(table,items[i]);
            Object obj=items[i].getData();
            items[i].dispose();
            TableItem item=new TableItem(table,SWT.NONE,j);
            item.setText(values);
            item.setData(obj);
            items=table.getItems();
            break;
          }
        }
      }
      table.setSortColumn(column);
      table.setSortDirection((isAscend ? SWT.UP : SWT.DOWN));
      isAscend=!isAscend;
    }
  }
);
}","private void addSorter(final Table table,final TableColumn column){
  column.addListener(SWT.Selection,new Listener(){
    boolean isAscend=true;
    Collator comparator=Collator.getInstance(Locale.getDefault());
    public void handleEvent(    Event event){
      int columnIndex=getColumnIndex(table,column);
      TableItem[] items=table.getItems();
      int length=""String_Node_Str"".equals(items[items.length - 1].getText(columnIndex)) ? items.length - 1 : items.length;
      for (int i=1; i < length; i++) {
        String value2=items[i].getText(columnIndex);
        for (int j=0; j < i; j++) {
          String value1=items[j].getText(columnIndex);
          boolean isLessThan=true;
          if (StringUtils.isNumeric(value2) && StringUtils.isNumeric(value1)) {
            isLessThan=Long.valueOf(value2).compareTo(Long.valueOf(value1)) < 0;
          }
 else {
            isLessThan=comparator.compare(value2,value1) < 0;
          }
          if ((isAscend && isLessThan) || (!isAscend && !isLessThan)) {
            String[] values=getTableItemText(table,items[i]);
            Object obj=items[i].getData();
            items[i].dispose();
            TableItem item=new TableItem(table,SWT.NONE,j);
            item.setText(values);
            item.setData(obj);
            items=table.getItems();
            break;
          }
        }
      }
      table.setSortColumn(column);
      table.setSortDirection((isAscend ? SWT.UP : SWT.DOWN));
      isAscend=!isAscend;
    }
  }
);
}",0.9540904383845358
138629,"/** 
 * DOC bZhou Comment method ""save"". Save a model element and update the related property.
 * @param element
 * @param withProperty
 * @return
 */
public ReturnCode save(ModelElement element,boolean... withProperty){
  ReturnCode rc=new ReturnCode();
  addDependencies(element);
  addResourceContent(element);
  rc.setOk(util.saveResource(element.eResource()));
  updateProperty(element);
  if (rc.isOk()) {
    rc.setMessage(""String_Node_Str"" + element.getName() + ""String_Node_Str"");
    notifyResourceChanges();
  }
 else {
    rc.setMessage(util.getLastErrorMessage());
  }
  return rc;
}","/** 
 * DOC bZhou Comment method ""save"". Save a model element and update the related property.
 * @param element
 * @param withProperty
 * @return
 */
public ReturnCode save(ModelElement element,boolean withProperty){
  ReturnCode rc=new ReturnCode();
  addDependencies(element);
  addResourceContent(element);
  rc.setOk(util.saveResource(element.eResource()));
  if (withProperty) {
    updateProperty(element);
  }
  if (rc.isOk()) {
    rc.setMessage(""String_Node_Str"" + element.getName() + ""String_Node_Str"");
    notifyResourceChanges();
  }
 else {
    rc.setMessage(util.getLastErrorMessage());
  }
  return rc;
}",0.9482333607230896
138630,"@Override protected void notifyResourceChanges(){
  ProxyRepositoryManager.getInstance().save(Boolean.FALSE);
}","@Override protected void notifyResourceChanges(){
  ProxyRepositoryManager.getInstance().save(Boolean.TRUE);
}",0.9683257918552036
138631,"@SuppressWarnings(""String_Node_Str"") protected void createCopyedProvider(){
  if (oldDataProvider.eIsProxy()) {
    ResourceSet resourceSet=ProxyRepositoryFactory.getInstance().getRepositoryFactoryFromProvider().getResourceManager().resourceSet;
    oldDataProvider=(Connection)EcoreUtil.resolve(oldDataProvider,resourceSet);
  }
  IFile selectedFile=WorkspaceUtils.getModelElementResource(oldDataProvider);
  IFile createNeedReloadElementsFile=DQStructureComparer.getNeedReloadElementsFile();
  IFile copyedFile=DQStructureComparer.copyedToDestinationFile(selectedFile,createNeedReloadElementsFile);
  TypedReturnCode<Connection> returnValue=DqRepositoryViewService.readFromFile(copyedFile);
  copyedDataProvider=returnValue.getObject();
}","@SuppressWarnings(""String_Node_Str"") protected void createCopyedProvider(){
  IFile selectedFile=WorkspaceUtils.getModelElementResource(oldDataProvider);
  IFile createNeedReloadElementsFile=DQStructureComparer.getNeedReloadElementsFile();
  IFile copyedFile=DQStructureComparer.copyedToDestinationFile(selectedFile,createNeedReloadElementsFile);
  TypedReturnCode<Connection> returnValue=DqRepositoryViewService.readFromFile(copyedFile);
  copyedDataProvider=returnValue.getObject();
}",0.7928221859706363
138632,"/** 
 * Compare the old selected object with reload object(rightResource), and updated the content of old selected object.
 * @param rightResource
 * @return
 * @throws ReloadCompareException
 */
protected boolean compareWithReloadObject() throws ReloadCompareException {
  MatchModel match=null;
  try {
    if (oldDataProvider.eIsProxy()) {
      ResourceSet resourceSet=ProxyRepositoryFactory.getInstance().getRepositoryFactoryFromProvider().getResourceManager().resourceSet;
      oldDataProvider=(Connection)EcoreUtil.resolve(oldDataProvider,resourceSet);
    }
    match=MatchService.doMatch(oldDataProvider,getSavedReloadObject(),options);
  }
 catch (  InterruptedException e) {
    log.error(e,e);
    return false;
  }
  final DiffModel diff=DiffService.doDiff(match);
  EList<DiffElement> ownedElements=diff.getOwnedElements();
  for (  DiffElement de : ownedElements) {
    EList<DiffElement> subDiffElements=de.getSubDiffElements();
    for (    DiffElement difElement : subDiffElements) {
      handleDiffPackageElement(difElement);
    }
  }
  return true;
}","/** 
 * Compare the old selected object with reload object(rightResource), and updated the content of old selected object.
 * @param rightResource
 * @return
 * @throws ReloadCompareException
 */
protected boolean compareWithReloadObject() throws ReloadCompareException {
  MatchModel match=null;
  try {
    match=MatchService.doMatch(oldDataProvider,getSavedReloadObject(),options);
  }
 catch (  InterruptedException e) {
    log.error(e,e);
    return false;
  }
  final DiffModel diff=DiffService.doDiff(match);
  EList<DiffElement> ownedElements=diff.getOwnedElements();
  for (  DiffElement de : ownedElements) {
    EList<DiffElement> subDiffElements=de.getSubDiffElements();
    for (    DiffElement difElement : subDiffElements) {
      handleDiffPackageElement(difElement);
    }
  }
  return true;
}",0.8609341825902336
138633,"private int compareColumnValue(DataSetRow m1,DataSetRow m2,int depth){
  if (depth >= _priorities.length)   return 0;
  int columnNumber=_priorities[depth];
  int direction=_directions[columnNumber];
  int result=0;
  Object o1=m1.getPrettyObjectValue(columnNumber);
  Object o2=m2.getPrettyObjectValue(columnNumber);
  if (o1 == null || o2 == null) {
    if (o1 == null && o2 != null) {
      result=1;
    }
 else     if (o1 != null && o2 == null) {
      result=-1;
    }
 else {
      result=0;
    }
    if (result == 0) {
      return compareColumnValue(m1,m2,depth + 1);
    }
    if (direction == SWT.DOWN) {
      return result * -1;
    }
    return result;
  }
  if (o1 instanceof Comparable && o2 instanceof Comparable)   result=((Comparable)o1).compareTo((Comparable)o2);
  if (result == 0)   return compareColumnValue(m1,m2,depth + 1);
  if (direction == SWT.DOWN) {
    return result * -1;
  }
  return result;
}","private int compareColumnValue(DataSetRow m1,DataSetRow m2,int depth){
  if (depth >= _priorities.length)   return 0;
  int columnNumber=_priorities[depth];
  int direction=_directions[columnNumber];
  int result=0;
  Object o1=m1.getPrettyObjectValue(columnNumber);
  Object o2=m2.getPrettyObjectValue(columnNumber);
  if (""String_Node_Str"".equals(o1) || ""String_Node_Str"".equals(o2)) {
    if (""String_Node_Str"".equals(o1) && !""String_Node_Str"".equals(o2)) {
      result=1;
    }
 else     if (!""String_Node_Str"".equals(o1) && ""String_Node_Str"".equals(o2)) {
      result=-1;
    }
 else {
      result=0;
    }
    if (result == 0) {
      return compareColumnValue(m1,m2,depth + 1);
    }
    if (direction == SWT.DOWN) {
      return result * -1;
    }
    return result;
  }
  if (o1 instanceof Comparable && o2 instanceof Comparable)   result=((Comparable)o1).compareTo((Comparable)o2);
  if (result == 0)   return compareColumnValue(m1,m2,depth + 1);
  if (direction == SWT.DOWN) {
    return result * -1;
  }
  return result;
}",0.8492871690427699
138634,"/** 
 * DOC zshen Comment method ""retrieveColumn"".
 * @param tdTable retrieve sqlDataType if it have a name is ""Null"".
 */
public static void retrieveColumn(MetadataTable tdTable){
  List<MetadataColumn> columnList=tdTable.getColumns();
  if (columnList != null && columnList.size() > 0 && columnList.get(0) instanceof TdColumn) {
    TdColumn tempColumn=((TdColumn)columnList.get(0));
    if (tempColumn.getSqlDataType() == null || ""String_Node_Str"".equalsIgnoreCase(tempColumn.getSqlDataType().getName()) && 0 == tempColumn.getSqlDataType().getJavaDataType()) {
      if (tdTable != null) {
        Connection tempConnection=ConnectionHelper.getConnection(tempColumn);
        if (tempConnection != null) {
          java.sql.Connection connection=JavaSqlFactory.createConnection(tempConnection).getObject();
          if (connection == null) {
            return;
          }
          for (          Object colobj : columnList) {
            TdColumn tdColumn=(TdColumn)colobj;
            try {
              List<TdSqlDataType> newDataTypeList=DatabaseContentRetriever.getDataType(getName(CatalogHelper.getParentCatalog(tdTable)),getName(SchemaHelper.getParentSchema(tdTable)),tdTable.getName(),tdColumn.getName(),connection);
              if (newDataTypeList.size() > 0) {
                tdColumn.setSqlDataType(newDataTypeList.get(0));
              }
            }
 catch (            SQLException e) {
              log.error(e,e);
            }
          }
        }
        ProxyRepositoryViewObject.save(tempConnection);
      }
    }
  }
}","/** 
 * DOC zshen Comment method ""retrieveColumn"".
 * @param tdTable retrieve sqlDataType if it have a name is ""Null"".
 */
public static void retrieveColumn(MetadataTable tdTable){
  List<MetadataColumn> columnList=tdTable.getColumns();
  if (columnList != null && columnList.size() > 0 && columnList.get(0) instanceof TdColumn) {
    TdColumn tempColumn=((TdColumn)columnList.get(0));
    if (tempColumn.getSqlDataType() == null || ""String_Node_Str"".equalsIgnoreCase(tempColumn.getSqlDataType().getName()) && 0 == tempColumn.getSqlDataType().getJavaDataType()) {
      if (tdTable != null) {
        Connection tempConnection=ConnectionHelper.getConnection(tempColumn);
        if (tempConnection != null) {
          java.sql.Connection connection=JavaSqlFactory.createConnection(tempConnection).getObject();
          if (connection == null) {
            return;
          }
          for (          Object colobj : columnList) {
            TdColumn tdColumn=(TdColumn)colobj;
            try {
              List<TdSqlDataType> newDataTypeList=DatabaseContentRetriever.getDataType(getName(CatalogHelper.getParentCatalog(tdTable)),getName(SchemaHelper.getParentSchema(tdTable)),tdTable.getName(),tdColumn.getName(),connection);
              if (newDataTypeList.size() > 0) {
                tdColumn.setSqlDataType(newDataTypeList.get(0));
              }
            }
 catch (            SQLException e) {
              log.error(e,e);
            }
          }
          ConnectionUtils.closeConnection(connection);
        }
        ProxyRepositoryViewObject.save(tempConnection);
      }
    }
  }
}",0.9826224328593997
138635,"/** 
 * zshen get driver by metadataConnection information.
 * @param metadataConnection contain the information which about driver.
 * @return if can't find the driver will get a null.
 */
public Driver getDriver(IMetadataConnection metadataConnection) throws InstantiationException, IllegalAccessException, ClassNotFoundException {
  Driver driver=null;
  String driverClassName=metadataConnection.getDriverClass();
  SQLExplorerPlugin sqlExplorerPlugin=SQLExplorerPlugin.getDefault();
  if (sqlExplorerPlugin != null) {
    net.sourceforge.sqlexplorer.dbproduct.DriverManager driverModel=sqlExplorerPlugin.getDriverModel();
    try {
      Collection<ManagedDriver> drivers=driverModel.getDrivers();
      for (      ManagedDriver managedDriver : drivers) {
        LinkedList<String> jars=managedDriver.getJars();
        List<URL> urls=new ArrayList<URL>();
        for (int i=0; i < jars.size(); i++) {
          File file=new File(jars.get(i));
          if (file.exists()) {
            urls.add(file.toURI().toURL());
          }
        }
        if (!urls.isEmpty()) {
          try {
            MyURLClassLoader cl;
            cl=new MyURLClassLoader(urls.toArray(new URL[0]));
            Class<?> clazz=cl.findClass(driverClassName);
            if (clazz != null) {
              driver=(Driver)clazz.newInstance();
            }
          }
 catch (          ClassNotFoundException e) {
          }
        }
      }
    }
 catch (    MalformedURLException e) {
    }
  }
  if (driver == null) {
    driver=(Driver)Class.forName(driverClassName).newInstance();
  }
  return driver;
}","/** 
 * zshen get driver by metadataConnection information.
 * @param metadataConnection contain the information which about driver.
 * @return if can't find the driver will get a null.
 */
public Driver getDriver(IMetadataConnection metadataConnection) throws InstantiationException, IllegalAccessException, ClassNotFoundException {
  Driver driver=null;
  String driverClassName=metadataConnection.getDriverClass();
  String jarsPath=metadataConnection.getDriverJarPath();
  if (StringUtils.isNotEmpty(jarsPath)) {
    try {
      driver=this.createGenericJDBC(jarsPath,driverClassName);
    }
 catch (    Exception e) {
      log.error(e,e);
    }
    return driver;
  }
  SQLExplorerPlugin sqlExplorerPlugin=SQLExplorerPlugin.getDefault();
  if (sqlExplorerPlugin != null) {
    net.sourceforge.sqlexplorer.dbproduct.DriverManager driverModel=sqlExplorerPlugin.getDriverModel();
    try {
      Collection<ManagedDriver> drivers=driverModel.getDrivers();
      for (      ManagedDriver managedDriver : drivers) {
        LinkedList<String> jars=managedDriver.getJars();
        List<URL> urls=new ArrayList<URL>();
        for (int i=0; i < jars.size(); i++) {
          File file=new File(jars.get(i));
          if (file.exists()) {
            urls.add(file.toURI().toURL());
          }
        }
        if (!urls.isEmpty()) {
          try {
            MyURLClassLoader cl;
            cl=new MyURLClassLoader(urls.toArray(new URL[0]));
            Class<?> clazz=cl.findClass(driverClassName);
            if (clazz != null) {
              driver=(Driver)clazz.newInstance();
              if (driver != null) {
                return driver;
              }
            }
          }
 catch (          ClassNotFoundException e) {
          }
        }
      }
    }
 catch (    MalformedURLException e) {
    }
  }
  if (driver == null) {
    driver=(Driver)Class.forName(driverClassName).newInstance();
  }
  return driver;
}",0.9042643321095736
138636,"public static List<IRepositoryViewObject> fetchAllDBRepositoryViewObjects(Boolean paramBoolean){
  ArrayList localArrayList=new ArrayList();
  localArrayList.addAll(getDBConnectionInstance().fetchRepositoryViewObjects(paramBoolean.booleanValue(),true));
  return localArrayList;
}","public static List<IRepositoryViewObject> fetchAllDBRepositoryViewObjects(Boolean reload,boolean withDelete){
  List<IRepositoryViewObject> dbReposViewObjs=new ArrayList<IRepositoryViewObject>();
  dbReposViewObjs.addAll(getDBConnectionInstance().fetchRepositoryViewObjects(reload,withDelete));
  return dbReposViewObjs;
}",0.6013289036544851
138637,"public static List<IRepositoryViewObject> fetchAllRepositoryViewObjects(Boolean paramBoolean){
  ArrayList localArrayList=new ArrayList();
  localArrayList.addAll(getDBConnectionInstance().fetchRepositoryViewObjects(paramBoolean.booleanValue(),true));
  localArrayList.addAll(getMDMConnectionInstance().fetchRepositoryViewObjects(paramBoolean.booleanValue(),true));
  return localArrayList;
}","/** 
 * DOC mzhao Fetch all repository view objects, database, mdm, file etc.
 * @param true1
 */
public static List<IRepositoryViewObject> fetchAllRepositoryViewObjects(Boolean reload,boolean withDelete){
  List<IRepositoryViewObject> reposViewObjs=new ArrayList<IRepositoryViewObject>();
  reposViewObjs.addAll(getDBConnectionInstance().fetchRepositoryViewObjects(reload,withDelete));
  reposViewObjs.addAll(getMDMConnectionInstance().fetchRepositoryViewObjects(reload,withDelete));
  return reposViewObjs;
}",0.5210643015521065
138638,"public static List<IRepositoryViewObject> fetchRepositoryViewObjectsByFolder(boolean paramBoolean,ERepositoryObjectType paramERepositoryObjectType,IPath paramIPath){
  if (paramERepositoryObjectType == ERepositoryObjectType.METADATA_CONNECTIONS)   return getDBConnectionInstance().fetchRepositoryViewObjectsByFolder(paramBoolean,paramERepositoryObjectType,paramIPath,true);
  if (paramERepositoryObjectType == ERepositoryObjectType.METADATA_MDMCONNECTION)   return getMDMConnectionInstance().fetchRepositoryViewObjectsByFolder(paramBoolean,paramERepositoryObjectType,paramIPath,true);
  return new ArrayList();
}","public static List<IRepositoryViewObject> fetchRepositoryViewObjectsByFolder(boolean reload,ERepositoryObjectType itemType,IPath path,boolean withDelete){
  if (itemType == ERepositoryObjectType.METADATA_CONNECTIONS) {
    return getDBConnectionInstance().fetchRepositoryViewObjectsByFolder(reload,itemType,path,withDelete);
  }
 else   if (itemType == ERepositoryObjectType.METADATA_MDMCONNECTION) {
    return getMDMConnectionInstance().fetchRepositoryViewObjectsByFolder(reload,itemType,path,withDelete);
  }
  return new ArrayList<IRepositoryViewObject>();
}",0.5826235093696763
138639,"/** 
 * DOC xqliu IndicatorSelectDialog constructor comment.
 * @param parentShell
 * @param title
 * @param modelElementIndicators
 * @deprecated
 */
public IndicatorSelectDialog(Shell parentShell,String title,ModelElementIndicator[] modelElementIndicators){
  this(parentShell,title,modelElementIndicators,null);
  Object editorPart=CorePlugin.getDefault().getWorkbench().getActiveWorkbenchWindow().getActivePage().getActiveEditor();
  if (editorPart instanceof AnalysisEditor) {
    AnalysisEditor analyEditor=(AnalysisEditor)editorPart;
    if (analyEditor.getMasterPage() instanceof ColumnMasterDetailsPage) {
      this.language=ExecutionLanguage.get(((ColumnMasterDetailsPage)analyEditor.getMasterPage()).getExecCombo().getText());
      DataManager connection=((ColumnMasterDetailsPage)analyEditor.getMasterPage()).getAnalysis().getContext().getConnection();
      this.dbms=DbmsLanguageFactory.createDbmsLanguage(connection);
    }
  }
}","/** 
 * DOC xqliu IndicatorSelectDialog constructor comment.
 * @param parentShell
 * @param title
 * @param modelElementIndicators
 * @deprecated
 */
public IndicatorSelectDialog(Shell parentShell,String title,ModelElementIndicator[] modelElementIndicators){
  this(parentShell,title,modelElementIndicators,null);
  Object editorPart=CorePlugin.getDefault().getWorkbench().getActiveWorkbenchWindow().getActivePage().getActiveEditor();
  if (editorPart instanceof AnalysisEditor) {
    AnalysisEditor analyEditor=(AnalysisEditor)editorPart;
    if (analyEditor.getMasterPage() instanceof ColumnMasterDetailsPage) {
      this.language=ExecutionLanguage.get(((ColumnMasterDetailsPage)analyEditor.getMasterPage()).getExecCombo().getText());
      DataManager connection=((ColumnMasterDetailsPage)analyEditor.getMasterPage()).getAnalysis().getContext().getConnection();
      if (connection == null && modelElementIndicators.length > 0) {
        ModelElement modleElement=modelElementIndicators[0].getModelElement();
        connection=ModelElementHelper.getTdDataProvider(modleElement);
      }
      this.dbms=DbmsLanguageFactory.createDbmsLanguage(connection);
    }
  }
}",0.8928739971684757
138640,"/** 
 * Method ""fillListOfCatalogs"" gets the list of catalogs only when the list is empty. When the list is not empty, no call is executed to the connection.
 * @param connection
 * @param catalogNames the list of catalogs of the given connection
 * @throws SQLException
 */
private static void fillListOfCatalogs(java.sql.Connection connection,List<String> catalogNames) throws SQLException {
  if (catalogNames.isEmpty()) {
    ResultSet catalogSet=null;
    if (!(ConnectionUtils.isOdbcOracle(connection) || ConnectionUtils.isOdbcIngres(connection))) {
      catalogSet=getConnectionMetadata(connection).getCatalogs();
    }
    try {
      if (catalogSet != null) {
        while (catalogSet.next()) {
          String catalogName=catalogSet.getString(MetaDataConstants.TABLE_CAT.name());
          if (catalogName != null || !""String_Node_Str"".equals(catalogName)) {
            catalogNames.add(catalogName);
          }
        }
      }
    }
 catch (    SQLException e) {
      log.warn(""String_Node_Str"",e);
    }
 finally {
      if (catalogSet != null) {
        catalogSet.close();
      }
    }
  }
}","/** 
 * Method ""fillListOfCatalogs"" gets the list of catalogs only when the list is empty. When the list is not empty, no call is executed to the connection.
 * @param connection
 * @param catalogNames the list of catalogs of the given connection
 * @throws SQLException
 */
private static void fillListOfCatalogs(java.sql.Connection connection,List<String> catalogNames) throws SQLException {
  if (catalogNames.isEmpty()) {
    ResultSet catalogSet=null;
    if (!(ConnectionUtils.isOdbcOracle(connection) || ConnectionUtils.isOdbcIngres(connection) || ConnectionUtils.isOdbcProgress(connection))) {
      catalogSet=getConnectionMetadata(connection).getCatalogs();
    }
    try {
      if (catalogSet != null) {
        while (catalogSet.next()) {
          String catalogName=catalogSet.getString(MetaDataConstants.TABLE_CAT.name());
          if (catalogName != null || !""String_Node_Str"".equals(catalogName)) {
            catalogNames.add(catalogName);
          }
        }
      }
    }
 catch (    SQLException e) {
      log.warn(""String_Node_Str"",e);
    }
 finally {
      if (catalogSet != null) {
        catalogSet.close();
      }
    }
  }
}",0.9797713280562884
138641,"/** 
 * Method ""getSchemas"" returns a map of catalogs to schemas. Warning: if no catalog is found, catalog name (i.e. key of the map) can be null.
 * @param connection the connection
 * @return a map [catalog's name -> list of Schemas ].
 * @throws SQLException
 */
public static Map<String,List<Schema>> getSchemas(java.sql.Connection connection) throws SQLException {
  Map<String,List<Schema>> catalogName2schemas=new HashMap<String,List<Schema>>();
  DatabaseMetaData connectionMetadata=getConnectionMetadata(connection);
  final List<String> catalogNames=new ArrayList<String>();
  fillListOfCatalogs(connection,catalogNames);
  boolean odbcMssqlFlag=ConnectionUtils.isOdbcMssql(connection);
  boolean postgresqlFlag=ConnectionUtils.isPostgresql(connection);
  ResultSet schemas=null;
  try {
    schemas=connectionMetadata.getSchemas();
  }
 catch (  Exception e1) {
    log.warn(""String_Node_Str"",e1);
  }
  try {
    if (schemas != null) {
      final int columnCount=schemas.getMetaData() == null ? 0 : schemas.getMetaData().getColumnCount();
      boolean hasSchema=false;
      while (schemas.next()) {
        String catName=null;
        String schemaName=null;
        if (columnCount > 1) {
          try {
            catName=schemas.getString(MetaDataConstants.TABLE_CATALOG.name());
          }
 catch (          Exception e) {
            log.warn(""String_Node_Str"",e);
          }
          try {
            schemaName=schemas.getString(MetaDataConstants.TABLE_SCHEM.name());
          }
 catch (          Exception e) {
            log.warn(e,e);
          }
          if (schemaName == null) {
            try {
              schemaName=schemas.getString(DatabaseConstant.ODBC_ORACLE_SCHEMA_NAME);
            }
 catch (            Exception e) {
              log.warn(e,e);
            }
          }
          if (schemaName == null) {
            try {
              schemaName=schemas.getString(1);
            }
 catch (            Exception e) {
              log.warn(e,e);
            }
          }
          if (catName != null) {
            createSchema(schemaName,catName,catalogName2schemas);
          }
        }
        if (odbcMssqlFlag || postgresqlFlag) {
          try {
            schemaName=schemas.getString(1);
          }
 catch (          Exception e) {
            log.warn(e,e);
          }
        }
        if (catName == null) {
          if (catalogNames.isEmpty()) {
            if (schemaName == null) {
              schemaName=getSchemaName(schemas);
            }
            createSchema(schemaName,null,catalogName2schemas);
          }
 else {
            for (            String catalogName : catalogNames) {
              createSchema(schemaName,catalogName,catalogName2schemas);
            }
          }
        }
        hasSchema=true;
      }
      if (!hasSchema && catalogName2schemas.isEmpty() && catalogNames.isEmpty()) {
        Schema schema=createSchema(""String_Node_Str"");
        MultiMapHelper.addUniqueObjectToListMap(null,schema,catalogName2schemas);
      }
    }
  }
 catch (  SQLException e) {
    throw e;
  }
 finally {
    if (schemas != null) {
      schemas.close();
    }
  }
  return catalogName2schemas;
}","/** 
 * Method ""getSchemas"" returns a map of catalogs to schemas. Warning: if no catalog is found, catalog name (i.e. key of the map) can be null.
 * @param connection the connection
 * @return a map [catalog's name -> list of Schemas ].
 * @throws SQLException
 */
public static Map<String,List<Schema>> getSchemas(java.sql.Connection connection) throws SQLException {
  Map<String,List<Schema>> catalogName2schemas=new HashMap<String,List<Schema>>();
  DatabaseMetaData connectionMetadata=getConnectionMetadata(connection);
  final List<String> catalogNames=new ArrayList<String>();
  fillListOfCatalogs(connection,catalogNames);
  boolean odbcMssqlFlag=ConnectionUtils.isOdbcMssql(connection);
  boolean postgresqlFlag=ConnectionUtils.isPostgresql(connection);
  boolean odbcProgressFlag=ConnectionUtils.isOdbcProgress(connection);
  ResultSet schemas=null;
  try {
    schemas=connectionMetadata.getSchemas();
  }
 catch (  Exception e1) {
    log.warn(""String_Node_Str"",e1);
  }
  try {
    if (schemas != null) {
      final int columnCount=schemas.getMetaData() == null ? 0 : schemas.getMetaData().getColumnCount();
      boolean hasSchema=false;
      while (schemas.next()) {
        String catName=null;
        String schemaName=null;
        if (columnCount > 1) {
          try {
            catName=schemas.getString(MetaDataConstants.TABLE_CATALOG.name());
          }
 catch (          Exception e) {
            log.warn(""String_Node_Str"",e);
          }
          try {
            schemaName=schemas.getString(MetaDataConstants.TABLE_SCHEM.name());
          }
 catch (          Exception e) {
            log.warn(e,e);
          }
          if (schemaName == null) {
            try {
              schemaName=schemas.getString(DatabaseConstant.ODBC_ORACLE_SCHEMA_NAME);
            }
 catch (            Exception e) {
              log.warn(e,e);
            }
          }
          if (schemaName == null) {
            try {
              schemaName=schemas.getString(1);
            }
 catch (            Exception e) {
              log.warn(e,e);
            }
          }
          if (catName != null) {
            createSchema(schemaName,catName,catalogName2schemas);
          }
        }
        if (odbcMssqlFlag || postgresqlFlag || odbcProgressFlag) {
          try {
            schemaName=schemas.getString(1);
          }
 catch (          Exception e) {
            log.warn(e,e);
          }
        }
        if (catName == null) {
          if (catalogNames.isEmpty()) {
            if (schemaName == null) {
              schemaName=getSchemaName(schemas);
            }
            createSchema(schemaName,null,catalogName2schemas);
          }
 else {
            for (            String catalogName : catalogNames) {
              createSchema(schemaName,catalogName,catalogName2schemas);
            }
          }
        }
        hasSchema=true;
      }
      if (!hasSchema && catalogName2schemas.isEmpty() && catalogNames.isEmpty()) {
        Schema schema=createSchema(""String_Node_Str"");
        MultiMapHelper.addUniqueObjectToListMap(null,schema,catalogName2schemas);
      }
    }
  }
 catch (  SQLException e) {
    throw e;
  }
 finally {
    if (schemas != null) {
      schemas.close();
    }
  }
  return catalogName2schemas;
}",0.9859762675296656
138642,"/** 
 * Method ""changeCatalog"".
 * @param catalogName unquoted catalog's name
 * @param connection
 * @throws SQLException
 */
protected boolean changeCatalog(String catalogName,Connection connection){
  try {
    if (!(ConnectionUtils.isOdbcMssql(connection) || ConnectionUtils.isOdbcOracle(connection))) {
      connection.setCatalog(catalogName);
    }
    return true;
  }
 catch (  RuntimeException e) {
    return traceError(""String_Node_Str"" + catalogName + ""String_Node_Str""+ e.getMessage());
  }
catch (  SQLException e) {
    return traceError(""String_Node_Str"" + catalogName + ""String_Node_Str""+ e.getMessage());
  }
}","/** 
 * Method ""changeCatalog"".
 * @param catalogName unquoted catalog's name
 * @param connection
 * @throws SQLException
 */
protected boolean changeCatalog(String catalogName,Connection connection){
  try {
    if (!(ConnectionUtils.isOdbcMssql(connection) || ConnectionUtils.isOdbcOracle(connection) || ConnectionUtils.isOdbcProgress(connection))) {
      connection.setCatalog(catalogName);
    }
    return true;
  }
 catch (  RuntimeException e) {
    return traceError(""String_Node_Str"" + catalogName + ""String_Node_Str""+ e.getMessage());
  }
catch (  SQLException e) {
    return traceError(""String_Node_Str"" + catalogName + ""String_Node_Str""+ e.getMessage());
  }
}",0.964723926380368
138643,"protected boolean changeCatalog(String catalogName,Connection connection){
  try {
    connection.setCatalog(catalogName);
    return true;
  }
 catch (  RuntimeException e) {
    return traceError(""String_Node_Str"" + catalogName + ""String_Node_Str""+ e.getMessage());
  }
catch (  SQLException e) {
    return traceError(""String_Node_Str"" + catalogName + ""String_Node_Str""+ e.getMessage());
  }
}","protected boolean changeCatalog(String catalogName,Connection connection){
  try {
    if (!(ConnectionUtils.isOdbcMssql(connection) || ConnectionUtils.isOdbcOracle(connection) || ConnectionUtils.isOdbcProgress(connection))) {
      connection.setCatalog(catalogName);
    }
    return true;
  }
 catch (  RuntimeException e) {
    return traceError(""String_Node_Str"" + catalogName + ""String_Node_Str""+ e.getMessage());
  }
catch (  SQLException e) {
    return traceError(""String_Node_Str"" + catalogName + ""String_Node_Str""+ e.getMessage());
  }
}",0.8114406779661016
138644,"public static List<IRepositoryViewObject> fetchAllDBRepositoryViewObjects(Boolean reload,boolean withDelete){
  List<IRepositoryViewObject> dbReposViewObjs=new ArrayList<IRepositoryViewObject>();
  dbReposViewObjs.addAll(getDBConnectionInstance().fetchRepositoryViewObjects(reload,withDelete));
  return dbReposViewObjs;
}","public static List<IRepositoryViewObject> fetchAllDBRepositoryViewObjects(Boolean paramBoolean){
  ArrayList localArrayList=new ArrayList();
  localArrayList.addAll(getDBConnectionInstance().fetchRepositoryViewObjects(paramBoolean.booleanValue(),true));
  return localArrayList;
}",0.6179401993355482
138645,"/** 
 * DOC mzhao Fetch all repository view objects, database, mdm, file etc.
 * @param true1
 */
public static List<IRepositoryViewObject> fetchAllRepositoryViewObjects(Boolean reload,boolean withDelete){
  List<IRepositoryViewObject> reposViewObjs=new ArrayList<IRepositoryViewObject>();
  reposViewObjs.addAll(getDBConnectionInstance().fetchRepositoryViewObjects(reload,withDelete));
  reposViewObjs.addAll(getMDMConnectionInstance().fetchRepositoryViewObjects(reload,withDelete));
  return reposViewObjs;
}","public static List<IRepositoryViewObject> fetchAllRepositoryViewObjects(Boolean paramBoolean){
  ArrayList localArrayList=new ArrayList();
  localArrayList.addAll(getDBConnectionInstance().fetchRepositoryViewObjects(paramBoolean.booleanValue(),true));
  localArrayList.addAll(getMDMConnectionInstance().fetchRepositoryViewObjects(paramBoolean.booleanValue(),true));
  return localArrayList;
}",0.5631929046563193
138646,"public static List<IRepositoryViewObject> fetchRepositoryViewObjectsByFolder(boolean reload,ERepositoryObjectType itemType,IPath path,boolean withDelete){
  if (itemType == ERepositoryObjectType.METADATA_CONNECTIONS) {
    return getDBConnectionInstance().fetchRepositoryViewObjectsByFolder(reload,itemType,path,withDelete);
  }
 else   if (itemType == ERepositoryObjectType.METADATA_MDMCONNECTION) {
    return getMDMConnectionInstance().fetchRepositoryViewObjectsByFolder(reload,itemType,path,withDelete);
  }
  return new ArrayList<IRepositoryViewObject>();
}","public static List<IRepositoryViewObject> fetchRepositoryViewObjectsByFolder(boolean paramBoolean,ERepositoryObjectType paramERepositoryObjectType,IPath paramIPath){
  if (paramERepositoryObjectType == ERepositoryObjectType.METADATA_CONNECTIONS)   return getDBConnectionInstance().fetchRepositoryViewObjectsByFolder(paramBoolean,paramERepositoryObjectType,paramIPath,true);
  if (paramERepositoryObjectType == ERepositoryObjectType.METADATA_MDMCONNECTION)   return getMDMConnectionInstance().fetchRepositoryViewObjectsByFolder(paramBoolean,paramERepositoryObjectType,paramIPath,true);
  return new ArrayList();
}",0.6899488926746167
138647,"/** 
 * Method ""selectCatalog"" attempts to set the catalog for the current connection.
 * @param catalogName the catalog to select
 * @return true if set, false if problem
 */
public boolean selectCatalog(String catalogName){
  if (connection == null) {
    return false;
  }
  try {
    connection.setCatalog(catalogName);
    return true;
  }
 catch (  SQLException e) {
    return false;
  }
}","/** 
 * Method ""selectCatalog"" attempts to set the catalog for the current connection.
 * @param catalogName the catalog to select
 * @return true if set, false if problem
 */
public boolean selectCatalog(String catalogName){
  if (connection == null) {
    return false;
  }
  try {
    if (!ConnectionUtils.isOdbcProgress(connection)) {
      connection.setCatalog(catalogName);
    }
    return true;
  }
 catch (  SQLException e) {
    return false;
  }
}",0.9029239766081872
138648,"@Override protected ReturnCode executeSqlQuery(String sqlStatement) throws SQLException {
  ReturnCode ok=new ReturnCode(true);
  DataProvider dataProvider=this.getDataManager();
  if (this.elementToIndicators.values().isEmpty()) {
    String msg=""String_Node_Str"";
    log.error(msg);
    ok.setReturnCode(msg,false);
    return ok;
  }
  Indicator[] indics=this.getAllIndicators();
  if (indics.length == 0) {
    String msg=""String_Node_Str"" + dataProvider;
    log.error(msg);
    ok.setReturnCode(msg,false);
    return ok;
  }
  for (  Indicator indicator : indics) {
    SchemaIndicator schemaIndicator=DataqualitySwitchHelper.SCHEMA_SWITCH.doSwitch(indicator);
    if (schemaIndicator == null) {
      continue;
    }
    Schema schema=(Schema)schemaIndicator.getAnalyzedElement();
    String catName=schema.getName();
    if (!checkSchema(schema)) {
      ok.setReturnCode(Messages.getString(""String_Node_Str"",catName),false);
      return ok;
    }
    EObject container=schema.eContainer();
    if (container != null) {
      Catalog catalog=SwitchHelpers.CATALOG_SWITCH.doSwitch(container);
      if (catalog != null) {
        catName=catalog.getName();
      }
    }
    connection.setCatalog(catName);
    evalSchemaIndicLow(null,schemaIndicator,null,schema,ok);
  }
  return ok;
}","@Override protected ReturnCode executeSqlQuery(String sqlStatement) throws SQLException {
  ReturnCode ok=new ReturnCode(true);
  DataProvider dataProvider=this.getDataManager();
  if (this.elementToIndicators.values().isEmpty()) {
    String msg=""String_Node_Str"";
    log.error(msg);
    ok.setReturnCode(msg,false);
    return ok;
  }
  Indicator[] indics=this.getAllIndicators();
  if (indics.length == 0) {
    String msg=""String_Node_Str"" + dataProvider;
    log.error(msg);
    ok.setReturnCode(msg,false);
    return ok;
  }
  for (  Indicator indicator : indics) {
    SchemaIndicator schemaIndicator=DataqualitySwitchHelper.SCHEMA_SWITCH.doSwitch(indicator);
    if (schemaIndicator == null) {
      continue;
    }
    Schema schema=(Schema)schemaIndicator.getAnalyzedElement();
    String catName=schema.getName();
    if (!checkSchema(schema)) {
      ok.setReturnCode(Messages.getString(""String_Node_Str"",catName),false);
      return ok;
    }
    EObject container=schema.eContainer();
    if (container != null) {
      Catalog catalog=SwitchHelpers.CATALOG_SWITCH.doSwitch(container);
      if (catalog != null) {
        catName=catalog.getName();
      }
    }
    if (!ConnectionUtils.isOdbcProgress(connection)) {
      connection.setCatalog(catName);
    }
    evalSchemaIndicLow(null,schemaIndicator,null,schema,ok);
  }
  return ok;
}",0.9657250470809792
138649,"public static List<IEcosCategory> getCategoryList(String version) throws Exception {
  String jsonContent=sendGetRequest(CATEGORY_LIST_URL);
  List<IEcosCategory> categorys=parseJsonObject(jsonContent,IEcosCategory.class);
  if (categorys != null) {
    for (    IEcosCategory category : categorys) {
      ((EcosCategory)category).setVersion(version);
    }
  }
 else {
    categorys=Collections.emptyList();
  }
  return categorys;
}","public static List<IEcosCategory> getCategoryList(String version) throws Exception {
  String jsonContent=sendGetRequest(CATEGORY_LIST_URL);
  List<EcosCategory> categorys=parseJsonObject(jsonContent,EcosCategory.class);
  if (categorys != null) {
    for (    EcosCategory category : categorys) {
      ((EcosCategory)category).setVersion(version);
    }
  }
 else {
    categorys=Collections.emptyList();
  }
  List<IEcosCategory> iCategorys=new ArrayList<IEcosCategory>();
  for (  EcosCategory ecosCategory : categorys) {
    iCategorys.add(ecosCategory);
  }
  return iCategorys;
}",0.8442703232125367
138650,"/** 
 * DOC bZhou Comment method ""delete"".
 * @param ifile
 * @throws Exception
 */
public ReturnCode delete(IFile ifile) throws Exception {
  ReturnCode rc=new ReturnCode();
  Resource resource=getFileResource(ifile);
  List<ModelElement> dependencyClients=EObjectHelper.getDependencyClients(ifile);
  if (!dependencyClients.isEmpty()) {
    rc.setOk(false);
    rc.setMessage(""String_Node_Str"" + dependencyClients.get(0).getName() + ""String_Node_Str"");
  }
 else {
    EObjectHelper.removeDependencys(ifile);
    deleteRelated(ifile);
    String uriStr=resource.getURI().toString();
    remove(ifile);
    EMFSharedResources.getInstance().unloadResource(uriStr);
    if (ifile.isLinked()) {
      File file=new File(ifile.getRawLocation().toOSString());
      if (file.exists()) {
        file.delete();
      }
    }
    ifile.delete(true,new NullProgressMonitor());
    IFile propFile=ResourcesPlugin.getWorkspace().getRoot().getFile(ifile.getFullPath().removeFileExtension().addFileExtension(FactoriesUtil.PROPERTIES_EXTENSION));
    resource=getFileResource(propFile);
    remove(propFile);
    EMFSharedResources.getInstance().unloadResource(resource.getURI().toString());
    if (propFile.exists()) {
      propFile.delete(true,new NullProgressMonitor());
    }
    ProxyRepositoryManager.getInstance().save();
    ifile.getParent().refreshLocal(IResource.DEPTH_INFINITE,null);
    rc.setMessage(""String_Node_Str"");
  }
  return rc;
}","/** 
 * DOC bZhou Comment method ""delete"".
 * @param ifile
 * @throws Exception
 */
public ReturnCode delete(IFile ifile) throws Exception {
  ReturnCode rc=new ReturnCode();
  Resource resource=getFileResource(ifile);
  List<ModelElement> dependencyClients=EObjectHelper.getDependencyClients(ifile);
  if (!dependencyClients.isEmpty()) {
    rc.setOk(false);
    rc.setMessage(""String_Node_Str"" + dependencyClients.get(0).getName() + ""String_Node_Str"");
  }
 else {
    EObjectHelper.removeDependencys(ifile);
    deleteRelated(ifile);
    String uriStr=resource.getURI().toString();
    remove(ifile);
    EMFSharedResources.getInstance().unloadResource(uriStr);
    if (ifile.isLinked()) {
      File file=new File(ifile.getRawLocation().toOSString());
      if (file.exists()) {
        file.delete();
      }
    }
    ifile.delete(true,new NullProgressMonitor());
    IFile propFile=ResourcesPlugin.getWorkspace().getRoot().getFile(ifile.getFullPath().removeFileExtension().addFileExtension(FactoriesUtil.PROPERTIES_EXTENSION));
    if (propFile.exists()) {
      propFile.delete(true,new NullProgressMonitor());
    }
    ProxyRepositoryManager.getInstance().save();
    ifile.getParent().refreshLocal(IResource.DEPTH_INFINITE,null);
    rc.setMessage(""String_Node_Str"");
  }
  return rc;
}",0.9470609711573568
138651,"/** 
 * DOC qiongli close editor by file.
 * @param fileRes
 */
public void closeEditorIfOpened(Property property){
  IWorkbenchPage activePage=CorePlugin.getDefault().getWorkbench().getActiveWorkbenchWindow().getActivePage();
  IEditorReference[] editorReferences=activePage.getEditorReferences();
  IEditorInput editorInput=null;
  for (  IEditorReference reference : editorReferences) {
    try {
      editorInput=reference.getEditorInput();
      if (editorInput instanceof FileEditorInput) {
        FileEditorInput fileInput=(FileEditorInput)editorInput;
        if (property.eResource() != null) {
          IPath propPath=new Path(property.eResource().getURI().lastSegment()).removeFileExtension();
          IPath filePath=new Path(fileInput.getFile().getName()).removeFileExtension();
          if (filePath.equals(propPath)) {
            activePage.closeEditor(reference.getEditor(false),false);
            break;
          }
        }
      }
 else       if (editorInput instanceof SQLEditorInput) {
        SQLEditorInput sqlEditorInput=(SQLEditorInput)editorInput;
        if (sqlEditorInput.getUser().getAlias().getName().equals(property.getLabel())) {
          activePage.closeEditor(reference.getEditor(false),false);
        }
      }
 else       if (editorInput instanceof ConnectionItemEditorInput) {
        ConnectionItemEditorInput connectionInput=(ConnectionItemEditorInput)editorInput;
        if (property.equals(connectionInput.getReposViewObj().getProperty())) {
          activePage.closeEditor(reference.getEditor(false),false);
        }
      }
    }
 catch (    PartInitException e) {
      e.printStackTrace();
    }
  }
}","/** 
 * DOC qiongli close editor by file.
 * @param fileRes
 */
public void closeEditorIfOpened(Property property){
  IWorkbenchPage activePage=CorePlugin.getDefault().getWorkbench().getActiveWorkbenchWindow().getActivePage();
  IEditorReference[] editorReferences=activePage.getEditorReferences();
  IEditorInput editorInput=null;
  for (  IEditorReference reference : editorReferences) {
    try {
      editorInput=reference.getEditorInput();
      if (editorInput instanceof FileEditorInput) {
        FileEditorInput fileInput=(FileEditorInput)editorInput;
        if (property.eResource() != null) {
          IPath propPath=new Path(property.eResource().getURI().lastSegment()).removeFileExtension();
          IPath filePath=new Path(fileInput.getFile().getName()).removeFileExtension();
          if (filePath.equals(propPath)) {
            activePage.closeEditor(reference.getEditor(false),false);
            break;
          }
        }
      }
 else       if (editorInput instanceof SQLEditorInput) {
        SQLEditorInput sqlEditorInput=(SQLEditorInput)editorInput;
        if (sqlEditorInput.getUser() == null) {
          if (sqlEditorInput.getName().equals(property.getLabel())) {
            activePage.closeEditor(reference.getEditor(false),false);
          }
        }
 else         if (sqlEditorInput.getUser().getAlias().getName().equals(property.getLabel())) {
          activePage.closeEditor(reference.getEditor(false),false);
        }
      }
 else       if (editorInput instanceof ConnectionItemEditorInput) {
        ConnectionItemEditorInput connectionInput=(ConnectionItemEditorInput)editorInput;
        if (property.equals(connectionInput.getReposViewObj().getProperty())) {
          activePage.closeEditor(reference.getEditor(false),false);
        }
      }
    }
 catch (    PartInitException e) {
      e.printStackTrace();
    }
  }
}",0.9389140271493212
138652,"@Override protected void createFormContent(IManagedForm managedForm){
  setFormTitle(DefaultMessagesImpl.getString(""String_Node_Str""));
  setMetadataTitle(DefaultMessagesImpl.getString(""String_Node_Str""));
  super.createFormContent(managedForm);
  metadataSection.setDescription(DefaultMessagesImpl.getString(""String_Node_Str""));
  createDefinitionSection(topComp);
  if (isSystemIndicator()) {
    if (IndicatorCategoryHelper.isCorrelation(category)) {
      createAdditionalFunctionsSection(topComp);
    }
    if (this.hasCharactersMapping) {
      createCharactersMappingSection(topComp);
    }
  }
 else {
    createCategorySection(topComp);
    createDefinitionParametersSection(topComp);
  }
}","@Override protected void createFormContent(IManagedForm managedForm){
  setFormTitle(DefaultMessagesImpl.getString(""String_Node_Str""));
  setMetadataTitle(DefaultMessagesImpl.getString(""String_Node_Str""));
  super.createFormContent(managedForm);
  metadataSection.setDescription(DefaultMessagesImpl.getString(""String_Node_Str""));
  createDefinitionSection(topComp);
  if (isSystemIndicator()) {
    if (IndicatorCategoryHelper.isCorrelation(category)) {
      createAdditionalFunctionsSection(topComp);
    }
    if (this.hasCharactersMapping) {
      createCharactersMappingSection(topComp);
    }
  }
 else {
    createCategorySection(topComp);
    createDefinitionParametersSection(topComp);
  }
  form.reflow(true);
}",0.9852216748768472
138653,"/** 
 * DOC bZhou Comment method ""update"".
 * @param desFile
 * @throws IOException
 * @throws CoreException
 * @throws Exception
 */
private void update(File desFile) throws IOException, CoreException {
  String curProjectLabel=ResourceManager.getRootProjectName();
  if (!StringUtils.equals(projectName,curProjectLabel)) {
    String content=FileUtils.readFileToString(desFile,""String_Node_Str"");
    content=StringUtils.replace(content,""String_Node_Str"" + projectName + ""String_Node_Str"",""String_Node_Str"" + curProjectLabel + ""String_Node_Str"");
    FileUtils.writeStringToFile(desFile,content,""String_Node_Str"");
  }
  if (desFile.exists()) {
    IFile desIFile=ResourceService.file2IFile(desFile);
    URI uri=URI.createPlatformResourceURI(desIFile.getFullPath().toString(),false);
    Resource resource=EMFSharedResources.getInstance().reloadResource(uri);
    String fileExtension=desIFile.getFileExtension();
    if (fileExtension.equals(FactoriesUtil.PROPERTIES_EXTENSION)) {
      Property property=(Property)EcoreUtil.getObjectByType(resource.getContents(),PropertiesPackage.eINSTANCE.getProperty());
      if (property != null) {
        User user=ReponsitoryContextBridge.getUser();
        if (user != null && property.getAuthor() == null) {
          property.setAuthor(user);
        }
        if (log.isDebugEnabled()) {
          log.debug(""String_Node_Str"" + desIFile + ""String_Node_Str""+ property.getLabel());
        }
        EMFSharedResources.getInstance().saveResource(property.eResource());
        Item item=property.getItem();
        EResourceConstant typedConstant=EResourceConstant.getTypedConstant(item);
        if (typedConstant == EResourceConstant.DB_CONNECTIONS || typedConstant == EResourceConstant.MDM_CONNECTIONS) {
          Connection connection=((ConnectionItem)property.getItem()).getConnection();
          IRepositoryViewObject object=new RepositoryViewObject(property);
          ProxyRepositoryViewObject.registerReposViewObj(connection,object);
        }
      }
 else {
        log.error(""String_Node_Str"" + desIFile.getFullPath().toString());
      }
    }
  }
}","/** 
 * DOC bZhou Comment method ""update"".
 * @param desFile
 * @param isCovered
 * @throws IOException
 * @throws CoreException
 * @throws Exception
 */
private void update(File desFile,boolean isCovered) throws IOException, CoreException {
  String curProjectLabel=ResourceManager.getRootProjectName();
  if (!StringUtils.equals(projectName,curProjectLabel)) {
    String content=FileUtils.readFileToString(desFile,""String_Node_Str"");
    content=StringUtils.replace(content,""String_Node_Str"" + projectName + ""String_Node_Str"",""String_Node_Str"" + curProjectLabel + ""String_Node_Str"");
    FileUtils.writeStringToFile(desFile,content,""String_Node_Str"");
  }
  if (desFile.exists()) {
    IFile desIFile=ResourceService.file2IFile(desFile);
    if (isCovered) {
      URI uri=URI.createPlatformResourceURI(desIFile.getFullPath().toString(),false);
      EMFSharedResources.getInstance().reloadResource(uri);
      ResourceFileMap resourceFileMap=ModelElementFileFactory.getResourceFileMap(desIFile);
      if (resourceFileMap != null) {
        resourceFileMap.remove(desIFile);
      }
    }
    String fileExtension=desIFile.getFileExtension();
    if (fileExtension.equals(FactoriesUtil.PROPERTIES_EXTENSION)) {
      Property property=PropertyHelper.getProperty(desIFile);
      if (property != null) {
        User user=ReponsitoryContextBridge.getUser();
        if (user != null && property.getAuthor() == null) {
          property.setAuthor(user);
          EMFSharedResources.getInstance().saveResource(property.eResource());
        }
        if (log.isDebugEnabled()) {
          log.debug(""String_Node_Str"" + desIFile + ""String_Node_Str""+ property.getLabel());
        }
        Item item=property.getItem();
        EResourceConstant typedConstant=EResourceConstant.getTypedConstant(item);
        if (typedConstant == EResourceConstant.DB_CONNECTIONS || typedConstant == EResourceConstant.MDM_CONNECTIONS) {
          Connection connection=((ConnectionItem)property.getItem()).getConnection();
          IRepositoryViewObject object=new RepositoryViewObject(property);
          ProxyRepositoryViewObject.registerReposViewObj(connection,object);
        }
      }
 else {
        log.error(""String_Node_Str"" + desIFile.getFullPath().toString());
      }
    }
  }
}",0.8773048030958343
138654,"/** 
 * Install a drag&drop function for target table viewer.
 * @param targetViewer the target table viewer for installing drag&drop, it's input value must a <code>List</code>type.
 * @param installDragListener decide to whether install a drag listener for targetViewer: if true, will install thelistener; else, will not install.
 * @param validateType
 * @see ComparisonTableViewerDNDDecorate#NON_VALIDATETYPE
 * @see ComparisonTableViewerDNDDecorate#COLUMN_VALIDATETYPE
 */
public void installDND(final TableViewer targetViewer,final boolean installDragListener,final int validateType){
  int operations=DND.DROP_COPY | DND.DROP_MOVE;
  if (installDragListener) {
    installDragListener(targetViewer,operations);
  }
  DropTarget dropTarget=new DropTarget(targetViewer.getTable(),operations);
  dropTarget.setTransfer(transferTypes);
  DropTargetListener dndListener=new AbstractSelectionReceiver(targetViewer.getTable(),null){
    @SuppressWarnings(""String_Node_Str"") public void drop(    DropTargetEvent event,    LocalSelectionTransfer transfer){
      List inputElements=(List)targetViewer.getInput();
      if (inputElements == null) {
        inputElements=new ArrayList();
      }
      if (dragSelectedElement != null) {
        TableItem item=(TableItem)event.item;
        TableItem[] items=targetViewer.getTable().getItems();
        int index=0;
        for (int i=0; i < items.length; i++) {
          if (items[i] == item) {
            index=i;
            break;
          }
        }
        inputElements.remove(dragSelectedElement);
        inputElements.add(index,dragSelectedElement);
        dragSelectedElement=null;
      }
 else {
        StructuredSelection selection=(StructuredSelection)transfer.getSelection();
        List selectionElements=selection.toList();
        inputElements.addAll(selectionElements);
      }
      targetViewer.setInput(inputElements);
      compareTreeViewer.updateBindConnection(masterPage,tableViewerPosStack);
      compareTreeViewer.setDirty(true);
    }
    public boolean doDropValidation(    DropTargetEvent event,    LocalSelectionTransfer transfer){
      if (dragSelectedElement != null) {
        return true;
      }
      boolean doDropValidation=false;
      StructuredSelection selection=(StructuredSelection)transfer.getSelection();
switch (validateType) {
case COLUMN_VALIDATETYPE:
        doDropValidation=validateColumnType(selection,targetViewer);
      break;
default :
    doDropValidation=true;
}
return doDropValidation;
}
}
;
dropTarget.addDropListener(dndListener);
}","/** 
 * Install a drag&drop function for target table viewer.
 * @param targetViewer the target table viewer for installing drag&drop, it's input value must a <code>List</code>type.
 * @param installDragListener decide to whether install a drag listener for targetViewer: if true, will install thelistener; else, will not install.
 * @param validateType
 * @see ComparisonTableViewerDNDDecorate#NON_VALIDATETYPE
 * @see ComparisonTableViewerDNDDecorate#COLUMN_VALIDATETYPE
 */
public void installDND(final TableViewer targetViewer,final boolean installDragListener,final int validateType){
  int operations=DND.DROP_COPY | DND.DROP_MOVE;
  if (installDragListener) {
    installDragListener(targetViewer,operations);
  }
  DropTarget dropTarget=new DropTarget(targetViewer.getTable(),operations);
  dropTarget.setTransfer(transferTypes);
  DropTargetListener dndListener=new AbstractSelectionReceiver(targetViewer.getTable(),null){
    @SuppressWarnings(""String_Node_Str"") public void drop(    DropTargetEvent event,    LocalSelectionTransfer transfer){
      List inputElements=(List)targetViewer.getInput();
      if (inputElements == null) {
        inputElements=new ArrayList();
      }
      if (dragSelectedElement != null) {
        TableItem item=(TableItem)event.item;
        TableItem[] items=targetViewer.getTable().getItems();
        int index=0;
        for (int i=0; i < items.length; i++) {
          if (items[i] == item) {
            index=i;
            break;
          }
        }
        inputElements.remove(dragSelectedElement);
        inputElements.add(index,dragSelectedElement);
        dragSelectedElement=null;
      }
 else {
        StructuredSelection selection=(StructuredSelection)transfer.getSelection();
        List selectionElements=selection.toList();
        inputElements.addAll(selectionElements);
      }
      targetViewer.setInput(inputElements);
      compareTreeViewer.updateBindConnection(masterPage,tableViewerPosStack);
      compareTreeViewer.setDirty(true);
    }
    public boolean doDropValidation(    DropTargetEvent event,    LocalSelectionTransfer transfer){
      StructuredSelection selection=(StructuredSelection)transfer.getSelection();
      if (dragSelectedElement != null && selection != null) {
        return true;
      }
      boolean doDropValidation=false;
switch (validateType) {
case COLUMN_VALIDATETYPE:
        doDropValidation=validateColumnType(selection,targetViewer);
      break;
default :
    doDropValidation=true;
}
return doDropValidation;
}
}
;
dropTarget.addDropListener(dndListener);
}",0.9639305907584323
138655,"public boolean doDropValidation(DropTargetEvent event,LocalSelectionTransfer transfer){
  if (dragSelectedElement != null) {
    return true;
  }
  boolean doDropValidation=false;
  StructuredSelection selection=(StructuredSelection)transfer.getSelection();
switch (validateType) {
case COLUMN_VALIDATETYPE:
    doDropValidation=validateColumnType(selection,targetViewer);
  break;
default :
doDropValidation=true;
}
return doDropValidation;
}","public boolean doDropValidation(DropTargetEvent event,LocalSelectionTransfer transfer){
  StructuredSelection selection=(StructuredSelection)transfer.getSelection();
  if (dragSelectedElement != null && selection != null) {
    return true;
  }
  boolean doDropValidation=false;
switch (validateType) {
case COLUMN_VALIDATETYPE:
    doDropValidation=validateColumnType(selection,targetViewer);
  break;
default :
doDropValidation=true;
}
return doDropValidation;
}",0.7739801543550165
138656,"@SuppressWarnings(""String_Node_Str"") private boolean validateColumnType(StructuredSelection selection,TableViewer targetViewer){
  boolean isValidation=true;
  List selectionList=selection.toList();
  if (!allowDuplication) {
    List elements=(List)targetViewer.getInput();
    if (elements != null) {
      for (      Object element : elements) {
        if (selectionList.contains(element)) {
          isValidation=false;
          break;
        }
      }
    }
  }
  for (  Object obj : selectionList) {
    if (!(obj instanceof TdColumn)) {
      isValidation=false;
      break;
    }
  }
  return isValidation;
}","@SuppressWarnings(""String_Node_Str"") private boolean validateColumnType(StructuredSelection selection,TableViewer targetViewer){
  if (selection == null) {
    return false;
  }
  boolean isValidation=true;
  List selectionList=selection.toList();
  if (!allowDuplication) {
    List elements=(List)targetViewer.getInput();
    if (elements != null) {
      for (      Object element : elements) {
        if (selectionList.contains(element)) {
          isValidation=false;
          break;
        }
      }
    }
  }
  for (  Object obj : selectionList) {
    if (!(obj instanceof TdColumn)) {
      isValidation=false;
      break;
    }
  }
  return isValidation;
}",0.9620449264136328
138657,"/** 
 * DOC bZhou Comment method ""createDQStructure"".
 */
public void createDQStructure(){
  Plugin plugin=CorePlugin.getDefault();
  try {
    IProject project=ResourceManager.getRootProject();
    if (!project.exists()) {
      project=createNewProject(ResourceManager.getRootProjectName());
    }
    IFolder dataProfilingFolder=createNewFolder(project,EResourceConstant.DATA_PROFILING);
    IFolder analysisFoler=createNewFolder(dataProfilingFolder,EResourceConstant.ANALYSIS);
    IFolder reportFoler=createNewFolder(dataProfilingFolder,EResourceConstant.REPORTS);
    IFolder librariesFoler=createNewFolder(project,EResourceConstant.LIBRARIES);
    IFolder patternFoler=createNewFolder(librariesFoler,EResourceConstant.PATTERNS);
    IFolder patternRegexFoler=createNewFolder(patternFoler,EResourceConstant.PATTERN_REGEX);
    IFolder patternSQLFoler=createNewFolder(patternFoler,EResourceConstant.PATTERN_SQL);
    IFolder sourceFileFoler=createNewFolder(librariesFoler,EResourceConstant.SOURCE_FILES);
    IFolder rulesFoler=createNewFolder(librariesFoler,EResourceConstant.RULES);
    IFolder rulesSQLFoler=createNewFolder(rulesFoler,EResourceConstant.RULES_SQL);
    IFolder indicatorFoler=createNewFolder(librariesFoler,EResourceConstant.INDICATORS);
    IFolder systemIndicatorFoler=createNewFolder(indicatorFoler,EResourceConstant.SYSTEM_INDICATORS);
    if (!project.getFolder(EResourceConstant.DB_CONNECTIONS.getPath()).exists()) {
      ProxyRepositoryFactory.getInstance().createFolder(ERepositoryObjectType.METADATA,Path.EMPTY,EResourceConstant.DB_CONNECTIONS.getName());
    }
    if (!project.getFolder(EResourceConstant.MDM_CONNECTIONS.getPath()).exists()) {
      ProxyRepositoryFactory.getInstance().createFolder(ERepositoryObjectType.METADATA,Path.EMPTY,EResourceConstant.MDM_CONNECTIONS.getName());
    }
    copyFilesToFolder(plugin,PATTERN_PATH,true,patternRegexFoler,null);
    copyFilesToFolder(plugin,SQL_LIKE_PATH,true,patternSQLFoler,null);
    copyFilesToFolder(plugin,DEMO_PATH,true,sourceFileFoler,null);
    copyFilesToFolder(plugin,RULES_PATH,true,rulesSQLFoler,null);
    copyFilesToFolder(plugin,SYSTEM_INDICATOR_PATH,true,systemIndicatorFoler,null);
    WorkspaceVersionHelper.storeVersion();
    ResourceService.refreshStructure();
  }
 catch (  Exception ex) {
    ExceptionHandler.process(ex);
    ProxyRepositoryManager.getInstance().save();
  }
}","/** 
 * DOC bZhou Comment method ""createDQStructure"".
 */
public void createDQStructure(){
  Plugin plugin=CorePlugin.getDefault();
  try {
    IProject project=ResourceManager.getRootProject();
    if (!project.exists()) {
      project=createNewProject(ResourceManager.getRootProjectName());
    }
    IFolder dataProfilingFolder=createNewFolder(project,EResourceConstant.DATA_PROFILING);
    IFolder analysisFoler=createNewFolder(dataProfilingFolder,EResourceConstant.ANALYSIS);
    IFolder reportFoler=createNewFolder(dataProfilingFolder,EResourceConstant.REPORTS);
    IFolder librariesFoler=createNewFolder(project,EResourceConstant.LIBRARIES);
    IFolder patternFoler=createNewFolder(librariesFoler,EResourceConstant.PATTERNS);
    IFolder patternRegexFoler=createNewFolder(patternFoler,EResourceConstant.PATTERN_REGEX);
    IFolder patternSQLFoler=createNewFolder(patternFoler,EResourceConstant.PATTERN_SQL);
    IFolder sourceFileFoler=createNewFolder(librariesFoler,EResourceConstant.SOURCE_FILES);
    IFolder rulesFoler=createNewFolder(librariesFoler,EResourceConstant.RULES);
    IFolder rulesSQLFoler=createNewFolder(rulesFoler,EResourceConstant.RULES_SQL);
    IFolder exchangeFoler=createNewFolder(librariesFoler,EResourceConstant.EXCHANGE);
    IFolder indicatorFoler=createNewFolder(librariesFoler,EResourceConstant.INDICATORS);
    IFolder udiFoler=createNewFolder(indicatorFoler,EResourceConstant.USER_DEFINED_INDICATORS);
    IFolder jrxmlFolder=createNewFolder(librariesFoler,EResourceConstant.JRXML_TEMPLATE);
    IFolder systemIndicatorFoler=createNewFolder(indicatorFoler,EResourceConstant.SYSTEM_INDICATORS);
    if (!project.getFolder(EResourceConstant.DB_CONNECTIONS.getPath()).exists()) {
      ProxyRepositoryFactory.getInstance().createFolder(ERepositoryObjectType.METADATA,Path.EMPTY,EResourceConstant.DB_CONNECTIONS.getName());
    }
    if (!project.getFolder(EResourceConstant.MDM_CONNECTIONS.getPath()).exists()) {
      ProxyRepositoryFactory.getInstance().createFolder(ERepositoryObjectType.METADATA,Path.EMPTY,EResourceConstant.MDM_CONNECTIONS.getName());
    }
    copyFilesToFolder(plugin,PATTERN_PATH,true,patternRegexFoler,null);
    copyFilesToFolder(plugin,SQL_LIKE_PATH,true,patternSQLFoler,null);
    copyFilesToFolder(plugin,DEMO_PATH,true,sourceFileFoler,null);
    copyFilesToFolder(plugin,RULES_PATH,true,rulesSQLFoler,null);
    copyFilesToFolder(plugin,SYSTEM_INDICATOR_PATH,true,systemIndicatorFoler,null);
    WorkspaceVersionHelper.storeVersion();
    ResourceService.refreshStructure();
  }
 catch (  Exception ex) {
    ExceptionHandler.process(ex);
    ProxyRepositoryManager.getInstance().save();
  }
}",0.9426197071626434
138658,"@Override protected void createFormContent(IManagedForm managedForm){
  super.createFormContent(managedForm);
  form=managedForm.getForm();
  form.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  this.metadataSection.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  this.metadataSection.setDescription(DefaultMessagesImpl.getString(""String_Node_Str""));
  anaColumnCompareViewer=new AnalysisColumnCompareTreeViewer((AbstractAnalysisMetadataPage)this,topComp,getColumnLeftSet(),getColumnRightSet(),DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str""),false,true);
  anaColumnCompareViewer.addPropertyChangeListener(this);
  createDataFilterSection(form,topComp);
  columnListA=anaColumnCompareViewer.getColumnListA();
  columnListB=anaColumnCompareViewer.getColumnListB();
  columnsComparisonSection=anaColumnCompareViewer.getColumnsComparisonSection();
  anaColumnCompareViewer.addPropertyChangeListener(this);
}","@Override protected void createFormContent(IManagedForm managedForm){
  super.createFormContent(managedForm);
  form=managedForm.getForm();
  form.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  this.metadataSection.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  this.metadataSection.setDescription(DefaultMessagesImpl.getString(""String_Node_Str""));
  anaColumnCompareViewer=new AnalysisColumnCompareTreeViewer((AbstractAnalysisMetadataPage)this,topComp,getColumnLeftSet(),getColumnRightSet(),DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str""),false,true);
  anaColumnCompareViewer.addPropertyChangeListener(this);
  createDataFilterSection(form,topComp);
  columnListA=anaColumnCompareViewer.getColumnListA();
  columnListB=anaColumnCompareViewer.getColumnListB();
  columnsComparisonSection=anaColumnCompareViewer.getColumnsComparisonSection();
  anaColumnCompareViewer.addPropertyChangeListener(this);
  form.reflow(true);
}",0.9893992932862192
138659,"/** 
 * DOC bZhou Comment method ""doMigrationTask"".
 * @param tasks
 * @param monitor
 */
public static void doMigrationTask(List<IMigrationTask> tasks,IProgressMonitor monitor){
  if (monitor == null) {
    monitor=new NullProgressMonitor();
  }
  monitor.beginTask(""String_Node_Str"",tasks.size());
  for (  IMigrationTask task : tasks) {
    if (monitor.isCanceled()) {
      break;
    }
    monitor.subTask(task.getName());
    if (task.valid()) {
      if (!task.execute()) {
        log.warn(""String_Node_Str"" + task.getName());
      }
 else {
        if (log.isInfoEnabled()) {
          log.info(""String_Node_Str"" + task.getName());
        }
        System.out.println(""String_Node_Str"" + task.getName());
      }
    }
    monitor.worked(1);
  }
  monitor.done();
}","/** 
 * DOC bZhou Comment method ""doMigrationTask"".
 * @param tasks
 * @param monitor
 */
public static void doMigrationTask(List<IMigrationTask> tasks,IProgressMonitor monitor){
  if (monitor == null) {
    monitor=new NullProgressMonitor();
  }
  monitor.beginTask(""String_Node_Str"",tasks.size());
  for (  IMigrationTask task : tasks) {
    if (monitor.isCanceled()) {
      break;
    }
    monitor.subTask(task.getName());
    if (task.valid()) {
      if (!task.execute()) {
        log.error(""String_Node_Str"" + task.getName());
      }
 else {
        if (log.isInfoEnabled()) {
          log.info(""String_Node_Str"" + task.getName());
        }
        System.out.println(""String_Node_Str"" + task.getName());
      }
    }
    monitor.worked(1);
  }
  monitor.done();
}",0.6439150032195751
138660,"@Override protected boolean doExecute() throws Exception {
  EMFUtil emfUtil=new EMFUtil();
  for (  File file : fileList) {
    if (file.isFile()) {
      URI uri=URI.createFileURI(file.getAbsolutePath());
      System.out.println(""String_Node_Str"" + uri.toString());
      EObject eObject=null;
      try {
        Resource resource=emfUtil.getResourceSet().getResource(uri,true);
        eObject=resource.getContents().get(0);
        if (FactoriesUtil.isProvFile(uri.fileExtension())) {
          for (          EObject object : resource.getContents()) {
            if (object instanceof Connection) {
              eObject=object;
              break;
            }
          }
        }
      }
 catch (      Exception e) {
        log.warn(""String_Node_Str"" + file.getAbsolutePath(),e);
      }
      if (eObject != null) {
        if (eObject instanceof ModelElement) {
          ModelElement modelElement=(ModelElement)eObject;
          AElementPersistance writer=ElementWriterFactory.getInstance().create(uri.fileExtension());
          Property oldPropery=PropertyHelper.getProperty(modelElement);
          if (writer != null) {
            Property property=writer.initProperty(modelElement);
            if (oldPropery != null) {
              property.setId(oldPropery.getId());
              property.setAuthor(oldPropery.getAuthor());
              property.getItem().setState(oldPropery.getItem().getState());
            }
            if (file.getName().endsWith(""String_Node_Str"")) {
              System.out.println(""String_Node_Str"");
            }
            String statePathStr=PropertyHelper.computePath(property,file);
            property.getItem().getState().setPath(statePathStr);
            URI propURI=uri.trimFileExtension().appendFileExtension(FactoriesUtil.PROPERTIES_EXTENSION);
            Resource propResource=emfUtil.getResourceSet().createResource(propURI);
            propResource.getContents().add(property);
            propResource.getContents().add(property.getItem());
            propResource.getContents().add(property.getItem().getState());
            EMFUtil.saveResource(propResource);
          }
 else {
            log.warn(""String_Node_Str"" + modelElement.getName() + ""String_Node_Str"");
          }
        }
 else {
          log.warn(""String_Node_Str"" + eObject.toString());
        }
      }
    }
  }
  emfUtil=null;
  return true;
}","@Override protected boolean doExecute() throws Exception {
  boolean ok=true;
  EMFUtil emfUtil=new EMFUtil();
  for (  File file : fileList) {
    if (file.isFile()) {
      URI uri=URI.createFileURI(file.getAbsolutePath());
      if (log.isDebugEnabled()) {
        log.debug(""String_Node_Str"" + uri.toString());
      }
      EObject eObject=null;
      try {
        Resource resource=emfUtil.getResourceSet().getResource(uri,true);
        eObject=resource.getContents().get(0);
        if (FactoriesUtil.isProvFile(uri.fileExtension())) {
          for (          EObject object : resource.getContents()) {
            if (object instanceof Connection) {
              eObject=object;
              break;
            }
          }
        }
      }
 catch (      Exception e) {
        log.warn(""String_Node_Str"" + file.getAbsolutePath(),e);
        ok=false;
      }
      if (eObject != null) {
        if (eObject instanceof ModelElement) {
          try {
            saveObject(emfUtil,file,uri,eObject);
          }
 catch (          Exception e) {
            log.error(""String_Node_Str"" + eObject + ""String_Node_Str""+ file+ ""String_Node_Str""+ uri,e);
            ok=false;
          }
        }
 else {
          log.warn(""String_Node_Str"" + eObject.toString());
          ok=false;
        }
      }
    }
  }
  emfUtil=null;
  return ok;
}",0.5331557922769641
138661,"public void createOneUnit(final TreeItem treeItem,TableIndicatorUnit indicatorUnit){
  final TreeItem indicatorItem=new TreeItem(treeItem,SWT.NONE);
  final TableIndicatorUnit unit=indicatorUnit;
  IndicatorEnum type=indicatorUnit.getType();
  final IndicatorEnum indicatorEnum=type;
  indicatorItem.setData(TABLE_INDICATOR_KEY,treeItem.getData(TABLE_INDICATOR_KEY));
  indicatorItem.setData(INDICATOR_UNIT_KEY,unit);
  indicatorItem.setData(VIEWER_KEY,this);
  String label=indicatorUnit.getIndicatorName();
  if (IndicatorEnum.WhereRuleIndicatorEnum.compareTo(type) == 0) {
    indicatorItem.setImage(0,ImageLib.getImage(ImageLib.DQ_RULE));
  }
  indicatorItem.setText(0,label);
  TreeEditor optionEditor=new TreeEditor(tree);
  Label optionLabel=new Label(tree,SWT.NONE);
  optionLabel.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_WHITE));
  optionLabel.setImage(ImageLib.getImage(ImageLib.INDICATOR_OPTION));
  optionLabel.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
  optionLabel.pack();
  optionLabel.setData(indicatorUnit);
  optionLabel.addMouseListener(new MouseAdapter(){
    @Override public void mouseDown(    MouseEvent e){
      openIndicatorOptionDialog(null,indicatorItem);
    }
  }
);
  optionEditor.minimumWidth=optionLabel.getImage().getBounds().width;
  optionEditor.horizontalAlignment=SWT.CENTER;
  optionEditor.setEditor(optionLabel,indicatorItem,1);
  TreeEditor delEditor=null;
  if (!(unit.getIndicator() instanceof RowCountIndicator)) {
    delEditor=new TreeEditor(tree);
    Label delLabel=new Label(tree,SWT.NONE);
    delLabel.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_WHITE));
    delLabel.setImage(ImageLib.getImage(ImageLib.DELETE_ACTION));
    delLabel.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
    delLabel.pack();
    delLabel.addMouseListener(new MouseAdapter(){
      @Override public void mouseDown(      MouseEvent e){
        deleteIndicatorItems((TableIndicator)treeItem.getData(TABLE_INDICATOR_KEY),unit);
        if (indicatorItem.getParentItem() != null && indicatorItem.getParentItem().getData(INDICATOR_UNIT_KEY) != null) {
          setElements(tableIndicators);
        }
 else {
          removeItemBranch(indicatorItem);
          indicatorTreeItemMap.remove(unit);
        }
      }
    }
);
    delEditor.minimumWidth=delLabel.getImage().getBounds().width;
    delEditor.horizontalAlignment=SWT.CENTER;
    delEditor.setEditor(delLabel,indicatorItem,2);
  }
  if (delEditor == null) {
    indicatorItem.setData(ITEM_EDITOR_KEY,new TreeEditor[]{optionEditor});
  }
 else {
    indicatorItem.setData(ITEM_EDITOR_KEY,new TreeEditor[]{optionEditor,delEditor});
  }
  if (indicatorEnum != null && indicatorEnum.hasChildren()) {
    indicatorItem.setData(treeItem.getData(TABLE_INDICATOR_KEY));
    createIndicatorItems(indicatorItem,indicatorUnit.getChildren());
  }
  createIndicatorParameters(indicatorItem,indicatorUnit);
  this.indicatorTreeItemMap.put(unit,indicatorItem);
}","public void createOneUnit(final TreeItem treeItem,TableIndicatorUnit indicatorUnit){
  final TreeItem indicatorItem=new TreeItem(treeItem,SWT.NONE);
  final TableIndicatorUnit unit=indicatorUnit;
  IndicatorEnum type=indicatorUnit.getType();
  final IndicatorEnum indicatorEnum=type;
  indicatorItem.setData(TABLE_INDICATOR_KEY,treeItem.getData(TABLE_INDICATOR_KEY));
  indicatorItem.setData(INDICATOR_UNIT_KEY,unit);
  indicatorItem.setData(VIEWER_KEY,this);
  String label=indicatorUnit.getIndicatorName();
  if (IndicatorEnum.WhereRuleIndicatorEnum.compareTo(type) == 0) {
    indicatorItem.setImage(0,ImageLib.getImage(ImageLib.DQ_RULE));
  }
  indicatorItem.setText(0,label != null ? label : ""String_Node_Str"");
  TreeEditor optionEditor=new TreeEditor(tree);
  Label optionLabel=new Label(tree,SWT.NONE);
  optionLabel.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_WHITE));
  optionLabel.setImage(ImageLib.getImage(ImageLib.INDICATOR_OPTION));
  optionLabel.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
  optionLabel.pack();
  optionLabel.setData(indicatorUnit);
  optionLabel.addMouseListener(new MouseAdapter(){
    @Override public void mouseDown(    MouseEvent e){
      openIndicatorOptionDialog(null,indicatorItem);
    }
  }
);
  optionEditor.minimumWidth=optionLabel.getImage().getBounds().width;
  optionEditor.horizontalAlignment=SWT.CENTER;
  optionEditor.setEditor(optionLabel,indicatorItem,1);
  TreeEditor delEditor=null;
  if (!(unit.getIndicator() instanceof RowCountIndicator)) {
    delEditor=new TreeEditor(tree);
    Label delLabel=new Label(tree,SWT.NONE);
    delLabel.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_WHITE));
    delLabel.setImage(ImageLib.getImage(ImageLib.DELETE_ACTION));
    delLabel.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
    delLabel.pack();
    delLabel.addMouseListener(new MouseAdapter(){
      @Override public void mouseDown(      MouseEvent e){
        deleteIndicatorItems((TableIndicator)treeItem.getData(TABLE_INDICATOR_KEY),unit);
        if (indicatorItem.getParentItem() != null && indicatorItem.getParentItem().getData(INDICATOR_UNIT_KEY) != null) {
          setElements(tableIndicators);
        }
 else {
          removeItemBranch(indicatorItem);
          indicatorTreeItemMap.remove(unit);
        }
      }
    }
);
    delEditor.minimumWidth=delLabel.getImage().getBounds().width;
    delEditor.horizontalAlignment=SWT.CENTER;
    delEditor.setEditor(delLabel,indicatorItem,2);
  }
  if (delEditor == null) {
    indicatorItem.setData(ITEM_EDITOR_KEY,new TreeEditor[]{optionEditor});
  }
 else {
    indicatorItem.setData(ITEM_EDITOR_KEY,new TreeEditor[]{optionEditor,delEditor});
  }
  if (indicatorEnum != null && indicatorEnum.hasChildren()) {
    indicatorItem.setData(treeItem.getData(TABLE_INDICATOR_KEY));
    createIndicatorItems(indicatorItem,indicatorUnit.getChildren());
  }
  createIndicatorParameters(indicatorItem,indicatorUnit);
  this.indicatorTreeItemMap.put(unit,indicatorItem);
}",0.9940515532055518
138662,"/** 
 * DOC xqliu Comment method ""getOwnedWhereRuleFiles"". ADD xqliu 2009-04-30 bug 6808
 * @param tableIndicator
 * @param whereRuleFolder
 * @return
 */
private Object[] getOwnedWhereRuleFiles(TableIndicator tableIndicator,IFolder whereRuleFolder){
  ArrayList ret=new ArrayList();
  Indicator[] indicators=tableIndicator.getIndicators();
  for (  Indicator indicator : indicators) {
    Object obj=indicator.getIndicatorDefinition();
    if (obj != null && obj instanceof WhereRule) {
      WhereRule wr=(WhereRule)obj;
      ret.add(DQRuleResourceFileHelper.getInstance().getWhereRuleFile(wr,new IFolder[]{whereRuleFolder}));
    }
  }
  return ret.toArray();
}","/** 
 * DOC xqliu Comment method ""getOwnedWhereRuleFiles"". ADD xqliu 2009-04-30 bug 6808
 * @param tableIndicator
 * @param whereRuleFolder
 * @return
 */
private Object[] getOwnedWhereRuleFiles(TableIndicator tableIndicator,IFolder whereRuleFolder){
  ArrayList<IFile> ret=new ArrayList<IFile>();
  Indicator[] indicators=tableIndicator.getIndicators();
  for (  Indicator indicator : indicators) {
    Object obj=indicator.getIndicatorDefinition();
    if (obj != null && obj instanceof WhereRule) {
      WhereRule wr=(WhereRule)obj;
      ret.add(DQRuleResourceFileHelper.getInstance().getWhereRuleFile(wr,new IFolder[]{whereRuleFolder}));
    }
  }
  return ret.toArray();
}",0.9895833333333334
138663,"/** 
 * DOC rli Comment method ""createResource"".
 * @param file
 * @return
 */
public Resource getFileResource(IFile file){
  Resource res;
  if (exist(file)) {
    res=registedResourceMap.get(file);
  }
 else {
    URI uri=URI.createPlatformResourceURI(file.getFullPath().toString(),false);
    res=EMFSharedResources.getInstance().getResource(uri,true);
    register(file,res);
  }
  return res;
}","/** 
 * DOC rli Comment method ""createResource"".
 * @param file
 * @return
 */
public synchronized Resource getFileResource(IFile file){
  Resource res;
  if (exist(file)) {
    res=registedResourceMap.get(file);
  }
 else {
    URI uri=URI.createPlatformResourceURI(file.getFullPath().toString(),false);
    res=EMFSharedResources.getInstance().getResource(uri,true);
    register(file,res);
  }
  return res;
}",0.9839704069050554
138664,"/** 
 * DOC bZhou Comment method ""copyDefinitionsIntoFolder"".
 * @param destinationUri
 * @return
 */
public Resource copyDefinitionsIntoFolder(URI destinationUri){
  Resource resource=getDefCategoryResourceFromFile();
  EMFUtil.changeUri(resource,destinationUri);
  if (EMFUtil.saveResource(resource)) {
    if (log.isInfoEnabled()) {
      log.info(""String_Node_Str"" + resource.getURI());
    }
  }
 else {
    log.error(""String_Node_Str"" + resource.getURI());
  }
  return resource;
}","/** 
 * DOC bZhou Comment method ""copyDefinitionsIntoFolder"".
 * @param destinationUri
 * @return
 */
public Resource copyDefinitionsIntoFolder(URI destinationUri){
  URI uri=URI.createPlatformPluginURI(PLUGIN_PATH,false);
  Resource resource=EMFSharedResources.getInstance().getResource(uri,true);
  EMFUtil.changeUri(resource,destinationUri);
  if (EMFSharedResources.getInstance().saveResource(resource)) {
    if (log.isInfoEnabled()) {
      log.info(""String_Node_Str"" + resource.getURI());
    }
  }
 else {
    log.error(""String_Node_Str"" + resource.getURI());
  }
  return resource;
}",0.7432808155699722
138665,"/** 
 * DOC mzhao Get definition category files from file.
 * @return
 */
private Resource getDefCategoryResourceFromFile(){
  EMFUtil util=new EMFUtil();
  Resource definitionsFile=null;
  IPath definitionPath=ResourceManager.getLibrariesFolder().getFullPath().append(FILENAME);
  URI uri=URI.createPlatformResourceURI(definitionPath.toString(),false);
  try {
    definitionsFile=util.getResourceSet().getResource(uri,true);
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + uri);
    }
  }
 catch (  RuntimeException e) {
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + e.getMessage(),e);
    }
  }
  if (definitionsFile == null) {
    uri=URI.createPlatformPluginURI(PLUGIN_PATH,false);
    try {
      definitionsFile=util.getResourceSet().getResource(uri,true);
      if (log.isDebugEnabled()) {
        log.debug(""String_Node_Str"" + uri);
      }
    }
 catch (    RuntimeException e) {
      if (log.isDebugEnabled()) {
        log.debug(""String_Node_Str"" + e.getMessage(),e);
      }
    }
  }
  if (definitionsFile == null) {
    definitionsFile=util.getResourceSet().getResource(URI.createFileURI(""String_Node_Str"" + File.separator + PLUGIN_PATH),true);
  }
  if (definitionsFile == null) {
    log.error(""String_Node_Str"" + PLUGIN_PATH + ""String_Node_Str""+ uri);
    return null;
  }
  return definitionsFile;
}","/** 
 * DOC mzhao Get definition category files from file.
 * @return
 */
private Resource getDefCategoryResourceFromFile(){
  Resource definitionsFile=null;
  IPath definitionPath=ResourceManager.getLibrariesFolder().getFullPath().append(FILENAME);
  URI uri=URI.createPlatformResourceURI(definitionPath.toString(),false);
  try {
    definitionsFile=EMFSharedResources.getInstance().getResource(uri,true);
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + uri);
    }
  }
 catch (  RuntimeException e) {
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + e.getMessage(),e);
    }
  }
  if (definitionsFile == null) {
    uri=URI.createPlatformPluginURI(PLUGIN_PATH,false);
    try {
      definitionsFile=EMFSharedResources.getInstance().getResource(uri,true);
      if (log.isDebugEnabled()) {
        log.debug(""String_Node_Str"" + uri);
      }
    }
 catch (    RuntimeException e) {
      if (log.isDebugEnabled()) {
        log.debug(""String_Node_Str"" + e.getMessage(),e);
      }
    }
  }
  if (definitionsFile == null) {
    definitionsFile=EMFSharedResources.getInstance().getResource(URI.createFileURI(""String_Node_Str"" + File.separator + PLUGIN_PATH),true);
  }
  if (definitionsFile == null) {
    log.error(""String_Node_Str"" + PLUGIN_PATH + ""String_Node_Str""+ uri);
    return null;
  }
  return definitionsFile;
}",0.935045871559633
138666,"private IndicatorCategory getIndicatorCategory(String categoryId){
  for (  IndicatorCategory indCategory : indicatorCategories) {
    CwmResource resource=(CwmResource)indCategory.eResource();
    EObject object=resource.getEObject(categoryId);
    if (object != null && DefinitionPackage.eINSTANCE.getIndicatorCategory().equals(object.eClass())) {
      return (IndicatorCategory)object;
    }
  }
  return null;
}","private IndicatorCategory getIndicatorCategory(String categoryId){
  for (  IndicatorCategory indCategory : indicatorCategories) {
    CwmResource resource=(CwmResource)indCategory.eResource();
    if (resource != null) {
      EObject object=resource.getEObject(categoryId);
      if (object != null && DefinitionPackage.eINSTANCE.getIndicatorCategory().equals(object.eClass())) {
        return (IndicatorCategory)object;
      }
    }
  }
  return null;
}",0.9519450800915332
138667,"public Resource getResource(URI uri,boolean loadOnDemand){
  return resourceSet.getResource(uri,loadOnDemand);
}","public Resource getResource(IFile file,boolean loadOnDemand){
  URI uri=URI.createPlatformResourceURI(file.getFullPath().toString(),false);
  return getResource(uri,loadOnDemand);
}",0.6552901023890785
138668,"/** 
 * DOC scorreia Comment method ""getSharedEmfUtil"".
 * @return
 * @deprecated do not use directly EMFUtil.TODO rli use  {@link #saveAll()} method when needed.TODO rli create other methods in this class when needed.
 */
public static EMFUtil getSharedEmfUtil(){
  return getInstance().getEmfUtil();
}","/** 
 * DOC scorreia Comment method ""getSharedEmfUtil"".
 * @return
 * @deprecated do not use directly EMFUtil.TODO rli use  {@link #saveAll()} method when needed.TODO rli create other methods in this class when needed.
 */
public static EMFUtil getSharedEmfUtil(){
  return getInstance().emfUtil;
}",0.9883527454242927
138669,"/** 
 * Method ""saveResource"" saves the resources of the resourceSet.
 * @return true when ok
 */
public boolean saveResource(Resource resource){
  return EMFUtil.saveResource(resource);
}","/** 
 * Method ""saveResource"" saves the resources of the resourceSet.
 * @return true when ok
 */
public boolean saveResource(Resource resource){
  try {
    resourceManager.saveResource(resource);
    return true;
  }
 catch (  PersistenceException e) {
    return false;
  }
}",0.7510729613733905
138670,"protected Collection<Analysis> searchAllAnalysis(IFolder folder){
  Collection<Analysis> analyses=new ArrayList<Analysis>();
  ResourceSet resoruceSet=new ResourceSetImpl();
  try {
    for (    IResource resource : folder.members()) {
      if (resource.getType() == IResource.FOLDER) {
        analyses.addAll(searchAllAnalysis(folder.getFolder(resource.getName())));
        continue;
      }
      IFile file=(IFile)resource;
      if (file.getFileExtension().equals(FactoriesUtil.ANA)) {
        URI uri=URI.createPlatformResourceURI(file.getFullPath().toString(),false);
        Resource eResource=resoruceSet.getResource(uri,true);
        analyses.add((Analysis)eResource.getContents().get(0));
      }
    }
  }
 catch (  Exception e) {
    log.error(e);
  }
  return analyses;
}","protected Collection<Analysis> searchAllAnalysis(IFolder folder){
  Collection<Analysis> analyses=new ArrayList<Analysis>();
  try {
    for (    IResource resource : folder.members()) {
      if (resource.getType() == IResource.FOLDER) {
        analyses.addAll(searchAllAnalysis(folder.getFolder(resource.getName())));
        continue;
      }
      IFile file=(IFile)resource;
      if (file.getFileExtension().equals(FactoriesUtil.ANA)) {
        URI uri=URI.createPlatformResourceURI(file.getFullPath().toString(),false);
        Resource eResource=EMFSharedResources.getInstance().getResource(uri,true);
        analyses.add((Analysis)eResource.getContents().get(0));
      }
    }
  }
 catch (  Exception e) {
    log.error(e);
  }
  return analyses;
}",0.9418604651162792
138671,"static void addDenpendencyElements(ModelElement[] children){
  for (int i=0; i < children.length; i++) {
    EList<Dependency> supplierDependencies=children[i].getSupplierDependency();
    ImpactNode impactNode;
    for (    Dependency dependency : supplierDependencies) {
      EList<ModelElement> clients=dependency.getClient();
      for (      ModelElement client : clients) {
        impactNode=new ImpactNode(client);
        int index=impactNodes.indexOf(impactNode);
        if (index == -1) {
          impactNode.addRequireModelElement(children[i]);
          impactNodes.add(impactNode);
        }
 else {
          ImpactNode existNode=impactNodes.get(index);
          existNode.addRequireModelElement(children[i]);
        }
      }
    }
  }
}","static void addDenpendencyElements(ModelElement[] children){
  for (int i=0; i < children.length; i++) {
    EList<Dependency> supplierDependencies=children[i].getSupplierDependency();
    ImpactNode impactNode;
    for (    Dependency dependency : supplierDependencies) {
      EList<ModelElement> clients=dependency.getClient();
      for (      ModelElement client : clients) {
        if (!client.eIsProxy()) {
          impactNode=new ImpactNode(client);
          int index=impactNodes.indexOf(impactNode);
          if (index == -1) {
            impactNode.addRequireModelElement(children[i]);
            impactNodes.add(impactNode);
          }
 else {
            ImpactNode existNode=impactNodes.get(index);
            existNode.addRequireModelElement(children[i]);
          }
        }
      }
    }
  }
}",0.9607097591888466
138672,"/** 
 * add zshen feature 12919.
 */
protected Composite createjavaEnginSection(Composite sectionClient){
  AnalysisParameters anaParameters=analysisHandler.getAnalysis().getParameters();
  Composite javaEnginSection=toolkit.createComposite(sectionClient);
  Composite checkSection=toolkit.createComposite(javaEnginSection);
  Composite numberSection=toolkit.createComposite(javaEnginSection);
  GridLayout gridLayout=new GridLayout(2,false);
  gridLayout.marginWidth=0;
  GridDataFactory.fillDefaults().grab(true,false).span(2,0).align(SWT.FILL,SWT.BEGINNING).applyTo(javaEnginSection);
  GridDataFactory.fillDefaults().grab(true,false).span(2,0).align(SWT.FILL,SWT.BEGINNING).applyTo(checkSection);
  GridDataFactory.fillDefaults().grab(true,false).span(2,0).align(SWT.FILL,SWT.BEGINNING).applyTo(numberSection);
  javaEnginSection.setLayout(gridLayout);
  checkSection.setLayout(gridLayout);
  numberSection.setLayout(gridLayout);
  drillDownCheck=toolkit.createButton(checkSection,""String_Node_Str"",SWT.CHECK);
  drillDownCheck.setSelection(true);
  drillDownCheck.setSelection(anaParameters.isStoreData());
  drillDownCheck.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      setDirty(true);
    }
  }
);
  Label maxNumLabel=toolkit.createLabel(numberSection,DefaultMessagesImpl.getString(""String_Node_Str""));
  maxNumText=toolkit.createText(numberSection,null,SWT.BORDER);
  maxNumText.setText(String.valueOf(anaParameters.getMaxNumberRows()));
  maxNumText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      String textContent=maxNumText.getText();
      if (stringUtil.isANum(textContent)) {
        setDirty(true);
      }
 else {
        MessageDialog.openWarning(e.display.getActiveShell(),DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str""));
        maxNumText.setText(textContent.substring(0,textContent.length() - 1));
      }
    }
  }
);
  GridDataFactory.fillDefaults().grab(true,false).applyTo(maxNumText);
  GridDataFactory.fillDefaults().align(SWT.BEGINNING,SWT.BEGINNING).applyTo(maxNumLabel);
  GridDataFactory.fillDefaults().grab(true,false).align(SWT.FILL,SWT.BEGINNING).applyTo(drillDownCheck);
  return javaEnginSection;
}","/** 
 * add zshen feature 12919.
 */
protected Composite createjavaEnginSection(Composite sectionClient){
  AnalysisParameters anaParameters=analysisHandler.getAnalysis().getParameters();
  Composite javaEnginSection=toolkit.createComposite(sectionClient);
  Composite checkSection=toolkit.createComposite(javaEnginSection);
  Composite numberSection=toolkit.createComposite(javaEnginSection);
  GridLayout gridLayout=new GridLayout(2,false);
  gridLayout.marginWidth=0;
  GridDataFactory.fillDefaults().grab(true,false).span(2,0).align(SWT.FILL,SWT.BEGINNING).applyTo(javaEnginSection);
  GridDataFactory.fillDefaults().grab(true,false).span(2,0).align(SWT.FILL,SWT.BEGINNING).applyTo(checkSection);
  GridDataFactory.fillDefaults().grab(true,false).span(2,0).align(SWT.FILL,SWT.BEGINNING).applyTo(numberSection);
  javaEnginSection.setLayout(gridLayout);
  checkSection.setLayout(gridLayout);
  numberSection.setLayout(gridLayout);
  toolkit.createLabel(checkSection,DefaultMessagesImpl.getString(""String_Node_Str""));
  drillDownCheck=toolkit.createButton(checkSection,""String_Node_Str"",SWT.CHECK);
  drillDownCheck.setSelection(true);
  drillDownCheck.setSelection(anaParameters.isStoreData());
  drillDownCheck.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      setDirty(true);
    }
  }
);
  Label maxNumLabel=toolkit.createLabel(numberSection,DefaultMessagesImpl.getString(""String_Node_Str""));
  maxNumText=toolkit.createText(numberSection,null,SWT.BORDER);
  maxNumText.setText(String.valueOf(anaParameters.getMaxNumberRows()));
  maxNumText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      String textContent=maxNumText.getText();
      if (stringUtil.isANum(textContent)) {
        setDirty(true);
      }
 else {
        MessageDialog.openWarning(e.display.getActiveShell(),DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str""));
        maxNumText.setText(textContent.substring(0,textContent.length() - 1));
      }
    }
  }
);
  GridDataFactory.fillDefaults().grab(true,false).applyTo(maxNumText);
  GridDataFactory.fillDefaults().align(SWT.BEGINNING,SWT.BEGINNING).applyTo(maxNumLabel);
  GridDataFactory.fillDefaults().grab(true,false).align(SWT.FILL,SWT.BEGINNING).applyTo(drillDownCheck);
  return javaEnginSection;
}",0.9816474605207
138673,"protected Collection<Analysis> searchAllAnalysis(IFolder folder){
  Collection<Analysis> analyses=new ArrayList<Analysis>();
  try {
    for (    IResource resource : folder.members()) {
      if (resource.getType() == IResource.FOLDER) {
        analyses.addAll(searchAllAnalysis(folder.getFolder(resource.getName())));
        continue;
      }
      IFile file=(IFile)resource;
      if (null != file.getFileExtension() && file.getFileExtension().equals(FactoriesUtil.ANA)) {
        URI uri=URI.createPlatformResourceURI(file.getFullPath().toString(),false);
        Resource eResource=EMFSharedResources.getInstance().getResource(uri,true);
        analyses.add((Analysis)eResource.getContents().get(0));
      }
    }
  }
 catch (  Exception e) {
    log.error(e);
  }
  return analyses;
}","protected Collection<Analysis> searchAllAnalysis(IFolder folder){
  Collection<Analysis> analyses=new ArrayList<Analysis>();
  try {
    for (    IResource resource : folder.members()) {
      if (resource.getType() == IResource.FOLDER) {
        if (!resource.getName().startsWith(""String_Node_Str"")) {
          analyses.addAll(searchAllAnalysis(folder.getFolder(resource.getName())));
        }
        continue;
      }
      IFile file=(IFile)resource;
      if (null != file.getFileExtension() && file.getFileExtension().equals(FactoriesUtil.ANA)) {
        URI uri=URI.createPlatformResourceURI(file.getFullPath().toString(),false);
        Resource eResource=EMFSharedResources.getInstance().getResource(uri,true);
        if (!eResource.getContents().isEmpty()) {
          analyses.add((Analysis)eResource.getContents().get(0));
        }
      }
    }
  }
 catch (  Exception e) {
    log.error(e);
  }
  return analyses;
}",0.8687102371312898
138674,"public void write(ItemRecord[] records,IProgressMonitor monitor){
  if (monitor == null) {
    monitor=new NullProgressMonitor();
  }
  try {
    for (    ItemRecord record : records) {
      if (monitor.isCanceled()) {
        break;
      }
      Map<IPath,IPath> toImportMap=mapping(record);
      monitor.subTask(""String_Node_Str"" + record.getName());
      if (record.isValid()) {
        log.info(""String_Node_Str"" + record.getFile().getAbsolutePath());
        for (        IPath resPath : toImportMap.keySet()) {
          IPath desPath=toImportMap.get(resPath);
          write(resPath,desPath);
        }
      }
 else {
        for (        String error : record.getErrors()) {
          log.error(error);
        }
      }
      monitor.worked(1);
    }
    finish(records,monitor);
  }
 catch (  Exception e) {
    log.error(e,e);
  }
}","public void write(ItemRecord[] records,IProgressMonitor monitor){
  if (monitor == null) {
    monitor=new NullProgressMonitor();
  }
  final ItemRecord[] fRecords=records;
  final IProgressMonitor fMonitor=monitor;
  RepositoryWorkUnit<Object> workUnit=new RepositoryWorkUnit<Object>(""String_Node_Str""){
    @Override protected void run(){
      try {
        for (        ItemRecord record : fRecords) {
          if (fMonitor.isCanceled()) {
            break;
          }
          Map<IPath,IPath> toImportMap=mapping(record);
          fMonitor.subTask(""String_Node_Str"" + record.getName());
          if (record.isValid()) {
            log.info(""String_Node_Str"" + record.getFile().getAbsolutePath());
            for (            IPath resPath : toImportMap.keySet()) {
              IPath desPath=toImportMap.get(resPath);
              write(resPath,desPath);
            }
          }
 else {
            for (            String error : record.getErrors()) {
              log.error(error);
            }
          }
          fMonitor.worked(1);
        }
        finish(fRecords,fMonitor);
      }
 catch (      Exception e) {
        log.error(e,e);
      }
    }
  }
;
  workUnit.setAvoidUnloadResources(Boolean.TRUE);
  ProxyRepositoryFactory.getInstance().executeRepositoryWorkUnit(workUnit);
}",0.7255900046274872
138675,"public DQRespositoryView(){
  super();
  final DQStructureManager manager=DQStructureManager.getInstance();
  if (manager.isNeedCreateStructure()) {
    ProxyRepositoryFactory.getInstance().executeRepositoryWorkUnit(new RepositoryWorkUnit(""String_Node_Str""){
      @Override protected void run(){
        manager.createDQStructure();
      }
    }
);
  }
  if (manager.isNeedMigration()) {
    try {
      MigrationTaskManager.doMigrationTask(MigrationTaskManager.findWorksapceTasks());
    }
 catch (    Exception e) {
      log.error(e,e);
    }
  }
}","public DQRespositoryView(){
  super();
  final DQStructureManager manager=DQStructureManager.getInstance();
  if (manager.isNeedCreateStructure()) {
    ProxyRepositoryFactory.getInstance().executeRepositoryWorkUnit(new RepositoryWorkUnit<Object>(""String_Node_Str""){
      @Override protected void run(){
        manager.createDQStructure();
      }
    }
);
  }
  if (manager.isNeedMigration()) {
    try {
      MigrationTaskManager.doMigrationTask(MigrationTaskManager.findWorksapceTasks());
    }
 catch (    Exception e) {
      log.error(e,e);
    }
  }
}",0.992818671454219
138676,"/** 
 * Method ""createDataProvider"" create the data provider, the catalogs and the schemas. The created data provider and its related Catalog and Schemas are stored in the DBConnect class. In order to finally serialize them in a file, the method   {@link DBConnect#saveInFiles()} must be called.
 * @param connector the helper for building CWM objects from a connection
 * @param folderProvider contains the path where the file will be stored.
 * @return the data provider
 * @throws SQLException
 * @throws TalendException
 */
public static Connection createDataProvider(DBConnect connector) throws SQLException, TalendException {
  checkConnection(connector);
  Connection dataProvider=getTdDataProvider(connector);
  if (connector.retrieveDeployedSystemInformations()) {
    TdSoftwareSystem softwareSystem=connector.getSoftwareSystem();
    if (softwareSystem != null) {
      ConnectionHelper.setSoftwareSystem(dataProvider,softwareSystem);
    }
  }
  Collection<Catalog> catalogs=getCatalogs(connector);
  Collection<Schema> schemata=getSchemata(connector);
  boolean allAdded=false;
  String dbType=connector.getDbConnectionParameter().getSqlTypeName();
  if (catalogs.isEmpty()) {
    allAdded=ConnectionHelper.addSchemas(schemata,dataProvider);
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + schemata.size() + ""String_Node_Str""+ allAdded);
    }
  }
 else {
    allAdded=ConnectionHelper.addCatalogs(catalogs,dataProvider);
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + catalogs.size() + ""String_Node_Str""+ allAdded);
    }
  }
  if (log.isInfoEnabled()) {
    log.info(catalogs.size() + ""String_Node_Str"");
    log.info(schemata.size() + ""String_Node_Str"");
    if (schemata.size() == 0 && SupportDBUrlType.ORACLEWITHSIDDEFAULTURL.getLanguage().equals(dbType)) {
      throw new TalendException(""String_Node_Str"");
    }
  }
  if (log.isDebugEnabled()) {
    printInformations(catalogs,schemata);
  }
  if (!ReponsitoryContextBridge.isDefautProject()) {
    EDatabaseTypeName edatabasetypeInstance=EDatabaseTypeName.getTypeFromDisplayName(dbType);
    String product=edatabasetypeInstance.getProduct();
    String additionalParams=((DatabaseConnection)dataProvider).getAdditionalParams();
    if (additionalParams == null) {
      ((DatabaseConnection)dataProvider).setAdditionalParams(connector.getDbConnectionParameter().getaDDParameter());
    }
    if (edatabasetypeInstance.isNeedSchema()) {
      if (schemata.size() == 0 && catalogs.size() > 0) {
        schemata=CatalogHelper.getSchemas(SwitchHelpers.CATALOG_SWITCH.doSwitch((CatalogImpl)catalogs.toArray()[0]));
      }
      if (edatabasetypeInstance.getSchemaMappingField() == EDatabaseSchemaOrCatalogMapping.Schema && schemata.size() > 0) {
        Iterator<Schema> iter=schemata.iterator();
        while (iter.hasNext()) {
          String uischema=iter.next().getName();
          ((DatabaseConnection)dataProvider).setUiSchema(uischema);
          break;
        }
      }
    }
    String dbname=connector.getDbConnectionParameter().getDbName();
    if ((dbname == null || ""String_Node_Str"".equals(dbname)) && catalogs != null) {
      Iterator<Catalog> iter=catalogs.iterator();
      while (iter.hasNext()) {
        String sid=iter.next().getName();
        ((DatabaseConnection)dataProvider).setSID(sid);
        connector.getDbConnectionParameter().setDbName(sid);
        break;
      }
    }
    String mapping=MetadataTalendType.getDefaultDbmsFromProduct(product).getId();
    if (dataProvider instanceof DatabaseConnection) {
      ((DatabaseConnection)dataProvider).setProductId(product);
      ((DatabaseConnection)dataProvider).setDbmsId(mapping);
      int versionNum=connector.getConnection().getMetaData().getDatabaseMajorVersion();
      String connectionDbType=((DatabaseConnection)dataProvider).getDatabaseType();
      if (connectionDbType == null) {
        connectionDbType=connector.getDbConnectionParameter().getSqlTypeName();
        ((DatabaseConnection)dataProvider).setDatabaseType(connectionDbType);
      }
      List<EDatabaseVersion4Drivers> dbTypeList=EDatabaseVersion4Drivers.indexOfByDbType(connectionDbType);
      if (dbTypeList.size() == 1) {
        ((DatabaseConnection)dataProvider).setDbVersionString(dbTypeList.get(0).getVersionValue());
      }
 else       if (dbTypeList.size() > 1) {
        for (        EDatabaseVersion4Drivers eDatabaseVersion : dbTypeList) {
          String[] strArray=eDatabaseVersion.getVersionValue().split(""String_Node_Str"");
          if (strArray.length > 1 && strArray[1].startsWith(Integer.toString(versionNum))) {
            ((DatabaseConnection)dataProvider).setDbVersionString(eDatabaseVersion.getVersionValue());
            break;
          }
        }
      }
    }
  }
  return dataProvider;
}","/** 
 * Method ""createDataProvider"" create the data provider, the catalogs and the schemas. The created data provider and its related Catalog and Schemas are stored in the DBConnect class. In order to finally serialize them in a file, the method   {@link DBConnect#saveInFiles()} must be called.
 * @param connector the helper for building CWM objects from a connection
 * @param folderProvider contains the path where the file will be stored.
 * @return the data provider
 * @throws SQLException
 * @throws TalendException
 */
public static Connection createDataProvider(DBConnect connector) throws SQLException, TalendException {
  checkConnection(connector);
  Connection dataProvider=getTdDataProvider(connector);
  if (connector.retrieveDeployedSystemInformations()) {
    TdSoftwareSystem softwareSystem=connector.getSoftwareSystem();
    if (softwareSystem != null) {
      ConnectionHelper.setSoftwareSystem(dataProvider,softwareSystem);
    }
  }
  Collection<Catalog> catalogs=getCatalogs(connector);
  Collection<Schema> schemata=getSchemata(connector);
  boolean allAdded=false;
  String dbType=connector.getDbConnectionParameter().getSqlTypeName();
  if (catalogs.isEmpty()) {
    allAdded=ConnectionHelper.addSchemas(schemata,dataProvider);
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + schemata.size() + ""String_Node_Str""+ allAdded);
    }
  }
 else {
    allAdded=ConnectionHelper.addCatalogs(catalogs,dataProvider);
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + catalogs.size() + ""String_Node_Str""+ allAdded);
    }
  }
  if (log.isInfoEnabled()) {
    log.info(catalogs.size() + ""String_Node_Str"");
    log.info(schemata.size() + ""String_Node_Str"");
    if (schemata.size() == 0 && SupportDBUrlType.ORACLEWITHSIDDEFAULTURL.getLanguage().equals(dbType)) {
      throw new TalendException(""String_Node_Str"");
    }
  }
  if (log.isDebugEnabled()) {
    printInformations(catalogs,schemata);
  }
  if (!ReponsitoryContextBridge.isDefautProject()) {
    EDatabaseTypeName edatabasetypeInstance=EDatabaseTypeName.getTypeFromDisplayName(dbType);
    String product=edatabasetypeInstance.getProduct();
    String additionalParams=((DatabaseConnection)dataProvider).getAdditionalParams();
    if (additionalParams == null) {
      ((DatabaseConnection)dataProvider).setAdditionalParams(connector.getDbConnectionParameter().getaDDParameter());
    }
    if (edatabasetypeInstance.isNeedSchema()) {
      if (schemata.size() == 0 && catalogs.size() > 0) {
        schemata=CatalogHelper.getSchemas(SwitchHelpers.CATALOG_SWITCH.doSwitch((CatalogImpl)catalogs.toArray()[0]));
      }
      if (edatabasetypeInstance.getSchemaMappingField() == EDatabaseSchemaOrCatalogMapping.Schema && schemata.size() > 0) {
        Iterator<Schema> iter=schemata.iterator();
        while (iter.hasNext()) {
          String uischema=iter.next().getName();
          ((DatabaseConnection)dataProvider).setUiSchema(uischema);
          break;
        }
      }
    }
    String dbname=connector.getDbConnectionParameter().getDbName();
    if ((dbname == null || ""String_Node_Str"".equals(dbname)) && catalogs != null) {
      Iterator<Catalog> iter=catalogs.iterator();
      while (iter.hasNext()) {
        String sid=iter.next().getName();
        ((DatabaseConnection)dataProvider).setSID(sid);
        connector.getDbConnectionParameter().setDbName(sid);
        break;
      }
    }
    String mapping=MetadataTalendType.getDefaultDbmsFromProduct(product).getId();
    if (dataProvider instanceof DatabaseConnection) {
      ((DatabaseConnection)dataProvider).setProductId(product);
      ((DatabaseConnection)dataProvider).setDbmsId(mapping);
      int versionNum=0;
      try {
        versionNum=connector.getConnection().getMetaData().getDatabaseMajorVersion();
      }
 catch (      RuntimeException e) {
        if (log.isDebugEnabled()) {
          log.debug(e,e);
        }
      }
      String connectionDbType=((DatabaseConnection)dataProvider).getDatabaseType();
      if (connectionDbType == null) {
        connectionDbType=connector.getDbConnectionParameter().getSqlTypeName();
        ((DatabaseConnection)dataProvider).setDatabaseType(connectionDbType);
      }
      List<EDatabaseVersion4Drivers> dbTypeList=EDatabaseVersion4Drivers.indexOfByDbType(connectionDbType);
      if (dbTypeList.size() == 1) {
        ((DatabaseConnection)dataProvider).setDbVersionString(dbTypeList.get(0).getVersionValue());
      }
 else       if (dbTypeList.size() > 1) {
        for (        EDatabaseVersion4Drivers eDatabaseVersion : dbTypeList) {
          String[] strArray=eDatabaseVersion.getVersionValue().split(""String_Node_Str"");
          if (strArray.length > 1 && strArray[1].startsWith(Integer.toString(versionNum))) {
            ((DatabaseConnection)dataProvider).setDbVersionString(eDatabaseVersion.getVersionValue());
            break;
          }
        }
      }
    }
  }
  return dataProvider;
}",0.9838015173262252
138677,"/** 
 * DOC yyi 2009-09-23 Feature 9059
 * @param composite
 */
protected void updateDetailList(){
  if (!""String_Node_Str"".equals(comboCategory.getText())) {
    IndicatorCategory ic=UDIHelper.getUDICategory(definition);
    String purposeText=""String_Node_Str"";
    String descriptionText=""String_Node_Str"";
    for (    TaggedValue value : ic.getTaggedValue()) {
      if (""String_Node_Str"".equals(value.getTag())) {
        purposeText=DefaultMessagesImpl.getString(""String_Node_Str"") + value.getValue();
      }
 else       if (DefaultMessagesImpl.getString(""String_Node_Str"").equals(value.getTag())) {
        descriptionText=DefaultMessagesImpl.getString(""String_Node_Str"") + value.getValue();
      }
    }
    labelDetail.setText(purposeText + System.getProperty(""String_Node_Str"") + System.getProperty(""String_Node_Str"")+ descriptionText);
  }
}","/** 
 * DOC yyi 2009-09-23 Feature 9059
 * @param composite
 */
protected void updateDetailList(){
  if (!""String_Node_Str"".equals(comboCategory.getText())) {
    IndicatorCategory ic=UDIHelper.getUDICategory(definition);
    String purposeText=""String_Node_Str"";
    String descriptionText=""String_Node_Str"";
    for (    TaggedValue value : ic.getTaggedValue()) {
      if (""String_Node_Str"".equals(value.getTag())) {
        purposeText=DefaultMessagesImpl.getString(""String_Node_Str"") + value.getValue();
      }
 else       if (""String_Node_Str"".equals(value.getTag())) {
        descriptionText=DefaultMessagesImpl.getString(""String_Node_Str"") + value.getValue();
      }
    }
    labelDetail.setText(purposeText + System.getProperty(""String_Node_Str"") + System.getProperty(""String_Node_Str"")+ descriptionText);
  }
}",0.7313877307921381
138678,"/** 
 * DOC yyi 2009-09-23 Feature 9059
 * @param composite
 */
private void createDetailList(Composite composite){
  Composite compoDetail=new Composite(composite,SWT.NONE);
  compoDetail.setLayout(new GridLayout(1,false));
  GridData data=new GridData(SWT.FILL,SWT.FILL,true,true);
  data.heightHint=60;
  data.widthHint=300;
  compoDetail.setLayoutData(data);
  labelDetail=new Label(compoDetail,SWT.WRAP);
  labelDetail.setLayoutData(data);
}","/** 
 * DOC yyi 2009-09-23 Feature 9059
 * @param composite
 */
private void createDetailList(Composite composite){
  Composite compoDetail=new Composite(composite,SWT.NONE);
  compoDetail.setLayout(new GridLayout(1,false));
  GridData data=new GridData(SWT.FILL,SWT.FILL,true,true);
  data.heightHint=150;
  data.widthHint=300;
  compoDetail.setLayoutData(data);
  labelDetail=new Label(compoDetail,SWT.WRAP);
  labelDetail.setLayoutData(data);
}",0.9966405375139976
138679,"/** 
 * DOC bZhou Comment method ""createDQStructure"".
 */
public void createDQStructure(){
  Plugin plugin=CorePlugin.getDefault();
  try {
    IProject project=ResourceManager.getRootProject();
    if (!project.exists()) {
      project=createNewProject(ResourceManager.getRootProjectName());
    }
    IFolder librariesFoler=createNewFolder(project,EResourceConstant.LIBRARIES);
    IFolder patternFoler=createNewFolder(librariesFoler,EResourceConstant.PATTERNS);
    IFolder patternRegexFoler=createNewFolder(patternFoler,EResourceConstant.PATTERN_REGEX);
    IFolder patternSQLFoler=createNewFolder(patternFoler,EResourceConstant.PATTERN_SQL);
    IFolder sourceFileFoler=createNewFolder(librariesFoler,EResourceConstant.SOURCE_FILES);
    IFolder rulesFoler=createNewFolder(librariesFoler,EResourceConstant.RULES);
    IFolder rulesSQLFoler=createNewFolder(rulesFoler,EResourceConstant.RULES_SQL);
    IFolder indicatorFoler=createNewFolder(librariesFoler,EResourceConstant.INDICATORS);
    IFolder systemIndicatorFoler=createNewFolder(indicatorFoler,EResourceConstant.SYSTEM_INDICATORS);
    if (!project.getFolder(EResourceConstant.DB_CONNECTIONS.getPath()).exists()) {
      ProxyRepositoryFactory.getInstance().createFolder(ERepositoryObjectType.METADATA,Path.EMPTY,EResourceConstant.DB_CONNECTIONS.getName());
    }
    if (!project.getFolder(EResourceConstant.MDM_CONNECTIONS.getPath()).exists()) {
      ProxyRepositoryFactory.getInstance().createFolder(ERepositoryObjectType.METADATA,Path.EMPTY,EResourceConstant.MDM_CONNECTIONS.getName());
    }
    copyFilesToFolder(plugin,PATTERN_PATH,true,patternRegexFoler,null);
    copyFilesToFolder(plugin,SQL_LIKE_PATH,true,patternSQLFoler,null);
    copyFilesToFolder(plugin,DEMO_PATH,true,sourceFileFoler,null);
    copyFilesToFolder(plugin,RULES_PATH,true,rulesSQLFoler,null);
    copyFilesToFolder(plugin,SYSTEM_INDICATOR_PATH,true,systemIndicatorFoler,null);
    WorkspaceVersionHelper.storeVersion();
    ResourceService.refreshStructure();
  }
 catch (  Exception ex) {
    ExceptionHandler.process(ex);
    ProxyRepositoryManager.getInstance().save();
  }
}","/** 
 * DOC bZhou Comment method ""createDQStructure"".
 */
public void createDQStructure(){
  Plugin plugin=CorePlugin.getDefault();
  try {
    IProject project=ResourceManager.getRootProject();
    if (!project.exists()) {
      project=createNewProject(ResourceManager.getRootProjectName());
    }
    IFolder dataProfilingFolder=createNewFolder(project,EResourceConstant.DATA_PROFILING);
    IFolder analysisFoler=createNewFolder(dataProfilingFolder,EResourceConstant.ANALYSIS);
    IFolder reportFoler=createNewFolder(dataProfilingFolder,EResourceConstant.REPORTS);
    IFolder librariesFoler=createNewFolder(project,EResourceConstant.LIBRARIES);
    IFolder patternFoler=createNewFolder(librariesFoler,EResourceConstant.PATTERNS);
    IFolder patternRegexFoler=createNewFolder(patternFoler,EResourceConstant.PATTERN_REGEX);
    IFolder patternSQLFoler=createNewFolder(patternFoler,EResourceConstant.PATTERN_SQL);
    IFolder sourceFileFoler=createNewFolder(librariesFoler,EResourceConstant.SOURCE_FILES);
    IFolder rulesFoler=createNewFolder(librariesFoler,EResourceConstant.RULES);
    IFolder rulesSQLFoler=createNewFolder(rulesFoler,EResourceConstant.RULES_SQL);
    IFolder indicatorFoler=createNewFolder(librariesFoler,EResourceConstant.INDICATORS);
    IFolder systemIndicatorFoler=createNewFolder(indicatorFoler,EResourceConstant.SYSTEM_INDICATORS);
    if (!project.getFolder(EResourceConstant.DB_CONNECTIONS.getPath()).exists()) {
      ProxyRepositoryFactory.getInstance().createFolder(ERepositoryObjectType.METADATA,Path.EMPTY,EResourceConstant.DB_CONNECTIONS.getName());
    }
    if (!project.getFolder(EResourceConstant.MDM_CONNECTIONS.getPath()).exists()) {
      ProxyRepositoryFactory.getInstance().createFolder(ERepositoryObjectType.METADATA,Path.EMPTY,EResourceConstant.MDM_CONNECTIONS.getName());
    }
    copyFilesToFolder(plugin,PATTERN_PATH,true,patternRegexFoler,null);
    copyFilesToFolder(plugin,SQL_LIKE_PATH,true,patternSQLFoler,null);
    copyFilesToFolder(plugin,DEMO_PATH,true,sourceFileFoler,null);
    copyFilesToFolder(plugin,RULES_PATH,true,rulesSQLFoler,null);
    copyFilesToFolder(plugin,SYSTEM_INDICATOR_PATH,true,systemIndicatorFoler,null);
    WorkspaceVersionHelper.storeVersion();
    ResourceService.refreshStructure();
  }
 catch (  Exception ex) {
    ExceptionHandler.process(ex);
    ProxyRepositoryManager.getInstance().save();
  }
}",0.9401595744680852
138680,"@SuppressWarnings(""String_Node_Str"") public static List<Status> getTechnicalStatus(){
  org.talend.core.model.properties.Project loadProject=null;
  try {
    loadProject=loadProject();
  }
 catch (  Exception e) {
    log.error(e,e);
    return null;
  }
  if (loadProject == null) {
    return null;
  }
  return copyList(loadProject.getTechnicalStatus());
}","@SuppressWarnings(""String_Node_Str"") public static List<Status> getTechnicalStatus(){
  Project project=ReponsitoryContextBridge.getProject();
  if (project != null) {
    return copyList(project.getTechnicalStatus());
  }
 else {
    return new ArrayList<Status>();
  }
}",0.4778481012658228
138681,"protected Collection<Analysis> searchAllAnalysis(IFolder folder){
  Collection<Analysis> analyses=new ArrayList<Analysis>();
  try {
    for (    IResource resource : folder.members()) {
      if (resource.getType() == IResource.FOLDER) {
        analyses.addAll(searchAllAnalysis(folder.getFolder(resource.getName())));
        continue;
      }
      IFile file=(IFile)resource;
      if (file.getFileExtension().equals(FactoriesUtil.ANA)) {
        URI uri=URI.createPlatformResourceURI(file.getFullPath().toString(),false);
        Resource eResource=EMFSharedResources.getInstance().getResource(uri,true);
        analyses.add((Analysis)eResource.getContents().get(0));
      }
    }
  }
 catch (  Exception e) {
    log.error(e);
  }
  return analyses;
}","protected Collection<Analysis> searchAllAnalysis(IFolder folder){
  Collection<Analysis> analyses=new ArrayList<Analysis>();
  try {
    for (    IResource resource : folder.members()) {
      if (resource.getType() == IResource.FOLDER) {
        analyses.addAll(searchAllAnalysis(folder.getFolder(resource.getName())));
        continue;
      }
      IFile file=(IFile)resource;
      if (null != file.getFileExtension() && file.getFileExtension().equals(FactoriesUtil.ANA)) {
        URI uri=URI.createPlatformResourceURI(file.getFullPath().toString(),false);
        Resource eResource=EMFSharedResources.getInstance().getResource(uri,true);
        analyses.add((Analysis)eResource.getContents().get(0));
      }
    }
  }
 catch (  Exception e) {
    log.error(e);
  }
  return analyses;
}",0.977491961414791
138682,"@Override protected String createSqlStatement(Analysis analysis){
  this.cachedAnalysis=analysis;
  StringBuilder sql=new StringBuilder(""String_Node_Str"");
  EList<ModelElement> analysedElements=analysis.getContext().getAnalysedElements();
  if (analysedElements.isEmpty()) {
    this.errorMessage=Messages.getString(""String_Node_Str"",analysis.getName());
    return null;
  }
  Set<ColumnSet> fromPart=new HashSet<ColumnSet>();
  final Iterator<ModelElement> iterator=analysedElements.iterator();
  while (iterator.hasNext()) {
    ModelElement modelElement=iterator.next();
    TdColumn col=SwitchHelpers.COLUMN_SWITCH.doSwitch(modelElement);
    if (col == null) {
      this.errorMessage=Messages.getString(""String_Node_Str"",modelElement);
      return null;
    }
    Classifier owner=col.getOwner();
    if (owner == null) {
      this.errorMessage=Messages.getString(""String_Node_Str"",col.getName());
    }
    ColumnSet colSet=SwitchHelpers.COLUMN_SET_SWITCH.doSwitch(owner);
    if (colSet == null) {
      this.errorMessage=Messages.getString(""String_Node_Str"",col.getName(),colSet);
      return null;
    }
    if (!analysis.getParameters().isStoreData()) {
      sql.append(this.quote(col.getName()));
      if (iterator.hasNext()) {
        sql.append(',');
      }
    }
    fromPart.add(colSet);
  }
  if (fromPart.size() != 1) {
    log.error(""String_Node_Str"" + fromPart.size() + ""String_Node_Str"");
    this.errorMessage=""String_Node_Str"";
    return null;
  }
  if (analysis.getParameters().isStoreData()) {
    List<TdColumn> columnList=TableHelper.getColumns(SwitchHelpers.TABLE_SWITCH.doSwitch(analysedElements.get(0).eContainer()));
    Iterator<TdColumn> iter=columnList.iterator();
    while (iter.hasNext()) {
      TdColumn column=iter.next();
      sql.append(this.quote(column.getName()));
      if (iter.hasNext()) {
        sql.append(',');
      }
    }
  }
  sql.append(dbms().from());
  ModelElement element=fromPart.iterator().next();
  Package parentRelation=PackageHelper.getCatalogOrSchema(fromPart.iterator().next());
  if (parentRelation instanceof Schema) {
    sql.append(dbms().toQualifiedName(null,parentRelation.getName(),element.getName()));
  }
 else   if (parentRelation instanceof Catalog) {
    String ownerUser=null;
    if (ConnectionUtils.isSybaseeDBProducts(dbms().getDbmsName())) {
      ownerUser=ColumnSetHelper.getTableOwner((ModelElement)element);
    }
    sql.append(dbms().toQualifiedName(parentRelation.getName(),ownerUser,element.getName()));
  }
  ModelElementAnalysisHandler handler=new ModelElementAnalysisHandler();
  handler.setAnalysis(analysis);
  String stringDataFilter=handler.getStringDataFilter();
  sql.append(GenericSQLHandler.WHERE_CLAUSE);
  String sqlStatement=sql.toString();
  sqlStatement=dbms().addWhereToStatement(sqlStatement,stringDataFilter);
  return sqlStatement;
}","@Override protected String createSqlStatement(Analysis analysis){
  this.cachedAnalysis=analysis;
  StringBuilder sql=new StringBuilder(""String_Node_Str"");
  EList<ModelElement> analysedElements=analysis.getContext().getAnalysedElements();
  if (analysedElements.isEmpty()) {
    this.errorMessage=Messages.getString(""String_Node_Str"",analysis.getName());
    return null;
  }
  Set<ColumnSet> fromPart=new HashSet<ColumnSet>();
  final Iterator<ModelElement> iterator=analysedElements.iterator();
  while (iterator.hasNext()) {
    ModelElement modelElement=iterator.next();
    TdColumn col=SwitchHelpers.COLUMN_SWITCH.doSwitch(modelElement);
    if (col == null) {
      this.errorMessage=Messages.getString(""String_Node_Str"",modelElement);
      return null;
    }
    Classifier owner=col.getOwner();
    if (owner == null) {
      this.errorMessage=Messages.getString(""String_Node_Str"",col.getName());
    }
    ColumnSet colSet=SwitchHelpers.COLUMN_SET_SWITCH.doSwitch(owner);
    if (colSet == null) {
      this.errorMessage=Messages.getString(""String_Node_Str"",col.getName(),colSet);
      return null;
    }
    if (!analysis.getParameters().isStoreData()) {
      sql.append(this.quote(col.getName()));
      if (iterator.hasNext()) {
        sql.append(',');
      }
    }
    fromPart.add(colSet);
  }
  if (fromPart.size() != 1) {
    log.error(""String_Node_Str"" + fromPart.size() + ""String_Node_Str"");
    this.errorMessage=""String_Node_Str"";
    return null;
  }
  if (analysis.getParameters().isStoreData()) {
    List<TdColumn> columnList=TableHelper.getColumns(SwitchHelpers.TABLE_SWITCH.doSwitch(analysedElements.get(0).eContainer()));
    Iterator<TdColumn> iter=columnList.iterator();
    while (iter.hasNext()) {
      TdColumn column=iter.next();
      sql.append(this.quote(column.getName()));
      if (iter.hasNext()) {
        sql.append(',');
      }
    }
  }
  sql.append(dbms().from());
  ModelElement element=fromPart.iterator().next();
  Package parentRelation=PackageHelper.getParentPackage((MetadataTable)fromPart.iterator().next());
  if (parentRelation instanceof Schema) {
    sql.append(dbms().toQualifiedName(null,parentRelation.getName(),element.getName()));
  }
 else   if (parentRelation instanceof Catalog) {
    String ownerUser=null;
    if (ConnectionUtils.isSybaseeDBProducts(dbms().getDbmsName())) {
      ownerUser=ColumnSetHelper.getTableOwner((ModelElement)element);
    }
    sql.append(dbms().toQualifiedName(parentRelation.getName(),ownerUser,element.getName()));
  }
  ModelElementAnalysisHandler handler=new ModelElementAnalysisHandler();
  handler.setAnalysis(analysis);
  String stringDataFilter=handler.getStringDataFilter();
  sql.append(GenericSQLHandler.WHERE_CLAUSE);
  String sqlStatement=sql.toString();
  sqlStatement=dbms().addWhereToStatement(sqlStatement,stringDataFilter);
  return sqlStatement;
}",0.9921424829753798
138683,"public boolean addIndicator(NamedColumnSet set,Indicator... indicators){
  if (!analysis.getContext().getAnalysedElements().contains(set)) {
    analysis.getContext().getAnalysedElements().add(set);
  }
  for (  Indicator indicator : indicators) {
    analysis.getResults().getIndicators().add(indicator);
    initializeIndicator(indicator,set);
  }
  DataManager connection=analysis.getContext().getConnection();
  if (connection == null) {
    log.error(""String_Node_Str"");
    connection=ConnectionHelper.getTdDataProvider(PackageHelper.getCatalogOrSchema(set));
    analysis.getContext().setConnection(connection);
  }
  TypedReturnCode<Dependency> rc=DependenciesHandler.getInstance().setDependencyOn(analysis,connection);
  if (rc.isOk()) {
    Resource resource=connection.eResource();
    if (resource != null) {
      this.modifiedResources.add(resource);
    }
  }
  return true;
}","public boolean addIndicator(NamedColumnSet set,Indicator... indicators){
  if (!analysis.getContext().getAnalysedElements().contains(set)) {
    analysis.getContext().getAnalysedElements().add(set);
  }
  for (  Indicator indicator : indicators) {
    analysis.getResults().getIndicators().add(indicator);
    initializeIndicator(indicator,set);
  }
  DataManager connection=analysis.getContext().getConnection();
  if (connection == null) {
    log.error(""String_Node_Str"");
    connection=ConnectionHelper.getTdDataProvider(PackageHelper.getParentPackage((MetadataTable)set));
    analysis.getContext().setConnection(connection);
  }
  TypedReturnCode<Dependency> rc=DependenciesHandler.getInstance().setDependencyOn(analysis,connection);
  if (rc.isOk()) {
    Resource resource=connection.eResource();
    if (resource != null) {
      this.modifiedResources.add(resource);
    }
  }
  return true;
}",0.9749303621169916
138684,"/** 
 * DOC mzhao feature 11128, If the execute engine and by the same time Java User Defined Indicator is also defined, then compute via Java UDI, here convert common udi to a Java UDI.
 * @param udi
 * @return
 * @throws Exception
 */
public static Indicator adaptToJavaUDI(Indicator indicator) throws Throwable {
  UserDefIndicator adaptedUDI=null;
  if (userDefIndSwitch.doSwitch(indicator) != null) {
    EList<TaggedValue> taggedValues=indicator.getIndicatorDefinition().getTaggedValue();
    String userJavaClassName=null;
    String jarPath=null;
    for (    TaggedValue tv : taggedValues) {
      if (tv.getTag().equals(PluginConstant.CLASS_NAME_TEXT)) {
        userJavaClassName=tv.getValue();
        continue;
      }
      if (tv.getTag().equals(PluginConstant.JAR_FILE_PATH)) {
        jarPath=tv.getValue();
      }
    }
    if (validateJavaUDI(userJavaClassName,jarPath)) {
      File file=new File(jarPath);
      TalendURLClassLoader cl;
      cl=new TalendURLClassLoader(new URL[]{file.toURL()});
      Class<?> clazz=cl.findClass(userJavaClassName);
      if (clazz != null) {
        UserDefIndicator judi=(UserDefIndicator)clazz.newInstance();
        judi.setIndicatorDefinition(indicator.getIndicatorDefinition());
        if (indicator instanceof JavaUserDefIndicator) {
          ((JavaUserDefIndicator)indicator).setJavaUserDefObject(judi);
        }
 else {
          JavaUserDefIndicator judiTemplate=IndicatorSqlFactory.eINSTANCE.createJavaUserDefIndicator();
          judiTemplate.setJavaUserDefObject(judi);
          judiTemplate.setIndicatorDefinition(indicator.getIndicatorDefinition());
          judiTemplate.setAnalyzedElement(indicator.getAnalyzedElement());
          adaptedUDI=judiTemplate;
        }
      }
    }
  }
  return adaptedUDI;
}","/** 
 * DOC mzhao feature 11128, If the execute engine and by the same time Java User Defined Indicator is also defined, then compute via Java UDI, here convert common udi to a Java UDI.
 * @param udi
 * @return
 * @throws Exception
 */
public static Indicator adaptToJavaUDI(Indicator indicator) throws Throwable {
  UserDefIndicator adaptedUDI=null;
  if (userDefIndSwitch.doSwitch(indicator) != null) {
    EList<TaggedValue> taggedValues=indicator.getIndicatorDefinition().getTaggedValue();
    String userJavaClassName=null;
    String jarPath=null;
    for (    TaggedValue tv : taggedValues) {
      if (tv.getTag().equals(PluginConstant.CLASS_NAME_TEXT)) {
        userJavaClassName=tv.getValue();
        continue;
      }
      if (tv.getTag().equals(PluginConstant.JAR_FILE_PATH)) {
        jarPath=tv.getValue();
      }
    }
    if (validateJavaUDI(userJavaClassName,jarPath)) {
      File file=new File(jarPath);
      TalendURLClassLoader cl;
      cl=new TalendURLClassLoader(new URL[]{file.toURI().toURL()});
      Class<?> clazz=cl.findClass(userJavaClassName);
      if (clazz != null) {
        UserDefIndicator judi=(UserDefIndicator)clazz.newInstance();
        judi.setIndicatorDefinition(indicator.getIndicatorDefinition());
        if (indicator instanceof JavaUserDefIndicator) {
          ((JavaUserDefIndicator)indicator).setJavaUserDefObject(judi);
        }
 else {
          JavaUserDefIndicator judiTemplate=IndicatorSqlFactory.eINSTANCE.createJavaUserDefIndicator();
          judiTemplate.setJavaUserDefObject(judi);
          judiTemplate.setIndicatorDefinition(indicator.getIndicatorDefinition());
          judiTemplate.setAnalyzedElement(indicator.getAnalyzedElement());
          adaptedUDI=judiTemplate;
        }
      }
    }
  }
  return adaptedUDI;
}",0.9977666108319376
138685,"public Paint getDrawPaint(Edge e){
{
    return defaultFunc.getDrawPaint(e);
  }
}","public Paint getDrawPaint(Edge e){
  return defaultFunc.getDrawPaint(e);
}",0.9487179487179488
138686,"/** 
 * DOC xqliu Comment method ""fillDbConnectionInformation"".
 * @param dbConn
 * @return
 */
public static DatabaseConnection fillDbConnectionInformation(DatabaseConnection dbConn){
  if (DatabaseConstant.XML_EXIST_DRIVER_NAME.equals(dbConn.getDriverClass())) {
    IXMLDBConnection xmlDBConnection=new EXistXMLDBConnection(dbConn.getDriverClass(),dbConn.getURL());
    ConnectionHelper.addXMLDocuments(xmlDBConnection.createConnection(),dbConn);
  }
 else {
    try {
      boolean noStructureExists=ConnectionHelper.getAllCatalogs(dbConn).isEmpty() && ConnectionHelper.getAllSchemas(dbConn).isEmpty();
      if (noStructureExists) {
        dbConn=(DatabaseConnection)TalendCwmFactory.createDataProvider(createDBConnect(dbConn,false));
      }
    }
 catch (    SQLException e) {
      e.printStackTrace();
    }
catch (    TalendException e) {
      e.printStackTrace();
    }
  }
  return dbConn;
}","/** 
 * DOC xqliu Comment method ""fillDbConnectionInformation"".
 * @param dbConn
 * @return
 */
public static DatabaseConnection fillDbConnectionInformation(DatabaseConnection dbConn){
  if (DatabaseConstant.XML_EXIST_DRIVER_NAME.equals(dbConn.getDriverClass())) {
    IXMLDBConnection xmlDBConnection=new EXistXMLDBConnection(dbConn.getDriverClass(),dbConn.getURL());
    ConnectionHelper.addXMLDocuments(xmlDBConnection.createConnection(dbConn));
  }
 else {
    try {
      boolean noStructureExists=ConnectionHelper.getAllCatalogs(dbConn).isEmpty() && ConnectionHelper.getAllSchemas(dbConn).isEmpty();
      if (noStructureExists) {
        dbConn=(DatabaseConnection)TalendCwmFactory.createDataProvider(createDBConnect(dbConn,false));
      }
    }
 catch (    SQLException e) {
      e.printStackTrace();
    }
catch (    TalendException e) {
      e.printStackTrace();
    }
  }
  return dbConn;
}",0.9917081260364844
138687,"/** 
 * DOC xqliu Comment method ""fillMdmConnectionInformation"".
 * @param mdmConn
 * @return
 */
public static MDMConnection fillMdmConnectionInformation(MDMConnection mdmConn){
  Properties properties=new Properties();
  properties.put(TaggedValueHelper.USER,mdmConn.getUsername());
  properties.put(TaggedValueHelper.PASSWORD,mdmConn.getPassword());
  properties.put(TaggedValueHelper.UNIVERSE,mdmConn.getUniverse() == null ? ""String_Node_Str"" : mdmConn.getUniverse());
  MdmWebserviceConnection mdmWsConn=new MdmWebserviceConnection(mdmConn.getPathname(),properties);
  ConnectionHelper.addXMLDocuments(mdmWsConn.createConnection(),mdmConn);
  return mdmConn;
}","/** 
 * DOC xqliu Comment method ""fillMdmConnectionInformation"".
 * @param mdmConn
 * @return
 */
public static MDMConnection fillMdmConnectionInformation(MDMConnection mdmConn){
  Properties properties=new Properties();
  properties.put(TaggedValueHelper.USER,mdmConn.getUsername());
  properties.put(TaggedValueHelper.PASSWORD,mdmConn.getPassword());
  properties.put(TaggedValueHelper.UNIVERSE,mdmConn.getUniverse() == null ? ""String_Node_Str"" : mdmConn.getUniverse());
  MdmWebserviceConnection mdmWsConn=new MdmWebserviceConnection(mdmConn.getPathname(),properties);
  ConnectionHelper.addXMLDocuments(mdmWsConn.createConnection(mdmConn));
  return mdmConn;
}",0.9872084273890144
138688,"private void adaptToCWMDocument(List<TdXmlSchema> xmlDocCollection,Collection col,String resName,String providerTechName) throws XMLDBException, CoreException {
  XMLResource resXSD=(XMLResource)col.getResource(StringUtils.removeEnd(resName,XML_SUFIX) + XSD_SUFIX);
  if (resXSD == null) {
    log.error(""String_Node_Str"" + resName + ""String_Node_Str"");
    return;
  }
  IFolder xsdFolder=ResourceManager.getConnectionFolder().getFolder(XSD_SUFIX);
  if (!xsdFolder.exists()) {
    xsdFolder.create(true,true,new NullProgressMonitor());
  }
  xsdFolder=xsdFolder.getFolder(providerTechName);
  if (!xsdFolder.exists()) {
    xsdFolder.create(true,true,new NullProgressMonitor());
  }
  IFile file=xsdFolder.getFile(StringUtils.removeEnd(resName,XML_SUFIX) + XSD_SUFIX);
  file.create(new ByteArrayInputStream(resXSD.getContent().toString().getBytes()),true,new NullProgressMonitor());
  TdXmlSchema tdXmlDoc=XmlFactory.eINSTANCE.createTdXmlSchema();
  tdXmlDoc.setName(StringUtils.removeEnd(resName,XML_SUFIX));
  tdXmlDoc.setXsdFilePath(XSD_SUFIX + File.separator + xsdFolder.getName()+ File.separator+ file.getName());
  xmlDocCollection.add(tdXmlDoc);
}","private void adaptToCWMDocument(List<TdXmlSchema> xmlDocCollection,Collection col,String resName,String providerTechName,Connection dataProvider) throws XMLDBException, CoreException {
  XMLResource resXSD=(XMLResource)col.getResource(StringUtils.removeEnd(resName,XML_SUFIX) + XSD_SUFIX);
  if (resXSD == null) {
    log.error(""String_Node_Str"" + resName + ""String_Node_Str"");
    return;
  }
  IFolder xsdFolder=ResourceManager.getConnectionFolder().getFolder(XSD_SUFIX);
  if (!xsdFolder.exists()) {
    xsdFolder.create(true,true,new NullProgressMonitor());
  }
  xsdFolder=xsdFolder.getFolder(providerTechName);
  if (!xsdFolder.exists()) {
    xsdFolder.create(true,true,new NullProgressMonitor());
  }
  IFile file=xsdFolder.getFile(StringUtils.removeEnd(resName,XML_SUFIX) + XSD_SUFIX);
  file.create(new ByteArrayInputStream(resXSD.getContent().toString().getBytes()),true,new NullProgressMonitor());
  TdXmlSchema tdXmlDoc=XmlFactory.eINSTANCE.createTdXmlSchema();
  tdXmlDoc.setName(StringUtils.removeEnd(resName,XML_SUFIX));
  tdXmlDoc.setXsdFilePath(XSD_SUFIX + File.separator + xsdFolder.getName()+ File.separator+ file.getName());
  tdXmlDoc.getDataManager().add(dataProvider);
  xmlDocCollection.add(tdXmlDoc);
}",0.970230607966457
138689,"public java.util.Collection<TdXmlSchema> createConnection(){
  Collection col=null;
  List<TdXmlSchema> tempXmlDocs=null;
  try {
    Class<?> cl=Class.forName(driverClassName);
    Database database=(Database)cl.newInstance();
    DatabaseManager.registerDatabase(database);
    col=DatabaseManager.getCollection(connectionURI);
    col.setProperty(OutputKeys.INDENT,""String_Node_Str"");
    tempXmlDocs=new ArrayList<TdXmlSchema>();
    String techXSDFolderName=DqRepositoryViewService.createTechnicalName(XSD_SUFIX + DateFormatUtils.format(new Date(),""String_Node_Str""));
    for (int idx=0; idx < col.getResourceCount(); idx++) {
      String resName=col.listResources()[idx];
      if (resName.endsWith(XML_SUFIX)) {
        adaptToCWMDocument(tempXmlDocs,col,resName,techXSDFolderName);
      }
    }
  }
 catch (  Exception e) {
    log.error(e);
    return null;
  }
  this.xmlDocs=tempXmlDocs;
  return tempXmlDocs;
}","public java.util.Collection<TdXmlSchema> createConnection(Connection dataProvider){
  Collection col=null;
  List<TdXmlSchema> tempXmlDocs=null;
  try {
    Class<?> cl=Class.forName(driverClassName);
    Database database=(Database)cl.newInstance();
    DatabaseManager.registerDatabase(database);
    col=DatabaseManager.getCollection(connectionURI);
    col.setProperty(OutputKeys.INDENT,""String_Node_Str"");
    tempXmlDocs=new ArrayList<TdXmlSchema>();
    String techXSDFolderName=DqRepositoryViewService.createTechnicalName(XSD_SUFIX + DateFormatUtils.format(new Date(),""String_Node_Str""));
    for (int idx=0; idx < col.getResourceCount(); idx++) {
      String resName=col.listResources()[idx];
      if (resName.endsWith(XML_SUFIX)) {
        adaptToCWMDocument(tempXmlDocs,col,resName,techXSDFolderName,dataProvider);
      }
    }
  }
 catch (  Exception e) {
    log.error(e);
    return null;
  }
  this.xmlDocs=tempXmlDocs;
  return tempXmlDocs;
}",0.980911983032874
138690,public Collection<TdXmlSchema> createConnection();,public Collection<TdXmlSchema> createConnection(Connection dataProvider);,0.8130081300813008
138691,"public Collection<TdXmlSchema> createConnection(){
  List<TdXmlSchema> xmlDocs=new ArrayList<TdXmlSchema>();
  try {
    XtentisBindingStub stub=getXtentisBindingStub();
    WSDataModelPK[] pks=stub.getDataModelPKs(new WSRegexDataModelPKs(""String_Node_Str""));
    String techXSDFolderName=getTechXSDFolderName();
    for (    WSDataModelPK pk : pks) {
      String filterName=props.getProperty(TaggedValueHelper.DATA_FILTER);
      if (filterName == null || filterName.equals(""String_Node_Str"") || Arrays.asList(filterName.split(""String_Node_Str"")).contains((pk.getPk()))) {
        adaptToCWMDocument(xmlDocs,stub,pk.getPk(),techXSDFolderName);
      }
    }
  }
 catch (  Exception e) {
    log.error(e);
    return null;
  }
  return xmlDocs;
}","public Collection<TdXmlSchema> createConnection(Connection dataProvider){
  List<TdXmlSchema> xmlDocs=new ArrayList<TdXmlSchema>();
  try {
    XtentisBindingStub stub=getXtentisBindingStub();
    WSDataModelPK[] pks=stub.getDataModelPKs(new WSRegexDataModelPKs(""String_Node_Str""));
    String techXSDFolderName=getTechXSDFolderName();
    for (    WSDataModelPK pk : pks) {
      String filterName=props.getProperty(TaggedValueHelper.DATA_FILTER);
      if (filterName == null || filterName.equals(""String_Node_Str"") || Arrays.asList(filterName.split(""String_Node_Str"")).contains((pk.getPk()))) {
        adaptToCWMDocument(xmlDocs,stub,pk.getPk(),techXSDFolderName,dataProvider);
      }
    }
  }
 catch (  Exception e) {
    log.error(e);
    return null;
  }
  return xmlDocs;
}",0.976470588235294
138692,"/** 
 * DOC xqliu Comment method ""adaptToCWMDocument"".
 * @param xmlDocCollection
 * @param stub
 * @param resName
 * @param providerTechName
 * @throws RemoteException
 * @throws CoreException
 */
private void adaptToCWMDocument(List<TdXmlSchema> xmlDocCollection,XtentisPort stub,String resName,String providerTechName) throws RemoteException, CoreException {
  String resXSD=null;
  try {
    resXSD=stub.getDataModel(new WSGetDataModel(new WSDataModelPK(resName))).getXsdSchema();
  }
 catch (  Exception e1) {
    log.warn(e1,e1);
  }
  if (resXSD == null || ""String_Node_Str"".equals(resXSD.trim())) {
    log.warn(""String_Node_Str"" + resName + ""String_Node_Str"");
    return;
  }
  IFolder xsdFolder=ResourceManager.getMDMConnectionFolder().getFolder(XSD_SUFIX);
  if (!xsdFolder.exists()) {
    xsdFolder.create(true,true,new NullProgressMonitor());
  }
  xsdFolder=xsdFolder.getFolder(providerTechName);
  if (!xsdFolder.exists()) {
    xsdFolder.create(true,true,new NullProgressMonitor());
  }
  IFile file=xsdFolder.getFile(resName + XSD_SUFIX);
  try {
    file.create(new ByteArrayInputStream(resXSD.getBytes(""String_Node_Str"")),true,new NullProgressMonitor());
  }
 catch (  UnsupportedEncodingException e) {
    e.printStackTrace();
  }
  TdXmlSchema tdXmlDoc=XmlFactory.eINSTANCE.createTdXmlSchema();
  tdXmlDoc.setName(resName);
  tdXmlDoc.setXsdFilePath(XSD_SUFIX + File.separator + xsdFolder.getName()+ File.separator+ file.getName());
  xmlDocCollection.add(tdXmlDoc);
}","/** 
 * DOC xqliu Comment method ""adaptToCWMDocument"".
 * @param xmlDocCollection
 * @param stub
 * @param resName
 * @param providerTechName
 * @param dataProvider
 * @throws RemoteException
 * @throws CoreException
 */
private void adaptToCWMDocument(List<TdXmlSchema> xmlDocCollection,XtentisPort stub,String resName,String providerTechName,Connection dataProvider) throws RemoteException, CoreException {
  String resXSD=null;
  try {
    resXSD=stub.getDataModel(new WSGetDataModel(new WSDataModelPK(resName))).getXsdSchema();
  }
 catch (  Exception e1) {
    log.warn(e1,e1);
  }
  if (resXSD == null || ""String_Node_Str"".equals(resXSD.trim())) {
    log.warn(""String_Node_Str"" + resName + ""String_Node_Str"");
    return;
  }
  IFolder xsdFolder=ResourceManager.getMDMConnectionFolder().getFolder(XSD_SUFIX);
  if (!xsdFolder.exists()) {
    xsdFolder.create(true,true,new NullProgressMonitor());
  }
  xsdFolder=xsdFolder.getFolder(providerTechName);
  if (!xsdFolder.exists()) {
    xsdFolder.create(true,true,new NullProgressMonitor());
  }
  IFile file=xsdFolder.getFile(resName + XSD_SUFIX);
  try {
    file.create(new ByteArrayInputStream(resXSD.getBytes(""String_Node_Str"")),true,new NullProgressMonitor());
  }
 catch (  UnsupportedEncodingException e) {
    e.printStackTrace();
  }
  TdXmlSchema tdXmlDoc=XmlFactory.eINSTANCE.createTdXmlSchema();
  tdXmlDoc.setName(resName);
  tdXmlDoc.setXsdFilePath(XSD_SUFIX + File.separator + xsdFolder.getName()+ File.separator+ file.getName());
  tdXmlDoc.getDataManager().add(dataProvider);
  xmlDocCollection.add(tdXmlDoc);
}",0.9694209499024072
138693,"/** 
 * Instantiate a data provider from xml documents. DOC mzhao Comment method ""getTdDataProvider"".
 * @param parameter
 * @return
 */
public static DatabaseConnection createEXistTdDataProvider(DBConnectionParameter parameter){
  IXMLDBConnection xmlDBConnection=new EXistXMLDBConnection(parameter.getDriverClassName(),parameter.getJdbcUrl());
  ReturnCode rt=xmlDBConnection.checkDatabaseConnection();
  if (rt.isOk()) {
    DatabaseConnection dataProvider=ConnectionHelper.createDatabaseConnection(parameter.getName());
    xmlDBConnection.setSofewareSystem(dataProvider,parameter);
    xmlDBConnection.setProviderConnection(dataProvider,parameter);
    ConnectionHelper.addXMLDocuments(xmlDBConnection.createConnection(),dataProvider);
    return dataProvider;
  }
  return null;
}","/** 
 * Instantiate a data provider from xml documents. DOC mzhao Comment method ""getTdDataProvider"".
 * @param parameter
 * @return
 */
public static DatabaseConnection createEXistTdDataProvider(DBConnectionParameter parameter){
  IXMLDBConnection xmlDBConnection=new EXistXMLDBConnection(parameter.getDriverClassName(),parameter.getJdbcUrl());
  ReturnCode rt=xmlDBConnection.checkDatabaseConnection();
  if (rt.isOk()) {
    DatabaseConnection dataProvider=ConnectionHelper.createDatabaseConnection(parameter.getName());
    xmlDBConnection.setSofewareSystem(dataProvider,parameter);
    xmlDBConnection.setProviderConnection(dataProvider,parameter);
    ConnectionHelper.addXMLDocuments(xmlDBConnection.createConnection(dataProvider));
    return dataProvider;
  }
  return null;
}",0.9828134945894336
138694,"/** 
 * Instantiate a data provider from mdm service. DOC xqliu feature 10238.
 * @param parameter
 * @return
 */
public static MDMConnection createMdmTdDataProvider(DBConnectionParameter parameter){
  MdmWebserviceConnection mdmConnection=new MdmWebserviceConnection(parameter.getJdbcUrl(),parameter.getParameters());
  ReturnCode rt=mdmConnection.checkDatabaseConnection();
  if (rt.isOk()) {
    MDMConnection dataProvider=ConnectionHelper.createMDMConnection(parameter.getName());
    mdmConnection.setSofewareSystem(dataProvider,parameter);
    mdmConnection.setProviderConnection(dataProvider,parameter);
    ConnectionHelper.addXMLDocuments(mdmConnection.createConnection(),dataProvider);
    dataProvider.setUsername(mdmConnection.getUserName());
    dataProvider.setPassword(mdmConnection.getUserPass());
    dataProvider.setLabel(parameter.getName());
    return dataProvider;
  }
  return null;
}","/** 
 * Instantiate a data provider from mdm service. DOC xqliu feature 10238.
 * @param parameter
 * @return
 */
public static MDMConnection createMdmTdDataProvider(DBConnectionParameter parameter){
  MdmWebserviceConnection mdmConnection=new MdmWebserviceConnection(parameter.getJdbcUrl(),parameter.getParameters());
  ReturnCode rt=mdmConnection.checkDatabaseConnection();
  if (rt.isOk()) {
    MDMConnection dataProvider=ConnectionHelper.createMDMConnection(parameter.getName());
    mdmConnection.setSofewareSystem(dataProvider,parameter);
    mdmConnection.setProviderConnection(dataProvider,parameter);
    ConnectionHelper.addXMLDocuments(mdmConnection.createConnection(dataProvider));
    dataProvider.setUsername(mdmConnection.getUserName());
    dataProvider.setPassword(mdmConnection.getUserPass());
    dataProvider.setLabel(parameter.getName());
    return dataProvider;
  }
  return null;
}",0.985107556536128
138695,"public static List<ModelElement> getDependencyClients(ModelElement modelElement){
  if (modelElement == null) {
    return new ArrayList<ModelElement>();
  }
  EList<Dependency> clientDependencys=modelElement.getSupplierDependency();
  List<ModelElement> supplierList=new ArrayList<ModelElement>();
  for (  Dependency dependency : clientDependencys) {
    EList<ModelElement> client=dependency.getClient();
    if (client != null) {
      supplierList.addAll(client);
    }
  }
  return supplierList;
}","public static List<ModelElement> getDependencyClients(ModelElement modelElement){
  if (modelElement == null) {
    return new ArrayList<ModelElement>();
  }
  EList<Dependency> clientDependencys=modelElement.getSupplierDependency();
  List<ModelElement> supplierList=new ArrayList<ModelElement>();
  for (  Dependency dependency : clientDependencys) {
    EList<ModelElement> clients=dependency.getClient();
    if (clients != null) {
      for (      ModelElement client : clients) {
        if (!client.eIsProxy()) {
          supplierList.add(client);
        }
      }
    }
  }
  return supplierList;
}",0.9000900090009001
138696,"/** 
 * DOC bZhou Comment method ""populateElement"".
 */
private void populateElement(){
  List<ItemRecord> allRecordList=ItemRecord.getAllItemRecords();
  ItemRecord[] invalidRecords=writer.populate(allRecordList.toArray(new ItemRecord[allRecordList.size()]),!overwriteBTN.getSelection());
  updateErrorList(invalidRecords);
  if (invalidRecords.length > 0) {
    removeInvalidRecords(invalidRecords);
  }
}","/** 
 * DOC bZhou Comment method ""populateElement"".
 */
private void populateElement(){
  ItemRecord[] invalidRecords=writer.populate(getElements(),!overwriteBTN.getSelection());
  updateErrorList(invalidRecords);
  if (invalidRecords.length > 0) {
    removeInvalidRecords(invalidRecords);
  }
}",0.8079658605974396
138697,"/** 
 * DOC bZhou Comment method ""writeSysFile"".
 * @param file
 * @throws IOException
 * @throws CoreException
 */
private void writeSysFile(IFile file) throws IOException, CoreException {
  if (file.exists()) {
    write(file.getLocation(),file.getFullPath());
  }
}","/** 
 * DOC bZhou Comment method ""writeSysFile"".
 * @param file
 * @throws IOException
 * @throws CoreException
 */
private void writeSysFile(IFile file) throws IOException, CoreException {
  if (file.exists()) {
    write(file.getLocation(),file.getFullPath().makeRelative());
  }
}",0.9727767695099818
138698,"@Override public void write(IPath resPath,IPath desPath) throws IOException, CoreException {
  File file=getBasePath().toFile();
  if (!file.exists()) {
    file.createNewFile();
  }
  String lastSegment=getBasePath().removeFileExtension().lastSegment();
  IPath newDestPath=new Path(lastSegment).append(desPath);
  tempMap.put(resPath.toFile(),newDestPath.toOSString());
}","@Override public void write(IPath resPath,IPath desPath) throws IOException, CoreException {
  File file=getBasePath().toFile();
  if (!file.exists()) {
    file.createNewFile();
  }
  tempMap.put(resPath.toFile(),desPath.toOSString());
}",0.762684124386252
138699,"@Override public void run(){
  SelectedResources selectedResources=new SelectedResources();
  Property[] selectedProps=selectedResources.getSelectedArrayForDelForever();
  try {
    for (    Property property : selectedProps) {
      Item item=property.getItem();
      if (item instanceof ConnectionItem) {
        property.getItem().getState().setDeleted(false);
        ProxyRepositoryFactory.getInstance().save(property);
      }
 else {
        property.getItem().getState().setDeleted(false);
        Resource propertyResource=property.eResource();
        if (!EMFSharedResources.getInstance().saveResource(propertyResource))         return;
      }
      LogicalDeleteFileHandle.refreshDelPropertys(0,property);
      if (property.getItem() instanceof ConnectionItem) {
        SQLExplorerPlugin.getDefault().getAliasManager().modelChanged();
      }
    }
  }
 catch (  Exception exc) {
    log.error(exc,exc);
  }
  ProxyRepositoryManager.getInstance().save();
  CorePlugin.getDefault().refreshDQView();
  CorePlugin.getDefault().refreshWorkSpace();
}","@Override public void run(){
  SelectedResources selectedResources=new SelectedResources();
  Property[] selectedProps=selectedResources.getSelectedArrayForDelForever();
  try {
    for (    Property property : selectedProps) {
      Item item=property.getItem();
      if (item instanceof ConnectionItem) {
        if (property.eIsProxy()) {
          property=(Property)EObjectHelper.resolveObject(property);
        }
        property.getItem().getState().setDeleted(false);
        ProxyRepositoryFactory.getInstance().save(property);
      }
 else {
        property.getItem().getState().setDeleted(false);
        Resource propertyResource=property.eResource();
        if (!EMFSharedResources.getInstance().saveResource(propertyResource))         return;
      }
      LogicalDeleteFileHandle.refreshDelPropertys(0,property);
      if (property.getItem() instanceof ConnectionItem) {
        SQLExplorerPlugin.getDefault().getAliasManager().modelChanged();
      }
    }
  }
 catch (  Exception exc) {
    log.error(exc,exc);
  }
  ProxyRepositoryManager.getInstance().save();
  CorePlugin.getDefault().refreshDQView();
  CorePlugin.getDefault().refreshWorkSpace();
}",0.9494407158836689
138700,"/** 
 * Method ""clearDependencies"" is to be used before a file is deleted. The root element is given as argument and the dependencies on this element are removed in all resources that depend on this element.
 * @param elementToDelete a root element which file will be deleted.
 * @return the list of modified dependencies
 */
public List<Resource> clearDependencies(ModelElement elementToDelete){
  EList<Dependency> clientDependencies;
  clientDependencies=elementToDelete.getClientDependency();
  List<Resource> modifiedResources=new ArrayList<Resource>();
  Iterator<Dependency> it=clientDependencies.iterator();
  while (it.hasNext()) {
    Dependency dependency=(Dependency)it.next();
    if (dependency.eIsProxy()) {
      dependency=(Dependency)EObjectHelper.resolveObject(dependency);
      EList<ModelElement> client=dependency.getClient();
      Iterator<ModelElement> iterator=client.iterator();
      while (iterator.hasNext()) {
        ModelElement modelElement=iterator.next();
        if (modelElement.getName().equals(elementToDelete.getName())) {
          iterator.remove();
          if (client.size() == 0)           it.remove();
        }
      }
    }
    Resource dependencyResource=dependency.eResource();
    if (dependencyResource != null) {
      modifiedResources.add(dependencyResource);
    }
  }
  clientDependencies.clear();
  EList<Dependency> supplierDependencies=elementToDelete.getSupplierDependency();
  for (  Dependency dependency : supplierDependencies) {
    EList<ModelElement> client=dependency.getClient();
    for (    ModelElement modelElement : client) {
      Resource clientResource=modelElement.eResource();
      if (clientResource != null) {
        modifiedResources.add(clientResource);
      }
    }
    client.clear();
  }
  return modifiedResources;
}","/** 
 * Method ""clearDependencies"" is to be used before a file is deleted. The root element is given as argument and the dependencies on this element are removed in all resources that depend on this element.
 * @param elementToDelete a root element which file will be deleted.
 * @return the list of modified dependencies
 */
public List<Resource> clearDependencies(ModelElement elementToDelete){
  EList<Dependency> clientDependencies;
  clientDependencies=elementToDelete.getClientDependency();
  List<Resource> modifiedResources=new ArrayList<Resource>();
  Iterator<Dependency> it=clientDependencies.iterator();
  while (it.hasNext()) {
    Dependency dependency=(Dependency)it.next();
    if (dependency.eIsProxy()) {
      dependency=(Dependency)EObjectHelper.resolveObject(dependency);
    }
    Resource dependencyResource=dependency.eResource();
    if (dependencyResource != null) {
      modifiedResources.add(dependencyResource);
    }
  }
  clientDependencies.clear();
  EList<Dependency> supplierDependencies=elementToDelete.getSupplierDependency();
  for (  Dependency dependency : supplierDependencies) {
    EList<ModelElement> client=dependency.getClient();
    for (    ModelElement modelElement : client) {
      Resource clientResource=modelElement.eResource();
      if (clientResource != null) {
        modifiedResources.add(clientResource);
      }
    }
    client.clear();
  }
  return modifiedResources;
}",0.5866748920419494
138701,"/** 
 * DOC bZhou Comment method ""delete"".
 * @param ifile
 * @throws Exception
 */
public ReturnCode delete(IFile ifile) throws Exception {
  ReturnCode rc=new ReturnCode();
  Resource resource=getFileResource(ifile);
  List<ModelElement> dependencyClients=EObjectHelper.getDependencyClients(ifile);
  if (!dependencyClients.isEmpty()) {
    rc.setOk(false);
    rc.setMessage(""String_Node_Str"");
  }
 else {
    EObjectHelper.removeDependencys(ifile);
    deleteRelated(ifile);
    String uriStr=resource.getURI().toString();
    remove(ifile);
    EMFSharedResources.getInstance().unloadResource(uriStr);
    if (ifile.isLinked()) {
      File file=new File(ifile.getRawLocation().toOSString());
      if (file.exists()) {
        file.delete();
      }
    }
    ifile.delete(true,new NullProgressMonitor());
    IFile propFile=ResourcesPlugin.getWorkspace().getRoot().getFile(ifile.getFullPath().removeFileExtension().addFileExtension(FactoriesUtil.PROPERTIES_EXTENSION));
    resource=getFileResource(propFile);
    remove(propFile);
    EMFSharedResources.getInstance().unloadResource(resource.getURI().toString());
    if (propFile.exists()) {
      propFile.delete(true,new NullProgressMonitor());
    }
    ProxyRepositoryManager.getInstance().save();
    ifile.getParent().refreshLocal(IResource.DEPTH_INFINITE,null);
    rc.setMessage(""String_Node_Str"");
  }
  return rc;
}","/** 
 * DOC bZhou Comment method ""delete"".
 * @param ifile
 * @throws Exception
 */
public ReturnCode delete(IFile ifile) throws Exception {
  ReturnCode rc=new ReturnCode();
  Resource resource=getFileResource(ifile);
  List<ModelElement> dependencyClients=EObjectHelper.getDependencyClients(ifile);
  if (!dependencyClients.isEmpty()) {
    rc.setOk(false);
    rc.setMessage(""String_Node_Str"" + dependencyClients.get(0).getName() + ""String_Node_Str"");
  }
 else {
    EObjectHelper.removeDependencys(ifile);
    deleteRelated(ifile);
    String uriStr=resource.getURI().toString();
    remove(ifile);
    EMFSharedResources.getInstance().unloadResource(uriStr);
    if (ifile.isLinked()) {
      File file=new File(ifile.getRawLocation().toOSString());
      if (file.exists()) {
        file.delete();
      }
    }
    ifile.delete(true,new NullProgressMonitor());
    IFile propFile=ResourcesPlugin.getWorkspace().getRoot().getFile(ifile.getFullPath().removeFileExtension().addFileExtension(FactoriesUtil.PROPERTIES_EXTENSION));
    resource=getFileResource(propFile);
    remove(propFile);
    EMFSharedResources.getInstance().unloadResource(resource.getURI().toString());
    if (propFile.exists()) {
      propFile.delete(true,new NullProgressMonitor());
    }
    ProxyRepositoryManager.getInstance().save();
    ifile.getParent().refreshLocal(IResource.DEPTH_INFINITE,null);
    rc.setMessage(""String_Node_Str"");
  }
  return rc;
}",0.9798372833392288
138702,"private void initializeDefinitions(){
  this.indicatorCategories=loadDefinitionsFromFile().getCategories();
  indicatorDefinitions.addAll(IndicatorResourceFileHelper.getInstance().getAllIndicators(ResourceManager.getLibrariesFolder().getFolder(EResourceConstant.INDICATORS.getName()).getFolder(EResourceConstant.SYSTEM_INDICATORS.getName())));
  indicatorDefinitions.addAll(IndicatorResourceFileHelper.getInstance().getAllIndicators(ResourceManager.getLibrariesFolder().getFolder(EResourceConstant.INDICATORS.getName()).getFolder(EResourceConstant.USER_DEFINED_INDICATORS.getName())));
}","private void initializeDefinitions(){
  this.indicatorDefinitions.clear();
  this.indicatorCategories=loadDefinitionsFromFile().getCategories();
  indicatorDefinitions.addAll(IndicatorResourceFileHelper.getInstance().getAllIndicators(ResourceManager.getIndicatorFolder()));
}",0.5150812064965197
138703,"/** 
 * Method ""getIndicatorsDefinitions"".
 * @return the singleton analysis categories (or throws an exception if a problem occured)
 */
public List<IndicatorDefinition> getIndicatorsDefinitions(){
  if (indicatorDefinitions == null) {
    initializeDefinitions();
  }
  if (indicatorDefinitions == null) {
    throw new RuntimeException(Messages.getString(""String_Node_Str""));
  }
  return indicatorDefinitions;
}","/** 
 * Method ""getIndicatorsDefinitions"".
 * @return the singleton analysis categories (or throws an exception if a problem occured)
 */
public List<IndicatorDefinition> getIndicatorsDefinitions(){
  if (indicatorDefinitions == null || indicatorDefinitions.isEmpty()) {
    initializeDefinitions();
  }
  if (indicatorDefinitions == null) {
    throw new RuntimeException(Messages.getString(""String_Node_Str""));
  }
  return indicatorDefinitions;
}",0.960648148148148
138704,"@Override protected boolean doExecute() throws Exception {
  if (!ResourceManager.getSystemIndicatorFolder().exists()) {
    DQStructureManager manager=DQStructureManager.getInstance();
    IFolder systemIndicatorFoler=manager.createNewFolder(ResourceManager.getIndicatorFolder(),EResourceConstant.SYSTEM_INDICATORS);
    manager.copyFilesToFolder(CorePlugin.getDefault(),DQStructureManager.SYSTEM_INDICATOR_PATH,true,systemIndicatorFoler,null);
  }
  Collection<Analysis> analyses=searchAllAnalysis(ResourceManager.getAnalysisFolder());
  AnalysisWriter analysisWriter=ElementWriterFactory.getInstance().createAnalysisWrite();
  for (  Analysis ana : analyses) {
    for (    Indicator ind : ana.getResults().getIndicators()) {
      updateIndDefinition(ind);
      if (ind instanceof CompositeIndicator) {
        for (        Indicator indLeave : IndicatorHelper.getIndicatorLeaves(ind)) {
          updateIndDefinition(indLeave);
        }
      }
    }
    analysisWriter.save(ana);
  }
  ResourceManager.getLibrariesFolder().getFile(DefinitionHandler.FILENAME).delete(true,new NullProgressMonitor());
  DefinitionHandler.getInstance().copyDefinitionsIntoFolder(ResourceManager.getLibrariesFolder());
  return true;
}","@Override protected boolean doExecute() throws Exception {
  DQStructureManager manager=DQStructureManager.getInstance();
  IFolder systemIndicatorFolder=ResourceManager.getSystemIndicatorFolder();
  if (!systemIndicatorFolder.exists()) {
    systemIndicatorFolder=manager.createNewFolder(ResourceManager.getIndicatorFolder(),EResourceConstant.SYSTEM_INDICATORS);
  }
  manager.copyFilesToFolder(CorePlugin.getDefault(),DQStructureManager.SYSTEM_INDICATOR_PATH,true,systemIndicatorFolder,null);
  DefinitionHandler.getInstance().reloadIndicatorsDefinitions();
  Collection<Analysis> analyses=searchAllAnalysis(ResourceManager.getAnalysisFolder());
  AnalysisWriter analysisWriter=ElementWriterFactory.getInstance().createAnalysisWrite();
  for (  Analysis ana : analyses) {
    for (    Indicator ind : ana.getResults().getIndicators()) {
      updateIndDefinition(ind);
      if (ind instanceof CompositeIndicator) {
        for (        Indicator indLeave : IndicatorHelper.getIndicatorLeaves(ind)) {
          updateIndDefinition(indLeave);
        }
      }
    }
    analysisWriter.save(ana);
  }
  ResourceManager.getLibrariesFolder().getFile(DefinitionHandler.FILENAME).delete(true,new NullProgressMonitor());
  DefinitionHandler.getInstance().copyDefinitionsIntoFolder(ResourceManager.getLibrariesFolder());
  return true;
}",0.9044635865309318
138705,"public void modifyText(ModifyEvent e){
  setConnectionURL(SupportDBUrlStore.getInstance().getDBUrl(dbType.getDBKey(),hostNameText.getText(),portText.getText(),databaseNameText.getText(),dataSourceText.getText(),parameterText.getText()));
  urlText.setText(getConnectionURL());
}","public void modifyText(ModifyEvent e){
  connectionParam.setaDDParameter(parameterText.getText());
  setConnectionURL(SupportDBUrlStore.getInstance().getDBUrl(dbType.getDBKey(),hostNameText.getText(),portText.getText(),databaseNameText.getText(),dataSourceText.getText(),parameterText.getText()));
  urlText.setText(getConnectionURL());
}",0.9025974025974026
138706,"protected void createPart(Composite parent,String dbLiteral,final DBConnectionParameter connectionParam){
  if (dbLiteral.trim().equals(""String_Node_Str"")) {
    GridLayout layout=new GridLayout();
    layout.numColumns=3;
    parent.setLayout(layout);
    Label labelJar=new Label(parent,SWT.NONE);
    labelJar.setText(""String_Node_Str"");
    final Text jarText=new Text(parent,SWT.BORDER | SWT.SINGLE);
    jarText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    jarText.setEditable(false);
    jarText.addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
        connectionParam.setDriverPath(jarText.getText());
      }
    }
);
    final Button selectJar=new Button(parent,SWT.PUSH);
    final StringBuilder filenameAll=new StringBuilder();
    selectJar.setText(""String_Node_Str"");
    selectJar.addSelectionListener(new SelectionAdapter(){
      public void widgetSelected(      SelectionEvent event){
        FileDialog dialog=new FileDialog(Display.getCurrent().getActiveShell());
        String filename=dialog.open();
        if (filename != null) {
          filenameAll.append(filename + ""String_Node_Str"");
          jarText.setText(filenameAll.toString());
          int length=filenameAll.length();
          filenameAll.delete(0,length);
        }
 else {
          jarText.setText(""String_Node_Str"");
        }
      }
    }
);
    Label labelDriver=new Label(parent,SWT.NONE);
    labelDriver.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    final Combo comboDriver=new Combo(parent,SWT.READ_ONLY);
    comboDriver.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    comboDriver.addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      SelectionEvent e){
        String driverClassName=comboDriver.getText();
        connectionParam.setDriverClassName(driverClassName);
        if (abstractWizardPage instanceof DatabaseWizardPage) {
          ((DatabaseWizardPage)abstractWizardPage).updateLoginPassEnable(!SupportDBUrlType.SQLITE3DEFAULTURL.getDbDriver().equals(driverClassName));
        }
      }
    }
);
    Button listDriverBtn=new Button(parent,SWT.PUSH);
    listDriverBtn.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    listDriverBtn.addSelectionListener(new SelectionAdapter(){
      public void widgetSelected(      SelectionEvent e){
        comboDriver.removeAll();
        for (        String stringToFile : jarText.getText().trim().split(""String_Node_Str"")) {
          File file=new File(stringToFile);
          if (file != null) {
            try {
              MyURLClassLoader cl=new MyURLClassLoader(file.toURL());
              Class[] classes=cl.getAssignableClasses(Driver.class);
              for (int i=0; i < classes.length; ++i) {
                comboDriver.add(classes[i].getName());
              }
            }
 catch (            MalformedURLException ex) {
              log.error(ex,ex);
            }
catch (            IOException ex) {
              log.error(ex,ex);
            }
          }
        }
        if (comboDriver.getItemCount() > 0) {
          String driverClassName=comboDriver.getItem(0);
          comboDriver.setText(driverClassName);
          connectionParam.setDriverClassName(driverClassName);
          if (abstractWizardPage instanceof DatabaseWizardPage) {
            ((DatabaseWizardPage)abstractWizardPage).updateButtonState();
            ((DatabaseWizardPage)abstractWizardPage).updateLoginPassEnable(!SupportDBUrlType.SQLITE3DEFAULTURL.getDbDriver().equals(driverClassName));
          }
        }
      }
    }
);
    Label labelUrl=new Label(parent,SWT.NONE);
    labelUrl.setText(""String_Node_Str"");
    final Text urlText=new Text(parent,SWT.BORDER | SWT.SINGLE);
    urlText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    urlText.addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
        connectionParam.setJdbcUrl(urlText.getText());
        if (abstractWizardPage instanceof DatabaseWizardPage) {
          ((DatabaseWizardPage)abstractWizardPage).updateButtonState();
        }
      }
    }
);
  }
 else   if (dbLiteral.trim().equals(SupportDBUrlType.SQLITE3DEFAULTURL.getLanguage())) {
    GridLayout layout=new GridLayout();
    layout.numColumns=3;
    parent.setLayout(layout);
    Label labelfile=new Label(parent,SWT.NONE);
    final Text fileText=new Text(parent,SWT.BORDER | SWT.SINGLE);
    final Button selectFile=new Button(parent,SWT.PUSH);
    Label labelUrl=new Label(parent,SWT.NONE);
    final Text urlText=new Text(parent,SWT.BORDER | SWT.SINGLE);
    labelfile.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    fileText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    fileText.setEditable(true);
    fileText.addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
        connectionParam.setFilePath(fileText.getText());
      }
    }
);
    selectFile.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    labelUrl.setText(""String_Node_Str"");
    urlText.setEditable(false);
    urlText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    setConnectionURL(SupportDBUrlStore.getInstance().getDBUrl(dbType.getDBKey(),""String_Node_Str"",""String_Node_Str"",fileText.getText(),""String_Node_Str"",""String_Node_Str""));
    urlText.setText(getConnectionURL());
    urlText.setEditable(false);
    urlText.addKeyListener(new KeyAdapter(){
      public void keyReleased(      KeyEvent e){
        setConnectionURL(urlText.getText());
      }
    }
);
    urlText.addFocusListener(new FocusAdapter(){
      public void focusGained(      FocusEvent e){
        urlText.setEditable(true);
      }
      public void focusLost(      FocusEvent e){
        urlText.setEditable(false);
      }
    }
);
    selectFile.addSelectionListener(new SelectionAdapter(){
      public void widgetSelected(      SelectionEvent event){
        FileDialog dialog=new FileDialog(Display.getCurrent().getActiveShell());
        String filename=dialog.open();
        if (filename != null) {
          fileText.setText(filename);
        }
 else {
          fileText.setText(""String_Node_Str"");
        }
        String url=SupportDBUrlStore.getInstance().getDBUrl(dbType.getDBKey(),""String_Node_Str"",""String_Node_Str"",fileText.getText(),""String_Node_Str"",""String_Node_Str"");
        if (log.isInfoEnabled()) {
          log.info(""String_Node_Str"" + url);
        }
        setConnectionURL(url);
        urlText.setText(getConnectionURL());
      }
    }
);
  }
 else   if (dbLiteral.trim().equals(SupportDBUrlType.MDM.getLanguage())) {
    GridLayout layout=new GridLayout();
    layout.numColumns=2;
    parent.setLayout(layout);
    boolean compositeEnable=!(dbType.getHostName() == null);
    Label label=new Label(parent,SWT.NONE);
    label.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    final Text hostNameText=new Text(parent,SWT.BORDER | SWT.SINGLE);
    hostNameText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    if (compositeEnable) {
      hostNameText.setText(dbType.getHostName());
      connectionParam.setHost(dbType.getHostName());
    }
    label.setEnabled(compositeEnable);
    hostNameText.setEnabled(compositeEnable);
    compositeEnable=!(dbType.getPort() == null);
    label=new Label(parent,SWT.NONE);
    label.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    final Text portText=new Text(parent,SWT.BORDER | SWT.SINGLE);
    portText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    if (compositeEnable) {
      portText.setText(dbType.getPort());
      connectionParam.setPort(dbType.getPort());
    }
    label.setEnabled(compositeEnable);
    portText.setEnabled(compositeEnable);
    compositeEnable=false;
    label=new Label(parent,SWT.NONE);
    label.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    final Text databaseNameText=new Text(parent,SWT.BORDER | SWT.SINGLE);
    databaseNameText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    databaseNameText.setText(dbType.getDBName());
    label.setEnabled(compositeEnable);
    databaseNameText.setEnabled(compositeEnable);
    label=new Label(parent,SWT.NONE);
    label.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    dataFilterCombo=new MultipleSelectionCombo(parent,SWT.READ_ONLY);
    dataFilterCombo.setEnabled(false);
    dataFilterCombo.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    dataFilterCombo.addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
        connectionParam.getParameters().setProperty(TaggedValueHelper.DATA_FILTER,((Text)e.getSource()).getText());
      }
    }
);
    label=new Label(parent,SWT.NONE);
    label.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    final Text universeText=new Text(parent,SWT.BORDER | SWT.SINGLE);
    universeText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    universeText.setText(""String_Node_Str"");
    label=new Label(parent,SWT.NONE);
    label.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    urlText=new Text(parent,SWT.BORDER | SWT.SINGLE);
    urlText.setEditable(false);
    urlText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    urlText.addFocusListener(new FocusAdapter(){
      public void focusGained(      FocusEvent e){
        urlText.setEditable(true);
      }
      public void focusLost(      FocusEvent e){
        urlText.setEditable(false);
      }
    }
);
    urlText.setText(getConnectionURL());
    urlText.addKeyListener(new KeyAdapter(){
      public void keyReleased(      KeyEvent e){
        setConnectionURL(urlText.getText());
      }
    }
);
    universeText.addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent event){
        setConnectionURL(SupportDBUrlStore.getInstance().getDBUrl(dbType.getDBKey(),hostNameText.getText(),portText.getText(),databaseNameText.getText(),universeText.getText(),""String_Node_Str""));
        urlText.setText(getConnectionURL());
        connectionParam.getParameters().setProperty(TaggedValueHelper.UNIVERSE,universeText.getText());
      }
    }
);
    hostNameText.addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent event){
        String host=hostNameText.getText();
        setConnectionURL(SupportDBUrlStore.getInstance().getDBUrl(dbType.getDBKey(),host,portText.getText(),databaseNameText.getText(),universeText.getText(),""String_Node_Str""));
        urlText.setText(getConnectionURL());
        connectionParam.setHost(host);
      }
    }
);
    portText.addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent event){
        String port=portText.getText();
        setConnectionURL(SupportDBUrlStore.getInstance().getDBUrl(dbType.getDBKey(),hostNameText.getText(),port,databaseNameText.getText(),universeText.getText(),""String_Node_Str""));
        urlText.setText(getConnectionURL());
        connectionParam.setPort(port);
      }
    }
);
    portText.addKeyListener(new KeyAdapter(){
      public void keyReleased(      KeyEvent e){
        Long portValue=null;
        try {
          portValue=new Long(portText.getText());
        }
 catch (        NumberFormatException e1) {
        }
        if (portValue == null || portValue <= 0) {
          portText.setText(PluginConstant.EMPTY_STRING);
        }
      }
    }
);
  }
 else {
    GridLayout layout=new GridLayout();
    layout.numColumns=2;
    parent.setLayout(layout);
    boolean compositeEnable=!(dbType.getHostName() == null);
    Label label=new Label(parent,SWT.NONE);
    label.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    final Text hostNameText=new Text(parent,SWT.BORDER | SWT.SINGLE);
    hostNameText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    if (compositeEnable) {
      hostNameText.setText(dbType.getHostName());
      connectionParam.setHost(dbType.getHostName());
    }
    label.setEnabled(compositeEnable);
    hostNameText.setEnabled(compositeEnable);
    compositeEnable=!(dbType.getPort() == null);
    label=new Label(parent,SWT.NONE);
    label.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    final Text portText=new Text(parent,SWT.BORDER | SWT.SINGLE);
    portText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    if (compositeEnable) {
      portText.setText(dbType.getPort());
      connectionParam.setPort(dbType.getPort());
    }
    label.setEnabled(compositeEnable);
    portText.setEnabled(compositeEnable);
    compositeEnable=!(dbType.getDBName() == null);
    label=new Label(parent,SWT.NONE);
    if (dbType == SupportDBUrlType.ORACLEWITHSIDDEFAULTURL) {
      label.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    }
 else     if (dbType == SupportDBUrlType.ORACLEWITHSERVICENAMEDEFAULTURL) {
      label.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    }
 else {
      label.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    }
    final Text databaseNameText=new Text(parent,SWT.BORDER | SWT.SINGLE);
    databaseNameText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    if (compositeEnable) {
      databaseNameText.setText(dbType.getDBName());
    }
    label.setEnabled(compositeEnable);
    databaseNameText.setEnabled(compositeEnable);
    if (dbType == SupportDBUrlType.ORACLEWITHSIDDEFAULTURL) {
      label=new Label(parent,SWT.NONE);
      label.setText(""String_Node_Str"");
      final Text schemaText=new Text(parent,SWT.BORDER | SWT.SINGLE);
      schemaText.setEditable(true);
      schemaText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
      schemaText.addModifyListener(new ModifyListener(){
        public void modifyText(        ModifyEvent event){
          String schema=schemaText.getText();
          connectionParam.setOtherParameter(schema);
        }
      }
);
    }
    compositeEnable=!(dbType.getParamSeprator() == null);
    label=new Label(parent,SWT.NONE);
    label.setText(""String_Node_Str"");
    final Text parameterText=new Text(parent,SWT.BORDER | SWT.SINGLE);
    parameterText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    if (dbType.getParamSeprator() != null) {
      parameterText.setText(org.talend.dq.PluginConstant.DEFAULT_PARAMETERS);
    }
 else {
      parameterText.setText(PluginConstant.EMPTY_STRING);
    }
    parameterText.setEnabled(compositeEnable);
    label.setEnabled(compositeEnable);
    parameterText.setEnabled(compositeEnable);
    compositeEnable=!(dbType.getDataSource() == null);
    label=new Label(parent,SWT.NONE);
    label.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    final Text dataSourceText=new Text(parent,SWT.BORDER | SWT.SINGLE);
    dataSourceText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    if (compositeEnable) {
      dataSourceText.setText(dbType.getDataSource());
    }
    label.setEnabled(compositeEnable);
    dataSourceText.setEnabled(compositeEnable);
    label=new Label(parent,SWT.NONE);
    label.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    urlText=new Text(parent,SWT.BORDER | SWT.SINGLE);
    urlText.setEditable(false);
    urlText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    urlText.addFocusListener(new FocusAdapter(){
      public void focusGained(      FocusEvent e){
        urlText.setEditable(true);
      }
      public void focusLost(      FocusEvent e){
        urlText.setEditable(false);
      }
    }
);
    urlText.setText(getConnectionURL());
    urlText.addKeyListener(new KeyAdapter(){
      public void keyReleased(      KeyEvent e){
        setConnectionURL(urlText.getText());
      }
    }
);
    dataSourceText.addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent event){
        setConnectionURL(SupportDBUrlStore.getInstance().getDBUrl(dbType.getDBKey(),hostNameText.getText(),portText.getText(),databaseNameText.getText(),dataSourceText.getText(),parameterText.getText()));
        urlText.setText(getConnectionURL());
      }
    }
);
    hostNameText.addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent event){
        String host=hostNameText.getText();
        setConnectionURL(SupportDBUrlStore.getInstance().getDBUrl(dbType.getDBKey(),host,portText.getText(),databaseNameText.getText(),dataSourceText.getText(),parameterText.getText()));
        urlText.setText(getConnectionURL());
        connectionParam.setHost(host);
      }
    }
);
    portText.addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent event){
        String port=portText.getText();
        setConnectionURL(SupportDBUrlStore.getInstance().getDBUrl(dbType.getDBKey(),hostNameText.getText(),port,databaseNameText.getText(),dataSourceText.getText(),parameterText.getText()));
        urlText.setText(getConnectionURL());
        connectionParam.setPort(port);
      }
    }
);
    portText.addKeyListener(new KeyAdapter(){
      public void keyReleased(      KeyEvent e){
        Long portValue=null;
        try {
          portValue=new Long(portText.getText());
        }
 catch (        NumberFormatException e1) {
        }
        if (portValue == null || portValue <= 0) {
          portText.setText(PluginConstant.EMPTY_STRING);
        }
      }
    }
);
    databaseNameText.addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent event){
        String dbName=databaseNameText.getText();
        setConnectionURL(SupportDBUrlStore.getInstance().getDBUrl(dbType.getDBKey(),hostNameText.getText(),portText.getText(),dbName,dataSourceText.getText(),parameterText.getText()));
        urlText.setText(getConnectionURL());
        SupportDBUrlStore.getInstance().changeAllDBNmae(dbName);
        connectionParam.setDbName(dbName);
      }
    }
);
    parameterText.addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
        setConnectionURL(SupportDBUrlStore.getInstance().getDBUrl(dbType.getDBKey(),hostNameText.getText(),portText.getText(),databaseNameText.getText(),dataSourceText.getText(),parameterText.getText()));
        urlText.setText(getConnectionURL());
      }
    }
);
  }
}","protected void createPart(Composite parent,String dbLiteral,final DBConnectionParameter connectionParam){
  if (dbLiteral.trim().equals(""String_Node_Str"")) {
    GridLayout layout=new GridLayout();
    layout.numColumns=3;
    parent.setLayout(layout);
    Label labelJar=new Label(parent,SWT.NONE);
    labelJar.setText(""String_Node_Str"");
    final Text jarText=new Text(parent,SWT.BORDER | SWT.SINGLE);
    jarText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    jarText.setEditable(false);
    jarText.addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
        connectionParam.setDriverPath(jarText.getText());
      }
    }
);
    final Button selectJar=new Button(parent,SWT.PUSH);
    final StringBuilder filenameAll=new StringBuilder();
    selectJar.setText(""String_Node_Str"");
    selectJar.addSelectionListener(new SelectionAdapter(){
      public void widgetSelected(      SelectionEvent event){
        FileDialog dialog=new FileDialog(Display.getCurrent().getActiveShell());
        String filename=dialog.open();
        if (filename != null) {
          filenameAll.append(filename + ""String_Node_Str"");
          jarText.setText(filenameAll.toString());
          int length=filenameAll.length();
          filenameAll.delete(0,length);
        }
 else {
          jarText.setText(""String_Node_Str"");
        }
      }
    }
);
    Label labelDriver=new Label(parent,SWT.NONE);
    labelDriver.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    final Combo comboDriver=new Combo(parent,SWT.READ_ONLY);
    comboDriver.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    comboDriver.addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      SelectionEvent e){
        String driverClassName=comboDriver.getText();
        connectionParam.setDriverClassName(driverClassName);
        if (abstractWizardPage instanceof DatabaseWizardPage) {
          ((DatabaseWizardPage)abstractWizardPage).updateLoginPassEnable(!SupportDBUrlType.SQLITE3DEFAULTURL.getDbDriver().equals(driverClassName));
        }
      }
    }
);
    Button listDriverBtn=new Button(parent,SWT.PUSH);
    listDriverBtn.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    listDriverBtn.addSelectionListener(new SelectionAdapter(){
      public void widgetSelected(      SelectionEvent e){
        comboDriver.removeAll();
        for (        String stringToFile : jarText.getText().trim().split(""String_Node_Str"")) {
          File file=new File(stringToFile);
          if (file != null) {
            try {
              MyURLClassLoader cl=new MyURLClassLoader(file.toURL());
              Class[] classes=cl.getAssignableClasses(Driver.class);
              for (int i=0; i < classes.length; ++i) {
                comboDriver.add(classes[i].getName());
              }
            }
 catch (            MalformedURLException ex) {
              log.error(ex,ex);
            }
catch (            IOException ex) {
              log.error(ex,ex);
            }
          }
        }
        if (comboDriver.getItemCount() > 0) {
          String driverClassName=comboDriver.getItem(0);
          comboDriver.setText(driverClassName);
          connectionParam.setDriverClassName(driverClassName);
          if (abstractWizardPage instanceof DatabaseWizardPage) {
            ((DatabaseWizardPage)abstractWizardPage).updateButtonState();
            ((DatabaseWizardPage)abstractWizardPage).updateLoginPassEnable(!SupportDBUrlType.SQLITE3DEFAULTURL.getDbDriver().equals(driverClassName));
          }
        }
      }
    }
);
    Label labelUrl=new Label(parent,SWT.NONE);
    labelUrl.setText(""String_Node_Str"");
    final Text urlText=new Text(parent,SWT.BORDER | SWT.SINGLE);
    urlText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    urlText.addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
        connectionParam.setJdbcUrl(urlText.getText());
        if (abstractWizardPage instanceof DatabaseWizardPage) {
          ((DatabaseWizardPage)abstractWizardPage).updateButtonState();
        }
      }
    }
);
  }
 else   if (dbLiteral.trim().equals(SupportDBUrlType.SQLITE3DEFAULTURL.getLanguage())) {
    GridLayout layout=new GridLayout();
    layout.numColumns=3;
    parent.setLayout(layout);
    Label labelfile=new Label(parent,SWT.NONE);
    final Text fileText=new Text(parent,SWT.BORDER | SWT.SINGLE);
    final Button selectFile=new Button(parent,SWT.PUSH);
    Label labelUrl=new Label(parent,SWT.NONE);
    final Text urlText=new Text(parent,SWT.BORDER | SWT.SINGLE);
    labelfile.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    fileText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    fileText.setEditable(true);
    fileText.addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
        connectionParam.setFilePath(fileText.getText());
      }
    }
);
    selectFile.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    labelUrl.setText(""String_Node_Str"");
    urlText.setEditable(false);
    urlText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    setConnectionURL(SupportDBUrlStore.getInstance().getDBUrl(dbType.getDBKey(),""String_Node_Str"",""String_Node_Str"",fileText.getText(),""String_Node_Str"",""String_Node_Str""));
    urlText.setText(getConnectionURL());
    urlText.setEditable(false);
    urlText.addKeyListener(new KeyAdapter(){
      public void keyReleased(      KeyEvent e){
        setConnectionURL(urlText.getText());
      }
    }
);
    urlText.addFocusListener(new FocusAdapter(){
      public void focusGained(      FocusEvent e){
        urlText.setEditable(true);
      }
      public void focusLost(      FocusEvent e){
        urlText.setEditable(false);
      }
    }
);
    selectFile.addSelectionListener(new SelectionAdapter(){
      public void widgetSelected(      SelectionEvent event){
        FileDialog dialog=new FileDialog(Display.getCurrent().getActiveShell());
        String filename=dialog.open();
        if (filename != null) {
          fileText.setText(filename);
        }
 else {
          fileText.setText(""String_Node_Str"");
        }
        String url=SupportDBUrlStore.getInstance().getDBUrl(dbType.getDBKey(),""String_Node_Str"",""String_Node_Str"",fileText.getText(),""String_Node_Str"",""String_Node_Str"");
        if (log.isInfoEnabled()) {
          log.info(""String_Node_Str"" + url);
        }
        setConnectionURL(url);
        urlText.setText(getConnectionURL());
      }
    }
);
  }
 else   if (dbLiteral.trim().equals(SupportDBUrlType.MDM.getLanguage())) {
    GridLayout layout=new GridLayout();
    layout.numColumns=2;
    parent.setLayout(layout);
    boolean compositeEnable=!(dbType.getHostName() == null);
    Label label=new Label(parent,SWT.NONE);
    label.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    final Text hostNameText=new Text(parent,SWT.BORDER | SWT.SINGLE);
    hostNameText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    if (compositeEnable) {
      hostNameText.setText(dbType.getHostName());
      connectionParam.setHost(dbType.getHostName());
    }
    label.setEnabled(compositeEnable);
    hostNameText.setEnabled(compositeEnable);
    compositeEnable=!(dbType.getPort() == null);
    label=new Label(parent,SWT.NONE);
    label.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    final Text portText=new Text(parent,SWT.BORDER | SWT.SINGLE);
    portText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    if (compositeEnable) {
      portText.setText(dbType.getPort());
      connectionParam.setPort(dbType.getPort());
    }
    label.setEnabled(compositeEnable);
    portText.setEnabled(compositeEnable);
    compositeEnable=false;
    label=new Label(parent,SWT.NONE);
    label.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    final Text databaseNameText=new Text(parent,SWT.BORDER | SWT.SINGLE);
    databaseNameText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    databaseNameText.setText(dbType.getDBName());
    label.setEnabled(compositeEnable);
    databaseNameText.setEnabled(compositeEnable);
    label=new Label(parent,SWT.NONE);
    label.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    dataFilterCombo=new MultipleSelectionCombo(parent,SWT.READ_ONLY);
    dataFilterCombo.setEnabled(false);
    dataFilterCombo.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    dataFilterCombo.addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
        connectionParam.getParameters().setProperty(TaggedValueHelper.DATA_FILTER,((Text)e.getSource()).getText());
      }
    }
);
    label=new Label(parent,SWT.NONE);
    label.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    final Text universeText=new Text(parent,SWT.BORDER | SWT.SINGLE);
    universeText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    universeText.setText(""String_Node_Str"");
    label=new Label(parent,SWT.NONE);
    label.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    urlText=new Text(parent,SWT.BORDER | SWT.SINGLE);
    urlText.setEditable(false);
    urlText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    urlText.addFocusListener(new FocusAdapter(){
      public void focusGained(      FocusEvent e){
        urlText.setEditable(true);
      }
      public void focusLost(      FocusEvent e){
        urlText.setEditable(false);
      }
    }
);
    urlText.setText(getConnectionURL());
    urlText.addKeyListener(new KeyAdapter(){
      public void keyReleased(      KeyEvent e){
        setConnectionURL(urlText.getText());
      }
    }
);
    universeText.addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent event){
        setConnectionURL(SupportDBUrlStore.getInstance().getDBUrl(dbType.getDBKey(),hostNameText.getText(),portText.getText(),databaseNameText.getText(),universeText.getText(),""String_Node_Str""));
        urlText.setText(getConnectionURL());
        connectionParam.getParameters().setProperty(TaggedValueHelper.UNIVERSE,universeText.getText());
      }
    }
);
    hostNameText.addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent event){
        String host=hostNameText.getText();
        setConnectionURL(SupportDBUrlStore.getInstance().getDBUrl(dbType.getDBKey(),host,portText.getText(),databaseNameText.getText(),universeText.getText(),""String_Node_Str""));
        urlText.setText(getConnectionURL());
        connectionParam.setHost(host);
      }
    }
);
    portText.addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent event){
        String port=portText.getText();
        setConnectionURL(SupportDBUrlStore.getInstance().getDBUrl(dbType.getDBKey(),hostNameText.getText(),port,databaseNameText.getText(),universeText.getText(),""String_Node_Str""));
        urlText.setText(getConnectionURL());
        connectionParam.setPort(port);
      }
    }
);
    portText.addKeyListener(new KeyAdapter(){
      public void keyReleased(      KeyEvent e){
        Long portValue=null;
        try {
          portValue=new Long(portText.getText());
        }
 catch (        NumberFormatException e1) {
        }
        if (portValue == null || portValue <= 0) {
          portText.setText(PluginConstant.EMPTY_STRING);
        }
      }
    }
);
  }
 else {
    GridLayout layout=new GridLayout();
    layout.numColumns=2;
    parent.setLayout(layout);
    boolean compositeEnable=!(dbType.getHostName() == null);
    Label label=new Label(parent,SWT.NONE);
    label.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    final Text hostNameText=new Text(parent,SWT.BORDER | SWT.SINGLE);
    hostNameText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    if (compositeEnable) {
      hostNameText.setText(dbType.getHostName());
      connectionParam.setHost(dbType.getHostName());
    }
    label.setEnabled(compositeEnable);
    hostNameText.setEnabled(compositeEnable);
    compositeEnable=!(dbType.getPort() == null);
    label=new Label(parent,SWT.NONE);
    label.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    final Text portText=new Text(parent,SWT.BORDER | SWT.SINGLE);
    portText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    if (compositeEnable) {
      portText.setText(dbType.getPort());
      connectionParam.setPort(dbType.getPort());
    }
    label.setEnabled(compositeEnable);
    portText.setEnabled(compositeEnable);
    compositeEnable=!(dbType.getDBName() == null);
    label=new Label(parent,SWT.NONE);
    if (dbType == SupportDBUrlType.ORACLEWITHSIDDEFAULTURL) {
      label.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    }
 else     if (dbType == SupportDBUrlType.ORACLEWITHSERVICENAMEDEFAULTURL) {
      label.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    }
 else {
      label.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    }
    final Text databaseNameText=new Text(parent,SWT.BORDER | SWT.SINGLE);
    databaseNameText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    if (compositeEnable) {
      databaseNameText.setText(dbType.getDBName());
    }
    label.setEnabled(compositeEnable);
    databaseNameText.setEnabled(compositeEnable);
    if (dbType == SupportDBUrlType.ORACLEWITHSIDDEFAULTURL) {
      label=new Label(parent,SWT.NONE);
      label.setText(""String_Node_Str"");
      final Text schemaText=new Text(parent,SWT.BORDER | SWT.SINGLE);
      schemaText.setEditable(true);
      schemaText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
      schemaText.addModifyListener(new ModifyListener(){
        public void modifyText(        ModifyEvent event){
          String schema=schemaText.getText();
          connectionParam.setOtherParameter(schema);
        }
      }
);
    }
    compositeEnable=!(dbType.getParamSeprator() == null);
    label=new Label(parent,SWT.NONE);
    label.setText(""String_Node_Str"");
    final Text parameterText=new Text(parent,SWT.BORDER | SWT.SINGLE);
    parameterText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    if (dbType.getParamSeprator() != null) {
      parameterText.setText(org.talend.dq.PluginConstant.DEFAULT_PARAMETERS);
      connectionParam.setaDDParameter(org.talend.dq.PluginConstant.DEFAULT_PARAMETERS);
    }
 else {
      parameterText.setText(PluginConstant.EMPTY_STRING);
      connectionParam.setaDDParameter(PluginConstant.EMPTY_STRING);
    }
    parameterText.setEnabled(compositeEnable);
    label.setEnabled(compositeEnable);
    parameterText.setEnabled(compositeEnable);
    compositeEnable=!(dbType.getDataSource() == null);
    label=new Label(parent,SWT.NONE);
    label.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    final Text dataSourceText=new Text(parent,SWT.BORDER | SWT.SINGLE);
    dataSourceText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    if (compositeEnable) {
      dataSourceText.setText(dbType.getDataSource());
    }
    label.setEnabled(compositeEnable);
    dataSourceText.setEnabled(compositeEnable);
    label=new Label(parent,SWT.NONE);
    label.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    urlText=new Text(parent,SWT.BORDER | SWT.SINGLE);
    urlText.setEditable(false);
    urlText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    urlText.addFocusListener(new FocusAdapter(){
      public void focusGained(      FocusEvent e){
        urlText.setEditable(true);
      }
      public void focusLost(      FocusEvent e){
        urlText.setEditable(false);
      }
    }
);
    urlText.setText(getConnectionURL());
    urlText.addKeyListener(new KeyAdapter(){
      public void keyReleased(      KeyEvent e){
        setConnectionURL(urlText.getText());
      }
    }
);
    dataSourceText.addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent event){
        setConnectionURL(SupportDBUrlStore.getInstance().getDBUrl(dbType.getDBKey(),hostNameText.getText(),portText.getText(),databaseNameText.getText(),dataSourceText.getText(),parameterText.getText()));
        urlText.setText(getConnectionURL());
      }
    }
);
    hostNameText.addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent event){
        String host=hostNameText.getText();
        setConnectionURL(SupportDBUrlStore.getInstance().getDBUrl(dbType.getDBKey(),host,portText.getText(),databaseNameText.getText(),dataSourceText.getText(),parameterText.getText()));
        urlText.setText(getConnectionURL());
        connectionParam.setHost(host);
      }
    }
);
    portText.addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent event){
        String port=portText.getText();
        setConnectionURL(SupportDBUrlStore.getInstance().getDBUrl(dbType.getDBKey(),hostNameText.getText(),port,databaseNameText.getText(),dataSourceText.getText(),parameterText.getText()));
        urlText.setText(getConnectionURL());
        connectionParam.setPort(port);
      }
    }
);
    portText.addKeyListener(new KeyAdapter(){
      public void keyReleased(      KeyEvent e){
        Long portValue=null;
        try {
          portValue=new Long(portText.getText());
        }
 catch (        NumberFormatException e1) {
        }
        if (portValue == null || portValue <= 0) {
          portText.setText(PluginConstant.EMPTY_STRING);
        }
      }
    }
);
    databaseNameText.addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent event){
        String dbName=databaseNameText.getText();
        setConnectionURL(SupportDBUrlStore.getInstance().getDBUrl(dbType.getDBKey(),hostNameText.getText(),portText.getText(),dbName,dataSourceText.getText(),parameterText.getText()));
        urlText.setText(getConnectionURL());
        SupportDBUrlStore.getInstance().changeAllDBNmae(dbName);
        connectionParam.setDbName(dbName);
      }
    }
);
    parameterText.addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
        connectionParam.setaDDParameter(parameterText.getText());
        setConnectionURL(SupportDBUrlStore.getInstance().getDBUrl(dbType.getDBKey(),hostNameText.getText(),portText.getText(),databaseNameText.getText(),dataSourceText.getText(),parameterText.getText()));
        urlText.setText(getConnectionURL());
      }
    }
);
  }
}",0.9939804772234272
138707,"public ItemRecord[] populate(ItemRecord[] elements,boolean checkExisted){
  List<ItemRecord> inValidRecords=new ArrayList<ItemRecord>();
  for (  ItemRecord record : elements) {
    checkDependency(record);
    if (checkExisted) {
      checkExisted(record);
    }
    if (!record.isValid()) {
      inValidRecords.add(record);
    }
  }
  return inValidRecords.toArray(new ItemRecord[inValidRecords.size()]);
}","public ItemRecord[] populate(ItemRecord[] elements,boolean checkExisted){
  List<ItemRecord> inValidRecords=new ArrayList<ItemRecord>();
  for (  ItemRecord record : elements) {
    record.getErrors().clear();
    checkDependency(record);
    if (checkExisted) {
      checkExisted(record);
    }
    if (!record.isValid()) {
      inValidRecords.add(record);
    }
  }
  return inValidRecords.toArray(new ItemRecord[inValidRecords.size()]);
}",0.9625292740046838
138708,"public ItemRecord(File file){
  this.file=file;
  try {
    if (file != null && file.isFile()) {
      init();
    }
  }
 catch (  Exception e) {
    addError(""String_Node_Str"" + getName() + ""String_Node_Str""+ e.getMessage());
  }
}","public ItemRecord(File file){
  this.file=file;
  if (resourceSet == null) {
    resourceSet=new ResourceSetImpl();
  }
  if (allItemRecords == null) {
    allItemRecords=new ArrayList<ItemRecord>();
  }
  if (file != null && file.isFile()) {
    allItemRecords.add(this);
    initialize();
  }
}",0.3598484848484848
138709,"private void initializeSchemaLow() throws SQLException {
  String dbName=getDbConnectionParameter() == null ? null : getDbConnectionParameter().getDbName();
  if (SupportDBUrlType.ORACLEWITHSIDDEFAULTURL.getLanguage().equals(dbms.getDbmsName()) && dbConnection instanceof DatabaseConnection) {
    String otherParameter=getDbConnectionParameter().getOtherParameter() == null ? null : getDbConnectionParameter().getOtherParameter().toUpperCase();
    if (otherParameter != null && !getDbConnectionParameter().isRetrieveAllMetadata()) {
      dbName=otherParameter;
    }
 else {
      dbName=((DatabaseConnection)dbConnection).getUsername().toUpperCase();
    }
  }
  if (!this.catalogsInitialized) {
    initializeCatalog();
  }
  Map<String,List<Schema>> catalog2schemas=null;
  if (this.connection.getMetaData().getDriverName().equals(DatabaseConstant.MSSQL_DRIVER_NAME_JDBC2_0)) {
    catalog2schemas=DatabaseContentRetriever.getMSSQLSchemas(this.connection);
  }
 else {
    catalog2schemas=DatabaseContentRetriever.getSchemas(this.connection);
  }
  boolean odbcIngres=this.connection.getMetaData().getDriverName().startsWith(DatabaseConstant.ODBC_INGRES_DRIVER_NAME);
  Set<String> catNames=catalog2schemas.keySet();
  for (  String catName : catNames) {
    List<Schema> schemas=catalog2schemas.get(catName);
    if (catName != null) {
      if (schemas != null) {
        Catalog catalog=getCatalog(catName);
        if (catalog != null && schemas != null) {
          if (!(schemas.size() == 1 && schemas.get(0) == null)) {
            CatalogHelper.addSchemas(schemas,catalog);
          }
        }
      }
    }
 else {
      List<Schema> retrievedSchemas=new ArrayList<Schema>();
      for (      Schema schema : schemas) {
        if (retrieveCatalogSchema(dbName,schema.getName()) || odbcIngres) {
          retrievedSchemas.add(schema);
        }
      }
      this.schemata.addAll(retrievedSchemas);
      if ((ConnectionUtils.isPostgresql(this.connection) && catNames.size() == 1 && this.name2catalog.size() == 1) || odbcIngres) {
        Catalog cat=this.name2catalog.values().iterator().next();
        CatalogHelper.addSchemas(retrievedSchemas,cat);
      }
    }
  }
  schemaInitialized=true;
}","private void initializeSchemaLow() throws SQLException {
  String dbName=dbConnectionParameter == null ? null : dbConnectionParameter.getDbName();
  if (SupportDBUrlType.ORACLEWITHSIDDEFAULTURL.getLanguage().equals(dbms.getDbmsName()) && dbConnection instanceof DatabaseConnection) {
    String otherParameter=null;
    if (dbConnectionParameter != null && dbConnectionParameter.getOtherParameter() != null) {
      otherParameter=dbConnectionParameter.getOtherParameter().toUpperCase();
    }
    if (otherParameter != null && !dbConnectionParameter.isRetrieveAllMetadata()) {
      dbName=otherParameter;
    }
 else {
      dbName=((DatabaseConnection)dbConnection).getUsername().toUpperCase();
    }
  }
  if (!this.catalogsInitialized) {
    initializeCatalog();
  }
  Map<String,List<Schema>> catalog2schemas=null;
  if (this.connection.getMetaData().getDriverName().equals(DatabaseConstant.MSSQL_DRIVER_NAME_JDBC2_0)) {
    catalog2schemas=DatabaseContentRetriever.getMSSQLSchemas(this.connection);
  }
 else {
    catalog2schemas=DatabaseContentRetriever.getSchemas(this.connection);
  }
  boolean odbcIngres=this.connection.getMetaData().getDriverName().startsWith(DatabaseConstant.ODBC_INGRES_DRIVER_NAME);
  Set<String> catNames=catalog2schemas.keySet();
  for (  String catName : catNames) {
    List<Schema> schemas=catalog2schemas.get(catName);
    if (catName != null) {
      if (schemas != null) {
        Catalog catalog=getCatalog(catName);
        if (catalog != null && schemas != null) {
          if (!(schemas.size() == 1 && schemas.get(0) == null)) {
            CatalogHelper.addSchemas(schemas,catalog);
          }
        }
      }
    }
 else {
      List<Schema> retrievedSchemas=new ArrayList<Schema>();
      for (      Schema schema : schemas) {
        if (retrieveCatalogSchema(dbName,schema.getName()) || odbcIngres) {
          retrievedSchemas.add(schema);
        }
      }
      this.schemata.addAll(retrievedSchemas);
      if ((ConnectionUtils.isPostgresql(this.connection) && catNames.size() == 1 && this.name2catalog.size() == 1) || odbcIngres) {
        Catalog cat=this.name2catalog.values().iterator().next();
        CatalogHelper.addSchemas(retrievedSchemas,cat);
      }
    }
  }
  schemaInitialized=true;
}",0.9671508379888268
138710,"/** 
 * Method ""createDataProvider"" create the data provider, the catalogs and the schemas. The created data provider and its related Catalog and Schemas are stored in the DBConnect class. In order to finally serialize them in a file, the method   {@link DBConnect#saveInFiles()} must be called.
 * @param connector the helper for building CWM objects from a connection
 * @param folderProvider contains the path where the file will be stored.
 * @return the data provider
 * @throws SQLException
 * @throws TalendException
 */
public static Connection createDataProvider(DBConnect connector) throws SQLException, TalendException {
  checkConnection(connector);
  Connection dataProvider=getTdDataProvider(connector);
  if (connector.retrieveDeployedSystemInformations()) {
    TdSoftwareSystem softwareSystem=connector.getSoftwareSystem();
    if (softwareSystem != null) {
      ConnectionHelper.setSoftwareSystem(dataProvider,softwareSystem);
    }
  }
  Collection<Catalog> catalogs=getCatalogs(connector);
  Collection<Schema> schemata=getSchemata(connector);
  boolean allAdded=false;
  String dbType=connector.getDbConnectionParameter().getSqlTypeName();
  if (catalogs.isEmpty()) {
    allAdded=ConnectionHelper.addSchemas(schemata,dataProvider);
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + schemata.size() + ""String_Node_Str""+ allAdded);
    }
  }
 else {
    allAdded=ConnectionHelper.addCatalogs(catalogs,dataProvider);
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + catalogs.size() + ""String_Node_Str""+ allAdded);
    }
  }
  if (log.isInfoEnabled()) {
    log.info(catalogs.size() + ""String_Node_Str"");
    log.info(schemata.size() + ""String_Node_Str"");
    if (schemata.size() == 0 && SupportDBUrlType.ORACLEWITHSIDDEFAULTURL.getLanguage().equals(dbType)) {
      throw new TalendException(""String_Node_Str"");
    }
  }
  if (log.isDebugEnabled()) {
    printInformations(catalogs,schemata);
  }
  if (!ReponsitoryContextBridge.isDefautProject()) {
    EDatabaseTypeName edatabasetypeInstance=EDatabaseTypeName.getTypeFromDisplayName(dbType);
    String product=edatabasetypeInstance.getProduct();
    String additionalParams=((DatabaseConnection)dataProvider).getAdditionalParams();
    if (additionalParams == null) {
      String[] urlSplitArray=((DatabaseConnection)dataProvider).getURL().split(""String_Node_Str"");
      if (urlSplitArray.length == 2) {
        ((DatabaseConnection)dataProvider).setAdditionalParams(urlSplitArray[1]);
      }
    }
    if (edatabasetypeInstance.isNeedSchema() && edatabasetypeInstance.getSchemaMappingField() == EDatabaseSchemaOrCatalogMapping.Schema && schemata != null) {
      Iterator<Schema> iter=schemata.iterator();
      while (iter.hasNext()) {
        String uischema=iter.next().getName();
        ((DatabaseConnection)dataProvider).setUiSchema(uischema);
        break;
      }
    }
    String dbname=connector.getDbConnectionParameter().getDbName();
    if ((dbname == null || ""String_Node_Str"".equals(dbname)) && catalogs != null) {
      Iterator<Catalog> iter=catalogs.iterator();
      while (iter.hasNext()) {
        ((DatabaseConnection)dataProvider).setSID(iter.next().getName());
        break;
      }
    }
    String mapping=MetadataTalendType.getDefaultDbmsFromProduct(product).getId();
    if (dataProvider instanceof DatabaseConnection) {
      ((DatabaseConnection)dataProvider).setProductId(product);
      ((DatabaseConnection)dataProvider).setDbmsId(mapping);
      int versionNum=connector.getConnection().getMetaData().getDatabaseMajorVersion();
      String connectionDbType=((DatabaseConnection)dataProvider).getDatabaseType();
      if (connectionDbType == null) {
        connectionDbType=connector.getDbConnectionParameter().getSqlTypeName();
        ((DatabaseConnection)dataProvider).setDatabaseType(connectionDbType);
      }
      List<EDatabaseVersion4Drivers> dbTypeList=EDatabaseVersion4Drivers.indexOfByDbType(connectionDbType);
      if (dbTypeList.size() == 1) {
        ((DatabaseConnection)dataProvider).setDbVersionString(dbTypeList.get(0).getVersionValue());
      }
 else       if (dbTypeList.size() > 1) {
        for (        EDatabaseVersion4Drivers eDatabaseVersion : dbTypeList) {
          String[] strArray=eDatabaseVersion.getVersionValue().split(""String_Node_Str"");
          if (strArray.length > 1 && strArray[1].startsWith(Integer.toString(versionNum))) {
            ((DatabaseConnection)dataProvider).setDbVersionString(eDatabaseVersion.getVersionValue());
            break;
          }
        }
      }
    }
  }
  return dataProvider;
}","/** 
 * Method ""createDataProvider"" create the data provider, the catalogs and the schemas. The created data provider and its related Catalog and Schemas are stored in the DBConnect class. In order to finally serialize them in a file, the method   {@link DBConnect#saveInFiles()} must be called.
 * @param connector the helper for building CWM objects from a connection
 * @param folderProvider contains the path where the file will be stored.
 * @return the data provider
 * @throws SQLException
 * @throws TalendException
 */
public static Connection createDataProvider(DBConnect connector) throws SQLException, TalendException {
  checkConnection(connector);
  Connection dataProvider=getTdDataProvider(connector);
  if (connector.retrieveDeployedSystemInformations()) {
    TdSoftwareSystem softwareSystem=connector.getSoftwareSystem();
    if (softwareSystem != null) {
      ConnectionHelper.setSoftwareSystem(dataProvider,softwareSystem);
    }
  }
  Collection<Catalog> catalogs=getCatalogs(connector);
  Collection<Schema> schemata=getSchemata(connector);
  boolean allAdded=false;
  String dbType=connector.getDbConnectionParameter().getSqlTypeName();
  if (catalogs.isEmpty()) {
    allAdded=ConnectionHelper.addSchemas(schemata,dataProvider);
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + schemata.size() + ""String_Node_Str""+ allAdded);
    }
  }
 else {
    allAdded=ConnectionHelper.addCatalogs(catalogs,dataProvider);
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + catalogs.size() + ""String_Node_Str""+ allAdded);
    }
  }
  if (log.isInfoEnabled()) {
    log.info(catalogs.size() + ""String_Node_Str"");
    log.info(schemata.size() + ""String_Node_Str"");
    if (schemata.size() == 0 && SupportDBUrlType.ORACLEWITHSIDDEFAULTURL.getLanguage().equals(dbType)) {
      throw new TalendException(""String_Node_Str"");
    }
  }
  if (log.isDebugEnabled()) {
    printInformations(catalogs,schemata);
  }
  if (!ReponsitoryContextBridge.isDefautProject()) {
    EDatabaseTypeName edatabasetypeInstance=EDatabaseTypeName.getTypeFromDisplayName(dbType);
    String product=edatabasetypeInstance.getProduct();
    String additionalParams=((DatabaseConnection)dataProvider).getAdditionalParams();
    if (additionalParams == null) {
      ((DatabaseConnection)dataProvider).setAdditionalParams(connector.getDbConnectionParameter().getaDDParameter());
    }
    if (edatabasetypeInstance.isNeedSchema()) {
      if (schemata.size() == 0 && catalogs.size() > 0) {
        schemata=CatalogHelper.getSchemas(SwitchHelpers.CATALOG_SWITCH.doSwitch((CatalogImpl)catalogs.toArray()[0]));
      }
      if (edatabasetypeInstance.getSchemaMappingField() == EDatabaseSchemaOrCatalogMapping.Schema && schemata.size() > 0) {
        Iterator<Schema> iter=schemata.iterator();
        while (iter.hasNext()) {
          String uischema=iter.next().getName();
          ((DatabaseConnection)dataProvider).setUiSchema(uischema);
          break;
        }
      }
    }
    String dbname=connector.getDbConnectionParameter().getDbName();
    if ((dbname == null || ""String_Node_Str"".equals(dbname)) && catalogs != null) {
      Iterator<Catalog> iter=catalogs.iterator();
      while (iter.hasNext()) {
        ((DatabaseConnection)dataProvider).setSID(iter.next().getName());
        break;
      }
    }
    String mapping=MetadataTalendType.getDefaultDbmsFromProduct(product).getId();
    if (dataProvider instanceof DatabaseConnection) {
      ((DatabaseConnection)dataProvider).setProductId(product);
      ((DatabaseConnection)dataProvider).setDbmsId(mapping);
      int versionNum=connector.getConnection().getMetaData().getDatabaseMajorVersion();
      String connectionDbType=((DatabaseConnection)dataProvider).getDatabaseType();
      if (connectionDbType == null) {
        connectionDbType=connector.getDbConnectionParameter().getSqlTypeName();
        ((DatabaseConnection)dataProvider).setDatabaseType(connectionDbType);
      }
      List<EDatabaseVersion4Drivers> dbTypeList=EDatabaseVersion4Drivers.indexOfByDbType(connectionDbType);
      if (dbTypeList.size() == 1) {
        ((DatabaseConnection)dataProvider).setDbVersionString(dbTypeList.get(0).getVersionValue());
      }
 else       if (dbTypeList.size() > 1) {
        for (        EDatabaseVersion4Drivers eDatabaseVersion : dbTypeList) {
          String[] strArray=eDatabaseVersion.getVersionValue().split(""String_Node_Str"");
          if (strArray.length > 1 && strArray[1].startsWith(Integer.toString(versionNum))) {
            ((DatabaseConnection)dataProvider).setDbVersionString(eDatabaseVersion.getVersionValue());
            break;
          }
        }
      }
    }
  }
  return dataProvider;
}",0.8959227467811158
138711,"@Override protected boolean doExecute() throws Exception {
  EMFUtil emfUtil=new EMFUtil();
  for (  File file : fileList) {
    if (file.isFile()) {
      URI uri=URI.createFileURI(file.getAbsolutePath());
      Resource resource=emfUtil.getResourceSet().getResource(uri,true);
      EObject eObject=resource.getContents().get(0);
      if (FactoriesUtil.isProvFile(uri.fileExtension())) {
        for (        EObject object : resource.getContents()) {
          if (object instanceof Connection) {
            eObject=object;
            break;
          }
        }
      }
      if (eObject != null) {
        if (eObject instanceof ModelElement) {
          ModelElement modelElement=(ModelElement)eObject;
          AElementPersistance writer=ElementWriterFactory.getInstance().create(uri.fileExtension());
          Property oldPropery=PropertyHelper.getProperty(modelElement);
          if (writer != null) {
            Property property=writer.initProperty(modelElement);
            if (oldPropery != null) {
              property.setId(oldPropery.getId());
              property.setAuthor(oldPropery.getAuthor());
              property.getItem().setState(oldPropery.getItem().getState());
            }
            computePath(property,file);
            URI propURI=resource.getURI().trimFileExtension().appendFileExtension(FactoriesUtil.PROPERTIES_EXTENSION);
            Resource propResource=emfUtil.getResourceSet().createResource(propURI);
            propResource.getContents().add(property);
            propResource.getContents().add(property.getItem());
            propResource.getContents().add(property.getItem().getState());
            EMFUtil.saveResource(propResource);
          }
 else {
            log.warn(""String_Node_Str"" + modelElement.getName() + ""String_Node_Str"");
          }
        }
 else {
          log.warn(""String_Node_Str"" + eObject.toString());
        }
      }
    }
  }
  emfUtil=null;
  return true;
}","@Override protected boolean doExecute() throws Exception {
  EMFUtil emfUtil=new EMFUtil();
  for (  File file : fileList) {
    if (file.isFile()) {
      URI uri=URI.createFileURI(file.getAbsolutePath());
      EObject eObject=null;
      try {
        Resource resource=emfUtil.getResourceSet().getResource(uri,true);
        eObject=resource.getContents().get(0);
        if (FactoriesUtil.isProvFile(uri.fileExtension())) {
          for (          EObject object : resource.getContents()) {
            if (object instanceof Connection) {
              eObject=object;
              break;
            }
          }
        }
      }
 catch (      Exception e) {
        log.warn(""String_Node_Str"" + file.getAbsolutePath(),e);
      }
      if (eObject != null) {
        if (eObject instanceof ModelElement) {
          ModelElement modelElement=(ModelElement)eObject;
          AElementPersistance writer=ElementWriterFactory.getInstance().create(uri.fileExtension());
          Property oldPropery=PropertyHelper.getProperty(modelElement);
          if (writer != null) {
            Property property=writer.initProperty(modelElement);
            if (oldPropery != null) {
              property.setId(oldPropery.getId());
              property.setAuthor(oldPropery.getAuthor());
              property.getItem().setState(oldPropery.getItem().getState());
            }
            computePath(property,file);
            URI propURI=uri.trimFileExtension().appendFileExtension(FactoriesUtil.PROPERTIES_EXTENSION);
            Resource propResource=emfUtil.getResourceSet().createResource(propURI);
            propResource.getContents().add(property);
            propResource.getContents().add(property.getItem());
            propResource.getContents().add(property.getItem().getState());
            EMFUtil.saveResource(propResource);
          }
 else {
            log.warn(""String_Node_Str"" + modelElement.getName() + ""String_Node_Str"");
          }
        }
 else {
          log.warn(""String_Node_Str"" + eObject.toString());
        }
      }
    }
  }
  emfUtil=null;
  return true;
}",0.8305876567494468
138712,"/** 
 * DOC bZhou Comment method ""populateElement"".
 */
private void populateElement(){
  ItemRecord[] invalidRecords=writer.populate(getElements(),!overwriteBTN.getSelection());
  updateErrorList(invalidRecords);
  if (invalidRecords.length > 0) {
    removeInvalidRecords(invalidRecords);
  }
}","/** 
 * DOC bZhou Comment method ""populateElement"".
 */
private void populateElement(){
  List<ItemRecord> allRecordList=ItemRecord.getAllItemRecords();
  ItemRecord[] invalidRecords=writer.populate(allRecordList.toArray(new ItemRecord[allRecordList.size()]),!overwriteBTN.getSelection());
  updateErrorList(invalidRecords);
  if (invalidRecords.length > 0) {
    removeInvalidRecords(invalidRecords);
  }
}",0.8079658605974396
138713,"public ItemRecord[] populate(ItemRecord[] elements,boolean checkExisted){
  List<ItemRecord> inValidRecords=new ArrayList<ItemRecord>();
  for (  ItemRecord record : elements) {
    record.getErrors().clear();
    checkDependency(record);
    if (checkExisted) {
      checkExisted(record);
    }
    if (!record.isValid()) {
      inValidRecords.add(record);
    }
  }
  return inValidRecords.toArray(new ItemRecord[inValidRecords.size()]);
}","public ItemRecord[] populate(ItemRecord[] elements,boolean checkExisted){
  List<ItemRecord> inValidRecords=new ArrayList<ItemRecord>();
  for (  ItemRecord record : elements) {
    checkDependency(record);
    if (checkExisted) {
      checkExisted(record);
    }
    if (!record.isValid()) {
      inValidRecords.add(record);
    }
  }
  return inValidRecords.toArray(new ItemRecord[inValidRecords.size()]);
}",0.9625292740046838
138714,"/** 
 * DOC bZhou Comment method ""checkExisted"".
 * @param record
 */
private void checkExisted(ItemRecord record){
  Property property=record.getProperty();
  if (property != null) {
    IPath itemPath=PropertyHelper.getItemPath(property);
    IFile itemFile=ResourcesPlugin.getWorkspace().getRoot().getFile(itemPath);
    try {
      itemFile.getParent().refreshLocal(IResource.DEPTH_INFINITE,null);
    }
 catch (    CoreException e) {
    }
    String aString=record.getName();
    if (itemFile.exists()) {
      ModelElementFileFactory.getResourceFileMap(itemFile).clear();
      URI itemURI=URI.createPlatformResourceURI(itemFile.getFullPath().toString(),false);
      EMFSharedResources.getInstance().unloadResource(itemURI.toString());
      URI propURI=itemURI.trimFileExtension().appendFileExtension(FactoriesUtil.PROPERTIES_EXTENSION);
      EMFSharedResources.getInstance().unloadResource(propURI.toString());
      record.addError(""String_Node_Str"" + aString + ""String_Node_Str""+ itemFile.getFullPath().toString());
    }
  }
}","/** 
 * DOC bZhou Comment method ""checkExisted"".
 * @param record
 */
private void checkExisted(ItemRecord record){
  Property property=record.getProperty();
  if (property != null) {
    IPath itemPath=PropertyHelper.getItemPath(property);
    IFile itemFile=ResourcesPlugin.getWorkspace().getRoot().getFile(itemPath);
    try {
      itemFile.getParent().refreshLocal(IResource.DEPTH_INFINITE,null);
    }
 catch (    CoreException e) {
    }
    if (itemFile.exists()) {
      ModelElementFileFactory.getResourceFileMap(itemFile).clear();
      URI itemURI=URI.createPlatformResourceURI(itemFile.getFullPath().toString(),false);
      EMFSharedResources.getInstance().unloadResource(itemURI.toString());
      URI propURI=itemURI.trimFileExtension().appendFileExtension(FactoriesUtil.PROPERTIES_EXTENSION);
      EMFSharedResources.getInstance().unloadResource(propURI.toString());
      record.addError(""String_Node_Str"" + record.getName() + ""String_Node_Str""+ itemFile.getFullPath().toString());
    }
  }
}",0.9707602339181286
138715,"/** 
 * DOC bZhou Comment method ""addError"".
 * @param error
 */
public void addError(String error){
  this.errors.add(error);
}","/** 
 * DOC bZhou Comment method ""addError"".
 * @param error
 */
public void addError(String error){
  if (elementEName != null) {
    error=""String_Node_Str"" + elementEName.name() + ""String_Node_Str""+ error;
  }
  this.errors.add(error);
}",0.6956521739130435
138716,"/** 
 * DOC bZhou Comment method ""init"".
 */
private void init(){
  if (resourceSet == null) {
    resourceSet=new ResourceSetImpl();
  }
  if (allItemRecords == null) {
    allItemRecords=new ArrayList<ItemRecord>();
  }
  allItemRecords.add(this);
  if (property == null) {
    property=(Property)EObjectHelper.retrieveEObject(getPropertyPath(),PropertiesPackage.eINSTANCE.getProperty());
  }
  if (element == null && !isJRXml()) {
    try {
      URI fileURI=URI.createFileURI(file.getAbsolutePath());
      Resource resource=resourceSet.getResource(fileURI,true);
      EList<EObject> contents=resource.getContents();
      if (contents != null && !contents.isEmpty()) {
        if (property.getItem() instanceof ConnectionItem) {
          element=((ConnectionItem)property.getItem()).getConnection();
        }
 else {
          EObject object=contents.get(0);
          if (object instanceof ModelElement) {
            element=(ModelElement)object;
          }
        }
      }
    }
 catch (    Exception e) {
      Log.warn(""String_Node_Str"" + getName());
    }
  }
  computeDependencies();
}","/** 
 * DOC bZhou Comment method ""init"".
 */
private void init(){
  if (resourceSet == null) {
    resourceSet=new ResourceSetImpl();
  }
  if (allItemRecords == null) {
    allItemRecords=new ArrayList<ItemRecord>();
  }
  allItemRecords.add(this);
  URI fileURI=URI.createFileURI(file.getAbsolutePath());
  elementEName=EElementEName.findENameByExt(fileURI.fileExtension());
  if (property == null) {
    property=(Property)EObjectHelper.retrieveEObject(getPropertyPath(),PropertiesPackage.eINSTANCE.getProperty());
  }
  if (element == null && !isJRXml()) {
    Resource resource=resourceSet.getResource(fileURI,true);
    EList<EObject> contents=resource.getContents();
    if (contents != null && !contents.isEmpty()) {
      if (property.getItem() instanceof ConnectionItem) {
        element=((ConnectionItem)property.getItem()).getConnection();
      }
 else {
        EObject object=contents.get(0);
        if (object instanceof ModelElement) {
          element=(ModelElement)object;
        }
      }
    }
  }
  computeDependencies();
}",0.79182156133829
138717,"public ItemRecord(File file){
  this.file=file;
  try {
    if (file != null && file.isFile()) {
      init();
    }
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
}","public ItemRecord(File file){
  this.file=file;
  try {
    if (file != null && file.isFile()) {
      init();
    }
  }
 catch (  Exception e) {
    addError(""String_Node_Str"" + getName() + ""String_Node_Str""+ e.getMessage());
  }
}",0.7692307692307693
138718,"/** 
 * Getter for childern.
 * @return the childern
 */
public ItemRecord[] getChildern(){
  if (childern == null) {
    List<ItemRecord> recordList=new ArrayList<ItemRecord>();
    File[] listFiles=file.listFiles();
    if (listFiles != null) {
      for (      File aFile : listFiles) {
        if (isValid(aFile)) {
          recordList.add(new ItemRecord(aFile));
        }
      }
    }
    childern=recordList.toArray(new ItemRecord[recordList.size()]);
  }
  return this.childern;
}","/** 
 * Getter for childern.
 * @return the childern
 */
public ItemRecord[] getChildern(){
  if (childern == null) {
    List<ItemRecord> recordList=new ArrayList<ItemRecord>();
    File[] listFiles=file.listFiles();
    if (listFiles != null) {
      for (      File aFile : listFiles) {
        if (isValid(aFile)) {
          ItemRecord itemRecord=new ItemRecord(aFile);
          if (itemRecord.isValid()) {
            recordList.add(itemRecord);
          }
        }
      }
    }
    childern=recordList.toArray(new ItemRecord[recordList.size()]);
  }
  return this.childern;
}",0.6858736059479554
138719,"public String getPersent(){
  if (percent != null) {
    if (percent.matches(""String_Node_Str"")) {
      return StringFormatUtil.format(percent,StringFormatUtil.PERCENT).toString();
    }
 else {
      return ""String_Node_Str"";
    }
  }
 else {
    return null;
  }
}","public String getPersent(){
  if (percent != null) {
    if (percent != Double.NaN) {
      return StringFormatUtil.format(percent,StringFormatUtil.PERCENT).toString();
    }
 else {
      return ""String_Node_Str"";
    }
  }
 else {
    return null;
  }
}",0.9216061185468452
138720,"public void setPercent(String percent){
  this.percent=percent;
}","public void setPercent(Double percent){
  this.percent=percent;
}",0.9076923076923076
138721,"public ChartDataEntity(Indicator indicator,String label,String value,String percent,boolean labelNull){
  this.label=label;
  this.value=value;
  this.percent=percent;
  this.labelNull=labelNull;
  this.indicator=indicator;
}","public ChartDataEntity(Indicator indicator,String label,String value,Double percent,boolean labelNull){
  this.label=label;
  this.value=value;
  this.percent=percent;
  this.labelNull=labelNull;
  this.indicator=indicator;
}",0.9733333333333334
138722,"public ICustomerDataset getCustomerDataset(){
  CustomerDefaultCategoryDataset customerdataset=new CustomerDefaultCategoryDataset();
  for (  IndicatorUnit unit : units) {
    final Object unitValue=unit.getValue();
    double value=unitValue != null ? Double.parseDouble(unitValue.toString()) : Double.NaN;
    String label=unit.getIndicatorName();
    customerdataset.addValue(value,label,label);
    ChartDataEntity entity=new ChartDataEntity();
    entity.setIndicator(unit.getIndicator());
    entity.setLabel(label);
    entity.setValue(String.valueOf(value));
    entity.setPercent(String.valueOf(value / unit.getIndicator().getCount()));
    customerdataset.addDataEntity(entity);
  }
  return customerdataset;
}","public ICustomerDataset getCustomerDataset(){
  CustomerDefaultCategoryDataset customerdataset=new CustomerDefaultCategoryDataset();
  for (  IndicatorUnit unit : units) {
    final Object unitValue=unit.getValue();
    double value=unitValue != null ? Double.parseDouble(unitValue.toString()) : Double.NaN;
    String label=unit.getIndicatorName();
    customerdataset.addValue(value,label,label);
    ChartDataEntity entity=new ChartDataEntity();
    entity.setIndicator(unit.getIndicator());
    entity.setLabel(label);
    entity.setValue(String.valueOf(value));
    entity.setPercent(value / unit.getIndicator().getCount());
    customerdataset.addDataEntity(entity);
  }
  return customerdataset;
}",0.9887640449438202
138723,"public ICustomerDataset getCustomerDataset(){
  CustomerDefaultCategoryDataset customerdataset=new CustomerDefaultCategoryDataset();
  for (  TableIndicatorUnit unit : units) {
    double value=Double.parseDouble(unit.getValue().toString());
    String label=unit.getIndicatorName();
    customerdataset.addValue(value,label,""String_Node_Str"");
    ChartDataEntity entity=new ChartDataEntity();
    entity.setIndicator(unit.getIndicator());
    entity.setLabel(label);
    entity.setValue(String.valueOf(value));
    entity.setPercent(String.valueOf(value / unit.getIndicator().getCount()));
    customerdataset.addDataEntity(entity);
  }
  return customerdataset;
}","public ICustomerDataset getCustomerDataset(){
  CustomerDefaultCategoryDataset customerdataset=new CustomerDefaultCategoryDataset();
  for (  TableIndicatorUnit unit : units) {
    double value=Double.parseDouble(unit.getValue().toString());
    String label=unit.getIndicatorName();
    customerdataset.addValue(value,label,""String_Node_Str"");
    ChartDataEntity entity=new ChartDataEntity();
    entity.setIndicator(unit.getIndicator());
    entity.setLabel(label);
    entity.setValue(String.valueOf(value));
    entity.setPercent(value / unit.getIndicator().getCount());
    customerdataset.addDataEntity(entity);
  }
  return customerdataset;
}",0.9878419452887538
138724,"public ICustomerDataset getCustomerDataset(){
  ComparatorsFactory.sort(units,ComparatorsFactory.TEXT_STATISTICS_COMPARATOR_ID);
  CustomerDefaultCategoryDataset customerdataset=new CustomerDefaultCategoryDataset();
  for (  IndicatorUnit unit : units) {
    double value=Double.parseDouble(unit.getValue().toString());
    String label=unit.getIndicatorName();
    String type=""String_Node_Str"";
switch (unit.getType()) {
case MinLengthWithNullIndicatorEnum:
case MinLengthWithBlankIndicatorEnum:
case MinLengthWithBlankNullIndicatorEnum:
      type=""String_Node_Str"";
    break;
case MaxLengthWithBlankIndicatorEnum:
case MaxLengthWithBlankNullIndicatorEnum:
case MaxLengthWithNullIndicatorEnum:
  type=""String_Node_Str"";
break;
case AverageLengthWithNullIndicatorEnum:
case AverageLengthWithBlankIndicatorEnum:
case AverageLengthWithNullBlankIndicatorEnum:
type=""String_Node_Str"";
break;
default :
type=label;
break;
}
customerdataset.addValue(value,type,label);
ChartDataEntity entity=new ChartDataEntity();
entity.setIndicator(unit.getIndicator());
entity.setLabel(label);
entity.setValue(String.valueOf(value));
entity.setPercent(String.valueOf(value / unit.getIndicator().getCount()));
customerdataset.addDataEntity(entity);
}
return customerdataset;
}","public ICustomerDataset getCustomerDataset(){
  ComparatorsFactory.sort(units,ComparatorsFactory.TEXT_STATISTICS_COMPARATOR_ID);
  CustomerDefaultCategoryDataset customerdataset=new CustomerDefaultCategoryDataset();
  for (  IndicatorUnit unit : units) {
    double value=Double.parseDouble(unit.getValue().toString());
    String label=unit.getIndicatorName();
    String type=""String_Node_Str"";
switch (unit.getType()) {
case MinLengthWithNullIndicatorEnum:
case MinLengthWithBlankIndicatorEnum:
case MinLengthWithBlankNullIndicatorEnum:
      type=""String_Node_Str"";
    break;
case MaxLengthWithBlankIndicatorEnum:
case MaxLengthWithBlankNullIndicatorEnum:
case MaxLengthWithNullIndicatorEnum:
  type=""String_Node_Str"";
break;
case AverageLengthWithNullIndicatorEnum:
case AverageLengthWithBlankIndicatorEnum:
case AverageLengthWithNullBlankIndicatorEnum:
type=""String_Node_Str"";
break;
default :
type=label;
break;
}
customerdataset.addValue(value,type,label);
ChartDataEntity entity=new ChartDataEntity();
entity.setIndicator(unit.getIndicator());
entity.setLabel(label);
entity.setValue(String.valueOf(value));
entity.setPercent(value / unit.getIndicator().getCount());
customerdataset.addDataEntity(entity);
}
return customerdataset;
}",0.9936051159072742
138725,"public ICustomerDataset getCustomerDataset(){
  ComparatorsFactory.sort(units,ComparatorsFactory.TEXT_STATISTICS_COMPARATOR_ID);
  CustomerDefaultCategoryDataset customerdataset=new CustomerDefaultCategoryDataset();
  for (  IndicatorUnit unit : units) {
    double value=Double.parseDouble(unit.getValue().toString());
    String label=unit.getIndicatorName();
    customerdataset.addValue(value,label,label);
    ChartDataEntity entity=new ChartDataEntity();
    entity.setIndicator(unit.getIndicator());
    entity.setLabel(label);
    entity.setValue(String.valueOf(value));
    entity.setPercent(String.valueOf(value / unit.getIndicator().getCount()));
    customerdataset.addDataEntity(entity);
  }
  return customerdataset;
}","public ICustomerDataset getCustomerDataset(){
  ComparatorsFactory.sort(units,ComparatorsFactory.TEXT_STATISTICS_COMPARATOR_ID);
  CustomerDefaultCategoryDataset customerdataset=new CustomerDefaultCategoryDataset();
  for (  IndicatorUnit unit : units) {
    double value=Double.parseDouble(unit.getValue().toString());
    String label=unit.getIndicatorName();
    customerdataset.addValue(value,label,label);
    ChartDataEntity entity=new ChartDataEntity();
    entity.setIndicator(unit.getIndicator());
    entity.setLabel(label);
    entity.setValue(String.valueOf(value));
    entity.setPercent(value / unit.getIndicator().getCount());
    customerdataset.addDataEntity(entity);
  }
  return customerdataset;
}",0.988950276243094
138726,"@Override public ICustomerDataset getCustomerDataset(){
  CustomerDefaultCategoryDataset customerdataset=new CustomerDefaultCategoryDataset();
  for (  IndicatorUnit unit : units) {
    if (unit.isExcuted()) {
      FrequencyExt[] frequencyExt=(FrequencyExt[])unit.getValue();
      sortIndicator(frequencyExt);
      int numOfShown=frequencyExt.length;
      IndicatorParameters parameters=unit.getIndicator().getParameters();
      if (parameters != null) {
        if (parameters.getTopN() < frequencyExt.length) {
          numOfShown=parameters.getTopN();
        }
      }
      for (int i=0; i < numOfShown; i++) {
        FrequencyExt freqExt=frequencyExt[i];
        String keyLabel=String.valueOf(freqExt.getKey());
        if (""String_Node_Str"".equals(keyLabel)) {
          keyLabel=SpecialValueDisplay.NULL_FIELD;
        }
        if (""String_Node_Str"".equals(keyLabel)) {
          keyLabel=SpecialValueDisplay.EMPTY_FIELD;
        }
        customerdataset.addValue(freqExt.getValue(),unit.getIndicatorName(),keyLabel);
        ChartDataEntity entity=new ChartDataEntity();
        entity.setIndicator(unit.getIndicator());
        entity.setKey(freqExt.getKey());
        entity.setLabelNull(freqExt.getKey() == null);
        entity.setLabel(keyLabel);
        entity.setValue(String.valueOf(freqExt.getValue()));
        entity.setPercent(String.valueOf(freqExt.getFrequency()));
        customerdataset.addDataEntity(entity);
      }
    }
  }
  return customerdataset;
}","@Override public ICustomerDataset getCustomerDataset(){
  CustomerDefaultCategoryDataset customerdataset=new CustomerDefaultCategoryDataset();
  for (  IndicatorUnit unit : units) {
    if (unit.isExcuted()) {
      FrequencyExt[] frequencyExt=(FrequencyExt[])unit.getValue();
      sortIndicator(frequencyExt);
      int numOfShown=frequencyExt.length;
      IndicatorParameters parameters=unit.getIndicator().getParameters();
      if (parameters != null) {
        if (parameters.getTopN() < frequencyExt.length) {
          numOfShown=parameters.getTopN();
        }
      }
      for (int i=0; i < numOfShown; i++) {
        FrequencyExt freqExt=frequencyExt[i];
        String keyLabel=String.valueOf(freqExt.getKey());
        if (""String_Node_Str"".equals(keyLabel)) {
          keyLabel=SpecialValueDisplay.NULL_FIELD;
        }
        if (""String_Node_Str"".equals(keyLabel)) {
          keyLabel=SpecialValueDisplay.EMPTY_FIELD;
        }
        customerdataset.addValue(freqExt.getValue(),unit.getIndicatorName(),keyLabel);
        ChartDataEntity entity=new ChartDataEntity();
        entity.setIndicator(unit.getIndicator());
        entity.setKey(freqExt.getKey());
        entity.setLabelNull(freqExt.getKey() == null);
        entity.setLabel(keyLabel);
        entity.setValue(String.valueOf(freqExt.getValue()));
        entity.setPercent(freqExt.getFrequency());
        customerdataset.addDataEntity(entity);
      }
    }
  }
  return customerdataset;
}",0.9946055293324344
138727,"@Override public ICustomerDataset getCustomerDataset(){
  CustomerDefaultCategoryDataset customerdataset=new CustomerDefaultCategoryDataset();
  for (  IndicatorUnit unit : units) {
    if (unit.isExcuted()) {
      FrequencyExt[] frequencyExt=(FrequencyExt[])unit.getValue();
      sortIndicator(frequencyExt);
      int numOfShown=frequencyExt.length;
      IndicatorParameters parameters=unit.getIndicator().getParameters();
      if (parameters != null) {
        if (parameters.getTopN() < frequencyExt.length) {
          numOfShown=parameters.getTopN();
        }
      }
      for (int i=0; i < numOfShown; i++) {
        FrequencyExt freqExt=frequencyExt[i];
        String keyLabel=String.valueOf(freqExt.getKey());
        if (""String_Node_Str"".equals(keyLabel)) {
          keyLabel=SpecialValueDisplay.NULL_FIELD;
        }
        if (""String_Node_Str"".equals(keyLabel)) {
          keyLabel=SpecialValueDisplay.EMPTY_FIELD;
        }
        customerdataset.addValue(freqExt.getValue(),unit.getIndicatorName(),keyLabel);
        ChartDataEntity entity=new ChartDataEntity();
        entity.setIndicator(unit.getIndicator());
        entity.setKey(freqExt.getKey());
        entity.setLabelNull(freqExt.getKey() == null);
        entity.setLabel(keyLabel);
        entity.setValue(String.valueOf(freqExt.getValue()));
        entity.setPercent(String.valueOf(freqExt.getFrequency()));
        customerdataset.addDataEntity(entity);
      }
    }
  }
  return customerdataset;
}","@Override public ICustomerDataset getCustomerDataset(){
  CustomerDefaultCategoryDataset customerdataset=new CustomerDefaultCategoryDataset();
  for (  IndicatorUnit unit : units) {
    if (unit.isExcuted()) {
      FrequencyExt[] frequencyExt=(FrequencyExt[])unit.getValue();
      sortIndicator(frequencyExt);
      int numOfShown=frequencyExt.length;
      IndicatorParameters parameters=unit.getIndicator().getParameters();
      if (parameters != null) {
        if (parameters.getTopN() < frequencyExt.length) {
          numOfShown=parameters.getTopN();
        }
      }
      for (int i=0; i < numOfShown; i++) {
        FrequencyExt freqExt=frequencyExt[i];
        String keyLabel=String.valueOf(freqExt.getKey());
        if (""String_Node_Str"".equals(keyLabel)) {
          keyLabel=SpecialValueDisplay.NULL_FIELD;
        }
        if (""String_Node_Str"".equals(keyLabel)) {
          keyLabel=SpecialValueDisplay.EMPTY_FIELD;
        }
        customerdataset.addValue(freqExt.getValue(),unit.getIndicatorName(),keyLabel);
        ChartDataEntity entity=new ChartDataEntity();
        entity.setIndicator(unit.getIndicator());
        entity.setKey(freqExt.getKey());
        entity.setLabelNull(freqExt.getKey() == null);
        entity.setLabel(keyLabel);
        entity.setValue(String.valueOf(freqExt.getValue()));
        entity.setPercent(freqExt.getFrequency());
        customerdataset.addDataEntity(entity);
      }
    }
  }
  return customerdataset;
}",0.9946055293324344
138728,"public ICustomerDataset getCustomerDataset(){
  CustomerDefaultCategoryDataset customerdataset=new CustomerDefaultCategoryDataset();
  for (  IndicatorUnit unit : units) {
    if (unit.isExcuted()) {
      FrequencyExt[] frequencyExt=(FrequencyExt[])unit.getValue();
      sortIndicator(frequencyExt);
      int numOfShown=frequencyExt.length;
      IndicatorParameters parameters=unit.getIndicator().getParameters();
      if (parameters != null) {
        if (parameters.getTopN() < frequencyExt.length) {
          numOfShown=parameters.getTopN();
        }
      }
      for (int i=0; i < numOfShown; i++) {
        FrequencyExt freqExt=frequencyExt[i];
        String keyLabel=String.valueOf(freqExt.getKey());
        if (""String_Node_Str"".equals(keyLabel)) {
          keyLabel=SpecialValueDisplay.NULL_FIELD;
        }
        if (""String_Node_Str"".equals(keyLabel)) {
          keyLabel=SpecialValueDisplay.EMPTY_FIELD;
        }
        customerdataset.addValue(freqExt.getValue(),""String_Node_Str"",keyLabel);
        ChartDataEntity entity=new ChartDataEntity();
        entity.setIndicator(unit.getIndicator());
        entity.setKey(freqExt.getKey());
        entity.setLabelNull(freqExt.getKey() == null);
        entity.setLabel(keyLabel);
        entity.setValue(String.valueOf(freqExt.getValue()));
        entity.setPercent(String.valueOf(freqExt.getFrequency()));
        customerdataset.addDataEntity(entity);
      }
    }
  }
  return customerdataset;
}","public ICustomerDataset getCustomerDataset(){
  CustomerDefaultCategoryDataset customerdataset=new CustomerDefaultCategoryDataset();
  for (  IndicatorUnit unit : units) {
    if (unit.isExcuted()) {
      FrequencyExt[] frequencyExt=(FrequencyExt[])unit.getValue();
      sortIndicator(frequencyExt);
      int numOfShown=frequencyExt.length;
      IndicatorParameters parameters=unit.getIndicator().getParameters();
      if (parameters != null) {
        if (parameters.getTopN() < frequencyExt.length) {
          numOfShown=parameters.getTopN();
        }
      }
      for (int i=0; i < numOfShown; i++) {
        FrequencyExt freqExt=frequencyExt[i];
        String keyLabel=String.valueOf(freqExt.getKey());
        if (""String_Node_Str"".equals(keyLabel)) {
          keyLabel=SpecialValueDisplay.NULL_FIELD;
        }
        if (""String_Node_Str"".equals(keyLabel)) {
          keyLabel=SpecialValueDisplay.EMPTY_FIELD;
        }
        customerdataset.addValue(freqExt.getValue(),""String_Node_Str"",keyLabel);
        ChartDataEntity entity=new ChartDataEntity();
        entity.setIndicator(unit.getIndicator());
        entity.setKey(freqExt.getKey());
        entity.setLabelNull(freqExt.getKey() == null);
        entity.setLabel(keyLabel);
        entity.setValue(String.valueOf(freqExt.getValue()));
        entity.setPercent(freqExt.getFrequency());
        customerdataset.addDataEntity(entity);
      }
    }
  }
  return customerdataset;
}",0.994546693933197
138729,"public Properties getDBPameterProperties(String connectionStr){
  Properties paramProperties=new Properties();
  String matchSubStr=connectionStr.substring(0,8);
  Set<Object> s=PROP.keySet();
  Iterator<Object> it=s.iterator();
  while (it.hasNext()) {
    String id=(String)it.next();
    String value=PROP.getProperty(id);
    if (value.contains(matchSubStr)) {
      paramProperties.setProperty(PluginConstant.DBTYPE_PROPERTY,id);
      MessageFormat mf=new MessageFormat(value);
      Object[] parseResult=mf.parse(connectionStr,new ParsePosition(0));
      if (parseResult != null) {
        if (parseResult[0] != null) {
          paramProperties.setProperty(PluginConstant.HOSTNAME_PROPERTY,(String)parseResult[0]);
        }
        if (parseResult[1] != null) {
          paramProperties.setProperty(PluginConstant.PORT_PROPERTY,(String)parseResult[1]);
        }
        break;
      }
    }
  }
  return paramProperties;
}","public Properties getDBPameterProperties(String connectionStr){
  Properties paramProperties=new Properties();
  if (connectionStr != null) {
    String matchSubStr=connectionStr.substring(0,8);
    Set<Object> s=PROP.keySet();
    Iterator<Object> it=s.iterator();
    while (it.hasNext()) {
      String id=(String)it.next();
      String value=PROP.getProperty(id);
      if (value.contains(matchSubStr)) {
        paramProperties.setProperty(PluginConstant.DBTYPE_PROPERTY,id);
        MessageFormat mf=new MessageFormat(value);
        Object[] parseResult=mf.parse(connectionStr,new ParsePosition(0));
        if (parseResult != null) {
          if (parseResult[0] != null) {
            paramProperties.setProperty(PluginConstant.HOSTNAME_PROPERTY,(String)parseResult[0]);
          }
          if (parseResult[1] != null) {
            paramProperties.setProperty(PluginConstant.PORT_PROPERTY,(String)parseResult[1]);
          }
          break;
        }
      }
    }
  }
 else {
    paramProperties.setProperty(PluginConstant.DBTYPE_PROPERTY,""String_Node_Str"");
    paramProperties.setProperty(PluginConstant.HOSTNAME_PROPERTY,""String_Node_Str"");
    paramProperties.setProperty(PluginConstant.PORT_PROPERTY,""String_Node_Str"");
  }
  return paramProperties;
}",0.8250226654578422
138730,"public static String computePath(Property property){
  Resource eResource=property.eResource();
  if (eResource != null) {
    IPath propPath, typedPath;
    URI propURI=eResource.getURI();
    if (propURI.isPlatform()) {
      propPath=new Path(propURI.toPlatformString(true)).removeLastSegments(1);
      typedPath=ResourceManager.getRootProject().getFullPath().append(PropertyHelper.getItemTypedPath(property));
      IPath itemPath=propPath.makeRelativeTo(typedPath);
      return itemPath.toString();
    }
  }
  return ""String_Node_Str"";
}","/** 
 * DOC bZhou Comment method ""computePath"".
 * @param property
 * @param file
 * @return
 */
public static String computePath(Property property,File file){
  IPath filePath=new Path(file.getAbsolutePath()).setDevice(null);
  int flag=0;
  EResourceConstant typedConstant=EResourceConstant.getTypedConstant(property.getItem());
  if (typedConstant != null) {
    String typedName=typedConstant.getName();
    for (int i=0; i < filePath.segmentCount(); i++) {
      String seg=filePath.segment(i);
      if (seg.equals(typedName)) {
        flag=i + 1;
        break;
      }
    }
  }
 else {
    List<EResourceConstant> typedConstantList=EResourceConstant.getTypedConstantList();
    typedConstantList.add(EResourceConstant.OLD_DB_CONNECTIONS);
    typedConstantList.add(EResourceConstant.MDM_CONNECTIONS);
    for (int i=0; i < filePath.segmentCount() && flag == 0; i++) {
      String seg=filePath.segment(i);
      for (      EResourceConstant constant : typedConstantList) {
        if (seg.equals(constant.getName())) {
          flag=i + 1;
          break;
        }
      }
    }
  }
  IPath statPath=filePath.removeFirstSegments(flag).removeLastSegments(1);
  return statPath.toString();
}",0.1659988551803091
138731,"@Override protected boolean doExecute() throws Exception {
  EMFUtil emfUtil=new EMFUtil();
  for (  File file : fileList) {
    if (file.isFile()) {
      URI uri=URI.createFileURI(file.getAbsolutePath());
      EObject eObject=null;
      try {
        Resource resource=emfUtil.getResourceSet().getResource(uri,true);
        eObject=resource.getContents().get(0);
        if (FactoriesUtil.isProvFile(uri.fileExtension())) {
          for (          EObject object : resource.getContents()) {
            if (object instanceof Connection) {
              eObject=object;
              break;
            }
          }
        }
      }
 catch (      Exception e) {
        log.warn(""String_Node_Str"" + file.getAbsolutePath(),e);
      }
      if (eObject != null) {
        if (eObject instanceof ModelElement) {
          ModelElement modelElement=(ModelElement)eObject;
          AElementPersistance writer=ElementWriterFactory.getInstance().create(uri.fileExtension());
          Property oldPropery=PropertyHelper.getProperty(modelElement);
          if (writer != null) {
            Property property=writer.initProperty(modelElement);
            if (oldPropery != null) {
              property.setId(oldPropery.getId());
              property.setAuthor(oldPropery.getAuthor());
              property.getItem().setState(oldPropery.getItem().getState());
            }
            computePath(property,file);
            URI propURI=uri.trimFileExtension().appendFileExtension(FactoriesUtil.PROPERTIES_EXTENSION);
            Resource propResource=emfUtil.getResourceSet().createResource(propURI);
            propResource.getContents().add(property);
            propResource.getContents().add(property.getItem());
            propResource.getContents().add(property.getItem().getState());
            EMFUtil.saveResource(propResource);
          }
 else {
            log.warn(""String_Node_Str"" + modelElement.getName() + ""String_Node_Str"");
          }
        }
 else {
          log.warn(""String_Node_Str"" + eObject.toString());
        }
      }
    }
  }
  emfUtil=null;
  return true;
}","@Override protected boolean doExecute() throws Exception {
  EMFUtil emfUtil=new EMFUtil();
  for (  File file : fileList) {
    if (file.isFile()) {
      URI uri=URI.createFileURI(file.getAbsolutePath());
      System.out.println(""String_Node_Str"" + uri.toString());
      EObject eObject=null;
      try {
        Resource resource=emfUtil.getResourceSet().getResource(uri,true);
        eObject=resource.getContents().get(0);
        if (FactoriesUtil.isProvFile(uri.fileExtension())) {
          for (          EObject object : resource.getContents()) {
            if (object instanceof Connection) {
              eObject=object;
              break;
            }
          }
        }
      }
 catch (      Exception e) {
        log.warn(""String_Node_Str"" + file.getAbsolutePath(),e);
      }
      if (eObject != null) {
        if (eObject instanceof ModelElement) {
          ModelElement modelElement=(ModelElement)eObject;
          AElementPersistance writer=ElementWriterFactory.getInstance().create(uri.fileExtension());
          Property oldPropery=PropertyHelper.getProperty(modelElement);
          if (writer != null) {
            Property property=writer.initProperty(modelElement);
            if (oldPropery != null) {
              property.setId(oldPropery.getId());
              property.setAuthor(oldPropery.getAuthor());
              property.getItem().setState(oldPropery.getItem().getState());
            }
            if (file.getName().endsWith(""String_Node_Str"")) {
              System.out.println(""String_Node_Str"");
            }
            String statePathStr=PropertyHelper.computePath(property,file);
            property.getItem().getState().setPath(statePathStr);
            URI propURI=uri.trimFileExtension().appendFileExtension(FactoriesUtil.PROPERTIES_EXTENSION);
            Resource propResource=emfUtil.getResourceSet().createResource(propURI);
            propResource.getContents().add(property);
            propResource.getContents().add(property.getItem());
            propResource.getContents().add(property.getItem().getState());
            EMFUtil.saveResource(propResource);
          }
 else {
            log.warn(""String_Node_Str"" + modelElement.getName() + ""String_Node_Str"");
          }
        }
 else {
          log.warn(""String_Node_Str"" + eObject.toString());
        }
      }
    }
  }
  emfUtil=null;
  return true;
}",0.9354337696915908
138732,"public static IChartTypeStates getChartState(EIndicatorChartType type,List<IndicatorUnit> units){
switch (type) {
case SIMPLE_STATISTICS:
    return new SimpleStatisticsState(units);
case UDI_COUNT:
case UDI_REALVALUE:
  return new UDISimpleStatisticsState(units);
case TEXT_STATISTICS:
return new TextStatisticsState(units);
case MODE_INDICATOR:
return new ModeStatisticsState(units);
case FREQUENCE_STATISTICS:
return new FrequencyStatisticsState(units);
case UDI_FREQUENCY:
return new UDIFrequencyStatisticsState(units);
case LOW_FREQUENCE_STATISTICS:
return new LowFrequencyStatisticsState(units);
case BIN_FREQUENCE_STATISTICS:
return new FrequencyStatisticsState(units);
case BIN_LOW_FREQUENCE_STATISTICS:
return new LowFrequencyStatisticsState(units);
case PATTERN_FREQUENCE_STATISTICS:
return new PatternFrequencyStatisticsState(units);
case PATTERN_LOW_FREQUENCE_STATISTICS:
return new PatternLowFrequencyStatisticsState(units);
case DATE_PATTERN_FREQUENCE_STATISTICS:
return new DatePatternFrequencyStatisticsState(units);
case PATTERN_MATCHING:
return new REGEXPatternStatisticsState(units);
case UDI_MATCHING:
return new UDIMatchStatisticsState(units);
case SQL_PATTERN_MATCHING:
return new SQLPatternStatisticsState(units);
case SUMMARY_STATISTICS:
return new SummaryStatisticsState(units);
case SOUNDEX_FREQUENCY_TABLE:
return new SoundexFrequencyTableState(units);
case SOUNDEX_LOW_FREQUENCY_TABLE:
return new SoundexLowFrequencyTableState(units);
case DATE_FREQUENCE_STATISTICS:
case WEEK_FREQUENCE_STATISTICS:
case MONTH_FREQUENCE_STATISTICS:
case QUARTER_FREQUENCE_STATISTICS:
case YEAR_FREQUENCE_STATISTICS:
return new DateFrequencyStatisticsState(units);
case DATE_LOW_FREQUENCE_STATISTICS:
case WEEK_LOW_FREQUENCE_STATISTICS:
case MONTH_LOW_FREQUENCE_STATISTICS:
case QUARTER_LOW_FREQUENCE_STATISTICS:
case YEAR_LOW_FREQUENCE_STATISTICS:
return new DateLowFrequencyStatisticsState(units);
case SIMPLE_TEXT_STATISTICS:
return new SimpleTextStatisticsState(units);
default :
return null;
}
}","public static IChartTypeStates getChartState(EIndicatorChartType type,List<IndicatorUnit> units){
switch (type) {
case SIMPLE_STATISTICS:
    return new SimpleStatisticsState(units);
case UDI_COUNT:
case UDI_REALVALUE:
  return new UDISimpleStatisticsState(units);
case TEXT_STATISTICS:
return new TextStatisticsState(units);
case MODE_INDICATOR:
return new ModeStatisticsState(units);
case FREQUENCE_STATISTICS:
return new FrequencyStatisticsState(units);
case UDI_FREQUENCY:
return new UDIFrequencyStatisticsState(units);
case LOW_FREQUENCE_STATISTICS:
return new LowFrequencyStatisticsState(units);
case BIN_FREQUENCE_STATISTICS:
return new FrequencyStatisticsState(units);
case BIN_LOW_FREQUENCE_STATISTICS:
return new LowFrequencyStatisticsState(units);
case PATTERN_FREQUENCE_STATISTICS:
return new PatternFrequencyStatisticsState(units);
case PATTERN_LOW_FREQUENCE_STATISTICS:
return new PatternLowFrequencyStatisticsState(units);
case DATE_PATTERN_FREQUENCE_STATISTICS:
return new DatePatternFrequencyStatisticsState(units);
case PATTERN_MATCHING:
return new REGEXPatternStatisticsState(units);
case UDI_MATCHING:
return new UDIMatchStatisticsState(units);
case SQL_PATTERN_MATCHING:
return new SQLPatternStatisticsState(units);
case SUMMARY_STATISTICS:
return new SummaryStatisticsState(units);
case SOUNDEX_FREQUENCY_TABLE:
return new SoundexFrequencyTableState(units);
case SOUNDEX_LOW_FREQUENCY_TABLE:
return new SoundexLowFrequencyTableState(units);
case DATE_FREQUENCE_STATISTICS:
return new DateFrequencyStatisticsState(units,EIndicatorChartType.DATE_FREQUENCE_STATISTICS);
case WEEK_FREQUENCE_STATISTICS:
return new DateFrequencyStatisticsState(units,EIndicatorChartType.WEEK_FREQUENCE_STATISTICS);
case MONTH_FREQUENCE_STATISTICS:
return new DateFrequencyStatisticsState(units,EIndicatorChartType.MONTH_FREQUENCE_STATISTICS);
case QUARTER_FREQUENCE_STATISTICS:
return new DateFrequencyStatisticsState(units,EIndicatorChartType.QUARTER_FREQUENCE_STATISTICS);
case YEAR_FREQUENCE_STATISTICS:
return new DateFrequencyStatisticsState(units,EIndicatorChartType.YEAR_FREQUENCE_STATISTICS);
case DATE_LOW_FREQUENCE_STATISTICS:
return new DateLowFrequencyStatisticsState(units,EIndicatorChartType.DATE_LOW_FREQUENCE_STATISTICS);
case WEEK_LOW_FREQUENCE_STATISTICS:
return new DateLowFrequencyStatisticsState(units,EIndicatorChartType.WEEK_LOW_FREQUENCE_STATISTICS);
case MONTH_LOW_FREQUENCE_STATISTICS:
return new DateLowFrequencyStatisticsState(units,EIndicatorChartType.MONTH_LOW_FREQUENCE_STATISTICS);
case QUARTER_LOW_FREQUENCE_STATISTICS:
return new DateLowFrequencyStatisticsState(units,EIndicatorChartType.QUARTER_LOW_FREQUENCE_STATISTICS);
case YEAR_LOW_FREQUENCE_STATISTICS:
return new DateLowFrequencyStatisticsState(units,EIndicatorChartType.YEAR_LOW_FREQUENCE_STATISTICS);
case SIMPLE_TEXT_STATISTICS:
return new SimpleTextStatisticsState(units);
default :
return null;
}
}",0.7928221859706363
138733,"@Override protected String getTitle(){
  return DefaultMessagesImpl.getString(""String_Node_Str"");
}","@Override protected String getTitle(){
  return null == type ? DefaultMessagesImpl.getString(""String_Node_Str"") : type.getLiteral();
}",0.8497854077253219
138734,"/** 
 * DOC yyi DateFrequencyStatisticsState constructor comment.
 * @param units
 */
public DateFrequencyStatisticsState(List<IndicatorUnit> units){
  super(units);
}","public DateFrequencyStatisticsState(List<IndicatorUnit> units,EIndicatorChartType type){
  this(units);
  this.type=type;
}",0.5310344827586206
138735,"@Override protected String getTitle(){
  return DefaultMessagesImpl.getString(""String_Node_Str"");
}","@Override protected String getTitle(){
  return null == type ? DefaultMessagesImpl.getString(""String_Node_Str"") : type.getLiteral();
}",0.8497854077253219
138736,"/** 
 * DOC yyi DateLowFrequencyStatisticsState constructor comment.
 * @param units
 */
public DateLowFrequencyStatisticsState(List<IndicatorUnit> units){
  super(units);
}","public DateLowFrequencyStatisticsState(List<IndicatorUnit> units,EIndicatorChartType type){
  this(units);
  this.type=type;
}",0.5351170568561873
138737,"@Test public void deleteForeverElemensByTXT() throws Exception {
  List<String[]> delLs=LogicalDeleteFileHandle.getDelLs();
  for (int i=0; i < delLs.size(); i++) {
    String[] els=(String[])delLs.get(i);
    IPath path=new Path(els[1]);
    if (els[0].equals(""String_Node_Str"")) {
      IFile file=ResourceManager.getRoot().getFile(path);
      if (file.exists()) {
        file.delete(true,null);
        LogicalDeleteFileHandle.replaceInFile(LogicalDeleteFileHandle.fileType + file.getFullPath().toOSString(),PluginConstant.EMPTY_STRING);
        i--;
      }
    }
 else     if (els[0].equals(""String_Node_Str"")) {
      IFolder folder=ResourceManager.getRoot().getFolder(path);
      if (folder.exists()) {
        folder.delete(true,null);
        LogicalDeleteFileHandle.replaceInFile(LogicalDeleteFileHandle.folderType + folder.getFullPath().toOSString(),PluginConstant.EMPTY_STRING);
        i--;
      }
    }
  }
}","@Test public void deleteForeverElemensByTXT() throws Exception {
  List<String[]> delLs=new ArrayList<String[]>();
  for (int i=0; i < delLs.size(); i++) {
    String[] els=(String[])delLs.get(i);
    IPath path=new Path(els[1]);
    if (els[0].equals(""String_Node_Str"")) {
      IFile file=ResourceManager.getRoot().getFile(path);
      if (file.exists()) {
        file.delete(true,null);
        i--;
      }
    }
 else     if (els[0].equals(""String_Node_Str"")) {
      IFolder folder=ResourceManager.getRoot().getFolder(path);
      if (folder.exists()) {
        folder.delete(true,null);
        i--;
      }
    }
  }
}",0.7791371538956857
138738,"@Test public void testLogilcalDelElements() throws Exception {
  IFolder folder=ResourceManager.getAnalysisFolder();
  IResource res[]=folder.members();
  IDeletionHandle handle=null;
  for (  IResource re : res) {
    if (re instanceof IFile) {
      IFile file=(IFile)re;
      if (file.exists() && FactoriesUtil.isEmfFile(file.getFileExtension())) {
        Property property=PropertyHelper.getProperty(file);
        handle=ActionHandleFactory.createDeletionHandle(property);
        boolean runStatus=handle.delete();
        if (runStatus) {
          System.out.println(""String_Node_Str"" + file.getName() + ""String_Node_Str"");
        }
      }
    }
 else     if (re instanceof IFolder) {
      IFolder subfolder=(IFolder)re;
      List<IFile> filsLs=new ArrayList<IFile>();
      getAllSubFiles(subfolder,filsLs);
      boolean hasDelFailing=false;
      for (      IFile file : filsLs) {
        if (file.exists() && FactoriesUtil.isEmfFile(file.getFileExtension())) {
          Property property=PropertyHelper.getProperty(file);
          handle=ActionHandleFactory.createDeletionHandle(property);
          List<ModelElement> dependencies=handle.getDependencies();
          if (dependencies != null && !dependencies.isEmpty()) {
            hasDelFailing=true;
            break;
          }
          if (handle.delete()) {
            System.out.println(""String_Node_Str"" + file.getName() + ""String_Node_Str"");
          }
 else {
            hasDelFailing=true;
          }
        }
      }
      if (!hasDelFailing) {
        LogicalDeleteFileHandle.replaceInFile(LogicalDeleteFileHandle.folderType + subfolder.getFullPath().toOSString(),PluginConstant.EMPTY_STRING);
        LogicalDeleteFileHandle.saveElement(LogicalDeleteFileHandle.folderType,subfolder.getFullPath().toOSString());
        System.out.println(""String_Node_Str"" + subfolder.getName() + ""String_Node_Str"");
      }
    }
  }
}","@Test public void testLogilcalDelElements() throws Exception {
  IFolder folder=ResourceManager.getAnalysisFolder();
  IResource res[]=folder.members();
  IDeletionHandle handle=null;
  for (  IResource re : res) {
    if (re instanceof IFile) {
      IFile file=(IFile)re;
      if (file.exists() && FactoriesUtil.isEmfFile(file.getFileExtension())) {
        Property property=PropertyHelper.getProperty(file);
        handle=ActionHandleFactory.createDeletionHandle(property);
        boolean runStatus=handle.delete();
        if (runStatus) {
          System.out.println(""String_Node_Str"" + file.getName() + ""String_Node_Str"");
        }
      }
    }
 else     if (re instanceof IFolder) {
      IFolder subfolder=(IFolder)re;
      List<IFile> filsLs=new ArrayList<IFile>();
      getAllSubFiles(subfolder,filsLs);
      boolean hasDelFailing=false;
      for (      IFile file : filsLs) {
        if (file.exists() && FactoriesUtil.isEmfFile(file.getFileExtension())) {
          Property property=PropertyHelper.getProperty(file);
          handle=ActionHandleFactory.createDeletionHandle(property);
          List<ModelElement> dependencies=handle.getDependencies();
          if (dependencies != null && !dependencies.isEmpty()) {
            hasDelFailing=true;
            break;
          }
          if (handle.delete()) {
            System.out.println(""String_Node_Str"" + file.getName() + ""String_Node_Str"");
          }
 else {
            hasDelFailing=true;
          }
        }
      }
      if (!hasDelFailing) {
        System.out.println(""String_Node_Str"" + subfolder.getName() + ""String_Node_Str"");
      }
    }
  }
}",0.9246767847105116
138739,"@Test public void restoreAllByTXTFile() throws Exception {
  List<String[]> delLs=LogicalDeleteFileHandle.getDelLs();
  for (int i=0; i < delLs.size(); i++) {
    String[] els=(String[])delLs.get(i);
    IPath path=new Path(els[1]);
    if (els[0].equals(""String_Node_Str"")) {
      IFile file=ResourceManager.getRoot().getFile(path);
      if (file.exists()) {
        Property property=PropertyHelper.getProperty(file);
        property.getItem().getState().setDeleted(false);
        Resource propertyResource=property.eResource();
        if (!EMFSharedResources.getInstance().saveResource(propertyResource))         continue;
        LogicalDeleteFileHandle.replaceInFile(LogicalDeleteFileHandle.fileType + file.getFullPath().toOSString(),PluginConstant.EMPTY_STRING);
        i--;
      }
    }
 else     if (els[0].equals(""String_Node_Str"")) {
      IFolder folder=ResourceManager.getRoot().getFolder(path);
      if (folder.exists()) {
        LogicalDeleteFileHandle.replaceInFile(LogicalDeleteFileHandle.folderType + folder.getFullPath().toOSString(),PluginConstant.EMPTY_STRING);
        i--;
      }
    }
  }
}","@Test public void restoreAllByTXTFile() throws Exception {
  List<String[]> delLs=new ArrayList();
  for (int i=0; i < delLs.size(); i++) {
    String[] els=(String[])delLs.get(i);
    IPath path=new Path(els[1]);
    if (els[0].equals(""String_Node_Str"")) {
      IFile file=ResourceManager.getRoot().getFile(path);
      if (file.exists()) {
        Property property=PropertyHelper.getProperty(file);
        property.getItem().getState().setDeleted(false);
        Resource propertyResource=property.eResource();
        if (!EMFSharedResources.getInstance().saveResource(propertyResource))         continue;
        i--;
      }
    }
 else     if (els[0].equals(""String_Node_Str"")) {
      IFolder folder=ResourceManager.getRoot().getFolder(path);
      if (folder.exists()) {
        i--;
      }
    }
  }
}",0.8280846670108415
138740,"public String getPersent(){
  if (percent != null) {
    if (percent != Double.NaN) {
      return StringFormatUtil.format(percent,StringFormatUtil.PERCENT).toString();
    }
 else {
      return ""String_Node_Str"";
    }
  }
 else {
    return null;
  }
}","public String getPersent(){
  if (percent != null) {
    if (Double.isNaN(percent)) {
      return ""String_Node_Str"";
    }
 else {
      return StringFormatUtil.format(percent,StringFormatUtil.PERCENT).toString();
    }
  }
 else {
    return null;
  }
}",0.6470588235294118
138741,"public ICustomerDataset getCustomerDataset(){
  CustomerDefaultCategoryDataset customerdataset=new CustomerDefaultCategoryDataset();
  for (  IndicatorUnit unit : units) {
    if (unit.isExcuted()) {
      FrequencyExt[] frequencyExt=(FrequencyExt[])unit.getValue();
      sortIndicator(frequencyExt);
      int numOfShown=frequencyExt.length;
      IndicatorParameters parameters=unit.getIndicator().getParameters();
      if (parameters != null) {
        if (parameters.getTopN() < frequencyExt.length) {
          numOfShown=parameters.getTopN();
        }
      }
      for (int i=0; i < numOfShown; i++) {
        FrequencyExt freqExt=frequencyExt[i];
        String keyLabel=String.valueOf(freqExt.getKey());
        if (""String_Node_Str"".equals(keyLabel)) {
          keyLabel=SpecialValueDisplay.NULL_FIELD;
        }
        if (""String_Node_Str"".equals(keyLabel)) {
          keyLabel=SpecialValueDisplay.EMPTY_FIELD;
        }
        customerdataset.addValue(freqExt.getValue(),""String_Node_Str"",keyLabel);
        ChartDataEntity entity=new ChartDataEntity();
        entity.setIndicator(unit.getIndicator());
        entity.setKey(freqExt.getKey());
        entity.setLabelNull(freqExt.getKey() == null);
        entity.setLabel(keyLabel);
        entity.setValue(String.valueOf(freqExt.getValue()));
        entity.setPercent(freqExt.getFrequency());
        customerdataset.addDataEntity(entity);
      }
    }
  }
  return customerdataset;
}","public ICustomerDataset getCustomerDataset(){
  CustomerDefaultCategoryDataset customerdataset=new CustomerDefaultCategoryDataset();
  for (  IndicatorUnit unit : units) {
    if (unit.isExcuted()) {
      FrequencyExt[] frequencyExt=(FrequencyExt[])unit.getValue();
      sortIndicator(frequencyExt);
      int numOfShown=frequencyExt.length;
      IndicatorParameters parameters=unit.getIndicator().getParameters();
      if (parameters != null) {
        if (parameters.getTopN() < frequencyExt.length) {
          numOfShown=parameters.getTopN();
        }
      }
      for (int i=0; i < numOfShown; i++) {
        FrequencyExt freqExt=frequencyExt[i];
        String keyLabel=String.valueOf(freqExt.getKey());
        if (""String_Node_Str"".equals(keyLabel)) {
          keyLabel=SpecialValueDisplay.NULL_FIELD;
        }
        if (""String_Node_Str"".equals(keyLabel)) {
          keyLabel=SpecialValueDisplay.EMPTY_FIELD;
        }
        customerdataset.addValue(freqExt.getValue(),""String_Node_Str"",keyLabel);
        ChartDataEntity entity=new ChartDataEntity();
        entity.setIndicator(unit.getIndicator());
        entity.setKey(freqExt.getKey());
        entity.setLabelNull(freqExt.getKey() == null);
        entity.setLabel(keyLabel);
        entity.setValue(String.valueOf(freqExt.getValue()));
        Double percent=isWithRowCountIndicator() ? freqExt.getFrequency() : Double.NaN;
        entity.setPercent(percent);
        customerdataset.addDataEntity(entity);
      }
    }
  }
  return customerdataset;
}",0.9608826479438316
138742,"@Override public void run(){
  SelectedResources selectedResources=new SelectedResources();
  Property[] selectedProps=selectedResources.getSelectedArrayForDelForever();
  try {
    for (    Property property : selectedProps) {
      Item item=property.getItem();
      if (item instanceof ConnectionItem) {
        IRepositoryViewObject repViewObj=ProxyRepositoryViewObject.getRepositoryViewObjectByProperty(property);
        Property propertyTMP=repViewObj.getProperty();
        propertyTMP.getItem().getState().setDeleted(false);
        ProxyRepositoryFactory.getInstance().save(propertyTMP);
        EMFSharedResources.getInstance().unloadResource(property.eResource().getURI().toString());
      }
 else {
        property.getItem().getState().setDeleted(false);
        Resource propertyResource=property.eResource();
        if (!EMFSharedResources.getInstance().saveResource(propertyResource))         return;
      }
      LogicalDeleteFileHandle.refreshDelPropertys(0,property);
      if (property.getItem() instanceof ConnectionItem) {
        SQLExplorerPlugin.getDefault().getAliasManager().modelChanged();
      }
    }
  }
 catch (  Exception exc) {
    log.error(exc,exc);
  }
  ProxyRepositoryManager.getInstance().save();
  CorePlugin.getDefault().refreshDQView();
  CorePlugin.getDefault().refreshWorkSpace();
}","@Override public void run(){
  SelectedResources selectedResources=new SelectedResources();
  Property[] selectedProps=selectedResources.getSelectedArrayForDelForever();
  try {
    for (    Property property : selectedProps) {
      Item item=property.getItem();
      if (item instanceof ConnectionItem) {
        IRepositoryViewObject repViewObj=ProxyRepositoryViewObject.getRepositoryViewObjectByProperty(property);
        Property propertyTMP=repViewObj.getProperty();
        propertyTMP.getItem().getState().setDeleted(false);
        ProxyRepositoryFactory.getInstance().save(propertyTMP);
      }
 else {
        property.getItem().getState().setDeleted(false);
        Resource propertyResource=property.eResource();
        if (!EMFSharedResources.getInstance().saveResource(propertyResource))         return;
      }
      LogicalDeleteFileHandle.refreshDelPropertys(0,property);
      if (property.getItem() instanceof ConnectionItem) {
        SQLExplorerPlugin.getDefault().getAliasManager().modelChanged();
      }
    }
  }
 catch (  Exception exc) {
    log.error(exc,exc);
  }
  ProxyRepositoryManager.getInstance().save();
  CorePlugin.getDefault().refreshDQView();
  CorePlugin.getDefault().refreshWorkSpace();
}",0.9614335800545384
138743,"/** 
 * DOC bZhou RepositoryViewObjectHandle constructor comment.
 * @param property
 */
RepositoryViewObjectHandle(Property property){
  this.property=property;
  repositoryObject=ProxyRepositoryViewObject.getRepositoryViewObjectByProperty(property);
}","/** 
 * DOC bZhou RepositoryViewObjectHandle constructor comment.
 * @param property
 */
RepositoryViewObjectHandle(Property property){
  if (property.eIsProxy()) {
    property=(Property)EObjectHelper.resolveObject(property);
  }
  this.property=property;
  repositoryObject=ProxyRepositoryViewObject.getRepositoryViewObjectByProperty(property);
}",0.8419301164725458
138744,"public boolean delete() throws Exception {
  String pathStr=property.eResource().getURI().toPlatformString(false);
  IFile file=ResourceManager.getRoot().getFile(new Path(pathStr));
  if (isPhysicalDelete()) {
    ProxyRepositoryFactory.getInstance().deleteObjectPhysical(repositoryObject);
    LogicalDeleteFileHandle.refreshDelPropertys(0,property);
    EMFSharedResources.getInstance().unloadResource(property.eResource().getURI().toString());
  }
 else {
    ProxyRepositoryFactory.getInstance().deleteObjectLogical(repositoryObject);
    LogicalDeleteFileHandle.deleteLogical(file);
  }
  return true;
}","public boolean delete() throws Exception {
  if (property.eIsProxy()) {
    LogicalDeleteFileHandle.refreshDelPropertys(0,property);
    property=(Property)EObjectHelper.resolveObject(property);
  }
  String pathStr=property.eResource().getURI().toPlatformString(false);
  IFile file=ResourceManager.getRoot().getFile(new Path(pathStr));
  if (isPhysicalDelete()) {
    ProxyRepositoryFactory.getInstance().deleteObjectPhysical(repositoryObject);
    LogicalDeleteFileHandle.refreshDelPropertys(0,property);
  }
 else {
    ProxyRepositoryFactory.getInstance().deleteObjectLogical(repositoryObject);
    LogicalDeleteFileHandle.deleteLogical(file);
  }
  return true;
}",0.5638214565387627
138745,"public void migration(IProgressMonitor monitor){
  List<IMigrationTask> modelTasks=new ArrayList<IMigrationTask>();
  if (versionFile != null && versionFile.exists()) {
    ProductVersion version=WorkspaceVersionHelper.getVesion(new Path(versionFile.getAbsolutePath()));
    List<IMigrationTask> taskList=MigrationTaskManager.findWorkspaceTaskByType(MigrationTaskType.FILE,version);
    if (!taskList.isEmpty()) {
      for (      IMigrationTask task : taskList) {
        if (isModelTask(task)) {
          ((AbstractWorksapceUpdateTask)task).setWorkspacePath(basePath);
          modelTasks.add(task);
        }
 else {
          commTasks.add(task);
        }
      }
    }
  }
  if (!modelTasks.isEmpty()) {
    MigrationTaskManager.doMigrationTask(modelTasks,monitor);
  }
}","public void migration(IProgressMonitor monitor){
  List<IMigrationTask> modelTasks=new ArrayList<IMigrationTask>();
  if (versionFile != null && versionFile.exists()) {
    ProductVersion version=WorkspaceVersionHelper.getVesion(new Path(versionFile.getAbsolutePath()));
    List<IMigrationTask> taskList=MigrationTaskManager.findWorkspaceTaskByType(MigrationTaskType.FILE,version);
    if (!taskList.isEmpty()) {
      for (      IMigrationTask task : taskList) {
        if (task.isModelTask()) {
          ((AbstractWorksapceUpdateTask)task).setWorkspacePath(basePath);
          modelTasks.add(task);
        }
 else {
          commTasks.add(task);
        }
      }
    }
  }
  if (!modelTasks.isEmpty()) {
    MigrationTaskManager.doMigrationTask(modelTasks,monitor);
  }
}",0.9788325849903784
138746,"@SuppressWarnings(""String_Node_Str"") public Object[] getChildren(Object parentElement){
  if (parentElement instanceof IContainer) {
    IContainer container=(IContainer)parentElement;
    IResource[] members=null;
    try {
      members=container.members();
    }
 catch (    CoreException e) {
      log.error(""String_Node_Str"" + container.getLocation());
    }
    if (ResourceManager.getConnectionFolder().equals(container)) {
      return ProxyRepositoryViewObject.fetchAllDBRepositoryViewObjects(false).toArray();
    }
 else     if (ResourceManager.getMDMConnectionFolder().equals(container)) {
      return ProxyRepositoryViewObject.fetchAllMDMRepositoryViewObjects(false).toArray();
    }
    return members;
  }
 else   if (parentElement instanceof NamedColumnSet) {
    return null;
  }
 else   if (parentElement instanceof NamedColumnSetFolderNode) {
    NamedColumnSetFolderNode folerNode=(NamedColumnSetFolderNode)parentElement;
    folerNode.loadChildren();
    Object[] children=folerNode.getChildren();
    if (children != null && children.length > 0) {
      if (!(children[0] instanceof ColumnSet)) {
        return children;
      }
      for (int i=0; i < children.length; i++) {
        ColumnSet columnSet=(ColumnSet)children[i];
        ModelElementKey key=new ModelElementKeyImpl(columnSet);
        if (modelElementCheckedMap.containsKey(key)) {
          currentCheckedModelElement.add(columnSet);
        }
      }
    }
    return ComparatorsFactory.sort(children,ComparatorsFactory.MODELELEMENT_COMPARATOR_ID);
  }
 else   if (parentElement instanceof TdXmlSchema || parentElement instanceof TdXmlElementType) {
    boolean isXmlDocument=parentElement instanceof TdXmlSchema;
    List<? extends ModelElement> modelElements=isXmlDocument ? DqRepositoryViewService.getXMLElements((TdXmlSchema)parentElement) : DqRepositoryViewService.getXMLElements((TdXmlElementType)parentElement);
    Object[] children=XmlElementHelper.clearLeafNode(modelElements).toArray();
    if (children != null && children.length > 0) {
      if (!(children[0] instanceof TdXmlElementType)) {
        return children;
      }
      for (int i=0; i < children.length; i++) {
        TdXmlElementType xmlElement=(TdXmlElementType)children[i];
        ModelElementKey key=new ModelElementKeyImpl(xmlElement);
        if (modelElementCheckedMap.containsKey(key)) {
          currentCheckedModelElement.add(xmlElement);
        }
      }
    }
    return children.length == 0 ? null : children;
  }
  return super.getChildren(parentElement);
}","@SuppressWarnings(""String_Node_Str"") public Object[] getChildren(Object parentElement){
  if (parentElement instanceof IContainer) {
    IContainer container=(IContainer)parentElement;
    IResource[] members=null;
    try {
      members=container.members();
    }
 catch (    CoreException e) {
      log.error(""String_Node_Str"" + container.getLocation());
    }
    if (ResourceManager.getConnectionFolder().equals(container)) {
      return ProxyRepositoryViewObject.fetchAllDBRepositoryViewObjects(true).toArray();
    }
 else     if (ResourceManager.getMDMConnectionFolder().equals(container)) {
      return ProxyRepositoryViewObject.fetchAllMDMRepositoryViewObjects(true).toArray();
    }
    return members;
  }
 else   if (parentElement instanceof NamedColumnSet) {
    return null;
  }
 else   if (parentElement instanceof NamedColumnSetFolderNode) {
    NamedColumnSetFolderNode folerNode=(NamedColumnSetFolderNode)parentElement;
    folerNode.loadChildren();
    Object[] children=folerNode.getChildren();
    if (children != null && children.length > 0) {
      if (!(children[0] instanceof ColumnSet)) {
        return children;
      }
      for (int i=0; i < children.length; i++) {
        ColumnSet columnSet=(ColumnSet)children[i];
        ModelElementKey key=new ModelElementKeyImpl(columnSet);
        if (modelElementCheckedMap.containsKey(key)) {
          currentCheckedModelElement.add(columnSet);
        }
      }
    }
    return ComparatorsFactory.sort(children,ComparatorsFactory.MODELELEMENT_COMPARATOR_ID);
  }
 else   if (parentElement instanceof TdXmlSchema || parentElement instanceof TdXmlElementType) {
    boolean isXmlDocument=parentElement instanceof TdXmlSchema;
    List<? extends ModelElement> modelElements=isXmlDocument ? DqRepositoryViewService.getXMLElements((TdXmlSchema)parentElement) : DqRepositoryViewService.getXMLElements((TdXmlElementType)parentElement);
    Object[] children=XmlElementHelper.clearLeafNode(modelElements).toArray();
    if (children != null && children.length > 0) {
      if (!(children[0] instanceof TdXmlElementType)) {
        return children;
      }
      for (int i=0; i < children.length; i++) {
        TdXmlElementType xmlElement=(TdXmlElementType)children[i];
        ModelElementKey key=new ModelElementKeyImpl(xmlElement);
        if (modelElementCheckedMap.containsKey(key)) {
          currentCheckedModelElement.add(xmlElement);
        }
      }
    }
    return children.length == 0 ? null : children;
  }
  return super.getChildren(parentElement);
}",0.9972462627852084
138747,"protected void reloadDataproviderAndFillConnCombo(){
  Collection<Connection> connections=ProxyRepositoryViewObject.getAllMetadataConnections(true);
  int index=0;
  connCombo.removeAll();
  for (  Connection prov : connections) {
    connCombo.add(prov.getName(),index);
    connCombo.setData(prov.getName(),index);
    connCombo.setData(index + ""String_Node_Str"",prov);
    index++;
  }
  if (index > 0) {
    connCombo.select(0);
  }
}","protected void reloadDataproviderAndFillConnCombo(){
  Collection<Connection> connections=ProxyRepositoryViewObject.getAllMetadataConnections(true);
  int index=0;
  connCombo.removeAll();
  for (  Connection prov : connections) {
    if (prov.eResource() == null) {
      prov=(Connection)EObjectHelper.resolveObject(prov);
    }
    connCombo.add(prov.getName(),index);
    connCombo.setData(prov.getName(),index);
    connCombo.setData(index + ""String_Node_Str"",prov);
    index++;
  }
  if (index > 0) {
    connCombo.select(0);
  }
}",0.8975409836065574
138748,"@SuppressWarnings(""String_Node_Str"") public Object[] getChildren(Object parentElement){
  if (parentElement instanceof IContainer) {
    IContainer container=((IContainer)parentElement);
    IResource[] members=null;
    try {
      members=container.members();
    }
 catch (    CoreException e) {
      log.error(DefaultMessagesImpl.getString(""String_Node_Str"") + container.getLocation());
    }
    if (container.equals(ResourceManager.getConnectionFolder())) {
      ComparatorsFactory.sort(members,ComparatorsFactory.FILEMODEL_COMPARATOR_ID);
    }
    if (ResourceManager.getConnectionFolder().equals(container)) {
      return ProxyRepositoryViewObject.fetchAllDBRepositoryViewObjects(false).toArray();
    }
 else     if (ResourceManager.getMDMConnectionFolder().equals(container)) {
      return ProxyRepositoryViewObject.fetchAllMDMRepositoryViewObjects(false).toArray();
    }
    return members;
  }
 else   if (parentElement instanceof Schema) {
    return null;
  }
 else   if (parentElement instanceof Catalog) {
    Catalog catalog=(Catalog)parentElement;
    EList<ModelElement> eList=catalog.getOwnedElement();
    if (!(eList.size() > 0 && eList.get(0) instanceof Schema)) {
      return null;
    }
  }
  return super.getChildren(parentElement);
}","@SuppressWarnings(""String_Node_Str"") public Object[] getChildren(Object parentElement){
  if (parentElement instanceof IContainer) {
    IContainer container=((IContainer)parentElement);
    IResource[] members=null;
    try {
      members=container.members();
    }
 catch (    CoreException e) {
      log.error(DefaultMessagesImpl.getString(""String_Node_Str"") + container.getLocation());
    }
    if (container.equals(ResourceManager.getConnectionFolder())) {
      ComparatorsFactory.sort(members,ComparatorsFactory.FILEMODEL_COMPARATOR_ID);
    }
    if (ResourceManager.getConnectionFolder().equals(container)) {
      return ProxyRepositoryViewObject.fetchAllDBRepositoryViewObjects(true).toArray();
    }
 else     if (ResourceManager.getMDMConnectionFolder().equals(container)) {
      return ProxyRepositoryViewObject.fetchAllMDMRepositoryViewObjects(true).toArray();
    }
    return members;
  }
 else   if (parentElement instanceof Schema) {
    return null;
  }
 else   if (parentElement instanceof Catalog) {
    Catalog catalog=(Catalog)parentElement;
    EList<ModelElement> eList=catalog.getOwnedElement();
    if (!(eList.size() > 0 && eList.get(0) instanceof Schema)) {
      return null;
    }
  }
  return super.getChildren(parentElement);
}",0.9944707740916272
138749,"private ModelElement findMatchedModelElement(EObject parent,EObject similarElement){
  if (parent instanceof Connection) {
    if (similarElement instanceof Schema) {
      if (selectedOjbect instanceof Catalog) {
        List<Schema> schemas=CatalogHelper.getSchemas((Catalog)selectedOjbect);
        if (schemas != null && schemas.size() > 0) {
          for (          Schema tdSchema : schemas) {
            if (tdSchema.getName().equalsIgnoreCase(((Schema)similarElement).getName())) {
              return tdSchema;
            }
          }
        }
      }
      List<Schema> schames=ConnectionHelper.getSchema((Connection)parent);
      for (      Schema schame : schames) {
        if (schame.getName().equalsIgnoreCase(((Schema)similarElement).getName())) {
          return schame;
        }
      }
    }
    if (similarElement instanceof Catalog) {
      List<Catalog> catalogs=ConnectionHelper.getCatalogs((Connection)parent);
      for (      Catalog catalog : catalogs) {
        if (catalog.getName().equalsIgnoreCase(((Catalog)similarElement).getName())) {
          return catalog;
        }
      }
    }
  }
 else   if (parent instanceof Package) {
    List<ColumnSet> columnSets=new ArrayList<ColumnSet>();
    columnSets.addAll(PackageHelper.getTables((Package)parent));
    columnSets.addAll(PackageHelper.getViews((Package)parent));
    for (    ModelElement columnSet : columnSets) {
      if (((ColumnSet)columnSet).getName().equalsIgnoreCase(((ColumnSet)similarElement).getName())) {
        return columnSet;
      }
    }
  }
  return null;
}","private ModelElement findMatchedModelElement(EObject parent,EObject similarElement){
  if (parent instanceof Connection) {
    if (similarElement instanceof Schema) {
      if (selectedOjbect instanceof Catalog) {
        List<Schema> schemas=CatalogHelper.getSchemas((Catalog)selectedOjbect);
        if (schemas != null && schemas.size() > 0) {
          for (          Schema tdSchema : schemas) {
            if (tdSchema.getName().equalsIgnoreCase(((Schema)similarElement).getName())) {
              return tdSchema;
            }
          }
        }
      }
      List<Schema> schames=ConnectionHelper.getSchema((Connection)parent);
      for (      Schema schame : schames) {
        if (schame.getName().equalsIgnoreCase(((Schema)similarElement).getName())) {
          return schame;
        }
      }
    }
    if (similarElement instanceof Catalog) {
      List<Catalog> catalogs=ConnectionHelper.getCatalogs((Connection)parent);
      for (      Catalog catalog : catalogs) {
        if (catalog.getName().equalsIgnoreCase(((Catalog)similarElement).getName())) {
          return catalog;
        }
      }
    }
  }
 else   if (parent instanceof Package) {
    if (parent != null && parent.eIsProxy()) {
      parent=EObjectHelper.resolveObject(parent);
    }
    List<ColumnSet> columnSets=new ArrayList<ColumnSet>();
    columnSets.addAll(PackageHelper.getTables((Package)parent));
    columnSets.addAll(PackageHelper.getViews((Package)parent));
    for (    ModelElement columnSet : columnSets) {
      if (((ColumnSet)columnSet).getName().equalsIgnoreCase(((ColumnSet)similarElement).getName())) {
        return columnSet;
      }
    }
  }
  return null;
}",0.9683369197663696
138750,"/** 
 * DOC scorreia Comment method ""getConnection"".
 * @param analysis
 * @param schema
 * @return
 */
protected TypedReturnCode<java.sql.Connection> getConnection(Analysis analysis){
  TypedReturnCode<java.sql.Connection> rc=new TypedReturnCode<java.sql.Connection>();
  DataManager datamanager=analysis.getContext().getConnection();
  if (datamanager == null) {
    rc.setReturnCode(Messages.getString(""String_Node_Str"",analysis.getName()),false);
    return rc;
  }
  Connection dataprovider=SwitchHelpers.CONNECTION_SWITCH.doSwitch(datamanager);
  if (dataprovider == null) {
    rc.setReturnCode(Messages.getString(""String_Node_Str"",datamanager.getName(),analysis.getName()),false);
    return rc;
  }
  TypedReturnCode<java.sql.Connection> connection=JavaSqlFactory.createConnection(dataprovider);
  if (!connection.isOk()) {
    rc.setReturnCode(connection.getMessage(),false);
    return rc;
  }
  rc.setObject(connection.getObject());
  return rc;
}","/** 
 * DOC scorreia Comment method ""getConnection"".
 * @param analysis
 * @param schema
 * @return
 */
protected TypedReturnCode<java.sql.Connection> getConnection(Analysis analysis){
  TypedReturnCode<java.sql.Connection> rc=new TypedReturnCode<java.sql.Connection>();
  DataManager datamanager=analysis.getContext().getConnection();
  if (datamanager == null) {
    rc.setReturnCode(Messages.getString(""String_Node_Str"",analysis.getName()),false);
    return rc;
  }
  if (datamanager != null && datamanager.eIsProxy()) {
    datamanager=(DataManager)EObjectHelper.resolveObject(datamanager);
  }
  Connection dataprovider=SwitchHelpers.CONNECTION_SWITCH.doSwitch(datamanager);
  if (dataprovider == null) {
    rc.setReturnCode(Messages.getString(""String_Node_Str"",datamanager.getName(),analysis.getName()),false);
    return rc;
  }
  TypedReturnCode<java.sql.Connection> connection=JavaSqlFactory.createConnection(dataprovider);
  if (!connection.isOk()) {
    rc.setReturnCode(connection.getMessage(),false);
    return rc;
  }
  rc.setObject(connection.getObject());
  return rc;
}",0.9365234375
138751,"/** 
 * Method ""getQuotedTableName"".
 * @param column
 * @return the quoted table name
 */
protected String getQuotedTableName(TdColumn column){
  String table=quote(ColumnHelper.getColumnSetFullName(column));
  return table;
}","/** 
 * Method ""getQuotedTableName"".
 * @param column
 * @return the quoted table name
 */
protected String getQuotedTableName(TdColumn column){
  if (column != null && column.eIsProxy()) {
    column=(TdColumn)EObjectHelper.resolveObject(column);
  }
  String table=quote(ColumnHelper.getColumnSetFullName(column));
  return table;
}",0.8092691622103387
138752,"/** 
 * Method ""createSqlQuery"".
 * @param dataFilterExpression
 * @param analysis
 * @param indicator
 * @throws ParseException
 * @throws AnalysisExecutionException
 */
private boolean createSqlQuery(String dataFilterAsString,Indicator indicator) throws ParseException, AnalysisExecutionException {
  ModelElement analyzedElement=indicator.getAnalyzedElement();
  if (analyzedElement == null) {
    return traceError(""String_Node_Str"" + indicator.getName());
  }
  TdColumn tdColumn=SwitchHelpers.COLUMN_SWITCH.doSwitch(indicator.getAnalyzedElement());
  if (tdColumn == null) {
    return traceError(""String_Node_Str"" + indicator.getName());
  }
  String colName=getQuotedColumnName(tdColumn);
  if (!belongToSameSchemata(tdColumn)) {
    StringBuffer buf=new StringBuffer();
    for (    orgomg.cwm.objectmodel.core.Package schema : schemata.values()) {
      buf.append(schema.getName() + ""String_Node_Str"");
    }
    log.error(""String_Node_Str"" + colName + ""String_Node_Str""+ buf.toString().trim()+ ""String_Node_Str"");
    return false;
  }
  colName=castColumn(indicator,tdColumn,colName);
  String language=dbms().getDbmsName();
  Expression sqlGenericExpression=null;
  IndicatorDefinition indicatorDefinition;
  String label=indicator.getIndicatorDefinition().getLabel();
  if (label == null || ""String_Node_Str"".equals(label)) {
    indicatorDefinition=indicator.getIndicatorDefinition();
  }
 else {
    indicatorDefinition=DefinitionHandler.getInstance().getIndicatorDefinition(label);
  }
  if (indicatorDefinition == null) {
    return traceError(""String_Node_Str"" + indicator.getName() + ""String_Node_Str"");
  }
  sqlGenericExpression=dbms().getSqlExpression(indicatorDefinition);
  final EClass indicatorEclass=indicator.eClass();
  if (sqlGenericExpression == null || sqlGenericExpression.getBody() == null) {
    if (IndicatorsPackage.eINSTANCE.getRegexpMatchingIndicator().equals(indicatorEclass)) {
      return traceError(""String_Node_Str"" + language + ""String_Node_Str"");
    }
    return traceError(""String_Node_Str"" + (indicator.getName() != null ? indicator.getName() : indicatorEclass.getName()) + ""String_Node_Str""+ ResourceHelper.getUUID(indicatorDefinition)+ ""String_Node_Str"");
  }
  List<String> whereExpression=new ArrayList<String>();
  if (StringUtils.isNotBlank(dataFilterAsString)) {
    whereExpression.add(dataFilterAsString);
  }
  List<String> rangeStrings=null;
  DateGrain dateAggregationType=null;
  IndicatorParameters parameters=indicator.getParameters();
  if (parameters != null) {
    Domain bins=parameters.getBins();
    if (bins != null) {
      rangeStrings=getBinsAsGenericString(bins.getRanges(),colName);
    }
    DateParameters dateParameters=parameters.getDateParameters();
    if (dateParameters != null) {
      dateAggregationType=dateParameters.getDateAggregationType();
    }
    TextParameters textParameter=parameters.getTextParameter();
    if (textParameter != null) {
      if (textParameter.isUseNulls()) {
        colName=dbms().replaceNullsWithString(colName,""String_Node_Str"");
      }
 else {
        whereExpression.add(colName.concat(dbms().isNotNull()));
      }
      if (textParameter.isIgnoreCase()) {
        colName=dbms().toUpperCase(colName);
      }
      if (!textParameter.isUseBlank() && IndicatorsPackage.eINSTANCE.getLengthIndicator().isSuperTypeOf(indicatorEclass)) {
        String tdColName=getQuotedColumnName(tdColumn);
        tdColName=dbms().replaceNullsWithString(tdColName,""String_Node_Str"");
        whereExpression.add(dbms().isNotBlank(tdColName));
      }
 else       if (textParameter.isUseBlank() && IndicatorsPackage.eINSTANCE.getFrequencyIndicator().isSuperTypeOf(indicatorEclass)) {
        colName=dbms().trim(colName);
      }
    }
  }
  final ColumnSet columnSetOwner=ColumnHelper.getColumnSetOwner(tdColumn);
  String schemaName=getQuotedSchemaName(columnSetOwner);
  String table=getQuotedTableName(tdColumn);
  String catalogName=getQuotedCatalogName(columnSetOwner);
  if (catalogName == null && schemaName != null) {
    final Schema parentSchema=SchemaHelper.getParentSchema(columnSetOwner);
    final Catalog parentCatalog=CatalogHelper.getParentCatalog(parentSchema);
    catalogName=parentCatalog != null ? parentCatalog.getName() : null;
  }
  boolean isSybase=false;
  if (Arrays.asList(ConnectionUtils.getSybaseDBProductsName()).contains(dbms().getDbmsName())) {
    isSybase=true;
  }
  if (isSybase) {
    schemaName=ColumnSetHelper.getTableOwner(columnSetOwner);
  }
  table=dbms().toQualifiedName(catalogName,schemaName,table);
  String completedSqlString=null;
  if (indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getMedianIndicator()) || indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getLowerQuartileIndicator()) || indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getUpperQuartileIndicator())) {
    completedSqlString=getCompletedStringForQuantiles(indicator,sqlGenericExpression,colName,table,whereExpression);
    if (completedSqlString != null) {
      whereExpression=duplicateForCrossJoin(completedSqlString,whereExpression,tdColumn);
      completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
    }
  }
 else   if (indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getFrequencyIndicator()) || IndicatorsPackage.eINSTANCE.getFrequencyIndicator().isSuperTypeOf(indicatorEclass) || indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getModeIndicator())|| UDIHelper.isFrequency(indicator)) {
    int topN=indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getModeIndicator()) ? 1 : getTopN(indicator);
    if (topN <= 0) {
      topN=TOP_N;
    }
    if (rangeStrings != null) {
      completedSqlString=getUnionCompletedString(indicator,sqlGenericExpression,colName,table,whereExpression,rangeStrings);
      if (indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getModeIndicator())) {
        completedSqlString=dbms().getTopNQuery(completedSqlString,topN);
      }
    }
 else     if (dateAggregationType != null && !dateAggregationType.equals(DateGrain.NONE) && Java2SqlType.isDateInSQL(tdColumn.getJavaType())) {
      completedSqlString=getDateAggregatedCompletedStringWithoutAlia(sqlGenericExpression,colName,table,dateAggregationType);
      completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
      completedSqlString=dbms().getTopNQuery(completedSqlString,topN);
    }
 else {
      if (indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getPatternFreqIndicator()) || indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getPatternLowFreqIndicator())) {
        if (Java2SqlType.isNumbericInSQL(tdColumn.getJavaType()) || Java2SqlType.isDateInSQL(tdColumn.getJavaType())) {
          colName=addFunctionTypeConvert(colName);
        }
        final EList<CharactersMapping> charactersMapping=indicatorDefinition.getCharactersMapping();
        colName=dbms().getPatternFinderFunction(colName,charactersMapping);
        if (colName == null) {
          colName=dbms().getPatternFinderDefaultFunction(colName);
        }
        if (colName == null) {
          return traceError(""String_Node_Str"" + language + ""String_Node_Str""+ indicator.getName());
        }
      }
 else       if (indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getSoundexFreqIndicator()) || indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getSoundexLowFreqIndicator())) {
        table=dbms().getSoundexFunction(table,colName);
      }
      completedSqlString=dbms().fillGenericQueryWithColumnTableAndAlias(sqlGenericExpression.getBody(),colName,table,colName);
      completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
      completedSqlString=dbms().getTopNQuery(completedSqlString,topN);
    }
  }
 else   if (IndicatorsPackage.eINSTANCE.getPatternMatchingIndicator().isSuperTypeOf(indicatorEclass)) {
    List<String> patterns=getPatterns(indicator);
    if (patterns.isEmpty()) {
      return traceError(""String_Node_Str"" + language + ""String_Node_Str""+ indicator.getName());
    }
    completedSqlString=replaceVariables(sqlGenericExpression.getBody(),colName,table,patterns);
    completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
  }
 else {
    if (IndicatorsPackage.eINSTANCE.getDefValueCountIndicator().equals(indicatorEclass)) {
      String defValue=ColumnHelper.getDefaultValue(tdColumn);
      if (defValue == null) {
        return traceError(""String_Node_Str"" + colName + ""String_Node_Str""+ indicator.getName()+ ""String_Node_Str"");
      }
      int javaType=tdColumn.getJavaType();
      if (!Java2SqlType.isNumbericInSQL(javaType) && !isFunction(defValue,table)) {
        defValue=""String_Node_Str"" + defValue + ""String_Node_Str"";
      }
      whereExpression.add(colName + dbms().equal() + defValue);
    }
    completedSqlString=dbms().fillGenericQueryWithColumnsAndTable(sqlGenericExpression.getBody(),colName,table);
    completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
  }
  String finalQuery=completedSqlString;
  if (finalQuery != null) {
    TdExpression instantiateSqlExpression=BooleanExpressionHelper.createTdExpression(language,finalQuery);
    indicator.setInstantiatedExpression(instantiateSqlExpression);
    return true;
  }
  return false;
}","/** 
 * Method ""createSqlQuery"".
 * @param dataFilterExpression
 * @param analysis
 * @param indicator
 * @throws ParseException
 * @throws AnalysisExecutionException
 */
private boolean createSqlQuery(String dataFilterAsString,Indicator indicator) throws ParseException, AnalysisExecutionException {
  ModelElement analyzedElement=indicator.getAnalyzedElement();
  if (analyzedElement == null) {
    return traceError(""String_Node_Str"" + indicator.getName());
  }
  TdColumn tdColumn=SwitchHelpers.COLUMN_SWITCH.doSwitch(indicator.getAnalyzedElement());
  if (tdColumn == null) {
    return traceError(""String_Node_Str"" + indicator.getName());
  }
  if (tdColumn.eIsProxy()) {
    tdColumn=(TdColumn)EObjectHelper.resolveObject(tdColumn);
  }
  String colName=getQuotedColumnName(tdColumn);
  if (!belongToSameSchemata(tdColumn)) {
    StringBuffer buf=new StringBuffer();
    for (    orgomg.cwm.objectmodel.core.Package schema : schemata.values()) {
      buf.append(schema.getName() + ""String_Node_Str"");
    }
    log.error(""String_Node_Str"" + colName + ""String_Node_Str""+ buf.toString().trim()+ ""String_Node_Str"");
    return false;
  }
  colName=castColumn(indicator,tdColumn,colName);
  String language=dbms().getDbmsName();
  Expression sqlGenericExpression=null;
  IndicatorDefinition indicatorDefinition;
  String label=indicator.getIndicatorDefinition().getLabel();
  if (label == null || ""String_Node_Str"".equals(label)) {
    indicatorDefinition=indicator.getIndicatorDefinition();
  }
 else {
    indicatorDefinition=DefinitionHandler.getInstance().getIndicatorDefinition(label);
  }
  if (indicatorDefinition == null) {
    return traceError(""String_Node_Str"" + indicator.getName() + ""String_Node_Str"");
  }
  sqlGenericExpression=dbms().getSqlExpression(indicatorDefinition);
  final EClass indicatorEclass=indicator.eClass();
  if (sqlGenericExpression == null || sqlGenericExpression.getBody() == null) {
    if (IndicatorsPackage.eINSTANCE.getRegexpMatchingIndicator().equals(indicatorEclass)) {
      return traceError(""String_Node_Str"" + language + ""String_Node_Str"");
    }
    return traceError(""String_Node_Str"" + (indicator.getName() != null ? indicator.getName() : indicatorEclass.getName()) + ""String_Node_Str""+ ResourceHelper.getUUID(indicatorDefinition)+ ""String_Node_Str"");
  }
  List<String> whereExpression=new ArrayList<String>();
  if (StringUtils.isNotBlank(dataFilterAsString)) {
    whereExpression.add(dataFilterAsString);
  }
  List<String> rangeStrings=null;
  DateGrain dateAggregationType=null;
  IndicatorParameters parameters=indicator.getParameters();
  if (parameters != null) {
    Domain bins=parameters.getBins();
    if (bins != null) {
      rangeStrings=getBinsAsGenericString(bins.getRanges(),colName);
    }
    DateParameters dateParameters=parameters.getDateParameters();
    if (dateParameters != null) {
      dateAggregationType=dateParameters.getDateAggregationType();
    }
    TextParameters textParameter=parameters.getTextParameter();
    if (textParameter != null) {
      if (textParameter.isUseNulls()) {
        colName=dbms().replaceNullsWithString(colName,""String_Node_Str"");
      }
 else {
        whereExpression.add(colName.concat(dbms().isNotNull()));
      }
      if (textParameter.isIgnoreCase()) {
        colName=dbms().toUpperCase(colName);
      }
      if (!textParameter.isUseBlank() && IndicatorsPackage.eINSTANCE.getLengthIndicator().isSuperTypeOf(indicatorEclass)) {
        String tdColName=getQuotedColumnName(tdColumn);
        tdColName=dbms().replaceNullsWithString(tdColName,""String_Node_Str"");
        whereExpression.add(dbms().isNotBlank(tdColName));
      }
 else       if (textParameter.isUseBlank() && IndicatorsPackage.eINSTANCE.getFrequencyIndicator().isSuperTypeOf(indicatorEclass)) {
        colName=dbms().trim(colName);
      }
    }
  }
  final ColumnSet columnSetOwner=ColumnHelper.getColumnOwnerAsColumnSet(tdColumn);
  String schemaName=getQuotedSchemaName(columnSetOwner);
  String table=getQuotedTableName(tdColumn);
  String catalogName=getQuotedCatalogName(columnSetOwner);
  if (catalogName == null && schemaName != null) {
    final Schema parentSchema=SchemaHelper.getParentSchema(columnSetOwner);
    final Catalog parentCatalog=CatalogHelper.getParentCatalog(parentSchema);
    catalogName=parentCatalog != null ? parentCatalog.getName() : null;
  }
  boolean isSybase=false;
  if (Arrays.asList(ConnectionUtils.getSybaseDBProductsName()).contains(dbms().getDbmsName())) {
    isSybase=true;
  }
  if (isSybase) {
    schemaName=ColumnSetHelper.getTableOwner(columnSetOwner);
  }
  table=dbms().toQualifiedName(catalogName,schemaName,table);
  String completedSqlString=null;
  if (indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getMedianIndicator()) || indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getLowerQuartileIndicator()) || indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getUpperQuartileIndicator())) {
    completedSqlString=getCompletedStringForQuantiles(indicator,sqlGenericExpression,colName,table,whereExpression);
    if (completedSqlString != null) {
      whereExpression=duplicateForCrossJoin(completedSqlString,whereExpression,tdColumn);
      completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
    }
  }
 else   if (indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getFrequencyIndicator()) || IndicatorsPackage.eINSTANCE.getFrequencyIndicator().isSuperTypeOf(indicatorEclass) || indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getModeIndicator())|| UDIHelper.isFrequency(indicator)) {
    int topN=indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getModeIndicator()) ? 1 : getTopN(indicator);
    if (topN <= 0) {
      topN=TOP_N;
    }
    if (rangeStrings != null) {
      completedSqlString=getUnionCompletedString(indicator,sqlGenericExpression,colName,table,whereExpression,rangeStrings);
      if (indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getModeIndicator())) {
        completedSqlString=dbms().getTopNQuery(completedSqlString,topN);
      }
    }
 else     if (dateAggregationType != null && !dateAggregationType.equals(DateGrain.NONE) && Java2SqlType.isDateInSQL(tdColumn.getJavaType())) {
      completedSqlString=getDateAggregatedCompletedStringWithoutAlia(sqlGenericExpression,colName,table,dateAggregationType);
      completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
      completedSqlString=dbms().getTopNQuery(completedSqlString,topN);
    }
 else {
      if (indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getPatternFreqIndicator()) || indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getPatternLowFreqIndicator())) {
        if (Java2SqlType.isNumbericInSQL(tdColumn.getJavaType()) || Java2SqlType.isDateInSQL(tdColumn.getJavaType())) {
          colName=addFunctionTypeConvert(colName);
        }
        final EList<CharactersMapping> charactersMapping=indicatorDefinition.getCharactersMapping();
        colName=dbms().getPatternFinderFunction(colName,charactersMapping);
        if (colName == null) {
          colName=dbms().getPatternFinderDefaultFunction(colName);
        }
        if (colName == null) {
          return traceError(""String_Node_Str"" + language + ""String_Node_Str""+ indicator.getName());
        }
      }
 else       if (indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getSoundexFreqIndicator()) || indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getSoundexLowFreqIndicator())) {
        table=dbms().getSoundexFunction(table,colName);
      }
      completedSqlString=dbms().fillGenericQueryWithColumnTableAndAlias(sqlGenericExpression.getBody(),colName,table,colName);
      completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
      completedSqlString=dbms().getTopNQuery(completedSqlString,topN);
    }
  }
 else   if (IndicatorsPackage.eINSTANCE.getPatternMatchingIndicator().isSuperTypeOf(indicatorEclass)) {
    List<String> patterns=getPatterns(indicator);
    if (patterns.isEmpty()) {
      return traceError(""String_Node_Str"" + language + ""String_Node_Str""+ indicator.getName());
    }
    completedSqlString=replaceVariables(sqlGenericExpression.getBody(),colName,table,patterns);
    completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
  }
 else {
    if (IndicatorsPackage.eINSTANCE.getDefValueCountIndicator().equals(indicatorEclass)) {
      String defValue=ColumnHelper.getDefaultValue(tdColumn);
      if (defValue == null) {
        return traceError(""String_Node_Str"" + colName + ""String_Node_Str""+ indicator.getName()+ ""String_Node_Str"");
      }
      int javaType=tdColumn.getJavaType();
      if (!Java2SqlType.isNumbericInSQL(javaType) && !isFunction(defValue,table)) {
        defValue=""String_Node_Str"" + defValue + ""String_Node_Str"";
      }
      whereExpression.add(colName + dbms().equal() + defValue);
    }
    completedSqlString=dbms().fillGenericQueryWithColumnsAndTable(sqlGenericExpression.getBody(),colName,table);
    completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
  }
  String finalQuery=completedSqlString;
  if (finalQuery != null) {
    TdExpression instantiateSqlExpression=BooleanExpressionHelper.createTdExpression(language,finalQuery);
    indicator.setInstantiatedExpression(instantiateSqlExpression);
    return true;
  }
  return false;
}",0.9941614441052012
138753,"/** 
 * DOC scorreia Comment method ""getTableName"".
 * @param columnSetA
 * @return
 */
private String getTableName(EList<TdColumn> columnSetA){
  String tableName=null;
  for (  TdColumn column : columnSetA) {
    if (belongToSameSchemata((TdColumn)column)) {
      ColumnSet columnSetOwner=ColumnHelper.getColumnSetOwner(column);
      if (columnSetOwner == null) {
        log.error(""String_Node_Str"" + column.getName() + ""String_Node_Str"");
        continue;
      }
 else {
        String schemaName=getQuotedSchemaName(columnSetOwner);
        String table=getQuotedTableName(column);
        String catalogName=getQuotedCatalogName(columnSetOwner);
        if (catalogName == null && schemaName != null) {
          final Schema parentSchema=SchemaHelper.getParentSchema(columnSetOwner);
          final Catalog parentCatalog=CatalogHelper.getParentCatalog(parentSchema);
          catalogName=parentCatalog != null ? parentCatalog.getName() : null;
        }
        if (ConnectionUtils.isSybaseeDBProducts(dbms().getDbmsName())) {
          schemaName=ColumnSetHelper.getTableOwner(columnSetOwner);
        }
        tableName=dbms().toQualifiedName(catalogName,schemaName,table);
        this.catalogOrSchema=getCatalogOrSchemaName(column);
        break;
      }
    }
 else {
      log.error(this.errorMessage);
    }
  }
  return quote(tableName);
}","/** 
 * DOC scorreia Comment method ""getTableName"".
 * @param columnSetA
 * @return
 */
private String getTableName(EList<TdColumn> columnSetA){
  String tableName=null;
  for (  TdColumn column : columnSetA) {
    if (column != null && column.eIsProxy()) {
      column=(TdColumn)EObjectHelper.resolveObject(column);
    }
    if (belongToSameSchemata((TdColumn)column)) {
      ColumnSet columnSetOwner=ColumnHelper.getColumnSetOwner(column);
      if (columnSetOwner == null) {
        log.error(""String_Node_Str"" + column.getName() + ""String_Node_Str"");
        continue;
      }
 else {
        String schemaName=getQuotedSchemaName(columnSetOwner);
        String table=getQuotedTableName(column);
        String catalogName=getQuotedCatalogName(columnSetOwner);
        if (catalogName == null && schemaName != null) {
          final Schema parentSchema=SchemaHelper.getParentSchema(columnSetOwner);
          final Catalog parentCatalog=CatalogHelper.getParentCatalog(parentSchema);
          catalogName=parentCatalog != null ? parentCatalog.getName() : null;
        }
        if (ConnectionUtils.isSybaseeDBProducts(dbms().getDbmsName())) {
          schemaName=ColumnSetHelper.getTableOwner(columnSetOwner);
        }
        tableName=dbms().toQualifiedName(catalogName,schemaName,table);
        this.catalogOrSchema=getCatalogOrSchemaName(column);
        break;
      }
    }
 else {
      log.error(this.errorMessage);
    }
  }
  return quote(tableName);
}",0.9601691928093056
138754,"/** 
 * Method ""getAnalyzedTable"".
 * @param indicator
 * @return the table name (within quotes)
 */
private String getAnalyzedTable(Indicator indicator){
  String analyzedTableName=null;
  ColumnSet columnSetOwner=(ColumnSet)indicator.getAnalyzedElement();
  if (columnSetOwner == null) {
    log.error(""String_Node_Str"" + indicator.getName());
  }
 else {
    String schemaName=getQuotedSchemaName(columnSetOwner);
    String table=quote(columnSetOwner.getName());
    String catalogName=getQuotedCatalogName(columnSetOwner);
    if (catalogName == null && schemaName != null) {
      final Schema parentSchema=SchemaHelper.getParentSchema(columnSetOwner);
      final Catalog parentCatalog=CatalogHelper.getParentCatalog(parentSchema);
      catalogName=parentCatalog != null ? parentCatalog.getName() : null;
    }
    if (ConnectionUtils.isSybaseeDBProducts(dbms().getDbmsName())) {
      schemaName=ColumnSetHelper.getTableOwner(columnSetOwner);
    }
    analyzedTableName=dbms().toQualifiedName(catalogName,schemaName,table);
  }
  return analyzedTableName;
}","/** 
 * Method ""getAnalyzedTable"".
 * @param indicator
 * @return the table name (within quotes)
 */
private String getAnalyzedTable(Indicator indicator){
  String analyzedTableName=null;
  ColumnSet columnSetOwner=(ColumnSet)indicator.getAnalyzedElement();
  if (columnSetOwner == null) {
    log.error(""String_Node_Str"" + indicator.getName());
  }
 else {
    if (columnSetOwner.eIsProxy()) {
      columnSetOwner=(ColumnSet)EObjectHelper.resolveObject(columnSetOwner);
    }
    String schemaName=getQuotedSchemaName(columnSetOwner);
    String table=quote(columnSetOwner.getName());
    String catalogName=getQuotedCatalogName(columnSetOwner);
    if (catalogName == null && schemaName != null) {
      final Schema parentSchema=SchemaHelper.getParentSchema(columnSetOwner);
      final Catalog parentCatalog=CatalogHelper.getParentCatalog(parentSchema);
      catalogName=parentCatalog != null ? parentCatalog.getName() : null;
    }
    if (ConnectionUtils.isSybaseeDBProducts(dbms().getDbmsName())) {
      schemaName=ColumnSetHelper.getTableOwner(columnSetOwner);
    }
    analyzedTableName=dbms().toQualifiedName(catalogName,schemaName,table);
  }
  return analyzedTableName;
}",0.9467613132209406
138755,"/** 
 * DOC bZhou Comment method ""getProperty"".
 * @param element
 * @return
 */
public static Property getProperty(ModelElement element){
  URI uri=element.eResource().getURI();
  if (uri.isPlatform()) {
    IFile propertyFile=PropertyHelper.getPropertyFile(element);
    return getProperty(propertyFile);
  }
 else {
    File file=new Path(uri.toFileString()).removeFileExtension().addFileExtension(FactoriesUtil.PROPERTIES_EXTENSION).toFile();
    return getProperty(file);
  }
}","/** 
 * DOC bZhou Comment method ""getProperty"".
 * @param element
 * @return
 */
public static Property getProperty(ModelElement element){
  if (element != null && element.eIsProxy()) {
    element=(ModelElement)EObjectHelper.resolveObject(element);
  }
  URI uri=element.eResource().getURI();
  if (uri.isPlatform()) {
    IFile propertyFile=PropertyHelper.getPropertyFile(element);
    return getProperty(propertyFile);
  }
 else {
    File file=new Path(uri.toFileString()).removeFileExtension().addFileExtension(FactoriesUtil.PROPERTIES_EXTENSION).toFile();
    return getProperty(file);
  }
}",0.8934198331788693
138756,"/** 
 * DOC yyi Get all metadata connections.
 * @return
 */
public static List<Connection> getAllMetadataConnections(boolean excludeRecycleBin){
  List<Connection> connections=new ArrayList<Connection>();
  if (excludeRecycleBin) {
    for (    Connection con : getAllMetadataConnections()) {
      if (null == con.eResource()) {
        con=(Connection)EObjectHelper.resolveObject(con);
      }
      if (null != con.eResource() && !PropertyHelper.getProperty(con).getItem().getState().isDeleted()) {
        connections.add(con);
      }
    }
  }
  return connections;
}","/** 
 * DOC yyi Get all metadata connections.modEleToReposObjMap
 * @return
 */
public static List<Connection> getAllMetadataConnections(boolean excludeRecycleBin){
  List<Connection> connections=new ArrayList<Connection>();
  if (excludeRecycleBin) {
    for (    Connection con : getAllMetadataConnections()) {
      ConnectionItem item=(ConnectionItem)getRepositoryViewObject(con).getProperty().getItem();
      if (null != item && !item.getState().isDeleted()) {
        connections.add(con);
      }
    }
  }
  return connections;
}",0.7140287769784173
138757,"/** 
 * Method ""getCatalogName"".
 * @param analyzedElement
 * @return the catalog or schema quoted name
 */
protected String getCatalogOrSchemaName(ModelElement analyzedElement){
  Package schema=super.schemata.get(analyzedElement);
  if (schema == null) {
    log.error(""String_Node_Str"" + analyzedElement.getName());
    return null;
  }
  if (RelationalPackage.eINSTANCE.getSchema().equals(schema.eClass())) {
    final Catalog parentCatalog=CatalogHelper.getParentCatalog(schema);
    if (parentCatalog != null) {
      return parentCatalog.getName();
    }
  }
  return schema.getName();
}","/** 
 * Method ""getCatalogName"".
 * @param analyzedElement
 * @return the catalog or schema quoted name
 */
protected String getCatalogOrSchemaName(ModelElement analyzedElement){
  Package schema=super.schemata.get(analyzedElement);
  if (schema == null) {
    log.error(""String_Node_Str"" + ((analyzedElement != null) ? analyzedElement.getName() : ""String_Node_Str""));
    return null;
  }
  if (RelationalPackage.eINSTANCE.getSchema().equals(schema.eClass())) {
    final Catalog parentCatalog=CatalogHelper.getParentCatalog(schema);
    if (parentCatalog != null) {
      return parentCatalog.getName();
    }
  }
  return schema.getName();
}",0.9450726978998384
138758,"/** 
 * DOC mzhao Get indicator definition by definition id (xmi id)
 * @param definitionId
 * @return
 */
public IndicatorDefinition getDefinitionById(String definitionId){
  for (  IndicatorDefinition indDef : indicatorDefinitions) {
    CwmResource resource=(CwmResource)indDef.eResource();
    EObject object=resource.getEObject(definitionId);
    if (object != null && DefinitionPackage.eINSTANCE.getIndicatorDefinition().equals(object.eClass())) {
      return (IndicatorDefinition)object;
    }
  }
  return null;
}","/** 
 * DOC mzhao Get indicator definition by definition id (xmi id).
 * @param definitionId
 * @return
 */
public IndicatorDefinition getDefinitionById(String definitionId){
  for (  IndicatorDefinition indDef : indicatorDefinitions) {
    CwmResource resource=(CwmResource)indDef.eResource();
    EObject object=resource.getEObject(definitionId);
    if (object != null && DefinitionPackage.eINSTANCE.getIndicatorDefinition().equals(object.eClass())) {
      return (IndicatorDefinition)object;
    }
  }
  return null;
}",0.999043062200957
138759,"private void updateIndDefinition(Indicator ind){
  if (ind == null || ind.getIndicatorDefinition() == null) {
    return;
  }
  if (ind instanceof UserDefIndicator) {
    return;
  }
  CwmResource indDefResource=(CwmResource)ind.getIndicatorDefinition().eResource();
  IndicatorDefinition updatedDefinition=DefinitionHandler.getInstance().getDefinitionById(indDefResource.getID(ind.getIndicatorDefinition()));
  ind.setIndicatorDefinition(updatedDefinition);
}","private void updateIndDefinition(Indicator ind){
  if (ind == null) {
    return;
  }
  IndicatorDefinition indicatorDefinition=ind.getIndicatorDefinition();
  if (indicatorDefinition == null) {
    return;
  }
  if (ind instanceof UserDefIndicator) {
    return;
  }
  CwmResource indDefResource=(CwmResource)indicatorDefinition.eResource();
  if (indDefResource == null) {
    if (DefinitionHandler.getInstance().setDefaultIndicatorDefinition(ind)) {
      if (log.isDebugEnabled()) {
        log.debug(""String_Node_Str"" + indicatorDefinition.getName() + ""String_Node_Str""+ ind.getName()+ ""String_Node_Str""+ ind.eResource());
      }
    }
 else {
      log.error(""String_Node_Str"" + indicatorDefinition.getName() + ""String_Node_Str""+ ind.getName()+ ""String_Node_Str""+ ind.eResource());
    }
  }
 else {
    IndicatorDefinition updatedDefinition=DefinitionHandler.getInstance().getDefinitionById(indDefResource.getID(ind.getIndicatorDefinition()));
    ind.setIndicatorDefinition(updatedDefinition);
  }
}",0.5490463215258855
138760,"private boolean hideParameters(IndicatorUnit indicatorUnit){
  EClass indicatorEclass=indicatorUnit.getIndicator().eClass();
  System.out.println(indicatorEclass.getName());
  if (indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getMinLengthWithNullIndicator()) || indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getMinLengthWithBlankIndicator()) || indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getMinLengthWithBlankNullIndicator())|| indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getMaxLengthWithNullIndicator())|| indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getMaxLengthWithBlankIndicator())|| indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getMaxLengthWithBlankNullIndicator())|| indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getAvgLengthWithNullIndicator())|| indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getAvgLengthWithBlankIndicator())|| indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getAvgLengthWithBlankNullIndicator())|| indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getDateFrequencyIndicator())|| indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getWeekFrequencyIndicator())|| indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getMonthFrequencyIndicator())|| indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getQuarterFrequencyIndicator())|| indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getYearFrequencyIndicator())|| indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getDateLowFrequencyIndicator())|| indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getWeekLowFrequencyIndicator())|| indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getMonthLowFrequencyIndicator())|| indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getQuarterLowFrequencyIndicator())|| indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getYearLowFrequencyIndicator())) {
    return true;
  }
  return false;
}","private boolean hideParameters(IndicatorUnit indicatorUnit){
  EClass indicatorEclass=indicatorUnit.getIndicator().eClass();
  if (indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getMinLengthWithNullIndicator()) || indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getMinLengthWithBlankIndicator()) || indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getMinLengthWithBlankNullIndicator())|| indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getMaxLengthWithNullIndicator())|| indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getMaxLengthWithBlankIndicator())|| indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getMaxLengthWithBlankNullIndicator())|| indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getAvgLengthWithNullIndicator())|| indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getAvgLengthWithBlankIndicator())|| indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getAvgLengthWithBlankNullIndicator())|| indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getDateFrequencyIndicator())|| indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getWeekFrequencyIndicator())|| indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getMonthFrequencyIndicator())|| indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getQuarterFrequencyIndicator())|| indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getYearFrequencyIndicator())|| indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getDateLowFrequencyIndicator())|| indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getWeekLowFrequencyIndicator())|| indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getMonthLowFrequencyIndicator())|| indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getQuarterLowFrequencyIndicator())|| indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getYearLowFrequencyIndicator())) {
    return true;
  }
  return false;
}",0.9866229866229866
138761,"private void tansferFile(File parentFolder) throws Exception {
  if (!parentFolder.exists()) {
    return;
  }
  List<File> fileList=new ArrayList<File>();
  FilesUtils.getAllFilesFromFolder(parentFolder,fileList,nonPropertyFileFilter);
  for (  File propFile : fileList) {
    URI uri=URI.createFileURI(propFile.getAbsolutePath());
    Resource resource=resourceSet.getResource(uri,true);
    Property property=(Property)EcoreUtil.getObjectByType(resource.getContents(),PropertiesPackage.eINSTANCE.getProperty());
    if (property != null) {
      Item item=property.getItem();
      String connNameBofore=null;
      String connNameAfter=null;
      if (item instanceof ConnectionItem) {
        Connection conn=((ConnectionItem)item).getConnection();
        connNameBofore=conn.eResource().getURI().trimFileExtension().lastSegment();
        String version=property.getVersion();
        if (version == null) {
          version=""String_Node_Str"";
        }
        String label=conn.getName() + ""String_Node_Str"" + version;
        connNameAfter=label;
      }
      IPath path=new Path(item.getState().getPath());
      if (ProxyRepositoryFactory.getInstance().getFolderItem(ProjectManager.getInstance().getCurrentProject(),ERepositoryObjectType.getItemType(item),path) == null) {
        ProxyRepositoryFactory.getInstance().createFolder(ERepositoryObjectType.getItemType(item),path.removeLastSegments(1),path.lastSegment());
      }
      if (isWorksapcePath()) {
        ProxyRepositoryFactory.getInstance().create(item,path,true);
        if (item instanceof ConnectionItem) {
          Connection conn=((ConnectionItem)item).getConnection();
          if (conn.eIsProxy()) {
            conn=(Connection)EObjectHelper.resolveObject(conn);
          }
          connNameAfter=conn.eResource().getURI().trimFileExtension().lastSegment();
        }
      }
 else {
        copyFile(parentFolder,propFile,property,path,connNameAfter);
      }
      if (connNameBofore != null && connNameAfter != null) {
        getReplaceStringMap().put(connNameBofore,connNameAfter);
      }
    }
  }
}","private void tansferFile(File parentFolder) throws Exception {
  resourceSet=new ResourceSetImpl();
  if (!parentFolder.exists()) {
    return;
  }
  List<File> fileList=new ArrayList<File>();
  FilesUtils.getAllFilesFromFolder(parentFolder,fileList,nonPropertyFileFilter);
  for (  File propFile : fileList) {
    URI uri=URI.createFileURI(propFile.getAbsolutePath());
    Resource resource=resourceSet.getResource(uri,true);
    Property property=(Property)EcoreUtil.getObjectByType(resource.getContents(),PropertiesPackage.eINSTANCE.getProperty());
    if (property != null) {
      Item item=property.getItem();
      String connNameBofore=null;
      String connNameAfter=null;
      if (item instanceof ConnectionItem) {
        Connection conn=((ConnectionItem)item).getConnection();
        connNameBofore=conn.eResource().getURI().trimFileExtension().lastSegment();
        String version=property.getVersion();
        if (version == null) {
          version=""String_Node_Str"";
        }
        String label=conn.getName() + ""String_Node_Str"" + version;
        connNameAfter=label;
      }
      IPath path=new Path(item.getState().getPath());
      if (ProxyRepositoryFactory.getInstance().getFolderItem(ProjectManager.getInstance().getCurrentProject(),ERepositoryObjectType.getItemType(item),path) == null) {
        ProxyRepositoryFactory.getInstance().createFolder(ERepositoryObjectType.getItemType(item),path.removeLastSegments(1),path.lastSegment());
      }
      if (isWorksapcePath()) {
        ProxyRepositoryFactory.getInstance().create(item,path,true);
        if (item instanceof ConnectionItem) {
          Connection conn=((ConnectionItem)item).getConnection();
          if (conn.eIsProxy()) {
            conn=(Connection)EObjectHelper.resolveObject(conn);
          }
          connNameAfter=conn.eResource().getURI().trimFileExtension().lastSegment();
        }
      }
 else {
        copyFile(parentFolder,propFile,property,path,connNameAfter);
      }
      if (connNameBofore != null && connNameAfter != null) {
        getReplaceStringMap().put(connNameBofore,connNameAfter);
      }
    }
  }
}",0.9912467471019636
138762,"private File backUPWorksapce(IPath workspacePath){
  try {
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + workspacePath.toOSString());
    }
    ProductVersion version=WorkspaceVersionHelper.getVesion(new Path(versionFile.getAbsolutePath()));
    ProductVersion version410=new ProductVersion(4,1,0);
    if (version != null && VersionComparator.isLower(version,version410)) {
      File temporaryFolder=workspacePath.removeLastSegments(1).append(""String_Node_Str"" + EcoreUtil.generateUUID()).toFile();
      if (!temporaryFolder.exists()) {
        temporaryFolder.mkdir();
      }
      FileUtils.copyDirectory(workspacePath.toFile(),temporaryFolder);
      return temporaryFolder;
    }
  }
 catch (  IOException e) {
    log.error(e);
  }
  return null;
}","protected File backUPWorksapce(IPath workspacePath){
  try {
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + workspacePath.toOSString());
    }
    File temporaryFolder=workspacePath.removeLastSegments(1).append(""String_Node_Str"" + EcoreUtil.generateUUID()).toFile();
    if (!temporaryFolder.exists()) {
      temporaryFolder.mkdir();
    }
    FileUtils.copyDirectory(workspacePath.toFile(),temporaryFolder);
    return temporaryFolder;
  }
 catch (  IOException e) {
    log.error(e);
  }
  return null;
}",0.7589900535577658
138763,"/** 
 * DOC bZhou Comment method ""update"".
 * @param desFile
 * @throws IOException
 * @throws PersistenceException
 */
private void update(File desFile) throws IOException, PersistenceException {
  String curProjectLabel=ResourceManager.getRootProjectName();
  if (!StringUtils.equals(projectName,curProjectLabel)) {
    String content=FileUtils.readFileToString(desFile,""String_Node_Str"");
    content=StringUtils.replace(content,""String_Node_Str"" + projectName + ""String_Node_Str"",""String_Node_Str"" + curProjectLabel + ""String_Node_Str"");
    FileUtils.writeStringToFile(desFile,content,""String_Node_Str"");
  }
  if (desFile.getName().endsWith(FactoriesUtil.PROPERTIES_EXTENSION)) {
    Property property=PropertyHelper.getProperty(desFile);
    User user=ReponsitoryContextBridge.getUser();
    if (user != null) {
      property.setAuthor(user);
    }
    EMFSharedResources.getInstance().saveResource(property.eResource());
  }
  if (desFile.getName().endsWith(FactoriesUtil.ITEM_EXTENSION)) {
    File propFile=new Path(desFile.getAbsolutePath()).removeFileExtension().addFileExtension(FactoriesUtil.PROPERTIES_EXTENSION).toFile();
    Property property=PropertyHelper.getProperty(propFile);
    if (property.getItem() instanceof ConnectionItem) {
      Connection connection=((ConnectionItem)property.getItem()).getConnection();
      TdSoftwareSystem softwareSystem=SoftwareSystemManager.getInstance().getSoftwareSystem(connection);
      if (softwareSystem != null) {
        ConnectionHelper.setSoftwareSystem(connection,softwareSystem);
      }
      ProxyRepositoryFactory.getInstance().save(property.getItem(),true);
      IRepositoryViewObject object=new RepositoryViewObject(property);
      ProxyRepositoryViewObject.registerReposViewObj(connection,object);
    }
  }
}","/** 
 * DOC bZhou Comment method ""update"".
 * @param desFile
 * @throws IOException
 * @throws PersistenceException
 */
private void update(File desFile) throws IOException, PersistenceException {
  String curProjectLabel=ResourceManager.getRootProjectName();
  if (!StringUtils.equals(projectName,curProjectLabel)) {
    String content=FileUtils.readFileToString(desFile,""String_Node_Str"");
    content=StringUtils.replace(content,""String_Node_Str"" + projectName + ""String_Node_Str"",""String_Node_Str"" + curProjectLabel + ""String_Node_Str"");
    FileUtils.writeStringToFile(desFile,content,""String_Node_Str"");
  }
  if (desFile.getName().endsWith(FactoriesUtil.PROPERTIES_EXTENSION)) {
    Property property=PropertyHelper.getProperty(desFile);
    User user=ReponsitoryContextBridge.getUser();
    if (user != null) {
      property.setAuthor(user);
    }
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + desFile + ""String_Node_Str""+ property.getLabel());
    }
    EMFSharedResources.getInstance().saveResource(property.eResource());
  }
  if (desFile.getName().endsWith(FactoriesUtil.ITEM_EXTENSION)) {
    File propFile=new Path(desFile.getAbsolutePath()).removeFileExtension().addFileExtension(FactoriesUtil.PROPERTIES_EXTENSION).toFile();
    Property property=PropertyHelper.getProperty(propFile);
    if (property != null && property.getItem() instanceof ConnectionItem) {
      Connection connection=((ConnectionItem)property.getItem()).getConnection();
      TdSoftwareSystem softwareSystem=SoftwareSystemManager.getInstance().getSoftwareSystem(connection);
      if (softwareSystem != null) {
        ConnectionHelper.setSoftwareSystem(connection,softwareSystem);
      }
      ProxyRepositoryFactory.getInstance().save(property.getItem(),true);
      IRepositoryViewObject object=new RepositoryViewObject(property);
      ProxyRepositoryViewObject.registerReposViewObj(connection,object);
    }
  }
}",0.9609900457358084
138764,"public List<String> check(){
  List<String> errors=new ArrayList<String>();
  if (!checkBasePath()) {
    errors.add(""String_Node_Str"");
  }
 else   if (!checkVersion()) {
    errors.add(""String_Node_Str"");
  }
 else   if (!checkProject()) {
    errors.add(""String_Node_Str"");
  }
  return errors;
}","public List<String> check(){
  List<String> errors=new ArrayList<String>();
  if (!checkBasePath()) {
    errors.add(""String_Node_Str"");
  }
 else   if (!checkVersion()) {
    errors.add(""String_Node_Str"");
  }
 else   if (!checkProject()) {
    errors.add(""String_Node_Str"");
  }
 else   if (!checkTempPath()) {
    errors.add(""String_Node_Str"");
  }
  return errors;
}",0.8938714499252616
138765,"public ItemRecord computeInput(IPath path){
  if (path != null) {
    versionFile=path.append(EResourceConstant.LIBRARIES.getPath()).append(VERSION_FILE_NAME).toFile();
    definitionFile=path.append(EResourceConstant.LIBRARIES.getPath()).append(DEFINITION_FILE_NAME).toFile();
    if (!versionFile.exists()) {
      return null;
    }
    tempFolder=backUPWorksapce(path);
    if (tempFolder == null) {
      throw new RuntimeException(""String_Node_Str"" + path + ""String_Node_Str"");
    }
    IPath tempBasePath=new Path(tempFolder.getAbsolutePath());
    IPath projPath=tempBasePath.append(""String_Node_Str"");
    setBasePath(tempBasePath);
    if (projPath.toFile().exists()) {
      Object projOBJ=EObjectHelper.retrieveEObject(projPath,PropertiesPackage.eINSTANCE.getProject());
      if (projOBJ != null) {
        Project project=(Project)projOBJ;
        projectName=project.getTechnicalLabel();
      }
    }
 else {
      projectName=ReponsitoryContextBridge.getProjectName();
    }
    return new ItemRecord(tempFolder);
  }
  return null;
}","public ItemRecord computeInput(IPath path){
  if (path != null) {
    versionFile=path.append(EResourceConstant.LIBRARIES.getPath()).append(VERSION_FILE_NAME).toFile();
    definitionFile=path.append(EResourceConstant.LIBRARIES.getPath()).append(DEFINITION_FILE_NAME).toFile();
    if (!versionFile.exists()) {
      return null;
    }
    tempFolder=backUPWorksapce(path);
    if (tempFolder == null) {
      return null;
    }
    IPath tempBasePath=new Path(tempFolder.getAbsolutePath());
    IPath projPath=tempBasePath.append(""String_Node_Str"");
    setBasePath(tempBasePath);
    if (projPath.toFile().exists()) {
      Object projOBJ=EObjectHelper.retrieveEObject(projPath,PropertiesPackage.eINSTANCE.getProject());
      if (projOBJ != null) {
        Project project=(Project)projOBJ;
        projectName=project.getTechnicalLabel();
      }
    }
 else {
      projectName=ReponsitoryContextBridge.getProjectName();
    }
    return new ItemRecord(tempFolder);
  }
  return null;
}",0.9593734703866864
138766,"@Override public ItemRecord computeInput(IPath path){
  sourcePath=path.removeFileExtension();
  try {
    FilesUtils.createFolder(sourcePath.toFile());
    FilesUtils.unzip(path.toOSString(),sourcePath.toOSString());
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return super.computeInput(sourcePath.append(sourcePath.lastSegment()));
}","@Override public ItemRecord computeInput(IPath path){
  sourcePath=path.removeFileExtension();
  try {
    FilesUtils.createFolder(sourcePath.toFile());
    FilesUtils.unzip(path.toOSString(),sourcePath.toOSString());
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  String curProjectLabel=ResourceManager.getRootProjectName();
  return super.computeInput(sourcePath.append(sourcePath.lastSegment()).append(curProjectLabel));
}",0.8897338403041825
138767,"protected void createTempConnectionFile() throws ReloadCompareException {
  IFile findCorrespondingFile=PrvResourceFileHelper.getInstance().findCorrespondingFile(oldDataProvider);
  if (findCorrespondingFile == null) {
    throw new ReloadCompareException(DefaultMessagesImpl.getString(""String_Node_Str"",oldDataProvider.getName()));
  }
  IFile tempConnectionFile=DQStructureComparer.copyedToDestinationFile(findCorrespondingFile,DQStructureComparer.getTempRefreshFile());
  URI uri=URI.createPlatformResourceURI(tempConnectionFile.getFullPath().toString(),false);
  Resource resource=EMFSharedResources.getInstance().getResource(uri,true);
  Collection<Connection> tdDataProviders=DataProviderHelper.getTdDataProviders(resource.getContents());
  if (tdDataProviders.isEmpty()) {
    throw new ReloadCompareException(DefaultMessagesImpl.getString(""String_Node_Str"",tempConnectionFile.getLocation().toFile().getAbsolutePath()));
  }
  if (tdDataProviders.size() > 1) {
    throw new ReloadCompareException(DefaultMessagesImpl.getString(""String_Node_Str"",tdDataProviders.size(),tempConnectionFile.getLocation().toFile().getAbsolutePath()));
  }
  tempReloadProvider=tdDataProviders.iterator().next();
}","protected void createTempConnectionFile() throws ReloadCompareException {
  if (oldDataProvider != null && oldDataProvider.eIsProxy()) {
    oldDataProvider=(Connection)EObjectHelper.resolveObject(oldDataProvider);
  }
  IFile findCorrespondingFile=PrvResourceFileHelper.getInstance().findCorrespondingFile(oldDataProvider);
  if (findCorrespondingFile == null) {
    throw new ReloadCompareException(DefaultMessagesImpl.getString(""String_Node_Str"",oldDataProvider.getName()));
  }
  IFile tempConnectionFile=DQStructureComparer.copyedToDestinationFile(findCorrespondingFile,DQStructureComparer.getTempRefreshFile());
  URI uri=URI.createPlatformResourceURI(tempConnectionFile.getFullPath().toString(),false);
  Resource resource=EMFSharedResources.getInstance().getResource(uri,true);
  Collection<Connection> tdDataProviders=DataProviderHelper.getTdDataProviders(resource.getContents());
  if (tdDataProviders.isEmpty()) {
    throw new ReloadCompareException(DefaultMessagesImpl.getString(""String_Node_Str"",tempConnectionFile.getLocation().toFile().getAbsolutePath()));
  }
  if (tdDataProviders.size() > 1) {
    throw new ReloadCompareException(DefaultMessagesImpl.getString(""String_Node_Str"",tdDataProviders.size(),tempConnectionFile.getLocation().toFile().getAbsolutePath()));
  }
  tempReloadProvider=tdDataProviders.iterator().next();
}",0.9430255402750491
138768,"@Override protected boolean doExecute() throws Exception {
  boolean result=true;
  Map<File,File> folderMap=initStructure();
  for (  File folder : folderMap.keySet()) {
    try {
      if (isWorksapcePath()) {
        tansferFile(folder);
      }
 else {
        if (folder.exists()) {
          FileUtils.copyDirectory(folder,folderMap.get(folder));
        }
      }
    }
 catch (    Exception e) {
      log.error(e,e);
    }
  }
  File tdqMetadataFile=getWorkspacePath().append(OLD_MEATADATA_FOLDER_NAME).toFile();
  if (tdqMetadataFile.exists()) {
    FileUtils.deleteDirectory(tdqMetadataFile);
  }
  File fileAnalysis=getWorkspacePath().append(EResourceConstant.ANALYSIS.getPath()).toFile();
  File fileRule=getWorkspacePath().append(EResourceConstant.RULES.getPath()).toFile();
  try {
    String[] anaFileExtentionNames={FactoriesUtil.ANA};
    String[] rulesFileEctentionNames={FactoriesUtil.DQRULE};
    result&=FilesUtils.migrateFolder(fileAnalysis,anaFileExtentionNames,this.getReplaceStringMap(),log) && FilesUtils.migrateFolder(fileRule,rulesFileEctentionNames,this.getReplaceStringMap(),log);
    AnaResourceFileHelper.getInstance().clear();
    ResourceService.refreshStructure();
  }
 catch (  Exception e) {
    result=false;
    log.error(e,e);
  }
  return result;
}","@Override protected boolean doExecute() throws Exception {
  boolean result=true;
  folderMap=initStructure();
  for (  File folder : folderMap.keySet()) {
    try {
      tansferFile(folder);
    }
 catch (    Exception e) {
      log.error(e,e);
    }
  }
  File tdqMetadataFile=getWorkspacePath().append(OLD_MEATADATA_FOLDER_NAME).toFile();
  if (tdqMetadataFile.exists()) {
    FileUtils.deleteDirectory(tdqMetadataFile);
  }
  File fileAnalysis=getWorkspacePath().append(EResourceConstant.ANALYSIS.getPath()).toFile();
  File fileRule=getWorkspacePath().append(EResourceConstant.RULES.getPath()).toFile();
  try {
    String[] anaFileExtentionNames={FactoriesUtil.ANA};
    String[] rulesFileEctentionNames={FactoriesUtil.DQRULE};
    result&=FilesUtils.migrateFolder(fileAnalysis,anaFileExtentionNames,this.getReplaceStringMap(),log) && FilesUtils.migrateFolder(fileRule,rulesFileEctentionNames,this.getReplaceStringMap(),log);
    AnaResourceFileHelper.getInstance().clear();
    ResourceService.refreshStructure();
  }
 catch (  Exception e) {
    result=false;
    log.error(e,e);
  }
  return result;
}",0.9092422980849292
138769,"private void tansferFile(File parentFolder) throws Exception {
  if (!parentFolder.exists()) {
    return;
  }
  List<File> fileList=new ArrayList<File>();
  FilesUtils.getAllFilesFromFolder(parentFolder,fileList,nonPropertyFileFilter);
  for (  File propFile : fileList) {
    URI uri=URI.createFileURI(propFile.getAbsolutePath());
    Resource resource=resourceSet.getResource(uri,true);
    Property property=(Property)EcoreUtil.getObjectByType(resource.getContents(),PropertiesPackage.eINSTANCE.getProperty());
    if (property != null) {
      Item item=property.getItem();
      String connNameBofore=null;
      String connNameAfter=null;
      if (item instanceof ConnectionItem) {
        Connection conn=((ConnectionItem)item).getConnection();
        connNameBofore=conn.eResource().getURI().trimFileExtension().lastSegment();
        String fileName=propFile.getName();
        int lastIndex=fileName.lastIndexOf(""String_Node_Str"");
        if (lastIndex > 0) {
          fileName=fileName.substring(0,lastIndex);
        }
 else {
          fileName=new Path(fileName).removeFileExtension().lastSegment();
        }
        property.setLabel(fileName);
      }
      IPath path=new Path(item.getState().getPath());
      if (ProxyRepositoryFactory.getInstance().getFolderItem(ProjectManager.getInstance().getCurrentProject(),ERepositoryObjectType.getItemType(item),path) == null) {
        ProxyRepositoryFactory.getInstance().createFolder(ERepositoryObjectType.getItemType(item),path.removeLastSegments(1),path.lastSegment());
      }
      ProxyRepositoryFactory.getInstance().create(item,path,true);
      if (item instanceof ConnectionItem) {
        Connection conn=((ConnectionItem)item).getConnection();
        if (conn.eIsProxy()) {
          conn=(Connection)EObjectHelper.resolveObject(conn);
        }
        connNameAfter=conn.eResource().getURI().trimFileExtension().lastSegment();
        if (connNameBofore != null && connNameAfter != null) {
          getReplaceStringMap().put(connNameBofore,connNameAfter);
        }
      }
    }
  }
}","private void tansferFile(File parentFolder) throws Exception {
  if (!parentFolder.exists()) {
    return;
  }
  List<File> fileList=new ArrayList<File>();
  FilesUtils.getAllFilesFromFolder(parentFolder,fileList,nonPropertyFileFilter);
  for (  File propFile : fileList) {
    URI uri=URI.createFileURI(propFile.getAbsolutePath());
    Resource resource=resourceSet.getResource(uri,true);
    Property property=(Property)EcoreUtil.getObjectByType(resource.getContents(),PropertiesPackage.eINSTANCE.getProperty());
    if (property != null) {
      Item item=property.getItem();
      String connNameBofore=null;
      String connNameAfter=null;
      if (item instanceof ConnectionItem) {
        Connection conn=((ConnectionItem)item).getConnection();
        connNameBofore=conn.eResource().getURI().trimFileExtension().lastSegment();
        String version=property.getVersion();
        if (version == null) {
          version=""String_Node_Str"";
        }
        String label=conn.getName() + ""String_Node_Str"" + version;
        connNameAfter=label;
      }
      IPath path=new Path(item.getState().getPath());
      if (ProxyRepositoryFactory.getInstance().getFolderItem(ProjectManager.getInstance().getCurrentProject(),ERepositoryObjectType.getItemType(item),path) == null) {
        ProxyRepositoryFactory.getInstance().createFolder(ERepositoryObjectType.getItemType(item),path.removeLastSegments(1),path.lastSegment());
      }
      if (isWorksapcePath()) {
        ProxyRepositoryFactory.getInstance().create(item,path,true);
        if (item instanceof ConnectionItem) {
          Connection conn=((ConnectionItem)item).getConnection();
          if (conn.eIsProxy()) {
            conn=(Connection)EObjectHelper.resolveObject(conn);
          }
          connNameAfter=conn.eResource().getURI().trimFileExtension().lastSegment();
        }
      }
 else {
        copyFile(parentFolder,propFile,property,path,connNameAfter);
      }
      if (connNameBofore != null && connNameAfter != null) {
        getReplaceStringMap().put(connNameBofore,connNameAfter);
      }
    }
  }
}",0.8501440922190202
138770,"public void write(ItemRecord[] records,IProgressMonitor monitor){
  if (monitor == null) {
    monitor=new NullProgressMonitor();
  }
  try {
    for (    ItemRecord record : records) {
      if (monitor.isCanceled()) {
        break;
      }
      Map<IPath,IPath> toImportMap=mapping(record);
      monitor.subTask(""String_Node_Str"" + record.getName());
      if (record.isValid()) {
        log.info(""String_Node_Str"" + record.getFile().getAbsolutePath());
        ModelElement element=record.getElement();
        if (element != null && element instanceof Connection) {
          Property property=record.getProperty();
          String fileName=record.getFile().getName();
          int lastIndex=fileName.lastIndexOf(""String_Node_Str"");
          if (lastIndex > 0) {
            fileName=fileName.substring(0,lastIndex);
          }
 else {
            fileName=new Path(fileName).removeFileExtension().lastSegment();
          }
          property.setLabel(fileName);
          IPath statePath;
          ItemState state=property.getItem().getState();
          if (state != null && state.getPath() != null) {
            statePath=new Path(state.getPath());
          }
 else {
            statePath=Path.EMPTY;
          }
          ProxyRepositoryFactory.getInstance().create(property.getItem(),statePath);
        }
 else {
          for (          IPath resPath : toImportMap.keySet()) {
            IPath desPath=toImportMap.get(resPath);
            write(resPath,desPath);
          }
        }
      }
 else {
        for (        String error : record.getErrors()) {
          log.error(error);
        }
      }
      monitor.worked(1);
    }
    finish(records,monitor);
  }
 catch (  Exception e) {
    log.error(e,e);
  }
}","public void write(ItemRecord[] records,IProgressMonitor monitor){
  if (monitor == null) {
    monitor=new NullProgressMonitor();
  }
  try {
    for (    ItemRecord record : records) {
      if (monitor.isCanceled()) {
        break;
      }
      Map<IPath,IPath> toImportMap=mapping(record);
      monitor.subTask(""String_Node_Str"" + record.getName());
      if (record.isValid()) {
        log.info(""String_Node_Str"" + record.getFile().getAbsolutePath());
        ModelElement element=record.getElement();
        if (element != null && element instanceof Connection) {
          Property property=record.getProperty();
          IPath statePath;
          ItemState state=property.getItem().getState();
          if (state != null && state.getPath() != null) {
            statePath=new Path(state.getPath());
          }
 else {
            statePath=Path.EMPTY;
          }
          ProxyRepositoryFactory.getInstance().create(property.getItem(),statePath);
        }
 else {
          for (          IPath resPath : toImportMap.keySet()) {
            IPath desPath=toImportMap.get(resPath);
            write(resPath,desPath);
          }
        }
      }
 else {
        for (        String error : record.getErrors()) {
          log.error(error);
        }
      }
      monitor.worked(1);
    }
    finish(records,monitor);
  }
 catch (  Exception e) {
    log.error(e,e);
  }
}",0.8878266411727215
138771,"/** 
 * DOC bZhou Comment method ""update"".
 * @param desFile
 * @throws IOException
 */
private void update(File desFile) throws IOException {
  String curProjectLabel=ResourceManager.getRootProjectName();
  if (!StringUtils.equals(projectName,curProjectLabel)) {
    String content=FileUtils.readFileToString(desFile,""String_Node_Str"");
    content=StringUtils.replace(content,""String_Node_Str"" + projectName + ""String_Node_Str"",""String_Node_Str"" + curProjectLabel + ""String_Node_Str"");
    FileUtils.writeStringToFile(desFile,content,""String_Node_Str"");
  }
  if (desFile.getName().endsWith(FactoriesUtil.PROPERTIES_EXTENSION)) {
    Property property=PropertyHelper.getProperty(desFile);
    User user=ReponsitoryContextBridge.getUser();
    if (user != null) {
      property.setAuthor(user);
    }
    EMFSharedResources.getInstance().saveResource(property.eResource());
  }
}","/** 
 * DOC bZhou Comment method ""update"".
 * @param desFile
 * @throws IOException
 * @throws PersistenceException
 */
private void update(File desFile) throws IOException, PersistenceException {
  String curProjectLabel=ResourceManager.getRootProjectName();
  if (!StringUtils.equals(projectName,curProjectLabel)) {
    String content=FileUtils.readFileToString(desFile,""String_Node_Str"");
    content=StringUtils.replace(content,""String_Node_Str"" + projectName + ""String_Node_Str"",""String_Node_Str"" + curProjectLabel + ""String_Node_Str"");
    FileUtils.writeStringToFile(desFile,content,""String_Node_Str"");
  }
  if (desFile.getName().endsWith(FactoriesUtil.PROPERTIES_EXTENSION)) {
    Property property=PropertyHelper.getProperty(desFile);
    User user=ReponsitoryContextBridge.getUser();
    if (user != null) {
      property.setAuthor(user);
    }
    EMFSharedResources.getInstance().saveResource(property.eResource());
  }
  if (desFile.getName().endsWith(FactoriesUtil.ITEM_EXTENSION)) {
    File propFile=new Path(desFile.getAbsolutePath()).removeFileExtension().addFileExtension(FactoriesUtil.PROPERTIES_EXTENSION).toFile();
    Property property=PropertyHelper.getProperty(propFile);
    if (property.getItem() instanceof ConnectionItem) {
      Connection connection=((ConnectionItem)property.getItem()).getConnection();
      TdSoftwareSystem softwareSystem=SoftwareSystemManager.getInstance().getSoftwareSystem(connection);
      if (softwareSystem != null) {
        ConnectionHelper.setSoftwareSystem(connection,softwareSystem);
      }
      ProxyRepositoryFactory.getInstance().save(property.getItem(),true);
      IRepositoryViewObject object=new RepositoryViewObject(property);
      ProxyRepositoryViewObject.registerReposViewObj(connection,object);
    }
  }
}",0.6606674165729284
138772,"public ItemRecord computeInput(IPath path){
  setBasePath(path);
  if (path != null) {
    versionFile=path.append(EResourceConstant.LIBRARIES.getPath()).append(VERSION_FILE_NAME).toFile();
    definitionFile=path.append(EResourceConstant.LIBRARIES.getPath()).append(DEFINITION_FILE_NAME).toFile();
    if (!versionFile.exists()) {
      return null;
    }
    IPath projPath=path.append(""String_Node_Str"");
    if (projPath.toFile().exists()) {
      Object projOBJ=EObjectHelper.retrieveEObject(projPath,PropertiesPackage.eINSTANCE.getProject());
      if (projOBJ != null) {
        Project project=(Project)projOBJ;
        projectName=project.getTechnicalLabel();
      }
    }
 else {
      projectName=ReponsitoryContextBridge.getProjectName();
    }
  }
  return new ItemRecord(path.toFile());
}","public ItemRecord computeInput(IPath path){
  setBasePath(path);
  if (path != null) {
    versionFile=path.append(EResourceConstant.LIBRARIES.getPath()).append(VERSION_FILE_NAME).toFile();
    definitionFile=path.append(EResourceConstant.LIBRARIES.getPath()).append(DEFINITION_FILE_NAME).toFile();
    if (!versionFile.exists()) {
      return null;
    }
    backUPWorksapce();
    IPath projPath=path.append(""String_Node_Str"");
    if (projPath.toFile().exists()) {
      Object projOBJ=EObjectHelper.retrieveEObject(projPath,PropertiesPackage.eINSTANCE.getProject());
      if (projOBJ != null) {
        Project project=(Project)projOBJ;
        projectName=project.getTechnicalLabel();
      }
    }
 else {
      projectName=ReponsitoryContextBridge.getProjectName();
    }
  }
  return new ItemRecord(path.toFile());
}",0.9858809085328424
138773,"public void migration(IProgressMonitor monitor){
  List<IMigrationTask> modelTasks=new ArrayList<IMigrationTask>();
  if (versionFile != null && versionFile.exists()) {
    ProductVersion version=WorkspaceVersionHelper.getVesion(new Path(versionFile.getAbsolutePath()));
    List<IMigrationTask> taskList=MigrationTaskManager.findWorkspaceTaskByType(MigrationTaskType.FILE,version);
    if (!taskList.isEmpty()) {
      for (      IMigrationTask task : taskList) {
        if (isModelTask(task)) {
          ((AbstractWorksapceUpdateTask)task).setWorkspacePath(basePath);
          modelTasks.add(task);
        }
 else {
          commTasks.add(task);
        }
      }
    }
  }
  File file=basePath.append(EResourceConstant.LIBRARIES.getPath()).append(""String_Node_Str"").toFile();
  if (!modelTasks.isEmpty() && !file.exists()) {
    MigrationTaskManager.doMigrationTask(modelTasks,monitor);
    try {
      file.createNewFile();
    }
 catch (    IOException e) {
      ExceptionHandler.process(e);
    }
  }
}","public void migration(IProgressMonitor monitor){
  List<IMigrationTask> modelTasks=new ArrayList<IMigrationTask>();
  if (versionFile != null && versionFile.exists()) {
    ProductVersion version=WorkspaceVersionHelper.getVesion(new Path(versionFile.getAbsolutePath()));
    List<IMigrationTask> taskList=MigrationTaskManager.findWorkspaceTaskByType(MigrationTaskType.FILE,version);
    if (!taskList.isEmpty()) {
      for (      IMigrationTask task : taskList) {
        if (isModelTask(task)) {
          ((AbstractWorksapceUpdateTask)task).setWorkspacePath(basePath);
          modelTasks.add(task);
        }
 else {
          commTasks.add(task);
        }
      }
    }
  }
  if (!modelTasks.isEmpty()) {
    MigrationTaskManager.doMigrationTask(modelTasks,monitor);
  }
}",0.7730061349693251
138774,"public void finish(ItemRecord[] records,IProgressMonitor monitor) throws IOException, CoreException {
  ItemRecord.clear();
  IFile defFile=ResourceManager.getLibrariesFolder().getFile(DEFINITION_FILE_NAME);
  if (definitionFile != null && definitionFile.exists()) {
    File defintionFile=defFile.getLocation().toFile();
    FilesUtils.copyFile(definitionFile,defintionFile);
  }
  ResourceService.refreshStructure();
  if (!commTasks.isEmpty() && monitor != null) {
    MigrationTaskManager.doMigrationTask(commTasks,monitor);
  }
  ProxyRepositoryViewObject.fetchAllRepositoryViewObjects(true);
}","public void finish(ItemRecord[] records,IProgressMonitor monitor) throws IOException, CoreException {
  ItemRecord.clear();
  IFile defFile=ResourceManager.getLibrariesFolder().getFile(DEFINITION_FILE_NAME);
  if (definitionFile != null && definitionFile.exists()) {
    File defintionFile=defFile.getLocation().toFile();
    FilesUtils.copyFile(definitionFile,defintionFile);
  }
  ResourceService.refreshStructure();
  if (!commTasks.isEmpty() && monitor != null) {
    MigrationTaskManager.doMigrationTask(commTasks,monitor);
  }
  if (tempFolder != null && tempFolder.exists()) {
    log.info(""String_Node_Str"");
    FileUtils.copyDirectory(tempFolder,basePath.toFile());
    FileUtils.deleteDirectory(tempFolder);
  }
}",0.8133030990173847
138775,"public void write(ItemRecord[] records,IProgressMonitor monitor){
  if (monitor == null) {
    monitor=new NullProgressMonitor();
  }
  try {
    for (    ItemRecord record : records) {
      if (monitor.isCanceled()) {
        break;
      }
      Map<IPath,IPath> toImportMap=mapping(record);
      monitor.subTask(""String_Node_Str"" + record.getName());
      if (record.isValid()) {
        log.info(""String_Node_Str"" + record.getFile().getAbsolutePath());
        ModelElement element=record.getElement();
        if (element != null && element instanceof Connection) {
          Property property=record.getProperty();
          IPath statePath;
          ItemState state=property.getItem().getState();
          if (state != null && state.getPath() != null) {
            statePath=new Path(state.getPath());
          }
 else {
            statePath=Path.EMPTY;
          }
          ProxyRepositoryFactory.getInstance().create(property.getItem(),statePath);
        }
 else {
          for (          IPath resPath : toImportMap.keySet()) {
            IPath desPath=toImportMap.get(resPath);
            write(resPath,desPath);
          }
        }
      }
 else {
        for (        String error : record.getErrors()) {
          log.error(error);
        }
      }
      monitor.worked(1);
    }
    finish(records,monitor);
  }
 catch (  Exception e) {
    log.error(e,e);
  }
}","public void write(ItemRecord[] records,IProgressMonitor monitor){
  if (monitor == null) {
    monitor=new NullProgressMonitor();
  }
  try {
    for (    ItemRecord record : records) {
      if (monitor.isCanceled()) {
        break;
      }
      Map<IPath,IPath> toImportMap=mapping(record);
      monitor.subTask(""String_Node_Str"" + record.getName());
      if (record.isValid()) {
        log.info(""String_Node_Str"" + record.getFile().getAbsolutePath());
        for (        IPath resPath : toImportMap.keySet()) {
          IPath desPath=toImportMap.get(resPath);
          write(resPath,desPath);
        }
      }
 else {
        for (        String error : record.getErrors()) {
          log.error(error);
        }
      }
      monitor.worked(1);
    }
    finish(records,monitor);
  }
 catch (  Exception e) {
    log.error(e,e);
  }
}",0.7537912578055308
138776,"/** 
 * DOC xqliu Comment method ""getDriverClass"".
 * @param conn
 * @return driver class name of the connection or null
 */
public static String getDriverClass(Connection conn){
  DatabaseConnection dbConn=SwitchHelpers.DATABASECONNECTION_SWITCH.doSwitch(conn);
  if (dbConn != null) {
    return dbConn.getDriverClass();
  }
  MDMConnection mdmConn=SwitchHelpers.MDMCONNECTION_SWITCH.doSwitch(conn);
  if (mdmConn != null) {
    return ""String_Node_Str"";
  }
  return null;
}","/** 
 * DOC xqliu Comment method ""getDriverClass"".
 * @param conn
 * @return driver class name of the connection or null
 */
public static String getDriverClass(Connection conn){
  DatabaseConnection dbConn=SwitchHelpers.DATABASECONNECTION_SWITCH.doSwitch(conn);
  if (dbConn != null) {
    String driverClassName=dbConn.getDriverClass();
    if (driverClassName == null) {
      SupportDBUrlType dbType=SupportDBUrlStore.getInstance().findDBTypeByName(dbConn.getDatabaseType());
      if (dbType != null) {
        driverClassName=dbType.getDbDriver();
      }
    }
    return driverClassName;
  }
  MDMConnection mdmConn=SwitchHelpers.MDMCONNECTION_SWITCH.doSwitch(conn);
  if (mdmConn != null) {
    return ""String_Node_Str"";
  }
  return null;
}",0.7286063569682152
138777,"@Override public boolean hasChildren(Object element){
  if (element instanceof IEcosCategory) {
    return true;
  }
  if (element instanceof IFolder) {
    List<Object> obsLs=Arrays.asList(super.getChildren(element));
    if (obsLs.size() == 1) {
      Object obj=(Object)obsLs.get(0);
      if (obj instanceof IFolder && ((IFolder)obj).getName().equals(PluginConstant.SVN_SUFFIX))       return false;
    }
  }
 else   if (element instanceof DQRecycleBinNode) {
    DQRecycleBinNode rbn=(DQRecycleBinNode)element;
    Object obj=rbn.getObject();
    if (obj instanceof IFolder) {
      try {
        return ((IFolder)obj).members().length > 0;
      }
 catch (      CoreException e) {
        log.error(e);
      }
    }
    return false;
  }
  return super.hasChildren(element);
}","@Override public boolean hasChildren(Object element){
  if (element instanceof IEcosCategory) {
    return true;
  }
  if (element instanceof IFolder) {
    if (ResourceManager.isExchangeFolder((IFolder)element)) {
      return true;
    }
    List<Object> obsLs=Arrays.asList(super.getChildren(element));
    if (obsLs.size() == 1) {
      Object obj=(Object)obsLs.get(0);
      if (obj instanceof IFolder && ((IFolder)obj).getName().equals(PluginConstant.SVN_SUFFIX))       return false;
    }
  }
 else   if (element instanceof DQRecycleBinNode) {
    DQRecycleBinNode rbn=(DQRecycleBinNode)element;
    Object obj=rbn.getObject();
    if (obj instanceof IFolder) {
      try {
        return ((IFolder)obj).members().length > 0;
      }
 catch (      CoreException e) {
        log.error(e);
      }
    }
    return false;
  }
  return super.hasChildren(element);
}",0.9473684210526316
138778,"@SuppressWarnings(""String_Node_Str"") @Override public boolean storeSqlResults(List<Object[]> objects){
  int nbColumns=2;
  if (hasDateGrainParameter()) {
    DateGrain dategrain=getParameters().getDateParameters().getDateAggregationType();
switch (dategrain) {
case DAY:
      nbColumns++;
case WEEK:
    nbColumns++;
case MONTH:
  nbColumns++;
case QUARTER:
nbColumns++;
case YEAR:
break;
default :
break;
}
}
if (objects.isEmpty()) {
if (log.isInfoEnabled()) {
log.info(""String_Node_Str"" + ""String_Node_Str"");
}
this.setValueToFreq(new HashMap<Object,Long>());
return true;
}
if (!checkResults(objects,nbColumns)) {
return false;
}
HashMap<Object,Long> mapVal2Freq=new HashMap<Object,Long>();
boolean debug=log.isDebugEnabled();
StringBuffer matrix=debug ? new StringBuffer() : null;
for (Object[] value2freq : objects) {
if (value2freq.length != nbColumns) {
log.error(""String_Node_Str"");
return false;
}
Object value=getValueFields(value2freq);
Long freq=Long.valueOf(String.valueOf(value2freq[nbColumns - 1]));
mapVal2Freq.put(value,freq);
if (debug) {
matrix.append(""String_Node_Str"").append(""String_Node_Str"").append(value).append(""String_Node_Str"").append(""String_Node_Str"").append(freq);
}
}
if (debug) {
log.debug(matrix);
}
this.setValueToFreq(mapVal2Freq);
return true;
}","@SuppressWarnings(""String_Node_Str"") @Override public boolean storeSqlResults(List<Object[]> objects){
  int nbColumns=2;
  if (hasDateGrainParameter()) {
    DateGrain dategrain=getParameters().getDateParameters().getDateAggregationType();
switch (dategrain) {
case DAY:
      nbColumns++;
case WEEK:
    nbColumns++;
case MONTH:
  nbColumns++;
case QUARTER:
nbColumns++;
case YEAR:
break;
default :
break;
}
}
if (objects.isEmpty()) {
if (log.isInfoEnabled()) {
log.info(""String_Node_Str"" + ""String_Node_Str"");
}
this.setValueToFreq(new HashMap<Object,Long>());
return true;
}
if (!checkResults(objects,nbColumns)) {
return false;
}
HashMap<Object,Long> mapVal2Freq=new HashMap<Object,Long>();
boolean debug=log.isDebugEnabled();
StringBuffer matrix=debug ? new StringBuffer() : null;
Long count=0l;
for (Object[] value2freq : objects) {
if (value2freq.length != nbColumns) {
log.error(""String_Node_Str"");
return false;
}
Object value=getValueFields(value2freq);
Long freq=Long.valueOf(String.valueOf(value2freq[nbColumns - 1]));
mapVal2Freq.put(value,freq);
if (debug) {
matrix.append(""String_Node_Str"").append(""String_Node_Str"").append(value).append(""String_Node_Str"").append(""String_Node_Str"").append(freq);
}
count=count + freq;
}
if (debug) {
log.debug(matrix);
}
this.setCount(count);
this.setValueToFreq(mapVal2Freq);
return true;
}",0.9782857142857144
138779,"@SuppressWarnings(""String_Node_Str"") @Override public boolean storeSqlResults(List<Object[]> objects){
  int nbColumns=2;
  if (hasDateGrainParameter()) {
    DateGrain dategrain=getParameters().getDateParameters().getDateAggregationType();
switch (dategrain) {
case DAY:
      nbColumns++;
case WEEK:
    nbColumns++;
case MONTH:
  nbColumns++;
case QUARTER:
nbColumns++;
case YEAR:
break;
default :
break;
}
}
if (objects.isEmpty()) {
if (log.isInfoEnabled()) {
log.info(""String_Node_Str"" + ""String_Node_Str"");
}
this.setValueToFreq(new HashMap<Object,Long>());
return true;
}
if (!checkResults(objects,nbColumns)) {
return false;
}
HashMap<Object,Long> mapVal2Freq=new HashMap<Object,Long>();
boolean debug=log.isDebugEnabled();
StringBuffer matrix=debug ? new StringBuffer() : null;
Long count=0l;
for (Object[] value2freq : objects) {
if (value2freq.length != nbColumns) {
log.error(""String_Node_Str"");
return false;
}
Object value=getValueFields(value2freq);
Long freq=Long.valueOf(String.valueOf(value2freq[nbColumns - 1]));
mapVal2Freq.put(value,freq);
if (debug) {
matrix.append(""String_Node_Str"").append(""String_Node_Str"").append(value).append(""String_Node_Str"").append(""String_Node_Str"").append(freq);
}
count=count + freq;
}
if (debug) {
log.debug(matrix);
}
this.setCount(count);
this.setValueToFreq(mapVal2Freq);
return true;
}","@SuppressWarnings(""String_Node_Str"") @Override public boolean storeSqlResults(List<Object[]> objects){
  int nbColumns=2;
  if (hasDateGrainParameter()) {
    DateGrain dategrain=getParameters().getDateParameters().getDateAggregationType();
switch (dategrain) {
case DAY:
      nbColumns++;
case WEEK:
    nbColumns++;
case MONTH:
  nbColumns++;
case QUARTER:
nbColumns++;
case YEAR:
break;
default :
break;
}
}
if (objects.isEmpty()) {
if (log.isInfoEnabled()) {
log.info(""String_Node_Str"" + ""String_Node_Str"");
}
this.setValueToFreq(new HashMap<Object,Long>());
return true;
}
if (!checkResults(objects,nbColumns)) {
return false;
}
HashMap<Object,Long> mapVal2Freq=new HashMap<Object,Long>();
boolean debug=log.isDebugEnabled();
StringBuffer matrix=debug ? new StringBuffer() : null;
for (Object[] value2freq : objects) {
if (value2freq.length != nbColumns) {
log.error(""String_Node_Str"");
return false;
}
Object value=getValueFields(value2freq);
Long freq=Long.valueOf(String.valueOf(value2freq[nbColumns - 1]));
mapVal2Freq.put(value,freq);
if (debug) {
matrix.append(""String_Node_Str"").append(""String_Node_Str"").append(value).append(""String_Node_Str"").append(""String_Node_Str"").append(freq);
}
}
if (debug) {
log.debug(matrix);
}
this.setValueToFreq(mapVal2Freq);
return true;
}",0.9782857142857144
138780,"/** 
 * DOC bZhou Comment method ""retrieveEObject"".
 * @param filePath
 * @param classfier
 * @return
 */
public static Object retrieveEObject(IPath filePath,EClass classfier){
  URI uri=URI.createFileURI(filePath.toOSString());
  Resource res=new ResourceSetImpl().getResource(uri,true);
  return EcoreUtil.getObjectByType(res.getContents(),classfier);
}","/** 
 * DOC bZhou Comment method ""retrieveEObject"".
 * @param filePath
 * @param classfier
 * @return
 */
public static Object retrieveEObject(IPath filePath,EClass classfier){
  if (isEObjectPathExited(filePath)) {
    URI uri;
    if (filePath.isAbsolute()) {
      uri=URI.createFileURI(filePath.toOSString());
    }
 else {
      uri=URI.createPlatformResourceURI(filePath.toOSString(),false);
    }
    Resource res=new ResourceSetImpl().getResource(uri,true);
    return EcoreUtil.getObjectByType(res.getContents(),classfier);
  }
  return null;
}",0.7555066079295154
138781,"/** 
 * DOC bZhou Comment method ""extractProjectLabel"". This method is to extract the project technical label.
 * @param property
 * @return
 */
public static String extractProjectLabel(Property property){
  User author=property.getAuthor();
  if (author != null && !author.eIsProxy()) {
    InternalEObject iAuthor=(InternalEObject)property.getAuthor();
    Resource projResource=iAuthor.eResource();
    if (projResource != null) {
      IPath projectPath=new Path(projResource.getURI().toFileString());
      if (projectPath.toFile().exists()) {
        Object projOBJ=EObjectHelper.retrieveEObject(projectPath,PropertiesPackage.eINSTANCE.getProject());
        if (projOBJ != null) {
          Project project=(Project)projOBJ;
          return project.getTechnicalLabel();
        }
      }
    }
  }
  return ReponsitoryContextBridge.PROJECT_DEFAULT_NAME;
}","/** 
 * DOC bZhou Comment method ""extractProjectLabel"". This method is to extract the project technical label.
 * @param property
 * @return
 */
public static String extractProjectLabel(Property property){
  User author=property.getAuthor();
  if (author != null && !author.eIsProxy()) {
    InternalEObject iAuthor=(InternalEObject)property.getAuthor();
    Resource projResource=iAuthor.eResource();
    if (projResource != null) {
      URI uri=projResource.getURI();
      String pathString=uri.isPlatform() ? uri.toPlatformString(false) : uri.toFileString();
      IPath projectPath=new Path(pathString);
      Object projOBJ=EObjectHelper.retrieveEObject(projectPath,PropertiesPackage.eINSTANCE.getProject());
      if (projOBJ != null) {
        Project project=(Project)projOBJ;
        return project.getTechnicalLabel();
      }
    }
  }
  return ReponsitoryContextBridge.PROJECT_DEFAULT_NAME;
}",0.861503674392312
138782,"private void setPropertyMetadata(ModelElement modelElement,Property property){
  User user=ReponsitoryContextBridge.getUser();
  if (user != null) {
    property.setAuthor(user);
  }
  String purpose=MetadataHelper.getPurpose(modelElement);
  String description=MetadataHelper.getDescription(modelElement);
  String version=MetadataHelper.getVersion(modelElement);
  String status=MetadataHelper.getDevStatus(modelElement);
  property.setId(EcoreUtil.generateUUID());
  property.setLabel(modelElement.getName());
  property.setPurpose(purpose);
  property.setDescription(description);
  property.setStatusCode(status);
  property.setVersion(version);
  EList<Information> informations=property.getInformations();
  InformationLevel maxLevel=null;
  for (  Information information : informations) {
    int value=information.getLevel().getValue();
    if (maxLevel == null || value > maxLevel.getValue()) {
      maxLevel=information.getLevel();
    }
  }
  property.setMaxInformationLevel(maxLevel);
}","private void setPropertyMetadata(ModelElement modelElement,Property property){
  String purpose=MetadataHelper.getPurpose(modelElement);
  String description=MetadataHelper.getDescription(modelElement);
  String version=MetadataHelper.getVersion(modelElement);
  String status=MetadataHelper.getDevStatus(modelElement);
  property.setId(EcoreUtil.generateUUID());
  property.setLabel(modelElement.getName());
  property.setPurpose(purpose);
  property.setDescription(description);
  property.setStatusCode(status);
  property.setVersion(version);
  EList<Information> informations=property.getInformations();
  InformationLevel maxLevel=null;
  for (  Information information : informations) {
    int value=information.getLevel().getValue();
    if (maxLevel == null || value > maxLevel.getValue()) {
      maxLevel=information.getLevel();
    }
  }
  property.setMaxInformationLevel(maxLevel);
}",0.9452054794520548
138783,"/** 
 * DOC bZhou Comment method ""createProperty"". Create and save a property from model element resource.
 * @param modelElement
 * @return
 */
public Property createProperty(ModelElement modelElement){
  Resource eResource=modelElement.eResource();
  if (eResource == null) {
    log.error(""String_Node_Str"");
    return null;
  }
  Property property=initProperty(modelElement);
  URI propURI=eResource.getURI().trimFileExtension().appendFileExtension(FactoriesUtil.PROPERTIES_EXTENSION);
  saveProperty(property,propURI);
  return property;
}","/** 
 * DOC bZhou Comment method ""createProperty"". Create and save a property from model element resource.
 * @param modelElement
 * @return
 */
public Property createProperty(ModelElement modelElement){
  Resource eResource=modelElement.eResource();
  if (eResource == null) {
    log.error(""String_Node_Str"");
    return null;
  }
  Property property=initProperty(modelElement);
  User user=ReponsitoryContextBridge.getUser();
  if (user != null) {
    property.setAuthor(user);
  }
  URI propURI=eResource.getURI().trimFileExtension().appendFileExtension(FactoriesUtil.PROPERTIES_EXTENSION);
  saveProperty(property,propURI);
  return property;
}",0.9128978224455612
138784,"protected Collection<Analysis> searchAllAnalysis(IFolder folder){
  Collection<Analysis> analyses=new ArrayList<Analysis>();
  try {
    for (    IResource resource : folder.members()) {
      if (resource.getType() == IResource.FOLDER) {
        analyses.addAll(searchAllAnalysis(folder.getFolder(resource.getName())));
        continue;
      }
      IFile file=(IFile)resource;
      if (file.getFileExtension().equals(FactoriesUtil.ANA)) {
        analyses.add(AnaResourceFileHelper.getInstance().findAnalysis(file));
      }
    }
  }
 catch (  CoreException e) {
    log.error(e);
  }
  return analyses;
}","protected Collection<Analysis> searchAllAnalysis(IFolder folder){
  Collection<Analysis> analyses=new ArrayList<Analysis>();
  ResourceSet resoruceSet=new ResourceSetImpl();
  try {
    for (    IResource resource : folder.members()) {
      if (resource.getType() == IResource.FOLDER) {
        analyses.addAll(searchAllAnalysis(folder.getFolder(resource.getName())));
        continue;
      }
      IFile file=(IFile)resource;
      if (file.getFileExtension().equals(FactoriesUtil.ANA)) {
        URI uri=URI.createPlatformResourceURI(file.getFullPath().toString(),false);
        Resource eResource=resoruceSet.getResource(uri,true);
        analyses.add((Analysis)eResource.getContents().get(0));
      }
    }
  }
 catch (  CoreException e) {
    log.error(e);
  }
  return analyses;
}",0.7783321454027085
138785,"@Override protected boolean doExecute() throws Exception {
  EMFUtil emfUtil=new EMFUtil();
  for (  File file : fileList) {
    if (file.isFile()) {
      URI uri=URI.createFileURI(file.getAbsolutePath());
      Resource resource=emfUtil.getResourceSet().getResource(uri,true);
      EObject eObject=resource.getContents().get(0);
      if (FactoriesUtil.isProvFile(uri.fileExtension())) {
        for (        EObject object : resource.getContents()) {
          if (object instanceof Connection) {
            eObject=object;
            break;
          }
        }
      }
      if (eObject != null) {
        if (eObject instanceof ModelElement) {
          ModelElement modelElement=(ModelElement)eObject;
          AElementPersistance writer=ElementWriterFactory.getInstance().create(uri.fileExtension());
          Property oldPropery=PropertyHelper.getProperty(modelElement);
          if (writer != null) {
            Property property=writer.initProperty(modelElement);
            if (oldPropery != null) {
              property.setAuthor(oldPropery.getAuthor());
              property.getItem().setState(oldPropery.getItem().getState());
            }
            computePath(property,file);
            URI propURI=resource.getURI().trimFileExtension().appendFileExtension(FactoriesUtil.PROPERTIES_EXTENSION);
            Resource propResource=emfUtil.getResourceSet().createResource(propURI);
            propResource.getContents().add(property);
            propResource.getContents().add(property.getItem());
            propResource.getContents().add(property.getItem().getState());
            EMFUtil.saveResource(propResource);
          }
 else {
            log.warn(""String_Node_Str"" + modelElement.getName() + ""String_Node_Str"");
          }
        }
 else {
          log.warn(""String_Node_Str"" + eObject.toString());
        }
      }
    }
  }
  emfUtil=null;
  return true;
}","@Override protected boolean doExecute() throws Exception {
  EMFUtil emfUtil=new EMFUtil();
  for (  File file : fileList) {
    if (file.isFile()) {
      URI uri=URI.createFileURI(file.getAbsolutePath());
      Resource resource=emfUtil.getResourceSet().getResource(uri,true);
      EObject eObject=resource.getContents().get(0);
      if (FactoriesUtil.isProvFile(uri.fileExtension())) {
        for (        EObject object : resource.getContents()) {
          if (object instanceof Connection) {
            eObject=object;
            break;
          }
        }
      }
      if (eObject != null) {
        if (eObject instanceof ModelElement) {
          ModelElement modelElement=(ModelElement)eObject;
          AElementPersistance writer=ElementWriterFactory.getInstance().create(uri.fileExtension());
          Property oldPropery=PropertyHelper.getProperty(modelElement);
          if (writer != null) {
            Property property=writer.initProperty(modelElement);
            if (oldPropery != null) {
              property.setId(oldPropery.getId());
              property.setAuthor(oldPropery.getAuthor());
              property.getItem().setState(oldPropery.getItem().getState());
            }
            computePath(property,file);
            URI propURI=resource.getURI().trimFileExtension().appendFileExtension(FactoriesUtil.PROPERTIES_EXTENSION);
            Resource propResource=emfUtil.getResourceSet().createResource(propURI);
            propResource.getContents().add(property);
            propResource.getContents().add(property.getItem());
            propResource.getContents().add(property.getItem().getState());
            EMFUtil.saveResource(propResource);
          }
 else {
            log.warn(""String_Node_Str"" + modelElement.getName() + ""String_Node_Str"");
          }
        }
 else {
          log.warn(""String_Node_Str"" + eObject.toString());
        }
      }
    }
  }
  emfUtil=null;
  return true;
}",0.9870734229576008
138786,"@Override protected boolean doExecute() throws Exception {
  IndicatorDefinition definition0=IndicatorDefinitionFileHelper.getSystemIndicatorByName(UNIQUE_COUNT);
  IndicatorDefinitionFileHelper.addSqlExpression(definition0,SYBASE,""String_Node_Str"");
  IndicatorDefinition definition1=IndicatorDefinitionFileHelper.getSystemIndicatorByName(DUPLICATE_COUNT);
  IndicatorDefinitionFileHelper.addSqlExpression(definition1,SYBASE,""String_Node_Str"");
  IndicatorDefinition definition2=IndicatorDefinitionFileHelper.getSystemIndicatorByName(BLANK_COUNT);
  IndicatorDefinitionFileHelper.addSqlExpression(definition2,SYBASE,""String_Node_Str"");
  return IndicatorDefinitionFileHelper.save(definition0) & IndicatorDefinitionFileHelper.save(definition1) & IndicatorDefinitionFileHelper.save(definition2);
}","@Override protected boolean doExecute() throws Exception {
  IndicatorDefinition definition0=IndicatorDefinitionFileHelper.getSystemIndicatorByName(UNIQUE_COUNT);
  IndicatorDefinition definition1=IndicatorDefinitionFileHelper.getSystemIndicatorByName(DUPLICATE_COUNT);
  IndicatorDefinition definition2=IndicatorDefinitionFileHelper.getSystemIndicatorByName(BLANK_COUNT);
  if (definition0 != null && definition1 != null && definition2 != null) {
    IndicatorDefinitionFileHelper.addSqlExpression(definition0,SYBASE,""String_Node_Str"");
    IndicatorDefinitionFileHelper.addSqlExpression(definition1,SYBASE,""String_Node_Str"");
    IndicatorDefinitionFileHelper.addSqlExpression(definition2,SYBASE,""String_Node_Str"");
    return IndicatorDefinitionFileHelper.save(definition0) & IndicatorDefinitionFileHelper.save(definition1) & IndicatorDefinitionFileHelper.save(definition2);
  }
  return false;
}",0.7303834808259587
138787,"/** 
 * DOC bZhou Comment method ""update"".
 * @param desFile
 * @throws IOException
 */
private void update(File desFile) throws IOException {
  String curProjectLabel=ResourceManager.getRootProjectName();
  if (!StringUtils.equals(projectName,curProjectLabel)) {
    String content=FileUtils.readFileToString(desFile,""String_Node_Str"");
    content=StringUtils.replace(content,""String_Node_Str"" + projectName + ""String_Node_Str"",""String_Node_Str"" + curProjectLabel + ""String_Node_Str"");
    FileUtils.writeStringToFile(desFile,content,""String_Node_Str"");
  }
  if (desFile.getName().endsWith(FactoriesUtil.PROPERTIES_EXTENSION)) {
    Property property=PropertyHelper.getProperty(desFile);
    User user=ReponsitoryContextBridge.getUser();
    if (user != null) {
      property.setAuthor(user);
    }
  }
}","/** 
 * DOC bZhou Comment method ""update"".
 * @param desFile
 * @throws IOException
 */
private void update(File desFile) throws IOException {
  String curProjectLabel=ResourceManager.getRootProjectName();
  if (!StringUtils.equals(projectName,curProjectLabel)) {
    String content=FileUtils.readFileToString(desFile,""String_Node_Str"");
    content=StringUtils.replace(content,""String_Node_Str"" + projectName + ""String_Node_Str"",""String_Node_Str"" + curProjectLabel + ""String_Node_Str"");
    FileUtils.writeStringToFile(desFile,content,""String_Node_Str"");
  }
  if (desFile.getName().endsWith(FactoriesUtil.PROPERTIES_EXTENSION)) {
    Property property=PropertyHelper.getProperty(desFile);
    User user=ReponsitoryContextBridge.getUser();
    if (user != null) {
      property.setAuthor(user);
    }
    EMFSharedResources.getInstance().saveResource(property.eResource());
  }
}",0.9567791592658378
138788,"public ItemRecord computeInput(IPath path){
  setBasePath(path);
  if (path != null) {
    versionFile=path.append(EResourceConstant.LIBRARIES.getPath()).append(VERSION_FILE_NAME).toFile();
    definitionFile=path.append(EResourceConstant.LIBRARIES.getPath()).append(DEFINITION_FILE_NAME).toFile();
    if (!versionFile.exists() || !definitionFile.exists()) {
      return null;
    }
    IPath projPath=path.append(""String_Node_Str"");
    if (projPath.toFile().exists()) {
      Object projOBJ=EObjectHelper.retrieveEObject(projPath,PropertiesPackage.eINSTANCE.getProject());
      if (projOBJ != null) {
        Project project=(Project)projOBJ;
        projectName=project.getTechnicalLabel();
      }
    }
 else {
      projectName=ReponsitoryContextBridge.PROJECT_DEFAULT_NAME;
    }
  }
  return new ItemRecord(path.toFile());
}","public ItemRecord computeInput(IPath path){
  setBasePath(path);
  if (path != null) {
    versionFile=path.append(EResourceConstant.LIBRARIES.getPath()).append(VERSION_FILE_NAME).toFile();
    definitionFile=path.append(EResourceConstant.LIBRARIES.getPath()).append(DEFINITION_FILE_NAME).toFile();
    if (!versionFile.exists()) {
      return null;
    }
    IPath projPath=path.append(""String_Node_Str"");
    if (projPath.toFile().exists()) {
      Object projOBJ=EObjectHelper.retrieveEObject(projPath,PropertiesPackage.eINSTANCE.getProject());
      if (projOBJ != null) {
        Project project=(Project)projOBJ;
        projectName=project.getTechnicalLabel();
      }
    }
 else {
      projectName=ReponsitoryContextBridge.PROJECT_DEFAULT_NAME;
    }
  }
  return new ItemRecord(path.toFile());
}",0.9829476248477468
138789,"/** 
 * DOC bZhou Comment method ""checkExisted"".
 * @param record
 */
private void checkExisted(ItemRecord record){
  Property property=record.getProperty();
  if (property != null) {
    IPath itemPath=PropertyHelper.getItemPath(property);
    IFile itemFile=ResourcesPlugin.getWorkspace().getRoot().getFile(itemPath);
    try {
      itemFile.getParent().refreshLocal(IResource.DEPTH_INFINITE,null);
    }
 catch (    CoreException e) {
    }
    String aString=record.getName();
    if (itemFile.exists()) {
      record.addError(""String_Node_Str"" + aString + ""String_Node_Str""+ itemFile.getFullPath().toString());
    }
  }
}","/** 
 * DOC bZhou Comment method ""checkExisted"".
 * @param record
 */
private void checkExisted(ItemRecord record){
  Property property=record.getProperty();
  if (property != null) {
    IPath itemPath=PropertyHelper.getItemPath(property);
    IFile itemFile=ResourcesPlugin.getWorkspace().getRoot().getFile(itemPath);
    try {
      itemFile.getParent().refreshLocal(IResource.DEPTH_INFINITE,null);
    }
 catch (    CoreException e) {
    }
    String aString=record.getName();
    if (itemFile.exists()) {
      ModelElementFileFactory.getResourceFileMap(itemFile).clear();
      URI itemURI=URI.createPlatformResourceURI(itemFile.getFullPath().toString(),false);
      EMFSharedResources.getInstance().unloadResource(itemURI.toString());
      URI propURI=itemURI.trimFileExtension().appendFileExtension(FactoriesUtil.PROPERTIES_EXTENSION);
      EMFSharedResources.getInstance().unloadResource(propURI.toString());
      record.addError(""String_Node_Str"" + aString + ""String_Node_Str""+ itemFile.getFullPath().toString());
    }
  }
}",0.7537447573397243
138790,"public void migration(IProgressMonitor monitor){
  List<IMigrationTask> modelTasks=new ArrayList<IMigrationTask>();
  if (versionFile != null && versionFile.exists()) {
    ProductVersion version=WorkspaceVersionHelper.getVesion(new Path(versionFile.getAbsolutePath()));
    Iterator<IMigrationTask> it=MigrationTaskManager.findWorkspaceTaskByType(MigrationTaskType.FILE,version).iterator();
    while (it.hasNext()) {
      IMigrationTask task=it.next();
      if (isModelTask(task)) {
        ((AbstractWorksapceUpdateTask)task).setWorkspacePath(basePath);
        modelTasks.add(task);
      }
 else {
        commonTasks.add(task);
      }
    }
  }
  if (!modelTasks.isEmpty()) {
    MigrationTaskManager.doMigrationTask(modelTasks,monitor);
  }
}","public void migration(IProgressMonitor monitor){
  List<IMigrationTask> modelTasks=new ArrayList<IMigrationTask>();
  if (versionFile != null && versionFile.exists()) {
    ProductVersion version=WorkspaceVersionHelper.getVesion(new Path(versionFile.getAbsolutePath()));
    List<IMigrationTask> taskList=MigrationTaskManager.findWorkspaceTaskByType(MigrationTaskType.FILE,version);
    if (!taskList.isEmpty()) {
      for (      IMigrationTask task : taskList) {
        if (isModelTask(task)) {
          ((AbstractWorksapceUpdateTask)task).setWorkspacePath(basePath);
          modelTasks.add(task);
        }
 else {
          commTasks.add(task);
        }
      }
    }
  }
  File file=basePath.append(EResourceConstant.LIBRARIES.getPath()).append(""String_Node_Str"").toFile();
  if (!modelTasks.isEmpty() && !file.exists()) {
    MigrationTaskManager.doMigrationTask(modelTasks,monitor);
    try {
      file.createNewFile();
    }
 catch (    IOException e) {
      ExceptionHandler.process(e);
    }
  }
}",0.7938844847112118
138791,"public void finish(ItemRecord[] records,IProgressMonitor monitor) throws IOException, CoreException {
  ItemRecord.clear();
  IFile defFile=ResourceManager.getLibrariesFolder().getFile(DEFINITION_FILE_NAME);
  if (definitionFile != null && definitionFile.exists()) {
    File defintionFile=defFile.getLocation().toFile();
    FilesUtils.copyFile(definitionFile,defintionFile);
  }
 else {
    if (!defFile.exists()) {
      DefinitionHandler.getInstance();
    }
  }
  ResourceService.refreshStructure();
  if (commonTasks != null) {
    MigrationTaskManager.doMigrationTask(commonTasks,monitor);
  }
  ProxyRepositoryViewObject.fetchAllRepositoryViewObjects(true);
}","public void finish(ItemRecord[] records,IProgressMonitor monitor) throws IOException, CoreException {
  ItemRecord.clear();
  IFile defFile=ResourceManager.getLibrariesFolder().getFile(DEFINITION_FILE_NAME);
  if (definitionFile != null && definitionFile.exists()) {
    File defintionFile=defFile.getLocation().toFile();
    FilesUtils.copyFile(definitionFile,defintionFile);
  }
  ResourceService.refreshStructure();
  if (!commTasks.isEmpty() && monitor != null) {
    MigrationTaskManager.doMigrationTask(commTasks,monitor);
  }
  ProxyRepositoryViewObject.fetchAllRepositoryViewObjects(true);
}",0.90521327014218
138792,"/** 
 * DOC bZhou Comment method ""initWorkspace"".
 */
private void initWorkspace(){
  ResourceService.initResourcePersistence();
  SQLExplorerPlugin.getDefault().initAllDrivers();
  ProxyRepositoryViewObject.fetchAllRepositoryViewObjects(Boolean.TRUE);
  Collection<Connection> providers=ProxyRepositoryViewObject.getAllDatabaseConnections();
  for (  DataProvider provider : providers) {
    CWMPlugin.getDefault().addConnetionAliasToSQLPlugin(provider);
  }
}","/** 
 * DOC bZhou Comment method ""initWorkspace"".
 */
private void initWorkspace(){
  ResourceService.initResourcePersistence();
  SQLExplorerPlugin.getDefault().initAllDrivers();
  ProxyRepositoryViewObject.fetchAllRepositoryViewObjects(Boolean.TRUE);
  Collection<Connection> providers=ProxyRepositoryViewObject.getAllDatabaseConnections();
  for (  DataProvider provider : providers) {
    CWMPlugin.getDefault().addConnetionAliasToSQLPlugin(provider);
  }
  IFile defFile=ResourceManager.getLibrariesFolder().getFile(DefinitionHandler.FILENAME);
  if (!defFile.exists()) {
    DefinitionHandler.getInstance();
  }
}",0.8537037037037037
138793,"@Override public boolean select(Viewer viewer,Object parentElement,Object element){
  if (element instanceof IFile) {
    IFile model=(IFile)element;
    Property property=PropertyHelper.getProperty(model);
    if (null != property && property.getItem().getState().isDeleted()) {
      return false;
    }
  }
  return true;
}","@Override public boolean select(Viewer viewer,Object parentElement,Object element){
  if (element instanceof IFile) {
    IFile model=(IFile)element;
    Property property=PropertyHelper.getProperty(model);
    if (null != property && property.getItem().getState().isDeleted()) {
      return false;
    }
  }
  if (element instanceof RepositoryObject) {
    RepositoryObject obj=(RepositoryObject)element;
    Property property=obj.getProperty();
    if (null != property && property.getItem().getState().isDeleted()) {
      return false;
    }
  }
  return true;
}",0.7010078387458006
138794,"public void createControl(Composite parent){
  Composite container=new Composite(parent,SWT.NONE);
  GridLayout layout=new GridLayout();
  container.setLayout(layout);
  Label nameLabel=new Label(container,SWT.NONE);
  nameLabel.setText(nameLabTxt);
  createMetaDataTree(container);
  setControl(container);
  addFilters(new EMFObjFilter(),new DQFolderFliter(true),new TDQEEConnectionFolderFilter());
  addListeners();
}","public void createControl(Composite parent){
  Composite container=new Composite(parent,SWT.NONE);
  GridLayout layout=new GridLayout();
  container.setLayout(layout);
  Label nameLabel=new Label(container,SWT.NONE);
  nameLabel.setText(nameLabTxt);
  createMetaDataTree(container);
  setControl(container);
  addFilters(new EMFObjFilter(),new DQFolderFliter(true),new TDQEEConnectionFolderFilter(),new RecycleBinFilter());
  addListeners();
}",0.9733487833140207
138795,"/** 
 * DOC xqliu Comment method ""updateAnalysisClientDependencyConnection"". bug 14014
 * @param analysis
 */
public void updateAnalysisClientDependencyConnection(Analysis analysis){
  List<Dependency> realDependency=new ArrayList<Dependency>();
  EList<Dependency> clientDependency=analysis.getClientDependency();
  DataManager connection=analysis.getContext().getConnection();
  if (clientDependency != null) {
    for (    Dependency dependency : clientDependency) {
      EList<ModelElement> supplier=dependency.getSupplier();
      if (supplier != null && supplier.size() > 0) {
        ModelElement modelElement=supplier.get(0);
        if (modelElement != null) {
          if (modelElement instanceof Connection) {
            if (modelElement.equals(connection)) {
              realDependency.add(dependency);
            }
          }
 else {
            realDependency.add(dependency);
          }
        }
      }
    }
    clientDependency.clear();
    clientDependency.addAll(realDependency);
  }
}","/** 
 * DOC xqliu Comment method ""updateAnalysisClientDependencyConnection"". bug 14014
 * @param analysis
 */
public void updateAnalysisClientDependencyConnection(Analysis analysis){
  List<Dependency> realDependency=new ArrayList<Dependency>();
  EList<Dependency> clientDependency=analysis.getClientDependency();
  DataManager connection=analysis.getContext().getConnection();
  if (clientDependency != null) {
    for (    Dependency dependency : clientDependency) {
      if (dependency.eIsProxy()) {
        dependency=(Dependency)EObjectHelper.resolveObject(dependency);
      }
      EList<ModelElement> supplier=dependency.getSupplier();
      if (supplier != null && supplier.size() > 0) {
        ModelElement modelElement=supplier.get(0);
        if (modelElement != null) {
          if (modelElement instanceof Connection) {
            if (modelElement.equals(connection)) {
              realDependency.add(dependency);
            }
          }
 else {
            realDependency.add(dependency);
          }
        }
      }
    }
    clientDependency.clear();
    clientDependency.addAll(realDependency);
  }
}",0.9463369108726084
138796,"/** 
 * DOC mzhao Get all metadata connections.
 * @return
 */
public static List<Connection> getAllMetadataConnections(){
  List<Connection> metadataConns=new ArrayList<Connection>();
  metadataConns.addAll(getDBConnectionInstance().getAllElements());
  metadataConns.addAll(getMDMConnectionInstance().getAllElements());
  return metadataConns;
}","/** 
 * DOC yyi Get all metadata connections.
 * @return
 */
public static List<Connection> getAllMetadataConnections(boolean excludeRecycleBin){
  List<Connection> connections=new ArrayList<Connection>();
  if (excludeRecycleBin) {
    for (    Connection con : getAllMetadataConnections()) {
      if (null == con.eResource()) {
        con=(Connection)EObjectHelper.resolveObject(con);
      }
      if (null != con.eResource() && !PropertyHelper.getProperty(con).getItem().getState().isDeleted()) {
        connections.add(con);
      }
    }
  }
  return connections;
}",0.3170466883821932
138797,"protected void reloadDataproviderAndFillConnCombo(){
  Collection<Connection> connections=ProxyRepositoryViewObject.getAllMetadataConnections();
  int index=0;
  connCombo.removeAll();
  for (  Connection prov : connections) {
    connCombo.add(prov.getName(),index);
    connCombo.setData(prov.getName(),index);
    connCombo.setData(index + ""String_Node_Str"",prov);
    index++;
  }
  if (index > 0) {
    connCombo.select(0);
  }
}","protected void reloadDataproviderAndFillConnCombo(){
  Collection<Connection> connections=ProxyRepositoryViewObject.getAllMetadataConnections(true);
  int index=0;
  connCombo.removeAll();
  for (  Connection prov : connections) {
    connCombo.add(prov.getName(),index);
    connCombo.setData(prov.getName(),index);
    connCombo.setData(index + ""String_Node_Str"",prov);
    index++;
  }
  if (index > 0) {
    connCombo.select(0);
  }
}",0.9954128440366972
138798,"public Date getOrder(){
  return createDate(2010,07,06);
}","public Date getOrder(){
  return createDate(2010,06,20);
}",0.9655172413793104
138799,"private void tansferFile(File parentFolder) throws Exception {
  if (!parentFolder.exists()) {
    return;
  }
  List<File> fileList=new ArrayList<File>();
  FilesUtils.getAllFilesFromFolder(parentFolder,fileList,nonPropertyFileFilter);
  for (  File propFile : fileList) {
    URI uri=URI.createFileURI(propFile.getAbsolutePath());
    Resource resource=resourceSet.getResource(uri,true);
    Property property=(Property)EcoreUtil.getObjectByType(resource.getContents(),PropertiesPackage.eINSTANCE.getProperty());
    if (property != null) {
      Item item=property.getItem();
      if (item instanceof ConnectionItem) {
        Connection conn=((ConnectionItem)item).getConnection();
        property.setLabel(conn.getName());
      }
      IPath path=new Path(item.getState().getPath());
      if (ProxyRepositoryFactory.getInstance().getFolderItem(ProjectManager.getInstance().getCurrentProject(),ERepositoryObjectType.getItemType(item),path) == null) {
        ProxyRepositoryFactory.getInstance().createFolder(ERepositoryObjectType.getItemType(item),path.removeLastSegments(1),path.lastSegment());
      }
      ProxyRepositoryFactory.getInstance().create(item,path,true);
    }
  }
}","private void tansferFile(File parentFolder) throws Exception {
  if (!parentFolder.exists()) {
    return;
  }
  List<File> fileList=new ArrayList<File>();
  FilesUtils.getAllFilesFromFolder(parentFolder,fileList,nonPropertyFileFilter);
  for (  File propFile : fileList) {
    URI uri=URI.createFileURI(propFile.getAbsolutePath());
    Resource resource=resourceSet.getResource(uri,true);
    Property property=(Property)EcoreUtil.getObjectByType(resource.getContents(),PropertiesPackage.eINSTANCE.getProperty());
    if (property != null) {
      Item item=property.getItem();
      if (item instanceof ConnectionItem) {
        String fileName=propFile.getName();
        int lastIndex=fileName.lastIndexOf(""String_Node_Str"");
        if (lastIndex > 0) {
          fileName=fileName.substring(0,lastIndex);
        }
 else {
          fileName=new Path(fileName).removeFileExtension().lastSegment();
        }
        property.setLabel(fileName);
      }
      IPath path=new Path(item.getState().getPath());
      if (ProxyRepositoryFactory.getInstance().getFolderItem(ProjectManager.getInstance().getCurrentProject(),ERepositoryObjectType.getItemType(item),path) == null) {
        ProxyRepositoryFactory.getInstance().createFolder(ERepositoryObjectType.getItemType(item),path.removeLastSegments(1),path.lastSegment());
      }
      ProxyRepositoryFactory.getInstance().create(item,path,true);
    }
  }
}",0.8682289665770265
138800,"@Override protected boolean doExecute() throws Exception {
  EMFUtil emfUtil=new EMFUtil();
  for (  File file : fileList) {
    if (file.isFile()) {
      URI uri=URI.createFileURI(file.getAbsolutePath());
      System.out.println(""String_Node_Str"" + uri.toString());
      Resource resource=emfUtil.getResourceSet().getResource(uri,true);
      EObject eObject=resource.getContents().get(0);
      if (FactoriesUtil.isProvFile(uri.fileExtension())) {
        for (        EObject object : resource.getContents()) {
          if (object instanceof Connection) {
            eObject=object;
            break;
          }
        }
      }
      if (eObject != null) {
        if (eObject instanceof ModelElement) {
          ModelElement modelElement=(ModelElement)eObject;
          AElementPersistance writer=ElementWriterFactory.getInstance().create(uri.fileExtension());
          Property oldPropery=PropertyHelper.getProperty(modelElement);
          if (writer != null) {
            Property property=writer.initProperty(modelElement);
            if (oldPropery != null) {
              property.setAuthor(oldPropery.getAuthor());
              property.getItem().setState(oldPropery.getItem().getState());
            }
            computePath(property,file);
            URI propURI=resource.getURI().trimFileExtension().appendFileExtension(FactoriesUtil.PROPERTIES_EXTENSION);
            Resource propResource=emfUtil.getResourceSet().createResource(propURI);
            propResource.getContents().add(property);
            propResource.getContents().add(property.getItem());
            propResource.getContents().add(property.getItem().getState());
            EMFUtil.saveResource(propResource);
          }
 else {
            log.warn(""String_Node_Str"" + modelElement.getName() + ""String_Node_Str"");
          }
        }
 else {
          log.warn(""String_Node_Str"" + eObject.toString());
        }
      }
    }
  }
  emfUtil=null;
  return true;
}","@Override protected boolean doExecute() throws Exception {
  EMFUtil emfUtil=new EMFUtil();
  for (  File file : fileList) {
    if (file.isFile()) {
      URI uri=URI.createFileURI(file.getAbsolutePath());
      Resource resource=emfUtil.getResourceSet().getResource(uri,true);
      EObject eObject=resource.getContents().get(0);
      if (FactoriesUtil.isProvFile(uri.fileExtension())) {
        for (        EObject object : resource.getContents()) {
          if (object instanceof Connection) {
            eObject=object;
            break;
          }
        }
      }
      if (eObject != null) {
        if (eObject instanceof ModelElement) {
          ModelElement modelElement=(ModelElement)eObject;
          AElementPersistance writer=ElementWriterFactory.getInstance().create(uri.fileExtension());
          Property oldPropery=PropertyHelper.getProperty(modelElement);
          if (writer != null) {
            Property property=writer.initProperty(modelElement);
            if (oldPropery != null) {
              property.setAuthor(oldPropery.getAuthor());
              property.getItem().setState(oldPropery.getItem().getState());
            }
            computePath(property,file);
            URI propURI=resource.getURI().trimFileExtension().appendFileExtension(FactoriesUtil.PROPERTIES_EXTENSION);
            Resource propResource=emfUtil.getResourceSet().createResource(propURI);
            propResource.getContents().add(property);
            propResource.getContents().add(property.getItem());
            propResource.getContents().add(property.getItem().getState());
            EMFUtil.saveResource(propResource);
          }
 else {
            log.warn(""String_Node_Str"" + modelElement.getName() + ""String_Node_Str"");
          }
        }
 else {
          log.warn(""String_Node_Str"" + eObject.toString());
        }
      }
    }
  }
  emfUtil=null;
  return true;
}",0.984020618556701
138801,"public void write(ItemRecord[] records,IProgressMonitor monitor){
  if (monitor == null) {
    monitor=new NullProgressMonitor();
  }
  try {
    for (    ItemRecord record : records) {
      if (monitor.isCanceled()) {
        break;
      }
      Map<IPath,IPath> toImportMap=mapping(record);
      monitor.subTask(""String_Node_Str"" + record.getName());
      if (record.isValid()) {
        log.info(""String_Node_Str"" + record.getFile().getAbsolutePath());
        ModelElement element=record.getElement();
        if (element != null && element instanceof Connection) {
          Property property=record.getProperty();
          String fileName=record.getFile().getName();
          fileName=fileName.substring(0,fileName.lastIndexOf(""String_Node_Str""));
          property.setLabel(fileName);
          IPath statePath;
          ItemState state=property.getItem().getState();
          if (state != null && state.getPath() != null) {
            statePath=new Path(state.getPath());
          }
 else {
            statePath=Path.EMPTY;
          }
          ProxyRepositoryFactory.getInstance().create(property.getItem(),statePath);
        }
 else {
          for (          IPath resPath : toImportMap.keySet()) {
            IPath desPath=toImportMap.get(resPath);
            write(resPath,desPath);
          }
        }
      }
 else {
        for (        String error : record.getErrors()) {
          log.error(error);
        }
      }
      monitor.worked(1);
    }
    finish(records,monitor);
  }
 catch (  Exception e) {
    log.error(e,e);
  }
}","public void write(ItemRecord[] records,IProgressMonitor monitor){
  if (monitor == null) {
    monitor=new NullProgressMonitor();
  }
  try {
    for (    ItemRecord record : records) {
      if (monitor.isCanceled()) {
        break;
      }
      Map<IPath,IPath> toImportMap=mapping(record);
      monitor.subTask(""String_Node_Str"" + record.getName());
      if (record.isValid()) {
        log.info(""String_Node_Str"" + record.getFile().getAbsolutePath());
        ModelElement element=record.getElement();
        if (element != null && element instanceof Connection) {
          Property property=record.getProperty();
          String fileName=record.getFile().getName();
          int lastIndex=fileName.lastIndexOf(""String_Node_Str"");
          if (lastIndex > 0) {
            fileName=fileName.substring(0,lastIndex);
          }
 else {
            fileName=new Path(fileName).removeFileExtension().lastSegment();
          }
          IPath statePath;
          ItemState state=property.getItem().getState();
          if (state != null && state.getPath() != null) {
            statePath=new Path(state.getPath());
          }
 else {
            statePath=Path.EMPTY;
          }
          ProxyRepositoryFactory.getInstance().create(property.getItem(),statePath);
        }
 else {
          for (          IPath resPath : toImportMap.keySet()) {
            IPath desPath=toImportMap.get(resPath);
            write(resPath,desPath);
          }
        }
      }
 else {
        for (        String error : record.getErrors()) {
          log.error(error);
        }
      }
      monitor.worked(1);
    }
    finish(records,monitor);
  }
 catch (  Exception e) {
    log.error(e,e);
  }
}",0.9150885766646304
138802,"@Override public void loadChildren(){
  ColumnSet columnSet=SwitchHelpers.COLUMN_SET_SWITCH.doSwitch((EObject)getParent());
  if (columnSet != null) {
    List<TdColumn> columnList=null;
    if (FILTER_FLAG) {
      String columnFilter=ColumnHelper.getColumnFilter(columnSet);
      columnList=filterColumns(ColumnSetHelper.getColumns(columnSet),columnFilter);
    }
 else {
      columnList=ColumnSetHelper.getColumns(columnSet);
    }
    if (columnList.size() > 0) {
      if (columnList.size() > COLUMN_MAX) {
        this.setChildren(null);
        MessageUI.openWarning(DefaultMessagesImpl.getString(""String_Node_Str"",COLUMN_MAX));
      }
 else {
        this.setChildren(columnList.toArray());
      }
      return;
    }
 else {
      if (FILTER_FLAG) {
        this.setChildren(null);
        if (ColumnSetHelper.getColumns(columnSet).size() > 0) {
          return;
        }
      }
    }
    Package parentCatalogOrSchema=ColumnSetHelper.getParentCatalogOrSchema(columnSet);
    if (parentCatalogOrSchema == null) {
      return;
    }
    Connection conn=DataProviderHelper.getTdDataProvider(parentCatalogOrSchema);
    if (conn == null) {
      return;
    }
    try {
      columnList=DqRepositoryViewService.getColumns(conn,columnSet,null,true);
      if (columnList.size() > COLUMN_MAX) {
        this.setChildren(null);
        MessageUI.openWarning(DefaultMessagesImpl.getString(""String_Node_Str"",COLUMN_MAX));
        return;
      }
    }
 catch (    TalendException e) {
      MessageBoxExceptionHandler.process(e);
    }
    this.setChildren(columnList.toArray());
    ProxyRepositoryViewObject.fetchAllDBRepositoryViewObjects(Boolean.TRUE);
    ProxyRepositoryViewObject.save(conn);
  }
  super.loadChildren();
}","@Override public void loadChildren(){
  ColumnSet columnSet=SwitchHelpers.COLUMN_SET_SWITCH.doSwitch((EObject)getParent());
  if (columnSet != null) {
    List<TdColumn> columnList=null;
    if (FILTER_FLAG) {
      String columnFilter=ColumnHelper.getColumnFilter(columnSet);
      columnList=filterColumns(ColumnSetHelper.getColumns(columnSet),columnFilter);
    }
 else {
      columnList=ColumnSetHelper.getColumns(columnSet);
    }
    if (columnList.size() > 0) {
      if (columnList.size() > COLUMN_MAX) {
        this.setChildren(null);
        MessageUI.openWarning(DefaultMessagesImpl.getString(""String_Node_Str"",COLUMN_MAX));
      }
 else {
        this.setChildren(columnList.toArray());
      }
      return;
    }
 else {
      if (FILTER_FLAG) {
        this.setChildren(null);
        if (ColumnSetHelper.getColumns(columnSet).size() > 0) {
          return;
        }
      }
    }
    if (columnSet.eIsProxy()) {
      columnSet=(ColumnSet)EObjectHelper.resolveObject(columnSet);
    }
    Package parentCatalogOrSchema=ColumnSetHelper.getParentCatalogOrSchema(columnSet);
    if (parentCatalogOrSchema == null) {
      return;
    }
    Connection conn=ConnectionHelper.getTdDataProvider(parentCatalogOrSchema);
    if (conn == null) {
      return;
    }
    try {
      columnList=DqRepositoryViewService.getColumns(conn,columnSet,null,true);
      if (columnList.size() > COLUMN_MAX) {
        this.setChildren(null);
        MessageUI.openWarning(DefaultMessagesImpl.getString(""String_Node_Str"",COLUMN_MAX));
        return;
      }
    }
 catch (    TalendException e) {
      MessageBoxExceptionHandler.process(e);
    }
    this.setChildren(columnList.toArray());
    ProxyRepositoryViewObject.save(conn);
  }
  super.loadChildren();
}",0.9417142857142856
138803,"/** 
 * Replace a path String to """" in logicalDelete.txt.
 * @param regex
 * @param fileName
 * @param replacement
 * @throws IOExceptio
 */
public static void replaceInFile(String oldString,String newString){
  InputStream in=null;
  InputStreamReader inRead=null;
  try {
    in=new FileInputStream(filePath);
    StringBuffer buffer=new StringBuffer();
    inRead=new InputStreamReader(in);
    BufferedReader buf=new BufferedReader(inRead);
    String line;
    String newLine;
    while ((line=buf.readLine()) != null) {
      if (!line.equals(oldString)) {
        newLine=line;
      }
 else {
        newLine=line.replace(oldString,newString);
        for (int i=0; i < delLs.size(); i++) {
          String[] es=(String[])delLs.get(i);
          if ((es[0] + ""String_Node_Str"" + es[1]).equals(oldString)) {
            delLs.remove(es);
            break;
          }
        }
      }
      if (!newLine.equals(PluginConstant.EMPTY_STRING)) {
        buffer.append(newLine).append(""String_Node_Str"");
      }
    }
    OutputStream os=new FileOutputStream(filePath);
    os.write(buffer.toString().getBytes());
    os.close();
  }
 catch (  Exception exc) {
    log.error(exc,exc);
  }
 finally {
    try {
      in.close();
      inRead.close();
    }
 catch (    IOException e) {
      log.error(e,e);
    }
  }
}","/** 
 * Replace a path String to """" in logicalDelete.txt.
 * @param regex
 * @param fileName
 * @param replacement
 * @throws IOExceptio
 */
public static void replaceInFile(String oldString,String newString){
  File file=new Path(filePath).toFile();
  if (!file.exists()) {
    return;
  }
  InputStream in=null;
  InputStreamReader inRead=null;
  try {
    in=new FileInputStream(filePath);
    StringBuffer buffer=new StringBuffer();
    inRead=new InputStreamReader(in);
    BufferedReader buf=new BufferedReader(inRead);
    String line;
    String newLine;
    while ((line=buf.readLine()) != null) {
      if (!line.equals(oldString)) {
        newLine=line;
      }
 else {
        newLine=line.replace(oldString,newString);
        for (int i=0; i < delLs.size(); i++) {
          String[] es=(String[])delLs.get(i);
          if ((es[0] + ""String_Node_Str"" + es[1]).equals(oldString)) {
            delLs.remove(es);
            break;
          }
        }
      }
      if (!newLine.equals(PluginConstant.EMPTY_STRING)) {
        buffer.append(newLine).append(""String_Node_Str"");
      }
    }
    OutputStream os=new FileOutputStream(filePath);
    os.write(buffer.toString().getBytes());
    os.close();
  }
 catch (  Exception exc) {
    log.error(exc,exc);
  }
 finally {
    try {
      in.close();
      inRead.close();
    }
 catch (    IOException e) {
      log.error(e,e);
    }
  }
}",0.9703405346027096
138804,"private void saveConnectionInfo() throws DataprofilerCoreException {
  ReturnCode returnCode=ProxyRepositoryViewObject.save(connection);
  if (returnCode.isOk()) {
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + connection.eResource().getURI().toFileString() + ""String_Node_Str"");
    }
  }
 else {
    throw new DataprofilerCoreException(DefaultMessagesImpl.getString(""String_Node_Str"",connection.eResource().getURI().toFileString(),returnCode.getMessage()));
  }
}","private void saveConnectionInfo() throws DataprofilerCoreException {
  if (connection != null && connection.eIsProxy()) {
    connection=(Connection)EObjectHelper.resolveObject(connection);
  }
  ReturnCode returnCode=ProxyRepositoryViewObject.save(connection);
  if (returnCode.isOk()) {
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + connection.eResource().getURI().toFileString() + ""String_Node_Str"");
    }
  }
 else {
    throw new DataprofilerCoreException(DefaultMessagesImpl.getString(""String_Node_Str"",connection.eResource().getURI().toFileString(),returnCode.getMessage()));
  }
}",0.886052871467639
138805,"/** 
 * DOC bZhou Comment method ""openInSqlEditor"".
 * @param tdDataProvider
 * @param query
 * @param editorName
 * @return the specified sql editor.
 */
public SQLEditor openInSqlEditor(Connection tdDataProvider,String query,String editorName){
  if (editorName == null) {
    editorName=String.valueOf(SQLExplorerPlugin.getDefault().getEditorSerialNo());
  }
  SQLExplorerPlugin sqlPlugin=SQLExplorerPlugin.getDefault();
  AliasManager aliasManager=sqlPlugin.getAliasManager();
  Alias alias=aliasManager.getAlias(tdDataProvider.getName());
  if (alias == null) {
    Collection<Connection> allDataProviders=ProxyRepositoryViewObject.getAllDatabaseConnections();
    for (    Connection dataProvider : allDataProviders) {
      if (dataProvider == tdDataProvider) {
        CWMPlugin.getDefault().addConnetionAliasToSQLPlugin(dataProvider);
        openInSqlEditor(tdDataProvider,query,editorName);
      }
    }
  }
 else {
    try {
      Connection connection=SwitchHelpers.CONNECTION_SWITCH.doSwitch(tdDataProvider);
      if (connection != null) {
        String userName=ConnectionUtils.getUsernameDefault(connection);
        SQLEditorInput input=new SQLEditorInput(""String_Node_Str"" + alias.getName() + ""String_Node_Str""+ editorName+ ""String_Node_Str"");
        input.setUser(alias.getUser(userName));
        IWorkbenchPage page=SQLExplorerPlugin.getDefault().getActivePage();
        SQLEditor editorPart=(SQLEditor)page.openEditor((IEditorInput)input,SQLEditor.class.getName());
        editorPart.setText(query);
        return editorPart;
      }
    }
 catch (    PartInitException e) {
      log.error(e,e);
    }
  }
  return null;
}","/** 
 * DOC bZhou Comment method ""openInSqlEditor"".
 * @param tdDataProvider
 * @param query
 * @param editorName
 * @return the specified sql editor.
 */
public SQLEditor openInSqlEditor(Connection tdDataProvider,String query,String editorName){
  if (editorName == null) {
    editorName=String.valueOf(SQLExplorerPlugin.getDefault().getEditorSerialNo());
  }
  SQLExplorerPlugin sqlPlugin=SQLExplorerPlugin.getDefault();
  AliasManager aliasManager=sqlPlugin.getAliasManager();
  Alias alias=aliasManager.getAlias(tdDataProvider.getName());
  if (alias == null) {
    Collection<Connection> allDataProviders=ProxyRepositoryViewObject.getAllDatabaseConnections();
    for (    Connection dataProvider : allDataProviders) {
      if (dataProvider.getId().equals(tdDataProvider.getId())) {
        CWMPlugin.getDefault().addConnetionAliasToSQLPlugin(dataProvider);
        openInSqlEditor(tdDataProvider,query,editorName);
      }
    }
  }
 else {
    try {
      Connection connection=SwitchHelpers.CONNECTION_SWITCH.doSwitch(tdDataProvider);
      if (connection != null) {
        String userName=ConnectionUtils.getUsernameDefault(connection);
        SQLEditorInput input=new SQLEditorInput(""String_Node_Str"" + alias.getName() + ""String_Node_Str""+ editorName+ ""String_Node_Str"");
        input.setUser(alias.getUser(userName));
        IWorkbenchPage page=SQLExplorerPlugin.getDefault().getActivePage();
        SQLEditor editorPart=(SQLEditor)page.openEditor((IEditorInput)input,SQLEditor.class.getName());
        editorPart.setText(query);
        return editorPart;
      }
    }
 catch (    PartInitException e) {
      log.error(e,e);
    }
  }
  return null;
}",0.9912781954887218
138806,"public void migration(IProgressMonitor monitor){
  List<IMigrationTask> modelTasks=new ArrayList<IMigrationTask>();
  if (versionFile != null && versionFile.exists()) {
    ProductVersion version=WorkspaceVersionHelper.getVesion(new Path(versionFile.getAbsolutePath()));
    Iterator<IMigrationTask> it=MigrationTaskManager.findWorkspaceTaskByType(MigrationTaskType.FILE,version).iterator();
    while (it.hasNext()) {
      IMigrationTask task=it.next();
      if (isModelTask(task)) {
        ((AbstractWorksapceUpdateTask)task).setWorkspacePath(basePath);
        modelTasks.add(task);
      }
 else {
        commonTasks.add(task);
      }
    }
  }
  if (!modelTasks.isEmpty()) {
    MigrationTaskManager.doMigrationTask(modelTasks,monitor);
    WorkspaceVersionHelper.storeVersion(versionFile);
  }
}","public void migration(IProgressMonitor monitor){
  List<IMigrationTask> modelTasks=new ArrayList<IMigrationTask>();
  if (versionFile != null && versionFile.exists()) {
    ProductVersion version=WorkspaceVersionHelper.getVesion(new Path(versionFile.getAbsolutePath()));
    Iterator<IMigrationTask> it=MigrationTaskManager.findWorkspaceTaskByType(MigrationTaskType.FILE,version).iterator();
    while (it.hasNext()) {
      IMigrationTask task=it.next();
      if (isModelTask(task)) {
        ((AbstractWorksapceUpdateTask)task).setWorkspacePath(basePath);
        modelTasks.add(task);
      }
 else {
        commonTasks.add(task);
      }
    }
  }
  if (!modelTasks.isEmpty()) {
    MigrationTaskManager.doMigrationTask(modelTasks,monitor);
  }
}",0.9653401797175868
138807,"public void finish(ItemRecord[] records,IProgressMonitor monitor) throws IOException, CoreException {
  ItemRecord.clear();
  IFile defFile=ResourceManager.getLibrariesFolder().getFile(DEFINITION_FILE_NAME);
  if (definitionFile != null && definitionFile.exists()) {
    File defintionFile=defFile.getLocation().toFile();
    FilesUtils.copyFile(definitionFile,defintionFile);
  }
 else {
    if (!defFile.exists()) {
      DefinitionHandler.getInstance();
    }
  }
  ResourceService.refreshStructure();
  if (commonTasks != null) {
    MigrationTaskManager.doMigrationTask(commonTasks,monitor);
  }
}","public void finish(ItemRecord[] records,IProgressMonitor monitor) throws IOException, CoreException {
  ItemRecord.clear();
  IFile defFile=ResourceManager.getLibrariesFolder().getFile(DEFINITION_FILE_NAME);
  if (definitionFile != null && definitionFile.exists()) {
    File defintionFile=defFile.getLocation().toFile();
    FilesUtils.copyFile(definitionFile,defintionFile);
  }
 else {
    if (!defFile.exists()) {
      DefinitionHandler.getInstance();
    }
  }
  ResourceService.refreshStructure();
  if (commonTasks != null) {
    MigrationTaskManager.doMigrationTask(commonTasks,monitor);
  }
  ProxyRepositoryViewObject.fetchAllRepositoryViewObjects(true);
}",0.9487785657998424
138808,"@Override protected boolean doExecute() throws Exception {
  File anaFolder=getWorkspacePath().append(EResourceConstant.ANALYSIS.getPath()).toFile();
  List<File> fileList=new ArrayList<File>();
  FilesUtils.getAllFilesFromFolder(anaFolder,fileList,anaFileFilter);
  for (  File file : fileList) {
    if (file.exists()) {
      try {
        String content=FileUtils.readFileToString(file,EMFUtil.ENCODING);
        content=StringUtils.replace(content,""String_Node_Str"",""String_Node_Str"");
        content=StringUtils.replace(content,""String_Node_Str"",""String_Node_Str"");
        FileUtils.writeStringToFile(file,content,EMFUtil.ENCODING);
      }
 catch (      IOException e) {
        return false;
      }
    }
  }
  return true;
}","@Override protected boolean doExecute() throws Exception {
  File anaFolder=getWorkspacePath().append(EResourceConstant.ANALYSIS.getPath()).toFile();
  List<File> fileList=new ArrayList<File>();
  FilesUtils.getAllFilesFromFolder(anaFolder,fileList,anaFileFilter);
  for (  File file : fileList) {
    if (file.exists()) {
      try {
        String content=FileUtils.readFileToString(file,EMFUtil.ENCODING);
        content=StringUtils.replace(content,""String_Node_Str"",""String_Node_Str"");
        content=StringUtils.replace(content,""String_Node_Str"",""String_Node_Str"");
        content=StringUtils.replace(content,""String_Node_Str"",""String_Node_Str"");
        FileUtils.writeStringToFile(file,content,EMFUtil.ENCODING);
      }
 catch (      IOException e) {
        return false;
      }
    }
  }
  return true;
}",0.9472329472329472
138809,"/** 
 * DOC bZhou Comment method ""createItem"".
 * @param element
 * @return
 */
public Item createItem(ModelElement element){
  Item item=null;
  if (ModelElementIdentifier.isAnalysis(element)) {
    item=PropertiesFactory.eINSTANCE.createTDQAnalysisItem();
  }
 else   if (ModelElementIdentifier.isDQRule(element)) {
    item=PropertiesFactory.eINSTANCE.createTDQBusinessRuleItem();
  }
 else   if (ModelElementIdentifier.isDataProvider(element)) {
    if (element instanceof DatabaseConnection) {
      item=org.talend.core.model.properties.PropertiesFactory.eINSTANCE.createDatabaseConnectionItem();
    }
 else     if (element instanceof MDMConnection) {
      item=org.talend.core.model.properties.PropertiesFactory.eINSTANCE.createMDMConnectionItem();
    }
    ((ConnectionItem)item).setConnection((Connection)element);
  }
 else   if (ModelElementIdentifier.isID(element)) {
    item=PropertiesFactory.eINSTANCE.createTDQIndicatorDefinitionItem();
  }
 else   if (ModelElementIdentifier.isPattern(element)) {
    item=PropertiesFactory.eINSTANCE.createTDQPatternItem();
  }
 else   if (ModelElementIdentifier.isReport(element)) {
    item=PropertiesFactory.eINSTANCE.createTDQReportItem();
  }
 else {
    item=org.talend.core.model.properties.PropertiesFactory.eINSTANCE.createTDQItem();
  }
  ItemState itemState=org.talend.core.model.properties.PropertiesFactory.eINSTANCE.createItemState();
  itemState.setDeleted(false);
  item.setState(itemState);
  Resource eResource=element.eResource();
  if (eResource != null) {
    URI uri=eResource.getURI();
    if (item instanceof TDQItem) {
      ((TDQItem)item).setFilename(uri.lastSegment());
    }
    if (uri.isPlatform()) {
      IPath elementPath=new Path(uri.toPlatformString(true)).removeLastSegments(1);
      IPath typedPath=ResourceManager.getRootProject().getFullPath().append(PropertyHelper.getItemTypedPath(item));
      IPath statePath=elementPath.makeRelativeTo(typedPath);
      itemState.setPath(statePath.toString());
    }
  }
  return item;
}","/** 
 * DOC bZhou Comment method ""createItem"".
 * @param element
 * @return
 */
public Item createItem(ModelElement element){
  Item item=null;
  if (ModelElementIdentifier.isAnalysis(element)) {
    item=PropertiesFactory.eINSTANCE.createTDQAnalysisItem();
  }
 else   if (ModelElementIdentifier.isDQRule(element)) {
    item=PropertiesFactory.eINSTANCE.createTDQBusinessRuleItem();
  }
 else   if (ModelElementIdentifier.isDataProvider(element)) {
    if (element instanceof DatabaseConnection) {
      item=org.talend.core.model.properties.PropertiesFactory.eINSTANCE.createDatabaseConnectionItem();
    }
 else     if (element instanceof MDMConnection) {
      item=org.talend.core.model.properties.PropertiesFactory.eINSTANCE.createMDMConnectionItem();
    }
    ((ConnectionItem)item).setConnection((Connection)element);
  }
 else   if (ModelElementIdentifier.isID(element)) {
    item=PropertiesFactory.eINSTANCE.createTDQIndicatorDefinitionItem();
  }
 else   if (ModelElementIdentifier.isPattern(element)) {
    item=PropertiesFactory.eINSTANCE.createTDQPatternItem();
  }
 else   if (ModelElementIdentifier.isReport(element)) {
    item=PropertiesFactory.eINSTANCE.createTDQReportItem();
  }
 else {
    item=org.talend.core.model.properties.PropertiesFactory.eINSTANCE.createTDQItem();
  }
  ItemState itemState=org.talend.core.model.properties.PropertiesFactory.eINSTANCE.createItemState();
  itemState.setDeleted(false);
  item.setState(itemState);
  Resource eResource=element.eResource();
  if (eResource != null) {
    URI uri=eResource.getURI();
    if (item instanceof TDQItem) {
      ((TDQItem)item).setFilename(URI.decode(uri.lastSegment()));
    }
    if (uri.isPlatform()) {
      IPath elementPath=new Path(uri.toPlatformString(true)).removeLastSegments(1);
      IPath typedPath=ResourceManager.getRootProject().getFullPath().append(PropertyHelper.getItemTypedPath(item));
      IPath statePath=elementPath.makeRelativeTo(typedPath);
      itemState.setPath(statePath.toString());
    }
  }
  return item;
}",0.9970384995064164
138810,"@Override public void processDelta(final IResourceDelta rootDelta){
  final List<IFile> added=new ArrayList<IFile>();
  final List<IFile> removed=new ArrayList<IFile>();
  IResourceDeltaVisitor visitor=new IResourceDeltaVisitor(){
    public boolean visit(    IResourceDelta delta){
      IResource resource=delta.getResource();
      if (FactoriesUtil.isEmfFile(resource.getFileExtension())) {
        if (delta.getKind() == IResourceDelta.ADDED) {
          added.add((IFile)resource);
        }
        if (delta.getKind() == IResourceDelta.REMOVED) {
          removed.add((IFile)resource);
        }
      }
      return true;
    }
  }
;
  try {
    rootDelta.accept(visitor);
  }
 catch (  CoreException e1) {
    log.error(e1);
  }
  List<Runnable> refreshedRannables=new ArrayList<Runnable>();
  for (  IFile file : removed) {
    try {
      refreshedRannables.add(getDeleteRunnable(file));
    }
 catch (    Exception e) {
      log.error(e);
    }
  }
  for (  IFile file : added) {
    Resource resource=null;
    try {
      resource=RepResourceFileHelper.getInstance().getFileResource(file);
      refreshedRannables.add(getRefreshRunnable(resource));
    }
 catch (    Exception e) {
      log.error(e);
      e.printStackTrace();
    }
  }
  if (refreshedRannables != null && refreshedRannables.size() > 0) {
    postEventExecute(refreshedRannables);
  }
}","@Override public void processDelta(final IResourceDelta rootDelta){
  final List<IFile> added=new ArrayList<IFile>();
  final List<IFile> removed=new ArrayList<IFile>();
  IResourceDeltaVisitor visitor=new IResourceDeltaVisitor(){
    public boolean visit(    IResourceDelta delta){
      IResource resource=delta.getResource();
      if (FactoriesUtil.isEmfFile(resource.getFileExtension())) {
        if (delta.getKind() == IResourceDelta.ADDED) {
          added.add((IFile)resource);
        }
        if (delta.getKind() == IResourceDelta.REMOVED) {
          removed.add((IFile)resource);
        }
      }
      return true;
    }
  }
;
  try {
    rootDelta.accept(visitor);
  }
 catch (  CoreException e1) {
    log.error(e1);
  }
  List<Runnable> refreshedRannables=new ArrayList<Runnable>();
  for (  IFile file : removed) {
    try {
      refreshedRannables.add(getDeleteRunnable(file));
    }
 catch (    Exception e) {
      log.error(e);
    }
  }
  for (  IFile file : added) {
    Resource resource=null;
    try {
      resource=RepResourceFileHelper.getInstance().getFileResource(file);
      if (resource != null && checkResource(resource)) {
        refreshedRannables.add(getRefreshRunnable(resource));
      }
    }
 catch (    Exception e) {
      log.error(e);
      e.printStackTrace();
    }
  }
  if (refreshedRannables != null && refreshedRannables.size() > 0) {
    postEventExecute(refreshedRannables);
  }
}",0.9719161038037682
138811,"public void write(ItemRecord[] records,IProgressMonitor monitor){
  if (monitor == null) {
    monitor=new NullProgressMonitor();
  }
  try {
    for (    ItemRecord record : records) {
      if (monitor.isCanceled()) {
        break;
      }
      Map<IPath,IPath> toImportMap=mapping(record);
      monitor.subTask(""String_Node_Str"" + record.getName());
      if (record.isValid()) {
        log.info(""String_Node_Str"" + record.getFile().getAbsolutePath());
        ModelElement element=record.getElement();
        if (element != null && element instanceof Connection) {
          Property property=record.getProperty();
          String fileName=record.getFile().getName();
          int lastIndex=fileName.lastIndexOf(""String_Node_Str"");
          if (lastIndex > 0) {
            fileName=fileName.substring(0,lastIndex);
          }
 else {
            fileName=new Path(fileName).removeFileExtension().lastSegment();
          }
          IPath statePath;
          ItemState state=property.getItem().getState();
          if (state != null && state.getPath() != null) {
            statePath=new Path(state.getPath());
          }
 else {
            statePath=Path.EMPTY;
          }
          ProxyRepositoryFactory.getInstance().create(property.getItem(),statePath);
        }
 else {
          for (          IPath resPath : toImportMap.keySet()) {
            IPath desPath=toImportMap.get(resPath);
            write(resPath,desPath);
          }
        }
      }
 else {
        for (        String error : record.getErrors()) {
          log.error(error);
        }
      }
      monitor.worked(1);
    }
    finish(records,monitor);
  }
 catch (  Exception e) {
    log.error(e,e);
  }
}","public void write(ItemRecord[] records,IProgressMonitor monitor){
  if (monitor == null) {
    monitor=new NullProgressMonitor();
  }
  try {
    for (    ItemRecord record : records) {
      if (monitor.isCanceled()) {
        break;
      }
      Map<IPath,IPath> toImportMap=mapping(record);
      monitor.subTask(""String_Node_Str"" + record.getName());
      if (record.isValid()) {
        log.info(""String_Node_Str"" + record.getFile().getAbsolutePath());
        ModelElement element=record.getElement();
        if (element != null && element instanceof Connection) {
          Property property=record.getProperty();
          String fileName=record.getFile().getName();
          int lastIndex=fileName.lastIndexOf(""String_Node_Str"");
          if (lastIndex > 0) {
            fileName=fileName.substring(0,lastIndex);
          }
 else {
            fileName=new Path(fileName).removeFileExtension().lastSegment();
          }
          property.setLabel(fileName);
          IPath statePath;
          ItemState state=property.getItem().getState();
          if (state != null && state.getPath() != null) {
            statePath=new Path(state.getPath());
          }
 else {
            statePath=Path.EMPTY;
          }
          ProxyRepositoryFactory.getInstance().create(property.getItem(),statePath);
        }
 else {
          for (          IPath resPath : toImportMap.keySet()) {
            IPath desPath=toImportMap.get(resPath);
            write(resPath,desPath);
          }
        }
      }
 else {
        for (        String error : record.getErrors()) {
          log.error(error);
        }
      }
      monitor.worked(1);
    }
    finish(records,monitor);
  }
 catch (  Exception e) {
    log.error(e,e);
  }
}",0.9886989278470008
138812,"/** 
 * DOC bZhou Comment method ""createDQStructure"".
 */
public void createDQStructure(){
  Plugin plugin=CorePlugin.getDefault();
  try {
    IProject project=ResourceManager.getRootProject();
    if (!project.exists()) {
      project=createNewProject(ResourceManager.getRootProjectName());
    }
    IFolder dataProfilingFolder=createNewFolder(project,EResourceConstant.DATA_PROFILING);
    IFolder analysisFoler=createNewFolder(dataProfilingFolder,EResourceConstant.ANALYSIS);
    IFolder reportFoler=createNewFolder(dataProfilingFolder,EResourceConstant.REPORTS);
    IFolder librariesFoler=createNewFolder(project,EResourceConstant.LIBRARIES);
    IFolder patternFoler=createNewFolder(librariesFoler,EResourceConstant.PATTERNS);
    IFolder patternRegexFoler=createNewFolder(patternFoler,EResourceConstant.PATTERN_REGEX);
    IFolder patternSQLFoler=createNewFolder(patternFoler,EResourceConstant.PATTERN_SQL);
    IFolder sourceFileFoler=createNewFolder(librariesFoler,EResourceConstant.SOURCE_FILES);
    IFolder rulesFoler=createNewFolder(librariesFoler,EResourceConstant.RULES);
    IFolder rulesSQLFoler=createNewFolder(rulesFoler,EResourceConstant.RULES_SQL);
    IFolder exchangeFoler=createNewFolder(librariesFoler,EResourceConstant.EXCHANGE);
    IFolder indicatorFoler=createNewFolder(librariesFoler,EResourceConstant.INDICATORS);
    IFolder udiFoler=createNewFolder(indicatorFoler,EResourceConstant.USER_DEFINED_INDICATORS);
    IFolder jrxmlFolder=createNewFolder(librariesFoler,EResourceConstant.JRXML_TEMPLATE);
    IFolder systemIndicatorFoler=createNewFolder(indicatorFoler,EResourceConstant.SYSTEM_INDICATORS);
    if (ReponsitoryContextBridge.isDefautProject()) {
      ProxyRepositoryFactory.getInstance().createFolder(ERepositoryObjectType.METADATA,Path.EMPTY,EResourceConstant.DB_CONNECTIONS.getName());
      ProxyRepositoryFactory.getInstance().createFolder(ERepositoryObjectType.METADATA,Path.EMPTY,EResourceConstant.MDM_CONNECTIONS.getName());
    }
    copyFilesToFolder(plugin,PATTERN_PATH,true,patternRegexFoler,null);
    copyFilesToFolder(plugin,SQL_LIKE_PATH,true,patternSQLFoler,null);
    copyFilesToFolder(plugin,DEMO_PATH,true,sourceFileFoler,null);
    copyFilesToFolder(plugin,RULES_PATH,true,rulesSQLFoler,null);
    copyFilesToFolder(plugin,SYSTEM_INDICATOR_PATH,true,systemIndicatorFoler,null);
    WorkspaceVersionHelper.storeVersion();
    ResourceService.refreshStructure();
  }
 catch (  Exception ex) {
    ExceptionHandler.process(ex);
    ProxyRepositoryManager.getInstance().save();
  }
}","/** 
 * DOC bZhou Comment method ""createDQStructure"".
 */
public void createDQStructure(){
  Plugin plugin=CorePlugin.getDefault();
  try {
    IProject project=ResourceManager.getRootProject();
    if (!project.exists()) {
      project=createNewProject(ResourceManager.getRootProjectName());
    }
    IFolder dataProfilingFolder=createNewFolder(project,EResourceConstant.DATA_PROFILING);
    IFolder analysisFoler=createNewFolder(dataProfilingFolder,EResourceConstant.ANALYSIS);
    IFolder reportFoler=createNewFolder(dataProfilingFolder,EResourceConstant.REPORTS);
    IFolder librariesFoler=createNewFolder(project,EResourceConstant.LIBRARIES);
    IFolder patternFoler=createNewFolder(librariesFoler,EResourceConstant.PATTERNS);
    IFolder patternRegexFoler=createNewFolder(patternFoler,EResourceConstant.PATTERN_REGEX);
    IFolder patternSQLFoler=createNewFolder(patternFoler,EResourceConstant.PATTERN_SQL);
    IFolder sourceFileFoler=createNewFolder(librariesFoler,EResourceConstant.SOURCE_FILES);
    IFolder rulesFoler=createNewFolder(librariesFoler,EResourceConstant.RULES);
    IFolder rulesSQLFoler=createNewFolder(rulesFoler,EResourceConstant.RULES_SQL);
    IFolder exchangeFoler=createNewFolder(librariesFoler,EResourceConstant.EXCHANGE);
    IFolder indicatorFoler=createNewFolder(librariesFoler,EResourceConstant.INDICATORS);
    IFolder udiFoler=createNewFolder(indicatorFoler,EResourceConstant.USER_DEFINED_INDICATORS);
    IFolder jrxmlFolder=createNewFolder(librariesFoler,EResourceConstant.JRXML_TEMPLATE);
    IFolder systemIndicatorFoler=createNewFolder(indicatorFoler,EResourceConstant.SYSTEM_INDICATORS);
    if (!project.getFolder(EResourceConstant.DB_CONNECTIONS.getPath()).exists()) {
      ProxyRepositoryFactory.getInstance().createFolder(ERepositoryObjectType.METADATA,Path.EMPTY,EResourceConstant.DB_CONNECTIONS.getName());
    }
    if (!project.getFolder(EResourceConstant.MDM_CONNECTIONS.getPath()).exists()) {
      ProxyRepositoryFactory.getInstance().createFolder(ERepositoryObjectType.METADATA,Path.EMPTY,EResourceConstant.MDM_CONNECTIONS.getName());
    }
    copyFilesToFolder(plugin,PATTERN_PATH,true,patternRegexFoler,null);
    copyFilesToFolder(plugin,SQL_LIKE_PATH,true,patternSQLFoler,null);
    copyFilesToFolder(plugin,DEMO_PATH,true,sourceFileFoler,null);
    copyFilesToFolder(plugin,RULES_PATH,true,rulesSQLFoler,null);
    copyFilesToFolder(plugin,SYSTEM_INDICATOR_PATH,true,systemIndicatorFoler,null);
    WorkspaceVersionHelper.storeVersion();
    ResourceService.refreshStructure();
  }
 catch (  Exception ex) {
    ExceptionHandler.process(ex);
    ProxyRepositoryManager.getInstance().save();
  }
}",0.962550412905704
138813,"@Override protected boolean doExecute() throws Exception {
  DQStructureManager manager=DQStructureManager.getInstance();
  IFolder systemIndicatorFoler=manager.createNewFolder(ResourceManager.getIndicatorFolder(),EResourceConstant.SYSTEM_INDICATORS);
  manager.copyFilesToFolder(CorePlugin.getDefault(),DQStructureManager.SYSTEM_INDICATOR_PATH,true,systemIndicatorFoler,null);
  Collection<Analysis> analyses=searchAllAnalysis(ResourceManager.getAnalysisFolder());
  AnalysisWriter analysisWriter=ElementWriterFactory.getInstance().createAnalysisWrite();
  for (  Analysis ana : analyses) {
    for (    Indicator ind : ana.getResults().getIndicators()) {
      updateIndDefinition(ind);
      if (ind instanceof CompositeIndicator) {
        for (        Indicator indLeave : IndicatorHelper.getIndicatorLeaves(ind)) {
          updateIndDefinition(indLeave);
        }
      }
    }
    analysisWriter.save(ana);
  }
  ResourceManager.getLibrariesFolder().getFile(DefinitionHandler.FILENAME).delete(true,new NullProgressMonitor());
  DefinitionHandler.getInstance().copyDefinitionsIntoFolder(ResourceManager.getLibrariesFolder());
  return true;
}","@Override protected boolean doExecute() throws Exception {
  if (!ResourceManager.getSystemIndicatorFolder().exists()) {
    DQStructureManager manager=DQStructureManager.getInstance();
    IFolder systemIndicatorFoler=manager.createNewFolder(ResourceManager.getIndicatorFolder(),EResourceConstant.SYSTEM_INDICATORS);
    manager.copyFilesToFolder(CorePlugin.getDefault(),DQStructureManager.SYSTEM_INDICATOR_PATH,true,systemIndicatorFoler,null);
  }
  Collection<Analysis> analyses=searchAllAnalysis(ResourceManager.getAnalysisFolder());
  AnalysisWriter analysisWriter=ElementWriterFactory.getInstance().createAnalysisWrite();
  for (  Analysis ana : analyses) {
    for (    Indicator ind : ana.getResults().getIndicators()) {
      updateIndDefinition(ind);
      if (ind instanceof CompositeIndicator) {
        for (        Indicator indLeave : IndicatorHelper.getIndicatorLeaves(ind)) {
          updateIndDefinition(indLeave);
        }
      }
    }
    analysisWriter.save(ana);
  }
  ResourceManager.getLibrariesFolder().getFile(DefinitionHandler.FILENAME).delete(true,new NullProgressMonitor());
  DefinitionHandler.getInstance().copyDefinitionsIntoFolder(ResourceManager.getLibrariesFolder());
  return true;
}",0.96964586846543
138814,"public void finish(ItemRecord[] records,IProgressMonitor monitor) throws IOException, CoreException {
  ItemRecord.clear();
  IFile defFile=ResourceManager.getLibrariesFolder().getFile(DEFINITION_FILE_NAME);
  if (definitionFile != null && definitionFile.exists()) {
    File defintionFile=defFile.getLocation().toFile();
    FilesUtils.copyFile(definitionFile,defintionFile);
  }
 else {
    if (!defFile.exists()) {
      DefinitionHandler.getInstance();
    }
  }
}","public void finish(ItemRecord[] records,IProgressMonitor monitor) throws IOException, CoreException {
  ItemRecord.clear();
  IFile defFile=ResourceManager.getLibrariesFolder().getFile(DEFINITION_FILE_NAME);
  if (definitionFile != null && definitionFile.exists()) {
    File defintionFile=defFile.getLocation().toFile();
    FilesUtils.copyFile(definitionFile,defintionFile);
  }
 else {
    if (!defFile.exists()) {
      DefinitionHandler.getInstance();
    }
  }
  ResourceService.refreshStructure();
  if (commonTasks != null) {
    MigrationTaskManager.doMigrationTask(commonTasks,monitor);
  }
}",0.874766355140187
138815,"public void write(ItemRecord[] records,IProgressMonitor monitor){
  if (monitor == null) {
    monitor=new NullProgressMonitor();
  }
  try {
    for (    ItemRecord record : records) {
      if (monitor.isCanceled()) {
        break;
      }
      Map<IPath,IPath> toImportMap=mapping(record);
      monitor.subTask(""String_Node_Str"" + record.getName());
      if (record.isValid()) {
        log.info(""String_Node_Str"" + record.getFile().getAbsolutePath());
        if (record.getElement() != null) {
          ModelElement element=record.getElement();
          Property property=record.getProperty();
          EResourceConstant typedConstant=EResourceConstant.getTypedConstant(element);
          if (typedConstant != null) {
            IPath folderPath=new Path(typedConstant.getPath());
            ItemState state=property.getItem().getState();
            if (state != null && state.getPath() != null) {
              folderPath.append(state.getPath());
            }
            IFolder folder=ResourceManager.getRootProject().getFolder(folderPath);
            AElementPersistance creator=ElementWriterFactory.getInstance().create(element);
            if (creator != null) {
              creator.create(element,folder);
            }
 else {
              log.error(""String_Node_Str"" + element.getName());
            }
          }
        }
      }
 else {
        for (        String error : record.getErrors()) {
          log.error(error);
        }
      }
      monitor.worked(1);
    }
    if (commonTasks != null) {
      MigrationTaskManager.doMigrationTask(commonTasks,monitor);
    }
    finish(records,monitor);
  }
 catch (  Exception e) {
    log.error(e,e);
  }
}","public void write(ItemRecord[] records,IProgressMonitor monitor){
  if (monitor == null) {
    monitor=new NullProgressMonitor();
  }
  try {
    for (    ItemRecord record : records) {
      if (monitor.isCanceled()) {
        break;
      }
      Map<IPath,IPath> toImportMap=mapping(record);
      monitor.subTask(""String_Node_Str"" + record.getName());
      if (record.isValid()) {
        log.info(""String_Node_Str"" + record.getFile().getAbsolutePath());
        ModelElement element=record.getElement();
        if (element != null && element instanceof Connection) {
          Property property=record.getProperty();
          String fileName=record.getFile().getName();
          fileName=fileName.substring(0,fileName.lastIndexOf(""String_Node_Str""));
          property.setLabel(fileName);
          IPath statePath;
          ItemState state=property.getItem().getState();
          if (state != null && state.getPath() != null) {
            statePath=new Path(state.getPath());
          }
 else {
            statePath=Path.EMPTY;
          }
          ProxyRepositoryFactory.getInstance().create(property.getItem(),statePath);
        }
 else {
          for (          IPath resPath : toImportMap.keySet()) {
            IPath desPath=toImportMap.get(resPath);
            write(resPath,desPath);
          }
        }
      }
 else {
        for (        String error : record.getErrors()) {
          log.error(error);
        }
      }
      monitor.worked(1);
    }
    finish(records,monitor);
  }
 catch (  Exception e) {
    log.error(e,e);
  }
}",0.4644171779141104
138816,"@Override public Object[] getChildren(Object element){
  if (element instanceof IWorkspaceRoot) {
    Object currentOpenProject=null;
    for (    Object child : super.getChildren(element)) {
      if (child instanceof IProject) {
        if (((IProject)child).getName().equals(ResourceManager.getRootProjectName())) {
          currentOpenProject=child;
          break;
        }
      }
    }
    List<Object> folders=new ArrayList<Object>();
    try {
      Object[] rootFolders=new Object[0];
      rootFolders=((IProject)currentOpenProject).members(false);
      for (      Object folder : rootFolders) {
        if (folder instanceof IFolder && ((IFolder)folder).getName().startsWith(DQStructureManager.PREFIX_TDQ)) {
          if (((IFolder)folder).getName().trim().equals(""String_Node_Str"")) {
            continue;
          }
          folders.add(folder);
        }
        if (folder instanceof IFolder && ((IFolder)folder).getName().equals(EResourceConstant.METADATA.getPath())) {
          folders.add(folder);
        }
      }
    }
 catch (    CoreException e) {
      log.error(e);
    }
    folders.add(recycleBin);
    return folders.toArray();
  }
 else   if (element instanceof IFile) {
    IFile file=(IFile)element;
    if (FactoriesUtil.isPatternFile(file.getFileExtension())) {
      Pattern pattern=PatternResourceFileHelper.getInstance().findPattern(file);
      RegularExpression[] regularExp=new RegularExpression[pattern.getComponents().size()];
      int peIdx=0;
      for (      PatternComponent patCom : pattern.getComponents()) {
        regularExp[peIdx]=(RegularExpression)patCom;
        peIdx++;
      }
      return regularExp;
    }
  }
 else   if (element instanceof IFolder) {
    IFolder folder=(IFolder)element;
    if (ResourceManager.isExchangeFolder(folder)) {
      try {
        if (timeoutFlag) {
          String version=CorePlugin.getDefault().getProductVersion().toString();
          return ComponentSearcher.getAvailableCategory(version).toArray();
        }
 else {
          return new String[]{""String_Node_Str""};
        }
      }
 catch (      SocketTimeoutException e) {
        timeoutFlag=false;
        return new String[]{""String_Node_Str"" + e.getMessage()};
      }
catch (      Exception e) {
        timeoutFlag=false;
        return new String[]{e.getMessage()};
      }
    }
 else     if (ResourceManager.isIndicatorFolder(folder)) {
      return getIndicatorsChildren(folder);
    }
 else     if (ResourceManager.getConnectionFolder().getFullPath().isPrefixOf(folder.getFullPath())) {
      List<Object> returnList=new ArrayList<Object>();
      IPath path=folder.getFullPath().makeRelativeTo(ResourceManager.getConnectionFolder().getFullPath());
      List<IRepositoryViewObject> conList=ProxyRepositoryViewObject.fetchRepositoryViewObjectsByFolder(true,ERepositoryObjectType.METADATA_CONNECTIONS,path);
      returnList.addAll(getConnectionChildren(conList));
      for (      Object folderResource : Arrays.asList(getChildrenExceptRecBin(folder))) {
        if (folderResource instanceof IResource && ((IResource)folderResource).getType() == IResource.FOLDER) {
          returnList.add(folderResource);
        }
      }
      return returnList.toArray();
    }
 else     if (ResourceManager.getMDMConnectionFolder().getFullPath().isPrefixOf(folder.getFullPath())) {
      List<Object> returnList=new ArrayList<Object>();
      IPath path=folder.getFullPath().makeRelativeTo(ResourceManager.getMDMConnectionFolder().getFullPath());
      List<IRepositoryViewObject> conList=ProxyRepositoryViewObject.fetchRepositoryViewObjectsByFolder(true,ERepositoryObjectType.METADATA_MDMCONNECTION,path);
      returnList.addAll(getConnectionChildren(conList));
      for (      Object folderResource : Arrays.asList(getChildrenExceptRecBin(folder))) {
        if (folderResource instanceof IResource && ((IResource)folderResource).getType() == IResource.FOLDER) {
          returnList.add(folderResource);
        }
      }
      return returnList.toArray();
    }
    return getChildrenExceptRecBin(element);
  }
 else   if (element instanceof IEcosCategory) {
    return ((IEcosCategory)element).getComponent().toArray();
  }
 else   if (element instanceof IndicatorCategory) {
    return getIndicatorsChildren((IndicatorCategory)element);
  }
 else   if (element instanceof RecycleBin) {
    RecycleBin bin=(RecycleBin)element;
    return bin.getChildren();
  }
 else   if (element instanceof DQRecycleBinNode) {
    DQRecycleBinNode rbn=(DQRecycleBinNode)element;
    return getRecBinNodes(rbn).toArray();
  }
  if (needSortContainers.contains(element)) {
    return getChildrenExceptRecBin(element);
  }
  return super.getChildren(element);
}","@Override public Object[] getChildren(Object element){
  if (element instanceof IWorkspaceRoot) {
    Object currentOpenProject=null;
    for (    Object child : super.getChildren(element)) {
      if (child instanceof IProject) {
        if (((IProject)child).getName().equals(ResourceManager.getRootProjectName())) {
          currentOpenProject=child;
          break;
        }
      }
    }
    List<Object> folders=new ArrayList<Object>();
    try {
      Object[] rootFolders=new Object[0];
      rootFolders=((IProject)currentOpenProject).members(false);
      for (      Object folder : rootFolders) {
        if (folder instanceof IFolder && ((IFolder)folder).getName().startsWith(DQStructureManager.PREFIX_TDQ)) {
          if (((IFolder)folder).getName().trim().equals(""String_Node_Str"")) {
            continue;
          }
          folders.add(folder);
        }
        if (folder instanceof IFolder && ((IFolder)folder).getName().equals(EResourceConstant.METADATA.getPath())) {
          folders.add(folder);
        }
      }
    }
 catch (    CoreException e) {
      log.error(e);
    }
    folders.add(recycleBin);
    return folders.toArray();
  }
 else   if (element instanceof IFile) {
    IFile file=(IFile)element;
    if (FactoriesUtil.isPatternFile(file.getFileExtension())) {
      Pattern pattern=PatternResourceFileHelper.getInstance().findPattern(file);
      RegularExpression[] regularExp=new RegularExpression[pattern.getComponents().size()];
      int peIdx=0;
      for (      PatternComponent patCom : pattern.getComponents()) {
        regularExp[peIdx]=(RegularExpression)patCom;
        peIdx++;
      }
      return regularExp;
    }
  }
 else   if (element instanceof IFolder) {
    IFolder folder=(IFolder)element;
    if (ResourceManager.isExchangeFolder(folder)) {
      try {
        if (timeoutFlag) {
          String version=CorePlugin.getDefault().getProductVersion().toString();
          return ComponentSearcher.getAvailableCategory(version).toArray();
        }
 else {
          return new String[]{""String_Node_Str""};
        }
      }
 catch (      SocketTimeoutException e) {
        timeoutFlag=false;
        return new String[]{""String_Node_Str"" + e.getMessage()};
      }
catch (      Exception e) {
        timeoutFlag=false;
        return new String[]{e.getMessage()};
      }
    }
 else     if (ResourceManager.isIndicatorFolder(folder)) {
      return getIndicatorsChildren(folder);
    }
 else     if (ResourceManager.getConnectionFolder().getFullPath().isPrefixOf(folder.getFullPath())) {
      List<Object> returnList=new ArrayList<Object>();
      if (ResourcesPlugin.getWorkspace().isTreeLocked()) {
        return returnList.toArray();
      }
      IPath path=folder.getFullPath().makeRelativeTo(ResourceManager.getConnectionFolder().getFullPath());
      List<IRepositoryViewObject> conList=ProxyRepositoryViewObject.fetchRepositoryViewObjectsByFolder(true,ERepositoryObjectType.METADATA_CONNECTIONS,path);
      returnList.addAll(getConnectionChildren(conList));
      for (      Object folderResource : Arrays.asList(getChildrenExceptRecBin(folder))) {
        if (folderResource instanceof IResource && ((IResource)folderResource).getType() == IResource.FOLDER) {
          returnList.add(folderResource);
        }
      }
      return returnList.toArray();
    }
 else     if (ResourceManager.getMDMConnectionFolder().getFullPath().isPrefixOf(folder.getFullPath())) {
      List<Object> returnList=new ArrayList<Object>();
      if (ResourcesPlugin.getWorkspace().isTreeLocked()) {
        return returnList.toArray();
      }
      IPath path=folder.getFullPath().makeRelativeTo(ResourceManager.getMDMConnectionFolder().getFullPath());
      List<IRepositoryViewObject> conList=ProxyRepositoryViewObject.fetchRepositoryViewObjectsByFolder(true,ERepositoryObjectType.METADATA_MDMCONNECTION,path);
      returnList.addAll(getConnectionChildren(conList));
      for (      Object folderResource : Arrays.asList(getChildrenExceptRecBin(folder))) {
        if (folderResource instanceof IResource && ((IResource)folderResource).getType() == IResource.FOLDER) {
          returnList.add(folderResource);
        }
      }
      return returnList.toArray();
    }
    return getChildrenExceptRecBin(element);
  }
 else   if (element instanceof IEcosCategory) {
    return ((IEcosCategory)element).getComponent().toArray();
  }
 else   if (element instanceof IndicatorCategory) {
    return getIndicatorsChildren((IndicatorCategory)element);
  }
 else   if (element instanceof RecycleBin) {
    RecycleBin bin=(RecycleBin)element;
    return bin.getChildren();
  }
 else   if (element instanceof DQRecycleBinNode) {
    DQRecycleBinNode rbn=(DQRecycleBinNode)element;
    return getRecBinNodes(rbn).toArray();
  }
  if (needSortContainers.contains(element)) {
    return getChildrenExceptRecBin(element);
  }
  return super.getChildren(element);
}",0.9784142797841427
138817,"private void copyFileToFolder(InputStream inputStream,String fileName,IFolder folder) throws CoreException {
  if (inputStream == null) {
    return;
  }
  IFile file=folder.getFile(fileName);
  if (!file.exists()) {
    file.create(inputStream,false,null);
    ModelElement modelElement=ModelElementFileFactory.getModelElement(file);
    if (modelElement != null) {
      AElementPersistance writer=ElementWriterFactory.getInstance().create(file.getFileExtension());
      if (writer != null) {
        IPath propPath=file.getFullPath().removeFileExtension().addFileExtension(FactoriesUtil.PROPERTIES_EXTENSION);
        writer.createProperty(modelElement,propPath);
      }
    }
  }
}","private void copyFileToFolder(InputStream inputStream,String fileName,IFolder folder) throws CoreException {
  if (inputStream == null) {
    return;
  }
  IFile file=folder.getFile(fileName);
  if (!file.exists()) {
    file.create(inputStream,false,null);
    ModelElement modelElement=ModelElementFileFactory.getModelElement(file);
    if (modelElement != null) {
      AElementPersistance writer=ElementWriterFactory.getInstance().create(file.getFileExtension());
      if (writer != null) {
        IPath propPath=file.getFullPath().removeFileExtension().addFileExtension(FactoriesUtil.PROPERTIES_EXTENSION);
        writer.createProperty(modelElement,propPath,file.getName());
      }
    }
  }
}",0.9892008639308856
138818,"@Override public void run(){
  if (reposViewObj.getType().getKey().equals(ERepositoryObjectType.METADATA_CONNECTIONS.getKey())) {
    ConnectionItemEditorInput connItemEditorInput=new ConnectionItemEditorInput(reposViewObj);
    CorePlugin.getDefault().openEditor(connItemEditorInput,ConnectionEditor.class.getName());
  }
}","@Override public void run(){
  String key=reposViewObj.getType().getKey();
  if (ERepositoryObjectType.METADATA_CONNECTIONS.getKey().equals(key) || ERepositoryObjectType.METADATA_MDMCONNECTION.getKey().equals(key)) {
    ConnectionItemEditorInput connItemEditorInput=new ConnectionItemEditorInput(reposViewObj);
    CorePlugin.getDefault().openEditor(connItemEditorInput,ConnectionEditor.class.getName());
  }
}",0.5959183673469388
138819,"/** 
 * Method ""createDataProvider"" create the data provider, the catalogs and the schemas. The created data provider and its related Catalog and Schemas are stored in the DBConnect class. In order to finally serialize them in a file, the method   {@link DBConnect#saveInFiles()} must be called.
 * @param connector the helper for building CWM objects from a connection
 * @param folderProvider contains the path where the file will be stored.
 * @return the data provider
 * @throws SQLException
 */
public static Connection createDataProvider(DBConnect connector) throws SQLException {
  checkConnection(connector);
  Connection dataProvider=getTdDataProvider(connector);
  if (connector.retrieveDeployedSystemInformations()) {
    TdSoftwareSystem softwareSystem=connector.getSoftwareSystem();
    if (softwareSystem != null) {
      ConnectionHelper.setSoftwareSystem(dataProvider,softwareSystem);
    }
  }
  Collection<Catalog> catalogs=getCatalogs(connector);
  Collection<Schema> schemata=getSchemata(connector);
  boolean allAdded=false;
  if (catalogs.isEmpty()) {
    allAdded=ConnectionHelper.addSchemas(schemata,dataProvider);
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + schemata.size() + ""String_Node_Str""+ allAdded);
    }
  }
 else {
    allAdded=ConnectionHelper.addCatalogs(catalogs,dataProvider);
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + catalogs.size() + ""String_Node_Str""+ allAdded);
    }
  }
  if (log.isInfoEnabled()) {
    log.info(catalogs.size() + ""String_Node_Str"");
    log.info(schemata.size() + ""String_Node_Str"");
  }
  if (log.isDebugEnabled()) {
    printInformations(catalogs,schemata);
  }
  String dbType=connector.getDbConnectionParameter().getSqlTypeName();
  String product=EDatabaseTypeName.getTypeFromDisplayName(dbType).getProduct();
  String mapping=MetadataTalendType.getDefaultDbmsFromProduct(product).getId();
  if (dataProvider instanceof DatabaseConnection) {
    ((DatabaseConnection)dataProvider).setProductId(product);
    ((DatabaseConnection)dataProvider).setDbmsId(mapping);
  }
  return dataProvider;
}","/** 
 * Method ""createDataProvider"" create the data provider, the catalogs and the schemas. The created data provider and its related Catalog and Schemas are stored in the DBConnect class. In order to finally serialize them in a file, the method   {@link DBConnect#saveInFiles()} must be called.
 * @param connector the helper for building CWM objects from a connection
 * @param folderProvider contains the path where the file will be stored.
 * @return the data provider
 * @throws SQLException
 */
public static Connection createDataProvider(DBConnect connector) throws SQLException {
  checkConnection(connector);
  Connection dataProvider=getTdDataProvider(connector);
  if (connector.retrieveDeployedSystemInformations()) {
    TdSoftwareSystem softwareSystem=connector.getSoftwareSystem();
    if (softwareSystem != null) {
      ConnectionHelper.setSoftwareSystem(dataProvider,softwareSystem);
    }
  }
  Collection<Catalog> catalogs=getCatalogs(connector);
  Collection<Schema> schemata=getSchemata(connector);
  boolean allAdded=false;
  if (catalogs.isEmpty()) {
    allAdded=ConnectionHelper.addSchemas(schemata,dataProvider);
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + schemata.size() + ""String_Node_Str""+ allAdded);
    }
  }
 else {
    allAdded=ConnectionHelper.addCatalogs(catalogs,dataProvider);
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + catalogs.size() + ""String_Node_Str""+ allAdded);
    }
  }
  if (log.isInfoEnabled()) {
    log.info(catalogs.size() + ""String_Node_Str"");
    log.info(schemata.size() + ""String_Node_Str"");
  }
  if (log.isDebugEnabled()) {
    printInformations(catalogs,schemata);
  }
  if (!ReponsitoryContextBridge.isDefautProject()) {
    String dbType=connector.getDbConnectionParameter().getSqlTypeName();
    String product=EDatabaseTypeName.getTypeFromDisplayName(dbType).getProduct();
    String mapping=MetadataTalendType.getDefaultDbmsFromProduct(product).getId();
    if (dataProvider instanceof DatabaseConnection) {
      ((DatabaseConnection)dataProvider).setProductId(product);
      ((DatabaseConnection)dataProvider).setDbmsId(mapping);
    }
  }
  return dataProvider;
}",0.9834460247143856
138820,"/** 
 * DOC qiongli Comment method ""resolveObject"".
 * @param proxy
 * @return
 */
public static EObject resolveObject(EObject proxy){
  if (proxy != null && proxy.eIsProxy()) {
    ResourceSet resourceSet=ProxyRepositoryFactory.getInstance().getRepositoryFactoryFromProvider().getResourceManager().resourceSet;
    proxy=(ModelElement)EcoreUtil.resolve(proxy,resourceSet);
  }
  return proxy;
}","/** 
 * DOC qiongli Comment method ""resolveObject"".
 * @param proxy
 * @return
 */
public static EObject resolveObject(EObject proxy){
  if (proxy != null && proxy.eIsProxy()) {
    ResourceSet resourceSet=ProxyRepositoryFactory.getInstance().getRepositoryFactoryFromProvider().getResourceManager().resourceSet;
    proxy=(EObject)EcoreUtil.resolve(proxy,resourceSet);
  }
  return proxy;
}",0.9808917197452228
138821,"/** 
 * DOC bZhou Comment method ""getItemPath"". This method is to get the entire path of a item. e.g. getItemPath() = Project/TypedPath/StatePath/xxxx.property.
 * @param property
 * @return
 */
public static IPath getItemPath(Property property){
  Item item=property.getItem();
  if (item instanceof TDQItem) {
    TDQItem tdqItem=(TDQItem)item;
    return ResourceManager.getRootProject().getFullPath().append(getItemTypedPath(property)).append(getItemStatePath(property)).append(tdqItem.getFilename());
  }
 else {
    IPath itemFilePath=new Path(property.eResource().getURI().lastSegment()).removeFileExtension().addFileExtension(FactoriesUtil.ITEM_EXTENSION);
    return ResourceManager.getRootProject().getFullPath().append(getItemTypedPath(property)).append(getItemStatePath(property)).append(itemFilePath);
  }
}","/** 
 * DOC bZhou Comment method ""getItemPath"". This method is to get the entire path of a item. e.g. getItemPath() = Project/TypedPath/StatePath/xxxx.property.
 * @param property
 * @return
 */
public static IPath getItemPath(Property property){
  Item item=property.getItem();
  if (item instanceof TDQItem) {
    TDQItem tdqItem=(TDQItem)item;
    return ResourceManager.getRootProject().getFullPath().append(getItemTypedPath(property)).append(getItemStatePath(property)).append(tdqItem.getFilename());
  }
 else {
    property=(Property)EObjectHelper.resolveObject(property);
    IPath itemFilePath=new Path(property.eResource().getURI().lastSegment()).removeFileExtension().addFileExtension(FactoriesUtil.ITEM_EXTENSION);
    return ResourceManager.getRootProject().getFullPath().append(getItemTypedPath(property)).append(getItemStatePath(property)).append(itemFilePath);
  }
}",0.963572267920094
138822,"/** 
 * DOC bZhou Comment method ""extractProjectLabel"". This method is to extract the project technical label.
 * @param property
 * @return
 */
public static String extractProjectLabel(Property property){
  User author=property.getAuthor();
  if (author != null && !author.eIsProxy()) {
    InternalEObject iAuthor=(InternalEObject)property.getAuthor();
    Resource projResource=iAuthor.eResource();
    if (projResource != null) {
      IPath projectPath=new Path(projResource.getURI().toFileString());
      Object projOBJ=EObjectHelper.retrieveEObject(projectPath,PropertiesPackage.eINSTANCE.getProject());
      if (projOBJ != null) {
        Project project=(Project)projOBJ;
        return project.getTechnicalLabel();
      }
    }
  }
  return ReponsitoryContextBridge.PROJECT_DEFAULT_NAME;
}","/** 
 * DOC bZhou Comment method ""extractProjectLabel"". This method is to extract the project technical label.
 * @param property
 * @return
 */
public static String extractProjectLabel(Property property){
  User author=property.getAuthor();
  if (author != null && !author.eIsProxy()) {
    InternalEObject iAuthor=(InternalEObject)property.getAuthor();
    Resource projResource=iAuthor.eResource();
    if (projResource != null) {
      IPath projectPath=new Path(projResource.getURI().toFileString());
      if (projectPath.toFile().exists()) {
        Object projOBJ=EObjectHelper.retrieveEObject(projectPath,PropertiesPackage.eINSTANCE.getProject());
        if (projOBJ != null) {
          Project project=(Project)projOBJ;
          return project.getTechnicalLabel();
        }
      }
    }
  }
  return ReponsitoryContextBridge.PROJECT_DEFAULT_NAME;
}",0.9633633633633634
138823,"@Override protected boolean doExecute() throws Exception {
  EMFUtil emfUtil=new EMFUtil();
  for (  File file : fileList) {
    if (file.isFile()) {
      URI uri=URI.createFileURI(file.getAbsolutePath());
      System.out.println(""String_Node_Str"" + uri.toString());
      Resource resource=emfUtil.getResourceSet().getResource(uri,true);
      EObject eObject=resource.getContents().get(0);
      if (FactoriesUtil.isProvFile(uri.fileExtension())) {
        for (        EObject object : resource.getContents()) {
          if (object instanceof Connection) {
            eObject=object;
            break;
          }
        }
      }
      if (eObject != null) {
        if (eObject instanceof ModelElement) {
          ModelElement modelElement=(ModelElement)eObject;
          AElementPersistance writer=ElementWriterFactory.getInstance().create(uri.fileExtension());
          Property oldPropery=PropertyHelper.getProperty(modelElement);
          if (writer != null) {
            Property property=writer.initProperty(modelElement);
            if (oldPropery != null) {
              property.setAuthor(oldPropery.getAuthor());
              property.getItem().setState(oldPropery.getItem().getState());
            }
            computePath(property,file);
            URI propURI=resource.getURI().trimFileExtension().appendFileExtension(FactoriesUtil.PROPERTIES_EXTENSION);
            Resource propResource=emfUtil.getResourceSet().createResource(propURI);
            propResource.getContents().add(property);
            propResource.getContents().add(property.getItem());
            propResource.getContents().add(property.getItem().getState());
            EMFUtil.saveResource(propResource);
          }
 else {
            log.warn(""String_Node_Str"" + modelElement.getName());
          }
        }
 else {
          log.warn(""String_Node_Str"" + eObject.toString());
        }
      }
    }
  }
  emfUtil=null;
  return true;
}","@Override protected boolean doExecute() throws Exception {
  EMFUtil emfUtil=new EMFUtil();
  for (  File file : fileList) {
    if (file.isFile()) {
      URI uri=URI.createFileURI(file.getAbsolutePath());
      System.out.println(""String_Node_Str"" + uri.toString());
      Resource resource=emfUtil.getResourceSet().getResource(uri,true);
      EObject eObject=resource.getContents().get(0);
      if (FactoriesUtil.isProvFile(uri.fileExtension())) {
        for (        EObject object : resource.getContents()) {
          if (object instanceof Connection) {
            eObject=object;
            break;
          }
        }
      }
      if (eObject != null) {
        if (eObject instanceof ModelElement) {
          ModelElement modelElement=(ModelElement)eObject;
          AElementPersistance writer=ElementWriterFactory.getInstance().create(uri.fileExtension());
          Property oldPropery=PropertyHelper.getProperty(modelElement);
          if (writer != null) {
            Property property=writer.initProperty(modelElement);
            if (oldPropery != null) {
              property.setAuthor(oldPropery.getAuthor());
              property.getItem().setState(oldPropery.getItem().getState());
            }
            computePath(property,file);
            URI propURI=resource.getURI().trimFileExtension().appendFileExtension(FactoriesUtil.PROPERTIES_EXTENSION);
            Resource propResource=emfUtil.getResourceSet().createResource(propURI);
            propResource.getContents().add(property);
            propResource.getContents().add(property.getItem());
            propResource.getContents().add(property.getItem().getState());
            EMFUtil.saveResource(propResource);
          }
 else {
            log.warn(""String_Node_Str"" + modelElement.getName() + ""String_Node_Str"");
          }
        }
 else {
          log.warn(""String_Node_Str"" + eObject.toString());
        }
      }
    }
  }
  emfUtil=null;
  return true;
}",0.9949005609382968
138824,"/** 
 * DOC bZhou Comment method ""checkProject"".
 * @return
 */
private boolean checkProject(){
  try {
    List<ItemRecord> allItemRecords=ItemRecord.getAllItemRecords();
    for (    ItemRecord record : allItemRecords) {
      if (record.getProperty() != null) {
        this.projectName=PropertyHelper.extractProjectLabel(record.getProperty());
        break;
      }
    }
    return true;
  }
 catch (  Exception e) {
    return false;
  }
}","/** 
 * DOC bZhou Comment method ""checkProject"".
 * @return
 */
private boolean checkProject(){
  return projectName != null;
}",0.418848167539267
138825,"public ItemRecord computeInput(IPath path){
  setBasePath(path);
  if (path != null) {
    versionFile=path.append(EResourceConstant.LIBRARIES.getPath()).append(VERSION_FILE_NAME).toFile();
    definitionFile=path.append(EResourceConstant.LIBRARIES.getPath()).append(DEFINITION_FILE_NAME).toFile();
    if (!versionFile.exists() || !definitionFile.exists()) {
      return null;
    }
  }
  return new ItemRecord(path.toFile());
}","public ItemRecord computeInput(IPath path){
  setBasePath(path);
  if (path != null) {
    versionFile=path.append(EResourceConstant.LIBRARIES.getPath()).append(VERSION_FILE_NAME).toFile();
    definitionFile=path.append(EResourceConstant.LIBRARIES.getPath()).append(DEFINITION_FILE_NAME).toFile();
    if (!versionFile.exists() || !definitionFile.exists()) {
      return null;
    }
    IPath projPath=path.append(""String_Node_Str"");
    if (projPath.toFile().exists()) {
      Object projOBJ=EObjectHelper.retrieveEObject(projPath,PropertiesPackage.eINSTANCE.getProject());
      if (projOBJ != null) {
        Project project=(Project)projOBJ;
        projectName=project.getTechnicalLabel();
      }
    }
 else {
      projectName=ReponsitoryContextBridge.PROJECT_DEFAULT_NAME;
    }
  }
  return new ItemRecord(path.toFile());
}",0.6798418972332015
138826,"public void write(ItemRecord[] records,IProgressMonitor monitor){
  if (monitor == null) {
    monitor=new NullProgressMonitor();
  }
  try {
    for (    ItemRecord record : records) {
      if (monitor.isCanceled()) {
        break;
      }
      Map<IPath,IPath> toImportMap=mapping(record);
      monitor.subTask(""String_Node_Str"" + record.getName());
      if (record.isValid()) {
        log.info(""String_Node_Str"" + record.getFile().getAbsolutePath());
        if (record.getElement() != null) {
          ModelElement element=record.getElement();
          Property property=record.getProperty();
          EResourceConstant typedConstant=EResourceConstant.getTypedConstant(element);
          if (typedConstant != null) {
            IPath folderPath=new Path(typedConstant.getPath());
            ItemState state=property.getItem().getState();
            if (state != null && state.getPath() != null) {
              folderPath.append(state.getPath());
            }
            IFolder folder=ResourceManager.getRootProject().getFolder(folderPath);
            ElementWriterFactory.getInstance().create(element).create(element,folder);
          }
        }
      }
 else {
        for (        String error : record.getErrors()) {
          log.error(error);
        }
      }
      monitor.worked(1);
    }
    if (commonTasks != null) {
      MigrationTaskManager.doMigrationTask(commonTasks,monitor);
    }
    finish(records,monitor);
  }
 catch (  Exception e) {
    log.error(e,e);
  }
}","public void write(ItemRecord[] records,IProgressMonitor monitor){
  if (monitor == null) {
    monitor=new NullProgressMonitor();
  }
  try {
    for (    ItemRecord record : records) {
      if (monitor.isCanceled()) {
        break;
      }
      Map<IPath,IPath> toImportMap=mapping(record);
      monitor.subTask(""String_Node_Str"" + record.getName());
      if (record.isValid()) {
        log.info(""String_Node_Str"" + record.getFile().getAbsolutePath());
        if (record.getElement() != null) {
          ModelElement element=record.getElement();
          Property property=record.getProperty();
          EResourceConstant typedConstant=EResourceConstant.getTypedConstant(element);
          if (typedConstant != null) {
            IPath folderPath=new Path(typedConstant.getPath());
            ItemState state=property.getItem().getState();
            if (state != null && state.getPath() != null) {
              folderPath.append(state.getPath());
            }
            IFolder folder=ResourceManager.getRootProject().getFolder(folderPath);
            AElementPersistance creator=ElementWriterFactory.getInstance().create(element);
            if (creator != null) {
              creator.create(element,folder);
            }
 else {
              log.error(""String_Node_Str"" + element.getName());
            }
          }
        }
      }
 else {
        for (        String error : record.getErrors()) {
          log.error(error);
        }
      }
      monitor.worked(1);
    }
    if (commonTasks != null) {
      MigrationTaskManager.doMigrationTask(commonTasks,monitor);
    }
    finish(records,monitor);
  }
 catch (  Exception e) {
    log.error(e,e);
  }
}",0.9418386491557224
138827,"/** 
 * DOC bZhou Comment method ""isTOPFile"".
 * @param file
 * @return
 */
private boolean isValidDirectory(File file){
  if (!file.getName().startsWith(""String_Node_Str"")) {
    String absolutePath=file.getAbsolutePath();
    for (    EResourceConstant constant : EResourceConstant.getTopConstants()) {
      if (absolutePath.indexOf(constant.getPath()) > 0) {
        if (constant == EResourceConstant.METADATA) {
          return absolutePath.endsWith(constant.getName()) || absolutePath.endsWith(EResourceConstant.DB_CONNECTIONS.getName()) || absolutePath.endsWith(EResourceConstant.MDM_CONNECTIONS.getName());
        }
        return true;
      }
    }
  }
  return false;
}","/** 
 * DOC bZhou Comment method ""isTOPFile"".
 * @param file
 * @return
 */
private boolean isValidDirectory(File file){
  if (!file.getName().startsWith(""String_Node_Str"")) {
    IPath filePath=new Path(file.getAbsolutePath());
    for (    EResourceConstant constant : EResourceConstant.getTopConstants()) {
      if (filePath.toString().indexOf(constant.getPath()) > 0) {
        if (constant == EResourceConstant.METADATA) {
          String lastSeg=filePath.lastSegment();
          return lastSeg.equals(constant.getName()) || lastSeg.equals(EResourceConstant.DB_CONNECTIONS.getName()) || lastSeg.equals(EResourceConstant.MDM_CONNECTIONS.getName());
        }
        return true;
      }
    }
  }
  return false;
}",0.8490028490028491
138828,"protected List<IRepositoryViewObject> fetchRepositoryViewObjectsLower(){
  List<IRepositoryViewObject> connList=new ArrayList<IRepositoryViewObject>();
  if (ResourcesPlugin.getWorkspace().isTreeLocked()) {
    return connList;
  }
  try {
    connList.addAll(ProxyRepositoryFactory.getInstance().getAll(ERepositoryObjectType.METADATA_CONNECTIONS,true));
    clear();
    for (    IRepositoryViewObject reposViewObj : connList) {
      Item item=reposViewObj.getProperty().getItem();
      if (!(item instanceof FolderItem)) {
        DatabaseConnection connection=(DatabaseConnection)((DatabaseConnectionItem)item).getConnection();
        register(connection,reposViewObj);
      }
    }
  }
 catch (  PersistenceException e) {
    log.error(e,e);
  }
  return connList;
}","protected List<IRepositoryViewObject> fetchRepositoryViewObjectsLower(){
  List<IRepositoryViewObject> connList=new ArrayList<IRepositoryViewObject>();
  try {
    connList.addAll(ProxyRepositoryFactory.getInstance().getAll(ERepositoryObjectType.METADATA_CONNECTIONS,true));
    clear();
    for (    IRepositoryViewObject reposViewObj : connList) {
      Item item=reposViewObj.getProperty().getItem();
      if (!(item instanceof FolderItem)) {
        DatabaseConnection connection=(DatabaseConnection)((DatabaseConnectionItem)item).getConnection();
        register(connection,reposViewObj);
      }
    }
  }
 catch (  PersistenceException e) {
    log.error(e,e);
  }
  return connList;
}",0.9455040871934604
138829,"@Override protected List<IRepositoryViewObject> fetchRepositoryViewObjectsLower(){
  List<IRepositoryViewObject> connList=new ArrayList<IRepositoryViewObject>();
  if (ResourcesPlugin.getWorkspace().isTreeLocked()) {
    return connList;
  }
  try {
    connList.addAll(ProxyRepositoryFactory.getInstance().getAll(ERepositoryObjectType.METADATA_MDMCONNECTION,true));
    clear();
    for (    IRepositoryViewObject reposViewObj : connList) {
      Item item=reposViewObj.getProperty().getItem();
      MDMConnection connection=(MDMConnection)((MDMConnectionItem)item).getConnection();
      register(connection,reposViewObj);
    }
  }
 catch (  PersistenceException e) {
    log.error(e,e);
  }
  return connList;
}","@Override protected List<IRepositoryViewObject> fetchRepositoryViewObjectsLower(){
  List<IRepositoryViewObject> connList=new ArrayList<IRepositoryViewObject>();
  try {
    connList.addAll(ProxyRepositoryFactory.getInstance().getAll(ERepositoryObjectType.METADATA_MDMCONNECTION,true));
    clear();
    for (    IRepositoryViewObject reposViewObj : connList) {
      Item item=reposViewObj.getProperty().getItem();
      MDMConnection connection=(MDMConnection)((MDMConnectionItem)item).getConnection();
      register(connection,reposViewObj);
    }
  }
 catch (  PersistenceException e) {
    log.error(e,e);
  }
  return connList;
}",0.940828402366864
138830,"/** 
 * DOC xqliu Comment method ""createPatternCheckedTreeSelectionDialog"".
 * @param libProject
 * @return
 */
public static CheckedTreeSelectionDialog createPatternCheckedTreeSelectionDialog(IFolder libProject){
  CheckedTreeSelectionDialog dialog=new CheckedTreeSelectionDialog(null,new PatternLabelProvider(),new WorkbenchContentProvider());
  dialog.setInput(libProject);
  dialog.setValidator(new ISelectionStatusValidator(){
    public IStatus validate(    Object[] selection){
      IStatus status=Status.OK_STATUS;
      for (      Object patte : selection) {
        if (patte instanceof IFile) {
          IFile file=(IFile)patte;
          if (FactoriesUtil.PATTERN.equals(file.getFileExtension())) {
            Pattern findPattern=PatternResourceFileHelper.getInstance().findPattern(file);
            boolean validStatus=TaggedValueHelper.getValidStatus(findPattern);
            if (!validStatus) {
              status=new Status(IStatus.ERROR,CorePlugin.PLUGIN_ID,DefaultMessagesImpl.getString(""String_Node_Str""));
            }
          }
        }
      }
      return status;
    }
  }
);
  dialog.addFilter(new DQFolderFliter(true));
  dialog.addFilter(new ViewerFilter(){
    @Override public boolean select(    Viewer viewer,    Object parentElement,    Object element){
      if (element instanceof IFile) {
        IFile file=(IFile)element;
        if (FactoriesUtil.PATTERN.equals(file.getFileExtension())) {
          return true;
        }
      }
 else       if (element instanceof IFolder) {
        IFolder folder=(IFolder)element;
        return ResourceService.isSubFolder(ResourceManager.getPatternFolder(),folder);
      }
      return false;
    }
  }
);
  dialog.setContainerMode(true);
  dialog.setTitle(DefaultMessagesImpl.getString(""String_Node_Str""));
  dialog.setMessage(DefaultMessagesImpl.getString(""String_Node_Str""));
  dialog.setSize(80,30);
  return dialog;
}","/** 
 * DOC xqliu Comment method ""createPatternCheckedTreeSelectionDialog"".
 * @param libProject
 * @return
 */
public static CheckedTreeSelectionDialog createPatternCheckedTreeSelectionDialog(IFolder libProject){
  CheckedTreeSelectionDialog dialog=new CheckedTreeSelectionDialog(null,new PatternLabelProvider(),new WorkbenchContentProvider());
  dialog.setInput(libProject);
  dialog.setValidator(new ISelectionStatusValidator(){
    public IStatus validate(    Object[] selection){
      IStatus status=Status.OK_STATUS;
      for (      Object patte : selection) {
        if (patte instanceof IFile) {
          IFile file=(IFile)patte;
          if (FactoriesUtil.PATTERN.equals(file.getFileExtension())) {
            Pattern findPattern=PatternResourceFileHelper.getInstance().findPattern(file);
            boolean validStatus=TaggedValueHelper.getValidStatus(findPattern);
            if (!validStatus) {
              status=new Status(IStatus.ERROR,CorePlugin.PLUGIN_ID,DefaultMessagesImpl.getString(""String_Node_Str""));
            }
          }
        }
      }
      return status;
    }
  }
);
  dialog.addFilter(new DQFolderFliter(true));
  dialog.addFilter(new RecycleBinFilter());
  dialog.addFilter(new ViewerFilter(){
    @Override public boolean select(    Viewer viewer,    Object parentElement,    Object element){
      if (element instanceof IFile) {
        IFile file=(IFile)element;
        if (FactoriesUtil.PATTERN.equals(file.getFileExtension())) {
          return true;
        }
      }
 else       if (element instanceof IFolder) {
        IFolder folder=(IFolder)element;
        return ResourceService.isSubFolder(ResourceManager.getPatternFolder(),folder);
      }
      return false;
    }
  }
);
  dialog.setContainerMode(true);
  dialog.setTitle(DefaultMessagesImpl.getString(""String_Node_Str""));
  dialog.setMessage(DefaultMessagesImpl.getString(""String_Node_Str""));
  dialog.setSize(80,30);
  return dialog;
}",0.9886128364389234
138831,"public IndicatorCheckedTreeSelectionDialog(Shell parent,ILabelProvider labelProvider,ITreeContentProvider contentProvider){
  super(parent,labelProvider,contentProvider);
  addFilter(new DQFolderFliter(true));
}","public IndicatorCheckedTreeSelectionDialog(Shell parent,ILabelProvider labelProvider,ITreeContentProvider contentProvider){
  super(parent,labelProvider,contentProvider);
  addFilter(new DQFolderFliter(true));
  addFilter(new RecycleBinFilter());
}",0.9193899782135077
138832,"/** 
 * DOC xqliu Comment method ""createUdiCheckedTreeSelectionDialog"".
 * @param udiProject
 * @return
 */
public static CheckedTreeSelectionDialog createUdiCheckedTreeSelectionDialog(IFolder udiProject){
  CheckedTreeSelectionDialog dialog=new CheckedTreeSelectionDialog(null,new UdiLabelProvider(),new WorkbenchContentProvider());
  dialog.setInput(udiProject);
  dialog.setValidator(new ISelectionStatusValidator(){
    public IStatus validate(    Object[] selection){
      IStatus status=Status.OK_STATUS;
      for (      Object udi : selection) {
        if (udi instanceof IFile) {
          IFile file=(IFile)udi;
          if (FactoriesUtil.DEFINITION.equals(file.getFileExtension())) {
            IndicatorDefinition findUdi=IndicatorResourceFileHelper.getInstance().findIndDefinition(file);
            boolean validStatus=TaggedValueHelper.getValidStatus(findUdi);
            if (!validStatus) {
              status=new Status(IStatus.ERROR,CorePlugin.PLUGIN_ID,DefaultMessagesImpl.getString(""String_Node_Str""));
            }
          }
        }
      }
      return status;
    }
  }
);
  dialog.addFilter(new DQFolderFliter(true));
  dialog.addFilter(new ViewerFilter(){
    @Override public boolean select(    Viewer viewer,    Object parentElement,    Object element){
      if (element instanceof IFile) {
        IFile file=(IFile)element;
        if (FactoriesUtil.DEFINITION.equals(file.getFileExtension())) {
          return true;
        }
      }
 else       if (element instanceof IFolder) {
        IFolder folder=(IFolder)element;
        return ResourceService.isSubFolder(ResourceManager.getUDIFolder(),folder);
      }
      return false;
    }
  }
);
  dialog.setContainerMode(true);
  dialog.setTitle(DefaultMessagesImpl.getString(""String_Node_Str""));
  dialog.setMessage(DefaultMessagesImpl.getString(""String_Node_Str""));
  dialog.setSize(80,30);
  return dialog;
}","/** 
 * DOC xqliu Comment method ""createUdiCheckedTreeSelectionDialog"".
 * @param udiProject
 * @return
 */
public static CheckedTreeSelectionDialog createUdiCheckedTreeSelectionDialog(IFolder udiProject){
  CheckedTreeSelectionDialog dialog=new CheckedTreeSelectionDialog(null,new UdiLabelProvider(),new WorkbenchContentProvider());
  dialog.addFilter(new RecycleBinFilter());
  dialog.setInput(udiProject);
  dialog.setValidator(new ISelectionStatusValidator(){
    public IStatus validate(    Object[] selection){
      IStatus status=Status.OK_STATUS;
      for (      Object udi : selection) {
        if (udi instanceof IFile) {
          IFile file=(IFile)udi;
          if (FactoriesUtil.DEFINITION.equals(file.getFileExtension())) {
            IndicatorDefinition findUdi=IndicatorResourceFileHelper.getInstance().findIndDefinition(file);
            boolean validStatus=TaggedValueHelper.getValidStatus(findUdi);
            if (!validStatus) {
              status=new Status(IStatus.ERROR,CorePlugin.PLUGIN_ID,DefaultMessagesImpl.getString(""String_Node_Str""));
            }
          }
        }
      }
      return status;
    }
  }
);
  dialog.addFilter(new DQFolderFliter(true));
  dialog.addFilter(new ViewerFilter(){
    @Override public boolean select(    Viewer viewer,    Object parentElement,    Object element){
      if (element instanceof IFile) {
        IFile file=(IFile)element;
        if (FactoriesUtil.DEFINITION.equals(file.getFileExtension())) {
          return true;
        }
      }
 else       if (element instanceof IFolder) {
        IFolder folder=(IFolder)element;
        return ResourceService.isSubFolder(ResourceManager.getUDIFolder(),folder);
      }
      return false;
    }
  }
);
  dialog.setContainerMode(true);
  dialog.setTitle(DefaultMessagesImpl.getString(""String_Node_Str""));
  dialog.setMessage(DefaultMessagesImpl.getString(""String_Node_Str""));
  dialog.setSize(80,30);
  return dialog;
}",0.9885892116182572
138833,"/** 
 * DOC bZhou Comment method ""doMigrationTask"".
 * @param tasks
 * @param monitor
 */
public static void doMigrationTask(List<IMigrationTask> tasks,IProgressMonitor monitor){
  monitor.beginTask(""String_Node_Str"",tasks.size());
  for (  IMigrationTask task : tasks) {
    if (monitor.isCanceled()) {
      break;
    }
    monitor.subTask(task.getName());
    if (task.valid()) {
      if (!task.execute()) {
        log.warn(""String_Node_Str"" + task.getName());
      }
 else {
        log.info(""String_Node_Str"" + task.getName());
        System.out.println(""String_Node_Str"" + task.getName());
      }
    }
    monitor.worked(1);
  }
  monitor.done();
}","/** 
 * DOC bZhou Comment method ""doMigrationTask"".
 * @param tasks
 * @param monitor
 */
public static void doMigrationTask(List<IMigrationTask> tasks,IProgressMonitor monitor){
  if (monitor == null) {
    monitor=new NullProgressMonitor();
  }
  monitor.beginTask(""String_Node_Str"",tasks.size());
  for (  IMigrationTask task : tasks) {
    if (monitor.isCanceled()) {
      break;
    }
    monitor.subTask(task.getName());
    if (task.valid()) {
      if (!task.execute()) {
        log.warn(""String_Node_Str"" + task.getName());
      }
 else {
        log.info(""String_Node_Str"" + task.getName());
        System.out.println(""String_Node_Str"" + task.getName());
      }
    }
    monitor.worked(1);
  }
  monitor.done();
}",0.9510791366906476
138834,"public void migration(IProgressMonitor monitor){
  List<IMigrationTask> modelTasks=new ArrayList<IMigrationTask>();
  if (versionFile != null && versionFile.exists()) {
    ProductVersion version=WorkspaceVersionHelper.getVesion(new Path(versionFile.getAbsolutePath()));
    Iterator<IMigrationTask> it=MigrationTaskManager.findWorkspaceTaskByType(MigrationTaskType.FILE,version).iterator();
    while (it.hasNext()) {
      IMigrationTask task=it.next();
      if (isModelTask(task)) {
        ((AbstractWorksapceUpdateTask)task).setWorkspacePath(basePath);
        modelTasks.add(task);
      }
 else {
        commonTasks.add(task);
      }
    }
  }
  if (!modelTasks.isEmpty()) {
    if (monitor == null) {
      monitor=new NullProgressMonitor();
    }
    MigrationTaskManager.doMigrationTask(modelTasks,monitor);
    WorkspaceVersionHelper.storeVersion(versionFile);
  }
}","public void migration(IProgressMonitor monitor){
  List<IMigrationTask> modelTasks=new ArrayList<IMigrationTask>();
  if (versionFile != null && versionFile.exists()) {
    ProductVersion version=WorkspaceVersionHelper.getVesion(new Path(versionFile.getAbsolutePath()));
    Iterator<IMigrationTask> it=MigrationTaskManager.findWorkspaceTaskByType(MigrationTaskType.FILE,version).iterator();
    while (it.hasNext()) {
      IMigrationTask task=it.next();
      if (isModelTask(task)) {
        ((AbstractWorksapceUpdateTask)task).setWorkspacePath(basePath);
        modelTasks.add(task);
      }
 else {
        commonTasks.add(task);
      }
    }
  }
  if (!modelTasks.isEmpty()) {
    MigrationTaskManager.doMigrationTask(modelTasks,monitor);
    WorkspaceVersionHelper.storeVersion(versionFile);
  }
}",0.8291814946619217
138835,"/** 
 * DOC bZhou Comment method ""isTOPFile"".
 * @param file
 * @return
 */
private boolean isValidDirectory(File file){
  String absolutePath=file.getAbsolutePath();
  boolean tdqProject=false;
  File[] listFiles=file.listFiles();
  if (listFiles != null) {
    for (    File afile : listFiles) {
      if (StringUtils.equals(afile.getName(),""String_Node_Str"")) {
        tdqProject=true;
        break;
      }
    }
  }
  return (absolutePath.indexOf(EResourceConstant.DATA_PROFILING.getName()) > 0 || absolutePath.indexOf(EResourceConstant.LIBRARIES.getName()) > 0 || absolutePath.indexOf(EResourceConstant.METADATA.getName()) > 0 || absolutePath.indexOf(""String_Node_Str"") > 0 || StringUtils.equals(file.getName(),ReponsitoryContextBridge.PROJECT_DEFAULT_NAME) || tdqProject) && !file.getName().startsWith(""String_Node_Str"");
}","/** 
 * DOC bZhou Comment method ""isTOPFile"".
 * @param file
 * @return
 */
private boolean isValidDirectory(File file){
  if (!file.getName().startsWith(""String_Node_Str"")) {
    String absolutePath=file.getAbsolutePath();
    for (    EResourceConstant constant : EResourceConstant.getTopConstants()) {
      if (absolutePath.indexOf(constant.getPath()) > 0) {
        return true;
      }
    }
  }
  return false;
}",0.3405275779376499
138836,"/** 
 * DOC bZhou Comment method ""create"".
 * @param element
 * @param file
 * @param withProperty
 * @return
 */
public ReturnCode create(ModelElement element,IFile file,boolean withProperty){
  ReturnCode rc=new ReturnCode();
  if (!check(file)) {
    rc.setReturnCode(""String_Node_Str"",false);
  }
 else {
    IPath itemPath=file.getFullPath();
    IPath propPath=itemPath.removeFileExtension().addFileExtension(FactoriesUtil.PROPERTIES_EXTENSION);
    if (withProperty) {
      Property property=createProperty(element,propPath);
      if (property.getItem() instanceof TDQItem) {
        ((TDQItem)property.getItem()).setFilename(file.getName());
        saveProperty(property);
      }
    }
    if (!util.addEObjectToResourceSet(itemPath.toString(),element)) {
      rc.setReturnCode(""String_Node_Str"" + util.getLastErrorMessage(),false);
    }
 else {
      if (element instanceof RenderedObject) {
        ((RenderedObject)element).setFileName(itemPath.toString());
      }
      rc=save(element);
    }
  }
  return rc;
}","/** 
 * DOC bZhou Comment method ""create"".
 * @param element
 * @param file
 * @param withProperty
 * @return
 */
public ReturnCode create(ModelElement element,IFile file,boolean withProperty){
  ReturnCode rc=new ReturnCode();
  if (!check(file)) {
    rc.setReturnCode(""String_Node_Str"",false);
  }
 else {
    IPath itemPath=file.getFullPath();
    IPath propPath=itemPath.removeFileExtension().addFileExtension(FactoriesUtil.PROPERTIES_EXTENSION);
    if (withProperty) {
      Property property=createProperty(element,propPath,file.getName());
    }
    if (!util.addEObjectToResourceSet(itemPath.toString(),element)) {
      rc.setReturnCode(""String_Node_Str"" + util.getLastErrorMessage(),false);
    }
 else {
      if (element instanceof RenderedObject) {
        ((RenderedObject)element).setFileName(itemPath.toString());
      }
      rc=save(element);
    }
  }
  return rc;
}",0.9098488796248044
138837,"/** 
 * DOC Zqin Comment method ""showSelectedElements"".MOD 2009-01-07 mzhao.
 * @param newTree
 */
private void showSelectedElements(Tree newTree){
  TreeItem[] selection=newTree.getSelection();
  DQRespositoryView dqview=CorePlugin.getDefault().getRepositoryView();
  if (selection.length == 1) {
    try {
      ModelElementIndicator meIndicator=(ModelElementIndicator)selection[0].getData(AbstractColumnDropTree.MODELELEMENT_INDICATOR_KEY);
      ModelElement me=meIndicator.getModelElement();
      CorePlugin.getDefault().refreshDQView();
      dqview.showSelectedElements(me);
    }
 catch (    Exception e) {
      log.error(e,e);
    }
  }
}","/** 
 * DOC Zqin Comment method ""showSelectedElements"".MOD 2009-01-07 mzhao.
 * @param newTree
 */
private void showSelectedElements(Tree newTree){
  TreeItem[] selection=newTree.getSelection();
  DQRespositoryView dqview=CorePlugin.getDefault().getRepositoryView();
  if (selection.length == 1) {
    try {
      ModelElementIndicator meIndicator=(ModelElementIndicator)selection[0].getData(AbstractColumnDropTree.MODELELEMENT_INDICATOR_KEY);
      ModelElement me=meIndicator.getModelElement();
      dqview.showSelectedElements(me);
    }
 catch (    Exception e) {
      log.error(e,e);
    }
  }
}",0.9624300559552358
138838,"/** 
 * DOC Zqin Comment method ""showSelectedElements"". MOD 2009-01-07 mzhao for feature:0005664
 * @param newTree
 */
public void showSelectedElements(Object selectedElement){
  try {
    getCommonViewer().refresh();
    StructuredSelection structSel=new StructuredSelection(selectedElement);
    getCommonViewer().setSelection(structSel);
    StructuredSelection selectionTarge=(StructuredSelection)getCommonViewer().getSelection();
    if (!selectionTarge.equals(structSel)) {
      recursiveExpandTree(selectedElement);
      getCommonViewer().setSelection(structSel);
    }
  }
 catch (  Exception e) {
    log.error(e,e);
  }
}","/** 
 * DOC Zqin Comment method ""showSelectedElements"". MOD 2009-01-07 mzhao for feature:0005664
 * @param newTree
 */
public void showSelectedElements(Object selectedElement){
  try {
    StructuredSelection structSel=new StructuredSelection(selectedElement);
    getCommonViewer().setSelection(structSel);
    StructuredSelection selectionTarge=(StructuredSelection)getCommonViewer().getSelection();
    if (!selectionTarge.equals(structSel)) {
      getCommonViewer().refresh();
      recursiveExpandTree(selectedElement);
      getCommonViewer().setSelection(structSel);
    }
  }
 catch (  Exception e) {
    log.error(e,e);
  }
}",0.582018927444795
138839,"public Object getParent(Object element){
  if (element instanceof IFile) {
    return ((IResource)element).getParent();
  }
  Object returnObj=super.getParent(element);
  return returnObj;
}","public Object getParent(Object element){
  if (element instanceof IFile) {
    return ((IResource)element).getParent();
  }
 else   if (element instanceof IRepositoryViewObject) {
    Item item=((IRepositoryViewObject)element).getProperty().getItem();
    if (item instanceof DatabaseConnectionItem) {
      return ResourceManager.getConnectionFolder();
    }
 else     if (item instanceof MDMConnectionItem) {
      return ResourceManager.getMDMConnectionFolder();
    }
  }
  Object returnObj=super.getParent(element);
  if (returnObj instanceof CwmResource) {
    for (    EObject conn : ((CwmResource)returnObj).getContents()) {
      if (conn instanceof Connection) {
        IRepositoryViewObject repObjec=ProxyRepositoryViewObject.getRepositoryViewObject((Connection)conn);
        if (repObjec == null) {
          break;
        }
        return repObjec;
      }
    }
  }
 else   if (returnObj == null && element instanceof PackageImpl && ((PackageImpl)element).getDataManager().size() > 0) {
    for (    EObject conn : ((PackageImpl)element).getDataManager()) {
      if (conn instanceof Connection) {
        IRepositoryViewObject repObjec=ProxyRepositoryViewObject.getRepositoryViewObject((Connection)conn);
        if (repObjec == null) {
          break;
        }
        return repObjec;
      }
    }
  }
  return returnObj;
}",0.1809895833333333
138840,"/** 
 * DOC mzhao Get all database connections.
 * @return
 */
public static List<Connection> getAllDatabaseConnections(){
  List<Connection> metadataConns=new ArrayList<Connection>();
  metadataConns.addAll(getDBConnectionInstance().getAllElements());
  return metadataConns;
}","/** 
 * DOC yyi Comment method ""getAllDatabaseConnections"".
 * @param excludeRecycleBin
 * @return
 */
public static List<Connection> getAllDatabaseConnections(boolean excludeRecycleBin){
  List<Connection> connections=new ArrayList<Connection>();
  if (excludeRecycleBin) {
    for (    Connection con : getAllDatabaseConnections()) {
      if (null != con.eResource() && !PropertyHelper.getProperty(con).getItem().getState().isDeleted()) {
        connections.add(con);
      }
    }
  }
  return connections;
}",0.316055625790139
138841,"/** 
 * DOC mzhao Get all mdm connections.
 * @return
 */
public static List<Connection> getAllMDMConnections(){
  List<Connection> metadataConns=new ArrayList<Connection>();
  metadataConns.addAll(getMDMConnectionInstance().getAllElements());
  return metadataConns;
}","/** 
 * DOC yyi Comment method ""getAllDatabaseConnections"".
 * @param excludeRecycleBin
 * @return
 */
public static List<Connection> getAllMDMConnections(boolean excludeRecycleBin){
  List<Connection> connections=new ArrayList<Connection>();
  if (excludeRecycleBin) {
    for (    Connection con : getAllMDMConnections()) {
      if (null != con.eResource() && !PropertyHelper.getProperty(con).getItem().getState().isDeleted()) {
        connections.add(con);
      }
    }
  }
  return connections;
}",0.4455958549222797
138842,"protected void reloadDataproviderAndFillConnCombo(){
  Collection<Connection> connections=ProxyRepositoryViewObject.getAllDatabaseConnections();
  Collection<Connection> mdmConne=ProxyRepositoryViewObject.getAllMDMConnections();
  connections.addAll(mdmConne);
  int index=0;
  connCombo.removeAll();
  for (  Connection prov : connections) {
    connCombo.add(prov.getName(),index);
    connCombo.setData(prov.getName(),index);
    connCombo.setData(index + ""String_Node_Str"",prov);
    index++;
  }
  if (index > 0) {
    connCombo.select(0);
  }
}","protected void reloadDataproviderAndFillConnCombo(){
  Collection<Connection> connections=ProxyRepositoryViewObject.getAllDatabaseConnections(true);
  Collection<Connection> mdmConne=ProxyRepositoryViewObject.getAllMDMConnections(true);
  connections.addAll(mdmConne);
  int index=0;
  connCombo.removeAll();
  for (  Connection prov : connections) {
    connCombo.add(prov.getName(),index);
    connCombo.setData(prov.getName(),index);
    connCombo.setData(index + ""String_Node_Str"",prov);
    index++;
  }
  if (index > 0) {
    connCombo.select(0);
  }
}",0.9927797833935018
138843,"/** 
 * Method ""getColumns"".
 * @param catalogName a catalog name; must match the catalog name as it is stored in the database; """" retrievesthose without a catalog; null means that the catalog name should not be used to narrow the search
 * @param schemaPattern a schema name pattern; must match the schema name as it is stored in the database; """"retrieves those without a schema; null means that the schema name should not be used to narrow the search
 * @param tablePattern a table name pattern; must match the table name as it is stored in the database
 * @param columnPattern a column name pattern; must match the column name as it is stored in the database
 * @throws SQLException
 * @see DatabaseMetaData#getColumns(String,String,String,String)
 */
public List<TdColumn> getColumns(String catalogName,String schemaPattern,String tablePattern,String columnPattern) throws SQLException {
  List<TdColumn> tableColumns=new ArrayList<TdColumn>();
  ResultSet columns=getConnectionMetadata(connection).getColumns(catalogName,schemaPattern,tablePattern,columnPattern);
  while (columns.next()) {
    TdColumn column=RelationalFactory.eINSTANCE.createTdColumn();
    tableColumns.add(TDColumnAttributeHelper.addColumnAttribute(columns,column));
  }
  columns.close();
  return tableColumns;
}","/** 
 * Method ""getColumns"".
 * @param catalogName a catalog name; must match the catalog name as it is stored in the database; """" retrievesthose without a catalog; null means that the catalog name should not be used to narrow the search
 * @param schemaPattern a schema name pattern; must match the schema name as it is stored in the database; """"retrieves those without a schema; null means that the schema name should not be used to narrow the search
 * @param tablePattern a table name pattern; must match the table name as it is stored in the database
 * @param columnPattern a column name pattern; must match the column name as it is stored in the database
 * @throws SQLException
 * @see DatabaseMetaData#getColumns(String,String,String,String)
 */
public List<TdColumn> getColumns(String catalogName,String schemaPattern,String tablePattern,String columnPattern) throws SQLException {
  List<TdColumn> tableColumns=new ArrayList<TdColumn>();
  ResultSet columns=getConnectionMetadata(connection).getColumns(catalogName,schemaPattern,tablePattern,columnPattern);
  while (columns.next()) {
    TdColumn column=RelationalFactory.eINSTANCE.createTdColumn();
    tableColumns.add(TDColumnAttributeHelper.addColumnAttribute(columns,column,connection));
  }
  columns.close();
  return tableColumns;
}",0.9957578094870806
138844,"/** 
 * DOC zshen fetch repository view object all of under the path.
 * @param reload whether reload all of element
 * @param itemType the type of item which you want
 * @param path path of folder
 * @return
 */
public List<IRepositoryViewObject> fetchRepositoryViewObjectsByFolder(boolean reload,ERepositoryObjectType itemType,IPath path){
  if (reload) {
    fetchRepositoryViewObjectsLower();
  }
  List<IRepositoryViewObject> folderRepositoryObjectList=ProxyRepositoryFactory.getInstance().getMetadataByFolder(itemType,path);
  return folderRepositoryObjectList;
}","/** 
 * DOC zshen fetch repository view object all of under the path.
 * @param reload whether reload all of element
 * @param itemType the type of item which you want
 * @param path path of folder
 * @return
 */
public List<IRepositoryViewObject> fetchRepositoryViewObjectsByFolder(boolean reload,ERepositoryObjectType itemType,IPath path){
  if (reload) {
    fetchRepositoryViewObjectsLower();
  }
  List<IRepositoryViewObject> folderRepositoryObjectList=ProxyRepositoryFactory.getInstance().getMetadataByFolder(itemType,path);
  List<IRepositoryViewObject> returnList=new ArrayList<IRepositoryViewObject>();
  for (  IRepositoryViewObject newRepositoryObject : folderRepositoryObjectList) {
    returnList.add(this.getReposViewObjByProperty(newRepositoryObject.getProperty()));
  }
  return returnList;
}",0.7872185911401598
138845,"/** 
 * DOC bZhou Comment method ""decorateCategoryPlot"".
 * @param chart
 */
public static void decorateCategoryPlot(JFreeChart chart){
  CategoryPlot plot=chart.getCategoryPlot();
  CategoryItemRenderer render=plot.getRenderer();
  CategoryAxis domainAxis=plot.getDomainAxis();
  domainAxis.setCategoryMargin(0.01);
  ValueAxis valueAxis=plot.getRangeAxis();
  Font font=new Font(""String_Node_Str"",Font.BOLD,BASE_ITEM_LABEL_SIZE);
  render.setBaseItemLabelFont(font);
  font=new Font(""String_Node_Str"",Font.BOLD,BASE_LABEL_SIZE);
  domainAxis.setLabelFont(font);
  font=new Font(""String_Node_Str"",Font.BOLD,BASE_LABEL_SIZE);
  valueAxis.setLabelFont(font);
  font=new Font(""String_Node_Str"",Font.PLAIN,BASE_TICK_LABEL_SIZE);
  domainAxis.setTickLabelFont(font);
  valueAxis.setTickLabelFont(font);
  font=new Font(""String_Node_Str"",Font.PLAIN,BASE_LEGEND_LABEL_SIZE);
  LegendTitle legend=chart.getLegend();
  if (legend != null) {
    legend.setItemFont(font);
  }
  font=new Font(""String_Node_Str"",Font.BOLD,BASE_TITLE_LABEL_SIZE);
  TextTitle title=chart.getTitle();
  if (title != null) {
    title.setFont(font);
  }
  font=null;
  if (render instanceof BarRenderer) {
    int rowCount=chart.getCategoryPlot().getDataset().getRowCount();
    domainAxis.setTickLabelFont(new Font(""String_Node_Str"",Font.PLAIN,10));
    domainAxis.setUpperMargin(0.1);
    domainAxis.setMaximumCategoryLabelLines(10);
    ((BarRenderer)render).setItemMargin(-0.40 * rowCount);
  }
}","/** 
 * DOC bZhou Comment method ""decorateCategoryPlot"".
 * @param chart
 */
public static void decorateCategoryPlot(JFreeChart chart){
  CategoryPlot plot=chart.getCategoryPlot();
  CategoryItemRenderer render=plot.getRenderer();
  CategoryAxis domainAxis=plot.getDomainAxis();
  domainAxis.setCategoryMargin(0.01);
  ValueAxis valueAxis=plot.getRangeAxis();
  Font font=new Font(""String_Node_Str"",Font.BOLD,BASE_ITEM_LABEL_SIZE);
  render.setBaseItemLabelFont(font);
  font=new Font(""String_Node_Str"",Font.BOLD,BASE_LABEL_SIZE);
  domainAxis.setLabelFont(font);
  font=new Font(""String_Node_Str"",Font.BOLD,BASE_LABEL_SIZE);
  valueAxis.setLabelFont(font);
  font=new Font(""String_Node_Str"",Font.PLAIN,BASE_TICK_LABEL_SIZE);
  domainAxis.setTickLabelFont(font);
  valueAxis.setTickLabelFont(font);
  font=new Font(""String_Node_Str"",Font.PLAIN,BASE_LEGEND_LABEL_SIZE);
  LegendTitle legend=chart.getLegend();
  if (legend != null) {
    legend.setItemFont(font);
  }
  font=new Font(""String_Node_Str"",Font.BOLD,BASE_TITLE_LABEL_SIZE);
  TextTitle title=chart.getTitle();
  if (title != null) {
    title.setFont(font);
  }
  font=null;
  if (render instanceof BarRenderer) {
    int rowCount=chart.getCategoryPlot().getDataset().getRowCount();
    if (!isContainsChineseColumn(chart))     domainAxis.setTickLabelFont(new Font(""String_Node_Str"",Font.PLAIN,10));
    domainAxis.setUpperMargin(0.1);
    domainAxis.setMaximumCategoryLabelLines(10);
    ((BarRenderer)render).setItemMargin(-0.40 * rowCount);
  }
}",0.9862369922792884
138846,"/** 
 * Method ""getColumns"".
 * @param catalogName a catalog name; must match the catalog name as it is stored in the database; """" retrievesthose without a catalog; null means that the catalog name should not be used to narrow the search
 * @param schemaPattern a schema name pattern; must match the schema name as it is stored in the database; """"retrieves those without a schema; null means that the schema name should not be used to narrow the search
 * @param tablePattern a table name pattern; must match the table name as it is stored in the database
 * @param columnPattern a column name pattern; must match the column name as it is stored in the database
 * @throws SQLException
 * @see DatabaseMetaData#getColumns(String,String,String,String)
 */
public List<TdColumn> getColumns(String catalogName,String schemaPattern,String tablePattern,String columnPattern) throws SQLException {
  List<TdColumn> tableColumns=new ArrayList<TdColumn>();
  ResultSet columns=getConnectionMetadata(connection).getColumns(catalogName,schemaPattern,tablePattern,columnPattern);
  while (columns.next()) {
    TdColumn column=RelationalFactory.eINSTANCE.createTdColumn();
    tableColumns.add(TDColumnAttributeHelper.addColumnAttribute(columns,column,connection));
  }
  columns.close();
  return tableColumns;
}","/** 
 * Method ""getColumns"".
 * @param catalogName a catalog name; must match the catalog name as it is stored in the database; """" retrievesthose without a catalog; null means that the catalog name should not be used to narrow the search
 * @param schemaPattern a schema name pattern; must match the schema name as it is stored in the database; """"retrieves those without a schema; null means that the schema name should not be used to narrow the search
 * @param tablePattern a table name pattern; must match the table name as it is stored in the database
 * @param columnPattern a column name pattern; must match the column name as it is stored in the database
 * @throws SQLException
 * @see DatabaseMetaData#getColumns(String,String,String,String)
 */
public List<TdColumn> getColumns(String catalogName,String schemaPattern,String tablePattern,String columnPattern) throws SQLException {
  List<TdColumn> tableColumns=new ArrayList<TdColumn>();
  ResultSet columns=getConnectionMetadata(connection).getColumns(catalogName,schemaPattern,tablePattern,columnPattern);
  while (columns.next()) {
    TdColumn column=RelationalFactory.eINSTANCE.createTdColumn();
    tableColumns.add(TDColumnAttributeHelper.addColumnAttribute(columns,column));
  }
  columns.close();
  return tableColumns;
}",0.9957578094870806
138847,"public Object[] getElements(Object inputElement){
  if (!(inputElement instanceof ColumnSet || inputElement instanceof TdXmlSchema || (inputElement instanceof TdXmlElementType && !XmlElementHelper.isLeafNode((TdXmlElementType)inputElement)))) {
    return new Object[0];
  }
  EObject eObj=(EObject)inputElement;
  ColumnSet columnSet=SwitchHelpers.COLUMN_SET_SWITCH.doSwitch(eObj);
  if (columnSet != null) {
    TdColumn[] columns=EObjectHelper.getColumns(columnSet);
    if (columns.length <= 0) {
      Package parentCatalogOrSchema=ColumnSetHelper.getParentCatalogOrSchema(columnSet);
      if (parentCatalogOrSchema == null) {
        return null;
      }
      Connection conn=DataProviderHelper.getTdDataProvider(parentCatalogOrSchema);
      if (conn == null) {
        return null;
      }
      try {
        List<TdColumn> columnList=DqRepositoryViewService.getColumns(conn,columnSet,null,true);
        columns=columnList.toArray(new TdColumn[columnList.size()]);
      }
 catch (      TalendException e) {
        MessageBoxExceptionHandler.process(e);
      }
      ProxyRepositoryViewObject.save(conn);
    }
    return sort(columns,ComparatorsFactory.MODELELEMENT_COMPARATOR_ID);
  }
 else {
    TdXmlSchema xmlDocument=SwitchHelpers.XMLSCHEMA_SWITCH.doSwitch(eObj);
    if (xmlDocument != null) {
      List<ModelElement> xmlElements=DqRepositoryViewService.getXMLElements(xmlDocument);
      List<TdXmlElementType> leafNodes=XmlElementHelper.getLeafNode(xmlElements);
      return sort(leafNodes.toArray(),ComparatorsFactory.MODELELEMENT_COMPARATOR_ID);
    }
 else {
      TdXmlElementType xmlElement=SwitchHelpers.XMLELEMENTTYPE_SWITCH.doSwitch(eObj);
      if (xmlElement != null) {
        List<TdXmlElementType> xmlElements=DqRepositoryViewService.getXMLElements(xmlElement);
        List<TdXmlElementType> leafNodes=XmlElementHelper.getLeafNode(xmlElements);
        return sort(leafNodes.toArray(),ComparatorsFactory.MODELELEMENT_COMPARATOR_ID);
      }
    }
  }
  return null;
}","public Object[] getElements(Object inputElement){
  if (!(inputElement instanceof ColumnSet || inputElement instanceof TdXmlSchema || (inputElement instanceof TdXmlElementType && !XmlElementHelper.isLeafNode((TdXmlElementType)inputElement)))) {
    return new Object[0];
  }
  EObject eObj=(EObject)inputElement;
  ColumnSet columnSet=SwitchHelpers.COLUMN_SET_SWITCH.doSwitch(eObj);
  if (columnSet != null) {
    TdColumn[] columns=EObjectHelper.getColumns(columnSet);
    if (columns.length <= 0) {
      Package parentCatalogOrSchema=ColumnSetHelper.getParentCatalogOrSchema(columnSet);
      if (parentCatalogOrSchema == null) {
        return null;
      }
      Connection conn=DataProviderHelper.getTdDataProvider(parentCatalogOrSchema);
      if (conn == null) {
        return null;
      }
      try {
        List<TdColumn> columnList=DqRepositoryViewService.getColumns(conn,columnSet,null,true);
        columns=columnList.toArray(new TdColumn[columnList.size()]);
      }
 catch (      TalendException e) {
        MessageBoxExceptionHandler.process(e);
      }
      ProxyRepositoryViewObject.fetchAllDBRepositoryViewObjects(Boolean.TRUE);
      ProxyRepositoryViewObject.save(conn);
    }
    return sort(columns,ComparatorsFactory.MODELELEMENT_COMPARATOR_ID);
  }
 else {
    TdXmlSchema xmlDocument=SwitchHelpers.XMLSCHEMA_SWITCH.doSwitch(eObj);
    if (xmlDocument != null) {
      List<ModelElement> xmlElements=DqRepositoryViewService.getXMLElements(xmlDocument);
      List<TdXmlElementType> leafNodes=XmlElementHelper.getLeafNode(xmlElements);
      return sort(leafNodes.toArray(),ComparatorsFactory.MODELELEMENT_COMPARATOR_ID);
    }
 else {
      TdXmlElementType xmlElement=SwitchHelpers.XMLELEMENTTYPE_SWITCH.doSwitch(eObj);
      if (xmlElement != null) {
        List<TdXmlElementType> xmlElements=DqRepositoryViewService.getXMLElements(xmlElement);
        List<TdXmlElementType> leafNodes=XmlElementHelper.getLeafNode(xmlElements);
        return sort(leafNodes.toArray(),ComparatorsFactory.MODELELEMENT_COMPARATOR_ID);
      }
    }
  }
  return null;
}",0.9806893180151552
138848,"@Override public boolean canDrop(ModelElement modelElement){
  Connection tdProvider=ModelElementHelper.getTdDataProvider(modelElement);
  if (tdProvider == null) {
    return false;
  }
 else   if (this.getAnalysis().getContext().getConnection() != null && !tdProvider.equals(this.getAnalysis().getContext().getConnection())) {
    return false;
  }
  if (masterPage.isDirty()) {
    masterPage.doSave(new NullProgressMonitor());
    return false;
  }
  List<ModelElement> existModelElements=new ArrayList<ModelElement>();
  for (  ModelElementIndicator modelElementIndicator : this.getModelElementIndicator()) {
    existModelElements.add(modelElementIndicator.getModelElement());
  }
  if (modelElement instanceof TdTable) {
    return !existModelElements.containsAll(ColumnSetHelper.getColumns((TdTable)modelElement));
  }
  if (existModelElements.contains(modelElement)) {
    return false;
  }
  if (modelElement instanceof TdXmlElementType) {
    return XmlElementHelper.isLeafNode((TdXmlElementType)modelElement);
  }
  return true;
}","@Override public boolean canDrop(ModelElement modelElement){
  Connection tdProvider=ModelElementHelper.getTdDataProvider(modelElement);
  if (tdProvider == null) {
    return false;
  }
 else   if (this.getAnalysis().getContext().getConnection() != null && !ProxyRepositoryViewObject.areSame(tdProvider,this.getAnalysis().getContext().getConnection())) {
    return false;
  }
  if (masterPage.isDirty()) {
    masterPage.doSave(new NullProgressMonitor());
    return false;
  }
  List<ModelElement> existModelElements=new ArrayList<ModelElement>();
  for (  ModelElementIndicator modelElementIndicator : this.getModelElementIndicator()) {
    existModelElements.add(modelElementIndicator.getModelElement());
  }
  if (modelElement instanceof TdTable) {
    return !existModelElements.containsAll(ColumnSetHelper.getColumns((TdTable)modelElement));
  }
  if (existModelElements.contains(modelElement)) {
    return false;
  }
  if (modelElement instanceof TdXmlElementType) {
    return XmlElementHelper.isLeafNode((TdXmlElementType)modelElement);
  }
  return true;
}",0.9777356702984368
138849,"@Override public Object[] getChildren(Object element){
  if (element instanceof IWorkspaceRoot) {
    Object currentOpenProject=null;
    for (    Object child : super.getChildren(element)) {
      if (child instanceof IProject) {
        if (((IProject)child).getName().equals(ResourceManager.getRootProjectName())) {
          currentOpenProject=child;
          break;
        }
      }
    }
    List<Object> folders=new ArrayList<Object>();
    try {
      Object[] rootFolders=new Object[0];
      rootFolders=((IProject)currentOpenProject).members(false);
      for (      Object folder : rootFolders) {
        if (folder instanceof IFolder && ((IFolder)folder).getName().startsWith(DQStructureManager.PREFIX_TDQ)) {
          if (((IFolder)folder).getName().trim().equals(""String_Node_Str"")) {
            continue;
          }
          folders.add(folder);
        }
        if (folder instanceof IFolder && ((IFolder)folder).getName().equals(EResourceConstant.METADATA.getPath())) {
          folders.add(folder);
        }
      }
    }
 catch (    CoreException e) {
      log.error(e);
    }
    folders.add(recycleBin);
    return folders.toArray();
  }
 else   if (element instanceof IFile) {
    IFile file=(IFile)element;
    if (FactoriesUtil.isPatternFile(file.getFileExtension())) {
      Pattern pattern=PatternResourceFileHelper.getInstance().findPattern(file);
      RegularExpression[] regularExp=new RegularExpression[pattern.getComponents().size()];
      int peIdx=0;
      for (      PatternComponent patCom : pattern.getComponents()) {
        regularExp[peIdx]=(RegularExpression)patCom;
        peIdx++;
      }
      return regularExp;
    }
  }
 else   if (element instanceof IFolder) {
    IFolder folder=(IFolder)element;
    if (ResourceManager.isExchangeFolder(folder)) {
      try {
        if (timeoutFlag) {
          String version=CorePlugin.getDefault().getProductVersion().toString();
          return ComponentSearcher.getAvailableCategory(version).toArray();
        }
 else {
          return new String[]{""String_Node_Str""};
        }
      }
 catch (      SocketTimeoutException e) {
        timeoutFlag=false;
        return new String[]{""String_Node_Str"" + e.getMessage()};
      }
catch (      Exception e) {
        timeoutFlag=false;
        return new String[]{e.getMessage()};
      }
    }
 else     if (ResourceManager.isIndicatorFolder(folder)) {
      return getIndicatorsChildren(folder);
    }
 else     if (ResourceManager.getConnectionFolder().getFullPath().isPrefixOf(folder.getFullPath())) {
      List<Object> returnList=new ArrayList<Object>();
      IPath path=folder.getFullPath().makeRelativeTo(ResourceManager.getConnectionFolder().getFullPath());
      List<IRepositoryViewObject> conList=ProxyRepositoryViewObject.fetchRepositoryViewObjectsByFolder(true,ERepositoryObjectType.METADATA_CONNECTIONS,path);
      returnList.addAll(getConnectionChildren(conList));
      for (      Object folderResource : Arrays.asList(getChildrenExceptRecBin(folder))) {
        if (folderResource instanceof IResource && ((IResource)folderResource).getType() == IResource.FOLDER) {
          returnList.add(folderResource);
        }
      }
      return returnList.toArray();
    }
 else     if (ResourceManager.getMDMConnectionFolder().getFullPath().isPrefixOf(folder.getFullPath())) {
      List<Object> returnList=new ArrayList<Object>();
      IPath path=folder.getFullPath().makeRelativeTo(ResourceManager.getMDMConnectionFolder().getFullPath());
      List<IRepositoryViewObject> conList=ProxyRepositoryViewObject.fetchRepositoryViewObjectsByFolder(true,ERepositoryObjectType.METADATA_MDMCONNECTION,path);
      returnList.addAll(getConnectionChildren(conList));
      for (      Object folderResource : Arrays.asList(getChildrenExceptRecBin(folder))) {
        if (folderResource instanceof IResource && ((IResource)folderResource).getType() == IResource.FOLDER) {
          returnList.add(folderResource);
        }
      }
      return returnList.toArray();
    }
    return getChildrenExceptRecBin(element);
  }
 else   if (element instanceof IEcosCategory) {
    return ((IEcosCategory)element).getComponent().toArray();
  }
 else   if (element instanceof IndicatorCategory) {
    return getIndicatorsChildren((IndicatorCategory)element);
  }
 else   if (element instanceof RecycleBin) {
    RecycleBin bin=(RecycleBin)element;
    return bin.getChildren();
  }
 else   if (element instanceof DQRecycleBinNode) {
    DQRecycleBinNode rbn=(DQRecycleBinNode)element;
    return getRecBinNodes(rbn).toArray();
  }
  if (needSortContainers.contains(element)) {
    return getChildrenExceptRecBin(element);
  }
  return super.getChildren(element);
}","@Override public Object[] getChildren(Object element){
  if (element instanceof IWorkspaceRoot) {
    Object currentOpenProject=null;
    for (    Object child : super.getChildren(element)) {
      if (child instanceof IProject) {
        if (((IProject)child).getName().equals(ResourceManager.getRootProjectName())) {
          currentOpenProject=child;
          break;
        }
      }
    }
    List<Object> folders=new ArrayList<Object>();
    try {
      Object[] rootFolders=new Object[0];
      rootFolders=((IProject)currentOpenProject).members(false);
      for (      Object folder : rootFolders) {
        if (folder instanceof IFolder && ((IFolder)folder).getName().startsWith(DQStructureManager.PREFIX_TDQ)) {
          if (((IFolder)folder).getName().trim().equals(""String_Node_Str"")) {
            continue;
          }
          folders.add(folder);
        }
        if (folder instanceof IFolder && ((IFolder)folder).getName().equals(EResourceConstant.METADATA.getPath())) {
          folders.add(folder);
        }
      }
    }
 catch (    CoreException e) {
      log.error(e);
    }
    folders.add(recycleBin);
    return folders.toArray();
  }
 else   if (element instanceof IFile) {
    IFile file=(IFile)element;
    if (FactoriesUtil.isPatternFile(file.getFileExtension())) {
      Pattern pattern=PatternResourceFileHelper.getInstance().findPattern(file);
      RegularExpression[] regularExp=new RegularExpression[pattern.getComponents().size()];
      int peIdx=0;
      for (      PatternComponent patCom : pattern.getComponents()) {
        regularExp[peIdx]=(RegularExpression)patCom;
        peIdx++;
      }
      return regularExp;
    }
  }
 else   if (element instanceof IFolder) {
    IFolder folder=(IFolder)element;
    if (ResourceManager.isExchangeFolder(folder)) {
      try {
        if (timeoutFlag) {
          String version=CorePlugin.getDefault().getProductVersion().toString();
          return ComponentSearcher.getAvailableCategory(version).toArray();
        }
 else {
          return new String[]{""String_Node_Str""};
        }
      }
 catch (      SocketTimeoutException e) {
        timeoutFlag=false;
        return new String[]{""String_Node_Str"" + e.getMessage()};
      }
catch (      Exception e) {
        timeoutFlag=false;
        return new String[]{e.getMessage()};
      }
    }
 else     if (ResourceManager.isIndicatorFolder(folder)) {
      return getIndicatorsChildren(folder);
    }
 else     if (ResourceManager.getConnectionFolder().getFullPath().isPrefixOf(folder.getFullPath())) {
      List<Object> returnList=new ArrayList<Object>();
      if (ResourcesPlugin.getWorkspace().isTreeLocked()) {
        return returnList.toArray();
      }
      IPath path=folder.getFullPath().makeRelativeTo(ResourceManager.getConnectionFolder().getFullPath());
      List<IRepositoryViewObject> conList=ProxyRepositoryViewObject.fetchRepositoryViewObjectsByFolder(true,ERepositoryObjectType.METADATA_CONNECTIONS,path);
      returnList.addAll(getConnectionChildren(conList));
      for (      Object folderResource : Arrays.asList(getChildrenExceptRecBin(folder))) {
        if (folderResource instanceof IResource && ((IResource)folderResource).getType() == IResource.FOLDER) {
          returnList.add(folderResource);
        }
      }
      return returnList.toArray();
    }
 else     if (ResourceManager.getMDMConnectionFolder().getFullPath().isPrefixOf(folder.getFullPath())) {
      List<Object> returnList=new ArrayList<Object>();
      IPath path=folder.getFullPath().makeRelativeTo(ResourceManager.getMDMConnectionFolder().getFullPath());
      List<IRepositoryViewObject> conList=ProxyRepositoryViewObject.fetchRepositoryViewObjectsByFolder(true,ERepositoryObjectType.METADATA_MDMCONNECTION,path);
      returnList.addAll(getConnectionChildren(conList));
      for (      Object folderResource : Arrays.asList(getChildrenExceptRecBin(folder))) {
        if (folderResource instanceof IResource && ((IResource)folderResource).getType() == IResource.FOLDER) {
          returnList.add(folderResource);
        }
      }
      return returnList.toArray();
    }
    return getChildrenExceptRecBin(element);
  }
 else   if (element instanceof IEcosCategory) {
    return ((IEcosCategory)element).getComponent().toArray();
  }
 else   if (element instanceof IndicatorCategory) {
    return getIndicatorsChildren((IndicatorCategory)element);
  }
 else   if (element instanceof RecycleBin) {
    RecycleBin bin=(RecycleBin)element;
    return bin.getChildren();
  }
 else   if (element instanceof DQRecycleBinNode) {
    DQRecycleBinNode rbn=(DQRecycleBinNode)element;
    return getRecBinNodes(rbn).toArray();
  }
  if (needSortContainers.contains(element)) {
    return getChildrenExceptRecBin(element);
  }
  return super.getChildren(element);
}",0.9890893831305078
138850,"protected boolean isAccessWith(Connection dp){
  if (dataprovider == null) {
    dataprovider=dp;
    return true;
  }
  if (ResourceHelper.areSame(dataprovider,dp)) {
    return true;
  }
  return false;
}","protected boolean isAccessWith(Connection dp){
  if (dataprovider == null) {
    dataprovider=dp;
    return true;
  }
  if (ProxyRepositoryViewObject.areSame(dataprovider,dp)) {
    return true;
  }
  return false;
}",0.91725768321513
138851,"protected boolean isAccessWith(Connection dp){
  if (dataprovider == null) {
    dataprovider=dp;
    return true;
  }
  if (ResourceHelper.areSame(dataprovider,dp)) {
    return true;
  }
  return false;
}","protected boolean isAccessWith(Connection dp){
  if (dataprovider == null) {
    dataprovider=dp;
    return true;
  }
  if (ProxyRepositoryViewObject.areSame(dataprovider,dp)) {
    return true;
  }
  return false;
}",0.91725768321513
138852,"protected boolean isAccessWith(Connection dp){
  if (dataprovider == null) {
    dataprovider=dp;
    return true;
  }
  if (ResourceHelper.areSame(dataprovider,dp)) {
    return true;
  }
  return false;
}","protected boolean isAccessWith(Connection dp){
  if (dataprovider == null) {
    dataprovider=dp;
    return true;
  }
  if (ProxyRepositoryViewObject.areSame(dataprovider,dp)) {
    return true;
  }
  return false;
}",0.91725768321513
138853,"protected List<IRepositoryViewObject> fetchRepositoryViewObjectsLower(){
  List<IRepositoryViewObject> connList=new ArrayList<IRepositoryViewObject>();
  try {
    ProxyRepositoryFactory.getInstance().initialize();
    connList.addAll(ProxyRepositoryFactory.getInstance().getAll(ERepositoryObjectType.METADATA_CONNECTIONS,true));
    clear();
    for (    IRepositoryViewObject reposViewObj : connList) {
      Item item=reposViewObj.getProperty().getItem();
      if (!(item instanceof FolderItem)) {
        DatabaseConnection connection=(DatabaseConnection)((DatabaseConnectionItem)item).getConnection();
        register(connection,reposViewObj);
      }
    }
  }
 catch (  PersistenceException e) {
    log.error(e,e);
  }
  return connList;
}","protected List<IRepositoryViewObject> fetchRepositoryViewObjectsLower(){
  List<IRepositoryViewObject> connList=new ArrayList<IRepositoryViewObject>();
  try {
    connList.addAll(ProxyRepositoryFactory.getInstance().getAll(ERepositoryObjectType.METADATA_CONNECTIONS,true));
    clear();
    for (    IRepositoryViewObject reposViewObj : connList) {
      Item item=reposViewObj.getProperty().getItem();
      if (!(item instanceof FolderItem)) {
        DatabaseConnection connection=(DatabaseConnection)((DatabaseConnectionItem)item).getConnection();
        register(connection,reposViewObj);
      }
    }
  }
 catch (  PersistenceException e) {
    log.error(e,e);
  }
  return connList;
}",0.961884961884962
138854,"@Override protected List<IRepositoryViewObject> fetchRepositoryViewObjectsLower(){
  List<IRepositoryViewObject> connList=new ArrayList<IRepositoryViewObject>();
  try {
    ProxyRepositoryFactory.getInstance().initialize();
    connList.addAll(ProxyRepositoryFactory.getInstance().getAll(ERepositoryObjectType.METADATA_MDMCONNECTION,true));
    clear();
    for (    IRepositoryViewObject reposViewObj : connList) {
      Item item=reposViewObj.getProperty().getItem();
      MDMConnection connection=(MDMConnection)((MDMConnectionItem)item).getConnection();
      register(connection,reposViewObj);
    }
  }
 catch (  PersistenceException e) {
    log.error(e,e);
  }
  return connList;
}","@Override protected List<IRepositoryViewObject> fetchRepositoryViewObjectsLower(){
  List<IRepositoryViewObject> connList=new ArrayList<IRepositoryViewObject>();
  try {
    connList.addAll(ProxyRepositoryFactory.getInstance().getAll(ERepositoryObjectType.METADATA_MDMCONNECTION,true));
    clear();
    for (    IRepositoryViewObject reposViewObj : connList) {
      Item item=reposViewObj.getProperty().getItem();
      MDMConnection connection=(MDMConnection)((MDMConnectionItem)item).getConnection();
      register(connection,reposViewObj);
    }
  }
 catch (  PersistenceException e) {
    log.error(e,e);
  }
  return connList;
}",0.958553127354936
138855,"protected List<IRepositoryViewObject> fetchRepositoryViewObjectsLower(){
  List<IRepositoryViewObject> connList=new ArrayList<IRepositoryViewObject>();
  try {
    connList.addAll(ProxyRepositoryFactory.getInstance().getAll(ERepositoryObjectType.METADATA_CONNECTIONS,true));
    clear();
    for (    IRepositoryViewObject reposViewObj : connList) {
      Item item=reposViewObj.getProperty().getItem();
      if (!(item instanceof FolderItem)) {
        DatabaseConnection connection=(DatabaseConnection)((DatabaseConnectionItem)item).getConnection();
        register(connection,reposViewObj);
      }
    }
  }
 catch (  PersistenceException e) {
    log.error(e,e);
  }
  return connList;
}","protected List<IRepositoryViewObject> fetchRepositoryViewObjectsLower(){
  List<IRepositoryViewObject> connList=new ArrayList<IRepositoryViewObject>();
  if (ResourcesPlugin.getWorkspace().isTreeLocked()) {
    return connList;
  }
  try {
    connList.addAll(ProxyRepositoryFactory.getInstance().getAll(ERepositoryObjectType.METADATA_CONNECTIONS,true));
    clear();
    for (    IRepositoryViewObject reposViewObj : connList) {
      Item item=reposViewObj.getProperty().getItem();
      if (!(item instanceof FolderItem)) {
        DatabaseConnection connection=(DatabaseConnection)((DatabaseConnectionItem)item).getConnection();
        register(connection,reposViewObj);
      }
    }
  }
 catch (  PersistenceException e) {
    log.error(e,e);
  }
  return connList;
}",0.9455040871934604
138856,"@Override protected List<IRepositoryViewObject> fetchRepositoryViewObjectsLower(){
  List<IRepositoryViewObject> connList=new ArrayList<IRepositoryViewObject>();
  try {
    connList.addAll(ProxyRepositoryFactory.getInstance().getAll(ERepositoryObjectType.METADATA_MDMCONNECTION,true));
    clear();
    for (    IRepositoryViewObject reposViewObj : connList) {
      Item item=reposViewObj.getProperty().getItem();
      MDMConnection connection=(MDMConnection)((MDMConnectionItem)item).getConnection();
      register(connection,reposViewObj);
    }
  }
 catch (  PersistenceException e) {
    log.error(e,e);
  }
  return connList;
}","@Override protected List<IRepositoryViewObject> fetchRepositoryViewObjectsLower(){
  List<IRepositoryViewObject> connList=new ArrayList<IRepositoryViewObject>();
  if (ResourcesPlugin.getWorkspace().isTreeLocked()) {
    return connList;
  }
  try {
    connList.addAll(ProxyRepositoryFactory.getInstance().getAll(ERepositoryObjectType.METADATA_MDMCONNECTION,true));
    clear();
    for (    IRepositoryViewObject reposViewObj : connList) {
      Item item=reposViewObj.getProperty().getItem();
      MDMConnection connection=(MDMConnection)((MDMConnectionItem)item).getConnection();
      register(connection,reposViewObj);
    }
  }
 catch (  PersistenceException e) {
    log.error(e,e);
  }
  return connList;
}",0.940828402366864
138857,"@Override public TypedReturnCode<Object> createAndSaveCWMFile(ModelElement cwmElement){
  Analysis analysis=(Analysis)cwmElement;
  DataManager connection=analysis.getContext().getConnection();
  DependenciesHandler.getInstance().setDependencyOn(analysis,connection);
  TypedReturnCode<Object> saveCWMFile=super.createAndSaveCWMFile(analysis);
  if (saveCWMFile.isOk()) {
    ProxyRepositoryViewObject.save((Connection)connection);
  }
  return saveCWMFile;
}","@Override public TypedReturnCode<Object> createAndSaveCWMFile(ModelElement cwmElement){
  Analysis analysis=(Analysis)cwmElement;
  DataManager connection=analysis.getContext().getConnection();
  DependenciesHandler.getInstance().setDependencyOn(analysis,connection);
  TypedReturnCode<Object> saveCWMFile=super.createAndSaveCWMFile(analysis);
  if (saveCWMFile.isOk()) {
    ProxyRepositoryViewObject.fetchAllRepositoryViewObjects(Boolean.TRUE);
    ProxyRepositoryViewObject.save((Connection)connection);
  }
  return saveCWMFile;
}",0.9244712990936556
138858,"@Override public Object[] getChildren(Object element){
  if (element instanceof IWorkspaceRoot) {
    Object currentOpenProject=null;
    for (    Object child : super.getChildren(element)) {
      if (child instanceof IProject) {
        if (((IProject)child).getName().equals(ResourceManager.getRootProjectName())) {
          currentOpenProject=child;
          break;
        }
      }
    }
    List<Object> folders=new ArrayList<Object>();
    try {
      Object[] rootFolders=new Object[0];
      rootFolders=((IProject)currentOpenProject).members(false);
      for (      Object folder : rootFolders) {
        if (folder instanceof IFolder && ((IFolder)folder).getName().startsWith(DQStructureManager.PREFIX_TDQ)) {
          if (((IFolder)folder).getName().trim().equals(""String_Node_Str"")) {
            continue;
          }
          folders.add(folder);
        }
        if (folder instanceof IFolder && ((IFolder)folder).getName().equals(EResourceConstant.METADATA.getPath())) {
          folders.add(folder);
        }
      }
    }
 catch (    CoreException e) {
      log.error(e);
    }
    folders.add(recycleBin);
    return folders.toArray();
  }
 else   if (element instanceof IFile) {
    IFile file=(IFile)element;
    if (FactoriesUtil.isPatternFile(file.getFileExtension())) {
      Pattern pattern=PatternResourceFileHelper.getInstance().findPattern(file);
      RegularExpression[] regularExp=new RegularExpression[pattern.getComponents().size()];
      int peIdx=0;
      for (      PatternComponent patCom : pattern.getComponents()) {
        regularExp[peIdx]=(RegularExpression)patCom;
        peIdx++;
      }
      return regularExp;
    }
  }
 else   if (element instanceof IFolder) {
    IFolder folder=(IFolder)element;
    if (ResourceManager.isExchangeFolder(folder)) {
      try {
        if (timeoutFlag) {
          String version=CorePlugin.getDefault().getProductVersion().toString();
          return ComponentSearcher.getAvailableCategory(version).toArray();
        }
 else {
          return new String[]{""String_Node_Str""};
        }
      }
 catch (      SocketTimeoutException e) {
        timeoutFlag=false;
        return new String[]{""String_Node_Str"" + e.getMessage()};
      }
catch (      Exception e) {
        timeoutFlag=false;
        return new String[]{e.getMessage()};
      }
    }
 else     if (ResourceManager.isIndicatorFolder(folder)) {
      return getIndicatorsChildren(folder);
    }
 else     if (ResourceManager.getConnectionFolder().getFullPath().isPrefixOf(folder.getFullPath())) {
      List<Object> returnList=new ArrayList<Object>();
      if (ResourcesPlugin.getWorkspace().isTreeLocked()) {
        return returnList.toArray();
      }
      IPath path=folder.getFullPath().makeRelativeTo(ResourceManager.getConnectionFolder().getFullPath());
      List<IRepositoryViewObject> conList=ProxyRepositoryViewObject.fetchRepositoryViewObjectsByFolder(true,ERepositoryObjectType.METADATA_CONNECTIONS,path);
      returnList.addAll(getConnectionChildren(conList));
      for (      Object folderResource : Arrays.asList(getChildrenExceptRecBin(folder))) {
        if (folderResource instanceof IResource && ((IResource)folderResource).getType() == IResource.FOLDER) {
          returnList.add(folderResource);
        }
      }
      return returnList.toArray();
    }
 else     if (ResourceManager.getMDMConnectionFolder().getFullPath().isPrefixOf(folder.getFullPath())) {
      List<Object> returnList=new ArrayList<Object>();
      IPath path=folder.getFullPath().makeRelativeTo(ResourceManager.getMDMConnectionFolder().getFullPath());
      List<IRepositoryViewObject> conList=ProxyRepositoryViewObject.fetchRepositoryViewObjectsByFolder(true,ERepositoryObjectType.METADATA_MDMCONNECTION,path);
      returnList.addAll(getConnectionChildren(conList));
      for (      Object folderResource : Arrays.asList(getChildrenExceptRecBin(folder))) {
        if (folderResource instanceof IResource && ((IResource)folderResource).getType() == IResource.FOLDER) {
          returnList.add(folderResource);
        }
      }
      return returnList.toArray();
    }
    return getChildrenExceptRecBin(element);
  }
 else   if (element instanceof IEcosCategory) {
    return ((IEcosCategory)element).getComponent().toArray();
  }
 else   if (element instanceof IndicatorCategory) {
    return getIndicatorsChildren((IndicatorCategory)element);
  }
 else   if (element instanceof RecycleBin) {
    RecycleBin bin=(RecycleBin)element;
    return bin.getChildren();
  }
 else   if (element instanceof DQRecycleBinNode) {
    DQRecycleBinNode rbn=(DQRecycleBinNode)element;
    return getRecBinNodes(rbn).toArray();
  }
  if (needSortContainers.contains(element)) {
    return getChildrenExceptRecBin(element);
  }
  return super.getChildren(element);
}","@Override public Object[] getChildren(Object element){
  if (element instanceof IWorkspaceRoot) {
    Object currentOpenProject=null;
    for (    Object child : super.getChildren(element)) {
      if (child instanceof IProject) {
        if (((IProject)child).getName().equals(ResourceManager.getRootProjectName())) {
          currentOpenProject=child;
          break;
        }
      }
    }
    List<Object> folders=new ArrayList<Object>();
    try {
      Object[] rootFolders=new Object[0];
      rootFolders=((IProject)currentOpenProject).members(false);
      for (      Object folder : rootFolders) {
        if (folder instanceof IFolder && ((IFolder)folder).getName().startsWith(DQStructureManager.PREFIX_TDQ)) {
          if (((IFolder)folder).getName().trim().equals(""String_Node_Str"")) {
            continue;
          }
          folders.add(folder);
        }
        if (folder instanceof IFolder && ((IFolder)folder).getName().equals(EResourceConstant.METADATA.getPath())) {
          folders.add(folder);
        }
      }
    }
 catch (    CoreException e) {
      log.error(e);
    }
    folders.add(recycleBin);
    return folders.toArray();
  }
 else   if (element instanceof IFile) {
    IFile file=(IFile)element;
    if (FactoriesUtil.isPatternFile(file.getFileExtension())) {
      Pattern pattern=PatternResourceFileHelper.getInstance().findPattern(file);
      RegularExpression[] regularExp=new RegularExpression[pattern.getComponents().size()];
      int peIdx=0;
      for (      PatternComponent patCom : pattern.getComponents()) {
        regularExp[peIdx]=(RegularExpression)patCom;
        peIdx++;
      }
      return regularExp;
    }
  }
 else   if (element instanceof IFolder) {
    IFolder folder=(IFolder)element;
    if (ResourceManager.isExchangeFolder(folder)) {
      try {
        if (timeoutFlag) {
          String version=CorePlugin.getDefault().getProductVersion().toString();
          return ComponentSearcher.getAvailableCategory(version).toArray();
        }
 else {
          return new String[]{""String_Node_Str""};
        }
      }
 catch (      SocketTimeoutException e) {
        timeoutFlag=false;
        return new String[]{""String_Node_Str"" + e.getMessage()};
      }
catch (      Exception e) {
        timeoutFlag=false;
        return new String[]{e.getMessage()};
      }
    }
 else     if (ResourceManager.isIndicatorFolder(folder)) {
      return getIndicatorsChildren(folder);
    }
 else     if (ResourceManager.getConnectionFolder().getFullPath().isPrefixOf(folder.getFullPath())) {
      List<Object> returnList=new ArrayList<Object>();
      IPath path=folder.getFullPath().makeRelativeTo(ResourceManager.getConnectionFolder().getFullPath());
      List<IRepositoryViewObject> conList=ProxyRepositoryViewObject.fetchRepositoryViewObjectsByFolder(true,ERepositoryObjectType.METADATA_CONNECTIONS,path);
      returnList.addAll(getConnectionChildren(conList));
      for (      Object folderResource : Arrays.asList(getChildrenExceptRecBin(folder))) {
        if (folderResource instanceof IResource && ((IResource)folderResource).getType() == IResource.FOLDER) {
          returnList.add(folderResource);
        }
      }
      return returnList.toArray();
    }
 else     if (ResourceManager.getMDMConnectionFolder().getFullPath().isPrefixOf(folder.getFullPath())) {
      List<Object> returnList=new ArrayList<Object>();
      IPath path=folder.getFullPath().makeRelativeTo(ResourceManager.getMDMConnectionFolder().getFullPath());
      List<IRepositoryViewObject> conList=ProxyRepositoryViewObject.fetchRepositoryViewObjectsByFolder(true,ERepositoryObjectType.METADATA_MDMCONNECTION,path);
      returnList.addAll(getConnectionChildren(conList));
      for (      Object folderResource : Arrays.asList(getChildrenExceptRecBin(folder))) {
        if (folderResource instanceof IResource && ((IResource)folderResource).getType() == IResource.FOLDER) {
          returnList.add(folderResource);
        }
      }
      return returnList.toArray();
    }
    return getChildrenExceptRecBin(element);
  }
 else   if (element instanceof IEcosCategory) {
    return ((IEcosCategory)element).getComponent().toArray();
  }
 else   if (element instanceof IndicatorCategory) {
    return getIndicatorsChildren((IndicatorCategory)element);
  }
 else   if (element instanceof RecycleBin) {
    RecycleBin bin=(RecycleBin)element;
    return bin.getChildren();
  }
 else   if (element instanceof DQRecycleBinNode) {
    DQRecycleBinNode rbn=(DQRecycleBinNode)element;
    return getRecBinNodes(rbn).toArray();
  }
  if (needSortContainers.contains(element)) {
    return getChildrenExceptRecBin(element);
  }
  return super.getChildren(element);
}",0.9890893831305078
138859,"@Override public Object[] getChildren(Object element){
  if (element instanceof IWorkspaceRoot) {
    Object currentOpenProject=null;
    for (    Object child : super.getChildren(element)) {
      if (child instanceof IProject) {
        if (((IProject)child).getName().equals(ResourceManager.getRootProjectName())) {
          currentOpenProject=child;
          break;
        }
      }
    }
    List<Object> folders=new ArrayList<Object>();
    try {
      Object[] rootFolders=new Object[0];
      rootFolders=((IProject)currentOpenProject).members(false);
      for (      Object folder : rootFolders) {
        if (folder instanceof IFolder && ((IFolder)folder).getName().startsWith(DQStructureManager.PREFIX_TDQ)) {
          if (((IFolder)folder).getName().trim().equals(""String_Node_Str"")) {
            continue;
          }
          folders.add(folder);
        }
        if (folder instanceof IFolder && ((IFolder)folder).getName().equals(EResourceConstant.METADATA.getPath())) {
          folders.add(folder);
        }
      }
    }
 catch (    CoreException e) {
      log.error(e);
    }
    folders.add(recycleBin);
    return folders.toArray();
  }
 else   if (element instanceof IFile) {
    IFile file=(IFile)element;
    if (FactoriesUtil.isPatternFile(file.getFileExtension())) {
      Pattern pattern=PatternResourceFileHelper.getInstance().findPattern(file);
      RegularExpression[] regularExp=new RegularExpression[pattern.getComponents().size()];
      int peIdx=0;
      for (      PatternComponent patCom : pattern.getComponents()) {
        regularExp[peIdx]=(RegularExpression)patCom;
        peIdx++;
      }
      return regularExp;
    }
  }
 else   if (element instanceof IFolder) {
    IFolder folder=(IFolder)element;
    if (ResourceManager.isExchangeFolder(folder)) {
      try {
        if (timeoutFlag) {
          String version=CorePlugin.getDefault().getProductVersion().toString();
          return ComponentSearcher.getAvailableCategory(version).toArray();
        }
 else {
          return new String[]{""String_Node_Str""};
        }
      }
 catch (      SocketTimeoutException e) {
        timeoutFlag=false;
        return new String[]{""String_Node_Str"" + e.getMessage()};
      }
catch (      Exception e) {
        timeoutFlag=false;
        return new String[]{e.getMessage()};
      }
    }
 else     if (ResourceManager.isIndicatorFolder(folder)) {
      return getIndicatorsChildren(folder);
    }
 else     if (ResourceManager.getConnectionFolder().getFullPath().isPrefixOf(folder.getFullPath())) {
      List<Object> returnList=new ArrayList<Object>();
      IPath path=folder.getFullPath().makeRelativeTo(ResourceManager.getConnectionFolder().getFullPath());
      List<IRepositoryViewObject> conList=ProxyRepositoryFactory.getInstance().getMetadataByFolder(ERepositoryObjectType.METADATA_CONNECTIONS,path);
      returnList.addAll(getConnectionChildren(conList));
      for (      Object folderResource : Arrays.asList(getChildrenExceptRecBin(folder))) {
        if (folderResource instanceof IResource && ((IResource)folderResource).getType() == IResource.FOLDER) {
          returnList.add(folderResource);
        }
      }
      return returnList.toArray();
    }
 else     if (ResourceManager.isMdmConnectionFolder(folder)) {
      List<Object> returnList=new ArrayList<Object>();
      IPath path=folder.getFullPath().makeRelativeTo(ResourceManager.getMDMConnectionFolder().getFullPath());
      List<IRepositoryViewObject> conList=ProxyRepositoryFactory.getInstance().getMetadataByFolder(ERepositoryObjectType.METADATA_MDMCONNECTION,path);
      returnList.addAll(getConnectionChildren(conList));
      for (      Object folderResource : Arrays.asList(getChildrenExceptRecBin(folder))) {
        if (folderResource instanceof IResource && ((IResource)folderResource).getType() == IResource.FOLDER) {
          returnList.add(folderResource);
        }
      }
      return returnList.toArray();
    }
    return getChildrenExceptRecBin(element);
  }
 else   if (element instanceof IEcosCategory) {
    return ((IEcosCategory)element).getComponent().toArray();
  }
 else   if (element instanceof IndicatorCategory) {
    return getIndicatorsChildren((IndicatorCategory)element);
  }
 else   if (element instanceof RecycleBin) {
    RecycleBin bin=(RecycleBin)element;
    return bin.getChildren();
  }
 else   if (element instanceof DQRecycleBinNode) {
    DQRecycleBinNode rbn=(DQRecycleBinNode)element;
    return getRecBinNodes(rbn).toArray();
  }
  if (needSortContainers.contains(element)) {
    return getChildrenExceptRecBin(element);
  }
  return super.getChildren(element);
}","@Override public Object[] getChildren(Object element){
  if (element instanceof IWorkspaceRoot) {
    Object currentOpenProject=null;
    for (    Object child : super.getChildren(element)) {
      if (child instanceof IProject) {
        if (((IProject)child).getName().equals(ResourceManager.getRootProjectName())) {
          currentOpenProject=child;
          break;
        }
      }
    }
    List<Object> folders=new ArrayList<Object>();
    try {
      Object[] rootFolders=new Object[0];
      rootFolders=((IProject)currentOpenProject).members(false);
      for (      Object folder : rootFolders) {
        if (folder instanceof IFolder && ((IFolder)folder).getName().startsWith(DQStructureManager.PREFIX_TDQ)) {
          if (((IFolder)folder).getName().trim().equals(""String_Node_Str"")) {
            continue;
          }
          folders.add(folder);
        }
        if (folder instanceof IFolder && ((IFolder)folder).getName().equals(EResourceConstant.METADATA.getPath())) {
          folders.add(folder);
        }
      }
    }
 catch (    CoreException e) {
      log.error(e);
    }
    folders.add(recycleBin);
    return folders.toArray();
  }
 else   if (element instanceof IFile) {
    IFile file=(IFile)element;
    if (FactoriesUtil.isPatternFile(file.getFileExtension())) {
      Pattern pattern=PatternResourceFileHelper.getInstance().findPattern(file);
      RegularExpression[] regularExp=new RegularExpression[pattern.getComponents().size()];
      int peIdx=0;
      for (      PatternComponent patCom : pattern.getComponents()) {
        regularExp[peIdx]=(RegularExpression)patCom;
        peIdx++;
      }
      return regularExp;
    }
  }
 else   if (element instanceof IFolder) {
    IFolder folder=(IFolder)element;
    if (ResourceManager.isExchangeFolder(folder)) {
      try {
        if (timeoutFlag) {
          String version=CorePlugin.getDefault().getProductVersion().toString();
          return ComponentSearcher.getAvailableCategory(version).toArray();
        }
 else {
          return new String[]{""String_Node_Str""};
        }
      }
 catch (      SocketTimeoutException e) {
        timeoutFlag=false;
        return new String[]{""String_Node_Str"" + e.getMessage()};
      }
catch (      Exception e) {
        timeoutFlag=false;
        return new String[]{e.getMessage()};
      }
    }
 else     if (ResourceManager.isIndicatorFolder(folder)) {
      return getIndicatorsChildren(folder);
    }
 else     if (ResourceManager.getConnectionFolder().getFullPath().isPrefixOf(folder.getFullPath())) {
      List<Object> returnList=new ArrayList<Object>();
      IPath path=folder.getFullPath().makeRelativeTo(ResourceManager.getConnectionFolder().getFullPath());
      List<IRepositoryViewObject> conList=ProxyRepositoryViewObject.fetchRepositoryViewObjectsByFolder(true,ERepositoryObjectType.METADATA_CONNECTIONS,path);
      returnList.addAll(getConnectionChildren(conList));
      for (      Object folderResource : Arrays.asList(getChildrenExceptRecBin(folder))) {
        if (folderResource instanceof IResource && ((IResource)folderResource).getType() == IResource.FOLDER) {
          returnList.add(folderResource);
        }
      }
      return returnList.toArray();
    }
 else     if (ResourceManager.getMDMConnectionFolder().getFullPath().isPrefixOf(folder.getFullPath())) {
      List<Object> returnList=new ArrayList<Object>();
      IPath path=folder.getFullPath().makeRelativeTo(ResourceManager.getMDMConnectionFolder().getFullPath());
      List<IRepositoryViewObject> conList=ProxyRepositoryViewObject.fetchRepositoryViewObjectsByFolder(true,ERepositoryObjectType.METADATA_MDMCONNECTION,path);
      returnList.addAll(getConnectionChildren(conList));
      for (      Object folderResource : Arrays.asList(getChildrenExceptRecBin(folder))) {
        if (folderResource instanceof IResource && ((IResource)folderResource).getType() == IResource.FOLDER) {
          returnList.add(folderResource);
        }
      }
      return returnList.toArray();
    }
    return getChildrenExceptRecBin(element);
  }
 else   if (element instanceof IEcosCategory) {
    return ((IEcosCategory)element).getComponent().toArray();
  }
 else   if (element instanceof IndicatorCategory) {
    return getIndicatorsChildren((IndicatorCategory)element);
  }
 else   if (element instanceof RecycleBin) {
    RecycleBin bin=(RecycleBin)element;
    return bin.getChildren();
  }
 else   if (element instanceof DQRecycleBinNode) {
    DQRecycleBinNode rbn=(DQRecycleBinNode)element;
    return getRecBinNodes(rbn).toArray();
  }
  if (needSortContainers.contains(element)) {
    return getChildrenExceptRecBin(element);
  }
  return super.getChildren(element);
}",0.979077711357814
138860,"private boolean isMdmFlag(){
  FolderProvider folderProvider=connectionParam.getFolderProvider();
  return folderProvider != null && ResourceManager.isMdmConnectionFolder(folderProvider.getFolderResource());
}","private boolean isMdmFlag(){
  FolderProvider folderProvider=connectionParam.getFolderProvider();
  return folderProvider != null && ResourceService.isSubFolder(ResourceManager.getMDMConnectionFolder(),folderProvider.getFolderResource());
}",0.8730512249443207
138861,"/** 
 * Adds a submenu to the given menu with the name ""New Component"".
 */
public void fillContextMenu(IMenuManager menu){
  Object obj=((TreeSelection)this.getContext().getSelection()).getFirstElement();
  if (obj instanceof IResource) {
    IResource resource=(IResource)obj;
    if (!ResourceService.isReadOnlyFolder(resource)) {
      menu.add(new DeleteObjectsAction());
    }
  }
 else {
    menu.add(new DeleteObjectsAction());
  }
}","/** 
 * Adds a submenu to the given menu with the name ""New Component"".
 */
public void fillContextMenu(IMenuManager menu){
  Object obj=((TreeSelection)this.getContext().getSelection()).getFirstElement();
  if (obj instanceof IResource) {
    IResource resource=(IResource)obj;
    if (!ResourceService.isReadOnlyFolder(resource) && !isSystemIndicator(resource)) {
      menu.add(new DeleteObjectsAction());
    }
  }
 else {
    menu.add(new DeleteObjectsAction());
  }
}",0.9649890590809628
138862,"/** 
 * Fill the plain indicator value to the corresponding indicator's property, and fill the value to field 'flatIndicatorEnumList' and 'plainIndicatorUnitMap'.
 * @param indicatorEnum
 * @param indicator
 */
private void fillCategoryIndicators(IndicatorEnum indicatorEnum,Indicator indicator){
  if (indicatorEnum.hasChildren()) {
    for (    IndicatorEnum indEnum : indicatorEnum.getChildren()) {
      if (this.flatIndicatorEnumList.contains(indEnum)) {
        continue;
      }
      this.flatIndicatorEnumList.add(indEnum);
    }
  }
switch (indicatorEnum) {
case CountsIndicatorEnum:
    CountsIndicator countsIndicator=(CountsIndicator)indicator;
  this.plainIndicatorUnitMap.put(IndicatorEnum.CountsIndicatorEnum,createPlainIndicatorUnit(IndicatorEnum.CountsIndicatorEnum,countsIndicator));
this.plainIndicatorUnitMap.put(IndicatorEnum.BlankCountIndicatorEnum,createPlainIndicatorUnit(IndicatorEnum.BlankCountIndicatorEnum,countsIndicator.getBlankCountIndicator()));
this.plainIndicatorUnitMap.put(IndicatorEnum.DistinctCountIndicatorEnum,createPlainIndicatorUnit(IndicatorEnum.DistinctCountIndicatorEnum,countsIndicator.getDistinctCountIndicator()));
this.plainIndicatorUnitMap.put(IndicatorEnum.DuplicateCountIndicatorEnum,createPlainIndicatorUnit(IndicatorEnum.DuplicateCountIndicatorEnum,countsIndicator.getDuplicateCountIndicator()));
this.plainIndicatorUnitMap.put(IndicatorEnum.RowCountIndicatorEnum,createPlainIndicatorUnit(IndicatorEnum.RowCountIndicatorEnum,countsIndicator.getRowCountIndicator()));
this.plainIndicatorUnitMap.put(IndicatorEnum.NullCountIndicatorEnum,createPlainIndicatorUnit(IndicatorEnum.NullCountIndicatorEnum,countsIndicator.getNullCountIndicator()));
this.plainIndicatorUnitMap.put(IndicatorEnum.UniqueIndicatorEnum,createPlainIndicatorUnit(IndicatorEnum.UniqueIndicatorEnum,countsIndicator.getUniqueCountIndicator()));
this.plainIndicatorUnitMap.put(IndicatorEnum.DefValueCountIndicatorEnum,createPlainIndicatorUnit(IndicatorEnum.DefValueCountIndicatorEnum,countsIndicator.getDefaultValueIndicator()));
break;
case TextIndicatorEnum:
TextIndicator textIndicator=(TextIndicator)indicator;
this.plainIndicatorUnitMap.put(IndicatorEnum.TextIndicatorEnum,createPlainIndicatorUnit(IndicatorEnum.TextIndicatorEnum,textIndicator));
this.plainIndicatorUnitMap.put(IndicatorEnum.MinLengthIndicatorEnum,createPlainIndicatorUnit(IndicatorEnum.MinLengthIndicatorEnum,textIndicator.getMinLengthIndicator()));
this.plainIndicatorUnitMap.put(IndicatorEnum.MaxLengthIndicatorEnum,createPlainIndicatorUnit(IndicatorEnum.MaxLengthIndicatorEnum,textIndicator.getMaxLengthIndicator()));
this.plainIndicatorUnitMap.put(IndicatorEnum.AverageLengthIndicatorEnum,createPlainIndicatorUnit(IndicatorEnum.AverageLengthIndicatorEnum,textIndicator.getAverageLengthIndicator()));
break;
case BoxIIndicatorEnum:
BoxIndicator boxtIndicator=(BoxIndicator)indicator;
this.plainIndicatorUnitMap.put(IndicatorEnum.BoxIIndicatorEnum,createPlainIndicatorUnit(IndicatorEnum.BoxIIndicatorEnum,boxtIndicator));
this.plainIndicatorUnitMap.put(IndicatorEnum.MeanIndicatorEnum,createPlainIndicatorUnit(IndicatorEnum.MeanIndicatorEnum,boxtIndicator.getMeanIndicator()));
this.plainIndicatorUnitMap.put(IndicatorEnum.MedianIndicatorEnum,createPlainIndicatorUnit(IndicatorEnum.MedianIndicatorEnum,boxtIndicator.getMedianIndicator()));
this.fillCategoryIndicators(IndicatorEnum.RangeIndicatorEnum,boxtIndicator.getRangeIndicator());
this.fillCategoryIndicators(IndicatorEnum.IQRIndicatorEnum,boxtIndicator.getIQR());
break;
case IQRIndicatorEnum:
IQRIndicator iqrIndicator=(IQRIndicator)indicator;
this.plainIndicatorUnitMap.put(IndicatorEnum.IQRIndicatorEnum,createPlainIndicatorUnit(IndicatorEnum.IQRIndicatorEnum,iqrIndicator));
this.plainIndicatorUnitMap.put(IndicatorEnum.LowerQuartileIndicatorEnum,createPlainIndicatorUnit(IndicatorEnum.LowerQuartileIndicatorEnum,iqrIndicator.getLowerValue()));
this.plainIndicatorUnitMap.put(IndicatorEnum.UpperQuartileIndicatorEnum,createPlainIndicatorUnit(IndicatorEnum.UpperQuartileIndicatorEnum,iqrIndicator.getUpperValue()));
break;
case RangeIndicatorEnum:
RangeIndicator rangeIndicator=(RangeIndicator)indicator;
this.plainIndicatorUnitMap.put(IndicatorEnum.RangeIndicatorEnum,createPlainIndicatorUnit(IndicatorEnum.RangeIndicatorEnum,rangeIndicator));
this.plainIndicatorUnitMap.put(IndicatorEnum.MaxValueIndicatorEnum,createPlainIndicatorUnit(IndicatorEnum.MaxValueIndicatorEnum,rangeIndicator.getUpperValue()));
this.plainIndicatorUnitMap.put(IndicatorEnum.MinValueIndicatorEnum,createPlainIndicatorUnit(IndicatorEnum.MinValueIndicatorEnum,rangeIndicator.getLowerValue()));
break;
default :
this.plainIndicatorUnitMap.put(indicatorEnum,createPlainIndicatorUnit(indicatorEnum,indicator));
break;
}
}","/** 
 * Fill the plain indicator value to the corresponding indicator's property, and fill the value to field 'flatIndicatorEnumList' and 'plainIndicatorUnitMap'.
 * @param indicatorEnum
 * @param indicator
 */
private void fillCategoryIndicators(IndicatorEnum indicatorEnum,Indicator indicator){
  if (indicatorEnum.hasChildren()) {
    for (    IndicatorEnum indEnum : indicatorEnum.getChildren()) {
      if (this.flatIndicatorEnumList.contains(indEnum)) {
        continue;
      }
      this.flatIndicatorEnumList.add(indEnum);
    }
  }
switch (indicatorEnum) {
case CountsIndicatorEnum:
    CountsIndicator countsIndicator=(CountsIndicator)indicator;
  this.plainIndicatorUnitMap.put(IndicatorEnum.CountsIndicatorEnum,createPlainIndicatorUnit(IndicatorEnum.CountsIndicatorEnum,countsIndicator));
this.plainIndicatorUnitMap.put(IndicatorEnum.BlankCountIndicatorEnum,createPlainIndicatorUnit(IndicatorEnum.BlankCountIndicatorEnum,countsIndicator.getBlankCountIndicator()));
this.plainIndicatorUnitMap.put(IndicatorEnum.DistinctCountIndicatorEnum,createPlainIndicatorUnit(IndicatorEnum.DistinctCountIndicatorEnum,countsIndicator.getDistinctCountIndicator()));
this.plainIndicatorUnitMap.put(IndicatorEnum.DuplicateCountIndicatorEnum,createPlainIndicatorUnit(IndicatorEnum.DuplicateCountIndicatorEnum,countsIndicator.getDuplicateCountIndicator()));
this.plainIndicatorUnitMap.put(IndicatorEnum.RowCountIndicatorEnum,createPlainIndicatorUnit(IndicatorEnum.RowCountIndicatorEnum,countsIndicator.getRowCountIndicator()));
this.plainIndicatorUnitMap.put(IndicatorEnum.NullCountIndicatorEnum,createPlainIndicatorUnit(IndicatorEnum.NullCountIndicatorEnum,countsIndicator.getNullCountIndicator()));
this.plainIndicatorUnitMap.put(IndicatorEnum.UniqueIndicatorEnum,createPlainIndicatorUnit(IndicatorEnum.UniqueIndicatorEnum,countsIndicator.getUniqueCountIndicator()));
this.plainIndicatorUnitMap.put(IndicatorEnum.DefValueCountIndicatorEnum,createPlainIndicatorUnit(IndicatorEnum.DefValueCountIndicatorEnum,countsIndicator.getDefaultValueIndicator()));
break;
case TextIndicatorEnum:
TextIndicator textIndicator=(TextIndicator)indicator;
this.plainIndicatorUnitMap.put(IndicatorEnum.TextIndicatorEnum,createPlainIndicatorUnit(IndicatorEnum.TextIndicatorEnum,textIndicator));
this.plainIndicatorUnitMap.put(IndicatorEnum.MinLengthIndicatorEnum,createPlainIndicatorUnit(IndicatorEnum.MinLengthIndicatorEnum,textIndicator.getMinLengthIndicator()));
this.plainIndicatorUnitMap.put(IndicatorEnum.MaxLengthIndicatorEnum,createPlainIndicatorUnit(IndicatorEnum.MaxLengthIndicatorEnum,textIndicator.getMaxLengthIndicator()));
this.plainIndicatorUnitMap.put(IndicatorEnum.AverageLengthIndicatorEnum,createPlainIndicatorUnit(IndicatorEnum.AverageLengthIndicatorEnum,textIndicator.getAverageLengthIndicator()));
this.plainIndicatorUnitMap.put(IndicatorEnum.MinLengthWithBlankIndicatorEnum,createPlainIndicatorUnit(IndicatorEnum.MinLengthWithBlankIndicatorEnum,textIndicator.getMinLengthWithBlankIndicator()));
this.plainIndicatorUnitMap.put(IndicatorEnum.MinLengthWithBlankNullIndicatorEnum,createPlainIndicatorUnit(IndicatorEnum.MinLengthWithBlankNullIndicatorEnum,textIndicator.getMinLengthWithBlankNullIndicator()));
this.plainIndicatorUnitMap.put(IndicatorEnum.MinLengthWithNullIndicatorEnum,createPlainIndicatorUnit(IndicatorEnum.MinLengthWithNullIndicatorEnum,textIndicator.getMinLengthWithNullIndicator()));
this.plainIndicatorUnitMap.put(IndicatorEnum.MaxLengthWithBlankIndicatorEnum,createPlainIndicatorUnit(IndicatorEnum.MaxLengthWithBlankIndicatorEnum,textIndicator.getMaxLengthWithBlankIndicator()));
this.plainIndicatorUnitMap.put(IndicatorEnum.MaxLengthWithBlankNullIndicatorEnum,createPlainIndicatorUnit(IndicatorEnum.MaxLengthWithBlankNullIndicatorEnum,textIndicator.getMaxLengthWithBlankNullIndicator()));
this.plainIndicatorUnitMap.put(IndicatorEnum.MaxLengthWithNullIndicatorEnum,createPlainIndicatorUnit(IndicatorEnum.MaxLengthWithNullIndicatorEnum,textIndicator.getMaxLengthWithNullIndicator()));
this.plainIndicatorUnitMap.put(IndicatorEnum.AverageLengthWithBlankIndicatorEnum,createPlainIndicatorUnit(IndicatorEnum.AverageLengthWithBlankIndicatorEnum,textIndicator.getAvgLengthWithBlankIndicator()));
this.plainIndicatorUnitMap.put(IndicatorEnum.AverageLengthWithNullBlankIndicatorEnum,createPlainIndicatorUnit(IndicatorEnum.AverageLengthWithNullBlankIndicatorEnum,textIndicator.getAvgLengthWithBlankNullIndicator()));
this.plainIndicatorUnitMap.put(IndicatorEnum.AverageLengthWithNullIndicatorEnum,createPlainIndicatorUnit(IndicatorEnum.AverageLengthWithNullIndicatorEnum,textIndicator.getAvgLengthWithNullIndicator()));
break;
case BoxIIndicatorEnum:
BoxIndicator boxtIndicator=(BoxIndicator)indicator;
this.plainIndicatorUnitMap.put(IndicatorEnum.BoxIIndicatorEnum,createPlainIndicatorUnit(IndicatorEnum.BoxIIndicatorEnum,boxtIndicator));
this.plainIndicatorUnitMap.put(IndicatorEnum.MeanIndicatorEnum,createPlainIndicatorUnit(IndicatorEnum.MeanIndicatorEnum,boxtIndicator.getMeanIndicator()));
this.plainIndicatorUnitMap.put(IndicatorEnum.MedianIndicatorEnum,createPlainIndicatorUnit(IndicatorEnum.MedianIndicatorEnum,boxtIndicator.getMedianIndicator()));
this.fillCategoryIndicators(IndicatorEnum.RangeIndicatorEnum,boxtIndicator.getRangeIndicator());
this.fillCategoryIndicators(IndicatorEnum.IQRIndicatorEnum,boxtIndicator.getIQR());
break;
case IQRIndicatorEnum:
IQRIndicator iqrIndicator=(IQRIndicator)indicator;
this.plainIndicatorUnitMap.put(IndicatorEnum.IQRIndicatorEnum,createPlainIndicatorUnit(IndicatorEnum.IQRIndicatorEnum,iqrIndicator));
this.plainIndicatorUnitMap.put(IndicatorEnum.LowerQuartileIndicatorEnum,createPlainIndicatorUnit(IndicatorEnum.LowerQuartileIndicatorEnum,iqrIndicator.getLowerValue()));
this.plainIndicatorUnitMap.put(IndicatorEnum.UpperQuartileIndicatorEnum,createPlainIndicatorUnit(IndicatorEnum.UpperQuartileIndicatorEnum,iqrIndicator.getUpperValue()));
break;
case RangeIndicatorEnum:
RangeIndicator rangeIndicator=(RangeIndicator)indicator;
this.plainIndicatorUnitMap.put(IndicatorEnum.RangeIndicatorEnum,createPlainIndicatorUnit(IndicatorEnum.RangeIndicatorEnum,rangeIndicator));
this.plainIndicatorUnitMap.put(IndicatorEnum.MaxValueIndicatorEnum,createPlainIndicatorUnit(IndicatorEnum.MaxValueIndicatorEnum,rangeIndicator.getUpperValue()));
this.plainIndicatorUnitMap.put(IndicatorEnum.MinValueIndicatorEnum,createPlainIndicatorUnit(IndicatorEnum.MinValueIndicatorEnum,rangeIndicator.getLowerValue()));
break;
default :
this.plainIndicatorUnitMap.put(indicatorEnum,createPlainIndicatorUnit(indicatorEnum,indicator));
break;
}
}",0.8381456953642384
138863,"public Map<String,String> getQueryMap(){
  boolean isSqlEngine=ExecutionLanguage.SQL.equals(this.analysis.getParameters().getExecutionLanguage());
  Map<String,String> map=new HashMap<String,String>();
switch (this.indicatorEnum) {
case MinLengthIndicatorEnum:
case MaxLengthIndicatorEnum:
    map.put(MENU_VIEW_ROWS,isSqlEngine ? getTextRowsStatement() : null);
  break;
default :
}
return map;
}","public Map<String,String> getQueryMap(){
  boolean isSqlEngine=ExecutionLanguage.SQL.equals(this.analysis.getParameters().getExecutionLanguage());
  Map<String,String> map=new HashMap<String,String>();
switch (this.indicatorEnum) {
case MinLengthIndicatorEnum:
case MaxLengthIndicatorEnum:
case AverageLengthIndicatorEnum:
case MinLengthWithBlankIndicatorEnum:
case MinLengthWithBlankNullIndicatorEnum:
case MinLengthWithNullIndicatorEnum:
case MaxLengthWithBlankIndicatorEnum:
case MaxLengthWithBlankNullIndicatorEnum:
case MaxLengthWithNullIndicatorEnum:
case AverageLengthWithBlankIndicatorEnum:
case AverageLengthWithNullBlankIndicatorEnum:
case AverageLengthWithNullIndicatorEnum:
    map.put(MENU_VIEW_ROWS,isSqlEngine ? getTextRowsStatement() : null);
  break;
default :
}
return map;
}",0.6672268907563025
138864,"private boolean isSystemIndicator(IResource resource){
  return resource.getFileExtension().equals(""String_Node_Str"") && resource.getFullPath().toOSString().contains(EResourceConstant.SYSTEM_INDICATORS.getName());
}","private boolean isSystemIndicator(IResource resource){
  if (resource instanceof IFile) {
    return resource.getFileExtension().equals(""String_Node_Str"") && resource.getFullPath().toOSString().contains(EResourceConstant.SYSTEM_INDICATORS.getName());
  }
 else {
    return resource.getFullPath().toOSString().contains(EResourceConstant.SYSTEM_INDICATORS.getName());
  }
}",0.7325383304940375
138865,"/** 
 * setup the Grid Layout Data to limit the vertical size of the table according to the numOfRows. if (numOfRows <= 10) then table will be 10 rows height, if (numOfRows > 10) then the table will be 30 rows heigth
 * @param table the table to set the GridData value on
 * @param numOfRows number of rows in the table ADDED sgandon 15/03/2010 bug 11769 : setup the size of the table toavoid crash and add consistency.
 */
protected void setupTableGridDataLimitedSize(Table table,int numOfRows){
  int itemHeight=table.getItemHeight();
  GridData data=new GridData(SWT.FILL,SWT.FILL,false,false);
  data.heightHint=numOfRows > TABLE_MIN_ROW_LIMIT ? BIG_TABLE_NUM_ROWS * itemHeight : SMALL_TABLE_NUM_ROWS * itemHeight;
  int tableWidth=0;
  for (  TableColumn column : table.getColumns()) {
    tableWidth+=column.getWidth();
  }
  data.widthHint=TABLE_WIDTH_HINT > tableWidth ? tableWidth : TABLE_WIDTH_HINT;
  table.setLayoutData(data);
}","/** 
 * setup the Grid Layout Data to limit the vertical size of the table according to the numOfRows. if (numOfRows <= 10) then table will be 10 rows height, if (numOfRows > 10) then the table will be 30 rows heigth
 * @param table the table to set the GridData value on
 * @param numOfRows number of rows in the table ADDED sgandon 15/03/2010 bug 11769 : setup the size of the table toavoid crash and add consistency.
 */
protected void setupTableGridDataLimitedSize(Table table,int numOfRows){
  int itemHeight=table.getItemHeight();
  GridData data=new GridData(SWT.FILL,SWT.FILL,false,false);
  data.heightHint=numOfRows > TABLE_MIN_ROW_LIMIT ? BIG_TABLE_NUM_ROWS * itemHeight : SMALL_TABLE_NUM_ROWS * itemHeight;
  int tableWidth=0;
  for (  TableColumn column : table.getColumns()) {
    tableWidth+=column.getWidth() + 50;
  }
  data.widthHint=TABLE_WIDTH_HINT > tableWidth ? tableWidth : TABLE_WIDTH_HINT;
  table.setLayoutData(data);
}",0.9973474801061007
138866,"/** 
 * setup the Grid Layout Data to limit the vertical size of the table according to the numOfRows. if (numOfRows <= 10) then table will be 10 rows height, if (numOfRows > 10) then the table will be 30 rows heigth
 * @param table the table to set the GridData value on
 * @param numOfRows number of rows in the table ADDED sgandon 15/03/2010 bug 11769 : setup the size of the table toavoid crash and add consistency.
 */
protected void setupTableGridDataLimitedSize(Table table,int numOfRows){
  int itemHeight=table.getItemHeight();
  GridData data=new GridData(SWT.FILL,SWT.FILL,false,false);
  data.heightHint=numOfRows > TABLE_MIN_ROW_LIMIT ? BIG_TABLE_NUM_ROWS * itemHeight : SMALL_TABLE_NUM_ROWS * itemHeight;
  int tableWidth=0;
  for (  TableColumn column : table.getColumns()) {
    tableWidth+=column.getWidth() + 50;
  }
  data.widthHint=TABLE_WIDTH_HINT > tableWidth ? tableWidth : TABLE_WIDTH_HINT;
  table.setLayoutData(data);
}","/** 
 * setup the Grid Layout Data to limit the vertical size of the table according to the numOfRows. if (numOfRows <= 10) then table will be 10 rows height, if (numOfRows > 10) then the table will be 30 rows heigth
 * @param table the table to set the GridData value on
 * @param numOfRows number of rows in the table ADDED sgandon 15/03/2010 bug 11769 : setup the size of the table toavoid crash and add consistency.
 */
protected void setupTableGridDataLimitedSize(Table table,int numOfRows){
  int itemHeight=table.getItemHeight();
  GridData data=new GridData(SWT.FILL,SWT.FILL,true,false);
  data.heightHint=numOfRows > TABLE_MIN_ROW_LIMIT ? BIG_TABLE_NUM_ROWS * itemHeight : SMALL_TABLE_NUM_ROWS * itemHeight;
  table.setLayoutData(data);
}",0.8800945067926758
138867,"@Override public void postStartup(){
  super.postStartup();
  try {
    if (!RegisterManagement.getInstance().isProductRegistered()) {
      RegisterWizard registerWizard=new RegisterWizard();
      Shell shell=getWorkbenchConfigurer().getWorkbench().getActiveWorkbenchWindow().getShell();
      WizardDialog dialog=new RegisterWizardDialog(shell,registerWizard);
      dialog.setTitle(""String_Node_Str"");
      if (dialog.open() == WizardDialog.OK) {
        String projectLanguage=""String_Node_Str"";
        String osName=System.getProperty(""String_Node_Str"");
        String osVersion=System.getProperty(""String_Node_Str"");
        String javaVersion=System.getProperty(""String_Node_Str"");
        long totalMemory=Runtime.getRuntime().totalMemory();
        com.sun.management.OperatingSystemMXBean composantSystem=(com.sun.management.OperatingSystemMXBean)ManagementFactory.getOperatingSystemMXBean();
        Long memRAM=new Long(composantSystem.getTotalPhysicalMemorySize() / 1024);
        int nbProc=Runtime.getRuntime().availableProcessors();
        RegisterManagement.register(registerWizard.getEmail(),registerWizard.getCountry(),registerWizard.isProxyEnabled(),registerWizard.getProxyHost(),registerWizard.getProxyPort(),CorePlugin.getDefault().getBundle().getHeaders().get(org.osgi.framework.Constants.BUNDLE_VERSION).toString(),projectLanguage,osName,osVersion,javaVersion,totalMemory,memRAM,nbProc);
      }
 else {
        RegisterManagement.decrementTry();
      }
    }
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"" + e.getLocalizedMessage(),e);
  }
}","@Override public void postStartup(){
  super.postStartup();
  try {
    if (!RegisterManagement.getInstance().isProductRegistered()) {
      RegisterWizard registerWizard=new RegisterWizard();
      Shell shell=getWorkbenchConfigurer().getWorkbench().getActiveWorkbenchWindow().getShell();
      WizardDialog dialog=new RegisterWizardDialog(shell,registerWizard);
      dialog.setTitle(""String_Node_Str"");
      if (dialog.open() == WizardDialog.OK) {
        String projectLanguage=""String_Node_Str"";
        String osName=System.getProperty(""String_Node_Str"");
        String osVersion=System.getProperty(""String_Node_Str"");
        String javaVersion=System.getProperty(""String_Node_Str"");
        long totalMemory=Runtime.getRuntime().totalMemory();
        com.sun.management.OperatingSystemMXBean composantSystem=(com.sun.management.OperatingSystemMXBean)ManagementFactory.getOperatingSystemMXBean();
        Long memRAM=new Long(composantSystem.getTotalPhysicalMemorySize() / 1024);
        int nbProc=Runtime.getRuntime().availableProcessors();
        RegisterManagement.getInstance().register(registerWizard.getEmail(),registerWizard.getCountry(),registerWizard.isProxyEnabled(),registerWizard.getProxyHost(),registerWizard.getProxyPort(),CorePlugin.getDefault().getBundle().getHeaders().get(org.osgi.framework.Constants.BUNDLE_VERSION).toString(),projectLanguage,osName,osVersion,javaVersion,totalMemory,memRAM,nbProc);
      }
 else {
        RegisterManagement.decrementTry();
      }
    }
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"" + e.getLocalizedMessage(),e);
  }
}",0.9956057752667922
138868,"@SuppressWarnings(""String_Node_Str"") public static TypedReturnCode<TableNode> findSqlExplorerTableNode(Connection providerConnection,Package parentPackageElement,String tableName,String activeTabName){
  new ChangePerspectiveAction(PluginConstant.SE_ID).run();
  Collection<Alias> aliases=SQLExplorerPlugin.getDefault().getAliasManager().getAliases();
  String url=ConnectionUtils.getURL(providerConnection);
  User currentUser=null;
  for (  Alias alias : aliases) {
    if (alias.getUrl().equals(url)) {
      currentUser=alias.getDefaultUser();
      OpenPasswordConnectDialogAction openDlgAction=new OpenPasswordConnectDialogAction(alias,alias.getDefaultUser(),false);
      openDlgAction.run();
      break;
    }
  }
  Shell shell=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell();
  if (currentUser == null) {
    MessageDialog.openWarning(shell,DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str"") + tableName);
    return new TypedReturnCode<TableNode>(DefaultMessagesImpl.getString(""String_Node_Str"",tableName),false);
  }
  DatabaseNode root=currentUser.getMetaDataSession().getRoot();
  root.load();
  List<INode> catalogs=root.getCatalogs();
  List<INode> schemas=root.getSchemas();
  Catalog doSwitch=SwitchHelpers.CATALOG_SWITCH.doSwitch(parentPackageElement);
  INode catalogOrSchemaNode=null;
  if (doSwitch != null) {
    if (catalogs.size() != 0) {
      for (      INode catalogNode : catalogs) {
        if (parentPackageElement.getName().equalsIgnoreCase(catalogNode.getName())) {
          catalogOrSchemaNode=catalogNode;
          break;
        }
      }
    }
 else     catalogOrSchemaNode=root;
  }
 else {
    for (    INode schemaNode : schemas) {
      if (parentPackageElement.getName().equalsIgnoreCase(schemaNode.getName())) {
        catalogOrSchemaNode=schemaNode;
        break;
      }
    }
  }
  INode[] childNodes=catalogOrSchemaNode.getChildNodes();
  TableFolderNode tableFolderNode=null;
  for (  INode node : childNodes) {
    if (""String_Node_Str"".equals(node.getQualifiedName())) {
      tableFolderNode=(TableFolderNode)node;
      break;
    }
  }
  INode[] tableNodes=tableFolderNode.getChildNodes();
  for (  INode node : tableNodes) {
    if (tableName.equalsIgnoreCase(node.getName())) {
      TypedReturnCode<TableNode> typedReturnCode=new TypedReturnCode<TableNode>(null,true);
      typedReturnCode.setObject((TableNode)node);
      DetailTabManager.setActiveTabName(activeTabName);
      DatabaseStructureView dsView=SQLExplorerPlugin.getDefault().getDatabaseStructureView();
      dsView.setSessionSelectionNode(currentUser.getMetaDataSession(),new StructuredSelection(node));
      SQLExplorerPlugin.getDefault().getConnectionsView().getTreeViewer().setSelection(new StructuredSelection(currentUser));
      return typedReturnCode;
    }
  }
  MessageDialog.openWarning(shell,DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str"") + tableName);
  return new TypedReturnCode<TableNode>(DefaultMessagesImpl.getString(""String_Node_Str"",tableName),false);
}","@SuppressWarnings(""String_Node_Str"") public static TypedReturnCode<TableNode> findSqlExplorerTableNode(Connection providerConnection,Package parentPackageElement,String tableName,String activeTabName){
  new ChangePerspectiveAction(PluginConstant.SE_ID).run();
  Collection<Alias> aliases=SQLExplorerPlugin.getDefault().getAliasManager().getAliases();
  String url=ConnectionUtils.getURL(providerConnection);
  User currentUser=null;
  for (  Alias alias : aliases) {
    if (alias.getUrl().equals(url)) {
      currentUser=alias.getDefaultUser();
      OpenPasswordConnectDialogAction openDlgAction=new OpenPasswordConnectDialogAction(alias,alias.getDefaultUser(),false);
      openDlgAction.run();
      break;
    }
  }
  Shell shell=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell();
  if (currentUser == null) {
    MessageDialog.openWarning(shell,DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str"") + tableName);
    return new TypedReturnCode<TableNode>(DefaultMessagesImpl.getString(""String_Node_Str"",tableName),false);
  }
  DatabaseNode root=currentUser.getMetaDataSession().getRoot();
  root.load();
  List<INode> catalogs=root.getCatalogs();
  List<INode> schemas=root.getSchemas();
  Catalog doSwitch=SwitchHelpers.CATALOG_SWITCH.doSwitch(parentPackageElement);
  INode catalogOrSchemaNode=null;
  if (doSwitch != null) {
    if (catalogs.size() != 0) {
      for (      INode catalogNode : catalogs) {
        if (parentPackageElement.getName().equalsIgnoreCase(catalogNode.getName())) {
          catalogOrSchemaNode=catalogNode;
          break;
        }
      }
    }
 else     catalogOrSchemaNode=root;
  }
 else {
    for (    INode schemaNode : schemas) {
      if (parentPackageElement.getName().equalsIgnoreCase(schemaNode.getName())) {
        catalogOrSchemaNode=schemaNode;
        break;
      }
    }
  }
  INode[] childNodes=catalogOrSchemaNode.getChildNodes();
  TableFolderNode tableFolderNode=null;
  for (  INode node : childNodes) {
    if (""String_Node_Str"".equals(node.getQualifiedName())) {
      tableFolderNode=(TableFolderNode)node;
      break;
    }
  }
  INode[] tableNodes=tableFolderNode.getChildNodes();
  for (  INode node : tableNodes) {
    if (tableName.equalsIgnoreCase(node.getName())) {
      TypedReturnCode<TableNode> typedReturnCode=new TypedReturnCode<TableNode>(null,true);
      typedReturnCode.setObject((TableNode)node);
      DetailTabManager.setActiveTabName(activeTabName);
      DatabaseStructureView dsView=SQLExplorerPlugin.getDefault().getDatabaseStructureView();
      dsView.setSessionSelectionNode(currentUser.getMetaDataSession(),new StructuredSelection(node));
      SQLExplorerPlugin.getDefault().getConnectionsView().getTreeViewer().setSelection(new StructuredSelection(currentUser));
      return typedReturnCode;
    }
  }
  MessageDialog.openWarning(shell,DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str"",tableName));
  return new TypedReturnCode<TableNode>(DefaultMessagesImpl.getString(""String_Node_Str"",tableName),false);
}",0.9961451975586252
138869,"protected void displayTableAndViewComp(final SchemaIndicator schemaIndicator){
  tableAndViewComposite.setVisible(true);
  List<TableIndicator> indicatorTableList=(List<TableIndicator>)schemaIndicator.getTableIndicators();
  if (tableOfCatalogOrSchemaViewer == null) {
    tableOfCatalogOrSchemaViewer=new TableViewer(tableAndViewComposite,SWT.H_SCROLL | SWT.V_SCROLL | SWT.BORDER| SWT.SINGLE);
    final Table catalogOrSchemaTable=tableOfCatalogOrSchemaViewer.getTable();
    catalogOrSchemaTable.setHeaderVisible(true);
    catalogOrSchemaTable.setLinesVisible(true);
    GridData layoutData=new GridData(SWT.FILL,SWT.FILL,true,true);
    layoutData.heightHint=150;
    catalogOrSchemaTable.setLayoutData(layoutData);
    String[] columnTexts=new String[]{DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str"")};
    createSorterColumns(tableOfCatalogOrSchemaViewer,columnTexts,tableSorters,COLUMN_TABLE_WIDTH);
    TableOfCatalogOrSchemaProvider providerTable=new TableOfCatalogOrSchemaProvider();
    tableOfCatalogOrSchemaViewer.setLabelProvider(providerTable);
    tableOfCatalogOrSchemaViewer.setContentProvider(providerTable);
    final TableCursor cursor=new TableCursor(catalogOrSchemaTable,SWT.NONE);
    cursor.setBackground(catalogOrSchemaTable.getDisplay().getSystemColor(SWT.COLOR_LIST_SELECTION));
    cursor.setForeground(catalogOrSchemaTable.getDisplay().getSystemColor(SWT.COLOR_LIST_SELECTION_TEXT));
    cursor.setLayout(new FillLayout());
    final Menu menu=new Menu(catalogOrSchemaTable);
    MenuItem keyitem=new MenuItem(menu,SWT.PUSH);
    keyitem.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    keyitem.setImage(ImageLib.getImage(ImageLib.PK_DECORATE));
    final Menu menu1=new Menu(catalogOrSchemaTable);
    MenuItem indexitem=new MenuItem(menu1,SWT.PUSH);
    indexitem.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    indexitem.setImage(ImageLib.getImage(ImageLib.INDEX_VIEW));
    final Menu menu2=new Menu(catalogOrSchemaTable);
    MenuItem tableAnalysisitem=new MenuItem(menu2,SWT.PUSH);
    tableAnalysisitem.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    tableAnalysisitem.setImage(ImageLib.getImage(ImageLib.ACTION_NEW_ANALYSIS));
    keyitem.addSelectionListener(new SelectionAdapter(){
      public void widgetSelected(      SelectionEvent e){
        TableItem tableItem=cursor.getRow();
        String tableName=tableItem.getText(0);
        Package parentPack=(Package)currentSelectionSchemaIndicator.getAnalyzedElement();
        if (currentCatalogIndicator != null)         parentPack=(Package)currentCatalogIndicator.getAnalyzedElement();
        TypedReturnCode<TableNode> findSqlExplorerTableNode=SqlExplorerBridge.findSqlExplorerTableNode(tdDataProvider,parentPack,tableName,Messages.getString(""String_Node_Str""));
        if (!findSqlExplorerTableNode.isOk()) {
          log.error(findSqlExplorerTableNode.getMessage());
        }
      }
    }
);
    indexitem.addSelectionListener(new SelectionAdapter(){
      public void widgetSelected(      SelectionEvent e){
        TableItem tableItem=cursor.getRow();
        String tableName=tableItem.getText(0);
        Package parentPack=(Package)currentSelectionSchemaIndicator.getAnalyzedElement();
        if (currentCatalogIndicator != null)         parentPack=(Package)currentCatalogIndicator.getAnalyzedElement();
        TypedReturnCode<TableNode> findSqlExplorerTableNode=SqlExplorerBridge.findSqlExplorerTableNode(tdDataProvider,parentPack,tableName,Messages.getString(""String_Node_Str""));
        if (!findSqlExplorerTableNode.isOk()) {
          log.error(findSqlExplorerTableNode.getMessage());
        }
      }
    }
);
    tableAnalysisitem.addSelectionListener(new SelectionAdapter(){
      public void widgetSelected(      SelectionEvent e){
        TableItem tableItem=cursor.getRow();
        runTableAnalysis(tableItem.getText(0));
      }
    }
);
    cursor.addMenuDetectListener(new MenuDetectListener(){
      public void menuDetected(      MenuDetectEvent e){
        int column=cursor.getColumn();
        if (column == TABLE_COLUMN_INDEX) {
          cursor.setMenu(menu2);
          menu2.setVisible(true);
        }
 else         if (column == VIEW_COLUMN_INDEXES) {
          cursor.setMenu(menu1);
          menu1.setVisible(true);
        }
 else         if (column == VIEW_COLUMN_INDEX) {
          cursor.setMenu(menu);
          menu.setVisible(true);
        }
 else {
          cursor.setMenu(null);
        }
      }
    }
);
    viewOfCatalogOrSchemaViewer=new TableViewer(tableAndViewComposite,SWT.H_SCROLL | SWT.V_SCROLL | SWT.BORDER| SWT.FULL_SELECTION);
    Table tableCatalogOrSchemaView=viewOfCatalogOrSchemaViewer.getTable();
    tableCatalogOrSchemaView.setHeaderVisible(true);
    tableCatalogOrSchemaView.setLinesVisible(true);
    layoutData=new GridData(SWT.FILL,SWT.FILL,true,true);
    layoutData.heightHint=150;
    tableCatalogOrSchemaView.setLayoutData(layoutData);
    columnTexts=new String[]{DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str"")};
    createSorterColumns(viewOfCatalogOrSchemaViewer,columnTexts,viewSorters,COLUMN_VIEW_WIDTH);
    ViewOfCatalogOrSchemaProvider viewProvider=new ViewOfCatalogOrSchemaProvider();
    viewOfCatalogOrSchemaViewer.setLabelProvider(viewProvider);
    viewOfCatalogOrSchemaViewer.setContentProvider(viewProvider);
  }
  tableOfCatalogOrSchemaViewer.getTable().setMenu(null);
  tableOfCatalogOrSchemaViewer.setInput(indicatorTableList);
  List<ViewIndicator> indicatorViewList=(List<ViewIndicator>)schemaIndicator.getViewIndicators();
  viewOfCatalogOrSchemaViewer.setInput(indicatorViewList);
  tableAndViewComposite.pack();
  statisticalSection.pack();
  statisticalSection.layout();
  form.reflow(true);
}","protected void displayTableAndViewComp(final SchemaIndicator schemaIndicator){
  tableAndViewComposite.setVisible(true);
  List<TableIndicator> indicatorTableList=(List<TableIndicator>)schemaIndicator.getTableIndicators();
  if (tableOfCatalogOrSchemaViewer == null) {
    tableOfCatalogOrSchemaViewer=new TableViewer(tableAndViewComposite,SWT.H_SCROLL | SWT.V_SCROLL | SWT.BORDER| SWT.SINGLE);
    final Table catalogOrSchemaTable=tableOfCatalogOrSchemaViewer.getTable();
    catalogOrSchemaTable.setHeaderVisible(true);
    catalogOrSchemaTable.setLinesVisible(true);
    GridData layoutData=new GridData(SWT.FILL,SWT.FILL,true,true);
    layoutData.heightHint=150;
    catalogOrSchemaTable.setLayoutData(layoutData);
    String[] columnTexts=new String[]{DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str"")};
    createSorterColumns(tableOfCatalogOrSchemaViewer,columnTexts,tableSorters,COLUMN_TABLE_WIDTH);
    TableOfCatalogOrSchemaProvider providerTable=new TableOfCatalogOrSchemaProvider();
    tableOfCatalogOrSchemaViewer.setLabelProvider(providerTable);
    tableOfCatalogOrSchemaViewer.setContentProvider(providerTable);
    final TableCursor cursor=new TableCursor(catalogOrSchemaTable,SWT.NONE);
    cursor.setBackground(catalogOrSchemaTable.getDisplay().getSystemColor(SWT.COLOR_LIST_SELECTION));
    cursor.setForeground(catalogOrSchemaTable.getDisplay().getSystemColor(SWT.COLOR_LIST_SELECTION_TEXT));
    cursor.setLayout(new FillLayout());
    final Menu menu=new Menu(catalogOrSchemaTable);
    MenuItem keyitem=new MenuItem(menu,SWT.PUSH);
    keyitem.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    keyitem.setImage(ImageLib.getImage(ImageLib.PK_DECORATE));
    final Menu menu1=new Menu(catalogOrSchemaTable);
    MenuItem indexitem=new MenuItem(menu1,SWT.PUSH);
    indexitem.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    indexitem.setImage(ImageLib.getImage(ImageLib.INDEX_VIEW));
    final Menu menu2=new Menu(catalogOrSchemaTable);
    MenuItem tableAnalysisitem=new MenuItem(menu2,SWT.PUSH);
    tableAnalysisitem.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    tableAnalysisitem.setImage(ImageLib.getImage(ImageLib.ACTION_NEW_ANALYSIS));
    keyitem.addSelectionListener(new SelectionAdapter(){
      public void widgetSelected(      SelectionEvent e){
        TableItem tableItem=cursor.getRow();
        String tableName=tableItem.getText(0);
        Package parentPack=(Package)currentSelectionSchemaIndicator.getAnalyzedElement();
        if (currentCatalogIndicator != null)         parentPack=(Package)currentCatalogIndicator.getAnalyzedElement();
        TypedReturnCode<TableNode> findSqlExplorerTableNode=SqlExplorerBridge.findSqlExplorerTableNode(tdDataProvider,parentPack,tableName,Messages.getString(""String_Node_Str""));
        if (!findSqlExplorerTableNode.isOk()) {
        }
      }
    }
);
    indexitem.addSelectionListener(new SelectionAdapter(){
      public void widgetSelected(      SelectionEvent e){
        TableItem tableItem=cursor.getRow();
        String tableName=tableItem.getText(0);
        Package parentPack=(Package)currentSelectionSchemaIndicator.getAnalyzedElement();
        if (currentCatalogIndicator != null)         parentPack=(Package)currentCatalogIndicator.getAnalyzedElement();
        TypedReturnCode<TableNode> findSqlExplorerTableNode=SqlExplorerBridge.findSqlExplorerTableNode(tdDataProvider,parentPack,tableName,Messages.getString(""String_Node_Str""));
        if (!findSqlExplorerTableNode.isOk()) {
        }
      }
    }
);
    tableAnalysisitem.addSelectionListener(new SelectionAdapter(){
      public void widgetSelected(      SelectionEvent e){
        TableItem tableItem=cursor.getRow();
        runTableAnalysis(tableItem.getText(0));
      }
    }
);
    cursor.addMenuDetectListener(new MenuDetectListener(){
      public void menuDetected(      MenuDetectEvent e){
        int column=cursor.getColumn();
        if (column == TABLE_COLUMN_INDEX) {
          cursor.setMenu(menu2);
          menu2.setVisible(true);
        }
 else         if (column == VIEW_COLUMN_INDEXES) {
          cursor.setMenu(menu1);
          menu1.setVisible(true);
        }
 else         if (column == VIEW_COLUMN_INDEX) {
          cursor.setMenu(menu);
          menu.setVisible(true);
        }
 else {
          cursor.setMenu(null);
        }
      }
    }
);
    viewOfCatalogOrSchemaViewer=new TableViewer(tableAndViewComposite,SWT.H_SCROLL | SWT.V_SCROLL | SWT.BORDER| SWT.FULL_SELECTION);
    Table tableCatalogOrSchemaView=viewOfCatalogOrSchemaViewer.getTable();
    tableCatalogOrSchemaView.setHeaderVisible(true);
    tableCatalogOrSchemaView.setLinesVisible(true);
    layoutData=new GridData(SWT.FILL,SWT.FILL,true,true);
    layoutData.heightHint=150;
    tableCatalogOrSchemaView.setLayoutData(layoutData);
    columnTexts=new String[]{DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str"")};
    createSorterColumns(viewOfCatalogOrSchemaViewer,columnTexts,viewSorters,COLUMN_VIEW_WIDTH);
    ViewOfCatalogOrSchemaProvider viewProvider=new ViewOfCatalogOrSchemaProvider();
    viewOfCatalogOrSchemaViewer.setLabelProvider(viewProvider);
    viewOfCatalogOrSchemaViewer.setContentProvider(viewProvider);
  }
  tableOfCatalogOrSchemaViewer.getTable().setMenu(null);
  tableOfCatalogOrSchemaViewer.setInput(indicatorTableList);
  List<ViewIndicator> indicatorViewList=(List<ViewIndicator>)schemaIndicator.getViewIndicators();
  viewOfCatalogOrSchemaViewer.setInput(indicatorViewList);
  tableAndViewComposite.pack();
  statisticalSection.pack();
  statisticalSection.layout();
  form.reflow(true);
}",0.8901173668991325
138870,"@Override public void postStartup(){
  super.postStartup();
  try {
    if (!RegisterManagement.isProductRegistered()) {
      RegisterWizard registerWizard=new RegisterWizard();
      Shell shell=getWorkbenchConfigurer().getWorkbench().getActiveWorkbenchWindow().getShell();
      WizardDialog dialog=new RegisterWizardDialog(shell,registerWizard);
      dialog.setTitle(""String_Node_Str"");
      if (dialog.open() == WizardDialog.OK) {
        String projectLanguage=""String_Node_Str"";
        String osName=System.getProperty(""String_Node_Str"");
        String osVersion=System.getProperty(""String_Node_Str"");
        String javaVersion=System.getProperty(""String_Node_Str"");
        long totalMemory=Runtime.getRuntime().totalMemory();
        com.sun.management.OperatingSystemMXBean composantSystem=(com.sun.management.OperatingSystemMXBean)ManagementFactory.getOperatingSystemMXBean();
        Long memRAM=new Long(composantSystem.getTotalPhysicalMemorySize() / 1024);
        int nbProc=Runtime.getRuntime().availableProcessors();
        RegisterManagement.register(registerWizard.getEmail(),registerWizard.getCountry(),registerWizard.isProxyEnabled(),registerWizard.getProxyHost(),registerWizard.getProxyPort(),CorePlugin.getDefault().getBundle().getHeaders().get(org.osgi.framework.Constants.BUNDLE_VERSION).toString(),projectLanguage,osName,osVersion,javaVersion,totalMemory,memRAM,nbProc);
      }
 else {
        RegisterManagement.decrementTry();
      }
    }
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"" + e.getLocalizedMessage(),e);
  }
}","@Override public void postStartup(){
  super.postStartup();
  try {
    if (!RegisterManagement.getInstance().isProductRegistered()) {
      RegisterWizard registerWizard=new RegisterWizard();
      Shell shell=getWorkbenchConfigurer().getWorkbench().getActiveWorkbenchWindow().getShell();
      WizardDialog dialog=new RegisterWizardDialog(shell,registerWizard);
      dialog.setTitle(""String_Node_Str"");
      if (dialog.open() == WizardDialog.OK) {
        String projectLanguage=""String_Node_Str"";
        String osName=System.getProperty(""String_Node_Str"");
        String osVersion=System.getProperty(""String_Node_Str"");
        String javaVersion=System.getProperty(""String_Node_Str"");
        long totalMemory=Runtime.getRuntime().totalMemory();
        com.sun.management.OperatingSystemMXBean composantSystem=(com.sun.management.OperatingSystemMXBean)ManagementFactory.getOperatingSystemMXBean();
        Long memRAM=new Long(composantSystem.getTotalPhysicalMemorySize() / 1024);
        int nbProc=Runtime.getRuntime().availableProcessors();
        RegisterManagement.register(registerWizard.getEmail(),registerWizard.getCountry(),registerWizard.isProxyEnabled(),registerWizard.getProxyHost(),registerWizard.getProxyPort(),CorePlugin.getDefault().getBundle().getHeaders().get(org.osgi.framework.Constants.BUNDLE_VERSION).toString(),projectLanguage,osName,osVersion,javaVersion,totalMemory,memRAM,nbProc);
      }
 else {
        RegisterManagement.decrementTry();
      }
    }
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"" + e.getLocalizedMessage(),e);
  }
}",0.9955668144395188
138871,"@Override protected void deleteRelated(IFile file){
}","@Override protected void deleteRelated(IFile file){
  EObjectHelper.getDependencyClients(file);
}",0.7066666666666667
138872,"/** 
 * Save logical delete path to TXT file.
 * @param type
 * @param path
 */
public static void saveElement(String type,String path){
  try {
    File f=new Path(filePath).toFile();
    if (!f.exists()) {
      f=new File(filePath);
      f.createNewFile();
    }
    FileWriter fw=new FileWriter(f.getPath(),true);
    PrintWriter out=new PrintWriter(fw);
    out.println(type + path);
    fw.close();
    out.close();
    String[] es={type.replaceAll(""String_Node_Str"",PluginConstant.EMPTY_STRING),path};
    delLs.add(es);
  }
 catch (  Exception exc) {
    log.error(exc,exc);
  }
}","/** 
 * Save logical delete path to TXT file.
 * @param type
 * @param path
 */
public static void saveElement(String type,String path){
  try {
    File f=new Path(filePath).toFile();
    if (!f.exists()) {
      f=new File(filePath);
      f.createNewFile();
    }
    FileWriter fw=new FileWriter(f.getPath(),true);
    PrintWriter out=new PrintWriter(fw);
    out.println(type + path);
    fw.close();
    out.close();
    String[] es={type.replaceAll(""String_Node_Str"",PluginConstant.EMPTY_STRING),path};
    if (delLs == null) {
      delLs=getDelLs();
    }
    delLs.add(es);
  }
 catch (  Exception exc) {
    log.error(exc,exc);
  }
}",0.9553933495539336
138873,"/** 
 * DOC qzhang DeleteFolderAction constructor comment.
 */
public DeleteFolderAction(IFolder obj,boolean isDeleteForever){
  this.folder=obj;
  this.isDeleteForever=isDeleteForever;
  if (isDeleteForever) {
    setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  }
 else {
    setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  }
  setImageDescriptor(PlatformUI.getWorkbench().getSharedImages().getImageDescriptor(ISharedImages.IMG_TOOL_DELETE));
}","/** 
 * DOC qzhang DeleteFolderAction constructor comment.
 */
public DeleteFolderAction(IFolder obj,boolean isDeleteForever){
  this.folder=obj;
  this.isDeleteForever=isDeleteForever;
  setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  setImageDescriptor(PlatformUI.getWorkbench().getSharedImages().getImageDescriptor(ISharedImages.IMG_TOOL_DELETE));
}",0.8732057416267942
138874,"@Override public void run(){
  IFolder parent=(IFolder)folder.getParent();
  boolean isFilesDeleted=deleteFolderAndFiles();
  if (!isFilesDeleted) {
    return;
  }
  try {
    if (isDeleteForever) {
      delsubFolderForever(folder);
      if (LogicalDeleteFileHandle.isStartWithDelFolder(folder.getFullPath().toOSString())) {
        LogicalDeleteFileHandle.replaceInFile(LogicalDeleteFileHandle.folderType + folder.getFullPath().toOSString(),PluginConstant.EMPTY_STRING);
        folder.delete(true,null);
      }
    }
 else {
      LogicalDeleteFileHandle.saveElement(LogicalDeleteFileHandle.folderType,folder.getFullPath().toOSString());
    }
    CorePlugin.getDefault().refreshDQView();
    ProxyRepositoryManager.getInstance().save();
    parent.refreshLocal(IResource.DEPTH_INFINITE,null);
  }
 catch (  CoreException e) {
    log.error(e,e);
  }
}","@Override public void run(){
  boolean isFilesDeleted=deleteFolderAndFiles();
  if (!isFilesDeleted) {
    return;
  }
  try {
    folder.delete(true,null);
    CorePlugin.getDefault().refreshDQView();
    ProxyRepositoryManager.getInstance().save();
  }
 catch (  CoreException e) {
    log.error(e,e);
  }
}",0.3581833761782348
138875,"/** 
 * DOC bZhou Comment method ""getSelectedProperties"".
 * @return
 */
private List<Property> getSelectedProperties(){
  List<Property> propList=new ArrayList<Property>();
  DQRespositoryView findView=CorePlugin.getDefault().getRepositoryView();
  TreeSelection treeSelection=(TreeSelection)findView.getCommonViewer().getSelection();
  Iterator iterator=treeSelection.iterator();
  while (iterator.hasNext()) {
    Object obj=iterator.next();
    Property property=null;
    if (obj instanceof IFile) {
      property=PropertyHelper.getProperty((IFile)obj);
    }
 else     if (obj instanceof IRepositoryViewObject) {
      property=((IRepositoryViewObject)obj).getProperty();
    }
 else     if (obj instanceof DQRecycleBinNode) {
      DQRecycleBinNode node=(DQRecycleBinNode)obj;
      node.getObject();
    }
    propList.add(property);
  }
  return propList;
}","/** 
 * DOC bZhou Comment method ""getSelectedProperties"".
 * @return
 */
private List<Property> getSelectedProperties(){
  List<Property> propList=new ArrayList<Property>();
  DQRespositoryView findView=CorePlugin.getDefault().getRepositoryView();
  TreeSelection treeSelection=(TreeSelection)findView.getCommonViewer().getSelection();
  Iterator iterator=treeSelection.iterator();
  while (iterator.hasNext()) {
    Object obj=iterator.next();
    Property property=null;
    if (obj instanceof IFile) {
      property=PropertyHelper.getProperty((IFile)obj);
    }
 else     if (obj instanceof IFolder) {
      IFolder folder=(IFolder)obj;
      propList.addAll(getAllSubFileProperties(folder));
    }
 else     if (obj instanceof IRepositoryViewObject) {
      property=((IRepositoryViewObject)obj).getProperty();
    }
 else     if (obj instanceof DQRecycleBinNode) {
      DQRecycleBinNode node=(DQRecycleBinNode)obj;
      node.getObject();
    }
    if (property != null) {
      propList.add(property);
    }
  }
  return propList;
}",0.9092815941269008
138876,"@Override public void run(){
  List<Property> propList=getSelectedProperties();
  List<IDeletionHandle> handleList=new ArrayList<IDeletionHandle>();
  for (  Property property : propList) {
    IDeletionHandle handle=ActionHandleFactory.createDeletionHandle(property);
    List<ModelElement> dependencies=handle.getDependencies();
    if (dependencies != null && !dependencies.isEmpty()) {
      MessageDialog.openWarning(null,""String_Node_Str"",""String_Node_Str"");
      return;
    }
 else {
      handleList.add(handle);
    }
  }
  try {
    for (    IDeletionHandle handle : handleList) {
      if (!showConfirmDialog()) {
        return;
      }
      CorePlugin.getDefault().closeEditorIfOpened(handle.getProperty());
      runStatus=handle.delete();
    }
  }
 catch (  Exception e) {
    log.error(e,e);
  }
  ProxyRepositoryManager.getInstance().save();
  CorePlugin.getDefault().refreshDQView();
  CorePlugin.getDefault().refreshWorkSpace();
}","@Override public void run(){
  List<Property> propList=getSelectedProperties();
  List<IDeletionHandle> handleList=new ArrayList<IDeletionHandle>();
  for (  Property property : propList) {
    IDeletionHandle handle=ActionHandleFactory.createDeletionHandle(property);
    List<ModelElement> dependencies=handle.getDependencies();
    if (dependencies != null && !dependencies.isEmpty()) {
      IFile itemFile=PropertyHelper.getItemFile(property);
      showDependenciesDialog(itemFile,dependencies);
      return;
    }
 else {
      handleList.add(handle);
    }
  }
  try {
    for (    IDeletionHandle handle : handleList) {
      if (!showConfirmDialog()) {
        return;
      }
      CorePlugin.getDefault().closeEditorIfOpened(handle.getProperty());
      runStatus=handle.delete();
    }
  }
 catch (  Exception e) {
    log.error(e,e);
  }
  ProxyRepositoryManager.getInstance().save();
  CorePlugin.getDefault().refreshDQView();
  CorePlugin.getDefault().refreshWorkSpace();
}",0.9140504374678332
138877,"public List<String> readWorkspaceTasksDone(){
  return null;
}","public List<String> readWorkspaceTasksDone(){
  return new ArrayList<String>();
}",0.8251748251748252
138878,"/** 
 * Adds a submenu to the given menu with the name ""New Component"".
 */
public void fillContextMenu(IMenuManager menu){
  Object obj=((TreeSelection)this.getContext().getSelection()).getFirstElement();
  if (obj instanceof IResource) {
    IResource resource=(IResource)obj;
    if (!ResourceService.isReadOnlyFolder(resource)) {
      menu.add(new DeleteObjectsAction());
    }
  }
 else   if (obj instanceof DQRecycleBinNode) {
    menu.add(new DeleteObjectsAction());
  }
}","/** 
 * Adds a submenu to the given menu with the name ""New Component"".
 */
public void fillContextMenu(IMenuManager menu){
  Object obj=((TreeSelection)this.getContext().getSelection()).getFirstElement();
  if (obj instanceof IResource) {
    IResource resource=(IResource)obj;
    if (!ResourceService.isReadOnlyFolder(resource)) {
      menu.add(new DeleteObjectsAction());
    }
  }
 else {
    menu.add(new DeleteObjectsAction());
  }
}",0.9185667752442996
138879,"/** 
 * this check that the folder entered in the target export location exist otherwhise set an erro message and disable export.
 */
protected void checkForErrors(){
  errors=new ArrayList<String>();
  errors.addAll(writer.check());
  ItemRecord[] elements=getElements();
  for (  ItemRecord record : elements) {
    Map<File,ModelElement> dependencyMap=record.getDependencyMap();
    for (    File depFile : dependencyMap.keySet()) {
      if (!repositoryTree.getChecked(ItemRecord.findRecord(depFile))) {
        ModelElement element=dependencyMap.get(depFile);
        String fileName=element != null ? element.getName() : depFile.getName();
        errors.add(""String_Node_Str"" + record.getElement().getName() + ""String_Node_Str""+ fileName);
      }
    }
  }
  if (!errors.isEmpty()) {
    setErrorMessage(errors.get(0));
  }
 else {
    setErrorMessage(null);
  }
  updatePageStatus();
}","/** 
 * this check that the folder entered in the target export location exist otherwhise set an erro message and disable export.
 */
protected void checkForErrors(){
  errors=new ArrayList<String>();
  errors.addAll(writer.check());
  ItemRecord[] elements=getElements();
  for (  ItemRecord record : elements) {
    Map<File,ModelElement> dependencyMap=record.getDependencyMap();
    for (    File depFile : dependencyMap.keySet()) {
      if (!repositoryTree.getChecked(ItemRecord.findRecord(depFile))) {
        ModelElement element=dependencyMap.get(depFile);
        String fileName=element != null ? element.getName() : depFile.getName();
        errors.add(""String_Node_Str"" + record.getName() + ""String_Node_Str""+ fileName);
      }
    }
  }
  if (!errors.isEmpty()) {
    setErrorMessage(errors.get(0));
  }
 else {
    setErrorMessage(null);
  }
  updatePageStatus();
}",0.992676056338028
138880,"@Override public String getText(Object element){
  if (element instanceof ItemRecord) {
    ItemRecord recored=(ItemRecord)element;
    File file=recored.getFile();
    String fileExtension=new Path(file.getName()).getFileExtension();
    if (file.isFile() && FactoriesUtil.isEmfFile(fileExtension)) {
      EMFUtil emfUtil=new EMFUtil();
      URI uri=URI.createFileURI(file.getAbsolutePath());
      Resource resource=emfUtil.getResourceSet().getResource(uri,true);
      EList<EObject> contents=resource.getContents();
      if (contents != null && !contents.isEmpty()) {
        EObject eObject=contents.get(0);
        if (eObject instanceof ModelElement) {
          return ((ModelElement)eObject).getName();
        }
      }
    }
    return file.getName();
  }
  return super.getText(element);
}","@Override public String getText(Object element){
  if (element instanceof ItemRecord) {
    ItemRecord recored=(ItemRecord)element;
    return recored.getName();
  }
  return super.getText(element);
}",0.3107569721115538
138881,"@Override public Image getImage(Object element){
  Image image=null;
  if (element instanceof ItemRecord) {
    ItemRecord record=(ItemRecord)element;
    File file=record.getFile();
    String fileName=file.getName();
    if (file.isDirectory()) {
      image=ImageLib.getImage(ImageLib.FOLDERNODE_IMAGE);
      EResourceConstant constant=resolveResourceConstant(fileName);
      if (constant != null) {
switch (constant) {
case DATA_PROFILING:
          image=ImageLib.getImage(ImageLib.DATA_PROFILING);
        break;
case METADATA:
      image=ImageLib.getImage(ImageLib.METADATA);
    break;
case LIBRARIES:
  image=ImageLib.getImage(ImageLib.LIBRARIES);
break;
case ANALYSIS:
break;
case REPORTS:
break;
case EXCHANGE:
image=ImageLib.getImage(ImageLib.EXCHANGE);
break;
case DB_CONNECTIONS:
case MDM_CONNECTIONS:
image=ImageLib.getImage(ImageLib.CONNECTION);
break;
default :
break;
}
}
}
 else {
if (fileName.endsWith(FactoriesUtil.ANA)) {
image=ImageLib.getImage(ImageLib.ANALYSIS_OBJECT);
}
 else if (fileName.endsWith(FactoriesUtil.REP)) {
image=ImageLib.getImage(ImageLib.REPORT_OBJECT);
}
 else if (fileName.endsWith(FactoriesUtil.PATTERN)) {
image=ImageLib.getImage(ImageLib.PATTERN_REG);
}
 else if (fileName.endsWith(FactoriesUtil.DQRULE)) {
image=ImageLib.getImage(ImageLib.DQ_RULE);
}
 else if (fileName.endsWith(FactoriesUtil.PROV)) {
image=ImageLib.getImage(ImageLib.TD_DATAPROVIDER);
}
 else if (fileName.endsWith(FactoriesUtil.DEFINITION)) {
image=ImageLib.getImage(ImageLib.IND_DEFINITION);
}
}
}
return image != null ? image : super.getImage(element);
}","@Override public Image getImage(Object element){
  Image image=null;
  if (element instanceof ItemRecord) {
    ItemRecord record=(ItemRecord)element;
    File file=record.getFile();
    String fileName=file.getName();
    if (file.isDirectory()) {
      image=ImageLib.getImage(ImageLib.FOLDERNODE_IMAGE);
      EResourceConstant constant=resolveResourceConstant(fileName);
      if (constant != null) {
switch (constant) {
case DATA_PROFILING:
          image=ImageLib.getImage(ImageLib.DATA_PROFILING);
        break;
case METADATA:
      image=ImageLib.getImage(ImageLib.METADATA);
    break;
case LIBRARIES:
  image=ImageLib.getImage(ImageLib.LIBRARIES);
break;
case ANALYSIS:
break;
case REPORTS:
break;
case EXCHANGE:
image=ImageLib.getImage(ImageLib.EXCHANGE);
break;
case DB_CONNECTIONS:
case MDM_CONNECTIONS:
image=ImageLib.getImage(ImageLib.CONNECTION);
break;
default :
break;
}
}
}
 else {
if (fileName.endsWith(FactoriesUtil.ANA)) {
image=ImageLib.getImage(ImageLib.ANALYSIS_OBJECT);
}
 else if (fileName.endsWith(FactoriesUtil.REP)) {
image=ImageLib.getImage(ImageLib.REPORT_OBJECT);
}
 else if (fileName.endsWith(FactoriesUtil.PATTERN)) {
image=ImageLib.getImage(ImageLib.PATTERN_REG);
}
 else if (fileName.endsWith(FactoriesUtil.DQRULE)) {
image=ImageLib.getImage(ImageLib.DQ_RULE);
}
 else if (fileName.endsWith(FactoriesUtil.ITEM_EXTENSION)) {
image=ImageLib.getImage(ImageLib.TD_DATAPROVIDER);
}
 else if (fileName.endsWith(FactoriesUtil.DEFINITION)) {
image=ImageLib.getImage(ImageLib.IND_DEFINITION);
}
}
}
return image != null ? image : super.getImage(element);
}",0.9943074003795066
138882,"/** 
 * check that directory exist and issue an error message if not. <br> check that the folder is a data quality repository or issue an error.<br> check that anything is check in the tree or issue an error.<br>
 */
private void checkforErrors(){
  List<String> dErrors=new ArrayList<String>();
  if (repositoryTree.getTree().getItems().length == 0) {
    dErrors.add(Messages.getString(""String_Node_Str""));
  }
  if (repositoryTree.getCheckedElements().length == 0) {
    dErrors.add(Messages.getString(""String_Node_Str""));
  }
  dErrors.addAll(writer.check());
  ItemRecord[] elements=getElements();
  for (  ItemRecord record : elements) {
    for (    File depFile : record.getDependencyMap().keySet()) {
      ModelElement element=record.getDependencyMap().get(depFile);
      ItemRecord findRecord=ItemRecord.findRecord(depFile);
      if (findRecord == null || !repositoryTree.getChecked(findRecord)) {
        dErrors.add(""String_Node_Str"" + record.getElement().getName() + ""String_Node_Str""+ element.getName());
      }
    }
  }
  if (!dErrors.isEmpty()) {
    setErrorMessage(dErrors.get(0));
  }
 else {
    setErrorMessage(null);
  }
  updatePageStatus();
}","/** 
 * check that directory exist and issue an error message if not. <br> check that the folder is a data quality repository or issue an error.<br> check that anything is check in the tree or issue an error.<br>
 */
private void checkforErrors(){
  List<String> dErrors=new ArrayList<String>();
  if (repositoryTree.getTree().getItems().length == 0) {
    dErrors.add(Messages.getString(""String_Node_Str""));
  }
  if (repositoryTree.getCheckedElements().length == 0) {
    dErrors.add(Messages.getString(""String_Node_Str""));
  }
  dErrors.addAll(writer.check());
  ItemRecord[] elements=getElements();
  for (  ItemRecord record : elements) {
    for (    File depFile : record.getDependencyMap().keySet()) {
      ModelElement element=record.getDependencyMap().get(depFile);
      ItemRecord findRecord=ItemRecord.findRecord(depFile);
      if (findRecord == null || !repositoryTree.getChecked(findRecord)) {
        dErrors.add(""String_Node_Str"" + record.getName() + ""String_Node_Str""+ element.getName());
      }
    }
  }
  if (!dErrors.isEmpty()) {
    setErrorMessage(dErrors.get(0));
  }
 else {
    setErrorMessage(null);
  }
  updatePageStatus();
}",0.9944182052382996
138883,"public Map<IPath,IPath> mapping(ItemRecord record){
  Map<IPath,IPath> toExportMap=new HashMap<IPath,IPath>();
  IPath itemResPath=new Path(record.getFile().getAbsolutePath());
  IPath itemDesPath=record.getFullPath();
  IPath propResPath=record.getPropertyPath();
  if (itemDesPath == null) {
    System.out.println(""String_Node_Str"");
  }
 else {
  }
  IPath propDesPath=itemDesPath.removeFileExtension().addFileExtension(FactoriesUtil.PROPERTIES_EXTENSION);
  toExportMap.put(itemResPath,itemDesPath);
  toExportMap.put(propResPath,propDesPath);
  return toExportMap;
}","public Map<IPath,IPath> mapping(ItemRecord record){
  Map<IPath,IPath> toExportMap=new HashMap<IPath,IPath>();
  IPath itemResPath=new Path(record.getFile().getAbsolutePath());
  IPath itemDesPath=record.getFullPath();
  IPath propResPath=record.getPropertyPath();
  IPath propDesPath=itemDesPath.removeFileExtension().addFileExtension(FactoriesUtil.PROPERTIES_EXTENSION);
  toExportMap.put(itemResPath,itemDesPath);
  toExportMap.put(propResPath,propDesPath);
  return toExportMap;
}",0.9166666666666666
138884,"public ItemRecord[] populate(ItemRecord[] elements,boolean checkExisted){
  List<ItemRecord> inValidRecords=new ArrayList<ItemRecord>();
  for (  ItemRecord record : elements) {
    checkDependency(record);
    if (checkExisted) {
      checkExisted(record);
    }
    if (!record.isValid()) {
      inValidRecords.add(record);
    }
  }
  if (basePath != null) {
    versionFile=DqFileUtils.getFile(basePath.toFile(),VERSION_FILE_NAME);
    definitionFile=DqFileUtils.getFile(basePath.toFile(),DEFINITION_FILE_NAME);
  }
  return inValidRecords.toArray(new ItemRecord[inValidRecords.size()]);
}","public ItemRecord[] populate(ItemRecord[] elements,boolean checkExisted){
  List<ItemRecord> inValidRecords=new ArrayList<ItemRecord>();
  for (  ItemRecord record : elements) {
    checkDependency(record);
    if (checkExisted) {
      checkExisted(record);
    }
    if (!record.isValid()) {
      inValidRecords.add(record);
    }
  }
  return inValidRecords.toArray(new ItemRecord[inValidRecords.size()]);
}",0.6918489065606361
138885,"public ItemRecord computeInput(IPath path){
  setBasePath(path);
  return new ItemRecord(path.toFile());
}","public ItemRecord computeInput(IPath path){
  setBasePath(path);
  if (path != null) {
    versionFile=DqFileUtils.getFile(path.toFile(),VERSION_FILE_NAME);
    definitionFile=DqFileUtils.getFile(path.toFile(),DEFINITION_FILE_NAME);
  }
  if (versionFile != null && versionFile.exists()) {
    ProductVersion version=WorkspaceVersionHelper.getVesion(new Path(versionFile.getAbsolutePath()));
    migrationTasks=MigrationTaskManager.findWorkspaceTaskByType(MigrationTaskType.FILE,version);
  }
  return new ItemRecord(path.toFile());
}",0.33125
138886,"/** 
 * DOC bZhou Comment method ""checkExisted"".
 * @param record
 */
private void checkExisted(ItemRecord record){
  Property property=record.getProperty();
  if (property != null) {
    IPath itemPath=PropertyHelper.getItemPath(property);
    IFile itemFile=ResourcesPlugin.getWorkspace().getRoot().getFile(itemPath);
    try {
      itemFile.getParent().refreshLocal(IResource.DEPTH_INFINITE,null);
    }
 catch (    CoreException e) {
    }
    ModelElement element=record.getElement();
    String aString=element != null ? element.getName() : property.getLabel();
    if (itemFile.exists()) {
      record.addError(""String_Node_Str"" + aString + ""String_Node_Str""+ itemFile.getFullPath().toString());
    }
  }
}","/** 
 * DOC bZhou Comment method ""checkExisted"".
 * @param record
 */
private void checkExisted(ItemRecord record){
  Property property=record.getProperty();
  if (property != null) {
    IPath itemPath=PropertyHelper.getItemPath(property);
    IFile itemFile=ResourcesPlugin.getWorkspace().getRoot().getFile(itemPath);
    try {
      itemFile.getParent().refreshLocal(IResource.DEPTH_INFINITE,null);
    }
 catch (    CoreException e) {
    }
    String aString=record.getName();
    if (itemFile.exists()) {
      record.addError(""String_Node_Str"" + aString + ""String_Node_Str""+ itemFile.getFullPath().toString());
    }
  }
}",0.9144981412639404
138887,"public void migration(IProgressMonitor monitor){
  if (monitor == null) {
    monitor=new NullProgressMonitor();
  }
  if (versionFile != null && versionFile.exists()) {
    ProductVersion version=WorkspaceVersionHelper.getVesion(new Path(versionFile.getAbsolutePath()));
    final List<IMigrationTask> migrationTasks=MigrationTaskManager.findWorkspaceTaskByType(MigrationTaskType.FILE,version);
    MigrationTaskManager.doMigrationTask(migrationTasks,monitor);
  }
}","public void migration(IProgressMonitor monitor){
  if (monitor == null) {
    monitor=new NullProgressMonitor();
  }
  MigrationTaskManager.doMigrationTask(migrationTasks,monitor);
}",0.5608628659476117
138888,"/** 
 * DOC bZhou Comment method ""checkDependency"".
 * @param record
 */
private void checkDependency(ItemRecord record){
  for (  ModelElement melement : record.getDependencyMap().values()) {
    if (melement.eIsProxy()) {
      InternalEObject inObject=(InternalEObject)melement;
      record.addError(""String_Node_Str"" + record.getElement().getName() + ""String_Node_Str""+ inObject.eProxyURI().toFileString());
    }
  }
}","/** 
 * DOC bZhou Comment method ""checkDependency"".
 * @param record
 */
private void checkDependency(ItemRecord record){
  for (  ModelElement melement : record.getDependencyMap().values()) {
    if (melement.eIsProxy()) {
      InternalEObject inObject=(InternalEObject)melement;
      record.addError(""String_Node_Str"" + record.getName() + ""String_Node_Str""+ inObject.eProxyURI().toFileString());
    }
  }
}",0.9844311377245508
138889,"public void write(ItemRecord[] records,IProgressMonitor monitor){
  if (monitor == null) {
    monitor=new NullProgressMonitor();
  }
  try {
    for (    ItemRecord record : records) {
      if (monitor.isCanceled()) {
        break;
      }
      Map<IPath,IPath> toImportMap=mapping(record);
      monitor.subTask(""String_Node_Str"" + record.getElementName());
      if (record.isValid()) {
        log.info(""String_Node_Str"" + record.getFile().getAbsolutePath());
        for (        IPath resPath : toImportMap.keySet()) {
          IPath desPath=toImportMap.get(resPath);
          write(resPath,desPath);
        }
      }
 else {
        for (        String error : record.getErrors()) {
          log.error(error);
        }
      }
      monitor.worked(1);
    }
    finish(records,monitor);
  }
 catch (  Exception e) {
    log.error(e,e);
  }
}","public void write(ItemRecord[] records,IProgressMonitor monitor){
  if (monitor == null) {
    monitor=new NullProgressMonitor();
  }
  try {
    for (    ItemRecord record : records) {
      if (monitor.isCanceled()) {
        break;
      }
      Map<IPath,IPath> toImportMap=mapping(record);
      monitor.subTask(""String_Node_Str"" + record.getName());
      if (record.isValid()) {
        log.info(""String_Node_Str"" + record.getFile().getAbsolutePath());
        for (        IPath resPath : toImportMap.keySet()) {
          IPath desPath=toImportMap.get(resPath);
          write(resPath,desPath);
        }
      }
 else {
        for (        String error : record.getErrors()) {
          log.error(error);
        }
      }
      monitor.worked(1);
    }
    finish(records,monitor);
  }
 catch (  Exception e) {
    log.error(e,e);
  }
}",0.9958944281524926
138890,"/** 
 * DOC bZhou Comment method ""init"".
 */
private void init(){
  if (resourceSet == null) {
    resourceSet=new ResourceSetImpl();
  }
  if (allItemRecords == null) {
    allItemRecords=new ArrayList<ItemRecord>();
  }
  allItemRecords.add(this);
  if (element == null && !isJRXml()) {
    URI fileURI=URI.createFileURI(file.getAbsolutePath());
    Resource resource=resourceSet.getResource(fileURI,true);
    EList<EObject> contents=resource.getContents();
    if (contents != null && !contents.isEmpty()) {
      EObject object=contents.get(0);
      if (object instanceof ModelElement) {
        element=(ModelElement)object;
      }
    }
  }
  if (property == null) {
    property=(Property)EObjectHelper.retrieveEObject(getPropertyPath(),PropertiesPackage.eINSTANCE.getProperty());
  }
  computeDependencies();
}","/** 
 * DOC bZhou Comment method ""init"".
 */
private void init(){
  if (resourceSet == null) {
    resourceSet=new ResourceSetImpl();
  }
  if (allItemRecords == null) {
    allItemRecords=new ArrayList<ItemRecord>();
  }
  allItemRecords.add(this);
  if (property == null) {
    property=(Property)EObjectHelper.retrieveEObject(getPropertyPath(),PropertiesPackage.eINSTANCE.getProperty());
  }
  if (element == null && !isJRXml()) {
    try {
      URI fileURI=URI.createFileURI(file.getAbsolutePath());
      Resource resource=resourceSet.getResource(fileURI,true);
      EList<EObject> contents=resource.getContents();
      if (contents != null && !contents.isEmpty()) {
        EObject object=contents.get(0);
        if (object instanceof ModelElement) {
          element=(ModelElement)object;
        }
      }
    }
 catch (    Exception e) {
      Log.warn(""String_Node_Str"" + getName());
    }
  }
  computeDependencies();
}",0.479498861047836
138891,"/** 
 * DOC bZhou Comment method ""computeDependencies"".
 */
private void computeDependencies(){
  if (isJRXml()) {
    Collection<TdReport> allReports=RepResourceFileHelper.getInstance().getAllReports();
    for (    TdReport report : allReports) {
      for (      AnalysisMap anaMap : report.getAnalysisMap()) {
        if (StringUtils.equals(file.getAbsolutePath(),anaMap.getJrxmlSource())) {
          dependencyMap.put(file,report);
        }
      }
    }
  }
 else {
    List<ModelElement> dependencyElements=new ArrayList<ModelElement>();
    ModelElementHelper.iterateClientDependencies(element,dependencyElements);
    for (    ModelElement dElement : dependencyElements) {
      if (!dElement.eIsProxy()) {
        URI dURI=dElement.eResource().getURI();
        Resource dResource=resourceSet.getResource(dURI,false);
        if (dResource != null) {
          File depFile=new File(dResource.getURI().toFileString());
          dependencyMap.put(depFile,dElement);
        }
      }
    }
  }
}","/** 
 * DOC bZhou Comment method ""computeDependencies"".
 */
private void computeDependencies(){
  if (isJRXml()) {
    Collection<TdReport> allReports=RepResourceFileHelper.getInstance().getAllReports();
    for (    TdReport report : allReports) {
      for (      AnalysisMap anaMap : report.getAnalysisMap()) {
        if (StringUtils.equals(file.getAbsolutePath(),anaMap.getJrxmlSource())) {
          dependencyMap.put(file,report);
        }
      }
    }
  }
 else   if (element != null) {
    List<ModelElement> dependencyElements=new ArrayList<ModelElement>();
    ModelElementHelper.iterateClientDependencies(element,dependencyElements);
    for (    ModelElement dElement : dependencyElements) {
      EcoreUtil.resolveAll(dElement);
      if (!dElement.eIsProxy()) {
        URI dURI=dElement.eResource().getURI();
        Resource dResource=resourceSet.getResource(dURI,false);
        if (dResource != null) {
          File depFile=new File(dResource.getURI().toFileString());
          dependencyMap.put(depFile,dElement);
        }
      }
    }
  }
}",0.9706024096385544
138892,"/** 
 * DOC zshen Comment method ""initProxyRepository"".
 */
private void initProxyRepository(){
  Project project=null;
  ProxyRepositoryFactory proxyRepository=ProxyRepositoryFactory.getInstance();
  proxyRepository.setRepositoryFactoryFromProvider(LocalRepositoryFactory.getInstance());
  try {
    proxyRepository.checkAvailability();
    proxyRepository.initialize();
    XmiResourceManager xmiResourceManager=new XmiResourceManager();
    IProject rootProject=ResourceManager.getRootProject();
    if (rootProject.exists()) {
      project=new Project(xmiResourceManager.loadProject(rootProject));
    }
 else {
      User user=PropertiesFactoryImpl.eINSTANCE.createUser();
      user.setLogin(""String_Node_Str"");
      user.setPassword(""String_Node_Str"".getBytes());
      String projectName=ResourceManager.getRootProjectName();
      String projectDesc=ResourcesPlugin.getWorkspace().newProjectDescription(projectName).getComment();
      Project projectInfor=ProjectHelper.createProject(projectName,projectDesc,ECodeLanguage.JAVA.getCaseName(),user);
      checkFileName(projectInfor.getLabel(),RepositoryConstants.PROJECT_PATTERN);
      project=proxyRepository.getRepositoryFactoryFromProvider().createProject(projectInfor);
    }
    initRepositoryContext(project);
  }
 catch (  PersistenceException e) {
    e.printStackTrace();
  }
}","/** 
 * DOC zshen Comment method ""initProxyRepository"".
 */
private void initProxyRepository(){
  Project project=null;
  ProxyRepositoryFactory proxyRepository=ProxyRepositoryFactory.getInstance();
  proxyRepository.setRepositoryFactoryFromProvider(LocalRepositoryFactory.getInstance());
  try {
    proxyRepository.checkAvailability();
    proxyRepository.initialize();
    XmiResourceManager xmiResourceManager=new XmiResourceManager();
    IProject rootProject=ResourceManager.getRootProject();
    if (rootProject.exists()) {
      project=new Project(xmiResourceManager.loadProject(rootProject));
    }
 else {
      User user=PropertiesFactoryImpl.eINSTANCE.createUser();
      user.setLogin(""String_Node_Str"");
      user.setPassword(""String_Node_Str"".getBytes());
      String projectName=ResourceManager.getRootProjectName();
      String projectDesc=ResourcesPlugin.getWorkspace().newProjectDescription(projectName).getComment();
      Project projectInfor=ProjectHelper.createProject(projectName,projectDesc,ECodeLanguage.JAVA.getName(),user);
      checkFileName(projectInfor.getLabel(),RepositoryConstants.PROJECT_PATTERN);
      project=proxyRepository.getRepositoryFactoryFromProvider().createProject(projectInfor);
    }
    initRepositoryContext(project);
  }
 catch (  PersistenceException e) {
    e.printStackTrace();
  }
}",0.99851411589896
138893,"/** 
 * DOC zshen Comment method ""initProxyRepository"".
 */
private void initProxyRepository(){
  Project project=null;
  ProxyRepositoryFactory proxyRepository=ProxyRepositoryFactory.getInstance();
  proxyRepository.setRepositoryFactoryFromProvider(LocalRepositoryFactory.getInstance());
  try {
    proxyRepository.checkAvailability();
    proxyRepository.initialize();
    XmiResourceManager xmiResourceManager=new XmiResourceManager();
    IProject rootProject=ResourceManager.getRootProject();
    if (rootProject.exists()) {
      project=new Project(xmiResourceManager.loadProject(rootProject));
    }
 else {
      User user=PropertiesFactoryImpl.eINSTANCE.createUser();
      user.setLogin(""String_Node_Str"");
      user.setPassword(""String_Node_Str"".getBytes());
      String projectName=ResourceManager.getRootProjectName();
      project=proxyRepository.createProject(projectName,ResourcesPlugin.getWorkspace().newProjectDescription(projectName).getComment(),ECodeLanguage.JAVA,user);
    }
    initRepositoryContext(project);
  }
 catch (  PersistenceException e) {
    e.printStackTrace();
  }
}","/** 
 * DOC zshen Comment method ""initProxyRepository"".
 */
private void initProxyRepository(){
  Project project=null;
  ProxyRepositoryFactory proxyRepository=ProxyRepositoryFactory.getInstance();
  proxyRepository.setRepositoryFactoryFromProvider(LocalRepositoryFactory.getInstance());
  try {
    proxyRepository.checkAvailability();
    proxyRepository.initialize();
    XmiResourceManager xmiResourceManager=new XmiResourceManager();
    IProject rootProject=ResourceManager.getRootProject();
    if (rootProject.exists()) {
      project=new Project(xmiResourceManager.loadProject(rootProject));
    }
 else {
      User user=PropertiesFactoryImpl.eINSTANCE.createUser();
      user.setLogin(""String_Node_Str"");
      user.setPassword(""String_Node_Str"".getBytes());
      String projectName=ResourceManager.getRootProjectName();
      Project projectInfor=new Project(projectName);
      projectInfor.setDescription(ResourcesPlugin.getWorkspace().newProjectDescription(projectName).getComment());
      projectInfor.setLanguage(ECodeLanguage.JAVA);
      projectInfor.setAuthor(user);
      project=proxyRepository.createProject(projectInfor);
    }
    initRepositoryContext(project);
  }
 catch (  PersistenceException e) {
    e.printStackTrace();
  }
}",0.9055649241146712
138894,"/** 
 * yyi 2010-08-25 for 14851, Sybase DB has several names with different productions and versions. For example the Sybase IQ with version 12.6 is called 'Sybase' getting by JDBC but the version 15+ it is changed to 'Sybase IQ'. it is user by org.talend.cwm.db.connection.ConnectionUtils.isSybase
 * @return All Sybase DB products name,""Adaptive Server Enterprise"",""Sybase Adaptive Server IQ"",""Sybase IQ"",""Sybase""
 */
public static String[] getSybaseDBProductsName(){
  if (null == sybaseDBProductsNames) {
    sybaseDBProductsNames=new ArrayList<String>();
    for (    String name : SupportDBUrlType.SYBASEDEFAULTURL.getLanguage().split(""String_Node_Str"")) {
      sybaseDBProductsNames.add(name.trim());
    }
    sybaseDBProductsNames.add(""String_Node_Str"");
    sybaseDBProductsNames.add(""String_Node_Str"");
  }
  return sybaseDBProductsNames.toArray(new String[sybaseDBProductsNames.size()]);
}","/** 
 * yyi 2010-08-25 for 14851, Sybase DB has several names with different productions and versions. For example the Sybase IQ with version 12.6 is called 'Sybase' getting by JDBC but the version 15+ it is changed to 'Sybase IQ'. it is user by org.talend.cwm.db.connection.ConnectionUtils.isSybase
 * @return All Sybase DB products name,""Adaptive Server Enterprise"",""Sybase Adaptive Server IQ"",""Sybase IQ"",""Sybase""
 */
public static String[] getSybaseDBProductsName(){
  if (null == sybaseDBProductsNames) {
    sybaseDBProductsNames=new ArrayList<String>();
    for (    String name : SupportDBUrlType.SYBASEDEFAULTURL.getLanguage().split(""String_Node_Str"")) {
      sybaseDBProductsNames.add(name.trim());
    }
    sybaseDBProductsNames.add(""String_Node_Str"");
    sybaseDBProductsNames.add(""String_Node_Str"");
    sybaseDBProductsNames.add(""String_Node_Str"");
  }
  return sybaseDBProductsNames.toArray(new String[sybaseDBProductsNames.size()]);
}",0.9730603448275862
138895,"@Override protected String createSqlStatement(Analysis analysis){
  this.cachedAnalysis=analysis;
  StringBuilder sql=new StringBuilder(""String_Node_Str"");
  EList<ModelElement> analysedElements=analysis.getContext().getAnalysedElements();
  if (analysedElements.isEmpty()) {
    this.errorMessage=Messages.getString(""String_Node_Str"",analysis.getName());
    return null;
  }
  Set<ColumnSet> fromPart=new HashSet<ColumnSet>();
  final Iterator<ModelElement> iterator=analysedElements.iterator();
  while (iterator.hasNext()) {
    ModelElement modelElement=iterator.next();
    TdColumn col=SwitchHelpers.COLUMN_SWITCH.doSwitch(modelElement);
    if (col == null) {
      this.errorMessage=Messages.getString(""String_Node_Str"",modelElement);
      return null;
    }
    Classifier owner=col.getOwner();
    if (owner == null) {
      this.errorMessage=Messages.getString(""String_Node_Str"",col.getName());
    }
    ColumnSet colSet=SwitchHelpers.COLUMN_SET_SWITCH.doSwitch(owner);
    if (colSet == null) {
      this.errorMessage=Messages.getString(""String_Node_Str"",col.getName(),colSet);
      return null;
    }
    if (!analysis.getParameters().isStoreData()) {
      sql.append(this.quote(col.getName()));
      if (iterator.hasNext()) {
        sql.append(',');
      }
    }
    fromPart.add(colSet);
  }
  if (fromPart.size() != 1) {
    log.error(""String_Node_Str"" + fromPart.size() + ""String_Node_Str"");
    this.errorMessage=""String_Node_Str"";
    return null;
  }
  if (analysis.getParameters().isStoreData()) {
    List<TdColumn> columnList=TableHelper.getColumns(SwitchHelpers.TABLE_SWITCH.doSwitch(analysedElements.get(0).eContainer()));
    Iterator<TdColumn> iter=columnList.iterator();
    while (iter.hasNext()) {
      TdColumn column=iter.next();
      sql.append(this.quote(column.getName()));
      if (iter.hasNext()) {
        sql.append(',');
      }
    }
  }
  sql.append(dbms().from());
  ModelElement element=fromPart.iterator().next();
  Package parentRelation=TableHelper.getParentCatalogOrSchema(fromPart.iterator().next());
  if (parentRelation instanceof Schema) {
    sql.append(dbms().toQualifiedName(null,parentRelation.getName(),element.getName()));
  }
 else   if (parentRelation instanceof Catalog) {
    String ownerUser=null;
    if (dbms() instanceof SybaseASEDbmsLanguage) {
      ownerUser=ColumnSetHelper.getTableOwner((ModelElement)element);
    }
    sql.append(dbms().toQualifiedName(parentRelation.getName(),ownerUser,element.getName()));
  }
  ModelElementAnalysisHandler handler=new ModelElementAnalysisHandler();
  handler.setAnalysis(analysis);
  String stringDataFilter=handler.getStringDataFilter();
  sql.append(GenericSQLHandler.WHERE_CLAUSE);
  String sqlStatement=sql.toString();
  sqlStatement=dbms().addWhereToStatement(sqlStatement,stringDataFilter);
  return sqlStatement;
}","@Override protected String createSqlStatement(Analysis analysis){
  this.cachedAnalysis=analysis;
  StringBuilder sql=new StringBuilder(""String_Node_Str"");
  EList<ModelElement> analysedElements=analysis.getContext().getAnalysedElements();
  if (analysedElements.isEmpty()) {
    this.errorMessage=Messages.getString(""String_Node_Str"",analysis.getName());
    return null;
  }
  Set<ColumnSet> fromPart=new HashSet<ColumnSet>();
  final Iterator<ModelElement> iterator=analysedElements.iterator();
  while (iterator.hasNext()) {
    ModelElement modelElement=iterator.next();
    TdColumn col=SwitchHelpers.COLUMN_SWITCH.doSwitch(modelElement);
    if (col == null) {
      this.errorMessage=Messages.getString(""String_Node_Str"",modelElement);
      return null;
    }
    Classifier owner=col.getOwner();
    if (owner == null) {
      this.errorMessage=Messages.getString(""String_Node_Str"",col.getName());
    }
    ColumnSet colSet=SwitchHelpers.COLUMN_SET_SWITCH.doSwitch(owner);
    if (colSet == null) {
      this.errorMessage=Messages.getString(""String_Node_Str"",col.getName(),colSet);
      return null;
    }
    if (!analysis.getParameters().isStoreData()) {
      sql.append(this.quote(col.getName()));
      if (iterator.hasNext()) {
        sql.append(',');
      }
    }
    fromPart.add(colSet);
  }
  if (fromPart.size() != 1) {
    log.error(""String_Node_Str"" + fromPart.size() + ""String_Node_Str"");
    this.errorMessage=""String_Node_Str"";
    return null;
  }
  if (analysis.getParameters().isStoreData()) {
    List<TdColumn> columnList=TableHelper.getColumns(SwitchHelpers.TABLE_SWITCH.doSwitch(analysedElements.get(0).eContainer()));
    Iterator<TdColumn> iter=columnList.iterator();
    while (iter.hasNext()) {
      TdColumn column=iter.next();
      sql.append(this.quote(column.getName()));
      if (iter.hasNext()) {
        sql.append(',');
      }
    }
  }
  sql.append(dbms().from());
  ModelElement element=fromPart.iterator().next();
  Package parentRelation=TableHelper.getParentCatalogOrSchema(fromPart.iterator().next());
  if (parentRelation instanceof Schema) {
    sql.append(dbms().toQualifiedName(null,parentRelation.getName(),element.getName()));
  }
 else   if (parentRelation instanceof Catalog) {
    String ownerUser=null;
    if (ConnectionUtils.isSybaseeDBProducts(dbms().getDbmsName())) {
      ownerUser=ColumnSetHelper.getTableOwner((ModelElement)element);
    }
    sql.append(dbms().toQualifiedName(parentRelation.getName(),ownerUser,element.getName()));
  }
  ModelElementAnalysisHandler handler=new ModelElementAnalysisHandler();
  handler.setAnalysis(analysis);
  String stringDataFilter=handler.getStringDataFilter();
  sql.append(GenericSQLHandler.WHERE_CLAUSE);
  String sqlStatement=sql.toString();
  sqlStatement=dbms().addWhereToStatement(sqlStatement,stringDataFilter);
  return sqlStatement;
}",0.9866760168302944
138896,"private String getTableNameFromColumn(TdColumn column){
  ColumnSet columnSetOwner=ColumnHelper.getColumnSetOwner(column);
  if (columnSetOwner == null) {
    log.error(""String_Node_Str"" + column.getName() + ""String_Node_Str"");
  }
 else {
    Package pack=ColumnSetHelper.getParentCatalogOrSchema(columnSetOwner);
    if (SwitchHelpers.SCHEMA_SWITCH.doSwitch(pack) != null) {
      schemaName=pack.getName();
      Package catalog=ColumnSetHelper.getParentCatalogOrSchema(pack);
      if (catalog != null && SwitchHelpers.CATALOG_SWITCH.doSwitch(catalog) != null) {
        catalogName=catalog.getName();
      }
    }
    if (SwitchHelpers.CATALOG_SWITCH.doSwitch(pack) != null) {
      catalogName=pack.getName();
    }
    if (dbms().getDbmsName().equals(SupportDBUrlType.SYBASEDEFAULTURL.getLanguage())) {
      schemaName=ColumnSetHelper.getTableOwner(columnSetOwner);
    }
    return dbms().toQualifiedName(catalogName,schemaName,columnSetOwner.getName());
  }
  return null;
}","private String getTableNameFromColumn(TdColumn column){
  ColumnSet columnSetOwner=ColumnHelper.getColumnSetOwner(column);
  if (columnSetOwner == null) {
    log.error(""String_Node_Str"" + column.getName() + ""String_Node_Str"");
  }
 else {
    Package pack=ColumnSetHelper.getParentCatalogOrSchema(columnSetOwner);
    if (SwitchHelpers.SCHEMA_SWITCH.doSwitch(pack) != null) {
      schemaName=pack.getName();
      Package catalog=ColumnSetHelper.getParentCatalogOrSchema(pack);
      if (catalog != null && SwitchHelpers.CATALOG_SWITCH.doSwitch(catalog) != null) {
        catalogName=catalog.getName();
      }
    }
    if (SwitchHelpers.CATALOG_SWITCH.doSwitch(pack) != null) {
      catalogName=pack.getName();
    }
    if (ConnectionUtils.isSybaseeDBProducts(dbms().getDbmsName())) {
      schemaName=ColumnSetHelper.getTableOwner(columnSetOwner);
    }
    return dbms().toQualifiedName(catalogName,schemaName,columnSetOwner.getName());
  }
  return null;
}",0.9533572526909276
138897,"/** 
 * DOC scorreia Comment method ""getTableName"".
 * @param analyzedColumns
 * @return the quoted table name
 */
private String getTableName(final EList<TdColumn> analyzedColumns){
  ColumnSet columnSetOwner=ColumnHelper.getColumnSetOwner(analyzedColumns.get(0));
  String tableName=columnSetOwner.getName();
  Package pack=ColumnSetHelper.getParentCatalogOrSchema(columnSetOwner);
  if (pack instanceof Schema && ColumnSetHelper.getParentCatalogOrSchema(pack) instanceof Catalog) {
    pack=ColumnSetHelper.getParentCatalogOrSchema(pack);
  }
  if (pack == null) {
    log.error(""String_Node_Str"" + tableName);
  }
 else {
    this.catalogOrSchema=pack.getName();
  }
  String schemaName=getQuotedSchemaName(columnSetOwner);
  String catalogName=getQuotedCatalogName(columnSetOwner);
  if (catalogName == null && schemaName != null) {
    final Schema parentSchema=SchemaHelper.getParentSchema(columnSetOwner);
    final Catalog parentCatalog=CatalogHelper.getParentCatalog(parentSchema);
    catalogName=parentCatalog != null ? parentCatalog.getName() : null;
  }
  if (dbms().getDbmsName().equals(SupportDBUrlType.SYBASEDEFAULTURL.getLanguage())) {
    schemaName=ColumnSetHelper.getTableOwner(columnSetOwner);
  }
  return dbms().toQualifiedName(catalogName,schemaName,tableName);
}","/** 
 * DOC scorreia Comment method ""getTableName"".
 * @param analyzedColumns
 * @return the quoted table name
 */
private String getTableName(final EList<TdColumn> analyzedColumns){
  ColumnSet columnSetOwner=ColumnHelper.getColumnSetOwner(analyzedColumns.get(0));
  String tableName=columnSetOwner.getName();
  Package pack=ColumnSetHelper.getParentCatalogOrSchema(columnSetOwner);
  if (pack instanceof Schema && ColumnSetHelper.getParentCatalogOrSchema(pack) instanceof Catalog) {
    pack=ColumnSetHelper.getParentCatalogOrSchema(pack);
  }
  if (pack == null) {
    log.error(""String_Node_Str"" + tableName);
  }
 else {
    this.catalogOrSchema=pack.getName();
  }
  String schemaName=getQuotedSchemaName(columnSetOwner);
  String catalogName=getQuotedCatalogName(columnSetOwner);
  if (catalogName == null && schemaName != null) {
    final Schema parentSchema=SchemaHelper.getParentSchema(columnSetOwner);
    final Catalog parentCatalog=CatalogHelper.getParentCatalog(parentSchema);
    catalogName=parentCatalog != null ? parentCatalog.getName() : null;
  }
  if (ConnectionUtils.isSybaseeDBProducts(dbms().getDbmsName())) {
    schemaName=ColumnSetHelper.getTableOwner(columnSetOwner);
  }
  return dbms().toQualifiedName(catalogName,schemaName,tableName);
}",0.9644114196323818
138898,"/** 
 * DOC scorreia Comment method ""getTableName"".
 * @param columnSetA
 * @return
 */
private String getTableName(EList<TdColumn> columnSetA){
  String tableName=null;
  for (  TdColumn column : columnSetA) {
    if (belongToSameSchemata((TdColumn)column)) {
      ColumnSet columnSetOwner=ColumnHelper.getColumnSetOwner(column);
      if (columnSetOwner == null) {
        log.error(""String_Node_Str"" + column.getName() + ""String_Node_Str"");
        continue;
      }
 else {
        String schemaName=getQuotedSchemaName(columnSetOwner);
        String table=getQuotedTableName(column);
        String catalogName=getQuotedCatalogName(columnSetOwner);
        if (catalogName == null && schemaName != null) {
          final Schema parentSchema=SchemaHelper.getParentSchema(columnSetOwner);
          final Catalog parentCatalog=CatalogHelper.getParentCatalog(parentSchema);
          catalogName=parentCatalog != null ? parentCatalog.getName() : null;
        }
        if (dbms().getDbmsName().equals(SupportDBUrlType.SYBASEDEFAULTURL.getLanguage())) {
          schemaName=ColumnSetHelper.getTableOwner(columnSetOwner);
        }
        tableName=dbms().toQualifiedName(catalogName,schemaName,table);
        this.catalogOrSchema=getCatalogOrSchemaName(column);
        break;
      }
    }
 else {
      log.error(this.errorMessage);
    }
  }
  return quote(tableName);
}","/** 
 * DOC scorreia Comment method ""getTableName"".
 * @param columnSetA
 * @return
 */
private String getTableName(EList<TdColumn> columnSetA){
  String tableName=null;
  for (  TdColumn column : columnSetA) {
    if (belongToSameSchemata((TdColumn)column)) {
      ColumnSet columnSetOwner=ColumnHelper.getColumnSetOwner(column);
      if (columnSetOwner == null) {
        log.error(""String_Node_Str"" + column.getName() + ""String_Node_Str"");
        continue;
      }
 else {
        String schemaName=getQuotedSchemaName(columnSetOwner);
        String table=getQuotedTableName(column);
        String catalogName=getQuotedCatalogName(columnSetOwner);
        if (catalogName == null && schemaName != null) {
          final Schema parentSchema=SchemaHelper.getParentSchema(columnSetOwner);
          final Catalog parentCatalog=CatalogHelper.getParentCatalog(parentSchema);
          catalogName=parentCatalog != null ? parentCatalog.getName() : null;
        }
        if (ConnectionUtils.isSybaseeDBProducts(dbms().getDbmsName())) {
          schemaName=ColumnSetHelper.getTableOwner(columnSetOwner);
        }
        tableName=dbms().toQualifiedName(catalogName,schemaName,table);
        this.catalogOrSchema=getCatalogOrSchemaName(column);
        break;
      }
    }
 else {
      log.error(this.errorMessage);
    }
  }
  return quote(tableName);
}",0.958075100255195
138899,"/** 
 * Method ""getAnalyzedTable"".
 * @param indicator
 * @return the table name (within quotes)
 */
private String getAnalyzedTable(Indicator indicator){
  String analyzedTableName=null;
  ColumnSet columnSetOwner=(ColumnSet)indicator.getAnalyzedElement();
  if (columnSetOwner == null) {
    log.error(""String_Node_Str"" + indicator.getName());
  }
 else {
    String schemaName=getQuotedSchemaName(columnSetOwner);
    String table=quote(columnSetOwner.getName());
    String catalogName=getQuotedCatalogName(columnSetOwner);
    if (catalogName == null && schemaName != null) {
      final Schema parentSchema=SchemaHelper.getParentSchema(columnSetOwner);
      final Catalog parentCatalog=CatalogHelper.getParentCatalog(parentSchema);
      catalogName=parentCatalog != null ? parentCatalog.getName() : null;
    }
    if (dbms().getDbmsName().equals(SupportDBUrlType.SYBASEDEFAULTURL.getLanguage())) {
      schemaName=ColumnSetHelper.getTableOwner(columnSetOwner);
    }
    analyzedTableName=dbms().toQualifiedName(catalogName,schemaName,table);
  }
  return analyzedTableName;
}","/** 
 * Method ""getAnalyzedTable"".
 * @param indicator
 * @return the table name (within quotes)
 */
private String getAnalyzedTable(Indicator indicator){
  String analyzedTableName=null;
  ColumnSet columnSetOwner=(ColumnSet)indicator.getAnalyzedElement();
  if (columnSetOwner == null) {
    log.error(""String_Node_Str"" + indicator.getName());
  }
 else {
    String schemaName=getQuotedSchemaName(columnSetOwner);
    String table=quote(columnSetOwner.getName());
    String catalogName=getQuotedCatalogName(columnSetOwner);
    if (catalogName == null && schemaName != null) {
      final Schema parentSchema=SchemaHelper.getParentSchema(columnSetOwner);
      final Catalog parentCatalog=CatalogHelper.getParentCatalog(parentSchema);
      catalogName=parentCatalog != null ? parentCatalog.getName() : null;
    }
    if (ConnectionUtils.isSybaseeDBProducts(dbms().getDbmsName())) {
      schemaName=ColumnSetHelper.getTableOwner(columnSetOwner);
    }
    analyzedTableName=dbms().toQualifiedName(catalogName,schemaName,table);
  }
  return analyzedTableName;
}",0.9447282861124012
138900,"/** 
 * DOC xqliu Comment method ""getValidStatement"". 2009-10-29 bug 9702
 * @param dataFilterAsString
 * @param indicator
 * @return
 */
public String getValidStatement(String dataFilterAsString,Indicator indicator){
  ModelElement analyzedElement=indicator.getAnalyzedElement();
  if (analyzedElement == null) {
    traceError(""String_Node_Str"" + indicator.getName());
    return ""String_Node_Str"";
  }
  NamedColumnSet set=SwitchHelpers.NAMED_COLUMN_SET_SWITCH.doSwitch(indicator.getAnalyzedElement());
  if (set == null) {
    traceError(""String_Node_Str"" + indicator.getName());
    return ""String_Node_Str"";
  }
  String setName=quote(set.getName());
  if (!belongToSameSchemata(set)) {
    StringBuffer buf=new StringBuffer();
    for (    orgomg.cwm.objectmodel.core.Package schema : schemata.values()) {
      buf.append(schema.getName() + ""String_Node_Str"");
    }
    log.error(""String_Node_Str"" + setName + ""String_Node_Str""+ buf.toString().trim()+ ""String_Node_Str"");
    return ""String_Node_Str"";
  }
  Expression sqlGenericExpression=null;
  IndicatorDefinition indicatorDefinition=indicator.getIndicatorDefinition();
  if (indicatorDefinition == null) {
    traceError(""String_Node_Str"" + indicator.getName() + ""String_Node_Str"");
    return ""String_Node_Str"";
  }
  sqlGenericExpression=dbms().getSqlExpression(indicatorDefinition);
  final EClass indicatorEclass=indicator.eClass();
  if (sqlGenericExpression == null || sqlGenericExpression.getBody() == null) {
    traceError(""String_Node_Str"" + (indicator.getName() != null ? indicator.getName() : indicatorEclass.getName()) + ""String_Node_Str""+ ResourceHelper.getUUID(indicatorDefinition)+ ""String_Node_Str"");
    return ""String_Node_Str"";
  }
  List<String> whereExpression=new ArrayList<String>();
  if (StringUtils.isNotBlank(dataFilterAsString)) {
    whereExpression.add(dataFilterAsString);
  }
  String setAliasA=""String_Node_Str"";
  final EList<JoinElement> joinConditions=indicator.getJoinConditions();
  if (RulesPackage.eINSTANCE.getWhereRule().equals(indicatorDefinition.eClass())) {
    WhereRule wr=(WhereRule)indicatorDefinition;
    whereExpression.add(wr.getWhereExpression());
    joinConditions.clear();
    if (!wr.getJoins().isEmpty()) {
      for (      JoinElement joinelt : wr.getJoins()) {
        JoinElement joinCopy=(JoinElement)EcoreUtil.copy(joinelt);
        joinConditions.add(joinCopy);
        setAliasA=""String_Node_Str"".equals(setAliasA) ? joinCopy.getTableAliasA() : setAliasA;
      }
    }
  }
  String schemaName=getQuotedSchemaName(set);
  String catalogName=getQuotedCatalogName(set);
  if (catalogName == null && schemaName != null) {
    final Schema parentSchema=SchemaHelper.getParentSchema(set);
    final Catalog parentCatalog=CatalogHelper.getParentCatalog(parentSchema);
    catalogName=parentCatalog != null ? parentCatalog.getName() : null;
  }
  if (dbms().getDbmsName().equals(SupportDBUrlType.SYBASEDEFAULTURL.getLanguage())) {
    schemaName=ColumnSetHelper.getTableOwner(set);
  }
  setName=dbms().toQualifiedName(catalogName,schemaName,setName);
  String completedSqlString=null;
  String joinclause=(!joinConditions.isEmpty()) ? dbms().createJoinConditionAsString(set,joinConditions,catalogName,schemaName) : ""String_Node_Str"";
  String genericSql=sqlGenericExpression.getBody();
  setAliasA=""String_Node_Str"".equals(setAliasA) ? ""String_Node_Str"" : setAliasA + ""String_Node_Str"";
  genericSql=genericSql.replace(""String_Node_Str"",setAliasA);
  completedSqlString=dbms().fillGenericQueryWithJoin(genericSql,setName,joinclause);
  try {
    completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
  }
 catch (  ParseException e) {
    log.warn(e);
  }
  return completedSqlString;
}","/** 
 * DOC xqliu Comment method ""getValidStatement"". 2009-10-29 bug 9702
 * @param dataFilterAsString
 * @param indicator
 * @return
 */
public String getValidStatement(String dataFilterAsString,Indicator indicator){
  ModelElement analyzedElement=indicator.getAnalyzedElement();
  if (analyzedElement == null) {
    traceError(""String_Node_Str"" + indicator.getName());
    return ""String_Node_Str"";
  }
  NamedColumnSet set=SwitchHelpers.NAMED_COLUMN_SET_SWITCH.doSwitch(indicator.getAnalyzedElement());
  if (set == null) {
    traceError(""String_Node_Str"" + indicator.getName());
    return ""String_Node_Str"";
  }
  String setName=quote(set.getName());
  if (!belongToSameSchemata(set)) {
    StringBuffer buf=new StringBuffer();
    for (    orgomg.cwm.objectmodel.core.Package schema : schemata.values()) {
      buf.append(schema.getName() + ""String_Node_Str"");
    }
    log.error(""String_Node_Str"" + setName + ""String_Node_Str""+ buf.toString().trim()+ ""String_Node_Str"");
    return ""String_Node_Str"";
  }
  Expression sqlGenericExpression=null;
  IndicatorDefinition indicatorDefinition=indicator.getIndicatorDefinition();
  if (indicatorDefinition == null) {
    traceError(""String_Node_Str"" + indicator.getName() + ""String_Node_Str"");
    return ""String_Node_Str"";
  }
  sqlGenericExpression=dbms().getSqlExpression(indicatorDefinition);
  final EClass indicatorEclass=indicator.eClass();
  if (sqlGenericExpression == null || sqlGenericExpression.getBody() == null) {
    traceError(""String_Node_Str"" + (indicator.getName() != null ? indicator.getName() : indicatorEclass.getName()) + ""String_Node_Str""+ ResourceHelper.getUUID(indicatorDefinition)+ ""String_Node_Str"");
    return ""String_Node_Str"";
  }
  List<String> whereExpression=new ArrayList<String>();
  if (StringUtils.isNotBlank(dataFilterAsString)) {
    whereExpression.add(dataFilterAsString);
  }
  String setAliasA=""String_Node_Str"";
  final EList<JoinElement> joinConditions=indicator.getJoinConditions();
  if (RulesPackage.eINSTANCE.getWhereRule().equals(indicatorDefinition.eClass())) {
    WhereRule wr=(WhereRule)indicatorDefinition;
    whereExpression.add(wr.getWhereExpression());
    joinConditions.clear();
    if (!wr.getJoins().isEmpty()) {
      for (      JoinElement joinelt : wr.getJoins()) {
        JoinElement joinCopy=(JoinElement)EcoreUtil.copy(joinelt);
        joinConditions.add(joinCopy);
        setAliasA=""String_Node_Str"".equals(setAliasA) ? joinCopy.getTableAliasA() : setAliasA;
      }
    }
  }
  String schemaName=getQuotedSchemaName(set);
  String catalogName=getQuotedCatalogName(set);
  if (catalogName == null && schemaName != null) {
    final Schema parentSchema=SchemaHelper.getParentSchema(set);
    final Catalog parentCatalog=CatalogHelper.getParentCatalog(parentSchema);
    catalogName=parentCatalog != null ? parentCatalog.getName() : null;
  }
  if (ConnectionUtils.isSybaseeDBProducts(dbms().getDbmsName())) {
    schemaName=ColumnSetHelper.getTableOwner(set);
  }
  setName=dbms().toQualifiedName(catalogName,schemaName,setName);
  String completedSqlString=null;
  String joinclause=(!joinConditions.isEmpty()) ? dbms().createJoinConditionAsString(set,joinConditions,catalogName,schemaName) : ""String_Node_Str"";
  String genericSql=sqlGenericExpression.getBody();
  setAliasA=""String_Node_Str"".equals(setAliasA) ? ""String_Node_Str"" : setAliasA + ""String_Node_Str"";
  genericSql=genericSql.replace(""String_Node_Str"",setAliasA);
  completedSqlString=dbms().fillGenericQueryWithJoin(genericSql,setName,joinclause);
  try {
    completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
  }
 catch (  ParseException e) {
    log.warn(e);
  }
  return completedSqlString;
}",0.9878065121264908
138901,"private boolean createSqlQuery(String dataFilterAsString,Indicator indicator) throws ParseException, AnalysisExecutionException {
  ModelElement analyzedElement=indicator.getAnalyzedElement();
  if (analyzedElement == null) {
    return traceError(""String_Node_Str"" + indicator.getName());
  }
  NamedColumnSet set=SwitchHelpers.NAMED_COLUMN_SET_SWITCH.doSwitch(indicator.getAnalyzedElement());
  if (set == null) {
    return traceError(""String_Node_Str"" + indicator.getName());
  }
  String setName=quote(set.getName());
  if (!belongToSameSchemata(set)) {
    StringBuffer buf=new StringBuffer();
    for (    orgomg.cwm.objectmodel.core.Package schema : schemata.values()) {
      buf.append(schema.getName() + ""String_Node_Str"");
    }
    log.error(""String_Node_Str"" + setName + ""String_Node_Str""+ buf.toString().trim()+ ""String_Node_Str"");
    return false;
  }
  String language=dbms().getDbmsName();
  Expression sqlGenericExpression=null;
  IndicatorDefinition indicatorDefinition=indicator.getIndicatorDefinition();
  if (indicatorDefinition == null) {
    return traceError(""String_Node_Str"" + indicator.getName() + ""String_Node_Str"");
  }
  sqlGenericExpression=dbms().getSqlExpression(indicatorDefinition);
  final EClass indicatorEclass=indicator.eClass();
  if (sqlGenericExpression == null || sqlGenericExpression.getBody() == null) {
    return traceError(""String_Node_Str"" + (indicator.getName() != null ? indicator.getName() : indicatorEclass.getName()) + ""String_Node_Str""+ ResourceHelper.getUUID(indicatorDefinition)+ ""String_Node_Str"");
  }
  List<String> whereExpression=new ArrayList<String>();
  if (StringUtils.isNotBlank(dataFilterAsString)) {
    whereExpression.add(dataFilterAsString);
  }
  final EList<JoinElement> joinConditions=indicator.getJoinConditions();
  if (RulesPackage.eINSTANCE.getWhereRule().equals(indicatorDefinition.eClass())) {
    WhereRule wr=(WhereRule)indicatorDefinition;
    whereExpression.add(wr.getWhereExpression());
    joinConditions.clear();
    if (!wr.getJoins().isEmpty()) {
      for (      JoinElement joinelt : wr.getJoins()) {
        JoinElement joinCopy=(JoinElement)EcoreUtil.copy(joinelt);
        joinConditions.add(joinCopy);
      }
    }
  }
  IndicatorParameters parameters=indicator.getParameters();
  if (parameters != null) {
  }
  String schemaName=getQuotedSchemaName(set);
  String catalogName=getQuotedCatalogName(set);
  if (catalogName == null && schemaName != null) {
    final Schema parentSchema=SchemaHelper.getParentSchema(set);
    final Catalog parentCatalog=CatalogHelper.getParentCatalog(parentSchema);
    catalogName=parentCatalog != null ? parentCatalog.getName() : null;
  }
  if (dbms().getDbmsName().equals(SupportDBUrlType.SYBASEDEFAULTURL.getLanguage())) {
    schemaName=ColumnSetHelper.getTableOwner(set);
  }
  setName=dbms().toQualifiedName(catalogName,schemaName,setName);
  String completedSqlString=null;
  String joinclause=(!joinConditions.isEmpty()) ? dbms().createJoinConditionAsString(set,joinConditions,catalogName,schemaName) : ""String_Node_Str"";
  completedSqlString=dbms().fillGenericQueryWithJoin(sqlGenericExpression.getBody(),setName,joinclause);
  completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
  String finalQuery=completedSqlString;
  TdExpression instantiateSqlExpression=BooleanExpressionHelper.createTdExpression(language,finalQuery);
  indicator.setInstantiatedExpression(instantiateSqlExpression);
  return true;
}","private boolean createSqlQuery(String dataFilterAsString,Indicator indicator) throws ParseException, AnalysisExecutionException {
  ModelElement analyzedElement=indicator.getAnalyzedElement();
  if (analyzedElement == null) {
    return traceError(""String_Node_Str"" + indicator.getName());
  }
  NamedColumnSet set=SwitchHelpers.NAMED_COLUMN_SET_SWITCH.doSwitch(indicator.getAnalyzedElement());
  if (set == null) {
    return traceError(""String_Node_Str"" + indicator.getName());
  }
  String setName=quote(set.getName());
  if (!belongToSameSchemata(set)) {
    StringBuffer buf=new StringBuffer();
    for (    orgomg.cwm.objectmodel.core.Package schema : schemata.values()) {
      buf.append(schema.getName() + ""String_Node_Str"");
    }
    log.error(""String_Node_Str"" + setName + ""String_Node_Str""+ buf.toString().trim()+ ""String_Node_Str"");
    return false;
  }
  String language=dbms().getDbmsName();
  Expression sqlGenericExpression=null;
  IndicatorDefinition indicatorDefinition=indicator.getIndicatorDefinition();
  if (indicatorDefinition == null) {
    return traceError(""String_Node_Str"" + indicator.getName() + ""String_Node_Str"");
  }
  sqlGenericExpression=dbms().getSqlExpression(indicatorDefinition);
  final EClass indicatorEclass=indicator.eClass();
  if (sqlGenericExpression == null || sqlGenericExpression.getBody() == null) {
    return traceError(""String_Node_Str"" + (indicator.getName() != null ? indicator.getName() : indicatorEclass.getName()) + ""String_Node_Str""+ ResourceHelper.getUUID(indicatorDefinition)+ ""String_Node_Str"");
  }
  List<String> whereExpression=new ArrayList<String>();
  if (StringUtils.isNotBlank(dataFilterAsString)) {
    whereExpression.add(dataFilterAsString);
  }
  final EList<JoinElement> joinConditions=indicator.getJoinConditions();
  if (RulesPackage.eINSTANCE.getWhereRule().equals(indicatorDefinition.eClass())) {
    WhereRule wr=(WhereRule)indicatorDefinition;
    whereExpression.add(wr.getWhereExpression());
    joinConditions.clear();
    if (!wr.getJoins().isEmpty()) {
      for (      JoinElement joinelt : wr.getJoins()) {
        JoinElement joinCopy=(JoinElement)EcoreUtil.copy(joinelt);
        joinConditions.add(joinCopy);
      }
    }
  }
  IndicatorParameters parameters=indicator.getParameters();
  if (parameters != null) {
  }
  String schemaName=getQuotedSchemaName(set);
  String catalogName=getQuotedCatalogName(set);
  if (catalogName == null && schemaName != null) {
    final Schema parentSchema=SchemaHelper.getParentSchema(set);
    final Catalog parentCatalog=CatalogHelper.getParentCatalog(parentSchema);
    catalogName=parentCatalog != null ? parentCatalog.getName() : null;
  }
  if (ConnectionUtils.isSybaseeDBProducts(dbms().getDbmsName())) {
    schemaName=ColumnSetHelper.getTableOwner(set);
  }
  setName=dbms().toQualifiedName(catalogName,schemaName,setName);
  String completedSqlString=null;
  String joinclause=(!joinConditions.isEmpty()) ? dbms().createJoinConditionAsString(set,joinConditions,catalogName,schemaName) : ""String_Node_Str"";
  completedSqlString=dbms().fillGenericQueryWithJoin(sqlGenericExpression.getBody(),setName,joinclause);
  completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
  String finalQuery=completedSqlString;
  TdExpression instantiateSqlExpression=BooleanExpressionHelper.createTdExpression(language,finalQuery);
  indicator.setInstantiatedExpression(instantiateSqlExpression);
  return true;
}",0.986904590588574
138902,"/** 
 * DOC bZhou Comment method ""getFullyQualifiedTableName"".
 * @param set
 * @return
 */
protected String getFullyQualifiedTableName(ColumnSet set){
  Schema parentSchema=SchemaHelper.getParentSchema(set);
  Catalog parentCatalog=CatalogHelper.getParentCatalog(set);
  if (parentSchema != null) {
    parentCatalog=CatalogHelper.getParentCatalog(parentSchema);
  }
  String schemaName=parentSchema == null ? null : parentSchema.getName();
  String catalogName=parentCatalog == null ? null : parentCatalog.getName();
  if (dbmsLanguage.getDbmsName().equals(SupportDBUrlType.SYBASEDEFAULTURL.getLanguage())) {
    schemaName=ColumnSetHelper.getTableOwner(set);
  }
  return dbmsLanguage.toQualifiedName(catalogName,schemaName,set.getName());
}","/** 
 * DOC bZhou Comment method ""getFullyQualifiedTableName"".
 * @param set
 * @return
 */
protected String getFullyQualifiedTableName(ColumnSet set){
  Schema parentSchema=SchemaHelper.getParentSchema(set);
  Catalog parentCatalog=CatalogHelper.getParentCatalog(set);
  if (parentSchema != null) {
    parentCatalog=CatalogHelper.getParentCatalog(parentSchema);
  }
  String schemaName=parentSchema == null ? null : parentSchema.getName();
  String catalogName=parentCatalog == null ? null : parentCatalog.getName();
  if (ConnectionUtils.isSybaseeDBProducts(dbmsLanguage.getDbmsName())) {
    schemaName=ColumnSetHelper.getTableOwner(set);
  }
  return dbmsLanguage.toQualifiedName(catalogName,schemaName,set.getName());
}",0.9380530973451328
138903,"/** 
 * Method ""getInstantiatedClause"".
 * @return the where clause from the instantiated query
 */
protected String getInstantiatedClause(){
  TdColumn column=(TdColumn)indicator.getAnalyzedElement();
  int javaType=column.getJavaType();
  Object value=null;
  if (Java2SqlType.isNumbericInSQL(javaType) && dbmsLanguage instanceof DB2DbmsLanguage) {
    value=entity.getKey();
  }
 else {
    value=""String_Node_Str"" + entity.getKey() + ""String_Node_Str"";
  }
  String clause=entity.isLabelNull() ? columnName + dbmsLanguage.isNull() : columnName + dbmsLanguage.equal() + value;
  return clause;
}","/** 
 * Method ""getInstantiatedClause"".
 * @return the where clause from the instantiated query
 */
protected String getInstantiatedClause(){
  TdColumn column=(TdColumn)indicator.getAnalyzedElement();
  int javaType=column.getJavaType();
  Object value=null;
  if (Java2SqlType.isNumbericInSQL(javaType) && dbmsLanguage instanceof DB2DbmsLanguage) {
    value=entity.getKey();
  }
 else   if (Java2SqlType.isNumbericInSQL(javaType) && dbmsLanguage instanceof SybaseASEDbmsLanguage) {
    value=entity.getKey();
  }
 else {
    value=""String_Node_Str"" + entity.getKey() + ""String_Node_Str"";
  }
  String clause=entity.isLabelNull() ? columnName + dbmsLanguage.isNull() : columnName + dbmsLanguage.equal() + value;
  return clause;
}",0.8992481203007519
138904,"protected String extract(DateGrain dateGrain,String colName){
  return ""String_Node_Str"" + dateGrain + from()+ colName+ ""String_Node_Str"";
}","protected String extract(DateGrain dateGrain,String colName){
  if (ConnectionUtils.isSybaseeDBProducts(getDbmsName())) {
    return ""String_Node_Str"" + dateGrain + ""String_Node_Str""+ colName+ ""String_Node_Str"";
  }
  return ""String_Node_Str"" + dateGrain + from()+ colName+ ""String_Node_Str"";
}",0.631336405529954
138905,"public String createJoinConditionAsString(ModelElement leftTable,List<JoinElement> joinElements,String catalogName,String schemaName){
  if (joinElements.isEmpty()) {
    return ""String_Node_Str"";
  }
  StringBuilder builder=new StringBuilder();
  for (  JoinElement joinElement : joinElements) {
    ModelElement colA=joinElement.getColA();
    String tableA=getTableName(colA);
    String tableAliasA=joinElement.getTableAliasA();
    String columnAName=getColumnName(colA);
    boolean hasTableAliasA=!StringUtils.isEmpty(tableAliasA);
    ModelElement colB=joinElement.getColB();
    String tableB=getTableName(colB);
    String tableAliasB=joinElement.getTableAliasB();
    String columnBName=getColumnName(colB);
    boolean hasTableAliasB=!StringUtils.isEmpty(tableAliasB);
    String operator=joinElement.getOperator();
    if (joinClauseStartsWithWrongTable(leftTable,getTable(colB)) && !hasTableAliasA && !hasTableAliasB) {
      if (getDbmsName().equals(SupportDBUrlType.SYBASEDEFAULTURL.getLanguage())) {
        schemaName=ColumnSetHelper.getTableOwner(colA);
      }
      tableA=toQualifiedName(catalogName,schemaName,tableA);
      buildJoinClause(builder,tableB,tableAliasB,columnBName,hasTableAliasB,tableA,tableAliasA,columnAName,hasTableAliasA,operator);
    }
 else {
      if (getDbmsName().equals(SupportDBUrlType.SYBASEDEFAULTURL.getLanguage())) {
        schemaName=ColumnSetHelper.getTableOwner(colA);
      }
      tableB=toQualifiedName(catalogName,schemaName,tableB);
      buildJoinClause(builder,tableA,tableAliasA,columnAName,hasTableAliasA,tableB,tableAliasB,columnBName,hasTableAliasB,operator);
    }
  }
  return builder.toString();
}","public String createJoinConditionAsString(ModelElement leftTable,List<JoinElement> joinElements,String catalogName,String schemaName){
  if (joinElements.isEmpty()) {
    return ""String_Node_Str"";
  }
  StringBuilder builder=new StringBuilder();
  for (  JoinElement joinElement : joinElements) {
    ModelElement colA=joinElement.getColA();
    String tableA=getTableName(colA);
    String tableAliasA=joinElement.getTableAliasA();
    String columnAName=getColumnName(colA);
    boolean hasTableAliasA=!StringUtils.isEmpty(tableAliasA);
    ModelElement colB=joinElement.getColB();
    String tableB=getTableName(colB);
    String tableAliasB=joinElement.getTableAliasB();
    String columnBName=getColumnName(colB);
    boolean hasTableAliasB=!StringUtils.isEmpty(tableAliasB);
    String operator=joinElement.getOperator();
    if (joinClauseStartsWithWrongTable(leftTable,getTable(colB)) && !hasTableAliasA && !hasTableAliasB) {
      if (ConnectionUtils.isSybaseeDBProducts(getDbmsName())) {
        schemaName=ColumnSetHelper.getTableOwner(colA);
      }
      tableA=toQualifiedName(catalogName,schemaName,tableA);
      buildJoinClause(builder,tableB,tableAliasB,columnBName,hasTableAliasB,tableA,tableAliasA,columnAName,hasTableAliasA,operator);
    }
 else {
      if (ConnectionUtils.isSybaseeDBProducts(getDbmsName())) {
        schemaName=ColumnSetHelper.getTableOwner(colA);
      }
      tableB=toQualifiedName(catalogName,schemaName,tableB);
      buildJoinClause(builder,tableA,tableAliasA,columnAName,hasTableAliasA,tableB,tableAliasB,columnBName,hasTableAliasB,operator);
    }
  }
  return builder.toString();
}",0.9364021804966688
138906,"private static boolean isSybase(String dbms){
  String[] sybaseVertions=DbmsLanguage.SYBASE.split(""String_Node_Str"");
  for (  String sybaseVerion : sybaseVertions) {
    if (compareDbmsLanguage(dbms,sybaseVerion.trim())) {
      return true;
    }
  }
  return false;
}","private static boolean isSybase(String dbms){
  return ConnectionUtils.isSybaseeDBProducts(dbms);
}",0.3414634146341463
138907,"/** 
 * DOC zqin Comment method ""getQualifiedName"".
 * @param tdDataProvider
 * @return
 */
public static String getColumnSetQualifiedName(Connection tdDataProvider,ColumnSet columnset){
  DbmsLanguage dbmsLanguage=DbmsLanguageFactory.createDbmsLanguage(tdDataProvider);
  Package catalogOrSchema=ColumnSetHelper.getParentCatalogOrSchema(columnset);
  if (catalogOrSchema == null) {
    return columnset.getName();
  }
  String catalogName=null;
  String schemaName=null;
  if (catalogOrSchema != null && RelationalPackage.eINSTANCE.getSchema().equals(catalogOrSchema.eClass())) {
    schemaName=catalogOrSchema.getName();
    Catalog parentCatalog=CatalogHelper.getParentCatalog(catalogOrSchema);
    if (parentCatalog != null) {
      catalogName=parentCatalog.getName();
    }
  }
 else {
    catalogName=catalogOrSchema.getName();
  }
  if (dbmsLanguage.getDbmsName().equals(SupportDBUrlType.SYBASEDEFAULTURL.getLanguage())) {
    schemaName=ColumnSetHelper.getTableOwner(columnset);
  }
  return dbmsLanguage.toQualifiedName(catalogName,schemaName,columnset.getName());
}","/** 
 * DOC zqin Comment method ""getQualifiedName"".
 * @param tdDataProvider
 * @return
 */
public static String getColumnSetQualifiedName(Connection tdDataProvider,ColumnSet columnset){
  DbmsLanguage dbmsLanguage=DbmsLanguageFactory.createDbmsLanguage(tdDataProvider);
  Package catalogOrSchema=ColumnSetHelper.getParentCatalogOrSchema(columnset);
  if (catalogOrSchema == null) {
    return columnset.getName();
  }
  String catalogName=null;
  String schemaName=null;
  if (catalogOrSchema != null && RelationalPackage.eINSTANCE.getSchema().equals(catalogOrSchema.eClass())) {
    schemaName=catalogOrSchema.getName();
    Catalog parentCatalog=CatalogHelper.getParentCatalog(catalogOrSchema);
    if (parentCatalog != null) {
      catalogName=parentCatalog.getName();
    }
  }
 else {
    catalogName=catalogOrSchema.getName();
  }
  if (ConnectionUtils.isSybaseeDBProducts(dbmsLanguage.getDbmsName())) {
    schemaName=ColumnSetHelper.getTableOwner(columnset);
  }
  return dbmsLanguage.toQualifiedName(catalogName,schemaName,columnset.getName());
}",0.9573370839193625
138908,"/** 
 * DOC scorreia Comment method ""queryOnTable"".
 * @param catalog
 * @param schema
 * @param schemaIndic
 * @param tablesSet
 * @param tableCube
 * @param ok
 * @throws SQLException
 */
protected void evalAllCounts(String catalog,String schema,NamedColumnSet t,SchemaIndicator schemaIndic,boolean isTable,ReturnCode ok) throws SQLException {
  String quCatalog=catalog == null ? null : dbms().quote(catalog);
  String quSchema=schema == null ? null : dbms().quote(schema);
  final String table=t.getName();
  String quTable=dbms().quote(table);
  if (isTable) {
    long rowCount=getRowCounts(quCatalog,quSchema,quTable);
    schemaIndic.setTableRowCount(schemaIndic.getTableRowCount() + rowCount);
    if (dbmsLanguage.getDbmsName().equals(SupportDBUrlType.SYBASEDEFAULTURL.getLanguage())) {
      schema=ColumnSetHelper.getTableOwner(t);
    }
    int pkCount=getPKCount(catalog,schema,table);
    schemaIndic.setKeyCount(schemaIndic.getKeyCount() + pkCount);
    int idxCount=getIndexCount(catalog,schema,table);
    schemaIndic.setIndexCount(schemaIndic.getIndexCount() + idxCount);
    createTableIndicator(t,schemaIndic,rowCount,pkCount,idxCount);
  }
 else {
    long rowCount=getRowCounts(quCatalog,quSchema,quTable);
    schemaIndic.setViewRowCount(schemaIndic.getViewRowCount() + rowCount);
    createViewIndicator(t,schemaIndic,rowCount);
  }
}","/** 
 * DOC scorreia Comment method ""queryOnTable"".
 * @param catalog
 * @param schema
 * @param schemaIndic
 * @param tablesSet
 * @param tableCube
 * @param ok
 * @throws SQLException
 */
protected void evalAllCounts(String catalog,String schema,NamedColumnSet t,SchemaIndicator schemaIndic,boolean isTable,ReturnCode ok) throws SQLException {
  String quCatalog=catalog == null ? null : dbms().quote(catalog);
  String quSchema=schema == null ? null : dbms().quote(schema);
  final String table=t.getName();
  String quTable=dbms().quote(table);
  if (isTable) {
    long rowCount=getRowCounts(quCatalog,quSchema,quTable);
    schemaIndic.setTableRowCount(schemaIndic.getTableRowCount() + rowCount);
    if (ConnectionUtils.isSybaseeDBProducts(dbmsLanguage.getDbmsName())) {
      schema=ColumnSetHelper.getTableOwner(t);
    }
    int pkCount=getPKCount(catalog,schema,table);
    schemaIndic.setKeyCount(schemaIndic.getKeyCount() + pkCount);
    int idxCount=getIndexCount(catalog,schema,table);
    schemaIndic.setIndexCount(schemaIndic.getIndexCount() + idxCount);
    createTableIndicator(t,schemaIndic,rowCount,pkCount,idxCount);
  }
 else {
    if (ConnectionUtils.isSybaseeDBProducts(dbmsLanguage.getDbmsName())) {
      schema=ColumnSetHelper.getTableOwner(t);
    }
    long rowCount=getRowCounts(quCatalog,schema,quTable);
    schemaIndic.setViewRowCount(schemaIndic.getViewRowCount() + rowCount);
    createViewIndicator(t,schemaIndic,rowCount);
  }
}",0.8934513274336283
138909,"protected ReturnCode closeConnection(){
  if (connection != null) {
    return ConnectionUtils.closeConnection(connection);
  }
  return new ReturnCode(Messages.getString(""String_Node_Str""),false);
}","protected ReturnCode closeConnection(){
  if (connection != null) {
    try {
      return connection.isClosed() ? new ReturnCode(true) : ConnectionUtils.closeConnection(connection);
    }
 catch (    SQLException e) {
      e.printStackTrace();
    }
  }
  return new ReturnCode(Messages.getString(""String_Node_Str""),false);
}",0.7338403041825095
138910,"/** 
 * DOC scorreia Comment method ""getQualifiedName"".
 * @param tdDataProvider
 * @return
 */
private String getTableQualifiedName(Connection tdDataProvider){
  DbmsLanguage dbmsLanguage=DbmsLanguageFactory.createDbmsLanguage(tdDataProvider);
  Package catalogOrSchema=ColumnSetHelper.getParentCatalogOrSchema(view);
  if (catalogOrSchema == null) {
    return view.getName();
  }
  String catalogName=null;
  String schemaName=null;
  if (catalogOrSchema != null && RelationalPackage.eINSTANCE.getSchema().equals(catalogOrSchema.eClass())) {
    schemaName=catalogOrSchema.getName();
    Catalog parentCatalog=CatalogHelper.getParentCatalog(catalogOrSchema);
    if (parentCatalog != null) {
      catalogName=parentCatalog.getName();
    }
  }
 else {
    catalogName=catalogOrSchema.getName();
  }
  if (dbmsLanguage.getDbmsName().equals(SupportDBUrlType.SYBASEDEFAULTURL.getLanguage())) {
    schemaName=ColumnSetHelper.getTableOwner(view);
  }
  return dbmsLanguage.toQualifiedName(catalogName,schemaName,view.getName());
}","/** 
 * DOC scorreia Comment method ""getQualifiedName"".
 * @param tdDataProvider
 * @return
 */
private String getTableQualifiedName(Connection tdDataProvider){
  DbmsLanguage dbmsLanguage=DbmsLanguageFactory.createDbmsLanguage(tdDataProvider);
  Package catalogOrSchema=ColumnSetHelper.getParentCatalogOrSchema(view);
  if (catalogOrSchema == null) {
    return view.getName();
  }
  String catalogName=null;
  String schemaName=null;
  if (catalogOrSchema != null && RelationalPackage.eINSTANCE.getSchema().equals(catalogOrSchema.eClass())) {
    schemaName=catalogOrSchema.getName();
    Catalog parentCatalog=CatalogHelper.getParentCatalog(catalogOrSchema);
    if (parentCatalog != null) {
      catalogName=parentCatalog.getName();
    }
  }
 else {
    catalogName=catalogOrSchema.getName();
  }
  if (ConnectionUtils.isSybaseeDBProducts(dbmsLanguage.getDbmsName())) {
    schemaName=ColumnSetHelper.getTableOwner(view);
  }
  return dbmsLanguage.toQualifiedName(catalogName,schemaName,view.getName());
}",0.9554140127388536
138911,"/** 
 * DOC bZhou Comment method ""getItemPath"". This method is to get the entire path of a item. e.g. getItemPath() = Project/TypedPath/StatePath/xxxx.property.
 * @param property
 * @return
 */
public static IPath getItemPath(Property property){
  TDQItem item=(TDQItem)property.getItem();
  return ResourceManager.getRootProject().getFullPath().append(getItemTypedPath(property)).append(getItemStatePath(property)).append(item.getFilename());
}","/** 
 * DOC bZhou Comment method ""getItemPath"". This method is to get the entire path of a item. e.g. getItemPath() = Project/TypedPath/StatePath/xxxx.property.
 * @param property
 * @return
 */
public static IPath getItemPath(Property property){
  Item item=property.getItem();
  if (item instanceof TDQItem) {
    TDQItem tdqItem=(TDQItem)item;
    return ResourceManager.getRootProject().getFullPath().append(getItemTypedPath(property)).append(getItemStatePath(property)).append(tdqItem.getFilename());
  }
 else {
    IPath itemFilePath=new Path(property.eResource().getURI().lastSegment()).removeFileExtension().addFileExtension(FactoriesUtil.ITEM_EXTENSION);
    return ResourceManager.getRootProject().getFullPath().append(getItemTypedPath(property)).append(getItemStatePath(property)).append(itemFilePath);
  }
}",0.6619273301737757
138912,"@Override public void run(){
  boolean isFilesDeleted=deleteFolderAndFiles();
  if (!isFilesDeleted) {
    return;
  }
  try {
    folder.delete(true,null);
    CorePlugin.getDefault().refreshDQView();
    ProxyRepositoryManager.getInstance().save();
  }
 catch (  CoreException e) {
    log.error(e,e);
  }
}","@Override public void run(){
  boolean isFilesDeleted=deleteFolderAndFiles();
  if (!isFilesDeleted) {
    return;
  }
  try {
    if (isDeleteForever) {
      delsubFolderForever(folder);
      if (LogicalDeleteFileHandle.isStartWithDelFolder(folder.getFullPath().toOSString())) {
        LogicalDeleteFileHandle.replaceInFile(LogicalDeleteFileHandle.folderType + folder.getFullPath().toOSString(),PluginConstant.EMPTY_STRING);
        folder.delete(true,null);
      }
    }
 else {
      LogicalDeleteFileHandle.saveElement(LogicalDeleteFileHandle.folderType,folder.getFullPath().toOSString());
    }
    CorePlugin.getDefault().refreshDQView();
    ProxyRepositoryManager.getInstance().save();
  }
 catch (  CoreException e) {
    log.error(e,e);
  }
}",0.5352112676056338
138913,"/** 
 * DOC bZhou Comment method ""createDuplicateHandle"".
 * @param property
 * @return
 */
public static IDuplicateHandle createDuplicateHandle(Property property){
  IDuplicateHandle handle=null;
  EResourceConstant typedConstant=EResourceConstant.getTypedConstant(property.getItem());
switch (typedConstant) {
case DB_CONNECTIONS:
    handle=new ConnectionHandle(property);
  break;
case MDM_CONNECTIONS:
handle=new XMLDataProviderHandle(property);
break;
case JRXML_TEMPLATE:
handle=new JrxmlHandle(property);
break;
case ANALYSIS:
handle=new AnalysisHandle(property);
break;
case REPORTS:
handle=new ReportHandle(property);
break;
case PATTERNS:
case RULES:
handle=new EMFResourceHandle(property);
break;
case INDICATORS:
handle=new UDIHandle(property);
break;
default :
handle=new SimpleHandle(property);
break;
}
return handle;
}","/** 
 * DOC bZhou Comment method ""createDuplicateHandle"".
 * @param property
 * @return
 */
public static IDuplicateHandle createDuplicateHandle(Property property){
  IDuplicateHandle handle=null;
  EResourceConstant typedConstant=EResourceConstant.getTypedConstant(property.getItem());
  if (typedConstant == null) {
    handle=new SimpleHandle(property);
  }
 else {
switch (typedConstant) {
case DB_CONNECTIONS:
      handle=new ConnectionHandle(property);
    break;
case MDM_CONNECTIONS:
  handle=new XMLDataProviderHandle(property);
break;
case JRXML_TEMPLATE:
handle=new JrxmlHandle(property);
break;
case ANALYSIS:
handle=new AnalysisHandle(property);
break;
case REPORTS:
handle=new ReportHandle(property);
break;
case PATTERNS:
case RULES:
handle=new EMFResourceHandle(property);
break;
case INDICATORS:
handle=new UDIHandle(property);
break;
default :
break;
}
}
return handle;
}",0.910144927536232
138914,"/** 
 * DOC bZhou DuplicateEMFResourceAction constructor comment.
 */
EMFResourceHandle(Property propety){
  this.property=propety;
  IPath itemPath=PropertyHelper.getItemPath(propety);
  this.file=ResourceManager.getRoot().getFile(itemPath);
  this.modelElement=ModelElementFileFactory.getModelElement(file);
}","/** 
 * DOC bZhou DuplicateEMFResourceAction constructor comment.
 */
EMFResourceHandle(Property property){
  this.property=property;
  IPath itemPath=PropertyHelper.getItemPath(property);
  this.file=ResourceManager.getRoot().getFile(itemPath);
  this.modelElement=ModelElementFileFactory.getModelElement(file);
}",0.9952
138915,"@Override public List<ModelElement> getDependencies(){
  List<ModelElement> elementList=new ArrayList<ModelElement>();
  Collection<TdReport> allReports=RepResourceFileHelper.getInstance().getAllReports();
  for (  TdReport report : allReports) {
    for (    AnalysisMap anaMap : report.getAnalysisMap()) {
      if (StringUtils.equals(file.getLocation().toOSString(),anaMap.getJrxmlSource())) {
        elementList.add(report);
      }
    }
  }
  return elementList;
}","public List<ModelElement> getDependencies(){
  List<ModelElement> elementList=new ArrayList<ModelElement>();
  Collection<TdReport> allReports=RepResourceFileHelper.getInstance().getAllReports();
  for (  TdReport report : allReports) {
    for (    AnalysisMap anaMap : report.getAnalysisMap()) {
      if (StringUtils.equals(file.getLocation().toOSString(),anaMap.getJrxmlSource())) {
        elementList.add(report);
      }
    }
  }
  return elementList;
}",0.9892703862660944
138916,"/** 
 * DOC bZhou Comment method ""createProperty"".
 * @param targetFile
 */
public void createProperty(File targetFile){
  URI uri=URI.createFileURI(targetFile.getAbsolutePath());
  URI propertiesURI=uri.trimFileExtension().appendFileExtension(FactoriesUtil.PROPERTIES_EXTENSION);
  Resource propertyResource=EMFSharedResources.getInstance().createResource(propertiesURI);
  Property property=PropertiesFactory.eINSTANCE.createProperty();
  property.setId(EcoreUtil.generateUUID());
  property.setLabel(StringUtilities.tokenize(targetFile.getName(),""String_Node_Str"").get(0));
  property.setCreationDate(new Date());
  property.setVersion(""String_Node_Str"");
  TDQJrxmlItem item=org.talend.dataquality.properties.PropertiesFactory.eINSTANCE.createTDQJrxmlItem();
  ItemState itemState=PropertiesFactory.eINSTANCE.createItemState();
  itemState.setDeleted(false);
  IPath propPath=new Path(propertiesURI.toPlatformString(true)).removeLastSegments(1);
  IPath typedPath=ResourceManager.getRootProject().getFullPath().append(PropertyHelper.getItemTypedPath(property));
  IPath itemPath=propPath.makeRelativeTo(typedPath);
  itemState.setPath(itemPath.toString());
  item.setState(itemState);
  item.setFilename(targetFile.getName());
  item.setProperty(property);
  property.setItem(item);
  propertyResource.getContents().add(property);
  propertyResource.getContents().add(property.getItem());
  propertyResource.getContents().add(property.getItem().getState());
  EMFSharedResources.getInstance().saveResource(propertyResource);
}","/** 
 * DOC bZhou Comment method ""createProperty"".
 * @param targetFile
 */
public void createProperty(File targetFile){
  URI uri=URI.createFileURI(targetFile.getAbsolutePath());
  URI propertiesURI=uri.trimFileExtension().appendFileExtension(FactoriesUtil.PROPERTIES_EXTENSION);
  Resource propertyResource=EMFSharedResources.getInstance().createResource(propertiesURI);
  Property property=PropertiesFactory.eINSTANCE.createProperty();
  property.setId(EcoreUtil.generateUUID());
  property.setLabel(StringUtilities.tokenize(targetFile.getName(),""String_Node_Str"").get(0));
  property.setCreationDate(new Date());
  property.setVersion(""String_Node_Str"");
  TDQJrxmlItem item=org.talend.dataquality.properties.PropertiesFactory.eINSTANCE.createTDQJrxmlItem();
  item.setFilename(targetFile.getName());
  item.setProperty(property);
  property.setItem(item);
  ItemState itemState=PropertiesFactory.eINSTANCE.createItemState();
  itemState.setDeleted(false);
  IPath propPath=new Path(targetFile.getAbsolutePath()).removeLastSegments(1);
  IPath typedPath=ResourceManager.getRootProject().getFolder(PropertyHelper.getItemTypedPath(property)).getLocation();
  IPath itemPath=propPath.makeRelativeTo(typedPath);
  itemState.setPath(itemPath.toString());
  item.setState(itemState);
  propertyResource.getContents().add(property);
  propertyResource.getContents().add(property.getItem());
  propertyResource.getContents().add(property.getItem().getState());
  EMFSharedResources.getInstance().saveResource(propertyResource);
}",0.9040916530278232
138917,"/** 
 * DOC bZhou JrxmlHandle constructor comment.
 * @param file
 */
JrxmlHandle(IFile file){
  super(file);
}","/** 
 * DOC bZhou JrxmlHandle constructor comment.
 * @param file
 */
JrxmlHandle(IFile file){
  this.file=file;
}",0.9333333333333332
138918,"@Override public IFile duplicate(){
  IFile duplicateFile=super.duplicate();
  createProperty(duplicateFile.getLocation().toFile());
  return duplicateFile;
}","public IFile duplicate(){
  IFile newFile=SimpleHandle.getNewFile(file);
  try {
    file.copy(newFile.getFullPath(),true,null);
  }
 catch (  CoreException e) {
    e.printStackTrace();
  }
  createProperty(newFile.getLocation().toFile());
  return newFile;
}",0.3253588516746411
138919,"@Override public boolean delete() throws Exception {
  IPath filePath=file.getFullPath();
  filePath=filePath.removeFileExtension().addFileExtension(FactoriesUtil.PROPERTIES_EXTENSION);
  IFile propFile=ResourceManager.getRoot().getFile(filePath);
  if (propFile.exists()) {
    propFile.delete(true,null);
  }
  return super.delete();
}","public boolean delete() throws Exception {
  if (isPhysicalDelete()) {
    LogicalDeleteFileHandle.deleteElement(file);
    IPath filePath=file.getFullPath();
    filePath=filePath.removeFileExtension().addFileExtension(FactoriesUtil.PROPERTIES_EXTENSION);
    IFile propFile=ResourceManager.getRoot().getFile(filePath);
    if (propFile.exists()) {
      propFile.delete(true,null);
    }
    if (file.exists() && isPhysicalDelete()) {
      file.delete(true,null);
    }
  }
 else {
    LogicalDeleteFileHandle.deleteLogical(file);
  }
  return true;
}",0.6823793490460157
138920,"/** 
 * DOC bZhou Comment method ""getNewFile"".
 * @param file
 * @return
 */
private IFile getNewFile(IFile file){
  IFile newFile=null;
  int idx=1;
  while (true) {
    final String newFilename=""String_Node_Str"" + idx + ""String_Node_Str""+ file.getName();
    newFile=((IFolder)file.getParent()).getFile(newFilename);
    if (!newFile.exists()) {
      break;
    }
    idx++;
  }
  return newFile;
}","/** 
 * DOC bZhou Comment method ""getNewFile"".
 * @param file
 * @return
 */
public static IFile getNewFile(IFile file){
  IFile newFile=null;
  int idx=1;
  while (true) {
    final String newFilename=""String_Node_Str"" + idx + ""String_Node_Str""+ file.getName();
    newFile=((IFolder)file.getParent()).getFile(newFilename);
    if (!newFile.exists()) {
      break;
    }
    idx++;
  }
  return newFile;
}",0.9777227722772276
138921,"public String getText(Object element){
  String tableOwner=null;
  if (element instanceof ModelElement) {
    tableOwner=ColumnSetHelper.getTableOwner((ModelElement)element);
  }
  if (element instanceof AbstractFolderNode) {
    if (((IFolderNode)element).getChildren() != null) {
      return ((IFolderNode)element).getName() + ""String_Node_Str"" + ((IFolderNode)element).getChildren().length+ ""String_Node_Str"";
    }
    return ((IFolderNode)element).getName();
  }
 else   if (element instanceof IEcosComponent) {
    return ((IEcosComponent)element).getName();
  }
 else   if (element instanceof IEcosCategory) {
    return ((IEcosCategory)element).getName();
  }
 else   if (element instanceof IndicatorDefinition) {
    return ((IndicatorDefinition)element).getName();
  }
 else   if (element instanceof IndicatorCategory) {
    return ((IndicatorCategory)element).getName();
  }
 else   if (element instanceof IRecycleBin) {
    return ((IRecycleBin)element).getName();
  }
  if (element instanceof RegularExpression) {
    RegularExpression regExp=(RegularExpression)element;
    return regExp.getExpression().getLanguage();
  }
 else   if (element instanceof Connection) {
    return ((Connection)element).getName();
  }
  if (element instanceof TdXmlSchema) {
    return ((TdXmlSchema)element).getName();
  }
 else   if (element instanceof TdXmlElementType) {
    String elemLabe=((TdXmlElementType)element).getName();
    String elementType=((TdXmlElementType)element).getJavaType();
    if (elementType != null && !StringUtils.isEmpty(elementType)) {
      elemLabe+=""String_Node_Str"" + elementType + ""String_Node_Str"";
    }
    return elemLabe;
  }
 else   if ((element instanceof TdTable || element instanceof TdView) && tableOwner != null && !""String_Node_Str"".equals(tableOwner)) {
    return super.getText(element) + ""String_Node_Str"" + tableOwner+ ""String_Node_Str"";
  }
 else   if (element instanceof DQRecycleBinNode) {
    DQRecycleBinNode rbn=(DQRecycleBinNode)element;
    Object obj=rbn.getObject();
    if (obj instanceof IFile) {
      IFile file=(IFile)obj;
      ModelElement mElement=ModelElementFileFactory.getModelElement(file);
      if (file.getFileExtension().equals(FactoriesUtil.PROPERTIES_EXTENSION)) {
        Item connItem=(PropertyHelper.getProperty(file)).getItem();
        if (connItem instanceof ConnectionItem) {
          return ((ConnectionItem)connItem).getConnection().getName();
        }
      }
      if (mElement != null) {
        return DqRepositoryViewService.buildElementName(mElement);
      }
    }
 else     if (obj instanceof IFolder) {
      return ((IFolder)obj).getName();
    }
  }
 else   if (element instanceof IRepositoryViewObject) {
    IRepositoryViewObject conn=(IRepositoryViewObject)element;
    Item connItem=conn.getProperty().getItem();
    if (connItem instanceof ConnectionItem) {
      return ((ConnectionItem)connItem).getConnection().getName();
    }
  }
  String text=super.getText(element);
  return ""String_Node_Str"".equals(text) ? DefaultMessagesImpl.getString(""String_Node_Str"") : text;
}","public String getText(Object element){
  String tableOwner=null;
  if (element instanceof ModelElement) {
    tableOwner=ColumnSetHelper.getTableOwner((ModelElement)element);
  }
  if (element instanceof AbstractFolderNode) {
    if (((IFolderNode)element).getChildren() != null) {
      return ((IFolderNode)element).getName() + ""String_Node_Str"" + ((IFolderNode)element).getChildren().length+ ""String_Node_Str"";
    }
    return ((IFolderNode)element).getName();
  }
 else   if (element instanceof IEcosComponent) {
    return ((IEcosComponent)element).getName();
  }
 else   if (element instanceof IEcosCategory) {
    return ((IEcosCategory)element).getName();
  }
 else   if (element instanceof IndicatorDefinition) {
    return ((IndicatorDefinition)element).getName();
  }
 else   if (element instanceof IndicatorCategory) {
    return ((IndicatorCategory)element).getName();
  }
 else   if (element instanceof IRecycleBin) {
    return ((IRecycleBin)element).getName();
  }
  if (element instanceof RegularExpression) {
    RegularExpression regExp=(RegularExpression)element;
    return regExp.getExpression().getLanguage();
  }
 else   if (element instanceof Connection) {
    return ((Connection)element).getName();
  }
  if (element instanceof TdXmlSchema) {
    return ((TdXmlSchema)element).getName();
  }
 else   if (element instanceof TdXmlElementType) {
    String elemLabe=((TdXmlElementType)element).getName();
    String elementType=((TdXmlElementType)element).getJavaType();
    if (elementType != null && !StringUtils.isEmpty(elementType)) {
      elemLabe+=""String_Node_Str"" + elementType + ""String_Node_Str"";
    }
    return elemLabe;
  }
 else   if ((element instanceof TdTable || element instanceof TdView) && tableOwner != null && !""String_Node_Str"".equals(tableOwner)) {
    return super.getText(element) + ""String_Node_Str"" + tableOwner+ ""String_Node_Str"";
  }
 else   if (element instanceof DQRecycleBinNode) {
    DQRecycleBinNode rbn=(DQRecycleBinNode)element;
    Object obj=rbn.getObject();
    if (obj instanceof IFile) {
      IFile file=(IFile)obj;
      ModelElement mElement=ModelElementFileFactory.getModelElement(file);
      if (file.getFileExtension().equals(FactoriesUtil.PROPERTIES_EXTENSION)) {
        Item connItem=(PropertyHelper.getProperty(file)).getItem();
        if (connItem instanceof ConnectionItem) {
          return ((ConnectionItem)connItem).getConnection().getName();
        }
      }
 else       if (mElement != null) {
        return DqRepositoryViewService.buildElementName(mElement);
      }
 else {
        return file.getName();
      }
    }
 else     if (obj instanceof IFolder) {
      return ((IFolder)obj).getName();
    }
  }
 else   if (element instanceof IRepositoryViewObject) {
    IRepositoryViewObject conn=(IRepositoryViewObject)element;
    Item connItem=conn.getProperty().getItem();
    if (connItem instanceof ConnectionItem) {
      return ((ConnectionItem)connItem).getConnection().getName();
    }
  }
  String text=super.getText(element);
  return ""String_Node_Str"".equals(text) ? DefaultMessagesImpl.getString(""String_Node_Str"") : text;
}",0.991461253423554
138922,"/** 
 * Method ""createSqlQuery"".
 * @param dataFilterExpression
 * @param analysis
 * @param indicator
 * @throws ParseException
 * @throws AnalysisExecutionException
 */
private boolean createSqlQuery(String dataFilterAsString,Indicator indicator) throws ParseException, AnalysisExecutionException {
  ModelElement analyzedElement=indicator.getAnalyzedElement();
  if (analyzedElement == null) {
    return traceError(""String_Node_Str"" + indicator.getName());
  }
  TdColumn tdColumn=SwitchHelpers.COLUMN_SWITCH.doSwitch(indicator.getAnalyzedElement());
  if (tdColumn == null) {
    return traceError(""String_Node_Str"" + indicator.getName());
  }
  String colName=getQuotedColumnName(tdColumn);
  if (!belongToSameSchemata(tdColumn)) {
    StringBuffer buf=new StringBuffer();
    for (    orgomg.cwm.objectmodel.core.Package schema : schemata.values()) {
      buf.append(schema.getName() + ""String_Node_Str"");
    }
    log.error(""String_Node_Str"" + colName + ""String_Node_Str""+ buf.toString().trim()+ ""String_Node_Str"");
    return false;
  }
  colName=castColumn(indicator,tdColumn,colName);
  String language=dbms().getDbmsName();
  Expression sqlGenericExpression=null;
  IndicatorDefinition indicatorDefinition;
  String label=indicator.getIndicatorDefinition().getLabel();
  if (label == null || ""String_Node_Str"".equals(label)) {
    indicatorDefinition=indicator.getIndicatorDefinition();
  }
 else {
    indicatorDefinition=DefinitionHandler.getInstance().getIndicatorDefinition(label);
  }
  if (indicatorDefinition == null) {
    return traceError(""String_Node_Str"" + indicator.getName() + ""String_Node_Str"");
  }
  sqlGenericExpression=dbms().getSqlExpression(indicatorDefinition);
  final EClass indicatorEclass=indicator.eClass();
  if (sqlGenericExpression == null || sqlGenericExpression.getBody() == null) {
    if (IndicatorsPackage.eINSTANCE.getRegexpMatchingIndicator().equals(indicatorEclass)) {
      return traceError(""String_Node_Str"" + language + ""String_Node_Str"");
    }
    return traceError(""String_Node_Str"" + (indicator.getName() != null ? indicator.getName() : indicatorEclass.getName()) + ""String_Node_Str""+ ResourceHelper.getUUID(indicatorDefinition)+ ""String_Node_Str"");
  }
  List<String> whereExpression=new ArrayList<String>();
  if (StringUtils.isNotBlank(dataFilterAsString)) {
    whereExpression.add(dataFilterAsString);
  }
  List<String> rangeStrings=null;
  DateGrain dateAggregationType=null;
  IndicatorParameters parameters=indicator.getParameters();
  if (parameters != null) {
    Domain bins=parameters.getBins();
    if (bins != null) {
      rangeStrings=getBinsAsGenericString(bins.getRanges(),colName);
    }
    DateParameters dateParameters=parameters.getDateParameters();
    if (dateParameters != null) {
      dateAggregationType=dateParameters.getDateAggregationType();
    }
    TextParameters textParameter=parameters.getTextParameter();
    if (textParameter != null) {
      if (textParameter.isUseNulls()) {
        colName=dbms().replaceNullsWithString(colName,""String_Node_Str"");
      }
 else {
        whereExpression.add(colName.concat(dbms().isNotNull()));
      }
      if (textParameter.isIgnoreCase()) {
        colName=dbms().toUpperCase(colName);
      }
      if (!textParameter.isUseBlank() && IndicatorsPackage.eINSTANCE.getLengthIndicator().isSuperTypeOf(indicatorEclass)) {
        String tdColName=getQuotedColumnName(tdColumn);
        tdColName=dbms().replaceNullsWithString(tdColName,""String_Node_Str"");
        whereExpression.add(dbms().isNotBlank(tdColName));
      }
 else       if (textParameter.isUseBlank() && IndicatorsPackage.eINSTANCE.getFrequencyIndicator().isSuperTypeOf(indicatorEclass)) {
        colName=dbms().trim(colName);
      }
    }
  }
  final ColumnSet columnSetOwner=ColumnHelper.getColumnSetOwner(tdColumn);
  String schemaName=getQuotedSchemaName(columnSetOwner);
  String table=getQuotedTableName(tdColumn);
  String catalogName=getQuotedCatalogName(columnSetOwner);
  if (catalogName == null && schemaName != null) {
    final Schema parentSchema=SchemaHelper.getParentSchema(columnSetOwner);
    final Catalog parentCatalog=CatalogHelper.getParentCatalog(parentSchema);
    catalogName=parentCatalog != null ? parentCatalog.getName() : null;
  }
  if (dbms().getDbmsName().equals(SupportDBUrlType.SYBASEDEFAULTURL.getLanguage())) {
    schemaName=ColumnSetHelper.getTableOwner(columnSetOwner);
  }
  table=dbms().toQualifiedName(catalogName,schemaName,table);
  String completedSqlString=null;
  if (indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getMedianIndicator()) || indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getLowerQuartileIndicator()) || indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getUpperQuartileIndicator())) {
    completedSqlString=getCompletedStringForQuantiles(indicator,sqlGenericExpression,colName,table,whereExpression);
    if (completedSqlString != null) {
      whereExpression=duplicateForCrossJoin(completedSqlString,whereExpression,tdColumn);
      completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
    }
  }
 else   if (indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getFrequencyIndicator()) || IndicatorsPackage.eINSTANCE.getFrequencyIndicator().isSuperTypeOf(indicatorEclass) || indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getModeIndicator())|| UDIHelper.isFrequency(indicator)) {
    int topN=indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getModeIndicator()) ? 1 : getTopN(indicator);
    if (topN <= 0) {
      topN=TOP_N;
    }
    if (rangeStrings != null) {
      completedSqlString=getUnionCompletedString(indicator,sqlGenericExpression,colName,table,whereExpression,rangeStrings);
      if (indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getModeIndicator())) {
        completedSqlString=dbms().getTopNQuery(completedSqlString,topN);
      }
    }
 else     if (dateAggregationType != null && !dateAggregationType.equals(DateGrain.NONE) && Java2SqlType.isDateInSQL(tdColumn.getJavaType())) {
      completedSqlString=getDateAggregatedCompletedStringWithoutAlia(sqlGenericExpression,colName,table,dateAggregationType);
      completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
      completedSqlString=dbms().getTopNQuery(completedSqlString,topN);
    }
 else {
      if (indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getPatternFreqIndicator()) || indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getPatternLowFreqIndicator())) {
        if (Java2SqlType.isNumbericInSQL(tdColumn.getJavaType()) || Java2SqlType.isDateInSQL(tdColumn.getJavaType())) {
          colName=addFunctionTypeConvert(colName);
        }
        final EList<CharactersMapping> charactersMapping=indicatorDefinition.getCharactersMapping();
        colName=dbms().getPatternFinderFunction(colName,charactersMapping);
        if (colName == null) {
          colName=dbms().getPatternFinderDefaultFunction(colName);
        }
        if (colName == null) {
          return traceError(""String_Node_Str"" + language + ""String_Node_Str""+ indicator.getName());
        }
      }
 else       if (indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getSoundexFreqIndicator()) || indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getSoundexLowFreqIndicator())) {
        table=dbms().getSoundexFunction(table,colName);
      }
      completedSqlString=dbms().fillGenericQueryWithColumnTableAndAlias(sqlGenericExpression.getBody(),colName,table,colName);
      completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
      completedSqlString=dbms().getTopNQuery(completedSqlString,topN);
    }
  }
 else   if (IndicatorsPackage.eINSTANCE.getPatternMatchingIndicator().isSuperTypeOf(indicatorEclass)) {
    List<String> patterns=getPatterns(indicator);
    if (patterns.isEmpty()) {
      return traceError(""String_Node_Str"" + language + ""String_Node_Str""+ indicator.getName());
    }
    completedSqlString=replaceVariables(sqlGenericExpression.getBody(),colName,table,patterns);
    completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
  }
 else {
    if (IndicatorsPackage.eINSTANCE.getDefValueCountIndicator().equals(indicatorEclass)) {
      String defValue=ColumnHelper.getDefaultValue(tdColumn);
      if (defValue == null) {
        return traceError(""String_Node_Str"" + colName + ""String_Node_Str""+ indicator.getName()+ ""String_Node_Str"");
      }
      int javaType=tdColumn.getJavaType();
      if (!Java2SqlType.isNumbericInSQL(javaType)) {
        defValue=""String_Node_Str"" + defValue + ""String_Node_Str"";
      }
      whereExpression.add(colName + dbms().equal() + defValue);
    }
    completedSqlString=dbms().fillGenericQueryWithColumnsAndTable(sqlGenericExpression.getBody(),colName,table);
    completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
  }
  String finalQuery=completedSqlString;
  if (finalQuery != null) {
    TdExpression instantiateSqlExpression=BooleanExpressionHelper.createTdExpression(language,finalQuery);
    indicator.setInstantiatedExpression(instantiateSqlExpression);
    return true;
  }
  return false;
}","/** 
 * Method ""createSqlQuery"".
 * @param dataFilterExpression
 * @param analysis
 * @param indicator
 * @throws ParseException
 * @throws AnalysisExecutionException
 */
private boolean createSqlQuery(String dataFilterAsString,Indicator indicator) throws ParseException, AnalysisExecutionException {
  ModelElement analyzedElement=indicator.getAnalyzedElement();
  if (analyzedElement == null) {
    return traceError(""String_Node_Str"" + indicator.getName());
  }
  TdColumn tdColumn=SwitchHelpers.COLUMN_SWITCH.doSwitch(indicator.getAnalyzedElement());
  if (tdColumn == null) {
    return traceError(""String_Node_Str"" + indicator.getName());
  }
  String colName=getQuotedColumnName(tdColumn);
  if (!belongToSameSchemata(tdColumn)) {
    StringBuffer buf=new StringBuffer();
    for (    orgomg.cwm.objectmodel.core.Package schema : schemata.values()) {
      buf.append(schema.getName() + ""String_Node_Str"");
    }
    log.error(""String_Node_Str"" + colName + ""String_Node_Str""+ buf.toString().trim()+ ""String_Node_Str"");
    return false;
  }
  colName=castColumn(indicator,tdColumn,colName);
  String language=dbms().getDbmsName();
  Expression sqlGenericExpression=null;
  IndicatorDefinition indicatorDefinition;
  String label=indicator.getIndicatorDefinition().getLabel();
  if (label == null || ""String_Node_Str"".equals(label)) {
    indicatorDefinition=indicator.getIndicatorDefinition();
  }
 else {
    indicatorDefinition=DefinitionHandler.getInstance().getIndicatorDefinition(label);
  }
  if (indicatorDefinition == null) {
    return traceError(""String_Node_Str"" + indicator.getName() + ""String_Node_Str"");
  }
  sqlGenericExpression=dbms().getSqlExpression(indicatorDefinition);
  final EClass indicatorEclass=indicator.eClass();
  if (sqlGenericExpression == null || sqlGenericExpression.getBody() == null) {
    if (IndicatorsPackage.eINSTANCE.getRegexpMatchingIndicator().equals(indicatorEclass)) {
      return traceError(""String_Node_Str"" + language + ""String_Node_Str"");
    }
    return traceError(""String_Node_Str"" + (indicator.getName() != null ? indicator.getName() : indicatorEclass.getName()) + ""String_Node_Str""+ ResourceHelper.getUUID(indicatorDefinition)+ ""String_Node_Str"");
  }
  List<String> whereExpression=new ArrayList<String>();
  if (StringUtils.isNotBlank(dataFilterAsString)) {
    whereExpression.add(dataFilterAsString);
  }
  List<String> rangeStrings=null;
  DateGrain dateAggregationType=null;
  IndicatorParameters parameters=indicator.getParameters();
  if (parameters != null) {
    Domain bins=parameters.getBins();
    if (bins != null) {
      rangeStrings=getBinsAsGenericString(bins.getRanges(),colName);
    }
    DateParameters dateParameters=parameters.getDateParameters();
    if (dateParameters != null) {
      dateAggregationType=dateParameters.getDateAggregationType();
    }
    TextParameters textParameter=parameters.getTextParameter();
    if (textParameter != null) {
      if (textParameter.isUseNulls()) {
        colName=dbms().replaceNullsWithString(colName,""String_Node_Str"");
      }
 else {
        whereExpression.add(colName.concat(dbms().isNotNull()));
      }
      if (textParameter.isIgnoreCase()) {
        colName=dbms().toUpperCase(colName);
      }
      if (!textParameter.isUseBlank() && IndicatorsPackage.eINSTANCE.getLengthIndicator().isSuperTypeOf(indicatorEclass)) {
        String tdColName=getQuotedColumnName(tdColumn);
        tdColName=dbms().replaceNullsWithString(tdColName,""String_Node_Str"");
        whereExpression.add(dbms().isNotBlank(tdColName));
      }
 else       if (textParameter.isUseBlank() && IndicatorsPackage.eINSTANCE.getFrequencyIndicator().isSuperTypeOf(indicatorEclass)) {
        colName=dbms().trim(colName);
      }
    }
  }
  final ColumnSet columnSetOwner=ColumnHelper.getColumnSetOwner(tdColumn);
  String schemaName=getQuotedSchemaName(columnSetOwner);
  String table=getQuotedTableName(tdColumn);
  String catalogName=getQuotedCatalogName(columnSetOwner);
  if (catalogName == null && schemaName != null) {
    final Schema parentSchema=SchemaHelper.getParentSchema(columnSetOwner);
    final Catalog parentCatalog=CatalogHelper.getParentCatalog(parentSchema);
    catalogName=parentCatalog != null ? parentCatalog.getName() : null;
  }
  if (dbms().getDbmsName().equals(SupportDBUrlType.SYBASEDEFAULTURL.getLanguage())) {
    schemaName=ColumnSetHelper.getTableOwner(columnSetOwner);
  }
  table=dbms().toQualifiedName(catalogName,schemaName,table);
  String completedSqlString=null;
  if (indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getMedianIndicator()) || indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getLowerQuartileIndicator()) || indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getUpperQuartileIndicator())) {
    completedSqlString=getCompletedStringForQuantiles(indicator,sqlGenericExpression,colName,table,whereExpression);
    if (completedSqlString != null) {
      whereExpression=duplicateForCrossJoin(completedSqlString,whereExpression,tdColumn);
      completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
    }
  }
 else   if (indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getFrequencyIndicator()) || IndicatorsPackage.eINSTANCE.getFrequencyIndicator().isSuperTypeOf(indicatorEclass) || indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getModeIndicator())|| UDIHelper.isFrequency(indicator)) {
    int topN=indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getModeIndicator()) ? 1 : getTopN(indicator);
    if (topN <= 0) {
      topN=TOP_N;
    }
    if (rangeStrings != null) {
      completedSqlString=getUnionCompletedString(indicator,sqlGenericExpression,colName,table,whereExpression,rangeStrings);
      if (indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getModeIndicator())) {
        completedSqlString=dbms().getTopNQuery(completedSqlString,topN);
      }
    }
 else     if (dateAggregationType != null && !dateAggregationType.equals(DateGrain.NONE) && Java2SqlType.isDateInSQL(tdColumn.getJavaType())) {
      completedSqlString=getDateAggregatedCompletedStringWithoutAlia(sqlGenericExpression,colName,table,dateAggregationType);
      completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
      completedSqlString=dbms().getTopNQuery(completedSqlString,topN);
    }
 else {
      if (indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getPatternFreqIndicator()) || indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getPatternLowFreqIndicator())) {
        if (Java2SqlType.isNumbericInSQL(tdColumn.getJavaType()) || Java2SqlType.isDateInSQL(tdColumn.getJavaType())) {
          colName=addFunctionTypeConvert(colName);
        }
        final EList<CharactersMapping> charactersMapping=indicatorDefinition.getCharactersMapping();
        colName=dbms().getPatternFinderFunction(colName,charactersMapping);
        if (colName == null) {
          colName=dbms().getPatternFinderDefaultFunction(colName);
        }
        if (colName == null) {
          return traceError(""String_Node_Str"" + language + ""String_Node_Str""+ indicator.getName());
        }
      }
 else       if (indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getSoundexFreqIndicator()) || indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getSoundexLowFreqIndicator())) {
        table=dbms().getSoundexFunction(table,colName);
      }
      completedSqlString=dbms().fillGenericQueryWithColumnTableAndAlias(sqlGenericExpression.getBody(),colName,table,colName);
      completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
      completedSqlString=dbms().getTopNQuery(completedSqlString,topN);
    }
  }
 else   if (IndicatorsPackage.eINSTANCE.getPatternMatchingIndicator().isSuperTypeOf(indicatorEclass)) {
    List<String> patterns=getPatterns(indicator);
    if (patterns.isEmpty()) {
      return traceError(""String_Node_Str"" + language + ""String_Node_Str""+ indicator.getName());
    }
    completedSqlString=replaceVariables(sqlGenericExpression.getBody(),colName,table,patterns);
    completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
  }
 else {
    if (IndicatorsPackage.eINSTANCE.getDefValueCountIndicator().equals(indicatorEclass)) {
      String defValue=ColumnHelper.getDefaultValue(tdColumn);
      if (defValue == null) {
        return traceError(""String_Node_Str"" + colName + ""String_Node_Str""+ indicator.getName()+ ""String_Node_Str"");
      }
      int javaType=tdColumn.getJavaType();
      if (!Java2SqlType.isNumbericInSQL(javaType) && !isFunction(defValue,table)) {
        defValue=""String_Node_Str"" + defValue + ""String_Node_Str"";
      }
      whereExpression.add(colName + dbms().equal() + defValue);
    }
    completedSqlString=dbms().fillGenericQueryWithColumnsAndTable(sqlGenericExpression.getBody(),colName,table);
    completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
  }
  String finalQuery=completedSqlString;
  if (finalQuery != null) {
    TdExpression instantiateSqlExpression=BooleanExpressionHelper.createTdExpression(language,finalQuery);
    indicator.setInstantiatedExpression(instantiateSqlExpression);
    return true;
  }
  return false;
}",0.9948310571848306
138923,"/** 
 * DOC zshen Comment method ""isSybase"".
 * @param connection
 * @return decide to whether is sybase connection
 * @throws SQLException
 */
public static boolean isSybase(java.sql.Connection connection) throws SQLException {
  DatabaseMetaData connectionMetadata=getConnectionMetadata(connection);
  if (connectionMetadata.getDriverName() != null && connectionMetadata.getDatabaseProductName() != null) {
    for (    String keyString : SupportDBUrlType.SYBASEDEFAULTURL.getLanguage().split(""String_Node_Str"")) {
      if (keyString.trim().equals(connectionMetadata.getDatabaseProductName().trim())) {
        return true;
      }
    }
  }
  return false;
}","/** 
 * DOC zshen Comment method ""isSybase"".
 * @param connection
 * @return decide to whether is sybase connection
 * @throws SQLException
 */
public static boolean isSybase(java.sql.Connection connection) throws SQLException {
  DatabaseMetaData connectionMetadata=getConnectionMetadata(connection);
  if (connectionMetadata.getDriverName() != null && connectionMetadata.getDatabaseProductName() != null) {
    for (    String keyString : getSybaseDBProductsName()) {
      if (keyString.equals(connectionMetadata.getDatabaseProductName().trim())) {
        return true;
      }
    }
  }
  return false;
}",0.7275590551181103
138924,"/** 
 * Method ""createSqlQuery"".
 * @param dataFilterExpression
 * @param analysis
 * @param indicator
 * @throws ParseException
 * @throws AnalysisExecutionException
 */
private boolean createSqlQuery(String dataFilterAsString,Indicator indicator) throws ParseException, AnalysisExecutionException {
  ModelElement analyzedElement=indicator.getAnalyzedElement();
  if (analyzedElement == null) {
    return traceError(""String_Node_Str"" + indicator.getName());
  }
  TdColumn tdColumn=SwitchHelpers.COLUMN_SWITCH.doSwitch(indicator.getAnalyzedElement());
  if (tdColumn == null) {
    return traceError(""String_Node_Str"" + indicator.getName());
  }
  String colName=getQuotedColumnName(tdColumn);
  if (!belongToSameSchemata(tdColumn)) {
    StringBuffer buf=new StringBuffer();
    for (    orgomg.cwm.objectmodel.core.Package schema : schemata.values()) {
      buf.append(schema.getName() + ""String_Node_Str"");
    }
    log.error(""String_Node_Str"" + colName + ""String_Node_Str""+ buf.toString().trim()+ ""String_Node_Str"");
    return false;
  }
  colName=castColumn(indicator,tdColumn,colName);
  String language=dbms().getDbmsName();
  Expression sqlGenericExpression=null;
  IndicatorDefinition indicatorDefinition;
  String label=indicator.getIndicatorDefinition().getLabel();
  if (label == null || ""String_Node_Str"".equals(label)) {
    indicatorDefinition=indicator.getIndicatorDefinition();
  }
 else {
    indicatorDefinition=DefinitionHandler.getInstance().getIndicatorDefinition(label);
  }
  if (indicatorDefinition == null) {
    return traceError(""String_Node_Str"" + indicator.getName() + ""String_Node_Str"");
  }
  sqlGenericExpression=dbms().getSqlExpression(indicatorDefinition);
  final EClass indicatorEclass=indicator.eClass();
  if (sqlGenericExpression == null || sqlGenericExpression.getBody() == null) {
    if (IndicatorsPackage.eINSTANCE.getRegexpMatchingIndicator().equals(indicatorEclass)) {
      return traceError(""String_Node_Str"" + language + ""String_Node_Str"");
    }
    return traceError(""String_Node_Str"" + (indicator.getName() != null ? indicator.getName() : indicatorEclass.getName()) + ""String_Node_Str""+ ResourceHelper.getUUID(indicatorDefinition)+ ""String_Node_Str"");
  }
  List<String> whereExpression=new ArrayList<String>();
  if (StringUtils.isNotBlank(dataFilterAsString)) {
    whereExpression.add(dataFilterAsString);
  }
  List<String> rangeStrings=null;
  DateGrain dateAggregationType=null;
  IndicatorParameters parameters=indicator.getParameters();
  if (parameters != null) {
    Domain bins=parameters.getBins();
    if (bins != null) {
      rangeStrings=getBinsAsGenericString(bins.getRanges(),colName);
    }
    DateParameters dateParameters=parameters.getDateParameters();
    if (dateParameters != null) {
      dateAggregationType=dateParameters.getDateAggregationType();
    }
    TextParameters textParameter=parameters.getTextParameter();
    if (textParameter != null) {
      if (textParameter.isUseNulls()) {
        colName=dbms().replaceNullsWithString(colName,""String_Node_Str"");
      }
 else {
        whereExpression.add(colName.concat(dbms().isNotNull()));
      }
      if (textParameter.isIgnoreCase()) {
        colName=dbms().toUpperCase(colName);
      }
      if (!textParameter.isUseBlank() && IndicatorsPackage.eINSTANCE.getLengthIndicator().isSuperTypeOf(indicatorEclass)) {
        String tdColName=getQuotedColumnName(tdColumn);
        tdColName=dbms().replaceNullsWithString(tdColName,""String_Node_Str"");
        whereExpression.add(dbms().isNotBlank(tdColName));
      }
 else       if (textParameter.isUseBlank() && IndicatorsPackage.eINSTANCE.getFrequencyIndicator().isSuperTypeOf(indicatorEclass)) {
        colName=dbms().trim(colName);
      }
    }
  }
  final ColumnSet columnSetOwner=ColumnHelper.getColumnSetOwner(tdColumn);
  String schemaName=getQuotedSchemaName(columnSetOwner);
  String table=getQuotedTableName(tdColumn);
  String catalogName=getQuotedCatalogName(columnSetOwner);
  if (catalogName == null && schemaName != null) {
    final Schema parentSchema=SchemaHelper.getParentSchema(columnSetOwner);
    final Catalog parentCatalog=CatalogHelper.getParentCatalog(parentSchema);
    catalogName=parentCatalog != null ? parentCatalog.getName() : null;
  }
  if (dbms().getDbmsName().equals(SupportDBUrlType.SYBASEDEFAULTURL.getLanguage())) {
    schemaName=ColumnSetHelper.getTableOwner(columnSetOwner);
  }
  table=dbms().toQualifiedName(catalogName,schemaName,table);
  String completedSqlString=null;
  if (indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getMedianIndicator()) || indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getLowerQuartileIndicator()) || indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getUpperQuartileIndicator())) {
    completedSqlString=getCompletedStringForQuantiles(indicator,sqlGenericExpression,colName,table,whereExpression);
    if (completedSqlString != null) {
      whereExpression=duplicateForCrossJoin(completedSqlString,whereExpression,tdColumn);
      completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
    }
  }
 else   if (indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getFrequencyIndicator()) || IndicatorsPackage.eINSTANCE.getFrequencyIndicator().isSuperTypeOf(indicatorEclass) || indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getModeIndicator())|| UDIHelper.isFrequency(indicator)) {
    int topN=indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getModeIndicator()) ? 1 : getTopN(indicator);
    if (topN <= 0) {
      topN=TOP_N;
    }
    if (rangeStrings != null) {
      completedSqlString=getUnionCompletedString(indicator,sqlGenericExpression,colName,table,whereExpression,rangeStrings);
      if (indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getModeIndicator())) {
        completedSqlString=dbms().getTopNQuery(completedSqlString,topN);
      }
    }
 else     if (dateAggregationType != null && !dateAggregationType.equals(DateGrain.NONE) && Java2SqlType.isDateInSQL(tdColumn.getJavaType())) {
      completedSqlString=getDateAggregatedCompletedStringWithoutAlia(sqlGenericExpression,colName,table,dateAggregationType);
      completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
      completedSqlString=dbms().getTopNQuery(completedSqlString,topN);
    }
 else {
      if (indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getPatternFreqIndicator()) || indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getPatternLowFreqIndicator())) {
        if (Java2SqlType.isNumbericInSQL(tdColumn.getJavaType()) || Java2SqlType.isDateInSQL(tdColumn.getJavaType())) {
          colName=addFunctionTypeConvert(colName);
        }
        final EList<CharactersMapping> charactersMapping=indicatorDefinition.getCharactersMapping();
        colName=dbms().getPatternFinderFunction(colName,charactersMapping);
        if (colName == null) {
          colName=dbms().getPatternFinderDefaultFunction(colName);
        }
        if (colName == null) {
          return traceError(""String_Node_Str"" + language + ""String_Node_Str""+ indicator.getName());
        }
      }
 else       if (indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getSoundexFreqIndicator()) || indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getSoundexLowFreqIndicator())) {
        table=dbms().getSoundexFunction(table,colName);
      }
      completedSqlString=dbms().fillGenericQueryWithColumnTableAndAlias(sqlGenericExpression.getBody(),colName,table,colName);
      completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
      completedSqlString=dbms().getTopNQuery(completedSqlString,topN);
    }
  }
 else   if (IndicatorsPackage.eINSTANCE.getPatternMatchingIndicator().isSuperTypeOf(indicatorEclass)) {
    List<String> patterns=getPatterns(indicator);
    if (patterns.isEmpty()) {
      return traceError(""String_Node_Str"" + language + ""String_Node_Str""+ indicator.getName());
    }
    completedSqlString=replaceVariables(sqlGenericExpression.getBody(),colName,table,patterns);
    completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
  }
 else {
    if (IndicatorsPackage.eINSTANCE.getDefValueCountIndicator().equals(indicatorEclass)) {
      String defValue=ColumnHelper.getDefaultValue(tdColumn);
      if (defValue == null) {
        return traceError(""String_Node_Str"" + colName + ""String_Node_Str""+ indicator.getName()+ ""String_Node_Str"");
      }
      int javaType=tdColumn.getJavaType();
      if (!Java2SqlType.isNumbericInSQL(javaType) && !isFunction(defValue,table)) {
        defValue=""String_Node_Str"" + defValue + ""String_Node_Str"";
      }
      whereExpression.add(colName + dbms().equal() + defValue);
    }
    completedSqlString=dbms().fillGenericQueryWithColumnsAndTable(sqlGenericExpression.getBody(),colName,table);
    completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
  }
  String finalQuery=completedSqlString;
  if (finalQuery != null) {
    TdExpression instantiateSqlExpression=BooleanExpressionHelper.createTdExpression(language,finalQuery);
    indicator.setInstantiatedExpression(instantiateSqlExpression);
    return true;
  }
  return false;
}","/** 
 * Method ""createSqlQuery"".
 * @param dataFilterExpression
 * @param analysis
 * @param indicator
 * @throws ParseException
 * @throws AnalysisExecutionException
 */
private boolean createSqlQuery(String dataFilterAsString,Indicator indicator) throws ParseException, AnalysisExecutionException {
  ModelElement analyzedElement=indicator.getAnalyzedElement();
  if (analyzedElement == null) {
    return traceError(""String_Node_Str"" + indicator.getName());
  }
  TdColumn tdColumn=SwitchHelpers.COLUMN_SWITCH.doSwitch(indicator.getAnalyzedElement());
  if (tdColumn == null) {
    return traceError(""String_Node_Str"" + indicator.getName());
  }
  String colName=getQuotedColumnName(tdColumn);
  if (!belongToSameSchemata(tdColumn)) {
    StringBuffer buf=new StringBuffer();
    for (    orgomg.cwm.objectmodel.core.Package schema : schemata.values()) {
      buf.append(schema.getName() + ""String_Node_Str"");
    }
    log.error(""String_Node_Str"" + colName + ""String_Node_Str""+ buf.toString().trim()+ ""String_Node_Str"");
    return false;
  }
  colName=castColumn(indicator,tdColumn,colName);
  String language=dbms().getDbmsName();
  Expression sqlGenericExpression=null;
  IndicatorDefinition indicatorDefinition;
  String label=indicator.getIndicatorDefinition().getLabel();
  if (label == null || ""String_Node_Str"".equals(label)) {
    indicatorDefinition=indicator.getIndicatorDefinition();
  }
 else {
    indicatorDefinition=DefinitionHandler.getInstance().getIndicatorDefinition(label);
  }
  if (indicatorDefinition == null) {
    return traceError(""String_Node_Str"" + indicator.getName() + ""String_Node_Str"");
  }
  sqlGenericExpression=dbms().getSqlExpression(indicatorDefinition);
  final EClass indicatorEclass=indicator.eClass();
  if (sqlGenericExpression == null || sqlGenericExpression.getBody() == null) {
    if (IndicatorsPackage.eINSTANCE.getRegexpMatchingIndicator().equals(indicatorEclass)) {
      return traceError(""String_Node_Str"" + language + ""String_Node_Str"");
    }
    return traceError(""String_Node_Str"" + (indicator.getName() != null ? indicator.getName() : indicatorEclass.getName()) + ""String_Node_Str""+ ResourceHelper.getUUID(indicatorDefinition)+ ""String_Node_Str"");
  }
  List<String> whereExpression=new ArrayList<String>();
  if (StringUtils.isNotBlank(dataFilterAsString)) {
    whereExpression.add(dataFilterAsString);
  }
  List<String> rangeStrings=null;
  DateGrain dateAggregationType=null;
  IndicatorParameters parameters=indicator.getParameters();
  if (parameters != null) {
    Domain bins=parameters.getBins();
    if (bins != null) {
      rangeStrings=getBinsAsGenericString(bins.getRanges(),colName);
    }
    DateParameters dateParameters=parameters.getDateParameters();
    if (dateParameters != null) {
      dateAggregationType=dateParameters.getDateAggregationType();
    }
    TextParameters textParameter=parameters.getTextParameter();
    if (textParameter != null) {
      if (textParameter.isUseNulls()) {
        colName=dbms().replaceNullsWithString(colName,""String_Node_Str"");
      }
 else {
        whereExpression.add(colName.concat(dbms().isNotNull()));
      }
      if (textParameter.isIgnoreCase()) {
        colName=dbms().toUpperCase(colName);
      }
      if (!textParameter.isUseBlank() && IndicatorsPackage.eINSTANCE.getLengthIndicator().isSuperTypeOf(indicatorEclass)) {
        String tdColName=getQuotedColumnName(tdColumn);
        tdColName=dbms().replaceNullsWithString(tdColName,""String_Node_Str"");
        whereExpression.add(dbms().isNotBlank(tdColName));
      }
 else       if (textParameter.isUseBlank() && IndicatorsPackage.eINSTANCE.getFrequencyIndicator().isSuperTypeOf(indicatorEclass)) {
        colName=dbms().trim(colName);
      }
    }
  }
  final ColumnSet columnSetOwner=ColumnHelper.getColumnSetOwner(tdColumn);
  String schemaName=getQuotedSchemaName(columnSetOwner);
  String table=getQuotedTableName(tdColumn);
  String catalogName=getQuotedCatalogName(columnSetOwner);
  if (catalogName == null && schemaName != null) {
    final Schema parentSchema=SchemaHelper.getParentSchema(columnSetOwner);
    final Catalog parentCatalog=CatalogHelper.getParentCatalog(parentSchema);
    catalogName=parentCatalog != null ? parentCatalog.getName() : null;
  }
  boolean isSybase=false;
  if (Arrays.asList(ConnectionUtils.getSybaseDBProductsName()).contains(dbms().getDbmsName())) {
    isSybase=true;
  }
  if (isSybase) {
    schemaName=ColumnSetHelper.getTableOwner(columnSetOwner);
  }
  table=dbms().toQualifiedName(catalogName,schemaName,table);
  String completedSqlString=null;
  if (indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getMedianIndicator()) || indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getLowerQuartileIndicator()) || indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getUpperQuartileIndicator())) {
    completedSqlString=getCompletedStringForQuantiles(indicator,sqlGenericExpression,colName,table,whereExpression);
    if (completedSqlString != null) {
      whereExpression=duplicateForCrossJoin(completedSqlString,whereExpression,tdColumn);
      completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
    }
  }
 else   if (indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getFrequencyIndicator()) || IndicatorsPackage.eINSTANCE.getFrequencyIndicator().isSuperTypeOf(indicatorEclass) || indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getModeIndicator())|| UDIHelper.isFrequency(indicator)) {
    int topN=indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getModeIndicator()) ? 1 : getTopN(indicator);
    if (topN <= 0) {
      topN=TOP_N;
    }
    if (rangeStrings != null) {
      completedSqlString=getUnionCompletedString(indicator,sqlGenericExpression,colName,table,whereExpression,rangeStrings);
      if (indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getModeIndicator())) {
        completedSqlString=dbms().getTopNQuery(completedSqlString,topN);
      }
    }
 else     if (dateAggregationType != null && !dateAggregationType.equals(DateGrain.NONE) && Java2SqlType.isDateInSQL(tdColumn.getJavaType())) {
      completedSqlString=getDateAggregatedCompletedStringWithoutAlia(sqlGenericExpression,colName,table,dateAggregationType);
      completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
      completedSqlString=dbms().getTopNQuery(completedSqlString,topN);
    }
 else {
      if (indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getPatternFreqIndicator()) || indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getPatternLowFreqIndicator())) {
        if (Java2SqlType.isNumbericInSQL(tdColumn.getJavaType()) || Java2SqlType.isDateInSQL(tdColumn.getJavaType())) {
          colName=addFunctionTypeConvert(colName);
        }
        final EList<CharactersMapping> charactersMapping=indicatorDefinition.getCharactersMapping();
        colName=dbms().getPatternFinderFunction(colName,charactersMapping);
        if (colName == null) {
          colName=dbms().getPatternFinderDefaultFunction(colName);
        }
        if (colName == null) {
          return traceError(""String_Node_Str"" + language + ""String_Node_Str""+ indicator.getName());
        }
      }
 else       if (indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getSoundexFreqIndicator()) || indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getSoundexLowFreqIndicator())) {
        table=dbms().getSoundexFunction(table,colName);
      }
      completedSqlString=dbms().fillGenericQueryWithColumnTableAndAlias(sqlGenericExpression.getBody(),colName,table,colName);
      completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
      completedSqlString=dbms().getTopNQuery(completedSqlString,topN);
    }
  }
 else   if (IndicatorsPackage.eINSTANCE.getPatternMatchingIndicator().isSuperTypeOf(indicatorEclass)) {
    List<String> patterns=getPatterns(indicator);
    if (patterns.isEmpty()) {
      return traceError(""String_Node_Str"" + language + ""String_Node_Str""+ indicator.getName());
    }
    completedSqlString=replaceVariables(sqlGenericExpression.getBody(),colName,table,patterns);
    completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
  }
 else {
    if (IndicatorsPackage.eINSTANCE.getDefValueCountIndicator().equals(indicatorEclass)) {
      String defValue=ColumnHelper.getDefaultValue(tdColumn);
      if (defValue == null) {
        return traceError(""String_Node_Str"" + colName + ""String_Node_Str""+ indicator.getName()+ ""String_Node_Str"");
      }
      int javaType=tdColumn.getJavaType();
      if (!Java2SqlType.isNumbericInSQL(javaType) && !isFunction(defValue,table)) {
        defValue=""String_Node_Str"" + defValue + ""String_Node_Str"";
      }
      whereExpression.add(colName + dbms().equal() + defValue);
    }
    completedSqlString=dbms().fillGenericQueryWithColumnsAndTable(sqlGenericExpression.getBody(),colName,table);
    completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
  }
  String finalQuery=completedSqlString;
  if (finalQuery != null) {
    TdExpression instantiateSqlExpression=BooleanExpressionHelper.createTdExpression(language,finalQuery);
    indicator.setInstantiatedExpression(instantiateSqlExpression);
    return true;
  }
  return false;
}",0.9896148853310256
138925,"public int compare(Viewer viewer,Object o1,Object o2){
  if (o1 instanceof Object[] && o1 instanceof Object[]) {
    Object[] objs1=(Object[])o1;
    Object obj1=objs1[Math.abs(arrayIndex) - 1];
    Object[] objs2=(Object[])o2;
    Object obj2=objs2[Math.abs(arrayIndex) - 1];
    if (obj1 == null && obj2 != null) {
      if (arrayIndex > 0) {
        return -1;
      }
 else {
        return 1;
      }
    }
 else     if (obj1 != null && obj2 == null) {
      if (arrayIndex > 0) {
        return 1;
      }
 else {
        return -1;
      }
    }
 else     if (obj1 == null && obj2 == null) {
      return 0;
    }
    if (obj1 instanceof String) {
      if (arrayIndex > 0) {
        return ((String)obj1).compareTo((String)obj2);
      }
 else {
        return ((String)obj2).compareTo((String)obj1);
      }
    }
 else     if (obj1 instanceof Long) {
      if (arrayIndex > 0) {
        return ((Long)obj1).compareTo((Long)obj2);
      }
 else {
        return ((Long)obj2).compareTo((Long)obj1);
      }
    }
 else     if (obj1 instanceof Date) {
      if (arrayIndex > 0) {
        return ((Date)obj1).compareTo((Date)obj2);
      }
 else {
        return ((Date)obj2).compareTo((Date)obj1);
      }
    }
 else     if (obj1 instanceof Comparable) {
      return ((Comparable)obj1).compareTo((Comparable)obj2);
    }
 else {
      if (arrayIndex > 0) {
        return obj1.toString().compareTo(obj2.toString());
      }
 else {
        return obj2.toString().compareTo(obj1.toString());
      }
    }
  }
  return 0;
}","public int compare(Viewer viewer,Object o1,Object o2){
  if (o1 instanceof Object[] && o1 instanceof Object[]) {
    Object[] objs1=(Object[])o1;
    Object obj1=objs1[Math.abs(arrayIndex) - 1];
    Object[] objs2=(Object[])o2;
    Object obj2=objs2[Math.abs(arrayIndex) - 1];
    if (obj1 == null && obj2 != null) {
      if (arrayIndex > 0) {
        return -1;
      }
 else {
        return 1;
      }
    }
 else     if (obj1 != null && obj2 == null) {
      if (arrayIndex > 0) {
        return 1;
      }
 else {
        return -1;
      }
    }
 else     if (obj1 == null && obj2 == null) {
      return 0;
    }
    if (obj1 instanceof String) {
      if (arrayIndex > 0) {
        return ((String)obj1).compareTo((String)obj2);
      }
 else {
        return ((String)obj2).compareTo((String)obj1);
      }
    }
 else     if (obj1 instanceof Long) {
      if (arrayIndex > 0) {
        return ((Long)obj1).compareTo((Long)obj2);
      }
 else {
        return ((Long)obj2).compareTo((Long)obj1);
      }
    }
 else     if (obj1 instanceof Date) {
      if (arrayIndex > 0) {
        return ((Date)obj1).compareTo((Date)obj2);
      }
 else {
        return ((Date)obj2).compareTo((Date)obj1);
      }
    }
 else     if (obj1 instanceof Comparable) {
      if (arrayIndex > 0) {
        return ((Comparable)obj1).compareTo((Comparable)obj2);
      }
 else {
        return ((Comparable)obj2).compareTo((Comparable)obj1);
      }
    }
 else {
      if (arrayIndex > 0) {
        return obj1.toString().compareTo(obj2.toString());
      }
 else {
        return obj2.toString().compareTo(obj1.toString());
      }
    }
  }
  return 0;
}",0.9631959735765964
138926,"@Override public void run(){
  IFile[] selectedFiles;
  if (isDeleteForever) {
    SelectedResources selectedResources=new SelectedResources();
    selectedFiles=selectedResources.getSelectedResourcesArrayForDelForever();
  }
 else {
    selectedFiles=getSelectedResourcesArray();
  }
  for (  IFile file : selectedFiles) {
    IDeletionHandle handle=ActionHandleFactory.createDeletionHandle(file);
    List<ModelElement> dependencies=handle.getDependencies();
    if (dependencies != null && !dependencies.isEmpty()) {
      showDependenciesDialog(file,dependencies);
      return;
    }
  }
  try {
    for (    IFile file : selectedFiles) {
      IDeletionHandle handle=ActionHandleFactory.createDeletionHandle(file);
      if (isDeleteForever && !showConfirmDialog()) {
        return;
      }
      runStatus=handle.delete(isDeleteForever);
    }
  }
 catch (  Exception e) {
    log.error(e,e);
  }
  ProxyRepositoryManager.getInstance().save();
  CorePlugin.getDefault().refreshDQView();
  CorePlugin.getDefault().refreshWorkSpace();
}","@Override public void run(){
  IFile[] selectedFiles;
  if (isDeleteForever) {
    SelectedResources selectedResources=new SelectedResources();
    selectedFiles=selectedResources.getSelectedResourcesArrayForDelForever();
  }
 else {
    selectedFiles=getSelectedResourcesArray();
  }
  for (  IFile file : selectedFiles) {
    IDeletionHandle handle=ActionHandleFactory.createDeletionHandle(file);
    List<ModelElement> dependencies=handle.getDependencies();
    if (dependencies != null && !dependencies.isEmpty()) {
      showDependenciesDialog(file,dependencies);
      return;
    }
  }
  try {
    for (    IFile file : selectedFiles) {
      IDeletionHandle handle=ActionHandleFactory.createDeletionHandle(file);
      if (isDeleteForever && !showConfirmDialog()) {
        return;
      }
      CorePlugin.getDefault().closeEditorIfOpened(file);
      runStatus=handle.delete(isDeleteForever);
    }
  }
 catch (  Exception e) {
    log.error(e,e);
  }
  ProxyRepositoryManager.getInstance().save();
  CorePlugin.getDefault().refreshDQView();
  CorePlugin.getDefault().refreshWorkSpace();
}",0.9733769266697804
138927,"/** 
 * DOC bZhou Comment method ""createDeletionHandle"".
 * @param file
 * @return
 */
public static IDeletionHandle createDeletionHandle(IFile file){
  IDeletionHandle handle=null;
  String fileExtension=file.getFileExtension();
  if (FactoriesUtil.isEmfFile(fileExtension)) {
    if (FactoriesUtil.isProvFile(fileExtension)) {
      ModelElement modelElement=ModelElementFileFactory.getModelElement(file);
      EResourceConstant typedConstant=EResourceConstant.getTypedConstant(modelElement);
      if (typedConstant == EResourceConstant.MDM_CONNECTIONS) {
        handle=new XMLDataProviderHandle(file);
      }
    }
 else {
      handle=new EMFResourceHandle(file);
    }
  }
 else   if (FactoriesUtil.isJrxmlFile(fileExtension)) {
    handle=new JrxmlHandle(file);
  }
 else {
    handle=new SimpleHandle(file);
  }
  return handle;
}","/** 
 * DOC bZhou Comment method ""createDeletionHandle"".
 * @param file
 * @return
 */
public static IDeletionHandle createDeletionHandle(IFile file){
  IDeletionHandle handle=null;
  String fileExtension=file.getFileExtension();
  if (FactoriesUtil.isEmfFile(fileExtension)) {
    handle=new EMFResourceHandle(file);
    if (FactoriesUtil.isProvFile(fileExtension)) {
      ModelElement modelElement=ModelElementFileFactory.getModelElement(file);
      EResourceConstant typedConstant=EResourceConstant.getTypedConstant(modelElement);
      if (typedConstant == EResourceConstant.MDM_CONNECTIONS) {
        handle=new XMLDataProviderHandle(file);
      }
    }
  }
 else   if (FactoriesUtil.isJrxmlFile(fileExtension)) {
    handle=new JrxmlHandle(file);
  }
 else {
    handle=new SimpleHandle(file);
  }
  return handle;
}",0.7755102040816326
138928,"@Override public boolean hasChildren(Object element){
  if (element instanceof IEcosCategory) {
    return true;
  }
  if (element instanceof RecycleBin) {
    return getRecycleBinChildren().size() > 0 ? true : false;
  }
 else   if (element instanceof DQRecycleBinNode) {
    DQRecycleBinNode rbn=(DQRecycleBinNode)element;
    Object obj=rbn.getObject();
    if (obj instanceof IFolder) {
      try {
        if (((IFolder)obj).members().length > 0)         return true;
      }
 catch (      CoreException e) {
        log.error(e);
      }
    }
    return false;
  }
  return super.hasChildren(element);
}","@Override public boolean hasChildren(Object element){
  if (element instanceof IEcosCategory) {
    return true;
  }
  if (element instanceof IFolder) {
    List<Object> obsLs=Arrays.asList(super.getChildren(element));
    if (obsLs.size() == 1) {
      Object obj=(Object)obsLs.get(0);
      if (obj instanceof IFolder && ((IFolder)obj).getName().equals(PluginConstant.SVN_SUFFIX))       return false;
    }
  }
 else   if (element instanceof RecycleBin) {
    return getRecycleBinChildren().size() > 0 ? true : false;
  }
 else   if (element instanceof DQRecycleBinNode) {
    DQRecycleBinNode rbn=(DQRecycleBinNode)element;
    Object obj=rbn.getObject();
    if (obj instanceof IFolder) {
      try {
        if (((IFolder)obj).members().length > 0)         return true;
      }
 catch (      CoreException e) {
        log.error(e);
      }
    }
    return false;
  }
  return super.hasChildren(element);
}",0.8015768725361366
138929,"/** 
 * DOC bZhou Comment method ""openInSqlEditor"".
 * @param tdDataProvider
 * @param query
 * @param editorName
 * @return the specified sql editor.
 */
public SQLEditor openInSqlEditor(Connection tdDataProvider,String query,String editorName){
  if (editorName == null) {
    editorName=String.valueOf(SQLExplorerPlugin.getDefault().getEditorSerialNo());
  }
  SQLExplorerPlugin sqlPlugin=SQLExplorerPlugin.getDefault();
  AliasManager aliasManager=sqlPlugin.getAliasManager();
  Alias alias=aliasManager.getAlias(tdDataProvider.getName());
  if (alias == null) {
    List<Connection> allDataProviders=PrvResourceFileHelper.getInstance().getAllDataProviders(ResourceManager.getMetadataFolder());
    for (    Connection dataProvider : allDataProviders) {
      if (dataProvider == tdDataProvider) {
        CWMPlugin.getDefault().addConnetionAliasToSQLPlugin(dataProvider);
        openInSqlEditor(tdDataProvider,query,editorName);
      }
    }
  }
 else {
    try {
      Connection connection=SwitchHelpers.CONNECTION_SWITCH.doSwitch(tdDataProvider);
      if (connection != null) {
        String userName=ConnectionUtils.getUsername(connection);
        SQLEditorInput input=new SQLEditorInput(""String_Node_Str"" + alias.getName() + ""String_Node_Str""+ editorName+ ""String_Node_Str"");
        input.setUser(alias.getUser(userName));
        IWorkbenchPage page=SQLExplorerPlugin.getDefault().getActivePage();
        SQLEditor editorPart=(SQLEditor)page.openEditor((IEditorInput)input,SQLEditor.class.getName());
        editorPart.setText(query);
        return editorPart;
      }
    }
 catch (    PartInitException e) {
      log.error(e,e);
    }
  }
  return null;
}","/** 
 * DOC bZhou Comment method ""openInSqlEditor"".
 * @param tdDataProvider
 * @param query
 * @param editorName
 * @return the specified sql editor.
 */
public SQLEditor openInSqlEditor(Connection tdDataProvider,String query,String editorName){
  if (editorName == null) {
    editorName=String.valueOf(SQLExplorerPlugin.getDefault().getEditorSerialNo());
  }
  SQLExplorerPlugin sqlPlugin=SQLExplorerPlugin.getDefault();
  AliasManager aliasManager=sqlPlugin.getAliasManager();
  Alias alias=aliasManager.getAlias(tdDataProvider.getName());
  if (alias == null) {
    List<Connection> allDataProviders=PrvResourceFileHelper.getInstance().getAllDataProviders(ResourceManager.getMetadataFolder());
    for (    Connection dataProvider : allDataProviders) {
      if (dataProvider == tdDataProvider) {
        CWMPlugin.getDefault().addConnetionAliasToSQLPlugin(dataProvider);
        openInSqlEditor(tdDataProvider,query,editorName);
      }
    }
  }
 else {
    try {
      Connection connection=SwitchHelpers.CONNECTION_SWITCH.doSwitch(tdDataProvider);
      if (connection != null) {
        String userName=ConnectionUtils.getUsernameDefault(connection);
        SQLEditorInput input=new SQLEditorInput(""String_Node_Str"" + alias.getName() + ""String_Node_Str""+ editorName+ ""String_Node_Str"");
        input.setUser(alias.getUser(userName));
        IWorkbenchPage page=SQLExplorerPlugin.getDefault().getActivePage();
        SQLEditor editorPart=(SQLEditor)page.openEditor((IEditorInput)input,SQLEditor.class.getName());
        editorPart.setText(query);
        return editorPart;
      }
    }
 catch (    PartInitException e) {
      log.error(e,e);
    }
  }
  return null;
}",0.9979185251263752
138930,"/** 
 * @param path
 * @param element
 * @throws Exceptio Save logical delete path to TXT file
 */
public static void saveElement(String type,String path){
  try {
    File f=new Path(filePath).toFile();
    if (!f.exists()) {
      f=new File(filePath);
      f.createNewFile();
    }
    FileWriter fw=new FileWriter(f.getPath(),true);
    PrintWriter out=new PrintWriter(fw);
    out.println(type + path);
    fw.close();
    out.close();
    String[] es={type.replaceAll(""String_Node_Str"",PluginConstant.EMPTY_STRING),path};
    delLs.add(es);
  }
 catch (  Exception exc) {
    log.error(exc,exc);
  }
}","/** 
 * Save logical delete path to TXT file.
 * @param type
 * @param path
 */
public static void saveElement(String type,String path){
  try {
    File f=new Path(filePath).toFile();
    if (!f.exists()) {
      f=new File(filePath);
      f.createNewFile();
    }
    FileWriter fw=new FileWriter(f.getPath(),true);
    PrintWriter out=new PrintWriter(fw);
    out.println(type + path);
    fw.close();
    out.close();
    String[] es={type.replaceAll(""String_Node_Str"",PluginConstant.EMPTY_STRING),path};
    delLs.add(es);
  }
 catch (  Exception exc) {
    log.error(exc,exc);
  }
}",0.9323308270676692
138931,"/** 
 * @return the delLs Get the Logical delete elements
 */
public static List<String[]> getDelLs(){
  if (delLs == null)   delLs=readFileByLine();
  return delLs;
}","/** 
 * Get the Logical delete elements.
 * @return
 */
public static List<String[]> getDelLs(){
  if (delLs == null)   delLs=readFileByLine();
  return delLs;
}",0.9085365853658536
138932,"/** 
 * DOC Replace a path String to """" in logicalDelete.txt.
 * @param regex
 * @param fileName
 * @param replacement
 * @throws IOExceptio
 */
public static void replaceInFile(String oldString,String newString){
  InputStream in=null;
  InputStreamReader inRead=null;
  try {
    in=new FileInputStream(filePath);
    StringBuffer buffer=new StringBuffer();
    inRead=new InputStreamReader(in);
    BufferedReader buf=new BufferedReader(inRead);
    String line;
    String newLine;
    while ((line=buf.readLine()) != null) {
      if (!line.equals(oldString)) {
        newLine=line;
      }
 else {
        newLine=line.replace(oldString,newString);
        for (int i=0; i < delLs.size(); i++) {
          String[] es=(String[])delLs.get(i);
          if ((es[0] + ""String_Node_Str"" + es[1]).equals(oldString)) {
            delLs.remove(es);
            break;
          }
        }
      }
      if (!newLine.equals(PluginConstant.EMPTY_STRING)) {
        buffer.append(newLine).append(""String_Node_Str"");
      }
    }
    OutputStream os=new FileOutputStream(filePath);
    os.write(buffer.toString().getBytes());
    os.close();
  }
 catch (  Exception exc) {
    log.error(exc,exc);
  }
 finally {
    try {
      in.close();
      inRead.close();
    }
 catch (    IOException e) {
      log.error(e,e);
    }
  }
}","/** 
 * Replace a path String to """" in logicalDelete.txt.
 * @param regex
 * @param fileName
 * @param replacement
 * @throws IOExceptio
 */
public static void replaceInFile(String oldString,String newString){
  InputStream in=null;
  InputStreamReader inRead=null;
  try {
    in=new FileInputStream(filePath);
    StringBuffer buffer=new StringBuffer();
    inRead=new InputStreamReader(in);
    BufferedReader buf=new BufferedReader(inRead);
    String line;
    String newLine;
    while ((line=buf.readLine()) != null) {
      if (!line.equals(oldString)) {
        newLine=line;
      }
 else {
        newLine=line.replace(oldString,newString);
        for (int i=0; i < delLs.size(); i++) {
          String[] es=(String[])delLs.get(i);
          if ((es[0] + ""String_Node_Str"" + es[1]).equals(oldString)) {
            delLs.remove(es);
            break;
          }
        }
      }
      if (!newLine.equals(PluginConstant.EMPTY_STRING)) {
        buffer.append(newLine).append(""String_Node_Str"");
      }
    }
    OutputStream os=new FileOutputStream(filePath);
    os.write(buffer.toString().getBytes());
    os.close();
  }
 catch (  Exception exc) {
    log.error(exc,exc);
  }
 finally {
    try {
      in.close();
      inRead.close();
    }
 catch (    IOException e) {
      log.error(e,e);
    }
  }
}",0.9984928409947248
138933,"/** 
 * @param ifile
 * @throws IOException Remove the path of file's parents(until to the top) in the TXT file.
 */
public static void removeAllParent(IFile ifile) throws IOException {
  IFolder parent=(IFolder)ifile.getParent();
  while (!ResourceService.isReadOnlyFolder(parent)) {
    replaceInFile(folderType + parent.getFullPath().toOSString(),PluginConstant.EMPTY_STRING);
    parent=(IFolder)parent.getParent();
  }
}","/** 
 * Remove the path of file's parents(until to the top) in the TXT file.
 * @param ifile
 * @throws IOException
 */
public static void removeAllParent(IFile ifile) throws IOException {
  IFolder parent=(IFolder)ifile.getParent();
  while (!ResourceService.isReadOnlyFolder(parent)) {
    replaceInFile(folderType + parent.getFullPath().toOSString(),PluginConstant.EMPTY_STRING);
    parent=(IFolder)parent.getParent();
  }
}",0.8347010550996483
138934,"/** 
 * @param folderPath
 * @retur Get all Children from TXT by 'folderPath',contain file or subFoldern
 */
public static List<Object> getChildFromTXT(String folderPath){
  List<Object> ls=new ArrayList<Object>();
  try {
    IPath iPath=null;
    IFile file=null;
    IFolder folder=null;
    HashSet<String> set=new HashSet<String>();
    DQRecycleBinNode rbn=null;
    List<String[]> delElements=readFileByLine();
    for (    String[] es : delElements) {
      if (es.length < 2 || folderType.equals(es[0] + ""String_Node_Str"") && folderPath.equals(es[1]))       continue;
      if (es[1].startsWith(folderPath)) {
        iPath=new Path(es[1]);
        if (es[0].equals(""String_Node_Str"")) {
          file=ResourcesPlugin.getWorkspace().getRoot().getFile(iPath);
          if (file.getParent().getFullPath().toOSString().equals(folderPath)) {
            rbn=new DQRecycleBinNode();
            rbn.setObject(file);
            ls.add(rbn);
          }
 else {
            addToSet(es[1],folderPath,set);
          }
        }
 else         if (es[0].equals(""String_Node_Str"")) {
          addToSet(es[1],folderPath,set);
        }
      }
    }
    Iterator<String> iterator=set.iterator();
    while (iterator.hasNext()) {
      rbn=new DQRecycleBinNode();
      folder=ResourcesPlugin.getWorkspace().getRoot().getFolder(new Path(iterator.next()));
      rbn.setObject(folder);
      ls.add(rbn);
    }
  }
 catch (  Exception exc) {
    log.error(exc,exc);
  }
  return ls;
}","/** 
 * Get all Children from TXT by 'folderPath',contain file or subFoldern.
 * @param folderPath
 * @return
 */
public static List<Object> getChildFromTXT(String folderPath){
  List<Object> ls=new ArrayList<Object>();
  try {
    IPath iPath=null;
    IFile file=null;
    IFolder folder=null;
    HashSet<String> set=new HashSet<String>();
    DQRecycleBinNode rbn=null;
    for (    String[] es : delLs) {
      if (es.length < 2 || folderType.equals(es[0] + ""String_Node_Str"") && folderPath.equals(es[1]))       continue;
      if (es[1].startsWith(folderPath)) {
        iPath=new Path(es[1]);
        if (es[0].equals(""String_Node_Str"")) {
          file=ResourcesPlugin.getWorkspace().getRoot().getFile(iPath);
          if (file.getParent().getFullPath().toOSString().equals(folderPath)) {
            rbn=new DQRecycleBinNode();
            rbn.setObject(file);
            ls.add(rbn);
            IFolder rootFolder=(IFolder)file.getParent();
            for (            IResource res : rootFolder.members()) {
              if (res.getType() == IResource.FOLDER && ((IFolder)res).members().length == 0) {
                set.add(folderPath + slashStr + ((IFolder)res).getName());
              }
            }
          }
 else {
            addToSet(es[1],folderPath,set);
          }
        }
      }
    }
    Iterator<String> iterator=set.iterator();
    while (iterator.hasNext()) {
      rbn=new DQRecycleBinNode();
      folder=ResourcesPlugin.getWorkspace().getRoot().getFolder(new Path(iterator.next()));
      rbn.setObject(folder);
      ls.add(rbn);
    }
  }
 catch (  Exception exc) {
    log.error(exc,exc);
  }
  return ls;
}",0.8140127388535032
138935,"/** 
 * @param ifile
 * @throws Exception Logical delete file.set the property of isDelete to 'true'.save the file fullPath to the TXTfile
 */
public static ReturnCode deleteLogical(IFile ifile) throws Exception {
  ReturnCode rc=new ReturnCode();
  List<ModelElement> dependencyClients=EObjectHelper.getDependencyClients(ifile);
  if (!dependencyClients.isEmpty()) {
    rc.setOk(false);
    rc.setMessage(DefaultMessagesImpl.getString(""String_Node_Str""));
  }
 else {
    IFile propFile=ResourcesPlugin.getWorkspace().getRoot().getFile(ifile.getFullPath().removeFileExtension().addFileExtension(FactoriesUtil.PROPERTIES_EXTENSION));
    if (propFile.exists()) {
      Property property=PropertyHelper.getProperty(propFile);
      ItemState itemState=property.getItem().getState();
      if (!itemState.isDeleted()) {
        itemState.setDeleted(true);
        Resource propertyResource=property.eResource();
        rc.setOk(EMFSharedResources.getInstance().saveResource(propertyResource));
        saveElement(LogicalDeleteFileHandle.fileType,ifile.getFullPath().toOSString());
      }
    }
    ProxyRepositoryManager.getInstance().save();
    ifile.getParent().refreshLocal(IResource.DEPTH_INFINITE,null);
    rc.setMessage(DefaultMessagesImpl.getString(""String_Node_Str""));
  }
  return rc;
}","/** 
 * Logical delete file.set the property of isDelete to 'true'.save the file fullPath to the TXT.
 * @param ifile
 * @return
 * @throws Exception
 */
public static ReturnCode deleteLogical(IFile ifile) throws Exception {
  ReturnCode rc=new ReturnCode();
  List<ModelElement> dependencyClients=EObjectHelper.getDependencyClients(ifile);
  if (!dependencyClients.isEmpty()) {
    rc.setOk(false);
    rc.setMessage(DefaultMessagesImpl.getString(""String_Node_Str""));
  }
 else {
    IFile propFile=ResourcesPlugin.getWorkspace().getRoot().getFile(ifile.getFullPath().removeFileExtension().addFileExtension(FactoriesUtil.PROPERTIES_EXTENSION));
    if (propFile.exists()) {
      Property property=PropertyHelper.getProperty(propFile);
      ItemState itemState=property.getItem().getState();
      if (!itemState.isDeleted()) {
        itemState.setDeleted(true);
        Resource propertyResource=property.eResource();
        rc.setOk(EMFSharedResources.getInstance().saveResource(propertyResource));
        saveElement(LogicalDeleteFileHandle.fileType,ifile.getFullPath().toOSString());
      }
    }
    ProxyRepositoryManager.getInstance().save();
    ifile.getParent().refreshLocal(IResource.DEPTH_INFINITE,null);
    rc.setMessage(DefaultMessagesImpl.getString(""String_Node_Str""));
  }
  return rc;
}",0.9666538903794556
138936,"/** 
 * @param filePath
 * @return
 * @throws Exception Read all logical delete elements from the TXT file
 */
public static List<String[]> readFileByLine(){
  List<String[]> list=new ArrayList<String[]>();
  FileReader fr=null;
  BufferedReader br=null;
  try {
    createTxtFile();
    fr=new FileReader(filePath);
    br=new BufferedReader(fr);
    String line=null;
    String[] es=null;
    while ((line=br.readLine()) != null) {
      es=StringUtils.split(line,':');
      if (es.length < 2) {
        continue;
      }
      list.add(es);
    }
  }
 catch (  Exception exc) {
    log.error(exc,exc);
  }
 finally {
    try {
      fr.close();
      if (br != null) {
        br.close();
      }
    }
 catch (    IOException e) {
      log.error(e,e);
    }
  }
  return list;
}","/** 
 * Read all logical delete elements from the TXT file.
 * @return
 */
public static List<String[]> readFileByLine(){
  List<String[]> list=new ArrayList<String[]>();
  FileReader fr=null;
  BufferedReader br=null;
  try {
    createTxtFile();
    fr=new FileReader(filePath);
    br=new BufferedReader(fr);
    String line=null;
    String[] es=null;
    while ((line=br.readLine()) != null) {
      es=StringUtils.split(line,':');
      if (es.length < 2) {
        continue;
      }
      list.add(es);
    }
  }
 catch (  Exception exc) {
    log.error(exc,exc);
  }
 finally {
    try {
      fr.close();
      if (br != null) {
        br.close();
      }
    }
 catch (    IOException e) {
      log.error(e,e);
    }
  }
  return list;
}",0.9608865710560626
138937,"/** 
 * @param fullPath
 * @param folderPath
 * @param hashSe Make sure the same subFoleder only appear oncet
 */
private static void addToSet(String fullPath,String folderPath,HashSet<String> hashSet){
  String subFolderName=fullPath.replace(folderPath,""String_Node_Str"");
  String[] temp=StringUtils.split(subFolderName,'\\');
  if (temp != null && temp.length > 0) {
    subFolderName=temp[0];
    hashSet.add(folderPath + ""String_Node_Str"" + subFolderName);
  }
}","/** 
 * Make sure the same subFoleder only appear once.
 * @param fullPath
 * @param folderPath
 * @param hashSet
 */
private static void addToSet(String fullPath,String folderPath,HashSet<String> hashSet) throws CoreException {
  String subFolderName=fullPath.replace(folderPath,PluginConstant.EMPTY_STRING);
  String[] temp=StringUtils.split(subFolderName,'\\');
  if (temp != null && temp.length > 0) {
    subFolderName=temp[0];
    hashSet.add(folderPath + slashStr + subFolderName);
    if (isStartWithDelFolder(folderPath)) {
      IPath iPath=new Path(folderPath);
      IFolder rootFolder=ResourcesPlugin.getWorkspace().getRoot().getFolder(iPath);
      for (      IResource res : rootFolder.members()) {
        if (res.getType() == IResource.FOLDER && ((IFolder)res).members().length == 0) {
          hashSet.add(folderPath + slashStr + ((IFolder)res).getName());
        }
      }
    }
  }
}",0.5553935860058309
138938,"@Override public void run(){
  SelectedResources selectedResources=new SelectedResources();
  IFile[] selectedFiles=selectedResources.getSelectedResourcesArrayForDelForever();
  try {
    String fileString=ResourceManager.getLibrariesFolder().getLocation().toOSString() + ""String_Node_Str"";
    File f=new Path(fileString).toFile();
    for (    IFile file : selectedFiles) {
      Property property=PropertyHelper.getProperty(file);
      property.getItem().getState().setDeleted(false);
      Resource propertyResource=property.eResource();
      if (!EMFSharedResources.getInstance().saveResource(propertyResource))       return;
      if (f.exists()) {
        LogicalDeleteFileHandle.replaceInFile(LogicalDeleteFileHandle.fileType + file.getFullPath().toOSString(),""String_Node_Str"");
        LogicalDeleteFileHandle.removeAllParent(file);
      }
    }
    if (f.exists()) {
      DQRespositoryView findView=CorePlugin.getDefault().getRepositoryView();
      TreeSelection treeSelection=(TreeSelection)findView.getCommonViewer().getSelection();
      DQRecycleBinNode rbn=(DQRecycleBinNode)treeSelection.getFirstElement();
      if (rbn.getDeletedChildren() != null) {
        IFolder selFolder=(IFolder)rbn.getObject();
        for (        IResource member : selFolder.members()) {
          if (member instanceof IFolder) {
            LogicalDeleteFileHandle.replaceInFile(LogicalDeleteFileHandle.folderType + ((IFolder)member).getFullPath().toOSString(),""String_Node_Str"");
          }
        }
        LogicalDeleteFileHandle.replaceInFile(LogicalDeleteFileHandle.folderType + selFolder.getFullPath().toOSString(),""String_Node_Str"");
      }
    }
  }
 catch (  Exception exc) {
    log.error(exc,exc);
  }
  ProxyRepositoryManager.getInstance().save();
  CorePlugin.getDefault().refreshDQView();
  CorePlugin.getDefault().refreshWorkSpace();
}","@Override public void run(){
  SelectedResources selectedResources=new SelectedResources();
  IFile[] selectedFiles=selectedResources.getSelectedResourcesArrayForDelForever();
  try {
    String fileString=ResourceManager.getLibrariesFolder().getLocation().toOSString() + ""String_Node_Str"";
    File f=new Path(fileString).toFile();
    for (    IFile file : selectedFiles) {
      Property property=PropertyHelper.getProperty(file);
      property.getItem().getState().setDeleted(false);
      Resource propertyResource=property.eResource();
      if (!EMFSharedResources.getInstance().saveResource(propertyResource))       return;
      if (f.exists()) {
        LogicalDeleteFileHandle.replaceInFile(LogicalDeleteFileHandle.fileType + file.getFullPath().toOSString(),PluginConstant.EMPTY_STRING);
        LogicalDeleteFileHandle.removeAllParent(file);
      }
    }
    if (f.exists()) {
      DQRespositoryView findView=CorePlugin.getDefault().getRepositoryView();
      TreeSelection treeSelection=(TreeSelection)findView.getCommonViewer().getSelection();
      DQRecycleBinNode rbn=(DQRecycleBinNode)treeSelection.getFirstElement();
      if (rbn.getObject() instanceof IFolder) {
        IFolder selFolder=(IFolder)rbn.getObject();
        restoreSubFolders(selFolder.members());
        if (LogicalDeleteFileHandle.isStartWithDelFolder(selFolder.getFullPath().toOSString())) {
          LogicalDeleteFileHandle.replaceInFile(LogicalDeleteFileHandle.folderType + selFolder.getFullPath().toOSString(),""String_Node_Str"");
        }
      }
    }
  }
 catch (  Exception exc) {
    log.error(exc,exc);
  }
  ProxyRepositoryManager.getInstance().save();
  CorePlugin.getDefault().refreshDQView();
  CorePlugin.getDefault().refreshWorkSpace();
}",0.8351831298557159
138939,"public static List<Pattern> getPatterns(Analysis analysis){
  List<Pattern> rets=new ArrayList<Pattern>();
  EList<Indicator> indicators=analysis.getResults().getIndicators();
  for (  Indicator indicator : indicators) {
    if (indicator instanceof PatternMatchingIndicator) {
      IndicatorParameters parameters=((PatternMatchingIndicator)indicator).getParameters();
      if (null != parameters && null != parameters.getDataValidDomain()) {
        rets.addAll(parameters.getDataValidDomain().getPatterns());
      }
    }
  }
  return rets;
}","public static List<Pattern> getPatterns(Analysis analysis){
  List<Pattern> rets=new ArrayList<Pattern>();
  EList<Indicator> indicators=analysis.getResults().getIndicators();
  for (  Indicator indicator : indicators) {
    if (indicator instanceof PatternMatchingIndicator) {
      IndicatorParameters parameters=((PatternMatchingIndicator)indicator).getParameters();
      if (null != parameters && null != parameters.getDataValidDomain()) {
        rets.addAll(parameters.getDataValidDomain().getPatterns());
      }
    }
    if (indicator instanceof AllMatchIndicator) {
      EList<RegexpMatchingIndicator> list=((AllMatchIndicator)indicator).getCompositeRegexMatchingIndicators();
      for (      RegexpMatchingIndicator pattern : list) {
        IndicatorParameters parameters=pattern.getParameters();
        if (null != parameters && null != parameters.getDataValidDomain()) {
          rets.addAll(parameters.getDataValidDomain().getPatterns());
        }
      }
    }
  }
  return rets;
}",0.7058064516129032
138940,"private void createChildrenNode(Tree tree,TreeItemContainer parentItem,TreeColumn[] treeColumns,IIndicatorNode[] branchNodes){
  for (int i=0; i < branchNodes.length; i++) {
    IIndicatorNode indicatorNode=branchNodes[i];
    if (!indicatorNode.getLabel().equals(""String_Node_Str"")) {
      final TreeItemContainer treeItem;
      if (parentItem == null) {
        treeItem=new TreeItemContainer(tree,SWT.NONE,treeColumns.length);
      }
 else {
        treeItem=new TreeItemContainer(parentItem,SWT.NONE,treeColumns.length);
      }
      TreeEditor editor;
      Button checkButton;
      Button rowCheckButton=null;
      Button commonCheckButton;
      List<Button> rowButtonList=new ArrayList<Button>();
      for (int j=0; j < treeColumns.length; j++) {
        IndicatorEnum indicatorEnum=indicatorNode.getIndicatorEnum();
        if (j == 0) {
          treeItem.setText(0,indicatorNode.getLabel());
          if (indicatorEnum != null) {
            treeItem.setData(INDICATORITEM,indicatorNode);
          }
          continue;
        }
 else         if (j == 1 && treeColumns.length > 2) {
          editor=new TreeEditor(tree);
          rowCheckButton=new Button(tree,SWT.CHECK);
          rowCheckButton.addSelectionListener(new RowSelectButtonListener(j,treeItem,indicatorEnum,null));
          checkButtons.add(rowCheckButton);
          Color systemColor=tree.getDisplay().getSystemColor(SWT.COLOR_YELLOW);
          treeItem.setBackground(j,systemColor);
          rowCheckButton.setBackground(systemColor);
          commonCheckButton=rowCheckButton;
        }
 else {
          editor=new TreeEditor(tree);
          checkButton=new Button(tree,SWT.CHECK);
          checkButton.setData(indicatorNode);
          if (((ModelElementIndicator)treeColumns[j].getData()).contains(indicatorEnum)) {
            checkButton.setSelection(true);
          }
          final ModelElementIndicator currentIndicator=(ModelElementIndicator)treeColumns[j].getData();
          checkButton.setEnabled(ModelElementIndicatorRule.match(indicatorNode,currentIndicator,this.language));
          if (null != indicatorNode.getIndicatorInstance() && !(indicatorNode.getIndicatorInstance() instanceof DatePatternFreqIndicator) && null != indicatorNode.getIndicatorInstance().getIndicatorDefinition() && dbms.getSqlExpression(indicatorNode.getIndicatorInstance().getIndicatorDefinition()) == null) {
            checkButton.setEnabled(false);
          }
          checkButton.addSelectionListener(new ButtonSelectionListener(j,treeItem,indicatorEnum,currentIndicator));
          if (indicatorEnum != null) {
            checkButton.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str"",indicatorEnum.getLabel(),currentIndicator.getElementName()));
          }
          checkButton.setData(MODELELEMENTINDICATORFLAG,currentIndicator);
          commonCheckButton=checkButton;
          rowButtonList.add(checkButton);
          checkButtons.add(checkButton);
        }
        commonCheckButton.pack();
        editor.minimumWidth=commonCheckButton.getSize().x;
        editor.horizontalAlignment=SWT.CENTER;
        editor.setEditor(commonCheckButton,treeItem,j);
        treeItem.setButton(j,commonCheckButton);
      }
      if (rowCheckButton != null) {
        boolean allChecked=true;
        rowCheckButton.setData(ROWINDICATORFLAG,rowButtonList);
        for (        Button btn : rowButtonList) {
          if (!btn.getSelection()) {
            allChecked=false;
          }
        }
        rowCheckButton.setSelection(allChecked);
      }
      if (indicatorNode.hasChildren()) {
        createChildrenNode(tree,treeItem,treeColumns,indicatorNode.getChildren());
      }
      treeItem.setExpanded(false);
    }
  }
}","private void createChildrenNode(Tree tree,TreeItemContainer parentItem,TreeColumn[] treeColumns,IIndicatorNode[] branchNodes){
  boolean expanded=false;
  for (int i=0; i < branchNodes.length; i++) {
    IIndicatorNode indicatorNode=branchNodes[i];
    if (!indicatorNode.getLabel().equals(""String_Node_Str"")) {
      final TreeItemContainer treeItem;
      if (parentItem == null) {
        treeItem=new TreeItemContainer(tree,SWT.NONE,treeColumns.length);
      }
 else {
        treeItem=new TreeItemContainer(parentItem,SWT.NONE,treeColumns.length);
      }
      TreeEditor editor;
      Button checkButton;
      Button rowCheckButton=null;
      Button commonCheckButton;
      List<Button> rowButtonList=new ArrayList<Button>();
      for (int j=0; j < treeColumns.length; j++) {
        IndicatorEnum indicatorEnum=indicatorNode.getIndicatorEnum();
        if (j == 0) {
          treeItem.setText(0,indicatorNode.getLabel());
          if (indicatorEnum != null) {
            treeItem.setData(INDICATORITEM,indicatorNode);
          }
          continue;
        }
 else         if (j == 1 && treeColumns.length > 2) {
          editor=new TreeEditor(tree);
          rowCheckButton=new Button(tree,SWT.CHECK);
          rowCheckButton.addSelectionListener(new RowSelectButtonListener(j,treeItem,indicatorEnum,null));
          checkButtons.add(rowCheckButton);
          Color systemColor=tree.getDisplay().getSystemColor(SWT.COLOR_YELLOW);
          treeItem.setBackground(j,systemColor);
          rowCheckButton.setBackground(systemColor);
          commonCheckButton=rowCheckButton;
        }
 else {
          editor=new TreeEditor(tree);
          checkButton=new Button(tree,SWT.CHECK);
          checkButton.setData(indicatorNode);
          if (((ModelElementIndicator)treeColumns[j].getData()).contains(indicatorEnum)) {
            checkButton.setSelection(true);
            expanded=true;
          }
          final ModelElementIndicator currentIndicator=(ModelElementIndicator)treeColumns[j].getData();
          checkButton.setEnabled(ModelElementIndicatorRule.match(indicatorNode,currentIndicator,this.language));
          if (null != indicatorNode.getIndicatorInstance() && !(indicatorNode.getIndicatorInstance() instanceof DatePatternFreqIndicator) && null != indicatorNode.getIndicatorInstance().getIndicatorDefinition() && dbms.getSqlExpression(indicatorNode.getIndicatorInstance().getIndicatorDefinition()) == null) {
            checkButton.setEnabled(false);
          }
          checkButton.addSelectionListener(new ButtonSelectionListener(j,treeItem,indicatorEnum,currentIndicator));
          if (indicatorEnum != null) {
            checkButton.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str"",indicatorEnum.getLabel(),currentIndicator.getElementName()));
          }
          checkButton.setData(MODELELEMENTINDICATORFLAG,currentIndicator);
          commonCheckButton=checkButton;
          rowButtonList.add(checkButton);
          checkButtons.add(checkButton);
        }
        commonCheckButton.pack();
        editor.minimumWidth=commonCheckButton.getSize().x;
        editor.horizontalAlignment=SWT.CENTER;
        editor.setEditor(commonCheckButton,treeItem,j);
        treeItem.setButton(j,commonCheckButton);
      }
      if (rowCheckButton != null) {
        boolean allChecked=true;
        rowCheckButton.setData(ROWINDICATORFLAG,rowButtonList);
        for (        Button btn : rowButtonList) {
          if (!btn.getSelection()) {
            allChecked=false;
          }
        }
        rowCheckButton.setSelection(allChecked);
      }
      if (indicatorNode.hasChildren()) {
        createChildrenNode(tree,treeItem,treeColumns,indicatorNode.getChildren());
      }
      if (expanded) {
        TreeItem item=treeItem.getParentItem();
        while (null != item) {
          item.setExpanded(true);
          item=item.getParentItem();
        }
      }
    }
  }
}",0.9695708712613784
138941,"/** 
 * DOC qzhang Comment method ""createIndicatorParameters"".
 * @param indicatorItem
 * @param parameters
 */
private void createIndicatorParameters(TreeItem indicatorItem,IndicatorUnit indicatorUnit){
  TreeItem[] items=indicatorItem.getItems();
  if (indicatorItem != null && !indicatorItem.isDisposed()) {
    for (    TreeItem treeItem : items) {
      if (DATA_PARAM.equals(treeItem.getData(DATA_PARAM))) {
        treeItem.dispose();
      }
    }
  }
  IndicatorParameters parameters=indicatorUnit.getIndicator().getParameters();
  if (parameters == null) {
    return;
  }
  TreeItem iParamItem;
  if (indicatorUnit.getIndicator() instanceof FrequencyIndicator) {
    if (parameters.getBins() == null) {
      return;
    }
    iParamItem=new TreeItem(indicatorItem,SWT.NONE);
    iParamItem.setText(0,DefaultMessagesImpl.getString(""String_Node_Str"") + parameters.getTopN());
    iParamItem.setData(DATA_PARAM,DATA_PARAM);
    iParamItem.setImage(0,ImageLib.getImage(ImageLib.OPTION));
  }
  TextParameters tParameter=parameters.getTextParameter();
  if (tParameter != null) {
    iParamItem=new TreeItem(indicatorItem,SWT.NONE);
    iParamItem.setText(0,DefaultMessagesImpl.getString(""String_Node_Str""));
    iParamItem.setData(DATA_PARAM,DATA_PARAM);
    iParamItem.setImage(0,ImageLib.getImage(ImageLib.OPTION));
    TreeItem subParamItem=new TreeItem(iParamItem,SWT.NONE);
    subParamItem.setText(DefaultMessagesImpl.getString(""String_Node_Str"") + tParameter.isUseBlank());
    subParamItem.setImage(0,ImageLib.getImage(ImageLib.OPTION));
    subParamItem.setData(DATA_PARAM,DATA_PARAM);
    subParamItem=new TreeItem(iParamItem,SWT.NONE);
    subParamItem.setText(DefaultMessagesImpl.getString(""String_Node_Str"") + tParameter.isIgnoreCase());
    subParamItem.setImage(0,ImageLib.getImage(ImageLib.OPTION));
    subParamItem.setData(DATA_PARAM,DATA_PARAM);
    subParamItem=new TreeItem(iParamItem,SWT.NONE);
    subParamItem.setText(DefaultMessagesImpl.getString(""String_Node_Str"") + tParameter.isUseNulls());
    subParamItem.setImage(0,ImageLib.getImage(ImageLib.OPTION));
    subParamItem.setData(DATA_PARAM,DATA_PARAM);
  }
  DateParameters dParameters=parameters.getDateParameters();
  if (dParameters != null) {
    iParamItem=new TreeItem(indicatorItem,SWT.NONE);
    iParamItem.setText(0,DefaultMessagesImpl.getString(""String_Node_Str""));
    iParamItem.setData(DATA_PARAM,DATA_PARAM);
    iParamItem.setImage(0,ImageLib.getImage(ImageLib.OPTION));
    TreeItem subParamItem=new TreeItem(iParamItem,SWT.NONE);
    subParamItem.setText(DefaultMessagesImpl.getString(""String_Node_Str"",dParameters.getDateAggregationType().getName()));
    subParamItem.setImage(0,ImageLib.getImage(ImageLib.OPTION));
    subParamItem.setData(DATA_PARAM,DATA_PARAM);
  }
  Domain indicatorValidDomain=parameters.getIndicatorValidDomain();
  if (indicatorValidDomain != null) {
    iParamItem=new TreeItem(indicatorItem,SWT.NONE);
    iParamItem.setText(0,DefaultMessagesImpl.getString(""String_Node_Str"") + (indicatorValidDomain != null));
    iParamItem.setData(DATA_PARAM,DATA_PARAM);
    iParamItem.setImage(0,ImageLib.getImage(ImageLib.OPTION));
  }
  Domain bins=parameters.getBins();
  if (bins != null) {
    iParamItem=new TreeItem(indicatorItem,SWT.NONE);
    iParamItem.setText(0,DefaultMessagesImpl.getString(""String_Node_Str"") + (bins != null));
    iParamItem.setData(DATA_PARAM,DATA_PARAM);
    iParamItem.setImage(0,ImageLib.getImage(ImageLib.OPTION));
  }
}","/** 
 * DOC qzhang Comment method ""createIndicatorParameters"".
 * @param indicatorItem
 * @param parameters
 */
private void createIndicatorParameters(TreeItem indicatorItem,IndicatorUnit indicatorUnit){
  TreeItem[] items=indicatorItem.getItems();
  if (indicatorItem != null && !indicatorItem.isDisposed()) {
    for (    TreeItem treeItem : items) {
      if (DATA_PARAM.equals(treeItem.getData(DATA_PARAM))) {
        treeItem.dispose();
      }
    }
  }
  IndicatorParameters parameters=indicatorUnit.getIndicator().getParameters();
  if (parameters == null) {
    return;
  }
  if (hideParameters(indicatorUnit)) {
    return;
  }
  TreeItem iParamItem;
  if (indicatorUnit.getIndicator() instanceof FrequencyIndicator) {
    if (parameters.getBins() == null) {
      return;
    }
    iParamItem=new TreeItem(indicatorItem,SWT.NONE);
    iParamItem.setText(0,DefaultMessagesImpl.getString(""String_Node_Str"") + parameters.getTopN());
    iParamItem.setData(DATA_PARAM,DATA_PARAM);
    iParamItem.setImage(0,ImageLib.getImage(ImageLib.OPTION));
  }
  TextParameters tParameter=parameters.getTextParameter();
  if (tParameter != null) {
    iParamItem=new TreeItem(indicatorItem,SWT.NONE);
    iParamItem.setText(0,DefaultMessagesImpl.getString(""String_Node_Str""));
    iParamItem.setData(DATA_PARAM,DATA_PARAM);
    iParamItem.setImage(0,ImageLib.getImage(ImageLib.OPTION));
    TreeItem subParamItem=new TreeItem(iParamItem,SWT.NONE);
    subParamItem.setText(DefaultMessagesImpl.getString(""String_Node_Str"") + tParameter.isUseBlank());
    subParamItem.setImage(0,ImageLib.getImage(ImageLib.OPTION));
    subParamItem.setData(DATA_PARAM,DATA_PARAM);
    subParamItem=new TreeItem(iParamItem,SWT.NONE);
    subParamItem.setText(DefaultMessagesImpl.getString(""String_Node_Str"") + tParameter.isIgnoreCase());
    subParamItem.setImage(0,ImageLib.getImage(ImageLib.OPTION));
    subParamItem.setData(DATA_PARAM,DATA_PARAM);
    subParamItem=new TreeItem(iParamItem,SWT.NONE);
    subParamItem.setText(DefaultMessagesImpl.getString(""String_Node_Str"") + tParameter.isUseNulls());
    subParamItem.setImage(0,ImageLib.getImage(ImageLib.OPTION));
    subParamItem.setData(DATA_PARAM,DATA_PARAM);
  }
  DateParameters dParameters=parameters.getDateParameters();
  if (dParameters != null) {
    iParamItem=new TreeItem(indicatorItem,SWT.NONE);
    iParamItem.setText(0,DefaultMessagesImpl.getString(""String_Node_Str""));
    iParamItem.setData(DATA_PARAM,DATA_PARAM);
    iParamItem.setImage(0,ImageLib.getImage(ImageLib.OPTION));
    TreeItem subParamItem=new TreeItem(iParamItem,SWT.NONE);
    subParamItem.setText(DefaultMessagesImpl.getString(""String_Node_Str"",dParameters.getDateAggregationType().getName()));
    subParamItem.setImage(0,ImageLib.getImage(ImageLib.OPTION));
    subParamItem.setData(DATA_PARAM,DATA_PARAM);
  }
  Domain indicatorValidDomain=parameters.getIndicatorValidDomain();
  if (indicatorValidDomain != null) {
    iParamItem=new TreeItem(indicatorItem,SWT.NONE);
    iParamItem.setText(0,DefaultMessagesImpl.getString(""String_Node_Str"") + (indicatorValidDomain != null));
    iParamItem.setData(DATA_PARAM,DATA_PARAM);
    iParamItem.setImage(0,ImageLib.getImage(ImageLib.OPTION));
  }
  Domain bins=parameters.getBins();
  if (bins != null) {
    iParamItem=new TreeItem(indicatorItem,SWT.NONE);
    iParamItem.setText(0,DefaultMessagesImpl.getString(""String_Node_Str"") + (bins != null));
    iParamItem.setData(DATA_PARAM,DATA_PARAM);
    iParamItem.setImage(0,ImageLib.getImage(ImageLib.OPTION));
  }
}",0.9921529462120132
138942,"/** 
 * <!-- begin-user-doc --> <!-- end-user-doc -->
 * @generated
 */
public double getAverageLength(){
  throw new UnsupportedOperationException();
}","/** 
 * <!-- begin-user-doc --> <!-- end-user-doc -->
 * @generated NOT
 */
public double getAverageLength(){
  if (getCount() == null) {
    return 0.0;
  }
  if (BigInteger.ZERO.equals(getCount())) {
    return 0.0;
  }
  Double totalLength=getSumLength();
  if (totalLength == null) {
    return 0.0;
  }
  return totalLength.doubleValue() / getCount().doubleValue();
}",0.4198473282442748
138943,"/** 
 * <!-- begin-user-doc --> <!-- end-user-doc -->
 * @generated
 */
public double getAverageLength(){
  throw new UnsupportedOperationException();
}","/** 
 * <!-- begin-user-doc --> <!-- end-user-doc -->
 * @generated NOT
 */
public double getAverageLength(){
  if (getCount() == null) {
    return 0.0;
  }
  if (BigInteger.ZERO.equals(getCount())) {
    return 0.0;
  }
  Double totalLength=getSumLength();
  if (totalLength == null) {
    return 0.0;
  }
  return totalLength.doubleValue() / getCount().doubleValue();
}",0.4198473282442748
138944,"/** 
 * <!-- begin-user-doc --> <!-- end-user-doc -->
 * @generated NOT
 */
public double getAverageLength(){
  if (getCount() == null) {
    return 0.0;
  }
  if (BigInteger.ZERO.equals(getCount())) {
    return 0.0;
  }
  Double totalLength=getSumLength();
  if (totalLength == null) {
    return 0.0;
  }
  return totalLength.doubleValue() / getCount().doubleValue();
}","/** 
 * <!-- begin-user-doc --> <!-- end-user-doc -->
 * @generated NOT
 */
public double getAverageLength(){
  if (getCount() == null) {
    return 0.0;
  }
  if (BigInteger.ZERO.equals(getCount())) {
    return 0.0;
  }
  Double totalLength=getSumLength();
  if (totalLength == null) {
    return 0.0;
  }
  return totalLength.doubleValue() / (getCount().doubleValue() - blankCount.doubleValue());
}",0.96248382923674
138945,"@Override public boolean reset(){
  this.sumLength=SUM_LENGTH_EDEFAULT;
  return super.reset();
}","@Override public boolean reset(){
  this.sumLength=SUM_LENGTH_EDEFAULT;
  this.blankCount=BLANK_COUNT_EDEFAULT;
  return super.reset();
}",0.8290598290598291
138946,"@Override public boolean performFinish(){
  String targetFile=page.getTargetFile();
  Object[] elements=page.getSelectedPatternsTree().getCheckedElements();
  List<Pattern> seletedPatterns=new ArrayList<Pattern>();
  for (  Object element : elements) {
    if (element instanceof IFile) {
      IFile file=(IFile)element;
      if (FactoriesUtil.PATTERN.equalsIgnoreCase(file.getFileExtension())) {
        seletedPatterns.add(PatternResourceFileHelper.getInstance().findPattern(file));
      }
    }
  }
  if (""String_Node_Str"".equals(targetFile)) {
    MessageDialog.openError(getShell(),DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str""));
    return false;
  }
 else {
    File resource=new File(targetFile);
    if (isForExchange) {
      ExportFactory.export(resource,folder,seletedPatterns.toArray(new Pattern[seletedPatterns.size()]));
      for (Iterator iterator=seletedPatterns.iterator(); iterator.hasNext(); ) {
        Pattern pattern=(Pattern)iterator.next();
        File patternFile=new File(resource,ExportFactory.toLocalFileName(pattern.getName() + ""String_Node_Str""));
        if (patternFile.isFile() && patternFile.exists()) {
          try {
            FilesUtils.zip(patternFile,patternFile.getPath() + ""String_Node_Str"");
            patternFile.delete();
          }
 catch (          Exception e) {
            log.error(e.getMessage(),e);
          }
        }
      }
      return true;
    }
 else {
      boolean isContinue=true;
      if (resource.exists()) {
        isContinue=MessageDialogWithToggle.openConfirm(null,DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str""));
      }
      if (isContinue) {
        ExportFactory.export(resource,folder,seletedPatterns.toArray(new Pattern[seletedPatterns.size()]));
        return true;
      }
      return false;
    }
  }
}","@Override public boolean performFinish(){
  String targetFile=page.getTargetFile();
  Object[] elements=page.getSelectedPatternsTree().getCheckedElements();
  List<Pattern> seletedPatterns=new ArrayList<Pattern>();
  for (  Object element : elements) {
    if (element instanceof IFile) {
      IFile file=(IFile)element;
      if (FactoriesUtil.PATTERN.equalsIgnoreCase(file.getFileExtension())) {
        seletedPatterns.add(PatternResourceFileHelper.getInstance().findPattern(file));
      }
    }
  }
  if (""String_Node_Str"".equals(targetFile)) {
    MessageDialog.openError(getShell(),DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str""));
    return false;
  }
 else {
    File resource=new File(targetFile);
    if (isForExchange) {
      ExportFactory.export(resource,folder,seletedPatterns.toArray(new Pattern[seletedPatterns.size()]));
      for (Iterator iterator=seletedPatterns.iterator(); iterator.hasNext(); ) {
        Pattern pattern=(Pattern)iterator.next();
        File patternFile=new File(resource,ExportFactory.toLocalFileName(pattern.getName() + ""String_Node_Str""));
        if (patternFile.isFile() && patternFile.exists()) {
          try {
            FilesUtils.zip(patternFile,patternFile.getPath() + ""String_Node_Str"");
            patternFile.delete();
          }
 catch (          Exception e) {
            log.error(e.getMessage(),e);
          }
        }
      }
    }
 else {
      boolean isContinue=true;
      if (resource.exists()) {
        isContinue=MessageDialogWithToggle.openConfirm(null,DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str""));
      }
      if (!isContinue) {
        return false;
      }
      ExportFactory.export(resource,folder,seletedPatterns.toArray(new Pattern[seletedPatterns.size()]));
    }
    CorePlugin.getDefault().refreshDQView();
    CorePlugin.getDefault().refreshWorkSpace();
    return true;
  }
}",0.9485920950658744
138947,"/** 
 * Method ""getColumns"".
 * @param catalogName a catalog name; must match the catalog name as it is stored in the database; """" retrievesthose without a catalog; null means that the catalog name should not be used to narrow the search
 * @param schemaPattern a schema name pattern; must match the schema name as it is stored in the database; """"retrieves those without a schema; null means that the schema name should not be used to narrow the search
 * @param tablePattern a table name pattern; must match the table name as it is stored in the database
 * @param columnPattern a column name pattern; must match the column name as it is stored in the database
 * @throws SQLException
 * @see DatabaseMetaData#getColumns(String,String,String,String)
 */
public List<TdColumn> getColumns(String catalogName,String schemaPattern,String tablePattern,String columnPattern) throws SQLException {
  List<TdColumn> tableColumns=new ArrayList<TdColumn>();
  ResultSet columns=getConnectionMetadata(connection).getColumns(catalogName,schemaPattern,tablePattern,columnPattern);
  while (columns.next()) {
    String colName=null;
    try {
      colName=columns.getString(GetColumn.COLUMN_NAME.name());
    }
 catch (    Exception e1) {
      log.warn(e1,e1);
      if (colName == null) {
        colName=e1.getMessage();
      }
    }
    TdColumn column=ColumnHelper.createTdColumn(colName);
    int dataType=0;
    try {
      dataType=columns.getInt(GetColumn.DATA_TYPE.name());
      column.getSqlDataType().setJavaDataType(dataType);
    }
 catch (    Exception e) {
      log.warn(e,e);
    }
    String typeName=null;
    try {
      typeName=columns.getString(GetColumn.TYPE_NAME.name());
      if (ConnectionUtils.isMssql(connection)) {
        if (typeName.toLowerCase().equals(""String_Node_Str"")) {
          column.getSqlDataType().setJavaDataType(91);
        }
 else         if (typeName.toLowerCase().equals(""String_Node_Str"")) {
          column.getSqlDataType().setJavaDataType(92);
        }
      }
    }
 catch (    Exception e1) {
      log.warn(e1,e1);
    }
    try {
      column.setLength(columns.getInt(GetColumn.COLUMN_SIZE.name()));
    }
 catch (    Exception e1) {
      log.warn(e1,e1);
    }
    int decimalDigits=0;
    try {
      decimalDigits=columns.getInt(GetColumn.DECIMAL_DIGITS.name());
    }
 catch (    Exception e) {
      log.warn(e);
    }
    int numPrecRadix=0;
    try {
      numPrecRadix=columns.getInt(GetColumn.NUM_PREC_RADIX.name());
    }
 catch (    Exception e) {
      log.warn(e);
    }
    try {
      String colComment=getComment(colName,columns);
      ColumnHelper.setComment(colComment,column);
    }
 catch (    Exception e) {
      log.warn(e,e);
    }
    Object defaultvalue=null;
    try {
      defaultvalue=columns.getObject(GetColumn.COLUMN_DEF.name());
    }
 catch (    Exception e1) {
      log.warn(e1,e1);
    }
    String defaultStr=(defaultvalue != null) ? String.valueOf(defaultvalue) : null;
    TdExpression defExpression=BooleanExpressionHelper.createTdExpression(GetColumn.COLUMN_DEF.name(),defaultStr);
    try {
      column.getSqlDataType().setNullable(NullableType.get(columns.getInt(GetColumn.NULLABLE.name())));
    }
 catch (    Exception e1) {
      log.warn(e1,e1);
    }
    TdSqlDataType sqlDataType=DatabaseContentRetriever.createDataType(dataType,typeName,decimalDigits,numPrecRadix);
    column.setSqlDataType(sqlDataType);
    column.setInitialValue(defExpression);
    tableColumns.add(column);
  }
  columns.close();
  return tableColumns;
}","/** 
 * Method ""getColumns"".
 * @param catalogName a catalog name; must match the catalog name as it is stored in the database; """" retrievesthose without a catalog; null means that the catalog name should not be used to narrow the search
 * @param schemaPattern a schema name pattern; must match the schema name as it is stored in the database; """"retrieves those without a schema; null means that the schema name should not be used to narrow the search
 * @param tablePattern a table name pattern; must match the table name as it is stored in the database
 * @param columnPattern a column name pattern; must match the column name as it is stored in the database
 * @throws SQLException
 * @see DatabaseMetaData#getColumns(String,String,String,String)
 */
public List<TdColumn> getColumns(String catalogName,String schemaPattern,String tablePattern,String columnPattern) throws SQLException {
  List<TdColumn> tableColumns=new ArrayList<TdColumn>();
  ResultSet columns=getConnectionMetadata(connection).getColumns(catalogName,schemaPattern,tablePattern,columnPattern);
  while (columns.next()) {
    String colName=null;
    try {
      colName=columns.getString(GetColumn.COLUMN_NAME.name());
    }
 catch (    Exception e1) {
      log.warn(e1,e1);
      if (colName == null) {
        colName=e1.getMessage();
      }
    }
    TdColumn column=ColumnHelper.createTdColumn(colName);
    int dataType=0;
    try {
      dataType=columns.getInt(GetColumn.DATA_TYPE.name());
    }
 catch (    Exception e) {
      log.warn(e,e);
    }
    String typeName=null;
    try {
      typeName=columns.getString(GetColumn.TYPE_NAME.name());
      if (ConnectionUtils.isMssql(connection)) {
        if (typeName.toLowerCase().equals(""String_Node_Str"")) {
          dataType=91;
        }
 else         if (typeName.toLowerCase().equals(""String_Node_Str"")) {
          dataType=92;
        }
      }
    }
 catch (    Exception e1) {
      log.warn(e1,e1);
    }
    try {
      column.setLength(columns.getInt(GetColumn.COLUMN_SIZE.name()));
    }
 catch (    Exception e1) {
      log.warn(e1,e1);
    }
    int decimalDigits=0;
    try {
      decimalDigits=columns.getInt(GetColumn.DECIMAL_DIGITS.name());
    }
 catch (    Exception e) {
      log.warn(e);
    }
    int numPrecRadix=0;
    try {
      numPrecRadix=columns.getInt(GetColumn.NUM_PREC_RADIX.name());
    }
 catch (    Exception e) {
      log.warn(e);
    }
    try {
      String colComment=getComment(colName,columns);
      ColumnHelper.setComment(colComment,column);
    }
 catch (    Exception e) {
      log.warn(e,e);
    }
    Object defaultvalue=null;
    try {
      defaultvalue=columns.getObject(GetColumn.COLUMN_DEF.name());
    }
 catch (    Exception e1) {
      log.warn(e1,e1);
    }
    String defaultStr=(defaultvalue != null) ? String.valueOf(defaultvalue) : null;
    TdExpression defExpression=BooleanExpressionHelper.createTdExpression(GetColumn.COLUMN_DEF.name(),defaultStr);
    TdSqlDataType sqlDataType=DatabaseContentRetriever.createDataType(dataType,typeName,decimalDigits,numPrecRadix);
    column.setSqlDataType(sqlDataType);
    try {
      column.getSqlDataType().setNullable(NullableType.get(columns.getInt(GetColumn.NULLABLE.name())));
    }
 catch (    Exception e1) {
      log.warn(e1,e1);
    }
    column.setInitialValue(defExpression);
    tableColumns.add(column);
  }
  columns.close();
  return tableColumns;
}",0.9091694256513604
138948,"/** 
 * DataProviderBuilder constructor.
 * @param conn the connection
 * @param driver the JDBC driver
 * @param databaseUrl the database connection string (must not be null)
 * @param driverProperties the properties passed to the driver (could be null)
 * @throws SQLException
 */
public DataProviderBuilder(Connection databaseConn,java.sql.Connection conn,Driver driver,String databaseUrl) throws SQLException {
  super(conn);
  dataProvider=databaseConn;
  String identifierQuote=ConnectionUtils.getConnectionMetadata(conn).getIdentifierQuoteString();
  ConnectionHelper.setIdentifierQuoteString(identifierQuote == null ? ""String_Node_Str"" : identifierQuote,dataProvider);
}","/** 
 * DataProviderBuilder constructor.
 * @param conn the connection
 * @param driver the JDBC driver
 * @param databaseUrl the database connection string (must not be null)
 * @param driverProperties the properties passed to the driver (could be null)
 * @throws SQLException
 */
public DataProviderBuilder(DatabaseConnection databaseConn,Connection conn,Driver driver,String databaseUrl) throws SQLException {
  super(conn);
  dataProvider=databaseConn;
  String identifierQuote=ConnectionUtils.getConnectionMetadata(conn).getIdentifierQuoteString();
  ConnectionHelper.setIdentifierQuoteString(identifierQuote == null ? ""String_Node_Str"" : identifierQuote,dataProvider);
}",0.9874538745387452
138949,"/** 
 * DOC scorreia Comment method ""getPrimaryKeys"".
 * @param catalogName
 * @param schemaPattern
 * @param table
 * @throws SQLException
 */
public List<PrimaryKey> getPrimaryKeys(String catalogName,String schemaPattern,String tableName) throws SQLException {
  List<PrimaryKey> pks=new ArrayList<PrimaryKey>();
  ResultSet primaryKeys=null;
  try {
    primaryKeys=ConnectionUtils.getConnectionMetadata(connection).getPrimaryKeys(catalogName,schemaPattern,tableName);
    try {
      while (primaryKeys.next()) {
        PrimaryKey pk=createPrimaryKey(primaryKeys);
        pks.add(pk);
      }
    }
 catch (    SQLException e) {
      throw e;
    }
 finally {
      if (primaryKeys != null) {
        primaryKeys.close();
      }
    }
  }
 catch (  Exception e1) {
    log.warn(""String_Node_Str"",e1);
  }
  return pks;
}","/** 
 * Method ""getPrimaryKeys"".
 * @param catalogName the catalog name (can be null)
 * @param schemaPattern the schema name (can be null)
 * @param tableName the name of a table
 * @return the primary keys found given the parameters. According the CWM documentation, there is only one primarykey per table (primary key may be composed by several columns).
 * @throws SQLException
 */
public List<PrimaryKey> getPrimaryKeys(String catalogName,String schemaPattern,String tableName) throws SQLException {
}",0.3628185907046476
138950,"/** 
 * Method ""getDataProvider"" should be called after   {@link #retrieveDriverInformations()}. Note that the ProviderConnection is already linked to the data provider when calling this method.
 * @return the data provider or null.
 */
public Connection getDataProvider(){
  return this.databaseConnection;
}","/** 
 * Method ""getDataProvider"" should be called after   {@link #retrieveDriverInformations()}. Note that the ProviderConnection is already linked to the data provider when calling this method.
 * @return the data provider or null.
 */
public DatabaseConnection getDataProvider(){
  return this.databaseConnection;
}",0.987220447284345
138951,"/** 
 * Method ""getDataProvider"".
 * @param driver the driver for the database connection
 * @param databaseUrl the database url
 * @param driverProperties the properties given to the driver
 * @return the data provider with a null name. Its name has to be set elsewhere.
 * @throws SQLException
 */
public static DatabaseConnection getDataProvider(Driver driver,String databaseUrl,Properties driverProperties) throws SQLException {
  DatabaseConnection provider=DataProviderHelper.createDatabaseConnection(null);
  DriverPropertyInfo[] driverProps=null;
  if (!databaseUrl.toLowerCase().startsWith(""String_Node_Str"")) {
    driverProps=driver.getPropertyInfo(databaseUrl,driverProperties);
  }
  if (driverProps != null) {
    for (int i=0; i < driverProps.length; i++) {
      DriverPropertyInfo prop=driverProps[i];
      if (TaggedValueHelper.PASSWORD.equals(prop.name)) {
        continue;
      }
      if (log.isDebugEnabled()) {
        log.debug(""String_Node_Str"" + prop.description);
        log.debug(prop.name + ""String_Node_Str"" + prop.value);
      }
      if (log.isDebugEnabled()) {
        if (prop.choices != null) {
          for (int j=0; j < prop.choices.length; j++) {
            log.debug(""String_Node_Str"" + j + ""String_Node_Str""+ prop.choices[j]);
          }
        }
      }
    }
  }
  return provider;
}","/** 
 * Method ""getDataProvider"".
 * @param driver the driver for the database connection
 * @param databaseUrl the database url
 * @param driverProperties the properties given to the driver
 * @return the data provider with a null name. Its name has to be set elsewhere.
 * @throws SQLException
 */
public static DatabaseConnection getDataProvider(Driver driver,String databaseUrl,Properties driverProperties) throws SQLException {
  DatabaseConnection provider=DataProviderHelper.createDatabaseConnection(null);
  DriverPropertyInfo[] driverProps=null;
  if (!databaseUrl.toLowerCase().startsWith(""String_Node_Str"")) {
    driverProps=driver.getPropertyInfo(databaseUrl,driverProperties);
  }
  if (driverProps != null) {
    for (int i=0; i < driverProps.length; i++) {
      DriverPropertyInfo prop=driverProps[i];
      if (TaggedValueHelper.PASSWORD.equals(prop.name)) {
        String password=prop.value != null ? prop.value : ""String_Node_Str"";
        ConnectionHelper.setPassword(provider,password);
        continue;
      }
      if (TaggedValueHelper.USER.equals(prop.name)) {
        String user=prop.value != null ? prop.value : ""String_Node_Str"";
        ConnectionHelper.setUsername(provider,user);
      }
      if (log.isDebugEnabled()) {
        log.debug(""String_Node_Str"" + prop.description);
        log.debug(prop.name + ""String_Node_Str"" + prop.value);
      }
      if (log.isDebugEnabled()) {
        if (prop.choices != null) {
          for (int j=0; j < prop.choices.length; j++) {
            log.debug(""String_Node_Str"" + j + ""String_Node_Str""+ prop.choices[j]);
          }
        }
      }
    }
  }
  return provider;
}",0.8869565217391304
138952,"public static QueryColumnSet getQueryColumnSet(ResultSetMetaData metaData) throws SQLException {
  QueryColumnSet columnSet=ColumnSetHelper.createQueryColumnSet();
  int columnCount=metaData.getColumnCount();
  for (int i=1; i <= columnCount; i++) {
    String columnName=metaData.getColumnName(i);
    TdColumn column=ColumnHelper.createColumn(columnName);
    ColumnSetHelper.addColumn(column,columnSet);
  }
  return columnSet;
}","/** 
 * DOC scorreia Comment method ""getQueryColumnSet"".
 * @param metaData
 * @return
 * @throws SQLException
 * @Deprecated not used. Please check the code before using it!!
 */
public static QueryColumnSet getQueryColumnSet(ResultSetMetaData metaData) throws SQLException {
  QueryColumnSet columnSet=ColumnSetHelper.createQueryColumnSet();
  int columnCount=metaData.getColumnCount();
  for (int i=1; i <= columnCount; i++) {
    String columnName=metaData.getColumnName(i);
    TdColumn column=ColumnHelper.createColumn(columnName);
    ColumnSetHelper.addColumn(column,columnSet);
  }
  return columnSet;
}",0.7241379310344828
138953,"public static DatabaseConnection fillConnectionInfo(Connection prov,String dbUrl,String driverClassName,Properties props,java.sql.Connection connection) throws SQLException {
  return null;
}","public static DatabaseConnection fillConnectionInfo(DatabaseConnection prov,String dbUrl,String driverClassName,Properties props,java.sql.Connection connection) throws SQLException {
  prov.setDriverClass(driverClassName);
  prov.setURL(dbUrl);
  try {
    prov.setReadOnly(connection.isReadOnly());
  }
 catch (  Exception e) {
    log.warn(e,e);
  }
  Enumeration<?> propertyNames=props.propertyNames();
  while (propertyNames.hasMoreElements()) {
    String key=propertyNames.nextElement().toString();
    String property=props.getProperty(key);
    if (property == null) {
    }
    if (TaggedValueHelper.PASSWORD.equals(key)) {
      prov.setPassword(property);
    }
 else     if (TaggedValueHelper.USER.equals(key)) {
      prov.setUsername(property);
    }
  }
  return prov;
}",0.3770491803278688
138954,"/** 
 * DOC bZhou Comment method ""addConnetionAliasToSQLPlugin"".
 * @param dataproviders
 */
public void addConnetionAliasToSQLPlugin(DataProvider... dataproviders){
  SQLExplorerPlugin sqlPlugin=SQLExplorerPlugin.getDefault();
  AliasManager aliasManager=sqlPlugin.getAliasManager();
  for (  DataProvider dataProvider : dataproviders) {
    try {
      Connection connection=SwitchHelpers.CONNECTION_SWITCH.doSwitch(dataProvider);
      if (connection != null) {
        Alias alias=new Alias(dataProvider.getName());
        String clearTextUser=ConnectionHelper.getUsername(connection);
        String user=""String_Node_Str"".equals(clearTextUser) ? ""String_Node_Str"" : clearTextUser;
        String password=ConnectionHelper.getPassword(connection);
        String url=ConnectionHelper.getURL(connection);
        User previousUser=new User(user,password);
        alias.setDefaultUser(previousUser);
        alias.setAutoLogon(false);
        alias.setConnectAtStartup(true);
        alias.setUrl(url);
        ManagedDriver manDr=sqlPlugin.getDriverModel().getDriver(EDriverName.getId(ConnectionHelper.getDriverClass(connection)));
        if (manDr != null) {
          alias.setDriver(manDr);
        }
        if (!aliasManager.contains(alias)) {
          aliasManager.addAlias(alias);
        }
      }
    }
 catch (    ExplorerException e) {
      log.error(e,e);
    }
  }
  try {
    aliasManager.saveAliases();
  }
 catch (  ExplorerException e) {
    log.error(e,e);
  }
  aliasManager.modelChanged();
}","/** 
 * DOC bZhou Comment method ""addConnetionAliasToSQLPlugin"".
 * @param dataproviders
 */
public void addConnetionAliasToSQLPlugin(DataProvider... dataproviders){
}",0.1979845880260818
138955,"private void retrieveProjectName(ItemRecord anyRecord){
  Property property=anyRecord.getProperty();
  if (projectName == null && property != null) {
    InternalEObject author=(InternalEObject)property.getAuthor();
    if (author != null && !author.eIsProxy()) {
      Resource projResource=author.eResource();
      if (projResource != null) {
        IPath projectPath=new Path(projResource.getURI().toFileString());
        Object projOBJ=EObjectHelper.retrieveEObject(projectPath,PropertiesPackage.eINSTANCE.getProject());
        if (projOBJ != null) {
          Project project=(Project)projOBJ;
          projectName=project.getTechnicalLabel();
        }
      }
    }
 else {
      projectName=ReponsitoryContextBridge.PROJECT_DEFAULT_NAME;
    }
  }
}","private void retrieveProjectName(ItemRecord anyRecord){
  Property property=anyRecord.getProperty();
  if (property != null) {
    InternalEObject author=(InternalEObject)property.getAuthor();
    if (author != null && !author.eIsProxy()) {
      Resource projResource=author.eResource();
      if (projResource != null) {
        IPath projectPath=new Path(projResource.getURI().toFileString());
        Object projOBJ=EObjectHelper.retrieveEObject(projectPath,PropertiesPackage.eINSTANCE.getProject());
        if (projOBJ != null) {
          Project project=(Project)projOBJ;
          projectName=project.getTechnicalLabel();
        }
      }
    }
 else {
      projectName=ReponsitoryContextBridge.PROJECT_DEFAULT_NAME;
    }
  }
}",0.9846768820786144
138956,"@Override protected String createSqlStatement(Analysis analysis){
  this.cachedAnalysis=analysis;
  StringBuilder sql=new StringBuilder(""String_Node_Str"");
  EList<ModelElement> analysedElements=analysis.getContext().getAnalysedElements();
  if (analysedElements.isEmpty()) {
    this.errorMessage=Messages.getString(""String_Node_Str"",analysis.getName());
    return null;
  }
  Set<ColumnSet> fromPart=new HashSet<ColumnSet>();
  final Iterator<ModelElement> iterator=analysedElements.iterator();
  while (iterator.hasNext()) {
    ModelElement modelElement=iterator.next();
    TdColumn col=SwitchHelpers.COLUMN_SWITCH.doSwitch(modelElement);
    if (col == null) {
      this.errorMessage=Messages.getString(""String_Node_Str"",modelElement);
      return null;
    }
    Classifier owner=col.getOwner();
    if (owner == null) {
      this.errorMessage=Messages.getString(""String_Node_Str"",col.getName());
    }
    ColumnSet colSet=SwitchHelpers.COLUMN_SET_SWITCH.doSwitch(owner);
    if (colSet == null) {
      this.errorMessage=Messages.getString(""String_Node_Str"",col.getName(),colSet);
      return null;
    }
    if (!analysis.getParameters().isStoreData()) {
      sql.append(this.quote(col.getName()));
      if (iterator.hasNext()) {
        sql.append(',');
      }
    }
    fromPart.add(colSet);
  }
  if (fromPart.size() != 1) {
    log.error(""String_Node_Str"" + fromPart.size() + ""String_Node_Str"");
    this.errorMessage=""String_Node_Str"";
    return null;
  }
  if (analysis.getParameters().isStoreData()) {
    List<TdColumn> columnList=TableHelper.getColumns(SwitchHelpers.TABLE_SWITCH.doSwitch(analysedElements.get(0).eContainer()));
    Iterator<TdColumn> iter=columnList.iterator();
    while (iter.hasNext()) {
      TdColumn column=iter.next();
      sql.append(this.quote(column.getName()));
      if (iter.hasNext()) {
        sql.append(',');
      }
    }
  }
  sql.append(dbms().from());
  ModelElement element=fromPart.iterator().next();
  Package parentRelation=TableHelper.getParentCatalogOrSchema(fromPart.iterator().next());
  if (parentRelation instanceof TdSchema) {
    sql.append(dbms().toQualifiedName(null,parentRelation.getName(),element.getName()));
  }
 else   if (parentRelation instanceof TdCatalog) {
    sql.append(dbms().toQualifiedName(parentRelation.getName(),null,element.getName()));
  }
  ModelElementAnalysisHandler handler=new ModelElementAnalysisHandler();
  handler.setAnalysis(analysis);
  String stringDataFilter=handler.getStringDataFilter();
  sql.append(GenericSQLHandler.WHERE_CLAUSE);
  String sqlStatement=sql.toString();
  sqlStatement=dbms().addWhereToStatement(sqlStatement,stringDataFilter);
  return sqlStatement;
}","@Override protected String createSqlStatement(Analysis analysis){
  this.cachedAnalysis=analysis;
  StringBuilder sql=new StringBuilder(""String_Node_Str"");
  EList<ModelElement> analysedElements=analysis.getContext().getAnalysedElements();
  if (analysedElements.isEmpty()) {
    this.errorMessage=Messages.getString(""String_Node_Str"",analysis.getName());
    return null;
  }
  Set<ColumnSet> fromPart=new HashSet<ColumnSet>();
  final Iterator<ModelElement> iterator=analysedElements.iterator();
  while (iterator.hasNext()) {
    ModelElement modelElement=iterator.next();
    TdColumn col=SwitchHelpers.COLUMN_SWITCH.doSwitch(modelElement);
    if (col == null) {
      this.errorMessage=Messages.getString(""String_Node_Str"",modelElement);
      return null;
    }
    Classifier owner=col.getOwner();
    if (owner == null) {
      this.errorMessage=Messages.getString(""String_Node_Str"",col.getName());
    }
    ColumnSet colSet=SwitchHelpers.COLUMN_SET_SWITCH.doSwitch(owner);
    if (colSet == null) {
      this.errorMessage=Messages.getString(""String_Node_Str"",col.getName(),colSet);
      return null;
    }
    if (!analysis.getParameters().isStoreData()) {
      sql.append(this.quote(col.getName()));
      if (iterator.hasNext()) {
        sql.append(',');
      }
    }
    fromPart.add(colSet);
  }
  if (fromPart.size() != 1) {
    log.error(""String_Node_Str"" + fromPart.size() + ""String_Node_Str"");
    this.errorMessage=""String_Node_Str"";
    return null;
  }
  if (analysis.getParameters().isStoreData()) {
    List<TdColumn> columnList=TableHelper.getColumns(SwitchHelpers.TABLE_SWITCH.doSwitch(analysedElements.get(0).eContainer()));
    Iterator<TdColumn> iter=columnList.iterator();
    while (iter.hasNext()) {
      TdColumn column=iter.next();
      sql.append(this.quote(column.getName()));
      if (iter.hasNext()) {
        sql.append(',');
      }
    }
  }
  sql.append(dbms().from());
  ModelElement element=fromPart.iterator().next();
  Package parentRelation=TableHelper.getParentCatalogOrSchema(fromPart.iterator().next());
  if (parentRelation instanceof TdSchema) {
    sql.append(dbms().toQualifiedName(null,parentRelation.getName(),element.getName()));
  }
 else   if (parentRelation instanceof TdCatalog) {
    String ownerUser=null;
    if (dbms() instanceof SybaseASEDbmsLanguage) {
      ownerUser=ColumnSetHelper.getTableOwner((ModelElement)element);
    }
    sql.append(dbms().toQualifiedName(parentRelation.getName(),ownerUser,element.getName()));
  }
  ModelElementAnalysisHandler handler=new ModelElementAnalysisHandler();
  handler.setAnalysis(analysis);
  String stringDataFilter=handler.getStringDataFilter();
  sql.append(GenericSQLHandler.WHERE_CLAUSE);
  String sqlStatement=sql.toString();
  sqlStatement=dbms().addWhereToStatement(sqlStatement,stringDataFilter);
  return sqlStatement;
}",0.9698283649503162
138957,"@Override public String toQualifiedName(String catalog,String schema,String table){
  if (schema == null) {
    schema=quote(""String_Node_Str"");
  }
  return super.toQualifiedName(catalog,schema,table);
}","@Override public String toQualifiedName(String catalog,String schema,String table){
  return super.toQualifiedName(catalog,schema,table);
}",0.8104956268221575
138958,"/** 
 * check that directory exist and issue an error message if not. <br> check that the folder is a data quality repository or issue an error.<br> check that anything is check in the tree or issue an error.<br>
 */
private void checkforErrors(){
  List<String> dErrors=new ArrayList<String>();
  dErrors.addAll(writer.check());
  if (repositoryTree.getTree().getItems().length == 0) {
    dErrors.add(Messages.getString(""String_Node_Str""));
  }
  if (repositoryTree.getCheckedElements().length == 0) {
    dErrors.add(Messages.getString(""String_Node_Str""));
  }
  ItemRecord[] elements=getElements();
  for (  ItemRecord record : elements) {
    for (    File depFile : record.getDependencyMap().keySet()) {
      ModelElement element=record.getDependencyMap().get(depFile);
      ItemRecord findRecord=ItemRecord.findRecord(depFile);
      if (findRecord == null || !repositoryTree.getChecked(findRecord)) {
        dErrors.add(""String_Node_Str"" + record.getElement().getName() + ""String_Node_Str""+ element.getName());
      }
    }
  }
  if (!dErrors.isEmpty()) {
    setErrorMessage(dErrors.get(0));
  }
 else {
    setErrorMessage(null);
  }
  updatePageStatus();
}","/** 
 * check that directory exist and issue an error message if not. <br> check that the folder is a data quality repository or issue an error.<br> check that anything is check in the tree or issue an error.<br>
 */
private void checkforErrors(){
  List<String> dErrors=new ArrayList<String>();
  if (repositoryTree.getTree().getItems().length == 0) {
    dErrors.add(Messages.getString(""String_Node_Str""));
  }
  if (repositoryTree.getCheckedElements().length == 0) {
    dErrors.add(Messages.getString(""String_Node_Str""));
  }
  dErrors.addAll(writer.check());
  ItemRecord[] elements=getElements();
  for (  ItemRecord record : elements) {
    for (    File depFile : record.getDependencyMap().keySet()) {
      ModelElement element=record.getDependencyMap().get(depFile);
      ItemRecord findRecord=ItemRecord.findRecord(depFile);
      if (findRecord == null || !repositoryTree.getChecked(findRecord)) {
        dErrors.add(""String_Node_Str"" + record.getElement().getName() + ""String_Node_Str""+ element.getName());
      }
    }
  }
  if (!dErrors.isEmpty()) {
    setErrorMessage(dErrors.get(0));
  }
 else {
    setErrorMessage(null);
  }
  updatePageStatus();
}",0.9709649871904356
138959,"public ItemRecord[] populate(ItemRecord[] elements,boolean checkExisted){
  List<ItemRecord> inValidRecords=new ArrayList<ItemRecord>();
  for (  ItemRecord record : elements) {
    checkDependency(record);
    if (checkExisted) {
      checkExisted(record);
    }
    if (!record.isValid()) {
      inValidRecords.add(record);
    }
  }
  versionFile=DqFileUtils.getFile(basePath.toFile(),VERSION_FILE_NAME);
  definitionFile=DqFileUtils.getFile(basePath.toFile(),DEFINITION_FILE_NAME);
  return inValidRecords.toArray(new ItemRecord[inValidRecords.size()]);
}","public ItemRecord[] populate(ItemRecord[] elements,boolean checkExisted){
  List<ItemRecord> inValidRecords=new ArrayList<ItemRecord>();
  for (  ItemRecord record : elements) {
    checkDependency(record);
    if (checkExisted) {
      checkExisted(record);
    }
    if (!record.isValid()) {
      inValidRecords.add(record);
    }
  }
  if (basePath != null) {
    versionFile=DqFileUtils.getFile(basePath.toFile(),VERSION_FILE_NAME);
    definitionFile=DqFileUtils.getFile(basePath.toFile(),DEFINITION_FILE_NAME);
  }
  return inValidRecords.toArray(new ItemRecord[inValidRecords.size()]);
}",0.9705882352941176
138960,"protected void soundexForJavaEngine(){
  Iterator<Object> iterator=this.getValueToFreq().keySet().iterator();
  Soundex sd=new Soundex();
  HashMap<Object,Long> disctinctVfMap=new HashMap<Object,Long>();
  List<String[]> valueToFreqLs=new ArrayList<String[]>();
  while (iterator.hasNext()) {
    String array[]=new String[3];
    Object obj=iterator.next();
    if (obj == null) {
      array[0]=SpecialValueDisplay.NULL_FIELD;
      array[2]=String.valueOf(0);
    }
 else {
      array[0]=obj.toString();
      array[2]=String.valueOf(1);
    }
    try {
      array[1]=sd.soundex(array[0]);
    }
 catch (    IllegalArgumentException ex) {
      log.warn(""String_Node_Str"" + array[0]);
      continue;
    }
    valueToFreqLs.add(array);
  }
  String foreArray[]=null;
  String afterArray[]=null;
  HashMap<Object,Long> vfMap=new HashMap<Object,Long>();
  for (int i=0; i < valueToFreqLs.size(); i++) {
    foreArray=(String[])valueToFreqLs.get(i);
    vfMap.put(foreArray[0],valueToFreq.get(foreArray[0]));
    for (int j=i + 1; j < valueToFreqLs.size(); j++) {
      afterArray=(String[])valueToFreqLs.get(j);
      if (afterArray[1].equals(foreArray[1])) {
        foreArray[2]=Long.valueOf(foreArray[2]).intValue() + 1 + ""String_Node_Str"";
        valueToFreqLs.remove(afterArray);
        j--;
        Long newLong=Long.valueOf(vfMap.get(foreArray[0]).longValue() + valueToFreq.get(afterArray[0]).longValue());
        vfMap.remove(foreArray[0]);
        if (foreArray[0].compareTo(afterArray[0]) < 0)         foreArray[0]=afterArray[0];
        vfMap.put(foreArray[0],newLong);
      }
    }
    disctinctVfMap.put(foreArray[0],Long.valueOf(foreArray[2]));
  }
  setValueToFreq(vfMap);
  setValueToDistinctFreq(disctinctVfMap);
}","protected void soundexForJavaEngine(){
  Iterator<Object> iterator=this.getValueToFreq().keySet().iterator();
  Soundex sd=new Soundex();
  HashMap<Object,Long> disctinctVfMap=new HashMap<Object,Long>();
  List<String[]> valueToFreqLs=new ArrayList<String[]>();
  while (iterator.hasNext()) {
    String array[]=new String[3];
    Object obj=iterator.next();
    if (obj == null) {
      array[0]=null;
      array[2]=String.valueOf(0);
    }
 else {
      array[0]=obj.toString();
      array[2]=String.valueOf(1);
    }
    try {
      array[1]=sd.soundex(array[0]);
    }
 catch (    IllegalArgumentException ex) {
      log.warn(""String_Node_Str"" + array[0]);
      continue;
    }
    valueToFreqLs.add(array);
  }
  String foreArray[]=null;
  String afterArray[]=null;
  HashMap<Object,Long> vfMap=new HashMap<Object,Long>();
  for (int i=0; i < valueToFreqLs.size(); i++) {
    foreArray=(String[])valueToFreqLs.get(i);
    if (foreArray[0] == null) {
      disctinctVfMap.put(SpecialValueDisplay.NULL_FIELD,Long.valueOf(foreArray[2]));
      vfMap.put(SpecialValueDisplay.NULL_FIELD,valueToFreq.get(foreArray[0]));
      continue;
    }
    vfMap.put(foreArray[0],valueToFreq.get(foreArray[0]));
    for (int j=i + 1; j < valueToFreqLs.size(); j++) {
      afterArray=(String[])valueToFreqLs.get(j);
      if (afterArray[0] == null) {
        continue;
      }
      if (afterArray[1].equals(foreArray[1])) {
        foreArray[2]=Long.valueOf(foreArray[2]).intValue() + 1 + ""String_Node_Str"";
        valueToFreqLs.remove(afterArray);
        j--;
        Long newLong=Long.valueOf(vfMap.get(foreArray[0]).longValue() + valueToFreq.get(afterArray[0]).longValue());
        vfMap.remove(foreArray[0]);
        if (foreArray[0].compareTo(afterArray[0]) < 0)         foreArray[0]=afterArray[0];
        vfMap.put(foreArray[0],newLong);
      }
    }
    disctinctVfMap.put(foreArray[0],Long.valueOf(foreArray[2]));
  }
  setValueToFreq(vfMap);
  setValueToDistinctFreq(disctinctVfMap);
}",0.6588046100241223
138961,"@Override public void widgetSelected(SelectionEvent e){
  IIndicatorNode indicatorNode=((IIndicatorNode)e.item.getData(INDICATORITEM));
  if (indicatorNode == null) {
    purposeLabel.setText(PURPOSE + ((TreeItem)e.item).getText());
    descriptionLabel.setText(DESCRIPTION + ((TreeItem)e.item).getText());
    return;
  }
  Indicator indicator=indicatorNode.getIndicatorInstance();
  IndicatorDefinition indicatorDefinition=indicator.getIndicatorDefinition();
  purposeLabel.setText(PURPOSE + MetadataHelper.getPurpose(indicatorDefinition));
  String description=DESCRIPTION + MetadataHelper.getDescription(indicatorDefinition);
  description=splitLongString(description);
  descriptionLabel.setText(description);
}","@Override public void widgetSelected(SelectionEvent e){
  if (null == e.item) {
    return;
  }
  IIndicatorNode indicatorNode=((IIndicatorNode)e.item.getData(INDICATORITEM));
  if (indicatorNode == null) {
    purposeLabel.setText(PURPOSE + ((TreeItem)e.item).getText());
    descriptionLabel.setText(DESCRIPTION + ((TreeItem)e.item).getText());
    return;
  }
  Indicator indicator=indicatorNode.getIndicatorInstance();
  IndicatorDefinition indicatorDefinition=indicator.getIndicatorDefinition();
  purposeLabel.setText(PURPOSE + MetadataHelper.getPurpose(indicatorDefinition));
  String description=DESCRIPTION + MetadataHelper.getDescription(indicatorDefinition);
  description=splitLongString(description);
  descriptionLabel.setText(description);
}",0.9728260869565216
138962,"protected Control createDialogArea(Composite parent){
  Composite comp=(Composite)super.createDialogArea(parent);
  Tree tree=new TooltipTree(comp,SWT.BORDER){
    protected String getItemTooltipText(    TreeItem item){
      if (item.getData(INDICATORITEM) == null) {
        return item.getText();
      }
      IndicatorDefinition indicatorDefinition=((IIndicatorNode)item.getData(INDICATORITEM)).getIndicatorInstance().getIndicatorDefinition();
      String description=MetadataHelper.getDescription(indicatorDefinition);
      return description.equals(PluginConstant.EMPTY_STRING) ? item.getText() : description;
    }
  }
;
  GridDataFactory.fillDefaults().align(SWT.FILL,SWT.FILL).grab(true,true).applyTo(tree);
  ((GridData)tree.getLayoutData()).widthHint=650;
  ((GridData)tree.getLayoutData()).heightHint=380;
  createTreeStructure(tree);
  tree.setLinesVisible(true);
  tree.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      IIndicatorNode indicatorNode=((IIndicatorNode)e.item.getData(INDICATORITEM));
      if (indicatorNode == null) {
        purposeLabel.setText(PURPOSE + ((TreeItem)e.item).getText());
        descriptionLabel.setText(DESCRIPTION + ((TreeItem)e.item).getText());
        return;
      }
      Indicator indicator=indicatorNode.getIndicatorInstance();
      IndicatorDefinition indicatorDefinition=indicator.getIndicatorDefinition();
      purposeLabel.setText(PURPOSE + MetadataHelper.getPurpose(indicatorDefinition));
      String description=DESCRIPTION + MetadataHelper.getDescription(indicatorDefinition);
      description=splitLongString(description);
      descriptionLabel.setText(description);
    }
    private String splitLongString(    String longString){
      if (longString.length() > ROW_MAX_LENGTH) {
        char space=' ';
        for (int i=ROW_MAX_LENGTH; i > 0; i--) {
          if (longString.charAt(i) == space) {
            String substring1=longString.substring(0,i);
            String lineSeparator=System.getProperty(""String_Node_Str"",""String_Node_Str"");
            String substring2=longString.substring(i,longString.length());
            substring2=splitLongString(substring2);
            longString=substring1 + lineSeparator + substring2;
            break;
          }
        }
      }
      return longString;
    }
  }
);
  tree.pack();
  Composite buttomComp=new Composite(comp,SWT.NONE);
  buttomComp.setLayout(new GridLayout());
  buttomComp.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  purposeLabel=new Label(buttomComp,SWT.NULL);
  GridDataFactory.fillDefaults().grab(true,true).applyTo(purposeLabel);
  descriptionLabel=new Label(buttomComp,SWT.NULL);
  GridDataFactory.fillDefaults().grab(true,true).applyTo(descriptionLabel);
  return comp;
}","protected Control createDialogArea(Composite parent){
  Composite comp=(Composite)super.createDialogArea(parent);
  Tree tree=new TooltipTree(comp,SWT.BORDER){
    protected String getItemTooltipText(    TreeItem item){
      if (item.getData(INDICATORITEM) == null) {
        return item.getText();
      }
      IndicatorDefinition indicatorDefinition=((IIndicatorNode)item.getData(INDICATORITEM)).getIndicatorInstance().getIndicatorDefinition();
      String description=MetadataHelper.getDescription(indicatorDefinition);
      return description.equals(PluginConstant.EMPTY_STRING) ? item.getText() : description;
    }
  }
;
  GridDataFactory.fillDefaults().align(SWT.FILL,SWT.FILL).grab(true,true).applyTo(tree);
  ((GridData)tree.getLayoutData()).widthHint=650;
  ((GridData)tree.getLayoutData()).heightHint=380;
  createTreeStructure(tree);
  tree.setLinesVisible(true);
  tree.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (null == e.item) {
        return;
      }
      IIndicatorNode indicatorNode=((IIndicatorNode)e.item.getData(INDICATORITEM));
      if (indicatorNode == null) {
        purposeLabel.setText(PURPOSE + ((TreeItem)e.item).getText());
        descriptionLabel.setText(DESCRIPTION + ((TreeItem)e.item).getText());
        return;
      }
      Indicator indicator=indicatorNode.getIndicatorInstance();
      IndicatorDefinition indicatorDefinition=indicator.getIndicatorDefinition();
      purposeLabel.setText(PURPOSE + MetadataHelper.getPurpose(indicatorDefinition));
      String description=DESCRIPTION + MetadataHelper.getDescription(indicatorDefinition);
      description=splitLongString(description);
      descriptionLabel.setText(description);
    }
    private String splitLongString(    String longString){
      if (longString.length() > ROW_MAX_LENGTH) {
        char space=' ';
        for (int i=ROW_MAX_LENGTH; i > 0; i--) {
          if (longString.charAt(i) == space) {
            String substring1=longString.substring(0,i);
            String lineSeparator=System.getProperty(""String_Node_Str"",""String_Node_Str"");
            String substring2=longString.substring(i,longString.length());
            substring2=splitLongString(substring2);
            longString=substring1 + lineSeparator + substring2;
            break;
          }
        }
      }
      return longString;
    }
  }
);
  tree.pack();
  Composite buttomComp=new Composite(comp,SWT.NONE);
  buttomComp.setLayout(new GridLayout());
  buttomComp.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  purposeLabel=new Label(buttomComp,SWT.NULL);
  GridDataFactory.fillDefaults().grab(true,true).applyTo(purposeLabel);
  descriptionLabel=new Label(buttomComp,SWT.NULL);
  GridDataFactory.fillDefaults().grab(true,true).applyTo(descriptionLabel);
  return comp;
}",0.9908094733121244
138963,"/** 
 * DOC bZhou Comment method ""findValidMigrationTasks"".
 * @return
 */
public static List<IMigrationTask> findWorksapceTasks(){
  List<IMigrationTask> validTasks=findValidTasks();
  Iterator<IMigrationTask> it=validTasks.iterator();
  while (it.hasNext()) {
    IMigrationTask task=it.next();
    if (task.getMigrationTaskType() == MigrationTaskType.DATABASE) {
      it.remove();
    }
  }
  return validTasks;
}","/** 
 * DOC bZhou Comment method ""findValidMigrationTasks"".
 * @return
 */
public static List<IMigrationTask> findWorksapceTasks(){
  List<IMigrationTask> validTasks=getValidTasks();
  Iterator<IMigrationTask> it=validTasks.iterator();
  while (it.hasNext()) {
    IMigrationTask task=it.next();
    if (task.getMigrationTaskType() == MigrationTaskType.DATABASE) {
      it.remove();
    }
  }
  return validTasks;
}",0.9915966386554622
138964,"/** 
 * DOC bZhou Comment method ""findMigrationTaskByType"".
 * @param type
 * @return
 */
public static List<IMigrationTask> findWorkspaceTaskByType(MigrationTaskType type,ProductVersion specifiedVersion){
  List<IMigrationTask> wTasks=findTasksByCategory(MigrationTaskCategory.WORKSPACE);
  List<IMigrationTask> validTasks=new ArrayList<IMigrationTask>();
  for (  IMigrationTask task : wTasks) {
    if (task.getMigrationTaskType() == type) {
      validTasks.add(task);
    }
  }
  if (specifiedVersion != null) {
    ProductVersion currentVersion=CorePlugin.getDefault().getProductVersion();
    return findValidTasks(specifiedVersion,currentVersion,validTasks);
  }
  return validTasks;
}","/** 
 * DOC bZhou Comment method ""findWorkspaceTaskByType"".
 * @param type
 * @param specifiedVersion
 * @return
 */
public static List<IMigrationTask> findWorkspaceTaskByType(MigrationTaskType type,ProductVersion specifiedVersion){
  List<IMigrationTask> validTasks=new ArrayList<IMigrationTask>();
  for (  IMigrationTask task : allTasks) {
    if (task.getMigrationTaskType() == type) {
      validTasks.add(task);
    }
  }
  ProductVersion currentVersion=CorePlugin.getDefault().getProductVersion();
  return getValidTasks(specifiedVersion,currentVersion,validTasks);
}",0.7797947908445146
138965,"/** 
 * make the value range to decrease DOC zshen Comment method ""increamVernier"".
 */
public static void decreaseVernier(){
  if (startNum >= XQueryExpressionUtil.ROWS_PER_PAGE) {
    endNum-=XQueryExpressionUtil.ROWS_PER_PAGE;
    startNum-=XQueryExpressionUtil.ROWS_PER_PAGE;
  }
}","/** 
 * make the value range to decrease DOC zshen Comment method ""increamVernier"".
 */
public static void decreaseVernier(){
  if (startNum >= XQueryExpressionUtil.ROWS_PER_PAGE) {
    startNum-=XQueryExpressionUtil.ROWS_PER_PAGE;
  }
}",0.8888888888888888
138966,"/** 
 * DOC zshen Comment method ""toParseXquery"". get the key parameter for tableNode、startNum.....
 * @param xqueryStr
 */
public static void toParseXquery(String xqueryStr){
  int beginIndex=0;
  int endIndex=0;
  beginIndex=xqueryStr.indexOf(""String_Node_Str"") + 2;
  endIndex=xqueryStr.indexOf(""String_Node_Str"",beginIndex);
  tableNode=xqueryStr.substring(beginIndex,endIndex);
  beginIndex=xqueryStr.indexOf(""String_Node_Str"",endIndex) + 1;
  endIndex=xqueryStr.indexOf(""String_Node_Str"",beginIndex);
  startNum=Integer.parseInt(xqueryStr.substring(beginIndex,endIndex));
  beginIndex=endIndex + 1;
  endIndex=xqueryStr.indexOf(""String_Node_Str"",beginIndex);
  endNum=Integer.parseInt(xqueryStr.substring(beginIndex,endIndex));
  beginIndex=xqueryStr.indexOf(""String_Node_Str"",endIndex) + 6;
  endIndex=xqueryStr.indexOf(""String_Node_Str"",beginIndex);
  columnNodeNameArraystr=xqueryStr.substring(beginIndex,endIndex);
}","/** 
 * DOC zshen Comment method ""toParseXquery"". get the key parameter for tableNode、startNum.....
 * @param xqueryStr
 */
public static void toParseXquery(String xqueryStr){
  int beginIndex=0;
  int endIndex=0;
  beginIndex=xqueryStr.indexOf(""String_Node_Str"") + 2;
  endIndex=xqueryStr.indexOf(""String_Node_Str"",beginIndex);
  tableNode=xqueryStr.substring(beginIndex,endIndex);
  beginIndex=xqueryStr.indexOf(""String_Node_Str"",endIndex) + 1;
  endIndex=xqueryStr.indexOf(""String_Node_Str"",beginIndex);
  startNum=Integer.parseInt(xqueryStr.substring(beginIndex,endIndex));
  beginIndex=xqueryStr.indexOf(""String_Node_Str"",endIndex) + 6;
  endIndex=xqueryStr.indexOf(""String_Node_Str"",beginIndex);
  columnNodeNameArraystr=xqueryStr.substring(beginIndex,endIndex);
}",0.8042452830188679
138967,"/** 
 * make the value range to increase DOC zshen Comment method ""increamVernier"".
 */
public static void increaseVernier(){
  endNum+=XQueryExpressionUtil.ROWS_PER_PAGE;
  startNum+=XQueryExpressionUtil.ROWS_PER_PAGE;
}","/** 
 * make the value range to increase DOC zshen Comment method ""increamVernier"".
 */
public static void increaseVernier(){
  startNum+=XQueryExpressionUtil.ROWS_PER_PAGE;
}",0.8838383838383839
138968,"/** 
 * DOC zshen Comment method ""getExpression"".
 * @return return the xquery statment which use current key parameter.
 */
public static String getExpression(){
  if (tableNode == null) {
    return null;
  }
  expression.delete(0,expression.length());
  expression.append(""String_Node_Str"");
  expression.append(tableNode);
  expression.append(""String_Node_Str"");
  expression.append(tableNode);
  expression.append(""String_Node_Str"");
  expression.append(startNum);
  expression.append(""String_Node_Str"");
  expression.append(endNum);
  expression.append(""String_Node_Str"");
  expression.append(tableNode);
  expression.append(""String_Node_Str"");
  expression.append(columnNodeNameArraystr == null ? ""String_Node_Str"" + tableNode : columnNodeNameArraystr);
  expression.append(""String_Node_Str"");
  return expression.toString();
}","/** 
 * DOC zshen Comment method ""getExpression"".
 * @return return the xquery statment which use current key parameter.
 */
public static String getExpression(){
  if (tableNode == null) {
    return null;
  }
  expression.delete(0,expression.length());
  expression.append(""String_Node_Str"");
  expression.append(tableNode);
  expression.append(""String_Node_Str"");
  expression.append(tableNode);
  expression.append(""String_Node_Str"");
  expression.append(startNum);
  expression.append(""String_Node_Str"");
  expression.append(ROWS_PER_PAGE);
  expression.append(""String_Node_Str"");
  expression.append(tableNode);
  expression.append(""String_Node_Str"");
  expression.append(columnNodeNameArraystr == null ? ""String_Node_Str"" + tableNode : columnNodeNameArraystr);
  expression.append(""String_Node_Str"");
  return expression.toString();
}",0.9886567164179104
138969,"/** 
 * DOC bZhou Comment method ""findMigrationTaskByType"".
 * @param type
 * @return
 */
public static List<IMigrationTask> findWorkspaceTaskByType(MigrationTaskType type,ProductVersion specifiedVersion){
  List<IMigrationTask> wTasks=findTasksByCategory(MigrationTaskCategory.WORKSPACE);
  List<IMigrationTask> validTasks=new ArrayList<IMigrationTask>();
  for (  IMigrationTask task : wTasks) {
    IWorkspaceMigrationTask wTask=(IWorkspaceMigrationTask)task;
    if (wTask.getMigrationTaskType() == type) {
      validTasks.add(task);
    }
  }
  if (specifiedVersion != null) {
    ProductVersion currentVersion=CorePlugin.getDefault().getProductVersion();
    return findValidTasks(specifiedVersion,currentVersion,validTasks);
  }
  return validTasks;
}","/** 
 * DOC bZhou Comment method ""findMigrationTaskByType"".
 * @param type
 * @return
 */
public static List<IMigrationTask> findWorkspaceTaskByType(MigrationTaskType type,ProductVersion specifiedVersion){
  List<IMigrationTask> wTasks=findTasksByCategory(MigrationTaskCategory.WORKSPACE);
  List<IMigrationTask> validTasks=new ArrayList<IMigrationTask>();
  for (  IMigrationTask task : wTasks) {
    if (task.getMigrationTaskType() == type) {
      validTasks.add(task);
    }
  }
  if (specifiedVersion != null) {
    ProductVersion currentVersion=CorePlugin.getDefault().getProductVersion();
    return findValidTasks(specifiedVersion,currentVersion,validTasks);
  }
  return validTasks;
}",0.9476584022038568
138970,"public DQRespositoryView(){
  super();
  DQStructureManager manager=DQStructureManager.getInstance();
  if (manager.isNeedCreateStructure()) {
    manager.createDQStructure();
  }
  if (manager.isNeedMigration()) {
    MigrationTaskManager.doMigrationTask(MigrationTaskManager.findNonDBValidTasks());
  }
}","public DQRespositoryView(){
  super();
  DQStructureManager manager=DQStructureManager.getInstance();
  if (manager.isNeedCreateStructure()) {
    manager.createDQStructure();
  }
  if (manager.isNeedMigration()) {
    MigrationTaskManager.doMigrationTask(MigrationTaskManager.findWorksapceTasks());
  }
}",0.9689034369885434
138971,"/** 
 * DOC bZhou Comment method ""registerSection"".
 * @param composite
 */
public void registerSection(ExpandableComposite composite){
  expandCompositeList.add(composite);
}","/** 
 * DOC bZhou Comment method ""registerSection"".
 * @param composite
 */
public void registerSection(ExpandableComposite composite){
  expandCompositeList.add(composite);
  currentEditor.getToolBar().getEditorBarWrap().addExpandableComposite(composite);
}",0.8083140877598153
138972,"/** 
 * DOC mzhao Get all indicators (depend on the folder which is SYSTEM or USER DEFINE).
 * @param IndicatorFodler
 * @return
 */
public Collection<IndicatorDefinition> getAllIndicators(IFolder IndicatorFodler){
  try {
    searchAllIndicators(IndicatorFodler);
  }
 catch (  CoreException e) {
    log.error(e,e);
  }
  return idsMap.values();
}","/** 
 * DOC mzhao Get all indicators (depend on the folder which is SYSTEM or USER DEFINE).
 * @param indicatorFodler
 * @return
 */
public Collection<IndicatorDefinition> getAllIndicators(IFolder indicatorFodler){
  try {
    searchAllIndicators(indicatorFodler);
  }
 catch (  CoreException e) {
    log.error(e,e);
  }
  return idsMap.values();
}",0.991404011461318
138973,"/** 
 * DOC bZhou Comment method ""isAnalysis"". Decide it's an analysis or not.
 * @param element
 * @return
 */
public static boolean isAnalysis(ModelElement element){
  return ANALYSIS.doSwitch(element) != null;
}","/** 
 * DOC bZhou Comment method ""isAnalysis"". Decide it's an analysis or not.
 * @param element
 * @return
 */
public static boolean isAnalysis(EObject element){
  return ANALYSIS.doSwitch(element) != null;
}",0.9645390070921984
138974,"/** 
 * DOC bZhou Comment method ""isReport"". Decide it's a report or not.
 * @param element
 * @return
 */
public static boolean isReport(ModelElement element){
  return REPORT.doSwitch(element) != null;
}","/** 
 * DOC bZhou Comment method ""isReport"". Decide it's a report or not.
 * @param element
 * @return
 */
public static boolean isReport(EObject element){
  return REPORT.doSwitch(element) != null;
}",0.9629629629629628
138975,"/** 
 * DOC bZhou Comment method ""isSoftware"". Decide it's a software system or not.
 * @param element
 * @return
 */
public static boolean isSoftware(ModelElement element){
  return SOFTWARE.doSwitch(element) != null;
}","/** 
 * DOC bZhou Comment method ""isSoftware"". Decide it's a software system or not.
 * @param element
 * @return
 */
public static boolean isSoftware(EObject element){
  return SOFTWARE.doSwitch(element) != null;
}",0.9655172413793104
138976,"/** 
 * DOC bZhou Comment method ""isPattern"". Decide it's a pattern or not.
 * @param element
 * @return
 */
public static boolean isPattern(ModelElement element){
  return PATTERN.doSwitch(element) != null;
}","/** 
 * DOC bZhou Comment method ""isPattern"". Decide it's a pattern or not.
 * @param element
 * @return
 */
public static boolean isPattern(EObject element){
  return PATTERN.doSwitch(element) != null;
}",0.9636803874092008
138977,"/** 
 * DOC bZhou Comment method ""isID"". Decide it's an indicator defintion or not.
 * @param element
 * @return
 */
public static boolean isID(ModelElement element){
  return INDICATOR_DEFINITION.doSwitch(element) != null;
}","/** 
 * DOC bZhou Comment method ""isID"". Decide it's an indicator defintion or not.
 * @param element
 * @return
 */
public static boolean isID(EObject element){
  return INDICATOR_DEFINITION.doSwitch(element) != null;
}",0.9662921348314608
138978,"/** 
 * DOC bZhou Comment method ""isDataProvider"". Decide it's a data provider or not.
 * @param element
 * @return
 */
public static boolean isDataProvider(ModelElement element){
  return SwitchHelpers.TDDATAPROVIDER_SWITCH.doSwitch(element) != null;
}","/** 
 * DOC bZhou Comment method ""isDataProvider"". Decide it's a data provider or not.
 * @param element
 * @return
 */
public static boolean isDataProvider(EObject element){
  return SwitchHelpers.TDDATAPROVIDER_SWITCH.doSwitch(element) != null;
}",0.9700598802395208
138979,"/** 
 * DOC bZhou Comment method ""isDQRule"". Decide it's a dq rule or not.
 * @param element
 * @return
 */
public static boolean isDQRule(ModelElement element){
  return DQ_RULE.doSwitch(element) != null;
}","/** 
 * DOC bZhou Comment method ""isDQRule"". Decide it's a dq rule or not.
 * @param element
 * @return
 */
public static boolean isDQRule(EObject element){
  return DQ_RULE.doSwitch(element) != null;
}",0.9633251833740832
138980,"private Resource getResourceFromFile(){
  EMFUtil util=new EMFUtil();
  Resource definitionsFile=null;
  IPath definitionPath=ResourceManager.getLibrariesFolder().getFullPath().append(FILENAME);
  URI uri=URI.createPlatformResourceURI(definitionPath.toString(),false);
  try {
    definitionsFile=util.getResourceSet().getResource(uri,true);
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + uri);
    }
  }
 catch (  RuntimeException e) {
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + e.getMessage(),e);
    }
  }
  if (definitionsFile == null) {
    needCopy=true;
    uri=URI.createPlatformPluginURI(PLUGIN_PATH,false);
    try {
      definitionsFile=util.getResourceSet().getResource(uri,true);
      if (log.isDebugEnabled()) {
        log.debug(""String_Node_Str"" + uri);
      }
    }
 catch (    RuntimeException e) {
      if (log.isDebugEnabled()) {
        log.debug(""String_Node_Str"" + e.getMessage(),e);
      }
    }
  }
  if (definitionsFile == null) {
    definitionsFile=util.getResourceSet().getResource(URI.createFileURI(""String_Node_Str"" + File.separator + PLUGIN_PATH),true);
  }
  if (definitionsFile == null) {
    log.error(""String_Node_Str"" + PLUGIN_PATH + ""String_Node_Str""+ uri);
    return null;
  }
  return definitionsFile;
}","private Resource getResourceFromFile(){
  EMFUtil util=new EMFUtil();
  Resource definitionsFile=null;
  IPath definitionPath=ResourceManager.getLibrariesFolder().getFullPath().append(FILENAME);
  URI uri=URI.createPlatformResourceURI(definitionPath.toString(),false);
  try {
    definitionsFile=util.getResourceSet().getResource(uri,true);
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + uri);
    }
  }
 catch (  RuntimeException e) {
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + e.getMessage(),e);
    }
  }
  if (definitionsFile == null) {
    uri=URI.createPlatformPluginURI(PLUGIN_PATH,false);
    try {
      definitionsFile=util.getResourceSet().getResource(uri,true);
      if (log.isDebugEnabled()) {
        log.debug(""String_Node_Str"" + uri);
      }
    }
 catch (    RuntimeException e) {
      if (log.isDebugEnabled()) {
        log.debug(""String_Node_Str"" + e.getMessage(),e);
      }
    }
  }
  if (definitionsFile == null) {
    definitionsFile=util.getResourceSet().getResource(URI.createFileURI(""String_Node_Str"" + File.separator + PLUGIN_PATH),true);
  }
  if (definitionsFile == null) {
    log.error(""String_Node_Str"" + PLUGIN_PATH + ""String_Node_Str""+ uri);
    return null;
  }
  return definitionsFile;
}",0.9926098794243484
138981,"public static DefinitionHandler getInstance(){
  if (instance == null) {
    instance=new DefinitionHandler();
    if (instance.needCopy) {
      instance.copyDefinitionsIntoFolder(ResourceManager.getLibrariesFolder());
    }
  }
  return instance;
}","public static DefinitionHandler getInstance(){
  if (instance == null) {
    instance=new DefinitionHandler();
    if (!getTalendDefinitionFile().exists()) {
      instance.copyDefinitionsIntoFolder(ResourceManager.getLibrariesFolder());
    }
  }
  return instance;
}",0.637065637065637
138982,"@Override public boolean valid(){
  talendDefinitionFile=DefinitionHandler.getTalendDefinitionFile();
  return talendDefinitionFile.exists() && super.valid();
}","@Override public boolean valid(){
  talendDefinitionFile=DefinitionHandler.getTalendDefinitionFile();
  try {
    talendDefinitionFile.getParent().refreshLocal(IResource.DEPTH_ONE,null);
  }
 catch (  CoreException e) {
  }
  return talendDefinitionFile.exists() && super.valid();
}",0.7239819004524887
138983,"public void inputChanged(Viewer viewer,Object oldInput,Object newInput){
}","public void inputChanged(Viewer viewer,Object oldInput,Object newInput){
  ItemRecord.clear();
}",0.8705882352941177
138984,"public ItemRecord[] populate(ItemRecord[] elements,boolean checkExisted){
  List<ItemRecord> inValidRecords=new ArrayList<ItemRecord>();
  for (  ItemRecord record : elements) {
    checkDependency(record);
    if (checkExisted) {
      checkExisted(record);
    }
    if (!record.isValid()) {
      inValidRecords.add(record);
    }
  }
  if (elements.length != 0) {
    ItemRecord anyRecord=elements[0];
    retrieveProjectName(anyRecord);
  }
  versionFile=new Path(basePath).append(""String_Node_Str"").toFile();
  return inValidRecords.toArray(new ItemRecord[inValidRecords.size()]);
}","public ItemRecord[] populate(ItemRecord[] elements,boolean checkExisted){
  List<ItemRecord> inValidRecords=new ArrayList<ItemRecord>();
  for (  ItemRecord record : elements) {
    checkDependency(record);
    if (checkExisted) {
      checkExisted(record);
    }
    if (!record.isValid()) {
      inValidRecords.add(record);
    }
  }
  if (elements.length != 0) {
    ItemRecord anyRecord=elements[0];
    retrieveProjectName(anyRecord);
  }
  versionFile=new Path(basePath).append(VERSION_PATH).toFile();
  return inValidRecords.toArray(new ItemRecord[inValidRecords.size()]);
}",0.9786507258753202
138985,"public void finish(ItemRecord[] records) throws IOException {
  ItemRecord.clear();
  IFile defintionFile=ResourceManager.getLibrariesFolder().getFile(""String_Node_Str"");
  if (!defintionFile.exists()) {
    DefinitionHandler.getInstance();
  }
  Display.getDefault().asyncExec(new Runnable(){
    public void run(){
      if (versionFile != null) {
        ProductVersion version=WorkspaceVersionHelper.getVesion(new Path(versionFile.getAbsolutePath()));
        List<IMigrationTask> migrationTasks=MigrationTaskManager.findWorkspaceTaskByType(MigrationTaskType.FILE,version);
        MigrationTaskManager.doMigrationTask(migrationTasks);
      }
      CorePlugin.getDefault().refreshWorkSpace();
      CorePlugin.getDefault().refreshDQView();
    }
  }
);
}","public void finish(ItemRecord[] records) throws IOException {
  ItemRecord.clear();
  File defFile=new Path(basePath).append(DEFINITION_PATH).toFile();
  if (defFile.exists()) {
    File defintionFile=ResourceManager.getRootProject().getFile(DEFINITION_PATH).getLocation().toFile();
    FilesUtils.copyFile(defFile,defintionFile);
  }
  Display.getDefault().asyncExec(new Runnable(){
    public void run(){
      if (versionFile != null) {
        ProductVersion version=WorkspaceVersionHelper.getVesion(new Path(versionFile.getAbsolutePath()));
        List<IMigrationTask> migrationTasks=MigrationTaskManager.findWorkspaceTaskByType(MigrationTaskType.FILE,version);
        MigrationTaskManager.doMigrationTask(migrationTasks);
      }
      CorePlugin.getDefault().refreshWorkSpace();
      CorePlugin.getDefault().refreshDQView();
    }
  }
);
}",0.8034825870646766
138986,"/** 
 * DOC bZhou Comment method ""create"".
 * @param fileExtension
 * @return
 */
public AElementPersistance create(String fileExtension){
  if (FactoriesUtil.ANA.equals(fileExtension)) {
    return createAnalysisWrite();
  }
 else   if (FactoriesUtil.REP.equals(fileExtension)) {
    return createReportWriter();
  }
 else   if (FactoriesUtil.PROV.equals(fileExtension)) {
    return createDataProviderWriter();
  }
 else   if (FactoriesUtil.PATTERN.equals(fileExtension)) {
    return createPatternWriter();
  }
 else   if (FactoriesUtil.UDI.equals(fileExtension)) {
    return createUDIndicatorWriter();
  }
 else   if (FactoriesUtil.DQRULE.equals(fileExtension)) {
    return createdRuleWriter();
  }
 else   if (FactoriesUtil.SOFTWARE_SYSTEM.equals(fileExtension)) {
    return createSoftwareSystemWriter();
  }
 else   if (FactoriesUtil.TALEND_DEFINITION.equals(fileExtension)) {
    return createSYSIndicatorWriter();
  }
  return null;
}","/** 
 * DOC bZhou Comment method ""create"".
 * @param element
 * @return
 */
public AElementPersistance create(ModelElement element){
  if (element instanceof Analysis) {
    return createAnalysisWrite();
  }
 else   if (element instanceof Report) {
    return createReportWriter();
  }
 else   if (element instanceof DataProvider) {
    return createDataProviderWriter();
  }
 else   if (element instanceof Pattern) {
    return createPatternWriter();
  }
 else   if (element instanceof IndicatorDefinition) {
    return createUDIndicatorWriter();
  }
 else   if (element instanceof Rule) {
    return createdRuleWriter();
  }
 else   if (element instanceof SoftwareSystem) {
    return createSoftwareSystemWriter();
  }
 else   if (element instanceof IndicatorDefinition) {
    return createSYSIndicatorWriter();
  }
  return null;
}",0.5025295109612141
138987,"private void copyFileToFolder(InputStream inputStream,String fileName,IFolder folder) throws CoreException {
  if (inputStream == null) {
    return;
  }
  IFile file=folder.getFile(fileName);
  if (file.exists()) {
    return;
  }
  file.create(inputStream,false,null);
}","private void copyFileToFolder(InputStream inputStream,String fileName,IFolder folder) throws CoreException {
  if (inputStream == null) {
    return;
  }
  IFile file=folder.getFile(fileName);
  if (!file.exists()) {
    file.create(inputStream,false,null);
    ModelElement modelElement=ModelElementFileFactory.getModelElement(file);
    if (modelElement != null) {
      AElementPersistance writer=ElementWriterFactory.getInstance().create(file.getFileExtension());
      if (writer != null) {
        writer.save(modelElement);
      }
    }
  }
}",0.5571776155717761
138988,"/** 
 * DOC bZhou Comment method ""getVesion"".
 * @param versionFile
 * @return
 */
public static ProductVersion getVesion(IPath versionPath){
  File versionFile=versionPath == null ? null : versionPath.toFile();
  if (productVersion == null) {
    try {
      if (versionFile != null && versionFile.exists()) {
        Properties pros=new Properties();
        pros.load(new FileInputStream(versionFile));
        String version=pros.getProperty(VERSION);
        if (version != null && !""String_Node_Str"".equals(version)) {
          productVersion=ProductVersion.fromString(version);
        }
      }
 else {
        productVersion=new ProductVersion(0,0,0);
      }
    }
 catch (    Exception e) {
      log.error(e,e);
    }
  }
  return productVersion;
}","/** 
 * DOC bZhou Comment method ""getVesion"".
 * @param versionFile
 * @return
 */
public static ProductVersion getVesion(IPath versionPath){
  File versionFile=versionPath == null ? null : versionPath.toFile();
  ProductVersion pVersion=null;
  try {
    if (versionFile != null && versionFile.exists()) {
      Properties pros=new Properties();
      pros.load(new FileInputStream(versionFile));
      String version=pros.getProperty(VERSION);
      if (version != null && !""String_Node_Str"".equals(version)) {
        pVersion=ProductVersion.fromString(version);
      }
    }
 else {
      pVersion=new ProductVersion(0,0,0);
    }
  }
 catch (  Exception e) {
    log.error(e,e);
  }
  return pVersion;
}",0.9102040816326532
138989,"@Override protected boolean doExecute() throws Exception {
  ModelElement[] allElements=ModelElementFileFactory.getALLElements(false);
  for (  ModelElement element : allElements) {
    String propertyPath=MetadataHelper.getPropertyPath(element);
    if (propertyPath == null) {
      DQRuleWriter writer=ElementWriterFactory.getInstance().createdRuleWriter();
      writer.savePerperties(element);
    }
 else {
      IFile propertyFile=ResourcesPlugin.getWorkspace().getRoot().getFile(new Path(propertyPath));
      if (!propertyFile.exists()) {
        DQRuleWriter writer=ElementWriterFactory.getInstance().createdRuleWriter();
        writer.savePerperties(element);
      }
    }
  }
  return true;
}","@Override protected boolean doExecute() throws Exception {
  ModelElement[] allElements=ModelElementFileFactory.getALLElements(false);
  for (  ModelElement element : allElements) {
    AElementPersistance writer=ElementWriterFactory.getInstance().create(element);
    writer.save(element);
  }
  return true;
}",0.471976401179941
138990,"@Override public void widgetSelected(SelectionEvent e){
  TreeItem item=(TreeItem)e.item;
  File sfile=(File)item.getData();
  IFile sIFile=ResourceService.file2IFile(sfile);
  if (sIFile != null) {
    File[] dependencies=computeDependencies(sIFile);
    for (    File file : dependencies) {
      repositoryTree.setChecked(file,item.getChecked());
    }
    repositoryTree.refresh();
  }
  checkForErrors();
}","@Override public void widgetSelected(SelectionEvent e){
  TreeItem item=(TreeItem)e.item;
  ItemRecord record=(ItemRecord)item.getData();
  if (record.getFile().isFile()) {
    for (    File file : record.getDependencyMap().keySet()) {
      repositoryTree.setChecked(ItemRecord.findRecord(file),item.getChecked());
    }
    repositoryTree.refresh();
    checkForErrors();
  }
}",0.6050632911392405
138991,"/** 
 * DOC bZhou Comment method ""computInput"".
 * @return
 */
private Object computInput(){
  IWorkspace workspace=ResourcesPlugin.getWorkspace();
  return specifiedPath == null ? ResourceManager.getRootProject().getLocation().toFile() : workspace.getRoot().getFolder(new Path(specifiedPath)).getLocation().toFile();
}","/** 
 * DOC bZhou Comment method ""computInput"".
 * @return
 */
private ItemRecord computInput(){
  IWorkspace workspace=ResourcesPlugin.getWorkspace();
  File file=specifiedPath == null ? ResourceManager.getRootProject().getLocation().toFile() : workspace.getRoot().getFolder(new Path(specifiedPath)).getLocation().toFile();
  return new ItemRecord(file);
}",0.9053254437869822
138992,"/** 
 * DOC bZhou Comment method ""getElements"".
 * @return
 */
public ItemRecord[] getElements(){
  List<ItemRecord> itemRecords=new ArrayList<ItemRecord>();
  Object[] checkedElements=repositoryTree.getCheckedElements();
  for (  Object obj : checkedElements) {
    if (obj instanceof File) {
      File file=(File)obj;
      if (file.isFile()) {
        itemRecords.add(new ItemRecord(file));
      }
    }
  }
  return itemRecords.toArray(new ItemRecord[itemRecords.size()]);
}","/** 
 * DOC bZhou Comment method ""getElements"".
 * @return
 */
public ItemRecord[] getElements(){
  List<ItemRecord> itemRecords=new ArrayList<ItemRecord>();
  Object[] checkedElements=repositoryTree.getCheckedElements();
  for (  Object obj : checkedElements) {
    if (obj instanceof ItemRecord) {
      ItemRecord record=(ItemRecord)obj;
      if (record.getFile().isFile()) {
        itemRecords.add(record);
      }
    }
  }
  return itemRecords.toArray(new ItemRecord[itemRecords.size()]);
}",0.8916155419222904
138993,"/** 
 * DOC bZhou Comment method ""addListeners"".
 */
private void addListeners(){
  dirBTN.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      setDirState(dirBTN.getSelection());
    }
  }
);
  archBTN.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      setArchState(archBTN.getSelection());
    }
  }
);
  browseDirBTN.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      String result=openDirectoryDialog();
      if (result != null) {
        dirTxt.setText(result);
      }
    }
    private String openDirectoryDialog(){
      DirectoryDialog dialog=new DirectoryDialog(Display.getDefault().getActiveShell());
      if (dirTxt.getText() != null) {
        dialog.setFilterPath(dirTxt.getText());
      }
      return dialog.open();
    }
  }
);
  browseArchBTN.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      String result=openFileDialog();
      if (result != null) {
        archTxt.setText(result);
      }
    }
    private String openFileDialog(){
      FileDialog dialog=new FileDialog(Display.getDefault().getActiveShell());
      dialog.setFilterExtensions(FILE_EXPORT_MASK);
      if (archTxt.getText() != null) {
        dialog.setFileName(archTxt.getText());
      }
      return dialog.open();
    }
  }
);
  repositoryTree.getTree().addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      TreeItem item=(TreeItem)e.item;
      File sfile=(File)item.getData();
      IFile sIFile=ResourceService.file2IFile(sfile);
      if (sIFile != null) {
        File[] dependencies=computeDependencies(sIFile);
        for (        File file : dependencies) {
          repositoryTree.setChecked(file,item.getChecked());
        }
        repositoryTree.refresh();
      }
      checkForErrors();
    }
  }
);
  dirTxt.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      writer.setBasePath(dirTxt.getText());
      checkForErrors();
    }
  }
);
}","/** 
 * DOC bZhou Comment method ""addListeners"".
 */
private void addListeners(){
  dirBTN.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      setDirState(dirBTN.getSelection());
    }
  }
);
  archBTN.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      setArchState(archBTN.getSelection());
    }
  }
);
  browseDirBTN.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      String result=openDirectoryDialog();
      if (result != null) {
        dirTxt.setText(result);
      }
    }
    private String openDirectoryDialog(){
      DirectoryDialog dialog=new DirectoryDialog(Display.getDefault().getActiveShell());
      if (dirTxt.getText() != null) {
        dialog.setFilterPath(dirTxt.getText());
      }
      return dialog.open();
    }
  }
);
  browseArchBTN.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      String result=openFileDialog();
      if (result != null) {
        archTxt.setText(result);
      }
    }
    private String openFileDialog(){
      FileDialog dialog=new FileDialog(Display.getDefault().getActiveShell());
      dialog.setFilterExtensions(FILE_EXPORT_MASK);
      if (archTxt.getText() != null) {
        dialog.setFileName(archTxt.getText());
      }
      return dialog.open();
    }
  }
);
  repositoryTree.getTree().addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      TreeItem item=(TreeItem)e.item;
      ItemRecord record=(ItemRecord)item.getData();
      if (record.getFile().isFile()) {
        for (        File file : record.getDependencyMap().keySet()) {
          repositoryTree.setChecked(ItemRecord.findRecord(file),item.getChecked());
        }
        repositoryTree.refresh();
        checkForErrors();
      }
    }
  }
);
  dirTxt.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      writer.setBasePath(dirTxt.getText());
      checkForErrors();
    }
  }
);
}",0.9127056672760512
138994,"/** 
 * this check that the folder entered in the target export location exist otherwhise set an erro message and disable export.
 */
protected void checkForErrors(){
  errors=new ArrayList<String>();
  if (!new File(dirTxt.getText()).exists()) {
    errors.add(Messages.getString(""String_Node_Str""));
  }
  ItemRecord[] elements=getElements();
  for (  ItemRecord record : elements) {
    File file=record.getFile();
    IFile iFile=ResourceService.file2IFile(file);
    File[] dependencies=computeDependencies(iFile);
    for (    File depFile : dependencies) {
      if (!repositoryTree.getChecked(depFile)) {
        errors.add(""String_Node_Str"" + record.getElement().getName() + ""String_Node_Str""+ depFile.getName());
      }
    }
  }
  if (!errors.isEmpty()) {
    setErrorMessage(errors.get(0));
  }
 else {
    setErrorMessage(null);
  }
  updatePageStatus();
}","/** 
 * this check that the folder entered in the target export location exist otherwhise set an erro message and disable export.
 */
protected void checkForErrors(){
  errors=new ArrayList<String>();
  if (!new File(dirTxt.getText()).exists()) {
    errors.add(Messages.getString(""String_Node_Str""));
  }
  ItemRecord[] elements=getElements();
  for (  ItemRecord record : elements) {
    Map<File,ModelElement> dependencyMap=record.getDependencyMap();
    for (    File depFile : dependencyMap.keySet()) {
      if (!repositoryTree.getChecked(ItemRecord.findRecord(depFile))) {
        ModelElement element=dependencyMap.get(depFile);
        String fileName=element != null ? element.getName() : depFile.getName();
        errors.add(""String_Node_Str"" + record.getElement().getName() + ""String_Node_Str""+ fileName);
      }
    }
  }
  if (!errors.isEmpty()) {
    setErrorMessage(errors.get(0));
  }
 else {
    setErrorMessage(null);
  }
  updatePageStatus();
}",0.7766884531590414
138995,"public Object[] getChildren(Object parentElement){
  List<File> objects=new ArrayList<File>();
  if (parentElement instanceof File) {
    File[] files=((File)parentElement).listFiles();
    if (files != null) {
      for (      File file : files) {
        if (file.isDirectory() && isValidDirectory(file)) {
          objects.add(file);
        }
        if (file.isFile() && isValidFile(file)) {
          objects.add(file);
        }
      }
    }
  }
  return objects.toArray();
}","public Object[] getChildren(Object parentElement){
  if (parentElement instanceof ItemRecord) {
    ItemRecord record=(ItemRecord)parentElement;
    return record.getChildern();
  }
  return new Object[0];
}",0.1823444283646888
138996,"public Object getParent(Object element){
  if (element instanceof File) {
    return ((File)element).getParent();
  }
  return null;
}","public Object getParent(Object element){
  if (element instanceof ItemRecord) {
    return ((ItemRecord)element).getParent();
  }
  return null;
}",0.9142857142857144
138997,"public boolean hasChildren(Object element){
  if (element instanceof File) {
    File[] listFiles=((File)element).listFiles();
    return listFiles != null && listFiles.length > 0;
  }
  return false;
}","public boolean hasChildren(Object element){
  if (element instanceof ItemRecord) {
    File[] listFiles=((ItemRecord)element).getFile().listFiles();
    return listFiles != null && listFiles.length > 0;
  }
  return false;
}",0.8732394366197183
138998,"@Override public String getText(Object element){
  if (element instanceof File) {
    File file=(File)element;
    String fileExtension=new Path(file.getName()).getFileExtension();
    if (file.isFile() && FactoriesUtil.isEmfFile(fileExtension)) {
      EMFUtil emfUtil=new EMFUtil();
      URI uri=URI.createFileURI(file.getAbsolutePath());
      Resource resource=emfUtil.getResourceSet().getResource(uri,true);
      EList<EObject> contents=resource.getContents();
      if (contents != null && !contents.isEmpty()) {
        EObject eObject=contents.get(0);
        if (eObject instanceof ModelElement) {
          return ((ModelElement)eObject).getName();
        }
      }
    }
    return file.getName();
  }
  return super.getText(element);
}","@Override public String getText(Object element){
  if (element instanceof ItemRecord) {
    ItemRecord recored=(ItemRecord)element;
    File file=recored.getFile();
    String fileExtension=new Path(file.getName()).getFileExtension();
    if (file.isFile() && FactoriesUtil.isEmfFile(fileExtension)) {
      EMFUtil emfUtil=new EMFUtil();
      URI uri=URI.createFileURI(file.getAbsolutePath());
      Resource resource=emfUtil.getResourceSet().getResource(uri,true);
      EList<EObject> contents=resource.getContents();
      if (contents != null && !contents.isEmpty()) {
        EObject eObject=contents.get(0);
        if (eObject instanceof ModelElement) {
          return ((ModelElement)eObject).getName();
        }
      }
    }
    return file.getName();
  }
  return super.getText(element);
}",0.9305019305019304
138999,"@Override public Image getImage(Object element){
  Image image=null;
  if (element instanceof File) {
    File file=(File)element;
    String fileName=file.getName();
    if (file.isDirectory()) {
      image=ImageLib.getImage(ImageLib.FOLDERNODE_IMAGE);
      EResourceConstant constant=resolveResourceConstant(fileName);
      if (constant != null) {
switch (constant) {
case DATA_PROFILING:
          image=ImageLib.getImage(ImageLib.DATA_PROFILING);
        break;
case METADATA:
      image=ImageLib.getImage(ImageLib.METADATA);
    break;
case LIBRARIES:
  image=ImageLib.getImage(ImageLib.LIBRARIES);
break;
case ANALYSIS:
break;
case REPORTS:
break;
case EXCHANGE:
image=ImageLib.getImage(ImageLib.EXCHANGE);
break;
case DB_CONNECTIONS:
case MDM_CONNECTIONS:
image=ImageLib.getImage(ImageLib.CONNECTION);
break;
default :
break;
}
}
}
 else {
if (fileName.endsWith(FactoriesUtil.ANA)) {
image=ImageLib.getImage(ImageLib.ANALYSIS_OBJECT);
}
 else if (fileName.endsWith(FactoriesUtil.REP)) {
image=ImageLib.getImage(ImageLib.REPORT_OBJECT);
}
 else if (fileName.endsWith(FactoriesUtil.PATTERN)) {
image=ImageLib.getImage(ImageLib.PATTERN_REG);
}
 else if (fileName.endsWith(FactoriesUtil.DQRULE)) {
image=ImageLib.getImage(ImageLib.DQ_RULE);
}
 else if (fileName.endsWith(FactoriesUtil.PROV)) {
image=ImageLib.getImage(ImageLib.TD_DATAPROVIDER);
}
 else if (fileName.endsWith(FactoriesUtil.UDI)) {
image=ImageLib.getImage(ImageLib.IND_DEFINITION);
}
}
}
return image != null ? image : super.getImage(element);
}","@Override public Image getImage(Object element){
  Image image=null;
  if (element instanceof ItemRecord) {
    ItemRecord record=(ItemRecord)element;
    File file=record.getFile();
    String fileName=file.getName();
    if (file.isDirectory()) {
      image=ImageLib.getImage(ImageLib.FOLDERNODE_IMAGE);
      EResourceConstant constant=resolveResourceConstant(fileName);
      if (constant != null) {
switch (constant) {
case DATA_PROFILING:
          image=ImageLib.getImage(ImageLib.DATA_PROFILING);
        break;
case METADATA:
      image=ImageLib.getImage(ImageLib.METADATA);
    break;
case LIBRARIES:
  image=ImageLib.getImage(ImageLib.LIBRARIES);
break;
case ANALYSIS:
break;
case REPORTS:
break;
case EXCHANGE:
image=ImageLib.getImage(ImageLib.EXCHANGE);
break;
case DB_CONNECTIONS:
case MDM_CONNECTIONS:
image=ImageLib.getImage(ImageLib.CONNECTION);
break;
default :
break;
}
}
}
 else {
if (fileName.endsWith(FactoriesUtil.ANA)) {
image=ImageLib.getImage(ImageLib.ANALYSIS_OBJECT);
}
 else if (fileName.endsWith(FactoriesUtil.REP)) {
image=ImageLib.getImage(ImageLib.REPORT_OBJECT);
}
 else if (fileName.endsWith(FactoriesUtil.PATTERN)) {
image=ImageLib.getImage(ImageLib.PATTERN_REG);
}
 else if (fileName.endsWith(FactoriesUtil.DQRULE)) {
image=ImageLib.getImage(ImageLib.DQ_RULE);
}
 else if (fileName.endsWith(FactoriesUtil.PROV)) {
image=ImageLib.getImage(ImageLib.TD_DATAPROVIDER);
}
 else if (fileName.endsWith(FactoriesUtil.UDI)) {
image=ImageLib.getImage(ImageLib.IND_DEFINITION);
}
}
}
return image != null ? image : super.getImage(element);
}",0.9656513285806868
139000,"public void finish(ItemRecord[] records) throws IOException {
  if (PluginChecker.isTDCPLoaded()) {
    IFile projFile=ResourceManager.getRootProject().getFile(""String_Node_Str"");
    copyFileToDest(projFile);
  }
  IFile versionFile=WorkspaceVersionHelper.getVersionFile();
  copyFileToDest(versionFile);
}","public void finish(ItemRecord[] records) throws IOException {
  ItemRecord.clear();
  if (PluginChecker.isTDCPLoaded()) {
    IFile projFile=ResourceManager.getRootProject().getFile(""String_Node_Str"");
    copyFileToDest(projFile);
  }
  IFile versionFile=WorkspaceVersionHelper.getVersionFile();
  copyFileToDest(versionFile);
}",0.9654088050314464
